{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "BATCHTSO", "INMTNODE": "CVC", "INMTUID": "NODE", "INMFTIME": "20101205180711000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3585946, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 6080, "INMRECFM": "FB", "INMDIR": 40, "INMDSNAM": "JOLDIST.JOL60.CMDLIB", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3585946, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3585946, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"JOLDIST.JOL60.CMDLIB": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 6080, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 14, "DVAMAXRC": 32760, "DVACYL": 885, "DVATRK": 15, "DVATRKLN": 47968, "DVAOVHD": 256, "num_header_records": 2, "DS1REFD": "100339", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\r'", "DS1LSTAR": "b'\\x00G\\x0e'", "DS1TRBAL": "b'\"\\xe0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x030\\x00\\x04\\x8b@\\xb8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x030\\x00\\x04\\x8b@\\xb8'", "b'X\\xf3\"\\xc0\\x00\\x00\\x00`\\x00\\x00\\x00f\\x00\\x03\\x00^'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$INIT": {"ttr": 17409, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00(\\x01\\x085o\\x01\\x10\\x06\\x9f\\x10 \\x00\\\\\\x00F\\x00+\\xc3\\xd3\\xc1\\xd9\\xd2\\xc5@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2008-12-21T00:00:00", "modifydate": "2010-03-10T10:20:28", "lines": 92, "newlines": 70, "modlines": 43, "user": "CLARKE"}, "text": "  STOPNET:MACRO ;\n      DCL   STEPLIB DS SYS2.JOL40.LOAD;\n STOP1: DCL STOPNET PROG\n       STEPLIB READS STEPLIB;\n     RUN STOP1;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$APPLIC": {"ttr": 260, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "$applic: macro;\n\n        popup\n           (flash 'NONE OF THESE OPTIONS')\n           (flash 'HAVE BEEN CONFIGURED')\n           ('Accounts'             )\n           ('Data Entry  '         )\n           ('Maintenance (SMP)'    )\n           ('Spreadsheets'         )\n           ('Word Processing'      )\n           ('User Menus     '      )\n           ;\n /*\n        popup\n           ('NONE OF THESE OPTIONS')\n           ('HAVE BEEN CONFIGURED')\n           ('Accounts'                  ,$account)\n           ('Data Entry  '              ,$dataent)\n           ('Maintenance (SMP)'         ,$spreads)\n           ('Spreadsheets'              ,$spreads)\n           ('Word Processing'           ,$wp)\n           ('User Menus     '           ,$usermen)\n           ;\n */\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$CATLG": {"ttr": 262, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x91\\x05$'", "ispf": false, "text": "catalog:macro;     /* MVS Catalog data set as specified by the User */\n\ndcl %f1                    init('');\ndcl %disk                  init('');\n\n/* If User codes a parameter, then execute the Catalog immediately,\n   otherwise we will show the user a menu */\n\n   if %list(1) \u00ac= ''  then %f1='%list(1)';\n\n   if %f1 \u00ac= '' then goto gotfile;\n\nloop:\n\nPanel  box\n/( ctr hi 'Jol CATALOG Input Panel')\n///\n/('  You can Type the Name of the Data Sets You Wish to Catalog,')\n ('  OR You can Select the Data Set from the Jol Data Set Data Base.')\n////\n/\n('         Disk          ====> ',disk  ,6,'%disk')\n/\n('         Catalog File  ====> ',f1,44,'%f1')\n////\n\nhelpline\n('Enter Starts Processing, F3 Exits, F4 shows Files.');\n\ncheckf1:\n     if Syspfk=3 then exit;\n\n     if %syspfk=4\n     then do;\n         dbfshow  all 'File to Catalog';\n         f1='%showsel';\n     end;\n     if f1=''\n     then do;\n         panel reread from f1 'You must supply a file name';\n         goto checkf1;\n     end;\n\n   if syspfk=3 then exit;   /* Back to Caller */\n\ngotfile:\n   if %disk \u00ac='' then %disk=' On %disk';\n   if %BUILDJOB='YES'\n   then do;\n       BLD04P                  '   Catalog %f1 %disk;';\n       exit;\n   end;\n   catalog %f1 %disk;\n\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$CHKDBF": {"ttr": 264, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "$chkdbf: macro;\n\n/* Check if an output data set is in the Jol DBF. */\n\n dcl %litdsn        init 0;\n dcl %tempdsn       init '';\n dcl %work,syswork  init '';\n\n     if type(list(1)) = 'LIT' then listdsn=1;\n\n     tempdsn ='%list(1)';\n\n /* Check if the parameter is a DSID or a DATA SET */\n\n      %syswork=index(tempdsn,'.');    /* Check if a DSNAME   */\n      if %syswork = 0 then exit;      /* DSID  */\n\nrefind:\n      dbffind  '%tempdsn';     /* Get data set details*/\n\n      if %lastcc\u00ac=0\n      then do;\n\nnotfnd:\n           panel box  /\n           (ctr hi 'Check Data Set in Jol Data Set Data Base')\n           (ctr hi '________________________________________')\n              ////////\n              (ctr flash 'Cannot Find Data Set '\n               hi flash '''%tempdsn''')\n           ////\n           (ctr 'A Program is going to create the Data Set,')\n           (ctr 'and needs to know Space, Record Formats etc.')\n          /(ctr 'Press F4 to supply these details')\n              helpline ('F3 Exits,  F4 to Add Data Set to Data Base')\n              ;\n              if %syspfk=3 then exit;\n              If %syspfk=4\n              then do;\n                   adddsn '%tempdsn';\n                   goto   refind;\n              end;\n              goto notfnd;\n       end;\n\n end;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$COMP": {"ttr": 266, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x82!\\x8f\\x00\\x82!\\x8f\\x152\\x00\\x11\\x00\\x11\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-08-06T00:00:00", "modifydate": "1982-08-06T15:32:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "JOL"}, "text": "   /* THIS IS AN INTERNAL MACRO TO THE JOL COMPILE COMMAND */\n  $COMP:MACRO(\n         %COMPOPT=,           /*SET UP BY COMPILE OR REGISTER */\n         %COPYLIB=,           /*SET UP BY COMPILE OR REGISTER */\n         %SOURCE=,            /*SET UP BY COMPILE OR REGISTER */\n         %SSI='');\n   DCL %$PLI,%$COB,%$ASM,%$FORT  INIT ''    ; /* USED TO COMMUNICATE\n                               LANGUAGES USED BETWEEN MACROS */\n   DCL %O1,%O2,%O3,%O4,%O5,%O6,%O7,%O8,%O9,%O10,\n       %O11,%O12,%O13,%O14,%O15,%O16,%O17,%O18,%O19,%O20,\n       %O21,%O22,%O23,%O24,%O25\n   DCL %PGMNAME,%NAME,%LOAD   INIT '' ; /* REDEFINE IN THIS MACRO*/\n   INCLUDE %LIST(1); /* GET DETAILS FROM PROGRAM REGISTER */\n   SET $%LANG='Y';   /* SET LANGUAGE SWITCH ON            */\n   IF %COPYLIB\u00ac='' THEN %COPYLIB='LIB %COPYLIB';\n   %LANG %SOURCE(%PGMNAME) %COMPOPT %COPYLIB NOLINKQ ;\n   END /* COMPILE MACRO  */   ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$COMPILE": {"ttr": 268, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "compile:macro;\n/* Show Compilers Commands and allow selection by the User */\ndcl %command init('');\n\n/*  notconfg '%syscmd';\n    exit;  */\n\nloop:\npanel option caps;\npanel\n menubar\n('Asm C Pascal plI Link                                     Help')\n/ (ctr %hedcolor  'Compiler Primary Menu')\n/\n(ctr'Place the first character of the command you wish to select in'\n    ' the box')\n(ctr'or code any command directly in the command line.')\n//\n(hi '  Command === > ',command,44,'%command') /* Leave last command */\n//\n('  The following Jol menus are available:')\n/(hi '    A  ' normal 'Asm:    Execute Assembler.')\n\n (hi '    B  ' normal 'Basic:  Execute BASIC.')\n\n (hi '    C  ' normal 'C:      Execute C.')\n\n (hi '    F  ' normal 'F:      Execute Fortran.')\n\n (hi '    P  ' normal 'Pascal: Execute Pascal.')\n\n (hi '    L  ' normal 'Link:   Execute Link Editor.')\n\n (hi '    I  ' normal 'PL/I:   Execute PL/I.')\n\n\nhelpline('Press F1 for Help Screen; F3 to Return To Jol Main Menu')\n;\n\nwaitin:\n\n    if syspfk=3 then do; cls; exit; end;\n    if syspfk\u00ac=0 & syspfk\u00ac=1 & sysmenu=''\n    then do;\n        panel reread;\n        goto waitin;\n    end;\n    if syspfk=1 | sysmenu='HELP' then do;\n   panel %boxcolor box\n// (ctr %hedcolor 'Compiler/Linker Primary Menu Help Panel')\n/(ctr'Enter any Command in the Command Line, or Select a Function.')\n/\n/(ctr'Jol will assist you if you enter any of the following commands')\n (ctr'without parameters:-')\n/(ctr bold 'BASIC, \"C\", ASM, PLI, PAS or PASCAL or LINK')\n/(ctr 'Other functions may be selected with the menu, or you')\n (ctr 'can enter other commands - they will be executed.')\n//(ctr bold yellow 'NOTE')\n/\n (ctr 'If you press Enter ' hi 'without '\n   normal %txtcolor 'any Selection,')\n (ctr 'Jol will let you choose a Data Set from a sorted list')\n (ctr 'of Data Sets and use it as Input to ' hi 'any normal Command.')\n;\n        $comphlp;\n        goto loop;\n    end;\n\n\n    if command \u00ac=''\n    then do;\n        %command;\n        goto loop;\n    end;\n\n    If sysmenu='ASM'\n    then do;\n        asm;\n        exit;\n        popup  /* at 4 */\n           (     'Masm'                               ,masm)\n           (     'Rasm'                               ,rasm)\n           (     'Tasm'                               ,tasm)\n           ;\n    end;\n\n\n    If sysmenu='BASIC'\n    then do;\n        basic;\n        exit;\n        popup  /* at 16 */\n           (     'Basica (Interpreter) '              ,basica)\n           (     'QB (Compiler)        '              ,qb)\n           ;\n    end;\n\n\n    If sysmenu='C'\n    then do;\n        cc;\n        exit;\n        popup  /* at 20 */\n           (     'QC  (Microsoft Quick C) '           ,qc)\n           (     'TC  (Borland   Turboc C)'           ,tc)\n           (     'ZTC (Zortech C)         '           ,ztc)\n           ;\n    end;\n\n\n    If sysmenu='PASCAL'\n    then do;\n        pascal;\n        exit;\n        popup  /* at 24 */\n           (     'QP  (Microsoft Quick Pascal) '      ,qp )\n           (     'TP  (Borland   Turboc Pascal) '     ,tp)\n           ;\n    end;\n\n\n    If sysmenu='LINK'\n    then do;\n        link;\n        exit;\n        popup  /* at 28 */\n           (     'BLINK  (Zortech Linker) '           ,blink)\n           (     'DRLINK (Digital Research Linker)'   ,drlink)\n           (     'LINK   (Microsoft Linker)'          ,link)\n           (     'TLINK  (Borland Linker)'            ,tlink)\n           ;\n    end;\n\n\n    If sysmenu='PLI'\n    then do;\n        pli;\n        exit;\n        popup  /* at 32 */\n           (     'DRPLI  (Digital Research PLI)'      ,drpli)\n           (     'IBMPLI (IBM 370 PLI)'               ,ibmpli)\n           (     'MSPLI  (Microsoft PLI)'             ,ibmpli)\n           (     'TPLI   (Borland PLI)'               ,tpli)\n           ;\n    end;\n\n    goto loop;\n\nend;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DEL": {"ttr": 17667, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x101\\x9f\\x01\\x101\\x9f\\x08E\\x008\\x008\\x00\\x00\\xc3\\xd3\\xc1\\xd9\\xd2\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-11-15T00:00:00", "modifydate": "2010-11-15T08:45:05", "lines": 56, "newlines": 56, "modlines": 0, "user": "CLARKE"}, "text": " /*****************************************************************/\n /**               SUBMIT MACRO            LAST MODIFIED MAY 1987**/\n /**               ------------            BY C. CLARKE          **/\n /**                                                             **/\n /** MODIFIED D. DOUBTFIRE 18.01.83 FOR JCL SUBMITS              **/\n /** MODIFIED C. CLARKE    26.03.87 FOR NETWORKING               **/\n /**                                                             **/\n /** THIS MACRO WILL SUBMIT BOTH JOL JOBS AND JCL JOBS           **/\n /**                                                             **/\n /** TO SUBMIT A JOL JOB SIMPLY PUT -SUBMIT JB1;                 **/\n /** WHERE JB1 IS A MEMBER OF YOUR INCLUDE LIBRARY CONTAINING    **/\n /** JOL CODE.                                                   **/\n /**                                                             **/\n /** TO SUBMIT JCL SIMPLY PUT -SUBMIT '//JOBNAME JOB MSBCLASS=A' **/\n /**                                  '//     EXEC PGM=MYPROG  ' **/\n /** ANY VALID JCL STATEMENTS MAY BE ENCLOSED ON QUOTES .        **/\n /** JOL AND JCL JOBS MAY BE SUBMITTED TOGETHER                  **/\n /**       EG.  -SUBMIT JB1 '//MYJOB1 JOB MSGCLASS=A ETC'        **/\n /**            WILL SUBMIT A JOL MEMBER CALLED JB1 AND A JCL    **/\n /**            JOB CALLED MYJOB1.                               **/\n /*****************************************************************/\nSUBMIT:MACRO NOJOIN  %PI,%PE,%PM,%PJ,%SYMS=,%PROG=,%USING=XX,\n  %NOCAT,%NOCATGDG,%ULIB=,%UMAC=,\n  AFTER,%LET,%PO,\n  %NPI=NPI,%NP=,\n  %PROCLIB='%$JOLINCL',\n  %MACROLIB='%$JOLPREF.JOL%$JOLVERS.CMDLIB');\n /*****************************************************************/\n /******************SYMBOLIC DECLARES *****************************/\n /*****************************************************************/\n DCL DUMMY DS DUMMY NODCB;\n DCL %TYPE INIT '';\n DCL %JCL1,%JCL2,%JCL3,%JCL4,%JCL5,%JCL6,%JCL7,%JCL8,%JCL9,%JCL10,\n     %JCL11,%JCL12,%JCL13,%JCL14,%JCL15,%JCL16,%JCL17,%JCL18,\n     %JCL19,%JCL20,%JCL21,%JCL22,%JCL23,%JCL24,%JCL25,%JCL26,\n     %JCL27,%JCL28,%JCL29,%JCL30    INIT  '';\n DCL %JOL1,%JOL2,%JOL3,%JOL4,%JOL5,%JOL6,\n     %JOL7,%JOL8,%JOL9,%JOL10 INIT '' ;\n DCL %SYM1,%SYM2,%SYM3,%SYM4,%SYM5,%SYM6,\n     %SYM7,%SYM8,%SYM9,%SYM10 INIT '' ;\n\n /* ADDED FOR NETWORKING AND SCHEDULING C.CLARKE MARCH, 1987 */\n DCL %SYSNETID INIT('') EXT;  /* SET IF NETWORK EXECUTING */\n DCL %SYSJOBS1 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSJOBS2 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSNTINC INIT('') EXT;  /* KEEPS INCLUDE DATA SET FOR JOBS      */\n DCL %SYSNTMAC INIT('') EXT;  /* KEEPS JOL MACRO DATA SETS FOR JOBS   */\n DCL %CHK1,%CHK2,%CHK3,%CHK4,%CHK5,%CHK6,\n     %CHK7,%CHK8,%CHK9,%CHK10 INIT '' ;\n\n DCL %CHECK,%CHKLEN,%CHLES1        INIT ''      ;\n DCL %JJOB INIT 'NO';\n DCL %JCJOB INIT 'NO';\n\n   /* VARIABLES BELOW USED IN LOOPS FOR SUBSCRIPTS ETC */\n DCL %INDEX                        INIT('1');\n DCL %IND2                         INIT('1');\n DCL %WORK                         INIT('');\n DCL %L,%K                         INIT('');\n /*****************************************************************/\n /*****CHECK THAT THERE IS VALID INPUT TO THIS MACRO***************/\n /*****************************************************************/\n    IF %LIST(1) = '' & %USING = 'XX' THEN STOP 'NO COMPILE INPUT' ;\n\n    IF %PROG='' THEN %PROG='$JOLCP%$JOLVERS';\n\n /*****************************************************************/\n /*****CHECK IF WE ARE NETWORKING, AND AFTER SPECIFIED ************/\n /*****************************************************************/\n    IF %AFTER\u00ac=0 & %SYSNETID=''\n    THEN DO;\n         STOP '''AFTER'' CANCELLED: USE THE NETWORK COMMAND FIRST';\n         EXIT 'SUBMIT ABANDONED';\n    END;\n\n /*****************************************************************/\n /*****CHECK FOR SYMBOLICS TO BE PASSED TO JOL JOBS****************/\n /*****************************************************************/\n    IF %SYMS \u00ac= ''\n    THEN DO;\n          %CHECK = SUBSTR(SYMS,1,1)         ; /* CHECK FOR    */\n          IF %CHECK = '(' THEN                /* BRACKETS     */\n          %SYMS = SUBSTR(SYMS,2)            ; /* AND REMOVE   */\n          %CHKLEN = LENGTH (SYMS);            /* SAME         */\n          %CHECK = SUBSTR(SYMS,%CHKLEN,1)   ;\n          IF %CHECK = ')'\n          THEN  DO                          ;\n              %CHLES1 = %CHKLEN-1           ;\n              %SYMS = SUBSTR(SYMS,1,%CHLES1);\n          END;\n    END;\n /*****************************************************************/\n /*****HANDLE AFTER CLAUSE, IF ANY ********************************/\n /*****************************************************************/\n\n   DCL %SUB     INIT '0';\n   DCL %X       INIT '    IF ';\n   DCL %BRACKET INIT '0';\n/* NOTE THAT JOL VERY NICELY JOINS UP ANY PARMS IN () FOR US, WHICH\n   IS EXACTLY WHAT WE DON'T WANT HERE.\n\n   THEREFORE , WE MUST EXPAND THEM IF THEY ARE FOUND.\n*/\n   IF %AFTER \u00ac=0 THEN DO;\n   %SUB=%AFTER+1;\n LABEL TAFT;\n /* TEST IF JOL COMBINED PARAMETERS FOR US. */\n       %Y='%LIST(%SUB)';\n       %Z=TYPE(Y);\n       IF %Y = '|' | %Y = '&'\n       THEN DO;\n           WRITE FILE($$JCODE) FROM('%X ''ENDED''');\n           %X='    %Y  ';\n           %SUB=%SUB+1;\n           IF %SUB<%SYSNLIST THEN REDO TAFT;\n       END;\n       %WORK='%Y';                 /* SAVE NAME FOR CHECK LATER */\n       %Y='%Y        '; %Y=SUBSTR(Y,1,8);   /* MAKE 8 CHARS LONG */\n       IF %LIST(%SUB)='(' THEN %BRACKET=%BRACKET+1;\n       IF %LIST(%SUB)=')' THEN %BRACKET=%BRACKET-1;\n       IF %Y\u00ac='ENDED' & %Z='LIT'  /* IS IT A JOB NAME ? */\n       THEN DO;          ;        /* YES */\n            %X='%X %%%Y=';        /* YES */\n            %L=INDEX(SYSJOBS1,'%WORK');  /* SEE IF JOB SUBMITTED */\n            %K=INDEX(SYSJOBS2,'%WORK');  /* SEE IF JOB SUBMITTED */\n            IF %L=0 & %K=0\n            THEN DO;\n                STOP 'JOB %WORK NOT YET SUBMITTED:- NETWORK WILL FAIL';\n            END;\n       END;\n/*     ELSE %X='%X ''ENDED''';    /* SET 'ENDED' */\n       %SUB=%SUB+1;\n       IF %SUB<=%SYSNLIST THEN REDO TAFT;\n    IF %X\u00ac='' THEN  WRITE FILE($$JCODE) FROM('%X ''ENDED''');\n    WRITE FILE($$JCODE) FROM('    THEN DO;');\n    IF %BRACKET\u00ac=0 THEN\n    WRITE 'UNMATCHED PARENTHESES IF AFTER CLAUSE OF SUBMIT';\n END;   /* OF AFTER PREPROCESSING */\n\n /*****************************************************************/\n /**************TEST FOR TYPE OF SUBMISSION  JOL OR JCL ***********/\n /*****************************************************************/\n LABEL TTYPE;\n       %IND2=%INDEX;\n       %WORK=LENGTH(INDEX);\n       IF %WORK=1 THEN %INDEX='000%INDEX';\n       IF %WORK=2 THEN %INDEX='00%INDEX';\n       IF %WORK=3 THEN %INDEX='0%INDEX';\n       IF %LIST(%INDEX)\n       THEN DO;\n            %TYPE=TYPE(LIST%INDEX);\n            %JCL$='JCL%IND2';\n            %JOL$='JOL%IND2';\n            %SYM$='SYM%IND2';\n            %CHK$='CHK%IND2';\n /*****************************************************************/\n /*****IF JCL IS REQUIRED SET JCL SYMBOLICS AND JOB TEST **********/\n /*****************************************************************/\n           IF %TYPE='LIT'\n           THEN DO;\n                IF %SYSNETID\u00ac=''       /* ARE WE NETWORKING ? */\n                THEN DO;\n                     IF %JCJOB='NO'    /* ANY JCL SUBMITTED YET ? */\n                     THEN DO;\n                          IF %SYSLABEL='' THEN\n                          DO;\n                              STOP 'FOR JCL NETWORKING, YOU MUST CODE A\n LABEL ON THE SUBMIT STATEMENT';\n                              STOP 'SUBMIT FAILED';\n                              EXIT;\n                          END;\n                         %WORK='%SYSLABEL:         ';\n                         %WORK=SUBSTR(WORK,1,9); /* MAKE 9 CHARS LONG */\n                         WRITE FILE($$JCODE) FROM('%WORK NETSUB');\n                         %WORK='%SYSLABEL        ';\n                         %WORK=SUBSTR(WORK,1,8); /* MAKE 8 CHARS LONG */\n                         WRITE FILE($$JSTAT) FROM('%%%WORK='''';');\n                         %WORK='%SYSLABEL';\n                     END;\n                     ELSE %WORK='';\n                     WRITE FILE($$JCODE) FROM('''%LIST(%IND2)''');\n                END;\n                %JCJOB='YES';\n                SET %JCL$='%LIST(%IND2)';\n           END;\n /*****************************************************************/\n /*****IF JOL SUBMISSION SUBSTITUTE SYMBOLICS FOR CARD FILE********/\n /*****************************************************************/\n           IF %TYPE='CHAR'         /* JOL JOB HERE */\n           THEN DO;\n                %USING=' JOLIN ';\n                %JJOB='YES';\n                IF %SYSNETID=''    /* ORDINARY SUBMIT HERE */\n                THEN DO;\n                     SET %SYM$='*  JOL/%SYMS;';\n                     SET %JOL$='   INCLUDE %LIST(%IND2);';\n                END;\n                IF %SYSNETID\u00ac=''   /* WE ARE IN A NETWORK HERE */\n                THEN DO;\n                     IF %JCJOB='YES'\n                     THEN DO;\n                         STOP 'WHEN NETWORKING, YOU CANNOT SUBMIT A JCL\nJOB AND A JOL JOB IN THE SAME SUBMIT COMMAND';\n                         STOP 'USE SEPERATE SUBMIT.  SUBMIT ENDED';\n                         EXIT;\n                     END;\n                     %WORK='         NETSUB %LIST(%IND2)';\n                     WRITE FILE($$JCODE) FROM(WORK);\n                     IF %SYMS\u00ac='' THEN\n                     WRITE FILE($$JCODE) FROM(\n          '           SYMS(''%SYMS'')');\n                     WRITE FILE($$JCODE) FROM(\n          '           %NPI %PO %LET %PE %PM %PJ %NP %NOCAT %NOCATGDG;');\n                     %WORK='%LIST(%IND2)        ';\n                     %WORK=SUBSTR(WORK,1,8);   /* MAKE 8 CHARS LONG */\n                     WRITE FILE($$JSTAT) FROM('%%%WORK='''';');\n                     %WORK='%LIST(%IND2)';\n                END;\n           END;\n       END;\n       %L=LENGTH(SYSJOBS1);  /* SAVE SUBMITTED JOBS */\n       IF %WORK\u00ac=''          /* 2ND LINE OF JCL JOB ? */\n       THEN DO;              /* NO */\n           IF %L<240 THEN %SYSJOBS1='%SYSJOBS1,%WORK';\n           ELSE %SYSJOBS2='%SYSJOBS2,%WORK';\n       END;\n       %INDEX=%INDEX+1;\n       IF %AFTER=0 THEN IF %LIST(%INDEX) THEN REDO TTYPE;\n       IF %AFTER\u00ac=0 THEN IF %INDEX<%AFTER THEN REDO TTYPE;\n       IF %AFTER\u00ac=0\n       THEN DO;\n           IF %JCJOB='YES'\n           THEN WRITE FILE($$JCODE) FROM('    ;');\n           WRITE FILE($$JCODE) FROM('    END;');\n       END;\n /*****************************************************************/\n /*****IF NETWORKING, THEN WRITE OUT OPTIONS, AND END *************/\n /*****************************************************************/\n       IF %SYSNETID\u00ac=''\n       THEN DO;\n           IF %JCJOB='YES'\n           THEN WRITE FILE($$JCODE) FROM('    ;');\n           IF %UMAC\u00ac=' ' THEN %SYSNTMAC='%UMAC';  /* SAVE FOR ENDNET */\n           IF %ULIB\u00ac=' ' THEN %SYSNTINC='%ULIB';  /* SAVE FOR ENDNET */\n           EXIT;\n       END;\n /*****************************************************************/\n /*****SET UP CARD FILE FOR JOL BATCH PROGRAM       ***************/\n /*****************************************************************/\n    DCL JOLIN * REPLACE JOL;\n%SYM1\n%JOL1\n%CHK1\n%SYM2\n%JOL2\n%CHK2\n%SYM3\n%JOL3\n%CHK3\n%SYM4\n%JOL4\n%CHK4\n%SYM5\n%JOL5\n%CHK5\n%SYM6\n%JOL6\n%CHK6\n%SYM7\n%JOL7\n%CHK7\n%SYM8\n%JOL8\n%CHK8\n%SYM9\n%JOL9\n%CHK9\n%SYM10\n%JOL10\n%CHK10\nEOF;\n /*****************************************************************/\n /*****SET UP CARD FILE FOR JCL BATCH PROGRAM       ***************/\n /*****************************************************************/\n  DCL CARDS * REPLACE;\n%JCL1\n%JCL2\n%JCL3\n%JCL4\n%JCL5\n%JCL6\n%JCL7\n%JCL8\n%JCL9\n%JCL10\n%JCL11\n%JCL12\n%JCL13\n%JCL14\n%JCL15\n%JCL16\n%JCL17\n%JCL18\n%JCL19\n%JCL20\n%JCL21\n%JCL22\n%JCL23\n%JCL24\n%JCL25\n%JCL26\n%JCL27\n%JCL28\n%JCL29\n%JCL30\nEOF;\n /*****************************************************************/\n /*****SET UP USERS JOL LIBRARIES *********************************/\n /*****************************************************************/\n         IF %PI \u00ac= '' THEN %NPI = '' ;\n         IF %UMAC\u00ac=' ' THEN %UMAC='%UMAC||';\n         ELSE IF %SYSUID \u00ac= ' ' THEN %UMAC = '%SYSUID.JOL ||';\n         IF %ULIB\u00ac=' ' THEN %ULIB='%ULIB||';\n         ELSE IF %SYSUID \u00ac= ' ' THEN %ULIB = '%SYSUID.JOL ||';\n         IF %NP='' THEN DCL $$JPRINT PRINTER VBA 150,160;\n                   ELSE DCL $$JPRINT DS 'NULLFILE';\n\n /*****************************************************************/\n /*****SET UP JOL BATCH COMPILE DECLARATIONS AND RUN STATEMENT*****/\n /*****************************************************************/\n IF %JJOB='YES' THEN DO;\n DCL $$JCL       SYSOUT='(A,INTRDR)' FB 80,80 BUFNO=1;\n DCL $$JLOAD     DS %$JOLPREF.JOL%$JOLVERS.LOAD ;\n DCL $$JINCL     DS %$JOLINCL;\n DCL $$JMACRO    DS %$JOLPREF.JOL%$JOLVERS.CMDLIB ;\n DCL $$JWORK1    DS SYSDA FB 80,800 600 BLKS NORLSE ;\n DCL $$JWORK2    DS SYSDA VB 200,800 600 BLKS NORLSE ;\n DCL %PROG       PROG\n      $$JPRINT   WRITES $$JPRINT\n      $$JCL      WRITES $$JCL\n      $$JLOAD    READS  $$JLOAD\n      $$JINCL    READS  %ULIB  $$JINCL\n      $$JMACRO   READS  %UMAC  $$JMACRO\n      $$JWORK1   WRITES $$JWORK1\n      $$JWORK2   WRITES $$JWORK2\n      $$JIN      READS  %USING ;\n%SYSLABEL:       RUN %PROG PARM\n      '%NPI,%PO,%LET,%PE,%PM,%PJ,%NP,%NOCAT,%NOCATGDG/ ';\n END;\n /*****************************************************************/\n /*****SET UP JCL BATCH STATEMENTS TO SUBMIT JCL JOB **************/\n /*****************************************************************/\n IF %JCJOB='YES'\n  THEN DO;\n  DCL DUMMYIN DS DUMMY;\n  DCL PRINTFIL  PRINTER NODCB;\n  DCL OUTJCL SYSOUT='(A,INTRDR)';\n   IEBGENER: DCL IEBGENER PROG\n             SYSUT1 READS CARDS\n             SYSUT2 WRITES OUTJCL\n             SYSIN  READS DUMMYIN\n             SYSPRINT WRITES PRINTFIL;\n     RUN IEBGENER ;\n END ;\n END ; /* END OF MACRO */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOSHLP1": {"ttr": 271, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "$doshlp1: macro;\n      help;\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DSIDVS": {"ttr": 273, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "$dsid_vs: macro;\n\n /* Called by various routines to convert DSID details to VSAM */\n\n dcl %work      init('');    /* Work Field               */\n dcl %l         init('');    /* Work Field               */\n dcl %x         init('');    /* Work Field               */\n dcl %tempind   init('');    /* Filled in by INDEX Macro */\n dcl %tempdata  init('');\n dcl %tempclus  init('');\n DCL %SYSVSWK1  INIT('') EXT; /* Work Area for CLUSTER               */\n\n    %SYSVSWK1='';             /* Clear Work areas                    */\n\n    if %zdsn   \u00ac=''\n    then do;\n       %sysvswk1='NAME(%zdsn)';\n       %sysvsnme=' %zdsn';\n    end;\n\n    if %zprim \u00ac=0\n    then do;\n        if %zspacetp='C' then %sysvswk1='%sysvswk1 CYL(';\n        if %zspacetp='T' then %sysvswk1='%sysvswk1 TRK(';\n        if %zspacetp='R' then %sysvswk1='%sysvswk1 REC(';\n        %sysvswk1='%sysvswk1%zprim %zsec) ';\n    end;\n\n    zvolumes=strip(zvolumes);\n    if %zvolumes \u00ac='' then %sysvswk1=' %sysvswk1 VOL(%zvolumes)';\n    if %zbufno   \u00ac='' then %sysvswk1=' %sysvswk1 BUFFERS(%zbufno)';\n    if %zbufl    \u00ac='' then %sysvswk1=' %sysvswk1 BUFSP(%zbufl)';\n    if %zavrec   \u00ac='' then %sysvswk1=' %sysvswk1 RECSZ(%zavrec)';\n\n    if %zkeylen \u00ac='' | %zrkp     \u00ac=''\n    then  %sysvswk1=' %sysvswk1 KEYS(%zkeylen %zrkp)';\n\n    if %zexpdt \u00ac=''\n    then do;\n       if %zretpd ='' then %sysvswk1='%sysvswk1 TO(%zexpdt)';\n       else                %sysvswk1='%sysvswk1 FOR(%zexpdt)';\n    end;\n\nend  /* $dsid_vs macro */;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$FILES": {"ttr": 513, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "$files: macro;\n\n     dcl tempch   init '';\n\nloop:\n     popup\n        ('Add/Update Jol Data Set DBF ')\n    /*  ('Browse'                             ,viewmenu)      */\n        ('Catalog (Mvs etc only)')\n    /*  ('Directory/Listcat/Change/Exec'      ,dir)           */\n    /*  ('Edit'                               ,edit)          */\n    /*  ('Find Text (Grep)'                   ,find)          */\n        ('Get Info'                           ,$getinfo)\n        ('List File')\n    /*  ('Os (Drop to Unix, Dos or TSO)'      ,$os)           */\n        ('Print File'                         ,print)\n    /*  ('Search for Files'                   ,search)        */\n        ('Type a File'                        ,type)\n        ('Quit (Stop Jol)')\n        ('Utility (Copy, Sort, Rename etc)'   ,$fileut)\n        ('eXit ')\n        ;\n\n        If substr(syspop,1,3)='ADD'\n        &  %system\u00ac='SHELL'\n        then do;\n            popup\n            ( 'DataSet to Jol Data Base'      ,adddsn)\n            ( 'Erase   '                      ,eradbf)\n            ( 'Model   '                      ,addmodel)\n            ( 'Program '                      ,register)\n            ( 'pRinter '                      ,addprint)\n            ;\n        end;\n\n        If substr(syspop,1,7)='CATALOG'\n        then do;\n           if %system='SHELL'\n           then do;\n              panel box\n              //////\n              (ctr hi 'Support for Generation Data Sets')\n              (ctr hi 'and Partitioned Data Sets')\n              (ctr hi 'is not yet Implemeneted')\n              ;\n           end;\n/*         if %system='SHELL'          then catalog; */\n           else                             $catlg;  /* MVS etc */\n        end;\n        If substr(syspop,1,4)='LIST'\n        then do;\n           if %system='SHELL'          then type;\n           else                             print;  /* MVS etc */\n        end;\n        If substr(syspop,1,4)='QUIT'   then exit quit;\n        If syspop='EXIT'               then exit quit;\n\n\n        if %lastcc = 99\n        &  %syspop \u00ac= ''\n        then do;\n            write ' ';\n            write ' ';\n            write 'Command for ''%syspop'' Not Found';\n            write ' ';\n            write 'Either load it from your Jol Disk,';\n            write 'or, if you have added or altered the command,';\n            write 'place it in the correct file or sub-directory';\n            write ' ';\n            write 'Press Enter to Continue';\n            read tempch;\n        end;\n/*    if syspop \u00ac='' then goto loop; */\n    end;\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$FILEST": {"ttr": 515, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x01\\t\\x02\\x1f\\x01\\t\\x02\\x1f\\x10G\\x00P\\x00P\\x00\\x00\\xd1\\xd6\\xd3\\xf6\\xf0@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-01-21T00:00:00", "modifydate": "2009-01-21T10:47:26", "lines": 80, "newlines": 80, "modlines": 0, "user": "JOL60"}, "text": "$files: macro;\n\n     dcl tempch   init '';\n\nloop:\n     popup\n        ('Add/Update Jol Data Set DBF ')\n    /*  ('Browse'                             ,viewmenu)      */\n        ('Catalog (Mvs etc only)')\n        ;\n     popup\n        ('Add/Update Jol Data Set DBF ')\n    /*  ('Browse'                             ,viewmenu)      */\n        ('Catalog (Mvs etc only)')\n    /*  ('Directory/Listcat/Change/Exec'      ,dir)           */\n    /*  ('Edit'                               ,edit)          */\n    /*  ('Find Text (Grep)'                   ,find)          */\n        ('Get Info'                           ,$getinfo)\n        ('List File')\n    /*  ('Os (Drop to Unix, Dos or TSO)'      ,$os)           */\n        ('Print File'                         ,print)\n    /*  ('Search for Files'                   ,search)        */\n        ('Type a File'                        ,type)\n        ('Quit (Stop Jol)')\n        ('Utility (Copy, Sort, Rename etc)'   ,$fileut)\n        ('eXit ')\n        ;\n\n        If substr(syspop,1,3)='ADD'\n        &  %system\u00ac='SHELL'\n        then do;\n            popup\n            ( 'DataSet to Jol Data Base'      ,adddsn)\n            ( 'Erase   '                      ,eradbf)\n            ( 'Model   '                      ,addmodel)\n            ( 'Program '                      ,register)\n            ( 'pRinter '                      ,addprint)\n            ;\n        end;\n\n        If substr(syspop,1,7)='CATALOG'\n        then do;\n           if %system='SHELL'\n           then do;\n              panel box\n              //////\n              (ctr hi 'Support for Generation Data Sets')\n              (ctr hi 'and Partitioned Data Sets')\n              (ctr hi 'is not yet Implemeneted')\n              ;\n           end;\n/*         if %system='SHELL'          then catalog; */\n           else                             $catlg;  /* MVS etc */\n        end;\n        If substr(syspop,1,4)='LIST'\n        then do;\n           if %system='SHELL'          then type;\n           else                             print;  /* MVS etc */\n        end;\n        If substr(syspop,1,4)='QUIT'   then exit quit;\n        If syspop='EXIT'               then exit quit;\n\n\n        if %lastcc = 99\n        &  %syspop \u00ac= ''\n        then do;\n            write ' ';\n            write ' ';\n            write 'Command for ''%syspop'' Not Found';\n            write ' ';\n            write 'Either load it from your Jol Disk,';\n            write 'or, if you have added or altered the command,';\n            write 'place it in the correct file or sub-directory';\n            write ' ';\n            write 'Press Enter to Continue';\n            read tempch;\n        end;\n/*    if syspop \u00ac='' then goto loop; */\n    end;\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$FILEUT": {"ttr": 518, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "$fileut:macro;\n     %sysstmt='';\nloop:\n     popup\n        ('Backup'                     ,backup)\n        ('Copy'                       ,copy)\n        ('Delete'                     ,del)\n        ('Format Disk or Tape'        ,format)\n        ('Load/Restore'               ,restore)\n        ('Merge Files'                ,merge)\n /*     ('mOve Files'                 ,move) */\n        ('Sort Files'                 ,sort)\n        ('Rename'                     ,rename)\n        ;\n\n    if %lastcc = 99\n    &  %syspop \u00ac= ''\n    then do;\n        write ' ';\n        write ' ';\n        write 'Command for ''%syspop'' Not Found';\n        write ' ';\n        write 'Either load it from your Jol Disk,';\n        write 'or, if you have added or altered the command,';\n        write 'place it in the correct file or sub-directory';\n        write ' ';\n        write 'Press any Key to Continue';\n        a=inkey();\n    end;\n /* if syspop \u00ac='' then goto loop; */\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$GETEXDS": {"ttr": 520, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "$getinds: macro;\n /* Get details for a program execution from the User */\nredopan:\n\n    Panel  box\n    /( ctr hi 'Execute Program ' cyan '%pgmname '\n           hi 'DDNAME Details')\n    ///////\n\n    /('    %list(1) =====>',showsel,44,'')\nhelpline\n('F3 Exits, F4 Select from Jol Data Base, F5 Select from Catalog.');\n\n     if %syspfk=3 then exit;\n\n     if %syspfk=0 & showsel='' then goto redopan;\n\n     if %syspfk=4\n     then do;\n        dbfshow all '%list(1)';\n     end;\n\n     if %syspfk=5\n     then do;\n        showdsn all '%list(1)';\n     end;\n\n     if %showsel='' then redo redopan;\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$GETINDS": {"ttr": 522, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "$getinds: macro;\nredopan:\n\n     %retdsn = '';\n\n    Panel  box\n    /( ctr hi 'Input Data Set Selection')\n    /( ctr hi '%list(1)')\n    ///////\n\n    /('    %list(2) ',file,44,'')\nhelpline\n('F3 Exits, F4 Select from Jol Data Base, F5 Select from Catalog.');\n\n     if %syspfk=3 then exit;\n\n     if %syspfk=0 & file='' then goto redopan;\n\n     if %syspfk=4\n     then do;\n        dbfshow all '%list(2)';\n        file='%showsel';\n     end;\n\n     if %syspfk=5\n     then do;\n        showdsn all '%list(2)';\n        file='%showsel';\n     end;\n\n     %retdsn = '%file';\n     if %retdsn='' then redo redopan;\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$GETINFO": {"ttr": 524, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "joldemo:macro;\n                 /* Information of some of Jol Facilities */\n\ndcl %command init('');\n\nloop:\npanel option caps;\n    panel %boxcolor box\n/ (ctr %hedcolor 'Jol Universal Command Language - Information')\n//////\n( ctr 'Jol is a Universal Command Language, and provides a')\n( ctr 'Common User Interface for:')\n/\n( ctr '* IBM Mainframes')\n( ctr '* Fujitsu Mainframes')\n( ctr '* and Personal Computers.')\n///\n( ctr 'A simple \"Port\" of Jol will soon allow Jol to run')\n( ctr 'on UNIX, MacIntoshs and Crays')\n( ctr '- in fact all the Computers in the World')\nhelpline ('F3 Exits');\nif %syspfk=3 | %syspfk = 15 then exit;\n\n    panel %boxcolor box\n/ (ctr %hedcolor 'Jol Universal Command Language - Information')\n//////\n( ctr 'With Jol, you can do everything you can with MS/DOS or')\n( ctr 'IBM MVS JCL, CLIST, and ISPF with several very important')\n( ctr 'improvements.  For example, most of the commands in Jol')\n( ctr 'are available in Mainframe Jol too.  Therefore you need learn')\n( ctr 'only one Command Language to have your work run on any')\n( ctr 'Personal Computer, Mini or Mainframe.')\nhelpline ('F3 Exits');\nif %syspfk=3 | %syspfk = 15 then exit;\n\n    panel %boxcolor box\n/ (ctr %hedcolor 'Jol Universal Command Language - Information')\n//////\n( ctr 'Notice that the versions of Jol designed to execute jobs on')\n( ctr 'Mainframes have a Data Base of Data Sets so that the EXEC')\n( ctr 'Command allows programs to run on all systems identically,')\n( ctr 'although Data Set Naming conventions do differ.')\n//\n( ctr 'For Mainframe execution, the Jol EXEC command connects the')\n( ctr 'Programs and Data Sets together so that all the extra')\n( ctr 'attributes of Mainframe Data Sets and Programs can be used simply\nhelpline ('F3 Exits');\nif %syspfk=3 | %syspfk = 15 then exit;\n\n    panel %boxcolor box\n/ (ctr %hedcolor 'Jol Universal Command Language - Information')\n////\n( ctr 'Another very important feature is that you can add new')\n( ctr 'commands to Jol to suit your own working style.  This is')\n( ctr 'done with the Jol Macro Language.')\n//\n( ctr 'If you wish to see how some of these commands are built,')\n( ctr 'do examine the .JOL data sets or files with the Jol TYPE')\n( ctr 'instruction.  This allows you to select individual files.')\n( ctr 'from a sorted directory list - you will be able to do this')\n( ctr 'soon as we move into the Jol Menu System.')\nhelpline ('F3 Exits');\nif %syspfk=3 | %syspfk = 15 then exit;\n\n    panel %boxcolor box\n/ (ctr %hedcolor 'Jol Universal Command Language - Information')\n//////\n( ctr 'It is not the intention to provide a full demonstration')\n( ctr 'of Jol on this diskette.')\n/\n( ctr 'What we are providing is simply a \"Taste of Jol\".')\n/\n( ctr 'Due to Disk Space limitations, some of the functions shown on')\n( ctr 'the Jol Menus are not available for this demonstration.')\nhelpline ('F3 Exits');\nif %syspfk=3 | %syspfk = 15 then exit;\n\n\n    panel %boxcolor box\n/ (ctr %hedcolor 'Jol Universal Command Language - Information')\n//\n( ctr 'Some other functions include the REGISTER command,')\n( ctr '(a kind of MAKE facility).')\n/\n( ctr 'After REGISTERing a program to Jol, a simple COMPILE')\n( ctr 'and LINK instruction is sufficent to tell Jol which')\n( ctr 'programming language (etc) the program is written')\n( ctr 'in, how to LINK it.')\n///\n (ctr %hedcolor 'Scheduling and Networking')\n/\n( ctr 'Jol also has a Scheduling and Networking System.')\n( ctr 'This is an important facility, and allows jobs')\n( ctr 'to automatically start on certain days, times, etc.')\nhelpline ('F3 Exits');\nif %syspfk=3 | %syspfk = 15 then exit;\n\n\n    panel %boxcolor box\n/ (ctr %hedcolor 'Jol Universal Command Language - Information')\n///\n( ctr 'Notice particularly that Jol is available for MVS')\n( ctr 'and Fujitsu''s F4 and X8 Operating systems.')\n/\n( ctr 'Naturally, other versions are being developed.')\n///\n (ctr %hedcolor 'SAA')\n/\n( ctr 'IBM''s annoucement of SAA legitimizes the concept')\n( ctr 'of the Jol Universal Command Language.')\n/\n( ctr 'Jol, the first planned Universal Command Language,')\n( ctr 'is available ' hi 'now.')\nhelpline ('F3 Exits');\nif %syspfk=3 | %syspfk = 15 then exit;\n\n\n    panel %boxcolor box\n/ (ctr %hedcolor 'Jol Universal Command Language - Information')\n///\n (ctr %hedcolor 'Documentation')\n//\n( ctr 'Jol is fully documented.  For example, the Jol')\n( ctr 'Reference Manual is well over 600 pages,')\n( ctr 'and a handy Reference Guide is also available.')\n//\n( ctr 'In addition, the Jol Concepts and Facilities Manual,')\n( ctr 'and similar manuals, provide important background reading')\n( ctr 'to Managers, Programmers and Users alike.')\nhelpline ('F3 Exits');\nif %syspfk=3 | %syspfk = 15 then exit;\n\n\n    panel %boxcolor box\n/ (ctr %hedcolor 'Jol Universal Command Language - Information')\n////\n( ctr\n 'Notice that there are two main versions of Jol currently available:')\n/\n('               * The Jol Shell for running work on Personal Computers'\n/\n('               * Mainframe Jol for running work on Mainframes')\n/\n('               * Jol runs on your Personal Computers and creates')\n('                 special instructions to actually run your job')\n('                 on MVS, DOS/VSE, F4, UNIX and FSP.')\n/\n('               * The generic UNIX version will soon be available.')\nhelpline ('F3 Exits');\nif %syspfk=3 | %syspfk = 15 then exit;\n\n\n    panel %boxcolor box\n/ (ctr %hedcolor 'Jol Universal Command Language - Information')\n////\n( ctr\n 'For more information about any of the versions of Jol,')\n( ctr\n 'including lists of available documentation and the')\n( ctr\n 'Computer Aided Instruction Course (PC and Mainframe) contact:')\n//\n('                   CCS-Jol Pty. Ltd,')\n('                   2/31 Queen Street,')\n('                   Melbourne,')\n('                   Australia, 3000.')\n/\n('                   Telephone (03)-822-3503')\n('                   Fax       (03)-822-3535')\nhelpline ('F3 Exits');\nif %syspfk=3 | %syspfk = 15 then exit;\n\n\n    panel %boxcolor box\n/ (ctr %hedcolor 'Jol Universal Command Language - Information')\n////\n( ctr\n 'We will now enter the Jol Menu System.')\n///\n( ctr\n 'You may exit the Menus by pressing F3.')\n;\nend;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$GETOUDS": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x006\\x01\\x042\\x0f\\x01\\x042\\x0f\\x08&\\x00+\\x00+\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-11-15T00:00:00", "modifydate": "2004-11-15T08:26:36", "lines": 43, "newlines": 43, "modlines": 0, "user": "IBMUSER"}, "text": "$getouds: macro;\nredopan:\n\n        %retdsn = '';\n\n    Panel  box\n    /( ctr hi 'Output Data Set Selection')\n    /( ctr hi '%list(1)')\n    ///////\n\n    /('    %list(2) ',file,44,'')\nhelpline\n('F3 Exits, F4 Select from Jol Data Base, F5 Select from Catalog.');\n\n     if %syspfk=3 then exit;\n\n     if %syspfk=0 & file='' then goto redopan;\n\n     if %syspfk=4\n     then do;\n        dbfshow  ;\n        file='%showsel';\n        %retdsn = '%file';\n        if %retdsn = ''\n        then redo redopan;\n        exit;                        /* can exit, must be in DBF */\n     end;\n\n     if %syspfk=5\n     then do;\n       showdsn;\n        %retdsn = '%file';\n        if %retdsn = ''\n        then redo redopan;\n     end;\n\n/* Here, the data set was entered manually, and so\n   we had better check that it is the the DBF */\n\n     %retdsn = '%file';\n\n     $chkdbf retdsn;                 /* Check if in Data Base */\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$JOB": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00T\\x01\\t\\x02_\\x01\\t\\x02_\\x06'\\x00a\\x00a\\x00\\x01\\xd1\\xd6\\xd3\\xf6\\xf0@@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2009-01-25T00:00:00", "modifydate": "2009-01-25T06:27:54", "lines": 97, "newlines": 97, "modlines": 1, "user": "JOL60"}, "text": "$job:MACRO;\n /* This macro builds a jobcard for the user. The user has a choice\n    of creating a jobcard or using the $job macro  */\n\ndcl $job_done       init('YES') ext;\n\n    if %buildjob = 'YES'\n    then do;\n       panel %boxcolor box\n      / (ctr %hedcolor '%title')\n      / (ctr'The next panel MAY produce a job card.')\n\n      /(ctr'You can choose now to use these Job details each time')\n       (ctr'you run your Jol program. You may fill in the details')\n       (ctr'so they will used each time you use your program, or you')\n       (ctr'may choose to provide the details when you run the program')\n   /*  'Select \"Y\" to use THIS Jobcard or \"N\" to use the values you')\n       (ctr'fill in now.')                            */\n     / ('  Do you want to enter JOB details EACH time? ==>',ANS,1,'N')\n helpline ('F3 Exits without creating a Job Card');\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n if %ans = 'Y' then /* THEY SELECTED TO USE THE $JOB MACRO */\n   do;\n     BLD04P ' $JOB ; ';\n     exit;\n   end;\n    end;\n    %JOBNAME = %SYSUID;\n    IF %LIST(1) \u00ac= '' THEN %JOBNAME = '%JOBNAME%LIST(1)';\n    ELSE %JOBNAME = '%JOBNAME'||'X';\n    %NOTIFY ='%SYSUID';\n    %NAME='%SYSUID';\n    %ACCT='NOACCOUNT';\n    %ACCT='TXXXXXI0XXX,YYYY';\n    IF %SYSUID='OPSG10' THEN %ACCT='T94991I0133,0G10';\n    IF %SYSUID='OPSG13' THEN %ACCT='T94991I0133,0G13';\n panel  box\n      / (ctr %hedcolor 'Job Card Information for %system' )\n      /(ctr 'If the following Job details are not correct,')\n       (ctr 'skip to the item to be changed with the Tab Key.')\n      /(ctr 'When all the details are correct')\n       (ctr 'Press the ENTER or RETURN key.')\n      /('          Jobname        ===>',JOBNAME,8,'%JOBNAME')\n       ('          Programmer     ===>',PGNAME,10,'%SYSUID')\n       ('          Notify User    ===>',NOTY,8,'%SYSUID')\n       ('          Account Code   ===>',ACCNT,30,'%ACCT')\n       ('          Job Class      ===>',CLASS,1,'A')\n       ('          Msgclass       ===>',MSGCLASS,1,'X')\n       ('          User           ===>',USER,8,'%SYSUID')\n       ('          Password       ===>',PASS,8,'')\n       ('          Msglevel       ===>',MSGLV,3,'1,1')\n       ('          Priority       ===>',PRTY,2,'03')\n       ('          Region Size    ===>',SIZE,4,'2048')\n       ('          Time           ===>',TIME,8,'10,2')\n helpline ('F3 Exits without creating a Job Card');\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n      DCL %JOBC INIT '';\n      DCL %JOBC2 INIT '';\n      DCL %JOBC3 INIT '';\n      DCL %JOBEXTRA INIT '';\n      IF  %PGNAME    \u00ac= '' THEN %JOBC = 'name %PGNAME';\n\n      IF  %ACCNT     \u00ac= '' THEN %JOBC = '%JOBC ACCT (%ACCNT)';\n      IF  %CLASS     \u00ac= '' THEN %JOBC2 = '%JOBC2 CLASS %CLASS';\n      IF  %MSGCLASS  \u00ac= '' THEN %JOBC2 = '%JOBC2 MSGCLASS %MSGCLASS';\n      IF  %PASS      \u00ac= '' THEN %JOBEXTRA = 'PASSWORD=%PASS';\n      IF  %USER      \u00ac= '' THEN %JOBEXTRA = '%JOBEXTRA,USER=%USER';\n      IF  %PRTY      \u00ac= '' THEN %JOBC3 = ' PRTY %PRTY';\n      IF  %NOTY      \u00ac= '' THEN %JOBC3 = '%JOBC3 NOTIFY %NOTY';\n      IF  %SIZE      \u00ac= '' THEN %JOBC3 = '%JOBC3 SIZE %SIZE K';\n      IF  %TIME      \u00ac= '' THEN %JOBC3 = '%JOBC3 TIME %TIME ';\n      %a=substr(msglv,1,1);\n      %b=substr(msglv,3,1);\n\n      IF  %A = '1' THEN %JOBC2 = '%JOBC2 PJCL';\n      ELSE %JOBC2 = '%JOBC2 NPJCL';\n      IF  %B = '1' THEN %JOBC2 = '%JOBC2 PALLOC';\n      ELSE %JOBC2 = '%JOBC2 NPALLOC';\n\n    if %buildjob = 'YES'\n    then do;\n/*    BLD04P\n         'dcl $job_done       init(''YES'') ext;'; */\n      BLD04P '%JOBNAME:JOB ';\n      IF %JOBC     \u00ac= '' THEN BLD04P '       %JOBC';\n      IF %JOBC2    \u00ac= '' THEN BLD04P '      %JOBC2';\n      IF %JOBC3    \u00ac= '' THEN BLD04P '      %JOBC3';\n\n      IF %JOBEXTRA \u00ac= '' THEN BLD04P ' JOBEXTRA=''%JOBEXTRA'';';\n\n      IF %JOBEXTRA \u00ac= '' THEN BLD04P ' JOBEXTRA=%JOBEXTRA ;';\n      ELSE BLD04P '                  ; ';\n   end;\n\n   else\n%JOBNAME: JOB %jobc %jobc2 %jobc3;\n END; /* OF MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$JOB2": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x135\\x00'\\x00'\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:35:00", "lines": 39, "newlines": 39, "modlines": 0, "user": "JOL"}, "text": "./ ADD NAME=$JOB    .JOL\n $JOB:MACRO;                                                            000100\n DCL %JOBNAME INIT ' ';                                                 000200\n DCL %MSGCLASS,%NOTIFY,%CLASS,%SIZE,%TIME,%NAME,                        000300\n                    %SYSACCT INIT '';                                   000400\n %JOBNAME = %SYSUID;                                                    000500\n IF %LIST(1) THEN %JOBNAME=%JOBNAME%LIST(1);                            000600\n %NOTIFY ='%SYSUID';                                                    000700\n %NAME='%SYSUID';                                                       000800\n %ACCT='NOACCOUNT';                                                     000900\n %ACCT='TXXXXXI0XXX,YYYY';                                              001000\n IF %SYSUID='OPSG10' THEN %ACCT='T94991I0133,0G10';                     001100\n IF %SYSUID='OPSG13' THEN %ACCT='T94991I0133,0G13';                     001200\n IF %SYSUID='OPSG14' THEN %ACCT='T94991I0133,0G14';                     001300\n PANEL ('IF THE FOLLOWING JOB DETAILS ARE NOT CORRECT,')                001400\n       ('   SKIP TO ITEM TO BE CHANGED WITH THE TAB KEY')               001500\n       ('   Until ALL THE DETAILS ARE CORRECT')                         001600\n     / ('   ENTER THE DATA WITH THE ENTER OR RETURN KEY')               001700\n     //('JOBNAME  ===>',JOBNAME,8,'%JOBNAME')                           001800\n       ('MSGCLASS ===>',TSOCLASS,1,'X')                                 001900\n       ('NOTIFY   ===>',NOTIFY,7,'%NOTIFY')                             002000\n       ('CLASS    ===>',CLASS,1,'C')                                    002100\n       ('REGION   ===>',SIZE,4,'512')                                   002200\n       ('TIME     ===>',TIME,8,'3,3')                                   002300\n       ('PRTY     ===>',PRTY,2,'10')                                    002400\n       ('NAME     ===>',NAME,20,'%NAME')                                002500\n       ('ACCOUNT  ===>',SYSACCT,20,'%ACCT')                             002600\n      ;                                                                 002700\n      IF %TSOCLASS ='' THEN %MSGCLASS='MSGCLASS %TSOCLASS';             002800\n      IF %NOTIFY   ='' THEN %NOTIFY  ='NOTIFY %NOTIFY';                 002900\n      IF %CLASS ='' THEN %CLASS='CLASS %CLASS';                         003000\n      IF %SIZE     ='' THEN %SIZE='SIZE %SIZE K';                       003100\n      IF %TIME     ='' THEN %TIME    ='TIME %TIME ';                    003200\n      IF %PRTY     ='' THEN %PRTY    ='PRTY %PRTY';                     003300\n      IF %NAME     ='' THEN %NAME    ='NAME %NAME';                     003400\n      IF %SYSACCT  ='' THEN %SYSACCT ='ACCT (SYSACCT)';                 003500\n %JOBNAME: JOB %MSGCLASS %NOTIFY %CLASS %SIZE %TIME %NAME               003600\n                    %SYSACCT ;                                          003700\n END;                                                                   003800\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$JOLPROF": {"ttr": 18189, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00E\\x01\\x085o\\x01\\x103\\x9f\\x06X\\x00;\\x00)\\x00\\x19\\xd1\\xd6\\xd3\\xf6\\xf0@@@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "2008-12-21T00:00:00", "modifydate": "2010-12-05T06:58:45", "lines": 59, "newlines": 41, "modlines": 25, "user": "JOL60"}, "text": "ujy02p:macro;\n    write f($jobs) from('%list(1)');\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$OS": {"ttr": 776, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "$os: macro;\n\n/* Drop to DOS, Unix or TSO.\n\n   For DOS, we'll drop to dos */\n\n\n /* If running in MVS or VSE modes, we must temporarily enter\n    call command becuase RUN operates differently !! */\n\n        syspop='';\n        cls;\n        if %system \u00ac='SHELL'\n        then call 'command';\n        else run 'command ';\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$PERSOPT": {"ttr": 778, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "$persopt: macro;\n\n    if %system='SHELL'\n    then\n        popup\n           ('Configure'                   ,$config)\n           ('DOS options'                 ,dosopt)\n           ('Print')\n           ('Trace Instructions')\n           ;\n    else\n        popup\n           ('Buildjob'                    ,buildjob)\n     /*    ('Configure'                   ,$config)  */\n     /*    ('DOS options'                 ,dosopt)   */\n           ('FSP  ')\n           ('MVS/MSP')\n           ('VSE  ')\n           ('Print')\n           ('Trace Instructions')\n           ;\n\n        If syspop='MVS/MSP'           then jolopt mvs;\n        If syspop='FSP'               then notconfg Fsp /*jolopt x8*/;\n        If syspop='VSE'               then notconfg VSE /*jolopt vse*/;\n        If substr(syspop,1,5)='TRACE'\n        then do;\n            popup ('On') ('None');\n            If syspop='ON'  then jolopt trace on;\n            If syspop='NONE' then jolopt trace off;\n        end;\n        If syspop='PRINT' then do;\n             popup\n                ('Include')\n                ('Jcl    ')\n                ('Macros ')\n                ;\n                If syspop='INCLUDE' then jolopt pi;\n                If syspop='JCL'     then jolopt pjcl;\n                If syspop='MACROS'  then jolopt pm;\n        end;\n    end;\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$PGMLIST": {"ttr": 780, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "$pgmlist:macro;\n/* Show Some of the Jol Macros and allow selection by the User */\ndcl %command init('');\n\nloop:\npanel option caps;\npanel %boxcolor box\n menubar\n('Commands  User_Program                       Exit Quit Help')\n/ (ctr %hedcolor  'Run Single Program Primary Menu')\n/\n(ctr'Place the first character of the command you wish to select in'\n    ' the box')\n(ctr'or code any command directly in the command line.')\n//\n(hi '  Command === > ',command,44,'%command') /* Leave last command */\n//\n('  The following Jol menus are available:')\n/(hi '    C  ' normal 'Commands:       Shows a List of Jol Commands')\n\n (hi '    U  ' normal 'User Programs:  Execute a Toyota Program')\n\n\n////  (ctr hi 'Note:'\n             normal ' You can use <Alt B>, <Alt R> etc as HotKeys')\n             normal ' or Enter the first letter for 3270 Terminals.')\nhelpline('F3 Returns To Jol Main Menu')\n;\n\n\nwaitin:\n\n    if syspfk=3 then do; cls; exit; end;\n    if syspfk\u00ac=0 &  syspfk\u00ac=1 & sysmenu=''\n    then do;\n        panel reread;\n        goto waitin;\n    end;\n\n    If command \u00ac= ' '\n    then do;\n        %command;\n        goto loop;\n    end;\n\n    If sysmenu='COMMANDS'\n    then do;\n        popup  /* at 4 */\n           (     'Copy')\n           (     'ListCat')\n           (     'Merge')\n           (     'Print')\n           (     'Sort')\n           (     'User Program')\n           ;\n           If syspop = 'COPY'     then copy;\n           If syspop = 'LISTCAT'  then listcat;\n           If syspop = 'MERGE'    then merge;\n           If syspop = 'PRINT'    then print;\n           If syspop = 'SORT'     then sort;\n           If substr(syspop,1,4)='USER' then exec;\n    end;\n\n    If substr(sysmenu,1,5) = 'USER_'\n    then do;\n        exec;\n    end;\n\n   goto loop;\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADDDSN": {"ttr": 782, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "ADDDSN:MACRO; /* Add Data Set Name to Data Set Data Base */\n\n/*\n\n       Jol Universal Command Language.\n       Copyright 1969-1991 CCS-JOL Pty. Ltd.,\n                 2/31 Queen St, Melbourne, Australia, 3000.\n\n\n       A D D D S N    C O M M A N D\n\n       This macro adds a data set name to the data base of data sets.\n\n       It:\n\n          1. Gets details for the data set.\n\n             These details are built using the Jol ADDDSN2\n             command.\n\n          2. Writes the details to a data set.\n\n             This data set is added at the end (for the PC version)\n             of the base data set.\n\n             It can be sorted with the special procedure if access\n             becomes too slow.  It is then Binary Searched.\n\n             The mainframe version uses VSAM.\n\nHistory:\n\n       Written C. Clarke 26/8/89:  Add Data Set Data Base.\n\n********************************************************************/\n\n\n\n /* Modified by C. V. Clarke, March, 1991.\n\n\n */\n\n    DCL %ISVSAM,%vsclust,%vsindex,%vsdata           INIT '';\n    dcl %volref                                     init '';\n    dcl %work                                       init '';\n    dcl %adddsopn init('0') ext;\n    dcl %update   init(0);\n    dcl %title    init('Add Data Set to Data Set Data Base - V0.0');\n    dcl %vsamdef  init '';\n\n\n        IF %LIST(1)\u00ac='' THEN %dsname=LIST(1);\nLabel chkds1;\n        IF %dsname=''\n        then do;\nLabel getds1;\n  PANEL %boxcolor box (ctr %hedcolor '%TITLE')\n   //\n     (ctr 'Please specify the Data Set Name to add to the data base.')\n     ///////\n      ('  Enter Data Set Name  ====>',dsname,44,' ')\n     ////\n     ( hi '         Note:')\n      (   '                For VSAM Data and Index Areas, you must ')\n      (   '                add .DATA and .INDEX to the Data Set Names;')\n      (   '                Jol will merge the information at run time')\n      (   '                to create all the necessary IDCAMS control'\n                           ' cards.')\n    helpline('F3 Exits with No Action. F4 Shows a List of Data Sets')\n   ;\n            IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n            IF %SYSPFK = 4\n            then do;\n              showdbf ;\n              %dsname ='%showsel';\n              redo chkds1;\n            end;\n            if %dsname='' then do;\n  /*          redo getds1; */\n              panel reread from dsname\n                    'You must enter a DSNAME';\n                    redo getds1;\n            end;\n\n        end;\n\n      if %syspfk=3 then exit;\n\n/* See if we can read the previous data set by this name.\n\n   Calling the next macro also sets up the symbolic variables\n   as EXTERNAL.\n\n*/\n        %savedsn='%dsname';           /* Save the name */\n\n        dbffind  ds '%dsname';\n        if %zlastcc =0 then %update=1;  /* Set Update Flag */\n        if %zlastcc \u00ac=0\n        then\n           dbffind  'MODEL=DEFAULT';  /* Get a Default Model then */\n\n        zvolumes=strip(zvolumes);\n        if %zretpd='R' | %zretpd=' ' then %zretpd=%zexpdt;\n        else %zretpd='Until %zexpdt';\n\n        %volref=substr(zvolumes,1,1);\n        If %volref\u00ac='*' then %volref='';\n        else do;\n             %volref=substr(zvolumes,2);\n             %zvolumes='';\n        end;\n\n\n        adddsn2;    /* Get details from Panels */\n        if %syspfk=3 then exit;\n\n        %work='  Ds Dsn=%dsname ';;\n\n            if %zrecfm='' & (%zlrecl\u00ac='' | %zblksize\u00ac='')\n            then do;\n                if %zlrecl  \u00ac='' then %work=%work||' Lrecl %zlrecl';\n                if %zblksize\u00ac='' then %work=%work||' Block %zblksize';\n            end;\n            else if %zrecfm\u00ac=''\n            then %work='%work %zrecfm %zlrecl,%zblksize';\n            if %zvolumes\u00ac='' then work='%work Vol=%zvolumes ';\n            if %zunit   \u00ac='' then work='%work Unit=%zunit ';\n            if %zfileno \u00ac='' then work='%work Fileno %zfileno';\n            if %zprim   \u00ac='' | %zsec\u00ac='' | %zdir\u00ac=''\n            then do;\n                if %zsec  =''  then %zsec=0;\n                %work='%work Space %zprim,%zsec';\n                if %zdir \u00ac='' then %work='%work,%zdir';\n                if %space ='B' then %work='%work Blks ';\n                if %space ='C' then %work='%work Cyls ';\n                if %space ='T' then %work='%work Trks ';\n                if %space =' ' then %work='%work Trks ';\n            end;\n            if %zrlse    ='N' then work='%work Norlse';\n            if %zcontig  ='Y' then work='%work Contig';\n            if %zmaxig   ='Y' then work='%work MXIG';\n            if %zalx     ='Y' then work='%work ALX';\n            if %zprotect ='Y' then work='%work Protect';\n            if %zdsorg  \u00ac='' then work='%work %zdsorg';\n            if %zretpd  \u00ac=''\n            then do;\n               if substr(zretpd,1,5)='UNTIL'\n               then %work='%work retain %zretpd';\n               else %work='%work retain for %zretpd';\n            end;\n            if %zden    \u00ac='' then work='%work %zden BPI';\n            if %zlabtyp \u00ac='' then work='%work %zlabtyp';\n            if %zkeylen \u00ac='' then work='%work Keylen %zkeylen';\n            if %zrkp    \u00ac='' then work='%work Keypos %zrkp';\n\n            if '%isvsam'\u00ac='' | '%vsamdef' \u00ac= ''\n            then do;\n                %isvsam=' VSAMTXT='' %vsamdef ''';\n            end;\n            if '%Zmodel'\u00ac=''\n            then do;\n                %isvsam=' %isvsam MODEL %zmodel ';\n            end;\n            if '%Zowner'\u00ac=''\n            then do;\n                %isvsam=' %isvsam OWNER %zowner ';\n            end;\n\n\n            if %update=1                   /*  Updating Flag */\n            then dbfdel   '%dsname';\n            dbfadd %work %isvsam;\n            exit;\n\n/* Following Code only for multiple load module version of Jol. */\n\n            alloc$ f(temp) da('tkn.$$$') new;\n            open f(temp) output;\n            write f(temp) from(work);\n            if '%isvsam' \u00ac= '' then write file(temp) from(isvsam);\n            close f(temp) ;\n            dbfdel   '%dsname';\n            dbfadd  ;\n            dbfclose;   /* Force DBFFIND to reopen the file because\n                           it may have been extended */\n\nend  /* ADD DSN Macro */ ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADDDSNO": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\\x00\\x00\\x892\\x7f\\x00\\x90\\t_\\x17\\x13\\x00\\x8c\\x00\\x87\\x00\\x0c\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "1989-11-23T00:00:00", "modifydate": "1990-04-05T17:13:00", "lines": 140, "newlines": 135, "modlines": 12, "user": "JOL"}, "text": "  ADDDSN:MACRO; /* ADD DATA SET NAME TO DATA SET DATA BASE */\n\n/**********************************************************************\n\n       JOL Universal Command Language.\n\n       COPYRIGHT 1969-1989 CCS-JOL PTY. LTD.,\n                 2/31 QUEEN ST, MELBOURNE, AUSTRALIA, 3000.\n\n\n       A D D S N        C O M M A N D\n\n       This macro adds a data set to the Jol Data Set Data Base.\n\n       It:\n          1. Gets details for the data set.\n             These details are built using the Jol ADDDSN2\n             command.\n\n          2. Sets up a declare statement that is passed through\n             to the compiler, followed by a ZADDSN command.\n\n             The compiler module adds the data set to the\n             data base in Jol internal Format to gain\n             extra speed because the DSID's do not have to\n             be retranslated each time they are used.\n\nHISTORY:\n\n       Written C. CLARKE 26/8/89:  ADD DATA SET DATA BASE.\n\n**********************************************************************/\n\n\n    Dcl %ISVSAM,%VSCLUST,%VSINDEX,%VSDATA           INIT '';\n    Dcl %volref                                     INIT '';\n    Dcl %work                                       INIT '';\n    Dcl %ADDDSOPN INIT('0') EXT;\n    dcl %update   init(0);\n    dcl %title    init('Add Data Set to Data Set Data Base - V 0.0');\n    dcl %boxcolor,%hedcolor init '';\n    dcl %txtcolor           init '';\n\n        If %LIST(1)\u00ac='' Then %DSNAME='%LIST(1)';\n        If %DSNAME=''\n        Then do;\nlabel GETDS1:\n  PANEL %BOXCOLOR BOX (CTR %HEDCOLOR '%TITLE')\n   //\n     (CTR 'You MUST specify the Data Set Name to add to the Data Base.')\n     ///////\n      ('  Enter Data Set Name  ====>',DSNAME,44,' ')\n   ;\n            If %SysPfk = 3 | %SysPfk=15 Then EXIT;\n            If %DSNAME='' Then do;\n              redo getds1;\n              PANEL REREAD FROM DSNAME\n                    'YOU MUST ENTER A DSNAME';\n                    REDO GETDS1;\n            END;\n\n        END;\n\n/* SEE If WE CAN READ THE PREVIOUS DATA SET BY THIS NAME.\n\n   CALLING THE NEXT MACRO ALSO SETS UP THE SYMBOLIC VARIABLES\n   AS EXTERNAL.\n\n*/\n        %SAVEDSN='%DSNAME';           /* SAVE THE NAME */\n\n        dbffind ds '%DSNAME';\n        if %lastcc =0 then %update=1; /* Set update flag  */\n        if %lastcc\u00ac=0                 /* File not found ? */\n        then\n        dbffinf ds 'MODEL=DEFAULT';   /* Get a default model then .. */\n\n        PRINTSYM;\n\n        if %zlrecl=0 then %zlrecl='';\n        if %zblksize=0 then %zblksize='';\n        if %zfileno=0 then %zfileno='';\n        if %zprim =0 then %zprim ='';\n        if %zsec  =0 then %zsec  ='';\n        if %zdir  =0 then %zdir  ='';\n        %volref=substr(zvolumes,1,1);\n        if %volref\u00ac='*' then %volref='';\n        else do;\n             %volref=substr(zvolumes,2);\n             %zvolumes='';\n        end;\n\n        ADDDSN2;    /* GET DETAILS FROM PANELS */\n/* exit;  /********************************/\n /*     If %ISVSAM\u00ac=''\n        Then %WORK='DclVSAM %DSID DS %DSNAME '; */\n\n        %WORK='Dcl     DSDB  Ds %DSNAME ';\n\n            If %zrecfm='' & (%zlrecl\u00ac='' | %zblksize\u00ac='')\n            Then do;\n                If %zlrecl \u00ac='' Then %WORK=%WORK||' LRECL %zlrecl';\n                If %zblksize\u00ac='' Then %WORK=%WORK||' BLOCK %zblksize';\n            END;\n            ELSE If %zrecfm\u00ac=''\n            Then %WORK='%WORK %zrecfm %zlrecl,%zblksize';\n            If %zvolumes \u00ac='' Then WORK='%WORK VOL=%zvolumes %UNIT';\n            If %zfileno\u00ac='' Then WORK='%WORK FILENO %zfileno';\n            If %zprim\u00ac='' | %zsec\u00ac='' | %zdir\u00ac=''\n            Then do;\n                %WORK='%WORK SPACE %zprim,%zsec';\n                If %zdir\u00ac='' Then %WORK='%WORK,%zdir';\n                If %zspacetp='B' Then %WORK='%WORK BLKS ';\n                If %zspacetp='C' Then %WORK='%WORK CYLS ';\n                If %zspacetp='T' Then %WORK='%WORK TRKS ';\n                If %zspacetp=' ' Then %WORK='%WORK TRKS ';\n            END;\n            If %PROTECT\u00ac='' Then WORK='%WORK PROTECT';\n listsyms;\n            If %zdsorg \u00ac='' Then WORK='%WORK DSORG %zdsorg';\n            If %zretpd\u00ac='' Then\n            %WORK='%WORK RETAIN FOR %zretpd';\n            %work;                         /* Do the declare */\n            If %ISVSAM\u00ac=''\n            Then do;\n /*             WRITE F($DS) FROM('%VSCLUST');\n                If %VSDATA\u00ac='' Then\n                WRITE F($DS) FROM('DATA ''%VSDATA''');\n                If %VSINDEX\u00ac='' Then\n                WRITE F($DS) FROM('DATA ''%VSINDEX'''); */\n                %isvsam=' VSAMTXT '' %vsamdef ''';\n            END;\n            If %zmodel\u00ac=''\n            Then do;\n                %isvsam=' %isvsam USES %zmodel ';\n            END;\n            if %update\u00ac=0 then dbfdel  dsdb ; /* Delete now */\n            dbfadd  dsdb %isvsam;\n          END;\nEND;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADDDSN2": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00'\\x01\\t\\x01/\\x01\\t\\x01O\\x05(\\x00\\xe7\\x00\\xea\\x00\\x00\\xd1\\xd6\\xd3\\xf6\\xf0@@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2009-01-12T00:00:00", "modifydate": "2009-01-14T05:28:27", "lines": 231, "newlines": 234, "modlines": 0, "user": "JOL60"}, "text": "ADDDSN2:MACRO;\n\n    dcl %msg                       init '';\n\n    if %update=0\n    then do;\n        if %zunit=''    then %zunit='DISK';\n        if %zprim=''    then %zprim='10';\n        if %zsec=''     then %zsec='10';\n        if %zspacetp='' then %zspacetp='C';\n    end;\n\n    if %update\u00ac=0 then %msg='Updating';\n    else %msg='Adding';\n\nlabel reedit;\n             PANEL %boxcolor box\n  (ctr %hedcolor 'Jol Data Set Data Base Update Facility')\n\n  /(ctr hi '%msg Data Set ''%dsname''')\n\n\n  /(bold '  Model for Data Set:')\n /('       Model Name (Optional)      ==>',zmodel,12,'%zmodel')\n\n /(hi '  Models:')\n /(ctr 'Rather than code DCB Attributes, Space Requirements,')\n  (ctr 'and other such repeated details, you can refer')\n  (ctr 'to a Model that contains these details.')\n\n /(ctr 'For example, if you use the model SMALL, it may')\n  (ctr 'defaults of 5 tracks on a Direct Access Volume.')\n\n /(ctr 'Likewise, the model TAPE will default to a Tape volume.')\n\n /(ctr 'An advantage is that if the model is altered, your')\n  (ctr 'data set will AUTOmatically have the new attributes.')\n\n     helpline('F3 Exits - Other Data Set Parameters follow.')\n       ;\n  If %syspfk=3 then exit;\n\n             PANEL %boxcolor box\n  (ctr %hedcolor 'Jol Data Set Data Base Update Facility')\n\n  /(ctr hi '%msg Data Set ''%dsname''')\n\n\n  /(bold '  Owner of the Data Set:')\n /('       Owner Name (Optional)      ==>',zowner,12,'%zowner')\n\n /(hi '  Data Set Responsibility:')\n /(ctr 'Large Companies with many Departments, Computer')\n  (ctr 'Bureaus and so forth have many data sets.')\n\n /(ctr 'To make it easier for the Data Set Administrator')\n  (ctr 'to keep track of these files, and charge for')\n  (ctr 'Space used, you can supply an Owner Identifier.')\n\n\n     helpline('Other Data Set Parameters follow.')\n       ;\n\nLABEL dsnou;\n             PANEL %boxcolor box\n  (ctr %hedcolor 'Jol Data Set Data Base Update Facility')\n\n /(ctr hi '%msg Data Set ''%dsname''')\n\n /(hi '  Note:')\n  (  '           For OUTPUT Data Sets, the Operating System')\n  (  '           needs to know the information below.')\n\n /(hi '  Volume and Unit Information: '\n    normal %txtcolor ' (Code VOLREF in QUOTES to indicate to a DSN)')\n /('       Volume           ==>',zvolumes,48,'%zvolumes')\n  ('    or Volume Reference ==>',VOLREF,44,'%volref')\n  ('       Unit |,number?   ==>',zunit,11,'%zunit')\n /(hi '  For Magnetic Tapes only:'\n /('       Label Number     ==>',zfileno,3,'%zfileno')\n  ('       Density          ==>',zden,4,'%zden')\n  ('       Label Type       ==>',zlabtyp,5,'%zlabtyp')\n     helpline( 'Press F1 for Help, (DCB Parameters follow).')\n       ;\nIF %SYSPFK=1 | %syspfk=13\nthen do;\n             PANEL %boxcolor box\n /(ctr %hedcolor 'Jol Data Set Information - HELP Information')\n//(ctr 'You Specified that Data Set ''%dsname'' is to added.')\n /(ctr 'When you wish to create a new Data Set, the Operating')\n  (ctr 'System needs to know the if the Data Set is to be')\n  (ctr 'placed on a Disk or Tape device.')\n /(ctr\n   'If you wish the Data Set to be placed on a specific Volume,')\n  (ctr 'enter the Volume Name or a Volume Reference, otherwise')\n  (ctr 'the Operating System will find a volume for you.')\n /(ctr 'Also, for Tape Data Set, you may wish to place the Data Set')\n  (ctr 'on a Volume that already has data on it.')\n /(ctr 'If you do wish to add data to a Tape Volume, you')\n  (ctr 'must indicate a LABEL number, or will will overwrite')\n  (ctr 'data already on the Tape.')\n  ;\n REDO dsnou;\n end;\nchkdsou:\n       if zfileno\u00ac=''\n       then if type(zfileno)\u00ac='NUM'\n       then do;\n            panel reread from zfileno\n                  'File or Label Number must be Numeric';\n            goto chkdsou;\n       end;\n       if zvolumes\u00ac='' & volref\u00ac=''\n       then do;\n            panel reread from volref\n                  'You cannot have a VOLREF and a VOLUME List';\n            goto chkdsou;\n       end;\n\nlabel ourecfm;\n\n  if %zrecfm='%' then %zrecfm='NODCB';\n\n\n             PANEL %boxcolor box\n  (ctr %hedcolor 'ADD Output Data Set - Optional Details')\n /(ctr 'Please fill in the following information for this Data Set.')\n /(hi '  Dcb Information:')\n  ('       Record Format             ===>',zrecfm,5,'%zrecfm')\n  ('       Record Length             ===>',zlrecl,5,'%zlrecl')\n  ('       Block Length              ===>',zblksize,5,'%zblksize')\n /(hi '  Direct Access Details (including VSAM):')\n  ('       Key Length                ===>',zkeylen,5,'%zkeylen')\n  ('       Key Position              ===>',zrkp,5,'%zrkp')\n/*('       Search Limit              ===>',zlimct,5,'%zlimct') */\nhelpline('Press F1 for Help, (Space Information follows).')\n       ;\n\nIF %SYSPFK=1 | %syspfk=13 then do;\n             PANEL %boxcolor box\n /(ctr %hedcolor 'ADD Output Data Set Information - HELP Information')\n  (ctr'Data Set ''%dsname'' is being used for Output.')\n  (ctr'This is an example of the Options available to you.')\n lm 8\n/*\n  ('LIKE AN EARLIER DATA SET NAME         ===> A.PREVIOUS.DATA.SET')\n*/\n /('Record Format         ===> FB,FBA, ETC. *************************')\n  ('Record Length         ===> 80 OR NODCB  * OPTIONAL IF THE DATA  *')\n  ('Block Length          ===> 800          * SET IS CATALOGUED     *')\n  ('1st Extent            ===> 10           * FILL IN THE INFORMAT- *')\n  ('2nd Extent            ===> 50           * ION IF THE DATA SET   *')\n  ('Tracks Cyls or Blocks ===> T            * IS NEW.               *')\n  ('Volume                ===> F8A114       *                       *')\n  ('Volume Reference                        *************************')\n  ('     Data Set Name    ===> A.PREVIOUS DATA SET NAME')\n  ('Unit                  ===> TAPE OR DISK')\n  ('Retention             ===> 3 DAYS ')\n  ('File Number           ===> 12 ')\n  ('Dsorg                 ===> DA | IS | PS | VS *** SEE MANUAL')\n  ('Optcd                 ===> A | B | C | E | F *** SEE MANUAL')\n  ('Protect (Y or N)      ===> Y OR N ')\n  lm 1\n /helpline(' Press Enter to Display Previous Screen');\n\n REDO ourecfm;\n    end;\n\n\n             PANEL %boxcolor box\n  (ctr %hedcolor 'ADD Output Data Set - Optional Details')\n /(ctr 'Please fill in the following information for this Data Set.')\n /(hi '  New Data Set Space Requirements:')\n  ('       1st Extent or Record #    ===>',zprim,6,'%zprim')\n  ('       2nd Extent or Max Recs    ===>',zsec,6,'%zsec')\n  ('       Directory Blocks          ===>',zdir,3,'%zdir')\n  ('       Trks, Cyls, Blks, Records ===>',zspacetp,1,'%zspacetp')\n  ('       Release Unused Space      ===>',zrlse,1,'%zrlse')\n /('       Contiguous Space          ===>',zcontig,1,'%zcontig')\n  ('       Round to Cylinder         ===>',zround,1,'%zround')\n  ('       MXIG (Max Contiguous)     ===>',zmaxig,1,'%zmaxig')\n  ('       ALX (Alloc 5 Contig Xnts) ===>',zalx,1,'%zalx')\n /(hi '  Extra Information:')\n  ('       Retention (n Days)        ===>',zretpd,10,'%zretpd')\n  ('       Dsorg                     ===>',zdsorg,4,'%zdsorg')\n  ('       Optcd                     ===>',zoptcd,4,'%zoptcd')\n  ('       Protect (Y or N)          ===>',zprotect,1,'%zprotect')\n    helpline(\n'Press F1 for Help, F3 Exits, F4 for VSAM Details, F10 Saves Details')\n       ;\n\n  if %syspfk=0 then redo reedit;\n  if %syspfk=3 then exit;\n\n\nIF %SYSPFK=1 | %syspfk=13 then do;\n             PANEL %boxcolor box\n /(ctr %hedcolor 'ADD Output Data Set Information - HELP Information')\n  (ctr'Data Set ''%dsname'' is being used for Output.')\n  (ctr'This is an example of the Options available to you.')\n lm 8\n /('Record Format         ===> FB,FBA, ETC. *************************')\n  ('Record Length         ===> 80 OR NODCB  * OPTIONAL IF THE DATA  *')\n  ('Block Length          ===> 800          * SET IS CATALOGUED     *')\n  ('1st Extent            ===> 10           * FILL IN THE INFORMAT- *')\n  ('2nd Extent            ===> 50           * ION IF THE DATA SET   *')\n  ('Tracks Cyls or Blocks ===> T            * IS NEW.               *')\n  ('Volume                ===> F8A114       *                       *')\n  ('Volume Reference                        *************************')\n  ('     Data Set Name    ===> A.PREVIOUS DATA SET NAME')\n  ('Unit                  ===> TAPE OR DISK')\n  ('Retention             ===> 3 DAYS ')\n  ('File Number           ===> 12 ')\n  ('Dsorg                 ===> DA | IS | PS | VS *** SEE MANUAL')\n  ('Optcd                 ===> A | B | C | E | F *** SEE MANUAL')\n  ('Protect (Y or N)      ===> Y OR N ')\n  lm 1\n /helpline(' Press Enter to Display Previous Screen');\n\n REDO ourecfm;\n    end;\n\n if dsorg='VS' | dsorg='VSAM' | %syspfk=4 /* | %zvsamtxt \u00ac='' cvc*/\n then do;\n    isvsam='Y';                  /* Tell calling macro this is VSAM */\n    dsorg='VS';                  /* Set Vsam DSORG anyway */\n    addvsam %zvsamtxt;           /* Call VSAM Macro */\n end;   /* VSAM */\n  if %syspfk=3   then exit;\n  if %syspfk\u00ac=10 then redo reedit;\n end /* ADDDSN 2  macro */ ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADDDSN2O": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1c\\x00\\x00\\x00\\x892\\x7f\\x00\\x90\\t_\\x16Q\\x00\\xaf\\x00\\xec\\x00\\x16\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.28", "flags": 0, "createdate": "1989-11-23T00:00:00", "modifydate": "1990-04-05T16:51:00", "lines": 175, "newlines": 236, "modlines": 22, "user": "JOL"}, "text": "  ADDDSN2:MACRO;\n/*  dcl  %hedcolor,%bold,%hi,%boxcolor init ''  ext; */\n  dcl  %msg                          init '' ;\n  %HEDCOLOR = 'UNDERSCORE WHITE OVERSCORE';\n  %BOLD='RED';\n  %HI  ='WHITE';\n /* 2nd Part of the ADDDSN Macro */\n\n    If %zunit=''    then %zunit='DISK';\n    If %zprim=''    then %zprim='10';\n    If %zsec=''     then %zsec='10';\n    If %zspacetp='' then %zspacetp='C';\n\n    if %update\u00ac=0 then %msg='UPDATing';\n    else %msg='ADDing';\n LABEL DSNOU;\n             PANEL    %BOXCOLOR BOX\n  (CTR underscore overscore\n       %HEDCOLOR 'Add Data Set Details to Jol Data Base')\n /*  /(CTR 'Data Set ' HI '''%DSNAME''' NORMAL %TXTCOLOR\n        ' is being added') */\n /(CTR hi '%msg Data Set ''%DSNAME''')\n\n /(%bold '  NOTE:')\n  (  '           For OUTPUT Data Sets, the Operating System')\n  (  '           needs to know the information below.')\n    /(%bold   '  MODEL for Data Set: ' )\n /('       Model Name       ==>',zmodel,20,'%zmodel')\n    /(%bold   '  Volume and Unit Information: ' )\n(normal %TXTCOLOR ' (Code VOLREF in quotes to indicate to a DSN)')\n /('       Volume           ==>',zvolumes,48,'%zvolumes')\n  ('    OR Volume Reference ==>',VOLREF,44,'%VOLREF')\n  ('       Unit {,number}   ==>',zunit,11,'%zunit')\n /(%bold '  FOR Magnetic Tapes only:')\n /('       Label Number     ==>',zfileno,3,'%zfileno')\n     (CTR 'Press F1 for HELP, (DCB Parameters are on screen 2.)')\n       ;\nIF %SYSPFK=1 | %SYSPFK=13 then DO;\n             PANEL    %BOXCOLOR BOX\n /(CTR %HEDCOLOR 'Add Output Data Set Information - HELP Panel')\n//(CTR 'You specified that Data Set ''%DSNAME'' is to be ADDED.')\n /(CTR 'When you wish to create a new Data Set, the Operating')\n  (CTR 'System needs to know if the Data Set is to be')\n  (CTR 'placed on a disk or tape device.')\n /(CTR\n   'If you wish the data set to be placed on a specific volume,')\n  (CTR 'enter the Volume Name or a Volume Reference, OTHERWISE')\n  (CTR 'the operating system will find a volume for you.')\n /(CTR 'Also, for TAPE Data Sets, you may wish to place the Data Set')\n  (CTR 'on a volume that already has data on it.')\n /(CTR 'If you do wish to add data to a Tape Volume, you')\n  (CTR 'MUST indicate a Label Number, or you will OVERWRITE')\n  (CTR 'data already on the TAPE.')\n  ;\n             PANEL    %BOXCOLOR BOX\n  (CTR %HEDCOLOR 'Add Output Data Set Information - HELP Panel')\n//(CTR\n'You specified that Data Set IDENTIFIER ''%dsid'''\n  ' is to be used for OUTPUT.'\n)\n//(%bold '  Data SetS.')\n /(CTR 'Data Set Identifiers or Dsids are used to specify')\n  (CTR 'Data Set Information.')\n /(CTR\n   'Dsids are rather like Declaring or Defining Variables in')\n  (CTR 'High Level Languages such as COBOL, PL/I, PASCAL etc.')\n /(CTR 'Once a Data Set variable has been DECLARED, programs can read')\n  (CTR 'and write information from or to the Identifier.')\n /(CTR 'One of the big advanatges of using DSIDS is that the')\n  (CTR 'information need only be coded ONCE for the Data Set,')\n  (CTR 'no matter how many times it is used in your job.')\n  ;\n REDO DSNOU;\n END;\nCHKDSOU:\n /*    If zfileno\u00ac=''\n       then If TYPE(zfileno)\u00ac='NUM'\n       then DO;\n            PANEL REREAD FROM zfileno\n                  'File or Label Number Must be NUMERIC';\n            redo CHKDSOU;\n       END;\n */\n       If %zvolumes\u00ac='' & %VOLREF\u00ac=''\n       then DO;\n            PANEL REREAD FROM VOLREF\n                  'You Cannot Have a VOLREF and a VOLUME LIST';\n            redo CHKDSOU;\n       END;\n\nlabel ourecfm;\n\n  if %zrefcm='%' then %zrecfm='NODCB';\n\n             PANEL\n  (CTR %HEDCOLOR '%msg Data Set - Optional Details')\n /('    Please fill in the following information for this Data Set.')\n /(%hi '  Dcb Information:')\n  ('       Record Format      ===>',zrecfm,5,'%zrecfm')\n  ('       Record Length      ===>',zlrecl,5,'%zlrecl')\n  ('       Block Length       ===>',zblksize,5,'%zblksize')\n /(%hi '  New Data Set Space Requirements:')\n  ('       1st Extent         ===>',zprim,5,'%zprim')\n  ('       2nd Extent         ===>',zsec,5,'%zsec')\n  ('       Directory Blocks   ===>',zdir,5,'%zdir')\n  ('       Trks, Cyls or Blks ===>',zspacetp,1,'%zspacetp')\n /(%hi '  Extra Information:')\n  ('       Retention (n Days) ===>',ZRETPD,10,'%zretpd')\n  ('       Dsorg (VS, IS etc) ===>',zdsorg,4,'%zdsorg')\n  ('       Optcd              ===>',ZOPTCD,4,'%zoptcd')\n  ('       Protect (Y or N)   ===>',ZPROTECT,1,'%zprotect')\n       / (centre blue 'Press F1 for Help, F10 for VSAM Data Sets')\n       ;\n\nIF %SYSPFK=1 | %SYSPFK=13 then DO;\n             PANEL %BOXCOLOR BOX\n  (CTR %HEDCOLOR 'Jol Data Base of Data Set Information - HELP')\n  (CTR'%msg Data Set ''%DSNAME''')\n  ('       This is an example of the Options available to you.')\n /('Record Format         ===> FB,FBA, ETC. *************************')\n  ('Record Length         ===> 80 OR NODCB  * OPTIONAL IF THE DATA  *')\n  ('Block Length          ===> 800          * SET IS CATALOGUED     *')\n  ('1st Extent            ===> 10           * FILL IN THE INFORMAT- *')\n  ('2nd Extent            ===> 50           * ION IF THE DATA SET   *')\n  ('Tracks Cyls or Blocks ===> T            * IS NEW.               *')\n  ('Volume                ===> F8A114       *                       *')\n  ('Volume Reference                        *************************')\n  ('     Data Set Name    ===> A.PREVIOUS DATA SET NAME')\n  ('Unit                  ===> TAPE OR DISK')\n  ('Retention             ===> 3 DAYS ')\n  ('File Number           ===> 12 ')\n  ('Dsorg                 ===> DA | IS | PS |    *** SEE MANUAL')\n  ('Optcd                 ===> A | B | C | E | F *** SEE MANUAL')\n  ('Protect (Y or N)      ===> Y OR N ')\n\n /('         Press Enter to Display Previous Screen');\n\n\n REDO ourecfm;\n    END;\n If %zdsorg='VS' | %zdsorg='VSAM' | %syspfk=10\n then DO;\n    ISVSAM='Y';                  /* Tell Calling MACRO this is VSAM */\n    DCL %CLORD,CLREUSE                  INIT '';\n    DCL %dafirst,dasecond,DASPACE       INIT '';\n    DCL %CISZ                           INIT '';\n    listsyms;\nLABEL OUVSAM;\n             PANEL %BOXCOLOR BOX\n  (CTR %HEDCOLOR '%msg VSAM Data Set - Main Cluster')\n /(CTR 'Please Fill in the Following Information for the Main Cluster.')\n /(%bold '  CLUSTER INFORMATION:')\n  ('             Indexed (Y | N) or NUM ===>',zclorg  ,3,'%zclorg')\n  ('             Share Options          ===>',zclshare ,1,'%zclshare')\n  ('             Interval Size          ===>',zclcisz,5,'%zclcisz')\n  ('             Free Space  (%% {%%})    ===>',zclfrees,9,'%zclfrees')\n/*('             Key Range              ===>',zclkeyrng,35,'%zclkeyrng')\n*/\n  ('             Unique  (Y | N)        ===>',zcluniqu,1,'%zcluniqu')\n  ('             Ordered (Y | N)        ===>',zclorder,1,'%zclorder')\n  ('             Replicate (Y | N)      ===>',CLREPLIC,1,'%CLREPLIC')\n  ('             Reuse   (Y | N)        ===>',CLREUSE,1,'%CLREUSE')\n  ('             Spanned (Y | N)        ===>',CLspan ,1,'%CLspan')\n  (%bold '  EXTRA INFORMATION:')\n  ('             READ Password          ===>',clpassrd,8,'%clpassrd')\n  ('             WRITE Password         ===>',clpasswr,8,'%clpasswr')\n  ('             Attempts               ===>',clattemp,2,'%clattemp')\n  ('             Wait    (Y | N)        ===>',clwait  ,1,'%clwait')\n  ('             Erase   (Y | N)        ===>',clerase ,1,'%clerase')\n  ('             Imbed   (Y | N)        ===>',climbed ,1,'%climbed')\n            (CTR 'Press F1 for Help')\n       ;\n\n\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADDMODEL": {"ttr": 1284, "alias": false, "halfwords": 4, "notes": 0, "parms": "b\" \\x01\\x05'\"", "ispf": false, "text": "ADDMODEL:MACRO; /* Add a Model to Data Set Data Base */\n\n/*\n\n       Jol Universal Command Language.\n       Copyright 1969-1989 CCS-JOL Pty. Ltd.,\n                 2/31 Queen St, Melbourne, Australia, 3000.\n\n\n       A D D M O D E L    C O M M A N D\n\n       This macro adds a model to the data base of data sets.\n\n       It:\n          1. Gets details for the model.\n\n             These details are built using the Jol ADDDSN2\n             command.\n\n          2. Writes the details to a data set.\n\n             This data set is added at the end (for the PC version)\n             of the base data set.\n\n             It can be sorted with the special procedure if access\n             becomes too slow.  It is then Binary Searched.\n\n             The mainframe version uses VSAM.\n\nHistory:\n\n       Written C. Clarke 26/11/90:  Add Model to Data Base.\n\n********************************************************************/\n\n\n\n    DCL %ISVSAM,%vsclust,%vsindex,%vsdata           INIT '';\n    dcl %volref                                     init '';\n    dcl %work                                       init '';\n    dcl %adddsopn init('0') ext;\n    dcl %update   init(0);\n    dcl %title    init('Add Model to Data Set Data Base - V0.0');\n    dcl %vsamdef  init '';\n\n\n        IF %LIST(1)\u00ac='' THEN %model=LIST(1);\nLabel chkds1;\n        IF %model=''\n        then do;\nLabel getds1;\n  PANEL %boxcolor box (ctr %hedcolor '%TITLE')\n   //\n     (ctr 'Please specify the Model Name to add to the data base.')\n     ///////\n      ('  Enter Model Name  ====>',model,12,' ')\n     ////\n     ( hi '         Note:')\n      (   '                For VSAM Data and Index Areas, you must ')\n      (   '                add .DATA and .INDEX to the Data Set Names;')\n      (   '                Jol will merge the information at run time')\n      (   '                to create all the necessary IDCAMS control'\n                           ' cards.')\n    helpline('F3 Exits with No Action. F4 Shows a List of Models')\n   ;\n            IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n            IF %SYSPFK = 4\n            then do;\n              showdbf  level('model=');\n              %model =substr('%showsel',6);\n              redo chkds1;\n            end;\n            if %model='' then do;\n  /*          redo getds1; */\n              panel reread from model\n                    'You must enter a Model Name';\n                    redo getds1;\n            end;\n\n        end;\n\n      if %syspfk=3 then exit;\n\n/* See if we can read the previous data set by this name.\n\n   Calling the next macro also sets up the symbolic variables\n   as EXTERNAL.\n\n*/\n        %savedsn='%model';           /* Save the name */\n\n        %dsname='MODEL=%model';\n        dbffind  '%dsname';\n        if %lastcc =0 then %update=1;  /* Set Update Flag */\n\n  if %zretpd='R' then %zretpd=%zexpdt;\n  else %zretpd='Until %zexpdt';\n\n        %volref=substr(zvolumes,1,1);\n        If %volref\u00ac='*' then %volref='';\n        else do;\n             %volref=substr(zvolumes,2);\n             %zvolumes='';\n        end;\n\n\n        adddsn2;    /* Get details from Panels */\n\n  /*    if %isvsam\u00ac=''\n        then %work='DclVsam %dsid ds %dsn ';\n        else %work='Dcl     %DSID ds %DSN '; */\n\n/*      %work='Dcl     DSDB  Ds Dsn=%dsname ';; */\n/*      %work=' DSDB  Ds ''%dsname'' ';; */\n        %work='       Ds ''%dsname'' ';\n\n            if %zrecfm='' & (%zlrecl\u00ac='' | %zblksize\u00ac='')\n            then do;\n                if %zlrecl \u00ac='' then %work=%work||' Lrecl %zlrecl';\n                if %zblksize\u00ac='' then %work=%work||' Block %zblksize';\n            end;\n            else if %zRECFM\u00ac=''\n            then %work='%work %zrecfm %zlrecl,%zblksize';\n            if %zvolumes\u00ac='' then work='%work Vol=%zvolumes ';\n            if %zunit   \u00ac='' then work='%work Unit=%zunit ';\n            if %zfileno \u00ac='' then work='%work Fileno %zfileno';\n            if %zprim\u00ac='' | %zsec\u00ac='' | %zdir\u00ac=''\n            then do;\n                if %zsec  =''  then %zsec=0;\n                %work='%work Space %zprim,%zsec';\n                if %zdir \u00ac='' then %work='%work,%zdir';\n                if %space ='B' then %work='%work Blks ';\n                if %space ='C' then %work='%work Cyls ';\n                if %space ='T' then %work='%work Trks ';\n                if %space =' ' then %work='%work Trks ';\n            end;\n            if %zrlse    ='N' then work='%work Norlse';\n            if %zcontig  ='Y' then work='%work Contig';\n            if %zmaxig   ='Y' then work='%work MXIG';\n            if %zalx     ='Y' then work='%work ALX';\n            if %zprotect ='Y' then work='%work Protect';\n            if %zdsorg  \u00ac='' then work='%work %zdsorg';\n            if %zretpd  \u00ac=''\n            then do;\n               if substr(zretpd,1,5)='UNTIL'\n               then %work='%work retain %zretpd';\n               else %work='%work retain for %zretpd';\n            end;\n            if %zden    \u00ac='' then work='%work %zden BPI';\n            if %zlabtyp \u00ac='' then work='%work %zlabtyp';\n            if %zkeylen \u00ac='' then work='%work Keylen %zkeylen';\n            if %zrkp    \u00ac='' then work='%work Keypos %zrkp';\n\n            if '%isvsam'\u00ac='' | '%vsamdef' \u00ac= ''\n            then do;\n                %isvsam=' VSAMTXT '' %vsamdef ''';\n            end;\n            if '%Zmodel'\u00ac=''\n            then do;\n                %isvsam=' %isvsam MODEL %zmodel ';\n            end;\n\n            if %update=1                   /*  Updating Flag */\n            then dbfdel   '%dsname';\n            dbfadd %work %isvsam;\n            exit;\n\n/* Following Code only for multiple load module version of Jol. */\n\n            alloc f(temp) da('tkn.$$$') new;\n            open f(temp) output;\n            write f(temp) from(work);\n            if '%isvsam' \u00ac= '' then write file(temp) from(isvsam);\n            close f(temp) ;\n            dbfadd;\n            dbfclose;   /* Force DBFFIND to reopen the file because\n                           it may have been extended */\n\n\n      /*    if %update\u00ac=0 then dbfdel dsdb;   /* delete the old one */\n      /*    dbfadd   dsdb  %isvsam; */\n      /*  end; */\n/* jolopt npm;*/\nend  /* ADD DSN Macro */ ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADDPRINT": {"ttr": 1288, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "ADDPRINT:MACRO; /* Add a printer to Data Set Data Base */\n\n/*\n\n       Jol Universal Command Language.\n       Copyright 1969-1989 CCS-JOL Pty. Ltd.,\n                 2/31 Queen St, Melbourne, Australia, 3000.\n\n\n       A D D P R I N T    C O M M A N D\n\n       This macro adds a printer to the data base of data sets.\n\n       It:\n          1. Gets details for the printer.\n\n             These details are built using the Jol ADDDSN2\n             command.\n\n          2. Writes the details to a data set.\n\n             This data set is added at the end (for the PC version)\n             of the base data set.\n\n             It can be sorted with the special procedure if access\n             becomes too slow.  It is then Binary Searched.\n\n             The mainframe version uses VSAM.\n\nHistory:\n\n       Written C. Clarke 26/11/90:  Add printer to Data Base.\n\n********************************************************************/\n\n\n\n    DCL %ISVSAM,%vsclust,%vsindex,%vsdata           INIT '';\n    dcl %volref                                     init '';\n    dcl %work                                       init '';\n    dcl %adddsopn init('0') ext;\n    dcl %update   init(0);\n    dcl %title    init('Add Printer to Data Set Data Base - V0.0');\n    dcl %vsamdef  init '';\n\n\n        IF %LIST(1)\u00ac='' THEN %dsname=LIST(1);\nLabel chkds1;\n        IF %dsname=''\n        then do;\nLabel getds1;\n  PANEL %boxcolor box (ctr %hedcolor '%TITLE')\n   //\n     (ctr 'Please specify the Printer Name to add to the Data Base.')\n     /////\n      ('  Enter Printer Name  ====>',printer,12,' ')\n     ////\n     ( hi '  Notes:')\n      (   '         1.     The name PRINTER defaults to SYSOUT *.')\n     /(   '         2.     The names must start with PRINTER.')\n     /(   '         3.     We suggest you use names like PRINTER_1,')\n      (   '                PRINTER_FORM1 etc.')\n    helpline('F3 Exits with No Action. F4 Shows a List of Printers')\n   ;\n            IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n            IF %SYSPFK = 4\n            then do;\n              showdbf  level('Printer=');\n              %dsname  =substr('%showsel',9);\n              redo chkds1;\n            end;\n            if %printer='' then do;\n  /*          redo getds1; */\n              panel reread from printer\n                    'You must enter a Printer Name';\n                    redo getds1;\n            end;\n\n        end;\n\n      if %syspfk=3 then exit;\n\n/* See if we can read the previous data set by this name.\n\n   Calling the next macro also sets up the symbolic variables\n   as EXTERNAL.\n\n*/\n        %savedsn='%printer';         /* Save the name */\n\n        %dsname='PRINTER=%printer';\n        dbffind  '%dsname';\n        if %lastcc =0 then %update=1;  /* Set Update Flag */\n\n\n /*     printsym; */\n\n        addprt2;    /* Get details from Panels */\n\n\n /*     %work='Dcl     DSDB  Printer ''%dsname'' ';; */\n        %work=' DS     Printer ''%dsname'' ';\n\n\n            if %zsyscls \u00ac='' then work='%work Class %zsyscls';\n            if %zsysform\u00ac='' then work='%work Form %zsysform';\n            if %zcopies \u00ac='' then work='%work Copies=%zcopies';\n            if %zoutlim \u00ac='' then work='%work Outlim=%zoutlim';\n            if %zsysrout\u00ac='' then work='%work Route %zsysrout';\n            if %zsyspgm \u00ac='' then work='%work Pgm %zsyspgm';\n            if %zsysucs \u00ac='' then work='%work UCS %zsysucs';\n            if %zsysfcb \u00ac='' then work='%work FCB %zsysfcb';\n            if %zsysburs\u00ac='' then work='%work BURST';\n            if %zsyschar\u00ac='' then work='%work CHARS %zsyschar';\n            if %zsysmod \u00ac='' then work='%work MODIFY %zsysmod';\n            if %zsysflas\u00ac='' then work='%work FLASH %zsysflas';\n\n            if %zrecfm='' & (%zlrecl\u00ac='' | %zblksize\u00ac='')\n            then do;\n                if %zlrecl \u00ac='' then %work=%work||' Lrecl %zlrecl';\n                if %zblksize\u00ac='' then %work=%work||' Block %zblksize';\n            end;\n            else if %zRECFM\u00ac=''\n            then %work='%work %zrecfm %zlrecl,%zblksize';\n            if %zprim\u00ac='' | %zsec\u00ac=''\n            then do;\n                if %zsec  =''  then %zsec=0;\n                %work='%work Space %zprim,%zsec';\n                if %space ='B' then %work='%work Blks ';\n                if %space ='C' then %work='%work Cyls ';\n                if %space ='T' then %work='%work Trks ';\n                if %space =' ' then %work='%work Trks ';\n            end;\n   /*       if %znrlse  \u00ac='' then work='%work Norlse'; */\n            if %zcontig \u00ac='' then work='%work Contig';\n            if %zmaxig  \u00ac='' then work='%work MXIG';\n            if %zalx    \u00ac='' then work='%work ALX';\n            if %zdsorg  \u00ac='' then work='%work Dsorg %zdsorg';\n            if %zlabtyp \u00ac='' then work='%work %zlabtyp';\n\n            if '%Zmodel'\u00ac=''\n            then do;\n                %isvsam=' %isvsam MODEL %zmodel ';\n            end;\n\n\n            if %update=1 then dbfdel   '%dsname';\n            dbfadd %work %isvsam;\n            exit;\n\n/* Following Code only for multiple load module version of Jol. */\n\n            alloc f(temp) da('tkn.$$$') new;\n            open f(temp) output;\n            write f(temp) from(work);\n            if '%isvsam' \u00ac= '' then write file(temp) from(isvsam);\n            close f(temp) ;\n            dbfadd  ;\n            dbfclose;   /* Force DBFFIND to reopen the file because\n                           it may have been extended */\n\n\nend  /* ADD DSN Macro */ ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADDPRNT2": {"ttr": 1292, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ADDPRINT:MACRO; /* Add a printer to Data Set Data Base */\n\n/*\n\n       Jol Universal Command Language.\n       Copyright 1969-1989 CCS-JOL Pty. Ltd.,\n                 2/31 Queen St, Melbourne, Australia, 3000.\n\n\n       A D D P R I N T    C O M M A N D\n\n       This macro adds a printer to the data base of data sets.\n\n       It:\n          1. Gets details for the printer.\n\n             These details are built using the Jol ADDDSN2\n             command.\n\n          2. Writes the details to a data set.\n\n             This data set is added at the end (for the PC version)\n             of the base data set.\n\n             It can be sorted with the special procedure if access\n             becomes too slow.  It is then Binary Searched.\n\n             The mainframe version uses VSAM.\n\nHistory:\n\n       Written C. Clarke 26/11/90:  Add printer to Data Base.\n\n********************************************************************/\n\n\n\n    DCL %ISVSAM,%vsclust,%vsindex,%vsdata           INIT '';\n    dcl %volref                                     init '';\n    dcl %work                                       init '';\n    dcl %adddsopn init('0') ext;\n    dcl %update   init(0);\n    dcl %title    init('Add Data Set to Data Set Data Base - V0.0';\n    dcl %vsamdef  init '';\n\n\n        IF %LIST(1)\u00ac='' THEN %dsname=LIST(1);\nLabel chkds1;\n        IF %dsname=''\n        then do;\nLabel getds1;\n  PANEL %boxcolor box (ctr %hedcolor '%TITLE')\n   //\n     (ctr 'Please specify the Printer Name to add to the Data Base.')\n     /////\n      ('  Enter Printer Name  ====>',printer,12,' ')\n     ////\n     ( hi '  Notes:')\n      (   '         1.     The name PRINTER defaults to SYSOUT *.')\n     /(   '         2.     The names must start with PRINTER.')\n     /(   '         3.     We suggest you use names like PRINTER_1,')\n      (   '                PRINTER_FORM1 etc.')\n    helpline('F3 Exits with No Action. F4 Shows a List of Printers')\n   ;\n            IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n            IF %SYSPFK = 4\n            then do;\n              dbfshow  Printers;\n              %dsname  ='%showsel';\n              redo chkds1;\n            end;\n            if %printer='' then do;\n  /*          redo getds1; */\n              panel reread from printer\n                    'You must enter a Printer Name';\n                    redo getds1;\n            end;\n\n        end;\n\n      if %syspfk=3 then exit;\n\n/* See if we can read the previous data set by this name.\n\n   Calling the next macro also sets up the symbolic variables\n   as EXTERNAL.\n\n*/\n        %savedsn='%printer';         /* Save the name */\n\n        %dsname='PRINTER=%printer';\n        dbffind  '''%dsname''';\n        if %lastcc =0 then %update=1;  /* Set Update Flag */\n\n\n /*     printsym; */\n\n        addprt2;    /* Get details from Panels */\n\n\n /*     %work='Dcl     DSDB  Printer ''%dsname'' ';; */\n        %work=' DSDB    Printer ''%dsname'' ';\n\n\n            if %zsyscls \u00ac='' then work='%work Class %zsyscls';\n            if %zsysform\u00ac='' then work='%work Form %zsysform';\n            if %zcopies \u00ac='' then work='%work Copies=%zcopies';\n            if %zoutlim \u00ac='' then work='%work Outlim=%zoutlim';\n            if %zsysrout\u00ac='' then work='%work Route %zsysrout';\n            if %zsyspgm \u00ac='' then work='%work Pgm %zsyspgm';\n            if %zsysucs \u00ac='' then work='%work UCS %zsysucs';\n            if %zsysfcb \u00ac='' then work='%work FCB %zsysfcb';\n            if %zsysburs\u00ac='' then work='%work BURST';\n            if %zsyschar\u00ac='' then work='%work CHARS %zsyschar';\n            if %zsysmod \u00ac='' then work='%work MODIFY %zsysmod';\n            if %zsysflas\u00ac='' then work='%work FLASH %zsysflas';\n\n            if %zrecfm='' & (%zlrecl\u00ac='' | %zblksize\u00ac='')\n            then do;\n                if %zlrecl \u00ac='' then %work=%work||' Lrecl %zlrecl';\n                if %zblksize\u00ac='' then %work=%work||' Block %zblksize';\n            end;\n            else if %zRECFM\u00ac=''\n            then %work='%work %zrecfm %zlrecl,%zblksize';\n            if %zprim\u00ac='' | %zsec\u00ac=''\n            then do;\n                if %zsec  =''  then %zsec=0;\n                %work='%work Space %zprim,%zsec';\n                if %space ='B' then %work='%work Blks ';\n                if %space ='C' then %work='%work Cyls ';\n                if %space ='T' then %work='%work Trks ';\n                if %space =' ' then %work='%work Trks ';\n            end;\n   /*       if %znrlse  \u00ac='' then work='%work Norlse'; */\n            if %zcontig \u00ac='' then work='%work Contig';\n            if %zmaxig  \u00ac='' then work='%work MXIG';\n            if %zalx    \u00ac='' then work='%work ALX';\n            if %zdsorg  \u00ac='' then work='%work Dsorg %zdsorg';\n            if %zlabtyp \u00ac='' then work='%work %zlabtyp';\n\n            if '%Zmodel'\u00ac=''\n            then do;\n                %isvsam=' %isvsam MODEL %zmodel ';\n            end;\n\n\n            dbfdel   '%dsname';\n            dbfadd %work %isvsam;\n            exit;\n\n/* Following Code only for multiple load module version of Jol. */\n\n            alloc f(temp) da('tkn.$$$') new;\n            open f(temp) output;\n            write f(temp) from(work);\n            if '%isvsam' \u00ac= '' then write file(temp) from(isvsam);\n            close f(temp) ;\n            dbfadd  ;\n            dbfclose;   /* Force DBFFIND to reopen the file because\n                           it may have been extended */\n\n\nend  /* ADD DSN Macro */ ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADDPRNT3": {"ttr": 1540, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ADDDSN2:MACRO;\n\n    dcl %msg                       init '';\n\n    if %zsyscls=''  then %zsyscls='*';\n    if %zprim=''    then %zprim='10';\n    if %zsec=''     then %zsec='10';\n    if %zspacetp='' then %zspacetp='C';\n\n    if %update\u00ac=0 then %msg='Updating';\n    else %msg='Adding';\n\nlabel reedit;\nLABEL dsnou;\n             PANEL %boxcolor box\n  (ctr %hedcolor 'Jol Data Set Data Base Update Facility')\n\n /(ctr hi '%msg Printer ''%dsname''')\n\n /(hi '  Printer Information: '\n /('       Class              ==>',zsyscls,1,'%zsyscls')\n  ('       Form Queue         ==>',zsysform,44,'%zsysform')\n  ('       No. of Copies      ==>',zcopies ,2,'%zcopies')\n  ('       Max Lines (OUTLIM) ==>',zoutlim ,10,'%zoutlim')\n  ('       Route to           ==>',zsysrout,11,'%zsysrout')\n  ('       Printer Program    ==>',zsyspgm,8,'%zsyspgm')\n /(hi '  For Impact Printers only:'\n  ('       Character Table    ==>',zsysucs ,10,'%zsysucs')\n  ('       Forms Table        ==>',zsysfcb,5,'%zsysfcb')\n /(hi '  For Laser (3380) Printers only:'\n  ('       Burst (Y or N)     ==>',zsysburs,1,'%zsysburs')\n  ('       Character Table    ==>',zsyschar,10,'%zsyschar')\n  ('       Modify Module      ==>',zsysmod,5,'%zsysmod')\n  ('       Flash              ==>',zsysflas,5,'%zsysflas')\n     helpline( 'Press F1 for Help, (DCB Parameters follow).')\n       ;\n\nIF %SYSPFK=1 | %syspfk=13\nthen do;\n             PANEL %boxcolor box\n /(ctr %hedcolor 'Jol Printer Information - HELP Information')\n//(ctr 'You Specified that Printer ''%dsname'' is to added.')\n /(ctr 'When you wish to create a new Data Set, the Operating')\n  (ctr 'System needs to know the if the Data Set is to be')\n  (ctr 'placed on a Disk or Tape device.')\n /(ctr\n   'If you wish the Data Set to be placed on a specific Volume,')\n  (ctr 'enter the Volume Name or a Volume Reference, otherwise')\n  (ctr 'the Operating System will find a volume for you.')\n /(ctr 'Also, for Tape Data Set, you may wish to place the Data Set')\n  (ctr 'on a Volume that already has data on it.')\n /(ctr 'If you do wish to add data to a Tape Volume, you')\n  (ctr 'must indicate a LABEL number, or will will overwrite')\n  (ctr 'data already on the Tape.')\n  ;\n REDO dsnou;\n end;\nchkdsou:\n       if zcopies\u00ac= ''\n       then if type(zcopies)\u00ac='NUM'\n       then do;\n            panel reread from zcopies\n                  'Number of Copies must be Numeric';\n            goto chkdsou;\n       end;\n\n       if zoutlim\u00ac= ''\n       then if type(zoutlim)\u00ac='NUM'\n       then do;\n            panel reread from zoutlim\n                  'Output Limit must be Numeric';\n            goto chkdsou;\n       end;\n\nlabel ourecfm;\n\n  if %zrecfm='%' then %zrecfm='NODCB';\n\n\n             PANEL %boxcolor box\n  (ctr %hedcolor 'ADD Printer - Optional Details')\n /(ctr 'Please fill in the following information for this Data Set.')\n /(hi '  Dcb Information:')\n  ('       Record Format             ===>',zrecfm,5,'%zrecfm')\n  ('       Record Length             ===>',zlrecl,5,'%zlrecl')\n  ('       Block Length              ===>',zblksize,5,'%zblksize')\nhelpline('Press F1 for Help, (Space Information follows).')\n       ;\n\nIF %SYSPFK=1 | %syspfk=13 then do;\n             PANEL %boxcolor box\n /(ctr %hedcolor 'ADD Printer Information - HELP Information')\n  (ctr'Data Set ''%dsname'' is being used for Output.')\n  (ctr'This is an example of the Options available to you.')\n lm 8\n/*\n  ('LIKE AN EARLIER DATA SET NAME         ===> A.PREVIOUS.DATA.SET')\n*/\n /('Record Format         ===> FB,FBA, ETC. *************************')\n  ('Record Length         ===> 80 OR NODCB  * OPTIONAL IF THE DATA  *')\n  ('Block Length          ===> 800          * SET IS CATALOGUED     *')\n  ('1st Extent            ===> 10           * FILL IN THE INFORMAT- *')\n  ('2nd Extent            ===> 50           * ION IF THE DATA SET   *')\n  ('Tracks Cyls or Blocks ===> T            * IS NEW.               *')\n  ('Volume                ===> F8A114       *                       *')\n  ('Volume Reference                        *************************')\n  ('     Data Set Name    ===> A.PREVIOUS DATA SET NAME')\n  ('Unit                  ===> TAPE OR DISK')\n  ('Retention             ===> 3 DAYS ')\n  ('File Number           ===> 12 ')\n  ('Dsorg                 ===> DA | IS | PS | VS *** SEE MANUAL')\n  ('Optcd                 ===> A | B | C | E | F *** SEE MANUAL')\n  ('Protect (Y or N)      ===> Y OR N ')\n  lm 1\n /helpline(' Press Enter to Display Previous Screen');\n\n REDO ourecfm;\n    end;\n\n\n             PANEL %boxcolor box\n  (ctr %hedcolor 'ADD Printer  - Optional Details')\n /(ctr 'Please fill in the following information for this Data Set.')\n /(hi '  New Data Set Space Requirements:')\n  ('       1st Extent or Record #    ===>',zprim,6,'%zprim')\n  ('       2nd Extent or Max Recs    ===>',zsec,6,'%zsec')\n  ('       Trks, Cyls, Blks, Records ===>',zspacetp,1,'%zspacetp')\n/*('       Release Unused Space      ===>',znrlse,1,'%znrlse') */\n /('       Contiguous Space          ===>',zcontig,1,'%zcontig')\n  ('       Round to Cylinder         ===>',zround,1,'%zround')\n  ('       MXIG (Max Contiguous)     ===>',zmaxig,1,'%zmaxig')\n  ('       ALX (Alloc 5 Contig Xnts) ===>',zalx,1,'%zalx')\n /(hi '  Extra Information:')\n  ('       Dsorg                     ===>',zdsorg,4,'%zdsorg')\nhelpline('Press F1 for Help, F4 for VSAM Details, F10 to Save Details')\n       ;\n\n  if %syspfk=0 then redo reedit;\n\n\nIF %SYSPFK=1 | %syspfk=13 then do;\n             PANEL %boxcolor box\n /(ctr %hedcolor 'ADD Output Data Set Information - HELP Information')\n  (ctr'Data Set ''%dsname'' is being used for Output.')\n  (ctr'This is an example of the Options available to you.')\n lm 8\n /('Record Format         ===> FB,FBA, ETC. *************************')\n  ('Record Length         ===> 80 OR NODCB  * OPTIONAL IF THE DATA  *')\n  ('Block Length          ===> 800          * SET IS CATALOGUED     *')\n  ('1st Extent            ===> 10           * FILL IN THE INFORMAT- *')\n  ('2nd Extent            ===> 50           * ION IF THE DATA SET   *')\n  ('Tracks Cyls or Blocks ===> T            * IS NEW.               *')\n  ('Volume                ===> F8A114       *                       *')\n  ('Volume Reference                        *************************')\n  ('     Data Set Name    ===> A.PREVIOUS DATA SET NAME')\n  ('Unit                  ===> TAPE OR DISK')\n  ('Retention             ===> 3 DAYS ')\n  ('File Number           ===> 12 ')\n  ('Dsorg                 ===> DA | IS | PS | VS *** SEE MANUAL')\n  ('Optcd                 ===> A | B | C | E | F *** SEE MANUAL')\n  ('Protect (Y or N)      ===> Y OR N ')\n  lm 1\n /helpline(' Press Enter to Display Previous Screen');\n\n REDO ourecfm;\n    end;\n\n\n  if %syspfk\u00ac=10 then redo reedit;\n end /* ADDDSN 2  macro */ ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADDPRT2": {"ttr": 1544, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "ADDDSN2:MACRO;\n\n    dcl %msg                       init '';\n\n    if %zsyscls=''  then %zsyscls='*';\n    if %zprim=''    then %zprim='10';\n    if %zsec=''     then %zsec='10';\n    if %zspacetp='' then %zspacetp='C';\n\n    if %update\u00ac=0 then %msg='Updating';\n    else %msg='Adding';\n\nlabel reedit;\nLABEL dsnou;\n             PANEL %boxcolor box\n  (ctr %hedcolor 'Jol Data Set Data Base Update Facility')\n\n /(ctr hi '%msg Printer ''%dsname''')\n\n /(hi '  Printer Information: '\n /('       Class              ==>',zsyscls,1,'%zsyscls')\n  ('       Form Queue         ==>',zsysform,44,'%zsysform')\n  ('       No. of Copies      ==>',zcopies ,2,'%zcopies')\n  ('       Max Lines (OUTLIM) ==>',zoutlim ,10,'%zoutlim')\n  ('       Route to           ==>',zsysrout,11,'%zsysrout')\n  ('       Printer Program    ==>',zsyspgm,8,'%zsyspgm')\n /(hi '  For Impact Printers only:'\n  ('       Character Table    ==>',zsysucs ,10,'%zsysucs')\n  ('       Forms Table        ==>',zsysfcb,5,'%zsysfcb')\n /(hi '  For Laser (3380) Printers only:'\n  ('       Burst (Y or N)     ==>',zsysburs,1,'%zsysburs')\n  ('       Character Table    ==>',zsyschar,10,'%zsyschar')\n  ('       Modify Module      ==>',zsysmod,5,'%zsysmod')\n  ('       Flash              ==>',zsysflas,5,'%zsysflas')\n     helpline( 'Press F1 for Help, (DCB Parameters follow).')\n       ;\n\nIF %SYSPFK=1 | %syspfk=13\nthen do;\n             PANEL %boxcolor box\n /(ctr %hedcolor 'Jol Printer Information - HELP Information')\n//(ctr 'You Specified that Printer ''%dsname'' is to added.')\n /(ctr 'When you wish to create a new Data Set, the Operating')\n  (ctr 'System needs to know the if the Data Set is to be')\n  (ctr 'placed on a Disk or Tape device.')\n /(ctr\n   'If you wish the Data Set to be placed on a specific Volume,')\n  (ctr 'enter the Volume Name or a Volume Reference, otherwise')\n  (ctr 'the Operating System will find a volume for you.')\n /(ctr 'Also, for Tape Data Set, you may wish to place the Data Set')\n  (ctr 'on a Volume that already has data on it.')\n /(ctr 'If you do wish to add data to a Tape Volume, you')\n  (ctr 'must indicate a LABEL number, or will will overwrite')\n  (ctr 'data already on the Tape.')\n  ;\n REDO dsnou;\n end;\nchkdsou:\n       if zcopies\u00ac=''\n       then if type(zcopies)\u00ac='NUM'\n       then do;\n            panel reread from zcopies\n                  'Number of Copies must be Numeric';\n            goto chkdsou;\n       end;\n\n       if zoutlim\u00ac=''\n       then if type(zoutlim)\u00ac='NUM'\n       then do;\n            panel reread from zoutlim\n                  'Output Limit must be Numeric';\n            goto chkdsou;\n       end;\n\nlabel ourecfm;\n\n  if %zrecfm='%' then %zrecfm='NODCB';\n\n\n             PANEL %boxcolor box\n  (ctr %hedcolor 'ADD Printer - Optional Details')\n /(ctr 'Please fill in the following information for this Data Set.')\n /(hi '  Dcb Information:')\n  ('       Record Format             ===>',zrecfm,5,'%zrecfm')\n  ('       Record Length             ===>',zlrecl,5,'%zlrecl')\n  ('       Block Length              ===>',zblksize,5,'%zblksize')\nhelpline('Press F1 for Help, (Space Information follows).')\n       ;\n\nIF %SYSPFK=1 | %syspfk=13 then do;\n             PANEL %boxcolor box\n /(ctr %hedcolor 'ADD Printer Information - HELP Information')\n  (ctr'Data Set ''%dsname'' is being used for Output.')\n  (ctr'This is an example of the Options available to you.')\n lm 8\n/*\n  ('LIKE AN EARLIER DATA SET NAME         ===> A.PREVIOUS.DATA.SET')\n*/\n /('Record Format         ===> FB,FBA, ETC. *************************')\n  ('Record Length         ===> 80 OR NODCB  * OPTIONAL IF THE DATA  *')\n  ('Block Length          ===> 800          * SET IS CATALOGUED     *')\n  ('1st Extent            ===> 10           * FILL IN THE INFORMAT- *')\n  ('2nd Extent            ===> 50           * ION IF THE DATA SET   *')\n  ('Tracks Cyls or Blocks ===> T            * IS NEW.               *')\n  ('Volume                ===> F8A114       *                       *')\n  ('Volume Reference                        *************************')\n  ('     Data Set Name    ===> A.PREVIOUS DATA SET NAME')\n  ('Unit                  ===> TAPE OR DISK')\n  ('Retention             ===> 3 DAYS ')\n  ('File Number           ===> 12 ')\n  ('Dsorg                 ===> DA | IS | PS | VS *** SEE MANUAL')\n  ('Optcd                 ===> A | B | C | E | F *** SEE MANUAL')\n  ('Protect (Y or N)      ===> Y OR N ')\n  lm 1\n /helpline(' Press Enter to Display Previous Screen');\n\n REDO ourecfm;\n    end;\n\n\n             PANEL %boxcolor box\n  (ctr %hedcolor 'ADD Printer  - Optional Details')\n /(ctr 'Please fill in the following information for this Data Set.')\n /(hi '  New Data Set Space Requirements:')\n  ('       1st Extent or Record #    ===>',zprim,6,'%zprim')\n  ('       2nd Extent or Max Recs    ===>',zsec,6,'%zsec')\n  ('       Trks, Cyls, Blks, Records ===>',zspacetp,1,'%zspacetp')\n/*('       Release Unused Space      ===>',znrlse,1,'%znrlse') */\n /('       Contiguous Space          ===>',zcontig,1,'%zcontig')\n  ('       Round to Cylinder         ===>',zround,1,'%zround')\n  ('       MXIG (Max Contiguous)     ===>',zmaxig,1,'%zmaxig')\n  ('       ALX (Alloc 5 Contig Xnts) ===>',zalx,1,'%zalx')\n /(hi '  Extra Information:')\n  ('       Dsorg                     ===>',zdsorg,4,'%zdsorg')\nhelpline('Press F1 for Help, F4 for VSAM Details, F10 to Save Details')\n       ;\n\n  if %syspfk=0 then redo reedit;\n\n\nIF %SYSPFK=1 | %syspfk=13 then do;\n             PANEL %boxcolor box\n /(ctr %hedcolor 'ADD Output Data Set Information - HELP Information')\n  (ctr'Data Set ''%dsname'' is being used for Output.')\n  (ctr'This is an example of the Options available to you.')\n lm 8\n /('Record Format         ===> FB,FBA, ETC. *************************')\n  ('Record Length         ===> 80 OR NODCB  * OPTIONAL IF THE DATA  *')\n  ('Block Length          ===> 800          * SET IS CATALOGUED     *')\n  ('1st Extent            ===> 10           * FILL IN THE INFORMAT- *')\n  ('2nd Extent            ===> 50           * ION IF THE DATA SET   *')\n  ('Tracks Cyls or Blocks ===> T            * IS NEW.               *')\n  ('Volume                ===> F8A114       *                       *')\n  ('Volume Reference                        *************************')\n  ('     Data Set Name    ===> A.PREVIOUS DATA SET NAME')\n  ('Unit                  ===> TAPE OR DISK')\n  ('Retention             ===> 3 DAYS ')\n  ('File Number           ===> 12 ')\n  ('Dsorg                 ===> DA | IS | PS | VS *** SEE MANUAL')\n  ('Optcd                 ===> A | B | C | E | F *** SEE MANUAL')\n  ('Protect (Y or N)      ===> Y OR N ')\n  lm 1\n /helpline(' Press Enter to Display Previous Screen');\n\n REDO ourecfm;\n    end;\n\n\n  if %syspfk\u00ac=10 then redo reedit;\n end /* ADDDSN 2  macro */ ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADDVSAM": {"ttr": 1548, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "addvsam: macro(\n                %attempts=,\n                %auth=,\n                %code=,\n                %cisz=,\n                %freesp=,\n                %keyrange=,\n                %masterpw=,\n                %model=,\n                %owner=,\n                %readpw=,%rdpw=,\n                %recsize=,%recsz=,\n                %share=,\n                %to=,%for=,\n                %updatepw=,%updpw=,\n                %nopanel,\n /**/\n                %dstgw,%ndstgw,\n                %erase,%noerase,%eras,%neras,\n                %imbed,%noimbed,%imbd,%nimbd,\n                %indexed,%nonindex,%numbered,%ixd,%nixd,%numd,\n                %ordered,%unordere,%ord,%unord,\n                %replicate,%repl,%nrepl,\n                %reuse,%noreuse,%rus,%nrus,\n                %spanned,%nospanne,%spnd,%nspnd,\n                %speed,%recovery,%rcvy,\n                %unique,%suballoc,%unq,%subal,\n                %wait,%nowait,\n                %writechk,%wck,%nwck,\n /**/\n                );\n\n    dcl %sysvswk2,%sysvswk3                  init '';\n\n    dcl %zclord                              init '';\n    dcl %zclorg                              init '';\n    dcl %zcluniqu, %zclorder                 init '';\n    dcl %zclreplc, %zclreuse                 init '';\n    dcl %zclspan                             init '';\n    dcl %zclwait                             init '';\n    dcl %zclerase, %zclimbed                 init '';\n   if substr(attempts,1,1)='('\n   then attempts=substr(attempts,2,length(attempts)-2);\n   if substr(auth    ,1,1)='('\n   then auth    =substr(auth    ,2,length(auth    )-2);\n   if substr(code    ,1,1)='('\n   then code    =substr(code    ,2,length(code    )-2);\n   if substr(cisz    ,1,1)='('\n   then cisz    =substr(cisz    ,2,length(cisz    )-2);\n   if substr(freesp  ,1,1)='('\n   then freesp  =substr(freesp  ,2,length(freesp  )-2);\n   if substr(keyrange,1,1)='('\n   then keyrange=substr(keyrange,2,length(keyrange)-2);\n   if substr(masterpw,1,1)='('\n   then masterpw=substr(masterpw,2,length(masterpw)-2);\n   if substr(model   ,1,1)='('\n   then model   =substr(model   ,2,length(model   )-2);\n   if substr(owner   ,1,1)='('\n   then owner   =substr(owner   ,2,length(owner   )-2);\n   if substr(readpw  ,1,1)='('\n   then readpw  =substr(readpw  ,2,length(readpw  )-2);\n   if substr(recsize ,1,1)='('\n   then recsize =substr(recsize ,2,length(recsize )-2);\n   if substr(share ,1,1)='('\n   then share   =substr(share   ,2,length(share   )-2);\n   if substr(to    ,1,1)='('\n   then to      =substr(to      ,2,length(to      )-2);\n   if substr(for   ,1,1)='('\n   then for     =substr(for     ,2,length(for     )-2);\n   if substr(updatepw ,1,1)='('\n   then updatepw =substr(updatepw ,2,length(updatepw )-2);\n\n   if '%INDEXED'    \u00ac= '' then %zclorg    ='Y';\n   if '%nonindex'   \u00ac= '' then %zclorg      ='N';\n   if '%NUMBERED'   \u00ac= '' then %zclorg    ='NUM' ;\n\n   if '%UNIQUE'     \u00ac= '' then %zcluniqu ='Y' ;\n   if '%SUBALLOC'   \u00ac= '' then %zcluniqu ='S' ;\n\n   if '%ORDERED'    \u00ac= '' then %zclorder ='Y' ;\n   if '%ORD'        \u00ac= '' then %zclorder ='Y' ;\n   if '%UNORDERE'   \u00ac= '' then %zclorder ='N' ;\n   if '%UNORD'      \u00ac= '' then %zclorder ='N' ;\n\n   if '%REUSE'      \u00ac= '' then %zclreuse ='Y' ;\n   if '%NOREUSE'    \u00ac= '' then %zclreuse ='N' ;\n\n   if '%SPANNED'    \u00ac= '' then %zclspan   ='Y' ;\n   if '%NOSPANNE'   \u00ac= '' then %zclspan   ='N' ;\n\n   if '%ERASE'      \u00ac= '' then %zclerase ='Y' ;\n   if '%NOERASE'    \u00ac= '' then %zclerase ='N' ;\n\n   if '%DSTGW'      \u00ac= '' then %zclwait   ='Y' ;\n   if '%NDSTGW'     \u00ac= '' then %zclwait   ='N' ;\n\n   if '%REPL'       \u00ac= '' then %zclreplc ='Y' ;\n   if '%NREPL'      \u00ac= '' then %zclreplc ='N' ;\n\n    $dsidvs;             /* Convert DSID data to Vsam Control Cards */\n\n/*printsym;*/\nlabel ouvsam;\n             PANEL %boxcolor box\n  (ctr %hedcolor 'Jol Data Set Data Base Update Facility')\n /(ctr 'Please fill in the following information for the main CLUSTER.')\n  (hi '  Cluster Information:')\n  ('            Indexed (Y | N) or Num ===>',zclorg,3,*)\n  ('            Share Options          ===>',share,1,*)\n  ('            Interval Size          ===>',cisz,5,*)\n  ('            Free Space (%%  %%)      ===>',freesp,12,*)\n  ('            Key Range              ===>',keyrange,35,*)\n  ('            Unique (Y | Suballoc)  ===>',zcluniqu,1,*)\n  ('            Ordered (Y | N)        ===>',zclorder,1,*)\n  ('            Replicate (Y | N)      ===>',zclreplc,1,*)\n  ('            Reuse (Y | N)          ===>',zclreuse ,1,*)\n  ('            Spanned (Y | N)        ===>',zclspan  ,1,*)\n  (hi '  Extra Information:')\n  ('            READ Password          ===>',readpw ,8,*)\n  ('            UPDATE Password        ===>',masterpw ,8,*)\n  ('            Attempts               ===>',attempts,2,*)\n  ('            Wait (Y | N)           ===>',zclwait ,1,*)\n  ('            Code                   ===>',code,4,*)\n  ('            Erase (Y | N)          ===>',zclerase,1,*)\n  ('            Owner                  ===>',owner,8,*)\nhelpline('Press F1 for Help, F3 to Exit')\n       ;\n   if syspfk=3 then exit;\nlabel reedit;\n\n   %sysvswk2='';\n\n   if %attempts \u00ac='' then %sysvswk2='%sysvswk2 ATTEMPTS(%attempts)';\n   if %auth     \u00ac='' then %sysvswk2='%sysvswk2 AUTH(%auth)';\n   if %zbufsp   \u00ac='' then %sysvswk2='%sysvswk2 BUFSP(%zbufsp)';\n   if %code     \u00ac='' then %sysvswk2='%sysvswk2 CODE(%code)';\n   if %cisz     \u00ac='' then %sysvswk2='%sysvswk2 CISZ(%cisz)';\n   if %freesp   \u00ac='' then %sysvswk2='%sysvswk2 FREESP(%freesp)';\n   if %keyrange \u00ac='' then %sysvswk2='%sysvswk2 KEYRANGE(%keyrange)';\n/* if %zclmodel \u00ac='' then %sysvswk2='%sysvswk2 MODEL(%zclmodel)'; */\n   if %owner    \u00ac='' then %sysvswk2='%sysvswk2 OWNER(%owner)';\n   if %readpw   \u00ac='' then %sysvswk2='%sysvswk2 READPW(%readpw)';\n   if %masterpw \u00ac='' then %sysvswk2='%sysvswk2 MASTERPW(%masterpw)';\n/* if %zclrecsz \u00ac='' then %sysvswk2='%sysvswk2 RECSZ(%zclrecsz)'; */\n   if %share    \u00ac='' then %sysvswk2='%sysvswk2 SHARE(%share)';\n\n   if %zclorg    ='NUM' then %sysvswk2='%sysvswk2 NUMBERED';\n   else if %zclorg   \u00ac=''\n   then do;\n      if %zclorg    ='Y' then %sysvswk2='%sysvswk2 INDEXED';\n      if %zclorg    ='N' then %sysvswk2='%sysvswk2 NONINDEXED';\n      if %zclorg    ='NUM' | %zclorg='N' | %zclorg='Y' then;\n      else do;\n           panel reread from zclorg 'ORDER must be N, Y or NUM';\n           goto  reedit;\n      end;\n   end;\n\n   if index('YS ',zcluniqu) =0  & zcluniqu \u00ac=''\n   then do;\n           panel reread from zcluniqu 'UNIQUE must be Y or S(uballoc)';\n           goto  reedit;\n      end;\n\n   if %zcluniqu  ='Y' then %sysvswk2='%sysvswk2 UNIQUE';\n   if %zcluniqu  ='S' then %sysvswk2='%sysvswk2 SUBALLOC';\n\n\n   if index('YN ',zclorder) =0  & zclorder \u00ac=''\n   then do;\n           panel reread from zclorder 'ORDER must be Y or N';\n           goto  reedit;\n      end;\n\n   if %zclorder  ='Y' then %sysvswk2='%sysvswk2 ORD';\n   if %zclorder  ='N' then %sysvswk2='%sysvswk2 UNORD';\n\n\n   if index('YN ',zclreuse) =0  & zclreuse \u00ac=''\n   then do;\n           panel reread from zclreuse 'REUSE must be Y or N';\n           goto  reedit;\n      end;\n\n   if %zclreuse  ='Y' then %sysvswk2='%sysvswk2 REUSE';\n   if %zclreuse  ='N' then %sysvswk2='%sysvswk2 NOREUSE';\n\n\n   if index('YN ',zclspan) =0 & zclspan\u00ac=''\n   then do;\n           panel reread from zclspan  'SPAN must be Y or N';\n           goto  reedit;\n      end;\n\n   if %zclspan   ='Y' then %sysvswk2='%sysvswk2 SPANNED';\n   if %zclspan   ='N' then %sysvswk2='%sysvswk2 NONSPANNED';\n\n   if index('YN ',zclerase) =0 & zclerase \u00ac=''\n   then do;\n           panel reread from zclerase 'ERASE must be Y or N';\n           goto  reedit;\n      end;\n\n   if %zclerase  ='Y' then %sysvswk2='%sysvswk2 ERASE';\n   if %zclerase  ='N' then %sysvswk2='%sysvswk2 NOERASE';\n\n\n   if index('YN ',zclwait ) =0  & zclwait \u00ac=''\n   then do;\n           panel reread from zclwait  'WAIT must be Y or N';\n           goto  reedit;\n      end;\n\n   if %zclwait   ='Y' then %sysvswk2='%sysvswk2 DSTGW';\n   if %zclwait   ='N' then %sysvswk2='%sysvswk2 NDSTGW';\n\n\n   if index('YN ',zclreplc ) =0 & zclreplc\u00ac=''\n   then do;\n           panel reread from zclreplc 'REPLIC must be Y or N';\n           goto  reedit;\n      end;\n\n   if %zclreplc ='Y' then %sysvswk2='%sysvswk2 REPL';\n   if %zclreplc ='N' then %sysvswk2='%sysvswk2 NREPL';\n\n             PANEL\n  (ctr %hedcolor 'Jol Data Set Data Base Update Facility')\n /(ctr 'From Details entered earlier, Jol has created this')\n  (ctr 'Vsam Control Card.')\n /(hi '  Primary VSAM Information:')\n /(hi '%sysvswk1')\n//(hi '  Please add any Extra Control Information:')\n  ('  VSAM (Part2) ===>',sysvswk2,159,'%sysvswk2')\nhelpline('Press F1 for Help, F3 to Exit, F10 to Save Details')\n       ;\n\nIF %SYSPFK=3 then exit;\nIF %SYSPFK=0 then goto ouvsam;\n\nIF %SYSPFK=1 | %syspfk=13 then do;\n       panel ////////////\n             (ctr 'Help Not Yet Available');\n       REDO ouvsam;\n             PANEL %boxcolor box\n /(ctr %hedcolor 'ADD Output Data Set Information - HELP Information')\n  (ctr'Data Set ''%dsname'' is being used for Output.')\n  (ctr'This is an example of the Options available to you.')\n lm 8\n/*\n  ('LIKE AN EARLIER DATA SET NAME         ===> A.PREVIOUS.DATA.SET')\n*/\n /('Record Format         ===> FB,FBA, ETC. *************************')\n  ('Record Length         ===> 80 OR NODCB  * OPTIONAL IF THE DATA  *')\n  ('Block Length          ===> 800          * SET IS CATALOGUED     *')\n  ('1st Extent            ===> 10           * FILL IN THE INFORMAT- *')\n  ('2nd Extent            ===> 50           * ION IF THE DATA SET   *')\n  ('Tracks Cyls or Blocks ===> T            * IS NEW.               *')\n  ('Volume                ===> F8A114       *                       *')\n  ('Volume Reference                        *************************')\n  ('     Data Set Name    ===> A.PREVIOUS DATA SET NAME')\n  ('Unit                  ===> TAPE OR DISK')\n  ('Retention             ===> 3 DAYS ')\n  ('File Number           ===> 12 ')\n  ('Dsorg                 ===> DA | IS | PS |    *** SEE MANUAL')\n  ('Optcd                 ===> A | B | C | E | F *** SEE MANUAL')\n  ('Protect (Y or N)      ===> Y OR N ')\n  lm 1\n helpline(' Press Enter to Display Previous Screen');\n\n REDO ouvsam;\n\n    dcl %cldsn                          init '';\n    dcl %clfirst,clsecond,clspace       init '';\n    dcl %cisz                           init '';\nlabel ouvsam;\n             PANEL %boxcolor box\n  (ctr %hedcolor 'ADD Vsam Data Set Information')\n /(ctr 'Please fill in the following information for VSAM DATA AREA.')\n /(hi '  Data Area Name (Can be left BLANK):')\n  ('       Data Area Name     ===>',cldsn,,44,'%cldsn')\n /(hi '  New Data Area Space Requirements:')\n  ('       1st Extent         ===>',CLFIRST,5,'%CLFIRST')\n  ('       2nd Extent         ===>',CLSECOND,5,'%clsecond')\n  ('       Trks, Cyls or Blks ===>',CLSPACE,1,'%CLSPACE')\n /(hi '  Cluster Information:')\n  ('       Interval Size      ===>',dasz,4,'%cisz')\n  ('       Free Space (%%)    ===>',dasz,4,'%cisz')\n /(hi '  Extra Information:')\n  ('       Retention (n Days) ===>',CLRETPD,10,'%clretpd')\n  ('       Dsorg              ===>',DSORG,4,'%dsorg')\n  ('       Optcd              ===>',dsoptcd,4,'%dsoptcd')\n  ('       Protect (Y or N)   ===>',dsprot,1,'%dsprot')\n   helpline('Press F1 for Help')\n       ;\n\n\n REDO ouvsam;\n    end;\n\nIF %SYSPFK\u00ac=10 then goto ouvsam;\n\n       %vsamdef='%sysvswk2';\n\n    end /* ADDVSAM macro */  ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ALLOCNOT": {"ttr": 1798, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "alloc:macro (%f=, %file=, %da=, %ds=,%dsn=,\n             %vol=,%volume=,\n             %mod, %new, %old, %read, %shr, %update);\n\n/* This macro replaces the internal Jol Alloc Instruction for the\n   \"C\" version of Jol ONLY!!!!\n\n   It provides compatability with MVS and UNIX/MSDOS, and may\n   be changed to suit installation requirements.\n\n   1. If the data set name is NOT coded in quotes, but has a\n      member name or period, it is converted to MSDOS/UNIX\n      filenames, and the VOL keyword is used as the DRIVE,\n      and the SYSUID varaiable added to the front of the name.\n\n      Otherwise, it is assumed to be a Unix type file name.\n\n\n   2. If the data set name IS coded in quotes, but has a\n      member name or period, it is converted to MSDOS/UNIX\n      filenames.\n\n      Otherwise, it is assumed to be a Unix type file name.\n*/\n\n   dcl %dsname, %member         init '';\n   dcl %error                   init 0;\n\n   if %file \u00ac='' & %f \u00ac=''\n   then error =1;\n\n   %file   ='%file%f';\n\n   if %dsname \u00ac='' & %da \u00ac='' & %dsn \u00ac=''\n   then error =1;\n\n   %dsname ='%dsname%da%dsn';\n   if %volume \u00ac='' & %vol \u00ac=''\n   then error =1;\n\n   %volume ='%volume%vol';\n\n   If %mod \u00ac= '' & %new \u00ac='' & %old \u00ac='' & %read \u00ac='' & %shr \u00ac=''\n   &  %update \u00ac= ''\n   then error =1;\n\n   %disp='%mod%new%old%read%shr';\n\n   if %error \u00ac=0\n   then do;\n      panel\n      /  (ctr hi 'Jol Allocate File Instruction')\n      // (ctr    'Errors were detected in Allocate instruction')\n      ////\n      /('      Symbolic File Name    ===> ',file,8,'%file')\n      /('      File or Data Set Name ===> ',dsname,44,'%dsname')\n      /('      Volume or Drive       ===> ',volume,6,'%volume')\n      /('      Disposition           ===> ',disp,1,'%disp')\n       ('      Code ''M'' for Mods, ''N'' for New, ''R'' for Reads,')\n       ('           ''S'' for Shr, ''U'' for Update.')\n      ;\n\n      if %disp = 'M' then %disp = 'MOD';\n      if %disp = 'N' then %disp = 'NEW';\n      if %disp = 'R' then %disp = 'SHR';\n      if %disp = 'S' then %disp = 'SHR';\n      if %disp = 'O' then %disp = 'OLD';\n      if %disp = 'U' then %disp = 'OLD';\n   end;\n\n/* Call the macro to convert the dsname to a Unix Style one,\n   if necessary */\n\n/* if index(dsname,'.') \u00ac= 0 */\n   if index(dsname,'(') \u00ac= 0\n   then unixdsn indsn (%dsname) invol(%volume);\n   alloc$ f(%file) da(%dsname) %disp;\nend;\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ALLSPACE": {"ttr": 17420, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00P\\x00\\x82\\x12_\\x01\\x101O\\x02\\x17\\x00&\\x00\\x1c\\x00\\x14\\xd1\\xd6\\xd3\\xf6\\xf0\\xc1@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1982-05-05T00:00:00", "modifydate": "2010-11-10T02:17:50", "lines": 38, "newlines": 28, "modlines": 20, "user": "JOL60A"}, "text": " /*****************************************************************/\n /**             STORPROC MACRO            LAST MODIFIED 18.01.83**/\n /**               ------------            BY D.DOUBTFIRE        **/\n /**                                                             **/\n /** THIS MACRO WILL CREATE BOTH JOL JOBS AND JCL PROCEDURES.    **/\n /** TO CREATE A JOL PROC SIMPLY PUT-STORPROC DSN1 IN DSN2       **/\n /** WHERE DSN1 IS A DSET CONTAINING YOUR JOL PROCEDURES         **/\n /** AND DSN2 IS YOUR NEW DATASET .                              **/\n /** OR DATA MAY BE SAVED DIRECTLY BY PUTTING IT IN QUOTES       **/\n /** EG. STORPROC MY.DATA  IN  MY.NEWDATA                        **/\n /** OR  STORPROC MY.DATA(MEMBER1)  IN  MY.NEWDATA(MEMBER1)      **/\n /** OR  STORPROC 'DATA.........'   IN  MY.NEWDATA(MEMBER1)      **/\n /*****************************************************************/\nSTORPROC:MACRO(IN);\n /*****************************************************************/\n /******************DECLARE SYMBOLICS *****************************/\n /*****************************************************************/\n DCL OUT PRINTER NODCB;\n DCL DUMMYDD DS DUMMY;\n DCL %SYSP INIT '';\n DCL %SYSD INIT '';\n DCL %SYSC INIT 'INPUT ';\n DCL %TY3,%TY4,%TY5,%TY6,%TY7,%TY8,%TY9,%TY10,%TY11,%TY12,\n     %TY13,%TY14,%TY15,%TY16,%TY17,%TY18,%TY1,%TY2,%TY21  INIT '';\n DCL %CO3,%CO4,%CO5,%CO6,%CO7,%CO8,%CO9,%CO10,%CO11,%CO12,\n     %CO13,%CO14,%CO15,%CO16,%CO17,%CO18,%CO1,%CO2,%CO21 INIT '';\n %SYSD=%IN+1;\n /*****************************************************************/\n /******************TEST FOR DIRECT DATA***************************/\n /*****************************************************************/\n IF %LIST(1) THEN %TY1=TYPE(LIST0001);\n IF %LIST(2) THEN %TY2=TYPE(LIST0002);\n IF %LIST(3) THEN %TY3=TYPE(LIST0003);\n IF %LIST(4) THEN %TY4=TYPE(LIST0004);\n IF %LIST(5) THEN %TY5=TYPE(LIST0005);\n IF %LIST(6) THEN %TY6=TYPE(LIST0006);\n IF %LIST(7) THEN %TY7=TYPE(LIST0007);\n IF %LIST(8) THEN %TY8=TYPE(LIST0008);\n IF %LIST(9) THEN %TY9=TYPE(LIST0009);\n IF %LIST(10) THEN %TY10=TYPE(LIST00010);\n IF %LIST(11) THEN %TY11=TYPE(LIST00011);\n IF %LIST(12) THEN %TY12=TYPE(LIST00012);\n IF %LIST(13) THEN %TY13=TYPE(LIST00013);\n IF %LIST(14) THEN %TY14=TYPE(LIST00014);\n IF %LIST(15) THEN %TY15=TYPE(LIST00015);\n IF %LIST(16) THEN %TY16=TYPE(LIST00016);\n IF %LIST(17) THEN %TY17=TYPE(LIST00017);\n IF %LIST(18) THEN %TY18=TYPE(LIST00018);\n /*****************************************************************/\n /******************SET UP DATA SYMBOLICS**************************/\n /*****************************************************************/\n IF %TY1='LIT' THEN %CO1='%LIST(1)';\n IF %TY2='LIT' THEN %CO2='%LIST(2)';\n IF %TY3='LIT' THEN %CO3='%LIST(3)';\n IF %TY4='LIT' THEN %CO4='%LIST(4)';\n IF %TY5='LIT' THEN %CO5='%LIST(5)';\n IF %TY6='LIT' THEN %CO6='%LIST(6)';\n IF %TY7='LIT' THEN %CO7='%LIST(7)';\n IF %TY8='LIT' THEN %CO8='%LIST(8)';\n IF %TY9='LIT' THEN %CO9='%LIST(9)';\n IF %TY10='LIT' THEN %CO10='%LIST(10)';\n IF %TY11='LIT' THEN %CO11='%LIST(11)';\n IF %TY12='LIT' THEN %CO12='%LIST(12)';\n IF %TY13='LIT' THEN %CO13='%LIST(13)';\n IF %TY14='LIT' THEN %CO14='%LIST(14)';\n IF %TY15='LIT' THEN %CO15='%LIST(15)';\n IF %TY16='LIT' THEN %CO16='%LIST(16)';\n IF %TY17='LIT' THEN %CO17='%LIST(17)';\n IF %TY18='LIT' THEN %CO18='%LIST(18)';\n /*****************************************************************/\n /******************CONCATENATE DATASET WITH SYSIN DATA ***********/\n /*****************************************************************/\n IF %TY1='CHAR' THEN %SYSP='|| %LIST(1)';\n /*****************************************************************/\n /******************SET UP SYSIN FILE   ***************************/\n /*****************************************************************/\nDCL INPUT * REPLACE;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASM": {"ttr": 1803, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "ASM:MACRO (\n/*********************************************************************/\n/*                JOL ASM COMMAND                                    */\n/*          AUSTRALIAN BUREAU OF STATISTICS                          */\n/*                   16/04/81                                        */\n/*********************************************************************/\n  %NOPANEL                   /* DEFAULT FOR BACKGROUND COMPILE       */\n  %PANEL                     /* DEFAULT FOR TSO MODE COMPILE         */\n  %LINK                      /* FOR CHAINING TO JOL LINK COMMAND     */\n/*********************************************************************/\n  %PRINT=,%SYSOUT=,          /* DEFAULT SYSOUT TO MSGCLASS           */\n  %OBJ='&&OBJ',%NOOBJ        /* DEFINE AN OUTPUT OBJECT DATA SET     */\n  %MACLIB %NOMACLIB          /* MACLIB IS THE DEFAULT                */\n  %LIB=,                     /* DEFINE AN INPUT LIBRARY IF REQ'D     */\n  %ALIGN %NOALIGN            /* ALIGN IS THE DEFAULT                 */\n  %ALOGIC %NOALOGIC          /* NOALOGIC IS THE DEFAULT              */\n  %BATCH %NOBATCH            /* NOBATCH IS THE DEFAULT               */\n  %BUFSIZE=,                 /* STD IS THE DEFAULT                   */\n  %DECK %NODECK              /* NODECK IS THE DEFAULT                */\n  %ESD %NOESD                /* ESD IS THE DEFAULT                   */\n  %FLAG=,                    /* ALL ERRORS IS THE DEFAULT            */\n  %LIBMAC %NOLIBMAC          /* NOLIBMAC IS THE DEFAULT              */\n  %LINECNT=,                 /* 55 IS THE DEFAULT                    */\n  %LIST %NOLIST              /* LIST  IS THE DEFAULT                 */\n  %MCALL %NOMCALL            /* NOMCALL IS THE DEFAULT               */\n  %MLOGIC %NOMLOGIC          /* NOMLOGIC IS THE DEFAULT              */\n  %NAME %NONAME              /* NONAME IS THE DEFAULT                */\n  %NUM %NONUM                /* NUM IS THE DEFAULT                   */\n  %RENT %NORENT              /* NORENT IS THE DEFAULT                */\n  %RLD %NORLD                /* RLD    IS THE DEFAULT                */\n  %STMT %NOSTMT              /* STMT   IS THE DEFAULT                */\n  %SYSPARM=,                 /* NOSYSPARM IS THE DEFAULT             */\n  %TERM %NOTERM              /* NOTERM IS THE DEFAULT                */\n  %TEST %NOTEST              /* NOTEST IS THE DEAFULT                */\n  %XREF %SHORT %FULL         /* SHORT IS THE DEFAULT FOR XREF        */\n  %NOXREF                    /* NOXREF IS DEFAULT IF UNSPECIFIED     */\n  );\n/*********************************************************************/\n/*                  SET UP ASSEMBLER OPTIONS                         */\n/*********************************************************************/\n   DCL %PARM INIT '';\n   IF %NOOBJ \u00ac= ''    THEN %PARM = 'NOOBJ' ;\n                      ELSE %PARM = 'OBJ' ;\n   IF %XREF      = '' &\n      %SHORT     = '' &\n      %FULL      = '' THEN %PARM = '%PARM,NOXREF' ;\n   ELSE\n   DO;\n      IF %FULL   = '' THEN %PARM = '%PARM,XREF(SHORT)' ;\n                      ELSE %PARM = '%PARM,XREF(FULL)' ;\n   END;\n   IF %ALIGN    \u00ac= '' THEN %PARM = '%PARM,ALIGN';\n   IF %NOALIGN  \u00ac= '' THEN %PARM = '%PARM,NOALIGN';\n   IF %BATCH    \u00ac= '' THEN %PARM = '%PARM,BATCH';\n   IF %NOBATCH  \u00ac= '' THEN %PARM = '%PARM,NOBATCH';\n   IF %BUFSIZE  \u00ac= '' THEN %PARM = '%PARM,BUFSIZE(%BUF)';\n   IF %ALOGIC   \u00ac= '' THEN %PARM = '%PARM,ALOGIC';\n   IF %NOALOGIC \u00ac= '' THEN %PARM = '%PARM,NOALOGIC';\n   IF %ESD      \u00ac= '' THEN %PARM = '%PARM,ESD';\n   IF %NOESD    \u00ac= '' THEN %PARM = '%PARM,NOESD';\n   IF %DECK     \u00ac= '' THEN %PARM = '%PARM,DECK';\n   IF %NODECK   \u00ac= '' THEN %PARM = '%PARM,NODECK';\n   IF %FLAG     \u00ac= '' THEN %PARM = '%PARM,FLAG(%FLAG)';\n   IF %LIBMAC   \u00ac= '' THEN %PARM = '%PARM,LIBMAC';\n   IF %NOLIBMAC \u00ac= '' THEN %PARM = '%PARM,NOLIBMAC';\n   IF %LINECNT  \u00ac= '' THEN %PARM = '%PARM,LINECNT(%LINECNT)';\n   IF %LIST     \u00ac= '' THEN %PARM = '%PARM,LIST';\n   IF %NOLIST   \u00ac= '' THEN %PARM = '%PARM,NOLIST';\n   IF %MCALL    \u00ac= '' THEN %PARM = '%PARM,MCALL';\n   IF %NOMCALL  \u00ac= '' THEN %PARM = '%PARM,NOMCALL';\n   IF %MLOGIC   \u00ac= '' THEN %PARM = '%PARM,MLOGIC';\n   IF %NOMLOGIC \u00ac= '' THEN %PARM = '%PARM,NOMLOGIC';\n   IF %NAME     \u00ac= '' THEN %PARM = '%PARM,NAME';\n   IF %NONAME   \u00ac= '' THEN %PARM = '%PARM,NANAME';\n   IF %NUM      \u00ac= '' THEN %PARM = '%PARM,NUM';\n   IF %NONUM    \u00ac= '' THEN %PARM = '%PARM,NONUM';\n   IF %RENT     \u00ac= '' THEN %PARM = '%PARM,RENT';\n   IF %NORENT   \u00ac= '' THEN %PARM = '%PARM,NORENT';\n   IF %RLD      \u00ac= '' THEN %PARM = '%PARM,RLD';\n   IF %NORLD    \u00ac= '' THEN %PARM = '%PARM,NORLD';\n   IF %STMT     \u00ac= '' THEN %PARM = '%PARM,STMT';\n   IF %NOSTMT   \u00ac= '' THEN %PARM = '%PARM,NOSTMT';\n   IF %SYSPARM  \u00ac= '' THEN %PARM = '%PARM,SYSPARM(%SYSPARM)';\n   IF %TERM     \u00ac= '' THEN %PARM = '%PARM,TERM';\n   IF %NOTERM   \u00ac= '' THEN %PARM = '%PARM,NOTERM';\n   IF %TEST     \u00ac= '' THEN %PARM = '%PARM,TEST';\n   IF %NOTEST   \u00ac= '' THEN %PARM = '%PARM,NOTEST';\n/*                                                                   */\n/*********************************************************************/\n/*          INITIALISE SOME INTERNAL SYMBOLS FOR THIS MACRO          */\n/*          SET NOPANEL AS DEFAULT WHEN NOT IN TSO MODE              */\n/*          SET OPTION TO CHAIN TO LINK COMMAND IF SPECIFIED         */\n/*********************************************************************/\nDCL %ANS     INIT '' ;\nDCL %$TYPE   INIT '' ;\nDCL %PRTCAT  INIT '' ;\nDCL %OBJCAT  INIT '' ;\nIF %TSOCLASS = '' THEN %NOPANEL = 'NOPANEL' ;\nIF %LINK    \u00ac= '' THEN %LINK    = 'Y' ;\n/*                                                                   */\n/*********************************************************************/\n/*          SET OPTION FOR PRINT SYSOUT OR NOPRINT                   */\n/*          DEFAULT IS TO MSGCLASS                                   */\n/*********************************************************************/\nIF %PRINT    \u00ac= '' & %SYSOUT\u00ac='' THEN %PRINT = '' ;\nIF %TSOCLASS \u00ac= '' THEN DCL %PFILE INIT 'SYSOUT %TSOCLASS';\n                   ELSE DCL %PFILE INIT 'SYSOUT A';\nIF %PRINT    \u00ac= '' THEN %PFILE = '%PRINT';\nIF %SYSOUT   \u00ac= '' THEN %PFILE = 'SYSOUT %SYSOUT';\nIF %NOPRINT  \u00ac= '' THEN %PFILE = 'NO PRINT REQUIRED';\n/*          SET DSN OR DSID FOR COMPILER INPUT                      */\n/*                DEFAULT IS SYSPREF.ASM                            */\n/********************************************************************/\nIF %LIST(1)='' THEN DO;\nDCL %DSIN INIT '%SYSPREF.ASM';\nEND;\nDCL %MEM INIT  '';\nIF %LIST(1) \u00ac= '' THEN\n   DO;\n      %DSIN = '%LIST(1)';\n      DCL %###X INIT '';\n      DCL %###L INIT '';\n      %###X = INDEX(DSIN,'(');\n      IF %###X \u00ac= 0 THEN\n         DO;\n            %MEM  = SUBSTR(DSIN,%###X);\n            %MEM  = SUBSTR(MEM,2);\n            %###L = LENGTH(MEM);\n            %###L = %###L - 1;\n            %MEM  = SUBSTR(MEM,1,%###L);\n            %###X = %###X - 1;\n            %DSIN = SUBSTR(DSIN,1,%###X);\n            IF %DSIN = '' THEN %DSIN = '%SYSPREF.ASM';\n            %###X = '';\n         END;\n   END;\n/********************************************************************/\n/*              SELECT SYSTEM MACRO LIBRARY IF REQUIRED             */\n/********************************************************************/\nIF %NOMACLIB \u00ac= '' THEN %MACLIB = '' ;\nELSE %MACLIB = 'SYS1.MACLIB' ;\n/**********************************************************************/\n/*              JOL ASSEMBLER COMMAND PANEL                         */\n/********************************************************************/\nIF %NOPANEL = '' THEN\n   PANEL\n   ('             *****  JOL ASM COMMAND  *****               ')\n   ('          ANY HIGHLIGHTED FIELD CAN BE CHANGED           ')\n   ('COMPILER OPTIONS CAN BE CHANGED OR ADDED TO - COMMAS REQD')\n   ('        ALL DATA SET NAMES MUST BE FULLY QUALIFIED       ') //\n   ('        LINK ***** Y/N ****',LINK,1,'%LINK')                //\n   ('SOURCE DATA SET         =====>',DSIN,    44, '%DSIN'  )\n   ('SOURCE DATA SET MEMBER  =====>',MEM,     44, '%MEM'   )\n   ('OBJECT DATA SET         =====>',OBJ,     44, '%OBJ'   )\n   ('MACRO LIBRARY           =====>',MACLIB,  44, '%MACLIB')\n   ('USER MACRO LIBRARY      =====>',LIB,    100, '%LIB'   )\n   ('PRINT OPTION            =====>',PFILE,   44, '%PFILE' )\n   ('COMPILER OPTIONS        =====>',PARM,   100, '%PARM'  )\n   ('*************************************************************');\n/*                                                                  */\n/********************************************************************/\n/*            SET INPUT TO THE COMPILER                             */\n/********************************************************************/\nDCL %LOADMEM INIT '' ;\nIF %MEM \u00ac= '' THEN\n   DO;\n      %DSIN = '%DSIN(%MEM)';\n      %LOADMEM = 'NAME %MEM' ;\n   END;\nDCL INP DS DSN %DSIN NODEF;\n/********************************************************************/\n/*            SET UP OBJECT CODE DATASET                             */\n/*            DEFAULT IS AN EXISTING DATASET                         */\n/*********************************************************************/\nDCL %OBJFILE INIT '' ;\nDCL %OBJDISP INIT '' ;\nIF %OBJ = '&&OBJ' THEN                 /* DEFAULT TO TEMP OBJECT     */\nDO;                                    /* WITH DSID OF OBJ           */\n   %OBJ     = 'OBJ' ;\n   %OBJFILE = 'OBJ' ;\n   DCL OBJ DS DSN &&OBJ BLKSIZE 800 5 CYLS NORLSE SYSDA EXT;\n   %OBJDISP = 'MODS';\nEND;\nELSE                                   /* OBJECT DATASET DSID OR DSN */\nDO;\n   %$TYPE = INDEX(OBJ,'.');\n   IF %$TYPE = 0 THEN                  /* DSID FOR OBJECT DATASET    */\n   DO;                                 /* ASSUME NEW AND CATALOG IT  */\n      %OBJFILE = 'OBJ2' ;\n      DCL OBJ2 DS LIKE %OBJ ;\n      %OBJDISP = 'WRITES' ;\n      %OBJCAT  = 'CATALOGUE OBJ2' ;\n   END;\n   IF %$TYPE \u00ac= 0 & %NOPANEL \u00ac= '' THEN /* DSN FOUND AND PANEL OFF   */\n   DO;                                  /* SO ASSUME OLD DSN USED    */\n      %OBJFILE = 'OBJ2' ;\n      DCL OBJ2 DS DSN %OBJ NODEF ;\n      %OBJDISP = 'UPDATES' ;\n   END;\n   IF %$TYPE \u00ac= 0 & %NOPANEL = '' THEN /* DSN FOUND AND PANEL ON     */\n   DO;                                 /* SO WE CAN GET MORE INFO    */\n      PANEL\n      ('         ***** JOL  ASM  COMMAND *****                ') ///\n      ('YOU HAVE SPECIFIED AN OBJECT DATASET FOR THIS ASSEMBLY') ///\n      ('IS THIS DATA SET CATALOGUED ********* Y/N',ANS,1)        ///\n      ('**********************************************************');\n      %OBJFILE = 'OBJ2';\n      IF %ANS = 'Y' THEN               /* OBJECT DSN IS CATALOGUED   */\n      DO;                              /* SO DECLARE IT AS OLD       */\n         DCL OBJ2 DS DSN %OBJ NODEF;\n         %OBJDISP = 'UPDATES';\n      END;\n      ELSE                             /* NEW DSN FOUND SO TELL      */\n      DO;                              /* USER AND CATALOGUE IT      */\n         PANEL\n         ('      *****  JOL  ASM  COMMAND *****             ') ///\n         ('   ANY HIGHLIGHTED FIELD CAN BE CHANGED          ') ///\n         ('YOUR OBJECT DATA SET DEFINITION IS AS FOLLOWS    ') ///\n         ('',DCLDEF,99,\n          'DCL OBJ2 DS DSN %OBJ SYSDA 5,3 TRKS FB 80,3040 EXT') ///\n         ('********************************************************');\n         %OBJDISP = 'WRITES' ;\n         %OBJCAT  = 'CATALOGUE OBJ2' ;\n         %DCLDEF;\n      END;\n      %ANS = '';\n   END;\n   %$TYPE = '' ;\nEND;\n/********************************************************************/\n/*               SET UP PRINTED OUTPUT OR PRINT DATASET             */\n/********************************************************************/\nDCL %OUTDISP INIT '' ;\n%$TYPE = SUBSTR(PFILE,1,6);\nIF %$TYPE = 'SYSOUT' THEN              /* SYSOUT CLASS DEFINED      */\n   DO;\n      DCL PRT %PFILE;\n      %SYSOUT = '%PFILE';\n      %$TYPE = 1;\n      %OUTDISP = 'WRITES';\n   END;\nIF %$TYPE = 'NO PRI' THEN               /* NOPRINT OPTION CODED      */\n   DO;\n      DCL PRT DS DUMMY NODEF;\n      %$TYPE = 1;\n      %OUTDISP = 'WRITES';\n   END;\nIF %$TYPE \u00ac= 1 THEN                     /* PRINT DSN OR DSID CODED   */\nDO;\n   %$TYPE = INDEX(PFILE,'.');\n   IF %$TYPE = 0 THEN                   /* DSID FOR PRINT DATASET    */\n   DO;                                  /* ASSUME NEW AND CATALOG IT */\n      DCL PRT DS LIKE %PFILE ;\n      %OUTDISP = 'WRITES' ;\n      %PRTCAT  = 'CATALOGUE PRT' ;\n   END;\n   IF %$TYPE \u00ac= 0 & %NOPANEL \u00ac= '' THEN /* DSN FOUND AND PANEL OFF   */\n   DO;                                  /* SO ASSUME OLD DSN USED    */\n      DCL PRT DS DSN %PFILE NODEF ;\n      %OUTDISP = 'UPDATES';\n   END;\n   IF %$TYPE \u00ac= 0 & %NOPANEL = ''  THEN /* DSN FOUND AND PANEL ON    */\n   DO;                                  /* SO WE CAN GET MORE INFO   */\n      PANEL\n      ('       ***** JOL  ASM  COMMAND  *****'               ) ///\n      ('YOU HAVE SPECIFIED A PRINT DATASET FOR THIS ASSEMBLY') ///\n      ('IS THIS DATASET ALREADY CATALOGUED *** Y/N',ANS,1    ) ///\n      ('*********************************************************');\n      IF %ANS = 'Y' THEN               /* PRINT DSN IS CATALOGUED    */\n      DO;                              /* SO DECLARE IT AS OLD       */\n         DCL PRT DS DSN %PFILE NODEF;\n         %OUTDISP = 'UPDATES';\n      END;\n      ELSE                              /* NEW DSN FOUND SO TELL     */\n      DO;                               /* USER AND CATALOGUE IT     */\n         PANEL\n         ('        ***** JOL  ASM  COMMAND  *****           ')\n         ('      ANY HIGHLIGHTED FIELD CAN BE CHANGED       ') ///\n         ('YOUR OUTLIST DATA SET DEFINITION IS AS FOLLOWS   ')\n         ('',DCLDEF,80,\n          'DCL PRT DS DSN %PFILE SYSDA 5,3 TRKS FBA 121,6050 EXT') ///\n         ('********************************************************');\n         %OUTDISP = 'WRITES';\n         %DCLDEF;\n         %PRTCAT = 'CATALOGUE PRT';\n      END;\n      %ANS = '';\n   END;\n   %$TYPE = '' ;\nEND;\n/*********************************************************************/\n/*          SET UP SYSTEM MACLIB AND USER MACRO LIBRARY              */\n/*********************************************************************/\nIF %LIB \u00ac= '' & %MACLIB \u00ac= '' THEN\n     %LIB = '%LIB || %MACLIB' ;\nELSE %LIB = '%LIB %MACLIB' ;\nIF %LIB \u00ac= '' THEN %LIB = 'SYSLIB READS %LIB' ;\n/*********************************************************************/\n/*               WORK DATA SET DECLARATIONS                          */\n/*********************************************************************/\n     DCL DS001  DS  5 CYLS  SYSDA NORLSE NODEF ;\n     DCL DS002  DS  5 CYLS  SYSDA NORLSE NODEF ;\n     DCL DS003  DS  5 CYLS  SYSDA NORLSE NODEF ;;\n     DCL DS004  DS  DUMMY NODEF ;\n/*********************************************************************/\n/*               ASSEMBLER PROGRAM DECLARATION                       */\n/*********************************************************************/\nDCL      ASMBLR   PROG\n         SYSPRINT %OUTDISP PRT\n         %LIB\n         SYSIN    READS    %DSIN\n         SYSUT1   WRITES   DS001\n         SYSUT2   WRITES   DS002\n         SYSUT3   WRITES   DS003\n         SYSPUNCH WRITES   DS004\n         SYSGO    %OBJDISP %OBJFILE ;\n/*********************************************************************/\n/*               RUN ASSEMBLER PROGRAM                               */\n/*********************************************************************/\nASM:\nRUN      ASMBLR    '%PARM';\n/*********************************************************************/\n/*          CATALOGUE PRINT AND OBJECT DATASETS IF NECESSARY         */\n/*********************************************************************/\n%PRTCAT ;\nIF ASM < 8 THEN\nDO;\n   %OBJCAT ;\n   DISPLAY 'ASM RETURNED LESS THAN 8' ;\nEND;\n/*********************************************************************/\n/*               CHAIN TO LINK MACRO IF REQUIRED                     */\n/*********************************************************************/\nIF %LINK = 'Y' THEN\nIF ASM < 12  THEN\n   LINK '%OBJ' %LOADMEM %SYSOUT ASM %NOPANEL ;\n/********************************************************************/\nEND;     /* END OF JOL ASM MACRO                                    */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BACKUP": {"ttr": 2053, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "backup:MACRO(%FROMUNIT=DISK,%TOUNIT=TAPE);\n\n/* If User codes a parameter, then execute the command immediately,\n   otherwise we will show the user a menu */\n\n   dcl %syslabno       init(1) ext;\n\n   dcl %disk           init('');\n   dcl %dstyp          init('');\n   dcl %voltyp         init('');\n   dcl %tempcat        init('');\n   dcl %retdsn         init('');\n   dcl %tempdsn        init('');\n\n   if %list(1) \u00ac= ''   then %disk='%list(1)';\n\n   if %disk \u00ac= ''      then goto gotfile;\n\nloop:\n\nPanel  box\n/( ctr hi 'Jol BACKUP Input Panel')\n///\n/(ctr 'Backup Mainframe Disk Volumes or Files to TAPE.')\n/(ctr 'Please enter the names of the volumes or files')\n (ctr 'you wish to Backup to Tape.')\n////\n/\n('    1st Disk or Data Set  ====> ',disk     ,44,'%disk')\n('    2nd Disk or Data Set  ====> ',list0002 ,44,*)\n('    3rd Disk or Data Set  ====> ',list0003 ,44,*)\n('    4th Disk or Data Set  ====> ',list0004 ,44,*)\n('    5th Disk or Data Set  ====> ',list0005 ,44,*)\n('    6th Disk or Data Set  ====> ',list0006 ,44,*)\n\nhelpline\n('Enter Starts Processing, F3 Exits, F4 shows Files.');\n\ncheckf1:\n\n     if Syspfk=3 then exit;\n\n     IF %SYSPFK = 1 THEN DO;\n        panel reread from disk 'No HELP Available at this time';\n        REDO loop;\n     END;\n\n     if disk='' & %syspfk \u00ac=4\n     then do;\n         panel reread from disk\n             'You must supply a File or Disk Name';\n         goto checkf1;\n     end;\n\n\n     if %syspfk \u00ac= 4 then goto getoutds;\n\n     $getinds 'Jol Backup Details' '1st Backup Input File =====>';\n     %disk     = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Backup Details' '2nd Backup Input File =====>';\n     %list0002 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Backup Details' '3rd Backup Input File =====>';\n     %list0003 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Backup Details' '4th Backup Input File =====>';\n     %list0004 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Backup Details' '5th Backup Input File =====>';\n     %list0005 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Backup Details' '6th Backup Input File =====>';\n     %list0006 = '%retdsn';\n\n\ngetoutds:\n\n     if disk=''\n     then do;\n         panel reread from disk 'You must supply a Disk Name';\n         goto loop;\n     end;\n\n\n     list0001='%disk';\n\ngotfile:\n\n     if index(list0001,'.') \u00ac=0\n     then %dstyp='Y';\n     else %voltyp='Y';\n\n     if  list0002 \u00ac=''\n     then do;\n         if index(list0002,'.') \u00ac=0\n         then %dstyp='Y';\n         else %voltyp='Y';\n     end;\n\n     if  list0003 \u00ac=''\n     then do;\n         if index(list0003,'.') \u00ac=0\n         then %dstyp='Y';\n         else %voltyp='Y';\n     end;\n\n     if  list0004 \u00ac=''\n     then do;\n         if index(list0004,'.') \u00ac=0\n         then %dstyp='Y';\n         else %voltyp='Y';\n     end;\n\n     if  list0005 \u00ac=''\n     then do;\n         if index(list0005,'.') \u00ac=0\n         then %dstyp='Y';\n         else %voltyp='Y';\n     end;\n\n     if  list0006 \u00ac=''\n     then do;\n         if index(list0006,'.') \u00ac=0\n         then %dstyp='Y';\n         else %voltyp='Y';\n     end;\n\n     if  %dstyp='Y'\n      &  %voltyp='Y'\n     then do;\n         write 'You cannot specify both a VOLUME and a DATA SET';\n         write 'To BACKUP.';\n         exit;\n     end;\n\n     if  %voltyp='Y'\n     then do;\n          IF %LIST(1)='' THEN STOP 'No Volume Specified for Backup';\n          DCL %DDS1,%DDS2,%DDS3,%DDS4,%DDS5,%DDS6,\n                %DUMP1,%DUMP2,%DUMP3,%DUMP4,%DUMP5,%DUMP6 INIT '';\n          DCL %BACKDSN INIT 'JOL.VOLUME.BACKUP.OF';\n          IF %LIST(1)\u00ac='' THEN DO;\n              %DUMP1=' DUMP FROMDD=IN01,TODD=OUT01 ';\n              DCL DDIN01 DS VOL %LIST(1) NODSN UNIT %FROMUNIT;\n              DCL DDOUT01 DS %TOUNIT DSN=%BACKDSN%LIST(1) (+1) NODEF;\n              %DDS1=' IN01 READS DDIN01 OUT01 WRITES DDOUT01 ';\n          END;\n          IF %LIST(2)\u00ac='' THEN DO;\n              %DUMP2=' DUMP FROMDD=IN02,TODD=OUT02 ';\n              DCL DDIN02 DS VOL %LIST(2) NODSN UNIT %FROMUNIT;\n              DCL DDOUT02 DS %TOUNIT DSN=%BACKDSN%LIST(2) (+1) NODEF;\n              %DDS2='IN02 READS DDIN02 OUT02 WRITES DDOUT02 ';\n          END;\n          IF %LIST(3)\u00ac='' THEN DO;\n              %DUMP3=' DUMP FROMDD=IN03,TODD=OUT03 ';\n              DCL DDIN03 DS VOL %LIST(3) NODSN UNIT %FROMUNIT;\n              DCL DDOUT03 DS %TOUNIT DSN=%BACKDSN%LIST(3) (+1) NODEF;\n              %DDS3='IN03 READS DDIN03 OUT03 WRITES DDOUT03 ';\n          END;\n          IF %LIST(4)\u00ac='' THEN DO;\n              %DUMP4=' DUMP FROMDD=IN04,TODD=OUT04 ';\n              DCL DDIN04 DS VOL %LIST(4) NODSN UNIT %FROMUNIT;\n              DCL DDOUT04 DS %TOUNIT DSN=%BACKDSN%LIST(4) (+1) NODEF;\n              %DDS4='IN04 READS DDIN04 OUT04 WRITES DDOUT04 ';\n          END;\n          IF %LIST(5)\u00ac='' THEN DO;\n              %DUMP5=' DUMP FROMDD=IN05,TODD=OUT05 ';\n              DCL DDIN05  DS VOL %LIST(5) NODSN UNIT %FROMUNIT;\n              DCL DDOUT05 DS %TOUNIT DSN=%BACKDSN%LIST(5) (+1) NODEF;\n              %DDS5='IN05 READS DDIN05 OUT05 WRITES DDOUT05 ';\n          END;\n          IF %LIST(6)\u00ac='' THEN DO;\n              %DUMP6=' DUMP FROMDD=IN06,TODD=OUT06 ';\n              DCL DDIN06 DS VOL %LIST(6) NODSN UNIT %FROMUNIT;\n              DCL DDOUT06 DS %TOUNIT DSN=%BACKDSN%LIST(6) (+1) NODEF;\n              %DDS6='IN06 READS DDIN06 OUT06 WRITES DDOUT06 ';\n          END;\n\n          if  list0007 \u00ac=''\n          then do;\n              stop 'Too Many Packs to Backup';\n              stop 'Use 2 or More Backup Instructions';\n          end;\n          DCL PRINTER PRINTER FBM 1210,121;\n          DCL CONTROL * REPLACE;\n %DUMP1\n %DUMP2\n %DUMP3\n %DUMP4\n %DUMP5\n %DUMP6\nEOF;\n          DCL IEHDASDR PROG\n              SYSPRINT WRITES PRINTER\n              SYSIN READS CONTROL\n              %DDS1 %DDS2 %DDS3 %DDS4 %DDS5 %DDS6;\n          RUN IEHDASDR;\n          IF %LIST(1)\u00ac='' THEN CATLG DDOUT01;\n          IF %LIST(2)\u00ac='' THEN CATLG DDOUT02;\n          IF %LIST(3)\u00ac='' THEN CATLG DDOUT03;\n          IF %LIST(4)\u00ac='' THEN CATLG DDOUT04;\n          IF %LIST(5)\u00ac='' THEN CATLG DDOUT05;\n          IF %LIST(6)\u00ac='' THEN CATLG DDOUT06;\n          exit;\n     end;\n /* Here we have a data set backup*/\n     IF %LIST(1)='' THEN STOP 'No Data Set Specified for Backup';\n     DCL %BACKDSN INIT 'JOLBU.';\n     DCL bakstart ds %tounit dsn=\n                     JOL.DATASET.BACKUP.DAY%sysdate.TM%hours%mins%secs\n                     NODEF;\n     dcl dummy    ds dummy;\n\n /* Start a tape with the date on the front */\n\n     if %syslabno=1\n     then do;\n         copy dummy to bakstart catlg=yes;\n         %syslabno = %syslabno +1;\n     end;\n\n     IF %LIST(1)\u00ac='' THEN DO;\n         %tempdsn = '%BACKDSN%LIST(1)';\n         if index(tempdsn,'(') = 0 then %tempdsn='%tempdsn(+1)';\n         DCL DDOUT01 DS %TOUNIT DSN=%tempdsn NODEF\n                        FILENO %syslabno volref bakstart;\n         %syslabno = %syslabno +1;\n         copy %list(1) to DDOUT01 ;\n     END;\n     IF %LIST(2)\u00ac='' THEN DO;\n         %tempdsn = '%BACKDSN%LIST(2)';\n         if index(tempdsn,'(') = 0 then %tempdsn='%tempdsn(+1)';\n         DCL DDOUT02 DS %TOUNIT DSN=%tempdsn NODEF\n                        FILENO %syslabno volref ddout01;\n         %syslabno = %syslabno +1;\n         copy %list(2) to DDOUT02 ;\n     END;\n     IF %LIST(3)\u00ac='' THEN DO;\n         %tempdsn = '%BACKDSN%LIST(3)';\n         if index(tempdsn,'(') = 0 then %tempdsn='%tempdsn(+1)';\n         DCL DDOUT03 DS %TOUNIT DSN=%tempdsn NODEF\n                        FILENO %syslabno volref ddout02;\n         %syslabno = %syslabno +1;\n         copy %list(3) to DDOUT03 ;\n     END;\n     IF %LIST(4)\u00ac='' THEN DO;\n         %tempdsn = '%BACKDSN%LIST(3)';\n         if index(tempdsn,'(') = 0 then %tempdsn='%tempdsn(+1)';\n         DCL DDOUT04 DS %TOUNIT DSN=%tempdsn NODEF\n                        FILENO %syslabno volref ddout03;\n         %syslabno = %syslabno +1;\n         copy %list(4) to DDOUT04 ;\n     END;\n     IF %LIST(5)\u00ac='' THEN DO;\n         %tempdsn = '%BACKDSN%LIST(3)';\n         if index(tempdsn,'(') = 0 then %tempdsn='%tempdsn(+1)';\n         DCL DDOUT05 DS %TOUNIT DSN=%tempdsn NODEF\n                        FILENO %syslabno volref ddout04;\n         %syslabno = %syslabno +1;\n         copy %list(5) to DDOUT05 ;\n     END;\n     IF %LIST(6)\u00ac='' THEN DO;\n         %tempdsn = '%BACKDSN%LIST(3)';\n         if index(tempdsn,'(') = 0 then %tempdsn='%tempdsn(+1)';\n         DCL DDOUT06 DS %TOUNIT DSN=%tempdsn NODEF\n                        FILENO %syslabno volref ddout05;\n         %syslabno = %syslabno +1;\n         copy %list(5) to DDOUT06 ;\n     END;\n     %tempcat = 'Catlg ';\n     IF %LIST(1)\u00ac='' THEN %tempcat = '%tempcat DDOUT01';\n     IF %LIST(2)\u00ac='' THEN %tempcat = '%tempcat DDOUT02';\n     IF %LIST(3)\u00ac='' THEN %tempcat = '%tempcat DDOUT03';\n     IF %LIST(4)\u00ac='' THEN %tempcat = '%tempcat DDOUT04';\n     IF %LIST(5)\u00ac='' THEN %tempcat = '%tempcat DDOUT05';\n     IF %LIST(6)\u00ac='' THEN %tempcat = '%tempcat DDOUT06';\n\n     IF %LIST(1)\u00ac='' THEN %tempcat;       /* Do all the CATALOGs */\nEND;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLDCDS": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x88\"_\\x00\\x88$_\\x18\\x00\\x00\\x89\\x00\\x85\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1988-08-12T00:00:00", "modifydate": "1988-09-01T18:00:00", "lines": 137, "newlines": 133, "modlines": 0, "user": "JOL"}, "text": "BLDCDS: MACRO (         /* BUILD DATA SET ID DECISION MAKER */\n\n          %PRINTER,     /* ADD TO PRINTER TABLE        */\n          %DATASET,\n          %PROGRAM,\n          %ENDJOB,\n          %DDNAME=,\n          %DISP=,\n          ) ;\n                        /* ADD TO PRINTER OR DS TABLE ????  */\n dcl %check                  init('');\n dcl %temp                   init('');\n DCL %DECISION, %CONT INIT '';\n\n /* Determine if INPUT or OUTPUT */\n\n /* %DDNAME=caps(ddname); */\n\n    if %disp=''\n    then do;\n        %CHECK=INDEX(ddname,' READ');\n        IF %CHECK=0 THEN %CHECK=INDEX(ddname,' UPDATE');\n        IF %CHECK>0 THEN %DISP='OLD';\n                    ELSE %DISP='NEW';\n    end;\n\n%DSIDRET='';\n  /* HERE WE MUST DECIDE IF %LIST(1) IS PRINTER OR SYSOUT BECAUSE\n     THEY MUST BE HANDLED IN A DIFFERENT WAY */\n%CNT=1;\n     IF %LIST(1) THEN DO;\nLABEL DECIDE;\n     %DECISION=INDEX(LIST0001,'PRINTER');\n     IF %DECISION = 0 THEN %DECISION=INDEX(LIST0001,'SYSOUT');\n        IF %DECISION > 0 THEN DO;\n           %DATASET='';\n       /*  WRITE 'PRINTER OR SYSOUT FOUND'; */\n           %PRINTER='PRINTER';\n        END;\n        ELSE DO;\n        %PRINTER=''; %DATASET='DATASET';\n        END;\n           IF %DISP='OLD' & %PRINTER='PRINTER' THEN DO;\n           panel %boxcolor box\n           ///\n ('              %LIST(1) Cannot be READ or UPDATED because it is')\n ('                   a Printer or Sysout File.')\n //\n ('                   'Please Respecify the data.')\n//('              Data Set Name ==>',LIST0001,44);\n                 %PRINTER=''; %DATASET='DATASET';\n                 REDO DECIDE; /* THIS MAKES SURE THEY DON'T RE-ENTER\n                                 A PRINTER */\n           END;\n  END;\n /******************************************************************/\n /********* C H E C K   T H E   P R I N T E R S ********************/\n /******************************************************************/\n IF %PRINTER = 'PRINTER' & %LIST(1) \u00ac= '' THEN DO;\n    %CONT='YES';\n    LABEL PRINTCK;\n      SET CHECK = 'PRNT%CNT';\n      %SETA = 'SET CHECK = %%QUOTE%%%CHECK%%QUOTE';\n      %SETA;                          /* CHECK = VALUE OF %PRNT%CNT */\n      IF %CHECK ='%LIST0001' THEN DO;  /* PRNTS THE SAME ? */\n         %CONT  = 'NO';                /* RETURN THE PRNT DSID  */\n         %DSIDRET='PRNT%CNT';\n     /*  WRITE 'PRINTER NAMES ARE THE SAME ''%LIST0001'' %CHECK'; */\n      END;\n      IF %CHECK = '' THEN DO;          /* HERE THEY ARE NOT THE SAME */\n         SET PRNT%CNT='%LIST(1)';      /* SO THE PRNT DCL IS MADE.   */\n         BLDPRNTR '%LIST(1)' PRINTER DSID=PRNT%CNT;\n         %DSIDRET='PRNT%CNT';\n      END;\n\n           ELSE DO;\n                IF %CONT  \u00ac= 'NO' THEN DO;\n                   %CNT = %CNT + 1;  IF %CNT < 11 THEN REDO PRINTCK;\n                           ELSE DO;\n                           UJY03P '/* %LIST(1)  ERROR */' ;\n                           UJY03P '/* %LIST(1)  ERROR */' ;\n                               WRITE '%LIST(1) CANNOT BE STORED';\n                               WRITE 'IN PRINTER TABLE CHECK CODE';\n                               WRITE 'FOR /* ERROR */ ';\n                               %DSIDRET='ERROR';\n                           END;\n                END;\n           END;\n  END;\n%CNT = 1; /* RESET CNT TO 1 */\n /******************************************************************/\n /********* C H E C K   T H E   D A T A   S E T S ******************/\n /******************************************************************/\n IF %DATASET = 'DATASET' & %LIST(1) \u00ac= '' THEN DO;\n    %CONT='YES';\nLABEL DSETCK;\n      SET CHECK = 'DSET%CNT';\n /*    %SETA = 'SET CHECK = ''%%%CHECK'''; */\n      %SETA = 'SET CHECK = %%QUOTE%%%CHECK%%QUOTE';\n      %SETA;                           /* CHECK = VALUE OF %DSET%CNT */\n      IF %CHECK ='%LIST0001' THEN DO;    /* DSETS THE SAME ? */\n         %CONT  = 'NO';                  /* RETURN THE DSET  */\n         %temp=index(check,'.');\n         if %temp\u00ac=0\n         then\n         %DSIDRET='DSET%CNT';            /* IDENTIFIER       */\n         else %DSIDRET='%check';         /* Users DSID name  */\n      /* WRITE 'DSET NAMES ARE THE SAME ''%LIST0001'' %CHECK'; */\n      END;\n      IF %CHECK = '' THEN DO;          /* HERE THEY ARE NOT THE SAME */\n         SET DSET%CNT='%LIST(1)';      /* SO THE DCL THE DSET        */\n         %DSIDRET='DSET%CNT';\n         %work=index(list0001,'.');\n         if %work\u00ac=0 then\n         BLDDS '%LIST(1)' DATASET DSID=DSET%CNT DISP=%DISP;\n         else do;\n              BLDDS '%LIST(1)' DATASET DSID=%list0001 DISP=%DISP;\n              %dsidret='%list(1)';\n         end;\n      END;\n\n           ELSE DO;\n                IF %CONT  \u00ac= 'NO' THEN DO;\n                   %CNT = %CNT + 1;  IF %CNT < 50 THEN REDO DSETCK;\n                           ELSE DO;\n                           UJY02P '/* %LIST(1) ERROR */' ;\n                           UJY03P '/* %LIST(1) ERROR */' ;\n                               WRITE '%LIST(1) CANNOT BE STORED';\n                               WRITE 'IN DATA SET TABLE CHECK CODE';\n                               WRITE 'FOR /* ERROR */ ';\n                               %DSIDRET='ERROR';\n                           END;\n                END;\n           END;\n  END;\n  END; /* Extra ?? */\nEND; /* END OF BLDCDS MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLDCHPGM": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x88\\x16\\x0f\\x00\\x88$O\\x175\\x00*\\x00(\\x00\\x02\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1988-06-08T00:00:00", "modifydate": "1988-08-31T17:35:00", "lines": 42, "newlines": 40, "modlines": 2, "user": "JOL"}, "text": "BLDCHPGM: MACRO; /* THIS IS A TEMPORARY MACRO TO CHECK WHETHER A */\n                  /* PROGRAM IS REGISTERED OR NOT    */\n\n DCL %PGMNAME INIT '';\n\n\n\nIF %LIST(1)\nTHEN DO;\n       IF %LIST0001 ='SORT'    |\n          %LIST0001 ='COPY'    |\n          %LIST0001 ='PRINT'   |\n          %LIST0001 ='COMPRESS'\n       THEN DO;\n          %inc='NO';\n          exit;\n       END;\n       ELSE DO;\n      /*    INCLUDE '%LIST(1).pgm';*/\n            INCLUDE  %LIST(1)     ;\n            IF %PGMNAME=''\n            THEN DO;\n               panel %boxcolor box\n/ ('                      Jol Registration Panel')\n/ ('                   %LIST(1) is not Registered.')\n//('                You may now Register this Program.')\n/ ('             NOTE: When you REGISTER a Program, you tell')\n/ ('            Jol which DDNAMES etc are used by the Program.')\n///\n  ('                Press Function Key 3 or 15 to Abort,')\n  ('                     or Enter to continue.')\n                  ;\n               IF %SYSPFK=3 | %SYSPFK=15 THEN EXIT;\n                       REGISTER %LIST(1);\n            END;\n        END;\nEND;\nELSE DO;\n           WRITE 'BUILDJOB Error: No %%LIST item in Check_Program.';\n           WRITE 'Please Notify CCS-JOL Pty. Ltd.';\n     END;\nEND; /* OF MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLDCOMP": {"ttr": 2310, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x88\\x16\\x0f\\x00\\x88$/\\x169\\x00\\x8a\\x00\\x88\\x00 \\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1988-06-08T00:00:00", "modifydate": "1988-08-29T16:39:00", "lines": 138, "newlines": 136, "modlines": 32, "user": "JOL"}, "text": " BLDCOMP:MACRO; /* THIS IS NOW OLD */\n      DCL  %COMPIF INIT 'MAXCC=0';\n      DCL  %COPYTYPE INIT 'SEQ';\n      DCL  %OLD      INIT 'NEW';\n      DCL  %COMP1, %COMP2, %COMP3, %COMP4, %COMP5,\n           %COMP6, %COMP7, %COMP8, %COMP9,\n           %COMP10, %COMP11, %COMP12, %COMP13,\n           %COMP14, %COMP15                     INIT '';\n      Dcl %error     init '';\nLABEL COMPRES;\n      panel %boxcolor box\n  ('                         -  BUILD COMPRESS  -  %error')\n//('    COMPRESS Data IF',COMPIF,40,'%COMPIF')\n//\n  ('        1.      Data Set Name =>',COMP1,44,'%COMP1')\n  ('        2.      Data Set Name =>',COMP2,44,'%COMP2')\n  ('        3.      Data Set Name =>',COMP3,44,'%COMP3')\n  ('        4.      Data Set Name =>',COMP4,44,'%COMP4')\n  ('        5.      Data Set Name =>',COMP5,44,'%COMP5')\n  ('        6.      Data Set Name =>',COMP6,44,'%COMP6')\n  ('        7.      Data Set Name =>',COMP7,44,'%COMP7')\n  ('        8.      Data Set Name =>',COMP8,44,'%COMP8')\n  ('        9.      Data Set Name =>',COMP9,44,'%COMP9')\n  ('       10.      Data Set Name =>',COMP10,44,'%COMP10')\n  ('       11.      Data Set Name =>',COMP11,44,'%COMP11')\n  ('       12.      Data Set Name =>',COMP12,44,'%COMP12')\n  ('       13.      Data Set Name =>',COMP13,44,'%COMP13')\n  ('       14.      Data Set Name =>',COMP14,44,'%COMP14')\n  ('       15.      Data Set Name =>',COMP15,44,'%COMP15')\n           ;\nIF %SYSPFK=3 | %SYSPFK=15 THEN EXIT;\nIF %SYSPFK=1 THEN DO;\n/* panel reread from comp1 'No HELP Available at this time'; */\n   REDO COMPRES;\nEND;\n\ncompchk:\n      IF %COmp1=''\n      then do;\n           %error='No COMPRESS Data Set Specified';\n           redo compres;\n           panel reread from comp1 'No COMPRESS Data Set Specified';\n           goto compchk;\n      end;\n\n/* HERE WE SEND THE INFO TO THE BLDCDS COMMAND AND RECIEVE DSID'S */\n\n           IF %COMP1 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP1'; %COMP1='%DSIDRET';\n              IF %COMP2\u00ac='' THEN %COMP1='%COMP1,';\n           END;\n\n           IF %COMP2 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP2'; %COMP2='%DSIDRET';\n              IF %COMP3\u00ac='' THEN %COMP2='%COMP2,';\n           END;\n\n           IF %COMP3 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP3'; %COMP3='%DSIDRET';\n              IF %COMP4\u00ac='' THEN %COMP3='%COMP3,';\n           END;\n\n           IF %COMP4 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP4'; %COMP4='%DSIDRET';\n              IF %COMP5\u00ac='' THEN %COMP4='%COMP4,';\n           END;\n\n           IF %COMP5 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP5'; %COMP5='%DSIDRET';\n              IF %COMP6\u00ac='' THEN %COMP5='%COMP5,';\n           END;\n\n           IF %COMP6 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP6'; %COMP6='%DSIDRET';\n              IF %COMP7\u00ac='' THEN %COMP6='%COMP6,';\n           END;\n\n           IF %COMP7 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP7'; %COMP7='%DSIDRET';\n              IF %COMP8\u00ac='' THEN %COMP7='%COMP7,';\n           END;\n\n           IF %COMP8 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP8'; %COMP8='%DSIDRET';\n              IF %COMP9\u00ac='' THEN %COMP8='%COMP8,';\n           END;\n\n           IF %COMP9 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP9'; %COMP9='%DSIDRET';\n              IF %COMP10\u00ac='' THEN %COMP9='%COMP9,';\n           END;\n\n           IF %COMP10 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP10'; %COMP10='%DSIDRET';\n              IF %COMP11\u00ac='' THEN %COMP10='%COMP10,';\n           END;\n\n           IF %COMP11 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP11'; %COMP11='%DSIDRET';\n              IF %COMP12\u00ac='' THEN %COMP11='%COMP11,';\n           END;\n\n           IF %COMP12 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP12'; %COMP12='%DSIDRET';\n              IF %COMP13\u00ac='' THEN %COMP12='%COMP12,';\n           END;\n\n           IF %COMP13 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP13'; %COMP13='%DSIDRET';\n              IF %COMP14\u00ac='' THEN %COMP13='%COMP13,';\n           END;\n\n           IF %COMP14 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP14'; %COMP14='%DSIDRET';\n              IF %COMP15\u00ac='' THEN %COMP14='%COMP14,';\n           END;\n\n           IF %COMP15 \u00ac= '' THEN DO;\n              BLDCDS DATASET Disp=old '%COMP15'; %COMP15='%DSIDRET';\n           END;\n\n\n IF %COMPIF \u00ac='' THEN UJY04P '   If %COMPIF Then';\n\n IF %COMP11 \u00ac='' THEN DO;\n    UJY04P '       Compress  %COMP1 %COMP2 %COMP3 %COMP4 %COMP5';\n    UJY04P '                 %COMP6 %COMP7 %COMP8 %COMP9 %COMP10';\n    UJY04P '                 %COMP11 %COMP12 %COMP13 %COMP14 %COMP15; ';\n END;\n IF %COMP11='' & %COMP6 \u00ac= '' THEN DO;\n    UJY04P '       Compress  %COMP1 %COMP2 %COMP3 %COMP4 %COMP5';\n    UJY04P '                 %COMP6 %COMP7 %COMP8 %COMP9 %COMP10;';\n END;\n\n IF %COMP6='' THEN DO;\n    UJY04P '       Compress  %COMP1 %COMP2 %COMP3 %COMP4 %COMP5;';\n END;\nEND;    /* BLDCOMP  */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLDCOPY": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x88\\x16\\x0f\\x00\\x88$O\\x16C\\x00|\\x00q\\x00\\x02\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1988-06-08T00:00:00", "modifydate": "1988-08-31T16:43:00", "lines": 124, "newlines": 113, "modlines": 2, "user": "JOL"}, "text": " BLDCOPY:MACRO;\n      DCL  %COPYIF INIT 'MAXCC=0';\n      DCL  %COPYIN, %COPYOUT INIT '?';\n      DCL  %COPYTYPE INIT 'SEQ';\n      DCL  %OLD      INIT 'NEW';\n      DCL  %COPYIN2, %COPYIN3, %COPYIN4, %COPYIN5,\n           %COPYIN6, %COPYIN7, %COPYIN8, %COPYIN9\n           INIT '';\n      DCL  %error    INIT '';\nLABEL COPY;\n     panel               ('                         %error')\n('                  %TITLE  ')\n('                      -  Build COPY Statement  -')\n('            (OPTIONAL)    IF ',COPYIF,48,'%COPYIF')\n('                        COPY ',COPYIN,44,'%COPYIN')\n('                          To ',COPYOUT,44,'%COPYOUT')\n/\n('           Enter Type of Copy below (PO, PDS, SEQ, VSAM or ISAM)')\n('            TYPE       ==>',COPYTYPE,4,'%COPYTYPE')\n/\n('           Enter OLD if the Data Set Exists Already (or SHR)',\n            OLD,3,'%OLD')\n/\n('            2nd Input  ==>',COPYIN2,44,'%COPYIN2')\n('            3rd Input  ==>',COPYIN3,44,'%COPYIN3')\n('            4th Input  ==>',COPYIN4,44,'%COPYIN4')\n('            5th Input  ==>',COPYIN5,44,'%COPYIN5')\n('            6th Input  ==>',COPYIN6,44,'%COPYIN6')\n('            7th Input  ==>',COPYIN7,44,'%COPYIN7')\n('            8th Input  ==>',COPYIN8,44,'%COPYIN8')\n('            9th Input  ==>',COPYIN9,44,'%COPYIN9')\n           ;\nIF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\nIF %SYSPFK = 1 THEN DO;\n   %error = 'No HELP Available at this time';\n   REDO COPY;\n   panel reread from copyout 'No HELP Available at this time';\n   REDO COPY;\nEND;\ncheckc:\n           IF %COPYIN='?' | %COPYIN =''\n           then do;\n                %error='No INPUT Data Set Specified';\n                REDO COPY;\n                panel reread from copyin 'No INPUT Data Set Specified';\n                goto checkc;\n           end;\n           IF %COPYOUT='?' | %COPYOUT =''\n           then do;\n                %error= 'No OUTPUT Data Set Specified';\n                REDO COPY;\n                panel reread\n                    from copyout 'No OUTPUT Data Set Specified';\n                goto checkc;\n           end;\n           IF %COPYTYPE='SEQ'  |  %COPYTYPE='ISAM'\n           |  %COPYTYPE='VSAM' |  %COPYTYPE='PO'\n           |  %COPYTYPE='PDS'  |  %COPYTYPE='?'\n           THEN;\n           ELSE DO;\n                %error='Invalid File Type Specified';\n                REDO COPY;\n                panel reread\n                    from copytype\n                    'Invalid File Type Specified';\n                goto checkc;\n           end;\n\n           BLDCDS DATASET Disp=old '%COPYIN'; %COPYIN='%DSIDRET';\n           %INPUT='%COPYIN';\n           IF %OLD = '' | %OLD = 'NEW'\n           THEN DO;\n               BLDCDS DATASET '%COPYOUT' DISP=NEW ;\n               %COPYOUT = '%DSIDRET';\n           END;\n           ELSE DO;\n               BLDCDS DATASET '%COPYOUT' DISP=OLD ;\n               %COPYOUT = '%DSIDRET';\n           END;\n\n           IF %COPYIN2\u00ac='' THEN DO;\n              BLDCDS DATASET Disp=old '%COPYIN2'; %COPYIN2='%DSIDRET';\n           END;\n           IF %COPYIN3\u00ac='' THEN DO;\n              BLDCDS DATASET Disp=old '%COPYIN3'; %COPYIN3='%DSIDRET';\n           END;\n           IF %COPYIN4\u00ac='' THEN DO;\n              BLDCDS DATASET Disp=old '%COPYIN4'; %COPYIN4='%DSIDRET';\n           END;\n           IF %COPYIN5\u00ac='' THEN DO;\n              BLDCDS DATASET Disp=old '%COPYIN5'; %COPYIN5='%DSIDRET';\n           END;\n           IF %COPYIN6\u00ac='' THEN DO;\n              BLDCDS DATASET Disp=old '%COPYIN6'; %COPYIN6='%DSIDRET';\n           END;\n           IF %COPYIN7\u00ac='' THEN DO;\n              BLDCDS DATASET Disp=old '%COPYIN7'; %COPYIN7='%DSIDRET';\n           END;\n           IF %COPYIN8\u00ac='' THEN DO;\n              BLDCDS DATASET Disp=old '%COPYIN8'; %COPYIN8='%DSIDRET';\n           END;\n           IF %COPYIN9\u00ac='' THEN DO;\n              BLDCDS DATASET Disp=old '%COPYIN9'; %COPYIN9='%DSIDRET';\n           END;\n\n           IF %COPYIN2\u00ac='' THEN %INPUT='%INPUT || %COPYIN2';\n           IF %COPYIN3\u00ac='' THEN %INPUT='%INPUT || %COPYIN3';\n           IF %COPYIN4\u00ac='' THEN %INPUT='%INPUT || %COPYIN4';\n           IF %COPYIN5\u00ac='' THEN %INPUT='%INPUT || %COPYIN5';\n           IF %COPYIN6\u00ac='' THEN %INPUT='%INPUT || %COPYIN6';\n           IF %COPYIN7\u00ac='' THEN %INPUT='%INPUT || %COPYIN7';\n           IF %COPYIN8\u00ac='' THEN %INPUT='%INPUT || %COPYIN8';\n           IF %COPYIN9\u00ac='' THEN %INPUT='%INPUT || %COPYIN9';\n           IF %OLD='NEW' THEN %OLD='';  /* NOT NEEDED FOR COPY */\n           IF %COPYIF \u00ac='' THEN UJY04P '   If %COPYIF Then';\n           %copyin5=LENGTH(INPUT);     /* Save Symbolic */\n           IF %copyin5<40 THEN DO;\n              UJY04P '       Copy %INPUT to %COPYOUT %COPYTYPE %OLD;';\n           END;\n           ELSE DO;\n              UJY04P '       Copy %INPUT ';\n              UJY04P '            to %COPYOUT %COPYTYPE %OLD;';\n           END;\nEND;    /* BLDCOPY  */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLDDS": {"ttr": 2316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x88\\x16\\x0f\\x00\\x88$?\\x18\\x08\\x00O\\x00F\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1988-06-08T00:00:00", "modifydate": "1988-08-30T18:08:00", "lines": 79, "newlines": 70, "modlines": 0, "user": "JOL"}, "text": "  BLDDS:MACRO\n   (%dsid=,%disp=,%typ=);\n  IF %LIST(1)='' THEN WRITE 'ERROR - NO DATA SET ON INPUT TO BLDDS';\n  ELSE DO;\n/*  write 'At BLDDS, list(1)=%list(1)';\n    write 'At BLDDS, dsid   =%dsid';\n    write 'At BLDDS, dsn    =%dsn';  */\n    DCL %TYPE INIT '';\n    DCL %x    INIT '';\n    DCL %DSN,%RECFM,%VOL,%VOLREF,%RETPD,%UNIT   INIT '';\n    DCL %FILENO,%DSORG,%OPTCD,%PROTECT INIT '';\n    DCL %RECLEN,%BLKSIZE                            INIT '';\n    DCL %FIRST,%SECOND,%DIR,%SPACE                  INIT '';\n\n    %TYPE=INDEX(LIST0001,'.');        /* test if DSN or DSID */\n    IF %TYPE\u00ac=0\n    THEN DO;      /* DATA SET NAME SPECIFIED, not DSID */\n        %dsn='%list(1)';\n        IF %disp='NEW' then blddsout;\n        else blddsin;\n    end;\n    IF %TYPE=0\n    THEN DO;      /* DATA SET NAME NOT SPECIFIED, SO BUILD DSID */\n        IF %disp='NEW' then blddsout;\n        else blddsin;\n    end;\n\n    %dsid='%dsid          ';\n    %DSID=SUBSTR(DSID,1,8);         /* Tidy up for output */\n\n        %work='Dcl %DSID ds %DSN ';\n        if %recfm='' & (%reclen\u00ac='' | %blksize\u00ac='')\n        then do;\n            if %reclen \u00ac='' then %work=%work||' Lrecl %reclen';\n            if %blksize\u00ac='' then %work=%work||' Block %blksize';\n        end;\n        else if %RECFM\u00ac=''\n        then %work='%work %RECFM %RECLEN,%BLKSIZE';\n/*      if length(work) + length(vol)>50 */\n        %x=length(work);\n        %z=length(vol);\n        %x=%x+%z;\n        if %x>50\n        then do;\n             UJY03P '%work';\n             %work='               ';\n        end;\n        if %vol   \u00ac='' then work='%work Vol=%vol %unit';\n        if %fileno\u00ac='' then work='%work Fileno %fileno';\n/*      if length(work)>50 */\n        %x=length(work);\n        if %x>50\n        then do;\n             UJY03P '%work';\n             %work='               ';\n        end;\n        if %first\u00ac='' | %second\u00ac='' | %dir\u00ac=''\n        then do;\n            %work='%work Space %first,%second';\n            if %dir\u00ac='' then %work='%work,%dir';\n            if %space='B' then %work='%work Blks ';\n            if %space='C' then %work='%work Cyls ';\n            if %space='T' then %work='%work Trks ';\n            if %space=' ' then %work='%work Trks ';\n        end;\n        if %protect\u00ac='' then work='%work Protect';\n        if %dsorg  \u00ac='' then work='%work Dsorg %dsorg';\n /*     if length(work)>50  & retpd ='' */\n        %x=length(work)>50;\n        if %x>50  & %retpd\u00ac=''\n        then do;\n             UJY03P '%work';\n             %work='               ';\n        end;\n        if %retpd\u00ac='' then\n        %work='%work Retain for %RETPD';\n        UJY03P '%work;';\n      END;\n    END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLDDSIN": {"ttr": 2563, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00@\\x00\\x88$?\\x01\\x042\\x0f\\x074\\x00\\xcc\\x00\\xc5\\x00Z\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1988-08-30T00:00:00", "modifydate": "2004-11-15T07:34:40", "lines": 204, "newlines": 197, "modlines": 90, "user": "IBMUSER"}, "text": "  BLDDSIN:MACRO;\n    dcl %error     init('');\n    if %dsn\u00ac=''\n    then do;\n LABEL dsnin;\n             PANEL  ('                       %error')\n ('               BUILD Input Data Set Details')\n/('   DSID ''%dsid'' Data Set Name ''%dsn'' is being used for Input')\n\n /(hi '  Note:')\n  (  '          If Data Set ''%dsn'' is Cataloged, you are')\n  (  '          STRONGLY advised NOT to fill in the information below.')\n\n /(hi '  Volume and Unit Information: ')\n  (   '                (Code VOLREF in QUOTES to indicate to a DSN)')\n /('       Volume           ==>',VOL,48,'%vol')\n  ('    or Volume Reference ==>',VOLREF,44,'%volref')\n  ('       Unit \u00dd,number    ==>',UNIT,11,'%unit')\n /(hi '  For Magnetic Tapes only:' )\n /('       Label Number     ==>',FILENO,3,'%fileno')\n ///('            Press F1 for Help, F4 for DCB Parameters etc.')\n       ;\nIF %SYSPFK=1 | %syspfk=13\n THEN DO;\n             PANEL\n /('           BUILD Input Data Set Information - HELP Information')\n//('       You Specified that Data Set ''%dsn'' is to used for INPUT.')\n /('          When you use an already existing Data Set as Input,')\n  ('         you do not need to specify Volume or Unit Information')\n  ('               unless the Data Set is not CATALOGED.')\n /(\n '    Also, existing Data Sets already have Record Format and similar')\n  ('       information coded in the Data Set Label (on disk or tape)')\n  ('    and therefore you do not need to code this information except')\n  ('              under very unusual conditions.')\n /('    Therefore, please enter only the minimum amount of information')\n  ('      needed for the Operating System to locate the Data Set when')\n  ('              your job is actually executed.')\n /('    Note: Pressing F4 will allow you to enter Record Format and')\n  ('         other information for an old, existing Data Set.')\n  ;\n REDO dsnin;\n end;\nchkdsin:\n       if %fileno\u00ac=''\n       then if type(fileno)\u00ac='NUM'\n       then do;\n            %error='File or Label Number must be Numeric';\n            redo dsnin;\n            panel reread from fileno\n                  'File or Label Number must be Numeric';\n            goto chkdsin;\n       end;\n       if %vol\u00ac='' & %volref\u00ac=''\n       then do;\n            %error='You cannot have a VOLREF and a VOLUME List';\n            redo dsnin;\n            panel reread from volref\n                  'You cannot have a VOLREF and a VOLUME List';\n            goto chkdsin;\n       end;\n    end;\n\n    if %dsn=''\n    then do;\n LABEL dsidin;\n             PANEL  ('                       %error')\n ('               BUILD Input Data Set Details')\n /(   '  Data Set Name for INPUT Dsid ''%dsid'' ')\n /('       Data Set Name  ==>',dsn,51,'%dsn')\n\n /(   '  Note:')\n  (  '        If the Data Set you specify is Cataloged, you are')\n  (  '        STRONGLY advised NOT to fill in the information below.')\n\n /(   '  Volume and Unit Information: ')\n  ('                   (Code VOLREF in QUOTES to indicate to a DSN)')\n /('       Volume           ==>',VOL,48,'%vol')\n  ('    or Volume Reference ==>',VOLREF,44,'%volref')\n  ('       Unit  ,number    ==>',UNIT,11,'%unit')\n /(   '  For Magnetic Tapes only:')\n /('       Label Number      ==>',FILENO,3,'%fileno')\n   /('            Press F1 for Help, F4 for DCB Parameters etc.')\n       ;\nIF %SYSPFK=1 | %syspfk=13\nTHEN DO;\n             PANEL\n /('            BUILD Input Data Set Information - HELP Information')\n//(\n'You Specified that Data Set Identifier ''%dsid'' is to used for INPUT.'\n)\n//(hi '  Data Set Identifiers (DSIDs).')\n /('       Data Set Identifiers or DSIDs are used to specify')\n  ('                Data Set information.')\n /(ctr\n /('      DSIDs are rather like Declaring or Defining Variables in')\n  ('        high level languages such as Cobol, PL/I, Pascal etc.')\n /('    Once a Data Set Variable has been declared, programs can READ')\n  ('         and WRITE information from or to the identifier.')\n /('       One of the big advantages of using DSIDs is that the')\n  ('       information need only be coded ONCE for the Data Set,')\n  ('         NO MATTER HOW MANY TIMES IT IS USED IN YOUR JOB.')\n  ;\n             PANEL\n /('         BUILD Input Data Set Information - HELP Information')\n//('         When you use an already existing Data Set as Input,')\n  ('        you do not need to specify Volume or Unit Information')\n  ('              unless the Data Set is not CATALOGED.')\n /(ctr\n('    Also, existing Data Sets already have Record Format and similar')\n('      information coded in the Data Set Label (on disk or tape)')\n('     and therefore you do not need to code this information except')\n('               under very unusual conditions.')\n/('    Therefore, please enter only the minimum amount of information')\n ('     needed for the Operating System to locate the Data Set when')\n ('              your job is actually executed.')\n/('    Note: Pressing F4 will alow you to enter Record Format and')\n ('        other information for an old, existing Data Set.')\n  ;\n REDO dsidin;\n end;\nchkdsdin:\n       if %dsn=''\n       then do;\n            %error='You must specify a Data Set Name';\n            redo dsidin;\n            panel reread from dsn\n                  'You must specify a Data Set Name';\n            goto chkdsdin;\n       end;\n       if %fileno\u00ac=''\n       then if type(fileno)\u00ac='NUM'\n       then do;\n            %error='File or Label Number must be Numeric';\n            redo dsidin;\n            panel reread from fileno\n                  'File or Label Number must be Numeric';\n            goto chkdsdin;\n       end;\n       if %vol\u00ac='' & %volref\u00ac=''\n       then do;\n            %error='You cannot have a VOLREF and a VOLUME List';\n            redo dsidin;\n            panel reread from volref\n                  'You cannot have a VOLREF and a VOLUME List';\n            goto chkdsdin;\n       end;\n    end;\n    if %syspfk=4\n    then do;\nlabel inrecfm;\n             PANEL\n  ('              BUILD Input Data Set - Optional Details')\n /('    Please fill in the following information for this Data Set.')\n /(hi '  Dcb Information:')\n  ('       Record Format      ===>',RECFM,4,'%recfm')\n  ('       Record Length      ===>',RECLEN,5,'%reclen')\n  ('       Block Length       ===>',BLKSIZE,5,'%blksize')\n /(hi '  Override of OLD Data Set Space Requirements')\n  ('       1st Extent         ===>',FIRST,5,'%FIRST')\n  ('       2nd Extent         ===>',SECOND,5,'%second')\n  ('       Directory Blocks   ===>',DIR,3,'%DIR')\n  ('       Trks, Cyls or Blks ===>',SPACE,1,'%SPACE')\n /(hi '  Extra Information')\n  ('       Retention (n Days) ===>',RETPD,10,'%retpd')\n  ('       Dsorg              ===>',DSORG,4,'%dsorg')\n  ('       Optcd              ===>',OPTCD,4,'%optcd')\n  ('       Protect (Y or N)   ===>',PROTECT,1,'%protect')\n         ///(ctr 'Press F1 for Help')\n       ;\n\n end;\n\nIF %SYSPFK=1 | %syspfk=13\nTHEN DO;\nPANEL\n /('           BUILD Input Data Set Information - HELP Information')\n  ('     Data Set ''%dsn'' is being used for Input.')\n  ('     This is an example of the Options available to you.')\n/*\n lm 8\n  ('LIKE AN EARLIER DATA SET NAME         ===> A.PREVIOUS.DATA.SET')\n*/\n /('Record Format         ===> FB,FBA, ETC. *************************')\n  ('Record Length         ===> 80 OR NODCB  * OPTIONAL IF THE DATA  *')\n  ('Block Length          ===> 800          * SET IS CATALOGUED     *')\n  ('1st Extent            ===> 10           * FILL IN THE INFORMAT- *')\n  ('2nd Extent            ===> 50           * ION IF THE DATA SET   *')\n  ('Tracks Cyls or Blocks ===> T            * IS NEW.               *')\n  ('Volume                ===> F8A114       *                       *')\n  ('Volume Reference                        *************************')\n  ('     Data Set Name    ===> A.PREVIOUS DATA SET NAME')\n  ('Unit                  ===> TAPE OR DISK')\n  ('Retention             ===> 3 DAYS ')\n  ('File Number           ===> 12 ')\n  ('Dsorg                 ===> DA | IS | PS |    *** SEE MANUAL')\n  ('Optcd                 ===> A | B | C | E | F *** SEE MANUAL')\n  ('Protect (Y or N)      ===> Y OR N ')\n/* lm 1 */\n /('          Press Enter to Display Previous Screen');\n\n REDO inrecfm;\n    END;\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLDDSOUT": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x16\\x00\\x88\\x16\\x0f\\x01\\x042\\x0f\\x074\\x00\\xc9\\x00\\xc5\\x00]\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1988-06-08T00:00:00", "modifydate": "2004-11-15T07:34:16", "lines": 201, "newlines": 197, "modlines": 93, "user": "IBMUSER"}, "text": "  BLDDSOUT:MACRO;\n\n    dcl %error init '';\n    if %unit='' then %unit='DISK';\n    if %first='' then %first='10';\n    if %second='' then %second='10';\n    if %space='' then %space='C';\n\n    if %dsn\u00ac=''\n    then do;\n LABEL dsnou;\n             PANEL  ('                       %error')\n ('               BUILD Output Data Set Details')\n/('   DSID ''%dsid'' Data Set Name ''%dsn'' is being used for Output')\n\n /(  '   Note:')\n  (  '           For OUTPUT Data Sets, the Operating System')\n  (  '           needs to know the information below.')\n\n /( '  Volume and Unit Information: ')\n  ('                   (Code VOLREF in QUOTES to indicate to a DSN)')\n /('       Volume           ==>',VOL,48,'%vol')\n  ('    or Volume Reference ==>',VOLREF,44,'%volref')\n  ('       Unit \u00dd,number    ==>',UNIT,11,'%unit')\n /('     For Magnetic Tapes only:' )\n /('       Label Number     ==>',FILENO,3,'%fileno')\n //\n  ('           Press F1 for Help, (DCB Parameters are on screen 2.)')\n       ;\nIF %SYSPFK=1 | %syspfk=13 THEN DO;\n             PANEL\n /('              BUILD Output Data Set Information - HELP Information')\n//('    You Specified that Data Set ''%dsn'' is to used for OUTPUT.')\n /('       When you wish to create a new Data Set, the Operating')\n  ('         System needs to know the if the Data Set is to be')\n  ('                placed on a Disk or Tape device.')\n /(\n   '    If you wish the Data Set to be placed on a specific Volume,')\n  ('      enter the Volume Name or a Volume Reference, otherwise')\n  ('         the Operating System will find a volume for you.')\n /('    Also, for Tape Data Set, you may wish to place the Data Set')\n  ('            on a Volume that already has data on it.')\n /('         If you do wish to add data to a Tape Volume, you')\n  ('       must indicate a LABEL number, or will will overwrite')\n  ('                 data already on the Tape.')\n  ;\n REDO dsnou;\n end;\nchkdsou:\n       if %fileno\u00ac=''\n       then if type(fileno)\u00ac='NUM'\n       then do;\n            %error='File or Label Number must be Numeric';\n            redo dsnou;\n            panel reread from fileno\n                  'File or Label Number must be Numeric';\n            goto chkdsou;\n       end;\n       if %vol\u00ac='' & %volref\u00ac=''\n       then do;\n            %error='You cannot have a VOLREF and a VOLUME List';\n            redo dsnou;\n            panel reread from volref\n                  'You cannot have a VOLREF and a VOLUME List';\n            goto chkdsou;\n       end;\n    end;\n\n    if %dsn=''\n    then do;\n         %dsn='&&%dsid';\n LABEL dsidout;\n             PANEL ('                       %error')\n  ('                 BUILD Output Data Set Details')\n /(    '        DSID ''%dsid'' is being used for Output.')\n/* /(hi '  Data Set Name for Dsid ''%dsid''' */\n /('       Data Set Name  ==>',dsn,51,'%dsn')\n\n /(   '  Note:')\n  (  '            For OUTPUT Data Sets, the Operating System')\n  (  '            needs to know the information below.')\n\n /(   '  Volume and Unit Information: ')\n  ('                   (Code VOLREF in QUOTES to indicate to a DSN)')\n /('       Volume           ==>',VOL,48,'%vol')\n  ('    or Volume Reference ==>',VOLREF,44,'%volref')\n  ('       Unit (,number)   ==>',UNIT,11,'%unit')\n /(   '  For Magnetic Tapes only:' )\n /('       Label Number     ==>',FILENO,3,'%fileno')\n  //('       Press F1 for Help, (DCB Parameters are on screen 2.)')\n       ;\nIF %SYSPFK=1 | %syspfk=13 THEN DO;\n             PANEL\n /('              BUILD Output Data Set Information - HELP Information')\n//(\n'     You Specified that Data Set Identifier ''%dsid''')\n('                     is to used for OUTPUT.'\n)\n//(   '  Data Set Identifiers (DSIDs).')\n /('        Data Set Identifiers or DSIDs are used to specify')\n  ('                 Data Set information.')\n /(\n   '      DSIDs are rather like Declaring or Defining Variables in')\n  ('        high level languages such as Cobol, PL/I, Pascal etc.')\n /('    Once a Data Set Variable has been declared, programs can READ')\n  ('          and WRITE information from or to the identifier.')\n /('       One of the big advantages of using DSIDs is that the')\n  ('       information need only be coded ONCE for the Data Set,')\n  ('         NO MATTER HOW MANY TIMES IT IS USED IN YOUR JOB.')\n  ;\n             PANEL\n /('           BUILD Output Data Set Information - HELP Information')\n//('       You Specified that Data Set ''%dsn'' is to used for OUTPUT.')\n /('         When you wish to create a new Data Set, the Operating')\n  ('           System needs to know the if the Data Set is to be')\n  ('                 placed on a Disk or Tape device.')\n /(\n   '       If you wish the Data Set to be placed on a specific Volume,')\n  ('          enter the Volume Name or a Volume Reference, otherwise')\n  ('             the Operating System will find a volume for you.')\n /('       Also, for Tape Data Set, you may wish to place the Data Set')\n  ('               on a Volume that already has data on it.')\n /('           If you do wish to add data to a Tape Volume, you')\n  ('          must indicate a LABEL number, or will will overwrite')\n  ('                   data already on the Tape.')\n  ;\n REDO dsidout;\n end;\nchkdsdou:\n       if %dsn=''\n       then do;\n            panel reread from dsn\n                  'You must specify a Data Set Name';\n            goto chkdsdou;\n       end;\n       if %fileno\u00ac=''\n       then if type(fileno)\u00ac='NUM'\n       then do;\n            panel reread from fileno\n                  'File or Label Number must be Numeric';\n            goto chkdsdou;\n       end;\n       if %vol\u00ac='' & %volref\u00ac=''\n       then do;\n            panel reread from volref\n                  'You cannot have a VOLREF and a VOLUME List';\n            goto chkdsdou;\n       end;\n    end;\nlabel ourecfm;\n             PANEL\n  ('              BUILD Output Data Set - Optional Details')\n /('    Please fill in the following information for this Data Set.')\n /(   '  Dcb Information:')\n  ('       Record Format      ===>',RECFM,4,'%recfm')\n  ('       Record Length      ===>',RECLEN,5,'%reclen')\n  ('       Block Length       ===>',BLKSIZE,5,'%blksize')\n /(   '  New Data Set Space Requirements:')\n  ('       1st Extent         ===>',FIRST,5,'%FIRST')\n  ('       2nd Extent         ===>',SECOND,5,'%second')\n  ('       Directory Blocks   ===>',DIR,3,'%DIR')\n  ('       Trks, Cyls or Blks ===>',SPACE,1,'%SPACE')\n /(   '  Extra Information:')\n  ('       Retention (n Days) ===>',RETPD,10,'%retpd')\n  ('       Dsorg              ===>',DSORG,4,'%dsorg')\n  ('       Optcd              ===>',OPTCD,4,'%optcd')\n  ('       Protect (Y or N)   ===>',PROTECT,1,'%protect')\n         ///('                   Press F1 for Help')\n       ;\n\n\nIF %SYSPFK=1 | %syspfk=13 THEN DO;\n             PANEL\n /('          BUILD Output Data Set Information - HELP Information')\n  ('        Data Set ''%dsn'' is being used for Output.')\n  ('       This is an example of the Options available to you.')\n/*\n lm 8\n  ('LIKE AN EARLIER DATA SET NAME         ===> A.PREVIOUS.DATA.SET')\n*/\n /('Record Format         ===> FB,FBA, ETC. *************************')\n  ('Record Length         ===> 80 OR NODCB  * OPTIONAL IF THE DATA  *')\n  ('Block Length          ===> 800          * SET IS CATALOGUED     *')\n  ('1st Extent            ===> 10           * FILL IN THE INFORMAT- *')\n  ('2nd Extent            ===> 50           * ION IF THE DATA SET   *')\n  ('Tracks Cyls or Blocks ===> T            * IS NEW.               *')\n  ('Volume                ===> F8A114       *                       *')\n  ('Volume Reference                        *************************')\n  ('     Data Set Name    ===> A.PREVIOUS DATA SET NAME')\n  ('Unit                  ===> TAPE OR DISK')\n  ('Retention             ===> 3 DAYS ')\n  ('File Number           ===> 12 ')\n  ('Dsorg                 ===> DA | IS | PS |    *** SEE MANUAL')\n  ('Optcd                 ===> A | B | C | E | F *** SEE MANUAL')\n  ('Protect (Y or N)      ===> Y OR N ')\n\n /('         Press Enter to Display Previous Screen');\n\n REDO ourecfm;\n    END;\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLDENDJ": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x88\\x16\\x0f\\x00\\x88$o\\x13Y\\x016\\x015\\x00\\x0b\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1988-06-08T00:00:00", "modifydate": "1988-09-02T13:59:00", "lines": 310, "newlines": 309, "modlines": 11, "user": "JOL"}, "text": "BLDENDJ: MACRO (        /* THIS MACRO CHECKS AND CHANGES */\n          %ENDJOB,      /* END OF JOB PROCESSING       */\n          %SAVEIN=,\n          %JOLDS=,\n          ) ;\n\n /* Build a panel allowing Users to PRINT, DEL etc the data sets.\n    Note: To save Symbolic Variables, we reuse the %f1 variables */\n\n  IF %ENDJOB='ENDJOB' THEN DO;\n\n       %f1='';\n       %f2='';\n       %f3='';\n       %f4='';\n       %f5='';\n       %f6='';\n       %f7='';\n       %f8='';\n       %f9='';\n       %f10='';\n       %f11='';\n       %f12='';\n       %f13='';\n       %f14='';\n       %f15='';\n\n  IF %DSET1  \u00ac=  ''\n     then %f1='(''%dset1'',F1,1,'' '',10,10,10,50)';\n\n  IF %DSET2  \u00ac=  ''\n     then %f2='(''%dset2'',F2,1,'' '',11,10,11,50)';\n\n  IF %DSET3  \u00ac=  ''\n     then %f3='(''%dset3'',F3,1,'' '',12,10,12,50)';\n\n  IF %DSET4  \u00ac=  ''\n     then %f4='(''%dset4'',F4,1,'' '',13,10,13,50)';\n\n  IF %DSET5  \u00ac=  ''\n     then %f5='(''%dset5'',F5,1,'' '',14,10,14,50)';\n\n  IF %DSET6  \u00ac=  ''\n     then %f6='(''%dset6'',F6,1,'' '',15,10,15,50)';\n\n  IF %DSET7  \u00ac=  ''\n     then %f7='(''%dset7'',F7,1,'' '',16,10,16,50)';\n\n  IF %DSET8  \u00ac=  ''\n     then %f8='(''%dset8'',F8,1,'' '',17,10,17,50)';\n\n  IF %DSET9  \u00ac=  ''\n     then %f9='(''%dset1'',F9,1,'' '',18,10,18,50)';\n\n  IF %DSET10 \u00ac=  ''\n     then %f10='(''%dset10'',F10,1,'' '',19,10,19,50)';\n\n\nIF %DSET1\u00ac='' THEN DO;\n   panel\n   ('              %TITLE')\n  /('             If MAXCC=0 do you want to:')\n   ('        Catalog/Delete Keep, Scratch OR Print')\n   ('              any of these Files ?')\n   ('    If so, place a \"C\" \"D\" or a \"P\" next to the file.')\n   %f1 %f2 %f3 %f4 %f5 %f6 %f7 %f8 %f9 %f10;\nprintsyms;\n   UJY04P '   If Maxcc = 0 Then Do;';\n        /* CHECK FOR A C */\n IF %f1='C' & %DSET1  \u00ac='' THEN UJY04P '           Catalog %DSET1;';\n IF %f2='C' & %DSET2  \u00ac='' THEN UJY04P '           Catalog %DSET2;';\n IF %f3='C' & %DSET3  \u00ac='' THEN UJY04P '           Catalog %DSET3;';\n IF %f4='C' & %DSET4  \u00ac='' THEN UJY04P '           Catalog %DSET4;';\n IF %f5='C' & %DSET5  \u00ac='' THEN UJY04P '           Catalog %DSET5;';\n IF %f6='C' & %DSET6  \u00ac='' THEN UJY04P '           Catalog %DSET6;';\n IF %f7='C' & %DSET7  \u00ac='' THEN UJY04P '           Catalog %DSET7;';\n IF %f8='C' & %DSET8  \u00ac='' THEN UJY04P '           Catalog %DSET8;';\n IF %f9='C' & %DSET8  \u00ac='' THEN UJY04P '           Catalog %DSET9;';\n IF %f10='C' & %DSET10 \u00ac='' THEN UJY04P '          Catalog %DSET10;';\n        /* CHECK FOR A D */\n IF %f1 ='D' & %DSET1 \u00ac='' THEN UJY04P '           Delete %DSET1;';\n IF %f2 ='D' & %DSET2 \u00ac='' THEN UJY04P '           Delete %DSET2;';\n IF %f3 ='D' & %DSET3 \u00ac='' THEN UJY04P '           Delete %DSET3;';\n IF %f4 ='D' & %DSET4 \u00ac='' THEN UJY04P '           Delete %DSET4;';\n IF %f5 ='D' & %DSET5 \u00ac='' THEN UJY04P '           Delete %DSET5;';\n IF %f6 ='D' & %DSET6 \u00ac='' THEN UJY04P '           Delete %DSET6;';\n IF %f7 ='D' & %DSET7 \u00ac='' THEN UJY04P '           Delete %DSET7;';\n IF %f8 ='D' & %DSET8 \u00ac='' THEN UJY04P '           Delete %DSET8;';\n IF %f9 ='D' & %DSET9 \u00ac='' THEN UJY04P '           Delete %DSET9;';\n IF %f10='D' & %DSET10 \u00ac='' THEN UJY04P '           Delete %DSET10;';\n        /* CHECK FOR A P */\n IF %f1 ='P' & %DSET1  \u00ac='' THEN UJY04P '           Print %DSET1;';\n IF %f2 ='P' & %DSET2  \u00ac='' THEN UJY04P '           Print %DSET2;';\n IF %f3 ='P' & %DSET3  \u00ac='' THEN UJY04P '           Print %DSET3;';\n IF %f4 ='P' & %DSET4  \u00ac='' THEN UJY04P '           Print %DSET4;';\n IF %f5 ='P' & %DSET5  \u00ac='' THEN UJY04P '           Print %DSET5;';\n IF %f6 ='P' & %DSET6  \u00ac='' THEN UJY04P '           Print %DSET6;';\n IF %f7 ='P' & %DSET7  \u00ac='' THEN UJY04P '           Print %DSET7;';\n IF %f8 ='P' & %DSET8  \u00ac='' THEN UJY04P '           Print %DSET8;';\n IF %f9 ='P' & %DSET9  \u00ac='' THEN UJY04P '           Print %DSET9;';\n IF %f10='P' & %DSET10 \u00ac='' THEN UJY04P '           Print %DSET10;';\n   END; /* IF %DSET1  = '' */\n\nIF %DSET11\u00ac='' THEN DO;\n\n       %f1='';\n       %f2='';\n       %f3='';\n       %f4='';\n       %f5='';\n       %f6='';\n       %f7='';\n       %f8='';\n       %f9='';\n       %f10='';\n       %f11='';\n       %f12='';\n       %f13='';\n       %f14='';\n       %f15='';\n\n  IF %DSET11 \u00ac=  ''\n     then %f1='(''%dset11'',F1,1,'' '',10,10,10,50)';\n\n  IF %DSET12 \u00ac=  ''\n     then %f2='(''%dset12'',F2,1,'' '',11,10,11,50)';\n\n  IF %DSET13 \u00ac=  ''\n     then %f3='(''%dset13'',F3,1,'' '',12,10,12,50)';\n\n  IF %DSET14 \u00ac=  ''\n     then %f4='(''%dset14'',F4,1,'' '',13,10,13,50)';\n\n  IF %DSET15 \u00ac=  ''\n     then %f5='(''%dset15'',F5,1,'' '',14,10,14,50)';\n\n  IF %DSET16 \u00ac=  ''\n     then %f6='(''%dset16'',F6,1,'' '',15,10,15,50)';\n\n  IF %DSET17 \u00ac=  ''\n     then %f7='(''%dset17'',F7,1,'' '',16,10,16,50)';\n\n  IF %DSET18 \u00ac=  ''\n     then %f8='(''%dset18'',F8,1,'' '',17,10,17,50)';\n\n  IF %DSET19 \u00ac=  ''\n     then %f9='(''%dset19'',F9,1,'' '',18,10,18,50)';\n\n  IF %DSET20 \u00ac=  ''\n     then %f10='(''%dset20'',F10,1,'' '',19,10,19,50)';\n\n   panel\n   ('              %TITLE')\n   /('    If MAXCC=0 do you want to:')\n   ( '          Catalog/Delete Keep, Scratch OR Print')\n   ( '          any of these Files ?')\n   ( '    If so, place a \"C\" \"D\" or a \"P\" next to the file.')\n   %f1 %f2 %f3 %f4 %f5 %f6 %f7 %f8 %f9 %f10;\n\n IF %f1='C' & %DSET11 \u00ac='' THEN UJY04P '           Catalog %DSET11;';\n IF %f2='C' & %DSET12 \u00ac='' THEN UJY04P '           Catalog %DSET12;';\n IF %f3='C' & %DSET13 \u00ac='' THEN UJY04P '           Catalog %DSET13;';\n IF %f4='C' & %DSET14 \u00ac='' THEN UJY04P '           Catalog %DSET14;';\n IF %f5='C' & %DSET15 \u00ac='' THEN UJY04P '           Catalog %DSET15;';\n IF %f6='C' & %DSET16 \u00ac='' THEN UJY04P '           Catalog %DSET16;';\n IF %f7='C' & %DSET17 \u00ac='' THEN UJY04P '           Catalog %DSET17;';\n IF %f8='C' & %DSET18 \u00ac='' THEN UJY04P '           Catalog %DSET18;';\n IF %f9='C' & %DSET19 \u00ac='' THEN UJY04P '           Catalog %DSET19;';\n IF %f10='C' & %DSET20 \u00ac='' THEN UJY04P '          Catalog %DSET20;';\n        /* CHECK FOR A D */\n IF %f1 ='D' & %DSET11 \u00ac='' THEN UJY04P '           Delete %DSET11;';\n IF %f2 ='D' & %DSET12 \u00ac='' THEN UJY04P '           Delete %DSET12;';\n IF %f3 ='D' & %DSET13 \u00ac='' THEN UJY04P '           Delete %DSET13;';\n IF %f4 ='D' & %DSET14 \u00ac='' THEN UJY04P '           Delete %DSET14;';\n IF %f5 ='D' & %DSET15 \u00ac='' THEN UJY04P '           Delete %DSET15;';\n IF %f6 ='D' & %DSET16 \u00ac='' THEN UJY04P '           Delete %DSET16;';\n IF %f7 ='D' & %DSET17 \u00ac='' THEN UJY04P '           Delete %DSET17;';\n IF %f8 ='D' & %DSET18 \u00ac='' THEN UJY04P '           Delete %DSET18;';\n IF %f9 ='D' & %DSET19 \u00ac='' THEN UJY04P '           Delete %DSET19;';\n IF %f10='D' & %DSET20 \u00ac='' THEN UJY04P '           Delete %DSET20;';\n        /* CHECK FOR A P */\n IF %f1 ='P' & %DSET11 \u00ac='' THEN UJY04P '           Print %DSET11;';\n IF %f2 ='P' & %DSET12 \u00ac='' THEN UJY04P '           Print %DSET12;';\n IF %f3 ='P' & %DSET13 \u00ac='' THEN UJY04P '           Print %DSET13;';\n IF %f4 ='P' & %DSET14 \u00ac='' THEN UJY04P '           Print %DSET14;';\n IF %f5 ='P' & %DSET15 \u00ac='' THEN UJY04P '           Print %DSET15;';\n IF %f6 ='P' & %DSET16 \u00ac='' THEN UJY04P '           Print %DSET16;';\n IF %f7 ='P' & %DSET17 \u00ac='' THEN UJY04P '           Print %DSET17;';\n IF %f8 ='P' & %DSET18 \u00ac='' THEN UJY04P '           Print %DSET18;';\n IF %f9 ='P' & %DSET19 \u00ac='' THEN UJY04P '           Print %DSET19;';\n IF %f10='P' & %DSET20 \u00ac='' THEN UJY04P '           Print %DSET20;';\n   END; /* IF %DSET11\u00ac= '' */\nIF %DSET21\u00ac='' THEN DO;\n\n       %f1='';\n       %f2='';\n       %f3='';\n       %f4='';\n       %f5='';\n       %f6='';\n       %f7='';\n       %f8='';\n       %f9='';\n       %f10='';\n       %f11='';\n       %f12='';\n       %f13='';\n       %f14='';\n       %f15='';\n\n\n  IF %DSET21 \u00ac=  ''\n     then %f1='(''%dset21'',F1,1,'' '',10,10,10,50)';\n\n  IF %DSET22 \u00ac=  ''\n     then %f2='(''%dset22'',F2,1,'' '',11,10,11,50)';\n\n  IF %DSET23 \u00ac=  ''\n     then %f3='(''%dset23'',F3,1,'' '',12,10,12,50)';\n\n  IF %DSET24 \u00ac=  ''\n     then %f4='(''%dset24'',F4,1,'' '',13,10,13,50)';\n\n  IF %DSET25 \u00ac=  ''\n     then %f5='(''%dset25'',F5,1,'' '',14,10,14,50)';\n\n  IF %DSET26 \u00ac=  ''\n     then %f6='(''%dset26'',F6,1,'' '',15,10,15,50)';\n\n  IF %DSET27 \u00ac=  ''\n     then %f7='(''%dset27'',F7,1,'' '',16,10,16,50)';\n\n  IF %DSET28 \u00ac=  ''\n     then %f8='(''%dset28'',F8,1,'' '',17,10,17,50)';\n\n  IF %DSET29 \u00ac=  ''\n     then %f9='(''%dset29'',F9,1,'' '',18,10,18,50)';\n\n  IF %DSET30 \u00ac=  ''\n     then %f10='(''%dset30'',F10,1,'' '',19,10,19,50)';\n\n\n   panel\n   ('              %TITLE')\n   /('    If MAXCC=0 do you want to:')\n   ( '          Catalog/Delete Keep, Scratch OR Print')\n   ( '          any of these Files ?')\n   ( '    If so, place a \"C\" \"D\" or a \"P\" next to the file.')\n   %f1 %f2 %f3 %f4 %f5 %f6 %f7 %f8 %f9 %f10;\n   %f1 %f2 %f3 %f4 %f5 %f6 %f7 %f8 %f9 %f10;\n\n IF %f1='C' & %DSET21 \u00ac='' THEN UJY04P '           Catalog %DSET21;';\n IF %f2='C' & %DSET22 \u00ac='' THEN UJY04P '           Catalog %DSET22;';\n IF %f3='C' & %DSET23 \u00ac='' THEN UJY04P '           Catalog %DSET23;';\n IF %f4='C' & %DSET24 \u00ac='' THEN UJY04P '           Catalog %DSET24;';\n IF %f5='C' & %DSET25 \u00ac='' THEN UJY04P '           Catalog %DSET25;';\n IF %f6='C' & %DSET26 \u00ac='' THEN UJY04P '           Catalog %DSET26;';\n IF %f7='C' & %DSET27 \u00ac='' THEN UJY04P '           Catalog %DSET27;';\n IF %f8='C' & %DSET28 \u00ac='' THEN UJY04P '           Catalog %DSET28;';\n IF %f9='C' & %DSET29 \u00ac='' THEN UJY04P '           Catalog %DSET29;';\n IF %f10='C' & %DSET30 \u00ac='' THEN UJY04P '          Catalog %DSET30;';\n        /* CHECK FOR A D */\n IF %f1 ='D' & %DSET21 \u00ac='' THEN UJY04P '           Delete %DSET21;';\n IF %f2 ='D' & %DSET22 \u00ac='' THEN UJY04P '           Delete %DSET22;';\n IF %f3 ='D' & %DSET23 \u00ac='' THEN UJY04P '           Delete %DSET23;';\n IF %f4 ='D' & %DSET24 \u00ac='' THEN UJY04P '           Delete %DSET24;';\n IF %f5 ='D' & %DSET25 \u00ac='' THEN UJY04P '           Delete %DSET25;';\n IF %f6 ='D' & %DSET26 \u00ac='' THEN UJY04P '           Delete %DSET26;';\n IF %f7 ='D' & %DSET27 \u00ac='' THEN UJY04P '           Delete %DSET27;';\n IF %f8 ='D' & %DSET28 \u00ac='' THEN UJY04P '           Delete %DSET28;';\n IF %f9 ='D' & %DSET29 \u00ac='' THEN UJY04P '           Delete %DSET29;';\n IF %f10='D' & %DSET30 \u00ac='' THEN UJY04P '           Delete %DSET30;';\n        /* CHECK FOR A P */\n IF %f1 ='P' & %DSET21 \u00ac='' THEN UJY04P '           Print %DSET21;';\n IF %f2 ='P' & %DSET22 \u00ac='' THEN UJY04P '           Print %DSET22;';\n IF %f3 ='P' & %DSET23 \u00ac='' THEN UJY04P '           Print %DSET23;';\n IF %f4 ='P' & %DSET24 \u00ac='' THEN UJY04P '           Print %DSET24;';\n IF %f5 ='P' & %DSET25 \u00ac='' THEN UJY04P '           Print %DSET25;';\n IF %f6 ='P' & %DSET26 \u00ac='' THEN UJY04P '           Print %DSET26;';\n IF %f7 ='P' & %DSET27 \u00ac='' THEN UJY04P '           Print %DSET27;';\n IF %f8 ='P' & %DSET28 \u00ac='' THEN UJY04P '           Print %DSET28;';\n IF %f9 ='P' & %DSET29 \u00ac='' THEN UJY04P '           Print %DSET29;';\n IF %f10='P' & %DSET30 \u00ac='' THEN UJY04P '           Print %DSET30;';\n   END; /* IF %DSET21 = '' */\n\n   UJY04P '   End;';\n   END;\n\n   PANEL ('          YOU HAVE NOW FINISHED THE BUILDJOB MACRO')\n        /('          THE JOL GENERATED FORM THIS MACRO WILL BE')\n         ('          SAVED IN %JOLDS MEMBER %SAVEIN.')\n       //('          PRESS THE ENTER KEY TO SAVE THE JOL CREATED')\n         ('          OR SYSPFK 3 (OR 15) TO CANCEL THE SAVE')\n       //('     WHEN ASKED \"DO YOU WANT TO SUBMIT THE JOB ?\" ')\n         ('     TYPE IN ',A,2,'NO')\n         ('     BECAUSE JOL HAS DYNAMICALLY SAVED YOUR %SAVEIN MEMBER')\n         ('     TO YOUR %JOLDS LIBRARY');\n\n    IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n    ELSE DO;\n  IF %SAVEIN \u00ac='' & %JOLDS \u00ac='' THEN DO;\n            UJY06E   '%JOLDS' %SAVEIN;\n            /* WRITE '%JOLDS %SAVEIN'; */\n         END;\n         ELSE DO; WRITE 'ENDJOB GENERATED BECAUSE SAVE';\n                  WRITE 'DATA SET NAME NULL ';\n         END;\n    END;\nEXIT;\nEND; /* END OF MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BLDGETPM": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x88\\x16\\x0f\\x00\\x88$_\\x17I\\x00\\xa0\\x00\\x91\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1988-06-08T00:00:00", "modifydate": "1988-09-01T17:49:00", "lines": 160, "newlines": 145, "modlines": 0, "user": "JOL"}, "text": "BLDGETPM: Macro;\n               /* Find out what programs have to run.\n                  A string called RUNPROGS is set up with\n                  the programs that have to run.  Each entry\n                  is 9 characters long (a blank is at the end).*/\n  dcl %RUNPROGS   init('') EXT;\n  dcl %pg1,%pg2,%pg3,%pg4,%pg5,%pg6,%pg7,%pg8,%pg9,%pg10 init('');\n  dcl %pg11,%pg12,%pg13,%pg14,%pg15,%pg16,%pg17,%pg18    init('');\n  dcl %pg19,%pg20,%pg21                                  init('');\n\npan1:\n  PANEL ('              %TITLE')\n    /\n ('       Enter the names of the Programs you want to run, in order.')\n  /(\n  '   All Programs MUST BE REGISTERED Except for COPY, SORT and PRINT.')\n/('   You can have up to 50 different Data Set Names, 20 Programs,')\n ('              and 10 Printer Definitions.')\n/('                                             PROGRAM  NAMES')\n/('  *************************************  PROGRAM 1 ',pg1,8,'%pg1')\n ('  * YOU MUST HAVE THE PROGRAM         *  PROGRAM 2 ',pg2,8,'%pg2')\n ('  * REGISTERED OR USE                 *  PROGRAM 3 ',pg3,8,'%pg3')\n ('  * COPY, SORT, PRINT OR COMPRESS     *  PROGRAM 4 ',pg4,8,'%pg4')\n ('  *                                   *  PROGRAM 5 ',pg5,8,'%pg5')\n ('  *                                   *  PROGRAM 6 ',pg6,8,'%pg6')\n ('  *                                   *  PROGRAM 7 ',pg7,8,'%pg7')\n ('  *                                   *  PROGRAM 8 ',pg8,8,'%pg8')\n ('  *                                   *  PROGRAM 9 ',pg9,8,'%pg9')\n ('  *                                   *  PROGRAM 10',pg10,8,'%pg10')\n ('  *************************************  PROGRAM 11',pg11,8,'%pg11')\n/('          Press F4 to View Program Names from your INClude List')\n   ;\n IF %SYSPFK = 4\n then do;\n      showdsn '*.pgm';\n      redo pan1;\n end;\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n  /*  IF %PROG1  \u00ac= '' THEN %STEP1  = 'STEP010';\n      IF %PROG2  \u00ac= '' THEN %STEP2  = 'STEP020';\n      IF %PROG3  \u00ac= '' THEN %STEP3  = 'STEP030';\n      IF %PROG4  \u00ac= '' THEN %STEP4  = 'STEP040';\n      IF %PROG5  \u00ac= '' THEN %STEP5  = 'STEP050';\n      IF %PROG6  \u00ac= '' THEN %STEP6  = 'STEP060';\n      IF %PROG7  \u00ac= '' THEN %STEP7  = 'STEP070';\n      IF %PROG8  \u00ac= '' THEN %STEP8  = 'STEP080';\n      IF %PROG9  \u00ac= '' THEN %STEP9  = 'STEP090';\n      IF %PROG10 \u00ac= '' THEN %STEP10 = 'STEP100';\n      IF %PROG11 \u00ac= '' THEN %STEP11 = 'STEP110'; */\n\n  /* NOW MAKE ALL THE PROGAM NAMES 9 CHARACTERS LONG */\n  %runprogs='%pg1         ';   %runprogs=SUBSTR(runprogs,1,9);\n  %pg2 ='%pg2        ';   %pg2=SUBSTR(pg2,1,9);\n  %runprogs='%runprogs%pg2';\n  %pg3 ='%pg3        ';   %pg3=SUBSTR(pg3,1,9);\n  %runprogs='%runprogs%pg3';\n  %pg4 ='%pg4        ';   %pg4=SUBSTR(pg4,1,9);\n  %runprogs='%runprogs%pg4';\n  %pg5 ='%pg5        ';   %pg5=SUBSTR(pg5,1,9);\n  %runprogs='%runprogs%pg5';\n  %pg6 ='%pg6        ';   %pg6=SUBSTR(pg6,1,9);\n  %runprogs='%runprogs%pg6';\n  %pg7 ='%pg7        ';   %pg7=SUBSTR(pg7,1,9);\n  %runprogs='%runprogs%pg7';\n  %pg8 ='%pg8        ';   %pg8=SUBSTR(pg8,1,9);\n  %runprogs='%runprogs%pg8';\n  %pg9 ='%pg9        ';   %pg9=SUBSTR(pg9,1,9);\n  %runprogs='%runprogs%pg9';\n  %pg10='%pg10        ';  %pg10=SUBSTR(pg10,1,9);\n  %runprogs='%runprogs%pg10';\n  %pg11='%pg11        ';  %pg11=SUBSTR(pg11,1,9);\n  %runprogs='%runprogs%pg11';\n  /* PANEL ('%TITLE')\n   //\n      ('ENTER THE STEPNAMES AGAINST THE PROGRAMS (IF YOU WISH)')\n      //\n      ('PROGRAM           STEPNAME (OPTIONAL)')\n      ('PROGRAM 1     %PROG1  ',STEP1,8,'%STEP1')\n      ('PROGRAM 2     %PROG2  ',STEP2,8,'%STEP2')\n      ('PROGRAM 3     %PROG3  ',STEP3,8,'%STEP3')\n      ('PROGRAM 4     %PROG4  ',STEP4,8,'%STEP4')\n      ('PROGRAM 5     %PROG5  ',STEP5,8,'%STEP5')\n      ('PROGRAM 6     %PROG6  ',STEP6,8,'%STEP6')\n      ('PROGRAM 7     %PROG7  ',STEP7,8,'%STEP7')\n      ('PROGRAM 8     %PROG8  ',STEP8,8,'%STEP8')\n      ('PROGRAM 9     %PROG9  ',STEP9,8,'%STEP9')\n      ('PROGRAM 10    %PROG10 ',STEP10,8,'%STEP10')\n      ('PROGRAM 11    %PROG11 ',STEP11,8,'%STEP11')\n      ;*/\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n  IF %pg11\u00ac='' THEN\n  DO;\npan2:\n  PANEL ('                  %TITLE')\n   //\n      ('    Enter the names of the Programs you want to run, in order.')\n      //\n  ('                          PROGRAM  NAMES')\n /('           PROGRAM 12 ',pg12,8,'%pg12')\n  ('           PROGRAM 13 ',pg13,8,'%pg13')\n  ('           PROGRAM 14 ',pg14,8,'%pg14')\n  ('           PROGRAM 15 ',pg15,8,'%pg15')\n  ('           PROGRAM 16 ',pg16,8,'%pg16')\n  ('           PROGRAM 17 ',pg17,8,'%pg17')\n  ('           PROGRAM 18 ',pg18,8,'%pg18')\n  ('           PROGRAM 19 ',pg19,8,'%pg19')\n  ('           PROGRAM 20 ',pg20,8,'%pg20')\n  ('           PROGRAM 21 ',pg21,8,'%pg21')\n /////('       Press F4 to View Program Names from your INClude List')\n   ;\n IF %SYSPFK = 4\n then do;\n      showdsn '*.pgm';\n      redo pan2;\n end;\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n  /* NOW MAKE ALL THE PROGAM NAMES 9 CHARACTERS LONG */\n  %pg12='%pg12            '; %pg12=SUBSTR(pg12,1,9);\n  %runprogs='%runprogs%pg12';\n  %pg13='%pg13            '; %pg13=SUBSTR(pg13,1,9);\n  %runprogs='%runprogs%pg13';\n  %pg14='%pg14            '; %pg13=SUBSTR(pg14,1,9);\n  %runprogs='%runprogs%pg14';\n  %pg15='%pg15            '; %pg13=SUBSTR(pg15,1,9);\n  %runprogs='%runprogs%pg15';\n  %pg16='%pg16            '; %pg13=SUBSTR(pg16,1,9);\n  %runprogs='%runprogs%pg16';\n  %pg17='%pg17            '; %pg13=SUBSTR(pg17,1,9);\n  %runprogs='%runprogs%pg17';\n  %pg18='%pg18            '; %pg13=SUBSTR(pg18,1,9);\n  %runprogs='%runprogs%pg18';\n  %pg19='%pg19            '; %pg13=SUBSTR(pg19,1,9);\n  %runprogs='%runprogs%pg19';\n  %pg20='%pg20            '; %pg13=SUBSTR(pg20,1,9);\n  %runprogs='%runprogs%pg20';\n  %pg21='%pg21            '; %pg13=SUBSTR(pg21,1,9);\n  %runprogs='%runprogs%pg21';\n\n /*\n  PANEL ('%TITLE')\n   //\n      ('ENTER THE STEPNAMES AGAINST THE PROGRAMS (IF YOU WISH)')\n      //\n      ('PROGRAM           STEPNAME (OPTIONAL)')\n      ('PROGRAM 11     %PROG11  ',STEP11,8,'')\n      ('PROGRAM 12     %PROG12  ',STEP12,8,'')\n      ('PROGRAM 13     %PROG13  ',STEP13,8,'')\n      ('PROGRAM 14     %PROG14  ',STEP14,8,'')\n      ('PROGRAM 15     %PROG15  ',STEP15,8,'')\n      ('PROGRAM 16     %PROG16  ',STEP16,8,'')\n      ('PROGRAM 17     %PROG17  ',STEP17,8,'')\n      ('PROGRAM 18     %PROG18  ',STEP18,8,'')\n      ('PROGRAM 19     %PROG19  ',STEP19,8,'')\n      ('PROGRAM 20     %PROG20  ',STEP20,8,'')\n      ('PROGRAM 21     %PROG21  ',STEP21,8,'')\n      ;\n   */\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n END;\n end;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLDINIT": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88#\\x0f\\x00\\x88#\\x0f\\x17\\x04\\x00 \\x00 \\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-08-17T00:00:00", "modifydate": "1988-08-17T17:04:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "JOL"}, "text": "BLDINIT: MACRO (         /* THIS MACRO                   */\n          %INIT,        /* INITIALIZES VARIABLES        */\n          ) ;\nIF %INIT='INIT' THEN DO;\n      DCL %QUOTE INIT '''' EXT;\n      DCL %EXEC  INIT ''   EXT;\n      DCL %DSIDRET INIT '' EXT;\n      DCL %DSIDLIKE INIT ''   EXT;\n      DCL %CNT   INIT 0    EXT;\n      DCL %DSET1,  %DSET2,  %DSET3,  %DSET4,  %DSET5,  %DSET6,\n          %DSET7,  %DSET8,  %DSET9,  %DSET10, %DSET11, %DSET12,\n          %DSET13, %DSET14, %DSET15, %DSET16, %DSET17, %DSET18,\n          %DSET19, %DSET20, %DSET21, %DSET22, %DSET23, %DSET24,\n          %DSET25, %DSET26, %DSET27, %DSET28, %DSET29, %DSET30,\n          %DSET31, %DSET32, %DSET33, %DSET34, %DSET35, %DSET36,\n          %DSET37, %DSET38, %DSET39, %DSET40, %DSET41, %DSET42,\n          %DSET43, %DSET44, %DSET45, %DSET46, %DSET47, %DSET48,\n          %DSET49  INIT '' EXT;\n      DCL %PRNT1,  %PRNT2,  %PRNT3,  %PRNT4,  %PRNT5,  %PRNT6,\n          %PRNT7,  %PRNT8,  %PRNT9,  %PRNT10     INIT '' EXT;\n\n  /*  DCL %STEP1,  %STEP2,  %STEP3,  %STEP4,  %STEP5,  %STEP6 ,\n          %STEP7,  %STEP8,  %STEP9,  %STEP10, %STEP11, %STEP12,\n          %STEP13, %STEP14, %STEP15, %STEP16, %STEP17, %STEP18,\n          %STEP19, %STEP20, %STEP21, %STEP22, %STEP23, %STEP24,\n          %STEP25, %STEP26, %STEP27, %STEP28, %STEP29, %STEP30,\n          %STEP31, %STEP32, %STEP33, %STEP34, %STEP35, %STEP36,\n          %STEP37, %STEP38, %STEP39, %STEP40, %STEP41, %STEP42,\n          %STEP43, %STEP44, %STEP45, %STEP46, %STEP47, %STEP48,\n          %STEP49     INIT '' EXT; */\n  END;/* END OF INITIALIZATION */\nEND; /* END OF BLDINIT MACRO */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLDJCL": {"ttr": 2828, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88\\x00\\x7f\\x00\\x88\\x00\\x7f\\x12Y\\x00L\\x00L\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-01-07T00:00:00", "modifydate": "1988-01-07T12:59:00", "lines": 76, "newlines": 76, "modlines": 0, "user": "JOL"}, "text": " BLDDS:MACRO ;\n   DCL %DSN,%RFORM,%SPACE,%VOL,%VOLREF,%RETPD,%UNIT   INIT '';\n   DCL %LIKE,%FILENO,%DSORG,%OPTCD,%FIRST,%SECOND   INIT '';\n   DCL %PROTECT INIT 'N';\n   DCL %LRECL,%BLKSIZE,%RECLEN,%RECFM,%DIR,%DUM    INIT '';\n   DCL %ERROR,%COM1,%COM2,%COM3  INIT '';\n   DCL %COUNT INIT '1';\nLABEL OUT;\nPANEL ('%TITLE ')\n  (' - BUILD DATA SET INFORMATION - PRESS PFK 1 FOR HELP')\n  ('PLEASE FILL IN THE FOLLOWING INFORMATION FOR THIS  DATA SET')\n  ('DATASET NAME          ===>',DSNAME,44,'%DSN')\n  ('RECORD FORMAT         ===>',RFORM,3,'%RECFM')\n  ('RECORD LENGTH         ===>',RECLEN,5,'%LRECL')\n  ('BLOCK LENGTH          ===>',BLKSIZE,5,'%BLKSIZE')\n  ('1ST EXTENT            ===>',FIRST,5,'%FIRST')\n  ('2ND EXTENT            ===>',SECOND,5,'%SECOND')\n  ('DIRECTORY SPACE       ===>',DIR,5,'%DIR')\n  ('TRACKS CYLS OR BLOCKS ===>',SPACE,6,'%SPACE')\n  ('VOLUME                ===>',VOL,10,'%VOL')\n  ('VOLUME REFERENCE')\n  ('     DATA SET NAME    ===>',VOLREF,44,'%VOLREF')\n  ('UNIT                  ===>',UNIT,8,'%UNIT')\n  ('RETENTION             ===>',RETPD,10,'%RETPD')\n  ('LABEL NUMBER          ===>',FILENO,3,'%FILENO')\n  ('DSORG                 ===>',DSORG,4,'%DSORG')\n  ('OPTCD                 ===>',OPTCD,4,'%OPTCD')\n  ('PROTECT (Y OR N)      ===>',PROTECT,1,'%PROTECT')\n  ('           %ERROR') ;\n\nIF %SYSPFK=3 | %SYSPFK=15 THEN EXIT;\nIF %SYSPFK=1 THEN DO;\nPANEL ('%TITLE ')\n /(' - BUILD DATA SET INFORMATION - ',H,13,'HELP SCREEN')\n  ('DATA SET *** %LIST(1) *** IS BEING USED FOR %DISP  ')\n  ('THIS IS AN EXAMPLE OF THE OPTIONS AVAILABLE TO YOU.')\n  ('LIKE AN EARLIER DATA SET NAME         ===> A.PREVIOUS.DATA.SET')\n  ('RECORD FORMAT         ===> FB,FBA, ETC. *************************')\n  ('RECORD LENGTH         ===> 80 OR NODCB  * OPTIONAL IF THE DATA  *')\n  ('BLOCK LENGTH          ===> 800          * SET IS CATALOGUED     *')\n  ('1ST EXTENT            ===> 10           * FILL IN THE INFORMAT- *')\n  ('2ND EXTENT            ===> 50           * ION IF THE DATA SET   *')\n  ('TRACKS CYLS OR BLOCKS ===> TRACKS       * IS NEW.               *')\n  ('VOLUME                ===> F8A114       *                       *')\n  ('VOLUME REFERENCE                        *************************')\n  ('     DATA SET NAME    ===> A.PREVIOUS DATA SET NAME')\n  ('UNIT                  ===> TAPE OR DISK')\n  ('RETENTION             ===> 3 DAYS ')\n  ('FILE NUMBER           ===> 12 ')\n  ('DSORG                 ===> DA | IS | PS |    *** SEE MANUAL')\n  ('OPTCD                 ===> A | B | C | E | F *** SEE MANUAL')\n  ('PROTECT (Y OR N)      ===> Y OR N ')\n /(' PRESS ENTER TO DISPLAY PREVIOUS SCREEN');\n\n REDO OUT;\n END;\nIF %SYSPFK=3 | %SYSPFK=15 THEN EXIT;\n%ERROR = '';\n/* */\n/* */\n%DSNAME='DSN=%DSNAME';\nIF %LRECL\u00ac='' THEN DO;\n   %DCB=',DCB=(RECFM=%RECFM,LRECL=%LRECL,BLKSIZE=%BLKSIZE)';\n   IF %FIRST\u00ac='' THEN DO;\n      %COM1=',';\n      %SPACE='SPACE=(%SPACE,(%FIRST,%SECOND,%DIR),RELEASE)';\n      IF %UNIT\u00ac='' THEN %UNIT=',UNIT=%UNIT';\n      %DISP=',DISP=%DISP';\n   END;\nEND;\nWRITE F($DSIDS) FROM(\n'//%DSID  DD %DSNAME%DCB%COM1');\nWRITE F($DSIDS) FROM(\n'   %SPACE%UNIT%DISP');\nWRITE 'AT BUILDDS';\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLDJOBC": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x88\\x16\\x0f\\x00\\x88$/\\x16T\\x00F\\x00F\\x00\\r\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1988-06-08T00:00:00", "modifydate": "1988-08-29T16:54:00", "lines": 70, "newlines": 70, "modlines": 13, "user": "JOL"}, "text": "BLDJOBC:MACRO;\n /* THIS MACRO BUILDS A JOBCARD FOR THE USER. THE USER HAS A CHOICE\n    OF CREATING A JOBCARD OR USING THE $JOB MACRO  */\n\n\n   UJY02P '/*  This Job was Built Using Jol BUILDJOB Command on';\n   UJY02P '    %DAY, %MONTH %DAYNO,%YEAR  */ ';\n\n\n    %JOBNAME = %SYSUID;\n    IF %LIST(1) \u00ac= '' THEN %JOBNAME = '%JOBNAME%LIST(1)';\n    ELSE %JOBNAME = '%JOBNAME'||'X';\n    %ACCT='NOACCOUNT';\n    IF %SYSUID='OPSG10' THEN %ACCT='T94991I0133,0G10';\n    IF %SYSUID='OPSG13' THEN %ACCT='T94991I0133,0G13';\n    panel\n  / ('              %title')\n  / ('       This panel MAY produce a job card')\n\n  /('       You can choose now to use these Job details each time')\n   ('       you run your Jol program. You may fill in the details now')\n   ('       so they will used each time you use your program, or you')\n   ('       may choose to provide the details when you run the program')\n   /*  'Select \"Y\" to use THIS Jobcard or \"N\" to use the values you')\n       (ctr'fill in now.')                            */\n     / ('  Do you want to use these details each time? ==>',ANS,1,'Y')\n     / ('          Jobname        ===>',JOLNAME,8,'%JOBNAME')\n       ('          Account Code   ===>',ACCNT,30,'%ACCT')\n       ('          Programmer     ===>',PGNAME,10,'%SYSUID')\n       ('          Job Class      ===>',CLASS,1,'A')\n       ('          Msgclass       ===>',MSGCLASS,1,'X')\n       ('          User           ===>',USER,8,''/*'%SYSUID'*/)\n       ('          Password       ===>',PASS,8,'')\n       ('          Msglevel       ===>',MSGLV,3,'1,1')\n       ('          Priority       ===>',PRTY,2,'03')\n       ('          Notify User    ===>',NOTY,8,'%SYSUID');\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n if %ans = 'N' then /* THEY SELECTED TO USE THE $JOB MACRO */\n   do;\n     UJY02P ' $JOB ; ';\n     exit;\n   end;\n      DCL %JOBC INIT '';\n      DCL %JOBC2 INIT '';\n      DCL %JOBEXTRA INIT '';\n      IF  %PGNAME    \u00ac= '' THEN %JOBC = 'USER %PGNAME';\n  /* FIX IF  %PGNAME     = '' THEN %JOBC = 'USER ''%PGNAME'''; */\n      IF  %ACCNT     \u00ac= '' THEN %JOBC = '%JOBC ACCT %ACCNT';\n      IF  %CLASS     \u00ac= '' THEN %JOBC2 = '%JOBC2 CLASS %CLASS';\n      IF  %MSGCLASS  \u00ac= '' THEN %JOBC2 = '%JOBC2 MSGCLASS %MSGCLASS';\n      IF  %PASS      \u00ac= '' THEN %JOBEXTRA = 'PASSWORD=%PASS';\n      IF  %USER      \u00ac= '' THEN %JOBEXTRA = '%JOBEXTRA,USER=%USER';\n      IF  %PRTY      \u00ac= '' THEN %JOBC2 = '%JOBC2 PRTY %PRTY';\n      IF  %NOTY      \u00ac= '' THEN %JOBC2 = '%JOBC2 NOTIFY %NOTY';\n      %a=substr(msglv,1,1);\n      %b=substr(msglv,3,1);\n/*    EDIT MSGLV A,B A(1),X(1),A(1); */\n      IF  %A = '1' THEN %JOBC2 = '%JOBC2 PJCL';\n      ELSE %JOBC2 = '%JOBC2 NPJCL';\n      IF  %B = '1' THEN %JOBC2 = '%JOBC2 PALLOC';\n      ELSE %JOBC2 = '%JOBC2 NPALLOC';\n      UJY02P '%JOLNAME:JOB ';\n   IF %JOBC     \u00ac= '' THEN UJY02P '        %JOBC';\n   IF %JOBC2    \u00ac= '' THEN UJY02P '       %JOBC2';\n   /* FIX DOUBLE QUOTES  */\n   IF %JOBEXTRA \u00ac= '' THEN UJY02P ' JOBEXTRA=''%JOBEXTRA'';';\n   /* */\n   IF %JOBEXTRA \u00ac= '' THEN UJY02P ' JOBEXTRA=%JOBEXTRA ;';\n   ELSE UJY02P '                  ; ';\n END; /* OF MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BLDPANEL": {"ttr": 3075, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "BLDPANEL: MACRO;\n/*******************************************************************/\n/**  THIS MACRO MAY BE USED TO BUILD PANEL COMMANDS.              **/\n/**   THE RESULTANT DATASET MAY BE INCLUDED INTO A JOL PROCEDURE, **/\n/**   A JOL PROCEDURE INCLUDED AFTER IT,                          **/\n/**   OR A PROCEDURE WRITTEN AROUND IT                            **/\n/*******************************************************************/\n/**   DECLARE INITIAL BLANK PANEL                                 **/\n/*******************************************************************/\nDCL %A INIT\n'                                                 ';\nDCL %B INIT\n'                                                 ';\nDCL %C INIT\n'                                                 ';\nDCL %D INIT\n'                                                 ';\nDCL %E INIT\n'                                                 ';\nDCL %F INIT\n'                                                 ';\nDCL %G INIT\n'                                                 ';\nDCL %H INIT\n'                                                 ';\nDCL %I INIT\n'                                                 ';\nDCL %J INIT\n'                                                 ';\nDCL %K INIT\n'                                                 ';\nDCL %L INIT\n'                                                 ';\nDCL %M INIT\n'                                                 ';\nDCL %N INIT\n'                                                 ';\nDCL %O INIT\n'                                                 ';\nDCL %P INIT\n'                                                 ';\nDCL %Q INIT\n'                                                 ';\nDCL %R INIT\n'                                                 ';\nDCL %S INIT\n'                                                 ';\nDCL %T INIT\n'                                                 ';\n/*******************************************************************/\n/**   DECLARE EXTRA BLANK PANEL FOR REDOS                         **/\n/*******************************************************************/\nDCL %AA INIT\n'                                                 ';\nDCL %BB INIT\n'                                                 ';\nDCL %CC INIT\n'                                                 ';\nDCL %DD INIT\n'                                                 ';\nDCL %EE INIT\n'                                                 ';\nDCL %FF INIT\n'                                                 ';\nDCL %GG INIT\n'                                                 ';\nDCL %HH INIT\n'                                                 ';\nDCL %II INIT\n'                                                 ';\nDCL %JJ INIT\n'                                                 ';\nDCL %KK INIT\n'                                                 ';\nDCL %LL INIT\n'                                                 ';\nDCL %MM INIT\n'                                                 ';\nDCL %NN INIT\n'                                                 ';\nDCL %OO INIT\n'                                                 ';\nDCL %PP INIT\n'                                                 ';\nDCL %QQ INIT\n'                                                 ';\nDCL %RR INIT\n'                                                 ';\nDCL %SS INIT\n'                                                 ';\nDCL %TT INIT\n'                                                 ';\n/*******************************************************************/\n/**   DECLARE SYMBOLICS FOR PANEL CALCULATIONS.                   **/\n/*******************************************************************/\nDCL %SYMA,%SYMB,%SYMC,%SYMD,%SYME,%SYMF,%SYMG,%SYMH,%SYMI,%SYMS,%SYMT,\n    %SYMJ,%SYMK,%SYML,%SYMM,%SYMN,%SYMO,%SYMP,%SYMQ,%SYMR     INIT '';\nDCL %YY,%IN1,%IN2,%MEMBER,%INPUT1,%INPUT2                     INIT '';\nDCL %DEFA,%DEFB,%DEFC,%DEFD,%DEFE,%DEFF,%DEFG,%DEFH,%DEFI,%DEFS,%DEFT,\n    %DEFJ,%DEFK,%DEFL,%DEFM,%DEFN,%DEFO,%DEFP,%DEFQ,%DEFR     INIT '';\nDCL %DECA,%DECB,%DECC,%DECD,%DECE,%DECF,%DECG,%DECH,%DECI,%DECS,%DECT,\n    %DECJ,%DECK,%DECL,%DECM,%DECN,%DECO,%DECP,%DECQ,%DECR     INIT '';\n/*******************************************************************/\n/**   DECLARE SYMBOLICS FOR USER PANEL DATASET.                   **/\n/*******************************************************************/\nDCL %CMDLIB INIT '%SYSUID.JOL';\nDCL %MEM INIT               '';\n/*******************************************************************/\n/**   INFO PANEL AND PICK UP DSNAME FOR USERS PANEL.              **/\n/*******************************************************************/\nPANEL('                 THIS IS THE BUILD PANEL MACRO              ')\n     ('                  -----------------------------             ')\n     ('     TO CREATE A PANEL JUST ENTER THE NAME OF AN EXISTING   ')\n     ('   DATASET INTO WHICH YOU WISH TO STORE YOUR PANEL          ')\n     ('   THIS MEMBER MAY THEN BE INCLUDED INTO YOUR JOL PROCEDURES.')\n    /('   A BLANK SCREEN WILL BE DISPLAYED AND YOU MAY ENTER YOUR  ')\n     ('   TEXT ANYWHERE ON THE SCREEN. THE PANEL CREATED WILL      ')\n     ('   DISPLAY YOUR TEXT AT THAT LOCATION ON THE SCREEN.        ')\n    /('   THE FORMAT IS ==>   TEXT(REPLY-LENGTH,\"DEFAULT\")         ')\n    /('   WHERE REPLY-LENGTH IS THE LENGTH OF THE EXPECTED REPLY   ')\n     ('   AND \"DEFAULT\" IS THE DEFAULT REPLY YOU WOULD LIKE DISPLAYED')\n     ('   IN THE REPLY SPACE. ')\n    /('   EG      ENTER TAPE NUMBER(6,TAPE1)                       ')\n    /('   SYMBOLICS MAY BE USED ANYWHERE                           ')\n    /('        ENTER DSNAME==>',CMDLIB,44,'%CMDLIB'                 )\n     ('        ENTER MEMBER==>',MEM,8                               );\n/*******************************************************************/\n/**   DISPLAY BLANK PANEL AND PICK UP USERS DATA.                 **/\n/*******************************************************************/\n LABEL PAN1;\n %MEMBER='';%INPUT1=''; %INPUT2='';\nPANEL ('',AA,50,'%AA')\n      ('',BB,50,'%BB')\n      ('',CC,50,'%CC')\n      ('',DD,50,'%DD')\n      ('',EE,50,'%EE')\n      ('',FF,50,'%FF')\n      ('',GG,50,'%GG')\n      ('',HH,50,'%HH')\n      ('',II,50,'%II')\n      ('',JJ,50,'%JJ')\n      ('',KK,50,'%KK')\n      ('',LL,50,'%LL')\n      ('',MM,50,'%MM')\n      ('',NN,50,'%NN')\n      ('',OO,50,'%OO')\n      ('',PP,50,'%PP')\n      ('',QQ,50,'%QQ')\n      ('',RR,50,'%RR')\n      ('',SS,50,'%SS')\n      ('',TT,50,'%TT');\n/*******************************************************************/\n/**   TAKE A COPY FOR REDO IF REQUIRED .                          **/\n/*******************************************************************/\n %A='%AA';%B='%BB';%C='%CC';%D='%DD';%E='%EE';%F='%FF';\n %G='%GG';%H='%HH';%I='%II';%J='%JJ';%K='%KK';%L='%LL';\n %M='%MM';%N='%NN';%O='%OO';%P='%PP';%Q='%QQ';%R='%RR';\n %S='%SS';%T='%TT';\n/*******************************************************************/\n/**1. CALCULATE LENGTH AND TYPE OF STATEMENT FOR EACH LINE.       **/\n/**2. CALCULATE DEFAULT AND REPLY LENGTH  FOR EACH LINE.          **/\n/**3. SET UP SYMBOLIC FOR PANEL REPLIES.                          **/\n/*******************************************************************/\n    %X=INDEX(A,'(')                                               ;\n IF %X\u00ac='0' THEN DO;%Y=INDEX(A,')');    %X=%X+1;    %Z=%Y-%X      ;\n    %SYMA=SUBSTR(A,%X,%Z); %YY=INDEX(SYMA,',')                    ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFA=SUBSTR(SYMA,%YY); %YY=%YY-2;\n    %SYMA=SUBSTR(SYMA,1,%YY); %SYMA=',P1,%SYMA,''%DEFA''';     END;\n IF %YY='0' THEN %SYMA=',P1,%SYMA'; %X=%X-2; %A=SUBSTR(A,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECA = ',%%P1';                         END;\n    %X=INDEX(B,'(')                                               ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(B,')');   %X=%X+1;    %Z=%Y-%X      ;\n    %SYMB=SUBSTR(B,%X,%Z);  %YY=INDEX(SYMB,',')                   ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFB=SUBSTR(SYMB,%YY); %YY=%YY-2;\n    %SYMB=SUBSTR(SYMB,1,%YY); %SYMB=',P2,%SYMB,''%DEFB''';     END;\n IF %YY='0' THEN %SYMB=',P2,%SYMB'; %X=%X-2; %B=SUBSTR(B,1,%X);END;\n IF %X\u00ac='0' THEN DO; %DECB = ',%%P2';                          END;\n    %X=INDEX(C,'(')                                               ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(C,')');   %X=%X+1;    %Z=%Y-%X      ;\n    %SYMC=SUBSTR(C,%X,%Z); %YY=INDEX(SYMC,',')                    ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFC=SUBSTR(SYMC,%YY); %YY=%YY-2;\n    %SYMC=SUBSTR(SYMC,1,%YY); %SYMC=',P3,%SYMC,''%DEFC''';     END;\n IF %YY='0' THEN %SYMC=',P3,%SYMC'; %X=%X-2; %C=SUBSTR(C,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECC = ',%%P3';                         END;\n    %X=INDEX(D,'(')                                               ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(D,')');   %X=%X+1;    %Z=%Y-%X      ;\n    %SYMD=SUBSTR(D,%X,%Z); %YY=INDEX(SYMD,',')                    ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFD=SUBSTR(SYMD,%YY); %YY=%YY-2;\n    %SYMD=SUBSTR(SYMD,1,%YY); %SYMD=',P4,%SYMD,''%DEFD''';     END;\n IF %YY='0' THEN %SYMD=',P4,%SYMD'; %X=%X-2; %D=SUBSTR(D,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECD = ',%%P4';                         END;\n    %X=INDEX(E,'(')                                               ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(E,')');   %X=%X+1;    %Z=%Y-%X      ;\n    %SYME=SUBSTR(E,%X,%Z); %YY=INDEX(SYME,',')                    ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFE=SUBSTR(SYME,%YY); %YY=%YY-2;\n    %SYME=SUBSTR(SYME,1,%YY); %SYME=',P5,%SYME,''%DEFE''';     END;\n IF %YY='0' THEN %SYME=',P5,%SYME'; %X=%X-2; %E=SUBSTR(E,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECE = ',%%P5'; END;\n    %X=INDEX(F,'(')                                               ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(F,')');   %X=%X+1;    %Z=%Y-%X      ;\n    %SYMF=SUBSTR(F,%X,%Z); %YY=INDEX(SYMF,',')                    ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFF=SUBSTR(SYMF,%YY); %YY=%YY-2;\n    %SYMF=SUBSTR(SYMF,1,%YY); %SYMF=',P6,%SYMF,''%DEFF''';     END;\n IF %YY='0' THEN %SYMF=',P6,%SYMF'; %X=%X-2; %F=SUBSTR(F,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECF = ',%%P6';                         END;\n    %X=INDEX(G,'(')                                               ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(G,')');   %X=%X+1;    %Z=%Y-%X      ;\n    %SYMG=SUBSTR(G,%X,%Z); %YY=INDEX(SYMG,',')                    ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFG=SUBSTR(SYMG,%YY); %YY=%YY-2;\n    %SYMG=SUBSTR(SYMG,1,%YY);  %SYMG=',P7,%SYMG,''%DEFG''';    END;\n IF %YY='0' THEN %SYMG=',P7,%SYMG'; %X=%X-2; %G=SUBSTR(G,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECG = ',%%P7';                         END;\n    %X=INDEX(H,'(')                                               ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(H,')');   %X=%X+1;    %Z=%Y-%X      ;\n    %SYMH=SUBSTR(H,%X,%Z);  %YY=INDEX(SYMH,',')                   ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFH=SUBSTR(SYMH,%YY); %YY=%YY-2;\n    %SYMH=SUBSTR(SYMH,1,%YY);  %SYMH=',P8,%SYMH,''%DEFH''';    END;\n IF %YY='0' THEN %SYMH=',P8,%SYMH'; %X=%X-2; %H=SUBSTR(H,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECH = ',%%P8';                         END;\n    %X=INDEX(I,'(')                                               ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(I,')');   %X=%X+1;    %Z=%Y-%X      ;\n    %SYMI=SUBSTR(I,%X,%Z); %YY=INDEX(SYMI,',')                    ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFI=SUBSTR(SYMI,%YY); %YY=%YY-2;\n    %SYMI=SUBSTR(SYMI,1,%YY); %SYMI=',P9,%SYMI,''%DEFI''';     END;\n IF %YY='0' THEN %SYMI=',P9,%SYMI'; %X=%X-2; %I=SUBSTR(I,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECI = ',%%P9';                         END;\n    %X=INDEX(J,'(')                                               ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(J,')');   %X=%X+1;    %Z=%Y-%X      ;\n    %SYMJ=SUBSTR(J,%X,%Z); %YY=INDEX(SYMJ,',')                    ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFJ=SUBSTR(SYMJ,%YY); %YY=%YY-2;\n    %SYMJ=SUBSTR(SYMJ,1,%YY); %SYMJ=',P10,%SYMJ,''%DEFJ''';     END;\n IF %YY='0' THEN %SYMJ=',P10,%SYMJ'; %X=%X-2; %J=SUBSTR(J,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECJ = ',%%P10';                         END;\n    %X=INDEX(K,'(')                                                ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(K,')');   %X=%X+1;    %Z=%Y-%X       ;\n    %SYMK=SUBSTR(K,%X,%Z); %YY=INDEX(SYMK,',')                     ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFK=SUBSTR(SYMK,%YY); %YY=%YY-2 ;\n    %SYMK=SUBSTR(SYMK,1,%YY);  %SYMK=',P11,%SYMK,''%DEFK''';    END;\n IF %YY='0' THEN %SYMK=',P11,%SYMK'; %X=%X-2; %K=SUBSTR(K,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECK = ',%%P11';                         END;\n    %X=INDEX(L,'(')                                                ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(L,')');    %X=%X+1;    %Z=%Y-%X      ;\n    %SYML=SUBSTR(L,%X,%Z);  %YY=INDEX(SYMK,',')                    ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1;  %DEFL=SUBSTR(SYML,%YY); %YY=%YY-2;\n    %SYML=SUBSTR(SYML,1,%YY);  %SYML=',P12,%SYML,''%DEFL''';    END;\n IF %YY='0' THEN %SYML=',P12,%SYML'; %X=%X-2; %L=SUBSTR(L,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECL = ',%%P12';                         END;\n    %X=INDEX(M,'(')                                                ;\n IF %X\u00ac='0' THEN DO;  %Y=INDEX(M,')');   %X=%X+1;    %Z=%Y-%X      ;\n    %SYMM=SUBSTR(M,%X,%Z);  %YY=INDEX(SYMM,',')                    ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFM=SUBSTR(SYMM,%YY); %YY=%YY-2 ;\n    %SYMM=SUBSTR(SYMM,1,%YY); %SYMM=',P13,%SYMM,''%DEFM''';     END;\n IF %YY='0' THEN %SYMM=',P13,%SYMM'; %X=%X-2; %M=SUBSTR(M,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECM = ',%%P13';                         END;\n    %X=INDEX(N,'(')                                                ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(N,')');    %X=%X+1;    %Z=%Y-%X      ;\n    %SYMN=SUBSTR(N,%X,%Z);  %YY=INDEX(SYMN,',')                    ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFN=SUBSTR(SYMN,%YY); %YY=%YY-2 ;\n    %SYMN=SUBSTR(SYMN,1,%YY);   %SYMN=',P14,%SYMN,''%DEFN''';   END;\n IF %YY='0' THEN %SYMN=',P14,%SYMN'; %X=%X-2; %N=SUBSTR(N,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECN = ',%%P14';                         END;\n    %X=INDEX(O,'(')                                                ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(O,')');    %X=%X+1;    %Z=%Y-%X      ;\n    %SYMO=SUBSTR(O,%X,%Z); %YY=INDEX(SYMO,',')                     ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFO=SUBSTR(SYMO,%YY); %YY=%YY-2 ;\n    %SYMO=SUBSTR(SYMO,1,%YY);  %SYMO=',P15,%SYMO,''%DEFO''';    END;\n IF %YY='0' THEN %SYMO=',P15,%SYMO'; %X=%X-2; %O=SUBSTR(O,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECO = ',%%P15';                         END;\n    %X=INDEX(P,'(')                                                ;\n IF %X\u00ac='0' THEN DO;  %Y=INDEX(P,')');    %X=%X+1;   %Z=%Y-%X      ;\n    %SYMP=SUBSTR(P,%X,%Z); %YY=INDEX(SYMP,',')                     ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFP=SUBSTR(SYMP,%YY); %YY=%YY-2 ;\n    %SYMP=SUBSTR(SYMP,1,%YY);  %SYMP=',P16,%SYMP,''%DEFP''';    END;\n IF %YY='0' THEN %SYMP=',P16,%SYMP'; %X=%X-2; %P=SUBSTR(P,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECP = ',%%P16';                         END;\n    %X=INDEX(Q,'(')                                                ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(Q,')');    %X=%X+1;    %Z=%Y-%X      ;\n    %SYMQ=SUBSTR(Q,%X,%Z); %YY=INDEX(SYMQ,',')                     ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFQ=SUBSTR(SYMQ,%YY); %YY=%YY-2 ;\n    %SYMQ=SUBSTR(SYMQ,1,%YY);  %SYMQ=',P17,%SYMQ,''%DEFQ''';    END;\n IF %YY='0' THEN %SYMQ=',P17,%SYMQ'; %X=%X-2; %Q=SUBSTR(Q,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECP = ',%%P17';                         END;\n    %X=INDEX(R,'(')                                                ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(R,')');    %X=%X+1;     %Z=%Y-%X     ;\n    %SYMR=SUBSTR(R,%X,%Z); %YY=INDEX(SYMR,',')                     ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFR=SUBSTR(SYMR,%YY); %YY=%YY-2 ;\n    %SYMR=SUBSTR(SYMR,1,%YY);  %SYMR=',P18,%SYMR,''%DEFR''';    END;\n IF %YY='0' THEN %SYMR=',P18,%SYMR'; %X=%X-2; %R=SUBSTR(R,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECR = ',%%P18';                         END;\n    %X=INDEX(S,'(')                                                ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(S,')');    %X=%X+1;     %Z=%Y-%X     ;\n    %SYMS=SUBSTR(S,%X,%Z); %YY=INDEX(SYMS,',')                     ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFS=SUBSTR(SYMS,%YY); %YY=%YY-2 ;\n    %SYMS=SUBSTR(SYMS,1,%YY);  %SYMS=',P19,%SYMS,''%DEFS''';    END;\n IF %YY='0' THEN %SYMS=',P19,%SYMS'; %X=%X-2; %S=SUBSTR(S,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECS = ',%%P19';                         END;\n    %X=INDEX(T,'(')                                                ;\n IF %X\u00ac='0' THEN DO; %Y=INDEX(T,')'); %X=%X+1; %Z=%Y-%X            ;\n    %SYMT=SUBSTR(T,%X,%Z); %YY=INDEX(SYMT,',')                     ;\n IF %YY\u00ac='0' THEN DO; %YY=%YY+1; %DEFT=SUBSTR(SYMT,%YY); %YY=%YY-2 ;\n    %SYMT=SUBSTR(SYMT,1,%YY);  %SYMT=',P20,%SYMT,''%DEFT''';    END;\n IF %YY='0' THEN %SYMT=',P20,%SYMT'; %X=%X-2; %T=SUBSTR(T,1,%X);END;\n IF %X\u00ac='0' THEN DO;  %DECT = ',%%P20';                         END;\n/*******************************************************************/\n/**   SET UP LIST OF SYMBOLICS FOR DISPLAY TO THE USER.           **/\n/*******************************************************************/\n  %INPUT1='%DECA%DECB%DECC%DECD%DECE%DECF%DECG%DECH%DECI%DECJ';\n  %INPUT2='%DECK%DECL%DECM%DECN%DECO%DECP%DECQ%DECR%DECS%DECT';\n  %INPUT1=SUBSTR(INPUT1,2);\n  %INPUT2=SUBSTR(INPUT2,2);\n  %IN1   ='%INPUT1'       ;\n  %IN2   ='%INPUT2'       ;\n  IF %INPUT1 \u00ac= '' THEN  %INPUT1='DCL %INPUT1 INIT '''';';\n  IF %INPUT1  = '' THEN  %INPUT1='DCL %%DUMMA INIT '''';';\n  IF %INPUT2 \u00ac= '' THEN  %INPUT2='DCL %INPUT2 INIT '''';';\n  IF %INPUT2  = '' THEN  %INPUT2='DCL %%DUMMB INIT '''';';\n  IF %IN1     = ''   &   %IN2   =''   THEN    %IN1='NONE';\n/*******************************************************************/\n/**   CREATE A TEMPORARY FILE CONTAINING THE PANEL.               **/\n/*******************************************************************/\n  UJY09OP '%CMDLIB' %MEM\n   'PANEL(''%A''%SYMA)'\n   '(''%B''%SYMB)'\n   '(''%C''%SYMC)'\n   '(''%D''%SYMD)'\n   '(''%E''%SYME)'\n   '(''%F''%SYMF)'\n   '(''%G''%SYMG)'\n   '(''%H''%SYMH)'\n   '(''%I''%SYMI)'\n   '(''%J''%SYMJ)'\n   '(''%K''%SYMK)'\n   '(''%L''%SYML)'\n   '(''%M''%SYMM)'\n   '(''%N''%SYMN)'\n   '(''%O''%SYMO)'\n   '(''%P''%SYMP)'\n   '(''%Q''%SYMQ)'\n   '(''%R''%SYMR)'\n   '(''%S''%SYMS)'\n   '(''%T''%SYMT);';\n/*******************************************************************/\n/**   TELL THE USER TO DISPLAY HIS PANEL.                         **/\n/*******************************************************************/\n  PANEL//('********************************************************')\n         ('*            BUILD PANEL MACRO                         *')\n         ('********************************************************')\n        /('          YOUR PANEL HAS NOW BEEN CREATED               ')\n         ('          AND MAY BE VIEWED FOR CORRECTNESS             ')\n       //('          HIT ENTER TO DISPLAY THE PANEL YOU HAVE JUST  ')\n         ('          CREATED                                       ');\n   INCLUDE %MEM;\n/*******************************************************************/\n/**   IS IT OK? IF NOT GO BACK AND DISPLAY THE USERS INPUT DATA.  **/\n/*******************************************************************/\nPANEL('            ***********************************************')\n     ('            *             BUILD PANEL MACRO               *')\n     ('            ***********************************************')\n   //('            YOU MAY SAVE YOUR PANEL NOW OR YOU MAY         ')\n     ('            GO BACK AND CHANGE IT.                         ')\n   //('            DO YOU WANT TO CHANGE IT (Y/N) ==>',OK,1,'Y'    );\n   IF %OK='Y' THEN REDO PAN1                                        ;\n/*******************************************************************/\n/**  YES  IT IS OK. CREATE A PERMANENT USER DATASET AND INCLUDE   **/\n/**       A ANOTHER MEMBER IF NECCESSARY.                         **/\n/*******************************************************************/\n  PANEL//('********************************************************')\n        /('          YOUR PANEL IS NOW COMPLETE                    ')\n         ('          --------------------------                    ')\n         ('  THE FOLLOWING SYMBOLICS HAVE BEEN CREATED FOR YOUR    ')\n         ('  PANEL. THEY ARE IN THE ORDER IN WHICH THEY APPEAR     ')\n         ('  ON THE PANEL                                          ')\n         ('                                                        ')\n         ('',DUMMY,60,'%IN1'                                        )\n         ('',DUMMY1,60,'%IN2'                                       )\n         ('  IF YOU WOULD LIKE TO \"INCLUDE\" A JOL MEMBER AFTER     ')\n         ('  THIS PANEL YOU MAY ENTER IT HERE                      ')\n        /('  INCLUDE ==>',MEMBER,8);\n  IF   %MEMBER\u00ac='' THEN %MEMBER='INCLUDE %MEMBER;';\n  ELSE %MEMBER ='/* NO MEMBERS HAVE BEEN INCLUDED*/';\n  UJY09OP '%CMDLIB' %MEM\n   '/******************************************************/'\n   '/*THIS MEMBER WAS BUILT BY THE JOL BUILD PANEL MACRO. */'\n   '/*                                                    */'\n   '/******************************************************/'\n   '/*  DECLARE PANEL SYMBOLICS                           */'\n   '/******************************************************/'\n   '%INPUT1'\n   '%INPUT2'\n   '/******************************************************/'\n   '/*  PANEL INSTRUCTION                                 */'\n   '/******************************************************/'\n   'PANEL(''%A''%SYMA)'\n   '(''%B''%SYMB)'\n   '(''%C''%SYMC)'\n   '(''%D''%SYMD)'\n   '(''%E''%SYME)'\n   '(''%F''%SYMF)'\n   '(''%G''%SYMG)'\n   '(''%H''%SYMH)'\n   '(''%I''%SYMI)'\n   '(''%J''%SYMJ)'\n   '(''%K''%SYMK)'\n   '(''%L''%SYML)'\n   '(''%M''%SYMM)'\n   '(''%N''%SYMN)'\n   '(''%O''%SYMO)'\n   '(''%P''%SYMP)'\n   '(''%Q''%SYMQ)'\n   '(''%R''%SYMR)'\n   '(''%S''%SYMS)'\n   '(''%T''%SYMT);'\n   '%MEMBER'\n   '/****************************************************/'\n   '/*END OF PANEL BUILT BY THE JOL BUILD PANEL MACRO.  */'\n   '/****************************************************/';\n   END ; /* END OF MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BLDPRNT": {"ttr": 3082, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x88\\x16\\x0f\\x00\\x88$O\\x17\\x05\\x00%\\x00%\\x00\\x0c\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1988-06-08T00:00:00", "modifydate": "1988-08-31T17:05:00", "lines": 37, "newlines": 37, "modlines": 12, "user": "JOL"}, "text": " BLDPRNT:MACRO;\n           %PRNTIF='MAXCC=0';\n           %PRNTIN='?';\n           %PRNTCLS='*';\nLABEL PRNT;\n          panel\n ('                    BUILD Jol Print Command')\n      /*   lm 10*/\n/('           IF ',PRNTIF,60,'%PRNTIF')\n/('           then PRINT  ==>',PRNTIN,44,'%PRNTIN')\n    /*     lm 1*/\n//('    Print Options:')\n   /*      lm 10*/\n/('           PRINT or SYSOUT Class  ==>',PRNTCLS,1,'%PRNTCLS')\n/('           How Many Copies?       ==>',PRNTCOPY,3,'1')\n ('           Destination            ==>',PRNTDEST,8,'CENTRAL')\n ('           Output Limit           ==>',PRNTOUTL,8,'0')\n           ;\n           IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\nprnchk:\n           IF %PRNTIN='?' | %PRNTIN=''\n           THEN DO;\n                panel reread from prntin\n                   'No Input Data Set Specified';\n                goto prnchk;\n           END;\n\n         IF  %PRNTIF\u00ac='' THEN UJY04P '   If %PRNTIF Then';\n\n         IF %PRNTCLS \u00ac='' THEN %PRNTCLS='CLASS %PRNTCLS';\n         IF %PRNTCOPY\u00ac='' THEN %PRNTCOPY='%PRNTCOPY PART';\n         IF %PRNTDEST\u00ac='' THEN %PRNTDEST='ROUTE %PRNTDEST';\n           %INPUT='%PRNTIN';\n           BLDCDS DATASET '%INPUT' disp=old;\n           %INPUT='%DSIDRET' ;\n           UJY04P '       Print %INPUT %PRNTCOPY %PRNTOUTL %PRNTCLS;';\nEND;    /* BLDPRNT  */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLDPRNTR": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x88$/\\x00\\x88$O\\x17\\x06\\x00\\x1c\\x00\\x1c\\x00\\x03\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1988-08-29T00:00:00", "modifydate": "1988-08-31T17:06:00", "lines": 28, "newlines": 28, "modlines": 3, "user": "JOL"}, "text": " BLDPRNTR:MACRO (\n       %PRINTER,\n       %DSID=,\n            );\n IF %LIST(1)='' THEN WRITE 'ERROR - NO DATA PRINTER GIVEN TO BLDPRNTR';\n ELSE DO;\n DCL %PRNTCLS, %PRNTCOPY, %PRNTDEST, %PRNTOUTL INIT '';\n /**********************/\n  panel\n  ('                 Build PRINT Command')\n//(   '  Optional extra information for %LIST(1):')\n /('                   PRINT or SYSOUT Class ===>',PRNTCLS,1)\n  ('   Note Blank or * Defaults to your TSO Class.')\n /('                   How many Copies?      ===>',PRNTCOPY,3)\n /('                   Destination           ===>',PRNTDEST,8)\n  ('                   Output Limit          ===>',PRNTOUTL,8)\n           ;\n IF %PRNTCLS= ''   THEN %PRNTCLS='*';\n IF %PRNTCOPY \u00ac= '' THEN %PRNTCOPY = 'Copies = %PRNTCOPY';\n IF %PRNTDEST \u00ac= '' THEN %PRNTDEST = 'Route %PRNTDEST' ;\n IF %PRNTOUTL \u00ac= '' THEN %PRNTOUTL = 'Outlim %PRNTOUTL' ;\n\n %dsid='%dsid          ';\n %DSID=SUBSTR(DSID,1,8);         /* Tidy up for output */\n\n  UJY03P 'Dcl %DSID %LIST(1) %PRNTCLS %PRNTCOPY %PRNTDEST %PRNTOUTL;';\n  END;\nEND;    /*   BLDPRNTR  */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLDSORT": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x88\\x16\\x0f\\x00\\x88$/\\x17\\x14\\x00\\x83\\x00z\\x00\\x03\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1988-06-08T00:00:00", "modifydate": "1988-08-29T17:14:00", "lines": 131, "newlines": 122, "modlines": 3, "user": "JOL"}, "text": " BLDSORT:MACRO;\n         DCL  %SORTIF INIT 'MAXCC=0';\n         DCL  %SORTCYLS INIT 3;\n         DCL  %SORTWORK INIT 5;\n         DCL  %USING, %SORTIN, %SORTOUT, %SORTFLDS  INIT '?';\n         DCL  %SORTIN2, %SORTIN3, %SORTIN4, %SORTIN5,\n              %SORTIN6, %SORTIN7, %SORTIN8,\n              %SORTIN9 INIT '';\n         dcl  %error init('');\nLABEL SORT;\n panel('                          %error')\n ('                        SORT Build Panel')\n/('           (Optional)    IF ',SORTIF,48,'%SORTIF')\n ('                  then SORT ',SORTIN,44,'%SORTIN')\n ('                         TO ',SORTOUT,44,'%SORTOUT')\n ('           Fields     ==>',SORTFLDS,50,'%SORTFLDS')\n ('           OR get from Data Set ==>',USING,43,'%USING')\n/('           2nd Input  ==>',SORTIN2,44,'%SORTIN2')\n ('           3rd Input  ==>',SORTIN3,44,'%SORTIN3')\n ('           4th Input  ==>',SORTIN4,44,'%SORTIN4')\n ('           5th Input  ==>',SORTIN5,44,'%SORTIN5')\n ('           6th Input  ==>',SORTIN6,44,'%SORTIN6')\n ('           7th Input  ==>',SORTIN7,44,'%SORTIN7')\n ('           8th Input  ==>',SORTIN8,44,'%SORTIN8')\n ('           9th Input  ==>',SORTIN9,44,'%SORTIN9')\n/('           Disk Work Areas  ===>',SORTCYLS,3,'%SORTCYLS')\n ('             of Size (CYLS) ===>',SORTWORK,3,'%SORTWORK')\n           ;\nIF %SYSPFK=3 | %SYSPFK=15 THEN EXIT;\nIF %SYSPFK = 1 | %SYSPFK=13 THEN DO;\n   panel reread from sortout 'No HELP Available at this time';\n   REDO SORT;\nEND;\n\nsortchk:\n        IF %SORTIN='?' | %SORTIN=''\n        then do;\n             %error='No INPUT Data Set Specified';\n             redo  SORT;\n             panel reread from sortin 'No INPUT Data Set Specified';\n             goto sortchk;\n        end;\n        IF %SORTOUT='?' | %SORTOUT =''\n        then do;\n             %error='No OUTPUT Data Set Specified';\n             redo  SORT;\n             panel reread\n                 from sortout'No OUTPUT Data Set Specified';\n             goto sortchk;\n        end;\n        IF %SORTFLDS = '?' | %SORTFLDS ='' THEN %SORTFLDS ='';\n        IF %USING    = '?' | %USING    ='' THEN %USING    ='';\n        IF %SORTFLDS = '' & %USING =''\n        then do;\n             %error='No Using or Fields Specified';\n             redo  SORT;\n             panel reread\n                 from sortflds 'No Using or Fields Specified';\n             goto sortchk;\n        end;\n        IF %SORTFLDS \u00ac='' & %USING \u00ac= ''\n        then do;\n             %error=\n                 'Both Using AND Fields Specified: Specify ONE only';\n             redo  SORT;\n             panel reread\n                 from sortflds\n                 'Both Using AND Fields Specified: Specify ONE only';\n             goto sortchk;\n        end;\n        IF %SORTFLDS = '' & %USING \u00ac=''\n        THEN DO;\n                 BLDCDS DATASET '%USING' DISP=OLD;\n                       %USING ='USING %DSIDRET';\n                       %SORTFLDS='%USING';\n\n         END;\n         ELSE IF %SORTFLDS \u00ac='' & %USING = ''  THEN\n                 %SORTFLDS ='Fields=(%SORTFLDS)';\n\n           BLDCDS DATASET '%SORTIN' DISP=OLD;   %SORTIN='%DSIDRET';\n           %INPUT='%SORTIN';\n           BLDCDS DATASET '%SORTOUT' DISP=NEW;  %SORTOUT='%DSIDRET';\n           IF %SORTIN2\u00ac='' THEN DO;\n              BLDCDS DATASET '%SORTIN2'; %SORTIN2 = '%DSIDRET';\n           END;\n           IF %SORTIN3\u00ac='' THEN DO;\n              BLDCDS DATASET '%SORTIN3'; %SORTIN3 = '%DSIDRET';\n           END;\n           IF %SORTIN4\u00ac='' THEN DO;\n              BLDCDS DATASET '%SORTIN4'; %SORTIN4 = '%DSIDRET';\n           END;\n           IF %SORTIN5\u00ac='' THEN DO;\n              BLDCDS DATASET '%SORTIN5'; %SORTIN5 = '%DSIDRET';\n           END;\n           IF %SORTIN6\u00ac='' THEN DO;\n              BLDCDS DATASET '%SORTIN6'; %SORTIN6 = '%DSIDRET';\n           END;\n           IF %SORTIN7\u00ac='' THEN DO;\n              BLDCDS DATASET '%SORTIN7'; %SORTIN7 = '%DSIDRET';\n           END;\n           IF %SORTIN8\u00ac='' THEN DO;\n              BLDCDS DATASET '%SORTIN8'; %SORTIN8 = '%DSIDRET';\n           END;\n           IF %SORTIN9\u00ac='' THEN DO;\n              BLDCDS DATASET '%SORTIN9'; %SORTIN9 = '%DSIDRET';\n           END;\n\n           IF %SORTIN2\u00ac='' THEN %INPUT='%INPUT || %SORTIN2';\n           IF %SORTIN3\u00ac='' THEN %INPUT='%INPUT || %SORTIN3';\n           IF %SORTIN4\u00ac='' THEN %INPUT='%INPUT || %SORTIN4';\n           IF %SORTIN5\u00ac='' THEN %INPUT='%INPUT || %SORTIN5';\n           IF %SORTIN6\u00ac='' THEN %INPUT='%INPUT || %SORTIN6';\n           IF %SORTIN7\u00ac='' THEN %INPUT='%INPUT || %SORTIN7';\n           IF %SORTIN8\u00ac='' THEN %INPUT='%INPUT || %SORTIN8';\n           IF %SORTIN9\u00ac='' THEN %INPUT='%INPUT || %SORTIN9';\n\n           IF %SORTIF\u00ac='' THEN UJY04P '   If %SORTIF Then';\n           %X=LENGTH(INPUT);\n           IF %X<40 THEN DO;\n              UJY04P '       Sort %INPUT to %SORTOUT';\n              UJY04P '            %SORTFLDS';\n              UJY04P '            %SORTWORK Cyls %SORTCYLS Disks;';\n           END;\n           ELSE DO;\n              UJY04P '       Sort %INPUT ';\n              UJY04P '            to %SORTOUT';\n              UJY04P '            %SORTFLDS';\n              UJY04P '            %SORTWORK Cyls %SORTCYLS Disks;';\n           END;\n END;    /*   BLDSORT  */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLDSRCH": {"ttr": 3334, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88$/\\x00\\x88$/\\x17\\x02\\x00#\\x00#\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-08-29T00:00:00", "modifydate": "1988-08-29T17:02:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "JOL"}, "text": "BLDSRCH: MACRO (         /* FIND A DATA SET THAT HAS ALREADY  */\n                         /* BEEN DECLARED AND RETURN %DSIDLIKE */\n          %DATASET,\n          ) ;\n\nDCL %DECISION, %CONT INIT '';\n\n%DSIDLIKE='';\n%CNT = 1; /* RESET CNT TO 1 */\n /******************************************************************/\n /********* C H E C K   T H E   D A T A   S E T S * (FOR A LIKE) ***/\n /******************************************************************/\n IF %DATASET = 'DATASET' & %LIST(1) \u00ac= '' THEN DO;\n    %CONT='YES';\n    LABEL DSETCK;\n      SETA CHECK = 'DSET%CNT';\n      %SETA = 'SET CHECK = %%QUOTE%%%CHECK%%QUOTE';\n? 'Setting %seta';\n      %SET;                            /* CHECK = VALUE OF %DSET%CNT */\n      IF %CHECK ='%LIST0001' THEN DO;    /* DSETS THE SAME ? */\n         %CONT  = 'NO';                  /* RETURN THE DSET  */\n         %DSIDLIKE='DSET%CNT';           /* IDENTIFIER       */\n      /* WRITE 'FOUND A LIKE NAME ''%LIST0001'' %CHECK'; */\n      END;\n      IF %CHECK = '' THEN DO;          /* HERE THEY ARE NOT THE SAME */\n         %DSIDLIKE='BAD';              /* DATA SET NOT FOUND */\n      END;\n\n           ELSE DO;\n                IF %CONT  \u00ac= 'NO' THEN DO;\n                   %CNT = %CNT + 1;  IF %CNT < 50 THEN REDO DSETCK;\n                END;\n           END;\n  END;\nEND; /* END OF BLDCDS MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLD04P": {"ttr": 3336, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "ujy04p:macro;\n\n/* Used in BUILJOB ONLY */\n\n    write file($code) from('%list(1)');\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BUILDG": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x822\\x0f\\x00\\x88\\x02/\\x17\\x16\\x00w\\x00w\\x00\\x02\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1982-11-16T00:00:00", "modifydate": "1988-01-22T17:16:00", "lines": 119, "newlines": 119, "modlines": 2, "user": "JOL"}, "text": "BUILDGDG:MACRO (\n/*********************************************************************/\n/*              COMMAND TO BUILD A GENERATION DATA GROUP             */\n/*********************************************************************/\n/*                                                                   */\n         %VSAM=YES,               /* INDICATE TYPE OF SYSTEM CATALOG */\n         %SYSOUT=,                /* SYSOUT CLASS                    */\n                                  /***********************************/\n                                  /* GENERAL KEYWORDS                */\n                                  /***********************************/\n         %ENTRIES=3,              /* DEFAULT IS 3                    */\n         %CVOL=,                  /* NON VSAM CATALOGUE ONLY         */\n         %UNIT=SYSDA,             /*                                 */\n         %EMPTY,  %NOEMPTY,       /* DEFAULT IS NOEMPTY              */\n         %DELETE, %NODELETE,      /* DEFAULT IS DELETE               */\n                                  /***********************************/\n                                  /* VSAM KEYWORDS                   */\n                                  /***********************************/\n         %LIMIT=,                 /* DEFAULT IS 3 ENTRIES            */\n         %SCRATCH, %NOSCRAT,      /* DEFAULT IS SCRATCH              */\n                   %NOSCRATC,     /* DEFAULT IS SCRATCH              */\n         %OWNER=,                 /* OWNER-ID                        */\n         %TO=,                    /* EXPIRATION DATE YYDDD           */\n         %FOR=,                   /* RETENTION PERIOD 0 - 9999       */\n         %CATALOG=                /* CATALOG NAME/PASSWORD           */\n         ) ;\n/*********************************************************************/\n IF %SYSNLIST > 5 THEN STOP 'TOO MANY INDEX ENTRIES - MAXIMUM IS 5';\n/*********************************************************************/\n DCL %E1     INIT '';\n DCL %E2     INIT '';\n DCL %E3     INIT '';\n DCL %E4     INIT '';\n DCL %E5     INIT '';\n DCL %OPTION INIT '';\n DCL %DDCVOL INIT '';\n/*********************************************************************/\n DCL PRINTER SYSOUT %SYSOUT NODCB ;\n IF %ENTRIES > 255 THEN\n DO ;\n    SIGNAL ERROR 3,'ENTRIES=%ENTRIES:- SET TO 255' ;\n    %ENTRIES=255;\n END;\n IF %SYSTEM = 'MVT' | %SYSTEM = 'MFT' | %SYSTEM = 'VS1' |\n    %SYSTEM = 'VS2' | %VSAM   = 'NO'    THEN\n/*********************************************************************/\n/*                  NON VSAM SYSTEM CATALOGUE                        */\n/*********************************************************************/\n DO;\n    IF %ENTRIES \u00ac= '' THEN %OPTION = ',ENTRIES=%ENTRIES';\n    IF %CVOL    \u00ac= '' THEN\n    DO;\n       %DDCVOL = 'DDCVOL READS CVOLDSID';\n       DCL CVOLDSID DS NONAME VOL=%CVOL UNIT=%UNIT;\n       %OPTION = '%OPTION,CVOL=%UNIT=%CVOL';\n    END;\n    IF %NODELETE = '' THEN %OPTION = '%OPTION,DELETE';\n    IF %EMPTY   \u00ac= '' THEN %OPTION = '%OPTION,EMPTY';\n    IF %LIST(1) \u00ac= '' THEN %E1 = ' BLDG INDEX=%LIST(1)%OPTION';\n    IF %LIST(2) \u00ac= '' THEN %E2 = ' BLDG INDEX=%LIST(2)%OPTION';\n    IF %LIST(3) \u00ac= '' THEN %E3 = ' BLDG INDEX=%LIST(3)%OPTION';\n    IF %LIST(4) \u00ac= '' THEN %E4 = ' BLDG INDEX=%LIST(4)%OPTION';\n    IF %LIST(5) \u00ac= '' THEN %E5 = ' BLDG INDEX=%LIST(5)%OPTION';\n    /*****************************************************************/\n    /*           DECLARE UTILITY PROGRAM                             */\n    /*****************************************************************/\n    IF %SYSTEM    = 'OS4' THEN %UTILITY = 'JSGPROGM' ;\n                          ELSE %UTILITY = 'IEHPROGM' ;\n    DCL %UTILITY PROG      15 SECS\n                 SYSPRINT WRITES PRINTER\n                 SYSIN    READS  GDGINPUT\n                 %DDCVOL;\n END;\n/*********************************************************************/\n/*                      VSAM SYSTEM CATALOGUE                        */\n/*********************************************************************/\n ELSE\n DO ;\n    IF %LIMIT   \u00ac= '' THEN %OPTION = '%OPTION LIMIT(%LIMIT) ';\n    IF %LIMIT    = '' & %ENTRIES \u00ac= ''\n                      THEN %OPTION = '%OPTION LIMIT(%ENTRIES) ';\n    IF %CVOL    \u00ac= '' THEN SIGNAL 1,'CVOL NOT SUPPORTED FOR VSAM' ;\n    IF %EMPTY   \u00ac= '' THEN %OPTION = '%OPTION EMPTY ';\n    IF %NODELETE = '' & %NOSCRAT = '' & %NOSCRATC = ''\n                      THEN %OPTION = '%OPTION SCRATCH ';\n    IF %OWNER   \u00ac= '' THEN %OPTION = '%OPTION OWNER(%OWNER) ' ;\n    IF %FOR     \u00ac= '' THEN %OPTION = '%OPTION FOR(%FOR) ' ;\n    IF %TO      \u00ac= '' THEN %OPTION = '%OPTION TO(%TO) ' ;\n    IF %CATALOG \u00ac= '' THEN %CATALOG = 'CATALOG(%CATALOG)' ;\n    IF %LIST(1) \u00ac= '' THEN\n                %E1 = ' DEFINE GDG (NAME(%LIST(1)) %OPTION) %CATALOG';\n    IF %LIST(2) \u00ac= '' THEN\n                %E2 = ' DEFINE GDG (NAME(%LIST(2)) %OPTION) %CATALOG';\n    IF %LIST(3) \u00ac= '' THEN\n                %E3 = ' DEFINE GDG (NAME(%LIST(3)) %OPTION) %CATALOG';\n    IF %LIST(4) \u00ac= '' THEN\n                %E4 = ' DEFINE GDG (NAME(%LIST(4)) %OPTION) %CATALOG';\n    IF %LIST(5) \u00ac= '' THEN\n                %E5 = ' DEFINE GDG (NAME(%LIST(5)) %OPTION) %CATALOG';\n    /*****************************************************************/\n    /*           DECLARE UTILITY PROGRAM                             */\n    /*****************************************************************/\n    IF %SYSTEM   = 'OS4' THEN %UTILITY = 'KQCAMS' ;\n                         ELSE %UTILITY = 'IDCAMS' ;\n    DCL %UTILITY PROG      15 SECS\n                 SYSPRINT WRITES PRINTER\n                 SYSIN    READS  GDGINPUT;\n END;\n/*********************************************************************/\n DCL GDGINPUT * REPLACE;\n%E1\n%E2\n%E3\n%E4\n%E5\nEOF;\n/*********************************************************************/\n RUN %UTILITY ;\nEND ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BUILDGDG": {"ttr": 3341, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " buildgdg:macro (%vsam=NO,               /* ***** build gdg's ***** */\n  %entries=3,%cvol=,%unit=3330,%empty,%delete,   /*general keywords */\n  %limit=,%scratch,%owner=,%to=,%for=,%catalog=);  /* vsam keywords */\n\n  if %sysnlist > 5 then stop 'Too Many Entries to BuildGDG';\n  dcl %e1,%e2,%e3,%e4,%e5,%option init '';\n  dcl %ddcvol init '';\n  dcl printer printer nodcb;\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n  if %list(1) = ''   & %panels \u00ac= 'OFF'\n  then do;\n     list0001='';\n     entries =3;\n     fulltyp ='D';\n\n     panel       (ctr    'BuildGDG Command')\n                 (hi ctr '----------------')\n           ///////\n           ('        Enter Name of Index to Build   ===> ',list0001,\n                       44,'%list0001')\n           ('        Number of Entries              ===> ',entries,\n                       3,'%entries')\n           ('        Delete or Empty When Full      ===> ',fulltyp,\n                       1,'%fulltyp')\n           ('        Catalog Name (Optional)        ===> ',catalog,\n                       44,'%catalog')\n           helpline('Press F3 to Leave without Building the Index');\n chkpan:\n\n     if %syspfk = 3 then exit;\n\n     if %list(1) = ''\n     then do;\n          panel reread from list0001 'Please Enter an Index Name';\n          redo chkpan;\n     end;\n     if %entries = ''\n     then do;\n          panel reread from entries  'Please Enter Number of Files';\n          redo chkpan;\n     end;\n     if %fulltyp = '' | (%fulltyp \u00ac= 'D' & %fulltyp \u00ac='E')\n     then do;\n          panel reread from fulltyp  'Please ''D'' or ''E''';\n          redo chkpan;\n     end;\n\n     if %fulltyp = 'D' then %nodelete='';\n     if %fulltyp = 'E' then %empty 'EMPTY';\n\n\n  end;\n\n  if %entries > 255 then\n  do ;\n     signal error 3,'Entries=%entries:- set to 255' ;\n     %entries=255;\n  end;\n  if %system = 'MVT' | %system = 'MFT' | %system = 'VS1'\n   | %system = 'VS2'  then\n  do;\n     %option = ',ENTRIES=%entries';\n     if %cvol \u00ac= '' then\n     do;\n        %ddcvol = 'ddcvol reads cvoldsid';\n        dcl cvoldsid ds noname vol=%cvol unit=%unit;\n        %option='%option,CVOL=%unit=%cvol';\n     end;\n     IF %NODELETE = '' THEN %OPTION = '%OPTION,DELETE';\n     IF %EMPTY   \u00ac= '' THEN %OPTION = '%OPTION,EMPTY';\n     IF %LIST(1) \u00ac= '' THEN %E1 = ' BLDG INDEX=%LIST(1)%OPTION';\n     IF %LIST(2) \u00ac= '' THEN %E2 = ' BLDG INDEX=%LIST(2)%OPTION';\n     IF %LIST(3) \u00ac= '' THEN %E3 = ' BLDG INDEX=%LIST(3)%OPTION';\n     IF %LIST(4) \u00ac= '' THEN %E4 = ' BLDG INDEX=%LIST(4)%OPTION';\n     IF %LIST(5) \u00ac= '' THEN %E5 = ' BLDG INDEX=%LIST(5)%OPTION';\n     dcl iehprogm prog 30 k 15 secs\n     sysprint writes printer\n     sysin reads gdginput\n     %ddcvol;\n  end; /* of non vs2 | vm catalog build */\n  /* here we have a vs2 | vm catalog to build, using idcams */\n  else\n do ;\n     %VSAM = 'YES' ;\n     IF %LIMIT \u00ac= '' & %ENTRIES = '' THEN %OPTION = ' LIMIT(%LIMIT) '; 0 0870000\n     IF %LIMIT = '' & %ENTRIES \u00ac= '' THEN %OPTION = ' LIMIT(%ENTRIES) ';\n     IF %CVOL    \u00ac= '' THEN SIGNAL 1,'CVOL NOT SUPPORTED FOR VSAM' ;\n     IF %EMPTY   \u00ac= '' THEN %OPTION = '%OPTION EMPTY ';\n     IF %DELETE  \u00ac= '' THEN %OPTION = '%OPTION SCRATCH ';\n     IF %SCRATCH \u00ac= '' THEN %OPTION = '%OPTION SCRATCH ';\n     IF %OWNER   \u00ac= '' THEN %OPTION = '%OPTION OWNER(%OWNER) ' ;\n     IF %FOR     \u00ac= '' THEN %OPTION = '%OPTION FOR(%FOR) ' ;\n     IF %TO      \u00ac= '' THEN %OPTION = '%OPTION TO(%TO) ' ;\n     IF %CATALOG \u00ac= '' THEN %CATALOG = 'CATALOG(%CATALOG)' ;\n     IF %LIST(1) \u00ac= '' THEN\n        %E1 = ' DEFINE GDG (NAME(%LIST(1)) %OPTION) %CATALOG';\n     IF %LIST(2) \u00ac= '' THEN\n        %E2 = ' DEFINE GDG (NAME(%LIST(2)) %OPTION) %CATALOG';\n     IF %LIST(3) \u00ac= '' THEN\n        %E3 = ' DEFINE GDG (NAME(%LIST(3)) %OPTION) %CATALOG';\n     IF %LIST(4) \u00ac= '' THEN\n        %E4 = ' DEFINE GDG (NAME(%LIST(4)) %OPTION) %CATALOG';\n     IF %LIST(5) \u00ac= '' THEN\n        %E5 = ' DEFINE GDG (NAME(%LIST(5)) %OPTION) %CATALOG';\n     dcl idcams prog 60k 15 secs\n     sysprint writes printer\n     sysin reads gdginput;\n     dcl sysprint printer nodcb;\n  end;\n  dcl gdginput * replace;\n %E1\n %E2\n %E3\n %E4\n %E5\nEOF;\n  IF %VSAM = 'YES' THEN RUN IDCAMS ;\n  IF %VSAM = 'NO'  THEN RUN IEHPROGM ;\n END ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BUILDJOB": {"ttr": 3585, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "BUILDJOB:MACRO;\n/* Modified (substantially) by C. V. Clarke, 1991, to use\n   the Jol Data Base of Data Sets instead of using DSID's.\n*/\n       dcl %BUILDJOB init '' EXT;\n       dcl %RUNPROGS init ('') EXT;\n       DCL %JOBMEM  INIT ''  EXT;\n       DCL %TYP INIT '';\n       DCL %JOLDS INIT '%SYSPREF.JOL' ext;\n\n        %TITLE='Jol BUILDJOB - '||\n          '%DAY %MONTH %DAYNO, %YEAR - Version 5.0 ';\n\n        if %system = 'SHELL' then do;\n           panel %boxcolor box\n                /(ctr %hedcolor '%TITLE')\n           ///// (ctr 'Buildjob is not necessary for Unix or MS/DOS')\n                 (ctr 'as all Jol Scripts can run in Background')\n                 (ctr '(if the Operating System supports Background'\n                      ' Mode)')\n               / (ctr 'Please start the JOLOS Program')\n               / (ctr 'with one of the Mainframe Options')\n                 (ctr 'such as MVS, MSP, VSE or FSP');\n                 (ctr 'if you wish to use BUILDJOB.');\n      exit;\n      jolopt mvs;   /* Leave this here for now, we may add it later */\n   end;\n\n   %COUNT=1;\n /* BLDINIT INIT; /* INITIALIZE ALL PROGRAM IDS AND DSIDS */\n       DCL %JOLDS INIT '%SYSPREF.JOL';\n\n       PANEL %boxcolor box\n       /(ctr %hedcolor '%TITLE')\n       /(ctr 'Buildjob Starts Recording Instructions so that the' )\n        (ctr 'Job can be Submitted at some later time.')\n       lm 10\n     //('Please Enter a Data Set Name you wish the job to be saved in')\n       /('            Job Name/File Name  ===>',JOBMEM,8,'%JOBMEM')\n       /('            Jol Data Set Name   ===>',Jolds,44,'%$joljobs')\n        lm 1\n      //(ctr'This file will be placed in the specified file as an')\n        (ctr'.INCLUDE file.')\n       /(ctr'If it already exists, it will be replaced.')\n       helpline ('F3 Exits without Starting Buildjob.');\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n\n IF %SYSPFK = 1 | %SYSPFK=13 THEN DO;\n    REDO JOBMEM1;\n END;\n\nLABEL JOBMEM1;\n IF %JOBMEM = ''\n then do;\n      panel reread from jobmem 'You Must Enter a Member Name';\n      REDO JOBMEM1;\n end;\n IF %JOlds = ''\n then do;\n      panel reread from jolds 'You Must Enter a Data Set Name';\n      REDO JOBMEM1;\n end;\n\n /* if index(jobmem,'.') = 0 then jobmem='%jobmem.job'; */\n\n    ALLOC FILE($CODE) DA('%jolds(%jobmem)') shr;\n    OPEN FILE($CODE) OUTPUT;\n\n    BUILDJOB='YES';\n\n\n write f($code) from(\n          '/*  This Job was Built Using Jol BUILDJOB Command on');\n write f($code) from(\n          '    %DAY, %MONTH %DAYNO,%YEAR  */ ');\n\n    $job;      /* BUILD A JOBCARD */\n\n write f($code) from(' ');\n write f($code) from('   /*    Code for Program Execution  */ ');\n write f($code) from(' ');\n\nexit;\n    BLD01AL;   /* OPEN THREE FILES TO STACK */\n\n    BLDGETPM;  /* Find out what programs have to run.\n                  A string called RUNPROGS is set up with\n                  the programs that have to run.  Each entry\n                  is 9 characters long (a blank is at the end).*/\n\n   %MAINCNT=1;\n\nLABEL CHECKPG;\n   %INC='YES';\n    THISPROG=substr(runprogs,%maincnt,9);\n    IF %THISPROG\u00ac=''\n    THEN DO;\n          BLDCHPGM %THISPROG;\n                        /* CHECK THE EXISTANCE OF THE PROGRAM */\n                        /* and REGISTER it if necessary.      */\n\n          %MAINCNT=%MAINCNT+9;\n          REDO CHECKPG;\n    END;\n\n   %MAINCNT=-8;\nLABEL MAIN;\n   %MAINCNT=%MAINCNT+9;\n   %INC='YES';\n   THISPROG=substr(runprogs,%maincnt,9);\n   IF %THISPROG \u00ac=''\n   THEN DO;\n/*\n       f1='';\n       f2='';\n       f3='';\n       f4='';\n       f5='';\n       f6='';\n       f7='';\n       f8='';\n       f9='';\n       f10='';\n       f11='';\n       f12='';\n       f13='';\n       f14='';\n       f15='';\n*/\n\n       PANEL\n        / (ctr %hedcolor\n              'Please enter Details for Program 'hi' %THISPROG:')\n        // ('       Run %THISPROG If    ===>',COND,40,'MAXCC=0')\n                 ;\n       if %cond \u00ac=''\n       then do;\n           BLD04P '   If %cond';\n           BLD04P '   Then Do;';\n       end;\n\n       IF %THISPROG='SORT'     THEN DO; SORT;     %INC='NO'; END;\n       IF %THISPROG='MERGE'    THEN DO; MERGE;    %INC='NO'; END;\n       IF %THISPROG='COPY'     THEN DO; COPY;     %INC='NO'; END;\n       IF %THISPROG='PRINT'    THEN DO; PRINT;    %INC='NO'; END;\n       IF %THISPROG='COMPRESS' THEN DO; COMPRESS; %INC='NO'; END;\n\n       IF %INC\u00ac='NO'\n       then do;\n          %PGMNAME=%THISPROG;\n          %syspfk=0;\n          exec %THISPROG;/* PROGRAM MUST BE REGISTERED */\n       end;\n\n       if %cond \u00ac=''\n       then do;\n           BLD04P '   End;';\n       end;\n       %syspfk=0;\n\n       REDO MAIN;\n       IF %PGMNAME=''\n       THEN DO;\n        /* COULDN'T GET PROGRAM DETAILS */\n        /* BECAUSE IT WASN'T REGISTERED */\n        PANEL %boxcolor box\n              ('            Program %THISPROG is not REGISTERed.')\n            / ('            Your job has been terminated ABNORMALLY.')\n            / ('            END OF JOB Processing will now take place.')\n              ('            You will have the option of saving your')\n              ('            %JOBMEM Jol Program.')\n          ////('            Please press Enter to continue',ANS,1);\n               BLDENDJ ENDJOB JOLDS=%JOLDS SAVEIN=%JOBMEM ;\n               exit;\n       END;\n  /*** HERE THE PROGRAM WAS REGISTERED AND WE HAVE ITS DETAILS ***/\n\n   END;\n\nLABEL INC1;\n\n\nchkp1:\n\nno2nd:\nIF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n/********************************************\n *                                          *\n *   HERE IS WHERE WE USE THE BUILD ADD     *\n *   MACRO TO ADD THE DSIDS ETC TO TABLES   *\n *                                          *\n ********************************************/\n\n\n /* RESET THE VARIABLES USED TO NULLS FOR THE NEXT PROGRAM */\n/* fix\n %EXEC1=''; %EXEC2=''; %EXEC3=''; %EXEC4='';\n\n %I1='' ; %I2='' ; %I3='' ; %I4='' ; %I5='' ; %I6='' ; %I7='';\n %I8='' ; %I9='' ; %I10=''; %I11=''; %I12=''; %I13=''; %I14='';\n %I15='';\n*/\n /* END OF RESET VARIABLES */\n\n     IF %THISPROG\u00ac='' THEN   /* NO MORE  PROGRAMS ? */\n     REDO MAIN;\n/*  END; / * IF PROGRAM\u00ac='' */\n       bldendj endjob jolds=%jolds savein=%jobmem ;\n       %BUILDJOB = '';                /* Get EXEC etc to operate as\n                                         normal again */\nend /* of buildjob macro */ ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAACOMER": {"ttr": 3589, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAACOMER : MACRO;\n  dcl %qframe init 0;\n  dcl %#1,%32,%#3,%#4 init '';\n\n if syspfk=3 | syspfk=15 then exit;\n\n  pan005:\n           remark='Excellent !';\n  caaqus   'Print a message on the jobs system log but not on'\n           'the Operator''s console. '\n           'Assume %%%%MESSAGE='' MESSAGE ''.'\n           ucans='DISPLAY ''%%%%MESSAGE'';'\n           remark='Good !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto pan005;\n\n  pan010:\n  caaqus   'Print a message on the jobs system log but not on'\n           'the Operator''s console. However, terminate the job.'\n           'Assume %%%%MESSAGE='' MESSAGE ''.'\n           ucans='RETURN ''%%%%MESSAGE'';'\n           remark='Good !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto pan005;\n\n  pan015:\n\n  caaqus   'Stop the job, but DO write a message to the'\n           'Operator.  Use the message in %%%%MESSAGE as'\n           'previously.  Assume %%%%MESSAGE='' MESSAGE ''.'\n           ucans='STOP ''%%%%MESSAGE'';'\n           remark='Good !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto pan010;\n\n  pan020:\n\n  caaqus   'How would you automatically stop you job when'\n           'any program returns a condition code of 16, or'\n           'greater than 200 ?'\n           ucans='STOP WHEN ANY=16 | ANY>200;'\n           remark='Excellent !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto pan015;\n\n  pan025:\n  caaqus   'Show that a minor error has occurred in your'\n           'Jol program.'\n           ucans='SIGNAL ERROR 2 ''MINOR ERROR OCCURRED''; '\n           remark='Excellent !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto pan010;\n\n  pan030:\n  caaqus   'Write a simple message to the Terminal.'\n           ucans='WRITE ''THIS IS A SIMPLE MESSAGE'';'\n           remark='Excellent !';\n END; /* OF CAACOMER MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAADISP": {"ttr": 3591, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAADISP : MACRO;\n  dcl %bright init '-|1m';\n  dcl %low    init '-|2m';\n  dcl %qframe init 0;\n  dcl %#1,%32,%#3,%#4 init '';\n  dcl %remark init '';\n\n if syspfk=3 | syspfk=15 THEN EXIT;\npan001:\n   caaqus  'Enter the instructions to SCRATCH the Data Set'\n           'called MY.DATA from volume WORK02, UNIT 3330'\n           ucans='SCRATCH MY.DATA ON VOL WORK02 UNIT 3330;'\n           remark='Excellent !';\n\n if syspfk=7 | syspfk=19 THEN REDO PAN001;\n if syspfk=3 | syspfk=15 THEN EXIT;\n\npan005:\n   caaqus  'Enter the instructions to CATALOG the Data Set'\n           'called MY.DATA on volume WORK02, UNIT 3330'\n           ucans='CATALOG MY.DATA ON VOL WORK02 UNIT 3330;'\n           remark='Excellent !';\n\n if syspfk=7 | syspfk=19 THEN REDO PAN001;\n if syspfk=3 | syspfk=15 THEN EXIT;\n\npan010:\n   caaqus  'What Jol instruction should you use to dispose'\n           'of a data set, knowing that it is not Cataloged?'\n           ucans='SCRATCH'\n           remark='Good.';\n\n if syspfk=7 | syspfk=19 THEN REDO PAN005;\n if syspfk=3 | syspfk=15 THEN EXIT;\n\npan015:\n   caaqus  'What Jol instruction should you use to dispose'\n           'data set, knowing that it IS Cataloged?'\n           ucans='DELETE'\n           remark='Good.';\n\n if syspfk=7 | syspfk=19 THEN REDO PAN010;\n if syspfk=3 | syspfk=15 THEN EXIT;\n\npan020:\n   caaqus  'How would you Delete the Data Set called MY.DATA'\n           'from the System Catalog only. '\n           ucans='UNCATLG MY.DATA'\n           remark='Good Work!';\n\n if syspfk=7 | syspfk=19 THEN REDO PAN015;\n if syspfk=3 | syspfk=15 THEN EXIT;\n\npan025:\n   caaqus  'Now, how would you remove the Data Set called'\n           'MY.DATA entirely from the System?'\n           ucans='SCRATCH MY.DATA -'\n           ans2=' (since it\"s already been Uncataloged in the last'\n           ans3=' question - otherwise use DELETE MY.DATA;).'\n           remark='Good Work!';\n\n if syspfk=7 | syspfk=19 THEN REDO PAN020;\n\n    %COMNUM = %COMNUM + 1;\n    if %COMNUM > %MAXCOM THEN DO;\n    PANEL ////(' This was the LAST command of this chapter')\n         /(' Press ENTER to return to the chapter index/menu.',X,1);\n    %COMNUM = 1;\n    syspfk = 3;\n    END;\n END; /* OF CAALOGIC MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAADSMAN": {"ttr": 3593, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAADSMAN : MACRO;\n  dcl %qframe init 0;\n  dcl %#1,%32,%#3,%#4 init '';\n\n if syspfk=3 | syspfk=15 then exit;\n\n  LABEL PAN005;\n    caaqus 'Sort ORIGINAL.DATA to SORTED.DATA alphabetically.'\n           'The KEY length is 7, starting at position 5.'\n           'If the record is \"xxxxNY11530\", the key is NY11530.'\n           ucans = 'SORT ORIGINAL.DATA TO SORTED.DATA '\n           ans2 = '                  FIELDS = (5,7,CH,A); '\n           remark='Excellent !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN005;\n\n  LABEL PAN010;\n   caaqus  'Build an Index in the catalog for Generation Data'\n           'Set called MY.SET, with a maximum of 10 entries.'\n           'Delete the oldest data set when 10 have been created.'\n           ucans = 'BUILDGDG MY.SET ENTRIES 10; '\n           remark='Excellent !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN005;\n\n  LABEL PAN015;\n\n   caaqus  'Reclaim all Unused Space in the System Library'\n           'called SYS2.MACLIB.  '\n           ucans = 'COMPRESS SYS2.MACLIB;'\n           remark='Good !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN010;\n\n  LABEL PAN020;\n\n   caaqus  'Copy the Library SYS2.MACLIB to a disk called'\n           'called REPLACing information which may already'\n           'be in the data set.'\n           ucans = 'COPY SYS2.MACLIB TO DISKONE PDS'\n           ans2 = '                 OLD REPLACE;'\n           remark='Good !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN015;\n\n  LABEL PAN025;\n\n  caaqus   'List all the CATALOG ENTRIES starting'\n           'with \"CONTROL\".'\n           ucans = 'LISTCAT LEVEL CONTROL;'\n           remark='Good !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN020;\n\n  LABEL PAN030;\n   caaqus  'List the data set PAYROLL.TEST in its entirety in'\n           'character format and hexadecimal.'\n           ucans = 'LIST PAYROLL.TEST DUMP;'\n           ans2  = '          or LIST PAYROLL.TEST CHAR & HEX;'\n           remark='Good !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN025;\n\n  LABEL PAN035;\n   caaqus  'Merge two data sets DSONE and DSTWO respectively to'\n           'a new data set called DSTHREE; the parameters for'\n           'MERGE are in the data set called PARMMRG.'\n           ucans = 'MERGE DSONE & DSTWO TO DSTHREE'\n           ans2 =  '                  USING PARMMRG;'\n           remark='Excellent !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN030;\n\n  LABEL PAN040;\n   caaqus  'Print the data set called INMASTER.'\n           ucans = 'PRINT INMASTER;'\n           remark='Excellent !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN030;\n\n  LABEL PAN045;\n   caaqus  'Compare two Libraries called LIBONE and LIBTWO'\n           'respectively and note the differences between them.'\n           ucans = 'COMPARE LIBONE WITH LIBTWO PDS;'\n           remark='Excellent !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN035;\n\n  LABEL PAN050;\n  caaqus   'Dump the contents of Disk Volume \"DISK01\" to Tape.'\n           ucans = 'DUMPVOL DISK01;'\n           remark='Good Work !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN040;\n\n  LABEL PAN055;\n/* caaqus  'What is the Data Set Name of the backup ?'\n           ucans = 'JOL.BACKUP.OFDISK01(+1)'\n           remark='Good Work !';*/\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN045;\n\n  LABEL PAN060;\n  caaqus   'Now, Restore that tape backup to \"DISK01\".'\n           '(SAME VOLUME)'\n           ucans = 'LOADVOL DISK01;'\n           remark='Good Work !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN050;\n\n  LABEL PAN065;\n  caaqus   'Append more data to the already existing data set'\n           'called XYZ.  The data to be appended is in the data'\n           'set called ABC.'\n           ucans = 'EXTEND XYZ WITH ABC;'\n           remark='Good Work !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN060;\n\n  LABEL PAN070;\n  caaqus   'Find out if a data set called PAYROLL.UPDATE exists'\n           'with the use of the TEXIST instruction.'\n           ucans = 'TEST: TEXIST PAYROLL.UPDATE;'\n           ans2 = '             IF TEST = 0 THEN ...   '\n           remark='Excellent !';\n\n if syspfk=3 | syspfk=15 then exit;\n if syspfk=7 | syspfk=19 then goto PAN065;\n\n  LABEL PAN075;\n   caaqus  'You have just created a new data set called NEW.SET'\n           'in your Jol program.  Free it so other Users can'\n           'access it before your job ends.'\n           ucans = 'FREE NEW.SET;'\n           remark='Excellent !';\n\n if syspfk=7 | syspfk=19 then goto PAN070;\n\n   %COM$NUM = %COM$NUM + 1;\n   IF %COM$NUM > %MAX$COM THEN DO;\n       PANEL ////(' This was the LAST command of this chapter')\n       /(' Press ENTER to get back to chapter index/menu.',X,1);\n       %COM$NUM = 1;\n       syspfk = 3;\n   END;\n END; /* OF CAADSMAN MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAAJOBPR": {"ttr": 3841, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAAJOBPR : MACRO;\n  dcl %qframe init 0;\n  dcl %#1,%32,%#3,%#4 init '';\n\n IF syspfk=3 | syspfk=15 then exit;\n\npan005:\n   caaqus  'In your Jol library you have a member containing'\n           'tested Jol Source Code. The member is called JOLSTAT.'\n           'Show how to include the source code in your programs.'\n           ucans='INCLUDE JOLSTAT;'\n           remark='Excellent !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN005;\n\npan010:\n   caaqus  'Submit a Dependant job called NEXTJOB within your'\n           'Jol program. That is, put \"NEXTJOB\" on'\n           'the System Queue.'\n           ucans='SUBMIT NEXTJOB;'\n           remark='Good Work !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN005;\n\npan015:\n   caaqus  'You have a Private Library called TEST.LOAD that'\n           'you want to use in your job, instead of the System'\n           'Library.  Show how to do this.'\n           ucans='JOBLIB TEST.LOAD'\n           ans2 ='              or you could use a STEPLIB in'\n           ans3 ='              your program declaration.'\n           remark='Good Work !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN010;\n\npan020:\n   caaqus  'Inform the Operator that your job requires volume'\n           'called TAPE09 to be mounted and place your job on'\n           'HOLD until it is released by the Operator.'\n           ucans='SETUP (TAPE09);'\n           remark='Good !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN015;\n\npan025:\n   caaqus  'Use the STARTAT and STOPAT instructions to execute'\n           'your Jol program between Labels \"RECOVER\" and'\n           '\"ENDRECOV\".'\n           ucans='STARTAT RECOVER;'\n           remark='Excellent !';\n           ans2='              STOPAT ENDRECOV;';\n   %COM@NUM = %COM@NUM + 1;\n   IF %COM@NUM > %MAX@COM THEN DO;\n      PANEL ////(' This was the LAST command of this chapter')\n       /(' Press ENTER to get back to chapter index/menu.',X,1);\n      %COM@NUM = 1;\n      syspfk = 3;\n   END;\n END; /* OF CAAJOBPR MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAALOGIC": {"ttr": 3843, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAALOGIC : MACRO;\n  dcl %bright init '-|1m';\n  dcl %low    init '-|2m';\n  dcl %qframe init 0;\n  dcl %#1,%32,%#3,%#4 init '';\n  dcl %remark init '';\n\n IF syspfk=3 | syspfk=15 then exit;\npan005:\n   caaqus  'Catalog the Data Set \"MY.DATA\" if Symbolic Variable'\n           '%%%%A is equal to \"YES\" and Program VALIDATE returned'\n           'a Condition Code less than or equal to 8.'\n           ucans='IF %%%%A = ''YES'' & VALIDATE <= 8'\n           ans2 = '            THEN  CATALOG MY.DATA; ';\n           remark='Good Work!';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN005;\n\npan010:\n   caaqus  'What instruction would you add to the example'\n           'above to stop the job if Program VALIDATE a value'\n           'greater than 8.'\n           ucans='ELSE STOP ''ERROR OCCURRED'';'\n           remark='Good Work!';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN005;\n\n\npan015:\n   caaqus  'Assume that label REPEAT has been defined.'\n           'Write code to loop to REPEAT if %%%%VAR is equal to'\n           '\"REPEAT\".'\n           ucans= 'IF %%%%VAR = ''''REPEAT'''' THEN GOTO REPEAT;'\n           remark='Excellent!';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN010;\n\npan020:\n   caaqus  'If a Program called VALIDATE returned a condition'\n           'code equal to zero, SORT the Data Set \"SORT.DATA\".'\n           '(Use SORT SORT.DATA TO SORTED.DATA; in your answer)'\n           ucans= 'IF VALIDATE = 0 THEN DO;'\n           ans2 = '              SORT SORT.DATA TO SORTED.DATA ETC.. ; '\n           ans3 = '            END;  '\n           remark='Excellent!';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN015;\n\npan025:\n   caaqus  'Test if a Symbolic Variable %%%%TEST'\n           'has been Declared.'\n           ucans= 'IF %%%%TEST THEN ...  ;'\n           remark='Excellent!';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN020;\n\npan030:\n   caaqus  'What is the maximum number of nested \"DO; END;\"'\n           'blocks ?'\n           ucans= '8'\n           remark='Good.';\n\n IF syspfk=7 | syspfk=19 then goto PAN025;\n END; /* OF CAALOGIC MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAAQUS": {"ttr": 3845, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAAQUS : MACRO(%ucans=,%ans2=,%ans3=,%remark=);\n  dcl %input,%ans  init '';\n  if %sysnlist>0 then %#1='%list(1)';\n  if %sysnlist>1 then %#2='%list(2)'; else %#2='';\n  if %sysnlist>2 then %#3='%list(3)'; else %#3='';\n  if %sysnlist>3 then %#4='%list(4)'; else %#4='';\n   if %qframe=0 then panel nowait;\n   PANEL    nocls nowait\n  ('    --------------------------------------------------------------')\n  ('    -                                                            -')\n  ('    -   Question:                                                -')\n  ('    -                                                            -')\n  ('    -                                                            -')\n  ('    -                                                            -')\n  ('    -                                                            -')\n  ('    --------------------------------------------------------------')\n  /\n  ('    --------------------------------------------------------------')\n  ('    -                                                            -')\n  ('    -   Please Type in Your Answer:                              -')\n  ('    -                                                            -')\n  ('    -                                                            -')\n  ('    -                                                            -')\n  ('    -                                                            -')\n  ('    -                                                            -')\n  ('    -                                                            -')\n  ('    -                                                            -')\n  ('    -                                                            -')\n  ('    -                                                            -')\n  ('    --------------------------------------------------------------')\n  ;\n   %qframe=1;\n   PANEL nocls    ////\n  ('    -       %#1')\n  ('    -       %#2')\n  ('    -       %#3')\n  //////\n  ('    - ===>',input,54,'');\n   IF %input=%ucans\n   then PANEL  nocls   /////////////////\n  ('    -   ' hi '- %remark');\n   else PANEL  nocls   /////////////////\n  ('    -   You can use 'hi '%ucans')\n  ('    -  ' hi '%ans2')\n  ('    -  ' hi '%ans3');\n END; /* OF QUESTION MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAARUN": {"ttr": 3847, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAARUN : MACRO;\n  dcl %qframe init 0;\n  dcl %#1,%32,%#3,%#4 init '';\n  dcl %remark init '';\n\n IF syspfk=3 | syspfk=15 then exit;\n  LABEL PAN005;\n   caaqus  'You have a member of a Data Set that you want'\n           'to compile with the COBOL Compiler.'\n           'The member is called UPDATE in MY.SOURCE.'\n           ucans= 'COBOL MY.SOURCE(UPDATE);'\n           remark='Excellent !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN005;\n\n  LABEL PAN010;\n   caaqus  'Now LINK EDIT the resulting Object Code'\n           'to a Load Module Library called MY.LOAD.'\n           ucans='LINK OBJ LOAD MY.LOAD(UPDATE) COBLIB;'\n           remark='Excellent !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN005;\n\n  LABEL PAN015;\n   caaqus  'What sequence of instructions/commands would you'\n           'use to run that program ?'\n           ucans='DECLARE UPDATE PROG reads,writes, etc. ; '\n           ans2= '             RUN PROGSRC; '\n           remark='Excellent !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN010;\n\n  LABEL PAN020;\n  caaqus   'How would you compile VALIDATE with PL/I'\n           'and place the object code in OBJPLI ?'\n           ucans= 'PLI MY.SOURCE(VALIDATE) OBJ=OBJPLI; '\n           remark='Good Work !';\n\n IF syspfk=7 | syspfk=19 then goto PAN015;\n\n END; /* OF CAARUN MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAASYMB": {"ttr": 3849, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAASYMB : MACRO;\n  dcl %qframe init 0;\n  dcl %#1,%32,%#3,%#4 init '';\n  dcl %remark init '';\n\n IF syspfk=3 | syspfk=15 then exit;\n\npan005:\n    caaqus 'Declare Symbolic Variables A,B,C and Initialize'\n           'them all to null strings (Use only ONE line of code).'\n           ucans= 'DECLARE %%A,%%B,%%C INIT \";'\n           remark='Excellent !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN005;\n\npan010:\n\n    caaqus 'Assign a String ''STEP100'' to %%RESTART.'\n           ucans='%%RESTART=''STEP100''; '\n           remark='Excellent !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN005;\n\npan015:\n   caaqus  'Set %%RR to the position of the first ''LL'''\n           '(DOUBLE L) in a Symbolic Variable.'\n           'Assume %%SYMBOLIC contains \"HELLO\".'\n           ucans= '%%R=INDEX(SYMBOLIC,''LL'');'\n           remark='Excellent !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN010;\n\npan020:\npan025:\n   caaqus  'Now extract the ''LL'' and place it %%B'\n           ucans='%%B=SUBSTR(A,%%R,2);'\n           remark='Excellent !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN020;\n\npan030:\n\n   caaqus  'Find the LENGTH of the contents of %%A,'\n           'and store the result result in %%R2.'\n           ucans='%%R2=LENGTH(A);'\n           remark='Excellent !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN025;\n\npan035:\n\n  caaqus   'Assuming %%A contained ''HELLO'', what is the'\n           'result of the previous instruction ?'\n           ucans='%%R2=LENGTH(A);  It will return 5.'\n           remark='Excellent !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN030;\n\npan040:\n\n  caaqus   'What is the TYPE of %%A ?'\n           ucans='%%B=TYPE(A); It will return LIT.'\n           remark='Excellent !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN035;\n\npan045:\n\n  caaqus   'Write a Jol instruction to determine the TYPE of'\n           '%%A and store the result in %%C.'\n           ucans='%%C=TYPE(A);'\n           remark='Good Work !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN040;\n\npan050:\n\n  caaqus   'Assume %%X is Declared and Initialized'\n           'to Zero. Write an instruction to add 7 to it.'\n           ucans='%%X=%%X+7;'\n           remark='Good Work !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN045;\n\npan055:\n\n  caaqus   'What is the result of %%X = %%X / 3; ?'\n           ucans='%%X=%%X/3; the result is 2.'\n           ans2=' All arithmetic is performed in integers and the'\n           ans3=' results are truncated, so 7 divided by 3 is 2.'\n           remark='Good Work !';\n\n IF syspfk=3 | syspfk=15 then exit;\n IF syspfk=7 | syspfk=19 then goto PAN050;\n\n\n END; /* OF CAASYMB MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIBGDG": {"ttr": 3852, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIBGDG : MACRO;\n  if syspfk=3 | syspfk=15 then exit;\n pan005:\n  PANEL blue box /\n(ctr hi '----  BUILDGDG command  ----')\n/\n('       The BUILGDG COMMAND is used to create an index in the')\n('       catalog for Generation Data Sets. Options specify how many')\n('       data sets are to be left, what is to happen to any data')\n('       sets after the specified maximum have been cataloged.')\n/(hi'       Format:  BUILDGDG   index |,index ...?  options;')\n/(hi'       Generation Data Sets :')\n/\n('       A Generation Data Set is one of a collection of successive,')\n('       historically related, cataloged data sets known as')\n('       Generation Data Groups (GDG). Whenever a data set belonging')\n('       to the group is created or cataloged, its name, volume')\n('       and position(if on TAPE) is appended to the list of')\n('       existing data sets in that group. Thus, the data  sets are')\n('       kept in chronological order. Each data set may be retrieved')\n('       individually or altogether as a group.')\n%helpline;\n\n  if syspfk=3 | syspfk=15 then exit;\n  if syspfk=7 | syspfk=19 then goto pan005;\npan010:\n  PANEL blue box/(ctr hi '----  BUILDGDG command  ----')\n/\n('       Before any generation data  set may be cataloged, a special')\n('       index must be built in the catalog. This index tells the' )\n('       system the maximum number of data sets allowed in the group')\n('       and what is to happen to existing data sets if that maximum')\n('       is exceeded.')\n/'       Examples:'\n/('       1. 'hi'BUILDGDG SALES.MASTER ENTRIES 15;')\n/('       BUILDGDG command will create an index that will allow no')\n ('       more than 15 SALES.MASTER GDS. When 15 data sets have been')\n ('       created the OLDEST WILL BE DELETED.')\n%helpline;\n  if syspfk=3 | syspfk=15 then exit;\n  if syspfk=7 | syspfk=19 then goto pan005;\npan015:\n  PANEL blue box / ctr '----  BUILDGDG command  ----'\n/'       Examples:'\n/('       2. 'hi'BUILDGDG TEST.INPUT TEST.OUTPUT NODELETE;')\n/('       The BUILDGDG will create TWO indexes for the maximum of'  )\n('       THREE(3) data sets (since we have NOT specified ENTRIES'   )\n('       option, the DEFAULT of 3 takes effect) in the groups'      )\n('       TEST.INPUT and TEST.OUTPUT. Old data  sets will be'        )\n('       UNCATALOGed but NOT DELETEd when this limit of (3) has'    )\n('       been exceeded (since we specified NODELETE option).')\n%helpline;\n  if syspfk=7 | syspfk=19 then goto pan010;\n  if syspfk=3 | syspfk=15 then exit;\n   COM$NUM=COM$NUM + 1;\n   if COM$NUM > MAX$COM then DO;\n PANEL box ///////(ctr ' This is the end of this section.'\n       /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n      COM$NUM=1;\n      syspfk=3;\n      syspfk=15;\n   END;\n END; /* OF CAIBGDG MACRO */\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIBILDA": {"ttr": 3854, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x83\\x02O\\x00\\x83\\x02\\x7f\\x158\\x00\\x0c\\x00\\x08\\x00\\x0c\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1983-01-24T00:00:00", "modifydate": "1983-01-27T15:38:00", "lines": 12, "newlines": 8, "modlines": 12, "user": "JOL"}, "text": "CAIBILDA: MACRO;\n       PANEL ('CAIJOL - BUILDJOB')\n   ('***************************************************************')\n///(' ENTER THE MEMBER NAME YOU WISH THE JOB TO BE SAVED IN',JOB,1)\n  /(' IN DATA SET ',JOLDS,44,'%JOLDS')\n //(' THIS MEMBER NAME WILL BE PLACED IN YOUR JOL DATA SET, IF IT')\n   (' ALREADY EXISTS IT WILL BE REPLACED ')\n //(' PRESS ENTER FOR NEXT TOPIC OR PFK3/12 TO EXIT ',X,1)\n   ('***************************************************************');\n    IF %SYSPFK=3 & %SYSPFK=12 THEN EXIT;\n      END;\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILDB": {"ttr": 3856, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x83\\x02O\\x00\\x83\\x02\\x7f\\x15C\\x00\\x14\\x00\\x12\\x00\\x10\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1983-01-24T00:00:00", "modifydate": "1983-01-27T15:43:00", "lines": 20, "newlines": 18, "modlines": 16, "user": "JOL"}, "text": " CAIBILDB: MACRO;\n  PANEL ('     CAIJOL - BUILDJOB  ')\n  /('***************************************************************')\n   ('ENTER THE NAMES OF THE PROGRAMS YOU WISH TO RUN, IN ORDER')\n   ('ALL PROGRAMS MUST BE REGISTERED EXECPT FOR COPY, SORT AND PRINT.')\n  /('YOU MAY HAVE UP TO 50 DIFFERENT DATA SET NAMES AND PROGRAMS')\n   ('AS WELL AS 10 DIFFERENT PRINTER DEFINITIONS.')\n  /('                                             PROGRAM  NAMES')\n /(' *************************************  PROGRAM 1 =>',A,6,'PROG1')\n  (' * YOU MUST HAVE THE PROGRAM         *  PROGRAM 2 =>',B,6,'SORT')\n  (' * REGISTERED OR USE                 *  PROGRAM 3 =>',C,6,'COPY')\n  (' * COPY, SORT, PRINT OR COMPRESS     *  PROGRAM 4 =>',D,6,'PRINT')\n  (' *                                   *  PROGRAM 5 =>')\n  (' *                                   *  PROGRAM 6 =>')\n  (' *                                   *  PROGRAM 7 =>')\n  (' *                                   *  PROGRAM 8 =>')\n//(' PRESS ENTER TO MOVE TO NEXT TOPIC')\n  (' OR PFK3/12 TO EXIT',X,1);\n   IF %SYSPFK=3 | %SYSPFK=12 THEN EXIT;\n   END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILDC": {"ttr": 3858, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x83\\x02O\\x00\\x83\\x02\\x7f\\x15\\x16\\x00\\x14\\x00\\x0c\\x00\\n\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1983-01-24T00:00:00", "modifydate": "1983-01-27T15:16:00", "lines": 20, "newlines": 12, "modlines": 10, "user": "JOL"}, "text": "CAIBILDC: MACRO;\nDCL %JOBNAME INIT '%SYSUID';\n PANEL ('                      CAIJOL - BUILDJOB')\n       ('*************************************************************')\n      /('                      STANDARD JOB CARD     ')\n       ('          ENTER JOBNAME.       ===>',JOLNAME,8,'%JOBNAME')\n       ('          ENTER ACCOUNT        ===>',ACCNT,5,'00000')\n       ('          ENTER PROGR NAME     ===>',PGNAME,10,'%SYSUID')\n       ('          ENTER JOB CLASS      ===>',CLASS,1,'A')\n       ('          ENTER MSGCLASS       ===>',MSGCLASS,1,'X')\n       ('          ENTER USER           ===>',USER,8,'%SYSUID')\n       ('          ENTER PASSWORD       ===>',PASS,8,'????????')\n       ('          ENTER MSGLEVEL       ===>',MSGLV,3,'1,1')\n       ('          ENTER PRIORITY       ===>',PRTY,2,'03')\n       ('          ENTER NOTIFY ID.     ===>',NOTY,8,'%SYSUID')\n       ('*************************************************************')\n     //(' PRESS ENTER TO MOVE TO NEXT TOPIC')\n       (' OR PFK3/12 TO END',X,1);\n     IF %SYSPFK=3 | %SYSPFK=12 THEN EXIT;\n     END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILDD": {"ttr": 3860, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x83\\x02_\\x00\\x83\\x02\\x7f\\x15\\x17\\x00\\x11\\x00\\x0c\\x00\\x0f\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1983-01-25T00:00:00", "modifydate": "1983-01-27T15:17:00", "lines": 17, "newlines": 12, "modlines": 15, "user": "JOL"}, "text": " CAIBILDD: MACRO;\n    PANEL ('               CAIJOL - BUILDJOB                      ')\n     ('******************************************************')\n          ('PLEASE ENTER THE DSIDS OR DATA SETS FOR EXAMPLE.PGM :-')\n          (' (YOU MAY USE PRINTER OR SYSOUT FOR THE WRITES) ')\n            / ('EXECUTE IF ',COND,40,'MAXCC=0')\n            / ('FROM LOAD LIBRARY=> ',LOAD,44,'%SYSUID.LOAD')\n            / ('USING PARAMETER  =>  ',PARM,100)\n            / ('INPUT1 READS     =>',A,8,'MY.DATA1')\n              ('INPUT2 READS     =>',B,8,'MY.DATA2')\n              ('OUTPUT1 WRITES   =>',C,8,'MY.OUT1')\n              ('OUTPUT2 WRITES   =>',D,8,'MY.OUT2')\n     ('******************************************************')\n           // ('PRESS ENTER FOR NEXT TOPIC')\n              ('OR PFK3/12 TO END',X,1);\n            IF %SYSPFK=3 | %SYSPFK=12 THEN EXIT;\n            END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILDE": {"ttr": 4097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x83\\x02_\\x00\\x83\\x02\\x7f\\x15&\\x00\\x1b\\x00\\x16\\x00\\x17\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1983-01-25T00:00:00", "modifydate": "1983-01-27T15:26:00", "lines": 27, "newlines": 22, "modlines": 23, "user": "JOL"}, "text": " CAIBILDE: MACRO;\n DCL %DISS  INIT 'OUTPUT';\n DCL %DISP  INIT 'NEW';\n DCL %DATA1 INIT 'MY.OUT1';\nPANEL ('    CAIJOL - BUILDJOB    ')\n  (' - BUILD DATA SET INFORMATION - PRESS PFK 1 FOR HELP')\n  ('DATA SET *** %DATA1   *** IS BEING USED FOR %DISS  ')\n  ('PLEASE FILL IN THE FOLLOWING INFORMATION FOR THIS %DISP DATA SET')\n  ('LIKE AN EARLIER')\n  ('     DATA SET NAME    ===>',LIKE,44)\n  ('RECORD FORMAT         ===>',RFORM,13,'FB,VB ETC')\n  ('RECORD LENGTH         ===>',RECLEN,5,'80')\n  ('BLOCK LENGTH          ===>',BLKSIZE,5,'800')\n  ('1ST EXTENT            ===>',FIRST,15,'PRIMARY SPACE')\n  ('2ND EXTENT            ===>',SECOND,15,'SECONDARY SPACE')\n  ('TRACKS CYLS OR BLOCKS ===>',SPACE,6,'CYLS')\n  ('VOLUME                ===>',VOL,20,'VOLUME SER-NO')\n  ('DATASET REFERENCE     ===>',VOLREF,44,'REFER BACK TO ANOTHER DSN')\n  ('UNIT                  ===>',UNIT,18,'3330, 3350 ETC')\n  ('RETENTION             ===>',RETPD,16,'RETENTION PERIOD')\n  ('FILE NUMBER           ===>',FILENO,13,'1,2 ETC')\n  ('DSORG                 ===>',DSORG,14,'PS,PO ETC')\n  ('OPTCD                 ===>',OPTCD,4)\n  ('PROTECT (Y OR N)      ===>',PROTECT,1'N')\n /('PRESS ENTER FOR NEW TOPIC')\n  ('OR PFK3/12 TO END',X,1); IF %SYSPFK=3 | %SYSPFK=12 THEN EXIT;\n END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILDF": {"ttr": 4099, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x83\\x02_\\x00\\x83\\x02\\x7f\\x159\\x00\\x15\\x00\\x10\\x00\\x0f\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1983-01-25T00:00:00", "modifydate": "1983-01-27T15:39:00", "lines": 21, "newlines": 16, "modlines": 15, "user": "JOL"}, "text": "CAIBILDF: MACRO;\n   PANEL ('  CAIJOL - BUILDJOB   ')\n   ('***************************************************************')\n   ('IF MAXCC=0 DO YOU WANT TO CATALOG/DELETE KEEP, SCRATCH OR PRINT')\n   ('ANY OF THESE FILES ?')\n   ('PLACE A \"C\" \"D\" OR A \"P\" NEXT TO THE FILE')\n   ('MY.DATA1=> ',A1,1'C')\n   ('MY.DATA2=> ',A2,1'C')\n   ('        => ',A3,1)\n   ('        => ',A4,1)\n   ('        => ',A5,1)\n   ('        => ',A6,1)\n   ('        => ',A7,1)\n   ('        => ',A8,1)\n   ('        => ',A9,1)\n   ('        => ',A10,1)\n   ('***************************************************************')\n //('PRESS ENTER FOR NEXT TOPIC')\n   ('OR PFK3/12 TO END',X,1);\n  IF %SYSPFK=3 | %SYSPFK=12 THEN EXIT;\n   END;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIBILDP": {"ttr": 4101, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x03\\x00\\x00\\x00\\x83\\x02o\\x00\\x84\\x08\\x0f\\x14\\x13\\x02'\\x02F\\x00\\x01\\xd1\\xd6\\xd3@@@@@@@\"", "ispf": {"version": "01.03", "flags": 0, "createdate": "1983-01-26T00:00:00", "modifydate": "1984-03-20T14:13:00", "lines": 551, "newlines": 582, "modlines": 1, "user": "JOL"}, "text": "BUILDJOB:MACRO;\n   %TITLE='         JOL    BUILD JOB PANELS'||\n          ' %DAY %DAYNO %MONTH %YEAR VERSION 1.0 ';\n %COUNT=1;\n BLDINIT INIT; /* INITIALIZE ALL PROGRAM IDS AND DSIDS */\n       DCL %ERR01,%ERR02,%ERR03,%ERR04,%ERR05 INIT '';\n       DCL %STACKNO INIT 1;   /* STACK CONTROLLER  */\n   /*  DCL %REPLACE INIT 'NO'; */\n       DCL %JOBMEM  INIT ''  ;\n       DCL %TYP INIT '';\n       DCL %JOLDS INIT '%SYSPREF.JOL';\n       DCL %EXEC1, %EXEC2, %EXEC3, %EXEC4 INIT '';\n       DCL %I1, %I2, %I3, %I4, %I5, %I6, %I7, %I8, %I9,\n           %I10, %I11, %I12, %I13, %I14, %I15, %I16, %I17, %I18,\n           %I19, %I20, %I21, %I22, %I23, %I24, %I25 INIT '';\n\nLABEL JOBMEM;\n       PANEL ('%TITLE')\n  ////('ENTER THE MEMBER NAME YOU WISH THE JOB TO BE SAVED IN',\n         JOBMEM,8,'%JOBMEM')\n      ('                          %ERR01')\n     /('IN DATA SET ',JOLDS,44,'%JOLDS')\n      ('                          %ERR02')\n    //('THIS MEMBER NAME WILL BE PLACED IN YOUR JOL DATA SET, IF IT')\n      ('ALREADY EXISTS IT WILL BE REPLACED ');\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n\n %ERR01 = '';   %ERR02 = '';\n IF %SYSPFK = 1 | %SYSPFK=13 THEN DO;\n    %ERR01 = 'NO HELP AVAILABLE ';\n    REDO JOBMEM;\n END;\n\n IF %JOBMEM = ''\n            THEN %ERR01 = 'YOU MUST ENTER A MEMBER NAME FOR THE JOB ';\n IF %JOLDS = ''  THEN %ERR02 = 'YOU MUST ENTER A DATA SET NAME ';\n\n IF %ERR01 = '' & %ERR02 = ''  THEN; ELSE  REDO JOBMEM;\n %TITLE = '';\n\n /* IF %REPLACE='Y' | %REPLACE='YE' | %REPLACE='YES'\n       THEN %REPLACE='REPLACE';\n       ELSE %REPLACE='ADD'; */\n/*\n    %JOBNAME = %SYSUID;\n    IF %LIST(1) \u00ac= '' THEN %JOBNAME = '%JOBNAME%LIST(1)';\n    ELSE %JOBNAME = '%JOBNAME'||'X';\n PANEL ('%TITLE')\n      /('                      STANDARD JOB CARD     ')\n       ('          ENTER JOBNAME.       ===>',JOLNAME,8,'%JOBNAME')\n       ('          ENTER ACCOUNT        ===>',ACCNT,5,'00000')\n       ('          ENTER PROGR NAME     ===>',PGNAME,10,'%SYSUID')\n       ('          ENTER JOB CLASS      ===>',CLASS,1,'A')\n       ('          ENTER MSGCLASS       ===>',MSGCLASS,1,'X')\n       ('          ENTER USER           ===>',USER,8,'%SYSUID')\n       ('          ENTER PASSWORD       ===>',PASS,8,'????????')\n       ('          ENTER MSGLEVEL       ===>',MSGLV,3,'1,1')\n       ('          ENTER PRIORITY       ===>',PRTY,2,'03')\n       ('          ENTER NOTIFY ID.     ===>',NOTY,8,'%SYSUID');\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n      DCL %JOBC INIT '';\n      DCL %JOBEXTRA INIT '';\n      IF  %PGNAME    \u00ac= '' THEN %JOBC = 'USER ''%PGNAME''';\n      IF  %ACCNT     \u00ac= '' THEN %JOBC = '%JOBC ACCT %ACCNT';\n      IF  %CLASS     \u00ac= '' THEN %JOBC = '%JOBC CLASS %CLASS';\n      IF  %MSGCLASS  \u00ac= '' THEN %JOBC = '%JOBC MSGCLASS %MSGCLASS';\n      IF  %PASS      \u00ac= '' THEN %JOBEXTRA = 'PASSWORD=%PASS';\n      IF  %USER      \u00ac= '' THEN %JOBEXTRA = '%JOBEXTRA,USER=%USER';\n      IF  %PRTY      \u00ac= '' THEN %JOBC = '%JOBC PRTY %PRTY';\n      IF  %NOTY      \u00ac= '' THEN %JOBC = '%JOBC NOTIFY %NOTY';\n      EDIT MSGLV A,B A(1),X(1),A(1);\n      IF  %A = '1' THEN %JOBC = '%JOBC PJCL';\n      ELSE %JOBC = '%JOBC NPJCL';\n      IF  %B = '1' THEN %JOBC = '%JOBC PALLOC';\n      ELSE %JOBC = '%JOBC NPALLOC';\n      STACK  '%JOLNAME:JOB ';\n      STACK  '%JOBC';\n      STACK ' JOBEXTRA=''%JOBEXTRA'';';\n */\n  PANEL ('%TITLE')\n    /\n   ('FOR THE BENEFIT OF THIS EXERCISE WE WILL ONLY RUN ONE OR ')\n   ('MORE OF THE PROGRAMS LISTED BELOW (IE COPY, SORT , PRINT ')\n  /('OR COMPRESS). YOU MAY HOWEVER RUN THEM AS OFTEN AS YOU LIKE')\n  /('                                             PROGRAM  NAMES')\n  /(' *************************************  PROGRAM 1 ',PROG1,8,'')\n   (' * YOU MUST HAVE THE PROGRAM         *  PROGRAM 2 ',PROG2,8,'')\n   (' * REGISTERED OR USE                 *  PROGRAM 3 ',PROG3,8,'')\n   (' * COPY, SORT, PRINT OR COMPRESS     *  PROGRAM 4 ',PROG4,8,'')\n   (' *                                   *  PROGRAM 5 ',PROG5,8,'')\n   (' *                                   *  PROGRAM 6 ',PROG6,8,'')\n   (' *                                   *  PROGRAM 7 ',PROG7,8,'')\n   (' *                                   *  PROGRAM 8 ',PROG8,8,'')\n   (' *                                   *  PROGRAM 9 ',PROG9,8,'')\n   (' *                                   *  PROGRAM 10',PROG10,8,'')\n   (' *************************************  PROGRAM 11',PROG11,8,'')\n   ;\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n  %PROG1 ='%PROG1        ';   %PROG1=SUBSTR(PROG1,1,8);\n  %PROG2 ='%PROG2        ';   %PROG2=SUBSTR(PROG2,1,8);\n  %PROG3 ='%PROG3        ';   %PROG3=SUBSTR(PROG3,1,8);\n  %PROG4 ='%PROG4        ';   %PROG4=SUBSTR(PROG4,1,8);\n  %PROG5 ='%PROG5        ';   %PROG5=SUBSTR(PROG5,1,8);\n  %PROG6 ='%PROG6        ';   %PROG6=SUBSTR(PROG6,1,8);\n  %PROG7 ='%PROG7        ';   %PROG7=SUBSTR(PROG7,1,8);\n  %PROG8 ='%PROG8        ';   %PROG8=SUBSTR(PROG8,1,8);\n  %PROG9 ='%PROG9        ';   %PROG9=SUBSTR(PROG9,1,8);\n  %PROG10='%PROG10        ';  %PROG10=SUBSTR(PROG10,1,8);\n  %PROG11='%PROG11        ';  %PROG11=SUBSTR(PROG11,1,8);\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n  IF %PROG11\u00ac='' THEN\n  DO;\n  PANEL ('%TITLE')\n   //\n      ('ENTER THE NAMES OF THE PROGRAMS YOU WISH TO RUN,IN ORDER')\n      //\n      ('PROGRAM  NAMES')\n    / ('PROGRAM 11 ',PROG11,8,'')\n      ('PROGRAM 12 ',PROG12,8,'')\n      ('PROGRAM 13 ',PROG13,8,'')\n      ('PROGRAM 14 ',PROG14,8,'')\n      ('PROGRAM 15 ',PROG15,8,'')\n      ('PROGRAM 16 ',PROG16,8,'')\n      ('PROGRAM 17 ',PROG17,8,'')\n      ('PROGRAM 18 ',PROG18,8,'')\n      ('PROGRAM 19 ',PROG19,8,'')\n      ('PROGRAM 20 ',PROG20,8,'')\n      ('PROGRAM 21 ',PROG21,8,'')\n      ;\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n  /* NOW MAKE ALL THE PROGAM NAMES 8 CHARACTERS LONG */\n  %PROG11='%PROG11        '; %PROG11=SUBSTR(PROG11,1,8);\n  %PROG12='%PROG12        '; %PROG12=SUBSTR(PROG12,1,8);\n  %PROG13='%PROG13        '; %PROG13=SUBSTR(PROG13,1,8);\n  %PROG14='%PROG14        '; %PROG14=SUBSTR(PROG14,1,8);\n  %PROG15='%PROG15        '; %PROG15=SUBSTR(PROG15,1,8);\n  %PROG16='%PROG16        '; %PROG16=SUBSTR(PROG16,1,8);\n  %PROG17='%PROG17        '; %PROG17=SUBSTR(PROG17,1,8);\n  %PROG18='%PROG18        '; %PROG18=SUBSTR(PROG18,1,8);\n  %PROG19='%PROG19        '; %PROG19=SUBSTR(PROG19,1,8);\n  %PROG20='%PROG20        '; %PROG20=SUBSTR(PROG20,1,8);\n  %PROG21='%PROG21        '; %PROG21=SUBSTR(PROG21,1,8);\n\n\n  PANEL ('%TITLE')\n   //\n      ('ENTER THE STEPNAMES AGAINST THE PROGRAMS (IF YOU WISH)')\n      //\n      ('PROGRAM           STEPNAME (OPTIONAL)')\n      ('PROGRAM 11     %PROG11  ',STEP11,8,'')\n      ('PROGRAM 12     %PROG12  ',STEP12,8,'')\n      ('PROGRAM 13     %PROG13  ',STEP13,8,'')\n      ('PROGRAM 14     %PROG14  ',STEP14,8,'')\n      ('PROGRAM 15     %PROG15  ',STEP15,8,'')\n      ('PROGRAM 16     %PROG16  ',STEP16,8,'')\n      ('PROGRAM 17     %PROG17  ',STEP17,8,'')\n      ('PROGRAM 18     %PROG18  ',STEP18,8,'')\n      ('PROGRAM 19     %PROG19  ',STEP19,8,'')\n      ('PROGRAM 20     %PROG20  ',STEP20,8,'')\n      ('PROGRAM 21     %PROG21  ',STEP21,8,'')\n      ;\n IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n END;\n   %MAINCNT=0;\n\n\n\n\nLABEL CHECKPG;\n   %MAINCNT=%MAINCNT+1;\n   %INC='YES';\n       SET THISPROG=PROG%MAINCNT;\n       %SET='SET THISPROG =%%%THISPROG';\n       %SET;\n     IF %THISPROG\u00ac=''  THEN DO;\n   BLDCHPGM %THISPROG;\n                        /* CHECK THE EXISTANCE OF THE PROGRAM */\n\n   REDO CHECKPG;\n   END;\n\n/* HERE WE HAVE ALL THE PROGRAMS SO WE CAN OPEN OUR FILES */\n/* AND WRITE TO THEM */\n\n    UJY01AL;     /* OPEN THREE FILES TO STACK */\n\n    BLDJOBC;  /* BUILD A JOBCARD */\n\n\n\n   %MAINCNT=0;\nLABEL MAIN;\n   %MAINCNT=%MAINCNT+1;\n   %INC='YES';\n       SET THISPROG=PROG%MAINCNT;\n       %SET='SET THISPROG =%%%THISPROG';\n       %SET;\nIF %THISPROG \u00ac='' THEN DO;\n  /*   SET THISSTEP=STEP%MAINCNT;\n       %SET='SET THISSTEP =%%%THISSTEP';\n       %SET; */\n       IF %THISPROG='SORT'  THEN DO; BLDSORT; %INC='NO'; END;\n       IF %THISPROG='COPY'  THEN DO; BLDCOPY; %INC='NO'; END;\n       IF %THISPROG='PRINT' THEN DO; BLDPRNT; %INC='NO'; END;\n       IF %THISPROG='COMPRESS' THEN DO; BLDCOMP; %INC='NO'; END;\n       %PGMNAME=''; IF %INC='NO' THEN REDO MAIN;\n       IF %INC='YES' THEN DO;\n       IF %THISPROG = '' THEN;\n         ELSE INCLUDE %THISPROG ;      /* PROGRAM MUST BE REGISTERED */\n      END;\n          IF %PGMNAME='' THEN DO;\n        /* COULDN'T GET PROGRAM DETAILS */\n        /* BECAUSE IT WASN'T REGISTERED */\n        PANEL ('            PROGRAM %THISPROG IS NOT REGISTERED')\n              ('            YOUR JOB HAS BEEN TERMINATED ABNORMALLY')\n              ('            END OF JOB PROCESSING WILL NOW TAKE PLACE')\n              ('            YOU WILL HAVE THE OPTION OF SAVING YOUR')\n              ('            %JOBMEM JOL PROGRAM.')\n          ////('            PLEASE PRESS THE ENTER TO CONTINUE',ANS,1);\n               CAIBILDY ENDJOB JOLDS=%JOLDS SAVEIN=%JOBMEM ;\n              /* PANEL //////\n                      (' PROGRAM %THISPROG IS NOT REGISTERED')\n                      ('PRESS ENTER TO REGISTER IT?',ANS,1);\n                      IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT; */\n                 REGISTER;   /* REGISTER WILL RUN DYNAMICALLY */\n             /*  INCLUDE %THISPROG; */\n          END;\n  /*** HERE THE PROGRAM WAS REGISTERED AND WE HAVE ITS DETAILS ***/\n  JOLOPT FLAG5;\n    LABEL INC1;\n  JOLOPT FLAG0;\n    PANEL ('PLEASE ENTER THE DSIDS OR DATA SETS FOR %PGMNAME :-')\n          (' (YOU MAY USE PRINTER OR SYSOUT FOR THE WRITES) ')\n            / ('EXECUTE IF ',COND,40,'MAXCC=0')\n            / ('FROM LOAD LIBRARY ',LOAD,44,'%LOAD')\n            / ('USING PARAMETER    ',PARM,100)\n            / ('%O1',I1,40,'%I1') ('%O2',I2,40,'%I2')\n              ('%O3',I3,40,'%I3') ('%O4',I4,40,'%I4')\n              ('%O5',I5,40,'%I5') ('%O6',I6,40,'%I6')\n              ('%O7',I7,40,'%I7') ('%O8',I8,40,'%I8')\n              ('%O9',I9,40,'%I9') ('%O10',I10,40,'%I10')\n              ('%ERR01')\n                 ;\nIF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n             IF %O10\u00ac='' THEN\nPANEL ('PLEASE ENTER THE OTHER DSIDS OR DATA SETS FOR %PGMNAME :-')\n            / ('CONTINUE FROM %O10 %I10')\n              ('%O11',I11,40,'%I11') ('%O12',I12,40,'%I12')\n              ('%O13',I13,40,'%I13') ('%O14',I14,40,'%I14')\n              ('%O15',I15,40,'%I15') ('%O16',I16,40,'%I16')\n              ('%O17',I17,40,'%I17') ('%O18',I18,40,'%I18')\n              ('%O19',I19,40,'%I19') ('%O20',I20,40,'%I20')\n              ('%O21',I21,40,'%I21') ('%O22',I22,40,'%I22')\n              ('%O23',I23,40,'%I23') ('%O24',I24,40,'%I24')\n              ('%O25',I25,40,'%I25')\n              ;\nIF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n/********************************************\n *                                          *\n *   HERE IS WHERE WE USE THE BUILD ADD     *\n *   MACRO TO ADD THE DSIDS ETC TO TABLES   *\n *                                          *\n ********************************************/\n %ERR01='YOU MUST SPECIFY A DATA SET FOR ALL FILES ';\n %ERR02='';\n IF %O1 \u00ac=  '' & %I1 =  '' THEN %ERR02 = 'ON';\n IF %O2 \u00ac=  '' & %I2 =  '' THEN %ERR02 = 'ON';\n IF %O3 \u00ac=  '' & %I3 =  '' THEN %ERR02 = 'ON';\n IF %O4 \u00ac=  '' & %I4 =  '' THEN %ERR02 = 'ON';\n IF %O5 \u00ac=  '' & %I5 =  '' THEN %ERR02 = 'ON';\n IF %O6 \u00ac=  '' & %I6 =  '' THEN %ERR02 = 'ON';\n IF %O7 \u00ac=  '' & %I7 =  '' THEN %ERR02 = 'ON';\n IF %O8 \u00ac=  '' & %I8 =  '' THEN %ERR02 = 'ON';\n IF %O9 \u00ac=  '' & %I9 =  '' THEN %ERR02 = 'ON';\n IF %O10 \u00ac= '' & %I10 = '' THEN %ERR02 = 'ON';\n IF %O11 \u00ac= '' & %I11 = '' THEN %ERR02 = 'ON';\n IF %O12 \u00ac= '' & %I12 = '' THEN %ERR02 = 'ON';\n IF %O13 \u00ac= '' & %I13 = '' THEN %ERR02 = 'ON';\n IF %O14 \u00ac= '' & %I14 = '' THEN %ERR02 = 'ON';\n IF %O15 \u00ac= '' & %I15 = '' THEN %ERR02 = 'ON';\n IF %O16 \u00ac= '' & %I16 = '' THEN %ERR02 = 'ON';\n IF %O17 \u00ac= '' & %I17 = '' THEN %ERR02 = 'ON';\n IF %O18 \u00ac= '' & %I18 = '' THEN %ERR02 = 'ON';\n IF %O19 \u00ac= '' & %I19 = '' THEN %ERR02 = 'ON';\n IF %O20 \u00ac= '' & %I20 = '' THEN %ERR02 = 'ON';\n IF %O21 \u00ac= '' & %I21 = '' THEN %ERR02 = 'ON';\n IF %O22 \u00ac= '' & %I22 = '' THEN %ERR02 = 'ON';\n IF %O23 \u00ac= '' & %I23 = '' THEN %ERR02 = 'ON';\n IF %O24 \u00ac= '' & %I24 = '' THEN %ERR02 = 'ON';\n IF %O25 \u00ac= '' & %I25 = '' THEN %ERR02 = 'ON';\n IF %ERR02 \u00ac= '' THEN DO; REDO INC1; END;\n IF %I1\u00ac='' & %O1 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O1,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O1,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I1' DISP=%DISP TYP='%TYP001' ;\n                %EXEC1='%EXEC1 %DSIDRET';\n    DISP='';\n END;\n IF %I2\u00ac='' & %O2 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O2,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O2,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I2' DISP=%DISP TYP='%TYP002' ;\n                           %EXEC1='%EXEC1 %DSIDRET';\n    DISP='';\n END;\n IF %I3\u00ac='' & %O3 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O3,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O3,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I3' DISP=%DISP TYP='%TYP003' ;\n                            %EXEC1='%EXEC1 %DSIDRET';\n    DISP='';\n END;\n IF %I4\u00ac='' & %O4 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O4,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O4,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I4' DISP=%DISP TYP='%TYP004';\n                              %EXEC1='%EXEC1 %DSIDRET';\n    DISP='';\n END;\n IF %I5\u00ac='' & %O5 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O5,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O5,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I5' DISP=%DISP TYP='%TYP005';\n                           %EXEC1='%EXEC1 %DSIDRET';\n    DISP='';\n END;\n IF %I6\u00ac='' & %O6 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O6,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O6,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I6' DISP=%DISP TYP='%TYP006';\n                           %EXEC1='%EXEC1 %DSIDRET';\n    DISP='';\n END;\n IF %I7\u00ac='' & %O7 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O7,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O7,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I7' DISP=%DISP TYP='%TYP007';\n                           %EXEC2='%EXEC2 %DSIDRET';\n    DISP='';\n END;\n IF %I8\u00ac='' & %O8 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O8,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O8,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I8' DISP=%DISP TYP='%TYP008';\n                           %EXEC2='%EXEC2 %DSIDRET';\n    DISP='';\n END;\n IF %I9\u00ac='' & %O9 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O9,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O9,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I9' DISP=%DISP TYP='%TYP009';\n                           %EXEC2='%EXEC2 %DSIDRET';\n    DISP='';\n END;\n IF %I10\u00ac='' & %O10 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O10,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O10,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I10' DISP=%DISP TYP='%TYP010';\n                           %EXEC2='%EXEC2 %DSIDRET';\n    DISP='';\n END;\n   IF %I11\u00ac='' & %O11 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O11,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O11,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I11' DISP=%DISP TYP='%TYP011';\n                           %EXEC2='%EXEC2 %DSIDRET';\n    DISP='';\n END;\n IF %I12\u00ac='' & %O12 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O12,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O12,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I12' DISP=%DISP TYP='%TYP012';\n                           %EXEC2='%EXEC2 %DSIDRET';\n    DISP='';\n END;\n IF %I13\u00ac='' & %O13 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O13,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O13,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I13' DISP=%DISP TYP='%TYP013';\n                           %EXEC3='%EXEC3 %DSIDRET';\n    DISP='';\n END;\n IF %I14\u00ac='' & %O14 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O14,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O14,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I14' DISP=%DISP TYP='%TYP014';\n                           %EXEC3='%EXEC3 %DSIDRET';\n    DISP='';\n END;\n IF %I15\u00ac='' & %O15 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O15,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O15,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I15' DISP=%DISP TYP='%TYP015';\n                           %EXEC3='%EXEC3 %DSIDRET';\n    DISP='';\n END;\n IF %I16\u00ac='' & %O16 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O16,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O16,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I16' DISP=%DISP TYP='%TYP016';\n                           %EXEC3='%EXEC3 %DSIDRET';\n    DISP='';\n END;\n IF %I17\u00ac='' & %O17 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O17,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O17,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I17' DISP=%DISP TYP='%TYP017';\n                           %EXEC3='%EXEC3 %DSIDRET';\n    DISP='';\n END;\n IF %I18\u00ac='' & %O18 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O18,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O18,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I18' DISP=%DISP TYP='%TYP018';\n                           %EXEC3='%EXEC3 %DSIDRET';\n    DISP='';\n END;\n IF %I19\u00ac='' & %O19 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O19,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O19,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I19' DISP=%DISP TYP='%TYP019';\n                           %EXEC4='%EXEC4 %DSIDRET';\n    DISP='';\n END;\n IF %I20\u00ac='' & %O20 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O20,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O20,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I20' DISP=%DISP TYP='%TYP020';\n                           %EXEC4='%EXEC4 %DSIDRET';\n    DISP='';\n END;\n IF %I21\u00ac='' & %O21 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O21,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O21,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I21' DISP=%DISP TYP='%TYP021';\n                           %EXEC4='%EXEC4 %DSIDRET';\n    DISP='';\n END;\n IF %I22\u00ac='' & %O22 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O22,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O22,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I22' DISP=%DISP TYP='%TYP022';\n                           %EXEC4='%EXEC4 %DSIDRET';\n    DISP='';\n END;\n IF %I23\u00ac='' & %O23 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O23,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O23,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I23' DISP=%DISP TYP='%TYP023';\n                           %EXEC4='%EXEC4 %DSIDRET';\n    DISP='';\n END;\n IF %I24\u00ac='' & %O24 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O24,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O24,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I24' DISP=%DISP TYP='%TYP024';\n                           %EXEC4='%EXEC4 %DSIDRET';\n    DISP='';\n END;\n IF %I25\u00ac='' & %O25 \u00ac= '' THEN DO;\n    %CHECK=INDEX(O25,'READ');\n    IF %CHECK=0 THEN %CHECK=INDEX(O25,'UPDATE');\n    IF %CHECK>0 THEN %DISP='OLD';\n                ELSE %DISP='NEW';\n    BLDCDS DATASET '%I25' DISP=%DISP TYP='%TYP025';\n                           %EXEC4='%EXEC4 %DSIDRET';\n    DISP='';\n END;\n  /* NOW STACK THE PROGRAM EXEC ETC */\n\n      /* THISSTEP */  UJY04P '   EXEC  %THISPROG ';\n                      UJY04P '         %EXEC1';\n IF %EXEC2 \u00ac= '' THEN UJY04P '         %EXEC2';\n IF %EXEC3 \u00ac= '' THEN UJY04P '         %EXEC3';\n IF %EXEC4 \u00ac= '' THEN UJY04P '         %EXEC4';\n IF %PARM='' THEN\n                      UJY04P '         LOAD=%LOAD ;';\n ELSE DO;\n                      UJY04P '         LOAD=%LOAD ';\n                      UJY04P '         PARM=(''%PARM '') ;';\n END;\n\n /* RESET THE VARIABLES USED TO NULLS FOR THE NEXT PROGRAM */\n\n %EXEC1=''; %EXEC2=''; %EXEC3=''; %EXEC4=''; %ERR01='';\n\n %O1='' ; %O2='' ; %O3='' ; %O4='' ; %O5='' ; %O6='' ; %O7='';\n %O8='' ; %O9='' ; %O10=''; %O11=''; %O12=''; %O13=''; %O14='';\n %O15=''; %O16=''; %O17=''; %O18=''; %O19=''; %O20=''; %O21='';\n %O22=''; %O23=''; %O24=''; %O25=''; %O19=''; %O20=''; %O21='';\n\n %I1='' ; %I2='' ; %I3='' ; %I4='' ; %I5='' ; %I6='' ; %I7='';\n %I8='' ; %I9='' ; %I10=''; %I11=''; %I12=''; %I13=''; %I14='';\n %I15=''; %I16=''; %I17=''; %I18=''; %I19=''; %I20=''; %I21='';\n %I22=''; %I23=''; %I24=''; %I25=''; %I19=''; %I20=''; %I21='';\n\n /* ND OF RESET VARIABLES */\n\n     IF %THISPROG\u00ac=''  THEN  /* NO MORE  PROGRAMS ? */\nREDO MAIN;\n  END; /* IF PROGRAM\u00ac='' */\n       CAIBILDY ENDJOB JOLDS=%JOLDS SAVEIN=%JOBMEM ;\nEND; /* OF MACRO */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILDY": {"ttr": 4356, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x83\\x02o\\x00\\x83\\x02o\\x17\\x11\\x02U\\x02V\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1983-01-26T00:00:00", "modifydate": "1983-01-26T17:11:00", "lines": 597, "newlines": 598, "modlines": 0, "user": "JOL"}, "text": "BLDENDJ: MACRO (        /* THIS MACRO CHECKS AND CHANGES */\n          %ENDJOB,      /* END OF JOB PROCESSING       */\n          %SAVEIN=,\n          %JOLDS=,\n          ) ;\n  IF %ENDJOB='ENDJOB' THEN DO;\n\n  DCL %D1, %D2, %D3, %D4, %D5, %D6,\n      %D7, %D8, %D9, %D10, %D11, %D12,\n      %D13, %D14, %D15, %D16, %D17, %D18, %D19, %D20, %D21 INIT '';\n  DCL %P1, %P2, %P3, %P4, %P5, %P6, %P7, %P8, %P9, %P10,\n      %P11, %P12, %P13, %P14, %P15, %P16,\n      %P18, %P19, %P20, %P21  INIT '';\n\n  IF %PROG1 \u00ac='' & %PROG1\u00ac='SORT' & %PROG1\u00ac='COPY' & %PROG1\u00ac='PRINT'\n  & %PROG1\u00ac='COMPRESS' THEN %P1=%PROG1;\n  IF %PROG2 \u00ac='' & %PROG2\u00ac='SORT' & %PROG2\u00ac='COPY' & %PROG2\u00ac='PRINT'\n  & %PROG2\u00ac='COMPRESS' THEN %P2=%PROG2 ;\n  IF %PROG3 \u00ac='' & %PROG3\u00ac='SORT' & %PROG3\u00ac='COPY' & %PROG3\u00ac='PRINT'\n  & %PROG3\u00ac='COMPRESS' THEN %P3=%PROG3 ;\n  IF %PROG4 \u00ac='' & %PROG4\u00ac='SORT' & %PROG4\u00ac='COPY' & %PROG4\u00ac='PRINT'\n  & %PROG4\u00ac='COMPRESS' THEN %P4=%PROG4 ;\n  IF %PROG5 \u00ac='' & %PROG5\u00ac='SORT' & %PROG5\u00ac='COPY' & %PROG5\u00ac='PRINT'\n  & %PROG5\u00ac='COMPRESS' THEN %P5=%PROG5 ;\n  IF %PROG6 \u00ac='' & %PROG6\u00ac='SORT' & %PROG6\u00ac='COPY' & %PROG6\u00ac='PRINT'\n  & %PROG6\u00ac='COMPRESS' THEN %P6=%PROG6 ;\n  IF %PROG7 \u00ac='' & %PROG7\u00ac='SORT' & %PROG7\u00ac='COPY' & %PROG7\u00ac='PRINT'\n  & %PROG7\u00ac='COMPRESS' THEN %P7=%PROG7 ;\n  IF %PROG8 \u00ac='' & %PROG8\u00ac='SORT' & %PROG8\u00ac='COPY' & %PROG8\u00ac='PRINT'\n  & %PROG8\u00ac='COMPRESS' THEN %P8=%PROG8 ;\n  IF %PROG9 \u00ac='' & %PROG9\u00ac='SORT' & %PROG9\u00ac='COPY' & %PROG9\u00ac='PRINT'\n  & %PROG9\u00ac='COMPRESS' THEN %P9=%PROG9 ;\n  IF %PROG10\u00ac='' & %PROG10\u00ac='SORT' & %PROG10\u00ac='COPY' & %PROG10\u00ac='PRINT'\n  & %PROG10\u00ac='COMPRESS' THEN %P10=%PROG10 ;\n  IF %PROG11\u00ac='' & %PROG11\u00ac='SORT' & %PROG11\u00ac='COPY' & %PROG11\u00ac='PRINT'\n  & %PROG11\u00ac='COMPRESS' THEN %P11=%PROG11 ;\n  IF %PROG12\u00ac='' & %PROG12\u00ac='SORT' & %PROG12\u00ac='COPY' & %PROG12\u00ac='PRINT'\n  & %PROG12\u00ac='COMPRESS' THEN %P12=%PROG12 ;\n  IF %PROG13\u00ac='' & %PROG13\u00ac='SORT' & %PROG13\u00ac='COPY' & %PROG13\u00ac='PRINT'\n  & %PROG13\u00ac='COMPRESS' THEN %P13=%PROG13 ;\n  IF %PROG14\u00ac='' & %PROG14\u00ac='SORT' & %PROG14\u00ac='COPY' & %PROG14\u00ac='PRINT'\n  & %PROG14\u00ac='COMPRESS' THEN %P14=%PROG14 ;\n  IF %PROG15\u00ac='' & %PROG15\u00ac='SORT' & %PROG15\u00ac='COPY' & %PROG15\u00ac='PRINT'\n  & %PROG15\u00ac='COMPRESS' THEN %P15=%PROG15 ;\n  IF %PROG16\u00ac='' & %PROG16\u00ac='SORT' & %PROG16\u00ac='COPY' & %PROG16\u00ac='PRINT'\n  & %PROG16\u00ac='COMPRESS' THEN %P16=%PROG16 ;\n  IF %PROG17\u00ac='' & %PROG17\u00ac='SORT' & %PROG17\u00ac='COPY' & %PROG17\u00ac='PRINT'\n  & %PROG17\u00ac='COMPRESS' THEN %P17=%PROG17 ;\n  IF %PROG18\u00ac='' & %PROG18\u00ac='SORT' & %PROG18\u00ac='COPY' & %PROG18\u00ac='PRINT'\n  & %PROG18\u00ac='COMPRESS' THEN %P18=%PROG18 ;\n  IF %PROG19\u00ac='' & %PROG19\u00ac='SORT' & %PROG19\u00ac='COPY' & %PROG19\u00ac='PRINT'\n  & %PROG19\u00ac='COMPRESS' THEN %P19=%PROG19 ;\n  IF %PROG20\u00ac='' & %PROG20\u00ac='SORT' & %PROG20\u00ac='COPY' & %PROG20\u00ac='PRINT'\n  & %PROG20\u00ac='COMPRESS' THEN %P20=%PROG20 ;\n  IF %PROG21\u00ac='' & %PROG21\u00ac='SORT' & %PROG21\u00ac='COPY' & %PROG21\u00ac='PRINT'\n  & %PROG21\u00ac='COMPRESS' THEN %P21=%PROG21 ;\n\n  IF %DSET1  \u00ac=  '' THEN DO;\n     %DSET1   =  '%DSET1                                             ';\n     %DSET1   =  SUBSTR(DSET1,1,44);\n  END;\n\n  IF %DSET2  \u00ac=  '' THEN DO;\n     %DSET2   =  '%DSET2                                             ';\n     %DSET2   =  SUBSTR(DSET2,1,44);\n  END;\n\n  IF %DSET3  \u00ac=  '' THEN DO;\n     %DSET3   =  '%DSET3                                             ';\n     %DSET3   =  SUBSTR(DSET3,1,44);\n  END;\n\n  IF %DSET4  \u00ac=  '' THEN DO;\n     %DSET4   =  '%DSET4                                             ';\n     %DSET4   =  SUBSTR(DSET4,1,44);\n  END;\n\n  IF %DSET5  \u00ac=  '' THEN DO;\n     %DSET5   =  '%DSET5                                             ';\n     %DSET5   =  SUBSTR(DSET5,1,44);\n  END;\n\n  IF %DSET6  \u00ac=  '' THEN DO;\n     %DSET6   =  '%DSET6                                             ';\n     %DSET6   =  SUBSTR(DSET6,1,44);\n  END;\n\n  IF %DSET7  \u00ac=  '' THEN DO;\n     %DSET7   =  '%DSET7                                             ';\n     %DSET7   =  SUBSTR(DSET7,1,44);\n  END;\n\n  IF %DSET8  \u00ac=  '' THEN DO;\n     %DSET8   =  '%DSET8                                             ';\n     %DSET8   =  SUBSTR(DSET8,1,44);\n  END;\n\n  IF %DSET9  \u00ac=  '' THEN DO;\n     %DSET9   =  '%DSET9                                             ';\n     %DSET9   =  SUBSTR(DSET9,1,44);\n  END;\n\n  IF %DSET10 \u00ac=  '' THEN DO;\n     %DSET10  =  '%DSET10                                            ';\n     %DSET10  =  SUBSTR(DSET10,1,44);\n  END;\n\n  IF %DSET11 \u00ac=  '' THEN DO;\n     %DSET11  =  '%DSET11                                            ';\n     %DSET11  =  SUBSTR(DSET11,1,44);\n  END;\n\n  IF %DSET12 \u00ac=  '' THEN DO;\n     %DSET12  =  '%DSET12                                            ';\n     %DSET12  =  SUBSTR(DSET12,1,44);\n  END;\n\n  IF %DSET13 \u00ac=  '' THEN DO;\n     %DSET13  =  '%DSET13                                            ';\n     %DSET13  =  SUBSTR(DSET13,1,44);\n  END;\n\n  IF %DSET14 \u00ac=  '' THEN DO;\n     %DSET14  =  '%DSET14                                            ';\n     %DSET14  =  SUBSTR(DSET14,1,44);\n  END;\n\n  IF %DSET15 \u00ac=  '' THEN DO;\n     %DSET15  =  '%DSET15                                            ';\n     %DSET15  =  SUBSTR(DSET15,1,44);\n  END;\n\n  IF %DSET16 \u00ac=  '' THEN DO;\n     %DSET16  =  '%DSET16                                            ';\n     %DSET16  =  SUBSTR(DSET16,1,44);\n  END;\n\n  IF %DSET17 \u00ac=  '' THEN DO;\n     %DSET17  =  '%DSET17                                            ';\n     %DSET17  =  SUBSTR(DSET17,1,44);\n  END;\n\n  IF %DSET18 \u00ac=  '' THEN DO;\n     %DSET18  =  '%DSET18                                            ';\n     %DSET18  =  SUBSTR(DSET18,1,44);\n  END;\n\n  IF %DSET19 \u00ac=  '' THEN DO;\n     %DSET19  =  '%DSET19                                            ';\n     %DSET19  =  SUBSTR(DSET19,1,44);\n  END;\n\n  IF %DSET20 \u00ac=  '' THEN DO;\n     %DSET20  =  '%DSET20                                            ';\n     %DSET20  =  SUBSTR(DSET20,1,44);\n  END;\n\n  IF %DSET21 \u00ac=  '' THEN DO;\n     %DSET21  =  '%DSET21                                            ';\n     %DSET21  =  SUBSTR(DSET21,1,44);\n  END;\n\n  IF %DSET22 \u00ac=  '' THEN DO;\n     %DSET22  =  '%DSET22                                            ';\n     %DSET22  =  SUBSTR(DSET22,1,44);\n  END;\n\n  IF %DSET23 \u00ac=  '' THEN DO;\n     %DSET23  =  '%DSET23                                            ';\n     %DSET23  =  SUBSTR(DSET23,1,44);\n  END;\n\n  IF %DSET24 \u00ac=  '' THEN DO;\n     %DSET24  =  '%DSET24                                            ';\n     %DSET24  =  SUBSTR(DSET24,1,44);\n  END;\n\n  IF %DSET25 \u00ac=  '' THEN DO;\n     %DSET25  =  '%DSET25                                            ';\n     %DSET25  =  SUBSTR(DSET25,1,44);\n  END;\n\n  IF %DSET26 \u00ac=  '' THEN DO;\n     %DSET26  =  '%DSET26                                            ';\n     %DSET26  =  SUBSTR(DSET26,1,44);\n  END;\n\n  IF %DSET27 \u00ac=  '' THEN DO;\n     %DSET27  =  '%DSET27                                            ';\n     %DSET27  =  SUBSTR(DSET27,1,44);\n  END;\n\n  IF %DSET28 \u00ac=  '' THEN DO;\n     %DSET28  =  '%DSET28                                            ';\n     %DSET28  =  SUBSTR(DSET28,1,44);\n  END;\n\n  IF %DSET29 \u00ac=  '' THEN DO;\n     %DSET29  =  '%DSET29                                            ';\n     %DSET29  =  SUBSTR(DSET29,1,44);\n  END;\n\n  IF %DSET30 \u00ac=  '' THEN DO;\n     %DSET30  =  '%DSET30                                            ';\n     %DSET30  =  SUBSTR(DSET30,1,44);\n  END;\n\n  IF %DSET31 \u00ac=  '' THEN DO;\n     %DSET31  =  '%DSET31                                            ';\n     %DSET31  =  SUBSTR(DSET31,1,44);\n  END;\n\n  IF %DSET32 \u00ac=  '' THEN DO;\n     %DSET32  =  '%DSET32                                            ';\n     %DSET32  =  SUBSTR(DSET32,1,44);\n  END;\n\n  IF %DSET33 \u00ac=  '' THEN DO;\n     %DSET33  =  '%DSET33                                            ';\n     %DSET33  =  SUBSTR(DSET33,1,44);\n  END;\n\n  IF %DSET34 \u00ac=  '' THEN DO;\n     %DSET34  =  '%DSET34                                            ';\n     %DSET34  =  SUBSTR(DSET34,1,44);\n  END;\n\n  IF %DSET35 \u00ac=  '' THEN DO;\n     %DSET35  =  '%DSET35                                            ';\n     %DSET35  =  SUBSTR(DSET35,1,44);\n  END;\n\n  IF %DSET36 \u00ac=  '' THEN DO;\n     %DSET36  =  '%DSET36                                            ';\n     %DSET36  =  SUBSTR(DSET36,1,44);\n  END;\n\n  IF %DSET37 \u00ac=  '' THEN DO;\n     %DSET37  =  '%DSET37                                            ';\n     %DSET37  =  SUBSTR(DSET37,1,44);\n  END;\n\n  IF %DSET38 \u00ac=  '' THEN DO;\n     %DSET38  =  '%DSET38                                            ';\n     %DSET38  =  SUBSTR(DSET38,1,44);\n  END;\n\n  IF %DSET39 \u00ac=  '' THEN DO;\n     %DSET39  =  '%DSET39                                            ';\n     %DSET39  =  SUBSTR(DSET39,1,44);\n  END;\n\n  IF %DSET40 \u00ac=  '' THEN DO;\n     %DSET40  =  '%DSET40                                            ';\n     %DSET40  =  SUBSTR(DSET40,1,44);\n  END;\n\n  IF %DSET41 \u00ac=  '' THEN DO;\n     %DSET41  =  '%DSET41                                            ';\n     %DSET41  =  SUBSTR(DSET41,1,44);\n  END;\n\n  IF %DSET42 \u00ac=  '' THEN DO;\n     %DSET42  =  '%DSET42                                            ';\n     %DSET42  =  SUBSTR(DSET42,1,44);\n  END;\n\n  IF %DSET43 \u00ac=  '' THEN DO;\n     %DSET43  =  '%DSET43                                            ';\n     %DSET43  =  SUBSTR(DSET43,1,44);\n  END;\n\n  IF %DSET44 \u00ac=  '' THEN DO;\n     %DSET44  =  '%DSET44                                            ';\n     %DSET44  =  SUBSTR(DSET44,1,44);\n  END;\n\n  IF %DSET45 \u00ac=  '' THEN DO;\n     %DSET45  =  '%DSET45                                            ';\n     %DSET45  =  SUBSTR(DSET45,1,44);\n  END;\n\n  IF %DSET46 \u00ac=  '' THEN DO;\n     %DSET46  =  '%DSET46                                            ';\n     %DSET46  =  SUBSTR(DSET46,1,44);\n  END;\n\n  IF %DSET47 \u00ac=  '' THEN DO;\n     %DSET47  =  '%DSET47                                            ';\n     %DSET47  =  SUBSTR(DSET47,1,44);\n  END;\n\n  IF %DSET48 \u00ac=  '' THEN DO;\n     %DSET48  =  '%DSET48                                            ';\n     %DSET48  =  SUBSTR(DSET48,1,44);\n  END;\n\n  IF %DSET49 \u00ac=  '' THEN DO;\n     %DSET49  =  '%DSET49                                            ';\n     %DSET49  =  SUBSTR(DSET49,1,44);\n  END;\n\n  IF %DSET50 \u00ac=  '' THEN DO;\n     %DSET50  =  '%DSET50                                            ';\n     %DSET50  =  SUBSTR(DSET50,1,44);\n  END;\n\n\nIF %DSET1\u00ac='' THEN DO;\n   PANEL ('%TITLE')\n   ('IF MAXCC=0 DO YOU WANT TO CATALOG/DELETE KEEP, SCRATCH OR PRINT')\n   ('ANY OF THESE FILES ?')\n   ('PLACE A \"C\" \"D\" OR A \"P\" NEXT TO THE FILE')\n   ('%DSET1     ',A1,1)\n   ('%DSET2     ',A2,1)\n   ('%DSET3     ',A3,1)\n   ('%DSET4     ',A4,1)\n   ('%DSET5     ',A5,1)\n   ('%DSET6     ',A6,1)\n   ('%DSET7     ',A7,1)\n   ('%DSET8     ',A8,1)\n   ('%DSET9     ',A9,1)\n   ('%DSET10    ',A10,1);\n   UJY04P '  IF MAXCC = 0 THEN DO;';\n        /* CHECK FOR A C */\n IF %A1='C' & %DSET1  \u00ac='' THEN UJY04P '           CATALOGUE DSET1;';\n IF %A2='C' & %DSET2  \u00ac='' THEN UJY04P '           CATALOGUE DSET2;';\n IF %A3='C' & %DSET3  \u00ac='' THEN UJY04P '           CATALOGUE DSET3;';\n IF %A4='C' & %DSET4  \u00ac='' THEN UJY04P '           CATALOGUE DSET4;';\n IF %A5='C' & %DSET5  \u00ac='' THEN UJY04P '           CATALOGUE DSET5;';\n IF %A6='C' & %DSET6  \u00ac='' THEN UJY04P '           CATALOGUE DSET6;';\n IF %A7='C' & %DSET7  \u00ac='' THEN UJY04P '           CATALOGUE DSET7;';\n IF %A8='C' & %DSET8  \u00ac='' THEN UJY04P '           CATALOGUE DSET8;';\n IF %A9='C' & %DSET8  \u00ac='' THEN UJY04P '           CATALOGUE DSET9;';\n IF %A10='C' & %DSET10 \u00ac='' THEN UJY04P '          CATALOGUE DSET10;';\n        /* CHECK FOR A D */\n IF %A1 ='D' & %DSET1 \u00ac='' THEN UJY04P '           DELETE DSET1;';\n IF %A2 ='D' & %DSET2 \u00ac='' THEN UJY04P '           DELETE DSET2;';\n IF %A3 ='D' & %DSET3 \u00ac='' THEN UJY04P '           DELETE DSET3;';\n IF %A4 ='D' & %DSET4 \u00ac='' THEN UJY04P '           DELETE DSET4;';\n IF %A5 ='D' & %DSET5 \u00ac='' THEN UJY04P '           DELETE DSET5;';\n IF %A6 ='D' & %DSET6 \u00ac='' THEN UJY04P '           DELETE DSET6;';\n IF %A7 ='D' & %DSET7 \u00ac='' THEN UJY04P '           DELETE DSET7;';\n IF %A8 ='D' & %DSET8 \u00ac='' THEN UJY04P '           DELETE DSET8;';\n IF %A9 ='D' & %DSET9 \u00ac='' THEN UJY04P '           DELETE DSET9;';\n IF %A10='D' & %DSET10 \u00ac='' THEN UJY04P '           DELETE DSET10;';\n        /* CHECK FOR A P */\n IF %A1 ='P' & %DSET1  \u00ac='' THEN UJY04P '           PRINT DSET1;';\n IF %A2 ='P' & %DSET2  \u00ac='' THEN UJY04P '           PRINT DSET2;';\n IF %A3 ='P' & %DSET3  \u00ac='' THEN UJY04P '           PRINT DSET3;';\n IF %A4 ='P' & %DSET4  \u00ac='' THEN UJY04P '           PRINT DSET4;';\n IF %A5 ='P' & %DSET5  \u00ac='' THEN UJY04P '           PRINT DSET5;';\n IF %A6 ='P' & %DSET6  \u00ac='' THEN UJY04P '           PRINT DSET6;';\n IF %A7 ='P' & %DSET7  \u00ac='' THEN UJY04P '           PRINT DSET7;';\n IF %A8 ='P' & %DSET8  \u00ac='' THEN UJY04P '           PRINT DSET8;';\n IF %A9 ='P' & %DSET9  \u00ac='' THEN UJY04P '           PRINT DSET9;';\n IF %A10='P' & %DSET10 \u00ac='' THEN UJY04P '           PRINT DSET10;';\n   END; /* IF %DSET1 \u00ac= '' */\nIF %DSET11\u00ac='' THEN DO;\n   PANEL ('%TITLE')\n   ('IF MAXCC=0 DO YOU WANT TO CATALOG/DELETE KEEP, SCRATCH OR PRINT')\n   ('ANY OF THESE FILES ?')\n   ('PLACE A \"C\" \"D\" OR A \"P\" NEXT TO THE FILE')\n   ('%DSET11    ',A1,1)\n   ('%DSET12    ',A2,1)\n   ('%DSET13    ',A3,1)\n   ('%DSET14    ',A4,1)\n   ('%DSET15    ',A5,1)\n   ('%DSET16    ',A6,1)\n   ('%DSET17    ',A7,1)\n   ('%DSET18    ',A8,1)\n   ('%DSET19    ',A9,1)\n   ('%DSET20    ',A10,1);\n IF %A1='C' & %DSET11 \u00ac='' THEN UJY04P '           CATALOGUE DSET11;';\n IF %A2='C' & %DSET12 \u00ac='' THEN UJY04P '           CATALOGUE DSET12;';\n IF %A3='C' & %DSET13 \u00ac='' THEN UJY04P '           CATALOGUE DSET13;';\n IF %A4='C' & %DSET14 \u00ac='' THEN UJY04P '           CATALOGUE DSET14;';\n IF %A5='C' & %DSET15 \u00ac='' THEN UJY04P '           CATALOGUE DSET15;';\n IF %A6='C' & %DSET16 \u00ac='' THEN UJY04P '           CATALOGUE DSET16;';\n IF %A7='C' & %DSET17 \u00ac='' THEN UJY04P '           CATALOGUE DSET17;';\n IF %A8='C' & %DSET18 \u00ac='' THEN UJY04P '           CATALOGUE DSET18;';\n IF %A9='C' & %DSET19 \u00ac='' THEN UJY04P '           CATALOGUE DSET19;';\n IF %A10='C' & %DSET20 \u00ac='' THEN UJY04P '          CATALOGUE DSET20;';\n        /* CHECK FOR A D */\n IF %A1 ='D' & %DSET11 \u00ac='' THEN UJY04P '           DELETE DSET11;';\n IF %A2 ='D' & %DSET12 \u00ac='' THEN UJY04P '           DELETE DSET12;';\n IF %A3 ='D' & %DSET13 \u00ac='' THEN UJY04P '           DELETE DSET13;';\n IF %A4 ='D' & %DSET14 \u00ac='' THEN UJY04P '           DELETE DSET14;';\n IF %A5 ='D' & %DSET15 \u00ac='' THEN UJY04P '           DELETE DSET15;';\n IF %A6 ='D' & %DSET16 \u00ac='' THEN UJY04P '           DELETE DSET16;';\n IF %A7 ='D' & %DSET17 \u00ac='' THEN UJY04P '           DELETE DSET17;';\n IF %A8 ='D' & %DSET18 \u00ac='' THEN UJY04P '           DELETE DSET18;';\n IF %A9 ='D' & %DSET19 \u00ac='' THEN UJY04P '           DELETE DSET19;';\n IF %A10='D' & %DSET20 \u00ac='' THEN UJY04P '           DELETE DSET20;';\n        /* CHECK FOR A P */\n IF %A1 ='P' & %DSET11 \u00ac='' THEN UJY04P '           PRINT DSET11;';\n IF %A2 ='P' & %DSET12 \u00ac='' THEN UJY04P '           PRINT DSET12;';\n IF %A3 ='P' & %DSET13 \u00ac='' THEN UJY04P '           PRINT DSET13;';\n IF %A4 ='P' & %DSET14 \u00ac='' THEN UJY04P '           PRINT DSET14;';\n IF %A5 ='P' & %DSET15 \u00ac='' THEN UJY04P '           PRINT DSET15;';\n IF %A6 ='P' & %DSET16 \u00ac='' THEN UJY04P '           PRINT DSET16;';\n IF %A7 ='P' & %DSET17 \u00ac='' THEN UJY04P '           PRINT DSET17;';\n IF %A8 ='P' & %DSET18 \u00ac='' THEN UJY04P '           PRINT DSET18;';\n IF %A9 ='P' & %DSET19 \u00ac='' THEN UJY04P '           PRINT DSET19;';\n IF %A10='P' & %DSET20 \u00ac='' THEN UJY04P '           PRINT DSET20;';\n   END; /* IF %DSET11\u00ac= '' */\nIF %DSET21\u00ac='' THEN DO;\n   PANEL ('%TITLE')\n   ('IF MAXCC=0 DO YOU WANT TO CATALOG/DELETE KEEP, SCRATCH OR PRINT')\n   ('ANY OF THESE FILES ?')\n   ('PLACE A \"C\" \"D\" OR A \"P\" NEXT TO THE FILE')\n   ('%DSET21    ',A1,1)\n   ('%DSET22    ',A2,1)\n   ('%DSET23    ',A3,1)\n   ('%DSET24    ',A4,1)\n   ('%DSET25    ',A5,1)\n   ('%DSET26    ',A6,1)\n   ('%DSET27    ',A7,1)\n   ('%DSET28    ',A8,1)\n   ('%DSET29    ',A9,1)\n   ('%DSET30    ',A10,1);\n IF %A1='C' & %DSET21 \u00ac='' THEN UJY04P '           CATALOGUE DSET21;';\n IF %A2='C' & %DSET22 \u00ac='' THEN UJY04P '           CATALOGUE DSET22;';\n IF %A3='C' & %DSET23 \u00ac='' THEN UJY04P '           CATALOGUE DSET23;';\n IF %A4='C' & %DSET24 \u00ac='' THEN UJY04P '           CATALOGUE DSET24;';\n IF %A5='C' & %DSET25 \u00ac='' THEN UJY04P '           CATALOGUE DSET25;';\n IF %A6='C' & %DSET26 \u00ac='' THEN UJY04P '           CATALOGUE DSET26;';\n IF %A7='C' & %DSET27 \u00ac='' THEN UJY04P '           CATALOGUE DSET27;';\n IF %A8='C' & %DSET28 \u00ac='' THEN UJY04P '           CATALOGUE DSET28;';\n IF %A9='C' & %DSET29 \u00ac='' THEN UJY04P '           CATALOGUE DSET29;';\n IF %A10='C' & %DSET30 \u00ac='' THEN UJY04P '          CATALOGUE DSET30;';\n        /* CHECK FOR A D */\n IF %A1 ='D' & %DSET21 \u00ac='' THEN UJY04P '           DELETE DSET21;';\n IF %A2 ='D' & %DSET22 \u00ac='' THEN UJY04P '           DELETE DSET22;';\n IF %A3 ='D' & %DSET23 \u00ac='' THEN UJY04P '           DELETE DSET23;';\n IF %A4 ='D' & %DSET24 \u00ac='' THEN UJY04P '           DELETE DSET24;';\n IF %A5 ='D' & %DSET25 \u00ac='' THEN UJY04P '           DELETE DSET25;';\n IF %A6 ='D' & %DSET26 \u00ac='' THEN UJY04P '           DELETE DSET26;';\n IF %A7 ='D' & %DSET27 \u00ac='' THEN UJY04P '           DELETE DSET27;';\n IF %A8 ='D' & %DSET28 \u00ac='' THEN UJY04P '           DELETE DSET28;';\n IF %A9 ='D' & %DSET29 \u00ac='' THEN UJY04P '           DELETE DSET29;';\n IF %A10='D' & %DSET30 \u00ac='' THEN UJY04P '           DELETE DSET30;';\n        /* CHECK FOR A P */\n IF %A1 ='P' & %DSET21 \u00ac='' THEN UJY04P '           PRINT DSET21;';\n IF %A2 ='P' & %DSET22 \u00ac='' THEN UJY04P '           PRINT DSET22;';\n IF %A3 ='P' & %DSET23 \u00ac='' THEN UJY04P '           PRINT DSET23;';\n IF %A4 ='P' & %DSET24 \u00ac='' THEN UJY04P '           PRINT DSET24;';\n IF %A5 ='P' & %DSET25 \u00ac='' THEN UJY04P '           PRINT DSET25;';\n IF %A6 ='P' & %DSET26 \u00ac='' THEN UJY04P '           PRINT DSET26;';\n IF %A7 ='P' & %DSET27 \u00ac='' THEN UJY04P '           PRINT DSET27;';\n IF %A8 ='P' & %DSET28 \u00ac='' THEN UJY04P '           PRINT DSET28;';\n IF %A9 ='P' & %DSET29 \u00ac='' THEN UJY04P '           PRINT DSET29;';\n IF %A10='P' & %DSET30 \u00ac='' THEN UJY04P '           PRINT DSET30;';\n   END; /* IF %DSET21\u00ac= '' */\nIF %DSET31\u00ac='' THEN DO;\n   PANEL ('%TITLE')\n   ('IF MAXCC=0 DO YOU WANT TO CATALOG/DELETE KEEP, SCRATCH OR PRINT')\n   ('ANY OF THESE FILES ?')\n   ('PLACE A \"C\" \"D\" OR A \"P\" NEXT TO THE FILE')\n   ('%DSET31    ',A1,1)\n   ('%DSET32    ',A2,1)\n   ('%DSET33    ',A3,1)\n   ('%DSET34    ',A4,1)\n   ('%DSET35    ',A5,1)\n   ('%DSET36    ',A6,1)\n   ('%DSET37    ',A7,1)\n   ('%DSET38    ',A8,1)\n   ('%DSET39    ',A9,1)\n   ('%DSET40    ',A10,1);\n IF %A1='C' & %DSET31 \u00ac='' THEN UJY04P '           CATALOGUE DSET31;';\n IF %A2='C' & %DSET32 \u00ac='' THEN UJY04P '           CATALOGUE DSET32;';\n IF %A3='C' & %DSET33 \u00ac='' THEN UJY04P '           CATALOGUE DSET33;';\n IF %A4='C' & %DSET34 \u00ac='' THEN UJY04P '           CATALOGUE DSET34;';\n IF %A5='C' & %DSET35 \u00ac='' THEN UJY04P '           CATALOGUE DSET35;';\n IF %A6='C' & %DSET36 \u00ac='' THEN UJY04P '           CATALOGUE DSET36;';\n IF %A7='C' & %DSET36 \u00ac='' THEN UJY04P '           CATALOGUE DSET37;';\n IF %A8='C' & %DSET37 \u00ac='' THEN UJY04P '           CATALOGUE DSET38;';\n IF %A9='C' & %DSET38 \u00ac='' THEN UJY04P '           CATALOGUE DSET39;';\n IF %A10='C' & %DSET40 \u00ac='' THEN UJY04P '          CATALOGUE DSET40;';\n        /* CHECK FOR A D */\n IF %A1 ='D' & %DSET31 \u00ac='' THEN UJY04P '           DELETE DSET31;';\n IF %A2 ='D' & %DSET32 \u00ac='' THEN UJY04P '           DELETE DSET32;';\n IF %A3 ='D' & %DSET33 \u00ac='' THEN UJY04P '           DELETE DSET33;';\n IF %A4 ='D' & %DSET34 \u00ac='' THEN UJY04P '           DELETE DSET34;';\n IF %A5 ='D' & %DSET35 \u00ac='' THEN UJY04P '           DELETE DSET35;';\n IF %A6 ='D' & %DSET36 \u00ac='' THEN UJY04P '           DELETE DSET36;';\n IF %A7 ='D' & %DSET37 \u00ac='' THEN UJY04P '           DELETE DSET37;';\n IF %A8 ='D' & %DSET38 \u00ac='' THEN UJY04P '           DELETE DSET38;';\n IF %A9 ='D' & %DSET39 \u00ac='' THEN UJY04P '           DELETE DSET39;';\n IF %A10='D' & %DSET40 \u00ac='' THEN UJY04P '           DELETE DSET40;';\n        /* CHECK FOR A P */\n IF %A1 ='P' & %DSET31 \u00ac='' THEN UJY04P '           PRINT DSET31;';\n IF %A2 ='P' & %DSET32 \u00ac='' THEN UJY04P '           PRINT DSET32;';\n IF %A3 ='P' & %DSET33 \u00ac='' THEN UJY04P '           PRINT DSET33;';\n IF %A4 ='P' & %DSET34 \u00ac='' THEN UJY04P '           PRINT DSET34;';\n IF %A5 ='P' & %DSET35 \u00ac='' THEN UJY04P '           PRINT DSET35;';\n IF %A6 ='P' & %DSET36 \u00ac='' THEN UJY04P '           PRINT DSET36;';\n IF %A7 ='P' & %DSET37 \u00ac='' THEN UJY04P '           PRINT DSET37;';\n IF %A8 ='P' & %DSET38 \u00ac='' THEN UJY04P '           PRINT DSET38;';\n IF %A9 ='P' & %DSET39 \u00ac='' THEN UJY04P '           PRINT DSET39;';\n IF %A10='P' & %DSET40 \u00ac='' THEN UJY04P '           PRINT DSET40;';\n   END; /* IF %DSET31\u00ac= '' */\nIF %DSET41\u00ac='' THEN DO;\n   PANEL ('%TITLE')\n   ('IF MAXCC=0 DO YOU WANT TO CATALOG/DELETE KEEP, SCRATCH OR PRINT')\n   ('ANY OF THESE FILES ?')\n   ('PLACE A \"C\" \"D\" OR A \"P\" NEXT TO THE FILE')\n   ('%DSET41    ',A1,1)\n   ('%DSET42    ',A2,1)\n   ('%DSET43    ',A3,1)\n   ('%DSET44    ',A4,1)\n   ('%DSET45    ',A5,1)\n   ('%DSET46    ',A6,1)\n   ('%DSET47    ',A7,1)\n   ('%DSET48    ',A8,1)\n   ('%DSET49    ',A9,1)\n   ('%DSET50    ',A10,1);\n IF %A1='C' & %DSET41 \u00ac='' THEN UJY04P '           CATALOGUE DSET41;';\n IF %A2='C' & %DSET42 \u00ac='' THEN UJY04P '           CATALOGUE DSET42;';\n IF %A3='C' & %DSET43 \u00ac='' THEN UJY04P '           CATALOGUE DSET43;';\n IF %A4='C' & %DSET44 \u00ac='' THEN UJY04P '           CATALOGUE DSET44;';\n IF %A5='C' & %DSET45 \u00ac='' THEN UJY04P '           CATALOGUE DSET45;';\n IF %A6='C' & %DSET46 \u00ac='' THEN UJY04P '           CATALOGUE DSET46;';\n IF %A7='C' & %DSET47 \u00ac='' THEN UJY04P '           CATALOGUE DSET47;';\n IF %A8='C' & %DSET48 \u00ac='' THEN UJY04P '           CATALOGUE DSET48;';\n IF %A9='C' & %DSET49 \u00ac='' THEN UJY04P '           CATALOGUE DSET49;';\n IF %A10='C' & %DSET50 \u00ac='' THEN UJY04P '           CATALOGUE DSET50;';\n        /* CHECK FOR A D */\n IF %A1 ='D' & %DSET41 \u00ac='' THEN UJY04P '           DELETE DSET41;';\n IF %A2 ='D' & %DSET42 \u00ac='' THEN UJY04P '           DELETE DSET42;';\n IF %A3 ='D' & %DSET43 \u00ac='' THEN UJY04P '           DELETE DSET43;';\n IF %A4 ='D' & %DSET44 \u00ac='' THEN UJY04P '           DELETE DSET44;';\n IF %A5 ='D' & %DSET45 \u00ac='' THEN UJY04P '           DELETE DSET45;';\n IF %A6 ='D' & %DSET46 \u00ac='' THEN UJY04P '           DELETE DSET46;';\n IF %A7 ='D' & %DSET47 \u00ac='' THEN UJY04P '           DELETE DSET47;';\n IF %A8 ='D' & %DSET48 \u00ac='' THEN UJY04P '           DELETE DSET48;';\n IF %A9 ='D' & %DSET49 \u00ac='' THEN UJY04P '           DELETE DSET49;';\n IF %A10 ='D' & %DSET50 \u00ac='' THEN UJY04P '           DELETE DSET50;';\n        /* CHECK FOR A P */\n IF %A1 ='P' & %DSET41 \u00ac='' THEN UJY04P '           PRINT DSET41;';\n IF %A2 ='P' & %DSET42 \u00ac='' THEN UJY04P '           PRINT DSET42;';\n IF %A3 ='P' & %DSET43 \u00ac='' THEN UJY04P '           PRINT DSET43;';\n IF %A4 ='P' & %DSET44 \u00ac='' THEN UJY04P '           PRINT DSET44;';\n IF %A5 ='P' & %DSET45 \u00ac='' THEN UJY04P '           PRINT DSET45;';\n IF %A6 ='P' & %DSET46 \u00ac='' THEN UJY04P '           PRINT DSET46;';\n IF %A7 ='P' & %DSET47 \u00ac='' THEN UJY04P '           PRINT DSET47;';\n IF %A8 ='P' & %DSET48 \u00ac='' THEN UJY04P '           PRINT DSET48;';\n IF %A9 ='P' & %DSET49 \u00ac='' THEN UJY04P '           PRINT DSET49;';\n IF %A10 ='P' & %DSET50 \u00ac='' THEN UJY04P '           PRINT DSET50;';\n END; /* END PROG41*/\n /*  DO NOT ACTIVATE THIS SECTION **************************/\n/* PANEL ('YOU MAY NOW DELETE ANY PROGRAMS FROM THE')\n         ('PROGRAM REGISTER. JUST ENTER YES AGAINST')\n         ('THE PROGRAM NAME.                       ')\n         ('%P1       ',D1,3)\n         ('%P2       ',D2,3)\n         ('%P3       ',D3,3)\n         ('%P4       ',D4,3)\n         ('%P5       ',D5,3)\n         ('%P6       ',D6,3)\n         ('%P7       ',D7,3)\n         ('%P8       ',D8,3)\n         ('%P9       ',D9,3)\n         ('%P10      ',D10,3);\n IF %P1\u00ac='' & %D1='YES' THEN UJY04P '           DELETE %JOLDS(%P1);';\n IF %P2\u00ac='' & %D1='YES' THEN UJY04P '           DELETE %JOLDS(%P2);';\n IF %P3\u00ac='' & %D1='YES' THEN UJY04P '           DELETE %JOLDS(%P3);';\n IF %P4\u00ac='' & %D1='YES' THEN UJY04P '           DELETE %JOLDS(%P4);';\n IF %P5\u00ac='' & %D1='YES' THEN UJY04P '           DELETE %JOLDS(%P5);';\n IF %P6\u00ac='' & %D1='YES' THEN UJY04P '           DELETE %JOLDS(%P6);';\n IF %P7\u00ac='' & %D1='YES' THEN UJY04P '           DELETE %JOLDS(%P7);';\n IF %P8\u00ac='' & %D1='YES' THEN UJY04P '           DELETE %JOLDS(%P8);';\n IF %P9\u00ac='' & %D1='YES' THEN UJY04P '           DELETE %JOLDS(%P9);';\n IF %P10\u00ac='' & %D1='YES' THEN UJY04P '           DELETE %JOLDS(%P10);';\n IF %P11\u00ac='' & %D1='YES' THEN UJY04P '        DELETE %JOLDS(%P11);'; */\n   UJY04P '  END;';\n   END;\n   PANEL ('YOU HAVE NOW FINISHED THE BUILDJOB MACRO')\n        /('THE JOL GENEREATED FORM THIS MACRO WILL BE')\n         ('SAVED IN %JOLDS MEMBER %SAVEIN.')\n       //('PRESS THE ENTER KEY TO SAVE THE JOL CREATED')\n         ('OR SYSPFK 3 (OR 15) TO CANCEL THE SAVE')\n       //('WHEN ASKED \"DO YOU WANT TO SUBMIT THE JOB ?\" ')\n         ('TYPE IN ',A,2,'NO')\n         ('BECAUSE JOL HAS DYNAMICALLY SAVED YOUR %SAVEIN MEMBER')\n         ('TO YOUR %JOLDS LIBRARY');\n    IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n    ELSE DO;\n  IF %SAVEIN \u00ac='' & %JOLDS \u00ac='' THEN DO;\n            UJY06E '%JOLDS' %SAVEIN;\n            /* WRITE '%JOLDS %SAVEIN'; */\n         END;\n         ELSE DO; WRITE 'ENDJOB GENERATED BECAUSE SAVE';\n                  WRITE 'DATA SET NAME NULL ';\n         END;\n    END;\nEND; /* END OF MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIBILD1": {"ttr": 4613, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x83\\x02O\\x00\\x83\\x02O\\x16B\\x00\\x0c\\x00\\x1e\\x00\\x0b\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1983-01-24T00:00:00", "modifydate": "1983-01-24T16:42:00", "lines": 12, "newlines": 30, "modlines": 11, "user": "JOL"}, "text": " CAIBILD1: MACRO;\n   PANEL ('    CAIJOL - BUILDJOB ')\n   ('  SAVING YOUR BUILDJOB CREATED DATASET.                        ')\n //(' BUILDJOB WILL CREATE A DATASET CONTAINING THE JOL             ')\n   (' STATEMENTS BUILT DURING YOUR BUILDJOB SESSION. BUILDJOB WILL  ')\n   (' ASK YOU AT THE VERY BEGINNING OF THE SESSION WHERE YOU WOULD  ')\n   (' LIKE YOUR JOL JOB SAVED. THE USUAL PLACE WOULD BE YOUR OWN    ')\n   (' JOL DATASET ',JOLDS,14,'%SYSUID.JOL')\n //(' PRESS ENTER FOR AN EXAMPLE OF THE PANEL PROVIDED BY BUILDJOB  ')\n   (' FOR YOU TO ENTER THIS INFORMATION.',X,1);\n CAIBILDA;\n END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILD2": {"ttr": 4615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x83\\x02O\\x00\\x84\\x02\\x7f\\x16#\\x00\\r\\x00\\x0c\\x00\\x0c\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1983-01-24T00:00:00", "modifydate": "1984-01-27T16:23:00", "lines": 13, "newlines": 12, "modlines": 12, "user": "JOL"}, "text": " CAIBILD2: MACRO;\n   PANEL ('    CAIJOL - BUILDJOB ')\n   ('  DEFINING PROGRAMS TO BE RUN        .                        ')\n //(' BUILDJOB WILL REQUIRE YOU TO PROVIDE THE NAMES OF ALL THE     ')\n   (' PROGRAMS YOU WISH TO RUN IN THE PROCEDURE YOU WANT BUILDJOB   ')\n   (' TO CREATE FOR YOU. ALL THESE JOBS NEED TO BE REGISTERED       ')\n   (' SO THAT BUILDJOB CAN GET THE FILE INFORMATION IT NEEDS TO     ')\n   (' BUILD THE PROGRAM DECLARES. SHOULD THESE PROGRAMS NOT BE ')\n   (' REGISTERED YOU MAY REGISTER THEM AS YOU GO ')\n //(' PRESS ENTER FOR AN EXAMPLE OF THE PANEL DISPLAYED BY BUILDJOB')\n   (' WHEN IT ASKS FOR THIS INFORMATION',X,1);\n CAIBILDB;\n END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILD3": {"ttr": 4617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x83\\x02O\\x00\\x83\\x02_\\x15H\\x00\\n\\x00\\r\\x00\\x07\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1983-01-24T00:00:00", "modifydate": "1983-01-25T15:48:00", "lines": 10, "newlines": 13, "modlines": 7, "user": "JOL"}, "text": " CAIBILD3: MACRO;\n   PANEL ('    CAIJOL - BUILDJOB ')\n   ('  DEFINING JOB CARD DETAILS                                   ')\n //(' BUILDJOB WILL DISPLAY A PANEL CONTAINING ALL THE JOB          ')\n   (' CARD DETAILS NECESSARY TO RUN YOUR JOB. ANY OF THESE          ')\n   (' DETAILS MAY BE OVERRIDDEN.                                    ')\n //(' PRESS ENTER FOR AN EXAMPLE OF THE PANEL DISPLAYED BY BUILDJOB')\n   (' WHEN IT ASKS FOR THIS INFORMATION',X,1);\n CAIBILDC;\n END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILD4": {"ttr": 4619, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x83\\x02_\\x00\\x83\\x02_\\x15H\\x00\\x0c\\x00\\n\\x00\\t\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1983-01-25T00:00:00", "modifydate": "1983-01-25T15:48:00", "lines": 12, "newlines": 10, "modlines": 9, "user": "JOL"}, "text": " CAIBILD4: MACRO;\n   PANEL ('    CAIJOL - BUILDJOB ')\n   ('  DEFINING DATASET NAMES                                      ')\n //(' BUILDJOB WILL CHECK THE REGISTER FOR EACH PROGRAM YOU HAVE    ')\n   (' ASKED TO BE RUN (OTHER THAN PRINT, COPY, COMPRESS AND SORT)   ')\n   (' AND WILL ASK THE USER FOR A DATASET NAME FOR EACH FILE THAT   ')\n   (' IS REQUIRED TO RUN EACH PROGRAM. FROM THIS INFORMATION THE   ')\n   (' PROGRAM DECLARES CAN BE BUILT')\n //(' PRESS ENTER FOR AN EXAMPLE OF THE SCREEN USED TO ASK FOR     ')\n   (' THIS INFORMATION',X,1);\n CAIBILDD;\n END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILD5": {"ttr": 4621, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x83\\x02_\\x00\\x83\\x02_\\x15I\\x00\\r\\x00\\x0c\\x00\\n\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1983-01-25T00:00:00", "modifydate": "1983-01-25T15:49:00", "lines": 13, "newlines": 12, "modlines": 10, "user": "JOL"}, "text": " CAIBILD5: MACRO;\n   PANEL ('    CAIJOL - BUILDJOB ')\n   ('  DEFINING DATASET INFORMATION                                ')\n //(' BUILDJOB WILL TAKE EACH OF THE DATASET NAMES PREVIOUSLY       ')\n   (' DEFINED AND ASK FOR ALL THE INFORMATION REQUIRED TO MAKE      ')\n   (' THEM AVAILABLE TO YOUR PROGRAMS, EITHER TO BE READ,           ')\n   (' WRITTEN, OR UPDATED. IF ONE DATASET IS SIMILAR TO ANOTHER    ')\n   (' THERE IS THE FACILITY TO SAY THIS, SO AVOIDING ADDITIONAL     ')\n   (' TYPING ')\n //(' PRESS ENTER FOR AN EXAMPLE OF THE SCREEN USED TO ASK FOR     ')\n   (' THIS INFORMATION',X,1);\n CAIBILDE;\n END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILD6": {"ttr": 4623, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x83\\x02_\\x00\\x83\\x02_\\x15I\\x00\\x0c\\x00\\r\\x00\\t\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1983-01-25T00:00:00", "modifydate": "1983-01-25T15:49:00", "lines": 12, "newlines": 13, "modlines": 9, "user": "JOL"}, "text": " CAIBILD6: MACRO;\n   PANEL ('    CAIJOL - BUILDJOB ')\n   ('  DEFINING DATASET DISPOSITION                                ')\n //(' BUILDJOB WILL TAKE EACH OF THE DATASETS WHICH HAS BEEN        ')\n   (' DECLARED PREVIOUSL FOR OUTPUT AND ASK YOU WHETHER YOU WISH TO ')\n   (' CATALOG, KEEP DELETE OR PRINT THEM.                           ')\n   (' CATALOG,KEEP,DELETE OR PRINT STATEMENTS ARE THEN BUILT FOR ')\n   (' THESE DATASETS AND INSERTED AT THE END OF THE PROCEDURE.      ')\n //(' PRESS ENTER FOR AN EXAMPLE OF THE SCREEN USED TO ASK FOR     ')\n   (' THIS INFORMATION',X,1);\n CAIBILDF;\n END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILD7": {"ttr": 4625, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x83\\x02_\\x00\\x83\\x02\\x7f\\x15I\\x00\\x12\\x00\\x0c\\x00\\x10\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1983-01-25T00:00:00", "modifydate": "1983-01-27T15:49:00", "lines": 18, "newlines": 12, "modlines": 16, "user": "JOL"}, "text": " CAIBILD7: MACRO;\n   PANEL ('    CAIJOL - BUILDJOB ')\n //('  HAVING COME THIS FAR BUILDJOB HAS NOW BUILT A PROCEDURE     ')\n   (' WHICH WILL RUN THE PROGRAMS YOU HAVE REQUESTED AND HAS        ')\n   (' PLACED THIS PROCEDURE INTO THE DATASET YOU HAVE NOMINATED.    ')\n   (' THIS PROCEDURE MAY NOW BE EDITED BY YOU AND STATEMENTS        ')\n   (' ADDED,MODIFIED,DELETED OR GENERALLY TIDIED UP.             ')\n   (' WHEN YOU ARE SATISFIED WITH YOUR PROCEDURE IT CAN BE ')\n   (' COMPILED LIKE ANY OTHER JOL PROCEDURE ')\n //(' THIS IS THE END OF THE SECTION ON BUILDJOB. YOU MAY HOWEVER   ')\n   (' DO THE PRACTICAL EXERCISE THAT FOLLOWS WHICH WILL DEMONSTRATE')\n   (' THE BUIDJOB FUNCTIONS')\n //(' ENTER YES TO TAKE THE PRACTICAL EXERCISE ')\n   (' OR ANYTHING ELSE TO RETURN TO THE MAIN MENU',X,1);\n   IF %X='YES' | %X='Y' THEN DO;\n CAIBILD8;\n END;\n END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILD8": {"ttr": 4627, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x83\\x02o\\x00\\x83\\x02o\\x16W\\x00\\x0e\\x00$\\x00\\n\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1983-01-26T00:00:00", "modifydate": "1983-01-26T16:57:00", "lines": 14, "newlines": 36, "modlines": 10, "user": "JOL"}, "text": " CAIBILD8: MACRO;\n   PANEL ('                    CAIJOL - BUILDJOB   PRACTICAL')\n //('   AS A PRACTICAL EXERCISE WE WILL GO THROUGH A             ')\n   ('   BUILDJOB PROGRAM WHERE THE PANELS WILL BE PRESENTED TO   ')\n   ('   YOU AND YOU MAY FILL THEM IN AS YOU WISH. THE DATASET YOU  ')\n   ('   CHOOSE TO SAVE YOUR DATASET IN SHOULD BE THE ONE SPECIFIED.')\n   ('   SEE YOUR SUPERVISOR BEFORE CHANGING IT TO AVOID OVERWRITING')\n   ('   SOMEONE ELSES DATA.                                        ')\n  /('   ENTER TO CONTINUE OR PRESS PFK3/12 TO EXIT         ',X,1);\n   IF %SYSPFK\u00ac=3 & %SYSPFK\u00ac=12 THEN DO;\n   CAIBILDP;\n   CAIBILD9;\n   END;\n   END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBILD9": {"ttr": 4629, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x83\\x02o\\x00\\x83\\x02o\\x16U\\x00\\t\\x00\\x0e\\x00\\x05\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1983-01-26T00:00:00", "modifydate": "1983-01-26T16:55:00", "lines": 9, "newlines": 14, "modlines": 5, "user": "JOL"}, "text": " CAIBILD8: MACRO;\n   PANEL ('                    CAIJOL - BUILDJOB   PRACTICAL')\n //('   YOU HAVE NOW COMPLETED YOUR BUILDJOB EXERCISE.           ')\n  /('   IF YOU NOW GET OUT OF CAIJOL AND EDIT THE MEMBER         ')\n   ('   CONTAINING  THE PROCEDURE YOU HAVE JUST BUILT YOU MAY      ')\n   ('   CHANGE OR MODIFY IT AS YOU WISH.                           ')\n  /('   ENTER TO CONTINUE OR PRESS PFK3/12 TO EXIT         ',X,1);\n   IF %SYSPFK=3 | %SYSPFK=12 THEN EXIT;\n   END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIBLANK": {"ttr": 4631, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x82\\x08\\x1f\\x00\\x84\\x08\\x0f\\x14\\x19\\x00M\\x00V\\x00\\x03\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1982-03-22T00:00:00", "modifydate": "1984-03-20T14:19:00", "lines": 77, "newlines": 86, "modlines": 3, "user": "JOL"}, "text": " CAIBLANK:  MACRO; /* change the name of the macro */\n DECLARE %NUM INIT 1;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;  /* This is incremented every time a new panel is\n                        displayed  */\n PANEL ('               ',X,40,'CAIBLANK MACRO')\n /('Place your text here in this and the following panels')\n  ('If you wish to make a line stand out use ',#2,45,' STAND OUT')\n  ('or some such.')\n  ('Remember that the maximum number of lines allowed is 22.')\n  ('                            ')\n  ('When you have finished writing and testing your NEW CAI do the')\n  ('following')\n  (' 1. Make sure you have not used a macro with the same name as')\n  ('    any of the other CAImacros.')\n  (' 2. Change the MAIN MENU PANEL in the CAIJOL macro.')\n  (' 3. Increment %MAXCHAP by 1 in CAIJOL (in DECLARE section of it) ')\n  (' 4. add to the IF statement in CAIJOL accordingly.')\n  (' 5. If you have any problems contact you local JOL representative.')\n  (' 6. when testing your NEW chapter take out the command')\n  ('    JOLOPT FLAG5 only while testing your NEW chapter.')\n  ('              ');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('               ',X,40,'CAIBLANK MACRO')\n /(' fill in as needed ')\n  ('              ')\n  ('              ')\n  ('              ')\n  ('              ')\n  ('              ')\n  ('              ')\n  ('              ')\n  ('              ')\n  ('              ')\n  ('              ');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 &\n IF %SYSPFK \u00ac= 15 THEN DO; /* <===============================|  */\nLABEL PAN%NUM;                                           /*  |  */\n PANEL ('               ',X,40,'CAIBLANK MACRO')         /*  |  */\n /('fill in as needed')                                  /*  |  */\n  ('if not enough copy the block of code shown here')    /*  |  */\n  ('BEFORE the line \"%CHNUM = %CHNUM + 1;\".')            /*  |  */\n  ('              ')                                     /*  |  */\n  ('              ')                                     /*  |  */\n  ('              ')                                     /*  |  */\n  ('              ')                                     /*  |  */\n  ('              ')                                     /*  |  */\n  ('              ')                                     /*  |  */\n  ('              ');                                    /*  |  */\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;    /*  |  */\n          %NUM = %NUM -1;                                /*  |  */\n          REDO PAN%NUM;                                  /*  |  */\n       END;                                              /*  |  */\n       ELSE %NUM = %NUM + 1;                             /*  |  */\n END;  /* <==================================================|  */\n        %CHNUM = %CHNUM + 1;\n        IF %CHNUM > %MAXCHAP THEN DO;\n           PANEL ////('  This was the LAST chapter of this course')\n            /('  Press ENTER to get back to main index/menu.',X,1);\n           %CHNUM = 1;\n           %SYSPFK = 3;\n           %SYSPFK = 15;\n        END;\nEND; /* OF CAITERM MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIBUILD": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x00\\x00\\x83\\x02O\\x00\\x84\\x08\\x0f\\x14 \\x00&\\x00\\x10\\x00\\x01\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1983-01-24T00:00:00", "modifydate": "1984-03-20T14:20:00", "lines": 38, "newlines": 16, "modlines": 1, "user": "JOL"}, "text": " CAIBUILD: MACRO;\n DCL %BILD INIT '1';\n   PANEL ('                    CAIJOL - BUILDJOB ')\n //('   BUILDJOB IS DESIGNED TO ASSIST THE USER TO BUILD JOL     ')\n   ('   PROCEDURES. BUILDJOB WILL PRESENT THE USER WITH A NUMBER  ')\n   ('   OF PANELS WHICH REQUEST INFORMATION ABOUT THE JOL PROCEDURE')\n   ('   HE WISHES TO WRITE. FOR BUILDJOB TO WORK IT WILL BE        ')\n   ('   NECESSARY FOR ANY PROGRAMS OTHER THAN SORT, PRINT, MERGE   ')\n   ('   AND COMPRESS TO BE REGISTERED (SEE REGISTER SECTION).      ')\n   ('   THE USER IS ASKED FOR INFORMATION ABOUT THE JOBCARD, PROGRAMS')\n   ('   DATASETS AND ALL OTHER INFORMATION NEEDED TO BUILD A JOL JOB.')\n   ('   THIS INFORMATIN IS THEN COMPILED INTO AN EXECUTABLE JOL      ')\n   ('   PROCEDURE WHICH WILL BE SAVED INTO THE USERS OWN DATASET.    ')\n  /('     THE FOLLOWING LISTS EACH FUNCTION OF BUILDJOB AND MAY      ')\n   ('   BE VIEWED IN SEQUENCE OR INDIVIDUALLY.                       ')\n  /('   ENTER TO CONTINUE OR PRESS PFK3/12 TO EXIT         ',X,1);\n  LABEL MENU;\n   PANEL ('    CAIJOL - BUILDJOB  MAIN MENU ')\n //('  THE FOLLOWING TOPICS MAY BE VIEWED IN SEQUENCE OR            ')\n   (' SEPERATELY.')\n  /(' 1. HOW TO SAVE YOUR BUILDJOB PROCEDURE.                       ')\n   (' 2. DEFINING THE PROGRAMS YOU WANT TO RUN.                     ')\n   (' 3. DEFINING JOB CARD DETAILS.                                 ')\n   (' 4. DEFINING DATASET NAMES.                                    ')\n   (' 5. DEFINING DATASET INFORMATION.                              ')\n   (' 6. DEFINING DATASET DISPOSITION.                              ')\n   (' 7. RUNNING YOUR JOB.                                          ')\n   (' 8. PRACTICAL EXERCISE                                         ')\n  /(' PRESS ENTER TO START, A NUMBER TO SELECT A TOPIC              ')\n   ('   PFK7 TO RETURN OR PFK3/12 TO EXIT        ',BILD,1,'%BILD');\n   IF %SYSPFK=3 | %SYSPFK=12 THEN EXIT;\n   IF %SYSPFK\u00ac=7 & %SYSPFK\u00ac=19 & %SYSPFK\u00ac=3 & %SYSPFK\u00ac=12 THEN DO;\n   CAIBILD%BILD;\n   IF %BILD='8' THEN %BILD='0';\n   %BILD=%BILD+1;\n   REDO MENU;\n   END;\n   END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAICARD": {"ttr": 4867, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAICARD : MACRO;\n  if syspfk=3 | syspfk=15 then exit;\npan005:\n   PANEL blue box\n  /(ctr hi 'Card Image Definition')\n   (ctr hi '=====================')\n /('    The DECLARE * instruction defines the beginning of card data.')\n  ('    The actual data cards follow the definition, and to inform the')\n  ('    system where the last card is; an EOF; is coded in columns 1'\n    ' to 4.')\n   /('     Format :   'hi'      / DECLARE \\ ')\n    (hi'                  or {  DEFINE   }  name *  options ; ')\n    (hi'                  or  \\   DCL   / ')\n    ('                      followed by cards ...')\n    (hi'                      EOF; ')\n   /('   The OPTIONS may be coded in any order and are:')\n    ('       REPLACE')\n    ('       PRINTNONE | PRINTALL')\n    ('       SPLIT | NOSPLIT')\n   /('       FB  recordsize, blocksize')\n    ('       VB  recordsize')\n    %helpline;\n if syspfk=7 | syspfk=19 then redo pan005;\n  if syspfk=3 | syspfk=15 then exit;\npan010:\n   PANEL blue box\n  /(ctr hi 'Card Image Definition')\n//('     Cards are one of a number of methods of inputing information')\n  ('     to a computer. Cards are used to input data to processing')\n  ('     programs, or instructions to utility programs. Data cards may')\n  ('     be numbered in thousands, but parameter cards usually number')\n  ('     from 1 to 10 cards. Small or large card files may be included')\n  ('     within your JOL program card deck.')\n /('     REPLACE OPTION : some programs, usually utilities, require')\n  ('     instructions and parameters on card files. The SORT program is')\n  ('     such a utility program; it requires, for example, the sort')\n  ('     control field information.')\n /('     To provide maximum flexibility, you may write symbolic')\n  ('     variable names on card files, and the current values of the')\n  ('     symbolic variables will replace the variables.')\n       %helpline;\n\n if syspfk=7 | syspfk=19 then redo pan005;\n  if syspfk=3 | syspfk=15 then exit;\nPAN015:\n   PANEL blue box\n  /(ctr hi 'Card Image Definition')\n//('     To create a card file with the day and date on the first')\n  ('     card, code  'hi'DECLARE CARDFIL * REPLACE; ')\n  ('                 'hi'  %%DAY%%DAYNO  ')\n  ('                 'hi'EOF; /* EOF; STARTS ON COLUMN 1,ENDS ON 4. */')\n /('     where %%DAY and %%DATE are symbolic variables, internal to')\n  ('     Jol.  If %%DAY was MONDAY and %%DAYNO was the 1st, then the')\n  ('     card be would be' hi'  MONDAY  1')\n /('     The program can read the card file and use the day and date')\n  ('     number for any purpose it desires e.g. to print headings etc.')\n//('          PRINTNONE OPTION : will NOT print any cards.')\n /('          PRINTALL OPTION  : will print ALL cards.')\n       %helpline;\n\n if syspfk=7 | syspfk=19 then redo pan010;\n  if syspfk=3 | syspfk=15 then exit;\npan020:\n   PANEL blue box\n   (ctr hi 'Examples of the Card Image Definition')\n /('   1.   ' hi 'DECLARE CARDIN * ;')\n  ('        ' hi 'CARD1')\n  ('        ' hi 'EOF;')\n /('   The above declaration defines a DSID (CARDIN) which may be read')\n  ('   or printed.  It contains one card.')\n /('   2.   ' hi 'DECLARE CARDS * VB 30,84 ;')\n  ('        ' hi 'THIS CARD FILE WILL BE')\n  ('        ' hi 'MADE INTO VARIABLE LENGTH RECORDS')\n  ('        ' hi 'EOF; ')\n /('   This declaration defines a DSID that will have the character-')\n  ('   istics of Variable Blocked data set when a program reads it.')\n /('   3.   ' hi 'DECLARE CARDFIL * ; ')\n  ('        ' hi 'HELLO %%NAME ')\n  ('        ' hi 'EOF; ')\n/ ('   If %%NAME was %SYSUID then card will be HELLO %SYSUID.')\n        %helpline;\n\n if syspfk=7 | syspfk=19 then redo pan015;\n if syspfk=3 | syspfk=15 then exit;\n   COM#NUM = COM#NUM + 1;\n   if COM#NUM > MAX#COM THEN DO;\n PANEL box ///////(ctr ' This is the end of this section.')\n       /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n      COM#NUM=1;\n      syspfk=3;\n   end;\n  end;  /* OF CAICARD MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAICATLG": {"ttr": 4870, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAICATLG : MACRO;\n  IF syspfk=3 | syspfk=15 THEN exit;\n  PANEL blue box\n /(ctr hi '---- CATALOG instruction ----')\n  (ctr hi '=============================')\n /('     The CATALOG instruction is used to place the dataset name,')\n  ('     its associated volume, unit information and label/file')\n  ('     number in the system catalog so that it may be referenced in'\n  ('     another job without the need to specify the volume or unit')\n  ('     on which it resides. The dataset is also KEPT.')\n /(hi\n   '     Format:             / dsid \\ ')\n  (hi\n   '                CATALOG {        }   ON <VOL> volume <UNIT> unit;')\n  (hi\n   '                         \\dsname/ ')\n /('    The CATALOG instruction consists of two parts: KEEPing the')\n  ('    dataset (if it was created in the job), and entering the')\n  ('    dataset name in the system catalog.')\n /('    The rest is the same as the KEEP instruction as well as the')\n  ('    examples, except replace KEEP with CATALOG.')\n  ('    For example: ' hi ' CATALOG TEST.DATA.SET1;')\n        %helpline;\n IF syspfk=7 | syspfk=19 then panel reread;\n COMNUM = COMNUM + 1;\n IF COMNUM > MAXCOM THEN DO;\n     PANEL box ///////(ctr ' This is the end of this section.')\n           /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n     COMNUM = 1;\n     syspfk = 3;\n     end;\n END; /* OF CAICATLG MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAICLEAR": {"ttr": 4872, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x82\\x08?\\x00\\x82\\x08?\\x15\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-03-24T00:00:00", "modifydate": "1982-03-24T15:00:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "JOL"}, "text": "CAICLEAR : MACRO;\nEND; /* OF THIS MACRO */\n     %#1 = ' ';\n     %#2 = ' ';\n     %#3 = ' ';\n     %#4 = ' ';\n     %#5 = ' ';\n     %#6 = ' ';\n     %#7 = ' ';\n     %#8 = ' ';\n     %#9 = ' ';\n     %#10 = ' ';\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAICOMER": {"ttr": 4874, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAICOMER: MACRO;\n   PANEL blue box\n //////////\n(ctr hi 'Would you like to take a revision test')\n(ctr hi 'of this chapter ?',#4,3,'NO');\nif #4 = 'YES' | #4 = 'Y' then DO; CAACOMER; syspfk = 0; END;\nif syspfk=3 | syspfk=15 then exit;\nPAN005:\nPANEL blue box/ (ctr hi 'COMMUNICATIONS AND ERROR HANDLING')\n(ctr hi '(including READ/WRITE)')\n /('        There are a number of commands in JOL for operator')\n  ('        communications, exceptions and error handling. They are:-')\n//(hi '            DISPLAY, RETURN, TYPE, STOP,')\n  (hi '            STOP WHEN, ON ERROR, SIGNAL ERROR.')\n /('        We shall discuss them here in some detail.')\n        %helpline;\nif syspfk=7 | syspfk=19 then goto pan005;\nif syspfk=3 | syspfk=15 then exit;\nPAN010:\nPANEL blue box\n /('     The DISPLAY instruction prints a message on the Systems')\n  ('     Log. The message is NOT typed on the operators console.')\n  ('     The TYPE, SIGNAL ERROR, or STOP instruction should be used if')\n  ('     the message is required to be typed on the operators console.')\n /('     Format:')\n /(hi '           DISPLAY  { number | ''message'' } ;')\n /('     The DISPLAY instruction is most often used to inform those')\n  ('     examining the output from the job about certain situations')\n  ('     or conditions. It can, for example, be used to indicate when')\n  ('     a restart point has been passed, and if a restart is required')\n  ('     for any reason - how it can be done.')\n /('     NOTE: ''message'' must be less than 100 characters and')\n  ('     enclosed in single quotes.')\n        %helpline;\nif syspfk=7 | syspfk=19 then goto pan005;\nif syspfk=3 | syspfk=15 then exit;\nPAN015:\nPANEL blue box\n/(hi ctr 'Examples of the DISPLAY instruction:-')\n /('     1.   ' hi 'DISPLAY 10;')\n /('          The message JOLE11-01 ''10'' will appear'\n' on the System Log.')\n /('     2.   ' hi '%%START=''SORT10'';')\n  ('          ' hi 'DISPLAY ''RESTARTING AT %%START'';')\n /('          The following message will appear on the Systems Log:')\n /('           ' hi 'UJC10-01 ''RESTARTING AT SORT10''')\n        %helpline;\nif syspfk=7 | syspfk=19 then goto pan010;\nif syspfk=3 | syspfk=15 then exit;\nPAN020:\nPANEL blue box\n/(hi ctr 'The RETURN instruction.')\n /('        The RETURN instruction writes the message to the Systems')\n  ('        Log terminates the job immediately.')\n /('        The message is not displayed on the operators console.')\n  ('        After execution of the RETURN, the remainder of the job is')\n  ('        flushed and no further processing is possible.')\n /('        Example:')\n /(hi '              RETURN ''SIMPLE EXAMPLE OF RETURN'' ;')\n /('        The message ''SIMPLE EXAMPLE OF RETURN'' will be displayed')\n  ('        on the Systems Log and processing will be terminated')\n  ('        immediately.')\n        %helpline;\nif syspfk=7 | syspfk=19 then goto pan015;\nif syspfk=3 | syspfk=15 then exit;\nPAN025:\nPANEL blue box\n/(hi ctr 'The TYPE instruction.')\n /('    The TYPE instruction types a message on the operators')\n  ('    console and the Systems log.')\n /('    It is most often used to inform the operators about some')\n  ('    situations or conditions. It can be used, for example, to')\n  ('    inform the operator that a particular job will not execute for')\n  ('    some reason or that a critical error occured in the job and it')\n  ('    will be terminating before reaching the normal end of the job.')\n /('    Examples of the TYPE instruction:-')\n /('    1.   ' hi 'TYPE 10;')\n /('         The message JOLE10-01 ''10'' appears on the System Log')\n  ('         and the Operators console.')\n /('    2.   ' hi 'TYPE ''THIS MESSAGE GOES TO THE OPERATOR'';')\n  ('         ' hi 'DISPLAY ''RESTARTING AT %%START'';')\n        %helpline;\nif syspfk=7 | syspfk=19 then goto pan020;\nif syspfk=3 | syspfk=15 then exit;\nPAN030:\nPANEL blue box\n/(hi ctr 'The STOP instruction.')\n /('    The STOP instruction writes the message to the Systems Log and')\n  ('    operators console. The job is terminated immediately.')\n /('    Format:  'hi'   STOP { ''message'' | number } ; ')\n /('    Note: If the STOP is executed after a SYMBOLIC IF statement')\n  ('          or it is executed unconditionally, the message')\n  ('          will be output as a Jol compiler message.')\n /('    Examples  1.' hi ' STOP ''SIMPLE EXAMPLE OF STOP'';')\n  ('                 This message will be displayed with JOL compiler')\n  ('                 error messages (if any); the job will not be')\n  ('                 allowed to start to execute.')\n /('              2.' hi ' IF SORT -= 0 THEN')\n  ('                ' hi ' STOP ''SORT FAILED'';')\n  ('                 The message ''SORT FAILED'' will be displayed')\n  ('                 on the operators console and the Systems Log and')\n  ('                 the job will be terminated.')\n        %helpline;\nif syspfk=7 | syspfk=19 then goto pan025;\nif syspfk=3 | syspfk=15 then exit;\nPAN035:\nPANEL blue box\n / (hi ctr 'The STOP WHEN instruction.')\n /('      The STOP WHEN instruction is used to terminate the job when')\n  ('      certain return codes or ranges of return codes are issued')\n /('      Format:')\n  (hi '              STOP WHEN condition |  | condition ....  ? ;')\n /('      where condition is:')\n /(hi '              ANY  'normal'comparision-operator   number')\n  (hi '      Notes:')\n  ('      1. The Jol default is STOP WHEN ANY=16 | ANY > 2000 ; thus')\n  ('         whenever any program that executed returns a code of 16')\n  ('         or greater than 2000, the job is terminated.')\n  ('      2. You may not execute STOP WHEN instruction after an IF')\n  ('         test; use the STOP instruction.')\n  ('      3. You may code one STOP WHEN instruction per JOL job.')\n /('      Example      ' hi 'STOP WHEN ANY = 10;')\n        %helpline;\nif syspfk=7 | syspfk=19 then goto pan030;\nif syspfk=3 | syspfk=15 then exit;\nPAN040:\n  PANEL blue box/ (hi ctr 'The ON ERROR command')\n /('     The ON ERROR command will cause a copy of the processing')\n  ('     programs storage to be taken if an abend occurs.')\n /('     Format:')\n /('         'hi'ON ERROR  { SNAP | DUMP }  |SYSTEM | options? ;')\n /('     where the options are:-')\n /('         'hi'TO PRINTER classname     eg. TO PRINTER A ; ')\n  ('         'hi'|HOLD | NOHOLD?')\n /('     'hi'Note:  Only one ON ERROR command should be coded, and')\n  ('     this should preferably be done before any RUN commands.')\n  ('     Example:'hi' ON ERROR SNAP TO PRINTER B HOLD;')\n  ('             If an abend occurs, the dump will be written to')\n  ('             a printer with class B, the dump will not be printed')\n  ('             until the operator specifies it to be printed because')\n  ('             HOLD was specified.')\n        %helpline;\nif syspfk=7 | syspfk=19 then goto pan035;\nif syspfk=3 | syspfk=15 then exit;\nPAN045:\n  PANEL blue box/ (hi ctr 'The SIGNAL ERROR instruction')\n /('    The SIGNAL ERROR instruction is used to indicate that an error')\n  ('    has occured.')\n /('    Format 'hi'SIGNAL ERROR severity, ''message'' ;')\n /('    where the severity is 0, 1, 2, 3 or 4 and indicates the')\n  ('    severity of the error.')\n /('    Generally severity is'hi' 0 - information only')\n  ('                         'hi' 1 - warning')\n  ('                         'hi' 2 - minor error')\n  ('                         'hi' 3 - severe error')\n  ('                         'hi' 4 - terminal error.')\n  ('    The job is allowed to run depending on error severity eg.')\n /('    if SIGNAL ERROR 4 then the job is not allowed to start,')\n  ('    if SIGNAL ERROR 3 then the job is allowed to start only')\n  ('    when the Operator releases it.')\n        %helpline;\nif syspfk=7 | syspfk=19 then goto pan040;\nif syspfk=3 | syspfk=15 then exit;\nPAN050:\n  PANEL blue box/(ctr 'Examples of the 'hi'SIGNAL ERROR instruction.')\n  //('      1.'hi' SIGNAL ERROR 1, ''SIMPLE EXAMPLE OR ERROR'' ;')\n   /('      After executing the SIGNAL ERROR, the message will appear')\n    ('      with any other JOL compiler error messages. Because')\n    ('      severity was one (1) the job will be allowed to start.')\n  //('      2.'hi' IF %%%%LIB = ''SYS2.SVCLIB'' THEN')\n    ('        'hi' SIGNAL ERROR 3,''SYS2.SVCLIB IS TO BE REORGANISED'';'\n    )\n   /('      After SIGNAL ERROR is executed, the message will be placed')\n    ('      on the error log, because the severity was 3 the operator')\n    ('      will have to release the job manually.')\n        %helpline;\nif syspfk=7 | syspfk=19 then goto pan045;\nif syspfk=3 | syspfk=15 then exit;\nPAN055:\n  PANEL box (hi ctr 'READ / WRITE instructions.')\n /('       READ  - used to place input from the terminal into a')\n  ('               symbolic variable.')\n /('       WRITE - used to write a message to a terminal, when')\n  ('               running JOL interactively.')\n//('       For example:')\n /('          'hi'IF %%VOL = '' '' THEN  /* NULL VOLUME  */')\n  ('          'hi'DO;')\n  ('          'hi'   WRITE ''PLEASE SPECIFY VOLUME'' ;')\n  ('          'hi'   READ VOL; ')\n  ('          'hi'END;')\n  ('          'hi'DUMPVOL  %%VOL; ')\n        %helpline;\nif syspfk=7 | syspfk=19 then goto pan045;\nif syspfk=3 | syspfk=15 then exit;\nPAN060:\nsyspfk = 0;\nPANEL box //////////\n(ctr hi 'Would you like to take a revision test')\n(ctr hi 'of this chapter ?',#4,3,'YES');\n    if #4 = 'YES' | #4 = 'Y' then CAACOMER;\nCHNUM = CHNUM + 1;\nif CHNUM > MAXCHAP then DO;\n    PANEL box  ///////(ctr ' This is the end of this section.')\n           /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n    CHNUM = 1;\n    syspfk = 3;\n  END;\nEND;  /* OF CAICOMER MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAICOMPA": {"ttr": 4878, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  CAICOMPA: MACRO;\n  IF syspfk=3 | syspfk=15 THEN exit;\npan005:\n  PANEL blue box/ (hi ctr '---- The COMPARE Command ----')\n/('   The command will compare:')\n (hi '          *  two sequential data sets')\n (hi '          *  two partitioned data sets')\n (hi '          *  a member of a partitioned data set to another')\n (hi '             partitioned data set or a sequential data set.')\n/('      The comparison stops after 10 differences have been detected')\n ('   unless partitioned data sets are being compared, in which case')\n ('   the comparison stops after 10 differences have been found')\n ('   in a member, then continues with the next member until all')\n ('   members have been compared.')\n/('   Format       'hi'      / dsid  \\        / dsid  \\   -- PO --')\n (hi '            COMPARE  |         | WITH |         |  |  or  |  ;')\n (hi '                      \\ dsname/        \\ dsname/   -- PDS--')\n/('   Where PO or PDS specifies that an entire partitioned')\n ('   data set is to be compared with another.')\n        %helpline;\n  IF syspfk=3 | syspfk=15 THEN exit;\n  IF syspfk=7 | syspfk=19 then redo pan005;\nPAN010:\n  PANEL blue box/  (ctr hi 'Examples of the COPY Command')\n   /('  (1)'hi'     COMPARE OLD WITH NEW ;')\n    ('          The data referred to as DSID OLD will be compared with')\n    ('          the data referred to by DSID NEW. If, for example, we')\n    ('          had DECLARE NEW DS DSNAME MASTER.FILE(+1);')\n    ('          and DECLARE OLD DS DSNAME MASTER.FILE(+0); coded then')\n    ('          the data sets MASTER.FILE(0) and MASTER.FILE(+1)')\n    ('          would have been compared.')\n   /('  (2)'hi'     COMPARE SYS1.PROCLIB WITH NEW.PROCLIB PDS;')\n    ('          The data sets SYS1.PROCLIB and NEW.PROCLIB will be')\n    ('          compared. Any missing members names will be noted and')\n    ('          any differences in each member will also be noted')\n    ('          (to a maximum of 10 per member).')\n   /('  (3)'hi'     COMPARE SYS1.PROCLIB(PAYROLL) WITH'\n     ' NEW.PROCLIB(OLDPAY);')\n    ('          The comparison occurs between two members of the same')\n    ('          data set, PAYROLL and OLDPAY')\n        %helpline;\n  IF syspfk=7 | syspfk=19 then redo pan010;\n  COM$NUM = COM$NUM + 1;\n  IF COM$NUM > MAX$COM THEN DO;\n PANEL blue box/\n ///////(ctr ' This was the LAST chapter of the Introduction.')\n       /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n  COM$NUM=1;\n  syspfk=3;\n END;\n END; /* OF CAICOMPA MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAICOMPR": {"ttr": 4880, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAICOMPR : MACRO;\n  IF syspfk=3 | syspfk=15 THEN exit;\npan005:\n  PANEL blue box/ (hi ctr '---- The COMPRESS Command ----')\n//('     The COMPRESS command will reorganize (remove unused space)')\n  ('     from a library or partioned data set.')\n /('     Format of the COMPRESS command')\n /(hi'            COMPRESS { dsid | dataset }')\n  (hi'                     | dsid | dataset ...?  ;')\n//('     Whenever a member is replaced in a library, the space that is')\n  ('     previously occupied is left unused. Eventually there is no')\n  ('     room left in the data set to add new members or replace')\n  ('     existing ones, and a reorganization is required. The COMPRESS')\n  ('     moves all the active members to the start of the data set - ')\n  ('     thus forming contiguous data. The unused portions of the data')\n  ('     set are placed at the end of the data set and so more members')\n  ('     can be added to it.')\n        %helpline;\n  IF syspfk=3 | syspfk=15 THEN exit;\n  IF syspfk = 7 | syspfk=19 then redo lab005;\npan010:\n  PANEL blue box/  (hi ctr 'Notes')\n//('     (1) The data set is not available to any other user until the')\n  ('         job ends. After issuing COMPRESS, the FREE command can be')\n  ('         used to free the data set before the job ends. ')\n  ('         (NB. FREE is discussed further in this section/chapter.')\n//('     EXAMPLE ' hi '  COMPRESS MY.DATASET, SYS2.MACLIB ;')\n /('         The COMPRESS command is requested to compress two (2)')\n  ('         libraries. The first is a data set named MY.DATASET and')\n  ('         it will refer to a library. The second library named')\n  ('         in the command is SYS2.MACLIB.')\n        %helpline;\n  IF syspfk=3 | syspfk=15 THEN exit;\n  IF syspfk = 7 | syspfk=19 then redo lab005;\n  %COM$NUM = %COM$NUM + 1;\n  IF %COM$NUM > %MAX$COM THEN DO;\n     PANEL blue box/\n     ///////(ctr 'This is the end of this section.')\n           /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n      %COM$NUM = 1;\n      syspfk = 3;\n END;\n END; /* OF CAICOMPR MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAICOPY": {"ttr": 5121, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAICOPY : MACRO;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nlabel pan005;\n  PANEL blue box/ (ctr hi '----  COPY command  ----')\n /('     COPY copies data from one data set to another. The data')\n  ('     may be organized sequentially, IS, or a library (a PDS or')\n  ('     partitioned data set).')\n /(hi '   Format:          /input \\      / output \\ ')\n  (hi '              COPY { dsid or} TO {  dsid or } options;')\n  (hi '                    \\dsname/      \\ dsname /  ')\n /('     The default, if no option is specified, is Sequential Data')\n  ('     Set COPY. Any data set may be copied. You may wish to copy')\n  ('     a data set for security reasons or you may wish to')\n  ('     duplicate your data, and perhaps send a copy to another user.')\n /('     Notes :  1. The data set from input dsid is copied into')\n  ('                 output dsid.')\n  ('              2. If you wish to overwrite the information in the')\n  ('                 second data set or if you wish to add to an')\n  ('                 existing Partitioned Data Set or Library, code')\n  ('                 the OLD keyword in the options (see examples).')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nLABEL PAN010;\n  PANEL blue box/ (ctr hi '----  COPY command continued  --- ')\n //('    Notes: continued ')\n  /('             3. If you are NOT copying a sequential data set')\n   ('                or SELECTing (yet another option - see exmaples)')\n   ('                members for a Partitioned Data Set COPY, you')\n   ('                must specify the type of data set being copied')\n   ('                by using ISAM, IS, PO or PDS keywords. ISAM')\n   ('                stands for Indexed Sequential(IS) Data Set')\n   ('                organization; PO or PDS - Partitioned Data Set')\n   ('                organization')\n  /('             4. To COPY SELECTed members from a Partitioned Data')\n   ('                Set organization code SELECT (member name,...).')\n   ('                If you wish to overwrite existing members of the')\n   ('                names you are COPYing, you must code REPLACE'\n   ('                keyword.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nLABEL PAN015;\n  PANEL blue box/ (ctr hi '----  Examples of the COPY command  --- ')\n //('          1. ' hi 'COPY INPUT TO OUTPUT;')\n  /('             The data from DSID called INPUT is COPYed to')\n   ('             the data set specified by the DSID called')\n   ('             OUTPUT. This is a sequential copy.')\n  /('          2. 'hi 'COPY TEST.PROC TO SYS2.PROCLIB')\n   ('             'hi '     OLD')\n   ('             'hi '     SELECT (PAYROLL,ARPROC) REPLACE;')\n  /('             TEST.PROC is the input data set and members')\n   ('             PAYROLL and ARPROC are to be COPYed into the')\n   ('             system data set SYS2.PROCLIB. If members')\n   ('             PAYROLL and ARPROC are already in SYS2.PROCLIB,')\n   ('             they are to be REPLACEd with the members from')\n   ('             TEST.PROC.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo lab010;\nLABEL PAN020;\n  PANEL blue box/ (ctr hi '----  Examples of the COPY command  --- ')\n //('          3. 'hi 'DECLARE XYZ DS DSNAME COPY.PROD(+1)')\n   ('             ' hi '               UNIT TAPE; ')\n   ('             ' hi 'COPYONE:')\n   ('             ' hi '      COPY PROD.LIB TO XYZ PDS;')\n   ('             ' hi '      IF COPYONE = 0 THEN CATALOG XYZ;')\n   ('             ' hi '      ELSE STOP '' COPY FAILED '';')\n  /('             The DECLARE of XYZ specifies a TAPE data set')\n   ('             called COPY.PROD. The COPY command with the')\n   ('             label COPYONE copies the library PROD.LIB to XYZ')\n   ('             (the COPY.PROD(+1) data set) and so the COPY will')\n   ('             create an unloaded version of the library on TAPE.')\n / ('             The IF statement then tests the step COPYONE.')\n   ('             If it returned a zero(0), the copy data set is')\n   ('             CATALOGed, otherwise a message is passed to the')\n   ('             operator and the job is terminated(STOP command).')\n        %helpline;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\n  %COM$NUM = %COM$NUM + 1;\n  IF %COM$NUM > %MAX$COM THEN DO;\n    PANEL blue box/\n     ///////(ctr ' This was the end of this section.')\n           /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n      IF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\n      %COM$NUM = 1;\n      %SYSPFK = 3;\n END;\n END; /* OF CAICOPY MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIDCL": {"ttr": 5124, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIDCL : MACRO;\n    DCL %COM#NUM INIT 1 ;\n    DCL %TYPE#COM INIT '';\n    DCL %ERR1 INIT '';\n    DCL %ERR2 INIT '';\n    DCL %MAX#COM INIT 5 ;\n    DCL %CALL#COM INIT '';\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nlabel pan005;\n  PANEL blue box/ (hi ctr '---- Declaration Statements ----')\n//('        As we discussed in the previous chapter, (Jol language')\n  ('        structure) a typical Jol program consists of statements ')\n  ('        that may :')\n//(hi ctr 'Declare or define jobs, programs,')\n  (hi ctr 'data sets or symbolic variables.')\n///('        We will discuss these statements here in more detail')\n   ('        (for complete treatment see Jol Reference Manual). ')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo lab005;\nLABEL DSPMENU;\nPANEL blue box/ (ctr hi 'DECLARATIONS MENU :') ////\n  ('             DECLARING JOBS        == > 1')\n  ('             DECLARING DATA SETS   == > 2 ')\n  ('             DECLARING PROGRAMS    == > 3 ')\n  ('             PRINTER DEFINITION    == > 4 ')\n  ('             CARD FILE DEFINITION  == > 5 ',COM#NUM,1,'%COM#NUM')\n /('                       'hi' %ERR1')\n  ('                       'hi' %ERR2')\n//('           Press ENTER to start from the beginning or')\n  ('           select an instruction. NOTE : if you have not')\n  ('           done this course before - start from the beginning')\n /('      Press PFK 3 to return to MAIN menu/index of the course')\n        %helpline;\n   IF %SYSPFK=3 | %SYSPFK=15  THEN exit;\n   %TYPECOM = TYPE(COM#NUM);\nLABEL REPEAT;\n   %ERR1 = ''; %ERR2 = '';\n   IF %TYPECOM \u00ac= 'NUM' THEN DO;\n       %ERR1= ' I do not understand your selection ';\n       %ERR2 = ' Please RETYPE ';\n       REDO DSPMENU;\n   END;\n   ELSE DO;\n       IF %COM#NUM > %MAX#COM | %COM#NUM < 1 THEN DO;\n            %ERR1 = ' PLEASE SELECT A NUMBER FROM 1 TO %MAX#COM ';\n            REDO DSPMENU;\n       END;\n       ELSE DO; %CALLCOM = '';\n                  IF %COM#NUM = 1 THEN %CALLCOM = 'CAIJOB';\n                  IF %COM#NUM = 2 THEN %CALLCOM = 'CAIDSET';\n                  IF %COM#NUM = 3 THEN %CALLCOM = 'CAIPROG';\n                  IF %COM#NUM = 4 THEN %CALLCOM = 'CAIPRNT';\n                  IF %COM#NUM = 5 THEN %CALLCOM = 'CAICARD';\n                    %CALLCOM;\n                  IF %SYSPFK = 3 | %SYSPFK=15 THEN REDO DSPMENU;\n                  ELSE REDO REPEAT;\n       END;\n   END;\n   %CHNUM = %CHNUM + 1;\n   IF %CHNUM > %MAXCHAP THEN DO;\n PANEL blue box/\n ///////(ctr ' This is the end of this section.')\n       /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n            %CHNUM = 1;\n            %SYSPFK = 3;\n    END;\n END; /* OF MACRO CAIDCL */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIDELET": {"ttr": 5126, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIDELET : MACRO;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n LABEL PAN005;\n  PANEL blue box/ (hi ctr '---- DELETE instruction ----')\n /('           The DELETE instruction is used to SCRATCH and UNCATALOG')\n  ('        data sets. It combines the function of SCRATCH and')\n  ('        UNCATALOG. For example:')\n /(hi '              DELETE MY.SET;')\n  ('        is equivalent to:'\n  (hi '              SCRATCH MY.SET;')\n  ('        and ' hi '  UNCATALOG MY.SET;')\n /('        The data contained in the data set is lost and any')\n  ('        reference to the data set is removed from the system.          ')\n /(hi '        Format:           / dsid \\')\n  (hi '                  DELETE {        }  ;')\n  (hi '                          \\dsname/')\n /('        Options are: 'hi' FROM <VOL> volume <UNIT> unit')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nLABEL PAN010;\n  PANEL blue box/ (hi ctr 'Notes:')\n//(' Notes:  1.  All OLD data sets are automatically kept unless')\n  ('             a DELETE or SCRATCH instruction is executed,')\n  ('             but all NEW data sets are scratched by the OS')\n  ('             unless they are KEPT or CATALOGed;')\n//('         2.  The VOLUME on which the data set resides and its')\n  ('             asscoiated UNIT type must be known before the')\n  ('             DELETE or SCRATCH instruction can be performed.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nLABEL PAN012;\n  PANEL blue box/ (hi ctr '---- DELETE instruction ----')\n /(ctr 'The following table shows the actions taken')\nlm 10\n /('----------------------------------------------------------------')\n  ('-     VOLUME and          -       ACTION                       -')\n  ('-     UNIT INFORMATION    -                                    -')\n  ('----------------------------------------------------------------')\n  ('- Coded on DECLARE        - Deleted from the coded VOLUME.     -')\n  ('-                         -                                    -')\n  ('- Coded on DELETE         - Deleted from specified VOLUME.     -')\n  ('-  (FROM option)          -                                    -')\n  ('-                         -                                    -')\n  ('- Not coded and data set  - Deleted from whatever VOLUME       -')\n  ('- created earlier in job  - and UNIT the system placed it on.  -')\n  ('-                         -                                    -')\n  ('- Not coded and data set  - The system catalog is searched to  -')\n  ('- not created earlier in  - find the VOLUME and UNIT the       -')\n  ('- the job (OLD data set)  - data set is on. If not found, then -')\n  ('-                         - the DELETE is ignored.             -')\n  ('----------------------------------------------------------------')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nLABEL PAN015;\n  PANEL blue box/ /* (hi ctr ('Notes Continued')*/\n  ('         3.  If the data set(s) is not cataloged, information')\n  ('             messages will be produced to indicate the fact')\n  ('             when the UNCATALOG function is performed. The')\n  ('             SCRATCH instruction should be used if it is')\n  ('             known that the data set(s) is not cataloged. The')\n  ('             SCRATCH instruction won''t attempt to UNCATALOG')\n  ('             this data set(s) as would the DELETE instruction')\n  ('             To use the DELETE instruction in this case would')\n  ('             produce an unnecassary error message.')\n /('         4.  If an error is encountered while using the')\n  ('             DELETE instruction to scratch AND uncatalog a')\n  ('             data set, and if the scratch part of the DELETE')\n  ('             fails for any reason (e.g. the data set is')\n  ('             already SCRATCHed), then JOL will still attempt')\n  ('             to uncatalog the data set. If you know that a')\n  ('             data set is SCRATCHed, use the UNCATALOG')\n  ('             instruction to remove the catalog entry rather')\n  ('             than the DELETE instruction as this will give')\n  ('             an unnecessary error message.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nLABEL PAN020;\npanel blue box/ (ctr hi 'Examples of the DELETE Instructions')\n /('     1. ' hi 'DECLARE DSID1 DS DSNAME MY.SET;')\n  ('        ' hi '        DELETE DSID1;')\n /('        The system catalog will be requested to supply VOLUME and')\n  ('        device class information from the catalog and the data set')\n  ('        MY.SET will be scratched from the volume; the name will')\n  ('        then be removed from the system catalog.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nLABEL PAN025;\npanel blue box/ (ctr hi 'Examples of the DELETE Instructions')\n /('     2. ' hi 'DELETE GROUP1.TEST1')\n  ('        ' hi '       GROUP2.TEST.MASTER')\n  ('        ' hi '       GROUP9.ACCOUNT.FILE')\n  ('        ' hi '       FROM VOL DA992 UNIT 3330;')\n /('        Three data sets will be DELETEd from the VOLUME DA992.')\n  ('        If any of the data sets are not on the volume, a warning')\n  ('        message will be given but the job will continue. This is')\n  ('        an excellent method of deleting and uncataloging data sets')\n  ('        from direct access volumes for housekeeping purposes.')\n /('        NOTE : To perform this action in JCL is impossible because')\n  ('               if one or more of the data sets is missing, none of')\n  ('               the others will be deleted and the job will be')\n  ('               terminated immediately.')\n        %helpline;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nLABEL PAN050;\n  %COMNUM = %COMNUM + 1;\n  IF %COMNUM > %MAXCOM THEN DO;\n PANEL blue box/\n ///////(ctr ' This is the end of this section.')\n       /(ctr 'Press ENTER to return to the main index/menu.',X,1);\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\n  %COMNUM = 1;\n  %SYSPFK = 3;\n  END;\n END; /* OF CAIDELET MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIDISP": {"ttr": 5129, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIDISP : MACRO;\n    DECLARE %COMNUM INIT 1 EXT;\n    DECLARE %TYPECOM INIT '';\n    DECLARE %ERR1 INIT '';\n    DECLARE %ERR2 INIT '';\n    DECLARE %MAXCOM INIT 6 EXT;\n    DECLARE %CALLCOM INIT '';\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n LABEL PAN005;\n  PANEL blue box/ (ctr hi 'Disposition Processing')\n//('      The System Catalog.')\n /('          To more easily keep track of and retrieve data sets,')\n  ('      the system provides a cataloging facility. The catalog')\n  ('      contains information about data sets that are stored')\n  ('      in it. This information tells on which volume and type')\n  ('      of device (disk,drum or tape) that the data set is on.')\n  ('      If the volume is a tape volume, the position of the')\n  ('      data set on the tape is also noted in the catalog.')\n /('      When you use a Cataloged Data Set at a later time, you')\n  ('      do not have to specify its volume or unit type;')\n  ('      all you have to do is indicate the name of the data set')\n  ('      and the system will find it.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo lab005;\nLABEL PAN010;\n  PANEL blue box/ (hi ctr 'Disposition Processing - continued')\n//('         When a new data set is created by a program that WRITES a')\n  ('      Data Set , it is automatically deleted after the job')\n  ('      teminates by the Operating System (OS) unless it is KEPT')\n  ('      or CATALOGed. The CATALOG instruction ensures that the')\n  ('      data set will be available for other jobs when the job')\n  ('      terminates, that is, it (data set) will not be scratched')\n  ('      at the job termination.')\n//('         There are 5 instructions dealing with disposition of')\n  ('      Data Sets. They are : KEEP,CATALOG,UNCATALOG,SCRATCH,DELETE.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo lab005;\nLABEL PAN015;\nLABEL DSPMENU;\n   PANEL blue box/\n  ('          Disposition Processing Menu :')\n//('          KEEP                ============= > 1')\n  ('          CATALOG             ============= > 2')\n  ('          SCRATCH             ============= > 3')\n  ('          UNCATALOG           ============= > 4')\n  ('          DELETE              ============= > 5')\n  ('          REVISION QUESTIONS  ============= > 6',\n                                                  COMNUM,1,'%COMNUM')\n/ (hi '%ERR1 %ERR2')\n//('          Press ENTER to start from the beginning or')\n  ('          select an instruction. NOTE : if you have not')\n  ('          done this course before - start from the beginning')\n /('          Press PFK 3 to return to MAIN menu/index of the course')\n        %helpline;\n   %TYPECOM = TYPE(COMNUM);\n LABEL REPEAT;\n %ERR1 = ''; %ERR2 = '';\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\n       IF %TYPECOM \u00ac= 'NUM' THEN DO;\n           %ERR1='I do not understand your selection.';\n           %ERR2='Please RETYPE';\n           REDO DSPMENU;\n       END;\n       ELSE DO;\n            IF %COMNUM > %MAXCOM | %COMNUM < 1 THEN DO;\n                %ERR1 = ' PLEASE SELECT A NUMBER FROM 1 TO %MAXCOM ';\n                REDO DSPMENU;\n             END;\n             ELSE DO; %CALLCOM = '';\n                  IF %COMNUM = 1 THEN %CALLCOM = 'CAIKEEP';\n                  IF %COMNUM = 2 THEN %CALLCOM = 'CAICATLG';\n                  IF %COMNUM = 3 THEN %CALLCOM = 'CAISCRT';\n                  IF %COMNUM = 4 THEN %CALLCOM = 'CAIUNCAT';\n                  IF %COMNUM = 5 THEN %CALLCOM = 'CAIDELET';\n                  IF %COMNUM = 6 THEN %CALLCOM = 'CAADISP';\n                    %CALLCOM;\n                  IF %SYSPFK = 3 | %SYSPFK=15 THEN REDO DSPMENU;\n                  ELSE REDO REPEAT;\n             END;\n   END;\n   END; /* OUTER IF %SYSPFK \u00ac= 3 */\n         %CHNUM = %CHNUM + 1;\n         IF %CHNUM > %MAXCHAP THEN DO;\n            PANEL blue box/\n            ///////(ctr ' This was the last command of this section.')\n            /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n            %CHNUM = 1;\n            %SYSPFK = 3;\n         END;\n END; /* OF MACRO CAIDISP */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIDSET": {"ttr": 5132, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  CAIDSET : MACRO;\n    DCL %NUM INIT 1;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n LABEL PAN005;\n  PANEL blue box/ (ctr hi 'Defining Data Spaces or Data Sets')\n            (ctr hi '=================================')\n//('            Most jobs and programs require sets of data (data sets')\n  ('         or files) for either input, output or both. Data sets are')\n  ('         usually on a Volume (Card Files are not).')\n//('            A Volume may be a Tape, a Disk or a Drum.')\n//('            Before a data set can be used, the Volume it is on and')\n  ('         the unit type required to mount the volume must be known.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nLABEL PAN010;\n  PANEL blue box/ (ctr hi 'Defining Data Spaces or Data Sets')\n  //('        You can:   *  Code the volume/unit information')\n    ('        or         *  Let the system find it from the catalog or')\n    ('                      from the passed data set queue.')\n  //('        If you create a data set and do not specify a particular')\n    ('        volume that it is to be written to, the system will')\n    ('        remember the volume it was placed on for the duration')\n    ('        of the job.')\n   /('        If you want to KEEP any new data sets, you must KEEP or')\n    ('        CATALOG them (see more about KEEP or CATALOG in chapter')\n (hi '        on DISPOSITION PROCESSING)')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nLABEL PAN015;\n  PANEL  blue box/\n (hi ctr 'Data Control Blocks.')\n / (ctr\n 'Data control blocks (DCB) and Access Method Control Blocks (ACB) ')\n (ctr\n 'are used by the Operating System (OS) when any use is made of a  ')\n (ctr\n 'data set. The format of the records in the data set (RECFM), the ')\n (ctr\n 'maximum length of the records and blocksizes are part of the DCB;')\n (ctr\n 'every data set must have this information specified before any   ')\n (ctr\n 'of the normal IBM access methods can process the data sets for   ')\n ('     for you.')\n //(ctr\n'The DECLARE data set definition describes details about data sets ')\n ('     that may be used in the JOB.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nLABEL PAN020;\n  PANEL blue box/\n (hi ctr 'The Data Set DECLARE Statement')\n /('    FORMAT:-')\n  ('                                 ')\n  (hi'           / DECLARE \\   dsid-name / DATA SET \\ ')\n  (hi'      or  {  DEFINE   }  DSID     {  DS        }  options;')\n  (hi'      or   \\ DCL     /             \\          /')\n /('         There are a number of optional parameters; for full')\n  ('      treatment see the JOL Reference Manual. We shall look at')\n  ('      some of the most important ones.')\n /('         Data sets to be used for input (i.e READ) REQUIRE a')\n  ('      DSNAME optional parameter, and, if not catalogued, Volume')\n  ('      and Unit information (so the system can find them).')\n /('         Data sets to be used for output (i.e. WRITE) may also require')\n  ('      SPACE and DCB information unless the installation defaults')\n  ('      will suffice.')\n /('See explanation on the next panel')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nLABEL PAN025;\n  PANEL   blue box/\n(hi ctr 'Data Set Identifiers:- DSIDs')\n /('        A data set indentifier contains details about data sets.')\n  ('     All the details about a data set can be defined in a DSID,')\n  ('     such as the volume and unit where the data set resides on (or')\n  ('     is to reside on), the record format and so forth.')\n /('         The DSIDs are then used in instructions or programs. You')\n  ('     can READ, WRITE, EXTEND, scratch DSIDs, and so on, with JOL')\n  ('     instructions and commands, or your own commands and programs')\n  ('     Having specified as much information on the DSID as is')\n  ('     required, you need only code the name you gave the DSID no')\n  ('     matter how many times it is used.')\n /('     For example: ' hi 'DECLARE TESTFILE DATA SET')\n(hi'                           NAME TEST.DATA')\n(hi'                           FB 80,4000')\n(hi'                           200-400 RECORDS')\n(hi'                           UNIT 3330')\n(hi'                           VOLUME DISK01;')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nLABEL PAN030;\n  PANEL blue box/  ('      Example repeated')\n(hi'               DECLARE TESTFILE DATA SET')\n(hi'                       NAME TEST.DATA')\n(hi'                       FB 80,4000')\n(hi'                       200-400 RECORDS')\n(hi'                       UNIT 3330 VOLUME DISK01')\n /('   The declare statement specifies that whenever the name TESTFILE')\n  ('   is read or written the data set TEST.DATA is to be used. If a')\n  ('   program READS TESTFILE name, the location of the data set')\n  ('   TEST.DATA will be found and the volume mounted so that the data')\n  ('   set can be used. When a program or instruction writes data to')\n  ('   the TESTFILE data set identifier, the data set TEST.DATA will')\n  ('   created. If no volume was specified, the system will choose')\n  ('   a volume on which to place the data.')\n /('   FB 80,4000 means that the records are to be fixed length (FB),')\n  ('   80 bytes each, Blocked into 4000 byte blocks. 200-400 RECORDS')\n  ('   is space request. It means that 200 records number will be')\n  ('   allocated as a primary amount of space. Sufficient secondary')\n  ('   space will be allowed to contain up to 400 records.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan025;\nLABEL PAN035;\n  PANEL blue box/\n    ('    Space can also be requested in TRACKS eg:-')\n /(hi'                               SPACE 10 TRACKS')\n  (hi'    or cylinders               SPACE 10 CYLS')\n  (hi'    or blocks of K bytes       100 K RECORDS')\n   ('                                - allocates enough')\n   ('                                  space to contain 100 K')\n   ('                                  blocks of 80 bytes each')\n /('    Space can also be allocated as primary space and secondary')\n  ('    basis. For example:')\n /(hi'           SPACE = 1,10 CYLS')\n /('    specifies that: a minimum of 1 cylinder is to be allocated to')\n  ('    a data set. If this is filled with data, another 10 cylinders')\n  ('    will be allocated.')\n /('    The secondary allocation may be repeated until a total of 15')\n  ('    extents have been allocated to the data set.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan030;\nLABEL PAN040;\n Panel blue box/\n  //('      Specific volumes requests can also be issued eg:')\n   /('                      ' hi '100 CYLS, VOL DA029')\n   /('      will allocate 100 CYLS on VOL DA029 and if 100 CYLS is not')\n    ('      available on that volume, your job is terminated.')\n   /('      For further examples and definitions see the JOL Reference')\n    ('      Manual Section on \"Data Sets\".')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan035;\nLABEL PAN045;\n Panel blue box\n   /(ctr hi 'New Data Sets')\n    (ctr hi '=============')\n   /('      When creating New Data Sets, you must supply:')\n   /(hi'         * record format information (e.g. FB 80,200)')\n    (hi'         * space required (for disk)')\n    (hi'         * unit type required (for disk or tape)')\n    (hi'         * optionally, the name of the volume on which the')\n    (hi'           data set is to be placed.')\n   /('      For some types of data sets, other information is required')\n    ('      also.')\n   /('      Note : Your installation may allow JOL to set default')\n    ('      values for the above, JOL will issue a warning message for')\n    ('      you if you have left out any SPACE, RECORD FORMAT or other')\n    ('      information regarding new data sets. It is good practice')\n    ('      to define space and unit information whenever you are')\n    ('      creating one.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan040;\nLABEL PAN050;\n Panel blue box/\n  ('     You need not code the Volume Parameter:')\n  (hi'         * for new data sets')\n  (hi'         * when a data set is cataloged, since the system')\n  (hi'           obtains volume and unit information from the CATALOG')\n /('     You must specify the UNIT parameter:')\n  (hi'         * when creating a new data set and you do not want to')\n  (hi'           use the defaults.')\n  (hi'         * when the data set to be used is not cataloged or')\n  (hi'           created ealier in the job.')\n /('     You do not have to code the UNIT parameter')\n  (hi'         * the data set is cataloged')\n  (hi'         * when the data set is cataloged earlier in the job')\n///('    See the JOL Reference Manual Section on \"Data Sets\"')\n   ('    for more information.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan045;\nLABEL PAN055;\n Panel blue box/  (hi ctr 'Notes')\n//('      1. To READ or WRITE a particular member of a partitioned ')\n  ('         data set or library, code the member name required in ')\n  ('         parentheses after the data set name.')\n/ ('         For example:' hi ' SORT.CONTROL(PAYDPT)')\n/ ('      2. When generation data sets names are required, the')\n  ('         relative or absoute generation number must be coded in')\n  ('         parentheses after the data set name.')\n /('  EG     DSNAME  FILEA(0)  Locates the 'hi'latest '\nnormal 'copy of FILEA')\n  ('         DSNAME  FILEA(+1) Is used when a new generation of')\n  ('                          ' hi ' FILEA' normal ' is to be created')\n  ('         DSNAME  FILEA(-1) Locates the previous generation')\n  ('                           of ' hi 'FILEA.')\n  ('         DSNAME  FILEA(15) Locates generation 15 of data set')\n  ('                           of ' hi 'FILEA.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan050;\nLABEL PAN060;\n  PANEL blue box/ (ctr 'Examples of the use of Data Set Definitions')\n//('       1.' hi ' DCL FILE2 DS VOLREF=FILE1 VB 100,7294;')\n/('       DCL is the same as DECLARE or DEFINE')\n/('       The Variable length record file (VB), Blocks are 7294 bytes,')\n('       record sizes up to 100 bytes, file is to be found (or put) on')\n('       the same volume as FILE1 (VOLREF=FILE1) - see previous example')\n/('       No Data Set Name was specified meaning that it will be a')\n('       TEMPORARY data set, and will be automatically deleted at the')\n('       end of the job. Default, installation defined space allocation'\n)\n('       is to be made.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan055;\nLABEL PAN065;\n  PANEL blue box/ (ctr 'Examples of the use of Data Set Definitions')\n//('      2.' hi ' DCL MACROS DS DSNAME JOL.CMDLIB;')\n/ ('      The DSID MACROS describes the JOL.CMDLIB command instruction')\n  ('      command library. When the MACROS identifier is read, the')\n  ('      system catalog will locate the Volume the data set is on.')\n//('      3.' hi ' DCL OUTPUT DS UNIT DISK VB 200, 7294 1 TRACK;')\n/ ('      The DSID OUTPUT describes a temporary (No dsname was')\n  ('      specified) disk data set with Variable Blocks (VB) and one')\n  ('      track of space of a DISK.')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan060;\nLABEL PAN070;\n  PANEL  blue box/ (ctr 'Examples of the use of Data Set Definitions')\n/('      4.' hi ' DECLARE FILE1 DS DSNAME CUST.INDEXED.MASTER')\n (hi '                              FB 80,800')\n (hi '                              VOLUME = 1111 UNIT = DISK')\n (hi '                              SPACE = 4,0,3 CYLS')\n (hi '                              DSORG IS KEY = 5,3')\n (hi '                              BUFFNO = 10; ')\n('      The DSID called FILE1 describes a data set called')\n('      CUST.INDEXED.MASTER. It is to be found on VOLUME 1111, which')\n('      requires a DISK device to be mounted. Space allocated for the')\n('      data set was 4,0,3 CYLS meaning 4 cylinders of primary')\n('      allocation, 0 cyls of secondary allocation (i.e. No secondary')\n('      allocation is allowed for IS data sets) with 3 tracks on each')\n('      cylinder for the index area. Data set organisation (DSORG) is')\n('      indexed sequential (IS). Keys are 5 bytes long located 3 bytes')\n('      from the begining of each record. (KEY = 5,3).')\n('      Records are of fixed length(FB) 80 bytes and blocks are 800')\n('      bytes long. For processing 10 buffers are to be allocated')\n('      (BUFFNO = 10).')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan065;\nLABEL PAN075;\n  PANEL  blue box/ (ctr 'NOTE')\n  //(hi '       DSORG could have been DA   - Direct Acess')\n    (hi '                             VSAM - Virtual Storage access')\n    (hi '                                    Method')\n    (hi '                             PO   - Partitioned Organization')\n    (hi '                             PS   - Physical Sequential')\n    (hi '       and many more')\n  //('          See the JOL Reference Manual Section '\n                '\"DSORG parameter\".')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan070;\nLABEL PAN080;\n  PANEL blue box/ (ctr hi 'REVISION QUESTIONS.')\n/('     (A) Declare a NEW data set with DSID EXFIL1')\n ('         which describes a data set called EXFILE.ONE. File is to')\n ('         be on disk and to occupy 3 cylinders. Records to be of fixed')\n ('         length of 80 bytes, blocks of 800 bytes.')\n/('         ',A,40,'ANSWER')\n ('         ',B,40,'ANSWER')\n ('         ',C,40,'ANSWER')\n ('         ',D,40,'ANSWER')\n ('         ',E,40,'ANSWER')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan075;\n  IF %A = '' | %A = 'ANSWER' THEN %A=' ';\n  IF %B = '' | %B = 'ANSWER' THEN %B=' ';\n  IF %C = '' | %C = 'ANSWER' THEN %C=' ';\n  IF %D = '' | %D = 'ANSWER' THEN %D=' ';\n  IF %E = '' | %E = 'ANSWER' THEN %E=' ';\nLABEL PAN085;\n  PANEL blue box/\n/('      A correct answer to the          |  Your answer was')\n ('      question is:-                    | ')\n/('      DCL EXFIL1 DS DSNAME EXFILE.ONE  | ' hi '%A')\n ('          FB 80,800                    | ' hi '%B')\n ('          UNIT DISK                    | ' hi '%C')\n ('          VOLUME = 3330 /* OPTIONAL */ | ' hi '%D')\n ('          SPACE = 3 CYLS ;             | ' hi '%E')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan080;\nLABEL PAN090;\n  PANEL  blue box/\n/(' Now (B) declare an EXISTING data set MASTER.FILE of')\n ('         Indexed Sequential organization, which is located an the')\n ('         same volume as EXFILE.ONE (use VOLREF). With space required')\n ('         being primary allocation of 6 cylinders and secondary')\n ('         allocation 2 cylinders and 3 tracks for index area on each')\n ('         cylinder.')\n/('         Key is 6 bytes long located 4 bytes from the beginning')\n ('         of each record. Records are of fixed length 80 bytes and')\n ('         blocks of 4000 bytes.')\n/('         ',A,40,'ANSWER')\n ('         ',B,40,'ANSWER')\n ('         ',C,40,'ANSWER')\n ('         ',D,40,'ANSWER')\n ('         ',E,40,'ANSWER')\n ('         ',F,40,'ANSWER')\n ('         ',G,40,'ANSWER')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan085;\nLABEL PAN095;\n  IF %A = '' | %A = 'ANSWER' THEN %A=' ';\n  IF %B = '' | %B = 'ANSWER' THEN %B=' ';\n  IF %C = '' | %C = 'ANSWER' THEN %C=' ';\n  IF %D = '' | %D = 'ANSWER' THEN %D=' ';\n  IF %E = '' | %E = 'ANSWER' THEN %E=' ';\n  IF %F = '' | %F = 'ANSWER' THEN %F=' ';\n  IF %G = '' | %G = 'ANSWER' THEN %G=' ';\n  PANEL blue box/ //\n ('      A correct answer to the          |  Your answer was  ')\n ('      question is:-                    | ')\n/('      DCL MASTER DS DSNAME MASTER.FILE | ' hi '%A')\n ('          FB 80,4000                   | ' hi '%B')\n ('          UNIT DISK                    | ' hi '%C')\n ('          VOLREF = EXFIL1              | ' hi '%D')\n ('          SPACE = 6,2,3 CYLS           | ' hi '%E')\n ('          DSORG IS                     | ' hi '%F')\n ('          KEY = 6,4 ;                  | ' hi '%G')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan090;\nLABEL PAN100;\n  PANEL blue box/\n/('      (C) Declare a temporary data set with Variable')\n ('          Blocks of 3400 bytes, record lengths up to 200 bytes and')\n ('          3 tracks of space, call the DSID EX3.')\n/('         ',A,40,'ANSWER')\n ('         ',B,40,'ANSWER')\n ('         ',C,40,'ANSWER')\n        %helpline;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  IF %SYSPFK=7 | %SYSPFK=19 then redo pan095;\nLABEL PAN105;\n  IF %A = '' | %A = 'ANSWER' THEN %A=' ';\n  IF %B = '' | %B = 'ANSWER' THEN %B=' ';\n  IF %C = '' | %C = 'ANSWER' THEN %C=' ';\n  PANEL blue box/ //\n ('      A correct answer to the question is:-')\n/(hi'           DECLARE EX3 DS UNIT DISK VB 200,3400 3 TRACKS; ')\n/('      Your answer was:')\n/(hi'           %A')\n (hi'           %B')\n (hi'           %C')\n        %helpline;\n %COM#NUM = %COM#NUM + 1;\n IF %COM#NUM > %MAX#COM THEN DO;\n     PANEL blue box////////(ctr ' This is the end of this section.')\n           /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n     %COM#NUM = 1;\n     %SYSPFK = 3;\n END;\n END; /* OF CAIDSET MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIDSMAN": {"ttr": 5382, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIDSMAN : MACRO;  /* what is the chapter number for this one */\n      DECLARE %COM$NUM INIT 1 EXT;\n      DECLARE %TYPE$COM INIT '';\n      DECLARE %ERR1 INIT '';\n      DECLARE %ERR2 INIT '';\n      DECLARE %MAX$COM INIT 14 EXT;\n      DECLARE %CALL$COM INIT '';\n  LABEL DSMMENU;\n   PANEL blue box/ (hi ctr 'DATA SET MANAGEMENT')\n('      One of the most important tasks any job control language must')\n('      be able to perform is DATA SET MANAGEMENT ie. SORTing files')\n('      LISTing catalogs, PRINTing files, COMPARing then and so forth.')\n('      In this section we will consider these facilities, provided by')\n('      JOL.  The DATA SET MANAGEMENT commands are:')\n/('          1. SORT       7.  MERGE       13. LOADVOL')\n('          2. BUILDGDG   8.  PRINT       14. TEST ')\n('          3. COMPRESS   9.  COMPARE')\n('          4. COPY       10. DUMPVOL')\n('          5. LISTCAT    11. EXTEND')\n('          6. LIST       12. FREE')\n/('      Please make a selection',COM$NUM,2,'%COM$NUM')\n(hi'              %ERR1 %ERR2')\n/('      Press ENTER to start from the beginning or select an')\n('      instruction. NOTE : if you have not done this course')\n('      before - start from the beginning.')\n('      Press PFK 3 to return to MAIN menu/index of the course');\n      %ERR1 = '';\n      %ERR2 = '';\n    IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\n       %FIRSTD = SUBSTR(COM$NUM,1,1);\n       %SECONDD = SUBSTR(COM$NUM,2,1);\n        IF %FIRSTD = ' ' | %FIRSTD = 0 | %FIRSTD = '0' THEN %FIRSTD='';\n        IF %SECONDD = ' ' THEN %SECONDD = ''; /* SET TO NULL */\n        %TYPEF = TYPE(FIRSTD); %TYPES = TYPE(SECONDD);\n        IF (%TYPEF \u00ac= 'NUM' & %FIRSTD \u00ac= '') |\n           (%TYPES \u00ac= 'NUM' & %SECONDD \u00ac= '') THEN\n           %COM$NUM = '%FIRSTD%SECONDD';\n        ELSE %COM$NUM = %FIRSTD%SECONDD;\n       %TYPE$COM = TYPE(COM$NUM);\n      IF %TYPE$COM = 'NUM' THEN DO;\n         IF %COM$NUM = '0' | %COM$NUM = 0 | %COM$NUM > %MAX$COM THEN DO;\n            %ERR1 = ' COMMAND NUMBER OUT OF RANGE ';\n            %ERR2 = ' PLEASE RETYPE ';\n             REDO DSMMENU;\n         END;\n         ELSE DO;\n         LABEL NEXTCOM;\n                  %CALL$COM = '';\n                  IF %COM$NUM = 1 THEN %CALL$COM = 'CAISORT';\n                  IF %COM$NUM = 2 THEN %CALL$COM = 'CAIBGDG';\n                  IF %COM$NUM = 3 THEN %CALL$COM = 'CAICOMPR';\n                  IF %COM$NUM = 4 THEN %CALL$COM = 'CAICOPY';\n                  IF %COM$NUM = 5 THEN %CALL$COM = 'CAILCAT';\n                  IF %COM$NUM = 6 THEN %CALL$COM = 'CAILIST';\n                  IF %COM$NUM = 7 THEN %CALL$COM = 'CAIMERGE';\n                  IF %COM$NUM = 8 THEN %CALL$COM = 'CAIPRINT';\n                  IF %COM$NUM = 9 THEN %CALL$COM = 'CAICOMPA';\n                  IF %COM$NUM = 10 THEN %CALL$COM = 'CAIDUMPV';\n                  IF %COM$NUM = 11 THEN %CALL$COM = 'CAIEXT';\n                  IF %COM$NUM = 12 THEN %CALL$COM = 'CAIFREE';\n                  IF %COM$NUM = 13 THEN %CALL$COM = 'CAILOADV';\n                  IF %COM$NUM = 14 THEN %CALL$COM = 'CAADSMAN';\n                    %CALL$COM;\n                  IF %SYSPFK = 3 | %SYSPFK=15 THEN REDO DSMMENU;\n                  ELSE REDO NEXTCOM;\n              END;\n      END;\n      ELSE DO; %ERR1 = ' COMMAND NUMBER IS NOT NUMERIC ';\n               %ERR2 = ' PLEASE RETYPE ';\n               REDO DSMMENU;\n           END;\n    END;  /* IF %SYSPFK \u00ac= 3 */\n         %CHNUM = %CHNUM + 1;\n         IF %CHNUM > %MAXCHAP THEN DO;\n PANEL blue box/ ///////(ctr ' This is the end of this section.')\n       /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n            %CHNUM = 1;\n            %SYSPFK = 3;\n         END;\n END; /* OF MACRO CAIDSMAN */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIDUMPV": {"ttr": 5385, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  CAIDUMPV: MACRO;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n LABEL PAN005;\n  PANEL blue box/ (hi ctr '---- The DUMPVOL Command ----')\n  /('     DUMPVOL copies the entire contents of a disk volume to tape.')\n   ('     You can use the LOADVOL command to restore the volume.')\n  /('     Format: 'hi'DUMPVOL volume1 |,volume2,...? options ;')\n   ('     The options are:-')\n  /('           ------------------------------------------------------')\n   ('           - option                   - default                 -')\n   ('           ------------------------------------------------------')\n   ('           - BACKDSN  = high level of - JOL.BACKUP.OFvolume(+1) -')\n   ('           -            tape data set -                         -')\n   ('           -            name          -                         -')\n   ('           - FROMUNIT = unit type of  - DISK                    -')\n   ('           -            disk          -                         -')\n   ('           - TOUNIT   = unit type of  - TAPE                    -')\n   ('           -            tape          -                         -')\n   ('           -                          -                         -')\n   ('           ------------------------------------------------------')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n   LABEL PAN010;\npanel blue box/ (ctr hi 'Examples of the DUMPVOL command.')\n /('      1.  'hi'DUMPVOL DISK01;')\n /('          The DUMPVOL command will copy the entire contents of')\n  ('          disk volume DISK01 to a tape called')\n  ('       'hi'                 JOL.BACKUP.OFDISK01(+1)')\n  ('          (notice the volume was substituted with DISK01) and')\n  ('          catalog the tape. The volume DISK01 must be accessable')\n  ('          using a generic unit name of DISK or else the extra')\n  ('          parameter FROMUNIT must be added.')\n//('      2.  'hi'DUMPVOL 111111, 222222 FROMUNIT=3350;')\n /('          The DUMPVOL command will copy the contents of disk')\n  ('          volumes 1111 and 2222 to tape, concurrently. They are')\n  ('          3350 type devices and will be copied to tape data sets')\n  ('          JOL.BACKUP.OF1111(+1) and JOL.BACKUP.OF2222(+1)')\n  ('          repectively.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\n%COM$NUM = %COM$NUM + 1;\nIF %COM$NUM > %MAX$COM THEN DO;\n     PANEL blue box/ ///////(ctr ' This is the end of this section.')\n           /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n    %COM$NUM=1;\n    %SYSPFK=3;\n END;\n END; /* OF CAIDUMPV MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIEXPL1": {"ttr": 5387, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIEXPL1 : MACRO;\n IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n LABEL PAN005;\n   PANEL blue box/\n (ctr hi'Execution .vs. Compile Oriented Instructions.')\n /(' NOTE: There are generally TWO types of instructions/commands in')\n  ('       JOL.They are COMPILE ORIENTED and EXECUTABLE instruction.'\n  ('       COMPILE ORIENTED instructions are any of:')\n /('            * SET and ASSIGN statements (e.g. %%A = 5;)')\n /('            * IF statement in conjunction with other ')\n  ('              COMPILE ORIENTED statements')\n /('            * PANEL and REDO statements ')\n /('            * COMPILE ORIENTED STOPs and SIGNAL ERRORs')\n /('            * all DECLAREs (e.g DECLARE DS, PROG, etc.)')\n /('   'hi'         STATEMENTS THAT ARE NOT COMPILE ORIENTED ARE')\n  ('   'hi'         CONSIDERED -- EXECUTABLE STATEMENTS.')\n  ('   'hi'         e.g. RUN, CATALOG,COPY,LISTCAT,MOVE,COMPRESS etc.')\n        %helpline;\n IF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\n IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n LABEL PAN010;\n   PANEL blue box/\n (ctr hi'Execution .vs. Compile Oriented Instructions.')\n//('        Care MUST be taken when mixing COMPILE ORIENTED and')\n  ('        EXECUTION ORIENTED statements in IF and REDO combinations.')\n  ('        For Example, the following code is'hi' ILLEGAL.')\n//(hi'               IF RUNONE = 0 THEN DECLARE XYZ DS ... ;')\n /(  '                  because pending of the result of a RUN')\n  (  '                  you are then trying to DECLARE a  data set.')\n//(hi'               IF RUNONE > 0 THEN REDO LABEL ... ;')\n /(  '                  because REDO is a compile time JOL statement')\n  (  '                  and so can NOT be coded to run at execution.')\n        %helpline;\n IF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\n IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n END; /* OF CAIEXPL1 MARCO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIEXT": {"ttr": 5633, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIEXT : MACRO;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  LABEL PAN005;\n  PANEL blue box/ (hi ctr '----  EXTEND command  ----')\n /('       EXTEND adds data to an existing data sets. The data set is')\n  ('       lengthened.')\n/(hi'                        / dsid \\        /  dsid              \\ ')\n (hi'       Format:  EXTEND {        } WITH {          ||dsid...   };')\n (hi'                        \\dsname/        \\ dsname             /')\n /('       It is sometimes desirable to add data to the end of already')\n  ('       existing data set. One reason would be to maintain one data')\n  ('       set with many days transactions; if necessary, the data set')\n  ('       could be interrogated or split into separate transactions')\n  ('       files for backup and recovery purposes. The EXTEND command')\n  ('       extends sequential data sets ONLY. If the data set to be')\n  ('       EXTENDed does not exist, it will be created. If so it must')\n  ('       be KEPT or CATALOGed or it will be DELETEd at the end of')\n  ('       the job. TEXIST command can be used to see if a data set')\n  ('       exists. If TEXIST returns a zero(0) then data set exists')\n  ('       if non-zero, then data set is not on the volume.')\n        %helpline;\n IF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\n IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n LABEL PAN010;\n PANEL blue box/ ('  Example of the EXTEND')\n / (hi'  1.       DECLARE TRANS DS DSNAME SALES.TRANS.BACKUP')\n   (hi'                            VOLUME DA01')\n   (hi'                            UNIT 3330 ')\n   (hi'                            SPACE 10 CYLS;')\n   (hi'           DECLARE CARDS * ;')\n   ('                   cards here ... ')\n   (hi'           EOF;')\n   (hi'           TEST : TEXIST TRANS; /* EXAMPLE OF')\n   (hi'                                   TEXIST COMMAND  */')\n   (hi'                  IF TEST = 0 THEN /* TRANS  DOES  EXIST */')\n   (hi'                         EXTEND TRANS WITH CARDS; ')\n   (hi'                  ELSE DO; COPY CARDS TO TRANS; ')\n   (hi'                           KEEP CARDS; ')\n   (hi'                       END; ')\n/('  The TEXIST checks that the data set is on the volume. If it is,')\n ('  it will return zero and the EXTEND command will append card data')\n ('  to the data set. If VERIFY returns a non-zero value, the data set')\n ('  is not on the volume and COPY and KEEP commands will be executed.')\n        %helpline;\n  ;\n IF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\n IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n LABEL PAN015;\n PANEL blue box/ ('     Another example of EXTEND.')\n //(hi'     2.    DECLARE OLDTRANS DS DSNAME SALES.X;')\n   (hi'           DECLARE NEWTRANS * ;')\n   (hi'                   cards here ... ')\n   (hi'           EOF;')\n   (hi'           EXTEND OLDTRANS WITH NEWTRANS;')\n //('     OLDTRANS defines a data set called SALES.X and NEWTRANS')\n   ('     defines a card file with new transactions. The EXTEND')\n   ('     command will append the card data to the data already in')\n   ('     the SALES.X data set.')\n        %helpline;\n IF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\n IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n %COM$NUM = %COM$NUM + 1;\n IF %COM$NUM > %MAX$COM THEN DO;\n     PANEL blue box/ ///////(ctr ' This is the end of this section.')\n           /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n     %COM$NUM = 1;\n     %SYSPFK = 3;\n     END;\n END; /* OF CAIEXT MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIFREE": {"ttr": 5635, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  CAIFREE: MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/ (ctr hi '---- The FREE Command ----')\n//('   This command FREEs data sets so that other jobs may access')\n  ('   them. See also the COMPRESS command')\n /(hi'   Format:          / dsid  \\')\n  (hi'              FREE {         }  | (generation number) ?  ;')\n  (hi'                    \\ dsname/')\n/\n('   When resourses are allocated to a job, they are often allocated')\n('   for the entire life of the job, even only is they are used for an')\n('   extremely short part of it. If, for example, a data set X.Y.Z is')\n('   created by the first step of a 10 hour job, no-one else may')\n('   access the X.Y.Z data set until the end of the 10 hour job. If a')\n('   job requiring the use of the data set X.Y.Z is ready to execute,')\n('   the operator is notified that it can not start until the data set')\n('   is free. As soon as the data set is free the second job')\n('   automatically commences execution if all the other resourses it')\n('   requires are available.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/\n('    NOTE: If the data set name you wish to FREE is a single length')\n('          data set name, you must enclose it in single quotes.')\n('          eg. to free a data set X you must code'hi'FREE ''X'';')\n('          If you code FREE X; JOL will attempt to find a data set')\n('          identifier (DSID) called X to free.')\n/('    An example of the free command.')\n/(hi'               DECLARE DSIDONE DS DSNAME SYS1.MACLIB ;')\n (hi'               JOL code : RUNS, COPIES etc ... ;')\n (hi'               FREE NEW.MASTER(+1), DSIDONE ;')\n/('          The data set called NEW.MASTER is a generation group')\n ('          and the (+1) version must have been created by an')\n ('          earlier step in the job. It will be FREEd and other')\n ('          users will be able to access the data set immediately')\n ('          - without waiting for the job to end.')\n ('          The data set referred to by DSIDONE is also FREEd, that')\n ('          is, SYS1.MACLIB.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\n%COM$NUM = %COM$NUM + 1;\nIF %COM$NUM > %MAX$COM THEN DO;\n    PANEL blue box/ ///////(ctr ' This is the end of this section.')\n             /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n    %COM$NUM = 1;\n    %SYSPFK = 3;\n END;\n END; /* OF CAIFREE MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIINCL": {"ttr": 5637, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIINCL : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/(hi ctr'INCLUDE Instruction.')\n/('    The INCLUDE instruction allows you to copy predefined source')\n ('    statements and INCLUDE them in your JOL source code.')\n/(hi'    Format:     INCLUDE member-name;')\n/('    Once a procedure has been tested and debugged, you can store it')\n('    in a library called the INCLUDE LIBRARY. The INCLUDE instruction')\n('    may then be used to instruct JOL to READ the statements from')\n('    library instead of reading the cards. (New procedures may be')\n('    stored in the library with the STORPROC command and updated')\n('    with the UPDATE command or with the use of TSO or TSS.)')\n/('    Using the INCLUDE instruction to include JOL source')\n ('    instructions or text avoids : ')\n ('        * writing the same often used code more than once.')\n ('        * keypunching and handling the punched cards '\n  'for that code')\n ('        * errors due to accidental dropping and')\n ('          mis-sequencing of physical card decks.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/ (ctr 'INCLUDE Instruction continued.')\n/('      The library in which you store your JOL source statements is')\n('      called the INCLUDE library. The library contains individually')\n('      named members; these can contain ANY allowable JOL statements')\n('      including card file images (DECLARE * name).')\n('      The INCLUDE instruction copies the instructions from the')\n('      specified member into the JOL input stream, thus replacing')\n('      the INCLUDE statement. The statements that replaced the INCLUDE'\n)\n('      are processed as though they were the original part of the')\n('      input stream. ')\n/('   Notes  1. The copied or included text is inserted immediately'\n ('             after the INCLUDE instruction.')\n/('          2. The INCLUDEd text may INCLUDE other members, up to')\n ('             a nesting level of ten (10) concurrent INCLUDEs.')\n/('          3. The member name to be included may be defined by a '\n ('             SYMBOLIC parameter e.g.' hi ' INCLUDE %%VAR1;')\n ('             will ' hi 'INCLUDE PAYROLL; '\n 'if %%VAR1 contained ''PAYROLL''.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL blue box/ (ctr'Notes: continued.')\n/('          4. Member names must be no more than 8 characters and must'\n)\n ('             commence with alphabetic or national($,#,@) character')\n/('          5. The STORPROC command will store a new procedure in the')\n ('             library and optionally number each card image, and the')\n ('             UPDATE command may be used to update it.')\n/(' Example:    'hi'INCLUDE SALES;')\n/('             The INCLUDE instruction directs that the libraries')\n ('             are to be searched for the SALES member. The text')\n ('             (JOL source statements) is then interpreted by JOL')\n ('             as though the contents of the INCLUDEd member SALES')\n ('             were placed where the INCLUDE instruction had been.')\n ('             After the instructions in SALES have been inter-')\n ('             preted, the instruction following the INCLUDE will')\n ('             be interpreted.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\n%COM@NUM = %COM@NUM + 1;\nIF %COM@NUM > %MAX@COM THEN DO;\n    PANEL blue box/ ///////(ctr ' This is the end of this section.')\n             /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n    %COM@NUM = 1;\n    %SYSPFK = 3;\n END;\n END; /* OF CAIINCL MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIINITV": {"ttr": 5639, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x82\\x06\\x9f\\x00\\x82\\x08/\\x14I\\x00\\t\\x00\\x04\\x00\\t\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1982-03-10T00:00:00", "modifydate": "1982-03-23T14:49:00", "lines": 9, "newlines": 4, "modlines": 9, "user": "JOL"}, "text": "CAIINITV: MACRO;\nEND;\n      %#1 = ' ANSWER HERE ';\n     %REMARK = '';\n     %#2 = '%#1'; %#3 = '%#1'; %#4 = '%#1';\n     %#5 = '%#1'; %#6 = '%#1'; %#10 = '%#1';\n     %#7 = '%#1'; %#8 = '%#1'; %#9 = '%#1';\n     %#11 = ''; %#12 = ''; %#13 = ''; %#14 = ''; %#15 = ''; %#16 = '';\n     %#17 = ''; %#18 = ''; %#19 = ''; %#20 = '';\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIINTRO": {"ttr": 5641, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIINTRO : MACRO;\n if syspfk=3 | syspfk=15 then exit;\npan005:\n  PANEL blue box /\n    (HI ctr 'Jol Introduction and Overview')\n    (HI ctr '=============================')\n////(HI '      What is Jol ? ')\n  //(ctr 'Jol is a Universal Command Language for:')\n////(ctr 'IBM 360/370/303X computers')\n /*cvc ('                   FUJITSU M series computers')\n    ('                   AMDAHL computers')\n    ('                    etc') */\n  /*\n // ('           and runs under IBM 360 OS, IBM OS/VS and FACOM OSIV/F4,')\n    ('           FACOM OSIV/X8 and on MS/DOS Personal Computers.');*/\n        %helpline;\n\n if syspfk=7 | syspfk=19 then goto pan005;\n if syspfk=3 | syspfk=15 then exit;\npan010:\n  PANEL     blue box /\n    (HI ctr 'Jol Introduction and Overview')\n    (hi ctr '=============================')\n ///(HI ctr'Jol is a Free Format Language similar in style to PASCAL,')\n    (hi ctr 'PL/I,\"C\" and ALGOL.')\n//(ctr 'It is designed for the USER rather than the machine, and')\n  (ctr 'provides an Efficent, Open-Ended,')\n  (ctr 'Structured Command Language Interface to the computer.')\n//(ctr 'A highly sophisticated and easy to use MACRO language')\n  (ctr 'enables Jol to be tailored to the installation.')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan005;\n if syspfk=3 | syspfk=15 then exit;\npan015:\n  PANEL  blue box /\n////////(ctr 'A command language is the highest level')\n        (ctr 'of communication between a person and a computer')\n        (ctr 'which instructs the computer WHAT TO DO ')\n        (ctr 'as opposed to HOW TO DO IT.')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan010;\n if syspfk=3 | syspfk=15 then exit;\npan020:\n  PANEL   blue box /\n ///(ctr 'JCL is extremely powerful, but, like Assembler, needs')\n    (ctr 'a user-friendly shell to complement its use just like:')\n///(HI ctr 'COBOL')\n/(HI ctr 'PLI')\n/(HI ctr 'FORTRAN')\n/(HI ctr 'PASCAL')\n//(ctr 'etc do for ' hi 'TODAY''s computers.')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan015;\n if syspfk=3 | syspfk=15 then exit;\npan025:\n  PANEL     blue box /\n   /(HI ctr 'Universal Command Languages')\n ///('      In addition, Jol produces executable code for other ')\n    ('      Operating System ',x,19,'from the same language.')\n/(HI '      Billions of dollars are spent worldwide each year')\n (HI '      converting from one operating system to another.')\n/   ('      Jol provides a standard user interface to:')\n//(HI '            MVS, VS1 and DOS/VSE')\n/*  /(HI '         F4 ')\n/(HI '         X8 ')\n/(HI '         DOS')\n/(HI '         F2')  */\n//('     that is, nearly all the currently used mainframe computers!')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan020;\n if syspfk=3 | syspfk=15 then exit;\npan030:\n  PANEL  blue box / ///\n     (ctr '''Jol''')\n   / (ctr 'the highest level of communication')\n     (ctr 'between')\n     (ctr 'man and the machine.')\n   //(ctr 'just as')\n  /(HI ctr 'COBOL ')\n /   (ctr 'is to')\n/(HI  ctr 'ASSEMBLER')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan025;\n if syspfk=3 | syspfk=15 then exit;\npan035:\n  PANEL  blue box /\n   /(HI ctr 'HISTORY of the Jol Universal Command Language')\n    (HI ctr '=============================================')\n   /('         1972 - initial Jol version (SHELL) ')\n   /('         1974 - MACRO facility added')\n   /('         1975 - AMOCO (USA) - greatly enhanced to American Standards')\n   /('         1978 - Marketing starts in Austrlia')\n   /('         1981 - Japanese Computer Company FUJITSU starts selling Jol')\n   /('         1987 - Non JCL Version (TSO) made available')\n   /('         1987 - Full Automatic Scheduling System Added')\n   /('         1988 - Micro-Jol - the MAINFRAME Connector')\n   /('         1991 - Universal \"C\" Version')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan030;\n if syspfk=3 | syspfk=15 then exit;\npan040:\n   PANEL blue box /\n    (ctr hi '-Jol-')\n  //('        using Jol you can :')\n   /('        *  print data sets ')\n    ('        *  copy data sets or volumes containing data sets')\n    ('        *  catalog or delete data sets')\n    ('        *  execute programs')\n    ('        *  test return codes,error conditions and  ')\n    ('           symbolic variables ')\n    ('        *  submit other jobs to the system ')\n    ('        *  list catalogs and VTOCs')\n  / ('        AND MUCH MORE')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan035;\n if syspfk=3 | syspfk=15 then exit;\npan045:\n   PANEL blue box /\n ///('    For example, to print a data set you could say :')\n/(HI '         PRINT JOL.INCLUDE(PAYROLL); ')\n  / ('    which will print, on the printer, a member PAYROLL of the')\n    ('    data set JOL.INCLUDE.')\n///( '    To COPY a data set:')\n /(HI'          COPY MASTER.FILE TO TEST.FILE; ')\n  /( '    and to COPY members of a library : ')\n /(HI'          COPY TEST.PROCLIB TO SYS2.PROCLIB SELECT(A,B,C);')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan040;\n if syspfk=3 | syspfk=15 then exit;\npan050:\n  PANEL blue box / (ctr '- Jol - ')\n   //(HI ctr 'AREAS OF USE')\n //('          1. Scientific user - STABLE Environment')\n  /('          2. Computer programmer - DYNAMIC Environment')\n  /('          3. Production control environment - COMPLEXITY,RESTART')\n  /('          4. Housekeeping - STATIC,DYNAMIC Environments')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan045;\n if syspfk=3 | syspfk=15 then exit;\npan055:\n  PANEL   blue box /\n  (ctr hi  '---------- BENEFITS ----------')\n /('    As with ALL high level languages, Jol:-')\n /('          *  Reduces Learning Time')\n  ('          *  Obviates the need to learn two or more JCL systems')\n  ('             eg MVS and DOS ')\n  ('          *  Reduces Coding Time ')\n  ('          *  Saves Hours of 1. Computer Time')\n  ('                            2. Programmer Time')\n  ('          *  Offers Many New Powerful Facilities')\n  ('          *  Provides Programmed Restarts')\n  ('          *  Provides Optimised JCL')\n (HI '            or')\n  ('          *  Allows the job to run under TSO')\n  ('             with NO Command Language Changes')\n  ('          *  Provides an Open-Ended Language (you can add to it)')\n  ('          *  Provides USER Validation Exits ')\n/ ('      AND JCL AND JOL CAN CO-EXIST',X,1)\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan050;\n if syspfk=3 | syspfk=15 then exit;\npan060:\n %oldtime=' %hours:%MINS:%secs';\n gettime;\n  PANEL blue box / (ctr HI 'Jol Calendar Facility')\n //('      %%SYSDATE - current date e.g. todays date is' hi ' %SYSDATE')\n / ('      %%YEAR    - it is ' hi '%YEAR' normal ' now')\n / ('      %%MONTH   - January,February etc; it is now ' hi '%MONTH')\n   ('      %%MONTHNO - 01,02 thru 12; ')\n / ('      %%DAY     - Monday,Tuesday etc; today is ' hi '%DAY')\n   ('      %%DAYNO   - 01-31')\n / ('      %%HOURS   - 0-23')\n   ('      %%MINS    - 0-59')\n   ('      %%SECS    - 0-59')\n / ('      For example, the time when you started was:' hi '%oldtime')\n   ('      and it is now ' hi ' %hours:%MINS:%secs')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan055;\n if syspfk=3 | syspfk=15 then exit;\npan065:\n  PANEL blue box / (ctr HI 'Jol Compiler Error Checks')\n ////('      *  Normal syntax checks ')\n     ('      *  Catalog searches to ensure datsets available ')\n     ('      *  Automatic data set disposition processing')\n     ('      *  Identifies data sets to be used as work files')\n     ('         and insures availability for job execution')\n     ('      *  Checks for erroneous instructions')\n     ('      *  Availability of non-cataloged, existing data sets')\n     ('         required by job')\n   //('      with Options to RUN (or not)')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan060;\n if syspfk=3 | syspfk=15 then exit;\npan070:\n  PANEL blue box / (ctr HI 'Jol Automatically:-')\n      //('           (a) Passes data sets')\n       /('           (b) Locates data sets - organizes mounting')\n       /('           (c) Retains volumes ')\n       /('           (d) Determines if data sets being used are')\n        ('               temporary or are work data sets')\n        ('               - deletes them as soon as possible.')\n       /('           (e) Searches catalog once only ')\n       /('           (f) Combines steps where possible ')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan065;\n if syspfk=3 | syspfk=15 then exit;\npan075:\n  PANEL blue box / (hi ctr 'Jol')\n////('             gives you many NEW FACILITIES, for example')\n   /('                 * Job Scheduling')\n   /('                 * Dependent Job Streams')\n   /('                 * Symbolic Parameter Comparisons')\n   /('                 * ALLOC, READ and WRITE Instructions')\n   /('                 * Defaults')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan070;\n if syspfk=3 | syspfk=15 then exit;\npan080:\n  PANEL blue box / (ctr hi 'Compile Time Facilities')\n //('      Jol program ----> COMPILED ----> SUBMITTED for execution')\n //('     There are four main pahses in a Jol Compilation:')\n  /('        1. MACRO    \\')\n   ('                     \\')\n   ('        2. COMPILE    \\')\n   ('                       >  PHASE')\n   ('        3. GENERATE   /')\n   ('                     /')\n   ('        4. EXECUTE  /')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan075;\n if syspfk=3 | syspfk=15 then exit;\npan085:\n  PANEL blue box / (ctr hi 'Compile Time Facilities (cont''d)')\n //(HI '        Selected Parts of a Program may be altered during the')\n   (HI '        MACRO or PREPROCESSOR Phase')\n    //('           (A) Define and initialize symbolic variables')\n      ('           (B) Test current values of symbolic variables')\n      ('           (C) Change symbolic variable values')\n      ('           (D) Select portions of program to be compiled')\n      ('           (E) Include source text from a library')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan080;\n if syspfk=3 | syspfk=15 then exit;\npan090:\n  PANEL blue box / (ctr hi 'Compile Time Facilities (cont''d)')\n     ///('            MACRO PHASE OUTPUT (altered source code)')\n        ('                           |')\n        ('                           |')\n        ('                           V')\n        ('                     COMPILE PHASE')\n        ('                           |')\n        ('                           |')\n        ('                           V ')\n        ('             GENERATE NECESSARY EXECUTION-CODE')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan085;\n if syspfk=3 | syspfk=15 then exit;\npan095:\n  PANEL blue box /  (ctr HI 'Jol Defaults')\n  //('     Sysout Space                           10,10 TRKS ')\n    ('     Job Region                             120 K')\n    ('     Job Class                              A')\n    ('     Job Priority                           3')\n    ('     Job Elapsed Time                       10 MINS')\n    ('     Job CPU Time                           2 MINS')\n   /('     Defaults are installation dependant, and set up when Jol is')\n    ('     installed.')\n  //('     Please consult your programming manager for all defaults.')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan090;\n if syspfk=3 | syspfk=15 then exit;\npan100:\n  PANEL blue box /\n  (HI ctr 'Jol has easy instructions to:')\n   //('     *  DEFINE your Programs and Data Sets (FILES)')\n     ('     *  EXECUTE your Programs')\n     ('     *  TEST the Values Returned by Programs ')\n     ('        and the Values of Symbolic Variables ')\n     ('     *  KEEP, CATALOG, SCRATCH, DELETE and UNCATALOG Data Sets')\n     ('     *  COPY, MERGE, SORT, PRINT, LIST etc. Data Sets')\n     ('     *  SUBMIT JOBS at any time from an executing job')\n     ('     *  Use the CALENDAR to SUBMIT jobs and/or run parts')\n     ('        of any job at any specified time on any specified day')\n     ('     *  WRITE NEW COMMANDS with the MACRO and/or')\n     ('        INVOKE Facilities')\n     ('     *  COMMUNICATE with the Operator')\n     ('     *  ALTER the Jol Program at Compile Time')\n     ('     *  STOP PROCESSING at any time')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan095;\n if syspfk=3 | syspfk=15 then exit;\npan105:\n  PANEL blue box /\n  ///('          *  Jol IS EASY TO INSTALL')\n   //('          *  Jol DOES NOT REQUIRE OVERNIGHT CONVERSIONS')\n   //('          *  Jol WILL OPERATE UNDER MANY OPERATING SYSTEMS')\n ////\n (hi  '          *  Jol JOBS AND JCL JOBS CAN CO-EXIST')\n        %helpline;\n if syspfk=7 | syspfk=19 then goto pan100;\n if syspfk=3 | syspfk=15 then exit;\n %CHNUM = %CHNUM + 1;\n IF %CHNUM > %MAXCHAP THEN DO;\n PANEL blue box /\n ///////(ctr ' This was the LAST chapter of the Introduction.')\n       /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n %CHNUM = 1;\n syspfk = 3;\n          END;\n  END;  /* OF CHAP1 MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIJLIB": {"ttr": 5890, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIJLIB : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN001;\nPANEL blue box/ctr hi'JOBLIB Command - Specifying Job Libraries'\n//('      The JOBLIB COMMAND defines a private library to be made')\n('      available by the system to an entire job.')\n/\n(hi'      Format:     JOBLIB data set1 <data set2>;')\n/\n('      Unless you inform the system that any program you run resides')\n('      in a private or temporary library, the system expects to find')\n('      it in the system library(SYS1.LINKLIB) or one of its optionally'\n('      concatenated libraries.')\n/\n('      The JOBLIB command informs the system that the named library is'\n('      to be searched for all programs in the job BEFORE the system')\n('      library is searched.')\n)\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL blue box/ctr hi'JOBLIB Command - Specifying Job Libraries'\n//'      RULES for coding :'\n//('          'hi' * JOBLIB command can be coded anywhere in the)'\n('          'hi'   program')\n('          'hi' * the libraries must be cataloged')\n('          'hi' * if you include a JOBLIB command in your JOL)'\n('          'hi'   program, the system first searches the private')\n('          'hi'   library and if it does not find the program)'\n('          'hi'   there, it next searches the system library')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL blue box / ctr hi'Examples of the JOBLIB Command'\n//\n('       1. 'hi'JOBLIB PRIVATE.LIBRARY;')\n/\n('          The library known as PRIVATE.LIBRARY is defined as a')\n('          JOB Library.')\n//\n('       2. 'hi'JOBLIB PAYROLL1.LINKLIB PAYROLL2.LINKLIB;')\n/\n('          Two libraries PAYROLL1.LINKLIB and PAYROLL2.LINKLIB are to'\n('          be used as Job Libraries. Whenever a program is to be'\n('          executed the two private libraries are searched'\n('          first for the program.  If it is not found in either'\n('          library,the system libraries are searched in the usual way.'\n)\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n      %COM@NUM = %COM@NUM + 1;\n      IF %COM@NUM > %MAX@COM THEN DO;\n PANEL box ///////(ctr ' This is the end of this section.')\n       /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n         %COM@NUM = 1;\n         %SYSPFK = 3;\n      END;\nEND; /* OF CAIJLIB MACRO */\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIJOB": {"ttr": 5892, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  CAIJOB : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/ (ctr hi 'Running Your Job')\nlm 9\n    /('To execute a job, its requirements for data and resources')\n     ('must be made known. You request data sets (files) and their')\n     ('associated volumes and units and request storage in which')\n     ('programs are to execute.')\nlm 2\n   //(ctr hi 'JOB statement')\nlm 9\n    /('The JOB statement is used to assign a job name to your job.')\n     ('This name is used by the Operating System to identify')\n     ('messages to the operator and to identify your job''s')\n     ('output. Any printouts or punched cards to do with your job')\n     ('will have the job name you have assigned to the job on them.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/ (ctr hi 'Running Your Job (continued)')\nlm 9\n   /('The JOB statement also defines details such as the ')\n    ('expected time of the job, who is to be charged for the job')\n    ('(accounting information) and similar details.')\n   /('In summary the facilities you may request are:')\n   /('*  provide accounting information (including your name) for')\n    ('   your installations accounting routines -',#1,4,'ACCT')\n    ('*  assign job priority -',#2,4,'PRTY')\n    ('*  request a specific class for the system messages')\n    ('   relating to your job',#3,8,'MSGCLASS')\n    ('*  hold your job for later execution -',#4,4,'HOLD')\n    ('*  limit the amount of CPU time your JOB may use -',#5,4,'TIME')\n    ('*  specify the amount of storage instead of virtual')\n    ('   storage (VS storage) -',#6,4,'REAL')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL blue box/ (ctr hi 'The Job Statement')\nlm 8\n   /(hi 'Format:       |JOBNAME?:  job |optional information?')\n   /('The Jobname is optional (shown in square brackets) as')\n    ('JOL will designate one to the JOB if no job name is coded.')\n  / ('The job statement is important as it is by its use that jobs')\n    ('may be classified according to there characteristics and')\n    ('importance. Ideally two jobs that require very heavy use of ')\n    ('the CPU should not be run together as resource bound jobs will')\n    ('be competing constantly for the use of the CPU. It is preferable')\n    ('to use a compute bound JOB with an I/O  bound job will require')\n    ('CPU less often thus allowing both of the JOBs to be processed')\n    ('faster. So that the computer can be informed about the likely')\n    ('characteristics of a job, each job is assigned a JOB class')\n  //('The next screen will give you examples of what your')\n    ('installation MAY designate for CLASS.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL blue box/ (ctr hi 'The Job Statement')\nlm 10\n /(hi 'EXPLANATION                                    CLASS')\n   /('Fast turnaround programmer tests; no tape ')\n    ('or disk mounts allowed                         'hi'A')\n   /('Jobs requiring tapes or disks to be mounted    'hi'B')\n   /('As B, but also requiring very large storage')\n    ('requirements                                   'hi'C')\n   /('Long running JOBs                              'hi'D')\n   /('Compile bound JOBs                             'hi'E')\n   /('Overnight JOBs                                 'hi'O')\n   /('NOTE: The above class designations are an example only -')\n    ('      Your installation may not follow the above class rules')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN025;\nPANEL blue box/ (ctr hi 'The Job Statement')\nlm 9\n  / ('The operator can instruct the machine to run only one job of')\n    ('each class at a time, or, if he desires, in any other')\n    ('arrangement.')\n ///(hi'NOTE:')\n    ('      The job validation facilities provided by JOL allow')\n    ('      automatic assignment of class, priority etc, best')\n    ('      suited to your JOB - Check if these facilities are')\n    ('      currently in use at your installation.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN030;\nPANEL blue box/ (ctr hi 'Assigning a Jobname')\nlm 8\n   /('Every JOB in the operating system must have a name so that the')\n    ('operator can alter the class, priority, or cancel it, separate')\n    ('printed and punched output and so on. If you do not assign a')\n    ('JOBNAME, JOL will create one for you.')\n   /('The JOBNAME must consist of 1 to 8 alphanumeric and or ')\n    ('national ($,#,@) characters, the first of which must not be a')\n    ('number.')\n  //('EXAMPLES of valid jobnames: 'hi'PAYROLL, JBNAME, ST$PETER')\n   /('EXAMPLES of invalid jobnames: 'hi'1GO, YANKEEDOODLE')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan025;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN035;\nPANEL blue box/ (ctr hi 'Exercises')\nlm 8\n   /('Place a Y for the correct jobnames below and a N for the')\n    ('incorrect ones.')\n    ('                MONDAYJOB   ',A,1,'A')\n    ('                JOLJOB      ',B,1,'A')\n    ('                #LOAD       ',C,1,'A')\n    ('                NEWS        ',D,1,'A')\n    ('                PAY JOB     ',E,1,'A')\n    ('                OOPS        ',F,1,'A')\n    ('                LIST001     ',G,1,'A')\n    ('                PAYROLL002  ',H,1,'A')\n        %helpline;\n  /* HERE WE TEST TO SEE WHETHER THE ANSWERS ARE CORRECT OR NOT */\n  /* THEN FOLLOW WITH A PANEL SHOWING THE CORRECT VALUES ETC    */\n  if %A='n' then %A='N';\n  if %b='y' then %b='Y';\n  if %c='y' then %c='Y';\n  if %d='y' then %d='Y';\n  if %e='n' then %e='N';\n  if %f='y' then %f='Y';\n  if %g='y' then %g='Y';\n  if %h='n' then %h='N';\n  IF %A\u00ac='N' THEN %A2 = 'JOBNAME TOO LONG';    ELSE %A2='';\n  IF %B\u00ac='Y' THEN %B2 = 'VALID JOBNAME';       ELSE %B2='';\n  IF %C\u00ac='Y' THEN %C2 = '#LOAD IS CORRECT ';   ELSE %C2='';\n  IF %D\u00ac='Y' THEN %D2 = 'NEWS IS CORRECT';     ELSE %D2='';\n  IF %E\u00ac='N' THEN %E2 = 'CONTAINS SPACES';     ELSE %E2='';\n  IF %F\u00ac='Y' THEN %F2 = 'OOPS IS CORRECT';     ELSE %F2='';\n  IF %G\u00ac='Y' THEN %G2 = 'CORRECT';             ELSE %G2='';\n  IF %H\u00ac='N' THEN %H2 = 'JOBNAME TOO LONG';    ELSE %H2='';\n  %CORRECT = 0;\n  IF %A2='' THEN %CORRECT = %CORRECT + 1;\n  IF %B2='' THEN %CORRECT = %CORRECT + 1;\n  IF %C2='' THEN %CORRECT = %CORRECT + 1;\n  IF %D2='' THEN %CORRECT = %CORRECT + 1;\n  IF %E2='' THEN %CORRECT = %CORRECT + 1;\n  IF %F2='' THEN %CORRECT = %CORRECT + 1;\n  IF %G2='' THEN %CORRECT = %CORRECT + 1;\n  IF %H2='' THEN %CORRECT = %CORRECT + 1;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan030;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN040;\nPANEL blue box/ (ctr hi 'Exercise Answers')\nlm 8\n   /('This is what you should have had for the previous screen')\n   /('JOBNAME     correct    your      reason (if you were wrong)')\n    ('JOBNAME     answer     answer ')\n    ('MONDAYJOB      N        %A       %A2')\n    ('JOLJOB         Y        %B       %B2')\n    ('#LOAD          Y        %C       %C2')\n    ('NEWS           Y        %D       %D2')\n    ('PAY JOB        N        %E       %E2')\n    ('OOPS           Y        %F       %F2')\n    ('LIST001        Y        %G       %G2')\n    ('PAYROLL002     N        %H       %H2')\n  //('YOU HAD %CORRECT ANSWERS OUT OF A POSSIBLE 8',#1,1)\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan035;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN045;\nPANEL blue box/ (ctr hi 'Here are some valid JOB statements')\nlm 8\n/(hi 'PAYROLL: JOB SIZE=60 K CLASS=C;')\n/('Job PAYROLL is defined as CLASS C job, requiring 60 K of storage')\n//(hi 'JOB1: JOB TIME=5 MINS SIZE = 50 K ')\n (hi '          USER = %SYSUID;')\n/('JOB1 is defined to take 5 minutes maximun elapsed time to run')\n ('     requires 50 K of storage and the user name is %SYSUID')\n//(hi 'JOB2: JOB HOLD')\n (hi '      TIME = 7, 2 MINS')\n (hi '      CLASS= D')\n (hi '      CHARGE DEPARTMENT;')\n/('JOB2 is defined to be charged to department DEPARTMENT, ')\n ('     HOLD means to delay execution.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan040;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN050;\nPANEL blue box/ (ctr hi 'Further Exercises')\nlm 8\n   /('Type in a job statement for:-')\n    ('JOBNAME is payroll      ',A,40,'ANSWER')\n    ('username is JANE.DOE    ',B,40,'ANSWER')\n    ('class is C              ',C,40,'ANSWER')\n    ('priority is 6           ',D,40,'ANSWER')\n    ('CPU time is 2 mins      ',E,40,'ANSWER')\n    ('elapsed time is 10 mins ',F,40,'ANSWER')\n    ('charge to ACCT01        ',G,40,'ANSWER')\n    ('job requires 256 K of   ',H,40,'ANSWER')\n    ('storage')\n        %helpline;\n   IF %A='ANSWER' | %A='' THEN %A=' ';         /* DEFINE VARIABLES    */\n   IF %B='ANSWER' | %B='' THEN %B=' ';         /* FOR THE NEXT SCREEN */\n   IF %C='ANSWER' | %C='' THEN %C=' ';         /* IF THE STUDENT HAS  */\n   IF %D='ANSWER' | %D='' THEN %D=' ';         /* NOT ANSWERED QUEST  */\n   IF %E='ANSWER' | %E='' THEN %E=' ';\n   IF %F='ANSWER' | %F='' THEN %F=' ';\n   IF %G='ANSWER' | %G='' THEN %G=' ';\n   IF %H='ANSWER' | %H='' THEN %H=' ';\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan040;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN055;\nPANEL blue box/ (ctr hi 'Exercise Answers')\nlm 8\n    ('A correct answer to the     |  Your answer was  ')\n    ('question is:                | ')\n   /('PAYROLL : JOB               | ',#1,40,'%A')\n    ('NAME = JANE.DOE             | ',#2,40,'%B')\n    ('CLASS = C                   | ',#3,40,'%C')\n    ('PRTY = 6                    | ',#4,40,'%D')\n   /('TIME = 2, 10 MINS           | ',#5,40,'%E')\n    ('                            | ',#6,40,'%F')\n    ('ACCT=ACCT01                 | ',#7,40,'%G')\n    ('SIZE=256 K ;                | ',#8,40,'%H')\n  //('If your answers were more or less the same then you were correct')\n   ('Note that for NAME=FRED.BASSETT you could have coded FRED.BASSETT')\n   ('likewise you could have left out the \"=\" sign in all cases')\n   ('You could have also coded the JOB statement on one line.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan050;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN060;\nPANEL blue box/ (ctr hi 'Further Exercises')\nlm 8\n   /('Type in a job statement for:-')\n   /('jobname is PAYROLL          ',A,40,'ANSWER')\n    ('time is 10,2 minutes        ',B,40,'ANSWER')\n    ('class c                     ',C,40,'ANSWER')\n    ('priority 6                  ',D,40,'ANSWER')\n    ('charge to acct 0102         ',E,40,'ANSWER')\n    ('job requires 256 K          ',F,40,'ANSWER')\n    ('of storage')\n    ('The user is Jane Doe        ',G,40,'ANSWER')\n        %helpline;\n   IF %A='ANSWER' | %A='' THEN %A=' ';         /* DEFINE VARIABLES    */\n   IF %B='ANSWER' | %B='' THEN %B=' ';         /* FOR THE NEXT SCREEN */\n   IF %C='ANSWER' | %C='' THEN %C=' ';         /* IF THE STUDENT HAS  */\n   IF %D='ANSWER' | %D='' THEN %D=' ';         /* NOT ANSWERED QUEST  */\n   IF %E='ANSWER' | %E='' THEN %E=' ';\n   IF %F='ANSWER' | %F='' THEN %F=' ';\n   IF %G='ANSWER' | %G='' THEN %G=' ';\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan050;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN060;\nPANEL blue box/ (ctr hi 'Possible Answers')\nlm 8\n // ('A correct answer to the     |  Your answer was  ')\n    ('question is:                | ')\n   /('PAYROLL : JOB               | 'hi'%A')\n    ('TIME = 2, 10 MINS           | 'hi'%B')\n    ('CLASS = C                   | 'hi'%C')\n    ('PRTY = 6                    | 'hi'%D')\n    ('ACCT = 0102                 | 'hi'%E')\n    ('256 K                       | 'hi'%F')\n    ('USER FRED BASSETT ;         | 'hi'%G')\n  ///(hi 'Did you remember the ; to end the statement?')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan055;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN065;\nPANEL blue box/ (ctr hi 'Exercise')\nlm 8\n  //('Define a job called DELAYER:-')\n    ('jobname                      ',A,40,'ANSWER')\n    ('class is A                   ',B,40,'ANSWER')\n    ('storage is to be 50 K        ',C,40,'ANSWER')\n    ('elapsed time 30 mins')\n    ('10 minutes CPU time          ',D,40,'ANSWER')\n    ('priority 6                   ',E,40,'ANSWER')\n    ('charge to PAY.DEPT           ',F,40,'ANSWER')\n    ('and delay execution          ',G,40,'ANSWER')\n    ('The user is RALF             ',H,40,'ANSWER')\n        %helpline;\n   IF %A='ANSWER' | %A='' THEN %A=' ';         /* DEFINE VARIABLES    */\n   IF %B='ANSWER' | %B='' THEN %B=' ';         /* FOR THE NEXT SCREEN */\n   IF %C='ANSWER' | %C='' THEN %C=' ';         /* IF THE STUDENT HAS  */\n   IF %D='ANSWER' | %D='' THEN %D=' ';         /* NOT ANSWERED QUEST  */\n   IF %E='ANSWER' | %E='' THEN %E=' ';\n   IF %F='ANSWER' | %F='' THEN %F=' ';\n   IF %G='ANSWER' | %G='' THEN %G=' ';\n   IF %H='ANSWER' | %H='' THEN %H=' ';\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan060;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN070;\nPANEL blue box/ (ctr hi 'Answers')\nlm 8\n    ('A correct answer to the      |  Your answer was  ')\n    ('question is:                 | ')\n   /('DELAYER : JOB                | 'hi'%A')\n    ('CLASS A                      | 'hi'%B')\n    ('50 K                         | 'hi'%C')\n    ('TIME = 2, 10 MINS            | 'hi'%D')\n    ('PRTY 6                       | 'hi'%E')\n    ('CHARGE  PAY.DEPT             | 'hi'%F')\n    ('HOLD /* TO DELAY EXECUTION */| 'hi'%G')\n    ('USER RALF ;                  | 'hi'%H')\n  //('As you probably noticed, the order in which the options are')\n    ('specified does not matter, equal signs  =  are optional')\n    ('eg. SIZE = 256 K is the same as SIZE 256 K which is the same')\n    ('    as 256 K (a lot of reserved words are also optional, JOL')\n    ('    recognises them contextually; it is, however, a good')\n    ('    programming practice to code them in full.)')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan065;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN075;\n%COM#NUM = %COM#NUM + 1;\nIF %COM#NUM > %MAXCOM THEN DO;\n  PANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n%COM#NUM = 1;\n%SYSPFK = 3;\nEND;\nEND; /* OF CAIJOB MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIJOBPR": {"ttr": 5898, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIJOBPR : MACRO;\n            DECLARE %COM@NUM INIT 1 EXT;\n            DECLARE %NUM INIT 1;\n            DECLARE %TYPE@COM INIT '';\n            DECLARE %ERR1 INIT '';\n            DECLARE %ERR2 INIT '';\n            DECLARE %MAX@COM INIT 7 EXT;\n            DECLARE %CALL@COM INIT '';\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  LABEL JPFMENU;\n  panel blue box //\n  lm 15\n  ('  Job Processing Facilities Menu :')\n//('  INCLUDE            ============ > 1')\n  ('  SUBMIT             ============ > 2 ')\n  ('  PANEL and REDO     ============ > 3 ')\n  ('  JOBLIB             ============ > 4 ')\n  ('  SETUP              ============ > 5 ')\n  ('  STARTAT and STOPAT ============ > 6 ')\n  ('  CONTROL QUESTIONS  ============ > 7 ',COM@NUM,1,'%COM@NUM')\n /('             %ERR1')\n  ('             %ERR2')\n /('Press ENTER to start from the beginning or')\n  ('select an instruction. NOTE : if you have not')\n  ('done this course before - start from the beginning')\n /('Press PFK 3 to return to MAIN menu/index of the course');\n   %TYPE@COM = TYPE(COM@NUM);\n LABEL REPEAT;\n     %ERR1 = ''; %ERR2 = '';\n     IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15\n     then do;\n       IF %TYPE@COM \u00ac= 'NUM' THEN DO;\n         %ERR1= ' I do not understand your selection ';\n         %ERR2 = ' Please RETYPE ';\n         REDO JPFMENU;\n       END;\n       ELSE DO;\n          IF %COM@NUM > %MAX@COM | %COM@NUM < 1 THEN DO;\n             %ERR1 = ' PLEASE SELECT A NUMBER FROM 1 TO %MAX@COM ';\n             REDO JPFMENU;\n           END;\n           ELSE DO; %CALL@COM = '';\n                  IF %COM@NUM = 1 THEN %CALL@COM = 'CAIINCL';\n                  IF %COM@NUM = 2 THEN %CALL@COM = 'CAISUBM';\n                  IF %COM@NUM = 3 THEN %CALL@COM = 'CAIPANL';\n                  IF %COM@NUM = 4 THEN %CALL@COM = 'CAIJLIB';\n                  IF %COM@NUM = 5 THEN %CALL@COM = 'CAISETUP';\n                  IF %COM@NUM = 6 THEN %CALL@COM = 'CAISTAT';\n                  IF %COM@NUM = 7 THEN %CALL@COM = 'CAAJOBPR';\n                    %CALL@COM;\n                  IF %SYSPFK = 3 THEN REDO JPFMENU;\n                  ELSE REDO REPEAT;\n            END;\n        END;\n   END; /* OUTER IF %SYSPFK \u00ac= 3 */\n         %CHNUM = %CHNUM + 1;\n         IF %CHNUM > %MAXCHAP THEN DO;\n       PANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n            %CHNUM = 1;\n            %SYSPFK = 3;\n         END;\n END; /* OF MACRO CAIJOBPR */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIJOL": {"ttr": 5900, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIJOL: MACRO (%MENU); /* ************************************ */\n                        /* AUTHORS : YURI BUDILOV & PAUL CLARKE */\n                        /*           FOR CCS (CLARKE COMPUTER   */\n                        /*                    SOFTWARE PTY LTD.)*/\n                        /* Rewritten for the Personal Computer  */\n                        /*           by Clement Clarke,         */\n                        /*              for CCS-Jol Pty Ltd,    */\n                        /*              1985-1986               */\n                        /*                                      */\n                        /* THIS IS THE MAIN PROGRAM FOR         */\n                        /* COMPUTER AIDED INSTRUCTION (CAI)     */\n                        /* COURSE (CAI) FOR Jol.                */\n                        /* CALLED BUY TYPING \"CAIJOL\" or to go  */\n                        /* straight into the MENU \"CAIJOL MENU\" */\n                        /* ALL MACROS NAMES (MEMBERS) STARTING  */\n                        /* WITH CHARACTERS \"CAI\" BELONG TO THIS */\n                        /* COURSE.                              */\n   /* ********************                                      */\n   /* CURRENT VERSION 1.0 OF THE CAIJOL COURSE  24 MAR 1982.    */\n\n\n   /* LAST VERSION WAS 1.0 OF THE CAIJOL COURSE  24 MAR 1982.   */\n   /* VERSION 1.0 WAS FINISHED ON THE 24TH MARCH 1982.          */\n   /* VERSION 1.1 WAS FINISHED ON THE 27TH jan   1983. by djd   */\n   /* VERSION 1.2 WAS FINISHED ON THE 22TH mar   1984. by djd   */\n   /* VERSION 2.0 WAS FINISHED ON THE 31TH may   1985. by cvc   */\n   /* VERSION 2.1 WAS FINISHED ON THE 23TH Feb   1986. by cvc   */\n   /* VERSION 2.2 WAS FINISHED ON THE 23TH Oct   1987. by cvc   */\n   /* ********************************************************* */\n\n   /* change the version variable below for current version no. */\n        DECLARE %VERSION INIT '4.0' ;\n          DCL %TYPEOF INIT '';\n          DCL %FIRSTD INIT '';\n          DCL %SECONDD INIT '';\n          DCL %ERR1 INIT '';\n          DCL %chnum INIT 1 EXT;\n          DCL %MAXCHAP INIT '12' EXT; /* MAXIMUM CHAPTER NUMBER */\n          DCL %CALL INIT '' EXT;\n          DCL %DONE INIT 0 EXT;\n          DCL %syspfk init 0;\n%helpline =\n'helpline (''PFK 3 or 15 Exits, PFK7 or 19 Shows Previous Screen'')';\n panel option caps;                 /* Get Upper case answers only */\n IF MENU ='' then do;\n    LF = 'LLL   LL';\n    LG = 'LLLLLLLL';\n    if syspfk=3 | syspfk=15 then exit;\nPAN001:\n    PANEL box\n //////('  ')\n lm 6\n (hi ' CCCCCCCC         AAAAAA     III    JJJJJJJJJ    OOOOOO     LLL')\n (hi 'CCC    CC        AA   AA     III    JJJ JJJ     OO    OO    LLL')\n (hi 'CCC             AA    AA     III        JJJ     OO    OO    LLL')\n (hi 'CCC            AAAAAAAAA     III        JJJ     OO    OO    LLL')\n (hi 'CCC           AAAAAAAAAA     III        JJJ     OO    OO    LLL')\n (hi 'CCC    CC    AAA      AA     III    JJ  JJJ     OO    OO    %LF')\n (hi ' CCCCCCCC   AAA       AA     III    JJJJJJ       OOOOOO     %LG')\n ////(ctr 'Press the ENTER key to continue ...');\n    if syspfk = 7 | syspfk=19 then goto pan001;\n    if syspfk=3 | syspfk=15 then exit;\npan002:\n    goto pan003;   /* ------------------------------------ */\n PANEL box ///\n (ctr HI 'The Computer Aided Instruction (CAI) course for')\n   (ctr HI 'the Universal Command Language (Jol)  -  CAIJOL.')\n  /////\n   (ctr 'Do you have a color monitor? ',a,1,'N')\n   %helpline;\n    if syspfk = 7 | syspfk=19 then goto pan002;\n    if syspfk=3 | syspfk=15 then exit;\n    if a='Y' | a='y' then color;\n    else jolopt bw;\npan003:\n PANEL blue box /\n   (ctr HI 'The Computer Aided Instruction (CAI) course for')\n   (ctr HI 'the Universal Command Language (Jol)  -  CAIJOL.')\n   lm 8\n  /('The aim of this course is to provide Jol users with the ability')\n   ('to write Jol programs.')\n  /('The course is designed for ease of use and there are only a few')\n   ('simple rules to remember:')\n  /(' 1.' hi ' The course is MENU driven.')\n   (' 2.' hi ' To go from one screen to the next use the ENTER key.')\n   (' 3.' hi ' To go back a screen press PFK (7/19).')\n   (' 4.' hi ' To get out of the chapter you are in use PFK (3/15).')\n   ('   ' hi ' except when asked a Question (in tests)')\n   ('   ' hi ' PFK (3/15) is only effective after the answer')\n   ('   ' hi ' has been given to the question.')\n  /('                    Press the ENTER key to continue ...');\n PANEL blue box /\n   (ctr HI 'The Computer Aided Instruction (CAI) course for')\n   (ctr HI 'the Universal Command Language (Jol)  -  CAIJOL.')\n   lm 8\n   ///\n///(hi'Note: ALLOCATE, READ, WRITE, BUILDJOB, Scheduling and Networks')\n   (hi'are not included in this course - refer to the General')\n   (hi'Information Manual and Reference Manuals for further details.')\n   %helpline;\n    if syspfk=3 | syspfk=15 then exit;\n    if syspfk = 7 | syspfk=19 then goto pan003;\nPAN004:\n PANEL blue box /\n   (ctr HI 'The Computer Aided Instruction (CAI) course for')\n   (ctr HI 'the Jol Universal Command Language  -  CAIJOL.')\n   lm 8\n //('Rather than having these instructions given each time you wish')\n   ('to learn about Jol, type in the command ' hi 'CAIJOL MENU;')\n   ('which will then take you to the first menu of the course.')\n//('REMEMBER: to get out of the primary/secondary menus press PFK 3/15')\n  /('                    Press the ENTER key to continue ........')\n   ('              OR    Press PFK 3/15 to get out of the course....')\n   %helpline;\n   if syspfk=3 | syspfk=15 then exit;\n   if syspfk = 7 | syspfk=19 then goto pan004;\n   if syspfk=3 | syspfk=15\n   then do;\n             WRITE 'You are now out of the Jol course.';\n             WRITE 'thank you ';\n             write ' ';\n             EXIT;\n         WRITE 'When asked \"DO YOU WANT TO SUBMIT THE GENERATED JOB?\",';\n             WRITE 'type in NO, then press the ENTER key.';\n    end;\n end;\n MENUPAN:\n syspfk = 0;\n PANEL blue box /\n lm 8\n       ('           ***   CAIJOL  MENU, VERSION %VERSION    ***')\n      /('         Jol Introduction and Overview          ==>  1')\n       ('         Jol Language Structure                 ==>  2')\n       ('         Declaring Jobs,Programs,Data Sets      ==>  3')\n       ('         Symbolic Variables                     ==>  4')\n       ('         Disposition Processing                 ==>  5')\n       ('         IF Statement and Goto instruction      ==>  6')\n       ('         Compiling and Running Your Programs    ==>  7')\n       ('         Data Set Management Commands           ==>  8')\n       ('         Communications and Error Handling      ==>  9')\n       ('         Job Processing Facilities              ==> 10')\n       ('         Extra Commands                         ==> 11')\n       ('         Terminal Users Guide                   ==> 12')\n/*     ('         Macro Facilities        'hi' (On Disk 2)   ==> 13')\n       ('         BUILDJOB                'hi' (On Disk 2)   ==> 14')\n       ('         ALLOC, READ and WRITE   'hi' (On Disk 2)   ==> 15')\n       ('         Scheduling and Networks 'hi' (On Disk 2)   ==> 16')*/\n      /('         Please type in your selection here:',chnum,2,'%chnum')\n/*     ('    ' hi '                %ERR1') */\n  helpline ('Press PF3/15 to EXIT or select chapter above') ;\n      ERR1 = '';\n\n      if syspfk = 7 | syspfk=19 then goto pan004;\n      if syspfk \u00ac= 3 & syspfk\u00ac=15\n      then do;\n         goto dopanlx;\n         FIRSTD = substr(chnum,1,1);\n         SECONDD = substr(chnum,2,1);\n         if FIRSTD = ' ' | FIRSTD = 0 | FIRSTD = '0' then FIRSTD='';\n         if SECONDD = ' ' then SECONDD = ''; /* SET TO NULL */\n         TYPEF = TYPE(FIRSTD); TYPES = TYPE(SECONDD);\n         if (TYPEF \u00ac= 'NUM' & FIRSTD \u00ac= '') |\n            (TYPES \u00ac= 'NUM' & SECONDD \u00ac= '') then\n             chnum  = '%FIRSTD%SECONDD';\n         else chnum = %FIRSTD%SECONDD;\n         TYPEOF = TYPE(chnum);\n         if TYPEOF = 'NUM'\n         then do;\n         if chnum = '0' | chnum = 0 | chnum > MAXCHAP\n         then do;\n             ERR1 = ' CHAPTER NUMBER OUT OF RANGE, PLEASE RETYPE.';\n             Goto MENUPAN;\n         end;\n         else do; CALL = '';\ndopanlx:\n                  if chnum = 1 then CALL = 'CAIINTRO';\n                  if chnum = 2 then CALL = 'CAILANG';\n                  if chnum = 3 then CALL = 'CAIDCL';\n                  if chnum = 4 then CALL = 'CAISYMB';\n                  if chnum = 5 then CALL = 'CAIDISP';\n                  if chnum = 6 then CALL = 'CAILOGIC';\n                  if chnum = 7 then CALL = 'CAIRUN';\n                  if chnum = 8 then CALL = 'CAIDSMAN';\n                  if chnum = 9 then CALL = 'CAICOMER';\n                  if chnum = 10 then CALL = 'CAIJOBPR';\n                  if chnum = 11 then CALL = 'CAIPPDS';\n                  if chnum = 12 then CALL = 'CAITERM';\n                  if chnum>= 13 then CALL = '';\n                  printsym;\n                  if call=''\n                  then do;\n                     panel blue box /////////\n                     (flash ctr 'Second Diskette Only');\n                  end;\n                  if call\u00ac='' then %CALL;\n                  goto MENUPAN;\n              end;\n      end;\n      else do; ERR1 = ' CHAPTER NUMBER IS NOT NUMERIC, PLEASE RETYPE.';\n               Goto MENUPAN;\n           end;\n    end;  /* if syspfk \u00ac= 3 */    /* NOTE! NOTE! NOTE!            */\n                                   /* if EXIT is taken out         */\n                                   /* and you wish to use JOL      */\n                                   /* instructions use the command */\n                                   /* \"JOLOPT FLAG0;\"              */\n                                   /* to turn the error messages ON */\n  cls;\n  end;\n /*\n  exit;\n  exit;\n/ *WRITE '           END OF JOL COURSE ';\n  WRITE '  ';\n  WRITE 'You are now out of the JOL course.';\n  WRITE '  ';\n  WRITE 'When asked \"DO YOU WANT TO SUBMIT THE GENERATED JOB?\",';\n  WRITE 'type in NO, then press the ENTER key.';* /\n  EXIT;  / * TAKE THE STUDENT RIGHT OUT OF JOL * /\n end;    / *   END OF CAIJOL MACRO  */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIKEEP": {"ttr": 6148, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIKEEP : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN001;\nPANEL blue box\n/( hi ctr '----  KEEP Instruction  ----')\n/\nlm 10\n('The KEEP instruction ensures that the space allocated for a')\n('data set will not be used by another job and that the data' )\n('contained in the data set may be accessed at a later date.' )\n/\n('Format: 'hi'        / dsid \\')\n('        'hi'  KEEP {        } ON <VOL> volume <UNIT> unit;')\n('        'hi'        \\dsname/')\n/\n('Function : To alter status of data sets and to ensure that')\n('           a new data set will not be scratched.'          )\n/\n('When a new data set is created by a program that WRITEs'    )\n('a data set it is automatically deleted by the OS unless'    )\n('unless it is KEPT or CATALOGed. The CATALOG instruction'    )\n('ensures that the data set will be available for other jobs' )\n('when this job terminates, that is, it will not be scratched')\n('at job termination.')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box\n/( ctr hi'----  KEEP Instruction  ----')\n//\nlm 10\n('Data Sets that the job reads (that is OLD data sets) are'   )\n('normally kept when the job finishes.'                       )\n/\n('The KEEP instruction will ensure that the data set will'    )\n('not be deleted at the end of the job.'                      )\n/\n('Whenever a KEPT data set is subsequently used in another'   )\n('job, the volume and device type MUST be specified. If you'  )\n('wish other users or jobs to use a data set without having'  )\n('to specify its whereabouts, you should use the CATALOG'     )\n('instruction to keep AND enter the data set name and volume' )\n('into the catalog.')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL blue box\n/(ctr hi '----  KEEP Instruction  ----')\n//\nlm 10\n('Notes : 1.  All OLD data sets are automatically kept unless'   )\n('            a DELETE or SCRATCH instruction is executed but'   )\n('            all NEW data sets are scratched by the OS,'        )\n('            unless they are KEPT or CATALOGed;'                )\n/\n('        2.  KEEPING an OLD data set has no effect;'            )\n/\n('        3.  The VOLUME on which the data set resides and its'  )\n('            associated UNIT type MUST be known before the'     )\n('            KEEP instruction can be performed.'                )\n//\n('The following screen provides further details.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN021;\nPANEL blue box\n/(ctr hi '----  KEEP Instruction  ----')\n /(ctr  'The following table shows the actions taken')\n /\nlm 10\n  ('----------------------------------------------------------------')\n  ('-     VOLUME and          -       ACTION                       -')\n  ('-     UNIT INFORMATION    -                                    -')\n  ('----------------------------------------------------------------')\n  ('- Coded on DECLARE        - Kept on the specified VOLUME       -')\n  ('-                         -                                    -')\n  ('- Coded on KEEP           - Kept on the specified VOLUME       -')\n  ('-  (ON option)            -                                    -')\n  ('-                         -                                    -')\n  ('- Not coded and data set  - Kept on whatever VOLUME            -')\n  ('- created earlier in job  - and UNIT the system placed it on   -')\n  ('-                         -                                    -')\n  ('- Not coded and data set  - Keep instruction is ignored.       -')\n  ('- not created earlier in  -                                    -')\n  ('- the job (OLD data set)  -                                    -')\n  ('-                         -                                    -')\n  ('----------------------------------------------------------------')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL blue box (ctr hi 'KEEP Instruction Examples')\nlm 4\n/('1.'hi' DECLARE FIL1 DS DSNAME COPY.SYS1')\n('  'hi'                UNIT 3330')\n('  'hi'                SPACE 20,10,10 CYLS;')\n('  'hi' COPY SYS1.LINKLIB TO FIL1 PDS;')\n('  'hi' KEEP FIL1;')\n/\n('   The DECLARE FIL1 defines a data set called COPY.SYS1.'         )\n('   The COPY command copies SYS1.LINKLIB data set to the FIL1'     )\n('   definition, then the KEEP FIL1 instruction keeps the data set' )\n('   COPY.SYS1. Note that the definition of FIL1 does not specify'  )\n('   a VOLUME on to which the data set should be placed. The'       )\n('   system will allocate a volume when a COPY is performed and'    )\n('   then the KEEP instruction will find which volume the data set' )\n('   placed on, and print the volume name on system log, so that'   )\n('   whereabouts of the data setwill be known.'                     )\n/\n('2.'hi' KEEP DSID1;')\n('3.'hi' KEEP TEST.SET1 TEST.SET2 ON VOL 2314')\n('  'hi'                          UNIT 3330;')\n('4.'hi' KEEP TEST.DATA.SET1;')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN025;\n%COMNUM = %COMNUM + 1;\nIF %COMNUM > %MAXCOM THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n  %COMNUM = 1;\n  %SYSPFK = 3;\n end;\nEND; /* OF CAIKEEP MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAILANG": {"ttr": 6151, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAILANG : MACRO;\n%SYSPFK = 0;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box /\nctr hi 'The Jol Program'\n/ lm 10\n('The JOL program is made up of one or more statements')\n('or instructions. Statements may declare or define variables,')\n('data sets, programs and so on.')\n/\n('Instructions and commands usually cause some action to be')\n('taken with the items declared or defined.')\n('For exmple:')\n/(hi '       DECLARE COPY PROGRAM')\n(hi '               SYSPRINT WRITES PRINTER')\n(hi '               SYSUT1   READS  INPUT')\n(hi '               SYSUT2   WRITES OUTPUT;')\n/\n'is an example of a program declare.'\n/\n(hi '        RUN COPY ''TOTAL'';')\n/\n('is an example of an instruction.')\n        %helpline;\nLABEL PAN010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\n PANEL blue box /\n (ctr hi 'Suggested Format of a JOL program')\n  //('        1. Declare programs and data sets.')\n   /('        2. Then place the logic part later.')\n   /('           e.g. RUNS, CATALOGs, etc.')\n  //('        NOTE :   You do not have to use the declared variables.'\n    ('                 This means that you can include a member with'\n    ('                 DECLARES, and run only the programs required'\n    ('                 this run - excellent for programmer tests.')\n        %helpline;\nLABEL PAN015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\n PANEL blue box / (hi ctr 'Contents of a Jol Program')\n     //('         A typical JOL program would contain the following :'\n      /('             (a)   A job definition statement'\n       ('             (b)   Data set definition(s)'\n       ('             (c)   Program definition(s)'\n       ('             (d)   Variable definition(s)'\n       ('             (e)   Instructions, Commands'\n       ('             (f)   Macro invocations (possibly)')\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nLABEL PAN020;\n PANEL blue box /\n (ctr hi 'A Small Example of a Jol Program'\n /(' Sort card images, and if successful, catalog and print the output.'\n  /\n(hi '          DECLARE CARDS *;'\n(hi '             /* PLACE CARDS HERE  */'\n(hi '          EOF;      /* EOF; must be in cols 1-4  */'\n(hi '          DECLARE OUTPUT DATA SET'\n(hi '                  SORTED.CARDS'\n(hi '                  FB 80,800'\n(hi '                  5 TRKS'\n(hi '                  SYSDA;'\n(hi '          SORTSTEP:'\n(hi '              SORT CARDS TO OUTPUT'\n(hi '                   FIELDS = (10,10,CH,A) ;'\n(hi '              IF SORTSTEP = 0'\n(hi '              THEN DO;'\n(hi '                  CATALOG OUTPUT;'\n(hi '                  PRINT OUTPUT;'\n(hi '              END;')\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nLABEL PAN025;\n PANEL blue box / (ctr hi 'Another Example')\n//(hi '           VALID : JOB 5,1 MINS 200K'\n(hi '                   ACCT DEPARTMENT1;'\n(hi '           DCL /* same as DECLARE or DEFINE */'\n(hi '                INPUT DS DSN INPUT.DATA'\n(hi '           DCL TRANS DS OUTPUT.DATA FB 80,800 SYSDA ;'\n(hi '           DCL PRNTFILE PRINTER;'\n(hi '           DCL VALIDATE PROGRAM'\n(hi '               INPUT  READS  TRANS'\n(hi '               OUTPUT WRITES PRNTFILE;'\n(hi '           SORT INPUT TO TRANS'\n(hi '               FIELDS = (10,10,CH,A);'\n(hi '           RUN VALIDATE ''DATE = %DAY'';'\n(hi '           IF VALIDATE = 0'\n(hi '              THEN CATALOG TRANS;'\n(hi '           IF VALIDATE = 8'\n(hi '              THEN TYPE ''ERROR OCCURRED''; ')\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nLABEL PAN030;\n%n='-|2m';\n PANEL blue box / (ctr hi 'Jol Character Set'\n lm 10\n/(hi '    CHARACTER SET                             CONTENTS'\n('--------------------------------------------------------'\n('-  ALPHANUMERIC      alphabetic                 ' hi 'A to Z %n-'\n('-                    numeric                    ' hi '1 to 9 %n-'\n('-  NATIONAL          \"AT\" sign                  ' hi '@      %n-'\n('-                    dollar sign                ' hi '$      %n-'\n('-                    pound or hash              ' hi '#      %n-'\n('-  SPECIAL           comma                      ' hi ',      %n-'\n('-                    period                     ' hi '.      %n-'\n('-                    slash                      ' hi '/      %n-'\n('-                    apostrophe  (quote)        ' hi '''      %n-'\n('-                    parentheses                ' hi '( )    %n-'\n('-                    asterisk                   ' hi '*      %n-'\n('-                    period                     ' hi '.      %n-'\n('-                    ampersand and logical AND  ' hi '&      %n-'\n('-                    plus sign                  ' hi '+      %n-'\n('--------------------------------------------------------'\n)\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan025;\nLABEL PAN035;\n PANEL blue box / (ctr hi 'Jol Character Set (continued)'\n lm 10\n  /(hi\n '    CHARACTER SET                             CONTENTS'\n('---------------------------------------------------------'\n('-  SPECIAL (cont)    hyphen or minus sign       ' hi '-       %n-'\n('-                    equal sign                 ' hi '=       %n-'\n('-                    greater than               ' hi '>       %n-'\n('-                    less than                  ' hi '<       %n-'\n('-                    logical NOT                ' hi '-       %n-'\n('-                    logical OR                 ' hi '|       %n-'\n('-                    percent symbol             ' hi '%%       %n-'\n('-                    blank or space             ' hi '        %n-'\n('-                                               ' hi '        %n-'\n('-  COMPOSITE         not greater                ' hi '->      %n-'\n('-                    not less than              ' hi '\u00ac<     %n-'\n('-                    greater than or equal to   ' hi '-=      %n-'\n('-                    less than or equal to      ' hi '<=      %n-'\n('-                    start and end comments     ' hi '/*  */  %n-'\n('-                    concatenate                ' hi '||      %n-'\n('-                    not equal to               ' hi '-=      %n-'\n('---------------------------------------------------------'\n)\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan030;\nLABEL PAN040;\n PANEL blue box / (ctr hi 'Words or Tokens'\n     //('     TOKENS  :  smallest meaningful part of a JOL statement'\n      /('                *  identifiers or names'\n      /('                *  numbers'\n      /('                *  character string constants'\n      /('                *  special characters and'\n       ('                   compound special characters'\n   /(hi '     Examples:     IF A = B | (C = D)'\n   /(hi '                   IF A, B, C and D - are Identifiers'\n   /(hi '                   =, |, (,  )      - are special characters')\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan035;\nLABEL PAN045;\n PANEL blue box / (hi ctr 'Comments'\n//('    * Permitted where a blank is allowed and are treated as blanks'\n  ('      if no blanks are found.'\n /('    * Do not effect the program in any way but are used for'\n  ('      documentation purposes only.'\n /('    * Starts with the composite symbol  /*.'\n /('    * Terminates with the composite symbol  */.'\n /('    * Any characters may be coded within the comment.'\n//(hi ' Examples:'\n  (hi '          (a)  /* THIS IS A COMMENT  */'\n  (hi '          (b)  /* THIS COMMENT EXTENDS'\n  (hi '                  OVER 2 CARD IMAGES  */')\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan040;\nLABEL PAN050;\n PANEL blue box / (ctr hi 'Names and Identifiers'\n      /('     Identifiers are used to name variables, data sets'\n       ('     programs, macro commands and so forth.'\n      /('     A special type of identifier is called a'\n     hi ' SYMBOLIC VARIABLE')\n      /('     A symbolic name commences with the percent symbol (%%).'\n      /('     Qualified names are also used in JOL to name data sets.'\n       ('     Qualified names are made up of simple names connected'\n       ('     with a period.'\n      /('     Examples of identifiers are: ' hi '$COPY'\n    (hi '                                  X'\n    (hi '                                  STEP10'\n    (hi '                                  COPY'\n    (hi '                                  %%NAME')\n        %helpline;\nLABEL PAN060;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan050;\n PANEL blue box / (ctr hi 'Keywords'\n lm 10\n     //('A keyword is an identifier used in a specific context'\n       ('and may define the type of statement or various fields'\n       ('used within the statement.'\n  /    ('For example, 'hi'LIST data set  HEX | CHAR;'\n       ('specifies 3 keywords:     ' hi ' LIST'\n       ('                          ' hi ' HEX'\n       ('                          ' hi ' CHAR'\n/(hi'LIST       ==> %n is the name of the instruction or command'\n (hi'HEX | CHAR ==> %n are keywords that have special meaning'\n ('                to the LIST command')\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan055;\nLABEL PAN065;\n  PANEL blue box / (ctr hi 'Labels'\n  lm 7\n      //('       A label is an identifier which precedes a statement'\n        ('       and is separated from it by a colon. It is used to'\n        ('       refer to statements by name.'\n       /('       e.g. ' hi ' STEP1 : SORT INPUT TO OUTPUT'\n        ('       ' hi '              USING SORT.CONTROL(SORT01);'\n       /('       The STEP1 is a label on a SORT command. Because the'\n        ('       command is labelled, it may be referred to later'\n       /('       e.g. ' hi '  IF STEP1 = 0 THEN ...'\n       /('              will test the return code from the statement'\n        ('              labelled SORT')\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan060;\nLABEL PAN070;\n  PANEL blue box / (ctr hi 'Symbolic Variables'\n   //('      A specific type of identifier or data type is'\n     ('      a SYMBOLIC VARIABLE. A SYMBOLIC VARIABLE is a name which'\n     ('      commences with the percent character(%%). A SYMBOLIC'\n     ('      VARIABLE contains a character string of up to 253 chars.'\n //  ('      When a statement is found with any SYMBOLIC VARIABLE names'\n     ('      the names themselves are REPLACED by the current character'\n     ('      strings held within the symbolics. ')\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan065;\nLABEL PAN075;\n   PANEL blue box / (ctr hi 'Character String Constants'\n   lm 5\n   //('     A CHARACTER STRING is any string of characters'\n     ('     enclosed in apostrophes.'\n    /('     For Example: 'hi' ''THIS IS A SAMPLE OF CHARACTER STRING'''\n    /('         'hi'          ''SYS1.LINKLIB'''\n    /('     CHARACTER STRINGS are used most frequently in JOL'\n     ('     in combination with symbolic variables.'\n    /('     The maximum length of character string is 253 chars.'\n   //('     NOTE: to include an apostrophe in a character string'\n     ('           code two(2) apostrophes where one is required. ')\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan070;\nLABEL PAN080;\n   PANEL blue box / (hi ctr 'Numbers'\n   lm 7\n  //('      NUMBERS may be one digit numbers to a maximum of'\n    ('      thirteen(13) digits.'\n   /('      Usually, NUMBERS are used to pass information to'\n    ('      instructions such as the number of tracks to allocate'\n    ('      to a data set. In these types of cases, the limit of'\n    ('      the size of the number that may be used is that of the'\n    ('      device or the operation to be performed.'\n   /('      When testing RETURN CODES from programs, the maximum'\n    ('      number that can be used is 4095 (See more about these'\n    ('      in further chapters).'\n   /('      NOTE: all arithmetic is performed in INTEGERS'\n    ('            i.e. WHOLE NUMBERS, e.g. 5 divided by 3'\n    ('            equals 1 and NOT 1.67 => the answer is truncated.')\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan075;\nLABEL PAN085;\n   PANEL blue box / (ctr hi 'Language Rules'\n   /('         *  More than one statement may be coded on a card,'\n    ('            but in practice it is easier to correct errors'\n    ('            and modify the program if only one statement is'\n    ('            coded per card.'\n   /('         *  Statements may be continued over as many cards'\n    ('            as is necessary. Where one blank is permitted,'\n    ('            any number may be used. Comments may be used in'\n    ('            addition to, or in place of blanks, to annotate'\n    ('            the program.'\n   /('         *  In general, commas, equal signs and brackets may'\n    ('            be coded or left out according to preference.'\n    ('            Often keywords are unnecessary as the meaning may'\n    ('            be determined from the context of the word in the'\n    ('            statement. It is, however, a good programming'\n    ('            practice to code everything in full, as we are'\n    ('            going to do in this course.')\n        %helpline;\nLABEL PAN090;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan080;\n   PANEL blue box / (ctr hi 'Rules (continued)'\n  //('      *  Source Margins                          cc 1-71'\n   /('      *  End all Statements with a                  ;'\n   /('      *  Any number of blanks or continuation'\n    ('            cards are allowed'\n   /('      *  Comments start with                  \"/*\", end with \"*/\"'\n   /('      *  More than one statement per card is'\n    ('              permitted but not recommended'\n   /('      *  NAMES ===>                             maximum 8 chars'\n   /('      *  SYMBOLIC VARIABLES ===>                maximum 8 chars'\n    ('                                                    plus \"%%\"')\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan090;\nLABEL PAN100;\n   PANEL blue box / (hi ctr 'JOL Overheads'\n   lm 10\n   /('  - 200 bytes for JOL monitor during step execution'\n   /('  - 4 K between steps for the JOL initiator/'\n    ('    terminator scheduler'\n   /('  - 1 step per job to initialize JOL'\n   //\n (hi '  - DEFAULT MAXIMUMS PER JOL PROGRAM (installation dependant)'\n   /('     * program plus data set definitions              400'\n    ('     * symbolic variables declared plus'\n    ('       those within a macro at any point              500'\n    ('     * tokens per statement                           512'\n    ('     * NESTING : DO/ENDs, IFs at any point              8'\n    ('                 INCLUDEs                              10'\n    ('                 MACROs                                11'\n    ('     * statement size (in chars)                     2048')\n        %helpline;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\n         %CHNUM = %CHNUM + 1;\n         IF %CHNUM > %MAXCHAP THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n            %CHNUM = 1;\n            %SYSPFK = 3;\n         END;\n END; /* END OF MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAILCAT": {"ttr": 6404, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  CAILCAT: MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/ (ctr hi '---- The LISTCAT Command ----')\nlm 8\n  //('The LISTCAT command is used to list entries from a catalog.')\n    ('Options permit the listing of the entire catalog or a selection')\n    ('based on higher level indexes.')\n   /('Listing Catalog Entries.')\n   /('The system provides a method of easily finding the whereabouts')\n    ('of data sets - the volumes that data sets reside on are entered')\n    ('into the system catalog with the CATALOG instruction. Whenever')\n    ('a catalogued data set is used, only its name need be coded and')\n    ('its volume and unit will be found in the catalog. To find out')\n    ('the names of the data sets in the catalog, the LISTCAT command')\n    ('may be used.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/ (ctr hi '---- The LISTCAT Command (continued) ----')\nlm 8\n   /('Data set names are usually made up of a series of simple names')\n    ('eg. SALES.MASTER and SALES.TRANS.FILE are two data sets made up')\n    ('of simple names. Both data sets have SALES as their first name.')\n    ('Similarly, payroll data sets may commence with PAYROLL. To list')\n    ('all data sets commencing with specific names, the level')\n    ('parameter may be used. To list all names commencing with SALES,')\n    ('code :-')\n   /('            ' hi 'LISTCAT LEVEL SALES;')\n  //('Examples' hi ' 1. LISTCAT;')\n   /('            The ENTIRE catalog will be listed.')\n   /('        ' hi ' 2. LISTCAT LEVEL PAYROLL;')\n   /('            The PAYROLL entry names will be listed')\n    ('            from the CATALOG.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\n           %COM$NUM = %COM$NUM + 1;\n           IF %COM$NUM > %MAX$COM THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n              %COM$NUM = 1;\n              %SYSPFK = 3;\n           END;\n END; /* OF CAILCAT MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAILIST": {"ttr": 6406, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  CAILIST: MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/(ctr hi '---- The LIST Command ----')\nlm 8\n //('The LIST command will print all, or part of, a data set in')\n   ('character or hexadecimal format. Record numbers will be printed')\n   ('with each record and each set of eight (8) characters will be')\n   ('separated from the next by two (2) blanks. A part of the data set')\n   ('can be listed rather than the entire data set.')\n / ('Format')\n   ('          ' hi '/ dsid   \\')\n   ('   ' hi 'LIST  {         }   options ;')\n   ('          ' hi '\\ dsname /')\n  /('Notes')\n  /('1. Indexed Sequential data sets cannot be listed with LIST.')\n  /('2. To list members of a partitioned data set, list each member')\n   ('   individually or use the PRINTPDS command (described later).')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/(ctr hi 'Examples of the LIST Command')\nlm 10\n   /('  1. ' hi 'LIST INPUT;')\n   /('     The DSID called INPUT will be listed in its entirety')\n    ('     in character form.')\n  //('  2. ' hi 'LIST TEST DATA 99 RECORDS HEX EVERY 5;')\n   /('     The DSID TESTDATA will have every 5th record listed')\n    ('     and no more than 99 records will be listed, in')\n    ('     HEXADECIMAL format.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n           %COM$NUM = %COM$NUM + 1;\n           IF %COM$NUM > %MAX$COM THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n              %COM$NUM = 1;\n              %SYSPFK = 3;\n           END;\n END; /* OF CAILIST MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAILOADV": {"ttr": 6408, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAILOADV : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/(ctr hi'----  LOADVOL command  ----')\nlm 10\n//('LOADVOL will restore the contents of specified disk volumes')\n  ('created by the DUMPVOL command.')\n /('LOADVOL can be used in two ways:')\n /('1. To restore several disks to the same volumes from')\n  ('   which they were copied.')\n  ('2. To restore a volume to a different disk volume')\n  ('   (TO option) and optionally rename it to that of the')\n  ('   original dumped volume (COPYVOLID option).')\n /('Format:' hi '  LOADVOL volume1 <,volume2...> options;   ')\n /('options are the same as for DUMPVOL command, except BACKDSN'\n  ('default is JOL.BACKUP.OF volume(0) compared to DUMPVOL''s ')\n  ('default of JOL.BACKUP.OF volume(+1).')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/(ctr hi'---- LOADVOL options ----')\n(ctr 'There are additional options for SINGLE VOLUME RESTORES:')\nlm 8\n  /('    -------------------------------------------------------------')\n   ('    -     Option                   -       Default              -')\n   ('    -------------------------------------------------------------')\n   ('    - TO = specific volume name if - same as that of the dumped -')\n   ('    -      copying to a different  - volume                     -')\n   ('    -      volume                  -                            -')\n   ('    -                              -                            -')\n   ('    - GEN = generation number of   -  (0)                       -')\n   ('    -       tape to be restored    -                            -')\n   ('    -                              -                            -')\n   ('    - PURGE                        -   NOPURGE                  -')\n   ('    -                              -                            -')\n   ('    - COPYVOLID                    -   ---                      -')\n   ('    -------------------------------------------------------------')\n  /(' So, if you wish to reload a volume to a different volume than ')\n   (' that from which it was originally copied you may use the options')\n   (' specified above to select specific backup and output volumes')\n        %helpline;\n   ;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/(ctr hi'---- LOADVOL examples ----')\nlm 10\n/\n('Examples:')\n/\n('    1. ' hi 'LOADVOL DASD01; ')\n/\n('       This will load the disk volume DASD01 from TAPE,')\n('       the tape data set name is JOL.BACKUP.OFDASD01(0).')\n('       Any data on DASD01 will be destroyed and replaced')\n('       by whatever data is on tape.               ')\n//\n('    2. ' hi ' LOADVOL DASD2 TO SPARE PURGE')\n('       ' hi '         COPYVOLID;')\n/('       This command will load the latest backup tape of')\n('       volume DASD02 to a disk called SPARE. Before')\n('       loading it will scratch all data sets from volume')\n('       SPARE. After the reload has taken place the volume')\n('       will be renamed DASD02 because COPYVOLID option')\n('       was specified. (COPYVOLID - COPY VOLume ID) ')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n%COM$NUM = %COM$NUM + 1;\nIF %COM$NUM > %MAX$COM THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n%COM$NUM = 1;\n%SYSPFK = 3;\nEND;\nEND; /* OF CAILOADV MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAILOGIC": {"ttr": 6411, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAILOGIC: MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL  blue box\n  //////// (ctr 'Would you like to take a revision test')\n     (ctr 'of this chapter ? yes/no ',#1,3,'NO');\n    IF %#1 = 'YES' | %#1 = 'Y'\n    |  %#1 = 'yes' | %#1 = 'y' THEN DO; CAALOGIC; %SYSPFK = 0; END;\nPANEL  blue box / (ctr hi 'Logic Instructions')\nlm 8\n//(hi 'The IF instruction.')\n /(hi' The IF statement may be used to:')\n   /('    *  compare the values of return codes from executed programs')\n    ('       with either constants or other program return codes ')\n   /('    *  compare the current value of symbolic variables with')\n    ('       constants or other symbolic variables ')\n   /('    *  test if a program has executed or if a symbolic variable')\n    ('       is declared ')\n   /('    *  test if an ERROR has occured ')\n   /('    *  test the LAST and/or MAXIMUM completion code (CC) ')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\n  PANEL blue box /\n  lm 8\n    ('The IF statement provides conditional execution of statements.')\n    ('It takes the form:')\n   /(hi '           IF expression THEN statement-1;')\n    (hi '           | ELSE statement-2; ?')\n   /('The word THEN and the statement following it are called')\n    ('\"THEN part\" while the ELSE and the statement following it are')\n    ('the optional \"ELSE part\".')\n   /('If more than one (1) statement is to be placed in \"THEN part\" or')\n    ('\"ELSE part\" then use DO; END; blocks so the IF statement format')\n    ('becomes:-')\n    (hi'            IF expression THEN DO;')\n    (hi'                statement-1')\n    (hi'                statement-2')\n    (hi'            END;')\n    (hi'            | ELSE DO;')\n    (hi'                statement-3')\n    (hi'                statement-4')\n    (hi'              END;  ?')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\n%n='-|2m';\nPANEL  blue box / (ctr hi 'If Operators')\nlm 8\n /('The comparison operators used in the IF statements may be')\n    ('one of the following:')\nlm 12\n/(hi'         OPERATOR      -     MEANING')\n (hi'-------------------------------------------------------')\n (hi'-            =         -     equal to                 -')\n (hi'-           -=         -     not equal to             -')\n (hi'-            <         -     less than                -')\n (hi'-           <=         -     less than or equal to    -')\n (hi'-           -<         -     not less than            -')\n (hi'-            >         -     greater than             -')\n (hi'-           >=         -     greater than or equal to -')\n (hi'-           ->         -     not greater than         -')\n (hi'-------------------------------------------------------')\n (hi'-            &         -     AND \\                    -')\n (hi'-                      -          - logical           -')\n (hi'-            -         -     OR  /                    -')\n (hi'-------------------------------------------------------')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\n  PANEL blue box/ (ctr hi 'An Example of the IF Statement')\n  lm 10\n   /(hi'IF %%RUNTYPE = ''PRODUCTION'' | %%RUNTYPE = ''PROD'' ')\n    (hi'| %%RUNTYPE = ''TEST'' ')\n    (hi'THEN %%RUNTYPE = SUBSTR(RUNTYPE,1,1);')\n    (hi'ELSE STOP ''RUNTYPE INVALID - %%RUNTYPE'' ;')\n   /('The symbolic variable %%RUNTYPE is checked to see if it contains')\n    ('the characters PRODUCTION, PROD or TEST. If it does then \"THEN')\n    ('part\" is executed, that is the symbolic variable %%RUNTYPE will')\n    ('be assigned the first character of the string via the SUBSTR')\n    ('function, thus %%RUNTYPE will have a \"P\" or a \"T\" as its value.')\n   /('Note that the \"ELSE part\" of the instruction is optional. If is')\n    ('not present, the next instruction following the IF statement is')\n    ('executed. The power of the IF statement is enhanced by using DO;')\n    ('END; blocks in the \"THEN part\" as well as in the \"ELSE part\".')\n   /('Blocks are allowed wherever a simple statement is allowed, each')\n    ('of the statements in an IF statement may be a DO; END; block.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN025;\n  PANEL blue box/ (ctr hi 'Another Example of the IF Statement')\n  lm 10\n    ('Example 2:')\n   /(hi'     IF VALIDATE = 0')\n    (hi'     THEN DO;')\n    (hi'         RUN UPDATE;')\n    (hi'         CATALOG TRANSFIL, MASTER;')\n    (hi'     END;')\n    (hi'     ELSE DO;')\n    (hi'         TYPE ''ERROR IN VALIDATION'' ;')\n    (hi'         STOP ''CALL SUPERVISOR, CORRECT AND RERUN'' ;')\n    (hi'     END;')\n   /('IF VALIDATE program was run and returned a condition code equal')\n    ('to zero (0) then \"THEN part\" is executed, namely the first DO;')\n    ('END; block else \"ELSE part\" is executed, namely the second DO;')\n    ('END; block. Within a DO; END; pair you may have more DO; END;')\n    ('blocks, IF statements and declarations, assignmments and so on.')\n    (hi'A maximum of 8 levels of nesting is allowed.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN030;\nPANEL blue box/ (ctr hi 'Example of DO/END Pairs in the IF Statement')\n  lm 11\n/('         'hi'IF %%X = ''A''')\n ('-------- 'hi'THEN DO;')\n ('-     -- 'hi'    IF %%Y=''B''')\n ('-     -  'hi'    THEN DO;')\n ('-     -  'hi'        COPY INPUT TO TAPE; ')\n ('-     -  'hi'        RUN UPDATE;')\n ('-     -- 'hi'    END;')\n ('-     -- 'hi'    ELSE DO;')\n ('-     -  'hi'        WRITE ''ERROR: %%X or %%Y INVALID:'';')\n ('-     -  'hi'        STOP  ''PLEASE CHECK AND RERUN'';')\n ('-     -  'hi'        %%Z = %%Z + 1;')\n ('-     -- 'hi'    END;')\n ('-------- 'hi'END;')\n ('-------- 'hi'ELSE DO;')\n ('-        'hi'    SET W = 15;')\n ('-        'hi'    RUN MYPROG;')\n ('-------- 'hi'END;')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan025;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN035;\n  PANEL blue box /\n  lm 8\n('Note: Be cautious with IF statements nested within IF statements;')\n('eg- ' hi 'IF condition-1 THEN')\n('    ' hi 'IF condition-2 THEN statement-1;')\n('    ' hi 'ELSE statement-2;')\n('is ambiguous in Jol, that is Jol can not determine to which IF')\n('statement the ELSE belongs to.')\n/\n('There is a restriction with the IF: when an IF statement is nested')\n('in an outer IF statement, the outer IF statement may not have an')\n('\"ELSE part\". Therefore, it is strongly suggested that you use')\n('a DO; END; blocks for example:-')\n('    ' hi 'IF condition-1 THEN')\n('    ' hi '   DO;')\n('    ' hi '      IF condition-2 THEN statement-1;')\n('    ' hi '   END;')\n('    ' hi 'ELSE statement-2;')\n('is much more readable and not ambiguous.')\n/('NOTE: DO; END; blocks may have any number of statements in it.')\n ('That is 1,2,3 etc. in the above case DO; END; block has only 1')\n ('statement in it (see IF statements in the REFERENCE MANUAL).')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan030;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN040;\n  PANEL blue box / (hi ctr 'Use of Parenthesis')\n  lm 8\n// ('PARENTHESIS may be used to order the evaluation of tests.')\n   ('Where parenthesis are used, the conditions are evaluated from')\n   ('the innermost set of parentheses outward, in the case of nested')\n   ('conditions, and from left to right in non-nested conditions.')\n   ('For example:')/\n  (hi 'IF (%%VAR1 = ''RUNNO'' & (%%VAR2 = ''RERUN | %%VAR2=''''))'\n  (hi '& STEP3 = 0 THEN RUN STEP4;')\n   /('This example says - if and only if, the symbolic variable %%VAR2')\n    ('has either a ''NULL'' value or the value ''RERUN'' then, at')\n    ('execution time, test the return code issued by STEP3 and if it is'\n    ('a zero (0) then - RUN STEP4.')\n   /('If the Value of %%VAR1 was say, DATE, then the ANDed test would')\n    ('have failed and RUN STEP4 command would not be executed.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan035;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN045;\n  PANEL blue box / (hi ctr 'Further Examples of the IF')\n  lm 8\n   /('1. 'hi'IF %%RESTART THEN ....')\n   /('   Tests if the symbolic variable %%RESTART has been declared.')\n   /('2. 'hi'RUN VALIDATE;')\n    ('   'hi'IF VALIDATE = 0   /* VALIDATE RUN OK ? */')\n    ('   'hi'   THEN RUN UPDATE;')\n    ('   'hi'ELSE STOP ''UPDATE NOT RUN''; ')\n   /('Every program that executes as part of a Jol procedure returns')\n    ('a value to the operating system or it abends (ERROR). If the')\n    ('program ends normally, it returns a number between zero (0) and')\n    ('4095. The test above stops the job if VALIDATE does not return')\n    ('zero.')\n        %helpline;\n\n  PANEL blue box / (hi ctr 'Further Examples of the IF')\n  lm 8\n  //('3. 'hi'IF VALIDATE THEN ....')\n   /('   Means that if program VALIDATE ran THEN execute instructions.')\n  //('4. 'hi'IF PROGA > PROGB THEN ....')\n   /('   Means that if program A (PROGA) and program B (PROGB) ran')\n    ('   and program  A\"s return code was greater than program B.')\n  //('For more advanced treatment of the IF statement see the Jol')\n    ('Reference Manuals.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan040;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN050;\nPANEL blue box /(hi ctr 'Use of the REDO instruction in IF statements')\nlm 8\n  //('The REDO instruction allows you to loop or re-execute commands.')\n    ('The format is:')\n   /('          ' hi 'LABEL label;')\n    ('          ' hi '      Jol Code e.g. statement-1;')\n    ('          ' hi '                    statement-2;')\n    ('          ' hi 'REDO label |FOREVER?;')\n   /('Where ''label'' is a 1 to 7 character label name.')\n   /('The keyword LABEL must appear in the Jol code to identify that')\n    ('the user may wish to REDO that section of code.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan045;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN055;\n  PANEL blue box\n  // lm 8\n    ('You may REDO from any nested level of a DO; group to a lower')\n    ('level. eg.')\n    (hi'        LABEL HERE;')\n    (hi'        IF statement THEN DO; /* 1st level nesting */')\n    (hi'           Jol statements  ')\n    (hi'           ..... ;')\n    (hi'           IF statement THEN DO;')\n    (hi'              Jol statements')\n    (hi'              ..... ;')\n    (hi'              IF statement THEN DO;')\n    (hi'                 Jol statements')\n    (hi'                 ... ; /* 3rd level nesting */')\n    (hi'                 REDO HERE;')\n    (hi'              END;')\n    (hi'           END;')\n    (hi'        END;')\n    ('With this example the REDO instruction is coded at the third')\n    ('level and refers back to the first level Jol statement.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan050;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN060;\n  PANEL blue box  / lm 8\n('The REDO instruction is extremely useful when used with the')\n('PANEL instruction. (see Jol processing facilities) or consult')\n('the Jol Reference Manuals for further treatment (compile and')\n('execution oriented code in particular.)')\n/(hi'NOTE:')\n    ('If you use the REDO instruction in conjunction with the PANEL')\n    ('instruction be careful that the code is not submitted in the')\n    ('background, or that you cater for this in your Jol code.')\n   /('For example:- \"A case where you might be testing for a value')\n    ('               and that value is not input so you repeat the code'\n    ('               until a value has been input using the REDO')\n    ('               instruction.\"')\n   /('Note that to stop infinite loops, the REDO automatically stops')\n    ('after 50 iterations.  Code the FOREVER keyword to continue')\n    ('looping.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan055;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN065;\n PANEL blue box   //////\n(ctr 'Press F1 to learn more about COMPILE and EXECUTION ')\n(ctr 'or type MORE ',#1,4,'NO');\nIF %#1 = 'MORE' | %SYSPFK=1 THEN CAIEXPL1;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan055;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nPANEL  blue box\n  //////// (ctr 'Would you like to take a revision test')\n     (ctr 'of this chapter ? yes/no ',#1,3,'YES');\nIF %#1 = 'YES' | %#1 = 'Y'\n|  %#1 = 'yes' | %#1 = 'y'\nTHEN DO;\n   CAALOGIC;\n   %SYSPFK = 0;\nEND;\n%CHNUM = %CHNUM + 1;\nIF %CHNUM > %MAXCHAP THEN DO;\n   PANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n   %CHNUM = 1;\n   %SYSPFK = 3;\nEND;\n  END;  /* OF CAILOGIC MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIMACRO": {"ttr": 6659, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x82\\x07O\\x00\\x84\\x08/\\x13\\x19\\x02\\xc8\\x00\\xcb\\x00\\x1e\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1982-03-15T00:00:00", "modifydate": "1984-03-22T13:19:00", "lines": 712, "newlines": 203, "modlines": 30, "user": "JOL"}, "text": " CAIMACRO: MACRO;\n DECLARE %NUM INIT 1;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('         ----        MACROS        ----')\n /('In real life we often have situations where a particular section')\n  ('of code in our program turns out to be extremely useful, and in')\n  ('many different ways. For example, consider a simple case of')\n  ('renaming a data set called say, MYDATA, and we would like to')\n  ('rename it and call it say, YOURDATA. Section of code performing')\n  ('this task may be useful to us on many occassions, that is,')\n  ('we may require a data set MY.DATA to be renamed YOUR.DATA many')\n  ('times and in many different programs.')\n /('Let us look at the code designed to perform this task:-')\n /('        ',#1,55,'DECLARE MYDATA DS DSNAME MY.DATA UNIT DISK;')\n  ('        ',#2,55,'DECLARE YOURDATA DS DSNAME NEW.NAME UNIT DISK')\n  ('                         ',#3,35,'SPACE 10 TRACKS VB 130,4000;')\n /('        ',#4,35,'COPY MYDATA TO YOURDATA;')\n  ('        ',#5,25,'CATALOG YOURDATA;')\n  ('        ',#6,25,'DELETE MYDATA;') ;\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('         ----        MACROS        ----')\n /('        ',#1,55,'DECLARE MYDATA DS DSNAME MY.DATA UNIT DISK;')\n  ('        ',#2,55,'DECLARE YOURDATA DS DSNAME NEW.NAME UNIT DISK')\n  ('                         ',#3,35,'SPACE 10 TRACKS VB 130,4000;')\n /('        ',#4,35,'COPY MYDATA TO YOURDATA;')\n  ('        ',#5,25,'CATALOG YOURDATA;')\n  ('        ',#6,25,'DELETE MYDATA;')\n//(' In plain ENGLISH, the above code says:-')\n  (' to RENAME the existing data set MYDATA to YOURDATA (i.e. to have')\n  (' the same data set known under a different name) we (a) declare an')\n  (' empty data set YOURDATA by allocating some space to it,')\n  (' (b) copy our OLD data set MY.DATA to this newly allocated')\n  (' data set, (c) catalog this newly created data set and')\n  (' (d) finally get rid of the OLD data set MYDATA.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('         ----        MACROS        ----')\n  /('So, we are virtually left with the same data set under a')\n   ('different name. The job is done. If we want to use that code in')\n   ('many programs or indeed many times in the same program we would')\n   ('have to copy the code over many times which is awkward at the')\n   ('very least. A much better approach is to call the above code by')\n   ('a NAME, say RENAME, and every time we want that code to be')\n   ('executed, just code RENAME. JOL macro facility gives you that')\n   ('power. Let us look at the example again:-')\n /('     ',#A,55,'RENAME : MACRO;')\n  ('        ',#1,55,'DECLARE MYDATA DS DSNAME MY.DATA UNIT DISK;')\n  ('        ',#2,55,'DECLARE YOURDATA DS DSNAME NEW.NAME UNIT DISK')\n  ('                         ',#3,35,'SPACE 10 TRACKS VB 130,4000;')\n /('        ',#4,35,'COPY MYDATA TO YOURDATA;')\n  ('        ',#5,25,'CATALOG YOURDATA;')\n  ('        ',#6,25,'DELETE MYDATA;')\n /('     ',#B,55,'END;   /* OF MACRO RENAME */');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('         ----        MACROS        ----')\n /('This allows us to use that code repeatedly many times by just')\n  ('coding RENAME in our program or, indeed, in another MACRO and')\n  ('achieving the same result as literally copying this code over a')\n  ('multitude of times.')\n /('Consider a JOL program that may use the RENAME macro code:-')\n /(' ',#1,25,'DECLARE XYZ PROG  ')\n  ('       ',#2,25,'INFILE  READS OLD.NAME')\n  ('       ',#3,25,'OUTFILE WRITES MY.DATA;')\n  (' ',#4,25,'STEP01:  RUN XYZ; ')\n  (' ',#5,55,'IF STEP01 = 0 THEN RENAME;  /* macro call/invocation */')\n  (' ',#6,35,'ELSE STOP ''ERROR OCCURED'';')\n /('RENAME is replaced by the code it contains and this code is')\n  ('executed as normal JOL. The advantages are obvious: flexibility,')\n  ('modularity.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('         ----        MACROS        ----')\n /('Consider the situation where we had to change something in the')\n  ('RENAME code. If we did not use macros then we would have had to')\n  ('change code in every place we use it in the program. With macros')\n  ('only one change is necessary - change in the macro itself and')\n  ('every program/user using this macro automatically gets the')\n  ('updated version.')\n /('The power and flexibility of MACROS can be further enhanced')\n  ('by',#1,12,'parameters.')\n  ('For example, it would be nice if we could rename any data set by')\n  ('just specifying OLD data set name and NEW data set name i.e.')\n /('               ',#2,45,'RENAME OLDNAME=MYDATA NEWNAME=YOURDATA;')\n /('to perform the same task as the example above or:-')\n /('               ',#3,45,'RENAME OLDNAME=DATA01 NEWNAME=DATA02;')\n /('to RENAME an existing data set DAT01 to be known under the name')\n  ('DATA02.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL\n /('Our macro would have to be changed as follows : ')\n//('        ',#1,60,'RENAME : MACRO(%%OLDNAME=,%%NEWNAME=);  ')\n  ('        ',#2,60,'      DECLARE %%NEWNAME DS DSNAME NEW.SET ')\n  ('        ',#3,60,'              UNIT DISK                 ')\n  ('        ',#4,60,'              SPACE 10 TRACKS           ')\n  ('        ',#5,60,'              VB 130, 4000;             ')\n  ('        ',#6,60,'  COPY %%OLDNAME TO %%NEWNAME;          ')\n  ('        ',#7,60,'  CATALOG %%NEWNAME;                    ')\n  ('        ',#8,60,'  DELETE %%OLDNAME;                     ')\n  ('        ',#9,60,'END; /* OF RENAME MACRO */              ')\n//(' By coding  ',#10,50,'RENAME OLDNAME = FRED NEWNAME = BILL; ')\n  (' in your MAIN program, FRED will REPLACE %%OLDNAME in    ')\n  (' RENAME macro and BILL will REPLACE %%NEWNAME.           ')\n  (' This method of PARAMETER PASSING allows us to RENAME ANY')\n  (' existing data  set just by specifying those parameters. ');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL /(' Macro Facility allows, therefore, to write NEW JOL commands')\n   (' in JOL itself.                            ')\n //(' All JOL commands you probably use, such as COBOL, SORT, MERGE, ')\n   (' COMPARE, etc. are nothing more than MACROs written in JOL and ')\n   (' stored in JOL.CMDLIB Command Library. We suggest you have a look')\n   (' at it. To give you an example, we will now show you the COMPARE')\n   (' Macro :   ')\n///('             ',#3,35,'NEXT SCREEN PLEASE ');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL\n      /('    ',#1,60,' COMPARE : MACRO(%%PDS,%%PO);               ')\n       ('    ',#2,60,'           DECLARE %%X INIT ''2'';          ')\n       ('    ',#3,60,'  IF %%LIST(2) = ''TO''  | %%LIST(2) = ''WITH'' ')\n       ('    ',#4,60,'     THEN %%X = 3;                          ')\n       ('    ',#5,60,'  IF %%PO = ''PO'' | %%PDS = ''PDS'' THEN DO;')\n       ('    ',#6,60,'     DECLARE CNTL *;                        ')\n       ('    ',#7,60,'       COMPARE TYPEORG = PO                 ')\n       ('    ',#8,60,'END; /* OF CARD FILE DECLARE, COLS 1 to 4.*/')\n       ('    ',#9,60,'  END; /* OF THEN DO; */                    ')\n       ('    ',#10,60,'  ELSE DECLARE CNTL DS DUMMY NODCB;         ')\n      /('    ',#11,60,' DECLARE IEBCOMPR PROG                      ')\n       ('    ',#12,60,'         SYSPRINT WRITES PRINTER            ')\n       ('    ',#13,60,'         SYSIN READS CNTL                   ')\n       ('    ',#14,60,'         SYSUT1  READS %%LIST(1)            ')\n       ('    ',#15,60,'         SYSUT2  READS %%LIST(%%X);         ')\n       ('    ',#16,60,' DECLARE PRINTER PRINTER NODCB;             ')\n       ('    ',#17,60,' RUN IEBCOMPR; /*  IBM UTILITY PROGRAM      ')\n       ('    ',#18,60,'                 WHICH ACTUALLY PERFORMS    ')\n       ('    ',#19,60,'                 THE COMPARISON */          ')\n       ('    ',#20,60,'END; /* OF MACRO COMPARE  */          ');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL\n    ///(' At this stage it is not important to understand HOW')\n   (' this macro works - that is explained later in the chapter, ')\n   (' what IS important is to see how powerfull the MACRO facility ')\n   (' really is and what the macros look like. ',X,1);\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL\n  ('             ',#1,45,'The MACRO language - Writing NEW COMMANDs')\n /('Extentions may be made to JOL using the facilities provided by')\n  ('the MACRO language, which permits the creation of new JOL')\n  ('commands.')\n /('A MACRO is a set of instructions that creates JOL instructions')\n  ('tailored to the users specifications, and once coded is stored')\n  ('in A MACRO library. Whenever a non-standard JOL instruction is')\n  ('found, the MACRO library is searched and if the MACRO command is')\n  ('located, it is interpreted and the tailored JOL instructions')\n  ('are created. The compilation then continues, recommencing at the')\n  ('first of the created instructions.')\n /('Facilities are provided to:')\n  ('        ',#2,55,'*  execute a MACRO with different parameters')\n  ('        ',#3,55,'*  examine, verify and change the parameters')\n  ('        ',#4,55,'*  set up default parameters')\n  ('        ',#5,55,'*  generate any JOL instruction/command')\n  ('        ',#6,55,'*  execute other Macros from within a Macro.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('         ----        MACROS        ----')\n  /('Suppose you wanted to be able to delete data sets TEST.FILE1')\n   ('and TEST.FILE2 and then list the catalog with a level of TEST.')\n   ('If you wanted to be able to do this using one command called')\n   ('say, CLEANUP, you could code it this way:-')\n  /('             ',#1,35,'CLEANUP: MACRO;')\n   ('                ',#2,45,'DELETE TEST.FILE1, TEST.FILE2;')\n   ('                ',#3,35,'LISTCAT L(TEST);')\n   ('             ',#4,35,'END;')\n  /('These instructions must be placed in the JOL.CMDLIB. You can use')\n   ('any library utility to do this, such as IEBUPDTE or under TSO or')\n   ('TSS. Now whenever the CLEANUP macro is used, the above')\n   ('instructions (DELETE and LISTCAT) will be generated and')\n   ('executed.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('               ',#1,30,'INCREASING FLEXIBILITY')\n  /('Using the Macro Command facilities to generate simple')\n   ('instructions such as those on the previous screen, saves coding')\n   ('time if you have commands that always do the same work - that is,')\n   ('never change or require different data sets or programs and so')\n   ('on.')\n  /('So that Macro Commands can be used for more than one purpose,')\n   ('they must be capable of accepting different input data set names')\n   ('or parameters. A Macro Command could contain a record of the')\n   ('space requirements for all the commonly used libraries and their')\n   ('record formats. Then it would be a simple matter of coding the')\n   ('command name and telling it which data sets to reorganise and it')\n   ('would be capable of deleting and reallocating the data sets with')\n   ('the correct space and record formats. For some libraries, the')\n   ('operator should be notified when re-organisation is about to take')\n   ('place because he must stop other work running when some critical')\n  ('data sets are being worked on. For instance, if the MACRO library')\n   ('was being compressed no other job can run until the compress has')\n   ('ended.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('Some of the advantages to having a REORG or COMPRESS')\n   ('similar to the above would be:-')\n  /('  1. Any change to the reorganisation procedures (such as')\n   ('     copying libraries to tape for backup in case an error')\n   ('     occured) would require only alterations to the Macro and any')\n   ('     JOL program that reorganises libraries need not be altered')\n   ('     because it would automatically use the new command.')\n  /('  2. All space and record format information for commonly used')\n   ('     libraries would be contained in the macro for easy')\n   ('     reference. Also, one person could then be responsible for')\n   ('     updating the information and ensuring that the data sets')\n   ('     were compressed correctly.')\n  /('For example:    ',#1,40,'REORG LIB SYS2.LINKLIB ;')\n   ('                ',#2,40,'REORG LIB=JOL.MACROS ;')\n  /('The LIB is the keyword, and any reference to the symbolic')\n   ('parameter %%LIB will contain ''SYS2.LINKLIB'' or ''JOL.MACROS''.')\n   ('Notice that as with keywords used in other JOL instructions, the')\n   ('equal sign (=) is not required.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL\n   ('Depending on the method used to write a Macro, parameters may be')\n   ('keyword oriented or parameters may be positional. For example,')\n   ('the REORG macro could be written so that the user need only')\n   ('write REORG ''SYS2.LINKLIB''; and the symbolic parameter')\n   ('%%LIST(1) would contain ''SYS2.LINKLIB''.')\n  /('Another example is that of the SORT Macro. The SORT may be')\n   ('written with a number of parameters, some indicating which files')\n   ('are to be sorted and others specifing the number and size of the')\n   ('work files to be used.')\n  /('Some of the ways in which the SORT may be written are:-')\n   ('            ',#1,40,'SORT A TO B 3 TAPES FIELDS=(fields) ;')\n   ('            ',#2,50,'SORT A || B TO C USING data-set-identifier;')\n   ('            ',#3,40,'SORT A TO B 10 DISKS FIELDS (fields); ')\n  /('Determining exactly what was coded by the user is greatly')\n   ('simplified by using the parameter definitions which are part of')\n   ('the MACRO definition.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL\n   ('             ----    Preparing Macros  ----')\n   ('A macro consists of:')\n   ('                 ',#1,40,'*  a MACRO proto-type statement')\n   ('                 ',#2,40,'*  any JOL instructions, statements')\n   ('                    ',#3,40,'commands, or macro instructions')\n   ('                 ',#4,40,'*  an \"END;\" statement,')\n  /('The macro-name is the name that is used to invoke the macro.')\n   ('Before discussing the format of the parameter-list, we shall')\n   ('examine the types of parameters permitted.')\n   ('There are basically two types of parameters:')\n   ('                    ',#5,30,'keyword and positional.')\n  /('',#6,20,'KEYWORD parameters')\n   ('         May be coded anywhere in the parameter list and are')\n   ('         referenced within the Macro by specifying the keyword')\n   ('         name preceded by a percent symbol (%%).');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('               ',#1,25,'POSITIONAL parameters')\n  /('         Positional parameters are located, as the name implies,')\n   ('         by their relative position within the parameter list of')\n   ('         the user provided macro invocation. They are referenced')\n   ('         within the macro by the symolic name of %%LIST(n) where')\n   ('         n is 1 to n and represents the \"nth\" parameter in the')\n   ('         list.')\n  /('         Any parameters specified by the user that are not')\n   ('         keyword parameters become positional parameters. The')\n   ('         first non-keyword parameter located in the list assumes')\n   ('         the value %%LIST(1) and each subsequent non-keyword')\n   ('         parameter has a subscript value one greater than the')\n   ('         preceding non-keyword parameter.')\n  /('EXAMPLES  KEYWORD   ',#2,50,'- IF %%UNIT = ''TAPE'' THEN ... ')\n   ('          POSITIONAL',#3,50,'- IF %%LIST(4) = ''TAPE'' THEN ...');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('               ',#1,25,'Keyword parameters')\n  /('Keyword parameters are defined in the parameter list of the MACRO')\n   ('proto-type statement. By using keyword parameters it is possible')\n   ('to determine:')\n  /('      ',#2,55,'* if a keyword has been specified by the user')\n   ('      ',#3,55,'* the value assigned to the keyword')\n   ('      ',#4,55,'* where a keyword was coded in the users statement')\n //('There are three types of Keyword parameters, each of which')\n   ('requires a sligthly different definition.')\n //('They are  ',#5,30,'1. Substitution Keywords')\n  /('          ',#6,30,'2. Assignment Keywords')\n  /('          ',#7,30,'3. Pointer Keywords.') ;\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('               ',#1,30,'1. Substitution Keywords')\n //('In order to determine if a keyword was coded by the user, the ')\n   ('definition of the parameter is coded as',#2,10,'%%keyword.')\n   ('The value found in the symbolic variable %%keyword is either null')\n   (' (no value) if the keyword was not coded by the user, or the')\n   ('keyword name if the keyword was coded. For example',#3,6,'%%RENT')\n   ('will always contain the value',#4,30,' '''' (null) or ''RENT''.')\n   ('This type of keyword is useful where the program to be executed')\n   ('requires a parameter list of keywords to, say, determine the')\n   ('processing options such as Compiler.')\n  /('The ASMFC macro would contain code similar to the following:-')\n  /('        ',#5,45,'RUN ASMBLER ''%%RENT,%%TEST,%%LOAD,etc''; ')\n  /('where %%RENT,%%TEST,%%LOAD would either contain nulls and or')\n   ('the values of RENT, TEST and LOAD if they were specified in the')\n   ('macro invocation.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n %#Z='PROD ASSUMED';\n PANEL ('EXAMPLE')\n  /('',#1,55,'ANYMAC: MACRO(%%TEST,%%PROD); /* PROTOTYPE STATEMENT */')\n   ('   ',#2,55,'IF %%TEST \u00ac= '''' & %%PROD \u00ac= '''' THEN')\n   ('   ',#3,3,'DO;')\n   ('       ',#4,60,'SIGNAL ERROR 3,''TEST AND PROD SPECIFIED-%#Z''; ')\n   ('       ',#5,55,'%%TEST=''''; /* CANCEL TEST OPTION  */ ')\n   ('   ',#6,4,'END;')\n   ('   ',#7,55,'DCL X PROG LIB PROGRAM.LIBRARY')\n   ('   ',#8,35,'SYSIN READS FILE1; ')\n   ('   ',#9,35,'RUN X ''%%TEST%%PROD'';')\n   ('',#A,4,'END;')\n  /('To invoke the above Macro the programmer would code :-')\n  /('',#B,55,'ANYMAC PROD;    /*  MACRO INVOCATION */ ')\n  /('In the example above, assume that the macro ANYMAC is to create')\n   ('a program definition and a RUN statement containing a parameter')\n   ('list indicating whether the program is to run in TEST or')\n   ('PRODuction mode.') ;\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('The IF statement:-')\n   ('   ',#1,55,'IF %%TEST \u00ac= '''' & %%PROD \u00ac= '''' THEN DO;')\n   ('tests if both TEST and PROD have been coded by the user, and if')\n   ('so cancels the TEST option with the -',#1,15,'%%TEST=''''; ')\n   ('instruction and also by using the SIGNAL ERROR 3 instruction-')\n   ('',#4,66,'SIGNAL ERROR 3,''TEST AND PROD SPECIFIED-%#Z''; ')\n   ('places the job on the HOLD queue to be released by you (if you')\n   ('are using the JOL Command Processor), or the operator. If you')\n   ('have specified LET/Submit option to the Command Processor then ')\n   ('JOL will seek your advice on submitting the Job.')\n   ('You may be asked a question of the type \"DO YOU WANT TO SUBMIT')\n   ('THE GENERATED JOB?\" in which case if you answer YES, then the')\n   ('Job is submitted with the PROD option.')\n  /('The RUN statement ',#5,35,'RUN X ''%%TEST%%PROD'';')\n   ('has a parameter field referring to both %%TEST and %%PROD.')\n   ('However, when only one parameter is coded by the user the')\n   ('other parameter must be null and thus there is effectively')\n   ('only one parameter in the RUN statement.')\n  /('After the invocation of the Macro, the resulting RUN statement,')\n   ('in the previous example, appears as ',#6,30,'RUN X ''PROD'';');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n %#Z=' PROTOTYPE STATEMENT ';\n PANEL ('               ',#1,30,'2. Assignment Keywords')\n   ('To determine the value assigned to a keyword parameter, the ')\n   ('definition of the parameter is coded as')\n   ('   ',#2,55,'%%keyword={''default''} ')\n   ('The value found in the %%keyword symbolic variable will be :-')\n  /('      ',#3,55,'* null if no default was specified and the user')\n   ('        ',#4,55,'did not code the keyword')\n  /('      ',#5,55,'* the default value if a default was specified in')\n   ('        ',#6,55,'the proto-type but the user did not code the')\n   ('        ',#7,55,'keyword     ')\n  /('      ',#8,55,'* the value the user assigned to the keyword when')\n   ('        ',#9,55,'he or she used it.')\n  /('Example:-')\n   ('      ',#A,65,'ANYMAC: MACRO(%%TYPE=,''TEST''); /*%#Z*/')\n   ('              ',#B,55,'DCL X PROG LIB PROGRAM.LIBRARY')\n   ('              ',#C,35,'SYSIN READS FILE1; ')\n   ('              ',#D,35,'RUN X ''%%TYPE'';')\n   ('       ',#E,4,'END;');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL\n  /('To invoke the previous Macro the programmer would code :-')\n //('          ',#1,25,'ANYMAC TYPE=PROD ; ')\n  /('This example of ANYMAC achieves the same result as the first')\n   ('form of the ANYMAC macro described in the previous form of the')\n   ('keyword parameter. The difference is that the user can assign any')\n   ('value (PROD in the example) to the keyword or may use the default')\n   ('of ''TEST'' by omitting the TYPE keyword in his or her Macro')\n   ('invocation.')\n  /('Note: If a parenthesised list is assigned to a keyword parameter')\n   ('      then the %%keyword would have the list, including the')\n ('      parenthesis, as its value. For example,',#2,20,'TYPE=(1,2,3) ')\n   ('      will result in %%TYPE symbolic parameter containing the')\n   ('      value (1,2,3).');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('               ',#1,30,'3. Pointer Keywords')\n  /('To determine where the keyword was coded in a macro invocation,')\n   ('the definition is coded as')\n  /('          ',#2,10,'keyword')\n  /('Note that there are no percent (%%) or equal (=) symbols in the')\n   ('definition. However, the percent symbol is still necessary when')\n   ('referencing the keyword in the body of the macro.')\n  /('The value associated with this type of keyword is either zero (0)')\n   ('if the keyword is not coded by the user, or a number, if the')\n   ('keyword was used, which may subsequently be used as the ''n''  ')\n   ('value in a positional reference of',#3,15,'%%LIST(n).');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n %#Z='KEYWORD IN COPY MACRO';\n %#Y='GET POSITION OF';\n %#X='VB 7294,7000 TAPE';\n PANEL ('Example of a pointer keyword in a Macro:-')\n  /('    ',#1,55,'COPY: MACRO(TO) ; /* PROTOTYPE STATEMENT */')\n   ('           ',#2,35,'DCL X PROG LIB PROGRAM.LIBRARY')\n   ('           ',#3,25,'A  READS FILE1')\n   ('           ',#4,25,'B  WRITES FILE2;')\n   ('      ',#5,60,'IF %%TO = 0 THEN STOP ''NO \"TO\" %#Z '';')\n   ('      ',#6,10,'ELSE DO;')\n   ('          ',#7,60,'%%SYSPARM1=%%TO-1;    /* %#Y FROM DATA SET */')\n   ('          ',#8,60,'%%SYSPARM2=%%TO+1;    /* %#Y TO DATA SET */')\n   ('          ',#9,45,'DCL FILE1 DS DSN=''%%LIST(%%SYSPARM1)''; ')\n   ('          ',#A,60,'DCL FILE2 DS DSN=''%%LIST(%%SYSPARM2)'' %#X; ')\n   ('          ',#B,10,'RUN X;')\n   ('      ',#C,10,'END;')\n   ('    ',#D,10,'END;')\n  /('To invoke the above Macro the programmer would code :-')\n  /('',#E,35,'COPY DATA.SET1 TO DATA.SET2;');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL\n   ('That was a very simple case, but it serves to illustrate the use')\n   ('of the keyword. It permits creation of macros that are usually')\n   ('more useful such as the SORT macro in which the user may code:-')\n  /('              ',#1,50,'SORT A TO B 5 CYLS FIELDS=(fields);')\n   ('         OR')\n   ('              ',#2,50,'SORT A || B TO C 3 TAPES FIELDS=(fields);')\n   ('              ',#3,4,'etc.')\n  /('In the previous COPY example, the macro will simply expect a')\n   ('cataloged data set as input and creates a variable blocked tape')\n   ('file as output using a program called X to copy the data set.')\n   ('In a more realistic case this macro would allow the user to')\n   ('specify input and output volumes, units and record formats.')\n  /('NOTE: when invoking a Macro all equal signs and commas, with the')\n   ('      exception of those in parentheses or quotes, are optional,')\n   ('      and, if present, are ignored. Thus, the keyword assignment')\n   ('      KEYWORD=VALUE and KEYWORD VALUE are identical.') ;\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('               ',#1,25,'Positional parameters.')\n   ('Although keyword parameters may be written by the user in any')\n   ('desired sequence, macros written using positional parameters')\n   ('are often easier to remember and to use than macros using')\n   ('keyword parameters exclusively.')\n  /('For example, it is easier to remember and write',#2,10,'LIST A;')\n   ('than',#3,20,'LIST DATASET=A;')\n  /('%%LIST(1) to %%LIST(n) contain all parameters specified by the')\n   ('user in a macro call that do not have the corresponding keyword')\n   ('parameters in the macro definition.')\n   ('Consider the following proto-type statement:-')\n  /('          ',#4,30,'MACNAME: MACRO(%%keyword=);')\n  /('if a user codes   ',#5,30,'MACNAME KEYWORD=10 NAMEX;')\n   ('or                ',#7,30,'MACNAME NAMEX KEYWORD=10;')\n  /('then %%KEYWORD would contain 10 and %%LIST(1) would contain')\n   ('NAMEX.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('          ',#1,45,'Format of the PROTO-TYPE Parameters List.')\n  /('As mentioned previously, all keywords must be specified in the')\n   ('macro-prototype parameter list. It is this specification that')\n   ('indicates to the compiler that a particular name is a keyword')\n   ('parameter. This list may contain all forms of the keyword')\n   ('parameter in any sequence separated by a comma.')\n  /('                ',#2,45,'Names declared in Macros.')\n  /('A MACRO may be considered to be part of the original JOL program,')\n   ('and as such may refer to and alter any variable that has been')\n   ('previously declared or defined, either in the main JOL program,')\n   ('or, if this macro is called by another macro, in the OUTER macro.')\n   ('However, any declaration of variables made in the INNER macro are')\n   ('not available to an OUTER macro or the MAIN-LINE program unless')\n   ('defined with the EXTERNAL attribute.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL ('It is therefore possible to declare and use variables in a')\n   ('macro without the names becoming confused with names which may')\n   ('have already been used elsewhere because the macro language')\n   ('distinguishes between identical names in successive macro calls.')\n  /('Consider following examples:-')\n  /('          ',#1,20,'SORT A TO B etc;')\n   ('          ',#2,30,'SORT C TO D parameters')\n  /('The SORT macro may have the following statements:-')\n  /('          ',#3,20,'SORT: RUN SORT;')\n   ('          ',#4,40,'IF SORT = 20 THEN STOP ''SORT FAILED'';')\n  /('If the SORT macro is called more than once, the IF statement')\n   ('refers to the correct SORT label each time, because the SORT')\n   ('label is an implicit definition of a variable in the MACRO.')\n  /('See the example on the next screen.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL\n   ('EXAMPLE:  ',#1,30,'DCL %%X INIT ''MESSAGE'';')\n   ('          ',#2,10,'MACRO1;')\n   ('          ',#3,10,'MACRO2;')\n  /('if MACRO1 was:-')\n   ('          ',#4,20,'MACRO1: MACRO;')\n   ('             ',#5,30,'%%X=''MESSAGE REPLACEMENT'';')\n   ('          ',#6,30,'END; /* END OF MACRO */ ')\n  /('Then after MACRO1 was interpreted, %%X would contain')\n   ('          ',#7,30,' ''MESSAGE REPLACEMENT'' ')\n  /('if MACRO2 was:-')\n   ('          ',#8,20,'MACRO2: MACRO;')\n   ('             ',#9,20,'DCL %%X INIT 0; ')\n   ('             ',#A,25,'%%X=''MESSAGE 100'';')\n   ('          ',#B,10,'END;')\n  /('Then, after MACRO1 was interpreted, the %%X declared in the main')\n   ('program would still contain ''MESSAGE REPLACEMENT'' because any')\n   ('reference to %%X in MACRO2 refers to a different variable.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n IF %SYSPFK \u00ac= 3 & %SYSPFK\u00ac=15 THEN DO;\nLABEL PAN%NUM;\n PANEL\n //('NOTE.   When using symbolic variables within a macro they should')\n   ('        be explicitly declared to ensure that the macro will')\n   ('        never erroneously reference a user symbolic variable')\n   ('        of the same name.')\n //('In the previous example:-')\n   ('     where %%X in MACRO2 was explicitly declared by the code')\n  /('             ',#1,20,'DCL %%X INIT 0; ')\n  /('     will mean that it will never be erroneously referenced buy')\n   ('     the calling program or other macros.');\n       IF (%SYSPFK = 7 | %SYSPFK=19) & %NUM > 1 THEN DO;\n          %NUM = %NUM -1;\n          REDO PAN%NUM;\n       END;\n       ELSE %NUM = %NUM + 1;\n END;\n        %CHNUM = %CHNUM + 1;\n        IF %CHNUM > %MAXCHAP THEN DO;\n           PANEL ////('  This was the LAST chapter of this course')\n            /('  Press ENTER to get back to main index/menu.',X,1);\n           %CHNUM = 1;\n           %SYSPFK = 3;\n        END;\nEND; /* OF CAIMACRO MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIMERGE": {"ttr": 6918, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  CAIMERGE: MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box /\n  (ctr hi '---- The MERGE Command ----')\n  lm 8\n //('The MERGE command allows up to 5 data sets to be MERGEd into')\n   ('another data set using parameters either described in the FIELDS')\n   ('parameter or the parameters described in the data set referenced')\n   ('by the USING parameter.')\n  /('Format')\n   ('       'hi'/ dsid   \\       /  dsid   \\      /  dsid  \\ ')\n   (''hi'MERGE {          }  &  {           } TO {          }')\n   ('       'hi'\\ dsname /       \\  dsname /      \\ dsname /')\n  /('                   'hi'/                              \\')\n   ('                 'hi'/  FIELDS =   merge parameters     \\')\n   ('                'hi'|              /  dsid  \\            |')\n   ('                'hi'|   USING     {          }           |')\n   ('                 'hi'\\             \\ dsname /           /  ;')\n   ('                   'hi'\\                              /')\n  /('For a full explanation of the fields see the SORT command')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\n  PANEL  blue box /(ctr hi'Merging data:')\n  lm 8\n   /('Sequentially organised data sets are usually in a set sequence')\n    ('and it is often desired to merge out like data into one sequenced'\n    ('data set. The MERGE command will merge sequential data sets and')\n    ('check the sequence while so doing. The output data set will')\n    ('contain all the records from the input data sets in the sequence')\n    ('specified by the FORMAT or USING statements.')\n   /('Examples:')\n   /('1. 'hi'MERGE DATA1 & DATA2,')\n    ('        'hi'TO DATA3')\n    ('        'hi'USING MERGPARM;')\n   /('   The data referred to by DATA1 and DATA2 DSIDs is to be')\n    ('   MERGEd and placed in the data set referred to by DATA3')\n    ('   The parameters for the MERGE will be found in the data')\n    ('   set referred to as DSID MERGPARM.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\n  PANEL  blue box /(ctr hi'Further Examples.')\n  lm 8\n   /('  2. 'hi'MERGE SORTED.ONE & SORTED.TWO TO OUTPUT')\n    ('           'hi'USING MERGE.CONTROL(MERG001) ;')\n   /('     The data sets SORTED.ONE and SORTED.TWO are to be')\n    ('     MERGEd and placed in the dsid called OUTPUT. The')\n    ('     parameters for the MERGE will be taken from the member')\n    ('     MERG001 of the MERGE.CONTROL data set.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n           %COM$NUM = %COM$NUM + 1;\n           IF %COM$NUM > %MAX$COM THEN DO;\nPANEL box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n              %COM$NUM = 1;\n              %SYSPFK = 3;\n           END;\n END; /* OF CAIMERGE MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIPANL": {"ttr": 6920, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIPANL : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL box / (ctr hi 'The PANEL Instruction')\nlm 9\n //('The PANEL instruction allows you to implement full screen')\n   ('panels in the JOL language. When the PANEL instruction is')\n   ('executed, the screen is cleared and information specified is')\n   ('DISPLAYED on the screen.')\n  /('The PANEL instruction provides extremely powerfull and simple')\n   ('method to input data to JOL.')\n  /('Facilities are provided to display text, allow replies to be')\n   ('entered and to display text with default replies.')\n   ('Up to 22 lines of text and replies may be displayed with one')\n   ('PANEL instruction.')\n  /('The Format of the PANEL instruction is shown on the next screen.'\n    )\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL box / (ctr hi 'The PANEL Instruction')\nlm 8\n/('Format of the PANEL Instruction:')\n/(hi '    PANEL (list of sub-parameters) ;')\n/(   'where sub-parameters may be:')\n/('1. 'hi'(''text'')')\n/('   The text is displayed on the screen.  Replies may NOT be entered')\n ('   with this type of specification.')\n/('2. 'hi'(''text'',symbolic-name,maximum-reply-length)')\n/('   The text is displayed on the screen.  Replies may be entered')\n ('   on this line, and are stored in the symbolic varable named.')\n ('   Note that you specify the maximum length of the field.')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL box / (ctr hi 'The PANEL Instruction Formats (continued)')\nlm 8\n/('3. 'hi'(''text'',symbolic-name,maximum-reply-length,')\n ('   'hi'|,''optional-default''? )')\n/('   The text is displayed on the screen.  Replies may be entered')\n ('   on this line, and are stored in the symbolic variable named.')\n ('   Note that you must specify the maximum length of the field.')\n ('   If the optional default is coded, it will be displayed, and may')\n ('   altered before pressing the ENTER or Function keys.')\n/('4. 'hi'(''text'',symbolic-name,maximum-reply-length,')\n ('   'hi'|,''optional-default''?')\n ('   'hi'|,message row,message column,reply row,reply column?)')\n/('   The text is displayed on the screen as format 3 above.')\n/('   This format is identical to format 3, except that you may')\n ('   indicate the positions of the text and replies on the screen.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN012;\nPANEL box / (ctr hi 'Extra Personal Computer Panel Facilities')\nlm 8\n/('The Personal Computer Version (this version) also allows')\n ('you to specify colors, centering and boxes.')\n/('For example, the following statements will be shown on the next')\n ('screen.')\n/(hi'     PANEL bright red box ///')\n/(hi'     (blue ''This is Blue Text'' red ''followed by Red'')')\n/(hi'     (reverse ''This is Reversed'' flash''followed by Flashing'')')\n/('Press Enter to see the result.  Naturally, on a monochrome')\n ('Terminal, you will not see the colors.')\n        %helpline;\n    PANEL bright red box ///\n          (blue 'This is Blue Text' red 'followed by Red')\n          (reverse 'This is Reversed' flash 'followed by Flashing');\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL box / (ctr hi 'The PANEL Instruction')\nlm 8\n/(' Notes:  1. Any replies are highlighted on the screen.')\n ('            On colour screen the replies will be different')\n ('            colour to your prompt messages.')\n/('         2. To force the display to skip a line, code a')\n ('            slash (/) between the parameters (see examples).')\n/('         3. If a PFK key (Program Function Key) is pressed')\n ('            rather than ENTER or RETURN key, the %SYSPFK')\n ('            symbolic variable is set to the number of the key')\n ('            pressed')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN025;\nPANEL box / (ctr hi 'Examples of the PANEL Instruction')\nlm 8\n  /('The next example shows how to set up a simple input screen')\n   ('using the PANEL instruction.  The result is shown on the')\n   ('following screen.')\n//\n(hi'PANEL ////     /* The //// move down 4 lines */')\n(hi'PANEL (''      Data Base Backup Menu '')')\n(hi'    //(''      ENTER THE NAME OF THE DATA BASE '',DATA,30)')\n(hi'     /(''      ENTER VOLUME NUMBER OF TAPE '',TAPE,7,''SCRATCH'')')\n(hi'      (''      FAST OR SLOW BACKUP ?       '',BACKUP,4,''FAST'');')\n/('On the terminal you will see the following:')\n//('Press ENTER when ready-')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN030;\n   PANEL ////('      Data Base Backup Menu ')\n  //('      ENTER THE NAME OF THE DATA BASE ',X,30)\n   /('      ENTER VOLUME NUMBER OF TAPE ',#1,7,'SCRATCH')\n    ('      FAST OR SLOW BACKUP ?       ',#2,4,'FAST')\n  //('     The cursor is positioned at the first reply position and')\n    ('     the details can be entered (TRY it!). The TAB key skips')\n    ('     the cursor to the NEXT receiving location.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan025;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN035;\nPANEL box / (ctr hi 'USE of REDO in PANEL instruction.')\nlm 8\n   //(' Suppose, for example, you wanted to check and see whether')\n     (' valid input had been received via the  PANEL instruction,')\n     (' and for some reason there was an incorrect value keyed in,')\n     (' then you may elect to REDO that PANEL to allow or force the')\n     (' the user to input correct information.')\n    /(' Consider an example :')\n   //('   'hi' LABEL SCREEN1;')\n     ('   'hi'  PANEL ('' ENTER TAPE NUMBER '',A1,2,''10'');')\n     ('   'hi'  %%TYPEA1 = TYPE(A1);')\n     ('   'hi'  IF %%TYPEA1 -= ''NUM'' THEN DO;')\n     ('   'hi'     WRITE '' TAPE NUMBERS MUST BE NUMERIC ''; ')\n     ('   'hi'     REDO SCREEN1; /* GO BACK TO LABEL SCREEN1 */ ')\n     ('   'hi'  END;')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan030;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n           %COM@NUM = %COM@NUM + 1;\n           IF %COM@NUM > %MAX@COM THEN DO;\nPANEL box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n              %COM@NUM = 1;\n              %SYSPFK = 3;\n           END;\n END; /* OF CAIINCL MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIPPDS": {"ttr": 7169, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  CAIPPDS: MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/ (ctr hi '---- The SAVESYMS Command ----')\nlm 8\n   /('The SAVESYMS command allows you to save symbolic')\n    ('variable values into a member of your Jol dataset.')\n   /('This member may later be INCLUDED into the Jol procedure')\n    ('thus restoring the previously supplied values.')\n   /('Format:  'hi'    SAVESYMS a,b,c in dsname/dsid ;')\n   /('where a,b and c represent symbolic variables and')\n    ('dsname/dsid represents the dsname or dsid of the dataset')\n    ('you wish to save the symbolic values into. For example:')\n   /(hi'    dcl %%DAY  init ''MONDAY'';')\n    (hi'    dcl %%WEEK init ''2'';  ')\n    (hi'    SAVESYMS DAY WEEK in ''%SYSUID.JOL(MEMB1)'');')\n   /('Symbolics %%DAY and %%WEEK will be saved in member MEMB1')\n    ('and may be retrieved by saying - INCLUDE MEMB1; next time.')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/ (ctr hi '---- The FS Command ----')\nlm 8\n  //('The FS (full screen) command allows the Jol programmer to')\n    ('stop or start the writing of text to the terminal when')\n    ('using Jol interactively.')\n   /('The format is :-')\n    (hi'                           / ON  \\')\n    (hi'                      FS  |  or   |   ;')\n    (hi'                           \\ OFF /')\n   /('Notes: If you have used the REDO command to check that data')\n    ('       has been correctly input, make sure that the PANELs,')\n    ('       READs, WRITEs and so on, ARE turned ON.')\n    ('       Otherwise a loop may result.')\n   /('       The default is 'hi'FS ON;'\n   /('       You might find that the \"FS ON|OFF;\" command is useful')\n    ('       to turn off code that you have already tested.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL blue box/ (ctr hi '---- The EXIT Command ----')\nlm 8\n   /('The EXIT command allows the user to abnormally EXIT from')\n    ('Jol, or a Jol program.')\n    ('If the \"EXIT;\" command has been issued then NO JCL is produced')\n    ('for that Jol program and no further processing takes place.')\n   /('Format   'hi'EXIT ;')\n   /('An example:  'hi'IF %%INDAY \u00ac= %DAY THEN EXIT;')\n    ('       If the symbolic variable %%INDAY does not equal %DAY')\n    ('       then the EXIT command would be executed.')\n    ('       That is, Jol will not produce any JCL statements, or')\n    ('       evaluate any more of the Jol code.')\n   /('Another example : 'hi'IF %%SYSUID \u00ac= ''MYLOGON'' THEN EXIT;')\n   /('       If you had some code that only you wanted to execute')\n    ('       YOURSELF, then the above example would not allow anyone')\n    ('       else to use that code unless the %%SYSUID was set to ')\n    ('       ''MYLOGON''.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL blue box/ (ctr hi '---- The VALIDATE Command ----')\nlm 8\n   /('The validate command allows the user to validate the value')\n    ('supplied for a symbolic variable.')\n    ('the format of this command is')\n   /('    'hi'   VALIDATE symbolic  test1 test2 |options?;')\n   /('where symbolic represents the symbolic variable you wish')\n    ('to test, test1 is the value you want the symbolic to be')\n    ('and test2 the end of a range which starts with the value')\n    ('of test1. test1 and test2 may be appended with a /')\n    ('to denote that the symbolic being tested should start')\n    ('with that value. For example:')\n   /('   VALIDATE DAY 12  ;       tests that %%DAY was equal to 12')\n    ('   VALIDATE NAME d/ ;       tests that %%NAME began with a D')\n    ('   VALIDATE COUNT 10  100 ; tests that %%COUNT was a')\n    ('                            number in the range of 10-100')\n    ('   VALIDATE LIST 2/ 3/;     tests that %%LIST began with 1 or 2')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN025;\nPANEL blue box/ (ctr hi '---- The PRINDPDS Command ----')\nlm 8\n  /('The PRINPDS command is an unusual command in that it is a USER')\n   ('WRITTEN MACRO. That is, it is given to Jol students to write as')\n   ('their first MACRO. However, there is a PRINTPDS in the Jol Command'\n   ('Library. The format of the PRINTPDS command is as follows:-')\n  /(hi'                 / dsid   \\')\n   (hi'       PRINTPDS {          }  options  ;')\n   (hi'                 \\ dsname /')\n  /('Where the options are:-')\n   (hi'       TITLE  YES|NO   COL=cols CLASS=class LINES=lines')\n   (hi'       OUTLIM=outlim')\n  /('The PRINTPDS command will print an entire partitioned data set.')\n  /('Example'hi' PRINTPDS %%SYSUID.JOL TITLE=YES ;')\n  /('The above example will print the %SYSUID.JOL partitioned library')\n   ('with a title \"LISTING OF DATA SET %SYSUID.JOL\" on each page.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n  cls;\nLABEL PAN030;\n  caaqus 'Please enter the instructions to print an entire'\n         'Partitioned Data Set call SYS2.SCHEDULE, to CLASS T.'\n         ucans='PRINTPDS SYS2.SCHEDULE CLASS T;'\n         remark 'Excellent !';\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan025;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN035;\n  caaqus 'What instruction can you use to exit from Jol'\n          'without generating any JCL?'\n         ucans='EXIT'\n         remark 'Good Work';\n\n         %CHNUM = %CHNUM + 1;\n         IF %CHNUM > %MAXCHAP THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n            %CHNUM = 1;\n            %SYSPFK = 3;\n         END;\n END; /* OF CAIPPDS MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIPRINT": {"ttr": 7172, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIPRINT : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/(ctr hi '----  PRINT command  ----')\nlm 8\n/('PRINT copies the data specified to a printer. Options are')\n ('provided so that the data may be printed as special forms')\n ('or at special destinations.')\n/('        'hi'          / dsid \\ ')\n ('Format: 'hi'  PRINT  {        }  options ;')\n ('        'hi'          \\dsname/ ')\n/('At this point it may be a good idea to refresh your memory')\n ('on PRINTER DEFINITION (in DECLARATION STATEMENTS chapter).')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/(ctr hi '----  PRINT command  ----')\nlm 8\n/(hi'Printing Data:')\n/('To print a data set you must allocate the data to be')\n ('printed and allocate a printer. A program is then used to ')\n ('transfer the data from the data set to the printer. The ')\n ('PRINT command does this and the result is that the data you')\n ('specify is printed.')\n/('The data is printed exactly as it appears in the data set.')\n ('If a line is less than the width of the printer, blanks   ')\n ('will appear on the R.H.S of the page. Long records are ')\n ('truncated (\"chopped off\") to the actual width of the page,')\n ('truncated data is lost.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL blue box/(ctr hi '----  PRINT command  ----')\nlm 8\n/('Some data sets contain a special print control character in')\n ('in each data record. If this character is present it will')\n ('be used to eject pages and/or to skip to certain print channels,')\n ('if it is not present a new page will be commenced when the')\n ('page is full. The  presence or absence of this character is')\n ('known by the record format, e.g. VB means Variable Blocked data')\n ('set and VBM is the same but in addition M signifies that a')\n ('machine control character precedes the data in the record,')\n ('in VBA A stands for ANSI print control characters preceding the')\n ('data.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL blue box/(ctr hi '----  Examples of the PRINT command  ----')\nlm 8\n//('1. 'hi'PRINT REPORT; ')\n /('   The PRINT command will allocate a  spooled')\n  ('   printer and the data  referred to by DSID REPORT'\n  ('   will be transferred to the printer.The data will')\n  ('   actually be printed at a later time due to spooling.')\n//('2. 'hi'PRINT JOL.INCLUDE(SALES) COPIES=3; ')\n /('   The contents of member SALES in the JOL.INCLUDE')\n  ('   library will be printed. COPIES=3 was specified ')\n  ('   and so (3) copies of the data will be printed.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN025;\nPANEL blue box/(ctr hi '----  Examples of the PRINT command  ----')\nlm 8\n//('3. 'hi'PRINT PAY.PRINT(0) FORM=CHECK ')\n  ('   'hi'      HOLD;')\n /('   The contents of the latest version of the')\n  ('   PAY.PRINT generation data set are to be printed')\n  ('   on a special form called CHECK. In addition the')\n  ('   HOLD option specifies that printing is NOT to')\n  ('   commence until the operator starts it. (Possibly'\n  ('   to give the operator the time to feed these')\n  ('   special CHECK forms into the printer).')\n /('   If it was required to commence printing while')\n  ('   your job is still running, the FREE option must be')\n  ('   used instead of HOLD option (code FREE instead')\n  ('   of HOLD).')\n /('Consult the Jol Reference Manuals for further details.')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN030;\n           %COM$NUM = %COM$NUM + 1;\n           IF %COM$NUM > %MAX$COM THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n              %COM$NUM = 1;\n              %SYSPFK = 3;\n           END;\n END; /* OF CAIPRINT MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIPRNT": {"ttr": 7175, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIPRNT : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/(ctr hi 'The PRINTER DEFINITION')\nlm 8\n /('The PRINTER definition is needed to define a spooled printer.')\n  ('When data is written, moved or copied to a printer definition')\n  ('it results in the data being PRINTED. ')\n /('Format:')\n /(hi'         / DECLARE \\        / PRINTER \\ ')\n  (hi'     or {  DEFINE   } name {           }  class option  options;')\n  (hi'     or  \\  DCL    /        \\ SYSOUT  /  ')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/(ctr hi 'The PRINTER DEFINITION (continued)')\nlm 11\n//('Examples:')\n /('1. 'hi'DECLARE TWOPART PRINTER 2 PART;  ')\n /('   'hi'COPY SYS1.MACLIB(CALL) TO TWOPART; ')\n /('   When data is written to TWOPART with the COPY')\n  ('   command,the records in member CALL of the SYS1.MACLIB')\n  ('   partitioned data set will be printed on two part ')\n  ('   stationery (2 PART option). ')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL blue box/(ctr hi 'The PRINTER DEFINITION (continued)')\nlm 11\n//('Examples:')\n /('2. 'hi'DECLARE MVTPRNT PRINTER CLASS Z ')\n  ('   'hi'        1 K - 20 K RECORDS OF 120;')\n /('   The MVTPRNT printer definition specifies that class')\n  ('   is Z, where Z may mean in your installation that,')\n  ('   say, a maximum of 100 pages is to be printed.')\n /('   Sufficient space is to be allocated for 1000 to')\n  ('   20,000 records of 120 characters each.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n           %COM#NUM = %COM#NUM + 1;\n           IF %COM#NUM > %MAX#COM THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n              %COM#NUM = 1;\n              %SYSPFK = 3;\n           END;\n  END;  /* OF CAIPRNT MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAIPROG": {"ttr": 7177, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  CAIPROG : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/ (ctr hi 'The PROGRAM Definition')\n////////\n('       The program definition is used to tell JOL details about')\n('       a particular load module or program.');\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/ (ctr hi 'Running Programs')\nlm 8\n/ ('Before executing a program, you must tell the system what inputs')\n  ('and outputs it uses, how much storage it needs, the expected')\n  ('execution time, which library contains the program and so on.')\n//('The specified program must be a member of a temporary library,')\n  ('the system library or a private library.')\n//('The program declaration allows you to specify these details')\n  ('and when you use the RUN instruction later, the program is')\n  ('loaded and all the options specified will be activated,')\n  ('and any specified data sets will be made available to the')\n  ('program.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL blue box/ (ctr hi 'Format of the PROGRAM DEFINITION')\nlm 8\n////\n    ('| label: ?')\n    (hi'           --          --')\n    (hi'           -   DECLARE  -')\n    (hi'           -            -')\n    (hi'      or  {    DEFINE    }  program name PROG options ; ')\n    (hi'           -            -')\n    (hi'      or   -    DCL     -')\n    (hi'           --           -')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL blue box/\n(ctr hi 'Specifing Filenames and their uses for a program.')\nlm 8\n////('Format:')\n//\n(hi'               --            --')\n(hi'               -              -      --                      --')\n(hi' -         -   -   READS      -      -         --         --  -')\n(hi' - filename-   -   WRITES     -      - dsid    - member    -  -')\n(hi'{    or     } {    UPDATES     }     { dsname  - generation-   }')\n(hi' -  ddname -   - MODS|EXTENDS -      -         --         --  -')\n(hi' -         -   - USES|REWIRTES-      --                      --')\n(hi'               -              -')\n(hi'               --            --           --           --')\n(hi'                                          -  ||other... -')\n(hi'                                          --           --')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN025;\nPANEL blue box/ (ctr hi 'Reading and Writing Data Sets')\nlm 8\n/('Under OS, you READ or WRITE to filenames or DDNAMES in your')\n ('program. These DDNAMES are then connected or bound to data sets,')\n ('printers, card readers and so forth at the job control')\n ('or command (JOL or TSO) level.')\n/('This allows for a great amount of flexibility because your program')\n ('can read or write a disk, tape or card data set with no changes.')\n ('Thus if your program has a file name of INPUT, you may code:-')\n/(hi '       INPUT READS dsid')\n/('Suppose your program needs to read a data set called MASTER.FILE')\n ('then you could code:-')\n/(hi '       DCL MASTER DS DSNAME MASTER.FILE; /* Declare Data Set */')\n (hi '       DCL UPDATE PROG                   /* Declare Program  */')\n (hi '                  INFILE READS MASTER ; ')\n (hi '       RUN UPDATE;')\n ('The explanation is on the NEXT screen... ')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN030;\nPANEL blue box/ (ctr hi 'Explanation of the Example')\nlm 8\n//('You specified that filename or ddname INFILE was to be read as')\n  ('the DSID called MASTER. MASTER is defined as a data set called')\n  ('MASTER.FILE, and so when you run your UPDATE program, JOL will')\n  ('insure that your file INFILE will be connected with the')\n  ('MASTER.FILE data set.')\n//('If your program creates a data set, you tell JOL that it WRITES.')\n /('The data set will be created and your program can then WRITE')\n  ('information into it.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan025;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN035;\nPANEL blue box/ (ctr hi 'Example')\nlm 8\n /(  'The following shows both INPUT and OUTPUT:-')\n /(hi'        DCL INMAST  DS DSNAME OLD.MASTER ;')\n  (hi'        DCL NEWMAST DS DSNAME NEW.MASTER  /* Dsn NEW.MASTER */')\n  (hi'                    UNIT DISK             /* Unit is a DISK */')\n  (hi'                    VB 100,2500           /* Variable Blocked */')\n  (hi'                    1000-2000 RECORDS ;   /* Space for data */')\n/ (hi'        DCL UPDATE  PROG                  /* Define Program */')\n  (hi'            INPUT   READS INMAST')\n  (hi'            OUTPUT  WRITES NEWMAST ;')\n/ (hi'        RUN UPDATE;')\n  //('When the program UPDATE is executed, filename or ddname INPUT')\n    ('will read the data set described by DSID INMAST.')\n    ('INMAST describes a data set called OLD.MASTER.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan030;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN040;\nPANEL blue box/ (ctr hi 'Example')\nlm 8\n//('The filename OUTPUT shows that it is an output file because of')\n  ('WRITES keyword. Filename OUTPUT will write information into the')\n  ('data area described by the DSID NEWMAST. NEWMAST shows a data')\n  ('set of the name NEW.MASTER. If the DSID is written to then ')\n  ('NEW.MASTER will be placed on a DISK device, and space will be')\n  ('allocated that is large enough to contain 1000-2000 variable')\n  ('blocked records of up to 100 bytes each in blocks of 2500 bytes.')\n//('If NEWMAST had been read instead of written, the data set')\n  ('NEW.MASTER is expected to already exist, and the System Catalog')\n  ('would have been searched to find the location of the data set.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan030;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN042;\nPANEL blue box/ (ctr hi 'Running Programs')\nlm 8\n /('The RUN instruction LOADs and RUNs the program described in the')\n  ('program declaration statement. All the data sets required by the')\n  ('program are made available before the program is executed.')\n//('RUN loads and executes a program from a load module library.')\n  ('Any program that is a user written program or a system program')\n  ('such as a compiler or sort, may be executed.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan040;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN045;\nPANEL blue box/ (ctr hi 'Return Codes')\nlm 8\n /('When a program has finished executing, it returns a value. This')\n  ('\"RETURN CODE\" may be tested with an IF statement, and subject to')\n  ('the result of the \"IF\" other programs may or may not be run.')\n//('For full details, see the Logic Instructions Chapter in this')\n  ('course.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan040;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN050;\nPANEL blue box/ (ctr hi 'Examples of Program Definitions')\nlm 8\n//(' 1. 'hi'DECLARE MYPROG PROG SIZE 8 K; ')\n /('    The program MYPROG is declared. Only one option is')\n  ('    specified - it is to have a maximum storage of 8000 bytes.')\n//(' Note: many of the optional parameters of Program Declaration')\n  ('       are NOT UNLIKE the parameters on JOB DECLARATION.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan045;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN055;\nPANEL blue box/ (ctr hi 'Examples of Program Definitions')\nlm 8\n/('  2. 'hi'DECLARE VALIDATE PROG LIB SALES.LIB')\n ('     'hi'                 SIZE 250 K   TIME 10,6 MINS')\n ('     'hi'        TRANSIN READS CARDS')\n ('     'hi'        TRANSOUT WRITES EDITEDT')\n ('     'hi'        LIST WRITES PRINTER;')\n ('     'hi'        ... other instructions')\n ('     'hi'        RUN VALIDATE;')\n/('  *  The LIB parameter specifies where the program is to be found')\n ('     - in above example it is in SALES.LIB library.')\n ('  *  SIZE parameter indicates that a maximum of 250K are to be used.')\n ('  *  The TIME parameter says that the elapsed time is 10 minutes')\n ('     with CPU time of 6 minutes')\n ('  *  File TRANSIN will be bound to DSID CARDS, that is whenever')\n ('     the program reads TRANSIN it in fact reads CARDS.')\n ('     Similarly, TRANSOUT and LIST are bound to EDITEDT and PRINTER.')\n ('  *  The RUN VALIDATE instruction will cause the program to start')\n ('     executing. At this time all the required data sets will be')\n ('     allocated to it.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan050;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN060;\nPANEL blue box/ (ctr hi 'Examples of Program Definitions')\nlm 8\n//(' 3. 'hi'DECLARE LIB DS DSNAME SYS1.MACLIB;')\n  ('    'hi'DECLARE PRINT PROG')\n  ('    'hi'        INPUT READS LIB(CALL)')\n  ('    'hi'        SYSPRINT WRITES PRINTER;')\n  ('    'hi'...  ')\n /('    'hi'RUN PRINT;')\n//('    When PRINT is RUN, the INPUT file will be bound to the LIB')\n  ('    DSID; this specifies that member CALL of the')\n  ('    partitioned data set SYS1.MACLIB is to be read.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan055;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN065;\nPANEL blue box/ (ctr hi 'Examples of Program Definitions')\nlm 8\n /(' 4. 'hi'DECLARE GENER DS DSNAME SALES.MASTER; ')\n  ('    'hi'DECLARE UPDATE PROG ')\n  ('    'hi'        INPUT READS GENER(0) /* LATEST GENERATION */')\n  ('    'hi'        OUTPUT WRITES GENER(+1); ')\n  ('    'hi'RUN UPDATE; ')\n /('    When UPDATE is run, file INPUT will be bound to (0) generation')\n  ('    of SALES.MASTER DATA SET, and OUTPUT will be bound to (+1)')\n  ('    generation of same data set (i.e. NEXT generation).')\n /('    If the declare of GENER had been:')\n /('    'hi'DECLARE GENER DS DSNAME SALES.MASTER(5);')\n  ('    'hi'          /* ABSOLUTE 5TH GENERATION OF DATA SET */')\n /('    then INPUT would have used absolute generation (5), and OUTPUT')\n  ('    would have created NEXT generation (+1), that is absolute')\n  ('    generation (6). This facility is extremely useful for RESTART')\n  ('    situations.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan060;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n      cls;\nLABEL PAN070;\n  caaqus   'Declare a program called PROGONE which only'\n           'needs 10 K Bytes to run. '\n           ucans='DECLARE PROGONE PROG SIZE 10 K;'\n           remark='Excellent !';\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan065;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN075;\n  caaqus   'Declare a program called PROG02 that Reads'\n           'DSID INFILE with internal file INFIL and Writes'\n           'DSID OUTFILE with internal filename OUTFIL'\n           ucans='DECLARE PROG02 PROG'\n           ans2='                     INFIL READS INFILE'\n           ans3='                     OUTFIL WRITES OUTFILE;'\n           remark='Excellent!';\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan070;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN080;\n  caaqus  'Now, show how to RUN that program.'\n          ucans='RUN PROG02;'\n          remark 'Good Work';\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan075;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n\n           %COM#NUM = %COM#NUM + 1;\n           IF %COM#NUM > %MAX#COM THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n              %COM#NUM = 1;\n              %SYSPFK = 3;\n           END;\n  END; /* OF CAIPROG MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIRESET": {"ttr": 7427, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x82\\x06\\x9f\\x00\\x82\\x08?\\x15\\x16\\x00\\x0e\\x00\\x05\\x00\\t\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1982-03-10T00:00:00", "modifydate": "1982-03-24T15:16:00", "lines": 14, "newlines": 5, "modlines": 9, "user": "JOL"}, "text": "CAIRESET: MACRO;\nEND; /* END OF MACRO: TREAT THIS MACRO AS AN INCLUDE */\nIF %SYSPFK = 7 THEN CAICLEAR;\n         IF %#1 = ' ANSWER HERE ' THEN %#1 = '';\n         IF %#2 = ' ANSWER HERE ' THEN %#2 = '';\n         IF %#3 = ' ANSWER HERE ' THEN %#3 = '';\n         IF %#4 = ' ANSWER HERE ' THEN %#4 = '';\n         IF %#5 = ' ANSWER HERE ' THEN %#5 = '';\n         IF %#6 = ' ANSWER HERE ' THEN %#6 = '';\n         IF %#7 = ' ANSWER HERE ' THEN %#7 = '';\n         IF %#8 = ' ANSWER HERE ' THEN %#8 = '';\n         IF %#9 = ' ANSWER HERE ' THEN %#9 = '';\n         IF %#10= ' ANSWER HERE ' THEN %#10= '';\n         %REMARK = '     IS THE CORRECT ANSWER; COMPARE IT. ';\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CAIRUN": {"ttr": 7429, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIRUN : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/\n  //////// (ctr 'Would you like to take a revision test')\n     (ctr 'of this chapter ? yes/no ',#1,3,'NO');\n    IF %#1 = 'YES' | %#1 = 'Y'\n    |  %#1 = 'yes' | %#1 = 'y'\n    THEN DO;\n        CAARUN;\n        %SYSPFK = 0;\n     END;\nPANEL blue box/\n  (ctr hi 'Compiling, Linking and Running Your Programs')\n  lm 10\n /(' NOTE: at this stage it may be advisable to review the')\n /('      'hi' DECLARE PROG Instruction.')\n /(' With JOL there are at least two (2) ways the')\n  (' programs may be compiled, linked and run. Other methods')\n  (' MAY be implemented by your installation. In this chapter we')\n  (' will concentrate on one of these methods.')\n /(' N.B. Either method will achieve the correct result.')\n /(' Our method will involve the use of ASM(ASSEMBLER),')\n  (' COBOL, FORT(FORTRAN), PLI, LINK, RUN and LOADGO commands.')\n  (' The compilers and linkage editors are invoked by using')\n  (' ASM, COBOL, PLI or FORT commands to COMPILE a data set.')\n  (' Then, the LINK command may be used to link edit the program')\n  (' into a LOAD MODULE LIBRARY, and the RUN instruction may be')\n  (' used to execute the LINKed program (or load module).')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/\n  (ctr hi 'Compiling, Linking and Running Your Programs (continued)')\n  lm 10\n//('Instead of LINKing the program (thereby SAVING executable')\n  ('copy of this program) and then RUNning it, the LOADGO')\n  ('command may be used to execute the program WITHOUT saving')\n  ('a copy of executable code - that is a program can be')\n  ('executed from OBJECT FILE ONLY. That object file is LOST')\n  ('after the program has finished executing.')\n  ('Let us look at the DIAGRAM of the above described process:')\n//('NEXT SCREEN PLEASE ... ')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL blue box/\n  (ctr hi 'Compiling, Linking and Running Your Programs (continued)')\n  lm 8\n   /('    - SOURCE CODE  -     -                   - ')\n    ('    - e.g. COBOL   -     - COBOL COMPILER    - ')\n    ('    - program as   -  => -                   - => OBJECT CODE')\n    ('    - written by a -     - use COBOL COMMAND -         -')\n    ('    - COBOL progr. -     -                   -         -')\n    ('                                                       -')\n    ('       -------------------------<-----------------------')\n    ('       -')\n    ('       -')\n    ('  - LINKed into a load module -     - RUN this program, use  -')\n    ('  - library from which it can -  => - RUN instruction. DO NOT- ')\n    ('  - be executed time and time -     - forget to DECLARE that - ')\n    ('  - again. Use LINK COMMAND.  -     - program !              -')\n   /(' Let us now examine these commands in more detail.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL blue box/\n  (ctr hi 'The COBOL Command')\n  lm 8\n   /('NOTE: ASM, FORT, PLI commands are very similar.')\n  //('Format:')\n   /(hi'          COBOL  { dsid | data set name }  options;')\n   /('Function: The COBOL command is used to invoke the COBOL compiler'\n    ('          to convert the COBOL source code to object code ')\n    ('          (executable code). The object code may be input to the'\n    ('          LINK and LOADGO commands and then executed.')\n   /('Example of the COBOL Command')\n   /(hi'          COBOL SOURCE.FILE(UPDATE); ')\n   /('This will compile the member UPDATE of data set SOURCE.FILE.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN025;\nPANEL blue box/\n  (ctr hi 'The LINK Command')\n  lm 8\n /('LINK invokes the system Linkage Editor to convert the object')\n  ('code (object text) from COBOL, FORT, PLI or ASM commands to')\n  ('LOAD MODULE FORMAT. The load module can then be executed with')\n  ('the RUN INSTRUCTION. ')\n /('Format:')\n /(hi'          LINK  { dsid-list | data-set-name-list}  options;')\n /('where options are :  ')\n /(hi'          LOAD  { dsid | dsname }')\n /(hi'          LIB   { dsid | dsname }')\n /(hi'          PLILIB or COBLIB or FORLIB')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN030;\nPANEL blue box/\n  (ctr hi 'The LINK Command (continued)')\n  lm 8\n /('Example of the LINK Command')\n /(hi'        COBOL SOURCE.FILE(UPDATE);')\n  (hi'        LINK OBJ LOAD TEST.LOAD(UPDATE) COBLIB;')\n /('The COBOL Command compiles member UPDATE of SOURCE.FILE')\n  ('and stores object text on a DEFAULT temporary dsid caaled OBJ.')\n  ('Then the LINK command converts the object code into Load Module')\n  ('format, and places the converted Load Module into the TEST.LOAD'\n  ('data set (Load Module Library), replacing any old version of')\n  ('the UPDATE program. It can now be RUN, if we wish, using the')\n  ('following code sequence:')\n /(hi'        DECLARE UPDATE PROG')\n  (hi'                INPUT READS INFILE /* FOR EXAMPLE */')\n  (hi'                OUTPUT WRITES OUTFILE;')\n /(hi'        RUN UPDATE; /* DO NOT FORGET TO DECLARE INFILE ')\n  (hi'                       AND OUTFILE  */')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan025;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN035;\nPANEL blue box/\n  (ctr hi 'The LOADGO Command')\n  lm 8\n /('LOADGO is used if we DO NOT wish to have a PERMANENT COPY of')\n  ('executable code. The LOADGO command also RUNS the program.')\n /('Format:')\n /(hi'      LOADGO  { dsid-list | data-set-name-list}  options;')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan030;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN040;\nPANEL blue box/\n  (ctr hi 'The LOADGO Command (continued)')\n  lm 8\n /('Example:')\n /(hi'      PLI SOURCE.FILE(TEST) OBJ PLI.OBJ1;')\n  (hi'      DECLARE TEST PROG')\n  (hi'              IN  READS INFIL')\n  (hi'              OUT WRITES OUTFIL;')\n  (hi'      LOADGO PLI.OBJ1 NAME (TEST) PLILIB;')\n /('The object data set PLI.OBJ1 is read by the')\n  ('Loader and any External References are satisfied by the')\n  ('PLILIB automatic call library. Program TEST is then executed')\n  ('(NOTE: DECLARE the program BEFORE issuing LOADGO command).')\n /('N.B. The way that the PLI command above is coded, it writes')\n  ('     object text onto PLI.OBJ1 data set rather than onto')\n  ('     the default OBJ DSID - this is another way of')\n  ('     performing the same task.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan030;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nPANEL  blue box\n  //////// (ctr 'Would you like to take a revision test')\n     (ctr 'of this chapter ? yes/no ',#1,3,'YES');\nIF %#1 = 'YES' | %#1 = 'Y'\n|  %#1 = 'yes' | %#1 = 'y'\nTHEN DO;\n   CAARUN;\n   %SYSPFK = 0;\nEND;\n         %CHNUM = %CHNUM + 1;\n         IF %CHNUM > %MAXCHAP THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n            %CHNUM = 1;\n            %SYSPFK = 3;\n         END;\n END; /* OF MACRO CAIRUN */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAISCRT": {"ttr": 7433, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAISCRT : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/(ctr hi '---- SCRATCH instruction ----')\nlm 8\n /('The SCRATCH instruction scratches the space used by the data')\n  ('set, and allows the free space to be used for other data sets.')\n  ('The data contained in the data set is lost.')\n /('Format:')\n /(hi'                 / dsid \\')\n  (hi'        SCRATCH {        }    options;')\n  (hi'                 \\dsname/')\n /('where options are:')\n /(hi'        | FROM <VOL> volume <UNIT> unit ?')\n  (hi'        | ALWAYS ?')\n /('Datasets that the job reads(OLD data sets) are normally')\n  ('kept when the job finishes. To delete a data set, the DELETE'\n  ('or SCRATCH instruction is used.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/(ctr hi '---- SCRATCH instruction ----')\nlm 8\n//('Notes: 1. All OLD data sets are automatically kept unless')\n  ('          a DELETE or SCRATCH instruction is executed, but')\n  ('          all NEW data sets are scratched by the OS, unless'\n  ('          they are KEPT or CATALOGed.')\n /('       2. The VOLUME on which the data set resides and')\n  ('          its associated UNIT type MUST be known before')\n  ('          DELETE or SCRATCH instruction can be performed.')\n  ('          The system always keeps a directory for new ')\n  ('          data sets for this and other purposes.')\n /('       3. Use SCRATCH instruction instad of DELETE if you know')\n  ('          that the data set(s) is NOT CATALOGed. The SCRATCH')\n  ('          instruction will not attempt to UNCATALOG this data')\n  ('          sets(s) as would the DELETE instruction. Using the')\n  ('          DELETE instruction in this case would produce an')\n  ('          unnecessary error message.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL blue box/(ctr hi '---- SCRATCH instruction ----')\n /(ctr 'The following table shows the actions taken')\nlm 10\n /('----------------------------------------------------------------')\n  ('-     VOLUME and          -       ACTION                       -')\n  ('-     UNIT INFORMATION    -                                    -')\n  ('----------------------------------------------------------------')\n  ('- Coded on DECLARE        - Scratched from the coded VOLUME    -')\n  ('-                         -                                    -')\n  ('- Coded on SCRATCH        - Scratched from specified VOLUME    -')\n  ('-  (FROM option)          -                                    -')\n  ('-                         -                                    -')\n  ('- Not coded and data set  - Scratched from whatever VOLUME     -')\n  ('- created earlier in job  - and UNIT the system placed it on   -')\n  ('-                         -                                    -')\n  ('- Not coded and data set  - The system catalog is searched to  -')\n  ('- not created earlier in  - find the VOLUME and UNIT the       -')\n  ('- the job (OLD data set)  - data set is on. If not found, then -')\n  ('-                         - the SCRATCH is ignored             -')\n  ('----------------------------------------------------------------')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL blue box/(ctr hi 'Examples of the SCRATCH instruction')\nlm 8\n ('Examples:')\n/('   1. 'hi'DECLARE DSID1 DS DSNAME MY.SET;')\n ('      'hi'        SCRATCH DSID1;')\n/('      The system catalog will be requested to supply volume and')\n ('      device class information from the catalog and the data set')\n ('      MY.SET will be SCRATCHed from the volume.')\n/('   2. 'hi'SCRATCH TEST.DATA1 FROM VOL VOL1')\n ('      'hi'                   UNIT 2314;')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n           %COMNUM = %COMNUM + 1;\n           IF %COMNUM > %MAXCOM THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n              %COMNUM = 1;\n              %SYSPFK = 3;\n           END;\n END; /* OF CAISCRT MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAISETUP": {"ttr": 7436, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAISETUP : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/(ctr hi 'SETUP COMMAND (for HASP and JES2 only)')\nlm 8\n//('The SETUP COMMAND displays a message on the operators')\n  ('console to indicate which volumes (DISK or TAPE) are required')\n  ('by the job. ')\n /('Format:')\n /(hi'      SETUP  VOL    =   volume')\n  (hi'             VOLS       (volume list)   ;')\n /('The SETUP command may be used by your installation to provide'\n  ('an orderly progression of jobs using the same volumes. Each')\n  ('time the machine is requested to dismount a volume and load')\n  ('another, your job is delayed and often others as well. Using')\n  ('the SETUP command, the operator and scheduler have an')\n  ('opportunity to optimise the throughput of the machine.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/(ctr hi 'SETUP COMMAND (continued)')\nlm 8\n   //('Note:    JES3 and ASP do NOT REQUIRE the SETUP details of')\n     ('         jobs as they themselves determine the setup')\n     ('         requirements and schedule your job accordingly.')\n   //('Example: 'hi'SETUP (TAPE01,DISK99);')\n    /('         The operator will be informed that volumes TAPE01 and')\n     ('         DISK99 will be required by the job. The job will be')\n     ('         put on the HOLD QUEUE until it is released by the')\n     ('         Operator.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\n           %COM@NUM = %COM@NUM + 1;\n           IF %COM@NUM > %MAX@COM THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n              %COM@NUM = 1;\n              %SYSPFK = 3;\n           END;\n END; /* OF CAISETUP MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAISORT": {"ttr": 7438, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAISORT : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/   (ctr hi '---- The SORT Command ----')\nlm 8\n//////('The SORT command allows up to 5 data sets to be sorted into')\n   ('another data set using parameters either described in the FIELDS')\n    ('parameter or the parameter described in the data set referenced')\n    ('by the using parameter.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/   (ctr hi 'Format of the SORT instruction')\n /(hi'              / dsid          \\        / dsid   \\')\n  (hi'       SORT  {         || ...  }  TO  {          }')\n  (hi'              \\ dsname        /        \\ dsname /')\n  (hi'              --                                --')\n  (hi'              -  number  TAPES                   -')\n  (hi'              -  number  DISKS   | number CYLS ? -')\n  (hi'              --                                --')\n  (hi'              --                                   --')\n  (hi'              -                                     -')\n  (hi'              -      FIELDS =  sort - parameters    -')\n  (hi'              -                                     -')\n  (hi'             {  or                                   }')\n  (hi'              -                                     -')\n  (hi'              -      USING  { dsid | dsname }       -')\n  (hi'              -                                     -')\n  (hi'              --                                   --')\n/('      where fields =' hi' P1,M1,F1,S1,P2,M2,F2,S2,....,Pn,Mn,Fn,Sn')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL blue box/   (ctr hi 'Sorting Data')\nlm 8\n /('Sequentially organised data sets are usually in set sequence. If')\n  ('data set contains data that is not in a set sequence, the SORT')\n  ('command can be used to order the data into sequence. The output')\n  ('data set will contain all the records from the input data sets in')\n  ('the sequence specified by the FORMAT or USING statements.')\n//('Notes:')\n /('  1. Up to (5) five data sets may be sorted with the SORT')\n  ('     command. All the input data sets must be on like devices,')\n  ('     that is one data set may not be on tape and another on disk.')\n /('  2. The USING parameter specifies that the data set referred to')\n  ('     contains the SORT parameters. The data set may have been')\n  ('     created in the current job or it may have been an OLD data')\n  ('     set.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL blue box/   (ctr hi 'Sorting Data (Notes Continued)')\nlm 8\n//('  3. The FIELDS parameter specifies the FIELDS to be used for')\n  ('     collating the input data set(s).')\n  ('     The format fields = P1,M1,F1,S1,P2,M2,F2,S2,...,Pn,Mn,Fn,Sn '\n  ('     where:-')\n  ('           P specifies the position within the record')\n  ('           M specifies the length of the field')\n  ('           F specifies the format of the field and may be:-')\n  ('              CH | ZD | ID | FI | BI | FL | AL and more')\n  ('                                 (see the JOL reference manual) ')\n  ('           S specifies the desired sequencing A D E.')\n /('  4. If no TAPES, DISK, or CYLS are specified, the standard JOL')\n  ('     default is 3 DISKS 5 CYLS. The defaults are, however,')\n  ('     installation dependant, and vary.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN025;\nPANEL blue box/   (ctr hi 'Sorting Data (Notes Continued)')\nlm 8\n//('  5. If the SORT is not successful, a non-zero return code will')\n  ('     be issued and may be checked using an IF statement.')\n /('  Examples')\n /('  1. 'hi'SORT DSID1 TO DSID2')\n  ('     'hi'     FIELDS = (10,2,CH,A);')\n /('     The data referred to by DSID1 DSID is to be sorted and placed')\n  ('     in the data set referred to by DSID2. The parameters for the')\n  ('     SORT are specified using the fields parameter and reads that')\n  ('     sort field starts at position 10 in the record, has length')\n  ('     of 2 and is CH (character), sorting in to be sequenced A')\n  ('     (alphabetic).')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN030;\nPANEL blue box/   (ctr hi 'Sorting Data (Examples Continued)')\nlm 8\n//('  2. 'hi'SORT A TO B')\n  ('     'hi'     50 CYLS 10 DISKS')\n  ('     'hi'     USING SORT.CONTROL(S001);')\n /('     The data referred to by DSID A is to be sorted to DSID B.')\n  ('     The sequence of the data set is to be the sequence specified')\n  ('     by the member S001 in the SORT.CONTROL data set. Ten (10) ')\n  ('     DISK work areas of fifty (50) cylinders each is requested')\n  ('     for the sort.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n           %COM$NUM = %COM$NUM + 1;\n           IF %COM$NUM > %MAX$COM THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n              %COM$NUM = 1;\n              %SYSPFK = 3;\n           END;\n END; /* OF CAISORT MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAISTAT": {"ttr": 7681, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAISTAT : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/(ctr hi 'The STARTAT Instruction')\nlm 10\n /('The STARTAT instruction causes all the EXECUTABLE instructons')\n  ('to be skipped from that point until an EXECUTABLE instruction')\n  ('with the named label is found.')\n//('NOTE: If you want to know more  about EXECUTABLE and COMPILE   '\n  ('      oriented statements in JOL, type ''Y'' or ''y''',a1,4,'NO');\nIF %a1 = 'Y' | %a1='y' THEN CAIEXPL1;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/(ctr hi 'The STARTAT Instruction (continued)')\nlm 10\n /('Format:'hi'   STARTAT label;')\n  ('          where label is the name of an EXECUTABLE instruction')\n  ('          where execution is to re-commence.')\n /('Skipping program steps is useful when :')\n /('       *  You are restarting the job at some point other than')\n  ('          the beginning')\n /('       *  You have a long job containing steps that are normally'\n  ('          run monthly (for example), and you do not want to run')\n  ('          all the program steps on a daily basis')\n /('       *  You may be testing an individual program in a job, and')\n  ('          STARTAT and STOPAT (see further down) instructions will')\n  ('          allow you to execute an isolated segment of your JOL')\n  ('          program')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL blue box/(ctr hi 'The STARTAT Instruction (continued)')\nlm 10\n /('Therefore, the STARTAT instruction can be used to skip over all')\n  ('all steps you do not want to execute.')\n /('The STARTAT instruction is very much like a 'hi'GOTO.')\n// (hi 'NOTE')\n /('It is important to note that the STARTAT instruction need not')\n  ('be the first instruction in a JOL program. You may,for example,'\n  ('run programs, then issue a STARTAT to skip steps and continue')\n  ('processing later.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL blue box/(ctr hi 'Examples of the STARTAT Instruction')\nlm 8\n//('  1. 'hi'STARTAT STEP9;  ')\n  ('     'hi' ... JOL instructions ... ')\n  ('     'hi'STEP9 : RUN SALES; ')\n /('     All the steps after the STARTAT instruction are skipped')\n  ('     until the labelled instruction with STEP9 as label is found.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN025;\nPANEL blue box/(ctr hi 'Examples of the STARTAT Instruction')\nlm 8\n /('  2. 'hi'IF %%RESTART = ''REPORT'' THEN DO; ')\n  ('     'hi'    DECLARE MASTER DS DSNAME SALES.MAST(0);   ')\n  ('     'hi'    STARTAT REPORT; ')\n  ('     'hi'END;  ')\n  ('     'hi'ELSE DECLARE MASTER DS DSNAME SALES.MAST(+1);  ')\n  ('     'hi'             VB 200,7294                    ')\n  ('     'hi'             UNIT 2314                      ')\n  ('     'hi'             SPACE 10 CYLS;                 ')\n  ('     'hi'  ...  other instructions ... ')\n  ('     'hi'UPDATE : RUN UPDATE; ')\n  ('     'hi'         CATALOG MASTER; ')\n  ('     'hi'REPORT : RUN REPORT;  ')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN030;\nPANEL blue box/(ctr hi 'The STOPAT Instruction')\nlm 8\n /('The STOPAT instruction causes all EXECUTABLE instructions at,')\n  ('and following, the label NOT to be executed. Execution ceases')\n  ('at that point.')\n /('Format: 'hi'   STOPAT label;')\n /('After the specified label is found, that instruction and all')\n  ('others  following, are ignored.')\n /('Examples:  1. 'hi'STOPAT COPYFIL;')\n /('              The job will terminate at the instruction labelled')\n  ('              COPYFIL.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan025;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN035;\nPANEL blue box/(ctr hi 'Examples of the STOPAT Instruction')\nlm 8\n /('           2. 'hi'IF %%RESTART = ''STEP9'' THEN DO; ')\n  ('              'hi'   STARTAT RECOVER;  ')\n  ('              'hi'   STOPAT STEP10;  ')\n  ('              'hi'END;  ')\n /('              If the symbolic variable contains the value')\n  ('              ''STEP9'' then the STARTAT and STOPAT instructions')\n  ('              will be executed.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n           %COM@NUM = %COM@NUM + 1;\n           IF %COM@NUM > %MAX@COM THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n              %COM@NUM = 1;\n              %SYSPFK = 3;\n           END;\n END; /* OF CAISTAT MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAISUBM": {"ttr": 7684, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAISUBM : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/(ctr hi 'The SUBMIT Command')\nlm 8\n//('The SUBMIT COMMAND allows the compiling of subsequent jobs')\n  ('at any point within the currently executing job. This provides')\n  ('the facility to effectively schedule dependant job streams. ')\n  ('That is, the dependant job is not compiled or placed on the ')\n  ('system job queue until a current job has reached a point where '\n  ('it is desirable or safe to run the dependant job. By using this'\n  ('technique a linkage can be created which controls the sequence')\n  ('of running a number of jobs.                                ')\n//('Format: 'hi'              / member name list \\')\n  ('        'hi'    SUBMIT   | USING   dsid       |')\n  ('        'hi'              \\        data set  /')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/(ctr hi 'The SUBMIT Command (continued)')\nlm 8\n//('Notes:')\n /('1. The USING parameter allows a DSID to be specified')\n  ('   that is required to be read as input into the JOL ')\n  ('   compiler. The data set may be created by an earlier ')\n  ('   program in the job stream  or be a card data set ')\n  ('   containing JOL statements ')\n /('2. The member-name-list must consist of one or more')\n  ('   members separated by blanks or commas. This member(s)')\n  ('   is directed to be INCLUDEd as part of the compiler ')\n  ('   input. Each member must contain its own JOB DEFINITION')\n  ('   statements.')\n//('Example:  'hi'SUBMIT JOB1,JOB2; /* PUT JOB1,JOB2 ON  ')\n  ('          'hi'                     SYSTEM QUEUE */ ')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n           %COM@NUM = %COM@NUM + 1;\n           IF %COM@NUM > %MAX@COM THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n              %COM@NUM = 1;\n              %SYSPFK = 3;\n           END;\n END; /* OF CAISUBM MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CAISYMB": {"ttr": 7686, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAISYMB : MACRO;\n  DECLARE %ANS INIT 'NO';\n  PANEL blue box ///////\n   (ctr'Would you like to take a revision test')\n   (ctr'of this chapter ? ''Y'' or ''N''',ANS,1,'N');\n   IF %ANS = 'Y' | %ANS = 'y'\n   THEN DO;\n      CAASYMB;\n      %SYSPFK=0;\n  END;\n  IF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n   LABEL PAN005;\n  PANEL blue box / (ctr'---- Symbolic Variables ----')\n  lm 4\n///('      A SYMBOLIC VARIABLE is a special variable; it is')\n   ('      recognizable by a \"%%\" in front of its name. Whenever a')\n   ('      symbolic variable name is found in instructions other than')\n   ('      SET, ASSIGN or DECLARE symbolic, the current contents of')\n   ('      the symbolic variable replaces its name. For example:')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\n  PANEL blue box / (ctr'---- Symbolic Variables ----')\n  /('      For example:')\n  /('            'hi'%%LOCATION = CHICAGO;')\n   ('            'hi'   other instructions')\n   ('            'hi'PRINT %%LOCATION.PAYROLL.FILE;')\n   ('      is equivalent to :')\n   ('            'hi'PRINT CHICAGO.PAYROLL.FILE;')\n  /('      The symbolic variable %%LOCATION is set to CHICAGO.')\n   ('      Later, the PRINT command is requested to print the data set')\n   ('      %%LOCATION.PAYROLL.FILE. Because %%LOCATION contains the')\n   ('      characters \"CHICAGO\", whenever %%LOCATION appears, it is')\n   ('      replaced by \"CHICAGO\". Thus the PRINT becomes :')\n  /('            'hi'PRINT CHICAGO.PAYROLL.FILE;')\n  /('      If %%LOCATION contained \"KANSAS\", then the data set to be')\n   ('      printed would have been KANSAS.PAYROLL.FILE.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN012;\n  PANEL blue box /  /  (ctr'---- Symbolic Variables ----')\n//('      The symbolic substitution causes the symbolic variable')\n  ('      to be replaced by real values(numeric or character data).')\n /('      Symbolic variables add flexibility to command procedures by')\n  ('      symbolizing real values; these values can change dynamically')\n  ('      during the command execution. This allows command procedures')\n  ('      using symbolic variables to execute multiple functions or')\n  ('      the same functions with different values.')\n /('      Symbolic variables may be tested with the IF instruction')\n  ('      or altered with the ASSIGN or SET instructions.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\n  PANEL blue box / (ctr'----- DECLAREing a SYMBOLIC VARIABLE ----')\n/('           The symbolic DECLARE or definition statement defines and')\n ('           initializes symbolic variables.')\n /(' Format: 'hi'     /  DCL   \\')\n  ('         'hi'    { DECLARE  } %%name1 |,%%name2 ...?')\n  ('         'hi'     \\ DEFINE /')\n  ('         'hi'                   INIT  /''character string'';  \\')\n  ('         'hi'                         \\  numeric constant;  /')\n//('           where %%name is the name of the symbolic variable')\n  ('           being declared. INIT specifies the value that is to be')\n  ('           given to this variable(s).')\n /(' Notes: 1. The names MUST be preceded by a \"%%\" symbol.'))\n  ('           They may be one to eight alphanumeric or national')\n  ('           ($,#,@) characters, e.g. %%A,%%123,%%NAME, etc.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL blue box /\n   ('        2. The following names are RESERVED and have special')\n   ('           meanings. Any attempt to DECLARE them will result')\n   ('           in an error message; use of the ASSIGN or SET')\n   ('           instruction will alter the contents of the named')\n   ('           variable to the value you specify.')\n  /('           The following are initialized by JOL before any')\n   ('           statements have been read.')\n   ('           %%SYSDATE : the current date e.g. 87205')\n   ('           %%DAY     : MONDAY, TUESDAY etc.')\n   ('           %%MONTH   : JANUARY, FEBRUARY etc.')\n   ('           %%MONTHNO : 01,02 thru 12')\n   ('           %%DAYNO   : 01-31')\n   ('           %%YEAR    : 1985,1986 etc.')\n   ('           %%HOURS   : 0-23')\n   ('           %%MINS    : 0-59')\n   ('           %%SECS    : 0-59')\n   ('           %%SYSTEM  : MFT,MVT,VS1,VS2,MVS')\n   ('           %%SPOOL   : HASP,ASP,JES1,JES2,JES3 or blank')\n   (' Note: There are other symbolic variables that are automatically')\n   ('       initialized and changed during the compile(see JOL manual).')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN025;\n  PANEL blue box /\n   ('        3. The maximum allowable length of the value specified')\n   ('           with the INIT is 253 characters.')\n  /('        4. If a variable has been previously defined by a SET')\n   ('           or ASSIGN or DECLARE and it is re-defined, the second')\n   ('           declaration is ignored.')\n  /('        Example of Declare:'hi' DECLARE %%A,%%B,%%C INIT \";')\n  /('        *  The three variables are defined and initialized to a')\n   ('           null string \".')\n  /('    NB:    If a value has been previously assigned (or SET) to a')\n   ('           symbolic variable - that assignment is an IMPLICIT')\n   ('           DECLARATION, e.g. if the very first statement in your')\n   ('           program is 'hi' %%START = ''STEP1''; 'normal'then this')\n   ('           is an implicit declaration of a symbolic variable')\n   ('           %%START. This means that symbolic variables do not have')\n   ('           to be explicitly DECLAREd in JOL program. It is a good')\n   ('           programming practice to DECLARE them though.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN030;\nPANEL blue box / (hi ctr'The ASSIGNMENT or SET instruction')\n//('        The SET or ASSIGNMENT instruction is used to change or set')\n  ('        the value of a symbolic variable.')\n//(hi'   Format:   / %%name   \\ =  / expression        \\')\n  (hi'             \\ SET name/ =  \\function-expression/')\n//('   where expression is :  'hi'     --          __              __ --')\n  (hi '       /                   \\   -  / + \\   /                  \\ -')\n  (hi '      -  symbolic variable  -  -  - - -  - symbolic variable  --')\n  (hi '      -  constant           -  -  - / -  - constant           --')\n  (hi '      -  character constant -  -  - * -  - character constant --')\n  (hi '      -                     -  -  - ||-  -                    --')\n  (hi '       \\                   /   -  \\   /   \\__              __/ -')\n  (hi '                               --                             --')\n /('   continued next screen ... ')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan025;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN035;\nPANEL blue box / (ctr 'continued from previous screen ...')\n /('       and function-expression is one of')\n /('       (a) SUBSTR (symbolic name,start position<,length>)')\n /('       (b) INDEX  (symbolic name,''search string'')')\n /('       (c) TYPE   (symbolic name) - returns LIT,CHAR or NUM')\n /('       (d) LENGTH (symbolic name)')\n /('       (d) EOF    (file-variable)')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan030;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN040;\nPANEL blue box /\nlm 7\n  ('    The symbolic variable assignment statement allows you to')\n  ('    place values(numbers or character strings) into symbolic')\n  ('    variable(s). Also, the functions allow you to store their')\n  ('    results in variables that you can use. You may assign')\n  ('    contents or other symbolic variables, for example:')\n /(''hi'       %%A = 10;           'normal'/* set A to 10 */')\n /(''hi'       %%A = ''A STRING'';   'normal'/* set A to characters */')\n /(''hi'       %%A = %%B;           'normal'/* set A to contents of B */')\n /(''hi'       %%A = ''%%B''||''%%C'';   'normal'/* set A to contents')\n  ('                             of B appended with contents of C */')\n /(''hi'       %%A = %%B + 9;       'normal'/* set A to contents of B+5*/')\n /('     In all the above cases, the symbolic variable %%A will be')\n  ('     the recipient of the values on the right hand side of the')\n  ('     equal sign \"=\".')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan035;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN045;\nPANEL blue box /  (ctr hi 'Arithmetic Functions')\n /('         You may add(+), subtract(-), multiply(*) or divide(/) a')\n  ('         symbolic variable or constant with another symbolic')\n  ('         variable or constant. The answer is then stored in the')\n  ('         variable named on the left hand side of the assignment or')\n  ('         SET instruction.')\n /('         Thus       'hi' %%A = 10 + 5;')\n  ('         results in 'hi' %%A being set to 15,')\n  ('         and        'hi' SET X = %%B - 10;')\n  ('         results in 'hi' %%X being set to the contents of %%B-10.')\n /('         NOTE: Absence of %% in SET X above, SET %%X has different')\n  ('               meaning and is explained later in this chapter.')\n /('         NOTE: Only ONE (1) operator is allowed in arithmetic')\n  ('               expressions. More complex tasks can be easily')\n  ('               performed by using mutiple assignment statements.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan040;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN050;\nPANEL blue box /  (ctr hi 'CONCATENATION')\n//('       The concatenate function (||) allows you to append one')\n  ('       string to another. If %%A had been ''ABC'' and the numerals')\n  ('       02 were to be appended to the string, you could code:')\n /('        'hi'     %%A = ''%%A''||02;')\n /('       which will result in %%A containing ''ABC02''.')\n//('       NOTE: any coded apostrophes are temporarily removed before')\n  ('       the concatenation is performed, then they are replaced')\n  ('       Even if only one operand had quotes, the result will')\n  ('       have quotes ('''').')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan045;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN055;\nPANEL blue box / (hi ctr'Use of SET Instruction.')\n /('       The SET instruction differs from the assignment statement')\n  ('       in ONLY ONE respect: you can specify the name receiving the')\n  ('       values as a symbolic variable. Suppose the %%X had a NAME')\n  ('       of a symbolic variable (say LINECNT) and 10 had to stored')\n  ('       in THAT NAME. Coding:')\n /(hi'            %%X = 10;')\n /('       WILL NOT DO IT, because this assigns 10 to %%X (which had')\n  ('       previously value ''LINECNT'') thus DESTROYING the contents')\n  ('       of %%X. In fact, the name contained in %%X (namely ')\n  ('       ''LINECNT'') must be used in the assignment statement.')\n  ('       It is done with :'hi'  SET %%X = 10;')\n /('       The %%X is replaced with its contents(i.e. ''LINECNT'') and')\n  ('       this results in 'hi' SET LINECNT = 10; 'normal'which assigns')\n  ('       the value 10 to %%LINECNT.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan050;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN060;\n  PANEL blue box / (ctr hi'Apostrophes in Assignment statements.')\n /('        Any string of characters containing blanks or special')\n  ('        characters (commas, periods and so forth) MUST be enclosed')\n  ('        in apostrophes before being assigned to the variable. This')\n  ('        also includes any symbolic variable(s) that may contain')\n  ('        strings with blanks and special characters. So, to assign')\n /('             'hi' 31 Queen St, Melbourne')\n /('        to %%X, it MUST again be enclosed in apostrophes because')\n  ('        when the %%X is replaced by its contents it will be an')\n  ('        invalid character string. Thus %%Y = %%X; would be invalid')\n  ('        but %%Y = ''%%X''; would be valid.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan055;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN062;\n  PANEL blue box / (ctr hi'Apostrophes in Assignment statements.')\n /('        If %%X contained the string ''5 + 3'' then :')\n /('              'hi' %%Y = %%X;')\n /('        will result in (after replacement)')\n /('              'hi' %%Y = 5 + 3; ')\n /('        which will assign 8 to %%Y.')\n//('        However, 'hi' %%Y = ''%%X''; ')\n /('        will result in ''5 + 3'' being assigned to %%Y because')\n  ('        the apostrophes signify that a DIRECT CHARACTER')\n  ('        ASSIGNMENT is to be performed. It is a good policy to')\n  ('        always place apostrophes around any character strings')\n  ('        when assigning them.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan055;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN065;\n  PANEL blue box/(hi ctr 'Replacement with Quoted Strings.')\n /('        Whenever a symbolic parameter name is replaced by its')\n  ('        actual contents, any quotes are removed, and any DOUBLE')\n  ('        QUOTES CONVERTED TO ONE APOSTROPHE, unless the replacement')\n  ('        is made into the quoted string. Consider:')\n /('                  'hi' %%DSN = ''JOL.INCLUDE''; ')\n  ('                  'hi'  ... ')\n  ('                  'hi' DECLARE INPUT DS DSNAME %%DSN; ')\n  ('        results in'hi' DECLARE INPUT DS DSNAME JOL.INCLUDE;')\n /('        Consider: 'hi' %%MESSAGE = ''THAT''''S IT EVERYONE''; ')\n  ('                         ...')\n  ('                  'hi' DISPLAY ''%%MESSAGE''; ')\n  ('        results in'hi' DISPLAY ''THAT''''S IT EVERYONE''; ')\n /('        NOTE: Had the DISPLAY been DISPLAY %%MESSAGE; (NO quotes)')\n  ('              then the result would have been -')\n  ('                  'hi' DISPLAY THAT''S IT EVERYONE;')\n  ('        that is, the TWO apostrophes will have been converted to ONE')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan060;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN070;\n  PANEL blue box / (ctr hi 'FUNCTIONS, function-expressions.')\n /('      There are five(5) functions : SUBSTR, INDEX, TYPE, LENGTH, EOF.')\n /(hi'      SUBSTR:')\n /('      SUBSTR may be used to extract substring from string of data.')\n  ('      The name of the symbolic variable containing the data must')\n  ('      be specified, as well as the start position within the data')\n  ('      from which the substring is to be extracted. If the length')\n  ('      is not specified, the remaining data is transferred to the')\n  ('      output symbolic variable. If the length is specified then')\n  ('      only the amount of data specified is transferred.')\n  ('      If the input string is shorter than the length specified,')\n  ('      the output string WILL NOT be padded with blanks.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan060;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN072;\n  PANEL blue box / (ctr hi 'SUBSTR Function Example.')\n /('      Examples of SUBSTR:')\n /('      Assume that     'hi' %%A = ''ABCDEFG'';')\n /('      then:           'hi' %%B = SUBSTR(A,3);')\n  ('      results in       %%B containing CDEFG')\n /('      and             'hi' %%C = SUBSTR(A,3,2);')\n  ('      results in       %%C containing CD */')\n /('      and             'hi' %%D = SUBSTR(A,15);')\n  ('      results in       %%D containing null (\") string because')\n  ('                       the input string is shorter than the start')\n  ('                       position specified.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan065;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN075;\nPANEL blue box / (hi ctr'FUNCTIONS, function-expressions (continued).')\n//('       INDEX may be used to search a string in a symbolic variable')\n  ('       for the occurrence of a character or a set of characters.')\n  ('       The result is a zero(0) if the character(s) is not in the')\n  ('       specified string, or a number which is the position in the')\n  ('       string where the first occurence of the character(s) was')\n  ('       found. This number may then be used in a SUBSTR to extract')\n  ('       the string. For example : 'hi' %%A = ''ABCDEFG'';')\n /('       'hi'%%B = INDEX(A,''F''); 'normal'/* %%B now contains 6,this')\n  ('                             being the position of')\n  ('                             character ''F'' in string */')\n /('       'hi'INDEX(A,''AB6D'');   'normal'/* %%C contains 0, because')\n  ('                             the characters ''AB6D'' ')\n  ('                             were not in the string */')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan070;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN080;\nPANEL blue box / (hi ctr 'FUNCTIONS, function-expressions (continued).')\n /('      TYPE may be used to determine the type of contents in a')\n  ('      symbolic variable. If the contents are numeric, TYPE returns')\n  ('      ''NUM'', if the contents are in quotes, TYPE returns ''LIT''')\n  ('      otherwise ''CHAR''. For example : ')\n /('            'hi' %%A = 10; ')\n  ('            'hi' %%B = TYPE(A); 'normal'/* sets %%B to ''NUM'' */')\n /('            'hi' %%A = ''FRIDAY THE 13TH '';')\n  ('            'hi' %%B = TYPE(A); 'normal'/* sets %%B to ''LIT'' */')\n /('            'hi' %%A = FRIDAY;')\n  ('            'hi' %%B = TYPE(A); 'normal'/* sets %%B to ''CHAR'' */')\n /('      NOTE: 'hi' %%A = MONDAY THE 1ST;')\n  ('             would result in an ERROR since the above')\n  ('             character string containing special characters')\n  ('             (blanks) is NOT enclosed in quotes.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan075;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN085;\nPANEL blue box / (hi ctr 'FUNCTIONS, function-expressions (continued).')\nlm 8\n/('LENGTH may be used to find out the length of the contents of')\n ('a symbolic variable, that is the number of characters')\n ('currently assigned to it. For example : ')\n/('1.  'hi' %%A = 10; ')\n/('    'hi' %%B = LENGTH(A);  'normal'    /* Set %%B to 2 because there')\n ('                             are two digits in %%A (i.e. 10) */')\n/\n/('2.  'hi' %%A = ''RON CLARKE''; 'normal'  /* Assign Character String */')\n/('    'hi' %%B = LENGTH(A);  'normal'    /* Set %%B to 10 because there')\n ('                             are ten characters in %%A')\n ('                             NOTE that the quotes are')\n ('                             NOT counted */ ')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan080;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN090;\nPANEL blue box / (hi ctr 'Further Notes.')\n lm 5\n//('   NOTE: 1. All symbolic variables are held in a character format,')\n  ('            even if they are numeric. Internal conversion takes')\n  ('            place during arithmetic operations.')\n /('         2. All arithmetic is performed in integers. Thus')\n  ('            %%A = 5/3; results in 1 being assigned to %%A.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan085;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n%SYSPFK=0;\n  PANEL blue box //////(ctr'Would you like to take a revision test ')\n   (ctr'of this chapter ? yes/no ',ANS,3,'YES');\n   IF %ANS = 'YES' | %ANS = 'Y' THEN CAASYMB;\n   IF %ANS = 'yes' | %ANS = 'y' THEN CAASYMB;\n   %CHNUM = %CHNUM + 1;\n   IF %CHNUM > %MAXCHAP THEN DO;\n PANEL box ///////(ctr ' This is the end of this section.')\n       /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n      %CHNUM = 1;\n      %SYSPFK = 3;\n   end;\n END; /* OF CAISYMB MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAITERM": {"ttr": 7940, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  CAITERM: MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/(ctr hi '---- Jol Terminal Users Guide ----')\nlm 8\n//('The Jol command is provided to simplify your use of Jol under TSO')\n  ('or TSS. It allocates the data sets required by the Jol compiler,')\n  ('analyses the options specified, and passes control to the Jol')\n  ('compiler. Upon return, depending upon options selected and upon')\n  ('the return code passed back by the Jol compiler, the generated')\n  ('jobstream may be submitted for background execution. This means')\n  ('that you, the terminal user, may go about with tasks while the')\n  ('computer processes the jobs you have submitted.')\n /('This section deals with the Jol command itself: further information'\n  ('about Jol compiler options, the purpose of various Jol data sets')\n  ('and so on, may be found in the Jol Reference Manual.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/(ctr hi '---- Jol Terminal Users Guide ----')\nlm 8\n///('NOTE: If any of the standard Jol ddnames are already allocated,')\n   ('      for example $$JMACRO is allocated to a library, the Command')\n   ('      Processor will allow that allocation to be used - that is,')\n   ('      the Command Processor will not FREE and RE-ALLOCATE the data'\n   ('      set. This allows the installation to use a CLIST to pre-')\n   ('      allocate some of the Jol libraries, and then invoke the Jol')\n   ('      Command Processor to allocate the other data sets required')\n   ('      by Jol.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/(ctr hi '---- Jol Terminal Users Guide ----')\nlm 8\n //('Syntax of the JOL Command.')\n //('        'hi'JOL  < *  |  data set name >')\n  /('             'hi'<SYMS(''symbolic-variable name-list'')>')\n   ('             'hi'<MACLIB(data set name of COMMAND data set)> '\n   ('             'hi'<INCLUDE(data set name of INCLUDE data set)>'\n   ('             'hi'<PINCLUDE>  <NPINCLUDE> ')\n   ('             'hi'<PMACRO>    <NPMACRO>  ')\n   ('             'hi'<PEXPAND>   <NPEXPAND> ')\n   ('             'hi'<LET>       <NLET> ')\n   ('             'hi'<TEST>      <NTEST>')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/(ctr hi '---- Jol Terminal Users Guide ----')\nlm 8\n  /('To use the Jol compiler, enter the command JOL. This command has')\n   ('one required parameter, the name of the input data set: that is,')\n   ('the name of the data set containing your Jol statements.')\n  /('If you wish to enter the Jol statements from the terminal, enter')\n   ('an asterisk (*) instead of the data set name:' hi ' JOL *')\n   ('which means, \"Call the Jol compiler. I wish to enter my Jol')\n   ('Jol statements from the terminal.\" ')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/(ctr hi '---- Jol Terminal Users Guide ----')\nlm 8\n   ('Example:')\n  /('        'hi'JOL MY')\n  /('Means, \"Call the Jol compiler. The Jol data sets are in a data')\n   ('set \"%SYSUID.MY.JOL\" which is a sequential data set.\" ')\n   ('For any data set name enetered without enclosing quotes,')\n   ('the Jol command assumes a suffix of Jol.')\n  /('This is the minimum you may specify to use Jol. Your are also able'\n   ('to specify other information to control execution of the Jol')\n   ('compiler, and of the command processor (the program which gets')\n   ('control when you enter Jol is termed \"Command Processor\"). ')\n  /('Documentation on the Terminal Users Guide may be found in the Jol')\n   ('Reference Manual and other related material.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n         %CHNUM = %CHNUM + 1;\n         IF %CHNUM > %MAXCHAP THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n            %CHNUM = 1;\n            %SYSPFK = 3;\n         END;\n END; /* OF CAITERM MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CAIUNCAT": {"ttr": 7943, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " CAIUNCAT : MACRO;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN005;\nPANEL blue box/ (ctr hi '---- UNCATALOG instruction ----')\nlm 8\n//('The UNCATALOG instruction removes data set names from the')\n  ('catalog. ')\n /('Format:  'hi'           / dsid \\ ')\n  ('         'hi'UNCATALOG {        } |FROM <VOL> volume <UNIT> unit? ;')\n  ('         'hi'           \\dsname/')\n /('Whenever you need to read, update or modify a data set, the')\n  ('system needs to know on which volume the data set resides')\n  ('and which device type is necessary to mount the volume. ')\n  ('A data set on a tape will require a tape device so that the')\n  ('tape containing the data set can be mounted; a data set on a')\n  ('disk volume will require a disk device on which to mount ')\n  ('the volume.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN010;\nPANEL blue box/ (ctr hi '---- UNCATALOG instruction ----')\nlm 8\n/('So that you do not have to code the volume and unit names')\n ('each time that you refer to a data set, you can CATALOG them')\n ('This means that the data set name, volume, unit and, if a tape,')\n ('the position of the data set on a tape, are entered into the')\n ('catalog. Now, when you refer to the data set you refer only')\n ('to its name and the system will then find the volume and ')\n ('unit information in the catalog.')\n/('UNCATALOGing a data set simply removes the name of the ')\n ('data set from the catalog. It does NOT SCRATCH the data set')\n ('and so if you want to use the data set again, you MUST code')\n ('the volume and unit information.')\n/('So that the system catalog knows where it is, use the')\n ('CATALOG instruction to place data set name information')\n ('in the catalog.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan005;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\nPANEL blue box/ (ctr hi '---- UNCATALOG instruction ----')\nlm 8\n/('After the UNCATALOG instruction has been issued the data set')\n ('still exists on a direct access volume until it has been')\n ('SCRATCHed, or it still exists on a tape volume until the')\n ('tape has been overwritten.')\n/('Notes: 1. All OLD data sets are automatically kept unless')\n ('          a DELETE or SCRATCH instruction is executed, but')\n ('          all NEW data sets are scratched by the OS unless')\n ('          they are KEPT or CATALOGed.')\n/('       2. The volume on which the data set resides and its')\n ('          associated unit type MUST be known before the')\n ('          UNCATALOG instruction can be performed.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan010;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL blue box/ (ctr hi '---- UNCATALOG instruction ----')\nlm 8\n/('       3. If you know a data set is scratched (i.e. does not')\n ('          exist), the UNCATALOG instruction may be used to remove')\n ('          the catalog entry rather than the DELETE instruction.')\n ('          In this case, the DELETE instruction would give an')\n ('          unnecessary error message when it attempts to scratch')\n ('          the non-existing data set.  ')\n/('       4. If you are not certain that the data set is ')\n ('          allocated use the DELETE instruction rather   ')\n ('          than the UNCATALOG instruction. If the data set ')\n ('          is not allocated (e.g. already scratched) an  ')\n ('          informatory message will be issued. It is     ')\n ('          IMPORTANT to try to keep the catalog contents ')\n ('          correct; it it NOT a good practice to merely  ')\n ('          UNCATALOG a data set without scratching it unless'\n ('          you have a manual system for noting the where-')\n ('          abouts of your data sets.')\n        %helpline;\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN015;\n  PANEL blue box/ (hi ctr '---- UNCATALOG instruction ----')\n /(ctr 'The following table shows the actions taken')\nlm 10\n /('----------------------------------------------------------------')\n  ('-     VOLUME and          -       ACTION                       -')\n  ('-     UNIT INFORMATION    -                                    -')\n  ('----------------------------------------------------------------')\n  ('- Coded on DECLARE        - Uncataloged                        -')\n  ('-                         -                                    -')\n  ('- Coded on DELETE         - Uncataloged                        -')\n  ('-  (FROM option)          -                                    -')\n  ('-                         -                                    -')\n  ('- Not coded and data set  - Uncataloged                        -')\n  ('- created earlier in job  -                                    -')\n  ('-                         -                                    -')\n  ('- Not coded and data set  - The system catalog is searched to  -')\n  ('- not created earlier in  - find the VOLUME and UNIT the       -')\n  ('- the job (OLD data set)  - data set is on. If not found, then -')\n  ('-                         - the UNCATALOG is ignored           -')\n  ('----------------------------------------------------------------')\n        %helpline;\n\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan020;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\nLABEL PAN020;\nPANEL blue box/ (ctr hi '---- UNCATALOG instruction ----')\nlm 8\n/(' EXAMPLES: ',#1,40,' DECLARE DSID1 DS DSNAME MY.SET; ')\n ('           ',#2,40,' UNCATALOG DSID1;');\nIF %SYSPFK=7 | %SYSPFK=19 then redo pan015;\nIF %SYSPFK=3 | %SYSPFK=15 THEN exit;\n           %COMNUM = %COMNUM + 1;\n           IF %COMNUM > %MAXCOM THEN DO;\nPANEL blue box ///////(ctr ' This is the end of this section.')\n         /(ctr 'Press ENTER to get back to main index/menu.',X,1);\n              %COMNUM = 1;\n              %SYSPFK = 3;\n           END;\n END; /* OF CAIUNCAT MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CATLGNOT": {"ttr": 7946, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "catlg: macro(%on =);\n\n/* This macro catalogs data sets on Unix or MS/Dos systems.\n\n   It is only useful for Generation Data Sets currently.\n*/\n\n   dcl %member                  init '';\n   dcl %litdsn                  init 0;\n   dcl %gdgno                   init 3;\n   dcl %indsn                   init '';\n   dcl %invol                   init '';\n\n   dcl %gdgact,%gdgkeep,%gdglast init '';\n\n   indsn=list(1);\n   invol=on;\n\n   if index(indsn,'.') = 0\n   &  index(indsn,'(') = 0\n   then return;                         /* No work to do */\n\n/* Now check for MVS and Unix style names, and convert if necessary */\n\n   if type(indsn) = 'LIT' then litdsn=1;  /* Check here, because Jol\n                                             puts quotes on later ! */\n\n   %i = index(indsn,'(');\n   if %i \u00ac=0\n   then do;\n       member=substr(indsn, i+1);\n       member=substr(member,1,length(member) -1);\n       indsn = substr(indsn, 1, i-1);\n   end;\n\n   if  litdsn = 0\n   then do;\n write 'Not literal Dsn';\n       if %invol \u00ac= '' then\n       %indsn='%invol:/%sysuid' || '/'|| indsn;\n       else %indsn='/%sysuid' || '/'|| indsn;\n   end;\n\n/* Convert .'s to /'s  */\n\nt1:\n   %i = index(indsn,'.');\n   if %i \u00ac=0\n   then do;\n        indsn = substr(indsn, 1, i-1) || '/'\n                 || substr(indsn, i+1);\n        goto t1;\n   end;\n  if %member \u00ac=''\n  then do;\n       if substr(member,1,1) = '+'\n       |  substr(member,1,1) = '-'\n       |  type  (member) = 'NUM'\n       then do;\n          getfirst '%indsn/control.dat';\n          if %lastcc \u00ac=0\n          then do;\ngdgreset:\n              panel (ctr hi 'Catalog Data Set Utility')\n                    /////\n                    (ctr 'Data Set %indsn')\n                   /('      Please Enter Number of Generations to Keep',\n                            gdgno,3,'%gdgno')\n                    ;\n              alloc$ f(control) da('%indsn/control.dat') new;\n              open   f(control) output;\n              write  f(control) from('NO=%gdgno');\n              write  f(control) from('ACTION=DELETE');\n              write  f(control) from('CURRENT=0');\n              close  f(control);\n          end;\n\n          alloc$ f(control) da('%indsn/control.dat') old;\n          open   f(control) input;\n          read   f(control) into(gdgkeep);\n          read   f(control) into(gdgact);\n          read   f(control) into(gdglast);\n\n          close  f(control);\n\n          gdgkeep = upper(gdgkeep);\n          gdgact  = upper(gdgact );\n          gdglast = upper(gdglast);\n\n          if substr(gdgkeep,1,3)   \u00ac='NO='\n          |  substr(gdgact ,1,7)   \u00ac='ACTION='\n          |  substr(gdglast,1,8)   \u00ac='CURRENT='\n          then do;\nask2:\n             Panel (ctr hi 'Error: Invalid Control Information')\n               /// (ctr    'Invalid Control Information')\n                   (ctr    'Found for Generation Data Set')\n                 / (flash ctr '%indsn')\n               /// ('     Enter Y to Reset  =====> ',gdgact,1,'Y')\n               //  (' Control Cards are:')\n                /  ('1. %gdgkeep')\n                   ('2. %gdgact')\n                   ('3. %gdglast')\n               helpline ('Press F3 to Exit');\n               if %syspfk = 3 then exit;\n               if %gdgact = 'Y' then goto gdgreset;\n               goto ask2;\n               goto setdsn;\n          end;\n          gdgkeep=substr(gdgkeep,4);\n          gdgact =substr(gdgact ,8);\n          gdglast=substr(gdglast,9);\n          if substr(member,1,1) = '+'\n          then member = gdglast + substr(member,2);\n          else\n          if substr(member,1,1) = '-'\n          then member = gdglast - substr(member,2);\n/* Must be numeric, eg I.I(7) */\n          else\n          if member = 0  then\n             member = gdglast;\n/* Check for wrap around */\n          if member > 9999  then member = 0;\n\n          member = right('0000%member',4);     /* Pad to 4 characters */\n          member = 'G'||member||'V00';\n          write 'GDG';\n       end;\n       indsn=indsn ||'/'||member;\n\n  end;\nsetdsn:\n  %dsname = indsn;    /* Jol Can't return strings (yet) */\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHECKNET": {"ttr": 7949, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x04\\x00\\x00\\x00\\x87%/\\x00\\x90\\x12\\x1f\\x13\\x05\\x00K\\x00I\\x00\\x03\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "04.04", "flags": 0, "createdate": "1987-09-09T00:00:00", "modifydate": "1990-05-01T13:05:00", "lines": 75, "newlines": 73, "modlines": 3, "user": "JOL"}, "text": "CHECKNET:MACRO;\n/* USAGE:   CHECKNET NETWORK JUST-FINISHED-JOBNAME;  */\n /* ADDED FOR NETWORKING AND SCHEDULING C.CLARKE MARCH, 1987 */\n DCL %X        INIT '';   /* LOCAL VARIABLE */\n DCL %JOBNAME  INIT '';   /* LOCAL VARIABLE */\n IF %LIST(1)=''\n THEN DO;\n    STOP 'CHECKNET COMMAND EXECUTED WITHOUT NETWORK ID';\n    EXIT;\n END;\n\n IF %LIST(2)\u00ac=''          /* ASKED TO NOTIFY A JOB ENDED? */\n THEN DO;\n      %JOBNAME='NETJOB=%LIST(2)';\n END;\n\n DCL %SYSNETID INIT('') EXT;  /* SET IF NETWORK EXECUTING */\n DCL %SYSJOBS1 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSJOBS2 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSNTINC INIT('') EXT;  /* KEEPS INCLUDE DATA SET FOR JOBS      */\n DCL %SYSNTMAC INIT('') EXT;  /* KEEPS JOL MACRO DATA SETS FOR JOBS   */\n\n /*****************************************************************/\n /*****SET UP USERS JOL LIBRARIES *********************************/\n /*****************************************************************/\n         %UMAC='%SYSNTMAC';\n         %ULIB='%SYSNTINC';\n         IF %UMAC\u00ac=' ' THEN %UMAC='%UMAC||';\n         ELSE IF %SYSUID \u00ac= ' ' THEN %UMAC = '%SYSUID.JOL ||';\n         IF %ULIB\u00ac=' ' THEN %ULIB='%ULIB||';\n         ELSE IF %SYSUID \u00ac= ' ' THEN %ULIB = '%SYSUID.JOL ||';\n         IF %NP='' THEN DCL $$JPRINT PRINTER VBA 150,160;\n                   ELSE DCL $$JPRINT DS 'NULLFILE';\n\n /*****************************************************************/\n /*****SET UP JOL BATCH COMPILE DECLARATIONS AND RUN STATEMENT*****/\n /*****************************************************************/\n DCL TEMPSUB     DS FB 80,800 SYSDA;\n DCL $$JCL       SYSOUT=A PGM=INTRDR FB 80,80 BUFNO=1;\n DCL $$JLOAD     DS %$JOLPREF.JOL%$JOLVERS.LOAD ;\n DCL $$JINCL     DS %$JOLINCL ;\n DCL $$JMACRO    DS %$JOLPREF.JOL%$JOLVERS.CMDLIB ;\n DCL $$JWORK1    DS SYSDA FB 80,800 600 BLKS NORLSE ;\n DCL $$JWORK2    DS SYSDA VB 200,800 600 BLKS NORLSE ;\n /* DCL $JOLCP%$JOLVERS   PROG */\n DCL $JOLCP51    PROG\n      $$JPRINT   WRITES $$JPRINT\n      TEMPNET    WRITES TEMPSUB\n      $$JCL      WRITES $$JCL\n      $$JLOAD    READS  $$JLOAD\n      $$JINCL    READS  %ULIB $$JINCL\n      $$JMACRO   READS  %UMAC  $$JMACRO\n      $$JWORK1   WRITES $$JWORK1\n      $$JWORK2   WRITES $$JWORK2\n      $$JIN      READS  %$JOLPREF.JOLNET.CODE(%LIST(1))||TEMPSUB;\n/* $SYSLABEL:       RUN $JOLCP%$JOLVERS PARM */\n%SYSLABEL:       RUN $JOLCP51 PARM\n      '/%JOBNAME SYSUID=%SYSUID';\n /*   '%NPI,%PO,%LET,%PE,%PM,%PJ,%NP,%NOCAT,%NOCATGDG/%JOBNAME '; */\n /*****************************************************************/\n /*****SET UP JCL BATCH STATEMENTS TO SUBMIT JCL JOB **************/\n /*****************************************************************/\n IF %JCJOB='YES'\n  THEN DO;\n  DCL DUMMYIN DS DUMMY;\n  DCL PRINTFIL  PRINTER NODCB;\n  DCL OUTJCL SYSOUT=A PGM=INTRDR FB 80,80 BUFNO=1;\n   IEBGENER: DCL IEBGENER PROG\n             SYSUT1 READS CARDS\n             SYSUT2 WRITES OUTJCL\n             SYSIN  READS DUMMYIN\n             SYSPRINT WRITES PRINTFIL;\n     RUN IEBGENER ;\n END ;\n END ; /* END OF MACRO */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CHECKOLD": {"ttr": 8193, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x00\\x00\\x00\\x00\\x87%/\\x00\\x87%/\\x16\\x11\\x00I\\x00I\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "04.00", "flags": 0, "createdate": "1987-09-09T00:00:00", "modifydate": "1987-09-09T16:11:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "JOL"}, "text": "CHECKNET:MACRO;\n/* USAGE:   CHECKNET NETWORK JUST-FINISHED-JOBNAME;  */\n /* ADDED FOR NETWORKING AND SCHEDULING C.CLARKE MARCH, 1987 */\n DCL %X        INIT '';   /* LOCAL VARIABLE */\n DCL %JOBNAME  INIT '';   /* LOCAL VARIABLE */\n IF %LIST(1)=''\n THEN DO;\n    STOP 'CHECKNET COMMAND EXECUTED WITHOUT NETWORK ID';\n    EXIT;\n END;\n\n IF %LIST(2)\u00ac=''          /* ASKED TO NOTIFY A JOB ENDED? */\n THEN DO;\n      %JOBNAME='NETJOB=%LIST(2)';\n END;\n\n DCL %SYSNETID INIT('') EXT;  /* SET IF NETWORK EXECUTING */\n DCL %SYSJOBS1 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSJOBS2 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSNTINC INIT('') EXT;  /* KEEPS INCLUDE DATA SET FOR JOBS      */\n DCL %SYSNTMAC INIT('') EXT;  /* KEEPS JOL MACRO DATA SETS FOR JOBS   */\n\n /*****************************************************************/\n /*****SET UP USERS JOL LIBRARIES *********************************/\n /*****************************************************************/\n         %UMAC='%SYSNTMAC';\n         %ULIB='%SYSNTINC';\n         IF %UMAC\u00ac=' ' THEN %UMAC='%UMAC||';\n         ELSE IF %SYSUID \u00ac= ' ' THEN %UMAC = '%SYSUID.JOL ||';\n         IF %ULIB\u00ac=' ' THEN %ULIB='%ULIB||';\n         ELSE IF %SYSUID \u00ac= ' ' THEN %ULIB = '%SYSUID.JOL ||';\n         IF %NP='' THEN DCL $$JPRINT PRINTER VBA 150,160;\n                   ELSE DCL $$JPRINT DS 'NULLFILE';\n\n /*****************************************************************/\n /*****SET UP JOL BATCH COMPILE DECLARATIONS AND RUN STATEMENT*****/\n /*****************************************************************/\n DCL TEMPSUB     DS FB 80,800 SYSDA;\n DCL $$JCL       SYSOUT=A PGM=INTRDR FB 80,80 BUFNO=1;\n DCL $$JLOAD     DS %$JOLPREF.JOL%$JOLVERS.LOAD ;\n DCL $$JINCL     DS %$JOLINCL ;\n DCL $$JMACRO    DS %$JOLPREF.JOL%$JOLVERS.CMDLIB ;\n DCL $$JWORK1    DS SYSDA FB 80,800 600 BLKS NORLSE ;\n DCL $$JWORK2    DS SYSDA VB 200,800 600 BLKS NORLSE ;\n DCL $JOLCP%$JOLVERS   PROG\n      $$JPRINT   WRITES $$JPRINT\n      TEMPNET    WRITES TEMPSUB\n      $$JCL      WRITES $$JCL\n      $$JLOAD    READS  $$JLOAD\n      $$JINCL    READS  %$JOLPREF.JOLNET.STATUS || %ULIB $$JINCL\n      $$JMACRO   READS  %UMAC  $$JMACRO\n      $$JWORK1   WRITES $$JWORK1\n      $$JWORK2   WRITES $$JWORK2\n      $$JIN      READS  %$JOLPREF.JOLNET.CODE(%LIST(1))||TEMPSUB;\n%SYSLABEL:       RUN $JOLCP%$JOLVERS PARM\n      '/%JOBNAME SYSUID=%SYSUID';\n /*   '%NPI,%PO,%LET,%PE,%PM,%PJ,%NP,%NOCAT,%NOCATGDG/%JOBNAME '; */\n /*****************************************************************/\n /*****SET UP JCL BATCH STATEMENTS TO SUBMIT JCL JOB **************/\n /*****************************************************************/\n IF %JCJOB='YES'\n  THEN DO;\n  DCL DUMMYIN DS DUMMY;\n  DCL PRINTFIL  PRINTER NODCB;\n  DCL OUTJCL SYSOUT=A PGM=INTRDR FB 80,80 BUFNO=1;\n   IEBGENER: DCL IEBGENER PROG\n             SYSUT1 READS CARDS\n             SYSUT2 WRITES OUTJCL\n             SYSIN  READS DUMMYIN\n             SYSPRINT WRITES PRINTFIL;\n     RUN IEBGENER ;\n END ;\n END ; /* END OF MACRO */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COB": {"ttr": 8195, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x82!\\x8f\\x00\\x82!\\x8f\\x16X\\x01\\xd6\\x01\\xd6\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1982-08-06T00:00:00", "modifydate": "1982-08-06T16:58:00", "lines": 470, "newlines": 470, "modlines": 0, "user": "JOL"}, "text": "COBOL:MACRO (\n/*********************************************************************/\n/**************          ABS JOL COBOL MACRO            **************/\n/**************              11 MARCH 1981              **************/\n/*********************************************************************/\n/*                                                                   */\n/*        SPECIAL PARAMETERS FOR THIS COBOL MACRO                    */\n/*                                                                   */\n  %NOPANEL                   /* PANEL IS THE DEFAULT FOR TSO         */\n  %STEPLIB=,                 /* FOR DEFINING TEST COBOL LIBRARY      */\n  %LINK                      /* FOR CHAINING TO JOL LINK MACRO       */\n/*                                                                   */\n/*        DEFINE POSSIBLE STANDARD COBOL PARAMETERS                  */\n/*                                                                   */\n  %OBJ='&&OBJ',%NOOBJ        /* TEMPORARY OBJECT IS DEFAULT          */\n  %PPREG= 600,               /* THIS IS THE REGION                   */\n  %PRINT=,%SYSOUT=,%NOPRINT  /* SYSOUT DEFAULTS TO MSGCLASS          */\n  %LIB=,%NOLIB               /* DEFINE AN INPUT LIBRARY IF REQ'D     */\n  %APOST %QUOTE              /* APOST IS THE DEFAULT                 */\n  %BATCH %NOBATCH            /* NOBATCH IS THE DEFAULT               */\n  %BUF='60K',                /* BUFFER                               */\n  %CDECK %NOCDECK            /* NOCDECK IS THE DEFAULT               */\n  %CHECK %NOCHECK            /* NOCHECK IS THE DEFAULT               */\n  %CLIST %NOCLIST            /* NOCLIST IS THE DEFAULT               */\n  %COPY %NOCOPY              /* NOCOPY IS THE DEFAULT                */\n  %COUNT %NOCOUNT            /* NOCOUNT IS THE DEFAULT               */\n  %CYNTAX %NOCYNTAX          /* NOCYNTAX IS THE DEFAULT              */\n  %DECNT=,                   /* NO IS THE DEFAULT (MAY BE A NUMBER)  */\n  %DMAP %NODMAP              /* NODMAP IS THE DEFAULT                */\n  %DYNAM %NODYNAM            /* NODYNAM IS THE DEFAULT               */\n  %FLAGW %FLAGE              /* FLAGW IS THE DEFAULT                 */\n  %FLOW=,%NOFLOW             /* NOFLOW IS THE DEFAULT                */\n  %IDENT %NOIDENT            /* DEFAULT IS NOFLOW                    */\n  INTERRUP,INTER,            /* INTERRUPT STD IS THE DEFAULT         */\n  %LCOL1 %LCOL2              /* LCOL1 IS THE DEFAULT                 */\n  %LIL %NOLIL                /* NOLIL IS THE DEFAULT                 */\n  %LINECNT=,                 /* 55 IS THE DEFAULT                    */\n  %LSTONLY %LSTCOMP %NOLST   /* NOLST IS THE DEFAULT                 */\n  %NAME %NONAME              /* NONAME IS THE DEFAULT                */\n  %NUM %NONUM                /* NUM IS THE DEFAULT                   */\n  %OPTIMIZE %OPT %NOOPT      /* NOOPT IS THE DEFAULT                 */\n  %PMAP %NOPMAP              /* NOPMAP IS THE DEFAULT                */\n  %RENT %NORENT              /* NORENT IS THE DEFAULT                */\n  %RPT=,                     /* =NEW   IS THE DEFAULT                */\n  %SDS %NOSDS                /* NOSDS  IS THE DEFAULT                */\n  %SEQ %NOSEQ                /* NOSEQ  IS THE DEFAULT                */\n  %SIZE=,                    /* SIZE STD IS THE DEFAULT              */\n  %SOURCE %NOSOURCE          /* SOURCE IS THE DEFAULT                */\n  %SPACE1 %SPACE2 %SPACE3    /* SPACE1 IS THE DEFAULT                */\n  %STATE %NOSTATE            /* NOSTATE IS THE DEFAULT               */\n  %SUPMAP %NOSUPMAP          /* SUPMAP IS THE DEFAULT                */\n  %SXREF %NOSXREF            /* SXREF IS THE DEFAULT                 */\n  %SSIN=,                    /*                                      */\n  %SSOUT=,                   /*                                      */\n  %TERM %NOTERM              /* NOTERM IS THE DEFAULT                */\n  %SYMDMP=,%NOSYMDMP         /* NOSYMDMP IS THE DEFAULT              */\n  %TEST=,%NOTEST             /* NOTEST IS THE DEAFULT                */\n  %TRAP %TRAPC               /* TRAP IS THE DEFAULT                  */\n  %TRUNC %NOTRUNC            /* NOTRUNC IS THE DEFAULT               */\n  %VBREF %NOVBREF            /* NOVBREF IS THE DEFAULT               */\n  %VERB %NOVERB              /* NOVERB IS THE DEFAULT                */\n  %XREF %NOXREF              /* XREF  IS THE DEFAULT                 */\n  %ZWB %NOZWB,               /* ZWB IS THE DEFAULT                   */\n  %NOLINKQ                   /* NO LINK QUESTION. IF \"COMPILE AND    */\n                             /* LINK\" IS CALLED, THE COMPILE MACRO   */\n                             /* CALLS THE LINK MACRO, THEREFORE DON'T*/\n                             /* ASK USER IF HE WANTS TO LINK         */\n  );\n/*********************************************************************/\n/*          INITIALISE SOME INTERNAL SYMBOLS FOR THIS MACRO          */\n/*          SET NOPANEL AS THE DEFAULT WHEN NOT IN TSO MODE          */\n/*                                                                   */\nDCL %ANS     INIT '' ;\nDCL %PTYPE   INIT '' ;\nDCL %OBJCAT  INIT 'DISPLAY ''                      ''' ;\nDCL %PRTCAT  INIT 'DISPLAY ''                      ''' ;\n/*                                                                   */\nIF %TSOCLASS = '' THEN %NOPANEL = 'NOPANEL' ;\n/*********************************************************************/\n/*                                                                   */\n/*           PROCESS COBOL MACRO PARAMETERS                          */\n/*                                                                   */\nDCL %PARM INIT '';\n   IF %BUF     \u00ac= '' THEN %PARM = 'BUF=%BUF';\n   IF %NOOBJ   \u00ac= '' THEN %OBJ  = 'NULLFILE';\n   IF %APOST   \u00ac= '' THEN %PARM = '%PARM,%APOST';\n   IF %QUOTE   \u00ac= '' THEN %PARM = '%PARM,%QUOTE';\n   IF %BATCH   \u00ac= '' THEN %PARM = '%PARM,BATCH';\n   IF %NOBATCH \u00ac= '' THEN %PARM = '%PARM,NOBATCH';\n   IF %CDECK   \u00ac= '' THEN %PARM = '%PARM,CDECK';\n   IF %NOCDECK \u00ac= '' THEN %PARM = '%PARM,NOCDECK';\n   IF %CHECK   \u00ac= '' THEN %PARM = '%PARM,CHECK';\n   IF %NOCHECK \u00ac= '' THEN %PARM = '%PARM,NOCHECK';\n   IF %CLIST   \u00ac= '' THEN %PARM = '%PARM,CLIST';\n   IF %NOCLIST \u00ac= '' THEN %PARM = '%PARM,NOCLIST';\n   IF %CLIST = '' & %NOCLIST = '' THEN %PARM = '%PARM,CLIST';\n   IF %COPY    \u00ac= '' THEN %PARM = '%PARM,COPY' ;\n   IF %NOCOPY  \u00ac= '' THEN %PARM = '%PARM,NOCOPY';\n   IF %COPY = '' & %NOCOPY = '' THEN %PARM = '%PARM,COPY';\n   IF %COUNT   \u00ac= '' THEN %PARM = '%PARM,COUNT';\n   IF %NOCOUNT \u00ac= '' THEN %PARM = '%PARM,NOCOUNT';\n   IF %CYNTAX \u00ac= '' THEN %PARM = '%PARM,CSYNTAX';\n   IF %NOCYNTAX \u00ac= '' THEN %PARM = '%PARM,NOCSYNTAX';\n   IF %DECNT   \u00ac= '' THEN %PARM = '%PARM,DECNT=%DECNT';\n   IF %DMAP    \u00ac= '' THEN %PARM = '%PARM,DMAP';\n   IF %NODMAP  \u00ac= '' THEN %PARM = '%PARM,NODMAP';\n   IF %DYNAM   \u00ac= '' THEN %PARM = '%PARM,DYNAM';\n   IF %NODYNAM \u00ac= '' THEN %PARM = '%PARM,NODYNAM';\n   IF %DYNAM = '' & %NODYNAM = '' THEN %PARM = '%PARM,DYNAM';\n   IF %FLAGW   \u00ac= '' THEN %PARM = '%PARM,FLAGW';\n   IF %FLAGE   \u00ac= '' THEN %PARM = '%PARM,FLAGE';\n   IF %FLOW    \u00ac= '' THEN %PARM = '%PARM,FLOW';\n   IF %NOFLOW  \u00ac= '' THEN %PARM = '%PARM,NOFLOW';\n   IF %IDENT   \u00ac= '' THEN %PARM = '%PARM,IDENT';\n   IF %NOIDENT \u00ac= '' THEN %PARM = '%PARM,NOIDENT';\n   IF %LCOL1   \u00ac= '' THEN %PARM = '%PARM,LCOL1';\n   IF %LCOL2   \u00ac= '' THEN %PARM = '%PARM,LCOL2';\n   IF %LIL     \u00ac= '' THEN %PARM = '%PARM,LIL';\n   IF %NOLIL   \u00ac= '' THEN %PARM = '%PARM,NOLIL';\n   IF %LINECNT \u00ac= '' THEN %PARM = '%PARM,LINECNT=%LINECNT';\n   IF %LSTONLY \u00ac= '' THEN %PARM = '%PARM,LSTONLY';\n   IF %LSTCOMP \u00ac= '' THEN %PARM = '%PARM,LSTCOMP';\n   IF %NOLST   \u00ac= '' THEN %PARM = '%PARM,NOLST';\n   IF %NAME    \u00ac= '' THEN %PARM = '%PARM,NAME';\n   IF %NONAME  \u00ac= '' THEN %PARM = '%PARM,NONAME';\n   IF %NUM     \u00ac= '' THEN %PARM = '%PARM,NUM';\n   IF %NONUM   \u00ac= '' THEN %PARM = '%PARM,NONUM';\n   IF %OPTIMIZE\u00ac= '' THEN %PARM = '%PARM,OPTIMIZE';\n   IF %OPT     \u00ac= '' THEN %PARM = '%PARM,OPTIMIZE';\n   IF %NOOPT   \u00ac= '' THEN %PARM = '%PARM,NOOPT';\n   IF %PMAP    \u00ac= '' THEN %PARM = '%PARM,PMAP';\n   IF %NOPMAP  \u00ac= '' THEN %PARM = '%PARM,NOPMAP';\n   IF %RENT    \u00ac= '' THEN %PARM = '%PARM,RENT';\n   IF %NORENT  \u00ac= '' THEN %PARM = '%PARM,NORENT';\n   IF %RPT     \u00ac= '' THEN %PARM = '%PARM,RPT=%RPT';\n   IF %SDS     \u00ac= '' THEN %PARM = '%PARM,SDS';\n   IF %NOSDS   \u00ac= '' THEN %PARM = '%PARM,NOSDS';\n   IF %SEQ     \u00ac= '' THEN %PARM = '%PARM,SEQ';\n   IF %NOSEQ   \u00ac= '' THEN %PARM = '%PARM,NOSEQ';\n   IF %SIZE    \u00ac= '' THEN %PARM = '%PARM,SIZE=%SIZE';\n   IF %SOURCE  \u00ac= '' THEN %PARM = '%PARM,SOURCE';\n   IF %NOSOURCE\u00ac= '' THEN %PARM = '%PARM,NOSOURCE';\n   IF %SOURCE = '' & %NOSOURCE = '' THEN %PARM = '%PARM,SOURCE';\n   IF %SPACE1  \u00ac= '' THEN %PARM = '%PARM,SPACE1';\n   IF %SPACE2  \u00ac= '' THEN %PARM = '%PARM,SPACE2';\n   IF %SPACE3  \u00ac= '' THEN %PARM = '%PARM,SPACE3';\n   IF %STATE   \u00ac= '' THEN %PARM = '%PARM,STATE';\n   IF %NOSTATE \u00ac= '' THEN %PARM = '%PARM,NOSTATE';\n   IF %SUPMAP  \u00ac= '' THEN %PARM = '%PARM,SUPMAP';\n   IF %NOSUPMAP\u00ac= '' THEN %PARM = '%PARM,NOSUPMAP';\n   IF %SXREF   \u00ac= '' THEN %PARM = '%PARM,SXREF';\n   IF %NOSXREF \u00ac= '' THEN %PARM = '%PARM,NOSXREF';\n   IF %SXREF = '' & %NOSXREF = '' THEN %PARM = '%PARM,SXREF';\n   IF %SYMDMP  \u00ac= '' THEN %PARM = '%PARM,SYMDMP';\n   IF %NOSYMDMP\u00ac= '' THEN %PARM = '%PARM,NOSYMDMP';\n   IF %TERM    \u00ac= '' THEN %PARM = '%PARM,TERM';\n   IF %NOTERM  \u00ac= '' THEN %PARM = '%PARM,NOTERM';\n   /*                                            */\n   /* TEST AND SYMDMP ARE EXCLUSIVE - DEFAULT TO */\n   /* SYMDMP IF BOTH ARE CODED FOR THIS MACRO    */\n   /*                                            */\n   IF %TEST \u00ac= '' & %SYMDMP \u00ac= '' THEN %TEST = '' ;\n   IF %TEST    \u00ac= '' THEN %PARM = '%PARM,TEST';\n   IF %NOTEST  \u00ac= '' THEN %PARM = '%PARM,NOTEST';\n   IF %TRAP    \u00ac= '' THEN %PARM = '%PARM,TRAP';\n   IF %TRAPC   \u00ac= '' THEN %PARM = '%PARM,TRAPC';\n   IF %TRUNC   \u00ac= '' THEN %PARM = '%PARM,TRUNC';\n   IF %NOTRUNC \u00ac= '' THEN %PARM = '%PARM,NOTRUNC';\n   IF %VBREF   \u00ac= '' THEN %PARM = '%PARM,VBREF';\n   IF %NOVBREF \u00ac= '' THEN %PARM = '%PARM,NOVBREF';\n   IF %VERB    \u00ac= '' THEN %PARM = '%PARM,VERB';\n   IF %NOVERB  \u00ac= '' THEN %PARM = '%PARM,NOVERB';\n   IF %XREF    \u00ac= '' THEN %PARM = '%PARM,XREF';\n   IF %NOXREF  \u00ac= '' THEN %PARM = '%PARM,NOXREF';\n   IF %ZWB     \u00ac= '' THEN %PARM = '%PARM,ZWB';\n   IF %NOZWB   \u00ac= '' THEN %PARM = '%PARM,NOZWB';\n   IF %LINK    \u00ac= '' THEN %LINK = 'Y';\nDCL %LNKLINE INIT '';\nIF %NOLINKQ = 'NOLINKQ' THEN DO ;  /* HAS THIS MACRO BEEN CALLED BY */\n   %LNKLINE = '//'; %LINK = 'N' ;  /* THE COMPILE AND LINK MACRO    */\nEND;\nELSE DO;                        /* IF NOT CALLED BY COMPILE AND LINK */\n    %LNKLINE =                  /* THEN LEAVE IT AS IT WAS.  PJC...  */\n  '(''        LINK ***** Y/N ****'',LINK,1,''%LINK'')   //';\nEND;\n/*                                                                   */\n/*                                                                   */\n/*********************************************************************/\n/*          SET OPTION FOR PRINT SYSOUT OR NOPRINT                   */\n/*          DEFAULT IS TO MSGCLASS                                   */\n/*                                                                   */\nIF %PRINT \u00ac= '' & %SYSOUT\u00ac='' THEN STOP 'PRINT AND SYSOUT CODED';\nIF %TSOCLASS \u00ac= '' THEN DCL %PFILE INIT 'SYSOUT %TSOCLASS';\n                   ELSE DCL %PFILE INIT 'SYSOUT A';\nIF %PRINT    \u00ac= '' THEN %PFILE = '%PRINT';\nIF %SYSOUT   \u00ac= '' THEN %PFILE = 'SYSOUT %SYSOUT';\nIF %NOPRINT  \u00ac= '' THEN %PFILE = 'NO PRINT REQUIRED';\n/********************************************************************/\n/*          SET UP COBOL COPY LIBRARY DEFAULT                       */\n/*                                                                  */\nIF %LIB = '' THEN %LIB = 'NOT REQUIRED' ;\n/********************************************************************/\n/*          SET OPTION FOR SYMDMP NOSYMDMP OR TEST NOTEST           */\n/*          DEFAULT IS NOSYMDMP NOTEST                              */\n/*                                                                  */\nDCL %SYMFILE INIT '';\nDCL %SYMLINE INIT '';\nIF %SYMDMP \u00ac='' THEN\n   DO;\n      %SYMFILE = '%SYMDMP' ;\n      %SYMDMP  = 'SYSUT5  UPDATES COBSYMS' ;\n      %SYMLINE = '(''YOUR SYM FILE WILL BE =======>'',SYMFILE,44,\n      ''%SYMFILE'')';\n   END;\n/********************************************************************/\nIF %TEST \u00ac='' THEN\n   DO;\n      %SYMFILE = '%TEST' ;\n      %TEST = 'SYSUT5  UPDATES COBSYMS' ;\n      %SYMLINE = '(''YOUR SYM FILE WILL BE =======>'',SYMFILE,44,\n      ''%SYMFILE'')';\n   END;\n/********************************************************************/\n/*          SET DSN OR DSID FOR COMPILER INPUT                      */\n/*          DEFAULT IS SYSPREF.COBOL                                */\n/*                                                                  */\nDCL %DSIN INIT '%SYSPREF.COBOL';\nDCL %MEM INIT  '';\nIF %LIST(1) \u00ac= '' THEN\n   DO;\n      %DSIN = '%LIST(1)';\n      DCL %###X INIT '';\n      DCL %###L INIT '';\n      %###X = INDEX(DSIN,'(');\n      IF %###X \u00ac= 0 THEN\n         DO;\n            %MEM = SUBSTR(DSIN,%###X);\n            %MEM = SUBSTR(MEM,2);\n            %###L = LENGTH(MEM);\n            %###L = %###L - 1;\n            %MEM = SUBSTR(MEM,1,%###L);\n            %###X = %###X - 1;\n            %DSIN = SUBSTR(DSIN,1,%###X);\n            %###X = '';\n         END;\n   END;\n/********************************************************************/\n/*              JOL COBOL COMMAND PANEL                             */\n/*                                                                  */\nIF %NOPANEL = '' THEN\n   PANEL\n   ('             *****  JOL COBOL COMMAND *****              ')\n   ('          ANY HIGHLIGHTED FIELD CAN BE CHANGED           ')\n   ('COMPILER OPTIONS CAN BE CHANGED OR ADDED TO - COMMAS REQD')\n   ('        ALL DATA SET NAMES MUST BE FULLY QUALIFIED       ') //\n   %LNKLINE\n   ('SOURCE DATA SET =============>',DSIN,44,'%DSIN')\n   ('SOURCE DATA SET MEMBER ======>',MEM,44,'%MEM')\n   ('OBJECT DATA SET =============>',OBJ,44,'%OBJ')\n   ('COPY LIBRARY(S) =============>',LIB,80,'%LIB')\n   ('PRINTER OPTION ==============>',PFILE,44,'%PFILE')\n   %SYMLINE\n   ('COMPILER OPTIONS ============>',PARM,100,'%PARM')\n   ('*************************************************************');\n/*                                                                  */\n/********************************************************************/\n/*            SET INPUT TO THE COMPILER                             */\n/*                                                                  */\nDCL %LINKMEM INIT '' ;\nIF %MEM \u00ac= '' THEN\n   DO;\n      %DSIN = '%DSIN(%MEM)';\n      %LOADMEM = 'NAME %MEM' ;\n   END;\nDCL INP DS DSN %DSIN NODEF;\n/*********************************************************************/\n/*            SET UP OBJECT CODE DATASET                             */\n/*            DEFAULT IS AN EXISTING DATASET                         */\n/*                                                                   */\nDCL %OBJFILE INIT '' ;\nDCL %SYSLIN  INIT '' ;\nIF %OBJ = '&&OBJ' THEN                 /* DEFAULT TO TEMP OBJECT     */\nDO;                                    /* WITH DSID OF OBJ           */\n   %OBJ     = 'OBJ' ;\n   %OBJFILE = 'OBJ' ;\n   DCL OBJ DS DSN &&OBJ BLKSIZE 800 5 CYLS NORLSE SYSDA EXT;\n   %SYSLIN  = 'MODS';\nEND;\nELSE                                   /* OBJECT DATASET DSID OR DSN */\nDO;\n   %PTYPE = INDEX(OBJ,'.');\n   IF %PTYPE = 0 THEN                  /* DSID FOR OBJECT DATASET    */\n   DO;                                 /* ASSUME NEW AND CATALOG IT  */\n      %OBJFILE = 'OBJ2' ;\n      DCL OBJ2 DS LIKE %OBJ ;\n      %SYSLIN  = 'WRITES' ;\n      %OBJCAT  = 'CATALOGUE OBJ2' ;\n   END;\n   IF %PTYPE \u00ac= 0 & %NOPANEL \u00ac= '' THEN /* DSN FOUND AND PANEL OFF   */\n   DO;                                  /* SO ASSUME OLD DSN USED    */\n      %OBJFILE = 'OBJ2' ;\n      DCL OBJ2 DS DSN %OBJ NODEF ;\n      %SYSLIN = 'UPDATES' ;\n   END;\n   IF %PTYPE \u00ac= 0 & %NOPANEL = '' THEN /* DSN FOUND AND PANEL ON     */\n   DO;                                 /* SO WE CAN GET MORE INFO    */\n      PANEL\n      ('         ***** JOL COBOL COMMAND *****               ') ///\n      ('YOU HAVE SPECIFIED AN OBJECT DATASET FOR THIS COMPILE') ///\n      ('IS THIS DATA SET CATALOGUED ********* Y/N',ANS,1)       ///\n      ('**********************************************************');\n      %OBJFILE = 'OBJ2';\n      IF %ANS = 'Y' THEN               /* OBJECT DSN IS CATALOGUED   */\n      DO;                              /* SO DECLARE IT AS OLD       */\n         DCL OBJ2 DS DSN %OBJ NODEF;\n         %SYSLIN = 'UPDATES';\n      END;\n      ELSE                             /* NEW DSN FOUND SO TELL      */\n      DO;                              /* USER AND CATALOGUE IT      */\n         PANEL\n         ('      *****  JOL COBOL COMMAND *****             ') ///\n         ('   ANY HIGHLIGHTED FIELD CAN BE CHANGED          ') ///\n         ('YOUR OBJECT DATA SET DEFINITION IS AS FOLLOWS    ') ///\n         ('',DCLDEF,99,\n          'DCL OBJ2 DS DSN %OBJ SYSDA 5,3 TRKS FB 80,3040 EXT') ///\n         ('********************************************************');\n         %SYSLIN = 'WRITES' ;\n         %OBJCAT = 'CATALOGUE OBJ2' ;\n         %DCLDEF;\n      END;\n      %ANS = '';\n   END;\n   %PTYPE = '' ;\nEND;\n/********************************************************************/\n/*               SET UP PRINTED OUTPUT OR PRINT DATASET             */\n/*                                                                  */\nDCL %OUTDISP INIT '' ;\n%PTYPE = SUBSTR(PFILE,1,6);\nIF %PTYPE = 'SYSOUT' THEN              /* SYSOUT CLASS DEFINED      */\n   DO;\n      DCL PRT %PFILE;\n      %SYSOUT = '%PFILE';\n      %PTYPE = 1;\n      %OUTDISP = 'WRITES';\n   END;\nIF %PTYPE = 'NO PRI' THEN               /* NOPRINT OPTION CODED      */\n   DO;\n      DCL PRT DS DUMMY NODEF;\n      %PTYPE = 1;\n      %OUTDISP = 'WRITES';\n   END;\nIF %PTYPE \u00ac= 1 THEN                     /* PRINT DSN OR DSID CODED   */\nDO;\n   %PTYPE = INDEX(PFILE,'.');\n   IF %PTYPE = 0 THEN                   /* DSID FOR PRINT DATASET    */\n   DO;                                  /* ASSUME NEW AND CATALOG IT */\n      DCL PRT LIKE %PFILE ;\n      %OUTDISP = 'WRITES' ;\n      %PRTCAT  = 'CATALOGUE PRT' ;\n   END;\n   IF %PTYPE \u00ac= 0 & %NOPANEL \u00ac= '' THEN /* DSN FOUND AND PANEL OFF   */\n   DO;                                  /* SO ASSUME OLD DSN USED    */\n      DCL PRT DS DSN %PFILE NODEF ;\n      %OUTDISP = 'UPDATES';\n   END;\n   IF %PTYPE \u00ac= 0 & %NOPANEL = ''  THEN /* DSN FOUND AND PANEL ON    */\n   DO;                                  /* SO WE CAN GET MORE INFO   */\n      PANEL\n      ('       ***** JOL COBOL COMMAND  *****')                ///\n      ('YOU HAVE SPECIFIED A PRINT DATASET FOR THIS COMPILE ') ///\n      ('IS THIS DATASET ALREADY CATALOGUED *** Y/N',ANS,1)     ///\n      ('*********************************************************');\n      IF %ANS = 'Y' THEN               /* PRINT DSN IS CATALOGUED    */\n      DO;                              /* SO DECLARE IT AS OLD       */\n         DCL PRT DS DSN %PFILE NODEF;\n         %OUTDISP = 'UPDATES';\n      END;\n      ELSE                              /* NEW DSN FOUND SO TELL     */\n      DO;                               /* USER AND CATALOGUE IT     */\n         PANEL\n         ('        ***** JOL COBOL COMMAND  *****           ')\n         ('      ANY HIGHLIGHTED FIELD CAN BE CHANGED       ') ///\n         ('YOUR OUTLIST DATA SET DEFINITION IS AS FOLLOWS   ')\n         ('',DCLDEF,80,\n          'DCL PRT DS DSN %PFILE SYSDA 5,3 TRKS VBA 136,6144 EXT') ///\n         ('********************************************************');\n         %OUTDISP = 'WRITES';\n         %DCLDEF;\n         %PRTCAT = 'CATALOGUE PRT';\n      END;\n      %ANS = '';\n   END;\n   %PTYPE = '' ;\n   %QTYPE = '' ;\nEND;\n/********************************************************************/\n/*                SET UP COBOL COPY LIBRARY                         */\n/*                                                                  */\nIF %LIB \u00ac= 'NOT REQUIRED' THEN\n   DO;\n      DCL LIB DS %LIB  NODEF;\n      %LIB = 'SYSLIB READS LIB';\n   END;\nELSE %LIB = '';\n/********************************************************************/\n/*               SYMDMP OR TEST SYMFILE                             */\n/*                                                                  */\n%QTYPE = INDEX(SYMFILE,'(') ;\nIF %TEST \u00ac= '' | %SYMDMP \u00ac= '' THEN\n   DO;\n      IF %QTYPE = 0 THEN DCL COBSYMS DS %SYMFILE(%MEM) NODEF;\n      ELSE DCL COBSYMS DS %SYMFILE NODEF;\n   END ;\n%QTYPE = '' ;\nIF %SYMFILE \u00ac= '' & %NOPANEL = '' THEN\n   PANEL\n   ('        ***** JOL COBOL COMMAND *****                 ') ///\n   ('YOU HAVE SPECIFIED A SYM FILE FOR THIS COMPILE.    ')\n   ('THE DATASET MUST BE AN EXISTING CATALOGUED DATASET.')\n   ('IT SHOULD BE A PARTITIONED DATASET RECFM F 512 512 ')\n   ('SPACE = 3,3,1 TRKS IS USUALLY ENOUGH.              ')\n   ('JOL WILL CREATE A NEW MEMBER.                      ')///\n   ('***************************************************',SYM,1);\n/********************************************************************/\n/*               SET UP COMPILER WORK FILES                         */\n/*                                                                  */\nDCL DS002  DS  5 CYLS  SYSDA NORLSE NODCB;\nDCL DS003  DS  5 CYLS  SYSDA NORLSE NODCB;\nDCL DS004  DS  5 CYLS  SYSDA NORLSE NODCB;\nDCL DS005  DS  5 CYLS  SYSDA NORLSE NODCB;\n/********************************************************************/\n/*               DECLARE COBOL COMPILER                             */\n/*                                                                  */\nIF %STEPLIB \u00ac= '' THEN %STEPLIB = 'STEPLIB READS %STEPLIB';\nPROG01:  DCL IKFCBL00 PROG  768 K\n         %STEPLIB\n         SYSIN    READS    INP\n         SYSLIN   %SYSLIN  %OBJFILE\n         SYSPRINT %OUTDISP PRT\n         %LIB\n         SYSUT1   WRITES   DS002\n         SYSUT2   WRITES   DS003\n         SYSUT3   WRITES   DS004\n         SYSUT4   WRITES   DS005\n         %SYMDMP\n         %TEST\n         ;\n/********************************************************************/\n/*                   RUN COBOL COMPILER                             */\n/*                                                                  */\nCOB:     RUN PROG01 '%PARM';\n/********************************************************************/\n/*        CATALOG PRINT AND OBJECT DATASETS IF NECESSARY            */\n/*                                                                  */\nIF COB < 8 THEN\n   DO;\n      %PRTCAT  ;\n      %OBJCAT  ;\n      DISPLAY 'COBOL RETURNED LESS THAN 8';\n   END;\n/********************************************************************/\n/*                  CALL LINK MACRO IF REQUIRED                     */\n/*                                                                  */\nIF COB < 12 & %LINK = 'Y' THEN\n   LINK %NOPANEL '%OBJ' %LOADMEM COBLIB %SYSOUT COMP ;\n/********************************************************************/\n/*                  END OF COBOL MACRO                              */\n/*                                                                  */\nEND;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COBOL": {"ttr": 8451, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x82!\\x8f\\x00\\x86\\x04\\x9f\\x11\\x18\\x01\\xd6\\x01\\xd6\\x00\\x02\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1982-08-06T00:00:00", "modifydate": "1986-02-18T11:18:00", "lines": 470, "newlines": 470, "modlines": 2, "user": "JOL"}, "text": "COBOL:MACRO (\n/*********************************************************************/\n/**************          ABS JOL COBOL MACRO            **************/\n/**************              11 MARCH 1981              **************/\n/*********************************************************************/\n/*                                                                   */\n/*        SPECIAL PARAMETERS FOR THIS COBOL MACRO                    */\n/*                                                                   */\n  %NOPANEL                   /* PANEL IS THE DEFAULT FOR TSO         */\n  %STEPLIB=,                 /* FOR DEFINING TEST COBOL LIBRARY      */\n  %LINK                      /* FOR CHAINING TO JOL LINK MACRO       */\n/*                                                                   */\n/*        DEFINE POSSIBLE STANDARD COBOL PARAMETERS                  */\n/*                                                                   */\n  %OBJ='&&OBJ',%NOOBJ        /* TEMPORARY OBJECT IS DEFAULT          */\n  %PPREG= 600,               /* THIS IS THE REGION                   */\n  %PRINT=,%SYSOUT=,%NOPRINT  /* SYSOUT DEFAULTS TO MSGCLASS          */\n  %LIB=,%NOLIB               /* DEFINE AN INPUT LIBRARY IF REQ'D     */\n  %APOST %QUOTE              /* APOST IS THE DEFAULT                 */\n  %BATCH %NOBATCH            /* NOBATCH IS THE DEFAULT               */\n  %BUF='60K',                /* BUFFER                               */\n  %CDECK %NOCDECK            /* NOCDECK IS THE DEFAULT               */\n  %CHECK %NOCHECK            /* NOCHECK IS THE DEFAULT               */\n  %CLIST %NOCLIST            /* NOCLIST IS THE DEFAULT               */\n  %COPY %NOCOPY              /* NOCOPY IS THE DEFAULT                */\n  %COUNT %NOCOUNT            /* NOCOUNT IS THE DEFAULT               */\n  %CYNTAX %NOCYNTAX          /* NOCYNTAX IS THE DEFAULT              */\n  %DECNT=,                   /* NO IS THE DEFAULT (MAY BE A NUMBER)  */\n  %DMAP %NODMAP              /* NODMAP IS THE DEFAULT                */\n  %DYNAM %NODYNAM            /* NODYNAM IS THE DEFAULT               */\n  %FLAGW %FLAGE              /* FLAGW IS THE DEFAULT                 */\n  %FLOW=,%NOFLOW             /* NOFLOW IS THE DEFAULT                */\n  %IDENT %NOIDENT            /* DEFAULT IS NOFLOW                    */\n  INTERRUP,INTER,            /* INTERRUPT STD IS THE DEFAULT         */\n  %LCOL1 %LCOL2              /* LCOL1 IS THE DEFAULT                 */\n  %LIL %NOLIL                /* NOLIL IS THE DEFAULT                 */\n  %LINECNT=,                 /* 55 IS THE DEFAULT                    */\n  %LSTONLY %LSTCOMP %NOLST   /* NOLST IS THE DEFAULT                 */\n  %NAME %NONAME              /* NONAME IS THE DEFAULT                */\n  %NUM %NONUM                /* NUM IS THE DEFAULT                   */\n  %OPTIMIZE %OPT %NOOPT      /* NOOPT IS THE DEFAULT                 */\n  %PMAP %NOPMAP              /* NOPMAP IS THE DEFAULT                */\n  %RENT %NORENT              /* NORENT IS THE DEFAULT                */\n  %RPT=,                     /* =NEW   IS THE DEFAULT                */\n  %SDS %NOSDS                /* NOSDS  IS THE DEFAULT                */\n  %SEQ %NOSEQ                /* NOSEQ  IS THE DEFAULT                */\n  %SIZE=,                    /* SIZE STD IS THE DEFAULT              */\n  %SOURCE %NOSOURCE          /* SOURCE IS THE DEFAULT                */\n  %SPACE1 %SPACE2 %SPACE3    /* SPACE1 IS THE DEFAULT                */\n  %STATE %NOSTATE            /* NOSTATE IS THE DEFAULT               */\n  %SUPMAP %NOSUPMAP          /* SUPMAP IS THE DEFAULT                */\n  %SXREF %NOSXREF            /* SXREF IS THE DEFAULT                 */\n  %SSIN=,                    /*                                      */\n  %SSOUT=,                   /*                                      */\n  %TERM %NOTERM              /* NOTERM IS THE DEFAULT                */\n  %SYMDMP=,%NOSYMDMP         /* NOSYMDMP IS THE DEFAULT              */\n  %TEST=,%NOTEST             /* NOTEST IS THE DEAFULT                */\n  %TRAP %TRAPC               /* TRAP IS THE DEFAULT                  */\n  %TRUNC %NOTRUNC            /* NOTRUNC IS THE DEFAULT               */\n  %VBREF %NOVBREF            /* NOVBREF IS THE DEFAULT               */\n  %VERB %NOVERB              /* NOVERB IS THE DEFAULT                */\n  %XREF %NOXREF              /* XREF  IS THE DEFAULT                 */\n  %ZWB %NOZWB,               /* ZWB IS THE DEFAULT                   */\n  %NOLINKQ                   /* NO LINK QUESTION. IF \"COMPILE AND    */\n                             /* LINK\" IS CALLED, THE COMPILE MACRO   */\n                             /* CALLS THE LINK MACRO, THEREFORE DON'T*/\n                             /* ASK USER IF HE WANTS TO LINK         */\n  );\n/*********************************************************************/\n/*          INITIALISE SOME INTERNAL SYMBOLS FOR THIS MACRO          */\n/*          SET NOPANEL AS THE DEFAULT WHEN NOT IN TSO MODE          */\n/*                                                                   */\nDCL %ANS     INIT '' ;\nDCL %PTYPE   INIT '' ;\nDCL %OBJCAT  INIT 'DISPLAY ''                      ''' ;\nDCL %PRTCAT  INIT 'DISPLAY ''                      ''' ;\n/*                                                                   */\nIF %TSOCLASS = '' THEN %NOPANEL = 'NOPANEL' ;\n/*********************************************************************/\n/*                                                                   */\n/*           PROCESS COBOL MACRO PARAMETERS                          */\n/*                                                                   */\nDCL %PARM INIT '';\n   IF %BUF     \u00ac= '' THEN %PARM = 'BUF=%BUF';\n   IF %NOOBJ   \u00ac= '' THEN %OBJ  = 'NULLFILE';\n   IF %APOST   \u00ac= '' THEN %PARM = '%PARM,%APOST';\n   IF %QUOTE   \u00ac= '' THEN %PARM = '%PARM,%QUOTE';\n   IF %BATCH   \u00ac= '' THEN %PARM = '%PARM,BATCH';\n   IF %NOBATCH \u00ac= '' THEN %PARM = '%PARM,NOBATCH';\n   IF %CDECK   \u00ac= '' THEN %PARM = '%PARM,CDECK';\n   IF %NOCDECK \u00ac= '' THEN %PARM = '%PARM,NOCDECK';\n   IF %CHECK   \u00ac= '' THEN %PARM = '%PARM,CHECK';\n   IF %NOCHECK \u00ac= '' THEN %PARM = '%PARM,NOCHECK';\n   IF %CLIST   \u00ac= '' THEN %PARM = '%PARM,CLIST';\n   IF %NOCLIST \u00ac= '' THEN %PARM = '%PARM,NOCLIST';\n   IF %CLIST = '' & %NOCLIST = '' THEN %PARM = '%PARM,CLIST';\n   IF %COPY    \u00ac= '' THEN %PARM = '%PARM,COPY' ;\n   IF %NOCOPY  \u00ac= '' THEN %PARM = '%PARM,NOCOPY';\n /*IF %COPY = '' & %NOCOPY = '' THEN %PARM = '%PARM,COPY'; */\n   IF %COUNT   \u00ac= '' THEN %PARM = '%PARM,COUNT';\n   IF %NOCOUNT \u00ac= '' THEN %PARM = '%PARM,NOCOUNT';\n   IF %CYNTAX \u00ac= '' THEN %PARM = '%PARM,CSYNTAX';\n   IF %NOCYNTAX \u00ac= '' THEN %PARM = '%PARM,NOCSYNTAX';\n   IF %DECNT   \u00ac= '' THEN %PARM = '%PARM,DECNT=%DECNT';\n   IF %DMAP    \u00ac= '' THEN %PARM = '%PARM,DMAP';\n   IF %NODMAP  \u00ac= '' THEN %PARM = '%PARM,NODMAP';\n   IF %DYNAM   \u00ac= '' THEN %PARM = '%PARM,DYNAM';\n   IF %NODYNAM \u00ac= '' THEN %PARM = '%PARM,NODYNAM';\n   IF %DYNAM = '' & %NODYNAM = '' THEN %PARM = '%PARM,DYNAM';\n   IF %FLAGW   \u00ac= '' THEN %PARM = '%PARM,FLAGW';\n   IF %FLAGE   \u00ac= '' THEN %PARM = '%PARM,FLAGE';\n   IF %FLOW    \u00ac= '' THEN %PARM = '%PARM,FLOW';\n   IF %NOFLOW  \u00ac= '' THEN %PARM = '%PARM,NOFLOW';\n   IF %IDENT   \u00ac= '' THEN %PARM = '%PARM,IDENT';\n   IF %NOIDENT \u00ac= '' THEN %PARM = '%PARM,NOIDENT';\n   IF %LCOL1   \u00ac= '' THEN %PARM = '%PARM,LCOL1';\n   IF %LCOL2   \u00ac= '' THEN %PARM = '%PARM,LCOL2';\n   IF %LIL     \u00ac= '' THEN %PARM = '%PARM,LIL';\n   IF %NOLIL   \u00ac= '' THEN %PARM = '%PARM,NOLIL';\n   IF %LINECNT \u00ac= '' THEN %PARM = '%PARM,LINECNT=%LINECNT';\n   IF %LSTONLY \u00ac= '' THEN %PARM = '%PARM,LSTONLY';\n   IF %LSTCOMP \u00ac= '' THEN %PARM = '%PARM,LSTCOMP';\n   IF %NOLST   \u00ac= '' THEN %PARM = '%PARM,NOLST';\n   IF %NAME    \u00ac= '' THEN %PARM = '%PARM,NAME';\n   IF %NONAME  \u00ac= '' THEN %PARM = '%PARM,NONAME';\n   IF %NUM     \u00ac= '' THEN %PARM = '%PARM,NUM';\n   IF %NONUM   \u00ac= '' THEN %PARM = '%PARM,NONUM';\n   IF %OPTIMIZE\u00ac= '' THEN %PARM = '%PARM,OPTIMIZE';\n   IF %OPT     \u00ac= '' THEN %PARM = '%PARM,OPTIMIZE';\n   IF %NOOPT   \u00ac= '' THEN %PARM = '%PARM,NOOPT';\n   IF %PMAP    \u00ac= '' THEN %PARM = '%PARM,PMAP';\n   IF %NOPMAP  \u00ac= '' THEN %PARM = '%PARM,NOPMAP';\n   IF %RENT    \u00ac= '' THEN %PARM = '%PARM,RENT';\n   IF %NORENT  \u00ac= '' THEN %PARM = '%PARM,NORENT';\n   IF %RPT     \u00ac= '' THEN %PARM = '%PARM,RPT=%RPT';\n   IF %SDS     \u00ac= '' THEN %PARM = '%PARM,SDS';\n   IF %NOSDS   \u00ac= '' THEN %PARM = '%PARM,NOSDS';\n   IF %SEQ     \u00ac= '' THEN %PARM = '%PARM,SEQ';\n   IF %NOSEQ   \u00ac= '' THEN %PARM = '%PARM,NOSEQ';\n   IF %SIZE    \u00ac= '' THEN %PARM = '%PARM,SIZE=%SIZE';\n   IF %SOURCE  \u00ac= '' THEN %PARM = '%PARM,SOURCE';\n   IF %NOSOURCE\u00ac= '' THEN %PARM = '%PARM,NOSOURCE';\n   IF %SOURCE = '' & %NOSOURCE = '' THEN %PARM = '%PARM,SOURCE';\n   IF %SPACE1  \u00ac= '' THEN %PARM = '%PARM,SPACE1';\n   IF %SPACE2  \u00ac= '' THEN %PARM = '%PARM,SPACE2';\n   IF %SPACE3  \u00ac= '' THEN %PARM = '%PARM,SPACE3';\n   IF %STATE   \u00ac= '' THEN %PARM = '%PARM,STATE';\n   IF %NOSTATE \u00ac= '' THEN %PARM = '%PARM,NOSTATE';\n   IF %SUPMAP  \u00ac= '' THEN %PARM = '%PARM,SUPMAP';\n   IF %NOSUPMAP\u00ac= '' THEN %PARM = '%PARM,NOSUPMAP';\n   IF %SXREF   \u00ac= '' THEN %PARM = '%PARM,SXREF';\n   IF %NOSXREF \u00ac= '' THEN %PARM = '%PARM,NOSXREF';\n   IF %SXREF = '' & %NOSXREF = '' THEN %PARM = '%PARM,SXREF';\n   IF %SYMDMP  \u00ac= '' THEN %PARM = '%PARM,SYMDMP';\n   IF %NOSYMDMP\u00ac= '' THEN %PARM = '%PARM,NOSYMDMP';\n   IF %TERM    \u00ac= '' THEN %PARM = '%PARM,TERM';\n   IF %NOTERM  \u00ac= '' THEN %PARM = '%PARM,NOTERM';\n   /*                                            */\n   /* TEST AND SYMDMP ARE EXCLUSIVE - DEFAULT TO */\n   /* SYMDMP IF BOTH ARE CODED FOR THIS MACRO    */\n   /*                                            */\n   IF %TEST \u00ac= '' & %SYMDMP \u00ac= '' THEN %TEST = '' ;\n   IF %TEST    \u00ac= '' THEN %PARM = '%PARM,TEST';\n   IF %NOTEST  \u00ac= '' THEN %PARM = '%PARM,NOTEST';\n   IF %TRAP    \u00ac= '' THEN %PARM = '%PARM,TRAP';\n   IF %TRAPC   \u00ac= '' THEN %PARM = '%PARM,TRAPC';\n   IF %TRUNC   \u00ac= '' THEN %PARM = '%PARM,TRUNC';\n   IF %NOTRUNC \u00ac= '' THEN %PARM = '%PARM,NOTRUNC';\n   IF %VBREF   \u00ac= '' THEN %PARM = '%PARM,VBREF';\n   IF %NOVBREF \u00ac= '' THEN %PARM = '%PARM,NOVBREF';\n   IF %VERB    \u00ac= '' THEN %PARM = '%PARM,VERB';\n   IF %NOVERB  \u00ac= '' THEN %PARM = '%PARM,NOVERB';\n   IF %XREF    \u00ac= '' THEN %PARM = '%PARM,XREF';\n   IF %NOXREF  \u00ac= '' THEN %PARM = '%PARM,NOXREF';\n   IF %ZWB     \u00ac= '' THEN %PARM = '%PARM,ZWB';\n   IF %NOZWB   \u00ac= '' THEN %PARM = '%PARM,NOZWB';\n   IF %LINK    \u00ac= '' THEN %LINK = 'Y';\nDCL %LNKLINE INIT '';\nIF %NOLINKQ = 'NOLINKQ' THEN DO ;  /* HAS THIS MACRO BEEN CALLED BY */\n   %LNKLINE = '//'; %LINK = 'N' ;  /* THE COMPILE AND LINK MACRO    */\nEND;\nELSE DO;                        /* IF NOT CALLED BY COMPILE AND LINK */\n    %LNKLINE =                  /* THEN LEAVE IT AS IT WAS.  PJC...  */\n  '(''        LINK ***** Y/N ****'',LINK,1,''%LINK'')   //';\nEND;\n/*                                                                   */\n/*                                                                   */\n/*********************************************************************/\n/*          SET OPTION FOR PRINT SYSOUT OR NOPRINT                   */\n/*          DEFAULT IS TO MSGCLASS                                   */\n/*                                                                   */\nIF %PRINT \u00ac= '' & %SYSOUT\u00ac='' THEN STOP 'PRINT AND SYSOUT CODED';\nIF %TSOCLASS \u00ac= '' THEN DCL %PFILE INIT 'SYSOUT %TSOCLASS';\n                   ELSE DCL %PFILE INIT 'SYSOUT *';\nIF %PRINT    \u00ac= '' THEN %PFILE = '%PRINT';\nIF %SYSOUT   \u00ac= '' THEN %PFILE = 'SYSOUT %SYSOUT';\nIF %NOPRINT  \u00ac= '' THEN %PFILE = 'NO PRINT REQUIRED';\n/********************************************************************/\n/*          SET UP COBOL COPY LIBRARY DEFAULT                       */\n/*                                                                  */\nIF %LIB = '' THEN %LIB = 'NOT REQUIRED' ;\n/********************************************************************/\n/*          SET OPTION FOR SYMDMP NOSYMDMP OR TEST NOTEST           */\n/*          DEFAULT IS NOSYMDMP NOTEST                              */\n/*                                                                  */\nDCL %SYMFILE INIT '';\nDCL %SYMLINE INIT '';\nIF %SYMDMP \u00ac='' THEN\n   DO;\n      %SYMFILE = '%SYMDMP' ;\n      %SYMDMP  = 'SYSUT5  UPDATES COBSYMS' ;\n      %SYMLINE = '(''YOUR SYM FILE WILL BE =======>'',SYMFILE,44,\n      ''%SYMFILE'')';\n   END;\n/********************************************************************/\nIF %TEST \u00ac='' THEN\n   DO;\n      %SYMFILE = '%TEST' ;\n      %TEST = 'SYSUT5  UPDATES COBSYMS' ;\n      %SYMLINE = '(''YOUR SYM FILE WILL BE =======>'',SYMFILE,44,\n      ''%SYMFILE'')';\n   END;\n/********************************************************************/\n/*          SET DSN OR DSID FOR COMPILER INPUT                      */\n/*          DEFAULT IS SYSPREF.COBOL                                */\n/*                                                                  */\nDCL %DSIN INIT '%SYSPREF.COBOL';\nDCL %MEM INIT  '';\nIF %LIST(1) \u00ac= '' THEN\n   DO;\n      %DSIN = '%LIST(1)';\n      DCL %###X INIT '';\n      DCL %###L INIT '';\n      %###X = INDEX(DSIN,'(');\n      IF %###X \u00ac= 0 THEN\n         DO;\n            %MEM = SUBSTR(DSIN,%###X);\n            %MEM = SUBSTR(MEM,2);\n            %###L = LENGTH(MEM);\n            %###L = %###L - 1;\n            %MEM = SUBSTR(MEM,1,%###L);\n            %###X = %###X - 1;\n            %DSIN = SUBSTR(DSIN,1,%###X);\n            %###X = '';\n         END;\n   END;\n/********************************************************************/\n/*              JOL COBOL COMMAND PANEL                             */\n/*                                                                  */\nIF %NOPANEL = '' THEN\n   PANEL\n   ('             *****  JOL COBOL COMMAND *****              ')\n   ('          ANY HIGHLIGHTED FIELD CAN BE CHANGED           ')\n   ('COMPILER OPTIONS CAN BE CHANGED OR ADDED TO - COMMAS REQD')\n   ('        ALL DATA SET NAMES MUST BE FULLY QUALIFIED       ') //\n   %LNKLINE\n   ('SOURCE DATA SET =============>',DSIN,44,'%DSIN')\n   ('SOURCE DATA SET MEMBER ======>',MEM,44,'%MEM')\n   ('OBJECT DATA SET =============>',OBJ,44,'%OBJ')\n   ('COPY LIBRARY(S) =============>',LIB,80,'%LIB')\n   ('PRINTER OPTION ==============>',PFILE,44,'%PFILE')\n   %SYMLINE\n   ('COMPILER OPTIONS ============>',PARM,100,'%PARM')\n   ('*************************************************************');\n/*                                                                  */\n/********************************************************************/\n/*            SET INPUT TO THE COMPILER                             */\n/*                                                                  */\nDCL %LINKMEM INIT '' ;\nIF %MEM \u00ac= '' THEN\n   DO;\n      %DSIN = '%DSIN(%MEM)';\n      %LOADMEM = 'NAME %MEM' ;\n   END;\nDCL INP DS DSN %DSIN NODEF;\n/*********************************************************************/\n/*            SET UP OBJECT CODE DATASET                             */\n/*            DEFAULT IS AN EXISTING DATASET                         */\n/*                                                                   */\nDCL %OBJFILE INIT '' ;\nDCL %SYSLIN  INIT '' ;\nIF %OBJ = '&&OBJ' THEN                 /* DEFAULT TO TEMP OBJECT     */\nDO;                                    /* WITH DSID OF OBJ           */\n   %OBJ     = 'OBJ' ;\n   %OBJFILE = 'OBJ' ;\n   DCL OBJ DS DSN &&OBJ BLKSIZE 800 5 CYLS NORLSE SYSDA EXT;\n   %SYSLIN  = 'MODS';\nEND;\nELSE                                   /* OBJECT DATASET DSID OR DSN */\nDO;\n   %PTYPE = INDEX(OBJ,'.');\n   IF %PTYPE = 0 THEN                  /* DSID FOR OBJECT DATASET    */\n   DO;                                 /* ASSUME NEW AND CATALOG IT  */\n      %OBJFILE = 'OBJ2' ;\n      DCL OBJ2 DS LIKE %OBJ ;\n      %SYSLIN  = 'WRITES' ;\n      %OBJCAT  = 'CATALOGUE OBJ2' ;\n   END;\n   IF %PTYPE \u00ac= 0 & %NOPANEL \u00ac= '' THEN /* DSN FOUND AND PANEL OFF   */\n   DO;                                  /* SO ASSUME OLD DSN USED    */\n      %OBJFILE = 'OBJ2' ;\n      DCL OBJ2 DS DSN %OBJ NODEF ;\n      %SYSLIN = 'UPDATES' ;\n   END;\n   IF %PTYPE \u00ac= 0 & %NOPANEL = '' THEN /* DSN FOUND AND PANEL ON     */\n   DO;                                 /* SO WE CAN GET MORE INFO    */\n      PANEL\n      ('         ***** JOL COBOL COMMAND *****               ') ///\n      ('YOU HAVE SPECIFIED AN OBJECT DATASET FOR THIS COMPILE') ///\n      ('IS THIS DATA SET CATALOGUED ********* Y/N',ANS,1)       ///\n      ('**********************************************************');\n      %OBJFILE = 'OBJ2';\n      IF %ANS = 'Y' THEN               /* OBJECT DSN IS CATALOGUED   */\n      DO;                              /* SO DECLARE IT AS OLD       */\n         DCL OBJ2 DS DSN %OBJ NODEF;\n         %SYSLIN = 'UPDATES';\n      END;\n      ELSE                             /* NEW DSN FOUND SO TELL      */\n      DO;                              /* USER AND CATALOGUE IT      */\n         PANEL\n         ('      *****  JOL COBOL COMMAND *****             ') ///\n         ('   ANY HIGHLIGHTED FIELD CAN BE CHANGED          ') ///\n         ('YOUR OBJECT DATA SET DEFINITION IS AS FOLLOWS    ') ///\n         ('',DCLDEF,99,\n          'DCL OBJ2 DS DSN %OBJ SYSDA 5,3 TRKS FB 80,3040 EXT') ///\n         ('********************************************************');\n         %SYSLIN = 'WRITES' ;\n         %OBJCAT = 'CATALOGUE OBJ2' ;\n         %DCLDEF;\n      END;\n      %ANS = '';\n   END;\n   %PTYPE = '' ;\nEND;\n/********************************************************************/\n/*               SET UP PRINTED OUTPUT OR PRINT DATASET             */\n/*                                                                  */\nDCL %OUTDISP INIT '' ;\n%PTYPE = SUBSTR(PFILE,1,6);\nIF %PTYPE = 'SYSOUT' THEN              /* SYSOUT CLASS DEFINED      */\n   DO;\n      DCL PRT %PFILE;\n      %SYSOUT = '%PFILE';\n      %PTYPE = 1;\n      %OUTDISP = 'WRITES';\n   END;\nIF %PTYPE = 'NO PRI' THEN               /* NOPRINT OPTION CODED      */\n   DO;\n      DCL PRT DS DUMMY NODEF;\n      %PTYPE = 1;\n      %OUTDISP = 'WRITES';\n   END;\nIF %PTYPE \u00ac= 1 THEN                     /* PRINT DSN OR DSID CODED   */\nDO;\n   %PTYPE = INDEX(PFILE,'.');\n   IF %PTYPE = 0 THEN                   /* DSID FOR PRINT DATASET    */\n   DO;                                  /* ASSUME NEW AND CATALOG IT */\n      DCL PRT LIKE %PFILE ;\n      %OUTDISP = 'WRITES' ;\n      %PRTCAT  = 'CATALOGUE PRT' ;\n   END;\n   IF %PTYPE \u00ac= 0 & %NOPANEL \u00ac= '' THEN /* DSN FOUND AND PANEL OFF   */\n   DO;                                  /* SO ASSUME OLD DSN USED    */\n      DCL PRT DS DSN %PFILE NODEF ;\n      %OUTDISP = 'UPDATES';\n   END;\n   IF %PTYPE \u00ac= 0 & %NOPANEL = ''  THEN /* DSN FOUND AND PANEL ON    */\n   DO;                                  /* SO WE CAN GET MORE INFO   */\n      PANEL\n      ('       ***** JOL COBOL COMMAND  *****')                ///\n      ('YOU HAVE SPECIFIED A PRINT DATASET FOR THIS COMPILE ') ///\n      ('IS THIS DATASET ALREADY CATALOGUED *** Y/N',ANS,1)     ///\n      ('*********************************************************');\n      IF %ANS = 'Y' THEN               /* PRINT DSN IS CATALOGUED    */\n      DO;                              /* SO DECLARE IT AS OLD       */\n         DCL PRT DS DSN %PFILE NODEF;\n         %OUTDISP = 'UPDATES';\n      END;\n      ELSE                              /* NEW DSN FOUND SO TELL     */\n      DO;                               /* USER AND CATALOGUE IT     */\n         PANEL\n         ('        ***** JOL COBOL COMMAND  *****           ')\n         ('      ANY HIGHLIGHTED FIELD CAN BE CHANGED       ') ///\n         ('YOUR OUTLIST DATA SET DEFINITION IS AS FOLLOWS   ')\n         ('',DCLDEF,80,\n          'DCL PRT DS DSN %PFILE SYSDA 5,3 TRKS VBA 136,6144 EXT') ///\n         ('********************************************************');\n         %OUTDISP = 'WRITES';\n         %DCLDEF;\n         %PRTCAT = 'CATALOGUE PRT';\n      END;\n      %ANS = '';\n   END;\n   %PTYPE = '' ;\n   %QTYPE = '' ;\nEND;\n/********************************************************************/\n/*                SET UP COBOL COPY LIBRARY                         */\n/*                                                                  */\nIF %LIB \u00ac= 'NOT REQUIRED'\nTHEN DO;\n      DCL LIB DS %LIB  NODEF;\n      %LIB = 'SYSLIB READS LIB';\n   END;\nELSE %LIB = '';\n/********************************************************************/\n/*               SYMDMP OR TEST SYMFILE                             */\n/*                                                                  */\n%QTYPE = INDEX(SYMFILE,'(') ;\nIF %TEST \u00ac= '' | %SYMDMP \u00ac= '' THEN\n   DO;\n      IF %QTYPE = 0 THEN DCL COBSYMS DS %SYMFILE(%MEM) NODEF;\n      ELSE DCL COBSYMS DS %SYMFILE NODEF;\n   END ;\n%QTYPE = '' ;\nIF %SYMFILE \u00ac= '' & %NOPANEL = '' THEN\n   PANEL\n   ('        ***** JOL COBOL COMMAND *****                 ') ///\n   ('YOU HAVE SPECIFIED A SYM FILE FOR THIS COMPILE.    ')\n   ('THE DATASET MUST BE AN EXISTING CATALOGUED DATASET.')\n   ('IT SHOULD BE A PARTITIONED DATASET RECFM F 512 512 ')\n   ('SPACE = 3,3,1 TRKS IS USUALLY ENOUGH.              ')\n   ('JOL WILL CREATE A NEW MEMBER.                      ')///\n   ('***************************************************',SYM,1);\n/********************************************************************/\n/*               SET UP COMPILER WORK FILES                         */\n/*                                                                  */\nDCL DS002  DS  5 CYLS  SYSDA NORLSE NODCB;\nDCL DS003  DS  5 CYLS  SYSDA NORLSE NODCB;\nDCL DS004  DS  5 CYLS  SYSDA NORLSE NODCB;\nDCL DS005  DS  5 CYLS  SYSDA NORLSE NODCB;\n/********************************************************************/\n/*               DECLARE COBOL COMPILER                             */\n/*                                                                  */\nIF %STEPLIB \u00ac= '' THEN %STEPLIB = 'STEPLIB READS %STEPLIB';\nPROG01:  DCL IKFCBL00 PROG  768 K\n         %STEPLIB\n         SYSIN    READS    INP\n         SYSLIN   %SYSLIN  %OBJFILE\n         SYSPRINT %OUTDISP PRT\n         %LIB\n         SYSUT1   WRITES   DS002\n         SYSUT2   WRITES   DS003\n         SYSUT3   WRITES   DS004\n         SYSUT4   WRITES   DS005\n         %SYMDMP\n         %TEST\n         ;\n/********************************************************************/\n/*                   RUN COBOL COMPILER                             */\n/*                                                                  */\nCOB:     RUN PROG01 '%PARM';\n/********************************************************************/\n/*        CATALOG PRINT AND OBJECT DATASETS IF NECESSARY            */\n/*                                                                  */\nIF COB < 8 THEN\n   DO;\n   /* IF %PRTCAT\u00ac='' THEN %PRTCAT  ;\n      IF %OBJCAT\u00ac='' THEN %OBJCAT ;   */\n   /* DISPLAY 'COBOL RETURNED LESS THAN 8';  */\n   END;\n/********************************************************************/\n/*                  CALL LINK MACRO IF REQUIRED                     */\n/*                                                                  */\nIF COB < 12 & %LINK = 'Y' THEN\n   LINK %NOPANEL '%OBJ' %LOADMEM COBLIB %SYSOUT COMP ;\n/********************************************************************/\n/*                  END OF COBOL MACRO                              */\n/*                                                                  */\nEND;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COLOUR": {"ttr": 8705, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "colour:macro;\n  /* This procedure displays the colours and asks the user\n     to specify which colours are to be used.  */\n\n     dcl %normal  init 17;\n     dcl %hightxt init 18;\n     dcl %backtxt init  1;\n\n\n     panel blue box /(hi ctr 'CAIJOL Color Selection Menu')\n     lm 10\n    /('You may choose the colors you would like to run the Computer'\n     ('Aided Instruction Course with.')\n    /('You specify the Normal Text colors, Highlighted Text Colors')\n     ('and the color of the Background.')\n    /('Please note that the color of the box drawn around the')\n     ('screens will always be blue.')\n    /('Because colors are very subjective, you will be able to')\n     ('experiment with a typical screen until you find the')\n     ('colors to satisfy you.')\n    /('The next screen shows a typical Jol Panel.  We will use')\n     ('it as an example for changing colors.')\n     ;\n\n     panel blue box /(hi ctr 'Typical Jol Screen')\n /('     COPY copies data from one data set to another. The data')\n  ('     may be organized sequentially, IS, or a library (a PDS or')\n  ('     partitioned data set).')\n /(hi '     Format:          /input \\      / output \\ ')\n  (hi '                COPY { dsid or} TO {  dsid or } options;')\n  (hi '                      \\dsname/      \\ dsname /  ')\n /('     The default, if no option is specified, is Sequential Data')\n  ('     Set COPY. Any data set may be copied. You may wish to copy')\n  ('     a data set for security reasons or you may wish to')\n  ('     duplicate your data, and perhaps send a copy to another user.')\n /('     Notes :  1. The data set from input dsid is copied into')\n  ('                 output dsid.')\n /(bright red\n '     The next screen is in color.  You can alter the colors soon.')\n  (bright green\n '     Press Enter to Continue')\n  ;\n\n bright white text;\n bright yellow highlights;\n black background;\n\nlabel colorx;\n     panel blue box /(hi ctr 'Typical Jol Screen')\n /('     COPY copies data from one data set to another. The data')\n  ('     may be organized sequentially, IS, or a library (a PDS or')\n  ('     partitioned data set).')\n /(hi '     Format:          /input \\      / output \\ ')\n  (hi '                COPY { dsid or} TO {  dsid or } options;')\n  (hi '                      \\dsname/      \\ dsname /  ')\n /('     The default, if no option is specified, is Sequential Data')\n  ('     Set COPY. Any data set may be copied. You may wish to copy')\n  ('     a data set for security reasons or you may wish to')\n  ('     duplicate your data, and perhaps send a copy to another user.')\n /('     Notes :  1. The data set from input dsid is copied into')\n  ('                 output dsid.')\n//(hi'     The next screen is the color selection menu.')\n///(flash bright red\n '       Press F3 when you are satisfied with your choice of colors')\n  ;\n\n     if %syspfk=3 then exit;\n\n     panel blue box /(hi ctr 'Colors Available')\n     lm 8\n   / ('You may use the following Background Colours:')\n     (normal\n               '           1  Black   '\n      blue     '           2  Blue    ')\n     (normal\n      cyan     '           3  Cyan    '\n      green    '           4  Green   ')\n     (normal\n      magenta  '           5  Magenta '\n      red      '           6  Red     ')\n     (normal\n      white    '           7  White   '\n      yellow   '           8  Yellow  ')\n\n     /\n     ('You may use the following Foreground Colours (plus the above):')\n\n\n     (       black    '          11 Bright Black   '\n      bright blue     '          12 Bright Blue    ')\n     (bright cyan     '          13 Bright Cyan    '\n      bright green    '          14 Bright Green   ')\n     (bright magenta  '          15 Bright Magenta '\n      bright red      '          16 Bright Red     ')\n     (bright white    '          17 Bright White   '\n      bright yellow   '          18 Bright Yellow  ')\n\n     /\n     ('Write the number of the color you wish to use for each area')\n     ('or Press F3 to start the Jol Course with the colors below.')\n    /('Normal Text Color ?            ==== > ',normal,2,\n       '%normal')\n     ('And Highlighted Text Color ?   ==== > ',hightxt,2,\n       '%hightxt')\n     ('And Background Color ?         ==== > ',backtxt,2,\n       '%backtxt')\n     ;\n\n     if %syspfk=3 then exit;\n\n     if %normal=1 then black   text;\n     if %normal=2 then blue    text;\n     if %normal=3 then cyan    text;\n     if %normal=4 then green   text;\n     if %normal=5 then magenta text;\n     if %normal=6 then red     text;\n     if %normal=7 then white   text;\n     if %normal=8 then yellow  text;\n     if %normal=11 then bright  black   text;\n     if %normal=12 then bright  blue    text;\n     if %normal=13 then bright  cyan    text;\n     if %normal=14 then bright  green   text;\n     if %normal=15 then bright  magenta text;\n     if %normal=16 then bright  red     text;\n     if %normal=17 then bright  white   text;\n     if %normal=18 then bright  yellow  text;\n\n     if %hightxt=1 then black   highlights;\n     if %hightxt=2 then blue    highlights;\n     if %hightxt=3 then cyan    highlights;\n     if %hightxt=4 then green   highlights;\n     if %hightxt=5 then magenta highlights;\n     if %hightxt=6 then red     highlights;\n     if %hightxt=7 then white   highlights;\n     if %hightxt=8 then yellow  highlights;\n     if %hightxt=11 then bright  black   highlights;\n     if %hightxt=12 then bright  blue    highlights;\n     if %hightxt=13 then bright  cyan    highlights;\n     if %hightxt=14 then bright  green   highlights;\n     if %hightxt=15 then bright  magenta highlights;\n     if %hightxt=16 then bright  red     highlights;\n     if %hightxt=17 then bright  white   highlights;\n     if %hightxt=18 then bright  yellow  highlights;\n\n     if %backtxt=1 then black   background;\n     if %backtxt=2 then blue    background;\n     if %backtxt=3 then cyan    background;\n     if %backtxt=4 then green   background;\n     if %backtxt=5 then magenta background;\n     if %backtxt=6 then red     background;\n     if %backtxt=7 then white   background;\n     if %backtxt=8 then yellow  background;\n     redo colorx;\n\n\n end;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COMPARE": {"ttr": 8709, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "   COMPARE : MACRO(%PDS,%PO);\n   DCL %X INIT '2';\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n  if %list(1) = ''   & %panels \u00ac= 'OFF'\n  then do;\n     list0001='';\n     list0002='';\n     pdstyp  ='N';\n\n     panel       (ctr    'Compare Command')\n                 (hi ctr '---------------')\n           ///////\n           ('      Enter Name of First File        ===> ',list0001,\n                       44,'%list0001')\n           ('      And Name of Second File         ===> ',list0002,\n                       44,'%list0002')\n           ('      Are These Partitioned Data Sets ===> ',pdstyp,\n                       3,'%pdstyp')\n           helpline('Press F3 to Leave without Comparing Files');\n chkpan:\n\n     if %syspfk = 3 then exit;\n\n     if %list(1) = ''\n     then do;\n          panel reread from list0001 'Please Enter First File Name';\n          redo chkpan;\n     end;\n     if %list(2) = ''\n     then do;\n          panel reread from list0002 'Please Enter Second File Name';\n          redo chkpan;\n     end;\n     if %pdstyp = '' | (%pdstyp \u00ac= 'Y' & %pdstyp \u00ac='N')\n     then do;\n          panel reread from pdstyp   'Please ''Y'' or ''N''';\n          redo chkpan;\n     end;\n\n     if %pdstyp = 'Y' then %pds='PDS';\n     if %pdstyp = 'N' then %pds='';\n\n\n  end;\n\n   IF %LIST(2)='TO' | %LIST(2)='WITH' THEN %X=3;\n   IF %PO='PO' | %PDS='PDS'\n   THEN DO; DCL CNTL *;\n   COMPARE TYPORG=PO\nEOF;\n  end;\n  else dcl cntl ds dummy nodcb;\n  dcl iebcompr prog\n        sysprint writes printer\n        sysin reads cntl\n        sysut1 reads %list(1)\n        sysut2 reads %list(%x);\n  dcl printer printer nodcb;\n    run iebcompr;\n      end;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COMPAREO": {"ttr": 8711, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  COMPARE : MACRO(%PDS,%PO);\n  DCL %X INIT '2';\n  IF %LIST(2)='TO' | %LIST(2)='WITH' THEN %X=3;\n  IF %PO='PO' | %PDS='PDS'\n  THEN DO; DCL CNTL *;\n  COMPARE TYPORG=PO\nEOF;\n END;\n ELSE DCL CNTL DS DUMMY NODCB;\n DCL IEBCOMPR PROG\n       SYSPRINT WRITES PRINTER\n       SYSIN READS CNTL\n       SYSUT1 READS %LIST(1)\n       SYSUT2 READS %LIST(%X);\n DCL PRINTER PRINTER NODCB;\n   RUN IEBCOMPR;\n     END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPILE": {"ttr": 8713, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "   /* THIS IS THE JOL COMPILE COMMAND  */\n   /* USING THE REGISTER COMMAND, ONE CAN DEFINE TO JOL PROGRAM\n      CHARACTERISTICS AND OTHER DETAILS OF THESE PROGRAMS, SUCH AS\n      THE LANGUAGE THEY ARE CODED IN, COMPILER OPTIONS NORMALLY USED,\n      INPUTS AND OUTPUTS AND SO ON.\n\n      THEN THE JOL COMPILE, AND EXEC COMMANDS CAN BE SIMPLY USED TO\n      COMPILE, LINK AND RUN THESE PROGRAMS.\n\n      FOR EXAMPLE, THE COMMAND\n\n           REGISTER MASTUPDT  LANG PLI\n                    FUNC 'THIS PROGRAM UPDATES PAYROLL'\n                    COMPOPT 'NEST,GOSTMT'\n                    LINKOPT 'LIST,MAP'\n                    SOURCE 'APPL.SOURCE.LIB'\n                    COPYLIB 'APPL.COPY.LIB'\n                    LOAD 'APPL.LOADLIB'\n                    FILES  'MASTIN READS,MASTOUT WRITES';\n\n           WILL REGISTER THE PROGRAM TO JOL.\n\n      WHENEVER THE PROGRAM IS TO BE COMPILED, IT IS SIMPLY A\n      MATTER OF CODING:-\n\n          COMPILE MASTUPDT;\n\n      AND THE PROGRAM WILL BE COMPILED.\n\n      TO EXECUTE THE PROGRAM, SIMPLY CODE THE FOLLOWING:-\n\n          EXEC MASTUPDT 'INPUT.MASTER' 'TRANS.INPUT' 'MASTER.OUT'\n               PRINTER;\n\n       OR\n\n         DCL INPUT   DS INPUT.MASTER;\n         DCL OUTPUT  DS OUTPUT.MASTER VB 70,7000 SYSDA 10 CYLS;\n         DCL TRANSIN DS TRANS.INPUT;\n         DCL PRT     PRINTER B FORM 100 FBA 121,1210;\n         EXEC MASTUPDT INPUT,TRANSIN,OUTPUT,PRT;\n\n      IT WILL EVEN BE POSSIBLE TO HAVE STANDARD DEFAULT DATA SETS\n      THAT THE PROGRAM WILL USE, UNLESS OVER-RIDDEN, THUS IT IS\n      POSSIBLE TO SIMPLY CODE:-\n\n          EXEC MASTUPDT;\n\n     TO HAVE THE PROGRAM EXECUTED. (NOT THIS VERSION!!!!).\n\n     SEE THE JOL DOCUMENTATION FOR FURTHER DETAILS.\n\n  */\n  COMPILE:MACRO(\n         %COMPOPT=,           /*ORIGINALLY SET UP WITH 'REGISTER'   */\n         %LINKOPT=,           /*ORIGINALLY SET UP WITH 'REGISTER'   */\n         %COPYLIB=,           /*ORIGINALLY SET UP WITH 'REGISTER'   */\n         %SOURCE=,            /*ORIGINALLY SET UP WITH 'REGISTER'   */\n         %LOAD=,              /*ORIGINALLY SET UP WITH 'REGISTER'   */\n         %ALWAYS,             /*IF ALWAYS CODED, LINK CAN BE DONE   */\n                              /*EVEN IF COMPILE ERRORS OCCURRED.    */\n         %NAME=,              /*NAME TO BE GIVEN TO LOAD MODULE (IF */\n                              /*        DIFFERENT TO PROGRAM NAME). */\n         %SSI='');\n\n   DCL %$PLI,%$COB,%$ASM,%$FORT  INIT ''    ; /* USED TO COMMUNICATE\n                               LANGUAGES USED BETWEEN MACROS */\n   DCL %O1,%O2,%O3,%O4,%O5,%O6,%O7,%O8,%O9,%O10,\n       %O11,%O12,%O13,%O14,%O15,%O16,%O17,%O18,%O19,%O20,\n       %O21,%O22,%O23,%O24,%O25\n                                 INIT '';\n   DCL %I1,%I2,%I3,%I4,%I5,%I6,%I7,%I8,%I9,%I10,\n       %I11,%I12,%I13,%I14,%I15,%I16,%I17,%I18,%I19,%I20,\n       %I21,%I22,%I23,%I24,%I25\n                                 INIT '';\n   DCL %ERROR,%PGMNAME,%OPTIONS,%T,%SUB     INIT '';\n   DCL %IF1, %IF2 INIT ''; /*USED IF MORE THAN ONE COMPILE SPECIFIED*/\n\n   %SUB=1;   /* SET SUBSCRIPT TO 1 INITIALLY   */\n   IF ((%LIST(1)='AND' | %LIST(1)='&') & %LIST(2) ='LINK')\n   THEN %SUB=3;\n   ELSE IF %LIST(2)='LINK' THEN %SUB=2;\n   %PGMNAME='%LIST(%SUB)';\n   IF %PGMNAME='' THEN DO;\n       WRITE 'ENTER PROGRAM NAME TO BE COMPILED'; READ PGMNAME;\n   END;\n   IF %COMPOPT\u00ac='' THEN %OPTIONS='%OPTIONS COMPOPT ''%COMPOPT''';\n   IF %COPYLIB\u00ac='' THEN %OPTIONS='%OPTIONS COPYLIB ''%COPYLIB''';\n   IF %PGMNAME\u00ac='' THEN DO;\n     COMP1:$COMP %PGMNAME  %OPTIONS;\n     %IF1 = 'COMP1 <= 8 ';\n     END;\n   IF %LIST(%SUB+1) THEN DO;\n     COMP2:$COMP %LIST(%SUB+1)  %OPTIONS;\n     %IF1 = '%IF1 & COMP2 <= 8 ';\n     END;\n   IF %LIST(%SUB+2) THEN DO;\n     COMP3:$COMP %LIST(%SUB+2)  %OPTIONS;\n     %IF1 = '%IF1 & COMP3 <= 8 ';\n     END;\n   IF %LIST(%SUB+3) THEN DO;\n     COMP4:$COMP %LIST(%SUB+3)  %OPTIONS;\n     %IF1 = '%IF1 & COMP4 <= 8 ';\n     END;\n   IF %LIST(%SUB+4) THEN DO;\n     COMP5:$COMP %LIST(%SUB+4)  %OPTIONS;\n     %IF1 = '%IF1 & COMP5 <= 8 ';\n     END;\n   IF %LIST(%SUB+5) THEN DO;\n     COMP6:$COMP %LIST(%SUB+5)  %OPTIONS;\n     %IF1 = '%IF1 & COMP6 <= 8 ';\n     END;\n   IF %LIST(%SUB+6) THEN DO;\n     COMP7:$COMP %LIST(%SUB+6)  %OPTIONS;\n     %IF1 = '%IF1 & COMP7 <= 8 ';\n     END;\n   IF %LIST(%SUB+7) THEN DO;\n     COMP8:$COMP %LIST(%SUB+7)  %OPTIONS;\n     %IF1 = '%IF1 & COMP8 <= 8 ';\n     END;\n   IF %LIST(%SUB+8) THEN DO;\n     COMP9:$COMP %LIST(%SUB+8)  %OPTIONS;\n     %IF1 = '%IF1 & COMP9 <= 8 ';\n     END;\n   IF %LIST(%SUB+9) THEN DO;\n     COMP10:$COMP %LIST(%SUB+9)  %OPTIONS;\n     %IF2 = '& COMP10<= 8 ';\n     /* IF1 COULD BECOME TOO LONG HENCE %IF2 */\n     END;\n   IF %LIST(%SUB+10) THEN DO;\n     COMP11:$COMP %LIST(%SUB+10)  %OPTIONS;\n     %IF2 = '%IF2 & COMP11 <= 8 ';\n     END;\n   IF %LIST(%SUB+11) THEN DO;\n     COMP12:$COMP %LIST(%SUB+11)  %OPTIONS;\n     %IF2 = '%IF2 & COMP12 <= 8 ';\n     END;\n   IF %LIST(%SUB+12) THEN DO;\n     COMP13:$COMP %LIST(%SUB+12)  %OPTIONS;\n     %IF2 = '%IF2 & COMP13 <= 8 ';\n     END;\n   IF %LIST(%SUB+13) THEN DO;\n     COMP14:$COMP %LIST(%SUB+13)  %OPTIONS;\n     %IF2 = '%IF2 & COMP14 <= 8 ';\n     END;\n   IF %LIST(%SUB+14) THEN DO;\n     COMP15:$COMP %LIST(%SUB+14)  %OPTIONS;\n     %IF2 = '%IF2 & COMP15 <= 8 ';\n     END;\n   IF %LIST(%SUB+15) THEN DO;\n     COMP16:$COMP %LIST(%SUB+15)  %OPTIONS;\n     %IF2 = '%IF2 & COMP16 <= 8 ';\n     END;\n   IF %LIST(%SUB+16) THEN DO;\n     COMP17:$COMP %LIST(%SUB+16)  %OPTIONS;\n     %IF2 = '%IF2 & COMP17 <= 8 ';\n     END;\n   IF %LIST(%SUB+17) THEN DO;\n     COMP18:$COMP %LIST(%SUB+17)  %OPTIONS;\n     %IF2 = '%IF2 & COMP18 <= 8 ';\n     END;\n   IF %LIST(%SUB+18) THEN DO;\n     COMP19:$COMP %LIST(%SUB+18)  %OPTIONS;\n     %IF2 = '%IF2 & COMP19 <= 8 ';\n     END;\n   IF %LIST(%SUB+19) THEN DO;\n     COMP20:$COMP %LIST(%SUB+19)  %OPTIONS;\n     %IF2 = '%IF2 & COMP20 <= 8 ';\n     END;\n      /* END OF COMPILES  */\n   IF %SUB\u00ac=1   /* THEN LINK WAS FOUND IN PARAMETER LIST ABOVE */\n   THEN DO;\n        %OPTIONS=''; /*CLEAR OPTIONS LIST TEMPORARILY */\n        IF %$PLI\u00ac='' THEN %LINKOPT='%LINKOPT PLILIB PLIBASE';\n        IF %$COB\u00ac='' THEN %LINKOPT='%LINKOPT COBLIB';\n        IF %$FORT\u00ac='' THEN %LINKOPT='%LINKOPT FORTLIB';\n        IF %LINKOPT\u00ac='' THEN %OPTIONS='%OPTIONS LINKOPT ''%LINKOPT''';\n        IF %LOAD\u00ac='' THEN DO;\n            %T=TYPE(LOAD);\n            IF %T='LIT' THEN %OPTIONS='%OPTIONS LOAD = ''%LOAD''';\n            ELSE %OPTIONS='%OPTIONS LOAD = %LOAD';\n        END;\n        IF %LIB\u00ac='' THEN DO;\n            %T=TYPE(LIB);\n            IF %T='LIT' THEN %OPTIONS='%OPTIONS LIB = ''%LIB''';\n            ELSE %OPTIONS='%OPTIONS LIB = %LIB';\n        END;\n      IF %ALWAYS='ALWAYS' THEN\n         LINK:  LINK OBJ NAME=%PGMNAME LINK='YES' %OPTIONS;\n      IF %ALWAYS\u00ac='ALWAYS' THEN DO ;\n         IF %IF2 ='' THEN IF (%IF1)      THEN\n            LINK:  LINK OBJ NAME=%PGMNAME LINK='YES' %OPTIONS;\n         ELSE IF (%IF1 %IF2) THEN\n            LINK:  LINK OBJ NAME=%PGMNAME LINK='YES' %OPTIONS;\n      END;\n    END;\n   END /* COMPILE MACRO  */   ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPPC": {"ttr": 8717, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "compile:macro;\n/* Show Compilers Commands and allow selection by the User */\ndcl %command init('');\n\n    notconfg '%syscmd';\n    exit;\n\nloop:\npanel option caps;\npanel %boxcolor box\n menubar\n('Asm C Pascal plI Link                                     Help')\n/ (ctr %hedcolor  'Compiler Primary Menu')\n/\n(ctr'Place the first character of the command you wish to select in'\n    ' the box')\n(ctr'or code any command directly in the command line.')\n//\n(hi '  Command === > ',command,44,'%command') /* Leave last command */\n//\n('  The following Jol menus are available:')\n/(hi '    A  ' normal 'Asm:    Execute Masm, Rasm or Tasm.')\n\n (hi '    B  ' normal 'Basic:  Execute BASICA or QB.')\n\n (hi '    C  ' normal 'C:      Execute QC, TC or ZTC.')\n\n (hi '    P  ' normal 'Pascal: Execute TP or QC.')\n\n (hi '    L  ' normal 'Link:   Execute Blink, DRLink, Link, Tlink.')\n\n (hi '    I  ' normal 'PL/I:   Execute DR PL/I.')\n\n\n////  (ctr hi 'Note:'\n             normal ' You can use <Alt B>, <Alt R> etc as HotKeys')\n             normal ' or Enter the first letter for 3270 Terminals.')\nhelpline('Press F1 for Help Screen; F3 to Return To Jol Main Menu')\n;\n\nwaitin:\n\n    if syspfk=3 then do; cls; exit; end;\n    if syspfk\u00ac=0 & syspfk\u00ac=1 & sysmenu=''\n    then do;\n        panel reread;\n        goto waitin;\n    end;\n    if syspfk=1 then do;\n   panel %boxcolor box\n// (ctr %hedcolor 'Compiler/Linker Primary Menu Help Panel')\n/(ctr'Enter any Dos Command in the Command Line, or Select a Function.')\n/\n/(ctr'Jol will assist you if you enter any of the following commands')\n (ctr'without parameters:-')\n/(ctr bold 'BASIC, \"C\", MASM, RASM, PLI, PAS or PASCAL or LINK')\n/* (ctr bold 'LISTC (FULL Directory list all data set on Disk)')*/\n/(ctr 'Other functions may be selected with the menu, or you')\n (ctr 'can enter other commands - they will be executed.')\n//(ctr bold yellow 'NOTE')\n/\n (ctr 'If you press Enter ' hi 'without '\n   normal %txtcolor 'any Selection,')\n (ctr 'Jol will let you choose a Data Set from a sorted list')\n (ctr 'of Data Sets and use it as Input to ' hi 'any normal Command.')\n;\n        $comphlp;\n        goto loop;\n    end;\n\n\n    if command \u00ac=''\n    then do;\n        %command;\n        goto loop;\n    end;\n\n    If sysmenu='ASM'\n    then do;\n        popup  /* at 4 */\n           (     'Masm'                               ,masm)\n           (     'Rasm'                               ,rasm)\n           (     'Tasm'                               ,tasm)\n           ;\n    end;\n\n\n    If sysmenu='BASIC'\n    then do;\n        popup  /* at 16 */\n           (     'Basica (Interpreter) '              ,basica)\n           (     'QB (Compiler)        '              ,qb)\n           ;\n    end;\n\n\n    If sysmenu='C'\n    then do;\n        popup  /* at 20 */\n           (     'QC  (Microsoft Quick C) '           ,qc)\n           (     'TC  (Borland   Turboc C)'           ,tc)\n           (     'ZTC (Zortech C)         '           ,ztc)\n           ;\n    end;\n\n\n    If sysmenu='PASCAL'\n    then do;\n        popup  /* at 24 */\n           (     'QP  (Microsoft Quick Pascal) '      ,qp )\n           (     'TP  (Borland   Turboc Pascal) '     ,tp)\n           ;\n    end;\n\n\n    If sysmenu='LINK'\n    then do;\n        popup  /* at 28 */\n           (     'BLINK  (Zortech Linker) '           ,blink)\n           (     'DRLINK (Digital Research Linker)'   ,drlink)\n           (     'LINK   (Microsoft Linker)'          ,link)\n           (     'TLINK  (Borland Linker)'            ,tlink)\n           ;\n    end;\n\n\n    If sysmenu='PLI'\n    then do;\n        popup  /* at 32 */\n           (     'DRPLI  (Digital Research PLI)'      ,drpli)\n           (     'IBMPLI (IBM 370 PLI)'               ,ibmpli)\n           (     'MSPLI  (Microsoft PLI)'             ,ibmpli)\n           (     'TPLI   (Borland PLI)'               ,tpli)\n           ;\n    end;\n\n    goto loop;\n\nend;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COMPRESO": {"ttr": 8963, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x81\\x13\\x9f\\x00\\x81\\x13\\x9f\\x18\\x05\\x00?\\x00?\\x00\\x02\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1981-05-19T00:00:00", "modifydate": "1981-05-19T18:05:00", "lines": 63, "newlines": 63, "modlines": 2, "user": "JOL"}, "text": "COMPRESS:MACRO(%SHR);\n /* THIS JOL MACRO WILL COMPRESS UP TO 5 DATA SETS IN 1 GO\n       NOTE, UNLESS 'SHR' IS SPECIFIED,DATA SETS WILL GET AN 'OLD'\n DISPOSITION   */\n     /* DEFINE PRINTER AND WORK FILES FOR 'IEBCOPY' */\nDCL PRINTER PRINTER NODCB;\nDCL WORK1 DS 5 CYLS NODCB SYSDA;\nDCL WORK2 DS 5 CYLS NODCB SYSDA;\n  /* NOW AT LEAST ONE DATA SET MUST BE COMPRESSED, SO LET'S DEFINE\n A SYMBOLIC FOR THAT VARIABLE (LATER, IF MORE THAN 1, WE SHALL\n CONCATENATE OTHER ITEMS TO IT  */\n         IF %SHR='' THEN %SHR='UPDATES ';/* 'OLD' IF \u00ac'SHR' */\n         IF %SHR='SHR' THEN %SHR=' READS ';\nDCL %COMPDS INIT ' DD1 %SHR %LIST(1)'; /* 1ST DATA SET FIXED */\nDCL %COMP2,%COMP3,%COMP4,%COMP5 INIT '';\nDCL  %WK1,%WK2,%WK3,%WK4,%WK5 INIT '';\n         /* NOW FIND OUT HOW MANY DSIDS ETC THERE ARE, AND FIX 'EM UP*/\n         IF %LIST(2) THEN DO;      /* IF SECOND ITEM,DO FOLLOWING */\n            %COMP2=' DD2 %SHR %LIST(2) ';\n            %WK2=' COPY INDD=DD2,OUTDD=DD2';   /* 2ND CONTROL */\n         END;  /* OF DSID NUMBER 2 */\n         IF %LIST(3) THEN DO;      /* IF 3RD ITEM,DO FOLLOWING */\n            %COMP3=' DD3 %SHR %LIST(3) ';\n            %WK3=' COPY INDD=DD3,OUTDD=DD3';   /* 3RD CONTROL */\n         END;  /* OF DSID NUMBER 3 */\n         IF %LIST(4) THEN DO;      /* IF 4TH ITEM,DO FOLLOWING */\n            %COMP4=' DD4 %SHR %LIST(4) ';\n            %WK4=' COPY INDD=DD4,OUTDD=DD4';   /* 4TH CONTROL */\n         END;  /* OF DSID NUMBER 4 */\n         IF %LIST(5) THEN DO;      /* IF 5TH ITEM,DO FOLLOWING */\n            %COMP5=' DD5 %SHR %LIST(5) ';\n            %WK5=' COPY INDD=DD5,OUTDD=DD5';   /* 5TH CONTROL */\n         END;  /* OF DSID NUMBER 5 */\n /* NOW LETS DEFINE IEBCOPY AND ITS WORK DATA SETS */\n         DCL IEBCOPY PROG\n               SYSPRINT WRITES PRINTER, SYSIN READS COPYCNTR,\n               SYSUT3 WRITES WORK1,SYSUT4 WRITES WORK2,\n               %COMPDS %COMP2 %COMP3 %COMP4 %COMP5;\n /* NOW DEFINE COPYCNTR WITH THE CONTROL STMTS IN IT */\n           DCL COPYCNTR * REPLACE;\n COPY INDD=DD1,OUTDD=DD1\n %WK2\n %WK3\n %WK4\n %WK5\nEOF;\n%SYSLABEL:\n         RUN IEBCOPY;   /*DO COMPRESS OR DEGAUSS */\n     /* NOW CHECK IF WE HAVE > 6 DSIDS, AND IF SO, CALL OURSELVES\n        'RE-ENTRANTLY'*/\nDCL %COPY2 INIT '';\n               IF %LIST(6)\u00ac='' THEN DO;\n               %COPY2=' %LIST(6) ';\n               IF %LIST(7) THEN DO; %COPY2=' %COPY2 %LIST(7) ';\n               IF %LIST(8) THEN DO; %COPY2=' %COPY2 %LIST(8) ';\n               IF %LIST(9) THEN DO; %COPY2=' %COPY2 %LIST(9) ';\n               IF %LIST(10) THEN DO; %COPY2=' %COPY2 %LIST(10) ';\n               IF %LIST(11) THEN STOP 'TOO MANY DATA SETS TO COMPRESS'\n               ;\n             END;END;END;END;\n             COMPRESS %COPY2  ;\n             END;\n         END  /* OF JOL MACRO COMPRESS */  ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPRESS": {"ttr": 8965, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " compress:macro(%shr);\n  /* This jol macro will compress up to 5 data sets in 1 go\n     note, unless 'shr' is specified,data sets will get an 'old'\n           disposition   */\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n  if %list(1) = ''   & %panels \u00ac= 'OFF'\n  then do;\n     list0001='';\n     comptyp  ='N';\n\n     panel       (ctr    'Compress Command')\n                 (hi ctr '----------------')\n           ///////\n           ('      Enter Name of File to Compress  ===> ',list0001,\n                       44,'%list0001')\n           ('      Enter Y for Shared Operation    ===> ',comptyp,\n                       1,'%comptyp')\n           helpline('Press F3 to Leave without Compressing Files');\n chkpan:\n\n     if %syspfk = 3 then exit;\n\n     if %list(1) = ''\n     then do;\n          panel reread from list0001 'Please Enter File Name';\n          redo chkpan;\n     end;\n     if %comptyp \u00ac= ' ' & %comptyp \u00ac='Y'\n     then do;\n          panel reread from comptyp  'Please '' '' or ''Y''';\n          redo chkpan;\n     end;\n\n     if %comppyp = 'Y' then %shr='SHR';\n\n  end;\n\n\n  /* Define printer and work files for 'iebcopy' */\n\n dcl printer printer nodcb;\n dcl work1 ds 5 cyls nodcb sysda;\n dcl work2 ds 5 cyls nodcb sysda;\n\n  /* Now at least one data set must be compressed, so let's define\n     a symbolic for that variable (later, if more than 1, we shall\n     concatenate other items to it  */\n\n          if %shr='' then %shr='updates ';/* 'old' if \u00ac'shr' */\n          if %shr='SHR' then %shr=' reads ';\n dcl %compds init ' dd1 %shr %list(1)'; /* 1st data set fixed */\n dcl %comp2,%comp3,%comp4,%comp5 init '';\n dcl  %wk1,%wk2,%wk3,%wk4,%wk5 init '';\n          /* Now find out how many dsids etc there are, and fix 'em up*/\n          if %list(2) then do;      /* if second item,do following */\n             %comp2=' dd2 %shr %list(2) ';\n             %WK2=' COPY INDD=DD2,OUTDD=DD2';   /* 2ND CONTROL */\n          end;  /* of dsid number 2 */\n          if %list(3) then do;      /* if 3rd item,do following */\n             %comp3=' dd3 %shr %list(3) ';\n             %WK3=' COPY INDD=DD3,OUTDD=DD3';   /* 3RD CONTROL */\n          end;  /* of dsid number 3 */\n          if %list(4) then do;      /* if 4th item,do following */\n             %comp4=' dd4 %shr %list(4) ';\n             %WK4=' COPY INDD=DD4,OUTDD=DD4';   /* 4TH CONTROL */\n          end;  /* of dsid number 4 */\n          if %list(5) then do;      /* if 5th item,do following */\n             %comp5=' dd5 %shr %list(5) ';\n             %WK5=' COPY INDD=DD5,OUTDD=DD5';   /* 5TH CONTROL */\n          end;  /* of dsid number 5 */\n  /* now lets define iebcopy and its work data sets */\n          dcl iebcopy prog\n                sysprint writes printer, sysin reads copycntr,\n                sysut3 writes work1,sysut4 writes work2,\n                %compds %comp2 %comp3 %comp4 %comp5;\n  /* now define copycntr with the control stmts in it */\n            dcl copycntr * replace;\n  COPY INDD=DD1,OUTDD=DD1\n  %WK2\n  %WK3\n  %WK4\n  %WK5\nEOF;\n %syslabel:\n          run iebcopy;   /*do compress or degauss */\n    /* Now check if we have > 6 dsids, and if so, call ourselves\n         're-entrantly'*/\n dcl %copy2 init '';\n                if %list(6)\u00ac='' then do;\n                %copy2=' %list(6) ';\n                if %list(7) then do; %copy2=' %copy2 %list(7) ';\n                if %list(8) then do; %copy2=' %copy2 %list(8) ';\n                if %list(9) then do; %copy2=' %copy2 %list(9) ';\n                if %list(10) then do; %copy2=' %copy2 %list(10) ';\n                if %list(11) then stop 'too many data sets to compress'\n                ;\n              end;end;end;end;\n              compress %copy2  ;\n              end;\n          end  /* of jol macro compress */  ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COPY": {"ttr": 8968, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "copy:macro(%seq,%pds,%po,%is,%isam,%old,to,%exclude=,%e=,%select=,\n           %mods,%vsam,\n           %catlg=no,\n           %s=,%member=,%members=,%m=,%replace,%r,%index=,%oflow=,%shr);\n\ndcl syspop   init '';\ndcl indstyp  init '';\ndcl outdstyp init '';\ndcl typecopy init '';\n\n/* General purpose copy macro.\n\n   This macro will copy a:\n   *      Sequential data set,\n   *      Partitioned data set,or\n   *      Indexed sequential data set,\n   *      Vsam data set,\n          by invoking IEBGENER,IEBCOPY, IEBISAM or IDCAMS. */\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n    if %list(1) = ''   & %panels \u00ac= 'OFF'\n    then do;\n        dcl %work            init '';\n        copymenu;\n/* Call ourselves reentrantly to do the copy  */\n\n        if %syspfk = 3 | %syspfk =15 then exit;\n\n        if %BUILDJOB \u00ac= 'YES'\n           then copy %work;\n        exit;                      /* Better exit now */\n    end;\n\n    if %to=0 then stop 'No ''TO'' Data Set Specified';\n    if (%select\u00ac='' & (%s\u00ac=''|%exclude\u00ac=''|%e\u00ac=''|%member\u00ac=''|%m\u00ac=''|\n        %members\u00ac='')) then stop 'More than 1 Control Stmt Specified';\n\n    if (%s\u00ac='' & (%exclude\u00ac=''|%e\u00ac=''|%member\u00ac=''|%members\u00ac=''|%m\u00ac=''))\n       then stop 'More than 1 Control Stmt Specified';\n\n    if (%exclude \u00ac='' & (%e\u00ac=''|%members\u00ac=''|%member\u00ac=''|%m\u00ac=''))\n       then stop 'More than 1 Control Stmt Specified';\n\n    if (%member \u00ac= '' & (%e\u00ac=''|%members\u00ac=''|%m\u00ac=''))|\n       (%members \u00ac= '' & (%e\u00ac=''|%m\u00ac=''))|\n       (%m\u00ac='' & %e\u00ac='') then\n       signal error 4,'More than 1 Control Statement Specified';\n\n    if %member='' & %exclude='' & %e='' then\n       %member = '%members%m%s%select';\n\n    if %exclude \u00ac= '' | %e \u00ac= '' then %exclude = '%exclude%e';\n    if (%seq\u00ac='' & (%pds\u00ac=''|%po\u00ac=''|%member\u00ac=''|%exclude\u00ac=''))|\n       (%seq\u00ac='' & (%isam\u00ac=''|%is\u00ac=''|%index\u00ac=''|%oflow\u00ac=''))|\n       ((%pds\u00ac=''|%po\u00ac=''|%member\u00ac=''|%exclude\u00ac='') &\n       (%isam\u00ac=''|%is\u00ac=''|%index\u00ac=''|%oflow\u00ac=''))\n       then signal error 4,'More than one type of COPY Specified';\n\n      dcl   %type     init ' WRITES ';\n      dcl   %fle2     init '' ;\n      dcl   %parm1    init '';\n      dcl   %parm2    init '';\n      dcl   %tempds   init '';\n      dcl   %tempwork init '';\n      dcl   printfil  printer nodcb ;\n      dcl   dummyin   ds dummy ;\n\n      if %old\u00ac='' then %type=' UPDATES ';\n      if %mods\u00ac='' then %type=' MODS ';\n      if %shr\u00ac='' then %type=' READS ';\n      if %shr\u00ac='' then signal 1,'SHARE was coded for output - Please\n ensure no other Job uses the Data Set';\n\n/* Make the TO keyword optional for Unix/Dos Users */\n\n/* fixif %to = 0 then %to=1; */\n      %parm1 = %to -1 ;\n      if %parm1 < 1 then\n         signal error 4,'''FROM'' data set missing';\n      %to = %to +1 ;\n\n/* Try and work out the data set types from the Jol DBF */\n/* Check INPUT first */\n\n      tempds ='%list(%parm1)';\n      tempwork = index(tempds,'.');            /* Data Set Name ? */\n\n      if tempwork \u00ac=0\n      then do;\n         dbffind '%list(%parm1)';\n\n         if %lastcc =0\n         then do;\n            if %zdsorg='VS' | %zvsamtxt \u00ac=''\n            then indstyp = 'VS'; /* Tell us one of the files is VSAM */\n            if %zdsorg='PS'\n            then indstyp = 'PS'; /* Tell us one of the files is SEQ  */\n            if %zdsorg='IS' | %zdsorg ='ISAM'\n            then indstyp = 'IS'; /* Tell us one of the files is ISAM */\n            if %zdsorg='PO' | %zdir \u00ac=''\n            then indstyp = 'PO'; /* Tell us one of the files is PO   */\n         end;\n      end;\n\n/* Check OUTPUT next */\n\n      tempds ='%list(%to)';\n      tempwork = index(tempds,'.');            /* Data Set Name ? */\n\n      if tempwork \u00ac=0\n      then do;\n         $chkdbf '%list(%to)';         /* Add to data base if nec  */\n         dbffind '%list(%to)';\n\n         if %lastcc =0\n         then do;\n            if %zdsorg='VS' | %zvsamtxt \u00ac=''\n            then outdstyp = 'VS'; /* Tell us one of the files is VSAM */\n            if %zdsorg='PS'\n            then outdstyp = 'PS'; /* Tell us one of the files is SEQ  */\n            if %zdsorg='IS' | %zdsorg ='ISAM'\n            then outdstyp = 'IS'; /* Tell us one of the files is ISAM */\n            if %zdsorg='PO' | %zdir \u00ac=''\n            then outdstyp = 'PO'; /* Tell us one of the files is PO   */\n/*? 'OUTTYPE = %indstyp';*/\n         end;\n      end;\n\n/* Try and work out what type of copy utility we want.\n\n   1. If any of the files are PO, then use IEBCOPY because it will\n      load and unload.  If someone copies a PO to a VSAM files, it\n      will fail at execution (we may check for all this later ).\n*/\n\n      if   indstyp = 'PO' | outdstyp = 'PO'\n      then typecopy= 'PO';\n\n      if indstyp = 'VS' | outdstyp = 'VS'\n      then typecopy='VS';\n\n      else if indstyp = '' & outdstyp = ''\n      then typecopy   ='SEQ';\n\n      if %typecopy = 'VS' then vsam = 'VSAM';\n      if %typecopy = 'PO' then po   = 'PO';\n      if %typecopy = 'IS' then is   = 'IS';\n\n    if %seq='' & %pds='' & %po='' & %isam='' & %is=''  & %vsam=''\n      & %select='' & %s='' & %member='' & %members='' & %m=''\n      & %exclude='' & %e='' & %oflow='' & %index=''\n    & (typecopy ='SEQ' | typecopy ='')\n      then %seq='SEQ' ;\n\n      if %seq \u00ac= '' then         /* sequential copy requested */\n      do;\n         if %parm1 = 2 then      /* more than one 'from' dsid coded */\n         do;\n            %parm2 = 2;  %fle2 = ' || %list(%parm2) ';  %parm1 = 1;\n         end;\n         iebgener: dcl iebgener prog\n                   sysut1   reads  %list(%parm1) %fle2\n                   sysut2   %type  %list(%to)\n                   sysin    reads  dummyin\n                   sysprint writes printfil ;\n         run iebgener ;\n         if %catlg='YES' then catlg %list(%to);\n         exit;\n      end;\n\n    if %pds \u00ac= '' | %po \u00ac= '' | %member \u00ac= '' | %exclude \u00ac= '' then\n    do;     /* iebcopy requested */\n        if %parm1 = 2 then  /* more than one 'from' dsid specified */\n        do;\n           %parm2=2;%parm1=1; %fle2 = ' sysut5 reads %list(%parm2) ';\n        end;\n        if %member \u00ac= '' then\n            %select = ' S M=';\n        if %exclude \u00ac= '' then\n            %select = ' E M=';\n        IF %R='R' | %REPLACE='REPLACE' & %PARM2 = 2 THEN\n          %COPYSTMT=' COPY OUTDD=SYSUT2,INDD=((SYSUT1,R),(SYSUT5,R)) ';\n        IF %R='R' | %REPLACE='REPLACE' & %PARM2 \u00ac= 2 THEN\n          %COPYSTMT = ' COPY OUTDD=SYSUT2,INDD=((SYSUT1,R)) ';\n        if %copystmt = '' & %parm2 = 2 then\n          %COPYSTMT = ' COPY OUTDD=SYSUT2,INDD=SYSUT1,SYSUT5 ';\n        if %copystmt = '' & %parm2 \u00ac= 2 then\n          %COPYSTMT = ' COPY OUTDD=SYSUT2,INDD=SYSUT1 ';\n        dcl work1  ds sysda space 2,1 cyls nodcb  ;\n        dcl work2  ds sysda space 2,1 cyls nodcb  ;\n        dcl input  * replace ;\n  %copystmt\n  %select%exclude%member\neof;\n        iebcopy: dcl iebcopy prog\n                 sysprint writes printfil\n                 sysut1  reads  %list(%parm1)\n                 sysut2  %type  %list(%to)\n                 sysut3  writes work1\n                 sysut4  writes work2\n                 %fle2\n                 sysin   reads  input ;\n       run iebcopy ;\n   end;\n    if %vsam\u00ac= '' then\n    do;     /* idcams  requested */\n        if %old =''\n        &  %mods=''\n        &  %shr =''\n        &  %lastcc = 0               /* Got it from the DBF */\n        &  %outdstyp = 'VS'\n        then do;\n             vsamcrea;\n             %type = ' READS ';\n        end;\n        %copyin='%list(%parm1)';\n        %copyout='%list(%to)';\n        %copytin=index(copyin,'.');\n        if %copytin\u00ac=0 then\n             dcl copyin ds %copyin vsam nocat;\n        else dcl copyin ds nocat vsam like %copyin;\n        %copytin=index(copyout,'.');\n        if %copytin\u00ac=0 then\n             dcl copyout ds %copyout vsam nocat;\n        else dcl copyout ds nocat vsam like %copyout;\n        dcl input  *  ;\n  VERIFY FILE(INFILE)\n  VERIFY FILE(OUTFILE)\n  REPRO INFILE(INFILE) OUTFILE(OUTFILE) REUSE\nEOF;\n        idcams : dcl idcams  prog\n                 sysprint writes printfil\n                 infile  reads  copyin\n                 outfile %type  copyout\n                 sysin   reads  input ;\n        run idcams  ;\n   end;\n   if %isam \u00ac= '' | %is \u00ac= '' |%index \u00ac= '' | %oflow \u00ac= '' then\n   do;\n      if %index \u00ac= '' then %index = ' %index || ' ;\n      if %oflow \u00ac= '' then %oflow = ' || %oflow ' ;\n      iebisam: dcl iebisam prog\n               sysprint writes printfil\n               sysut1   reads  %list(%parm1)\n               sysut2   %type  %index %list(%to) %oflow ;\n      run iebisam parm 'load';\n   end;\n   $chkdbf %list(%to);        /* Check if in Data Base */\n   if %catlg='YES' then catlg %list(%to);\n   end   /*copy command  */ ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COPYMENU": {"ttr": 9217, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "copymenu:MACRO;\n\n /* Assist Users enter Copy Information */\n\ndcl %fileout                 init('');\ndcl %f1                      init('');\ndcl %f2                      init('');\ndcl %f3                      init('');\ndcl %f4                      init('');\ndcl %f5                      init('');\ndcl %f6                      init('');\ndcl %f7                      init('');\ndcl %f8                      init('');\ndcl %f9                      init('');\ndcl %f10                     init('');\ndcl %f11                     init('');\ndcl %f12                     init('');\n\n\ndcl %copytype                init('');\ndcl %retdsn                  init('') EXT;\n\npanel option caps;\npanel option noshowfield;\n\nlabel COPYPAN;\n\nPanel  box\n ( ctr hi 'Jol COPY Input Panel')\n///\n(ctr 'You can Type the Names of the Data Sets You Wish to Copy,')\n(ctr'OR You can Select Your Data Sets from the Jol Data Set Data Base.')\n//\n('    1st Copy Input File   ====> ',f1,44,'%f1')\n/\n('    Final Output File     ====> ',fileout,44,'%fileout')\n//\n /  ('    Enter Type of Copy below (PO, PDS, SEQ, VSAM or ISAM) ===>'\n                   ,COPYTYPE,4,'%COPYTYPE')\n /  ('    Enter OLD if the Data Set Exists Already (or SHR)  ===>',\n            OLD,3,'%OLD')\n//\n(ctr 'The next Panels allow Other Files to be Selected')\n\nhelpline\n('Enter Starts Processing, F3 Exits, F4 shows Files.');\n\nIF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\nIF %SYSPFK = 1 THEN DO;\n   panel reread from copyout 'No HELP Available at this time';\n   REDO COPYPAN;\nEND;\n\n\ncheckc:\n           IF %COPYTYPE='SEQ'  |  %COPYTYPE='ISAM'\n           |  %COPYTYPE='VSAM' |  %COPYTYPE='PO'\n           |  %COPYTYPE='PDS'  |  %COPYTYPE='?'\n           |  %COPYTYPE=''\n           THEN;\n           ELSE DO;\n                panel reread\n                    from copytype\n                    'Invalid File Type Specified';\n                goto checkc;\n           end;\ncheckf1:\n     if Syspfk=3 then exit;\n\n     if %syspfk=4\n     then do;\n         dbfshow  all '1st Copy Input File';\n         f1='%showsel';\n\n         $getouds 'Jol COPY Details'  'Final Output File =====>';\n         %fileout = '%retdsn';\n     end;\n\n     if f1=''\n     then do;\n         panel reread from f1 'You must supply a file name';\n         goto checkf1;\n     end;\n\n     IF %fileout =''\n     then do;\n           panel reread\n               from fileout 'No OUTPUT Data Set Specified';\n           goto checkc;\n     end;\n\n\n     if %syspfk = 3 then goto getoutds;\n     if Syspfk=3 then exit;\n\n/*   if %syspfk=4\n     then do;\n         dbfshow  all '%fileout';\n         fileout='%showsel';\n     end;\n*/\n     $getinds 'Jol Copy Details'   '2nd Copy Input File =====>';\n     %f2 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Copy Details'   '3rd Copy Input File =====>';\n     %f3 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Copy Details'   '4th Copy Input File =====>';\n     %f4 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Copy Details'   '5th Copy Input File =====>';\n     %f5 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Copy Details'   '6th Copy Input File =====>';\n     %f6 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Copy Details'   '7th Copy Input File =====>';\n     %f7 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Copy Details'   '8th Copy Input File =====>';\n     %f8 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Copy Details'   '9th Copy Input File =====>';\n     %f9 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\ngetoutds:\n\n\n\nPanel  box\n/( ctr hi 'Jol COPY Input Panel')\n///\n/(ctr 'Do you wish to Catalog the new Data Set?')\n(ctr'If you don''t Catalog it, it will be Deleted automatically.')\n///\n('   Catalog Out File (Y or N) ===> ',cat,1,'Y')\n//\n\nhelpline\n('Enter Y or N');\n\n  /* Build Input File List */\n\n     if %buildjob='YES' then goto copybld;\n\n     work= '%f1';\n     if f2\u00ac='NULL' & f2\u00ac='' then work='%work || %f2';\n     if f3\u00ac='NULL' & f3\u00ac='' then work='%work || %f3';\n     if f4\u00ac='NULL' & f4\u00ac='' then work='%work || %f4';\n     if f5\u00ac='NULL' & f5\u00ac='' then work='%work || %f5';\n     if f6\u00ac='NULL' & f6\u00ac='' then work='%work || %f6';\n     if f7\u00ac='NULL' & f7\u00ac='' then work='%work || %f7';\n     if f8\u00ac='NULL' & f8\u00ac='' then work='%work || %f8';\n     if f9\u00ac='NULL' & f9\u00ac='' then work='%work || %f9';\n\n     work='%work TO %fileout %copytype';\n     if %cat='Y' then work = '%work Catlg=yes';\n     exit;\n\n\ncopybld:\n\n     /* THISSTEP */\n     BLD04P                  '   Copy  %f1 ';\n     if %f2 \u00ac='' then BLD04P '        || %f2';\n     if %f3 \u00ac='' then BLD04P '        || %f3';\n     if %f4 \u00ac='' then BLD04P '        || %f4';\n     if %f5 \u00ac='' then BLD04P '        || %f5';\n     if %f6 \u00ac='' then BLD04P '        || %f6';\n     if %f7 \u00ac='' then BLD04P '        || %f7';\n     if %f8 \u00ac='' then BLD04P '        || %f8';\n     if %f9 \u00ac='' then BLD04P '        || %f9';\n     if %f10\u00ac='' then BLD04P '        || %f10';\n     if %f11\u00ac='' then BLD04P '        || %f11';\n     if %f12\u00ac='' then BLD04P '        || %f12';\n     if %f13\u00ac='' then BLD04P '        || %f13';\n     if %f14\u00ac='' then BLD04P '        || %f14';\n     if %f15\u00ac='' then BLD04P '        || %f15';\n     if %cat='Y'\n     then do;\n                      BLD04P '         To %fileout %old %copytype ';\n                      BLD04P '         Catlg=Yes;';\n     end;\n     else             BLD04P '         To %fileout %old %copytype;';\n     $chkdbf %fileout  ;             /* Check if in Data Base */\n\nEND;    /* COPYMENU  */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DCLVDS": {"ttr": 9221, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x893\\x8f\\x00\\x893\\x8f\\x15Q\\x00\\xbb\\x00\\xbb\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-04T00:00:00", "modifydate": "1989-12-04T15:51:00", "lines": 187, "newlines": 187, "modlines": 0, "user": "JOL"}, "text": "  DCLVSDS:MACRO(%DSN=,%DSNAME=,%NAME=,\n                CYL,CYLS,TRK,TRACK,TRKS,RECS,REC,\n                %VOL=,%VOLS=,%VOLUMES=,%VOLUME=,\n                %ATTEMPTS=,%ATT=,\n                %AUTH=,\n                %BUFSP=,\n                %CODE=,\n                %CI=,%CONTROL=,%CISZ=,%CNVSZ=,\n                %FREESP=,%FSPC=,\n                %KEYRANGE=,%KRNG=,\n                %KEYS=,\n                %MASTERPW=,%MRPW=,\n                %MODEL=,\n                %OWNER=,\n                %READPW=,%RDPW=,\n                %RECSIZE=,%RECSZ=,\n                %SHARE=,\n                %TO=,%FOR=,\n                %UPDATEPW=,%UPDPW=,\n                );\n /*             %ERASE,%NOERASE,%ERAS,%NERAS,\n                %IMBED,%NOIMBED,%IMBD,%NIMBD,\n                %ORDERED,%UNORDERED,%ORD,%UNORD,\n                %REUSE,%NOREUSE,%RUS,%NRUS,\n                %SPANNED,%NOSPANNED,%SPND,%NSPND,\n                %SPEED,%RECOVERY,%RCVY,\n                %STAGE,%BIND,%CYLFAULT,\n                %UNIQUE,%SUBALLOC,%UNQ,%SUBAL,\n                %WAIT,%NOWAIT,\n                %WRITECHK,%WCK,%NWCK,                 */\n\n\n    IF %DSN\u00ac='' | %DSNAME\u00ac='' | %NAME\u00ac=''\n    Then Do;\n       %SYSVSWK2='NAME(%DSN%DSNAME%NAME)';\n       %SYSVSNME=' %DSN%DSNAME%NAME';\n    End;\n\n    IF %LIST(2)\u00ac=''\n    Then Do;\n        %WORK='%LIST(2)';\n        %L=INDEX(WORK,'.');\n        IF %L\u00ac=0\n        Then Do;\n            %SYSVSWK1='NAME(%LIST(2))';\n            %SYSVSNME=' %LIST(2)';\n        End;\n    End;\n\n\n    IF %CYL\u00ac=0 | %CYLS\u00ac=0\n    Then Do;\n       %CYL=%CYL+%CYLS;\n       IF %CYL>3\n       Then Do;\n           %L=TYPE(%LIST(%CYL-2));\n           IF %L='NUM'              /* 10, 20 CYL */\n           Then %SYSVSWK2='%SYSVSWK2 CYL(%LIST(%CYL-2) %LIST(%CYL-1))';\n           IF %L\u00ac='NUM' Then %SYSVSWK2='%SYSVSWK2 CYL(%LIST(%CYL-1))';\n       End;\n       ELSE %SYSVSWK2='%SYSVSWK2 CYL(%LIST(%CYL-1))';\n    End;\n\n\n    IF %TRK\u00ac=0 | %TRKS\u00ac=0 | %TRACKS\u00ac=0 | %TRACKS\u00ac=0\n    Then Do;\n       %TRK=%TRK+%TRKS+%TRACKS+%TRACK;\n       IF %TRK>3\n       Then Do;\n           %L=TYPE(%LIST(%TRK-2));\n           IF %L='NUM'              /* 10, 20 CYL */\n           Then %SYSVSWK2='%SYSVSWK2 TRK(%LIST(%TRK-2) %LIST(%TRK-1))';\n           IF %L\u00ac='NUM' Then %SYSVSWK2='%SYSVSWK2 TRK(%LIST(%TRK-1))';\n       End;\n       ELSE %SYSVSWK2='%SYSVSWK2 TRK(%LIST(%TRK-1))';\n    End;\n\n    IF %REC\u00ac=0 | %RECS\u00ac=0\n    Then Do;\n       %REC=%REC+%RECS;\n       IF %REC>3\n       Then Do;\n           %L=TYPE(%LIST(%REC-2));\n           IF %L='NUM'              /* 10, 20 CYL */\n           Then %SYSVSWK2='%SYSVSWK2 REC(%LIST(%REC-2) %LIST(%REC-1))';\n           IF %L\u00ac='NUM' Then %SYSVSWK2='%SYSVSWK2 REC(%LIST(%REC-1))';\n       End;\n       ELSE %SYSVSWK2='%SYSVSWK2 REC(%LIST(%REC-1))';\n    End;\n\n\n    IF %BUFFER\u00ac=0 | %BUFFERS\u00ac=0\n    Then Do;\n       %BUFFER=%BUFFER+%BUFFERS;\n       %SYSVSWK2='%SYSVSWK2 BUFFERS(%LIST(%BUFFER-1))';\n    End;\n\n    IF %VOL\u00ac='' | %VOLUME\u00ac='' | %VOLS\u00ac='' |%VOLUMES\u00ac=''\n    Then Do;\n       %SYSVSWK2='%SYSVSWK2 VOL(%VOL%VOLUME%VOLS%VOLUMES)';\n    End;\n\n    IF %ATTEMPTS\u00ac='' | %ATT\u00ac=''\n    Then Do;\n       %SYSVSWK2='%SYSVSWK2 ATT(%ATTEMPTS%ATT)';\n    End;\n\n    IF %AUTH\u00ac='' Then %SYSVSWK2='%SYSVSWK2 AUTH(%AUTH)';\n    IF %BUFSP\u00ac='' Then %SYSVSWK2='%SYSVSWK2 BUFSP(%BUFSP)';\n    IF %CODE\u00ac='' Then %SYSVSWK2='%SYSVSWK2 CODE(%AUTH)';\n\n    IF %CI\u00ac='' | %CONTROL\u00ac='' | %CISZ\u00ac='' | %CNVSZ\u00ac=''\n    Then Do;\n       %SYSVSWK2='%SYSVSWK2 CI(%CI%CONTROL%CISZ%CNVSZ)';\n    End;\n\n    IF %FREESP\u00ac='' | %FSPC\u00ac=''\n    Then Do;\n       %SYSVSWK2='%SYSVSWK2 FSP(%FREESP%FSPC)';\n    End;\n\n    IF %KEYS\u00ac='' Then %SYSVSWK2='%SYSVSWK2 KEYS(%KEYS)';\n\n    IF %KEYRANGE\u00ac='' | %KRNG\u00ac=''\n    Then Do;\n       %SYSVSWK2='%SYSVSWK2 FSP(%KEYRANGE%KRNG)';\n    End;\n\n    IF %MODEL\u00ac='' Then %SYSVSWK2='%SYSVSWK2 MODEL(%MODEL)';\n\n    IF %MASTERPW\u00ac='' | %MRPW\u00ac=''\n    Then Do;\n       %SYSVSWK2='%SYSVSWK2 MRPW(%MASTERPW%MRPW)';\n    End;\n\n    IF %OWNER\u00ac='' Then %SYSVSWK2='%SYSVSWK2 OWNER(%MODEL)';\n\n    IF %READPW\u00ac='' | %RDPW\u00ac=''\n    Then Do;\n       %SYSVSWK2='%SYSVSWK2 RDPW(%READPW%RDPW)';\n    End;\n\n    IF %RECSIZE\u00ac='' | %RECSZ\u00ac=''\n    Then Do;\n       %SYSVSWK2='%SYSVSWK2 RECSZ(%RECSIZE%RECSZ)';\n    End;\n\n    IF %SHARE\u00ac='' Then %SYSVSWK2='%SYSVSWK2 SHARE(%SHARE)';\n    IF %TO\u00ac='' Then %SYSVSWK2='%SYSVSWK2 TO(%TO)';\n    IF %FOR\u00ac='' Then %SYSVSWK2='%SYSVSWK2 FOR(%FOR)';\n\n    IF %UPDATEPW\u00ac='' | %UPDPW\u00ac=''\n    Then Do;\n       %SYSVSWK2='%SYSVSWK2 MRPW(%UPDATEPW%UPDPW)';\n    End;\n\n\n /* NOW ONLY %LIST ITEMS, SUCH AS UNIQUE ETC ARE LEFT TO BE HANDLED */\n\n   WORK2=\n      'WAIT NOWAIT ERASE NOERASE ERAS NERAS IMBED NOIMBED IMBD NIMBD'\n      ||' INDEXED NONINDEX NUMBERED IXD NIXD NUMD';\n   WORK2='%WORK2 '||\n      'ORDERED UNORDERED ORD UNORD REPLICATE REUSE NOREUSE RUS NRUS';\n   WORK3=\n      'SPANNED NOSPANNED SPND NSPND SPEED RECOVERY RCVY'\n  ||'UNIQUE SUBALLOC UNQ SUBAL WRITECHK WCK NWCK STAGE BIND CYLFAULT';\nLABEL LISTCHK1;\n\n    IF %LIST(%L)\u00ac=''\n    Then Do;\n        %WORK='%LIST(%L)';\n        %SYSWORK=INDEX(WORK2,'%WORK');\n        IF %SYSWORK=0\n        Then %SYSWORK=INDEX(WORK3,'%WORK');\n        IF %SYSWORK\u00ac=0\n        Then Do;\n             %SYSVSWK2='%SYSVSWK2 %WORK';\n        End;\n        ELSE WRITE 'INVALID KEYWORD %WORK IGNORED';\n        %L=%L+1;\n        REDO LISTCHK1;\n End;\n\n\n\n End;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DCLVIND": {"ttr": 9225, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x00?\\x00\\x90\\x01\\x1f\\x16(\\x00\\xb0\\x00\\xb0\\x00\\x10\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-01-03T00:00:00", "modifydate": "1990-01-11T16:28:00", "lines": 176, "newlines": 176, "modlines": 16, "user": "JOL"}, "text": "  DCLVIND:MACRO(%DSN=,%DSNAME=,%NAME=,\n                CYL,CYLS,TRK,TRACK,TRKS,TRACKS,RECS,REC,\n                %VOL=,%VOLS=,%VOLUMES=,%VOLUME=,\n                %ATTEMPTS=,%ATT=,\n                %AUTH=,\n                %CODE=,\n                %CI=,%CONTROL=,%CISZ=,%CNVSZ=,\n                %EXCEPT=,\n                %MASTERPW=,%MRPW=,\n                %MODEL=,\n                %OWNER=,\n                %READPW=,%RDPW=,\n                %REUSE,%NOREUSE,%RUS,%NRUS,\n                %SHARE=,\n                %UPDATEPW=,%UPDPW=,\n                );\n\n   /*           %IMBED,%NOIMBED,%IMBD,%NIMBD,\n                %ORDERED,%UNORDERED,%ORD,%UNORD,\n                %REPLICATE,\n                %UNIQUE,%SUBALLOC,%UNQ,%SUBAL,\n                %WAIT,%NOWAIT,\n                %WRITECHK,%WCK,%NWCK,                    */\n\n    IF %DSN\u00ac='' | %DSNAME\u00ac='' | %NAME\u00ac=''\n    Then DO;\n       %SYSVSWK3='NAME(%DSN%DSNAME%NAME)';\n       %SYSVSNME=' %DSN%DSNAME%NAME';\n    END;\n\n    IF %LIST(2)\u00ac=''\n    Then DO;\n        %WORK='%LIST(2)';\n        %L=INDEX(WORK,'.');\n        IF %L\u00ac=0\n        Then DO;\n            %SYSVSWK1='NAME(%LIST(2))';\n            %SYSVSNME=' %LIST(2)';\n        END;\n    END;\n\n    IF %CYL\u00ac=0 | %CYLS\u00ac=0\n    Then DO;\n       %CYL=%CYL+%CYLS;\n       IF %CYL>3\n       Then DO;\n           %L=TYPE(%LIST(%CYL-2));\n           IF %L='NUM'              /* 10, 20 CYL */\n           Then %SYSVSWK3='%SYSVSWK3 CYL(%LIST(%CYL-2) %LIST(%CYL-1))';\n           IF %L\u00ac='NUM' Then %SYSVSWK3='%SYSVSWK3 CYL(%LIST(%CYL-1))';\n       END;\n       ELSE %SYSVSWK3='%SYSVSWK3 CYL(%LIST(%CYL-1))';\n    END;\n\n\n    IF %TRK\u00ac=0 | %TRKS\u00ac=0 | %TRACKS\u00ac=0 | %TRACKS\u00ac=0\n    Then DO;\n       %TRK=%TRK+%TRKS+%TRACKS+%TRACK;\n       IF %TRK>3\n       Then DO;\n           %L=TYPE(%LIST(%TRK-2));\n           IF %L='NUM'              /* 10, 20 CYL */\n           Then %SYSVSWK3='%SYSVSWK3 TRK(%LIST(%TRK-2) %LIST(%TRK-1))';\n           IF %L\u00ac='NUM' Then %SYSVSWK3='%SYSVSWK3 TRK(%LIST(%TRK-1))';\n       END;\n       ELSE %SYSVSWK3='%SYSVSWK3 TRK(%LIST(%TRK-1))';\n    END;\n\n    IF %REC\u00ac=0 | %RECS\u00ac=0\n    Then DO;\n       %REC=%REC+%RECS;\n       IF %REC>3\n       Then DO;\n           %L=TYPE(%LIST(%REC-2));\n           IF %L='NUM'              /* 10, 20 CYL */\n           Then %SYSVSWK3='%SYSVSWK3 REC(%LIST(%REC-2) %LIST(%REC-1))';\n           IF %L\u00ac='NUM' Then %SYSVSWK3='%SYSVSWK3 REC(%LIST(%REC-1))';\n       END;\n       ELSE %SYSVSWK3='%SYSVSWK3 REC(%LIST(%REC-1))';\n    END;\n\n\n    IF %BUFFER\u00ac=0 | %BUFFERS\u00ac=0\n    Then DO;\n       %BUFFER=%BUFFER+%BUFFERS;\n       %SYSVSWK3='%SYSVSWK3 BUFFERS(%LIST(%BUFFER-1))';\n    END;\n\n    IF %VOL\u00ac='' | %VOLUME\u00ac='' | %VOLS\u00ac='' |%VOLUMES\u00ac=''\n    Then DO;\n       %SYSVSWK3='%SYSVSWK3 VOL(%VOL%VOLUME%VOLS%VOLUMES)';\n    END;\n\n    IF %ATTEMPTS\u00ac='' | %ATT\u00ac=''\n    Then DO;\n       %SYSVSWK3='%SYSVSWK3 ATT(%ATTEMPTS%ATT)';\n    END;\n\n    IF %AUTH\u00ac='' Then %SYSVSWK3='%SYSVSWK3 AUTH(%AUTH)';\n    IF %BUFSP\u00ac='' Then %SYSVSWK3='%SYSVSWK3 BUFSP(%BUFSP)';\n    IF %CODE\u00ac='' Then %SYSVSWK3='%SYSVSWK3 CODE(%AUTH)';\n\n    IF %CI\u00ac='' | %CONTROL\u00ac='' | %CISZ\u00ac='' | %CNVSZ\u00ac=''\n    Then DO;\n       %SYSVSWK3='%SYSVSWK3 CI(%CI%CONTROL%CISZ%CNVSZ)';\n    END;\n\n    IF %FREESP\u00ac='' | %FSPC\u00ac=''\n    Then DO;\n       %SYSVSWK3='%SYSVSWK3 FSP(%FREESP%FSPC)';\n    END;\n\n    IF %KEYS\u00ac='' Then %SYSVSWK3='%SYSVSWK3 KEYS(%KEYS)';\n\n    IF %KEYRANGE\u00ac='' | %KRNG\u00ac=''\n    Then DO;\n       %SYSVSWK3='%SYSVSWK3 FSP(%KEYRANGE%KRNG)';\n    END;\n\n    IF %MODEL\u00ac='' Then %SYSVSWK3='%SYSVSWK3 MODEL(%MODEL)';\n\n    IF %MASTERPW\u00ac='' | %MRPW\u00ac=''\n    Then DO;\n       %SYSVSWK3='%SYSVSWK3 MRPW(%MASTERPW%MRPW)';\n    END;\n\n    IF %OWNER\u00ac='' Then %SYSVSWK3='%SYSVSWK3 OWNER(%MODEL)';\n\n    IF %READPW\u00ac='' | %RDPW\u00ac=''\n    Then DO;\n       %SYSVSWK3='%SYSVSWK3 RDPW(%READPW%RDPW)';\n    END;\n\n    IF %RECSIZE\u00ac='' | %RECSZ\u00ac=''\n    Then DO;\n       %SYSVSWK3='%SYSVSWK3 RECSZ(%RECSIZE%RECSZ)';\n    END;\n\n    IF %SHARE\u00ac='' Then %SYSVSWK3='%SYSVSWK3 SHARE(%SHARE)';\n    IF %TO\u00ac='' Then %SYSVSWK3='%SYSVSWK3 TO(%TO)';\n    IF %FOR\u00ac='' Then %SYSVSWK3='%SYSVSWK3 FOR(%FOR)';\n\n    IF %UPDATEPW\u00ac='' | %UPDPW\u00ac=''\n    Then DO;\n       %SYSVSWK3='%SYSVSWK3 MRPW(%UPDATEPW%UPDPW)';\n    END;\n\n\n\n /* NOW ONLY %LIST ITEMS, SUCH AS UNIQUE ETC ARE LEFT TO BE HANDLED */\n\n   WORK2=\n      'WAIT NOWAIT IMBED NOIMBED IMBD NIMBD REPLICATE'\n   ||' ORDERED UNORDERED ORD UNORD REPLICATE REUSE NOREUSE RUS NRUS';\n   WORK3=\n      'SPANNED NOSPANNED SPND NSPND SPEED RECOVERY RCVY'\n      ||'UNIQUE SUBALLOC UNQ SUBAL WRITECHK WCK NWCK';\nLABEL LISTCHK1;\n\n    IF %LIST(%L)\u00ac=''\n    Then DO;\n        %WORK='%LIST(%L)';\n        %SYSWORK=INDEX(WORK2,'%WORK');\n        IF %SYSWORK=0\n        Then %SYSWORK=INDEX(WORK3,'%WORK');\n        IF %SYSWORK\u00ac=0\n        Then DO;\n             %SYSVSWK3='%SYSVSWK3 %WORK';\n        END;\n        ELSE WRITE 'INVALID KEYWORD %WORK IGNORED';\n        %L=%L+1;\n        REDO LISTCHK1;\n END;\n\n\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DCLVSAM": {"ttr": 9475, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x893\\x8f\\x00\\x90\\x01\\x1f\\x17\\x02\\x01\\n\\x01\\n\\x00\\x04\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1989-12-04T00:00:00", "modifydate": "1990-01-11T17:02:00", "lines": 266, "newlines": 266, "modlines": 4, "user": "JOL"}, "text": "  DCLVSAM:MACRO(%DSN=,%DSNAME=,%NAME=,\n                CYL,CYLS,TRK,TRACK,TRKS,TRACKS,RECS,REC,\n                %VOL=,%VOLS=,%VOLUMES=,%VOLUME=,\n                %ATTEMPTS=,%ATT=,\n                %AUTH=,\n                BUFFER,BUFFERS,\n                %BUFSP=,\n                %CODE=,\n                %CI=,%CONTROL=,%CISZ=,%CNVSZ=,\n                %FREESP=,%FSPC=,\n                %KEYRANGE=,%KRNG=,\n                %KEYS=,\n                %MASTERPW=,%MRPW=,\n                %MODEL=,\n                %OWNER=,\n                %READPW=,%RDPW=,\n                %RECSIZE=,%RECSZ=,\n                %SHARE=,\n                %TO=,%FOR=,\n                %UPDATEPW=,%UPDPW=,\n                %DATA=,\n                %INDEX=,\n                %NOPANEL,\n                );\n /*\n                %ERASE,%NOERASE,%ERAS,%NERAS,\n                %IMBED,%NOIMBED,%IMBD,%NIMBD,\n                %INDEXED,%NONINDEXED,%NUMBERED,%IXD,%NIXD,%NUMD,\n                %ORDERED,%UNORDERED,%ORD,%UNORD,\n                %REPLICATE,\n                %REUSE,%NOREUSE,%RUS,%NRUS,\n                %SPANNED,%NOSPANNED,%SPND,%NSPND,\n                %SPEED,%RECOVERY,%RCVY,\n                %UNIQUE,%SUBALLOC,%UNQ,%SUBAL,\n                %WAIT,%NOWAIT,\n                %WRITECHK,%WCK,%NWCK,                    */\n\n DCL %WORK      INIT('');    /* WORK FIELD               */\n DCL %L         INIT('');    /* WORK FIELD               */\n DCL %X         INIT('');    /* WORK FIELD               */\n DCL %TEMPIND   INIT('');    /* FILLED IN BY INDEX MACRO */\n DCL %TEMPDATA  INIT('');\n DCL %TEMPCLUS  INIT('');\n DCL %SYSVSNME  INIT('');     /* SAVE VSAM DATA SET NAME             */\n DCL %SYSVSAM1  INIT('') EXT; /* KEEPS LIST OF VSAM DATA SETS IN JOB */\n DCL %SYSVSAM2  INIT('') EXT; /* AS ABOVE...                         */\n DCL %SYSVSWK1  INIT('') EXT; /* WORK AREA FOR CLUSTER               */\n DCL %SYSVSWK2  INIT('') EXT; /* WORK AREA FOR DATA                  */\n DCL %SYSVSWK3  INIT('') EXT; /* WORK AREA FOR INDEX                 */\n DCL %SYSVSWK4  INIT('') EXT; /* WORK AREA FOR ?????                 */\n DCL %SYSVSDSI  INIT('') EXT; /* DSID SAVED HERE                     */\n\n    %SYSVSWK1='';             /* CLEAR WORK AREAS                    */\n    %SYSVSWK2='';             /* CLEAR WORK AREAS                    */\n    %SYSVSWK3='';             /* CLEAR WORK AREAS                    */\n    %SYSVSWK4='';             /* CLEAR WORK AREAS                    */\n    %WORK='%LIST(1)';         /* GET DSID                            */\n    %SYSVSDSI='%WORK';        /* SAVE IT HERE TOO                    */\n\n    %L=LENGTH(SYSVSAM1);      /* STORE IN VSAM TABLE                 */\n    If %WORK\u00ac=''              /* DO WE HAVE A %LIST(1)?              */\n    Then Do;                  /* YES                                 */\n           If %L<240 Then %SYSVSAM1='%SYSVSAM1,%WORK';\n           Else %SYSVSAM2='%SYSVSAM2,%WORK';\n    End;\n    Else Do;\n         WRITE 'NO DSID IN DCLVSAM MACRO: STATEMENT IGNORED';\n         EXIT;\n    End;\n    %L=TYPE(WORK);\n    If %L\u00ac='CHAR'\n    Then Do;\n         WRITE 'DSID Not CHAR DCLVSAM MACRO: STATEMENT IGNORED';\n     /*  EXIT; */\n    End;\n\n    If %DSN\u00ac='' | %DSNAME\u00ac='' | %NAME\u00ac=''\n    Then Do;\n       %SYSVSWK1='NAME(%DSN%DSNAME%NAME)';\n       %SYSVSNME=' %DSN%DSNAME%NAME';\n    End;\n\n    %L=2;\n    If %LIST(2)='DS' Then %L=3;\n\n    If %LIST(%L)\u00ac=''\n    Then Do;\n        %WORK='%LIST(%L)';\n        %X=INDEX(WORK,'.');\n        If %X\u00ac=0\n        Then Do;\n            %SYSVSWK1='NAME(%LIST(%L))';\n            %SYSVSNME=' %LIST(%L)';\n        End;\n    End;\n    %L=%L+1;                       /* POINT TO NEXT %LIST ITEM */\n\n    If %CYL\u00ac=0 | %CYLS\u00ac=0\n    Then Do;\n       %CYL=%CYL+%CYLS;\n       If %CYL>3\n       Then Do;\n           %L=TYPE(%LIST(%CYL-2));\n           If %L='NUM'              /* 10, 20 CYL */\n           Then %SYSVSWK1='%SYSVSWK1 CYL(%LIST(%CYL-2) %LIST(%CYL-1))';\n           If %L\u00ac='NUM' Then %SYSVSWK1='%SYSVSWK1 CYL(%LIST(%CYL-1))';\n       End;\n       Else %SYSVSWK1='%SYSVSWK1 CYL(%LIST(%CYL-1))';\n    End;\n\n    If %TRK\u00ac=0 | %TRKS\u00ac=0 | %TRACKS\u00ac=0 | %TRACKS\u00ac=0\n    Then Do;\n       %TRK=%TRK+%TRKS+%TRACKS+%TRACK;\n       If %TRK>3\n       Then Do;\n           %L=TYPE(%LIST(%TRK-2));\n           If %L='NUM'              /* 10, 20 CYL */\n           Then %SYSVSWK1='%SYSVSWK1 TRK(%LIST(%TRK-2) %LIST(%TRK-1))';\n           If %L\u00ac='NUM' Then %SYSVSWK1='%SYSVSWK1 TRK(%LIST(%TRK-1))';\n       End;\n       Else %SYSVSWK1='%SYSVSWK1 TRK(%LIST(%TRK-1))';\n    End;\n\n    If %REC\u00ac=0 | %RECS\u00ac=0\n    Then Do;\n       %REC=%REC+%RECS;\n       If %REC>3\n       Then Do;\n           %L=TYPE(%LIST(%REC-2));\n           If %L='NUM'              /* 10, 20 CYL */\n           Then %SYSVSWK1='%SYSVSWK1 REC(%LIST(%REC-2) %LIST(%REC-1))';\n           If %L\u00ac='NUM' Then %SYSVSWK1='%SYSVSWK1 REC(%LIST(%REC-1))';\n       End;\n       Else %SYSVSWK1='%SYSVSWK1 REC(%LIST(%REC-1))';\n    End;\n\n\n    If %BUFFER\u00ac=0 | %BUFFERS\u00ac=0\n    Then Do;\n       %BUFFER=%BUFFER+%BUFFERS;\n       %SYSVSWK1='%SYSVSWK1 BUFFERS(%LIST(%BUFFER-1))';\n    End;\n\n    If %VOL\u00ac='' | %VOLUME\u00ac='' | %VOLS\u00ac='' |%VOLUMES\u00ac=''\n    Then Do;\n       %SYSVSWK1='%SYSVSWK1 VOL(%VOL%VOLUME%VOLS%VOLUMES)';\n    End;\n\n    If %ATTEMPTS\u00ac='' | %ATT\u00ac=''\n    Then Do;\n       %SYSVSWK1='%SYSVSWK1 ATT(%ATTEMPTS%ATT)';\n    End;\n\n    If %AUTH\u00ac='' Then %SYSVSWK1='%SYSVSWK1 AUTH(%AUTH)';\n    If %BUFSP\u00ac='' Then %SYSVSWK1='%SYSVSWK1 BUFSP(%BUFSP)';\n    If %CODE\u00ac='' Then %SYSVSWK1='%SYSVSWK1 CODE(%AUTH)';\n\n    If %CI\u00ac='' | %CONTROL\u00ac='' | %CISZ\u00ac='' | %CNVSZ\u00ac=''\n    Then Do;\n       %SYSVSWK1='%SYSVSWK1 CI(%CI%CONTROL%CISZ%CNVSZ)';\n    End;\n\n    If %FREESP\u00ac='' | %FSPC\u00ac=''\n    Then Do;\n       %SYSVSWK1='%SYSVSWK1 FSP(%FREESP%FSPC)';\n    End;\n\n    If %KEYS\u00ac='' Then %SYSVSWK1='%SYSVSWK1 KEYS(%KEYS)';\n\n    If %KEYRANGE\u00ac='' | %KRNG\u00ac=''\n    Then Do;\n       %SYSVSWK1='%SYSVSWK1 FSP(%KEYRANGE%KRNG)';\n    End;\n\n    If %MODEL\u00ac='' Then %SYSVSWK1='%SYSVSWK1 MODEL(%MODEL)';\n\n    If %MASTERPW\u00ac='' | %MRPW\u00ac=''\n    Then Do;\n       %SYSVSWK1='%SYSVSWK1 MRPW(%MASTERPW%MRPW)';\n    End;\n\n    If %OWNER\u00ac='' Then %SYSVSWK1='%SYSVSWK1 OWNER(%MODEL)';\n\n    If %READPW\u00ac='' | %RDPW\u00ac=''\n    Then Do;\n       %SYSVSWK1='%SYSVSWK1 RDPW(%READPW%RDPW)';\n    End;\n\n    If %RECSIZE\u00ac='' | %RECSZ\u00ac=''\n    Then Do;\n       %SYSVSWK1='%SYSVSWK1 RECSZ(%RECSIZE%RECSZ)';\n    End;\n\n    If %SHARE\u00ac='' Then %SYSVSWK1='%SYSVSWK1 SHARE(%SHARE)';\n    If %TO\u00ac='' Then %SYSVSWK1='%SYSVSWK1 TO(%TO)';\n    If %FOR\u00ac='' Then %SYSVSWK1='%SYSVSWK1 FOR(%FOR)';\n\n    If %UPDATEPW\u00ac='' | %UPDPW\u00ac=''\n    Then Do;\n       %SYSVSWK1='%SYSVSWK1 MRPW(%UPDATEPW%UPDPW)';\n    End;\n\n /* NOW ONLY %LIST ITEMS, SUCH AS UNIQUE ETC ARE LEFT TO BE HANDLED */\n\n   WORK2=\n      'WAIT NOWAIT ERASE NOERASE ERAS NERAS IMBED NOIMBED IMBD NIMBD'\n      ||' INDEXED NONINDEX NUMBERED IXD NIXD NUMD';\n   WORK2='%WORK2 '||\n      'ORDERED UNORDERED ORD UNORD REPLICATE REUSE NOREUSE RUS NRUS';\n   WORK3=\n      'SPANNED NOSPANNED SPND NSPND SPEED RECOVERY RCVY'\n      ||'UNIQUE SUBALLOC UNQ SUBAL WRITECHK WCK NWCK';\nLABEL LISTCHK1;\n\n    If %LIST(%L)\u00ac=''\n    Then Do;\n        %WORK='%LIST(%L)';\n        %SYSWORK=INDEX(WORK2,'%WORK');\n        If %SYSWORK=0\n        Then %SYSWORK=INDEX(WORK3,'%WORK');\n        If %SYSWORK\u00ac=0\n        Then Do;\n             %SYSVSWK1='%SYSVSWK1 %WORK';\n        End;\n        Else WRITE 'INVALID KEYWORD %WORK IGNORED';\n        %L=%L+1;\n        REDO LISTCHK1;\n End;\n\n\n    If %DATA   \u00ac='' Then DCLVDS   %DATA   ;\n    If %INDEX  \u00ac='' Then DCLVIND  %INDEX  ;\n\n DCL %SYSVSDSI DS DSN=%SYSVSNME VSAM EXT;\n\n End;\n /* CREATE A UNIQUE SYMBOLIC CONTAINING THE DETAILS FOR THE VSAM\n    DATA SET.  THIS WILL BE USED TO CREATE THE FILE If NECESSARY */\n\n     %SYSWORK=INDEX(SYSVSAM1,'%SYSVSDSI');\n     If %SYSWORK=0\n     Then Do;\n         %SYSWORK=INDEX(SYSVSAM1,'%SYSVSDSI');\n         If %SYSWORK=0 Then Do;\n            WRITE 'INTERNAL ERROR IN DCLVSAM MACRO';\n         End;\n         %SYSWRK2='VS2'||%SYSWORK;\n     End;\n     If %SYSWORK\u00ac=0\n     Then Do;\n         %SYSWRK2='VS1'||%SYSWORK;\n     End;\n     %SETX='%SYSWRK2'||'M';\n     %SETA='SET  %SETX=''%SYSVSWK1''';\n     %SETA;\n     %SETX='%SYSWRK2'||'C';\n     %SETA='SET  %SETX=''%SYSVSWK2''';\n     %SETA;\n     %SETX='%SYSWRK2'||'D';\n     %SETA='SET  %SETX=''%SYSVSWK3''';\n     %SETA;\n     %SETX='%SYSWRK2'||'I';\n     %SETA='SET  %SETX=''%SYSVSWK4''';\n     %SETA;\n     printsym;\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETE": {"ttr": 17931, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00G\\x01\\x102\\x0f\\x01\\x102/\\x10\\x04\\x00\\x06\\x00\\x04\\x00\\x03\\xd1\\xd6\\xd3\\xf6\\xf0\\xc1@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-11-16T00:00:00", "modifydate": "2010-11-18T10:04:47", "lines": 6, "newlines": 4, "modlines": 3, "user": "JOL60A"}, "text": "TEXIST: MACRO;\n/*                                                                   */\n/*       THE TEXIST COMMAND TESTS IF A DATA SET OR DSID EXISTS       */\n/*                                                                   */\n/*       IT USES THE TEXIST PROGRAM TO DETERMINE IF A MODDED         */\n/*       DATA SET WAS CREATED, OR MODDED.                            */\n/*                                                                   */\n/*       IF IT WAS MODDED, IT EXISTED, OTHERWISE IT DIDN'T EXIST     */\n/*       BEFORE THE STEP RAN.                                        */\n/*                                                                   */\nDCL  %TEMPDS,%TEMPWRK,%ERR   INIT '';    /* WORK LOCATIONS */\n\n      %TEMPDS='%LIST(1)';                /* COPY DATA SET NAME */\n      %TEMPWRK=INDEX(TEMPDS,'.');        /* SEE IF DSID OR DSN */\n      IF %LIST(1)=''\n      THEN DO;\n          STOP 'NO DATA SET OR DSID PASSED TO TEXIST';\n      END;\n      ELSE DO;\n          IF %TEMPWRK\u00ac=0                 /* WAS A PERIOD, MEANS DSN */\n          THEN DO;\n             DCL STEPFORC DS DUMMY NODCB;\n             DCL TEXIST PROG\n                 DUMMY   READS STEPFORC;\n             RUN TEXIST;\n             OPCNTL '//$$EXIST DD DSN=%TEMPDS,DISP=MOD,';\n             OPCNTL '//           SPACE=(TRK,(1,1)),UNIT=SYSDA';\n             IF TEXIST\u00ac=0\n             THEN DISPLAY 'DATA SET %LIST(1) DID NOT EXIST';\n          END;\n          ELSE DO;\n             DCL TEMPDS DS LIKE %TEMPDS 1 TRK SYSDA;\n             DCL TEXIST PROG\n                 $$EXIST MODS TEMPDS;\n             RUN TEXIST;\n             IF TEXIST\u00ac=0\n             THEN DO;\n                  DISPLAY 'DSID %LIST(1) DID NOT EXIST';\n                  SCRATCH TEMPDS;    /* REMOVE FROM PASSED QUEUE */\n             END;\n          END;\n      END;\nEND  /* TEXIST COMMAND */ ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELGDG": {"ttr": 9484, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x822\\x0f\\x00\\x822\\x0f\\x14D\\x00<\\x00<\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-11-16T00:00:00", "modifydate": "1982-11-16T14:44:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "JOL"}, "text": "DELGDG : MACRO (\n/*********************************************************************/\n/*                                                                   */\n/*          COMMAND TO DELETE A GENERATION DATASET BASE              */\n/*          AND TO OPTIONALLY DELETE ALL GDG GENERATIONS.            */\n/*          ABS SOFTWARE SERVICES SECTION - 15/07/82                 */\n/*                                                                   */\n/*********************************************************************/\n    %ENTRY,             /* ENTRYNAME IS POSITIONAL                   */\n    %PASSWORD=,         /* ENTRY PASSWORD                            */\n    %GDGBASE,           /* DEFAULT DELETION IS OF BASE ENTRY ONLY    */\n                        /*         AFTER ALL GDG MEMBERS ARE REMOVED */\n    %ALL, %GENERATI,    /* ALL GENERATIONS MUST BE SPECIFIED TO      */\n                        /*      DELETE ALL GENERATIONS AND BASE GDG  */\n    %PURGE, %NOPURGE,   /* NOPURGE IS THE DEFAULT. PURGE ALLOWS AN   */\n                        /*      UNEXPIRED GDG TO BE DELETED          */\n    %SYSOUT=            /* OUTPUT FROM AMS COMMAND EXECUTED          */\n          ) ;\n/*********************************************************************/\nDCL %COMMAND1 INIT '' ;\nDCL %COMMAND2 INIT '' ;\nDCL %FORCE    INIT '' ;\nIF %LIST(1) = '' THEN\n   STOP 'NO GDG ENTRY NAME SPECIFIED FOR DELETE GDG' ;\nIF %ALL \u00ac= '' & %GENERATI \u00ac= '' THEN\n   DO;\n   SIGNAL 2\n   'WARNING - ALL GENERATIONS WILL BE UNCATALOGUED BUT NOT SCRATCHED';\n   %FORCE = 'FORCE' ;\n   END;\nIF %PURGE \u00ac= '' THEN\n   DO;\n   SIGNAL 2 'WARNING - UNEXPIRED GDG DATASETS WILL BE DELETED' ;\n   %PURGE = 'PURGE' ;\n   END;\nIF %PASSWORD \u00ac= '' THEN %PASSWORD = '/%PASSWORD' ;\n%COMMAND1 = ' DELETE (%LIST(1)%PASSWORD) -' ;\n%COMMAND2 = '         GDG %PURGE %FORCE' ;\n/*********************************************************************/\n/*          DECLARE DATASETS FOR IDCAMS / KQCAMS                     */\n/*********************************************************************/\nDCL     PRINT     SYSOUT %SYSOUT ;\nDCL     COMMANDS  *  REPLACE ;\n %COMMAND1\n %COMMAND2\nEOF;\n/*********************************************************************/\n/*          DECLARE  VSAM AMS  PROGRAM                               */\n/*********************************************************************/\nDCL %PROGRAM INIT 'IDCAMS' ;\nIF %SYSTEM = 'OS4' THEN %PROGRAM = 'KQCAMS' ;\nDELGDG :\nDCL   %PROGRAM    PROGRAM\n                  SYSPRINT  WRITES PRINT\n                  SYSIN     READS  COMMANDS ;\n/*********************************************************************/\n/*          RUN  VSAM AMS  PROGRAM                                   */\n/*********************************************************************/\nRUN DELGDG  ;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELINDEX": {"ttr": 9486, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x822\\x0f\\x00\\x822\\x0f\\x14E\\x00H\\x00H\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-11-16T00:00:00", "modifydate": "1982-11-16T14:45:00", "lines": 72, "newlines": 72, "modlines": 0, "user": "JOL"}, "text": "DELINDEX: MACRO (\n/*********************************************************************/\n/*                                                                   */\n/*          COMMAND TO DELETE AN INDEX STRUCTURE                     */\n/*          OR AN ALIAS FOR THE HIGHEST LEVEL INDEX                  */\n/*          ABS SOFTWARE SERVICES SECTION - 20/06/81                 */\n/*                                                                   */\n/*********************************************************************/\n          %INDEX,       /* OPTIONAL KEYWORD - A LIST OF UP 5 INDEXES */\n                        /* MAY BE SPECIFIED AS POSITIONAL PARAMETERS */\n          %ALIAS,       /* MUST BE SPECIFIED TO DELETE INDEX ALIAS   */\n          %VOL=,        /* OPTIONAL - CVOL VOLUME NUMBER             */\n          %UNIT=,       /* OPTIONAL - CVOL UNIT TYPE                 */\n          %SYSOUT=      /* DEFAULT IS TO MSGCLASS                    */\n          ) ;\n/*********************************************************************/\nDCL %CVOL     INIT '' ;\nDCL %COMMAND  INIT '' ;\nDCL %COMMAND1 INIT '' ;\nDCL %COMMAND2 INIT '' ;\nDCL %COMMAND3 INIT '' ;\nDCL %COMMAND4 INIT '' ;\nDCL %COMMAND5 INIT '' ;\nIF %LIST(1) = '' THEN\n                 STOP 'NO INDEX SPECIFIED FOR DELETE INDEX' ;\nIF %VOL    \u00ac= '' & %UNIT = '' THEN\n                 SIGNAL 2 'UNIT NOT SPECIFIED - VOL HAS BEEN IGNORED' ;\nIF %UNIT   \u00ac= '' & %VOL = '' THEN\n                 SIGNAL 2 'VOL NOT SPECIFIED - UNIT HAS BEEN IGNORED' ;\nIF %VOL    \u00ac= '' & %UNIT \u00ac= '' THEN %CVOL = ',CVOL=%UNIT=%VOL' ;\nIF %ALIAS  \u00ac= '' THEN\nDO;\n   %COMMAND  = ' DLTA' ;\n   %COMMAND1 = '%COMMAND ALIAS=%LIST(1) %CVOL' ;\nEND;\nELSE\nDO;\n   %COMMAND  = ' DLTX' ;\n   %COMMAND1 = '%COMMAND INDEX=%LIST(1) %CVOL' ;\n   IF %LIST(2) \u00ac= '' THEN %COMMAND2 = '%COMMAND INDEX=%LIST(2) %CVOL';\n   IF %LIST(3) \u00ac= '' THEN %COMMAND3 = '%COMMAND INDEX=%LIST(3) %CVOL';\n   IF %LIST(4) \u00ac= '' THEN %COMMAND4 = '%COMMAND INDEX=%LIST(4) %CVOL';\n   IF %LIST(5) \u00ac= '' THEN %COMMAND5 = '%COMMAND INDEX=%LIST(5) %CVOL';\nEND;\n/*********************************************************************/\n/*          DECLARE DATASETS FOR IEHPROGM                            */\n/*********************************************************************/\nDCL     PRINT     SYSOUT %SYSOUT ;\nDCL     SYSRES    DS\n                  UNIT SYSDA\n                  VOL  SYSRES\n                  NODCB ;\nDCL     COMMANDS  *  REPLACE ;\n %COMMAND1\n %COMMAND2\n %COMMAND3\n %COMMAND4\n %COMMAND5\nEOF;\n/*********************************************************************/\n/*          DECLARE  IEHPROGM  PROGRAM                               */\n/*********************************************************************/\nDELINDX:\nDCL      IEHPROGM PROGRAM\n                  SYSPRINT  WRITES PRINT\n                  SYSRES    READS  SYSRES\n                  SYSIN     READS  COMMANDS ;\n/*********************************************************************/\n/*          RUN  IEHPROGM  PROGRAM                                   */\n/*********************************************************************/\nRUN DELINDX ;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DIR": {"ttr": 9488, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "dir:macro;     /* MVS Dir is transposed to a LISTC */\n\n    listcat  %sysstmt ;\n      exit;\n   end;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DUMMYMEM": {"ttr": 9729, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  /* This member is for the UCL CLIST only.\n\n     It is a dummy member to allow Jol to go straight into\n     the menu system.\n  */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DUMPVOL": {"ttr": 9731, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x132\\x00>\\x00>\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:32:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "JOL"}, "text": " DUMP:MACRO(%FROMUNIT=DISK,%TOUNIT=TAPE);\n   IF %LIST(1)='' THEN STOP 'NO VOLUME SPECIFIED IN DUMP';\n         DCL %DDS1,%DDS2,%DDS3,%DDS4,%DDS5,%DDS6,\n               %DUMP1,%DUMP2,%DUMP3,%DUMP4,%DUMP5,%DUMP6 INIT '';\n         DCL %BACKDSN INIT 'JOL.BACKUP.OF';\n         IF %LIST(1)\u00ac='' THEN DO;\n             %DUMP1=' DUMP FROMDD=IN01,TODD=OUT01 ';\n             DCL DDIN01 DS VOL %LIST(1) NODSN UNIT %FROMUNIT;\n             DCL DDOUT01 DS %TOUNIT DSN=%BACKDSN%LIST(1) (+1) NODEF;\n             %DDS1=' IN01 READS DDIN01 OUT01 WRITES DDOUT01 ';\n         END;\n         IF %LIST(2)\u00ac='' THEN DO;\n             %DUMP2=' DUMP FROMDD=IN02,TODD=OUT02 ';\n             DCL DDIN02 DS VOL %LIST(2) NODSN UNIT %FROMUNIT;\n             DCL DDOUT02 DS %TOUNIT DSN=%BACKDSN%LIST(2) (+1) NODEF;\n             %DDS2='IN02 READS DDIN02 OUT02 WRITES DDOUT02 ';\n         END;\n         IF %LIST(3)\u00ac='' THEN DO;\n             %DUMP3=' DUMP FROMDD=IN03,TODD=OUT03 ';\n             DCL DDIN03 DS VOL %LIST(3) NODSN UNIT %FROMUNIT;\n             DCL DDOUT03 DS %TOUNIT DSN=%BACKDSN%LIST(3) (+1) NODEF;\n             %DDS3='IN03 READS DDIN03 OUT03 WRITES DDOUT03 ';\n         END;\n         IF %LIST(4)\u00ac='' THEN DO;\n             %DUMP4=' DUMP FROMDD=IN04,TODD=OUT04 ';\n             DCL DDIN04 DS VOL %LIST(4) NODSN UNIT %FROMUNIT;\n             DCL DDOUT04 DS %TOUNIT DSN=%BACKDSN%LIST(4) (+1) NODEF;\n             %DDS4='IN04 READS DDIN04 OUT04 WRITES DDOUT04 ';\n         END;\n         IF %LIST(5)\u00ac='' THEN DO;\n             %DUMP5=' DUMP FROMDD=IN05,TODD=OUT05 ';\n             DCL DDIN05 DS VOL %LIST(5) NODSN UNIT %FROMUNIT;\n             DCL DDOUT05 DS %TOUNIT DSN=%BACKDSN%LIST(5) (+1) NODEF;\n             %DDS5='IN05 READS DDIN05 OUT05 WRITES DDOUT05 ';\n         END;\n         IF %LIST(6)\u00ac='' THEN DO;\n             %DUMP6=' DUMP FROMDD=IN06,TODD=OUT06 ';\n             DCL DDIN06 DS VOL %LIST(6) NODSN UNIT %FROMUNIT;\n             DCL DDOUT06 DS %TOUNIT DSN=%BACKDSN%LIST(6) (+1) NODEF;\n             %DDS6='IN06 READS DDIN06 OUT06 WRITES DDOUT06 ';\n         END;\n         DCL PRINTER PRINTER FBM 1210,121;\n         DCL CONTROL * REPLACE;\n %DUMP1\n %DUMP2\n %DUMP3\n %DUMP4\n %DUMP5\n %DUMP6\nEOF;\n         DCL IEHDASDR PROG\n             SYSPRINT WRITES PRINTER\n             SYSIN READS CONTROL\n             %DDS1 %DDS2 %DDS3 %DDS4 %DDS5 %DDS6;\n         RUN IEHDASDR;\n         IF %LIST(1) THEN CATLG DDOUT01;\n         IF %LIST(2) THEN CATLG DDOUT02;\n         IF %LIST(3) THEN CATLG DDOUT03;\n         IF %LIST(4) THEN CATLG DDOUT04;\n         IF %LIST(5) THEN CATLG DDOUT05;\n         IF %LIST(6) THEN CATLG DDOUT06;\n         END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DUMPVOLS": {"ttr": 9733, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x132\\x00>\\x00>\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:32:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "JOL"}, "text": " DUMP:MACRO(%FROMUNIT=DISK,%TOUNIT=TAPE);\n   IF %LIST(1)='' THEN STOP 'NO VOLUME SPECIFIED IN DUMP';\n         DCL %DDS1,%DDS2,%DDS3,%DDS4,%DDS5,%DDS6,\n               %DUMP1,%DUMP2,%DUMP3,%DUMP4,%DUMP5,%DUMP6 INIT '';\n         DCL %BACKDSN INIT 'JOL.BACKUP.OF';\n         IF %LIST(1)\u00ac='' THEN DO;\n             %DUMP1=' DUMP FROMDD=IN01,TODD=OUT01 ';\n             DCL DDIN01 DS VOL %LIST(1) NODSN UNIT %FROMUNIT;\n             DCL DDOUT01 DS %TOUNIT DSN=%BACKDSN%LIST(1) (+1) NODEF;\n             %DDS1=' IN01 READS DDIN01 OUT01 WRITES DDOUT01 ';\n         END;\n         IF %LIST(2)\u00ac='' THEN DO;\n             %DUMP2=' DUMP FROMDD=IN02,TODD=OUT02 ';\n             DCL DDIN02 DS VOL %LIST(2) NODSN UNIT %FROMUNIT;\n             DCL DDOUT02 DS %TOUNIT DSN=%BACKDSN%LIST(2) (+1) NODEF;\n             %DDS2='IN02 READS DDIN02 OUT02 WRITES DDOUT02 ';\n         END;\n         IF %LIST(3)\u00ac='' THEN DO;\n             %DUMP3=' DUMP FROMDD=IN03,TODD=OUT03 ';\n             DCL DDIN03 DS VOL %LIST(3) NODSN UNIT %FROMUNIT;\n             DCL DDOUT03 DS %TOUNIT DSN=%BACKDSN%LIST(3) (+1) NODEF;\n             %DDS3='IN03 READS DDIN03 OUT03 WRITES DDOUT03 ';\n         END;\n         IF %LIST(4)\u00ac='' THEN DO;\n             %DUMP4=' DUMP FROMDD=IN04,TODD=OUT04 ';\n             DCL DDIN04 DS VOL %LIST(4) NODSN UNIT %FROMUNIT;\n             DCL DDOUT04 DS %TOUNIT DSN=%BACKDSN%LIST(4) (+1) NODEF;\n             %DDS4='IN04 READS DDIN04 OUT04 WRITES DDOUT04 ';\n         END;\n         IF %LIST(5)\u00ac='' THEN DO;\n             %DUMP5=' DUMP FROMDD=IN05,TODD=OUT05 ';\n             DCL DDIN05 DS VOL %LIST(5) NODSN UNIT %FROMUNIT;\n             DCL DDOUT05 DS %TOUNIT DSN=%BACKDSN%LIST(5) (+1) NODEF;\n             %DDS5='IN05 READS DDIN05 OUT05 WRITES DDOUT05 ';\n         END;\n         IF %LIST(6)\u00ac='' THEN DO;\n             %DUMP6=' DUMP FROMDD=IN06,TODD=OUT06 ';\n             DCL DDIN06 DS VOL %LIST(6) NODSN UNIT %FROMUNIT;\n             DCL DDOUT06 DS %TOUNIT DSN=%BACKDSN%LIST(6) (+1) NODEF;\n             %DDS6='IN06 READS DDIN06 OUT06 WRITES DDOUT06 ';\n         END;\n         DCL PRINTER PRINTER FBM 1210,121;\n         DCL CONTROL * REPLACE;\n %DUMP1\n %DUMP2\n %DUMP3\n %DUMP4\n %DUMP5\n %DUMP6\nEOF;\n         DCL IEHDASDR PROG\n             SYSPRINT WRITES PRINTER\n             SYSIN READS CONTROL\n             %DDS1 %DDS2 %DDS3 %DDS4 %DDS5 %DDS6;\n         RUN IEHDASDR;\n         IF %LIST(1) THEN CATLG DDOUT01;\n         IF %LIST(2) THEN CATLG DDOUT02;\n         IF %LIST(3) THEN CATLG DDOUT03;\n         IF %LIST(4) THEN CATLG DDOUT04;\n         IF %LIST(5) THEN CATLG DDOUT05;\n         IF %LIST(6) THEN CATLG DDOUT06;\n         END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EDIT": {"ttr": 9735, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "edit:macro;\nnotimpl 'Edit';\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ENDNET": {"ttr": 9737, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x00\\x00\\x00\\x00\\x87$o\\x00\\x87$o\\x16\\x18\\x00<\\x00<\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "04.00", "flags": 0, "createdate": "1987-09-03T00:00:00", "modifydate": "1987-09-03T16:18:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "JOL"}, "text": "ENDNET:MACRO;\n DCL %SYSNETID INIT '' EXT;\n DCL %SYSJOBS1 INIT '' EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSJOBS2 INIT '' EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSNTINC INIT('') EXT; /* KEEPS INCLUDE DATA SET FOR JOBS      */\n DCL %SYSNTMAC INIT('') EXT; /* KEEPS JOL MACRO DATA SETS FOR JOBS   */\n DCL %NAMES,%OPS INIT ''; /* LOCAL VARIABLE */\n DCL %L,%K     INIT '';   /* LOCAL VARIABLE */\n IF %SYSNETID=''\n THEN DO;\n    STOP 'ENDNET COMMAND EXECUTED WITHOUT PRECEEDING NETWORK COMMAND';\n    EXIT;\n END;\n WRITE FILE($$JCODE) FROM('    SAVESYMS');\n %NAMES=SUBSTR(SYSJOBS1,2);     /* DROP FIRST COMMA */\n LABEL OUTPUT;\n %OPS='';\n %L=LENGTH(NAMES);\n IF %L>50\n THEN DO;\n      %OPS=SUBSTR(NAMES,1,50); /* TAKE FIRST 50 CHARACTERS */\n      %NAMES=SUBSTR(NAMES,51); /* REDUCE INPUT STRING BY 50 CHARS */\n      %K=INDEX(NAMES,',');     /* FIND A COMMA IN STRING THAT'S LEFT */\n      IF %K\u00ac=0                 /* THERE IS A COMMA */\n      THEN DO;\n          %Z=SUBSTR(NAMES,K);  /* SET Z TO STRING INCLUDING COMMA */\n          %OPS='%OPS%Z';       /* ADD TO OPS (OUTPUT STRING */\n          %K=%K+1;\n          %NAMES=SUBSTR(NAME,K); /* REMOVE THAT BIT NOW */\n      END;\n      ELSE DO;\n          %NAMES='%NAMES%OPS';\n          %OPS='';\n      END;\n      WRITE FILE($$JCODE) FROM('        %OPS');\n      IF %NAMES\u00ac='' THEN REDO OUTPUT;\n END;\n WRITE FILE($$JCODE) FROM('        %NAMES');\n IF %SYSJOBS2\u00ac=''\n THEN DO;\n     %NAMES='%SYSJOBS2';\n     REDO OUTPUT;\n END;\n\n WRITE FILE($$JCODE)\n FROM('        IN %$JOLPREF.JOLNET.STATUS(%SYSNETID);');\n WRITE FILE($$JCODE) FROM('    CLOSE FILE(TEMPNET);');\n WRITE FILE($$JCODE)\n FROM('    DEQ SPFDSN/''%$JOLPREF.JOLNET.STATUS'';');\n WRITE FILE($$JCODE) FROM('    IF %%JOBSUBD=''YES''');\n WRITE FILE($$JCODE) FROM('    THEN');\n WRITE FILE($$JCODE) FROM('    EXIT JOB; /* END THIS JOB COMPILE */');\n WRITE FILE($$JCODE) FROM('    ELSE EXIT QUIT; /* QUIT, FINISHED */');\n CLOSE F($$JSTAT);           /* CLOSE SYMBOLIC FILE */\n CLOSE F($$JCODE);           /* CLOSE CODE FILE */\n FREEFILE F($$JSTAT);        /* FREE THE FILES NOW */\n FREEFILE F($$JCODE);\n CHECKNET %SYSNETID;\n %SYSNETID='';\n END ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENDNETTP": {"ttr": 9739, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\t\\x0f\\x00\\x87\\t\\x0f\\x13\\x08\\x00\\x16\\x00\\x16\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-03-31T00:00:00", "modifydate": "1987-03-31T13:08:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "JOL"}, "text": " /*****************************************************************/\n /*****IF %AFTER SET, THEN WRITE OUT OPTIONS, AND END *************/\n /*****************************************************************/\n       IF %AFTER\u00ac=0\n       THEN DO;\n           IF %UMAC\u00ac=' ' THEN ;\n           ELSE IF %SYSUID \u00ac= ' ' THEN %UMAC = '%SYSUID.JOL';\n           %ULIB='%ULIB || CLARKE.JOLNET.CODE';\n           IF %ULIB\u00ac=' ' THEN ;\n           ELSE IF %SYSUID \u00ac= ' ' THEN %ULIB = '%SYSUID.JOL';\n\n           IF %SYMS\u00ac='' THEN WRITE FILE($$JCODE)\n                    FROM('        SYMS(%SYMS)');\n           IF %ULIB\u00ac='' THEN WRITE FILE($$JCODE)\n                    FROM('        ULIB(%ULIB)');\n           IF %MLIB\u00ac='' THEN WRITE FILE($$JCODE)\n                    FROM('        MLIB(%MLIB)');\n           WRITE FILE($$JCODE)\n           FROM (\n            '        %NPI %PO %LET %PE %PM %PJ %NP %NOCAT %NOCATGDG;');\n           IF 1=1 THEN EXIT;\n       END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ERADBF": {"ttr": 9741, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "eradbf:macro;     /* MVS Remove data set from Jol DBF */\n\ndcl %f1                    init('');\ndcl %disk                  init('');\n\n/* If User codes a parameter, then execute the command immediately,\n   otherwise we will show the user a menu */\n\n   if %list(1) \u00ac= '' then %f1='%list(1)';\n\n   if %f1 \u00ac= '' then goto gotfile;\n\nloop:\n\nPanel  box\n/( ctr hi 'Jol Remove Data Set From Jol Data Base of Data Sets')\n///\n/('  You can Type the Name of the Data Sets You Wish to Remove,')\n ('  OR You can Select the Data Set from the Jol Data Set Data Base.')\n////\n/\n('         Remove File   ====> ',f1,44,'%f1')\n////\n\nhelpline\n('Enter Starts Processing, F3 Exits, F4 shows Files.');\n\ncheckf1:\n     if Syspfk=3 then exit;\n\n     if %syspfk=4\n     then do;\n         showdbf  all 'File to Remove';\n         f1='%showsel';\n     end;\n     if f1=''\n     then do;\n         panel reread from f1 'You must supply a file name';\n         goto checkf1;\n     end;\n\n   if syspfk=3 then exit;   /* Back to Caller */\n\ngotfile:\n   if %BUILDJOB='YES'\n   then do;\n       write 'Remove from Data Base not Supported in BUILDJOB Mode';\n       exit;\n   end;\n   dbfdel '%f1';\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EXEC": {"ttr": 9743, "alias": false, "halfwords": 4, "notes": 0, "parms": "b' \\x01\\x05 '", "ispf": false, "text": "/**********************************************************************\n\n       Jol Universal Command Language.\n       Copyright 1969-1989 CCS-JOL Pty. Ltd.,\n                 2/31 Queen St, Melbourne, Australia, 3000.\n\n\n       E X E C    C O M M A N D\n\n       This macro executes a program.\n\n       It:\n          1. Gets details for the program to be executed.\n             These details are built using the Jol REGISTER\n             command.\n\n          2. Gets details for the data sets to be used.\n             These details are built using the Jol ADDDS\n             command.\n\nHistory:\n\n       Last Update C. Clarke 23/8/89:  Add Data Set Data Base.\n       Last Update C. Clarke 11/1/91:  Change for C version.\n       Last Update C. Clarke 17/1/91:  Change to output Jol text\n                                       for running later if executed\n                                       from BUILDJOB.\n\n       Last Update C. Clarke 20/1/91:  Added Sort work Areas\n\n**********************************************************************/\n\n\n   EXEC:MACRO(\n          %LOAD=,              /*NO DEFAULT LOAD MODULE LIBRARY      */\n          %PARM=);\n\n    DCL %F1,%F2,%F3,%F4,%F5,%F6,%F7,%F8,%F9,%F10   /* DDNAME List    */\n        %F11,%F12,%F13,%F14,%F15,%F16,%F17,%F18,%F19,%F20\n        %F21,%F22,%F23,%F24,%F25  INIT '';\n    DCL %I1,%I2,%I3,%I4,%I5,%I6,%I7,%I8,%I9,%I10   /* Recfm  List    */\n        %I11,%I12,%I13,%I14,%I15,%I16,%I17,%I18,%I19,%I20\n        %I21,%I22,%I23,%I24,%I25  INIT '';\n    dcl %RETDSN   init '';\n    dcl %SORTNUM  init '';\n    dcl %SORTSIZE init '';\n    dcl %work  init '';\n    dcl %work1 init '';\n    dcl %work2 init '';\n    dcl %syswork  init '';\n    dcl %syswork2 init '';\n    DCL %ERROR,%PGMNAME                      INIT '';\n    dcl %title INIT 'Jol Execute Program Screen';\n\n    dcl %runprogs  init('');\n    dcl %panels    external init ('');   /* Global for other commands*/\n\n        IF %LIST(1)\u00ac='' THEN %PGMNAME='%LIST(1)';\n        IF %PGMNAME=''\n        then do;\n           if %panels='OFF'\n           then do;\n              signal error 3,'No Program Name Specified for EXEC';\n              exit;\n           end;\npan2:\n  PANEL %boxcolor box (ctr %hedcolor '%TITLE')\n   //\n      (ctr 'You must specify the name of the program to run.')\n      //\n      (ctr 'OR you can press F4 and select the program')\n      (ctr 'from a list of Registered Programs.')\n      /////\n      ('           Enter Program to Execute ====>',pgmname,8,'%pgmname')\n helpline ('Press F4 to View Program Names from your INClude List')\n   ;\n            IF SYSPFK = 4\n            then do;\n               showmem jolpgms 'Select Program to Run';\n               if %lastcc\u00ac=0\n               then do;\n                   panel %boxcolor box\n                    ////////// (ctr hi 'File Not Found')\n                               (ctr hi 'or None Selected');\n                   %lastcc=0;\n                   goto pan2;\n               end;\n               pgmname= showsel;\n               if index(pgmname,'.') \u00ac=0\n               then pgmname=substr(pgmname,1, index(pgmname,'.') -1);\n\n         /*    redo pan2; */\n            end;\n            IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n                      /* NOW MAKE THE PROGAM NAME 8 CHARACTERS LONG */\n            %pgmname='%pgmname         ';\n            %runprogs=runprogs||SUBSTR(pgmname,1,8);\n\n        END;\n\n        IF %LIST(2)\u00ac='' THEN %I1='%LIST(2)';\n        IF %LIST(3)\u00ac='' THEN %I2='%LIST(3)';\n        IF %LIST(4)\u00ac='' THEN %I3='%LIST(4)';\n        IF %LIST(5)\u00ac='' THEN %I4='%LIST(5)';\n        IF %LIST(6)\u00ac='' THEN %I5='%LIST(6)';\n        IF %LIST(7)\u00ac='' THEN %I6='%LIST(7)';\n        IF %LIST(8)\u00ac='' THEN %I7='%LIST(8)';\n        IF %LIST(9)\u00ac='' THEN %I8='%LIST(9)';\n        IF %LIST(10)\u00ac='' THEN %I9='%LIST(10)';\n        IF %LIST(11)\u00ac='' THEN %I10='%LIST(11)';\n        IF %LIST(12)\u00ac='' THEN %I11='%LIST(12)';\n        IF %LIST(13)\u00ac='' THEN %I12='%LIST(13)';\n        IF %LIST(14)\u00ac='' THEN %I13='%LIST(14)';\n        IF %LIST(15)\u00ac='' THEN %I14='%LIST(15)';\n        IF %LIST(16)\u00ac='' THEN %I15='%LIST(16)';\n        IF %LIST(17)\u00ac='' THEN %I16='%LIST(17)';\n        IF %LIST(18)\u00ac='' THEN %I17='%LIST(18)';\n        IF %LIST(19)\u00ac='' THEN %I18='%LIST(19)';\n        IF %LIST(20)\u00ac='' THEN %I19='%LIST(20)';\n        IF %LIST(21)\u00ac='' THEN %I20='%LIST(21)';\n        IF %LIST(22)\u00ac='' THEN %I21='%LIST(22)';\n        IF %LIST(23)\u00ac='' THEN %I22='%LIST(23)';\n        IF %LIST(24)\u00ac='' THEN %I23='%LIST(24)';\n        IF %LIST(25)\u00ac='' THEN %I24='%LIST(25)';\ntesthere:\n        if %system='SHELL'\n        then do;\n            getfirst '%PGMNAME.pgm';  /* Make sure its there.    */\n        end;\n        else do;\n            %sysdsn='%$jolpgms(%pgmname)';\n            include '%sysdsn';\n            if %pgmname=''            /* not found */\n            then do;\n                %pgmname='%sysdsn';\n                %sysdsn='';\n            end;\n        end;\n        if %sysdsn =''\n        then do;\n           if %panels='OFF'\n           then do;\n              signal error 3,'Cannot Find Details for %pgmname';\n              exit;\n           end;\n           panel / (ctr %hedcolor 'Jol EXEC Command')\n           ////////\n           (ctr flash 'Cannot Find Program ' hi '%pgmname' )\n         //('             Do You wish to Register it ? ' ,f1, 1 ,'Y')\n           helpline ('F3 Exits');\n           if %syspfk = 3 | %syspfk = 15 then exit;\n           if %f1='Y'\n           then do;\n              register %pgmname;\n              goto testhere;\n           end;\n           else goto pan2;\n        end;\n\n        if %system='SHELL' then\n        INCLUDE '%PGMNAME.pgm';    /* GET REGISTERED DETAILS  */\n\n/* Check if we have data set names that match dd names.\n   If so, don't put up a PANEL.*/\n\n        if %f1 \u00ac='' & %i1 = '' then goto dopan1;\n        if %f2 \u00ac='' & %i2 = '' then goto dopan1;\n        if %f3 \u00ac='' & %i3 = '' then goto dopan1;\n        if %f4 \u00ac='' & %i4 = '' then goto dopan1;\n        if %f5 \u00ac='' & %i5 = '' then goto dopan1;\n\n        cls;\n /*     execstat %pgmname 'Checking All DDnames';  */\n\n        goto skippan1;\ndopan1:\n\n        if %panels='OFF'\n        then do;\n           signal error 3,'Insufficent Files specified for EXEC';\n           exit;\n        end;\n\n    PANEL\n        / (ctr %hedcolor\n               'Please Enter Details for Program 'hi'%PGMNAME:')\n            / ('       From Load Library ===>',LOAD,44,'%LOAD')\n            / ('       Using Parameter   ===>',PARM,100,'')\n            / (hi\n ' Now Please Enter Data Set Names or Identifiers next to the DDnames')\n            / (hi'      %f1',I1,52,'%I1',11,1,11,30)\n              (hi'      %f2',I2,52,'%I2',12,1,12,30)\n              (hi'      %f3',I3,52,'%I3',13,1,13,30)\n              (hi'      %f4',I4,52,'%I4',14,1,14,30)\n              (hi'      %f5',I5,52,'%I5',15,1,15,30)\n/(' Notes: 1. You can use ''Printer'' or ''Sysout'' for WRITES Files.')\n ('        2. Or you can code a Data Set Name ')\n ('        3. Jol may ask you for Record Format, Space etc later.')\n    helpline\n('F3 Exits with No Action. F4 Shows a List of Data Sets and Printers')\n ;\n\nchkpan1:\n\nlabel check1;\n\n     if %syspfk = 3 | %syspfk = 15 then exit;        /* J60 */\n     if %syspfk=4\n     then do;\n        if %f1 \u00ac= '' then do; $getexds '%f1'; i1='%showsel'; end;\n        if %f2 \u00ac= '' then do; $getexds '%f2'; i2='%showsel'; end;\n        if %f3 \u00ac= '' then do; $getexds '%f3'; i3='%showsel'; end;\n        if %f4 \u00ac= '' then do; $getexds '%f4'; i4='%showsel'; end;\n        if %f5 \u00ac= '' then do; $getexds '%f5'; i5='%showsel'; end;\n     end;\n\n     %i=1;\n\n /* This next piece of code gets the value of the 'arrays'.   */\nlabel check1a;\n       seta='tempdd=''%%f%i''';\n       set %SETA;\n       seta=caps('SET  tempdsid=''%%i%i''');\n       %SETA;\n       if %tempdd\u00ac=''                     /* Is there a DDNAME ? */\n       then do;                           /* Yes ...             */\n\n   /* Check if the parameter is a DSID or a DATA SET */\n\n          if %tempdsid=''                   /* Check if a DSNAME   */\n          then do;\n              panel reread from i%i\n                    'You must enter a DSID or DSNAME';\n                    redo check1;\n          end;\n          %i=%i+1;\n          if i<6 then\n             redo check1a;\n       end;\n\nskippan1:\n\n        if %f6 \u00ac='' & %i6 = '' then goto dopan2;\n        if %f7 \u00ac='' & %i7 = '' then goto dopan2;\n        if %f8 \u00ac='' & %i8 = '' then goto dopan2;\n        if %f9 \u00ac='' & %i9 = '' then goto dopan2;\n        if %f10\u00ac='' & %i10= '' then goto dopan2;\n        if %f11\u00ac='' & %i11= '' then goto dopan2;\n        if %f12\u00ac='' & %i12= '' then goto dopan2;\n        if %f13\u00ac='' & %i13= '' then goto dopan2;\n        goto skippan2;\n\ndopan2:\n\n\n    if %panels='OFF'\n    then do;\n       signal error 3,'Insufficent Files specified for EXEC';\n       exit;\n    end;\n\n    if %f6\u00ac=''\n    then do;\n    PANEL\n        / (ctr %hedcolor\n ('Please Enter Data Set Names or Identifiers next to the DDnames')\n            / (hi'      %f6' ,I6 ,52,'%I6' , 3,1, 3,30)\n              (hi'      %f7' ,I7 ,52,'%I7' , 4,1, 4,30)\n              (hi'      %f8' ,I8 ,52,'%I8' , 5,1, 5,30)\n              (hi'      %f9' ,I9 ,52,'%I9' , 6,1, 6,30)\n              (hi'      %f10',I10,52,'%I10', 7,1, 7,30)\n              (hi'      %f11',I11,52,'%I11', 8,1, 8,30)\n              (hi'      %f12',I12,52,'%I12', 9,1, 9,30)\n              (hi'      %f13',I13,52,'%I13',10,1,10,30)\n///\n/(' Notes: 1. You can use ''Printer'' or ''Sysout'' for WRITES Files.')\n ('        2. Or you can code a Data Set Name ')\n/('           Jol may ask you for Record Format, Space etc later.')\n    helpline\n('F3 Exits with No Action. F4 Selects from a List of Data Sets')\n ;\n\nlabel check2;\n\n     if %syspfk = 3 | %syspfk = 15 then exit;        /* J60 */\n     if %syspfk=4\n     then do;\n        if %f6 \u00ac= '' then do; $getexds '%f6'; i6='%showsel'; end;\n        if %f7 \u00ac= '' then do; $getexds '%f7'; i7='%showsel'; end;\n        if %f8 \u00ac= '' then do; $getexds '%f8'; i8='%showsel'; end;\n        if %f9 \u00ac= '' then do; $getexds '%f9'; i9='%showsel'; end;\n        if %f10\u00ac= '' then do; $getexds '%f10';i10='%showsel'; end;\n        if %f11\u00ac= '' then do; $getexds '%f11';i11='%showsel'; end;\n        if %f12\u00ac= '' then do; $getexds '%f12';i12='%showsel'; end;\n        if %f13\u00ac= '' then do; $getexds '%f13';i13='%showsel'; end;\n\n     end;\n\n     %i=6;\n\n /* This next piece of code gets the value of the 'arrays'.   */\nlabel check2a;\n     %setx='F'||'%i';                   /* get F(i) */\n     %seta='SET  tempdd=''%%%setx''';\n     %SETA;\n     %setx='I'||'%i';                   /* Get i(i)  */\n     %seta='SET  tempdsid=''%%%setx''';\n     %SETA;\n     if %tempdd\u00ac=''                     /* Is there a DDNAME ? */\n     then do;                           /* Yes ...             */\n\n /* Check if the parameter is a DSID or a DATA SET */\n\n        if %tempdsid=''                   /* Check if a DSNAME   */\n        then do;\n            panel reread from i%i\n                  'You must enter a DSID or DSNAME';\n                  redo check2;\n        end;\n        %i=%i+1;\n        if i<14 then\n           redo check2a;\n     end;\n\n\n\n     end;\n\nskippan2:\n\n\n        if %f14\u00ac='' & %i14= '' then goto dopan3;\n        if %f15\u00ac='' & %i15= '' then goto dopan3;\n        if %f16\u00ac='' & %i16= '' then goto dopan3;\n        if %f17\u00ac='' & %i17= '' then goto dopan3;\n        if %f18\u00ac='' & %i18= '' then goto dopan3;\n        if %f19\u00ac='' & %i19= '' then goto dopan3;\n        if %f20\u00ac='' & %i20= '' then goto dopan3;\n        if %f21\u00ac='' & %i21= '' then goto dopan3;\n        if %f22\u00ac='' & %i22= '' then goto dopan3;\n        goto skippan3;\n\ndopan3:\n\n    if %panels='OFF'\n    then do;\n       signal error 3,'Insufficent Files specified for EXEC';\n       exit;\n    end;\n\n    if %f14\u00ac=''\n    then do;\n    PANEL\n        / (ctr %hedcolor\n ('Please Enter Data Set Names or Identifiers next to the DDnames')\n        /     (  '      %f14',I14,52,'%I14',04,1,04,30)\n              (  '      %f15',I15,52,'%I15',05,1,05,30)\n              (  '      %f16',I16,52,'%I16',06,1,06,30)\n              (  '      %f17',I17,52,'%I17',07,1,07,30)\n              (  '      %f18',I18,52,'%I18',08,1,08,30)\n              (  '      %f19',I19,52,'%I19',09,1,09,30)\n              (  '      %f20',I20,52,'%I20',10,1,10,30)\n              (  '      %f21',I21,52,'%I21',11,1,11,30)\n              (  '      %f22',I22,52,'%I22',12,1,12,30)\n    /*        (  '      %f23',I23,52,'%I23',13,1,13,30)\n              (  '      %f24',I24,52,'%I24',14,1,14,30)\n              (  '      %f25',I25,52,'%I25',15,1,15,30) */\n//\n/(' Notes: 1. You can use ''Printer'' or ''Sysout'' for WRITES Files.')\n ('        2. Or you can code a Data Set Name ')\n/('           Jol may ask you for Record Format, Space etc later.')\n    helpline\n('F3 Exits with No Action. F4 Selects from a List of Data Sets')\n ;\n\nlabel check3;\n\n     if %syspfk = 3 | %syspfk = 15 then exit;        /* J60 */\n     if %syspfk=4\n     then do;\n        if %f14\u00ac= '' then do; $getexds '%f14';i14='%showsel'; end;\n        if %f15\u00ac= '' then do; $getexds '%f15';i15='%showsel'; end;\n        if %f16\u00ac= '' then do; $getexds '%f16';i16='%showsel'; end;\n        if %f17\u00ac= '' then do; $getexds '%f17';i17='%showsel'; end;\n        if %f18\u00ac= '' then do; $getexds '%f18';i18='%showsel'; end;\n        if %f19\u00ac= '' then do; $getexds '%f19';i19='%showsel'; end;\n        if %f20\u00ac= '' then do; $getexds '%f20';i20='%showsel'; end;\n        if %f21\u00ac= '' then do; $getexds '%f21';i21='%showsel'; end;\n        if %f22\u00ac= '' then do; $getexds '%f22';i22='%showsel'; end;\n        if %f23\u00ac= '' then do; $getexds '%f23';i23='%showsel'; end;\n        if %f24\u00ac= '' then do; $getexds '%f24';i24='%showsel'; end;\n        if %f25\u00ac= '' then do; $getexds '%f25';i25='%showsel'; end;\n\n     end;\n\n     %i=14;\n\n /* This next piece of code gets the value of the 'arrays'.   */\nlabel check3a;\n     %setx='F'||'%i';                   /* get F(i) */\n     %seta='SET  tempdd=''%%%setx''';\n     %SETA;\n     %setx='I'||'%i';                   /* Get i(i)  */\n     %seta='SET  tempdsid=''%%%setx''';\n     %SETA;\n     if %tempdd\u00ac=''                     /* Is there a DDNAME ? */\n     then do;                           /* Yes ...             */\n\n /* Check if the parameter is a DSID or a DATA SET */\n\n        if %tempdsid=''                   /* Check if a DSNAME   */\n        then do;\n            panel reread from i%i\n                  'You must enter a DSID or DSNAME';\n                  redo check3;\n        end;\n        %i=%i+1;\n        if i<25 then\n           redo check3a;\n     end;\n\n\n     end;\n\nskippan3:\n\n/* This next section of code calls CHECKDS to do the following:\n\n     1. If the name typed in is a data set name (x.y) nothing is done.\n\n     2. For DSIDs, it includes the data set definition from the data\n        set data base.\n\n     3. If the data set is a VSAM data set, it call CREATEVS to\n        allocate the data set, and set the disposition to UPDATES\n        so that Jol won't try to reallocate the data set.\n*/\n\n DCL %SYSVSAM1  INIT('') EXT; /* KEEPS LIST OF VSAM DATA SETS in JOB */\n DCL %SYSVSAM2  INIT('') EXT; /* As above...                         */\n\n     %i=1;\n\n /* This next piece of code gets the value of the 'arrays'.   */\nlabel check4;\n     %setx='F'||'%i';                   /* get F(i) */\n     %seta='SET  tempdd=''%%%setx''';\n     %SETA;\n     %setx='I'||'%i';                   /* Get i(i)  */\n     %seta='SET  tempdsid=''%%%setx''';\n     %SETA;\n     if %tempdd\u00ac=''                     /* Is there a DDNAME ? */\n     then do;                           /* Yes ...             */\n\n /* Check if the parameter is a DSID or a DATA SET */\n\n        %syswork=index(tempdsid,'.');   /* Check if a DSNAME   */\n        if %syswork=0                   /* Here is a DSID or Prn */\n        then do;\n            %syswork=index(tempdsid,' '); /* Find a blank          */\n            %work=substr('%tempdsid',1,%syswork);\n            if %work='SYSOUT'\n            | %work='PRINTER'\n            then do;\n                %work=substr('%tempdsid',%syswork);\n                dcl p%i printer %work;\n                set i%i='p%i ';\n                %i=%i+1;\n                redo check4;\n            end;\n        end;\n        else do;                        /* DATASET here        */\n            %syswork=index(tempdd,' WRITE');\n            %syswork2=index(tempdd,' MOD');\n            if %syswork\u00ac=0              /* Write Data Set here */\n            |  %syswork2\u00ac=0             /* Mod   Data Set here */\n            then do;                    /* Check if it is VSAM */\nrefind:\n    /*         execstat %pgmname 'Searching Data Base for'\n                       '%tempdsid';                  */\n               dbffind  '%tempdsid';    /* Get data set details*/\n\n               if %lastcc\u00ac=0\n               then do;\n\nnotfnd:\n                   %syspfk=0;\n                   $chkdbf '%tempdsid';\n                      if %syspfk\u00ac=0 & %syspfk\u00ac=3\n                      then goto notfnd;\n /*                   if %syspfk\u00ac=5 then goto notfnd; */\n               end;\n\n               if %zvsamtxt \u00ac= ''\n               &  %buildjob \u00ac= 'YES'\n               then do;\n                    vsamcrea %tempdsid;\n                    %work=substr(f%i,1,9);\n                    set f%i='%work Updates ';\n               end;\n            end;\n        end;\n        %i=%i+1;\n        redo check4;\n     end;\n\n     if %BUILDJOB \u00ac= 'YES'\n     then do;\n        if %system = 'SHELL'\n        then do;\n            run %PGMNAME /* PROG %LOAD */\n                %I1  %I2   %I3  %I4   %I5\n                %I6  %I7   %I8  %I9   %I10\n                %I11 %I12  %I13 %I14  %I15\n                %I16 %I17  %I18 %I19  %I20\n                %I21 %I22  %I23 %I24  %I25\n             ;\n            exit;\n        end;\n\n        DCL %SRTWRK, %SRTWRK2 INIT '';\n        dcl %SRTUNIT init ' Unit=SYSDA ';\n        IF %sortnum\u00ac=''\n        then do;\n            %SRTWRK = 'SORTLIB READS SYS1.SORTLIB '\n                    || 'SYSOUT  WRITES SORTPRNT '\n                    || 'SORTMSG WRITES SORTPRNT  ';\n            %SRTWRK='%SRTWRK SORTWK01 WRITES SORTWK01 ';\n            %SRTWRK='%SRTWRK SORTWK02 WRITES SORTWK02 ';\n            %SRTWRK='%SRTWRK SORTWK03 WRITES SORTWK03 ';\n            IF %sortnum>3 THEN\n               %SRTWRK2=' SORTWK04 WRITES SORTWK04';\n            IF %sortnum>4 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK05 WRITES SORTWK05';\n            IF %sortnum>5 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK06 WRITES SORTWK06';\n            IF %sortnum>6 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK07 WRITES SORTWK07';\n            IF %sortnum>7 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK08 WRITES SORTWK08';\n            IF %sortnum>8 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK09 WRITES SORTWK09';\n            DCL SORTPRNT PRINTER NODCB ;\n            DCL SORTWK01 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK02 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK03 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK04 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK05 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK06 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK07 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK08 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK09 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n        end;\n        DCL %PGMNAME PROG %LOAD\n            %F1  %I1   %F2  %I2   %F3  %I3   %F4  %I4   %F5  %I5\n            %F6  %I6   %F7  %I7   %F8  %I8   %F9  %I9   %F10 %I10\n            %F11 %I11  %F12 %I12  %F13 %I13  %F14 %I14  %F15 %I15\n            %F16 %I16  %F17 %I17  %F18 %I18  %F19 %I19  %F20 %I20\n            %F21 %I21  %F22 %I22  %F23 %I23  %F24 %I24  %F25 %I25\n            %SRTWRK %SRTWRK2\n         ;\n\n         IF %PARM='' THEN;ELSE %PARM='PARM=''%PARM''';\n         IF %ERROR=1  THEN  STOP 'Program Will Not Be Executed';\n         ELSE\n%SYSLABEL:\n           RUN %PGMNAME %PARM /* %OPT1 %OPT2 %OPT3 %OPT4 %OPT5*/;\n\n         exit;                   /* quit the macro */\n\n     end;\n     if %BUILDJOB = 'YES'\n     then do;\n\n          if %THISSTEP \u00ac='' then\n          BLD04P                  '%thisstep:';\n          BLD04P                  '   Exec  %PGMNAME ';\n          IF %PARM='' THEN\n                      BLD04P      '         Load=%LOAD ';\n          ELSE DO;\n                      BLD04P      '         Load=%LOAD ';\n                      BLD04P      '         Parm=(''%PARM '') ';\n          END;\n   /* Do the files */\n          if %i1 \u00ac='' then BLD04P '        %i1';\n          if %i2 \u00ac='' then BLD04P '        %i2';\n          if %i3 \u00ac='' then BLD04P '        %i3';\n          if %i4 \u00ac='' then BLD04P '        %i4';\n          if %i5 \u00ac='' then BLD04P '        %i5';\n          if %i6 \u00ac='' then BLD04P '        %i6';\n          if %i7 \u00ac='' then BLD04P '        %i7';\n          if %i8 \u00ac='' then BLD04P '        %i8';\n          if %i9 \u00ac='' then BLD04P '        %i9';\n          if %i10\u00ac='' then BLD04P '        %i10';\n          if %i11\u00ac='' then BLD04P '        %i11';\n          if %i12\u00ac='' then BLD04P '        %i12';\n          if %i13\u00ac='' then BLD04P '        %i13';\n          if %i14\u00ac='' then BLD04P '        %i14';\n          if %i15\u00ac='' then BLD04P '        %i15';\n          if %i16\u00ac='' then BLD04P '        %i16';\n          if %i17\u00ac='' then BLD04P '        %i17';\n          if %i18\u00ac='' then BLD04P '        %i18';\n          if %i19\u00ac='' then BLD04P '        %i19';\n          if %i20\u00ac='' then BLD04P '        %i20';\n          if %i21\u00ac='' then BLD04P '        %i21';\n          if %i22\u00ac='' then BLD04P '        %i22';\n          if %i23\u00ac='' then BLD04P '        %i23';\n          if %i24\u00ac='' then BLD04P '        %i24';\n          if %i25\u00ac='' then BLD04P '        %i25';\n          BLD04P '         ;';\n\n     end;\n  END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EXECO": {"ttr": 9993, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x88$_\\x00\\x90\\x01o\\x17\\x15\\x00S\\x00S\\x00\\x04\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1988-09-01T00:00:00", "modifydate": "1990-01-16T17:15:00", "lines": 83, "newlines": 83, "modlines": 4, "user": "JOL"}, "text": "    /* THIS IS THE JOL EXEC COMMAND  */\n    /* SEE THE REGISTER COMMAND FOR MORE DETAILS !!!!! */\n   EXEC:MACRO(\n          %LOAD=,              /*NO DEFAULT LOAD MODULE LIBRARY      */\n          %PARM=);\n\n    DCL %I1,%I2,%I3,%I4,%I5,%I6,%I7,%I8,%I9,%I10\n        %I11,%I12,%I13,%I14,%I15,%I16,%I17,%I18,%I19,%I20\n        %I21,%I22,%I23,%I24,%I25  INIT '';\n    DCL %F1,%F2,%F3,%F4,%F5,%F6,%F7,%F8,%F9,%F10\n        %F11,%F12,%F13,%F14,%F15,%F16,%F17,%F18,%F19,%F20\n        %F21,%F22,%F23,%F24,%F25  INIT '';\n    DCL %ERROR,%PGMNAME                      INIT '';\n    IF %LIST(1)\u00ac='' THEN %PGMNAME='%LIST(1)';\n    IF %PGMNAME=''\n    then do;\n    panel ////////////\n    (ctr 'Please Enter the Name of the Program You Want to EXECUTE')\n    //('',PGMNAME,8,'');\n    end;\n    IF %PGMNAME='' THEN DO;\n        STOP 'NO PROGRAM NAME TO EXECUTE....';\n        exit;\n    END;\n    DCL   %OPT1,%OPT2,%OPT3,%OPT4,%OPT5\n                                  INIT '';\n     IF %LIST(2)\u00ac='' THEN %I1='%LIST(2)';\n     IF %LIST(3)\u00ac='' THEN %I2='%LIST(3)';\n     IF %LIST(4)\u00ac='' THEN %I3='%LIST(4)';\n     IF %LIST(5)\u00ac='' THEN %I4='%LIST(5)';\n     IF %LIST(6)\u00ac='' THEN %I5='%LIST(6)';\n     IF %LIST(7)\u00ac='' THEN %I6='%LIST(7)';\n     IF %LIST(8)\u00ac='' THEN %I7='%LIST(8)';\n     IF %LIST(9)\u00ac='' THEN %I8='%LIST(9)';\n     IF %LIST(10)\u00ac='' THEN %I9='%LIST(10)';\n     IF %LIST(11)\u00ac='' THEN %I10='%LIST(11)';\n     IF %LIST(12)\u00ac='' THEN %I11='%LIST(12)';\n     IF %LIST(13)\u00ac='' THEN %I12='%LIST(13)';\n     IF %LIST(14)\u00ac='' THEN %I13='%LIST(14)';\n     IF %LIST(15)\u00ac='' THEN %I14='%LIST(15)';\n     IF %LIST(16)\u00ac='' THEN %I15='%LIST(16)';\n     IF %LIST(17)\u00ac='' THEN %I16='%LIST(17)';\n     IF %LIST(18)\u00ac='' THEN %I17='%LIST(18)';\n     IF %LIST(19)\u00ac='' THEN %I18='%LIST(19)';\n     IF %LIST(20)\u00ac='' THEN %I19='%LIST(20)';\n     IF %LIST(21)\u00ac='' THEN %I20='%LIST(21)';\n     IF %LIST(22)\u00ac='' THEN %I21='%LIST(22)';\n     IF %LIST(23)\u00ac='' THEN %I22='%LIST(23)';\n     IF %LIST(24)\u00ac='' THEN %I23='%LIST(24)';\n     IF %LIST(25)\u00ac='' THEN %I24='%LIST(25)';\n     INCLUDE  %PGMNAME;       /* GET REGISTERED DETAILS  */\n\n    PANEL\n        / (\n ('             Please enter Details for Program ''%PGMNAME'':')\n/('          From Load Library ===>',LOAD,44,'%LOAD')\n/('          Using Parameter   ===>',PARM,100)\n/(\n  ' Now Please Enter Data Set Names or Identifiers next to the DDnames')\n            / (  '      %f1',I1,52,'%I1',13,1,13,30)\n              (  '      %f2',I2,52,'%I2',14,1,14,30)\n              (  '      %f3',I3,52,'%I3',15,1,15,30)\n              (  '      %f4',I4,52,'%I4',16,1,16,30)\n              (  '      %f5',I5,52,'%I5',17,1,17,30)\n              (  '      %f6',I6,52,'%I6',18,1,18,30)\n              (  '      %f7',I7,52,'%I7',19,1,19,30)\n              (  '      %f8',I8,52,'%I8',20,1,20,30)\n              (  '      %f9',I9,52,'%I9',21,1,21,30)\n              (  '      %f10',I10,52,'%I10',22,1,22,30)\n ;\n     DCL %PGMNAME PROG %LOAD\n        %F1 %I1  %F2 %I2   %F3 %I3  %F4 %I4  %F5 %I5\n        %F6 %I6  %F7 %I7   %F8 %I8  %F9 %I9  %F10 %I10\n        %F11 %I11  %F12 %I12  %F13 %I13  %F14 %I14  %F15 %I15\n        %F16 %I16  %F17 %I17  %F18 %I18  %F19 %I19  %F20 %I20\n        %F21 %I21  %F22 %I22  %F23 %I23  %F24 %I24  %F25 %I25\n     ;\n     IF %PARM='' THEN;ELSE %PARM='PARM=''%PARM''';\n     IF %ERROR=1  THEN  STOP 'PROGRAM WILL NOT BE EXECUTED';\n     ELSE\n/*   %SYSLABEL: */\n           RUN %PGMNAME %PARM  %OPT1 %OPT2 %OPT3 %OPT4 %OPT5;\n  END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EXECOLD": {"ttr": 10243, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x132\\x00\\x93\\x00\\x93\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:32:00", "lines": 147, "newlines": 147, "modlines": 0, "user": "JOL"}, "text": "   /* THIS IS THE JOL EXEC COMMAND  */\n   /* USING THE REGISTER COMMAND, ONE CAN DEFINE TO JOL PROGRAM\n      CHARACTERISTICS AND OTHER DETAILS OF THESE PROGRAMS, SUCH AS\n      THE LANGUAGE THEY ARE CODED IN, COMPILER OPTIONS NORMALLY USED,\n      INPUTS AND OUTPUTS AND SO ON.\n\n      THEN THE JOL COMPILE, AND EXEC COMMANDS CAN BE SIMPLY USED TO\n      COMPILE, LINK AND RUN THESE PROGRAMS.\n\n      FOR EXAMPLE, THE COMMAND\n\n           REGISTER MASTUPDT  LANG PLI\n                    FUNC 'THIS PROGRAM UPDATES PAYROLL'\n                    COMPOPT 'NEST,GOSTMT'\n                    LINKOPT 'LIST,MAP'\n                    SOURCE 'APPL.SOURCE.LIB'\n                    COPYLIB 'APPL.COPY.LIB'\n                    LOAD 'APPL.LOADLIB'\n                    FILES  'MASTIN READS,MASTOUT WRITES';\n\n           WILL REGISTER THE PROGRAM TO JOL.\n\n      WHENEVER THE PROGRAM IS TO BE COMPILED, IT IS SIMPLY A\n      MATTER OF CODING:-\n\n          COMPILE MASTUPDT;\n\n      AND THE PROGRAM WILL BE COMPILED.\n\n      TO EXECUTE THE PROGRAM, SIMPLY CODE THE FOLLOWING:-\n\n          EXEC MASTUPDT 'INPUT.MASTER' 'TRANS.INPUT' 'MASTER.OUT'\n               PRINTER;\n\n       OR\n\n         DCL INPUT   DS INPUT.MASTER;\n         DCL OUTPUT  DS OUTPUT.MASTER VB 70,7000 SYSDA 10 CYLS;\n         DCL TRANSIN DS TRANS.INPUT;\n         DCL PRT     PRINTER B FORM 100 FBA 121,1210;\n         EXEC MASTUPDT INPUT,TRANSIN,OUTPUT,PRT;\n\n      IT WILL EVEN BE POSSIBLE TO HAVE STANDARD DEFAULT DATA SETS\n      THAT THE PROGRAM WILL USE, UNLESS OVER-RIDDEN, THUS IT IS\n      POSSIBLE TO SIMPLY CODE:-\n\n          EXEC MASTUPDT;\n\n     TO HAVE THE PROGRAM EXECUTED. (NOT THIS VERSION!!!!).\n\n     SEE THE JOL DOCUMENTATION FOR FURTHER DETAILS.\n\n  */\n  EXEC:MACRO(\n         %LOAD=,              /*NO DEFAULT LOAD MODULE LIBRARY      */\n         %PARM=);\n\n   DCL %I1,%I2,%I3,%I4,%I5,%I6,%I7,%I8,%I9,%I10\n       %I11,%I12,%I13,%I14,%I15,%I16,%I17,%I18,%I19,%I20\n       %I21,%I22,%I23,%I24,%I25  INIT '';\n   DCL %O1,%O2,%O3,%O4,%O5,%O6,%O7,%O8,%O9,%O10\n       %O11,%O12,%O13,%O14,%O15,%O16,%O17,%O18,%O19,%O20\n       %O21,%O22,%O23,%O24,%O25  INIT '';\n   DCL %ERROR,%PGMNAME                      INIT '';\n   IF %LIST(1) THEN %PGMNAME='%LIST(1)';\n   IF %PGMNAME='' THEN\n   PROMPT 'ENTER NAME OF PROGRAM TO BE EXECUTED',PGMNAME;\n   IF %PGMNAME='' THEN DO;\n       STOP 'NO PROGRAM NAME TO EXECUTE....';\n       ERROR=1;\n   END;\n   DCL   %OPT1,%OPT2,%OPT3,%OPT4,%OPT5\n                                 INIT '';\n    IF %LIST(2) THEN %I1='%LIST(2)';\n    IF %LIST(3) THEN %I2='%LIST(3)';\n    IF %LIST(4) THEN %I3='%LIST(4)';\n    IF %LIST(5) THEN %I4='%LIST(5)';\n    IF %LIST(6) THEN %I5='%LIST(6)';\n    IF %LIST(7) THEN %I6='%LIST(7)';\n    IF %LIST(8) THEN %I7='%LIST(8)';\n    IF %LIST(9) THEN %I8='%LIST(9)';\n    IF %LIST(10) THEN %I9='%LIST(10)';\n    IF %LIST(11) THEN %I10='%LIST(11)';\n    IF %LIST(12) THEN %I11='%LIST(12)';\n    IF %LIST(13) THEN %I12='%LIST(13)';\n    IF %LIST(14) THEN %I13='%LIST(14)';\n    IF %LIST(15) THEN %I14='%LIST(15)';\n    IF %LIST(16) THEN %I15='%LIST(16)';\n    IF %LIST(17) THEN %I16='%LIST(17)';\n    IF %LIST(18) THEN %I17='%LIST(18)';\n    IF %LIST(19) THEN %I18='%LIST(19)';\n    IF %LIST(20) THEN %I19='%LIST(20)';\n    IF %LIST(21) THEN %I20='%LIST(21)';\n    IF %LIST(22) THEN %I21='%LIST(22)';\n    IF %LIST(23) THEN %I22='%LIST(23)';\n    IF %LIST(24) THEN %I23='%LIST(24)';\n    IF %LIST(25) THEN %I24='%LIST(25)';\n    INCLUDE %PGMNAME;  /* GET REGISTERED DETAILS  */\n /* IF %O1\u00ac='' & %LIST(2)\u00ac='' THEN %O1='%O1 %LIST(2)';\n    IF %O2\u00ac='' & %LIST(3)\u00ac='' THEN %O2='%O2 %LIST(3)';\n    IF %O3\u00ac='' & %LIST(4)\u00ac='' THEN %O3='%O3 %LIST(4)';\n    IF %O4\u00ac='' & %LIST(5)\u00ac='' THEN %O4='%O4 %LIST(5)';\n    IF %O5\u00ac='' & %LIST(6)\u00ac='' THEN %O5='%O5 %LIST(6)';\n    IF %O6\u00ac='' & %LIST(7)\u00ac='' THEN %O6='%O6 %LIST(7)';\n    IF %O7\u00ac='' & %LIST(8)\u00ac='' THEN %O7='%O7 %LIST(8)';\n    IF %O8\u00ac='' & %LIST(9)\u00ac='' THEN %O8='%O8 %LIST(9)';\n    IF %O9\u00ac='' & %LIST(10)\u00ac='' THEN %O9='%O9 %LIST(10)';\n    IF %O10\u00ac='' & %LIST(11)\u00ac='' THEN %O10='%O10 %LIST(11)';\n    IF %O11\u00ac='' & %LIST(12)\u00ac='' THEN %O11='%O11 %LIST(12)';\n    IF %O12\u00ac='' & %LIST(13)\u00ac='' THEN %O12='%O12 %LIST(13)';\n    IF %O13\u00ac='' & %LIST(14)\u00ac='' THEN %O13='%O13 %LIST(14)';\n    IF %O14\u00ac='' & %LIST(15)\u00ac='' THEN %O14='%O14 %LIST(15)';\n    IF %O15\u00ac='' & %LIST(16)\u00ac='' THEN %O15='%O15 %LIST(16)';\n    IF %O16\u00ac='' & %LIST(17)\u00ac='' THEN %O16='%O16 %LIST(17)';\n    IF %O17\u00ac='' & %LIST(18)\u00ac='' THEN %O17='%O17 %LIST(18)';\n    IF %O18\u00ac='' & %LIST(19)\u00ac='' THEN %O18='%O18 %LIST(19)';\n    IF %O19\u00ac='' & %LIST(20)\u00ac='' THEN %O19='%O19 %LIST(20)';\n    IF %O20\u00ac='' & %LIST(21)\u00ac='' THEN %O20='%O20 %LIST(21)';\n    IF %O21\u00ac='' & %LIST(22)\u00ac='' THEN %O21='%O21 %LIST(22)';\n    IF %O22\u00ac='' & %LIST(23)\u00ac='' THEN %O22='%O22 %LIST(23)';\n    IF %O23\u00ac='' & %LIST(24)\u00ac='' THEN %O23='%O23 %LIST(24)';\n    IF %O24\u00ac='' & %LIST(25)\u00ac='' THEN %O24='%O24 %LIST(25)';\n    IF %O25\u00ac='' & %LIST(26)\u00ac='' THEN %O25='%O25 %LIST(26)';\n    */\n    PRINTSYM;\n    PANEL ('THE FOLLOWING DETAILS ARE KNOWN ABOUT %PGMNAME :-')\n  / ('LOAD LIBRARY ',LOAD,44,'%LOAD')\n  / ('PARAMETER    ',PARM,100,'%PARM')\n  / ('%O1',I1,40,'%I1') ('%O2',I2,40,'%I2')\n    ('%O3',I3,40,'%I3') ('%O4',I4,40,'%I4')\n    ('%O5',I5,40,'%I5') ('%O6',I6,40,'%I6')\n    ('%O7',I7,40,'%I7') ('%O8',I8,40,'%I8')\n    ('%O9',I9,40,'%I9')\n    ;\n    DCL %PGMNAME PROG %LOAD\n       %O1 %I1  %O2 %I2   %O3 %I3  %O4 %I4  %O5 %I5\n       %O6 %I6  %O7 %I7   %O8 %I8  %O9 %I9  %O10 %I10\n       %O11 %I11  %O12 %I12  %O13 %I13  %O14 %I14  %O15 %I15\n       %O16 %I16  %O17 %I17  %O18 %I18  %O19 %I19  %O20 %I20\n       %O21 %I21  %O22 %I22  %O23 %I23  %O24 %I24  %O25 %I25\n    ;\n    IF %PARM='' THEN;ELSE %PARM='PARM=''%PARM''';\n    IF %ERROR=1  THEN  STOP 'PROGRAM WILL NOT BE EXECUTED';\n    ELSE\n    %SYSLABEL:RUN %PGMNAME %PARM  %OPT1 %OPT2 %OPT3 %OPT4\n         %OPT5;\n END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXECPC": {"ttr": 10246, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "/**********************************************************************\n\n       Jol Universal Command Language.\n       Copyright 1969-1989 CCS-JOL Pty. Ltd.,\n                 2/31 Queen St, Melbourne, Australia, 3000.\n\n\n       E X E C    C O M M A N D\n\n       This macro executes a program.\n\n       It:\n          1. Gets details for the program to be executed.\n             These details are built using the Jol REGISTER\n             command.\n\n          2. Gets details for the data sets to be used.\n             These details are built using the Jol ADDDS\n             command.\n\nHistory:\n\n       Last Update C. Clarke 23/8/89:  Add Data Set Data Base.\n       Last Update C. Clarke 11/1/91:  Change for C version.\n       Last Update C. Clarke 17/1/91:  Change to output Jol text\n                                       for running later if executed\n                                       from BUILDJOB.\n\n       Last Update C. Clarke 20/1/91:  Added Sort work Areas\n\n**********************************************************************/\n\n\n   EXEC:MACRO(\n          %LOAD=,              /*NO DEFAULT LOAD MODULE LIBRARY      */\n          %PARM=);\n\n    DCL %F1,%F2,%F3,%F4,%F5,%F6,%F7,%F8,%F9,%F10   /* DDNAME List    */\n        %F11,%F12,%F13,%F14,%F15,%F16,%F17,%F18,%F19,%F20\n        %F21,%F22,%F23,%F24,%F25  INIT '';\n    DCL %I1,%I2,%I3,%I4,%I5,%I6,%I7,%I8,%I9,%I10   /* Recfm  List    */\n        %I11,%I12,%I13,%I14,%I15,%I16,%I17,%I18,%I19,%I20\n        %I21,%I22,%I23,%I24,%I25  INIT '';\n    dcl %RETDSN   init '';\n    dcl %SORTNUM  init '';\n    dcl %SORTSIZE init '';\n    dcl %work  init '';\n    dcl %work1 init '';\n    dcl %work2 init '';\n    dcl %syswork  init '';\n    dcl %syswork2 init '';\n    DCL %ERROR,%PGMNAME                      INIT '';\n    dcl %title INIT 'Jol Execute Program Screen';\n\n    dcl %runprogs  init('');\n\n        IF %LIST(1)\u00ac='' THEN %PGMNAME='%LIST(1)';\n        IF %PGMNAME=''\n        then do;\npan2:\n  PANEL %boxcolor box (ctr %hedcolor '%TITLE')\n   //\n      (ctr 'You must specify the name of the program to run.')\n      //\n      (ctr 'OR you can press F4 and select the program')\n      (ctr 'from a list of Registered Programs.')\n      /////\n      ('           Enter Program to Execute ====>',pgmname,8,'%pgmname')\n helpline ('Press F4 to View Program Names from your INClude List')\n   ;\n            IF SYSPFK = 4\n            then do;\n               showmem jolpgms 'Select Program to Run';\n               if %lastcc\u00ac=0\n               then do;\n                   panel %boxcolor box\n                    ////////// (ctr hi 'File Not Found')\n                               (ctr hi 'or None Selected');\n                   %lastcc=0;\n                   goto pan2;\n               end;\n               pgmname= showsel;\n               if index(pgmname,'.') \u00ac=0\n               then pgmname=substr(pgmname,1, index(pgmname,'.') -1);\n\n         /*    redo pan2; */\n            end;\n            IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n                      /* NOW MAKE THE PROGAM NAME 8 CHARACTERS LONG */\n            %pgmname='%pgmname         ';\n            %runprogs=runprogs||SUBSTR(pgmname,1,8);\n\n        END;\n\n        IF %LIST(2)\u00ac='' THEN %I1='%LIST(2)';\n        IF %LIST(3)\u00ac='' THEN %I2='%LIST(3)';\n        IF %LIST(4)\u00ac='' THEN %I3='%LIST(4)';\n        IF %LIST(5)\u00ac='' THEN %I4='%LIST(5)';\n        IF %LIST(6)\u00ac='' THEN %I5='%LIST(6)';\n        IF %LIST(7)\u00ac='' THEN %I6='%LIST(7)';\n        IF %LIST(8)\u00ac='' THEN %I7='%LIST(8)';\n        IF %LIST(9)\u00ac='' THEN %I8='%LIST(9)';\n        IF %LIST(10)\u00ac='' THEN %I9='%LIST(10)';\n        IF %LIST(11)\u00ac='' THEN %I10='%LIST(11)';\n        IF %LIST(12)\u00ac='' THEN %I11='%LIST(12)';\n        IF %LIST(13)\u00ac='' THEN %I12='%LIST(13)';\n        IF %LIST(14)\u00ac='' THEN %I13='%LIST(14)';\n        IF %LIST(15)\u00ac='' THEN %I14='%LIST(15)';\n        IF %LIST(16)\u00ac='' THEN %I15='%LIST(16)';\n        IF %LIST(17)\u00ac='' THEN %I16='%LIST(17)';\n        IF %LIST(18)\u00ac='' THEN %I17='%LIST(18)';\n        IF %LIST(19)\u00ac='' THEN %I18='%LIST(19)';\n        IF %LIST(20)\u00ac='' THEN %I19='%LIST(20)';\n        IF %LIST(21)\u00ac='' THEN %I20='%LIST(21)';\n        IF %LIST(22)\u00ac='' THEN %I21='%LIST(22)';\n        IF %LIST(23)\u00ac='' THEN %I22='%LIST(23)';\n        IF %LIST(24)\u00ac='' THEN %I23='%LIST(24)';\n        IF %LIST(25)\u00ac='' THEN %I24='%LIST(25)';\ntesthere:\n        if %system='SHELL'\n        then do;\n            getfirst '%PGMNAME.pgm';  /* Make sure its there.    */\n        end;\n        else do;\n            %sysdsn='%$jolpgms(%pgmname)';\n            include '%sysdsn';\n            if %pgmname=''            /* not found */\n            then do;\n                %pgmname='%sysdsn';\n                %sysdsn='';\n            end;\n        end;\n        if %sysdsn =''\n        then do;\n           panel / (ctr %hedcolor 'Jol EXEC Command')\n           ////////\n           (ctr flash 'Cannot Find Program ' hi '%pgmname' )\n         //('             Do You wish to Register it ? ' ,f1, 1 ,'Y')\n           helpline ('F3 Exits');\n           if %syspfk = 3 | %syspfk = 15 then exit;\n           if %f1='Y'\n           then do;\n              register %pgmname;\n              goto testhere;\n           end;\n           else goto pan2;\n        end;\n\n        if %system='SHELL' then\n        INCLUDE '%PGMNAME.pgm';    /* GET REGISTERED DETAILS  */\n\n/* Check if we have data set names that match dd names.\n   If so, don't put up a PANEL.*/\n\n        if %f1 \u00ac='' & %i1 = '' then goto dopan1;\n        if %f2 \u00ac='' & %i2 = '' then goto dopan1;\n        if %f3 \u00ac='' & %i3 = '' then goto dopan1;\n        if %f4 \u00ac='' & %i4 = '' then goto dopan1;\n        if %f5 \u00ac='' & %i5 = '' then goto dopan1;\n\n        cls;\n /*     execstat %pgmname 'Checking All DDnames';  */\n\n        goto skippan1;\ndopan1:\n\n    PANEL\n        / (ctr %hedcolor\n               'Please Enter Details for Program 'hi'%PGMNAME:')\n            / ('       From Load Library ===>',LOAD,44,'%LOAD')\n            / ('       Using Parameter   ===>',PARM,100,'')\n            / (hi\n ' Now Please Enter Data Set Names or Identifiers next to the DDnames')\n            / (hi'      %f1',I1,52,'%I1',11,1,11,30)\n              (hi'      %f2',I2,52,'%I2',12,1,12,30)\n              (hi'      %f3',I3,52,'%I3',13,1,13,30)\n              (hi'      %f4',I4,52,'%I4',14,1,14,30)\n              (hi'      %f5',I5,52,'%I5',15,1,15,30)\n/(' Notes: 1. You can use ''Printer'' or ''Sysout'' for WRITES Files.')\n ('        2. Or you can code a Data Set Name ')\n ('        3. Jol may ask you for Record Format, Space etc later.')\n    helpline\n('F3 Exits with No Action. F4 Shows a List of Data Sets and Printers')\n ;\n\nchkpan1:\n\nlabel check1;\n\n     if %syspfk=4\n     then do;\n        if %f1 \u00ac= '' then do; $getexds '%f1'; i1='%showsel'; end;\n        if %f2 \u00ac= '' then do; dbfshow all '%f2'; i2='%showsel'; end;\n        if %f3 \u00ac= '' then do; dbfshow all '%f3'; i3='%showsel'; end;\n        if %f4 \u00ac= '' then do; dbfshow all '%f4'; i4='%showsel'; end;\n        if %f5 \u00ac= '' then do; dbfshow all '%f5'; i5='%showsel'; end;\n     end;\n\n     %i=1;\n\n /* This next piece of code gets the value of the 'arrays'.   */\nlabel check1a;\n       seta='tempdd=''%%f%i''';\n       set %SETA;\n       seta=caps('SET  tempdsid=''%%i%i''');\n       %SETA;\n       if %tempdd\u00ac=''                     /* Is there a DDNAME ? */\n       then do;                           /* Yes ...             */\n\n   /* Check if the parameter is a DSID or a DATA SET */\n\n          if %tempdsid=''                   /* Check if a DSNAME   */\n          then do;\n              panel reread from i%i\n                    'You must enter a DSID or DSNAME';\n                    redo check1;\n          end;\n          %i=%i+1;\n          if i<6 then\n             redo check1a;\n       end;\n\nskippan1:\n\n        if %f6 \u00ac='' & %i6 = '' then goto dopan2;\n        if %f7 \u00ac='' & %i7 = '' then goto dopan2;\n        if %f8 \u00ac='' & %i8 = '' then goto dopan2;\n        if %f9 \u00ac='' & %i9 = '' then goto dopan2;\n        if %f10\u00ac='' & %i10= '' then goto dopan2;\n        if %f11\u00ac='' & %i11= '' then goto dopan2;\n        if %f12\u00ac='' & %i12= '' then goto dopan2;\n        if %f13\u00ac='' & %i13= '' then goto dopan2;\n        goto skippan2;\n\ndopan2:\n\n    if %f6\u00ac=''\n    then do;\n    PANEL\n        / (ctr %hedcolor\n ('Please Enter Data Set Names or Identifiers next to the DDnames')\n            / (hi'      %f6' ,I6 ,52,'%I6' , 3,1, 3,30)\n              (hi'      %f7' ,I7 ,52,'%I7' , 4,1, 4,30)\n              (hi'      %f8' ,I8 ,52,'%I8' , 5,1, 5,30)\n              (hi'      %f9' ,I9 ,52,'%I9' , 6,1, 6,30)\n              (hi'      %f10',I10,52,'%I10', 7,1, 7,30)\n              (hi'      %f11',I11,52,'%I11', 8,1, 8,30)\n              (hi'      %f12',I12,52,'%I12', 9,1, 9,30)\n              (hi'      %f13',I13,52,'%I13',10,1,10,30)\n///\n/(' Notes: 1. You can use ''Printer'' or ''Sysout'' for WRITES Files.')\n ('        2. Or you can code a Data Set Name ')\n/('           Jol may ask you for Record Format, Space etc later.')\n    helpline\n('F3 Exits with No Action. F4 Selects from a List of Data Sets')\n ;\n\nlabel check2;\n\n     if %syspfk=4\n     then do;\n        if %f6 \u00ac= '' then do; dbfshow all '%f6'; i6='%showsel'; end;\n        if %f7 \u00ac= '' then do; dbfshow all '%f7'; i7='%showsel'; end;\n        if %f8 \u00ac= '' then do; dbfshow all '%f8'; i8='%showsel'; end;\n        if %f9 \u00ac= '' then do; dbfshow all '%f9'; i9='%showsel'; end;\n        if %f10\u00ac= '' then do; dbfshow all '%f10';i10='%showsel'; end;\n        if %f11\u00ac= '' then do; dbfshow all '%f11';i11='%showsel'; end;\n        if %f12\u00ac= '' then do; dbfshow all '%f12';i12='%showsel'; end;\n        if %f13\u00ac= '' then do; dbfshow all '%f13';i13='%showsel'; end;\n\n     end;\n\n     %i=6;\n\n /* This next piece of code gets the value of the 'arrays'.   */\nlabel check2a;\n     %setx='F'||'%i';                   /* get F(i) */\n     %seta='SET  tempdd=''%%%setx''';\n     %SETA;\n     %setx='I'||'%i';                   /* Get i(i)  */\n     %seta='SET  tempdsid=''%%%setx''';\n     %SETA;\n     if %tempdd\u00ac=''                     /* Is there a DDNAME ? */\n     then do;                           /* Yes ...             */\n\n /* Check if the parameter is a DSID or a DATA SET */\n\n        if %tempdsid=''                   /* Check if a DSNAME   */\n        then do;\n            panel reread from i%i\n                  'You must enter a DSID or DSNAME';\n                  redo check2;\n        end;\n        %i=%i+1;\n        if i<14 then\n           redo check2a;\n     end;\n\n\n\n     end;\n\nskippan2:\n\n\n        if %f14\u00ac='' & %i14= '' then goto dopan3;\n        if %f15\u00ac='' & %i15= '' then goto dopan3;\n        if %f16\u00ac='' & %i16= '' then goto dopan3;\n        if %f17\u00ac='' & %i17= '' then goto dopan3;\n        if %f18\u00ac='' & %i18= '' then goto dopan3;\n        if %f19\u00ac='' & %i19= '' then goto dopan3;\n        if %f20\u00ac='' & %i20= '' then goto dopan3;\n        if %f21\u00ac='' & %i21= '' then goto dopan3;\n        if %f22\u00ac='' & %i22= '' then goto dopan3;\n        goto skippan3;\n\ndopan3:\n\n    if %f14\u00ac=''\n    then do;\n    PANEL\n        / (ctr %hedcolor\n ('Please Enter Data Set Names or Identifiers next to the DDnames')\n        /     (  '      %f14',I14,52,'%I14',04,1,04,30)\n              (  '      %f15',I15,52,'%I15',05,1,05,30)\n              (  '      %f16',I16,52,'%I16',06,1,06,30)\n              (  '      %f17',I17,52,'%I17',07,1,07,30)\n              (  '      %f18',I18,52,'%I18',08,1,08,30)\n              (  '      %f19',I19,52,'%I19',09,1,09,30)\n              (  '      %f20',I20,52,'%I20',10,1,10,30)\n              (  '      %f21',I21,52,'%I21',11,1,11,30)\n              (  '      %f22',I22,52,'%I22',12,1,12,30)\n    /*        (  '      %f23',I23,52,'%I23',13,1,13,30)\n              (  '      %f24',I24,52,'%I24',14,1,14,30)\n              (  '      %f25',I25,52,'%I25',15,1,15,30) */\n//\n/(' Notes: 1. You can use ''Printer'' or ''Sysout'' for WRITES Files.')\n ('        2. Or you can code a Data Set Name ')\n/('           Jol may ask you for Record Format, Space etc later.')\n    helpline\n('F3 Exits with No Action. F4 Selects from a List of Data Sets')\n ;\n\nlabel check3;\n\n     if %syspfk=4\n     then do;\n        if %f14\u00ac= '' then do; dbfshow all '%f14';i14='%showsel'; end;\n        if %f15\u00ac= '' then do; dbfshow all '%f15';i15='%showsel'; end;\n        if %f16\u00ac= '' then do; dbfshow all '%f16';i16='%showsel'; end;\n        if %f17\u00ac= '' then do; dbfshow all '%f17';i17='%showsel'; end;\n        if %f18\u00ac= '' then do; dbfshow all '%f18';i18='%showsel'; end;\n        if %f19\u00ac= '' then do; dbfshow all '%f19';i19='%showsel'; end;\n        if %f20\u00ac= '' then do; dbfshow all '%f20';i20='%showsel'; end;\n        if %f21\u00ac= '' then do; dbfshow all '%f21';i21='%showsel'; end;\n        if %f22\u00ac= '' then do; dbfshow all '%f22';i22='%showsel'; end;\n        if %f23\u00ac= '' then do; dbfshow all '%f23';i23='%showsel'; end;\n        if %f24\u00ac= '' then do; dbfshow all '%f24';i24='%showsel'; end;\n        if %f25\u00ac= '' then do; dbfshow all '%f25';i25='%showsel'; end;\n\n     end;\n\n     %i=14;\n\n /* This next piece of code gets the value of the 'arrays'.   */\nlabel check3a;\n     %setx='F'||'%i';                   /* get F(i) */\n     %seta='SET  tempdd=''%%%setx''';\n     %SETA;\n     %setx='I'||'%i';                   /* Get i(i)  */\n     %seta='SET  tempdsid=''%%%setx''';\n     %SETA;\n     if %tempdd\u00ac=''                     /* Is there a DDNAME ? */\n     then do;                           /* Yes ...             */\n\n /* Check if the parameter is a DSID or a DATA SET */\n\n        if %tempdsid=''                   /* Check if a DSNAME   */\n        then do;\n            panel reread from i%i\n                  'You must enter a DSID or DSNAME';\n                  redo check3;\n        end;\n        %i=%i+1;\n        if i<25 then\n           redo check3a;\n     end;\n\n\n     end;\n\nskippan3:\n\n/* This next section of code calls CHECKDS to do the following:\n\n     1. If the name typed in is a data set name (x.y) nothing is done.\n\n     2. For DSIDs, it includes the data set definition from the data\n        set data base.\n\n     3. If the data set is a VSAM data set, it call CREATEVS to\n        allocate the data set, and set the disposition to UPDATES\n        so that Jol won't try to reallocate the data set.\n*/\n\n DCL %SYSVSAM1  INIT('') EXT; /* KEEPS LIST OF VSAM DATA SETS in JOB */\n DCL %SYSVSAM2  INIT('') EXT; /* As above...                         */\n\n     %i=1;\n\n /* This next piece of code gets the value of the 'arrays'.   */\nlabel check4;\n     %setx='F'||'%i';                   /* get F(i) */\n     %seta='SET  tempdd=''%%%setx''';\n     %SETA;\n     %setx='I'||'%i';                   /* Get i(i)  */\n     %seta='SET  tempdsid=''%%%setx''';\n     %SETA;\n     if %tempdd\u00ac=''                     /* Is there a DDNAME ? */\n     then do;                           /* Yes ...             */\n\n /* Check if the parameter is a DSID or a DATA SET */\n\n        %syswork=index(tempdsid,'.');   /* Check if a DSNAME   */\n        if %syswork=0                   /* Here is a DSID or Prn */\n        then do;\n            %syswork=index(tempdsid,' '); /* Find a blank          */\n            %work=substr('%tempdsid',1,%syswork);\n            if %work='SYSOUT'\n            | %work='PRINTER'\n            then do;\n                %work=substr('%tempdsid',%syswork);\n                dcl p%i printer %work;\n                set i%i='p%i ';\n                %i=%i+1;\n                redo check4;\n            end;\n        end;\n        else do;                        /* DATASET here        */\n            %syswork=index(tempdd,' WRITE');\n            %syswork2=index(tempdd,' MOD');\n            if %syswork\u00ac=0              /* Write Data Set here */\n            |  %syswork2\u00ac=0             /* Mod   Data Set here */\n            then do;                    /* Check if it is VSAM */\nrefind:\n    /*         execstat %pgmname 'Searching Data Base for'\n                       '%tempdsid';                  */\n               dbffind  '%tempdsid';    /* Get data set details*/\n\n               if %lastcc\u00ac=0\n               then do;\n\nnotfnd:\n                   panel\n                      ////////\n                      (ctr flash 'Cannot Find DataSet  '\n                       hi flash '''%tempdsid''')\n          /*          (' ',xdummy,1,' ')     */\n                      helpline ('F3 Exits,  F4 to Add Data Set, '\n                                'F5 Accepts Data Set');\n                      if %syspfk=3 then exit;\n                      If %syspfk=4\n                      then do;\n                           adddsn '%tempdsid';\n                           goto   refind;\n                      end;\n                      if %syspfk\u00ac=5 then goto notfnd;\n               end;\n\n               if %zvsamtxt \u00ac= ''\n               &  %buildjob \u00ac= 'YES'\n               then do;\n                    vsamcrea %tempdsid;\n                    %work=substr(f%i,1,9);\n                    set f%i='%work Updates ';\n               end;\n            end;\n        end;\n        %i=%i+1;\n        redo check4;\n     end;\n\n     if %BUILDJOB \u00ac= 'YES'\n     then do;\n        if %system = 'SHELL'\n        then do;\n            run %PGMNAME /* PROG %LOAD */\n                %I1  %I2   %I3  %I4   %I5\n                %I6  %I7   %I8  %I9   %I10\n                %I11 %I12  %I13 %I14  %I15\n                %I16 %I17  %I18 %I19  %I20\n                %I21 %I22  %I23 %I24  %I25\n             ;\n            exit;\n        end;\n\n        DCL %SRTWRK, %SRTWRK2 INIT '';\n        dcl %SRTUNIT init ' Unit=SYSDA ';\n        IF %sortnum\u00ac=''\n        then do;\n            %SRTWRK = 'SORTLIB READS SYS1.SORTLIB '\n                    || 'SYSOUT  WRITES SORTPRNT '\n                    || 'SYSPRINT WRITES SORTPRNT '\n                    || 'SORTMSG WRITES SORTPRNT  ';\n            %SRTWRK='%SRTWRK SORTWK01 WRITES SORTWK01 ';\n            %SRTWRK='%SRTWRK SORTWK02 WRITES SORTWK02 ';\n            %SRTWRK='%SRTWRK SORTWK03 WRITES SORTWK03 ';\n            IF %sortnum>3 THEN\n               %SRTWRK2=' SORTWK04 WRITES SORTWK04';\n            IF %sortnum>4 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK05 WRITES SORTWK05';\n            IF %sortnum>5 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK06 WRITES SORTWK06';\n            IF %sortnum>6 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK07 WRITES SORTWK07';\n            IF %sortnum>7 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK08 WRITES SORTWK08';\n            IF %sortnum>8 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK09 WRITES SORTWK09';\n            DCL SORTPRNT PRINTER NODCB ;\n            DCL SORTWK01 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK02 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK03 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK04 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK05 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK06 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK07 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK08 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK09 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n        end;\n        DCL %PGMNAME PROG %LOAD\n            %F1  %I1   %F2  %I2   %F3  %I3   %F4  %I4   %F5  %I5\n            %F6  %I6   %F7  %I7   %F8  %I8   %F9  %I9   %F10 %I10\n            %F11 %I11  %F12 %I12  %F13 %I13  %F14 %I14  %F15 %I15\n            %F16 %I16  %F17 %I17  %F18 %I18  %F19 %I19  %F20 %I20\n            %F21 %I21  %F22 %I22  %F23 %I23  %F24 %I24  %F25 %I25\n            %SRTWRK %SRTWRK2\n         ;\n\n         IF %PARM='' THEN;ELSE %PARM='PARM=''%PARM''';\n         IF %ERROR=1  THEN  STOP 'Program Will Not Be Executed';\n         ELSE\n%SYSLABEL:\n           RUN %PGMNAME %PARM /* %OPT1 %OPT2 %OPT3 %OPT4 %OPT5*/;\n\n         exit;                   /* quit the macro */\n\n     end;\n     if %BUILDJOB = 'YES'\n     then do;\n\n          if %THISSTEP \u00ac='' then\n          BLD04P                  '%thisstep:';\n          BLD04P                  '   Exec  %PGMNAME ';\n          IF %PARM='' THEN\n                      BLD04P      '         Load=%LOAD ';\n          ELSE DO;\n                      BLD04P      '         Load=%LOAD ';\n                      BLD04P      '         Parm=(''%PARM '') ';\n          END;\n   /* Do the files */\n          if %i1 \u00ac='' then BLD04P '        %i1';\n          if %i2 \u00ac='' then BLD04P '        %i2';\n          if %i3 \u00ac='' then BLD04P '        %i3';\n          if %i4 \u00ac='' then BLD04P '        %i4';\n          if %i5 \u00ac='' then BLD04P '        %i5';\n          if %i6 \u00ac='' then BLD04P '        %i6';\n          if %i7 \u00ac='' then BLD04P '        %i7';\n          if %i8 \u00ac='' then BLD04P '        %i8';\n          if %i9 \u00ac='' then BLD04P '        %i9';\n          if %i10\u00ac='' then BLD04P '        %i10';\n          if %i11\u00ac='' then BLD04P '        %i11';\n          if %i12\u00ac='' then BLD04P '        %i12';\n          if %i13\u00ac='' then BLD04P '        %i13';\n          if %i14\u00ac='' then BLD04P '        %i14';\n          if %i15\u00ac='' then BLD04P '        %i15';\n          if %i16\u00ac='' then BLD04P '        %i16';\n          if %i17\u00ac='' then BLD04P '        %i17';\n          if %i18\u00ac='' then BLD04P '        %i18';\n          if %i19\u00ac='' then BLD04P '        %i19';\n          if %i20\u00ac='' then BLD04P '        %i20';\n          if %i21\u00ac='' then BLD04P '        %i21';\n          if %i22\u00ac='' then BLD04P '        %i22';\n          if %i23\u00ac='' then BLD04P '        %i23';\n          if %i24\u00ac='' then BLD04P '        %i24';\n          if %i25\u00ac='' then BLD04P '        %i25';\n          BLD04P '         ;';\n\n     end;\n  END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EXECPGM": {"ttr": 10501, "alias": false, "halfwords": 4, "notes": 0, "parms": "b' \\x01\\x05\\x19'", "ispf": false, "text": "   EXECPGM:MACRO(\n          %LOAD=,              /*NO DEFAULT LOAD MODULE LIBRARY      */\n          %PARM=,\n           SORT,CYLS,DISKS,TAPES);\n\n/**********************************************************************\n\n       Jol Universal Command Language.\n       Copyright 1969-1989 CCS-JOL Pty. Ltd.,\n                 2/31 Queen St, Melbourne, Australia, 3000.\n\n\n       E X E C P G M     C O M M A N D\n\n       This macro executes a program.\n\n       Format:\n\n          execpgm sysprint > printer\n                  sysin    < cntl\n                  sysut1   < input.master\n                  sysut2   > output.master\n                  sort 5 cyls of 10 disks\n                  ;\n\nHistory:\n\n       Written     C. Clarke 22/2/91:  Create Macro.\n\n       Last Update C. Clarke 20/3/91:  Added Sort work Areas\n\n**********************************************************************/\n\n\n    DCL %F1,%F2,%F3,%F4,%F5,%F6,%F7,%F8,%F9,%F10   /* DDNAME List    */\n        %F11,%F12,%F13,%F14,%F15,%F16,%F17,%F18,%F19,%F20\n        %F21,%F22,%F23,%F24,%F25  INIT '';\n    DCL %I1,%I2,%I3,%I4,%I5,%I6,%I7,%I8,%I9,%I10   /* Recfm  List    */\n        %I11,%I12,%I13,%I14,%I15,%I16,%I17,%I18,%I19,%I20\n        %I21,%I22,%I23,%I24,%I25  INIT '';\n    dcl %SORTNUM  init '';\n    dcl %SORTSIZE init '';\n    dcl %tmp,%tmpdd,%tmpfile,%tmpact  init '';\n    dcl %work  init '';\n    dcl %work1 init '';\n    dcl %work2 init '';\n    dcl %syswork  init '';\n    dcl %syswork2 init '';\n    DCL %ERROR,%PGMNAME                      INIT '';\n    dcl %title INIT 'Jol Execute Program Screen';\n\n    DCL %NOCYLS         INIT 0;\n    DCL %NODISKS        INIT 0;\n    DCL %NOTAPES        INIT 0;\n\n        IF %CYLS\u00ac=0\n        then do;\n             %NOCYLS=%LIST(%CYLS-1);                 /* USER # CYLS */\n             set %LIST(%CYLS-1)='';\n             set %LIST(%CYLS)='';\n        end;\n        IF %DISKS\u00ac=0\n        then do;\n             %NODISKS=%LIST(%DISKS-1);              /* USER # DISKS */\n             set %LIST(%DISKS-1)='';\n             set %LIST(%DISKS)='';\n        end;\n        IF %TAPES\u00ac=0\n        THEN DO;\n            %NOTAPES=%LIST(%TAPES-1); /* USER # TAPES */\n            set %LIST(%TAPES)='';\n            set %LIST(%TAPES-1)='';\n            SIGNAL ERROR 3,\n            'Tape Sort Work Areas not Supported.';\n            %NOTAPES=0;\n        END;\n        IF  %NOTAPES\u00ac=0 & %NODISKS\u00ac=0\n        THEN DO;\n            SIGNAL ERROR 3,\n            'Tape and Disks Specified:-Tapes Ignored';\n            %NOTAPES=0;\n        END;\n        if %nocyls > 0 then %sortnum=%nocyls;\n        %sortsize=%nocyls;\n\n\n    dcl %runprogs  init('');\n\n        IF %LIST(1)\u00ac='' THEN %PGMNAME='%LIST(1)';\n        IF %PGMNAME=''\n        then do;\n           if %panels='OFF'\n           then do;\n              signal error 3,'No Program Name Specified for EXEC';\n              exit;\n           end;\npan2:\n  PANEL %boxcolor box (ctr %hedcolor '%TITLE')\n   //\n      (ctr 'You must specify the name of the program to run.')\n      //\n      /////\n      ('           Enter Program to Execute ====>',pgmname,8,'%pgmname')\n/*\n helpline ('Press F4 to View Program Names from your INClude List')\n*/\n   ;\n/*          IF SYSPFK = 4\n            then do;\n               showdsn '*.pgm';\n               if %lastcc\u00ac=0\n               then do;\n                   panel %boxcolor box\n                    ////////// (ctr hi 'File Not Found')\n                               (ctr hi 'or None Selected');\n                   %lastcc=0;\n                   goto pan2;\n               end;\n               pgmname= sysdsn;\n               if index(pgmname,'.') \u00ac=0\n               then pgmname=substr(pgmname,1, index(pgmname,'.') -1);\n\n               redo pan2;\n            end;\n            IF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\n            %pgmname='%pgmname         ';\n            %runprogs=runprogs||SUBSTR(pgmname,1,8);\n*/\n        END;\n\n\n/* Now loop around building up a declare statement */\n\n       %i=1;\n       %j=2;\n\n /* This next piece of code gets the value of the 'arrays'.   */\nlabel check1a;\n\n       tmpdd='%List(%j)';                  /* Get DDname */\n       tmpact='';\n\n       tmp='%List(%j+1)';                  /* Get operator */\n       tmp=upper(tmp);\n       if %tmp='MAY'\n       then do;\n           j=j+1;\n           tmp='%List(%j+1)';              /* Get operator */\n           tmpact=' MAY ';\n       end;\n\n       if %tmp='>'       then tmpact='%tmpact WRITES  ';\n       else if %tmp='<'  then tmpact='%tmpact READS   ';\n       else if %tmp='='  then tmpact='%tmpact UPDATES ';\n       else if %tmp='>>' then tmpact='%tmpact MODS    ';\n       if tmpact=''\n       then do;\n            if tmp='WRITES'  | tmp='WRITE'\n            |  tmp='READS'   | tmp='READ'\n            |  tmp='UPDATES' | tmp='UPDATE'\n            |  tmp='MODS'    | tmp='MOD'\n            then tmpact='%tmpact %tmp ';\n            else do;\n                signal error 3,'EXECPGM:Invalid Operator ''%tmp''';\n                exit;\n            end;\n       end;\n\n       tempfile='%List(%j+2)';            /* Get Filename/Dsname */\n\n       j=j+3;\n\nlabel chk_con;\n\n       if %list(%j)\u00ac='||'\n       then do;\n          seta ='F%i=''%tmpdd %tmpact ''';/* Store DDname */\n          set %SETA;\n          seta ='I%i=''%tempfile ''';     /* Store Filename */\n          set %SETA;\n          i=i+1;\n          if %list(%j) = ''               /* Got to end ? */\n          then goto skippan3;\n          redo check1a;\n       end;\n\n       tempfile='%tempfile || %List(%j+1)'; /* Get Filename */\n       j=j+2;\n       redo chk_con;\n\n\nskippan3:\n\n/* This next section of code calls CHECKDS to do the following:\n\n     1. If the name typed in is a data set name (x.y) nothing is done.\n\n     2. For DSIDs, it includes the data set definition from the data\n        set data base.\n\n     3. If the data set is a VSAM data set, it call CREATEVS to\n        allocate the data set, and set the disposition to UPDATES\n        so that Jol won't try to reallocate the data set.\n*/\n\n DCL %SYSVSAM1  INIT('') EXT; /* KEEPS LIST OF VSAM DATA SETS in JOB */\n DCL %SYSVSAM2  INIT('') EXT; /* As above...                         */\n\n     %i=1;\n\n /* This next piece of code gets the value of the 'arrays'.   */\nlabel check4;\n     %setx='F'||'%i';                   /* get F(i) */\n     %seta='SET  tempdd=''%%%setx''';\n     %SETA;\n     %setx='I'||'%i';                   /* Get i(i)  */\n     %seta='SET  tempdsid=''%%%setx''';\n     %SETA;\n\n     if %tempdd\u00ac=''                     /* Is there a DDNAME ? */\n     then do;                           /* Yes ...             */\n\n /* Check if the parameter is a DSID or a DATA SET */\n\n        %syswork=index(tempdsid,'.');   /* Check if a DSNAME   */\n        if %syswork=0                   /* Here is a DSID or Prn */\n        then do;\n            %syswork=index(tempdsid,' '); /* Find a blank          */\n            %work=substr('%tempdsid',1,%syswork);\n            if %work='SYSOUT'\n            | %work='PRINTER'\n            then do;\n                %work=substr('%tempdsid',%syswork);\n                dcl p%i printer %work;\n                set i%i='p%i ';\n                %i=%i+1;\n                redo check4;\n            end;\n        end;\n        else do;                        /* DATASET here        */\n\n            %syswork=index(tempdd,' WRITE');\n            %syswork2=index(tempdd,' MOD');\n            if %syswork\u00ac=0              /* Write Data Set here */\n            |  %syswork2\u00ac=0             /* Mod   Data Set here */\n            then do;                    /* Check if it is VSAM */\nrefind:\n               dbffind  '%tempdsid';    /* Get data set details*/\n\n               if %lastcc\u00ac=0\n               then do;\n\nnotfnd:\n                   %syspfk=0;\n                   $chkdbf '%tempdsid';\n                      if %syspfk\u00ac=0 & %syspfk\u00ac=3\n                      then goto notfnd;\n               end;\n\n               if %zvsamtxt \u00ac= ''\n               &  %buildjob \u00ac= 'YES'\n               then do;\n                    vsamcrea %tempdsid;\n                    %setx='F'||'%i';            /* get F(i) */\n                    %seta='SET  work=''%%%setx''';\n                    %SETA;\n                    %work=substr(work,1,index(work,' '));\n                    set f%i='%work Updates ';\n               end;\n            end;\n        end;\n        %i=%i+1;\n        redo check4;\n     end;\n\n     if %BUILDJOB \u00ac= 'YES'\n     then do;\n        if %system = 'SHELL'\n        then do;\n            run %PGMNAME /* PROG %LOAD */\n                %I1  %I2   %I3  %I4   %I5\n                %I6  %I7   %I8  %I9   %I10\n                %I11 %I12  %I13 %I14  %I15\n                %I16 %I17  %I18 %I19  %I20\n                %I21 %I22  %I23 %I24  %I25\n             ;\n            exit;\n        end;\n\n        DCL %SRTWRK, %SRTWRK2 INIT '';\n        dcl %SRTUNIT init ' Unit=SYSDA ';\n        IF %sortnum\u00ac=''\n        then do;\n            %SRTWRK = 'SORTLIB READS SYS1.SORTLIB '\n                    || 'SYSOUT  WRITES SORTPRNT '\n                    || 'SYSPRINT WRITES SORTPRNT '\n                    || 'SORTMSG WRITES SORTPRNT  ';\n            %SRTWRK='%SRTWRK SORTWK01 WRITES SORTWK01 ';\n            %SRTWRK='%SRTWRK SORTWK02 WRITES SORTWK02 ';\n            %SRTWRK='%SRTWRK SORTWK03 WRITES SORTWK03 ';\n            IF %sortnum>3 THEN\n               %SRTWRK2=' SORTWK04 WRITES SORTWK04';\n            IF %sortnum>4 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK05 WRITES SORTWK05';\n            IF %sortnum>5 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK06 WRITES SORTWK06';\n            IF %sortnum>6 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK07 WRITES SORTWK07';\n            IF %sortnum>7 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK08 WRITES SORTWK08';\n            IF %sortnum>8 THEN\n               %SRTWRK2=' %SRTWRK2 SORTWK09 WRITES SORTWK09';\n            DCL SORTPRNT PRINTER NODCB ;\n            DCL SORTWK01 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK02 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK03 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK04 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK05 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK06 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK07 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK08 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n            DCL SORTWK09 DS %SORTSIZE CYLS CONTIG %srtunit NORLSE NODCB;\n        end;\n        DCL %PGMNAME PROG %LOAD\n            %F1  %I1   %F2  %I2   %F3  %I3   %F4  %I4   %F5  %I5\n            %F6  %I6   %F7  %I7   %F8  %I8   %F9  %I9   %F10 %I10\n            %F11 %I11  %F12 %I12  %F13 %I13  %F14 %I14  %F15 %I15\n            %F16 %I16  %F17 %I17  %F18 %I18  %F19 %I19  %F20 %I20\n            %F21 %I21  %F22 %I22  %F23 %I23  %F24 %I24  %F25 %I25\n            %SRTWRK %SRTWRK2\n         ;\n\n         IF %PARM=''  THEN;ELSE %PARM='PARM=''%PARM''';\n         IF %ERROR=1  THEN  STOP 'Program Will Not Be Executed';\n         ELSE\n%SYSLABEL:\n           RUN %PGMNAME %PARM /* %OPT1 %OPT2 %OPT3 %OPT4 %OPT5*/;\n\n         exit;                   /* quit the macro */\n\n     end;\n     if %BUILDJOB = 'YES'\n     then do;\n\n          if %THISSTEP \u00ac='' then\n          BLD04P                  '%thisstep:';\n          BLD04P                  '   ExecPgm  %PGMNAME ';\n          IF %Parm='' THEN\n                      BLD04P      '         Load=%LOAD ';\n          ELSE DO;\n                      BLD04P      '         Load=%LOAD ';\n                      BLD04P      '         Parm=(''%PARM '') ';\n          END;\n   /* Do the files */\n\n          if %i1 \u00ac='' then BLD04P '        %f1  %i1';\n          if %i2 \u00ac='' then BLD04P '        %f2  %i2';\n          if %i3 \u00ac='' then BLD04P '        %f3  %i3';\n          if %i4 \u00ac='' then BLD04P '        %f4  %i4';\n          if %i5 \u00ac='' then BLD04P '        %f5  %i5';\n          if %i6 \u00ac='' then BLD04P '        %f6  %i6';\n          if %i7 \u00ac='' then BLD04P '        %f7  %i7';\n          if %i8 \u00ac='' then BLD04P '        %f8  %i8';\n          if %i9 \u00ac='' then BLD04P '        %f9  %i9';\n          if %i10\u00ac='' then BLD04P '        %f10 %i10';\n          if %i11\u00ac='' then BLD04P '        %f11 %i11';\n          if %i12\u00ac='' then BLD04P '        %f12 %i12';\n          if %i13\u00ac='' then BLD04P '        %f13 %i13';\n          if %i14\u00ac='' then BLD04P '        %f14 %i14';\n          if %i15\u00ac='' then BLD04P '        %f15 %i15';\n          if %i16\u00ac='' then BLD04P '        %f16 %i16';\n          if %i17\u00ac='' then BLD04P '        %f17 %i17';\n          if %i18\u00ac='' then BLD04P '        %f18 %i18';\n          if %i19\u00ac='' then BLD04P '        %f19 %i19';\n          if %i20\u00ac='' then BLD04P '        %f20 %i20';\n          if %i21\u00ac='' then BLD04P '        %f21 %i21';\n          if %i22\u00ac='' then BLD04P '        %f22 %i22';\n          if %i23\u00ac='' then BLD04P '        %f23 %i23';\n          if %i24\u00ac='' then BLD04P '        %f24 %i24';\n          if %i25\u00ac='' then BLD04P '        %f25 %i25';\n          BLD04P '         ;';\n\n     end;\n  END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EXTEND": {"ttr": 10756, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x822\\x0f\\x00\\x851o\\x17\\x11\\x00>\\x00?\\x00\\x01\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1982-11-16T00:00:00", "modifydate": "1985-11-12T17:11:00", "lines": 62, "newlines": 63, "modlines": 1, "user": "JOL"}, "text": "EXTEND : MACRO (\n/*********************************************************************/\n/*                    EXTEND COMMAND                                 */\n/*                                                                   */\n/* TO COPY A NUMBER OF DATASETS TO THE END OF A SINGLE DATASET       */\n/*                                                                   */\n/*********************************************************************/\n         WITH,               /* TO BE FOLLOWED BY DSN LIST           */\n         %SYSOUT=*           /* FOR PRINT OUTPUT FROM UTILITY        */\n         ) ;                 /*                                      */\n/*********************************************************************/\nDCL %MODLIST INIT '' ;\nDCL %UTILITY INIT '' ;\nDCL %$T      INIT '' ;\nIF %LIST(1)  = '' THEN STOP 'NO DATASET SPECIFIED TO EXTEND' ;\nIF %WITH     = 0  THEN STOP 'KEYWORD WITH NOT SPECIFIED' ;\nIF %SYSNLIST < 3  THEN STOP 'NO EXTEND DATASETS SPECIFIED' ;\n/*********************************************************************/\n/*           CONCATENATE DATASETS TO BE ADDED - MAX 10               */\n/*********************************************************************/\nIF %SYSNLIST >=  3 THEN %MODLIST = '%LIST(3)' ;\nIF %SYSNLIST >=  4 THEN %MODLIST = '%MODLIST||%LIST(4)' ;\nIF %SYSNLIST >=  5 THEN %MODLIST = '%MODLIST||%LIST(5)' ;\nIF %SYSNLIST >=  6 THEN %MODLIST = '%MODLIST||%LIST(6)' ;\nIF %SYSNLIST >=  7 THEN %MODLIST = '%MODLIST||%LIST(7)' ;\nIF %SYSNLIST >=  8 THEN %MODLIST = '%MODLIST||%LIST(8)' ;\nIF %SYSNLIST >=  9 THEN %MODLIST = '%MODLIST||%LIST(9)' ;\nIF %SYSNLIST >= 10 THEN %MODLIST = '%MODLIST||%LIST(10)' ;\nIF %SYSNLIST >= 11 THEN %MODLIST = '%MODLIST||%LIST(11)' ;\nIF %SYSNLIST >= 12 THEN %MODLIST = '%MODLIST||%LIST(12)' ;\nIF %SYSNLIST >  12 THEN SIGNAL 2,\n                'MORE THAN 10 EXTEND DATASETS SPECIFIED - '\n                'REMAINDER IGNORED' ;\n/*********************************************************************/\n/*              SET UP DATASETS FOR GENER UTILITY                    */\n/*********************************************************************/\n%$T = INDEX(LIST0001,'(') ;\nIF %$T \u00ac= 0 THEN STOP 'CANNOT EXTEND A PARTITIONED DATASET MEMBER' ;\n%$T = INDEX(LIST0001,'.') ;\nIF %$T \u00ac= 0 THEN\nDO;\n   LOCATEF '%LIST(1)' ;\n   IF %SYSRC \u00ac= 0 THEN STOP\n      'DSN SPECIFIED NOT CATALOGUED - DECLARE AND ALLOCATE SPACE' ;\nEND;\nDCL PRINTER SYSOUT %SYSOUT OUTLIM 1000;\nDCL DUMMY   DS DUMMY NODCB ;\n/*********************************************************************/\n/*              DECLARE THE UTILITY PROGRAM                          */\n/*********************************************************************/\nIF %SYSTEM = 'OS4' THEN %UTILITY = 'JSDGENER' ;\n                   ELSE %UTILITY = 'IEBGENER' ;\nEXTEND:\n      DCL %UTILITY PROG\n                   SYSUT1   READS  %MODLIST\n                   SYSUT2   MODS   %LIST(1)\n                   SYSIN    READS  DUMMY\n                   SYSPRINT WRITES PRINTER ;\n/*********************************************************************/\nRUN EXTEND ;\n/*********************************************************************/\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FIND": {"ttr": 10758, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "browse:macro;\nnotimpl '%sysmacnm';\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FORMAT": {"ttr": 10760, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x132\\x000\\x000\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:32:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "JOL"}, "text": "  FORMAT:MACRO(%PR,%PU,%NJP,%AC,%DDNAME=,%DEST=,%CONTROL=,%COPIES=,\n  %FORMS=,%CARRIAGE=,%TRAIN=,%OVFL=,%INT=,%FROM=,%ERDEST=,\n  %USER=,%PRINT=) ;\n   IF %SPOOL \u00ac= 'ASP' THEN\n      SIGNAL 2,'ASP FORMAT CARD GENERATED FOR %SPOOL' ;\n   IF %PR = '' & %PU = '' & %NJP = '' & %AC = '' THEN\n      STOP 'ASP FORMAT MACRO: PR | PU | NJP | AC NOT CODED' ;\n   IF %PR = 'PR' & (%PU = 'PU' | %NJP = 'NJP' | %AC = 'AC') THEN\n      STOP 'ASP FORMAT MACRO: TOO MANY TYPES %PR,%PU,%NJP,%AC' ;\n   IF %PU = 'PU' & (%NJP = 'NJP' | %AC = 'AC') THEN\n      STOP 'ASP FORMAT MACRO: TOO MANY TYPES %PR,%PU,%NJP,%AC' ;\n   IF %NJP = 'NJP' & %AC = 'AC' THEN\n      STOP 'ASP FORMAT MACRO: TOO MANY TYPES %PR,%PU,%NJP,%AC' ;\n   IF %PR = 'PR' THEN\n   DO ;\n      %DDNAME = 'PR,DDNAME=%DDNAME' ;\n      IF %DEST     \u00ac= '' THEN %DDNAME = '%DDNAME,DEST=%DEST' ;\n      IF %CONTROL  \u00ac= '' THEN %DDNAME = '%DDNAME,CONTROL=%CONTROL' ;\n      IF %COPIES   \u00ac= '' THEN %DDNAME = '%DDNAME,COPIES=%COPIES' ;\n      IF %FORMS    \u00ac= '' THEN %DDNAME = '%DDNAME,FORMS=%FORMS' ;\n      IF %CARRIAGE \u00ac= '' THEN %DDNAME = '%DDNAME,CARRIAGE=%CARRIAGE' ;\n      IF %TRAIN    \u00ac= '' THEN %DDNAME = '%DDNAME,TRAIN=%TRAIN' ;\n      IF %OVFL     \u00ac= '' THEN %DDNAME = '%DDNAME,OVFL=%OVFL' ;\n   END ;\n   IF %PU = 'PU' THEN\n   DO ;\n      %DDNAME = 'PU,DDNAME=%DDNAME' ;\n      IF %DEST     \u00ac= '' THEN %DDNAME = '%DDNAME,DEST=%DEST' ;\n      IF %COPIES   \u00ac= '' THEN %DDNAME = '%DDNAME,COPIES=%COPIES' ;\n      IF %FORMS    \u00ac= '' THEN %DDNAME = '%DDNAME,FORMS=%FORMS' ;\n      IF %INT      \u00ac= '' THEN %DDNAME = '%DDNAME,INT=%INT' ;\n   END ;\n   IF %NJP = 'NJP' THEN\n   DO ;\n      %DDNAME = 'NJP,FROM=%FROM,DEST=%DEST' ;\n      IF %FROM = '' | %DEST = '' THEN\n         STOP 'ASP FORMAT CARD INVALID FOR .NJP.://*FORMAT %DDNAME' ;\n   END ;\n   IF %AC = 'AC' THEN\n   DO ;\n      IF %DDNAME = '' THEN\n         STOP 'ASP FORMAT CARD INVALID FOR .AC.://*FORMAT %DDNAME' ;\n      IF %ERDEST   \u00ac= '' THEN %DDNAME = '%DDNAME,ERDEST=%ERDEST' ;\n      IF %PRINT    \u00ac= '' THEN %DDNAME = '%DDNAME,PRINT=%PRINT' ;\n      IF %USER     \u00ac= '' THEN %DDNAME = '%DDNAME,USER=%USER' ;\n   END ;\n   OPCNTL '//*FORMAT %DDNAME' AFTER JOBCARD ;\n   END ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FORT": {"ttr": 10762, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "FORANZ:MACRO ( /* JOL FORT  COMMAND  */\n  /* ALLOW USER TO SPECIFY A TEST VERSION OF THE COMPILER LIBRARY    */\n  %LINK\n  %LOAD=,\n  %STEPLIB='',\n  /* DEFINE POSSIBLE STANDARD FORT-HE PARAMETERS PER AS IN JOL MANUAL*/\n  %PRINT=,%SYSOUT=,%NOPRINT,\n  %OBJ='&&OBJ',%NOOBJ        /* TEMPORARY OBJECT IS DEFAULT          */\n  %FLAG=,                    /* FLAG(I) IS THE DEFAULT               */\n  %LIL %NOLIL                /* NOLIL IS THE DEFAULT                 */\n  %LINECNT=,                 /* 60 IS THE DEFAULT                    */\n  %LIST %NOLIST              /* NOLIST IS THE DEFAULT                */\n  %OPTIMIZE=, %NOOPT         /* NOOPT OR OPTIMIMZE(0) IS DEFAULT     */\n  %MAP  %NOMAP               /* NOMAP  IS THE DEFAULT                */\n  %RENT %NORENT              /* NORENT IS THE DEFAULT                */\n  %SEQ %NOSEQ                /* NOSEQ  IS THE DEFAULT                */\n  %SIZE=,                    /* SIZE(MAX) IS THE DEFAULT             */\n  %SOURCE %NOSOURCE          /* SOURCE IS THE DEFAULT                */\n  %TERM %NOTERM              /* NOTERM IS THE DEFAULT                */\n  %XREF %NOXREF              /* NOXREF  IS THE DEFAULT               */\n  %STATIS %NOSTATIS          /* NOSTATIS IS THE DEFAULT              */\n  %INLOG2 %NOINLOG2          /* NOINLOG2 IS THE DEFAULT              */\n  %EBCDIC %BCD               /* EBCDIC IS THE DEFAULT                */\n  %GOSTMT %NOGOSTMT          /* NOGOSTMT IS THE DEFAULT              */\n  %ALC  %NOALC               /* ALC IS THE DEFAULT                   */\n  %NAME=, %NONAME            /* NAME(MAIN) IS DEFAULT                */\n  %DEBUG %NODEBUG            /*        NA                            */\n  %DOUBLE %NODOUBLE          /*        NA                            */\n  %DOVAL=,                   /*        NA                            */\n  %LMSG %SMSG                /*        NA                            */\n  %NOLINKQ                   /* NO LINK QUESTION. IF \"COMPILE AND    */\n                             /* LINK\" IS CALLED, THE COMPILE MACRO   */\n                             /* CALLS THE LINK MACRO, THEREFORE DON'T*/\n                             /* ASK USER IF HE WANTS TO LINK         */\n  );\n\n   DCL %PARM INIT '';\n   IF %DEBUG   \u00ac= '' THEN ;\n   IF %NODEBUG \u00ac= '' THEN ;\n   IF %DOUBLE  \u00ac= '' THEN ;\n   IF %NODOUBLE\u00ac= '' THEN;\n   IF %DOVAL   \u00ac= '' THEN ;\n   IF %LMSG    \u00ac= '' THEN ;\n   IF %SMSG    \u00ac= '' THEN ;\n   IF %STATIS  \u00ac= '' THEN %PARM = '%PARM,STATIS';\n   IF %NOSTATIS\u00ac= '' THEN %PARM = '%PARM,NOSTATIS';\n   IF %INLOG2  \u00ac= '' THEN %PARM = '%PARM,INLOG2';\n   IF %NOINLOG2\u00ac= '' THEN %PARM = '%PARM,NOINLOG2';\n   IF %EBCDIC  \u00ac= '' THEN %PARM = '%PARM,EBCDIC';\n   IF %BCD     \u00ac= '' THEN %PARM = '%PARM,BCD';\n   IF %GOSTMT  \u00ac= '' THEN %PARM = '%PARM,GOSTMT';\n   IF %NOGOSTMT\u00ac= '' THEN %PARM = '%PARM,NOGOSTMT';\n   IF %NOGOSTMT = '' & %GOSTMT  = ''\n                     THEN %PARM = '%PARM,GOSTMT'; /* JOL DEFAULT */\n   IF %ALC     \u00ac= '' THEN %PARM = '%PARM,ALC';\n   IF %NOALC   \u00ac= '' THEN %PARM = '%PARM,NOALC';\n   IF %NOALC    = '' & %ALC     = ''\n                     THEN %PARM = '%PARM,ALC';     /* JOL DEFAULT */\n   IF %NAME    \u00ac= '' THEN %PARM = '%PARM,NAME(%NAME)';\n   IF %NONAME  \u00ac= '' THEN %PARM = '%PARM,NAME(MAIN)';\n   IF %FLAG    \u00ac= '' THEN %PARM = '%PARM,FLAG(%FLAG)';\n   IF %LIL     \u00ac= '' THEN %PARM = '%PARM,LIL';\n   IF %NOLIL   \u00ac= '' THEN %PARM = '%PARM,NOLIL';\n   IF %LINECNT \u00ac= '' THEN %PARM = '%PARM,LINECOUNT(%LINECNT)';\n   IF %LIST    \u00ac= '' THEN %PARM = '%PARM,LIST';\n   IF %NOLIST  \u00ac= '' THEN %PARM = '%PARM,NOLIST';\n   IF %OPTIMIZE\u00ac= '' THEN %PARM = '%PARM,OPT(%OPTIMIZE)';\n   IF %NOOPT   \u00ac= '' THEN %PARM = '%PARM,NOOPT';\n   IF %NOOPT    = '' & %OPTIMIZE= ''\n                     THEN %PARM = '%PARM,OPT(0)';  /* JOL DEFAULT */\n   IF %MAP     \u00ac= '' THEN %PARM = '%PARM,MAP';\n   IF %NOMAP   \u00ac= '' THEN %PARM = '%PARM,NOMAP';\n   IF %RENT    \u00ac= '' THEN %PARM = '%PARM,RENT';\n   IF %NORENT  \u00ac= '' THEN %PARM = '%PARM,NORENT';\n   IF %SEQ     \u00ac= '' THEN %PARM = '%PARM,SEQ';\n   IF %NOSEQ   \u00ac= '' THEN %PARM = '%PARM,NOSEQ';\n   IF %SIZE    \u00ac= '' THEN %PARM = '%PARM,SIZE(%SIZE)';\n   IF %SOURCE  \u00ac= '' THEN %PARM = '%PARM,SOURCE';\n   IF %NOSOURCE\u00ac= '' THEN %PARM = '%PARM,NOSOURCE';\n   IF %TERM    \u00ac= '' THEN %PARM = '%PARM,TERM';\n   IF %NOTERM  \u00ac= '' THEN %PARM = '%PARM,NOTERM';\n   IF %XREF    \u00ac= '' THEN %PARM = '%PARM,XREF';\n   IF %NOXREF  \u00ac= '' THEN %PARM = '%PARM,NOXREF';\n   /**********************************************************/\n   DCL %CATLG INIT ''; /* SET TO DSIDS THAT NEED CATALOGUING */\n   /* NOW FIX UP PARMS SUCH AS PRINT, SYSOUT, TEST ETC  */\n   DCL %DSIN INIT 'NOT FOUND';\n   IF %LINK\u00ac='' THEN %LINK='Y';\n      %LOAD = '%SYSUID.LOAD';\n   IF %LIST(1) \u00ac= '' THEN %DSIN = '%LIST(1)';\n\n\n\nDCL %LNKLINE INIT '';\nIF %NOLINKQ = 'NOLINKQ' THEN DO ;  /* HAS THIS MACRO BEEN CALLED BY */\n   %LNKLINE = '/'; %LINK = 'N' ;  /* THE COMPILE AND LINK MACRO    */\nEND;\nELSE DO;                        /* IF NOT CALLED BY COMPILE AND LINK */\n    %LNKLINE =                  /* THEN LEAVE IT AS IT WAS.  PJC...  */\n  '(''        LINK ***** Y/N ****'',LINK,1,''%LINK'') /';\nEND;\n\nIF %NOPANEL = '' THEN\nPANEL ('                  JOL ***** FORT COMMAND PANEL *****')\n('           ANY HIGHLIGHTED FIELD CAN BE CHANGED')\n('THE COMPILER OPTIONS FIELD CAN BE CHANGED OR ADDED TO \",\" ARE REQD')\n('          ALL DATA SET NAMES MUST BE FULLY QUALIFIED')\n   %LNKLINE\n('YOUR SOURCE DATA SET IS =====>',DSIN,44,'%DSIN')\n('YOUR OBJECT DATA SET IS =====>',OBJ,44,'%OBJ')\n('YOUR PRINTER OPTION IS ======>',SYSOUT,1,'%SYSOUT')\n('YOU HAVE CHOSEN THE FOLLOWING COMPILER OPTIONS *****')\n('===>',PARM,100,'%PARM')\n/('      OUTPUT LOADMOD LIBNAME ========>',LOAD,44,'%LOAD');\nDCL INP DS DSN %DSIN NODEF;\n IF %DSIN \u00ac= '' THEN DO;\n        DCL %###X INIT '';\n        DCL %###L INIT '';\n        DCL %MEM INIT '';\n        %###X = INDEX(DSIN,'(');\n          IF %###X \u00ac= 0 THEN DO;\n             %MEM = SUBSTR(DSIN,%###X);\n             %MEM = SUBSTR(MEM,2);\n             %###L = LENGTH(MEM);\n             %###L = %###L - 1;\n             %MEM = SUBSTR(MEM,1,%###L);\n          END;\n END;\n   IF %PRINT\u00ac='' & %SYSOUT\u00ac='' THEN STOP 'PRINT AND SYSOUT CODED';\n   IF %PRINT\u00ac='' THEN\n   DO;\n      %$T=TYPE(PRINT);\n      IF %$T='LIT' THEN DCL PRT DS %PRINT NODEF;\n      ELSE DO;\n              %$T=INDEX(PRINT,'.');\n              IF %$T\u00ac=0 THEN DCL PRT DS %PRINT NODEF;\n                        ELSE DCL PRT DS LIKE %PRINT;\n      END;\n      %CATLG='%CATLG PRT';\n   END;\n   IF %SYSOUT\u00ac='' THEN DCL PRT SYSOUT %SYSOUT NODEF;\n   IF %NOPRINT\u00ac='' THEN DCL PRT DS DUMMY NODEF;\n   ELSE IF %SYSOUT='' & %PRINT=''\n           THEN      /* DEFAULT TO SYSOUT A OR TSO CLASS */\n           DCL PRT SYSOUT A;\n   /************************************************************/\n   IF %NOOBJ = ''\n     THEN  DO;\n             IF %OBJ\u00ac= '&&OBJ' THEN\n                DCL OBJ DS DSN %OBJ NODEF EXT;\n             ELSE DCL OBJ  DS DSN &&OBJ  BLKSIZE 3200\n                5 CYLS NORLSE EXTERNAL UNIT SYSDA ;\n           END;\n    ELSE   DO; %PARM = '%PARM,NOOBJECT';\n               DCL OBJ DS DUMMY NODEF;\n           END;\n   /*************************************************************/\n     DCL DS001  DS  5 CYLS  SYSDA NORLSE NODCB BLKSIZE 3465;\n     DCL DS002  DS  5 CYLS  SYSDA NORLSE NODCB;\n     DCL DS009  DS  %LOAD NODEF;\n     DCL SLIB DS SYS2.FORTRAN.FORTLIB NODEF;\n     DCL LIB1 DS SYS2.FORTRAN.LPALIB NODEF;\n     DCL LIB2 DS %STEPLIB NODEF;\n     PROG01: DCL JZKAFORT  PROG  512 K\n         SYSPRINT WRITES   PRT\n         STEPLIB  READS    LIB1 || LIB2\n         SYSLIB   READS    SLIB\n         SYSUT1   WRITES   DS001\n         SYSUT2   WRITES   DS002\n         SYSIN    READS    INP\n         SYSLIN   MODS     OBJ;\n     FRUN: RUN PROG01 '%PARM';\n     IF FRUN >= 4 THEN DO;\n        STOP 'FORTRAN COMPILE FAILED WITH COND.CODE >= 4';\n     END;\n     IF %LINK = 'Y' THEN\n     IF FRUN < 4  THEN DO;\n        LINK '%OBJ' LOAD %LOAD NAME %GEMMOD SYSOUT %SYSOUT;\n     END;\n  /*     CATALOG PRINT OBJ AND TEST DATA SETS IF USER DEFINED        */\n     IF %CATLG \u00ac= '' THEN CATALOG %CATLG ;\n     END;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FREE": {"ttr": 10766, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x00\\x00\\x00\\x00\\x87%/\\x00\\x87%/\\x16\\x12\\x00:\\x00:\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "04.00", "flags": 0, "createdate": "1987-09-09T00:00:00", "modifydate": "1987-09-09T16:12:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "JOL"}, "text": "FREE : MACRO;\n/***                                                               ***/\n/***     THE FREE COMMAND GENERATES FREE=END FOR DATA SETS.        ***/\n/***     THE DATA SETS THUS FREED BECOME DEQUEUED, AND THEREFORE   ***/\n/***     AVAILABLE FOR USE BY OTHER USERS                          ***/\n/***                                                               ***/\nDCL  %FREEWRK1,%FREEWRK2     INIT '';\n      %FREEWRK1='%LIST(1)';\n      %FREEWRK2=SUBSTR(FREEWRK1,1,2);\n      %FREEWRK1=SUBSTR(FREEWRK1,1,5);\n      IF %FREEWRK1='FILE(' | %FREEWRK2='F('\n      THEN DO;\n           FREEFILE %LIST(1);\n      END;\n      ELSE DO;\n      IF %SYSTEM = 'VS1'\n      THEN SIGNAL 1,'FREE NOT AVAILABLE ON THIS %SYSTEM';\n      ELSE IF %SYSNLIST < 1\n           THEN SIGNAL 2,'NO DATA SETS SPECIFIED FOR FREE COMMAND';\n           ELSE  DO;\n/***                                                               ***/\n/***             ALLOW UP TO 10 DATASETS TO BE ALLOCATED FOR FREE  ***/\n/***                                                               ***/\n                 IF %SYSNLIST > 10\n                 THEN SIGNAL 1,\n                 'MORE THAN 10 DATASETS IN FREE - REMAINDER IGNORED';\n                 DCL %DD1,%DD2,%DD3 INIT '';\n                 %DD1='DD1 MAY READ %LIST(1)';\n                 IF %LIST(2) THEN %DD1='%DD1 DD2 MAY READ %LIST(2)';\n                 IF %LIST(3) THEN %DD1='%DD1 DD3 MAY READ %LIST(3)';\n                 IF %LIST(4) THEN %DD1='%DD1 DD4 MAY READ %LIST(4)';\n                 IF %LIST(5) THEN %DD2='%DD2 DD5 MAY READ %LIST(5)';\n                 IF %LIST(6) THEN %DD2='%DD2 DD6 MAY READ %LIST(6)';\n                 IF %LIST(7) THEN %DD2='%DD2 DD7 MAY READ %LIST(7)';\n                 IF %LIST(8) THEN %DD3='%DD3 DD8 MAY READ %LIST(8)';\n                 IF %LIST(9) THEN %DD3='%DD3 DD9 MAY READ %LIST(9)';\n                 IF %LIST(10) THEN  %DD3='%DD3 DD10 MAY READ %LIST(10)';\n/***                                                               ***/\n/***             DECLARE PROGRAM AND UP TO 10 DATA SETS            ***/\n/***                                                               ***/\n                 DCL IEFBR14 PROG\n                     %DD1  %DD2 %DD3;\n                 RUN IEFBR14;\n                 %FREE= 'LABEL=(,,,IN),DISP=SHR,FREE=END';\n                 IF %LIST(1) THEN OPCNTL '//DDF1  DD DSN=*.DD1,%FREE';\n                 IF %LIST(2) THEN OPCNTL '//DDF2  DD DSN=*.DD2,%FREE';\n                 IF %LIST(3) THEN OPCNTL '//DDF3  DD DSN=*.DD3,%FREE';\n                 IF %LIST(4) THEN OPCNTL '//DDF4  DD DSN=*.DD4,%FREE';\n                 IF %LIST(5) THEN OPCNTL '//DDF5  DD DSN=*.DD5,%FREE';\n                 IF %LIST(6) THEN OPCNTL '//DDF6  DD DSN=*.DD6,%FREE';\n                 IF %LIST(7) THEN OPCNTL '//DDF7  DD DSN=*.DD7,%FREE';\n                 IF %LIST(8) THEN OPCNTL '//DDF8  DD DSN=*.DD8,%FREE';\n                 IF %LIST(9) THEN OPCNTL '//DDF9  DD DSN=*.DD9,%FREE';\n                 IF %LIST(10)THEN OPCNTL '//DDF10 DD DSN=*.DD10,%FREE';\n                 END;\n         END;\n/***                                                               ***/\n         END  /* FREE COMMAND */ ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FS": {"ttr": 10768, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " fs: macro;   /* This macro turns the panels off or on globally */\n    dcl %panels    external init ('');   /* Global for other commands*/\n    if %list(1)='OFF'\n    then do;\n        %panels='OFF';\n        jolopt nofs;\n    end;\n    if %list(1)='ON'\n    then do;\n        %panels='ON';\n        jolopt fs;\n    end;\n end;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FTPGET": {"ttr": 18185, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x13\\x01\\x102o\\x01\\x102o\\x04V\\x00K\\x00K\\x00\\x00\\xc3\\xd3\\xc1\\xd9\\xd2\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-11-22T00:00:00", "modifydate": "2010-11-22T04:56:13", "lines": 75, "newlines": 75, "modlines": 0, "user": "CLARKE"}, "text": "ujy01al:macro;\n/*\n ALLOC FILE($JOBS) DA(%sysuid.ZJOBS) fb 80,800 NEW catlg;\n ALLOC FILE($CODE) DA(%sysuid.ZCODE) fb 80,800 NEW catlg;\n ALLOC FILE($DSIDS) DA(%sysuid.ZDSIDS) fb 80,800 NEW catlg;\n*/\n ALLOC FILE($JOBS) fb 80,800 NEW;\n ALLOC FILE($CODE)  fb 80,800 NEW;\n ALLOC FILE($DSIDS)  fb 80,800 NEW;\n OPEN FILE($JOBS) OUTPUT;\n OPEN FILE($CODE) OUTPUT;\n OPEN FILE($DSIDS) OUTPUT;\n\n write f($dsids) from(' ');\n write f($dsids) from('   /*    Data Set Declare Statements  */ ');\n write f($dsids) from(' ');\n\n write f($code) from(' ');\n write f($code) from('   /*    Code for Program Execution  */ ');\n write f($code) from(' ');\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FULLQUAL": {"ttr": 11009, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x132\\x009\\x009\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:32:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "JOL"}, "text": "FULLQUAL: MACRO;\nIF %#####1 THEN;\n           ELSE DO; DCL %#####1 INIT '' EXT;\n                    DCL %#####2 INIT '' EXT;\n                    DCL %#####3 INIT '' EXT;\n                    END;\n%#####1 = %LIST(1);\n%#####2 = %LIST(2);\n%#####3 = '';\nIF %LIST(3) THEN %#####3 = %LIST(3);\nEND;\n%####TP = TYPE(%#####1);\n%####L = LENGTH(%#####1);\n%####FN = SUBSTR(%#####1,1,%####L);\nIF %####TP = 'LIT'\n  THEN %###FQN = '%####FN';\n  ELSE DO; %####I = INDEX(####FN,'(');\n           IF %####I = 0 THEN %####LL = %####L;\n                         ELSE %####LL = %####I - 1;\n           %####VQ = 0;\n           %####L2 = LENGTH(#####2);\n           %####LQS = %####LL - %####L2;\n           %####LQS = %####LQS + 1;\n           IF %####LQS > 0\n             THEN DO; %####LAST = SUBSTR(####FN,%####LQS,%####L2);\n                      IF '%####LAST' = '%#####2' THEN %####VQ = 1;\n                      END;\n           IF %#####3 \u00ac= ''\n             THEN DO; %####L3 = LENGTH(#####3);\n                      %####LQS = %####LL - %####L3;\n                      %####LQS = %####LQS + 1;\n                      IF %####LQS > 0\n                      THEN\n                      DO; %####LAST = SUBSTR(####FN,%####LQS,%####L3);\n                          IF '%####LAST' = '%#####3' THEN %####VQ = 1;\n                          END;\n                      IF %####VQ = 0\n                        THEN DO; %MESS = 'VALID QUALIFIERS FOR %####FN '\n                                   || 'ARE %#####2 AND %#####3. ';\n                                 %MESS = '%MESS ENTER QUALIFIER.';\n                                 WRITE '%MESS';\n                                 READ #####2;\n                                 END;\n                      END;\n           IF %####I = 0\n             THEN DO; SET ###FQN = '%SYSPREF.%####FN';\n                      IF %####VQ = 0 THEN %###FQN = '%###FQN.%#####2';\n                      END;\n             ELSE DO; %####I1 = %####I - 1;\n                      %####S1 = SUBSTR(####FN,1,%####I1);\n                      %####S2 = SUBSTR(####FN,%####I);\n                      IF %####S1 = '' THEN %####QUAL = %#####2;\n                                      ELSE %####QUAL = '.%#####2';\n                      IF %####VQ = 1 THEN %####QUAL = '';\n                      %###FQN = '%SYSPREF.%####S1%####QUAL%####S2';\n                      END;\n           END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GETFIELD": {"ttr": 11011, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "getfield:macro;\n\ndcl %change init('');\ndcl %fldind init '';         /* Need to decalre for MVS, VSE etc */\n\npanel option caps;\npanel option showfield;\n\nInput:\n\n%fldnum=1;                   /* Start at Field 1 */\n\nif %system = 'JOLSHELL'\nthen  /* */\nPanel  box\n/( ctr hi 'Jol SORT/MERGE Fields Input Panel')\n/('        This PANEL allows you to enter SORT or MERGE Parameters,')\n ('        one Parameter at a time.  Up to 16 Fields may be entered')\n ('        on separate screens.')\n/('        Press F3 after you have entered all the required parameters.')\n/('Note:   In the FIELD Indicator position, you can enter an')\n ('        ''F'', which means a Field instead of a starting column.')\n ('                    Field      Field     Field    Type     Sort')\n ('                   Indicator   Position  Length           Direction')\n //\n ('Enter Details  ===>   ',fldind,1,'')\n (' ',fldstart,4,'',16,32,16,33)\n (' ',fldlen,4,'',16,43,16,44)\n (' ',fldtyp,4,'',16,50,16,52)\n (' ',flddir,1,'',16,60,16,62)\n\n/\n ('Field Parameters Built Now Are:-')\n ('  ',retfield,65,'%retfield')\n/\nhelpline ('Press F3 To Return To Previous Menu');\n\nelse           /* OS (MVS, FSP etc */\nPanel  box\n/( ctr hi 'Jol SORT/MERGE Fields Input Panel')\n/('        This PANEL allows you to enter SORT or MERGE Parameters,')\n ('        one Parameter at a time.  Up to 16 Fields may be entered')\n ('        on separate screens.')\n/('        Press F3 after you have entered all the required parameters.')\n///\n ('                               Field     Field    Type     Sort')\n ('                               Position  Length           Direction')\n //\n ('Enter Details  ===>    ')\n (' ',fldstart,4,'',16,32,16,33)\n (' ',fldlen,4,'',16,43,16,44)\n (' ',fldtyp,4,'',16,50,16,52)\n (' ',flddir,1,'',16,60,16,62)\n\n/\n ('Field Parameters Built Now Are:-')\n ('  ',retfield,65,'%retfield')\n/\nhelpline ('Press F3 To Return To Previous Menu');\n\nvalid1:\n\n    if %fldind='' & %fldstart='' & %fldlen='' & %fldtyp=''\n       & %flddir=''\n    then do;\n        if %syspfk=3 then goto return;\n        panel reread from fldind\n                  'Press F3 to Exit, or Enter Data');\n        goto valid1;\n    end;\n\n    if %fldind\u00ac=''      /* Check if Field Indicator valid        */\n    &  %fldind\u00ac='F'\n    then do;\n        panel reread from fldind\n                  'Filetype must be F or Blank');\n        goto valid1;\n    end;\n\n    %work=type(fldstart); /* Check if Field Start is Valid      */\n    if %work\u00ac='NUM'\n    |  %fldstart=''\n    then do;\n          panel reread from fldstart 'Field Starting Posn Not Numeric';\n          goto valid1;\n    end;\n    if %work='NUM'  & %fldstart>10000\n    then do;\n          panel reread from fldstart 'Field Size is > 10000';\n          goto valid1;\n    end;\n\n    %work=type(fldlen); /* Check if Field Length Valid      */\n    if %work\u00ac='NUM'\n    &  %fldlen\u00ac=''\n    then do;\n          panel reread from fldlen 'Field Length Not Numeric';\n          goto valid1;\n    end;\n    if %work='NUM'  & %fldlen>255\n    then do;\n          panel reread from fldlen 'Field Length is > 255';\n          goto valid1;\n    end;\n\n    if %fldtyp=''      /* Check if Field Type valid        */\n    then do;\n         %fldtyp='CH';  /* Set Default                     */\n         panel reread from fldtyp\n                'Default Field Type CH Assigned');\n         goto valid1;\n    end;\n\n    if %fldtyp\u00ac='CH '   /* Check if Field Type valid        */\n    &  %fldtyp\u00ac='ZD '\n    &  %fldtyp\u00ac='NU M'\n    &  %fldtyp\u00ac='FL '\n    &  %fldtyp\u00ac='CA PS'\n    then do;\n         panel reread from fldtyp\n                'Type Must be CH, ZD, NUM, FL or CAPS';\n         goto valid1;\n    end;\n\n    if %flddir=''      /* Check if Field Direction valid   */\n    then do;\n         %flddir='A';  /* Set Default                     */\n         panel reread from flddir\n                'Default Direction Ascending Assumed');\n         goto valid1;\n    end;\n\n    if %flddir\u00ac='A'    /* Check if Field Type valid        */\n    &  %flddir\u00ac='D'\n    then do;\n         panel reread from flddir\n                'Type Must be A or D';\n         goto valid1;\n    end;\n\n/* Build Return String */\n\n    if %retfield\u00ac=' '       /* Have we already started building ? */\n    then %retfield='%retfield,';    /* Put in a comma */\n\n    %retfield\n       ='%retfield%fldind%fldstart,%fldlen,%fldtyp,%flddir';\n\n    %fldind='';\n    %fldstart='';\n    %fldlen='';\n    %fldtyp='';\n    %flddir='';\n\n    if %Syspfk\u00ac=3\n    then do;\n         %fldnum=%fldnum+1;\n         panel reread;\n         goto valid1;\n    end;\n\nreturn:\n\n    panel option noshowfield;\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GETNETAF": {"ttr": 11015, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x88\\x01\\x9f\\x00\\x88!_\\x17&\\x00E\\x00;\\x00\\x02\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1988-01-19T00:00:00", "modifydate": "1988-08-02T17:26:00", "lines": 69, "newlines": 59, "modlines": 2, "user": "JOL"}, "text": "GETNETAF: MACRO NOJOIN;    /* UNDOCUMENTED NOJOIN */\n /*****************************************************************/\n /*****HANDLE AFTER CLAUSE, IF ANY ********************************/\n /*****************************************************************/\n\n/* NOTE THAT JOL VERY NICELY JOINS UP ANY PARMS IN () FOR US, WHICH\n   IS EXACTLY WHAT WE DON'T WANT FOR THE AFTER CLAUSE IN SUBMIT.\n\n   THEREFORE , WE MUST EXPAND THEM IF THEY ARE FOUND.\n*/\n\n DCL %SYSNETID INIT('') EXT;  /* SET IF NETWORK EXECUTING */\n DCL %SYSJOBS1 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSJOBS2 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSNTINC INIT('') EXT;  /* KEEPS INCLUDE DATA SET FOR JOBS      */\n DCL %SYSNTMAC INIT('') EXT;  /* KEEPS JOL MACRO DATA SETS FOR JOBS   */\n DCL %CHK1,%CHK2,%CHK3,%CHK4,%CHK5,%CHK6,\n     %CHK7,%CHK8,%CHK9,%CHK10 INIT '' ;\n\n   DCL %SUB     INIT '0';\n   DCL %X       INIT '    IF ';\n   DCL %BRACKET INIT '0';\n   IF %list(1)\u00ac='AFTER' then exit;   /* no work to do */\n   %SUB=1;                           /* Set 'array' inedx to 1 */\n LABEL TAFT;\n       %SUB=%SUB+1;\n       %Y='%LIST(%SUB)';\n       %Z=TYPE(Y);\n       IF %Y='(' THEN %BRACKET=%BRACKET+1;\n       IF %Y=')' THEN %BRACKET=%BRACKET-1;\n       IF %Y = '|' | %Y='OR' | %Y = '&' | %Y='AND'\n       |  %Y = '('\n       THEN DO;\n           IF %BRACKET=0            /* A PARENTHESIZED EXPR ? */\n           THEN DO;                 /* NO ... */\n               WRITE FILE($$JCODE) FROM('%X');\n               %X='    %Y  ';\n           END;\n           ELSE %X='%X %Y ';\n       END;\n       ELSE DO;\n           IF %Y='ENDED' THEN %X='%X ''ENDED''';\n           IF %Y=')' THEN %X='%X )';\n           %WORK='%Y';                 /* SAVE NAME FOR CHECK LATER */\n/*     %Y='%Y        '; %Y=SUBSTR(Y,1,8);   /* MAKE 8 CHARS LONG */\n            IF %Y\u00ac='ENDED' & %Y\u00ac=')'   /* IS IT A JOB NAME ? */\n            THEN DO;          ;        /* YES */\n                %L=LENGTH(X);\n                IF %L>60 THEN DO;\n                    WRITE FILE($$JCODE) FROM('%X ');\n                    %X='        ';\n                END;\n                if '%LIST(%SUB+1)'\u00ac='ENDED'\n                then  %X='%x %%%y=''ENDED''';\n                else %X='%X %%%Y=';        /* YES */\n                %L=INDEX(SYSJOBS1,'%WORK');  /* SEE IF JOB SUBMITTED */\n                %K=INDEX(SYSJOBS2,'%WORK');  /* SEE IF JOB SUBMITTED */\n                IF %L=0 & %K=0\n                THEN DO;\n                STOP 'JOB %WORK NOT YET SUBMITTED:- NETWORK WILL FAIL';\n                END;\n            END;\n       END;\n       IF %SUB<%SYSNLIST THEN REDO TAFT;\n    IF %X\u00ac='' THEN  WRITE FILE($$JCODE) FROM('%X ');\n    WRITE FILE($$JCODE) FROM('    THEN DO;');\n    IF %BRACKET\u00ac=0 THEN\n    WRITE 'UNMATCHED PARENTHESES IN AFTER CLAUSE OF SUBMIT';\n END;   /* OF AFTER PREPROCESSING */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GETNETST": {"ttr": 11017, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x88\\x01\\x8f\\x00\\x88\\x02/\\x16@\\x00=\\x006\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1988-01-18T00:00:00", "modifydate": "1988-01-22T16:40:00", "lines": 61, "newlines": 54, "modlines": 0, "user": "JOL"}, "text": " /*****************************************************************/\n /**              GETNETST MACRO                                 **/\n /**               ------------                                  **/\n /**                                                             **/\n /** Built by C. CLARKE    18.01.88 FOR NETWORKING               **/\n /**                                                             **/\n /** This macro loads the status of the network from data        **/\n /**      saved with the SAVESYMS Macro.                         **/\n /** Previously, an INCLUDE instruction did this, but it         **/\n /**      meant that a job could not have the same name as       **/\n /**      a network.  This macro overcomes that restriction.     **/\n /**                                                             **/\nGetnetst:MACRO;\n /*****************************************************************/\n /******************SYMBOLIC DECLARES *****************************/\n /*****************************************************************/\n DCL %X        INIT '';   /* LOCAL VARIABLE */\n DCL %JOBNAME  INIT '';   /* LOCAL VARIABLE */\n IF %LIST(1)=''\n THEN DO;\n    STOP 'CHECKNET COMMAND EXECUTED WITHOUT NETWORK ID';\n    EXIT;\n END;\n\n IF %LIST(2)\u00ac=''\n THEN Exit 'Too Many Paramters on RESTSTAT Macro';\n\n\n /*****************************************************************/\n /*****Open Input Status Data Set  ********************************/\n /*****************************************************************/\n\n      Alloc f($$status) da(%$jolpref.jolnet.status(%list(1)) shr;\n\n      open f($$status) input;\n      if %lastcc \u00ac=0\n      then do;\n           signal error 3,'Get Status for Network %list(1) Failed';\n           exit quit;\n      end;\n end;\n\n label statlup;\n      if \u00ac eof($$status)\n      then do;\n           read f($$status) into($$statw);\n           %$$statw=substr($$statw,2); /* Drop % sign */\n           %$$statw1=index($$statw,'=');     /* Find = sign */\n           %$$statw1=%$$statw1-1;            /* Prior to = sign */\n           %$$statws=substr($$statw,1,%$$statw1); /* Get Symbolic */\n           %$$statw1=%$$statw1+2;            /* Go Past = sign */\n           %$$statwv=substr($$statw,%$$statw1); /* Get Value */\n           %$$statw1=index($$statwv,';');     /* Find ; sign */\n           %$$statw1=%$$statw1-2;            /* Prior to ; sign */\n           if %$$statw1<0 then %$$statw1=0;\n           %$$statwv=substr($$statwv,1,%$$statw1); /* Drop ; */\n           set %$$statws = '%$$statwv';\n           redo statlup;\n      end;\n      close f($$status);\n      freefile $$status;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GETSMFLD": {"ttr": 11019, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "getfield:macro;\n\ndcl %change init('');\ndcl %fldind init '';         /* Need to decalre for MVS, VSE etc */\n\npanel option caps;\npanel option showfield;\n\nInput:\n\n%fldnum=1;                   /* Start at Field 1 */\n\nif %system = 'JOLSHELL'\nthen  /* */\nPanel  box\n/( ctr hi 'Jol SORT/MERGE Fields Input Panel')\n/('        This PANEL allows you to enter SORT or MERGE Parameters,')\n ('        one Parameter at a time.  Up to 16 Fields may be entered')\n ('        on separate screens.')\n/('        Press F3 after you have entered all the required parameters.')\n/('Note:   In the FIELD Indicator position, you can enter an')\n ('        ''F'', which means a Field instead of a starting column.')\n ('                    Field      Field     Field    Type     Sort')\n ('                   Indicator   Position  Length           Direction')\n //\n ('Enter Details  ===>   ',fldind,1,'')\n (' ',fldstart,4,'',16,32,16,33)\n (' ',fldlen,4,'',16,43,16,44)\n (' ',fldtyp,4,'',16,50,16,52)\n (' ',flddir,1,'',16,60,16,62)\n\n/\n ('Field Parameters Built Now Are:-')\n ('  ',retfield,65,'%retfield')\n/\nhelpline ('Press F3 To Return To Previous Menu');\n\nelse           /* OS (MVS, FSP etc */\nPanel  box\n/( ctr hi 'Jol SORT/MERGE Fields Input Panel')\n/('        This PANEL allows you to enter SORT or MERGE Parameters,')\n ('        one Parameter at a time.  Up to 16 Fields may be entered')\n ('        on separate screens.')\n/('        Press F3 after you have entered all the required parameters.')\n///\n ('                               Field     Field    Type     Sort')\n ('                               Position  Length           Direction')\n //\n ('Enter Details  ===>    ')\n (' ',fldstart,4,'',16,32,16,33)\n (' ',fldlen,4,'',16,43,16,44)\n (' ',fldtyp,4,'',16,50,16,52)\n (' ',flddir,1,'',16,60,16,62)\n\n/\n ('Field Parameters Built Now Are:-')\n ('  ',retfield,65,'%retfield')\n/\nhelpline ('Press F3 To Return To Previous Menu');\n\nvalid1:\n\n    if %fldind='' & %fldstart='' & %fldlen='' & %fldtyp=''\n       & %flddir=''\n    then do;\n        if %syspfk=3 then goto return;\n        panel reread from fldind\n                  'Press F3 to Exit, or Enter Data');\n        goto valid1;\n    end;\n\n    if %fldind\u00ac=''      /* Check if Field Indicator valid        */\n    &  %fldind\u00ac='F'\n    then do;\n        panel reread from fldind\n                  'Filetype must be F or Blank');\n        goto valid1;\n    end;\n\n    %work=type(fldstart); /* Check if Field Start is Valid      */\n    if %work\u00ac='NUM'\n    |  %fldstart=''\n    then do;\n          panel reread from fldstart 'Field Starting Posn Not Numeric';\n          goto valid1;\n    end;\n    if %work='NUM'  & %fldstart>10000\n    then do;\n          panel reread from fldstart 'Field Size is > 10000';\n          goto valid1;\n    end;\n\n    %work=type(fldlen); /* Check if Field Length Valid      */\n    if %work\u00ac='NUM'\n    &  %fldlen\u00ac=''\n    then do;\n          panel reread from fldlen 'Field Length Not Numeric';\n          goto valid1;\n    end;\n    if %work='NUM'  & %fldlen>255\n    then do;\n          panel reread from fldlen 'Field Length is > 255';\n          goto valid1;\n    end;\n\n    if %fldtyp=''      /* Check if Field Type valid        */\n    then do;\n         %fldtyp='CH';  /* Set Default                     */\n         panel reread from fldtyp\n                'Default Field Type CH Assigned');\n         goto valid1;\n    end;\n\n    if %fldtyp\u00ac='CH'    /* Check if Field Type valid        */\n    &  %fldtyp\u00ac='ZD'\n    &  %fldtyp\u00ac='NUM'\n    &  %fldtyp\u00ac='FL'\n    &  %fldtyp\u00ac='CAPS'\n    then do;\n         panel reread from fldtyp\n                'Type Must be CH, ZD, NUM, FL or CAPS';\n         goto valid1;\n    end;\n\n    if %flddir=''      /* Check if Field Direction valid   */\n    then do;\n         %flddir='A';  /* Set Default                     */\n         panel reread from flddir\n                'Default Direction Ascending Assumed');\n         goto valid1;\n    end;\n\n    if %flddir\u00ac='A'    /* Check if Field Type valid        */\n    &  %flddir\u00ac='D'\n    then do;\n         panel reread from flddir\n                'Type Must be A or D';\n         goto valid1;\n    end;\n\n/* Build Return String */\n\n    if %retfield\u00ac=''        /* Have we already started building ? */\n    then %retfield='%retfield,';    /* Put in a comma */\n\n    %retfield\n       ='%retfield%fldind%fldstart,%fldlen,%fldtyp,%flddir';\n\n    %fldind='';\n    %fldstart='';\n    %fldlen='';\n    %fldtyp='';\n    %flddir='';\n\n    if %Syspfk\u00ac=3\n    then do;\n         %fldnum=%fldnum+1;\n         panel reread;\n         goto valid1;\n    end;\n\nreturn:\n\n    panel option noshowfield;\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HELP1": {"ttr": 11791, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " HELP : MACRO;\n\n     IF %LIST(1) = 'DECLARE' THEN\n         HELPDCL1;\n     IF %LIST(1) = 'DCL' THEN\n         HELPDCL1;\n     IF %LIST(1) = 'IF' THEN\n         HELPIF;\n     IF %LIST(1) = 'LANGUAGE'  THEN HELPLANG;\n     IF %LIST(1) = 'LANG'      THEN HELPLANG;\n     IF %LIST(1) = 'MACRO'     THEN HELPMACR;\n     IF %LIST(1) = 'COMMAND'   THEN HELPMACR;\n     IF %LIST(1) = 'ERROR'     THEN HELPOERR;\n     IF %LIST(1) = 'ON'        THEN HELPOERR;\n     IF %LIST(1) = 'PANEL'     THEN HELPPANL;\n     IF %LIST(1) = 'SCREEN'    THEN HELPPANL;\n     IF %LIST(1) = 'RETURN'    THEN HELPRETN;\n     IF %LIST(1) = 'RETN'      THEN HELPRETN;\n     IF %LIST(1) = 'SYMBOLICS' THEN HELPSYMB;\n     IF %LIST(1) = 'SYMS'      THEN HELPSYMB;\n     IF %LIST(1) = 'SYM'       THEN HELPSYMB;\n     IF %LIST(1) = ''\n     then do;\nHELPSC1:\n          HELP1;\n          IF %SYSPFK \u00ac= 3 | %SYSPFK=15 THEN HELP2;\n          IF %SYSPFK \u00ac= 3 | %SYSPFK=15\n          then do;\n             REDO HELPSC1;\n             %SYSPFK = 0;\n          END;\n     END;\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HELP2": {"ttr": 12033, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " HELPDCL1 : MACRO;\n %X = '';\n END;\n IF %SYSPFK = 2 THEN %DCL1 = 2;\n LABEL DCL1SC1;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Data Set Declaration Screen Number 1')\n lm 8\n /('When we declare a new Data Set  we are telling the system that')\n  ('this file does not currently exist in the catalog, therefore')\n  ('we will have to provide the information the system will require.')\n /('When Defining Data Sets we have to know 4 things :-')\n /(' 1. What is it going to be called on the system')\n  (' 2. Where the Data Set is to reside.')\n  (' 3. How much space it requires.')\n  (' 4. What is the DCB information.',X,1)\n helpline ('Press PF3 to Exit from Help or Enter to display');\n\n IF %SYSPFK \u00ac= 3 THEN DO;\n LABEL DCL1SC2;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Data Set Declaration screen number 2')\n lm 8\n/(hi 'Note: Wherever DCL is used DECLARE or DEFINE can be used.')\n /  ('      To answer these 4 questions we use a Jol DCL instruction.')\n /  ('      The format of this instruction is as follows:-')\n/(hi '          DCL DSID DS OPTIONS;')\n /(  '      Where the DSID is a name that we assign and is known')\n  (  '      to Jol. DSID stands for Data Set identifier, and we')\n  (  '      can use this in our Jol program if we do not catalog')\n  (  '      this file. It is something like the internal name we')\n  (  '      assign to files in a Cobol program.')\n /(  '      Now let us look at the options which will allow us')\n  (  '      to answer the 4 questions')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n      IF %SYSPFK = 7 THEN DO;\n      %SYSPFK=0;\n REDO DCL1SC1;\n      END;\n LABEL DCL1SC3;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Data Set Declaration Screen Number 3')\n lm 8\n   /('Question 1 : What name is this file going to be known by')\n    ('             on the system?')\n   /('This is the name that will be inserted in the catalog.')\n   /('If we decide to catalog this file after the program')\n    ('has run. Lets say we call this file' hi 'MY.DATA.FILE')\n    ('and let us assign the name data as our DSID.')\n   /('Our DCL instruction now will look like this:-')\n   /(hi '        DCL DATA DS MY.DATA.FILE OPTIONS;')\n   /('Note the DS, this tells Jol that this is a data set')\n    ('declaration.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n      IF %SYSPFK = 7 THEN DO;\n      %SYSPFK=0;\n REDO DCL1SC2;\n      END;\n LABEL DCL1SC4;\n PANEL box  (ctr 'J O L    H E L P  F A C I L I T Y')\n           /(ctr 'Data Set Declaration Screen nNmber 4')\n lm 8\n   /('Question 2 : Where is the created Data Set to reside')\n    ('             on the system?')\n   /('When Jol is installed on your computer all the names')\n    ('of online storage are grouped together under the name' hi\n       ' SYSDA')\n    ('and all the tapes are under the name ' hi 'TAPE')\n    ('so if you want a disk file we only have to say SYSDA.')\n   /('However for tapes or specific disk packs we can add volume')\n    ('information. To do this we say ' hi 'VOL = VOLUME-NAME')\n   /('For our purposes we will use SYSDA, now we have:-')\n   /(hi '      DCL Data DS MY.Data.FILE SYSDA options;')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n      IF %SYSPFK = 7 THEN DO;\n      %SYSPFK=0;\n REDO DCL1SC3;\n      END;\n LABEL DCL1SC5;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Data Set Declaration Screen Number 5')\n   /('  Question 3 : How much space will the Data Set require')\n    ('               on the system?')\nlm 8\n   /('Space is normally allocated in tracks or cylinders')\n    ('with a primary allocation and secondary extents.')\n   /('We do this in Jol by stating the primary space and then')\n    ('the secondary space separated by a comma. eg ' hi '2,1 CYL')\n   /('If we are creating a partioned data set we will also')\n    ('require directory blocks and these are allocated by putting')\n    ('the number we require after the secondary allocation,')\n    ('separated by a comma. eg for 5 blocks ' hi '2,1,5 CYL')\n   /('Let us use a primary of 5 tracks with 2 track extents:-')\n   /(hi '      DCL DATA DS MY.DATA.FILE SYSDA 5,2 TRK options;')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n      IF %SYSPFK = 7 THEN DO;\n      %SYSPFK=0;\n REDO DCL1SC4;\n      END;\n LABEL DCL1SC6;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n   /('  Question 4 : What is the DCB information?')\nlm 8\n   /('DCB informattion is where we tell the system what')\n    ('the data format is to be. So Jol will need to know')\n    ('the data type,(FB,VB,F etc) the block size and the')\n    ('record size. There are several ways to do this in Jol but')\n    ('we will only deal with the most common here.')\n   /('All we need do is specify the type followed by the block')\n    ('and record size separated by a comma.')\n   /('EG for Fixed Block with a record size of 80 block of 6080')\n    (hi '    FB 80,6080')\n   /('We could also code this as FB 6080,80 Jol knows that the')\n    ('largest is the block size. our final declaration would be:-')\n   /(hi '     DCL DATA DS MY.DATA.FILE SYSDA 5,2 TRK FB 80,6080;')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n   IF %SYSPFK = 7 THEN DO;\n   %SYSPFK=0;\n REDO DCL1SC4;\n   END;\n IF %DCL1 = 2 THEN DO;\n   %SYSPFK = 0;\n HELP1;\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HOLIDAYA": {"ttr": 12035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x02\\x00\\x00\\x00\\x87$o\\x00\\x87%/\\x15S\\x007\\x00)\\x00\\x08\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "04.02", "flags": 0, "createdate": "1987-09-03T00:00:00", "modifydate": "1987-09-09T15:53:00", "lines": 55, "newlines": 41, "modlines": 8, "user": "JOL"}, "text": " helpdcl2 : macro;\n %x = '';\n end;\n if %syspfk = 4 then %dcl2 = 4;\n label dcl2sc1;\n panel box/(ctr 'J O L    H E L P    F A C I L I T Y')\n          /(ctr 'Sysout Data Set Declaration Screen Number 1')\nlm 8\n   /('When we declare a SYSOUT data set, we are telling the system')\n    ('where we want our output printed. There are usually several')\n    ('printers which we can use,but it is better to have the system')\n    ('take care of which printer to use, so we would normally assign')\n    ('a Sysout CLASS.')\n   /('Sysout classes are defined for your system as required and you')\n    ('should already be aware of what ones to use,but usually we use')\n    ('class a for normal prints and class x to return a print to')\n    ('the screen.')\n helpline ('Press PF3 to Exit from Help or Enter to display');\n if %syspfk \u00ac= 3 then do;\n label dcl2sc2;\n panel box/(ctr 'J O L    H E L P    F A C I L I T Y')\n      /ctr 'Sysout Data Set Declaration Screen Number 2')\nlm 8\n/(hi 'Note wherever DCL is used DECLARE or DEFINE can be used.')\n   /('The format of a printer declaration is as follows:-')\n   /(hi '       DCL DSID SYSOUT options;')\n   /('where the dsid is a name that we assign and is known')\n    ('to Jol. DSID stands for data set identifier, and we')\n    ('can use this in our Jol program.')\n   /('It is something like the internal name we')\n    ('assign to files in a Cobol program.')\n   /('Now let us look at the options.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next');\n end;\n if %syspfk \u00ac= 3 then do;\n    if %syspfk = 7 then do;\n    %syspfk = 0;\n redo dcl2sc1;\n    end;\n label dcl2sc3;\n panel box/(ctr 'J O L    H E L P    F A C I L I T Y')\n          /(ctr 'Sysout Data Set Declaration Screen Number 3')\nlm 8\n   /('The first option we can use is the CLASS option.')\n   /('This is usually omitted, so that Jol will take the MSGCLASS')\n    ('and insert it for us. If we wish to use it it is coded')\n    ('like this :- ' hi 'DCL PRT sysout x;')\n   /('where PRT is the name or dsid we have given, and X is the')\n    ('Sysout queue to which this print will be assigned.')\n   /('Note the word SYSOUT, this tells Jol that this is a printer')\n    ('declaration.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next');\n end;\n if %syspfk \u00ac= 3 then do;\n    if %syspfk = 7 then do;\n    %syspfk = 0;\n redo dcl2sc2;\n    end;\n label dcl2sc4;\n panel box (ctr 'J O L    H E L P    F A C I L I T Y')\n /ctr  'Sysout Data Set Declaration Screen Number 4')\n   /('  Options.')\n   /('         There are many options for the printer declaration,')\n    ('         we will only deal with the most common.')\n   /('  DEST:    This tells the system where to send the output,')\n    ('           if we have multiple nodes or minis conected :-')\n/(hi '                DCL PRT SYSOUT A DEST NSW;')\n/   ('  COPIES:  If we want multiple copies (not multi part)')\n    ('           we can code :-')\n/(hi '                DCL PRT SYSOUT X DEST NSW COPIES = 5;')\n/   ('  OUTLIM:  This is when we wish to limit the number')\n    ('           of lines of output :-')\n/(hi '                DCL PRT SYSOUT A OUTLIM = 500;')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next');\n end;\n      if %syspfk = 7 then do;\n         %syspfk = 0;\n         redo dcl2sc3;\n      end;\n      if %dcl2 = 4 then do;\n         %syspfk = 0;\n         help1;\n      end;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HOLIDAYT": {"ttr": 12037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x01\\x00\\x00\\x00\\x87$o\\x00\\x87%\\x1f\\x13X\\x00\\xac\\x00\\x93\\x00\\x1c\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "04.01", "flags": 0, "createdate": "1987-09-03T00:00:00", "modifydate": "1987-09-08T13:58:00", "lines": 172, "newlines": 147, "modlines": 28, "user": "JOL"}, "text": " helpdcl3 : macro;\n %x = '';\n end;\n if %syspfk = 5 then %dcl3 = 5;\n label dcl3sc1;\n panel box (ctr 'J O L    H E L P    F A C I L I T Y')\n          /(ctr 'Program Declaration Screen Number 1')\n lm 8\n   /('When we declare a program, we are telling the system that')\n    ('a program exists on a particular load library, and we also')\n    ('need to tel the system which files the particular program')\n    ('will require. Programs refer to their files by dd names,')\n    ('so we will have to tie the dd name to a catalog name, or')\n    ('to a DSID.')\n   /('The format of a program declaration is :-')\n (hi '      DCL program-name PROG options;')\n   /('where PROG is the key word to tell Jol that this is a')\n    ('program declaration.')\n helpline ('Press PF3 to Exit from Help or Enter to display');\n if %syspfk \u00ac= 3 then do;\n label dcl3sc2;\n panel box (ctr 'J O L    H E L P    F A C I L I T Y')\n           /ctr ('Program Declaration Screen Number 2')\n lm 8\n /(hi'NOTE: Wherever DCL is used DECLARE or DEFINE can be used.')\n   /('Options.')\n   /('LIB:    Programs are held on load libraries; these can be')\n    ('        system libraries like SYS1.LINKLIB, or private')\n    ('        libraries that we create. If a program is not in')\n    ('        SYS1.LINKLIB, then we must tell Jol where to find it.')\n    ('        We do this with a LIB statement. Let us say we have')\n    ('        a program called PAY1 and it is on a library called')\n    ('        PAYROLL.LIB, we would code it like this :-')\n/(hi '             DCL PAY1 PROG LIB = PAYROLL.LIB OPTIONS;')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next');\n end;\n if %syspfk \u00ac= 3 then do;\n    if %syspfk = 7 then do;\n    %syspfk = 0;\n redo dcl3sc1;\n    end;\n label dcl3sc3;\n panel box (ctr 'J O L    H E L P    F A C I L I T Y')\n /ctr ('Program Declaration Screen Number 3')\n lm 8\n   /('Options (continued)')\n   /('DD Definitions : in Jol we tell the system what each')\n    ('     ddname coded in the users program does, and to which file.')\n    ('     Let us look at an example of this. In our program (PAY1)')\n    ('     we have assigned 3 files. The dd names of these files are')\n    ('     hard coded into the program as MASTDD, for the master input')\n    ('     file, PRINTDD for our report file, and OUTDD for our output')\n    ('     disk file which will be a new file.')\n   /('     Each of these will use a system file')\n   /('     MASTDD will read the file ''PAROLL.MASTER''')\n    ('     PRINTDD will write a sysout file')\n    ('and')\n    ('     OUTDD will write a new file called PAYROLL.MASTER.NEW.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next');\n end;\n if %syspfk \u00ac= 3 then do;\n    if %syspfk = 7 then do;\n    %syspfk = 0;\n redo dcl3sc2;\n    end;\n label dcl3sc4;\n panel box (ctr 'J O L    H E L P    F A C I L I T Y')\n           /(ctr 'Program Declaration Screen Number 4')\n   /('Because PRINTDD and OUTDD write new files, they would have')\n    ('been previously defined in the Jol program like this:-')\n/(hi '         dcl prt sysout; /* this is for printdd a sysout file */')\n (hi '         dcl output ds payroll.master.new sysda 3,2 cyl')\n (hi '                 fb 80,6080; /*this is for outdd */')\n  / ('As we have seen previously our program is held on a library')\n    ('called payroll.lib. our program declare will now look like')\n    ('this:-')\n/(hi '         dcl pay1 prog lib = payroll.lib')\n (hi '             mastdd  reads  payroll.master')\n (hi '             printdd writes prt')\n (hi '             outdd   writes output;')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next');\n end;\n if %syspfk \u00ac= 3 then do;\n    if %syspfk = 7 then do;\n    %syspfk = 0;\n redo dcl3sc3;\n    end;\n label dcl3sc5;\n panel box (ctr 'J O L    H E L P    F A C I L I T Y')\n          /(ctr 'Program Declaration Screen Number 5')\n/(hi '         dcl prt sysout; /* this is for printdd a sysout file */')\n (hi '         dcl output ds payroll.master.new sysda 3,2 cyl')\n (hi '                 fb 80,6080;/*this is for outdd */')\n (hi '         dcl pay1 prog lib = payroll.lib')\n (hi '             mastdd  reads  payroll.master')\n (hi '             printdd writes prt')\n (hi '             outdd   writes output;')\nlm 8\n  / ('As you can see payroll.master needs no declaration we simply')\n    ('tie it to the dd name it was given in the program (pay1), by')\n    ('saying mastdd reads payroll.master. printdd and outdd however')\n    ('are new files, so we declare them then tie the dd names')\n    ('to the dsids we have assigned in our declaration.')\n    ('printdd writes prt and outdd writes output,')\n    ('where prt and output are the dsids we have assigned.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next');\n end;\n if %syspfk \u00ac= 3 then do;\n    if %syspfk = 7 then do;\n    %syspfk = 0;\n redo dcl3sc4;\n    end;\n label dcl3sc6;\n panel box (ctr 'J O L    H E L P    F A C I L I T Y')\n          /(ctr 'Program Declaration Screen Number 6')\n   /('  All we have to do now in order to run pay1 is to say just that')\n    ('  in our Jol program :-')\n/(hi '         RUN PAY1;')\n/   ('  If we wish to run the same program several times in the one Jol'\n    ('  program we can assign a label to the declaration and then')\n    ('  we say RUN LABEL. This stops Jol from not knowing which ')\n    ('  particular run we want. For example :-')\n/(hi '         run1 : dcl pay1 prog lib = payroll.lib')\n (hi '                    mastdd  reads  payroll.master')\n (hi '                    printdd writes prt')\n (hi '                    outdd   writes output;')\n/(hi '         run run1;')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next');\n end;\n if %syspfk \u00ac= 3 then do;\n    if %syspfk = 7 then do;\n    %syspfk = 0;\n redo dcl3sc5;\n    end;\n label dcl3sc7;\n panel box (ctr 'J O L    H E L P    F A C I L I T Y')\n          /(ctr 'Program Declaration Screen Number 7')\n lm 8\n   /('As well as reading or writing a file we may also wish to')\n    ('update which is already on the catalog.')\n   /('To do this we simply say:')\n /(hi'    ddname updates file name')\n /(hi'         run2 : dcl pay1 prog lib = payroll.lib')\n  (hi'                mastdd  reads  payroll.master')\n  (hi'                printdd writes prt')\n  (hi'                outdd   updates payroll.master.new;')\n  (hi'         run run2;')\n   /('The ddname outdd could then be open for i/o in our program.')\n    ('likewise we can add data on to the end of a file by saying')\n    ('ddname mods file name.')\n   /('Now lets look at some of the other options.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next');\n end;\n if %syspfk \u00ac= 3 then do;\n    if %syspfk = 7 then do;\n    %syspfk = 0;\n redo dcl3sc6;\n    end;\n label dcl3sc8;\n panel box (ctr 'J O L    H E L P    F A C I L I T Y')\n          /(ctr 'Program Declaration Screen Number 8')\n lm 8\n   /('When we are testing a program we may not wish to use an')\n    ('output file as we only wish to test the logic of the program')\n    ('or maybe we just wish to regenerate a report without creating')\n    ('an output file. to do this we code the file as nullfile :-')\n /(hi'         run3 : dcl pay1 prog lib = payroll.lib')\n  (hi'                mastdd   reads  payroll.master')\n  (hi'                printdd  writes prt')\n  (hi'                outdd    updates ''nullfile'';')\n /(hi'         run run3;')\n /  ('The ddname outdd could then be opened in our program.')\n    ('but no data would be held. Likewise we can use nullfile')\n    ('for input in which case an end of file condition is reached')\n    ('with the first read.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next');\n end;\n    if %syspfk = 7 then do;\n       %syspfk = 0;\n       redo dcl3sc6;\n    end;\n    if %dcl3 = 5 then do;\n       %syspfk = 0;\n       help1;\n    end;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "INITT": {"ttr": 12041, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x83\\x10O\\x00\\x83\\x11\\x8f\\x15\\x16\\x00(\\x00\\r\\x00%\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1983-04-14T00:00:00", "modifydate": "1983-04-28T15:16:00", "lines": 40, "newlines": 13, "modlines": 37, "user": "JOL"}, "text": " helpdcl4 : macro;\n end;\n if %syspfk = 6 then %dcl4 = 6;\n label dcl4sc1;\n panel box (ctr 'J O L    H e l p   F a c i l i t y')\n          /(ctr 'SYSIN Data Set Declaration Screen 1')\n lm 8\n /  ('When declaring card files all we need do is to assign')\n    ('a DSID to the file and then follow this with an asterisk.')\n /  ('For example : lets say we have 3 control cards for a program,')\n    ('these contain as follows :- ')\n /  ('First card  ....' hi 'PRINT MY.FILE')\n    ('Second card ....' hi '    ON FORM #123')\n    ('Third card  ....' hi '    Location Sydney')\n /  ('The DSID we will assign to this card file will be CONTROL.')\n    ('Our complete declaration will now look like this :-')\n /(hi'         dcl control *;')\n  (hi'         print my.file')\n  (hi'               on form #123')\n  (hi'               location sydney')\n  (hi'         EOF;');\n if %syspfk \u00ac= 3 then do;\n label dcl4sc2;\n panel box (ctr 'J O L    H e l p   F a c i l i t y')\n          /(ctr 'SYSIN Data Set Declaration Screen 2')\n /(hi'         dcl control *;')\n  (hi'         print my.file')\n  (hi'               on form #123')\n  (hi'               location sydney')\n  (hi'         EOF;')\n lm 8\n   /('The DCL and the * tell Jol that this is a card file')\n    ('declaration and the Dsid is CONTROL. when Jol encounters')\n    ('this statement it will take all following data as cards')\n    ('until such time as an \"EOF;\" statement is found in cols 1-4.')\n   /('There are several other options we can use on this declare,')\n    ('however we will only deal with the replace option here.')\n   /('All the others can be found in the Jol manual.');\n end;\n if %syspfk \u00ac= 3 then do;\n    if %syspfk = 7 then do;\n    %syspfk = 0;\n redo dcl4sc1;\n    end;\n label dcl4sc3;\n panel box (ctr 'J O L    H e l p   F a c i l i t y')\n          /(ctr 'SYSIN Data Set Declaration Screen 3')\n lm 8\n   /('The REPLACE option on a card file declaration tells Jol')\n    ('that somewhere within your cards you will be using')\n    ('Symbolic variables, and Jol will then scan the cards')\n    ('replacing any symbolics found with the current contents of')\n    ('of that symbolic. eg :-')\n/(hi '         %%location = ''SYDNEY'';')\n (hi '         dcl control * replace;')\n (hi '               print my.file')\n (hi '                     on form #123')\n (hi '                     location %%location')\n (hi '         EOF;')\n/   ('This would mean that by a simple change of a symbolic or')\n    ('macro variable we could set up the cards necessary without')\n    ('actually rewriting the cards each time.');\n end;\n    if %syspfk = 7 then do;\n    %syspfk = 0;\n redo dcl4sc2;\n    end;\n if %dcl4 = 6 then do;\n %syspfk = 0;\n help1;\n end;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCLTOJOL": {"ttr": 12043, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " HELPIF : MACRO;\n END;\n\n IF %SYSPFK = 8 THEN %HIF = 8;\n LABEL IFSC1;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'The IF Instruction - Screen Number 1')\nlm 8\n/(hi 'IF INSTRUCTION. ')\n/   ('The IF instruction can be used to test values of return codes,')\n    ('symbolic variables, test if a program has run or if a step has')\n    ('been executed. If also tests for error and completion codes.')\n/   ('The format is:-')\n/(hi '         IF LABEL operator THEN statements(s);')\n (hi '         ELSE statements(s);')\n/   ('For example:')\n/(hi '         IF A = B THEN RUN PROG1;')\n (hi '         ELSE SOME-OTHER-STATEMENT;')\n    ('Where A can be a constant, label, program name, symbolic')\n    ('variable, ANY, ERROR, LASTCC or MAXCC, and B can be a symbolic')\n    ('variable, program name label or a constant.')\n helpline ('Press PF3 to Exit from Help or Enter to display');\n IF %SYSPFK \u00ac= 3 THEN DO;\n LABEL IFSC2;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'The IF Instruction - Screen Number 2')\n /  ('  IF instruction operators;-')\nlm 8\n /  ('The operator (eg:- =) can be any of the following:-')\n    ('        =  (equals), \u00ac= (not equal to), < (less than),')\n    ('        <= (less than or equal to), \u00ac= (not less than),')\n    ('        >  (greater than), >= (greater than or equal to)')\n    ('        \u00ac> (not greater than).')\n /  ('COMBINING IF statements')\n /  ('If statements can be combined using the & (and) and the')\n    (' | (OR) OPERATORS For Example:-;')\n/(hi '         IF %%DAY = 1 & %%MONTH = 1 THEN RUN UPDATE;')\n    ('The update program (UPDATE) would only run if the date ')\n    ('was the 1st of January.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n       IF %SYSPFK = 7 THEN DO;\n          %SYSPFK = 0;\n          REDO IFSC1;\n       END;\n LABEL IFSC3;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n lm 8\n /  ('IF INSTRUCTION COMPILE AND EXECUTION ')\n /  ('There are two forms of IF statements the: '\n /  ('(1) Compile Time and the  (2) Execution Time IF.')\n /  ('(1) All compile time IF statements are resolved at compile')\n    ('    time and evaluated immediately.')\n    ('(2) All execution time IF statements are executed when you')\n    ('    submit your job. For example:-')\n /(hi'            IF %%DAY = 1        /* IS COMPILE TIME IF */')\n /(hi'            IF PROGUPDT = 1     /* IS AN EXECUTION TIME IF */')\n /  ('We can combine compile time IFs with execution time IFs as long')\n    ('as the compile time IF comes first. ')\n /(hi'            IF %%DAY = TUESDAY & PROG1 = 0 THEN LINK MY.PROG;')\n    ('If DAY is TUESDAY the LINK macro will be called, but the code')\n    ('generated will only be executed if PROG1 returns 0.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n       IF %SYSPFK = 7 THEN DO;\n       %SYSPFK = 0;\n REDO IFSC2;\n       END;\n LABEL IFSC4;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'The IF Instruction - Screen Number 4')\nlm 8\n  //('Any single instruction can be used after an IF test. ')\n    ('This instruction can be a normal jol instruction or a ')\n    ('call to a macro. For example :- ')\n/(hi '         IF %%MONTHNO = 3 THEN SUBMIT PROG01;')\n/   ('Note the single instruction SUBMIT.')\n/(hi '         IF %%DAYNO = 1 THEN PROCNEW;')\n/   ('The macro PROCNEW is called if the test is true.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n       IF %SYSPFK = 7 THEN DO;\n       %SYSPFK = 0;\n REDO IFSC3;\n       END;\n LABEL IFSC5;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'The IF Instruction - Screen Number 5')\n  //('If we wish to place several statements under an IF, ')\n    ('then we must use a DO.')\n  / ('DO tells Jol that several statements are to follow; it is ')\n    ('terminated by an END statement. eg :-')\n/(hi '                 IF %%DAYNO = 1 ')\n (hi '                 THEN DO;')\n (hi '                      SUBMIT JOB1;')\n (hi '                      SUBMIT JOB2;')\n (hi '                 END; ')\n   /('If true, all the instructions between the DO and the END ')\n    ('are executed.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n       IF %SYSPFK = 7 THEN DO;\n       %SYSPFK = 0;\n REDO IFSC4;\n       END;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'The IF Instruction - Screen Number 6')\nlm 8\n /  ('The single instruction after an IF test can also be another IF.')\n /  ('This means that we can nest IF tests. However there is a limit')\n    ('to the level of nesting and this is a total of 8 tests.')\n /  ('Likewise each IF can only have 40 expressions (& or |).')\n /(hi'         IF %%DAYNO = 1 THEN ')\n  (hi'           IF %%MONTHNO = 1 THEN ')\n  (hi'              IF %%LOCATION = SYDNEY THEN SUBMIT SYDPROG;')\n/   ('If we wish to test the value returned from a macro then we')\n    ('must put a label on the call to the macro. For Example :-')\n/(hi 'COBSTEP: COBOL;')\n (hi '         IF COBSTEP < 8 THEN LINKSTEP : LINK OBJ;')\n    ('If the Cobol compiler returns less than 8 then Link the object.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n       IF %SYSPFK = 7 THEN DO;\n       %SYSPFK = 0;\n REDO IFSC4;\n       END;\n  IF %HIF = 8 THEN DO;\n   %SYSPFK = 0;\n   HELP1;\n  END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JOBCARD": {"ttr": 12045, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\r\\x00\\x00\\x00\\x81\\x17_\\x00\\x82\\x12_\\x14B\\x00'\\x00!\\x00'\\xd1\\xd6\\xd3@@@@@@@\"", "ispf": {"version": "01.13", "flags": 0, "createdate": "1981-06-24T00:00:00", "modifydate": "1982-05-05T14:42:00", "lines": 39, "newlines": 33, "modlines": 39, "user": "JOL"}, "text": " HELPLANG : MACRO;\n %SYSPFK = 0;\n END;\n\n LABEL LNGSC01;\n PANEL box / (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Language Instruction Panel Number 1')\n/ lm 6\n/   ('Jol is a Universal Command Language.')\n    ('Command Languages tell the computer what to do - Programming')\n    ('Languages give detailed instruction on how to do it.')\n/   ('The Jol system allows you to give the computer in English like')\n    ('language instructions on what you want it to do.')\n/   ('You can - Print data sets')\n    ('        - Copy data sets')\n    ('        - Run programs')\n    ('        - Test return codes')\n    ('        - Submit other jobs')\n    ('        - Create full screen panels')\n    ('        - and much much more.')\n helpline ('Press PF3 to Exit from Help or Enter to display');\n IF %SYSPFK \u00ac= 3 THEN DO;\n LABEL LNGSC02;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Language Instruction Panel Number 2')\nlm 6\n    ('For example a job to print a payroll file would look like -')\n /(hi'        $JOB;    /* TO CREATE A JOB NAME ETC FOR YOU */')\n  (hi'        PRINT PAYROLL.FILE;')\n  /('This job would create the necessary job card for you')\n   ('and then create the statements to print the data set.')\n  /('The Operating System of your computer consists of a')\n   ('supervisor program and several other optional pragrams')\n   ('- language compilers, sort/merge programs and so on.')\n  /('Most of the optional programs are executed with Jol')\n   ('commands like Print, Sort etc. Similarly, before programs')\n   ('written in high level languages like Cobol can be executed,')\n   ('they must be converted to machine instructions; this is done')\n   ('with compilers and linkage editors; the Jol RUN instruction')\n   ('then executes them.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n       IF %SYSPFK = 7 THEN DO;\n       %SYSPFK = 0;\n REDO LNGSC01;\n       END;\n LABEL LNGSC03;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Language Instruction Panel Number 3')\nlm 4\n  /('USING JOL.')\nlm 8\n  /('You tell Jol which data sets you require and describe the')\n   ('programs you wish to execute specifying whether they are')\n   ('to read, write, update or extend the data sets you have')\n   ('described. later, you use simple instructions to run your')\n   ('programs, sort data sets, test conditions and so on.')\n  /('Jol examines in detail the instructions and declarations you')\n   ('have given, and automatically -')\n   ('   -passes newly created or old data sets to following')\n   ('    programs requiring them.')\n   ('   -finds input data sets that are not created in your job,')\n   ('    that is, data sets which are external to your job.')\n   ('   -determines which data sets are used only to pass')\n   ('    information from one program to another (temporary).')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n       IF %SYSPFK = 7 THEN DO;\n       %SYSPFK = 0;\n REDO LNGSC02;\n       END;\n LABEL LNGSC04;\n PANEL box/ (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Language Instruction Panel Number 4')\n  /(ctr 'Continued from previous screen')\nlm 6\n  /('Data sets that are not kept or cataloged are automatically')\n   ('deleted at the end of the job' hi 'unless you tell Jol not to.')\n  /('Jol determines which data sets are used as work files,')\n   ('and organises that volumes containing or receiving these')\n   ('data sets will be mounted when your job executes.')\n  /('Jol also checks that you are not executing an instruction')\n   ('which will cause your job to fail. for instance, if one')\n   ('of your programs creates a data set that is required by a')\n   ('later program as input, a check is made to ensure that you')\n   ('have not deleted it accidently before it is required.')\n  /('If you have Jol will ignore the deletion.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n       IF %SYSPFK = 7 THEN DO;\n       %SYSPFK = 0;\n REDO LNGSC03;\n       END;\n LABEL LNGSC05;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Language Instruction Panel Number 5')\nlm 6\n  /('Another type of error that Jol detects before allowing your')\n   ('job to begin executing is when you attemt to read a data set')\n   ('that you have not written and it cannot be found in the system')\n   ('catalog. If the job were allowed to run, at that point having')\n   ('wasted whatever computer time was necessary to reach that stage.')\n   ('this type of error detection often saves hours of valuable')\n   ('computer time.')\n  /('If no errors have been found, JCL or JES instructions')\n   ('appropriate to the job you wish to do will be passed to the')\n   ('operating system.')\n  /('We will now look at Declarations')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n       IF %SYSPFK = 7 THEN DO;\n       %SYSPFK = 0;\n REDO LNGSC04;\n       END;\n  IF %SYSPFK \u00ac= 3 THEN HELPDCL1;\n  IF %SYSPFK \u00ac= 3 THEN HELPDCL2;\n  IF %SYSPFK \u00ac= 3 THEN HELPDCL3;\n  IF %SYSPFK \u00ac= 3 THEN HELPDCL4;\n  IF %SYSPFK \u00ac= 3 THEN HELPSYMB;\n  IF %SYSPFK \u00ac= 3 THEN HELPIF;\n  IF %SYSPFK \u00ac= 3 THEN HELPMACR;\n  IF %SYSPFK \u00ac= 3 THEN HELPPANL;\n  %SYSPFK = 3;\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JOBCAT": {"ttr": 12047, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " HELPMACR : MACRO;\n END;\n %MACR = 9;\n LABEL MACSC01;\n IF %SYSPFK = 9 THEN %MACR = 9;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Writing Jol Macros - Screen Number 1')\n /  ('  The macro language provides a means of adding new instructions')\n    ('  to the language quickly and easily.')\n /  ('  A macro is a set of instructions that creates jol instructions')\n    ('  tailored to the users specifications, and once coded it is')\n    ('  stored in a macro library. Whenever a non-standard instruction')\n    ('  is found, the macro library is searched and if the macro is')\n    ('  located, it is interpreted and the tailored jol instructions')\n    ('  are created. The compilation then continues recommencing at the'\n    ('  first of the created instructions. facilities are provided to :-\n /\n /(hi'         Execute a command with different parameters')\n  (hi'         Examine, verify and change the parameters')\n  (hi'         Set up default parameters')\n  (hi'         Generate any jol (or other Language) instruction')\n helpline ('Press PF3 to Exit from Help or Enter to display');\n IF %SYSPFK \u00ac= 3 THEN DO;\n LABEL MACSC02;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n /('  Macros are easily written by coding a macro prototype statement')\n  ('  followedby a series of jol statements and terminating with an END'\n /('  THE MACRO PROTOTYPE STATEMENT.')\n /('  The simplest form of the macro prototype statement is :-')\n /(hi'       macro-name : macro;')\n /('  The macro-name is the name by which we call the macro, and it')\n  ('  must be the same as the member name under which it is stored')\n  ('  on a macro library (up to 8 characters). You can store macros in')\n  ('  JOL50.CMDLIB, on your own jol data set (SYSUID.JOL) or on any jol'\n  ('  library which is concatenated to JOL50.CMDLIB.')\n /('  Let us say we want a macro to compress two data sets :-')\n /(hi'       packup : macro;')\n  (hi'           compress %sysuid.cobol,%sysuid.pli;')\n  (hi'       end;')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n     %SYSPFK = 0;\n REDO MACSC01;\n     END;\n LABEL MACSC03;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Writing Jol Macros - Screen Number 3')\n /(hi'       packup : macro;')\n  (hi'           compress %sysuid.cobol,%sysuid.pli;')\n  (hi'       end;')\n ('  PACKUP is the name we have assigned to this macro, and in the body'\n ('  of the macro we are calling another macro (COMPRESS).')\n/('  In order to get more benefit out of a macro, we need to be able to'\n ('  pass parameters to the macro and set up defaults to be used.')\n/('  There are 4 types of parameters that may be used in a macro :-')\n (hi'       ASSIGNMENT KEYWORDS')\n (hi'       SUBSTITUTION KEYWORDS')\n (hi'       POSITIONAL PARAMETERS')\n (hi'       POSITIONAL KEYWORDS')\n/('  These are coded as part of the macro prototype statement')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n     %SYSPFK = 0;\n REDO MACSC02;\n     END;\n LABEL MACSC04;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Writing Jol Macros - Screen Number 4')\n /('  And up to 100 may be coded in any order.  For Example:-')\n/(hi'       MACRO-NAME : MACRO (%%ASSIGNMENT-KEYWORD = DEFAULT,')\n (hi'                           %%SUBSTITUTION-KEYWORD,')\n (hi'                            POSITIONAL-KEYWORD;')\n/('  Positional parameters are those parameters left in the calling')\n ('  statement after all other parameters have been resolved.')\n/('  ASSIGNMENT KEYWORDS. ')\n/('  Assignment keywords values are changed from the default whenever')\n ('  the calling statement contains the keyword followed by a value.')\n ('  if the keyword is not coded the default value is taken eg -')\n (hi'       $JOB : MACRO (%%MSGCLASS = X);')\n (hi'             JOLJOB : JOB CLASS = A MSGCLASS = %%MSGCLASS;')\n (hi'       END;')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n     %SYSPFK = 0;\n REDO MACSC03;\n     END;\n LABEL MACSC05;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Writing Jol Macros - Screen Number 5')\n /(  '  The calling statement changing MSGCLASS would be :-')\n/(hi '       $JOB MSGCLASS = A;')\n /(  '  Using the default value :-')\n/(hi '      $JOB;')\n/('  Once an assignment keyword appears in a macro prototype statement')\n ('  it is considered to be a symbolic parameter within the macro.')\n/('  If you wish to pass it back to the main program, you must declare')\n ('  a symbolic variable as external, then set it to the value of the ')\n ('  keyword.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n     %SYSPFK = 0;\n REDO MACSC04;\n     END;\n LABEL MACSC06;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n/('  SUBSTITUTION KEYWORDS')\n/('  A substitution keyword is used whenever it is necessary to ')\n ('  determine if a particular value was coded on the calling')\n ('  statement the value of a substitution keyword can only be the name'\n ('  of the keyword or null. Substitution keywords are coded in the ')\n ('  macro prototype statement whenever we wish to use particular ')\n ('  parameters on the calling statement. For example:-')\n/(hi'       $JOB : MACRO (%%MSGCLASS = X, %%NPJCL);')\n (hi'           JOLJOB : JOB CLASS = A MSGCLASS = %%MSGCLASS %%NPJCL;')\n (hi'       END;')\n/('  If we wish to have no JCL printed on our output we could now code')\n/(hi'       $JOB NPJCL; ')\n/('  The keyword %%NPJCL would now contain NPJCL and this would be ')\n ('  substituted in the statement.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n     %SYSPFK = 0;\n REDO MACSC05;\n     END;\n LABEL MACSC07;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Writing Jol Macros - Screen Number 2')\n/('  POSITIONAL PARAMETERS')\n/('  Although Keyword parameters may be written by the user in any ')\n ('  desired sequence, macros written to use positional parameters are')\n ('  often easier to remember and use than macros using keyword ')\n ('  parameters exclusively. For example it is easier to remember and')\n ('  write :-' hi 'List %sysuid.data;')\n ('  than  :-' hi 'List DATASET=freds.data;')\n/('  Parameters not coded on the macro prototype statement, but on')\n ('  the call to the macro are said to be positional parameters and are'\n ('  placed in symbolic variables according to their position in the ')\n ('  call after all keyword parameters have been removed. The symbolic')\n ('  parameters are called %%LIST(1) thru %%LIST(n) or %%LIST0001 thru')\n ('  %%LISTnnnn depending on your preference.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n     %SYSPFK = 0;\n REDO MACSC06;\n     END;\n LABEL MACSC08;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Writing Jol Macros - Screen Number 2')\n/('  In the first example %%LIST(1) would contain %SYSUID.DATA.')\n/('  POSITIONAL KEYWORDS OR POINTER KEYWORDS')\n ('  A pointer keyword allows us to determine where it was coded in a')\n ('  calling statement. This is coded in the macro prototype statement')\n ('  as KEYWORD. Note no %% signs or = are used. When a pointer keyword'\n ('  is used in the calling statement the keyword is inserted into a ')\n ('  %%LIST symbolic and the number of %%LIST statement is inserted in')\n ('  a symbolic with the same name as the pointer keyword. eg:-')\n/(hi'       COPY JOL.DATA TO %SYSUID.DATA; ')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n     %SYSPFK = 0;\n REDO MACSC07;\n     END;\n LABEL MACSC09;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Writing Jol Macros - Screen Number 2')\n /('  If our macro prototype statement is coded as follows %%LIST(1) ')\n  ('  would contain JOL.DATA. %%LIST(2) would contain the word (TO) and'\n  ('  %%LIST(3) would contain %SYSUID.DATA.')\n /(hi'       COPY : MACRO (TO); ')\n /('  %%TO would contain the number 2')\n /('  A macro may be considered to be part of the original jol program,'\n  ('  and as such may refer to or alter any variable that has been ')\n  ('  previously used, either in the main jol program, or, if this macro\n  ('  is called from a previous macro, in the outer macro. ')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n     %SYSPFK = 0;\n REDO MACSC08;\n     END;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Writing Jol Macros - Screen Number 2')\n/('  However any variable defined in an inner macro cannot be used in')\n ('  an outer macro or the main jol program unless it has been declared'\n ('  with an ext parameter. eg:-')\n/(hi'       DCL %%X INIT 0 EXT;  ')\n/('  A macro can use any jol code this means that the macro can call any\n ('  other macro. however if you are nesting macros, you can only'\n ('  nest to a level of 12. ')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n     IF %SYSPFK = 7 THEN DO;\n     %SYSPFK = 0;\n REDO MACSC09;\n     END;\n IF %MACR = 9 THEN DO;\n %SYSPFK = 0;\n HELP1;\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JOBLIB": {"ttr": 12049, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " HELPOERR : MACRO;\n END;\n IF %SYSPFK = 6 THEN %OERR = 1;\n LABEL OERSC01;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'The ON ERROR - Screen Number 1')\n /  ('The ON ERROR command will cause a copy of the processing')\n    ('programs storage to be taken if an abend occurs.')\n /  ('The format of the ON ERROR command is:-')\n  (hi '         ON ERROR (SNAP)  (SYSTEM);  ')\n  (hi '                  (DUMP)           ')\n  (hi '         (TO PRINTER CLASSNAME) ')\n /('  Where SNAP, DUMP, SYSTEM, TO PRINTER CLASSNAME are optional.')\n /('  Whenever your program(s) Abend due to a system or program error')\n  ('  an Abend code is returned and a return code (usually 2000) is set'\n /('  If you have coded ON ERROR, the system looks at the command to')\n  ('  find out if you require a dump and what type of dump. The dump if'\n  ('  required is sent to the printer class specified.');\n helpline ('Press PF3 to Exit from Help or Enter to display');\n  IF %SYSPFK \u00ac= 3 THEN\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'The ON ERROR - Screen Number 2')\n   /(hi '  NOTE.')\n   /(   '        You should only issue one on error command.')\n    ('  If you code more than one the details from the last are used.')\n /  ('  The on error command should be coded before any Runs or ')\n    ('  commands.');\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n     IF %SYSPFK = 7 THEN DO;\n     %SYSPFK = 0\n REDO OERSC01;\n     END;\n IF %OERR = 1 THEN DO;\n %SYSPFK = 0;\n HELP2;\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JOBPARM": {"ttr": 12289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x133\\x00:\\x00:\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:33:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "JOL"}, "text": " HELP : MACRO;\n END;\n IF %SYSPFK = 2 THEN %PAN = 2;\n %SYSPFK = 0;\n LABEL PANSC01;\n PANEL box (ctr 'J O L    H E L P   F A C I L I T Y')\n          /(ctr 'The PANEL Instruction - Screen Number 1')\n / ('  The panel instruction allows you to define full screen panels in'\n   ('  Jol. When the panel instruction is executed, the screen')\n   ('  is cleared and the information specified is displayed on the ')\n   ('  screen. The panel instruction provides an extremely powerful and'\n   ('  simple method to input data to Jol. Effective use of the panel ')\n   ('  instruction can effectively insulate you from many of the ')\n   ('  tiresome details of entering information to Jol.')\n / ('  Up to 22 lines of text and replies may be displayed with the one\n   ('  panel instruction. the format of the panel instruction is :-')\n   ('',#1,70,' PANEL (LIST OF SUB-PARAMETERS)...;')\n   ('  THE SUB-PARAMETERS MAY BE OF THE FOLLOWING FORMAT:-')\n   ('',#2,70,' (''TEXT'')')\n   ('  the text is displayed on the screen, no replies can be entered.')\n helpline ('Press PF3 to Exit from Help or Enter to display');\n  IF %SYSPFK \u00ac= 3 THEN DO;\n LABEL PANSC02;\n PANEL box (ctr 'J O L    H E L P   F A C I L I T Y')\n          /(ctr 'The PANEL Instruction - Screen Number 2')\n /(hi'        (''text'',symbolic-name,maximum-length ) ')\n / ('  The text is displayed and replies may be entered. The maximum')\n   ('  length of the reply allowed is indicated by the maximum-length')\n   ('  field eg:-')\n   ('        Maximum Length Here is Three',#2,3,'')\n / ('  where you can only enter three characters as a reply. ')\n   ('  The cursor will then skip down to the next line of the panel')\n   ('  after the three characters have been inserted.')\n / (hi'       (''text'',symbolic-name,maximum-length,''default reply'')'\n / ('  This is the same except that you can specify a default')\n   ('  reply, eg:-')\n   ('        Maximum Length Here is Five',#4,5,'reply')\n / ('  where reply here is the default reply and if you press')\n   ('  the tab key this default will remain as if the you had entered')\n   ('  it yourself.');\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n  IF %SYSPFK \u00ac= 3 THEN DO;\n      IF %SYSPFK = 7 THEN DO;\n      %SYSPFK = 0;\n REDO PANSC01;\n      END;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'The PANEL Instruction - Screen Number 3')\n / ('  The last way of specifing the panel command is :-')\n   ('',#1,70,' (''text'',symbolic-name,maximum-length,''default reply'''\n   ('',#2,70,'message row, message-column, reply-row, reply-column.'') '\n / ('  This allows you to put the default reply and reply row anywhere')\n   ('  on the screen. This method is not recommended as it becomes hard'\n   ('  to insert new lines or alter the display.')\n / ('  If the panel is executed by a background job, the defaults are ')\n   ('  used. No attempt is made to display the data on a screen.')\n  /('  to force the display to skip a line code a slash (/) between')\n   ('  the parameters.')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n  IF %SYSPFK \u00ac= 3 THEN DO;\n      IF %SYSPFK = 7 THEN DO;\n      %SYSPFK = 0;\n REDO PANSC02;\n      END;\n    IF %PAN = 2 THEN DO;\n      %SYSPFK = 0\n      HELP2;\n    END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JOLUPD": {"ttr": 12295, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x00\\x00\\x00\\x83\\x06\\x8f\\x00\\x88\"?\\x15W\\x00g\\x00\\x8a\\x00\\x07\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "1983-03-09T00:00:00", "modifydate": "1988-08-10T15:57:00", "lines": 103, "newlines": 138, "modlines": 7, "user": "JOL"}, "text": "HELP : MACRO;\nEND;\nIF %SYSPFK = 2 THEN %PAN = 2;\n%SYSPFK = 0;\nLABEL PANSC01;\nPANEL ('              J O L  H E L P  F A C I L I T Y')\n('             PRESS ENTER TO DISPLAY OR PF3 TO EXIT ')\n('                THE PANEL INSTRUCTION  SCREEN 1')\n/('THE PANEL INSTRUCTION ALLOWS YOU TO DEFINE FULL SCREEN PANELS IN ')\n   ('JOL. WHEN THE PANEL INSTRUCTION IS EXECUTED, THE SCREEN')\n   ('IS CLEARED AND THE INFORMATION SPECIFIED IS DISPLAYED ON THE ')\n   ('SCREEN. THE PANEL INSTRUCTION PROVIDES AN EXTREMELY POWERFUL AND')\n   ('SIMPLE METHOD TO INPUT DATA TO JOL. EFFECTIVE USE OF THE PANEL ')\n   ('INSTRUCTION CAN EFFECTIVELY INSULATE YOU FROM MANY OF THE ')\n   ('TIRESOME DETAILS OF ENTERING INFORMATION TO JOL.')\n   ('UP TO 22 LINES OF TEXT AND REPLIES MAY BE DISPLAYED WITH THE ONE ')\n   ('PANEL INSTRUCTION. THE FORMAT OF THE PANEL INSTRUCTION IS :-')\n   ('',#1,70,' PANEL (LIST OF SUB-PARAMETERS)...;')\n   ('THE SUB-PARAMETERS MAY BE OF THE FOLLOWING FORMAT:-')\n   ('',#2,70,' (''TEXT'')')\n   ('THE TEXT IS DISPLAYED ON THE SCREEN, NO REPLIES CAN BE ENTERED.');\n IF %SYSPFK \u00ac= 3 THEN DO;\nLABEL PANSC02;\nPANEL ('              J O L  H E L P  F A C I L I T Y')\n('                THE PANEL INSTRUCTION  SCREEN 2')\n('             PRESS PF7 TO REPEAT THE PREVIOUS SCREEN')\n('             OR    PF3 TO EXIT THE HELP PANEL')\n('             OR    HIT ENTER TO DISPLAY THE NEXT HELP PANEL')\n/('',#1,70,' (''TEXT'',SYMBOLIC-NAME,MAXIMUM-LENGTH ) ')\n   ('THE TEXT IS DISPLAYED AND REPLIES MAY BE ENTERED. THE MAXIMUM')\n   ('LENGTH OF THE REPLY ALLOWED IS INDICATED BY THE MAXIMUM-LENGTH')\n   ('FIELD EG:-')\n   ('MAXIMUM LENGTH HERE IS THREE',#2,3,'')\n   ('WHERE YOU CAN ONLY ENTER THREE CHARACTERS AS A REPLY. THE')\n   ('CURSOR WILL THEN SKIP DOWN TO THE NEXT LINE OF THE PANEL')\n   ('AFTER THE THREE CHARACETERS HAVE BEEN INSERTED.')\n ('',#3,70,' (''TEXT'',SYMBOLIC-NAME,MAXIMUM-LENGTH,''DEFAULT REPLY'')')\n   ('THIS IS THE SAME EXECPT THAT YOU CAN SPECIFY A DEFAULT')\n   ('REPLY, EG:-')\n   ('MAXIMUM LENGTH HERE IS FIVE',#4,5,'REPLY')\n   ('WHERE REPLY HERE IS THE DEFALUT REPLY AND IF YOU PRESS')\n   ('THE TAB KEY THIS DEFAULT WILL REMAIN AS IF THE YOU HAD ENTERED')\n   ('IT YOURSELF.');\nEND;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n     %SYSPFK = 0;\nREDO PANSC01;\n     END;\nPANEL ('              J O L  H E L P  F A C I L I T Y')\n('                THE PANEL INSTRUCTION  SCREEN 3')\n('             PRESS PF7 TO REPEAT THE PREVIOUS SCREEN')\n('             OR    PF3 TO EXIT THE HELP PANEL')\n('             OR    HIT ENTER TO DISPLAY THE NEXT HELP PANEL')\n/('THE LAST WAY OF SPECIFING THE PANEL COMMAND IS :-')\n ('',#1,70,' (''TEXT'',SYMBOLIC-NAME,MAXIMUM-LENGTH,''DEFAULT REPLY''')\n ('',#2,70,'MESSAGE ROW, MESSAGE-COLUMN, REPLY-ROW, REPLY-COLUMN.'') ')\n   ('THIS ALLOWS YOU TO PUT THE DEFAULT REPLY AND REPLY ROW ANYWHERE')\n   ('ON THE SCREEN. THIS METHOD IS NOT RECOMMENDED AS IT BECOMES HARD')\n   ('TO INSERT NEW LINES OR ALTER THE DISPLAY.')\n  ('IF THE PANEL IS EXECUTED BY A BACKGROUND JOB, THE DEFAULTS ARE ')\n   ('USED. NO ATTEMPT IS MADE TO DISPLAY THE DATA ON A SCREEN.')\n  /('TO FORCE THE DISPLAY TO SKIP A LINE CODE A SLASH (/) BETWEEN')\n   ('THE PARAMETERS.');\nEND;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n     %SYSPFK = 0;\nREDO PANSC02;\n     END;\n   IF %PAN = 2 THEN DO;\n     %SYSPFK = 0\n     HELP2;\n   END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LINK": {"ttr": 12298, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x83\\x06\\x8f\\x00\\x86\\x04\\x9f\\x10Y\\x00\\xf9\\x00\\xf4\\x00\\x01\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1983-03-09T00:00:00", "modifydate": "1986-02-18T10:59:00", "lines": 249, "newlines": 244, "modlines": 1, "user": "JOL"}, "text": "helppop:macro;\n/* Main help popup */\n\n      popup  at 40\n         ('Learn - Tutorial')\n         ('Topics')\n   /*    ('Quick - Show Instructions/Functions') */\n         ;\n\n         If substr(syspop,1,5)='LEARN'\n         then do;\n             if system\u00ac='SHELL'\n             then do;\n                caijol;\n                exit;\n             end;\n             if exist('\\jol\\learn\\caijol.jol')\n             then do;\n                 jolopt cmdpath('\\jol\\learn;\\jol\\%system');\n                 caijol;\n                 exit;\n             end;\n             panel ////////\n             (ctr 'Cannot Find the Jol Learn Directory.')\n             /// (ctr 'Please Install the Jol LEARN Diskette');\n             exit;\n         end;\n         If substr(syspop,1,6)='TOPICS'   then help;\n         If substr(syspop,1,5)='QUICK'\n         then do;\n     /*     ?; */\n         end;\n    end;\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LIST": {"ttr": 12548, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " HELPRETN : MACRO;\n END;\n IF %SYSPFK = 8 THEN %RETN = 8 ;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'The RETRUN Instruction')\n /('  The RETURN instruction writes a message to the job log and ')\n  ('  terminates the job immediately.')\n /('  The format of the return instruction is :-')\n  (hi '         RETURN message up to 100 characters (in  quotes)')\n  ('  NOTE : The RETURN instruction does not notify the operator that')\n  ('         the job is terminating.')\n /('  To do this use the STOP instruction, the format of which is the')\n  ('  same except that the operator is notified.')\n helpline ('Press PF3 to Exit from Help or Enter to display');\n\n IF %RETN = 8 THEN DO;\n %SYSPFK = 0;\n HELP2;\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LISTC": {"ttr": 17422, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00B\\x01\\x101O\\x01\\x101O\\x02#\\x00\\xce\\x00\\xce\\x00\\x00\\xd1\\xd6\\xd3\\xf6\\xf0\\xc1@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-11-10T00:00:00", "modifydate": "2010-11-10T02:23:42", "lines": 206, "newlines": 206, "modlines": 0, "user": "JOL60A"}, "text": " /*****************************************************************/\n /**               SUBMIT MACRO            LAST MODIFIED MAY 1987**/\n /**               ------------            BY C. CLARKE          **/\n /**                                                             **/\n /** MODIFIED D. DOUBTFIRE 18.01.83 FOR JCL SUBMITS              **/\n /** MODIFIED C. CLARKE    26.03.87 FOR NETWORKING               **/\n /**                                                             **/\n /** THIS MACRO WILL SUBMIT BOTH JOL JOBS AND JCL JOBS           **/\n /**                                                             **/\n /** TO SUBMIT A JOL JOB SIMPLY PUT -SUBMIT JB1;                 **/\n /** WHERE JB1 IS A MEMBER OF YOUR INCLUDE LIBRARY CONTAINING    **/\n /** JOL CODE.                                                   **/\n /**                                                             **/\n /** TO SUBMIT JCL SIMPLY PUT -SUBMIT '//JOBNAME JOB MSBCLASS=A' **/\n /**                                  '//     EXEC PGM=MYPROG  ' **/\n /** ANY VALID JCL STATEMENTS MAY BE ENCLOSED ON QUOTES .        **/\n /** JOL AND JCL JOBS MAY BE SUBMITTED TOGETHER                  **/\n /**       EG.  -SUBMIT JB1 '//MYJOB1 JOB MSGCLASS=A ETC'        **/\n /**            WILL SUBMIT A JOL MEMBER CALLED JB1 AND A JCL    **/\n /**            JOB CALLED MYJOB1.                               **/\n /*****************************************************************/\nSUBMIT:MACRO (%PI,%PE,%PM,%PJ,%SYMS=,%PROG=,%USING=XX,\n  %NOCAT,%NOCATGDG,%ULIB=,%UMAC=,\n  AFTER,%LET,%PO,\n  %NPI=NPI,%NP=,\n  %PROCLIB='%$JOLINCL',\n  %MACROLIB='%$JOLPREF.JOL%$JOLVERS.CMDLIB');\n /*****************************************************************/\n /******************SYMBOLIC DECLARES *****************************/\n /*****************************************************************/\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n    if %list(1) = ''   & %panels \u00ac= 'OFF'\n    then do;\n        submmenu;             /* NOTE: SUBMMENU calls submit to\n                                 actually do the SUBMIT */\n/*\n        ? '%work';\n        if %BUILDJOB \u00ac= 'YES'\n           then submit %work;  */\n        exit;                      /* Better exit now */\n    end;\n\n DCL DUMMY DS DUMMY NODCB;\n DCL %TYPE INIT '';\n DCL %JCL1,%JCL2,%JCL3,%JCL4,%JCL5,%JCL6,%JCL7,%JCL8,%JCL9,%JCL10,\n     %JCL11,%JCL12,%JCL13,%JCL14,%JCL15,%JCL16,%JCL17,%JCL18,\n     %JCL19,%JCL20,%JCL21,%JCL22,%JCL23,%JCL24,%JCL25,%JCL26,\n     %JCL27,%JCL28,%JCL29,%JCL30    INIT  '';\n DCL %JOL1,%JOL2,%JOL3,%JOL4,%JOL5,%JOL6,\n     %JOL7,%JOL8,%JOL9,%JOL10 INIT '' ;\n DCL %SYM1,%SYM2,%SYM3,%SYM4,%SYM5,%SYM6,\n     %SYM7,%SYM8,%SYM9,%SYM10 INIT '' ;\n\n /* ADDED FOR NETWORKING AND SCHEDULING C.CLARKE MARCH, 1987 */\n DCL %SYSNETID INIT('') EXT;  /* SET IF NETWORK EXECUTING */\n DCL %SYSJOBS1 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSJOBS2 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSNTINC INIT('') EXT;  /* KEEPS INCLUDE DATA SET FOR JOBS      */\n DCL %SYSNTMAC INIT('') EXT;  /* KEEPS JOL MACRO DATA SETS FOR JOBS   */\n DCL %CHK1,%CHK2,%CHK3,%CHK4,%CHK5,%CHK6,\n     %CHK7,%CHK8,%CHK9,%CHK10 INIT '' ;\n\n DCL %CHECK,%CHKLEN,%CHLES1        INIT ''      ;\n DCL %JJOB INIT 'NO';\n DCL %JCJOB INIT 'NO';\n\n   /* VARIABLES BELOW USED IN LOOPS FOR SUBSCRIPTS ETC */\n DCL %INDEX                        INIT('1');\n DCL %IND2                         INIT('1');\n DCL %WORK                         INIT('');\n DCL %L,%K                         INIT('');\n /*****************************************************************/\n /*****CHECK THAT THERE IS VALID INPUT TO THIS MACRO***************/\n /*****************************************************************/\n    IF %LIST(1) = '' & %USING = 'XX' THEN STOP 'NO COMPILE INPUT' ;\n\n    IF %PROG='' THEN %PROG='$JOLCP%$JOLVERS';\n\n /*****************************************************************/\n /*****CHECK IF WE ARE NETWORKING, AND AFTER SPECIFIED ************/\n /*****************************************************************/\n    IF %AFTER\u00ac=0 & %SYSNETID=''\n    THEN DO;\n         STOP '''AFTER'' CANCELLED: USE THE NETWORK COMMAND FIRST';\n         EXIT 'SUBMIT ABANDONED';\n    END;\n\n /*****************************************************************/\n /*****CHECK FOR SYMBOLICS TO BE PASSED TO JOL JOBS****************/\n /*****************************************************************/\n    IF %SYMS \u00ac= ''\n    THEN DO;\n          %CHECK = SUBSTR(SYMS,1,1)         ; /* CHECK FOR    */\n          IF %CHECK = '(' THEN                /* BRACKETS     */\n          %SYMS = SUBSTR(SYMS,2)            ; /* AND REMOVE   */\n          %CHKLEN = LENGTH (SYMS);            /* SAME         */\n          %CHECK = SUBSTR(SYMS,%CHKLEN,1)   ;\n          IF %CHECK = ')'\n          THEN  DO                          ;\n              %CHLES1 = %CHKLEN-1           ;\n              %SYMS = SUBSTR(SYMS,1,%CHLES1);\n          END;\n    END;\n /*****************************************************************/\n /*****HANDLE AFTER CLAUSE, IF ANY ********************************/\n /*****************************************************************/\n\n/* NOTE THAT JOL VERY NICELY JOINS UP ANY PARMS IN () FOR US, WHICH\n   IS EXACTLY WHAT WE DON'T WANT HERE.\n\n   ALSO, UNLESS IT DOES HAVE (), IT WON'T JOIN THEM UP.\n\n   THEREFORE , WE MUST CALL A MACRO TO ANALYES THE PARENTHESIED\n   EXPRESSION, AFTER MAYBE JOINING THEM UP.\n*/\n\n    IF %AFTER\u00ac=0\n    THEN DO;\n DCL %AFT2                     INIT 0;\n       %AFT2=%AFTER+1;\n       %WORK='';                     /* INITIALIZE THE WORK AREA */\nLABEL JOIN;\n       %WORK='%WORK %LIST(%AFT2)';  /* CONCANATE VARIABLE */\n       %AFT2=%AFT2+1;\n       IF %LIST(%AFT2)\u00ac='' THEN REDO JOIN;\n? 'WORK=%WORK';\n\n       GETNETAF AFTER %WORK; /* DOES AFTER PROCESSING */\n    END;\n\n /*****************************************************************/\n /**************TEST FOR TYPE OF SUBMISSION  JOL OR JCL ***********/\n /*****************************************************************/\n LABEL TTYPE;\n       %IND2=%INDEX;\n       %WORK=LENGTH(INDEX);\n       IF %WORK=1 THEN %INDEX='000%INDEX';\n       IF %WORK=2 THEN %INDEX='00%INDEX';\n       IF %WORK=3 THEN %INDEX='0%INDEX';\n       IF %LIST(%INDEX)\n       THEN DO;\n            %TYPE=TYPE(LIST%INDEX);\n            %JCL$='JCL%IND2';\n            %JOL$='JOL%IND2';\n            %SYM$='SYM%IND2';\n            %CHK$='CHK%IND2';\n /*****************************************************************/\n /*****IF JCL IS REQUIRED SET JCL SYMBOLICS AND JOB TEST **********/\n /*****************************************************************/\n           IF %TYPE='LIT'\n           THEN DO;\n                IF %SYSNETID\u00ac=''       /* ARE WE NETWORKING ? */\n                THEN DO;\n                     IF %JCJOB='NO'    /* ANY JCL SUBMITTED YET ? */\n                     THEN DO;\n                          IF %SYSLABEL='' THEN\n                          DO;\n                              STOP 'FOR JCL NETWORKING, YOU MUST CODE A\n LABEL ON THE SUBMIT STATEMENT';\n                              STOP 'SUBMIT FAILED';\n                              EXIT;\n                          END;\n                         %WORK='%SYSLABEL:         ';\n                         %WORK=SUBSTR(WORK,1,9); /* MAKE 9 CHARS LONG */\n                         WRITE FILE($$JCODE) FROM('%WORK NETSUB');\n                         %WORK='%SYSLABEL        ';\n                         %WORK=SUBSTR(WORK,1,8); /* MAKE 8 CHARS LONG */\n                         WRITE FILE($$JSTAT) FROM('%%%WORK='''';');\n                         %WORK='%SYSLABEL';\n                     END;\n                     ELSE %WORK='';\n                     WRITE FILE($$JCODE) FROM('''%LIST(%IND2)''');\n                END;\n                %JCJOB='YES';\n                SET %JCL$='%LIST(%IND2)';\n           END;\n /*****************************************************************/\n /*****IF JOL SUBMISSION SUBSTITUTE SYMBOLICS FOR CARD FILE********/\n /*****************************************************************/\n           IF %TYPE='CHAR'         /* JOL JOB HERE */\n           THEN DO;\n                %USING=' JOLIN ';\n                %JJOB='YES';\n                IF %SYSNETID=''    /* ORDINARY SUBMIT HERE */\n                THEN DO;\n                     SET %SYM$='*  JOL/%SYMS;';\n                     SET %JOL$='   INCLUDE %LIST(%IND2);';\n                END;\n                IF %SYSNETID\u00ac=''   /* WE ARE IN A NETWORK HERE */\n                THEN DO;\n                     IF %JCJOB='YES'\n                     THEN DO;\n                         STOP 'WHEN NETWORKING, YOU CANNOT SUBMIT A JCL\nJOB AND A JOL JOB IN THE SAME SUBMIT COMMAND';\n                         STOP 'USE SEPERATE SUBMIT.  SUBMIT ENDED';\n                         EXIT;\n                     END;\n                     %WORK='         NETSUB %LIST(%IND2)';\n                     WRITE FILE($$JCODE) FROM(WORK);\n                     IF %SYMS\u00ac='' THEN\n                     WRITE FILE($$JCODE) FROM(\n          '           SYMS(''%SYMS'')');\n                     WRITE FILE($$JCODE) FROM(\n          '           %NPI %PO %LET %PE %PM %PJ %NP %NOCAT %NOCATGDG;');\n                     %WORK='%LIST(%IND2)        ';\n                     %WORK=SUBSTR(WORK,1,8);   /* MAKE 8 CHARS LONG */\n                     WRITE FILE($$JSTAT) FROM('%%%WORK='''';');\n                     %WORK='%LIST(%IND2)';\n                END;\n           END;\n       END;\n       %L=LENGTH(SYSJOBS1);  /* SAVE SUBMITTED JOBS */\n       IF %WORK\u00ac=''          /* 2ND LINE OF JCL JOB ? */\n       THEN DO;              /* NO */\n           IF %L<240 THEN %SYSJOBS1='%SYSJOBS1,%WORK';\n           ELSE %SYSJOBS2='%SYSJOBS2,%WORK';\n       END;\n       %INDEX=%INDEX+1;\n       IF %AFTER=0 THEN IF %LIST(%INDEX) THEN REDO TTYPE;\n       IF %AFTER\u00ac=0 THEN IF %INDEX<%AFTER THEN REDO TTYPE;\n       IF %AFTER\u00ac=0\n       THEN DO;\n           IF %JCJOB='YES'\n           THEN WRITE FILE($$JCODE) FROM('    ;');\n           WRITE FILE($$JCODE) FROM('    END;');\n       END;\n /*****************************************************************/\n /*****IF NETWORKING, THEN WRITE OUT OPTIONS, AND END *************/\n /*****************************************************************/\n       IF %SYSNETID\u00ac=''\n       THEN DO;\n           IF %JCJOB='YES'\n           THEN WRITE FILE($$JCODE) FROM('    ;');\n           IF %UMAC\u00ac=' ' THEN %SYSNTMAC='%UMAC'; /* SAVE FOR ENDNET */ 0 2360000\n           IF %ULIB\u00ac=' ' THEN %SYSNTINC='%ULIB'; /* SAVE FOR ENDNET */ 0 2370000\n           EXIT;\n       END;\n /*****************************************************************/\n /*****SET UP CARD FILE FOR JOL BATCH PROGRAM       ***************/\n /*****************************************************************/\n    DCL JOLIN * REPLACE JOL;\n%SYM1\n%JOL1\n%CHK1\n%SYM2\n%JOL2\n%CHK2\n%SYM3\n%JOL3\n%CHK3\n%SYM4\n%JOL4\n%CHK4\n%SYM5\n%JOL5\n%CHK5\n%SYM6\n%JOL6\n%CHK6\n%SYM7\n%JOL7\n%CHK7\n%SYM8\n%JOL8\n%CHK8\n%SYM9\n%JOL9\n%CHK9\n%SYM10\n%JOL10\n%CHK10\nEOF;\n /*****************************************************************/\n /*****SET UP CARD FILE FOR JCL BATCH PROGRAM       ***************/\n /*****************************************************************/\n  DCL CARDS * REPLACE;\n%JCL1\n%JCL2\n%JCL3\n%JCL4\n%JCL5\n%JCL6\n%JCL7\n%JCL8\n%JCL9\n%JCL10\n%JCL11\n%JCL12\n%JCL13\n%JCL14\n%JCL15\n%JCL16\n%JCL17\n%JCL18\n%JCL19\n%JCL20\n%JCL21\n%JCL22\n%JCL23\n%JCL24\n%JCL25\n%JCL26\n%JCL27\n%JCL28\n%JCL29\n%JCL30\nEOF;\n /*****************************************************************/\n /*****SET UP USERS JOL LIBRARIES *********************************/\n /*****************************************************************/\n         IF %PI \u00ac= '' THEN %NPI = '' ;\n         IF %UMAC\u00ac=' ' THEN %UMAC='%UMAC||';\n         ELSE IF %SYSUID \u00ac= ' ' THEN %UMAC = '%SYSUID.JOL ||';\n         IF %ULIB\u00ac=' ' THEN %ULIB='%ULIB||';\n         ELSE IF %SYSUID \u00ac= ' ' THEN %ULIB = '%SYSUID.JOL ||';\n         IF %NP='' THEN DCL $$JPRINT PRINTER VBA 150,160;\n                   ELSE DCL $$JPRINT DS 'NULLFILE';\n\n /*****************************************************************/\n /*****SET UP JOL BATCH COMPILE DECLARATIONS AND RUN STATEMENT*****/\n /*****************************************************************/\n IF %JJOB='YES' | %USING\u00ac='XX' THEN DO;\n DCL $$JCL       SYSOUT=A PGM=INTRDR FB 80,80 BUFNO=1;\n DCL $$JLOAD     DS %$JOLPREF.JOL%$JOLVERS.LOAD ;\n DCL $$JINCL     DS %$JOLINCL;\n DCL $$JMACRO    DS %$JOLPREF.JOL%$JOLVERS.CMDLIB ;\n DCL $$JWORK1    DS SYSDA FB 80,800 600 BLKS NORLSE ;\n DCL $$JWORK2    DS SYSDA VB 200,800 600 BLKS NORLSE ;\n DCL %PROG       PROG\n      $$JPRINT   WRITES $$JPRINT\n      $$JCL      WRITES $$JCL\n      $$JLOAD    READS  $$JLOAD\n      $$JINCL    READS  %ULIB  $$JINCL\n      $$JMACRO   READS  %UMAC  $$JMACRO\n      $$JWORK1   WRITES $$JWORK1\n      $$JWORK2   WRITES $$JWORK2\n      $$JIN      READS  %USING ;\n%SYSLABEL:       RUN %PROG PARM\n      '%NPI,%PO,%LET,%PE,%PM,%PJ,%NP,%NOCAT,%NOCATGDG/ ';\n END;\n /*****************************************************************/\n /*****SET UP JCL BATCH STATEMENTS TO SUBMIT JCL JOB **************/\n /*****************************************************************/\n IF %JCJOB='YES'\n  THEN DO;\n  DCL DUMMYIN DS DUMMY;\n  DCL PRINTFIL  PRINTER NODCB;\n  DCL OUTJCL SYSOUT A PGM=INTRDR;\n   IEBGENER: DCL IEBGENER PROG\n             SYSUT1 READS CARDS\n             SYSUT2 WRITES OUTJCL\n             SYSIN  READS DUMMYIN\n             SYSPRINT WRITES PRINTFIL;\n     RUN IEBGENER ;\n END ;\n END ; /* END OF MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LISTCAT": {"ttr": 12553, "alias": false, "halfwords": 4, "notes": 0, "parms": "b' \\x01\\x05\\x15'", "ispf": false, "text": " HELPSYMB : MACRO;\n END;\n IF %SYSPFK = 7 THEN %SYMB = 7;\n LABEL SYMSC01;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Symbolic Variables - Screen Number 1')\nlm 8\n /  ('A symbolic variable is a special variable; it is recognizable')\n    ('by a %% in front of the name.')\n /  ('Whenever a symbolic variable is found in an instruction, other')\n    ('than an assignment instruction, the current contents of the')\n    ('symbolic variable replaces the symbolic name. eg:-')\n/(hi '         %%LOCATION = ''LONDON'';  /*ASSIGN THE VALUE LONDON TO ')\n (hi '                                 %%LOCATION*/ ')\n (hi '         PRINT %%LOCATION.PAY.FILE;')\n/   ('The symbolic %%LOCATION is set to LONDON and when it is found')\n    ('in the second statement it will be replaced with its contents')\n    ('thus the second statement becomes :-')\n/(hi '         PRINT LONDON.PAY.FILE; ')\n helpline ('Press PF3 to Exit from Help or Enter to display');\n\n IF %SYSPFK \u00ac= 3 THEN DO;\n LABEL SYMSC02;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Symbolic Variables - Screen Number 2')\nlm 8\n /  ('Symbolic substitution causes the symbolic variable to be')\n    ('replaced by real values (numeric or alpha).')\n /  ('Symbolic variables add flexibility to command procedures by')\n    ('symbolizing real values; these real values can change')\n    ('dynamically during the command execution. this allows command')\n    ('procedures using symbolic variables to execute multiple ')\n    ('functions, or the same function with multiple values.')\n    ('symbolic variables may be tested with the IF instruction or')\n    ('altered with an assignment instruction:-')\n /(hi'         IF %%X \u00ac= 1 THEN %%X = 1;')\n  (hi'         IF %%DAY = TUESDAY THEN SUBMIT TUESRUN;')\n  (hi'         PRINT %%DAY.PAY.FILE; ')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n        %SYSPKF = 0;\n REDO SYMSC01;\n     END;\n LABEL SYMSC03;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Symbolic Variables - Screen Number 3')\n   /('  ASSIGNING VALUES TO SYMBOLICS.')\n lm 8\n    ('There are two ways to assign values to symbolic variables.')\n    ('the symbolic declaration statement is normally only used in')\n    ('macros (see separate help function) to allow symbolics to be')\n    ('passed back to the main program, but it can be used in the main')\n    ('program to assign a default value. eg:- ')\n /(hi'         DCL %%LOCATION INIT LONDON;')\n /  ('Characters or numbers do not need to be in quotes, however')\n    ('you can assign a character string containing spaces, or special')\n    ('characters by placing the entire string in quotes.')\n /  ('Within macros if you want to return a value to the main program')\n    ('the keyword ext or external must be added.')\n /(hi'          DCL %%LOCATION INIT LONDON EXT;')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n        %SYSPKF = 0;\n REDO SYMSC02;\n     END;\n LABEL SYMSC04;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Symbolic Variables - Screen Number 4')\n /  ('  ASSIGNING VALUES TO SYMBOLICS.')\n lm 8\n /  ('The symbolic variable assignment statement allows you to')\n    ('place values (numbers, characters or strings) into a symbolic')\n    ('variable. Also arithmetic or character manipulation functions')\n    ('can be performed.')\n /  ('You may assign contents or the values of other symbolics. eg:-')\n /(hi'         %%A = 10;        /* SET A TO 10 */')\n  (hi'         %%B = ''STRING'';  /* SET B TO A STRING */')\n  (hi'         %%C = %%A;       /* SET C TO THE CONTENTS OF A */')\n  (hi'         %%D = %%C||345;  /* SET D TO 345 APPENDED TO THE  */')\n  (hi'                          /* CONTENTS OF C */')\n  (hi'         %%E = %%A + 5;   /* SET E TO THE CONTENTS OF A + 5 */')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n        %SYSPKF = 0;\n REDO SYMSC03;\n     END;\n LABEL SYMSC05;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Symbolic Variables - Screen Number 5')\n /  ('  ASSIGNING VALUES TO SYMBOLICS.')\n lm 8\n /  ('ARITHMETIC FUNCTIONS.')\n /  ('You may add, subract, multiply or divide symbolic variables')\n    ('or constants with another symbolic variable or constant.')\n    ('the result if not a whole number will be rounded down.')\n (hi '         + means add the two quantities together')\n (hi '         - means subtract the second quantity from the first')\n (hi '         / means divide the first quantity by the second')\n (hi('         * means multiply the first quantity by the second')\n    ('           concatenation.')\n /  ('The concatenate function allows you to append a constant to a')\n    ('symbolic. eg:- ')\n (hi '         %%A = %%C||ABC; ')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n        %SYSPKF = 0;\n REDO SYMSC04;\n     END;\n LABEL SYMSC06;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Symbolic Variables - Screen Number 6')\n / ('  ASSIGNING VALUES TO SYMBOLICS.')\n / ('  Functions.')\n /(hi'  SUBSTR.')\n lm 8\n   ('Substr may be used to extract sub-strings from strings of data.')\n / ('The name of the symbolic containing the data must be specified,')\n   ('as well as the start position from which the sub-string is to be')\n   ('extracted. If the length is not specified, the remaining data is')\n   ('transferred. If length is specified, only the amount specified')\n   ('will be transferred. If the input string is greater than the ')\n   ('specified, no blanks will be added. For example:-')\n /(hi'        %%A = ABCDEF;        /* SET A TO ABCDEF */')\n  (hi'        %%B = SUBSTR(A,1,3); /* SET B TO ABC */')\n  (hi'        %%C = SUBSTR(A,4);   /* SET C TO DEF */')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n        %SYSPKF = 0;\n REDO SYMSC05;\n     END;\n LABEL SYMSC07;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n          /(ctr 'Symbolic Variables - Screen Number 7')\n /  ('  ASSIGNING VALUES TO SYMBOLICS.')\n /  ('  Functions.')\n /(hi'  INDEX.')\n lm 8\n    ('Index may be used to search a string contained in a symbolic ')\n    ('for the occurrence of a character or string. The result is 0')\n    ('if the character(s) are not found or the start position of the')\n    ('first occurrence if the character(s) are found. This number may')\n    ('then be used in the substr statement to extract the string.')\n    ('Symbolic variables can be used to replace any number in these')\n    ('functions, but a %% must not be used on the sending symbolic .')\n/(hi '               %%A = ABCDEF;           /* SET A TO ABCDEF */  ')\n (hi '               %%B = INDEX(A,(''D'')); /* SET B TO 4 */ ')\n (hi '               %%C = SUBSTR(A,%%B);    /* SET C TO DEF */')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n        %SYSPKF = 0;\n REDO SYMSC06;\n     END;\n LABEL SYMSC08;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n /  ('  ASSIGNING VALUES TO SYMBOLICS.')\n /  ('  Functions.')\n /(hi'  TYPE.')\n lm 8\n    ('Type may be used to determine the type of contents in a')\n    ('symbolic. If the contents are numeric, TYPE returns NUM.')\n    ('If the contents are in quotes, type returns LIT, otherwise type')\n    ('returns CHAR. For example:-')\n /(hi'         %%A = ABCDEF;   /* SET A TO ABCDEF */')\n  (hi'         %%B = TYPE(A);  /* SET B TO CHAR */')\n /  ('LENGTH.')\n    ('Length may be used to find the number of characters in a ')\n    ('symbolic. For example :- ')\n /(hi'         %%C = LENGTH(A); /* SET C TO 6 */')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n IF %SYSPFK \u00ac= 3 THEN DO;\n     IF %SYSPFK = 7 THEN DO;\n        %SYSPKF = 0;\n REDO SYMSC07;\n     END;\n LABEL SYMSC09;\n PANEL box (ctr 'J O L    H E L P  F A C I L I T Y')\n /  ('  ASSIGNING VALUES TO SYMBOLICS.')\n /  ('  Notes.')\n /  ('  If a dcl statement is used to assign a value to a symbolic')\n    ('  variable then all subsequent DCL statements for that symbolic')\n    ('  are ignored and assignment statements must be used.')\n /  ('  The following symbolics are reserved and cannot be changed :-')\n /  ('  %%SYSDATE        :     THE CURRENT DATE EG:- 75205')\n    ('  %%DAY            :     MONDAY, TUESDAY AND SO ON')\n    ('  %%MONTH          :     JANURARY, FEBURARY ETC.')\n    ('  %%MONTHNO        :     01, 02 THROUGH TO 12')\n    ('  %%DAYNO          :     01 - 31 ')\n    ('  %%YEAR           :     1965, 1976')\n    ('  %%HOURS          :     0 - 23 ')\n    ('  %%MINS           :     0 - 59 ')\n    ('  %%SECS           :     0 - 59 ')\n helpline ('F3 Exits, F7 to repeat previous screen, Enter for Next')\n ;\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LISTPTP": {"ttr": 12803, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " HELP1 : MACRO;\n /* ********************************************************* */\n /*          THIS IS THE JOL HELP FACILITY.                   */\n /*          WRITTEN BY S.RITCHIE AND P.CLARKE IN MAR 1981    */\n /*          LAST UPDATED 5/88 For Personal Jol               */\n /*          LAST UPDATED 8/82 TO INCLUDE THE REDO FACILITY   */\n /*          THIS UPDATE 25/4/82                              */\n           /*  CHANGE AS NECESSARY                      */\n /* ********************************************************* */\n PANEL\n box  /\n (ctr 'J o l   H e l p   F a c i l i t y')\n ///(ctr 'You can select any of the following')\n (ctr'via PF Key or press enter to display')\n (ctr'the next help screen')\n //( '        PF1........Jol Syntax and Language Structure')\n    ('        PF2........Declaring Data Sets')\n    ('        PF3........To exit from help facility')\n    ('        PF4........Declaring Sysout Data Sets')\n    ('        PF5........Declaring Programs')\n    ('        PF6........Declaring Card Image or Sysin Data Sets')\n    ('        PF7........Symbolic Variables')\n    ('        PF8........IF Instruction')\n    ('        PF9........Writing Macros or New commands')\n helpline('F3 Exits');\n\n IF %SYSPFK = 1 THEN HELPLANG;\n IF %SYSPFK = 2 THEN HELPDCL1;\n IF %SYSPFK = 4 THEN HELPDCL2;\n IF %SYSPFK = 5 THEN HELPDCL3;\n IF %SYSPFK = 6 THEN HELPDCL4;\n IF %SYSPFK = 7 THEN HELPSYMB;\n IF %SYSPFK = 8 THEN HELPIF;\n IF %SYSPFK = 9 THEN HELPMACR;\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LISTSRC": {"ttr": 12805, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " HELP2 : MACRO;\n END;\n IF %SYSPFK \u00ac= 3 THEN\n PANEL\n /(ctr 'J O L   H E L P   F A C I L I T Y')\n ///(ctr 'You can select any of the following')\n (   ctr 'via pf key or press enter to display')\n (   ctr 'the next Help Screen')\n  //('       PF2........Full screen panel instruction')\n    ('       PF3........To exit from help facility')\n    ('       PF6........On error instruction')\n    ('       PF8........Return instruction');\n    IF %SYSPFK = 2 THEN HELPPANL;\n    IF %SYSPFK = 6 THEN HELPOERR;\n    IF %SYSPFK = 8 THEN HELPRETN;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LISTVTOC": {"ttr": 12807, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " /*****************************************************************/\n /**       Build %LIST items for Holidays   Created May, 1987    **/\n /**       ------------------------------   BY C. CLARKE         **/\n /**                                                             **/\n /** This macro builds an list of %LIST items that can be        **/\n /**    used if simple IF statements to determine if today,      **/\n /**    or the day+1, +2 or -1 is (or was) a Holiday.            **/\n /**                                                             **/\n /** This information is used in member SPECIAL of the sample    **/\n /**    provided with Jol.                                       **/\n /**                                                             **/\n /*****************************************************************/\nholidaya:MACRO ;\nend;                 /* NOTE ========== <                         */\n\n /*****************************************************************/\n /******************SYMBOLIC DECLARES *****************************/\n /*****************************************************************/\n\n   /* VARIABLES BELOW USED IN LOOPS FOR SUBSCRIPTS ETC */\n\n DCL %hind,%hlen                   INIT('1');\n DCL %holidaya                     ext init('');\n DCL %hwork,%hwork2                INIT('');\n DCL %hmonth                       INIT('');\n /*****************************************************************/\n /*****CHECK THAT THERE IS VALID INPUT TO THIS MACRO***************/\n /*****************************************************************/\n    IF %LIST(1)\u00ac= ''\n    THEN STOP 'Invalid Parameter on HOLIDAY Build Array Macro';\n    %hind=1;                     /* Incremented, used in SUBSTR   */\n    %hlen=length(holidaya);      /* Stop Length                   */\nlabel looph;\n    if %hind<%hlen\n    then do;\n        %hmonth=substr(holidaya,%hind,2);  /* Get two digits     */\n        %hwork='SET LIST00%hmonth=HOL';\n        %hwork;\n        %hind=%hind+2;\n        redo looph;\n    end;\n/* Now set other %LISTs to 'WORK' meaning WORKDAYS */\n    %hind=1;                     /* Incremented, used in SUBSTR   */\nlabel loopw;\n    if %hind<50                  /* Extra to make testing easier  */\n    then do;\n        if %list(%hind)\u00ac='HOL'   /* Already set to a Holiday ?    */\n        then do; /* No                            */\n            if %hind<10 then %hind='0%hind';\n            %hwork='SET LIST00%hind=WORK';\n            %hwork;\n        end;\n        %hind=%hind+1;\n        redo loopw;\n    end;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOAD": {"ttr": 12810, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x133\\x00\\r\\x00\\r\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:33:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "JOL"}, "text": " /*****************************************************************/\n /**          Test if a Holiday            Created May, 1987     **/\n /**          -----------------            BY C. CLARKE          **/\n /**                                                             **/\n /** This macro tests if today is a Holiday.  It reads the       **/\n /**    member of the Schedule Data Set call HOLS1987, HOLS19nn  **/\n /**    and checks the lists of datas provided against today's   **/\n /**    date, and sets %HOLIDAY=YES or NO.                       **/\n /**                                                             **/\n /** It also %HOLIDAYA (a pseudo array) with two digit numbers   **/\n /**    indicating the holidays.                                 **/\n /** Then %LIST items are set to 'Y' based on the day of the     **/\n /**    month.  Then Users can quickly see if the next day, or   **/\n /**    the day after that is a holiday.                         **/\n /**                                                             **/\n /** It also sets %LASTDAY to the number of days in the month.   **/\n /**    Then Users can quickly see if the next day, or the day   **/\n /**    after that is the last day of the month.                 **/\n /**                                                             **/\n /*****************************************************************/\nholidayt:MACRO ;\n /*****************************************************************/\n /******************SYMBOLIC DECLARES *****************************/\n /*****************************************************************/\n\n   /* VARIABLES BELOW USED IN LOOPS FOR SUBSCRIPTS ETC */\n\n DCL %INDEX                        INIT('1');\n DCL %HOLIDAY                      ext init('NO');\n DCL %HOLIDAYA                     ext init(''); /* Return Array\n                                                    of Holidays */\n DCL %LASTDAY                      ext init(''); /* # days in month */\n DCL %holiday                      ext init('NO');\n DCL %work,%work2,%number          INIT('');\n DCL %hmonth                       INIT('');\n DCL %hdayno                       INIT('');\n DCL %F                            INIT(' FOREVER');\n DCL %MONTHDAY                     INIT(\n                                   '312831303130313130313031');\n /*****************************************************************/\n /*****CHECK THAT THERE IS VALID INPUT TO THIS MACRO***************/\n /*****************************************************************/\n\n    IF %LIST(1)\u00ac= ''\n    THEN STOP 'Invalid Parameter on HOLIDAY Testing Macro';\n\n /* Set up %LASTDAY to contain the number of days in the month */\n\n    %work=%monthno*2;              /* Get correct start point  */\n    %work=%work-1;                 /* Get correct start point  */\n    %lastday=substr(monthday,%work,2); /* Get number of Days */\n    %lastday=%lastday+0;           /* Make sure it's numeric   */\n\n /* See if a Leap Year, and Feb                                */\n\n    if %monthno=2                  /* Feb?                     */\n    then do;\n       %work=%year/4;\n       %work=%work*4;\n       if %work=%year\n          then %lastday=%lastday+1;  /* Fixed Leap Year */\n    end;\n\n /* Set up %HOLIDAYA to contain Saturday and Sunday day numbers */\n\n    dcl %daywrkno      init('');\n\n    %daywrkno=%dayno;               /* Copy */\n /* Reduce it to a number from 1 to 7  */\nlabel loop1;\n    if %daywrkno>7\n    then do;\n        %daywrkno=%daywrkno-7;\n        redo loop1;\n    end;\n    %work=substr(day,1,3);         /* Get only MON if Monday     */\n    if %work='SAT' then %i=0;\n    if %work='SUN' then %i=1;\n    if %work='MON' then %i=2;\n    if %work='TUE' then %i=3;\n    if %work='WED' then %i=4;\n    if %work='THU' then %i=5;\n    if %work='FRI' then %i=6;\n\n    %work=%daywrkno-%i;            /* Got SAT offset             */\n\n /* Set %HOLIDAYA to contain the day-numbers of SAT and SUN      */\nlabel loop2;\n    %i=%work;\n    if %i>0\n    then do;\n        if %i<10 then %i='0%i';\n        %holidaya='%holidaya%i';   /* Set SAT  */\n    end;\n    %i=%work+1;\n    if %i>0\n    then do;\n        if %i<10 then %i='0%i';\n        %holidaya='%holidaya%i';   /* Set SUN  */\n    end;\n    %work=%work+7;                 /* For the following week */\n    if %work<50 then redo loop2;   /* Allow a few extra days */\n\n    alloc f(holidays) da(%$jolpref.jol.schedule(hols%year)) shr;\n    open  f(holidays) input;\n    IF %lastcc\u00ac=0\n    then do;\n         STOP 'Holiday Member HOLS%year not found: Schedule Exiting';\n         exit 16;\n    end;\n    %hmonth=substr(month,1,3);     /* Get the first 3 characters */\n    %hdayno=%dayno+0;              /* Drop Leading Digit         */\n\n /*****************************************************************/\n /*****READ THE MEMBER LOOKING FOR A HOLIDAY **********************/\n /*****************************************************************/\n label readlup;\n    if eof(holidays)\n    then do;\n       close file(holidays);\n       free file(holidays);\n       %index=index(holidaya,'%DAYNO');\n       if %index\u00ac=0 then %holiday='YES';\n       exit;\n    end;\n    read file(holidays) into(work);\n\n    %work=substr(work,1,71);       /* Drop Lines Numbers            */\n\n /* Drop off any data after a /* so that Users can code comments    */\n\n    %index=index(work,'/*');\n    if %index\u00ac=0\n    then %work=substr(work,1,%index); /* Drop Comments */\n\n    %index=index(work,'%hmonth');  /* Does record have this month ? */\n    if %index=0 then redo readlup%f; /* No, so get the next         */\n\n /* Here we have the right month.                                   */\n /* Now we must check if THIS DAY is mentioned in the record.\n    and also set this day up in %HOLIDAYA \"Array\".                  */\n\n    %work2=substr(work,%index);    /* Drop Month, copy days only    */\nlabel sethola;\n        if %work2=''                 /* No More left ?             */\n           then redo readlup %f;     /* All blank no, read next rec*/\n        %work3=substr(work2,1,1);    /* Get 1st character          */\n        %work2=substr(work2,2);      /* Drop 1st character in work2*/\n\n        if %work2='' & %work3=''     /* No More left ?             */\n           then redo readlup %f;     /* All blank no, read next rec*/\n        if %work3=''\n           then redo sethola %f;     /* Blank, so skip it       */\n  /* Non Blank character here */\n        %type=type(work3);\n        if %type\u00ac='NUM'\n           then redo sethola %f;     /* Alpha, so skip it    */\n        %number='%work3';            /* Save the number            */\n  /* Get next character, see if numeric */\n        %work3=substr(work2,1,1);    /* Get 1st character          */\n        %work2=substr(work2,2);      /* Drop 1st character in work2*/\n        %type=type(work3);\n        if %type\u00ac='NUM'              /* Alpha, set up 1 number     */\n        then do;\n            %holidaya='%holidaya'||'0%number';/*add dates to 'array'*/\n            redo sethola %f;         /* See if more on this line.  */\n        end;\n  /* Here, the DAYNO is greater than 10;                           */\n        %holidaya='%holidaya%number%work3'; /* Add to 'array'  */\n        redo sethola %f;             /* See if more on this line.  */\n    end;\n END ; /* END OF MACRO */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOADGO": {"ttr": 12812, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x83\\x10\\x9f\\x00\\x83\\x11\\x0f\\x15\\x04\\x00\\xa1\\x00\\xe9\\x00T\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1983-04-19T00:00:00", "modifydate": "1983-04-20T15:04:00", "lines": 161, "newlines": 233, "modlines": 84, "user": "JOL"}, "text": " INITT:MACRO(%DEN=,%OWNER=,%NUMBTAPE=,%DISP='REWIND');\n /*************************************************************/\n /** THIS MACRO INITIALISES TAPES USING IEHINITT             **/\n /** FORMAT : INITT VOL-SER-NUMBER                           **/\n /**                DEN='TAPE DENSITY'    (DEFAULT 6250 BPI) **/\n /**                NUMBTAPE='NUMBER OF                      **/\n /**                TAPES TO BE INITTED'  (1-255)            **/\n /**                OWNER='USERS NAME'    (OPTIONAL)         **/\n /**                DISP='TAPE DISPOSITION'(REWIND OR UNLOAD)**/\n /*************************************************************/\n   DCL %SER INIT '';\nIF %LIST(1)='' THEN DO;\nPANEL ('      ------- TAPE INIT UTILITY ----')\n     /(' ENTER TAPE NUMBER                  ==>',SER,6)\n     /(' ENTER NUMBER OF TAPES')\n      ('    TO BE INITTED (DEF 1)           ==>',NUMBTAPE,3)\n     /(' ENTER TAPE DEN (800,1600 OR 6250)  ==>',DEN,4)\n      (' ENTER OWNER NAME                   ==>',OWNER,10)\n      (' ENTER TAPE DISP (REWIND OR UNLOAD) ==>',DISP,10,'%DISP');\nEND;\nIF %LIST(1)\u00ac='' THEN %SER=%LIST(1);\n   IF %DEN\u00ac='' THEN %DEN='%DEN BPI';\n   IF %OWNER\u00ac='' THEN DO;\n   %OWNER='%OWNER                    ';\n   %OWNER=SUBSTR(OWNER,1,10);\n   %OWNER=',OWNER=''%OWNER''';\n   END;\nIF %NUMBTAPE\u00ac='' THEN %NUMBTAPE=',NUMBTAPE=%NUMBTAPE';\nIF %DISP\u00ac='' THEN %DISP=',DISP=%DISP';\n      DCL   PRINTFIL PRINTER NODCB ;\n      DCL   TAPE1 DS NODSN TAPE %DEN ;\n DCL CARDS * REPLACE;\nLABEL INITT SER=%SER%OWNER%DISP%NUMBTAPE\nEOF;\n IEHINITT: DCL IEHINITT PROG\n     SYSPRINT  WRITES PRINTFIL\n     LABEL     MAY WRITE  TAPE1\n     SYSIN     READS CARDS;\n     RUN IEHINITT ;\n  END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOADVOL": {"ttr": 13057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x133\\x00P\\x00P\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:33:00", "lines": 80, "newlines": 80, "modlines": 0, "user": "JOL"}, "text": " JCLTOJOL: MACRO(%LIB='TEST.PROCLIB');\n     PANEL ('JCL TO JOL CONVERTOR COMMAND')\n    //   ('INPUT CATALOGUED PROCEDURE LIBRARY =====>',LIB,44,'%LIB')\n    //   ('MEMBER                             =====>',MEM,8,'%LIST(1)')\n    //   ('DATA SET WHERE JOL WILL BE PLACED  =====>',OUT,44,\n          '%SYSUID.JOL');\n CONVERT : DCL JCLTOJOL PROG LIB JOL33.LOAD\n           JCLIN READS %LIB(%MEM)\n           JOLCODE UPDATES %OUT (%MEM)\n           JOLLIST WRITES PRINTER\n           SYSPRINT WRITES PRINTER\n           JCLOUT WRITES PRINTER\n           PLIDUMP WRITES PRINTER;\n  DCL PRINTER PRINTER NODCB;\n RUN CONVERT 'ISA(30K)/';\n  END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOADVOLS": {"ttr": 13060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x133\\x00P\\x00P\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:33:00", "lines": 80, "newlines": 80, "modlines": 0, "user": "JOL"}, "text": "JOBCARD:MACRO;\n      %JOBNAME = %SYSUID;\n      IF %LIST(1) \u00ac= '' THEN %JOBNAME = '%JOBNAME%LIST(1)';\n      ELSE %JOBNAME = '%JOBNAME'||'X';\n /* YOU MAY ALTER THE FOLLOWING CODE TO INCLUDE ACCOUNT NUMBERS\n     FOR SPECIFIED USER-IDS.\n */\n    %ACCT='NOACCOUNT';\n    IF %SYSUID='OPSG10' THEN %ACCT='T94991I0133,0G10';\n    IF %SYSUID='OPSG13' THEN %ACCT='T94991I0133,0G13';\n PANEL  ('        C.C.S. - J.O.L.       %DAY %DAYNO %MONTH %YEAR')\n      /('                      STANDARD JOB CARD     ')\n       ('          ENTER JOBNAME.       ===>',JOLNAME,8,'%JOBNAME')\n       ('          ENTER ACCOUNT        ===>',ACCNT,30,'%ACCT')\n       ('          ENTER PROGR NAME     ===>',PGNAME,10,'%SYSUID')\n       ('          ENTER JOB CLASS      ===>',CLASS,1,'A')\n       ('          ENTER MSGCLASS       ===>',MSGCLASS,1,'X')\n       ('          ENTER USER           ===>',USER,8,'%SYSUID')\n       ('          ENTER PASSWORD       ===>',PASS,8,'')\n       ('          ENTER MSGLEVEL       ===>',MSGLV,3,'1,1')\n       ('          ENTER PRIORITY       ===>',PRTY,2,'03')\n       ('          ENTER NOTIFY ID.     ===>',NOTY,8,'%SYSUID');\n      DCL %JOBC INIT '';\n      DCL %JOBEXTRA INIT '';\n      IF  %PGNAME \u00ac= '' THEN %JOBC = 'USER ''%PGNAME''';\n      IF  %ACCNT \u00ac= '' THEN %JOBC = '%JOBC ACCT %ACCNT';\n      IF  %CLASS  \u00ac= '' THEN %JOBC = '%JOBC CLASS %CLASS';\n      IF  %MSGCLASS  \u00ac= '' THEN %JOBC = '%JOBC MSGCLASS %MSGCLASS';\n      IF  %PASS  \u00ac= '' THEN %JOBEXTRA = 'PASSWORD=%PASS';\n      IF  %USER  \u00ac= '' THEN %JOBEXTRA = '%JOBEXTRA,USER=%USER';\n      IF  %PRTY  \u00ac= '' THEN %JOBC = '%JOBC PRTY %PRTY';\n      IF  %NOTY  \u00ac= '' THEN %JOBC = '%JOBC NOTIFY %NOTY';\n      EDIT MSGLV A,B A(1),X(1),A(1);\n      IF  %A = '1' THEN %JOBC = '%JOBC PJCL';\n      ELSE %JOBC = '%JOBC NPJCL';\n      IF  %B = '1' THEN %JOBC = '%JOBC PALLOC';\n      ELSE %JOBC = '%JOBC NPALLOC';\n      %JOLNAME:JOB %JOBC JOBEXTRA='%JOBEXTRA';\n      END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOGON": {"ttr": 13063, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " JOBCAT: MACRO;\n      DCL %JOLCATL INIT '' EXT;\n      DCL %JOBCAT1 INIT 'JOBCAT ';\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n  if %list(1) = ''   & %panels \u00ac= 'OFF'\n  then do;\n     list0001='';\n     list0002='';\n     list0003='';\n     list0004='';\n     list0005='';\n     comptyp  ='N';\n\n     panel       (ctr    'Jobcat   Command')\n                 (hi ctr '----------------')\n           ///////\n           ('      Enter JobCat (1)   ===> ',list0001,\n                       44,'%list0001')\n           ('      Enter JobCat (1)   ===> ',list0002,\n                       44,'%list0002')\n           ('      Enter JobCat (1)   ===> ',list0003,\n                       44,'%list0003')\n           ('      Enter JobCat (1)   ===> ',list0004,\n                       44,'%list0004')\n           ('      Enter JobCat (1)   ===> ',list0005,\n                       44,'%list0005')\n           helpline('Press F3 to Leave without Coding JobCats.');\n           if %syspfk=3 then exit;\n   end;\n\n      IF %JOLCATL\u00ac='' THEN DO;\n            SIGNAL ERROR 2,'2 JOBCAT MACROS EXECUTED :- DATA SETS FROM S\n ECOND CONCATENATED TO FIRST';\n            %JOBCAT1='     ';\n      END;\n      IF %LIST(1)='' THEN SIGNAL 1,'NO DATA SETS SPECIFIED ON JOBCAT COM\n MAND';\n      ELSE OPCNTL '//%JOBCAT1 DD DSN=%LIST(1),DISP=SHR' AFTER;\n      %JOLCATL='1'; /* SET NON-BLANK SO WE KNOW THAT A 'JOBCAT' MACRO\n                HAS BEEN ISSUED; */\n      %JOL002=2;\n      %O='OPCNTL '; %Y='//    DD DSN='; %D='DISP=SHR';\n      IF %LIST(2)\u00ac='||' & %LIST(2)\u00ac='' THEN %O '%Y%LIST(2),%D' AFTER; 0  0450000\n      IF %LIST(3)\u00ac='||' & %LIST(3)\u00ac='' THEN %O '%Y%LIST(3),%D' AFTER; 0  0460000\n      IF %LIST(4)\u00ac='||' & %LIST(4)\u00ac='' THEN %O '%Y%LIST(4),%D' AFTER; 0  0470000\n      IF %LIST(5)\u00ac='||' & %LIST(5)\u00ac='' THEN %O '%Y%LIST(5),%D' AFTER; 0  0480000\n            END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MAIN": {"ttr": 13065, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x81\\x17o\\x00\\x81\\x17o\\x14(\\x00\\x1e\\x00\\x1e\\x00\\x05\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1981-06-25T00:00:00", "modifydate": "1981-06-25T14:28:00", "lines": 30, "newlines": 30, "modlines": 5, "user": "JOL"}, "text": " JOBLIB: MACRO;\n      DCL %JOLJOBL INIT '' EXT;\n      DCL %JOBLIB1 INIT 'JOBLIB ';\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n  if %list(1) = ''   & %panels \u00ac= 'OFF'\n  then do;\n     list0001='';\n     list0002='';\n     list0003='';\n     list0004='';\n     list0005='';\n     comptyp  ='N';\n\n     panel       (ctr    'Jobcat   Command')\n                 (hi ctr '----------------')\n           ///////\n           ('      Enter JobLib (1)   ===> ',list0001,\n                       44,'%list0001')\n           ('      Enter JobLib (1)   ===> ',list0002,\n                       44,'%list0002')\n           ('      Enter JobLib (1)   ===> ',list0003,\n                       44,'%list0003')\n           ('      Enter JobLib (1)   ===> ',list0004,\n                       44,'%list0004')\n           ('      Enter JobLib (1)   ===> ',list0005,\n                       44,'%list0005')\n           helpline('Press F3 to Leave without Coding Joblibs.');\n           if %syspfk=3 then exit;\n   end;\n\n      IF %JOLJOBL\u00ac='' THEN DO;\n            SIGNAL ERROR 2,'2 JOBLIB MACROS EXECUTED :- DATA SETS FROM S\n ECOND CONCATENATED TO FIRST';\n            %JOBLIB1='     ';\n      END;\n      IF %LIST(1)='' THEN SIGNAL 1,'NO DATA SETS SPECIFIED ON JOBLIB COM\n MAND';\n      ELSE OPCNTL '//%JOBLIB1 DD DSN=%LIST(1),DISP=SHR' AFTER;\n      %JOLJOBL='1'; /* SET NON-BLANK SO WE KNOW THAT A 'JOBLIB' MACRO\n                HAS BEEN ISSUED; */\n      %JOL002=2;\n      %O='OPCNTL '; %Y='//    DD DSN='; %D='DISP=SHR';\n      IF %LIST(2)\u00ac='||' & %LIST(2)\u00ac='' THEN %O '%Y%LIST(2),%D' AFTER; 0  0450000\n      IF %LIST(3)\u00ac='||' & %LIST(3)\u00ac='' THEN %O '%Y%LIST(3),%D' AFTER; 0  0460000\n      IF %LIST(4)\u00ac='||' & %LIST(4)\u00ac='' THEN %O '%Y%LIST(4),%D' AFTER; 0  0470000\n      IF %LIST(5)\u00ac='||' & %LIST(5)\u00ac='' THEN %O '%Y%LIST(5),%D' AFTER; 0  0480000\n            END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MAKEUPD": {"ttr": 13067, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00\\x00\\x00\\x83\\x08\\x9f\\x00\\x88\"?\\x15X\\x01a\\x00[\\x00\\x01\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "1983-03-30T00:00:00", "modifydate": "1988-08-10T15:58:00", "lines": 353, "newlines": 91, "modlines": 1, "user": "JOL"}, "text": " JOBPARM:MACRO (%TIME=,%ELAP=,%CARDS=,%LINES=,%LINECNT=,%FORMS=,\n               %ROOM=,%BOX=,%SYSTEM=,%NOLOG);\n  /* THIS MACRO IS FOR JES2 ONLY, IF INCORRECTLY CODED\n     WILL ISSUE 'MAIN' COMMAND, OR DO NOTHING */\n         IF %SPOOL='ASP' | %SPOOL='JES3' THEN DO;\n               SIGNAL ERROR 2,'JOBPARM ISSUED FOR %SYSTEM:- MAIN COMMAN\nD USED';\n               MAIN CARDS=%CARDS,LINES=%LINES;\n         END;\n         IF %SPOOL='JES2'\n         THEN DO;\n  /* THIS IS A JES2 SYSTEM */\n               DCL %OPTION  INIT '';\n               IF %TIME\u00ac='' | %ELAP\u00ac=''\n               THEN DO;\n                    %OPTION='T=%TIME%ELAP';\n               END;\n               IF %CARDS\u00ac=''\n               THEN DO;\n                    IF %OPTION\u00ac='' THEN %OPTION='%OPTION,';\n                    %OPTION='%OPTION'||'C=%CARDS';\n               END;\n               IF %LINES\u00ac=''\n               THEN DO;\n                    IF %OPTION\u00ac='' THEN %OPTION='%OPTION,';\n                    %OPTION='%OPTION'||'L=%LINES';\n               END;\n               IF %LINECNT\u00ac=''\n               THEN DO;\n                    IF %OPTION\u00ac='' THEN %OPTION='%OPTION,';\n                    %OPTION='%OPTION'||'K=%LINECNT';\n               END;\n               IF %FORMS\u00ac=''\n               THEN DO;\n                    IF %OPTION\u00ac='' THEN %OPTION='%OPTION,';\n                    %OPTION='%OPTION'||'F=%FORMS';\n               END;\n               IF %ROOM\u00ac='' | %BOX\u00ac=''\n               THEN DO;\n                    IF %OPTION\u00ac='' THEN %OPTION='%OPTION,';\n                    %OPTION='%OPTION'||'R=%BOX%ROOM';\n               END;\n               IF %SYSTEM\u00ac=''\n               THEN DO;\n                    IF %OPTION\u00ac='' THEN %OPTION='%OPTION,';\n                    %OPTION='%OPTION'||'S=%SYSTEM';\n               END;\n               IF %NOLOG\u00ac=''\n               THEN DO;\n                    IF %OPTION\u00ac='' THEN %OPTION='%OPTION,';\n                    %OPTION='%OPTION'||'J';\n               END;\n               IF %OPTION\u00ac=''\n               THEN OPCNTL '/*JOBPARM %OPTION' AFTER JOBCARD;\n               ELSE SIGNAL 2,'NO PARMS OR INVALID PARMS:JOBPARM CMD';\n         END;\n         ELSE SIGNAL 'JOBPARM IGNORED FOR %SPOOL';\n   END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MENU": {"ttr": 17921, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00R\\x01\\t\\x00\\x8f\\x01\\x102\\x0f\\x05\\x07\\x00\\xd0\\x00\\xcb\\x00$\\xd1\\xd6\\xd3\\xf6\\xf0@@@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2009-01-08T00:00:00", "modifydate": "2010-11-16T05:07:52", "lines": 208, "newlines": 203, "modlines": 36, "user": "JOL60"}, "text": " /*****************************************************************/\n /**               SUBMIT MACRO            LAST MODIFIED MAY 1987**/\n /**               ------------            BY C. CLARKE          **/\n /**                                                             **/\n /** MODIFIED D. DOUBTFIRE 18.01.83 FOR JCL SUBMITS              **/\n /** MODIFIED C. CLARKE    26.03.87 FOR NETWORKING               **/\n /**                                                             **/\n /** THIS MACRO WILL SUBMIT BOTH JOL JOBS AND JCL JOBS           **/\n /**                                                             **/\n /** TO SUBMIT A JOL JOB SIMPLY PUT -SUBMIT JB1;                 **/\n /** WHERE JB1 IS A MEMBER OF YOUR INCLUDE LIBRARY CONTAINING    **/\n /** JOL CODE.                                                   **/\n /**                                                             **/\n /** TO SUBMIT JCL SIMPLY PUT -SUBMIT '//JOBNAME JOB MSBCLASS=A' **/\n /**                                  '//     EXEC PGM=MYPROG  ' **/\n /** ANY VALID JCL STATEMENTS MAY BE ENCLOSED ON QUOTES .        **/\n /** JOL AND JCL JOBS MAY BE SUBMITTED TOGETHER                  **/\n /**       EG.  -SUBMIT JB1 '//MYJOB1 JOB MSGCLASS=A ETC'        **/\n /**            WILL SUBMIT A JOL MEMBER CALLED JB1 AND A JCL    **/\n /**            JOB CALLED MYJOB1.                               **/\n /*****************************************************************/\nSUBMIT:MACRO NOJOIN  %PI,%PE,%PM,%PJ,%SYMS=,%PROG=,%USING=XX,\n  %NOCAT,%NOCATGDG,%ULIB=,%UMAC=,\n  AFTER,%LET,%PO,\n  %NPI=NPI,%NP=,\n  %PROCLIB='%$JOLINCL',\n  %MACROLIB='%$JOLPREF.JOL%$JOLVERS.CMDLIB');\n /*****************************************************************/\n /******************SYMBOLIC DECLARES *****************************/\n /*****************************************************************/\n DCL DUMMY DS DUMMY NODCB;\n DCL %TYPE INIT '';\n DCL %JCL1,%JCL2,%JCL3,%JCL4,%JCL5,%JCL6,%JCL7,%JCL8,%JCL9,%JCL10,\n     %JCL11,%JCL12,%JCL13,%JCL14,%JCL15,%JCL16,%JCL17,%JCL18,\n     %JCL19,%JCL20,%JCL21,%JCL22,%JCL23,%JCL24,%JCL25,%JCL26,\n     %JCL27,%JCL28,%JCL29,%JCL30    INIT  '';\n DCL %JOL1,%JOL2,%JOL3,%JOL4,%JOL5,%JOL6,\n     %JOL7,%JOL8,%JOL9,%JOL10 INIT '' ;\n DCL %SYM1,%SYM2,%SYM3,%SYM4,%SYM5,%SYM6,\n     %SYM7,%SYM8,%SYM9,%SYM10 INIT '' ;\n\n /* ADDED FOR NETWORKING AND SCHEDULING C.CLARKE MARCH, 1987 */\n DCL %SYSNETID INIT('') EXT;  /* SET IF NETWORK EXECUTING */\n DCL %SYSJOBS1 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSJOBS2 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSNTINC INIT('') EXT;  /* KEEPS INCLUDE DATA SET FOR JOBS      */\n DCL %SYSNTMAC INIT('') EXT;  /* KEEPS JOL MACRO DATA SETS FOR JOBS   */\n DCL %CHK1,%CHK2,%CHK3,%CHK4,%CHK5,%CHK6,\n     %CHK7,%CHK8,%CHK9,%CHK10 INIT '' ;\n\n DCL %CHECK,%CHKLEN,%CHLES1        INIT ''      ;\n DCL %JJOB INIT 'NO';\n DCL %JCJOB INIT 'NO';\n\n   /* VARIABLES BELOW USED IN LOOPS FOR SUBSCRIPTS ETC */\n DCL %INDEX                        INIT('1');\n DCL %IND2                         INIT('1');\n DCL %WORK                         INIT('');\n DCL %L,%K                         INIT('');\n /*****************************************************************/\n /*****CHECK THAT THERE IS VALID INPUT TO THIS MACRO***************/\n /*****************************************************************/\n    IF %LIST(1) = '' & %USING = 'XX' THEN STOP 'NO COMPILE INPUT' ;\n\n    IF %PROG='' THEN %PROG='$JOLCP%$JOLVERS';\n\n /*****************************************************************/\n /*****CHECK IF WE ARE NETWORKING, AND AFTER SPECIFIED ************/\n /*****************************************************************/\n    IF %AFTER\u00ac=0 & %SYSNETID=''\n    THEN DO;\n         STOP '''AFTER'' CANCELLED: USE THE NETWORK COMMAND FIRST';\n         EXIT 'SUBMIT ABANDONED';\n    END;\n\n /*****************************************************************/\n /*****CHECK FOR SYMBOLICS TO BE PASSED TO JOL JOBS****************/\n /*****************************************************************/\n    IF %SYMS \u00ac= ''\n    THEN DO;\n          %CHECK = SUBSTR(SYMS,1,1)         ; /* CHECK FOR    */\n          IF %CHECK = '(' THEN                /* BRACKETS     */\n          %SYMS = SUBSTR(SYMS,2)            ; /* AND REMOVE   */\n          %CHKLEN = LENGTH (SYMS);            /* SAME         */\n          %CHECK = SUBSTR(SYMS,%CHKLEN,1)   ;\n          IF %CHECK = ')'\n          THEN  DO                          ;\n              %CHLES1 = %CHKLEN-1           ;\n              %SYMS = SUBSTR(SYMS,1,%CHLES1);\n          END;\n    END;\n /*****************************************************************/\n /*****HANDLE AFTER CLAUSE, IF ANY ********************************/\n /*****************************************************************/\n\n   DCL %SUB     INIT '0';\n   DCL %X       INIT '    IF ';\n   DCL %BRACKET INIT '0';\n/* NOTE THAT JOL VERY NICELY JOINS UP ANY PARMS IN () FOR US, WHICH\n   IS EXACTLY WHAT WE DON'T WANT HERE.\n\n   THEREFORE , WE MUST EXPAND THEM IF THEY ARE FOUND.\n*/\n   IF %AFTER \u00ac=0 THEN DO;\n   %SUB=%AFTER;\n LABEL TAFT;\n       %SUB=%SUB+1;\n /* TEST IF JOL COMBINED PARAMETERS FOR US. */\n       %Y='%LIST(%SUB)';\n       %Z=TYPE(Y);\n       IF %Y='(' THEN %BRACKET=%BRACKET+1;\n       IF %Y=')' THEN %BRACKET=%BRACKET-1;\n       IF %Y = '|' | %Y = '&'\n       |  %Y = '('\n       THEN DO;\n           IF %BRACKET=0            /* A PARENTHESIZED EXPR ? */\n           THEN DO;                 /* NO ... */\n               WRITE FILE($$JCODE) FROM('%X');\n               %X='    %Y  ';\n           END;\n           ELSE %X='%X %Y ';\n       END;\n       ELSE DO;\n           IF %Y='ENDED' THEN %X='%X ''ENDED''';\n           IF %Y=')' THEN %X='%X )';\n           %WORK='%Y';                 /* SAVE NAME FOR CHECK LATER */\n/*     %Y='%Y        '; %Y=SUBSTR(Y,1,8);   /* MAKE 8 CHARS LONG */\n            IF %Y\u00ac='ENDED' & %Y\u00ac=')'   /* IS IT A JOB NAME ? */\n            THEN DO;          ;        /* YES */\n                %L=LENGTH(X);\n                IF %L>60 THEN DO;\n                    WRITE FILE($$JCODE) FROM('%X ');\n                    %X='        ';\n                END;\n                %X='%X %%%Y=';        /* YES */\n                %L=INDEX(SYSJOBS1,'%WORK');  /* SEE IF JOB SUBMITTED */\n                %K=INDEX(SYSJOBS2,'%WORK');  /* SEE IF JOB SUBMITTED */\n                IF %L=0 & %K=0\n                THEN DO;\n                STOP 'JOB %WORK NOT YET SUBMITTED:- NETWORK WILL FAIL';\n                END;\n            END;\n       END;\n       IF %SUB<%SYSNLIST THEN REDO TAFT;\n    IF %X\u00ac='' THEN  WRITE FILE($$JCODE) FROM('%X ');\n    WRITE FILE($$JCODE) FROM('    THEN DO;');\n    IF %BRACKET\u00ac=0 THEN\n    WRITE 'UNMATCHED PARENTHESES IF AFTER CLAUSE OF SUBMIT';\n END;   /* OF AFTER PREPROCESSING */\n\n /*****************************************************************/\n /**************TEST FOR TYPE OF SUBMISSION  JOL OR JCL ***********/\n /*****************************************************************/\n LABEL TTYPE;\n       %IND2=%INDEX;\n       %WORK=LENGTH(INDEX);\n       IF %WORK=1 THEN %INDEX='000%INDEX';\n       IF %WORK=2 THEN %INDEX='00%INDEX';\n       IF %WORK=3 THEN %INDEX='0%INDEX';\n       IF %LIST(%INDEX)\n       THEN DO;\n            %TYPE=TYPE(LIST%INDEX);\n            %JCL$='JCL%IND2';\n            %JOL$='JOL%IND2';\n            %SYM$='SYM%IND2';\n            %CHK$='CHK%IND2';\n /*****************************************************************/\n /*****IF JCL IS REQUIRED SET JCL SYMBOLICS AND JOB TEST **********/\n /*****************************************************************/\n           IF %TYPE='LIT'\n           THEN DO;\n                IF %SYSNETID\u00ac=''       /* ARE WE NETWORKING ? */\n                THEN DO;\n                     IF %JCJOB='NO'    /* ANY JCL SUBMITTED YET ? */\n                     THEN DO;\n                          IF %SYSLABEL='' THEN\n                          DO;\n                              STOP 'FOR JCL NETWORKING, YOU MUST CODE A\n LABEL ON THE SUBMIT STATEMENT';\n                              STOP 'SUBMIT FAILED';\n                              EXIT;\n                          END;\n                         %WORK='%SYSLABEL:         ';\n                         %WORK=SUBSTR(WORK,1,9); /* MAKE 9 CHARS LONG */\n                         WRITE FILE($$JCODE) FROM('%WORK NETSUB');\n                         %WORK='%SYSLABEL        ';\n                         %WORK=SUBSTR(WORK,1,8); /* MAKE 8 CHARS LONG */\n                         WRITE FILE($$JSTAT) FROM('%%%WORK='''';');\n                         %WORK='%SYSLABEL';\n                     END;\n                     ELSE %WORK='';\n                     WRITE FILE($$JCODE) FROM('''%LIST(%IND2)''');\n                END;\n                %JCJOB='YES';\n                SET %JCL$='%LIST(%IND2)';\n           END;\n /*****************************************************************/\n /*****IF JOL SUBMISSION SUBSTITUTE SYMBOLICS FOR CARD FILE********/\n /*****************************************************************/\n           IF %TYPE='CHAR'         /* JOL JOB HERE */\n           THEN DO;\n                %USING=' JOLIN ';\n                %JJOB='YES';\n                IF %SYSNETID=''    /* ORDINARY SUBMIT HERE */\n                THEN DO;\n                     SET %SYM$='*  JOL/%SYMS;';\n                     SET %JOL$='   INCLUDE %LIST(%IND2);';\n                END;\n                IF %SYSNETID\u00ac=''   /* WE ARE IN A NETWORK HERE */\n                THEN DO;\n                     IF %JCJOB='YES'\n                     THEN DO;\n                         STOP 'WHEN NETWORKING, YOU CANNOT SUBMIT A JCL\nJOB AND A JOL JOB IN THE SAME SUBMIT COMMAND';\n                         STOP 'USE SEPERATE SUBMIT.  SUBMIT ENDED';\n                         EXIT;\n                     END;\n                     %WORK='         NETSUB %LIST(%IND2)';\n                     WRITE FILE($$JCODE) FROM(WORK);\n                     IF %SYMS\u00ac='' THEN\n                     WRITE FILE($$JCODE) FROM(\n          '           SYMS(''%SYMS'')');\n                     WRITE FILE($$JCODE) FROM(\n          '           %NPI %PO %LET %PE %PM %PJ %NP %NOCAT %NOCATGDG;');\n                     %WORK='%LIST(%IND2)        ';\n                     %WORK=SUBSTR(WORK,1,8);   /* MAKE 8 CHARS LONG */\n                     WRITE FILE($$JSTAT) FROM('%%%WORK='''';');\n                     %WORK='%LIST(%IND2)';\n                END;\n           END;\n       END;\n       %L=LENGTH(SYSJOBS1);  /* SAVE SUBMITTED JOBS */\n       IF %WORK\u00ac=''          /* 2ND LINE OF JCL JOB ? */\n       THEN DO;              /* NO */\n           IF %L<240 THEN %SYSJOBS1='%SYSJOBS1,%WORK';\n           ELSE %SYSJOBS2='%SYSJOBS2,%WORK';\n       END;\n       %INDEX=%INDEX+1;\n       IF %AFTER=0 THEN IF %LIST(%INDEX) THEN REDO TTYPE;\n       IF %AFTER\u00ac=0 THEN IF %INDEX<%AFTER THEN REDO TTYPE;\n       IF %AFTER\u00ac=0\n       THEN DO;\n           IF %JCJOB='YES'\n           THEN WRITE FILE($$JCODE) FROM('    ;');\n           WRITE FILE($$JCODE) FROM('    END;');\n       END;\n /*****************************************************************/\n /*****IF NETWORKING, THEN WRITE OUT OPTIONS, AND END *************/\n /*****************************************************************/\n       IF %SYSNETID\u00ac=''\n       THEN DO;\n           IF %JCJOB='YES'\n           THEN WRITE FILE($$JCODE) FROM('    ;');\n           IF %UMAC\u00ac=' ' THEN %SYSNTMAC='%UMAC';  /* SAVE FOR ENDNET */\n           IF %ULIB\u00ac=' ' THEN %SYSNTINC='%ULIB';  /* SAVE FOR ENDNET */\n           EXIT;\n       END;\n /*****************************************************************/\n /*****SET UP CARD FILE FOR JOL BATCH PROGRAM       ***************/\n /*****************************************************************/\n    DCL JOLIN * REPLACE JOL;\n%SYM1\n%JOL1\n%CHK1\n%SYM2\n%JOL2\n%CHK2\n%SYM3\n%JOL3\n%CHK3\n%SYM4\n%JOL4\n%CHK4\n%SYM5\n%JOL5\n%CHK5\n%SYM6\n%JOL6\n%CHK6\n%SYM7\n%JOL7\n%CHK7\n%SYM8\n%JOL8\n%CHK8\n%SYM9\n%JOL9\n%CHK9\n%SYM10\n%JOL10\n%CHK10\nEOF;\n /*****************************************************************/\n /*****SET UP CARD FILE FOR JCL BATCH PROGRAM       ***************/\n /*****************************************************************/\n  DCL CARDS * REPLACE;\n%JCL1\n%JCL2\n%JCL3\n%JCL4\n%JCL5\n%JCL6\n%JCL7\n%JCL8\n%JCL9\n%JCL10\n%JCL11\n%JCL12\n%JCL13\n%JCL14\n%JCL15\n%JCL16\n%JCL17\n%JCL18\n%JCL19\n%JCL20\n%JCL21\n%JCL22\n%JCL23\n%JCL24\n%JCL25\n%JCL26\n%JCL27\n%JCL28\n%JCL29\n%JCL30\nEOF;\n /*****************************************************************/\n /*****SET UP USERS JOL LIBRARIES *********************************/\n /*****************************************************************/\n         IF %PI \u00ac= '' THEN %NPI = '' ;\n         IF %UMAC\u00ac=' ' THEN %UMAC='%UMAC||';\n         ELSE IF %SYSUID \u00ac= ' ' THEN %UMAC = '%SYSUID.JOL ||';\n         IF %ULIB\u00ac=' ' THEN %ULIB='%ULIB||';\n         ELSE IF %SYSUID \u00ac= ' ' THEN %ULIB = '%SYSUID.JOL ||';\n         IF %NP='' THEN DCL $$JPRINT PRINTER VBA 150,160;\n                   ELSE DCL $$JPRINT DS 'NULLFILE';\n\n /*****************************************************************/\n /*****SET UP JOL BATCH COMPILE DECLARATIONS AND RUN STATEMENT*****/\n /*****************************************************************/\n IF %JJOB='YES' | %USING\u00ac='XX' THEN DO;\n DCL $$JCL       SYSOUT=A PGM=INTRDR FB 80,80 BUFNO=1;\n DCL $$JLOAD     DS %$JOLPREF.JOL%$JOLVERS.LOAD ;\n DCL $$JINCL     DS %$JOLINCL;\n DCL $$JMACRO    DS %$JOLPREF.JOL%$JOLVERS.CMDLIB ;\n DCL $$JWORK1    DS SYSDA FB 80,800 600 BLKS NORLSE ;\n DCL $$JWORK2    DS SYSDA VB 200,800 600 BLKS NORLSE ;\n DCL %PROG       PROG\n      $$JPRINT   WRITES $$JPRINT\n      $$JCL      WRITES $$JCL\n      $$JLOAD    READS  $$JLOAD\n      $$JINCL    READS  %ULIB  $$JINCL\n      $$JMACRO   READS  %UMAC  $$JMACRO\n      $$JWORK1   WRITES $$JWORK1\n      $$JWORK2   WRITES $$JWORK2\n      $$JIN      READS  %USING ;\n%SYSLABEL:       RUN %PROG PARM\n      '%NPI,%PO,%LET,%PE,%PM,%PJ,%NP,%NOCAT,%NOCATGDG/ ';\n END;\n /*****************************************************************/\n /*****SET UP JCL BATCH STATEMENTS TO SUBMIT JCL JOB **************/\n /*****************************************************************/\n IF %JCJOB='YES'\n  THEN DO;\n  DCL DUMMYIN DS DUMMY;\n  DCL PRINTFIL  PRINTER NODCB;\n  DCL OUTJCL SYSOUT A PGM=INTRDR;\n   IEBGENER: DCL IEBGENER PROG\n             SYSUT1 READS CARDS\n             SYSUT2 WRITES OUTJCL\n             SYSIN  READS DUMMYIN\n             SYSPRINT WRITES PRINTFIL;\n     RUN IEBGENER ;\n END ;\n END ; /* END OF MACRO */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MENUOLD": {"ttr": 17669, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x102\\x0f\\x01\\x102\\x0f\\x03!\\x00\\xb5\\x00\\xb5\\x00\\x00\\xd1\\xd6\\xd3\\xf6\\xf0@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-11-16T00:00:00", "modifydate": "2010-11-16T03:21:50", "lines": 181, "newlines": 181, "modlines": 0, "user": "JOL60"}, "text": " /*****************************************************************/\n /**               SUBMIT MACRO            LAST MODIFIED MAY 1987**/\n /**               ------------            BY C. CLARKE          **/\n /**                                                             **/\n /** MODIFIED D. DOUBTFIRE 18.01.83 FOR JCL SUBMITS              **/\n /** MODIFIED C. CLARKE    26.03.87 FOR NETWORKING               **/\n /**                                                             **/\n /** THIS MACRO WILL SUBMIT BOTH JOL JOBS AND JCL JOBS           **/\n /**                                                             **/\n /** TO SUBMIT A JOL JOB SIMPLY PUT -SUBMIT JB1;                 **/\n /** WHERE JB1 IS A MEMBER OF YOUR INCLUDE LIBRARY CONTAINING    **/\n /** JOL CODE.                                                   **/\n /**                                                             **/\n /** TO SUBMIT JCL SIMPLY PUT -SUBMIT '//JOBNAME JOB MSBCLASS=A' **/\n /**                                  '//     EXEC PGM=MYPROG  ' **/\n /** ANY VALID JCL STATEMENTS MAY BE ENCLOSED ON QUOTES .        **/\n /** JOL AND JCL JOBS MAY BE SUBMITTED TOGETHER                  **/\n /**       EG.  -SUBMIT JB1 '//MYJOB1 JOB MSGCLASS=A ETC'        **/\n /**            WILL SUBMIT A JOL MEMBER CALLED JB1 AND A JCL    **/\n /**            JOB CALLED MYJOB1.                               **/\n /*****************************************************************/\nSUBMIT:MACRO (%PI,%PE,%PM,%PJ,%SYMS=,%PROG=,%USING=XX,\n  %NOCAT,%NOCATGDG,%ULIB=,%UMAC=,\n  AFTER,%LET,%PO,\n  %NPI=NPI,%NP=,\n  %PROCLIB='%$JOLINCL',\n  %MACROLIB='%$JOLPREF.JOL%$JOLVERS.CMDLIB');\n /*****************************************************************/\n /******************SYMBOLIC DECLARES *****************************/\n /*****************************************************************/\n DCL DUMMY DS DUMMY NODCB;\n DCL %TYPE INIT '';\n DCL %JCL1,%JCL2,%JCL3,%JCL4,%JCL5,%JCL6,%JCL7,%JCL8,%JCL9,%JCL10,\n     %JCL11,%JCL12,%JCL13,%JCL14,%JCL15,%JCL16,%JCL17,%JCL18,\n     %JCL19,%JCL20,%JCL21,%JCL22,%JCL23,%JCL24,%JCL25,%JCL26,\n     %JCL27,%JCL28,%JCL29,%JCL30    INIT  '';\n DCL %JOL1,%JOL2,%JOL3,%JOL4,%JOL5,%JOL6,\n     %JOL7,%JOL8,%JOL9,%JOL10 INIT '' ;\n DCL %SYM1,%SYM2,%SYM3,%SYM4,%SYM5,%SYM6,\n     %SYM7,%SYM8,%SYM9,%SYM10 INIT '' ;\n\n /* ADDED FOR NETWORKING AND SCHEDULING C.CLARKE MARCH, 1987 */\n DCL %SYSNETID INIT('') EXT;  /* SET IF NETWORK EXECUTING */\n DCL %SYSJOBS1 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSJOBS2 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSNTINC INIT('') EXT;  /* KEEPS INCLUDE DATA SET FOR JOBS      */\n DCL %SYSNTMAC INIT('') EXT;  /* KEEPS JOL MACRO DATA SETS FOR JOBS   */\n DCL %CHK1,%CHK2,%CHK3,%CHK4,%CHK5,%CHK6,\n     %CHK7,%CHK8,%CHK9,%CHK10 INIT '' ;\n\n DCL %CHECK,%CHKLEN,%CHLES1        INIT ''      ;\n DCL %JJOB INIT 'NO';\n DCL %JCJOB INIT 'NO';\n\n   /* VARIABLES BELOW USED IN LOOPS FOR SUBSCRIPTS ETC */\n DCL %INDEX                        INIT('1');\n DCL %IND2                         INIT('1');\n DCL %WORK                         INIT('');\n DCL %L,%K                         INIT('');\n /*****************************************************************/\n /*****CHECK THAT THERE IS VALID INPUT TO THIS MACRO***************/\n /*****************************************************************/\n    IF %LIST(1) = '' & %USING = 'XX' THEN STOP 'NO COMPILE INPUT' ;\n\n/*  IF %PROG='' THEN %PROG='$JOLCP%$JOLVERS'; */\n    IF %PROG='' THEN %PROG='$JOLCP51';\n\n /*****************************************************************/\n /*****CHECK IF WE ARE NETWORKING, AND AFTER SPECIFIED ************/\n /*****************************************************************/\n    IF %AFTER\u00ac=0 & %SYSNETID=''\n    THEN DO;\n         STOP '''AFTER'' CANCELLED: USE THE NETWORK COMMAND FIRST';\n         EXIT 'SUBMIT ABANDONED';\n    END;\n\n /*****************************************************************/\n /*****CHECK FOR SYMBOLICS TO BE PASSED TO JOL JOBS****************/\n /*****************************************************************/\n    %CHKLEN = LENGTH (SYMS);                  /* GET LENGTH   */\n    IF %CHKLEN \u00ac= 0\n    THEN DO;\n          %CHECK = SUBSTR(SYMS,1,1)         ; /* CHECK FOR    */\n          IF %CHECK = '(' THEN                /* BRACKETS     */\n          DO;\n             %CHKLEN = LENGTH (SYMS);            /* AND REMOVE   */\n             %CHLES1 = %CHKLEN-2           ;\n             %SYMS = SUBSTR(SYMS,2,%CHLES1)   ;\n          END;\n    END;\n    IF %SYSUID\u00ac='' THEN %SYMS='%SYMS SYSUID=%SYSUID';\n /*****************************************************************/\n /*****HANDLE AFTER CLAUSE, IF ANY ********************************/\n /*****************************************************************/\n\n/* NOTE THAT JOL VERY NICELY JOINS UP ANY PARMS IN () FOR US, WHICH\n   IS EXACTLY WHAT WE DON'T WANT HERE.\n\n   ALSO, UNLESS IT DOES HAVE (), IT WON'T JOIN THEM UP.\n\n   THEREFORE , WE MUST CALL A MACRO TO ANALYES THE PARENTHESIED\n   EXPRESSION, AFTER MAYBE JOINING THEM UP.\n*/\n\n    IF %AFTER\u00ac=0\n    THEN DO;\n DCL %AFT2                     INIT 0;\n       %AFT2=%AFTER+1;\n       %WORK='';                     /* INITIALIZE THE WORK AREA */\nLABEL JOIN;\n       %WORK='%WORK %LIST(%AFT2)';  /* CONCANATE VARIABLE */\n       %AFT2=%AFT2+1;\n       IF %LIST(%AFT2)\u00ac='' THEN REDO JOIN;\n\n       GETNETAF AFTER %WORK; /* DOES AFTER PROCESSING */\n    END;\n\n /*****************************************************************/\n /**************TEST FOR TYPE OF SUBMISSION  JOL OR JCL ***********/\n /*****************************************************************/\n LABEL TTYPE;\n       %IND2=%INDEX;\n       %WORK=LENGTH(INDEX);\n       IF %WORK=1 THEN %INDEX='000%INDEX';\n       IF %WORK=2 THEN %INDEX='00%INDEX';\n       IF %WORK=3 THEN %INDEX='0%INDEX';\n       IF %LIST(%INDEX)\n       THEN DO;\n            %TYPE=TYPE(LIST%INDEX);\n            %JCL$='JCL%IND2';\n            %JOL$='JOL%IND2';\n            %SYM$='SYM%IND2';\n            %CHK$='CHK%IND2';\n /*****************************************************************/\n /*****IF JCL IS REQUIRED SET JCL SYMBOLICS AND JOB TEST **********/\n /*****************************************************************/\n           IF %TYPE='LIT'\n           THEN DO;\n                IF %SYSNETID\u00ac=''       /* ARE WE NETWORKING ? */\n                THEN DO;\n                     IF %JCJOB='NO'    /* ANY JCL SUBMITTED YET ? */\n                     THEN DO;\n                          IF %SYSLABEL='' THEN\n                          DO;\n                              STOP 'FOR JCL NETWORKING, YOU MUST CODE A\n LABEL ON THE SUBMIT STATEMENT';\n                              STOP 'SUBMIT FAILED';\n                              EXIT;\n                          END;\n                         %WORK='%SYSLABEL:         ';\n                         %WORK=SUBSTR(WORK,1,9); /* MAKE 9 CHARS LONG */\n                         WRITE FILE($$JCODE) FROM('%WORK NETSUB');\n                         %WORK='%SYSLABEL        ';\n                         %WORK=SUBSTR(WORK,1,8); /* MAKE 8 CHARS LONG */\n                         WRITE FILE($$JSTAT) FROM('%%%WORK='''';');\n                         %WORK='%SYSLABEL';\n                     END;\n                     ELSE %WORK='';\n                     WRITE FILE($$JCODE) FROM('''%LIST(%IND2)''');\n                END;\n                %JCJOB='YES';\n                SET %JCL$='%LIST(%IND2)';\n           END;\n /*****************************************************************/\n /*****IF JOL SUBMISSION SUBSTITUTE SYMBOLICS FOR CARD FILE********/\n /*****************************************************************/\n           IF %TYPE='CHAR'         /* JOL JOB HERE */\n           THEN DO;\n                %USING=' JOLIN ';\n                %JJOB='YES';\n                IF %SYSNETID=''    /* ORDINARY SUBMIT HERE */\n                THEN DO;\n                     SET %SYM$='*  JOL/%SYMS;';\n                     SET %JOL$='   INCLUDE %LIST(%IND2);';\n                END;\n                IF %SYSNETID\u00ac=''   /* WE ARE IN A NETWORK HERE */\n                THEN DO;\n                     IF %JCJOB='YES'\n                     THEN DO;\n                         STOP 'WHEN NETWORKING, YOU CANNOT SUBMIT A JCL\nJOB AND A JOL JOB IN THE SAME SUBMIT COMMAND';\n                         STOP 'USE SEPERATE SUBMIT.  SUBMIT ENDED';\n                         EXIT;\n                     END;\n                     %WORK='         NETSUB %LIST(%IND2)';\n                     WRITE FILE($$JCODE) FROM(WORK);\n                     IF %SYMS\u00ac='' THEN\n   /*                %WORK='         SYMS (''%SYMS'')'; */\n                     WRITE FILE($$JCODE) FROM(\n          '           SYMS(''%SYMS'')');\n                     WRITE FILE($$JCODE) FROM(\n          '           %NPI %PO %LET %PE %PM %PJ %NP %NOCAT %NOCATGDG;');\n                     %WORK='%LIST(%IND2)        ';\n                     %WORK=SUBSTR(WORK,1,8);   /* MAKE 8 CHARS LONG */\n                     WRITE FILE($$JSTAT) FROM('%%%WORK='''';');\n                     %WORK='%LIST(%IND2)';\n                END;\n           END;\n       END;\n       %L=LENGTH(SYSJOBS1);  /* SAVE SUBMITTED JOBS */\n       IF %WORK\u00ac=''          /* 2ND LINE OF JCL JOB ? */\n       THEN DO;              /* NO */\n           IF %L<240 THEN %SYSJOBS1='%SYSJOBS1,%WORK';\n           ELSE %SYSJOBS2='%SYSJOBS2,%WORK';\n       END;\n       %INDEX=%INDEX+1;\n       IF %AFTER=0 THEN IF %LIST(%INDEX) THEN REDO TTYPE;\n       IF %AFTER\u00ac=0 THEN IF %INDEX<%AFTER THEN REDO TTYPE;\n       IF %AFTER\u00ac=0\n       THEN DO;\n           IF %JCJOB='YES'\n           THEN WRITE FILE($$JCODE) FROM('    ;');\n           WRITE FILE($$JCODE) FROM('    END;');\n       END;\n /*****************************************************************/\n /*****IF NETWORKING, THEN WRITE OUT OPTIONS, AND END *************/\n /*****************************************************************/\n       IF %SYSNETID\u00ac=''\n       THEN DO;\n           IF %JCJOB='YES'\n           THEN WRITE FILE($$JCODE) FROM('    ;');\n           IF %UMAC\u00ac=' ' THEN %SYSNTMAC='%UMAC';  /* SAVE FOR ENDNET */\n           IF %ULIB\u00ac=' ' THEN %SYSNTINC='%ULIB';  /* SAVE FOR ENDNET */\n  /*       EXIT; EXIT ERROR CVC DEC 1988 */\n       END;\n       IF %SYSNETID=''\n       THEN DO;\n /*****************************************************************/\n /*****SET UP CARD FILE FOR JOL BATCH PROGRAM       ***************/\n /*****************************************************************/\n    DCL JOLIN * REPLACE JOL;\n%SYM1\n%JOL1\n%CHK1\n%SYM2\n%JOL2\n%CHK2\n%SYM3\n%JOL3\n%CHK3\n%SYM4\n%JOL4\n%CHK4\n%SYM5\n%JOL5\n%CHK5\n%SYM6\n%JOL6\n%CHK6\n%SYM7\n%JOL7\n%CHK7\n%SYM8\n%JOL8\n%CHK8\n%SYM9\n%JOL9\n%CHK9\n%SYM10\n%JOL10\n%CHK10\nEOF;\n /*****************************************************************/\n /*****SET UP CARD FILE FOR JCL BATCH PROGRAM       ***************/\n /*****************************************************************/\n  DCL CARDS * REPLACE;\n%JCL1\n%JCL2\n%JCL3\n%JCL4\n%JCL5\n%JCL6\n%JCL7\n%JCL8\n%JCL9\n%JCL10\n%JCL11\n%JCL12\n%JCL13\n%JCL14\n%JCL15\n%JCL16\n%JCL17\n%JCL18\n%JCL19\n%JCL20\n%JCL21\n%JCL22\n%JCL23\n%JCL24\n%JCL25\n%JCL26\n%JCL27\n%JCL28\n%JCL29\n%JCL30\nEOF;\n /*****************************************************************/\n /*****SET UP USERS JOL LIBRARIES *********************************/\n /*****************************************************************/\n         IF %PI \u00ac= '' THEN %NPI = '' ;\n         IF %UMAC\u00ac=' ' THEN %UMAC='%UMAC||';\n         ELSE IF %SYSUID \u00ac= ' ' THEN %UMAC = '%SYSUID.JOL ||';\n         IF %ULIB\u00ac=' ' THEN %ULIB='%ULIB||';\n         ELSE IF %SYSUID \u00ac= ' ' THEN %ULIB = '%SYSUID.JOL ||';\n         IF %NP='' THEN DCL $$JPRINT PRINTER VBA 150,160;\n                   ELSE DCL $$JPRINT DS 'NULLFILE';\n\n /*****************************************************************/\n /*****SET UP JOL BATCH COMPILE DECLARATIONS AND RUN STATEMENT*****/\n /*****************************************************************/\n IF %JJOB='YES' | %USING\u00ac='XX' THEN DO;\n DCL $$JCL       SYSOUT=A PGM=INTRDR FB 80,80 BUFNO=1;\n DCL $$JLOAD     DS %$JOLPREF.JOL%$JOLVERS.LOAD ;\n DCL $$JINCL     DS %$JOLINCL;\n DCL $$JMACRO    DS %$JOLPREF.JOL%$JOLVERS.CMDLIB ;\n DCL $$JWORK1    DS SYSDA FB 80,800 600 BLKS NORLSE ;\n DCL $$JWORK2    DS SYSDA VB 200,800 600 BLKS NORLSE ;\n DCL %PROG       PROG\n      $$JPRINT   WRITES $$JPRINT\n      $$JCL      WRITES $$JCL\n      $$JLOAD    READS  $$JLOAD\n      $$JINCL    READS  %ULIB  $$JINCL\n      $$JMACRO   READS  %UMAC  $$JMACRO\n      $$JWORK1   WRITES $$JWORK1\n      $$JWORK2   WRITES $$JWORK2\n      $$JIN      READS  %USING ;\n%SYSLABEL:       RUN %PROG PARM\n      '%NPI,%PO,%LET,%PE,%PM,%PJ,%NP,%NOCAT,%NOCATGDG/ ';\n END;\n /*****************************************************************/\n /*****SET UP JCL BATCH STATEMENTS TO SUBMIT JCL JOB **************/\n /*****************************************************************/\n IF %JCJOB='YES'\n  THEN DO;\n  DCL DUMMYIN DS DUMMY;\n  DCL PRINTFIL  PRINTER NODCB;\n  DCL OUTJCL SYSOUT A PGM=INTRDR;\n   IEBGENER: DCL IEBGENER PROG\n             SYSUT1 READS CARDS\n             SYSUT2 WRITES OUTJCL\n             SYSIN  READS DUMMYIN\n             SYSPRINT WRITES PRINTFIL;\n     RUN IEBGENER ;\n END ;\n       END;\n END ; /* END OF MACRO */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MERGE": {"ttr": 13320, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " JOLUPD : MACRO;\n $JOB;                                      /* CREATE JOBCARD */\n /*************************************************************/\n /* THIS MACRO IS USED TO UPDATE THE JOL DATASETS REQUIRED   **/\n /* TO EXECUTE JOL.                                          **/\n /*************************************************************/\n /* A JOL TAPE CALLED 'JUPDXX' WILL BE SUPPLIED BY YOUR      **/\n /* LOCAL JOL SUPPORT GROUP, AND SHOULD BE INPUT INTO        **/\n /* THIS JOB;                                                **/\n /*************************************************************/\n /*  THE DEFAULT DSNAMES WILL HAVE BEEN SET UP AT            **/\n /*  INSTALLATION TIME BUT MAY BE CHANGED BEFORE EXECUTION.  **/\n /*************************************************************/\n /* SET UP SYMBOLICS FOR USER DATASET NAMES                  **/\n /*************************************************************/\n DCL %TAPENO INIT '';\n %INSTALL='SYS2.JOL40.INSTALL';\n %LOAD='SYS2.JOL40.LOAD'      ;\n %CMDLIB='SYS2.JOL40.CMDLIB'  ;\n %INCLUDE='SYS2.JOL40.INCLUDE';\n %SOURCE='SYS2.JOL40.SOURCE'  ;\n %MACLIB='SYS2.JOL40.MACLIB'  ;\n %PTFS='SYS2.JOL40.PTFS'      ;\n %UCMDLIB='SYS2.USER.CMDLIB'  ;\n /*************************************************************/\n /* SET UP PANEL FOR OPTION SELECTION                        **/\n /*************************************************************/\n  PANEL ('  *******  JOL SYSTEM UPDATE   **********')\n       /('  ENTER THE OPTION YOU REQUIRE   ')\n        ('  ----------------------------    ')\n       /(' 1. PRINT OUT THE CURRENT STATUS OF JOL ')\n        (' 2. UPDATE JOL WITH THE SUPPLIED JOLUPD TAPE ')\n        (' 3. EXIT                                     ')\n       /(' ENTER SELECTION ==>',SEL,1,'1');\n  VALIDATE SEL 1 3;                /* TEST FOR CORRECT REPLY  */\n  IF %SEL='3' THEN EXIT;\n /*************************************************************/\n /* SET UP PANEL FOR OPTION 1   -- PRINT STATUS              **/\n /*************************************************************/\n  IF %SEL='1' THEN DO;\n  PANEL ('  ********  JOL SYSTEM STATUS *********')\n       /('  THE CURRENT STATUS OF JOL WILL BE PRINTED  ')\n        ('  FROM MEMBER ''STATUS'' IN DATASET',INSTALL,44,'%INSTALL');\n  PRINT %INSTALL(STATUS) ;\n  END;\n /*************************************************************/\n /* SET UP PANEL FOR OPTION 2   -- UPDATE JOL                **/\n /*************************************************************/\n  IF %SEL='2' THEN DO;\n  PANEL ('  ********  JOL UPDATE PROCEDURE *******')\n        ('  THE FOLLOWING DATASETS WILL BE UPDATED ')\n        ('  1. THEIR NAMES MAY BE OVERRIDDEN HERE.    ')\n        ('  2. THE INSTALL DATASET ALWAYS CONTAINS A MEMBER CALLED ')\n        ('     STATUS, WHICH CONTAINS DOCUMENTATION RELATING TO THIS')\n        ('     RELEASE. IF YOU DO NOT HAVE THIS DATASET INSTALLED YOU')\n        ('     CAN DIRECT IT TO ANY OTHER FB 80 DATASET')\n       /('ENTER JOL UPD TAPE ==> JUPD',TAPENO,2)\n       /('  INSTALL LIBRARY  ==>',INSTALL,44,'%INSTALL')\n        ('  LOAD    LIBRARY  ==>',LOAD,44,'%LOAD')\n        ('  COMMAND LIBRARY  ==>',CMDLIB,44,'%CMDLIB')\n        ('  INCLUDE LIBRARY  ==>',INCLUDE,44,'%INCLUDE')\n        ('  SOURCE  LIBRARY  ==>',SOURCE,44,'%SOURCE')\n        ('  MACRO   LIBRARY  ==>',MACLIB,44,'%MACLIB')\n        ('  PTFS    LIBRARY  ==>',PTFS,44,'%PTFS')\n        ('  USER CMD LIBRARY ==>',UCMDLIB,44,'%UCMDLIB');\n /*************************************************************/\n /* OUTPUT FILE DECLARATIONS                                 **/\n /*************************************************************/\n DCL LOADOUT  DS %LOAD     ;\n DCL SORCOUT  DS %SOURCE   ;\n DCL CMDOUT   DS %CMDLIB   ;\n DCL UCMDOUT  DS %UCMDLIB  ;\n DCL INSTOUT  DS %INSTALL  ;\n DCL INCLOUT  DS %INCLUDE  ;\n DCL MACOUT   DS %MACLIB   ;\n DCL PTFSOUT  DS %PTFS     ;\n /*************************************************************/\n /*  INPUT FILE DECLARATIONS                                 **/\n /*************************************************************/\n %TAPENO='JUPD'||%TAPENO;\n DCL INSTIN   DS JOL.INSTALL TAPE VOL %TAPENO   LABEL 1      ;\n DCL LOADIN   DS JOL.LOAD TAPE    VOL %TAPENO   LABEL 2      ;\n DCL CMDIN    DS JOL.CMDLIB TAPE  VOL %TAPENO   LABEL 3      ;\n DCL INCLIN   DS JOL.INCLUDE TAPE VOL %TAPENO   LABEL 4      ;\n DCL SORCIN   DS JOL.SOURCE TAPE  VOL %TAPENO   LABEL 5      ;\n DCL MACIN    DS JOL.MACLIB TAPE  VOL %TAPENO   LABEL 6      ;\n DCL PTFSIN   DS JOL.PTFS TAPE    VOL %TAPENO   LABEL 7      ;\n DCL UCMDIN   DS JOL.UCMDLIB TAPE VOL %TAPENO   LABEL 8      ;\n /*************************************************************/\n /*  RUN COPY PROGRAMS AND PRINT STATUS                      **/\n /*************************************************************/\n IF %INSTALL\u00ac='' THEN COPY INSTIN TO INSTOUT PDS REPLACE OLD ;\n IF %LOAD   \u00ac='' THEN COPY LOADIN TO LOADOUT PDS REPLACE OLD ;\n IF %CMDLIB \u00ac='' THEN COPY CMDIN  TO CMDOUT  PDS REPLACE OLD ;\n IF %INCLUDE\u00ac='' THEN COPY INCLIN TO INCLOUT PDS REPLACE OLD ;\n IF %SOURCE \u00ac='' THEN COPY SORCIN TO SORCOUT PDS REPLACE OLD ;\n IF %MACLIB \u00ac='' THEN COPY MACIN  TO MACOUT  PDS REPLACE OLD ;\n IF %PTFS   \u00ac='' THEN COPY PTFSIN TO PTFSOUT PDS REPLACE OLD ;\n IF %UCMDLIB\u00ac='' THEN COPY UCMDIN TO UCMDOUT PDS REPLACE OLD ;\n PRINT %INSTALL(STATUS);\n END;\n /*************************************************************/\n END; /* END OF MACRO  */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MERGEMEN": {"ttr": 13322, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "LINK: MACRO ( /* JOL LINK EDIT MACRO  */\n  %COMP\n  %STEPLIB=,                   /* IF DIFFERENT LIB REQUIRED*/\n  %NOPANEL,                   /* IF PANELS NOT REQUIRED              */\n  %CONC=,\n  %AUTOLIB=,\n  /* DEFINE POSSIBLE STANDARD AUTO CALL LIBRARIES */\n  %PLILIB,%PLICMIX,%PLIBASE,%FORTLIB,%COBLIB,\n  %LIB=,                     /* DEFINE AN INPUT LIBRARY IF REQ'D     */\n  %SYSOUT=,                  /* DEFAULT TO X FOR TSO OR A FOR BATCH  */\n  %LOAD=,                    /* DEFINE AN OUTPUT LIBRARY IF REQ'D    */\n  %SSI=,                     /* DEFAULT SSI=NONE, MAYBE DATE LATER   */\n  %INCLUDE=,                 /* AN INCLUDE LIBRARY MAY BE SPECIFIED  */\n  %NAME=,                    /* AND A NAME GENERATOR                 */\n  %SIZE='(,)',               /* SIZE OPTION                          */\n  %DCBS=,                    /* OPTIONAL BLOCKSIZE FOR OUTPUT        */\n  %LIST, %NOLIST,            /* LIST OPTION                          */\n  %MAP, %NOMAP,              /* MAP OPTION                           */\n  %XREF, %NOXREF,            /* XREF OPTION                          */\n  %CROSSREF,                 /* AS ABOVE                             */\n  %TEST,%NOTEST,             /* TEST OPTION                          */\n  %LET, %NOLET,              /* LET OPTION                           */\n  %RENT,%NORENT,             /* REENTRANT OPTION                     */\n  %REUS,%NOREUS,             /* REUSABLE OPTION                      */\n  %REFR,%NOREFR,             /* REFRESHABLE OPTION                   */\n  %NCAL,%NONCAL,             /* NO-CALL OPTION                       */\n  %DYNAMIC\n  %XCAL,%NOXCAL,             /* EXCLUSIVE CALL OPTION                */\n  %ENTRY=,                   /* ENTRY POINT                          */\n  %OL,%ONLYLOAD,%NOOL,       /* ONLY LOADABLE OPTION                 */\n  %MEMBERS=,                 /* INCLUDE LIBRARY MEMBERS              */\n  %NE,%NONE,                 /*                                      */\n  %AC=,%PARM=) ;             /* AUTHORISATION REGUIRED               */\nIF %SYSOUT = '' THEN\n   DO;\n      IF %TSOCLASS = '' THEN %SYSOUT = A;\n      ELSE %SYSOUT = %TSOCLASS;\n   END;\nIF %LOAD = '' THEN %LOAD = '%SYSPREF.LOAD';\nIF %ONLYLOAD \u00ac= '' THEN %OL = 'OL' ;\nIF %CROSSREF \u00ac= '' THEN %XREF = 'XREF' ;\nIF %PARM = '' THEN\nDO ;\n   IF %XREF    \u00ac= ''| %XREF = '' & %NOXREF = ''\n    THEN %PARM = 'XREF' ;\n   IF %SIZE    \u00ac= '' & %PARM = '' THEN %PARM = 'SIZE=%SIZE' ;\n   IF %SIZE    \u00ac= '' THEN %PARM = '%PARM,SIZE=%SIZE' ;\n   IF %DYNAMIC \u00ac= '' THEN %PARM = '%PARM,DYNAMIC';\n   IF %DCBS    \u00ac= '' THEN %PARM = '%PARM,DCBS' ;\n   IF %LIST    \u00ac= '' THEN %PARM = '%PARM,LIST' ;\n   IF %MAP     \u00ac= '' THEN %PARM = '%PARM,MAP' ;\n   IF %TERM    \u00ac= '' THEN %PARM = '%PARM,TERM' ;\n   IF %TEST    \u00ac= '' THEN %PARM = '%PARM,TEST' ;\n   IF %LET     \u00ac= '' | %LET = '' THEN %PARM = '%PARM,LET' ;\n   IF %RENT    \u00ac= '' THEN %PARM = '%PARM,RENT' ;\n   IF %REUS    \u00ac= '' THEN %PARM = '%PARM,REUS' ;\n   IF %REFR    \u00ac= '' THEN %PARM = '%PARM,REFR' ;\n   IF %NCAL    \u00ac= '' THEN %PARM = '%PARM,NCAL' ;\n   IF %XCAL    \u00ac= '' THEN %PARM = '%PARM,XCAL' ;\n   IF %OL      \u00ac= '' THEN %PARM = '%PARM,OL' ;\n   IF %DC      \u00ac= '' THEN %PARM = '%PARM,DC' ;\n   IF %ALIGN2  \u00ac= '' THEN %PARM = '%PARM,ALIGN2' ;\n   IF %AC      \u00ac= '' THEN %PARM = '%PARM,AC=%AC' ;\n   END;\n  DCL %INP INIT '';\n  IF %LIST(1) \u00ac= '' THEN %INP = '%LIST(1)';\n  IF %INP = 'OBJ' THEN %INP = '&&OBJ';\nDCL %@@@X INIT '';\nDCL %@@@L INIT '';\nIF %NAME = '' THEN;\n   IF %INP \u00ac= '' THEN DO;\n      %@@@X = INDEX(INP,'(');\n      IF %@@@X \u00ac= 0 THEN DO;\n         %NAME = SUBSTR(INP,%@@@X);\n         %NAME = SUBSTR(NAME,2);\n         %@@@L = LENGTH(NAME);\n         %@@@L = %@@@L - 1;\n         %NAME = SUBSTR(NAME,1,%@@@L);\n         %@@@X = '';\n      END;\n   END;\n   DCL %AUTO INIT 1;\n   IF %COBLIB = '' & %PLIBASE = '' & %PLILIB = '' & %FORTLIB = ''\n   & %PLIMIX = '' THEN %AUTO = '';\n  IF %NOPANEL = ''& %AUTO = '' THEN\nPANEL ('               JOL LINK COMMAND')\n  ////('WHAT AUTOCALL LIBRARY(S) DO YOU WISH TO USE?')\n//('PLIBASE *** Y/N ***',PLIBASE,1,'N')\n('COBLIB  *** Y/N ***',COBLIB,1,'N')\n('FORTLIB *** Y/N ***',FORTLIB,1,'N')\n('PLILIB  *** Y/N ***',PLILIB,1,'N')\n('PLIMIX  *** Y/N ***',PLIMIX,1,'N')\n/////('*********************************************************');\nIF %NOPANEL = '' THEN\nPANEL ('               JOL LINK COMMAND')\n      ('     ANY HIGHLIGHTED FIELD CAN BE CHANGED')\n      ('     ALL DATA SETS MUST BE FULLY QUALIFIED')\n      ('IF MULTIPLE DATA SETS, DSIDS OR A MIXTURE OF BOTH ARE USED')\n      ('     ******* USE || BETWEEN THEM *******')\n//('INPUT DATA SET ==========================>',INP,100,'%INP')\n('LOAD LIBRARY ============================>',LOAD,44,'%LOAD')\n('PROGRAM NAME ============================>',NAME,8,'%NAME')\n('ENTRY POINT =============================>',ENTRY,8,'%ENTRY')\n('OTHER AUTOCALL LIBRARY(S) ===============>',LIB,100,'%LIB')\n('SYSOUT CLASS ============================>',SYSOUT,1,'%SYSOUT')\n('INCLUDE LIBRARY(S) ======================>',INCLUDE,100,'%INCLUDE')\n('INCLUDE MODULES '','' BETWEEN MULTIPLES =>',MEMBERS,99,'%MEMBERS')\n('LINKAGE PARAMETERS FOR THIS RUN =========>',PARM,100,'%PARM');\n/********************************************************************/\n/* NOW FIX UP ANY AUTO CALL LIBRARIES. AS ONE CAN MIX ALL LANGUAGES */\n/* WE WILL ALLOW ALL THE AUTOCALL LIBRARIES TO BE SPECIFIED. THEN   */\n/* WE WILL CONCATENATE THEM IF REQUIRED.                            */\n/********************************************************************/\nIF %INP = '&&OBJ' THEN %INP = 'OBJ';\nIF %PL1LIB \u00ac= '' & %PL1LIB \u00ac= 'N' THEN\nDO ;\n   %AUTOLIB = '%AUTOLIB %CONC SYS1.PL1LIB' ;\n   %CONC = '||' ;\nEND ;\nIF %PLILIB \u00ac= '' & %PLILIB \u00ac = 'N' THEN\nDO ;\n   %AUTOLIB = '%AUTOLIB %CONC SYS1.PLILIB' ;\n   %CONC = '||' ;\nEND ;\nIF %PLIBASE \u00ac= '' & %PLIBASE \u00ac= 'N' THEN\nDO ;\n   %AUTOLIB = '%AUTOLIB %CONC SYS1.PLIBASE' ;\n   %CONC = '||' ;\nEND ;\nIF %PLICMIX \u00ac= '' & %PLIMIX \u00ac= 'N' THEN\nDO ;\n   %AUTOLIB = '%AUTOLIB %CONC SYS1.PLICMIX' ;\n   %CONC = '||' ;\nEND ;\nIF %FORTLIB \u00ac= '' & %FORTLIB \u00ac= 'N' THEN\nDO ;\n   %AUTOLIB = '%AUTOLIB %CONC SYS1.FORTLIB' ;\n   %CONC = '||' ;\nEND ;\nIF %COBLIB \u00ac= '' & %COBLIB \u00ac= 'N' THEN\nDO ;\n   %AUTOLIB = '%AUTOLIB %CONC SYS1.COBLIB' ;\n   %CONC = '||' ;\nEND ;\nIF %LIB \u00ac= '' THEN\n   %AUTOLIB = '%AUTOLIB %CONC %LIB' ;\nIF %AUTOLIB \u00ac= '' THEN %AUTOLIB = 'SYSLIB READS %AUTOLIB' ;\n/********************************************************************/\n/* NOW LETS SEE WHERE WE ARE TO OUTPUT THE LOAD MODULE TO           */\n/********************************************************************/\nDCL %LKEDOUT INIT '';\nIF %LOAD \u00ac= '' THEN %LKEDOUT = 'SYSLMOD READS %LOAD' ;\nIF %LOAD = '' THEN\nDO ;\n   DCL LOADLIB DS DSN '&LOAD' 5,1,30 CYLS SYSDA EXT;\n   %LKEDOUT = 'SYSLMOD MODS LOADLIB' ;\nEND ;\n/********************************************************************/\n/* OK NOW FIX THE INPUTS TO THE LINK EDITOR, AND THERE COULD BE     */\n/* QUITE A FEW OF THEM AND SO THIS WILL TAKE SOME ANALYSING         */\n/* FIRST THE PRIMARY INPUTS.                                        */\n/********************************************************************/\nIF %INP = '' THEN /* ANY INPUT OR ARE WE MERELY RELINKING      */\nDO ;\n IF %LOAD = '' & %INCLUDE = '' THEN\n      STOP 'NO INPUTS OR OUTPUTS SPECIFIED FOR LINK' ;\n   IF %INP =  '' & (%INCLUDE = '' | %MEMBERS = '') THEN\n      STOP 'ATTEMPTING TO RELINK MODULE(S) BUT NO INCLUDE LIB AND/OR\n           MODULE NAME SUPPLIED' ;\n END;\n/********************************************************************/\n/* WE MAY HAVE TO GENERATE SOME CONTROL CARD INPUT, SO DO IT NOW.   */\n/********************************************************************/\nDCL %LKEDENT INIT '';\nDCL %LKEDINCL INIT '';\nDCL %INCLCARD INIT '';\nDCL %LKEDSSI INIT '';\nDCL %LKEDNAME INIT '';\nDCL %LKEDIN INIT '';\nIF %INP \u00ac= '' THEN DO;\n   %LKEDIN = '%INP';\n   %CONC = '||';\n   END;\nELSE %CONC = '';\nIF %MEMBERS \u00ac= '' THEN\nDO ;\n   IF %INCLUDE \u00ac= '' THEN\n   DO ;\n      %LKEDINCL = ' INCLIB READS %INCLUDE' ;\n      %INCLCARD = ' INCLUDE INCLIB(%MEMBERS)' ;\n   END ;\n   IF %INCLUDE = '' THEN          /* RELINK OLD MEMBER FROM LIBRARY */\n   DO ;\n      %LKEDINCL = 'INCLIB READS %LOAD' ;\n      %INCLCARD = ' INCLUDE INCLIB(%MEMBERS)' ;\n   END ;\nEND ;\n/********************************************************************/\n/* NOW WE MAY STILL HAVE SOME CONTROL CARDS TO GENERATE             */\n/********************************************************************/\nIF %SSI='' THEN DO;\n           %SSI=SUBSTR(SYSDATE,2);\n           %SSI='%SSI%HOURS%MINS';\nEND;\nIF %SSI  \u00ac= '' THEN %LKEDSSI = ' SETSSI %SSI ' ;\nWRITE 'LKEDSSI=%LKEDSSI';\nIF %ENTRY \u00ac= '' THEN %LKEDENT = ' ENTRY %ENTRY';\nIF %NAME \u00ac= '' THEN %LKEDNAME = ' NAME %NAME' ;\n/*IF %NAME = '' THEN %LKEDNAME = ' NAME TEMPNAME';*/\nIF %LKEDNAME \u00ac= '' THEN\n   %LKEDNAME = ' %LKEDNAME(R)' ;\n/********************************************************************/\n/* NOW FINAL BIT OF LINK EDITOR PRIMARY INPUT PROCESSING            */\n/********************************************************************/\nIF %LKEDSSI \u00ac= '' THEN %NOPANEL = 1;\nIF %LKEDNAME \u00ac= '' THEN %NOPANEL = 1;\nIF %INCLCARD \u00ac= '' THEN %NOPANEL = 1;\nIF %LKEDENT \u00ac= '' THEN %NOPANEL = 1;\nIF %NOPANEL = 1 THEN\n        %LKEDIN = '%LKEDIN %CONC LINKCNTL' ;\nIF %NOPANEL = 1\n  THEN DCL LINKCNTL * REPLACE ;\n%INCLCARD\n%LKEDSSI\n%LKEDENT\n%LKEDNAME\nEOF;\nIF %LKEDIN = '' THEN STOP 'NO LINKAGE EDITOR INPUT SPECIFIED' ;\nIF %LKEDIN \u00ac=  '' THEN %LKEDIN = 'SYSLIN READS %LKEDIN' ;\n/********************************************************************/\n/* NOW FINALLY LETS SET UP THE PROGRAM DECLARE AND WORK FILES       */\n/* AND RUN THE LINKAGE EDITOR PROGRAM.                              */\n/********************************************************************/\nDCL PRINTER SYSOUT %SYSOUT   FBA 121,1210 1,2 TRKS ;\nIF %STEPLIB \u00ac= '' THEN %STEPLIB = 'STEPLIB READS %STEPLIB';\nDCL WORKFILE DS 5 CYLS SYSDA NODCB;\nDCL IEWL PROG SYSPRINT WRITES PRINTER\n              SYSUT1 WRITES WORKFILE\n              %LKEDOUT        /* OUTPUT */\n              %STEPLIB       /* OPTIONAL STEPLIB */\n              %AUTOLIB       /* OPTIONAL INPUTS */\n              %LKEDINCL         /*  INCLUDE LIBRARY*/\n              %LKEDIN ;        /* INPUTS  */\n/********************************************************************/\nRUN IEWL PARM '%PARM' ;\nIF %COMP \u00ac= '' & %INP = 'OBJ' THEN DELETE OBJ;\n/********************************************************************/\nEND ;\n/********************************************************************/\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MERGMENU": {"ttr": 13569, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "LIST: MACRO (\n/*********************************************************************/\n/*                 JOL  LIST  COMMAND                                */\n/*                                                                   */\n/*        USES IDCAMS OR IEBPTPCH TO LIST OR DUMP DATASETS           */\n/*        DEVELOPED BY ABS SOFTWARE SERVICES SECTION - 25/06/81      */\n/*********************************************************************/\n      %SYSOUT=X,             /* CLASS FOR LIST OUTPUT                */\n      %SYSPRINT=X,           /* CLASS FOR UTILITY MESSAGES           */\n      %OUTLIM=,              /* FOR LIST OUTPUT > DEFAULT LIMIT      */\n      RECS, RECORDS,         /* NUMBER OF RECORDS TO BE PRINTED      */\n      %DIR,%DIRECTOR,        /* USED IF PDS DIRECTORY TO BE DUMPED   */\n      %PDS,                  /* DEFAULT IS SEQUENTIAL DATA SET       */\n      %CHAR, %HEX, %DUMP,    /* DEFAULT IS IDCAMS DUMP IN HEX & CHAR */\n      %STARTAT=,             /* FIRST RECORD TO BE PROCESSED         */\n      %EVERY=,               /* NO OF RECORDS TO SKIP BETWEEN PRINTS */\n      %RECSIZE=, %LRECL=,    /* RECORD SIZE FOR LISTING CHAR RECORDS */\n      %PRCNTL=,              /* TYPE OF PRINTER CONTROL CHARACTERS   */\n      ) ;\n/*********************************************************************/\n/*                 DECLARE SYMBOLICS FOR THIS MACRO                  */\n/*********************************************************************/\nDCL %INPFILE INIT '' ;\nDCL %STOPAFT INIT '' ;\nDCL %PROGM   INIT '' ;\nDCL %INRECFM INIT '' ;\nDCL %OPTION1 INIT '' ;\nDCL %OPTION2 INIT '' ;\nDCL %OPTION3 INIT '' ;\nDCL %F1      INIT '' ;\n/*********************************************************************/\n/*                 CHECK FOR LOGICAL PARAMETERS                      */\n/*********************************************************************/\n\n/* If User codes a parameter, then execute the comand immediately,\n   otherwise we will show the user a menu */\n\n        if %list(1) \u00ac= '' then %f1='%list(1)';\n\n        if %f1 \u00ac= '' & %buildjob='YES'\n        then do;\n            BLD04P                  '   LIST   %COMMTAIL;';\n            exit;\n        end;\n\nloop:\n\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n        if %list(1) = ''   & %panels \u00ac= 'OFF'\n        then do;\n            list0001='';\n            form    ='';\n            class   ='';\n            free    ='Y';\n            dest    ='';\n            route   ='';\n            copies  ='';\n            outlim  ='';\n\n     panel box   (hi ctr 'Print Command')\n                 (hi ctr '-------------')\n           ////\n           ('      File to Print ===> ',f1,\n                       44,'%f1')\n         / ('      Free File after Printing  ==> ',free,\n                       1,'%free')\n           ('      Number of Copies          ==> ',copies,\n                       3,'%copies')\n           ('      Sysout Class              ==> ',class,\n                       1,'%class')\n           ('      Form Class                ==> ',form,\n                       8,'%form')\n           ('      Destination               ==> ',dest,\n                       8,'%dest')\n           ('      Route                     ==> ',route,\n                       8,'%route')\n           ('      Char Format (Y ? N)       ==> ',char,\n                       1,'%char')\n           ('      Hex Format (Y ? N)        ==> ',hex,\n                       1,'%hex')\n           ('      Number of Records         ==> ',recs,\n                       5,'%recs')\n           ('      Outlim                    ==> ',outlim,\n                       6,'%outlim')\n   /*    / ('      Format Listing (Y or N)   ==> ',format,\n                       1,'%format')\n   */\nhelpline\n('F3 Exits, F4 Select from Jol Data Base, F5 Select from Catalog.');\n\ncheckf1:\n        if Syspfk=3 then exit;\n\n        if %syspfk=4\n        then do;\n            dbfshow  all 'File to Print';\n            f1='%showsel';\n        end;\n\n        if %syspfk=5\n        then do;\n            showdsn  all 'File to Print';\n            f1='%showsel';\n        end;\n        if f1=''\n        then do;\n            panel reread from f1 'You must supply a file name';\n            goto checkf1;\n        end;\n\n        if syspfk=3 then exit;   /* Back to Caller */\n\ngotfile:\n\n       list0001='%f1';\n   end;\n\nIF %OUTLIM \u00ac= '' THEN %OUTLIM = 'OUTLIM %OUTLIM' ;\nIF %CHAR   \u00ac= '' & %HEX \u00ac= '' THEN\n                 DO;\n                 SIGNAL 1, 'CHAR & HEX SPECIFIED - DUMP USED';\n                 %DUMP = 'DUMP' ;\n                 END;\nIF %HEX   = '' & %CHAR = '' & %DUMP = '' THEN %DUMP = 'DUMP' ;\nIF %DUMP \u00ac= ''   THEN\n                 DO;\n                 %HEX  = '' ;\n                 %CHAR = '' ;\n                 END;\nIF %RECS \u00ac= 0 & %RECORDS \u00ac= 0 THEN\n                 DO;\n                 SIGNAL 2,\n                 'RECORDS AND RECS BOTH SPECIFIED - RECS IGNORED' ;\n                 %RECS = '' ;\n                 END;\nELSE\n                 DO;\n                 IF %RECS \u00ac= 0 | %RECORDS \u00ac= 0 THEN\n                    %STOPAFT = '%LIST(%RECS+%RECORDS-1)' ;\n                 END;\nIF %RECSIZE \u00ac= '' & %LRECL \u00ac= '' THEN\n                 DO;\n                 SIGNAL 2,\n                 'RECSIZE AND LRECL BOTH SPECIFIED - LRECL IGNORED' ;\n                 %LRECL = '' ;\n                 END;\nIF %LRECL    \u00ac= '' THEN %RECSIZE = %LRECL ;\nIF %DIRECTOR \u00ac= '' THEN %DIR = 'DIR' ;\n/*********************************************************************/\n/*              MAKE DECISION REGARDING THE UTILITY TO BE USED       */\n/*********************************************************************/\nIF %EVERY   = '' &                     /*                            */\n   %PDS     = '' &                     /*  THESE OPTIONS ARE NOT     */\n   %DIR     = '' &                     /*  CATERED FOR IN IDCAMS     */\n   %PRCNTL  = '' &                     /*                            */\n   %RECSIZE = '' THEN                  /*                            */\n     %PROGM = 'IDCAMS' ;\nELSE %PROGM = 'IEBPTPCH' ;\n/*********************************************************************/\n/*                   SET UP LIST OPTIONS FOR IEBPTPCH                */\n/*********************************************************************/\nIF %PROGM = 'IEBPTPCH' THEN\nDO;\n   %OPTION1  = ' PRINT' ;\n   IF %DIR \u00ac= '' THEN %INRECFM = 'RECFM U 256,256' ;\n   ELSE %INRECFM = 'NODEF' ;\n   IF %PDS  \u00ac= '' & %DIR = ''\n                     THEN %OPTION1  = '%OPTION1 TYPORG=PO' ;\n                     ELSE %OPTION1  = '%OPTION1 TYPORG=PS' ;\n   IF %PRCNTL  \u00ac= '' THEN %OPTION1  = '%OPTION1,PREFORM=%PRCNTL' ;\n   IF %STOPAFT \u00ac= '' THEN %OPTION1  = '%OPTION1,STOPAFT=%STOPAFT';\n   IF %EVERY   \u00ac= '' THEN %OPTION1  = '%OPTION1,SKIP=%EVERY';\n   IF %STARTAT \u00ac= '' THEN\n   DO;\n      %STARTAT = %STARTAT - 1 ;\n      %OPTION1 = '%OPTION1,STRTAFT=%STARTAT' ;\n   END;\n   IF %DUMP    \u00ac= '' THEN\n   DO;\n      SIGNAL 2,\n      'HEX AND CHAR NOT POSSIBLE FOR OPTIONS SPECIFIED - HEX USED' ;\n      %HEX = 'HEX' ;\n   END;\n   IF %HEX     \u00ac= '' THEN %OPTION1 = '%OPTION1,TOTCONV=XE' ;\n   IF %HEX \u00ac= '' & %RECSIZE \u00ac= '' THEN\n   DO;\n      IF %RECSIZE > 66 THEN\n      DO;\n         SIGNAL 2, 'RECSIZE TOO BIG FOR HEX PRINT - RECSIZE IGNORED' ;\n         %RECSIZE = '' ;\n      END;\n   END;\n   IF %RECSIZE \u00ac= ''  THEN\n   DO;\n      %OPTION1 = '%OPTION1,MAXFLDS=1' ;\n      IF %HEX \u00ac= '' THEN %OPTION2 = ' RECORD FIELD=(%RECSIZE,,XE,)' ;\n      ELSE %OPTION2 = ' RECORD FIELD=(%RECSIZE,,,)' ;\n   END;\nEND;\n/*********************************************************************/\n/*                   SET UP LIST OPTIONS FOR IDCAMS                  */\n/*********************************************************************/\nIF %PROGM = 'IDCAMS' THEN\nDO;\n   %OPTION1 = ' PRINT INFILE(SYSUT1) -' ;\n   %OPTION2 = ' OUTFILE(SYSUT2)      -' ;\n   %OPTION3 = ' %CHAR %HEX %DUMP'       ;\n   IF %STARTAT \u00ac= '' THEN\n   DO;\n      %STARTAT = %STARTAT - 1;\n      %OPTION3 = '%OPTION3 SKIP(%STARTAT)' ;\n   END;\n   IF %STOPAFT \u00ac= '' THEN %OPTION3 = '%OPTION3 COUNT(%STOPAFT)' ;\nEND;\n/*********************************************************************/\n/*                 DECLARE  LIST  DATA SETS                          */\n/*********************************************************************/\nDCL     LISTCNTL   *  REPLACE ;\n %OPTION1\n %OPTION2\n %OPTION3\nEOF;\nIF %DIR = '' THEN %INPFILE = '%LIST(1)' ;\nELSE\nDO;\n   %$I = INDEX(LIST0001,'.') ;\n   IF %$I \u00ac= 0 THEN                            /* DSN FOUND          */\n      DCL  INPUT      DS\n                      DSN      %LIST(1)\n                      %INRECFM ;\n   ELSE                                        /* DSID FOUND - MUST  */\n      DCL  INPUT      DS                       /* HAVE A DSN OR      */\n                      LIKE %LIST(1)            /* THIS WILL NOT WORK */\n                      %INRECFM ;\n   %INPFILE = 'INPUT' ;\nEND;\nDCL     OUTPUT     PRINTER  %SYSOUT\n                   %OUTLIM\n                   RECFM    FBA 133,1330 ;\nDCL     PRINTER    PRINTER  %SYSPRINT\n                   NODCB ;\n/*********************************************************************/\n/*                   DECLARE IEBPTPCH PROGRAM                        */\n/*********************************************************************/\nLISTSTEP:  DCL     %PROGM   PROG\n                   SYSIN    READS   LISTCNTL\n                   SYSUT1   READS   %INPFILE\n                   SYSUT2   WRITES  OUTPUT\n                   SYSPRINT WRITES  PRINTER ;\n/*********************************************************************/\n/*                 RUN   LIST   PROGRAM                              */\n/*********************************************************************/\nRUN     LISTSTEP ;\nEND;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MERGO": {"ttr": 13573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x81#o\\x00\\x81#o\\x11\\x01\\x00\\x16\\x00\\x16\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1981-08-24T00:00:00", "modifydate": "1981-08-24T11:01:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "JOL"}, "text": " listcat: macro(\n    %3330,%3340,%2314,%3350,            /* UNITS WHICH MAY BE CODED */\n    %L=,%NODE=,%LEVEL=,           /* NODE POINTS WHICH MAY BE CODED */\n    %ALL,                  /* IF ALL IS NOT CODED,LISTCAT WILL ONLY\n                              LIST THE CATALOG ON SYSRES.\n                              HOWEVER,IF NODE OR L IS SPECIFIED.\n                              ALL IS ASSUMMED */\n    VOL,VOLS,CVOL,CVOLS    /* OPTIONALLY CODED VOLUMES FOR CATALOG\n                              LISTING */\n    );\n\n/* Modified to use IDCAMS, May 2001 */\n/* Check if no parameters, and if so, display a screen for the User */\n\n  if %list(1) = ''   & %panels \u00ac= 'OFF'\n  then do;\n\n     %level='%sysuid';\n\n     panel       (hi ctr 'ListCat Command')\n                 (hi ctr '---------------')\n           ///////\n           ('      Enter Level of Catalog to List   ===> ',level,\n                       30,'%level')\n   /*      ('      And Control Volume Name(s) or ALL ==> ',cvol,\n                       44,'%cvol')  */\n         helpline('Press F3 to Leave without Listing the Catalog(ue)');\n chkpan:\n\n     if %syspfk = 3 then exit;\n\n     if %level = ''\n     then do;\n          panel reread from level 'Please Enter Catlog Level to List';\n          redo chkpan;\n     end;\n /*  if %cvol = ''\n     then do;\n          panel reread from cvol  'Please the Control Volume or ALL';\n          redo chkpan;\n     end;  */\n\n  /* %level ='(%level)';                 /* Add Brackets */\n     %cvol  ='(%cvol)';\n\n  end;\n\n  /* For VSAM Catlog(ue)s - May 2001, C. V. Clarke    */\n\n     if %l\u00ac=''|%level\u00ac=''|%node\u00ac=''\n     then do;\n          %ALL='ALL';\n          %L=' LEVEL(%L%LEVEL%NODE)';\n     end;\n     %CONT1=' LISTCAT  %L';\n     DCL PRINTER PRINTER NODCB;\n     DCL CONTROLX * REPLACE;\n%CONT1\nEOF;\n     DCL IDCAMS PROG\n          SYSPRINT WRITES PRINTER\n          SYSIN READS CONTROLX;\n\n     RUN IDCAMS;\n\n      exit;    /* Leave IEHLIST code temporarily - MVT ?? */\n     /*------------------------------------------------------*/\n    /* THESE NEXT LINES MUST BE ALTERED FOR EACH INSTALLATION */\n dcl %defunit init '3330';  /* Change if 2314 etc */\n dcl %defvol1 init 'DA04';  /* Change for 1st cvol,if you have one */\n dcl %defvol2 init 'D107';  /* Change for 2nd cvol,if you have one */\n dcl %defvol3 init '';      /* Change for 3rd cvol,if you have one */\n dcl %defvol4 init '';      /* Change for 4th cvol,if you have one */\n dcl %defvol5 init '';      /* Change for 5th cvol,if you have one */\n\n    /* Now let's fix up the unit which we are going to generate */\n\n   IF %3330\u00ac='' | %3340\u00ac=''\n   |  %2314\u00ac='' | %3350\u00ac='' /* IS 3330,2314 ETC\n                                         coded on instruction? */\n     then %defunit='%3330%3340%2314%3350';\n/*  'LISTCAT VOLS    SYSRES1,SYSRES2;' WE CAN\n       SAFELY ASSUMME 'ALL',SO LET'S FIX THAT UP */\n     if %vol\u00ac=0 | %vols\u00ac=0 | %cvol\u00ac=0 | %cvols\u00ac=0\n     then do;\n        %ALL='ALL';   /* SET ALL ON */\n                 /* Now we want to pick up the volumes the user\n                    specified,but we may as well reset %defvol1 etc\n                    defined earlier, and initialise them to the vols\n                    the user wanted, then we can use the same bit of\n                    code for the 'all' processing later */\n\n        %DEFVOL1='';\n        %DEFVOL2='';\n        %DEFVOL3='';\n        %DEFVOL4='';\n        %DEFVOL5='';\n        %DEFVOL3='';\n\n          /* The line of code merely sets %vol=the concatenation\n             of cvol,cvols,vol and vols.\n\n             Therefore, if the user codes:\n\n                   'LISTCAT CVOL 11111 VOLS 222222';\n\n             He will be in error,and some curious error messages\n             will result, but you can't check for everything.\n             can you ? */\n\n        %vol=%vol+%vols;\n        %vol=%vol+%cvol;\n        %vol=%vol+%cvols;\n        %vol=%vol+1;             /* Point to first vol */\n        %defvol1= '%list(%vol)'; /* Set up first vol */\n\n        %vol=%vol+1;\n        if %list(%vol)\u00ac='' then %defvol2='%list(%vol)';\n\n        %vol=%vol+1;\n        if %list(%vol)\u00ac='' then %defvol3='%list(%vol)';\n        %vol=%vol+1;\n        if %list(%vol)\u00ac='' then %defvol4='%list(%vol)';\n        %vol=%vol+1;\n        if %list(%vol)\u00ac='' then %defvol5='%list(%vol)';\n     end  /* Of vol,vols,cvol,cvols processing */   ;\n\n     /* Now,if node | level set up,turn on 'all' again so we\n        try all the volumes */\n\n     if %l\u00ac=''|%level\u00ac=''|%node\u00ac=''\n     then do;\n          %all='all';\n          %l=',node=%l%level%node';\n     end;\n          /* Now we can set up the control cards using the\n             'replace' facility.\n             Note that if a card(after replacement) is all blank,\n             Jol won't put it in the card stream,so we must use null\n             symbolics to get this effect if we only want to generate\n             one control card */\n\n DCL %CONT1 INIT '';\n DCL %CONT2 INIT '';\n DCL %CONT3 INIT '';\n DCL %CONT4 INIT '';\n DCL %CONT5 INIT '';\n DCL %CONT6 INIT '';\n            %DDS='';\n            IF %ALL='' /* ONLY WANT ONE CONTROL CARD TO\n                       GENERATE A LISTCATLG FOR THE SYSRES VOL */\n            THEN DO;\n                 DCL SYSRES DS SYS1.LINKLIB;\n                 DCL SYSRES2 DS NODSN VOLREF SYSRES;\n                 %DDS=' DD1 READS SYSRES2 ';\n                 %CONT1=' LISTCTLG ';\n            END;\n            IF %ALL\u00ac='' /* ELSE,WE HAVE TO GENERATE A FEW CARDS */\n            THEN DO;\n                IF %DEFVOL1\u00ac=''\n                THEN DO;\n                   DCL DD1 DS NODSN VOL %DEFVOL1 UNIT %DEFUNIT;\n                   %DDS='%DDS DD1 READS DD1 ';\n                   %CONT2=' LISTCTLG VOL=%DEFUNIT=%DEFVOL1%L';\n                END;\n                IF %DEFVOL2\u00ac=''\n                THEN DO;\n                   DCL DD2 DS NODSN VOL %DEFVOL2 UNIT %DEFUNIT;\n                   %DDS='%DDS DD2 READS DD2 ';\n                   %CONT3=' LISTCTLG VOL=%DEFUNIT=%DEFVOL2%L';\n                END;\n                IF %DEFVOL3\u00ac=''\n                THEN DO;\n                   DCL DD3 DS NODSN VOL %DEFVOL3 UNIT %DEFUNIT;\n                   %DDS='%DDS DD3 READS DD3 ';\n                   %CONT4=' LISTCTLG VOL=%DEFUNIT=%DEFVOL3%L';\n                END;\n                IF %DEFVOL4\u00ac=''\n                THEN DO;\n                   DCL DD4 DS NODSN VOL %DEFVOL4 UNIT %DEFUNIT;\n                   %DDS='%DDS DD4 READS DD4 ';\n                   %CONT5=' LISTCTLG VOL=%DEFUNIT=%DEFVOL4%L';\n                END;\n                IF %DEFVOL5\u00ac=''\n                THEN DO;\n                   DCL DD5 DS NODSN VOL %DEFVOL5 UNIT %DEFUNIT;\n                   %DDS='%DDS DD5 READS DD5 ';\n                   %CONT6=' LISTCTLG VOL=%DEFUNIT=%DEFVOL5%L';\n                END;\n            END;\n            /* NOW GENERATE IEHLIST,AND EXECUTE IT */\n     DCL PRINTER PRINTER NODCB;\n     DCL CONTROLX * REPLACE;\n%CONT1\n%CONT2\n%CONT3\n%CONT4\n%CONT5\n%CONT6\nEOF;\n     DCL IEHLIST PROG\n          SYSPRINT WRITES PRINTER\n          SYSIN READS CONTROLX\n          %DDS;\n     RUN IEHLIST;\n     END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MSSLIST": {"ttr": 13575, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x822\\x0f\\x00\\x822\\x0f\\x14G\\x008\\x008\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-11-16T00:00:00", "modifydate": "1982-11-16T14:47:00", "lines": 56, "newlines": 56, "modlines": 0, "user": "JOL"}, "text": "   LIST:MACRO (%CHAR,%HEX,%STARTAT=,%EVERY=,RECS,RECORDS);\n          IF %CHAR\u00ac='' & %HEX\u00ac=''\n          THEN DO;\n                SIGNAL 2,'CHAR & HEX SPECIFIED:- HEX USED';\n                %CHAR='';\n          END;\n          %CHAR='%HEX%CHAR';   /* SET CHAR TO ONE | OTHER|NULL */\n          DCL %STOPAFT INIT '';\n          IF %RECS\u00ac=0 & %RECORDS\u00ac=0 THEN DO;\n                SIGNAL   3,'RECS AND RECORDS BOTH SPECIFIED, SET=100';\n                %STOPAFT=100;\n          END;\n          ELSE IF %RECS\u00ac=0 | %RECORDS\u00ac=0\n          THEN %STOPAFT='%LIST(%RECS+%RECORDS-1)';\n          DCL %OPTION INIT '';\n          %OPTION=' PRINT TYPORG=PS';\n          IF %STOPAFT\u00ac='' THEN %OPTION='%OPTION,STOPAFT=%STOPAFT';\n          IF %EVERY\u00ac='' THEN %OPTION='%OPTION,SKIP=%EVERY';\n          IF %STARTAT\u00ac='' THEN %OPTION='%OPTION,STRTAFT=%STARTAT';\n          IF %HEX\u00ac=' 'THEN %OPTION='%OPTION,TOTCONV=XE';\n          DCL IEBCNTL * REPLACE;\n  %OPTION\nEOF;\n          DCL IEBPTPCH PROG\n                SYSPRINT WRITES PRINTER\n                SYSUT1 READS %LIST(1)\n                SYSUT2 WRITES OUTPUT\n                SYSIN READS IEBCNTL;\n          DCL PRINTER PRINTER NODCB;\n          DCL OUTPUT PRINTER FBM 121,1210;\n %SYSLABEL: RUN IEBPTPCH;\n          END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PANCOB": {"ttr": 13830, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x81\\x14\\x1f\\x00\\x81\\x14\\x1f\\x13%\\x00$\\x00$\\x00\\x03\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1981-05-21T00:00:00", "modifydate": "1981-05-21T13:25:00", "lines": 36, "newlines": 36, "modlines": 3, "user": "JOL"}, "text": " LISTSRC: MACRO (%PRJCAT=,%GEMLIB=,%MAC1=,%NOPANEL,\n     %PASSWD=,%SYSOUT=,%GEMMOD,%OWNER=);\n %OWNER = OWNERID;\n IF %SYSOUT = '' THEN %SYSOUT= ' *';\n IF %PRJCAT= '' THEN DO;\n    %PRJCAT = 'GEM.SOURCE.CATALOG';  /* DEFAULT FOR AIR NZ   */\n END;\n IF %GEMLIB='' THEN DO;\n    %GEMLIB = 'GEN';  /* DEFAULT FOR AIR NZ  */\n END;\n IF %LIST(1) \u00ac= '' THEN %GEMMOD = '%LIST(1)';\n IF %PASSWD \u00ac= '' THEN %PASSWD = '/(%PASSWD)';\n IF %NOPANEL = '' THEN\n PANEL ('          LIST SOURCE OPTIONS   ')\n //('            ANY HIGHLIGHTED FIELD CAN BE CHANGED')\n   (' NAME OF GEM MODULE =================>',GEMMOD,12,'%GEMMOD')\n   (' SYSOUT CLASS =======================>',SYSOUT,1,'%SYSOUT')\n   (' GEM PROJECT CATALOGUE ==============>',PRJCAT,44,'%PRJCAT')\n   (' SOURCE GEM LIBRARY =================>',GEMLIB,3,'%GEMLIB')\n ///('        *****************************************************');\n DCL PRNTOUT DS DSN &&PRNT(%GEMMOD) UNIT SYSDA\n      2,2,2 CYLS FB 80,19040;\n DCL GEMPRT SYSOUT %SYSOUT;\n DCL PUTPARM * REPLACE;\n - LIBRARY GEM.%GEMLIB.SOURCE\n - PUT %GEMMOD,REP,PS,OUT=PRNTOUT\n EOF;\n PUT: DCL JQHGEM3 PROG NODYNAMS=1\n PRNTOUT WRITES PRNTOUT\n GEMPRJ READS %PRJCAT\n SYSIN READS PUTPARM\n SYSLIST WRITES GEMPRT\n SYSPRINT WRITES GEMPRT;\n RUN PUT;\n IF PUT >= 8 THEN DO;\n STOP 'PUT OF %GEMMOD FAILED';\n END;\n DISPLAY 'PUT OF %GEMMOD TO &&PRNT(%GEMMOD) COMPLETE';\n PRINT PRNTOUT CLASS=A;\n END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PANPLI": {"ttr": 13832, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x81\\x13?\\x00\\x81\\x13_\\x14\\x08\\x00$\\x00(\\x00$\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1981-05-13T00:00:00", "modifydate": "1981-05-15T14:08:00", "lines": 36, "newlines": 40, "modlines": 36, "user": "JOL"}, "text": "vtoc:  macro(%3330,%3340,%3350,%2305,%unit=f493,%date=,%format,%f,\n             %noformat,%nf,%dsname=,%dsn=);\n\n dcl %dd1,%dd2,%dd3,%dd4,%dd5,%dd6,%dd7,%dd8,\n     %work,%work2    init '';\n dcl %c1,%c2,%c3,%c4,%c5,%c6,%c7,%c8 init '';\n\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n  if %list(1) = ''   & %panels \u00ac= 'OFF'\n  then do;\n     list0001='';\n     list0002='';\n     list0003='';\n     list0004='';\n     list0005='';\n     comptyp  ='N';\n\n     panel       (hi ctr 'ListVtoc Command')\n                 (hi ctr '----------------')\n           ///////\n           ('      Enter 1st Volume to List  ==> ',list0001,\n                       6,'%list0001')\n           ('      Enter 2nd Volume to List  ==> ',list0002,\n                       6,'%list0002')\n           ('      Enter 3rd Volume to List  ==> ',list0003,\n                       6,'%list0003')\n           ('      Enter 4th Volume to List  ==> ',list0004,\n                       6,'%list0004')\n         / ('      Enter Particular Data Set ==> ',dsn,\n                       6,'%dsn')\n         / ('      Format Listing (Y or N)   ==> ',format,\n                       6,'%format')\n           helpline('Press F3 to Leave without Listing.');\nchkpan:\n           if %syspfk=3 then exit;\n           if %list(1) = ''\n           then do;\n           end;\n              panel reread from list0001 'Please Enter a Volume';\n              goto chkpan;\n           end;\n           if %format = 'Y' then %format='FORMAT';\n\n   end;\n\n        if %list(1) = '' then stop 'No volume to vtoc' ;\n        if %format\u00ac=''   | %f\u00ac='' then %format='FORMAT';\n        if %noformat\u00ac='' | %nf\u00ac='' then %nf='DUMP';\n\n        if %format\u00ac='' & %nf\u00ac=''\n        then do;\n            signal 2,'Both FORMAT and NOFORMAT Specified:- FORMAT used';\n            %nf='';\n        end;\n\n        %f='%format%nf';\n        if %dsname\u00ac='' & %dsn\u00ac=''\n        then do;\n            signal 2,'DSNAME and DSN keywords used:- DSN nullified';\n            %dsn='';\n        end;\n\n        %dsn='%dsname%dsn';\n        if %dsn\u00ac='' then %dsn='dsname=%dsn';\n        if %date\u00ac='' then %date='date=%date';\n  /* dsn,date,f have now been set up. now fix the control card\n        up a little */\n        if %f\u00ac='' then %work='%work,%f';\n        if %dsn\u00ac='' then %work='%work,%dsn';\n        if %date\u00ac=''then %work='%work,%date';\n        work2 = substr(work, 2);    /* DROP 1ST ',' */\n\n        IF %WORK2\u00ac='' THEN %WORK2='%WORK2,'; /* ADD A ',' FOR VOL*/\n        %WORK2='%WORK2'||'VOL=%UNIT=';\n        DCL %CNTL INIT ' LISTVTOC %WORK2';\n    if %list(1) \u00ac= '' then do ;\n       dcl dd1 ds unit %unit vol %list(1) nodsn ;\n       %dd1 = 'dd1 updates dd1';\n       %c1='%cntl%list(1)'  /* set up volume information */ ;\n    end ;\n    if %list(2) \u00ac= '' then do ;\n       dcl dd2 ds unit %unit vol %list(2) nodsn ;\n       %dd2 = 'dd2 updates dd2';\n       %c2='%cntl%list(2)'  /* set up volume information */ ;\n    end ;\n    if %list(3) \u00ac= '' then do ;\n       dcl dd3 ds unit %unit vol %list(3) nodsn ;\n       %dd3 = 'dd3 updates dd3';\n       %c3='%cntl%list(3)'  /* set up volume information */ ;\n    end ;\n    if %list(4) \u00ac= '' then do ;\n       dcl dd4 ds unit %unit vol %list(4) nodsn ;\n       %dd4 = 'dd4 updates dd4';\n       %c4='%cntl%list(4)'  /* set up volume information */ ;\n    end ;\n    if %list(5) \u00ac= '' then do ;\n       dcl dd5 ds unit %unit vol %list(5) nodsn ;\n       %dd5 = 'dd5 updates dd5';\n       %c5='%cntl%list(5)'  /* set up volume information */ ;\n    end ;\n    if %list(6) \u00ac= '' then do ;\n       dcl dd6 ds unit %unit vol %list(6) nodsn ;\n       %dd6 = 'dd6 updates dd6';\n       %c6='%cntl%list(6)'  /* set up volume information */ ;\n    end ;\n    if %list(7) \u00ac= '' then do ;\n       dcl dd7 ds unit %unit vol %list(7) nodsn ;\n       %dd7 = 'dd7 updates dd7';\n       %c7='%cntl%list(7)'  /* set up volume information */ ;\n    end ;\n    if %list(8) \u00ac= '' then do ;\n       dcl dd8 ds unit %unit vol %list(8) nodsn ;\n       %dd8 = 'dd8 updates dd8';\n       %c8='%cntl%list(8)'  /* set up volume information */ ;\n    end ;\nDCL CNTLDS * REPLACE;\n %C1\n %C2\n %C3\n %C4\n %C5\n %C6\n %C7\n %C8\nEOF;\n      DCL   SYSPRINT PRINTER BLOCKSIZE 1210 ;\n      DCL IEHLIST   PROG\n                    SYSPRINT WRITES SYSPRINT\n                    SYSIN READS CNTLDS\n                    %DD1 %DD2 %DD3 %DD4 %DD5 %DD6 %DD7 %DD8;\n %SYSLABEL: RUN IEHLIST;\n    END ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PGMLIST": {"ttr": 13834, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  LOAD:MACRO(TO,%INDEX=,%OFLOW=,%OLD);\n   IF %TO \u00ac= 2 THEN STOP ' TOO MANY ''FROM'' DSIDS';\n      DCL   PRINTFIL PRINTER NODCB ;\n      DCL   %TYPE   INIT ' WRITES ';\n   IF %OLD    \u00ac= '' THEN %TYPE  = ' REWRITES ';\n   IF %INDEX \u00ac= '' THEN %INDEX = '  %INDEX ||';\n   IF %OFLOW \u00ac= '' THEN %OFLOW = ' || %OFLOW ';\n IEBISAM: DCL IEBISAM PROG\n     SYSPRINT  WRITES PRINTFIL\n     SYSUT1    READS  %LIST(1)\n     SYSUT2    %TYPE %INDEX  %LIST(3) %OFLOW;\n     RUN IEBISAM PARM 'LOAD' ;\n  END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PLI": {"ttr": 13836, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "LOADGO: MACRO ( /* JOL LOADGO MACRO  */\n  %AUTOLIB=,\n  %NOPANEL,                   /* IF PANELS NOT REQUIRED              */\n  %COMP,\n  %CONC=,\n  %DYNAMIC,%DYNAM,%NODYNAM,\n  %ENTRY=,                   /* ENTRY POINT                          */\n  %INCLUDE=,                 /* AN INCLUDE LIBRARY MAY BE SPECIFIED  */\n  %LET, %NOLET,              /* LET OPTION                           */\n  %LIKE=,                    /* TO DEFINE A DCL PROG 'LIKE' DECLARE  */\n  %LIST, %NOLIST,            /* LIST OPTION                          */\n  %MAP, %NOMAP,              /* MAP OPTION                           */\n  %MEMBERS=,                 /* INCLUDE LIBRARY MEMBERS              */\n  %NAME=,                    /* AND A NAME GENERATOR                 */\n  %NCAL,%NONCAL,%CALL,       /* NO-CALL OPTION                       */\n  /* DEFINE POSSIBLE STANDARD AUTO CALL LIBRARIES */\n  %PLILIB,%PLICMIX,%PLIBASE,%FORTLIB,%COBLIB,\n  %PRINT,%NOPRINT,           /* LIST OPTION                          */\n  %RES,%NORES,               /*                                      */\n  %SYSOUT=,                  /* DEFAULT TO X FOR TSO OR A FOR BATCH  */\n  %PARM=) ;\nIF %SYSOUT = '' THEN DO;\n      IF %TSOCLASS = '' THEN %SYSOUT = A;\n      ELSE %SYSOUT = %TSOCLASS;\nEND;\n\nIF %PARM = '' THEN DO ;\n      IF %DYNAMIC \u00ac= '' THEN %PARM = '%PARM,DYNAMIC';\n      IF %LIST    \u00ac= '' THEN %PARM = '%PARM,LIST' ;\n      IF %MAP     \u00ac= '' THEN %PARM = '%PARM,MAP' ;\n      IF %LET     \u00ac= '' THEN %PARM = '%PARM,LET' ;\n      IF %NCAL    \u00ac= '' THEN %PARM = '%PARM,NCAL' ;\nEND;\n  DCL %INP INIT '';\n  IF %LIST(1) \u00ac= '' THEN %INP = '%LIST(1)';\n  IF %INP = 'OBJ' THEN %INP = '&&OBJ';\nDCL %@@@X INIT '';\nDCL %@@@L INIT '';\nIF %INP \u00ac= '' THEN DO;\n   %@@@X = INDEX(INP,'(');\n   IF %@@@X \u00ac= 0 THEN DO;\n      %NAME = SUBSTR(INP,%@@@X);\n      %NAME = SUBSTR(NAME,2);\n      %@@@L = LENGTH(NAME);\n      %@@@L = %@@@L - 1;\n      %NAME = SUBSTR(NAME,1,%@@@L);\n      %@@@X = '';\n   END;\nEND;\n\nDCL %AUTO INIT 1;\nIF %COBLIB='' & %PLIBASE='' & %PLILIB='' & %FORTLIB='' & %PLIMIX=''\n    THEN %AUTO = '';\nIF %NOPANEL = ''& %AUTO = '' THEN\nPANEL     ('               JOL LOADER COMMAND')\n  ////('WHAT AUTOCALL LIBRARY(S) DO YOU WISH TO USE?')\n    //('PLIBASE *** Y/N ***',PLIBASE,1,'N')\n      ('COBLIB  *** Y/N ***',COBLIB,1,'N')\n      ('FORTLIB *** Y/N ***',FORTLIB,1,'N')\n      ('PLILIB  *** Y/N ***',PLILIB,1,'N')\n      ('PLIMIX  *** Y/N ***',PLIMIX,1,'N')\n/////('*********************************************************');\nIF %NOPANEL = '' THEN\nPANEL ('                    JOL LOADER COMMAND')\n      ('         ANY HIGHLIGHTED FIELD CAN BE CHANGED')\n      ('        ALL DATA SETS MUST BE FULLY QUALIFIED')\n      ('IF MULTIPLE DATA SETS, DSIDS OR A MIXTURE OF BOTH ARE USED')\n      ('     ******* USE || BETWEEN THEM *******')\n//('INPUT DATA SET ==========================>',INP,100,'%INP')\n('PROGRAM NAME ============================>',NAME,8,'%NAME')\n('ENTRY POINT =============================>',ENTRY,8,'%ENTRY')\n('OTHER AUTOCALL LIBRARY(S) ===============>',LIB,100,'%LIB')\n('SYSOUT CLASS ============================>',SYSOUT,1,'%SYSOUT')\n('INCLUDE LIBRARY(S) ======================>',INCLUDE,100,'%INCLUDE')\n('INCLUDE MODULES '','' BETWEEN MULTIPLES =>',MEMBERS,99,'%MEMBERS')\n('LINKAGE PARAMETERS FOR THIS RUN =========>',PARM,100,'%PARM');\n/********************************************************************/\n/* NOW FIX UP ANY AUTO CALL LIBRARIES. AS ONE CAN MIX ALL LANGUAGES */\n/* WE WILL ALLOW ALL THE AUTOCALL LIBRARIES TO BE SPECIFIED. THEN   */\n/* WE WILL CONCATENATE THEM IF REQUIRED.                            */\n/********************************************************************/\nIF %INP = '&&OBJ' THEN %INP = 'OBJ';\nIF %PL1LIB\u00ac='' & %PL1LIB\u00ac='N' THEN %AUTOLIB='%AUTOLIB SYS1.PL1LIB||';\nIF %PLILIB\u00ac='' & %PLILIB\u00ac='N' THEN %AUTOLIB='%AUTOLIB SYS1.PLILIB||' ;\nIF %PLIBASE\u00ac='' & %PLIBASE\u00ac='N' THEN %AUTOLIB='%AUTOLIB SYS1.PLIBASE||';\nIF %PLICMIX\u00ac='' & %PLIMIX\u00ac='N' THEN %AUTOLIB='%AUTOLIB SYS1.PLICMIX||';\nIF %FORTLIB\u00ac='' & %FORTLIB\u00ac='N' THEN %AUTOLIB='%AUTOLIB SYS1.FORTLIB||';\nIF %COBLIB\u00ac='' & %COBLIB\u00ac='N' THEN %AUTOLIB='%AUTOLIB SYS1.COBLIB||' ;\nIF %LIB\u00ac='' THEN %AUTOLIB='%AUTOLIB %LIB||' ;\nIF %AUTOLIB \u00ac= ''\nTHEN DO;\n       %AUTOLIB = 'SYSLIB READS %AUTOLIB' ;\n       %ZZ=LEN(AUTOLIB); %ZY=%ZY-2; %ZX=SUBSTR(AUTOLIB,%ZY);\n       IF %ZX='||' THEN %AUTOLIB=SUBSTR(AUTOLIB,1,%ZY);\n       WRITE 'AUTOLIB=%AUTOLIB';\nEND;\n/********************************************************************/\n/* OK NOW FIX THE INPUTS TO THE LOADER, AND THERE COULD BE          */\n/* QUITE A FEW OF THEM AND SO THIS WILL TAKE SOME ANALYSING         */\n/* FIRST THE PRIMARY INPUTS.                                        */\n/********************************************************************/\nIF %INP = '' THEN /* ANY INPUT */\nDO ;\n      STOP 'NO INPUTS SPECIFIED FOR LOADGO' ;\nEND;\n/********************************************************************/\n/* WE MAY HAVE TO GENERATE SOME CONTROL PARAMETERS FOR INPUT.       */\n/********************************************************************/\nDCL %LKEDENT INIT '';\nDCL %LKEDINCL INIT '';\nDCL %INCLCARD INIT '';\nDCL %LKEDNAME INIT '';\nDCL %LKEDIN INIT '';\nIF %INP \u00ac= '' THEN DO;\n   %LKEDIN = '%INP';\n   %CONC = '||';\n   END;\nELSE %CONC = '';\nIF %MEMBERS \u00ac= '' THEN\nDO ;\n   IF %INCLUDE \u00ac= '' THEN %LKEDINCL = ' INCLIB READS %INCLUDE' ;\n   IF %INCLUDE = '' THEN          /* RELINK OLD MEMBER FROM LIBRARY */\n      %LKEDINCL = 'INCLIB READS %LOAD' ;\n\n   %INCLCARD = ' INCLUDE INCLIB(%MEMBERS)' ;\nEND ;\n/********************************************************************/\n/* NOW WE MAY STILL HAVE SOME CONTROL PARMS TO GENERATE             */\n/********************************************************************/\nIF %ENTRY \u00ac= '' THEN %LKEDENT = ',ENTRY=%ENTRY';\nIF %NAME \u00ac= '' THEN %LKEDNAME = ',NAME=%NAME' ;\nIF %NAME = '' THEN %LKEDNAME = ',NAME=TEMPNAME';\n/********************************************************************/\n/* NOW FINAL BIT OF LINK EDITOR PRIMARY INPUT PROCESSING            */\n/********************************************************************/\nIF %LKEDNAME \u00ac= '' THEN %NOPANEL = 1;\nIF %INCLCARD \u00ac= '' THEN %NOPANEL = 1;\nIF %LKEDENT \u00ac= '' THEN %NOPANEL = 1;\nIF %NOPANEL = 1 THEN\n        %LKEDIN = '%LKEDIN %CONC LINKCNTL' ;\nIF %NOPANEL = 1\n  THEN DCL LINKCNTL * REPLACE ;\n%INCLCARD\n%LKEDENT\n%LKEDNAME\nEOF;\nIF %LKEDIN = '' THEN STOP 'NO LINKAGE EDITOR INPUT SPECIFIED' ;\nELSE %LKEDIN = 'SYSLIN READS %LKEDIN' ;\n/********************************************************************/\n/* NOW FINALLY LETS SET UP THE PROGRAM DECLARE AND WORK FILES       */\n/* AND RUN THE LINKAGE EDITOR PROGRAM.                              */\n/********************************************************************/\nDCL PRINTER SYSOUT %SYSOUT   FBA 121,1210 1,2 TRKS ;\nDCL LOADER PROG SYSPRINT WRITES PRINTER\n              %AUTOLIB       /* OPTIONAL INPUTS */\n              %LKEDINCL         /*  INCLUDE LIBRARY*/\n              %LKEDIN ;        /* INPUTS  */\n/********************************************************************/\nRUN LOADER PARM '%PARM' ;\nIF %COMP \u00ac= '' & %INP = 'OBJ' THEN DELETE OBJ;\nEND/* OF LOADGO */  ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PREPARE": {"ttr": 14085, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x00\\x00\\x00\\x00\\x87$o\\x00\\x87$o\\x16\"\\x00M\\x00M\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "04.00", "flags": 0, "createdate": "1987-09-03T00:00:00", "modifydate": "1987-09-03T16:22:00", "lines": 77, "newlines": 77, "modlines": 0, "user": "JOL"}, "text": " RESTORE:MACRO(%FROMUNIT=TAPE,%TOUNIT=DISK,%TO=,%GEN=);\n         DCL %RESTR1,%RESTR2,%RESTR3,%RESTR4,%RESTR5,%RESTR6,\n             %DDS            INIT '';\n         DCL %BACKDSN INIT 'JOL.BACKUP.OF';\n         DCL %DD1,%DD2,%DD3,%DD4,%DD5,%DD6 INIT '';\n /* THIS MACRO CAN BE USED IN TWO WAYS:-\n         1.  RESTORE VOL1 VOL2 VOL3\n   OR    2.  RESTORE VOL1 TO VOL2 (COPYNAME) (PURGE)\n\n         LETS SEE WHICH TYPE OF RESTORE HE IS DOING  */\n          IF %GEN = '' THEN %GEN='(0)';\n         IF %TO \u00ac=''\n         THEN DO;            /* HE IS RESTORING TO A SPECIFIC VOL */\n             %DDS=' IN01 READS IN01 OUT01 WRITES OUT01';\n             DCL IN01 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(1) %GEN;\n             DCL OUT01 DS UNIT %TOUNIT VOL=%TO NODSN NODEF;\n             %RESTR1=' RESTORE TODD=OUT01,FROMDD=IN01';\n             IF %LIST(2)='COPYNAME' | %LIST(3)='COPYNAME'\n             THEN %RESTR1='%RESTR1,CPYVOLID=YES';\n\n             IF %LIST(2)='PURGE' | %LIST(3)='PURGE'\n             THEN %RESTR1='%RESTR1,PURGE=YES';\n         END;\n         /*ELSE DO*/\n         IF %TO=''           /* THIS IS A RESTORE OF VOL LIST */\n         THEN DO;\n             IF %LIST(1) THEN DO;\n                 %RESTR1=' RESTORE FROMDD=IN01,TODD=OUT01';\n                 DCL IN01 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(1) %GEN;\n                 DCL OUT01 DS UNIT %TOUNIT VOL %LIST(1) NODSN NODEF;\n                 %DD1=' DDIN01 READS IN01 DDOUT01 WRITES OUT01 ';\n             END;\n             IF %LIST(2) THEN DO;\n                 %RESTR2=' RESTORE FROMDD=IN02,TODD=OUT02';\n                 DCL IN02 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(2) %GEN;\n                 DCL OUT02 DS UNIT %TOUNIT VOL %LIST(2) NODSN NODEF;\n                 %DD2=' DDIN02 READS IN02 DDOUT02 WRITES OUT02 ';\n             END;\n             IF %LIST(3) THEN DO;\n                 %RESTR3=' RESTORE FROMDD=IN03,TODD=OUT03';\n                 DCL IN03 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(3) %GEN;\n                 DCL OUT03 DS UNIT %TOUNIT VOL %LIST(3) NODSN NODEF;\n                 %DD3=' DDIN03 READS IN03 DDOUT03 WRITES OUT03 ';\n             END;\n             IF %LIST(4) THEN DO;\n                 %RESTR4=' RESTORE FROMDD=IN04,TODD=OUT04';\n                 DCL IN04 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(4) %GEN;\n                 DCL OUT04 DS UNIT %TOUNIT VOL %LIST(4) NODSN NODEF;\n                 %DD4=' DDIN04 READS IN04 DDOUT04 WRITES OUT04 ';\n             END;\n             IF %LIST(5) THEN DO;\n                 %RESTR5=' RESTORE FROMDD=IN05,TODD=OUT05';\n                 DCL IN05 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(5) %GEN;\n                 DCL OUT05 DS UNIT %TOUNIT VOL %LIST(5) NODSN NODEF;\n                 %DD5=' DDIN05 READS IN05 DDOUT05 WRITES OUT05 ';\n             END;\n             IF %LIST(6) THEN DO;\n                 %RESTR6=' RESTORE FROMDD=IN06,TODD=OUT06';\n                 DCL IN06 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(6) %GEN;\n                 DCL OUT06 DS UNIT %TOUNIT VOL %LIST(6) NODSN NODEF;\n                 %DD6=' DDIN06 READS IN06 DDOUT06 WRITES OUT06 ';\n             END;\n         END;\n         DCL PRINTER PRINTER FBM 1210,121;\n         DCL CONTROL * REPLACE;\n %RESTR1\n %RESTR2\n %RESTR3\n %RESTR4\n %RESTR5\n %RESTR6\nEOF;\n         DCL IEHDASDR PROG\n             SYSPRINT WRITES PRINTER\n             SYSIN READS CONTROL\n             %DDS %DD1 %DD2 %DD3 %DD4 %DD5 %DD6;\n%SYSLABEL:   RUN IEHDASDR;\n             IF LASTCC\u00ac=0 THEN\n         SIGNAL ERROR 3,'RESTORE FAILED';\n         END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRINT": {"ttr": 14088, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " RESTORE:MACRO(%FROMUNIT=TAPE,%TOUNIT=DISK,%TO=,%GEN=);\n         DCL %RESTR1,%RESTR2,%RESTR3,%RESTR4,%RESTR5,%RESTR6,\n             %DDS            INIT '';\n         DCL %BACKDSN INIT 'JOL.BACKUP.OF';\n         DCL %DD1,%DD2,%DD3,%DD4,%DD5,%DD6 INIT '';\n /* THIS MACRO CAN BE USED IN TWO WAYS:-\n         1.  RESTORE VOL1 VOL2 VOL3\n   OR    2.  RESTORE VOL1 TO VOL2 (COPYNAME) (PURGE)\n\n         LETS SEE WHICH TYPE OF RESTORE HE IS DOING  */\n          IF %GEN = '' THEN %GEN='(0)';\n         IF %TO \u00ac=''\n         THEN DO;            /* HE IS RESTORING TO A SPECIFIC VOL */\n             %DDS=' IN01 READS IN01 OUT01 WRITES OUT01';\n             DCL IN01 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(1) %GEN;\n             DCL OUT01 DS UNIT %TOUNIT VOL=%TO NODSN NODEF;\n             %RESTR1=' RESTORE TODD=OUT01,FROMDD=IN01';\n             IF %LIST(2)='COPYNAME' | %LIST(3)='COPYNAME'\n             THEN %RESTR1='%RESTR1,CPYVOLID=YES';\n\n             IF %LIST(2)='PURGE' | %LIST(3)='PURGE'\n             THEN %RESTR1='%RESTR1,PURGE=YES';\n         END;\n         /*ELSE DO*/\n         IF %TO=''           /* THIS IS A RESTORE OF VOL LIST */\n         THEN DO;\n             IF %LIST(1) THEN DO;\n                 %RESTR1=' RESTORE FROMDD=IN01,TODD=OUT01';\n                 DCL IN01 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(1) %GEN;\n                 DCL OUT01 DS UNIT %TOUNIT VOL %LIST(1) NODSN NODEF;\n                 %DD1=' DDIN01 READS IN01 DDOUT01 WRITES OUT01 ';\n             END;\n             IF %LIST(2) THEN DO;\n                 %RESTR2=' RESTORE FROMDD=IN02,TODD=OUT02';\n                 DCL IN02 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(2) %GEN;\n                 DCL OUT02 DS UNIT %TOUNIT VOL %LIST(2) NODSN NODEF;\n                 %DD2=' DDIN02 READS IN02 DDOUT02 WRITES OUT02 ';\n             END;\n             IF %LIST(3) THEN DO;\n                 %RESTR3=' RESTORE FROMDD=IN03,TODD=OUT03';\n                 DCL IN03 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(3) %GEN;\n                 DCL OUT03 DS UNIT %TOUNIT VOL %LIST(3) NODSN NODEF;\n                 %DD3=' DDIN03 READS IN03 DDOUT03 WRITES OUT03 ';\n             END;\n             IF %LIST(4) THEN DO;\n                 %RESTR4=' RESTORE FROMDD=IN04,TODD=OUT04';\n                 DCL IN04 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(4) %GEN;\n                 DCL OUT04 DS UNIT %TOUNIT VOL %LIST(4) NODSN NODEF;\n                 %DD4=' DDIN04 READS IN04 DDOUT04 WRITES OUT04 ';\n             END;\n             IF %LIST(5) THEN DO;\n                 %RESTR5=' RESTORE FROMDD=IN05,TODD=OUT05';\n                 DCL IN05 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(5) %GEN;\n                 DCL OUT05 DS UNIT %TOUNIT VOL %LIST(5) NODSN NODEF;\n                 %DD5=' DDIN05 READS IN05 DDOUT05 WRITES OUT05 ';\n             END;\n             IF %LIST(6) THEN DO;\n                 %RESTR6=' RESTORE FROMDD=IN06,TODD=OUT06';\n                 DCL IN06 DS UNIT %FROMUNIT DSN %BACKDSN%LIST(6) %GEN;\n                 DCL OUT06 DS UNIT %TOUNIT VOL %LIST(6) NODSN NODEF;\n                 %DD6=' DDIN06 READS IN06 DDOUT06 WRITES OUT06 ';\n             END;\n         END;\n         DCL PRINTER PRINTER FBM 1210,121;\n         DCL CONTROL * REPLACE;\n %RESTR1\n %RESTR2\n %RESTR3\n %RESTR4\n %RESTR5\n %RESTR6\nEOF;\n         DCL IEHDASDR PROG\n             SYSPRINT WRITES PRINTER\n             SYSIN READS CONTROL\n             %DDS %DD1 %DD2 %DD3 %DD4 %DD5 %DD6;\n%SYSLABEL:   RUN IEHDASDR;\n             IF LASTCC\u00ac=0 THEN\n         SIGNAL ERROR 3,'RESTORE FAILED';\n         END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRINTO": {"ttr": 14091, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x81\\x13\\x9f\\x00\\x81\\x13\\x9f\\x18\\x07\\x00+\\x00+\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1981-05-19T00:00:00", "modifydate": "1981-05-19T18:07:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "JOL"}, "text": "Logon:MACRO;\n   /* For PC Version of Jol Only*/\n\n panel blue box\n ///   (ctr 'Please Enter your UserID and PassWord to')\n       (ctr 'Start the Jol Processor.')\n  /    (ctr 'When all the details are correct')\n       (ctr 'Press the ENTER or RETURN key.')\n  lm 20\n    ///('    UserId   ===>',Sysuid,8,'%SYSUID')\n       ('    Password ===>',Syspassw,8,'')\nhelpline ('F3 Exits to Dos');\n\n      if %syspfk = 3 then exit quit;\n\n      jolopt user(%sysuid);\n      cd$ '\\jol\\%sysuid';\n      if %lastcc \u00ac=0\n      then do;\n        panel box /////( flash ctr 'Cannot find Sub Directory %sysuid')\n        //\n        (ctr 'Pressing Enter Makes Sub-Director \\jol\\%sysuid')\n        helpline ('F3 Exits without Creating Subdirectory');\n        if %syspfk=3 then exit;\n        md$ '\\jol\\%sysuid';\n        cd$ '\\jol\\%sysuid';\n      end;\n\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PRINTPDS": {"ttr": 14093, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "   MAIN : MACRO(%SYSTEM=,%TYPE=ANY,%LINES=,%CARDS=,%HOLD=,%SETUP=,\n          %CLASS=,%FAILURE=,%JOBSTEP=,%NJPCLASS=,%HOTJOB=,%JPRTY=,\n          %ACMAIN=,%ACHOLD=,%IORATE=,%ORG=,%DEADLINE=,%FETCH=,\n          %WARNING,%CANCEL,%DUMP);\n /*IF %SPOOL \u00ac= 'ASP' THEN SIGNAL\n      2,'//*MAIN CARD GENERATED FOR %SPOOL' ; */\n   DCL %OPTION  INIT 'TYPE=%TYPE';\n   DCL %CANCTYP INIT '';\n   IF %WARNING \u00ac='' THEN %CANCTYP=',W';\n   IF %CANCEL  \u00ac='' THEN %CANCTYP=',C';\n   IF %DUMP    \u00ac='' THEN %CANCTYP=',D';\n   IF %CARDS    \u00ac= '' THEN %OPTION = '%OPTION,CARDS=%CARDS%CANCTYP' ;\n   IF %LINES    \u00ac= '' THEN %OPTION = '%OPTION,LINES=%LINES%CANCTYP' ;\n   IF %CLASS    \u00ac= '' THEN %OPTION = '%OPTION,CLASS=%CLASS%CANCTYP' ;\n   IF %SYSTEM   \u00ac= '' THEN %OPTION = '%OPTION,SYSTEM=%SYSTEM' ;\n   IF %SETUP    \u00ac= '' THEN %OPTION = '%OPTION,SETUP=%SETUP' ;\n   IF %HOLD     \u00ac= '' THEN %OPTION = '%OPTION,HOLD=%HOLD' ;\n   IF %FAILURE  \u00ac= '' THEN %OPTION = '%OPTION,FAILURE=%FAILURE' ;\n   IF %JOBSTEP  \u00ac= '' THEN %OPTION = '%OPTION,JOBSTEP=%JOBSTEP' ;\n   IF %NJPCLASS \u00ac= '' THEN %OPTION = '%OPTION,NJPCLASS=%NJPCLASS' ;\n   IF %HOTJOB   \u00ac= '' THEN %OPTION = '%OPTION,HOTJOB=%HOTJOB' ;\n   IF %ACMAIN   \u00ac= '' THEN %OPTION = '%OPTION,ACMAIN=%ACMAIN' ;\n   IF %ACHOLD   \u00ac= '' THEN %OPTION = '%OPTION,ACHOLD=%ACHOLD' ;\n   IF %IORATE   \u00ac= '' THEN %OPTION = '%OPTION,IORATE=%IORATE' ;\n   IF %ORG      \u00ac= '' THEN %OPTION = '%OPTION,ORG=%ORG' ;\n   IF %DEADLINE \u00ac= '' THEN %OPTION = '%OPTION,DEADLINE=%DEADLINE' ;\n   IF %FETCH    \u00ac= '' THEN %OPTION = '%OPTION,FETCH=%FETCH' ;\n   IF %JPRTY    \u00ac= '' THEN %OPTION = '%OPTION,JPRTY=%JPRTY' ;\n   OPCNTL '//*MAIN %OPTION' AFTER JOBCARD ;\n   END ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PROTECT": {"ttr": 14338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x83\\x10/\\x00\\x83\\x10?\\x16P\\x00^\\x00\\x7f\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1983-04-12T00:00:00", "modifydate": "1983-04-13T16:50:00", "lines": 94, "newlines": 127, "modlines": 0, "user": "JOL"}, "text": " MAKEUPD: MACRO;\n $JOB;/* CREATE JOBCARD */\n     PANEL ('PLEASE ENTER THE NAME OF THE TAPE TO BE USED >>> JUPD',\n           TAPENO,2);\n %TAPENO='JUPD'||%TAPENO;\n INITT %TAPENO;\n /*************************************************************/\n /* THIS MACRO IS USED TO CREATE THE JOLUPD TAPE             **/\n /*************************************************************/\n /* SET UP SYMBOLICS FOR USER DATASET NAMES                  **/\n /*************************************************************/\n DCL %D1,%D2,%D3,%D4,%D5,%D6,%D7,%D8,%D9,%D10 INIT '';\n DCL %D11,%D12,%D13,%D14,%D15,%D16,%D17,%D18,%D19,%D20 INIT '';\n DCL %D21,%D22,%D23,%D24,%D25,%D26,%D27,%D28,%D29,%D30 INIT '';\n DCL %D31,%D32,%D33,%D34,%D35,%D36,%D37,%D38,%D39,%D40 INIT '';\n DCL %D41,%D42,%D43,%D44,%D45,%D46,%D47,%D48,%D49,%D50 INIT '';\n DCL %T1,%T2,%T3,%T4,%T5,%T6,%T7,%T8         INIT '';\n DCL %T9,%T10,%T11,%T12,%T13,%T14,%T15,%T16  INIT '';\n DCL %T17,%T18,%T19,%T20,%T21,%T22,%T23,%T24 INIT '';\n DCL %T25,%T26,%T27,%T28,%T29,%T30,%T31,%T32 INIT '';\n DCL %T33,%T34,%T35,%T36,%T37,%T38,%T39,%T40 INIT '';\n DCL %T41,%T42,%T43,%T44,%T45,%T46,%T47,%T48 INIT '';\n DCL %T49,%T50,%T51,%DD                      INIT '';\n DCL %TEXT1,%TEXT2,%TEXT3,%TEXT4,%TEXT5,%TEXT6,%TEXT7,%TEXT8  INIT '';\n DCL %TEXT9,%TEXT10,%TEXT11,%TEXT12,%TEXT13,%TEXT14,%TEXT15   INIT '';\n DCL %TEXT16,%TEXT17,%TEXT18,%TEXT19,%TEXT20,%TEXT21,%TEXT22  INIT '';\n DCL %TEXT23,%TEXT24,%TEXT25,%TEXT26,%TEXT27,%TEXT28,%TEXT29  INIT '';\n DCL %TEXT30,%TEXT31,%TEXT32,%TEXT33,%TEXT34,%TEXT35,%TEXT36  INIT '';\n DCL %TEXT37,%TEXT38,%TEXT39,%TEXT40,%TEXT41,%TEXT42,%TEXT43  INIT '';\n DCL %TEXT44,%TEXT45,%TEXT46,%TEXT47,%TEXT48,%TEXT49,%TEXT50  INIT '';\n DCL %NP1,%NP2,%NP3,%NP4,%DTE,%DUMY                           INIT '';\n %DTE='%DAY %DAYNO %MONTH %YEAR';\n DCL %MEM1A INIT '';\n DCL %MEM2A INIT '';\n DCL %MEM3A INIT '';\n DCL %MEM4A INIT '';\n DCL %MEM5A INIT '';\n DCL %MEM6A INIT '';\n DCL %MEM7A INIT '';\n DCL %MEM8A INIT '';\n DCL %MEM1B INIT '';\n DCL %MEM2B INIT '';\n DCL %MEM3B INIT '';\n DCL %MEM4B INIT '';\n DCL %MEM5B INIT '';\n DCL %MEM6B INIT '';\n DCL %MEM7B INIT '';\n DCL %MEM8B INIT '';\n DCL %INST INIT '';\n DCL %LOD INIT '';\n DCL %CMD INIT '';\n DCL %INC INIT '';\n DCL %SOR INIT '';\n DCL %MAC INIT '';\n DCL %PTF INIT '';\n DCL %UCM INIT '';\n %INSTALL='CLARKE.UPD.INSTALL';\n %LOAD='CLARKE.UPD.LOAD'      ;\n %CMDLIB='CLARKE.UPD.CMDLIB'  ;\n %INCLUDE='CLARKE.UPD.INCLUDE';\n %SOURCE='CLARKE.UPD.SOURCE'  ;\n %MACLIB='CLARKE.UPD.MACLIB'  ;\n %PTFS='CLARKE.UPD.PTFS'      ;\n %UCMDLIB='CLARKE.UPD.UCMDLIB'  ;\n %AINSTALL='';\n %ALOAD='';\n %ACMDLIB='';\n %AINCLUDE='';\n %ASOURCE='';\n %AMACLIB='';\n %APTFS='';\n %AUCMDLIB='';\n %TEXT='';\n  PANEL ('  ********  JOL UPDATE PROCEDURE *******')\n        ('  THE FOLLOWING DATASETS WILL BE COPIED  ')\n        ('  TO TAPE- JOLUPD - FOR DISTRIBUTION .   ')\n       /('  INSTALL LIBRARY  ==>',AINSTALL,44,'%INSTALL')\n        ('  LOAD    LIBRARY  ==>',ALOAD,44,'%LOAD')\n        ('  COMMAND LIBRARY  ==>',ACMDLIB,44,'%CMDLIB')\n        ('  INCLUDE LIBRARY  ==>',AINCLUDE,44,'%INCLUDE')\n        ('  SOURCE  LIBRARY  ==>',ASOURCE,44,'%SOURCE')\n        ('  MACRO   LIBRARY  ==>',AMACLIB,44,'%MACLIB')\n        ('  PTFS    LIBRARY  ==>',APTFS,44,'%PTFS')\n        ('  USER CMD LIBRARY ==>',AUCMDLIB,44,'%UCMDLIB');\n DCL LOADIN   DS %LOAD     ;\n DCL SORCIN   DS %SOURCE   ;\n DCL CMDIN    DS %CMDLIB   ;\n DCL UCMDIN   DS %UCMDLIB  ;\n DCL INSTIN   DS %INSTALL  ;\n DCL INCLIN   DS %INCLUDE  ;\n DCL MACIN    DS %MACLIB   ;\n DCL PTFSIN   DS %PTFS     ;\n /*DCL LISTIN   DS CLARKE.JOL40.PRINT;*/\n DCL INSTOUT  DS JOL.INSTALL TAPE VOL %TAPENO   LABEL 1     ;\n DCL LOADOUT  DS JOL.LOAD TAPE    VOL %TAPENO   LABEL 2     ;\n DCL CMDOUT   DS JOL.CMDLIB TAPE  VOL %TAPENO   LABEL 3     ;\n DCL INCLOUT  DS JOL.INCLUDE TAPE VOL %TAPENO   LABEL 4     ;\n DCL SORCOUT  DS JOL.SOURCE TAPE  VOL %TAPENO   LABEL 5     ;\n DCL MACOUT   DS JOL.MACLIB TAPE  VOL %TAPENO   LABEL 6     ;\n DCL PTFSOUT  DS JOL.PTFS TAPE    VOL %TAPENO   LABEL 7     ;\n DCL UCMDOUT  DS JOL.USER.CMDLIB TAPE VOL %TAPENO  LABEL 8  ;\n /*DCL LISTOUT  DS JOL.PRINT TAPE   VOL %TAPENO   LABEL 9     ; */\n  PANEL ('  ********  JOL UPDATE PROCEDURE *******')\n       /(' DO YOU WANT TO UPDATE STATUS ')\n        (' REMEMBER--IF YOU DO YOU WILL ')\n        (' OVERRIDE THE INFORMATION THAT')\n        (' THAT MAY ALREADY BE THERE    ')\n       /(' ANSWER (Y/N)',DD,1,'N');\n  IF %DD='Y' THEN DO;\n  PANEL ('  ********  JOL UPDATE PROCEDURE *******')\n       /('  FILL IN THE FOLLOWING INFORMATION      ')\n        ('  ---------------------------------      ')\n/('  DATE OF UPDATE         ==>',UPDTE,50,'%DTE')\n ('  JOL RELEASE            ==>',REL,6);\n  PANEL ('  ********  JOL UPDATE PROCEDURE *******')\n ('INSTALL MEMBERS ==>',MEM1A,55,'%MEM1A')\n ('                ==>',MEM1B,55,'%MEM1B')\n ('LOAD    MEMBERS ==>',MEM2A,55,'%MEM2A')\n ('                ==>',MEM2B,55,'%MEM2B')\n ('CMDLIB  MEMBERS ==>',MEM3A,55,'%MEM3A')\n ('                ==>',MEM3B,55,'%MEM3B')\n ('INCLUDE MEMBERS ==>',MEM4A,55,'%MEM4A')\n ('                ==>',MEM4B,55,'%MEM4B')\n ('SOURCE  MEMBERS ==>',MEM5A,55,'%MEM5A')\n ('                ==>',MEM5B,55,'%MEM5B')\n ('MACLIB  MEMBERS ==>',MEM6A,55,'%MEM6A')\n ('                ==>',MEM6B,55,'%MEM6B')\n ('PTFS    MEMBERS ==>',MEM7A,55,'%MEM7A')\n ('                ==>',MEM7B,55,'%MEM7B')\n ('UCMDLIB MEMBERS ==>',MEM8A,55,'%MEM8A')\n ('                ==>',MEM8B,55,'%MEM8B');\n PANEL (' ********* JOL UPDATE PROCEDURE ***********')\n       (' A BRIEF DESCRIPTION OF THE UPDATES SUPPLIED')\n       (' ON THIS TAPE.')\n       ('%T1',TEXT1,50)\n       ('%T2',TEXT2,50)\n       ('%T3',TEXT3,50)\n       ('%T4',TEXT4,50)\n       ('%T5',TEXT5,50)\n       ('%T6',TEXT6,50)\n       ('%T7',TEXT7,50)\n       ('%T8',TEXT8,50)\n       ('%T9',TEXT9,50)\n       ('%T10',TEXT10,40)\n       ('NEXT PAGE (Y/N) ==>',NP1,1,'N');\n IF %NP1='Y' THEN DO;\n PANEL (' ********* JOL UPDATE PROCEDURE ***********')\n       (' DESCRIPTION (CONT) ')\n       ('%T11',TEXT11,50)\n       ('%T12',TEXT12,50)\n       ('%T13',TEXT13,50)\n       ('%T14',TEXT14,50)\n       ('%T15',TEXT15,50)\n       ('%T16',TEXT16,50)\n       ('%T17',TEXT17,50)\n       ('%T18',TEXT18,50)\n       ('%T19',TEXT19,50)\n       ('%T20',TEXT20,50)\n       ('NEXT PAGE (Y/N) ==>',NP2,1,'N');\n END;\n IF %NP2='Y' THEN DO;\n PANEL (' ********* JOL UPDATE PROCEDURE ***********')\n      /(' DESCRIPTION (CONT) ')\n       ('%T21',TEXT21,50)\n       ('%T22',TEXT22,50)\n       ('%T23',TEXT23,50)\n       ('%T24',TEXT24,50)\n       ('%T25',TEXT25,50)\n       ('%T26',TEXT26,50)\n       ('%T27',TEXT27,50)\n       ('%T28',TEXT28,50)\n       ('%T29',TEXT29,50)\n       ('%T30',TEXT30,50)\n       ('NEXT PAGE (Y/N) ==>',NP3,1,'N');\n  END;\n IF %NP3='Y' THEN DO;\n PANEL (' ********* JOL UPDATE PROCEDURE ***********')\n      /(' DESCRIPTION (CONT) ')\n       ('%T31',TEXT31,50)\n       ('%T32',TEXT32,50)\n       ('%T33',TEXT33,50)\n       ('%T34',TEXT34,50)\n       ('%T35',TEXT35,50)\n       ('%T36',TEXT36,50)\n       ('%T37',TEXT37,50)\n       ('%T38',TEXT38,50)\n       ('%T39',TEXT39,50)\n       ('%T40',TEXT40,50)\n       ('NEXT PAGE (Y/N) ==>',NP4,1,'N');\n  END;\n IF %NP4='Y' THEN DO;\n PANEL (' ********* JOL UPDATE PROCEDURE ***********')\n      /(' DESCRIPTION (CONT) ')\n       ('%T41',TEXT41,50)\n       ('%T42',TEXT42,50)\n       ('%T43',TEXT43,50)\n       ('%T44',TEXT44,50)\n       ('%T45',TEXT45,50)\n       ('%T46',TEXT46,50)\n       ('%T47',TEXT47,50)\n       ('%T48',TEXT48,50)\n       ('%T49',TEXT49,50)\n       ('%T50',TEXT50,50);\n  END;\n  IF %TEXT1\u00ac='' THEN %D1='''%TEXT1''';\n  IF %TEXT2\u00ac='' THEN %D2='''%TEXT2''';\n  IF %TEXT3\u00ac='' THEN %D3='''%TEXT3''';\n  IF %TEXT4\u00ac='' THEN %D4='''%TEXT4''';\n  IF %TEXT5\u00ac='' THEN %D5='''%TEXT5''';\n  IF %TEXT6\u00ac='' THEN %D6='''%TEXT6''';\n  IF %TEXT7\u00ac='' THEN %D7='''%TEXT7''';\n  IF %TEXT8\u00ac='' THEN %D8='''%TEXT8''';\n  IF %TEXT9\u00ac='' THEN %D9='''%TEXT9''';\n  IF %TEXT10\u00ac='' THEN %D10='''%TEXT10''';\n  IF %TEXT11\u00ac='' THEN %D11='''%TEXT11''';\n  IF %TEXT12\u00ac='' THEN %D12='''%TEXT12''';\n  IF %TEXT13\u00ac='' THEN %D13='''%TEXT13''';\n  IF %TEXT14\u00ac='' THEN %D14='''%TEXT14''';\n  IF %TEXT15\u00ac='' THEN %D15='''%TEXT15''';\n  IF %TEXT16\u00ac='' THEN %D16='''%TEXT16''';\n  IF %TEXT17\u00ac='' THEN %D17='''%TEXT17''';\n  IF %TEXT18\u00ac='' THEN %D18='''%TEXT18''';\n  IF %TEXT19\u00ac='' THEN %D19='''%TEXT19''';\n  IF %TEXT20\u00ac='' THEN %D20='''%TEXT20''';\n  IF %TEXT21\u00ac='' THEN %D21='''%TEXT21''';\n  IF %TEXT22\u00ac='' THEN %D22='''%TEXT22''';\n  IF %TEXT23\u00ac='' THEN %D23='''%TEXT23''';\n  IF %TEXT24\u00ac='' THEN %D24='''%TEXT24''';\n  IF %TEXT25\u00ac='' THEN %D25='''%TEXT25''';\n  IF %TEXT26\u00ac='' THEN %D26='''%TEXT26''';\n  IF %TEXT27\u00ac='' THEN %D27='''%TEXT27''';\n  IF %TEXT28\u00ac='' THEN %D28='''%TEXT28''';\n  IF %TEXT29\u00ac='' THEN %D29='''%TEXT29''';\n  IF %TEXT30\u00ac='' THEN %D30='''%TEXT30''';\n  IF %TEXT31\u00ac='' THEN %D31='''%TEXT31''';\n  IF %TEXT32\u00ac='' THEN %D32='''%TEXT32''';\n  IF %TEXT33\u00ac='' THEN %D33='''%TEXT33''';\n  IF %TEXT34\u00ac='' THEN %D34='''%TEXT34''';\n  IF %TEXT35\u00ac='' THEN %D35='''%TEXT35''';\n  IF %TEXT36\u00ac='' THEN %D36='''%TEXT36''';\n  IF %TEXT37\u00ac='' THEN %D37='''%TEXT37''';\n  IF %TEXT38\u00ac='' THEN %D38='''%TEXT38''';\n  IF %TEXT39\u00ac='' THEN %D39='''%TEXT39''';\n  IF %TEXT40\u00ac='' THEN %D40='''%TEXT40''';\n  IF %TEXT41\u00ac='' THEN %D41='''%TEXT41''';\n  IF %TEXT42\u00ac='' THEN %D42='''%TEXT42''';\n  IF %TEXT43\u00ac='' THEN %D43='''%TEXT43''';\n  IF %TEXT44\u00ac='' THEN %D44='''%TEXT44''';\n  IF %TEXT45\u00ac='' THEN %D45='''%TEXT45''';\n  IF %TEXT46\u00ac='' THEN %D46='''%TEXT46''';\n  IF %TEXT47\u00ac='' THEN %D47='''%TEXT47''';\n  IF %TEXT48\u00ac='' THEN %D48='''%TEXT48''';\n  IF %TEXT49\u00ac='' THEN %D49='''%TEXT49''';\n  IF %TEXT50\u00ac='' THEN %D40='''%TEXT50''';\n UJY09OP '%INSTALL' STATUS\n ' /*******************************************************/'\n '     THESE DATASETS WERE LAST UPDATED BY CCS ON %DTE'\n '     FOR JOL RELEASE %REL'\n ' /*******************************************************/'\n '   '\n '                       THE FOLLOWING MEMBERS WERE UPDATED '\n '                       ---------------------------------- '\n 'JOL.INSTALL ---%MEM1A'\n '                      %MEM1B'\n '      '\n 'JOL.LOAD    ---%MEM2A'\n '                      %MEM2B'\n '      '\n 'JOL.CMDLIB  ---%MEM3A'\n '                      %MEM3B'\n '      '\n 'JOL.INCLUDE ---%MEM4A'\n '                      %MEM4B'\n '      '\n 'JOL.SOURCE  ---%MEM5A'\n '                      %MEM5B'\n '      '\n 'JOL.MACLIB  ---%MEM6A'\n '                      %MEM6B'\n '      '\n 'JOL.PTFS    ---%MEM7A'\n '                      %MEM7B'\n '      '\n 'JOL.UCMDLIB ---%MEM8A'\n '                      %MEM8B'\n '      '\n '      '\n '        --------------------------------------------------- '\n '        THE FOLLOWING IS A BRIEF DESCRIPTION OF THE CHANGES '\n '        INCORPORATED IN THIS UPDATE TAPE'\n '        --------------------------------------------------- '\n %D1\n %D2\n %D3\n %D4\n %D5\n %D6\n %D7\n %D8\n %D9\n %D10\n %D11\n %D12\n %D13\n %D14\n %D15\n %D16\n %D17\n %D18\n %D19\n %D20\n %D21\n %D22\n %D23\n %D24\n %D25\n %D26\n %D27\n %D28\n %D29\n %D30\n %D31\n %D32\n %D33\n %D34\n %D35\n %D36\n %D37\n %D38\n %D39\n %D40\n %D41\n %D42\n %D43\n %D44\n %D45\n %D46\n %D47\n %D48\n %D49\n %D50 ;\n END;\n COPY INSTIN TO INSTOUT PDS;\n COPY LOADIN TO LOADOUT PDS;\n COPY CMDIN  TO CMDOUT  PDS;\n COPY INCLIN TO INCLOUT PDS;\n COPY SORCIN TO SORCOUT PDS;\n COPY MACIN  TO MACOUT  PDS;\n COPY PTFSIN TO PTFSOUT PDS;\n COPY UCMDIN TO UCMDOUT PDS;\n /*COPY LISTIN TO LISTOUT PDS;*/\n PRINT %INSTALL(STATUS);\n END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PUTGEM": {"ttr": 14341, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x133\\x00M\\x00M\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:33:00", "lines": 77, "newlines": 77, "modlines": 0, "user": "JOL"}, "text": "MERGE:MACRO(%FIELDS=,TO,%USING=MERGPARM,%INPUT=,%CATLG=NO);\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n    if %list(1) = ''   & %panels \u00ac= 'OFF'\n    then do;\n        dcl %work            init '';\n        mergemen;\n        if %buildjob='YES'\n        then exit;\n/* Call ourselves reentrantly to do the merge */\n        ? 'Merge %work';\n        merge %work;\n        exit;                      /* Better exit now */\n    end;\n\n    IF %FIELDS = '' & %USING = 'MERGPARM' THEN\n       STOP 'No MERGE Fields Supplied' ;\n\n    IF %LIST(1) = '' THEN STOP 'No INPUT Data Set Specified' ;\n    IF %LIST(2)\u00ac= '&' THEN STOP 'Merge needs at least 2 Input Files';\n    IF %LIST(4) = '&' THEN  %INPUT = '%INPUT SORTIN03 READS %LIST(5)' ;\n    IF %LIST(6) = '&' THEN  %INPUT = '%INPUT SORTIN04 READS %LIST(7)' ;\n    IF %LIST(8) = '&' THEN  %INPUT = '%INPUT SORTIN05 READS %LIST(9)' ;\n    IF %LIST(10)= '&' THEN  %INPUT = '%INPUT SORTIN06 READS %LIST(11)' ;\n    IF %LIST(12)= '&' THEN  %INPUT = '%INPUT SORTIN06 READS %LIST(13)' ;\n    IF %LIST(14)= '&' THEN  %INPUT = '%INPUT SORTIN06 READS %LIST(15)' ;\n      DCL   MERGPARM * REPLACE ;\n  MERGE FIELDS=(%FIELDS)\nEOF;\n      DCL   SORTLIB DS SYS1.SORTLIB ;\n      DCL   SYSOUT  SYSOUT  NODCB ;\n\n      $chkdbf '%list(%to +1)';        /* Check if in Data Base */\n\n      DCL   SORT      PROG\n            SYSOUT   WRITES SYSOUT\n            SYSIN    READS  %USING\n            SORTIN01 READS %LIST(1)\n            SORTIN02 READS %LIST(3)\n            %INPUT\n            SORTOUT  WRITES %LIST(%TO+1) ;\n %SYSLABEL: RUN SORT     ;\n      if %catlg='YES' then catlg %list(%to+1);\nprintsym;\n      END ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REGISTER": {"ttr": 14344, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "mergmenu:macro;\n\n /* Assist Users enter Merge Information */\n\ndcl %fileout                 init('*.MRG');\ndcl %f1                      init('');\ndcl %f2                      init('');\ndcl %f3                      init('');\ndcl %f4                      init('');\ndcl %f5                      init('');\ndcl %f6                      init('');\ndcl %f7                      init('');\ndcl %f8                      init('');\ndcl %f9                      init('');\ndcl %f10                     init('');\ndcl %f11                     init('');\ndcl %f12                     init('');\n\ndcl %maxsize                 init('');\ndcl %recsize                 init('');\ndcl %filetype                init('');\ndcl %delim1                  init('');\ndcl %delim2                  init('');\n\ndcl %retfield                init('') EXT;\ndcl %retdsn                  init('') EXT;\n\npanel option caps;\npanel option noshowfield;\n\nPanel  box\n/( ctr hi 'Jol MERGE Input Panel')\n///\n/('  You can Type the Names of the Data Sets You Wish to Merge,')\n ('  OR You can Select Your Data Sets from the Jol Data Set Data Base.')\n//////\n('   1st Merge Input File   ====> ',f1,44,'%f1')\n////\n(ctr 'The next Panels allow Other Files to be Selected')\n\nhelpline\n('Enter Starts Processing, F3 Exits, F4 shows Files.');\n\ncheckf1:\n     if Syspfk=3 then exit;\n\n     if %syspfk=4\n     then do;\n         dbfshow  all '1st Merge Input File';\n         f1='%showsel';\n     end;\n     if f1=''\n     then do;\n         panel reread from f1 'You must supply a file name';\n         goto checkf1;\n     end;\n\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '2nd Merge Input File =====>';\n     %f2 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '3rd Merge Input File =====>';\n     %f3 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '4th Merge Input File =====>';\n     %f4 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '5th Merge Input File =====>';\n     %f5 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '6th Merge Input File =====>';\n     %f6 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '7th Merge Input File =====>';\n     %f7 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '8th Merge Input File =====>';\n     %f8 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '9th Merge Input File =====>';\n     %f9 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\ngetoutds:\n\n\n     $getouds 'Jol Merge Details'  'Final Output File =====>';\n     %fileout = '%retdsn';\n\n\n\nPanel  box\n/( ctr hi 'Jol MERGE Details Panel')\n///\n/(ctr 'Do you wish to Catalog the new Data Set?')\n(ctr'If you don''t Catalog it, it will be Deleted automatically.')\n///\n('   Catalog Out File (Y or N) ===> ',cat,1,'Y')\n//\n\nhelpline\n('Enter Y or N');\n\n\n     getsmfld;\n\n  /* Build Input File List */\n\n     if %buildjob='YES' then goto mergbld;\n\n     work= '%f1 & %f2';\n     if f3\u00ac='NULL' & f3\u00ac='' then work='%work & %f3';\n     if f4\u00ac='NULL' & f4\u00ac='' then work='%work & %f4';\n     if f5\u00ac='NULL' & f5\u00ac='' then work='%work & %f5';\n     if f6\u00ac='NULL' & f6\u00ac='' then work='%work & %f6';\n     if f7\u00ac='NULL' & f7\u00ac='' then work='%work & %f7';\n     if f8\u00ac='NULL' & f8\u00ac='' then work='%work & %f8';\n     if f9\u00ac='NULL' & f9\u00ac='' then work='%work & %f9';\n\n     work='%work TO %fileout fields=(%retfield)';\n     if %cat='Y' then work = '%work Catlg=yes';\n     exit;\n\nmergbld:\n\n\n      /* THISSTEP */\n     BLD04P                  '   Merge %f1 ';\n     BLD04P                  '         & %f2';\n     if %f3 \u00ac='' then BLD04P '        & %f3';\n     if %f4 \u00ac='' then BLD04P '        & %f4';\n     if %f5 \u00ac='' then BLD04P '        & %f5';\n     if %f6 \u00ac='' then BLD04P '        & %f6';\n     if %f7 \u00ac='' then BLD04P '        & %f7';\n     if %f8 \u00ac='' then BLD04P '        & %f8';\n     if %f9 \u00ac='' then BLD04P '        & %f9';\n     if %f10\u00ac='' then BLD04P '        & %f10';\n     if %f11\u00ac='' then BLD04P '        & %f11';\n     if %f12\u00ac='' then BLD04P '        & %f12';\n     if %f13\u00ac='' then BLD04P '        & %f13';\n     if %f14\u00ac='' then BLD04P '        & %f14';\n     if %f15\u00ac='' then BLD04P '        & %f15';\n                      BLD04P '         To %fileout';\n     if %cat='Y'\n     then do;\n                      BLD04P '         Fields=(%retfield)';\n                      BLD04P '         Catlg=Yes;';\n     end;\n     else             BLD04P '         Fields=(%retfield);';\n\n     $chkdbf %fileout  ;            /* Check if in Data Base */\n\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REGISTOL": {"ttr": 14597, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x83\\x02\\x1f\\x00\\x88\\x01\\x9f\\x19\\x00\\x01o\\x01o\\x00\\x01\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1983-01-21T00:00:00", "modifydate": "1988-01-19T19:00:00", "lines": 367, "newlines": 367, "modlines": 1, "user": "JOL"}, "text": "mergmenu:macro;\n\n /* Assist Users enter Merge Information */\n\ndcl %fileout                 init('*.MRG');\ndcl %f1                      init('');\ndcl %f2                      init('');\ndcl %f3                      init('');\ndcl %f4                      init('');\ndcl %f5                      init('');\ndcl %f6                      init('');\ndcl %f7                      init('');\ndcl %f8                      init('');\ndcl %f9                      init('');\ndcl %f10                     init('');\ndcl %f11                     init('');\ndcl %f12                     init('');\n\ndcl %maxsize                 init('');\ndcl %recsize                 init('');\ndcl %filetype                init('');\ndcl %delim1                  init('');\ndcl %delim2                  init('');\n\ndcl %retfield                init('') EXT;\ndcl %retdsn                  init('') EXT;\n\npanel option caps;\npanel option noshowfield;\n\nPanel  box\n/( ctr hi 'Jol MERGE Input Panel')\n///\n/('  You can Type the Names of the Data Sets You Wish to Merge,')\n ('  OR You can Select Your Data Sets from the Jol Data Set Data Base.')\n//////\n('   1st Merge Input File   ====> ',f1,44,'%f1')\n////\n(ctr 'The next Panels allow Other Files to be Selected')\n\nhelpline\n('Enter Starts Processing, F3 Exits, F4 shows Files.');\n\ncheckf1:\n     if Syspfk=3 then exit;\n\n     if %syspfk=4\n     then do;\n         dbfshow  all '1st Merge Input File';\n         f1='%showsel';\n     end;\n     if f1=''\n     then do;\n         panel reread from f1 'You must supply a file name';\n         goto checkf1;\n     end;\n\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '2nd Merge Input File =====>';\n     %f2 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '3rd Merge Input File =====>';\n     %f3 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '4th Merge Input File =====>';\n     %f4 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '5th Merge Input File =====>';\n     %f5 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '6th Merge Input File =====>';\n     %f6 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '7th Merge Input File =====>';\n     %f7 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '8th Merge Input File =====>';\n     %f8 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Merge Details'  '9th Merge Input File =====>';\n     %f9 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\ngetoutds:\n\n\n     $getouds 'Jol Merge Details'  'Final Output File =====>';\n     %fileout = '%retdsn';\n\n\n\nPanel  box\n/( ctr hi 'Jol MERGE Details Panel')\n///\n/(ctr 'Do you wish to Catalog the new Data Set?')\n(ctr'If you don''t Catalog it, it will be Deleted automatically.')\n///\n('   Catalog Out File (Y or N) ===> ',cat,1,'Y')\n//\n\nhelpline\n('Enter Y or N');\n\n\n     getsmfld;\n\n  /* Build Input File List */\n\n     if %buildjob='YES' then goto mergbld;\n\n     work= '%f1 & %f2';\n     if f3\u00ac='NULL'  & f3\u00ac='' then work='%work & %f3';\n     if f4\u00ac='NULL'  & f4\u00ac='' then work='%work & %f4';\n     if f5\u00ac='NULL'  & f5\u00ac='' then work='%work & %f5';\n     if f6\u00ac='NULL'  & f6\u00ac='' then work='%work & %f6';\n     if f7\u00ac='NULL'  & f7\u00ac='' then work='%work & %f7';\n     if f8\u00ac='NULL'  & f8\u00ac='' then work='%work & %f8';\n     if f9\u00ac='NULL'  & f9\u00ac='' then work='%work & %f9';\n\n     work='%work TO %fileout fields=(%retfield)';\n     if %cat='Y' then work = '%work Catlg=yes';\n     exit;\n\nmergbld:\n\n\n      /* THISSTEP */\n     BLD04P                  '   Merge %f1 ';\n     BLD04P                  '         & %f2';\n     if %f3 \u00ac='' then BLD04P '        & %f3';\n     if %f4 \u00ac='' then BLD04P '        & %f4';\n     if %f5 \u00ac='' then BLD04P '        & %f5';\n     if %f6 \u00ac='' then BLD04P '        & %f6';\n     if %f7 \u00ac='' then BLD04P '        & %f7';\n     if %f8 \u00ac='' then BLD04P '        & %f8';\n     if %f9 \u00ac='' then BLD04P '        & %f9';\n     if %f10\u00ac='' then BLD04P '        & %f10';\n     if %f11\u00ac='' then BLD04P '        & %f11';\n     if %f12\u00ac='' then BLD04P '        & %f12';\n     if %f13\u00ac='' then BLD04P '        & %f13';\n     if %f14\u00ac='' then BLD04P '        & %f14';\n     if %f15\u00ac='' then BLD04P '        & %f15';\n                      BLD04P '         To %fileout';\n     if %cat='Y'\n     then do;\n                      BLD04P '         Fields=(%retfield)';\n                      BLD04P '         Catlg=Yes;';\n     end;\n     else             BLD04P '         Fields=(%retfield);';\n\n     $chkdbf %fileout  ;            /* Check if in Data Base */\n\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REGNEW": {"ttr": 14849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88#\\x0f\\x00\\x88#\\x0f\\x18\\x16\\x01\\xbd\\x01\\xbd\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-08-17T00:00:00", "modifydate": "1988-08-17T18:16:00", "lines": 445, "newlines": 445, "modlines": 0, "user": "JOL"}, "text": "  MERGE:MACRO(%FIELDS=,TO,%USING=MERGPARM,%INPUT=);\n   IF %FIELDS = '' & %USING = 'MERGPARM' THEN\n      STOP 'NO MERGE FIELDS SUPPLIED' ;\n   IF %LIST(3) = '' THEN STOP 'NO INPUT DATA SPECIFIED' ;\n   IF %LIST(4) = '&' THEN  %INPUT = '%INPUT SORTIN03 READS %LIST(5)' ;\n   IF %LIST(6) = '&' THEN  %INPUT = '%INPUT SORTIN04 READS %LIST(7)' ;\n   IF %LIST(8) = '&' THEN  %INPUT = '%INPUT SORTIN05 READS %LIST(9)' ;\n     DCL   MERGPARM * REPLACE ;\n MERGE FIELDS=%FIELDS\nEOF;\n     DCL   SORTLIB DS SYS1.SORTLIB ;\n     DCL   SYSOUT  SYSOUT  NODCB ;\n     DCL   SORT      PROG\n           SORTLIB  READS  SORTLIB\n           SYSOUT   WRITES SYSOUT\n           SYSIN    READS  %USING\n           SORTIN01 READS %LIST(1)\n           SORTIN02 READS %LIST(3)\n           %INPUT\n           SORTOUT  WRITES %LIST(%TO+1) ;\n  %SYSLABEL: RUN SORT     ;\n     END ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGO": {"ttr": 14856, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x88$_\\x00\\x88$_\\x17\\x08\\x01r\\x01o\\x008\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1988-09-01T00:00:00", "modifydate": "1988-09-01T17:08:00", "lines": 370, "newlines": 367, "modlines": 56, "user": "JOL"}, "text": "MSSLIST:MACRO\n         /************************************************************/\n         /*                                                          */\n         /*      M S S L I S T   M A C R O                           */\n         /*                                                          */\n         /* A MACRO TO ALLOW REPORTS ON MASS STORAGE VOLUME GROUPS   */\n         /* TO BE PRODUCED.                                          */\n         /*                                                          */\n         /************************************************************/\n(\n %GROUPS=,    /* LIST OF MASS STORAGE VOLUME GROUPS                  */\n %REPORT=USAGE, /* REPORT TYPE (USAGE OR STATUS)                     */\n %LEGEND,     /* IF SPECIFIED, PRODUCE A LEGEND                      */\n %NOLEGEND,   /* DUMMY                                               */\n %SYSOUT=,    /* SYSOUT                                              */\n %DEST=,      /* SYSOUT DESTINATION                                  */\n %NOPANEL,    /* IF SPECIFIED, DONT DISPLAY JOL PANEL                */\n %PANEL       /* DUMMY                                               */\n);\nDCL %LGNDTYPE INIT 'NOLEGEND';\nIF %LEGEND \u00ac= '' THEN\n    %LGNDTYPE = %LEGEND;\nIF %NOPANEL = '' THEN\n    PANEL\n    ('                           M S S L I S T ')\n    ('                           ============= ')/\n    ('MASS STORAGE VOLUME GROUPS (MANDATORY)            ==>',\n           GROUPS, 80, '%GROUPS')\n    ('REPORT (\"USAGE\" OR \"STATUS\")                      ==>',\n           REPORT, 6, '%REPORT')/\n    ('LEGEND/NOLEGEND                                   ==>',\n           LGNDTYPE, 8, '%LGNDTYPE')/\n    ('SYSOUT CLASS (IF OMMITTED, SAME AS JOB MSGCLASS)  ==>',\n           SYSOUT, 1, '%SYSOUT');\nIF %LGNDTYPE \u00ac= 'LEGEND' & %LGNDTYPE \u00ac= 'NOLEGEND' THEN\n    %LGNDTYPE = 'NOLEGEND';\nIF %REPORT \u00ac= 'USAGE' & %REPORT \u00ac= 'STATUS' THEN\n    %REPORT = 'USAGE';\nIF %GROUPS = '' THEN\n    STOP 'GROUPS PARAMETER NOT SUPPLIED';\nELSE\n    DO;\nDCL INPUT * REPLACE PRINTALL;\n LISTMSVI GROUP(-\n %GROUPS)-\n          VOLUMELIST(ALL)-\n          REPORT(%REPORT)-\n          %LGNDTYPE\nEOF;\nDCL PRINT        SYSOUT %SYSOUT %DEST;\nDCL KQCAMS       PROG  REGION = 256 K\n        SYSPRINT WRITES PRINT\n        SYSIN    READS  INPUT;\nRUN KQCAMS;\nEND;\nEND;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RELEASE": {"ttr": 15110, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x83 /\\x00\\x83 /\\x12#\\x00\\x0e\\x00\\x14\\x00\\x03\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1983-07-21T00:00:00", "modifydate": "1983-07-21T12:23:00", "lines": 14, "newlines": 20, "modlines": 3, "user": "JOL"}, "text": "NET:MACRO(%NETID=,%ID=,%NHOLD=,%HC=,%RELEASE=,%RL=,%NORMAL=,\n %NC=,%ABNORMAL=,%AB=,%OPHOLD=,%OH=,%RELSCHCT=,%RS=,%NETREL=,%NR=) ;\n IF %SPOOL \u00ac= 'ASP' | %SPOOL\u00ac='JES3' THEN SIGNAL\n    2,'//*NET CARD GENERATED FOR %SPOOL' ;\n DCL %OPTION INIT '' ;\n IF %NETID    \u00ac= '' & %ID = '' THEN %ID = %NETID ;\n IF %NHOLD    \u00ac= '' & %HC = '' THEN %HC = %NHOLD ;\n IF %RELEASE  \u00ac= '' & %RL = '' THEN %RL = %RELEASE ;\n IF %NORMAL   \u00ac= '' & %NC = '' THEN %NC = %NORMAL ;\n IF %ABNORMAL \u00ac= '' & %AB = '' THEN %AB = %ABNORMAL ;\n IF %OPHOLD   \u00ac= '' & %OH = '' THEN %OH = %OPHOLD ;\n IF %RELSCHT  \u00ac= '' & %RS = '' THEN %RS = %RELEASE ;\n IF %NETREL   \u00ac= '' & %NR = '' THEN %NR = %NETREL ;\n IF %ID = '' THEN STOP 'NET MACRO: NO NETID | ID SUPPLIED' ;\n %OPTION = 'ID=%ID' ;\n IF %HC \u00ac= '' THEN %OPTION = '%OPTION,HC=%HC' ;\n IF %RL \u00ac= '' THEN %OPTION = '%OPTION,RL=%RL' ;\n IF %NC \u00ac= '' THEN %OPTION = '%OPTION,NC=%NC' ;\n IF %AB \u00ac= '' THEN %OPTION = '%OPTION,AB=%AB' ;\n IF %OH \u00ac= '' THEN %OPTION = '%OPTION,OH=%OH' ;\n IF %RS \u00ac= '' THEN %OPTION = '%OPTION,RS=%RS' ;\n IF %NR \u00ac= '' THEN %OPTION = '%OPTION,NR=%NR' ;\n OPCNTL '//*NET %OPTION' AFTER JOBCARD ;\n END ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REN": {"ttr": 15112, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": " /*****************************************************************/\n /**               NETSUB MACRO                                  **/\n /**               ------------                                  **/\n /**                                                             **/\n /** WRITTEN: C. CLARKE    26.03.86 FOR NETWORKING               **/\n /**                                                             **/\n /** THIS MACRO CREATES JOL CODE THAT IS THEN COMPILED           **/\n /**      AND SUBMITTED FOR EXECUTION.                           **/\n /**                                                             **/\nNETSUB:MACRO(%PI,%PE,%PM,%PJ,%SYMS=,%PROG=$JOLCP40,%USING=XX,\n  %NOCAT,%NOCATGDG,%ULIB=,%UMAC=,%PROCLIB='CLARKE.JOL',\n  AFTER,\n  %LET,%PO,%MACROLIB='%$JOLPREF.JOL%$JOLVERS.CMDLIB',%NPI=NPI,%NP=) ;\n /*****************************************************************/\n /******************SYMBOLIC DECLARES *****************************/\n /*****************************************************************/\n DCL DUMMY DS DUMMY NODCB;\n\n /* ADDED FOR NETWORKING AND SCHEDULING C.CLARKE MARCH, 1987 */\n DCL %SYSNETID INIT('') EXT;  /* SET IF NETWORK EXECUTING */\n DCL %SYSJOBS1 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSJOBS2 INIT('') EXT;  /* KEEPS LIST OF NETWORK JOBS SUBMITTED */\n DCL %SYSNTINC INIT('') EXT;  /* KEEPS INCLUDE DATA SET FOR JOBS      */\n DCL %SYSNTMAC INIT('') EXT;  /* KEEPS JOL MACRO DATA SETS FOR JOBS   */\n DCL %JOBSUBD  INIT('') EXT;  /* TELLS US IF A JOB WAS SUBMITTED      */\n DCL %CHK1,%CHK2,%CHK3,%CHK4,%CHK5,%CHK6,\n     %CHK7,%CHK8,%CHK9,%CHK10 INIT '' ;\n\n DCL %CHECK,%CHKLEN,%CHLES1        INIT ''      ;\n DCL %JJOB INIT 'NO';\n DCL %JCJOB INIT 'NO';\n\n   /* VARIABLES BELOW USED IN LOOPS FOR SUBSCRIPTS ETC */\n DCL %INDEX                        INIT('1');\n DCL %IND2                         INIT('1');\n DCL %WORK                         INIT('');\n DCL %TYPE                         INIT('');\n DCL %L,%K                         INIT('');\n /*****************************************************************/\n /*****CHECK THAT THERE IS VALID INPUT TO THIS MACRO***************/\n /*****************************************************************/\n    IF %LIST(1) = '' THEN STOP 'NO INPUT FOR NETSUB';\n\n /*****************************************************************/\n /*****CHECK IF WE ARE NETWORKING, AND AFTER SPECIFIED ************/\n /*****************************************************************/\n    IF %AFTER\u00ac=0 & %SYSNETID=''\n    THEN DO;\n         STOP '''AFTER'' CANCELLED: USE THE NETWORK COMMAND FIRST';\n    END;\n\n /*****************************************************************/\n /*****CHECK FOR SYMBOLICS TO BE PASSED TO JOL JOBS****************/\n /*****************************************************************/\n    %CHKLEN = LENGTH (SYMS);                  /* GET LENGTH   */\n    IF %CHKLEN \u00ac= 0\n    THEN DO;\n          %CHECK = SUBSTR(SYMS,1,1)         ; /* CHECK FOR    */\n          IF %CHECK = '(' THEN                /* BRACKETS     */\n          DO;\n             %CHKLEN = LENGTH (SYMS);            /* AND REMOVE   */\n             %CHLES1 = %CHKLEN-2           ;\n             %SYMS = SUBSTR(SYMS,2,%CHLES1)   ;\n          END;\n    END;\n /*****************************************************************/\n /*****CHECK IF THE JOB HAS ALREADY BEEN SUBMITTED ****************/\n /*****************************************************************/\n\n   %TYPE=TYPE(LIST0001);       /* CHECK IF JOL OR JCL JOB */\n   IF %TYPE='CHAR' THEN        /* THIS IS A JOL JOB */\n   %WORK='SET WORK=%%%LIST(1)'; /* GET NAME OF JOB */\n   ELSE %WORK='SET WORK=%%%SYSLABEL'; /* GET NAME OF JCL JOB */\n   %WORK;                      /* SET WORK = VALUE OF JOBNAME */\n\n   IF %WORK=''                 /* HAVE WE ALREADY SUBMITTED THIS JOB */\n   &  %TYPE='CHAR'             /* HERE IS A JOL JOB */\n   THEN DO;                    /* NO, SO WE SHALL COMPILE AND SUBMIT */\n        WRITE FILE(TEMPNET) FROM('*JOL/%SYMS;');\n        WRITE FILE(TEMPNET) FROM('   INCLUDE %LIST(1);');\n        WRITE FILE(TEMPNET) FROM('   CHECKNET %SYSNETID %LIST(1);');\n        %WORK='%LIST(1)';      /* GET NAME OF JOB */\n        SET %WORK='SUBMITTED';\n        %JOBSUBD='YES';          /* TELLS US A JOB WAS SUBMITTED */\n    /*  EXIT;     /* DONE ALL WE NEED FOR A JOL JOB */\n   END; /* OF JOL JOB */\n\n /*****************************************************************/\n /************* HERE WE HAVE A JCL JOB  ***************************/\n /*****************************************************************/\n\n   IF %WORK=''                 /* HAVE WE ALREADY SUBMITTED THIS JOB */\n   THEN DO;\n       %INDEX=1;\n       IF %SYSLABEL=''\n       THEN DO;\n           STOP 'NO LABEL ON NETSUB COMMAND ... NETWORK HALTED';\n           EXIT;\n       END;\n LABEL OPLOOP;\n       %IND2=%INDEX;\n       %WORK=LENGTH(INDEX);\n       IF %WORK=1 THEN %INDEX='000%INDEX';\n       IF %WORK=2 THEN %INDEX='00%INDEX';\n       IF %WORK=3 THEN %INDEX='0%INDEX';\n       IF %LIST(%INDEX)\n       THEN DO;\n            WRITE FILE($$JCL) FROM('%LIST(%IND2)');\n            %INDEX=%INDEX+1;\n            REDO OPLOOP;\n       END;\n       SET %SYSLABEL='SUBMITTED';\n   /*  PRINTSYM; */\n       WRITE FILE($$JCL) FROM('//CHECKNET EXEC PGM=$JOLCP%$JOLVERS,');\n       WRITE FILE($$JCL) FROM('//  PARM=''/NETJOB=%SYSLABEL''');\n       WRITE FILE($$JCL)\n         FROM('//$$JPRINT DD  SYSOUT=*,DCB=BLKSIZE=1330');\n       WRITE FILE($$JCL) FROM('//$$JCL    DD  SYSOUT=(A,INTRDR)');\n       WRITE FILE($$JCL) FROM('//SYSUDUMP DD  SYSOUT=*');\n       WRITE FILE($$JCL) FROM (\n         '//$$JLOAD  DD  DSN=%$JOLPREF.JOL%$JOLVERS.LOAD,DISP=SHR');\n       WRITE FILE($$JCL) FROM (\n         '//$$JINCL  DD  DSN=%$JOLPREF.JOLNET.STATUS,DISP=SHR');\n       WRITE FILE($$JCL) FROM (\n         '//$$JMACRO DD  DSN=%$JOLPREF.JOL%$JOLVERS.CMDLIB,DISP=SHR');\n       WRITE FILE($$JCL) FROM (\n         '//$$JWORK1 DD  UNIT=SYSDA,SPACE=(TRK,10),');\n       WRITE FILE($$JCL) FROM (\n         '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=800)');\n       WRITE FILE($$JCL) FROM (\n         '//$$JWORK2 DD  UNIT=SYSDA,SPACE=(TRK,10),');\n       WRITE FILE($$JCL) FROM (\n         '//         DCB=(RECFM=VB,LRECL=200,BLKSIZE=800)');\n       WRITE FILE($$JCL) FROM (\n         '//TEMPNET  DD  UNIT=SYSDA,SPACE=(TRK,10),');\n       WRITE FILE($$JCL) FROM (\n         '//         DCB=(RECFM=FB,LRECL=80,BLKSIZE=800)');\n       WRITE FILE($$JCL) FROM (\n         '//$$JIN    DD  DSN=%$JOLPREF.JOLNET.CODE(%SYSNETID),');\n       WRITE FILE($$JCL) FROM (\n         '//         DISP=SHR');\n       WRITE FILE($$JCL) FROM (\n         '//         DD  DSN=*.TEMPNET,VOL=REF=*.TEMPNET,DISP=SHR');\n   END; /* OF JCL JOB */\n END ; /* END OF MACRO */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RENAME": {"ttr": 15115, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x91\\x08\\t'", "ispf": false, "text": "NETWORK:MACRO(%NETID=,%ID=,%NHOLD=,%HC=,%RELEASE=,%RL=,%NORMAL=,\n %NC=,%ABNORMAL=,%AB=,%OPHOLD=,%OH=,%RELSCHCT=,%RS=,%NETREL=,%NR=) ;\n DCL %SYSNETID INIT '' EXT;\n IF %LIST(1)=''\n THEN DO;\n      STOP 'NET MACRO: NO NETID | ID SUPPLIED' ;\n      EXIT;\n END;\n %SYSNETID='%LIST(1)';\n ALLOC F($$JSTAT) DA('%$JOLPREF.JOLNET.STATUS(%SYSNETID)') SHR;\n ALLOC F($$JCODE) DA('%$JOLPREF.JOLNET.CODE(%SYSNETID)') SHR;\n OPEN F($$JSTAT) OUTPUT;    /* JOL ENQUES ON DATA SET */\n OPEN F($$JCODE) OUTPUT;\n /* ASSUME THAT JOLNET.STATUS EXITS */\n WRITE F($$JCODE) FROM\n ('      /*      JOL NETWORK CONTROLLER FOR NETWORK ''%SYSNETID''\n    */');\n WRITE F($$JCODE) FROM('    ENQ SPFDSN/''%$JOLPREF.JOLNET.STATUS'';');\n WRITE F($$JCODE) FROM('    %%SYSNETID=''%SYSNETID'';');\n WRITE F($$JCODE) FROM(\n   '    INCLUDE ''%$JOLPREF.JOLNET.STATUS(%SYSNETID)'';');\n /*\n WRITE F($$JCODE) FROM('    GETNETST %SYSNETID;');\n */\n WRITE F($$JCODE) FROM('    IF %%NETJOB\u00ac=''''');\n WRITE F($$JCODE) FROM('    THEN SET %%NETJOB=''ENDED'';');\n WRITE F($$JCODE) FROM('    OPEN FILE(TEMPNET) OUTPUT;');\n END ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RENAMEO": {"ttr": 15361, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x822\\x1f\\x00\\x822\\x1f\\x16D\\x00Z\\x00\\xcf\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1982-11-17T00:00:00", "modifydate": "1982-11-17T16:44:00", "lines": 90, "newlines": 207, "modlines": 0, "user": "JOL"}, "text": "NETWORK:MACRO(%NETID=,%ID=,%NHOLD=,%HC=,%RELEASE=,%RL=,%NORMAL=,\n %NC=,%ABNORMAL=,%AB=,%OPHOLD=,%OH=,%RELSCHCT=,%RS=,%NETREL=,%NR=) ;\n DCL %SYSNETID INIT '' EXT;\n IF %LIST(1)=''\n THEN DO;\n      STOP 'NET MACRO: NO NETID | ID SUPPLIED' ;\n      EXIT;\n END;\n %SYSNETID='%LIST(1)';\n ALLOC F($$JSTAT) DA('%$JOLPREF.JOLNET.STATUS(%SYSNETID)') SHR;\n ALLOC F($$JCODE) DA('%$JOLPREF.JOLNET.CODE(%SYSNETID)') SHR;\n OPEN F($$JSTAT) OUTPUT;    /* JOL ENQUES ON DATA SET */\n OPEN F($$JCODE) OUTPUT;\n /* ASSUME THAT JOLNET.STATUS EXITS */\n WRITE F($$JCODE) FROM\n ('      /*      JOL NETWORK CONTROLLER FOR NETWORK ''%SYSNETID''\n    */');\n WRITE F($$JCODE) FROM('    ENQ SPFDSN/''%$JOLPREF.JOLNET.STATUS'';');\n WRITE F($$JCODE) FROM('    %%SYSNETID=''%SYSNETID'';');\n WRITE F($$JCODE) FROM('    INCLUDE %SYSNETID;');\n WRITE F($$JCODE) FROM('    IF %%NETJOB\u00ac=''''');\n WRITE F($$JCODE) FROM('    THEN SET %%NETJOB=''ENDED'';');\n WRITE F($$JCODE) FROM('    OPEN FILE(TEMPNET) OUTPUT;');\n END ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RENOS": {"ttr": 15364, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x82\\x11\\x17'", "ispf": false, "text": "notconfg:macro;\nif list(1)=''\nthen do;\n    panel red box\n      //////////\n      (ctr 'Command is Not Yet Configured for Your Installation')\n    //(ctr 'Please Contact Your Distributor for Details')\n      (ctr 'about Configuring Jol.');\n    exit;\nend;\n\npanel red box\n   //////////\n(ctr\n  'Command ''%list(1)'' is Not Yet Configured for Your Installation')\n    //(ctr 'Please Contact Your Distributor for Details')\n      (ctr 'about Configuring Jol.');\n  ;\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RENUNIX": {"ttr": 15367, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "notimpl:macro;\nif list(1)=''\nthen do;\n    panel red box ////////// (ctr 'Command is Not Yet Implemented');\n    exit;\nend;\n\n    panel red box //////////\n     (ctr 'Command ''%list(1)'' is Not Yet Implemented');\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RETAIN": {"ttr": 15369, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x82)?\\x00\\x82)?\\x14R\\x00\\x14\\x00\\x14\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-10-20T00:00:00", "modifydate": "1982-10-20T14:52:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "JOL"}, "text": "  ON: MACRO (%SNAP,%DUMP,     /* SET IF SNAP OR DUMP CODED */\n             %SYSTEM,         /* SET IF %SYSTEM SET        */\n             TO,              /* LOCATES 'TO' IN LIST      */\n             %HOLD,%NOHOLD ); /* SET IF 'HOLD' | 'NOHOLD CODED */\n         DCL %DDNAME          INIT 'SYSUDUMP';\n         DCL %HOLDX           INIT ',HOLD=YES';\n         DCL %SPACE           INIT ',SPACE=(TRK,(0,100))';\n         DCL %OUT             INIT 'SYSOUT=A';\n         DCL %DSN,%UNIT,%STEPNO INIT '';\n         IF %LIST(1)='ERROR'       /* WAS ON ERROR CODED ?  */\n         THEN DO;\n             IF %SNAP='' & %DUMP='' /* ON ERROR ; ?  */\n             THEN JOLOPT DUMPCARD='';   /* CANCEL ON ERROR */\n             ELSE DO;\n                 IF %SYSTEM\u00ac=''\n                 THEN %DDNAME='SYSABEND';    /* CHANGE DEFAULT */\n                 IF %NOHOLD\u00ac='' THEN %HOLDX=''; /* ALTER HOLD IF NEC */\n      /*         IF %SYSTEM\u00ac='VS2' THEN %HOLDX=''; /* ONLY FOR MVS  */\n                 IF %TO=0 | (%TO\u00ac=0 & %LIST(%TO+1)='PRINTER')\n                 THEN DO;\n                    IF %TO\u00ac=0 THEN %OUT='SYSOUT=%LIST(%TO+2)';\n                    IF %SPOOL\u00ac='' THEN %SPACE=',OUTLIM=999999';\n                    JOLOPT DUMPCARD='//%DDNAME DD %OUT%SPACE%HOLDX';\n                 END;\n                 ELSE DO;\n                     /* HERE %TO\u00ac=0, OR  IT DOESN'T POINT TO A PRINTER\n                      */\n                     IF %LIST(%TO+1)\u00ac='TAPE' & %LIST(%TO+1)\u00ac='DISK'\n                     THEN SIGNAL ERROR 3,'''TO'' DOES POINT TO INVALID\nKEYWORK ''%LIST(%TO+1)'':- ON IGNORED';\n                     ELSE DO;\n                         %DSN='D%SYSDATE.T%HOURS%MINS.S%SECS';\n                         DCL DUMP DS  DSN=%DSN UNIT=%LIST(%TO+1)\n                             0,100 TRACKS;\n                         DCL IEFBR14 PROG\n                             DD1 MAY WRITE DUMP,DD2 MAY READ DUMP;\n                         RUN IEFBR14;\n                         JOLOPT DUMPCARD '//%DDNAME DD DSN=%DSN,DISP=(M\nOD,PASS,CATLG),UNIT=(,,DEFER)';\n                         DISPLAY 'DUMP WILL GO TO ''%DSN'' DATA SET';\n                     END;\n                 END;\n             END;\n         END;\n         END   /* OF ON ERROR MACRO COMMAND   */   ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ROUTE": {"ttr": 15371, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x133\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:33:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "JOL"}, "text": "PANCOB : MACRO (%PRJCAT=,%PANLIB=,%NOPANEL,%COBOPTS=,%LINKOPTS=,\n%COPYMOD=,%SYSOUT=,%LINK);\nDCL %LIB INIT '';\nIF %SYSOUT = '' THEN %SYSOUT = 'A';\nIF %PANLIB= '' THEN DO;\n   %PANLIB = 'PAN.SRCLIB';\nEND;\nDCL %PANMOD INIT '';\nIF %LIST(1) \u00ac= '' THEN %PANMOD = '%LIST(1)';\nIF %NOPANEL = '' THEN\nPANEL ('                  JOL 3.3 PANCOB')\n//('            ANY HIGHLIGHTED FIELD CAN BE CHANGED')\n//('            PAN MODULE ==============>',PANMOD,12,'%PANMOD')\n//('            PAN ACCESS ==============>',PANACC,5,'')\n//('            SYSOUT CLASS ============>',SYSOUT,1,'%SYSOUT')\n  ('            PAN LIBRARY =============>',PANLIB,44,'%PANLIB')\n///('        *****************************************************');\nIF %PANACC\u00ac='' THEN %PANACC='++ACCESS %PANACC';\nDCL TEMPDATA DS DSN &&PAN SYSDA 5,2 CYLS FB 80,7280;\nDCL PANPRT SYSOUT %SYSOUT;\nDCL PANPARM * REPLACE;\n%PANACC\n++WRITE WORK,%PANMOD\nEOF;\nPAN: DCL PAN#1   PROG\nPANDD2 WRITES TEMPDATA\nSYSIN READS PANPARM\nSYSPUNCH WRITE 'NULLFILE'\nSYSPRINT WRITES PANPRT;\nRUN PAN;\nOPCNTL '//PANDD1 DD DSN=%PANLIB,DISP=SHR';\nIF PAN < 12 THEN DO;\nCOB '&&PAN'  %LINK %COBOPTS LINKOPTS '%LINKOPTS'\nSYSOUT %SYSOUT %NOPANEL;\nEND;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RUNJOB": {"ttr": 15373, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\t\\x00\\x8f\\x01\\t\\x00\\x8f\\x10(\\x00:\\x00:\\x00\\x00\\xd1\\xd6\\xd3\\xf6\\xf0@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-01-08T00:00:00", "modifydate": "2009-01-08T10:28:35", "lines": 58, "newlines": 58, "modlines": 0, "user": "JOL60"}, "text": "PANPLI : MACRO (%PRJCAT=,%PANLIB=,%NOPANEL,%PLIOPTS=,%LINKOPTS=,\n%COPYMOD=,%SYSOUT=,%LINK);\nDCL %LIB INIT '';\nIF %SYSOUT = '' THEN %SYSOUT = 'A';\nIF %PANLIB= '' THEN DO;\n   %PANLIB = 'PAN.SRCLIB';\nEND;\nDCL %PANMOD INIT '';\nIF %LIST(1) \u00ac= '' THEN %PANMOD = '%LIST(1)';\nIF %NOPANEL = '' THEN\nPANEL ('                  JOL 3.3 PANPLI')\n//('            ANY HIGHLIGHTED FIELD CAN BE CHANGED')\n//('            PAN MODULE ==============>',PANMOD,12,'%PANMOD')\n//('            PAN ACCESS ==============>',PANACC,5,'')\n//('            SYSOUT CLASS ============>',SYSOUT,1,'%SYSOUT')\n  ('            PAN LIBRARY =============>',PANLIB,44,'%PANLIB')\n///('        *****************************************************');\nIF %PANACC\u00ac='' THEN %PANACC='++ACCESS %PANACC';\nDCL TEMPDATA DS DSN &&PAN SYSDA 5,2 CYLS FB 80,7280;\nDCL PANPRT SYSOUT %SYSOUT;\nDCL PANPARM * REPLACE;\n%PANACC\n++WRITE WORK,%PANMOD\nEOF;\nPAN: DCL PAN#1   PROG\nPANDD2 WRITES TEMPDATA\nSYSIN READS PANPARM\nSYSPUNCH WRITE 'NULLFILE'\nSYSPRINT WRITES PANPRT;\nRUN PAN;\nOPCNTL '//PANDD1 DD DSN=%PANLIB,DISP=SHR';\nIF PAN < 12 THEN DO;\nPLI '&&PAN'  %LINK %PLIOPTS LINKOPTS '%LINKOPTS'\nSYSOUT %SYSOUT %NOPANEL;\nEND;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAVESYMS": {"ttr": 15375, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x00\\x00\\x00\\x00\\x87$o\\x00\\x87$o\\x16 \\x00S\\x00S\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "04.00", "flags": 0, "createdate": "1987-09-03T00:00:00", "modifydate": "1987-09-03T16:20:00", "lines": 83, "newlines": 83, "modlines": 0, "user": "JOL"}, "text": "$pgmlist:macro;\n/* Show Some of the Jol Macros and allow selection by the User */\ndcl %command init('');\n\nloop:\npanel option caps;\npanel %boxcolor box\n menubar\n('Commands  User_Program                       Exit Quit Help')\n/ (ctr %hedcolor  'Run Single Program Primary Menu')\n/\n(ctr'Place the first character of the command you wish to select in'\n    ' the box')\n(ctr'or code any command directly in the command line.')\n//\n(hi '  Command === > ',command,44,'%command') /* Leave last command */\n//\n('  The following Jol menus are available:')\n/(hi '    C  ' normal 'Commands:       Shows a List of Jol Commands')\n\n (hi '    U  ' normal 'User Programs:  Execute a Toyota Program')\n\n\n////  (ctr hi 'Note:'\n             normal ' You can use <Alt B>, <Alt R> etc as HotKeys')\n             normal ' or Enter the first letter for 3270 Terminals.')\nhelpline('F3 Returns To Jol Main Menu')\n;\n\n\nwaitin:\n\n    if syspfk=3 then do; cls; exit; end;\n    if syspfk\u00ac=0 & syspfk\u00ac=1 & sysmenu=''\n    then do;\n        panel reread;\n        goto waitin;\n    end;\n\n    If command \u00ac= ''\n    then do;\n        %command;\n        goto loop;\n    end;\n\n    If sysmenu='COMMANDS'\n    then do;\n        popup  /* at 4 */\n           (     'Copy')\n           (     'ListCat')\n           (     'Merge')\n           (     'Print')\n           (     'Sort')\n           (     'User Program')\n           ;\n           If syspop = 'COPY'     then copy;\n           If syspop = 'LISTCAT'  then listcat;\n           If syspop = 'MERGE'    then merge;\n           If syspop = 'PRINT'    then print;\n           If syspop = 'SORT'     then sort;\n           If substr(syspop,1,4)='USER' then exec;\n    end;\n\n    If substr(sysmenu,1,5) = 'USER_'\n    then do;\n        exec;\n    end;\n\n   goto loop;\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SAVESYPC": {"ttr": 15617, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "PLI:MACRO ( /* JOL PLI COMMAND  */\n  /* DEFINE POSSIBLE STANDARD PLI PARAMETERS    */\n  %STEPLIB=,\n  %LINK\n  %OBJ='&&OBJ',%NOOBJ        /* TEMPORARY OBJECT IS DEFAULT          */\n  %NOPANEL                   /* PANEL IS THE DEFAULT                 */\n  %PRINT=,%SYSOUT=,          /* SYSOUT CLASS A IS THE DEFAULT        */\n  %LIB=,                     /* DEFINE AN INPUT LIBRARY IF REQ'D     */\n  %ASTER,%NOASTER            /* NOASTER IS THE DEFAULT               */\n  %ATTRIB=,%A= 'SHORT',\n  %NOATTRIB %NOA\n  %CHAR = '60',%CHARSET=,\n  %CS=,\n  %COMPILE=,%C=,%NCOMPILE=,%NC=,\n  %COUNT %NOCOUNT %CT %NCT   /* NOCOUNT IS THE DEFAULT               */\n  %DUMP %NODUMP %DU %NDU\n  %ESD %NOESD\n  %EBCDIC %BCD\n  %FLAG='I',%F=,             /* FLAG I IS THE DEFAULT                */\n  %FLOW=,%NOFLOW             /* NOFLOW IS THE DEFAULT                */\n  %GONUMBER %NOGONUM %GN %NGN\n  %GOSTMT %NOGOSTMT %GS %NGS\n  %INCLUDE %NOINCLUD %INC %NINC\n  %INSOURCE %NOINSOUR %IS %NIS\n  %NOINTER\n  %INTERRUP,%INT,%NINT       /* INTERRUPT STD IS THE DEFAULT         */\n  %LINECNT=,%LC=,            /* 55 IS THE DEFAULT                    */\n  %LIST,%NOLIST              /* NOLIST IS THE DEFAULT                */\n  %LISTSTMT =,\n  %LMESSAGE %SMESSAGE %LMSG %SMSG\n  %MACRO %NOMACRO %M %MN\n  %MARGINI=,%MI=,%NMARGINI %NMI\n  %MARGINS =, %MAR=,\n  %NAME=,%N=,\n  %NEST, %NONEST\n  %NUMBER %NONUMBER %NUM %NONUM\n  %OFFSET %NOOFFSET %OF %NOF\n  %OPTIMIZE=, %OPT=,%NOOPT   /* NOOPT IS THE DEFAULT                 */\n  %OPTIONS %NOOPTION %OP %NOP\n  %RENT %NORENT              /* NORENT IS THE DEFAULT                */\n  %SEQ =,\n  %SIZE=,                    /* SIZE STD IS THE DEFAULT              */\n  %SOURCE %NOSOURCE %S %NS   /* SOURCE IS THE DEFAULT                */\n  %SPACE %NOSPACE %SP %NSP\n  %STMT %NOSTMT              /*  STMT IS THE DEFAULT                 */\n  %STORAGE %NSTORAGE %STG %NSTG /* STORAGE IS DEFAULT               */\n  %SYNTAX=, %NOSYNTAX=,\n  %TERM %NOTERM              /* NOTERM IS THE DEFAULT                */\n  %TEST=,%NOTEST             /* NOTEST IS THE DEAFULT                */\n  %XREF= 'SHORT',\n  %NOLINKQ                   /* NO LINK QUESTION. IF \"COMPILE AND    */\n                             /* LINK\" IS CALLED, THE COMPILE MACRO   */\n                             /* CALLS THE LINK MACRO, THEREFORE DON'T*/\n                             /* ASK USER IF HE WANTS TO LINK         */\n\n  );\n  DCL %DSIN INIT '%SYSPREF.PLI';\n  DCL %PFILE INIT 'SYSOUT A';\n  IF %LIB = '' THEN\n     %LIB = 'NOT REQUIRED';\n  DCL %SYMFILE INIT '';\n   DCL %PARM INIT '';\n   IF %NOOBJ   \u00ac= '' THEN %OBJ  = 'NULLFILE';\n   IF %ASTER   \u00ac= '' THEN %PARM = 'ASTER';\n   ELSE %PARM = 'NOASTER';\n   IF %NOATTRIB \u00ac= '' THEN DO; %ATTRIB = ''; %A = '';\n   %PARM = '%PARM,NOATTRIBUTES';\n   END;\n   IF %NOA \u00ac= '' THEN DO; %ATTRIB = ''; %A = '';\n   %PARM = '%PARM,NOATTRIBUTES';\n   END;\n   IF %A \u00ac= '' THEN %ATTRIB = '%A';\n   IF %ATTRIB \u00ac= '' THEN %PARM = '%PARM,A(%ATTRIB)';\n   IF %CHARSET \u00ac= '' THEN %CHAR = '%CHARSET';\n   IF %CS \u00ac= '' THEN %CHAR = '%CS';\n   IF %CHAR \u00ac= '' THEN %PARM = '%PARM,CHARSET(%CHAR)';\n   IF %NC \u00ac= '' THEN DO;\n      %COMPILE = '';\n      %C = '';\n      %NOCOMPILE = '%NC';\n      END;\n   IF %NCOMPILE \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOCOMPILE(%NOCOMPILE)';\n      %C = '';\n      %COMPILE = '';\n      END;\n   IF %C \u00ac= '' THEN %COMPILE = '%C';\n   IF %COMPILE \u00ac= '' THEN %PARM = '%PARM,COMPILE(%COMPILE)';\n   IF %NCT \u00ac= '' THEN %NOCOUNT = 'NOCOUNT';\n   IF %NOCOUNT \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOCOUNT';\n      %COUNT = '';\n      %CT = '';\n   END;\n   IF %CT \u00ac= '' THEN %COUNT = 'COUNT';\n   IF %COUNT \u00ac= '' THEN %PARM = '%PARM,COUNT';\n   IF %NDU \u00ac= '' THEN %NODUMP = 'NODUMP';\n   IF %NODUMP \u00ac= '' THEN DO;\n      %PARM = '%PARM,NODUMP';\n      %DUMP = '';\n      %DU = '';\n   END;\n   IF %DU \u00ac= '' THEN %DUMP = 'DUMP';\n   IF %DUMP \u00ac= '' THEN %PARM = '%PARM,DUMP';\n   IF %NOESD \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOESD';\n      %ESD = '';\n   END;\n   IF %ESD \u00ac= '' THEN %PARM = '%PARM,ESD';\n   IF %EBCDIC \u00ac= '' THEN DO;\n      %PARM = '%PARM,EBCDIC';\n      %BCD = '';\n   END;\n   IF %F \u00ac= '' THEN %FLAG = '%F';\n   IF %FLAG \u00ac= '' THEN %PARM = '%PARM,FLAG(%FLAG)';\n   IF %NOFLOW  \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOFLOW';\n      %FLOW = '';\n   END;\n   IF %FLOW    \u00ac= '' THEN %PARM = '%PARM,FLOW(%FLOW)';\n   IF %NGN \u00ac= '' THEN %NOGONUM = 'NOGONUM';\n   IF %NOGONUM \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOGONUM';\n      %GONUMBER = '';\n      %GN = '';\n   END;\n   IF %GN \u00ac= '' THEN %GONUMBER = 'GONUMBER';\n   IF %GONUMBER \u00ac= '' THEN %PARM = '%PARM,GONUMBER';\n   IF %NGS \u00ac= '' THEN %NOGOSTMT = 'NOGOSTMT';\n   IF %NOGOSTMT \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOGOSTMT';\n      %GOSTMT = '';\n      %GS = '';\n   END;\n   IF %GS \u00ac= '' THEN %GOSTMT = 'GOSTMT';\n   IF %GOSTMT \u00ac= '' THEN %PARM = '%PARM,GOSTMT';\n   IF %NINC \u00ac= '' THEN %NOINCLUD = 'NOINC';\n   IF %NOINCLUD \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOINCLUDE';\n      %INC = '';\n      %INCLUDE = '';\n   END;\n   IF %INC \u00ac= '' THEN %INCLUDE = 'INCLUDE';\n   IF %INCLUDE \u00ac= '' THEN %PARM = '%PARM,INCLUDE';\n   IF %NIS \u00ac= '' THEN %NOINSOUR = 'NIS';\n   IF %NOINSOUR \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOINSOURCE';\n      %IS = '';\n      %INSOURCE = '';\n   END;\n   IF %IS \u00ac= '' THEN %INSOURCE = 'IS';\n   IF %INSOURCE \u00ac= '' THEN %PARM = '%PARM,INSOURCE';\n   IF %NINT \u00ac= '' THEN %NOINTER = 'NINT';\n   IF %NOINTER \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOINTER';\n      %INT ='';\n      %INTERUPT= '';\n   END;\n   IF %INT \u00ac= '' THEN %INTERUPT = 'INT';\n   IF %INTERUPT \u00ac= '' THEN %PARM = '%PARM,INTERRUPT';\n   IF %LC \u00ac= '' THEN %LINECNT = '%LC';\n   IF %LINECNT \u00ac= '' THEN %PARM = '%PARM,LINECNT(%LINECNT)';\n   IF %NOLIST \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOLIST';\n      %LIST = '';\n      %LISTSTMT = '';\n   END;\n   IF %LIST \u00ac= '' THEN %PARM = '%PARM,LIST';\n   IF %LISTSTMT \u00ac= '' THEN %PARM = '%PARM,LISTSTMT(%LISTSTMT)';\n   IF %SMSG \u00ac= '' THEN %SMESSAGE = 'SMSG';\n   IF %SMESSAGE \u00ac= '' THEN DO;\n      %PARM = '%PARM,SMESSAGE';\n      %LMSG = '';\n      %LMESSAGE = '';\n   END;\n   IF %LMSG \u00ac= '' THEN %LMESSAGE = 'LMSG';\n   IF %LMESSAGE \u00ac= '' THEN %PARM = '%PARM,LMESSAGE';\n   IF %MN \u00ac= '' THEN %NOMACRO = 'NMAC';\n   IF %NOMACRO \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOMACRO';\n      %MACRO = '';\n      %M = '';\n   END;\n   IF %M \u00ac= '' THEN %MACRO = 'MAC';\n   IF %MACRO \u00ac= '' THEN %PARM = '%PARM,MACRO';\n   IF %NOMAP \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOMAP';\n      %MAP = '';\n   END;\n   IF %MAP \u00ac= '' THEN %PARM = '%PARM,MAP';\n   IF %NMI \u00ac= '' THEN %NMARGINI = 'NMG';\n   IF %NMARGINI \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOMARGINI';\n      %MI = '';\n      %MARGINI = '';\n   END;\n   IF %MI \u00ac= '' THEN %MARGINI = '%MI';\n   IF %MARGINI \u00ac= '' THEN %PARM = '%PARM,MARGINI(%MARGINI)';\n   IF %MAR \u00ac= '' THEN %MARGINS = '%MAR';\n   IF %MARGINS \u00ac= '' THEN %PARM = '%PARM,MARGINS(%MARGINS)';\n   IF %N \u00ac= '' THEN %NAME = '%N';\n   IF %NAME    \u00ac= '' THEN %PARM = '%PARM,NAME %NAME';\n   IF %NONEST \u00ac= '' THEN DO;\n      %PARM = '%PARM,NONEST';\n      %NEST = '';\n   END;\n   IF %NEST \u00ac= '' THEN %PARM = '%PARM,NEST';\n   IF %NONUM \u00ac= '' THEN %NONUMBER = 'NONUM';\n   IF %NONUMBER \u00ac= '' THEN DO;\n      %PARM = '%PARM,NONUMBER';\n      %NUMBER = '';\n      %NUM = '';\n   END;\n   IF %NUM \u00ac= '' THEN %NUMBER = 'NUM';\n   IF %NUMBER \u00ac= '' THEN %PARM = '%PARM,NUMBER';\n   IF %NOF \u00ac= '' THEN %NOOFFSET = 'NOFF';\n   IF %NOOFFSET \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOOFFSET';\n      %OF = '';\n      %OFFSET = '';\n   END;\n   IF %OF \u00ac= '' THEN %OFFSET = 'OFFSET';\n   IF %OFFSET \u00ac= '' THEN %PARM = '%PARM,OFFSET';\n   IF %NOOPT \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOOPT';\n      %OPT = '';\n      %OPTIMIZE = '';\n   END;\n   IF %OPT     \u00ac= '' THEN %OPTIMIZE = 'OPT';\n   IF %OPTIMIZE\u00ac= '' THEN %PARM = '%PARM,OPTIMIZE %OPTIMIZE';\n   IF %NOP \u00ac= '' THEN %NOOPTION = 'NOOPT';\n   IF %NOOPTION \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOOPTIONS';\n      %OP = '';\n      %OPTIONS = '';\n   END;\n   IF %OP \u00ac= '' THEN %OPTIONS = 'OPT';\n   IF %OPTIONS \u00ac= '' THEN %PARM = '%PARM,OPTIONS';\n   IF %NORENT \u00ac= '' THEN DO;\n      %PARM = '%PARM,NORENT';\n      %RENT = '';\n   END;\n   IF %RENT \u00ac= '' THEN %PARM = '%PARM,REENTRANT';\n   IF %SEQ     \u00ac= '' THEN %PARM = '%PARM,SEQ(%SEQ)';\n   IF %SIZE    \u00ac= '' THEN %PARM = '%PARM,SIZE(%SIZE)';\n   IF %NS \u00ac= '' THEN %NOSOURCE = 'NS';\n   IF %NOSOURCE \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOSOURCE';\n      %SOURCE = '';\n      %S = '';\n   END;\n   IF %S \u00ac= '' THEN %SOURCE = 'S';\n   IF %SOURCE \u00ac= '' THEN %PARM = '%PARM,SOURCE';\n   IF %SOURCE = '' & %S = '' & %NS = '' & %NOSOURCE = '' THEN\n      %PARM = '%PARM,SOURCE';\n   IF %NSP \u00ac= '' THEN %NOSPACE = 'NSP';\n   IF %NOSPACE \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOSPACE';\n      %SP = '';\n      %SPACE = '';\n   END;\n   IF %SP \u00ac= '' THEN %SPACE = 'SP';\n   IF %SPACE \u00ac= '' THEN %PARM = '%PARM,SPACE';\n   IF %NOSTMT \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOSTMT';\n      %STMT = '';\n   END;\n   IF %STMT \u00ac= '' THEN %PARM = '%PARM,STMT';\n   IF %NSTG \u00ac= '' THEN %NSTORAGE = 'NS';\n   IF %NSTORAGE \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOSTORAGE';\n      %STORAGE = ''\n      %STG = '';\n   END;\n   IF %STG \u00ac= '' THEN %STORAGE = 'STG';\n   IF %STORAGE \u00ac= '' THEN %PARM = '%PARM,STORAGE';\n   IF %NOSYNTAX \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOSYNTAX(%NOSYNTAX)';\n      %SYNTAX = '';\n   END;\n   IF %SYNTAX \u00ac= '' THEN %PARM = '%PARM,SYNTAX(%SYNTAX)';\n   IF %NOTERM  \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOTERM';\n      %TERM = '';\n   END;\n   IF %TERM    \u00ac= '' THEN %PARM = '%PARM,TERM';\n   IF %NOTEST  \u00ac= '' THEN DO;\n      %PARM = '%PARM,NOTEST';\n      %TEST = '';\n   END;\n   IF %TEST    \u00ac= '' THEN %PARM = '%PARM,TEST';\n   IF %XREF    \u00ac= '' THEN %PARM = '%PARM,XREF(%XREF)';\n   IF %XREF  = '' THEN %PARM = '%PARM,XREF(SHORT)';\n   IF %LINK \u00ac= '' THEN %LINK = 'Y';\n\nDCL %LNKLINE INIT '';\nIF %NOLINKQ = 'NOLINKQ' THEN DO ;  /* HAS THIS MACRO BEEN CALLED BY */\n   %LNKLINE = '//'; %LINK = 'N' ;  /* THE COMPILE AND LINK MACRO    */\nEND;\nELSE DO;                        /* IF NOT CALLED BY COMPILE AND LINK */\n    %LNKLINE =                  /* THEN LEAVE IT AS IT WAS.  PJC...  */\n  '(''        LINK ***** Y/N ****'',LINK,1,''%LINK'')   //';\nEND;\n   DCL %OUTDISP  INIT 'WRITES';\n   /* NOW FIX UP PARMS SUCH AS PRINT, SYSOUT, TEST ETC  */\n   IF %PRINT\u00ac='' & %SYSOUT\u00ac='' THEN STOP 'PRINT AND SYSOUT CODED';\n   IF %PRINT\u00ac='' THEN DO;\n      %PFILE = '%PRINT';\n   END;\n   IF %SYSOUT\u00ac='' THEN\n      %PFILE = 'SYSOUT %SYSOUT';\n   IF %NOPRINT\u00ac='' THEN %PFILE = 'NO PRINT REQUIRED';\n   IF %SYSOUT='' & %PRINT=''   /* DEFAULT TO SYSOUT A */\n   THEN  %PFILE = 'SYSOUT A';\n   DCL %SYMLINE INIT '';\n   IF %TEST\u00ac='' THEN DO;\n      %TEST = 'SYSUT5  UPDATES TEST';\n      %SYMLINE = '(''YOUR SYM FILE WILL BE =======>'',SYMFILE,44,\n      ''%SYMFILE'')';\n   END;\nIF %LIST(1) \u00ac= '' THEN %DSIN = '%LIST(1)';\nDCL %###X INIT '';\nDCL %###L INIT '';\nDCL %MEM INIT '';\n%###X = INDEX(DSIN,'(');\nIF %###X \u00ac= 0 THEN DO;\n   %MEM = SUBSTR(DSIN,%###X);\n   %MEM = SUBSTR(MEM,2);\n   %###L = LENGTH(MEM);\n   %###L = %###L - 1;\n   %MEM = SUBSTR(MEM,1,%###L);\n   %###X = %###X - 1;\n   %DSIN = SUBSTR(DSIN,1,%###X);\n   %###X = '';\nEND;\nIF %NOPANEL = '' THEN\nPANEL ('                  JOL ***** PLI COMMAND PANEL *****')\n      ('             ANY HIGHLIGHTED FIELD CAN BE CHANGED')\n('THE COMPILER OPTIONS FIELD CAN BE CHANGED OR ADDED TO \",\" ARE REQD')\n('          ALL DATA SET NAMES MUST BE FULLY QUALIFIED')\n%LNKLINE\n//('SOURCE DATA SET =============>',DSIN,44,'%DSIN')\n('SOURCE DATA SET MEMBER ======>',MEM,44,'%MEM')\n('OBJECT DATA SET =============>',OBJ,44,'%OBJ')\n('COPY LIBRARY(S) =============>',LIB,80,'%LIB')\n('PRINTER OPTION ==============>',PFILE,44,'%PFILE')\n%SYMLINE\n('COMPILER OPTIONS ============>',PARM,100,'%PARM')\n('*************************************************************');\nIF %MEM \u00ac= '' THEN DO;\n   %DSIN = '%DSIN(%MEM)';\n   %MEM = 'NAME %MEM';\nEND;\nDCL %PTYPE,%ANS INIT '' ;\nDCL %OBJCAT INIT 'DISPLAY ''                     ''';\nDCL %PRTCAT INIT 'DISPLAY ''                      ''';\nDCL %OBJFILE INIT 'OBJ';\nDCL INP DS DSN %DSIN NODEF;\n%PTYPE = INDEX(OBJ,'.');\nIF %PTYPE \u00ac= 0 & %NOPANEL = '' THEN\nPANEL ('                  JOL ***** PLI COMMAND PANEL *****')\n///(' YOU HAVE SPECIFIED A DATA SET AS THE OBJECT FOR THIS COMPILE')\n///('  IS THIS DATA SET CATALOGUED *** Y/N',ANS,1)\n///('***********************************************************');\nIF %OBJ \u00ac= '&&OBJ' & %NOPANEL = '' & %PTYPE > 1 THEN\n   %OBJFILE = 'OBJ2';\nIF %ANS = 'N' THEN\nPANEL ('                  JOL ***** PLI COMMAND PANEL *****')\n      ('             ANY HIGHLIGHTED FIELD CAN BE CHANGED')\n///('YOUR OBJECT DATA SET DEFINITION IS AS FOLLOWS')\n//('',DCLDEF,99,\n            'DCL OBJ2 DS DSN %OBJ SYSDA 5,3,1 TRKS FB 80,6080 EXT')\n///('***********************************************************');\nELSE DCL OBJ2 DS DSN %OBJ NODEF;\nIF %ANS = 'N' THEN DO; %SYSLIN = 'WRITES';\n     %DCLDEF;\n     %OBJCAT = ' CATALOGUE OBJ2';\nEND;\nELSE %SYSLIN = 'UPDATES';\nIF %OBJ = '&&OBJ' THEN\n   %OBJ = 'OBJ';\n     DCL OBJ DS DSN &&OBJ BLKSIZE 800 5 CYLS NORLSE SYSDA EXT;\n%ANS = '';\nIF %OBJ = 'OBJ' THEN %SYSLIN = 'MODS';\n%PTYPE = SUBSTR(PFILE,1,6);\nIF %PTYPE = 'SYSOUT' THEN DO;\n   DCL PRT %PFILE;\n   %SYSOUT = '%PFILE';\n   %PTYPE = 1;\n   %OUTDISP = 'WRITES';\nEND;\n%PTYPE = SUBSTR(PFILE,1,3);\nIF %PTYPE \u00ac= 1 THEN\nIF %PTYPE = 'NO ' THEN DO;\n   DCL PRT DS DUMMY NODEF;\n   %PTYPE = 1;\n   %OUTDISP = 'WRITES';\nEND;\nIF %PTYPE \u00ac= 1 THEN DO;\n%PTYPE = INDEX(PFILE,'.');\nIF %PTYPE > 1 & %NOPANEL = ''  THEN\nPANEL ('                  JOL ***** PLI COMMAND PANEL *****')\n///(' YOU HAVE SPECIFIED A DATA SET FOR THE PRINTOUT OF THIS COMPILE')\n///('  IS THIS DATA SET CATALOGUED *** Y/N',ANS,1)\n///('***********************************************************');\nIF %ANS = 'N' THEN\nPANEL ('                  JOL ***** PLI COMMAND PANEL *****')\n      ('             ANY HIGHLIGHTED FIELD CAN BE CHANGED')\n///('YOUR OUTLIST DATA SET DEFINITION IS AS FOLLOWS')\n('',DCLDEF,80,\n    'DCL PRT DS DSN %PFILE SYSDA 5,3,1 TRKS VBA 138,3990 EXT')\n///('***********************************************************');\nIF %ANS = 'Y' THEN DCL PRT DS DSN %PFILE NODEF;\nIF %ANS = 'N' THEN DO; %OUTDISP = 'WRITES';\n     %DCLDEF;\n     %PRTCAT = 'CATALOGUE PRT';\nEND;\nIF %ANS = 'Y' THEN %OUTDISP = 'UPDATES';\nEND;\n%ANS = '';\nIF %LIB \u00ac= 'NOT REQUIRED' THEN DO;\n  DCL LIB DS %LIB  NODEF;\n  %LIB = 'SYSLIB READS LIB';\nEND;\nELSE %LIB = '';\nIF %SYMFILE \u00ac= '' THEN DO;\n  DCL TEST DS %SYMFILE NODEF;\n  %TEST = 'SYSUT5 UPDATES TEST';\nEND;\nIF %SYMFILE \u00ac= '' & %NOPANEL = ''THEN\nPANEL ('                  JOL ***** PLI COMMAND PANEL *****')\n///(' YOU HAVE SPECIFIED A SYM FILE FOR THIS COMPILE')\n('  THIS DATA SET MUST EITHER BE PREVIOUSLY CATALOGUED ')\n(' OR IT MUST HAVE BEEN PREVIOUSLY DEFINED IN THIS JOL PROGRAM')\n(' THE RECORD/BLOCK SIZE OF A SYM DATA SET IS F 512,512')\n(' THIS SHOULD BE A PARTITIONED DATA SET. IF THE DATA SET EXISTS')\n('JOL WILL CREATE A NEW MEMBER. OTHERWISE SPACE SHOULD BE SPECIFIED')\n(' SPACE = 3,3,1 TRKS IS USUALLY ENOUGH')\n///('***********************************************************');\n     DCL DS002  DS  5 CYLS  SYSDA NORLSE NODCB;\n IF %STEPLIB \u00ac= '' THEN %STEPLIB = 'STEPLIB READS %STEPLIB';\n     PLIPROG: DCL JMG000 PROG  512 K\n         SYSPRINT %OUTDISP PRT\n         %LIB   %TEST %STEPLIB\n         SYSUT1   WRITES   DS002\n         SYSIN    READS    INP\n         SYSLIN   %SYSLIN  %OBJFILE;\n   PLISTEP: RUN PLIPROG '%PARM';\n    IF PLISTEP < 8 THEN DO;\n    %PRTCAT  ;\n    %OBJCAT  ;\n    DISPLAY 'PLI RETURNED LESS THAN 8';\n     END;\nIF %LINK = 'Y' THEN\nIF PLISTEP < 12 THEN\n   LINK %NOPANEL '%OBJ' %MEM PLIBASE %SYSOUT COMP;\n END;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SCHEDSUB": {"ttr": 15620, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x00\\x00\\x00\\x00\\x87%/\\x00\\x87%/\\x16\\x13\\x000\\x000\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "04.00", "flags": 0, "createdate": "1987-09-09T00:00:00", "modifydate": "1987-09-09T16:13:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "JOL"}, "text": " /*****************************************************************/\n /**          Copy Scheduled Jobs          Created MAY, 1987     **/\n /**          -------------------          BY C. CLARKE          **/\n /**                                                             **/\n /** This Macro copies scheduled jobs to a work data set for     **/\n /**    Jol to Submit.                                           **/\n /**                                                             **/\n /** The Jobs are held in members of the Schedule Dats Set in    **/\n /**    various members.                                         **/\n /**                                                             **/\n /*****************************************************************/\nPrepare:MACRO ;\n /*****************************************************************/\n /******************SYMBOLIC DECLARES *****************************/\n /*****************************************************************/\n\n   /* VARIABLES BELOW USED IN LOOPS FOR SUBSCRIPTS ETC */\n\n DCL %INDEX                        INIT('1');\n DCL %work,%work2                  INIT('');\n\n /*****************************************************************/\n /*****CHECK THAT THERE IS VALID INPUT TO THIS MACRO***************/\n /*****************************************************************/\n    IF %LIST(2)\u00ac= ''\n    THEN STOP 'Invalid Parameter on PREPARE Macro';\n\n     %work='%list(1)';\n\n    %work=substr(work,1,8);  /* Make 8 characters long */\n\n /* Check if job prepared for submission already */\n    %k=index(sysjobs1,'%work');\n    %l=index(sysjobs2,'%work');\n    %m=index(sysjobs3,'%work');\n    %n=index(sysjobs4,'%work');\n    %o=index(sysjobs5,'%work');\n    IF %K\u00ac=0 | %L\u00ac=0 | %M\u00ac=0 | %N\u00ac=0 | %O\u00ac=0\n    then EXIT;                /* Job already prepared, leave it */\n\n    write file(schedwrk) from ('* JOL;');\n    write file(schedwrk) from ('include %work;');\n    write  'Prepared ''%work'' For Submission';\n\n /* Add the name to table of submitted jobs */\n    %l=length(SYSJOBS1);  /* SAVE SUBMITTED JOBS */\n    IF %L<240\n    then do;\n       %SYSJOBS1='%SYSJOBS1,%WORK';\n       EXIT;\n    end;\n    %L=LENGTH(SYSJOBS2);\n    IF %L<240\n    then do;\n       %SYSJOBS2='%SYSJOBS2,%WORK';\n       EXIT;\n    end;\n    %L=LENGTH(SYSJOBS3);\n    IF %L<240\n    then do;\n       %SYSJOBS3='%SYSJOBS3,%WORK';\n       EXIT;\n    end;\n    %L=LENGTH(SYSJOBS4);\n    IF %L<240\n    then do;\n       %SYSJOBS4='%SYSJOBS4,%WORK';\n       EXIT;\n    end;\n    %L=LENGTH(SYSJOBS5);\n    IF %L<240\n    then do;\n       %SYSJOBS5='%SYSJOBS5,%WORK';\n       EXIT;\n    end;\n    stop 'Too Many Jobs for SCHEDULE to Handle';\n END ; /* END OF MACRO */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SCHEDULE": {"ttr": 15622, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x00\\x00\\x00\\x00\\x87%/\\x00\\x87%/\\x16\\x13\\x00o\\x00o\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "04.00", "flags": 0, "createdate": "1987-09-09T00:00:00", "modifydate": "1987-09-09T16:13:00", "lines": 111, "newlines": 111, "modlines": 0, "user": "JOL"}, "text": " print: macro (%form=,%class=,%free,%at,%end,%close,%hold,\n            %recfm=,%lrecl=,%blksize=,\n            %dest=,%route=,%copies=,\n            on,part,%paper,%stationery,%outlim=);\n\n\ndcl %f1                    init('');\n\n/* If User codes a parameter, then execute the comand immediately,\n   otherwise we will show the user a menu */\n\n        if %list(1) \u00ac= '' then %f1='%list(1)';\n\n        if %f1 \u00ac= '' & %buildjob='YES'\n        then do;\n            BLD04P                  '   Print  %commtail;';\n            exit;\n        end;\n\nloop:\n\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n        if %list(1) = ''   & %panels \u00ac= 'OFF'\n        then do;\n            list0001='';\n            form    ='';\n            class   ='';\n            free    ='Y';\n            dest    ='';\n            route   ='';\n            copies  ='';\n            outlim  ='';\n\n     panel box   (hi ctr 'Print Command')\n                 (hi ctr '-------------')\n           ////\n           ('      File to Print ===> ',f1,\n                       44,'%f1')\n         / ('      Free File after Printing  ==> ',free,\n                       1,'%free')\n           ('      Number of Copies          ==> ',copies,\n                       3,'%copies')\n           ('      Sysout Class              ==> ',class,\n                       1,'%class')\n           ('      Form Class                ==> ',form,\n                       8,'%form')\n           ('      Destination               ==> ',dest,\n                       8,'%dest')\n           ('      Route                     ==> ',route,\n                       8,'%route')\n           ('      Outlim                    ==> ',outlim,\n                       6,'%outlim')\n   /*    / ('      Format Listing (Y or N)   ==> ',format,\n                       1,'%format')\n   */\nhelpline\n('F3 Exits, F4 Select from Jol Data Base, F5 Select from Catalog.');\n\ncheckf1:\n        if Syspfk=3 then exit;\n\n        if %syspfk=4\n        then do;\n            dbfshow  all 'File to Print';\n            f1='%showsel';\n        end;\n\n        if %syspfk=5\n        then do;\n            showdsn  all 'File to Print';\n            f1='%showsel';\n        end;\n        if f1=''\n        then do;\n            panel reread from f1 'You must supply a file name';\n            goto checkf1;\n        end;\n\n        if syspfk=3 then exit;   /* Back to Caller */\n\ngotfile:\n        commtail=f1;\n\n        if %free   = 'Y'\n        then %free='FREE AT END';\n\n        commtail=commtail || ' %free';\n        IF %CLASS \u00ac='' THEN %commtail='%commtail Class = %class';\n        IF %COPIES\u00ac='' THEN %commtail='%commtail Copies = %copies';\n        IF %FORM\u00ac=''   THEN %commtail='%commtail FORM %FORM ';\n        IF %DEST\u00ac=''   THEN %commtail='%commtail DEST %DEST ';\n        IF %ROUTE\u00ac='' THEN %commtail='%commtail ROUTE %ROUTE ';\n        IF %HOLD\u00ac=''   THEN %commtail='%commtail %HOLD ';\n        IF %OUTLIM\u00ac='' THEN %commtail='%commtail OUTLIM %OUTLIM ';\n/*      IF %FORMAT\u00ac='' THEN %commtail='%commtail FORMAT ';*/\n\n        if %BUILDJOB='YES'\n        then do;\n            BLD04P                  '   Print  %commtail;';\n            exit;\n        end;\n        Print %commtail;           /* Recurs to ourselves */\n        exit;\n\n   end;\n\n   DCL %P INIT 'DCL PRINTER PRINTER %CLASS NODEF ';\n   IF %FORM\u00ac=''              THEN %P='%P FORM %FORM ';\n   IF %DEST\u00ac='' | %ROUTE\u00ac='' THEN %P='%P DEST %DEST %ROUTE ';\n   IF %FREE\u00ac=''              THEN %P='%P %FREE %AT %END %CLOSE      ';\n   IF %HOLD\u00ac=''              THEN %P='%P %HOLD  ';\n   IF %OUTLIM\u00ac=''            THEN %P='%P OUTLIM %OUTLIM ';\n   IF %RECFM   \u00ac=''          THEN %P='%P RECFM %RECFM   ';\n   IF %LRECL   \u00ac=''          THEN %P='%P LRECL %LRECL   ';\n   IF %BLKSIZE \u00ac=''          THEN %P='%P BLKSIZE %BLKSIZE ';\n   IF %ON\u00ac=0                 THEN %P='%P  %LIST(%ON+1) PART PAPER ';\n   ELSE IF %PART\u00ac=0          THEN %P='%P  %LIST(%PART-1) PART PAPER ';\n\n   DCL PRINTER2 PRINTER %CLASS NODEF;\n   DCL NULLFILE DS DUMMY;\n   DCL IEBGENER PROG\n       SYSPRINT WRITES PRINTER2\n       SYSUT1 READS %LIST(1)\n       SYSUT2 WRITES PRINTER\n       SYSIN  READS NULLFILE;\n   IF %COPIES\u00ac=''\n   THEN DO;\n        %P= '%P COPIES=%COPIES';\n   END;\n   %P;\n   RUN IEBGENER;\nEND  /* MACRO */  ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SEARCH": {"ttr": 15625, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "PRINT: MACRO (%FORM=,%CLASS=,%FREE,%AT,%END,%CLOSE,%HOLD,\n           %RECFM=,%LRECL=,%BLKSIZE=,\n           %DEST=,%ROUTE=,%COPIES=,\n           ON,PART,%PAPER,%STATIONERY,%OUTLIM=,             );\n           IF %LIST(1) THEN;\n           ELSE DO;\n               WRITE 'ENTER NAME OF DATA SET OR DSID TO BE PRINTED';\n               READ LIST0001;\n           END;\n           DCL %P INIT 'DCL PRINTER PRINTER %CLASS NODEF ';\n           IF %FORM\u00ac='' THEN %P='%P FORM %FORM ';\n           IF %DEST\u00ac='' | %ROUTE\u00ac='' THEN %P='%P DEST %DEST %ROUTE ';\n           IF %FREE\u00ac='' THEN %P='%P %FREE %AT %END %CLOSE      ';\n           IF %HOLD\u00ac='' THEN %P='%P %HOLD  ';\n           IF %OUTLIM\u00ac='' THEN %P='%P OUTLIM %OUTLIM ';\n           IF %RECFM   \u00ac='' THEN %P='%P RECFM %RECFM   ';\n           IF %LRECL   \u00ac='' THEN %P='%P LRECL %LRECL   ';\n           IF %BLKSIZE \u00ac='' THEN %P='%P BLKSIZE %BLKSIZE ';\n           IF %ON\u00ac=0 THEN %P='%P  %LIST(%ON+1) PART PAPER ';\n           ELSE IF %PART\u00ac=0 THEN %P='%P  %LIST(%PART-1) PART PAPER ';\n           DCL PRINTER2 PRINTER %CLASS NODEF;\n           DCL IEBGENER PROG\n               SYSPRINT WRITES PRINTER2\n               SYSUT1 READS %LIST(1)\n               SYSUT2 WRITES PRINTER\n               SYSIN  READS 'NULLFILE';\n           IF (%SPOOL='JES1' | %SPOOL='JES2' | %SPOOL='JES3')\n           & %COPIES\u00ac=''\n           THEN DO;\n                %P= '%P COPIES=%COPIES';\n                %P;\n%SYSLABEL:      RUN IEBGENER;\n           END;\n           ELSE DO;\n               %P;\n%SYSLABEL:     RUN IEBGENER;\n               IF %COPIES>4 THEN SIGNAL 2,'TOO MANY COPIES:MAX 5 DONE';\n               IF %COPIES>1 THEN PRINT2: RUN IEBGENER;\n               IF %COPIES>2 THEN PRINT3: RUN IEBGENER;\n               IF %COPIES>3 THEN PRINT4: RUN IEBGENER;\n               IF %COPIES>4 THEN PRINT5: RUN IEBGENER;\n           END;\n     END  /* MACRO */  ;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETSTART": {"ttr": 15627, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x133\\x00%\\x00%\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:33:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "JOL"}, "text": "PRINTPDS: MACRO (%TITLE=YES,%COL=30,%CLASS=,%OUTLIM=999999,\n          %LINES=0 );\n\n       /* THIS COMMAND PRINTS THE ENTIRE CONTENTS OF A\n          PARTITIONED DATA SET.\n\n          THE IBM UTILITY 'IEBPTPCH' IS USED.\n       */\n\ndcl %title2         init '';\ndcl %work,%dsname   init  '';\n\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n  if %list(1) = ''   & %panels \u00ac= 'OFF'\n  then do;\n     list0001='';\n     form    ='';\n     class   ='';\n     free    ='Y';\n     dest    ='';\n     route   ='';\n     copies  ='';\n     outlim  ='';\n\n     panel       (hi ctr 'Print Command')\n                 (hi ctr '-------------')\n           ///////\n           ('      Data Set Name to Print    ===> ',list0001,\n                       44,'%list0001')\n         / ('      Free File after Printing  ==> ',free,\n                       44,'%free')\n           ('      Number of Copies          ==> ',copies,\n                       3,'%copies')\n           ('      Sysout Class              ==> ',class,\n                       6,'%class')\n           ('      Form Class                ==> ',form,\n                       6,'%form')\n           ('      Destination               ==> ',dest,\n                       6,'%dest')\n           ('      Route                     ==> ',route,\n                       6,'%route')\n           ('      Outlim                    ==> ',outlim,\n                       6,'%outlim')\n         / ('      Format Listing (Y or N)   ==> ',format,\n                       6,'%format')\n           helpline('Press F3 to Leave without Listing.');\nchkpan:\n           if %syspfk=3 then exit;\n           if %list(1) = ''\n           then do;\n           end;\n              panel reread from list0001 'Please Enter a Filename';\n              goto chkpan;\n           end;\n\n           if %free   = 'Y'\n           then %free='FREE AT END';\n\n   end;\n\n   %dsname='%list(1)';\n   %work=index(dsname ,'.');      /* Does Data Set have  '.' ?*/\n   if %work\u00ac=0\n   THEN %TITLE2='LISTING OF DATA SET %LIST(1)';\n   ELSE %TITLE2='LISTING OF DSID %LIST(1)';\n\n   if %title='NO' then %title2='';     /* nullify it */\n   else if %title\u00ac='YES' then %title2='%title';\n\n   dcl   iebptpch prog\n         sysut1   reads %list(1)\n         sysut2   writes printer\n         sysprint writes printer\n         sysin    reads cntl;\n\n   if %lines=0 then %lines='';\n   else %lines=',stopaft=%lines';\n\n   if %title2\u00ac=''\n   then do;\n         %TITLE2=' TITLE ITEM=(''%TITLE2'',10)' ;\n         %WORK=' TITLE ITEM=('' '')';\n   END;\n   ELSE DO;\n         %WORK='';\n   END;\nDCL CNTL * REPLACE;\n  PRINT TYPORG=PO,MAXFLDS=2%LINES\n  %TITLE2\n  %WORK\n  RECORD FIELD=(80,,,%COL)\nEOF;\nDCL PRINTER PRINTER %CLASS NODCB OUTLIM %OUTLIM\n                ;\n %SYSLABEL: RUN IEBPTPCH;\n          END   /* MACRO */ ;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SETUP": {"ttr": 15629, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "PROTECT: MACRO(%VOL=,%UNIT=);\n/*******************************************************************/\n/*   NOTE'  THIS MACRO VARIES FROM THE MANUAL IN THAT IT REQUIRES **/\n/*          EXTRA PARAMETERS.                                     **/\n/*       IE. VOL=   AND  UNIT=                                    **/\n/*   THIS IS BECAUSE AT PRESENT WE HAVE TO USE IEHPROGM TO        **/\n/*   EXECUTE THE PROTECT COMMAND.    LOOK OUT FOR AN UPDATE       **/\n/*                                   IN THE NEAR FUTURE           **/\n/*   THE FORMAT IS                                                **/\n/*    PROTECT DSN                                                 **/\n/*            FUNCTION   (ADD/DELETE/REPLACE/LIST)                **/\n/*            OLD-PASSWORD                                        **/\n/*            NEWPASSWORD                                         **/\n/*            TYPE       (PWREAD/PWRITE/NOPWREAD/NOWRITE)         **/\n/*            VOL=XXXXXX (VOLUME DSN IS ON)                       **/\n/*            INIT=XXXXX (UNIT TYPE )                             **/\n/*            DATA 'DATA STRING' (TEXT DATA)                      **/\n/*******************************************************************/\n/**    TEST FOR DATA FOR PROTECT COMMAND      **********************/\n/*******************************************************************/\nDCL %PASS,%NEWPASS,%FUNC,%DSN1,%TYPE,%DTA,%UN1,%A INIT '';\nIF %LIST(1) THEN %DSN1='%LIST(1)';\nIF %LIST(2) THEN DO              ;\n      %FUNC='%LIST(2)'           ;\nEND;\nIF %LIST(2)='ADD' THEN %NEWPASS='%LIST(3)' ;\nIF %LIST(2)='REPLACE' THEN DO              ;\n   %PASS='%LIST(3)'; %NEWPASS='%LIST(4)'   ;\nEND;\nIF %LIST(2)='DELETE' THEN %PASS='%LIST(3)';\nIF %LIST(2)='LIST'   THEN %PASS='%LIST(3)';\nIF %LIST(2)='REPLACE' & %LIST(5)='PWREAD'   THEN %TYPE='1';\nIF %LIST(2)='REPLACE' & %LIST(5)='NOPWREAD' THEN %TYPE='3';\nIF %LIST(2)='REPLACE' & %LIST(5)='PWRITE'   THEN %TYPE='3';\nIF %LIST(2)='REPLACE' & %LIST(5)='NOWRITE'  THEN %TYPE='2';\nIF %LIST(2)='ADD' & %LIST(4)='PWREAD'       THEN %TYPE='1';\nIF %LIST(2)='ADD' & %LIST(4)='NOPWREAD'     THEN %TYPE='3';\nIF %LIST(2)='ADD' & %LIST(4)='PWRITE'       THEN %TYPE='3';\nIF %LIST(2)='ADD' & %LIST(4)='NOWRITE'      THEN %TYPE='2';\nIF %LIST(5)='DATA' THEN %DTA='%LIST(6)';\nIF %LIST(6)='DATA' THEN %DTA='%LIST(7)';\nIF %LIST(1)='' THEN DO;\n/*******************************************************************/\n/**    NO DATA SO USE PANEL                   **********************/\n/*******************************************************************/\nPANEL ('   PASSWORD PROTECT MACRO   ')\n      ('   ----------------------   ')\n     /(' ENTER DSNAME                ==>',DSN1,44)\n      (' ENTER VOL SER NUMBER        ==>',VOL,6)\n      (' ENTER UNIT TYPE             ==>',UNIT,6)\n      (' ENTER FUNCTION             ')\n      (' EG. ADD/REPLACE/DELETE/LIST ==>',FUNC,44)\n      (' ENTER PASSWORD              ==>',PASS,8)\n      (' ENTER NEW PASSWORD          ==>',NEWPASS,8)\n     /(' ENTER TYPE OF PROTECTION')\n      (' EG. 1. PASSWORD READ  - NO PASSWORD WRITE ')\n      ('     2. PASSWORD READ  - NO WRITE ')\n      ('     3. PASSWORD WRITE - NO PASSWORD READ     ==>',TYPE,17,'3')\n      (' DATA                                         ==>',DTA,77);\n      END;\n/*******************************************************************/\n/**    SET UP SYMBOLICS FOR CONTROL CARD      **********************/\n/*******************************************************************/\n IF %FUNC='ADD' THEN %FUNC='ADD DSNAME=%DSN1'        ;\n IF %FUNC='REPLACE' THEN %FUNC='REPLACE DSNAME=%DSN1';\n IF %FUNC='DELETE' THEN %FUNC='DELETEP DSNAME=%DSN1' ;\n IF %FUNC='LIST' THEN %FUNC='LIST DSN=%DSN1'         ;\n IF %PASS\u00ac='' THEN %PASS=',PASWORD1=%PASS'           ;\n IF %NEWPASS\u00ac='' THEN %NEWPASS=',PASWORD2=%NEWPASS'  ;\n IF %TYPE\u00ac='' THEN %TYPE=',TYPE=%TYPE'               ;\n IF %DTA\u00ac='' THEN %DTA=',DATA=''%DTA'''              ;\n IF %UNIT='' THEN STOP 'NO UNIT INFORMATION GIVEN'   ;\n IF %VOL='' THEN STOP 'NO VOLUME INFORMATION GIVEN'  ;\n %UN1=',VOL=%UNIT=%VOL'     ;\n/*******************************************************************/\n/**   DECLARE FILES  FOR IEHPROGM             **********************/\n/*******************************************************************/\n  DCL INPUT DS %DSN1        ;\n  DCL PRINTFIL PRINTER NODCB;\nDCL CARDSIN * REPLACE;\n %FUNC%PASS%NEWPASS%TYPE%UN1%DTA\nEOF;\n/*******************************************************************/\n/**   DECLARE PROGRAM                         **********************/\n/*******************************************************************/\n        IEHPROGM: DCL IEHPROGM PROG\n                  SYSUT1   UPDATES INPUT\n                  SYSIN    READS  CARDSIN\n                  SYSPRINT WRITES PRINTFIL ;\n/*******************************************************************/\n/**   RUN PROGRAM                             **********************/\n/*******************************************************************/\n        RUN IEHPROGM ;\nEND; /*  END OF MACRO */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHOWDIRO": {"ttr": 15631, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88%\\x7f\\x00\\x88%\\x7f\\x17P\\x00\\x03\\x00\\x03\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-09-13T00:00:00", "modifydate": "1988-09-13T17:50:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "JOL"}, "text": "PUTGEM : MACRO (%PRJCAT=,%GEMLIB=,%NOPANEL,\n%PASSWD=,%COPYMOD=,%SYSOUT=,%LINK,%TYPE=,%IMS=);\n%TYPE=PLI;                   /* DEFAULT FOR ANZ */\nDCL %LIB INIT '';\nIF %SYSOUT = '' THEN %SYSOUT = 'X';\nIF %PRJCAT= '' THEN DO;\n    /* %PRJCAT = SUBSTR(SYSPREF,1,3); */\n   %PRJCAT = 'GEM.SOURCE.CATALOG';  /* DEFAULT FOR AIR NZ   */\nEND;\nIF %GEMLIB = '' THEN DO;\n   %GEMLIB = 'GEN';\n   %GEMLIB = 'GEM.%GEMLIB.SOURCE';  /* DEFAULT FOR AIR NZ  */\nEND;\nDCL %GEMMOD INIT '';\nIF %LIST(1) \u00ac= '' THEN %GEMMOD = '%LIST(1)';\nIF %NOPANEL = '' THEN\nPANEL ('                  JOL 3.3 GEMPLI')\n  ('            ANY HIGHLIGHTED FIELD CAN BE CHANGED')\n  ('            PROGRAM LANGUAGE TYPE ===>',TYPE,3,'%TYPE')\n  ('            IMS PROGRAM REPLY Y OR N=>',IMS,1,'%IMS')\n  ('            GEM MODULE ==============>',GEMMOD,12,'%GEMMOD')\n  ('            COPY GROUP MODULE =======>',COPYMOD,48,'%COPYMOD')\n  ('            SYSOUT CLASS ============>',SYSOUT,1,'%SYSOUT')\n  ('            PROJECT CATALOGUE =======>',PRJCAT,44,'%PRJCAT')\n  ('            GEM LIBRARY =============>',GEMLIB,44,'%GEMLIB')\n  ('        *****************************************************');\nIF %COPYMOD \u00ac= '' THEN %COPYMOD = '- CHGIN %COPYMOD';\nIF %PASSWD \u00ac= '' THEN %PASSWD = '/(%PASSWD)';\nDCL POLIB DS DSN &&GEM(%GEMMOD) SYSDA 5,2,2 CYLS FB 80,6080;\nDCL GEMPRT SYSOUT %SYSOUT;\nDCL GEMPARM * REPLACE;\n- LIBRARY %GEMLIB\n- PUT %GEMMOD,OUT=POLIB,PO\n%COPYMOD\nEOF;\nGEM: DCL JQHGEM3 PROG NODYNAMS=1\nPOLIB WRITES POLIB\nGEMPRJ READS %PRJCAT\nSYSIN READS GEMPARM\nSYSLIST WRITES GEMPRT\nSYSPRINT WRITES GEMPRT;\nRUN GEM;\nIF GEM >= 12 THEN DO;\nSTOP 'COPY OF %GEMMOD FAILED .... CHECK LISTING FOR ERRORS';\nEND;\n   DCL INSRC DS &&GEM(%GEMMOD) LIKE = POLIB;\n   DCL OUTSRC DS DSN &&LVL(%GEMMOD) SYSDA 5,2,2 CYLS FB 80,19040;\n   DCL LVLPRT SYSOUT %SYSOUT ;\n  LVLS:DCL LVLS PROG\n      GEMSRC READS INSRC\n      UPDTSRC WRITES OUTSRC\n      SYSPRINT WRITES LVLPRT;\n      RUN LVLS;\n    IF (LVLS\u00ac=0) THEN DO;\n          STOP 'FLASHER UPDATE OF SOURCE FAILED';\n    END;\n    IF %IMS='Y' & %TYPE='ASM' THEN DO;\n          IMSASM '&&LVL(%GEMMOD)' SOUT %SYSOUT LINK NAME %GEMMOD;\n    END;\n    IF %IMS='Y' & %TYPE='PLI' THEN DO;\n          IMSPLI '&&LVL(%GEMMOD)' SOUT %SYSOUT LINK NAME %GEMMOD;\n    END;\n   IF %TYPE='ASM' & %IMS='N' THEN DO;\n      ASMANZ '&&LVL(%GEMMOD)' SYSOUT %SYSOUT LINK NAME %GEMMOD;\n   END;\n   IF %TYPE='PLI' & %IMS='N' THEN DO;\n      PLIANZ '&&LVL(%GEMMOD)'  LINK\n      SYSOUT %SYSOUT;\n      END;\n   IF %TYPE='COB' THEN DO;\n      COBANZ '&&LVL(%GEMMOD)'  LINK\n      SYSOUT %SYSOUT;\n   END;\n   IF %TYPE='FOR' THEN DO;\n      FORANZ '&&LVL(%GEMMOD)' LINK SYSOUT %SYSOUT;\n   END;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHOWDSNO": {"ttr": 15633, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88%\\x7f\\x00\\x88%\\x7f\\x17P\\x00\\x03\\x00\\x03\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-09-13T00:00:00", "modifydate": "1988-09-13T17:50:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "JOL"}, "text": "     /* This is the Jol Program Register Command. */\n\n     /* Using the Register Command, you can tell Jol about programs,\n        such as the Language it is coded in, Compiler Options normally\n        used, Inputs and Outputs and so on.\n\n        Then the Jol COMPILE, and EXEC Commands can be used to\n        COMPILE, LINK and RUN these Registered Programs.\n\n        You can REGISTER Programs interactively, or use a standard\n        editor to create the files (it must conform to Jol's\n        standard way of doing things!).\n\n        Whenever the Program needs to be compiled, you can code:\n\n            COMPILE MASTUPDT;\n\n        and the program will be compiled.\n\n\n        To EXECUTE the Program, you can code the following:\n\n            EXEC MASTUPDT 'INPUT.MASTER' 'TRANS.INPUT' 'MASTER.OUT'\n                 PRINTER;\n\n         OR\n\n           DCL INPUT   DS INPUT.MASTER;\n           DCL OUTPUT  DS OUTPUT.MASTER VB 70,7000 SYSDA 10 CYLS;\n           DCL TRANSIN DS TRANS.INPUT;\n           DCL PRT     PRINTER B FORM 100 FBA 121,1210;\n           EXEC MASTUPDT INPUT,TRANSIN,OUTPUT,PRT;\n\n\n        It will even be possible to have standard default data sets\n        that the program will use, unless over-ridden, thus it is\n        possible to simply code:-\n\n            EXEC MASTUPDT;\n\n        To have the program executed. (not this version!!!!).\n\n       SEE THE JOL DOCUMENTATION FOR FURTHER DETAILS.\n\n    */\n   REGISTER:MACRO(%LANG=,      /*DEFAULT LANGUAGE IS PL1             */\n          %ASM,%FORT,%COB,%COBOL,%PLI,%PL1,\n          %FUNC='',            /*FUNCTION MUST BE CODED BY USER      */\n          %COMPOPT=,           /*DEFAULT COMPILER OPTIONS ARE NONE   */\n          %LINKOPT=,           /*DEFAULT LINK EDITOR OPTIONS ARE NONE*/\n          %COPYLIB=,           /*NO DEFAULT INCLUDE OR COPYLIB       */\n          %SOURCE=,            /*NO DEFAULT SOURCE LIBRARY           */\n          %LOAD=,              /*NO DEFAULT LOAD MODULE LIBRARY      */\n          %AUTOCALL=,          /*NO DEFAULT LINK AUTO CALL LIB       */\n          %FILES=,             /*NO DEFAULT INPUTS                   */\n          %REPLACE,            /*REPLACE OPTION MAY BE CODED         */\n          %NAME=,              /*NAME TO BE GIVEN TO LOAD MODULE (IF */\n                               /*        DIFFERENT TO PROGRAM NAME). */\n          %PARM=,              /*NO DEFAULT PROGRAM PARAMETER        */\n          %SSI=);\n\n    DCL %CNT    INIT 0;\n    DCL %SUB    INIT 0;\n    DCL %SUBMOD INIT '';\n    DCL %JOLDS INIT '%SYSPREF.JOL' ext;\n    DCL %PGMNAME                              INIT '';\n\n    if %list(1)\u00ac='' then %PGMNAME=%LIST(1);\n /* IF %PGMNAME =''   /* No Program Name ? */\n /* then */ do;\n        panel %boxcolor box\n        //(ctr %hedcolor 'Jol Program Registration Panel')\n        /////\n  ('        Please Enter Program Name to Register ===>',PGMNAME,8,'')\n /('        Jol Data Set Name                     ===>',\n                     Jolds,44,'%$jolpgms')\n        helpline ('F3 Exits with no Action')\n        ;\n\n    if %syspfk=3 | %syspfk =15 then exit;\n\ngetprog:\n        if pgmname=''\n        then do;\n                panel reread from pgmname\n                'We need the Program Name to Register';\n                goto getprog;\n        end;\n        %X=TYPE(PGMNAME);\n        IF %X\u00ac='CHAR'\n        then do;\n                panel reread from pgmname\n                'Program Names must start with an Alpha Character';\n                goto getprog;\n        end;\n    end;\n\n        if %system='SHELL' then\n        alloc f(reg) da('%PGMNAME.pgm') new;\n        else alloc f(reg) da('%jolds(%PGMNAME)') shr;\n        open f(reg) output;\n        write f(reg) from(\n  ' /* THIS PROGRAM WAS REGISTERED ON %DAY %DAYNO %MONTH %YEAR */');\n\n        IF %func='' THEN DO;\n           panel %boxcolor box\n           //(ctr %hedcolor 'Jol Program Registration Panel')\n           //\n           (ctr 'Please Enter a comment describing what 'hi'%PGMNAME')\n           (ctr 'does.  This is simply a description that is written')\n           (ctr 'in the Registration Details and is for your')\n           (ctr 'use ONLY.')\n           //\n           //('    Enter Program Function (Optional)')\n           //('          ======> ',func,50,\n               'For Example: Updates Payroll Master Files');\n        End;\n\n        write f(reg) from(\n        ' /* FUNCTION %FUNC  */ ');\n\n        IF %LANG='' THEN DO;\n             IF %COBOL\u00ac='' THEN %COBOL='COB';\n             %LANG='%ASM%COB%COBOL%PLI%PL1%FORT';\n        END;\n        IF %LANG='' THEN DO;\n           panel %boxcolor box\n           //(ctr %hedcolor 'Jol Program Registration Panel')\n           //\n           (ctr 'Please Enter the Language ' hi '%PGMNAME')\n           (ctr 'is written in.  If you are unsure (for example')\n           (ctr 'the program is a Utility), enter ASM.')\n           //\n           (ctr 'You can code ASM, COB, FORT, PLI or ALGOL.')\n           (ctr '(Support for other languages will be available soon)')\n           //(ctr 'Enter Language    ======> ',lang,8,'PLI');\n        End;\n\nchecklan:\n        IF %LANG='PLI' | %LANG='PL1'\n        | %LANG='COBOL' | %LANG='COB'\n        | %LANG='ALGOL'\n        | %LANG='FORTRAN' | %LANG='FORT'\n        | %LANG='ASSEMBLER' | %LANG='ASM'\n        THEN DO;\n           SET LANG=SUBSTR(LANG,1,3);\n           IF %LANG='ASS' THEN %LANG='ASM';\n           IF %LANG='FOR' THEN %LANG='FORT'; /* 6TH. AUGUST 1982 */\n           IF %LANG='ALG' THEN %LANG='ALGOL'; /* 6TH. AUGUST 1982 */\n        END;\n        ELSE DO;\n           %ERROR=1;\n            Panel reread from lang 'Invalid Language, Please Reenter';\n            goto checklan;\n        END;\n        IF %SOURCE='' THEN %SOURCE='%SYSUID.%LANG';\n        IF %COPYLIB='' THEN %COPYLIB='%SYSUID.%LANG';\n        IF %LOAD='' THEN %LOAD='%SYSUID.LOAD';\n        IF %AUTOCALL='' THEN DO;\n            IF %LANG\u00ac='ASM' THEN\n            %AUTOCALL='SYS1.%LANG'||'LIB';\n        END;\n        IF %LINKOPT='' THEN %LINKOPT='LIST';\n        IF %COMPOPT='' THEN %COMPOPT='LIST';\nLABEL RPANL;\n   PANEL %boxcolor box\n  /(ctr %hedcolor 'Other details for program %PGMNAME')\n  /(hi 'Options necessary for the Jol COMPILE Command')\n  /('    Where is the %lang Source Code for %pgmname ?')\n   ('               ===>',SOURCE,44,'%SOURCE')\n   ('    And the COPY Library Name ?')\n   ('               ===>',COPYLIB,44,'%COPYLIB')\n   ('    Default COMPILER Options')\n   ('               ===>',COMPOPT,50,'%COMPOPT')\n  /(hi 'Options necessary for the Jol LINK Command')\n  /('    The LOAD Module Library Name ?')\n   ('               ===>',LOAD,44,'%LOAD')\n   ('    Default AUTO CALL Library')\n   ('               ===>',AUTOCALL,44,'%AUTOCALL'\n/* ('    What SUB MODULES are used?')\n   ('               ===>',SUBMOD,44,'%SUBMOD') */\n   ('    Default LINK EDIT Options')\n   ('               ===>',LINKOPT,50,'%LINKOPT')\n   ;\n\ndetcheck:\n    /*\n    IF %SOURCE  = ''\n    then do;\n        panel reread from source\n             'Please Enter the Program Source Code Library';\n        goto detcheck;\n    end;\n    IF %copylib = ''\n    then do;\n        panel reread from copylib\n             'Please Enter the Macro/Source Code COPY Library';\n        goto detcheck;\n    end;\n    IF %compopt = ''\n    then do;\n        panel reread from compopt\n             'Please Enter the Default Compiler Options';\n        goto detcheck;\n    end;\n    IF %load    = ''\n    then do;\n        panel reread from load\n             'Please Enter the Load Module Library';\n        goto detcheck;\n    end;\n    IF %linkopt = ''\n    then do;\n        panel reread from linkopt\n             'Please Enter the Default Link Options';\n        goto detcheck;\n    end;\n  */\n        write f(reg) from(\n ' /* Note: The ''IF'' Statements allow for Overrides on the EXEC */');\n        write f(reg) from(\n ' %%PGMNAME=''%PGMNAME'';  %%LANG=''%LANG'';');\n        write f(reg) from(\n ' If %%COMPOPT=''''  Then  %%COMPOPT=''%COMPOPT'';');\n        write f(reg) from(\n ' If %%LINKOPT=''''  Then  %%LINKOPT=''%LINKOPT'';');\n        write f(reg) from(\n ' If %%SOURCE=''''   Then  %%SOURCE=''%SOURCE'';');\n        write f(reg) from(\n ' If %%LOAD=''''     Then  %%LOAD=''%LOAD'';');\n        write f(reg) from(\n ' If %%LIB=''''      Then  %%LIB=''%COPYLIB'';');\n        write f(reg) from(\n ' If %%AUTOCALL='''' Then  %%AUTOCALL=''%AUTOCALL'';');\n\n        %file1='SYSPRINT';\n        %CNT=1;\n\n PANEL %boxcolor box\n / (ctr %hedcolor 'Program %pgmname Internal Sort Details Panel.')\n / (ctr 'On this Panel, please indicate the number and size of any')\n   (ctr 'SORT work areas required.')\n / (ctr 'These will be automatically created when the program')\n   (ctr 'is executed with an EXEC Command.')\n //('  Number of Sort areas    ====>', sortnum ,5,'')\n  /('  Size of Sort areas      ====>', sortsize,5,'')\n / (ctr 'NOTE:  Please leave blank if the program does not')\n   (ctr 'use an internal SORT.')\n ;\n\n        write f(reg) from(\n '    %%SORTNUM =''%SORTNUM'';');\n        write f(reg) from(\n '    %%SORTSIZE=''%SORTSIZE'';');\n\n getmore:\n\n\n PANEL %boxcolor box\n /(ctr %hedcolor 'Program %pgmname File Specification Panel.')\n /(ctr 'On this Panel, please enter all the Filenames or DDnames that')\n  (ctr 'use Files.  You specify the Filename, and READS, WRITES, etc.')\n /(ctr 'NOTE:  In the ACTION Column, code READS, WRITES, MODS,')\n   (ctr 'or UPDATES, or MAY READ, MAY WRITE etc.')\n  /('               DDname           Action')\n  /('            ',FILE1,8,'%file1') (' ',Mayf1,10,' ',13,30)\n   ('            ',FILE2,8,'      ') (' ',Mayf2,10,' ',14,30)\n   ('            ',FILE3,8,'      ') (' ',Mayf3,10,' ',15,30)\n   ('            ',FILE4,8,'      ') (' ',Mayf4,10,' ',16,30)\n   ('            ',FILE5,8,'      ') (' ',Mayf5,10,' ',17,30)\n   ('            ',FILE6,8,'      ') (' ',Mayf6,10,' ',18,30)\n //(ctr\n'Note: If the last DDname is used, a second screen will appear.')\n ;\n\nchkpan:\n   /* Make each DDname 8 characters in length for a better image. */\n        file1=substr(file1||'        ',1,8);\n        file2=substr(file2||'        ',1,8);\n        file3=substr(file3||'        ',1,8);\n        file4=substr(file4||'        ',1,8);\n        file5=substr(file5||'        ',1,8);\n        file6=substr(file6||'        ',1,8);\n\n        if %file1\u00ac=''\n        then do;\n            if %mayf1=''\n            then do;\n               panel reread from mayf1 'Please Enter READS, WRITES etc'\n               ;\n                redo chkpan;\n            end;\n        end;\n\n        if %file2\u00ac=''\n        then do;\n            if %mayf2=''\n            then do;\n               panel reread from mayf2 'Please Enter READS, WRITES etc'\n               ;\n                redo chkpan;\n            end;\n        end;\n\n        if %file3\u00ac=''\n        then do;\n            if %mayf3=''\n            then do;\n               panel reread from mayf3 'Please Enter READS, WRITES etc'\n               ;\n                redo chkpan;\n            end;\n        end;\n\n        if %file4\u00ac=''\n        then do;\n            if %mayf4=''\n            then do;\n               panel reread from mayf4 'Please Enter READS, WRITES etc'\n               ;\n                redo chkpan;\n            end;\n        end;\n\n        if %file5\u00ac=''\n        then do;\n            if %mayf5=''\n            then do;\n               panel reread from mayf5 'Please Enter READS, WRITES etc'\n               ;\n                redo chkpan;\n            end;\n        end;\n\n        if %file6\u00ac=''\n        then do;\n            if %mayf6=''\n            then do;\n               panel reread from mayf6 'Please Enter READS, WRITES etc'\n               ;\n                redo chkpan;\n            end;\n        end;\n\n        %typ1=''; %typ2=''; %typ3='';\n        %typ4=''; %typ5=''; %typ6='';\n\n        if index(caps(mayf1),'WRITE')\n        |  index(caps(mayf1),'MOD')\n        & %file1\u00ac=''\n        then do;\npanel %boxcolor box\n  (ctr 'If your File requires specific File Types')\n  (ctr 'or LRECL, please insert them here or leave them empty.')\n/ (ctr 'For example, enter 'hi'FB 200 or VB 6400')\n///\n        ('                     %file1  ',typ1,10,'');\n        end;\n\n        if index(caps(mayf2),'WRITE')\n        |  index(caps(mayf2),'MOD')\n        & %file2\u00ac=''\n        then do;\npanel %boxcolor box\n  (ctr 'If your File requires specific File Types')\n  (ctr 'or LRECL, please insert them here or leave them empty.')\n/ (ctr 'For example, enter 'hi'FB 200 or VB 6400')\n///\n        ('                     %file2  ',typ2,10);\n        end;\n\n        if index(caps(mayf3),'WRITE')\n        |  index(caps(mayf3),'MOD')\n        & %file3\u00ac=''\n        then do;\npanel %boxcolor box\n  (ctr 'If your File requires specific File Types')\n  (ctr 'or LRECL, please insert them here or leave them empty.')\n/ (ctr 'For example, enter 'hi'FB 200 or VB 6400')\n///\n        ('                     %file3  ',typ3,10);\n        end;\n\n        if index(caps(mayf4),'WRITE')\n        |  index(caps(mayf4),'MOD')\n        & %file4\u00ac=''\n        then do;\npanel %boxcolor box\n  (ctr 'If your File requires specific File Types')\n  (ctr 'or LRECL, please insert them here or leave them empty.')\n/ (ctr 'For example, enter 'hi'FB 200 or VB 6400')\n///\n        ('                     %file4  ',typ4,10);\n        end;\n\n        if index(caps(mayf5),'WRITE')\n        |  index(caps(mayf5),'MOD')\n        & %file5\u00ac=''\n        then do;\npanel %boxcolor box\n  (ctr 'If your File requires specific File Types')\n  (ctr 'or LRECL, please insert them here or leave them empty.')\n/ (ctr 'For example, enter 'hi'FB 200 or VB 6400')\n///\n        ('                     %file5  ',typ5,10);\n        end;\n\n        if index(caps(mayf6),'WRITE')\n        |  index(caps(mayf6),'MOD')\n        & %file6\u00ac=''\n        then do;\npanel %boxcolor box\n  (ctr 'If your File requires specific File Types')\n  (ctr 'or LRECL, please insert them here or leave them empty.')\n/ (ctr 'For example, enter 'hi'FB 200 or VB 6400')\n///\n        ('                     %file6  ',typ6,10);\n        end;\n\n        if %file1\u00ac=''\n        then do;\n             write f(reg) from('    f%cnt=''%file1 %mayf1'';');\n             if typ1\u00ac='' then write f(reg) from('   t%cnt=''%typ1'';');\n             %cnt=%cnt+1;\n        end;\n\n        if %file2\u00ac=''\n        then do;\n             write f(reg) from('    f%cnt=''%file2 %mayf2'';');\n             if typ2\u00ac='' then write f(reg) from('   t%cnt=''%typ2'';');\n             %cnt=%cnt+1;\n        end;\n\n        if %file3\u00ac=''\n        then do;\n             write f(reg) from('    f%cnt=''%file3 %mayf3'';');\n             if typ3\u00ac='' then write f(reg) from('   t%cnt=''%typ3'';');\n             %cnt=%cnt+1;\n        end;\n\n        if %file4\u00ac=''\n        then do;\n             write f(reg) from('    f%cnt=''%file4 %mayf4'';');\n             if typ4\u00ac='' then write f(reg) from('   t%cnt=''%typ4'';');\n             %cnt=%cnt+1;\n        end;\n\n        if %file5\u00ac=''\n        then do;\n             write f(reg) from('    f%cnt=''%file5 %mayf5'';');\n             if typ5\u00ac='' then write f(reg) from('   t%cnt=''%typ5'';');\n             %cnt=%cnt+1;\n        end;\n\n        if %file6\u00ac=''\n        then do;\n             write f(reg) from('    f%cnt=''%file6 %mayf6'';');\n             if typ6\u00ac='' then write f(reg) from('   t%cnt=''%typ6'';');\n             %cnt=%cnt+1;\n        end;\n        %file1='';\n        IF %file6 \u00ac= '' THEN REDO getmore;\n\n        close f(reg);\n        freefile f(reg);\n\n  END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SORT": {"ttr": 15635, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x04\\'\\x7f\\x01\\x04\\'\\x7f\\x06\"\\x00e\\x00e\\x00\\x00\\xc3\\xd3\\xc1\\xd9\\xd2\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-10-03T00:00:00", "modifydate": "2004-10-03T06:22:53", "lines": 101, "newlines": 101, "modlines": 0, "user": "CLARKE"}, "text": "   /* THIS IS THE JOL PROGRAM REGISTER COMMAND  */\n   /* USING THE REGISTER COMMAND, ONE CAN DEFINE TO JOL PROGRAM\n      CHARACTERISTICS AND OTHER DETAILS OF THESE PROGRAMS, SUCH AS\n      THE LANGUAGE THEY ARE CODED IN, COMPILER OPTIONS NORMALLY USED,\n      INPUTS AND OUTPUTS AND SO ON.\n\n      THEN THE JOL COMPILE, AND EXEC COMMANDS CAN BE SIMPLY USED TO\n      COMPILE, LINK AND RUN THESE PROGRAMS.\n\n      FOR EXAMPLE, THE COMMAND\n\n           REGISTER MASTUPDT  LANG PLI\n                    FUNC 'THIS PROGRAM UPDATES PAYROLL'\n                    COMPOPT 'NEST,GOSTMT'\n                    LINKOPT 'LIST,MAP'\n                    SOURCE 'APPL.SOURCE.LIB'\n                    COPYLIB 'APPL.COPY.LIB'\n                    LOAD 'APPL.LOADLIB'\n                    FILES  'MASTIN READS,MASTOUT WRITES';\n\n           WILL REGISTER THE PROGRAM TO JOL.\n\n      WHENEVER THE PROGRAM IS TO BE COMPILED, IT IS SIMPLY A\n      MATTER OF CODING:-\n\n          COMPILE MASTUPDT;\n\n      AND THE PROGRAM WILL BE COMPILED.\n\n      TO EXECUTE THE PROGRAM, SIMPLY CODE THE FOLLOWING:-\n\n          EXEC MASTUPDT 'INPUT.MASTER' 'TRANS.INPUT' 'MASTER.OUT'\n               PRINTER;\n\n       OR\n\n         DCL INPUT   DS INPUT.MASTER;\n         DCL OUTPUT  DS OUTPUT.MASTER VB 70,7000 SYSDA 10 CYLS;\n         DCL TRANSIN DS TRANS.INPUT;\n         DCL PRT     PRINTER B FORM 100 FBA 121,1210;\n         EXEC MASTUPDT INPUT,TRANSIN,OUTPUT,PRT;\n\n      IT WILL EVEN BE POSSIBLE TO HAVE STANDARD DEFAULT DATA SETS\n      THAT THE PROGRAM WILL USE, UNLESS OVER-RIDDEN, THUS IT IS\n      POSSIBLE TO SIMPLY CODE:-\n\n          EXEC MASTUPDT;\n\n     TO HAVE THE PROGRAM EXECUTED. (NOT THIS VERSION!!!!).\n\n     SEE THE JOL DOCUMENTATION FOR FURTHER DETAILS.\n\n  */\n  REGISTER:MACRO(%LANG=,      /*DEFAULT LANGUAGE IS PL1             */\n         %ASM,%FORT,%COB,%COBOL,%PLI,%PL1,\n         %FUNC='',            /*FUNCTION MUST BE CODED BY USER      */\n         %COMPOPT=,           /*DEFAULT COMPILER OPTIONS ARE NONE   */\n         %LINKOPT=,           /*DEFAULT LINK EDITOR OPTIONS ARE NONE*/\n         %COPYLIB=,           /*NO DEFAULT INCLUDE OR COPYLIB       */\n         %SOURCE=,            /*NO DEFAULT SOURCE LIBRARY           */\n         %LOAD=,              /*NO DEFAULT LOAD MODULE LIBRARY      */\n         %AUTOCALL=,          /*NO DEFAULT LINK AUTO CALL LIB       */\n         %FILES='',           /*NO DEFAULT INPUTS                   */\n         %REPLACE,            /*REPLACE OPTION MAY BE CODED         */\n         %NAME=,              /*NAME TO BE GIVEN TO LOAD MODULE (IF */\n                              /*        DIFFERENT TO PROGRAM NAME). */\n         %PARM=,              /*NO DEFAULT PROGRAM PARAMETER        */\n         %SSI='');\n\n   DCL %CNT    INIT 0;\n   DCL %SUB    INIT 0;\n   DCL %SUBMOD INIT '';\n   DCL %JOLDS1 INIT '%SYSPREF.JOL';\n   DCL %ERROR, %PGMNAME, %ERR01A                               INIT '';\n   DCL %ERR01, %ERR02, %ERR03, %ERR04, %ERR05, %ERR06, %ERR07  INIT '';\n   DCL %ERR08, %ERR09, %ERR10, %ERRSTAT                        INIT '';\n   IF %LIST(1) THEN %PGMNAME=%LIST(1);\n   IF %REPLACE='REPLACE' THEN %REPLACE='REPL';\n   ELSE %REPLACE='ADD';\n   IF %LIST(1) THEN;ELSE DCL %LIST0001 INIT '';\n   IF %LIST(2) THEN STOP 'INVALID ITEM %LIST(2) CODED';\n   DCL           %LIST0002,%LIST0003,%LIST0004,%LIST0005,\n        %LIST0006,%LIST0007,%LIST0008,%LIST0009,%LIST0010,\n        %LIST0011,%LIST0012,%LIST0013,%LIST0014,%LIST0015,\n        %LIST0016,%LIST0017,%LIST0018,%LIST0019,%LIST0020,\n        %LIST0021,%LIST0022,%LIST0023,%LIST0024,%LIST0025,\n        %LIST0026,%LIST0027,%LIST0028,%LIST0029,%LIST0030,\n        %LIST0031,%LIST0032,%LIST0033,%LIST0034,%LIST0035,\n        %LIST0036,%LIST0037,%LIST0038,%LIST0039,%LIST0040,\n        %LIST0041,%LIST0042,%LIST0043,%LIST0044,%LIST0045,\n        %LIST0046,%LIST0047,%LIST0048,%LIST0049,%LIST0050,\n                                 INIT '';\n   DCL %O1,%O2,%O3,%O4,%O5,%O6,%O7,%O8,%O9,%O10,\n       %O11,%O12,%O13,%O14,%O15,%O16,%O17,%O18,%O19,%O20,\n       %O21,%O22,%O23,%O24,%O25,\n       %TYP001,%TYP002,%TYP003,%TYP004,%TYP005,%TYP006,\n       %TYP007,%TYP008,%TYP009,%TYP010,%TYP011,%TYP012,\n       %TYP013,%TYP014,%TYP015,%TYP016,%TYP017,%TYP018,\n       %TYP019,%TYP020,%TYP021,%TYP022,%TYP023,%TYP024,%TYP025,\n                                 INIT '';\n   DCL %I1,%I2,%I3,%I4,%I5,%I6,%I7,%I8,%I9,%I10,\n       %I11,%I12,%I13,%I14,%I15,%I16,%I17,%I18,%I19,%I20,\n       %I21,%I22,%I23,%I24,%I25\n                                 INIT '';\n   IF %LANG='' THEN DO;\n         IF %COBOL\u00ac='' THEN %COBOL='COB';\n         %LANG='%ASM%COB%COBOL%PLI%PL1%FORT';\n   END;\n   IF %LANG='' THEN DO; WRITE 'ENTER TYPE OF PROGRAM';READ LANG;END;\n   IF %LANG='PLI' | %LANG='PL1'\n   | %LANG='COBOL' | %LANG='COB'\n   | %LANG='ALGOL'\n   | %LANG='FORTRAN' | %LANG='FORT'\n   | %LANG='ASSEMBLER' | %LANG='ASM'\n   THEN DO;\n      SET LANG=SUBSTR(LANG,1,3);\n      IF %LANG='ASS' THEN %LANG='ASM';\n      IF %LANG='FOR' THEN %LANG='FORT'; /* 6TH. AUGUST 1982 */\n      IF %LANG='ALG' THEN %LANG='ALGOL'; /* 6TH. AUGUST 1982 */\n   END;\n   ELSE DO;\n      %ERROR=1;\n      STOP 'LANGUAGE IS INCORRECTLY SET TO ''%LANG''';\n   END;\n   IF %SOURCE='' THEN %SOURCE='%SYSUID.%LANG';\n   IF %COPYLIB='' THEN %COPYLIB='%SYSUID.%LANG';\n   IF %LOAD='' THEN %LOAD='%SYSUID.LOAD';\n   IF %AUTOCALL='' THEN DO;\n       IF %LANG\u00ac='ASM' THEN\n       %AUTOCALL='SYS1.%LANG'||'LIB';\n   END;\n   IF %LINKOPT='' THEN %LINKOPT='LIST';\n   IF %COMPOPT='' THEN %COMPOPT='LIST';\n  LABEL RPANL;\n  PANEL\n  ('NAME OF PROGRAM TO BE REGISTERED ',PGMNAME,8,'%PGMNAME')\n  ('NAME OF YOUR JOL DATA SET ',JOLDS1,36,'%JOLDS1')\n  ('%ERR01 %ERR01A')\n  ('LANGUAGE (ASM,COBOL,PLI,FORT)    ',LANG,8,'%LANG')\n  ('                        %ERR02')\n  ('WHAT DOES THE PROGRAM DO?',FUNC,80'%FUNC')\n  ('                        %ERR03')\n  ('WHAT IS THE SOURCE LIBRARY NAME? ',SOURCE,44,'%SOURCE')\n  ('                        %ERR04')\n  ('WHAT IS THE COPY LIBRARY NAME?   ',COPYLIB,44,'%COPYLIB')\n  ('                        %ERR05')\n  ('LOAD MODULE LIBRARY NAME         ',LOAD,44,'%LOAD')\n  ('                        %ERR06')\n  ('DEFAULT AUTO CALL LIBRARY        ',AUTOCALL,44,'%AUTOCALL'\n  ('                        %ERR07')\n  ('WHAT SUB MODULES ARE USED?',SUBMOD,44,'%SUBMOD')\n  ('                        %ERR08')\n  ('DEFAULT COMPILER OPTIONS         ',COMPOPT,80,'%COMPOPT')\n  ('                        %ERR09')\n  ('DEFAULT LINK EDIT OPTIONS'       ,LINKOPT,80,'%LINKOPT')\n  ('                        %ERR10');\n  IF %SYSPFK=3 | %SYSPFK=15 THEN EXIT;\n  %CNT=%CNT+1; /* ONLY REPEAT SCREEN 2 TIMES UNLESS THE PGNAME IS\n                  WRONG (IF IT IS THE SECOND TIME USE STOP COMMAND) */\n\n %ERR01A ='';\n %ERR01=''; %ERR02=''; %ERR03=''; %ERR04=''; %ERR05=''; %ERR06='';\n %ERR07=''; %ERR08=''; %ERR09=''; %ERR10=''; %ERRSTAT = '';\n   IF %PGMNAME = '' THEN\n                 %ERR01 = 'ERROR ENTER PROGRAM NAME TO BE REGISTERED ';\n   IF %JOLDS1 = '' THEN\n                %ERR01A = 'ERROR ENTER JOL DATA SET NAME';\n   IF %LANG    = '' THEN %ERR02 = 'ERROR ENTER LANGUAGE ';\n   IF %FUNC    = '' THEN %ERR03 = 'ERROR ENTER PROGRAM FUNCTION ';\n   IF %SOURCE  = '' THEN %ERR04 = 'ERROR ENTER PROGRAM SOURCE LIBRARY';\n   IF %COPYLIB = '' THEN %ERR05 = 'ENTER MACRO/COPY SOURCE LIBRARY';\n   IF %LOAD    = '' THEN %ERR06 = 'ENTER PROGRAM LOAD LIBRARY';\n   IF %AUTOCALL= '' THEN %ERR07 =\n                                'ENTER AUTO-CALL LIBRARY * OPTIONAL *';\n   IF %SUBMOD  = '' THEN %ERR08 = 'ERROR SUB-MODULE NAME * OPTIONAL *';\n   IF %COMPOPT = '' THEN %ERR09 = 'ENTER DEFAULT COMPILER OPTIONS';\n   IF %LINKOPT = '' THEN %ERR10 = 'ENTER DEFAULT LINK OPTIONS';\n   IF %ERR01 ='' & %ERR02 = '' & %ERR03 = '' & %ERR04 = ''\n   & %ERR01A ='' & %ERR05 ='' & %ERR06 = '' & %ERR07 = ''\n   &  %ERR09 ='' & %ERR10 = '' THEN; ELSE IF %CNT < 2 THEN REDO RPANL;\n\n%CNT=0; /* RESET COUNTER FOR LATER USE */\n\n   IF %FUNC    = '' THEN SIGNAL 2,'NO FUNCTION SPECIFIED';\n   %X=TYPE(PGMNAME);\n   IF %X\u00ac='CHAR' THEN DO;\n       %ERROR=1;\n       STOP 'NO PROGRAM SPECIFIED, OR INCORRECT' ;\n   END;\nLABEL REGPL2;\nPANEL ('PLEASE ENTER PROGRAM FILES OR DDNAMES THAT THE PROGRAM USES.')\n / ('ENTER THEM LIKE THIS:-')\n /('SYSUT1 WRITES, SYSUT2 MAY WRITE, ')\n /('YOU MAY USE READS,WRITES,MODS OR UPDATES')\n /('',FILES,250,'%FILES')\n /('%ERR01');\nIF %SYSPFK=3 | %SYSPFK=15 THEN EXIT;\n%CNT=%CNT+1;\n%ERR01 = '';\n   IF %FILES  = '' THEN %ERR01 = 'ERROR ENTER PROGRAM FILES ';\n   IF %ERR01 \u00ac= '' & %CNT < 2 THEN REDO REGPL2;\n   IF %FILES  = '' THEN DO;\n       %ERROR=1;\n       SIGNAL ERROR 1,'NO INPUTS OR OUTPUTS SPECIFIED';\n   END;\n   IF %FILES\u00ac=''\n   THEN DO;\n      SPLIT INPUTS,8 %FILES;\n      EDIT  INPUTS LIST0001,LIST0002,LIST0003,LIST0004,LIST0005,\n         LIST0006,LIST0007,LIST0008,LIST0009,\n         LIST0010,LIST0011,LIST0012,LIST0013,LIST0014,LIST0015,\n         LIST0016,LIST0017,LIST0018,LIST0019,LIST0020,LIST0021,\n         LIST0022,LIST0023,LIST0024,LIST0025,LIST0026,LIST0027,\n         LIST0028,LIST0029,LIST0030,LIST0031,LIST0032,LIST0033,\n         LIST0034,LIST0035,LIST0036,LIST0037,LIST0038,LIST0039,\n         LIST0040,LIST0041,LIST0042,LIST0043,LIST0044,LIST0045,\n         LIST0046,LIST0047,LIST0048,LIST0049,LIST0050\n                   A(8);\n PANEL ('IF YOUR FILES REQUIRE SPECIFIC FILE TYPES ')\n       (' OR LRECL PLS INSERT THEM HERE OR ENTER NULL')\n       (' EG.   FB,200     OR   VB,6400        ')\n       (' -----------------------------------------')\n       (' %LIST0001            ',TYP001,10)\n       (' %LIST0003            ',TYP002,10)\n       (' %LIST0005            ',TYP003,10)\n       (' %LIST0007            ',TYP004,10)\n       (' %LIST0009            ',TYP005,10)\n       (' %LIST0011            ',TYP006,10)\n       (' %LIST0013            ',TYP007,10)\n       (' %LIST0015            ',TYP008,10)\n       (' %LIST0017            ',TYP009,10)\n       (' %LIST0019            ',TYP010,10);\n  IF %LIST0021 \u00ac='' THEN DO;\n PANEL ('IF YOUR FILES REQUIRE SPECIFIC FILE TYPES ')\n       (' OR RECORD LENGTHS INSERT THEM HERE OR ENTER NULL ')\n       (' EG   FB,200      OR    VB,6400                   ')\n       (' -----------------------------------------')\n       (' %LIST0021            ',TYP011,10)\n       (' %LIST0023            ',TYP012,10)\n       (' %LIST0025            ',TYP013,10)\n       (' %LIST0027            ',TYP014,10)\n       (' %LIST0029            ',TYP015,10)\n       (' %LIST0031            ',TYP016,10)\n       (' %LIST0033            ',TYP017,10)\n       (' %LIST0035            ',TYP018,10)\n       (' %LIST0037            ',TYP019,10)\n       (' %LIST0039            ',TYP020,10);\n END;\n  IF %LIST0041\u00ac='' THEN DO;\n PANEL ('IF YOUR FILES REQUIRE SPECIFIC FILE TYPES ')\n       (' OR RECORD LENGTHS INSERT THEM HERE OR ENTER NULL ')\n       (' EG.   FB,200          VB,6400                    ')\n       (' -----------------------------------------')\n       (' %LIST0041            ',TYP021,10)\n       (' %LIST0043            ',TYP022,10)\n       (' %LIST0045            ',TYP023,10)\n       (' %LIST0047            ',TYP024,10)\n       (' %LIST0049            ',TYP025,10);\n END;\n/* THIS CODE CHANGED 1/6/82 USING REDO  */\n\n      IF %LIST(1)\u00ac=''  THEN DO;\n           IF %LIST(2)\u00ac='MAY' THEN DO;\n                %O1='%LIST(1)  %LIST(2)';\n                %SUB=3;\n           END;\n           ELSE DO;\n                %O1='%LIST(1) MAY %LIST(2)';\n                %SUB=4;\n           END;\n      END;\n%CNT=1;\n\nLABEL RESOLVE;\n      IF %LIST(%SUB)\u00ac=''  THEN DO;\n           %CNT=%CNT+1;\n           IF %LIST(%SUB+1)\u00ac='MAY' THEN DO;\n           SET  O%CNT ='%LIST(%SUB)  %LIST(%SUB+1)';\n                %SUB=%SUB+2; REDO RESOLVE;\n           END;\n           ELSE DO;\n           SET  O%CNT ='%LIST(%SUB)  MAY %LIST(%SUB+2)';\n                %SUB=%SUB+3; REDO RESOLVE;\n           END;\n      END;\n\n   END/* FILES DECODE */  ;\n   IF %SYSTEM='VS1' THEN DO;\n   DCL CNTL * REPLACE ;\n./ %REPLACE NAME=%PGMNAME,LIST=ALL\n  /* THIS PROGRAM WAS REGISTERED ON %DAY %DAYNO %MONTH %YEAR */\n  /* FUNCTION %FUNC  */\n  %%PGMNAME=%PGMNAME;%%LANG='%LANG';\n  IF %%COMPOPT='' THEN %%COMPOPT='%COMPOPT';\n  IF %%LINKOPT='' THEN %%LINKOPT='%LINKOPT';\n  IF %%SOURCE='' THEN %%SOURCE='%SOURCE';\n  IF %%LOAD='' THEN %%LOAD='%LOAD';\n  IF %%LIB='' THEN %%LIB='%COPYLIB';\n  IF %%AUTOCALL='' THEN %%AUTOCALL='%AUTOCALL';\n  %%O1='%O1';%%O2='%O2';\n  %%O3='%O3';%%O4='%O4';\n  %%O5='%O5';%%O6='%O6';\n  %%O7='%O7';%%O8='%O8';\n  %%O9='%O9';%%O10='%O10';\n  %%O11='%O11';%%O12='%O12';\n  %%O13='%O13';%%O14='%O14';\n  %%O15='%O15';%%O16='%O16';\n  %%O17='%O17';%%O18='%O18';\n  %%O19='%O19';%%O20='%O20';\n  %%O21='%O21';%%O22='%O22';\n  %%O23='%O23';%%O24='%O24';\n  %%O25='%O25';\n  %%TYP001='%TYP001';%%TYP002='%TYP002';%%TYP003='%TYP003';\n  %%TYP004='%TYP004';%%TYP005='%TYP005';%%TYP006='%TYP006';\n  %%TYP007='%TYP007';%%TYP008='%TYP008';%%TYP009='%TYP009';\n  %%TYP010='%TYP010';%%TYP011='%TYP011';%%TYP012='%TYP012';\n  %%TYP013='%TYP013';%%TYP014='%TYP014';%%TYP015='%TYP015';\n  %%TYP016='%TYP016';%%TYP017='%TYP017';%%TYP018='%TYP018';\n  %%TYP019='%TYP019';%%TYP020='%TYP020';%%TYP021='%TYP021';\n  %%TYP022='%TYP022';%%TYP023='%TYP023';%%TYP024='%TYP024';\n  %%TYP025='%TYP025';\nEOF;\n     DCL IEBUPDTE PROG\n         SYSPRINT WRITES P\n         ENQ      WRITES ENQ,  /* SO TWO OF THESE JOBS CAN'T RUN */\n         SYSIN    READS  CNTL\n         SYSUT1   READS  %JOLDS1\n         SYSUT2   READS  %JOLDS1;\n     DCL P PRINTER NODCB;\n     DCL ENQ DS %SYSPREF.JOL.HOLD.JOB 0 TRACKS SYSDA NODEF;\n     RUN IEBUPDTE;\n     END;\n     ELSE DO;\n     UJY09OP '%JOLDS1' %PGMNAME\n' /* THIS PROGRAM WAS REGISTERED ON %DAY %DAYNO %MONTH %YEAR */'\n' /* FUNCTION %FUNC  */ '\n' %%PGMNAME=%PGMNAME;%%LANG=''%LANG'';'\n' IF %%COMPOPT='''' THEN %%COMPOPT=''%COMPOPT''; '\n' IF %%LINKOPT='''' THEN %%LINKOPT=''%LINKOPT''; '\n' IF %%SOURCE='''' THEN %%SOURCE=''%SOURCE''; '\n' IF %%LOAD='''' THEN %%LOAD=''%LOAD'';'\n' IF %%LIB='''' THEN %%LIB=''%COPYLIB'';'\n' IF %%AUTOCALL='''' THEN %%AUTOCALL=''%AUTOCALL'';'\n' %%O1=''%O1'';%%O2=''%O2'';'\n' %%O3=''%O3'';%%O4=''%O4'';'\n' %%O5=''%O5'';%%O6=''%O6'';'\n' %%O7=''%O7'';%%O8=''%O8'';'\n' %%O9=''%O9'';%%O10=''%O10'';'\n' %%O11=''%O11'';%%O12=''%O12'';'\n' %%O13=''%O13'';%%O14=''%O14'';'\n' %%O15=''%O15'';%%O16=''%O16'';'\n' %%O17=''%O17'';%%O18=''%O18'';'\n' %%O19=''%O19'';%%O20=''%O20'';'\n' %%O21=''%O21'';%%O22=''%O22'';'\n' %%O23=''%O23'';%%O24=''%O24'';'\n' %%O25=''%O25'';'\n' %%TYP001=''%TYP001'';%%TYP002=''%TYP002'';%%TYP003=''%TYP003'';'\n' %%TYP004=''%TYP004'';%%TYP005=''%TYP005'';%%TYP006=''%TYP006'';'\n' %%TYP007=''%TYP007'';%%TYP008=''%TYP008'';%%TYP009=''%TYP009'';'\n' %%TYP010=''%TYP010'';%%TYP011=''%TYP011'';%%TYP012=''%TYP012'';'\n' %%TYP013=''%TYP013'';%%TYP014=''%TYP014'';%%TYP015=''%TYP015'';'\n' %%TYP016=''%TYP016'';%%TYP017=''%TYP017'';%%TYP018=''%TYP018'';'\n' %%TYP019=''%TYP019'';%%TYP020=''%TYP020'';%%TYP021=''%TYP021'';'\n' %%TYP022=''%TYP022'';%%TYP023=''%TYP023'';%%TYP024=''%TYP024'';'\n' %%TYP025=''%TYP025'';';\n END;\n END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SORTMENU": {"ttr": 15873, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "    /* This is the Jol Program Register Command. */\n\n    /* Using the Register Command, you can tell Jol about programs,\n       such as the Language it is coded in, Compiler Options normally\n       used, Inputs and Outputs and so on.\n\n       Then the Jol COMPILE, and EXEC Commands can be used to\n       COMPILE, LINK and RUN these Registered Programs.\n\n       You can REGISTER Programs interactively, or use a standard\n       editor to create the files (it must conform to Jol's\n       standard way of doing things!).\n\n       Whenever the Program needs to be compiled, you can code:\n\n           COMPILE MASTUPDT;\n\n       and the program will be compiled.\n\n\n       To EXECUTE the Program, you can code the following:\n\n           EXEC MASTUPDT 'INPUT.MASTER' 'TRANS.INPUT' 'MASTER.OUT'\n                PRINTER;\n\n        OR\n\n          DCL INPUT   DS INPUT.MASTER;\n          DCL OUTPUT  DS OUTPUT.MASTER VB 70,7000 SYSDA 10 CYLS;\n          DCL TRANSIN DS TRANS.INPUT;\n          DCL PRT     PRINTER B FORM 100 FBA 121,1210;\n          EXEC MASTUPDT INPUT,TRANSIN,OUTPUT,PRT;\n\n\n       IT WILL EVEN BE POSSIBLE TO HAVE STANDARD DEFAULT DATA SETS\n       THAT THE PROGRAM WILL USE, UNLESS OVER-RIDDEN, THUS IT IS\n       POSSIBLE TO SIMPLY CODE:-\n\n           EXEC MASTUPDT;\n\n      TO HAVE THE PROGRAM EXECUTED. (NOT THIS VERSION!!!!).\n\n      SEE THE JOL DOCUMENTATION FOR FURTHER DETAILS.\n\n   */\n   REGISTER:MACRO(%LANG=,      /*DEFAULT LANGUAGE IS PL1             */\n          %ASM,%FORT,%COB,%COBOL,%PLI,%PL1,\n          %FUNC='',            /*FUNCTION MUST BE CODED BY USER      */\n          %COMPOPT=,           /*DEFAULT COMPILER OPTIONS ARE NONE   */\n          %LINKOPT=,           /*DEFAULT LINK EDITOR OPTIONS ARE NONE*/\n          %COPYLIB=,           /*NO DEFAULT INCLUDE OR COPYLIB       */\n          %SOURCE=,            /*NO DEFAULT SOURCE LIBRARY           */\n          %LOAD=,              /*NO DEFAULT LOAD MODULE LIBRARY      */\n          %AUTOCALL=,          /*NO DEFAULT LINK AUTO CALL LIB       */\n          %FILES=,             /*NO DEFAULT INPUTS                   */\n          %REPLACE,            /*REPLACE OPTION MAY BE CODED         */\n          %NAME=,              /*NAME TO BE GIVEN TO LOAD MODULE (IF */\n                               /*        DIFFERENT TO PROGRAM NAME). */\n          %PARM=,              /*NO DEFAULT PROGRAM PARAMETER        */\n          %SSI=);\n\n    DCL %CNT    INIT 0;\n    DCL %SUB    INIT 0;\n    DCL %SUBMOD INIT '';\n    DCL %JOLDS1 INIT '%SYSPREF.JOL';\n    DCL %PGMNAME                              INIT '';\n\n    if %list(1) ='' then %PGMNAME=%LIST(1);\n    IF %PGMNAME =''   /* No Program Name ? */\n    then do;\n       panel %boxcolor box\n       //(ctr %hedcolor 'Jol Program Registration Panel')\n       //////\n       (ctr 'Please Enter Program Name to Register ===>',PGMNAME,8,'')\n       ;\ngetprog:\n       if pgmname=''\n       then do;\n               panel reread from pgmname\n               'We need the Program Name to Register';\n               goto getprog;\n       end;\n       %X=TYPE(PGMNAME);\n       IF %X ='CHAR' THEN DO;\n               panel reread from pgmname\n               'Program Names must start with an Alpha Character';\n               goto getprog;\n       END;\n    end;\n\n       alloc f(reg) da('%PGMNAME.pgm') new;\n       open f(reg) output;\n       write f(reg) from(\n ' /* THIS PROGRAM WAS REGISTERED ON %DAY %DAYNO %MONTH %YEAR */');\n\n       IF %func='' THEN DO;\n          panel %boxcolor box\n          //(ctr %hedcolor 'Jol Program Registration Panel')\n          //\n          (ctr 'Please Enter a comment describing what 'hi'%PGMNAME')\n          (ctr 'does.  This is simply a desription that is written')\n          (ctr 'in the Registration Details and is for your')\n          (ctr 'use ONLY.')\n          //\n          //('    Enter Program Function (Optional)')\n          //('          ======> ',func,50,\n              'For Example: Updates Payroll Master Files');\n       End;\n\n       write f(reg) from(\n       ' /* FUNCTION %FUNC  */ ');\n\n       IF %LANG='' THEN DO;\n            IF %COBOL ='' THEN %COBOL='COB';\n            %LANG='%ASM%COB%COBOL%PLI%PL1%FORT';\n       END;\n       IF %LANG='' THEN DO;\n          panel %boxcolor box\n          //(ctr %hedcolor 'Jol Program Registration Panel')\n          //\n          (ctr 'Please Enter the Language ' hi '%PGMNAME')\n          (ctr 'is written in.  If you are unsure (for example')\n          (ctr 'the program is a Utility), enter ASM.')\n          //\n          (ctr 'You can code ASM, COB, FORT, PLI or ALGOL.')\n          (ctr '(Support for other languages will be available soon)')\n          //(ctr 'Enter Language    ======> ',lang,8,'PLI');\n       End;\n\nchecklan:\n       IF %LANG='PLI' | %LANG='PL1'\n       | %LANG='COBOL' | %LANG='COB'\n       | %LANG='ALGOL'\n       | %LANG='FORTRAN' | %LANG='FORT'\n       | %LANG='ASSEMBLER' | %LANG='ASM'\n       THEN DO;\n          SET LANG=SUBSTR(LANG,1,3);\n          IF %LANG='ASS' THEN %LANG='ASM';\n          IF %LANG='FOR' THEN %LANG='FORT'; /* 6TH. AUGUST 1982 */\n          IF %LANG='ALG' THEN %LANG='ALGOL'; /* 6TH. AUGUST 1982 */\n       END;\n       ELSE DO;\n          %ERROR=1;\n           Panel reread from lang 'Invalid Language, Please Reenter';\n           goto checklan;\n       END;\n       IF %SOURCE='' THEN %SOURCE='%SYSUID.%LANG';\n       IF %COPYLIB='' THEN %COPYLIB='%SYSUID.%LANG';\n       IF %LOAD='' THEN %LOAD='%SYSUID.LOAD';\n       IF %AUTOCALL='' THEN DO;\n           IF %LANG ='ASM' THEN\n           %AUTOCALL='SYS1.%LANG'||'LIB';\n       END;\n       IF %LINKOPT='' THEN %LINKOPT='LIST';\n       IF %COMPOPT='' THEN %COMPOPT='LIST';\nLABEL RPANL;\n   PANEL %boxcolor box\n  /(ctr %hedcolor 'Other details for program %PGMNAME')\n  /(hi 'Options necessary for the Jol COMPILE Command')\n  /('    Where is the %lang Source Code for %pgmname ?')\n   ('               ===>',SOURCE,44,'%SOURCE')\n   ('    And the COPY Library Name ?')\n   ('               ===>',COPYLIB,44,'%COPYLIB')\n   ('    Default COMPILER Options')\n   ('               ===>',COMPOPT,50,'%COMPOPT')\n  /(hi 'Options necessary for the Jol LINK Command')\n  /('    The LOAD Module Library Name ?')\n   ('               ===>',LOAD,44,'%LOAD')\n   ('    Default AUTO CALL Library')\n   ('               ===>',AUTOCALL,44,'%AUTOCALL'\n   ('    What SUB MODULES are used?')\n   ('               ===>',SUBMOD,44,'%SUBMOD')\n   ('    Default LINK EDIT Options')\n   ('               ===>',LINKOPT,50,'%LINKOPT')\n   ;\n\ndetcheck:\n    /*\n    IF %SOURCE  = ''\n    then do;\n        panel reread from source\n             'Please Enter the Program Source Code Library';\n        goto detcheck;\n    end;\n    IF %copylib = ''\n    then do;\n        panel reread from copylib\n             'Please Enter the Macro/Source Code COPY Library';\n        goto detcheck;\n    end;\n    IF %compopt = ''\n    then do;\n        panel reread from compopt\n             'Please Enter the Default Compiler Options';\n        goto detcheck;\n    end;\n    IF %load    = ''\n    then do;\n        panel reread from load\n             'Please Enter the Load Module Library';\n        goto detcheck;\n    end;\n    IF %linkopt = ''\n    then do;\n        panel reread from linkopt\n             'Please Enter the Default Link Options';\n        goto detcheck;\n    end;\n  */\n       write f(reg) from(\n ' %%PGMNAME=''%PGMNAME'';  %%LANG=''%LANG'';');\n       write f(reg) from(\n ' IF %%COMPOPT='''' THEN');\n       write f(reg) from(\n ' /* Note: The ''IF'' Statements allow for Overrides on the EXEC */');\n       write f(reg) from(\n ' %%COMPOPT=''%COMPOPT'';');\n       write f(reg) from(\n ' IF %%LINKOPT='''' THEN');\n       write f(reg) from(\n ' %%LINKOPT=''%LINKOPT'';');\n       write f(reg) from(\n ' IF %%SOURCE='''' THEN');\n       write f(reg) from(\n ' %%SOURCE=''%SOURCE'';');\n       write f(reg) from(\n ' IF %%LOAD='''' THEN');\n       write f(reg) from(\n ' %%LOAD=''%LOAD'';');\n       write f(reg) from(\n ' IF %%LIB='''' THEN');\n       write f(reg) from(\n ' %%LIB=''%COPYLIB'';');\n       write f(reg) from(\n ' IF %%AUTOCALL='''' THEN');\n       write f(reg) from(\n ' %%AUTOCALL=''%AUTOCALL'';');\n\n       %file1='SYSPRINT';\n       %CNT=1;\n\n getmore:\n\n PANEL %boxcolor box\n / (ctr %hedcolor 'Program %pgmname File Specification Panel.')\n / (ctr 'On this Panel, please enter all the Filenames or DDnames that')\n   (ctr 'use Files.  You specify the Filename, and READS, WRITES, etc.')\n / (ctr 'NOTE:  In the ACTION Column, code READS, WRITES, MODS,')\n   (ctr 'or UPDATES, or MAY READ, MAY WRITE etc.')\n  /('               DDname           Action')\n  /('            ',FILE1,8,'%file1') (' ',Mayf1,10,' ',12,30)\n   ('            ',FILE2,8,'      ') (' ',Mayf2,10,' ',13,30)\n   ('            ',FILE3,8,'      ') (' ',Mayf3,10,' ',14,30)\n   ('            ',FILE4,8,'      ') (' ',Mayf4,10,' ',15,30)\n   ('            ',FILE5,8,'      ') (' ',Mayf5,10,' ',16,30)\n   ('            ',FILE6,8,'      ') (' ',Mayf6,10,' ',17,30)\n //(ctr\n'Note: If the last DDname is used, a second screen will appear.')\n ;\n\nchkpan:\n   /* Make each DDname 8 characters in length for a better image. */\n       file1=substr(file1||'        ',1,8);\n       file2=substr(file2||'        ',1,8);\n       file3=substr(file3||'        ',1,8);\n       file4=substr(file4||'        ',1,8);\n       file5=substr(file5||'        ',1,8);\n       file6=substr(file6||'        ',1,8);\n\n       if %file1 =''\n       then do;\n           if %mayf1=''\n           then do;\n               panel reread from mayf1 'Please Enter READS, WRITES etc';\n               redo chkpan;\n           end;\n       end;\n\n       if %file2 =''\n       then do;\n           if %mayf2=''\n           then do;\n               panel reread from mayf2 'Please Enter READS, WRITES etc';\n               redo chkpan;\n           end;\n       end;\n\n       if %file3 =''\n       then do;\n           if %mayf3=''\n           then do;\n               panel reread from mayf3 'Please Enter READS, WRITES etc';\n               redo chkpan;\n           end;\n       end;\n\n       if %file4 =''\n       then do;\n           if %mayf4=''\n           then do;\n               panel reread from mayf4 'Please Enter READS, WRITES etc';\n               redo chkpan;\n           end;\n       end;\n\n       if %file5 =''\n       then do;\n           if %mayf5=''\n           then do;\n               panel reread from mayf5 'Please Enter READS, WRITES etc';\n               redo chkpan;\n           end;\n       end;\n\n       if %file6 =''\n       then do;\n           if %mayf6=''\n           then do;\n               panel reread from mayf6 'Please Enter READS, WRITES etc';\n               redo chkpan;\n           end;\n       end;\n\n       %typ1=''; %typ2=''; %typ3='';\n       %typ4=''; %typ5=''; %typ6='';\n\n       if index(caps(mayf1),'WRITE')\n       |  index(caps(mayf1),'MOD')\n       & %file1 =''\n       then do;\npanel %boxcolor box\n  (ctr 'If your File requires specific File Types')\n  (ctr 'or LRECL, please insert them here or leave them empty.')\n/ (ctr 'For example, enter 'hi'FB 200 or VB 6400')\n///\n        ('                     %file1  ',typ1,10);\n      end;\n\n       if index(caps(mayf2),'WRITE')\n       |  index(caps(mayf2),'MOD')\n       & %file2 =''\n       then do;\npanel %boxcolor box\n  (ctr 'If your File requires specific File Types')\n  (ctr 'or LRECL, please insert them here or leave them empty.')\n/ (ctr 'For example, enter 'hi'FB 200 or VB 6400')\n///\n        ('                     %file2  ',typ2,10);\n      end;\n\n       if index(caps(mayf3),'WRITE')\n       |  index(caps(mayf3),'MOD')\n       & %file3 =''\n       then do;\npanel %boxcolor box\n  (ctr 'If your File requires specific File Types')\n  (ctr 'or LRECL, please insert them here or leave them empty.')\n/ (ctr 'For example, enter 'hi'FB 200 or VB 6400')\n///\n        ('                     %file3  ',typ3,10);\n      end;\n\n       if index(caps(mayf4),'WRITE')\n       |  index(caps(mayf4),'MOD')\n       & %file4 =''\n       then do;\npanel %boxcolor box\n  (ctr 'If your File requires specific File Types')\n  (ctr 'or LRECL, please insert them here or leave them empty.')\n/ (ctr 'For example, enter 'hi'FB 200 or VB 6400')\n///\n        ('                     %file4  ',typ4,10);\n      end;\n\n       if index(caps(mayf5),'WRITE')\n       |  index(caps(mayf5),'MOD')\n       & %file5 =''\n       then do;\npanel %boxcolor box\n  (ctr 'If your File requires specific File Types')\n  (ctr 'or LRECL, please insert them here or leave them empty.')\n/ (ctr 'For example, enter 'hi'FB 200 or VB 6400')\n///\n        ('                     %file5  ',typ5,10);\n      end;\n\n       if index(caps(mayf6),'WRITE')\n       |  index(caps(mayf6),'MOD')\n       & %file6 =''\n       then do;\npanel %boxcolor box\n  (ctr 'If your File requires specific File Types')\n  (ctr 'or LRECL, please insert them here or leave them empty.')\n/ (ctr 'For example, enter 'hi'FB 200 or VB 6400')\n///\n        ('                     %file6  ',typ6,10);\n      end;\n\n       if %file1 =''\n       then do;\n            write f(reg) from(' f%cnt=''%file1 %mayf1'';');\n            if typ1 ='' then write f(reg) from(' t%cnt=''%typ1'';');\n            %cnt=%cnt+1;\n       end;\n\n       if %file2 =''\n       then do;\n            write f(reg) from(' f%cnt=''%file2 %mayf2'';');\n            if typ2 ='' then write f(reg) from(' t%cnt=''%typ2'';');\n            %cnt=%cnt+1;\n       end;\n\n       if %file3 =''\n       then do;\n            write f(reg) from(' f%cnt=''%file3 %mayf3'';');\n            if typ3 ='' then write f(reg) from(' t%cnt=''%typ3'';');\n            %cnt=%cnt+1;\n       end;\n\n       if %file4 =''\n       then do;\n            write f(reg) from(' f%cnt=''%file4 %mayf4'';');\n            if typ4 ='' then write f(reg) from(' t%cnt=''%typ4'';');\n            %cnt=%cnt+1;\n       end;\n\n       if %file5 =''\n       then do;\n            write f(reg) from(' f%cnt=''%file5 %mayf5'';');\n            if typ5 ='' then write f(reg) from(' t%cnt=''%typ5'';');\n            %cnt=%cnt+1;\n       end;\n\n       if %file6 =''\n       then do;\n            write f(reg) from(' f%cnt=''%file6 %mayf6'';');\n            if typ6 ='' then write f(reg) from(' t%cnt=''%typ6'';');\n            %cnt=%cnt+1;\n       end;\n       %file1='';\n       IF %file6  = '' THEN REDO getmore;\n\n       close f(reg);\n\n  END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SORTMEN2": {"ttr": 15877, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "   /* THIS IS THE JOL PROGRAM REGISTER COMMAND  */\n   /* USING THE REGISTER COMMAND, ONE CAN DEFINE TO JOL PROGRAM\n      CHARACTERISTICS AND OTHER DETAILS OF THESE PROGRAMS, SUCH AS\n      THE LANGUAGE THEY ARE CODED IN, COMPILER OPTIONS NORMALLY USED,\n      INPUTS AND OUTPUTS AND SO ON.\n\n      THEN THE JOL COMPILE, AND EXEC COMMANDS CAN BE SIMPLY USED TO\n      COMPILE, LINK AND RUN THESE PROGRAMS.\n\n      FOR EXAMPLE, THE COMMAND\n\n           REGISTER MASTUPDT  LANG PLI\n                    FUNC 'THIS PROGRAM UPDATES PAYROLL'\n                    COMPOPT 'NEST,GOSTMT'\n                    LINKOPT 'LIST,MAP'\n                    SOURCE 'APPL.SOURCE.LIB'\n                    COPYLIB 'APPL.COPY.LIB'\n                    LOAD 'APPL.LOADLIB'\n                    FILES  'MASTIN READS,MASTOUT WRITES';\n\n           WILL REGISTER THE PROGRAM TO JOL.\n\n      WHENEVER THE PROGRAM IS TO BE COMPILED, IT IS SIMPLY A\n      MATTER OF CODING:-\n\n          COMPILE MASTUPDT;\n\n      AND THE PROGRAM WILL BE COMPILED.\n\n      TO EXECUTE THE PROGRAM, SIMPLY CODE THE FOLLOWING:-\n\n          EXEC MASTUPDT 'INPUT.MASTER' 'TRANS.INPUT' 'MASTER.OUT'\n               PRINTER;\n\n       OR\n\n         DCL INPUT   DS INPUT.MASTER;\n         DCL OUTPUT  DS OUTPUT.MASTER VB 70,7000 SYSDA 10 CYLS;\n         DCL TRANSIN DS TRANS.INPUT;\n         DCL PRT     PRINTER B FORM 100 FBA 121,1210;\n         EXEC MASTUPDT INPUT,TRANSIN,OUTPUT,PRT;\n\n      IT WILL EVEN BE POSSIBLE TO HAVE STANDARD DEFAULT DATA SETS\n      THAT THE PROGRAM WILL USE, UNLESS OVER-RIDDEN, THUS IT IS\n      POSSIBLE TO SIMPLY CODE:-\n\n          EXEC MASTUPDT;\n\n     TO HAVE THE PROGRAM EXECUTED. (NOT THIS VERSION!!!!).\n\n     SEE THE JOL DOCUMENTATION FOR FURTHER DETAILS.\n\n  */\n  REGISTER:MACRO(%LANG=,      /*DEFAULT LANGUAGE IS PL1             */\n         %ASM,%FORT,%COB,%COBOL,%PLI,%PL1,\n         %FUNC='',            /*FUNCTION MUST BE CODED BY USER      */\n         %COMPOPT=,           /*DEFAULT COMPILER OPTIONS ARE NONE   */\n         %LINKOPT=,           /*DEFAULT LINK EDITOR OPTIONS ARE NONE*/\n         %COPYLIB=,           /*NO DEFAULT INCLUDE OR COPYLIB       */\n         %SOURCE=,            /*NO DEFAULT SOURCE LIBRARY           */\n         %LOAD=,              /*NO DEFAULT LOAD MODULE LIBRARY      */\n         %AUTOCALL=,          /*NO DEFAULT LINK AUTO CALL LIB       */\n         %FILES='',           /*NO DEFAULT INPUTS                   */\n         %REPLACE,            /*REPLACE OPTION MAY BE CODED         */\n         %NAME=,              /*NAME TO BE GIVEN TO LOAD MODULE (IF */\n                              /*        DIFFERENT TO PROGRAM NAME). */\n         %PARM=,              /*NO DEFAULT PROGRAM PARAMETER        */\n         %SSI='');\n\n   DCL %CNT    INIT 0;\n   DCL %SUB    INIT 0;\n   DCL %SUBMOD INIT '';\n   DCL %JOLDS1 INIT '%SYSPREF.JOL';\n   DCL %ERROR, %PGMNAME, %ERR01A                               INIT '';\n   DCL %ERR01, %ERR02, %ERR03, %ERR04, %ERR05, %ERR06, %ERR07  INIT '';\n   DCL %ERR08, %ERR09, %ERR10, %ERRSTAT                        INIT '';\n   IF %LIST(1) THEN %PGMNAME=%LIST(1);\n   IF %REPLACE='REPLACE' THEN %REPLACE='REPL';\n   ELSE %REPLACE='ADD';\n   IF %LIST(1) THEN;ELSE DCL %LIST0001 INIT '';\n   IF %LIST(2) THEN STOP 'INVALID ITEM %LIST(2) CODED';\n   DCL           %LIST0002,%LIST0003,%LIST0004,%LIST0005,\n        %LIST0006,%LIST0007,%LIST0008,%LIST0009,%LIST0010,\n        %LIST0011,%LIST0012,%LIST0013,%LIST0014,%LIST0015,\n        %LIST0016,%LIST0017,%LIST0018,%LIST0019,%LIST0020,\n        %LIST0021,%LIST0022,%LIST0023,%LIST0024,%LIST0025,\n        %LIST0026,%LIST0027,%LIST0028,%LIST0029,%LIST0030,\n        %LIST0031,%LIST0032,%LIST0033,%LIST0034,%LIST0035,\n        %LIST0036,%LIST0037,%LIST0038,%LIST0039,%LIST0040,\n        %LIST0041,%LIST0042,%LIST0043,%LIST0044,%LIST0045,\n        %LIST0046,%LIST0047,%LIST0048,%LIST0049,%LIST0050,\n                                 INIT '';\n   DCL %O1,%O2,%O3,%O4,%O5,%O6,%O7,%O8,%O9,%O10,\n       %O11,%O12,%O13,%O14,%O15,%O16,%O17,%O18,%O19,%O20,\n       %O21,%O22,%O23,%O24,%O25,\n       %TYP001,%TYP002,%TYP003,%TYP004,%TYP005,%TYP006,\n       %TYP007,%TYP008,%TYP009,%TYP010,%TYP011,%TYP012,\n       %TYP013,%TYP014,%TYP015,%TYP016,%TYP017,%TYP018,\n       %TYP019,%TYP020,%TYP021,%TYP022,%TYP023,%TYP024,%TYP025,\n                                 INIT '';\n   DCL %I1,%I2,%I3,%I4,%I5,%I6,%I7,%I8,%I9,%I10,\n       %I11,%I12,%I13,%I14,%I15,%I16,%I17,%I18,%I19,%I20,\n       %I21,%I22,%I23,%I24,%I25\n                                 INIT '';\n   IF %LANG='' THEN DO;\n         IF %COBOL\u00ac='' THEN %COBOL='COB';\n         %LANG='%ASM%COB%COBOL%PLI%PL1%FORT';\n   END;\n   IF %LANG='' THEN DO; WRITE 'ENTER TYPE OF PROGRAM';READ LANG;END;\n   IF %LANG='PLI' | %LANG='PL1'\n   | %LANG='COBOL' | %LANG='COB'\n   | %LANG='ALGOL'\n   | %LANG='FORTRAN' | %LANG='FORT'\n   | %LANG='ASSEMBLER' | %LANG='ASM'\n   THEN DO;\n      SET LANG=SUBSTR(LANG,1,3);\n      IF %LANG='ASS' THEN %LANG='ASM';\n      IF %LANG='FOR' THEN %LANG='FORT'; /* 6TH. AUGUST 1982 */\n      IF %LANG='ALG' THEN %LANG='ALGOL'; /* 6TH. AUGUST 1982 */\n   END;\n   ELSE DO;\n      %ERROR=1;\n      STOP 'LANGUAGE IS INCORRECTLY SET TO ''%LANG''';\n   END;\n   IF %SOURCE='' THEN %SOURCE='%SYSUID.%LANG';\n   IF %COPYLIB='' THEN %COPYLIB='%SYSUID.%LANG';\n   IF %LOAD='' THEN %LOAD='%SYSUID.LOAD';\n   IF %AUTOCALL='' THEN DO;\n       IF %LANG\u00ac='ASM' THEN\n       %AUTOCALL='SYS1.%LANG'||'LIB';\n   END;\n   IF %LINKOPT='' THEN %LINKOPT='LIST';\n   IF %COMPOPT='' THEN %COMPOPT='LIST';\n  LABEL RPANL;\n  PANEL\n  ('Name of Program to be Registered ==>',PGMNAME,8,'%PGMNAME')\n  ('Name of Your Jol Data Set        ==>',JOLDS1,36,'%JOLDS1')\n  ('%ERR01 %ERR01A')\n  ('Language (ASM,COBOL,PLI,FORT)    ==>',LANG,8,'%LANG')\n  ('                        %ERR02')\n  ('Enter a comment about the Program',FUNC,80'%FUNC')\n  ('                        %ERR03')\n  ('What is the Source Library Name? ==>',SOURCE,44,'%SOURCE')\n  ('                        %ERR04')\n  ('WHAT is the Copy Library Name?   ==>',COPYLIB,44,'%COPYLIB')\n  ('                        %ERR05')\n  ('And LOAD MODULE Library Name ?   ==>',LOAD,44,'%LOAD')\n  ('                        %ERR06')\n  ('Default AUTO CALL Library ?      ==>',AUTOCALL,44,'%AUTOCALL'\n  ('                        %ERR07')\n  /*\n  ('WHAT SUB MODULES ARE USED?',SUBMOD,44,'%SUBMOD')\n  ('                        %ERR08')\n  */\n  ('Default Compiler Options         ==>',COMPOPT,80,'%COMPOPT')\n  ('                        %ERR09')\n  ('Default Link Edit Options        ==>' ,LINKOPT,80,'%LINKOPT')\n  ('                        %ERR10');\n  IF %SYSPFK=3 | %SYSPFK=15 THEN EXIT;\n  %CNT=%CNT+1; /* ONLY REPEAT SCREEN 2 TIMES UNLESS THE PGNAME IS\n                  WRONG (IF IT IS THE SECOND TIME USE STOP COMMAND) */\n\n %ERR01A ='';\n %ERR01=''; %ERR02=''; %ERR03=''; %ERR04=''; %ERR05=''; %ERR06='';\n %ERR07=''; %ERR08=''; %ERR09=''; %ERR10=''; %ERRSTAT = '';\n   IF %PGMNAME = '' THEN\n                 %ERR01 = 'ERROR Enter Program Name to be REGISTERED ';\n   IF %JOLDS1 = '' THEN\n                %ERR01A = 'ERROR Enter JOL Data Set Name';\n   IF %LANG    = '' THEN %ERR02 = 'ERROR Enter Language ';\n   IF %FUNC    = '' THEN %ERR03 = 'ERROR Enter Program Function ';\n   IF %SOURCE  = '' THEN %ERR04 = 'ERROR Enter Program Source Library';\n   IF %COPYLIB = '' THEN %ERR05 = 'ENTER Macro/Copy Source Library';\n   IF %LOAD    = '' THEN %ERR06 = 'ENTER Program Load Library';\n   IF %AUTOCALL= '' THEN %ERR07 =\n                                'ENTER Auto-Call Library * OPTIONAL *';\n   IF %SUBMOD  = '' THEN %ERR08 = 'ERROR SUB-MODULE NAME * OPTIONAL *';\n   IF %COMPOPT = '' THEN %ERR09 = 'ENTER DEFAULT COMPILER OPTIONS';\n   IF %LINKOPT = '' THEN %ERR10 = 'ENTER DEFAULT LINK OPTIONS';\n   IF %ERR01 ='' & %ERR02 = '' & %ERR03 = '' & %ERR04 = ''\n   & %ERR01A ='' & %ERR05 ='' & %ERR06 = '' & %ERR07 = ''\n   &  %ERR09 ='' & %ERR10 = '' THEN; ELSE IF %CNT < 2 THEN REDO RPANL;\n\n%CNT=0; /* RESET COUNTER FOR LATER USE */\n\n   IF %FUNC    = '' THEN SIGNAL 2,'NO FUNCTION SPECIFIED';\n   %X=TYPE(PGMNAME);\n   IF %X\u00ac='CHAR' THEN DO;\n       %ERROR=1;\n       STOP 'NO PROGRAM SPECIFIED, OR INCORRECT' ;\n   END;\nLABEL REGPL2;\nPANEL (\n'    Please Enter Program FILES or DDNAMES that the program uses.')\n / ('  Enter them like this:-')\n /('    SYSUT1 WRITES, SYSUT2 MAY WRITE, ')\n /('You may use READS, WRITES, MODS OR UPDATES')\n /('',FILES,250,'%FILES')\n /('%ERR01');\nIF %SYSPFK=3 | %SYSPFK=15 THEN EXIT;\n%CNT=%CNT+1;\n%ERR01 = '';\n   IF %FILES  = '' THEN %ERR01 = 'ERROR Enter Program Files ';\n   IF %ERR01 \u00ac= '' & %CNT < 2 THEN REDO REGPL2;\n   IF %FILES  = '' THEN DO;\n       %ERROR=1;\n       SIGNAL ERROR 1,'NO INPUTS or OUTPUTS Specified';\n   END;\n   IF %FILES\u00ac=''\n   THEN DO;\n      SPLIT INPUTS,8 %FILES;\n      EDIT  INPUTS LIST0001,LIST0002,LIST0003,LIST0004,LIST0005,\n         LIST0006,LIST0007,LIST0008,LIST0009,\n         LIST0010,LIST0011,LIST0012,LIST0013,LIST0014,LIST0015,\n         LIST0016,LIST0017,LIST0018,LIST0019,LIST0020,LIST0021,\n         LIST0022,LIST0023,LIST0024,LIST0025,LIST0026,LIST0027,\n         LIST0028,LIST0029,LIST0030,LIST0031,LIST0032,LIST0033,\n         LIST0034,LIST0035,LIST0036,LIST0037,LIST0038,LIST0039,\n         LIST0040,LIST0041,LIST0042,LIST0043,LIST0044,LIST0045,\n         LIST0046,LIST0047,LIST0048,LIST0049,LIST0050\n                   A(8);\n PANEL ('          If Your Files Require Specific File Types ')\n       ('          OR LRECL please insert them here OR Press Enter.')\n       ('          EG.   FB,200     OR   VB,6400        ')\n       ('          -----------------------------------------')\n       ('          %LIST0001            ',TYP001,10)\n       ('          %LIST0003            ',TYP002,10)\n       ('          %LIST0005            ',TYP003,10)\n       ('          %LIST0007            ',TYP004,10)\n       ('          %LIST0009            ',TYP005,10)\n       ('          %LIST0011            ',TYP006,10)\n       ('          %LIST0013            ',TYP007,10)\n       ('          %LIST0015            ',TYP008,10)\n       ('          %LIST0017            ',TYP009,10)\n       ('          %LIST0019            ',TYP010,10);\n  IF %LIST0021 \u00ac='' THEN DO;\n PANEL ('          If Your Files Require Specific File Types ')\n       ('          OR LRECL please insert them here OR Press Enter.')\n       ('          EG.   FB,200     OR   VB,6400        ')\n       ('          -----------------------------------------')\n       ('          %LIST0021            ',TYP011,10)\n       ('          %LIST0023            ',TYP012,10)\n       ('          %LIST0025            ',TYP013,10)\n       ('          %LIST0027            ',TYP014,10)\n       ('          %LIST0029            ',TYP015,10)\n       ('          %LIST0031            ',TYP016,10)\n       ('          %LIST0033            ',TYP017,10)\n       ('          %LIST0035            ',TYP018,10)\n       ('          %LIST0037            ',TYP019,10)\n       ('          %LIST0039            ',TYP020,10);\n END;\n  IF %LIST0041\u00ac='' THEN DO;\n PANEL ('IF YOUR FILES REQUIRE SPECIFIC FILE TYPES ')\n       (' OR RECORD LENGTHS INSERT THEM HERE OR ENTER NULL ')\n       (' EG.   FB,200          VB,6400                    ')\n       (' -----------------------------------------')\n       (' %LIST0041            ',TYP021,10)\n       (' %LIST0043            ',TYP022,10)\n       (' %LIST0045            ',TYP023,10)\n       (' %LIST0047            ',TYP024,10)\n       (' %LIST0049            ',TYP025,10);\n END;\n/* THIS CODE CHANGED 1/6/82 USING REDO  */\n\n      IF %LIST(1)\u00ac=''  THEN DO;\n           IF %LIST(2)\u00ac='MAY' THEN DO;\n                %O1='%LIST(1)  %LIST(2)';\n                %SUB=3;\n           END;\n           ELSE DO;\n                %O1='%LIST(1) MAY %LIST(2)';\n                %SUB=4;\n           END;\n      END;\n%CNT=1;\n\nLABEL RESOLVE;\n      IF %LIST(%SUB)\u00ac=''  THEN DO;\n           %CNT=%CNT+1;\n           IF %LIST(%SUB+1)\u00ac='MAY' THEN DO;\n           SET  O%CNT ='%LIST(%SUB)  %LIST(%SUB+1)';\n                %SUB=%SUB+2; REDO RESOLVE;\n           END;\n           ELSE DO;\n           SET  O%CNT ='%LIST(%SUB)  MAY %LIST(%SUB+2)';\n                %SUB=%SUB+3; REDO RESOLVE;\n           END;\n      END;\n\n   END/* FILES DECODE */  ;\n   IF %SYSTEM='VS1' THEN DO;\n   DCL CNTL * REPLACE ;\n./ %REPLACE NAME=%PGMNAME,LIST=ALL\n  /* THIS PROGRAM WAS REGISTERED ON %DAY %DAYNO %MONTH %YEAR */\n  /* FUNCTION %FUNC  */\n  %%PGMNAME=%PGMNAME;%%LANG='%LANG';\n  IF %%COMPOPT='' THEN %%COMPOPT='%COMPOPT';\n  IF %%LINKOPT='' THEN %%LINKOPT='%LINKOPT';\n  IF %%SOURCE='' THEN %%SOURCE='%SOURCE';\n  IF %%LOAD='' THEN %%LOAD='%LOAD';\n  IF %%LIB='' THEN %%LIB='%COPYLIB';\n  IF %%AUTOCALL='' THEN %%AUTOCALL='%AUTOCALL';\n  %%F1='%O1';%%F2='%O2';\n  %%F3='%O3';%%F4='%O4';\n  %%F5='%O5';%%F6='%O6';\n  %%F7='%O7';%%F8='%O8';\n  %%F9='%O9';%%F10='%O10';\n  %%F11='%O11';%%F12='%O12';\n  %%F13='%O13';%%F14='%O14';\n  %%F15='%O15';%%F16='%O16';\n  %%F17='%O17';%%F18='%O18';\n  %%F19='%O19';%%F20='%O20';\n  %%F21='%O21';%%F22='%O22';\n  %%F23='%O23';%%F24='%O24';\n  %%F25='%O25';\n  %%TYP001='%TYP001';%%TYP002='%TYP002';%%TYP003='%TYP003';\n  %%TYP004='%TYP004';%%TYP005='%TYP005';%%TYP006='%TYP006';\n  %%TYP007='%TYP007';%%TYP008='%TYP008';%%TYP009='%TYP009';\n  %%TYP010='%TYP010';%%TYP011='%TYP011';%%TYP012='%TYP012';\n  %%TYP013='%TYP013';%%TYP014='%TYP014';%%TYP015='%TYP015';\n  %%TYP016='%TYP016';%%TYP017='%TYP017';%%TYP018='%TYP018';\n  %%TYP019='%TYP019';%%TYP020='%TYP020';%%TYP021='%TYP021';\n  %%TYP022='%TYP022';%%TYP023='%TYP023';%%TYP024='%TYP024';\n  %%TYP025='%TYP025';\nEOF;\n     DCL IEBUPDTE PROG\n         SYSPRINT WRITES P\n         ENQ      WRITES ENQ,  /* SO TWO OF THESE JOBS CAN'T RUN */\n         SYSIN    READS  CNTL\n         SYSUT1   READS  %JOLDS1\n         SYSUT2   READS  %JOLDS1;\n     DCL P PRINTER NODCB;\n     DCL ENQ DS %SYSPREF.JOL.HOLD.JOB 0 TRACKS SYSDA NODEF;\n     RUN IEBUPDTE;\n     END;\n     ELSE DO;\n     UJY09OP '%JOLDS1' %PGMNAME\n' /* THIS PROGRAM WAS REGISTERED ON %DAY %DAYNO %MONTH %YEAR */'\n' /* FUNCTION %FUNC  */ '\n' %%PGMNAME=%PGMNAME;%%LANG=''%LANG'';'\n' IF %%COMPOPT='''' THEN %%COMPOPT=''%COMPOPT''; '\n' IF %%LINKOPT='''' THEN %%LINKOPT=''%LINKOPT''; '\n' IF %%SOURCE='''' THEN %%SOURCE=''%SOURCE''; '\n' IF %%LOAD='''' THEN %%LOAD=''%LOAD'';'\n' IF %%LIB='''' THEN %%LIB=''%COPYLIB'';'\n' IF %%AUTOCALL='''' THEN %%AUTOCALL=''%AUTOCALL'';'\n' %%F1=''%O1'';%%F2=''%O2'';'\n' %%F3=''%O3'';%%F4=''%O4'';'\n' %%F5=''%O5'';%%F6=''%O6'';'\n' %%F7=''%O7'';%%F8=''%O8'';'\n' %%F9=''%O9'';%%F10=''%O10'';'\n' %%F11=''%O11'';%%F12=''%O12'';'\n' %%F13=''%O13'';%%F14=''%O14'';'\n' %%F15=''%O15'';%%F16=''%O16'';'\n' %%F17=''%O17'';%%F18=''%O18'';'\n' %%F19=''%O19'';%%F20=''%O20'';'\n' %%F21=''%O21'';%%F22=''%O22'';'\n' %%F23=''%O23'';%%F24=''%O24'';'\n' %%F25=''%O25'';'\n' %%TYP001=''%TYP001'';%%TYP002=''%TYP002'';%%TYP003=''%TYP003'';'\n' %%TYP004=''%TYP004'';%%TYP005=''%TYP005'';%%TYP006=''%TYP006'';'\n' %%TYP007=''%TYP007'';%%TYP008=''%TYP008'';%%TYP009=''%TYP009'';'\n' %%TYP010=''%TYP010'';%%TYP011=''%TYP011'';%%TYP012=''%TYP012'';'\n' %%TYP013=''%TYP013'';%%TYP014=''%TYP014'';%%TYP015=''%TYP015'';'\n' %%TYP016=''%TYP016'';%%TYP017=''%TYP017'';%%TYP018=''%TYP018'';'\n' %%TYP019=''%TYP019'';%%TYP020=''%TYP020'';%%TYP021=''%TYP021'';'\n' %%TYP022=''%TYP022'';%%TYP023=''%TYP023'';%%TYP024=''%TYP024'';'\n' %%TYP025=''%TYP025'';';\n END;\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SORTO": {"ttr": 15881, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x81\\x13\\x7f\\x00\\x86\\x12\\x1f\\x11\\x08\\x00P\\x00L\\x00\\x01\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1981-05-17T00:00:00", "modifydate": "1986-05-01T11:08:00", "lines": 80, "newlines": 76, "modlines": 1, "user": "JOL"}, "text": "RELEASE: MACRO;                                                         1001 A03\nDCL %REL  INIT '0' EXT ;                                                1002\nIF %SYSLABEL = '' THEN                                                  1003\nDO ;                                                                    1004\n   %REL = %REL + 1 ;                                                    1005\n   %SYSLABEL = 'REL%REL' ;                                              1006\nEND ;                                                                   1007\nDCL Z  SYSOUT='(A,INTRDR)' FB 80,80 BUFNO=1 ;\nIF %LIST(01)= '' THEN STOP 'NO JOBNAME TO RELEASE' ;                    1008\nDCL JOBREL * REPLACE ;                                                  1018 A02\n$A'%LIST(01)'                                                           1019 A02\nEOF;                                                                    1019 A02\nCOPY JOBREL TO Z ;\nEND ;                                                                   9999 A02\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STACK": {"ttr": 15884, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x81!\\x7f\\x00\\x81\\'/\\x15\"\\x00\\x04\\x00\\x05\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1981-08-05T00:00:00", "modifydate": "1981-09-29T15:22:00", "lines": 4, "newlines": 5, "modlines": 0, "user": "JOL"}, "text": "RENAME: MACRO (\n/*********************************************************************/\n/*                       RENAME                                      */\n/*       JOL MACRO TO BE USED TO RENAME A DATASET OR A MEMBER        */\n/*       OF A PARTITIONED DATASET.                                   */\n/*                                                                   */\n/*                                                                   */\n/*********************************************************************/\n         %TO,                     /* DUMMY KEYWORD                   */\n         ) ;\n/*********************************************************************/\n/*       INITIALISE SOME SYMBOLS FOR THIS MACRO                      */\n/*********************************************************************/\nDCL %OLDDSN  INIT '' ;\nDCL %OLDMEM  INIT '' ;\nDCL %NEWDSN  INIT '' ;\nDCL %NEWMEM  INIT '' ;\nDCL %RUNJOB  INIT '' ;\n/*********************************************************************/\n/*       PROCESS OLD AND NEW NAMES FOR RENAME PROCESSING             */\n/*********************************************************************/\nDCL %###X    INIT '' ;\nDCL %###L    INIT '' ;\nIF %LIST(1) \u00ac= '' & %LIST(2) \u00ac= '' THEN\n   DO;\n      %OLDDSN = '%LIST(1)';\n      %###X   = INDEX(OLDDSN,'(');\n      IF %###X \u00ac= 0 THEN\n      DO;\n         %OLDMEM  = SUBSTR(OLDDSN,%###X);\n         %OLDMEM  = SUBSTR(OLDMEM,2);\n         %###L    = LENGTH(OLDMEM);\n         %###L    = %###L - 1;\n         %OLDMEM  = SUBSTR(OLDMEM,1,%###L);\n         %###X    = %###X - 1;\n         %OLDDSN  = SUBSTR(OLDDSN,1,%###X);\n         IF %OLDDSN = '' THEN STOP 'NO OLD DSN SUPPLIED FOR RENAME';\n      END;\n      %NEWDSN = '%LIST(2)';\n      %###X   = INDEX(NEWDSN,'(');\n      IF %###X \u00ac= 0 THEN\n      DO;\n         %NEWMEM  = SUBSTR(NEWDSN,%###X);\n         %NEWMEM  = SUBSTR(NEWMEM,2);\n         %###L    = LENGTH(NEWMEM);\n         %###L    = %###L - 1;\n         %NEWMEM  = SUBSTR(NEWMEM,1,%###L);\n         %###X    = %###X - 1;\n         %NEWDSN  = SUBSTR(NEWDSN,1,%###X);\n      END;\n   END;\nELSE STOP 'BOTH OLD AND NEW NAMES MUST BE GIVEN FOR RENAME' ;\nIF %OLDDSN  = '' THEN STOP 'OLD NAME MUST BE GIVEN FOR RENAME' ;\nIF %OLDMEM \u00ac= '' & %NEWMEM = '' THEN\n   STOP 'BOTH OLD AND NEW NAMES MUST CONTAIN A MEMBER NAME' ;\nIF %NEWMEM \u00ac= '' & %OLDMEM = '' THEN\n   STOP 'BOTH OLD AND NEW NAMES MUST CONTAIN A MEMBER NAME' ;\n/*********************************************************************/\n/*********************************************************************/\n/*             SET UP A RUN FOR A DATASET RENAME                     */\n/*********************************************************************/\nIF %OLDMEM = '' & %NEWMEM = '' THEN\nDO;                                    /*       RENAME DATASET       */\n   DCL   CONTROL   *  REPLACE ;\n   ALTER %OLDDSN NEWNAME(%NEWDSN)\nEOF;\nEND;\n/*********************************************************************/\n/*             SET UP A RUN FOR A MEMBER RENAME                      */\n/*********************************************************************/\nIF %OLDMEM \u00ac= '' & %NEWMEM \u00ac= '' THEN\nDO;\n      IF %NEWDSN \u00ac= %OLDDSN THEN\n         STOP 'TRYING TO RENAME A MEMBER TO A DIFFERENT DATASET' ;\n   DCL   CONTROL   *  REPLACE ;\n   ALTER %OLDDSN(%OLDMEM) NEWNAME(%NEWDSN(%NEWMEM))\nEOF;\nEND;\n/*********************************************************************/\n/*             DECLARE PROGRAM  FOR RENAME                  */\n/*********************************************************************/\nDCL      MESSAGES  SYSOUT;\nDCL      IDCAMS  PROGRAM\n                   SYSPRINT WRITES  MESSAGES\n                   SYSIN    READS   CONTROL ;\n/*********************************************************************/\n/*                 EXECUTE SELECTED UTILITY                          */\n/*********************************************************************/\nRUN IDCAMS;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STOPNET": {"ttr": 15886, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x00\\x00\\x00\\x00\\x87$o\\x00\\x87$o\\x16 \\x00\\x06\\x00\\x06\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "04.00", "flags": 0, "createdate": "1987-09-03T00:00:00", "modifydate": "1987-09-03T16:20:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "JOL"}, "text": "rename:macro;     /* Rename data set as specified by the User */\n\nIF %LIST(1) \u00ac= '' & %LIST(2) \u00ac= '' THEN\n   DO;\n      renos '%list(1)' to '%list(2)';\n      exit;\n   end;\n\n/* No parameters specified - get information from User */\n\ndcl disk                  init('');\ndcl direct                init('');\ndcl file                  init('%sysuid.*');\ndcl more                  init('Y');\ndcl lastcc                init('0');\n\n\nloop:\n   panel %boxcolor box\n/ (ctr %hedcolor 'RENAME Data Set Panel')\n//\n(ctr 'You can enter the name of the data set you wish to RENAME')\n(ctr 'or select a data set from a sorted list.')\n/\n  /*\n('         Disk                    ====>',disk  ,6,'%disk')\n  */\n/\n('         Enter Search Pattern    ====>',file  ,30,'%file')\n/\n('         Show Directory (Y or N) ====>',show  ,1,'Y')\nhelpline('Press F3 to Exit or Enter to Start Processing')\n;\n\n   if syspfk=3 then exit;   /* Back to Caller */\n\n   if disk\u00ac='' then\n   file='%disk:%file';      /* Add in Disk Drive */\n\n   if %show='Y'              /* Show Directory ? */\n   then do;\n       showdsn level('%file') 'RENAME Data Set Selection';\n       if lastcc\u00ac=0 then goto loop;   /* User cancelled REN */\n       parm='%showsel';\n   end;\n   else parm='%file';\n\n   panel %boxcolor box\n/ (ctr %hedcolor 'RENAME Data Set Panel')\n/////\n(ctr 'Renaming 'bold '%file' )\n/\n/\n('         New Name      ====>',newname,44,'')\n/\nhelpline\n ('Press F3 to Exit or Enter to Start Processing')\n;\nvalidate:\n   if syspfk=3 then exit;   /* Back to Caller */\n\n   if newname=''\n   then do;\n      panel reread from newname 'You must enter a New Name';\n      goto validate;\n   end;\n   renos '%parm' to '%newname';\n   goto loop;\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STORPROC": {"ttr": 15888, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "RENAME: MACRO (\n/*********************************************************************/\n/*                       RENAME                                      */\n/*       JOL MACRO TO BE USED TO RENAME A DATASET OR A MEMBER        */\n/*       OF A PARTITIONED DATASET.                                   */\n/*                                                                   */\n/*                                                                   */\n/*********************************************************************/\n         %TO,                     /* DUMMY KEYWORD                   */\n         ) ;\n/*********************************************************************/\n/*       INITIALISE SOME SYMBOLS FOR THIS MACRO                      */\n/*********************************************************************/\nDCL %OLDDSN  INIT '' ;\nDCL %OLDMEM  INIT '' ;\nDCL %NEWDSN  INIT '' ;\nDCL %NEWMEM  INIT '' ;\nDCL %RUNJOB  INIT '' ;\n/*********************************************************************/\n/*       PROCESS OLD AND NEW NAMES FOR RENAME PROCESSING             */\n/*********************************************************************/\nDCL %###X    INIT '' ;\nDCL %###L    INIT '' ;\nIF %LIST(1) \u00ac= '' & %LIST(2) \u00ac= '' THEN\n   DO;\n      %OLDDSN = '%LIST(1)';\n      %###X   = INDEX(OLDDSN,'(');\n      IF %###X \u00ac= 0 THEN\n      DO;\n         %OLDMEM  = SUBSTR(OLDDSN,%###X);\n         %OLDMEM  = SUBSTR(OLDMEM,2);\n         %###L    = LENGTH(OLDMEM);\n         %###L    = %###L - 1;\n         %OLDMEM  = SUBSTR(OLDMEM,1,%###L);\n         %###X    = %###X - 1;\n         %OLDDSN  = SUBSTR(OLDDSN,1,%###X);\n         IF %OLDDSN = '' THEN STOP 'NO OLD DSN SUPPLIED FOR RENAME';\n      END;\n      %NEWDSN = '%LIST(2)';\n      %###X   = INDEX(NEWDSN,'(');\n      IF %###X \u00ac= 0 THEN\n      DO;\n         %NEWMEM  = SUBSTR(NEWDSN,%###X);\n         %NEWMEM  = SUBSTR(NEWMEM,2);\n         %###L    = LENGTH(NEWMEM);\n         %###L    = %###L - 1;\n         %NEWMEM  = SUBSTR(NEWMEM,1,%###L);\n         %###X    = %###X - 1;\n         %NEWDSN  = SUBSTR(NEWDSN,1,%###X);\n      END;\n   END;\nELSE STOP 'BOTH OLD AND NEW NAMES MUST BE GIVEN FOR RENAME' ;\nIF %OLDDSN  = '' THEN STOP 'OLD NAME MUST BE GIVEN FOR RENAME' ;\nIF %OLDMEM \u00ac= '' & %NEWMEM = '' THEN\n   STOP 'BOTH OLD AND NEW NAMES MUST CONTAIN A MEMBER NAME' ;\nIF %NEWMEM \u00ac= '' & %OLDMEM = '' THEN\n   STOP 'BOTH OLD AND NEW NAMES MUST CONTAIN A MEMBER NAME' ;\n/*********************************************************************/\n/*********************************************************************/\n/*             SET UP A RUN FOR A DATASET RENAME                     */\n/*********************************************************************/\nIF %OLDMEM = '' & %NEWMEM = '' THEN\nDO;                                    /*       RENAME DATASET       */\n   DCL   CONTROL   *  REPLACE ;\n   ALTER %OLDDSN NEWNAME(%NEWDSN)\nEOF;\nEND;\n/*********************************************************************/\n/*             SET UP A RUN FOR A MEMBER RENAME                      */\n/*********************************************************************/\nIF %OLDMEM \u00ac= '' & %NEWMEM \u00ac= '' THEN\nDO;\n      IF %NEWDSN \u00ac= %OLDDSN THEN\n         STOP 'TRYING TO RENAME A MEMBER TO A DIFFERENT DATASET' ;\n   DCL   CONTROL   *  REPLACE ;\n   ALTER %OLDDSN(%OLDMEM) NEWNAME(%NEWDSN(%NEWMEM))\nEOF;\nEND;\n/*********************************************************************/\n/*             DECLARE PROGRAM  FOR RENAME                  */\n/*********************************************************************/\nDCL      MESSAGES  SYSOUT;\nDCL      IDCAMS  PROGRAM\n                   SYSPRINT WRITES  MESSAGES\n                   SYSIN    READS   CONTROL ;\n/*********************************************************************/\n/*                 EXECUTE SELECTED UTILITY                          */\n/*********************************************************************/\nRUN IDCAMS;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUBMIT": {"ttr": 16130, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "RENAME: MACRO (\n/*********************************************************************/\n/*                       RENAME                                      */\n/*       JOL MACRO TO BE USED TO RENAME A DATASET OR A MEMBER        */\n/*       OF A PARTITIONED DATASET.                                   */\n/*                                                                   */\n/*                                                                   */\n/*********************************************************************/\n         %TO,                     /* DUMMY KEYWORD                   */\n         ) ;\n/*********************************************************************/\n/*       INITIALISE SOME SYMBOLS FOR THIS MACRO                      */\n/*********************************************************************/\nDCL %OLDDSN  INIT '' ;\nDCL %OLDMEM  INIT '' ;\nDCL %NEWDSN  INIT '' ;\nDCL %NEWMEM  INIT '' ;\nDCL %RUNJOB  INIT '' ;\n/*********************************************************************/\n/*       PROCESS OLD AND NEW NAMES FOR RENAME PROCESSING             */\n/*********************************************************************/\nDCL %###X    INIT '' ;\nDCL %###L    INIT '' ;\nIF %LIST(1) \u00ac= '' & %LIST(2) \u00ac= '' THEN\n   DO;\n      %OLDDSN = '%LIST(1)';\n      %###X   = INDEX(OLDDSN,'(');\n      IF %###X \u00ac= 0 THEN\n      DO;\n         %OLDMEM  = SUBSTR(OLDDSN,%###X);\n         %OLDMEM  = SUBSTR(OLDMEM,2);\n         %###L    = LENGTH(OLDMEM);\n         %###L    = %###L - 1;\n         %OLDMEM  = SUBSTR(OLDMEM,1,%###L);\n         %###X    = %###X - 1;\n         %OLDDSN  = SUBSTR(OLDDSN,1,%###X);\n         IF %OLDDSN = '' THEN STOP 'NO OLD DSN SUPPLIED FOR RENAME';\n      END;\n      %NEWDSN = '%LIST(2)';\n      %###X   = INDEX(NEWDSN,'(');\n      IF %###X \u00ac= 0 THEN\n      DO;\n         %NEWMEM  = SUBSTR(NEWDSN,%###X);\n         %NEWMEM  = SUBSTR(NEWMEM,2);\n         %###L    = LENGTH(NEWMEM);\n         %###L    = %###L - 1;\n         %NEWMEM  = SUBSTR(NEWMEM,1,%###L);\n         %###X    = %###X - 1;\n         %NEWDSN  = SUBSTR(NEWDSN,1,%###X);\n      END;\n   END;\nELSE STOP 'BOTH OLD AND NEW NAMES MUST BE GIVEN FOR RENAME' ;\nIF %OLDDSN  = '' THEN STOP 'OLD NAME MUST BE GIVEN FOR RENAME' ;\nIF %OLDMEM \u00ac= '' & %NEWMEM = '' THEN\n   STOP 'BOTH OLD AND NEW NAMES MUST CONTAIN A MEMBER NAME' ;\nIF %NEWMEM \u00ac= '' & %OLDMEM = '' THEN\n   STOP 'BOTH OLD AND NEW NAMES MUST CONTAIN A MEMBER NAME' ;\n/*********************************************************************/\n/*********************************************************************/\n/*             SET UP A RUN FOR A DATASET RENAME                     */\n/*********************************************************************/\nIF %OLDMEM = '' & %NEWMEM = '' THEN\nDO;                                    /*       RENAME DATASET       */\n   DCL   CONTROL   *  REPLACE ;\n   ALTER %OLDDSN NEWNAME(%NEWDSN)\nEOF;\nEND;\n/*********************************************************************/\n/*             SET UP A RUN FOR A MEMBER RENAME                      */\n/*********************************************************************/\nIF %OLDMEM \u00ac= '' & %NEWMEM \u00ac= '' THEN\nDO;\n      IF %NEWDSN \u00ac= %OLDDSN THEN\n         STOP 'TRYING TO RENAME A MEMBER TO A DIFFERENT DATASET' ;\n   DCL   CONTROL   *  REPLACE ;\n   ALTER %OLDDSN(%OLDMEM) NEWNAME(%NEWDSN(%NEWMEM))\nEOF;\nEND;\n/*********************************************************************/\n/*             DECLARE PROGRAM  FOR RENAME                  */\n/*********************************************************************/\nDCL      MESSAGES  SYSOUT;\nDCL      IDCAMS  PROGRAM\n                   SYSPRINT WRITES  MESSAGES\n                   SYSIN    READS   CONTROL ;\n/*********************************************************************/\n/*                 EXECUTE SELECTED UTILITY                          */\n/*********************************************************************/\nRUN IDCAMS;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUBMITO": {"ttr": 16136, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x87\\x16/\\x00\\x87\\x16/\\x17R\\x01m\\x01m\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-06-11T00:00:00", "modifydate": "1987-06-11T17:52:00", "lines": 365, "newlines": 365, "modlines": 0, "user": "JOL"}, "text": "rename:macro;     /* Rename data set as specified by the User */\n\nIF %LIST(1) \u00ac= '' & %LIST(2) \u00ac= '' THEN\n   DO;\n      renos '%list(1)' to '%list(2)';\n      exit;\n   end;\n\n/* No parameters specified - get information from User */\n\ndcl disk                  init('');\ndcl direct                init('');\ndcl file                  init('%sysuid.*');\ndcl more                  init('Y');\ndcl lastcc                init('0');\n\n\nloop:\n   panel %boxcolor box\n/ (ctr %hedcolor 'RENAME Data Set Panel')\n//\n(ctr 'You can enter the name of the data set you wish to RENAME')\n(ctr 'or select a data set from a sorted list.')\n/\n('         Disk                    ====>',disk  ,6,'%disk')\n/\n('         Enter Search Pattern    ====>',file  ,12,'%file')\n/\n('         Show Directory (Y or N) ====>',show  ,1,'Y')\nhelpline('Press F3 to Exit or Enter to Start Processing')\n;\n\n   if syspfk=3 then exit;   /* Back to Caller */\n\n   if disk\u00ac='' then\n   parm='%disk:%file';      /* Add in Disk Drive */\n\n   if %show='Y'              /* Show Directory ? */\n   then do;\n       showdsn level('%parm') 'RENAME Data Set Selection';\n       if lastcc\u00ac=0 then goto loop;   /* User cancelled REN */\n       parm='%showsel';\n   end;\n   else parm='%file';\n\n   panel %boxcolor box\n/ (ctr %hedcolor 'RENAME Data Set Panel')\n/////\n(ctr 'Renaming 'bold '%parm' )\n/\n/\n('         New Name      ====>',newname,44,'')\n/\nhelpline\n ('Press F3 to Exit or Enter to Start Processing')\n;\nvalidate:\n   if syspfk=3 then exit;   /* Back to Caller */\n\n   if newname=''\n   then do;\n      panel reread from newname 'You must enter a New Name';\n      goto validate;\n   end;\n   renos '%parm' to '%newname';\n   goto loop;\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SUBMITOO": {"ttr": 16389, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\r\\x00\\x00\\x00\\x87$o\\x00\\x90\\x12\\x1f\\x13\\x06\\x01[\\x01x\\x00\\x01\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "04.13", "flags": 0, "createdate": "1987-09-03T00:00:00", "modifydate": "1990-05-01T13:06:00", "lines": 347, "newlines": 376, "modlines": 1, "user": "JOL"}, "text": "RETAIN: MACRO(%L1=,%L2=,%L3=,%L4=,%L5=,%L6=,%L7=,%L8=,%L9=,%AFFIN) ;    1001 A03\nDCL %RETAINLB INIT '0' EXT ;                                            1002\nIF %SYSLABEL = '' THEN                                                  1003\nDO ;                                                                    1004\n   %RETAINLB = %RETAINLB + 1 ;                                          1005\n   %SYSLABEL = 'RETAIN%RETAINLB' ;                                      1006\nEND ;                                                                   1007\nIF %LIST(1) = '' THEN STOP 'NO DSID TO RETAIN' ;                        1008\nIF %LIST(1) \u00ac= '' THEN %L1 = 'LIST1 READS %LIST(1)' ;                   1009\nIF %LIST(2) \u00ac= '' THEN %L2 = 'LIST2 READS %LIST(2) %AFFIN' ;            1010 A03\nIF %LIST(3) \u00ac= '' THEN %L3 = 'LIST3 READS %LIST(3) %AFFIN' ;            1011\nIF %LIST(4) \u00ac= '' THEN %L4 = 'LIST4 READS %LIST(4) %AFFIN' ;            1012\nIF %LIST(5) \u00ac= '' THEN %L5 = 'LIST5 READS %LIST(5) %AFFIN' ;            1013\nIF %LIST(6) \u00ac= '' THEN %L6 = 'LIST6 READS %LIST(6) %AFFIN' ;            1014\nIF %LIST(7) \u00ac= '' THEN %L7 = 'LIST6 READS %LIST(7) %AFFIN' ;            1015\nIF %LIST(8) \u00ac= '' THEN %L8 = 'LIST8 READS %LIST(8) %AFFIN' ;            1016\nIF %LIST(9) \u00ac= '' THEN %L9 = 'LIST9 READS %LIST(9) %AFFIN' ;            1017\nDCL IEFBR14 PROG %L1 %L2 %L3 %L4 %L5 %L6 %L7 %L8 %L9 ;                  1018 A02\n%SYSLABEL : RUN IEFBR14 ;                                               1019 A02\nEND ;                                                                   9999 A02\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUBMITS": {"ttr": 16643, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04\\x00\\x00\\x00\\x00\\x87$o\\x00\\x87$o\\x16 \\x01x\\x01x\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "04.00", "flags": 0, "createdate": "1987-09-03T00:00:00", "modifydate": "1987-09-03T16:20:00", "lines": 376, "newlines": 376, "modlines": 0, "user": "JOL"}, "text": "ROUTE:MACRO (%TYPE=PR,%DDNAME=,%OPT=) ;\nIF %LIST(1) \u00ac= 'PRINT' & %LIST(1) \u00ac= 'PUNCH' THEN\n   SIGNAL 2,'ROUTE : PRINT | PUNCH NOT SPECIFIED : %LIST(1)' ;\nIF %LIST(2) \u00ac= 'TO' THEN %OPT = '%LIST(2)';\n                    ELSE %OPT = '%LIST(3)';\nIF %SPOOL = '' | %SPOOL = 'JES1' THEN\n   SIGNAL 2,'SYSTEM NOT HASP,JES2,ASP,JES3 BUT %SPOOL';\nIF %SPOOL = 'JES2' | %SPOOL = 'HASP' THEN\n   OPCNTL '/*ROUTE  %LIST(1) %OPT' AFTER JOBCARD ;\nIF %LIST(1) = 'PUNCH' THEN %TYPE = 'PU';\nIF %OPT = 'LOCAL' THEN %OPT = 'ANYLOCAL';\nIF %SPOOL = 'JES3' | %SPOOL = 'ASP' THEN\n   OPCNTL '//*FORMAT %TYPE,DDNAME=%DDNAME,DEST=%OPT' AFTER JOBCARD;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUBMMENU": {"ttr": 16649, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "runjob:macro;                         /* Run a Jol prepared program  */\n\ndcl job                      init('');  /* Local Workarea  */\ndcl listjob                  init('Y'); /* Local Workarea  */\ndcl $incjob             EXT  init('');  /* Global Workarea */\n\n\nloop:\n   panel %boxcolor box\n/ (ctr %hedcolor 'Select Job to Run')\n/\n(ctr 'Please Enter the Name of the Job you wish to Run')\n(ctr 'or select one from a sorted list.')\n////\n('         Job to Run              ====>',job   ,8,'%job')\n//\n('         List Job to Screen ?    ====>',listjob   ,8,'%listjob')\nhelpline ('Press F3 to Exit or F4 to Select Job from a List.')\n;\n\nvalidinp:\n   if %syspfk = 0\n   then do;\n        if  %job =''\n        then do;\n           panel reread from job\n              'Please Enter a Jobname or Press a Function Key';\n           goto validinp;\n        end;\n        if listjob='Y' then jolopt pi;\n        else jolopt npi;\n        $incjob = '%job';\n        goto endrunj;\n        include '%job.job';\n        exit;\n   end;\n   if syspfk=3 then exit;      /* Back to Caller */\n   if panels='NO' then exit;   /* Back to Caller */\n   if syspfk=4                 /* Select from List */\n   then do;\n        showmem joljobs 'Select Job to Run';\n        job    ='%$joljobs(%showsel)';\n        $incjob='%job';\n        if listjob='Y' then jolopt pi;\n        else jolopt npi;\n        include '%job';\n        goto endrunj;\n        exit;\n   end;\n   if %syspfk\u00ac=0 then redo loop;\n\n\nendrunj:\nend;\n       if '%$incjob' \u00ac= ''\n       then do;\n         include '%$incjob';\n       end;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TEXIST": {"ttr": 16899, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x86\\x15o\\x00\\x86\\x15o\\x13U\\x00+\\x00+\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-06-05T00:00:00", "modifydate": "1986-06-05T13:55:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "JOL"}, "text": "SAVESYMS:MACRO; /* THIS MACRO SAVES ANY SYMBOLICS SENT TO IT */\n                /* THE FORMAT OF THE MACRO IS\n                   SAVESYMS YEAR DATE MONTH IN 'DATA.SET.NAME(MEMBER)';\n                   WHERE YEAR DATE AND MONTH ARE THE SYMBOLICS\n                   DATA.SET.NAME IS THE DATA SET NAME TO SAVE THE\n                   MEMBER.   */\n\n/*NOTE           IF A SYMBOLIC IS NULL IT IS SAVED\n  ****           IN THIS VERSION. EG: IF %A IS NULL THEN SAVESYMS WILL\n                 PRODUCE A LINE %A=''; */\n                /* IF SAVESYMS IS CALLED WITHOUT THE DSN TO SAVE IT\n                   OR NO LIST ITEMS, NOTHING IS SAVED.\n                   IF IT IS CALLED WITH \"SAVESYMS A IN;\" THEN A STOP\n                   MESSAGE IS ISSUED.\n\n                 */\n\n DCL %LISTIN, %CNT, %LTMB, %RTMB         INIT 0 ; /* SYMBOLICS USED */\n DCL %JOLDS, %MEMBER, %CHECK, %CHECKVAL  INIT ''; /* IN THIS MACRO  */\n DCL %QUOTE INIT '''';\n\nIF %LIST(2) \u00ac= '' THEN DO;\n   %LISTIN = %SYSNLIST;  /* NUMBER OF LIST ITEMS */\n\n   %LISTIN=%LISTIN-1;\n   IF %LIST(%LISTIN) = 'IN' THEN DO;\n      %LISTIN=%LISTIN+1;\n      %JOLDS= '%LIST(%LISTIN)' ; /* DSN TO SAVE DATA */\n      %LTMB = INDEX(JOLDS,'('); /* POSITION OF (    */\n      %RTMB = INDEX(JOLDS,')'); /* POSITION OF )    */\n      IF %RTMB \u00ac= 0 THEN DO;\n              %RTMB = %RTMB - 1;\n              %JOLDS=SUBSTR(JOLDS,1,%RTMB); /* REMOVE RIGHT ) */\n      END;     /* IF NO RIGHT BRACKET THEN OK */\n\n      IF %LTMB >= 1 THEN DO;\n         %LTMB = %LTMB +1;\n         %MEMBER=SUBSTR(JOLDS,%LTMB); /* NOW WE HAVE THE MEMBER NAME */\n         %LTMB=%LTMB-2;\n         %JOLDS=SUBSTR(JOLDS,1,%LTMB); /* NOW WE HAVE THE DSN */\n      END;\n      WRITE 'SAVING IN ''%JOLDS'' MEMBER ''%MEMBER''';\n      ELSE DO;\n         STOP 'CANNOT FIND MEMBER TO PLACE SYMBOLICS CORRECTLY';\n         EXIT;\n      END;\n   END; /* IF IN */\nELSE DO;\n     WRITE 'NO \"IN\" FOUND IN CALL TO SAVESYMS NOTHING SAVED';\n     /* EXIT OR STOP OR NOTHING OR CREATE AN EARLIER DEFAULT */\n     END;\n\n  IF %JOLDS \u00ac= '' & %MEMBER \u00ac= '' THEN DO;\n     %LISTIN = %LISTIN-2;\n     ENQ SPFDSN/'%JOLDS' WAIT;\n     IF %LASTCC\u00ac=0\n     THEN DO;\n          WRITE 'ENQUEUE FOR DATA SET FAILED - NO SYMBOLICS SAVED';\n          EXIT;\n     END;\n     ALLOC F($SAVESYM) DA('%JOLDS(%MEMBER)') SHR;\n     OPEN F($SAVESYM) OUTPUT;\n     %CNT = 0; /* CNTR FOR REDOING LABELS */\n      LABEL RESOLVE;\n         %CNT=%CNT+1;\n             %CHECK = '';\n             %CHECK = '%LIST(%CNT)'; /* EG LIST1, LIST2 ETC */\n      %SET = 'SET CHECKVAL = %%QUOTE%%%CHECK%%QUOTE';\n   /*%SET='SET CHECKVAL=%%%CHECK'; SEE DJD BEFORE USING THIS CODE */\n     %SET;\n      %CHECK=%%||%CHECK;\n      WRITE FILE($SAVESYM) FROM('%CHECK =''%CHECKVAL'';');\n      IF %CNT < %LISTIN & %CNT < 50 THEN REDO RESOLVE;\n      CLOSE F($SAVESYM);        /*  CLOSE FILE */\n      FREEFILE F($SAVESYM);     /*  AND FREE IT */\n     DEQ SPFDSN/'%JOLDS';\n    END;\nEND;\nELSE DO;\n     WRITE 'NOT ENOUGH ITEMS FOUND IN CALL TO MACRO NOTHING SAVED';\n     END;\nEND; /* OF MACRO */\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TP27": {"ttr": 16901, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x02\\x01\\t\\x01/\\x01\\t\\x01/\\x14U\\x00-\\x00\\x12\\x00\\x1d\\xd1\\xd6\\xd3\\xf6\\xf0@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2009-01-12T00:00:00", "modifydate": "2009-01-12T14:55:02", "lines": 45, "newlines": 18, "modlines": 29, "user": "JOL60"}, "text": " SAVESYMS:MACRO; /* THIS MACRO SAVES ANY SYMBOLICS SENT TO IT */\n\n    /* Modified for Personal Jol, March, 1988 */\n    /* Note, MEMBER name not supported for PERSONAL Jol */\n\n    /* THE FORMAT OF THE MACRO IS:-\n\n       SAVESYMS YEAR DATE MONTH IN 'DATA.SET.NAME(MEMBER)';\n\n       WHERE YEAR DATE AND MONTH ARE THE SYMBOLICS\n       DATA.SET.NAME IS THE DATA SET NAME TO SAVE THE\n       MEMBER.   */\n\n /*NOTE           IF A SYMBOLIC IS NULL IT IS SAVED\n   ****           IN THIS VERSION. EG: IF %A IS NULL THEN SAVESYMS WILL\n                  PRODUCE A LINE %A=''; */\n\n      /* IF SAVESYMS IS CALLED WITHOUT THE DSN TO SAVE IT\n         OR NO LIST ITEMS, NOTHING IS SAVED.\n         IF IT IS CALLED WITH \"SAVESYMS A IN;\" THEN A STOP\n         MESSAGE IS ISSUED.\n\n      */\n\n  DCL LISTIN, CNT, LTMB, RTMB         INIT 0 ; /* SYMBOLICS USED */\n  DCL JOLDS, MEMBER, CHECK, CHECKVAL  INIT ''; /* IN THIS MACRO  */\n  DCL QUOTE INIT '''';\n\n IF LIST(2) \u00ac= '' THEN DO;\n    LISTIN = SYSNLIST;  /* NUMBER OF LIST ITEMS */\n\n    LISTIN=LISTIN-1;\n    IF LIST(LISTIN) = 'IN' THEN DO;\n       LISTIN=LISTIN+1;\n       JOLDS= '%LIST(%LISTIN)' ; /* DSN TO SAVE DATA */\n       LTMB = INDEX(JOLDS,'('); /* POSITION OF (    */\n       RTMB = INDEX(JOLDS,')'); /* POSITION OF )    */\n       IF RTMB \u00ac= 0 THEN DO;\n               RTMB = RTMB - 1;\n               JOLDS=SUBSTR(JOLDS,1,RTMB); /* REMOVE RIGHT ) */\n       END;     /* IF NO RIGHT BRACKET THEN OK */\n\n       IF LTMB >= 1 THEN DO;\n          LTMB = LTMB +1;\n          MEMBER=SUBSTR(JOLDS,LTMB); /* NOW WE HAVE THE MEMBER NAME */\n          LTMB=LTMB-2;\n          JOLDS=SUBSTR(JOLDS,1,LTMB); /* NOW WE HAVE THE DSN */\n       END;\n/*     WRITE '%JOLDS   %MEMBER';\n       ELSE DO;\n          STOP 'CANNOT FIND MEMBER TO PLACE SYMBOLICS CORRECTLY';\n          EXIT;\n       END;     */\n    END; /* IF IN */\n ELSE DO;\n      WRITE 'No Data Set Specified for SAVESYMS:- Ignored';\n      exit;\n      END;\n\n/* IF JOLDS \u00ac= '' & MEMBER \u00ac= '' THEN DO; */\n   IF JOLDS \u00ac= '' THEN DO;\n      LISTIN = LISTIN-2;\n      alloc f($saves) da('%jolds') new;\n      open f($saves) output;\n\n      CNT = 0;                  /* Counter FOR REDOING LABELS */\nRESOLVE:\n          CNT=CNT+1;\n          CHECK = '%LIST(%CNT)'; /* EG LIST1, LIST2 ETC */\n          set SET = 'SET CHECKVAL = ''%%%CHECK''';\n          if length(set)=16\n          then do;\n             write file($saves) from('%CHECK='' '';');\n             IF CNT < LISTIN then goto RESOLVE;\n          end;\n          %SET;\n          write file($saves) from(\n               '%CHECK =''%CHECKVAL'';'); /* OUTPUT THE DATA */\n       IF CNT < LISTIN then goto RESOLVE;\n       close f($saves);          /*  CLOSE FILE AND FREE IT */\n     END;\n END;\n ELSE DO;\n      WRITE 'Not Enough Items Found in SAVESYMS, Nothing Saved';\n      END;\n END; /* OF MACRO */\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSO": {"ttr": 17935, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x08\\x00\\x80\\x05\\x1f\\x01\\x102?\\x02X\\x00\\r\\x00\\x0c\\x00\\x07\\xc3\\xd3\\xc1\\xd9\\xd2\\xc5@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1980-02-20T00:00:00", "modifydate": "2010-11-19T02:58:08", "lines": 13, "newlines": 12, "modlines": 7, "user": "CLARKE"}, "text": " ADDDSN2:MACRO;\n\n             PANEL %boxcolor box\n  (ctr %hedcolor 'Next one is it!')\n /('       Volume           ==>',zvolumes,48,'zvolumes')\n  ('aaaa',a,5,'ppp');\n\n             PANEL %boxcolor box\n  (ctr %hedcolor 'Jol Data Set Data Base Update Facility')\n\n /(ctr hi '%msg Data Set ''%dsname''')\n\n /( '  Note:')\n  (  '           For OUTPUT Data Sets, the Operating System')\n  (  '           needs to know the information below.')\n\n /( '  Volume and Unit Information: '\n    normal %txtcolor ' (Code VOLREF in QUOTES to indicate to a DSN)')\n /('       Volume           ==>',zvolumes,48,'%zvolumes')\n  ('    or Volume Reference ==>',VOLREF,44,'%volref')\n  ('       Unit |,number?   ==>',zunit,11,'%zunit')\n /('  For Magnetic Tapes only:'\n /('       Label Number     ==>',zfileno,3,'%zfileno')\n  ('       Density          ==>',zden,4,'%zden')\n  ('       Label Type       ==>',zlabtyp,5,'%zlabtyp')\n /*  helpline( 'Press F1 for Help, (DCB Parameters follow).') */\n       ;\n\n             PANEL %boxcolor box\n  (ctr %hedcolor 'ADD Output Data Set - Optional Details')\n /(ctr 'Please fill in the following information for this Data Set.')\n /(hi '  Dcb Information:')\n  ('       Record Format             ===>',zrecfm,5,'%zrecfm')\n  ('       Record Length             ===>',zlrecl,5,'%zlrecl')\n  ('       Block Length              ===>',zblksize,5,'%zblksize')\n /(hi '  Direct Access Details (including VSAM):')\n  ('       Key Length                ===>',zkeylen,5,'%zkeylen')\n  ('       Key Position              ===>',zrkp,5,'%zrkp')\n/*('       Search Limit              ===>',zlimct,5,'%zlimct') */\nhelpline('Press F1 for Help, (Space Information follows).')\n       ;\n\n  printsym;\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TYPE2": {"ttr": 17925, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x006\\x01\\x102/\\x01\\x102/\\t\\x07\\x00:\\x00:\\x00\\x00\\xd1\\xd6\\xd3\\xf6\\xf0\\xc1@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-11-18T00:00:00", "modifydate": "2010-11-18T09:07:36", "lines": 58, "newlines": 58, "modlines": 0, "user": "JOL60A"}, "text": "submmenu:MACRO;\n\n /* Assist Users enter Submit Information */\n\ndcl %subopts                 init('');\ndcl %syms                    init('');\ndcl %nocat                   init('');\ndcl %sysnetid                init('') ext;  /* set if network going */\ndcl %after                   init('');\ndcl %let                     init('');\ndcl %PROCLIB                 init('%$JOLINCL');\ndcl %MACROLIB                init('%$JOLPREF.JOL%$JOLVERS.CMDLIB');\n\ndcl %job1,%job2,%job3,%job4,%job5,\n    %job6,%job7,%job8,%job9         init '';\n\npanel option caps;\npanel option noshowfield;\n\nlabel SUBPAN;\n\nPanel\n/( ctr hi 'Jol SUBMIT Input Panel')\n//\n/('  You can Enter the Names of the JOBS You Wish to Submit,')\n ('  OR up to 9 JCL Cards to be submitted to the Operating System.')\n/('  To Submit JCL Cards, code them in Quotes in the Job Fields.')\n/\n('   1st ==> ',job1,65,'%job1')\n('   2nd ==> ',job2,65,'%job2')\n('   3rd ==> ',job3,65,'%job3')\n('   4th ==> ',job4,65,'%job4')\n('   5th ==> ',job5,65,'%job5')\n('   6th ==> ',job6,65,'%job6')\n('   7th ==> ',job7,65,'%job7')\n('   8th ==> ',job8,65,'%job8')\n('   9th ==> ',job9,65,'%job9')\n(ctr 'The next Panels allow Jol Compiler Options to be Specified.')\n\nhelpline\n('Enter Starts Processing, F3 Exits.');\n\nIF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\nIF %SYSPFK = 1 THEN DO;\n   panel reread from job1 'No HELP Available at this time';\n   REDO SUBPAN;\nEND;\n\ncheckf1:\n     if Syspfk=3 then exit;\n\n     if job1=''\n     then do;\n         panel reread from job1 'You must supply a Job Name';\n         goto checkf1;\n     end;\n\nSUBPAN2:\n\nPanel\n/( ctr hi 'Jol SUBMIT Input Panel')\n///\n/('  You can enter various options that alter the behaviour')\n ('  of the Jol Compiler, and Sybmolic Variables that are passed')\n/('  to your Jol Program with this Panel.')\n///\n('   Symbolics for Jobs      ====> ',syms,44,'%syms')\n('   Compiler Options        ====> ',subopts,44,'%subopts')\n('   Catalog Search Options  ====> ',nocat,1,'%nocat')\n('   Network ID              ====> ',sysnetid,8,'%sysnetid')\n('   After which jobs        ====> ',after,44,'%after')\n('   Jol Proclib (Includes)  ====> ',proclib,44,'%proclib')\n('   Jol Macrolib            ====> ',macrolib,44,'%macrolib')\n\nhelpline\n('Enter Starts Processing, F3 Exits.');\n\n\nIF %SYSPFK = 3 | %SYSPFK=15 THEN EXIT;\nIF %SYSPFK = 1 THEN DO;\n   panel reread from syms 'No HELP Available at this time';\n   REDO SUBPAN2;\nEND;\n\nchknet:\n     if Syspfk=3 then exit;\n\n     if after \u00ac=''\n     then do;\n         panel reread from sysnetid 'You must supply a Network Name';\n         goto chknet;\n     end;\n\n     if %nocat \u00ac='' then %nocat=' NOCAT ';\n     if %after \u00ac='' then %after=' After %after ';\n\n  /* Build Input File List */\n\n     if %buildjob='YES' then goto subbld;\n\n/* Call the SUBMIT Command from here to actually submit the job. */\n\n     submit\n       %job1 %job2 %job3 %job4 %job5\n       %job6 %job7 %job8 %job9\n       %subopts\n       Syms(%syms)\n       %nocat\n       network = %sysnetid\n       %let\n       PROCLIB(%proclib)\n       MACROLIB(%macrolib)\n       %after\n       ;\n     exit;\n\n\nsubbld:\n\n      /* THISSTEP */\n      BLD04P                  '   Copy  %f1 ';\n      if %f2 \u00ac='' then BLD04P '        || %f2';\n      if %f3 \u00ac='' then BLD04P '        || %f3';\n      if %f4 \u00ac='' then BLD04P '        || %f4';\n      if %f5 \u00ac='' then BLD04P '        || %f5';\n      if %f6 \u00ac='' then BLD04P '        || %f6';\n      if %f7 \u00ac='' then BLD04P '        || %f7';\n      if %f8 \u00ac='' then BLD04P '        || %f8';\n      if %f9 \u00ac='' then BLD04P '        || %f9';\n      if %f10\u00ac='' then BLD04P '        || %f10';\n      if %f11\u00ac='' then BLD04P '        || %f11';\n      if %f12\u00ac='' then BLD04P '        || %f12';\n      if %f13\u00ac='' then BLD04P '        || %f13';\n      if %f14\u00ac='' then BLD04P '        || %f14';\n      if %f15\u00ac='' then BLD04P '        || %f15';\n                       BLD04P '         To %fileout %old %copytype;';\n\nEND;    /* COPYMENU  */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UJY01AL": {"ttr": 16905, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x88#\\x0f\\x00\\x88$O\\x17\\x15\\x00\\x15\\x00\\x10\\x00\\x05\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1988-08-17T00:00:00", "modifydate": "1988-08-31T17:15:00", "lines": 21, "newlines": 16, "modlines": 5, "user": "JOL"}, "text": " /*****************************************************************/\n /**          Copy Scheduled Jobs          Created MAY, 1987     **/\n /**          -------------------          BY C. CLARKE          **/\n /**                                                             **/\n /** This Macro copies scheduled jobs to a work data set for     **/\n /**    Jol to Submit.                                           **/\n /**                                                             **/\n /** The Jobs are held in members of the Schedule Dats Set in    **/\n /**    various members.                                         **/\n /**                                                             **/\n /*****************************************************************/\nSchedsub:MACRO ;\n /*****************************************************************/\n /******************SYMBOLIC DECLARES *****************************/\n /*****************************************************************/\n\n   /* VARIABLES BELOW USED IN LOOPS FOR SUBSCRIPTS ETC */\n\n DCL %$INCLMEM                     EXT INIT('');\n DCL %work,%work2                  INIT('');\n\n /*****************************************************************/\n /*****CHECK THAT THERE IS VALID INPUT TO THIS MACRO***************/\n /*****************************************************************/\n\n    IF %LIST(2)\u00ac= ''\n    THEN STOP 'Invalid Parameter on SCHEDSUB Macro';\n\n    %$INCLMEM='%list(1)';           /* Copy for INCLUDE later */\n    write 'Examining Schedule for %list(1)';\n\n    alloc f(schedule) shr da(%$jolpref.jol.schedule(%list(1));\n    IF %lastcc\u00ac=0 then exit 0;\n    open  f(schedule) input quiet;  /* QUIET says no messages if\n                                       member not there        */\n    IF %lastcc\u00ac=0\n    then do;\n       close file(schedule);\n       freefile schedule ;\n       exit 0;\n    end;\n\n    close file(schedule);\n    freefile schedule ;\n\n END ; /* END OF MACRO */\n\n    include %$INCLMEM;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UJY02P": {"ttr": 16907, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88#\\x0f\\x00\\x88#\\x0f\\x18\\x04\\x00\\x03\\x00\\x03\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-08-17T00:00:00", "modifydate": "1988-08-17T18:04:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "JOL"}, "text": " /*****************************************************************/\n /**          Copy Scheduled Jobs          Created MAY, 1987     **/\n /**          -------------------          BY C. CLARKE          **/\n /**                                                             **/\n /** This Macro copies scheduled jobs to a work data set for     **/\n /**    Jol to Submit.                                           **/\n /**                                                             **/\n /** The Jobs are held in members of the Schedule Dats Set in    **/\n /**    various members.                                         **/\n /**                                                             **/\n /*****************************************************************/\nSchedule:MACRO ;\n /*****************************************************************/\n /******************SYMBOLIC DECLARES *****************************/\n /*****************************************************************/\n\n   /* VARIABLES BELOW USED IN LOOPS FOR SUBSCRIPTS ETC */\n\n DCL %INDEX                        INIT('1');\n DCL %holiday                      ext init('NO');\n DCL %lastday                      ext init(''); /* # days in month */\n DCL %work,%work2                  INIT('');\n DCL %wkmonth                      INIT('');   /* JAN, FEB etc */\n DCL %wkday                        INIT('');   /* MON, TUE etc */\n\n DCL %SYSJOBS1 INIT('') ;     /* KEEPS LIST OF JOBS SUBMITTED */\n DCL %SYSJOBS2 INIT('') ;     /* KEEPS LIST OF JOBS SUBMITTED */\n DCL %SYSJOBS3 INIT('') ;     /* KEEPS LIST OF JOBS SUBMITTED */\n DCL %SYSJOBS4 INIT('') ;     /* KEEPS LIST OF JOBS SUBMITTED */\n DCL %SYSJOBS5 INIT('') ;     /* KEEPS LIST OF JOBS SUBMITTED */\n DCL %SYSNTINC INIT('') EXT;  /* KEEPS INCLUDE DATA SET FOR JOBS      */\n DCL %SYSNTMAC INIT('') EXT;  /* KEEPS JOL MACRO DATA SETS FOR JOBS   */\n /*****************************************************************/\n /*****CHECK THAT THERE IS VALID INPUT TO THIS MACRO***************/\n /*****************************************************************/\n    IF %LIST(2)\u00ac= ''\n    THEN STOP 'Invalid Parameter on SCHEDULE Macro';\n\n    alloc f(schedwrk) new catlg fb 80,800 10 tracks sysda\n          da %sysuid.jol.tempschd;\n    open  f(schedwrk) output;\n    IF %lastcc\u00ac=0\n    then do;\n         STOP 'SCHEDULE Allocate Work Data Set Failed - Exiting';\n         exit 16;\n    end;\n\n/* Now call the SCHEDSUB macro to copy data for Jol to the\n   work data set. We do this repeatedly until all members\n   have been done.  SCHEDSUB only submits a job once, no\n   matter how many times it is selected.\n\n   NOTE WELL: If a member containing jobs is not present,\n              processing continues.\n\n   The logic for Selection is as follows:-\n\n   1. If specific members such as JUN03 are present, they will\n      be submitted, even on Holidays. Presumably, the Scheduler\n      has set up appropriate jobs for that day.\n\n   2. If it is a Weekend, then those jobs are submitted; it is\n      already a holiday.\n\n   3. Otherwise, a check is made to see if it is a Holiday.\n      If it is a Holiday, then member HOLIDAY is used,\n      otherwise WORKDAY plus any other daily members.\n  */\n\n    %wkmonth=substr(month,1,3);    /* Get the first 3 characters */\n\n    %wkday  =substr(day,1,3);      /* Get the first 3 characters */\n\n    schedsub %wkmonth%dayno;       /* Submit jobs for today      */\n\n    if %day='SATURDAY' | %day='SUNDAY'\n    then do;\n         schedsub %day;            /* Submit jobs for WEEKEND    */\n         EXIT 0;                   /* ================== <       */\n    end;\n\n /* Now test if it is a HOLIDAY, and submit the other jobs       */\n\n    holidayt;                      /* Set %HOLIDAY=YES or NO     */\n    holidaya;                      /* Builds %LIST items for\n                                      SPECIAL Member             */\n    if %holiday='YES'\n    then do;\n         write 'Today is a HOLIDAY';\n         schedsub HOLIDAY;         /* Submit jobs for HOLIDAY    */\n         EXIT 0;                   /* ================== <       */\n    end;\n\n    schedsub WORKDAY;              /* Submit jobs for WORKDAY    */\n    schedsub %day;                 /* Submit DAILY jobs          */\n\n  /* Calculate the WEEK number                                   */\n    dcl %weekno  init (0);\n    %weekno=substr(sysdate,3);     /* JULIAN day                 */\n    %weekno=%weekno/7;\n    %weekno=%weekno+1;             /* Weeks start at 1, not zero */\n    %weekno='WK'||%weekno;\n    schedsub %wkday%weekno;        /* Submit MONWK01, MONWK02    */\n\n    schedsub SPECIAL;              /* Submit jobs for SPECIAL    */\n\n    EXIT QUIT;                     /* Stop Jol now, it has created\n                                      the data set for the next\n                                      step in the SCHEDULE CLIST */\n end ; /* END OF MACRO */\n exit quit;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UJY03P": {"ttr": 16909, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88#\\x0f\\x00\\x88#\\x0f\\x18\\x04\\x00\\x03\\x00\\x03\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-08-17T00:00:00", "modifydate": "1988-08-17T18:04:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "JOL"}, "text": "browse:macro;\nnotimpl '%sysmacnm';\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UJY04P": {"ttr": 16911, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x88#\\x0f\\x00\\x88#\\x0f\\x18\\x04\\x00\\x03\\x00\\x03\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1988-08-17T00:00:00", "modifydate": "1988-08-17T18:04:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "JOL"}, "text": "SETSTART:MACRO ;\n /* THIS MACRO EXAMINES A LIST OF NAMES,AND COMPARES THEM WITH\n    THE VALUE OF %RESTART. WHEN EQUALITY IS FOUND, %START IS SET\n    EQUAL TO THE POSITION OF THE NAME IN THE LIST.\n  FOR EXAMPLE,\n    %RESTART='STEP10';\n    SETSTART STEP1 STEP2 STEP3 STEP4 STEP5 STEP6 STEP7\n             STEP8 STEP9 STEP10 STEP11;\n    AFTER THE SETSTART MACRO HAS EXECUTED, %START WILL EQUAL 10,\n          AND CAN THEN BE USED IN AN IF STATEMENT TO SEE WHERE\n          TO START THE EXECUTION\n    A FULL EXAMPLE OF THIS CAN BE SEEN IN THE JOL DOCUMENTATION\n */\nIF %RESTART\u00ac='' THEN DO;\nIF %LIST(1)=%RESTART THEN %START=1;\nIF %LIST(2)=%RESTART THEN %START=2;\nIF %LIST(3)=%RESTART THEN %START=3;\nIF %LIST(4)=%RESTART THEN %START=4;\nIF %LIST(5)=%RESTART THEN %START=5;\nIF %LIST(6)=%RESTART THEN %START=6;\nIF %LIST(7)=%RESTART THEN %START=7;\nIF %LIST(8)=%RESTART THEN %START=8;\nIF %LIST(9)=%RESTART THEN %START=9;\nIF %LIST(10)=%RESTART THEN %START=10;\nIF %LIST(11)=%RESTART THEN %START=11;\nIF %LIST(12)=%RESTART THEN %START=12;\nIF %LIST(13)=%RESTART THEN %START=13;\nIF %LIST(14)=%RESTART THEN %START=14;\nIF %LIST(15)=%RESTART THEN %START=15;\nIF %LIST(16)=%RESTART THEN %START=16;\nIF %LIST(17)=%RESTART THEN %START=17;\nIF %LIST(18)=%RESTART THEN %START=18;\nIF %LIST(19)=%RESTART THEN %START=19;\n /* NOW CHECK IF %RESTART DOES NOT EQUAL ANY OF THE ITEMS CODED,\n    IF SO AN ERROR CONDITION */\nEND;\n          END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UJY06E": {"ttr": 16913, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x88#\\x9f\\x00\\x88$_\\x18\\x05\\x00#\\x00!\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1988-08-26T00:00:00", "modifydate": "1988-09-01T18:05:00", "lines": 35, "newlines": 33, "modlines": 0, "user": "JOL"}, "text": " SETUP: MACRO (%VOL=,%VOLS=);\n          /* BEFORE YOU ASK, THE VOL KEYWORD IS NECESSARY SO THAT\n          WHEN JOL GETS A BIT MORE WORK DONE TO IT, YOU WILL BE\n          ABLE TO SPECIFY DSIDS. OK ? */\n          OPCNTL '/*SETUP         %VOL%VOLS' AFTER JOBCARD;\n          END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNIXDSN": {"ttr": 16915, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "SHOWDIR: MACRO;\n       WRITE 'SHOWDIR IS NOT YET AVAILABLE';\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNLOAD": {"ttr": 16918, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x14O\\x00\\x91\\x14O\\x133\\x00\\x0b\\x00\\x0b\\x00\\x00\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-05-24T00:00:00", "modifydate": "1991-05-24T13:33:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "JOL"}, "text": "SHOWDSN: MACRO;\n       WRITE 'SHOWDSN IS NOT YET AVAILABLE';\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UPDATE": {"ttr": 17153, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "   SORT:MACRO(%USING=,%FIELDS=,%CORE=,%OPT=,%BIAS=,%RECORD=,\n            %FORMAT=,\n            %CATLG=NO,\n            CYLS,DISKS,TAPES,TO,%OLD );\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n    if %list(1) = ''   & %panels \u00ac= 'OFF'\n    then do;\n        dcl %work            init '';\n        sortmenu;\n        if %buildjob='YES'\n        then exit;\n/* Call ourselves reentrantly to do the sort  */\n        ? 'Sort %work';\n        sort %work;\n        exit;                      /* Better exit now */\n    end;\n\n      IF %USING='' & %FIELDS='' THEN STOP 'No SORT Fields Specified';\n      IF %LIST(1)='' THEN STOP 'No Files to Sort!!';\n      IF %FORMAT\u00ac='' THEN %FORMAT=',FORMAT=%FORMAT';\n      DCL %INPUT INIT  '%LIST(1)';\n      IF %LIST(2)='||' THEN %INPUT='%INPUT||%LIST(3)';\n      IF %LIST(4)='||' THEN %INPUT='%INPUT||%LIST(5)';\n      IF %LIST(6)='||' THEN %INPUT='%INPUT||%LIST(7)';\n      IF %LIST(8)='||' THEN %INPUT='%INPUT||%LIST(9)';\n      IF %RECORD\u00ac='' THEN %RECORD=' RECORD %RECORD';\n      IF %USING='' THEN\n      DO;\n            DCL SORTPARM * REPLACE;\n  SORT FIELDS=%FIELDS%FORMAT\n  %RECORD\nEOF;\n            %SORTP='SORTPARM';\n      END;\n      IF %USING\u00ac='' THEN %SORTP='%USING';\n            DCL %NOCYLS         INIT 5;\n            DCL %NODISKS        INIT 0;\n            DCL %NOTAPES        INIT 0;\n      IF %CYLS\u00ac=0 THEN %NOCYLS=%LIST(%CYLS-1);    /* USER # CYLS */\n      IF %DISKS\u00ac=0 THEN %NODISKS=%LIST(%DISKS-1); /* USER # DISKS */\n      IF %TAPES\u00ac=0 THEN %NOTAPES=%LIST(%TAPES-1); /* USER # TAPES */\n      IF  %NOTAPES\u00ac=0 & %NODISKS\u00ac=0\n      THEN DO;\n          SIGNAL ERROR 3,\n          'TAPE AND DISKS SPECIFIED:-TAPES IGNORED';\n          %NOTAPES=0;\n      END;\n      IF %CORE\u00ac='' THEN %CORE='CORE=%CORE,MSG=AP';\n      ELSE %CORE = 'MSG=AP';\n      IF %BIAS\u00ac='' THEN %BIAS=',BIAS=%BIAS' ;\n      IF %OPT\u00ac='' THEN %OPT=',OPT=%OPT' ;\n      DCL %NOSORTWK       INIT 0;\n      %NOSORTWK=%NOTAPES+%NODISKS;\n      IF %NOSORTWK=0  THEN %NOSORTWK=3;\n      %SRTWK='SORTWK01 WRITES SORTWK01 ';\n      %SRTWK='%SRTWK    SORTWK02 WRITES SORTWK02 ';\n      %SRTWK='%SRTWK    SORTWK03 WRITES SORTWK03 ';\n      DCL %SRTWK4,%SRTWK5,%SRTWK6,%SRTWK7,%SRTWK8,%SRTWK9 INIT '';\n      IF %NOSORTWK>3 THEN\n         %SRTWK4=' SORTWK04 WRITES SORTWK04';\n      IF %NOSORTWK>4 THEN\n         %SRTWK5=' SORTWK05 WRITES SORTWK05';\n      IF %NOSORTWK>5 THEN\n         %SRTWK6=' SORTWK06 WRITES SORTWK06';\n      IF %NOSORTWK>6 THEN\n         %SRTWK7=' SORTWK07 WRITES SORTWK07';\n      IF %NOSORTWK>7 THEN\n         %SRTWK8=' SORTWK08 WRITES SORTWK08';\n      IF %NOSORTWK>8 THEN\n         %SRTWK9=' SORTWK09 WRITES SORTWK09';\n      DCL %REW       INIT 'WRITES';\n      IF %INPUT=%LIST(%TO+1) | %OLD='OLD' THEN %REW='UPDATES';\n      DCL SORT     PROG\n          SORTLIB READS 'SYS1.SORTLIB'\n          SYSOUT  WRITES SORTPRNT\n          SYSPRINT WRITES SORTPRNT\n          SORTMSG WRITES SORTPRNT  /* FOR IBM SORT */\n          SORTIN  READS  %INPUT\n          SORTOUT %REW   %LIST(%TO+1)\n          %SRTWK\n          %SRTWK4 %SRTWK5 %SRTWK6 %SRTWK7 %SRTWK8 %SRTWK9\n          SYSIN READS %SORTP;\n         DCL SORTPRNT PRINTER NODCB ;\n      IF  %NOTAPES\u00ac=0 THEN %SRTUNIT=' TAPE ';\n      ELSE %SRTUNIT=' SYSDA ';\n      DCL SORTWK01 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB ;\n      DCL SORTWK02 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB ;\n      DCL SORTWK03 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB ;\n      DCL SORTWK04 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB ;\n      DCL SORTWK05 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB ;\n      DCL SORTWK06 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB ;\n      DCL SORTWK07 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB ;\n      DCL SORTWK08 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB ;\n      DCL SORTWK09 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB ;\n%SYSLABEL:\n      RUN SORT     '%CORE';\n      $chkdbf '%list(%to +1)';        /* Check if in Data Base */\n      if %catlg='YES' then catlg %list(%to+1);\n      END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VALIDATE": {"ttr": 17155, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x821?\\x00\\x83\\x03?\\x17\\x05\\x00\\x8a\\x00,\\x00y\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1982-11-09T00:00:00", "modifydate": "1983-02-02T17:05:00", "lines": 138, "newlines": 44, "modlines": 121, "user": "JOL"}, "text": "sortmenu:macro;\n\n /* Assist Users enter Sort Information */\n\ndcl %fileout                 init('*.SRT');\ndcl %f1                      init('');\ndcl %f2                      init('');\ndcl %f3                      init('');\ndcl %f4                      init('');\ndcl %f5                      init('');\ndcl %f6                      init('');\ndcl %f7                      init('');\ndcl %f8                      init('');\ndcl %f9                      init('');\ndcl %f10                     init('');\ndcl %f11                     init('');\ndcl %f12                     init('');\n\ndcl %maxsize                 init('');\ndcl %recsize                 init('');\ndcl %filetype                init('');\ndcl %delim1                  init('');\ndcl %delim2                  init('');\n\ndcl %retfield                init('') EXT;\ndcl %retdsn                  init('') EXT;\n\npanel option caps;\npanel option noshowfield;\n\nPanel  box\n/( ctr hi 'Jol SORT Input Panel')\n///\n/('  You can Type the Names of the Data Sets you Wish to Process,')\n ('  OR You can Select Your Data Sets from the Jol Data Set Data Base.')\n//////\n('   1st Sort Input File   ====> ',f1,44,'%f1')\n////\n('The next Panel allows you to Enter Input Data Set Details')\n\nhelpline\n('Enter Starts Processing, F3 Exits, F4 shows Files.');\n\ncheckf1:\n     if Syspfk=3 then exit;\n\n     if %syspfk=4\n     then do;\n         dbfshow  all '1st Sort Input File';\n         f1='%showsel';\n     end;\n     if f1=''\n     then do;\n         panel reread from f1 'You must supply a file name';\n         goto checkf1;\n     end;\n\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '2nd Sort Input File =====>';\n     %f2 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '3rd Sort Input File =====>';\n     %f3 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '4th Sort Input File =====>';\n     %f4 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '5th Sort Input File =====>';\n     %f5 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '6th Sort Input File =====>';\n     %f6 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '7th Sort Input File =====>';\n     %f7 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '8th Sort Input File =====>';\n     %f8 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '9th Sort Input File =====>';\n     %f9 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\ngetoutds:\n\n\n     $getouds 'Jol Sort Details'  'Final Output File =====>';\n     %fileout = '%retdsn';\n\n\n\nPanel  box\n/( ctr hi 'Jol SORT Details Panel')\n///\n/(ctr 'Do you wish to Catalog the new Data Set?')\n(ctr'If you don''t Catalog it, it will be Deleted automatically.')\n///\n('   Catalog Out File (Y or N) ===> ',cat,1,'Y')\n//\n\nhelpline\n('Enter Y or N');\n\n\n     getsmfld;\n\n  /* Build Input File List */\n\n     if %buildjob='YES' then goto sortbld;\n\n     work= '%f1 ';\n     if f2\u00ac='NULL' & f2\u00ac='' then work='%work || %f2';\n     if f3\u00ac='NULL' & f3\u00ac='' then work='%work || %f3';\n     if f4\u00ac='NULL' & f4\u00ac='' then work='%work || %f4';\n     if f5\u00ac='NULL' & f5\u00ac='' then work='%work || %f5';\n     if f6\u00ac='NULL' & f6\u00ac='' then work='%work || %f6';\n     if f7\u00ac='NULL' & f7\u00ac='' then work='%work || %f7';\n     if f8\u00ac='NULL' & f8\u00ac='' then work='%work || %f8';\n     if f9\u00ac='NULL' & f9\u00ac='' then work='%work || %f9';\n\n     work='%work TO %fileout fields=(%retfield)';\n     if %cat='Y' then work = '%work Catlg=yes';\n     exit;\n\nsortbld:\n\n\n      /* THISSTEP */\n     BLD04P                  '   Sort  %f1 ';\n     if %f2 \u00ac='' then BLD04P '        || %f2';\n     if %f3 \u00ac='' then BLD04P '        || %f3';\n     if %f4 \u00ac='' then BLD04P '        || %f4';\n     if %f5 \u00ac='' then BLD04P '        || %f5';\n     if %f6 \u00ac='' then BLD04P '        || %f6';\n     if %f7 \u00ac='' then BLD04P '        || %f7';\n     if %f8 \u00ac='' then BLD04P '        || %f8';\n     if %f9 \u00ac='' then BLD04P '        || %f9';\n     if %f10\u00ac='' then BLD04P '        || %f10';\n     if %f11\u00ac='' then BLD04P '        || %f11';\n     if %f12\u00ac='' then BLD04P '        || %f12';\n     if %f13\u00ac='' then BLD04P '        || %f13';\n     if %f14\u00ac='' then BLD04P '        || %f14';\n     if %f15\u00ac='' then BLD04P '        || %f15';\n                      BLD04P '         To %fileout';\n     if %cat='Y'\n     then do;\n                      BLD04P '         Fields=(%retfield)';\n                      BLD04P '         Catlg=Yes;';\n     end;\n     else             BLD04P '         Fields=(%retfield);';\n\n     $chkdbf %fileout  ;            /* Check if in Data Base */\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VIEWMENU": {"ttr": 17158, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "sortmenu:macro;\n\n /* Assist Users enter Sort Information */\n\ndcl %fileout                 init('*.SRT');\ndcl %f1                      init('');\ndcl %f2                      init('');\ndcl %f3                      init('');\ndcl %f4                      init('');\ndcl %f5                      init('');\ndcl %f6                      init('');\ndcl %f7                      init('');\ndcl %f8                      init('');\ndcl %f9                      init('');\ndcl %f10                     init('');\ndcl %f11                     init('');\ndcl %f12                     init('');\n\ndcl %maxsize                 init('');\ndcl %recsize                 init('');\ndcl %filetype                init('');\ndcl %delim1                  init('');\ndcl %delim2                  init('');\n\ndcl %retfield                init('') EXT;\ndcl %retdsn                  init('') EXT;\n\npanel option caps;\npanel option noshowfield;\n\nPanel  box\n/( ctr hi 'Jol SORT Input Panel')\n///\n/('  You can Type the Names of the Data Sets you Wish to Process,')\n ('  OR You can Select Your Data Sets from the Jol Data Set Data Base.')\n//////\n('   1st Sort Input File   ====> ',f1,44,'%f1')\n////\n('The next Panel allows you to Enter Input Data Set Details')\n\nhelpline\n('Enter Starts Processing, F3 Exits, F4 shows Files.');\n\ncheckf1:\n     if Syspfk=3 then exit;\n\n     if %syspfk=4\n     then do;\n         dbfshow  all '1st Sort Input File';\n         f1='%showsel';\n     end;\n     if f1=''\n     then do;\n         panel reread from f1 'You must supply a file name';\n         goto checkf1;\n     end;\n\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '2nd Sort Input File =====>';\n     %f2 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '3rd Sort Input File =====>';\n     %f3 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '4th Sort Input File =====>';\n     %f4 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '5th Sort Input File =====>';\n     %f5 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '6th Sort Input File =====>';\n     %f6 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '7th Sort Input File =====>';\n     %f7 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '8th Sort Input File =====>';\n     %f8 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\n     $getinds 'Jol Sort Details'   '9th Sort Input File =====>';\n     %f9 = '%retdsn';\n     if %syspfk = 3 then goto getoutds;\n\ngetoutds:\n\n\n     $getouds 'Jol Sort Details'  'Final Output File =====>';\n     %fileout = '%retdsn';\n\n\n\nPanel  box\n/( ctr hi 'Jol SORT Details Panel')\n///\n/(ctr 'Do you wish to Catalog the new Data Set?')\n(ctr'If you don''t Catalog it, it will be Deleted automatically.')\n///\n('   Catalog Out File (Y or N) ===> ',cat,1,'Y')\n//\n\nhelpline\n('Enter Y or N');\n\n\n     getsmfld;\n\n  /* Build Input File List */\n\n     if %buildjob='YES' then goto sortbld;\n\n     work= '%f1 ';\n     if f2\u00ac='NULL'  & f2\u00ac='' then work='%work || %f2';\n     if f3\u00ac='NULL'  & f3\u00ac='' then work='%work || %f3';\n     if f4\u00ac='NULL'  & f4\u00ac='' then work='%work || %f4';\n     if f5\u00ac='NULL'  & f5\u00ac='' then work='%work || %f5';\n     if f6\u00ac='NULL'  & f6\u00ac='' then work='%work || %f6';\n     if f7\u00ac='NULL'  & f7\u00ac='' then work='%work || %f7';\n     if f8\u00ac='NULL'  & f8\u00ac='' then work='%work || %f8';\n     if f9\u00ac='NULL'  & f9\u00ac='' then work='%work || %f9';\n\n     work='%work TO %fileout fields=(%retfield)';\n     if %cat='Y' then work = '%work Catlg=yes';\n     exit;\n\nsortbld:\n\n\n      /* THISSTEP */\n     BLD04P                  '   Sort  %f1 ';\n     if %f2 \u00ac='' then BLD04P '        || %f2';\n     if %f3 \u00ac='' then BLD04P '        || %f3';\n     if %f4 \u00ac='' then BLD04P '        || %f4';\n     if %f5 \u00ac='' then BLD04P '        || %f5';\n     if %f6 \u00ac='' then BLD04P '        || %f6';\n     if %f7 \u00ac='' then BLD04P '        || %f7';\n     if %f8 \u00ac='' then BLD04P '        || %f8';\n     if %f9 \u00ac='' then BLD04P '        || %f9';\n     if %f10\u00ac='' then BLD04P '        || %f10';\n     if %f11\u00ac='' then BLD04P '        || %f11';\n     if %f12\u00ac='' then BLD04P '        || %f12';\n     if %f13\u00ac='' then BLD04P '        || %f13';\n     if %f14\u00ac='' then BLD04P '        || %f14';\n     if %f15\u00ac='' then BLD04P '        || %f15';\n                      BLD04P '         To %fileout';\n     if %cat='Y'\n     then do;\n                      BLD04P '         Fields=(%retfield)';\n                      BLD04P '         Catlg=Yes;';\n     end;\n     else             BLD04P '         Fields=(%retfield);';\n\n     $chkdbf %fileout  ;            /* Check if in Data Base */\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VSAMCREA": {"ttr": 17160, "alias": false, "halfwords": 4, "notes": 0, "parms": "b'\\x00\\x93\\x01\\x10'", "ispf": false, "text": "  SORT:MACRO(%USING=,%FIELDS=,%CORE=,%OPT=,%BIAS=,%RECORD=,\n           %FORMAT=,\n           CYLS,DISKS,TAPES,TO,%OLD );\n     IF %USING='' & %FIELDS='' THEN STOP 'NO SORT FIELDS SPECIFIED';\n     IF %LIST(1)='' THEN STOP 'NO SORT INPUT';\n     IF %FORMAT\u00ac='' THEN %FORMAT=',FORMAT=%FORMAT';\n     DCL %INPUT INIT  '%LIST(1)';\n     IF %LIST(2)='||' THEN %INPUT='%INPUT||%LIST(3)';\n     IF %LIST(4)='||' THEN %INPUT='%INPUT||%LIST(5)';\n     IF %LIST(6)='||' THEN %INPUT='%INPUT||%LIST(7)';\n     IF %LIST(8)='||' THEN %INPUT='%INPUT||%LIST(9)';\n     IF %RECORD\u00ac='' THEN %RECORD=' RECORD %RECORD';\n     IF %USING='' THEN\n     DO;\n           DCL SORTPARM * REPLACE;\n SORT FIELDS=%FIELDS%FORMAT\n %RECORD\nEOF;\n           %SORTP='SORTPARM';\n     END;\n     IF %USING\u00ac='' THEN %SORTP='%USING';\n           DCL %NOCYLS         INIT 5;\n           DCL %NODISKS        INIT 0;\n           DCL %NOTAPES        INIT 0;\n     IF %CYLS\u00ac=0 THEN %NOCYLS=%LIST(%CYLS-1);    /* USER # CYLS */\n     IF %DISKS\u00ac=0 THEN %NODISKS=%LIST(%DISKS-1); /* USER # DISKS */\n     IF %TAPES\u00ac=0 THEN %NOTAPES=%LIST(%TAPES-1); /* USER # TAPES */\n     IF  %NOTAPES\u00ac=0 & %NODISKS\u00ac=0\n     THEN DO;\n         SIGNAL ERROR 3,\n         'TAPE AND DISKS SPECIFIED:-TAPES IGNORED';\n         %NOTAPES=0;\n     END;\n     IF %CORE\u00ac='' THEN %CORE='CORE=%CORE,MSG=AP';\n     ELSE %CORE = 'MSG=AP';\n     IF %BIAS\u00ac='' THEN %BIAS=',BIAS=%BIAS' ;\n     IF %OPT\u00ac='' THEN %OPT=',OPT=%OPT' ;\n     DCL %NOSORTWK       INIT 0;\n     %NOSORTWK=%NOTAPES+%NODISKS;\n     IF %NOSORTWK=0  THEN %NOSORTWK=3;\n     %SRTWK='SORTWK01 WRITES SORTWK01 ';\n     %SRTWK='%SRTWK    SORTWK02 WRITES SORTWK02 ';\n     %SRTWK='%SRTWK    SORTWK03 WRITES SORTWK03 ';\n     DCL %SRTWK4,%SRTWK5,%SRTWK6,%SRTWK7,%SRTWK8 INIT '';\n     IF %NOSORTWK>3 THEN\n        %SRTWK4=' SORTWK04 WRITES SORTWK04';\n     IF %NOSORTWK>4 THEN\n        %SRTWK5=' SORTWK05 WRITES SORTWK05';\n     IF %NOSORTWK>5 THEN\n        %SRTWK6=' SORTWK06 WRITES SORTWK06';\n     IF %NOSORTWK>6 THEN\n        %SRTWK7=' SORTWK07 WRITES SORTWK07';\n     IF %NOSORTWK>7 THEN\n        %SRTWK8=' SORTWK08 WRITES SORTWK08';\n     DCL %REW       INIT 'WRITES';\n     IF %INPUT=%LIST(%TO+1)| %OLD='OLD' THEN %REW='UPDATES';\n     DCL SORT     PROG\n      /* SORTLIB READS 'SYS1.SORTLIB'  */\n         SYSOUT  WRITES SORTPRNT\n         SYSPRINT WRITES SORTPRNT\n         SORTMSG WRITES SORTPRNT  /* FOR IBM SORT */\n         SORTIN  READS  %INPUT\n         SORTOUT %REW   %LIST(%TO+1)\n         %SRTWK\n         %SRTWK4 %SRTWK5 %SRTWK6 %SRTWK7 %SRTWK8\n         SYSIN READS %SORTP;\n        DCL SORTPRNT PRINTER NODCB  ;\n     IF  %NOTAPES\u00ac=0 THEN %SRTUNIT=' TAPE ';\n     ELSE %SRTUNIT=' SYSDA ';\n   DCL SORTWK01 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB NODSN ;\n   DCL SORTWK02 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB NODSN ;\n   DCL SORTWK03 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB NODSN ;\n   DCL SORTWK04 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB NODSN ;\n   DCL SORTWK05 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB NODSN ;\n   DCL SORTWK06 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB NODSN ;\n   DCL SORTWK07 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB NODSN ;\n   DCL SORTWK08 DS %NOCYLS CYLS CONTIG %SRTUNIT NORLSE NODCB NODSN ;\n     %SYSLABEL:\n     RUN SORT     '%CORE';\n     END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "X8": {"ttr": 17162, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x81(_\\x00\\x88%\\x7f\\x17&\\x00\\x0e\\x00\\x10\\x00\\x01\\xd1\\xd6\\xd3@@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1981-10-12T00:00:00", "modifydate": "1988-09-13T17:26:00", "lines": 14, "newlines": 16, "modlines": 1, "user": "JOL"}, "text": "STACK:MACRO;\n      SET STACK%STACKNO='%LIST(1)';\n      %STACKNO=%STACKNO+1;\n   END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELETED1": {"alias": false, "text": "ujy03p:macro;\n    write f($dsids) from('%list(1)');\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED2": {"alias": false, "text": "ujy04p:macro;\n    write f($code) from('%list(1)');\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED3": {"alias": false, "text": "ujy01al:macro;\n CLOSE FILE($JOBS);\n CLOSE FILE($CODE);\n CLOSE FILE($DSIDS);\n /*\n ALLOC FILE($JOBS) DA(%sysuid.ZJOBS) OLD;\n ALLOC FILE($CODE) DA(%sysuid.ZCODE) OLD;\n ALLOC FILE($DSIDS) DA(%sysuid.ZDSIDS) OLD;\n */\n OPEN  FILE($JOBS) INPUT;\n OPEN  FILE($CODE) INPUT;\n OPEN  FILE($DSIDS) INPUT;\n ALLOC FILE($BUILD) DA('%jolds(%jobmem)') old;\n OPEN  FILE($BUILD) OUTPUT;\nlabel jobl;\n if \u00aceof($jobs) then do;\n     read f($jobs) into(x);\n     write f($build) from(x);\n     redo jobl;\n end;\nlabel dsidl;\n if \u00aceof($dsids) then do;\n     read f($dsids) into(x);\n     write f($build) from(x);\n     redo dsidl;\n end;\nlabel execl;\n if \u00aceof($code) then do;\n     read f($code) into(x);\n     write f($build) from(x);\n     redo execl;\n end;\nexit:\n CLOSE FILE($build);\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED4": {"alias": false, "text": "unixdsn: macro(%indsn =, %invol =);\n\n/* This macro is called by ALLOC, and EXEC.\n\n   It provides compatability with MVS and UNIX/MSDOS, and may\n   be changed to suit installation requirements.\n\n   1. If the data set name is NOT coded in quotes, but has a\n      member name or period, it is converted to MSDOS/UNIX\n      filenames, and the VOL keyword is used as the DRIVE,\n      and the SYSUID varaiable added to the front of the name.\n\n      Otherwise, it is assumed to be a Unix type file name.\n\n\n   2. If the data set name IS coded in quotes, but has a\n      member name or period, it is converted to MSDOS/UNIX\n      filenames.\n\n      Otherwise, it is assumed to be a Unix type file name.\n*/\n\n   dcl %member                  init '';\n   dcl %litdsn                  init 0;\n   dcl %gdgno                   init 3;\n\n   dcl %gdgact,%gdgkeep,%gdglast init '';\n\n   if index(indsn,'.') = 0\n   &  index(indsn,'(') = 0\n   then return;                         /* No work to do */\n\n/* Now check for MVS and Unix style names, and convert if necessary */\n\n   if type(indsn) = 'LIT' then litdsn=1;  /* Check here, because Jol\n                                             puts quotes on later ! */\n\n   %i = index(indsn,'(');\n   if %i \u00ac=0\n   then do;\n       member=substr(indsn, i+1);\n       member=substr(member,1,length(member) -1);\n       indsn = substr(indsn, 1, i-1);\n   end;\n\n   if  litdsn = 0\n   then do;\n write 'Not literal Dsn';\n       if %invol \u00ac= '' then\n       %indsn='%invol:/%sysuid' || '/'|| indsn;\n       else %indsn='/%sysuid' || '/'|| indsn;\n   end;\n\n/* Convert .'s to /'s  */\n\nt1:\n   %i = index(indsn,'.');\n   if %i \u00ac=0\n   then do;\n        indsn = substr(indsn, 1, i-1) || '/'\n                 || substr(indsn, i+1);\n        goto t1;\n   end;\n  if %member \u00ac=''\n  then do;\n       md '%indsn';\n       if substr(member,1,1) = '+'\n       |  substr(member,1,1) = '-'\n       |  type  (member) = 'NUM'\n       then do;\n          getfirst '%indsn/control.dat';\n          if %lastcc \u00ac=0\n          then do;\ngdgreset:\n              panel (ctr hi 'Generation Data Set Build Utility')\n                    /////\n                    (ctr 'Data Set %indsn')\n                   /('      Please Enter Number of Generations to Keep',\n                            gdgno,3,'%gdgno')\n                    ;\n              alloc$ f(control) da('%indsn/control.dat') new;\n              open   f(control) output;\n              write  f(control) from('NO=%gdgno');\n              write  f(control) from('ACTION=DELETE');\n              write  f(control) from('CURRENT=0');\n              close  f(control);\n          end;\n\n          alloc$ f(control) da('%indsn/control.dat') old;\n          open   f(control) input;\n          read   f(control) into(gdgkeep);\n          read   f(control) into(gdgact);\n          read   f(control) into(gdglast);\n\n          close  f(control);\n\n          gdgkeep = upper(gdgkeep);\n          gdgact  = upper(gdgact );\n          gdglast = upper(gdglast);\n\n          if substr(gdgkeep,1,3)   \u00ac='NO='\n          |  substr(gdgact ,1,7)   \u00ac='ACTION='\n          |  substr(gdglast,1,8)   \u00ac='CURRENT='\n          then do;\nask2:\n             Panel (ctr hi 'Error: Invalid Control Information')\n               /// (ctr    'Invalid Control Information')\n                   (ctr    'Found for Generation Data Set')\n                 / (flash ctr '%indsn')\n               /// ('     Enter Y to Reset  =====> ',gdgact,1,'Y')\n               //  (' Control Cards are:')\n                /  ('1. %gdgkeep')\n                   ('2. %gdgact')\n                   ('3. %gdglast')\n               helpline ('Press F3 to Exit');\n               if %syspfk = 3 then exit;\n               if %gdgact = 'Y' then goto gdgreset;\n               goto ask2;\n               goto setdsn;\n          end;\n          gdgkeep=substr(gdgkeep,4);\n          gdgact =substr(gdgact ,8);\n          gdglast=substr(gdglast,9);\n          if substr(member,1,1) = '+'\n          then member = gdglast + substr(member,2);\n          else\n          if substr(member,1,1) = '-'\n          then member = gdglast - substr(member,2);\n/* Must be numeric, eg I.I(7) */\n          else\n          if member = 0  then\n             member = gdglast;\n/* Check for wrap around */\n          if member > 9999  then member = 0;\n\n          member = right('0000%member',4);     /* Pad to 4 characters */\n          member = 'G'||member||'V00';\n          write 'GDG';\n       end;\n       indsn=indsn ||'/'||member;\n\n  end;\nsetdsn:\n  %dsname = indsn;    /* Jol Can't return strings (yet) */\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED5": {"alias": false, "text": "**UNLOAD:MACRO(TO,%OLD);\n** IF %TO \u00ac= 2 THEN STOP ' TOO MANY ''FROM'' DSIDS ';\n**    DCL   PRINTFIL PRINTER NODCB ;\n**    DCL   %TYPE     INIT   ' WRITES ' ;\n** IF %OLD \u00ac= '' THEN %TYPE = ' REWRITES ';\n**IEBISAM: DCL IEBISAM PROG\n**   SYSPRINT  WRITES  PRINTFIL\n**   SYSUT1    READS   %LIST(1)\n**   SYSUT2    %TYPE   %LIST(3) ;\n** RUN IEBISAM PARM 'UNLOAD' ;\n**END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELETED6": {"alias": false, "text": " /*****************************************************************/\n /**               UPDATE MACRO            LAST MODIFIED 18.01.83**/\n /**               ------------            BY D.DOUBTFIRE        **/\n /**                                                             **/\n /** THIS MACRO WILL UPDATE BOTH JOL JOBS AND JCL PROCEDURES.    **/\n /** TO UPDATE A JOL PROC SIMPLY PUT-UPDATE DSN1 WITH DSN2       **/\n /** WHERE DSN1 IS A DSET CONTAINING YOUR JOL PROCEDURES         **/\n /** AND DSN2 IS YOUR UPDATED DATA.                              **/\n /** EG. UPDATE MY.DATA WITH MY.UPDATES                          **/\n /** OR  YOU CAN UPDATE WITH RAW DATA SUPPLIED IN QUOTES         **/\n /** EG  UPDATE MY.DATA WITH 'DATA1.......' 'DATA2.....' ETC     **/\n /*****************************************************************/\nUPDATE:MACRO(WITH);\n /*****************************************************************/\n /******************DECLARE SYMBOLICS *****************************/\n /*****************************************************************/\n DCL OUT PRINTER NODCB;\n DCL DUMMY DS DUMMY;\n DCL %SYSP INIT '';\n DCL %SYSC  INIT 'INPUT';\n DCL %TY3,%TY4,%TY5,%TY6,%TY7,%TY8,%TY9,%TY10,%TY11,%TY12,\n     %TY13,%TY14,%TY15,%TY16,%TY17,%TY18,%TY19,%TY20,%TY21  INIT '';\n DCL %CO3,%CO4,%CO5,%CO6,%CO7,%CO8,%CO9,%CO10,%CO11,%CO12,\n     %CO13,%CO14,%CO15,%CO16,%CO17,%CO18,%CO19,%CO20,%CO21 INIT '';\n /*****************************************************************/\n /****************TEST FOR RAW DATA   *****************************/\n /*****************************************************************/\n IF %LIST(3) THEN %TY3=TYPE(LIST0003);\n IF %LIST(4) THEN %TY4=TYPE(LIST0004);\n IF %LIST(5) THEN %TY5=TYPE(LIST0005);\n IF %LIST(6) THEN %TY6=TYPE(LIST0006);\n IF %LIST(7) THEN %TY7=TYPE(LIST0007);\n IF %LIST(8) THEN %TY8=TYPE(LIST0008);\n IF %LIST(9) THEN %TY9=TYPE(LIST0009);\n IF %LIST(10) THEN %TY10=TYPE(LIST00010);\n IF %LIST(11) THEN %TY11=TYPE(LIST00011);\n IF %LIST(12) THEN %TY12=TYPE(LIST00012);\n IF %LIST(13) THEN %TY13=TYPE(LIST00013);\n IF %LIST(14) THEN %TY14=TYPE(LIST00014);\n IF %LIST(15) THEN %TY15=TYPE(LIST00015);\n IF %LIST(16) THEN %TY16=TYPE(LIST00016);\n IF %LIST(17) THEN %TY17=TYPE(LIST00017);\n IF %LIST(18) THEN %TY18=TYPE(LIST00018);\n IF %LIST(19) THEN %TY19=TYPE(LIST00019);\n IF %LIST(20) THEN %TY20=TYPE(LIST00020);\n IF %LIST(21) THEN %TY21=TYPE(LIST00021);\n /*****************************************************************/\n /**************SET SYMBOLICS FOR SYSIN****************************/\n /*****************************************************************/\n IF %TY3='LIT' THEN %CO3='%LIST(3)';\n IF %TY4='LIT' THEN %CO4='%LIST(4)';\n IF %TY5='LIT' THEN %CO5='%LIST(5)';\n IF %TY6='LIT' THEN %CO6='%LIST(6)';\n IF %TY7='LIT' THEN %CO7='%LIST(7)';\n IF %TY8='LIT' THEN %CO8='%LIST(8)';\n IF %TY9='LIT' THEN %CO9='%LIST(9)';\n IF %TY10='LIT' THEN %CO10='%LIST(10)';\n IF %TY11='LIT' THEN %CO11='%LIST(11)';\n IF %TY12='LIT' THEN %CO12='%LIST(12)';\n IF %TY13='LIT' THEN %CO13='%LIST(13)';\n IF %TY14='LIT' THEN %CO14='%LIST(14)';\n IF %TY15='LIT' THEN %CO15='%LIST(15)';\n IF %TY16='LIT' THEN %CO16='%LIST(16)';\n IF %TY17='LIT' THEN %CO17='%LIST(17)';\n IF %TY18='LIT' THEN %CO18='%LIST(18)';\n IF %TY19='LIT' THEN %CO19='%LIST(19)';\n IF %TY20='LIT' THEN %CO20='%LIST(20)';\n IF %TY21='LIT' THEN %CO21='%LIST(21)';\n /*****************************************************************/\n /**************SET SYMBOLIC  FOR SYSIN DATASET********************/\n /*****************************************************************/\n IF %TY3='CHAR' THEN %SYSP='|| %LIST(3)';\n /*****************************************************************/\n /**************SET UP SYSIN FILE    ******************************/\n /*****************************************************************/\nDCL INPUT * REPLACE;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELETED7": {"alias": false, "text": " VALIDATE: MACRO ;\n /*************************************************************/\n /* THIS MACRO IS USED TO VALIDATE INPUT FROM PANELS         **/\n /* OR ANY OTHER SOURCE.                                     **/\n /*************************************************************/\n /* CHECK FOR INPUT TO MACRO .                               **/\n /* MUST BE IN THE FORM OF. VALIDATE INPUT TEST1 TEST2       **/\n /* INPUT=SYMBOLIC BEING VALIDATED.                          **/\n /* TEST1=START OF TEST RANGE .APPEND A / FOR SUBSTRING.     **/\n /* TEST2=END OF TEST RANGE   .(OPTIONAL)                    **/\n /*************************************************************/\n /*  AN INCORRECT INPUT DISPLAYS MESSAGE PANEL AND ASKS      **/\n /*  FOR CORRECT INPUT.                                      **/\n /*************************************************************/\n /* SET UP SYMBOLICS FOR LENGTH AND TYPE OF INPUT            **/\n /*************************************************************/\n %IN2=''; %IN3=''; %IN4=''; %IN='';\n  %LST1='SET LST1=%%%LIST(1)';\n  %LST1;\n  %A=''; %B=''; %C=''; %D='';\n  %LST2='%LIST(2)';\n  %LST3='';\n  IF %LIST(3) THEN %LST3='%LIST(3)';\n  %L2=LENGTH(LST2);\n  %L3=LENGTH(LST3);\n  /*****************************/\n  %E=INDEX(LST2,'/');\n  IF %E\u00ac=0 & %L2>%E THEN DO;\n  %E=%E+1;\n  %LST3=SUBSTR(LST2,%E);\n  %L3=LENGTH(LST3);\n  %L3=%L3-1;\n  %E=%E-1;\n  %LST2=SUBSTR(LST2,1,%E);\n  %L2=LENGTH(LST2);\n  %L2=%L2-1;\n  END;\n  %A=LENGTH(LST2);\n  %B=SUBSTR(LST2,%A,1);\n  IF %B='/' THEN DO;\n  %LST2A='/';\n  %A=%A-1;\n  %LST2=SUBSTR(LST2,1,%A);\n  END;\n  %C=LENGTH(LST3);\n  %D=SUBSTR(LST3,%C,1);\n  IF %D='/' THEN DO;\n  %LST3A='/';\n  %C=%C-1;\n  %LST3=SUBSTR(LST3,1,%C);\n  END;\n  IF %D\u00ac='/' THEN DO;\n  %L2=%L2-1;\n  END;\n /*************************************************************/\n /**      CHECK FOR INPUT TO MACRO                *************/\n /*************************************************************/\n IF %LST1 ='' THEN DO;\n  PANEL('**** NO INPUT TO VALIDATE MACRO ***')\n       ('*** SB. VALIDATE SYMBOLIC TEST1 TEST2(OPT)***');\n  END;\n /*************************************************************/\n /**        CHECK FOR MACRO TEST         **********************/\n /*************************************************************/\n IF %LST2 ='' THEN DO;\n  PANEL ('****NO TEST FOR VALIDATE****')\n        ('****SB VALIDATE SYMBOLIC TEST1 TEST2(OPT)***');\n  END;\n /*************************************************************/\n  %L1=LENGTH(LST1);\n /*************************************************************/\n /*************************************************************/\n /* TEST FOR SIMILAR INPUT TO TEST1 ONLY                     **/\n /*************************************************************/\n   IF %LST2A='' & %LST3='' THEN DO;\n /*************************************************************/\n IF %LST1\u00ac=%LST2 THEN DO;\n  LABEL FIRST;\n  PANEL //('*************************************************')\n         /('****INPUT HAS FAILED VALIDATION TEST FOR %LST1   ')\n         /('****INPUT MUST BE           ==  %LST2 ==         ')\n         /('****ENTER NEW INPUT         ==>',IN,%L1,'%LST2');\n  %LST1=%IN;\n         IF %IN \u00ac= %LST2 THEN REDO FIRST;\n  END;\n  END;\n /*************************************************************/\n  IF %LST2A='/' & %LST3A='' THEN DO;\n  %LST1=SUBSTR(LST1,1,%L2);\n  IF %LST1\u00ac=%LST2 THEN DO;\n  LABEL SECOND;\n  PANEL //('*************************************************')\n         /('****INPUT HAS FAILED VALIDATION TEST FOR %LST1   ')\n         /('****INPUT MUST START WITH             == %LST2== ')\n         /('****ENTER NEW INPUT                  ==>',IN2,%L1'%LST2');\n         %TST1=SUBSTR(IN2,1,%L2);\n         %LST1=%IN2;\n         IF %TST1\u00ac='%LST2' THEN REDO SECOND;\n  END;\n  END;\n /*************************************************************/\n /*************************************************************/\n /* TEST FOR RANGE IN FIRST FEW NUMBERS                      **/\n /*************************************************************/\n  IF %LST2A='/' & %LST3A='/' THEN DO;\n  %S=SUBSTR(LST1,1,%L2);\n  %R=SUBSTR(LST1,1,%L3);\n  IF %R > '%LST3' | %S < '%LST2'  THEN DO;\n  LABEL THIRD;\n  PANEL //('*************************************************')\n         /('****  INPUT %LST1 IS OUT OF RANGE            ')\n         /('****FIRST CHARACTERS MUST BE IN RANGE        ')\n         /('****       %LST2 TO %LST3                    ')\n         /('**** ENTER NEW INPUT      ==>',IN3,%L1);\n         %TST2=SUBSTR(IN3,1,%L2);\n         %TST3=SUBSTR(IN3,1,%L3);\n         %LST1=%IN3;\n  IF %TST3 > %LST3 | %TST2 < %LST2  THEN REDO THIRD;\n         SET %LIST(1)=%IN3;\n  END;\n  END;\n /*************************************************************/\n /* TEST FOR INPUT WITHIN RANGE OF TEST1 AND TEST2           **/\n /*************************************************************/\n  IF %LST2\u00ac='' & %LST2A='' & %LST3\u00ac='' & %LST3A='' THEN DO;\n  IF %LST1 < %LST2 | %LST1 > %LST3 THEN DO;\n  LABEL FOURTH;\n  PANEL //('*************************************************')\n         /('****  INPUT  %LST1 IS OUT OF RANGE           ')\n         /('****  INPUT MUST BE IN THE RANGE             ')\n         /('****    %LST2 TO %LST3                       ')\n         /('****ENTER NEW INPUT      ==>',IN4,%L1);\n         %LST1=%IN4;\n  IF %IN4  < %LST2 | %IN4  > %LST3 THEN REDO FOURTH;\n        SET %LIST(1) = %IN4;\n  END;\n  END;\n  END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELETED8": {"alias": false, "text": "browse:macro;\nnotimpl 'Browse';\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED9": {"alias": false, "text": "  VSAMCREA:MACRO();\n\n/* Create a VSAM File using IDCAMS */\n\n dcl %work      init('');    /* Work Field               */\n dcl %work1     init('');    /* Work Field               */\n dcl %work2     init('');    /* Work Field               */\n dcl %work2a    init('');    /* Work Field               */\n dcl %work3     init('');    /* Work Field               */\n dcl %work3a    init('');    /* Work Field               */\n dcl %l         init('');    /* Work Field               */\n dcl %tempind   init('');    /* Filled in by INDEX Macro */\n dcl %tempdata  init('');\n dcl %tempclus  init('');\n DCL %SYSVSWK1  INIT('') EXT; /* Work Area for VSAM                  */\n\n\n    %SYSVSWK1='';             /* Clear Work areas                    */\n    %work='%list(1)';         /* Get DSID                            */\n    %sysvsdsi='%work';        /* Save it here too                    */\n\n\n /* Create a unique symbolic containing the details for the VSAM\n    data set.  This will be used to create the file if necessary */\n\n $dsidvs;\n\n DCL VSAMCNTL * REPLACE;\n DEFINE CLUSTER ( -\n %sysvswk1 %zvsamtxt )\nEOF;\ndcl printer printer *;\ndcl idcams  prog\n    sysprint writes printer\n    sysin    reads  vsamcntl;\n\ndcl passvsam prog      /* This NEVER works if the file was created */\n    dummy    may write dummy;\n\ndcl dummy    ds   dsn %zdsn sysda 0 tracks nodcb;\n\n    run idcams;\n    if idcams \u00ac=0\n    then do;\n         signal error 3,'Failed to create %zdsn';\n         run passvsam;\n    end;\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED10": {"alias": false, "text": "X8      : MACRO(%LIB='CLARKE.VIC.CNTL');\n    PANEL ('X8  TO JOL CONVERTOR COMMAND')\n   //   ('INPUT CATALOGUED PROCEDURE LIBRARY =====>',LIB,44,'%LIB')\n   //   ('MEMBER                             =====>',MEM,8,'%LIST(1)')\n   //   ('DATA SET WHERE JOL WILL BE PLACED  =====>',OUT,44,\n         '%SYSUID.JOL');\nCONVERT : DCL X8       PROG LIB SYS2.JOL40.LOAD\n          SYSIN READS %LIB(%MEM)\n          JOL     READS   %OUT (%MEM)\n          SYSPRINT WRITES PRINTER\n          PLIDUMP WRITES PRINTER;\n DCL PRINTER PRINTER NODCB;\nRUN CONVERT 'ISA(30K)/';\n END;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELETED11": {"alias": false, "text": "$$init: macro;\n/* This macro is called ONCE by $jolprof at JOL startup time. */\n\n    dcl init_dir              EXT init('');\n\n    if %system='SHELL'\n    then do;\n      getdir;                   /* Get current Directory  */\n      init_dir=sysdir;          /* and SAVE for later use */\n      init_dir=%sysuid;         /* and SAVE for later use */\n    end;\n\n    if %system='MVS'\n    then do;\n      if %sysuid=''             /* Any User ID?           */\n      then panel // (ctr 'Jol Start Up' )\n                 // (ctr 'Information Needed')\n                 // (' Userid or Sysuid ====> ',sysuid,8,'')\n                 helpline ('Information for Jol Program');\n    end;\n\n    dcl color                 EXT      init('');\n\n  /* The colors below are used in the Jol Menus.\n\n     You may change them, and they will apply to most of the Jol menus,\n     unless BW is specified (this turns off all color commands).\n\n     You are strongly advised not to color the background if you\n     call DOS commands, because they will show parts of the screen\n     in black and white, overwriting Jol's background colors.\n     HOWEVER, if you also tell ANSI.SYS to use the same background\n     colors as Jol, you can safely color the background with an\n     instruction like BLUE BACKGROUND.\n  */\n\n    dcl boxcolor              EXT init(' blue ');\n    dcl hedcolor              EXT init(' bright green ');\n    dcl bakcolor              EXT init(' black ');\n    dcl txtcolor              EXT init(' cyan ');\n    dcl hicolor               EXT init(' bright yellow ');\n\n    if gui='NO'   /* Are we in Batch?  */\n    then exit;\n\n\n    if syscrt='BW' then color='NO';\n    else color='YES';\n\n    if color\u00ac='' then goto setcolor; /* Color on through PARM option? */\n\n    panel box ('Do You Have a Color Monitor ? (Y or N) ',\n    color,1,'%color',\n        10,10);\ntreply:\n    color = caps(color);\n    if substr(color,1,1)\u00ac='Y' & substr(color,1,1)\u00ac='N'\n    then do;\n        panel reread from color 'Please Enter Y or N';\n        goto treply;\n    end;\nsetcolor:\n\n    if substr(color,1,1)='Y' | substr(color,1,1)='y'\n    then do;\n       if %system\u00ac='MVS'\n       then do;\n           jolopt color;\n            %txtcolor text;\n            %bakcolor background;\n            %hicolor highlights;\n       end;\n    end;\n    else jolopt bw;                   /* Set colors off */\n\n    if %system\u00ac='MVS'\n    then do;\n        if substr(init_dir,1,1) = 'A'     /* Test if Floppy  */\n        |  substr(init_dir,1,1) = 'B'     /* Test if Floppy  */\n        then do;\n          panel box\n          /////\n          (ctr flash 'Warning')\n          //\n          (ctr 'Running Jol from Drive A or B will be')\n          (ctr 'very, very much slower than running from a ')\n          (ctr 'Fixed Disk.')\n          helpline ('Press Enter to Continue');\n        end;\n    end;\n\nend /* Macro */;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED12": {"alias": false, "text": "ALLSPACE: MACRO (%VOL=,%CYLS=,%SYSOUT='X');\n   %ERROR='';\nLABEL XXX;\n    panel ('Vsam Data Space Allocation Panel')\n   //('Name of vsam data set          ',dsn,44)\n   //('Number of cylinders            ',cyls,3)\n   //('Volume                         ',vol,6)\n   //('Catalog and Password           ',cats,53)\n   //('Sysout Class                   ',sysout,1)\n   //('',x,50,'%error');\n   %ERROR='';\nIF %VOL='' THEN DO;\n    %error='You must specify a Volume';\n    REDO XXX;\nEND;\nIF %CYLS='' THEN DO;\n    %error='You must specify the number of Cylinders';\n    REDO XXX;\nEND;\nIF %CATS='' THEN DO;\n    %error='You must specify the Catalog Name';\n    REDO XXX;\nEND;\nDCL INPUT1 * REPLACE;\n     DEFINE SPACE (VOLUMES(%VOL) -\n     FILE(FRED)       -\n     CYLINDERS(%CYLS)) -\n     CATALOG(%CATS)\nEOF;\nDCL SPECFILE DS DSN = %DSN   SYSDA VOL = %VOL;\nDCL OUTPUT SYSOUT %SYSOUT;\nALLVSM: DCL IDCAMS PROG\n SYSIN READS INPUT1\n SYSPRINT WRITES  OUTPUT\n FRED READS SPECFILE;\n RUN ALLVSM;\n IF ALLVSM \u00ac= 0 THEN DISPLAY 'VSAM SPACE ALLOC FAILED';\n END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED13": {"alias": false, "text": " listcat: macro(\n    %3330,%3340,%2314,%3350,%3380,      /* UNITS WHICH MAY BE CODED */\n    %L=,%NODE=,%LEVEL=,           /* NODE POINTS WHICH MAY BE CODED */\n    %ALL,                  /* IF ALL IS NOT CODED,LISTCAT WILL ONLY\n                              LIST THE CATALOG ON SYSRES.\n                              HOWEVER,IF NODE OR L IS SPECIFIED.\n                              ALL IS ASSUMMED */\n    VOL,VOLS,CVOL,CVOLS    /* OPTIONALLY CODED VOLUMES FOR CATALOG\n                              LISTING */\n    );\n\n/* Modified to use IDCAMS, May 2001 */\n/* Check if no parameters, and if so, display a screen for the User */\n\n  if %list(1) = ''   & %panels \u00ac= 'OFF'\n  then do;\n\n     %level='%sysuid';\n\n     panel       (hi ctr 'ListCat Command')\n                 (hi ctr '---------------')\n           ///////\n           ('      Enter Level of Catalog to List   ===> ',level,\n                       30,'%level')\n   /*      ('      And Control Volume Name(s) or ALL ==> ',cvol,\n                       44,'%cvol')  */\n         helpline('Press F3 to Leave without Listing the Catalog(ue)');\n chkpan:\n\n     if %syspfk = 3 then exit;\n\n     if %level = ''\n     then do;\n          panel reread from level 'Please Enter Catlog Level to List';\n          redo chkpan;\n     end;\n /*  if %cvol = ''\n     then do;\n          panel reread from cvol  'Please the Control Volume or ALL';\n          redo chkpan;\n     end;  */\n\n  /* %level ='(%level)';                 /* Add Brackets */\n     %cvol  ='(%cvol)';\n\n  end;\n\n  /* For VSAM Catlog(ue)s - May 2001, C. V. Clarke    */\n\n     if %l\u00ac=''|%level\u00ac=''|%node\u00ac=''\n     then do;\n          %ALL='ALL';\n          %L=' LEVEL(%L%LEVEL%NODE)';\n     end;\n     %CONT1=' LISTCAT  %L';\n     DCL PRINTER PRINTER NODCB;\n     DCL CONTROLX * REPLACE;\n%CONT1\nEOF;\n     DCL IDCAMS PROG\n          SYSPRINT WRITES PRINTER\n          SYSIN READS CONTROLX;\n\n     RUN IDCAMS;\n\n      exit;    /* Leave IEHLIST code temporarily - MVT ?? */\n     /*------------------------------------------------------*/\n    /* THESE NEXT LINES MUST BE ALTERED FOR EACH INSTALLATION */\n dcl %defunit init '3380';  /* Change if 2314 etc */\n dcl %defvol1 init 'DA04';  /* Change for 1st cvol,if you have one */\n dcl %defvol2 init 'D107';  /* Change for 2nd cvol,if you have one */\n dcl %defvol3 init '';      /* Change for 3rd cvol,if you have one */\n dcl %defvol4 init '';      /* Change for 4th cvol,if you have one */\n dcl %defvol5 init '';      /* Change for 5th cvol,if you have one */\n\n    /* Now let's fix up the unit which we are going to generate */\n\n   IF %3330\u00ac='' | %3340\u00ac=''\n   |  %2314\u00ac='' | %3350\u00ac='' | %3380\u00ac='' /* IS 3330,2314 ETC\n                                         coded on instruction? */\n     then %defunit='%3330%3340%2314%3350%3380';\n/*  'LISTCAT VOLS    SYSRES1,SYSRES2;' WE CAN\n       SAFELY ASSUMME 'ALL',SO LET'S FIX THAT UP */\n     if %vol\u00ac=0 | %vols\u00ac=0 | %cvol\u00ac=0 | %cvols\u00ac=0\n     then do;\n        %ALL='ALL';   /* SET ALL ON */\n                 /* Now we want to pick up the volumes the user\n                    specified,but we may as well reset %defvol1 etc\n                    defined earlier, and initialise them to the vols\n                    the user wanted, then we can use the same bit of\n                    code for the 'all' processing later */\n\n        %DEFVOL1='';\n        %DEFVOL2='';\n        %DEFVOL3='';\n        %DEFVOL4='';\n        %DEFVOL5='';\n        %DEFVOL3='';\n\n          /* The line of code merely sets %vol=the concatenation\n             of cvol,cvols,vol and vols.\n\n             Therefore, if the user codes:\n\n                   'LISTCAT CVOL 11111 VOLS 222222';\n\n             He will be in error,and some curious error messages\n             will result, but you can't check for everything.\n             can you ? */\n\n        %vol=%vol+%vols;\n        %vol=%vol+%cvol;\n        %vol=%vol+%cvols;\n        %vol=%vol+1;             /* Point to first vol */\n        %defvol1= '%list(%vol)'; /* Set up first vol */\n\n        %vol=%vol+1;\n        if %list(%vol)\u00ac='' then %defvol2='%list(%vol)';\n\n        %vol=%vol+1;\n        if %list(%vol)\u00ac='' then %defvol3='%list(%vol)';\n        %vol=%vol+1;\n        if %list(%vol)\u00ac='' then %defvol4='%list(%vol)';\n        %vol=%vol+1;\n        if %list(%vol)\u00ac='' then %defvol5='%list(%vol)';\n     end  /* Of vol,vols,cvol,cvols processing */   ;\n\n     /* Now,if node | level set up,turn on 'all' again so we\n        try all the volumes */\n\n     if %l\u00ac=''|%level\u00ac=''|%node\u00ac=''\n     then do;\n          %all='all';\n          %l=',node=%l%level%node';\n     end;\n          /* Now we can set up the control cards using the\n             'replace' facility.\n             Note that if a card(after replacement) is all blank,\n             Jol won't put it in the card stream,so we must use null\n             symbolics to get this effect if we only want to generate\n             one control card */\n\n DCL %CONT1 INIT '';\n DCL %CONT2 INIT '';\n DCL %CONT3 INIT '';\n DCL %CONT4 INIT '';\n DCL %CONT5 INIT '';\n DCL %CONT6 INIT '';\n            %DDS='';\n            IF %ALL='' /* ONLY WANT ONE CONTROL CARD TO\n                       GENERATE A LISTCATLG FOR THE SYSRES VOL */\n            THEN DO;\n                 DCL SYSRES DS SYS1.LINKLIB;\n                 DCL SYSRES2 DS NODSN VOLREF SYSRES;\n                 %DDS=' DD1 READS SYSRES2 ';\n                 %CONT1=' LISTCTLG ';\n            END;\n            IF %ALL\u00ac='' /* ELSE,WE HAVE TO GENERATE A FEW CARDS */\n            THEN DO;\n                IF %DEFVOL1\u00ac=''\n                THEN DO;\n                   DCL DD1 DS NODSN VOL %DEFVOL1 UNIT %DEFUNIT;\n                   %DDS='%DDS DD1 READS DD1 ';\n                   %CONT2=' LISTCTLG VOL=%DEFUNIT=%DEFVOL1%L';\n                END;\n                IF %DEFVOL2\u00ac=''\n                THEN DO;\n                   DCL DD2 DS NODSN VOL %DEFVOL2 UNIT %DEFUNIT;\n                   %DDS='%DDS DD2 READS DD2 ';\n                   %CONT3=' LISTCTLG VOL=%DEFUNIT=%DEFVOL2%L';\n                END;\n                IF %DEFVOL3\u00ac=''\n                THEN DO;\n                   DCL DD3 DS NODSN VOL %DEFVOL3 UNIT %DEFUNIT;\n                   %DDS='%DDS DD3 READS DD3 ';\n                   %CONT4=' LISTCTLG VOL=%DEFUNIT=%DEFVOL3%L';\n                END;\n                IF %DEFVOL4\u00ac=''\n                THEN DO;\n                   DCL DD4 DS NODSN VOL %DEFVOL4 UNIT %DEFUNIT;\n                   %DDS='%DDS DD4 READS DD4 ';\n                   %CONT5=' LISTCTLG VOL=%DEFUNIT=%DEFVOL4%L';\n                END;\n                IF %DEFVOL5\u00ac=''\n                THEN DO;\n                   DCL DD5 DS NODSN VOL %DEFVOL5 UNIT %DEFUNIT;\n                   %DDS='%DDS DD5 READS DD5 ';\n                   %CONT6=' LISTCTLG VOL=%DEFUNIT=%DEFVOL5%L';\n                END;\n            END;\n            /* NOW GENERATE IEHLIST,AND EXECUTE IT */\n     DCL PRINTER PRINTER NODCB;\n     DCL CONTROLX * REPLACE;\n%CONT1\n%CONT2\n%CONT3\n%CONT4\n%CONT5\n%CONT6\nEOF;\n     DCL IEHLIST PROG\n          SYSPRINT WRITES PRINTER\n          SYSIN READS CONTROLX\n          %DDS;\n     RUN IEHLIST;\n     END;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED14": {"alias": false, "text": "del:macro;     /* MVS Delete data set as specified by the User */\n\ndcl %f1                    init('');\ndcl %disk                  init('');\n\n/* If User codes a parameter, then execute the DEL immediately,\n   otherwise we will show the user a menu */\n\n   if %list(1) \u00ac= '' then %f1='%list(1)';\n\n   if %f1 \u00ac= '' then goto gotfile;\n\nloop:\n\nPanel  box\n/( ctr hi 'Jol DELETE Input Panel')\n///\n/('  You can Type the Name of the Data Sets You Wish to Delete,')\n ('  OR You can Select the Data Set from the Jol Data Set Data Base.')\n////\n/\n('         Disk          ====> ',disk  ,6,'%disk')\n/\n('         Delete File   ====> ',f1,44,'%f1')\n////\n\nhelpline\n('Enter Starts Processing, F3 Exits, F4 shows Files.');\n\ncheckf1:\n     if Syspfk=3 then exit;\n\n     if %syspfk=4\n     then do;\n         dbfshow  all 'File to Delete';\n         f1='%showsel';\n     end;\n     if f1=''\n     then do;\n         panel reread from f1 'You must supply a file name';\n         goto checkf1;\n     end;\n\n   if syspfk=3 then exit;   /* Back to Caller */\n\ngotfile:\n   if %disk \u00ac='' then %disk=' From %disk';\n   if %BUILDJOB='YES'\n   then do;\n       BLD04P                  '   Delete %f1 %disk;';\n       exit;\n   end;\n   delete %f1 %disk;\n\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED15": {"alias": false, "text": "menu:macro;                               /* Jol Main Menu. */\n\ndcl %command  init('');\ndcl %commtail init('') EXT;               /* Command Tail put here */\ndcl %commstrt init('') EXT;               /* Command Start here */\ndcl %syspfk   init 0 ext;\ndcl %helpline init '';\n\n\ndcl boxcolor  EXT init(' blue ');\ndcl hedcolor  EXT init(' bright green ');\ndcl bakcolor  EXT init(' black ');\ndcl txtcolor  EXT init(' cyan ');\ndcl hicolor   EXT init(' bright yellow ');\n\n\n\nloop:\n    commtail='';\n    panel option caps;\n\n    if %system='SHELL' then\nhelpline='Press F1 for Help Screen; F3 to Return To Jol Command Mode';\n    if %system\u00ac='SH ELL' then\n    helpline='F1 Help, F3 Exits After Making JCL';\n    if %buildjob = 'YES' then\n    helpline='BUILDJOB is Active: F1 Help, F3 Exits After Making Job';\n    panel %boxcolor box\n menubar (\n'Files Applications BuildJob Compile Run/Submit      Options eXit  Help'\n/ (ctr %hedcolor  'Universal Command Language Primary Menu')\n/\n(ctr'Place the first character of the command you wish to select in'\n    ' the box')\n(ctr'or code any Command directly in the command line.')\n(ctr 'Note: You can use <Alt F>, <Alt C> etc as HotKeys.')\n/\n(hi '  Command === > ',command,60,'%commstrt')/* Leave last command */\n/\n('  The following Jol menus are available:')\n/(hi '       A  ' normal 'Run Other Programs, Spreadsheets,'\n                         ' Wordprocessing etc.')\n (hi '       B  ' normal 'Builds a Job to Execute Later.')\n (hi '       C  ' normal 'Compiles Programs (Asm, C, Basic and PL/I).')\n (hi '       F  ' normal 'Browse, Copy, Rename or Delete Files; '\n                         ' Drop to Unix/DOS/TSO.')\n (hi '       H  ' normal 'Help and Learn Facilities.')\n (hi '       S  ' normal 'Submit Jobs and Programs '\n                         'to Background or Mainframes.')\n (hi '       O  ' normal 'Configure Jol or Set Dos Options'\n                         ' (TIME, DATE etc).')\n (hi '       R  ' normal 'Runs Programs or Jobs.')\n (hi '       X  ' normal 'Leave Jol.')\n\nhelpline('%helpline')\n;\n\n    commtail='';\n    commstrt='';\n\nwaitin:\n\n/*  if syspfk=3 then do; cls; exit; end; */\n\n    if syspfk=3 then goto endjob;\n\n    if syspfk\u00ac=0 &  syspfk\u00ac=1 & sysmenu=''\n    then do;\n        panel reread;\n        goto waitin;\n    end;\n    if syspfk=1 then do;\n        $doshlp1;\n        goto loop;\n    end;\n\n    if command \u00ac=''  & sysmenu = '' then goto docomm;\n\n    If sysmenu='QUIT'              then exit quit;\n\n    If sysmenu='EXIT'              then exit quit;\n\n    If sysmenu='APPLICATIONS'      then $applic;\n\n    If sysmenu='FILES'             then $files;\n\n    If sysmenu='COMPILE'           then compile;\n\n    If sysmenu='SUBMIT'            then $submit;\n\n    If sysmenu='OPTIONS'           then $persopt;\n\n    if sysmenu='HELP'              then helppop;\n\n    if sysmenu='BUILDJOB'          then buildjob;\n\n\n    If substr(sysmenu,1,3)='RUN'\n    then do;\n        popup\n           (     'Job            ',runjob)\n           (     'Program        ',exec /*pgmlist*/ )\n           ;\n    end;\n\n    %syspfk=0;\n    goto loop;\n\ndocomm:\n\n    commtail='';\n    commstrt=command;\n\n    if index(command,' ') \u00ac=0\n    then do;\n         commstrt = substr(command,1, index(command,' '));\n         commtail = substr(command,index(command,' ') +1);\n    end;\n\n    if length(strip(command)) =2\n    &  substr(command,2,1) = ':'\n    then do;\n        call command '/c %command';\n        goto loop;\n    end;\n\n/* Set the menu names to their own names if they are non blank so that\n   GETJMENU can load the correct menus for us */\n\n    if %system \u00ac='SHELL'\n    then do;\n/* Some commands need altering if MVS, VSE etc */\n/* No   if %commstrt = 'CATALOG'\n        |  %commstrt = 'CATLG'\n           then %commstrt ='$CATLG';\n        if %commstrt = 'DELETE'\n           then %commstrt ='$DEL';\n        if %commstrt = 'TYPE'\n           then %commstrt ='PRINT'; */\n        %commstrt %commtail;\n        goto loop;\n    end;\n\n    %command;\n    goto loop;\n\n    if viewmenu\u00ac=''  then viewmenu='VIEWMENU';\n    if wpmenu  \u00ac=''  then wpmenu ='EDITMENU';\n    if compmenu\u00ac=''  then compmenu='COMPMENU';\n    if dosmenu \u00ac=''  then dosmenu ='DOSMENU';\n    if execmenu\u00ac=''  then execmenu='EXECMENU';\n\n/* Call GETJMENU to analyse User input, and call either program or\n   Jol Menus as appropriate.                                       */\n\ngetjmenu command='%command'\n    %dosmenu %execmenu %wpmenu %compmenu /* These are '' or DOSMENU */\n    %viewmenu\n    menus=\n    'DELETE RENAME TYPE COMPARE COPY CHDIR CD DEL DIR REN SORT '\n    ;\n  goto loop;\n\nendjob:\n      ;\nend;\ncls;\nif %system\u00ac='SHELL'\nthen do;\n    if %buildjob='YES'\n    then do;\n       %syspfk=0;\n       close f($code);\n       %BUILDJOB = '';           /* Get EXEC etc to operate as usual */\n       exit quit;\n    end;\n    if $job_done \u00ac= 'YES'\n    then $job;\n    exit;      /* Generate JCL */\nend;\nexit;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED16": {"alias": false, "text": "menu:macro;                               /* Jol Main Menu. */\n\ndcl %command  init('');\ndcl %commtail init('') EXT;               /* Command Tail put here */\ndcl %commstrt init('') EXT;               /* Command Start here */\ndcl %syspfk   init 0 ext;\ndcl %empty    init 0 ext;                 /* J60                */\ndcl %helpline init '';\n\n\ndcl boxcolor  EXT init(' blue ');\ndcl hedcolor  EXT init(' cyan ');\ndcl bakcolor  EXT init(' black ');\ndcl txtcolor  EXT init(' cyan ');\ndcl hicolor   EXT init(' bright yellow ');\n\n    if %Panels='NO'    /* Jol 6.0 Not running interactively - exit */\n    then do;\n         fs off;       /* Tell Jol and command that PANELs are off */\n         exit;\n    end;\n\nloop:\n    commtail='';\n    panel option caps;\n\n    if %system='SHELL' then\nhelpline='Press F1 for Help Screen; F3 to Return To Jol Command Mode';\n    if %system\u00ac='SHELL' then\n    helpline='F1 Help, F3 Exits After Making JCL';\n    if %buildjob = 'YES' then\n    helpline='BUILDJOB is Active: F1 Help, F3 Exits After Making Job';\n\n    panel /* %boxcolor box */\n  menubar (\n'Files Applications BuildJob Compile Run/Submit  Options eXit Help')\n\n/ (ctr %hedcolor  'Jol Universal Command Language Primary Menu'\n                  ' For %system')\n/\n(ctr'Place the enhanced character of the menu you wish to select in'\n    ' the box')\n(ctr'or code any Command (or part of) directly in the command line.')\n(ctr 'Note: You can use <Alt F>, <Alt C> etc as HotKeys on PCs.')\n/\n(hi '  Command === > ',command,60,'%commstrt')/* Leave last command */\n/\n('  The following Jol menus are available:')\n/(hi '       A  ' normal 'Run Other Programs, Spreadsheets,'\n                         ' Wordprocessing etc.')\n (hi '       B  ' normal 'Builds a Job to Execute Later.')\n (hi '       C  ' normal 'Compiles Programs (Asm, C, Basic and PL/I).')\n (hi '       F  ' normal 'Browse, Copy, Rename or Delete Files; '\n                         ' Drop to Unix/DOS/TSO.')\n (hi '       H  ' normal 'Help and Learn Facilities.')\n (hi '       S  ' normal 'Submit Jobs and Programs '\n                         'to Background or Mainframes.')\n (hi '       O  ' normal 'Configure Jol or Set Dos Options'\n                         ' (TIME, DATE etc).')\n (hi '       R  ' normal 'Runs Programs or Jobs.')\n (hi '       X  ' normal 'Leave Jol.')\n\n  helpline('%helpline')\n;\n\n    commtail='';\n    commstrt='';\n\nwaitin:\n\n/*  if syspfk=3 then do; cls; exit; end; */\n/*   printsyms;  */\n\n    if syspfk=3 then goto endjob;\n\n    if command='' & sysmenu='' & syspfk=0\n    then do;\n        empty=empty+1;        /* If four times here, assume BATCH */\n        if empty>4 then exit; /* Clem Clerke, May 2001            */\n        panel reread;\n        goto waitin;\n    end;\n    empty=0;\n\n    if syspfk\u00ac=0 & syspfk\u00ac=1 & sysmenu=''\n    then do;\n        panel reread;\n        goto waitin;\n    end;\n    if syspfk=1 then do;\n        $doshlp1;\n        goto loop;\n    end;\n\n    sysmenu=caps(sysmenu);\n/*  ? 'SYSMENU=%sysmenu'; */\n\n    if command \u00ac='' & sysmenu = '' then goto docomm;\n\n    If sysmenu='QUIT'              then exit quit;\n\n    If sysmenu='EXIT'              then exit quit;\n\n    If sysmenu='APPLICATIONS'      then $applic;\n\n    If sysmenu='FILES'             then $files;\n\n    If sysmenu='COMPILE'           then $compile;\n\n    If sysmenu='SUBMIT'            then $submit;\n\n    If sysmenu='OPTIONS'           then $persopt;\n\n    if sysmenu='HELP'              then helppop;\n\n    if sysmenu='BUILDJOB'          then buildjob;\n\n\n    If substr(sysmenu,1,3)='RUN'\n    then do;\n        popup\n           (     'Job            ')\n           (     'Program        ',exec /*pgmlist*/ )\n           ;\n        if syspop='JOB'\n        then do;\n           runjob;\n           goto endjob;\n        end;\n    end;\n\n    %syspfk=0;\n    %sysmenu='';\n    goto loop;\n\ndocomm:\n\n    commtail='';\n    commstrt=command;\n\n    if index(command,' ') \u00ac=0\n    then do;\n         commstrt = substr(command,1, index(command,' '));\n         commtail = substr(command,index(command,' ') +1);\n    end;\n\n    if length(strip(command)) =2\n    &  substr(command,2,1) = ':'\n    then do;\n        call command '/c %command';\n        goto loop;\n    end;\n\n/* Set the menu names to their own names if they are non blank so that\n   GETJMENU can load the correct menus for us */\n\n    if %system \u00ac='SHELL'\n    then do;\n/* Some commands need altering if MVS, VSE etc */\n        if %commstrt = 'CATALOG'\n        |  %commstrt = 'CATLG'\n           then %commstrt ='$CATLG';\n        if %commstrt = 'DELETE'\n           then %commstrt ='$DEL';\n        if %commstrt = 'TYPE'\n           then %commstrt ='PRINT';\n        %commstrt %commtail;\n        goto loop;\n    end;\n\n    %command;\n    goto loop;\n\n    if viewmenu\u00ac='' then viewmenu='VIEWMENU';\n    if wpmenu  \u00ac='' then wpmenu  ='EDITMENU';\n    if compmenu\u00ac='' then compmenu='COMPMENU';\n    if dosmenu \u00ac='' then dosmenu ='DOSMENU';\n    if execmenu\u00ac='' then execmenu='EXECMENU';\n\n/* Call GETJMENU to analyse User input, and call either program or\n   Jol Menus as appropriate.                                       */\n\ngetjmenu command='%command'\n    %dosmenu %execmenu %wpmenu %compmenu /* These are '' or DOSMENU */\n    %viewmenu\n    menus=\n    'DELETE RENAME TYPE COMPARE COPY CHDIR CD DEL DIR REN SORT '\n    ;\n  goto loop;\n\nendjob:\n      ;\n/* end;\ncls; */\nif %system\u00ac='SHELL'\nthen do;\n    if %buildjob='YES'\n    then do;\n       %syspfk=0;\n       close f($code);\n       %BUILDJOB = '';           /* Get EXEC etc to operate as usual */\n       exit quit;\n    end;\n    if $job_done \u00ac='YES'\n    then $job;\n    exit;      /* Generate JCL */\nend;\nexit;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED17": {"alias": false, "text": "type:macro;     /* MVS List/TYPE data set as specified by the User */\n\n\ndcl %f1                    init('');\ndcl %disk                  init('');\n\n/* If User codes a parameter, then execute the TYPE immediately,\n   otherwise we will show the user a menu */\n\n   if %list(1) \u00ac= '' then %f1='%list(1)';\n\n   if %f1 \u00ac= '' then goto gotfile;\n\nloop:\n\nPanel  box\n/( ctr hi 'Jol TYPE Input Panel')\n///\n/('  You can Type the Name of the Data Sets You Wish to Type,')\n ('  OR You can Select the Data Set from the Jol Data Set Data Base.')\n////\n/\n('         Disk          ====> ',disk  ,6,'%disk')\n/\n('         Type File     ====> ',f1,44,'%f1')\n////\n(ctr 'The next Panels allow Other Files to be Selected')\n\nhelpline\n('Enter Starts Processing, F3 Exits, F4 shows Files.');\n\ncheckf1:\n     if Syspfk=3 then exit;\n\n     if %syspfk=4\n     then do;\n         dbfshow  all 'File to Type';\n         f1='%showsel';\n     end;\n     if f1=''\n     then do;\n         panel reread from f1 'You must supply a file name';\n         goto checkf1;\n     end;\n\n   if syspfk=3 then exit;   /* Back to Caller */\n\ngotfile:\n   if %disk \u00ac='' then %disk=' Vol %disk';\n   if %BUILDJOB='YES'\n   then do;\n       BLD04P                  '   Print %f1 %disk;';\n       exit;\n   end;\n   Print  %f1 %disk;\n\n\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED18": {"alias": false, "text": "delete: macro;\n  /* This macro simply calls $DEL to do the DELETE\n     because Jol has a DELETE command which takes\n     precedence.                                   */\n  $del %sysstmt;\nend;\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED19": {"alias": false, "text": "TSO:MACRO;\nDCL SYSPROC DS TSO.CMDPROCS     ;\nDCL SYSHELP DS SYS1.HELP        ;\n /* DCL SHEHELP DS SHELL.HELP       ; */\nDCL SYSTSPRT SYSOUT=*           ;\nDCL SYSTSIN DS DDNAME=P.TSO.BATCH(GRANBLOC) ;\nDCL IKJEFT01 PROG\n     SYSPROC READS SYSPROC\n     SYSHELP READS SYSHELP   /* ||SHEHELP   */\n     SYSTSPRT WRITES SYSTSPRT\n     SYSTSIN READS SYSTSIN ;\nBATCH: RUN IKJEFT01 PARM 'DYNAMNBR=30' ;\nEND;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELETED20": {"alias": false, "text": "ftpget:macro(%password,%host,%bin,%text,%host\n           );\n\ndcl syspop   init '';\ndcl indstyp  init '';\ndcl outdstyp init '';\ndcl typecopy init '';\n\n/* Temporary FTP General purpose GET macro.\n\n   This macro will\n   *      Create FTP connect control statements,\n   *      Create GET FTP Statements\n*/\n\n/* Check if no parameters, and if so, display a screen for the User */\n\n    if %list(1) = ''   & %panels \u00ac= 'OFF'\n    then do;\n        dcl %work            init '';\n        ftpgmenu;            /* FTP Get Menu */\n\n/* Call ourselves reentrantly to do the copy  */\n\n        if %syspfk = 3 | %syspfk =15 then exit;\n\n        if %BUILDJOB \u00ac= 'YES'\n           then ftpget %work;\n        exit;                      /* Better exit now */\n    end;\n\n    if %to=0 then stop 'No ''TO'' Data Set Specified';\n    if (%select\u00ac='' & (%s\u00ac=''|%exclude\u00ac=''|%e\u00ac=''|%member\u00ac=''|%m\u00ac=''|\n        %members\u00ac='')) then stop 'More than 1 Control Stmt Specified';\n\n    if (%s\u00ac='' & (%exclude\u00ac=''|%e\u00ac=''|%member\u00ac=''|%members\u00ac=''|%m\u00ac=''))\n       then stop 'More than 1 Control Stmt Specified';\n\n    if (%exclude \u00ac='' & (%e\u00ac=''|%members\u00ac=''|%member\u00ac=''|%m\u00ac=''))\n       then stop 'More than 1 Control Stmt Specified';\n\n    if (%member \u00ac= '' & (%e\u00ac=''|%members\u00ac=''|%m\u00ac=''))|\n       (%members \u00ac= '' & (%e\u00ac=''|%m\u00ac=''))|\n       (%m\u00ac='' & %e\u00ac='') then\n       signal error 4,'More than 1 Control Statement Specified';\n\n    if %member='' & %exclude='' & %e='' then\n       %member = '%members%m%s%select';\n\n        ftp     : dcl ftp      prog\n                  sysut1   reads  %list(%parm1) %fle2\n                  sysut2   %type  %list(%to)\n                  sysin    reads  dummyin\n           DD  DSN=&INDSN,DISP=(SHR,PASS)\n                  sysprint writes printfil ;\n        run iebgener ;\n\n        dcl input  * replace ;\n  %host\n  %user\n  %password\n  SENDSITe\n  GET //DD:IN &OUTDSN\n  QUIT\neof;\n        run ftp '(EXIT';\n//*\n//* This HAS NOT BEEN TESTED. I do not have FTP Access.\n//*\n//* THANKS TO WALTER MARGUCCIO <WALTER_MARGUCCIO@YAHOO.COM>\n//* AND OTHERS IN IBMMAIN FOR THE IDEA OF THE //DD:IN\n//*\n//  EXEC FTP,HOST=192.10.10.1,USER='USERID',PASSWORD='MYPASSWORD',\n// INDSN=NULLFILE,OUTDSN=FROM.MAINFRAME\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETED21": {"alias": false, "text": "$jolprof:macro;\n/* This macro is called ONCE at Jol startup time. */\n\n/* Alter these variables if necessary  */\n    dcl %$jolvers init('60')  ext;           /* Jol version number   */\n    dcl %$jolpref init('SYS2') ext;          /* High level jol index */\n    dcl %SYSUID   init('') ext;              /* UserID               */\n\n    if %system='MVS'\n    then do;\n      if %sysuid=''             /* Any User ID?           */\n      then panel // (ctr 'Jol Start Up' )\n                 // (ctr 'Information Needed')\n                 // (' Userid or Sysuid ====> ',sysuid,8,'')\n                 helpline ('Information for Jol Program');\n    end;\n\n    dcl %$jolincl init('%sysuid.JOL') ext;   /* Normal include lib   */\n/*  dcl %$joljobs init('%sysuid.JOL.JOBS') ext;\n    dcl %$jolpgms init('%sysuid.JOL.PROGRAMS') ext; */\n    dcl %$joljobs init('SYS2.JOL.JOBS') ext;\n    dcl %$jolpgms init('SYS2.JOL.PROGRAMS') ext;\n    dcl %$joldbfs init('SYS2.JOL.DSNREPOS') ext;\n    alloc f(joldsdb) da('%$joldbfs') shr;\n    alloc f(joljobs) da('%$joljobs') shr;\n    alloc f(jolpgms) da('%$jolpgms') shr;\n\n    dcl %tsoclass init('*') ext;\n    dcl %spool    init('JES2') ext;\n    dcl %showsel  init('')     ext;    /* For SHOWDSN etc            */\n\n /* Work around for Printer and Dummy in the DSNREPOS data set May,01*/\n    dcl printer printer a nodef;\n    dcl dummy   ds dummy   nodef  nodcb;\n\n    $$init;                            /* Get directories,           */\n                                       /* set colors etc             */\n\nif cmd\u00ac=''                             /* Startup command specified? */\nthen do;                               /* Yes, do it ....            */\n   %cmd;\n /*exit quit;                          /* then exit from Jol         */\nend;\n\nif %system \u00ac= 'SHELL'                  /* MVS etc ?                  */\nthen /* logon */ ;\n\nif %panels='YES' then                  /* Under TSO, and 3270 ???    */\ndo;\n     write 'Enter a Jol Command, or /* to end';\n     panel /////////\n     ('Do you wish to use the Jol Menu System?',menans,1,'y');\n     if menans='Y' | menans='y' then\n     menu;                             /* No command, call main menu */\n     write 'Enter a Jol Command, or /* to end';\n     exit;\nend;\nend;\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT982/CBT.V500.FILE982.PDS/CMDLIB.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT982/CBT.V500.FILE982.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}