/* We first need rexx in comment if compiled or read from SYSPROC. */
rexx_msicdefn:
  rexxpgm_version = "01.03"          /* Set with 'ver 1' and 'lev 2'. */

  PARSE ARG vdef_wishlist vdef_hostdsn  vdef_volser vdef_unit

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Main_Code:
  return_code = Initialization_routine()
  If (return_code = 0) Then Do
    return_code = Process_routine()
  End
  return_code = Termination_routine()
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  Contact:  "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
  Overview: This is an ISPF dialog program called to define a
            WISHLIST data set.

  Syntax:   Called from #INSTALL.


=======================================================================

  History of Modifications
  ------------------------
vv.mm When     Who  /  What you did
----- -------- --------------------------------------------------------
01.03 20180207 "Kenneth E Tomiak"<CBT_Ken@KTomiak.biz>
               1) Switch order of parms now that someone is blanking
                  out the unit and volser/
----- -------- --------------------------------------------------------
01.02 20180207 "Kenneth E Tomiak"<CBT_Ken@KTomiak.biz>
               1) Should not need it, but remove apostrophes on
                  vdef_hostdsn.
----- -------- --------------------------------------------------------
01.01 20180206 "Kenneth E Tomiak"<CBT_Ken@KTomiak.biz>
               1) Add a check for SMS = ACTIVE and ignore the
                  UNIT and VOLSER when allocating the WISHLIST.
----- -------- --------------------------------------------------------
01.00 20180122 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code started.

----- -------- --------------------------------------------------------

=======================================================================

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_routine:
  return_code = 0
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_routine:
  wishlist_exists = LISTDSI("'"vdef_wishlist"'")
  IF (wishlist_exists = 0) THEN DO
    reason1 = "Delete existing WISHLIST data set?"
    reason2 = "  '"vdef_wishlist"'"
    reason4 = "Warning: You will have to reload the right TOPIC(S)."
    Address ISPEXEC "DISPLAY PANEL(MSICPCFM)"
    function_rc = RC
    IF (function_rc = 0) THEN DO
      IF (TRANSLATE(CONFIRMD) = "Y") THEN DO
        ADDRESS TSO "DELETE '"vdef_wishlist"'"
        function_rc = RC
        IF (function_rc <> 0) THEN DO
          SAY "Delete of '"vdef_wishlist"' failed, RC("function_rc")"
          return function_rc
        END
      END
      ELSE DO
        SAY "Keeping the existing WISHLIST data set."
      END
    END
    ELSE DO
      say "panel(MSICPCFM) display error" function_rc
    END
  END
  IF (MVSVAR("SYSSMS") = 'ACTIVE') THEN DO
    ADDRESS TSO "ALLOCATE FILE(WISHLIST) DATASET('"vdef_wishlist"')" ,
      "TRACKS SPACE(100 50) DIR(490) NEW CATALOG" ,
      "UNIT(SYSALLDA)" ,
      "RECFM(F B) BLKSIZE(0) LRECL(81)"
  END
  ELSE DO
    ADDRESS TSO "ALLOCATE FILE(WISHLIST) DATASET('"vdef_wishlist"')" ,
      "TRACKS SPACE(100 50) DIR(490) NEW CATALOG" ,
      "UNIT("vdef_unit") VOL("vdef_volser")" ,
      "RECFM(F B) BLKSIZE(0) LRECL(81)"
  END
  function_rc = RC
  IF (function_rc <> 0) THEN DO
    SAY "Allocate of '"vdef_wishlist"' failed, RC("function_rc")"
    return function_rc
  END
  MAKEBUF
  Queue "DSNAME('"vdef_wishlist"')"
  Queue "END"
  vdef_hostdsn = STRIP(vdef_hostdsn,"B","'")
  vdef_hostdsn = STRIP(vdef_hostdsn,"B"," ")
  prompt_state = PROMPT("ON")
  "RECEIVE INDA('"vdef_hostdsn"(XM$$$$)')"
  receive_rc = RC
  prompt_state = PROMPT(prompt_state)
  IF (receive_rc <> 0) THEN DO
    SAY "Trouble with RECEIVE '"vdef_hostdsn"(XM$$$$)' RC("receive_rc")"
    return receive_rc
  END
  DROPBUF
  return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does any pre-termination cleanup.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_routine:
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase: Parse arg myarg
  defined_state = Symbol(uppercase_letters)
  If (defined_state = "LIT") Then Do
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  End
  Return Translate(myarg,lowercase_letters,uppercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to uppercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Uppercase: Parse arg myarg
  defined_state = Symbol(uppercase_letters)
  If (defined_state = "LIT") Then Do
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  End
  Return Translate(myarg,uppercase_letters,lowercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
