rexx_geniebld: /* We still need rexx in comment if read from SYSPROC */
    rexxpgm_version = "01.06"          /* Set with 'ver 1' and 'lev 2'. */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=======================================================================

Dataset: REXX(geniebld)
Author:  KTomiak
Contact: "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
Syntax:  geniebld (filename)
         filename - a PDS or PDSE
Purpose: THIS CODE USES ISPF LIBRARY SERVICES TO GATHER ALL
         MEMBERS AND CREATE THE $$$$$$$$ member for the GENIE
         edit macro.
Output: &sysuid..SEQOUT.&filename
        VENDOR.SYSPG.WISHLIST($$$$$$$$)

-----------------------------------------------------------------------

History of Modifications
========================
vv.ll When     Who / What you did
----- -------- --------------------------------------------------------
01.06 20180322 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) Show record ctr when bad internal type.
----- -------- --------------------------------------------------------
01.05 20180207 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) SETMSG when $$$$$$$$ is successfully built.
----- -------- --------------------------------------------------------
01.04 20180122 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) Removed prompt to overlay $$$$$$$$.
----- -------- --------------------------------------------------------
01.03 20170611 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) Renamed to GENIEBLD.
----- -------- --------------------------------------------------------
01.02 20170531 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) Replaced subsequent use of dataset to pdsdsn.
               2) Support "F" to map file to a topic.
----- -------- --------------------------------------------------------
01.01 20170507 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) Stylized History of Modifications per PUTKTM-REXX.
               2) Added support for id@type = "R", "X", and "?".
               3) Support case-insensitive id@type values.
                  That means the WISH files are now mixed case
                  tolerant. For example, you can now use "X" or "x".
               4) Add To_lowercase and To_uppercase routines.
----- -------- --------------------------------------------------------
01.00 20170411 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) Original code cloned from PDS2UPDT and modified.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------
=======================================================================

STANDARD GLOBAL DISCLAIMER
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Parse Arg dataset nothing
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
  return_code = 0
  return_code = rexx_initialize()
  If ( return_code = 0 ) Then Do
    return_code = rexx_processing()
  End
  return_code = rexx_termination()
  return 0

rexx_initialize:
  sysvar_sysuid = SYSVAR("SYSUID")
  If (dataset = "") then do
    dataset = "!WISHLIST!"
  end
  PDSDSN = STRIP(DATASET,"B","'")
  ADDRESS ISPEXEC "LMINIT DATAID(DATAID)",
    "DATASET('"PDSDSN"') ENQ(SHR)"
  MYCC = RC
  IF (MYCC >< 0) THEN Do
    ZERRSM = "FILE IN USE"
    ZERRLM = "THE FILE" PDSDSN "IS IN USE"
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return mycc
  END
  ADDRESS ISPEXEC "LMOPEN DATAID("DATAID")",
    "OPTION(INPUT) LRECL(MYRECLN)"
  MYCC = RC
  IF (MYCC > 0) THEN do
    ZERRSM = "FILE FAILED TO OPEN"
    ZERRLM = "THE FILE" PDSDSN "FAILED TO OPEN RC="MYCC
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return mycc
  END
  myrecln = myrecln + 0
  NUM_LVLS = 0
  REAL_DSN = pdsdsn
  DO WHILE REAL_DSN <> ""
    NUM_LVLS = NUM_LVLS + 1
    PARSE VAR REAL_DSN LQ '.' REAL_DSN
    LQ.NUM_LVLS = LQ
  END
  LQ.0 = NUM_LVLS
  OUT_DSN = sysvar_SYSUID".SEQOUT"
  DO IX = 1 TO NUM_LVLS
    Ll = LQ.IX
    IF Ll = sysvar_SYSUID THEN ITERATE
    OUT_DSN = OUT_DSN"."Ll
  END
  DSN_OK = SYSDSN("'"OUT_DSN"'")
  IF DSN_OK = "OK" THEN do
    ADDRESS TSO "ALLOC FILE(SEQOUT) DA('"OUT_DSN"') OLD",
      "TRACKS SPACE(250 150) REUSE"
    MYRC=RC
  END
  ELSE do
    ADDRESS TSO "ALLOC FILE(SEQOUT) DA('"OUT_DSN"')",
      "NEW CATALOG RECFM(F B) REUSE",
      "BLKSIZE(0) LRECL("MYRECLN")",
      "TRACKS SPACE(250 150)",
      "UNIT(SYSALLDA)"
 /*   "UNIT(SYSALLDA) VOLUME("SYSVOLUME")"  */
    MYRC=RC
  END
  IF MYRC > 0 THEN do
    SAY "COULD NOT CREATE" out_dsN "RC="MYRC
    return myrc
  END
  dataout. = ""
  dataout_count = 0
  func_rc = set_comment()
  error_count = 0
  warning_count = 0
  PDSMBR = ""
  function_rc = 0
  MYCTR = 0
  uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  return 0

rexx_processing:
  Do While (function_rc = 0)
    function_rc = lmmlist_pds_members()
  end
  Return 0

lmmlist_pds_members:
  ADDRESS ISPEXEC "LMMLIST DATAID("DATAID")",
    "OPTION(LIST) MEMBER(PDSMBR) STATS(YES)"
  lmmlist_rc = RC
  IF (lmmlist_rc > 0) THEN Do
    return lmmlist_rc
  END
  MYCTR = MYCTR + 1
  If (pdsmbr = "$$$$$$$$") then return 0
  just_mbr = Strip(pdsmbr,"T"," ")
  just_len = Length(just_mbr)
  Select
    When (Just_len = 4) then do
      mbrtype = "A"
    End
    When (Just_len = 6) then do
      mbrtype = "C"
    End
    When (Just_len = 8) then do
      mbrtype = "T"
    End
    Otherwise Do
      error_count = error_count + 1
      data_rc = add_data("*"pdsmbr "! Invalid name length:" just_len)
      Say                "*"pdsmbr "! Invalid name length:" just_len
      return 0
    End
  End
  msg_rc = Msg("OFF")
  "Alloc FILE(GENIE) DATASET('"pdsdsn"("just_mbr")') SHR REUSE"
  alloc_rc = RC
  msg_rc = Msg("ON")
  If (alloc_rc >< 0) Then Do
    error_count = error_count + 1
    data_rc = add_data("*"pdsmbr "! ALLOC failed:" alloc_rc)
    say                "*"pdsmbr "! ALLOC failed:" alloc_rc
    return alloc_rc
  end
  "Execio * DISKR GENIE (Stem records. Finis)"
  diskr_rc = RC
  "Free FILE(GENIE)"
  If (diskr_rc >< 0) Then Do
    error_count = error_count + 1
    data_rc = add_data("*"pdsmbr "! DISKR failed:" diskr_rc)
    say                "*"pdsmbr "! DISKR failed:" diskr_rc
    return diskr_rc
  end
  If (records.0 < 2) Then Do
    error_count = error_count + 1
    data_rc = add_data("*"pdsmbr "! Too few records:" ,
      just_mbr", #="records.0)
    say                "*"pdsmbr "! Too few records:" ,
      just_mbr", #="records.0
    return diskr_rc
  end
  a_record = ""
  c_record = ""
  t_record = ""
  anykey = ""
  anydes = ""
  dspace = ""
  kspace = ""
  Do rctr = 1 to records.0
    id@type = Left(records.rctr,1)
    id@type = To_Uppercase(id@type)
    Select
      when (id@type = "*") Then Do
      end
      when (id@type = "#") Then Do
      end
      when (id@type = "@") Then Do
      end
      when (id@type = "B") Then Do
      end
      when (id@type = "D") Then Do
      end
      when (id@type = "E") Then Do
      end
      when (id@type = "F") Then Do
        topic_dsn = Strip(Substr(records.rctr,7,46),"T"," ")
        sysdsn_ok = SysDSN(topic_dsn)
        If (sysdsn_ok >< "OK") Then Do
          data_rc = add_data("*"pdsmbr "! Bad file name:" topic_dsn)
          say                "*"pdsmbr "! Bad file name:" topic_dsn
          error_count = error_count + 1
        End
      end
      when (id@type = "G") Then Do
      end
      when (id@type = "I") Then Do
      end
      when (id@type = "K") Then Do
        anykey = anykey""kspace""Strip(Substr(records.rctr,2),"T"," ")
        kspace = " "
      end
      when (id@type = "M") Then Do
      end
      when (id@type = "N") Then Do
      end
      when (id@type = "R") Then Do
      end
      when (id@type = "S") Then Do
        int@name = Strip(Substr(records.rctr,2,8),"T"," ")
        If (just_mbr >< int@name) Then Do
          data_rc = add_data("*"pdsmbr "! Bad internal name:" int@name)
          say                "*"pdsmbr "! Bad internal name:" int@name
          error_count = error_count + 1
        end
        a_record = Left(pdsmbr,4)"     "mbrtype
        c_record = Left(pdsmbr,6)"   "mbrtype
        t_record = Left(pdsmbr,8)" "mbrtype
      end
      when (id@type = "T") Then Do
      anydes = anydes""dspace""Strip(Substr(records.rctr,2),"T"," ")
        dspace = " "
      end
      when (id@type = "U") Then Do
      end
      when (id@type = "W") Then Do
      end
      when (id@type = "X") Then Do
      end
      when (id@type = "Z") Then Do
      end
      when (id@type = "?") Then Do
      end
      Otherwise Do
        data_rc = add_data("*"pdsmbr "! Bad type:" id@type  ,
          "record:" rctr)
        say                "*"pdsmbr "! Bad type:" id@type ,
          "record:" rctr
        error_count = error_count + 1
      end
    end
  end
  Select
    when (mbrtype = "A") then do
      this_string = anydes
      strglen = 60
      Do While (this_string >< "")
        partial_string = chop_string_to_length()
        data_rc = add_data("G"a_record partial_string)
      End
    end
    when (mbrtype = "C") then do
      this_string = anydes
      strglen = 60
      Do While (this_string >< "")
        partial_string = chop_string_to_length()
        data_rc = add_data("G"c_record partial_string)
      End
    end
    when (mbrtype = "T") then do
      this_string = anydes
      strglen = 60
      Do While (this_string >< "")
        partial_string = chop_string_to_length()
        data_rc = add_data("G"t_record partial_string)
      End
    end
    Otherwise Do
    end
  end
  If (anykey >< "") Then do
    this_string = anykey
    strglen = 60
    Do while (this_string >< "")
      partial_string = chop_string_to_length()
      data_rc = add_data("G"Left(pdsmbr,8) "K" partial_string)
    End
  END
  return 0

rexx_termination:
  ADDRESS ISPEXEC "LMMLIST DATAID("DATAID") OPTION(FREE)"
  ADDRESS ISPEXEC "LMCLOSE DATAID("DATAID")"
  ADDRESS ISPEXEC "LMFREE DATAID("DATAID")"
  ADDRESS ISPEXEC "LMFREE DATAID("DATAID")"

  data_rc = add_data("*")
  dataout.0 = dataout_count
  Address TSO ,
    "EXECIO * DISKW SEQOUT (Stem dataout. FINIS)"
  Address TSO ,
    "FREE FILE(SEQOUT)"
  if (error_count > 0) | (warning_count > 0) Then Do
    ZERRSM = error_count "Errors"
    ZERRLM = "Find '!' and fix. Find '?' and verify its use."
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    ADDRESS ISPEXEC "VIEW DATASET('"OUT_DSN"')"
       /* Return codes                     */
       /* 16 - No members in library       */
       /* 18 - VSAM processing unavailable */
       /* 20 - Severe error                */
       /*                                  */
  end
  if (error_count = 0) Then Do
    ZERRSM = "$$$$$$$$ replaced"
    ZERRLM = "The config file was successfully built."
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    out_mbr = pdsdsn"($$$$$$$$)"
    Address TSO ,
      "Alloc File(SEQOUT) Dataset('"out_mbr"') SHR REUSE"
    Address TSO ,
      "EXECIO * DISKW SEQOUT (Stem dataout. FINIS)"
    Address TSO ,
      "FREE FILE(SEQOUT)"
  End
  msg_rc = Msg("OFF")
  Address TSO ,
    "Delete '"out_dsn"'"
  msg_rc = Msg("ON")
  return 0

add_data:
  Parse arg somedata
  dataout_count = dataout_count + 1
  dataout.dataout_count = somedata
  Return dataout_count

set_comment:
  data_rc = add_data("S$$$$$$$$")
  data_rc = add_data("TGENIE Configuration file.")
  data_rc = add_data("E%GENIEBLD Generator REXX code")
  data_rc = add_data("Z"Date("S")"-"Time())
  data_rc = add_data("*")
  data_rc = add_data("*"Copies("_",79))
  data_rc = add_data("*")
  Return dataout_count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
Break up a string into a smaller length.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
chop_string_to_length:
  ts_len = Length(this_string)
  If (ts_len <= strglen) Then do
    return_string = this_string
    this_string = ""
    return return_string
  end
  too_long = ""
  good_long = ""
  num_words = Words(this_string)
  a_space = ""
  Do word_ctr = 1 to num_words
    next_word = Word(this_string,1)
    If (Length(next_word) > strglen) Then Do
      if (good_long >< "") then do
        return good_long
      end
      else do
        return_string = Left(this_string,strglen)
        this_string = Substr(this_string,(strglen + 1))
        return return_string
      end
    end
    too_long = too_long""a_space""next_word
    line_len = length(too_long)
    If (line_len > strglen) Then Do
      return good_long
    End
    good_long = good_long""a_space""next_word
    a_space = " "
    this_string = Strip(DelStr(this_string,1,Length(next_word)),"L"," ")
  End
  return good_long

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
Pad a string to a desired length.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
fill_string:
  parse arg padlen , padstring
  if (Length(padstring) > padlen) then do
    say "ABORT"
    return Left(padstring,padlen)
  end
  if (Length(padstring) = padlen) then do
    return padstring
  end
  filllen = padlen - Length(padstring)
  Return Left(padstring copies(" ",filllen),padlen)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase: Parse arg myarg
  Return Translate(myarg,lowercase_letters,uppercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Convert string to uppercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Uppercase: Parse arg myarg
  Return Translate(myarg,uppercase_letters,lowercase_letters)
