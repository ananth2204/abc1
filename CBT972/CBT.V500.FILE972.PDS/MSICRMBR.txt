/* We first need rexx in comment if compiled or read from SYSPROC. */
rexx_MSICRMBR:
  rexxpgm_version = "01.00"          /* Set with 'ver 1' and 'lev 2'. */

  Address ISREDIT 'MACRO () NOPROCESS'
  Address ISPEXEC "CONTROL ERRORS Return"

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Main_Code:
  return_code = Initialization_routine()
  If (return_code = 0) Then Do
    return_code = Process_routine()
  End
  return_code = Termination_routine()
  Address ISREDIT "MEND"
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  Contact:  "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
  Overview: This is an ISPF edit macro called to do variable
            replacement in identified members.

  Syntax: Address ISPEXEC "EDIT DATASET('abc.xyz(mbr)') Macro(MSICREDT)"


=======================================================================

  History of Modifications
  ------------------------
vv.mm When     Who  /  What you did
----- -------- --------------------------------------------------------
01.01 20170822 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added compress if save RC = 12.
----- -------- --------------------------------------------------------
01.00 20170729 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code started.
----- -------- --------------------------------------------------------

=======================================================================

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_routine:
  return_code = 0
  compress_free = 0
  Address ISREDIT "(MYMEM) = MEMBER"
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_routine:
  Address ISPEXEC "TBOpen VDEFTABL NOWRITE SHARE"
  tbopen_rc = RC
  If (tbopen_rc <> 0) Then Do
    Say "TBOpen failed, RC("tbopen_rc")."
    return tbopen_rc
  End
  Address ISPEXEC "TBSort VDEFTABL Fields(VDEFVAR)"
  Do loop = 1 to 2
    Address ISPEXEC "TBTop VDEFTABL"
    tbskip_rc = 0
    Do While (tbskip_rc = 0)
      Address ISPEXEC "TBSkip VDEFTABL"
      tbskip_rc = RC
      If (tbskip_rc = 0) Then Do
        vdefval = Strip(vdefval,"T"," ")
        If (Pos("'",vdefval) > 0) Then Do
          Address ISREDIT 'c "!'vdefvar'!" "&vdefval" all'
          isredit_rc = RC
        End
        Else Do
          Address ISREDIT "c '!"vdefvar"!' '&vdefval' all"
          isredit_rc = RC
        End
      End
    End
  End
  Address ISPEXEC "TBEnd VDEFTABL"

  Address ISREDIT "(ischange) = DATA_CHANGED"
  If (ischange = "YES") Then Do
    Address ISREDIT "SAVE"
    save_rc = RC
    If (save_rc = 0) Then Do
      Address ISREDIT "End"
    End
    Else Do
      ADDRESS ISREDIT "(CURRDSN) = DATASET"
      currdsn = "'"currdsn"'"
      compress_rc = Compress_CURRDSN()
      If (compress_rc = 0) Then Do
        Address ISREDIT "SAVE"
        save_rc = RC
        If (save_rc = 0) Then Do
          Address ISREDIT "End"
        End
        Else Do
          Address ISREDIT "Cancel"
        End
      End
    End
  End
  Else Do
    Address ISREDIT "CANCEL"
  End

  return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does any pre-termination cleanup.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_routine:
  If (compress_free = 1) Then Do
    Address TSO "Free File(SYSUT1)"
    Address TSO "Free File(SYSUT2)"
    Address TSO "Free File(SYSPRINT)"
    Address TSO "Free File(SYSIN)"
  End
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine runs IEBCOPY to compress the PDS.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Compress_CURRDSN:
  compress_free = 1
  Address TSO "Alloc File(SYSUT1) DataSet("CURRDSN") OLD REUSE"
  sysut1_rc = RC
  If (sysut1_rc <> 0) Then Do
    Say "Sorry, Alloc //SYSUT1    DD DISP=OLD,DSN="CURRDSN ,
      "failed, RC("sysut1_rc")."
    return sysut1_rc
  End
  Address TSO "Alloc File(SYSUT2) DataSet("CURRDSN") OLD REUSE"
  sysut2_rc = RC
  If (sysut2_rc <> 0) Then Do
    Say "Sorry, Alloc //SYSUT2    DD DISP=OLD,DSN="CURRDSN ,
      "failed, RC("sysut2_rc")."
    return sysut2_rc
  End
  Address TSO "Alloc File(SYSPRINT) NEW DELETE REUSE" ,
    "TRACKS SPACE(1,1)" ,
    "DSORG(PS) RECFM(F B A) BLKSIZE(0) LRECL(121)"
  SYSPRINT_rc = RC
  If (SYSPRINT_rc <> 0) Then Do
    Say "Sorry, Alloc //SYSPRINT  DD DSN=&&temp" ,
      "failed, RC("SYSPRINT_rc")."
    return SYSPRINT_rc
  End
  Address TSO "Alloc File(SYSIN) NEW DELETE REUSE" ,
    "TRACKS SPACE(1,1)" ,
    "DSORG(PS) RECFM(F) BLKSIZE(80) LRECL(80)"
  SYSIN_rc = RC
  If (SYSIN_rc <> 0) Then Do
    Say "Sorry, Alloc //SYSIN     DD DSN=&&temp" ,
      "failed, RC("SYSIN_rc")."
    return SYSIN_rc
  End
  Address TSO "MAKEBUF"
  Queue " COPY OUTDD=SYSUT2,INDD=SYSUT1"
  Address MVS "EXECIO" queued() "DISKW SYSIN (Finis)"
  Address TSO "DROPBUF"
  Call   On ERROR    Name ERROR_HANDLER_ROUTINE
  Call   On FAILURE  Name ERROR_HANDLER_ROUTINE
  address LINKMVS "IEBCOPY"
  iebcopy_rc = RC
good_004:
  Call   Off ERROR
  Call   Off FAILURE
  /*
  Address MVS "ExecIO * DISKR SYSPRINT (Stem iebc. Finis)"
  Say "SYSPRINT has" iebc.0 "record(s)."
  ix = iebc.0
  Say Left(iebc.ix,79)
  */
/*  IEB147I END OF JOB - 0 WAS HIGHEST SEVERITY CODE */
  return iebcopy_rc

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine handles several conditions and returns after the fault.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
ERROR_HANDLER_ROUTINE:
  err_rc   = RC
  signal_type = Condition("C")
  error_code = -1
  Select
    When (signal_type = "ERROR") Then error_code = 8
    When (signal_type = "FAILURE") Then error_code = 12
    When (signal_type = "HALT") Then error_code = 16
    When (signal_type = "NOVALUE") Then error_code = 2
    When (signal_type = "SYNTAX") Then error_code = 4
    Otherwise error_code = 20
  End
  result = err_rc
  Signal Value signal_type"_"come_back

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
