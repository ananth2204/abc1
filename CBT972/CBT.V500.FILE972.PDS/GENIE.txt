/* We first need rexx in comment if compiled or read from SYSPROC. */
pgm_GENIE:
  rexxpgm_version = "02.23"          /* Set with 'ver 1' and 'lev 2'. */

  Address IsrEdit "Macro (GENIEMBR) NOPROCESS"
  Address IspExec "CONTROL ERRORS RETURN"

  sys_sysuid = SysVar("SYSUID")
  function_rc = rcvt_acee()

  /* Here is where you can tailor GENIE to use different data sets. */
  Select
    When (user_special = "Yes") Then Do
      ins@dsn = "!HLQ!.GENIE.WISHLIST"   /* SET without Apostrophes */
    End
    When (WordPos("GENIEAPP", saf_connect) > 0) Then Do
      ins@dsn = "!HLQ!.APPLIC.WISHLIST"   /* SET without Apostrophes */
    End
    Otherwise Do
      ins@dsn = "!WISHLIST!"              /* SET without Apostrophes */
    End
  End

  my_rc = Initialization_routine()
  IF (my_rc = 0) Then my_rc = Process_routine()
  my_rc = Termination_routine()
  Exit 1        /* Exit 1 will place the cursor on the command line. */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  REXX(GENIE)
           Genuine Every Noteworthy Itemized Examplizer (GENIE).
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Syntax:   GENIE {statement}
 Overview: Similar to MODEL, but expanded to use any Application
           as defined in $$$$$$$$. The Application is assigned a four
           character type. Statement constructs are mapped to files in
           $$$$$$$$.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
02.23 20180224 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Alias FIND with KEYWORD.
               2) Add full text SEARCH, albeit a CPU consumer.
----- -------- --------------------------------------------------------
02.22 20180207 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Hmmm.... IF string <> prior_string and ENTER used
                  THEN DO a FIND.
               2) IF FIND turns up nothing then SETMSG.
----- -------- --------------------------------------------------------
02.21 20180207 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Moved default wish@dsn to the OTHERWISE block.
----- -------- --------------------------------------------------------
02.20 20180207 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Capture RC on LMINIT and LMPUT.
               2) Added topic level full expansion based on CRDG.
               3) Made the table field GENIEDES scrollable.
----- -------- --------------------------------------------------------
02.19 20170919 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added line selection Preview.
----- -------- --------------------------------------------------------
02.18 20170825 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Changed WHEN to use ABBREV in many lines.
               2) Change Expand(\\) to Expand(||) which led to
                  changing attribute (%|_) to (%~_).
               3) Removed DEBUG logic.
               4) Alter expansion to be expand TOPIC to CHAPTER and
                  CHAPTER to ID. On command line the expand to ID
                  will not include the CHAPTER item.
----- -------- --------------------------------------------------------
02.17 20170821 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Moved driver code above comment block.
----- -------- --------------------------------------------------------
02.16 20170715 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added a sample Select-When block for using more
                  than one WISH data set.
----- -------- --------------------------------------------------------
02.15 20170713 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Modified panel labels Topic Chapter Item.
               2) Using VENDOR.GENIE.WISHLIST.
----- -------- --------------------------------------------------------
02.14 20170613 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Support "X" currdsn = curdsname.
               2) Exhaustive search to free //BULK####.
                  I had an EXIT IF a wish was asked for and granted.
               3) Corrected initialization of debuglvl to "".
               4) Corrected comparison of debuglvl to sort_rc.
               5) Moved init of sort variables sooner.
----- -------- --------------------------------------------------------
02.13 20170523 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Replaced plib_allocated.
                  a) Add PANELEND statements.
                  b) Renamed panel_def to get_sigl_near_plib.
----- -------- --------------------------------------------------------
02.12 20170522 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Adjusted the saf programmer name length.
----- -------- --------------------------------------------------------
02.11 20170518 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) To_uppercase(geniembr) before validation.
               2) Chased down the RACF name field in the ACEE.
----- -------- --------------------------------------------------------
02.10 20170517 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Blank out genieans before prompting.
               2) Text-Flow the global disclaimer.
               3) Added sample text to Parse VERSION.
               4) PUTKTM-REXX the comment blocks.
               5) Added ACF list to get programmer-name.
               6) Validate member name before attempting to fetch it.
               7) %genie * will show all of the WISH items.
----- -------- --------------------------------------------------------
02.09 20170516 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added MSG(ISPZZ102) to TBDISPL: Row x to y of z.
----- -------- --------------------------------------------------------
02.08 20170515 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Process_routine: allow tbdispl rc(4) on multiple
                  row selects.
                  a) IF keep_going > 0 changed to 4.
                  b) After THEN DO.. END set keep_going = 0.
               2) Added positioning to the first selected item.
                  position_to_key:
                    using frowsarg (firsat row searh argument)
               3) Added primary command Locate to position to an item.
                  Also uses frowsarg and position_to_key.
----- -------- --------------------------------------------------------
02.07 20170510 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Handling the Parse of LISTUSER results differently.
----- -------- --------------------------------------------------------
02.06 20170508 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added Top-Secret support to get username and dfltgrp.
               2) Rename RACF_ variables to SAF_.
               3) Added support for sysvaruid.
               4) IF RCVT or RTSS has trouble, or SECNAM not matched by
                  ACF2, RCVT, or RTSS then use GENIEASK to get name
                  and group.
----- -------- --------------------------------------------------------
02.05 20170507 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added GENIEASK to get username and dfltgrp WHEN
                  not using RACF (CA-ACF2 and CA-Top Secret).
               2) Added id@type = "R" to process a routine.
               3) Renamed ins@line to id@type as in %WISHLIST.
               4) Support exchange mvs_smfid.
               4) Support exchange zdate.
----- -------- --------------------------------------------------------
02.04 20170505 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added code to get RCVTID and parse LISTUSER WHEN
                  the security product is RACF.
               2) Added id@type = "?" to pop-up intake panel GENIEASK.
               3) Fixed translating id@type to uppercase.
                  That means the WISH files are now mixed case
                  tolerant. For example, you can now use "X" or "x".
----- -------- --------------------------------------------------------
02.03 20170504 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Modified the 'History of Modifications" to
                  conform with PUTKTM-REXX.
               2) Support case-insensitive id@type values.
               3) Added support for user specified string substitution
                  based on id@type = X using GENIE reserved values.

                  Xyour-variable = GENIE reserved value

                  GENIE reserved values
                  ---------------------
                  mbrname = the current member name
                  SysVarUID = SysVar('SYSUID')
                  logon_acct = from the logon procedure (ZACCTNUM)
                  racf_dfltgrp = User's default RACF group
                  racf_name = RACF name field (20 characters)

                  Examples
                  --------
                  xmemberid = mbrname
                  xsysuser = SysVarUID
----- -------- --------------------------------------------------------
02.02 20170417 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Handling a new $$$$$$$$ format of 1 to many
                  "A", "C", or "T" records per item.
               2) Add support for Keywords (1 to many).
----- -------- --------------------------------------------------------
02.01 20170411 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Rebranded INSERTS to GENIE using WISHLIST.
               2) No real zvm support as it lacks the concept
                  to support a PC folder or MVS DSORG=PO DSN.
               3) No real PC support now that SPF/PC will not
                  work on Windodws 8.0 and above.
               4) Using one generic TBDISPL panel.
----- -------- --------------------------------------------------------
02.00 20170330 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Changed zos_dsn to be userid centric.
----- -------- --------------------------------------------------------
01.08 20080119 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added pop-up IF '?' used to see the complete
                  list of category/class names and description.
----- -------- --------------------------------------------------------
01.07 20080117 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) IF PC, assume SPF/PC 4.0, get ZPANPATH and
                  check the panels for a line with &INSLVL = '##' and
                  check IF the level matches what this version of the
                  code requires. IF not found or not matched, check IF
                  we should update them or else exit.
----- -------- --------------------------------------------------------
01.06 20080112 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Renamed to INSERTS, adding PC and VM support.
----- -------- --------------------------------------------------------
01.05 20080103 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Corrected choosing a construct from the panel.
----- -------- --------------------------------------------------------
01.04 20080101 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Reworked how sub-levels are used.
----- -------- --------------------------------------------------------
01.03 20071230 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Force wish@dsn to be coded.
               2) Force ins@idx to contain names and descriptions.
               3) Only allocate tables and panels IF needed.
----- -------- --------------------------------------------------------
01.02 20071225 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
      Merry Christmas.
               1) Expanded to read the class member in order to
                  map statements to files.
----- -------- --------------------------------------------------------
01.01 20071223 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original base code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so IF you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_routine:
  return_code = 0
  Parse VERSION,
    version_rexx_name,       /* REXX370 */
    version_rexx_version,    /* 3.48 */
    version_rexx_date        /* 01 May 1992 */
  Parse SOURCE,
    source_host_env,         /* TSO */
    source_call_type,        /* COMMAND */
    source_uc_exec_name,     /* GENIE */
    source_hostdd,           /* SYSEXEC */
    source_hostdsn,          /* ? */
    source_nf_exec_name,     /* ? */
    source_initial_cmd_env,  /* TSO */
    source_asid_name,        /* ISPF */
    source_char8_user_token, /* ? */
    source_hostother         /* "" */

  Parse Upper Var GENIEMBR GENIEMBR

  ZERRALRM = "NO"
  ZERRHM = "*"
  ZERRSM = ""
  ZERRLM = ""
  starter_line = Copies("1234abcd",9)
  plib_rc = -1

  sysvar_SYSLTERM = SysVar("SYSLTERM")
  sysvar_SYSWTERM = SysVar("SYSWTERM")

  Address IsrEdit "(toprow, botrow) = DISPLAY_LINES"
  IsrEdit_rc = RC
  IF (IsrEdit_rc <> 0) Then toprow = 0
  resume_row = toprow + 0

  ins@idx = "$$$$$$$$"

  Address IsrEdit "PROCESS DEST"            /* ISPF adjusts for a/b */
  IsrEdit_rc = RC
  SELECT
    WHEN (IsrEdit_rc = 20) THEN DO      /* empty file */
      destline = 0
    END
    WHEN (IsrEdit_rc = 16) THEN DO
      ZERRALRM = "YES"
      ZERRHM = "*"
      ZERRSM = "PRESS HELP"
      ZERRLM = "Incomplete or conflicting line commands."
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      return_code = 16
      RETURN return_code
    END
    WHEN (IsrEdit_rc = 8) THEN DO
      Address IsrEdit "(destline) = LINENUM .ZLast"
      ZERRALRM = "YES"
      ZERRHM = "*"
      ZERRSM = "Insert command pending"
      ZERRLM = ,
        "An A/B line command was not been specified." ,
        ".ZLAST ("destline") will be used instead."
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    END
    WHEN (IsrEdit_rc = 0) THEN DO
      Line_pos = "AFTER"
      Address IsrEdit "(destline) = LINENUM .ZDEST"
      IsrEdit_rc = RC
      IF (IsrEdit_rc > 0) THEN DO
        destline = 0
      END
    END
    Otherwise Do
      destline = 0
    END
  END
  next_line = destline + 0

  show_help = 0

  listuser_done = "No"
  starter_line = Copies("1234abcd",9)
  valid_names = "@#$ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
  sortfld = "GENIEITM"
  dsplfld = "Item ID"
  geniesrt = "A"
  genielvl = "T"

  prior_string = ""
  exp_len = 0
  genieexp = ""
  geniekey = ""
  buildkey = "A"
  key_pos = Pos("=",geniembr)
  IF (key_pos > 0) THEN DO
    geniekey = Substr(geniembr,(key_pos + 1))
    geniefnd = geniekey
    buildkey = ""
    geniembr = ""
  END
  key_len = Length(geniekey)
  SELECT
    WHEN (geniembr = "?") THEN DO
      show_help = 1
      geniembr = ""
    END
    WHEN (geniembr = "*") THEN DO
      geniekey = "*"
    END
    WHEN (geniembr <> "") THEN DO
      mbr@len = Length(geniembr)
      good_name = 0
      IF (mbr@len < 9) THEN DO
        geniember = To_Uppercase(geniembr)
        IF (Pos(Left(geniembr,1),Left(valid_names,29)) = 0 ) THEN DO
          good_name = 1
          SAY "1st character bad:" Left(geniembr,1)
        END
        Do ltr = 2 to mbr@len
          IF (Pos(SubStr(geniembr,ltr,1),valid_names) = 0 ) THEN DO
            good_name = 1
          SAY ltr "character bad:" SubStr(geniembr,ltr,1)
          END
        END
        IF (good_name = 0) THEN DO
          fetchitm = geniembr
          fetchsel = "F"
          return_code = fetch_the_wish()
          return_code = 2
          RETURN return_code
        END
        ELSE DO
          SAY geniembr "contains invalid characters for a WISH."
        END
      END
    END
    Otherwise Do
    END
  END

  strglen = 80
  purgekey = ""

  return_code = tbcreate_genie()
  IF (return_code = 0) THEN DO
    return_code = read_zos_index()
  END
  buildkey = ""
  plib_rc = plib_allocated()
  IF (plib_rc <> 0) THEN DO
    SAY "Problem building a PLIB:" plib_rc
    return_code = plib_rc
    RETURN return_code
  END

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_routine:
  ZSCR = "PAGE"
  ADDRESS ISPEXEC "VGet (ZSCREENW)"
  hw = (ZSCREENW - 17) % 2
  ZTDMARK = Copies("-",hw)"> End of Wishes <"Copies("-",hw)
  GENIEHD1 = '$$$$'
  GENIEHD2 = 'Genuine Every Noteworthy Itemized Examplizer'
  GENIEOBJ = 'Application'
  prevfld = sortfld
  prevsrt = geniesrt
  frowsarg = ""
  keep_going = 0
  Do While keep_going = 0
    ZTDSELS = 0
    ZCMD = ""
    IF (show_help = 1) THEN DO
      show_help = 0
      initzcmd = "?"
      ADDRESS ISPEXEC "CONTROL NONDISPL ENTER"
    END
    IF (frowsarg <> "") Then function_rc = position_to_key()
    ADDRESS ISPEXEC,
      "TBDISPL GENIETBL PANEL(GENIEPRI)" ,
      "MSG(ISPZZ102)"
    keep_going = RC
    initzcmd = ""
    frowsarg = ""
    /* RETURN codes                      */
    /* 4  - The enter key or scroll      */
    /*      command used; additional data*/
    /*      remains to be stored         */
    /* 8  - The END or RETURN command was*/
    /*      entered.  IF crp at top, no  */
    /*      lines modified               */
    /*    - Panel was generated from tags*/
    /*      and the EXIT command was     */
    /*      entered                      */
    IF (keep_going = 8) THEN DO
      ZERRALRM = "NO"
      ZERRSM = "OK"
      ZERRLM = "You asked to end this dialog."
      ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      Leave
    END
    IF (keep_going > 4) THEN DO
      ZERRALRM = "YES"
      ZERRSM = "NO"
      zerrlm = "Uh Oh, panel(GENIEPRI)",
        "failed to tbdispl, rc("keep_going")."
      ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      RETURN keep_going
    END
    keep_going = 0
    ZERRALRM = "NO"
    ZERRSM = ""
    ZERRLM = ""
    now_what = zcmd_main_loop()
    IF (now_what <> 0) then keep_going = 1
    IF (keep_going = 0) Then now_what = Process_zdtsel()
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does any pre-termination cleanup.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_routine:
  IF (table_create = 0) THEN DO
    ADDRESS ISPEXEC "TBEND SDUMPTBL"
  END
  IF (plib_rc = 0) THEN DO
    ADDRESS ISPEXEC,
      "LMFREE DATAID(&TMPPNL)"
    ADDRESS ISPEXEC,
      "LIBDEF ISPPLIB"
    Address TSO ,
      "FREE File("panel_dd")"
  END
  resume_row = resume_row + 1
  Address IsrEdit "CURSOR =" resume_row "1"
  IsrEdit_rc = RC
  RETURN 0


/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================


 Subroutines flow:


=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Remove selected wishes from the displayed table.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
purge_genietbl:
  IF (purgekey = "") THEN DO
    RETURN 0
  END
  ADDRESS ISPEXEC "TBTOP GENIETBL"
  ADDRESS ISPEXEC "TBSKIP GENIETBL"
  purge_rc = rc
  Do while (purge_rc = 0)
    SELECT
      WHEN (purgekey = "*") THEN DO
        ADDRESS ISPEXEC "TBDelete GENIETBL"
        purge_rc = rc
      END
      WHEN (purgekey = "C") & ,
           (Length(genieitm) > 4) THEN DO
        ADDRESS ISPEXEC "TBDelete GENIETBL"
        purge_rc = rc
      END
      Otherwise Do
        NOp
      END
    END
    ADDRESS ISPEXEC "TBSKIP GENIETBL"
    purge_rc = rc
  END
  purgekey = ""
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Create a table to hold the WISH items.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
tbcreate_genie:
  ADDRESS ISPEXEC,
    "TBEND GENIETBL"
  ADDRESS ISPEXEC,
    "TBCREATE GENIETBL",
    "KEYS(GENIEITM)" ,
    "NAMES(GENIESEL, GENIETPC, GENIECHA,",
      "GENIESEQ, GENIEDES, GENIEAKA)",
    "REPLACE",
    "NOWRITE"
  tbcreate_rc = RC
  /* RETURN codes                      */
  /*  4 - Duplicate table exists but   */
  /*      "replace" specified          */
  /*  8 - Table already exists;        */
  /*      "replace" not specified      */
  /* 12 - Table in use; enq failed     */
  /* 16 - Table input library not      */
  /*      allocated with "write"       */
  /* 20 - Severe error                 */
  IF (tbcreate_rc <> 0) THEN DO
    SAY "Uh Oh, table(GENIETBL) failed to create, rc("tbcreate_rc")."
    RETURN tbl_rc
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Read configuration member to store items, keywords, and titles.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
read_zos_index:
  "Alloc FILE(GENIECFG) DATASET('"wish@dsn"($$$$$$$$)') SHR REUSE"
  alloc_rc = RC
  IF (alloc_rc <> 0) THEN DO
    SAY "Allocation of the configuration file failed, RC="alloc_rc
    return_code = alloc_rc
    RETURN return_code
  END
  "Execio * DISKR GENIECFG (Stem records. Finis)"
  diskr_rc = RC
  "Free FILE(GENIECFG)"
  IF (diskr_rc <> 0) THEN DO
    SAY "Read of the configuration file failed, RC="diskr_rc
    ZERRSM = "DISKR!"
    ZERRLM = "GENIECFG diskr error:" diskr_rc
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return_code = 16
    RETURN return_code
  END
  return_code = build_my_table()
  key_len = 0
  exp_len = 0
  ADDRESS ISPEXEC "TBTop GENIETBL"
  tbtop_rc = RC
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Position to a key.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
position_to_key:
  ADDRESS ISPEXEC "TBTOP GENIETBL"
  ADDRESS ISPEXEC "TBVCLEAR GENIETBL"
  genieitm = frowsarg
  ADDRESS ISPEXEC "TBSARG GENIETBL" ,
    "Next NameCond(GENIEITM,GE)"
  tbsarg_rc = RC
  ADDRESS ISPEXEC "TBScan GENIETBL"
  tbscan_rc = RC
  IF (tbscan_rc <> 0) then RETURN 0
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Sort the table.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
sort_the_table:
  ADDRESS ISPEXEC "TBSORT GENIETBL Fields("sortfld",C,"geniesrt")"
  sort_rc = RC
      /* RETURN codes                 */
      /* 12 - Table is not open       */
      /* 16 - Numeric convert error   */
      /* 20 - Severe error            */
  IF (sort_rc <> 0) THEN DO
    IF (sort_rc > 1) THEN DO
      SAY "sort_the_table:     sort RC:" sort_rc
    END
  END
  prevfld = sortfld
  prevsrt = geniesrt
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Compare the WISH to see IF we should show it (add to table).
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
would_it_match:
  matching = ""
  SELECT
    WHEN (geniekey = "*") * (exp_len > 0) THEN DO
      IF ((To_Lowercase(Left(prioritm,Length(genieexp))) = ,
          To_Lowercase(genieexp))) ,
        then matching = matching"*(itm) "
    END
    WHEN (geniekey = "*") then matching = matching"key(*) "
    WHEN (genieexp = "*") then matching = matching"exp(*) "
    WHEN (key_len > 0) THEN DO
      IF (Pos(To_Lowercase(geniekey),To_Lowercase(genieaka)) > 0) ,
        THEN DO
        matching = matching"aka "
        find_status = 1
      END
      IF (Pos(To_Lowercase(geniekey),To_Lowercase(geniedes)) > 0) ,
        THEN DO
        matching = matching"des "
        find_status = 1
      END
      IF (To_Lowercase(geniekey) = ,
          To_Lowercase(Left(prioritm,key_len))) ,
        THEN DO
        matching = matching"key(itm) "
        matching = matching"des "
        find_status = 1
      END
    END
    WHEN (exp_len > 0) THEN DO
      IF ((To_Lowercase(Left(prioritm,Length(genieexp))) = ,
          To_Lowercase(genieexp)) & ,
          (Length(Strip(prioritm,"T"," ")) = exp_len)) ,
        THEN DO
        matching = matching"exp(itm) "
        matching = matching"key(itm) "
        matching = matching"des "
        find_status = 1
      END
    END
    WHEN (buildkey = "A") & ,
         (priortyp = "A") THEN DO
      matching = matching"A "
    END
    OTHERWISE DO
      NOP
    END
  END
  RETURN Length(matching)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Loop thru the configuration WISH data and add to the table.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
build_my_table:
  ADDRESS ISPEXEC "TBVCLEAR GENIETBL"
  first_sw = 0
  Do rec$idx = 1 To records.0
    Parse Var records.rec$idx,
      =1  file@gen +1,
      =2  file@itm +8,
      =10 blank_one +1,
      =11 file@typ +1,
      =12 blank_two +1,
      =13 file@txt
    IF (file@gen <> "G") Then Iterate
    IF (first_sw = 0) THEN DO
      first_sw = 1
      prioritm = file@itm
      priortyp = file@typ
      first_item = ""
    END
    IF (file@itm <> prioritm) THEN DO
      function_rc = would_it_match()
      IF (matching <> "") THEN DO
        IF (first_item = "") THEN DO
          first_item = prioritm
        END
        geniedes = Strip(geniedes,"T"," ")
        ADDRESS ISPEXEC,
          "TBADD GENIETBL ORDER"
        tbadd_rc = RC
        IF (tbadd_rc > 8) THEN DO
          SAY "Uh Oh," genieitm "add failed, rc("tbadd_rc")."
        END
      END
      /* RETURN codes                    */
      /*  4 - Number of rows parameter   */
      /*      was specified but storage  */
      /*      was only obtained for a    */
      /*      single row                 */
      /*  8 - Key tables: a row with the */
      /*      same key already exists;   */
      /*      crp set to top             */
      /* 12 - Table is not open          */
      /* 20 - Severe error               */
      ADDRESS ISPEXEC "TBVCLEAR GENIETBL"
      prioritm = file@itm
      priortyp = file@typ
    END
    genieitm = Strip(file@itm,"T"," ")
    GENIETPC = Left(file@itm,4)
    IF (Length(genieitm) > 5) THEN DO
      geniecha = Substr(file@itm,5,2)
    END
    IF (Length(genieitm) = 8) THEN DO
      genieseq = Substr(file@itm,7,2)
    END
    genietyp = file@typ
    genietxt  = Strip(file@txt ,"T"," ")
    SELECT
      WHEN (file@typ = "A") THEN DO
        IF (geniedes = "") THEN DO
          geniedes = genietxt
        END
        ELSE DO
          geniedes = geniedes" "genietxt
        END
        geniecha = "=="
        genieseq = "--"
        genieaka = ""
      END
      WHEN (file@typ = "C") THEN DO
        IF (geniedes = "") THEN DO
          geniedes = genietxt
        END
        ELSE DO
          geniedes = geniedes" "genietxt
        END
        genieseq = "--"
        genieaka = ""
      END
      WHEN (file@typ = "T") THEN DO
        IF (geniedes = "") THEN DO
          geniedes = genietxt
        END
        ELSE DO
          geniedes = geniedes" "genietxt
        END
        genieaka = ""
      END
      WHEN (file@typ = "K") THEN DO
        IF (genieaka = "") THEN DO
          genieaka = genietxt
        END
        ELSE DO
          genieaka = genieaka" "genietxt
        END
      END
      Otherwise Do
        SAY "Huh?" ,
          Left(records.rec$idx,70)
      END
    END
  END
  function_rc = would_it_match()
  IF (matching <> "") THEN DO
    geniedes = Strip(geniedes,"T"," ")
    ADDRESS ISPEXEC,
      "TBADD GENIETBL ORDER"
    tbadd_rc = RC
    IF (tbadd_rc > 8) THEN DO
      SAY "Uh Oh," genieitm "add failed, rc("tbadd_rc")."
    END
  END
  maxrows = 0
  ADDRESS ISPEXEC,
    "TBSTATS GENIETBL ROWCURR(MAXROWS)"
  tbstats_rc = RC
    /*  RETURN codes                     */
    /*   0 - Normal RETURN even IF table */
    /*       does not exist              */
    /*  16 - Variable value truncated    */
    /*  20 - Severe error                */
  IF (maxrows > 0) THEN DO
    function_rc = sort_the_table()
  END
  ELSE DO
    ZERRALRM = "YES"
    ZERRHM = "*"
    ZERRSM = "PRESS HELP"
    ZERRLM = "What you chose led to an empty table." ,
      "Use the REFRESH primary command to view all Topics or",
      "use the FIND option to search for a different string."
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Remove topic or chapter WISH items.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
unexpand_table:
  origfld = sortfld
  origsrt = geniesrt
  sortfld = "GENIEITM"
  geniesrt = "A"
  function_rc = sort_the_table()
  ADDRESS ISPEXEC "TBTOP GENIETBL"
  ADDRESS ISPEXEC "TBVCLEAR GENIETBL"
  genieitm = genieexp
  ADDRESS ISPEXEC "TBSARG GENIETBL" ,
    "Next NameCond(GENIEITM,GT)"
  tbsarg_rc = RC
  IF (tbsarg_rc <> 0) then RETURN 0
  tbscan_rc = 0
  Do While (tbscan_rc = 0)
    ADDRESS ISPEXEC "TBSCAN GENIETBL"
    tbscan_rc = RC
    IF (Left(genieitm,exp_len) <> genieexp) then Leave
  ADDRESS ISPEXEC "TBDELETE GENIETBL"
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Process the FIXED section of the panel - COMMAND field.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
zcmd_main_loop:
  uppercase_zcmd = translate(zcmd)
  zcmd = ""
  SELECT
    WHEN (ABBREV("SORT",uppercase_zcmd,2) = 1) THEN DO
      zcmdverb = uppercase_zcmd
    END
    WHEN (ABBREV("ORDER",uppercase_zcmd,1) = 1) THEN DO
      zcmdverb = uppercase_zcmd
    END
    WHEN (ABBREV("FINDKYWD",uppercase_zcmd,1) = 1) THEN DO
      zcmdverb = uppercase_zcmd
      zcmditm = geniefnd
    END
    WHEN (ABBREV("SEARCH",uppercase_zcmd,2) = 1) THEN DO
      zcmdverb = uppercase_zcmd
      zcmditm = geniefnd
    END
    WHEN (ABBREV("SRCHTEXT",uppercase_zcmd,2) = 1) THEN DO
      zcmdverb = uppercase_zcmd
      zcmditm = geniefnd
    END
    WHEN (uppercase_zcmd = "") & ,
      (prior_string <> geniefnd) THEN DO
      IF (geniefnd = "") THEN DO
        prior_string = ""
        RETURN 0
      END
      zcmdverb = "FINDKYWD"
      zcmditm = geniefnd
    END
    WHEN (Pos(" ",uppercase_zcmd) > 0) THEN DO
      Parse var uppercase_zcmd zcmdverb zcmditm
    END
    WHEN (zcmd = "") THEN DO
      RETURN 0
    END
    Otherwise Do
      Parse var uppercase_zcmd zcmdverb +1 zcmditm
    END
  END
  function_rc = zcmd_selection()
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Process the COMMAND.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
zcmd_selection:
  SELECT
    WHEN (Left(zcmdverb,1) = "+") | ,
         (ABBREV("EXPAND",zcmdverb,1) = 1) THEN DO
      IF (Length(zcmditm) = 8) THEN DO
        ZERRALRM = "YES"
        ZERRHM = "*"
        ZERRSM = "PRESS HELP"
        ZERRLM = "You cannot expand a topic. Request denied!"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      END
      ELSE DO
        genieexp = zcmditm
        exp_len = Length(genieexp) + 2
        call_rc = build_my_table()
        exp_len = 0
      END
    END
    WHEN (Left(zcmdverb,1) = "*") THEN DO
      IF (Length(zcmditm) = 8) THEN DO
        ZERRALRM = "YES"
        ZERRHM = "*"
        ZERRSM = "PRESS HELP"
        ZERRLM = "You cannot expand a topic. Request denied!"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      END
      ELSE DO
        geniekey = "*"
        genieexp = zcmditm
        exp_len = Length(genieexp) + 4
        call_rc = build_my_table()
        exp_len = 0
      END
    END
    WHEN (Left(zcmdverb,1) = "-") | ,
         (ABBREV("UNEXPAND",zcmdverb,1) = 1) THEN DO
      IF (Length(zcmditm) = 8) THEN DO
        ZERRALRM = "YES"
        ZERRHM = "*"
        ZERRSM = "PRESS HELP"
        ZERRLM = "You cannot unexpand (shrink) a topic. Request denied!"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      END
      ELSE DO
        genieexp = zcmditm
        exp_len = Length(genieexp)
        call_rc = unexpand_table()
      END
    END
    WHEN (Left(zcmdverb,1) = "?") THEN DO
      geniezsl = ""
      go_again = 0
      do while (go_again = 0)
        ADDRESS ISPEXEC "AddPop"
        ADDRESS ISPEXEC "Display Panel(GENIEZSL)"
        display_rc = RC
        ADDRESS ISPEXEC "RemPop"
        IF (display_rc > 0) THEN DO
          go_again = 1
          leave
        END
        SELECT
          WHEN (geniezsl = "?") THEN DO
            ZERRALRM = "YES"
            ZERRHM = "*"
            ZERRSM = "No way!"
            ZERRLM = "Asking for recursive help is inexscuable."
            ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
          END
          WHEN (geniezsl = "") THEN DO
          END
          Otherwise Do
            zcmd = geniezsl
            function_rc = zcmd_main_loop()
            go_again = 1
          END
        END
      END
    END
    WHEN (ABBREV("FIND" ,zcmdverb,1) = 1) | ,
         (ABBREV("FINDKYWD" ,zcmdverb,1) = 1) | ,
         (ABBREV("KEYWORD" ,zcmdverb,1) = 1) THEN DO
      IF (zcmditm = "") THEN DO
        ZERRALRM = "YES"
        ZERRSM = "Problem!"
        ZERRLM = "You asked to find nothing."
        ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        keep_going = 2
        RETURN 4
      END
      purgekey = "C"
      call_rc = purge_genietbl()
      geniefnd = zcmditm
      geniekey = zcmditm
      key_len = Length(geniekey)
      find_status = 0
      call_rc = build_my_table()
      IF (find_status = 0) THEN DO
        ZERRALRM = "YES"
        ZERRSM = "Not found"
        ZERRLM = geniefnd "does not appear in titles nor keywords."
        ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      END
      ELSE DO
        frowsarg = first_item
        function_rc = position_to_key()
      END
      prior_string = geniefnd
      key_len = 0
    END
    WHEN (ABBREV("SEARCH",zcmdverb,2) = 1) | ,
         (ABBREV("SRCHTEXT",zcmdverb,2) = 1) THEN DO
      IF (zcmditm <> "") THEN DO
        geniefnd = zcmditm
        zcmditm = ""
      END
      prior_string = geniefnd
      genieask = "Search can take a long time, are you sure?" ,
        "Y for YES otherwise No."
      genielen = 3
      GENIELIM = "            " Copies("+",genielen)
      genieans = ""
      ADDRESS ISPEXEC "Display Panel(GENIEASK)"
      IF (ABBREV("YES",To_Uppercase(genieans),1) <> 1) THEN DO
        ZERRALRM = "NO"
        ZERRSM = "Search cancelled"
        ZERRLM = "You asked to cancel the long running search."
        ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        keep_going = 2
        RETURN 4
      END
      IF (geniefnd = "") THEN DO
        ZERRALRM = "YES"
        ZERRSM = "Problem!"
        ZERRLM = "You asked to search for nothing."
        ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        keep_going = 2
        RETURN 4
      END
      purgekey = "C"
      call_rc = purge_genietbl()
      first_sw = 0
      blobfound = 0
      DO rec$idx = 1 TO records.0
        PARSE VAR records.rec$idx,
          =1  file@gen +1,
          =2  file@itm +8,
          =10 blank_one +1,
          =11 file@typ +1,
          =12 blank_two +1,
          =13 file@txt
        IF (file@gen <> "G") THEN ITERATE
        IF (first_sw = 0) THEN DO
          first_sw = 1
          prioritm = file@itm
          priortyp = file@typ
          ADDRESS ISPEXEC "TBVCLEAR GENIETBL"
          first_item = ""
        END
        IF (file@itm <> prioritm) THEN DO
          function_rc = Search_Pds_Member()
          prioritm = file@itm
          priortyp = file@typ
          ADDRESS ISPEXEC "TBVCLEAR GENIETBL"
        END
        genieitm = Strip(file@itm,"T"," ")
        GENIETPC = Left(file@itm,4)
        IF (Length(genieitm) > 5) THEN DO
          geniecha = Substr(file@itm,5,2)
        END
        IF (Length(genieitm) = 8) THEN DO
          genieseq = Substr(file@itm,7,2)
        END
        genietyp = file@typ
        genietxt  = Strip(file@txt ,"T"," ")
        SELECT
          WHEN (file@typ = "A") THEN DO
            IF (geniedes = "") THEN DO
              geniedes = genietxt
            END
            ELSE DO
              geniedes = geniedes" "genietxt
            END
            geniecha = "=="
            genieseq = "--"
          END
          WHEN (file@typ = "C") THEN DO
            IF (geniedes = "") THEN DO
              geniedes = genietxt
            END
            ELSE DO
              geniedes = geniedes" "genietxt
            END
            genieseq = "--"
          END
          WHEN (file@typ = "T") THEN DO
            IF (geniedes = "") THEN DO
              geniedes = genietxt
            END
            ELSE DO
              geniedes = geniedes" "genietxt
            END
          END
          WHEN (file@typ = "K") THEN DO
            IF (genieaka = "") THEN DO
              genieaka = genietxt
            END
            ELSE DO
              genieaka = genieaka" "genietxt
            END
          END
          Otherwise Do
            SAY "Huh?" ,
              Left(records.rec$idx,70)
          END
        END
        geniedes = Strip(geniedes,"T"," ")
      END
      function_rc = Search_Pds_Member()
      IF (blobfound = 0) THEN DO
        ZERRALRM = "YES"
        ZERRSM = "Not found"
        ZERRLM = geniefnd "does not appear in the WISH members."
        ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      END
      ELSE DO
        frowsarg = first_item
        function_rc = position_to_key()
      END
      prioritm = ""
      exp_len = 0
      genieexp = ""
      geniekey = ""
    END
    WHEN (ABBREV("INFO",zcmdverb,1) = 1) THEN DO
      fetchitm = zcmditm
      fetchsel = "I"
      call_rc = itemize_detail()
    END
    WHEN (ABBREV("LOCATE",zcmdverb,1) = 1) THEN DO
      frowsarg = zcmditm
      function_rc = position_to_key()
    END
    WHEN (ABBREV("ORDER",zcmdverb,1) = 1) THEN DO
      SELECT
        WHEN (geniesrt = "A") then geniesrt = "D"
        Otherwise Do
          geniesrt = "A"
        END
      END
      function_rc = sort_the_table()
    END
    WHEN (ABBREV("SORT",zcmdverb,4) = 1) THEN DO
      SELECT
        WHEN (prevfld = "GENIEDES") THEN DO
          sortfld = "GENIEITM"
          dsplfld = "Item ID"
          geniesrt = "A"
        END
        Otherwise Do
          sortfld = "GENIEDES"
          dsplfld = "Title"
          geniesrt = "A"
        END
      END
      function_rc = sort_the_table()
    END
    WHEN (ABBREV("SELECT",zcmdverb,1) = 1) THEN DO
      fetchitm = zcmditm
      fetchsel = "S"
      call_rc = fetch_the_wish()
      keep_going = 1
    END
    WHEN (ABBREV("WISH",zcmdverb,1) = 1) THEN DO
      purgekey = "C"
      call_rc = purge_genietbl()
      IF (geniefnd = "") THEN DO
        ZERRALRM = "YES"
        ZERRSM = "Problem!"
        ZERRLM = "You asked to find nothing."
        ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        keep_going = 2
        RETURN 4
      END
      geniekey = geniefnd
      key_len = Length(geniekey)
      call_rc = build_my_table()
      key_len = 0
    END
    WHEN (ABBREV("REFRESH",zcmdverb,1) = 1) THEN DO
      genielvl = "T"
      purgekey = "*"
      call_rc = purge_genietbl()
      geniefnd = ""
      key_len = 0
      geniekey = ""
      genieexp = ""
      exp_len = 0
      buildkey = "A"
      call_rc = read_zos_index()
      IF (call_rc <> 0) THEN DO
        RETURN call_rc
      END
    END
    WHEN (ABBREV("CANCEL",zcmdverb,1) = 1) THEN DO
      ZERRALRM = "No"
      ZERRSM = "Cancel accepted."
      ZERRLM = "You asked to cancel the request."
      ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      keep_going = 2
      RETURN 4
    END
    Otherwise Do
      ZERRALRM = "YES"
      ZERRSM = "Press help"
      ZERRLM = "You asked GENIE to do something. However," ,
        zcmdverb "makes absolutely no sense."
      ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    END
  END
  zcmdverb = ""
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Process the )MODEL section of the panel - ROW selection.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_zdtsel:
  IF (ZTDSELS > 0) Then frowsarg = genieitm
  Do While (ZTDSELS > 0)
    geniesel = To_Uppercase(geniesel)
    function_rc = line_selection()
    GENIESEL = ""
    ADDRESS ISPEXEC "TBPUT GENIETBL"
    IF (ZTDSELS > 1) THEN DO
      ADDRESS ISPEXEC "TBDISPL GENIETBL"
    END
    ELSE DO
      ZTDSELS = 0
    END
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Process the ROW selection.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
line_selection:
  SELECT
    WHEN (GENIESEL = "S") THEN DO
      fetchitm = genieitm
      fetchsel = "S"
      call_rc = fetch_the_wish()
      keep_going = 1
    END
    WHEN (GENIESEL = "/") THEN DO
      genielsl = ""
      ADDRESS ISPEXEC "AddPop"
      ADDRESS ISPEXEC "Display Panel(GENIELSL)"
      ADDRESS ISPEXEC "RemPop"
      SELECT
        WHEN (genielsl = "/") THEN DO
          ZERRALRM = "YES"
          ZERRHM = "*"
          ZERRSM = "No way!"
          ZERRLM = "Asking for recursive help is inexscuable."
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        END
        Otherwise Do
          geniesel = To_Uppercase(genielsl)
          function_rc = line_selection()
        END
      END
    END
    WHEN (GENIESEL = "I") THEN DO
      fetchitm = genieitm
      fetchsel = "I"
      call_rc = itemize_detail()
    END
    WHEN (GENIESEL = "P") THEN DO
      fetchitm = genieitm
      call_rc = preview_detail()
    END
    WHEN (GENIESEL = "+") | (Geniesel = "E") THEN DO
      IF (Length(genieitm) = 8) THEN DO
        ZERRALRM = "YES"
        ZERRHM = "*"
        ZERRSM = "PRESS HELP"
        ZERRLM = "You cannot expand a topic. Request denied!"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      END
      ELSE DO
        priorsel = geniesel
        genieexp = STRIP(genieitm,"B"," ")
        exp_len = Length(genieexp) + 2
        call_rc = build_my_table()
        exp_len = 0
      END
    END
    WHEN (GENIESEL = "*") THEN DO
      IF (Length(genieitm) = 8) THEN DO
        ZERRALRM = "YES"
        ZERRHM = "*"
        ZERRSM = "PRESS HELP"
        ZERRLM = "You cannot expand a topic. Request denied!"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      END
      ELSE DO
        geniekey = "*"
        genieexp = STRIP(genieitm,"B"," ")
        exp_len = Length(genieexp)
        call_rc = build_my_table()
        exp_len = 0
      END
    END
    WHEN (GENIESEL = "-") | (geniesel = "U") THEN DO
      IF (Length(genieitm) = 8) THEN DO
        ZERRALRM = "YES"
        ZERRHM = "*"
        ZERRSM = "PRESS HELP"
        ZERRLM = "You cannot unexpand (shrink) a topic." ,
          "Request denied!"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      END
      ELSE DO
        genieexp = genieitm
        exp_len = Length(genieexp)
        call_rc = unexpand_table()
      END
    END
    Otherwise Do
    END
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Process the full member list.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Search_Pds_Member:
  wish_mbr = Strip(genieitm,"T"," ")
  reason1 = "Searching" wish_mbr
  ADDRESS ISPEXEC "CONTROL DISPLAY LOCK"
  ADDRESS ISPEXEC "DISPLAY PANEL(GENIEBAR)"
  msg_rc = MSG("OFF")
  "ALLOC FILE(GENIE) DATASET('"wish@dsn"("wish_mbr")') SHR REUSE"
  alloc_rc = RC
  msg_rc = MSG("ON")
  IF (alloc_rc <> 0) THEN DO
    RETURN 0
  END
  "EXECIO * DISKR GENIE (STEM wishtext. FINIS)"
  diskr_rc = RC
  "FREE FILE(GENIE)"
  IF (diskr_rc <> 0) THEN DO
    RETURN 0
  END
  wishblob = ""
  DO wx = 1 to wishtext.0
    wishtext = STRIP(SUBSTR(wishtext.wx,2),"B"," ")
    wishblob = wishblob wishtext
  END
  IF (POS(To_Uppercase(geniefnd),To_Uppercase(wishblob)) > 0) THEN DO
    ADDRESS ISPEXEC,
      "TBADD GENIETBL ORDER"
    blobfound = 1
    IF (first_item = "") THEN DO
      first_item = wish_mbr
    END
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Break up a string into a smaller length.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
chop_string_to_length:
  ts_len = Length(this_string)
  IF (ts_len <= strglen) THEN DO
    return_string = this_string
    this_string = ""
    RETURN return_string
  END
  too_long = ""
  good_long = ""
  num_words = Words(this_string)
  a_space = ""
  Do word_ctr = 1 to num_words
    next_word = Word(this_string,1)
    IF (Length(next_word) > strglen) THEN DO
      IF (good_long <> "") THEN DO
        RETURN good_long
      END
      ELSE DO
        return_string = Left(this_string,strglen)
        this_string = Substr(this_string,(strglen + 1))
        RETURN return_string
      END
    END
    too_long = too_long""a_space""next_word
    line_len = Length(too_long)
    IF (line_len > strglen) THEN DO
      RETURN good_long
    END
    good_long = good_long""a_space""next_word
    a_space = " "
    this_string = Strip(DelStr(this_string,1,Length(next_word)),"L"," ")
  END
  RETURN good_long

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Pad a string to a desired length.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
fill_string:
  Parse arg padlen , padstring
  IF (Length(padstring) > padlen) THEN DO
    SAY "ABORT"
    RETURN Left(padstring,padlen)
  END
  IF (Length(padstring) = padlen) THEN DO
    RETURN padstring
  END
  filllen = padlen - Length(padstring)
  RETURN Left(padstring copies(" ",filllen),padlen)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Add a line to the current member.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
add_line:
  IF (file@txt = "") THEN DO
    file@txt = " "
  END
  IF (type_line = "ERROR") THEN DO
    SAY "add_line: ERROR" file@txt
    RETURN 0
  END
  Address IsrEdit,
    "LINE_BEFORE" next_line "=" type_line "(file@txt)"
  IsrEdit_rc = RC
  IF (IsrEdit_rc <> 0) THEN DO
    zedsmsg = "Insert error, RC("IsrEdit_rc")"
    zedlmsg = "Really, text has a problem," type_line ":" file@txt
    ADDRESS ISPEXEC "setmsg msg(ISRZ000)"
    return_code = 1
  END
  IF (type_line = "DATALINE") THEN DO
    next_line = next_line + 1
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Process the selected wish.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
fetch_the_wish:
  filename_in = "'"Strip(wish@dsn,"B","'")"("fetchitm")'"
  insmbr_rc = SysDsn(filename_in)
  IF (Pos("I",debuglvl) > 0) THEN DO
    SAY "fetch_the_wish:      SysDsn:" insmbr_rc
  END
  IF (insmbr_rc <> "OK") THEN DO
    ZERRSM = "Not found"
    ZERRLM = "The" fetchitm "wish member was not found."
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return_code = 4
    RETURN return_code
  END
  "Alloc FILE(WISH) SHR REUSE",
    "DATASET('"wish@dsn"("fetchitm")')"
  alloc_rc = RC
  IF (alloc_rc <> 0) THEN DO
    SAY "Allocation of the wish file failed, RC="alloc_rc
    RETURN 16
  END
  "Execio * DISKR WISH (Stem itemize. Finis)"
  diskr_rc = RC
  "Free FILE(WISH)"
  IF (diskr_rc <> 0) THEN DO
    ZERRSM = "DISKR!"
    ZERRLM = "WISH diskr error:" diskr_rc
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return_code = 16
    RETURN return_code
  END
  ins@text = starter_line
  Address IsrEdit,
    "LINE_AFTER" next_line "= DATALINE (ins@text)"
  next_line = next_line + 1
  file@txt = "Your" fetchitm "wish begins below:"
  type_line = "INFOLINE"
    IF (fetchsel <> "I") THEN DO
      call_rc = add_line()
    END
  geniesrc = ""
  geniekwd = ""
  genietle = ""
  genientr = ""
  geniedte = ""
  genieweb = ""
  genieurl = ""
  geniecpy = ""
  Address IsrEdit,
    "LABEL" next_line "= .DELME 0"
  Do rec$idx = 1 To itemize.0
    Parse Var itemize.rec$idx id@type +1 file@txt
    id@type = To_Uppercase(id@type)
    file@txt = Strip(file@txt,"T"," ")
    SELECT
      WHEN (id@type = "@") THEN DO
        IF (geniecpy = "") THEN DO
          geniecpy = file@txt
        END
        ELSE DO
          geniecpy = geniecpy" "file@txt
        END
        Iterate
      END
      WHEN (id@type = "#") Then Iterate
      WHEN (id@type = "*") Then Iterate
      WHEN (id@type = "B") Then type_line = "INFOLINE"
      WHEN (id@type = "D") Then type_line = "DATALINE"
      WHEN (id@type = "E") THEN DO
        IF (genientr = "") THEN DO
          genientr = file@txt
        END
        ELSE DO
          genientr = genientr" "file@txt
        END
        Iterate
      END
      WHEN (id@type = "I") Then type_line = "INFOLINE"
      WHEN (id@type = "K") THEN DO
        IF (geniekwd = "") THEN DO
          geniekwd = file@txt
        END
        ELSE DO
          geniekwd = geniekwd" "file@txt
        END
        Iterate
      END
      WHEN (id@type = "M") Then type_line = "MSGLINE"
      WHEN (id@type = "N") Then type_line = "NOTELINE"
      WHEN (id@type = "R") THEN DO
        SELECT
          WHEN (To_lowercase(file@txt) = "system_symbols") THEN DO
            routine_rc = system_symbols()
            Iterate
          END
          Otherwise Do
            type_line = "INFOLINE"
          END
        END
      END
      WHEN (id@type = "S") THEN DO
        IF (geniesrc = "") THEN DO
          geniesrc = file@txt
        END
        ELSE DO
          geniesrc = geniesrc" "file@txt
        END
        Iterate
      END
      WHEN (id@type = "T") THEN DO
        IF (genietle = "") THEN DO
          genietle = file@txt
        END
        ELSE DO
          genietle = genietle" "file@txt
        END
        Iterate
      END
      WHEN (id@type = "U") THEN DO
        IF (genieurl = "") THEN DO
          genieurl = file@txt
        END
        ELSE DO
          genieurl = genieurl""file@txt
        END
        Iterate
      END
      WHEN (id@type = "W") THEN DO
        IF (genieweb = "") THEN DO
          genieweb = file@txt
        END
        ELSE DO
          genieweb = genieweb" "file@txt
        END
        Iterate
      END
      WHEN (id@type = "X") THEN DO
        Parse Var file@txt cvarfrom " = " cvarto
        SELECT
          WHEN (To_Lowercase(cvarto) = "logon_acct") THEN DO
            ADDRESS ISPEXEC "VGet (ZACCTNUM)"
            cvarto = ZACCTNUM
          END
          WHEN (To_Lowercase(cvarto) = "mbrname") THEN DO
            ADDRESS ISREDIT "(cvarto) = MEMBER"
          END
          WHEN (To_Lowercase(cvarto) = "curdsname") THEN DO
            ADDRESS ISREDIT "(cvarto) = DATASET"
          END
          WHEN (To_Lowercase(cvarto) = "mvs_smfid") THEN DO
            cvarto = MvsVar("SYSNAME")
          END
          WHEN (To_Lowercase(cvarto) = "saf_dfltgrp") THEN DO
            IF (listuser_done = "No") THEN DO
              listuser_done = rcvt_listuser()
            END
            cvarto = saf_dfltgrp
          END
          WHEN (To_Lowercase(cvarto) = "saf_name") THEN DO
            IF (listuser_done = "No") THEN DO
              listuser_done = rcvt_listuser()
            END
            cvarto = saf_username
          END
          WHEN (To_Lowercase(cvarto) = "sysvaruid") THEN DO
            cvarto = sys_sysuid
          END
          WHEN (To_Lowercase(cvarto) = "zdate") THEN DO
            cvarto = Date("S")
          END
          Otherwise Do
            file@txt = "You must change:" file@txt
            type_line = "MSGLINE"
            call_rc = add_line()
            Iterate
          END
        END
        Address IsrEdit "C '&cvarfrom' '&cvarto' ALL"
        Iterate
      END
      WHEN (id@type = "Z") THEN DO
        IF (geniedte = "") THEN DO
          geniedte = file@txt
        END
        ELSE DO
          geniedte = geniedte" "file@txt
        END
        Iterate
      END
      WHEN (id@type = "?") THEN DO
        Parse Var file@txt cvarfrom " = " genielen " = " genieask
        IF (plib_rc <> 0) THEN DO
          plib_rc = plib_allocated()
        END
        GENIELIM = Left("Char("genielen")",11)": "Copies("+",genielen)
        genieans = ""
        ADDRESS ISPEXEC "Display Panel(GENIEASK)"
        IF (genieans <> "") THEN DO
          cvarto = Left(genieans,genielen)
          Address IsrEdit "C '&cvarfrom' '&cvarto' ALL"
        END
        Iterate
      END
      Otherwise Do
        SAY "Line id?" id@type"!"
        iterate
      END
    END
    IF (fetchsel <> "I") THEN DO
      call_rc = add_line()
    END
  END
  file@txt = "Your" fetchitm "wish was granted above."
  type_line = "INFOLINE"
  IF (fetchsel <> "I") THEN DO
    call_rc = add_line()
  END
  Address IsrEdit "delete .DELME"
  fetchsel = ""
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Prompt for the user name WHEN unable to get it from the SAF product.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
ask_for_username:
  genieask = "What is your name?"
  GENIELIM = Left("Char("genielen")",20)": "Copies("+",genielen)
  ADDRESS ISPEXEC "Display Panel(GENIEASK)"
  IF (genieans <> "") THEN DO
    saf_username = Left(genieans,genielen)
  END
  genieask = "What is your group?"
  GENIELIM = Left("Char("genielen")",8)": "Copies("+",genielen)
  ADDRESS ISPEXEC "Display Panel(GENIEASK)"
  IF (genieans <> "") THEN DO
    saf_dfltgrp = Left(genieans,genielen)
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Follow CVT to get SAF Product and then list user to get name.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rcvt_listuser:
  good_or_bad = "Bad"
  PTR2PSA  = 0                                     /* Pointer to PSA */
  CVTPTR   = STORAGE(D2X(PTR2PSA + 16),4)          /* Pointer to CVT */
  CVT      = C2D(BitAnd(CVTPTR,"7FFFFFFF"X)) /* Flip high order bit */
  JESCT    = C2d(Storage(D2x(CVT + 296),4))      /* point to JESCT  */
  CVTRAC   = C2d(Storage(D2x(CVT + 992),4))     /* point to RACF CVT */
  RCVTID   = Storage(D2x(CVTRAC),4)           /* point to RCVTID     */
                                              /* ACF2, RCVT, or RTSS */
  saf_userid = "Unknown"
  saf_dfltgrp = "Unknown"
  saf_username = "Unknown"
  SELECT
    WHEN RCVTID = "ACF2" THEN DO
      SECNAM = "CA-ACF2"  /* ACF2 is CA-ACF2     */
      saf_accessor_id = "Unknown"
      saf_accessor_name = "Uknown"
      saf_dfltgrp = "Unknown"
/* untested */
      MAKEBUF
      Queue "LIST" sys_sysuid "SECTION(ALL) PROFILE(ALL)"
      Queue "End"
      xx = OUTTRAP("acf2_back.")
      address TSO "ACF"
      xx = OUTTRAP("Off")
      DROPBUF
      IF (acf2_back.0 < 2) THEN DO
        ask_rc = ask_for_username()
      END
      ELSE DO
        Do saf_ix = 2 to acf2_back.0
          SELECT
            WHEN (Pos(sys_sysuid,acf2_back.saf_ix) = 3) THEN DO
              Parse Var acf2_back.saf_ix ,
              saf_id saf_logon_uid saf_accessor_name
              saf_accessor_name = Strip(saf_accessor_name,"T"," ")
            END
            WHEN (Pos("TSOACCT(",acf2_back.saf_ix) > 0) THEN DO
              saf_start = Pos("TSOACCT(",acf2_back.saf_ix) + 8
              saf_end = ,
                Index(acf2_back.saf_ix,")",saf_start)
              saf_lenx = saf_end - saf_start
              saf_dfltgrp = ,
                SubStr(acf2_back.saf_ix,saf_start,saf_lenx)
            END
            Otherwise Do
            END
          END
        END
      END
/* untested */
      good_or_bad = "Good"
    END
    WHEN RCVTID = "RCVT" THEN DO
      SECNAM = "RACF"     /* RCVT is RACF        */
      psaold   = Storage(D2x(548),4)
      ascbasxb = Storage(D2x(C2d(psaold)+108),4)
      asxbsenv = Storage(D2x(C2d(ascbasxb)+200),4)
      aceeptr = asxbsenv
      saf_dfltgrp = Storage(D2x(C2d(aceeptr)+30),8)
      aceeunaa = Storage(D2x(C2d(aceeptr)+100),4)
      IF (C2D(aceeunaa) > 0) THEN DO
        aceeunal = Storage(D2x(C2d(aceeunaa)),1)
        aceeunam = Storage(D2x(C2d(aceeunaa) + 1),C2D(aceeunal) - 1)
        saf_username = Strip(aceeunam,"B"," ")
      END
      IF (saf_username = "Unknown") THEN DO
        xx = OUTTRAP("racf_back.")
        address TSO "LISTUSER" sys_sysuid
        xx = OUTTRAP("Off")
        IF (racf_back.0 < 2) THEN DO
          ask_rc = ask_for_username()
        END
        ELSE DO
          dix = 1
          bpos = POS("USER=",racf_back.dix) + 5
          IF (bpos > 5) THEN DO
            saf_userid = SUBSTR(racf_back.dix,bpos,8)
          END
          ELSE DO
            saf_userid = "NotFound"
          END
          bpos = POS("NAME=",racf_back.dix) + 5
          IF (bpos > 5) THEN DO
            saf_username = SUBSTR(racf_back.dix,bpos,20)
          END
          ELSE DO
            ask_rc = ask_for_username()
          END
          bpos = POS("OWNER=",racf_back.dix) + 6
          IF (bpos > 6) THEN DO
            saf_owner = SUBSTR(racf_back.dix,bpos,8)
          END
          ELSE DO
            saf_owner = "NotFound"
          END
          bpos = POS("CREATED=",racf_back.dix) + 8
          IF (bpos > 8) THEN DO
            saf_created = SUBSTR(racf_back.dix,bpos,6)
          END
          ELSE DO
            saf_created = "NotFound"
          END

          dix = 2
          bpos = POS("DEFAULT-GROUP=",racf_back.dix) + 14
          IF (bpos > 14) THEN DO
            saf_dfltgrp = SUBSTR(racf_back.dix,bpos,8)
          END
          ELSE DO
            saf_dfltgrp = "NotFound"
          END

          good_or_bad = "Good"
        END
      END
    END
    WHEN RCVTID = "RTSS" THEN DO
      SECNAM = "TopSecret" /* RTSS is Top Secret */
/* untested */
      xx = OUTTRAP("tss_back.")
      address TSO "TSS LIST("sys_sysuid")"
      xx = OUTTRAP("Off")
      IF (tss_back.0 < 4) THEN DO
        ask_rc = ask_for_username()
      END
      ELSE DO
        Parse Var records.2 . " = " saf_userid " " ,
          . " = " saf_username
        saf_username = Strip(saf_username,"T"," ")
        Do tss_ix = 2 to records.0
          SELECT
            WHEN (Pos("DFLTGRP    =",records.tss_ix) > 0) THEN DO
              Parse Var records.tss_ix  . " = " saf_dfltgrp " " .
              tss_ix = records.0
            END
            Otherwise Do
            END
          END
        END
      END
/* untested */
      good_or_bad = "Good"
    END
    Otherwise Do
      SECNAM = RCVTID
      ask_rc = ask_for_username()
    END
  END
  RETURN good_or_bad

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 System Symbols information sub-routine.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
/*********************************************************************/
/* Find System Symbols  - ASASYMBP MACRO                             */
/*  ECVT+X'128' = ECVTSYMT                                           */
/*  2nd half word = # of symbols , after that each entry is 4 words  */
/*  1st word = offset to symbol name                                 */
/*  2nd word = length of symbol name                                 */
/*  3rd word = offset to symbol value                                */
/*  4th word = length of symbol value                                */
/*********************************************************************/
system_symbols:
  PTR2PSA  = 0                                     /* Pointer to PSA */
  CVTPTR   = STORAGE(D2X(PTR2PSA + 16),4)          /* Pointer to CVT */
  CVT      = C2D(BitAnd(CVTPTR,"7FFFFFFF"X) ) /* Flip high order bit */
  ECVT = C2d(Storage(D2x(CVT + 140),4))          /* point to CVTECVT */
  ECVTSYMT = C2d(Storage(D2x(ECVT + 296),4))    /* point to ECVTSYMT */
  NUMSYMBS = C2d(Storage(D2x(ECVTSYMT + 2),2))  /* number of symbols */
  type_line = "DATALINE"
  Do I = 1 to NUMSYMBS
    SOFF = I*16-16
    NAMOFF  = C2d(Storage(D2x(ECVTSYMT+4+SOFF),4))  /*offset to name */
    NAMLEN  = C2d(Storage(D2x(ECVTSYMT+8+SOFF),4))  /*length of name */
    VALOFF  = C2d(Storage(D2x(ECVTSYMT+12+SOFF),4)) /*offset to value*/
    VALLEN  = C2d(Storage(D2x(ECVTSYMT+16+SOFF),4)) /*length of value*/
    SYMNAME = Storage(D2x(ECVTSYMT+4+NAMOFF),NAMLEN) /*symbol name   */
    IF VALLEN > 0 THEN DO
      symval = Storage(D2x(ECVTSYMT+4+VALOFF),VALLEN) /* symbol value */
      symname = Strip(symname,"B"," ")
      symname = Strip(symname,"B",".")
      symname = Strip(symname,"B","&")
      file@txt = "//"Left(SYMNAME,8," ") "SET" symname"='"symval"'"
      call_rc = add_line()
    END /* IF VALLEN > 0 */
  END  /* do NUMSYMBS */
  RETURN s_symbol.0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Read a WISH to get information details.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
itemize_detail:
  call_rc = fetch_the_wish()
  IF (call_rc > 0) then RETURN call_rc
  strglen = 80
  geniestf = ""
  this_string = "Source member selected is:" fetchitm
    partial_string = chop_string_to_Length()
    partial_string = fill_string(strglen, partial_string)
    geniestf = geniestf""partial_string
  IF (geniesrc <> "") THEN DO
    this_string = "Source ID:" geniesrc
    Do While (this_string <> "")
      partial_string = chop_string_to_Length()
      partial_string = fill_string(strglen, partial_string)
      geniestf = geniestf""partial_string
    END
  END
  IF (geniekwd <> "") THEN DO
    this_string = "Also Known As (AKA) keywords:" geniekwd
    Do While (this_string <> "")
      partial_string = chop_string_to_Length()
      partial_string = fill_string(strglen, partial_string)
      geniestf = geniestf""partial_string
    END
  END
  IF (genientr <> "") THEN DO
    this_string = "Entered by:" genientr
    Do While (this_string <> "")
      partial_string = chop_string_to_Length()
      partial_string = fill_string(strglen, partial_string)
      geniestf = geniestf""partial_string
    END
  END
  IF (geniedte <> "") THEN DO
    this_string = "Dated:" geniedte
    Do While (this_string <> "")
      partial_string = chop_string_to_Length()
      partial_string = fill_string(strglen, partial_string)
      geniestf = geniestf""partial_string
    END
  END
  IF (genieweb <> "") THEN DO
    this_string = genieweb
    Do While (this_string <> "")
      partial_string = chop_string_to_Length()
      partial_string = fill_string(strglen, partial_string)
      geniestf = geniestf""partial_string
    END
  END
  IF (genieurl <> "") THEN DO
    this_string = genieurl
    Do While (this_string <> "")
      partial_string = chop_string_to_Length()
      partial_string = fill_string(strglen, partial_string)
      geniestf = geniestf""partial_string
    END
  END
  IF (geniecpy <> "") THEN DO
    this_string = "Copyright @" geniecpy
    Do While (this_string <> "")
      partial_string = chop_string_to_Length()
      partial_string = fill_string(strglen, partial_string)
      geniestf = geniestf""partial_string
    END
  END
  partial_string = Copies(" ",strglen)
  geniestf = geniestf""partial_string
  partial_string = fill_string(strglen, "Description")
  geniestf = geniestf""partial_string
  IF (genietle <> "") THEN DO
    this_string = genietle
    Do While (this_string <> "")
      partial_string = chop_string_to_Length()
      partial_string = fill_string(strglen, partial_string)
      geniestf = geniestf""partial_string
    END
  END
  geniestf = geniestf""Copies(" ",strglen)
  center_text = "End of item's information."
  halves = (strglen - Length(center_text)) / 2
  Parse var halves half"." . halfknots
  partial_string = ,
    Left(Copies("-",half)""center_text""Copies("-",half),strglen)
  geniestf = geniestf""partial_string

  geniestf = geniestf""Copies(" ",strglen)

  geniepfk = PFKey_retrieve("End")
  center_text = ,
    "Press the END PFKey <"geniepfk"> to exit."
  halves = (strglen - Length(center_text)) / 2
  Parse var halves half"." . halfknots
  partial_string = ,
    Left(Copies("-",half)""center_text""Copies("-",half),strglen)
  geniestf = geniestf""partial_string
  info_rc = 0
  Do While (info_rc = 0)
    ADDRESS ISPEXEC "Display Panel(GENIEINF)"
    info_rc = RC
  END
  drop itemize.
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Read a WISH to get information details.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
preview_detail:
  filename_in = "'"Strip(wish@dsn,"B","'")"("fetchitm")'"
  ADDRESS ISPEXEC "View" ,
    "DATASET("filename_in")"
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Retrieve the 24 PFKeys and see which might match the argument.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
PFKey_retrieve:
  Parse Upper Arg pfk
  ADDRESS ISPEXEC "VGET (ZPF01, ZPF02, ZPF03, ZPF04, ZPF05, ZPF06)"
  ADDRESS ISPEXEC "VGET (ZPF07, ZPF08, ZPF09, ZPF10, ZPF11, ZPF12)"
  ADDRESS ISPEXEC "VGET (ZPF13, ZPF14, ZPF15, ZPF16, ZPF17, ZPF18)"
  ADDRESS ISPEXEC "VGET (ZPF19, ZPF20, ZPF21, ZPF22, ZPF23, ZPF24)"
  pf_key = WordPos(pfk,  to_Uppercase( ,
                         ZPF01 ZPF02 ZPF03 ZPF04 ZPF05 ZPF06 ,
                         ZPF07 ZPF08 ZPF09 ZPF10 ZPF11 ZPF12 ,
                         ZPF13 ZPF14 ZPF15 ZPF16 ZPF17 ZPF18 ,
                         ZPF19 ZPF20 ZPF21 ZPF22 ZPF23 ZPF24) )
  pf_key = "PF"Right("00"pf_key,2)
  IF (pf_key = "00") then pf_key = "N/A"
  RETURN pf_key

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase: Parse arg myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN Translate(myarg,lowercase_letters,uppercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to uppercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Uppercase: Parse arg myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN Translate(myarg,uppercase_letters,lowercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 FUNCTION TO TURN A CHARACTER STRING INTO BINARY BITS.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
C2B: Procedure Expose BITS
  DATA = ARG(1)
  IF (BITS.F <> "1111") THEN DO
    BITS.0="0000"; BITS.1="0001"; BITS.2="0010"; BITS.3="0011"
    BITS.4="0100"; BITS.5="0101"; BITS.6="0110"; BITS.7="0111"
    BITS.8="1000"; BITS.9="1001"; BITS.A="1010"; BITS.B="1011"
    BITS.C="1100"; BITS.D="1101"; BITS.E="1110"; BITS.F="1111"
  END
  dx = C2X(DATA)
  BS=""
  Do I=1 TO LENGTH(dx)
    Q=SUBSTR(dx,I,1)
    BS=BS""BITS.Q
  END
  BS = STRIP(BS,"B"," ")
  RETURN BS

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Access the ACEE and get user and group connections.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rcvt_acee:
  psaold   = Storage(D2x(548),4)             /* Pointer to curr ASCB */
  ascbasxb = Storage(D2x(C2d(psaold)+108),4)     /* Get ASXB address */
  asxbsenv = Storage(D2x(C2d(ascbasxb)+200),4)   /* Get ACEE address */
  aceeptr = asxbsenv
  aceeacee = Storage(D2x(C2d(aceeptr)+0),4)        /* get eyecatcher */
  user_special = "?"
  saf_connect = ""
  IF (aceeacee <> "ACEE") THEN DO
    SAY "No ACEE"
    RETURN 0
  END

  aceeflg1 = Storage(D2x(C2d(aceeptr)+38),1)                 /* flag */
  IF (BitAnd(aceeflg1,"80"X) = "80"x) THEN DO
    user_special = "YES"
  END
  ELSE DO
    user_special = "No"
  END

  aceeflg3 = Storage(D2x(C2d(aceeptr)+40),1)                 /* flag */
  aceeuser_flag3 = c2b(aceeflg3)
  IF (SubStr(aceeuser_flag3,1,1) = 1) THEN DO
    aceecgrp = Storage(D2x(C2d(aceeptr)+108),4)   /* addr group list */
    aceeeyec = Storage(D2x(C2d(aceecgrp)+00),4)   /* addr group list */
    IF (aceeeyec <> "CGRP") THEN DO
      SAY "Major error on CGRP"
      RETURN 0
    END
    aceecqty = Storage(D2x(C2d(aceecgrp)+8),2)            /* quantity */
    cgrp_pos = 32
    cgrp_eyecatcher = Storage(D2x(C2d(aceecgrp)+cgrp_pos),4)
    Do gix = 1 to c2d(aceecqty)
      cgrp_item = Storage(D2x(C2d(aceecgrp)+cgrp_pos),8)
      saf_connect = saf_connect""cgrp_item" "
      cgrp_pos = cgrp_pos + 24
    END
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Allocate a temporary PDS and load dynamically generated panels.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
plib_allocated:
  IF (plib_rc = 0) Then RETURN 0

  panel_dd = "BULK"Right("0000"RANDOM(99999),4)
  "ALLOC NEW DEL F("panel_dd") DSO(PO) DIR(1) SP(3,3) TRACK",
         "REUSE RECFM(F B) BLKSIZE(0) LRECL(80) UNIT(SYSALLDA)"
  alloc_rc = RC
  IF (alloc_rc <> 0) THEN DO
    SAY "Allocation of BULK dd failed, rc("alloc_rc")."
    RETURN alloc_rc
  END
  ADDRESS ISPEXEC,
    "LMINIT DATAID(TMPPNL) ENQ(EXCLU) DDNAME("panel_dd")"
  lminit_rc = RC
  IF (lminit_rc <> 0) THEN DO
    SAY "Trouble with LMINIT on TMPPNL, RC("lminit_rc")."
    return_code = lminit_rc
    RETURN return_code
  END
  Signal On Syntax Name End_Of_Code
  @search = "/*PLIB"
  a_ix = get_sigl_near_plib()            /* Get near PLIB using SIGL */
  Do Until srcline = "/*PLIB"            /* Find PLIB */
    srcline = sourceline(a_ix)
    a_ix = a_ix + 1
  END
  srcline = sourceline(a_ix)
  Signal On Syntax Name End_Of_Code
  @search = "PLIB*/"
  Do Until (srcline = "PLIB*/")
    SELECT
      WHEN (Left(srcline,6) = "PANEL ") THEN DO
        Parse var srcline . panelname .
        ADDRESS ISPEXEC,
          "LMOPEN DATAID(&tmppnl) OPTION(OUTPUT)"
      END
      WHEN (srcline = "PANELEND") THEN DO
        ADDRESS ISPEXEC,
          "LMMADD DATAID(&TMPPNL) MEMBER("panelname")"
        ADDRESS ISPEXEC,
          "LMClose DATAID(&tmppnl)"
        lmclose_rc = RC
      END
      Otherwise Do
        ADDRESS ISPEXEC,
          "LMPUT DATAID(&TMPPNL) MODE(INVAR)" ,
          "DATALOC(SRCLINE) DATALEN(80)"
        lmput_rc = RC
      END
    END
    a_ix = a_ix + 1
    srcline = sourceline(a_ix)
  END
  Signal Off Syntax
  ADDRESS ISPEXEC,
    "LIBDEF ISPPLIB LIBRARY ID("panel_dd") STACK"
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
Panel_def thru /*PLIB absolutley MUST remain in the same sequence. */
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
get_sigl_near_plib:
  Signal On Syntax
  RETURN next_line()
next_line:
  RETURN sigl+4

/*PLIB
PANEL GENIEASK
)ATTR DEFAULT(%+_)
 %   TYPE(TEXT) INTENS(HIGH) Caps(Off)
 +   TYPE(TEXT) INTENS(LOW) Caps(Off)
 _   TYPE(INPUT) INTENS(Low) CAPS(Off) JUST(LEFT) Hilite(UScore)
)BODY Expand(||)
%|-| GENIE has a question for you.|-|
%Command ===>_ZCMD                                                             #
+
%&GENIEASK
+Your answer:_GENIEANS
%&GENIELIM
+
+Search string: &geniefnd
+
)INIT
)REINIT
)PROC
VER(&GENIEANS,LEN,LE,&GENIELEN)
)END
Contact:  "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
PANELEND
PANEL GENIEBAR
)ATTR DEFAULT(%+_)
  % TYPE(TEXT) INTENS(HIGH)
  + TYPE(TEXT) INTENS(LOW)
  _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)
)BODY WIDTH(80) Expand(||) WINDOW(80,12)
%| | GENIE Search in progress | |
+
+&Reason1
+
+Search string: &geniefnd
+
)INIT
)PROC
)END
Contact:  "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
PANELEND
PANEL GENIEINF
)ATTR DEFAULT(%+_)
 %   TYPE(TEXT) INTENS(HIGH) Caps(Off)
 +   TYPE(TEXT) INTENS(LOW) Caps(Off)
 _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) Hilite(UScore)
 $ Type(Output) Caps(Off) Intens(Low) Color(Green)
 ? TYPE(PIN)                         /* panel instruction line       */
 # TYPE(NT)                          /* normal text attribute        */
 ! TYPE(DT)                          /* description text             */
 @ AREA(Dynamic) Scroll(On) Extend(On) /* extendable scrollable area */
)BODY Expand(||)
%|-| GENIE Wish-list Member Description |-|
#
%Information for &FETCHITM follows:
#
|-|
@GENIESTF                                                                      @
)INIT
.HELP = GENIEHLP
)REINIT
)PROC
)HELP
)END
Contact:  "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
PANELEND
PANEL GENIELSL
)ATTR DEFAULT(%~_)
 %   TYPE(TEXT) INTENS(HIGH) Caps(Off)
 ~   TYPE(TEXT) INTENS(LOW) Caps(Off)
 _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) Hilite(UScore)
)BODY Expand(||) Width(78)
%|-| GENIE Line Commands |-|
~
%Line Command ==>_z~
%Line Function
~---- |-|
%  S |Selects a wish.
%  P |Preview a wish.
%/   |Brings up this pop-up panel.
%+ E |Expands any sub wishes to the displayed table.
%- U |Unexpands all sub wishes from the displayed table.
%  I |Shows additional information about the wish.
~---- |-|
~
)INIT
.ZVARS = 'GENIELSL'
)REINIT
)PROC
)HELP
)END
Contact:  "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
PANELEND
PANEL GENIEPRI
)ATTR DEFAULT(%~_) FORMAT(MIX)
 /* % TYPE(TEXT) INTENS(HIGH)                                         */
 ~ TYPE(TEXT) INTENS(LOW)
 /* _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)                    */
 _ TYPE(Input)  Intens(High) Caps(Off) Just(LEFT) Hilite(uscore)
 # Type(Output) Intens(High) Caps(Off) Just(Left) Pas(On) Hilite(UScore)
 @ Type(Output) Intens(High) Caps(Off) Just(Left)
 $ Type(Output) Intens(Low)  Caps(Off) Just(Left) PAS(On) Hilite(Uscore)
)BODY EXPAND(||) Width(&zscreenw)
%|-| GENIE Topic Selector |-|
%COMMAND ==>_Z | |%SCROLL ==>_ZSCR~
%
#Sort~:&dsplfld #Order~:_z~ String:_geniefnd | |#Keyword~#Search~
@Z   %:~&GENIEHD2
%S~=Select %+~=Expand %-~=Unexpand %I~=Information %*~=Full expand %P~=Preview
~Sel  TOPIC CH  ID (Topic Chapter Item)
~---  ----  --  --  |-|
)Model
~_Z~ @Z   ~@Z ~@Z ~$GENIEDES
)INIT
.ZVARS = 'ZCMD, GENIESRT, GENIEHD1, +
   GENIESEL, GENIETPC, GENIECHA, GENIESEQ'
.CURSOR = 'ZCMD'
&Sort = 'Sort'
&Order = 'Order'
&Keyword = 'Keyword'
&Search = 'Search'
IF (&initzcmd = '?')
  &ZCMD = &initzcmd
)REINIT
)PROC
)FIELD
Field(GENIEDES) Len(255) SCROLL(On)
)PNTS
FIELD(Sort)     VAR(ZCMD) VAL('SORT')
FIELD(Order)    VAR(ZCMD) VAL('ORDER')
FIELD(Keyword)  VAR(ZCMD) VAL('FINDKYWD')
FIELD(Search)   VAR(ZCMD) VAL('SRCHTEXT')
)END
Contact:  "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
PANELEND
PANEL GENIEZSL
)ATTR DEFAULT(%~_)
 %   TYPE(TEXT) INTENS(HIGH) Caps(Off)
 ~   TYPE(TEXT) INTENS(LOW) Caps(Off)
 _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) Hilite(UScore)
)BODY Expand(||)
%|-| GENIE Primary Commands |-|
~
%Primary Command ==>_geniezsl
%Primary            Function
~------------------ |-|
%Select {wish}     ~Selects a wish.
%?                 ~Brings up this pop-up panel.
%+ Expand {level}  ~Adds chapter or items to the displayed table.
%*                 ~Adds chapters and items to the displayed table.
%- Unexpand {level}~Removes all sub wishes from the displayed table.
%Info {wish}       ~Shows additional information about the wish.
%Cancel            ~Just another way to end without making a wish.
%Find {string}     ~Finds your string in Descriptions and As Known
%                  ~As (AKA) keyword fields.
%Keyword {string}  ~Finds your string in Descriptions and As Known
%                  ~As (AKA) keyword fields.
%Search {string}   ~Slower search of all text.
%Locate            ~Scroll to the location of an item.
%Sort              ~Toggles between item and description fields.
%Order             ~Toggles between Ascending and Descending sequence.
%Refresh           ~Reread the configuration file and rebuild table.
~---------- |-|
~
)INIT
)REINIT
)PROC
)HELP
)END
Contact:  "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
PANELEND
PLIB*/

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Should never get here.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
End_Of_Code :
  Signal Off Syntax
  SAY "End of source found before" @search "was found."
Syntax:
  Signal Off Syntax
  RETURN 4
