STSAD1605
KAMASPZAP
Tz/OS MVS Diagnosis -Tools and Service Aids
T-Chapter 16: SPZAP
T-SPZAP control statements
E"Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20170920-060955
*
@IBM Corporation
*
Biea2v1c2.pdf
BGA22-7589-19 z/OS MVS Diagnosis
B-Tools and Service Aids
BVersion 1 Release 13
*
NTools and Service Aids
N======================
NChapter 16: SPZAP
N-----------------
NSPZAP control statements
N------------------------
NSPZAP control statements (entered either through the user's input stream
Nin the JCL or through the system console) define the processing
Nfunctions to be performed during a particular run of SPZAP.
N
NTo enter other SPZAP control statements through the system console, you
Ncan use the CONSOLE control statement.
N
MNote: SPZAP does not fold lowercase input to uppercase; be sure to enter
Mvalues in the correct case.
N
NThe control statements that define the running of SPZAP are:
N------------------------------------------------------------
D  ABSDUMP|ABSDUMPT}{startaddr stopaddr | startrec stoprec | member | ALL
I    Note: When the SYSLIB DD statement describes a data set placed in an
I          extended address volume (EAV), the startaddr and stopaddr
I          values must be specified in hexadecimal in the form CCCCcccHRR,
I          where CCCCccc is referred to as a 28-bit cylinder address.
N
I      -> CCCC is the 16 low order bits of the cylinder number.
I      -> ccc is the 12 high order bits of the cylinder number.
I      -> H is the track number.
I      -> RR is the record number.
I
I    startaddr: cccchhhhrr | CCCCcccHRR
I      The absolute direct access device address of the first record to
I      be dumped. This address must be specified in hexadecimal in the
I      form cccchhhhrr (cylinder, track and record numbers). This
I      parameter must be exactly 10 digits long.
N
I    stopaddr: cccchhhhrr | CCCCcccHRR
I      The absolute direct access device address of the last record to be
I      dumped, and it must be in the same format as the start address.
I      Both addresses must be specified when this method of dumping
I      records is used, and both addresses must be within the limits of
I      the data set defined by the SYSLIB DD statement.
N
I    startrec: nnnnnnnn
I      The value of the first relative record of a member of a PDSE data
I      library to display. This parameter can be 1 to 8 digits long. The
I      first record of a member has a startrec value of 1.
N
I    stoprec: nnnnnnnn
I      The value of the last relative record of a member of a PDSE data
I      library to display. This parameter can be 1 to 8 digits long. If
I      the value of stoprec specifies a relative record value greater
I      than that of the last physical record, printing stops after the
I      last record of the member is printed. If the value of stoprec is
I      less than the value of startrec, no records are displayed.
N
I    member:
I      The name of a member of a PDS or a PDSE, as specified by the
I      SYSLIB DD statement. The name can refer to a load module member of
I      a PDS or a member of a PDSE data library. In each case, the entire
I      member is dumped when this variable is specified. (Use DUMP/DUMPT
I      for program object members of a PDSE.)
N
I    ALL:
I      Specifies that the entire data set defined by the SYSLIB DD
I      statement is to be dumped.
N
D  BASE xxxxxx
I    Used by SPZAP to adjust offset values that are to be specified in
I    any subsequent VERIFY and REP statements. This statement should be
I    used when the offsets given in the VERIFY and REP statements for a
I    CSECT are to be obtained from an assembly listing in which the
I    starting address of the CSECT is not location zero.
I
I    xxxxxx: A 6-character hexadecimal offset that is to be used as a
I            base for subsequent VERIFY and REP operations. This value
I            should reflect the starting assembly listing address of the
I            CSECT being inspected or modified.
N
D  CCHHR record address
I    Identifies a physical record on a direct access device that is to be
I    modified or verified. The record must be in the data set defined by
I    the SYSLIB DD statement. Any immediately following REP or VERIFY
I    statements will reference the data in the specified record. The
I    variable is:
I
I    record address: The actual direct access address of the record
I                    containing data to be replaced or verified. It must
I                    be specified as a 10-digit hexadecimal number in the
I                    form cccchhhhrr, where cccc is the cylinder, hhhh is
I                    the track, and rr is the record number. For example,
I                    0001000A01 addresses record 1 of cylinder 1, track
I                    10. A zero record number is incorrect and defaults
I                    to 1.
N
D  CHECKSUM Ýhhhhhhhh¨
I    Used to print or verify a fullword checksum (parity-check). All of
I    the valid hexadecimal operands since the preceding CHECKSUM
I    statement or SPZAP initialization are logically concatenated into a
I    single string divided into fullwords, the sum of which is the
I    checksum. For example, the string 12345678FACE produces the checksum
I    0D025678. Each CHECKSUM statement resets the accumulated checksum
I    value to zeros.
I
I    hhhhhhhh: 8 hexadecimal characters that are compared with the
I              checksum. If the two values are equal, a message is
I              written indicating that the checksum was correct and has
I              been reset.
N
D  Comment (*)
I    When the first non-blank character in a statement is an asterisk,
I    SPZAP recognizes the statement as a comment, used to annotate the
I    SPZAP input stream and output listing. You can specify the asterisk
I    in any position, but at least one blank space must follow the
I    asterisk.
N
D  CONSOLE
I    Indicates that SPZAP control statements are to be entered through
I    the system console.
I
I    When this statement is encountered in the input stream, the
I    following message is written to the operator:
M    AMA116A ENTER AMASPZAP CONTROL STATEMENT OR END
N
D  {DUMP|DUMPT} member Ýcsect | ALL | * ¨ Ýclass-name¨
I    Dumps a specific control section or all control sections in a load
I    module in a PDS, a program object in either a PDSE or a z/OS UNIX
I    file. DUMP produces a hexadecimal printout only, while DUMPT prints
I    the hexadecimal data, the EBCDIC translation, and the mnemonic
I    equivalent of the data.
I
I      member: The member name of the load module in a PDS or program
I              object in a PDSE that contains the control section(s) to
I              be dumped.
I
I      csect | ALL | *: Defines the name of the particular control
I                       section that is to be dumped. To dump all the
I                       CSECTs of a load module in a PDS or a program
I                       object in a PDSE, specify "ALL" instead of the
I                       CSECT name. If you omit the variable entirely,
I                       or, for program objects only, code "*", SPZAP
I                       assumes that you mean to dump only the first
I                       CSECT in the load module or program object.
I
I      class-name: Indicates, for program objects only, the class of text
I      that you want to dump. The default is B_TEXT. Specifying B_*, C_*,
I      or D_* causes SPZAP to dump all text classes beginning with the
I      string that precedes the asterisk. If you want to omit the CSECT
I      name and supply a class-name, code a single asterisk for the CSECT
I      name followed by the class-name.
N
D  IDRDATA xxxxxxxx
I    Causes SPZAP to place up to eight bytes of user data into the SPZAP
I    CSECT identification record of the load module; this is only done if
I    a REP operation associated with a NAME statement is performed and
I    the load module was processed by the linkage editor to include CSECT
I    identification records. The variable is:
I
I    xxxxxxxx: Eight (or fewer) bytes of user data (with no embedded
I              blanks) that are to be placed in the user data field of
I              the SPZAP IDR of the named load module. If more than eight
I              characters are in the variable field, only the first eight
I              characters will be used.
N
D  NAME member Ýcsect | * ¨ Ýclass-name¨
I    Identifies a CSECT in a load module member of a PDS, a program
I    object member of a PDSE, or a z/OS UNIX file that is to be the
I    object of subsequent VERIFY, REP, SETSSI, or IDRDATA operations. The
I    variables are:
I
I    member: The member name of the load module belonging to a PDS, the
I            program object belonging to a PDSE, or a z/OS UNIX file that
I            includes the CSECT that contains the data to be inspected or
I            modified. The load module or the program object must be a
I            member of the data set defined by the SYSLIB DD statement.
I
I    csect | *: The name of the particular control section that contains
I               the data to be verified or replaced. If you omit this
I               variable, or, for program objects only, code "*", SPZAP
I               assumes that the first CSECT in the load module contained
I               in a PDS, the program object contained in a PDSE, or a
I               z/OS UNIX file is the one to be used. If there is only
I               one CSECT in the load module or program object, this
I               variable is not necessary.
I
I    class-name: Indicates, for program objects only, the class of text
I                that you want to modify. The default is B_text. If you
I                want to omit the CSECT name and supply a class-name,
I                code a single asterisk for the CSECT name, followed by
I                the class-name.
N
D  NAME member
I    Identifies the member of a data library that is to be the object of
I    subsequent VERIFY, REP, ABSDUMP, ABSDUMPT or RECORD operations. The
I    variable is:
I
I    member: The member name of a data library whose contents are to be
I            displayed, verified and/or replaced.
I
N
D  RECORD nnnnnnnn
I    This statement identifies a particular record in a member of a PDSE
I    data library and must follow a NAME member statement where member
I    specifies the name of the member. The combination of NAME and RECORD
I    defines the record for which VER|VERIFY and possible REPs are to be
I    performed.
I
I    nnnnnnnn: consists of 1 to 8 decimal digits and specifies the
I              relative record of interest. Leading zeroes are ignored.
I              For example, the first record of a member may be specified
I              as 1 or 01 or 00000001.
N
D  REP offset data
I    Modifies data at a specified location in a CSECT or physical record
I    that was previously defined by the NAME, NAME/RECORD combination, or
I    CCHHR statement. The data specified on the REP statement will
I    replace the data at the record or CSECT location stipulated in the
I    offset variable field.
I
I    SPZAP issues message AMA122I to record the contents of the specified
I    location as they were before the change was made.
I
I    offset: Provides the hexadecimal displacement of data to be replaced
I            in a CSECT or data record. This displacement need not
I            address a fullword boundary, but it must be specified as a
I            multiple of two hexadecimal digits (0D, 02C8, 001C52).
I
I    data: Defines the bytes of data to be inserted at the location. As
I          with the offset variable, the number of bytes of data defined
I          must be specified as a multiple of two hexadecimal digits. If
I          desired, the data within the variable may be separated by
I          commas (never blanks); but again, the number of digits between
I          commas must also be a multiple of two.
N
D  SETSSI xxyynnnn
I    Places user-supplied system status information in the directory
I    entry for the load module member in a PDS or program object member
I    in a PDSE. The SSI entry must have been created when the load module
I    or program object member was link edited. The variable is:
I
I    xxyynnnn: Four bytes of system status information the user wishes to
I              place in the SSI field for this member. Each byte is
I              supplied as two hexadecimal digits indicating the
I              following:
I                xx - change level
I                yy - flag byte
I                nnnn - modification serial number
N
D  {VERIFY|VER} offset expected-content
I    Causes the data at a specified location within a CSECT or physical
I    record to be compared with the data supplied in the statement.
I
I    offset: The hexadecimal displacement of data to be inspected in a
I            CSECT or record.
I
I    expected-content: Defines the bytes of data that are expected at the
I                      specified location. As with the offset variable,
I                      the number of bytes of data defined must be
I                      specified as a multiple of two hexadecimal
I                      digits. If desired, the data within the parameter
I                      may be separated by commas (never blanks), but
I                      again, the number of digits between commas must
I                      also be a multiple of two.
* End of wish.
