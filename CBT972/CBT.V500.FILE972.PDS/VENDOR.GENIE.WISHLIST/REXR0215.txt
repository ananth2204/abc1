SREXR0215
Tz/OS TSO/E REXX Reference
T-Chapter 2. REXX general concepts
T-Expressions and operators
T-Comparison
E"Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20170924-092355
*
@IBM Corporation
*
Bikj4a3a0.pdf
BSA22-7790-10 z/OS TSO/E REXX Reference
BVersion 1 Release 13
*
Nz/OS TSO/E REXX Reference
N=========================
NChapter 2. REXX general concepts
N--------------------------------
N  Expressions and operators
N  -------------------------
NComparison
N----------
IMake your life easier and never use the not character as it gets
Imangled in an ASCII ftp session and the terminal emulators rarely use
Ithe shift-6 keystroke to properly use ,. You will likely get the
Icaret (Â¬) and a SYNTAX error.
I
MProgramming Using The Kenneth Tomiak Method (PUTKTM) recommends
Mcoding for a positive (TRUE) test instead of the negative test. But
Mif you feel the negative test occurs more frequently than use the
Mbackslash (\) character.
N
NThe comparison operators compare two terms and return the value 1 if
Nthe result of the comparison is true, or 0 otherwise.
N
NThe strict comparison operators all have one of the characters
Ndefining the operator doubled. The ==, \==, /==, and ,== operators
Ntest for an exact match between two strings. The two strings must be
Nidentical (character by character) and of the same length to be
Nconsidered strictly equal. Similarly, the strict comparison operators
Nsuch as >>, or ,<< carry out a simple character-by-character
Ncomparison, with no padding of either of the strings being compared.
NThe comparison of the two strings is from left to right. If one
Nstring is shorter than and is a leading substring of another, then it
Nis smaller than (less than) the other. The strict comparison operators
Nalso do not attempt to perform a numeric comparison on the two
Noperands.
N
NThe comparison operators and operations are:
N
N-> = True if the terms are equal (numerically or when padded, and so
N     forth)
N
N-> \=, ,=, /= True if the terms are not equal (inverse of =)
N
N-> > Greater than
N
N-> < Less than
N
N-> >< Greater than or less than (same as not equal)
N
N-> <> Greater than or less than (same as not equal)
N
N-> >= Greater than or equal to
N
N-> \<, ,< Not less than
N
N-> <= Less than or equal to
N
N-> \>, ,> Not greater than
N
N-> == True if terms are strictly equal (identical)
N
N-> \==, ,==, /== True if the terms are NOT strictly equal (inverse
N                 of ==)
N
N-> >> Strictly greater than
N
N-> << Strictly less than
N
N-> >>= Strictly greater than or equal to
N
N-> \<<, ,<< Strictly NOT less than
N
N-> <<= Strictly less than or equal to
N
N-> \>>, ,>> Strictly NOT greater than
N
NGuideline: Throughout the language, the not character, ,, is
Nsynonymous with the backslash (\). You can use the two characters
Ninterchangeably, according to availability and personal preference.
NThe backslash can appear in the following operators: \ (prefix not),
N\=, \==, \<, \>, \<<, and \>>.
* End of wish.
