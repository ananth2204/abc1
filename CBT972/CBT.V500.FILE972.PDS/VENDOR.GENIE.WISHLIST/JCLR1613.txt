SJCLR1613
Tz/OS JCL Reference
T-EXEC Statement -COND Parameter
E"Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20170525-100055
*
@IBM Corporation
*
NSA22-7597-16 z/OS JCL Reference
NEXEC Statement
N==============
NCOND Parameter
N--------------
NUse the COND parameter to test return codes from previous job steps
Nand determine whether to bypass this job step. You can specify one or
Nmore tests on the COND parameter, and you can test return codes from
Nparticular job steps or from every job step that has completed
Nprocessing. If any of the test conditions are satisfied, the system
Nevaluates the COND parameter as true and bypasses the job step. If
Nnone of the test conditions specified on the COND parameter are
Nsatisfied, the system evaluates the COND parameter as false and
Nexecutes the job step. The system performs the COND parameter tests
Nagainst return codes from the current execution of the job. If a test
Nreturns a previously bypassed step, the system evaluates the test as
Nfalse.
N
D//             COND= ((code,operatorÝ,stepname¨Ý.procstepname¨),
D//                   EVEN | ONLY
D//*            COND=              <=== PLEASE USE IF...THEN/ELSE/ENDIF
I                 Specify up to eight return code tests.
I                 code: Specifies a number that the system compares to
I                       the return codes from all previous steps in
I                       the job or from specific steps. code is a
I                       decimal number from 0 through 4095.
I                 operator: Specifies the type of comparison to be made
I                           to the return code. If the specified test
I                           is true, the step is bypassed.
I                           GT Greater than
I                           GE Greater than or equal to
I                           EQ Equal to
I                           LT Less than
I                           LE Less than or equal to
I                           NE Not equal to
I                 stepname: Identifies the EXEC statement of a previous
I                           job step that issues the return code to be
I                           used in the test.
M                        -> LIMITS THE TEST TO A SPECIFIC STEP.
I                        -> If you omit stepname, the code you specify
I                           is compared to the return codes from all
I                           previous steps.
M
MKenneth Tomiak remark:
M'Programming Using The Kenneth Tomiak Method' (PUTKTM-JCL) strongly
Mencourages you to forsake the use of the COND Parameter for other
Mthan EVEN and ONLY. The code,operator format will have you thinking
Mhow to bypass this step. The IF...THEN/ELSE/ENDIF Statement construct
Mwill have you thinking WHEN to execute this step. And that is how
MEVEN and ONLY function.
N
NCertain error conditions prevent the system from executing a step,
Nregardless of any requests specified through the COND parameter.
N
NExample 1: Bypass a step.
N-------------------------
NIn this example, if the return code from STEP3 is 0 through 3, the
Nsystem bypasses STEP6. If the return code is 4 or greater, the
Nsystem executes STEP6. Because neither EVEN nor ONLY is specified,
Nthe system does not execute this step if a preceding step abnormally
Nterminates.
N
D//STEP6 EXEC PGM=DISKUTIL,COND=(4,GT,STEP3)
I
IThis example is great for showing how to get yourself into trouble.
IIBM programs typically return 0 for success and an increasing
Imultiple of 4 as the severity increases. Thus the above example
Iis coded to skip the step if the previous step worked when what
Iyou more likely wanted was to skip this step if the prior step
Iwas unhappy.
I
IJOB scheduling tools are written with the belief that success
Iis better than failure. Extra handling is required to allow
Ia non-zero return code to continue. Thus trying to run a step
Iwhen the previous step failed is counter-intuitive.
I
IFor what is worth: Job scheduling tools are also not happy with
Ithe IF...THEN/ELSE/ENDIF Statement construct. You may find yourself
Ihaving to remove all uses of COND= and IF...THEN/ELSE/ENDIF
Ibefore promoting TEST JCL to production. For that reason a
I//jobname JOB COND=(0,NE) might be your next best friend.
* End of wish.
