SAMSC3001
TDFSMS AMS
T-Chapter 30.
T-Syntax for REPRO Parameters
EKenneth E. Tomiak <KenTomiak@KTomiak.org>
Z20180321-103200
*
@IBM Corporation
*
Bdgt2i2a1.pdf: SC26-7394-13: z/OS
BDFSMS Access Method Services for Catalogs
BVersion 1 Release 13
*
NAccess Method Services for Catalogs
N-----------------------------------
NChapter 30. REPRO
N-----------------
NSyntax for REPRO Parameters
N---------------------------
D  REPRO -
N
NRequired Parameters
N-------------------
D    INFILE(ddname) | /* Abbreviation: IFILE */ -
D    INDATASET(entryname) /* Abbreviation: IDS */ -
I      Identifies the source data set to be copied. If the logical
I      record length of a non-VSAM source data set is greater than
I      32760 bytes, your REPRO command will end with an error message.
I      The keys in the source data set must be in ascending order.
N
I      INFILE(ddname) /* Abbreviation: IFILE */: specifies the name of
I        the DD statement that identifies the data set to be copied or
I        the user catalog to be merged. You can copy a base cluster in
I        alternate-key sequence by specifying a path name as the data
I        set name in the DD statement.
N
I      INDATASET(entryname) /* Abbreviation: IDS */: specifies the name
I        of the entry to be copied or user catalog to be merged. If
I        INDATASET is specified, the entryname is dynamically allocated
I        with a disposition of OLD. You can copy a base cluster in
I        alternate-key sequence by specifying a path name for the
I        entryname.
N
I        If you are copying a member of a non-VSAM partitioned data set,
I        the entryname must be specified in the format:
N
I          pdsname(membername)
N
D    OUTFILE(ddname)| /* Abbreviation: OFILE */ -
D    OUTDATASET(entryname) /* Abbreviation: ODS */ -
I      identifies the target data set. If a VSAM data set defined with
I      a record length greater than 32760 bytes is to be copied to a
I      sequential data set, your REPRO command will end with an error
I      message.
N
I      Note: To avoid picking up incorrect volume information from the
I      original DD statement on a data set that has previously been
I      deleted and redefined in this invocation of IDCAMS and the FILE
I      parameter was specified on the delete, you must specify the
I      OUTDATASET keyword instead of OUTFILE. Alternatively, you can
I      issue the REPRO command in a different step from the step that
I      invoked the delete and define commands.
N
I      OUTFILE(ddname) /* Abbreviation: OFILE */: specifies the name of
I        a DD statement that identifies the target data set. For VSAM
I        data sets, the data set name can name a path. If the DD
I        statement identifies a SYSOUT data set, the attributes must
I        match those specified in "JCL DD Statement for a Target Data
I        Set".
N
I      OUTDATASET(entryname) /* Abbreviation: ODS */: specifies the name
I        of the target data set. If OUTDATASET is specified, the
I        entryname is dynamically allocated with a disposition of OLD.
I        For VSAM data sets, entryname can be that of a path.
N
NOptional Parameters
N-------------------
D    DBCS -
I      specifies that bytes in the logical record contain DBCS
I      characters. REPRO checks to ensure the DBCS data meets DBCS
I      criteria. For more information about DBCS support, see z/OS
I      DFSMS Using Data Sets. This parameter cannot be specified with
I      MERGECAT.
N
D    ENTRIES(entryname ...) | /* Abbreviation: ENT */ -
D    LEVEL(level) /* Abbreviation: LVL */ -
I      specifies the names of the entries in the source catalog to be
I      merged when MERGECAT is specified.
N
I      For TSO/E users, TSO/E will prefix the userid to the specified
I      data set name when ENTRIES is specified with an entry name
I      without the userid. The userid is not prefixed when the LEVEL
I      parameter is specified.
N
I      ENTRIES(entryname ...) /* Abbreviation: ENT */: specifies the
I        name or generic name of each entry to be merged. (See the
I        examples of generic entries following the description of the
I        LEVEL parameter.) When using a generic name with the ENTRIES
I        parameter, entries must have one qualifier in addition to those
I        specified in the command.
N
I        Note: For information concerning RACF authorization levels,
I        search Appendix A, "Security Authorization Levels". RACF
I        applies to both SMS- and non-SMS-managed data sets and
I        catalogs.
N
I      LEVEL(level) /* Abbreviation: LVL */: specifies that all entries
I        matching the level of qualification you indicated with the
I        LEVEL parameter are to be merged irrespective of the number of
I        additional qualifiers. If a generic level name is specified,
I        only one qualifier can replace the *. The * must not be the
I        last character specified in the LEVEL parameter. LEVEL(A.*)
I        will give you an error message.
N
I        The LEVEL parameter is not allowed when merging tape volume
I        catalogs.
N
I        For tape volume catalogs, search "Access Method Services Tape
I        Library Support" and "VOLUMEENTRIES parameter".
N
D    ERRORLIMIT(value) /* Abbreviation: ELIMIT */ -
I      lets you select a failure limit. Use this parameter to set a
I      limit to the number of errors REPRO copy will tolerate. The
I      default is 4, but any number from 1 to 2,147,483,647 can be
I      used.
N
D    FILE(ddname) -
I      specifies the name of a DD statement that identifies all the
I      volumes that contain the VVDSs to be updated. If you do not
I      specify FILE, VSAM will try to dynamically allocate the required
I      volumes.
N
D    FROMKEY(key) | /* Abbreviation: FKEY */ -
D    FROMADDRESS(address) | /* Abbreviation: FADDR */ -
D    FROMNUMBER(number) | /* Abbreviation: FNUM */ -
D    SKIP(number) -
I      specifies the location in the source data set where copying is
I      to start. If no value is coded, the copying begins with the first
I      logical record in the data set. You can use only one of the four
I      choices.
N
I      Use the SKIP parameter for a SAM data set.
N
I      None of these parameters can be specified if you are copying a
I      linear data set. You must copy the entire linear data set.
I      FROMKEY can be specified when copying a catalog, but none of the
I      other parameters may be used for a catalog.
N
I      The starting delimiter must be consistent with the ending
I      delimiter. For example, if FROMADDRESS is specified for the
I      starting location, use TOADDRESS to specify the ending location.
I      The same is true for FROMKEY and TOKEY, and FROMNUMBER and
I      TONUMBER.
N
I      FROMKEY(key) /* Abbreviation: FKEY */: specifies the key of the
I        first record you want copied. You can specify generic keys
I        (a portion of the key followed by *). If you specify generic
I        keys, copying begins at the first record with a key matching
I        the specified portion of the key. If you specify a key longer
I        than that defined for the data set, the data set is not copied.
I        If the specified key is not found, copying begins at the next
I        higher key.
N
I        FROMKEY can be specified only when copying an alternate index,
I        a KSDS, or a catalog.
N
I        key: Can contain 1-to-255 EBCDIC characters. A key ending in
I          X'5C' is processed as a generic key.
N
I      FROMADDRESS(address) /* Abbreviation: FADDR */: specifies the
I        relative byte address (RBA) of the first record you want
I        copied. The RBA value must be the beginning of a logical
I        record. If you specify this parameter for key-sequenced data,
I        the records are copied in physical sequential order instead of
I        in logical sequential order. FROMADDRESS:
N
I        -> Can be coded only for key-sequenced or entry-sequenced data
I           sets or components.
N
I        -> Cannot be specified when the data set is being accessed
I           through a path.
N
I        -> Cannot be specified for a key-sequenced data set with
I           spanned records if any of those spanned records are to
I           be accessed.
N
I        address: Can be specified in decimal (n) or hexadecimal (X'n').
I          The specification cannot be longer than one fullword when
I          specified in decimal.
N
I          The largest address you can specify in decimal is
I          4,294,967,295. If you require a higher value, specify it in
I          hexadecimal.
N
I      FROMNUMBER(number) /* Abbreviation: FNUM */: specifies the
I        relative record number of the first record you want copied.
I        FROMNUMBER can be specified only when you copy a relative
I        record data set.
N
I        number: Can be specified in decimal (n), hexadecimal (X'n'),
I          or binary (B'n'). The specification cannot be longer than
I          one fullword.
N
I          The largest address you can specify in decimal is
I          4,294,967,295. If you require a higher value, specify it in
I          hexadecimal.
N
D    SKIP(number) -
I      specifies the number of logical records to skip before beginning
I      to copy records. For example, if you want to copy beginning with
I      record number 500, specify SKIP(499).
N
I      SKIP should not be specified when you access the data set through
I      a path; the results are unpredictable.
N
D    INSERTSHIFT((offset1 offset2) ...) | /* Abbreviation: ISHFT */ -
D    INSERTALL /* Abbreviation: ISALL */ -
I      If DBCS is specified without INSERTSHIFT or INSERTALL, the
I      logical record is assumed to already contain SO and SI
I      characters, and REPRO will check during copying to ensure that
I      the DBCS data meets DBCS criteria.
N
I      INSERTSHIFT or INSERTALL can be specified only if DBCS is also
I      specified, and the data set being copied is not a catalog.
N
I      INSERTSHIFT((offset1 offset2) ...) /* Abbreviation: ISHFT */:
I        indicates that SO and SI characters are to be inserted in the
I        logical record during REPRO command processing. This action has
I        a permanent effect on the target data set.
N
I        offset1: Indicates the byte offset in the logical record to be
I          copied before which a SO character is to be inserted.
N
I        offset2: Indicates the byte offset in the logical record to be
I          copied after which a SI character is to be inserted. offset2
I          must be greater than offset1 and the difference must be an
I          odd number.
N
I        Offset pairs cannot overlap ranges.
N
I        The maximum number of offset pairs that can be specified is 255.
N
I      INSERTALL /* Abbreviation: ISALL */: specifies the entire logical
I        record is assumed to contain only DBCS characters. An SO
I        character is inserted at the beginning of the record and an
I        SI character is inserted at the end of the record.
N
D    MERGECAT | /* Abbreviation: MRGC */ -
D    NOMERGECAT /* Abbreviation: N0MRGC */ -
I      specifies whether entries from the source catalog are to be
I      merged with the entries of the target catalog. When merging
I      catalogs ensure that data sets whose entries are merged can
I      still be located after the merge operation. This parameter
I      cannot be specified with the DBCS parameter.
N
I      MERGECAT merges deferred generations if specified with the GDG
I      base during a merge of the entire catalog. Deferred generations
I      retain their deferred status in the target catalog. Rolled-off
I      generations are also merged during a merge of all entries.
N
I      MERGECAT can also be specified for tape volume catalogs or
I      VOLCATS. For more information on REPRO MERGECAT of VOLCATS,
I      refer to "Access Method Services Tape Library Support".
N
I      MERGECAT /* Abbreviation: MRGC */: specifies that the source
I        catalog entries are to be merged with the target catalog
I        entries and that the merged entries are to be deleted from
I        the source catalog upon a successful merge operation.
N
I        The merge operation can be restarted if an error occurs,
I        because the target catalog does not have to be empty. A
I        LISTCAT and DIAGNOSE should be run before the MERGE is
I        restarted. If the MERGE ended while processing a generation
I        data group, it might be necessary to delete that generation
I        data group from the target catalog because of duplicate data
I        set names in the source and target catalogs.
N
I        Candidate volumes are preserved. MERGECAT retains candidate
I        volume information when moving an entry from one catalog to
I        another.
N
I        For some duplicate key errors, the merge does not end, and
I        the processing of the next entry continues. However, some
I        alias associations might not be merged because of the
I        duplicate key error.
N
I        MERGECAT performs a series of DELETE NOSCRATCH and
I        DEFINE RECATALOG requests to move entries from one catalog to
I        another. For information concerning security authorization
I        levels, see Appendix A, "Security Authorization Levels".
N
I        During MERGECAT, if the target catalog name is found in the
I        VVDS, the cluster entry for the VVDS is not recreated in the
I        target catalog. You must use DEFINE CLUSTER RECATALOG to create
I        the VVDS cluster entry in the target catalog.
N
I        Note that the use of LEVEL or ENTRIES parameter will not move
I        extended aliases that use the SYMBOLICRELATE parameter to the
I        new catalog.
N
I        For more information on how aliases are processed when using
I        REPRO MERGECAT, see z/OS DFSMS: Managing Catalogs under the
I        section Splitting Catalogs or Moving Catalog Entries.
N
I        For more information on use of extended aliases see z/OS DFSMS:
I        Managing Catalogs under the section Extended Alias Support.
I        See z/OS DFSMS Managing Catalogs for additional information on
I        the integrity of RACF discrete profiles after using MERGECAT.
N
I        MERGECAT can also be specified for tape volume catalogs or
I        VOLCATS. For more information on REPRO MERGECAT of VOLCATS,
I        refer to "Access Method Services Tape Library Support".
N
I      NOMERGECAT /* Abbreviation: N0MRGC */: specifies that the source
I        catalog is to be completely copied into an empty target
I        catalog.
N
I        The empty target catalog implies that the copy operation cannot
I        be restarted if an error occurs. Before the copy operation can
I        be restarted, the target catalog must be redefined and all
I        volumes that contain objects must be restored. For VOLCAT this
I        is not applicable because they do not use VVDS. If the
I        NOMERGECAT for VOLCAT fail you only need to delete or define
I        the target VOLCAT and restart the NOMERGECAT.
N
I        After a REPRO of one catalog to another, the VVRs are changed
I        to point to the target catalog, and all subsequent processing
I        must be done under the target catalog.
N
I        Attention: Performing REPRO on a catalog while data sets are
I        open in the source catalog might result in a loss of
I        information if any of those data sets extend, or other catalog
I        updates are made. The changes might not be copied to the target
I        catalog, resulting in a mismatch between the information
I        contained in the VVDS and the new target BCS. This might cause
I        the data sets to be inaccessible or receive errors.
N
D    REPLACE | /* Abbreviation: REP */ -
D    NOREPLACE /* Abbreviation: NREP */ -
I      specifies whether a record in the source cluster (INFILE or
I      INDATASET) is to replace a record in the target cluster (OUTFILE
I      or OUTDATASET) when the source cluster is copied into the target
I      cluster.
N
I      When the source cluster is copied, its records might have keys
I      or relative record numbers identical to the keys or relative
I      record numbers of data records in the target cluster. In this
I      case, the source record replaces the target record.
I      REPLACE|NOREPLACE is not used when copying integrated catalog
I      facility catalogs because these catalogs do not use the catalog
I      unload and reload functions.
N
I      REPLACE|NOREPLACE is not applicable for VSAM targets.
N
I      REPLACE /* Abbreviation: REP */: When a key-sequenced data set
I        (other than a catalog) is copied, each source record with a
I        key matching a target record's key replaces the target record.
I        Otherwise, the source record is inserted into its appropriate
I        place in the target cluster.
N
I        When a relative record data set is copied, each source record
I        with a relative record number that identifies a data record
I        (rather than an empty slot) in the target data set replaces
I        the target data record. Otherwise, the source data record is
I        inserted into the empty slot its relative record number
I        identifies.
N
I        REPLACE cannot be used if the target data set is identified as
I        a path through an alternate index, or if the target data set is
I        a base cluster whose upgrade data set includes an alternate
I        index defined with the unique-key attribute.
N
I      NOREPLACE /* Abbreviation: NREP */: When a key-sequenced data
I        set (other than a catalog) is copied, target records are not
I        replaced by source records. For each source record whose key
I        matches a target record's key, a "duplicate record" message is
I        issued.
N
I        When a relative record data set is copied, target records are
I        not replaced by source records. For each source record whose
I        relative record number identifies a target data record instead
I        of an empty slot, a "duplicate record" message is issued.
N
I        When copying something other than a VSAM data set to a
I        sequential data set, the error limit parameter allows more than
I        four mismatches or errors.
N
D    REUSE | /* Abbreviation: RUS */ -
D    NOREUSE /* Abbreviation: NRUS */ -
I      specifies if the target data set is to be opened as a reusable
I      data set. This parameter is valid only for VSAM data sets.
N
I      REUSE /* Abbreviation: RUS */: specifies that the target data
I        set, specified with OUTFILE or OUTDATASET, is opened as a
I        reusable data set whether or not it was defined as reusable
I        with the REUSE parameter. (See the DEFINE CLUSTER command
I        description.) If the data set was defined with REUSE, its
I        high-used relative byte address (RBA) is reset to zero (that
I        is, the data set is effectively empty) and the operation
I        proceeds. When you open a reusable data set with the reset
I        option, that data set cannot be shared with other jobs.
N
I        If REUSE is specified and the data set was originally defined
I        with the NOREUSE option, the data set must be empty; if not,
I        the REPRO command ends with an error message.
N
I      NOREUSE /* Abbreviation: NRUS */: specifies that records are
I        written at the end of an entry-sequenced data set. (OUTFILE or
I        OUTDATASET must identify a nonempty data set.)
N
D    SKIPDBCSCHECK((offset1 offset2) ...) | /* Abbreviation: SKDCK */ -
D    NODBCSCHECK /* Abbreviation: NODCK */ -
I      SKIPDBCSCHECK and NODBCSCHECK cannot be specified unless DBCS is
I      also specified.
N
I      SKIPDBCSCHECK((offset1 offset2) ...) /* Abbreviation: SKDCK */:
I        indicates that characters between offset1 and offset2 are not
I        to be checked for DBCS criteria during REPRO command
I        processing.
N
I        offset1: Indicates the byte offset in the logical record to be
I          copied at which checking is to cease until offset2 is
I          reached.
N
I        offset2: Indicates the byte offset in the logical record after
I          which checking is to resume. offset2 must be greater than
I          offset1.
N
I        Offset pairs cannot overlap ranges.
N
I        The maximum number of offset pairs that can be specified is
I        255.
N
I      NODBCSCHECK /* Abbreviation: NODCK */: indicates DBCS
I        verification checking will not be done.
N
D    TOKEY(key)| /*  */
D    TOADDRESS(address)| /* Abbreviation: TADDR */
D    TONUMBER(number)| /* Abbreviation: TNUM */
D    COUNT(number)
I      specifies where copying is to end in the data set being copied.
I      You can specify only one of these parameters for a copy
I      operation. The location where copying is to end must follow the
I      location where it is to begin. If no value is coded, copying ends
I      at the logical end of the data set or component.
N
I      COUNT is the only parameter that can be specified for a SAM data
I      set.
N
I      None of these parameters can be specified if you are copying a
I      linear data set.
N
I      You must copy the entire linear data set. TOKEY can be specified
I      when copying a catalog, but none of the other parameters may be
I      used for a catalog.
N
I      The ending delimiter must be consistent with the starting
I      delimiter. For example, if FROMADDRESS is specified for the
I      starting location, use TOADDRESS to specify the ending location.
I      The same is true for FROMKEY and TOKEY, and FROMNUMBER and
I      TONUMBER.
N
I      TOKEY(key): specifies the key of the last record you want copied.
I        You can specify generic keys (a portion of the key followed
I        by *). If you specify generic keys, copying stops after the last
I        record whose key matches that portion of the key you specified
I        is copied. If you specify a key longer than the one defined for
I        the data set, the data set is not copied. If the specified key
I        is not found, copying ends at the next lower key. TOKEY can be
I        specified only when copying an alternate index, a KSDS, or a
I        catalog.
N
I        key: Can contain 1-to-255 EBCDIC characters.
N
I      TOADDRESS(address) /* Abbreviation: TADDR */: specifies the
I        relative byte address (RBA) of the last record you want copied.
I        Unlike FROMADDRESS, the RBA value does not need to be the
I        beginning of a logical record. The entire record containing
I        the specified RBA is copied.
N
I        If you specify this parameter for a KSDS, the records are
I        copied in physical sequential order instead of in logical
I        sequential order.
N
I        Use TOADDRESS with VSAM key-sequenced or entry-sequenced data
I        sets or components. TOADDRESS cannot be specified when the
I        data set is accessed through a path. TOADDRESS cannot be
I        specified for a key-sequenced data set with spanned records
I        if any of those spanned records are to be accessed.
N
I        address: can be specified in decimal (n) or hexadecimal (X'n').
I          The specification cannot be longer than one fullword.
N
I          The largest address you can specify in decimal is
I          4,294,967,295. If you require a higher value, specify it in
I          hexadecimal.
N
I      TONUMBER(number) /* Abbreviation: TNUM */: specifies the relative
I        record number of the last record you want copied. TONUMBER can
I        be specified only when you copy a relative record data set.
N
I        number: Can be specified in decimal (n), hexadecimal (X'n'),
I          or binary (B'n'). The specification cannot be longer than
I          one fullword.
N
I          The largest address you can specify in decimal is
I          4,294,967,295. If you require a higher value, specify it
I          in hexadecimal.
N
I      COUNT(number): specifies the number of logical records you want
I        copied. COUNT should not be specified when you access the data
I        set through a path; results are unpredictable.
N
D    VOLUMEENTRIES(entryname)  /* - */
D      /* Abbreviations: VOLENTRIES | VOLENT */
I      specifies the tape volume catalogs to be merged or copied. The
I      LEVEL parameter is not allowed when merging tape volume catalogs.
I      When a tape volume catalog is copied, REPRO verifies that the
I      target is a tape volume catalog.
N
NCryptographic Parameters
N------------------------
NYou can use the REPRO cryptographic parameters with the following
Nfacilities:
N
N-> IBM Programmed Cryptographic Facility (PCF) (5740-XY5)
N   Change your configuration to use the cryptographic parameters with
N   PCF.
N
N-> z/OS Integrated Cryptographic Service Facility (ICSF) (5647-A01)
N   Change your ICSF configuration to use the cryptographic parameters
N   with ICSF.
N
NFor a description of the necessary changes, see z/OS Cryptographic
NServices ICSF System Programmer's Guide.
N
D    DECIPHER( /* Abbreviation: DECPHR */ -
I      specifies that the source data set is to be deciphered as it is
I      copied to the target data set. The information from the source
I      data set header is used to verify the plaintext deciphered data
I      encrypting key supplied, or deciphered from the information
I      supplied, as the correct plaintext data encrypting key for the
I      decipher operation.
N
D      DATAKEYFILE(ddname) | /* Abbreviation: DKFILE */ -
D      DATAKEYVALUE(value) | /* Abbreviation: DKV */ -
D      SYSTEMKEY /* Abbreviation: SYSKEY */ -
I        specifies whether you, PCF, or ICSF manages keys privately.
N
I        DATAKEYFILE(ddname) /* Abbreviation: DKFILE */: specifies that
I          the key is to be managed by you, and identifies a data set
I          that contains the private data encrypting key that was used
I          to encipher the data. For ddname, substitute the name of the
I          JCL statement that identifies the data set containing the
I          private data encrypting key.
N
I        DATAKEYVALUE(value) /* Abbreviation: DKV */:
I          specifies that the key is to be managed by you, and supplies
I          the 1- to 8-byte value that was used as the plaintext private
I          data encrypting key to encipher the data.
N
I          value: can contain 1-to-8 EBCDIC characters, and must be
I            enclosed in apostrophes if it contains commas, semicolons,
I            blanks, parentheses, or slashes. an apostrophe contained
I            within value must be coded as two apostrophes.
N
I            You can code value in hexadecimal form, (X'n'). value can
I            contain 1-to-16 hexadecimal characters, resulting in 1-to-8
I            bytes of information. With either EBCDIC or hexadecimal
I            representation, value is padded on the right with blanks
I            (X'40') if it is fewer than 8 characters.
N
I        SYSTEMKEY /* Abbreviation: SYSKEY */: specifies that PCF or
I          ICSF manages keys.
N
D      SYSTEMDATAKEY(value) /* Abbreviation: SYSDK */ -
I        specifies the 1- to 8-byte value representing the enciphered
I        system data encrypting key used to encipher the data. This
I        parameter is valid only if SYSTEMKEY is specified. If
I        SYSTEMDATAKEY is not specified, REPRO obtains the enciphered
I        system data encrypting key from the source data set header.
I        In this case, STOREDATAKEY must have been specified when the
I        data set was enciphered.
N
I        value: can contain 1-to-8 EBCDIC characters and must be
I          enclosed in apostrophes if it contains commas, semicolons,
I          blanks, parentheses, or slashes. An apostrophe must be coded
I          as two apostrophes.
N
I          You can code value in hexadecimal form, (X'n'). value can
I          contain 1-to-16 hexadecimal characters, resulting in 1-to-8
I          bytes of information. With either EBCDIC or hexadecimal
I          representation, value is padded on the right with blanks
I          (X'40') if it is fewer than 8 characters.
N
D      SYSTEMKEYNAME(keyname) /* Abbreviation: SYSKN */ -
I        specifies the 1-to-8 character key name of the internal key
I        that was used to encipher the data encrypting key. This
I        parameter is only valid if SYSTEMKEY is specified. If
I        SYSTEMKEYNAME is not specified, REPRO obtains the key name of
I        the internal key from the source data set header. In this case,
I        STOREKEYNAME must have been specified when the data set was
I        enciphered.
N
D    ) /* - */
N
D    ENCIPHER( /* Abbreviation: ENCPHR */
I      specifies that the source data set is to be enciphered as it is
I        copied to the target data set.
N
D      EXTERNALKEYNAME(keyname) | /* Abbreviation: EKN */ -
D      INTERNALKEYNAME(keyname) | /* Abbreviation: IKN */ -
D      PRIVATEKEY /* Abbreviation: PRIKEY */ -
I        specifies whether you, PCF, or ICSF manages keys privately.
N
I        EXTERNALKEYNAME(keyname) /* Abbreviation: EKN */: specifies
I          that PCF or ICSF manages keys. This parameter also supplies
I          the 1-to-8 character key name of the external file key that
I          is used to encipher the data encrypting key. The key is known
I          only by the deciphering system.
N
I          The key name and its corresponding enciphered data encrypting
I          key are listed in SYSPRINT only if NOSTOREDATAKEY is
I          specified.
N
I        INTERNALKEYNAME(keyname) /* Abbreviation: IKN */: specifies
I          that PCF or ICSF manages keys. This parameter also supplies
I          the 1-to-8 character key name of the internal file key that
I          is used to encipher the data encrypting key. The key is
I          retained by the key-creating system.
N
I          The key name and its corresponding enciphered data encrypting
I          key will only be listed in SYSPRINT if NOSTOREDATAKEY is
I          specified.
N
I        PRIVATEKEY /* Abbreviation: PRIKEY */: specifies that the key
I          is to be managed by you.
N
D      CIPHERUNIT(number | 1) /* Abbreviation: CPHRUN */ -
I        specifies that multiple logical source records are to be
I        enciphered as a unit.
N
I        number: specifies the number of records that are to be
I          enciphered together. By specifying that multiple records are
I          to be enciphered together, you can improve your security
I          (chaining is done across logical record boundaries) and also
I          improve your performance. However, there is a corresponding
I          increase in virtual storage requirements. The remaining
I          records in the data set, after the last complete group of
I          multiple records, are enciphered as a group. (If number is
I          5 and there are 22 records in that data set, the last 2
I          records are enciphered as a unit.)
N
I          The value for number can range from 1 to 255.
N
D      DATAKEYFILE(ddname) | /* Abbreviation: DKFILE */ -
D      DATAKEYVALUE(value) /* Abbreviation: DKV */ -
I        specifies that you are supplying a plaintext (not enciphered)
I        data encrypting key. If one of these parameters is not
I        specified, REPRO will generate the data encrypting key. These
I        parameters are valid only when EXTERNALKEYNAME or PRIVATEKEY is
I        specified. If INTERNALKEYNAME and DATAKEYVALUE or DATAKEYFILE
I        are specified, REPRO will generate the data encrypting key and
I        DATAKEYVALUE or DATAKEYFILE are ignored by REPRO.
N
I        The plaintext data encrypting key will not be listed in
I        SYSPRINT unless PRIVATEKEY is specified and REPRO provides the
I        key.
N
I        DATAKEYFILE(ddname) /* Abbreviation: DKFILE */: identifies a
I          data set that contains the plaintext data encrypting key. For
I          ddname, substitute the name of the JCL statement that
I          identifies the data encrypting key data set.
N
I        DATAKEYVALUE(value) /* Abbreviation: DKV */: specifies the
I          8-byte value to be used as the plaintext data encrypting key
I          to encipher the data.
N
I          value: can contain 1-to-8 EBCDIC characters or 1-to-16
I            hexadecimal characters coded X'n'. Value must be enclosed
I            in apostrophes if it contains commas, semicolons, blanks,
I            parentheses, or slashes. An apostrophe must be coded as two
I            apostrophes. With either EBCDIC or hexadecimal
I            representation, value is padded on the right with blanks
I            (X'40') if it is fewer than 8 characters.
N
D      SHIPKEYNAMES(keyname ...) /* Abbreviation: SHIPKN */ -
I        supplies the 1-to-8 character key name of one or more external
I        file keys to be used to encipher the data encrypting key. Each
I        key name and its corresponding enciphered data encrypting key
I        is listed in SYSPRINT, but is not stored in the target data
I        set header. The primary use for this parameter is to establish
I        multiple enciphered data encrypting keys to be transmitted to
I        other locations for use in deciphering the target enciphered
I        data set. This parameter is valid only when INTERNALKEYNAME or
I        EXTERNALKEYNAME is specified.
N
D      STOREDATAKEY | /* Abbreviation: STRDK */ -
D      NOSTOREDATAKEY /* Abbreviation: NSTRDK */ -
I        specifies whether the enciphered data encrypting key is to be
I        stored in the target data set header. The key used to encipher
I        the data encrypting key is identified by INTERNALKEYNAME or
I        EXTERNALKEYNAME. This parameter is valid only when
I        INTERNALKEYNAME or EXTERNALKEYNAME is specified. If the
I        enciphered data encrypting key is stored in the data set
I        header, it does not have to be supplied by the user when the
I        data is deciphered.
N
I        Restriction: A data encrypting key enciphered under the keys
I        identified by SHIPKEYNAMES cannot be stored in the header.
I        Therefore, you might want to avoid using STOREDATAKEY and
I        SHIPKEYNAMES together because this could result in storing
I        header information unusable at some locations.
N
I        STOREDATAKEY /* Abbreviation: STRDK */: specifies that the
I          enciphered data encrypting key is to be stored in the target
I          data set header.
N
I        NOSTOREDATAKEY /* Abbreviation: NSTRDK */: specifies that the
I          enciphered data encrypting key is not to be stored in the
I          target data set header. The keyname and its corresponding
I          enciphered data encrypting key is listed in SYSPRINT.
N
D      STOREKEYNAME(keyname) /* Abbreviation: STRKN */ -
I        specifies whether to store a keyname for the key used to
I        encipher the data encrypting key in the target data set header.
I        The specified keyname must be the name the key is known by on
I        the system where the REPRO DECIPHER is to be performed. This
I        keyname must be the same one specified in INTERNALKEYNAME if
I        REPRO DECIPHER is to be run on the same system.
N
I        If REPRO DECIPHER is run on a different system, the specified
I        keyname can be different from the one specified in
I        INTERNALKEYNAME orEXTERNALKEYNAME.
N
I        This parameter is valid only when INTERNALKEYNAME or
I        EXTERNALKEYNAME is specified. If the keyname is stored in the
I        data set header, it does not have to be supplied by the user
I        when the data is deciphered.
N
I        Restriction: Keyname values identified by the SHIPKEYNAMES
I        parameter cannot be stored in the header. Therefore, you might
I        want to avoid using STOREKEYNAME and SHIPKEYNAMES together
I        because this could result in storing header information
I        unusable at some locations.
N
D      USERDATA(value) /* Abbreviation: UDATA */ -
I        specifies 1-to-32 characters of user data to be placed in the
I        target data set header. For example, this information can be
I        used to identify the security classification of the data.
N
I        value: can contain 1-to-32 EBCDIC characters. If value contains
I          a special character, enclose the value in apostrophes (for
I          example, USERDATA('*CONFIDENTIAL*')). If the value contains
I          an apostrophe, code the embedded quotation mark as two
I          apostrophes (for example, USERDATA('COMPANY''S')).
N
I          You can code value in hexadecimal form, where two hexadecimal
I          characters represent one EBCDIC character. For example,
I          USERDATA(X'C3D6D4D7C1D5E8') is the same as USERDATA(COMPANY).
N
I          The string can contain up to 64 hexadecimal characters when
I          expressed in this form, resulting in up to 32 bytes of
I          information.
N
D    )
* End of wish.
