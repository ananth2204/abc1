SREXR0314
Tz/OS TSO/E REXX Reference
T-Chapter 3. Keyword instructions
T-Instructions
T-PARSE
E"Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20171129-084355
*
@IBM Corporation
*
Bikj4a3a0.pdf
BSA22-7790-10 z/OS TSO/E REXX Reference
BVersion 1 Release 13
*
Nz/OS TSO/E REXX Reference
N=========================
NChapter 3. Keyword instructions
N-------------------------------
NInstructions
N------------
NPARSE
N-----
NPARSE assigns data (from various sources) to one or more variables
Naccording to the rules of parsing. See Chapter 5. Parsing for
Nadditional guidance.
N
NThe template_list is often a single template but may be several
Ntemplates separated by commas. If specified, each template is a list
Nof symbols separated by blanks or patterns or both.
N
NEach template is applied to a single source string. Specifying
Nmultiple templates is never a syntax error, but only the PARSE ARG
Nvariant can supply more than one non-null source string.
N
N
NSyntax:
D  PARSE ÝUPPER¨
D    ARG | EXTERNAL | NUMERIC | PULL | SOURCE | VALUE expression WITH |
D    VAR name | VERSION Ýtemplate_list¨
N
I    UPPER: If you specify the UPPER option, the data to be parsed is
I           first translated to uppercase (that is, lowercase a-z to
I           uppercase A-Z). Otherwise, no uppercase translation takes
I           place during the parsing.
N
I    ARG: parses the string or strings passed to a program or internal
I         routine as input arguments.
N
I    EXTERNAL: In TSO/E, PARSE EXTERNAL reads from the:
I              -> Terminal (TSO/E foreground)
I              -> Input stream, which is SYSTSIN (TSO/E background).
N
I              In non-TSO/E address spaces, PARSE EXTERNAL reads from
I              the input stream as defined by the file name in the INDD
I              field in the module name table. The system default is
I              SYSTSIN. PARSE EXTERNAL returns a field based on the
I              record that is read from the INDD file. If SYSTSIN has
I              no data, the PARSE EXTERNAL instruction returns a null
I              string.
N
I    NUMERIC: The current numeric controls (as set by the NUMERIC
I             instruction) are available. These controls are in the
I             order DIGITS FUZZ FORM.
N
IExample:
IParse Numeric Var1
IAfter this instruction, Var1 would be equal to: 9 0 SCIENTIFIC.
N
IExample:
IParse Numeric NUM_DIGITS NUM_FUZZ NUM_FORM
IAfter this instruction, NUM_DIGITS would be equal to: 9
I                        NUM_FUZZ would be equal to: 0
I                        NUM_FORM would be equal to: SCIENTIFIC
N
I    PULL: parses the next string from the external data queue. If the
I          external data queue is empty, PARSE PULL reads a line from
I          the default input stream (the user's terminal), and the
I          program pauses, if necessary, until a line is complete.
N
M          See PARSE EXTERNAL for the data source if the stack is empty.
N
I    SOURCE: parses data describing the source of the program running.
I            The language processor returns a string that is fixed
I            (does not change) while the program is running.
N
I    VALUE expression: parses the data that is the result of evaluating
I                      expression. If you specify no expression, then
I                      the null string is used. Note that WITH is a
I                      subkeyword in this context and cannot be used
I                      as a symbol within expression. Thus, for example:
N
IPARSE VALUE TIME() WITH hours ":" mins ":" secs
N  gets the current time and splits it into its constituent parts.
N
I    VAR varname: parses the value of the variable varname.
N
I    VERSION: parses information describing the language level and the
I             date of the language processor. This information consists
I             of five blank-delimited words:
I             1. A word describing the language, which is the string
I                "REXX370"
I             2. The language level description, for example, "3.46"
I             3. Three tokens describing the language processor release
I                date, for example: "31", "May", and "2001'.
M
MPerformance tip from Kenneth Tomiak
MPARSE VALUE versus PARSE VAR
MVALUE processes the expression to yield a result that is then parsed.
MWhen parsing a variable under VALUE you are asking REXX to evaluate
Man already static value. Your code also suggests the value is
Munknown when in fact it is known. PARSE VALUE is meant to be used
Mwith an expression that needs to be evaluated (processed) before
Mits value can be parsed. Do use PROCESS VAR when all you pass is a
Mvariable name.
N
N
NExamples
I/* REXX */
I  SAY "REXR0314"
I  SAY "--------"
I  SAY "Arg()" Arg()
I  parse source module_source
I  subroutine_rc = parse_ways(Arg(1))
I  RETURN 0
I
I  subroutine_rc = loop_value()
I  loop_count = 750
I  SAY "Parse" PARSE_VALUE_ctr "time(s)."
I  subroutine_rc = loop_var()
I  subroutine_rc = loop_var()
I  subroutine_rc = loop_value()
I  subroutine_rc = loop_value()
I  subroutine_rc = loop_var()
I  RETURN 0
I
Iparse_ways: Procedure ,
I  Expose module_source
I  parse source subroutine_source
I
I  SAY ""
I  SAY "Example PARSE ARG"
I  SAY "-------------------------"
I  SAY "tso %rexr0314 Hello, 'Kenneth E. Tomiak'."
I  PARSE ARG greeting "," . =1 . "'" named "'"  appendage
I  SAY "Greeting:" greeting
I  SAY "named   :" named
I  SAY "Clutter :" appendage
I  SAY "Example PARSE UPPER ARG"
I  SAY "-------------------------"
I  PARSE UPPER ARG greeting "," . =1 . "'" named "'"  appendage
I  SAY "Greeting:" greeting
I  SAY "named   :" named
I  SAY "Clutter :" appendage
I
I  SAY ""
I  SAY "Example PARSE EXTERNAL"
I  SAY "------------------------------"
I  Address MVS MAKEBUF
I  QUEUE "This is on the stack."
I  SAY "Prompt for some input:"
I  PARSE EXTERNAL @user_data1
I  SAY "Prompt for more input:"
I  PARSE UPPER EXTERNAL @user_data2
I  Address MVS DROPBUF
I  SAY "You entered:" @user_data1
I  SAY "           :" @user_data2
I
I  SAY ""
I  SAY "Example PARSE NUMERIC (always upper)"
I  SAY "------------------------------------"
I  PARSE NUMERIC digitz fuzzy form
I  SAY "Digits:" digitz
I  SAY "Fuzz  :" fuzzy
I  SAY "Form  :" form
I  SAY "Or retrieving each individually..."
I  bif_digits = Digits()
I  bif_fuzzy = Fuzz()
I  bif_form = Form()
I  SAY "Digits:" bif_digits
I  SAY "Fuzz  :" bif_fuzzy
I  SAY "Form  :" bif_form
I
I  SAY ""
I  SAY "Example PARSE PULL"
I  SAY "--------------------------"
I  Address MVS MAKEBUF
I  QUEUE "This is on the stack."
I  bif_queued = Queued()
I  SAY "Input from the stack:"
I  DO q_ctr = 1 to bif_queued
I    PARSE UPPER PULL @user_data1
I    SAY @user_data1
I  END
I  SAY "Input from EXTERNAL (stack empty):"
I  PARSE UPPER PULL @user_data2
I  Address MVS DROPBUF
I  SAY @user_data2
I
I  SAY ""
I  SAY "Example PARSE SOURCE"
I  SAY "----------------------------"
I  PARSE SOURCE c_TSO ,
I               l_cfs ,
I               v_uen ,
I               v_ddn ,
I               v_dsn ,
I               v_len ,
I               v_uhce ,
I               v_asn ,
I               v_ut
I  SAY "Constant TSO:" c_TSO
I  SAY "Label COMMAND | FUNCTION | SUBROUTINE:" l_cfs
I  SAY "Variable UPPERCASE Exec Name:" v_uen
I  SAY "Variable DDName:" v_ddn
I  SAY "Variable DSName:" v_dsn
I  SAY "Variable lowercase Exec Name" v_len
I  SAY "Variable UPPERCASE Host Command Environment" v_uhce
I  SAY "Variable Address Space Name" v_asn
I  SAY "Variable User Token" v_ut
I  SAY "++++++++++++++++++++++++++++++++++++++++++++++++++"
I  SAY "+                    CALL                        +"
I  SAY "++++++++++++++++++++++++++++++++++++++++++++++++++"
I  CALL GSource
I  SAY "++++++++++++++++++++++++++++++++++++++++++++++++++"
I  SAY "+              Address TSO                       +"
I  SAY "++++++++++++++++++++++++++++++++++++++++++++++++++"
I  Address TSO "EXEC 'KTOMIAK.TSO.REXX(GSOURCE)' 'some, data'"
I  SAY "++++++++++++++++++++++++++++++++++++++++++++++++++"
I  SAY "+                   GSource                      +"
I  SAY "++++++++++++++++++++++++++++++++++++++++++++++++++"
I  GSource
I
I  SAY ""
I  SAY "Example PARSE VALUE expression WITH"
I  SAY "-------------------------------------------"
I  PARSE VALUE V_DDN (3 * 7) WITH field_1 Field_2
I  SAY "Field #1 =" field_1
I  SAY "Field #2 =" field_2
I
I  SAY ""
I  SAY "Example PARSE VAR name"
I  SAY "------------------------------"
I  PARSE VAR v_ddn ,
I            scope +3 ,
I            modtype
I  SAY "Scope:" scope
I  SAY "Module type (PROC=CLIST; EXEC=REXX):" modtype
I
I  SAY ""
I  SAY "Example PARSE VERSION"
I  SAY "-----------------------------"
I  PARSE VERSION ver_language ver_level ver_token
I  PARSE VAR ver_token prd_dom prd_month prd_year
I  SAY "Language:" ver_Language
I  SAY "Level:" ver_Level
I  SAY "Token:" ver_token
I  SAY "Tokendate:" prd_year"-"prd_month"-"prd_dom
I
I  SAY ""
I  RETURN 0
I
Iloop_value:
I  SAY " "
I  SAY "PARSE_VALUE timings:"
I  SAY "===================="
I  @start_SYSCPU   = SysVar("SYSCPU")
I  @start_SYSSRV   = SysVar("SYSSRV")
I  Do PARSE_VALUE_ctr = 1 to loop_count
I    static_value = "PO BOX" loop_count
I    PARSE VALUE static_value WITH ,
I      po box number
I  End
I  @PARSE_VALUE_SYSCPU = SysVar("SYSCPU")
I  @PARSE_VALUE_SYSSRV = SysVar("SYSSRV")
I  PARSE_VALUE_ctr = PARSE_VALUE_ctr - 1
I  @accum_syscpu = @PARSE_VALUE_syscpu - @start_syscpu
I  @accum_syssrv = @PARSE_VALUE_syssrv - @start_syssrv
I  SAY "CPU used:" @accum_syscpu
I  SAY "SRV used:" @accum_syssrv
I  RETURN loop_count
I
Iloop_var:
I  SAY " "
I  SAY "PARSE_VAR timings:"
I  SAY "===================="
I  @start_SYSCPU   = SysVar("SYSCPU")
I  @start_SYSSRV   = SysVar("SYSSRV")
I  Do PARSE_VAR_ctr = 1 to loop_count
I    static_value = "PO BOX" loop_count
I    PARSE VAR static_VAR ,
I      po box number
I  End
I  @PARSE_VAR_SYSCPU = SysVar("SYSCPU")
I  @PARSE_VAR_SYSSRV = SysVar("SYSSRV")
I  PARSE_VAR_ctr = PARSE_VAR_ctr - 1
I  @accum_syscpu = @PARSE_VAR_syscpu - @start_syscpu
I  @accum_syssrv = @PARSE_VAR_syssrv - @start_syssrv
I  SAY "CPU used:" @accum_syscpu
I  SAY "SRV used:" @accum_syssrv
I  RETURN loop_count
I
* End of wish.
