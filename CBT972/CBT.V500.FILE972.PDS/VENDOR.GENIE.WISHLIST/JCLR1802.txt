SJCLR1802
KCOPY IMBED
Tz/OS JCL Reference
T-INCLUDE Statement -Example B
E"Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20170525-165755
*
@IBM Corporation
*
NSA22-7597-16 z/OS JCL Reference
NINCLUDE Statement
N=================
NExample B: Putting INCLUDE to use.
N----------------------------------
MKenneth Tomiak:
MHere is an example of how to put an environment specific dataset
Minto lots of JCL and retain only one place to change it in the future.
MSuppose you need to keep both a DB2 subsystem's environment name and
Mversion in the dataset name.
N
N1) The DB2A subsystem was already upgraded to Version 9.1.0.
N2) The DB2B subsystem uses a different set of datasets.
N3) The next time you apply maintenance you change the RSU level.
N4) You are now ready to upgrade DB2B to Version 9.1.0. You must change
N   all references to the new name you will have.
N
NDB2A - For development work (current)
NDB2.DB2A.V9R1M0.RSU0706.SDSNEXIT
NDB2.DB2A.V9R1M0.RSU0706.SDSNLOAD
N
NDB2A - For development work (future)
NDB2.DB2A.V9R1M0.RSU0803.SDSNEXIT
NDB2.DB2A.V9R1M0.RSU0803.SDSNLOAD
N
NDB2B - For production work (current)
NDB2.DB2A.V8R1M0.RSU0612.SDSNEXIT
NDB2.DB2A.V8R1M0.RSU0612.SDSNLOAD
N
NDB2B - For production work (future)
NDB2.DB2A.V9R1M0.RSU0702.SDSNEXIT
NDB2.DB2A.V9R1M0.RSU0702.SDSNLOAD
N
N
NHow to do it: The old way was to create an alias of the old name and
Npoint it to the new. And when someone coded the new name in their JCL
Nand you did your next change you had to drop the old alias and create it
Nand a second alias to point to the name. Repeat each time and the number
Nof alias entries you must ensure are defined grows each time. The new
Nway is to build one JCLLIB member for each subsystem and have everything
Ninclude that member. Now you change the name in one place and every job
Nuses the new name. Example:
N
NI might name the JCLLIB member DB2LINK. Here is what DB2LINK has:
N
N//DB2LINK   DD DISP=SHR,DSN=DB2.DB2A.V9R1M0.RSU0706.SDSNEXIT
N//          DD DISP=SHR,DSN=DB2.DB2A.V9R1M0.RSU0706.SDSNLOAD
N
NAnd here is how I use it with my JOBLIB statement:
N
N//KTOMIAK JOB (),'INCLUDE EXAMPLE',...
D//*
D//DB2SSID SET DB2SSID=DB2A
D//*
D//PROCS  JCLLIB ORDER=(DB2.&DB2SSID..PROCLIB)
D//SYSSY INCLUDE MEMBER=IEASYM00
D//DB2SY INCLUDE MEMBER=SET&DB2SSID
D//*
D//*
D//JOBLIB    DD DDNAME=DB2LINK
D//          DD DDNAME=DB2RUNL
D//     INCLUDE MEMBER=DB2LINK
D//     INCLUDE MEMBER=DB2RUNL
D//*
D//STEP001 EXEC PROC=TSO,REGION=18M,TIME=1400
D//     INCLUDE MEMBER=DSNTEP2L
D//SYSIN     DD DISP=SHR,DSN=DB2.&DB2SSID..SQLLIB(COUNTVWS)
D//*
D//
N
NI slipped in a SET statement to control which DB2 subsystem this job
Nuses. I slipped in a JCLLIB statement to control where PROCs and INCLUDE
Nmembers are pulled from.  I used three INCLUDE statements.  The first
Npulls in my statically defined SET statements for the system this gets
Nconverted on. The second pulls in any DB2 subsystem specific SYMBOLs I
Nneed. The third pulls in a standard set of TSO related commands to run
Nthe IBM DB2 'SAMPLE' dynamic SQL program, DSNTEP2, using a parm of
NALIGN=LHS. By changing the second INCLUDE, SETDB2A to SETDB2B, I easily
Npick up the correct datasets and control cards for the production
Nsubsystem. So what is in all of those members?
N
NMember IEASYM00 might look like this:
D//*
D//* PSEUDO SYSTEM SYMBOLICS FOR BATCH JOBS ON SYSK
D//*
D//SYSPLEX  SET SYSPLEX=PLEXEGLS
D//SYSNAME  SET SYSNAME=SYSK
D//SYSCLONE SET SYSCLONE=KT
D//OWNNODE  SET OWNNODE=JSNODEKT
D//*
N
N
MMember SETDB2A might look like this:
D//*
D//* JOB SYMBOLICS FOR DB2 SUBSYSTEM DB2A - Development
D//*
D//         SET DB2VER=V9R1M0
D//         SET DB2RSU=0706
D//         SET DB2OUT='D'
N
NMember SETDB2B might look like this:
D//*
D//* JOB SYMBOLICS FOR DB2 SUBSYSTEM DB2B - Production
D//*
D//         SET DB2VER=V8R1M0
D//         SET DB2RSU=0612
D//         SET DB2OUT='P'
N
NMember DB2LINK might look like this:
D//DB2LINK   DD DISP=SHR,DSN=DB2.&DB2SSID..&DB2VER..RSU&DB2RSU..SDSNEXIT
D//          DD DISP=SHR,DSN=DB2.&DB2SSID..&DB2VER..RSU&DB2RSU..SDSNLOAD
N
NMember DB2RUNL might look like this:
D//DB2RUNL   DD DISP=SHR,DSN=DB2.&DB2SSID..&DB2VER..RUNLIB.LOAD
N
NMember DSNTEP2L might look like this:
D//SYSTSIN   DD DISP=SHR,DSN=DB2.&DB2SSID..PARMLIB(DSN)
D//          DD DISP=SHR,DSN=DB2.&DB2SSID..PARMLIB(DSNTEP2L)
D//          DD DISP=SHR,DSN=DB2.&DB2SSID..PARMLIB(END)
D//          DD DISP=SHR,DSN=DB2.&DB2SSID..PARMLIB(LOGOFF)
D//SYSPRINT  DD SYSOUT=&DB2OUT,DEST=&SYSPLEX..PRINTER
N
NIn my UNIVERSE I do not put the version and RSU in a dataset name.
NInstead, I use cloning to deploy my changes. But I do prefer using
N&DB2SSID in all datasets related to a subsystem so I can make that
None change to the first SET statement and ensure all other
Nreferences. I never have a job fail because the DSN command set
Nthe development subsystem ID while the datasets referenced the
Nproduction datasets. That means my DB2LINK and DB2RUNL look like this:
N
NMember DB2LINK might look like this:
D//DB2LINK   DD DISP=SHR,DSN=DB2.&DB2SSID..SDSNEXIT
D//          DD DISP=SHR,DSN=DB2.&DB2SSID..SDSNLOAD
N
NMember DB2RUNL might look like this:
D//DB2RUNL   DD DISP=SHR,DSN=DB2.&DB2SSID..RUNLIB.LOAD
* End of wish.
