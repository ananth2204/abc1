SREXR0322
KGOTO
Tz/OS TSO/E REXX Reference
T-Chapter 3. Keyword instructions
T-Instructions
T-SIGNAL
E"Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20171204-044055
*
@IBM Corporation
*
Bikj4a3a0.pdf
BSA22-7790-10 z/OS TSO/E REXX Reference
BVersion 1 Release 13
*
Nz/OS TSO/E REXX Reference
N=========================
NChapter 3. Keyword instructions
N-------------------------------
NInstructions
N------------
NSIGNAL
N------
NSIGNAL causes an unusual change in the flow of control (if you specify
Nlabelname or VALUE expression), or controls the trapping of certain
Nconditions (if you specify ON or OFF).
N
N
NSyntax:
D  SIGNAL labelname | condition state ÝNAME labeltrap¨
I    labelname: The name of a subroutine to pass control to. There is no
I               return processing that CALL supports.
N
I    condition: ERROR | FAILURE | HALT | NOVALUE | SYNTAX
N
I    state: ON | OFF
N
I    labeltrap: The name of your error handling subroutine. If a named
I               subroutine is not used then the default label matches
I               the condition.
N
NExample:
I  SAY ""
I  SAY "REXR0322: SIGNAL"
I  SAY "================"
I
I  SAY ""
I  SAY "Example: Trapping conditions SIGNAL"
I  SAY "=================================="
I  return_code = 0
I
I  SIGNAL ON ERROR
I  SIGNAL ON FAILURE
I  SIGNAL ON HALT
I  SIGNAL ON NOVALUE
I  SIGNAL ON SYNTAX
I
I  signal_type = ""
I  come_back = "000"
I  SAY "Cause a negative RC:"
I  SAY "--------------------"
I  Address MVS "EXECIO 1 DISKr Apple (STEM pits. FINIS)"
I
IRecover_Error:
I
Inoerror_000:
I  IF ( signal_type <> "" ) THEN DO
I    SAY "I came back to the Process_routine after an" signal_type"."
I  END
I  SIGNAL OFF ERROR
I  SIGNAL OFF FAILURE
I  SIGNAL OFF HALT
I  SIGNAL OFF NOVALUE
I  SIGNAL OFF SYNTAX
I
I  function_rc = localized_return()
I
I  SAY "Done experimenting."
I  RETURN return_code
I
I/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
I=======================================================================
I This sub-routine handles several conditions using a named routine.
I=======================================================================
I>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Ilocalized_return:
I  SAY ""
I  SAY "Setting local SIGNAL ON conditions:"
I  SAY "================================="
I  SIGNAL ON ERROR    NAME Error_Handler_Routine
I  SIGNAL ON FAILURE  NAME Error_Handler_Routine
I  SIGNAL ON HALT     NAME Error_Handler_Routine
I  SIGNAL ON NOVALUE  NAME Error_Handler_Routine
I  SIGNAL ON SYNTAX   NAME Error_Handler_Routine
I
I  signal_type = ""
I  SAY "Cause an error:"
I  SAY "---------------"
I  ADDRESS TSO "ALLOC FILE(Apple) DA(TSO.REXX(ERRHNDLR)) SHR REUSE"
I  ADDRESS MVS "EXECIO * DISKR Apple (STEM pits. )"
I  SAY "Read" pits.0 "record(s)"
I  SAY "An attempt to read from APPLE will fail."
I  ADDRESS MVS "EXECIO 1 DISKR Apple (STEM pits. FINIS)"
I  SAY "I came back to the localized_return routine."
I
I  ADDRESS TSO "FREE FILE(Apple)"
I
I  SIGNAL OFF ERROR
I  SIGNAL OFF FAILURE
I  SIGNAL OFF HALT
I  SIGNAL OFF NOVALUE
I  SIGNAL OFF SYNTAX
I
I  RETURN return_code
I
I/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
I=======================================================================
I This routine handles several conditions and returns after the fault.
I=======================================================================
I>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
IError_Handler_Routine:
I  err_sigl = Sigl
I  err_rc   = RC
I  SAY "  I came to the Error_Handler_Routine."
I  signal_type = To_UpperCase(CONDITION("C"))
I  signal_desc = CONDITION("D")
I  signal_inst = CONDITION("I")
I  signal_stat = CONDITION("S")
I  SAY "EHR c:" signal_type "at" err_sigl
I  SAY "    d:" signal_desc
I  SAY "    i:" signal_inst
I  SAY "    s:" signal_stat", RC("err_rc")"
I  error_code = -1
I  SELECT
I    WHEN ( signal_type = "ERROR" ) THEN DO
I      error_code = 8
I      signal_type = "Error"
I    END
I    WHEN ( signal_type = "FAILURE" ) THEN DO
I      error_code = 8
I      signal_type = "FAILURE"
I    END
I    WHEN ( signal_type = "HALT" ) THEN DO
I      error_code = 8
I      signal_type = "HALT"
I    END
I    WHEN ( signal_type = "NOVALUE" ) THEN DO
I      error_code = 8
I      signal_type = "NOVALUE"
I    END
I    WHEN ( signal_type = "SYNTAX" ) THEN DO
I      error_code = 8
I      signal_type = "SYNTAX"
I    END
I    OTHERWISE DO
I      error_code = 32
I      signal_type = "Unknown" signal_type
I    END
I  END
I  result = -1
I  SAY "  RETURN to" signal_type"_"come_back
I  RETURN error_code
I
I/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
I=======================================================================
I This routine does cleanup before exiting.
I=======================================================================
I>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
IERROR:
I  SIGNAL OFF ERROR
I  SAY "    I came to the ERROR ROUTINE."
I  err_sigl = Sigl
I  signal_type = "Error"
I  SAY signal_type "at" err_sigl
I  return_code = 5
I  SIGNAL Recover_Error
I
IFAILURE:
I  SIGNAL OFF FAILURE
I  SAY "    I came to the FAILURE ROUTINE."
I  err_sigl = Sigl
I  signal_type = "FAILURE"
I  SAY signal_type "at" err_sigl
I  return_code = 6
I  RETURN return_code
I
IHALT:
I  SIGNAL OFF HALT
I  SAY "    I came to the HALT ROUTINE."
I  err_sigl = Sigl
I  signal_type = "HALT"
I  SAY signal_type "at" err_sigl
I  return_code = 7
I  RETURN return_code
I
INOVALUE:
I  SIGNAL OFF NOVALUE
I  SAY "    I came to the NOVALUE ROUTINE."
I  err_sigl = Sigl
I  signal_type = "NOVALUE"
I  SAY signal_type "at" err_sigl
I  return_code = 7
I  RETURN return_code
I
ISYNTAX:
I  SIGNAL OFF SYNTAX
I  SAY "    I came to the SYNTAX ROUTINE."
I  err_sigl = Sigl
I  signal_type = "SYNTAX"
I  SAY signal_type "at" err_sigl
I  return_code = 7
I  RETURN return_code
I
I/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
IConvert string to uppercase.
I>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
ITo_Uppercase:
I  PARSE ARG myarg
I  SAY "Cause a NOVALUE condition"
I  SAY "-------------------------"
I  IF ( lowercase_letters = "LOWERCASE_LETTERS" ) THEN DO
I    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
I  END
I  IF ( uppercase_letters = "UPPERCASE_LETTERS" ) THEN DO
I    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
I  END
I  RETURN TRANSLATE(myarg,uppercase_letters,lowercase_letters)
* End of wish.
