{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "KTOMIAK", "INMTNODE": "ANYNODE", "INMTUID": "KTOMIAK", "INMFTIME": "20180225125707000000", "INMNUMF": 2}, "INMR02": {"1": {"INMUTILN": "INMCOPY", "INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 251, "INMBLKSZ": 3120, "INMRECFM": "VB", "numfile": 1}, "2": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 81, "INMBLKSZ": 27945, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "VENDOR.GENIE.WISHLIST", "INMMEMBR": "VENDOR.GENIE.WISHLIST", "numfile": 2}, "3": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 2}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}, "2": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "message": {"file": "b'@\\x7f\\xd2\\x85\\x95\\x95\\x85\\xa3\\x88@\\xc5@\\xe3\\x96\\x94\\x89\\x81\\x92\\x7fL\\xc3\\xc2\\xe3m\\xd2\\x85\\x95|\\xd2\\xe3\\x96\\x94\\x89\\x81\\x92K\\x82\\x89\\xa9n\\xe4K\\xe2K\\xc1K@\\xc3\\xc3z@\\xc1\\xd5\\xe8\\xd5\\xd6\\xc4\\xc5@a\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@\\xd2K@\\xe3\\x96\\x94\\x89\\x81\\x92@@@@@@@@@@@@@@@@@@@@@@\\xe2\\xe3\\xc1\\xd5\\xc4\\xc1\\xd9\\xc4@\\xc7\\xd3\\xd6\\xc2\\xc1\\xd3@\\xc4\\xc9\\xe2\\xc3\\xd3\\xc1\\xc9\\xd4\\xc5\\xd9``````````````````````````\\xe3\\x88\\x85@\\x81\\xa4\\xa3\\x88\\x96\\x99@\\x85\\xa7\\x97\\x93\\x89\\x83\\x89\\xa3\\x93\\xa8@\\x84\\x89\\xa2\\x81\\xa5\\x96\\xa6\\xa2@\\x81\\x95\\xa8@\\x83\\x93\\x81\\x89\\x94@\\xa6\\x88\\x81\\xa3\\xa2\\x96\\x85\\xa5\\x85\\x99@\\x81\\x82\\x96\\xa4\\xa3@\\xa3\\x88\\x85\\x83\\x96\\x99\\x99\\x85\\x83\\xa3\\x95\\x85\\xa2\\xa2@\\x96\\x99@\\x86\\xa4\\x95\\x83\\xa3\\x89\\x96\\x95\\x81\\x93\\x89\\xa3\\xa8@\\x96\\x86@\\xa3\\x88\\x89\\xa2@\\x97\\x99\\x96\\x87\\x99\\x81\\x94k@\\x81\\x95\\x84@\\x84\\x89\\xa2\\x83\\x93\\x81\\x89\\x94\\xa2@\\x93\\x89\\x81\\x82\\x89\\x93\\x89\\xa3\\xa8\\x86\\x96\\x99@\\x81\\x95\\xa8\\xa3\\x88\\x89\\x95\\x87@\\x81\\x95\\x84@\\x85\\xa5\\x85\\x99\\xa8\\xa3\\x88\\x89\\x95\\x87@\\x82\\x81\\x84@\\xa3\\x88\\x81\\xa3@\\x94\\x89\\x87\\x88\\xa3@\\x88\\x81\\x97\\x97\\x85\\x95@\\x89\\x95@\\x83\\x96\\x95\\x95\\x85\\x83\\xa3\\x89\\x96\\x95@\\xa6\\x89\\xa3\\x88k\\x82\\x85\\x86\\x96\\x99\\x85k@\\x84\\xa4\\x99\\x89\\x95\\x87k@\\x96\\x99@\\x81\\x86\\xa3\\x85\\x99@\\xa4\\xa2\\x89\\x95\\x87@\\x89\\xa3K@\\xc9@\\x88\\x81\\xa5\\x85@\\xa3\\x99\\x89\\x85\\x84@\\xa3\\x96@\\x94\\x81\\x92\\x85@\\x89\\xa3@\\xa6\\x96\\x99\\x92@\\x99\\x89\\x87\\x88\\xa3k\\x81\\x95\\x84@\\xc9@\\x81\\x94@\\x97\\x85\\x99\\xa2\\x96\\x95\\x81\\x93\\x93\\xa8@\\x97\\x99\\x85\\xa3\\xa3\\xa8@\\x83\\x96\\x95\\x86\\x89\\x84\\x85\\x95\\xa3@\\xa3\\x88\\x81\\xa3@\\x89\\xa3@\\x84\\x96\\x85\\xa2k@\\x82\\xa4\\xa3@\\x85\\xa5\\x85\\x99\\xa8\\x82\\x96\\x84\\xa8@\\x94\\x81\\x92\\x85\\xa2\\x94\\x89\\xa2\\xa3\\x81\\x92\\x85\\xa2k@\\xa2\\x96@\\x89\\x86@\\xa8\\x96\\xa4@\\xa4\\xa2\\x85@\\x89\\xa3k@\\xa8\\x96\\xa4@\\x84\\x96@\\xa2\\x96@\\x81\\xa3@\\xa8\\x96\\xa4\\x99@\\x96\\xa6\\x95@\\x99\\x89\\xa2\\x92K@\\xe2\\x89\\x95\\x83\\x85\\x99\\x85\\x93\\xa8@\\xa8\\x96\\xa4\\x99\\xa2k\\xd2\\x85\\x95\\x95\\x85\\xa3\\x88@\\xc5K@\\xe3\\x96\\x94\\x89\\x81\\x92@'", "lrecl": 80, "text": " \"Kenneth E Tomiak\"<CBT_Ken@KTomiak.biz>U.S.A. CC: ANYNODE /KTOMIAK   K. Tomiak\n                     STANDARD GLOBAL DISCLAIMER--------------------------The aut\nhor explicitly disavows any claim whatsoever about thecorrectness or functionali\nty of this program, and disclaims liabilityfor anything and everything bad that\nmight happen in connection with,before, during, or after using it. I have tried\nto make it work right,and I am personally pretty confident that it does, but eve\nrybody makesmistakes, so if you use it, you do so at your own risk. Sincerely yo\nurs,Kenneth E. Tomiak\n"}, "file": {"VENDOR.GENIE.WISHLIST": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27945, "DS1LRECL": 81, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12304, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3000, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "180056", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x002'", "DS1LSTAR": "b'\\x00\\x8d\\x16'", "DS1TRBAL": "b'2V'"}, "COPYR2": {"deb": "b'\\x02\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x06\\x80\\x00\\x04z\\xc0\\xc8'", "extents": ["b'\\x02\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x06\\x80\\x00\\x04z\\xc0\\xc8'", "b'X}Ch\\x00\\x00\\x06W\\x00\\r\\x06^\\x00\\x07\\x00d'", "b'X}Ch\\x00\\x00\\x06`\\x00\\t\\x06c\\x00\\r\\x002'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"RXCP": {"ttr": 31761, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SRXCP\nKREXXC REXXD REXXL\nTREXX Compiler Presentation\nT-George Fulk\nE\"Kenneth E. Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20170416-103121\nWhttp://rexxla.org\n@George Fulk IBM Corporation\n*\nUhttp://rexxla.org/events/2007/presentations/georgef1.pdf\n*\nNThe \"Rexx Language Association\" (RexxLA) hosts a Symposium annually.\nNIn 2007 George Fulk presenting on using the REXX Compiler.\nNThe abstract:\nI\nIDo you want your Rexx code to run faster? Do you want to syntax check\nIyour code fully before you run it? Do you want to protect your\nIintellectual property? If you answered 'YES' to any of these questions,\nIthen this session is for you. This session will show you how to use the\nIRexx compiler in VM and TSO environments. We will discuss performance\nIenhancements, programming considerations, optimization and optimization\nIstoppers when using the Rexx compiler. If you want to know when to use\nIthe Rexx Library or the Alternate Library, the answer will be given in\nIour session, too!\nI\nNThis topic contains modified extracts from his presentation.\n* End of wish.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXCP01": {"ttr": 31763, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SRXCP01\nTREXX Compiler Presentation\nT-George Fulk\nE\"Kenneth E. Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20070501-143000\nWhttp://rexxla.org\n@George Fulk IBM Corporation\n*\nNUsing the REXX Compiler\nN=======================\nNThe REXX Compiler and Library is an additional fee based product.\nNIf you have it then you may compile your REXX code into one or more\nNexecutable types of output. IEXEC is an expanded version of source\nNthat contained %include directoves. CEXEC is compiled rexx executable\nNfrom a TSO environment. An OBJLIB output is input to the BINDER to\nNeither be included as a sub-routine or turned into a load module.\nN\nMKenneth Tomiak remark:\nMThe presentation focuses on z/VM for the interactive dialog and\nMon z/OS for the batch processing. These GENIE wish files are z/OS\nMoriented.\nM\nMIBM provides a \"Foreground\" menu, option 14, for the interactive\nMdialog. Your installation may not have the required data sets added\nMduring the logon process for it to function. For that reason, Kenneth\nMhad provided a simple REXX program to show how to allocate the dialog\nMdata sets and launch the program. See: RXCP0100.\n* End of wish.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXCP0100": {"ttr": 31765, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SRXCP0100\nKREXXC REXXL\nTREXX Compiler Presentation\nT-George Fulk -Tomiak pre-allocations\nE\"Kenneth E. Tomiak\"<TSO_Ken@KTomiak.BIZ>\nZ20170612-131455\nWhttp://www.ktomiak.biz/ORG/\n@Kenneth E. Tomiak\n*\nNKenneth Tomiak provides this job to define data sets for the\nNsuccessful execution of the jobs shown in the presentation.\nN\nD//*\nD//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\nD//* Delete the group of data sets for testing this job.\nD//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nD//ST01#06 EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE 'KTOMIAK.RXC.*'\nD  SET MAXCC = 0\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//*\nD//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\nD//* Define the data sets for job definitions.\nD//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nD//ST02#06 EXEC PGM=IEFBR14\nD//CNTL      DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.CNTL,\nD//             UNIT=SYSALLDA,VOL=SER=VPWRKA,\nD//             SPACE=(TRK,(20,5,5)),\nD//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=80)\nD//*\nD//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\nD//* Define the data sets for program development.\nD//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nD//ST03#06 EXEC PGM=IEFBR14\nD//REXX      DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.REXX,     <==source\nD//             UNIT=SYSALLDA,VOL=SER=VPWRKA,\nD//             SPACE=(TRK,(20,5,5)),\nD//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=80)\nD//*\nD//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\nD//* Define the data sets for program compilation.\nD//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nD//ST04#06 EXEC PGM=IEFBR14\nD//CEXEC     DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.CEXEC,    <==compiled\nD//             UNIT=SYSALLDA,VOL=SER=VPWRKA,\nD//             SPACE=(TRK,(10,10,2)),\nD//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=80)\nD//IEXEC     DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.IEXEC,    <==%include\nD//             UNIT=SYSALLDA,VOL=SER=VPWRKA,\nD//             SPACE=(TRK,(10,10,2)),\nD//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=80)\nD//OBJLIB    DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.OBJLIB,   <==Object\nD//             UNIT=SYSALLDA,VOL=SER=VPWRKA,\nD//             SPACE=(TRK,(10,10,2)),\nD//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=80)\nD//STUBBED   DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.STUBBED,  <==StubObj\nD//             UNIT=SYSALLDA,VOL=SER=VPWRKA,\nD//             SPACE=(TRK,(10,10,2)),\nD//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=80)\nD//REXXCOMP  DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.REXXCOMP, <==systerm\nD//             UNIT=SYSALLDA,VOL=SER=VPWRKA,\nD//             SPACE=(TRK,(20,5,5)),\nD//             DCB=(RECFM=VBA,BLKSIZE=0,LRECL=85)\nD//REXXLIST  DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.REXXLIST, <==sysprint\nD//             UNIT=SYSALLDA,VOL=SER=VPWRKA,\nD//             SPACE=(TRK,(20,5,5)),\nD//             DCB=(RECFM=VBA,BLKSIZE=0,LRECL=125)\nD//*\nD//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\nD//* Define the data sets for program run-times.\nD//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nD//ST05#06 EXEC PGM=IEFBR14\nD//IEWBLINK  DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.IEWBLINK, <==sysprint\nD//             UNIT=SYSALLDA,VOL=SER=VPWRKA,\nD//             SPACE=(TRK,(20,5,5)),\nD//             DCB=(RECFM=VBA,BLKSIZE=0,LRECL=125)\nD//LOADLIB   DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.LOADLIB,  <==loadmod\nD//             UNIT=SYSALLDA,VOL=SER=VPWRKA,\nD//             SPACE=(TRK,(20,5,1)),DSNTYPE=LIBRARY,\nD//             DCB=(RECFM=U,BLKSIZE=4096,LRECL=32760)\nD//*\nD//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\nD//* Copy a small REXX program to launch the FOREGROUND Compiler dialog.\nD//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nD//ST06#06 EXEC PGM=IEBGENER\nD//SYSIN     DD DUMMY\nD//SYSPRINT  DD SYSOUT=*\nD//SYSUT1    DD *\nDpgm_rexxd:    /* We still need rexx in comment if read from SYSPROC. */\nD  Parse Arg HLQ\nD  If ((hlq = \"HLQ\") | (hlq = \"\")) Then Do\nD    Say \"You must provide the high-level-qualifier to the product.\"\nD    Return 16\nD  End\nD  Address IspExec \"CONTROL ERRORS RETURN\"\nD  Address IspExec \"LIBDEF ISPLLIB DATASET ID('\"hlq\".SFANLMD') STACK\"\nD  Address IspExec \"LIBDEF ISPMLIB DATASET ID('\"hlq\".SFANMSEU') STACK\"\nD  Address IspExec \"LIBDEF ISPPLIB DATASET ID('\"hlq\".SFANPENU') STACK\"\nD  Address IspExec \"LIBDEF ISPSLIB DATASET ID('\"hlq\".SFANSKL') STACK\"\nD  Address TSO \"ALTLIB Activate Application(EXEC)\" ,\nD    \"DATASET('\"hlq\".SFANCMD') UNCOND\"\nD  Address IspExec \"SELECT\" ,\nD    \"PGM(ISRFPR) PARM((FANFP14,ISRFP14) 14) NEWPOOL\"\nD  Address TSO \"ALTLIB DeActivate Application(EXEC)\"\nD  Address IspExec \"LIBDEF ISPLLIB\"\nD  Address IspExec \"LIBDEF ISPMLIB\"\nD  Address IspExec \"LIBDEF ISPPLIB\"\nD  Address IspExec \"LIBDEF ISPSLIB\"\nD  Return 0\nD/*\nD//SYSUT2    DD DISP=OLD,DSN=&SYSUID..RXC.REXX(REXXD)\nD//*\nD//* End of Job RXCP0100.\nD//\n* End of wish.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXCP0101": {"ttr": 32001, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SRXCP0101\nTREXX Compiler Presentation\nT-George Fulk -Tomiak source ANYREXX\nE\"Kenneth E. Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20170612-131255\nWhttp://www.ktomiak.biz/ORG/\n@Kenneth E. Tomiak\n*\nNUsing the REXX Compiler\nN=======================\nN\nDpgm_anyrexx:  /* We still need rexx in comment if read from SYSPROC. */\nD  rexxpgm_version = \"01.00\"\nD  Say \"\"\nD  Say \"Begin.\"\nD  function_rc = rexx_Initialize()\nD  if (function_rc = 0) Then Do\nD    function_rc = rexx_Processing()\nD  End\nD  function_rc = rexx_Cleanup()\nD  Say \"\"\nD  Say \"Done.\"\nD  Say \"\"\nD  Return return_code\nD\nDrexx_Initialize:\nD  Parse VERSION,\nD    version_rexx_name,\nD    version_rexx_version,\nD    version_rexx_date\nD  Parse SOURCE,\nD    source_host_env,\nD    source_call_type,\nD    source_uc_exec_name,\nD    source_hostdd,\nD    source_hostdsn,\nD    source_nf_exec_name,\nD    source_initial_cmd_env,\nD    source_asid_name,\nD    source_char8_user_token,\nD    source_hostother\nD/*\nD\nDREXX-Interpreted:\nD---------------------------------------------------\nDVERSION:\nDName:REXX370 Version:3.48 Date:01 May 1992\nD\nDSOURCE:\nDHost env:TSO Call type:COMMAND EXEC NAME:ANYREXX\nDHostDD:SYSEXEC HostDSN:? nf name:?\nDCmd env:TSO ASID:ISPF User token:? Other:\nD\nDREXX-Compiled:\nD---------------------------------------------------\nDName:REXXC370 Version:3.48 Date:23 Dec 1999\nD\nDSOURCE:\nDHost env:TSO Call type:COMMAND EXEC NAME:ANYREXX\nDHostDD:SYS00206 HostDSN:KTOMIAK.CBT.CEXEC nf name:?\nDCmd env:TSO ASID:ISPF User token:? Other:\nD\nD*/\nD  Address_Environment = Address()\nD  return_code = 0\nD  Return return_code\nD\nDrexx_Processing:\nD  Say \"VERSION:\"\nD  Say ,\nD    \"Name:\"version_rexx_name,\nD    \"Version:\"version_rexx_version,\nD    \"Date:\"version_rexx_date\nD\nD  Say \"\"\nD  Say \"SOURCE:\"\nD  Say ,\nD    \"Host env:\"source_host_env,\nD    \"Call type:\"source_call_type,\nD    \"EXEC NAME:\"source_uc_exec_name\nD  Say ,\nD    \"HostDD:\"source_hostdd,\nD    \"HostDSN:\"source_hostdsn,\nD    \"nf name:\"source_nf_exec_name\nD  Say ,\nD    \"Cmd env:\"source_initial_cmd_env,\nD    \"ASID:\"source_asid_name,\nD    \"User token:\"source_char8_user_token,\nD    \"Other:\"source_hostother\nD\nD  Say \"\"\nD  Say \"Environment:\"\nD  Say Address_Environment\nD\nD  _opsys = determine_rexxenv()\nD  Say \"\"\nD  Say \"Operating System:\"\nD  Say REXX_ENVIR\nD\nD  Say \"\"\nD  Say \"Program name:\" source_pgm_name\nD\nD  Return return_code\nD\nDrexx_Cleanup:\nD  lastline = Sourceline()\nD  Say \"This code has:\" lastline \"line(s).\"\nD  Return return_code\nD\nDdetermine_rexxenv:\nD  Select\nD    When (Left(version_rexx_name,11) = \"REXX-ooRexx\") Then Do\nD      Parse Var version_rexx_name ,\nD        . \"_\" ,\nD        version_rexx_v \".\" ,\nD        version_rexx_r \".\" ,\nD        version_rexx_m \"(\" ,\nD        =1 . \"_\" version_rexx_vrm \"(\" .\nD      REXX_ENVIR = \"PC/ooREXX\"\nD    End\nD    When ((version_rexx_name = \"REXXSAA\") & ,\nD          (source_initial_cmd_env = \"DOS\")) Then Do\nD      REXX_ENVIR = \"PC/IBM_PC_DOS\"\nD    End\nD    When ((version_rexx_name = \"REXXSAA\") & ,\nD          (source_initial_cmd_env = \"OS2\")) Then Do\nD      REXX_ENVIR = \"PC/IBM_OS/2\"\nD    End\nD    When ((version_rexx_name = \"REXX370\") & ,\nD          (source_initial_cmd_env = \"CMS\")) Then Do\nD      REXX_ENVIR = \"VM/CMS\"\nD    End\nD    When ((source_asid_name = \"MVS\") & ,\nD          (source_initial_cmd_env = \"MVS\")) Then Do\nD      REXX_ENVIR = \"MVS/Batch\"\nD    End\nD    When ((version_rexx_name = \"REXX370\") & ,\nD          (source_initial_cmd_env = \"TSO\")) Then Do\nD      REXX_ENVIR = \"MVS/TSO\"\nD    End\nD    When ((version_rexx_name = \"REXX370\") & ,\nD          (source_initial_cmd_env = \"ISPF\")) Then Do\nD      REXX_ENVIR = \"MVS/TSO/ISPF\"\nD    End\nD    When ((version_rexx_name = \"REXXC370\") & ,\nD          (source_initial_cmd_env = \"TSO\")) Then Do\nD      REXX_ENVIR = \"MVS/TSO\"\nD    End\nD    When ((version_rexx_name = \"REXXC370\") & ,\nD          (source_initial_cmd_env = \"ISPF\")) Then Do\nD      REXX_ENVIR = \"MVS/TSO/ISPF\"\nD    End\nD    When ((version_rexx_name = \"REXX/2\") & ,\nD          (To_uppercase(Left(source_host_env,7)) = \"WINDOWS\")) Then Do\nD      REXX_ENVIR = \"PC/SPF-PC\"\nD    End\nD    When (Address_Environment = \"COMMAND\") Then Do\nD      REXX_ENVIR = \"PC/DOS7.0\"\nD    End\nD    When (Address_Environment = \"SYSTEM\") Then Do\nD      REXX_ENVIR = \"PC/REGINA\"\nD    End\nD    Otherwise Do\nD      REXX_ENVIR = \"UNKNOWN\"\nD    End\nD  End\nD  Select\nD    When (Left(REXX_ENVIR,3) = \"MVS\") Then Do\nD      source_pgm_name = source_uc_exec_name\nD    End\nD    When (Left(REXX_ENVIR,2) = \"VM\") Then Do\nD      source_pgm_name = source_uc_exec_name\nD    End\nD    When (To_uppercase(Left(source_host_env,7)) = \"WINDOWS\") Then Do\nD      last_slash = LastPos(\"\\\",source_uc_exec_name)\nD      If (last_slash > 0) Then Do\nD        filename_ext = Substr(source_uc_exec_name,(last_slash + 1))\nD      End\nD      Else Do\nD        filename_ext = source_uc_exec_name\nD      End\nD      Parse Var filename_ext source_pgm_name \".\" source_pgm_ext\nD    End\nD    Otherwise Do\nD      Say \"Otherwise:\" REXX_ENVIR To_uppercase(Left(source_host_env,7))\nD    End\nD  End\nD  Return 0\nD/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\nDConvert string to lowercase.\nD>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */\nDTo_Lowercase:\nD  Parse arg myarg\nD  If (lowercase_letters = \"LOWERCASE_LETTERS\") Then Do\nD    lowercase_letters = \"abcdefghijklmnopqrstuvwxyz\"\nD  End\nD  If (uppercase_letters = \"UPPERCASE_LETTERS\") Then Do\nD    uppercase_letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nD  End\nD  Return Translate(myarg,lowercase_letters,uppercase_letters)\nD\nD/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\nDConvert string to uppercase.\nD>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */\nDTo_Uppercase:\nD  Parse arg myarg\nD  If (lowercase_letters = \"LOWERCASE_LETTERS\") Then Do\nD    lowercase_letters = \"abcdefghijklmnopqrstuvwxyz\"\nD  End\nD  If (uppercase_letters = \"UPPERCASE_LETTERS\") Then Do\nD    uppercase_letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nD  End\nD  Return Translate(myarg,uppercase_letters,lowercase_letters)\nD\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXCP0102": {"ttr": 32003, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SRXCP0102\nTREXX Compiler Presentation\nT-George Fulk -Tomiak example REXXC\nE\"Kenneth E. Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20170612-131255\nWhttp://www.ktomiak.biz/ORG/\n@Kenneth E. Tomiak\n*\nNUsing the REXX Compiler\nN=======================\nNCompiling to capture output.\nM\nMKenneth Tomiak remark:\nMBelieving there is no need for both compiled REXX and a load module the\nMOBJECT parameter has been negated. SLINE has been enabled to show\nMthat if you tuck panels inside your code then you cannot hide the\nMsource code unless you also use CONDENSE.\nN\nD//         SET HLQ='FAN140',MBR='ANYREXX'\nD//PROCS JCLLIB ORDER=(&HLQ..PROCLIB)                         Procs\nD//*\nD//*******************************************************************\nD//** (1) COMPILE REXX PROGRAM\nD//** INPUT: REXX.SYSIN = REXX SOURCE CODE\nD//** REXX.STEPLIB = COMPILER LIBRARY (REXXC SFANLMD)\nD//** OUTPUT: REXX.SYSPUNCH = OBJECT OUTPUT\nD//** REXX.SYSCEXEC = CEXEC OUTPUT\nD//**\nD//*******************************************************************\nD//COMPILE EXEC REXXC,\nD//             OPTIONS='NOOBJECT SLINE'      See RXCU for parameters\nD//*REXX.STEPLIB DD DISP=SHR,DSN=&HLQ..SFANLMD                COMPILER\nD//REXX.SYSIN DD DISP=SHR,DSN=&SYSUID..RXC.REXX(&MBR.)        SOURCE\nD//REXX.SYSCEXEC DD DISP=OLD,DSN=&SYSUID..RXC.CEXEC(&MBR.)    Compiled\nD//REXX.SYSPRINT DD DISP=OLD,DSN=&SYSUID..RXC.REXXLIST(&MBR.) Listing\nD//REXX.SYSTERM DD DISP=OLD,DSN=&SYSUID..RXC.REXXCOMP(&MBR.)  Errors\nD//*\n* End of wish.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXCP0110": {"ttr": 32005, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SRXCP0110\nTREXX Compiler Presentation\nT-George Fulk -Example source MORT\nE\"Kenneth E. Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20070501-143000\nWhttp://rexxla.org\n@George Fulk IBM Corporation\n*\nNUsing the REXX Compiler\nN=======================\nNSlide 37 of 39 contains source code similar to the lines below.\nN\nD/* REXX */\nDARG owed rate years\nDPARSE VERSION v1\nDPARSE SOURCE v2\nDSAY v1 v2\nDmonthly = owed * (rate/1200) * (1+1/(((1+rate/1200)**(12*years)-1)))\nDSAY \"Monthly payment = $\" || FORMAT(monthly,,2)\nDRETURN 0\nI\nIThe REXX Compiler expects the first record to be a comment with the\nItext-string REXX. TSO/E's 'System Program Interpreter (SPI)' only\nIrequires a comment on the first record if read from //SYSPROC.\nITo keep the REXX Compiler happy the comment is first and short.\nM\nMKenneth Tomiak remark:\nMVM must have needed the comment to distinguish REXX from the\nMEXEC and EXEC2 scripting languages. And that led to the REXX\nMCompiler's incorrect assumption the comment must be first.\n* End of wish.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXCP0111": {"ttr": 32007, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SRXCP0111\nTREXX Compiler Presentation\nT-George Fulk -Example REXXC\nE\"Kenneth E. Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20070501-143000\nWhttp://rexxla.org\n@George Fulk IBM Corporation\n*\nNUsing the REXX Compiler\nN=======================\nNSlide 33 of 39 contains JCL to compile the MORT source.\nN\nD//PROCS JCLLIB ORDER=(FAN140.PROCLIB)                        Procs\nD//*\nD//*******************************************************************\nD//** (1) COMPILE REXX PROGRAM\nD//** INPUT: REXX.SYSIN = REXX SOURCE CODE\nD//** REXX.STEPLIB = COMPILER LIBRARY (REXXC SFANLMD)\nD//** OUTPUT: REXX.SYSPUNCH = OBJECT OUTPUT\nD//** REXX.SYSCEXEC = CEXEC OUTPUT\nD//*******************************************************************\nD//COMPILE EXEC REXXC,\nD//             OPTIONS='XREF NOOBJECT NOSLINE'\nD//*REXX.STEPLIB DD DISP=SHR,DSN=FAN140.SFANLMD          Rexx-Compiler\nD//REXX.SYSIN DD DISP=SHR,DSN=&SYSUID..RXC.REXX(MORT)         SOURCE\nD//REXX.SYSCEXEC DD DISP=OLD,DSN=&SYSUID..RXC.CEXEC(MORT)     Compiled\nD//REXX.SYSPRINT DD DISP=OLD,DSN=&SYSUID..RXC.REXXLIST(MORT)  Listing\nD//REXX.SYSTERM DD DISP=OLD,DSN=&SYSUID..RXC.REXXCOMP(MORT)   Errors\nD//*\n* End of wish.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXCP0112": {"ttr": 32009, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SRXCP0112\nTREXX Compiler Presentation\nT-George Fulk -Example REXXL\nE\"Kenneth E. Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20070501-143000\nWhttp://rexxla.org\n@George Fulk IBM Corporation\n*\nNUsing the REXX Compiler\nN=======================\nNSlide 34 of 39 contains JCL to STUB the object.\nN\nD//*******************************************************************\nD//** (2) CREATE OBJECT DECK WITH MULTISTUB (EAGSTMP BY USING REXX\nD//** EXEC REXXL, ALIAS OF EAGCML)\nD//** INPUT: SYSIN = OUTPUT FROM COMPILER\nD//** SYSEXEC = LOCATION FOR REXXL (REXX SOURCE FOR BIND)\nD//** OUTPUT: SYSOUT = TEMPORARY OBJECT DECK (INPUT TO LINK)\nD//*******************************************************************\nD//ST01#01 EXEC PGM=IRXJCL,PARM='%REXXL MULTI'\nD//SYSTSIN   DD DUMMY\nD//SYSEXEC   DD DISP=SHR,DSN=FAN140.SEAGCMD              REXX-Library\nD//SYSTSPRT  DD SYSOUT=*\nD//SYSIN     DD DISP=SHR,DSN=&SYSUID..RXC.OBJLIB(MORT)        OBJECT\nD//SYSPRINT  DD DISP=OLD,DSN=&SYSUID..RXC.REXXLIST(MORT)      Listing\nD//SYSOUT    DD DISP=OLD,DSN=&SYSUID..RXC.STUBBED(MORT)   Stubbed-OBJ\nD//*            DISP=(NEW,CATLG),DSN=&SYSUID..RXC.STUBBED(MORT),\nD//*            UNIT=SYSDA,SPACE=(TRK,(2,1,1)),\nD//*            DCB=(RECFM=FB,BLKSIZE=0,LRECL=80)\nD//*\n* End of wish.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXCP0113": {"ttr": 32011, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SRXCP0113\nTREXX Compiler Presentation\nT-George Fulk -Example BINDER\nE\"Kenneth E. Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20070501-143000\nWhttp://rexxla.org\n@George Fulk IBM Corporation\n*\nNUsing the REXX Compiler\nN=======================\nNSlide 35 of 39 contains JCL to BIND the STUB into a load module.\nN\nD//*******************************************************************\nD//** (3) LINK THE STUB WITH COMPILED REXX\nD//** INPUT: SYSLIN = (INPUT FROM STUB)\nD//** SYSLIB = LIBRARY FOR LINK/REXX\nD//** OUTPUT: SYSLMOD = RESULTING END PRODUCT MODULE\nD//*******************************************************************\nD//ST01#01 EXEC PGM=HEWL,PARM='LIST,AMODE=31,RMODE=ANY,RENT,MAP'\nD//SYSLIN    DD DISP=SHR,DSN=&SYSUID..RXC.STUBBED(MORT)   Stubbed-OBJ\nD//          DD *\nD  NAME MORT(R)\nD/*\nD//SYSLIB    DD DISP=SHR,DSN=FAN140.SEAGLMD               REXX-Library\nD//SYSUT1    DD UNIT=SYSDA,SPACE=(1024,(200,20))          I/O Workarea\nD//SYSPRINT  DD DISP=OLD,DSN=&SYSUID..RXC.IEWBLINK(MORT)  Listing\nD//SYSLMOD   DD DISP=OLD,DSN=&SYSUID..RXC.LOADLIB         Load MODULE\nD//*\n* End of wish.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXCP0114": {"ttr": 32013, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SRXCP0114\nTREXX Compiler Presentation\nT-George Fulk -Example EXECUTION\nE\"Kenneth E. Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20070501-143000\nWhttp://rexxla.org\n@George Fulk IBM Corporation\n*\nNUsing the REXX Compiler\nN=======================\nNSlide 36 of 39 contains JCL to execute the load module\nNand complied REXX.\nN\nD//*\nD//******************************************************************\nD//* (4) RUN COMPILED STUB\nD//* INPUT: STEPLIB = LOCATION OF MODULE & RUN-TIME LIBRARY\nD//******************************************************************\nD//ST01#02 EXEC PGM=MORT,PARM='160000 6.375 30',REGION=512K\nD//STEPLIB   DD DISP=SHR,DSN=&SYSUID..RXC.LOADLIB         Load MODULE\nD//          DD DISP=SHR,DSN=FAN140.SEAGLPA              REXX-Library\nD//SYSTSPRT  DD SYSOUT=*\nD//*\nD//******************************************************************\nD//* (5) RUN CEXEC\nD//* INPUT: SYSTSIN = LOCATION OF Compiled REXX MODULE\nD//*        STEPLIB = LOCATION OF RUN-TIME LIBRARY\nD//******************************************************************\nD//ST02#02 EXEC PGM=IKJEFT1B,PARM='',REGION=4M\nD//STEPLIB   DD DD DISP=SHR,DSN=FAN140.SEAGLPA             REXX-Library\nD//SYSTSIN   DD *\nD  EXEC RXC.CEXEC(MORT) '165000 6.25 30'\nD/*\nD//SYSTSPRT  DD SYSOUT=*\nD//*\n* End of wish.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT972/CBT.V500.FILE972.PDS/XMRXCP.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT972/CBT.V500.FILE972.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}