{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011659000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1587222, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE299.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1587222, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1587222, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE299.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x1a\\x02'", "DS1TRBAL": "b'\\xd7\\x06'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x08\\x00\\x08\\x02\\n\\x00\\x04\\x00\\x1b'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$NOTE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00X\\x00\\x93 \\x0f\\x01\\x05\\x03?\\x18Y\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1993-07-19T00:00:00", "modifydate": "2005-02-02T18:59:58", "lines": 24, "newlines": 24, "modlines": 0, "user": "SBGOLOB"}, "text": "\nThis is just to note that I am including the older version of TAPEMAP\nin this file, because TAPEMAP is hard to test.  There may be a case\nwhen the old one works and the new one doesn't.  If there are any\nproblems......       email:  sbgolob@attglobal.net\n\nI made sure to blank out the DATE DAY TIME fields in the TODAY CSECT,\nbecause x'00' characters were appearing in the TAPEMAP report headings.\n(SBG - 06/22/01)\n\nPlease see member $DTCNOTE for Joel Ewing's day-of-week corrections.\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$$#DATE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00\\x10\\x01\\x19\\x02?\\x01\\x19\\x02?\\x15R\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-01-23T00:00:00", "modifydate": "2019-01-23T15:52:10", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-497"}, "text": "REGULAR CBT TAPE - VERSION 497    FILE:  299\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT497.FILE299\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 22 MEMBERS COUNTED; CUMULATIVE SIZE IS 14,694 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/23/19    15:52:10    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x91\\x00\\x1f\\x01\\x00)\\x9f\\x112\\x00Y\\x00X\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1991-01-01T00:00:00", "modifydate": "2000-10-25T11:32:00", "lines": 89, "newlines": 88, "modlines": 0, "user": "WSBG"}, "text": "                  SOME ADDITIONS TO TAPEMAP\n\n ADDED SUPPORT TO TAPEMAP:   11/28/88\n\n    1.  IEBUPDTE UNLOADED PDS'ES WHOSE MEMBERS THEMSELVES,\n         ARE IEBUPDTE INPUT STREAMS, WITH THE ./ STRINGS\n         CONVERTED TO ><, ARE NOW DISPLAYABLE BY MEMBER\n         NAME.  \"REAL\" PDS MEMBER NAMES ARE PRECEDED BY A-,\n         C-, OR R- AS BEFORE.  \"SUBORDINATE MEMBER NAMES\"\n         ARE PRECEDED WITH A>, C>, OR R> TO DISTINGUISH\n         THEM FROM THE \"REAL\" MEMBER NAMES.\n\n    2.  TAPEMAP SUPPORT FOR THE CBT TAPE HAS BEEN INSTALLED.\n         MANY FILES ON THE CBT MVS MODS TAPE ARE IN THE\n         \"COMPRESSED IEBUPDTE\" FORMAT.  THIS PROCESS USES A\n         PROGRAM CALLED CBT973 (ITS ACTUAL NAME) TO DO DATA\n         COMPRESSION, AFTER THE ORIGINAL FILE (A PDS) WAS\n         UNLOADED BY IEBUPDTE.\n\n        A FILE IN THE ABOVE FORMAT IS LABELED AS \"CBT973\"\n         UNLOADED IN REPORT ONE OF THE TAPEMAP PROGRAM.\n         IF THE ORIGINAL FILE HAD IEBUPDTE CONTROL CARDS,\n         THE MEMBER NAMES ON THEM ARE DISPLAYED IN REPORT\n         TWO, INCLUDING THE IMPROVEMENTS TO THE DISPLAY\n         MENTIONED ABOVE.\n\n        \"EMPTY\" FILES ON THE CBT MODS TAPE HAVE ONE RECORD\n         IN CBT973 FORMAT.  IN ORDER TO DISTINGUISH WHICH\n         FILES HAVE CONTENT, AND WHICH ARE JUST PLACEHOLDERS,\n         THE DESIGNATION \"CBTEMPTY\" AS THE UNLOADER NAME,\n         IS DISPLAYED IN REPORT ONE, TO SHOW AN \"EMPTY FILE\"\n         ON THE CBT TAPE.  \"PARM=INLINE\" EXECUTION OF THE\n         TAPEMAP PROGRAM REFLECTS THIS DISTINCTION ALSO.\n\n        IT IS SUGGESTED TO \"TAPEMAP\" A CBT TAPE, SO YOU CAN\n         SEE HOW NICELY THE CONTENTS ARE DISPLAYED.\n\n    3.  A GLOBAL VARIABLE &LINEPPG WAS INSERTED SO YOU CAN\n         DETERMINE THE NUMBER OF LINES BEFORE A PAGE EJECT.\n         THIS WILL MAKE IT EASIER TO ADJUST THE REPORTS FOR\n         THE PRINTERS YOU HAVE AVAILABLE.\n\n ADDED SUPPORT TO TAPEMAP:   12/15/88\n\n    1.  IMPROVED SUPPORT FOR THE CBT TAPES TO:\n          A.  SHOW DATE AND VERSION NUMBER OF THE DOCUMENTATION\n                FILE.\n          B.  FIXED BUG ON PARM=INLINE TO SHOW THE RESULT OF\n                THE LABEL FORMATTING FOR SL TAPES, AS WELL\n                AS THE RESULT OF THE SCAN PROCESSING.\n          C.  FLAGGED THE CBT TAPE DOCUMENTATION FILE ON\n                PARM=INLINE PROCESSING.\n\n    2.  TACKLED THE PROBLEM OF EXCEEDING THREE BASE REGISTERS.\n          THIS WAS RELIEVED BECAUSE THE TAPEMAP PROGRAM HAS\n          A LARGE NUMBER OF LITERALS IN IT.  SOME OF THESE\n          WERE MOVED TO THE END OF THE PROGRAM AND ADDRESSED\n          BY MEANS OF AN ADCON.  A DUPLICATION OF THESE LITERALS\n          WAS PLACED IN THE ADDRESSABLE WORKAREA DSECT, WHICH\n          USES R13.  AT THE BEGINNING OF PROGRAM EXECUTION, THE\n          BLOCK OF LITERALS AT THE END OF THE PROGRAM IS MOVED\n          INTO THE APPROPRIATE COPY SPACE IN THE GETMAINED\n          WORKAREA.  THE PROGRAM GETS TO THE WORKAREA COPY\n          THROUGHOUT THE REMAINDER OF ITS EXECUTION.\n\n\n\n                CURRENT ADDRESS:    SAM GOLOB\n                                    Sam Golob Systems Programming\n                                    P.O. BOX 906\n                                    Tallman, NY 10982-0906\n                MESSAGE MACHINE:\n\n\n        PLEASE NOTE THAT THE SLAC ASSEMBLER H VERSION 2 IS A\n        CONSIDERABLE HELP IN DEBUGGING CODE, AND IN FOLLOWING THE\n        ASSEMBLY OF A MODULE IN GENERAL.  IT HAS A MACRO REFERENCE\n        FOR ALL MACROS HIT DURING THE ASSEMBLY.  INTERESTED PARTIES\n        CAN INQUIRE FROM ME HOW TO GET THIS ASSEMBLER.  YOUR\n        INSTALLATION MUST ALREADY BE LICENSED FROM IBM TO USE\n        ASSEMBLER H VERSION 2.  I DO NOT ASSUME ANY RESPONSIBILITIES\n        IN HELPING AN INSTALLATION TO OBTAIN OR USE THIS PRODUCT.\n        THIS IS MERELY AN INVITATION TO INQUIRE ABOUT IT FROM ME.\n                                           11/88 SBG\n\n        IBM'S NEW HIGH LEVEL ASSEMBLER (HLASM) IS A SUCCESSOR PRODUCT\n        TO THE SLAC ASSEMBLER, AND IT IS SUPPORTED BY IBM.\n                                           06/93 SBG\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$DOC": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x91\\x00\\x1f\\x00\\x93\\x16/\\t\\x05\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1991-01-01T00:00:00", "modifydate": "1993-06-11T09:05:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SBGCSC"}, "text": "$$DOC......THIS MEMBER THE INDEX MEMBER\nASMJCL.....JCL TO ASSEMBLE AND LINKEDIT TAPEMAP\nCBTJCL.....JCL USED TO EXECUTE THE PROGRAM AT CBT\nMAPTEST....JCL TO CREATE A TEST TAPE IN DIFFERENT FORMATS\nTAPEMAP....UPDATED VERSION FROM SAM GOLOB (FORMERLY) OF NEWSWEEK\n           MODIFIED TO LOOK FOR AN SMPPTFIN FORMAT TAPE\n           BEFORE LOOKING FOR AN IEBUPDTE FORMAT TAPE\n           A/O 04/26/88 3480 TAPE SUPPORT ADDED BY TENNIE OLSON\n           ADDED SUPPORT FOR ><ADD, CHANGE ETC. IN IEBUPDTE UNLOADED\n           PDS MEMBERS.  SUPPORT FOR CBT973-COMPRESSED FILES.\n           ALSO RECOGNIZE \"EMPTY\" FILES ON THE CBT TAPE. S.GOLOB-11/88.\n\n\nX3480......SOME THOUGHTS ON 3480'S DENSITY\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$DOCHAL": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x04\\x1f\\x01\\x00\\x04\\x1f#$\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-10T00:00:00", "modifydate": "2000-02-10T23:24:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: Changes I made to FILE299 Tapescan to prevent\n         incorrect DENSITY error msg print\nDate:  Thu, 10 Feb 2000 13:23:44 -0500\nFrom:  John.Hallgren@equifax.com\nTo:    sbgolob@cbttape.org\n\nHi!\n\nAfter testing it on our RS6000 tapes, I found that it was showing\nthe \" **One or more files have density indicated incorrectly in\nlabels. All files are written at 1600 BPI\" message when NOT\napplicable or true!\n\nBecause, in code that Ron Tansky added in 1993, he set default\nvalues in HDR2 to the \"?\" char as HDR2 is not found on these\ntapes, which is fine.  BUT, then at EOF, the hardware true density\nis compared to saved HDR2 value. This compare will ALWAYS fail due\nto \"?\" and thus create the bad density message.  The code I have\nadded (and my modif tag line) addresses this problem.\n\nI have tested this and it appeared to work correctly.  Not maybe\nthe best code, but it fixes the misleading message.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE1": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00R\\x01\\x04\\x07\\x7f\\x01\\x19\\x02?\\x14Q\\x00\\x19\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2004-03-17T00:00:00", "modifydate": "2019-01-23T14:51:52", "lines": 25, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "Note:  S.Golob - Peter McFarland's changes have been merged into the\n                 member TAPEMAP.  No extra member TAPEMAPF required.\n\nThe version of TAPEMAP called TAPEMAPF was modified by Peter McFarland\nto take care of the case when the UCB extension is above the line, and\nTAPEMAP hasn't taken the proper measures to get the sense materials.\nPeter's solution is simply to skip the sense reporting, because at\nthose MVS levels where this is relevant, the JOBLOG reports the sense\nvalues anyway.\n\nUntil we have a better solution than this kludge, I'm leaving Peter's\nversion out there (same as TAPEMAP, except skipping the sense reporting\nunder certain conditions) as member TAPEMAPF.  (SG-03/04)  The load\nmodule library File 035 will also receive an extra member TAPEMAPF, for\nthose who don't have time to assemble and link.\n\nSam Golob  March 17, 2004     sbgolob@cbttape.org\n\nPeter M. McFarland       Sr. Systems Engineer\n                         ADP Tax & Financial Services\n                         (858) 385-2718\n                         (909) 917-9335 cell\n                         Direct Connect 489\n                         Peter_Mcfarland@adp.com\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE2": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00G\\x01\\x05\\x03?\\x01\\x05\\x03?\\x15S\\x00\\x1e\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-02-02T00:00:00", "modifydate": "2005-02-02T15:53:47", "lines": 30, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "*---------------------------------------------------------------*\n* CHANGES BY SAM GOLOB   2005/02/02    VERSION 2.2              *\n*                                                               *\n* ALLOWED FOR SMP/E CHANGES FOR RECENT SYSTEM LEVELS (z/OS 1.5) *\n*                                                               *\n* A ++ASSIGN CARD ON THE TOP OF AN SMPPTFIN FILE USED TO THROW  *\n* OFF THE SMPPTFIN FORMAT DETECTION.  NOW A FEW DIFFERENT SMP/E *\n* CONTROL CARDS WILL INDICATE THE PRESENCE OF AN SMPPTFIN FILE, *\n* BUT THEY WILL NOT CAUSE THE PRINT OF SYSMOD NUMBERS IN THE    *\n* SYSPRNT2 DD NAME.  THESE DELIBERATELY DO NOT INCLUDE SUCH     *\n* SMP/E CONTROL CARDS THAT WOULD NORMALLY OCCUR IN THE MIDDLE   *\n* OF A PTF OR OTHER SYSMOD, SUCH AS:  ++MOD, ++MAC, ++SRC,      *\n* ++MACUPD, ++SRCUPD, OR THE ++DATA TYPE OF CARDS.  ++JCLIN     *\n* IS INCLUDED IN THE FOLLOWING LIST, EVEN THOUGH IT NORMALLY    *\n* WOULD OCCUR WITHIN A PTF.  THE REASON FOR THAT IS THAT IT IS  *\n* POSSIBLE FOR A PURE ++JCLIN STREAM TO BE INPUTTED TO SMP/E,   *\n* SO SUCH A FILE SHOULD BE MARKED AS THOUGH IT IS IN SMPPTFIN   *\n* FORMAT, PROVIDED THAT A ++JCLIN CARD IS INSERTED AT THE TOP   *\n* OF THE FILE.                                                  *\n*                                                               *\n*   LIST OF SUCH SUPPORTED SMP/E CONTROL CARDS CURRENTLY....    *\n*  ++ ASSIGN                                                    *\n*  ++ HOLD                                                      *\n*  ++ RELEASE                                                   *\n*  ++ FEATURE                                                   *\n*  ++ PRODUCT                                                   *\n*  ++ NULL                                                      *\n*  ++ JCLIN                                                     *\n*                                                               *\n*---------------------------------------------------------------*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE3": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x16\\x01\\x06\\x18o\\x01\\x19\\x02?\\x14R\\x00\\x15\\x00\\x06\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2006-07-05T00:00:00", "modifydate": "2019-01-23T14:52:16", "lines": 21, "newlines": 6, "modlines": 0, "user": "SBGOLOB"}, "text": "Changes for June 2006 -- V2.4 -- Steve Myers\n\nAdded support for more than 9999 files to echo IBM support added\nin z/OS 1.5.  For files greater than 9999, the format of FL1FILSQ\nchanges.  The first byte is an EBCDIC question mark (?) followed by\nthe file sequence number in 3 bytes as a binary value.\n\n----------------------------------------------------------------------\n\nChanges backed out by Sam Golob - Mar 18, 2008 - V2.5\n\n  Reason was that file numbers in SYSPRNT2 report were incorrectly\n  reported.  S.Myers' changes need to be fixed and reinserted.\n\n----------------------------------------------------------------------\nNote from Sam Golob - Jan 23, 2019 - V2.5.1\n\n  File numbers in the SYSPRNT2 report now appear to be correct.\n  But the format of the report had to be altered, and therefore\n  this version is being kept separate, as member TAPEMAPM.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$ASM": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x00\\x1f\\x00\\x91\\x00\\x1f\\x12\\x00\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf9\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-01-01T00:00:00", "modifydate": "1991-01-01T12:00:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "FILE299"}, "text": "//TST2LSG$ JOB (TS,2322),'TECH-S.GOLOB',CLASS=M,NOTIFY=TST2SSG,\n//        MSGLEVEL=(1,1),MSGCLASS=L TYPRUN=HOLD\n//*******************************************************************\n//*   ASSEMBLE ONLY\n//*******************************************************************\n//S02ASM  EXEC ASMHSLC,\n//    PARM.C='ALIGN,NODECK,NOOBJECT,OPCXA,NRLIST,OPCNTS,NOTERM'\n//C.SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB,DCB=BLKSIZE=32760\n//       DD DSN=SYS1.ATSOMAC,DISP=SHR\n//       DD DSN=SYS1.AMODGEN,DISP=SHR\n//C.SYSIN DD DSN=TST2SSG.TAPEMAP.SHIP(TAPEMAP),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DTCNOTE": {"ttr": 535, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x07\\x01\\x03\\x17\\x7f\\x01\\x03\\x17\\x7f\\x146\\x00w\\x00d\\x00\\x00\\xe4\\xd1\\xc5\\xe6\\xc9\\xd5\\xc7@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2003-06-26T00:00:00", "modifydate": "2003-06-26T14:36:07", "lines": 119, "newlines": 100, "modlines": 0, "user": "UJEWING"}, "text": "2003-06-26\n  Someone in our Operations Dept. noticed (after 3 years) that the day\nof week in the page headings on TAPEMAP was incorrect (off by one day).\nAfter downloading the latest version of TAPEMAP from the web site\n(CBT460), I found that the latest version was off by 3 days!\n  Obviously the simplest fix would be to just remove the day of week\nfrom the heading information, as its function is purely cosmetic.\nHowever, I've done much work with date routines in the past and never\nliked mysteries, so instead I decided to waste a few hours solving the\nproblem.\n  Looking at the TAPEMAP code, the algorithm for day-of-week was very\nobscure and complex compared with other techniques I have used.  A +2\nkludge patch was added in 2000, and this may very well have worked for\nthat year, but it obviously did not solve the problem for later years.\n  I replaced the day-of-week code in 'TODAY' with a shorter, simpler\nalgorithm based on Lilian dates and code that I introduced at\nData-Tronics in 1991, an algorithm that was known to be Y2K compliant\nand straight-forward enough to demonstrate correctness.  The\naccompanying version of TAPEMAP includes those changes.\n\n                            -----\n  I found the original algorithm interesting as an intellectual\nchallenge.  I have since, with the help of REXX, managed to analyze what\nwas broken by Y2K in the original algorithm used in TAPEMAP and have\nfigured out how to fix that algorithm; but that makes the original\nalgorithm even longer and perhaps even more obscure.  For the sake of\nthe equally curious I am including my analysis of the original\nalgorithm.\n\n  Restatement of original algorithm:\nFor a date ccyy/mm/dd,  calculate\n  mx = Mod(mm+9,12) + 1  (convert month ordinal to 11,12,1,2,...,10)\n  If mx > 10 (Jan or Feb) Then yx = yy - 1\n                          Else yx = yy\n  Using integer arithmetic (discard remainders),\n  b = yx/4\n  D = (13*mx -1)/5  + b + cc/4 + dd + yx - 2*cc\n  DayofWeekOrdinal = Mod(D,7) + 1  (1=Sun,..., 7=Sat)\n\n  There are actually two separate problems that occur on transition from\n1999 to 2000.  The term yx becomes negative for Jan and Feb of 2000,\nwhich causes inconsistent results for yx/4.  This can be fixed by\ninstead calculating (REXX code)\n  If yx < 0 Then b = -1\n            Else b = Trunc(yx/4, 0)\n  The second problem is also sign related.  In 2000 the term '-2*cc'\ncombined with yx becoming small forces D negative, which invalidates the\ncode that is attempting to evaluate 'Mod(D,7)'.  One way to correct this\nis by replacing the '-2*cc' term with '+5*cc', which is mathematically\nequivalent in this context.  This is the same as adding '7*cc', which is\nthe same as 0 mod 7, leaving the end result unchanged.\n\n  The deeper puzzle is how to demonstrate that the original (or\nmodified form) of the algorithm makes sense, as it does not appear\nto have any obvious derivation from the Gregorian calendar.  After\nseveral days of staring at this creation I came to the following\nintuitive but non rigorous arguments:\n  Assuming that only the 'yy' part of the date changes, the number\nof days in a normal (nonleap) year is 365 and mod(365,7) = 1, so it\nis reasonable (subject to leap year correction) that the day ordinal\nshould increase by 1 mod 7 each time yy increases by 1.\n  Assuming only the 'dd' part of the date changes, each time 'dd'\nadvances by one, the day-of-week ordinal should also advance by\n1 mod 7, so the addition of 'dd' in 'D' makes sense.\n  Each time a leap year occurs, the day ordinal needs an extra +1\nbump.  The 'b' term adds this extra bump every 4 years, with the\nstrange '-1' offset to yx in Jan and Feb delaying the bump for those\nmonths by one year.  There is another mechanism (hidden in the '-2*cc')\nthat subtracts off 1 for century years, so the 'cc/4' adds the bump\nback in for centuries evenly divisible by 400.\n  The (13*mx -1)/5 term is very obscure.  I don't see any way to\nderive this by rational argument, but one can prove empirically that\nit works based on the cumulative days in the year preceding the first\nday of each month.  For non leap years:\nMonth  PD=PriorDays  Mod(PD,7)   mx   (13*mx-1)/5 +yx effect  mod 7\nJan         0           0        11      28           28        0\nFeb        31           3        12      31           31        3\nMar        59           3         1       2            3        3\nApr        90           6         2       5            6        6\nMay       120           1         3       7            8        1\nJun       151           4         4      10           11        4\nJul       181           6         5      12           13        6\nAug       212           2         6      15           16        2\nSep       243           5         7      18           19        5\nOct       273           0         8      20           21        0\nNov       304           3         9      23           24        3\nDec       334           5        10      25           26        5\nJan yr+1  365           1\n\nThe 'yx effect is the result of yx being one less for Jan and Feb of a\ngiven year.  Although the values added to 'D' by this formula plus the\nyx +1 bump after March bear no resemblance to the actual day offset of\nthe first day of the month, when taken mod 7 the result is identical.\nThus if only the 'mm' part of the date changes, this term should give\nthe correct offsets to the day ordinal to transition from month to\nmonth.\n  The only remaining unexplained term is the '-2*cc' or '+5*cc'.  Every\ntime the century increases, as from 1999 to 2000, the year yy goes\nfrom 99 back to 00.  This disrupts the effect of adding in yx and\nb = yx/4 by making these values 100 and 25 less than they ought to be.\nSo each time the century increases by +1 we need to add in an extra\n125.  But, since most centuries are not leap years, we really only want\nto add 24, not 25 as the b term compensation.  (remember the cc/4 term\nis handling the divisible by 400 exception).  Thus we need to add a\ncorrective term of '124*cc'.  But, in mod 7 arithmetic,\n  124 * cc = 5 * cc = -2 * cc   (mod 7).\n\n  The above demonstrates in a somewhat intuitive fashion, that if the\nmodified algorithm returns the correct day ordinal for one date, that\nthe day ordinal should be incremented correctly as the cc, yy, mm, and\ndd values advance, so at worst we may need to add a constant term to\nmake things work for all dates.  Checking for a specific date shows that\nno additional constant is required.  It's possible the above could be\nconverted into a rigorous proof of correctness for the modified\nalgorithm, but I didn't feel inclined to carry things quite that far.\n                           Joel C. Ewing\n                           Sr. Technical Admin, Mainframe Systems\n                           Data-Tronics Corp.\n                           Fort Smith, AR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE299": {"ttr": 538, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00\\x04\\x01\\x19\\x02?\\x01\\x19\\x02?\\x15R\\x00a\\x00a\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-01-23T00:00:00", "modifydate": "2019-01-23T15:52:04", "lines": 97, "newlines": 97, "modlines": 0, "user": "CBT-497"}, "text": "//***FILE 299 contains the source for the TAPEMAP program.  This    *   FILE 299\n//*           version is a compilation of the original code from    *   FILE 299\n//*           UCLA (that used to be in File 149) and the modified   *   FILE 299\n//*           code that used to be in File 316 from the Air Force,  *   FILE 299\n//*           and includes many additional changes from various     *   FILE 299\n//*           places and various people.                            *   FILE 299\n//*                                                                 *   FILE 299\n//*           A load module library in XMIT format has now been     *   FILE 299\n//*           included in this pds.  Please see member LOADLIB$     *   FILE 299\n//*           for JCL to create the load library on your system.    *   FILE 299\n//*                                                                 *   FILE 299\n//*           Y2K fix to day of week routine, by Joel Ewing.        *   FILE 299\n//*           This is in the TODAY CSECT.                           *   FILE 299\n//*                                                                 *   FILE 299\n//*   ---->>  *BEGIN* NEWS: ------                                  *   FILE 299\n//*                                                                 *   FILE 299\n//*           Another version of TAPEMAP, as member TAPEMAPM,       *   FILE 299\n//*           contains changes from Steve Myers to accommodate      *   FILE 299\n//*           File Sequence Numbers greater than 9999.  The         *   FILE 299\n//*           reason that this is being presented as a separate     *   FILE 299\n//*           member, is that it reformats the reports somewhat.    *   FILE 299\n//*           That version of TAPEMAP (TAPEMAPM) has been marked    *   FILE 299\n//*           as Version 2.5.1 to differentiate it from the other   *   FILE 299\n//*           TAPEMAP (Version 2.5), and from the TAPEMAP version   *   FILE 299\n//*           on File 804 (Version 2.5.3).                          *   FILE 299\n//*                                                                 *   FILE 299\n//*           Updated with a new list of DASD device types for      *   FILE 299\n//*           the map of FDR tapes.  (J. Kalinich and Bruce Black)  *   FILE 299\n//*                                                                 *   FILE 299\n//*           There is another version of TAPEMAP, which resides    *   FILE 299\n//*           in CBT File 804.  That version corresponds in level,  *   FILE 299\n//*           to our Version 2.5, but it has replaced most of       *   FILE 299\n//*           the branch instructions (e.g. BNE) with jump          *   FILE 299\n//*           instructions (e.g. JNE), and 3 base registers are     *   FILE 299\n//*           saved in the process.  The current version of TAPEMAP *   FILE 299\n//*           here, has not been replaced, because of the MVS 3.8   *   FILE 299\n//*           people who are assembling this program using IFOX00.  *   FILE 299\n//*                                                                 *   FILE 299\n//*           Added an XMIT of a load library which contains the    *   FILE 299\n//*           following TAPEMAP versions:   (member LOADLIB)        *   FILE 299\n//*                                                                 *   FILE 299\n//*           member     CBT File    Version                        *   FILE 299\n//*           ------     --------    -------                        *   FILE 299\n//*           TAPEMAP      299        2.5                           *   FILE 299\n//*           TAPEMAPM     299        2.5.1                         *   FILE 299\n//*           TAPEMAPX     804        2.5.3                         *   FILE 299\n//*                                                                 *   FILE 299\n//*   ---->>  *END* NEWS: ------                                    *   FILE 299\n//*                                                                 *   FILE 299\n//*           THIS PROGRAM WILL PROVIDE SPECIAL INFORMATION FOR     *   FILE 299\n//*           TAPE FILES CREATED BY IEBCOPY, IEHMOVE, IEBISAM,      *   FILE 299\n//*           IEHDASDR, OR IN SMPPTFIN FORMAT.  IN ADDITION, IF     *   FILE 299\n//*           A FILE CONTAINS AN IEBUPDTE INPUT STREAM THE          *   FILE 299\n//*           MEMBERS IN THE STREAM WILL BE LISTED.                 *   FILE 299\n//*                                                                 *   FILE 299\n//*           This program will also provide special                *   FILE 299\n//*           information for CBT MVS Utilities Tapes created       *   FILE 299\n//*           with CBT973.  IEBUPDTE interpretation is done for     *   FILE 299\n//*           CBT973-compressed files.                              *   FILE 299\n//*                                                                 *   FILE 299\n//*           Also, macros in members that are themselves macro     *   FILE 299\n//*           libraries (in IEBUPDTE format with ./ changed to ><)  *   FILE 299\n//*           will be listed.  Thus, with this TAPEMAP you can      *   FILE 299\n//*           find almost any member name on the CBT Tape.          *   FILE 299\n//*                                                                 *   FILE 299\n//*           See also the load module for TAPEMAP on File 035.     *   FILE 299\n//*                                                                 *   FILE 299\n//*    For questions, I am leaving my name for reference:           *   FILE 299\n//*                                                                 *   FILE 299\n//*           Sam Golob    email:  sbgolob@cbttape.org              *   FILE 299\n//*                                                                 *   FILE 299\n//*    PARENTHETICAL NOTE:                                          *   FILE 299\n//*                                                                 *   FILE 299\n//*           The old version of TAPEMAP, called TAPEMAPO, is       *   FILE 299\n//*           included both on this file, and on File 035.  The     *   FILE 299\n//*           newer version was revised by Ron Tansky.  Due to      *   FILE 299\n//*           the tediousness of testing any new version of         *   FILE 299\n//*           TAPEMAP, its old version has not been deleted,        *   FILE 299\n//*           just in case the new version affects some of the      *   FILE 299\n//*           code that worked before.  You can simply say EXEC     *   FILE 299\n//*           PGM=TAPEMAPO, instead.  I've tested the new           *   FILE 299\n//*           version, but we're trying to be on the safe side.     *   FILE 299\n//*           (TAPEMAP is read-only anyway.)                        *   FILE 299\n//*                                                                 *   FILE 299\n//*           Peter McFarland put in a kludge into the TAPEMAP      *   FILE 299\n//*           code, to get around the case when the UCB extension   *   FILE 299\n//*           is above the 16M line, and the sense information      *   FILE 299\n//*           has not been gotten correctly.                        *   FILE 299\n//*                                                                 *   FILE 299\n//*           email:  Peter_Mcfarland@adp.com                       *   FILE 299\n//*                                                                 *   FILE 299\n//*           Sam Golob fixed (hopefully) some of the SMPPTFIN      *   FILE 299\n//*           finding code, to allow for SYSMODs starting with      *   FILE 299\n//*           a ++ASSIGN card.  TAPEMAP now treats such files as    *   FILE 299\n//*           being in SMPPTFIN format, and correctly displays      *   FILE 299\n//*           the SYSMOD numbers in SYSPRNT2.                       *   FILE 299\n//*                                                                 *   FILE 299\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JCLIEV90": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x00\\x1f\\x00\\x91\\x00\\x1f\\x12\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf9\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-01-01T00:00:00", "modifydate": "1991-01-01T12:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "FILE299"}, "text": "//TST2F299 JOB (TS,2322),'TECH.SUPP-SAM.GOLOB',CLASS=T,NOTIFY=TST2SSG,\n//        MSGLEVEL=(1,1),MSGCLASS=T TYPRUN=HOLD\n//******************************************************************//\n//*       FILE 299 INSTALL                                         *//\n//******************************************************************//\n//***********************************************************\n//*      SAMPLE JCL TO ASSEMBLE AND LINKEDIT THE TAPEMAP    *\n//*      PROGRAM.  USES SLAC V2.9 VERSION OF ASMH VERS 2.   *\n//*      PGM=IEV90 CAN BE RUN, BUT NRLIST, OPCXA, OPCNTS    *\n//*      ARE NOT APPLICABLE OPTIONS FOR IT.  USE SAME JCL.  *\n//***********************************************************\n//ASM     EXEC PGM=AEV90,REGION=2048K,     <== CAN USE IEV90-SAME JCL\n//             PARM=(TERM,TEST,LOAD,NODECK,LIST,NRLIST,OPCXA,OPCNTS)\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR    <== SYS1.MACLIB\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR   <== SYS1.AMODGEN\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(15,5)),\n//             DISP=(,PASS)\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1),RLSE),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=TST2SSG.TAPEMAP.SHIP(TAPEMAP),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,REGION=1024K,\n//             PARM='TEST,XREF,LET,LIST,NCAL',\n//             COND=(0,LT)\n//SYSLMOD  DD  DSN=TST.TSO.CMDLIB(TAPEMAP),DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,DISP=(OLD,DELETE)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLIFOX0": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x00\\x1f\\x00\\x91\\x00\\x1f\\x12\\x00\\x00!\\x00!\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf9\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-01-01T00:00:00", "modifydate": "1991-01-01T12:00:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "FILE299"}, "text": "//TST2F299 JOB (TS,2322),'TECH.SUPP-SAM.GOLOB',CLASS=M,NOTIFY=TST2SSG,\n//        MSGLEVEL=(1,1),MSGCLASS=T TYPRUN=HOLD\n//******************************************************************//\n//*       FILE 299 INSTALL                                         *//\n//******************************************************************//\n//***********************************************************\n//*      SAMPLE JCL TO ASSEMBLE AND LINKEDIT THE TAPEMAP    *\n//*      PROGRAM.                                           *\n//***********************************************************\n//ASM     EXEC PGM=AFOX00,REGION=1024K,   <=== IFOX00 WITH MODS FROM\n//*                                       <===  BILL GODFREY. FILE 300\n//*                                       <===  CALLED \"$$MACROX\"\n//             PARM=(TERM,TEST,LOAD,NODECK)\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(15,5)),\n//             DISP=(,PASS)\n//MACREF   DD  DUMMY\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(15,5))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(15,5))\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*,DCB=BLKSIZE=1089\n//SYSGO    DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1),RLSE),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DSN=TST2SSG.TAPEMAP.SHIP(TAPEMAP),DISP=SHR\n//*\n//LKED    EXEC PGM=IEWL,REGION=1024K,\n//             PARM='TEST,XREF,LET,LIST,NCAL',\n//             COND=(0,LT)\n//SYSLMOD  DD  DSN=TST.TSO.CMDLIB(TAPEMAP),DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,DISP=(OLD,DELETE)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LOADLIB": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x02\\x06\\x00C\\x01\\x19\\x02?\\x01\\x19\\x02?\\x15'\\x02m\\x02m\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@\"", "ispf": {"version": "02.06", "flags": 0, "createdate": "2019-01-23T00:00:00", "modifydate": "2019-01-23T15:27:43", "lines": 621, "newlines": 621, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "LOADLIB#": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x006\\x01\\x05\\x03?\\x01\\x19\\x02?\\x158\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2005-02-02T00:00:00", "modifydate": "2019-01-23T15:38:36", "lines": 12, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBT  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*   CREATE THE LOAD LIBRARY FOR TAPEMAP\n//*\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n RECEIVE INDS(this.pds.name(LOADLIB))\n DSN('whatever.name.you.want')\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MAPTEST": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x91\\x00\\x1f\\x00\\x93\\x19\\x7f\\t\\x01\\x00o\\x00n\\x00\\x0e\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1991-01-01T00:00:00", "modifydate": "1993-07-16T09:01:00", "lines": 111, "newlines": 110, "modlines": 14, "user": "SBGCSC"}, "text": "//SBGCSCA JOB (A006,SYTM,99,99),S-GOLOB,TIME=1440,REGION=8M,\n//        CLASS=Q,MSGCLASS=V,NOTIFY=&SYSUID\n/*DIST ROOM-9\n//*\n//***********************************************************\n//*                                                         *\n//*      SAMPLE JOB TO GENERATE A TAPE THAT WILL TEST THE   *\n//*      CAPABILITIES OF THE TAPEMAP PROGRAM.               *\n//*                                                         *\n//*      THE OFFLOAD PROGRAM IS AVAILABLE FROM THE CBT TAPE *\n//*      IN FILE 225.                                       *\n//*                                                         *\n//***********************************************************\n//*\n//IEHMOVE EXEC PGM=IEHMOVE,REGION=1024K\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=3350,VOL=SER=WORKA1,DISP=OLD\n//DISK     DD  VOL=REF=SYS1.PROCLIB,DISP=OLD\n//TAPE     DD  UNIT=TAPE,VOL=SER=TSTTAP,DISP=(,PASS),\n//             DSN=PROCLIB,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=800)\n COPY PDS=SYS1.PROCLIB,TO=TAPE=TSTTAP,FROM=3350=ASYS01,TODD=TAPE,      *\n               RENAME=PROCLIB\n//*\n//IEBCOPY EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n//I        DD  DSN=SYS1.PROCLIB,DISP=SHR\n//O        DD  DSN=PROCLIB,VOL=REF=*.IEHMOVE.TAPE,LABEL=2,\n//             DISP=(SHR,PASS)\n C I=I,O=O\n//*\n//IEBGENER EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DSN=SYS1.PROCLIB(JES2),DISP=SHR\n//SYSUT2   DD  DSN=JES2PROC,VOL=REF=*.IEHMOVE.TAPE,LABEL=3,\n//             DISP=(SHR,PASS)\n//*\n//FDR     EXEC PGM=FDR,REGION=4096K\n//SYSPRINT DD  SYSOUT=*\n//DISK1    DD  UNIT=3330-1,VOL=SER=JES2CK,DISP=OLD\n//TAPE1    DD  DSN=JES2CK,VOL=REF=*.IEHMOVE.TAPE,LABEL=4,\n//             DISP=(SHR,PASS)\n//*\n//OFDRDSF EXEC PGM=FDRDSF,REGION=4096K\n//SYSPRINT DD  SYSOUT=*\n//DISK1    DD  UNIT=3330-1,VOL=SER=JES2CK,DISP=OLD\n//TAPE1    DD  DSN=JES2CK2,VOL=REF=*.IEHMOVE.TAPE,LABEL=5,\n//             DISP=(SHR,PASS)\n D TYPE=DSF,FORMAT=OLD\n D DSN=SYS1.HASPCKPT\n D DSN=SYS3.JES2.LINKLIB1\n D DSN=SYS3.JES2.LINKLIB2\n D DSN=SYS3.JES2.LINKLIB3\n//*\n//NFDRDSF EXEC PGM=FDRDSF,REGION=4096K\n//SYSPRINT DD  SYSOUT=*\n//DISK1    DD  UNIT=3330-1,VOL=SER=JES2CK,DISP=OLD\n//TAPE1    DD  DSN=JES2CK3,VOL=REF=*.IEHMOVE.TAPE,LABEL=6,\n//             DISP=(SHR,PASS)\n D TYPE=DSF\n D DSN=SYS1.HASPCKPT\n D DSN=SYS3.JES2.LINKLIB1\n D DSN=SYS3.JES2.LINKLIB2\n D DSN=SYS3.JES2.LINKLIB3\n//*\n//IEBUPXXX EXEC PGM=OFFLOAD\n//STEPLIB  DD  DSN=DS.J0PDBC.LOAD,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//I        DD  DSN=SYS1.PROCLIB,DISP=SHR\n//O1       DD  DSN=PROCLIB,VOL=REF=*.IEHMOVE.TAPE,LABEL=7,\n//             DISP=(SHR,PASS),DCB=BLKSIZE=32720\n//O2       DD  DSN=PROCLIB,VOL=REF=*.IEHMOVE.TAPE,LABEL=8,\n//             DISP=(SHR,PASS),DCB=BLKSIZE=32720\n O I=I,O=O1,T=UPDTE\n O I=I,O=O2,T=UPDAT\n//*\n//***********************************************************\n//*                                                         *\n//*      SAMPLE PROGRAM TO TEST THE TAPEMAP PROGRAM WHEN    *\n//*      EXECUTED WITH VARIOUS PARM OPTIONS.                *\n//*                                                         *\n//***********************************************************\n//*\n//TESTA   EXEC PGM=TAPEMAP\n//STEPLIB  DD  DSN=DS.J0PDBC.LOAD,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSPRNT2 DD  SYSOUT=*\n//SYSUT1   DD  UNIT=TAPE,VOL=REF=*.IEHMOVE.TAPE,\n//             DSN=PROCLIB,DISP=SHR\n//*\n//TESTB   EXEC PGM=TAPEMAP,PARM=INLINE\n//STEPLIB  DD  DSN=DS.J0PDBC.LOAD,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSPRNT2 DD  SYSOUT=*\n//SYSUT1   DD  UNIT=TAPE,VOL=REF=*.TESTA.SYSUT1,\n//             DSN=PROCLIB,DISP=SHR\n//*\n//TESTC   EXEC PGM=TAPEMAP,PARM=NOCHECK\n//STEPLIB  DD  DSN=DS.J0PDBC.LOAD,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSPRNT2 DD  SYSOUT=*\n//SYSUT1   DD  UNIT=TAPE,VOL=REF=*.TESTA.SYSUT1,\n//             DSN=PROCLIB,DISP=SHR\n//*\n//TESTD   EXEC PGM=TAPEMAP,PARM=(INLINE,NOCHECK)\n//STEPLIB  DD  DSN=DS.J0PDBC.LOAD,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSPRNT2 DD  SYSOUT=*\n//SYSUT1   DD  UNIT=TAPE,VOL=REF=*.TESTA.SYSUT1,\n//             DSN=PROCLIB,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMFLGS": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x01\\x02\\x05\\x8f\\x01\\x02\\x05\\x8f\\tV\\x00\\x1c\\x00\\x1c\\x00\\x00\\xd7\\xc1\\xd9\\xd4\\xe2@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-02-27T00:00:00", "modifydate": "2002-02-27T09:56:03", "lines": 28, "newlines": 28, "modlines": 0, "user": "PARMS"}, "text": "  This is the section of the TAPEMAP program that has PARM flags.\n\n  It is included in this pds, to help you get an idea of what the\n  possible PARM field entries are.....\n\n\n\n\nPARMFLAG DC    X'00'\nPF@TEST  EQU   X'80'                    TEST\nPF@INLIN EQU   X'40'                    INLINE\nPF@NOMEM EQU   X'20'                    NOMEMBERS (NOMEM)\nPF@DEN1  EQU   X'10'                    DEN1\nPF@NATTR EQU   X'08'                    NOATTR\nPF@NONOT EQU   X'04'                    NONOTE\nPF@NOCHK EQU   X'02'                    NOCHECK (NOSCAN)\nPF@NL    EQU   X'01'                    NL\n         SPACE 1\nPARMTAB  DC    H'3',C'TEST     ',AL1(PF@TEST)\n         DC    H'5',C'INLINE   ',AL1(PF@INLIN)\n         DC    H'8',C'NOMEMBERS',AL1(PF@NOMEM)\n         DC    H'4',C'NOMEM    ',AL1(PF@NOMEM)\n         DC    H'3',C'DEN1     ',AL1(PF@DEN1)\n         DC    H'5',C'NOATTR   ',AL1(PF@NATTR)\n         DC    H'5',C'NONOTE   ',AL1(PF@NONOT)\n         DC    H'6',C'NOCHECK  ',AL1(PF@NOCHK)\n         DC    H'5',C'NOSCAN   ',AL1(PF@NOCHK)\nPARMLAST DC    H'1',C'NL       ',AL1(PF@NL)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TAPEMAP": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\t\\x00\\x00\\x00\\x93\\x19\\x7f\\x01\\x08\\x07\\x8f\\x02\\t\\x10\\x05\\x0f~\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "02.09", "flags": 0, "createdate": "1993-07-16T00:00:00", "modifydate": "2008-03-18T02:09:00", "lines": 4101, "newlines": 3966, "modlines": 0, "user": "SBGOLOB"}, "text": "*---------------------------------------------------------------*   DRK\n* CHANGES BY JOHN KALINICH 2007/04/26  VERSION 2.5              *   DRK\n*                                                               *   DRK\n* ADDED NEW FDR DEVICE TYPES AND CODES TO TABLE.                *   DRK\n*    CHANGES BY STEVE MYERS HAVE BEEN SKIPPED.                  *   SBG\n*---------------------------------------------------------------*\n* CHANGES BY SAM GOLOB   2005/10/31    VERSION 2.3              *\n*                                                               *\n* IEBCOPY RECOGNITION CODE SHOULD NOT DEPEND ON FIRST BYTE.     *\n* IBM IS USING FLAGS THERE FOR IEBCOPY UNLOADING PDSE'S.        *\n*---------------------------------------------------------------*\n* CHANGES BY SAM GOLOB   2005/10/11    VERSION 2.3              *\n*                                                               *\n* TESTED UCB TYPE BYTE 4 FOR THE X'80' BIT INSTEAD OF X'80' AND *\n* X'81' EXACTLY, IN DETERMINING IF A TAPE IS A CARTRIDGE OR     *\n* NOT.  THIS ALLOWS DETECTION OF 3590'S AS CARTRIDGES.          *\n*---------------------------------------------------------------*\n* CHANGES BY SAM GOLOB   2005/02/02    VERSION 2.2              *\n*                                                               *\n* ALLOWED FOR SMP/E CHANGES FOR RECENT SYSTEM LEVELS. Z/OS 1.5  *\n* A ++ASSIGN CARD ON THE TOP OF AN SMPPTFIN FILE USED TO THROW  *\n* OFF THE SMPPTFIN FORMAT DETECTION.  NOW A FEW DIFFERENT SMP/E *\n* CONTROL CARDS WILL INDICATE THE PRESENCE OF AN SMPPTFIN FILE, *\n* BUT THEY WILL NOT CAUSE THE PRINT OF SYSMOD NUMBERS IN THE    *\n* SYSPRNT2 DD NAME.  THESE DELIBERATELY DO NOT INCLUDE SUCH     *\n* SMP/E CONTROL CARDS THAT WOULD NORMALLY OCCUR IN THE MIDDLE   *\n* OF A PTF OR OTHER SYSMOD, SUCH AS:  ++MOD, ++MAC, ++SRC,      *\n* ++MACUPD, ++SRCUPD, OR THE ++DATA TYPE OF CARDS.  ++JCLIN     *\n* IS INCLUDED IN THE FOLLOWING LIST, EVEN THOUGH IT NORMALLY    *\n* WOULD OCCUR WITHIN A PTF.  THE REASON FOR THAT IS THAT IT IS  *\n* POSSIBLE FOR A PURE ++JCLIN STREAM TO BE INPUTTED TO SMP/E,   *\n* SO SUCH A FILE SHOULD BE MARKED AS THOUGH IT IS IN SMPPTFIN   *\n* FORMAT, PROVIDED THAT A ++JCLIN CARD IS INSERTED AT THE TOP   *\n* OF THE FILE.                                                  *\n*                                                               *\n*   LIST OF SUCH SUPPORTED SMP/E CONTROL CARDS CURRENTLY....    *\n*  ++ ASSIGN                                                    *\n*  ++ HOLD                                                      *\n*  ++ RELEASE                                                   *\n*  ++ FEATURE                                                   *\n*  ++ PRODUCT                                                   *\n*  ++ NULL                                                      *\n*  ++ JCLIN                                                     *\n*                                                               *\n*---------------------------------------------------------------*\n* CHANGES BY PETER MCFARLAND  02/12/04                         2/04PMCF\n* WHEN AN I/O OCCURS (ECB=X'41') AN ATTEMPT TO GET THE UCB     2/04PMCF\n* EXTENSION IS MADE FOR THE I/O SENSE BYTES.  IF THE UCBS ARE  2/04PMCF\n* GENED TO BE ABOVE THE 16M LINE THEN THE ADDR. OF THE UCB-EX  2/04PMCF\n* IN THE UCB IS NOT VALID. S0C4 ABENDS OCCUR IN RECOVERY.      2/04PMCF\n* CODE WAS ADDED TO BRANCH AROUND THIS SITUATION SKIPPING THE  2/04PMCF\n* SENSE BYTES DISPLAY.  SEE MSG IOS000I FOR SENSE BYTES. PMCF  2/04PMCF\n*------------------------------------------------------------  2/04PMCF\n* CHANGES BY JOEL C. EWING 2003/06/25:                         6/03 JCE\n* CHANGED DAY-OF-WEEK CALCULATION IN TODAY CSECT TO USE        6/03 JCE\n* SIMPLER AND HOPEFULLY CORRECT ALGORITHM BASED ON LILIAN      6/03 JCE\n* DATES.                                                       6/03 JCE\n*------------------------------------------------------------  6/03 JCE\n* ELIMINATED THE X'00' IN THE REPORT HEADERS, BY BLANKING OUT SBG 06/01\n* THE DATE, DAY AND TIME WORK FIELDS IN THE TODAY CSECT.      SBG 06/01\n*------------------------------------------------------------  2/00 JCH\n* CLUDGED DAY OF WEEK 2 DAYS LATER FOR Y2K, IN TODAY CSECT.   SBG 03/00\n*------------------------------------------------------------  2/00 JCH\n* CHANGES BY JOHN C HALLGREN  02/10/00                         2/00 JCH\n*                                                              2/00 JCH\n* SET HDR2 DENSITY TO ACTUAL IF NO HDR2 FOUND (DOS SL, RS6000) 2/00 JCH\n*------------------------------------------------------------  3/94 SBG\n* CHANGES BY SAM GOLOB  3/94:                                  3/94 SBG\n*                                                              3/94 SBG\n*   CONVUNIT FIXED FOR 3390'S.                                 3/94 SBG\n*   IHDASDR1 FIXED FOR 3390'S BUT PROBABLY NOT NECESSARY.      3/94 SBG\n*------------------------------------------------------------  7/93 SBG\n*                                                              6/93 RT\n* CHANGES BY RON TANSKY 6/93:                                  6/93 RT\n*                                                              6/93 RT\n* ADDED CHECK FOR IEBCOPY PDS/E HEADER                         6/93 RT\n*                                                              6/93 RT\n*                                                              1/93 RT\n* CHANGES BY RON TANSKY 1/93:                                  1/93 RT\n*                                                              1/93 RT\n*  GOT RID OF THE ENT (ENTRY) MACRO.  IT'S MASSIVE OVERKILL IN 1/93 RT\n*  THIS PGM.  REPLACED IT BY SIMPLE INLINE CODE.  THIS SAVES   1/93 RT\n*  14 PAGES WORTH OF LISTING (AT 80 LINES PER PAGE).           1/93 RT\n*                                                              1/93 RT\n*  GOT RID OF OTHER UNUSED MACROS.                             1/93 RT\n*                                                              1/93 RT\n*  ADDED CAPABILITY OF MAPPING DOS SL TAPES.                   1/93 RT\n*  CHANGED WAY PGM RECOGNIZES 'IEHINITT' TAPES, AS IT WAS      1/93 RT\n*  CALLING DOS SL TAPES 'IEHINITT'.                            1/93 RT\n*                                                              1/93 RT\n*  CHANGED DEFAULT TO 80 LINES PER PAGE (&LINEPPG)             1/93 RT\n*                                                              1/93 RT\n*  CHANGED LINE-COUNTER-2 TO STORAGE INSTEAD OF A REGISTER.    1/93 RT\n*                                                              1/93 RT\n*  CHANGED SOME REGISTER EQUATES TO STANDARD (RNN).            1/93 RT\n*                                                              1/93 RT\n*  ADDED A VERSION NUMBER TO THE TITLE PAGE.                   1/93 RT\n*                                                              1/93 RT\n*  MOVED THE CURRENT-DATE-AND-TIME ROUTINE TO ITS OWN CSECT.   1/93 RT\n*  CHANGED THE ROUTINE TO INLINE CODE RATHER THAN MACRO CALL.  1/93 RT\n*  MODIFIED THE ROUTINE TO HANDLE THE CENTURY.                 1/93 RT\n*                                                              1/93 RT\n*  ADDED A BASE REGISTER (R9).                                 1/93 RT\n*  BETWEEN MOVING THE DATE ROUTINE AND THE EXTRA BASE REG,     1/93 RT\n*  THIS SHOULD PROVIDE LOTS OF ROOM FOR EXPANSION.             1/93 RT\n*                                                              1/93 RT\n*  ADDED CONDITIONAL ASSEMBLY FOR MVS/XA SUPPORT.  SYMBOLIC    1/93 RT\n*  VARIABLE '&XA' IS SET TO 'L' OR 'S' TO GENERATE BAL         1/93 RT\n*  OR BAS INSTRUCTION, RESPECTIVELY                            1/93 RT\n*                                                              1/93 RT\n*------------------------------------------------------------ 12/88 SBG\n*  SOMEBODY SHOULD ADD SUPPORT FOR DFDSS TAPES.               12/88 SBG\n*------------------------------------------------------------ 11/88 SBG\n*  THIS PROGRAM, AS IT IS, IS SORELY IN NEED OF A NEW BASE    11/88 SBG\n*   REGISTER AND/OR RE-ARCHITECTING, SUCH AS BEING SPLIT INTO 11/88 SBG\n*   TWO SEPARATE MODULES.  FUTURE MODIFIERS, PLEASE BEAR      11/88 SBG\n*   THIS IN MIND.  THREE BASE REGISTERS ALMOST EXCEEDED.      11/88 SBG\n*                                                             12/88 SBG\n*  FOOTNOTE:  I WAS ABLE TO ADDRESS SEVERAL HUNDRED MORE      12/88 SBG\n*   BYTES BY MOVING SOME OF THE FIXED LITERALS TO THE WORK    12/88 SBG\n*   AREA DSECT.  THESE HAVE TO BE INITIALIZED IN THE GETMAINED12/88 SBG\n*   SPACE WITH EVERY EXECUTION OF THE PROGRAM.  AN EXACT COPY 12/88 SBG\n*   OF THESE LITERALS (WHICH ARE CLEARLY MARKED) IS PUT AT    12/88 SBG\n*   THE VERY END OF THE PROGRAM.  SEE LABEL \"LITMOVES\".       12/88 SBG\n*   LITMOVES IS ADDRESSABLE IN THE PROGRAM VIA AN ADCON.      12/88 SBG\n*                                                             12/88 SBG\n*  FUTURE MODIFIERS, PLEASE BEWARE OF THIS BEFORE             12/88 SBG\n*   ADDING NEW LITERALS.                                      12/88 SBG\n*------------------------------------------------------------ 11/88 SBG\n*  DO NOT GLOBALLY CHANGE MEANINGS OF ANY REGISTER EQUATES.   11/88 SBG\n*   UNLESS YOU ARE VERY VERY THOROUGH.                        11/88 SBG\n*------------------------------------------------------------ 11/88 SBG\nXYZZY    OPSYN PRINT               CUSTOMIZED PRINT CONTROL   06/84 DBC\nPRINT    OPSYN ANOP                SUPPRESS STD PRINT CONTROL 06/84 DBC\n*------------------------------------------------------------ 07/92 SBG\n*                                                             07/92 SBG\n*  *************                                              SBG 03/00\n*  * ATTENTION * YOU CAN USE IECTDEBX INSTEAD OF IEZDEB TO    SBG 03/00\n*  ************* SPECIFY DEB FIELDS.  I DON'T RECOMMEND THE   SBG 03/00\n*                IDEA.  IT IS BETTER TO CODE DEBX=NO.         SBG 03/00\n*                                                             SBG 03/00\n*   IEZDEB IS ALIVE AND WELL.  AT THE SP4 LEVEL, I THOUGHT    SBG 03/00\n*    IT WASN'T, SO I CODED THIS FLEXIBILITY.  BETTER TO       SBG 03/00\n*    LEAVE THINGS AS THEY ALWAYS WERE.                        SBG 03/00\n*                                                             SBG 03/00\n         GBLC  &DEBX                                          07/92 SBG\n*&DEBX   SETC  'YES'    'YES' TO USE IECTDEBX MACRO FOR DEB.  SBG 03/00\n&DEBX    SETC  'NO'     'NO'  TO USE IEZDEB   MACRO FOR DEB.  SBG 03/00\n*------------------------------------------------------------ 02/93 RT\n         GBLC  &XA                                            02/93 RT\n&XA      SETC  'L'      'L' TO USE NON-XA BAL INSTRUCTION     02/93 RT\n&XA      SETC  'S'      'S' TO USE     XA BAS INSTRUCTION     02/93 RT\n*                                                             07/92 SBG\n*------------------------------------------------------------ 07/92 SBG\nTAPEMAP  TITLE 'TAPE ANALYSIS PROGRAM  (T A P E M A P)'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*  THIS PROGRAM MAY NOT BE DISTRIBUTED WITHOUT PERMISSION OF THE      *\n*  AUTHOR.  ALTHOUGH THIS PROGRAM HAS BEEN EXTENSIVELY TESTED, AND    *\n*  IS IN USE IN A PRODUCTION ENVIRONMENT (MVT 21.8 ON A 360/91) AT    *\n*  UCLA'S OFFICE OF ACADEMIC COMPUTING (FORMERLY CAMPUS COMPUTING     *\n*  NETWORK), NO GUARANTEE IS MADE OF (OR RESPONSIBILITY ASSUMED FOR)  *\n*  CORRECT OR RELIABLE OPERATION.  WE MAY TRY TO HELP WITH PROBLEMS.  *\n*                                                                     *\n*  CONTACT:  CHRIS THOMAS  (213) 825-7424                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  THIS PROGRAM IS BASED ON THE PROGRAM TAPEINDX WRITTEN BY           *\n*  MICHAEL S. MAITEN OF THE UCLA COMPUTER CLUB.                       *\n*  IT HAS BEEN ALMOST COMPLETELY REWRITTEN BY LEONARD D. WOREN OF     *\n*  THE UCLA COMPUTER CLUB.                                            *\n*                                                                     *\n*  MODIFIED  1979 BY WALT FARRELL, RAINIER NATIONAL BANK              *\n*                                                           * 09/84 DBC\n*  HI GUYS. GEE, CAN I PLAY TOO?                            * 09/84 DBC\n*                                                                     *\n***********************************************************************\n         EJECT ,                                              06/87 THO\n************************************************************* 07/92 SBG\n*                                                             07/92 SBG\n* LAST CHANGE DATE - JUL. 17, 1992, BY SAM GOLOB.             07/92 SBG\n*                                                             07/92 SBG\n*  07/17/92  -  FIXED 2 PROBLEMS.  NEW IEBCOPY FOR NL TAPE    07/92 SBG\n*               FILES WASN'T WORKING BECAUSE THE HEADER RECD  07/92 SBG\n*               EXPANDED BY 4 BYTES, AND ITS SIZE WAS BEING   07/92 SBG\n*               CHECKED AT LABEL \"NL$NMOVE\".                  07/92 SBG\n*                                                             07/92 SBG\n*               CONDITIONAL ASSEMBLY FOR MVS SP4 SYSTEMS      07/92 SBG\n*               WHICH HAVE DEB EXTENSION SUPPORT AND IEZDEB   07/92 SBG\n*               MACRO ISN'T THERE ANY MORE.  I USED IECTDEBX. 07/92 SBG\n*               PLEASE SET GLOBAL VARIABLE &DEBX TO 'YES' OR  07/92 SBG\n*               'NO' ABOVE.                                   07/92 SBG\n*                                                             07/92 SBG\n************************************************************* 07/92 SBG\n         EJECT ,                                              07/92 SBG\n************************************************************* 11/88 SBG\n*                                                             11/88 SBG\n* LAST CHANGE DATE - NOV. 28, 1988, BY SAM GOLOB.             11/88 SBG\n*                                                             11/88 SBG\n*  INSERTED SUPPORT FOR ><ADD NAME= WITHIN IEBUPDTE UNLOADS.  11/88 SBG\n*  INSERTED GLOBAL VARIABLE FOR LINES-PER-PAGE ON REPORTS.    11/88 SBG\n*     SEE VARIABLE &LINEPPG.                                  11/88 SBG\n*  INSERTED SUPPORT FOR CBT973-COMPRESSED FILES.              11/88 SBG\n*                                                             11/88 SBG\n*  CBT973 SUPPORT MAKES IT POSSIBLE TO MEANINGFULLY MAP       11/88 SBG\n*  AND FIND ALMOST EVERYTHING ON THE CBT MVS MODS TAPE.       11/88 SBG\n*                                                             11/88 SBG\n*  IT ALSO HELPS IN FINDING IBM SOURCE MODULES IN CBT973-     11/88 SBG\n*  COMPRESSED IEBUPDTE FORMAT.                                11/88 SBG\n*                                                             11/88 SBG\n*  SEE CBT TAPE FILES 188 AND 189 FOR A DESCRIPTION OF THIS   11/88 SBG\n*  METHOD OF SQUEEZING MANY IBM SOURCE TAPE REELS TOGETHER    11/88 SBG\n*  ON A FEW LARGE REELS.  TAPEMAP WILL NOW SHOW MEMBER NAMES  11/88 SBG\n*  ON THE CBT973-COMPRESSED LARGE REELS.                      11/88 SBG\n*                                                             11/88 SBG\n*  CBT973 SUPPORT IS DONE BY USING THE CBT973 EXPANSION       11/88 SBG\n*  ALGORITHM TO RESTORE ONE 80-BYTE RECORD AT A TIME.  NORMAL 11/88 SBG\n*  IEBUPDTE PROCESSING IS THEN DONE ON THIS RECORD.           11/88 SBG\n*                                                             11/88 SBG\n************************************************************* 11/88 SBG\n         EJECT ,                                              06/87 THO\n************************************************************* 11/87 SBG\n*                                                                   SBG\n* LAST CHANGE DATE - JUNE 11, 1986, BUT ADDED 11/87 BY TENNIE OLSON THO\n*                                                                   SBG\n*  FIXED BUG  -  SAM GOLOB  -  NEWSWEEK INC., MOUNTAIN LAKES, N.J.  SBG\n*                                                                   SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  TAPEMAP HAS TO CHECK FOR SMPPTFIN FORMAT BEFORE IT CHECKS        SBG\n*   FOR IEBUPDTE FORMAT.  IF A PTF OR APAR HAS SOURCE UPDATES       SBG\n*   WHICH ARE DONE WITH IEBUPDTE, AND THIS PTF OR APAR IS AT THE    SBG\n*   BEGINNING OF THE TAPE TO BE READ, THE PROGRAM WOULD NOT PRINT   SBG\n*   THE PTF OR APAR NAMES, BUT THE NAMES OF THE PROGRAMS BEING      SBG\n*   UPDATED, WHICH IS NOT WHAT WE WANT WHEN WE MAP AN APAR TAPE.    SBG\n*   WE ALWAYS WANT THE NAMES OF THE PTFS AND APARS UNDER THESE      SBG\n*   CIRCUMSTANCES.                                                  SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n*                                                             12/88 SBG\n************************************************************* 07/85 SBG\n         EJECT ,                                              06/87 THO\n************************************************************* 06/87 THO\n*                                                           * 06/87 THO\n* LAST CHANGE DATE - JUNE 09, 1987                          * 06/87 THO\n*                                                           * 06/87 THO\n*                  - I ADDED SUPPORT FOR 3480 CARTRIDGES.   * 06/87 THO\n*                    ADDED CODE TO MAKE CORRECT CALCULA-    * 06/87 THO\n*                    TIONS IN TAPEFEET. 37871 BYTES PER     * 06/87 THO\n*                    IN OR 302971 BITS PER INCH WITH A      * 06/87 THO\n*                    GAP OF .08 INCHES. INDICATED DEN WAS   * 06/87 THO\n*                    NOT APPLICABLE FOR 3480.               * 06/87 THO\n*                                                           * 06/87 THO\n*     TENNIE OLSON                                            12/88 SBG\n*     VF CORPORATION - WRANGLER DIVISION                      12/88 SBG\n*     201 NORTH EUGENE STREET                                 12/88 SBG\n*     GREENSBORO, N.C. 27401                                  12/88 SBG\n*     (919) 373-3952                                          12/88 SBG\n*                                                             12/88 SBG\n************************************************************* 06/87 THO\n         EJECT ,                                              07/85 DBC\n************************************************************* 07/85 DBC\n*                                                           * 07/85 DBC\n* LAST CHANGE DATE - JULY 26, 1985                          * 07/85 DBC\n*                                                           * 07/85 DBC\n*                  - I ADDED SUPPORT FOR LISTING THE PTFS   * 07/85 DBC\n*                    CONTAINED ON AN SMPPTFIN TAPE.         * 07/85 DBC\n*                                                           * 07/85 DBC\n*                  - WHEN AN SL TAPE IS BEING SCANNED WITH  * 07/85 DBC\n*                    NL ANALYSIS, THE LOGICAL FILE NUMBER   * 07/85 DBC\n*                    IS DISPLAYED ON THE \"LABELS\" LINE      * 07/85 DBC\n*                    (OLD), AND THE PHYSICAL FILE NUMBER IS * 07/85 DBC\n*                    DISPLAYED ON THE \"SCAN\" LINE.          * 07/85 DBC\n*                                                           * 07/85 DBC\n************************************************************* 07/85 DBC\n         EJECT ,                                              09/84 DBC\n************************************************************* 09/84 DBC\n*                                                           * 09/84 DBC\n* LAST CHANGE DATE - OCTOBER 1, 1984                        * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - I RECEIVED FROM ARNIE CASINGHINO (OF   * 09/84 DBC\n*                    THE CONNECTICUT BANK AND TRUST) A TAPE * 09/84 DBC\n*                    CONTAINING A VERSION OF TAPEMAP THAT   * 09/84 DBC\n*                    WAS BASED ON AN EARLIER UCLA VERSION   * 09/84 DBC\n*                    AND WAS MODIFIED BY WALT FARRELL OF    * 09/84 DBC\n*                    THE RAINIER NATIONAL BANK. THE MODS    * 09/84 DBC\n*                    WERE MAINLY IN SUPPORT OF DETAILED     * 09/84 DBC\n*                    LISTINGS OF THE CONTENTS OF FDR AND    * 09/84 DBC\n*                    FDRDSF TAPES. I HAVE NOW TRANSPORTED   * 09/84 DBC\n*                    THOSE MODS INTO THIS VERSION OF        * 09/84 DBC\n*                    TAPEMAP.                               * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - I ADDED SUPPORT FOR BLKSIZES GREATER   * 09/84 DBC\n*                    THAN 32K UP TO 64K-1 BYTES. (THE       * 09/84 DBC\n*                    RECENT RELEASES OF FDR WRITE BLOCKS    * 09/84 DBC\n*                    THAT ARE 50K LARGE OR LARGER).         * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - I HAVE ADDED A REWIND COMMAND JUST     * 09/84 DBC\n*                    AFTER THE TAPE IS OPENED TO INSURE     * 09/84 DBC\n*                    THAT THE TAPE IS PROPERLY POSITIONED.  * 09/84 DBC\n*                    THIS MAKES MAPPING STANDARD LABELED    * 09/84 DBC\n*                    TAPES IN A UCC/1 ENVIRONMENT A LITTLE  * 09/84 DBC\n*                    EASIER.                                * 09/84 DBC\n*                                                           * 09/84 DBC\n************************************************************* 09/84 DBC\n         EJECT ,                                              06/84 DBC\n************************************************************* 06/84 DBC\n*                                                           * 06/84 DBC\n* LAST CHANGE DATE - JUNE 4, 1984                           * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - ADDED OPSYN STATEMENTS TO SUPPRESS THE * 06/84 DBC\n*                    AUTHOR'S USE OF \"PRINT NOGEN\".         * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - ADDED CODE TO RECOGNIZE FILES IN       * 06/84 DBC\n*                    IEBUPDAT RELOAD FORMAT.                * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - DELETED THE SILLY JFCBDSNM CHANGE THAT * 06/84 DBC\n*                    MADE TAPE MANAGEMENT SYSTEMS SO        * 06/84 DBC\n*                    UNHAPPY.                               * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - UPDATED THE LIST OF KNOWN DEVICE TYPES * 06/84 DBC\n*                    TO INCLUDE 3375S AND 3380S.            * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - CHANGED THE PARM DEFAULT FROM NOSCAN   * 06/84 DBC\n*                    TO SCAN.                               * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - ADDED THE \"INFO SOURCE\" COLUMN TO THE  * 06/84 DBC\n*                    SYSPRINT OUTPUT.                       * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - FIXED THE CCC ON THE LINE OF DASHES    * 06/84 DBC\n*                    (WAS RANDOM, NOW IS C' ').             * 06/84 DBC\n*                                                           * 06/84 DBC\n************************************************************* 06/84 DBC\n         EJECT\n***********************************************************************\n*                                                                     *\n*   UPDATES:                                                          *\n*                                                                     *\n*  ADD CHECK FOR FILE WITH HEADER OF                     05/01/79 WBF *\n*    $$TAPEMAP.PRINT.FILE$$                                           *\n*  AND PRINT THE CONTENTS OF THE FILE                                 *\n*  IF ONE IS FOUND                                                    *\n*                                                                     *\n*  LIST DETAILS OF SLICK BACKUP FILES                    04/23/79 WBF *\n*                                                                     *\n*  FIX MINOR BUGS IN NL CODE,                            04/08/79 WBF *\n*  LIST DETAILS OF FDR OR FDRDSF FILES,                      \"        *\n*  FORCE BLP AND EXPDT=98000 (FOR UCC-1),                    \"        *\n*  COSMETIC CHANGES FOR RAINIER NATIONAL BANK                \"        *\n*                                                                     *\n*                                                                     *\n*  FIX BUG IN I/O ERROR RECOVERY                     U16 06/16/79 LDW *\n*                                                                     *\n*  FIX VOLSER FOR NL TAPES;  PRINT SENSE BIT MEANINGS;  CHANGE FORMAT *\n*  OF \"REQUESTED VOL\" MSG;  FIX ./DDNAME= BUG        U15 02/10/79 LDW *\n*                                                                     *\n*  RE-ARRANGE CODE, ADD 'NULL=' PARM.                U14 06/28/78 LDW *\n*                                                                     *\n*  PRINT SENSE INFO WHEN I/O ERROR OCCURS            U13 05/05/78 LDW *\n*                                                                     *\n*  FIX A COUPLE OF TURKEY BUGS                03/24/78 - 04/06/78 LDW *\n*                                                                     *\n*  LIST MEMBERS IN AN IEBUPDTE INPUT STREAM              02/22/78 LDW *\n*                                                                     *\n*  LIST MEMBERS UNLOADED BY IEHMOVE                      01/05/78 LDW *\n*                                                                     *\n*  NL TAPE ANALYSIS CODE ADDED                           12/26/77 LDW *\n*                                                                     *\n*  DO A SENSE TO DETERMINE TRUE TAPE DENSITY             11/14/77 LDW *\n*                                                                     *\n*  FIX SOME MISCELLANEOUS MINOR BUGS                     11/08/77 LDW *\n*                                                                     *\n*  ADD CODE TO LIST MEMBERS UNLOADED BY IEBCOPY, AND ATTRS FOR        *\n*     IEBISAM AND IEHDASDR UNLOADED DATASETS.            03/16/77 LDW *\n*                                                                     *\n*  GENERAL RE-WRITING OF TAPE READ CODE TO PUT IN CODE TO PRINT OUT   *\n*     THE ORIGINAL ATTRS FOR UNLOADED DATASETS CREATED BY IEHMOVE     *\n*     (SYSMOVE) AND IEBCOPY (VS2COPY);  CHANGE TAPE I/O ERROR AND     *\n*     TAPE MARK DETECTION ALGORITHM.                     02/13/77 LDW *\n*                                                                     *\n*  PUT IN DSECTS FOR LABELS;  FIX A 01/06/77 BUG;  RE-WRITE PRINTLIN  *\n*     MACRO (CHANGE TO PRTLN)                            02/07/77 LDW *\n*                                                                     *\n*  MORE FIXES:  COUNT LINES AND DO PAGE EJECT;  AND MUCH OTHER        *\n*     MISCELLANEOUS STUFF                                01/06/77 LDW *\n*                                                                     *\n*  UNCLUDGED A LITTLE:  FIX LENGTH CALCULATION;  MAKE SOME MACROS     *\n*     INTO SUBROUTINES (IT SEEMS THAT MSM NEVER HEARD OF SUBROUTINES; *\n*     PUT IN SYMBOLIC OFFSETS FOR PRINT LINE INFO.       11/08/76 LDW *\n*                                                                     *\n*  TAPEINDX -- CLUDGED UP IN A HURRY FROM A SPASM PROGRAM TO MAKE A   *\n*          QUICK LOAD MODULE                             10/30/74 MSM *\n*                                                                     *\n***********************************************************************\n         EJECT\n         MACRO\n&NFS     FL2   &DSECT=YES\n         LCLC  &P\n&P       SETC  'FL2'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n.***************\n&P.LABI  DC    C'HDR'                   OR 'EOF' OR 'EOV'\n&P.NO    DC    C'2'                     CONSTANT\n&P.RECFM DC    C' '                     F/V/U/D\n&P.BLKL  DC    CL5' '                   BLKSIZE\n&P.LRECL DC    CL5' '                   RECORD LEN (X=99999)\n&P.DEN   DC    C' '                     DENSITY (C'0' TO C'4')      THO\n&P.FILP  DC    C' '                     1=VOL SW OCCURRED, 0=NOT\n&P.JOBD  DC    CL8' '                   JOBNAME OF CREATOR\n&P.JSSP  DC    C'/'                     SLASH\n&P.STEPD DC    CL8' '                   STEPNAME OF CREATOR\n&P.TRTCH DC    CL2' '\n&P.CNTRL DC    C' '                     A/M/<BLANK>\n         DC    C' '\n&P.BLKA  DC    C' '                     B/S/R/<BLANK>\n         DC    CL41' '\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     FL1   &DSECT=YES\n         LCLC  &P\n&P       SETC  'FL1'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n&P.LABI  DC    C'HDR'                   OR 'EOF' OR 'EOV'\n&P.NO    DC    C'1'                     CONSTANT\n&P.ID    DC    CL17' '                  DATASET NAME\n&P.FILSR DC    CL6' '                   FIRST VOL NAME\n&P.VOLSQ DC    CL4' '                   VOL # OF DS\n&P.FILSQ DC    CL4' '                   DS SEQ #\n&P.GNO   DC    CL4' '                   GENERATION NUMBER\n&P.VNG   DC    CL2' '                   VERSION NUMBER\n&P.CREDT DC    CL6' YYDDD'              CREATION DATE\n&P.EXPDT DC    CL6' YYDDD'              EXPIRATION DATE\n&P.FSEC  DC    C' '                     0=NO PW, 1=PW, 3=NOPWREAD\n&P.BLKCT DC    CL6' '                   # OF BLOCKS\n&P.SYSCD DC    CL13' '\n         DC    CL7' '\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     VOL   &DSECT=YES\n         LCLC  &P\n&P       SETC  'VOL'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n&P.LABI  DC    C'VOL'                   CONSTANT\n&P.NO    DC    C'1'                     CONSTANT\n&P.SERNO DC    CL6'VOLSER'              VOLUME NAME\n         DC    C'0'\n         DC    CL30' '\n&P.OWNER DC    CL10' '                  OWNER ID\n         DC    CL29' '\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     HEXTAB &DUAL=YES\n.*  HEXTAB  LDW  UPDATED 02-21-79\n.*  UPDATED 03-17-79\n         GBLC  &HEXTAB#\n         LCLC  &N\n&N       SETC  '&NFS'                   ASSUME GIVEN\n         AIF   ('&N' NE '').OK          YEP - USE IT\n&N       SETC  '&HEXTAB#'               ASSUME GLOBAL PRESENT\n         AIF   ('&N' NE '').OK          YEP - USE IT\n&HEXTAB# SETC  'HEXTAB'                 ELSE, SET IT\n&N       SETC  'HEXTAB'                 HERE TOO\n.OK      AIF   ('&DUAL' EQ 'YES').DUAL\n&N       EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         MEXIT\n.DUAL    ANOP\n&N       EQU   *-C'A'\n         DC    X'0A0B0C0D0E0F'\n         ORG   &N+C'0'\n         DC    C'0123456789ABCDEF'\n         ORG\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     HEX   &TO,&FROM,&L,&LEN=,&HEXTAB=,&BYTE=C' ',&DIGITS=\n.*  HEX -- 12/18/76 -- LDW      FIXED 5-2-77    12-25-77\n.*      REWRITTEN FROM SCRATCH -- 01/29/79  FIXED  02-16-79  03-03-79\n.*      UPDATED  04-21-79\n         GBLC  &HEXTAB#\n         LCLA  &LT                      UNPK \"TO\" LENGTH\n         LCLA  &LF                      UNPK \"FROM\" LENGTH\n         LCLA  &LTR                     TR \"TO\" LENGTH\n         LCLA  &LL                      &LEN ONE WAY OR ANOTHER\n         LCLC  &F1,&F2,&T1,&T2,&LX\n&F1      SETC  '&FROM(1)'               FOR SHORTER STRING LATER\n&F2      SETC  '&FROM(2)'               FOR SHORTER STRING LATER\n&T1      SETC  '&TO(1)'                 FOR SHORTER STRING LATER\n&T2      SETC  '&TO(2)'                 FOR SHORTER STRING LATER\n&LX      SETC  '&L&LEN'                 GET LENGTH USING EITHER METHOD\n         AIF   ('&LX' EQ '').DEFLEN     LENGTH WILL DEFAULT TO 4\n&LL      SETA  &LX                      GET IT\n         AGO   .OKLEN\n.DEFLEN  ANOP\n&LL      SETA  4                        SET THE DEFAULT LENGTH\n.OKLEN   AIF   ('&HEXTAB' EQ '').OKHEX1\n&HEXTAB# SETC  '&HEXTAB'\n.OKHEX1  AIF   ('&HEXTAB#' NE '').OKHEX2\n&HEXTAB# SETC  'HEXTAB'\n.OKHEX2  ANOP\n&LT      SETA  &LL*2\n         AIF   ('&DIGITS' EQ '').OKDIGIT\n&LT      SETA  &DIGITS\n.OKDIGIT AIF   (N'&TO NE 2).TO1\n         AIF   (N'&FROM NE 2).T2F1\n.*  N'&TO = 2     N'&FROM = 2\n&NFS     UNPK  &T1.(&LT+1,&T2),&F1.(&LL+1,&F2)\n         TR    &T1.(&LT,&T2),&HEXTAB#\n         MVI   &T1+&LT.(&T2),&BYTE\n         AGO   .DONE\n.T2F1    AIF   (N'&FROM NE 1).ERRF\n.*  N'&TO = 2     N'&FROM = 1\n&NFS     UNPK  &T1.(&LT+1,&T2),&FROM.(&LL+1)\n         TR    &T1.(&LT,&T2),&HEXTAB#\n         MVI   &T1+&LT.(&T2),&BYTE\n         AGO   .DONE\n.TO1     AIF   (N'&TO NE 1).ERRT\n         AIF   (N'&FROM NE 2).T1F1\n.*  N'&TO = 1     N'&FROM = 2\n&NFS     UNPK  &TO.(&LT+1),&F1.(&LL+1,&F2)\n         TR    &TO.(&LT),&HEXTAB#\n         MVI   &TO+&LT,&BYTE\n         AGO   .DONE\n.T1F1    AIF   (N'&FROM NE 1).ERRF\n.*  N'&TO = 1     N'&FROM = 1\n&NFS     UNPK  &TO.(&LT+1),&FROM.(&LL+1)\n         TR    &TO.(&LT),&HEXTAB#\n         MVI   &TO+&LT,&BYTE\n         AGO   .DONE\n.ERRF    MNOTE 8,'ERROR IN \"FROM\" PARAMETER, MACRO TERMINATED'\n         MEXIT\n.ERRT    MNOTE 8,'ERROR IN \"TO\" PARAMETER, MACRO TERMINATED'\n         MEXIT\n.DONE    SPACE 1\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     MONTHS  &DUMMY                 04-19-77 LDW\n&NFS     DC    H'31',C'JAN '            THIRTY DAYS\n         DC    H'28',C'FEB '            HATH SEPTEMBER,\n         DC    H'31',C'MAR '            APRIL, JUNE,\n         DC    H'30',C'APR '            AND NOVEMBER.\n         DC    H'31',C'MAY '            ALL THE REST\n         DC    H'30',C'JUN '            HAVE THIRTY ONE,\n         DC    H'31',C'JUL '            EXCEPT FEBRUARY,\n         DC    H'31',C'AUG '            WHICH HAS ONLY 28.\n         DC    H'30',C'SEP '\n         DC    H'31',C'OCT '\n         DC    H'30',C'NOV '\n         DC    H'31',C'DEC '\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     DAYS  &TYPE,&LEN=9                                04-19-77 LDW\n         AIF   ('&TYPE' EQ 'RIGHT').RIGHT\n&NFS     DC    CL&LEN'SUNDAY   '\n         DC    CL&LEN'MONDAY   '\n         DC    CL&LEN'TUESDAY  '\n         DC    CL&LEN'WEDNESDAY'\n         DC    CL&LEN'THURSDAY '\n         DC    CL&LEN'FRIDAY   '\n         DC    CL&LEN'SATURDAY '\n         AGO   .EXIT\n.RIGHT   ANOP\n&NFS     DC    CL&LEN'   SUNDAY'\n         DC    CL&LEN'   MONDAY'\n         DC    CL&LEN'  TUESDAY'\n         DC    CL&LEN'WEDNESDAY'\n         DC    CL&LEN' THURSDAY'\n         DC    CL&LEN'   FRIDAY'\n         DC    CL&LEN' SATURDAY'\n.EXIT    SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     DCBEXIT  &BLKSIZE=,&BUFNO=\n.*  DCBEXIT   04-20-78  LDW\n         LCLC  &NAME\n&NAME    SETC  '&NFS'\n         PUSH  USING\n         DROP\n         USING *,R15\n         AIF   ('&BLKSIZE' EQ '').B1\n&NAME    CLC   62(2,R1),=F'0'           BLKSIZE GIVEN?\n&NAME    SETC  ''\n         AIF   ('&BUFNO' EQ '').A1\n         BNE   *+10                     YES - USE IT\n         AGO   .A2\n.A1      BNER  R14                      YES - USE IT\n.A2      MVC   62(2,R1),=Y(&BLKSIZE)    SET DEFAULT\n.B1      AIF   ('&BUFNO' EQ '').C1\n&NAME    CLI   20(R1),0                 BUFNO GIVEN?\n         BNER  R14                      YES - USE IT\n         MVI   20(R1),&BUFNO            SET DEFAULT\n.C1      BR    R14                      RETURN TO OPEN\n         SPACE 2\n         POP   USING\n         SPACE 3\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     PRTLN &A,&I\n         GBLC  &XA                                            02/93 RT\n         LCLC  &LQ\n         LCLA  &L\n&LQ      SETC  'L'''                    TO FOOL THE ASSEMBLER\n         AIF   ('&A'(1,1) NE '''').NOTQ NOT QUOTED STRING\n&L       SETA  K'&A-2                   SET LENGTH OF IT\n&NFS     MVC   OUTBUFF(&L),=C&A\n         AGO   .BAL\n.NOTQ    AIF   ('&A' EQ 'OUTBUFF').OUTBUFF\n         AIF   ('&I' EQ 'I').I\n&NFS     MVC   OUTBUFF(&LQ&A),&A\n.BAL     BA&XA R14,PRTLN\n         AGO   .MEND\n.I       ANOP\n&NFS     L     R15,=A(&A)\n         MVC   OUTBUFF(&LQ&A),0(R15)\n         AGO   .BAL\n.OUTBUFF ANOP\n&NFS     BA&XA R14,PRTLN\n.MEND    SPACE 1\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     PRTLN2  &DUMMY\n         GBLC  &XA                                            02/93 RT\n&NFS     BA&XA R14,PRTLN2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     TAPIO &CCW,&DUMMY,&TM=UNEXTPMK\n         GBLC  &XA                                            02/93 RT\n         AIF   ('&DUMMY' EQ '').OK\n         MNOTE 4,'** TOO MANY POSITIONAL OPERANDS -- IGNORED **'\n.OK      ANOP\n&NFS     LA    R0,&CCW\n         BA&XA R10,TAPIO\n         B     &TM                      TAPEMARK FOUND\n         SPACE 1\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     NEWPAGE  &C,&F\n         GBLC  &XA                                            02/93 RT\n         AIF   ('&C' EQ '').JUSTBAL\n         AIF   ('&C' EQ '(R0)').R0\n&NFS     LA    R0,&C\n.R0      BA&XA R10,NEWPAGE&F\n         MEXIT\n.JUSTBAL ANOP\n&NFS     BA&XA R10,NEWPAGE&F+4\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     IFP2  &L,&B\n&NFS     TM    TFLAG2,T2@PRT2\n         AIF   ('&L'(1,1) EQ 'N').NO\n         BO    &B\n         MEXIT\n.NO      BNO   &B\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     ICALL &RTN,&REG,&R1=,&R15=\n         GBLC  &XA                                            02/93 RT\n         LCLC  &NAME\n&NAME    SETC  '&NFS'\n         AIF   ('&R1' EQ '').A\n&NAME    LA    R1,&R1\n&NAME    SETC  ''\n.A       AIF   ('&R15' EQ '').B\n&NAME    LA    R15,&R15\n&NAME    SETC  ''\n.B       ANOP\n&NAME    BA&XA &REG,&RTN\n         SPACE 1\n         MEND\n         EJECT\n         GBLA  &LINEPPG                                       11/88 SBG\n&LINEPPG SETA  60                                             11/88 SBG\nTAPEMAP  CSECT\n         USING *,R15\n         B     ARNDCONS\n         DC    AL1(25)\n         DC    CL8'TAPEMAP'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DS    0F\nGETM     DC    AL1(0),AL3(WORKLEN)\nARNDCONS DS    0H\n         SAVE  (14,12)\n         DROP  R15\n         USING TAPEMAP,R12,R11,R7,R9\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R7,4095(,R11)\n         LA    R7,1(,R7)\n         LA    R9,4095(,R7)\n         LA    R9,1(,R9)\n         L     R2,0(,R1)            PICK UP PARM POINTER\n         L     R0,GETM\n         GETMAIN R,LV=(0)\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE-AREA ADDR\n         USING WORKD,R13\n         L     R15,=A(LITMOVES)     POINT TO LITERALS TO LOAD 12/88 SBG\n         MVC   EMPTYLIT(256),0(R15)     MOVE THEM TO WORKAREA 12/88 SBG\n         MVC   EMPTYLIT+256(256),256(R15)                     10/90 SBG\n         MVC   EMPTYLIT+512(LITMVLEN-512),512(R15)            10/90 SBG\n         MVI   BLANKS,C' '\n         MVC   BLANKS+1(L'BLANKS+L'OUTBUFF),BLANKS  GET OUTBUFF ALSO\n         MVC   OUTCLR2(L'OUTBUFF2+2),OUTCLEAR  GET CC FOR \"DASHES\" ALSO\n         MVC   DASHES(2),=C' -'    PRIME                      06/84 DBC\n         MVC   DASHES+2(L'DASHES-2),DASHES+1\n         MVC   PARM#MSG+1(L'PARM#MSG-1),PARM#MSG\n         XC    JFCB(176),JFCB\n         LA    R0,JFCB\n         ST    R0,EXLST\n         MVI   EXLST,X'87'\n         LA    R0,TAPEBUFF              GET ADDR OF DATA BUFFER\n         ST    R0,TCCW#DAT              SET INTO CCW\n         MVI   TCCW#DAT,RD              RESTORE THE OPCODE\n         LA    R1,FL1LABI               GET LABEL BUFFER ADDR\n         ST    R1,TCCW#LBL              SET IN CCW\n         MVI   TCCW#LBL,RD              RESTORE OPCODE\n         ST    R1,TCCW#EOV              SET IN CCW            02/93 RT\n         MVI   TCCW#EOV,RD              RESTORE OPCODE        02/93 RT\n         LA    R0,FL2LABI               GET LABEL BUFFER ADDR\n         ST    R0,TCCW#LBL+8            SET IN CCW\n         MVI   TCCW#LBL+8,RD            RESTORE OPCODE\n         LA    R1,MV#BUFF2              GET 2ND BUFFER ADDR\n         ST    R1,MV#ABUF2              SAVE\n         LA    R0,OUTBUFF2+110          GET ADDR OF END OF OUTBUFF2\n         ST    R0,OB2END                SAVE FOR FUTURE REFERENCE\n         LA    R0,OUTBUFF2+110+10       FOR UPDTE STUFF\n         ST    R0,OB2END2\n         SPACE 2\n         OPEN  MF=(E,OPENMFL)           OPEN PRINT FILE\n         L     R1,OPENMFL               GET SYSPRINT DCB ADDR\n         TM    48(R1),X'10'             OPEN?\n         BO    PRINTOK                  YES\n         LA    R1,100                   GET ABEND CODE\n         SVC   13                       AND LEAVE\n         SPACE 2\nPRINTOK  LH    R15,0(,R2)               GET PARM LEN\n         LTR   R15,R15                  ANY?\n         BNP   DONEPARM                 NO\n         LA    R14,2(,R2)               SET ADDR OF FIRST ITEM\n         LR    R0,R14                   SAVE IT\n         MVC   PARM#MSG(8),=C' PARM='' '\n         MVC   PARM#MSG+8(L'PARM#MSG-8),PARM#MSG+7   BLANK THE REST\n         CH    R15,=H'21'               PARM TOO LONG FOR \"TITLE2\"?\n         BNH   *+8                      NO - SKIP\n         OI    TFLAG2,T2@LPARM          YES - SET FLAG\n         EX    R15,MVCPARM              SAVE PARM IN OUTBUFF2\n         LA    R1,PARM#MSG+7(R15)       GET ADDR OF END+1\n         MVI   0(R1),C''''              PUT IN ENDING QUOTE\n         OI    TFLAG1,T1@PARM           SET \"HAVE PARM\" FLAG\n         SPACE 2\nNEXTPARM LM    R1,R3,=A(PARMTAB,12,PARMLAST)\nTESTPARM LH    R4,0(,R1)                GET LENGTH OF ITEM\n         EX    R4,CLCPARM               THIS IT?\n         BNE   INCRPARM                 NO - TRY NEXT\n         OC    PARMFLAG,11(R1)          TURN ON BITS\n         LA    R14,2(R14,R4)            INCR SCAN PTR\n         SR    R15,R4                   DECR LENGTH LEFT\n         SH    R15,=H'2'\n         BP    NEXTPARM                 LOOP IF ANY MORE\n         B     DONEPARM                 DONE...\n         SPACE 2\nNULLPARM SH    R15,=H'5'                DECR LENGTH LEFT            U14\n         BNP   DONEPARM                 NOTHING LEFT                U14\n         LA    R14,5(,R14)              POINT TO OPERAND            U14\n         SR    R1,R1                    CLEAR ACCUMULATOR           U14\n         SPACE 1\nNULLLOOP CLI   0(R14),C'0'              DIGIT?                      U14\n         BL    HAVENULL                 NO - HAVE COMPLETE NUMBER   U14\n         IC    R0,0(,R14)               GET A DIGIT                 U14\n         N     R0,F15                   STRIP IT                    U14\n         MH    R1,=H'10'                SHIFT PREVIOUS              U14\n         AR    R1,R0                    ADD NEW                     U14\n         LA    R14,1(,R14)              BUMP SCAN PTR               U14\n         BCT   R15,NULLLOOP             CONTINUE FOR LENGTH OF PARM U14\n         SPACE 2\nHAVENULL LTR   R1,R1                    ANYTHING GIVEN?             U14\n         BNP   *+8                      YES - USE IT                U14\n         STH   R1,NULLNUMB              SET NUMBER                  U14\n         LA    R14,1(,R14)              BUMP SCAN PTR               U14\n         SH    R15,H1                   DECR LENGTH LEFT            U14\n         BP    NEXTPARM                 CONTINUE IF MORE            U14\n         B     DONEPARM                 NONE LEFT                   U14\n         SPACE 2\nINCRPARM BXLE  R1,R2,TESTPARM           KEEP LOOKING\n*  DIDN'T FIND IT IN TABLE\n         CLC   =C'NULL=',0(R14)         SPECIAL KIND?               U14\n         BE    NULLPARM                 YES - PROCESS IT            U14\n*  INVALID PARM ITEM\n         SR    R14,R0                   COMPUTE OFFSET INTO PARM\n         LA    R14,1(,R14)              FIX IT\n         CVD   R14,DWD                  CONVERT TO PACKED\n         UNPK  PARMERR+28(3),DWD+6(2)   PUT INTO MSG\n         OI    PARMERR+30,C'0'          FIX SIGN\n         OI    TFLAG1,T1@PERR           SET \"PARM ERROR\" FLAG\n         SPACE 3\nDONEPARM LA    LCTR,&LINEPPG            INIT LINECOUNTER      11/88 SBG\n         CALL  TODAY,(TTL1DATE,TTL1DAY,TTL1TIME)              02/93 RT\n         L     R1,16                    -> CVT\n         L     R1,0(,R1)                -> TCBWORDS\n         L     R1,4(,R1)                -> TCB\n         L     R1,12(,R1)               -> TIOT\n         LA    R1,24(,R1)               -> DD SECTION\n         ST    R1,DD#PTR                SAVE PTR\n         SPACE 1\n         TM    PARMFLAG,PF@INLIN+PF@NATTR PARM=INLINE OR NOATTR?\n         BNZ   OK$PRT2                  YES - SKIP SECOND PRINT FILE\n         L     R2,OPENMFL2              GET SYSPRNT2 DCB ADDR\n         ICALL TIOTSCAN,R10,R15=40(,R2) SEE IF WE HAVE IT\n         B     OK$PRT2                  NOPE\n         SPACE 1\n         OPEN  MF=(E,OPENMFL2)          OPEN SECOND PRINT FILE\n         OI    TFLAG2,T2@PRT2           ASSUME IT WORKS.\n         TM    48(R2),X'10'             DID IT OPEN?\n         BO    OK$PRT2                  YES\n         SPACE 2\nABEND99  LA    R1,99                    GET ABEND CODE\n         SVC   13                       BYE\n         SPACE 2\nOK$PRT2  L     R2,OPENMFLI              GET SYSIN DCB ADDR\n         ICALL TIOTSCAN,R10,R15=40(,R2) SEE IF IT'S THERE\n         B     RDJFCB                   NOPE\n         MVC   RET#ADDR,=A(READCARD)    SET RETURN ADDR\n         SPACE 2\n         OPEN  MF=(E,OPENMFLI)          OPEN INPUT FILE\n         TM    48(R2),X'10'             OPEN?\n         BZ    ABEND99                  NO.  (THIS SHOULD NEVER HAPPEN)\n         MVI   OPENMFL,0                SET TO CLOSE BOTH FILES\n         SPACE 2\nREADCARD L     R1,OPENMFLI              GET SYSIN DCB ADDR\n         GET   (1),INBUFF\n         OI    TFLAG1,T1@DATA           SET FLAG\n         CLC   =C'./DDNAME',INBUFF      IS IT THIS?\n         BE    INDDNAME                 YES - PROCESS\n         CLC   =C'./VOLUME',INBUFF      IS IT THIS?\n         BNE   *+10                     NO - MUST BE VOL NAME\n         MVC   INBUFF(6),INBUFF+9       MOVE OVER\n         MVI   JFCB+117,1               # OF VOL SER #'S\n         MVC   JFCB+118(6),INBUFF       VOL SER #\n         MVI   JFCB+52,X'40'            VOLUME SERIAL LIST CHANGED\n         B     TAPEINDX                 SKIP THE RDJFCB, GO TO SUBROUTN\n         SPACE 2\nINDDNAME L     R1,TAPEMFL               GET ADDR OF TAPEDCB         U14\n         MVC   40(8,R1),INBUFF+9        MOVE DDNAME INTO DCB        U15\n         SPACE 2\nRDJFCB   RDJFCB  MF=(E,TAPEMFL)\n         B     TAPEINDX                 GO TO SUBROUTINE\n         SPACE 3\nEOD2     CLOSE MF=(E,OPENMFL)\n         IFP2  N,LEAVE                  SKIP IF NOT OPEN\n         CLOSE MF=(E,OPENMFL2)\n         B     LEAVE                    RETURN\n         SPACE 2\nEOD      TM    TFLAG1,T1@DATA           DATA READ IN?\n         BO    EOD2                     YES.\n         MVC   RET#ADDR,=A(EOD2)        SET NEW RETURN ADDR\n         B     RDJFCB\n         SPACE 2\nMVCPARM  MVC   PARM#MSG+7(0),0(R14)     << EXECUTED >>\nCLCPARM  CLC   2(0,R1),0(R14)           << EXECUTED >>\n         SPACE 2\n******** PRINT GEN\n         EJECT\n***********************************************************************\n*                                                                     *\n* T A P E I N D X                                                     *\n*                                                                     *\n*    A ROUTINE WHICH READS IN THE VOLUME NAME & ALL THE DATA SET NAMES*\n*        (FROM THE TRAILER LABELS) OF A TAPE (WITH STANDARD LABELS)   *\n*        AND FORMATS AND PRINTS THE INFORMATION FROM THE LABELS.      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nTAPEINDX MVC   LCTR2,=F'0'              INIT 2ND LINE COUNTER 02/93 RT\n         MVC   NUMBNULL,=F'0'           INIT COUNT OF NULL FILES    RT\n         OI    TFLAG1,T1@PAGE1+T1@ANLZ  1ST PAGE/THIS VOL + ANLZ LABEL\n         SPACE 1\n* OPEN TAPE VOLUME FOR LABEL=BLP\n         MVC   JFCB+44(8),BLANKS        BLANK OUT ELEM NAME\n         MVC   JFCB+68(2),=H'1'         FILE SEQ #                 WBF\n         MVC   JFCB+70(2),=H'1'         VOL SEQ #\n         MVC   JFCB+83(3),=X'620000'    SET EXPDT=98000 FOR UCC-1  WBF\n         MVI   JFCB+98,X'40'            DSORG=PS\n         MVI   JFCB+100,X'90'           RECFM=FB\n         MVC   TITLE1+5(6),JFCB+118     INIT IN CASE NOT SL\n         SPACE 1\n         OPEN  MF=(E,TAPEMFL),TYPE=J\n         TM    TAPEDCB+DCBOFLGS-IHADCB,DCBOFOPN   FILE OPEN ?       THO\n         BO    TPOPENOK                 YES.                        THO\n         NEWPAGE ,                      PRINT THE HEADER\n         PRTLN '-*** TAPE VOLUME COULD NOT BE OPENED ***'\n         B     RETURN\n         SPACE 3\nTPOPENOK NI    TAPEDCB+DCBMACF1-IHADCB,X'F7'  BLK COUNT INACCURATE  THO\n         XC    LEN#TAPE(4*2),LEN#TAPE   CLEAR SL & NL LENGTHS\n         NI    TFLAG1,255-T1@BADEN-T1@SL RESET FLAGS\n         MVI   WHERE,0                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#RWD,TM=*+4     INSURE PROPER POSITION     09/84 DBC\n         XC    FILE#SEQ,FILE#SEQ   CLEAR PHYSICAL FILE#       07/85 DBC\n         TAPIO TCCW#DAT,TM=LEADTPMK     READ IN VOLUME LABEL\n         MVC   VOLLABI(80),TAPEBUFF     SAVE VOLUME LABEL\n         SPACE 1\nDO$SENSE L     R2,LASTSIZE         PRESERVE LENGTH OVER SENSE 09/84 DBC\n         TAPIO TCCW#SNS                 READ SENSE DATA\n         L     R1,TAPEDCB+DCBDEBAD-IHADCB   LOAD ADDRESS OF DEB     THO\n         AIF   ('&DEBX' EQ 'YES').NEWDEB                            SBG\n         L     R1,DEBSUCBA-DEBBASIC(,R1)    LOAD ADDRESS OF UCB     THO\n         AGO   .OLDDEB                                              SBG\n.NEWDEB  ANOP                                                       SBG\n         L     R1,DEBUCBAD-DEBNMSUB(,R1)    LOAD ADDRESS OF UCB     SBG\n.OLDDEB  ANOP                                                       SBG\n         CLC   UTY3420C(4),UCBTYP-UCB(R1)        3480 COMPAT MODE? \u00acSBG\n         BE    IS3480                   YEP. TREAT AS 3480.        \u00acSBG\n         TM    UCBTBYT4-UCB(R1),X'80'       THIS A 3490 TAPE DRIVE ?SBG\n         BO    IS3480\n* --------->>> DON'T USE MAPPING MACRO BECAUSE OF OLDER SYSTEMS.    SBG\n         CLI   UCBTBYT4-UCB(R1),UCB3480     THIS A 3480 TAPE DRIVE ?THO\n         BNE   IS3420                   NO, THEN A 3420 DRIVE       THO\nIS3480   LA    R1,C'5'                  THEN INDICATE SO     \u00acSBG - THO\n         MVC   TITLE1+34(4),=C'CART'    THEN INDICATE CARTRIDGE     THO\n         NI    PARMFLAG,255-PF@DEN1     TURN OFF                    THO\n         B     TRUE$GOT                                             THO\nIS3420   LA    R1,C'3'                  ASSUME 1600 BPI             THO\n         TM    SENSDATA+3,B'00000100'   PE MODE?\n         BO    TRUE$GOT                 YES\n         LA    R1,C'4'                  ASSUME 6250 BPI\n         TM    SENSDATA+9,B'00001000'   CAPABLE OF 6250 BPI?\n         BO    TRUE$GOT                 YES\n         LA    R1,C'2'                  ELSE, 800 BPI\n         SPACE 2\nTRUE$GOT LR    R0,R1                    COPY DENSITY CHAR\n         N     R1,F15                   STRIP IT\n         SLL   R1,2                     *4\n         LA    R1,DEN#LIST(R1)          POINT TO 4 CHAR FORM\n         ST    R1,TRUE#DEN              SAVE ADDR\n         STC   R0,TRUE#DEN              SAVE 1 CHAR FORM\n         SPACE 2\n         CLI   NUMBNULL+1,0             HOW MANY NULL SKIPPED?      U14\n         BNE   NULL1ST                  MORE THAN ZERO.             U14\n         CLC   VOLLABI(4),=C'VOL1VOL1'  VOLUME LABEL?\n         BE    TPVOL1OK                 YES.\n         SPACE 3\n         MVC   VOLSERNO(6),JFCB+118     SET HERE FOR OVERPRINTING   U15\n         NEWPAGE ,                      PRINT THE HEADER LINES\n         PRTLN '0++++ NO VOL1 LABEL FOUND.  NL ANALYSIS FOLLOWS ++++'\n         BCTR  LCTR,0                   ACCOUNT FOR EXTRA BLANK LINE\n         PRTLN OUTBUFF                  BLANK LINE\n         SPACE 1\nNULL1ST  MVC   FL1ID,BLANKS             SET THE DSN                 U14\n         SPACE 3\nNL$NEXT  ST    R2,LASTSIZE         RESTORE SIZE OF FIRST BLOC 09/84 DBC\n         ST    R2,BYTECNT          INIT TOTAL BYTES READ      09/84 DBC\n         ST    R2,MAXBLKSI         INIT BIGGEST BLOCK READ    09/84 DBC\n         MVC   BLOCKCNT,F1              INIT # OF BLOCKS READ\n         MVI   NLFLAGS,NL@F             INIT NL TYPE FLAGS\n         CH    R2,TAPEBUFF              IS FIRST BLOCK RECFM=V?\n         BNE   *+8                      NO - SKIP\n         OI    NLFLAGS,NL@V             YES - SET FLAG\n         MVI   WHERE,3                  SET \"WHERE ARE WE\" FLAG\n         MVC   UNLOADER,UNLOADER-1      CLEAR INDICATOR\n         LH    R1,FILE#SEQ              GET FILE NUMBER\n         LA    R1,1(,R1)           ADJ TO IDENTIFY THE NUMBER 07/85 DBC\n*                                  OF THE FILE CURRENTLY      07/85 DBC\n*                                  BEING SCANNED              07/85 DBC\n         CVD   R1,DWD                   -> PACKED\n         UNPK  DWD(5),DWD+5(3)          -> EBCDIC\n         OI    DWD+4,C'0'               FIX SIGN\n         MVC   FL1FILSQ,DWD+1           PUT INTO \"LABEL\"\n         SPACE 1\n*  NOW SEE IF THIS FILE IS ANYTHING SPECIAL THAT WE KNOW ABOUT.\n***      CLC   =H'800',LASTSIZE         RIGHT SIZE?\n***      BNE   NL$NMOVE                 NOT IEHMOVE\n         BA&XA R10,TEST$MV              IS IT IEHMOVE?\n         B     NL$NMOVE                 NO\n         B     IEHMOVE2                 YES - 2 PRINT FILE FORMAT\n         B     IEHMOVE1                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nNL$NMOVE CLC   TAPEBUFF(8),=H'60,0,56,0' RECFM=V,BLK=60,REC=56?\n         BE    NLTSTCPY             YES-IT'S THE OLD IEBCOPY FORMAT+SBG\n         CLC   TAPEBUFF(8),=H'64,0,60,0' IS IT IEBCOPY NEW FORMAT? +SBG\n         BNE   NL$NCOPY                 NO - NOT IEBCOPY\nNLTSTCPY BA&XA R10,TEST$CPY             IS IT VS2COPY?             +SBG\n         B     NL$NCOPY                 NO\n         B     IEBCOPY2                 YES - 2 PRINT FILE FORMAT\n         B     IEBCOPY1                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nNL$NCOPY BA&XA R10,TEST$DMP             IS IT IEHDASDR?\n         B     NL$NDSDR                 NO\n         NOP   0                        YES - BUT DON'T USE 2ND     WBF\n*                                             PRINT FILE            WBF\n         B     IHDASDR1\n         SPACE 2\n******************************************************************* SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  WHEN READING PTF TAPES WHICH HAVE APARS FIRST, AND               SBG\n*   THE APARS HAVE IEBUPDTE CONTROL CARDS IN THEM FOR SOURCE UPDATE,SBG\n*   WE WANT TAPEMAP TO THINK THAT THE TAPE HAS PTFS OR APARS,       SBG\n*   NOT IEBUPDTE CONTROL STATEMENTS, WHICH ARE SECONDARY            SBG\n*   TO THE FACT THAT WE HAVE AN APAR TAPE.                          SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n******************************************************************* SBG\n*  NOTE THAT WE DON'T WANT TO TEST FOR SMPPTFIN ON A CBT TAPE.12/88 SBG\n******************************************************************* SBG\nNL$NDSDR DS    0H                                             11/88 SBG\n         BA&XA R10,TEST$CBT             IS IT CBT973 COMPRESS 11/88 SBG\n         B     NL$NCBT                  NO                    11/88 SBG\n         B     CBT2                     YES - 2 PRINT FILE FMT11/88 SBG\n         B     CBT1                     YES - 1 PRINT FILE FMT11/88 SBG\n         SPACE 3                                              11/88 SBG\nNL$NCBT  DS    0H                       LABEL FOR NOT DASDR         SBG\n         SPACE 3                                              07/85 DBC\n         BA&XA R10,TEST$PTF        DOES FILE CONTAIN PTFS?    07/85 DBC\n         B     NL$NPTFS            +0 NO, SKIP                06/86 SBG\n         B     PTFS2               +4 YES, GO DUMP IT         07/85 DBC\n         B     PTFS1               +8 YES, JUST SAY SO        07/85 DBC\n*       NEXT 5 LINES ARE SWITCHED WITH PREV 6 LINES & NAMES CHANGED SBG\nNL$NPTFS DS    0H                                             06/86 SBG\n         BA&XA R10,TEST$UPS             MAYBE IEBUPDTE INPUT STREAM?\n         B     NL$NUPDT                 BOY WILL THIS BE UNRELIABLE SBG\n         B     IEBUPDT2                 YES - 2 PRINT FILE FORMAT\n         B     IEBUPDT1            +8 YES & 1-PRT: HANDLE     07/85 DBC\nNL$NUPDT DS    0H                                             06/86 SBG\n         BA&XA R10,TEST$FDR             IS IT FDR?            07/85 DBC\n         B     NL$NFDR                  NO\n         B     FDR2                     YES - 2 PRINT FILE FORMAT   WBF\n         B     FDR1                     YES,- 1 PRINT FILE FORMAT   WBF\n         SPACE 2\nNL$NFDR  BA&XA R10,TEST$IS              IS IT IEBISAM?        11/88 SBG\n         B     NL$NCDOC                 DIDN'T THINK SO...\n         B     IEBISAM2                 YES - 2 PRINT FILE FORMAT\n         B     IEBISAM1                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$NCDOC BA&XA R10,TEST$CH              IS IT CBT DOC FILE?   12/88 SBG\n         B     NL$NIS                   NUH UH.               12/88 SBG\n         B     NL$LOOP                  YES - DISPLAY EXTRCT'D12/88 SBG\n         B     CBTDOC1                   DATA ON REPORT #1    12/88 SBG\n         SPACE 3                                              12/88 SBG\nNL$NIS   BA&XA R10,TEST$SLK             IS IT A SLICK BACKUP?\n         B     NL$NSLK                  DIDN'T THINK SO...\n         B     SLK2                     YES - 2 PRINT FILE FORMAT\n         B     SLK1                     YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$NSLK  BA&XA R10,TEST$MAP             IS IT A TAPEMAP PRINT FILE?\n         B     NL$LOOP                  NO\n         B     MAP2                     YES - 2 PRINT FILE FORMAT\n****     B     NL$LOOP                  YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$LOOP  TAPIO TCCW#DAT,TM=NL$EOF       READ A BLOCK\n         B     NL$LOOP                  DO THAT TILL EOF\n         SPACE 2\nNL$EOF   CLI   UNLOADER,C' '            A SECOND LINE?\n         BE    *+12                     NO - SKIP\n         NEWPAGE  2                     MAKE SURE WE HAVE ENOUGH\n         SPACE 1\nNL$SL    DS    0H                                             07/85 DBC\n         LH    R1,FILE#SEQ              GET THE FILE SEQ #\n         CVD   R1,DWD                   PACK IT\n         MVC   #FILE-2(6),=X'402020202120'                    09/84 DBC\n         ED    #FILE-2(6),DWD+5\n         SPACE 1                                              09/84 DBC\n         MVC   #UNLOAD,UNLOADER\n************************************************************* 12/88 SBG\n*  IF THIS IS A CBT HEADER, PUT THE DISPLAY INFO INTO       * 12/88 SBG\n*    THE DSNAME SLOT.  VER XXX  MM-DD-YY.                   * 12/88 SBG\n************************************************************* 12/88 SBG\n         SPACE 1                                              12/88 SBG\n         CLC   UNLOADER(8),CBHEADER     WAS IT CBTHEADER?     12/88 SBG\n         BNE   NL$CBHD                  NO. NORMAL PROCESSING 12/88 SBG\n         MVC   #DSN(17),CBHLIT     DISPLAY CBT DOC INFO       12/88 SBG\n         MVC   #DSN+4(4),CBTVERS   PUT IN VERSION NUMBER      12/88 SBG\n         MVC   #DSN+9(8),CBTDATE   PUT IN RELEASE DATE        12/88 SBG\nNL$CBHD  DS    0H                                             12/88 SBG\n         SPACE 3\n         CLC   =C'(NULL)',UNLOADER+2 SL NULL FILE?            07/85 DBC\n         BE    NLSLDONE                 YES - CAN'T DO ANYTHING\n         SPACE 1\n         MVC   #INFOSRC,=C' SCAN ' IDENTIFY INFO SOURCE       06/84 DBC\n         MVI   #RECFM,C'V'              ASSUME RECFM=V\n         TM    NLFLAGS,NL@V             IS IT?\n         BO    NL$1                     YES - CONTINUE\n         MVI   #RECFM,C'F'              ASSUME RECFM=F\n         TM    NLFLAGS,NL@F             IS IT?\n         BO    NL$1                     YES - CONTINUE\n         MVI   #RECFM,C'U'              ANYTHING ELSE IS RECFM=U\n         SPACE 2\nNL$1     L     R0,MAXBLKSI         GET SIZE OF LARGEST BLOCK  09/84 DBC\n         CVD   R0,DWD\n         MVC   #BLKSIZE(5),=X'2020202120'\n         ED    #BLKSIZE-1(6),DWD+5\n         SPACE 1\n*******  MVI   #LRECL+4,C'?'\n         SPACE 1\n         L     R0,BLOCKCNT              GET BLOCK COUNT\n         CVD   R0,DWD\n         MVC   #BLKCNT-1(7),=X'20202020202120'\n         ED    #BLKCNT-2(8),DWD+4\n         SPACE 1\n         MVC   #DEN+1(1),TRUE#DEN\n         L     R14,TRUE#DEN\n         TM    PARMFLAG,PF@DEN1\n         BO    *+10\n         MVC   #DEN,24(R14)                                         THO\n         SPACE 1\n         L     R15,BLOCKCNT             COUNT # OF GAPS\n         L     R1,BYTECNT\n         M     R1-1,=F'100'             SCALE\n         D     R1-1,0(,R14)             DIVIDE BY BYTES/INCH\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   DEN3420A                 NO, THEN 3420               THO\n         AH    R1,=Y(8)                 ADD 1 TAPEMARK              THO\n         TM    TFLAG1,T1@SL             REALLY SL?\n         BNO   *+12                     NO - SKIP\n         AH    R1,=Y(2*8)               YES - 2 MORE TAPEMARKS      THO\n         LA    R15,4(,R15)              INCR # OF GAPS\n         M     R15-1,=F'08'             EACH GAP IS .08 INCH        THO\n         B     LENCALC1                                             THO\nDEN3420A AH    R1,=Y(375)               ADD 1 TAPEMARK              THO\n         TM    TFLAG1,T1@SL             REALLY SL?                  THO\n         BNO   *+12                     NO - SKIP                   THO\n         AH    R1,=Y(2*375)             YES - 2 MORE TAPEMARKS      THO\n         LA    R15,4(,R15)              INCR # OF GAPS              THO\n         M     R15-1,=F'60'             EACH GAP IS .60 INCH\n         CLI   TRUE#DEN,C'4'            UNLESS IT'S A 6250 TAPE\n         BNE   *+8                      IT ISN'T\n         SRL   R15,1                    THEN THEY'RE .3 INCH EACH\nLENCALC1 AR    R1,R15                   ADD IN LENGTH OF GAPS       THO\n         LR    R2,R1                    SAVE\n         ICALL TAPEFEET,R14,R15=#LENGTH-2                     06/84 DBC\n         A     R2,LEN#TAPE+4\n         ST    R2,LEN#TAPE+4\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#CUMLEN-2                     06/84 DBC\n         SPACE 2\n         PRTLN OUTBUFF\n         CLI   UNLOADER,C' '            ANY SECOND PRINT LINE?\n         BE    NL$DONE                  NO - SKIP\n         TM    PARMFLAG,PF@INLIN        PARM=INLINE?\n         BNO   NL$DONE                  NO - NO SECOND LINE\n         PRTLN OUTBUFF2\n         MVC   OUTBUFF2,OUTCLR2\n         SPACE 2\nNL$DONE  TM    TFLAG1,T1@SL             THIS TAPE SL?\n         BO    NLSLDONE                 YES - DIFFERENT HANDLING\n         SPACE 1\nNL$DONEX TAPIO TCCW#DAT,TM=NULL$NL      READ NEXT FILE'S FIRST BLK  U14\n         L     R2,LASTSIZE         GET SIZE OF LAST BLOCK     09/84 DBC\n         B     NL$NEXT                  PROCESS NEXT FILE\n         SPACE 3                                              07/85 DBC\nNULL$NL  LH    R1,NUMBNULL              GET NUMBER OF NULL FILES    U14\n         LA    R1,1(,R1)                INCR                        U14\n         STH   R1,NUMBNULL              SAVE NEW COUNT              U14\n         CH    R1,NULLNUMB              DONE ENOUGH?                U14\n         BH    HAVE$EOV                 YES - STOP                  U14\n         LH    R1,FILE#SEQ         NO, GET FILE #             07/85 DBC\n         MVC   #FILE-1(5),=X'2020202120'  MOVE IN EDIT MASK         U14\n         CVD   R1,DWD                                               U14\n         ED    #FILE-2(6),DWD+5                                     U14\n         MVC   #UNLOAD+2(6),=C'(NULL)'  PUT IN INDICATOR      06/84 DBC\n         PRTLN OUTBUFF                                              U14\n         L     R0,LEN#TAPE+4            GET ACCUMULATED TAPE LENGTH U14\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   DEN3420B                 NO, THEN 3420               THO\n         AH    R0,=Y(8)                 COUNT 1 TAPEMARK            THO\n         ST    R0,LEN#TAPE+4            SAVE UPDATED                U14\n         B     NL$DONEX                                             U14\nDEN3420B AH    R0,=Y(375)               COUNT 1 TAPEMARK            THO\n         ST    R0,LEN#TAPE+4            SAVE UPDATED                THO\n         B     NL$DONEX                                             THO\n         SPACE 3\n************************************************************* 12/88 SBG\n*   THIS IS THE START OF NORMAL STANDARD LABEL PROCESSING.  * 12/88 SBG\n************************************************************* 12/88 SBG\nTPVOL1OK OI    TFLAG1,T1@SL             INDICATE SL PROCESSING12/88 SBG\n         MVC   TITLE1+5(6),VOLSERNO\n         MVC   TITLE1+19(10),VOLOWNER\n         MVC   TITLE1+13(6),TITLE1+12   BLANK OUT KEYWORD\n         CLC   VOLOWNER,BLANKS          OWNER ALL BLANK?\n         BE    *+10\n         MVC   TITLE1+13(6),=C'OWNER='\n         NI    TFLAG2,255-T2@RQVOL      TURN OFF FLAG\n         CLC   VOLSERNO(6),JFCB+118     GET WHAT WE ASKED FOR?\n         BE    MATCHVOL                 YES - CONTINUE\n         OI    TFLAG2,T2@RQVOL          SET FLAG\n         SPACE 2\nMATCHVOL NEWPAGE ,                      PRINT HEADER LINES\n         NI    TFLAG1,255-T1@ANLZ       RESET FLAG\n         TM    PARMFLAG,PF@NL      NL PROCESSING FORCED?      06/84 DBC\n         BNZ   ANLZ1               YES, SET ANALYZE SIGNAL    06/84 DBC\n         TM    PARMFLAG,PF@NOCHK   NO, SCAN BYPASSED?         06/84 DBC\n         BNZ   NOANLZ1             YES, SKIP                  06/84 DBC\nANLZ1    OI    TFLAG1,T1@ANLZ      NO, SET ANALYZE SIGNAL     06/84 DBC\nNOANLZ1  DS    0H                                             06/84 DBC\n         SPACE 1\n         TM    PARMFLAG,PF@NL           FORCE NL ANALYSIS?\n         BNO   *+12                     NO - CONTINUE\nFORCENL  XI    TFLAG1,T1@SL             YES - TURN OFF FLAG\n         B     NL$NEXT                  AND GO TO NL ROUTINE\n         SPACE 1\n         MVI   WHERE,1                  SET \"WHERE ARE WE\" FLAG\n         MVC   FL1LABI(4),BLANKS        CLEAR OUT 'HDR1'      02/93 RT\n         TAPIO TCCW#LBL,TM=MAYBETT      READ THE HDR LABELS\n         B     DATAREAD                 SKIP FIRST TIME\nMAYBETT  EQU   *                                               1/93 RT\n         CLC   FL1LABI(4),=C'HDR1'      IS IT SL DOS TAPE?     1/93 RT\n         BNE   FORCENL                                         1/93 RT\n         MVI   FL2LABI,C'?'             CLEAR HDR2 TO '?'      1/93 RT\n         MVC   FL2LABI+1(70),FL2LABI                           1/93 RT\n         CLI   FL1LABI+4,C'0'      POSSIBLY IEHINITT?          1/93 RT\n         BNE   DECRFILE             NO                         1/93 RT\n         CLC   FL1LABI+5(70),FL1LABI+4      IEHINITT?          1/93 RT\n         BE    IEHINITT             YES                        1/93 RT\nDECRFILE LH    R0,FILE#SEQ         DECR TAPEMARK COUNTER       1/93 RT\n         BCTR  R0,0                                            1/93 RT\n         STH   R0,FILE#SEQ         STORE NEW VALUE             1/93 RT\n         TAPIO TCCW#BSF            BACKSPACE A FILE            1/93 RT\n         B     DATAREAD                 SKIP FIRST TIME\n         SPACE 3                                              07/85 DBC\nNLSLDONE TM    TFLAG1,T1@SL        SL-TAPE?                   07/85 DBC\n         BZ    SPACER              NO, SKIP THIS              07/85 DBC\n         CLC   =C'0001',FL1VOLSQ        FIRST VOLUME OF FILE?\n         BE    TEST$EOV                 YES.\n         CLC   =C'    ',FL1VOLSQ        MISSING VOL SEQ FLD?  02/93 RT\n         BE    TEST$EOV                 YES.                  02/93 RT\n         MVC   FVOL#MSG+22(4),FL1VOLSQ  VOL SEQ #\n         MVC   FVOL#MSG+80(6),FL1FILSR  FIRST VOLSER\n         PRTLN FVOL#MSG\n         SPACE 2\nTEST$EOV CLC   =C'EOV2',FL2LABI\n         BNE   NOT$EOV                  EOV.\n         PRTLN ' *** THE ABOVE FILE IS CONTINUED ON ANOTHER VOLUME'\n         B     HAVE$EOV            ALL DONE                   07/85 DBC\nNOT$EOV  DS    0H                                             07/85 DBC\n         SPACE 3                                              07/85 DBC\nSPACER   PRTLN OUTBUFF                  BLANK LINE\n         TAPIO TCCW#FSF                 FWD SPACE\n         MVI   WHERE,1                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#LBL,TM=MAYBET2      READ HDR LABELS\n         B     DATAREAD                                       02/93 RT\n         SPACE 1\nMAYBET2  EQU   *                                               1/93 RT\n         CLC   FL1LABI(4),=C'HDR1'      IS IT SL DOS TAPE?     1/93 RT\n         BNE   HAVE$EOV                                        1/93 RT\n         MVI   FL2LABI,C'?'             CLEAR HDR2 TO '?'      1/93 RT\n         MVC   FL2LABI+1(70),FL2LABI                           1/93 RT\n         LH    R0,FILE#SEQ         DECR TAPEMARK COUNTER       1/93 RT\n         BCTR  R0,0                                            1/93 RT\n         STH   R0,FILE#SEQ         STORE NEW VALUE             1/93 RT\n         TAPIO TCCW#BSF            BACKSPACE A FILE            1/93 RT\n         B     DATAREAD\nDATAREAD TAPIO TCCW#FSF                 SKIP TO END OF HDR LABELS\n         MVC   UNLOADER,UNLOADER-1      CLEAR UNLOADED FLAG\n         MVI   NLFLAGS,NL@V+NL@F        ASSUME RECFM=V & RECFM=F\n         MVI   WHERE,3                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#DAT,TM=NULLFILE     READ DATA\n         L     R1,LASTSIZE         GET SIZE OF (FIRST) BLOCK  09/84 DBC\n         ST    R1,MAXBLKSI         INIT BIGGEST BLOCK READ    09/84 DBC\n         AH    R1,=Y(4*80)              2 HDR + 2 EOF LABELS\n         ST    R1,BYTECNT               INIT TOTAL BYTES READ\n         MVC   BLOCKCNT,F1              INIT NUMBER OF BLOCKS READ\n         NI    NLFLAGS,255-NL@CHANG     FIRST BLOCK NOT A CHANGE\n         OI    NLFLAGS,NL@F             STILL COULD BE RECFM=F\n         SPACE 2\n         BA&XA R10,TEST$CH              TEST FOR CBT HEADER   10/90 SBG\n         B     TSTRECFM                 NOT CBTHEADER, GO ON  10/90 SBG\n         NOP   0                        NO EFFECT ON REPORT 2 10/90 SBG\n         B     TEST$LCT                 PROCESS HEADER FILE   10/90 SBG\n         SPACE 2                                              10/90 SBG\nTSTRECFM CLI   FL2RECFM,C'F'            RECFM=FB?             10/90 SBG\n         BNE   NOT$RF$F                 NO - NOT IEHMOVE OR IEBISAM\n         CLC   FL2LRECL,C00080          LRECL=80?\n         BNE   FIND$EOF                 NO - NOT IEHMOVE OR IEBISAM\n***      CLC   FL2BLKL,C00800           BLKSIZE=800?\n***      BNE   TST$UPDT                 NO - NOT IEHMOVE'D\n         CLI   FL2BLKA,C'B'             BLOCKED?\n*  SWITCH TESTS FOR SMPPTFIN AND IEBUPDTE                           SBG\n         BNE   TST$UPDT                 NO - NOT IEHMOVE'D     2/93 RT\n         BA&XA R10,TEST$MV              IS IT IEHMOVE?\n         B     TST$UPDT                 NO - TRY NEXT               SBG\n         B     IEHMOVE2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\n************************************************************* 06/86 SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  WHEN READING PTF TAPES WHICH HAVE APARS FIRST, AND               SBG\n*   THE APARS HAVE IEBUPDTE CONTROL CARDS IN THEM FOR SOURCE UPDATE,SBG\n*   WE WANT TAPEMAP TO THINK THAT THE TAPE HAS PTFS OR APARS,       SBG\n*   NOT IEBUPDTE CONTROL STATEMENTS, WHICH ARE SECONDARY            SBG\n*   TO THE FACT THAT WE HAVE AN APAR TAPE.                          SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n************************************************************* 06/86 SBG\n         SPACE 3                                              07/85 DBC\nTST$UPDT DS    0H                LABEL FOR TEST IEBUPDTE            SBG\n*                          BUT TEST FOR PTFIN COMES FIRST, SO       SBG\n*  I SWITCHED DAVE'S CODE AROUND BETWEEN THESE 3 LABELS.            SBG\n         BA&XA R10,TEST$PTF        DOES FILE CONTAIN PTFS?    07/85 DBC\n         B     TST$NPTF            +0 NO, SKIP                07/85 DBC\n         B     PTFS2               +4 YES & 2-PRT FMT; HANDLE 07/85 DBC\n         B     TEST$LCT            +8 YES & 1-PRT FMT; HANDLE 07/85 DBC\nTST$NPTF DS    0H                                             07/85 DBC\n         BA&XA R10,TEST$UPS             SEE IF IEBUPDTE INPUT STREAM\n         B     TST$NUPD            +0 PROBABLY NOT            07/85 DBC\n         B     IEBUPDT2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT            +8 YES, JUST SAY SO        07/85 DBC\nTST$NUPD DS    0H                                             07/85 DBC\n*  I SWITCHED DAVE'S CODE AROUND BETWEEN THESE 3 LABELS.            SBG\n         SPACE 3\nTST$ISAM BA&XA R10,TEST$IS              IS IT IEBISAM?\n         B     TST$MAP                  NO                    11/88 SBG\n         B     IEBISAM2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nTST$MAP  BA&XA R10,TEST$MAP             IS IT A TAPEMAP PRINT FILE?\n         B     FIND$EOF                 NO\n         B     MAP2                     YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNOT$RF$F CLC   =X'CA6D0F',TAPEBUFF+9    TEST IEBCOPY FIRST    10/05 SBG\n         BE    FORGTLBL         IEBCOPY-IGNORE WHAT'S IN LABEL08/90 SBG\n*        CLC   =X'01CA6D0F',TAPEBUFF+8  TEST IEBCOPY FOR PDSE 06/93 RT\n*        BE    FORGTLBL         IEBCOPY-IGNORE WHAT'S IN LABEL06/93 RT\n         CLI   FL2RECFM,C'V'            RECFM=V?              08/90 SBG\n         BNE   NOT$RF$V                 NO - NOT IEBCOPY'D\n         CLI   FL2BLKA,C'S'             RECFM=VS?\n         BNE   TST$CBT                  NOT VS. MAYBE CBT973. 11/88 SBG\nFORGTLBL BA&XA R10,TEST$CPY             IS IT VS2COPY?        08/90 SBG\n         B     TST$CBT                  NO - MAYBE CBT\n         B     IEBCOPY2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nTST$CBT  BA&XA R10,TEST$CBT             IS IT CBT973 COMPRESS 11/88 SBG\n         B     FIND$EOF                 NO                    11/88 SBG\n         B     CBT2                     YES - 2 PRINTFILE FMT 11/88 SBG\n         B     TEST$LCT                 YES - 1 PRINTFILE FMT 11/88 SBG\n         SPACE 3                                              11/88 SBG\nNOT$RF$V CLI   FL2RECFM,C'U'            RECFM=U?\n         BNE   FIND$EOF                 NO - NOT IEHDASDR\n         BA&XA R10,TEST$DMP             IS IT IEHDASDR?\n         B     TST$FDR                  NO\n         NOP   0                        DON'T USE 2ND PRINT FILE    WBF\n         B     TEST$LCT                 CONTINUE\n         SPACE 3\nTST$FDR  BA&XA R10,TEST$FDR             IS IT FDR?\n         B     TST$SLK                  NO\n         B     FDR2                     YES - 2 PRINT FILE FORMAT   WBF\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT   WBF\n         SPACE 3\nTST$SLK  BA&XA R10,TEST$SLK             IS IT IEBISAM?\n         B     FIND$EOF                 NO\n         B     SLK2                     YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nTEST$LCT TM    PARMFLAG,PF@INLIN        PARM=INLINE?\n         BNO   FIND$EOF                 NO - SKIP THIS\n         NEWPAGE  2                     MORE THAN 1 LINE LEFT?\n         SPACE 1\n         CLC   IEBCOPY,UNLOADER         UNLOADED BY IEBCOPY?\n         BE    IEBCOPY1                 YES - PRINT EXTRA INFO\n         CLC   IEHMOVE,UNLOADER         UNLOADED BY IEHMOVE?\n         BE    IEHMOVE1                 YES - PRINT EXTRA INFO\n         CLC   IEBISAM,UNLOADER         UNLOADED BY IEBISAM?\n         BE    IEBISAM1                 YES - PRINT EXTRA INFO\n         CLC   IEHDASDR,UNLOADER        DUMPED BY IEHDASDR?\n         BE    IHDASDR1                 YES - PRINT EXTRA INFO\n         CLC   FDR,UNLOADER             DUMPED BY FDR?\n         BE    FDR1                     YES - PRINT EXTRA INFO\n         CLC   SLICKMNG,UNLOADER        UNLOADED BY SLICK?\n         BE    SLK1                     YES - PRINT EXTRA INFO\n         CLC   CBT973,UNLOADER          CBT973 COMPRESS FORMAT11/88 SBG\n         BE    CBT1                     YES - PRINT EXTRA INFO11/88 SBG\n         CLC   CBTEMPTY,UNLOADER        CBT TAPE EMPTY FILE?  11/88 SBG\n         BE    CBTEMP1                  YES - PRINT EXTRA INFO11/88 SBG\n         CLC   CBHEADER,UNLOADER        CBT TAPE DOC FILE?    12/88 SBG\n         BE    CBTDOC1                  YES - PRINT DESCRPTN  12/88 SBG\n         CLC   SMPPTFIN,UNLOADER   SYSMODS?                   07/85 DBC\n         BE    PTFS1               YES, GO SAY SO             07/85 DBC\n         CLC   IEBUPXXX,UNLOADER   NO, UPDATE STREAM?         07/85 DBC\n         BE    IEBUPDT1            YES, GO SAY SO             07/85 DBC\n****     CLC   CTAPEMAP,UNLOADER        CREATED FOR TAPEMAP?\n****     BE    MAP1                     DOESN'T MATTER - MORE THAN\n****                                    ONE LINE OF INFO, SO CAN'T\n****                                    PRINT IT INLINE\n         SPACE 3\nFIND$EOF TM    PARMFLAG,PF@NOCHK        CHECKING SL TAPE?     06/84 DBC\n         BZ    SCAN$EOF                 YES - READ TILL EOF   06/84 DBC\n         SPACE 1\n         TAPIO TCCW#FSF                 FSF PAST REST OF DATA\n         SPACE 2\nREAD$EOF MVI   WHERE,2                  SET \"WHERE ARE WE\" FLAG\n         MVC   FL1LABI(4),BLANKS                             02/93 RT\n         TAPIO TCCW#EOV,TM=MISS$EOF     READ TRAILER LABEL\nTEST$EOF CLC   =C'EOF1',FL1LABI         TRAILER LABEL?\n         BE    HAVE$EOF                 YES - OK\n         CLC   =C'EOV1',FL1LABI         OTHER KIND?\n         BE    HAVE$EOF                 YES - OK\n         SPACE 1\nMISS$EOF PRTLN '0EOF OR EOV LABEL NOT FOUND WHERE EXPECTED'\n         B     REWINDIT                 REWIND AND LEAVE    %%%%%%%%%\n         SPACE 2\nSCAN$EOF TAPIO TCCW#DAT,TM=SL$SAVE      READ & TALLY A DATA BLOCK\n         B     SCAN$EOF                 DO THAT TILL EOF\n         SPACE 2\nSL$SAVE  MVC   NL#SAVE(16),MAXBLKSI SAVE ALL INFO            09/84 DBC\n         MVC   NL#FLAGX,NLFLAGS         MORE...\n         B     READ$EOF                 GO READ THE EOF LABELS\n         SPACE 2\nHAVE$EOF LA    R1,1                     ASSUME 1-LINE GROUPS\n         TM    PARMFLAG,PF@NOCHK        CHECKING?             06/84 DBC\n         BNZ   *+8                      NO - SKIP             06/84 DBC\n         LA    R1,2(,R1)                YES - NEED 2 MORE EACH\n         CLI   UNLOADER,C' '            IS THIS FILE UNLOADED?\n         BE    *+8                      NO - SKIP\n         LA    R1,1(,R1)                YES - NEED 1 MORE LINE\n         TM    PARMFLAG,PF@INLIN        INLINE INFO?          12/88 SBG\n         BZ    *+8                      NO - SKIP             12/88 SBG\n         LA    R1,1(,R1)                YES - NEED EXTRA LINE 12/88 SBG\n         LR    R0,R1                    COPY FOR STUPID MACRO\n         NEWPAGE  (R0)                  CHECK FOR ENOUGH LINES\n         SPACE 2\n         TM    PARMFLAG,PF@NOCHK   SL TAPE WITH NL SCANNING?  07/85 DBC\n         BZ    BYWHOZ              YES, DEFER NAMING THE      07/85 DBC\n*                                  UNLOADER UNTIL I BUILD THE 07/85 DBC\n*                                  \"SCAN\" LINE MESSAGE.       07/85 DBC\n         MVC   #UNLOAD,UNLOADER         SAY WHO UNLOADED IT\nBYWHOZ   DS    0H                                             07/85 DBC\n         MVC   #FILE(4),FL1FILSQ        FILE #\n         ICALL DEZERO,R14,R1=#FILE      REMOVE LEADING ZEROES\n         MVC   #DSN(17),FL1ID           DSN\n         CLI   FL1FSEC,C'0'             PASSWORD PROTECTED?\n         BE    NOTPSWD                  NO - SKIP\n         CLI   FL1FSEC,C'1'             PASSWORD PROTECTED?\n         BE    YESPSWD                  YES - MOVE IT IN\n         CLI   FL1FSEC,C'3'             NOPWREAD?\n         BNE   WHATPSWD                 NO - WHAT THEN????\n         MVC   #PSWD,=C' WRT'           YES                   06/84 DBC\n         B     NOTPSWD                  CONTINUE\nWHATPSWD MVC   #PSWD,=C' ???'           SAY WHAT?             06/84 DBC\n         B     NOTPSWD\nYESPSWD  MVC   #PSWD,=C' YES'           SAY SO.               06/84 DBC\n         SPACE 3\nNOTPSWD  MVC   #CDATE(2),FL1CREDT+1     YEAR CREATED\n         MVI   #CDATE+2,C'.'\n         MVC   #CDATE+3(3),FL1CREDT+3   DAY CREATED\n         MVC   #EDATE(2),FL1EXPDT+1     YEAR EXPIRES\n         MVI   #EDATE+2,C'.'\n         MVC   #EDATE+3(3),FL1EXPDT+3   DAY EXPIRES\n         SPACE 3                                              06/84 DBC\n         MVC   #INFOSRC,=C'LABELS' SHOW INFO SOURCE           06/84 DBC\n         MVC   #BLKCNT(6),FL1BLKCT      BLOCK COUNT\n         ICALL DEZERO,R14,R1=#BLKCNT    REMOVE LEADING ZEROES\n         SPACE 2\n         MVC   #RECFM(1),FL2RECFM       RECFM\n         MVC   #RECFM+1(1),FL2BLKA      BLOCK ATTRIBUTE\n         MVC   #RECFM+2(1),FL2CNTRL     CONTROL CHARACTER\n         CLI   #RECFM+1,C'R'            WEIRDO RECFM?  (FR OR VR)\n         BNE   NOT$RF$R                 NOT RECFM=FR OR VR\n         MVC   #RECFM+3(1),#RECFM+2     MOVE CTL CHAR OVER\n         MVC   #RECFM+1(2),=C'BS'       IT'S REALLY FBS OR VBS\nNOT$RF$R MVC   #BLKSIZE(5),FL2BLKL      BLOCK LENGTH\n         ICALL DEZERO,R14,R1=#BLKSIZE   REMOVE LEADING ZEROES\n         MVC   #LRECL(5),FL2LRECL       RECORD LENGTH\n         ICALL DEZERO,R14,R1=#LRECL     REMOVE LEADING ZEROES\n         CLI   FL2DEN,C'?'              WAS A \"DOS SL\" TAPE FOUND?  JCH\n         BNE   *+10                     NO -> HDR2 VALUE IS VALID   JCH\n         MVC   FL2DEN(1),TRUE#DEN       YES-> USE ACTUAL AS VALUE   JCH\n         CLI   TRUE#DEN,C'5'            3480 CARTRIDGE ?            THO\n         BNE   *+8                      NO THEN BYPASS MOD          THO\n         MVI   FL2DEN,C'5'              MODIFY WITH 3480 DEN        THO\n         IC    R15,FL2DEN               GET TAPE DENSITY\n         STC   R15,#DEN+1               SET IN PRINT LINE\n         CLC   TRUE#DEN(1),FL2DEN       LABEL CORRECT?\n         BE    *+8                      YES - OK\n         OI    TFLAG1,T1@BADEN          SET BAD DENSITY FLAG\n         N     R15,F15                  JUST DIGIT\n         SLL   R15,2                    MULTIPLY BY 4\n         LA    R3,DEN#LIST(R15)         POINT TO DENSITY VALUE\n         TM    PARMFLAG,PF@DEN1         PARM=DEN1?\n         BO    DEN$1                    YES - LEAVE 1 CHAR DEN\n         CLI   FL2DEN,C'5'              TOO HIGH?                   THO\n         BH    DEN$1                    YES - SKIP\n         CLI   FL2DEN,C'0'              TOO LOW?\n         BL    DEN$1                    YES - SKIP\n         MVC   #DEN,24(R3)              MOVE CHAR FORM OF DENSITY   THO\n         SPACE 1\nDEN$1    MVC   #TRTCH+1(2),FL2TRTCH     TAPE RECORDING TECHNI 06/84 DBC\n         SPACE 1                                              06/84 DBC\n         MVC   #CREATOR(8),FL2JOBD GET CREATING JOBNAME       06/84 DBC\n         CLI   FL2STEPD,C' '       IS THERE A STEPNAME?       06/84 DBC\n         BE    GOTCREAT            NO, SKIP                   06/84 DBC\n         MVI   #CREATOR-1,C'X'     YES, SET SCAN STOPPER      06/84 DBC\n         LA    R1,#CREATOR+8       LOAD BACK-SCANNER          06/84 DBC\n         BA&XA.R R14,0             LOAD LOOP HEAD             06/84 DBC\n         BCTR  R1,0                BACK SCAN                  06/84 DBC\n         CLI   0(R1),C' '          EO-JOBNAME YET?            06/84 DBC\n         BER   R14                 NO, CONTINUE BACKSCAN      06/84 DBC\n         MVI   1(R1),C'/'          YES, INSERT SEPARATOR      06/84 DBC\n         MVC   2(8,R1),FL2STEPD    GET STEPNAME               06/84 DBC\n         MVI   #CREATOR-1,C' '     CLEAR STOPPER              06/84 DBC\nGOTCREAT DS    0H                                             06/84 DBC\n         SPACE 2\n*    *****  COMPUTE THE LENGTH (INCHES) OF THIS TAPE DATA SET.\n         SPACE 1                                              06/84 DBC\n         TM    PARMFLAG,PF@NOCHK   DON'T DO IT IF A SCAN IS - 06/84 DBC\n         BZ    SKIPGUES             BEING DONE ANYWAY         06/84 DBC\n         SPACE 1\n         PACK  DWD,FL1BLKCT(6)          BLOCK COUNT\n         CVB   R15,DWD                  SAVE BLOCK COUNT\n         LA    R1,4(,R15)               ADD 4 GAPS TO BLOCK COUNT.\n         L     R3,TRUE#DEN              GET PTR TO TRUE DENSITY\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   *+12                     NO, THEN 3420               THO\n         M     R1-1,=F'08'              EACH GAP IS .08 INCH        THO\n         B     *+20                                                 THO\n         M     R1-1,=F'60'              EACH GAP IS 6/10 INCH\n*  NOTE - LENGTH KEPT IN .01 INCHES\n         CLI   TRUE#DEN,C'4'            6250 BPI?\n         BNE   *+8                      NO - SKIP\n         SRL   R1,1                     GAPS AT 6250 ARE .3 INCH\n         LR    R2,R1                    SAVE LENGTH OF GAPS\n         PACK  DWD,FL2BLKL(5)           BLKSIZE.\n         CVB   R1,DWD\n         MR    R1-1,R15                 BLKSIZE * BLOCK_COUNT\n         AH    R1,=Y(4*80)              2 HDR & 2 EOF LABELS\n         M     R1-1,=F'100'             CONVERT TO .01\n         D     R1-1,0(,R3)              DIVIDE BY DENSITY.\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   *+12                     NO, THEN 3420               THO\n         AH    R1,=Y(8*3)               3 TAPEMARKS @ 0.08 INCH     THO\n         B     *+8                                                  THO\n         AH    R1,=Y(375*3)             3 TAPEMARKS @ 3.75 INCH\n         AR    R2,R1                    ADD TO LENGTH OF DATA\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#LENGTH-2 FORMAT FILE LENGTH  06/84 DBC\n         A     R2,LEN#TAPE              ADD TO TOTAL LENGTH\n         ST    R2,LEN#TAPE              SAVE NEW TOTAL LENGTH\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#CUMLEN-2 FORMAT CUMULATIVE L 06/84 DBC\nSKIPGUES DS    0H                                             06/84 DBC\n         SPACE 1\n         PRTLN OUTBUFF\n         SPACE 2\n         TM    PARMFLAG,PF@NOCHK        SL WITH NL ANALYSIS?  06/84 DBC\n         BNZ   NO$CHECK                 NO - SEE IF SECOND LI 06/84 DBC\n         MVC   MAXBLKSI(16),NL#SAVE RESTORE INFO              09/84 DBC\n         MVC   NLFLAGS,NL#FLAGX         MORE...\n         B     NL$SL                    YES - GO DO IT\n         SPACE 2\nNO$CHECK TM    PARMFLAG,PF@INLIN        INLINE MESSAGES?\n         BNO   NLSLDONE                 NO - DO NEXT FILE\n         CLI   UNLOADER,C' '            UNLOADED?\n         BE    NLSLDONE                 NO - DO NEXT FILE\n         PRTLN OUTBUFF2                 PRINT TRUE ATTRS OF UNLOADED DS\n         MVC   OUTBUFF2,OUTCLR2         CLEAR OTHER PRINT LINE\n         B     NLSLDONE                 DO NEXT FILE\n         SPACE 3\nHAVE$EOV PRTLN '-     *** EOV ***'\n         CLC   LCTR2,=F'0'              ANYTHING PRINTED ON OTHER PAGE?\n         BZ    NO$EOV2                  NO - SKIP\n         MVC   OUTBUFF2(17),=C'-     *** EOV ***'\n         PRTLN2                         FLAG END OF OTHER PRINT FILE\n         SPACE 1\nNO$EOV2  TM    TFLAG1,T1@BADEN          ANY INCORRECT DENSITIES?\n         BNO   NO$BADEN                 NO - SKIP\n         LA    R0,9                     ASSUME NOT PARM=NONOTE\n         TM    PARMFLAG,PF@NONOT        WANT THE NOTE?\n         BNO   *+8                      YES - SO USE 9\n         LA    R0,6                     PARM=NONOTE, SO USE 6\n         NEWPAGE  (R0)                  GO TO TOP OF PAGE IF NEEDED\n         LA    LCTR,1(,LCTR)            WILL CALL PRTLN 1 EXTRA TIME\n         MVC   OUTBUFF(113),INCORLAB    REPL LITERAL BY FIELD 10/90 SBG\n*                                       FOR ADDRESSABILITY    10/90 SBG\n         L     R2,TRUE#DEN              GET PTR TO 4 CHAR TRUE DEN\n         CLI   TRUE#DEN,C'2'            800 BPI?\n         BNE   *+6                      NO - OK\n         BCTR  R2,0                     RIGHT JUSTIFY THE \"800\"\n         MVC   OUTBUFF+98(4),20(R2)     MOVE INTO PRINT LINE\n         PRTLN OUTBUFF\n         MVI   OUTBUFF,C'+'             SET FOR OVERPRINT\n         MVC   OUTBUFF+98(4),20(R2)     LIGHT UP THE DENSITY\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE\n         BA&XA R14,PUTPRTLN             PRINT IT ONCE (NO CLEAR OUTBUFF\n         PRTLN OUTBUFF                  AND THE THIRD TIME\n         SPACE 2\nNO$BADEN TM    PARMFLAG,PF@NONOT        WANT THE NOTE?\n         BO    REWINDIT                 NO - SO DON'T\n         NEWPAGE  4                     ENOUGH LINES LEFT ON PAGE?\n         PRTLN '0NOTE:  LENGTH(S) ARE COMPUTED, (BASED ON BLKSIZE, BLKC$\n               OUNT, AND DENSITY), AND ARE THEREFORE ONLY APPROXIMATE.'\n         TM    TFLAG1,T1@ANLZ           ANALYZING?\n         BO    REWINDIT                 YES - GOOD LENGTHS PRINTED\n         PRTLN '        LENGTHS FOR RECFMS OTHER THAN F,FB,ETC MAY NOT $\n               BE VERY CLOSE TO THE TRUE LENGTH.'\n         SPACE 2\nREWINDIT TAPIO TCCW#RWD                 REWIND THE TAPE\n         SPACE 2\nCLOSE$TP CLOSE MF=(E,TAPEMFL)\n         SPACE 2\nRETURN   L     R14,RET#ADDR             GET RETURN ADDR\n         BR    R14\n         SPACE 2\nNULLFILE MVC   UNLOADER+2(6),=C'(NULL)' PUT IN INDICATOR      06/84 DBC\n         TAPIO TCCW#LBL   %%%%%         READ EOF'S                %%%%%\n         B     TEST$EOF   %%%%%         TEST FOR 'EOF'            %%%%%\n         SPACE 2\nUNEXTPMK PRTLN '0*** UNEXPECTED TAPE MARK ***'\n         B     REWINDIT                 CLOSE UP & LEAVE\n         SPACE 2\nLEADTPMK NEWPAGE  ,                     PRINT THE HEADER LINES\n         PRTLN '0++++ TAPE HAS LEADING TAPE MARK ++++'\n         BCTR  LCTR,0                   ACCOUNT FOR EXTRA BLANK LINE\n         PRTLN OUTBUFF                  BLANK LINE\n         MVI   VOLLABI,C'X'             INSURE NL ROUTINE\n         MVI   NUMBNULL+1,1             INIT NUMBER OF NULL FILES   U14\n         TAPIO TCCW#DAT,TM=LEAD$EOV     READ FIRST BLOCK FROM FILE  U14\n         B     DO$SENSE                 DO NL ANALYSIS\n         SPACE 2\nLEAD$EOV MVI   NUMBNULL+1,2             SET NUMBER OF NULL FILES    U14\n         CLI   NULLNUMB+1,2             TOO MANY?                   U14\n         BL    HAVE$EOV                 YES - STOP                  U14\n         MVC   #UNLOAD+2(6),=C'(NULL)'  FLAG IT               06/84 DBC\n         MVI   #FILE+3,C'1'             SET FOR PRINT               U14\n         PRTLN OUTBUFF                                              U14\n         B     DO$SENSE                                             U14\n         SPACE 2\nIEHINITT PRTLN '-++++ TAPE HAS BEEN RE-LABELLED WITH IEHINITT ++++'\n         B     REWINDIT                 ...\n         EJECT\nTEST$MV  CLC   =C'UNLOADED',TAPEBUFF+16 IEHMOVE'S TRADEMARK?\n         BNER  R10                      NO\n         MVC   UNLOADER(7),IEHMOVE      SAY WHO\n         SPACE 1\nTEST$RET IFP2  Y,4(,R10)                RETURN POINT FOR 2 PRINT FILES\n         B     8(,R10)                  RETURN POINT FOR 1 PRINT FILE\n         SPACE 2\n************************************************************  11/88 SBG\n* THE CBT973 COMPRESS PROGRAM MAY BE FOUND IN SOURCE FORM  *  11/88 SBG\n* ON THE CBT MODS TAPE, FILE (2,NL), RECFM=FB,LRECL=80,    *  11/88 SBG\n* BLKSIZE=32720.  IT TAKES 80-BYTE FB RECORDS AS INPUT,    *  11/88 SBG\n* AND PRODUCES 94-BYTE LRECL, VB RECORDS AS OUTPUT.        *  11/88 SBG\n*                                                          *  11/88 SBG\n* DATA COMPRESSION TAKES THE FORM OF SQUEEZING OUT BLANKS. *  11/88 SBG\n* A 10-BYTE BIT MAP HEADER TELLS THE PROGRAM WHICH OF THE  *  11/88 SBG\n* 80 CHARACTERS WERE BLANKS, AND WHICH WERE NOT.  A RDW    *  11/88 SBG\n* PRECEDES THE 10-BYTE BIT MAP, FOLLOWED BY THE NON-BLANK  *  11/88 SBG\n* BYTES OF THE RECORD.  THE PROGRAM COUNTS ON A LOT OF     *  11/88 SBG\n* BLANK CHARACTERS IN THE RECORD, TO ALLOW COMPRESSION     *  11/88 SBG\n* TO BE ACHIEVED.                                          *  11/88 SBG\n*                                                          *  11/88 SBG\n* IT IS THE PRACTICE ON THE CBT TAPE TO IEBUPDTE-UNLOAD    *  11/88 SBG\n* A SOURCE-FORMAT PDS TO A SEQUENTIAL FILE, AND THEN TO    *  11/88 SBG\n* COMPRESS THE BLANKS OUT WITH THE CBT973 PROGRAM WHEN     *  11/88 SBG\n* UNLOADING THE FILE ON TO THE CBT TAPE.  TAPEMAP USES     *  11/88 SBG\n* THE CBT973 DECOMPRESS ALGORITHM TO DECOMPRESS ONE        *  11/88 SBG\n* 80-BYTE RECORD AT A TIME, AND THEN USES ITS IEBUPDTE     *  11/88 SBG\n* MEMBER NAME INTERPRETATION ON EACH DECOMPRESSED RECORD.  *  11/88 SBG\n*                                                          *  11/88 SBG\n* MEMBER NAMES IN UNLOADED LIBRARIES ARE THUS DIRECTLY     *  12/88 SBG\n* REPORTED BY DOING A \"TAPEMAP\" RUN ON A CBT TAPE.         *  11/88 SBG\n*                                                          *  12/88 SBG\n* USUALLY ANY FB 80-BYTE LRECL NON-IEBUPDTE FILES ARE ALSO *  12/88 SBG\n* COMPRESSED.  THESE FILES WILL APPEAR ON REPORT 2 BUT     *  12/88 SBG\n* WILL NOT SHOW AS HAVING ANY MEMBERS.                     *  12/88 SBG\n************************************************************  11/88 SBG\nTEST$CBT CLC   TAPEBUFF+2(3),=X'000000' LOOK LIKE BDW+X'00'?  11/88 SBG\n         BNER  R10                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+0(2),=X'0000'   LOOK LIKE BDW?        11/88 SBG\n         BER   R10                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+6(2),=X'0000'   LOOK LIKE RDW?        11/88 SBG\n         BNER  R10                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+4(2),=X'0000'   LOOK LIKE RDW?        11/88 SBG\n         BER   R10                      NO CAN'T BE CBT973 FMT11/88 SBG\nTEST$CBA LA    R1,TAPEBUFF+4    IF CBT973, THEN START OF RDW  11/88 SBG\n         LH    R3,0(,R1)    DON'T BE MODULO 256..SAVE IT ALL. 07/90 SBG\n         C     R3,=F'94'            LRECL=94 MAX FOR CBT973.  11/88 SBG\n         BHR   R10                  BETWEEN 95 & 255, NOT CBT 11/88 SBG\n         ST    R4,CBSAVE4           USE R4 FOR WKREG          11/88 SBG\n         LH    R4,TAPEBUFF          GET BLKSIZE FROM BDW      11/88 SBG\n         S     R4,=F'4'             4 LESS FOR COMPARE W/RECSZ11/88 SBG\n         CR    R3,R4                ONE RECORD IN THIS BLOCK? 11/88 SBG\n         BL    TEST$CBN             YES. SKIP TEST PAST EO-REC11/88 SBG\n************************************************************* 12/88 SBG\n*   \"EMPTY FILES\" ON THE CBT TAPE ARE NOT REALLY EMPTY.     * 12/88 SBG\n*    THEY ARE ONE-RECORD CBT973 COMPRESSED FILES WITH A     * 12/88 SBG\n*    CERTAIN FIXED LITERAL EXPRESSION ON THE ONE CARD.      * 12/88 SBG\n*    A USER OF THE CBT TAPE WOULD LIKE TO KNOW WHICH TAPE   * 12/88 SBG\n*    FILES ARE CONSIDERED \"EMPTY\" BY THE TAPE ADMINISTRATOR.* 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBL CLC   14(L'EMPTYLIT,R1),EMPTYLIT   CBT \"EMPTY\" FILE? 11/88 SBG\n         BE    TEST$CBE             FLAG AS CBT EMPTY FILE    12/88 SBG\n         CLC   14(L'EMPTYLI2,R1),EMPTYLI2   OLD \"EMPTY\" FILE? 12/88 SBG\n         BNE   TEST$CBN             NO-STILL TEST FOR CBT973. 12/88 SBG\n************************************************************* 12/88 SBG\n*   AN \"EMPTY FILE\" ON THE CBT TAPE HAS BEEN FOUND.         * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBE MVC   UNLOADER(8),CBTEMPTY  REPORT AS EMPTY.         12/88 SBG\n         L     R4,CBSAVE4           RESTORE REG 4             11/88 SBG\n         TM    TFLAG2,T2@PRT2       IS SECOND REPORT WANTED?  12/88 SBG\n         BOR   R10            NO SECOND REPORT FOR EMPTY FILE 12/88 SBG\n         B     8(,R10)        WE WANT TO FLAG IF ONE REPORT   12/88 SBG\n************************************************************* 12/88 SBG\n*   CBTEMPTY IS FLAGGED ON 'PARM=INLINE', BUT WE DON'T WANT * 12/88 SBG\n*    WANT EMPTY CBT FILES REPORTED ON THE SECOND REPORT     * 12/88 SBG\n*    TO CONFUSE SOMEONE WHO MAY THINK IT IS A NONTRIVIAL    * 12/88 SBG\n*    NON-IEBUPDTE CBT973-COMPRESSED FILE.                   * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBN DS    0H                   NOT CBT EMPTY FILE        11/88 SBG\n         AR    R3,R1                PAST RECORD END           11/88 SBG\n         LH    R4,0(,R3)            GET SECOND RECORD SIZE    11/88 SBG\n         C     R4,=F'14'            SEE IF LESS THAN 14       11/88 SBG\n         BL    TEST$CJ1             LESS THAN 14 IS NO GOOD   08/90 SBG\n         C     R4,=F'94'            SEE IF MORE THAN 94       08/90 SBG\n         BNH   TEST$CJ2             IN BETWEEN, TEST FURTHER  08/90 SBG\nTEST$CJ1 L     R4,CBSAVE4           RESTORE REG 4 BEFORE RET  08/90 SBG\n         BR    R10                  GO BACK TO CALLER         08/90 SBG\nTEST$CJ2 CLI   0(R3),X'00'          IF CBT973, MUST BE X'00'  08/90 SBG\n         BNER  R10                  NOT SO, THEN NOT CBT973   11/88 SBG\n         CLI   1(R3),X'00'          IF CBT973, CAN'T BE X'00' 11/88 SBG\n         BER   R10                  IT IS, THEN NOT CBT973    11/88 SBG\n         CLC   2(2,R3),=X'0000'     LOOK LIKE RDW?            11/88 SBG\n         BNER  R10                  NO. CAN'T BE CBT973 FMT   11/88 SBG\nTEST$CBM LA    R1,14(,R1)           GO TO \"NONBLANK\" DATA     11/88 SBG\nTEST$CBO CLI   0(R1),X'40'          HAD BETTER NOT BE A BLANK 11/88 SBG\n         BER   R10                  IT IS A BLANK. NO GOOD.   11/88 SBG\n         LA    R1,1(,R1)            BUMP ONE BYTE             11/88 SBG\n         CR    R1,R3                END OF NONBLANK DATA?     11/88 SBG\n         BL    TEST$CBO             NO, KEEP TRYING           11/88 SBG\n         MVC   UNLOADER(6),CBT973   ASSUME CBT973 FORMAT      11/88 SBG\n         B     TEST$RET                 RETURN                11/88 SBG\n         SPACE 2                                              11/88 SBG\nTEST$CPY CLC   =X'CA6D0F',TAPEBUFF+9    VS2COPY'S TRADEMARK?  10/05 SBG\n         BE    TEST$CYY                 YES                   06/93 RT\n         CLC   =X'CA6D0F',TAPEBUFF+9    VS2COPY'S PDSE MK?    10/05 SBG\n         BNER  R10                      NO\nTEST$CYY MVC   UNLOADER(7),IEBCOPY      SAY WHO\n         B     TEST$RET                 RETURN\n         SPACE 2\nTEST$UPS ST    R10,DWD                  SAVE MY RETURN ADDR\n         LA    R2,80                    BXLE INCR\n         LA    R15,TAPEBUFF             BXLE START\n         LR    R3,R15                   COPY FOR END\n         A     R3,LASTSIZE         POINT PAST END            09/84 DBC\n         SR    R3,R2                    POINT TO LAST CARD IN BLOCK\n         SPACE 1\nTEST$UPL LR    R1,R15                   COPY CARD START ADDR\n         BA&XA R10,TEST$UP              IS THIS IEBUPDTE CTL CARD?\n         B     TEST$UPB                 NO - GO BXLE\n         MVC   UNLOADER(8),IEBUPXXX SAY WHO                   06/84 DBC\n         L     R10,DWD                  GET BACK MY RETURN ADDR\n         B     TEST$RET                 AND RETURN TO CALLER\n         SPACE 1\nTEST$UPB BXLE  R15,R2,TEST$UPL          TRY ALL CARDS IN THIS BLOCK\n         L     R10,DWD                  RESTORE RETURN ADDR\n         BR    R10                      NOT IEBUPDTE INPUT STREAM\n         SPACE 2\nTEST$UP  CLC   =C'./',0(R1)             START RIGHT?\n         MVI   UPDTXFLG,C' '            ASSUME ./ CONTROL CARD11/88 SBG\n         BE    TEST$UPC                 CONTINUE              11/88 SBG\nTEST$UPX CLC   =C'><',0(R1)             SUBORDINATE MEMBER?   11/88 SBG\n         BNER  R10                      NO - THAT WAS QUICK\n         MVI   UPDTXFLG,C'>'            REALLY >< CONTROL CARD11/88 SBG\nTEST$UPC DS    0H                       CONTINUE PROCESSING   11/88 SBG\n         LA    R1,2(,R1)                POINT TO SCAN START\n         LA    R0,69                    MAX SCAN LENGTH\n         BA&XA R14,F$BLANK              FIND END OF NAME FIELD\n         BA&XA R14,F$CHARS              FIND THE VERB\n         CLC   =C'ADD ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'REPL ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'CHANGE ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'CHNGE ',0(R1)    IEBUPDAT TYPE CHANGE?      06/84 DBC\n         BNER  R10                 NO, RETURN EMPTY HANDED    06/84 DBC\n         SPACE 2\nTU$SAVE  MVC   UPDT#TYP(1),0(R1)        A,R,C\n         MVC   IEBUPXXX,=C'IEBUPDTE' ASSUMPTION               06/84 DBC\n         STM   R0,R1,TU$SAVE2      SAVE SCANNER               06/84 DBC\n         SPACE 1\nTU$LOOP  LA    R1,1(,R1)\n         CLC   =C'MEMBER=',0(R1)\n         BE    TU$MEM\n         CLC   =C'NAME=',0(R1)\n         BE    TU$NAM\n         BCT   R0,TU$LOOP               SCAN THE REST OF THE CARD\n         SPACE 3                                              06/84 DBC\n************************************************************* 06/84 DBC\n*        THIS IS NOT AN INTERESTING IEBUPDTE TYPE CARD, BUT * 06/84 DBC\n*        IT STILL MIGHT BE AN INTERESTING IEBUPDAT TYPE     * 06/84 DBC\n*        CARD. SCAN TO SEE IF THE OPERAND FIELDS START WITH * 06/84 DBC\n*        A FIRST POSITIONAL PARAMETER THAT IS A MEMBER      * 06/84 DBC\n*        NAME.                                              * 06/84 DBC\n************************************************************* 06/84 DBC\n         SPACE 1                                              06/84 DBC\n         LM    R0,R1,TU$SAVE2      RESTORE VERB PTR           06/84 DBC\n         BA&XA R14,F$BLANK         SCAN PAST THE VERB         06/84 DBC\n         BA&XA R14,F$CHARS         SCAN TO THE OPERANDS       06/84 DBC\n         STM   R0,R1,TU$SAVE2      SAVE OPERANDS PTR          06/84 DBC\n         SPACE 1                                              06/84 DBC\n         LA    R0,9                MAX L'NAME+1               06/84 DBC\n         BA&XA.R  R14,0            LOOP HEAD                  06/84 DBC\n         CLI   0(R1),C'='          IEBUPDTE TYPE CARD?        06/84 DBC\n         BER   R10                 YES, GIVE UP               06/84 DBC\n         CLI   0(R1),C','          NO, EO-1ST OPERAND?        06/84 DBC\n         BE    TU$UPDAT            YES, GO SAVE               06/84 DBC\n         CLI   0(R1),C' '          MAYBE, CHECK AGAIN         06/84 DBC\n         BE    TU$UPDAT            YES, GO SAVE               06/84 DBC\n         LA    R1,1(,R1)           NO, ADVANCE SCANNER        06/84 DBC\n         BCTR  R0,R14              LOOP BACK                  06/84 DBC\n         BR    R10                 1ST OPERAND TOO LONG; GVUP 06/84 DBC\n         SPACE 1                                              06/84 DBC\nTU$UPDAT MVC   IEBUPXXX,=C'IEBUPDAT' RESET \"UNLOADER\" NAME    06/84 DBC\n         LM    R0,R1,TU$SAVE2      RESTORE NAME POINTER       06/84 DBC\n         B     4(,R10)             RETURN WITH NAME           06/84 DBC\n         SPACE 2\nTU$MEM   LA    R1,7(,R1)                POINT TO MEMBER NAME\n         B     *+8                      SKIP OTHER LA\n         SPACE 1\nTU$NAM   LA    R1,5(,R1)                POINT TO MEMBER NAME\n         SPACE 1\n         MVI   8(R1),C','               BE SURE TO STOP\n         B     4(,R10)                  FOUND A NAME\n         EJECT ,                                              07/85 DBC\n************************************************************* 07/85 DBC\n*        TEST TO SEE IF THE CURRENT FILE IS A SMPPTFIN      * 07/85 DBC\n*        FILE.                                              * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTF ST    R10,DWD             SAVE THE RETURN PTR        07/85 DBC\n         LA    R2,80               GET BXLE SCANNER           07/85 DBC\n         LA    R15,TAPEBUFF        --> TAPE BUFFER            07/85 DBC\n         LR    R3,R15              GET -                      07/85 DBC\n         AL    R3,LASTSIZE          BXLE -                    07/85 DBC\n         SLR   R3,R2                 LIMIT                    07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTL LR    R1,R15              --> NEXT CARD              07/85 DBC\n         BA&XA R10,TEST$PT         SEE IF IT'S ++PTF, ++APAR, 07/85 DBC\n*                                  ++FUNCTION, OR ++USERMOD   07/85 DBC\n         B     TEST$PTB            +0 NOPE, SKIP TO NEXT CARD 07/85 DBC\n         MVC   UNLOADER(8),SMPPTFIN +4 YEP, NAME THE          07/85 DBC\n*                                  \"UNLOADER\"                 07/85 DBC\n         L     R10,DWD             RESTORE RETURN ADDRESS     07/85 DBC\n         B     TEST$RET            GO RETURN TO CALLER        07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTB BXLE  R15,R2,TEST$PTL     ADVANCE TO NEXT CARD AND   07/85 DBC\n*                                  LOOP TO TEST IT            07/85 DBC\n         SPACE 1                                              07/85 DBC\n         L     R10,DWD             NO ++PTF ATC. CARD WAS     07/85 DBC\n*                                  FOUND. RESTORE LINK        07/85 DBC\n         BR    R10                 RETURN EMPTY HANDED        07/85 DBC\n         SPACE 3                                              07/85 DBC\n************************************************************* 07/85 DBC\n*        SEE IF THE CURRENT RECORD IS A SMP SYSMOD HEADER   * 07/85 DBC\n*        CARD (++PTF, ++APAR, ++FUNCTION, OR ++USERMOD).    * 07/85 DBC\n*        NOTE, THIS SCAN EXAMINES ONLY ONE CARD AT A TIME.  * 07/85 DBC\n*        ACCORDINGLY, IT WILL WORK ONLY IF THE SYSMOD'S     * 07/85 DBC\n*        NAME IS NOT CONTINUED ONTO ANOTHER CARD.           * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PT  CLC   =C'++',0(R1)        PLUSPLUS CARD?             07/85 DBC\n         BNER  R10                 NO, RETURN +0              07/85 DBC\n         LA    R1,2(,R1)           YES, ADVANCE SCANNER       07/85 DBC\n         LA    R0,69               LOAD SCAN LIMIT            07/85 DBC\n         BA&XA R14,F$CHARS         SKIP BLANKS                07/85 DBC\n         SPACE 1                                              07/85 DBC\n         LA    R14,7               L'SYSMOD TYPE NAME         07/85 DBC\n         CLC   =C'USERMOD',0(R1)   ++USERMOD?                 07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         LA    R14,3               NO, RESET L'NAME           07/85 DBC\n         CLC   =C'PTF',0(R1)       ++PTF?                     07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         LA    R14,8               NO, RESET L'NAME           07/85 DBC\n         CLC   =C'FUNCTION',0(R1)  ++FUNCTION?                07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         LA    R14,4               YES, SET L'NAME            07/85 DBC\n         CLC   =C'APAR',0(R1)      NO, ++APAR?                07/85 DBC\n         BE    TP$SAVE             YES. GO ON.\n* --- >>      SMPPTFIN STATEMENTS NOT TO BE REPORTED - BELOW\n*             THESE STATEMENTS SHOW THAT THE FILE IS\n*             SMPPTFIN, BUT THEY DO NOT INDICATE SYSMODS.\n         LA    R14,6               NO, RESET L'NAME\n         CLC   =C'ASSIGN',0(R1)    ++ASSIGN\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         LA    R14,4               NO, RESET L'NAME\n         CLC   =C'HOLD',0(R1)      ++HOLD\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         LA    R14,7               NO, RESET L'NAME\n         CLC   =C'RELEASE',0(R1)   ++RELEASE\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         LA    R14,7               NO, RESET L'NAME\n         CLC   =C'FEATURE',0(R1)   ++FEATURE\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         LA    R14,7               NO, RESET L'NAME\n         CLC   =C'PRODUCT',0(R1)   ++PRODUCT\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         LA    R14,4               NO, RESET L'NAME\n         CLC   =C'NULL',0(R1)      ++NULL\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         LA    R14,5               NO, RESET L'NAME\n         CLC   =C'JCLIN',0(R1)     ++JCLIN\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         BNER  R10                 NO, RETURN +0\n* --- >>      SMPPTFIN STATEMENTS NOT TO BE REPORTED - ABOVE\n         SPACE 1                                              07/85 DBC\nTP$SAVE  MVC   PTF#TYPE,0(R1)      SAVE SYSMOD TYPE           07/85 DBC\n         SR    R0,R14              DECR LOOP CNTL; TOO FAR?   07/85 DBC\n         BNPR  R10                 YES, RETURN +0             07/85 DBC\n         ALR   R1,R14              NO, ADVANCE SCANNER        07/85 DBC\n         BA&XA R14,F$CHARS         SKIP MORE BLANKS, IF ANY   07/85 DBC\n         CLI   0(R1),C'('          SUB-VALUE?                 07/85 DBC\n         BNER  R10                 NO, RETURN +0              07/85 DBC\n         BCT   R0,TP$PTF           YES, DECR SCAN LIMIT       07/85 DBC\n         BR    R10                 RETURN +0 IF TOO FAR       07/85 DBC\nTP$PTF   LA    R1,1(,R1)           ADVANCE ONE                07/85 DBC\n         BA&XA R14,F$CHARS         SKIP MORE BLANKS, IF ANY   07/85 DBC\n         B     4(,R10)             RETURN +4 WITH A POINTER   07/85 DBC\n*                                  TO THE SYSMOD NAME.        07/85 DBC\nTP$ASSGN DS    0H                  ASSIGN ETC., SKIP PRINT,\n         MVI   PTF#TYPE,C'X'       BUT SHOW SMPPTFIN WITH SPECIAL CHAR\n         B     4(,R10)             RETURN +4 WITH A POINTER\n         EJECT ,                                              07/85 DBC\n************************************************************* 12/88 SBG\n*  WE WANT TO CHECK IF WE HAVE FILE 1 FROM A REAL CBT TAPE. * 12/88 SBG\n*   IF THAT'S WHAT WE HAVE, WE WANT TO REPORT THE VERSION   * 12/88 SBG\n*   NUMBER AND CREATION DATE OF THAT CBT TAPE.              * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CH  ST    R15,CBSAVE15        SAVE REG 15                12/88 SBG\n         LA    R15,TAPEBUFF        CBT HEADER. LOOK FOR       12/88 SBG\n         CLC   CHJOBLIT,0(R15)     ARNIE CASINGHINO'S JOBNAME 12/88 SBG\n         BE    TEST$CHG            CBT HEADER                 12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         BR    R10                 RETURN NOT FOUND           12/88 SBG\nTEST$CHG MVC   UNLOADER(8),CBHEADER     FLAG AS FILE 1 OF CBT 12/88 SBG\n         MVI   CSTATCLR,X'40'      CLEAR VERS & DATE          12/88 SBG\n         MVC   CBTVERS(12),CSTATCLR   NOW DO IT .             12/88 SBG\n         ST    R4,CBSAVE4          SAVE REG 4                 12/88 SBG\n         LR    R4,R15              ADDR OF TAPE BUFFER        12/88 SBG\n         A     R4,CDOCSIZE         END OF BLOCK ADDRESS       12/88 SBG\nTEST$CHL LA    R15,1(,R15)         SEARCH FOR DATE AND VERSION12/88 SBG\n         CR    R15,R4              END OF BLOCK YET?          12/88 SBG\n         BNL   TEST$CHR            NO DATE OR VERSION FOUND   12/88 SBG\n         CLC   VERSLIT1,0(R15)     DATE HDR FOUND?            12/88 SBG\n         BE    TEST$CHD            YEP. GET DATE.             12/88 SBG\n         CLC   VERSLIT2,0(R15)     VERSION # HDR FOUND?       12/88 SBG\n         BNE   TEST$CHL            NOPE. KEEP TRYING.         12/88 SBG\nTEST$CHV MVC   CBTVERS(4),10(R15)  SAVE VERSION #             12/88 SBG\n         L     R4,CBSAVE4          RESTORE REG 4              12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         B     TEST$RET            DONE WITH EXTRACTION.      12/88 SBG\nTEST$CHD MVC   CBTDATE(8),10(R15)  SAVE TAPE RELEASE DATE     12/88 SBG\n         B     TEST$CHL            KEEP TRYING FOR VERSION #. 12/88 SBG\nTEST$CHR L     R4,CBSAVE4          RESTORE REG 4              12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         BR    R10                 RETURN UNSUCCESSFUL        12/88 SBG\n         EJECT                                                12/88 SBG\nF$BLANK  BCTR  R0,0                     -1 FROM LENGTH\n         CLI   0(R1),C' '               GOT A BLANK YET?\n         BER   R14                      YES - RETURN\n         LA    R1,1(,R1)                MOVE SCAN PTR\n         BCT   R0,F$BLANK+2             KEEP SCANNING\n         BR    R10                      NONE--RETURN TO CALLER'S CALLER\n         SPACE 2\nF$CHARS  BCTR  R0,0                     -1 FROM LENGTH\n         CLI   0(R1),C' '               FIND A CHAR?\n         BNER  R14                      YES - RETURN\n         LA    R1,1(,R1)                INCR SCAN PTR\n         BCT   R0,F$CHARS+2             KEEP SCANNING\n         BR    R10                      NONE--RETURN TO CALLER'S CALLER\n         SPACE 2\nTEST$DMP CLC   =X'F47006016663B24D',TAPEBUFF+12  IEHDASDR'S TRADEMARK?\n         BNER  R10                      NO\n         MVC   UNLOADER(8),IEHDASDR     SAY WHO\n         MVC   DASDRSAV(24),TAPEBUFF    SAVE HEADER RECORD\n         LR    R2,R10                   SAVE RETURN ADDR\n         TAPIO TCCW#DAT                 IGNORE CCWS\n         SPACE 1\nCOM$DUMP TAPIO TCCW#DAT                 READ FIRST TRK'S DATA\n         MVC   FDRSAVE(8),TAPEBUFF+12   SAVE IN CASE FDR\n         LR    R10,R2                   RETURN\n         B     TEST$RET\n         SPACE 2\nTEST$FDR CLC   =C'THATS ALL FOLK',TAPEBUFF+5   HIS TRADEMARK?\n         BNER  R10                      NO\n         LR    R2,R10                   SAVE RETURN ADDR\n         MVC   DASDRSAV(24),TAPEBUFF    SAVE HEADER RECORD\n         MVC   UNLOADER(3),FDR          SAY FDR FOR NOW\n         CLI   TAPEBUFF+19,C'S'         WAS IT FDR?\n         BE    COM$DUMP                 YES\n         MVC   UNLOADER(6),FDRDSF       NO  - MAYBE FDRDSF\n         CLI   TAPEBUFF+19,C'F'         FDRDSF?\n         BE    COM$DUMP                 YES\n         MVC   UNLOADER(6),FDRXXX       NO  - BUT SOME KIND OF FDR?\n         B     COM$DUMP                 CONTINUE\n         SPACE 2\nTEST$SLK CLC   =F'20',LASTSIZE     RIGHT LENGTH FOR SLICK HDR 09/84 DBC\n         BNER  R10\n         CLC   TAPEBUFF+8(12),FFS         FF'S AT END OF RECORD?\n         BNER  R10\n         CLI   TAPEBUFF+1,C'B'          BACKUP FLAG PRESENT?\n         BNER  R10\n         MVC   DASDRSAV(20),TAPEBUFF    SAVE THE FIRST RECORD\n         LR    R2,R10                   SAVE RETURN ADDR\n         TAPIO TCCW#DAT                 GET 2ND RECORD\n         LR    R10,R2                   RESTORE RETURN ADDR\n         CLC   TAPEBUFF(2),=H'0'        1ST HALFWORD = 0?\n         BNER  R10\n         CLC   TAPEBUFF+2(2),=H'0'      2ND HALFWORD = 0 OR FF'S?\n         BE    TEST$SK1\n         CLC   TAPEBUFF+2(2),FFS\n         BNER  R10\nTEST$SK1 LH    R2,TAPEBUFF+4            VERIFY LENGTH OF RECORD\n         LTR   R2,R2\n         BNPR  R10\n         LA    R2,8(,R2)\n         C     R2,LASTSIZE         LENGTH OK?                09/84 DBC\n         BNER  R10\n         CLC   TAPEBUFF+6(2),=H'0'      LAST HALF OF RDW = 0?\n         BNER  R10\n         MVC   UNLOADER(8),SLICKMNG     SHOW SLICKMNG AS UNLOADER\n         B     TEST$RET                 RETURN TO MAINLINE\n         SPACE 3\n* FOR IEBISAM, THE BEGINNING OF THE DCB IS UNLOADED TO THE FIRST\n* TWO CARDS.  SO CHECK (GUESS?) IF IT LOOKS LIKE AN ISAM DCB\nTEST$IS  CLC   TAPEBUFF(4),=Y(0,154)    SEQ # AND LENGTH CORRECT?\n         BNER  R10                      NO\n         CLC   TAPEBUFF+80(2),H1        SECOND SEQ # CORRECT\n         BNER  R10                      NO\n         TM    TAPEBUFF+4+48,X'10'      DCBOFLGS,DCBOFOPN\n         BNOR  R10                      NOT \"OPEN\"\n         CLI   TAPEBUFF+4+26,X'80'      DSORG=IS?\n         BE    *+10                     YES - CONTINUE\n         CLI   TAPEBUFF+4+26,X'81'      DSORG=ISU?\n         BNER  R10                      NO\n         MVC   UNLOADER(7),IEBISAM      SAY WHO\n         B     TEST$RET                 RETURN\n         SPACE 3\nTEST$MAP CLC   =C'$$TAPEMAP.PRINT.FILE$$',TAPEBUFF  CHECK FOR HEADER\n         BNER  R10                      NO\n         L     R1,LASTSIZE         VERIFY BLOCK MULT OF 80 BY 09/84 DBC\n         SR    R0,R0\n         LA    R2,80\n         DR    R0,R2\n         LTR   R0,R0\n         BNZR  R10                      NO\n         MVC   UNLOADER(7),CTAPEMAP     YES - THIS IS FOR US\n         B     TEST$RET\n         EJECT\nIEBUPDT1 MVC   OUTBUFF2+8(27),=C'IS AN IEBUPXXX INPUT STREAM' 07/85 DBC\n         MVC   OUTBUFF2+14(8),IEBUPXXX CORRECT RELOADER NAME  07/85 DBC\n         B     PRT$ONE             GO RELOOP                  07/85 DBC\n         SPACE 3                                              07/85 DBC\nPTFS1    MVC   OUTBUFF2+8(35),=C'IS AN SMPPTFIN SYSMODS INPUT STREAM' C\n         B     PRT$ONE             GO RELOOP                  07/85 DBC\n         SPACE 3                                              07/85 DBC\nCBT1     CLC   CBTEMPTY,UNLOADER        CBT EMPTY FILE        11/88 SBG\n         BE    CBTEMP1                  PRINT SPECIAL INFO    11/88 SBG\n         MVC   OUTBUFF2+8(28),=C'IS IN CBT973 COMPRESS FORMAT'  /88 SBG\n         B     PRT$ONE             GO RELOOP                  11/88 SBG\n         SPACE 3                                              07/85 DBC\nCBTEMP1  MVC   OUTBUFF2+8(25),=C'IS AN EMPTY CBT TAPE FILE'   11/88 SBG\n         B     PRT$ONE             GO RELOOP                  11/88 SBG\n         SPACE 3                                              07/85 DBC\nCBTDOC1  MVC   OUTBUFF2+8(27),=C'CBT TAPE DOCUMENTATION FILE' 12/88 SBG\n         B     PRT$ONE             GO RELOOP                  12/88 SBG\n         SPACE 3                                              12/88 SBG\nIEHMOVE1 MVC   #BLKCNT+OUTBUFF2-OUTBUFF(4),=C'DSN='\n         MVC   #BLKCNT+OUTBUFF2-OUTBUFF+4(44),TAPEBUFF+85 MOVE DISK DSN\n         SPACE 1\n         BA&XA R10,SET$ONE\n         DC    Y(169)                   DSORG OFFSET\n         DC    Y(171)                   RECFM OFFSET\n         DC    Y(173)                   BLKSIZE OFFSET\n         DC    Y(175)                   LRECL OFFSET\n         SPACE 3\nIEBCOPY1 BA&XA R10,SET$ONE\n         DC    Y(12)                    DSORG OFFSET\n         DC    Y(18)                    RECFM OFFSET\n         DC    Y(14)                    BLKSIZE OFFSET\n         DC    Y(16)                    LRECL OFFSET\n         SPACE 3\nIEBISAM1 BA&XA R10,SET$ONE\n         DC    Y(4+26)                  DSORG OFFSET\n         DC    Y(4+36)                  RECFM OFFSET\n         DC    Y(4+62)                  BLKSIZE OFFSET\n         DC    Y(4+2+82)                LRECL OFFSET\n         SPACE 3\nSET$ONE  MVC   OUTBUFF2+8(24),=C'TRUE ATTRIBUTES:  DSORG='\n         ICALL CNVDSORG,R14,R15=OUTBUFF2+32 FORMAT THE DSORG\n         ICALL CNVRECFM,R14,R15=#RECFM+OUTBUFF2-OUTBUFF\n         SPACE 1\n         LA    R1,TAPEBUFF\n         AH    R1,4(,R10)               POINT TO BLKSIZE\n         ICALL CONVHALF,R14,R15=#BLKSIZE-1+OUTBUFF2-OUTBUFF\n         SPACE 1\n         LA    R1,TAPEBUFF\n         AH    R1,6(,R10)               POINT TO LRECL\n         ICALL CONVHALF,R14,R15=#LRECL-1+OUTBUFF2-OUTBUFF\n         SPACE 2\n*  FOR PARM=INLINE, THE REPORT MUST PRINT BOTH THE RESULTS    12/88 SBG\n*  OF THE LABEL PROCESSING (FOR SL) AND THE RESULTS OF THE    12/88 SBG\n*  SCAN PROCESSING.                                           12/88 SBG\nPRT$ONE  TM    TFLAG1,T1@SL             SL TAPE?              12/88 SBG\n         BNO   PRT$ONEX                 NO. DO NORMAL STUFF   12/88 SBG\n         TM    PARMFLAG,PF@INLIN        INLINE ?              12/88 SBG\n         BO    FIND$EOF                 REGULAR INLINE STUFF  12/88 SBG\nPRT$ONEX TM    TFLAG1,T1@ANLZ           ANALYZING?            12/88 SBG\n         BNO   FIND$EOF                 NO\n         B     NL$LOOP                  YES - KEEP SCANNING NL TAPE\n         SPACE 3\n*  FIRST RECORD SAVED IN \"DASDRSAV\"\nIHDASDR1 MVC   OUTBUFF2+8(15),=C'DUMP FROM CCHH='\n         UNPK  OUTBUFF2+23(9),DASDRSAV+0(5)\n         TR    OUTBUFF2+23(8),HEXTAB    MAKE EBCDIC\n         MVC   OUTBUFF2+31(5),=C' OF A'\n         IC    R1,DASDRSAV+21           GET DEVTYPE\n         N     R1,=F'255'               CLEAN\n         MH    R1,=H'6'\n         LA    R14,=C'2321  2311  2314  2302  2301  2305-12305-23330  3*\n               340  3350  3375  3330-13380  3390  '           03/94 SBG\n         LA    R14,0(R14,R1)            GET ADDR OF THIS DEVTYPE\n         MVC   OUTBUFF2+37(6),0(R14)    MOVE TO PRINT LINE\n         CLC   =F'0',DASDRSAV+8         THIS TAPE START AT 0?\n         BNE   PRT$ONE                  NO - CAN'T FIND VOLSER\n*  SECOND RECORD IS IN \"TAPEBUFF\"\n         CLC   =C'VOL1VOL1',TAPEBUFF+216  LABEL?\n         BNE   PRT$ONE                  NO - SKIP\n         MVC   OUTBUFF2+46(7),=C'VOLUME='\n         MVC   OUTBUFF2+53(6),TAPEBUFF+224\n         MVC   OUTBUFF2+61(6),=C'OWNER='\n         MVC   OUTBUFF2+67(10),TAPEBUFF+261\n         B     PRT$ONE\n         SPACE 3\n* FIRST RECORD SAVED IN \"DASDRSAV\"\nFDR1     MVC   OUTBUFF2+8(20),=C'DUMPED FROM A UUUUUU'\n         MVC   FDRDVEND(1),DASDRSAV+4   SET UP FENCE FOR DEV TYPE\n         LA    R1,FDRDVTAB              POINT TO FDR DEV TYPE TABLE\nFDR1LOOP CLC   DASDRSAV+4(1),0(R1)      MATCH?\n         BE    FDR1FND                  YES\n         LA    R1,7(,R1)                NO  - BUMP TO NEXT ENTRY\n         B     FDR1LOOP\nFDR1FND  MVC   OUTBUFF2+22(6),1(R1)     PUT DEV TYPE IN MESSAGE\n         CLC   =C'DUMMYDSF',FDRSAVE     IS IT A NORMAL DUMP?\n         BE    PRT$ONE                  YES - ALL FOR NOW\n*                                       NO  - MUST BE ABS TRK DUMP\n         MVC   OUTBUFF2+28(22),=C' (ABSOLUTE TRACK DUMP)'\n         B     PRT$ONE\n         SPACE 3\nSLK1     MVC   OUTBUFF2+8(30),=C'SLICK LIBRARY BACKUP, CYCLE = '\n         MVC   OUTBUFF2+38(1),DASDRSAV  PUT IN THE CYCLE NUMBER\n         MVC   OUTBUFF2+39(12),=C', MAXSIZE = '\n         ICALL CONVHALF,R14,R1=DASDRSAV+2,R15=OUTBUFF2+41\n         B     PRT$ONE                  PRINT THE INFO LINE\n         EJECT\nIEHMOVE2 LA    R0,7                     ASSUME PARM=NOMEM\n         TM    PARMFLAG,PF@NOMEM        IS IT?\n         BO    *+8                      YES\n         LA    R0,9                     NO\n         TM    TAPEBUFF+169,X'02'       DSORG=PO?\n         BO    *+8                      YES\n         LA    R0,7                     NO\n         NEWPAGE  (R0),2                ENOUGH LINES LEFT ON PAGE?\n         SPACE 1\n         BA&XA R10,SET$FULL             SET UP HEADER\n         DC    Y(169)                   DSORG OFFSET\n         DC    Y(171)                   RECFM OFFSET\n         DC    Y(173)                   BLKSIZE OFFSET\n         DC    Y(175)                   LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEHMOVE   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,R10,R1=TAPEBUFF+282 CONVERT UNIT TYPE\n         SPACE 1\n         PRTLN2                         PRINT FIRST INFO LINE\n         SPACE 1\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FOR MSM\n         MVC   OUTBUFF2+25(7),=C'C-DATE='\n         ICALL CONVDATE,R10,R1=TAPEBUFF+138,R15=OUTBUFF2+32 C-DATE\n         SPACE 1\n         MVC   OUTBUFF2+42(7),=C'E-DATE='\n         ICALL CONVDATE,R10,R1=TAPEBUFF+141,R15=OUTBUFF2+49 E-DATE\n         SPACE 1\n         MVC   OUTBUFF2+59(4),=C'DSN='\n         MVC   OUTBUFF2+63(44),TAPEBUFF+85       MOVE IN OLD DSN\n         SPACE 1\n****     CLC   =C'VS2',TAPEBUFF+152     CHECK PROGRAMMING SYSTEM\n****     BE    MV$NOVOL                 SKIP IF OS/VS2\n         TM    TAPEBUFF+132,X'0F'       SEE IF LOOKS LIKE PACKED DATE\n         BO    MV$NOVOL                 SKIP IF NEW FORMAT IEHMOVE DS\n         CLI   TAPEBUFF+135,0           INVALID FOR VOLSER ANYWAY?\n         BE    MV$NOVOL                 SKIP IF NEW FORMAT IEHMOVE DS\n         MVC   OUTBUFF2+120(4),=C'VOL='\n         MVC   OUTBUFF2+124(6),TAPEBUFF+130\n         SPACE 1\nMV$NOVOL PRTLN2                         PRINT SECOND INFO LINE\n         SPACE 2\n         TM    TAPEBUFF+169,X'02'       DSORG=PO?\n         BNO   STAR$TWO                 NO - SKIP\n         BA&XA R10,FMU$                 PRINT HEADER\n         SPACE 2\n         L     BLEN,LASTSIZE       GET SIZE OF BLOCK          09/84 DBC\n         SH    BLEN,=H'80'              MINUS FIRST CARD USED\n         LA    BPTR,TAPEBUFF+80         -> NEXT CARD TO USE\n         BA&XA R10,SEG$NEXT             NOW HAVE CARDS 1 & 2\n         BA&XA R10,SEG$NEXT             NOW 2 & 3\n         BA&XA R10,SEG$NEXT             NOW 3 & 4\n         BA&XA R10,SEG$NEXT             NOW 4 & 5\n         LA    DPTR,MV#BUFF1+46         -> FIRST MEMBER NAME -4\n         CLI   0(DPTR),X'C8'            START OF MEMBER?\n         BE    MV$GOT1                  YES\n         LA    DPTR,3(,DPTR)            -> OTHER PLACE\n         CLI   0(DPTR),X'C8'            START OF MEMBER?\n         BE    MV$GOT1                  YES\n         BA&XA R14,BOOM                 PRINT LOGIC ERROR MSG\n         SPACE 2\nMV$GOT1  LA    DPTR,4(,DPTR)            -> FIRST MEMBER NAME\n         SPACE 2\nMV$LOOP  BA&XA R10,MOVE$MEM             MEMBER NAME TO PRINT LINE\n         BA&XA R10,SEG$TEST             SEE IF WITHIN RANGE\n         SPACE 2\n*  RECORDS IN AN IEHMOVE UNLOADED DATASET HAVE THE FOLLOWING FORMAT:\n*  FIRST 2 BYTES OF EACH CARD IS A BINARY SEQUENCE NUMBER.\n*  AFTER THAT, THERE IS SOME HEADER INFO (THE FMT1 DSCB + OTHER JUNK),\n*  THEN THE RECORDS IN THIS FORMAT:  LENGTH OF THIS \"RECORD\", 1 BYTE\n*  INDICATOR WITH THE FOLLOWING BIT MEANINGS:\n*    X'80' -> 3 BYTE TTR FOLLOWS INDICATOR BYTE\n*    X'40' -> UNLOADED DS IS PDS\n*    X'20' -> RECORD IS PART OF A MEMBER\n*    X'10' -> RECORD IS A NOTE LIST\n*    X'08' -> RECORD IS A DIRECTORY ENTRY\n*    X'04' -> RECORD IS A DUMMY RECORD\n*  THIS INFORMATION IS IN THE SOURCE TO MODULE IEHMVSRA\n         SPACE 1\nMV$NXTBL CLI   2(DPTR),X'E0'            DATA RECORD?\n         BE    MV$REC                   YES\n         CLI   2(DPTR),X'D0'            NOTE LIST RECORD?\n         BE    MV$REC                   YES\n         CLI   2(DPTR),X'C8'            DIRECTORY RECORD?\n         BE    MV$MEND                  YES\n         CLI   2(DPTR),X'C4'            DUMMY RECORD?\n         BE    MV$DUMMY                 YES\n         CLI   2(DPTR),X'0A'            END OF DS?\n         BNH   DIR$END                  YES\n*** LOGIC ERROR ***\n         PRTLN2                         PRINT (POSSIBLY) UNFINISHED LIN\n         BA&XA R14,BOOM                 PRINT LOGIC ERROR MSG\n         SPACE 2\nMV$DUMMY MVC   DWD(2),0(DPTR)           COPY LENGTH TO ALIGNED PLACE\n         LH    DLEN,DWD                 LOAD LENGTH OF DUMMY RECORD\n         LA    DPTR,12(DPTR,DLEN)       POINT TO NEXT\n         BA&XA R10,SEG$TEST             MAKE SURE STILL WITHIN RANGE\n         B     MV$LOOP                  DO NEXT MEMBER NAME\n         SPACE 2\nMV$REC   MVC   DWD(2),0(DPTR)           COPY LEN TO ALIGNED PLACE\n         LH    DLEN,DWD                 GET BLOCK LENGTH\n         LA    DPTR,6(DPTR,DLEN)        POINT PAST LEN,E0,TTR,DATA\n         SPACE 2\nMV$SCAN  CL    DPTR,MV#ABUF2            WITHIN RANGE?\n         BL    MV$NXTBL                 YES - PROCESS NEXT BLOCK\n         BA&XA R10,SEG$NEXT             SKIP 78 BYTES\n         B     MV$SCAN                  KEEP GOING\n         SPACE 2\nMV$MEND  LA    DPTR,6(,DPTR)            -> MEMBER NAME\n         BA&XA R10,SEG$TEST             WITHIN RANGE?\n         B     MV$LOOP                  GO PRINT NEXT NAME\n         SPACE 2\nSEG$TEST CL    DPTR,MV#ABUF2            WITHIN RANGE?\n         BLR   R10                      YES - JUST RETURN\n         SPACE 1\nSEG$NEXT MVC   MV#BUFF1,MV#BUFF2\n         LTR   BLEN,BLEN                ANY LEFT?\n         BP    SEG$MVC                  YES - USE IT\n         BZ    *+8                      NO\n* RAN OFF END OF DATASET\n***      EX    0,*                      *** LOGIC ERROR ***\n         B     DIR$END                  FORGET THAT - IT'S THE END\n         SPACE 1\n         ST    R10,R10SAVE              SAVE RETURN ADDR\n         TAPIO TCCW#DAT,TM=SEG$EOF      READ ANOTHER BLOCK\n         L     R10,R10SAVE              RESTORE RETURN ADDR\n         LA    BPTR,TAPEBUFF            RESET PTR\n         L     BLEN,LASTSIZE       AND LENGTH LEFT            09/84 DBC\n         SPACE 1\nSEG$MVC  SH    BLEN,=H'80'              DECR LENGTH LEFT / THIS BLOCK\n         MVC   MV#BUFF2,2(BPTR)         MOVE A SEGMENT\n         LA    BPTR,80(,BPTR)           -> NEXT SEGMENT\n         SH    DPTR,=H'78'              BACK UP DATA PTR\n         BR    R10                      RETURN TO CALLER\n         SPACE 2\nSEG$EOF  BCTR  BLEN,0                   SET FLAG\n         L     R10,R10SAVE              RESTORE RETURN ADDR\n         OI    TFLAG1,T1@MVEOF          REMEMBER HIT EOF\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\nCONVDATE SR    R0,R0                    CLEAR FOR IC\n         IC    R0,0(,R1)                GET THE YEAR\n         CVD   R0,DWD                   CONVERT TO PACKED\n         UNPK  0(3,R15),DWD+6(2)        AND THEN TO EBCDIC\n         OI    2(R15),C'0'              FIX SIGN\n         MVC   0(2,R15),1(R15)          MOVE YEAR OVER\n         MVI   2(R15),C'.'              PUT IN THE DOT\n         MVC   DWD(2),1(R1)             MOVE DAY TO ALIGNED PLACE\n         LH    R0,DWD                   GET THE YEAR\n         CVD   R0,DWD                   CONVERT TO PACKED\n         UNPK  3(3,R15),DWD+6(2)        AND THEN TO EBCDIC\n         OI    5(R15),C'0'              FIX THE SIGN\n         BR    R10                      RETURN TO CALLER\n         EJECT\nIEBCOPY2 LA    R0,7                     ASSUME MEMBERS\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEMBERS?\n         BNO   *+8                      NOPE - OK\n         LA    R0,5                     NO MEMBERS\n         NEWPAGE  (R0),2                TEST LINE COUNTER\n         SPACE 1\n         BA&XA R10,SET$FULL             SET UP HEADER\n         DC    Y(12)                    DSORG OFFSET\n         DC    Y(18)                    RECFM OFFSET\n         DC    Y(14)                    BLKSIZE OFFSET\n         DC    Y(16)                    LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEBCOPY   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,R10,R1=TAPEBUFF+24  FORMAT THE UNIT TYPE\n         SPACE 2\n         BA&XA R10,FMU                  'FOLLOWING MEMBERS UNLOADED:'\n         SPACE 2\n         TAPIO TCCW#DAT                 IGNORE THE NEXT BLOCK\n         SPACE 2\nIBCPY$LP TAPIO TCCW#DAT                 READ A DIRECTORY BLOCK\n         LH    BLEN,TAPEBUFF+4          GET RDW\n         SH    BLEN,=H'8'               -8 FOR BDR & RDW\n         LA    BPTR,TAPEBUFF+8          INIT BLOCK PTR\n         SPACE 2\nDIR$NEXT LA    DPTR,22(,BPTR)           INIT DIR BLK PTR\n         LH    DLEN,20(,BPTR)           GET LENGTH USED\n         SH    DLEN,=H'2'               LENGTH OF DATA\n         SPACE 2\nDIR$LP   CLC   0(8,DPTR),=8X'FF'        END OF DIRECTORY?\n         BE    DIR$END                  YES - DONE\n         BA&XA R10,MOVE$MEM             MOVE NAME TO PRINT LINE\n         LTR   DLEN,DLEN                ANYTHING LEFT?\n         BP    DIR$LP                   CONTINUE IF MORE LEFT\n         LA    BPTR,256+12+8(,BPTR)     NEXT DIRECTORY BLOCK\n         SH    BLEN,=Y(256+12+8)        DECR LENGTH LEFT\n         BP    DIR$NEXT                 MORE IN THIS TAPE BLOCK\n         B     IBCPY$LP                 GET NEXT BLOCK FROM TAPE\n         SPACE 2\nDIR$END  LA    R0,OUTBUFF2+16           GET START PTR FOR COMPARE\n         CR    R0,PPTR                  ANY ON THIS LINE?\n         BE    STAR$TWO                 NO - DONE\n         PRTLN2                         PRINT PARTIAL LINE\n         B     STAR$TWO                 CONTINUE PROCESSING\n         SPACE 3\nMOVE$MEM MVC   0(8,PPTR),0(DPTR)        MOVE NAME TO PRINT LINE\n         IC    R1,11(,DPTR)             GET USER DATA LENGTH\n         N     R1,=F'31'                STRIP OFF JUNK\n         LA    R1,12(R1,R1)             GET LENGTH OF ENTRY\n         AR    DPTR,R1                  ADVANCE DIR PTR\n         SR    DLEN,R1                  DECR LENGTH LEFT\n         SPACE 1\n         LA    PPTR,10(,PPTR)           NEXT PRINT LINE POSITION\n         CL    PPTR,OB2END              END OF PRINT LINE?\n         BNHR  R10                      NO - RETURN\n         LR    PPTR,R10                 SAVE RETURN ADDR\n         PRTLN2                         PRINT IT\n         LR    R10,PPTR                 RESTORE RETURN ADDR\n         LA    PPTR,OUTBUFF2+16         RESET PTR\n         BR    R10                      RETURN TO CALLER\n         EJECT ,                                              09/84 DBC\nIEBUPDT2 LA    R0,7\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEM?\n         BNO   *+8                      NO\n         LA    R0,5                     YES\n         NEWPAGE  (R0),2\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(27),=C'IS AN IEBUPXXX INPUT STREAM' 6/84 DBC\n         MVC   OUTBUFF2+37(8),IEBUPXXX CORRECT RELOADER NAME  06/84 DBC\n         MVC   OUTBUFF2+58(55),=C':   A-ADD   C-CHANGE   R-REPLACE   > X\n               = SUBORDINATE NAME'                            11/88 SBG\n         BA&XA R10,FMU                  'FOLLOWING MEMBERS UNLOADED:'\n         SPACE 2\nUPDTE$L1 LA    BLEN,80                  BXLE INCR\n         LA    DPTR,TAPEBUFF            POINT TO START\n         LR    BPTR,DPTR                COPY START ADDR\n         A     BPTR,LASTSIZE       POINT PAST END OF BLOCK    09/84 DBC\n         SR    BPTR,BLEN                BACK UP FOR BXLE\n         SPACE 1\nUPDTE$L2 LR    R1,DPTR                  COPY CARD ADDR\n         BA&XA R10,TEST$UP              IS THIS ONE?\n         B     UPDTE$BX                 NO - SKIP\n         SPACE 1\n         MVC   0(1,PPTR),UPDT#TYP       MOVE A,R,C\n         MVI   1(PPTR),C'-'             SEPARATOR\n         CLI   UPDTXFLG,C'>'            SUBORDINATE MEMBER?   11/88 SBG\n         BNE   UPDTE$LB                 NO. USE - AS SEPARATOR11/88 SBG\n         MVI   1(PPTR),C'>'             SUBORD.  USE >.       11/88 SBG\nUPDTE$LB DS    0H                       GO PUT IN MEMBER NAME 11/88 SBG\n         MVC   2(8,PPTR),0(R1)          MEMBER NAME\n         LA    R1,1(,PPTR)\nUPDTE$L3 CLI   0(R1),C','               END OF MEMBER NAME?\n         BE    UPDTE$EM                 YES\n         CLI   0(R1),C' '               END OF MEMBER NAME?\n         BE    UPDTE$EM                 YES\n         LA    R1,1(,R1)                INCR SCAN PTR\n         B     UPDTE$L3                 CONTINUE\n         SPACE 1\nUPDTE$EM MVC   0(7,R1),OUTBUFF+1        BLANK OUT GARBAGE\n         LA    PPTR,11(,PPTR)           BUMP PRINT LINE PTR\n         CL    PPTR,OB2END2             PAST END?\n         BNH   UPDTE$BX                 NO - CONTINUE\n         PRTLN2                         PRINT THE MEMBERS\n         LA    PPTR,OUTBUFF2+16         RESET PTR\n         SPACE 1\nUPDTE$BX BXLE  DPTR,BLEN,UPDTE$L2       KEEP SCANNING\n         TAPIO TCCW#DAT,TM=UPDT$EOF     GET NEXT BLOCK\n         B     UPDTE$L1                 GO CHECK IT\n         SPACE 2\nUPDT$EOF OI    TFLAG1,T1@MVEOF          SET \"HIT EOF\"\n         B     DIR$END                  CLEAN UP\n         EJECT ,                                              07/85 DBC\nCBT2     DS    0H   INSERT CODE TO DISPLAY MEMBERS FOR CBT973.11/88 SBG\n         LA    R0,7                                           11/88 SBG\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEM?           11/88 SBG\n         BNO   *+8                      NO                    11/88 SBG\n         LA    R0,5                     YES                   11/88 SBG\n         NEWPAGE  (R0),2                                      11/88 SBG\n         BA&XA R10,SET$FULD             SET UP HEADER INFO    11/88 SBG\n         DC    4Y(0)                    FILLER                11/88 SBG\n         MVC   OUTBUFF2+31(27),=C'IS A CBT973 COMPRESSED FILE' 1/88 SBG\n         MVC   OUTBUFF2+58(55),=C':   A-ADD   C-CHANGE   R-REPLACE   > X\n               = SUBORDINATE NAME'                            11/88 SBG\n         BA&XA R10,FMU         'FOLLOWING MEMBERS UNLOADED:'  11/88 SBG\n         SPACE 2                                              11/88 SBG\n*   SAVE REGISTERS USED FOR CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 2                                              11/88 SBG\n*   **************          CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$D00  STM   R1,R5,CBSTOR01           REGS 1 THRU 5         11/88 SBG\n         STM   R8,R10,CBSTOR08          REGS 8 THRU 10        11/88 SBG\n         LA    R5,TAPEBUFF     BEGINNING OF BLOCK PROCESSING. 11/88 SBG\n         ST    R1,CBSTOR1          USE R1 FOR WORK REG NOW    11/88 SBG\n         LH    R1,0(,R5)           GET BLOCK SIZE FROM BDW    11/88 SBG\n         ST    R1,CBTBLK1          STORE BLOCK SIZE FOR LATER 11/88 SBG\n         AR    R1,R5               POINT PAST E-O-BLOCK       11/88 SBG\n         ST    R1,CBTAPEND         REMEMBER E-O-BLOCK ADDRESS 11/88 SBG\n         L     R1,CBSTOR1          RESTORE R1.                11/88 SBG\n         LA    R5,4(,R5)                POINT TO RDW          11/88 SBG\n*                              BEGINNING OF RECORD PROCESSING.11/88 SBG\nCBT$D0B  LA    R8,14(,R5)          POINT TO BEGIN OF DATA     11/88 SBG\n         ST    R1,CBSTOR1          USE R1 FOR WORK REG NOW    11/88 SBG\n         ST    R6,CBSTOR06         USE R6 FOR WORK REG NOW    11/88 SBG\n         LH    R1,0(,R5)           STORE RECORD SIZE FROM RDW 07/90 SBG\n*   THIS IS NEVER BIGGER THAN 94 -- LET ALONE 255 ||          11/88 SBG\n         C     R1,=F'94'           LRECL=94 MAX FOR CBT973    07/90 SBG\n         BH    CBT$EOF             BREAK OUT OF LOOP IF BIGGER07/90 SBG\n         S     R1,=F'12'           -12 JUST TO GO PAST DATA   11/88 SBG\n*                                   AND LAST 2 HEADER BITS    11/88 SBG\n         LA    R5,2(,R5)           HALFWAY TO HEADER BITS     11/88 SBG\n         MVI   CBTCLEAR,X'40'      MOVE IN BLANK TO ...       11/88 SBG\n         MVC   CBTCARD,CBTCLEAR       CLEAR 80-BYTE WORKAREA. 11/88 SBG\n         LA    R2,CBTCARD          ADDRESS OF 80-BYTE CARD    11/88 SBG\n         LA    R6,5                5 LOOPS TO EXPAND CARD     11/88 SBG\nCBT$D0C  EQU   *                   EXPAND 16 BYTES AT A TIME  11/88 SBG\n         LA    R4,16               LOOP COUNTER               11/88 SBG\n         LA    R5,2(,R5)           BUMP HEADER BIT POINTER    11/88 SBG\n         ICM   R3,12,0(R5)         2 BYTES MASK BITS TO SLIDE 11/88 SBG\nCBT$D0D  EQU   *                   INNER LOOP TO DO 16 BYTES  11/88 SBG\n         ST    R2,CBSTOR2          TEMP SAVE R2               02/93 RT\n         SLR   R2,R2               CLEAR TARGET REGISTER      11/88 SBG\n         SLDL  R2,1                SLIDE OVER ONE MASK BIT    11/88 SBG\n         LTR   R2,R2               IS BIT 0 OR 1 ?            11/88 SBG\n         L     R2,CBSTOR2          RESTORE R2                 02/93 RT\n         BZ    CBT$D0F             IF 0, NEEDS BLANK TO FILL  11/88 SBG\n         MVC   0(1,R2),0(R8)       MOVE THE NON-BLANK         11/88 SBG\n         LA    R8,1(,R8)           BUMP DATA PTR TO NEXT BYTE 11/88 SBG\nCBT$D0E  EQU   *                   RESTORE THE CARD-IMAGE     11/88 SBG\n         LA    R2,1(,R2)           POINT TO NEXT CARD BYTE    11/88 SBG\n         BCT   R4,CBT$D0D          RESTORE 16-BYTE GROUP      11/88 SBG\n         BCT   R6,CBT$D0C          DO THAT 5 TIMES            11/88 SBG\n         AR    R5,R1               BUMP POINTER TO NEXT RDW.  11/88 SBG\n         LM    R1,R4,CBSTOR01      REGS 1 THRU 4. 5 HAS PTR   11/88 SBG\n         LM    R8,R10,CBSTOR08     REGS 8 THRU 10             11/88 SBG\n*        L     R6,CBSTOR06         RESTORE R6. USED FOR PPTR. 11/89 SBG\n         B     CBT$L2              ONE CARD IS RESTORED, FOR  11/88 SBG\n*                                   PURPOSES OF EXAMINATION.  11/88 SBG\nCBT$D0F  EQU   *                   RTN TO INSERT A BLANK      11/88 SBG\n         MVI   0(R2),X'40'         MOVE BLANK IN TO DECOMPRESS11/88 SBG\n         B     CBT$D0E             CONTINUE RESTORING CARD.   11/88 SBG\n         SPACE 1                                              11/88 SBG\n*   **************   END OF CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 2                                              11/88 SBG\n*  AT THIS POINT, A CARD-IMAGE OF DATA IS RESTORED INTO       11/88 SBG\n*    THE FIELD, CBTCARD.  WE THEN USE REGULAR IEBUPDTE        11/88 SBG\n*    PROCESSING TO LOOK FOR MEMBER NAMES.                     11/88 SBG\n         SPACE 2                                              11/88 SBG\nCBT$L2   L     PPTR,CBSTOR06       RESTORE REGISTER PPTR      11/88 SBG\n         LA    R1,CBTCARD          LOAD CARD ADDRESS          11/88 SBG\n         ST    R5,CBSTOR05         SAVE RECD PTR              11/88 SBG\n         BA&XA R10,TEST$UP         IS THIS A MEMBER INDICATOR 11/88 SBG\n         B     CBT$BX              NO - SKIP TO THE NEXT CARD 11/88 SBG\n         L     R5,CBSTOR05         RESTORE RECD PTR           11/88 SBG\n         SPACE 1                                              11/88 SBG\n         MVC   0(1,PPTR),UPDT#TYP    MOVE A,R,C               11/88 SBG\n         MVI   1(PPTR),C'-'             SEPARATOR             11/88 SBG\n         CLI   UPDTXFLG,C'>'            SUBORDINATE MEMBER?   11/88 SBG\n         BNE   CBT$LB                   NO. USE - AS SEPARATOR11/88 SBG\n         MVI   1(PPTR),C'>'             SUBORD.  USE >.       11/88 SBG\nCBT$LB   DS    0H                       GO PUT IN MEMBER NAME 11/88 SBG\n         MVC   2(8,PPTR),0(R1)          MEMBER NAME           11/88 SBG\n         LA    R1,1(,PPTR)                                    11/88 SBG\nCBT$L3   CLI   0(R1),C','               END OF MEMBER NAME?   11/88 SBG\n         BE    CBT$EM                   YES                   11/88 SBG\n         CLI   0(R1),C' '               END OF MEMBER NAME?   11/88 SBG\n         BE    CBT$EM                   YES                   11/88 SBG\n         LA    R1,1(,R1)                INCR SCAN PTR         11/88 SBG\n         B     CBT$L3                   CONTINUE              11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$EM   MVC   0(7,R1),OUTBUFF+1        BLANK OUT GARBAGE     11/88 SBG\n         LA    PPTR,11(,PPTR)           BUMP PRINT LINE PTR   11/88 SBG\n         CL    PPTR,OB2END2             PAST END?             11/88 SBG\n         BNH   CBT$BX                   NO - CONTINUE         11/88 SBG\n         ST    R5,CBSTOR05              SAVE RECD PTR         11/88 SBG\n         PRTLN2                         PRINT THE MEMBERS     11/88 SBG\n         LA    PPTR,OUTBUFF2+16         RESET PTR             11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$BX   L     R5,CBSTOR05              RESTORE RECD PTR      11/88 SBG\n         C     R5,CBTAPEND              AT END OF BLOCK YET?  11/88 SBG\n         BL    CBT$D0B                  NO. GET NEXT RECORD   11/88 SBG\n*    TRY TO RESTORE REGISTERS THAT MIGHT BE USED ELSEWHERE.   11/88 SBG\n         TAPIO TCCW#DAT,TM=CBT$EOF      GET NEXT BLOCK        11/88 SBG\n         B     CBT$D00                  GO CHECK IT           11/88 SBG\n         SPACE 2                                              11/88 SBG\nCBT$EOF  OI    TFLAG1,T1@MVEOF          SET \"HIT EOF\"         11/88 SBG\n         B     DIR$END                  CLEAN UP              11/88 SBG\n         EJECT ,                                              11/88 SBG\n************************************************************* 07/85 DBC\n*                                                           * 07/85 DBC\n*        THE CURRENT TAPE FILE CONTAINS SMPPTFIN SYSMODS.   * 07/85 DBC\n*        SCAN THE FILE TO GET THE NAMES OF THE SYSMODS      * 07/85 DBC\n*        CONTAINED THEREIN, AND DISPLAY THEM.               * 07/85 DBC\n*                                                           * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTFS2    LA    R0,7                REQUIRED HEADER SPACE      07/85 DBC\n         TM    PARMFLAG,PF@NOMEM   SCAN FOR \"MEMBERS\"?        07/85 DBC\n         BNO   *+8                 YES, PROCEED               07/85 DBC\n         LA    R0,5                NO, DON'T NEED SO MUCH     07/85 DBC\n         NEWPAGE (R0),2            WIDOW PREVENTION           07/85 DBC\n         SPACE 1                                              07/85 DBC\n         BA&XA R10,SET$FULD        MESSAGE SETUP              07/85 DBC\n         DC    4Y(0)                    FILLER                07/85 DBC\n         MVC   OUTBUFF2+31(35),=C'IS AN SMPPTFIN SYSMODS INPUT STREAM'\n         MVC   OUTBUFF2+66(43),=C':   A-APAR   F-FUNCTION   P-PTF   U-U*\n               SERMOD'             DEFINITIONS                07/85 DBC\n         BA&XA R10,FMU             DISPLAY THE MESSAGE        07/85 DBC\n         SPACE 3                                              07/85 DBC\nPTF$L1   LA    BLEN,80             BXLE INCRIMENT             07/85 DBC\n         LA    DPTR,TAPEBUFF       BXLE SCANNER               07/85 DBC\n         LR    BPTR,DPTR           SET -                      07/85 DBC\n         AL    BPTR,LASTSIZE        BXLE-                     07/85 DBC\n         SLR   BPTR,BLEN             LIMIT                    07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTF$L2   LR    R1,DPTR             MESSAGE SINK SCANNER       07/85 DBC\n         BA&XA R10,TEST$PT         DOES THE CURRENT CARD NAME 07/85 DBC\n*                                  THE START OF A NEW SYSMOD? 07/85 DBC\n         B     PTF$BX              +0 NO, SKIP                07/85 DBC\nPTF$L2Z  DS    0H                  NEW +4\n         CLI   PTF#TYPE,C'X'       SPECIAL ++ TYPE DESIGNATION?\n         BE    PTF$BX              PRINTING IS TO BE SKIPPED.\n         MVC   0(1,PPTR),PTF#TYPE  +4 YES, GET SYSMOD TYPE    07/85 DBC\n         MVI   1(PPTR),C'-'        FRAME                      07/85 DBC\n         MVC   2(7,PPTR),0(R1)     SYSMOD NAME (ALWAYS SEVEN  07/85 DBC\n*                                  CHARACTERS LONG)           07/85 DBC\n         LA    PPTR,10(,PPTR)      ADVANCE SINK SCANNERR      07/85 DBC\n         CL    PPTR,OB2END2        IS MSG LINE FULL?          07/85 DBC\n         BNH   PTF$BX              NOT YET; GO  LOOP          07/85 DBC\n         PRTLN2 ,                  YES, PRINT THE LINE        07/85 DBC\n         LA    PPTR,OUTBUFF2+16    RESET SINK SCANNER         07/85 DBC\nPTF$BX   DS    0H\n         BXLE  DPTR,BLEN,PTF$L2    CONTINUE SCANNING THE BLK  07/85 DBC\n         SPACE 1                                              07/85 DBC\n         TAPIO TCCW#DAT,TM=PTF$EOF READ NEXT BLOCK            07/85 DBC\n         B     PTF$L1              LOOP TO SCAN IT            07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTF$EOF  OI    TFLAG1,T1@MVEOF     EOF; REMEMBER              07/85 DBC\n         B     DIR$END             GO DISPLAY FILE            07/85 DBC\n*                                  DESCRIPTION MESSAGES       07/85 DBC\n         EJECT ,                                              07/85 DBC\nIEBISAM2 BA&XA R10,SET$FULL             SET UP HEADER\n         DC    Y(4+26)                  DSORG OFFSET\n         DC    Y(4+36)                  RECFM OFFSET\n         DC    Y(4+62)                  BLKSIZE OFFSET\n         DC    Y(4+2+82)                LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEBISAM   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,R10,R1=TAPEBUFF+4+17-3  CONVERT UNIT TYPE\n         SPACE 1\n         PRTLN2                         PRINT SECOND INFO LINE\n         B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nFDR2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(14),=C'WAS DUMPED BY ' SET UP UNLOADER\n         MVC   OUTBUFF2+45(6),UNLOADER            MESSAGE\n         CLC   FDRSAVE,=C'DUMMYDSF'     NORMAL DUMP?\n         BE    *+10                     YES\n*                                       NO  - WARN USER\n         MVC   OUTBUFF2+54(22),=C' (ABSOLUTE TRACK DUMP)'\n         PRTLN2                         PRINT THE HEADER\n         TM    PARMFLAG,PF@NOMEM        DETAILS WANTED?\n         BO    FDR2NODT                 NO\n*                                       YES - CHECK DUMP TYPE\n         CLC   FDRSAVE,=C'DUMMYDSF'     WAS IT A DSF'ABLE DUMP?\n         BNE   FDR2ABS                  NO\n*                                       YES - ISSUE MESSAGE\n         MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING DATA SETS DUMPED:'\n         PRTLN2\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(DSFHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'DSFHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2\nFDR2LOOP CLC   =C'DUMMYDSF',TAPEBUFF+12 IS THIS A DSCB BLOCK?\n         BNE   FDR2VOL                  NO  - TRY FOR VOLSER\n*                                       YES\n         LA    R5,TAPEBUFF+40           POINT TO FIRST DSCB\n         LH    R6,TAPEBUFF+30           GET DSCB COUNT THIS BLOCK\nFDR2DSCB LTR   R6,R6                    MORE DSCB'S TO GO?\n         BNP   FDR2NBLK                 NO  - GET NEXT BLOCK\n*                                       YES\n         CLI   44(R5),C'1'              FORMAT 1 DSCB?\n         BNE   FDR2NDSC                 NO\n*                                       YES\n         CLC   LCTR2,=F'1'              ROOM ON PAGE FOR NEXT LINE?\n         BH    FDR2DSCC                 NO\n         NEWPAGE ,2                     FORCE EJECT\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(DSFHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'DSFHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2                         PRINT THEM\nFDR2DSCC MVC   OUTBUFF2+DSFDSN(44),0(R5)   MOVE IN DSNAME\n         LH    R14,98(,R5)                 GET LAST TRACK USED\n         LA    R14,1(,R14)                 MAKE 1 RELATIVE\n         STH   R14,98(,R5)                 SAVE IT BACK\n         ICALL CONVHALF,R14,R1=98(,R5),R15=OUTBUFF2+DSFTRK\n         ICALL CNVRECFX,R14,R1=84(,R5),R15=OUTBUFF2+DSFRECFM\n         ICALL CONVHALF,R14,R1=88(,R5),R15=OUTBUFF2+DSFLRECL-1\n         ICALL CONVHALF,R14,R1=86(,R5),R15=OUTBUFF2+DSFBLKSZ+1\n         ICALL CNVDSORX,R14,R1=82(,R5),R15=OUTBUFF2+DSFDSORG\n         ICALL CONVDATE,R10,R1=53(,R5),R15=OUTBUFF2+DSFCDATE\n         ICALL CONVDATE,R10,R1=56(,R5),R15=OUTBUFF2+DSFEDATE\n         TM    93(R5),X'40'            RACF DEFINED?\n         BZ    *+10                    NO\n         MVC   OUTBUFF2+DSFSECUR+5(4),=C'RACF'   YES\n         TM    93(R5),X'10'            PASSWORD?\n         BZ    FDR2PRT                 NO\n         MVC   OUTBUFF2+DSFSECUR(4),=C'WPWD'  YES - ASSUME WPWD\n         TM    93(R5),X'04'            READ PSWD REQUIRED?\n         BO    *+8                     NO\n         MVI   OUTBUFF2+DSFSECUR,C'R'  YES\n         TM    93(R5),X'50'            BOTH RACF/PSWD?\n         BNO   FDR2PRT                 NO\n         MVI   OUTBUFF2+DSFSECUR+4,C'/'  YES\nFDR2PRT  PRTLN2                        PRINT THE LINE\nFDR2NDSC LA    R5,148(,R5)             BUMP PAST DSCB/COUNT FIELD\n         S     R6,=F'1'\n         B     FDR2DSCB\nFDR2NBLK TAPIO TCCW#DAT,TM=FDR2EOF     GET NEXT BLOCK\n         B     FDR2LOOP\nFDR2EOF  MVI   OUTBUFF2,C'0'\n         OI    TFLAG1,T1@MVEOF         REMEMBER WE HIT EOF\n       MVC  OUTBUFF2+12(63),=C'0***LISTING TERMINATED. FDR FILE NOT COM$\n               PLETE ON THIS VOLUME***'\n         PRTLN2\nFDR2FAKE MVC   TAPEBUFF+4(4),=X'FFFFFFFF'   FAKE OUT FDR2VOL\nFDR2VOL  MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+8(20),=C'DUMPED FROM A UUUUUU'\n         MVC   FDRDVEND(1),DASDRSAV+4   SET UP FENCE FOR DEV TYPE\n         LA    R1,FDRDVTAB              POINT TO FDR DEV TYPE TABLE\nFDR2VOLA CLC   DASDRSAV+4(1),0(R1)      MATCH?\n         BE    FDR2VOLB                 YES\n         LA    R1,7(,R1)                NO  - BUMP TO NEXT ENTRY\n         B     FDR2VOLA\nFDR2VOLB MVC   OUTBUFF2+22(6),1(R1)     PUT DEV TYPE IN MESSAGE\n         MVC   OUTBUFF2+28(16),=C'         VOLSER='\n         CLC   UNLOADER(6),FDRDSF       WAS THIS DSF?\n         BE    FDR2VOLM                 YES - NO VOLSER AVAILABLE\n         CLC   =XL4'00',TAPEBUFF+4      DOES DUMP INCLUDE CYL/TRK 0/0?\n         BNE   FDR2VOLM                 NO  - NO VOLSER AVAILABLE\n*                                       YES\n         LA    R1,TAPEBUFF+20           POINT TO FIRST COUNT FIELD\n         LA    R0,TAPEBUFF              POINT TO 2ND TRACK IN BLOCK\n         AH    R0,TAPEBUFF+2\nFDR2VOLC CLC   0(5,R1),=X'0000000003'   POINTING TO REC 3 ON TRK 0?\n         BE    FDR2VOLG                 YES\n         BH    FDR2VOLM                 NO - AND NO VOLSER AVAIL\n         SR    R15,R15\n         IC    R15,5(,R1)               GET KEY LENGTH\n         AH    R15,6(,R1)               ADD IN DATA LENGTH\n         LA    R1,8(R15,R1)             POINT TO NEXT RECORD\n         CR    R1,R0                    PAST TRACK 0?\n         BNL   FDR2VOLM                 YES\n         B     FDR2VOLC                 NO  - KEEP GOING\nFDR2VOLG CLC   8(8,R1),=C'VOL1VOL1'     GOT VOL LABEL?\n         BNE   FDR2VOLM                 NO  - STRANGE\n         MVC   OUTBUFF2+44(6),16(R1)    YES - MOVE IT INTO MSG\n         B     FDR2VOLP\nFDR2VOLM MVC   OUTBUFF2+43(14),=C' NOT AVAILABLE'\nFDR2VOLP PRTLN2\n         B     STAR$TWO\nFDR2ABS  MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(63),=C'ABSOLUTE TRACK DETAILS NOT AVAILABLE $\n               IN THIS VERSION OF TAPEMAP'\n         PRTLN2\n         B     FDR2FAKE\nFDR2NODT CLC   =C'DUMMYDSF',TAPEBUFF+12  DSCB BLOCK?\n         BNE   FDR2VOL                   NO  - CHECK FOR VOLSER\n         TAPIO TCCW#DAT,TM=FDR2EOF       YES - CHECK NEXT BLOCK\n         B     FDR2NODT\n         SPACE 3\nSLK2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(16),=C'WAS UNLOADED BY ' SET UP UNLOADER\n         MVC   OUTBUFF2+47(8),UNLOADER            MESSAGE\n         PRTLN2                         PRINT THE HEADER\n         MVC   OUTBUFF2+8(30),=C'SLICK LIBRARY BACKUP, CYCLE = '\n         MVC   OUTBUFF2+38(1),DASDRSAV  PUT IN THE CYCLE NUMBER\n         MVC   OUTBUFF2+39(12),=C', MAXSIZE = '\n         ICALL CONVHALF,R14,R1=DASDRSAV+2,R15=OUTBUFF2+41\n         PRTLN2                         PRINT FIRST INFO LINE\n         TM    PARMFLAG,PF@NOMEM        DETAILS WANTED?\n         BO    STAR$TWO                 NO\n*                                       YES\n         MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING MEMBERS UNLOADED:'\n         PRTLN2\n         L     R15,=A(SLKHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'SLKHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         PRTLN2\nSLK2LOOP OC    TAPEBUFF(2),TAPEBUFF     IS THIS A HEADER BLOCK?\n         BNZ   SLK2NBLK                 NO  - TRY NEXT BLOCK\n*                                       YES\n         CLC   LCTR2,=F'1'              ROOM ON PAGE FOR NEXT LINE?\n         BH    SLK2MGO                  NO\n         NEWPAGE ,2                     FORCE EJECT\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(SLKHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'SLKHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2                         PRINT THEM\nSLK2MGO  MVC   OUTBUFF2+SLKMEM(10),TAPEBUFF+8   MEMBER NAME\n         MVI   OUTBUFF2+SLKSTAT-1,C'.'          .\n         MVC   OUTBUFF2+SLKSTAT(4),TAPEBUFF+18  STATUS\n         ICALL CONVP2,R14,R1=TAPEBUFF+32,       REVISION               X\n               R15=OUTBUFF2+SLKREV\n         MVC   OUTBUFF2+SLKINFO(8),TAPEBUFF+34  INFO\n         MVC   OUTBUFF2+SLKTYPE(8),TAPEBUFF+42  TYPE\n         ICALL CONVP4,R14,R1=TAPEBUFF+58,       ACTST                  X\n               R15=OUTBUFF2+SLKACTST\n         ICALL CONVP4,R14,R1=TAPEBUFF+62,       DELST                  X\n               R15=OUTBUFF2+SLKDELST\n         ICALL CONVP3,R14,R1=TAPEBUFF+66,       BLOCKS                 X\n               R15=OUTBUFF2+SLKBLKS\n         ICALL CONVMDY,R14,R1=TAPEBUFF+74,      C-DATE                 X\n               R15=OUTBUFF2+SLKCREAT\n         ICALL CONVMDY,R14,R1=TAPEBUFF+122,     U-DATE                 X\n               R15=OUTBUFF2+SLKUPD\n         PRTLN2\nSLK2NBLK TAPIO TCCW#DAT,TM=SLK2EOF         GET NEXT BLOCK\n         B     SLK2LOOP\nSLK2EOF  OI    TFLAG1,T1@MVEOF             SET \"HIT EOF\"\n         B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nMAP2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(49),=C'CONTAINS THE FOLLOWING USER-SUPPLIED $\n               INFORMATION:'\n         PRTLN2                         PRINT THE HEADER INFO\n** USE R5 TO POINT TO INFO TO BE PRINTED,\n** AND R6 TO CONTROL DEBLOCKING LOOP\n         LA    R5,TAPEBUFF+80           SKIP FILE HEADER INFO\n         L     R6,LASTSIZE                                    09/84 DBC\n         SH    R6,=H'80'\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FIRST LINE\n         B     MAPLOOPX                 BRANCH TO MIDDLE OF LOOP\nMAPLOOP  LA    R5,80(,R5)               GET TO NEXT INFO LOGICAL RECORD\n         SH    R6,=H'80'                CHECK FOR END OF BLOCK\nMAPLOOPX BNP   MAPNEXT                  GET NEXT BLOCK IF NECESSARY\nMAPLOOPY MVC   OUTBUFF2+16(72),0(R5)    PRINT 72 CHARS OF INFO\n         PRTLN2\n         B     MAPLOOP                  GET NEXT LOGICAL RECORD\nMAPNEXT  TAPIO TCCW#DAT,TM=MAPEOF       READ NEXT BLOCK\n         L     R1,LASTSIZE         VERIFY BLOCK MULT OF 80 BY 09/84 DBC\n         SR    R0,R0\n         LA    R2,80\n         DR    R0,R2\n         LTR   R0,R0\n         BNZ   MAPERR                   NO  - ERROR\n         LA    R5,TAPEBUFF              RESET LOOP REGS\n         L     R6,LASTSIZE                                    09/84 DBC\n         B     MAPLOOPY\nMAPERR   MVC   OUTBUFF2+12(53),=C'*** LISTING TERMINATED, INVALID BLOCK$\n                ENCOUNTERED ***'\n         PRTLN2\n         B     STAR$TWO\nMAPEOF   OI    TFLAG1,T1@MVEOF          REMEMBER EOF FOUND\n****     B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nSTAR$TWO MVC   OUTBUFF2(2),=C'0*'\n         MVC   OUTBUFF2+2(L'OUTBUFF2-2),OUTBUFF2+1\n         PRTLN2\n         TM    TFLAG1,T1@MVEOF          ALREADY HIT EOF?\n         BO    CHKMVEOF                 YES - SEE WHERE TO GO\n         TM    TFLAG1,T1@SL             SL TAPE?\n         BO    FIND$EOF                 YES - CONTINUE PROCESSING\n         B     NL$LOOP                  SCAN THRU REST OF FILE\n         SPACE 1\nCHKMVEOF NI    TFLAG1,255-T1@MVEOF      RESET FLAG\n         TM    TFLAG1,T1@SL             SL TAPE?\n         BO    SL$SAVE                  YES - GO READ THE EOF LABELS\n         B     NL$EOF                   NO\n         SPACE 3\nFMU      PRTLN2                         PRINT INFO LINE\nFMU$     TM    PARMFLAG,PF@NOMEM        WANT MEMBER LISTING?\n         BO    STAR$TWO                 NO - DONE\n         MVI   OUTBUFF2,C'0'            SET CC\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING MEMBERS UNLOADED:'\n         PRTLN2                         PRINT HEADER\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FIRST MEMBER LINE\n         LA    PPTR,OUTBUFF2+16         INIT PRINT LINE PTR\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\nSET$FULL MVC   OUTBUFF2+54(17),=C'...  WAS:  DSORG='\n         ICALL CNVDSORG,R14,R15=OUTBUFF2+71  CONVERT DSORG\n         SPACE 1\n         MVC   OUTBUFF2+76(6),=C'LRECL='\n         LA    R1,TAPEBUFF\n         AH    R1,6(,R10)               GET LRECL ADDR\n         ICALL CONVHALF,R14,R15=OUTBUFF2+82  CONVERT LRECL\n         BA&XA R14,SLIDE                MOVE IT LEFT\n         SPACE 1\n         MVC   OUTBUFF2+90(6),=C'RECFM='\n         ICALL CNVRECFM,R14,R15=OUTBUFF2+96  CONVERT RECFM\n         SPACE 1\n         MVC   OUTBUFF2+104(8),=C'BLKSIZE='\n         LA    R1,TAPEBUFF\n         AH    R1,4(,R10)               GET BLKSIZE ADDR\n         ICALL CONVHALF,R14,R15=OUTBUFF2+112 CONVERT BLKSIZE\n         BA&XA R14,SLIDE                MOVE IT LEFT\n         SPACE 2\nSET$FULD MVI   OUTBUFF2,C'-'            SET CC\n         MVC   OUTBUFF2+1(17),FL1ID     MOVE IN (TAPE) DSN\n         MVC   OUTBUFF2+19(5),=C'(FILE'\n         MVC   OUTBUFF2+25(4),FL1FILSQ  MOVE IN FILE SEQ#\n         MVC   OUTBUFF2+29(17),=C') WAS UNLOADED BY'\n         B     8(,R10)                  RETURN TO CALLER\n         SPACE 3\nBOOM     STM   R0,R15,BOOMREGS          SAVE ALL REGS\n         MVC   OUTBUFF2(50),=C'0*** TAPEMAP LOGIC ERROR - CONTACT TEC S$\n               UPPORT ***'                                          WBF\n         PRTLN2                         PRINT ERROR MSG\n         TM    PARMFLAG,PF@TEST         ABEND?\n         BNO   STAR$TWO                 NO - IGNORE REST OF FILE\n         SPACE 1\n         CLOSE MF=(E,OPENMFL)           CLOSE SYSPRINT\n         IFP2  N,BOOM2                  SKIP IF NOT OPEN\n         CLOSE MF=(E,OPENMFL2)          CLOSE SYSPRNT2\n         SPACE 1\nBOOM2    LA    R14,BOOMREGS             POINT TO REG SAVE AREA\n         EX    0,*                      AND AWAY WE GO\n         EJECT\n***********************************************************************\n*                                                                     *\n*  EXIT THE PROGRAM                                                   *\n*                                                                     *\n***********************************************************************\nLEAVE    DS    0H                                              1/93 RT\n         LR    R1,R13                                          1/93 RT\n         L     R13,4(,R13)                                     1/93 RT\n         L     R0,GETM                                         1/93 RT\n         FREEMAIN R,A=(1),LV=(0)                               1/93 RT\n         MVI   12(R13),X'FF'        INVALIDATE FWD-CHAIN       1/93 RT\n         RETURN (14,12),RC=0                                   1/93 RT\n         EJECT                                                 1/93 RT\n***********************************************************************\n*                                                                     *\n*  SUBROUTINE TO DO I/O TO TAPE                                       *\n*                                                                     *\n***********************************************************************\nTAPIO    ST    R0,TAPEIOB+16            SET CCW ADDR\n         EXCP  TAPEIOB\n         WAIT  ECB=TAPEECB\n         CLI   TAPEECB,X'7F'            DID IT WORK?\n         BE    TAPIO$OK                 YES - CONTINUE\n         CLI   TAPEECB,X'41'            CHANNEL PROGRAM ERROR?\n         BNE   TIONTMK             NO, NOT TAPEMARK           07/85 DBC\n         CLI   IOBCSW+4,X'0D'      YES, CHEND, DEVEND, UNITEXCPT?\n         BNE   TIONTMK             NO, NOT FILE MARK          07/85 DBC\n         LA    R0,1                YES, GET FILE INCRIMENT    07/85 DBC\n         AH    R0,FILE#SEQ         INCR TAPEMARK COUNTER      07/85 DBC\n         STH   R0,FILE#SEQ         STORE NEW VALUE            07/85 DBC\n         BR    R10                 RETURN TO CALLER           07/85 DBC\nTIONTMK  DS    0H                                             07/85 DBC\n         SPACE 1                                              07/85 DBC\n         ST    R10,LKRTAPIO             SAVE R10 FOR RECURSION      U16\n         CH    LCTR,=H'&LINEPPG'        ANYTHING ON PAGE? U13 11/88 SBG\n         BL    *+8                      YES - CONTINUE              U13\n         NEWPAGE  ,                     PRINT THE TITLE             U13\n         MVC   OUTBUFF(44),=C'-*** TAPE I/O ERROR *** ECB CODE=XX *** C$\n               SW='                                                 U13\n         HEX   OUTBUFF+33,TAPEECB,LEN=1                             U13\n         HEX   OUTBUFF+44,IOBCSW+1,LEN=7                            U13\n         MVC   OUTBUFF+59(24),=C'*** IOBSENSE0,1=XXXX ***'          U13\n         HEX   OUTBUFF+75,TAPEIOB+2,LEN=2                           U13\n         PRTLN OUTBUFF\n         SPACE 1\n**       L     R1,DD#PTR                -> DD SECTION OF TIOT       U13\n**       SH    R1,=H'24'                -> TIOT                     U13\n**       AH    R1,TAPEDCB+40            -> DD ENTRY FOR TAPE        U13\n**       L     R1,16(,R1)               -> UCB                      U13\n         L     R1,TAPEMFL               -> DCB                      U13\n         L     R1,44(,R1)               -> DEB                      U13\n         L     R1,32(,R1)               -> UCB                      U13\n         L     R2,20(,R1)               -> EXTENDED SENSE INFO      U13\n         CLI   IOBCSW+4,X'0E'  CH-END, DEV-END, UNIT-CHECK ?       PMCF\n         BE    $SKPSENS      SKIP SENSE DATA, UCBEX ABOVE THE LINE PMCF\n         MVC   OUTBUFF(16),=C' *** SENSE DATA='                     U13\n         HEX   OUTBUFF+16,(00,R2),LEN=4                             U13\n         HEX   OUTBUFF+25,(04,R2),LEN=4                             U13\n         HEX   OUTBUFF+35,(08,R2),LEN=4                             U13\n         HEX   OUTBUFF+44,(12,R2),LEN=4                             U13\n         HEX   OUTBUFF+54,(16,R2),LEN=4                             U13\n         HEX   OUTBUFF+63,(20,R2),LEN=4                             U13\n         PRTLN OUTBUFF                  PRINT THE SENSE DATA        U13\n         SPACE 3\n         NEWPAGE  10                    NEXT PAGE IF NEED ROOM      U15\n         MVC  OUTBUFF(35),=C'0    BITS SET ARE FLAGGED ''*'' BELOW' U15\n         PRTLN OUTBUFF                  PRINT HEADER                U15\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE FIRST ONE      U15\n         SPACE 2\n*  R2 -> SENSE DATA                                                 U15\n         LA    R3,10                    NUMBER OF BYTES             U15\n         L     R4,=A(ERR#LIST)          -> ERROR MESSAGES           U15\n         SPACE 1\nNEXTBYTE LA    R6,OUTBUFF+5             -> LINE POS                 U15\n         LA    R1,X'80'                 MASK BIT                    U15\n         SPACE 1\nTEST$BIT MVC   2(10,R6),0(R4)           MOVE TEXT                   U15\n         EX    R1,BIT$TM                IS THIS BIT SET?            U15\n         BZ    *+8                      NO - SKIP                   U15\n         MVI   0(R6),C'*'               FLAG THIS ONE               U15\n         SPACE 1\n         LA    R4,10(,R4)               -> NEXT MSG                 U15\n         LA    R6,16(,R6)               -> NEXT PRINT LINE POS      U15\n         SRA   R1,1                     MOVE BIT RIGHT              U15\n         BNZ   TEST$BIT                 CONTINUE WITH THIS BYTE     U15\n         PRTLN OUTBUFF                  PRINT DESC OF THIS BYTE     U15\n         LA    R2,1(,R2)                -> NEXT BYTE OF SENSE DATA  U15\n         BCT   R3,NEXTBYTE              CONTINUE IF MORE            U15\n$SKPSENS DS    0H                       SKIPPING SENSE DATA IN UCB PMCF\n         SPACE 3\n         CLI   WHERE,3                  READING DATA?\n         BNE   CLOSE$TP                 NO - CLOSE UP AND LEAVE\n         L     R1,TAPEIOB+16            GET CCW ADDR\n         CLI   0(R1),RD                 WAS IT A READ?\n         BNE   CLOSE$TP                 NO - CLOSE UP AND LEAVE\n         LA    R0,TCCW#FSF              SKIP REST OF DATA...\n         L     R10,LKRTAPIO             RESTORE R10                 U16\n         B     TAPIO                    START AT TOP OF THIS SUBRTN\n         SPACE 2\nBIT$TM   TM    0(R2),*-*                << EXECUTED >>              U15\n         SPACE 3                                              07/85 DBC\nTAPIO$OK LA    R0,TCCW#FSF         WAS THIS A -               07/85 DBC\n         CLM   R0,7,TAPEIOB+17      FORWARD SKIP FILE CMD?    07/85 DBC\n         BNE   TIOSAMFL            NO, STILL IN SAME FILE     07/85 DBC\n         LA    R0,1                YES, GET FILE INCRIMENT    07/85 DBC\n         AH    R0,FILE#SEQ         GET NEW FILE# -1           07/85 DBC\n         STH   R0,FILE#SEQ         STORE BACK                 07/85 DBC\nTIOSAMFL DS    0H                                             07/85 DBC\n         SPACE 1                                              07/85 DBC\n         L     R0,=A(BUFFSIZE)          GET LENGTH REQUESTED  07/85 DBC\n         MVC   DWD+2(2),IOBCSW+6        COPY LENGTH LEFT\n         XC    DWD(2),DWD               CLEAR HIGH 2 BYTES\n         S     R0,DWD                   MINUS LENGTH UNUSED\n         ST    R0,LASTSIZE         EQUALS SIZE READ           09/84 DBC\n         TM    TFLAG1,T1@ANLZ           ANALYZING?\n         BNO   4(,R10)                  NO - SKIP THIS JUNK\n         A     R0,BYTECNT               ADD PREVIOUS BYTE COUNT\n         ST    R0,BYTECNT               SAVE NEW TOTAL\n         L     R1,BLOCKCNT              GET BLOCK COUNT\n         LA    R1,1(,R1)                INCR\n         ST    R1,BLOCKCNT              SAVE NEW COUNT\n         CLC   LASTSIZE+2(2),TAPEBUFF START WITH BLKSIZE?     09/84 DBC\n         BE    *+8                      YES - COULD BE RECFM=V\n         NI    NLFLAGS,255-NL@V         NO - NOT RECFM=V\n         CLC   LASTSIZE,MAXBLKSI        SAME SIZE?\n         BE    4(,R10)                  YES - DONE HERE\n         BH    TAPIO$H                  LAST BLOCK IS BIGGEST\n         TM    NLFLAGS,NL@CHANG         ALREADY CHANGED?\n         BO    TAPIO$NL                 YES - TURN OFF RECFM=F\n         OI    NLFLAGS,NL@CHANG         SET \"CHANGED\"\n         B     4(,R10)                  RETURN\n         SPACE 1\nTAPIO$H  OI    NLFLAGS,NL@CHANG         SET \"CHANGED\"\n         MVC   MAXBLKSI,LASTSIZE        SAVE NEW BIGGEST BLKSIZE\nTAPIO$NL NI    NLFLAGS,255-NL@F         NOT RECFM=F\n         B     4(,R10)                  RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*  SUBROUTINE TO HANDLE PRINT OUTPUT                                  *\n*                                                                     *\n***********************************************************************\nNEWPAGE  CR    LCTR,R0                  ENOUGH LINES LEFT?\n         BNLR  R10                      YES - JUST RETURN\n         LA    LCTR,LINESPP-2           RESET LINE COUNTER\n         PRTLN TITLE1\n         TM    TFLAG1,T1@PAGE1          IS THIS FIRST PAGE OF VOL?\n         BNO   NEWPAG$2                 NO - SKIP THIS STUFF.\n         NI    TFLAG1,255-T1@PAGE1      TURN OFF FLAG\n         MVC   TITLE2+1(28),TITLE2      BLANK IT OUT\n         SPACE 1\nNEWPAG$3 TM    TFLAG1,T1@PARM           HAVE PARM FIELD?\n         BNO   NEWPAG$4                 NO - SKIP\n         TM    TFLAG2,T2@LPARM          IS IT TOO LONG?\n         BO    NEWPAG$4                 YES - SKIP\n         MVC   TITLE2+1(28),PARM#MSG+1  MOVE IN THE PARM FIELD\n         SPACE 1\nNEWPAG$4 PRTLN TITLE2                   PRINT AUTHOR LINE\n         SPACE 1\nNEWPAG$1 TM    TFLAG1,T1@PARM           HAVE PARM FIELD?\n         BNO   NEWPAG$2                 NO - DON'T PRINT IT\n         TM    TFLAG2,T2@LPARM          LONG PARM FIELD?\n         BNO   NEWPAG$5                 NO - ALREADY PRINTED        U15\n         PRTLN PARM#MSG                 PRINT IT\nNEWPAG$5 TM    TFLAG1,T1@PERR           ERROR IN PARM FIELD?\n         BNO   NEWPAG$2                 NO - DON'T PRINT IT\n         PRTLN PARMERR                  PRINT IT\n         SPACE 1\nNEWPAG$2 LA    R0,DASHES\n         BA&XA R14,PUTPRTLN             SEPARATOR LINE\n         PRTLN COLHEAD1,I\n         PRTLN COLHEAD2,I\n         LA    R0,DASHES\n         BA&XA R14,PUTPRTLN             SEPARATOR LINE\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE THE FIRST FILE U15\n         BCTR  LCTR,0                   ADJUST THE LINE COUNT       U15\n         TM    TFLAG2,T2@RQVOL          WRONG VOLUME MOUNTED?       U15\n         BNOR  R10                      NO - ALL DONE               U15\n         NI    TFLAG2,255-T2@RQVOL      TURN OFF FLAG NOW           U15\n         MVI   OUTBUFF,C'-'             TRIPLE SPACE                U15\n         MVI   OUTBUFF+41,C'*'          START OF BOX                U15\n         MVC   OUTBUFF+42(49),OUTBUFF+41  REST OF IT                U15\n         PRTLN OUTBUFF                  PRINT TOP OF BOX            U15\n         MVC   OUTBUFF+41(50),=C'* ID OF MOUNTED VOLUME DIFFERS FROM ID$\n                REQUESTED *'            MOVE IN MSG                 U15\n         PRTLN OUTBUFF                  PRINT MSG                   U15\n         SH    LCTR,=H'2'               ACCOUNT FOR TRIPLE SPACE    U15\n         MVI   OUTBUFF+41,C'*'          START OF BOX                U15\n         MVC   OUTBUFF+42(49),OUTBUFF+41  REST OF IT                U15\n         PRTLN OUTBUFF                  PRINT BOTTOM OF BOX         U15\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE FIRST FILE     U15\n         BR    R10                      RETURN\n         SPACE 3\nPRTLN    ST    R14,PRT#SAVE             SAVE RETURN ADDR\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE\n         BA&XA R14,PUTPRTLN             WRITE OUTPUT LINE\n         L     R14,PRT#SAVE             RESTORE RETURN ADDR\n         MVC   OUTBUFF,OUTCLEAR         CLEAR OUTPUT LINE\n         BCTR  LCTR,R14                 RETURN IF MORE LINES LEFT\n         ST    R14,R14SAVE              SAVE MY R14\n         ST    R10,R10SAVE              SAVE SOMEONE'S R10\n         NEWPAGE ,                      DO A NEW PAGE\n         L     R14,R14SAVE              RESTORE MY R14\n         L     R10,R10SAVE              RESTORE SOMEONE'S R10\n         BR    R14                      RETURN TO CALLER\n         SPACE 2\nPUTPRTLN L     R1,OPENMFL               GET DCB ADDR\n         PUT   (1),(0)                  WRITE OUTPUT LINE\n         ORG   *-2                      BACK OVER BALR\n         BR    R15                      MAKE HIM RETURN TO MY CALLER\n         SPACE 3\n************************************************************* 12/88 SBG\n* A BAL TO NEWPAGE2+4 IS DONE IN SEVERAL PLACES.            * 12/88 SBG\n* THE CONDITION CODE AT THOSE POINTS IS NOT SET AT LABEL    * 12/88 SBG\n* NEWPAGE2, BUT RATHER, JUST ABOVE THOSE BAL INSTRUCTIONS.  * 12/88 SBG\n* IT IS THEREFORE IMPORTANT THAT THE INSTRUCTION JUST BELOW * 12/88 SBG\n* LABEL NEWPAGE2 HAVE THE CORRECT CONDITION SETTINGS.       * 12/88 SBG\n************************************************************* 12/88 SBG\nNEWPAGE2 C     R0,LCTR2                 ENOUGH LINES LEFT?    12/88 SBG\n         BLR   R10                      YES - JUST RETURN     12/88 SBG\n         SPACE 1\n         LA    R0,TITLE1                GET RECORD ADDR\n         BA&XA R14,PUTPRNT2+4           WRITE IT OUT\n         LA    R0,DASHES\n         BA&XA R14,PUTPRNT2+4           WRITE IT OUT\n         LA    R14,LINESPP-3            RESET LINE COUNTER    02/93 RT\n         ST    R14,LCTR2                                      02/93 RT\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\nPRTLN2   ST    R14,PRT#SAVE             SAVE RETURN ADDR\n         LA    R1,3                     ASSUME TRIPLE SPACE\n         CLI   OUTBUFF2,C'-'            IS IT?\n         BE    P2$OK                    YES\n         BCTR  R1,0                     ASSUME DOUBLE SPACE\n         CLI   OUTBUFF2,C'0'            IS IT?\n         BE    P2$OK                    YES\n         BCTR  R1,0                     ASSUME SINGLE SPACE\n         CLI   OUTBUFF2,C' '            IS IT?\n         BE    P2$OK                    YES\n         MVI   OUTBUFF2,C' '            MAKE A BLANK\n         SPACE 1\nP2$OK    L     R14,LCTR2                DECR LINE COUNT       02/93 RT\n         SR    R14,R1                                         02/93 RT\n         ST    R14,LCTR2                                      02/93 RT\n         BP    P2$GO                    CONTINUE IF OK\n         NEWPAGE  ,2                    SET NEW PAGE\n         MVI   OUTBUFF2,C'-'            TRIPLE SPACE FIRST LINE     U13\n         L     R14,LCTR2                ACCOUNT FOR IT        02/93 RT\n         SH    R14,=H'3'                                      02/93 RT\n         ST    R14,LCTR2                                      02/93 RT\n         SPACE 1\nP2$GO    BA&XA R14,PUTPRNT2             WRITE OUTPUT LINE\n         MVC   OUTBUFF2,OUTCLR2         CLEAR OUTPUT LINE\n         L     R14,PRT#SAVE             GET RETURN ADDR\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\nPUTPRNT2 LA    R0,OUTBUFF2              GET RECORD ADDR\n         L     R1,OPENMFL2              GET SYSPRNT2 DCB ADDR\n         PUT   (1),(0)                  WRITE IT OUT\n         ORG   *-2                      BACK OVER BALR\n         BR    R15                      MAKE HIM RETURN TO MY CALLER\n         SPACE 3\n         PUSH  PRINT                                                U13\n         PRINT GEN                                                  U13\n         SPACE 1\nPRT$EXIT DCBEXIT  BLKSIZE=3192,BUFNO=1                              U15\n         POP   PRINT                                                U13\n         EJECT\n***********************************************************************\n*                                                                     *\n*    ICALLABLE SUBROUTINES                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*  SUBROUTINE TO CONVERT A HALFWORD TO PRINTABLE FORM\nCONVHALF MVC   DWD(2),0(R1)             MOVE FIELD TO AN ALIGNED PLACE\n         LH    R0,DWD                   PICK IT UP\n         CVD   R0,DWD                   CONVERT TO PACKED\n         MVC   1(5,R15),=X'2020202120'  MOVE IN EDIT MASK\n         ED    0(6,R15),DWD+5           DO THE EDIT\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 2-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP2   MVC   1(3,R15),=X'202120'      MOVE EDIT PATTERN TO OUT AREA\n         ED    0(4,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 3-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP3   MVC   1(5,R15),=X'2020202120'  MOVE EDIT PATTERN TO OUT AREA\n         ED    0(6,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 4-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP4   MVC   1(7,R15),=X'20202020202120'  MOVE EDIT PATTERN\n         ED    0(8,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A PACKED DATE FIELD TO PRINTABLE FORM\nCONVMDY  MVC   MDYP(4),=PL4'0'          ZERO MDYP (4-BYTES PACKED)\n         MVC   MDYP(3),0(R1)            GET MMDDYY (PACKED W/O SIGN)\n         UNPK  MDYU(7),MDYP(4)          UNPACK IT\n         MVC   0(2,R15),MDYU            MOVE MM\n         MVI   2(R15),C'/'                   /\n         MVC   3(2,R15),MDYU+2               DD\n         MVI   5(R15),C'/'                   /\n         MVC   6(2,R15),MDYU+4               YY\n         BR    R14                      RETURN\n         SPACE 3\n*  SUBROUTINE TO REMOVE LEADING BLANKS\nSLIDE    CLI   0(R15),C' '              NON-BLANK YET?\n         BNER  R14                      YES - RETURN TO CALLER\n         MVC   0(6,R15),1(R15)          MOVE IT LEFT 1 POS\n         B     SLIDE                    AND CHECK IT AGAIN\n         SPACE 3\n*  SUBROUTINE TO REMOVE LEADING ZEROES\nDEZERO   CLI   0(R1),C'0'               NON-ZERO YET?\n         BNER  R14                      YES - RETURN\n         MVI   0(R1),C' '               MAKE IT A BLANK\n         A     R1,=F'1'                 ADVANCE\n         B     DEZERO                   LOOP\n         SPACE 3\n*  SUBROUTINE TO CONVERT A UNIT TYPE\nCONVUNIT MVC   OUTBUFF2+120(9),=C'UNIT=????'\n         CLI   3(R1),X'0F'              TOO BIG?              03/94 SBG\n         BHR   R10                      YES - RETURN\n         IC    R14,3(,R1)               ELSE GET BYTE\n         N     R14,=F'255'              ISOLATE IT\n         BZR   R10                      INVALID IF ZERO\n         BCTR  R14,0                    -1 BECAUSE NO ZERO\n         MH    R14,=H'6'                LENGTH OF A TABLE ENTRY\n         LA    R15,=C'2311  2301  2303  2302  2321  2305-12305-22314  3$\n               330  3340  3350  3375  3330-13380  3390  '     03/94 SBG\n         LA    R14,0(R14,R15)           POINT TO CORRECT ENTRY\n         MVC   OUTBUFF2+125(6),0(R14)   MOVE DEVTYPE TO LINE\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A DSORG\nCNVDSORG LA    R1,TAPEBUFF\n         AH    R1,0(,R10)               GET DSORG ADDR\n         SPACE 1\nCNVDSORX TM    0(R1),X'01'              DSORG=**U\n         BNO   *+8                      NO - SKIP\n         MVI   2(R15),C'U'\n         SPACE 1\n         MVC   0(2,R15),=C'PO'          ASSUME DSORG=PO\n         TM    0(R1),X'02'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'DA'          ASSUME DSORG=DA\n         TM    0(R1),X'20'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'PS'          ASSUME DSORG=PS\n         TM    0(R1),X'40'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'IS'          ASSUME DSORG=IS\n         TM    0(R1),X'80'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(4,R15),=C'VSAM'        ASSUME VSAM\n         CLC   0(2,R1),=X'0008'         IS IT?\n         BER   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(4,R15),=C'**  '        NONE OF THE ABOVE???\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A RECFM\nCNVRECFM LA    R1,TAPEBUFF\n         AH    R1,2(,R10)               GET RECFM ADDR\n         SPACE 1\nCNVRECFX TM    0(R1),X'C0'              RECFM=U?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'U'\n         B     RECFM$2                  CONTINUE\n         SPACE 1\n         TM    0(R1),X'80'              RECFM=F?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'F'\n         B     RECFM$2                  CONTINUE\n         SPACE 1\n         TM    0(R1),X'40'              RECFM=V?\n         BNO   *+8                      NO - TRY NEXT\n         MVI   0(R15),C'V'\n         SPACE 1\nRECFM$2  LA    R15,1(,R15)\n         TM    0(R1),X'10'              BLOCKED?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'B'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'08'              SPANNED?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'S'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'20'              TRK OVFL?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'T'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'02'              RECFM=A?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'A'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'01'              RECFM=M?\n         BNOR  R14                      NO - RETURN TO CALLER\n         MVI   0(R15),C'M'\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO COMPUTE TAPEFEET\nTAPEFEET XR    R0,R0\n         D     R0,=F'1200'              GET LENGTH IN FEET\n         CH    R0,=H'600'               ROUND UP?\n         BL    *+8                      NO\n         A     R1,=F'1'                 ROUND UP.\n         CVD   R1,DWD\n         MVC   1(5,R15),=X'2020202120'\n         ED    0(6,R15),DWD+5\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO FIND A TIOT ENTRY\nTIOTSCAN L     R1,DD#PTR                -> DD SECTION\n         XR    R0,R0                    CLEAR FOR IC\n         BA&XA R14,*+6                  SET LOOP ADDR & SKIP\n         SPACE 1\n         AR    R1,R0                    POINT TO NEXT ENTRY\n         IC    R0,0(,R1)                GET LENGTH OF THIS ENTRY\n         LTR   R0,R0                    END OF TIOT?\n         BZR   R10                      YES - \"NOT FOUND\" RETURN\n         CLC   4(8,R1),0(R15)           THIS IT?\n         BNER  R14                      NO - LOOP\n         CLC   =F'0',16(R1)             DD DUMMY? (LIKE MSM?)\n         BNE   4(,R10)                  NO - RETURN (FOUND)\n         BR    R10                      SAY NOT FOUND\n         EJECT\n         LTORG ,\n         SPACE 6\n*  REGISTER EQUATES                                            1/93 RT\nR0       EQU   0                                               1/93 RT\nR1       EQU   1                                               1/93 RT\nR2       EQU   2                                               1/93 RT\nR3       EQU   3                                               1/93 RT\nR4       EQU   4                                               1/93 RT\nR5       EQU   5                                               1/93 RT\nR6       EQU   6                                               1/93 RT\nR7       EQU   7                                               1/93 RT\nR8       EQU   8                                               1/93 RT\nR9       EQU   9                                               1/93 RT\nR10      EQU   10                                              1/93 RT\nR11      EQU   11                                              1/93 RT\nR12      EQU   12                                              1/93 RT\nR13      EQU   13                                              1/93 RT\nR14      EQU   14                                              1/93 RT\nR15      EQU   15                                              1/93 RT\n*  REGISTERS USED IN ROUTINES TO LIST IEHMOVE & IEBCOPY UNLOADED MEMBRS\nBLEN     EQU   R2      *PAIR*           BLOCK LENGTH LEFT\nBPTR     EQU   R3      *PAIR*           -> CURRENT POS IN BLOCK\nDLEN     EQU   R4                       DIRBLK OR DATA LENGTH LEFT\nDPTR     EQU   R5                       -> CURRENT POS IN BLOCK\nPPTR     EQU   R6                       -> POS IN PRINT LINE\n         SPACE 1\n*  OTHER MISC REGISTERS\nLCTR     EQU   R8                       # OF LINES LEFT THIS PAGE\nLCTR2    DS    F                        STORAGE INSTEAD OF REG 1/93 RT\n         SPACE 1\nCC       EQU   X'40'                    COMMAND CHAINING\nSLI      EQU   X'20'                    SUPPRESS LENGTH INDIC.\n         SPACE 1\nRD       EQU   X'02'                    READ\nBSF      EQU   X'2F'                    BACKSPACE FILE        02/93 RT\nFSF      EQU   X'3F'                    FORWARD SPACE FILE\nRWD      EQU   X'07'                    REWIND\n         SPACE 1\nBUFFSIZE EQU   X'FFFF'             SIZE OF TAPE BUFFER        09/84 DBC\nLINESPP  EQU   &LINEPPG                 LINES PRINTED PER PAGE11/88 SBG\n         SPACE 2\nOPENMFL2 OPEN  (SYSPRNT2,OUTPUT),MF=L\nOPENMFL  OPEN  (SYSPRINT,OUTPUT),MF=L\nOPENMFLI OPEN  SYSIN,MF=L\nTAPEMFL  OPEN  TAPEDCB,MF=L\n         SPACE 1\nEXLST    DC    A(0)\nPRTEXLST DC    X'85',AL3(PRT$EXIT)\n         SPACE 2\nTAPEECB  DC    A(0)\nTAPEIOB  DC    X'42000000'              IOBFLAG1 (SET FOR CMD CHAINING)\n         DC    A(TAPEECB)               ECB ADDR\nIOBCSW   DC    2F'0'                    CSW\n         DC    A(0)                     CHANNEL PGM ADDR\n         DC    A(TAPEDCB),A(0)          DCB ADDR\n         DC    H'1',H'0'                TAPE BLOCK COUNT INCREMENT\n         SPACE 1\nTCCW#BSF CCW   BSF,0,0,1                BACKSPACE FILE\n         SPACE 1\nTCCW#FSF CCW   FSF,0,0,1                FWD SPACE FILE\n         SPACE 1\nTCCW#LBL CCW   RD,*-*,CC,80             READ 80 BYTE BLOCK INTO FL1LABI\n         CCW   RD,*-*,00,80             READ IN NEXT BLOCK INTO FL2LABI\n         SPACE 1\nTCCW#EOV CCW   RD,*-*,00,80             READ 80 BYTE BLOCK INTO FL1LABI\n         SPACE 1\nTCCW#DAT CCW   RD,*-*,SLI,BUFFSIZE      READ DATA BLOCK\n         SPACE 1\nTCCW#RWD CCW   RWD,0,0,1                REWIND THE TAPE\n         SPACE 1\nTCCW#SNS CCW   4,SENSDATA,SLI,24        READ SENSE DATA\n         SPACE 2\nSENSDATA DC    XL24'00'                 SENSE DATA BUFFER\n         SPACE 2\nTFLAG1   DC    X'00'                    FLAGS\nT1@PARM  EQU   X'80'                    HAVE PARM FIELD\nT1@PERR  EQU   X'40'                    ERROR IN PARM FIELD\nT1@PAGE1 EQU   X'20'                    THIS IS FIRST TITLE GROUP\nT1@BADEN EQU   X'10'                    DENSITY ERROR IN TAPE LABEL(S)\nT1@SL    EQU   X'08'                    THIS TAPE IS SL\nT1@ANLZ  EQU   X'04'                    PARM=CHECK OR NL TAPE\nT1@MVEOF EQU   X'02'                    IEHMOVE2 HAS READ TILL EOF\nT1@DATA  EQU   X'01'                    HAVE INPUT DATA\n         SPACE 1\nTFLAG2   DC    X'00'                    MORE\nT2@RQVOL EQU   X'80'                    REQUESTED VOL MISMATCH\nT2@LPARM EQU   X'40'                    PARM FIELD LONGER THAN 21 CHARS\nT2@PRT2  EQU   X'20'                    SECOND PRINT FILE IN USE\n         SPACE 1\nNLFLAGS  DC    X'00'                    NON-LABELLED TAPE FLAGS\nNL@V     EQU   X'80'                    RECFM=V\nNL@F     EQU   X'40'                    RECFM=F\nNL@CHANG EQU   X'20'                    BLOCKSIZE HAS CHANGED\n         SPACE 1\nPARMFLAG DC    X'00'\nPF@TEST  EQU   X'80'                    TEST\nPF@INLIN EQU   X'40'                    INLINE\nPF@NOMEM EQU   X'20'                    NOMEMBERS (NOMEM)\nPF@DEN1  EQU   X'10'                    DEN1\nPF@NATTR EQU   X'08'                    NOATTR\nPF@NONOT EQU   X'04'                    NONOTE\nPF@NOCHK EQU   X'02'                    NOCHECK (NOSCAN)      06/84 DBC\nPF@NL    EQU   X'01'                    NL\n         SPACE 1\nPARMTAB  DC    H'3',C'TEST     ',AL1(PF@TEST)\n         DC    H'5',C'INLINE   ',AL1(PF@INLIN)\n         DC    H'8',C'NOMEMBERS',AL1(PF@NOMEM)\n         DC    H'4',C'NOMEM    ',AL1(PF@NOMEM)\n         DC    H'3',C'DEN1     ',AL1(PF@DEN1)\n         DC    H'5',C'NOATTR   ',AL1(PF@NATTR)\n         DC    H'5',C'NONOTE   ',AL1(PF@NONOT)\n         DC    H'6',C'NOCHECK  ',AL1(PF@NOCHK)                06/84 DBC\n         DC    H'5',C'NOSCAN   ',AL1(PF@NOCHK)                06/84 DBC\nPARMLAST DC    H'1',C'NL       ',AL1(PF@NL)\n         SPACE 2\n         DC    C' '                     FOR CLEARING \"UNLOADER\"\nUNLOADER DC    CL8' '             /   /IEBCOPY/IEHMOVE/IEBISA 06/84 DBC\nC00080   DC    C'00080'\n         ORG   C00080+1\nC00800   DC    C'00800'\nRET#ADDR DC    A(EOD2)                  RETURN ADDR\nDEN#LIST DC    F'200,556,800,1600,6250,37871'  DENSITY VALUES       THO\n         DC    C'200 556 800 16006250N/A '     RIGHT AFTER ABO LINE THO\nTRUE#DEN DC    C'3',AL3(DEN#LIST+8)     REAL DEN;  -> 4 CHAR REAL DEN\nF1       DC    F'1'                                                 U14\nH1       EQU   F1+2                                                 U14\nF15      DC    F'15'                                                U14\nNULLNUMB DC    H'0'                     # OF NULL FILES TO SKIP     U14\nNUMBNULL DC    H'0'                     # OF NULL FILES / THIS TAPE U14\nWHERE    DC    X'00'                    WHERE-WE-ARE FLAG\n         SPACE 1\n         PUSH  PRINT\n         PRINT GEN\n         SPACE 1\nHEXTAB   HEXTAB  DUAL=NO\n         SPACE 3                                                    THO\n         POP   PRINT                                                THO\n         SPACE 1                                                    THO\n*                                                             DRK APR07\n* TABLE OF FDR DEVICE TYPES AND CODES                         DRK APR07\n* COURTESY OF BRUCE BLACK, INNOVATION DP                      DRK APR07\n*                                                             DRK APR07\nFDRDVTAB DS    0C                                             09/84 DBC\n         DC    C'A2305-1'                                     DRK APR07\n         DC    C'BF6421 '   (FUJITSU)                         DRK APR07\n         DC    C'C2305-2'                                     DRK APR07\n         DC    C'D3380-1'   (3390-1 COMPATIBILITY, 1113 CYLS) DRK APR07\n         DC    C'E3380-2'   (3390-2 COMPATIBILITY, 2226 CYLS) DRK APR07\n         DC    C'F3390-1'   NATIVE (1113 CYLS)                DRK APR07\n         DC    C'G3390-2'   NATIVE (2226 CYLS)                DRK APR07\n         DC    C'H3380E4'   (EMC E- \"MINUS\", 1408 CYLS)       DRK APR07\n         DC    C'I3390-F'   (HITACHI, 2655 CYLS)              DRK APR07\n         DC    C'J3380-3'   (3390-3 COMPATIBILITY, 3339 CYLS) DRK APR07\n         DC    C'K3380-K'   (2655 CYLS)                       DRK APR07\n         DC    C'L3380-E'   (1770 CYLS)                       DRK APR07\n         DC    C'M3380  '   (SINGLE DENSITY, 885 CYLS)        DRK APR07\n         DC    C'N3375  '                                     DRK APR07\n         DC    C'O3390-3'   NATIVE (3339 CYLS)                DRK APR07\n         DC    C'P9345-1'   (1440 CYLS)                       DRK APR07\n         DC    C'Q9345-2'   (2156 CYLS)                       DRK APR07\n         DC    C'R3380K4'   (EMC K- \"MINUS\", 1830 CYLS)       DRK APR07\n         DC    C'S3390E2'   (EMC, 1540 CYLS)                  DRK APR07\n         DC    C'T2314  '                                     DRK APR07\n         DC    C'U334035'                                     DRK APR07\n         DC    C'V334070'                                     DRK APR07\n         DC    C'W3390-9'   (10017 CYLS)                      DRK APR07\n         DC    C'X3330  '   (MODEL 1)                         DRK APR07\n         DC    C'Y333011'                                     DRK APR07\n         DC    C'Z3350  '                                     DRK APR07\n         DC    C'03380K5'   (EMC, K+ \"PLUS,\" 3993 CYLS)       DRK APR07\n         DC    C'1399553'   (3995-153, 4365 CYLS)             DRK APR07\n         DC    C'2339027'   (32760 CYLS)                      DRK APR07\n         DC    C'3339054'   (65520 CYLS)                      DRK APR07\nFDRDVEND DC    C' ??????'          FENCE FOR UNKNOWN FDR DEVICES\n         EJECT\nWORKD    DSECT                          RESUME\n         DS    9D                  SAVE AREA                  01/93 RT\nDD#PTR   DS    A                        -> DD SECTION OF TIOT\nLEN#TAPE DS    F                        TAPE LENGTH\n         DS    F                        NL LENGTH\nFILE#SEQ DS    H                        NL FILE SEQ #\n         DS    H                        (UNUSED)\nPRT#SAVE DS    A                        SAVE FOR RETURN ADDR\nR10SAVE  DS    A                        MORE...\nLKRTAPIO DS    A                        ...OF THE...\nR14SAVE  DS    A                        ...SAME\nTU$SAVE2 DS    2A                  USED BY TEST$UP            06/84 DBC\nBOOMREGS DS    16F                      REG SAVE AREA FOR LOGIC ERROR\nMAXBLKSI DS    F                   BIGGEST BLOCK READ SO FAR  09/84 DBC\nLASTSIZE DS    F                   SIZE OF THE LAST BLK READ  09/84 DBC\nBLOCKCNT DS    F                        # OF BLOCKS READ\nBYTECNT  DS    F                        TOTAL # OF BYTES READ\nCBTBLK1  DS    F                   STORE BLOCKSIZ FOR CBT973. 11/88 SBG\nCBTAPEND DS    F                   STORE EO-BLOCK FOR CBT973. 11/88 SBG\nCBSTOR1  DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR2  DS    F                   STORE REGISTER FOR CBT973. 01/93 RT\nCBSTOR01 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR02 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR03 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR04 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR05 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR06 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR08 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR09 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR10 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSAVE4  DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSAVE15 DS    F                   STORE REGISTER 15          11/88 SBG\nNL#SAVE  DS    4F                  SAVE FOR NL STUFF IF SL    09/84 DBC\nNL#FLAGX DS    X                        SAME\nUPDT#TYP DS    C                        A,R,C FOR UPDTE\nPTF#TYPE DS    C                   A,F,P,U FOR SYSMODS        07/85 DBC\nUPDTXFLG DS    C                   FLAG IF ./ OR >< IN UPDTE  11/88 SBG\nBLANKS   DS    0CL17,CL16' '\nOUTCLEAR DC    C' '                     FOR CLEARING OUTBUFF\nOUTBUFF  DS    CL133\nOUTCLR2  DC    C' '                     FOR CLEARING OUTBUFF2\nOUTBUFF2 DS    CL133,7C                                             U14\nDASHES   DS    CL133\nINBUFF   DS    CL80\nLABELS   DS    3CL80                    FOR VOL,FL1,FL2\nCBTCLEAR DC    C' '                     FOR CLEARING CBT CARD 11/88 SBG\nCBTCARD  DS    CL80              CBT973 CARD-IMAGE EXPANSION  11/88 SBG\nCSTATCLR DC    C' '                     FOR CLEARING CBT DOC  12/88 SBG\nCBTVERS  DS    CL4                      CBT TAPE VERSION #    12/88 SBG\nCBTDATE  DS    CL8                      CBT TAPE RELEASE DATE 12/88 SBG\nMV#ABUF2 DS    A(MV#BUFF2)              ADDR OF SECOND DE-SPANNING BUFF\nMV#BUFF1 DS    CL78                     FIRST DE-SPANNING BUFFER\nMV#BUFF2 DS    CL78                     SECOND DE-SPANNING BUFFER\nPARM#MSG DS    CL110                    FOR PARM\nOB2END   DS    A(OUTBUFF2+110)          ADDR OF END OF OUTBUFF2\nOB2END2  DS    A(OUTBUFF2+110+10)       SAME FOR UPDTE\nDASDRSAV DS    XL24                     FOR HEADER RECORD\nFDRSAVE  DS    CL8                      FOR 'DUMMYDSF' IF PRESENT\nMDYP     DS    PL4'0'                   FOR CONVMDY\nMDYU     DS    CL7                      FOR CONVMDY\n         SPACE 2                                              12/88 SBG\n***** LOADED  LITERALS  -  SEE END OF THE PROGRAM  ********** 12/88 SBG\n         DS    0D                                             12/88 SBG\nEMPTYLIT DC    C'THISFILEHASBEENDELETEDORISRESERVED'  NEWVERS 12/88 SBG\nEMPTYLI2 DC    C'DELETEDBYPREVIOUSVERSIONOFTHISTAPE'  OLDVERS 12/88 SBG\nREQ#VOL  DC    C'+** REQUESTED VOL=\"123456\" **'\n         SPACE 1\nFVOL#MSG DC    C' *** THIS IS VOLUME # XXXX OF THE ABOVE MULTIPLE VOLUM$\n               E FILE.  FIRST VOLUME WAS XXXXXX.'\n         SPACE 1\nPARMERR  DC    C' UNKNOWN PARM OPTION AT COL=XXX.  ANY REMAINING PARM I$\n               GNORED.'\nFFS      DC    XL12'FFFFFFFFFFFFFFFFFFFFFFFF'\nCHJOBLIT DC    C'//MVSMODS'       ARNIE CASINGHINO'S JOBNAME  12/88 SBG\nVERSLIT1 DC    C'* VERSION'       DATE OF CBT TAPE - PREFIX   12/88 SBG\nVERSLIT2 DC    C'VERSION #'       VERSION OF CBT TAPE PREFIX  12/88 SBG\nCBHLIT   DC    C'VER        -  -  '   DISPLAY FOR CBTHEADER   12/88 SBG\n         SPACE 1                                              12/88 SBG\n************************************************************* 12/88 SBG\n*  TABLE OF UNLOADER LITERALS - NOTE, IF YOU ADD TO THIS      12/88 SBG\n*   TABLE, YOU MUST ADD TO THE LIST OF LITERALS TO BE MOVED   12/88 SBG\n*   INTO THIS WORKAREA THAT IS AT THE END OF THIS PROGRAM.    12/88 SBG\n*  PLEASE SEE THE LABEL CALLED \"LITMOVES\" -  THIS WAS BECAUSE 12/88 SBG\n*   THE 3RD BASE REGISTER WAS EXCEEDED, AND I MOVED SOME OF   12/88 SBG\n*   THE LITERALS INTO THE WORKAREA DSECT.  THEY THEREFORE     12/88 SBG\n*   HAVE TO BE INITIALIZED IN THE GETMAINED WORKAREA STORAGE. 12/88 SBG\n************************************************************* 12/88 SBG\nIEBCOPY  DC    C'IEBCOPY'\nIEHMOVE  DC    C'IEHMOVE'\nIEBISAM  DC    C'IEBISAM'\nIEHDASDR DC    C'IEHDASDR'\nIEBUPXXX DC    C'IEBUPXXX'         IEBUPDTE OR IEBUPDAT       06/84 DBC\nFDR      DC    C'FDR   '\nFDRDSF   DC    C'FDRDSF'\nFDRXXX   DC    C'FDR???'\nSLICKMNG DC    C'SLICKMNG'                                    09/84 DBC\nCTAPEMAP DC    C'TAPEMAP'\nSMPPTFIN DC    C'SMPPTFIN'                                    07/85 DBC\nCBT973   DC    C'CBT973'                                      11/88 SBG\nCBTEMPTY DC    C'CBTEMPTY'         EMPTY FILE ON THE CBT TAPE 11/88 SBG\nCBHEADER DC    C'CBT DOC '         DOC FILE FOR THE CBT TAPE  12/88 SBG\nUTY3420C DC    X'33008003'        UNIT TYPE FOR 3420C CARTS   09/89\u00acSBG\n         DS    0F                 ALIGNMENT                   12/88 SBG\nCDOCSIZE DC    F'32720'           BLOCK SIZE OF CBT DOC FILE  12/88 SBG\nINCORLAB DC    C'-*****  ONE OR MORE FILES HAVE DENSITY INDICATED INCOR$\n               RECTLY IN LABELS.  ALL FILES ARE WRITTEN AT XXXX BPI  **$\n               ***'\n***** LOADED  LITERALS  -  SEE END OF THE PROGRAM  ********** 12/88 SBG\n         SPACE 2\nDWD      DS    D\nJFCB     DS    XL176                    DWD ALIGNED\n************************************************************* 12/88 SBG\n*  WE CONTINUE TO ADDRESS THE PROBLEM OF EXCEEDING 3 BASE   * 12/88 SBG\n*  REGISTERS.  PREVIOUSLY, THE TAPE BUFFER WAS ALIGNED ON   * 12/88 SBG\n*  HALF A PAGE.  WE WANT TO HAVE MOST OF THIS HALF A PAGE   * 12/88 SBG\n*  FOR COPYING LITERALS SO THEY CAN BE ADDRESSABLE FROM THE * 12/88 SBG\n*  WORKAREA'S BASE REGISTER.  WE HOPE THE ALIGNMENT OF      * 12/88 SBG\n*  WORKD+2048 WASN'T REALLY NECESSARY.                      * 12/88 SBG\n*-----------------------------------------------------------* 12/88 SBG\n*  HOWEVER, IF TAPEBUFF+NNN HAS BEEN SPECIFIED IN ANY       * 12/88 SBG\n*  INSTRUCTION, THE SUM OF THE DISPLACEMENT OF TAPEBUFF     * 12/88 SBG\n*  AND NNN MUST NOT EXCEED 4095.  THE LARGEST SUCH          * 12/88 SBG\n*  DISPLACEMENT WE HAVE FOUND AT THIS WRITING IS 282.       * 12/88 SBG\n*  THAT IS TO SAY, TAPEBUFF+282 IS THE FARTHEST OUT         * 12/88 SBG\n*  ADDRESS THAT THE CURRENT INCARNATION OF THIS PROGRAM     * 12/88 SBG\n*  HAS TO GET TO, FROM REGISTER 13.  THEREFORE, I HAVE      * 12/88 SBG\n*  SUBTRACTED 300 FROM 4096 AND SET TAPEBUFF AT WORKD+3796. * 12/88 SBG\n*  PLEASE REMEMBER THAT AT LEAST DOUBLEWORD ALIGNMENT       * 12/88 SBG\n*  SHOULD BE OBSERVED.                                      * 12/88 SBG\n************************************************************* 12/88 SBG\n         ORG   WORKD+3796   ALIGN THE BUFFER NOT SO REAL WELL 12/88 SBG\nTAPEBUFF DS    CL(BUFFSIZE)             TAPE INPUT DATA BUFFER\nWORKLEN  EQU   *-WORKD\n         SPACE 2\n         ORG   OUTBUFF+1\n#UNLOAD  DS    CL8,1C                                         06/84 DBC\n#FILE    DS    CL4,2C                                         06/84 DBC\n#DSN     DS    CL17,2C\n#PSWD    DS    CL4,2C                                         06/84 DBC\n#CDATE   DS    CL6,2C\n#EDATE   DS    CL6,2C                                         06/84 DBC\n#INFOSRC DS    CL6,2C                                         06/84 DBC\n#RECFM   DS    CL5,2C                                         06/84 DBC\n#LRECL   DS    CL5,2C\n#BLKSIZE DS    CL5,2C\n#BLKCNT  DS    CL6,2C\n#DEN     DS    CL4,1C                                         06/84 DBC\n#TRTCH   DS    CL3,2C                                         06/84 DBC\n#LENGTH  DS    CL4,2C                                         06/84 DBC\n#CUMLEN  DS    CL4,2C                                         06/84 DBC\n#CREATOR DS    CL17                                           06/84 DBC\n         SPACE 2\n         PUSH  PRINT\n         PRINT GEN\n         SPACE 2\n         ORG   LABELS\n         SPACE 2\n         VOL   DSECT=NO\n         FL1   DSECT=NO\n         FL2   DSECT=NO\n         POP   PRINT\n         EJECT\nTAPEMAP  CSECT                          RESUME\n         SPACE 2\n         XYZZY NOGEN               SUPPRESS EXPANSION         06/84 DBC\n         SPACE 1                                              06/84 DBC\nTAPEDCB  DCB   DSORG=PS,MACRF=E,DDNAME=SYSUT1,DEVD=TA,EXLST=EXLST,     $\n               IOBAD=TAPEIOB\n         XYZZY GEN                                            09/84 DBC\n         SPACE 2\nTITLE1   DC    C'1VOL=                             TAPE ANALYSIS PROGRA$\n               M   (T A P E M A P)  V2.5          DAYDAYDAY  MON DD, 19$\n               YY  (YY.DDD)  HH:MM:SS'\nTTL1TIME EQU   *-9\nTTL1DATE EQU   TTL1TIME-23\nTTL1DAY  EQU   TTL1DATE-11\n         SPACE 2\nTITLE2   DC    C'                                                      $\n                                                                       $\n                                    '\n         SPACE 2\nDSFHDING DS    CL133\n         ORG   DSFHDING\n         DC    CL17'0'\nDSFDSN   EQU   *-DSFHDING\n         DC    CL44'-------------------DSNAME-------------------',C'-'\nDSFTRK   EQU   *-DSFHDING\n         DC    CL9'TRKS USED',C'-'                     TRACKS USED\nDSFRECFM EQU   *-DSFHDING\n         DC    CL5'RECFM',C'-'                         RECFM\nDSFLRECL EQU   *-DSFHDING\n         DC    CL5'LRECL',C'-'                         LRECL\nDSFBLKSZ EQU   *-DSFHDING\n         DC    CL7'BLKSIZE',C'-'                       BLKSIZE\nDSFDSORG EQU   *-DSFHDING\n         DC    CL5'DSORG',C'-'                         DSORG\nDSFCDATE EQU   *-DSFHDING\n         DC    CL7'CREATED',C'-'                       C-DATE\nDSFEDATE EQU   *-DSFHDING\n         DC    CL7'EXPIRES',C'-'                       E-DATE\nDSFSECUR EQU   *-DSFHDING\n         DC    CL8'SECURITY',C'-'                      SECURITY\n         ORG   ,\nSLKHDING DS    CL133\n         ORG   SLKHDING\n         DC    CL17'0'\nSLKMEM   EQU   *-SLKHDING\n         DC    CL10'NAME------.'          MEMBER\nSLKSTAT  EQU   *-SLKHDING\n         DC    CL4'STAT',C'-'             STATUS\nSLKREV   EQU   *-SLKHDING-1\n         DC    CL3'REV',C'-'              REVISION\nSLKINFO  EQU   *-SLKHDING\n         DC    CL10'---INFO---',C'-'      INFO\nSLKTYPE  EQU   *-SLKHDING\n         DC    CL8'--TYPE--',C'-'         TYPE\nSLKACTST EQU   *-SLKHDING-1\n         DC    CL7'--ACTST',C'-'          ACTST\nSLKDELST EQU   *-SLKHDING-1\n         DC    CL7'--DELST',C'-'          DELST\nSLKBLKS  EQU   *-SLKHDING-1\n         DC    CL5'-BLKS',C'-'            BLOCKS\nSLKCREAT EQU   *-SLKHDING\n         DC    CL8'-CREATED',C'-'         CREATE DATE\nSLKUPD   EQU   *-SLKHDING\n         DC    CL8'-UPDATED'              LAST UPDATE DATE\n         ORG   ,\n         SPACE 2\n         XYZZY NOGEN                                          09/84 DBC\n         SPACE 1                                              09/84 DBC\nSYSIN    DCB  DSORG=PS,MACRF=GM,DDNAME=SYSIN,LRECL=80,EODAD=EOD,BUFNO=1\n         SPACE 2\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,LRECL=133,            $\n               RECFM=FBA,EXLST=PRTEXLST\n         SPACE 2\nSYSPRNT2 DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRNT2,LRECL=133,            $\n               RECFM=FBA,EXLST=PRTEXLST\n         SPACE 1                                              06/84 DBC\n         XYZZY GEN                 RESTORE EXPANSIONS         06/84 DBC\nCOLHEAD1 DC    CL133' '            1ST TITLE LINE             06/84 DBC\n         ORG   COLHEAD1+1          RELOCATE BACK              06/84 DBC\n         DC    CL8'RELOAD',C' '    #UNLOAD                    06/84 DBC\n         DC    CL4'FILE',C'  '     #FILE                      06/84 DBC\n         DC    CL17' ',C'  '       #DSN                       06/84 DBC\n         DC    CL4'PSWD',C'  '     #PSWD                      06/84 DBC\n         DC    CL6' ',C'  '        #CDATE                     06/84 DBC\n         DC    CL6' ',C'  '        #EDATE                     06/84 DBC\n         DC    CL6' INFO',C'  '    #INFOSRC                   06/84 DBC\n         DC    CL5' ',C'  '        #RECFM                     06/84 DBC\n         DC    CL5' ',C'  '        #LRECL                     06/84 DBC\n         DC    CL5'BLOCK',C'  '    #BLKSIZE                   06/84 DBC\n         DC    CL6' BLOCK',C'  '   #BLKCNT                    06/84 DBC\n         DC    CL3' ',C'  '        #DEN                       06/84 DBC\n         DC    CL3' ',C'  '        #TRTCH                     06/84 DBC\n         DC    CL4'LNTH',C'  '     #LENGTH                    06/84 DBC\n         DC    CL4'TOTL',C'  '     #CUMLEN                    06/84 DBC\n         DC    C'CREATOR'          #CREATOR                   06/84 DBC\n         ORG   ,                   RESTORE                    06/84 DBC\n         SPACE 3                                              06/84 DBC\nCOLHEAD2 DC    CL133' '            2ND TITLE LINE             06/84 DBC\n         ORG   COLHEAD2+1          RELOCATE BACK              06/84 DBC\n         DC    CL8'FORMAT',C' '    #UNLOAD                    06/84 DBC\n         DC    CL4'SEQ#',C'  '     #FILE                      06/84 DBC\n         DC    CL17'DATASET NAME',C'  ' #DSN                  06/84 DBC\n         DC    CL4'REQD',C'  '     #PSWD                      06/84 DBC\n         DC    CL6'C-DATE',C'  '   #CDATE                     06/84 DBC\n         DC    CL6'E-DATE',C'  '   #EDATE                     06/84 DBC\n         DC    CL6'SOURCE',C'  '   #INFOSRC                   06/84 DBC\n         DC    CL5'RECFM',C'  '    #RECFM                     06/84 DBC\n         DC    CL5'LRECL',C'  '    #LRECL                     06/84 DBC\n         DC    CL5' SIZE',C'  '    #BLKSIZE                   06/84 DBC\n         DC    CL6' COUNT',C'  '   #BLKCNT                    06/84 DBC\n         DC    CL3'DEN',C'  '      #DEN                       06/84 DBC\n         DC    CL3'TRT',C'  '      #TRTCH                     06/84 DBC\n         DC    CL4'(FT)',C'  '     #LENGTH                    06/84 DBC\n         DC    CL4'LNTH',C'  '     #CUMLEN                    06/84 DBC\n         DC    C'JOBNAME/STEPNAME' #CREATOR                   06/84 DBC\n         ORG   ,                   RESTORE                    06/84 DBC\n         SPACE 3                                              06/84 DBC\n         EJECT\nERR#LIST DC    0F'0'                                                U15\n*                                                                   U15\n*  ERROR MSGS FOR EACH SENSE BIT FOR 3420 TAPE DRIVES               U15\n*                                                                   U15\n         SPACE 1\n*** BYTE 0                       BIT                                U15\n         DC    C'CMD REJ   '      0     80                          U15\n         DC    C'INT REQ   '      1     40                          U15\n         DC    C'BUS OUT CK'      2     20                          U15\n         DC    C'EQC CHK   '      3     10                          U15\n         DC    C'DATA CHK  '      4     08                          U15\n         DC    C'OVERRUN   '      5     04                          U15\n         DC    C'WORD CNT 0'      6     02                          U15\n         DC    C'DATA CNVTR'      7     01                          U15\n         SPACE 1\n*** BYTE 1                       BIT                                U15\n         DC    C'NOISE     '      0     80                          U15\n         DC    C'SEL+RDY+NB'      1     40                          U15\n         DC    C'NOT READY '      2     20                          U15\n         DC    C'7 TRK FEAT'      3     10                          U15\n         DC    C'@ LOAD PT '      4     08                          U15\n         DC    C'WRITE STAT'      5     04                          U15\n         DC    C'FILE PROT '      6     02                          U15\n         DC    C'NOT CAPABL'      7     01                          U15\n         SPACE 1\n*** BYTE 2                       BIT                                U15\n         DC    C'TIE BIT 0 '      0     80                          U15\n         DC    C'TIE BIT 1 '      1     40                          U15\n         DC    C'TIE BIT 2 '      2     20                          U15\n         DC    C'TIE BIT 3 '      3     10                          U15\n         DC    C'TIE BIT 4 '      4     08                          U15\n         DC    C'TIE BIT 5 '      5     04                          U15\n         DC    C'TIE BIT 6 '      6     02                          U15\n         DC    C'TIE BIT 7 '      7     01                          U15\n         SPACE 1\n*** BYTE 3                       BIT                                U15\n         DC    C'R/W VRC   '      0     80                          U15\n         DC    C'MT/LRC    '      1     40                          U15\n         DC    C'SKEW      '      2     20                          U15\n         DC    C'END DC/CRC'      3     10                          U15\n         DC    C'ENV/ECC   '      4     08                          U15\n         DC    C'1600 BPI  '      5     04                          U15\n         DC    C'BACKWARD  '      6     02                          U15\n         DC    C'C/P COMPAR'      7     01                          U15\n         SPACE 1\n*** BYTE 4                       BIT                                U15\n         DC    C'MP H E    '      0     80                          U15\n         DC    C'DROP READY'      1     40                          U15\n         DC    C'TAPE INDIC'      2     20                          U15\n         DC    C'W T VRC   '      3     10                          U15\n         DC    C'MICROPGM  '      4     08                          U15\n         DC    C'LWR       '      5     04                          U15\n         DC    C'UNIT CHECK'      6     02                          U15\n         DC    C'RSRVD RPQ '      7     01                          U15\n         SPACE 1\n*** BYTE 5                       BIT                                U15\n         DC    C'NEW SUBSYS'      0     80                          U15\n         DC    C'NEW SUBSYS'      1     40                          U15\n         DC    C'WTM CHECK '      2     20                          U15\n         DC    C'ID BURST  '      3     10                          U15\n         DC    C'START READ'      4     08                          U15\n         DC    C'PART''L REC'     5     04                          U15\n         DC    C'POSTAMBLE '      6     02                          U15\n         DC    C'RSRVD RPQ '      7     01                          U15\n         SPACE 1\n*** BYTE 6                       BIT                                U15\n         DC    C'7 TRK UNIT'      0     80                          U15\n         DC    C'WRT CURR  '      1     40                          U15\n         DC    C'DUAL DEN  '      2     20                          U15\n         DC    C'NOT 1600  '      3     10                          U15\n         DC    C'MOD 4,6,8 '      4     08                          U15\n         DC    C'MD 5,6,7,8'      5     04                          U15\n         DC    C'MOD 3,4   '      6     02                          U15\n         DC    C'MD 3,4,7,8'      7     01                          U15\n         SPACE 1\n*** BYTE 7                       BIT                                U15\n         DC    C'LAMP FAIL '      0     80                          U15\n         DC    C'BOTM LEFT '      1     40                          U15\n         DC    C'BOTM RIGHT'      2     20                          U15\n         DC    C'RESET KEY '      3     10                          U15\n         DC    C'DSE       '      4     08                          U15\n         DC    C'ERASE HEAD'      5     04                          U15\n         DC    C'AIR BEARNG'      6     02                          U15\n         DC    C'LOAD FAIL '      7     01                          U15\n         SPACE 1\n*** BYTE 8                       BIT                                U15\n         DC    C'IBG       '      0     80                          U15\n         DC    C'SPARE ?   '      1     40                          U15\n         DC    C'SPARE ?   '      2     20                          U15\n         DC    C'EARLY READ'      3     10                          U15\n         DC    C'CTL BURST '      4     08                          U15\n         DC    C'SLOW RD B '      5     04                          U15\n         DC    C'SLOW RD E '      6     02                          U15\n         DC    C'VELOCITY  '      7     01                          U15\n         SPACE 1\n*** BYTE 9                       BIT                                U15\n         DC    C'6250 CORR '      0     80                          U15\n         DC    C'WRT VEL CH'      1     40                          U15\n         DC    C'CHAN BUFF '      2     20                          U15\n         DC    C'CRC III   '      3     10                          U15\n         DC    C'6250 FEAT '      4     08                          U15\n         DC    C'SPARE ?   '      5     04                          U15\n         DC    C'SPARE ?   '      6     02                          U15\n         DC    C'TCU RSRVD '      7     01                          U15\n         EJECT                                                12/88 SBG\n************************************************************* 12/88 SBG\n*    THE FOLLOWING LITERALS ARE MOVED INTO THE WORKAREA     * 12/88 SBG\n*    DSECT.  THE REASON IS THAT THE 3RD BASE REGISTER HAS   * 12/88 SBG\n*    BEEN EXCEEDED IN THE COURSE OF PROGRAM MODIFICATIONS,  * 12/88 SBG\n*    AND SOME LITERALS WHICH WERE ADDRESSABLE BY THE BASE   * 12/88 SBG\n*    REGISTERS, HAVE NOW BEEN MOVED TO THE WORK AREA DSECT. * 12/88 SBG\n*    THEREFORE, ANY CHANGES TO THAT PART OF THE WORKAREA    * 12/88 SBG\n*    DSECT MUST BE REFLECTED BY CORRESPONDING CHANGES       * 12/88 SBG\n*    HERE.                                                  * 12/88 SBG\n************************************************************* 12/88 SBG\n         DS    0D                  ALIGNMENT                  12/88 SBG\nLITMOVES DC    C'THISFILEHASBEENDELETEDORISRESERVED'  NEWVERS 12/88 SBG\n         DC    C'DELETEDBYPREVIOUSVERSIONOFTHISTAPE'  OLDVERS 12/88 SBG\n         DC    C'+** REQUESTED VOL=\"123456\" **'\n         SPACE 1\n         DC    C' *** THIS IS VOLUME # XXXX OF THE ABOVE MULTIPLE VOLUM$\n               E FILE.  FIRST VOLUME WAS XXXXXX.'\n         SPACE 1\n         DC    C' UNKNOWN PARM OPTION AT COL=XXX.  ANY REMAINING PARM I$\n               GNORED.'\n         DC    XL12'FFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    C'//MVSMODS'       ARNIE CASINGHINO'S JOBNAME  12/88 SBG\n         DC    C'* VERSION'       DATE OF CBT TAPE - PREFIX   12/88 SBG\n         DC    C'VERSION #'       VERSION OF CBT TAPE PREFIX  12/88 SBG\n         DC    C'VER        -  -  '   DISPLAY FOR CBTHEADER   12/88 SBG\n************************************************************* 12/88 SBG\n         DC    C'IEBCOPY'          UNLOADER NAMES             12/88 SBG\n         DC    C'IEHMOVE'                                     12/88 SBG\n         DC    C'IEBISAM'                                     12/88 SBG\n         DC    C'IEHDASDR'                                    12/88 SBG\n         DC    C'IEBUPXXX'         IEBUPDTE OR IEBUPDAT       12/88 SBG\n         DC    C'FDR   '                                      12/88 SBG\n         DC    C'FDRDSF'                                      12/88 SBG\n         DC    C'FDR???'                                      12/88 SBG\n         DC    C'SLICKMNG'                                    12/88 SBG\n         DC    C'TAPEMAP'                                     12/88 SBG\n         DC    C'SMPPTFIN'                                    12/88 SBG\n         DC    C'CBT973'                                      12/88 SBG\n         DC    C'CBTEMPTY'         EMPTY FILE ON THE CBT TAPE 12/88 SBG\n         DC    C'CBT DOC '         DOC FILE FOR THE CBT TAPE  12/88 SBG\n         DC    X'33008003'        UNIT TYPE FOR 3420C CARTS   09/89\u00acSBG\n         DS    0F                 ALIGNMENT                   12/88 SBG\n         DC    F'32720'           BLOCK SIZE OF CBT DOC FILE  12/88 SBG\n         DC    C'-*****  ONE OR MORE FILES HAVE DENSITY INDICATED INCOR$\n               RECTLY IN LABELS.  ALL FILES ARE WRITTEN AT XXXX BPI  **$\n               ***'\nLITMVLEN EQU   *-LITMOVES                                     12/88 SBG\n************************************************************* 12/88 SBG\n*    END OF LITERAL MOVES.                                  * 12/88 SBG\n************************************************************* 12/88 SBG\n         EJECT                                                12/88 SBG\n*************************************************************  1/93 RT\n*    TODAY CSECT                                            *  1/93 RT\n*                                                           *  1/93 RT\n*   PARAMETERS:                                             *  1/93 RT\n*     DATE FIELD (LEN 22)                                   *  1/93 RT\n*     DAY FIELD (LEN 9)                                     *  1/93 RT\n*     TIME FIELD (LEN 9)                                    *  1/93 RT\n*                                                           *  1/93 RT\n*                                                           *  1/93 RT\n*************************************************************  1/93 RT\nTODAY    CSECT                                                 1/93 RT\n         DROP  R12,R11,R7,R9,R13                               1/93 RT\n         USING *,R15                                           1/93 RT\n         B     TODARND                                         1/93 RT\n         DC    AL1(25)                                         1/93 RT\n         DC    CL8'TODAY'                                      1/93 RT\n         DC    CL8'&SYSDATE'                                   1/93 RT\n         DC    CL8'&SYSTIME'                                   1/93 RT\nTODARND  DS    0H                                              1/93 RT\n         SAVE  (14,12)                                         1/93 RT\n         DROP  R15                                             1/93 RT\n         USING TODAY,R4                                        1/93 RT\n         LM    R5,R7,0(R1)          LOAD THE PARAMETER PTRS    1/93 RT\n         LR    R4,R15                                          1/93 RT\n         LA    R1,TODSAVE                                      1/93 RT\n         ST    R1,8(,R13)           FWD SAVE-AREA CHAIN PTR    1/93 RT\n         ST    R13,4(,R1)           BKWD SAVE-AREA CHAIN PTR   1/93 RT\n         LR    R13,R1               NEW SAVE-AREA ADDR         1/93 RT\n         TIME  DEC                      GET TIME\n         ST    R0,TODDWT                PUT TIME INTO WORK AREA\n         ST    R1,TODPDAT               PUT DATE INTO WORK AREA\n         MVC   TOD1DDT(40),TOD1DDT-1    BLANK THE DATE, DAY, TIME\n         AP    TODPDAT,=P'1900000'      CONVERT CCYY TO YYYY   6/03 JCE\n         UNPK  TOD1DATE+14(7),TODPDAT(4) UNPK THE DATE         6/03 JCE\n         OI    TOD1DATE+20,C'0'         FIX THE SIGN\n         MVC   TOD1DATE+8(4),TOD1DATE+14 SAVE YEAR YYYY        6/03 JCE\n         MVC   TOD1DATE+15(2),TOD1DATE+16   MOVE THE YEAR OVER 6/03 JCE\n         MVI   TOD1DATE+17,C'.'         PUT IN THE DOT\n         MVI   TOD1DATE+6,C','          PUT IN THE COMMA\n         MVI   TOD1DATE+21,C')'         PUT IN THE PARENTHESES\n         MVI   TOD1DATE+14,C'('\n*        LEAP YEAR DETERMINATION BELOW BREAKS IN 2100          6/03 JCE\n         TM    TODPDAT+1,X'01'          POSSIBLE LEAP YEAR?\n         BO    TODNOLP                   NO (ODD YEAR) - NOT LEAP\n         TM    TODPDAT+1,X'12'          DIVISIBLE BY 4?\n         BM    TODNOLP                   NO - NOT LEAP YEAR\n         MVI   MONTHS+7,29              FEB HAS 29 DAYS THIS YEAR\nTODNOLP  MVC   TODDWD+6(2),TODPDAT+2    COPY DDDF\n         XC    TODDWD(6),TODDWD         CLEAR BEGINNING\n         CVB   R0,TODDWD                GET DAY OF YEAR IN BINARY\n         LA    R15,MONTHS               POINT TO TABLE\nTODFINMO SH    R0,0(,R15)               SUB NUMBER OF DAYS THIS MONTH\n         BNP   TODGOTMO                 HAVE MONTH\n         LA    R15,6(,R15)              NEXT TABLE ENTRY\n         B     TODFINMO                 KEEP LOOKING\nTODGOTMO MVC   TOD1DATE(3),2(R15)       MOVE NAME OF MONTH\n         AH    R0,0(,R15)               GET BACK CORRECT RESIDUAL\n         CVD   R0,TODDWD\n         UNPK  TOD1DATE+4(2),TODDWD+6(2)  DAY OF MONTH\n         OI    TOD1DATE+5,C'0'          FIX SIGN\n         MVC   TOD1DATE+10(2),TOD1DATE+15 MOVE IN YEAR\n*        REWORK OF DAY-OF-WEEK CALC USING A SIMPLER, MORE      6/03 JCE\n*    OBVIOUS ALGORITHM BASED ON LILIAN DATES.                  6/03 JCE\n*    DAY 1 LILIAN = FRIDAY, THUS MOD(LILIANDAY+4,7) = 0...6    6/03 JCE\n*    CORRESPONDING TO SUN ... SAT                              6/03 JCE\n*     FOR DATE YYYY.DDD, IF X = YYYY-1201 THEN                 6/03 JCE\n*    LILIANDAY + 4 = FLOOR(X*365.25) - 139444                  6/03 JCE\n*                           - FLOOR(X/100)                     6/03 JCE\n*                           + FLOOR(X/400)   + DDD  + 4        6/03 JCE\n*    THE ABOVE FORMULA AND CODE IS BORROWED FROM A DATE        6/03 JCE\n*    CONVERSION ROUTINE D1MADRES WRITTEN BY J C EWING AT       6/03 JCE\n*    DATA-TRONICS CORP IN AUGUST 1991, AND IS A MATHEMATICAL   6/03 JCE\n*    SIMPLIFICATION OF THE ALGORITHM PUBLISHED BY B.G. OHMS IN 6/03 JCE\n*    'COMPUTER PROCESSING OF DATES OUTSIDE THE TWENTIETH       6/03 JCE\n*    CENTURY', IBM SYSTEMS JOURNAL, VOL 25 NO 2, 1986, P. 247. 6/03 JCE\n         ZAP   TODDWD,=P'0'                                    6/03 JCE\n         MVO   TODDWD,TODPDAT(2)  00 00 00 00 00 0Y YY YC      6/03 JCE\n         CVB   R1,TODDWD          YEAR IN BINARY               6/03 JCE\n         SH    R1,=H'1201'        YEAR - 1201                  6/03 JCE\n         LR    R15,R1                                          6/03 JCE\n         MH    R15,=AL2((36525*4)/100)  (Y-1201)*365.25*4      6/03 JCE\n         SRA   R15,2               R15= FLOOR((Y-1201)*365.25) 6/03 JCE\n         S     R15,=F'139440'      UNADJ DAYS + 4              6/03 JCE\n         SR    R0,R0               COMPUTE CENTURY ADJUSTMENT  6/03 JCE\n         D     R0,=F'100'          R1=CENTURY LEAP DAYS        6/03 JCE\n         SR    R15,R1              SUBTRACT CENTURY LEAP DAYS  6/03 JCE\n         SRA   R1,2                400-YR LEAP DAYS            6/03 JCE\n         AR    R15,R1              ADD BACK 400 YR LEAP DAYS   6/03 JCE\n         ZAP   TODDWD,TODPDAT+2(2) EXTRACT DDD                 6/03 JCE\n         CVB   R1,TODDWD           R1=DDD                      6/03 JCE\n         AR    R15,R1              DAYS FROM OCT 15, 1582 + 4  6/03 JCE\n* Z=MOD(D,7)+1\n         XR    R14,R14                  CLEAR FOR DIVIDE\n         D     R14,=F'7'                GET MOD(D,7) IN R4=Z\n         MH    R14,=Y(L'DAYS)           OFFSET INTO TABLE\n         LA    R14,DAYS(R14)            POINT TO DAY IN TABLE\n         MVC   TOD1DAY(L'DAYS),0(R14)   DAY TO OUTPUT LOCATION\n         OI    TODDWT+3,X'0F'           FIX THE SIGN\n         MVC   TOD1TIME(9),=X'4021207A20207A2020'    ' DD:DD:DD'\n         ED    TOD1TIME(9),TODDWT\n         MVC   0(22,R5),TOD1DATE                               1/93 RT\n         MVC   0(9,R6),TOD1DAY                                 1/93 RT\n         MVC   0(9,R7),TOD1TIME                                1/93 RT\n         L     R13,4(,R13)                                     1/93 RT\n         MVI   12(R13),X'FF'        INVALIDATE FWD-CHAIN       1/93 RT\n         RETURN (14,12),RC=0                                   1/93 RT\n         SPACE 1\nDAYS     DAYS  LEFT                                                 THO\n         SPACE 1                                                    THO\nMONTHS   MONTHS                                                     THO\n         LTORG\n         DROP  R4\nTODSAVE  DS    9D\nTODDWT   DS    D                    PACKED TIME\nTODDWD   DS    D                    PACKED DATE WORK FIELD\nTODPDAT  DS    F                    PACKED DATE\n         DC    CL8' '\nTOD1DDT  DS    0CL40          DATE, DAY, TIME TAKEN TOGETHER\nTOD1DATE DC    CL22' '\nTOD1DAY  DC    CL9' '\nTOD1TIME DC    CL9' '\n         DC    CL8' '\n         EJECT\n         XYZZY NOGEN\n         DCBD  DSORG=PS,DEVD=DA                                     THO\nUCB      DSECT                                                      THO\n         IEFUCBOB                                                   THO\n         AIF   ('&DEBX' EQ 'YES').NEWDEB1                           SBG\n         IEZDEB                                                     THO\n         AGO   .OLDDEB1                                             SBG\n.NEWDEB1 ANOP                                                       SBG\n         IECTDEBX                                                   SBG\n.OLDDEB1 ANOP                                                       SBG\n         END   TAPEMAP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TAPEMAP$": {"ttr": 2819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x05\\x000\\x01\\x00\\x06\\x9f\\x01\\x19\\x02?\\x15\\x10\\x00\\x1d\\x00\\x1c\\x00\\x00\\xc1\\xe2\\xd4\\xd3\\xc9\\xd5\\xd2@@@'", "ispf": {"version": "02.05", "flags": 0, "createdate": "2000-03-09T00:00:00", "modifydate": "2019-01-23T15:10:30", "lines": 29, "newlines": 28, "modlines": 0, "user": "ASMLINK"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB              ==> SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN              ==> SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT497.FILE299(TAPEMAP)\n//SYSUT1   DD UNIT=SYSALLDA,SPACE=(CYL,(2,1)),VOL=SER=WORK03\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSALLDA,SPACE=(TRK,(9,9)),DISP=(,PASS),\n//            DCB=BLKSIZE=3200,VOL=SER=WORK03,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.TAPEMAP.LOADLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.TAPEMAP.LOADLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(0)\n SETSSI  CB497299\n NAME    TAPEMAP(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TAPEMAPM": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x0e\\x00\\x15\\x00\\x93\\x19\\x7f\\x01\\x19\\x02?\\x12X\\x10&\\x0f~\\x006\\xe2K\\xd4\\xe8\\xc5\\xd9\\xe2@@@'", "ispf": {"version": "02.14", "flags": 0, "createdate": "1993-07-16T00:00:00", "modifydate": "2019-01-23T12:58:15", "lines": 4134, "newlines": 3966, "modlines": 54, "user": "S.MYERS"}, "text": "*---------------------------------------------------------------*   SBG\n* MINOR CHANGE BY SAM GOLOB 2019/01/23 VERSION 2.5.1            *   SBG\n*                                                               *   SBG\n* CHANGED VERSION NUMBER TO 2.5.1 TO DIFFERENTIATE THIS VERSION *   SBG\n* WHICH CONTAIN'S STEVE MYERS' FIXES FOR DATASET SEQUENCE       *   SBG\n* NUMBERS >9999 AND SUPPORTED BY IBM, FROM THE OTHER 2.5        *   SBG\n* VERSION, WHICH DOES NOT SUPPORT DATASET SEQ. NUMBERS >9999.   *   SBG\n*---------------------------------------------------------------*   DRK\n* CHANGES BY JOHN KALINICH 2007/04/26  VERSION 2.5              *   DRK\n*                                                               *   DRK\n* ADDED NEW FDR DEVICE TYPES AND CODES TO TABLE.                *   DRK\n*---------------------------------------------------------------*   JSM\n* CHANGES BY STEVE MYERS 2006/06/23    VERSION 2.4              *   JSM\n*                                                               *   JSM\n* SUPPORT FILE SEQUENCE NUMBERS > 9999.  THESE FILE SEQUENCE    *   JSM\n* NUMBERS ARE REPRESENTED BY A ? IN THE FIRST BYTE OF FL1FILSQ, *   JSM\n* FOLLOWED BY THE BINARY FILE SEQUENCE NUMBER IN THE REMAINING  *   JSM\n* 3 BYTES.  THIS CHANGE ALSO EXPANDS THE DISPLAY FIELD FOR THE  *   JSM\n* FILE SEQUENCE NUMBER TO 5 BYTES.  THE MAXIMUM ALLOWED FILE    *   JSM\n* SEQUENCE NUMBER IS 65536.                                     *   JSM\n*---------------------------------------------------------------*\n* CHANGES BY SAM GOLOB   2005/10/31    VERSION 2.3              *\n*                                                               *\n* IEBCOPY RECOGNITION CODE SHOULD NOT DEPEND ON FIRST BYTE.     *\n* IBM IS USING FLAGS THERE FOR IEBCOPY UNLOADING PDSE'S.        *\n*---------------------------------------------------------------*\n* CHANGES BY SAM GOLOB   2005/10/11    VERSION 2.3              *\n*                                                               *\n* TESTED UCB TYPE BYTE 4 FOR THE X'80' BIT INSTEAD OF X'80' AND *\n* X'81' EXACTLY, IN DETERMINING IF A TAPE IS A CARTRIDGE OR     *\n* NOT.  THIS ALLOWS DETECTION OF 3590'S AS CARTRIDGES.          *\n*---------------------------------------------------------------*\n* CHANGES BY SAM GOLOB   2005/02/02    VERSION 2.2              *\n*                                                               *\n* ALLOWED FOR SMP/E CHANGES FOR RECENT SYSTEM LEVELS. Z/OS 1.5  *\n* A ++ASSIGN CARD ON THE TOP OF AN SMPPTFIN FILE USED TO THROW  *\n* OFF THE SMPPTFIN FORMAT DETECTION.  NOW A FEW DIFFERENT SMP/E *\n* CONTROL CARDS WILL INDICATE THE PRESENCE OF AN SMPPTFIN FILE, *\n* BUT THEY WILL NOT CAUSE THE PRINT OF SYSMOD NUMBERS IN THE    *\n* SYSPRNT2 DD NAME.  THESE DELIBERATELY DO NOT INCLUDE SUCH     *\n* SMP/E CONTROL CARDS THAT WOULD NORMALLY OCCUR IN THE MIDDLE   *\n* OF A PTF OR OTHER SYSMOD, SUCH AS:  ++MOD, ++MAC, ++SRC,      *\n* ++MACUPD, ++SRCUPD, OR THE ++DATA TYPE OF CARDS.  ++JCLIN     *\n* IS INCLUDED IN THE FOLLOWING LIST, EVEN THOUGH IT NORMALLY    *\n* WOULD OCCUR WITHIN A PTF.  THE REASON FOR THAT IS THAT IT IS  *\n* POSSIBLE FOR A PURE ++JCLIN STREAM TO BE INPUTTED TO SMP/E,   *\n* SO SUCH A FILE SHOULD BE MARKED AS THOUGH IT IS IN SMPPTFIN   *\n* FORMAT, PROVIDED THAT A ++JCLIN CARD IS INSERTED AT THE TOP   *\n* OF THE FILE.                                                  *\n*                                                               *\n*   LIST OF SUCH SUPPORTED SMP/E CONTROL CARDS CURRENTLY....    *\n*  ++ ASSIGN                                                    *\n*  ++ HOLD                                                      *\n*  ++ RELEASE                                                   *\n*  ++ FEATURE                                                   *\n*  ++ PRODUCT                                                   *\n*  ++ NULL                                                      *\n*  ++ JCLIN                                                     *\n*                                                               *\n*---------------------------------------------------------------*\n* CHANGES BY PETER MCFARLAND  02/12/04                         2/04PMCF\n* WHEN AN I/O OCCURS (ECB=X'41') AN ATTEMPT TO GET THE UCB     2/04PMCF\n* EXTENSION IS MADE FOR THE I/O SENSE BYTES.  IF THE UCBS ARE  2/04PMCF\n* GENED TO BE ABOVE THE 16M LINE THEN THE ADDR. OF THE UCB-EX  2/04PMCF\n* IN THE UCB IS NOT VALID. S0C4 ABENDS OCCUR IN RECOVERY.      2/04PMCF\n* CODE WAS ADDED TO BRANCH AROUND THIS SITUATION SKIPPING THE  2/04PMCF\n* SENSE BYTES DISPLAY.  SEE MSG IOS000I FOR SENSE BYTES. PMCF  2/04PMCF\n*------------------------------------------------------------  2/04PMCF\n* CHANGES BY JOEL C. EWING 2003/06/25:                         6/03 JCE\n* CHANGED DAY-OF-WEEK CALCULATION IN TODAY CSECT TO USE        6/03 JCE\n* SIMPLER AND HOPEFULLY CORRECT ALGORITHM BASED ON LILIAN      6/03 JCE\n* DATES.                                                       6/03 JCE\n*------------------------------------------------------------  6/03 JCE\n* ELIMINATED THE X'00' IN THE REPORT HEADERS, BY BLANKING OUT SBG 06/01\n* THE DATE, DAY AND TIME WORK FIELDS IN THE TODAY CSECT.      SBG 06/01\n*------------------------------------------------------------  2/00 JCH\n* CLUDGED DAY OF WEEK 2 DAYS LATER FOR Y2K, IN TODAY CSECT.   SBG 03/00\n*------------------------------------------------------------  2/00 JCH\n* CHANGES BY JOHN C HALLGREN  02/10/00                         2/00 JCH\n*                                                              2/00 JCH\n* SET HDR2 DENSITY TO ACTUAL IF NO HDR2 FOUND (DOS SL, RS6000) 2/00 JCH\n*------------------------------------------------------------  3/94 SBG\n* CHANGES BY SAM GOLOB  3/94:                                  3/94 SBG\n*                                                              3/94 SBG\n*   CONVUNIT FIXED FOR 3390'S.                                 3/94 SBG\n*   IHDASDR1 FIXED FOR 3390'S BUT PROBABLY NOT NECESSARY.      3/94 SBG\n*------------------------------------------------------------  7/93 SBG\n*                                                              6/93 RT\n* CHANGES BY RON TANSKY 6/93:                                  6/93 RT\n*                                                              6/93 RT\n* ADDED CHECK FOR IEBCOPY PDS/E HEADER                         6/93 RT\n*                                                              6/93 RT\n*                                                              1/93 RT\n* CHANGES BY RON TANSKY 1/93:                                  1/93 RT\n*                                                              1/93 RT\n*  GOT RID OF THE ENT (ENTRY) MACRO.  IT'S MASSIVE OVERKILL IN 1/93 RT\n*  THIS PGM.  REPLACED IT BY SIMPLE INLINE CODE.  THIS SAVES   1/93 RT\n*  14 PAGES WORTH OF LISTING (AT 80 LINES PER PAGE).           1/93 RT\n*                                                              1/93 RT\n*  GOT RID OF OTHER UNUSED MACROS.                             1/93 RT\n*                                                              1/93 RT\n*  ADDED CAPABILITY OF MAPPING DOS SL TAPES.                   1/93 RT\n*  CHANGED WAY PGM RECOGNIZES 'IEHINITT' TAPES, AS IT WAS      1/93 RT\n*  CALLING DOS SL TAPES 'IEHINITT'.                            1/93 RT\n*                                                              1/93 RT\n*  CHANGED DEFAULT TO 80 LINES PER PAGE (&LINEPPG)             1/93 RT\n*                                                              1/93 RT\n*  CHANGED LINE-COUNTER-2 TO STORAGE INSTEAD OF A REGISTER.    1/93 RT\n*                                                              1/93 RT\n*  CHANGED SOME REGISTER EQUATES TO STANDARD (RNN).            1/93 RT\n*                                                              1/93 RT\n*  ADDED A VERSION NUMBER TO THE TITLE PAGE.                   1/93 RT\n*                                                              1/93 RT\n*  MOVED THE CURRENT-DATE-AND-TIME ROUTINE TO ITS OWN CSECT.   1/93 RT\n*  CHANGED THE ROUTINE TO INLINE CODE RATHER THAN MACRO CALL.  1/93 RT\n*  MODIFIED THE ROUTINE TO HANDLE THE CENTURY.                 1/93 RT\n*                                                              1/93 RT\n*  ADDED A BASE REGISTER (R9).                                 1/93 RT\n*  BETWEEN MOVING THE DATE ROUTINE AND THE EXTRA BASE REG,     1/93 RT\n*  THIS SHOULD PROVIDE LOTS OF ROOM FOR EXPANSION.             1/93 RT\n*                                                              1/93 RT\n*  ADDED CONDITIONAL ASSEMBLY FOR MVS/XA SUPPORT.  SYMBOLIC    1/93 RT\n*  VARIABLE '&XA' IS SET TO 'L' OR 'S' TO GENERATE BAL         1/93 RT\n*  OR BAS INSTRUCTION, RESPECTIVELY                            1/93 RT\n*                                                              1/93 RT\n*------------------------------------------------------------ 12/88 SBG\n*  SOMEBODY SHOULD ADD SUPPORT FOR DFDSS TAPES.               12/88 SBG\n*------------------------------------------------------------ 11/88 SBG\n*  THIS PROGRAM, AS IT IS, IS SORELY IN NEED OF A NEW BASE    11/88 SBG\n*   REGISTER AND/OR RE-ARCHITECTING, SUCH AS BEING SPLIT INTO 11/88 SBG\n*   TWO SEPARATE MODULES.  FUTURE MODIFIERS, PLEASE BEAR      11/88 SBG\n*   THIS IN MIND.  THREE BASE REGISTERS ALMOST EXCEEDED.      11/88 SBG\n*                                                             12/88 SBG\n*  FOOTNOTE:  I WAS ABLE TO ADDRESS SEVERAL HUNDRED MORE      12/88 SBG\n*   BYTES BY MOVING SOME OF THE FIXED LITERALS TO THE WORK    12/88 SBG\n*   AREA DSECT.  THESE HAVE TO BE INITIALIZED IN THE GETMAINED12/88 SBG\n*   SPACE WITH EVERY EXECUTION OF THE PROGRAM.  AN EXACT COPY 12/88 SBG\n*   OF THESE LITERALS (WHICH ARE CLEARLY MARKED) IS PUT AT    12/88 SBG\n*   THE VERY END OF THE PROGRAM.  SEE LABEL \"LITMOVES\".       12/88 SBG\n*   LITMOVES IS ADDRESSABLE IN THE PROGRAM VIA AN ADCON.      12/88 SBG\n*                                                             12/88 SBG\n*  FUTURE MODIFIERS, PLEASE BEWARE OF THIS BEFORE             12/88 SBG\n*   ADDING NEW LITERALS.                                      12/88 SBG\n*------------------------------------------------------------ 11/88 SBG\n*  DO NOT GLOBALLY CHANGE MEANINGS OF ANY REGISTER EQUATES.   11/88 SBG\n*   UNLESS YOU ARE VERY VERY THOROUGH.                        11/88 SBG\n*------------------------------------------------------------ 11/88 SBG\nXYZZY    OPSYN PRINT               CUSTOMIZED PRINT CONTROL   06/84 DBC\nPRINT    OPSYN ANOP                SUPPRESS STD PRINT CONTROL 06/84 DBC\n*------------------------------------------------------------ 07/92 SBG\n*                                                             07/92 SBG\n*  *************                                              SBG 03/00\n*  * ATTENTION * YOU CAN USE IECTDEBX INSTEAD OF IEZDEB TO    SBG 03/00\n*  ************* SPECIFY DEB FIELDS.  I DON'T RECOMMEND THE   SBG 03/00\n*                IDEA.  IT IS BETTER TO CODE DEBX=NO.         SBG 03/00\n*                                                             SBG 03/00\n*   IEZDEB IS ALIVE AND WELL.  AT THE SP4 LEVEL, I THOUGHT    SBG 03/00\n*    IT WASN'T, SO I CODED THIS FLEXIBILITY.  BETTER TO       SBG 03/00\n*    LEAVE THINGS AS THEY ALWAYS WERE.                        SBG 03/00\n*                                                             SBG 03/00\n         GBLC  &DEBX                                          07/92 SBG\n*&DEBX   SETC  'YES'    'YES' TO USE IECTDEBX MACRO FOR DEB.  SBG 03/00\n&DEBX    SETC  'NO'     'NO'  TO USE IEZDEB   MACRO FOR DEB.  SBG 03/00\n*------------------------------------------------------------ 02/93 RT\n         GBLC  &XA                                            02/93 RT\n&XA      SETC  'L'      'L' TO USE NON-XA BAL INSTRUCTION     02/93 RT\n&XA      SETC  'S'      'S' TO USE     XA BAS INSTRUCTION     02/93 RT\n*                                                             07/92 SBG\n*------------------------------------------------------------ 07/92 SBG\nTAPEMAP  TITLE 'TAPE ANALYSIS PROGRAM  (T A P E M A P)'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*  THIS PROGRAM MAY NOT BE DISTRIBUTED WITHOUT PERMISSION OF THE      *\n*  AUTHOR.  ALTHOUGH THIS PROGRAM HAS BEEN EXTENSIVELY TESTED, AND    *\n*  IS IN USE IN A PRODUCTION ENVIRONMENT (MVT 21.8 ON A 360/91) AT    *\n*  UCLA'S OFFICE OF ACADEMIC COMPUTING (FORMERLY CAMPUS COMPUTING     *\n*  NETWORK), NO GUARANTEE IS MADE OF (OR RESPONSIBILITY ASSUMED FOR)  *\n*  CORRECT OR RELIABLE OPERATION.  WE MAY TRY TO HELP WITH PROBLEMS.  *\n*                                                                     *\n*  CONTACT:  CHRIS THOMAS  (213) 825-7424                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  THIS PROGRAM IS BASED ON THE PROGRAM TAPEINDX WRITTEN BY           *\n*  MICHAEL S. MAITEN OF THE UCLA COMPUTER CLUB.                       *\n*  IT HAS BEEN ALMOST COMPLETELY REWRITTEN BY LEONARD D. WOREN OF     *\n*  THE UCLA COMPUTER CLUB.                                            *\n*                                                                     *\n*  MODIFIED  1979 BY WALT FARRELL, RAINIER NATIONAL BANK              *\n*                                                           * 09/84 DBC\n*  HI GUYS. GEE, CAN I PLAY TOO?                            * 09/84 DBC\n*                                                                     *\n***********************************************************************\n         EJECT ,                                              06/87 THO\n************************************************************* 07/92 SBG\n*                                                             07/92 SBG\n* LAST CHANGE DATE - JUL. 17, 1992, BY SAM GOLOB.             07/92 SBG\n*                                                             07/92 SBG\n*  07/17/92  -  FIXED 2 PROBLEMS.  NEW IEBCOPY FOR NL TAPE    07/92 SBG\n*               FILES WASN'T WORKING BECAUSE THE HEADER RECD  07/92 SBG\n*               EXPANDED BY 4 BYTES, AND ITS SIZE WAS BEING   07/92 SBG\n*               CHECKED AT LABEL \"NL$NMOVE\".                  07/92 SBG\n*                                                             07/92 SBG\n*               CONDITIONAL ASSEMBLY FOR MVS SP4 SYSTEMS      07/92 SBG\n*               WHICH HAVE DEB EXTENSION SUPPORT AND IEZDEB   07/92 SBG\n*               MACRO ISN'T THERE ANY MORE.  I USED IECTDEBX. 07/92 SBG\n*               PLEASE SET GLOBAL VARIABLE &DEBX TO 'YES' OR  07/92 SBG\n*               'NO' ABOVE.                                   07/92 SBG\n*                                                             07/92 SBG\n************************************************************* 07/92 SBG\n         EJECT ,                                              07/92 SBG\n************************************************************* 11/88 SBG\n*                                                             11/88 SBG\n* LAST CHANGE DATE - NOV. 28, 1988, BY SAM GOLOB.             11/88 SBG\n*                                                             11/88 SBG\n*  INSERTED SUPPORT FOR ><ADD NAME= WITHIN IEBUPDTE UNLOADS.  11/88 SBG\n*  INSERTED GLOBAL VARIABLE FOR LINES-PER-PAGE ON REPORTS.    11/88 SBG\n*     SEE VARIABLE &LINEPPG.                                  11/88 SBG\n*  INSERTED SUPPORT FOR CBT973-COMPRESSED FILES.              11/88 SBG\n*                                                             11/88 SBG\n*  CBT973 SUPPORT MAKES IT POSSIBLE TO MEANINGFULLY MAP       11/88 SBG\n*  AND FIND ALMOST EVERYTHING ON THE CBT MVS MODS TAPE.       11/88 SBG\n*                                                             11/88 SBG\n*  IT ALSO HELPS IN FINDING IBM SOURCE MODULES IN CBT973-     11/88 SBG\n*  COMPRESSED IEBUPDTE FORMAT.                                11/88 SBG\n*                                                             11/88 SBG\n*  SEE CBT TAPE FILES 188 AND 189 FOR A DESCRIPTION OF THIS   11/88 SBG\n*  METHOD OF SQUEEZING MANY IBM SOURCE TAPE REELS TOGETHER    11/88 SBG\n*  ON A FEW LARGE REELS.  TAPEMAP WILL NOW SHOW MEMBER NAMES  11/88 SBG\n*  ON THE CBT973-COMPRESSED LARGE REELS.                      11/88 SBG\n*                                                             11/88 SBG\n*  CBT973 SUPPORT IS DONE BY USING THE CBT973 EXPANSION       11/88 SBG\n*  ALGORITHM TO RESTORE ONE 80-BYTE RECORD AT A TIME.  NORMAL 11/88 SBG\n*  IEBUPDTE PROCESSING IS THEN DONE ON THIS RECORD.           11/88 SBG\n*                                                             11/88 SBG\n************************************************************* 11/88 SBG\n         EJECT ,                                              06/87 THO\n************************************************************* 11/87 SBG\n*                                                                   SBG\n* LAST CHANGE DATE - JUNE 11, 1986, BUT ADDED 11/87 BY TENNIE OLSON THO\n*                                                                   SBG\n*  FIXED BUG  -  SAM GOLOB  -  NEWSWEEK INC., MOUNTAIN LAKES, N.J.  SBG\n*                                                                   SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  TAPEMAP HAS TO CHECK FOR SMPPTFIN FORMAT BEFORE IT CHECKS        SBG\n*   FOR IEBUPDTE FORMAT.  IF A PTF OR APAR HAS SOURCE UPDATES       SBG\n*   WHICH ARE DONE WITH IEBUPDTE, AND THIS PTF OR APAR IS AT THE    SBG\n*   BEGINNING OF THE TAPE TO BE READ, THE PROGRAM WOULD NOT PRINT   SBG\n*   THE PTF OR APAR NAMES, BUT THE NAMES OF THE PROGRAMS BEING      SBG\n*   UPDATED, WHICH IS NOT WHAT WE WANT WHEN WE MAP AN APAR TAPE.    SBG\n*   WE ALWAYS WANT THE NAMES OF THE PTFS AND APARS UNDER THESE      SBG\n*   CIRCUMSTANCES.                                                  SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n*                                                             12/88 SBG\n************************************************************* 07/85 SBG\n         EJECT ,                                              06/87 THO\n************************************************************* 06/87 THO\n*                                                           * 06/87 THO\n* LAST CHANGE DATE - JUNE 09, 1987                          * 06/87 THO\n*                                                           * 06/87 THO\n*                  - I ADDED SUPPORT FOR 3480 CARTRIDGES.   * 06/87 THO\n*                    ADDED CODE TO MAKE CORRECT CALCULA-    * 06/87 THO\n*                    TIONS IN TAPEFEET. 37871 BYTES PER     * 06/87 THO\n*                    IN OR 302971 BITS PER INCH WITH A      * 06/87 THO\n*                    GAP OF .08 INCHES. INDICATED DEN WAS   * 06/87 THO\n*                    NOT APPLICABLE FOR 3480.               * 06/87 THO\n*                                                           * 06/87 THO\n*     TENNIE OLSON                                            12/88 SBG\n*     VF CORPORATION - WRANGLER DIVISION                      12/88 SBG\n*     201 NORTH EUGENE STREET                                 12/88 SBG\n*     GREENSBORO, N.C. 27401                                  12/88 SBG\n*     (919) 373-3952                                          12/88 SBG\n*                                                             12/88 SBG\n************************************************************* 06/87 THO\n         EJECT ,                                              07/85 DBC\n************************************************************* 07/85 DBC\n*                                                           * 07/85 DBC\n* LAST CHANGE DATE - JULY 26, 1985                          * 07/85 DBC\n*                                                           * 07/85 DBC\n*                  - I ADDED SUPPORT FOR LISTING THE PTFS   * 07/85 DBC\n*                    CONTAINED ON AN SMPPTFIN TAPE.         * 07/85 DBC\n*                                                           * 07/85 DBC\n*                  - WHEN AN SL TAPE IS BEING SCANNED WITH  * 07/85 DBC\n*                    NL ANALYSIS, THE LOGICAL FILE NUMBER   * 07/85 DBC\n*                    IS DISPLAYED ON THE \"LABELS\" LINE      * 07/85 DBC\n*                    (OLD), AND THE PHYSICAL FILE NUMBER IS * 07/85 DBC\n*                    DISPLAYED ON THE \"SCAN\" LINE.          * 07/85 DBC\n*                                                           * 07/85 DBC\n************************************************************* 07/85 DBC\n         EJECT ,                                              09/84 DBC\n************************************************************* 09/84 DBC\n*                                                           * 09/84 DBC\n* LAST CHANGE DATE - OCTOBER 1, 1984                        * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - I RECEIVED FROM ARNIE CASINGHINO (OF   * 09/84 DBC\n*                    THE CONNECTICUT BANK AND TRUST) A TAPE * 09/84 DBC\n*                    CONTAINING A VERSION OF TAPEMAP THAT   * 09/84 DBC\n*                    WAS BASED ON AN EARLIER UCLA VERSION   * 09/84 DBC\n*                    AND WAS MODIFIED BY WALT FARRELL OF    * 09/84 DBC\n*                    THE RAINIER NATIONAL BANK. THE MODS    * 09/84 DBC\n*                    WERE MAINLY IN SUPPORT OF DETAILED     * 09/84 DBC\n*                    LISTINGS OF THE CONTENTS OF FDR AND    * 09/84 DBC\n*                    FDRDSF TAPES. I HAVE NOW TRANSPORTED   * 09/84 DBC\n*                    THOSE MODS INTO THIS VERSION OF        * 09/84 DBC\n*                    TAPEMAP.                               * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - I ADDED SUPPORT FOR BLKSIZES GREATER   * 09/84 DBC\n*                    THAN 32K UP TO 64K-1 BYTES. (THE       * 09/84 DBC\n*                    RECENT RELEASES OF FDR WRITE BLOCKS    * 09/84 DBC\n*                    THAT ARE 50K LARGE OR LARGER).         * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - I HAVE ADDED A REWIND COMMAND JUST     * 09/84 DBC\n*                    AFTER THE TAPE IS OPENED TO INSURE     * 09/84 DBC\n*                    THAT THE TAPE IS PROPERLY POSITIONED.  * 09/84 DBC\n*                    THIS MAKES MAPPING STANDARD LABELED    * 09/84 DBC\n*                    TAPES IN A UCC/1 ENVIRONMENT A LITTLE  * 09/84 DBC\n*                    EASIER.                                * 09/84 DBC\n*                                                           * 09/84 DBC\n************************************************************* 09/84 DBC\n         EJECT ,                                              06/84 DBC\n************************************************************* 06/84 DBC\n*                                                           * 06/84 DBC\n* LAST CHANGE DATE - JUNE 4, 1984                           * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - ADDED OPSYN STATEMENTS TO SUPPRESS THE * 06/84 DBC\n*                    AUTHOR'S USE OF \"PRINT NOGEN\".         * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - ADDED CODE TO RECOGNIZE FILES IN       * 06/84 DBC\n*                    IEBUPDAT RELOAD FORMAT.                * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - DELETED THE SILLY JFCBDSNM CHANGE THAT * 06/84 DBC\n*                    MADE TAPE MANAGEMENT SYSTEMS SO        * 06/84 DBC\n*                    UNHAPPY.                               * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - UPDATED THE LIST OF KNOWN DEVICE TYPES * 06/84 DBC\n*                    TO INCLUDE 3375S AND 3380S.            * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - CHANGED THE PARM DEFAULT FROM NOSCAN   * 06/84 DBC\n*                    TO SCAN.                               * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - ADDED THE \"INFO SOURCE\" COLUMN TO THE  * 06/84 DBC\n*                    SYSPRINT OUTPUT.                       * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - FIXED THE CCC ON THE LINE OF DASHES    * 06/84 DBC\n*                    (WAS RANDOM, NOW IS C' ').             * 06/84 DBC\n*                                                           * 06/84 DBC\n************************************************************* 06/84 DBC\n         EJECT\n***********************************************************************\n*                                                                     *\n*   UPDATES:                                                          *\n*                                                                     *\n*  ADD CHECK FOR FILE WITH HEADER OF                     05/01/79 WBF *\n*    $$TAPEMAP.PRINT.FILE$$                                           *\n*  AND PRINT THE CONTENTS OF THE FILE                                 *\n*  IF ONE IS FOUND                                                    *\n*                                                                     *\n*  LIST DETAILS OF SLICK BACKUP FILES                    04/23/79 WBF *\n*                                                                     *\n*  FIX MINOR BUGS IN NL CODE,                            04/08/79 WBF *\n*  LIST DETAILS OF FDR OR FDRDSF FILES,                      \"        *\n*  FORCE BLP AND EXPDT=98000 (FOR UCC-1),                    \"        *\n*  COSMETIC CHANGES FOR RAINIER NATIONAL BANK                \"        *\n*                                                                     *\n*                                                                     *\n*  FIX BUG IN I/O ERROR RECOVERY                     U16 06/16/79 LDW *\n*                                                                     *\n*  FIX VOLSER FOR NL TAPES;  PRINT SENSE BIT MEANINGS;  CHANGE FORMAT *\n*  OF \"REQUESTED VOL\" MSG;  FIX ./DDNAME= BUG        U15 02/10/79 LDW *\n*                                                                     *\n*  RE-ARRANGE CODE, ADD 'NULL=' PARM.                U14 06/28/78 LDW *\n*                                                                     *\n*  PRINT SENSE INFO WHEN I/O ERROR OCCURS            U13 05/05/78 LDW *\n*                                                                     *\n*  FIX A COUPLE OF TURKEY BUGS                03/24/78 - 04/06/78 LDW *\n*                                                                     *\n*  LIST MEMBERS IN AN IEBUPDTE INPUT STREAM              02/22/78 LDW *\n*                                                                     *\n*  LIST MEMBERS UNLOADED BY IEHMOVE                      01/05/78 LDW *\n*                                                                     *\n*  NL TAPE ANALYSIS CODE ADDED                           12/26/77 LDW *\n*                                                                     *\n*  DO A SENSE TO DETERMINE TRUE TAPE DENSITY             11/14/77 LDW *\n*                                                                     *\n*  FIX SOME MISCELLANEOUS MINOR BUGS                     11/08/77 LDW *\n*                                                                     *\n*  ADD CODE TO LIST MEMBERS UNLOADED BY IEBCOPY, AND ATTRS FOR        *\n*     IEBISAM AND IEHDASDR UNLOADED DATASETS.            03/16/77 LDW *\n*                                                                     *\n*  GENERAL RE-WRITING OF TAPE READ CODE TO PUT IN CODE TO PRINT OUT   *\n*     THE ORIGINAL ATTRS FOR UNLOADED DATASETS CREATED BY IEHMOVE     *\n*     (SYSMOVE) AND IEBCOPY (VS2COPY);  CHANGE TAPE I/O ERROR AND     *\n*     TAPE MARK DETECTION ALGORITHM.                     02/13/77 LDW *\n*                                                                     *\n*  PUT IN DSECTS FOR LABELS;  FIX A 01/06/77 BUG;  RE-WRITE PRINTLIN  *\n*     MACRO (CHANGE TO PRTLN)                            02/07/77 LDW *\n*                                                                     *\n*  MORE FIXES:  COUNT LINES AND DO PAGE EJECT;  AND MUCH OTHER        *\n*     MISCELLANEOUS STUFF                                01/06/77 LDW *\n*                                                                     *\n*  UNCLUDGED A LITTLE:  FIX LENGTH CALCULATION;  MAKE SOME MACROS     *\n*     INTO SUBROUTINES (IT SEEMS THAT MSM NEVER HEARD OF SUBROUTINES; *\n*     PUT IN SYMBOLIC OFFSETS FOR PRINT LINE INFO.       11/08/76 LDW *\n*                                                                     *\n*  TAPEINDX -- CLUDGED UP IN A HURRY FROM A SPASM PROGRAM TO MAKE A   *\n*          QUICK LOAD MODULE                             10/30/74 MSM *\n*                                                                     *\n***********************************************************************\n         EJECT\n         MACRO\n&NFS     FL2   &DSECT=YES\n         LCLC  &P\n&P       SETC  'FL2'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n.***************\n&P.LABI  DC    C'HDR'                   OR 'EOF' OR 'EOV'\n&P.NO    DC    C'2'                     CONSTANT\n&P.RECFM DC    C' '                     F/V/U/D\n&P.BLKL  DC    CL5' '                   BLKSIZE\n&P.LRECL DC    CL5' '                   RECORD LEN (X=99999)\n&P.DEN   DC    C' '                     DENSITY (C'0' TO C'4')      THO\n&P.FILP  DC    C' '                     1=VOL SW OCCURRED, 0=NOT\n&P.JOBD  DC    CL8' '                   JOBNAME OF CREATOR\n&P.JSSP  DC    C'/'                     SLASH\n&P.STEPD DC    CL8' '                   STEPNAME OF CREATOR\n&P.TRTCH DC    CL2' '\n&P.CNTRL DC    C' '                     A/M/<BLANK>\n         DC    C' '\n&P.BLKA  DC    C' '                     B/S/R/<BLANK>\n         DC    CL41' '\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     FL1   &DSECT=YES\n         LCLC  &P\n&P       SETC  'FL1'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n&P.LABI  DC    C'HDR'                   OR 'EOF' OR 'EOV'\n&P.NO    DC    C'1'                     CONSTANT\n&P.ID    DC    CL17' '                  DATASET NAME\n&P.FILSR DC    CL6' '                   FIRST VOL NAME\n&P.VOLSQ DC    CL4' '                   VOL # OF DS\n&P.FILSQ DC    CL4' '                   DS SEQ #\n&P.GNO   DC    CL4' '                   GENERATION NUMBER\n&P.VNG   DC    CL2' '                   VERSION NUMBER\n&P.CREDT DC    CL6' YYDDD'              CREATION DATE\n&P.EXPDT DC    CL6' YYDDD'              EXPIRATION DATE\n&P.FSEC  DC    C' '                     0=NO PW, 1=PW, 3=NOPWREAD\n&P.BLKCT DC    CL6' '                   # OF BLOCKS\n&P.SYSCD DC    CL13' '\n         DC    CL7' '\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     VOL   &DSECT=YES\n         LCLC  &P\n&P       SETC  'VOL'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n&P.LABI  DC    C'VOL'                   CONSTANT\n&P.NO    DC    C'1'                     CONSTANT\n&P.SERNO DC    CL6'VOLSER'              VOLUME NAME\n         DC    C'0'\n         DC    CL30' '\n&P.OWNER DC    CL10' '                  OWNER ID\n         DC    CL29' '\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     HEXTAB &DUAL=YES\n.*  HEXTAB  LDW  UPDATED 02-21-79\n.*  UPDATED 03-17-79\n         GBLC  &HEXTAB#\n         LCLC  &N\n&N       SETC  '&NFS'                   ASSUME GIVEN\n         AIF   ('&N' NE '').OK          YEP - USE IT\n&N       SETC  '&HEXTAB#'               ASSUME GLOBAL PRESENT\n         AIF   ('&N' NE '').OK          YEP - USE IT\n&HEXTAB# SETC  'HEXTAB'                 ELSE, SET IT\n&N       SETC  'HEXTAB'                 HERE TOO\n.OK      AIF   ('&DUAL' EQ 'YES').DUAL\n&N       EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         MEXIT\n.DUAL    ANOP\n&N       EQU   *-C'A'\n         DC    X'0A0B0C0D0E0F'\n         ORG   &N+C'0'\n         DC    C'0123456789ABCDEF'\n         ORG\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     HEX   &TO,&FROM,&L,&LEN=,&HEXTAB=,&BYTE=C' ',&DIGITS=\n.*  HEX -- 12/18/76 -- LDW      FIXED 5-2-77    12-25-77\n.*      REWRITTEN FROM SCRATCH -- 01/29/79  FIXED  02-16-79  03-03-79\n.*      UPDATED  04-21-79\n         GBLC  &HEXTAB#\n         LCLA  &LT                      UNPK \"TO\" LENGTH\n         LCLA  &LF                      UNPK \"FROM\" LENGTH\n         LCLA  &LTR                     TR \"TO\" LENGTH\n         LCLA  &LL                      &LEN ONE WAY OR ANOTHER\n         LCLC  &F1,&F2,&T1,&T2,&LX\n&F1      SETC  '&FROM(1)'               FOR SHORTER STRING LATER\n&F2      SETC  '&FROM(2)'               FOR SHORTER STRING LATER\n&T1      SETC  '&TO(1)'                 FOR SHORTER STRING LATER\n&T2      SETC  '&TO(2)'                 FOR SHORTER STRING LATER\n&LX      SETC  '&L&LEN'                 GET LENGTH USING EITHER METHOD\n         AIF   ('&LX' EQ '').DEFLEN     LENGTH WILL DEFAULT TO 4\n&LL      SETA  &LX                      GET IT\n         AGO   .OKLEN\n.DEFLEN  ANOP\n&LL      SETA  4                        SET THE DEFAULT LENGTH\n.OKLEN   AIF   ('&HEXTAB' EQ '').OKHEX1\n&HEXTAB# SETC  '&HEXTAB'\n.OKHEX1  AIF   ('&HEXTAB#' NE '').OKHEX2\n&HEXTAB# SETC  'HEXTAB'\n.OKHEX2  ANOP\n&LT      SETA  &LL*2\n         AIF   ('&DIGITS' EQ '').OKDIGIT\n&LT      SETA  &DIGITS\n.OKDIGIT AIF   (N'&TO NE 2).TO1\n         AIF   (N'&FROM NE 2).T2F1\n.*  N'&TO = 2     N'&FROM = 2\n&NFS     UNPK  &T1.(&LT+1,&T2),&F1.(&LL+1,&F2)\n         TR    &T1.(&LT,&T2),&HEXTAB#\n         MVI   &T1+&LT.(&T2),&BYTE\n         AGO   .DONE\n.T2F1    AIF   (N'&FROM NE 1).ERRF\n.*  N'&TO = 2     N'&FROM = 1\n&NFS     UNPK  &T1.(&LT+1,&T2),&FROM.(&LL+1)\n         TR    &T1.(&LT,&T2),&HEXTAB#\n         MVI   &T1+&LT.(&T2),&BYTE\n         AGO   .DONE\n.TO1     AIF   (N'&TO NE 1).ERRT\n         AIF   (N'&FROM NE 2).T1F1\n.*  N'&TO = 1     N'&FROM = 2\n&NFS     UNPK  &TO.(&LT+1),&F1.(&LL+1,&F2)\n         TR    &TO.(&LT),&HEXTAB#\n         MVI   &TO+&LT,&BYTE\n         AGO   .DONE\n.T1F1    AIF   (N'&FROM NE 1).ERRF\n.*  N'&TO = 1     N'&FROM = 1\n&NFS     UNPK  &TO.(&LT+1),&FROM.(&LL+1)\n         TR    &TO.(&LT),&HEXTAB#\n         MVI   &TO+&LT,&BYTE\n         AGO   .DONE\n.ERRF    MNOTE 8,'ERROR IN \"FROM\" PARAMETER, MACRO TERMINATED'\n         MEXIT\n.ERRT    MNOTE 8,'ERROR IN \"TO\" PARAMETER, MACRO TERMINATED'\n         MEXIT\n.DONE    SPACE 1\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     MONTHS  &DUMMY                 04-19-77 LDW\n&NFS     DC    H'31',C'JAN '            THIRTY DAYS\n         DC    H'28',C'FEB '            HATH SEPTEMBER,\n         DC    H'31',C'MAR '            APRIL, JUNE,\n         DC    H'30',C'APR '            AND NOVEMBER.\n         DC    H'31',C'MAY '            ALL THE REST\n         DC    H'30',C'JUN '            HAVE THIRTY ONE,\n         DC    H'31',C'JUL '            EXCEPT FEBRUARY,\n         DC    H'31',C'AUG '            WHICH HAS ONLY 28.\n         DC    H'30',C'SEP '\n         DC    H'31',C'OCT '\n         DC    H'30',C'NOV '\n         DC    H'31',C'DEC '\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     DAYS  &TYPE,&LEN=9                                04-19-77 LDW\n         AIF   ('&TYPE' EQ 'RIGHT').RIGHT\n&NFS     DC    CL&LEN'SUNDAY   '\n         DC    CL&LEN'MONDAY   '\n         DC    CL&LEN'TUESDAY  '\n         DC    CL&LEN'WEDNESDAY'\n         DC    CL&LEN'THURSDAY '\n         DC    CL&LEN'FRIDAY   '\n         DC    CL&LEN'SATURDAY '\n         AGO   .EXIT\n.RIGHT   ANOP\n&NFS     DC    CL&LEN'   SUNDAY'\n         DC    CL&LEN'   MONDAY'\n         DC    CL&LEN'  TUESDAY'\n         DC    CL&LEN'WEDNESDAY'\n         DC    CL&LEN' THURSDAY'\n         DC    CL&LEN'   FRIDAY'\n         DC    CL&LEN' SATURDAY'\n.EXIT    SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     DCBEXIT  &BLKSIZE=,&BUFNO=\n.*  DCBEXIT   04-20-78  LDW\n         LCLC  &NAME\n&NAME    SETC  '&NFS'\n         PUSH  USING\n         DROP\n         USING *,R15\n         AIF   ('&BLKSIZE' EQ '').B1\n&NAME    CLC   62(2,R1),=F'0'           BLKSIZE GIVEN?\n&NAME    SETC  ''\n         AIF   ('&BUFNO' EQ '').A1\n         BNE   *+10                     YES - USE IT\n         AGO   .A2\n.A1      BNER  R14                      YES - USE IT\n.A2      MVC   62(2,R1),=Y(&BLKSIZE)    SET DEFAULT\n.B1      AIF   ('&BUFNO' EQ '').C1\n&NAME    CLI   20(R1),0                 BUFNO GIVEN?\n         BNER  R14                      YES - USE IT\n         MVI   20(R1),&BUFNO            SET DEFAULT\n.C1      BR    R14                      RETURN TO OPEN\n         SPACE 2\n         POP   USING\n         SPACE 3\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     PRTLN &A,&I\n         GBLC  &XA                                            02/93 RT\n         LCLC  &LQ\n         LCLA  &L\n&LQ      SETC  'L'''                    TO FOOL THE ASSEMBLER\n         AIF   ('&A'(1,1) NE '''').NOTQ NOT QUOTED STRING\n&L       SETA  K'&A-2                   SET LENGTH OF IT\n&NFS     MVC   OUTBUFF(&L),=C&A\n         AGO   .BAL\n.NOTQ    AIF   ('&A' EQ 'OUTBUFF').OUTBUFF\n         AIF   ('&I' EQ 'I').I\n&NFS     MVC   OUTBUFF(&LQ&A),&A\n.BAL     BA&XA R14,PRTLN\n         AGO   .MEND\n.I       ANOP\n&NFS     L     R15,=A(&A)\n         MVC   OUTBUFF(&LQ&A),0(R15)\n         AGO   .BAL\n.OUTBUFF ANOP\n&NFS     BA&XA R14,PRTLN\n.MEND    SPACE 1\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     PRTLN2  &DUMMY\n         GBLC  &XA                                            02/93 RT\n&NFS     BA&XA R14,PRTLN2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     TAPIO &CCW,&DUMMY,&TM=UNEXTPMK\n         GBLC  &XA                                            02/93 RT\n         AIF   ('&DUMMY' EQ '').OK\n         MNOTE 4,'** TOO MANY POSITIONAL OPERANDS -- IGNORED **'\n.OK      ANOP\n&NFS     LA    R0,&CCW\n         BA&XA R10,TAPIO\n         B     &TM                      TAPEMARK FOUND\n         SPACE 1\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     NEWPAGE  &C,&F\n         GBLC  &XA                                            02/93 RT\n         AIF   ('&C' EQ '').JUSTBAL\n         AIF   ('&C' EQ '(R0)').R0\n&NFS     LA    R0,&C\n.R0      BA&XA R10,NEWPAGE&F\n         MEXIT\n.JUSTBAL ANOP\n&NFS     BA&XA R10,NEWPAGE&F+4\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     IFP2  &L,&B\n&NFS     TM    TFLAG2,T2@PRT2\n         AIF   ('&L'(1,1) EQ 'N').NO\n         BO    &B\n         MEXIT\n.NO      BNO   &B\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     ICALL &RTN,&REG,&R1=,&R15=\n         GBLC  &XA                                            02/93 RT\n         LCLC  &NAME\n&NAME    SETC  '&NFS'\n         AIF   ('&R1' EQ '').A\n&NAME    LA    R1,&R1\n&NAME    SETC  ''\n.A       AIF   ('&R15' EQ '').B\n&NAME    LA    R15,&R15\n&NAME    SETC  ''\n.B       ANOP\n&NAME    BA&XA &REG,&RTN\n         SPACE 1\n         MEND\n         EJECT\n         GBLA  &LINEPPG                                       11/88 SBG\n&LINEPPG SETA  60                                             11/88 SBG\nTAPEMAP  CSECT\n         USING *,R15\n         B     ARNDCONS\n         DC    AL1(25)\n         DC    CL8'TAPEMAP'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n         DS    0F\nGETM     DC    AL1(0),AL3(WORKLEN)\nARNDCONS DS    0H\n         SAVE  (14,12)\n         DROP  R15\n         USING TAPEMAP,R12,R11,R7,R9\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R7,4095(,R11)\n         LA    R7,1(,R7)\n         LA    R9,4095(,R7)\n         LA    R9,1(,R9)\n         L     R2,0(,R1)            PICK UP PARM POINTER\n         L     R0,GETM\n         GETMAIN R,LV=(0)\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE-AREA ADDR\n         USING WORKD,R13\n         L     R15,=A(LITMOVES)     POINT TO LITERALS TO LOAD 12/88 SBG\n         MVC   EMPTYLIT(256),0(R15)     MOVE THEM TO WORKAREA 12/88 SBG\n         MVC   EMPTYLIT+256(256),256(R15)                     10/90 SBG\n         MVC   EMPTYLIT+512(LITMVLEN-512),512(R15)            10/90 SBG\n         MVI   BLANKS,C' '\n         MVC   BLANKS+1(L'BLANKS+L'OUTBUFF),BLANKS  GET OUTBUFF ALSO\n         MVC   OUTCLR2(L'OUTBUFF2+2),OUTCLEAR  GET CC FOR \"DASHES\" ALSO\n         MVC   DASHES(2),=C' -'    PRIME                      06/84 DBC\n         MVC   DASHES+2(L'DASHES-2),DASHES+1\n         MVC   PARM#MSG+1(L'PARM#MSG-1),PARM#MSG\n         XC    JFCB(176),JFCB\n         LA    R0,JFCB\n         ST    R0,EXLST\n         MVI   EXLST,X'87'\n         LA    R0,TAPEBUFF              GET ADDR OF DATA BUFFER\n         ST    R0,TCCW#DAT              SET INTO CCW\n         MVI   TCCW#DAT,RD              RESTORE THE OPCODE\n         LA    R1,FL1LABI               GET LABEL BUFFER ADDR\n         ST    R1,TCCW#LBL              SET IN CCW\n         MVI   TCCW#LBL,RD              RESTORE OPCODE\n         ST    R1,TCCW#EOV              SET IN CCW            02/93 RT\n         MVI   TCCW#EOV,RD              RESTORE OPCODE        02/93 RT\n         LA    R0,FL2LABI               GET LABEL BUFFER ADDR\n         ST    R0,TCCW#LBL+8            SET IN CCW\n         MVI   TCCW#LBL+8,RD            RESTORE OPCODE\n         LA    R1,MV#BUFF2              GET 2ND BUFFER ADDR\n         ST    R1,MV#ABUF2              SAVE\n         LA    R0,OUTBUFF2+110          GET ADDR OF END OF OUTBUFF2\n         ST    R0,OB2END                SAVE FOR FUTURE REFERENCE\n         LA    R0,OUTBUFF2+110+10       FOR UPDTE STUFF\n         ST    R0,OB2END2\n         SPACE 2\n         OPEN  MF=(E,OPENMFL)           OPEN PRINT FILE\n         L     R1,OPENMFL               GET SYSPRINT DCB ADDR\n         TM    48(R1),X'10'             OPEN?\n         BO    PRINTOK                  YES\n         LA    R1,100                   GET ABEND CODE\n         SVC   13                       AND LEAVE\n         SPACE 2\nPRINTOK  LH    R15,0(,R2)               GET PARM LEN\n         LTR   R15,R15                  ANY?\n         BNP   DONEPARM                 NO\n         LA    R14,2(,R2)               SET ADDR OF FIRST ITEM\n         LR    R0,R14                   SAVE IT\n         MVC   PARM#MSG(8),=C' PARM='' '\n         MVC   PARM#MSG+8(L'PARM#MSG-8),PARM#MSG+7   BLANK THE REST\n         CH    R15,=H'21'               PARM TOO LONG FOR \"TITLE2\"?\n         BNH   *+8                      NO - SKIP\n         OI    TFLAG2,T2@LPARM          YES - SET FLAG\n         EX    R15,MVCPARM              SAVE PARM IN OUTBUFF2\n         LA    R1,PARM#MSG+7(R15)       GET ADDR OF END+1\n         MVI   0(R1),C''''              PUT IN ENDING QUOTE\n         OI    TFLAG1,T1@PARM           SET \"HAVE PARM\" FLAG\n         SPACE 2\nNEXTPARM LM    R1,R3,=A(PARMTAB,12,PARMLAST)\nTESTPARM LH    R4,0(,R1)                GET LENGTH OF ITEM\n         EX    R4,CLCPARM               THIS IT?\n         BNE   INCRPARM                 NO - TRY NEXT\n         OC    PARMFLAG,11(R1)          TURN ON BITS\n         LA    R14,2(R14,R4)            INCR SCAN PTR\n         SR    R15,R4                   DECR LENGTH LEFT\n         SH    R15,=H'2'\n         BP    NEXTPARM                 LOOP IF ANY MORE\n         B     DONEPARM                 DONE...\n         SPACE 2\nNULLPARM SH    R15,=H'5'                DECR LENGTH LEFT            U14\n         BNP   DONEPARM                 NOTHING LEFT                U14\n         LA    R14,5(,R14)              POINT TO OPERAND            U14\n         SR    R1,R1                    CLEAR ACCUMULATOR           U14\n         SPACE 1\nNULLLOOP CLI   0(R14),C'0'              DIGIT?                      U14\n         BL    HAVENULL                 NO - HAVE COMPLETE NUMBER   U14\n         IC    R0,0(,R14)               GET A DIGIT                 U14\n         N     R0,F15                   STRIP IT                    U14\n         MH    R1,=H'10'                SHIFT PREVIOUS              U14\n         AR    R1,R0                    ADD NEW                     U14\n         LA    R14,1(,R14)              BUMP SCAN PTR               U14\n         BCT   R15,NULLLOOP             CONTINUE FOR LENGTH OF PARM U14\n         SPACE 2\nHAVENULL LTR   R1,R1                    ANYTHING GIVEN?             U14\n         BNP   *+8                      YES - USE IT                U14\n         STH   R1,NULLNUMB              SET NUMBER                  U14\n         LA    R14,1(,R14)              BUMP SCAN PTR               U14\n         SH    R15,H1                   DECR LENGTH LEFT            U14\n         BP    NEXTPARM                 CONTINUE IF MORE            U14\n         B     DONEPARM                 NONE LEFT                   U14\n         SPACE 2\nINCRPARM BXLE  R1,R2,TESTPARM           KEEP LOOKING\n*  DIDN'T FIND IT IN TABLE\n         CLC   =C'NULL=',0(R14)         SPECIAL KIND?               U14\n         BE    NULLPARM                 YES - PROCESS IT            U14\n*  INVALID PARM ITEM\n         SR    R14,R0                   COMPUTE OFFSET INTO PARM\n         LA    R14,1(,R14)              FIX IT\n         CVD   R14,DWD                  CONVERT TO PACKED\n         UNPK  PARMERR+28(3),DWD+6(2)   PUT INTO MSG\n         OI    PARMERR+30,C'0'          FIX SIGN\n         OI    TFLAG1,T1@PERR           SET \"PARM ERROR\" FLAG\n         SPACE 3\nDONEPARM LA    LCTR,&LINEPPG            INIT LINECOUNTER      11/88 SBG\n         CALL  TODAY,(TTL1DATE,TTL1DAY,TTL1TIME)              02/93 RT\n         L     R1,16                    -> CVT\n         L     R1,0(,R1)                -> TCBWORDS\n         L     R1,4(,R1)                -> TCB\n         L     R1,12(,R1)               -> TIOT\n         LA    R1,24(,R1)               -> DD SECTION\n         ST    R1,DD#PTR                SAVE PTR\n         SPACE 1\n         TM    PARMFLAG,PF@INLIN+PF@NATTR PARM=INLINE OR NOATTR?\n         BNZ   OK$PRT2                  YES - SKIP SECOND PRINT FILE\n         L     R2,OPENMFL2              GET SYSPRNT2 DCB ADDR\n         ICALL TIOTSCAN,R10,R15=40(,R2) SEE IF WE HAVE IT\n         B     OK$PRT2                  NOPE\n         SPACE 1\n         OPEN  MF=(E,OPENMFL2)          OPEN SECOND PRINT FILE\n         OI    TFLAG2,T2@PRT2           ASSUME IT WORKS.\n         TM    48(R2),X'10'             DID IT OPEN?\n         BO    OK$PRT2                  YES\n         SPACE 2\nABEND99  LA    R1,99                    GET ABEND CODE\n         SVC   13                       BYE\n         SPACE 2\nOK$PRT2  L     R2,OPENMFLI              GET SYSIN DCB ADDR\n         ICALL TIOTSCAN,R10,R15=40(,R2) SEE IF IT'S THERE\n         B     RDJFCB                   NOPE\n         MVC   RET#ADDR,=A(READCARD)    SET RETURN ADDR\n         SPACE 2\n         OPEN  MF=(E,OPENMFLI)          OPEN INPUT FILE\n         TM    48(R2),X'10'             OPEN?\n         BZ    ABEND99                  NO.  (THIS SHOULD NEVER HAPPEN)\n         MVI   OPENMFL,0                SET TO CLOSE BOTH FILES\n         SPACE 2\nREADCARD L     R1,OPENMFLI              GET SYSIN DCB ADDR\n         GET   (1),INBUFF\n         OI    TFLAG1,T1@DATA           SET FLAG\n         CLC   =C'./DDNAME',INBUFF      IS IT THIS?\n         BE    INDDNAME                 YES - PROCESS\n         CLC   =C'./VOLUME',INBUFF      IS IT THIS?\n         BNE   *+10                     NO - MUST BE VOL NAME\n         MVC   INBUFF(6),INBUFF+9       MOVE OVER\n         MVI   JFCB+117,1               # OF VOL SER #'S\n         MVC   JFCB+118(6),INBUFF       VOL SER #\n         MVI   JFCB+52,X'40'            VOLUME SERIAL LIST CHANGED\n         B     TAPEINDX                 SKIP THE RDJFCB, GO TO SUBROUTN\n         SPACE 2\nINDDNAME L     R1,TAPEMFL               GET ADDR OF TAPEDCB         U14\n         MVC   40(8,R1),INBUFF+9        MOVE DDNAME INTO DCB        U15\n         SPACE 2\nRDJFCB   RDJFCB  MF=(E,TAPEMFL)\n         B     TAPEINDX                 GO TO SUBROUTINE\n         SPACE 3\nEOD2     CLOSE MF=(E,OPENMFL)\n         IFP2  N,LEAVE                  SKIP IF NOT OPEN\n         CLOSE MF=(E,OPENMFL2)\n         B     LEAVE                    RETURN\n         SPACE 2\nEOD      TM    TFLAG1,T1@DATA           DATA READ IN?\n         BO    EOD2                     YES.\n         MVC   RET#ADDR,=A(EOD2)        SET NEW RETURN ADDR\n         B     RDJFCB\n         SPACE 2\nMVCPARM  MVC   PARM#MSG+7(0),0(R14)     << EXECUTED >>\nCLCPARM  CLC   2(0,R1),0(R14)           << EXECUTED >>\n         SPACE 2\n******** PRINT GEN\n         EJECT\n***********************************************************************\n*                                                                     *\n* T A P E I N D X                                                     *\n*                                                                     *\n*    A ROUTINE WHICH READS IN THE VOLUME NAME & ALL THE DATA SET NAMES*\n*        (FROM THE TRAILER LABELS) OF A TAPE (WITH STANDARD LABELS)   *\n*        AND FORMATS AND PRINTS THE INFORMATION FROM THE LABELS.      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nTAPEINDX MVC   LCTR2,=F'0'              INIT 2ND LINE COUNTER 02/93 RT\n         MVC   NUMBNULL,=F'0'           INIT COUNT OF NULL FILES    RT\n         OI    TFLAG1,T1@PAGE1+T1@ANLZ  1ST PAGE/THIS VOL + ANLZ LABEL\n         SPACE 1\n* OPEN TAPE VOLUME FOR LABEL=BLP\n         MVC   JFCB+44(8),BLANKS        BLANK OUT ELEM NAME\n         MVC   JFCB+68(2),=H'1'         FILE SEQ #                 WBF\n         MVC   JFCB+70(2),=H'1'         VOL SEQ #\n         MVC   JFCB+83(3),=X'620000'    SET EXPDT=98000 FOR UCC-1  WBF\n         MVI   JFCB+98,X'40'            DSORG=PS\n         MVI   JFCB+100,X'90'           RECFM=FB\n         MVC   TITLE1+5(6),JFCB+118     INIT IN CASE NOT SL\n         SPACE 1\n         OPEN  MF=(E,TAPEMFL),TYPE=J\n         TM    TAPEDCB+DCBOFLGS-IHADCB,DCBOFOPN   FILE OPEN ?       THO\n         BO    TPOPENOK                 YES.                        THO\n         NEWPAGE ,                      PRINT THE HEADER\n         PRTLN '-*** TAPE VOLUME COULD NOT BE OPENED ***'\n         B     RETURN\n         SPACE 3\nTPOPENOK NI    TAPEDCB+DCBMACF1-IHADCB,X'F7'  BLK COUNT INACCURATE  THO\n         XC    LEN#TAPE(4*2),LEN#TAPE   CLEAR SL & NL LENGTHS\n         NI    TFLAG1,255-T1@BADEN-T1@SL RESET FLAGS\n         MVI   WHERE,0                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#RWD,TM=*+4     INSURE PROPER POSITION     09/84 DBC\n         XC    FILE#SEQ,FILE#SEQ   CLEAR PHYSICAL FILE#       07/85 DBC\n         TAPIO TCCW#DAT,TM=LEADTPMK     READ IN VOLUME LABEL\n         MVC   VOLLABI(80),TAPEBUFF     SAVE VOLUME LABEL\n         SPACE 1\nDO$SENSE L     R2,LASTSIZE         PRESERVE LENGTH OVER SENSE 09/84 DBC\n         TAPIO TCCW#SNS                 READ SENSE DATA\n         L     R1,TAPEDCB+DCBDEBAD-IHADCB   LOAD ADDRESS OF DEB     THO\n         AIF   ('&DEBX' EQ 'YES').NEWDEB                            SBG\n         L     R1,DEBSUCBA-DEBBASIC(,R1)    LOAD ADDRESS OF UCB     THO\n         AGO   .OLDDEB                                              SBG\n.NEWDEB  ANOP                                                       SBG\n         L     R1,DEBUCBAD-DEBNMSUB(,R1)    LOAD ADDRESS OF UCB     SBG\n.OLDDEB  ANOP                                                       SBG\n         CLC   UTY3420C(4),UCBTYP-UCB(R1)        3480 COMPAT MODE? \u00acSBG\n         BE    IS3480                   YEP. TREAT AS 3480.        \u00acSBG\n         TM    UCBTBYT4-UCB(R1),X'80'       THIS A 3490 TAPE DRIVE ?SBG\n         BO    IS3480\n* --------->>> DON'T USE MAPPING MACRO BECAUSE OF OLDER SYSTEMS.    SBG\n         CLI   UCBTBYT4-UCB(R1),UCB3480     THIS A 3480 TAPE DRIVE ?THO\n         BNE   IS3420                   NO, THEN A 3420 DRIVE       THO\nIS3480   LA    R1,C'5'                  THEN INDICATE SO     \u00acSBG - THO\n         MVC   TITLE1+34(4),=C'CART'    THEN INDICATE CARTRIDGE     THO\n         NI    PARMFLAG,255-PF@DEN1     TURN OFF                    THO\n         B     TRUE$GOT                                             THO\nIS3420   LA    R1,C'3'                  ASSUME 1600 BPI             THO\n         TM    SENSDATA+3,B'00000100'   PE MODE?\n         BO    TRUE$GOT                 YES\n         LA    R1,C'4'                  ASSUME 6250 BPI\n         TM    SENSDATA+9,B'00001000'   CAPABLE OF 6250 BPI?\n         BO    TRUE$GOT                 YES\n         LA    R1,C'2'                  ELSE, 800 BPI\n         SPACE 2\nTRUE$GOT LR    R0,R1                    COPY DENSITY CHAR\n         N     R1,F15                   STRIP IT\n         SLL   R1,2                     *4\n         LA    R1,DEN#LIST(R1)          POINT TO 4 CHAR FORM\n         ST    R1,TRUE#DEN              SAVE ADDR\n         STC   R0,TRUE#DEN              SAVE 1 CHAR FORM\n         SPACE 2\n         CLI   NUMBNULL+1,0             HOW MANY NULL SKIPPED?      U14\n         BNE   NULL1ST                  MORE THAN ZERO.             U14\n         CLC   VOLLABI(4),=C'VOL1VOL1'  VOLUME LABEL?\n         BE    TPVOL1OK                 YES.\n         SPACE 3\n         MVC   VOLSERNO(6),JFCB+118     SET HERE FOR OVERPRINTING   U15\n         NEWPAGE ,                      PRINT THE HEADER LINES\n         PRTLN '0++++ NO VOL1 LABEL FOUND.  NL ANALYSIS FOLLOWS ++++'\n         BCTR  LCTR,0                   ACCOUNT FOR EXTRA BLANK LINE\n         PRTLN OUTBUFF                  BLANK LINE\n         SPACE 1\nNULL1ST  MVC   FL1ID,BLANKS             SET THE DSN                 U14\n         SPACE 3\nNL$NEXT  ST    R2,LASTSIZE         RESTORE SIZE OF FIRST BLOC 09/84 DBC\n         ST    R2,BYTECNT          INIT TOTAL BYTES READ      09/84 DBC\n         ST    R2,MAXBLKSI         INIT BIGGEST BLOCK READ    09/84 DBC\n         MVC   BLOCKCNT,F1              INIT # OF BLOCKS READ\n         MVI   NLFLAGS,NL@F             INIT NL TYPE FLAGS\n         CH    R2,TAPEBUFF              IS FIRST BLOCK RECFM=V?\n         BNE   *+8                      NO - SKIP\n         OI    NLFLAGS,NL@V             YES - SET FLAG\n         MVI   WHERE,3                  SET \"WHERE ARE WE\" FLAG\n         MVC   UNLOADER,UNLOADER-1      CLEAR INDICATOR\n         LH    R1,FILE#SEQ              GET FILE NUMBER\n         LA    R1,1(,R1)           ADJ TO IDENTIFY THE NUMBER 07/85 DBC\n*                                  OF THE FILE CURRENTLY      07/85 DBC\n*                                  BEING SCANNED              07/85 DBC\n* USE Z/OS 1.5 FILE SEQUENCE FORMAT FOR ALL SEQUENCE NUMBERS  06/06 JSM\n         STCM  R1,B'0111',FL1FILSQ STORE THE NUMBER           06/06 JSM\n         MVI   FL1FILSQ,C'?'       INDICATE NEW FORMAT NUMBER 06/06 JSM\n         SPACE 1\n*  NOW SEE IF THIS FILE IS ANYTHING SPECIAL THAT WE KNOW ABOUT.\n***      CLC   =H'800',LASTSIZE         RIGHT SIZE?\n***      BNE   NL$NMOVE                 NOT IEHMOVE\n         BA&XA R10,TEST$MV              IS IT IEHMOVE?\n         B     NL$NMOVE                 NO\n         B     IEHMOVE2                 YES - 2 PRINT FILE FORMAT\n         B     IEHMOVE1                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nNL$NMOVE CLC   TAPEBUFF(8),=H'60,0,56,0' RECFM=V,BLK=60,REC=56?\n         BE    NLTSTCPY             YES-IT'S THE OLD IEBCOPY FORMAT+SBG\n         CLC   TAPEBUFF(8),=H'64,0,60,0' IS IT IEBCOPY NEW FORMAT? +SBG\n         BNE   NL$NCOPY                 NO - NOT IEBCOPY\nNLTSTCPY BA&XA R10,TEST$CPY             IS IT VS2COPY?             +SBG\n         B     NL$NCOPY                 NO\n         B     IEBCOPY2                 YES - 2 PRINT FILE FORMAT\n         B     IEBCOPY1                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nNL$NCOPY BA&XA R10,TEST$DMP             IS IT IEHDASDR?\n         B     NL$NDSDR                 NO\n         NOP   0                        YES - BUT DON'T USE 2ND     WBF\n*                                             PRINT FILE            WBF\n         B     IHDASDR1\n         SPACE 2\n******************************************************************* SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  WHEN READING PTF TAPES WHICH HAVE APARS FIRST, AND               SBG\n*   THE APARS HAVE IEBUPDTE CONTROL CARDS IN THEM FOR SOURCE UPDATE,SBG\n*   WE WANT TAPEMAP TO THINK THAT THE TAPE HAS PTFS OR APARS,       SBG\n*   NOT IEBUPDTE CONTROL STATEMENTS, WHICH ARE SECONDARY            SBG\n*   TO THE FACT THAT WE HAVE AN APAR TAPE.                          SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n******************************************************************* SBG\n*  NOTE THAT WE DON'T WANT TO TEST FOR SMPPTFIN ON A CBT TAPE.12/88 SBG\n******************************************************************* SBG\nNL$NDSDR DS    0H                                             11/88 SBG\n         BA&XA R10,TEST$CBT             IS IT CBT973 COMPRESS 11/88 SBG\n         B     NL$NCBT                  NO                    11/88 SBG\n         B     CBT2                     YES - 2 PRINT FILE FMT11/88 SBG\n         B     CBT1                     YES - 1 PRINT FILE FMT11/88 SBG\n         SPACE 3                                              11/88 SBG\nNL$NCBT  DS    0H                       LABEL FOR NOT DASDR         SBG\n         SPACE 3                                              07/85 DBC\n         BA&XA R10,TEST$PTF        DOES FILE CONTAIN PTFS?    07/85 DBC\n         B     NL$NPTFS            +0 NO, SKIP                06/86 SBG\n         B     PTFS2               +4 YES, GO DUMP IT         07/85 DBC\n         B     PTFS1               +8 YES, JUST SAY SO        07/85 DBC\n*       NEXT 5 LINES ARE SWITCHED WITH PREV 6 LINES & NAMES CHANGED SBG\nNL$NPTFS DS    0H                                             06/86 SBG\n         BA&XA R10,TEST$UPS             MAYBE IEBUPDTE INPUT STREAM?\n         B     NL$NUPDT                 BOY WILL THIS BE UNRELIABLE SBG\n         B     IEBUPDT2                 YES - 2 PRINT FILE FORMAT\n         B     IEBUPDT1            +8 YES & 1-PRT: HANDLE     07/85 DBC\nNL$NUPDT DS    0H                                             06/86 SBG\n         BA&XA R10,TEST$FDR             IS IT FDR?            07/85 DBC\n         B     NL$NFDR                  NO\n         B     FDR2                     YES - 2 PRINT FILE FORMAT   WBF\n         B     FDR1                     YES,- 1 PRINT FILE FORMAT   WBF\n         SPACE 2\nNL$NFDR  BA&XA R10,TEST$IS              IS IT IEBISAM?        11/88 SBG\n         B     NL$NCDOC                 DIDN'T THINK SO...\n         B     IEBISAM2                 YES - 2 PRINT FILE FORMAT\n         B     IEBISAM1                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$NCDOC BA&XA R10,TEST$CH              IS IT CBT DOC FILE?   12/88 SBG\n         B     NL$NIS                   NUH UH.               12/88 SBG\n         B     NL$LOOP                  YES - DISPLAY EXTRCT'D12/88 SBG\n         B     CBTDOC1                   DATA ON REPORT #1    12/88 SBG\n         SPACE 3                                              12/88 SBG\nNL$NIS   BA&XA R10,TEST$SLK             IS IT A SLICK BACKUP?\n         B     NL$NSLK                  DIDN'T THINK SO...\n         B     SLK2                     YES - 2 PRINT FILE FORMAT\n         B     SLK1                     YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$NSLK  BA&XA R10,TEST$MAP             IS IT A TAPEMAP PRINT FILE?\n         B     NL$LOOP                  NO\n         B     MAP2                     YES - 2 PRINT FILE FORMAT\n****     B     NL$LOOP                  YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$LOOP  TAPIO TCCW#DAT,TM=NL$EOF       READ A BLOCK\n         B     NL$LOOP                  DO THAT TILL EOF\n         SPACE 2\nNL$EOF   CLI   UNLOADER,C' '            A SECOND LINE?\n         BE    *+12                     NO - SKIP\n         NEWPAGE  2                     MAKE SURE WE HAVE ENOUGH\n         SPACE 1\nNL$SL    DS    0H                                             07/85 DBC\n         LH    R1,FILE#SEQ              GET THE FILE SEQ #\n         CVD   R1,DWD                   PACK IT\n         MVC   #FILE-1(6),=X'402020202120'                    06/06 JSM\n         ED    #FILE-1(6),DWD+5                               06/06 JSM\n         SPACE 1                                              09/84 DBC\n         MVC   #UNLOAD,UNLOADER\n************************************************************* 12/88 SBG\n*  IF THIS IS A CBT HEADER, PUT THE DISPLAY INFO INTO       * 12/88 SBG\n*    THE DSNAME SLOT.  VER XXX  MM-DD-YY.                   * 12/88 SBG\n************************************************************* 12/88 SBG\n         SPACE 1                                              12/88 SBG\n         CLC   UNLOADER(8),CBHEADER     WAS IT CBTHEADER?     12/88 SBG\n         BNE   NL$CBHD                  NO. NORMAL PROCESSING 12/88 SBG\n         MVC   #DSN(17),CBHLIT     DISPLAY CBT DOC INFO       12/88 SBG\n         MVC   #DSN+4(4),CBTVERS   PUT IN VERSION NUMBER      12/88 SBG\n         MVC   #DSN+9(8),CBTDATE   PUT IN RELEASE DATE        12/88 SBG\nNL$CBHD  DS    0H                                             12/88 SBG\n         SPACE 3\n         CLC   =C'(NULL)',UNLOADER+2 SL NULL FILE?            07/85 DBC\n         BE    NLSLDONE                 YES - CAN'T DO ANYTHING\n         SPACE 1\n         MVC   #INFOSRC,=C' SCAN ' IDENTIFY INFO SOURCE       06/84 DBC\n         MVI   #RECFM,C'V'              ASSUME RECFM=V\n         TM    NLFLAGS,NL@V             IS IT?\n         BO    NL$1                     YES - CONTINUE\n         MVI   #RECFM,C'F'              ASSUME RECFM=F\n         TM    NLFLAGS,NL@F             IS IT?\n         BO    NL$1                     YES - CONTINUE\n         MVI   #RECFM,C'U'              ANYTHING ELSE IS RECFM=U\n         SPACE 2\nNL$1     L     R0,MAXBLKSI         GET SIZE OF LARGEST BLOCK  09/84 DBC\n         CVD   R0,DWD\n         MVC   #BLKSIZE(5),=X'2020202120'\n         ED    #BLKSIZE-1(6),DWD+5\n         SPACE 1\n*******  MVI   #LRECL+4,C'?'\n         SPACE 1\n         L     R0,BLOCKCNT              GET BLOCK COUNT\n         CVD   R0,DWD\n         MVC   #BLKCNT-1(7),=X'20202020202120'\n         ED    #BLKCNT-2(8),DWD+4\n         SPACE 1\n         MVC   #DEN+1(1),TRUE#DEN\n         L     R14,TRUE#DEN\n         TM    PARMFLAG,PF@DEN1\n         BO    *+10\n         MVC   #DEN,24(R14)                                         THO\n         SPACE 1\n         L     R15,BLOCKCNT             COUNT # OF GAPS\n         L     R1,BYTECNT\n         M     R1-1,=F'100'             SCALE\n         D     R1-1,0(,R14)             DIVIDE BY BYTES/INCH\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   DEN3420A                 NO, THEN 3420               THO\n         AH    R1,=Y(8)                 ADD 1 TAPEMARK              THO\n         TM    TFLAG1,T1@SL             REALLY SL?\n         BNO   *+12                     NO - SKIP\n         AH    R1,=Y(2*8)               YES - 2 MORE TAPEMARKS      THO\n         LA    R15,4(,R15)              INCR # OF GAPS\n         M     R15-1,=F'08'             EACH GAP IS .08 INCH        THO\n         B     LENCALC1                                             THO\nDEN3420A AH    R1,=Y(375)               ADD 1 TAPEMARK              THO\n         TM    TFLAG1,T1@SL             REALLY SL?                  THO\n         BNO   *+12                     NO - SKIP                   THO\n         AH    R1,=Y(2*375)             YES - 2 MORE TAPEMARKS      THO\n         LA    R15,4(,R15)              INCR # OF GAPS              THO\n         M     R15-1,=F'60'             EACH GAP IS .60 INCH\n         CLI   TRUE#DEN,C'4'            UNLESS IT'S A 6250 TAPE\n         BNE   *+8                      IT ISN'T\n         SRL   R15,1                    THEN THEY'RE .3 INCH EACH\nLENCALC1 AR    R1,R15                   ADD IN LENGTH OF GAPS       THO\n         LR    R2,R1                    SAVE\n         ICALL TAPEFEET,R14,R15=#LENGTH-2                     06/84 DBC\n         A     R2,LEN#TAPE+4\n         ST    R2,LEN#TAPE+4\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#CUMLEN-2                     06/84 DBC\n         SPACE 2\n         PRTLN OUTBUFF\n         CLI   UNLOADER,C' '            ANY SECOND PRINT LINE?\n         BE    NL$DONE                  NO - SKIP\n         TM    PARMFLAG,PF@INLIN        PARM=INLINE?\n         BNO   NL$DONE                  NO - NO SECOND LINE\n         PRTLN OUTBUFF2\n         MVC   OUTBUFF2,OUTCLR2\n         SPACE 2\nNL$DONE  TM    TFLAG1,T1@SL             THIS TAPE SL?\n         BO    NLSLDONE                 YES - DIFFERENT HANDLING\n         SPACE 1\nNL$DONEX TAPIO TCCW#DAT,TM=NULL$NL      READ NEXT FILE'S FIRST BLK  U14\n         L     R2,LASTSIZE         GET SIZE OF LAST BLOCK     09/84 DBC\n         B     NL$NEXT                  PROCESS NEXT FILE\n         SPACE 3                                              07/85 DBC\nNULL$NL  LH    R1,NUMBNULL              GET NUMBER OF NULL FILES    U14\n         LA    R1,1(,R1)                INCR                        U14\n         STH   R1,NUMBNULL              SAVE NEW COUNT              U14\n         CH    R1,NULLNUMB              DONE ENOUGH?                U14\n         BH    HAVE$EOV                 YES - STOP                  U14\n         LH    R1,FILE#SEQ         NO, GET FILE #             07/85 DBC\n         CVD   R1,DWD                   CONVERT FILE SEQUENCE 06/06 JSM\n         MVC   #FILE-1(6),=X'402020202120'  TO DIGITS         06/06 JSM\n         ED    #FILE-1(6),DWD+5                               06/06 JSM\n         MVC   #UNLOAD+2(6),=C'(NULL)'  PUT IN INDICATOR      06/84 DBC\n         PRTLN OUTBUFF                                              U14\n         L     R0,LEN#TAPE+4            GET ACCUMULATED TAPE LENGTH U14\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   DEN3420B                 NO, THEN 3420               THO\n         AH    R0,=Y(8)                 COUNT 1 TAPEMARK            THO\n         ST    R0,LEN#TAPE+4            SAVE UPDATED                U14\n         B     NL$DONEX                                             U14\nDEN3420B AH    R0,=Y(375)               COUNT 1 TAPEMARK            THO\n         ST    R0,LEN#TAPE+4            SAVE UPDATED                THO\n         B     NL$DONEX                                             THO\n         SPACE 3\n************************************************************* 12/88 SBG\n*   THIS IS THE START OF NORMAL STANDARD LABEL PROCESSING.  * 12/88 SBG\n************************************************************* 12/88 SBG\nTPVOL1OK OI    TFLAG1,T1@SL             INDICATE SL PROCESSING12/88 SBG\n         MVC   TITLE1+5(6),VOLSERNO\n         MVC   TITLE1+19(10),VOLOWNER\n         MVC   TITLE1+13(6),TITLE1+12   BLANK OUT KEYWORD\n         CLC   VOLOWNER,BLANKS          OWNER ALL BLANK?\n         BE    *+10\n         MVC   TITLE1+13(6),=C'OWNER='\n         NI    TFLAG2,255-T2@RQVOL      TURN OFF FLAG\n         CLC   VOLSERNO(6),JFCB+118     GET WHAT WE ASKED FOR?\n         BE    MATCHVOL                 YES - CONTINUE\n         OI    TFLAG2,T2@RQVOL          SET FLAG\n         SPACE 2\nMATCHVOL NEWPAGE ,                      PRINT HEADER LINES\n         NI    TFLAG1,255-T1@ANLZ       RESET FLAG\n         TM    PARMFLAG,PF@NL      NL PROCESSING FORCED?      06/84 DBC\n         BNZ   ANLZ1               YES, SET ANALYZE SIGNAL    06/84 DBC\n         TM    PARMFLAG,PF@NOCHK   NO, SCAN BYPASSED?         06/84 DBC\n         BNZ   NOANLZ1             YES, SKIP                  06/84 DBC\nANLZ1    OI    TFLAG1,T1@ANLZ      NO, SET ANALYZE SIGNAL     06/84 DBC\nNOANLZ1  DS    0H                                             06/84 DBC\n         SPACE 1\n         TM    PARMFLAG,PF@NL           FORCE NL ANALYSIS?\n         BNO   *+12                     NO - CONTINUE\nFORCENL  XI    TFLAG1,T1@SL             YES - TURN OFF FLAG\n         B     NL$NEXT                  AND GO TO NL ROUTINE\n         SPACE 1\n         MVI   WHERE,1                  SET \"WHERE ARE WE\" FLAG\n         MVC   FL1LABI(4),BLANKS        CLEAR OUT 'HDR1'      02/93 RT\n         TAPIO TCCW#LBL,TM=MAYBETT      READ THE HDR LABELS\n         B     DATAREAD                 SKIP FIRST TIME\nMAYBETT  EQU   *                                               1/93 RT\n         CLC   FL1LABI(4),=C'HDR1'      IS IT SL DOS TAPE?     1/93 RT\n         BNE   FORCENL                                         1/93 RT\n         MVI   FL2LABI,C'?'             CLEAR HDR2 TO '?'      1/93 RT\n         MVC   FL2LABI+1(70),FL2LABI                           1/93 RT\n         CLI   FL1LABI+4,C'0'      POSSIBLY IEHINITT?          1/93 RT\n         BNE   DECRFILE             NO                         1/93 RT\n         CLC   FL1LABI+5(70),FL1LABI+4      IEHINITT?          1/93 RT\n         BE    IEHINITT             YES                        1/93 RT\nDECRFILE LH    R0,FILE#SEQ         DECR TAPEMARK COUNTER       1/93 RT\n         BCTR  R0,0                                            1/93 RT\n         STH   R0,FILE#SEQ         STORE NEW VALUE             1/93 RT\n         TAPIO TCCW#BSF            BACKSPACE A FILE            1/93 RT\n         B     DATAREAD                 SKIP FIRST TIME\n         SPACE 3                                              07/85 DBC\nNLSLDONE TM    TFLAG1,T1@SL        SL-TAPE?                   07/85 DBC\n         BZ    SPACER              NO, SKIP THIS              07/85 DBC\n         CLC   =C'0001',FL1VOLSQ        FIRST VOLUME OF FILE?\n         BE    TEST$EOV                 YES.\n         CLC   =C'    ',FL1VOLSQ        MISSING VOL SEQ FLD?  02/93 RT\n         BE    TEST$EOV                 YES.                  02/93 RT\n         MVC   FVOL#MSG+22(4),FL1VOLSQ  VOL SEQ #\n         MVC   FVOL#MSG+80(6),FL1FILSR  FIRST VOLSER\n         PRTLN FVOL#MSG\n         SPACE 2\nTEST$EOV CLC   =C'EOV2',FL2LABI\n         BNE   NOT$EOV                  EOV.\n         PRTLN ' *** THE ABOVE FILE IS CONTINUED ON ANOTHER VOLUME'\n         B     HAVE$EOV            ALL DONE                   07/85 DBC\nNOT$EOV  DS    0H                                             07/85 DBC\n         SPACE 3                                              07/85 DBC\nSPACER   PRTLN OUTBUFF                  BLANK LINE\n         TAPIO TCCW#FSF                 FWD SPACE\n         MVI   WHERE,1                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#LBL,TM=MAYBET2      READ HDR LABELS\n         B     DATAREAD                                       02/93 RT\n         SPACE 1\nMAYBET2  EQU   *                                               1/93 RT\n         CLC   FL1LABI(4),=C'HDR1'      IS IT SL DOS TAPE?     1/93 RT\n         BNE   HAVE$EOV                                        1/93 RT\n         MVI   FL2LABI,C'?'             CLEAR HDR2 TO '?'      1/93 RT\n         MVC   FL2LABI+1(70),FL2LABI                           1/93 RT\n         LH    R0,FILE#SEQ         DECR TAPEMARK COUNTER       1/93 RT\n         BCTR  R0,0                                            1/93 RT\n         STH   R0,FILE#SEQ         STORE NEW VALUE             1/93 RT\n         TAPIO TCCW#BSF            BACKSPACE A FILE            1/93 RT\n         B     DATAREAD\nDATAREAD TAPIO TCCW#FSF                 SKIP TO END OF HDR LABELS\n         MVC   UNLOADER,UNLOADER-1      CLEAR UNLOADED FLAG\n         MVI   NLFLAGS,NL@V+NL@F        ASSUME RECFM=V & RECFM=F\n         MVI   WHERE,3                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#DAT,TM=NULLFILE     READ DATA\n         L     R1,LASTSIZE         GET SIZE OF (FIRST) BLOCK  09/84 DBC\n         ST    R1,MAXBLKSI         INIT BIGGEST BLOCK READ    09/84 DBC\n         AH    R1,=Y(4*80)              2 HDR + 2 EOF LABELS\n         ST    R1,BYTECNT               INIT TOTAL BYTES READ\n         MVC   BLOCKCNT,F1              INIT NUMBER OF BLOCKS READ\n         NI    NLFLAGS,255-NL@CHANG     FIRST BLOCK NOT A CHANGE\n         OI    NLFLAGS,NL@F             STILL COULD BE RECFM=F\n         SPACE 2\n         BA&XA R10,TEST$CH              TEST FOR CBT HEADER   10/90 SBG\n         B     TSTRECFM                 NOT CBTHEADER, GO ON  10/90 SBG\n         NOP   0                        NO EFFECT ON REPORT 2 10/90 SBG\n         B     TEST$LCT                 PROCESS HEADER FILE   10/90 SBG\n         SPACE 2                                              10/90 SBG\nTSTRECFM CLI   FL2RECFM,C'F'            RECFM=FB?             10/90 SBG\n         BNE   NOT$RF$F                 NO - NOT IEHMOVE OR IEBISAM\n         CLC   FL2LRECL,C00080          LRECL=80?\n         BNE   FIND$EOF                 NO - NOT IEHMOVE OR IEBISAM\n***      CLC   FL2BLKL,C00800           BLKSIZE=800?\n***      BNE   TST$UPDT                 NO - NOT IEHMOVE'D\n         CLI   FL2BLKA,C'B'             BLOCKED?\n*  SWITCH TESTS FOR SMPPTFIN AND IEBUPDTE                           SBG\n         BNE   TST$UPDT                 NO - NOT IEHMOVE'D     2/93 RT\n         BA&XA R10,TEST$MV              IS IT IEHMOVE?\n         B     TST$UPDT                 NO - TRY NEXT               SBG\n         B     IEHMOVE2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\n************************************************************* 06/86 SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  WHEN READING PTF TAPES WHICH HAVE APARS FIRST, AND               SBG\n*   THE APARS HAVE IEBUPDTE CONTROL CARDS IN THEM FOR SOURCE UPDATE,SBG\n*   WE WANT TAPEMAP TO THINK THAT THE TAPE HAS PTFS OR APARS,       SBG\n*   NOT IEBUPDTE CONTROL STATEMENTS, WHICH ARE SECONDARY            SBG\n*   TO THE FACT THAT WE HAVE AN APAR TAPE.                          SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n************************************************************* 06/86 SBG\n         SPACE 3                                              07/85 DBC\nTST$UPDT DS    0H                LABEL FOR TEST IEBUPDTE            SBG\n*                          BUT TEST FOR PTFIN COMES FIRST, SO       SBG\n*  I SWITCHED DAVE'S CODE AROUND BETWEEN THESE 3 LABELS.            SBG\n         BA&XA R10,TEST$PTF        DOES FILE CONTAIN PTFS?    07/85 DBC\n         B     TST$NPTF            +0 NO, SKIP                07/85 DBC\n         B     PTFS2               +4 YES & 2-PRT FMT; HANDLE 07/85 DBC\n         B     TEST$LCT            +8 YES & 1-PRT FMT; HANDLE 07/85 DBC\nTST$NPTF DS    0H                                             07/85 DBC\n         BA&XA R10,TEST$UPS             SEE IF IEBUPDTE INPUT STREAM\n         B     TST$NUPD            +0 PROBABLY NOT            07/85 DBC\n         B     IEBUPDT2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT            +8 YES, JUST SAY SO        07/85 DBC\nTST$NUPD DS    0H                                             07/85 DBC\n*  I SWITCHED DAVE'S CODE AROUND BETWEEN THESE 3 LABELS.            SBG\n         SPACE 3\nTST$ISAM BA&XA R10,TEST$IS              IS IT IEBISAM?\n         B     TST$MAP                  NO                    11/88 SBG\n         B     IEBISAM2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nTST$MAP  BA&XA R10,TEST$MAP             IS IT A TAPEMAP PRINT FILE?\n         B     FIND$EOF                 NO\n         B     MAP2                     YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNOT$RF$F CLC   =X'CA6D0F',TAPEBUFF+9    TEST IEBCOPY FIRST    10/05 SBG\n         BE    FORGTLBL         IEBCOPY-IGNORE WHAT'S IN LABEL08/90 SBG\n*        CLC   =X'01CA6D0F',TAPEBUFF+8  TEST IEBCOPY FOR PDSE 06/93 RT\n*        BE    FORGTLBL         IEBCOPY-IGNORE WHAT'S IN LABEL06/93 RT\n         CLI   FL2RECFM,C'V'            RECFM=V?              08/90 SBG\n         BNE   NOT$RF$V                 NO - NOT IEBCOPY'D\n         CLI   FL2BLKA,C'S'             RECFM=VS?\n         BNE   TST$CBT                  NOT VS. MAYBE CBT973. 11/88 SBG\nFORGTLBL BA&XA R10,TEST$CPY             IS IT VS2COPY?        08/90 SBG\n         B     TST$CBT                  NO - MAYBE CBT\n         B     IEBCOPY2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nTST$CBT  BA&XA R10,TEST$CBT             IS IT CBT973 COMPRESS 11/88 SBG\n         B     FIND$EOF                 NO                    11/88 SBG\n         B     CBT2                     YES - 2 PRINTFILE FMT 11/88 SBG\n         B     TEST$LCT                 YES - 1 PRINTFILE FMT 11/88 SBG\n         SPACE 3                                              11/88 SBG\nNOT$RF$V CLI   FL2RECFM,C'U'            RECFM=U?\n         BNE   FIND$EOF                 NO - NOT IEHDASDR\n         BA&XA R10,TEST$DMP             IS IT IEHDASDR?\n         B     TST$FDR                  NO\n         NOP   0                        DON'T USE 2ND PRINT FILE    WBF\n         B     TEST$LCT                 CONTINUE\n         SPACE 3\nTST$FDR  BA&XA R10,TEST$FDR             IS IT FDR?\n         B     TST$SLK                  NO\n         B     FDR2                     YES - 2 PRINT FILE FORMAT   WBF\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT   WBF\n         SPACE 3\nTST$SLK  BA&XA R10,TEST$SLK             IS IT IEBISAM?\n         B     FIND$EOF                 NO\n         B     SLK2                     YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nTEST$LCT TM    PARMFLAG,PF@INLIN        PARM=INLINE?\n         BNO   FIND$EOF                 NO - SKIP THIS\n         NEWPAGE  2                     MORE THAN 1 LINE LEFT?\n         SPACE 1\n         CLC   IEBCOPY,UNLOADER         UNLOADED BY IEBCOPY?\n         BE    IEBCOPY1                 YES - PRINT EXTRA INFO\n         CLC   IEHMOVE,UNLOADER         UNLOADED BY IEHMOVE?\n         BE    IEHMOVE1                 YES - PRINT EXTRA INFO\n         CLC   IEBISAM,UNLOADER         UNLOADED BY IEBISAM?\n         BE    IEBISAM1                 YES - PRINT EXTRA INFO\n         CLC   IEHDASDR,UNLOADER        DUMPED BY IEHDASDR?\n         BE    IHDASDR1                 YES - PRINT EXTRA INFO\n         CLC   FDR,UNLOADER             DUMPED BY FDR?\n         BE    FDR1                     YES - PRINT EXTRA INFO\n         CLC   SLICKMNG,UNLOADER        UNLOADED BY SLICK?\n         BE    SLK1                     YES - PRINT EXTRA INFO\n         CLC   CBT973,UNLOADER          CBT973 COMPRESS FORMAT11/88 SBG\n         BE    CBT1                     YES - PRINT EXTRA INFO11/88 SBG\n         CLC   CBTEMPTY,UNLOADER        CBT TAPE EMPTY FILE?  11/88 SBG\n         BE    CBTEMP1                  YES - PRINT EXTRA INFO11/88 SBG\n         CLC   CBHEADER,UNLOADER        CBT TAPE DOC FILE?    12/88 SBG\n         BE    CBTDOC1                  YES - PRINT DESCRPTN  12/88 SBG\n         CLC   SMPPTFIN,UNLOADER   SYSMODS?                   07/85 DBC\n         BE    PTFS1               YES, GO SAY SO             07/85 DBC\n         CLC   IEBUPXXX,UNLOADER   NO, UPDATE STREAM?         07/85 DBC\n         BE    IEBUPDT1            YES, GO SAY SO             07/85 DBC\n****     CLC   CTAPEMAP,UNLOADER        CREATED FOR TAPEMAP?\n****     BE    MAP1                     DOESN'T MATTER - MORE THAN\n****                                    ONE LINE OF INFO, SO CAN'T\n****                                    PRINT IT INLINE\n         SPACE 3\nFIND$EOF TM    PARMFLAG,PF@NOCHK        CHECKING SL TAPE?     06/84 DBC\n         BZ    SCAN$EOF                 YES - READ TILL EOF   06/84 DBC\n         SPACE 1\n         TAPIO TCCW#FSF                 FSF PAST REST OF DATA\n         SPACE 2\nREAD$EOF MVI   WHERE,2                  SET \"WHERE ARE WE\" FLAG\n         MVC   FL1LABI(4),BLANKS                             02/93 RT\n         TAPIO TCCW#EOV,TM=MISS$EOF     READ TRAILER LABEL\nTEST$EOF CLC   =C'EOF1',FL1LABI         TRAILER LABEL?\n         BE    HAVE$EOF                 YES - OK\n         CLC   =C'EOV1',FL1LABI         OTHER KIND?\n         BE    HAVE$EOF                 YES - OK\n         SPACE 1\nMISS$EOF PRTLN '0EOF OR EOV LABEL NOT FOUND WHERE EXPECTED'\n         B     REWINDIT                 REWIND AND LEAVE    %%%%%%%%%\n         SPACE 2\nSCAN$EOF TAPIO TCCW#DAT,TM=SL$SAVE      READ & TALLY A DATA BLOCK\n         B     SCAN$EOF                 DO THAT TILL EOF\n         SPACE 2\nSL$SAVE  MVC   NL#SAVE(16),MAXBLKSI SAVE ALL INFO            09/84 DBC\n         MVC   NL#FLAGX,NLFLAGS         MORE...\n         B     READ$EOF                 GO READ THE EOF LABELS\n         SPACE 2\nHAVE$EOF LA    R1,1                     ASSUME 1-LINE GROUPS\n         TM    PARMFLAG,PF@NOCHK        CHECKING?             06/84 DBC\n         BNZ   *+8                      NO - SKIP             06/84 DBC\n         LA    R1,2(,R1)                YES - NEED 2 MORE EACH\n         CLI   UNLOADER,C' '            IS THIS FILE UNLOADED?\n         BE    *+8                      NO - SKIP\n         LA    R1,1(,R1)                YES - NEED 1 MORE LINE\n         TM    PARMFLAG,PF@INLIN        INLINE INFO?          12/88 SBG\n         BZ    *+8                      NO - SKIP             12/88 SBG\n         LA    R1,1(,R1)                YES - NEED EXTRA LINE 12/88 SBG\n         LR    R0,R1                    COPY FOR STUPID MACRO\n         NEWPAGE  (R0)                  CHECK FOR ENOUGH LINES\n         SPACE 2\n         TM    PARMFLAG,PF@NOCHK   SL TAPE WITH NL SCANNING?  07/85 DBC\n         BZ    BYWHOZ              YES, DEFER NAMING THE      07/85 DBC\n*                                  UNLOADER UNTIL I BUILD THE 07/85 DBC\n*                                  \"SCAN\" LINE MESSAGE.       07/85 DBC\n         MVC   #UNLOAD,UNLOADER         SAY WHO UNLOADED IT\nBYWHOZ   DS    0H                                             07/85 DBC\n         CLI   FL1FILSQ,C'?'       BINARY FILE SEQUENCE?      06/06 JSM\n         BNE   Z15001              BR IF NOT                  06/06 JSM\n         SR    R1,R1               SET REG 1 = 0              06/06 JSM\n         ICM   R1,B'0111',FL1FILSQ LOAD THE FILE SEQUENCE     06/06 JSM\n         CVD   R1,DWD              CONVERT TO DIGITS          06/06 JSM\n         OI    DWD+7,X'0F'                                    06/06 JSM\n         UNPK  #FILE,DWD                                      06/06 JSM\n         B     Z15002              AND CONTINUE               06/06 JSM\nZ15001   MVI   #FILE,C'0'          PREPARE 1ST BYTE           06/06 JSM\n         MVC   #FILE+1(4),FL1FILSQ      FILE #                06/06 JSM\nZ15002   DC    0H'0'                                          06/06 JSM\n         ICALL DEZERO,R14,R1=#FILE      REMOVE LEADING ZEROES\n         MVC   #DSN(17),FL1ID           DSN\n         CLI   FL1FSEC,C'0'             PASSWORD PROTECTED?\n         BE    NOTPSWD                  NO - SKIP\n         CLI   FL1FSEC,C'1'             PASSWORD PROTECTED?\n         BE    YESPSWD                  YES - MOVE IT IN\n         CLI   FL1FSEC,C'3'             NOPWREAD?\n         BNE   WHATPSWD                 NO - WHAT THEN????\n         MVC   #PSWD,=C' WRT'           YES                   06/84 DBC\n         B     NOTPSWD                  CONTINUE\nWHATPSWD MVC   #PSWD,=C' ???'           SAY WHAT?             06/84 DBC\n         B     NOTPSWD\nYESPSWD  MVC   #PSWD,=C' YES'           SAY SO.               06/84 DBC\n         SPACE 3\nNOTPSWD  MVC   #CDATE(2),FL1CREDT+1     YEAR CREATED\n         MVI   #CDATE+2,C'.'\n         MVC   #CDATE+3(3),FL1CREDT+3   DAY CREATED\n         MVC   #EDATE(2),FL1EXPDT+1     YEAR EXPIRES\n         MVI   #EDATE+2,C'.'\n         MVC   #EDATE+3(3),FL1EXPDT+3   DAY EXPIRES\n         SPACE 3                                              06/84 DBC\n         MVC   #INFOSRC,=C'LABELS' SHOW INFO SOURCE           06/84 DBC\n         MVC   #BLKCNT(6),FL1BLKCT      BLOCK COUNT\n         ICALL DEZERO,R14,R1=#BLKCNT    REMOVE LEADING ZEROES\n         SPACE 2\n         MVC   #RECFM(1),FL2RECFM       RECFM\n         MVC   #RECFM+1(1),FL2BLKA      BLOCK ATTRIBUTE\n         MVC   #RECFM+2(1),FL2CNTRL     CONTROL CHARACTER\n         CLI   #RECFM+1,C'R'            WEIRDO RECFM?  (FR OR VR)\n         BNE   NOT$RF$R                 NOT RECFM=FR OR VR\n         MVC   #RECFM+3(1),#RECFM+2     MOVE CTL CHAR OVER\n         MVC   #RECFM+1(2),=C'BS'       IT'S REALLY FBS OR VBS\nNOT$RF$R MVC   #BLKSIZE(5),FL2BLKL      BLOCK LENGTH\n         ICALL DEZERO,R14,R1=#BLKSIZE   REMOVE LEADING ZEROES\n         MVC   #LRECL(5),FL2LRECL       RECORD LENGTH\n         ICALL DEZERO,R14,R1=#LRECL     REMOVE LEADING ZEROES\n         CLI   FL2DEN,C'?'              WAS A \"DOS SL\" TAPE FOUND?  JCH\n         BNE   *+10                     NO -> HDR2 VALUE IS VALID   JCH\n         MVC   FL2DEN(1),TRUE#DEN       YES-> USE ACTUAL AS VALUE   JCH\n         CLI   TRUE#DEN,C'5'            3480 CARTRIDGE ?            THO\n         BNE   *+8                      NO THEN BYPASS MOD          THO\n         MVI   FL2DEN,C'5'              MODIFY WITH 3480 DEN        THO\n         IC    R15,FL2DEN               GET TAPE DENSITY\n         STC   R15,#DEN+1               SET IN PRINT LINE\n         CLC   TRUE#DEN(1),FL2DEN       LABEL CORRECT?\n         BE    *+8                      YES - OK\n         OI    TFLAG1,T1@BADEN          SET BAD DENSITY FLAG\n         N     R15,F15                  JUST DIGIT\n         SLL   R15,2                    MULTIPLY BY 4\n         LA    R3,DEN#LIST(R15)         POINT TO DENSITY VALUE\n         TM    PARMFLAG,PF@DEN1         PARM=DEN1?\n         BO    DEN$1                    YES - LEAVE 1 CHAR DEN\n         CLI   FL2DEN,C'5'              TOO HIGH?                   THO\n         BH    DEN$1                    YES - SKIP\n         CLI   FL2DEN,C'0'              TOO LOW?\n         BL    DEN$1                    YES - SKIP\n         MVC   #DEN,24(R3)              MOVE CHAR FORM OF DENSITY   THO\n         SPACE 1\nDEN$1    MVC   #TRTCH+1(2),FL2TRTCH     TAPE RECORDING TECHNI 06/84 DBC\n         SPACE 1                                              06/84 DBC\n         MVC   #CREATOR(8),FL2JOBD GET CREATING JOBNAME       06/84 DBC\n         CLI   FL2STEPD,C' '       IS THERE A STEPNAME?       06/84 DBC\n         BE    GOTCREAT            NO, SKIP                   06/84 DBC\n         MVI   #CREATOR-1,C'X'     YES, SET SCAN STOPPER      06/84 DBC\n         LA    R1,#CREATOR+8       LOAD BACK-SCANNER          06/84 DBC\n         BA&XA.R R14,0             LOAD LOOP HEAD             06/84 DBC\n         BCTR  R1,0                BACK SCAN                  06/84 DBC\n         CLI   0(R1),C' '          EO-JOBNAME YET?            06/84 DBC\n         BER   R14                 NO, CONTINUE BACKSCAN      06/84 DBC\n         MVI   1(R1),C'/'          YES, INSERT SEPARATOR      06/84 DBC\n         MVC   2(8,R1),FL2STEPD    GET STEPNAME               06/84 DBC\n         MVI   #CREATOR-1,C' '     CLEAR STOPPER              06/84 DBC\nGOTCREAT DS    0H                                             06/84 DBC\n         SPACE 2\n*    *****  COMPUTE THE LENGTH (INCHES) OF THIS TAPE DATA SET.\n         SPACE 1                                              06/84 DBC\n         TM    PARMFLAG,PF@NOCHK   DON'T DO IT IF A SCAN IS - 06/84 DBC\n         BZ    SKIPGUES             BEING DONE ANYWAY         06/84 DBC\n         SPACE 1\n         PACK  DWD,FL1BLKCT(6)          BLOCK COUNT\n         CVB   R15,DWD                  SAVE BLOCK COUNT\n         LA    R1,4(,R15)               ADD 4 GAPS TO BLOCK COUNT.\n         L     R3,TRUE#DEN              GET PTR TO TRUE DENSITY\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   *+12                     NO, THEN 3420               THO\n         M     R1-1,=F'08'              EACH GAP IS .08 INCH        THO\n         B     *+20                                                 THO\n         M     R1-1,=F'60'              EACH GAP IS 6/10 INCH\n*  NOTE - LENGTH KEPT IN .01 INCHES\n         CLI   TRUE#DEN,C'4'            6250 BPI?\n         BNE   *+8                      NO - SKIP\n         SRL   R1,1                     GAPS AT 6250 ARE .3 INCH\n         LR    R2,R1                    SAVE LENGTH OF GAPS\n         PACK  DWD,FL2BLKL(5)           BLKSIZE.\n         CVB   R1,DWD\n         MR    R1-1,R15                 BLKSIZE * BLOCK_COUNT\n         AH    R1,=Y(4*80)              2 HDR & 2 EOF LABELS\n         M     R1-1,=F'100'             CONVERT TO .01\n         D     R1-1,0(,R3)              DIVIDE BY DENSITY.\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   *+12                     NO, THEN 3420               THO\n         AH    R1,=Y(8*3)               3 TAPEMARKS @ 0.08 INCH     THO\n         B     *+8                                                  THO\n         AH    R1,=Y(375*3)             3 TAPEMARKS @ 3.75 INCH\n         AR    R2,R1                    ADD TO LENGTH OF DATA\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#LENGTH-2 FORMAT FILE LENGTH  06/84 DBC\n         A     R2,LEN#TAPE              ADD TO TOTAL LENGTH\n         ST    R2,LEN#TAPE              SAVE NEW TOTAL LENGTH\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#CUMLEN-2 FORMAT CUMULATIVE L 06/84 DBC\nSKIPGUES DS    0H                                             06/84 DBC\n         SPACE 1\n         PRTLN OUTBUFF\n         SPACE 2\n         TM    PARMFLAG,PF@NOCHK        SL WITH NL ANALYSIS?  06/84 DBC\n         BNZ   NO$CHECK                 NO - SEE IF SECOND LI 06/84 DBC\n         MVC   MAXBLKSI(16),NL#SAVE RESTORE INFO              09/84 DBC\n         MVC   NLFLAGS,NL#FLAGX         MORE...\n         B     NL$SL                    YES - GO DO IT\n         SPACE 2\nNO$CHECK TM    PARMFLAG,PF@INLIN        INLINE MESSAGES?\n         BNO   NLSLDONE                 NO - DO NEXT FILE\n         CLI   UNLOADER,C' '            UNLOADED?\n         BE    NLSLDONE                 NO - DO NEXT FILE\n         PRTLN OUTBUFF2                 PRINT TRUE ATTRS OF UNLOADED DS\n         MVC   OUTBUFF2,OUTCLR2         CLEAR OTHER PRINT LINE\n         B     NLSLDONE                 DO NEXT FILE\n         SPACE 3\nHAVE$EOV PRTLN '-     *** EOV ***'\n         CLC   LCTR2,=F'0'              ANYTHING PRINTED ON OTHER PAGE?\n         BZ    NO$EOV2                  NO - SKIP\n         MVC   OUTBUFF2(17),=C'-     *** EOV ***'\n         PRTLN2                         FLAG END OF OTHER PRINT FILE\n         SPACE 1\nNO$EOV2  TM    TFLAG1,T1@BADEN          ANY INCORRECT DENSITIES?\n         BNO   NO$BADEN                 NO - SKIP\n         LA    R0,9                     ASSUME NOT PARM=NONOTE\n         TM    PARMFLAG,PF@NONOT        WANT THE NOTE?\n         BNO   *+8                      YES - SO USE 9\n         LA    R0,6                     PARM=NONOTE, SO USE 6\n         NEWPAGE  (R0)                  GO TO TOP OF PAGE IF NEEDED\n         LA    LCTR,1(,LCTR)            WILL CALL PRTLN 1 EXTRA TIME\n         MVC   OUTBUFF(113),INCORLAB    REPL LITERAL BY FIELD 10/90 SBG\n*                                       FOR ADDRESSABILITY    10/90 SBG\n         L     R2,TRUE#DEN              GET PTR TO 4 CHAR TRUE DEN\n         CLI   TRUE#DEN,C'2'            800 BPI?\n         BNE   *+6                      NO - OK\n         BCTR  R2,0                     RIGHT JUSTIFY THE \"800\"\n         MVC   OUTBUFF+98(4),20(R2)     MOVE INTO PRINT LINE\n         PRTLN OUTBUFF\n         MVI   OUTBUFF,C'+'             SET FOR OVERPRINT\n         MVC   OUTBUFF+98(4),20(R2)     LIGHT UP THE DENSITY\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE\n         BA&XA R14,PUTPRTLN             PRINT IT ONCE (NO CLEAR OUTBUFF\n         PRTLN OUTBUFF                  AND THE THIRD TIME\n         SPACE 2\nNO$BADEN TM    PARMFLAG,PF@NONOT        WANT THE NOTE?\n         BO    REWINDIT                 NO - SO DON'T\n         NEWPAGE  4                     ENOUGH LINES LEFT ON PAGE?\n         PRTLN '0NOTE:  LENGTH(S) ARE COMPUTED, (BASED ON BLKSIZE, BLKC$\n               OUNT, AND DENSITY), AND ARE THEREFORE ONLY APPROXIMATE.'\n         TM    TFLAG1,T1@ANLZ           ANALYZING?\n         BO    REWINDIT                 YES - GOOD LENGTHS PRINTED\n         PRTLN '        LENGTHS FOR RECFMS OTHER THAN F,FB,ETC MAY NOT $\n               BE VERY CLOSE TO THE TRUE LENGTH.'\n         SPACE 2\nREWINDIT TAPIO TCCW#RWD                 REWIND THE TAPE\n         SPACE 2\nCLOSE$TP CLOSE MF=(E,TAPEMFL)\n         SPACE 2\nRETURN   L     R14,RET#ADDR             GET RETURN ADDR\n         BR    R14\n         SPACE 2\nNULLFILE MVC   UNLOADER+2(6),=C'(NULL)' PUT IN INDICATOR      06/84 DBC\n         TAPIO TCCW#LBL   %%%%%         READ EOF'S                %%%%%\n         B     TEST$EOF   %%%%%         TEST FOR 'EOF'            %%%%%\n         SPACE 2\nUNEXTPMK PRTLN '0*** UNEXPECTED TAPE MARK ***'\n         B     REWINDIT                 CLOSE UP & LEAVE\n         SPACE 2\nLEADTPMK NEWPAGE  ,                     PRINT THE HEADER LINES\n         PRTLN '0++++ TAPE HAS LEADING TAPE MARK ++++'\n         BCTR  LCTR,0                   ACCOUNT FOR EXTRA BLANK LINE\n         PRTLN OUTBUFF                  BLANK LINE\n         MVI   VOLLABI,C'X'             INSURE NL ROUTINE\n         MVI   NUMBNULL+1,1             INIT NUMBER OF NULL FILES   U14\n         TAPIO TCCW#DAT,TM=LEAD$EOV     READ FIRST BLOCK FROM FILE  U14\n         B     DO$SENSE                 DO NL ANALYSIS\n         SPACE 2\nLEAD$EOV MVI   NUMBNULL+1,2             SET NUMBER OF NULL FILES    U14\n         CLI   NULLNUMB+1,2             TOO MANY?                   U14\n         BL    HAVE$EOV                 YES - STOP                  U14\n         MVC   #UNLOAD+2(6),=C'(NULL)'  FLAG IT               06/84 DBC\n         MVI   #FILE+4,C'1'             SET FOR PRINT         06/06 JSM\n         PRTLN OUTBUFF                                              U14\n         B     DO$SENSE                                             U14\n         SPACE 2\nIEHINITT PRTLN '-++++ TAPE HAS BEEN RE-LABELLED WITH IEHINITT ++++'\n         B     REWINDIT                 ...\n         EJECT\nTEST$MV  CLC   =C'UNLOADED',TAPEBUFF+16 IEHMOVE'S TRADEMARK?\n         BNER  R10                      NO\n         MVC   UNLOADER(7),IEHMOVE      SAY WHO\n         SPACE 1\nTEST$RET IFP2  Y,4(,R10)                RETURN POINT FOR 2 PRINT FILES\n         B     8(,R10)                  RETURN POINT FOR 1 PRINT FILE\n         SPACE 2\n************************************************************  11/88 SBG\n* THE CBT973 COMPRESS PROGRAM MAY BE FOUND IN SOURCE FORM  *  11/88 SBG\n* ON THE CBT MODS TAPE, FILE (2,NL), RECFM=FB,LRECL=80,    *  11/88 SBG\n* BLKSIZE=32720.  IT TAKES 80-BYTE FB RECORDS AS INPUT,    *  11/88 SBG\n* AND PRODUCES 94-BYTE LRECL, VB RECORDS AS OUTPUT.        *  11/88 SBG\n*                                                          *  11/88 SBG\n* DATA COMPRESSION TAKES THE FORM OF SQUEEZING OUT BLANKS. *  11/88 SBG\n* A 10-BYTE BIT MAP HEADER TELLS THE PROGRAM WHICH OF THE  *  11/88 SBG\n* 80 CHARACTERS WERE BLANKS, AND WHICH WERE NOT.  A RDW    *  11/88 SBG\n* PRECEDES THE 10-BYTE BIT MAP, FOLLOWED BY THE NON-BLANK  *  11/88 SBG\n* BYTES OF THE RECORD.  THE PROGRAM COUNTS ON A LOT OF     *  11/88 SBG\n* BLANK CHARACTERS IN THE RECORD, TO ALLOW COMPRESSION     *  11/88 SBG\n* TO BE ACHIEVED.                                          *  11/88 SBG\n*                                                          *  11/88 SBG\n* IT IS THE PRACTICE ON THE CBT TAPE TO IEBUPDTE-UNLOAD    *  11/88 SBG\n* A SOURCE-FORMAT PDS TO A SEQUENTIAL FILE, AND THEN TO    *  11/88 SBG\n* COMPRESS THE BLANKS OUT WITH THE CBT973 PROGRAM WHEN     *  11/88 SBG\n* UNLOADING THE FILE ON TO THE CBT TAPE.  TAPEMAP USES     *  11/88 SBG\n* THE CBT973 DECOMPRESS ALGORITHM TO DECOMPRESS ONE        *  11/88 SBG\n* 80-BYTE RECORD AT A TIME, AND THEN USES ITS IEBUPDTE     *  11/88 SBG\n* MEMBER NAME INTERPRETATION ON EACH DECOMPRESSED RECORD.  *  11/88 SBG\n*                                                          *  11/88 SBG\n* MEMBER NAMES IN UNLOADED LIBRARIES ARE THUS DIRECTLY     *  12/88 SBG\n* REPORTED BY DOING A \"TAPEMAP\" RUN ON A CBT TAPE.         *  11/88 SBG\n*                                                          *  12/88 SBG\n* USUALLY ANY FB 80-BYTE LRECL NON-IEBUPDTE FILES ARE ALSO *  12/88 SBG\n* COMPRESSED.  THESE FILES WILL APPEAR ON REPORT 2 BUT     *  12/88 SBG\n* WILL NOT SHOW AS HAVING ANY MEMBERS.                     *  12/88 SBG\n************************************************************  11/88 SBG\nTEST$CBT CLC   TAPEBUFF+2(3),=X'000000' LOOK LIKE BDW+X'00'?  11/88 SBG\n         BNER  R10                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+0(2),=X'0000'   LOOK LIKE BDW?        11/88 SBG\n         BER   R10                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+6(2),=X'0000'   LOOK LIKE RDW?        11/88 SBG\n         BNER  R10                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+4(2),=X'0000'   LOOK LIKE RDW?        11/88 SBG\n         BER   R10                      NO CAN'T BE CBT973 FMT11/88 SBG\nTEST$CBA LA    R1,TAPEBUFF+4    IF CBT973, THEN START OF RDW  11/88 SBG\n         LH    R3,0(,R1)    DON'T BE MODULO 256..SAVE IT ALL. 07/90 SBG\n         C     R3,=F'94'            LRECL=94 MAX FOR CBT973.  11/88 SBG\n         BHR   R10                  BETWEEN 95 & 255, NOT CBT 11/88 SBG\n         ST    R4,CBSAVE4           USE R4 FOR WKREG          11/88 SBG\n         LH    R4,TAPEBUFF          GET BLKSIZE FROM BDW      11/88 SBG\n         S     R4,=F'4'             4 LESS FOR COMPARE W/RECSZ11/88 SBG\n         CR    R3,R4                ONE RECORD IN THIS BLOCK? 11/88 SBG\n         BL    TEST$CBN             YES. SKIP TEST PAST EO-REC11/88 SBG\n************************************************************* 12/88 SBG\n*   \"EMPTY FILES\" ON THE CBT TAPE ARE NOT REALLY EMPTY.     * 12/88 SBG\n*    THEY ARE ONE-RECORD CBT973 COMPRESSED FILES WITH A     * 12/88 SBG\n*    CERTAIN FIXED LITERAL EXPRESSION ON THE ONE CARD.      * 12/88 SBG\n*    A USER OF THE CBT TAPE WOULD LIKE TO KNOW WHICH TAPE   * 12/88 SBG\n*    FILES ARE CONSIDERED \"EMPTY\" BY THE TAPE ADMINISTRATOR.* 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBL CLC   14(L'EMPTYLIT,R1),EMPTYLIT   CBT \"EMPTY\" FILE? 11/88 SBG\n         BE    TEST$CBE             FLAG AS CBT EMPTY FILE    12/88 SBG\n         CLC   14(L'EMPTYLI2,R1),EMPTYLI2   OLD \"EMPTY\" FILE? 12/88 SBG\n         BNE   TEST$CBN             NO-STILL TEST FOR CBT973. 12/88 SBG\n************************************************************* 12/88 SBG\n*   AN \"EMPTY FILE\" ON THE CBT TAPE HAS BEEN FOUND.         * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBE MVC   UNLOADER(8),CBTEMPTY  REPORT AS EMPTY.         12/88 SBG\n         L     R4,CBSAVE4           RESTORE REG 4             11/88 SBG\n         TM    TFLAG2,T2@PRT2       IS SECOND REPORT WANTED?  12/88 SBG\n         BOR   R10            NO SECOND REPORT FOR EMPTY FILE 12/88 SBG\n         B     8(,R10)        WE WANT TO FLAG IF ONE REPORT   12/88 SBG\n************************************************************* 12/88 SBG\n*   CBTEMPTY IS FLAGGED ON 'PARM=INLINE', BUT WE DON'T WANT * 12/88 SBG\n*    WANT EMPTY CBT FILES REPORTED ON THE SECOND REPORT     * 12/88 SBG\n*    TO CONFUSE SOMEONE WHO MAY THINK IT IS A NONTRIVIAL    * 12/88 SBG\n*    NON-IEBUPDTE CBT973-COMPRESSED FILE.                   * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBN DS    0H                   NOT CBT EMPTY FILE        11/88 SBG\n         AR    R3,R1                PAST RECORD END           11/88 SBG\n         LH    R4,0(,R3)            GET SECOND RECORD SIZE    11/88 SBG\n         C     R4,=F'14'            SEE IF LESS THAN 14       11/88 SBG\n         BL    TEST$CJ1             LESS THAN 14 IS NO GOOD   08/90 SBG\n         C     R4,=F'94'            SEE IF MORE THAN 94       08/90 SBG\n         BNH   TEST$CJ2             IN BETWEEN, TEST FURTHER  08/90 SBG\nTEST$CJ1 L     R4,CBSAVE4           RESTORE REG 4 BEFORE RET  08/90 SBG\n         BR    R10                  GO BACK TO CALLER         08/90 SBG\nTEST$CJ2 CLI   0(R3),X'00'          IF CBT973, MUST BE X'00'  08/90 SBG\n         BNER  R10                  NOT SO, THEN NOT CBT973   11/88 SBG\n         CLI   1(R3),X'00'          IF CBT973, CAN'T BE X'00' 11/88 SBG\n         BER   R10                  IT IS, THEN NOT CBT973    11/88 SBG\n         CLC   2(2,R3),=X'0000'     LOOK LIKE RDW?            11/88 SBG\n         BNER  R10                  NO. CAN'T BE CBT973 FMT   11/88 SBG\nTEST$CBM LA    R1,14(,R1)           GO TO \"NONBLANK\" DATA     11/88 SBG\nTEST$CBO CLI   0(R1),X'40'          HAD BETTER NOT BE A BLANK 11/88 SBG\n         BER   R10                  IT IS A BLANK. NO GOOD.   11/88 SBG\n         LA    R1,1(,R1)            BUMP ONE BYTE             11/88 SBG\n         CR    R1,R3                END OF NONBLANK DATA?     11/88 SBG\n         BL    TEST$CBO             NO, KEEP TRYING           11/88 SBG\n         MVC   UNLOADER(6),CBT973   ASSUME CBT973 FORMAT      11/88 SBG\n         B     TEST$RET                 RETURN                11/88 SBG\n         SPACE 2                                              11/88 SBG\nTEST$CPY CLC   =X'CA6D0F',TAPEBUFF+9    VS2COPY'S TRADEMARK?  10/05 SBG\n         BE    TEST$CYY                 YES                   06/93 RT\n         CLC   =X'CA6D0F',TAPEBUFF+9    VS2COPY'S PDSE MK?    10/05 SBG\n         BNER  R10                      NO\nTEST$CYY MVC   UNLOADER(7),IEBCOPY      SAY WHO\n         B     TEST$RET                 RETURN\n         SPACE 2\nTEST$UPS ST    R10,DWD                  SAVE MY RETURN ADDR\n         LA    R2,80                    BXLE INCR\n         LA    R15,TAPEBUFF             BXLE START\n         LR    R3,R15                   COPY FOR END\n         A     R3,LASTSIZE         POINT PAST END            09/84 DBC\n         SR    R3,R2                    POINT TO LAST CARD IN BLOCK\n         SPACE 1\nTEST$UPL LR    R1,R15                   COPY CARD START ADDR\n         BA&XA R10,TEST$UP              IS THIS IEBUPDTE CTL CARD?\n         B     TEST$UPB                 NO - GO BXLE\n         MVC   UNLOADER(8),IEBUPXXX SAY WHO                   06/84 DBC\n         L     R10,DWD                  GET BACK MY RETURN ADDR\n         B     TEST$RET                 AND RETURN TO CALLER\n         SPACE 1\nTEST$UPB BXLE  R15,R2,TEST$UPL          TRY ALL CARDS IN THIS BLOCK\n         L     R10,DWD                  RESTORE RETURN ADDR\n         BR    R10                      NOT IEBUPDTE INPUT STREAM\n         SPACE 2\nTEST$UP  CLC   =C'./',0(R1)             START RIGHT?\n         MVI   UPDTXFLG,C' '            ASSUME ./ CONTROL CARD11/88 SBG\n         BE    TEST$UPC                 CONTINUE              11/88 SBG\nTEST$UPX CLC   =C'><',0(R1)             SUBORDINATE MEMBER?   11/88 SBG\n         BNER  R10                      NO - THAT WAS QUICK\n         MVI   UPDTXFLG,C'>'            REALLY >< CONTROL CARD11/88 SBG\nTEST$UPC DS    0H                       CONTINUE PROCESSING   11/88 SBG\n         LA    R1,2(,R1)                POINT TO SCAN START\n         LA    R0,69                    MAX SCAN LENGTH\n         BA&XA R14,F$BLANK              FIND END OF NAME FIELD\n         BA&XA R14,F$CHARS              FIND THE VERB\n         CLC   =C'ADD ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'REPL ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'CHANGE ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'CHNGE ',0(R1)    IEBUPDAT TYPE CHANGE?      06/84 DBC\n         BNER  R10                 NO, RETURN EMPTY HANDED    06/84 DBC\n         SPACE 2\nTU$SAVE  MVC   UPDT#TYP(1),0(R1)        A,R,C\n         MVC   IEBUPXXX,=C'IEBUPDTE' ASSUMPTION               06/84 DBC\n         STM   R0,R1,TU$SAVE2      SAVE SCANNER               06/84 DBC\n         SPACE 1\nTU$LOOP  LA    R1,1(,R1)\n         CLC   =C'MEMBER=',0(R1)\n         BE    TU$MEM\n         CLC   =C'NAME=',0(R1)\n         BE    TU$NAM\n         BCT   R0,TU$LOOP               SCAN THE REST OF THE CARD\n         SPACE 3                                              06/84 DBC\n************************************************************* 06/84 DBC\n*        THIS IS NOT AN INTERESTING IEBUPDTE TYPE CARD, BUT * 06/84 DBC\n*        IT STILL MIGHT BE AN INTERESTING IEBUPDAT TYPE     * 06/84 DBC\n*        CARD. SCAN TO SEE IF THE OPERAND FIELDS START WITH * 06/84 DBC\n*        A FIRST POSITIONAL PARAMETER THAT IS A MEMBER      * 06/84 DBC\n*        NAME.                                              * 06/84 DBC\n************************************************************* 06/84 DBC\n         SPACE 1                                              06/84 DBC\n         LM    R0,R1,TU$SAVE2      RESTORE VERB PTR           06/84 DBC\n         BA&XA R14,F$BLANK         SCAN PAST THE VERB         06/84 DBC\n         BA&XA R14,F$CHARS         SCAN TO THE OPERANDS       06/84 DBC\n         STM   R0,R1,TU$SAVE2      SAVE OPERANDS PTR          06/84 DBC\n         SPACE 1                                              06/84 DBC\n         LA    R0,9                MAX L'NAME+1               06/84 DBC\n         BA&XA.R  R14,0            LOOP HEAD                  06/84 DBC\n         CLI   0(R1),C'='          IEBUPDTE TYPE CARD?        06/84 DBC\n         BER   R10                 YES, GIVE UP               06/84 DBC\n         CLI   0(R1),C','          NO, EO-1ST OPERAND?        06/84 DBC\n         BE    TU$UPDAT            YES, GO SAVE               06/84 DBC\n         CLI   0(R1),C' '          MAYBE, CHECK AGAIN         06/84 DBC\n         BE    TU$UPDAT            YES, GO SAVE               06/84 DBC\n         LA    R1,1(,R1)           NO, ADVANCE SCANNER        06/84 DBC\n         BCTR  R0,R14              LOOP BACK                  06/84 DBC\n         BR    R10                 1ST OPERAND TOO LONG; GVUP 06/84 DBC\n         SPACE 1                                              06/84 DBC\nTU$UPDAT MVC   IEBUPXXX,=C'IEBUPDAT' RESET \"UNLOADER\" NAME    06/84 DBC\n         LM    R0,R1,TU$SAVE2      RESTORE NAME POINTER       06/84 DBC\n         B     4(,R10)             RETURN WITH NAME           06/84 DBC\n         SPACE 2\nTU$MEM   LA    R1,7(,R1)                POINT TO MEMBER NAME\n         B     *+8                      SKIP OTHER LA\n         SPACE 1\nTU$NAM   LA    R1,5(,R1)                POINT TO MEMBER NAME\n         SPACE 1\n         MVI   8(R1),C','               BE SURE TO STOP\n         B     4(,R10)                  FOUND A NAME\n         EJECT ,                                              07/85 DBC\n************************************************************* 07/85 DBC\n*        TEST TO SEE IF THE CURRENT FILE IS A SMPPTFIN      * 07/85 DBC\n*        FILE.                                              * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTF ST    R10,DWD             SAVE THE RETURN PTR        07/85 DBC\n         LA    R2,80               GET BXLE SCANNER           07/85 DBC\n         LA    R15,TAPEBUFF        --> TAPE BUFFER            07/85 DBC\n         LR    R3,R15              GET -                      07/85 DBC\n         AL    R3,LASTSIZE          BXLE -                    07/85 DBC\n         SLR   R3,R2                 LIMIT                    07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTL LR    R1,R15              --> NEXT CARD              07/85 DBC\n         BA&XA R10,TEST$PT         SEE IF IT'S ++PTF, ++APAR, 07/85 DBC\n*                                  ++FUNCTION, OR ++USERMOD   07/85 DBC\n         B     TEST$PTB            +0 NOPE, SKIP TO NEXT CARD 07/85 DBC\n         MVC   UNLOADER(8),SMPPTFIN +4 YEP, NAME THE          07/85 DBC\n*                                  \"UNLOADER\"                 07/85 DBC\n         L     R10,DWD             RESTORE RETURN ADDRESS     07/85 DBC\n         B     TEST$RET            GO RETURN TO CALLER        07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTB BXLE  R15,R2,TEST$PTL     ADVANCE TO NEXT CARD AND   07/85 DBC\n*                                  LOOP TO TEST IT            07/85 DBC\n         SPACE 1                                              07/85 DBC\n         L     R10,DWD             NO ++PTF ATC. CARD WAS     07/85 DBC\n*                                  FOUND. RESTORE LINK        07/85 DBC\n         BR    R10                 RETURN EMPTY HANDED        07/85 DBC\n         SPACE 3                                              07/85 DBC\n************************************************************* 07/85 DBC\n*        SEE IF THE CURRENT RECORD IS A SMP SYSMOD HEADER   * 07/85 DBC\n*        CARD (++PTF, ++APAR, ++FUNCTION, OR ++USERMOD).    * 07/85 DBC\n*        NOTE, THIS SCAN EXAMINES ONLY ONE CARD AT A TIME.  * 07/85 DBC\n*        ACCORDINGLY, IT WILL WORK ONLY IF THE SYSMOD'S     * 07/85 DBC\n*        NAME IS NOT CONTINUED ONTO ANOTHER CARD.           * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PT  CLC   =C'++',0(R1)        PLUSPLUS CARD?             07/85 DBC\n         BNER  R10                 NO, RETURN +0              07/85 DBC\n         LA    R1,2(,R1)           YES, ADVANCE SCANNER       07/85 DBC\n         LA    R0,69               LOAD SCAN LIMIT            07/85 DBC\n         BA&XA R14,F$CHARS         SKIP BLANKS                07/85 DBC\n         SPACE 1                                              07/85 DBC\n         LA    R14,7               L'SYSMOD TYPE NAME         07/85 DBC\n         CLC   =C'USERMOD',0(R1)   ++USERMOD?                 07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         LA    R14,3               NO, RESET L'NAME           07/85 DBC\n         CLC   =C'PTF',0(R1)       ++PTF?                     07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         LA    R14,8               NO, RESET L'NAME           07/85 DBC\n         CLC   =C'FUNCTION',0(R1)  ++FUNCTION?                07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         LA    R14,4               YES, SET L'NAME            07/85 DBC\n         CLC   =C'APAR',0(R1)      NO, ++APAR?                07/85 DBC\n         BE    TP$SAVE             YES. GO ON.\n* --- >>      SMPPTFIN STATEMENTS NOT TO BE REPORTED - BELOW\n*             THESE STATEMENTS SHOW THAT THE FILE IS\n*             SMPPTFIN, BUT THEY DO NOT INDICATE SYSMODS.\n         LA    R14,6               NO, RESET L'NAME\n         CLC   =C'ASSIGN',0(R1)    ++ASSIGN\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         LA    R14,4               NO, RESET L'NAME\n         CLC   =C'HOLD',0(R1)      ++HOLD\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         LA    R14,7               NO, RESET L'NAME\n         CLC   =C'RELEASE',0(R1)   ++RELEASE\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         LA    R14,7               NO, RESET L'NAME\n         CLC   =C'FEATURE',0(R1)   ++FEATURE\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         LA    R14,7               NO, RESET L'NAME\n         CLC   =C'PRODUCT',0(R1)   ++PRODUCT\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         LA    R14,4               NO, RESET L'NAME\n         CLC   =C'NULL',0(R1)      ++NULL\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         LA    R14,5               NO, RESET L'NAME\n         CLC   =C'JCLIN',0(R1)     ++JCLIN\n         BE    TP$ASSGN            YES, LET US KNOW SMPPTFIN\n         BNER  R10                 NO, RETURN +0\n* --- >>      SMPPTFIN STATEMENTS NOT TO BE REPORTED - ABOVE\n         SPACE 1                                              07/85 DBC\nTP$SAVE  MVC   PTF#TYPE,0(R1)      SAVE SYSMOD TYPE           07/85 DBC\n         SR    R0,R14              DECR LOOP CNTL; TOO FAR?   07/85 DBC\n         BNPR  R10                 YES, RETURN +0             07/85 DBC\n         ALR   R1,R14              NO, ADVANCE SCANNER        07/85 DBC\n         BA&XA R14,F$CHARS         SKIP MORE BLANKS, IF ANY   07/85 DBC\n         CLI   0(R1),C'('          SUB-VALUE?                 07/85 DBC\n         BNER  R10                 NO, RETURN +0              07/85 DBC\n         BCT   R0,TP$PTF           YES, DECR SCAN LIMIT       07/85 DBC\n         BR    R10                 RETURN +0 IF TOO FAR       07/85 DBC\nTP$PTF   LA    R1,1(,R1)           ADVANCE ONE                07/85 DBC\n         BA&XA R14,F$CHARS         SKIP MORE BLANKS, IF ANY   07/85 DBC\n         B     4(,R10)             RETURN +4 WITH A POINTER   07/85 DBC\n*                                  TO THE SYSMOD NAME.        07/85 DBC\nTP$ASSGN DS    0H                  ASSIGN ETC., SKIP PRINT,\n         MVI   PTF#TYPE,C'X'       BUT SHOW SMPPTFIN WITH SPECIAL CHAR\n         B     4(,R10)             RETURN +4 WITH A POINTER\n         EJECT ,                                              07/85 DBC\n************************************************************* 12/88 SBG\n*  WE WANT TO CHECK IF WE HAVE FILE 1 FROM A REAL CBT TAPE. * 12/88 SBG\n*   IF THAT'S WHAT WE HAVE, WE WANT TO REPORT THE VERSION   * 12/88 SBG\n*   NUMBER AND CREATION DATE OF THAT CBT TAPE.              * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CH  ST    R15,CBSAVE15        SAVE REG 15                12/88 SBG\n         LA    R15,TAPEBUFF        CBT HEADER. LOOK FOR       12/88 SBG\n         CLC   CHJOBLIT,0(R15)     ARNIE CASINGHINO'S JOBNAME 12/88 SBG\n         BE    TEST$CHG            CBT HEADER                 12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         BR    R10                 RETURN NOT FOUND           12/88 SBG\nTEST$CHG MVC   UNLOADER(8),CBHEADER     FLAG AS FILE 1 OF CBT 12/88 SBG\n         MVI   CSTATCLR,X'40'      CLEAR VERS & DATE          12/88 SBG\n         MVC   CBTVERS(12),CSTATCLR   NOW DO IT .             12/88 SBG\n         ST    R4,CBSAVE4          SAVE REG 4                 12/88 SBG\n         LR    R4,R15              ADDR OF TAPE BUFFER        12/88 SBG\n         A     R4,CDOCSIZE         END OF BLOCK ADDRESS       12/88 SBG\nTEST$CHL LA    R15,1(,R15)         SEARCH FOR DATE AND VERSION12/88 SBG\n         CR    R15,R4              END OF BLOCK YET?          12/88 SBG\n         BNL   TEST$CHR            NO DATE OR VERSION FOUND   12/88 SBG\n         CLC   VERSLIT1,0(R15)     DATE HDR FOUND?            12/88 SBG\n         BE    TEST$CHD            YEP. GET DATE.             12/88 SBG\n         CLC   VERSLIT2,0(R15)     VERSION # HDR FOUND?       12/88 SBG\n         BNE   TEST$CHL            NOPE. KEEP TRYING.         12/88 SBG\nTEST$CHV MVC   CBTVERS(4),10(R15)  SAVE VERSION #             12/88 SBG\n         L     R4,CBSAVE4          RESTORE REG 4              12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         B     TEST$RET            DONE WITH EXTRACTION.      12/88 SBG\nTEST$CHD MVC   CBTDATE(8),10(R15)  SAVE TAPE RELEASE DATE     12/88 SBG\n         B     TEST$CHL            KEEP TRYING FOR VERSION #. 12/88 SBG\nTEST$CHR L     R4,CBSAVE4          RESTORE REG 4              12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         BR    R10                 RETURN UNSUCCESSFUL        12/88 SBG\n         EJECT                                                12/88 SBG\nF$BLANK  BCTR  R0,0                     -1 FROM LENGTH\n         CLI   0(R1),C' '               GOT A BLANK YET?\n         BER   R14                      YES - RETURN\n         LA    R1,1(,R1)                MOVE SCAN PTR\n         BCT   R0,F$BLANK+2             KEEP SCANNING\n         BR    R10                      NONE--RETURN TO CALLER'S CALLER\n         SPACE 2\nF$CHARS  BCTR  R0,0                     -1 FROM LENGTH\n         CLI   0(R1),C' '               FIND A CHAR?\n         BNER  R14                      YES - RETURN\n         LA    R1,1(,R1)                INCR SCAN PTR\n         BCT   R0,F$CHARS+2             KEEP SCANNING\n         BR    R10                      NONE--RETURN TO CALLER'S CALLER\n         SPACE 2\nTEST$DMP CLC   =X'F47006016663B24D',TAPEBUFF+12  IEHDASDR'S TRADEMARK?\n         BNER  R10                      NO\n         MVC   UNLOADER(8),IEHDASDR     SAY WHO\n         MVC   DASDRSAV(24),TAPEBUFF    SAVE HEADER RECORD\n         LR    R2,R10                   SAVE RETURN ADDR\n         TAPIO TCCW#DAT                 IGNORE CCWS\n         SPACE 1\nCOM$DUMP TAPIO TCCW#DAT                 READ FIRST TRK'S DATA\n         MVC   FDRSAVE(8),TAPEBUFF+12   SAVE IN CASE FDR\n         LR    R10,R2                   RETURN\n         B     TEST$RET\n         SPACE 2\nTEST$FDR CLC   =C'THATS ALL FOLK',TAPEBUFF+5   HIS TRADEMARK?\n         BNER  R10                      NO\n         LR    R2,R10                   SAVE RETURN ADDR\n         MVC   DASDRSAV(24),TAPEBUFF    SAVE HEADER RECORD\n         MVC   UNLOADER(3),FDR          SAY FDR FOR NOW\n         CLI   TAPEBUFF+19,C'S'         WAS IT FDR?\n         BE    COM$DUMP                 YES\n         MVC   UNLOADER(6),FDRDSF       NO  - MAYBE FDRDSF\n         CLI   TAPEBUFF+19,C'F'         FDRDSF?\n         BE    COM$DUMP                 YES\n         MVC   UNLOADER(6),FDRXXX       NO  - BUT SOME KIND OF FDR?\n         B     COM$DUMP                 CONTINUE\n         SPACE 2\nTEST$SLK CLC   =F'20',LASTSIZE     RIGHT LENGTH FOR SLICK HDR 09/84 DBC\n         BNER  R10\n         CLC   TAPEBUFF+8(12),FFS         FF'S AT END OF RECORD?\n         BNER  R10\n         CLI   TAPEBUFF+1,C'B'          BACKUP FLAG PRESENT?\n         BNER  R10\n         MVC   DASDRSAV(20),TAPEBUFF    SAVE THE FIRST RECORD\n         LR    R2,R10                   SAVE RETURN ADDR\n         TAPIO TCCW#DAT                 GET 2ND RECORD\n         LR    R10,R2                   RESTORE RETURN ADDR\n         CLC   TAPEBUFF(2),=H'0'        1ST HALFWORD = 0?\n         BNER  R10\n         CLC   TAPEBUFF+2(2),=H'0'      2ND HALFWORD = 0 OR FF'S?\n         BE    TEST$SK1\n         CLC   TAPEBUFF+2(2),FFS\n         BNER  R10\nTEST$SK1 LH    R2,TAPEBUFF+4            VERIFY LENGTH OF RECORD\n         LTR   R2,R2\n         BNPR  R10\n         LA    R2,8(,R2)\n         C     R2,LASTSIZE         LENGTH OK?                09/84 DBC\n         BNER  R10\n         CLC   TAPEBUFF+6(2),=H'0'      LAST HALF OF RDW = 0?\n         BNER  R10\n         MVC   UNLOADER(8),SLICKMNG     SHOW SLICKMNG AS UNLOADER\n         B     TEST$RET                 RETURN TO MAINLINE\n         SPACE 3\n* FOR IEBISAM, THE BEGINNING OF THE DCB IS UNLOADED TO THE FIRST\n* TWO CARDS.  SO CHECK (GUESS?) IF IT LOOKS LIKE AN ISAM DCB\nTEST$IS  CLC   TAPEBUFF(4),=Y(0,154)    SEQ # AND LENGTH CORRECT?\n         BNER  R10                      NO\n         CLC   TAPEBUFF+80(2),H1        SECOND SEQ # CORRECT\n         BNER  R10                      NO\n         TM    TAPEBUFF+4+48,X'10'      DCBOFLGS,DCBOFOPN\n         BNOR  R10                      NOT \"OPEN\"\n         CLI   TAPEBUFF+4+26,X'80'      DSORG=IS?\n         BE    *+10                     YES - CONTINUE\n         CLI   TAPEBUFF+4+26,X'81'      DSORG=ISU?\n         BNER  R10                      NO\n         MVC   UNLOADER(7),IEBISAM      SAY WHO\n         B     TEST$RET                 RETURN\n         SPACE 3\nTEST$MAP CLC   =C'$$TAPEMAP.PRINT.FILE$$',TAPEBUFF  CHECK FOR HEADER\n         BNER  R10                      NO\n         L     R1,LASTSIZE         VERIFY BLOCK MULT OF 80 BY 09/84 DBC\n         SR    R0,R0\n         LA    R2,80\n         DR    R0,R2\n         LTR   R0,R0\n         BNZR  R10                      NO\n         MVC   UNLOADER(7),CTAPEMAP     YES - THIS IS FOR US\n         B     TEST$RET\n         EJECT\nIEBUPDT1 MVC   OUTBUFF2+8(27),=C'IS AN IEBUPXXX INPUT STREAM' 07/85 DBC\n         MVC   OUTBUFF2+14(8),IEBUPXXX CORRECT RELOADER NAME  07/85 DBC\n         B     PRT$ONE             GO RELOOP                  07/85 DBC\n         SPACE 3                                              07/85 DBC\nPTFS1    MVC   OUTBUFF2+8(35),=C'IS AN SMPPTFIN SYSMODS INPUT STREAM' C\n         B     PRT$ONE             GO RELOOP                  07/85 DBC\n         SPACE 3                                              07/85 DBC\nCBT1     CLC   CBTEMPTY,UNLOADER        CBT EMPTY FILE        11/88 SBG\n         BE    CBTEMP1                  PRINT SPECIAL INFO    11/88 SBG\n         MVC   OUTBUFF2+8(28),=C'IS IN CBT973 COMPRESS FORMAT'  /88 SBG\n         B     PRT$ONE             GO RELOOP                  11/88 SBG\n         SPACE 3                                              07/85 DBC\nCBTEMP1  MVC   OUTBUFF2+8(25),=C'IS AN EMPTY CBT TAPE FILE'   11/88 SBG\n         B     PRT$ONE             GO RELOOP                  11/88 SBG\n         SPACE 3                                              07/85 DBC\nCBTDOC1  MVC   OUTBUFF2+8(27),=C'CBT TAPE DOCUMENTATION FILE' 12/88 SBG\n         B     PRT$ONE             GO RELOOP                  12/88 SBG\n         SPACE 3                                              12/88 SBG\nIEHMOVE1 MVC   #BLKCNT+OUTBUFF2-OUTBUFF(4),=C'DSN='\n         MVC   #BLKCNT+OUTBUFF2-OUTBUFF+4(44),TAPEBUFF+85 MOVE DISK DSN\n         SPACE 1\n         BA&XA R10,SET$ONE\n         DC    Y(169)                   DSORG OFFSET\n         DC    Y(171)                   RECFM OFFSET\n         DC    Y(173)                   BLKSIZE OFFSET\n         DC    Y(175)                   LRECL OFFSET\n         SPACE 3\nIEBCOPY1 BA&XA R10,SET$ONE\n         DC    Y(12)                    DSORG OFFSET\n         DC    Y(18)                    RECFM OFFSET\n         DC    Y(14)                    BLKSIZE OFFSET\n         DC    Y(16)                    LRECL OFFSET\n         SPACE 3\nIEBISAM1 BA&XA R10,SET$ONE\n         DC    Y(4+26)                  DSORG OFFSET\n         DC    Y(4+36)                  RECFM OFFSET\n         DC    Y(4+62)                  BLKSIZE OFFSET\n         DC    Y(4+2+82)                LRECL OFFSET\n         SPACE 3\nSET$ONE  MVC   OUTBUFF2+8(24),=C'TRUE ATTRIBUTES:  DSORG='\n         ICALL CNVDSORG,R14,R15=OUTBUFF2+32 FORMAT THE DSORG\n         ICALL CNVRECFM,R14,R15=#RECFM+OUTBUFF2-OUTBUFF\n         SPACE 1\n         LA    R1,TAPEBUFF\n         AH    R1,4(,R10)               POINT TO BLKSIZE\n         ICALL CONVHALF,R14,R15=#BLKSIZE-1+OUTBUFF2-OUTBUFF\n         SPACE 1\n         LA    R1,TAPEBUFF\n         AH    R1,6(,R10)               POINT TO LRECL\n         ICALL CONVHALF,R14,R15=#LRECL-1+OUTBUFF2-OUTBUFF\n         SPACE 2\n*  FOR PARM=INLINE, THE REPORT MUST PRINT BOTH THE RESULTS    12/88 SBG\n*  OF THE LABEL PROCESSING (FOR SL) AND THE RESULTS OF THE    12/88 SBG\n*  SCAN PROCESSING.                                           12/88 SBG\nPRT$ONE  TM    TFLAG1,T1@SL             SL TAPE?              12/88 SBG\n         BNO   PRT$ONEX                 NO. DO NORMAL STUFF   12/88 SBG\n         TM    PARMFLAG,PF@INLIN        INLINE ?              12/88 SBG\n         BO    FIND$EOF                 REGULAR INLINE STUFF  12/88 SBG\nPRT$ONEX TM    TFLAG1,T1@ANLZ           ANALYZING?            12/88 SBG\n         BNO   FIND$EOF                 NO\n         B     NL$LOOP                  YES - KEEP SCANNING NL TAPE\n         SPACE 3\n*  FIRST RECORD SAVED IN \"DASDRSAV\"\nIHDASDR1 MVC   OUTBUFF2+8(15),=C'DUMP FROM CCHH='\n         UNPK  OUTBUFF2+23(9),DASDRSAV+0(5)\n         TR    OUTBUFF2+23(8),HEXTAB    MAKE EBCDIC\n         MVC   OUTBUFF2+31(5),=C' OF A'\n         IC    R1,DASDRSAV+21           GET DEVTYPE\n         N     R1,=F'255'               CLEAN\n         MH    R1,=H'6'\n         LA    R14,=C'2321  2311  2314  2302  2301  2305-12305-23330  3*\n               340  3350  3375  3330-13380  3390  '           03/94 SBG\n         LA    R14,0(R14,R1)            GET ADDR OF THIS DEVTYPE\n         MVC   OUTBUFF2+37(6),0(R14)    MOVE TO PRINT LINE\n         CLC   =F'0',DASDRSAV+8         THIS TAPE START AT 0?\n         BNE   PRT$ONE                  NO - CAN'T FIND VOLSER\n*  SECOND RECORD IS IN \"TAPEBUFF\"\n         CLC   =C'VOL1VOL1',TAPEBUFF+216  LABEL?\n         BNE   PRT$ONE                  NO - SKIP\n         MVC   OUTBUFF2+46(7),=C'VOLUME='\n         MVC   OUTBUFF2+53(6),TAPEBUFF+224\n         MVC   OUTBUFF2+61(6),=C'OWNER='\n         MVC   OUTBUFF2+67(10),TAPEBUFF+261\n         B     PRT$ONE\n         SPACE 3\n* FIRST RECORD SAVED IN \"DASDRSAV\"\nFDR1     MVC   OUTBUFF2+8(20),=C'DUMPED FROM A UUUUUU'\n         MVC   FDRDVEND(1),DASDRSAV+4   SET UP FENCE FOR DEV TYPE\n         LA    R1,FDRDVTAB              POINT TO FDR DEV TYPE TABLE\nFDR1LOOP CLC   DASDRSAV+4(1),0(R1)      MATCH?\n         BE    FDR1FND                  YES\n         LA    R1,7(,R1)                NO  - BUMP TO NEXT ENTRY\n         B     FDR1LOOP\nFDR1FND  MVC   OUTBUFF2+22(6),1(R1)     PUT DEV TYPE IN MESSAGE\n         CLC   =C'DUMMYDSF',FDRSAVE     IS IT A NORMAL DUMP?\n         BE    PRT$ONE                  YES - ALL FOR NOW\n*                                       NO  - MUST BE ABS TRK DUMP\n         MVC   OUTBUFF2+28(22),=C' (ABSOLUTE TRACK DUMP)'\n         B     PRT$ONE\n         SPACE 3\nSLK1     MVC   OUTBUFF2+8(30),=C'SLICK LIBRARY BACKUP, CYCLE = '\n         MVC   OUTBUFF2+38(1),DASDRSAV  PUT IN THE CYCLE NUMBER\n         MVC   OUTBUFF2+39(12),=C', MAXSIZE = '\n         ICALL CONVHALF,R14,R1=DASDRSAV+2,R15=OUTBUFF2+41\n         B     PRT$ONE                  PRINT THE INFO LINE\n         EJECT\nIEHMOVE2 LA    R0,7                     ASSUME PARM=NOMEM\n         TM    PARMFLAG,PF@NOMEM        IS IT?\n         BO    *+8                      YES\n         LA    R0,9                     NO\n         TM    TAPEBUFF+169,X'02'       DSORG=PO?\n         BO    *+8                      YES\n         LA    R0,7                     NO\n         NEWPAGE  (R0),2                ENOUGH LINES LEFT ON PAGE?\n         SPACE 1\n         BA&XA R10,SET$FULL             SET UP HEADER\n         DC    Y(169)                   DSORG OFFSET\n         DC    Y(171)                   RECFM OFFSET\n         DC    Y(173)                   BLKSIZE OFFSET\n         DC    Y(175)                   LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEHMOVE   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,R10,R1=TAPEBUFF+282 CONVERT UNIT TYPE\n         SPACE 1\n         PRTLN2                         PRINT FIRST INFO LINE\n         SPACE 1\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FOR MSM\n         MVC   OUTBUFF2+25(7),=C'C-DATE='\n         ICALL CONVDATE,R10,R1=TAPEBUFF+138,R15=OUTBUFF2+32 C-DATE\n         SPACE 1\n         MVC   OUTBUFF2+42(7),=C'E-DATE='\n         ICALL CONVDATE,R10,R1=TAPEBUFF+141,R15=OUTBUFF2+49 E-DATE\n         SPACE 1\n         MVC   OUTBUFF2+59(4),=C'DSN='\n         MVC   OUTBUFF2+63(44),TAPEBUFF+85       MOVE IN OLD DSN\n         SPACE 1\n****     CLC   =C'VS2',TAPEBUFF+152     CHECK PROGRAMMING SYSTEM\n****     BE    MV$NOVOL                 SKIP IF OS/VS2\n         TM    TAPEBUFF+132,X'0F'       SEE IF LOOKS LIKE PACKED DATE\n         BO    MV$NOVOL                 SKIP IF NEW FORMAT IEHMOVE DS\n         CLI   TAPEBUFF+135,0           INVALID FOR VOLSER ANYWAY?\n         BE    MV$NOVOL                 SKIP IF NEW FORMAT IEHMOVE DS\n         MVC   OUTBUFF2+120(4),=C'VOL='\n         MVC   OUTBUFF2+124(6),TAPEBUFF+130\n         SPACE 1\nMV$NOVOL PRTLN2                         PRINT SECOND INFO LINE\n         SPACE 2\n         TM    TAPEBUFF+169,X'02'       DSORG=PO?\n         BNO   STAR$TWO                 NO - SKIP\n         BA&XA R10,FMU$                 PRINT HEADER\n         SPACE 2\n         L     BLEN,LASTSIZE       GET SIZE OF BLOCK          09/84 DBC\n         SH    BLEN,=H'80'              MINUS FIRST CARD USED\n         LA    BPTR,TAPEBUFF+80         -> NEXT CARD TO USE\n         BA&XA R10,SEG$NEXT             NOW HAVE CARDS 1 & 2\n         BA&XA R10,SEG$NEXT             NOW 2 & 3\n         BA&XA R10,SEG$NEXT             NOW 3 & 4\n         BA&XA R10,SEG$NEXT             NOW 4 & 5\n         LA    DPTR,MV#BUFF1+46         -> FIRST MEMBER NAME -4\n         CLI   0(DPTR),X'C8'            START OF MEMBER?\n         BE    MV$GOT1                  YES\n         LA    DPTR,3(,DPTR)            -> OTHER PLACE\n         CLI   0(DPTR),X'C8'            START OF MEMBER?\n         BE    MV$GOT1                  YES\n         BA&XA R14,BOOM                 PRINT LOGIC ERROR MSG\n         SPACE 2\nMV$GOT1  LA    DPTR,4(,DPTR)            -> FIRST MEMBER NAME\n         SPACE 2\nMV$LOOP  BA&XA R10,MOVE$MEM             MEMBER NAME TO PRINT LINE\n         BA&XA R10,SEG$TEST             SEE IF WITHIN RANGE\n         SPACE 2\n*  RECORDS IN AN IEHMOVE UNLOADED DATASET HAVE THE FOLLOWING FORMAT:\n*  FIRST 2 BYTES OF EACH CARD IS A BINARY SEQUENCE NUMBER.\n*  AFTER THAT, THERE IS SOME HEADER INFO (THE FMT1 DSCB + OTHER JUNK),\n*  THEN THE RECORDS IN THIS FORMAT:  LENGTH OF THIS \"RECORD\", 1 BYTE\n*  INDICATOR WITH THE FOLLOWING BIT MEANINGS:\n*    X'80' -> 3 BYTE TTR FOLLOWS INDICATOR BYTE\n*    X'40' -> UNLOADED DS IS PDS\n*    X'20' -> RECORD IS PART OF A MEMBER\n*    X'10' -> RECORD IS A NOTE LIST\n*    X'08' -> RECORD IS A DIRECTORY ENTRY\n*    X'04' -> RECORD IS A DUMMY RECORD\n*  THIS INFORMATION IS IN THE SOURCE TO MODULE IEHMVSRA\n         SPACE 1\nMV$NXTBL CLI   2(DPTR),X'E0'            DATA RECORD?\n         BE    MV$REC                   YES\n         CLI   2(DPTR),X'D0'            NOTE LIST RECORD?\n         BE    MV$REC                   YES\n         CLI   2(DPTR),X'C8'            DIRECTORY RECORD?\n         BE    MV$MEND                  YES\n         CLI   2(DPTR),X'C4'            DUMMY RECORD?\n         BE    MV$DUMMY                 YES\n         CLI   2(DPTR),X'0A'            END OF DS?\n         BNH   DIR$END                  YES\n*** LOGIC ERROR ***\n         PRTLN2                         PRINT (POSSIBLY) UNFINISHED LIN\n         BA&XA R14,BOOM                 PRINT LOGIC ERROR MSG\n         SPACE 2\nMV$DUMMY MVC   DWD(2),0(DPTR)           COPY LENGTH TO ALIGNED PLACE\n         LH    DLEN,DWD                 LOAD LENGTH OF DUMMY RECORD\n         LA    DPTR,12(DPTR,DLEN)       POINT TO NEXT\n         BA&XA R10,SEG$TEST             MAKE SURE STILL WITHIN RANGE\n         B     MV$LOOP                  DO NEXT MEMBER NAME\n         SPACE 2\nMV$REC   MVC   DWD(2),0(DPTR)           COPY LEN TO ALIGNED PLACE\n         LH    DLEN,DWD                 GET BLOCK LENGTH\n         LA    DPTR,6(DPTR,DLEN)        POINT PAST LEN,E0,TTR,DATA\n         SPACE 2\nMV$SCAN  CL    DPTR,MV#ABUF2            WITHIN RANGE?\n         BL    MV$NXTBL                 YES - PROCESS NEXT BLOCK\n         BA&XA R10,SEG$NEXT             SKIP 78 BYTES\n         B     MV$SCAN                  KEEP GOING\n         SPACE 2\nMV$MEND  LA    DPTR,6(,DPTR)            -> MEMBER NAME\n         BA&XA R10,SEG$TEST             WITHIN RANGE?\n         B     MV$LOOP                  GO PRINT NEXT NAME\n         SPACE 2\nSEG$TEST CL    DPTR,MV#ABUF2            WITHIN RANGE?\n         BLR   R10                      YES - JUST RETURN\n         SPACE 1\nSEG$NEXT MVC   MV#BUFF1,MV#BUFF2\n         LTR   BLEN,BLEN                ANY LEFT?\n         BP    SEG$MVC                  YES - USE IT\n         BZ    *+8                      NO\n* RAN OFF END OF DATASET\n***      EX    0,*                      *** LOGIC ERROR ***\n         B     DIR$END                  FORGET THAT - IT'S THE END\n         SPACE 1\n         ST    R10,R10SAVE              SAVE RETURN ADDR\n         TAPIO TCCW#DAT,TM=SEG$EOF      READ ANOTHER BLOCK\n         L     R10,R10SAVE              RESTORE RETURN ADDR\n         LA    BPTR,TAPEBUFF            RESET PTR\n         L     BLEN,LASTSIZE       AND LENGTH LEFT            09/84 DBC\n         SPACE 1\nSEG$MVC  SH    BLEN,=H'80'              DECR LENGTH LEFT / THIS BLOCK\n         MVC   MV#BUFF2,2(BPTR)         MOVE A SEGMENT\n         LA    BPTR,80(,BPTR)           -> NEXT SEGMENT\n         SH    DPTR,=H'78'              BACK UP DATA PTR\n         BR    R10                      RETURN TO CALLER\n         SPACE 2\nSEG$EOF  BCTR  BLEN,0                   SET FLAG\n         L     R10,R10SAVE              RESTORE RETURN ADDR\n         OI    TFLAG1,T1@MVEOF          REMEMBER HIT EOF\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\nCONVDATE SR    R0,R0                    CLEAR FOR IC\n         IC    R0,0(,R1)                GET THE YEAR\n         CVD   R0,DWD                   CONVERT TO PACKED\n         UNPK  0(3,R15),DWD+6(2)        AND THEN TO EBCDIC\n         OI    2(R15),C'0'              FIX SIGN\n         MVC   0(2,R15),1(R15)          MOVE YEAR OVER\n         MVI   2(R15),C'.'              PUT IN THE DOT\n         MVC   DWD(2),1(R1)             MOVE DAY TO ALIGNED PLACE\n         LH    R0,DWD                   GET THE YEAR\n         CVD   R0,DWD                   CONVERT TO PACKED\n         UNPK  3(3,R15),DWD+6(2)        AND THEN TO EBCDIC\n         OI    5(R15),C'0'              FIX THE SIGN\n         BR    R10                      RETURN TO CALLER\n         EJECT\nIEBCOPY2 LA    R0,7                     ASSUME MEMBERS\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEMBERS?\n         BNO   *+8                      NOPE - OK\n         LA    R0,5                     NO MEMBERS\n         NEWPAGE  (R0),2                TEST LINE COUNTER\n         SPACE 1\n         BA&XA R10,SET$FULL             SET UP HEADER\n         DC    Y(12)                    DSORG OFFSET\n         DC    Y(18)                    RECFM OFFSET\n         DC    Y(14)                    BLKSIZE OFFSET\n         DC    Y(16)                    LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEBCOPY   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,R10,R1=TAPEBUFF+24  FORMAT THE UNIT TYPE\n         SPACE 2\n         BA&XA R10,FMU                  'FOLLOWING MEMBERS UNLOADED:'\n         SPACE 2\n         TAPIO TCCW#DAT                 IGNORE THE NEXT BLOCK\n         SPACE 2\nIBCPY$LP TAPIO TCCW#DAT                 READ A DIRECTORY BLOCK\n         LH    BLEN,TAPEBUFF+4          GET RDW\n         SH    BLEN,=H'8'               -8 FOR BDR & RDW\n         LA    BPTR,TAPEBUFF+8          INIT BLOCK PTR\n         SPACE 2\nDIR$NEXT LA    DPTR,22(,BPTR)           INIT DIR BLK PTR\n         LH    DLEN,20(,BPTR)           GET LENGTH USED\n         SH    DLEN,=H'2'               LENGTH OF DATA\n         SPACE 2\nDIR$LP   CLC   0(8,DPTR),=8X'FF'        END OF DIRECTORY?\n         BE    DIR$END                  YES - DONE\n         BA&XA R10,MOVE$MEM             MOVE NAME TO PRINT LINE\n         LTR   DLEN,DLEN                ANYTHING LEFT?\n         BP    DIR$LP                   CONTINUE IF MORE LEFT\n         LA    BPTR,256+12+8(,BPTR)     NEXT DIRECTORY BLOCK\n         SH    BLEN,=Y(256+12+8)        DECR LENGTH LEFT\n         BP    DIR$NEXT                 MORE IN THIS TAPE BLOCK\n         B     IBCPY$LP                 GET NEXT BLOCK FROM TAPE\n         SPACE 2\nDIR$END  LA    R0,OUTBUFF2+16           GET START PTR FOR COMPARE\n         CR    R0,PPTR                  ANY ON THIS LINE?\n         BE    STAR$TWO                 NO - DONE\n         PRTLN2                         PRINT PARTIAL LINE\n         B     STAR$TWO                 CONTINUE PROCESSING\n         SPACE 3\nMOVE$MEM MVC   0(8,PPTR),0(DPTR)        MOVE NAME TO PRINT LINE\n         IC    R1,11(,DPTR)             GET USER DATA LENGTH\n         N     R1,=F'31'                STRIP OFF JUNK\n         LA    R1,12(R1,R1)             GET LENGTH OF ENTRY\n         AR    DPTR,R1                  ADVANCE DIR PTR\n         SR    DLEN,R1                  DECR LENGTH LEFT\n         SPACE 1\n         LA    PPTR,10(,PPTR)           NEXT PRINT LINE POSITION\n         CL    PPTR,OB2END              END OF PRINT LINE?\n         BNHR  R10                      NO - RETURN\n         LR    PPTR,R10                 SAVE RETURN ADDR\n         PRTLN2                         PRINT IT\n         LR    R10,PPTR                 RESTORE RETURN ADDR\n         LA    PPTR,OUTBUFF2+16         RESET PTR\n         BR    R10                      RETURN TO CALLER\n         EJECT ,                                              09/84 DBC\nIEBUPDT2 LA    R0,7\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEM?\n         BNO   *+8                      NO\n         LA    R0,5                     YES\n         NEWPAGE  (R0),2\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+32(27),=C'IS AN IEBUPXXX INPUT STREAM' 6/06 JSM\n         MVC   OUTBUFF2+38(8),IEBUPXXX CORRECT RELOADER NAME  06/06 JSM\n         MVC   OUTBUFF2+59(55),=C':   A-ADD   C-CHANGE   R-REPLACE   > >\n               = SUBORDINATE NAME'                            06/06 JSM\n         BA&XA R10,FMU                  'FOLLOWING MEMBERS UNLOADED:'\n         SPACE 2\nUPDTE$L1 LA    BLEN,80                  BXLE INCR\n         LA    DPTR,TAPEBUFF            POINT TO START\n         LR    BPTR,DPTR                COPY START ADDR\n         A     BPTR,LASTSIZE       POINT PAST END OF BLOCK    09/84 DBC\n         SR    BPTR,BLEN                BACK UP FOR BXLE\n         SPACE 1\nUPDTE$L2 LR    R1,DPTR                  COPY CARD ADDR\n         BA&XA R10,TEST$UP              IS THIS ONE?\n         B     UPDTE$BX                 NO - SKIP\n         SPACE 1\n         MVC   0(1,PPTR),UPDT#TYP       MOVE A,R,C\n         MVI   1(PPTR),C'-'             SEPARATOR\n         CLI   UPDTXFLG,C'>'            SUBORDINATE MEMBER?   11/88 SBG\n         BNE   UPDTE$LB                 NO. USE - AS SEPARATOR11/88 SBG\n         MVI   1(PPTR),C'>'             SUBORD.  USE >.       11/88 SBG\nUPDTE$LB DS    0H                       GO PUT IN MEMBER NAME 11/88 SBG\n         MVC   2(8,PPTR),0(R1)          MEMBER NAME\n         LA    R1,1(,PPTR)\nUPDTE$L3 CLI   0(R1),C','               END OF MEMBER NAME?\n         BE    UPDTE$EM                 YES\n         CLI   0(R1),C' '               END OF MEMBER NAME?\n         BE    UPDTE$EM                 YES\n         LA    R1,1(,R1)                INCR SCAN PTR\n         B     UPDTE$L3                 CONTINUE\n         SPACE 1\nUPDTE$EM MVC   0(7,R1),OUTBUFF+1        BLANK OUT GARBAGE\n         LA    PPTR,11(,PPTR)           BUMP PRINT LINE PTR\n         CL    PPTR,OB2END2             PAST END?\n         BNH   UPDTE$BX                 NO - CONTINUE\n         PRTLN2                         PRINT THE MEMBERS\n         LA    PPTR,OUTBUFF2+16         RESET PTR\n         SPACE 1\nUPDTE$BX BXLE  DPTR,BLEN,UPDTE$L2       KEEP SCANNING\n         TAPIO TCCW#DAT,TM=UPDT$EOF     GET NEXT BLOCK\n         B     UPDTE$L1                 GO CHECK IT\n         SPACE 2\nUPDT$EOF OI    TFLAG1,T1@MVEOF          SET \"HIT EOF\"\n         B     DIR$END                  CLEAN UP\n         EJECT ,                                              07/85 DBC\nCBT2     DS    0H   INSERT CODE TO DISPLAY MEMBERS FOR CBT973.11/88 SBG\n         LA    R0,7                                           11/88 SBG\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEM?           11/88 SBG\n         BNO   *+8                      NO                    11/88 SBG\n         LA    R0,5                     YES                   11/88 SBG\n         NEWPAGE  (R0),2                                      11/88 SBG\n         BA&XA R10,SET$FULD             SET UP HEADER INFO    11/88 SBG\n         DC    4Y(0)                    FILLER                11/88 SBG\n         MVC   OUTBUFF2+32(27),=C'IS A CBT973 COMPRESSED FILE' 6/06 JSM\n         MVC   OUTBUFF2+59(55),=C':   A-ADD   C-CHANGE   R-REPLACE   > >\n               = SUBORDINATE NAME'                            06/06 JSM\n         BA&XA R10,FMU         'FOLLOWING MEMBERS UNLOADED:'  11/88 SBG\n         SPACE 2                                              11/88 SBG\n*   SAVE REGISTERS USED FOR CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 2                                              11/88 SBG\n*   **************          CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$D00  STM   R1,R5,CBSTOR01           REGS 1 THRU 5         11/88 SBG\n         STM   R8,R10,CBSTOR08          REGS 8 THRU 10        11/88 SBG\n         LA    R5,TAPEBUFF     BEGINNING OF BLOCK PROCESSING. 11/88 SBG\n         ST    R1,CBSTOR1          USE R1 FOR WORK REG NOW    11/88 SBG\n         LH    R1,0(,R5)           GET BLOCK SIZE FROM BDW    11/88 SBG\n         ST    R1,CBTBLK1          STORE BLOCK SIZE FOR LATER 11/88 SBG\n         AR    R1,R5               POINT PAST E-O-BLOCK       11/88 SBG\n         ST    R1,CBTAPEND         REMEMBER E-O-BLOCK ADDRESS 11/88 SBG\n         L     R1,CBSTOR1          RESTORE R1.                11/88 SBG\n         LA    R5,4(,R5)                POINT TO RDW          11/88 SBG\n*                              BEGINNING OF RECORD PROCESSING.11/88 SBG\nCBT$D0B  LA    R8,14(,R5)          POINT TO BEGIN OF DATA     11/88 SBG\n         ST    R1,CBSTOR1          USE R1 FOR WORK REG NOW    11/88 SBG\n         ST    R6,CBSTOR06         USE R6 FOR WORK REG NOW    11/88 SBG\n         LH    R1,0(,R5)           STORE RECORD SIZE FROM RDW 07/90 SBG\n*   THIS IS NEVER BIGGER THAN 94 -- LET ALONE 255 ||          11/88 SBG\n         C     R1,=F'94'           LRECL=94 MAX FOR CBT973    07/90 SBG\n         BH    CBT$EOF             BREAK OUT OF LOOP IF BIGGER07/90 SBG\n         S     R1,=F'12'           -12 JUST TO GO PAST DATA   11/88 SBG\n*                                   AND LAST 2 HEADER BITS    11/88 SBG\n         LA    R5,2(,R5)           HALFWAY TO HEADER BITS     11/88 SBG\n         MVI   CBTCLEAR,X'40'      MOVE IN BLANK TO ...       11/88 SBG\n         MVC   CBTCARD,CBTCLEAR       CLEAR 80-BYTE WORKAREA. 11/88 SBG\n         LA    R2,CBTCARD          ADDRESS OF 80-BYTE CARD    11/88 SBG\n         LA    R6,5                5 LOOPS TO EXPAND CARD     11/88 SBG\nCBT$D0C  EQU   *                   EXPAND 16 BYTES AT A TIME  11/88 SBG\n         LA    R4,16               LOOP COUNTER               11/88 SBG\n         LA    R5,2(,R5)           BUMP HEADER BIT POINTER    11/88 SBG\n         ICM   R3,12,0(R5)         2 BYTES MASK BITS TO SLIDE 11/88 SBG\nCBT$D0D  EQU   *                   INNER LOOP TO DO 16 BYTES  11/88 SBG\n         ST    R2,CBSTOR2          TEMP SAVE R2               02/93 RT\n         SLR   R2,R2               CLEAR TARGET REGISTER      11/88 SBG\n         SLDL  R2,1                SLIDE OVER ONE MASK BIT    11/88 SBG\n         LTR   R2,R2               IS BIT 0 OR 1 ?            11/88 SBG\n         L     R2,CBSTOR2          RESTORE R2                 02/93 RT\n         BZ    CBT$D0F             IF 0, NEEDS BLANK TO FILL  11/88 SBG\n         MVC   0(1,R2),0(R8)       MOVE THE NON-BLANK         11/88 SBG\n         LA    R8,1(,R8)           BUMP DATA PTR TO NEXT BYTE 11/88 SBG\nCBT$D0E  EQU   *                   RESTORE THE CARD-IMAGE     11/88 SBG\n         LA    R2,1(,R2)           POINT TO NEXT CARD BYTE    11/88 SBG\n         BCT   R4,CBT$D0D          RESTORE 16-BYTE GROUP      11/88 SBG\n         BCT   R6,CBT$D0C          DO THAT 5 TIMES            11/88 SBG\n         AR    R5,R1               BUMP POINTER TO NEXT RDW.  11/88 SBG\n         LM    R1,R4,CBSTOR01      REGS 1 THRU 4. 5 HAS PTR   11/88 SBG\n         LM    R8,R10,CBSTOR08     REGS 8 THRU 10             11/88 SBG\n*        L     R6,CBSTOR06         RESTORE R6. USED FOR PPTR. 11/89 SBG\n         B     CBT$L2              ONE CARD IS RESTORED, FOR  11/88 SBG\n*                                   PURPOSES OF EXAMINATION.  11/88 SBG\nCBT$D0F  EQU   *                   RTN TO INSERT A BLANK      11/88 SBG\n         MVI   0(R2),X'40'         MOVE BLANK IN TO DECOMPRESS11/88 SBG\n         B     CBT$D0E             CONTINUE RESTORING CARD.   11/88 SBG\n         SPACE 1                                              11/88 SBG\n*   **************   END OF CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 2                                              11/88 SBG\n*  AT THIS POINT, A CARD-IMAGE OF DATA IS RESTORED INTO       11/88 SBG\n*    THE FIELD, CBTCARD.  WE THEN USE REGULAR IEBUPDTE        11/88 SBG\n*    PROCESSING TO LOOK FOR MEMBER NAMES.                     11/88 SBG\n         SPACE 2                                              11/88 SBG\nCBT$L2   L     PPTR,CBSTOR06       RESTORE REGISTER PPTR      11/88 SBG\n         LA    R1,CBTCARD          LOAD CARD ADDRESS          11/88 SBG\n         ST    R5,CBSTOR05         SAVE RECD PTR              11/88 SBG\n         BA&XA R10,TEST$UP         IS THIS A MEMBER INDICATOR 11/88 SBG\n         B     CBT$BX              NO - SKIP TO THE NEXT CARD 11/88 SBG\n         L     R5,CBSTOR05         RESTORE RECD PTR           11/88 SBG\n         SPACE 1                                              11/88 SBG\n         MVC   0(1,PPTR),UPDT#TYP    MOVE A,R,C               11/88 SBG\n         MVI   1(PPTR),C'-'             SEPARATOR             11/88 SBG\n         CLI   UPDTXFLG,C'>'            SUBORDINATE MEMBER?   11/88 SBG\n         BNE   CBT$LB                   NO. USE - AS SEPARATOR11/88 SBG\n         MVI   1(PPTR),C'>'             SUBORD.  USE >.       11/88 SBG\nCBT$LB   DS    0H                       GO PUT IN MEMBER NAME 11/88 SBG\n         MVC   2(8,PPTR),0(R1)          MEMBER NAME           11/88 SBG\n         LA    R1,1(,PPTR)                                    11/88 SBG\nCBT$L3   CLI   0(R1),C','               END OF MEMBER NAME?   11/88 SBG\n         BE    CBT$EM                   YES                   11/88 SBG\n         CLI   0(R1),C' '               END OF MEMBER NAME?   11/88 SBG\n         BE    CBT$EM                   YES                   11/88 SBG\n         LA    R1,1(,R1)                INCR SCAN PTR         11/88 SBG\n         B     CBT$L3                   CONTINUE              11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$EM   MVC   0(7,R1),OUTBUFF+1        BLANK OUT GARBAGE     11/88 SBG\n         LA    PPTR,11(,PPTR)           BUMP PRINT LINE PTR   11/88 SBG\n         CL    PPTR,OB2END2             PAST END?             11/88 SBG\n         BNH   CBT$BX                   NO - CONTINUE         11/88 SBG\n         ST    R5,CBSTOR05              SAVE RECD PTR         11/88 SBG\n         PRTLN2                         PRINT THE MEMBERS     11/88 SBG\n         LA    PPTR,OUTBUFF2+16         RESET PTR             11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$BX   L     R5,CBSTOR05              RESTORE RECD PTR      11/88 SBG\n         C     R5,CBTAPEND              AT END OF BLOCK YET?  11/88 SBG\n         BL    CBT$D0B                  NO. GET NEXT RECORD   11/88 SBG\n*    TRY TO RESTORE REGISTERS THAT MIGHT BE USED ELSEWHERE.   11/88 SBG\n         TAPIO TCCW#DAT,TM=CBT$EOF      GET NEXT BLOCK        11/88 SBG\n         B     CBT$D00                  GO CHECK IT           11/88 SBG\n         SPACE 2                                              11/88 SBG\nCBT$EOF  OI    TFLAG1,T1@MVEOF          SET \"HIT EOF\"         11/88 SBG\n         B     DIR$END                  CLEAN UP              11/88 SBG\n         EJECT ,                                              11/88 SBG\n************************************************************* 07/85 DBC\n*                                                           * 07/85 DBC\n*        THE CURRENT TAPE FILE CONTAINS SMPPTFIN SYSMODS.   * 07/85 DBC\n*        SCAN THE FILE TO GET THE NAMES OF THE SYSMODS      * 07/85 DBC\n*        CONTAINED THEREIN, AND DISPLAY THEM.               * 07/85 DBC\n*                                                           * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTFS2    LA    R0,7                REQUIRED HEADER SPACE      07/85 DBC\n         TM    PARMFLAG,PF@NOMEM   SCAN FOR \"MEMBERS\"?        07/85 DBC\n         BNO   *+8                 YES, PROCEED               07/85 DBC\n         LA    R0,5                NO, DON'T NEED SO MUCH     07/85 DBC\n         NEWPAGE (R0),2            WIDOW PREVENTION           07/85 DBC\n         SPACE 1                                              07/85 DBC\n         BA&XA R10,SET$FULD        MESSAGE SETUP              07/85 DBC\n         DC    4Y(0)                    FILLER                07/85 DBC\n         MVC   OUTBUFF2+32(35),=C'IS AN SMPPTFIN SYSMODS INPUT STREAM'\n         MVC   OUTBUFF2+67(43),=C':   A-APAR   F-FUNCTION   P-PTF   U-U>\n               SERMOD'             DEFINITIONS                06/06 JSM\n         BA&XA R10,FMU             DISPLAY THE MESSAGE        07/85 DBC\n         SPACE 3                                              07/85 DBC\nPTF$L1   LA    BLEN,80             BXLE INCRIMENT             07/85 DBC\n         LA    DPTR,TAPEBUFF       BXLE SCANNER               07/85 DBC\n         LR    BPTR,DPTR           SET -                      07/85 DBC\n         AL    BPTR,LASTSIZE        BXLE-                     07/85 DBC\n         SLR   BPTR,BLEN             LIMIT                    07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTF$L2   LR    R1,DPTR             MESSAGE SINK SCANNER       07/85 DBC\n         BA&XA R10,TEST$PT         DOES THE CURRENT CARD NAME 07/85 DBC\n*                                  THE START OF A NEW SYSMOD? 07/85 DBC\n         B     PTF$BX              +0 NO, SKIP                07/85 DBC\nPTF$L2Z  DS    0H                  NEW +4\n         CLI   PTF#TYPE,C'X'       SPECIAL ++ TYPE DESIGNATION?\n         BE    PTF$BX              PRINTING IS TO BE SKIPPED.\n         MVC   0(1,PPTR),PTF#TYPE  +4 YES, GET SYSMOD TYPE    07/85 DBC\n         MVI   1(PPTR),C'-'        FRAME                      07/85 DBC\n         MVC   2(7,PPTR),0(R1)     SYSMOD NAME (ALWAYS SEVEN  07/85 DBC\n*                                  CHARACTERS LONG)           07/85 DBC\n         LA    PPTR,10(,PPTR)      ADVANCE SINK SCANNERR      07/85 DBC\n         CL    PPTR,OB2END2        IS MSG LINE FULL?          07/85 DBC\n         BNH   PTF$BX              NOT YET; GO  LOOP          07/85 DBC\n         PRTLN2 ,                  YES, PRINT THE LINE        07/85 DBC\n         LA    PPTR,OUTBUFF2+16    RESET SINK SCANNER         07/85 DBC\nPTF$BX   DS    0H\n         BXLE  DPTR,BLEN,PTF$L2    CONTINUE SCANNING THE BLK  07/85 DBC\n         SPACE 1                                              07/85 DBC\n         TAPIO TCCW#DAT,TM=PTF$EOF READ NEXT BLOCK            07/85 DBC\n         B     PTF$L1              LOOP TO SCAN IT            07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTF$EOF  OI    TFLAG1,T1@MVEOF     EOF; REMEMBER              07/85 DBC\n         B     DIR$END             GO DISPLAY FILE            07/85 DBC\n*                                  DESCRIPTION MESSAGES       07/85 DBC\n         EJECT ,                                              07/85 DBC\nIEBISAM2 BA&XA R10,SET$FULL             SET UP HEADER\n         DC    Y(4+26)                  DSORG OFFSET\n         DC    Y(4+36)                  RECFM OFFSET\n         DC    Y(4+62)                  BLKSIZE OFFSET\n         DC    Y(4+2+82)                LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEBISAM   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,R10,R1=TAPEBUFF+4+17-3  CONVERT UNIT TYPE\n         SPACE 1\n         PRTLN2                         PRINT SECOND INFO LINE\n         B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nFDR2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+32(14),=C'WAS DUMPED BY ' SET UP UNLOADER 6 JSM\n         MVC   OUTBUFF2+46(6),UNLOADER            MESSAGE     06/06 JSM\n         CLC   FDRSAVE,=C'DUMMYDSF'     NORMAL DUMP?\n         BE    *+10                     YES\n*                                       NO  - WARN USER\n         MVC   OUTBUFF2+55(22),=C' (ABSOLUTE TRACK DUMP)'     06/06 JSM\n         PRTLN2                         PRINT THE HEADER\n         TM    PARMFLAG,PF@NOMEM        DETAILS WANTED?\n         BO    FDR2NODT                 NO\n*                                       YES - CHECK DUMP TYPE\n         CLC   FDRSAVE,=C'DUMMYDSF'     WAS IT A DSF'ABLE DUMP?\n         BNE   FDR2ABS                  NO\n*                                       YES - ISSUE MESSAGE\n         MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING DATA SETS DUMPED:'\n         PRTLN2\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(DSFHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'DSFHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2\nFDR2LOOP CLC   =C'DUMMYDSF',TAPEBUFF+12 IS THIS A DSCB BLOCK?\n         BNE   FDR2VOL                  NO  - TRY FOR VOLSER\n*                                       YES\n         LA    R5,TAPEBUFF+40           POINT TO FIRST DSCB\n         LH    R6,TAPEBUFF+30           GET DSCB COUNT THIS BLOCK\nFDR2DSCB LTR   R6,R6                    MORE DSCB'S TO GO?\n         BNP   FDR2NBLK                 NO  - GET NEXT BLOCK\n*                                       YES\n         CLI   44(R5),C'1'              FORMAT 1 DSCB?\n         BNE   FDR2NDSC                 NO\n*                                       YES\n         CLC   LCTR2,=F'1'              ROOM ON PAGE FOR NEXT LINE?\n         BH    FDR2DSCC                 NO\n         NEWPAGE ,2                     FORCE EJECT\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(DSFHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'DSFHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2                         PRINT THEM\nFDR2DSCC MVC   OUTBUFF2+DSFDSN(44),0(R5)   MOVE IN DSNAME\n         LH    R14,98(,R5)                 GET LAST TRACK USED\n         LA    R14,1(,R14)                 MAKE 1 RELATIVE\n         STH   R14,98(,R5)                 SAVE IT BACK\n         ICALL CONVHALF,R14,R1=98(,R5),R15=OUTBUFF2+DSFTRK\n         ICALL CNVRECFX,R14,R1=84(,R5),R15=OUTBUFF2+DSFRECFM\n         ICALL CONVHALF,R14,R1=88(,R5),R15=OUTBUFF2+DSFLRECL-1\n         ICALL CONVHALF,R14,R1=86(,R5),R15=OUTBUFF2+DSFBLKSZ+1\n         ICALL CNVDSORX,R14,R1=82(,R5),R15=OUTBUFF2+DSFDSORG\n         ICALL CONVDATE,R10,R1=53(,R5),R15=OUTBUFF2+DSFCDATE\n         ICALL CONVDATE,R10,R1=56(,R5),R15=OUTBUFF2+DSFEDATE\n         TM    93(R5),X'40'            RACF DEFINED?\n         BZ    *+10                    NO\n         MVC   OUTBUFF2+DSFSECUR+5(4),=C'RACF'   YES\n         TM    93(R5),X'10'            PASSWORD?\n         BZ    FDR2PRT                 NO\n         MVC   OUTBUFF2+DSFSECUR(4),=C'WPWD'  YES - ASSUME WPWD\n         TM    93(R5),X'04'            READ PSWD REQUIRED?\n         BO    *+8                     NO\n         MVI   OUTBUFF2+DSFSECUR,C'R'  YES\n         TM    93(R5),X'50'            BOTH RACF/PSWD?\n         BNO   FDR2PRT                 NO\n         MVI   OUTBUFF2+DSFSECUR+4,C'/'  YES\nFDR2PRT  PRTLN2                        PRINT THE LINE\nFDR2NDSC LA    R5,148(,R5)             BUMP PAST DSCB/COUNT FIELD\n         S     R6,=F'1'\n         B     FDR2DSCB\nFDR2NBLK TAPIO TCCW#DAT,TM=FDR2EOF     GET NEXT BLOCK\n         B     FDR2LOOP\nFDR2EOF  MVI   OUTBUFF2,C'0'\n         OI    TFLAG1,T1@MVEOF         REMEMBER WE HIT EOF\n       MVC  OUTBUFF2+12(63),=C'0***LISTING TERMINATED. FDR FILE NOT COM$\n               PLETE ON THIS VOLUME***'\n         PRTLN2\nFDR2FAKE MVC   TAPEBUFF+4(4),=X'FFFFFFFF'   FAKE OUT FDR2VOL\nFDR2VOL  MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+8(20),=C'DUMPED FROM A UUUUUU'\n         MVC   FDRDVEND(1),DASDRSAV+4   SET UP FENCE FOR DEV TYPE\n         LA    R1,FDRDVTAB              POINT TO FDR DEV TYPE TABLE\nFDR2VOLA CLC   DASDRSAV+4(1),0(R1)      MATCH?\n         BE    FDR2VOLB                 YES\n         LA    R1,7(,R1)                NO  - BUMP TO NEXT ENTRY\n         B     FDR2VOLA\nFDR2VOLB MVC   OUTBUFF2+22(6),1(R1)     PUT DEV TYPE IN MESSAGE\n         MVC   OUTBUFF2+28(16),=C'         VOLSER='\n         CLC   UNLOADER(6),FDRDSF       WAS THIS DSF?\n         BE    FDR2VOLM                 YES - NO VOLSER AVAILABLE\n         CLC   =XL4'00',TAPEBUFF+4      DOES DUMP INCLUDE CYL/TRK 0/0?\n         BNE   FDR2VOLM                 NO  - NO VOLSER AVAILABLE\n*                                       YES\n         LA    R1,TAPEBUFF+20           POINT TO FIRST COUNT FIELD\n         LA    R0,TAPEBUFF              POINT TO 2ND TRACK IN BLOCK\n         AH    R0,TAPEBUFF+2\nFDR2VOLC CLC   0(5,R1),=X'0000000003'   POINTING TO REC 3 ON TRK 0?\n         BE    FDR2VOLG                 YES\n         BH    FDR2VOLM                 NO - AND NO VOLSER AVAIL\n         SR    R15,R15\n         IC    R15,5(,R1)               GET KEY LENGTH\n         AH    R15,6(,R1)               ADD IN DATA LENGTH\n         LA    R1,8(R15,R1)             POINT TO NEXT RECORD\n         CR    R1,R0                    PAST TRACK 0?\n         BNL   FDR2VOLM                 YES\n         B     FDR2VOLC                 NO  - KEEP GOING\nFDR2VOLG CLC   8(8,R1),=C'VOL1VOL1'     GOT VOL LABEL?\n         BNE   FDR2VOLM                 NO  - STRANGE\n         MVC   OUTBUFF2+44(6),16(R1)    YES - MOVE IT INTO MSG\n         B     FDR2VOLP\nFDR2VOLM MVC   OUTBUFF2+43(14),=C' NOT AVAILABLE'\nFDR2VOLP PRTLN2\n         B     STAR$TWO\nFDR2ABS  MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(63),=C'ABSOLUTE TRACK DETAILS NOT AVAILABLE $\n               IN THIS VERSION OF TAPEMAP'\n         PRTLN2\n         B     FDR2FAKE\nFDR2NODT CLC   =C'DUMMYDSF',TAPEBUFF+12  DSCB BLOCK?\n         BNE   FDR2VOL                   NO  - CHECK FOR VOLSER\n         TAPIO TCCW#DAT,TM=FDR2EOF       YES - CHECK NEXT BLOCK\n         B     FDR2NODT\n         SPACE 3\nSLK2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+32(16),=C'WAS UNLOADED BY ' SET UP UNLOADER JSM\n         MVC   OUTBUFF2+48(8),UNLOADER            MESSAGE     06/06 JSM\n         PRTLN2                         PRINT THE HEADER\n         MVC   OUTBUFF2+8(30),=C'SLICK LIBRARY BACKUP, CYCLE = '\n         MVC   OUTBUFF2+38(1),DASDRSAV  PUT IN THE CYCLE NUMBER\n         MVC   OUTBUFF2+39(12),=C', MAXSIZE = '\n         ICALL CONVHALF,R14,R1=DASDRSAV+2,R15=OUTBUFF2+41\n         PRTLN2                         PRINT FIRST INFO LINE\n         TM    PARMFLAG,PF@NOMEM        DETAILS WANTED?\n         BO    STAR$TWO                 NO\n*                                       YES\n         MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING MEMBERS UNLOADED:'\n         PRTLN2\n         L     R15,=A(SLKHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'SLKHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         PRTLN2\nSLK2LOOP OC    TAPEBUFF(2),TAPEBUFF     IS THIS A HEADER BLOCK?\n         BNZ   SLK2NBLK                 NO  - TRY NEXT BLOCK\n*                                       YES\n         CLC   LCTR2,=F'1'              ROOM ON PAGE FOR NEXT LINE?\n         BH    SLK2MGO                  NO\n         NEWPAGE ,2                     FORCE EJECT\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(SLKHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'SLKHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2                         PRINT THEM\nSLK2MGO  MVC   OUTBUFF2+SLKMEM(10),TAPEBUFF+8   MEMBER NAME\n         MVI   OUTBUFF2+SLKSTAT-1,C'.'          .\n         MVC   OUTBUFF2+SLKSTAT(4),TAPEBUFF+18  STATUS\n         ICALL CONVP2,R14,R1=TAPEBUFF+32,       REVISION               X\n               R15=OUTBUFF2+SLKREV\n         MVC   OUTBUFF2+SLKINFO(8),TAPEBUFF+34  INFO\n         MVC   OUTBUFF2+SLKTYPE(8),TAPEBUFF+42  TYPE\n         ICALL CONVP4,R14,R1=TAPEBUFF+58,       ACTST                  X\n               R15=OUTBUFF2+SLKACTST\n         ICALL CONVP4,R14,R1=TAPEBUFF+62,       DELST                  X\n               R15=OUTBUFF2+SLKDELST\n         ICALL CONVP3,R14,R1=TAPEBUFF+66,       BLOCKS                 X\n               R15=OUTBUFF2+SLKBLKS\n         ICALL CONVMDY,R14,R1=TAPEBUFF+74,      C-DATE                 X\n               R15=OUTBUFF2+SLKCREAT\n         ICALL CONVMDY,R14,R1=TAPEBUFF+122,     U-DATE                 X\n               R15=OUTBUFF2+SLKUPD\n         PRTLN2\nSLK2NBLK TAPIO TCCW#DAT,TM=SLK2EOF         GET NEXT BLOCK\n         B     SLK2LOOP\nSLK2EOF  OI    TFLAG1,T1@MVEOF             SET \"HIT EOF\"\n         B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nMAP2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BA&XA R10,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+32(49),=C'CONTAINS THE FOLLOWING USER-SUPPLIED >\n               INFORMATION:'                                  06/06 JSM\n         PRTLN2                         PRINT THE HEADER INFO\n** USE R5 TO POINT TO INFO TO BE PRINTED,\n** AND R6 TO CONTROL DEBLOCKING LOOP\n         LA    R5,TAPEBUFF+80           SKIP FILE HEADER INFO\n         L     R6,LASTSIZE                                    09/84 DBC\n         SH    R6,=H'80'\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FIRST LINE\n         B     MAPLOOPX                 BRANCH TO MIDDLE OF LOOP\nMAPLOOP  LA    R5,80(,R5)               GET TO NEXT INFO LOGICAL RECORD\n         SH    R6,=H'80'                CHECK FOR END OF BLOCK\nMAPLOOPX BNP   MAPNEXT                  GET NEXT BLOCK IF NECESSARY\nMAPLOOPY MVC   OUTBUFF2+16(72),0(R5)    PRINT 72 CHARS OF INFO\n         PRTLN2\n         B     MAPLOOP                  GET NEXT LOGICAL RECORD\nMAPNEXT  TAPIO TCCW#DAT,TM=MAPEOF       READ NEXT BLOCK\n         L     R1,LASTSIZE         VERIFY BLOCK MULT OF 80 BY 09/84 DBC\n         SR    R0,R0\n         LA    R2,80\n         DR    R0,R2\n         LTR   R0,R0\n         BNZ   MAPERR                   NO  - ERROR\n         LA    R5,TAPEBUFF              RESET LOOP REGS\n         L     R6,LASTSIZE                                    09/84 DBC\n         B     MAPLOOPY\nMAPERR   MVC   OUTBUFF2+12(53),=C'*** LISTING TERMINATED, INVALID BLOCK$\n                ENCOUNTERED ***'\n         PRTLN2\n         B     STAR$TWO\nMAPEOF   OI    TFLAG1,T1@MVEOF          REMEMBER EOF FOUND\n****     B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nSTAR$TWO MVC   OUTBUFF2(2),=C'0*'\n         MVC   OUTBUFF2+2(L'OUTBUFF2-2),OUTBUFF2+1\n         PRTLN2\n         TM    TFLAG1,T1@MVEOF          ALREADY HIT EOF?\n         BO    CHKMVEOF                 YES - SEE WHERE TO GO\n         TM    TFLAG1,T1@SL             SL TAPE?\n         BO    FIND$EOF                 YES - CONTINUE PROCESSING\n         B     NL$LOOP                  SCAN THRU REST OF FILE\n         SPACE 1\nCHKMVEOF NI    TFLAG1,255-T1@MVEOF      RESET FLAG\n         TM    TFLAG1,T1@SL             SL TAPE?\n         BO    SL$SAVE                  YES - GO READ THE EOF LABELS\n         B     NL$EOF                   NO\n         SPACE 3\nFMU      PRTLN2                         PRINT INFO LINE\nFMU$     TM    PARMFLAG,PF@NOMEM        WANT MEMBER LISTING?\n         BO    STAR$TWO                 NO - DONE\n         MVI   OUTBUFF2,C'0'            SET CC\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING MEMBERS UNLOADED:'\n         PRTLN2                         PRINT HEADER\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FIRST MEMBER LINE\n         LA    PPTR,OUTBUFF2+16         INIT PRINT LINE PTR\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\nSET$FULL MVC   OUTBUFF2+54(17),=C'...  WAS:  DSORG='\n         ICALL CNVDSORG,R14,R15=OUTBUFF2+71  CONVERT DSORG\n         SPACE 1\n         MVC   OUTBUFF2+76(6),=C'LRECL='\n         LA    R1,TAPEBUFF\n         AH    R1,6(,R10)               GET LRECL ADDR\n         ICALL CONVHALF,R14,R15=OUTBUFF2+82  CONVERT LRECL\n         BA&XA R14,SLIDE                MOVE IT LEFT\n         SPACE 1\n         MVC   OUTBUFF2+90(6),=C'RECFM='\n         ICALL CNVRECFM,R14,R15=OUTBUFF2+96  CONVERT RECFM\n         SPACE 1\n         MVC   OUTBUFF2+104(8),=C'BLKSIZE='\n         LA    R1,TAPEBUFF\n         AH    R1,4(,R10)               GET BLKSIZE ADDR\n         ICALL CONVHALF,R14,R15=OUTBUFF2+112 CONVERT BLKSIZE\n         BA&XA R14,SLIDE                MOVE IT LEFT\n         SPACE 2\nSET$FULD MVI   OUTBUFF2,C'-'            SET CC\n         MVC   OUTBUFF2+1(17),FL1ID     MOVE IN (TAPE) DSN\n         MVC   OUTBUFF2+19(5),=C'(FILE'\n         CLI   FL1FILSQ,C'?'       TEST IF BINARY FILE SEQUENCE /06 JSM\n         BNE   Z15003              BR IF NOT                  06/06 JSM\n         SR    R0,R0               SET REG 0 = 0              06/06 JSM\n         ICM   R0,B'0111',FL1FILSQ LOAD FILE SEQUENCE         06/06 JSM\n         CVD   R0,DWD              CONVERT TO                 06/06 JSM\n         OI    DWD+7,X'0F'          DECIMAL DIGITS            06/06 JSM\n         UNPK  OUTBUFF2+25(5),DWD                             06/06 JSM\n         B     Z15004                                         06/06 JSM\nZ15003   MVI   OUTBUFF2+25,C'0'    PREP HIGH ORDER DIGIT      06/06 JSM\n         MVC   OUTBUFF2+26(4),FL1FILSQ  MOVE IN FILE SEQ#     06/06 JSM\nZ15004   MVC   OUTBUFF2+30(17),=C') WAS UNLOADED BY'          06/06 JSM\n         B     8(,R10)                  RETURN TO CALLER\n         SPACE 3\nBOOM     STM   R0,R15,BOOMREGS          SAVE ALL REGS\n         MVC   OUTBUFF2(50),=C'0*** TAPEMAP LOGIC ERROR - CONTACT TEC S$\n               UPPORT ***'                                          WBF\n         PRTLN2                         PRINT ERROR MSG\n         TM    PARMFLAG,PF@TEST         ABEND?\n         BNO   STAR$TWO                 NO - IGNORE REST OF FILE\n         SPACE 1\n         CLOSE MF=(E,OPENMFL)           CLOSE SYSPRINT\n         IFP2  N,BOOM2                  SKIP IF NOT OPEN\n         CLOSE MF=(E,OPENMFL2)          CLOSE SYSPRNT2\n         SPACE 1\nBOOM2    LA    R14,BOOMREGS             POINT TO REG SAVE AREA\n         EX    0,*                      AND AWAY WE GO\n         EJECT\n***********************************************************************\n*                                                                     *\n*  EXIT THE PROGRAM                                                   *\n*                                                                     *\n***********************************************************************\nLEAVE    DS    0H                                              1/93 RT\n         LR    R1,R13                                          1/93 RT\n         L     R13,4(,R13)                                     1/93 RT\n         L     R0,GETM                                         1/93 RT\n         FREEMAIN R,A=(1),LV=(0)                               1/93 RT\n         MVI   12(R13),X'FF'        INVALIDATE FWD-CHAIN       1/93 RT\n         RETURN (14,12),RC=0                                   1/93 RT\n         EJECT                                                 1/93 RT\n***********************************************************************\n*                                                                     *\n*  SUBROUTINE TO DO I/O TO TAPE                                       *\n*                                                                     *\n***********************************************************************\nTAPIO    ST    R0,TAPEIOB+16            SET CCW ADDR\n         EXCP  TAPEIOB\n         WAIT  ECB=TAPEECB\n         CLI   TAPEECB,X'7F'            DID IT WORK?\n         BE    TAPIO$OK                 YES - CONTINUE\n         CLI   TAPEECB,X'41'            CHANNEL PROGRAM ERROR?\n         BNE   TIONTMK             NO, NOT TAPEMARK           07/85 DBC\n         CLI   IOBCSW+4,X'0D'      YES, CHEND, DEVEND, UNITEXCPT?\n         BNE   TIONTMK             NO, NOT FILE MARK          07/85 DBC\n         LA    R0,1                YES, GET FILE INCRIMENT    07/85 DBC\n         AH    R0,FILE#SEQ         INCR TAPEMARK COUNTER      07/85 DBC\n         STH   R0,FILE#SEQ         STORE NEW VALUE            07/85 DBC\n         BR    R10                 RETURN TO CALLER           07/85 DBC\nTIONTMK  DS    0H                                             07/85 DBC\n         SPACE 1                                              07/85 DBC\n         ST    R10,LKRTAPIO             SAVE R10 FOR RECURSION      U16\n         CH    LCTR,=H'&LINEPPG'        ANYTHING ON PAGE? U13 11/88 SBG\n         BL    *+8                      YES - CONTINUE              U13\n         NEWPAGE  ,                     PRINT THE TITLE             U13\n         MVC   OUTBUFF(44),=C'-*** TAPE I/O ERROR *** ECB CODE=XX *** C$\n               SW='                                                 U13\n         HEX   OUTBUFF+33,TAPEECB,LEN=1                             U13\n         HEX   OUTBUFF+44,IOBCSW+1,LEN=7                            U13\n         MVC   OUTBUFF+59(24),=C'*** IOBSENSE0,1=XXXX ***'          U13\n         HEX   OUTBUFF+75,TAPEIOB+2,LEN=2                           U13\n         PRTLN OUTBUFF\n         SPACE 1\n**       L     R1,DD#PTR                -> DD SECTION OF TIOT       U13\n**       SH    R1,=H'24'                -> TIOT                     U13\n**       AH    R1,TAPEDCB+40            -> DD ENTRY FOR TAPE        U13\n**       L     R1,16(,R1)               -> UCB                      U13\n         L     R1,TAPEMFL               -> DCB                      U13\n         L     R1,44(,R1)               -> DEB                      U13\n         L     R1,32(,R1)               -> UCB                      U13\n         L     R2,20(,R1)               -> EXTENDED SENSE INFO      U13\n         CLI   IOBCSW+4,X'0E'  CH-END, DEV-END, UNIT-CHECK ?       PMCF\n         BE    $SKPSENS      SKIP SENSE DATA, UCBEX ABOVE THE LINE PMCF\n         MVC   OUTBUFF(16),=C' *** SENSE DATA='                     U13\n         HEX   OUTBUFF+16,(00,R2),LEN=4                             U13\n         HEX   OUTBUFF+25,(04,R2),LEN=4                             U13\n         HEX   OUTBUFF+35,(08,R2),LEN=4                             U13\n         HEX   OUTBUFF+44,(12,R2),LEN=4                             U13\n         HEX   OUTBUFF+54,(16,R2),LEN=4                             U13\n         HEX   OUTBUFF+63,(20,R2),LEN=4                             U13\n         PRTLN OUTBUFF                  PRINT THE SENSE DATA        U13\n         SPACE 3\n         NEWPAGE  10                    NEXT PAGE IF NEED ROOM      U15\n         MVC  OUTBUFF(35),=C'0    BITS SET ARE FLAGGED ''*'' BELOW' U15\n         PRTLN OUTBUFF                  PRINT HEADER                U15\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE FIRST ONE      U15\n         SPACE 2\n*  R2 -> SENSE DATA                                                 U15\n         LA    R3,10                    NUMBER OF BYTES             U15\n         L     R4,=A(ERR#LIST)          -> ERROR MESSAGES           U15\n         SPACE 1\nNEXTBYTE LA    R6,OUTBUFF+5             -> LINE POS                 U15\n         LA    R1,X'80'                 MASK BIT                    U15\n         SPACE 1\nTEST$BIT MVC   2(10,R6),0(R4)           MOVE TEXT                   U15\n         EX    R1,BIT$TM                IS THIS BIT SET?            U15\n         BZ    *+8                      NO - SKIP                   U15\n         MVI   0(R6),C'*'               FLAG THIS ONE               U15\n         SPACE 1\n         LA    R4,10(,R4)               -> NEXT MSG                 U15\n         LA    R6,16(,R6)               -> NEXT PRINT LINE POS      U15\n         SRA   R1,1                     MOVE BIT RIGHT              U15\n         BNZ   TEST$BIT                 CONTINUE WITH THIS BYTE     U15\n         PRTLN OUTBUFF                  PRINT DESC OF THIS BYTE     U15\n         LA    R2,1(,R2)                -> NEXT BYTE OF SENSE DATA  U15\n         BCT   R3,NEXTBYTE              CONTINUE IF MORE            U15\n$SKPSENS DS    0H                       SKIPPING SENSE DATA IN UCB PMCF\n         SPACE 3\n         CLI   WHERE,3                  READING DATA?\n         BNE   CLOSE$TP                 NO - CLOSE UP AND LEAVE\n         L     R1,TAPEIOB+16            GET CCW ADDR\n         CLI   0(R1),RD                 WAS IT A READ?\n         BNE   CLOSE$TP                 NO - CLOSE UP AND LEAVE\n         LA    R0,TCCW#FSF              SKIP REST OF DATA...\n         L     R10,LKRTAPIO             RESTORE R10                 U16\n         B     TAPIO                    START AT TOP OF THIS SUBRTN\n         SPACE 2\nBIT$TM   TM    0(R2),*-*                << EXECUTED >>              U15\n         SPACE 3                                              07/85 DBC\nTAPIO$OK LA    R0,TCCW#FSF         WAS THIS A -               07/85 DBC\n         CLM   R0,7,TAPEIOB+17      FORWARD SKIP FILE CMD?    07/85 DBC\n         BNE   TIOSAMFL            NO, STILL IN SAME FILE     07/85 DBC\n         LA    R0,1                YES, GET FILE INCRIMENT    07/85 DBC\n         AH    R0,FILE#SEQ         GET NEW FILE# -1           07/85 DBC\n         STH   R0,FILE#SEQ         STORE BACK                 07/85 DBC\nTIOSAMFL DS    0H                                             07/85 DBC\n         SPACE 1                                              07/85 DBC\n         L     R0,=A(BUFFSIZE)          GET LENGTH REQUESTED  07/85 DBC\n         MVC   DWD+2(2),IOBCSW+6        COPY LENGTH LEFT\n         XC    DWD(2),DWD               CLEAR HIGH 2 BYTES\n         S     R0,DWD                   MINUS LENGTH UNUSED\n         ST    R0,LASTSIZE         EQUALS SIZE READ           09/84 DBC\n         TM    TFLAG1,T1@ANLZ           ANALYZING?\n         BNO   4(,R10)                  NO - SKIP THIS JUNK\n         A     R0,BYTECNT               ADD PREVIOUS BYTE COUNT\n         ST    R0,BYTECNT               SAVE NEW TOTAL\n         L     R1,BLOCKCNT              GET BLOCK COUNT\n         LA    R1,1(,R1)                INCR\n         ST    R1,BLOCKCNT              SAVE NEW COUNT\n         CLC   LASTSIZE+2(2),TAPEBUFF START WITH BLKSIZE?     09/84 DBC\n         BE    *+8                      YES - COULD BE RECFM=V\n         NI    NLFLAGS,255-NL@V         NO - NOT RECFM=V\n         CLC   LASTSIZE,MAXBLKSI        SAME SIZE?\n         BE    4(,R10)                  YES - DONE HERE\n         BH    TAPIO$H                  LAST BLOCK IS BIGGEST\n         TM    NLFLAGS,NL@CHANG         ALREADY CHANGED?\n         BO    TAPIO$NL                 YES - TURN OFF RECFM=F\n         OI    NLFLAGS,NL@CHANG         SET \"CHANGED\"\n         B     4(,R10)                  RETURN\n         SPACE 1\nTAPIO$H  OI    NLFLAGS,NL@CHANG         SET \"CHANGED\"\n         MVC   MAXBLKSI,LASTSIZE        SAVE NEW BIGGEST BLKSIZE\nTAPIO$NL NI    NLFLAGS,255-NL@F         NOT RECFM=F\n         B     4(,R10)                  RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*  SUBROUTINE TO HANDLE PRINT OUTPUT                                  *\n*                                                                     *\n***********************************************************************\nNEWPAGE  CR    LCTR,R0                  ENOUGH LINES LEFT?\n         BNLR  R10                      YES - JUST RETURN\n         LA    LCTR,LINESPP-2           RESET LINE COUNTER\n         PRTLN TITLE1\n         TM    TFLAG1,T1@PAGE1          IS THIS FIRST PAGE OF VOL?\n         BNO   NEWPAG$2                 NO - SKIP THIS STUFF.\n         NI    TFLAG1,255-T1@PAGE1      TURN OFF FLAG\n         MVC   TITLE2+1(28),TITLE2      BLANK IT OUT\n         SPACE 1\nNEWPAG$3 TM    TFLAG1,T1@PARM           HAVE PARM FIELD?\n         BNO   NEWPAG$4                 NO - SKIP\n         TM    TFLAG2,T2@LPARM          IS IT TOO LONG?\n         BO    NEWPAG$4                 YES - SKIP\n         MVC   TITLE2+1(28),PARM#MSG+1  MOVE IN THE PARM FIELD\n         SPACE 1\nNEWPAG$4 PRTLN TITLE2                   PRINT AUTHOR LINE\n         SPACE 1\nNEWPAG$1 TM    TFLAG1,T1@PARM           HAVE PARM FIELD?\n         BNO   NEWPAG$2                 NO - DON'T PRINT IT\n         TM    TFLAG2,T2@LPARM          LONG PARM FIELD?\n         BNO   NEWPAG$5                 NO - ALREADY PRINTED        U15\n         PRTLN PARM#MSG                 PRINT IT\nNEWPAG$5 TM    TFLAG1,T1@PERR           ERROR IN PARM FIELD?\n         BNO   NEWPAG$2                 NO - DON'T PRINT IT\n         PRTLN PARMERR                  PRINT IT\n         SPACE 1\nNEWPAG$2 LA    R0,DASHES\n         BA&XA R14,PUTPRTLN             SEPARATOR LINE\n         PRTLN COLHEAD1,I\n         PRTLN COLHEAD2,I\n         LA    R0,DASHES\n         BA&XA R14,PUTPRTLN             SEPARATOR LINE\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE THE FIRST FILE U15\n         BCTR  LCTR,0                   ADJUST THE LINE COUNT       U15\n         TM    TFLAG2,T2@RQVOL          WRONG VOLUME MOUNTED?       U15\n         BNOR  R10                      NO - ALL DONE               U15\n         NI    TFLAG2,255-T2@RQVOL      TURN OFF FLAG NOW           U15\n         MVI   OUTBUFF,C'-'             TRIPLE SPACE                U15\n         MVI   OUTBUFF+41,C'*'          START OF BOX                U15\n         MVC   OUTBUFF+42(49),OUTBUFF+41  REST OF IT                U15\n         PRTLN OUTBUFF                  PRINT TOP OF BOX            U15\n         MVC   OUTBUFF+41(50),=C'* ID OF MOUNTED VOLUME DIFFERS FROM ID$\n                REQUESTED *'            MOVE IN MSG                 U15\n         PRTLN OUTBUFF                  PRINT MSG                   U15\n         SH    LCTR,=H'2'               ACCOUNT FOR TRIPLE SPACE    U15\n         MVI   OUTBUFF+41,C'*'          START OF BOX                U15\n         MVC   OUTBUFF+42(49),OUTBUFF+41  REST OF IT                U15\n         PRTLN OUTBUFF                  PRINT BOTTOM OF BOX         U15\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE FIRST FILE     U15\n         BR    R10                      RETURN\n         SPACE 3\nPRTLN    ST    R14,PRT#SAVE             SAVE RETURN ADDR\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE\n         BA&XA R14,PUTPRTLN             WRITE OUTPUT LINE\n         L     R14,PRT#SAVE             RESTORE RETURN ADDR\n         MVC   OUTBUFF,OUTCLEAR         CLEAR OUTPUT LINE\n         BCTR  LCTR,R14                 RETURN IF MORE LINES LEFT\n         ST    R14,R14SAVE              SAVE MY R14\n         ST    R10,R10SAVE              SAVE SOMEONE'S R10\n         NEWPAGE ,                      DO A NEW PAGE\n         L     R14,R14SAVE              RESTORE MY R14\n         L     R10,R10SAVE              RESTORE SOMEONE'S R10\n         BR    R14                      RETURN TO CALLER\n         SPACE 2\nPUTPRTLN L     R1,OPENMFL               GET DCB ADDR\n         PUT   (1),(0)                  WRITE OUTPUT LINE\n         ORG   *-2                      BACK OVER BALR\n         BR    R15                      MAKE HIM RETURN TO MY CALLER\n         SPACE 3\n************************************************************* 12/88 SBG\n* A BAL TO NEWPAGE2+4 IS DONE IN SEVERAL PLACES.            * 12/88 SBG\n* THE CONDITION CODE AT THOSE POINTS IS NOT SET AT LABEL    * 12/88 SBG\n* NEWPAGE2, BUT RATHER, JUST ABOVE THOSE BAL INSTRUCTIONS.  * 12/88 SBG\n* IT IS THEREFORE IMPORTANT THAT THE INSTRUCTION JUST BELOW * 12/88 SBG\n* LABEL NEWPAGE2 HAVE THE CORRECT CONDITION SETTINGS.       * 12/88 SBG\n************************************************************* 12/88 SBG\nNEWPAGE2 C     R0,LCTR2                 ENOUGH LINES LEFT?    12/88 SBG\n         BLR   R10                      YES - JUST RETURN     12/88 SBG\n         SPACE 1\n         LA    R0,TITLE1                GET RECORD ADDR\n         BA&XA R14,PUTPRNT2+4           WRITE IT OUT\n         LA    R0,DASHES\n         BA&XA R14,PUTPRNT2+4           WRITE IT OUT\n         LA    R14,LINESPP-3            RESET LINE COUNTER    02/93 RT\n         ST    R14,LCTR2                                      02/93 RT\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\nPRTLN2   ST    R14,PRT#SAVE             SAVE RETURN ADDR\n         LA    R1,3                     ASSUME TRIPLE SPACE\n         CLI   OUTBUFF2,C'-'            IS IT?\n         BE    P2$OK                    YES\n         BCTR  R1,0                     ASSUME DOUBLE SPACE\n         CLI   OUTBUFF2,C'0'            IS IT?\n         BE    P2$OK                    YES\n         BCTR  R1,0                     ASSUME SINGLE SPACE\n         CLI   OUTBUFF2,C' '            IS IT?\n         BE    P2$OK                    YES\n         MVI   OUTBUFF2,C' '            MAKE A BLANK\n         SPACE 1\nP2$OK    L     R14,LCTR2                DECR LINE COUNT       02/93 RT\n         SR    R14,R1                                         02/93 RT\n         ST    R14,LCTR2                                      02/93 RT\n         BP    P2$GO                    CONTINUE IF OK\n         NEWPAGE  ,2                    SET NEW PAGE\n         MVI   OUTBUFF2,C'-'            TRIPLE SPACE FIRST LINE     U13\n         L     R14,LCTR2                ACCOUNT FOR IT        02/93 RT\n         SH    R14,=H'3'                                      02/93 RT\n         ST    R14,LCTR2                                      02/93 RT\n         SPACE 1\nP2$GO    BA&XA R14,PUTPRNT2             WRITE OUTPUT LINE\n         MVC   OUTBUFF2,OUTCLR2         CLEAR OUTPUT LINE\n         L     R14,PRT#SAVE             GET RETURN ADDR\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\nPUTPRNT2 LA    R0,OUTBUFF2              GET RECORD ADDR\n         L     R1,OPENMFL2              GET SYSPRNT2 DCB ADDR\n         PUT   (1),(0)                  WRITE IT OUT\n         ORG   *-2                      BACK OVER BALR\n         BR    R15                      MAKE HIM RETURN TO MY CALLER\n         SPACE 3\n         PUSH  PRINT                                                U13\n         PRINT GEN                                                  U13\n         SPACE 1\nPRT$EXIT DCBEXIT  BLKSIZE=3192,BUFNO=1                              U15\n         POP   PRINT                                                U13\n         EJECT\n***********************************************************************\n*                                                                     *\n*    ICALLABLE SUBROUTINES                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*  SUBROUTINE TO CONVERT A HALFWORD TO PRINTABLE FORM\nCONVHALF MVC   DWD(2),0(R1)             MOVE FIELD TO AN ALIGNED PLACE\n         LH    R0,DWD                   PICK IT UP\n         CVD   R0,DWD                   CONVERT TO PACKED\n         MVC   1(5,R15),=X'2020202120'  MOVE IN EDIT MASK\n         ED    0(6,R15),DWD+5           DO THE EDIT\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 2-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP2   MVC   1(3,R15),=X'202120'      MOVE EDIT PATTERN TO OUT AREA\n         ED    0(4,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 3-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP3   MVC   1(5,R15),=X'2020202120'  MOVE EDIT PATTERN TO OUT AREA\n         ED    0(6,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 4-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP4   MVC   1(7,R15),=X'20202020202120'  MOVE EDIT PATTERN\n         ED    0(8,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A PACKED DATE FIELD TO PRINTABLE FORM\nCONVMDY  MVC   MDYP(4),=PL4'0'          ZERO MDYP (4-BYTES PACKED)\n         MVC   MDYP(3),0(R1)            GET MMDDYY (PACKED W/O SIGN)\n         UNPK  MDYU(7),MDYP(4)          UNPACK IT\n         MVC   0(2,R15),MDYU            MOVE MM\n         MVI   2(R15),C'/'                   /\n         MVC   3(2,R15),MDYU+2               DD\n         MVI   5(R15),C'/'                   /\n         MVC   6(2,R15),MDYU+4               YY\n         BR    R14                      RETURN\n         SPACE 3\n*  SUBROUTINE TO REMOVE LEADING BLANKS\nSLIDE    CLI   0(R15),C' '              NON-BLANK YET?\n         BNER  R14                      YES - RETURN TO CALLER\n         MVC   0(6,R15),1(R15)          MOVE IT LEFT 1 POS\n         B     SLIDE                    AND CHECK IT AGAIN\n         SPACE 3\n*  SUBROUTINE TO REMOVE LEADING ZEROES\nDEZERO   CLI   0(R1),C'0'               NON-ZERO YET?\n         BNER  R14                      YES - RETURN\n         MVI   0(R1),C' '               MAKE IT A BLANK\n         A     R1,=F'1'                 ADVANCE\n         B     DEZERO                   LOOP\n         SPACE 3\n*  SUBROUTINE TO CONVERT A UNIT TYPE\nCONVUNIT MVC   OUTBUFF2+120(9),=C'UNIT=????'\n         CLI   3(R1),X'0F'              TOO BIG?              03/94 SBG\n         BHR   R10                      YES - RETURN\n         IC    R14,3(,R1)               ELSE GET BYTE\n         N     R14,=F'255'              ISOLATE IT\n         BZR   R10                      INVALID IF ZERO\n         BCTR  R14,0                    -1 BECAUSE NO ZERO\n         MH    R14,=H'6'                LENGTH OF A TABLE ENTRY\n         LA    R15,=C'2311  2301  2303  2302  2321  2305-12305-22314  3$\n               330  3340  3350  3375  3330-13380  3390  '     03/94 SBG\n         LA    R14,0(R14,R15)           POINT TO CORRECT ENTRY\n         MVC   OUTBUFF2+125(6),0(R14)   MOVE DEVTYPE TO LINE\n         BR    R10                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A DSORG\nCNVDSORG LA    R1,TAPEBUFF\n         AH    R1,0(,R10)               GET DSORG ADDR\n         SPACE 1\nCNVDSORX TM    0(R1),X'01'              DSORG=**U\n         BNO   *+8                      NO - SKIP\n         MVI   2(R15),C'U'\n         SPACE 1\n         MVC   0(2,R15),=C'PO'          ASSUME DSORG=PO\n         TM    0(R1),X'02'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'DA'          ASSUME DSORG=DA\n         TM    0(R1),X'20'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'PS'          ASSUME DSORG=PS\n         TM    0(R1),X'40'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'IS'          ASSUME DSORG=IS\n         TM    0(R1),X'80'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(4,R15),=C'VSAM'        ASSUME VSAM\n         CLC   0(2,R1),=X'0008'         IS IT?\n         BER   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(4,R15),=C'**  '        NONE OF THE ABOVE???\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A RECFM\nCNVRECFM LA    R1,TAPEBUFF\n         AH    R1,2(,R10)               GET RECFM ADDR\n         SPACE 1\nCNVRECFX TM    0(R1),X'C0'              RECFM=U?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'U'\n         B     RECFM$2                  CONTINUE\n         SPACE 1\n         TM    0(R1),X'80'              RECFM=F?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'F'\n         B     RECFM$2                  CONTINUE\n         SPACE 1\n         TM    0(R1),X'40'              RECFM=V?\n         BNO   *+8                      NO - TRY NEXT\n         MVI   0(R15),C'V'\n         SPACE 1\nRECFM$2  LA    R15,1(,R15)\n         TM    0(R1),X'10'              BLOCKED?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'B'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'08'              SPANNED?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'S'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'20'              TRK OVFL?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'T'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'02'              RECFM=A?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'A'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'01'              RECFM=M?\n         BNOR  R14                      NO - RETURN TO CALLER\n         MVI   0(R15),C'M'\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO COMPUTE TAPEFEET\nTAPEFEET XR    R0,R0\n         D     R0,=F'1200'              GET LENGTH IN FEET\n         CH    R0,=H'600'               ROUND UP?\n         BL    *+8                      NO\n         A     R1,=F'1'                 ROUND UP.\n         CVD   R1,DWD\n         MVC   1(5,R15),=X'2020202120'\n         ED    0(6,R15),DWD+5\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO FIND A TIOT ENTRY\nTIOTSCAN L     R1,DD#PTR                -> DD SECTION\n         XR    R0,R0                    CLEAR FOR IC\n         BA&XA R14,*+6                  SET LOOP ADDR & SKIP\n         SPACE 1\n         AR    R1,R0                    POINT TO NEXT ENTRY\n         IC    R0,0(,R1)                GET LENGTH OF THIS ENTRY\n         LTR   R0,R0                    END OF TIOT?\n         BZR   R10                      YES - \"NOT FOUND\" RETURN\n         CLC   4(8,R1),0(R15)           THIS IT?\n         BNER  R14                      NO - LOOP\n         CLC   =F'0',16(R1)             DD DUMMY? (LIKE MSM?)\n         BNE   4(,R10)                  NO - RETURN (FOUND)\n         BR    R10                      SAY NOT FOUND\n         EJECT\n         LTORG ,\n         SPACE 6\n*  REGISTER EQUATES                                            1/93 RT\nR0       EQU   0                                               1/93 RT\nR1       EQU   1                                               1/93 RT\nR2       EQU   2                                               1/93 RT\nR3       EQU   3                                               1/93 RT\nR4       EQU   4                                               1/93 RT\nR5       EQU   5                                               1/93 RT\nR6       EQU   6                                               1/93 RT\nR7       EQU   7                                               1/93 RT\nR8       EQU   8                                               1/93 RT\nR9       EQU   9                                               1/93 RT\nR10      EQU   10                                              1/93 RT\nR11      EQU   11                                              1/93 RT\nR12      EQU   12                                              1/93 RT\nR13      EQU   13                                              1/93 RT\nR14      EQU   14                                              1/93 RT\nR15      EQU   15                                              1/93 RT\n*  REGISTERS USED IN ROUTINES TO LIST IEHMOVE & IEBCOPY UNLOADED MEMBRS\nBLEN     EQU   R2      *PAIR*           BLOCK LENGTH LEFT\nBPTR     EQU   R3      *PAIR*           -> CURRENT POS IN BLOCK\nDLEN     EQU   R4                       DIRBLK OR DATA LENGTH LEFT\nDPTR     EQU   R5                       -> CURRENT POS IN BLOCK\nPPTR     EQU   R6                       -> POS IN PRINT LINE\n         SPACE 1\n*  OTHER MISC REGISTERS\nLCTR     EQU   R8                       # OF LINES LEFT THIS PAGE\nLCTR2    DS    F                        STORAGE INSTEAD OF REG 1/93 RT\n         SPACE 1\nCC       EQU   X'40'                    COMMAND CHAINING\nSLI      EQU   X'20'                    SUPPRESS LENGTH INDIC.\n         SPACE 1\nRD       EQU   X'02'                    READ\nBSF      EQU   X'2F'                    BACKSPACE FILE        02/93 RT\nFSF      EQU   X'3F'                    FORWARD SPACE FILE\nRWD      EQU   X'07'                    REWIND\n         SPACE 1\nBUFFSIZE EQU   X'FFFF'             SIZE OF TAPE BUFFER        09/84 DBC\nLINESPP  EQU   &LINEPPG                 LINES PRINTED PER PAGE11/88 SBG\n         SPACE 2\nOPENMFL2 OPEN  (SYSPRNT2,OUTPUT),MF=L\nOPENMFL  OPEN  (SYSPRINT,OUTPUT),MF=L\nOPENMFLI OPEN  SYSIN,MF=L\nTAPEMFL  OPEN  TAPEDCB,MF=L\n         SPACE 1\nEXLST    DC    A(0)\nPRTEXLST DC    X'85',AL3(PRT$EXIT)\n         SPACE 2\nTAPEECB  DC    A(0)\nTAPEIOB  DC    X'42000000'              IOBFLAG1 (SET FOR CMD CHAINING)\n         DC    A(TAPEECB)               ECB ADDR\nIOBCSW   DC    2F'0'                    CSW\n         DC    A(0)                     CHANNEL PGM ADDR\n         DC    A(TAPEDCB),A(0)          DCB ADDR\n         DC    H'1',H'0'                TAPE BLOCK COUNT INCREMENT\n         SPACE 1\nTCCW#BSF CCW   BSF,0,0,1                BACKSPACE FILE\n         SPACE 1\nTCCW#FSF CCW   FSF,0,0,1                FWD SPACE FILE\n         SPACE 1\nTCCW#LBL CCW   RD,*-*,CC,80             READ 80 BYTE BLOCK INTO FL1LABI\n         CCW   RD,*-*,00,80             READ IN NEXT BLOCK INTO FL2LABI\n         SPACE 1\nTCCW#EOV CCW   RD,*-*,00,80             READ 80 BYTE BLOCK INTO FL1LABI\n         SPACE 1\nTCCW#DAT CCW   RD,*-*,SLI,BUFFSIZE      READ DATA BLOCK\n         SPACE 1\nTCCW#RWD CCW   RWD,0,0,1                REWIND THE TAPE\n         SPACE 1\nTCCW#SNS CCW   4,SENSDATA,SLI,24        READ SENSE DATA\n         SPACE 2\nSENSDATA DC    XL24'00'                 SENSE DATA BUFFER\n         SPACE 2\nTFLAG1   DC    X'00'                    FLAGS\nT1@PARM  EQU   X'80'                    HAVE PARM FIELD\nT1@PERR  EQU   X'40'                    ERROR IN PARM FIELD\nT1@PAGE1 EQU   X'20'                    THIS IS FIRST TITLE GROUP\nT1@BADEN EQU   X'10'                    DENSITY ERROR IN TAPE LABEL(S)\nT1@SL    EQU   X'08'                    THIS TAPE IS SL\nT1@ANLZ  EQU   X'04'                    PARM=CHECK OR NL TAPE\nT1@MVEOF EQU   X'02'                    IEHMOVE2 HAS READ TILL EOF\nT1@DATA  EQU   X'01'                    HAVE INPUT DATA\n         SPACE 1\nTFLAG2   DC    X'00'                    MORE\nT2@RQVOL EQU   X'80'                    REQUESTED VOL MISMATCH\nT2@LPARM EQU   X'40'                    PARM FIELD LONGER THAN 21 CHARS\nT2@PRT2  EQU   X'20'                    SECOND PRINT FILE IN USE\n         SPACE 1\nNLFLAGS  DC    X'00'                    NON-LABELLED TAPE FLAGS\nNL@V     EQU   X'80'                    RECFM=V\nNL@F     EQU   X'40'                    RECFM=F\nNL@CHANG EQU   X'20'                    BLOCKSIZE HAS CHANGED\n         SPACE 1\nPARMFLAG DC    X'00'\nPF@TEST  EQU   X'80'                    TEST\nPF@INLIN EQU   X'40'                    INLINE\nPF@NOMEM EQU   X'20'                    NOMEMBERS (NOMEM)\nPF@DEN1  EQU   X'10'                    DEN1\nPF@NATTR EQU   X'08'                    NOATTR\nPF@NONOT EQU   X'04'                    NONOTE\nPF@NOCHK EQU   X'02'                    NOCHECK (NOSCAN)      06/84 DBC\nPF@NL    EQU   X'01'                    NL\n         SPACE 1\nPARMTAB  DC    H'3',C'TEST     ',AL1(PF@TEST)\n         DC    H'5',C'INLINE   ',AL1(PF@INLIN)\n         DC    H'8',C'NOMEMBERS',AL1(PF@NOMEM)\n         DC    H'4',C'NOMEM    ',AL1(PF@NOMEM)\n         DC    H'3',C'DEN1     ',AL1(PF@DEN1)\n         DC    H'5',C'NOATTR   ',AL1(PF@NATTR)\n         DC    H'5',C'NONOTE   ',AL1(PF@NONOT)\n         DC    H'6',C'NOCHECK  ',AL1(PF@NOCHK)                06/84 DBC\n         DC    H'5',C'NOSCAN   ',AL1(PF@NOCHK)                06/84 DBC\nPARMLAST DC    H'1',C'NL       ',AL1(PF@NL)\n         SPACE 2\n         DC    C' '                     FOR CLEARING \"UNLOADER\"\nUNLOADER DC    CL8' '             /   /IEBCOPY/IEHMOVE/IEBISA 06/84 DBC\nC00080   DC    C'00080'\n         ORG   C00080+1\nC00800   DC    C'00800'\nRET#ADDR DC    A(EOD2)                  RETURN ADDR\nDEN#LIST DC    F'200,556,800,1600,6250,37871'  DENSITY VALUES       THO\n         DC    C'200 556 800 16006250N/A '     RIGHT AFTER ABO LINE THO\nTRUE#DEN DC    C'3',AL3(DEN#LIST+8)     REAL DEN;  -> 4 CHAR REAL DEN\nF1       DC    F'1'                                                 U14\nH1       EQU   F1+2                                                 U14\nF15      DC    F'15'                                                U14\nNULLNUMB DC    H'0'                     # OF NULL FILES TO SKIP     U14\nNUMBNULL DC    H'0'                     # OF NULL FILES / THIS TAPE U14\nWHERE    DC    X'00'                    WHERE-WE-ARE FLAG\n         SPACE 1\n         PUSH  PRINT\n         PRINT GEN\n         SPACE 1\nHEXTAB   HEXTAB  DUAL=NO\n         SPACE 3                                                    THO\n         POP   PRINT                                                THO\n         SPACE 1                                                    THO\n*                                                             DRK APR07\n* TABLE OF FDR DEVICE TYPES AND CODES                         DRK APR07\n* COURTESY OF BRUCE BLACK, INNOVATION DP                      DRK APR07\n*                                                             DRK APR07\nFDRDVTAB DS    0C                                             09/84 DBC\n         DC    C'A2305-1'                                     DRK APR07\n         DC    C'BF6421 '   (FUJITSU)                         DRK APR07\n         DC    C'C2305-2'                                     DRK APR07\n         DC    C'D3380-1'   (3390-1 COMPATIBILITY, 1113 CYLS) DRK APR07\n         DC    C'E3380-2'   (3390-2 COMPATIBILITY, 2226 CYLS) DRK APR07\n         DC    C'F3390-1'   NATIVE (1113 CYLS)                DRK APR07\n         DC    C'G3390-2'   NATIVE (2226 CYLS)                DRK APR07\n         DC    C'H3380E4'   (EMC E- \"MINUS\", 1408 CYLS)       DRK APR07\n         DC    C'I3390-F'   (HITACHI, 2655 CYLS)              DRK APR07\n         DC    C'J3380-3'   (3390-3 COMPATIBILITY, 3339 CYLS) DRK APR07\n         DC    C'K3380-K'   (2655 CYLS)                       DRK APR07\n         DC    C'L3380-E'   (1770 CYLS)                       DRK APR07\n         DC    C'M3380  '   (SINGLE DENSITY, 885 CYLS)        DRK APR07\n         DC    C'N3375  '                                     DRK APR07\n         DC    C'O3390-3'   NATIVE (3339 CYLS)                DRK APR07\n         DC    C'P9345-1'   (1440 CYLS)                       DRK APR07\n         DC    C'Q9345-2'   (2156 CYLS)                       DRK APR07\n         DC    C'R3380K4'   (EMC K- \"MINUS\", 1830 CYLS)       DRK APR07\n         DC    C'S3390E2'   (EMC, 1540 CYLS)                  DRK APR07\n         DC    C'T2314  '                                     DRK APR07\n         DC    C'U334035'                                     DRK APR07\n         DC    C'V334070'                                     DRK APR07\n         DC    C'W3390-9'   (10017 CYLS)                      DRK APR07\n         DC    C'X3330  '   (MODEL 1)                         DRK APR07\n         DC    C'Y333011'                                     DRK APR07\n         DC    C'Z3350  '                                     DRK APR07\n         DC    C'03380K5'   (EMC, K+ \"PLUS,\" 3993 CYLS)       DRK APR07\n         DC    C'1399553'   (3995-153, 4365 CYLS)             DRK APR07\n         DC    C'2339027'   (32760 CYLS)                      DRK APR07\n         DC    C'3339054'   (65520 CYLS)                      DRK APR07\nFDRDVEND DC    C' ??????'          FENCE FOR UNKNOWN FDR DEVICES\n         EJECT\nWORKD    DSECT                          RESUME\n         DS    9D                  SAVE AREA                  01/93 RT\nDD#PTR   DS    A                        -> DD SECTION OF TIOT\nLEN#TAPE DS    F                        TAPE LENGTH\n         DS    F                        NL LENGTH\nFILE#SEQ DS    H                        NL FILE SEQ #\n         DS    H                        (UNUSED)\nPRT#SAVE DS    A                        SAVE FOR RETURN ADDR\nR10SAVE  DS    A                        MORE...\nLKRTAPIO DS    A                        ...OF THE...\nR14SAVE  DS    A                        ...SAME\nTU$SAVE2 DS    2A                  USED BY TEST$UP            06/84 DBC\nBOOMREGS DS    16F                      REG SAVE AREA FOR LOGIC ERROR\nMAXBLKSI DS    F                   BIGGEST BLOCK READ SO FAR  09/84 DBC\nLASTSIZE DS    F                   SIZE OF THE LAST BLK READ  09/84 DBC\nBLOCKCNT DS    F                        # OF BLOCKS READ\nBYTECNT  DS    F                        TOTAL # OF BYTES READ\nCBTBLK1  DS    F                   STORE BLOCKSIZ FOR CBT973. 11/88 SBG\nCBTAPEND DS    F                   STORE EO-BLOCK FOR CBT973. 11/88 SBG\nCBSTOR1  DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR2  DS    F                   STORE REGISTER FOR CBT973. 01/93 RT\nCBSTOR01 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR02 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR03 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR04 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR05 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR06 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR08 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR09 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR10 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSAVE4  DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSAVE15 DS    F                   STORE REGISTER 15          11/88 SBG\nNL#SAVE  DS    4F                  SAVE FOR NL STUFF IF SL    09/84 DBC\nNL#FLAGX DS    X                        SAME\nUPDT#TYP DS    C                        A,R,C FOR UPDTE\nPTF#TYPE DS    C                   A,F,P,U FOR SYSMODS        07/85 DBC\nUPDTXFLG DS    C                   FLAG IF ./ OR >< IN UPDTE  11/88 SBG\nBLANKS   DS    0CL17,CL16' '\nOUTCLEAR DC    C' '                     FOR CLEARING OUTBUFF\nOUTBUFF  DS    CL133\nOUTCLR2  DC    C' '                     FOR CLEARING OUTBUFF2\nOUTBUFF2 DS    CL133,7C                                             U14\nDASHES   DS    CL133\nINBUFF   DS    CL80\nLABELS   DS    3CL80                    FOR VOL,FL1,FL2\nCBTCLEAR DC    C' '                     FOR CLEARING CBT CARD 11/88 SBG\nCBTCARD  DS    CL80              CBT973 CARD-IMAGE EXPANSION  11/88 SBG\nCSTATCLR DC    C' '                     FOR CLEARING CBT DOC  12/88 SBG\nCBTVERS  DS    CL4                      CBT TAPE VERSION #    12/88 SBG\nCBTDATE  DS    CL8                      CBT TAPE RELEASE DATE 12/88 SBG\nMV#ABUF2 DS    A(MV#BUFF2)              ADDR OF SECOND DE-SPANNING BUFF\nMV#BUFF1 DS    CL78                     FIRST DE-SPANNING BUFFER\nMV#BUFF2 DS    CL78                     SECOND DE-SPANNING BUFFER\nPARM#MSG DS    CL110                    FOR PARM\nOB2END   DS    A(OUTBUFF2+110)          ADDR OF END OF OUTBUFF2\nOB2END2  DS    A(OUTBUFF2+110+10)       SAME FOR UPDTE\nDASDRSAV DS    XL24                     FOR HEADER RECORD\nFDRSAVE  DS    CL8                      FOR 'DUMMYDSF' IF PRESENT\nMDYP     DS    PL4'0'                   FOR CONVMDY\nMDYU     DS    CL7                      FOR CONVMDY\n         SPACE 2                                              12/88 SBG\n***** LOADED  LITERALS  -  SEE END OF THE PROGRAM  ********** 12/88 SBG\n         DS    0D                                             12/88 SBG\nEMPTYLIT DC    C'THISFILEHASBEENDELETEDORISRESERVED'  NEWVERS 12/88 SBG\nEMPTYLI2 DC    C'DELETEDBYPREVIOUSVERSIONOFTHISTAPE'  OLDVERS 12/88 SBG\nREQ#VOL  DC    C'+** REQUESTED VOL=\"123456\" **'\n         SPACE 1\nFVOL#MSG DC    C' *** THIS IS VOLUME # XXXX OF THE ABOVE MULTIPLE VOLUM$\n               E FILE.  FIRST VOLUME WAS XXXXXX.'\n         SPACE 1\nPARMERR  DC    C' UNKNOWN PARM OPTION AT COL=XXX.  ANY REMAINING PARM I$\n               GNORED.'\nFFS      DC    XL12'FFFFFFFFFFFFFFFFFFFFFFFF'\nCHJOBLIT DC    C'//MVSMODS'       ARNIE CASINGHINO'S JOBNAME  12/88 SBG\nVERSLIT1 DC    C'* VERSION'       DATE OF CBT TAPE - PREFIX   12/88 SBG\nVERSLIT2 DC    C'VERSION #'       VERSION OF CBT TAPE PREFIX  12/88 SBG\nCBHLIT   DC    C'VER        -  -  '   DISPLAY FOR CBTHEADER   12/88 SBG\n         SPACE 1                                              12/88 SBG\n************************************************************* 12/88 SBG\n*  TABLE OF UNLOADER LITERALS - NOTE, IF YOU ADD TO THIS      12/88 SBG\n*   TABLE, YOU MUST ADD TO THE LIST OF LITERALS TO BE MOVED   12/88 SBG\n*   INTO THIS WORKAREA THAT IS AT THE END OF THIS PROGRAM.    12/88 SBG\n*  PLEASE SEE THE LABEL CALLED \"LITMOVES\" -  THIS WAS BECAUSE 12/88 SBG\n*   THE 3RD BASE REGISTER WAS EXCEEDED, AND I MOVED SOME OF   12/88 SBG\n*   THE LITERALS INTO THE WORKAREA DSECT.  THEY THEREFORE     12/88 SBG\n*   HAVE TO BE INITIALIZED IN THE GETMAINED WORKAREA STORAGE. 12/88 SBG\n************************************************************* 12/88 SBG\nIEBCOPY  DC    C'IEBCOPY'\nIEHMOVE  DC    C'IEHMOVE'\nIEBISAM  DC    C'IEBISAM'\nIEHDASDR DC    C'IEHDASDR'\nIEBUPXXX DC    C'IEBUPXXX'         IEBUPDTE OR IEBUPDAT       06/84 DBC\nFDR      DC    C'FDR   '\nFDRDSF   DC    C'FDRDSF'\nFDRXXX   DC    C'FDR???'\nSLICKMNG DC    C'SLICKMNG'                                    09/84 DBC\nCTAPEMAP DC    C'TAPEMAP'\nSMPPTFIN DC    C'SMPPTFIN'                                    07/85 DBC\nCBT973   DC    C'CBT973'                                      11/88 SBG\nCBTEMPTY DC    C'CBTEMPTY'         EMPTY FILE ON THE CBT TAPE 11/88 SBG\nCBHEADER DC    C'CBT DOC '         DOC FILE FOR THE CBT TAPE  12/88 SBG\nUTY3420C DC    X'33008003'        UNIT TYPE FOR 3420C CARTS   09/89\u00acSBG\n         DS    0F                 ALIGNMENT                   12/88 SBG\nCDOCSIZE DC    F'32720'           BLOCK SIZE OF CBT DOC FILE  12/88 SBG\nINCORLAB DC    C'-*****  ONE OR MORE FILES HAVE DENSITY INDICATED INCOR$\n               RECTLY IN LABELS.  ALL FILES ARE WRITTEN AT XXXX BPI  **$\n               ***'\n***** LOADED  LITERALS  -  SEE END OF THE PROGRAM  ********** 12/88 SBG\n         SPACE 2\nDWD      DS    D\nJFCB     DS    XL176                    DWD ALIGNED\n************************************************************* 12/88 SBG\n*  WE CONTINUE TO ADDRESS THE PROBLEM OF EXCEEDING 3 BASE   * 12/88 SBG\n*  REGISTERS.  PREVIOUSLY, THE TAPE BUFFER WAS ALIGNED ON   * 12/88 SBG\n*  HALF A PAGE.  WE WANT TO HAVE MOST OF THIS HALF A PAGE   * 12/88 SBG\n*  FOR COPYING LITERALS SO THEY CAN BE ADDRESSABLE FROM THE * 12/88 SBG\n*  WORKAREA'S BASE REGISTER.  WE HOPE THE ALIGNMENT OF      * 12/88 SBG\n*  WORKD+2048 WASN'T REALLY NECESSARY.                      * 12/88 SBG\n*-----------------------------------------------------------* 12/88 SBG\n*  HOWEVER, IF TAPEBUFF+NNN HAS BEEN SPECIFIED IN ANY       * 12/88 SBG\n*  INSTRUCTION, THE SUM OF THE DISPLACEMENT OF TAPEBUFF     * 12/88 SBG\n*  AND NNN MUST NOT EXCEED 4095.  THE LARGEST SUCH          * 12/88 SBG\n*  DISPLACEMENT WE HAVE FOUND AT THIS WRITING IS 282.       * 12/88 SBG\n*  THAT IS TO SAY, TAPEBUFF+282 IS THE FARTHEST OUT         * 12/88 SBG\n*  ADDRESS THAT THE CURRENT INCARNATION OF THIS PROGRAM     * 12/88 SBG\n*  HAS TO GET TO, FROM REGISTER 13.  THEREFORE, I HAVE      * 12/88 SBG\n*  SUBTRACTED 300 FROM 4096 AND SET TAPEBUFF AT WORKD+3796. * 12/88 SBG\n*  PLEASE REMEMBER THAT AT LEAST DOUBLEWORD ALIGNMENT       * 12/88 SBG\n*  SHOULD BE OBSERVED.                                      * 12/88 SBG\n************************************************************* 12/88 SBG\n         ORG   WORKD+3796   ALIGN THE BUFFER NOT SO REAL WELL 12/88 SBG\nTAPEBUFF DS    CL(BUFFSIZE)             TAPE INPUT DATA BUFFER\nWORKLEN  EQU   *-WORKD\n         SPACE 2\n         ORG   OUTBUFF+1\n#UNLOAD  DS    CL8,1C                                         06/84 DBC\n#FILE    DS    CL5,1C                                         06/06 JSM\n#DSN     DS    CL17,2C\n#PSWD    DS    CL4,2C                                         06/84 DBC\n#CDATE   DS    CL6,2C\n#EDATE   DS    CL6,2C                                         06/84 DBC\n#INFOSRC DS    CL6,2C                                         06/84 DBC\n#RECFM   DS    CL5,2C                                         06/84 DBC\n#LRECL   DS    CL5,2C\n#BLKSIZE DS    CL5,2C\n#BLKCNT  DS    CL6,2C\n#DEN     DS    CL4,1C                                         06/84 DBC\n#TRTCH   DS    CL3,2C                                         06/84 DBC\n#LENGTH  DS    CL4,2C                                         06/84 DBC\n#CUMLEN  DS    CL4,2C                                         06/84 DBC\n#CREATOR DS    CL17                                           06/84 DBC\n         SPACE 2\n         PUSH  PRINT\n         PRINT GEN\n         SPACE 2\n         ORG   LABELS\n         SPACE 2\n         VOL   DSECT=NO\n         FL1   DSECT=NO\n         FL2   DSECT=NO\n         POP   PRINT\n         EJECT\nTAPEMAP  CSECT                          RESUME\n         SPACE 2\n         XYZZY NOGEN               SUPPRESS EXPANSION         06/84 DBC\n         SPACE 1                                              06/84 DBC\nTAPEDCB  DCB   DSORG=PS,MACRF=E,DDNAME=SYSUT1,DEVD=TA,EXLST=EXLST,     $\n               IOBAD=TAPEIOB\n         XYZZY GEN                                            09/84 DBC\n         SPACE 2\nTITLE1   DC    C'1VOL=                             TAPE ANALYSIS PROGRA$\n               M   (T A P E M A P)  V2.5.1        DAYDAYDAY  MON DD, 19>\n               YY  (YY.DDD)  HH:MM:SS'                        06/06 JSM\nTTL1TIME EQU   *-9\nTTL1DATE EQU   TTL1TIME-23\nTTL1DAY  EQU   TTL1DATE-11\n         SPACE 2\nTITLE2   DC    C'                                                      $\n                                                                       $\n                                    '\n         SPACE 2\nDSFHDING DS    CL133\n         ORG   DSFHDING\n         DC    CL17'0'\nDSFDSN   EQU   *-DSFHDING\n         DC    CL44'-------------------DSNAME-------------------',C'-'\nDSFTRK   EQU   *-DSFHDING\n         DC    CL9'TRKS USED',C'-'                     TRACKS USED\nDSFRECFM EQU   *-DSFHDING\n         DC    CL5'RECFM',C'-'                         RECFM\nDSFLRECL EQU   *-DSFHDING\n         DC    CL5'LRECL',C'-'                         LRECL\nDSFBLKSZ EQU   *-DSFHDING\n         DC    CL7'BLKSIZE',C'-'                       BLKSIZE\nDSFDSORG EQU   *-DSFHDING\n         DC    CL5'DSORG',C'-'                         DSORG\nDSFCDATE EQU   *-DSFHDING\n         DC    CL7'CREATED',C'-'                       C-DATE\nDSFEDATE EQU   *-DSFHDING\n         DC    CL7'EXPIRES',C'-'                       E-DATE\nDSFSECUR EQU   *-DSFHDING\n         DC    CL8'SECURITY',C'-'                      SECURITY\n         ORG   ,\nSLKHDING DS    CL133\n         ORG   SLKHDING\n         DC    CL17'0'\nSLKMEM   EQU   *-SLKHDING\n         DC    CL10'NAME------.'          MEMBER\nSLKSTAT  EQU   *-SLKHDING\n         DC    CL4'STAT',C'-'             STATUS\nSLKREV   EQU   *-SLKHDING-1\n         DC    CL3'REV',C'-'              REVISION\nSLKINFO  EQU   *-SLKHDING\n         DC    CL10'---INFO---',C'-'      INFO\nSLKTYPE  EQU   *-SLKHDING\n         DC    CL8'--TYPE--',C'-'         TYPE\nSLKACTST EQU   *-SLKHDING-1\n         DC    CL7'--ACTST',C'-'          ACTST\nSLKDELST EQU   *-SLKHDING-1\n         DC    CL7'--DELST',C'-'          DELST\nSLKBLKS  EQU   *-SLKHDING-1\n         DC    CL5'-BLKS',C'-'            BLOCKS\nSLKCREAT EQU   *-SLKHDING\n         DC    CL8'-CREATED',C'-'         CREATE DATE\nSLKUPD   EQU   *-SLKHDING\n         DC    CL8'-UPDATED'              LAST UPDATE DATE\n         ORG   ,\n         SPACE 2\n         XYZZY NOGEN                                          09/84 DBC\n         SPACE 1                                              09/84 DBC\nSYSIN    DCB  DSORG=PS,MACRF=GM,DDNAME=SYSIN,LRECL=80,EODAD=EOD,BUFNO=1\n         SPACE 2\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,LRECL=133,            $\n               RECFM=FBA,EXLST=PRTEXLST\n         SPACE 2\nSYSPRNT2 DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRNT2,LRECL=133,            $\n               RECFM=FBA,EXLST=PRTEXLST\n         SPACE 1                                              06/84 DBC\n         XYZZY GEN                 RESTORE EXPANSIONS         06/84 DBC\nCOLHEAD1 DC    CL133' '            1ST TITLE LINE             06/84 DBC\n         ORG   COLHEAD1+1          RELOCATE BACK              06/84 DBC\n         DC    CL8'RELOAD',C' '    #UNLOAD                    06/84 DBC\n         DC    CL4'FILE',C'  '     #FILE                      06/84 DBC\n         DC    CL17' ',C'  '       #DSN                       06/84 DBC\n         DC    CL4'PSWD',C'  '     #PSWD                      06/84 DBC\n         DC    CL6' ',C'  '        #CDATE                     06/84 DBC\n         DC    CL6' ',C'  '        #EDATE                     06/84 DBC\n         DC    CL6' INFO',C'  '    #INFOSRC                   06/84 DBC\n         DC    CL5' ',C'  '        #RECFM                     06/84 DBC\n         DC    CL5' ',C'  '        #LRECL                     06/84 DBC\n         DC    CL5'BLOCK',C'  '    #BLKSIZE                   06/84 DBC\n         DC    CL6' BLOCK',C'  '   #BLKCNT                    06/84 DBC\n         DC    CL3' ',C'  '        #DEN                       06/84 DBC\n         DC    CL3' ',C'  '        #TRTCH                     06/84 DBC\n         DC    CL4'LNTH',C'  '     #LENGTH                    06/84 DBC\n         DC    CL4'TOTL',C'  '     #CUMLEN                    06/84 DBC\n         DC    C'CREATOR'          #CREATOR                   06/84 DBC\n         ORG   ,                   RESTORE                    06/84 DBC\n         SPACE 3                                              06/84 DBC\nCOLHEAD2 DC    CL133' '            2ND TITLE LINE             06/84 DBC\n         ORG   COLHEAD2+1          RELOCATE BACK              06/84 DBC\n         DC    CL8'FORMAT',C' '    #UNLOAD                    06/84 DBC\n         DC    CL4'SEQ#',C'  '     #FILE                      06/84 DBC\n         DC    CL17'DATASET NAME',C'  ' #DSN                  06/84 DBC\n         DC    CL4'REQD',C'  '     #PSWD                      06/84 DBC\n         DC    CL6'C-DATE',C'  '   #CDATE                     06/84 DBC\n         DC    CL6'E-DATE',C'  '   #EDATE                     06/84 DBC\n         DC    CL6'SOURCE',C'  '   #INFOSRC                   06/84 DBC\n         DC    CL5'RECFM',C'  '    #RECFM                     06/84 DBC\n         DC    CL5'LRECL',C'  '    #LRECL                     06/84 DBC\n         DC    CL5' SIZE',C'  '    #BLKSIZE                   06/84 DBC\n         DC    CL6' COUNT',C'  '   #BLKCNT                    06/84 DBC\n         DC    CL3'DEN',C'  '      #DEN                       06/84 DBC\n         DC    CL3'TRT',C'  '      #TRTCH                     06/84 DBC\n         DC    CL4'(FT)',C'  '     #LENGTH                    06/84 DBC\n         DC    CL4'LNTH',C'  '     #CUMLEN                    06/84 DBC\n         DC    C'JOBNAME/STEPNAME' #CREATOR                   06/84 DBC\n         ORG   ,                   RESTORE                    06/84 DBC\n         SPACE 3                                              06/84 DBC\n         EJECT\nERR#LIST DC    0F'0'                                                U15\n*                                                                   U15\n*  ERROR MSGS FOR EACH SENSE BIT FOR 3420 TAPE DRIVES               U15\n*                                                                   U15\n         SPACE 1\n*** BYTE 0                       BIT                                U15\n         DC    C'CMD REJ   '      0     80                          U15\n         DC    C'INT REQ   '      1     40                          U15\n         DC    C'BUS OUT CK'      2     20                          U15\n         DC    C'EQC CHK   '      3     10                          U15\n         DC    C'DATA CHK  '      4     08                          U15\n         DC    C'OVERRUN   '      5     04                          U15\n         DC    C'WORD CNT 0'      6     02                          U15\n         DC    C'DATA CNVTR'      7     01                          U15\n         SPACE 1\n*** BYTE 1                       BIT                                U15\n         DC    C'NOISE     '      0     80                          U15\n         DC    C'SEL+RDY+NB'      1     40                          U15\n         DC    C'NOT READY '      2     20                          U15\n         DC    C'7 TRK FEAT'      3     10                          U15\n         DC    C'@ LOAD PT '      4     08                          U15\n         DC    C'WRITE STAT'      5     04                          U15\n         DC    C'FILE PROT '      6     02                          U15\n         DC    C'NOT CAPABL'      7     01                          U15\n         SPACE 1\n*** BYTE 2                       BIT                                U15\n         DC    C'TIE BIT 0 '      0     80                          U15\n         DC    C'TIE BIT 1 '      1     40                          U15\n         DC    C'TIE BIT 2 '      2     20                          U15\n         DC    C'TIE BIT 3 '      3     10                          U15\n         DC    C'TIE BIT 4 '      4     08                          U15\n         DC    C'TIE BIT 5 '      5     04                          U15\n         DC    C'TIE BIT 6 '      6     02                          U15\n         DC    C'TIE BIT 7 '      7     01                          U15\n         SPACE 1\n*** BYTE 3                       BIT                                U15\n         DC    C'R/W VRC   '      0     80                          U15\n         DC    C'MT/LRC    '      1     40                          U15\n         DC    C'SKEW      '      2     20                          U15\n         DC    C'END DC/CRC'      3     10                          U15\n         DC    C'ENV/ECC   '      4     08                          U15\n         DC    C'1600 BPI  '      5     04                          U15\n         DC    C'BACKWARD  '      6     02                          U15\n         DC    C'C/P COMPAR'      7     01                          U15\n         SPACE 1\n*** BYTE 4                       BIT                                U15\n         DC    C'MP H E    '      0     80                          U15\n         DC    C'DROP READY'      1     40                          U15\n         DC    C'TAPE INDIC'      2     20                          U15\n         DC    C'W T VRC   '      3     10                          U15\n         DC    C'MICROPGM  '      4     08                          U15\n         DC    C'LWR       '      5     04                          U15\n         DC    C'UNIT CHECK'      6     02                          U15\n         DC    C'RSRVD RPQ '      7     01                          U15\n         SPACE 1\n*** BYTE 5                       BIT                                U15\n         DC    C'NEW SUBSYS'      0     80                          U15\n         DC    C'NEW SUBSYS'      1     40                          U15\n         DC    C'WTM CHECK '      2     20                          U15\n         DC    C'ID BURST  '      3     10                          U15\n         DC    C'START READ'      4     08                          U15\n         DC    C'PART''L REC'     5     04                          U15\n         DC    C'POSTAMBLE '      6     02                          U15\n         DC    C'RSRVD RPQ '      7     01                          U15\n         SPACE 1\n*** BYTE 6                       BIT                                U15\n         DC    C'7 TRK UNIT'      0     80                          U15\n         DC    C'WRT CURR  '      1     40                          U15\n         DC    C'DUAL DEN  '      2     20                          U15\n         DC    C'NOT 1600  '      3     10                          U15\n         DC    C'MOD 4,6,8 '      4     08                          U15\n         DC    C'MD 5,6,7,8'      5     04                          U15\n         DC    C'MOD 3,4   '      6     02                          U15\n         DC    C'MD 3,4,7,8'      7     01                          U15\n         SPACE 1\n*** BYTE 7                       BIT                                U15\n         DC    C'LAMP FAIL '      0     80                          U15\n         DC    C'BOTM LEFT '      1     40                          U15\n         DC    C'BOTM RIGHT'      2     20                          U15\n         DC    C'RESET KEY '      3     10                          U15\n         DC    C'DSE       '      4     08                          U15\n         DC    C'ERASE HEAD'      5     04                          U15\n         DC    C'AIR BEARNG'      6     02                          U15\n         DC    C'LOAD FAIL '      7     01                          U15\n         SPACE 1\n*** BYTE 8                       BIT                                U15\n         DC    C'IBG       '      0     80                          U15\n         DC    C'SPARE ?   '      1     40                          U15\n         DC    C'SPARE ?   '      2     20                          U15\n         DC    C'EARLY READ'      3     10                          U15\n         DC    C'CTL BURST '      4     08                          U15\n         DC    C'SLOW RD B '      5     04                          U15\n         DC    C'SLOW RD E '      6     02                          U15\n         DC    C'VELOCITY  '      7     01                          U15\n         SPACE 1\n*** BYTE 9                       BIT                                U15\n         DC    C'6250 CORR '      0     80                          U15\n         DC    C'WRT VEL CH'      1     40                          U15\n         DC    C'CHAN BUFF '      2     20                          U15\n         DC    C'CRC III   '      3     10                          U15\n         DC    C'6250 FEAT '      4     08                          U15\n         DC    C'SPARE ?   '      5     04                          U15\n         DC    C'SPARE ?   '      6     02                          U15\n         DC    C'TCU RSRVD '      7     01                          U15\n         EJECT                                                12/88 SBG\n************************************************************* 12/88 SBG\n*    THE FOLLOWING LITERALS ARE MOVED INTO THE WORKAREA     * 12/88 SBG\n*    DSECT.  THE REASON IS THAT THE 3RD BASE REGISTER HAS   * 12/88 SBG\n*    BEEN EXCEEDED IN THE COURSE OF PROGRAM MODIFICATIONS,  * 12/88 SBG\n*    AND SOME LITERALS WHICH WERE ADDRESSABLE BY THE BASE   * 12/88 SBG\n*    REGISTERS, HAVE NOW BEEN MOVED TO THE WORK AREA DSECT. * 12/88 SBG\n*    THEREFORE, ANY CHANGES TO THAT PART OF THE WORKAREA    * 12/88 SBG\n*    DSECT MUST BE REFLECTED BY CORRESPONDING CHANGES       * 12/88 SBG\n*    HERE.                                                  * 12/88 SBG\n************************************************************* 12/88 SBG\n         DS    0D                  ALIGNMENT                  12/88 SBG\nLITMOVES DC    C'THISFILEHASBEENDELETEDORISRESERVED'  NEWVERS 12/88 SBG\n         DC    C'DELETEDBYPREVIOUSVERSIONOFTHISTAPE'  OLDVERS 12/88 SBG\n         DC    C'+** REQUESTED VOL=\"123456\" **'\n         SPACE 1\n         DC    C' *** THIS IS VOLUME # XXXX OF THE ABOVE MULTIPLE VOLUM$\n               E FILE.  FIRST VOLUME WAS XXXXXX.'\n         SPACE 1\n         DC    C' UNKNOWN PARM OPTION AT COL=XXX.  ANY REMAINING PARM I$\n               GNORED.'\n         DC    XL12'FFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    C'//MVSMODS'       ARNIE CASINGHINO'S JOBNAME  12/88 SBG\n         DC    C'* VERSION'       DATE OF CBT TAPE - PREFIX   12/88 SBG\n         DC    C'VERSION #'       VERSION OF CBT TAPE PREFIX  12/88 SBG\n         DC    C'VER        -  -  '   DISPLAY FOR CBTHEADER   12/88 SBG\n************************************************************* 12/88 SBG\n         DC    C'IEBCOPY'          UNLOADER NAMES             12/88 SBG\n         DC    C'IEHMOVE'                                     12/88 SBG\n         DC    C'IEBISAM'                                     12/88 SBG\n         DC    C'IEHDASDR'                                    12/88 SBG\n         DC    C'IEBUPXXX'         IEBUPDTE OR IEBUPDAT       12/88 SBG\n         DC    C'FDR   '                                      12/88 SBG\n         DC    C'FDRDSF'                                      12/88 SBG\n         DC    C'FDR???'                                      12/88 SBG\n         DC    C'SLICKMNG'                                    12/88 SBG\n         DC    C'TAPEMAP'                                     12/88 SBG\n         DC    C'SMPPTFIN'                                    12/88 SBG\n         DC    C'CBT973'                                      12/88 SBG\n         DC    C'CBTEMPTY'         EMPTY FILE ON THE CBT TAPE 12/88 SBG\n         DC    C'CBT DOC '         DOC FILE FOR THE CBT TAPE  12/88 SBG\n         DC    X'33008003'        UNIT TYPE FOR 3420C CARTS   09/89\u00acSBG\n         DS    0F                 ALIGNMENT                   12/88 SBG\n         DC    F'32720'           BLOCK SIZE OF CBT DOC FILE  12/88 SBG\n         DC    C'-*****  ONE OR MORE FILES HAVE DENSITY INDICATED INCOR$\n               RECTLY IN LABELS.  ALL FILES ARE WRITTEN AT XXXX BPI  **$\n               ***'\nLITMVLEN EQU   *-LITMOVES                                     12/88 SBG\n************************************************************* 12/88 SBG\n*    END OF LITERAL MOVES.                                  * 12/88 SBG\n************************************************************* 12/88 SBG\n         EJECT                                                12/88 SBG\n*************************************************************  1/93 RT\n*    TODAY CSECT                                            *  1/93 RT\n*                                                           *  1/93 RT\n*   PARAMETERS:                                             *  1/93 RT\n*     DATE FIELD (LEN 22)                                   *  1/93 RT\n*     DAY FIELD (LEN 9)                                     *  1/93 RT\n*     TIME FIELD (LEN 9)                                    *  1/93 RT\n*                                                           *  1/93 RT\n*                                                           *  1/93 RT\n*************************************************************  1/93 RT\nTODAY    CSECT                                                 1/93 RT\n         DROP  R12,R11,R7,R9,R13                               1/93 RT\n         USING *,R15                                           1/93 RT\n         B     TODARND                                         1/93 RT\n         DC    AL1(25)                                         1/93 RT\n         DC    CL8'TODAY'                                      1/93 RT\n         DC    CL8'&SYSDATE'                                   1/93 RT\n         DC    CL8'&SYSTIME'                                   1/93 RT\nTODARND  DS    0H                                              1/93 RT\n         SAVE  (14,12)                                         1/93 RT\n         DROP  R15                                             1/93 RT\n         USING TODAY,R4                                        1/93 RT\n         LM    R5,R7,0(R1)          LOAD THE PARAMETER PTRS    1/93 RT\n         LR    R4,R15                                          1/93 RT\n         LA    R1,TODSAVE                                      1/93 RT\n         ST    R1,8(,R13)           FWD SAVE-AREA CHAIN PTR    1/93 RT\n         ST    R13,4(,R1)           BKWD SAVE-AREA CHAIN PTR   1/93 RT\n         LR    R13,R1               NEW SAVE-AREA ADDR         1/93 RT\n         TIME  DEC                      GET TIME\n         ST    R0,TODDWT                PUT TIME INTO WORK AREA\n         ST    R1,TODPDAT               PUT DATE INTO WORK AREA\n         MVC   TOD1DDT(40),TOD1DDT-1    BLANK THE DATE, DAY, TIME\n         AP    TODPDAT,=P'1900000'      CONVERT CCYY TO YYYY   6/03 JCE\n         UNPK  TOD1DATE+14(7),TODPDAT(4) UNPK THE DATE         6/03 JCE\n         OI    TOD1DATE+20,C'0'         FIX THE SIGN\n         MVC   TOD1DATE+8(4),TOD1DATE+14 SAVE YEAR YYYY        6/03 JCE\n         MVC   TOD1DATE+15(2),TOD1DATE+16   MOVE THE YEAR OVER 6/03 JCE\n         MVI   TOD1DATE+17,C'.'         PUT IN THE DOT\n         MVI   TOD1DATE+6,C','          PUT IN THE COMMA\n         MVI   TOD1DATE+21,C')'         PUT IN THE PARENTHESES\n         MVI   TOD1DATE+14,C'('\n*        LEAP YEAR DETERMINATION BELOW BREAKS IN 2100          6/03 JCE\n         TM    TODPDAT+1,X'01'          POSSIBLE LEAP YEAR?\n         BO    TODNOLP                   NO (ODD YEAR) - NOT LEAP\n         TM    TODPDAT+1,X'12'          DIVISIBLE BY 4?\n         BM    TODNOLP                   NO - NOT LEAP YEAR\n         MVI   MONTHS+7,29              FEB HAS 29 DAYS THIS YEAR\nTODNOLP  MVC   TODDWD+6(2),TODPDAT+2    COPY DDDF\n         XC    TODDWD(6),TODDWD         CLEAR BEGINNING\n         CVB   R0,TODDWD                GET DAY OF YEAR IN BINARY\n         LA    R15,MONTHS               POINT TO TABLE\nTODFINMO SH    R0,0(,R15)               SUB NUMBER OF DAYS THIS MONTH\n         BNP   TODGOTMO                 HAVE MONTH\n         LA    R15,6(,R15)              NEXT TABLE ENTRY\n         B     TODFINMO                 KEEP LOOKING\nTODGOTMO MVC   TOD1DATE(3),2(R15)       MOVE NAME OF MONTH\n         AH    R0,0(,R15)               GET BACK CORRECT RESIDUAL\n         CVD   R0,TODDWD\n         UNPK  TOD1DATE+4(2),TODDWD+6(2)  DAY OF MONTH\n         OI    TOD1DATE+5,C'0'          FIX SIGN\n         MVC   TOD1DATE+10(2),TOD1DATE+15 MOVE IN YEAR\n*        REWORK OF DAY-OF-WEEK CALC USING A SIMPLER, MORE      6/03 JCE\n*    OBVIOUS ALGORITHM BASED ON LILIAN DATES.                  6/03 JCE\n*    DAY 1 LILIAN = FRIDAY, THUS MOD(LILIANDAY+4,7) = 0...6    6/03 JCE\n*    CORRESPONDING TO SUN ... SAT                              6/03 JCE\n*     FOR DATE YYYY.DDD, IF X = YYYY-1201 THEN                 6/03 JCE\n*    LILIANDAY + 4 = FLOOR(X*365.25) - 139444                  6/03 JCE\n*                           - FLOOR(X/100)                     6/03 JCE\n*                           + FLOOR(X/400)   + DDD  + 4        6/03 JCE\n*    THE ABOVE FORMULA AND CODE IS BORROWED FROM A DATE        6/03 JCE\n*    CONVERSION ROUTINE D1MADRES WRITTEN BY J C EWING AT       6/03 JCE\n*    DATA-TRONICS CORP IN AUGUST 1991, AND IS A MATHEMATICAL   6/03 JCE\n*    SIMPLIFICATION OF THE ALGORITHM PUBLISHED BY B.G. OHMS IN 6/03 JCE\n*    'COMPUTER PROCESSING OF DATES OUTSIDE THE TWENTIETH       6/03 JCE\n*    CENTURY', IBM SYSTEMS JOURNAL, VOL 25 NO 2, 1986, P. 247. 6/03 JCE\n         ZAP   TODDWD,=P'0'                                    6/03 JCE\n         MVO   TODDWD,TODPDAT(2)  00 00 00 00 00 0Y YY YC      6/03 JCE\n         CVB   R1,TODDWD          YEAR IN BINARY               6/03 JCE\n         SH    R1,=H'1201'        YEAR - 1201                  6/03 JCE\n         LR    R15,R1                                          6/03 JCE\n         MH    R15,=AL2((36525*4)/100)  (Y-1201)*365.25*4      6/03 JCE\n         SRA   R15,2               R15= FLOOR((Y-1201)*365.25) 6/03 JCE\n         S     R15,=F'139440'      UNADJ DAYS + 4              6/03 JCE\n         SR    R0,R0               COMPUTE CENTURY ADJUSTMENT  6/03 JCE\n         D     R0,=F'100'          R1=CENTURY LEAP DAYS        6/03 JCE\n         SR    R15,R1              SUBTRACT CENTURY LEAP DAYS  6/03 JCE\n         SRA   R1,2                400-YR LEAP DAYS            6/03 JCE\n         AR    R15,R1              ADD BACK 400 YR LEAP DAYS   6/03 JCE\n         ZAP   TODDWD,TODPDAT+2(2) EXTRACT DDD                 6/03 JCE\n         CVB   R1,TODDWD           R1=DDD                      6/03 JCE\n         AR    R15,R1              DAYS FROM OCT 15, 1582 + 4  6/03 JCE\n* Z=MOD(D,7)+1\n         XR    R14,R14                  CLEAR FOR DIVIDE\n         D     R14,=F'7'                GET MOD(D,7) IN R4=Z\n         MH    R14,=Y(L'DAYS)           OFFSET INTO TABLE\n         LA    R14,DAYS(R14)            POINT TO DAY IN TABLE\n         MVC   TOD1DAY(L'DAYS),0(R14)   DAY TO OUTPUT LOCATION\n         OI    TODDWT+3,X'0F'           FIX THE SIGN\n         MVC   TOD1TIME(9),=X'4021207A20207A2020'    ' DD:DD:DD'\n         ED    TOD1TIME(9),TODDWT\n         MVC   0(22,R5),TOD1DATE                               1/93 RT\n         MVC   0(9,R6),TOD1DAY                                 1/93 RT\n         MVC   0(9,R7),TOD1TIME                                1/93 RT\n         L     R13,4(,R13)                                     1/93 RT\n         MVI   12(R13),X'FF'        INVALIDATE FWD-CHAIN       1/93 RT\n         RETURN (14,12),RC=0                                   1/93 RT\n         SPACE 1\nDAYS     DAYS  LEFT                                                 THO\n         SPACE 1                                                    THO\nMONTHS   MONTHS                                                     THO\n         LTORG\n         DROP  R4\nTODSAVE  DS    9D\nTODDWT   DS    D                    PACKED TIME\nTODDWD   DS    D                    PACKED DATE WORK FIELD\nTODPDAT  DS    F                    PACKED DATE\n         DC    CL8' '\nTOD1DDT  DS    0CL40          DATE, DAY, TIME TAKEN TOGETHER\nTOD1DATE DC    CL22' '\nTOD1DAY  DC    CL9' '\nTOD1TIME DC    CL9' '\n         DC    CL8' '\n         EJECT\n         XYZZY NOGEN\n         DCBD  DSORG=PS,DEVD=DA                                     THO\nUCB      DSECT                                                      THO\n         IEFUCBOB                                                   THO\n         AIF   ('&DEBX' EQ 'YES').NEWDEB1                           SBG\n         IEZDEB                                                     THO\n         AGO   .OLDDEB1                                             SBG\n.NEWDEB1 ANOP                                                       SBG\n         IECTDEBX                                                   SBG\n.OLDDEB1 ANOP                                                       SBG\n         END   TAPEMAP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TAPEMAPO": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x92\\x19\\x8f\\x00\\x93\\x16/\\x08 \\x13\\xed\\x13\\xb7\\x01\\xad\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1992-07-16T00:00:00", "modifydate": "1993-06-11T08:20:00", "lines": 5101, "newlines": 5047, "modlines": 429, "user": "SBGCSC"}, "text": "*------------------------------------------------------------ 12/88 SBG\n*  SOMEBODY SHOULD ADD SUPPORT FOR DFDSS TAPES.               12/88 SBG\n*------------------------------------------------------------ 11/88 SBG\n*  THIS PROGRAM, AS IT IS, IS SORELY IN NEED OF A NEW BASE    11/88 SBG\n*   REGISTER AND/OR RE-ARCHITECTING, SUCH AS BEING SPLIT INTO 11/88 SBG\n*   TWO SEPARATE MODULES.  FUTURE MODIFIERS, PLEASE BEAR      11/88 SBG\n*   THIS IN MIND.  THREE BASE REGISTERS ALMOST EXCEEDED.      11/88 SBG\n*                                                             12/88 SBG\n*  FOOTNOTE:  I WAS ABLE TO ADDRESS SEVERAL HUNDRED MORE      12/88 SBG\n*   BYTES BY MOVING SOME OF THE FIXED LITERALS TO THE WORK    12/88 SBG\n*   AREA DSECT.  THESE HAVE TO BE INITIALIZED IN THE GETMAINED12/88 SBG\n*   SPACE WITH EVERY EXECUTION OF THE PROGRAM.  AN EXACT COPY 12/88 SBG\n*   OF THESE LITERALS (WHICH ARE CLEARLY MARKED) IS PUT AT    12/88 SBG\n*   THE VERY END OF THE PROGRAM.  SEE LABEL \"LITMOVES\".       12/88 SBG\n*   LITMOVES IS ADDRESSABLE IN THE PROGRAM VIA AN ADCON.      12/88 SBG\n*                                                             12/88 SBG\n*  FUTURE MODIFIERS, PLEASE BEWARE OF THIS BEFORE             12/88 SBG\n*   ADDING NEW LITERALS.                                      12/88 SBG\n*------------------------------------------------------------ 11/88 SBG\n*  DO NOT GLOBALLY CHANGE MEANINGS OF ANY REGISTER EQUATES.   11/88 SBG\n*   UNLESS YOU ARE VERY VERY THOROUGH.                        11/88 SBG\n*------------------------------------------------------------ 11/88 SBG\nXYZZY    OPSYN PRINT               CUSTOMIZED PRINT CONTROL   06/84 DBC\nPRINT    OPSYN ANOP                SUPPRESS STD PRINT CONTROL 06/84 DBC\n*------------------------------------------------------------ 07/92 SBG\n*                                                             07/92 SBG\n*  *************                                              07/92 SBG\n*  * ATTENTION * THE IEZDEB MACRO DISAPPEARED ON MVS/SP4      07/92 SBG\n*  ************* SYSTEMS.  IT WAS REPLACED BY IECTDEBX AND    07/92 SBG\n*                IGGDEBD.  PLEASE CODE APPROPRIATELY, BELOW.  07/92 SBG\n*                                                             07/92 SBG\n         GBLC  &SP4                                           07/92 SBG\n&SP4     SETC  'YES'    'YES' TO USE IECTDEBX MACRO FOR DEB.  07/92 SBG\n*&SP4    SETC  'NO'     'NO'  TO USE IEZDEB   MACRO FOR DEB.  07/92 SBG\n*                                                             07/92 SBG\n*------------------------------------------------------------ 07/92 SBG\nTAPEMAP  TITLE 'TAPE ANALYSIS PROGRAM  (T A P E M A P)'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*  THIS PROGRAM MAY NOT BE DISTRIBUTED WITHOUT PERMISSION OF THE      *\n*  AUTHOR.  ALTHOUGH THIS PROGRAM HAS BEEN EXTENSIVELY TESTED, AND    *\n*  IS IN USE IN A PRODUCTION ENVIRONMENT (MVT 21.8 ON A 360/91) AT    *\n*  UCLA'S OFFICE OF ACADEMIC COMPUTING (FORMERLY CAMPUS COMPUTING     *\n*  NETWORK), NO GUARANTEE IS MADE OF (OR RESPONSIBILITY ASSUMED FOR)  *\n*  CORRECT OR RELIABLE OPERATION.  WE MAY TRY TO HELP WITH PROBLEMS.  *\n*                                                                     *\n*  CONTACT:  CHRIS THOMAS  (213) 825-7424                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  THIS PROGRAM IS BASED ON THE PROGRAM TAPEINDX WRITTEN BY           *\n*  MICHAEL S. MAITEN OF THE UCLA COMPUTER CLUB.                       *\n*  IT HAS BEEN ALMOST COMPLETELY REWRITTEN BY LEONARD D. WOREN OF     *\n*  THE UCLA COMPUTER CLUB.                                            *\n*                                                                     *\n*  MODIFIED  1979 BY WALT FARRELL, RAINIER NATIONAL BANK              *\n*                                                           * 09/84 DBC\n*  HI GUYS. GEE, CAN I PLAY TOO?                            * 09/84 DBC\n*                                                                     *\n***********************************************************************\n         EJECT ,                                              06/87 THO\n************************************************************* 06/93 SBG\n*                                                             06/93 SBG\n* LAST CHANGE DATE - JUN. 10, 1993, BY SAM GOLOB.             06/93 SBG\n*                                                             06/93 SBG\n*  06/10/93  -  SMALL FIX TO RECOGNIZE AN IEBCOPY UNLOADED    06/93 SBG\n*               PDSE.                                         06/93 SBG\n*                                                             06/93 SBG\n************************************************************* 06/93 SBG\n         EJECT ,                                              06/93 SBG\n************************************************************* 07/92 SBG\n*                                                             07/92 SBG\n* LAST CHANGE DATE - JUL. 17, 1992, BY SAM GOLOB.             07/92 SBG\n*                                                             07/92 SBG\n*  07/17/92  -  FIXED 2 PROBLEMS.  NEW IEBCOPY FOR NL TAPE    07/92 SBG\n*               FILES WASN'T WORKING BECAUSE THE HEADER RECD  07/92 SBG\n*               EXPANDED BY 4 BYTES, AND ITS SIZE WAS BEING   07/92 SBG\n*               CHECKED AT LABEL \"NL$NMOVE\".                  07/92 SBG\n*                                                             07/92 SBG\n*               CONDITIONAL ASSEMBLY FOR MVS SP4 SYSTEMS      07/92 SBG\n*               WHICH HAVE DEB EXTENSION SUPPORT AND IEZDEB   07/92 SBG\n*               MACRO ISN'T THERE ANY MORE.  I USED IECTDEBX. 07/92 SBG\n*               PLEASE SET GLOBAL VARIABLE &SP4 TO 'YES' OR   07/92 SBG\n*               'NO' ABOVE.                                   07/92 SBG\n*                                                             07/92 SBG\n************************************************************* 07/92 SBG\n         EJECT ,                                              07/92 SBG\n************************************************************* 11/88 SBG\n*                                                             11/88 SBG\n* LAST CHANGE DATE - NOV. 28, 1988, BY SAM GOLOB.             11/88 SBG\n*                                                             11/88 SBG\n*  INSERTED SUPPORT FOR ><ADD NAME= WITHIN IEBUPDTE UNLOADS.  11/88 SBG\n*  INSERTED GLOBAL VARIABLE FOR LINES-PER-PAGE ON REPORTS.    11/88 SBG\n*     SEE VARIABLE &LINEPPG.                                  11/88 SBG\n*  INSERTED SUPPORT FOR CBT973-COMPRESSED FILES.              11/88 SBG\n*                                                             11/88 SBG\n*  CBT973 SUPPORT MAKES IT POSSIBLE TO MEANINGFULLY MAP       11/88 SBG\n*  AND FIND ALMOST EVERYTHING ON THE CBT MVS MODS TAPE.       11/88 SBG\n*                                                             11/88 SBG\n*  IT ALSO HELPS IN FINDING IBM SOURCE MODULES IN CBT973-     11/88 SBG\n*  COMPRESSED IEBUPDTE FORMAT.                                11/88 SBG\n*                                                             11/88 SBG\n*  SEE CBT TAPE FILES 188 AND 189 FOR A DESCRIPTION OF THIS   11/88 SBG\n*  METHOD OF SQUEEZING MANY IBM SOURCE TAPE REELS TOGETHER    11/88 SBG\n*  ON A FEW LARGE REELS.  TAPEMAP WILL NOW SHOW MEMBER NAMES  11/88 SBG\n*  ON THE CBT973-COMPRESSED LARGE REELS.                      11/88 SBG\n*                                                             11/88 SBG\n*  CBT973 SUPPORT IS DONE BY USING THE CBT973 EXPANSION       11/88 SBG\n*  ALGORITHM TO RESTORE ONE 80-BYTE RECORD AT A TIME.  NORMAL 11/88 SBG\n*  IEBUPDTE PROCESSING IS THEN DONE ON THIS RECORD.           11/88 SBG\n*                                                             11/88 SBG\n************************************************************* 11/88 SBG\n         EJECT ,                                              06/87 THO\n************************************************************* 11/87 SBG\n*                                                                   SBG\n* LAST CHANGE DATE - JUNE 11, 1986, BUT ADDED 11/87 BY TENNIE OLSON THO\n*                                                                   SBG\n*  FIXED BUG  -  SAM GOLOB  -  NEWSWEEK INC., MOUNTAIN LAKES, N.J.  SBG\n*                                                                   SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  TAPEMAP HAS TO CHECK FOR SMPPTFIN FORMAT BEFORE IT CHECKS        SBG\n*   FOR IEBUPDTE FORMAT.  IF A PTF OR APAR HAS SOURCE UPDATES       SBG\n*   WHICH ARE DONE WITH IEBUPDTE, AND THIS PTF OR APAR IS AT THE    SBG\n*   BEGINNING OF THE TAPE TO BE READ, THE PROGRAM WOULD NOT PRINT   SBG\n*   THE PTF OR APAR NAMES, BUT THE NAMES OF THE PROGRAMS BEING      SBG\n*   UPDATED, WHICH IS NOT WHAT WE WANT WHEN WE MAP AN APAR TAPE.    SBG\n*   WE ALWAYS WANT THE NAMES OF THE PTFS AND APARS UNDER THESE      SBG\n*   CIRCUMSTANCES.                                                  SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n*                                                             12/88 SBG\n************************************************************* 07/85 SBG\n         EJECT ,                                              06/87 THO\n************************************************************* 06/87 THO\n*                                                           * 06/87 THO\n* LAST CHANGE DATE - JUNE 09, 1987                          * 06/87 THO\n*                                                           * 06/87 THO\n*                  - I ADDED SUPPORT FOR 3480 CARTRIDGES.   * 06/87 THO\n*                    ADDED CODE TO MAKE CORRECT CALCULA-    * 06/87 THO\n*                    TIONS IN TAPEFEET. 37871 BYTES PER     * 06/87 THO\n*                    IN OR 302971 BITS PER INCH WITH A      * 06/87 THO\n*                    GAP OF .08 INCHES. INDICATED DEN WAS   * 06/87 THO\n*                    NOT APPLICABLE FOR 3480.               * 06/87 THO\n*                                                           * 06/87 THO\n*     TENNIE OLSON                                            12/88 SBG\n*     VF CORPORATION - WRANGLER DIVISION                      12/88 SBG\n*     201 NORTH EUGENE STREET                                 12/88 SBG\n*     GREENSBORO, N.C. 27401                                  12/88 SBG\n*     (919) 373-3952                                          12/88 SBG\n*                                                             12/88 SBG\n************************************************************* 06/87 THO\n         EJECT ,                                              07/85 DBC\n************************************************************* 07/85 DBC\n*                                                           * 07/85 DBC\n* LAST CHANGE DATE - JULY 26, 1985                          * 07/85 DBC\n*                                                           * 07/85 DBC\n*                  - I ADDED SUPPORT FOR LISTING THE PTFS   * 07/85 DBC\n*                    CONTAINED ON AN SMPPTFIN TAPE.         * 07/85 DBC\n*                                                           * 07/85 DBC\n*                  - WHEN AN SL TAPE IS BEING SCANNED WITH  * 07/85 DBC\n*                    NL ANALYSIS, THE LOGICAL FILE NUMBER   * 07/85 DBC\n*                    IS DISPLAYED ON THE \"LABELS\" LINE      * 07/85 DBC\n*                    (OLD), AND THE PHYSICAL FILE NUMBER IS * 07/85 DBC\n*                    DISPLAYED ON THE \"SCAN\" LINE.          * 07/85 DBC\n*                                                           * 07/85 DBC\n************************************************************* 07/85 DBC\n         EJECT ,                                              09/84 DBC\n************************************************************* 09/84 DBC\n*                                                           * 09/84 DBC\n* LAST CHANGE DATE - OCTOBER 1, 1984                        * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - I RECEIVED FROM ARNIE CASINGHINO (OF   * 09/84 DBC\n*                    THE CONNECTICUT BANK AND TRUST) A TAPE * 09/84 DBC\n*                    CONTAINING A VERSION OF TAPEMAP THAT   * 09/84 DBC\n*                    WAS BASED ON AN EARLIER UCLA VERSION   * 09/84 DBC\n*                    AND WAS MODIFIED BY WALT FARRELL OF    * 09/84 DBC\n*                    THE RAINIER NATIONAL BANK. THE MODS    * 09/84 DBC\n*                    WERE MAINLY IN SUPPORT OF DETAILED     * 09/84 DBC\n*                    LISTINGS OF THE CONTENTS OF FDR AND    * 09/84 DBC\n*                    FDRDSF TAPES. I HAVE NOW TRANSPORTED   * 09/84 DBC\n*                    THOSE MODS INTO THIS VERSION OF        * 09/84 DBC\n*                    TAPEMAP.                               * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - I ADDED SUPPORT FOR BLKSIZES GREATER   * 09/84 DBC\n*                    THAN 32K UP TO 64K-1 BYTES. (THE       * 09/84 DBC\n*                    RECENT RELEASES OF FDR WRITE BLOCKS    * 09/84 DBC\n*                    THAT ARE 50K LARGE OR LARGER).         * 09/84 DBC\n*                                                           * 09/84 DBC\n*                  - I HAVE ADDED A REWIND COMMAND JUST     * 09/84 DBC\n*                    AFTER THE TAPE IS OPENED TO INSURE     * 09/84 DBC\n*                    THAT THE TAPE IS PROPERLY POSITIONED.  * 09/84 DBC\n*                    THIS MAKES MAPPING STANDARD LABELED    * 09/84 DBC\n*                    TAPES IN A UCC/1 ENVIRONMENT A LITTLE  * 09/84 DBC\n*                    EASIER.                                * 09/84 DBC\n*                                                           * 09/84 DBC\n************************************************************* 09/84 DBC\n         EJECT ,                                              06/84 DBC\n************************************************************* 06/84 DBC\n*                                                           * 06/84 DBC\n* LAST CHANGE DATE - JUNE 4, 1984                           * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - ADDED OPSYN STATEMENTS TO SUPPRESS THE * 06/84 DBC\n*                    AUTHOR'S USE OF \"PRINT NOGEN\".         * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - ADDED CODE TO RECOGNIZE FILES IN       * 06/84 DBC\n*                    IEBUPDAT RELOAD FORMAT.                * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - DELETED THE SILLY JFCBDSNM CHANGE THAT * 06/84 DBC\n*                    MADE TAPE MANAGEMENT SYSTEMS SO        * 06/84 DBC\n*                    UNHAPPY.                               * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - UPDATED THE LIST OF KNOWN DEVICE TYPES * 06/84 DBC\n*                    TO INCLUDE 3375S AND 3380S.            * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - CHANGED THE PARM DEFAULT FROM NOSCAN   * 06/84 DBC\n*                    TO SCAN.                               * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - ADDED THE \"INFO SOURCE\" COLUMN TO THE  * 06/84 DBC\n*                    SYSPRINT OUTPUT.                       * 06/84 DBC\n*                                                           * 06/84 DBC\n*                  - FIXED THE CCC ON THE LINE OF DASHES    * 06/84 DBC\n*                    (WAS RANDOM, NOW IS C' ').             * 06/84 DBC\n*                                                           * 06/84 DBC\n************************************************************* 06/84 DBC\n         EJECT\n***********************************************************************\n*                                                                     *\n*   UPDATES:                                                          *\n*                                                                     *\n*  ADD CHECK FOR FILE WITH HEADER OF                     05/01/79 WBF *\n*    $$TAPEMAP.PRINT.FILE$$                                           *\n*  AND PRINT THE CONTENTS OF THE FILE                                 *\n*  IF ONE IS FOUND                                                    *\n*                                                                     *\n*  LIST DETAILS OF SLICK BACKUP FILES                    04/23/79 WBF *\n*                                                                     *\n*  FIX MINOR BUGS IN NL CODE,                            04/08/79 WBF *\n*  LIST DETAILS OF FDR OR FDRDSF FILES,                      \"        *\n*  FORCE BLP AND EXPDT=98000 (FOR UCC-1),                    \"        *\n*  COSMETIC CHANGES FOR RAINIER NATIONAL BANK                \"        *\n*                                                                     *\n*                                                                     *\n*  FIX BUG IN I/O ERROR RECOVERY                     U16 06/16/79 LDW *\n*                                                                     *\n*  FIX VOLSER FOR NL TAPES;  PRINT SENSE BIT MEANINGS;  CHANGE FORMAT *\n*  OF \"REQUESTED VOL\" MSG;  FIX ./DDNAME= BUG        U15 02/10/79 LDW *\n*                                                                     *\n*  RE-ARRANGE CODE, ADD 'NULL=' PARM.                U14 06/28/78 LDW *\n*                                                                     *\n*  PRINT SENSE INFO WHEN I/O ERROR OCCURS            U13 05/05/78 LDW *\n*                                                                     *\n*  FIX A COUPLE OF TURKEY BUGS                03/24/78 - 04/06/78 LDW *\n*                                                                     *\n*  LIST MEMBERS IN AN IEBUPDTE INPUT STREAM              02/22/78 LDW *\n*                                                                     *\n*  LIST MEMBERS UNLOADED BY IEHMOVE                      01/05/78 LDW *\n*                                                                     *\n*  NL TAPE ANALYSIS CODE ADDED                           12/26/77 LDW *\n*                                                                     *\n*  DO A SENSE TO DETERMINE TRUE TAPE DENSITY             11/14/77 LDW *\n*                                                                     *\n*  FIX SOME MISCELLANEOUS MINOR BUGS                     11/08/77 LDW *\n*                                                                     *\n*  ADD CODE TO LIST MEMBERS UNLOADED BY IEBCOPY, AND ATTRS FOR        *\n*     IEBISAM AND IEHDASDR UNLOADED DATASETS.            03/16/77 LDW *\n*                                                                     *\n*  GENERAL RE-WRITING OF TAPE READ CODE TO PUT IN CODE TO PRINT OUT   *\n*     THE ORIGINAL ATTRS FOR UNLOADED DATASETS CREATED BY IEHMOVE     *\n*     (SYSMOVE) AND IEBCOPY (VS2COPY);  CHANGE TAPE I/O ERROR AND     *\n*     TAPE MARK DETECTION ALGORITHM.                     02/13/77 LDW *\n*                                                                     *\n*  PUT IN DSECTS FOR LABELS;  FIX A 01/06/77 BUG;  RE-WRITE PRINTLIN  *\n*     MACRO (CHANGE TO PRTLN)                            02/07/77 LDW *\n*                                                                     *\n*  MORE FIXES:  COUNT LINES AND DO PAGE EJECT;  AND MUCH OTHER        *\n*     MISCELLANEOUS STUFF                                01/06/77 LDW *\n*                                                                     *\n*  UNCLUDGED A LITTLE:  FIX LENGTH CALCULATION;  MAKE SOME MACROS     *\n*     INTO SUBROUTINES (IT SEEMS THAT MSM NEVER HEARD OF SUBROUTINES; *\n*     PUT IN SYMBOLIC OFFSETS FOR PRINT LINE INFO.       11/08/76 LDW *\n*                                                                     *\n*  TAPEINDX -- CLUDGED UP IN A HURRY FROM A SPASM PROGRAM TO MAKE A   *\n*          QUICK LOAD MODULE                             10/30/74 MSM *\n*                                                                     *\n***********************************************************************\n         EJECT\n         MACRO\n&NFS     FL2   &DSECT=YES\n         LCLC  &P\n&P       SETC  'FL2'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n.***************\n&P.LABI  DC    C'HDR'                   OR 'EOF' OR 'EOV'\n&P.NO    DC    C'2'                     CONSTANT\n&P.RECFM DC    C' '                     F/V/U/D\n&P.BLKL  DC    CL5' '                   BLKSIZE\n&P.LRECL DC    CL5' '                   RECORD LEN (X=99999)\n&P.DEN   DC    C' '                     DENSITY (C'0' TO C'4')      THO\n&P.FILP  DC    C' '                     1=VOL SW OCCURRED, 0=NOT\n&P.JOBD  DC    CL8' '                   JOBNAME OF CREATOR\n&P.JSSP  DC    C'/'                     SLASH\n&P.STEPD DC    CL8' '                   STEPNAME OF CREATOR\n&P.TRTCH DC    CL2' '\n&P.CNTRL DC    C' '                     A/M/<BLANK>\n         DC    C' '\n&P.BLKA  DC    C' '                     B/S/R/<BLANK>\n         DC    CL41' '\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     FL1   &DSECT=YES\n         LCLC  &P\n&P       SETC  'FL1'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n&P.LABI  DC    C'HDR'                   OR 'EOF' OR 'EOV'\n&P.NO    DC    C'1'                     CONSTANT\n&P.ID    DC    CL17' '                  DATASET NAME\n&P.FILSR DC    CL6' '                   FIRST VOL NAME\n&P.VOLSQ DC    CL4' '                   VOL # OF DS\n&P.FILSQ DC    CL4' '                   DS SEQ #\n&P.GNO   DC    CL4' '                   GENERATION NUMBER\n&P.VNG   DC    CL2' '                   VERSION NUMBER\n&P.CREDT DC    CL6' YYDDD'              CREATION DATE\n&P.EXPDT DC    CL6' YYDDD'              EXPIRATION DATE\n&P.FSEC  DC    C' '                     0=NO PW, 1=PW, 3=NOPWREAD\n&P.BLKCT DC    CL6' '                   # OF BLOCKS\n&P.SYSCD DC    CL13' '\n         DC    CL7' '\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     VOL   &DSECT=YES\n         LCLC  &P\n&P       SETC  'VOL'\n         AIF   ('&NFS' EQ '').NO$NFS\n&P       SETC  '&NFS'\n.NO$NFS  AIF   ('&DSECT' NE 'YES').NODSECT\n&P.D     DSECT\n.NODSECT ANOP\n&P.LABI  DC    C'VOL'                   CONSTANT\n&P.NO    DC    C'1'                     CONSTANT\n&P.SERNO DC    CL6'VOLSER'              VOLUME NAME\n         DC    C'0'\n         DC    CL30' '\n&P.OWNER DC    CL10' '                  OWNER ID\n         DC    CL29' '\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     HEXTAB &DUAL=YES\n.*  HEXTAB  LDW  UPDATED 02-21-79\n.*  UPDATED 03-17-79\n         GBLC  &HEXTAB#\n         LCLC  &N\n&N       SETC  '&NFS'                   ASSUME GIVEN\n         AIF   ('&N' NE '').OK          YEP - USE IT\n&N       SETC  '&HEXTAB#'               ASSUME GLOBAL PRESENT\n         AIF   ('&N' NE '').OK          YEP - USE IT\n&HEXTAB# SETC  'HEXTAB'                 ELSE, SET IT\n&N       SETC  'HEXTAB'                 HERE TOO\n.OK      AIF   ('&DUAL' EQ 'YES').DUAL\n&N       EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\n         MEXIT\n.DUAL    ANOP\n&N       EQU   *-C'A'\n         DC    X'0A0B0C0D0E0F'\n         ORG   &N+C'0'\n         DC    C'0123456789ABCDEF'\n         ORG\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     HEX   &TO,&FROM,&L,&LEN=,&HEXTAB=,&BYTE=C' ',&DIGITS=\n.*  HEX -- 12/18/76 -- LDW      FIXED 5-2-77    12-25-77\n.*      REWRITTEN FROM SCRATCH -- 01/29/79  FIXED  02-16-79  03-03-79\n.*      UPDATED  04-21-79\n         GBLC  &HEXTAB#\n         LCLA  &LT                      UNPK \"TO\" LENGTH\n         LCLA  &LF                      UNPK \"FROM\" LENGTH\n         LCLA  &LTR                     TR \"TO\" LENGTH\n         LCLA  &LL                      &LEN ONE WAY OR ANOTHER\n         LCLC  &F1,&F2,&T1,&T2,&LX\n&F1      SETC  '&FROM(1)'               FOR SHORTER STRING LATER\n&F2      SETC  '&FROM(2)'               FOR SHORTER STRING LATER\n&T1      SETC  '&TO(1)'                 FOR SHORTER STRING LATER\n&T2      SETC  '&TO(2)'                 FOR SHORTER STRING LATER\n&LX      SETC  '&L&LEN'                 GET LENGTH USING EITHER METHOD\n         AIF   ('&LX' EQ '').DEFLEN     LENGTH WILL DEFAULT TO 4\n&LL      SETA  &LX                      GET IT\n         AGO   .OKLEN\n.DEFLEN  ANOP\n&LL      SETA  4                        SET THE DEFAULT LENGTH\n.OKLEN   AIF   ('&HEXTAB' EQ '').OKHEX1\n&HEXTAB# SETC  '&HEXTAB'\n.OKHEX1  AIF   ('&HEXTAB#' NE '').OKHEX2\n&HEXTAB# SETC  'HEXTAB'\n.OKHEX2  ANOP\n&LT      SETA  &LL*2\n         AIF   ('&DIGITS' EQ '').OKDIGIT\n&LT      SETA  &DIGITS\n.OKDIGIT AIF   (N'&TO NE 2).TO1\n         AIF   (N'&FROM NE 2).T2F1\n.*  N'&TO = 2     N'&FROM = 2\n&NFS     UNPK  &T1.(&LT+1,&T2),&F1.(&LL+1,&F2)\n         TR    &T1.(&LT,&T2),&HEXTAB#\n         MVI   &T1+&LT.(&T2),&BYTE\n         AGO   .DONE\n.T2F1    AIF   (N'&FROM NE 1).ERRF\n.*  N'&TO = 2     N'&FROM = 1\n&NFS     UNPK  &T1.(&LT+1,&T2),&FROM.(&LL+1)\n         TR    &T1.(&LT,&T2),&HEXTAB#\n         MVI   &T1+&LT.(&T2),&BYTE\n         AGO   .DONE\n.TO1     AIF   (N'&TO NE 1).ERRT\n         AIF   (N'&FROM NE 2).T1F1\n.*  N'&TO = 1     N'&FROM = 2\n&NFS     UNPK  &TO.(&LT+1),&F1.(&LL+1,&F2)\n         TR    &TO.(&LT),&HEXTAB#\n         MVI   &TO+&LT,&BYTE\n         AGO   .DONE\n.T1F1    AIF   (N'&FROM NE 1).ERRF\n.*  N'&TO = 1     N'&FROM = 1\n&NFS     UNPK  &TO.(&LT+1),&FROM.(&LL+1)\n         TR    &TO.(&LT),&HEXTAB#\n         MVI   &TO+&LT,&BYTE\n         AGO   .DONE\n.ERRF    MNOTE 8,'ERROR IN \"FROM\" PARAMETER, MACRO TERMINATED'\n         MEXIT\n.ERRT    MNOTE 8,'ERROR IN \"TO\" PARAMETER, MACRO TERMINATED'\n         MEXIT\n.DONE    SPACE 1\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     MONTHS  &DUMMY                 04-19-77 LDW\n&NFS     DC    H'31',C'JAN '            THIRTY DAYS\n         DC    H'28',C'FEB '            HATH SEPTEMBER,\n         DC    H'31',C'MAR '            APRIL, JUNE,\n         DC    H'30',C'APR '            AND NOVEMBER.\n         DC    H'31',C'MAY '            ALL THE REST\n         DC    H'30',C'JUN '            HAVE THIRTY ONE,\n         DC    H'31',C'JUL '            EXCEPT FEBRUARY,\n         DC    H'31',C'AUG '            WHICH HAS ONLY 28.\n         DC    H'30',C'SEP '\n         DC    H'31',C'OCT '\n         DC    H'30',C'NOV '\n         DC    H'31',C'DEC '\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     DAYS  &TYPE,&LEN=9                                04-19-77 LDW\n         AIF   ('&TYPE' EQ 'RIGHT').RIGHT\n&NFS     DC    CL&LEN'SUNDAY   '\n         DC    CL&LEN'MONDAY   '\n         DC    CL&LEN'TUESDAY  '\n         DC    CL&LEN'WEDNESDAY'\n         DC    CL&LEN'THURSDAY '\n         DC    CL&LEN'FRIDAY   '\n         DC    CL&LEN'SATURDAY '\n         AGO   .EXIT\n.RIGHT   ANOP\n&NFS     DC    CL&LEN'   SUNDAY'\n         DC    CL&LEN'   MONDAY'\n         DC    CL&LEN'  TUESDAY'\n         DC    CL&LEN'WEDNESDAY'\n         DC    CL&LEN' THURSDAY'\n         DC    CL&LEN'   FRIDAY'\n         DC    CL&LEN' SATURDAY'\n.EXIT    SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     TODAY &LOC,&MONTHS=MONTHS,&DAYS=DAYS,&WORK=DWD,               $\n               &PUNCT=YES,&WEEKDAY=,&TIME=,                            $\n               &F15==F'15',&F6==F'6',&H2==H'2',&H12==H'12',            $\n               &H10==H'10',&H13==H'13',&F5==F'5',&H34==H'34',          $\n               &F7==F'7'                                   06-23-78 LDW\n         LCLC  &LQ\n&LQ      SETC  'L'''\n&LQ      SETC  '&LQ&DAYS'\n&NFS     L     R1,16                    -> CVT\n         UNPK  &LOC+16(5),57(3,R1)      UNPK THE DATE\n         OI    &LOC+20,C'0'             FIX THE SIGN\n         MVC   &LOC+15(2),&LOC+16       MOVE THE YEAR OVER\n         MVI   &LOC+17,C'.'             PUT IN THE DOT\n         AIF   ('&PUNCT' NE 'YES').NOP1\n         MVI   &LOC+14,C'('\n         MVI   &LOC+21,C')'\n.NOP1    TM    57(R1),X'01'             LEAP YEAR?\n         BO    IHB&SYSNDX.N             NO (ODD YEAR) - NOT LEAP\n         TM    57(R1),X'12'             DIVISIBLE BY 4?\n         BM    IHB&SYSNDX.N             NO - NOT LEAP YEAR\n         MVI   &MONTHS+7,29             FEB HAS 29 DAYS THIS YEAR\n         SPACE 1\nIHB&SYSNDX.N MVC &WORK+6(2),58(R1)      COPY DDDF\n         XC    &WORK.(6),&WORK          CLEAR BEGINNING\n         CVB   R0,&WORK                 GET DAY OF YEAR IN BINARY\n         LA    R15,&MONTHS              POINT TO TABLE\n         SPACE 1\nIHB&SYSNDX.L SH R0,0(,R15)              SUB NUMBER OF DAYS THIS MONTH\n         BNP   IHB&SYSNDX.H             HAVE MONTH\n         LA    R15,6(,R15)              NEXT TABLE ENTRY\n         B     IHB&SYSNDX.L             KEEP LOOKING\n         SPACE 1\nIHB&SYSNDX.H MVC &LOC.(3),2(R15)        MOVE NAME OF MONTH\n         AH    R0,0(,R15)               GET BACK CORRECT RESIDUAL\n         CVD   R0,&WORK\n         UNPK  &LOC+4(2),&WORK+6(2)     DAY OF MONTH\n         OI    &LOC+5,C'0'              FIX SIGN\n         MVC   &LOC+10(2),&LOC+15       MOVE IN YEAR\n         AIF   ('&PUNCT' NE 'YES').NOP2\n         MVC   &LOC+6(4),=C', 19'\n.NOP2    AIF   ('&WEEKDAY' EQ '').NODAY\n         ST    R0,&WORK                 SAVE DAY OF MONTH\n.*\n.* MONTH=MOD(MONTH+9,12)+1\n.* IF (MONTH=11 | MONTH=12) YEAR=YEAR-1  ==> IF MONTH > 10 YEAR=YEAR-1\n.* A=(13*MONTH-1)/5\n.* B=YEAR/4\n.* C=CENTURY/4\n.* D=A+B+C+DAY+YEAR-2*CENTURY\n.* Z=MOD(D,7)+1\n.* WHERE Z=DAY OF WEEK, 1=SUNDAY,... 7=SATURDAY\n.*\n.* THIS MACRO ASSUMES 1900-1999... IE, CENTURY=19\n         SPACE 2\n         LA    R14,&MONTHS-6\n         SR    R15,R14                  GET MONTH # * 6\n         XR    R14,R14                  CLEAR FOR DIVIDE\n         D     R14,&F6                  GET MONTH #\n* MONTH=MOD(MONTH+9,12)+1\n         SH    R15,&H2\n         BP    *+8\n         AH    R15,&H12\n.***     XR    R14,R14                  CLEAR FOR DIVIDE\n.***     LA    R15,9(,R15)              MONTH+9\n.***     D     R14,=F'12'               DIVIDE BY 12\n.***     LA    R14,1(,R14)\n         SPACE 1\n         IC    R0,57(,R1)               GET YEAR\n         SRL   R0,4\n         N     R0,&F15\n         MH    R0,&H10\n         IC    R1,57(,R1)\n         N     R1,&F15\n         AR    R1,R0                    = YEAR IN BINARY\n         SPACE 1\n         CH    R15,&H10                 MONTH = 11 OR 12 ?\n         BNH   *+6                      NO - SKIP\n         BCTR  R1,0                     -1 FROM YEAR\n* A=(13*MONTH-1)/5\n         MH    R15,&H13                 MONTH * 13\n         BCTR  R15,0                    -1\n         XR    R14,R14                  CLEAR FOR DIVIDE\n         D     R14,&F5                  ALL OVER 5 (R5=A)\n* B=YEAR/4\n         LR    R0,R1                    COPY YEAR\n         SRL   R0,2                     YEAR/4\n         AR    R15,R0                   D=A+B SO FAR\n* C=CENTURY/4 = 19/4 = 4                CENTURY*2 = 19*2 = 38\n* +C-2*CENTURY = -34\n         SH    R15,&H34                 D=A+B+C-2*CENT NOW\n* D=A+B+C+DAY+YEAR-2*CENTURY\n         A     R15,&WORK                ADD DAY\n         AR    R15,R1                   ADD YEAR\n* Z=MOD(D,7)+1\n         XR    R14,R14                  CLEAR FOR DIVIDE\n         D     R14,&F7                  GET MOD(D,7) IN R4=Z\n         MH    R14,=Y(&LQ)              OFFSET INTO TABLE\n         LA    R14,&DAYS.(R14)          POINT TO DAY IN TABLE\n         MVC   &WEEKDAY.(&LQ),0(R14)    DAY TO OUTPUT LOCATION\n*  SEEMS LIKE A LOT, BUT BETTER THAN AN SVC CALL, AND TRANSPORTABLE!!\n.NODAY   AIF   ('&TIME' EQ '').NOTIME\n         SPACE 2\n*        TIME  DEC                      GET TIME\n         TIME  DEC                      GET TIME\n         ST    R0,&WORK                 PUT TIME INTO WORK AREA\n         OI    &WORK+3,X'0F'            FIX THE SIGN\n         MVC   &TIME.(9),=X'4021207A20207A2020'      ' DD:DD:DD'\n         ED    &TIME.(9),&WORK\n.NOTIME  SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     DCBEXIT  &BLKSIZE=,&BUFNO=\n.*  DCBEXIT   04-20-78  LDW\n         LCLC  &NAME\n&NAME    SETC  '&NFS'\n         PUSH  USING\n         DROP\n         USING *,R15\n         AIF   ('&BLKSIZE' EQ '').B1\n&NAME    CLC   62(2,R1),=F'0'           BLKSIZE GIVEN?\n&NAME    SETC  ''\n         AIF   ('&BUFNO' EQ '').A1\n         BNE   *+10                     YES - USE IT\n         AGO   .A2\n.A1      BNER  R14                      YES - USE IT\n.A2      MVC   62(2,R1),=Y(&BLKSIZE)    SET DEFAULT\n.B1      AIF   ('&BUFNO' EQ '').C1\n&NAME    CLI   20(R1),0                 BUFNO GIVEN?\n         BNER  R14                      YES - USE IT\n         MVI   20(R1),&BUFNO            SET DEFAULT\n.C1      BR    R14                      RETURN TO OPEN\n         SPACE 2\n         POP   USING\n         SPACE 3\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n         $$ASM &M=(JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC)\n.*.\n.*$MACRO=$$ASM      DATE=10/07/79       SOURCE=LDW\n.*\n.*  THIS MACRO SETS GBLC'S FOR VARIOUS DATE AND TIME FORMATS:\n.*\n.*       &$$DATE1    DDMMMYY (EX: 29NOV79)\n.*       &$$DATE2    MM/DD/YY\n.*       &$$ASM      ASSEMBLER: 'F'=FX, 'G', 'H', 'S'=SPASM\n.*       &$$MM       MM OF CURRENT MONTH (NUMERIC)\n.*       &$$DD       DD OF CURRENT DAY (NUMERIC)\n.*       &$$YY       YY OF CURRENT DAY (LAST 2 DIGITS)\n.*       &$$MONTH    MMM - 3 CHAR MONTH ABBREV.\n.*       &$$DAY      (NOT CURRENTLY SET)\n.*       &$$YEAR     4 DIGIT YEAR\n.*.\n         GBLC  &$$DATE1,&$$DATE2,&$$ASM\n         GBLC  &$$MM,&$$DD,&$$YY\n         GBLC  &$$MONTH,&$$DAY,&$$YEAR\n         LCLC  &D\n         LCLA  &I\n&D       SETC  '&SYSDATE'\n         AIF   ('&D'(3,1) EQ '/').D1\n.*  ASMG:  10JUL79\n&$$ASM   SETC  'G'\n&$$YY    SETC  '&D'(1,2)                GET YEAR YY\n&$$MONTH SETC  '&D'(3,3)                GET MONTH MMM\n         AIF   (K'&D EQ 6).D2\n&$$DD    SETC  '&D'(6,2)                GET DAY DD\n         AGO   .D3\n.D2      ANOP\n&$$DD    SETC  '0&D'(6,1)               GET DAY 0D\n.D3      ANOP\n&$$DATE1 SETC  '&$$DD&$$MONTH&$$YY'     SET DDMMMYY\n.D3A     ANOP\n&I       SETA  &I+1\n         AIF   ('&$$MONTH' NE '&M(&I)').D3A    FIND MONTH NAME\n&$$MM    SETC  '&I'\n         AIF   (&I GT 9).D4\n&$$MM    SETC  '0&I'\n.D4      ANOP\n&$$DATE2 SETC  '&$$MM/&$$DD/&$$YY'      SET MM/DD/YY\n         AGO   .COMMON\n.D1      ANOP\n&$$DATE2 SETC  '&D'                     SET MM/DD/YY\n&$$MM    SETC  '&D'(1,2)                GET MM\n&$$DD    SETC  '&D'(4,2)                GET DD\n&$$YY    SETC  '&D'(7,2)                GET YY\n&$$MONTH SETC  '&M(&$$MM)'              GET MONTH MMM\n&$$DATE1 SETC  '&$$DD&$$MONTH&$$YY'\n.*  NOW: ASMF(X) OR ASMH OR SPASM?\n&D       SETC  'ABCDEFGHI'\n         AIF   (K'&D EQ 8).D5           ASMF OR SPASM\n&$$ASM   SETC  'H'\n         AGO   .COMMON\n.D5      AIF   (K'&SYSTIME GT 5).D6\n&$$ASM   SETC  'F'\n         MEXIT\n.D6      ANOP\n&$$ASM   SETC  'S'\n.COMMON  ANOP\n&$$YEAR  SETC  '19&$$YY'                GET 19YY\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n         DROPX &PARMS,&DUMMY\n         GBLB  &USESKIP                 USNGX SKIPPED SAVE TABLE SETUP\n         GBLC  &USELAB(32),&USEREG(16)  PGM LABELS,REGISTERS USED\n         LCLA  &RCNT,&UNDX              # OF OPERANDS, USE INDICES\n         LCLA  &PNDX,&DNDX              INPUT PARM,DROP STRING INDICES\n         LCLC  &C(16),&R(16)            COMMAS,REGS TO DROP\n         LCLB  &GOTREG                  FOUND A REG FOR DROP\n&RCNT    SETA  N'&SYSLIST               COUNT THE OPERANDS/REGISTERS\n         AIF   ((&RCNT EQ 0) OR ('&PARMS' EQ '')).DROPALL BR IF ALL\n.COMLOOP ANOP                           BUILD COMMA/REG LIST LOOP\n&PNDX    SETA  &PNDX+1                  UP THE COMMA/REG INDEX\n&UNDX    SETA  0                        INITIALIZE USE ARRAY INDEX\n.REGCHK  ANOP                           VALID DROP REG CHECK LOOP\n&UNDX    SETA  &UNDX+1                  UP THE USE ARRAY COUNT\n         AIF   ('&USEREG(&UNDX)' EQ '&SYSLIST(&PNDX)').SETREG REG OK?\n         AIF   (&UNDX LT 16).REGCHK     LOOP FOR ALL ENTRIES IF NEEDED\n         MNOTE 4,'REGISTER &SYSLIST(&PNDX) WAS NOT A USNGX OPERAND'\n         AIF   (NOT &USESKIP).REGLOOP   NO DROP IF USNGX DID NO SKIPS\n.SETREG  ANOP\n&DNDX    SETA  &DNDX+1                  UP THE DROP STRING INDEX\n&R(&DNDX) SETC '&SYSLIST(&PNDX)'        GET A REG\n&C(&DNDX) SETC ','                      AND A COMMA\n&USEREG(&UNDX) SETC ''                  BLANK THE REG/INDICATOR FIELD\n&GOTREG  SETB  1                        SAY HAVE SOMETHING TO DROP\n.REGLOOP AIF   (&PNDX LT &RCNT).COMLOOP LOOP TIL DONE WITH REGS\n.DROPGO  AIF   (NOT &GOTREG).EXIT       SKIP THE DROP IF NOTHING TO DO\n&C(&DNDX) SETC ''                       KILL THE LAST COMMA\n         DROP  &R(1)&C(1)&R(2)&C(2)&R(3)&C(3)&R(4)&C(4)&R(5)&C(5)&R(6)&\u00ac\n               C(6)&R(7)&C(7)&R(8)&C(8)&R(9)&C(9)&R(10)&C(10)&R(11)&C(1\u00ac\n               1)&R(12)&C(12)&R(13)&C(13)&R(14)&C(14)&R(15)&C(15)&R(16)\n.EXIT    MEXIT\n.DROPALL AIF   (&UNDX GE 16).DROPGO     CHECK FOR END OF TABLE\n&UNDX    SETA  &UNDX+1                  UP THE USE INDEX COUNT\n         AIF   ('&USEREG(&UNDX)'  EQ '').DROPALL\n&DNDX    SETA  &DNDX+1                  UP THE DROP STRING INDEX\n&R(&DNDX) SETC '&USEREG(&UNDX)'         GET REG FOR THE DROP\n&C(&DNDX) SETC ','                      AND A DELIMITER\n&USEREG(&UNDX) SETC ''                  KILL THE REG/INDICATOR\n&GOTREG  SETB  1                        SAY WE FOUND SOMETHING\n         AGO   .DROPALL                 CONTINUE WITH THE SCAN\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n         INUSE &DUMMY\n         GBLC  &USELAB(32),&USEREG(16)  PGM LABELS,REGISTERS USED\n         LCLA  &UCNT                    USE INDEX\n         LCLB  &GOTREG                  WHETHER WE FOUND REGS IN USE\n         SPACE 2\n         MNOTE *,'THE FOLLOWING REGISTERS ARE IN USE:'\n         SPACE 1\n.USELOOP ANOP                           USED REGS LOOP\n&UCNT    SETA  &UCNT+1                  UP THE USE INDEX\n         AIF   ('&USEREG(&UCNT)' EQ '').CHKEND THIS ENTRY IN USE?\n         MNOTE *,'    &USELAB(&UCNT+&UCNT-1)&USELAB(&UCNT+&UCNT),&USERE\u00ac\n               G(&UCNT)'\n&GOTREG  SETB  1                        SAY WE FOUND SOMETHING\n.CHKEND  AIF   (&UCNT LT 16).USELOOP    CHECK FOR END OF ARRAY\n         AIF   (&GOTREG).EXIT           LEAVE IF WE HAD REGS IN USE\n         MNOTE *,'    *** NONE ****'\n.EXIT    ANOP\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n         USNGX &PARMS\n         GBLB  &USESKIP                 IF TABLE SETUP SKIPPED (DROPX)\n         GBLC  &USELAB(32),&USEREG(16)  PGM LABELS,USE REGISTERS\n         LCLA  &RCNT,&PNDX,&UNDX        # OF OPERANDS,PARM/USE INDICES\n         LCLA  &TP1,&HOLE               TEMP WORK,1ST UNUSED SAVE ENTRY\n         LCLB  &GOTREG                  WHETHER TO DO USING OR NOT\n         LCLC  &CHR1,&CHR2,&CHR3,&C(16) TEMPORARY WORK CHARS,COMMAS\n         LCLC  &R(16),&S,&T             REGS,&SYSLIST(1)+REMAINDER\n         LCLC  &U,&V,&W                 R(15),C(16),R(16)\n&PNDX    SETA  1                        SET UP PARM STRING INDEX\n&RCNT    SETA  N'&SYSLIST               GET NUMBER OF OPERANDS\n         AIF   (&RCNT LE 1).ERR01       TOO FEW INPUT PARAMETERS\n         AIF   (&RCNT LE 17).CHK01      CONTINUE IF LOW ENOUGH\n&RCNT    SETA  17                       ELSE GET MAX\n         MNOTE 4,'TOO MANY INPUT PARAMETERS. ONLY 17 PROCESSED'\n.CHK01   AIF   (((K'&SYSLIST(1) LE 16) AND (&RCNT EQ 02)) OR           @\n               ((K'&SYSLIST(1) LE 11) AND (&RCNT LE 04)) OR            @\n               ((K'&SYSLIST(1) LE 10) AND (&RCNT LE 17))).SYS1#CK\n         MNOTE 12,'LENGTH OF ''&SYSLIST(1)'' OR LENGTH PLUS NUMBER OF R@\n               EGISTERS INHIBIT SAVE TABLE PROCESSING'\n&USESKIP SETB  1                        TELL DROPX TO ALWAYS DROP\n         AIF   (&RCNT EQ 2).USE#TRY     NO MSG IF ONLY TWO OPERANDS\n         MNOTE 4,'ONLY USING FOR FIRST DATA AREA/REG GENERATED'\n.USE#TRY USING &SYSLIST(1),&SYSLIST(2)\n         MEXIT\n.SYS1#CK ANOP\n&S       SETC  '&SYSLIST(1)'            SET FOR SHORTER STRING BELOW\n         AIF   (K'&SYSLIST(1) LE K'&S).COMLOOP BRANCH IF NO MORE CHARS\n.******  NOTE THE FOLLOWING SETC ASSUMES THE MAX SETC SIZE IS 8 CHARS.\n&T       SETC  '&SYSLIST(1)'(9,K'&SYSLIST(1)-8) ELSE GET REMAINDER\n.COMLOOP ANOP\n&PNDX    SETA  &PNDX+1                  INCREMENT INPUT STRING INDEX\n&UNDX    SETA  0                        INITIALIZE USE INDEX\n&HOLE    SETA  0                        INITIALIZE UNUSED ENTRY INDEX\n.USELOOP AIF   ('&SYSLIST(&PNDX)' EQ '').CHK#END BR IF NULL STRING\n&UNDX    SETA  &UNDX+1                  UP THE USE INDEX\n         AIF   ('&USEREG(&UNDX)' EQ '&SYSLIST(&PNDX)').DO#USE PREVUSE?\n         AIF   ((&HOLE NE 0) OR ('&USEREG(&UNDX)' NE '')).CHKEND\n.* WE BRANCH TO CHKEND IF WE ALREADY HAVE A HOLE OR NO HOLE EXISTS HERE\n&HOLE    SETA  &UNDX                    KEEP THE SAVE TABLE FREE INDEX\n.CHKEND  AIF   (&UNDX LT 16).USELOOP    LOOP FOR ALL ENTRIES\n&UNDX    SETA  &HOLE                    GET FREE ENTRY INDEX IN CASE\n         AIF   (&HOLE NE 0).DO#USE2     BRANCH IF SPACE FOR ENTRY\n         MNOTE 4,'USNGX SAVE TABLE FULL. OPERAND TRUNCATED'\n         AGO   .USINGGO                 GO DO JUST WHAT WE CAN\n.DO#USE  ANOP\n&CHR1    SETC  '********'(1,K'&SYSLIST(&PNDX)) STARS FOR THE REG\n&CHR2    SETC  '********'(1,K'&USELAB(&UNDX+&UNDX-1)) FIRST OPERAND SEG\n&CHR3    SETC  '&USELAB(&UNDX+&UNDX)'   GET NULL STRING POSSIBLY\n         AIF   (K'&CHR3 EQ 0).DO#USE1   SKIP IF IT IS NULL\n&CHR3    SETC  '********'(1,K'&CHR3)    ELSE CONVERT IT TO STARS\n.DO#USE1 MNOTE *,'*********&CHR1*********************&CHR2&CHR3'\n         MNOTE *,'REGISTER &SYSLIST(&PNDX) PREVIOUSLY BASED ON &USELAB(@\n               &UNDX+&UNDX-1)&USELAB(&UNDX+&UNDX)'\n         MNOTE *,'*********&CHR1*********************&CHR2&CHR3'\n.DO#USE2 ANOP                           LOG THE REG USE HERE\n&CHR1    SETC  '&SYSLIST(1)'            GET A DEFAULT LABEL\n&CHR2    SETC  '&T'                     SECOND PIECE IF ANY OR NULL\n         AIF   (&PNDX EQ 2).SETLAB      IF FIRST REG, NO +NNNN TO ADD\n&TP1     SETA  (&PNDX-2)*4096           ELSE GET ADDED AMOUNT\n&CHR2    SETC  '&CHR2'.'+'.'&TP1'       APPEND THE +NN FOR EXTRA REGS\n.SETLAB  ANOP                           MOVE IN THE SAVE LABELS HERE\n&USELAB(&UNDX+&UNDX-1) SETC '&CHR1'     FIRST 'HALF'\n&USELAB(&UNDX+&UNDX)   SETC '&CHR2'     AND THE REST\n&USEREG(&UNDX) SETC '&SYSLIST(&PNDX)'   GET THE REG VALUE IN SAVEAREA\n&R(&PNDX-1) SETC '&SYSLIST(&PNDX)'      GET THE REG VALUE FOR USING\n&C(&PNDX-1) SETC ','                    AND A LEADING COMMA ALSO\n&GOTREG  SETB  1                        SAY WE CAN DO USING\n.CHK#END AIF   (&PNDX LT &RCNT).COMLOOP LOOP FOR ALL ENTRIES\n.USINGGO AIF   (NOT &GOTREG).EXIT       NOW TELL ASSEMBLER IF WE CAN\n&U       SETC  '&R(15)'                 SO WE HAVE A SHORTER STRING\n&V       SETC  '&C(16)'                 SO WE HAVE A SHORTER STRING\n&W       SETC  '&R(16)'                 SO WE HAVE A SHORTER STRING\n         USING &S&T&C(1)&R(1)&C(2)&R(2)&C(3)&R(3)&C(4)&R(4)&C(5)&R(5)&C@\n               (6)&R(6)&C(7)&R(7)&C(8)&R(8)&C(9)&R(9)&C(10)&R(10)&C(11)@\n               &R(11)&C(12)&R(12)&C(13)&R(13)&C(14)&R(14)&C(15)&U&V&W\n         MEXIT\n.ERR01   MNOTE 4,'MISSING INPUT PARAMETERS'\n         MEXIT\n.EXIT    MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     ID    &ID,&OPT,&DATE=,&TIME=\n.*  ID  --  06-15-77 LDW\n.*  UPDATED 01-03-79 LDW\n.*  UPDATED 02-21-79 LDW\n.*  UPDATED 03-17-79 LDW\n.*  UPDATED 11-29-79 LDW    USE $$ASM MACRO FOR DATE\n         GBLC  &$$DATE1\n         LCLC  &XDATE,&XTIME\n         LCLA  &L\n&L       SETA  K'&ID\n         AIF   ('&OPT' EQ 'ASIS').ASIS\n         AIF   ('&OPT' NE 'NODATE').DATE\n.ASIS    ANOP\n&NFS     DC    AL1(&L),C'&ID'\n         MEXIT\n.DATE    $$ASM\n&XDATE   SETC  '&$$DATE1'\n         AIF   ('&DATE' EQ '').OKDATE\n&XDATE   SETC  '&DATE'                  USE WHAT HE WANTS\n.OKDATE  ANOP\n&L       SETA  &L+K'&XDATE+2\n         AIF   ('&OPT' NE 'NOTIME').TIME\n&NFS     DC    AL1(&L),C'&ID  &XDATE'\n         MEXIT\n.TIME    ANOP\n&XTIME   SETC  '&SYSTIME'               DEFAULT TO CURRENT TIME\n         AIF   ('&TIME' EQ '').OKTIME   HE DIDN'T SPECIFY, USE CURRENT\n&XTIME   SETC  '&TIME'                  USE WHAT HE WANTS\n.OKTIME  ANOP\n&L       SETA &L+K'&XTIME+1             =1+8\n         AIF   ('&OPT' NE '').BADOPT\n&NFS     DC    AL1(&L),C'&ID  &XDATE &XTIME'\n         MEXIT\n.BADOPT  MNOTE 0,'*** (ID MACRO) OPT=&OPT IS INVALID, IGNORED.'\n         MNOTE *,'(MUST BE NULL, \"NOTIME\", \"NODATE\", OR \"ASIS\")'\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n         REGEQU  &F=,&FR=,&PREFIX=R,&STARS=YES\n.*$MACRO=REGEQU     DATE=11/26/78       SOURCE=LDW\n.*\n.* PREFIX=R  SPECIFIES PREFIX FOR GENERAL REGISTER EQUATES.\n.* F= (FR=)  SPECIFIES PREFIX FOR FLOATING POINT REG EQUATES.\n.*            (DEFAULT IS NO EQUATES FOR F.P. REGS)\n.* STARS=YES GENERATE LINE OF ASTERISKS BEFORE AND AFTER EQUATES.\n.*\n.* MULTIPLE REGEQU'S WITH THE SAME PREFIX WILL BE IGNORED.\n.*\n         GBLC  &$REGS$(15),&R,&FF\n         LCLA  &X\n&R       SETC  '&PREFIX'\n.RLOOP   ANOP\n&X       SETA  &X+1\n         AIF   (&X GT 15).GEN\n         AIF   ('&$REGS$(&X)' EQ '').GEN\n         AIF   ('&R' EQ '&$REGS$(&X)').NOGEN\n         AGO   .RLOOP\n.GEN     ANOP\n&$REGS$(&X) SETC '&R'\n         AIF   ('&STARS' NE 'YES').NOSTAR1\n***********************************************************************\n.*\n.NOSTAR1 ANOP\n&R.0     EQU   0\n&R.1     EQU   1\n&R.2     EQU   2\n&R.3     EQU   3\n&R.4     EQU   4\n&R.5     EQU   5                        *************\n&R.6     EQU   6                        *  DEFINE   *\n&R.7     EQU   7                        * SYMBOLIC  *\n&R.8     EQU   8                        * REGISTERS *\n&R.9     EQU   9                        *************\n&R.10    EQU   10\n&R.11    EQU   11\n&R.12    EQU   12\n&R.13    EQU   13\n&R.14    EQU   14\n&R.15    EQU   15\n.*\n         AGO   .CONT11\n.NOGEN   ANOP\n******** REGEQU ALREADY CODED FOR THIS PREFIX, IGNORED ****************\n.CONT11  AIF   ('&F&FR' EQ '').NOF\n&X       SETA  0                        RE-INIT\n&FF      SETC  '&F&FR'\n.FLOOP   ANOP\n&X       SETA  &X+1\n         AIF   (&X GT 15).FGEN\n         AIF   ('&$REGS$(&X)' EQ '').FGEN\n         AIF   ('&FF' EQ '&$REGS$(&X)').NOGENF\n         AGO   .FLOOP\n.FGEN    ANOP\n&$REGS$(&X) SETC '&FF'\n         SPACE 1\n&FF.0    EQU   0\n&FF.2    EQU   2\n&FF.4    EQU   4\n&FF.6    EQU   6\n.NOF     AIF   ('&STARS' NE 'YES').NOSTAR2\n***********************************************************************\n.NOSTAR2 SPACE\n         AGO   .MEND\n.NOGENF  ANOP\n******** REGEQU F= ALREADY CODED FOR THIS PREFIX, IGNORED *************\n.MEND    MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     ENTR  &BASE=12,&BASE2=,&BASE3=,&BASE4=,                       $\n               &SAVE=*,&REGS=(YES,R),&F=,                              $\n               &USING=,&SECTYPE=CSECT,&GETMAIN=,&PARMREG=,&LPARM=,     $\n               &SP=1,&ID=*,&EXIT=,&ADDRREG=,&LENREG=,&ENV=CALL,        $\n               &RC=,&RCLOC=,&T=T,&PL=,&LOAD=,&SYMREG=,&DSECT=,         $\n               &TSFAKE=,&PARSE=,&MACRO=,&PRINT=,&DATE=,&TIME=\n.*********************************************************************.\n.*                                                                   *.\n.*  ENTR  --  09/27/79  --  LDW                                      *.\n.*                                                                   *.\n.*-------------------------------------------------------------------*.\n.*                                                                   *.\n.*  THIS MACRO WILL GENERATE THE HOUSEKEEPING CODE NEEDED FOR        *.\n.*  STANDARD OS LINKAGE CONVENTIONS (FOR ENTRY AND EXIT)             *.\n.*  THE GENERATED CODE WILL OPTIONALLY BE RE-ENTRANT                 *.\n.*                                                                   *.\n.*  UPDATES:                                                         *.\n.*    09-27-79  LDW  FIX BUG IN TSO-CP SIMULATION CODE               *.\n.*    02-21-79  LDW  ADD DATE= AND TIME= OPERANDS                    *.\n.*    01-12-79  LDW  FIX BUG; ADD MVS CODE FOR LOAD=                 *.\n.*    12-29-78  LDW  ADD BASE4=; FIX LENGTH OF GETMAIN IF MACRO=YES; *.\n.*                   CHECK FOR RC=(R1) AND DYNAMIC AREA (GETMAIN=);  *.\n.*                   ADD PRINT=; FIX FOR BATCH CALL OF ENV=CP PGMCK  *.\n.*                                                                   *.\n.*-------------------------------------------------------------------*.\n.*                                                                   *.\n.*  OPERANDS AVAILABLE ARE:                                          *.\n.*                                                                   *.\n.*                                                                   *.\n.*  BASE=    -- DEFAULT:  BASE=12                                    *.\n.*              THE BASE REGISTER TO BE USED                         *.\n.*                                                                   *.\n.*                                                                   *.\n.*  BASE2=   -- DEFAULT:  (NONE)                                     *.\n.*              A SECOND BASE REGISTER                               *.\n.*                                                                   *.\n.*                                                                   *.\n.*  BASE3=   -- DEFAULT:  (NONE)                                     *.\n.*              A THIRD BASE REGISTER (ONLY VALID IF BASE2= IS CODED)*.\n.*                                                                   *.\n.*  BASE4=   -- DEFAULT:  (NONE)                                     *.\n.*              A FOURTH BASE REGISTER (MUST HAVE BASE2= AND BASE3=) *.\n.*                                                                   *.\n.*                                                                   *.\n.*  SAVE=    -- DEFAULT:  SAVE=*                                     *.\n.*              NAME OF A SAVE AREA TO BE USED.                      *.\n.*              IF SAVE=* IS CODED, AN INLINE SAVE AREA WILL BE      *.\n.*              GENERATED, WITH A UNIQUE NAME.  SAVE=* IS IGNORED    *.\n.*              IF GETMAIN= IS CODED.  ANY OTHER VALUE OF SAVE=      *.\n.*              WILL CAUSE AN ERROR IF GETMAIN= IS ALSO USED.        *.\n.*                                                                   *.\n.*                                                                   *.\n.*  GETMAIN= -- DEFAULT:  (NONE)                                     *.\n.*              THERE ARE TWO FORMS TO THIS OPERAND:                 *.\n.*              GETMAIN=LENGTH, OR                                   *.\n.*              GETMAIN=(LENGTH,DSECTNAME).  THIS OPERAND CAUSES A   *.\n.*              GETMAIN FOR \"LENGTH\" BYTES TO EXPANDED.  THE FIRST   *.\n.*              18 WORDS WILL BE RESERVED FOR THE SAVE AREA.  THE    *.\n.*              ADDRESS OF THE AREA OBTAINED IS PLACED IN REG. 13,   *.\n.*              AND IF \"DSECTNAME\" IS GIVEN, A USING IS DONE.        *.\n.*              IF MACRO=YES IS CODED, THE DEFAULT FOR GETMAIN= IS   *.\n.*              GETMAIN=(TSDSECTL,TSDSECT) AND THE EQU FOR TSDSECTL  *.\n.*              WILL BE GENERATED BY ENTR.                           *.\n.*                                                                   *.\n.*                                                                   *.\n.*  SP=      -- DEFAULT:  SP=1                                       *.\n.*              THE SUBPOOL FOR THE WORKAREA OBTAINED BY GETMAIN=    *.\n.*                                                                   *.\n.*                                                                   *.\n.*  REGS=    -- DEFAULT:  REGS=(YES,R)                               *.\n.*              THE FIRST OPERAND (YES/NO) INDICATES WHETHER THE     *.\n.*              REGEQU MACRO WILL BE USED TO GENERATE EQU'S FOR      *.\n.*              SYMBOLIC REGISTERS.  THE SECOND OPERAND IS THE       *.\n.*              PREFIX TO BE USED.                                   *.\n.*              NOTE:  REGS=(YES,Q) IS THE SAME AS REGS=(,Q)         *.\n.*                                                                   *.\n.*                                                                   *.\n.*  F=       -- DEFAULT:  (NONE)                                     *.\n.*              THE PREFIX TO BE USED FOR SYMBOLIC FLOATING POINT    *.\n.*              REGISTER NAMES.                                      *.\n.*                                                                   *.\n.*                                                                   *.\n.*  SECTYPE= -- DEFAULT:  SECTYPE=CSECT                              *.\n.*              THE SECTION TYPE TO BE GENERATED.                    *.\n.*              POSSIBLE VALUES:  CSECT/DSECT/ENTRY/NONE             *.\n.*                                                                   *.\n.*                                                                   *.\n.*  USING=   -- DEFAULT:  (NONE)                                     *.\n.*              A USING WILL BE DONE FOR EACH PAIR OF OPERANDS.      *.\n.*              CODED AS FOLLOWS:                                    *.\n.*              USING=(DSECT1,REG1,DSECT2,REG2,...)                  *.\n.*                                                                   *.\n.*                                                                   *.\n.*  EXIT=    -- DEFAULT:  (NONE)                                     *.\n.*              THE NAME OF AN EXIT ROUTINE TO BE BRANCHED TO THAT   *.\n.*              WILL FREE THE WORKAREA (IF ONE WAS OBTAINED BY       *.\n.*              GETMAIN=), DECHAIN SAVE AREAS, SET THE RETURN CODE,  *.\n.*              AND RETURN TO CALLER.                                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  RC=      -- DEFAULT:  RC=(15)                                    *.\n.*              THE RETURN CODE TO BE PASSED BACK TO THE CALLER.     *.\n.*              THIS OPERAND IS IGNORED IF EXIT= IS NOT CODED.       *.\n.*              RC= CAN BE CODED AS RC=(REG) OR RC=EXPRESSION.       *.\n.*              THIS OPERAND IS MUTUALLY EXCLUSIVE WITH THE RCLOC=   *.\n.*              OPERAND.                                             *.\n.*                                                                   *.\n.*                                                                   *.\n.*  RCLOC=   -- DEFAULT:  (NONE)                                     *.\n.*              THE STORAGE LOCATION FROM WHICH THE RETURN CODE WILL *.\n.*              BE OBTAINED.  MUST HAVE FULLWORD OR HALFWORD TYPE    *.\n.*              ATTRIBUTE.  THIS OPERAND IS MUTUALLY EXCLUSIVE       *.\n.*              WITH THE RC= OPERNAND.                               *.\n.*                                                                   *.\n.*                                                                   *.\n.*  T=       -- DEFAULT:  T=T                                        *.\n.*              IGNORED IF EXIT= NOT CODED.  SPECIFIES THAT THE OLD  *.\n.*              SAVE AREA WILL BE FLAGGED BY A X'FF' AT OFFSET 12    *.\n.*              TO INDICATE THAT IT IS INACTIVE.  NOTE:  \"T=\" SHOULD *.\n.*              NOT BE CODED FOR EXIT ROUTINES, SUCH AS STAE ROUTINES*.\n.*                                                                   *.\n.*                                                                   *.\n.*  ID=      -- DEFAULT:  ID=CSECT NAME                              *.\n.*              AN ID TO PUT IN CHARACTER FORM NEAR THE BEGINNING    *.\n.*              OF THE CSECT, TO AID IN DUMP READING.                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  ENV=     -- DEFAULT:  ENV=CALL                                   *.\n.*              THE ENVIRONMENT THAT THE PROGRAM WILL OR SHOULD BE   *.\n.*              RUNNING UNDER.  VALID OPERANDS (MORE THAN ONE CAN    *.\n.*              BE CODED, IN PARENS):                                *.\n.*              CALL -- BATCH EXEC PGM=, OR TSO CALL, OR LINK MACRO  *.\n.*              CP -- TSO COMMAND PROCESSOR                          *.\n.*              TSOCP -- ALIAS FOR CP                                *.\n.*              TSO -- MAY BE RUN ON TSO                             *.\n.*              MVT -- PROGRAM WILL BE RUN UNDER MVT.                *.\n.*              MVS -- PROGRAM WILL BE RUN UNDER MVS.  (OS/VS2 R3)   *.\n.*              PLI -- PROGRAM WILL BE CALLED BY A PLIX PROGRAM.     *.\n.*              PLIX -- ALIAS FOR PLIX                               *.\n.*              NOTE:  CALL IS MUTUALLY EXCLUSIVE WITH CP/TSOCP.  IF *.\n.*              THE PROGRAM MAY BE RUN EITHER THRU CALL OR AS A CP,  *.\n.*              SPECIFY ENV=TSO OR ENV=CP (ENV=CP IMPLIES ENV=TSO)   *.\n.*                                                                   *.\n.*                                                                   *.\n.*  PARMREG= -- DEFAULT:  (NONE)                                     *.\n.*              THE REGISTER TO SAVE THE PARM POINTER PASSED IN R1   *.\n.*              (\"LR  PARMREG,R1\")                                   *.\n.*                                                                   *.\n.*                                                                   *.\n.*  LPARM=   -- DEFAULT:  (NONE)                                     *.\n.*              THE REGISTER INTO WHICH THE PARM ADDR WILL BE LOADED *.\n.*              ( \"L  LPARM,0(,R1)\" )                                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  ADDRREG= -- DEFAULT:  (NONE)                                     *.\n.*              THE REGISTER TO CONTAIN THE ADDRESS OF THE ACTUAL    *.\n.*              TEXT OF THE PARM.                                    *.\n.*              NOTE:  ADDRREG= AND LENREG= ARE AN OPERAND PAIR --   *.\n.*              IF ONE IS CODED, THE OTHER MUST ALSO BE CODED.       *.\n.*                                                                   *.\n.*                                                                   *.\n.*  LENREG=  -- DEFAULT:  (NONE)                                     *.\n.*              THE REGISTER TO CONTAIN THE LENGTH OF THE PARM TEXT. *.\n.*              SEE NOTE FOR ADDRREG=                                *.\n.*                                                                   *.\n.*                                                                   *.\n.*  TSFAKE=  -- DEFAULT:  (NONE)                                     *.\n.*              THE ADDRESS OF A WORKAREA IN WHICH A FAKE PARM OR    *.\n.*              CPPL AND CBUF WILL BE BUILT, IF THE PROGRAM HAS      *.\n.*              BEEN CALLED BY THE OPPOSITE MEANS.                   *.\n.*              I.E.  IF ENV=CP IS CODED, AND THE PROGRAM IS CALLED  *.\n.*              VIA \"CALL\", THEN A FAKE CPPL AND CBUF WILL BE BUILT, *.\n.*              BASED ON THE INFO IN THE PARM FIELD.  IF ENV=CALL    *.\n.*              IS CODED (OR DEFAULTED), A FAKE PARM PTR WORD AND    *.\n.*              LENGTH WILL BE BUILT BASED ON THE INFO IN THE CBUF.  *.\n.*              IF TSFAKE=YES IS CODED, AN AREA WILL BE GENERATED    *.\n.*              AND NAMED EITHER IN THE WORK AREA (IF ANY), OR       *.\n.*              INLINE.                                              *.\n.*                                                                   *.\n.*                                                                   *.\n.*  LOAD=    -- DEFAULT:  (NONE)                                     *.\n.*              A LIST OF MODULES TO BE LOADED.  THE ADDRESS OF EACH *.\n.*              MODULE WILL BE SAVED IN A WORD WITH THE NAME OF THE  *.\n.*              MODULE.                                              *.\n.*                                                                   *.\n.*                                                                   *.\n.*  PL=      -- DEFAULT:  (NONE)                                     *.\n.*              A LIST OF PARAMETER LISTS TO BE GENERATED AND        *.\n.*              INITIALIZED.  THE FOLLOWING PARM LISTS ARE           *.\n.*              SUPPORTED:  CSCAN, PARSE, DAIR, IO, MESSAGE.         *.\n.*                                                                   *.\n.*                                                                   *.\n.*  MACRO=   -- DEFAULT:  MACRO=NO                                   *.\n.*              IF 'YES' IS CODED, A 'TSWORK' MACRO WILL BE ISSUED   *.\n.*              TO DEFINE MORE STORAGE IN THE WORK AREA.  (TSWORK    *.\n.*              MACRO IS DEFINED BY THE USER.)                       *.\n.*                                                                   *.\n.*                                                                   *.\n.*  PARSE=   -- DEFAULT:  (NONE)                                     *.\n.*              FORMAT:  PARSE=PCLNAME OR PARSE=(PCLNAME,ERRADDR)    *.\n.*              WILL USE THE TSPARSE MACRO TO PARSE THE COMMAND LINE *.\n.*              (POINTED TO BY CPPLCBUF).  PCLNAME IS THE NAME OF    *.\n.*              THE PCL CSECT.  IF ERRADDR IS GIVEN, GENERATES ERROR *.\n.*              ANALYSIS ROUTINE ROUTINE WITH TSPARERR MACRO.        *.\n.*                                                                   *.\n.*  PRINT=   -- DEFAULT:  (NONE)                                     *.\n.*              PRINT=NOGEN SPECIFIES THAT THE DSECTS SHOULD NOT BE  *.\n.*              PRINTED                                              *.\n.*                                                                   *.\n.*  DATE=    -- DEFAULT:  (DATE OF ASSEMBLY)                         *.\n.*              SPECIFIES ASSEMBLY DATE (SHOULD ONLY BE USED WHEN    *.\n.*              COMPARING AGAINST AN OLD LOAD MODULE)                *.\n.*                                                                   *.\n.*  TIME=    -- DEFAULT:  (TIME OF ASSEMBLY)                         *.\n.*              SPECIFIES ASSEMBLY DATE (SHOULD ONLY BE USED WHEN    *.\n.*                                                                   *.\n.*                                                                   *.\n.*********************************************************************.\n.*\n.*\n.*\n.*  IHB&SYSNDX LETTERS USED:  ABC EF     L    Q S      Z\n.*\n         GBLB  &GDAIRM,&GPARSEM         TO AVOID DUPLICATES\n         GBLB  &GDAIR,&GPARSE           DAIR OR PARSE LOADED\n         LCLC  &BA$E,&$AVE,&Q,&NAME,&RCRC,&LR,&AR,&T$FAKE,&GET1,&GET2\n         LCLC  &PARNAME\n         LCLC  &IHBNX,&BLANK1,&BLANK2\n         LCLC  &R0,&R1,&R2,&R3,&R12,&R13,&R14,&R15\n         LCLA  &L,&X\n         LCLB  &ENVTSO,&ENVCALL,&ENVCP,&ENVPLI,&ENVMVT,&ENVMVS\n         LCLB  &FKCALL,&FKCP,&MVSCVT\n         LCLB  &CSPL,&PARS,&DAIR,&IO,&MSG\n&IHBNX   SETC  'IHB&SYSNDX'\n&BLANK1  SETC  '        '\n&BLANK2  SETC  '        '\n&PARNAME SETC  ''\n         AIF   ('&PRINT' NE 'NOGEN').PRINTOK\n         AIF   ('&PRINT' NE '').PRINTOK\n         MNOTE 4,'WHAT DOES PRINT=&PRINT MEAN???'\n.*\n.*\n.PRINTOK AIF   ('&SYMREG' EQ '').NOSYMRG\n         MNOTE 0,'SYMREG= IS UNSUPPORTED -- USE REGS='\n.NOSYMRG AIF   ('&DSECT' EQ '').NOD$ECT\n         MNOTE 4,'DSECT= IS UNSUPPORTED'\n.NOD$ECT ANOP\n.*\n.*  ENVIRONMENT\n.*\n&X       SETA  0\n.ENVLOOP AIF   (N'&ENV EQ &X).ENVDONE\n&X       SETA  &X+1\n         AIF   ('&ENV(&X)' EQ 'TSO'  ).ENVTSO\n         AIF   ('&ENV(&X)' EQ 'CALL' ).ENVCALL\n         AIF   ('&ENV(&X)' EQ 'CP'   ).ENVCP\n         AIF   ('&ENV(&X)' EQ 'TSOCP').ENVCP\n         AIF   ('&ENV(&X)' EQ 'MVS'  ).ENVMVS\n         AIF   ('&ENV(&X)' EQ 'MVT'  ).ENVMVT\n.**      AIF   ('&ENV(&X)' EQ 'PLI'  ).ENVPLI\n.**      AIF   ('&ENV(&X)' EQ 'PLIX' ).ENVPLI\n         MNOTE 4,'ENV=&ENV(&X) IS INVALID -- IGNORED'\n         AGO   .ENVLOOP\n.ENVTSO  ANOP\n&ENVTSO  SETB  1\n         AGO   .ENVLOOP\n.ENVCALL ANOP\n&ENVCALL SETB  1\n         AGO   .ENVLOOP\n.ENVCP   ANOP\n&ENVCP   SETB  1\n&ENVTSO  SETB  1                        ENV=CP IMPLIES ENV=TSO\n         AGO   .ENVLOOP\n.ENVMVS  ANOP\n&ENVMVS  SETB  1\n         AGO   .ENVLOOP\n.ENVMVT  ANOP\n&ENVMVT  SETB  1\n         AGO   .ENVLOOP\n.ENVPLI  ANOP\n&ENVPLI  SETB  1\n         AIF   ('&BASE' NE '12' AND '&BASE' NE 'R12').ENVLOOP\n         MNOTE 0,'WARNING:  BASE=&BASE IS NOT COMPATIBLE WITH ENV=PLIX'\n         AGO   .ENVLOOP\n.ENVDONE AIF   (NOT &ENVCALL OR NOT &ENVCP).ENVOK1\n        MNOTE 4,'ENV=(CALL,CP) MAY NOT BOTH BE GIVEN.  \"CALL\" IGNORED.'\n&ENVCALL SETB  0                        IGNORE IT\n.ENVOK1  AIF   (NOT &ENVMVT OR NOT &ENVMVS).ENVOK2\n         MNOTE 4,'MAKE UP YOUR MIND:  ENV=MVT OR ENV=MVS, BUT NOT BOTH.$\n                 MVT ASSUMED.'\n&ENVMVS  SETB  0                        IGNORE IT\n.*\n.*  TSFAKE\n.*\n.ENVOK2  AIF   ('&TSFAKE' EQ '').NOFAKE\n&T$FAKE  SETC  '&TSFAKE'\n         AIF   ('&TSFAKE' NE 'YES').FAKENO\n&T$FAKE  SETC  '&IHBNX.F'\n.FAKENO  AIF   ('&PARMREG' NE '').OKFAKE0\n         MNOTE 4,'*** PARMREG= MUST BE GIVEN IF TSFAKE= IS GIVEN.  TSFA$\n               KE=&TSFAKE IGNORED.'\n         AGO   .NOFAKE\n.OKFAKE0 AIF   (NOT &ENVCALL).NOFKCAL\n&FKCALL  SETB  1\n         AGO   .NOFAKE\n.NOFKCAL AIF   (NOT &ENVCP).NOFKCP\n&FKCP    SETB  1\n         AGO   .NOFAKE\n.NOFKCP  MNOTE 0,'WHAT TO FAKE?????'\n.NOFAKE  ANOP\n.*\n.*  SAVE/GETMAIN\n.*\n&$AVE    SETC  '&SAVE'                  INIT DEFAULT\n&GET1    SETC  '&GETMAIN(1)'\n&GET2    SETC  '&GETMAIN(2)'\n         AIF   ('&MACRO' NE 'YES').OKGET2\n         AIF   ('&GET1' NE '').OKGET1\n&GET1    SETC  'TSDSECTL'               SET DEFAULT\n.OKGET1  AIF   ('&GET2' NE '').OKGET2\n&GET2    SETC  'TSDSECT'                SET DEFAULT\n.OKGET2  AIF   ('&GETMAIN' EQ '').KEEPSAV\n         AIF   ('&GETMAIN(1)' NE '').GMOK1\n         AIF   ('&MACRO' EQ 'YES').GMOK1\n         MNOTE 8,'GETMAIN= CODED INCORRECTLY.  MACRO TERMINATED'\n         MEXIT\n.GMOK1   ANOP\n&$AVE    SETC  ''                       NO SAVE AREA\n.KEEPSAV AIF   ('&BASE4' EQ '').NOBASE4\n         AIF   ('&BASE3' NE '').BASE3\n         MNOTE 8,'*** BASE4 IGNORED, INVALID WITHOUT BASE3= ***'\n.NOBASE4 AIF   ('&BASE3' EQ '').OKBASES\n.BASE3   AIF   ('&BASE2' NE '').OKBASES\n         MNOTE 8,'*** BASE3 IGNORED, INVALID WITHOUT BASE2= ***'\n.OKBASES AIF   (('&GETMAIN' EQ '') AND ('&MACRO' NE 'YES')).OK1\n         AIF   ('&SAVE'   EQ '*').OK1\n         AIF   ('&SAVE'    EQ '').OK1\n         MNOTE 12,'*** SAVE= MUTUALLY EXCLUSIVE WITH GETMAIN= AND/OR MA$\n               CRO=YES.  MACRO TERMINATED ***'\n         MEXIT\n.OK1     AIF   ('&NFS' NE '').GOTNAME\n         MNOTE 12,'*** CSECT NAME OMMITTED ***'\n.*\n.*  SECTYPE=\n.*\n.GOTNAME AIF   ('&SECTYPE' NE 'CSECT').NOCSECT\n.DOCSECT ANOP\n&NFS     CSECT                          ENTR -- 09/27/79 -- LDW\n         AGO   .SECDONE\n.NOCSECT AIF   ('&SECTYPE' NE 'DSECT').NODSECT\n&NFS     DSECT                          ENTR -- 09/27/79 -- LDW\n         AGO   .SECDONE\n.NODSECT AIF   ('&SECTYPE' EQ 'NONE').SECNONE\n         AIF   ('&SECTYPE' EQ 'ENTRY').ENTRY\n       MNOTE 8,'*** SECTYPE=&SECTYPE IS INVALID, SECTYPE=CSECT ASSUMED'\n         AGO   .DOCSECT\n.ENTRY   ENTRY &NFS\n.SECNONE ANOP\n*  DEFINE NAME\n&NFS     DC    0D'0'                    ENTR -- 09/27/79 -- LDW\n.*\n.*  REGS=\n.*\n.SECDONE AIF   ('&REGS(1)' EQ '' AND '&REGS(2)' NE '').DOREGS\n         AIF   ('&REGS(1)' EQ 'NO').NOREGS\n         AIF   ('&REGS(2)' NE '').DOREGS\n&Q       SETC  'R'\n         AGO   .CONT1\n.DOREGS  ANOP\n&Q       SETC  '&REGS(2)'\n.CONT1   ANOP                           WAS SPACE 1\n&L       SETA  K'&Q\n***********************************************************************\n*        REGISTER EQUATES                                             *\n         REGEQU  PREFIX=&Q,FR=&F\n         SPACE 1\n.NOREGS  ANOP\n&R0      SETC  '&Q'.'0'\n&R1      SETC  '&Q'.'1'\n&R2      SETC  '&Q'.'2'\n&R3      SETC  '&Q'.'3'\n&R12     SETC  '&Q'.'12'\n&R13     SETC  '&Q'.'13'\n&R14     SETC  '&Q'.'14'\n&R15     SETC  '&Q'.'15'\n&L       SETA  K'&REGS(2)\n.*\n.*  MISC WORKAREA GOODIES\n.*\n         AIF   (&ENVCP AND '&PL' NE '').NOGM2   WILL BE GENERATED LATER\n         AIF   ('&GET2' EQ '').NOGM2\n&GET2    DSECT\n         DS    18F                      SAVE AREA\n         AIF   ('&TSFAKE' NE 'YES' OR &ENVCP).NOFKY1\n&T$FAKE  DS    A,2H,CL100               AREA FOR FAKE PARM FIELD\n.NOFKY1  AIF   (NOT &ENVCP).NO$CPPL\n         AIF   ('&PL' EQ '').NOTSECB\nTSECB    DS    F\n.NOTSECB SPACE 1\n*        TSCPPL\n         TSCPPL\n         SPACE 1\n.*\n.*  LOAD=\n.*\n.NO$CPPL AIF   ('&LOAD' EQ '').NOLOAD1\n&X       SETA  0\n.LOADLP1 ANOP\n&X       SETA  &X+1\n&LOAD(&X) DS   A\n         AIF   (&X LT N'&LOAD).LOADLP1\n.*\n.*  BASE=\n.*\n.NOLOAD1 SPACE 3\n&NFS     CSECT                          RESUME\n.NOGM2   AIF   ('&REGS(1)' EQ 'NO').REGBASE\n         AIF   ('&BASE'(1,&L) EQ '&REGS(2)').REGBASE\n&BA$E    SETC  '&Q&BASE'\n         AGO   .CONT2\n.REGBASE ANOP\n&BA$E    SETC  '&BASE'\n.CONT2   USING *,&R15                   TEMPORARY BASE\n         B     &IHBNX.B                 AROUND GORF\n         DROP  &R15                     DROP TEMP BASE\n         USNGX &NFS,&BA$E\n.*\n.*  ID\n.*\n         AIF   ('&ID(1)' EQ '*').IDSTAR\n         AIF   ('&ID(1)' EQ '' ).IDSTAR\n         AIF   ('&ID' EQ '*NONE*').DONEID\n         ID    &ID(1),&ID(2),DATE=&DATE,TIME=&TIME\n         AGO   .DONEID\n.IDSTAR  ID    &NFS,&ID(2),DATE=&DATE,TIME=&TIME\n.*\n.*  BASE2, BASE3, BASE4\n.*\n.DONEID  AIF   ('&BASE2' EQ '').NOBASE2\n&IHBNX.A DC    A(&NFS+4096)             SECOND BASE REGISTER\n         AIF   ('&BASE3' EQ '').NOBASE2\n&IHBNX.Z DC    A(&NFS+8192)             LET'S NOT GET CARRIED AWAY...\n         AIF   ('&BASE4' EQ '').NOBASE2\n&IHBNX.Q DC    A(&NFS+12288)            BUT THIS IS GETTING REDICULOUS\n.NOBASE2 AIF   (('&$AVE' NE '*') OR ('&GET1' NE '')).NOSVSTR NO INL SA\n.*OBASE2 AIF   ('&$AVE' NE '*').NOSVSTR NO INLINE SAVE AREA\n&IHBNX.S DC    18F'0'                   SAVE AREA\n&$AVE    SETC  '&IHBNX.S'\n.NOSVSTR AIF   ('&TSFAKE' NE 'YES' OR &ENVCP OR '&GET2' NE '').NOFKY2\n&T$FAKE  DC    A(0),2H'0',CL100' '      AREA FOR FAKE PARM FIELD\n.*\n.*  GETMAIN=\n.*\n.NOFKY2  AIF   ('&GET1&GET2' EQ '').NOSPLEN  NO SP & LENGTH\n         AIF   ('&BASE2' NE '').BASE2L\n         DC    0A(0)                    ALIGNMENT\n.BASE2L  ANOP                           DON'T NEED ALIGNMENT\n&IHBNX.L DC    AL1(&SP),AL3(&GET1)      GETMAIN SP AND LENGTH\n.NOSPLEN AIF   ('&EXIT' EQ '').NOEXIT\n.*\n.*  EXIT= AND RC=\n.*\n         SPACE 2\n*=====================================================================*\n&RCRC    SETC  '&RC(1)'\n         AIF   ('&RC' NE '').OKRC1\n&RCRC    SETC  '&R15'\n.OKRC1   AIF   ('&RCLOC' EQ '').OKRC3\n         AIF   ('&RC'    EQ '').OKRC2\n         MNOTE 0,'*** RC= AND RCLOC= MUTUALLY EXCLUSIVE -- RC= IGNORED'\n.OKRC2   ANOP\n&RCRC    SETC  '&RCLOC'\n.OKRC3   ANOP\n&X       SETA  8-K'&RCRC                NUMBER OF BLANKS NEEDED\n         AIF   (&X GT 0).OKRCL\n&BLANK1  SETC  ''\n         AGO   .CHAR8RC\n.OKRCL   ANOP\n&BLANK1  SETC  '&BLANK1'(1,&X)\n.CHAR8RC ANOP\n&X       SETA  8-K'&EXIT(1)             NUMBER OF BLANKS NEEDED\n         AIF   (&X GT 0).OKEXITL\n&BLANK2  SETC  ''\n         AGO   .CHAR8EX\n.OKEXITL ANOP\n&BLANK2  SETC  '&BLANK2'(1,&X)\n.CHAR8EX AIF   ('&RC' EQ '').MREGRC\n         AIF   ('&RC'(1,1) EQ '(').MREGRC\n         MNOTE *,'   BRANCH TO \"&EXIT\" TO EXIT WITH RETURN CODE=&RCRC  X\n                 &BLANK1   &BLANK2    *'\n         AGO   .MRCCONT\n.MREGRC  MNOTE *,'   BRANCH TO \"&EXIT\" TO EXIT WITH RETURN CODE IN &RCR$\n               C &BLANK1   &BLANK2    *'\n.MRCCONT ANOP\n*=====================================================================*\n&NAME    SETC  '&EXIT'\n         AIF   ('&RCRC' NE '0').RCNOT0\n&NAME    XR    &R15,&R15                SET RETURN CODE ZERO\n&NAME    SETC  ''\n         AGO   .HAVERC\n.RCNOT0  AIF   ('&RCLOC' EQ '').NORCLOC RCLOC NOT GIVEN\n         AIF   ('&GET2' EQ '').NORCUSE\n         USING &GET2,&R13               IN CASE RCLOC IS IN DSECT\n.NORCUSE AIF   (T'&RCLOC EQ 'F').RCLOCF\n         AIF   (T'&RCLOC EQ 'H').RCLOCH\n         MNOTE 0,'*** UNKNOWN TYPE FOR RCLOC=&RCLOC -- \"F\" ASSUMED'\n.RCLOCF  ANOP\n&NAME    L     &R15,&RCLOC              LOAD RETURN CODE\n         AGO   .RCCOM1                  GO TO COMMON\n.RCLOCH  ANOP\n&NAME    LH    &R15,&RCLOC              LOAD RETURN CODE\n.RCCOM1  AIF   ('&GET2' EQ '').RCCOM2\n         DROP  &R13                     IN CASE RCLOC IS IN DSECT\n         AGO   .RCCOM2                  GO TO COMMON\n.NORCLOC AIF   ('&RC' EQ '').HAVERC     RC IS IN A REG\n         AIF   ('&RC'(1,1) EQ '(').HAVERC   DITTO\n&NAME    LA    &R15,&RCRC               LOAD RETURN CODE\n.RCCOM2  ANOP                           COMMON POINT\n&NAME    SETC  ''\n.HAVERC  AIF   ('&GET1' EQ '').NOWORK1  NO DSA TO FREE\n&NAME    LR    &R1,&R13                 COPY DSA PTR\n&NAME    SETC  ''\n.NOWORK1 ANOP\n&NAME    L     &R13,4(,&R13)            DECHAIN SAVE AREAS\n&NAME    SETC  ''\n         AIF   ('&RC' EQ '').WORKE\n         AIF   ('&RC'(1,1) NE '(').NOWORKE\n.WORKE   AIF   ('&RCLOC' NE '').NOWORKE STORE R15\n         AIF   ('&GET1' EQ '').RCNOT1   RC=(1) IS OK IF NO DYNAMIC AREA\n         AIF   (('&RCRC' NE '&R1') AND ('&RCRC' NE '1')).RCNOT1\n         MNOTE 4,'YOU TURKEY.  RC=(R1) DOESN''T WORK RIGHT IF YOU HAVE $\n               A DYNAMIC AREA'\n         MNOTE 0,'... I HOPE YOU INSTALLED ZAP...'\n.RCNOT1  ST    &RCRC,16(,&R13)          SET RETURN CODE\n         AGO   .WASRGRC\n.NOWORKE ST    &R15,16(,&R13)           SET RETURN CODE\n.WASRGRC AIF   ('&GET1' EQ '').NOWRKE2  NO DSA TO FREE\n         L     &R0,&IHBNX.L             PICK UP SP AND LENGTH\n*        FREEMAIN  R,A=(1),LV=(0)       FREE THE DSA\n         FREEMAIN  R,A=(1),LV=(0)\n.NOWRKE2 LM    &R14,&R12,12(&R13)       RESTORE CALLERS REGS\n         AIF   ('&T' NE 'T').BR14\n         MVI   12(&R13),X'FF'           FLAG SAVEAREA AS INACTIVE\n.BR14    BR    &R14                     RETURN TO CALLER\n.NOEXIT  SPACE 3\n*=====================================================================*\n*    ENTRY CODE                                                       *\n*=====================================================================*\n&IHBNX.B STM   &R14,&R12,12(&R13)       SAVE CALLER'S REGS\n.*\n.* SET UP BASE REGISTERS\n.*\n         LR    &BA$E,&R15               LOAD BASE REGISTER\n         AIF   ('&BASE2' EQ '').BASEFIN\n         L     &BASE2,&IHBNX.A          LOAD SECOND BASE REGISTER\n         USNGX &NFS+4096,&BASE2\n         AIF   ('&BASE3' EQ '').BASEFIN\n         L     &BASE3,&IHBNX.Z          LOAD BASE3 FOR MLE,BMD,VIC\n         USNGX &NFS+8192,&BASE3\n         AIF   ('&BASE4' EQ '').BASEFIN\n         L     &BASE4,&IHBNX.Q          WHAT'S GOING ON HERE???\n         USNGX &NFS+12288,&BASE4\n.*\n.* GENERATE USINGS, IF GIVEN\n.*\n.BASEFIN AIF   (N'&USING LT 1).NOUSING\n&X       SETA  1\n.USINGLP USNGX &USING(&X),&USING(&X+1)\n&X       SETA  &X+2\n         AIF   (&X LT N'&USING).USINGLP\n.*\n.* FUTZ WITH THE PARM\n.*\n.NOUSING ANOP\n&AR      SETC  '&R14'                   SET DEFAULT FOR LENREG=\n&LR      SETC  '&R15'                   SET DEFAULT FOR ADDRREG=\n         AIF   (('&ADDRREG' EQ '') AND ('&LENREG' EQ '')).NO$AR\n         AIF   (('&ADDRREG' NE '') AND ('&LENREG' NE '')).ARLR\n         MNOTE 8,'ADDRREG= AND LENREG= MUST BOTH BE GIVEN'\n.ARLR    ANOP\n&AR      SETC  '&ADDRREG'\n&LR      SETC  '&LENREG'\n.NO$AR   AIF   ('&PARMREG' EQ '').NOPARMR\n         LR    &PARMREG,&R1             SAVE PARM POINTER\n.NOPARMR AIF   ('&LPARM' EQ '').NOLPARM\n&NAME    L     &LPARM,0(,&R1)           PICK UP PARM POINTER\n&NAME    SETC  ''\n         AIF   (&ENVTSO).NOLPARM\n         AIF   ('&ADDRREG' EQ '').NOLPARM\n         LH    &LR,0(,&LPARM)           GET PARM LENGTH\n         LA    &AR,2(,&LPARM)           POINT PAST LENGTH\n.*\n.* GET A SAVE AREA, EITHER STATIC OR DYNAMIC\n.*\n.NOLPARM AIF   ('&GET1' EQ '').STATIC\n&NAME    L     &R0,&IHBNX.L             PICK UP SP AND LENGTH\n&NAME    SETC  ''\n*        GETMAIN  R,LV=(0)              GET A WORKAREA (DSA)\n         GETMAIN  R,LV=(0)\n.USE1    ST    &R1,8(,&R13)             FORW CHAIN SAVE AREAS\n         ST    &R13,4(,&R1)             BACK CHAIN SAVE AREAS\n         LR    &R13,&R1                 GET NEW SAVE AREA ADDR\n         AIF   ('&GET2' EQ '').CONT3\n         USNGX &GET2,&R13\n         AGO   .CONT3\n.*\n.* CHAIN SAVE AREAS\n.*\n.STATIC  AIF   ('&PARMREG' NE '&R15').NOT15\n&NAME    LA    &R1,&$AVE                GET SAVE AREA ADDR\n&NAME    SETC  ''\n         AGO   .USE1\n.NOT15   LA    &R15,&$AVE               GET SAVE AREA ADDR\n         ST    &R15,8(,&R13)            FORW CHAIN SAVE AREAS\n         ST    &R13,4(,&R15)            BACK CHAIN SAVE AREAS\n         LR    &R13,&R15                GET NEW SAVE AREA ADDR\n.**      SPACE 3\n.CONT3   AIF   ('&RCLOC' EQ '').CONT3B\n         XC    &RCLOC,&RCLOC            INIT RCLOC TO ZERO\n.CONT3B  SPACE 3\n         AIF   (NOT &ENVCP).NMVCPPL\n         MVC   CPPL(CPPLL),0(&PARMREG)  COPY CPPL TO SAFE PLACE\n.NMVCPPL AIF   (&FKCALL OR &FKCP).FAKE$A\n         AIF   ('&ADDRREG' EQ '').LOAD\n         AIF   (&ENVTSO).FAKE$A\n         L     &AR,0(,&PARMREG)         POINT TO PARM (LENGTH)\n         LH    &LR,0(,&AR)              GET PARM LENGTH\n         LA    &AR,2(,&AR)              POINT PAST LENGTH\n         AGO   .INUSE\n.FAKE$A  SPACE 2\n*  DETERMINE WHETHER WE HAVE BEEN CALLED AS A TSO CP OR THRU CALL\n         SPACE 1\n         L     &R1,16                   CVTPTR\n         L     &R1,0(,&R1)              TCBWORDS\n         L     &R1,4(,&R1)              TCB\n*%%      TM    148(&R1),X'80'           IS THIS TSO?    %%%\n*%%      BNO   &IHBNX.C                 NO - SKIP       %%%\n         L     &R1,180(,&R1)            TCB.JSCB\n         L     &R1,264(,&R1)            JSCB.PSCB\n         LA    &R0,0(,&R1)              CLEAR HIGH BYTE\n         L     &R1,8(,&PARMREG)         POSSIBLE PSCB PTR\n         LA    &R1,0(,&R1)              CLEAR HIGH BYTE\n         TM    0(&PARMREG),X'80'        ONLY 1 PARM?\n         BO    &IHBNX.E                 YES - // EXEC OR TSO CALL\n         CR    &R0,&R1                  THIRD PARM -> PSCB?\n         AIF   (('&ADDRREG' NE '') OR (&FKCALL)).SETCPR\n         BE    &IHBNX.C                 YES - WERE CALLED AS A TSO CP\n         AGO   .CONT5                   SKIP AROUND\n.SETCPR  BNE   &IHBNX.E                 NO - NOT TSO CP\n         SPACE 2\n*  HAVE BEEN CALLED AS A CP\n         SPACE 1\n         AIF   ('&ADDRREG' EQ '').NO$AR2\n         L     &R1,0(,&PARMREG)         CBUF PTR\n         LH    &LR,0(,&R1)              LENGTH OF CBUF\n         LH    &AR,2(,&R1)              OFFSET TO FIRST NON-BLANK\n         LA    &LR,0(&LR,&R1)           POINT PAST CBUF\n         LA    &AR,4(&AR,&R1)           POINT TO FIRST NON-BLANK\n         SR    &LR,&AR                  LENGTH OF PARMS\n.NO$AR2  AIF   (&FKCALL).CONT4\n         B     &IHBNX.C                 CONTINUE\n         AGO   .CONT5\n.*\n.CONT4   AIF   (NOT &FKCALL).NOFAKE1\n.*\n.*  FAKE A CALL\n.*\n         STH   &LR,&T$FAKE+4            SET FAKED LENGTH OF PARM\n         LTR   &R1,&LR                  COPY LENGTH\n         AIF   ('&TSFAKE(2)' EQ '').NOMXCK1\n         CH    &R1,&TSFAKE(2)           PARM TOO BIG?\n         BNH   *+8                      NO - OK\n         LH    &R1,&TSFAKE(2)           TOO BIG - USE MAX\n         LTR   &R15,&R15                TEST PARM LENGTH\n.NOMXCK1 BNP   *+16                     SKIP IF NO PARM       >=====+\n         BCTR  &R1,0                    -1 FOR EXECUTE              |\n         EX    &R1,*+4                  MOVE THE PARM TO WORKAREA   |\n         MVC   &T$FAKE+6(0),0(&AR)      << EXECUTED >>              |\n         LA    &R1,&T$FAKE+4            GET FAKE PARM ADDR    <=====+\n         ST    &R1,&T$FAKE              STORE IT\n         LA    &PARMREG,&T$FAKE         GET ADDR OF FAKED PARM\n         MVI   &T$FAKE,X'80'            SET END OF LIST BIT\n         B     &IHBNX.C                 CONTINUE\n         AGO   .CONT5\n.NOFAKE1 AIF   (NOT &FKCP).LOAD\n.CONT5   SPACE 2\n*  HAVE BEEN CALLED FROM BATCH, OR TSO CALL\n         SPACE 1\n&IHBNX.E L     &AR,0(,&PARMREG)         POINT TO PARM LENGTH\n         LH    &LR,0(,&AR)              GET LENGTH OF PARM\n         LA    &AR,2(,&AR)              POINT PAST LENGTH\n         AIF   (NOT &FKCP).NOFAKE2\n*  CPPL=ADDR(CBUF,UPT,PSCB,ECT)\n         LA    &R1,&T$FAKE              GET ADDR OF FAKE CBUF\n         ST    &R1,CPPLCBUF             SET INTO CPPL                +0\n         LR    &R1,&R0                  COPY PSCB ADDR\n         ST    &R0,CPPLPSCB             SET INTO FAKE CPPL           +8\n         MVC   CPPLUPT(4),52(&R1)       MOVE UPT ADDR INTO CPPL      +4\n         L     &R1,48(,&R1)             PSCB.RLGB\n         L     &R1,256(,&R1)            RLGB.ECT\n         ST    &R1,CPPLECT              SET IN CPPL                 +12\n         SPACE 1\n*  CBUF=Y(CBUF_LEN,OFFSET_TO_NONBLANK),C'CMDNAME',C' ',C'OPERANDS'\n         MVC   &T$FAKE+4(8),12(&R1)     MOVE CMD NAME TO CBUF\n         MVI   &T$FAKE+4+8,C' '         PUT IN DELIMETER\n         NI    28(&R1),X'7F'            TURN OFF \"NO OPERANDS\" BIT\n         LTR   &LR,&LR                  ANY OPERANDS?\n         BP    *+8                      YES - SKIP\n         OI    28(&R1),X'80'            SET \"NO OPERANDS\" BIT IN ECT\n         SPACE 1\n         LA    &R1,8+1                  OFFSET TO FIRST NON-BLANK\n         STH   &R1,&T$FAKE+2            SET IN FAKE CBUF\n         LA    &R0,8+1+4(,&LR)          GET LENGTH OF CBUF\n         STH   &R0,&T$FAKE              SET INTO FAKE CBUF\n         AIF   ('&TSFAKE(2)' NE '').MAXCK\n         LTR   &R1,&LR                  ANY OPERANDS?\n         AGO   .NOMXCK2                 CONTINUE\n.MAXCK   LR    &R1,&LR                  COPY PARM LENGTH\n         CH    &R1,&TSFAKE(2)           PARM TOO BIG?\n         BNH   *+8                      NO - OK\n         LH    &R1,&TSFAKE(2)           TOO BIG - USE MAX\n         LTR   &LR,&LR                  ANY OPERANDS?\n.NOMXCK2 BNP   *+16                     NO - SKIP             >=====+\n         BCTR  &R1,0                    -1 FOR EXECUTE              |\n         MVC   &T$FAKE+4+8+1(0),0(&AR)  << EXECUTED >>              |\n         EX    &R1,*-6                  MOVE THE PARM TO FAKE CBUF  |\n         LA    &PARMREG,CPPL            POINT TO CPPL         <=====+\n.NOFAKE2 SPACE 2\n&NAME    SETC  '&IHBNX.C'\n         SPACE 2\n.*\n.*  LOAD=\n.*\n.LOAD    AIF   ('&LOAD' EQ '').NOLOAD\n&X       SETA  1\n.LOAD$LP AIF   ('&LOAD(&X)' EQ '').NOLOAD\n         AIF   (NOT &ENVMVS).YESLOAD\n&NAME    ENTR1I  &LOAD(&X),IKJPTGT,464\n&NAME    ENTR1I  &LOAD(&X),IKJPUTL,444\n&NAME    ENTR1I  &LOAD(&X),IKJGETL,348\n&NAME    ENTR1I  &LOAD(&X),IKJPARS,524\n&NAME    ENTR1I  &LOAD(&X),IKJDAIR,732\n&NAME    ENTR1I  &LOAD(&X),IKJSTCK,472\n&NAME    ENTR1I  &LOAD(&X),IKJSCAN,480\n&NAME    ENTR1I  &LOAD(&X),IKJEHCIR,740\n&NAME    ENTR1I  &LOAD(&X),IKJEHDEF,736\n&NAME    ENTR1I  &LOAD(&X),IKJEFF02,976                            SDM\n.*****  DO ALL OF THESE HAVE THE SAME X'80' = LOADED DEFINITION????\n         AIF   (NOT &MVSCVT).YESLOAD    IT WAS NOT ONE OF THE ABOVE\n&NAME    SETC  ''                       IT WAS\n.YESLOAD MNOTE *,'       LOAD  EPLOC==CL8''&LOAD(&X)'''\n&NAME    LOAD  EPLOC==CL8'&LOAD(&X)'\n&NAME    SETC  ''\n.ADDRSAV ST    &R0,&LOAD(&X)\n.SKIPASV SPACE 1\n         AIF   ('&LOAD(&X)' NE 'IKJDAIR').NO$DAIR\n&GDAIR   SETB  1                        DAIR LOADED\n         AGO   .LOADNXT\n.NO$DAIR AIF   ('&LOAD(&X)' NE 'IKJPARS').NO$PARS\n&GPARSE  SETB  1                        PARSE WAS LOADED\n&PARNAME SETC  'IKJPARS'\n.NO$PARS ANOP\n.LOADNXT ANOP\n&X       SETA  &X+1\n         AGO   .LOAD$LP\n.*\n.*  PL=\n.*\n.NOLOAD  AIF   ('&PL' EQ '').NO$PL$1\n&X       SETA  1\n.PLLOOP  AIF   ('&PL(&X)' NE 'CSCAN').PL2\n&CSPL    SETB  1\n         AGO   .PLNEXT\n.PL2     AIF   ('&PL(&X)' NE 'PARSE').PL3\n&PARS    SETB  1\n         AGO   .PLNEXT\n.PL3     AIF   ('&PL(&X)' NE 'DAIR').PL4\n&DAIR    SETB  1\n         AGO   .PLNEXT\n.PL4     AIF   ('&PL(&X)' NE 'IO').PL5\n&IO      SETB  1\n         AGO   .PLNEXT\n.PL5     AIF   ('&PL(&X)' NE 'MESSAGE').PL6\n&MSG     SETB  1\n         AGO   .PLNEXT\n.PL6     MNOTE 4,'PL=&PL(&X) UNKNOWN -- IGNORED'\n.PLNEXT  ANOP\n&X       SETA  &X+1\n         AIF   (&X LE N'&PL).PLLOOP\n.*\n.*\n.NO$PL$1 AIF   ('&PARSE(2)' EQ '').PLNOTM\n&MSG     SETB  1\n.PLNOTM  AIF   (NOT (&CSPL OR &PARS OR &DAIR OR &IO OR &MSG)).NOSETPL\n&NAME    L     &R1,CPPLUPT              GET UPT PTR\n&NAME    SETC  ''\n         L     &R2,CPPLECT              GET ECT PTR\n         LA    &R3,TSECB                GET ECB PTR\n         SR    &R0,&R0                  GET A 0\n         ST    &R0,TSECB                CLEAR ECB\n.*\n         AIF   (NOT &CSPL).NOSETC\n         SPACE 1\n         STM   &R1,&R3,CSPL             INITIALIZE CSPL (UPT, ECT, ECB)\n         ST    &R0,CSFLG                ZERO CSFLG\n         LA    &R0,CSFLG\n         ST    &R0,CSPLFLG\n         LA    &R0,CSOA\n         ST    &R0,CSPLOA\n.*\n.NOSETC  AIF   (NOT &PARS).NOSETP\n         STM   &R1,&R3,PPL              INITIALIZE PPL (UPT, ECT, ECB)\n         LA    &R0,TSPARANS             PTR TO PARSE ANSWER PLACE\n         ST    &R0,PPLANS\n         ST    &R13,PPLUWA              PARSE USER WORK AREA PTR\n         XC    TSPARANS(4),TSPARANS     AVOID DUPLICATE IKJRLSA\n.*\n.NOSETP  AIF   (NOT &DAIR).NOSETD\n         STM   &R1,&R3,DAPL             INITIALIZE DMPL (UPT, ECT, ECB)\n         MVC   DAPLPSCB(4),CPPLPSCB\n.*\n.NOSETD  AIF   (NOT &IO).NOSETI\n         STM   &R1,&R3,IOPL             INITIALIZE IOPL (UPT, ECT, ECB)\n.*\n.NOSETI  AIF   (NOT &MSG).NOSETM\n         ST    &R3,MPLECB               INIT MPL ECB PTR\n         LA    &R0,CPPL\n         ST    &R0,MPLCPPL\n         LA    &R0,MPLCSECT             PTR TO MSG CSECT\n         ST    &R0,MPLCSECP\n         XC    MPLSW(MPLZL),MPLSW       INITIALIZE REMAINING MPL TO 0\n.NOSETM  ANOP\n.NOSETPL AIF   ('&PARSE(1)' EQ '').NOPARSE\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  PARSE THE COMMAND LINE                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         MNOTE *,'       TSPARSE CBUF=(CPPLCBUF,I),PCL=(=V(&PARSE(1)),I$\n               ),'\n         MNOTE *,'               SYNAD=&PARSE(2),ENTRY=&PARNAME'\n         TSPARSE  CBUF=(CPPLCBUF,I),PCL=(=V(&PARSE(1)),I),             $\n               SYNAD=&PARSE(2),ENTRY=&PARNAME\n&NAME    SETC  ''\n         SPACE 5\n         AIF   ('&PARSE(2)' EQ '').NOPARSE   NO ERROR ANALYSIS ROUTINE\n&NAME    SETC  '&IHBNX.P'\n         SPACE 2\n         B     &NAME                    SKIP AROUND PARSE ERR ANALYSIS\n         SPACE 6\n***********************************************************************\n*                                                                     *\n*  PARSE ERROR ANALYSIS SUBROUTINE                                    *\n*                                                                     *\n***********************************************************************\n         TSPARERR\n         SPACE 6\n.NOPARSE AIF   ('&NAME' EQ '').NONAME\n&NAME    DS    0H\n.NONAME  ANOP\n.INUSE   INUSE\n         SPACE 2\n         AIF   ('&PL' EQ '').MEND\n         AIF   ('&GET2' NE '').PLOK2\n         MNOTE 8,'*** PL= INVALID WITHOUT SECOND OPERAND OF GETMAIN='\n         MEXIT\n.PLOK2   EJECT\n&GET2    DSECT\n         DS    18F                      SAVE AREA\nTSECB    DS    F                        ECB FOR TSO SERVICES\n         SPACE 2\n*        TSCPPL\n         TSCPPL\n         AIF   ('&TSFAKE' NE 'YES').NOFAKED\n         SPACE 1\n&T$FAKE  DS    2H,CL256                 AREA FOR FAKE CBUF\n         AIF   ('&PRINT' NE 'NOGEN').NOFAKED\n         PRINT NOGEN                    SUPPRESS THE DSECTS\n.NOFAKED AIF   (NOT &CSPL).NOTCSPL\n         SPACE 2\n         MNOTE *,'       TSCSPL'\n         TSCSPL\n.NOTCSPL AIF   (NOT &PARS).NOTPARS\n         SPACE 2\n         MNOTE *,'       TSPPL'\n         TSPPL\n.NOTPARS AIF   (NOT &DAIR).NOTDAIR\n         SPACE 2\n         MNOTE *,'       TSDAPL'\n         TSDAPL\n         SPACE 1\nDAPBAREA DS    22F                      AREA FOR DAIR PARAMETER BLOCK\n         SPACE 2\n         MNOTE *,'       TSDMPL'\n         TSDMPL\n.NOTDAIR AIF   (NOT &IO).NOTIO\n         SPACE 2\n         MNOTE *,'       TSIOPL'\n         TSIOPL\n.NOTIO   AIF   (NOT &MSG).NOTMSG\n         SPACE 2\n         MNOTE *,'       TSMPL'\n         TSMPL\n.NOTMSG  AIF   ('&PRINT' NE 'NOGEN').NOTMSGX\n         PRINT GEN\n.NOTMSGX AIF   ('&LOAD' EQ '').NOLOAD2\n         SPACE 2\n&X       SETA  1\n.NXTLOAD AIF   (&X GT N'&LOAD).NOLOAD2\n&LOAD(&X) DS   A\n&X       SETA  &X+1\n         AGO   .NXTLOAD\n.NOLOAD2 SPACE 2\n         AIF   ('&MACRO' NE 'YES').NOMACRO\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  DYNAMIC STORAGE DEFINED BY USER TSWORK MACRO                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         TSWORK\n         SPACE 2\n&GET1    EQU   *-&GET2                  LNTH OF DYNAMIC AREA TO GETMAIN\n         SPACE 2\n.NOMACRO AIF   (NOT &DAIR).NODAPBS\n         AIF   (&GDAIRM).NODAPBS\n&GDAIRM  SETB  1\n         AIF   ('&PRINT' NE 'NOGEN').GEN4\n         PRINT NOGEN                    SAVE SOME PAPER\n.GEN4    EJECT\n         MNOTE *,'       IKJDAP08'\n         IKJDAP08\nDAPB08L  EQU   *-DAPB08\n         SPACE 5\n         MNOTE *,'       IKJDAP18'\n         IKJDAP18\nDAPB18L  EQU   *-DAPB18\n         SPACE 5\n         MNOTE *,'       IKJDAP1C'\n         IKJDAP1C\nDAPB1CL  EQU   *-DAPB1C\n         SPACE 5\n         MNOTE *,'       IKJDAP30'\n         IKJDAP30\nDAPB30L  EQU   *-DAPB30\n         AIF   ('&PRINT' NE 'NOGEN').NODAPBS\n         PRINT GEN                      RESTORE\n         SPACE 10\n.NODAPBS ANOP\n&NFS     CSECT\n         SPACE 3\n.MEND    MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     PRTLN &A,&I\n         LCLC  &LQ\n         LCLA  &L\n&LQ      SETC  'L'''                    TO FOOL THE ASSEMBLER\n         AIF   ('&A'(1,1) NE '''').NOTQ NOT QUOTED STRING\n&L       SETA  K'&A-2                   SET LENGTH OF IT\n&NFS     MVC   OUTBUFF(&L),=C&A\n         AGO   .BAL\n.NOTQ    AIF   ('&A' EQ 'OUTBUFF').OUTBUFF\n         AIF   ('&I' EQ 'I').I\n&NFS     MVC   OUTBUFF(&LQ&A),&A\n.BAL     BAL   R14,PRTLN\n         AGO   .MEND\n.I       ANOP\n&NFS     L     R15,=A(&A)\n         MVC   OUTBUFF(&LQ&A),0(R15)\n         AGO   .BAL\n.OUTBUFF ANOP\n&NFS     BAL   R14,PRTLN\n.MEND    SPACE 1\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     PRTLN2  &DUMMY\n&NFS     BAL   R14,PRTLN2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     TAPIO &CCW,&DUMMY,&TM=UNEXTPMK\n         AIF   ('&DUMMY' EQ '').OK\n         MNOTE 4,'** TOO MANY POSITIONAL OPERANDS -- IGNORED **'\n.OK      ANOP\n&NFS     LA    R0,&CCW\n         BAL   LKR,TAPIO\n         B     &TM                      TAPEMARK FOUND\n         SPACE 1\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     NEWPAGE  &C,&F\n         AIF   ('&C' EQ '').JUSTBAL\n         AIF   ('&C' EQ '(R0)').R0\n&NFS     LA    R0,&C\n.R0      BAL   LKR,NEWPAGE&F\n         MEXIT\n.JUSTBAL ANOP\n&NFS     BAL   LKR,NEWPAGE&F+4\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     IFP2  &L,&B\n&NFS     TM    TFLAG2,T2@PRT2\n         AIF   ('&L'(1,1) EQ 'N').NO\n         BO    &B\n         MEXIT\n.NO      BNO   &B\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     ICALL &RTN,&REG,&R1=,&R15=\n         LCLC  &NAME\n&NAME    SETC  '&NFS'\n         AIF   ('&R1' EQ '').A\n&NAME    LA    R1,&R1\n&NAME    SETC  ''\n.A       AIF   ('&R15' EQ '').B\n&NAME    LA    R15,&R15\n&NAME    SETC  ''\n.B       ANOP\n&NAME    BAL   &REG,&RTN\n         SPACE 1\n         MEND\n         EJECT\n         GBLA  &LINEPPG                                       11/88 SBG\n&LINEPPG SETA  60                                             11/88 SBG\nTAPEMAP  ENTR  LPARM=R2,GETMAIN=(WORKLEN,WORKD),                       $\n               EXIT=LEAVE,RC=0,BASE2=R11,BASE3=R7\n         L     R15,=A(LITMOVES)     POINT TO LITERALS TO LOAD 12/88 SBG\n         MVC   EMPTYLIT(256),0(R15)     MOVE THEM TO WORKAREA 12/88 SBG\n         MVC   EMPTYLIT+256(256),256(R15)                     10/90 SBG\n         MVC   EMPTYLIT+512(LITMVLEN-512),512(R15)            10/90 SBG\n         MVI   BLANKS,C' '\n         MVC   BLANKS+1(L'BLANKS+L'OUTBUFF),BLANKS  GET OUTBUFF ALSO\n         MVC   OUTCLR2(L'OUTBUFF2+2),OUTCLEAR  GET CC FOR \"DASHES\" ALSO\n         MVC   DASHES(2),=C' -'    PRIME                      06/84 DBC\n         MVC   DASHES+2(L'DASHES-2),DASHES+1\n         MVC   PARM#MSG+1(L'PARM#MSG-1),PARM#MSG\n         XC    JFCB(176),JFCB\n         LA    R0,JFCB\n         ST    R0,EXLST\n         MVI   EXLST,X'87'\n         LA    R0,TAPEBUFF              GET ADDR OF DATA BUFFER\n         ST    R0,TCCW#DAT              SET INTO CCW\n         MVI   TCCW#DAT,RD              RESTORE THE OPCODE\n         LA    R1,FL1LABI               GET LABEL BUFFER ADDR\n         ST    R1,TCCW#LBL              SET IN CCW\n         MVI   TCCW#LBL,RD              RESTORE OPCODE\n         LA    R0,FL2LABI               GET LABEL BUFFER ADDR\n         ST    R0,TCCW#LBL+8            SET IN CCW\n         MVI   TCCW#LBL+8,RD            RESTORE OPCODE\n         LA    R1,MV#BUFF2              GET 2ND BUFFER ADDR\n         ST    R1,MV#ABUF2              SAVE\n         LA    R0,OUTBUFF2+110          GET ADDR OF END OF OUTBUFF2\n         ST    R0,OB2END                SAVE FOR FUTURE REFERENCE\n         LA    R0,OUTBUFF2+110+10       FOR UPDTE STUFF\n         ST    R0,OB2END2\n         SPACE 2\n         OPEN  MF=(E,OPENMFL)           OPEN PRINT FILE\n         L     R1,OPENMFL               GET SYSPRINT DCB ADDR\n         TM    48(R1),X'10'             OPEN?\n         BO    PRINTOK                  YES\n         LA    R1,100                   GET ABEND CODE\n         SVC   13                       AND LEAVE\n         SPACE 2\nPRINTOK  LH    R15,0(,R2)               GET PARM LEN\n         LTR   R15,R15                  ANY?\n         BNP   DONEPARM                 NO\n         LA    R14,2(,R2)               SET ADDR OF FIRST ITEM\n         LR    R0,R14                   SAVE IT\n         MVC   PARM#MSG(8),=C' PARM='' '\n         MVC   PARM#MSG+8(L'PARM#MSG-8),PARM#MSG+7   BLANK THE REST\n         CH    R15,=H'21'               PARM TOO LONG FOR \"TITLE2\"?\n         BNH   *+8                      NO - SKIP\n         OI    TFLAG2,T2@LPARM          YES - SET FLAG\n         EX    R15,MVCPARM              SAVE PARM IN OUTBUFF2\n         LA    R1,PARM#MSG+7(R15)       GET ADDR OF END+1\n         MVI   0(R1),C''''              PUT IN ENDING QUOTE\n         OI    TFLAG1,T1@PARM           SET \"HAVE PARM\" FLAG\n         SPACE 2\nNEXTPARM LM    R1,R3,=A(PARMTAB,12,PARMLAST)\nTESTPARM LH    R4,0(,R1)                GET LENGTH OF ITEM\n         EX    R4,CLCPARM               THIS IT?\n         BNE   INCRPARM                 NO - TRY NEXT\n         OC    PARMFLAG,11(R1)          TURN ON BITS\n         LA    R14,2(R14,R4)            INCR SCAN PTR\n         SR    R15,R4                   DECR LENGTH LEFT\n         SH    R15,=H'2'\n         BP    NEXTPARM                 LOOP IF ANY MORE\n         B     DONEPARM                 DONE...\n         SPACE 2\nNULLPARM SH    R15,=H'5'                DECR LENGTH LEFT            U14\n         BNP   DONEPARM                 NOTHING LEFT                U14\n         LA    R14,5(,R14)              POINT TO OPERAND            U14\n         SR    R1,R1                    CLEAR ACCUMULATOR           U14\n         SPACE 1\nNULLLOOP CLI   0(R14),C'0'              DIGIT?                      U14\n         BL    HAVENULL                 NO - HAVE COMPLETE NUMBER   U14\n         IC    R0,0(,R14)               GET A DIGIT                 U14\n         N     R0,F15                   STRIP IT                    U14\n         MH    R1,=H'10'                SHIFT PREVIOUS              U14\n         AR    R1,R0                    ADD NEW                     U14\n         LA    R14,1(,R14)              BUMP SCAN PTR               U14\n         BCT   R15,NULLLOOP             CONTINUE FOR LENGTH OF PARM U14\n         SPACE 2\nHAVENULL LTR   R1,R1                    ANYTHING GIVEN?             U14\n         BNP   *+8                      YES - USE IT                U14\n         STH   R1,NULLNUMB              SET NUMBER                  U14\n         LA    R14,1(,R14)              BUMP SCAN PTR               U14\n         SH    R15,H1                   DECR LENGTH LEFT            U14\n         BP    NEXTPARM                 CONTINUE IF MORE            U14\n         B     DONEPARM                 NONE LEFT                   U14\n         SPACE 2\nINCRPARM BXLE  R1,R2,TESTPARM           KEEP LOOKING\n*  DIDN'T FIND IT IN TABLE\n         CLC   =C'NULL=',0(R14)         SPECIAL KIND?               U14\n         BE    NULLPARM                 YES - PROCESS IT            U14\n*  INVALID PARM ITEM\n         SR    R14,R0                   COMPUTE OFFSET INTO PARM\n         LA    R14,1(,R14)              FIX IT\n         CVD   R14,DWD                  CONVERT TO PACKED\n         UNPK  PARMERR+28(3),DWD+6(2)   PUT INTO MSG\n         OI    PARMERR+30,C'0'          FIX SIGN\n         OI    TFLAG1,T1@PERR           SET \"PARM ERROR\" FLAG\n         SPACE 3\nDONEPARM LA    LCTR,&LINEPPG            INIT LINECOUNTER      11/88 SBG\n         PUSH  PRINT\n         PRINT GEN\n         SPACE 2\n         TODAY TTL1DATE,PUNCT=NO,WEEKDAY=TTL1DAY,TIME=TTL1TIME,        $\n               F15=F15                                              U14\n         POP   PRINT\n         SPACE 2\n         L     R1,16                    -> CVT\n         L     R1,0(,R1)                -> TCBWORDS\n         L     R1,4(,R1)                -> TCB\n         L     R1,12(,R1)               -> TIOT\n         LA    R1,24(,R1)               -> DD SECTION\n         ST    R1,DD#PTR                SAVE PTR\n         SPACE 1\n         TM    PARMFLAG,PF@INLIN+PF@NATTR PARM=INLINE OR NOATTR?\n         BNZ   OK$PRT2                  YES - SKIP SECOND PRINT FILE\n         L     R2,OPENMFL2              GET SYSPRNT2 DCB ADDR\n         ICALL TIOTSCAN,LKR,R15=40(,R2) SEE IF WE HAVE IT\n         B     OK$PRT2                  NOPE\n         SPACE 1\n         OPEN  MF=(E,OPENMFL2)          OPEN SECOND PRINT FILE\n         OI    TFLAG2,T2@PRT2           ASSUME IT WORKS.\n         TM    48(R2),X'10'             DID IT OPEN?\n         BO    OK$PRT2                  YES\n         SPACE 2\nABEND99  LA    R1,99                    GET ABEND CODE\n         SVC   13                       BYE\n         SPACE 2\nOK$PRT2  L     R2,OPENMFLI              GET SYSIN DCB ADDR\n         ICALL TIOTSCAN,LKR,R15=40(,R2) SEE IF IT'S THERE\n         B     RDJFCB                   NOPE\n         MVC   RET#ADDR,=A(READCARD)    SET RETURN ADDR\n         SPACE 2\n         OPEN  MF=(E,OPENMFLI)          OPEN INPUT FILE\n         TM    48(R2),X'10'             OPEN?\n         BZ    ABEND99                  NO.  (THIS SHOULD NEVER HAPPEN)\n         MVI   OPENMFL,0                SET TO CLOSE BOTH FILES\n         SPACE 2\nREADCARD L     R1,OPENMFLI              GET SYSIN DCB ADDR\n         GET   (1),INBUFF\n         OI    TFLAG1,T1@DATA           SET FLAG\n         CLC   =C'./DDNAME',INBUFF      IS IT THIS?\n         BE    INDDNAME                 YES - PROCESS\n         CLC   =C'./VOLUME',INBUFF      IS IT THIS?\n         BNE   *+10                     NO - MUST BE VOL NAME\n         MVC   INBUFF(6),INBUFF+9       MOVE OVER\n         MVI   JFCB+117,1               # OF VOL SER #'S\n         MVC   JFCB+118(6),INBUFF       VOL SER #\n         MVI   JFCB+52,X'40'            VOLUME SERIAL LIST CHANGED\n         B     TAPEINDX                 SKIP THE RDJFCB, GO TO SUBROUTN\n         SPACE 2\nINDDNAME L     R1,TAPEMFL               GET ADDR OF TAPEDCB         U14\n         MVC   40(8,R1),INBUFF+9        MOVE DDNAME INTO DCB        U15\n         SPACE 2\nRDJFCB   RDJFCB  MF=(E,TAPEMFL)\n         B     TAPEINDX                 GO TO SUBROUTINE\n         SPACE 3\nEOD2     CLOSE MF=(E,OPENMFL)\n         IFP2  N,LEAVE                  SKIP IF NOT OPEN\n         CLOSE MF=(E,OPENMFL2)\n         B     LEAVE                    RETURN\n         SPACE 2\nEOD      TM    TFLAG1,T1@DATA           DATA READ IN?\n         BO    EOD2                     YES.\n         MVC   RET#ADDR,=A(EOD2)        SET NEW RETURN ADDR\n         B     RDJFCB\n         SPACE 2\nMVCPARM  MVC   PARM#MSG+7(0),0(R14)     << EXECUTED >>\nCLCPARM  CLC   2(0,R1),0(R14)           << EXECUTED >>\n         SPACE 2\n******** PRINT GEN\n         EJECT\n***********************************************************************\n*                                                                     *\n* T A P E I N D X                                                     *\n*                                                                     *\n*    A ROUTINE WHICH READS IN THE VOLUME NAME & ALL THE DATA SET NAMES*\n*        (FROM THE TRAILER LABELS) OF A TAPE (WITH STANDARD LABELS)   *\n*        AND FORMATS AND PRINTS THE INFORMATION FROM THE LABELS.      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nTAPEINDX SR    LCTR2,LCTR2              INIT SECOND LINE COUNTER\n         STH   LCTR2,NUMBNULL           INIT COUNT OF NULL FILES    U14\n         OI    TFLAG1,T1@PAGE1+T1@ANLZ  1ST PAGE/THIS VOL + ANLZ LABEL\n         SPACE 1\n* OPEN TAPE VOLUME FOR LABEL=BLP\n         MVC   JFCB+44(8),BLANKS        BLANK OUT ELEM NAME\n         MVC   JFCB+68(2),=H'1'         FILE SEQ #                 WBF\n         MVC   JFCB+70(2),=H'1'         VOL SEQ #\n         MVC   JFCB+83(3),=X'620000'    SET EXPDT=98000 FOR UCC-1  WBF\n         MVI   JFCB+98,X'40'            DSORG=PS\n         MVI   JFCB+100,X'90'           RECFM=FB\n         MVC   TITLE1+5(6),JFCB+118     INIT IN CASE NOT SL\n         SPACE 1\n         OPEN  MF=(E,TAPEMFL),TYPE=J\n         TM    TAPEDCB+DCBOFLGS-IHADCB,DCBOFOPN   FILE OPEN ?       THO\n         BO    TPOPENOK                 YES.                        THO\n         NEWPAGE ,                      PRINT THE HEADER\n         PRTLN '-*** TAPE VOLUME COULD NOT BE OPENED ***'\n         B     RETURN\n         SPACE 3\nTPOPENOK NI    TAPEDCB+DCBMACF1-IHADCB,X'F7'  BLK COUNT INACCURATE  THO\n         XC    LEN#TAPE(4*2),LEN#TAPE   CLEAR SL & NL LENGTHS\n         NI    TFLAG1,255-T1@BADEN-T1@SL RESET FLAGS\n         MVI   WHERE,0                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#RWD,TM=*+4     INSURE PROPER POSITION     09/84 DBC\n         XC    FILE#SEQ,FILE#SEQ   CLEAR PHYSICAL FILE#       07/85 DBC\n         TAPIO TCCW#DAT,TM=LEADTPMK     READ IN VOLUME LABEL\n         MVC   VOLLABI(80),TAPEBUFF     SAVE VOLUME LABEL\n         SPACE 1\nDO$SENSE L     R2,LASTSIZE         PRESERVE LENGTH OVER SENSE 09/84 DBC\n         TAPIO TCCW#SNS                 READ SENSE DATA\n         L     R1,TAPEDCB+DCBDEBAD-IHADCB   LOAD ADDRESS OF DEB     THO\n         AIF   ('&SP4' EQ 'YES').NEWDEB                             SBG\n         L     R1,DEBSUCBA-DEBBASIC(,R1)    LOAD ADDRESS OF UCB     THO\n         AGO   .OLDDEB                                              SBG\n.NEWDEB  ANOP                                                       SBG\n         L     R1,DEBUCBAD-DEBNMSUB(,R1)    LOAD ADDRESS OF UCB     SBG\n.OLDDEB  ANOP                                                       SBG\n         CLC   UTY3420C(4),UCBTYP-UCB(R1)        3480 COMPAT MODE? \u00acSBG\n         BE    IS3480                   YEP. TREAT AS 3480.        \u00acSBG\n         CLI   UCBTBYT4-UCB(R1),UCB3480     THIS A 3480 TAPE DRIVE ?THO\n         BNE   IS3420                   NO, THEN A 3420 DRIVE       THO\nIS3480   LA    R1,C'5'                  THEN INDICATE SO     \u00acSBG - THO\n         MVC   TITLE1+34(4),=C'CART'    THEN INDICATE CARTRIDGE     THO\n         NI    PARMFLAG,255-PF@DEN1     TURN OFF                    THO\n         B     TRUE$GOT                                             THO\nIS3420   LA    R1,C'3'                  ASSUME 1600 BPI             THO\n         TM    SENSDATA+3,B'00000100'   PE MODE?\n         BO    TRUE$GOT                 YES\n         LA    R1,C'4'                  ASSUME 6250 BPI\n         TM    SENSDATA+9,B'00001000'   CAPABLE OF 6250 BPI?\n         BO    TRUE$GOT                 YES\n         LA    R1,C'2'                  ELSE, 800 BPI\n         SPACE 2\nTRUE$GOT LR    R0,R1                    COPY DENSITY CHAR\n         N     R1,F15                   STRIP IT\n         SLL   R1,2                     *4\n         LA    R1,DEN#LIST(R1)          POINT TO 4 CHAR FORM\n         ST    R1,TRUE#DEN              SAVE ADDR\n         STC   R0,TRUE#DEN              SAVE 1 CHAR FORM\n         SPACE 2\n         CLI   NUMBNULL+1,0             HOW MANY NULL SKIPPED?      U14\n         BNE   NULL1ST                  MORE THAN ZERO.             U14\n         CLC   VOLLABI(4),=C'VOL1VOL1'  VOLUME LABEL?\n         BE    TPVOL1OK                 YES.\n         SPACE 3\n         MVC   VOLSERNO(6),JFCB+118     SET HERE FOR OVERPRINTING   U15\n         NEWPAGE ,                      PRINT THE HEADER LINES\n         PRTLN '0++++ NO VOL1 LABEL FOUND.  NL ANALYSIS FOLLOWS ++++'\n         BCTR  LCTR,0                   ACCOUNT FOR EXTRA BLANK LINE\n         PRTLN OUTBUFF                  BLANK LINE\n         SPACE 1\nNULL1ST  MVC   FL1ID,BLANKS             SET THE DSN                 U14\n         SPACE 3\nNL$NEXT  ST    R2,LASTSIZE         RESTORE SIZE OF FIRST BLOC 09/84 DBC\n         ST    R2,BYTECNT          INIT TOTAL BYTES READ      09/84 DBC\n         ST    R2,MAXBLKSI         INIT BIGGEST BLOCK READ    09/84 DBC\n         MVC   BLOCKCNT,F1              INIT # OF BLOCKS READ\n         MVI   NLFLAGS,NL@F             INIT NL TYPE FLAGS\n         CH    R2,TAPEBUFF              IS FIRST BLOCK RECFM=V?\n         BNE   *+8                      NO - SKIP\n         OI    NLFLAGS,NL@V             YES - SET FLAG\n         MVI   WHERE,3                  SET \"WHERE ARE WE\" FLAG\n         MVC   UNLOADER,UNLOADER-1      CLEAR INDICATOR\n         LH    R1,FILE#SEQ              GET FILE NUMBER\n         LA    R1,1(,R1)           ADJ TO IDENTIFY THE NUMBER 07/85 DBC\n*                                  OF THE FILE CURRENTLY      07/85 DBC\n*                                  BEING SCANNED              07/85 DBC\n         CVD   R1,DWD                   -> PACKED\n         UNPK  DWD(5),DWD+5(3)          -> EBCDIC\n         OI    DWD+4,C'0'               FIX SIGN\n         MVC   FL1FILSQ,DWD+1           PUT INTO \"LABEL\"\n         SPACE 1\n*  NOW SEE IF THIS FILE IS ANYTHING SPECIAL THAT WE KNOW ABOUT.\n***      CLC   =H'800',LASTSIZE         RIGHT SIZE?\n***      BNE   NL$NMOVE                 NOT IEHMOVE\n         BAL   LKR,TEST$MV              IS IT IEHMOVE?\n         B     NL$NMOVE                 NO\n         B     IEHMOVE2                 YES - 2 PRINT FILE FORMAT\n         B     IEHMOVE1                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nNL$NMOVE CLC   TAPEBUFF(8),=H'60,0,56,0' RECFM=V,BLK=60,REC=56?\n         BE    NLTSTCPY             YES-IT'S THE OLD IEBCOPY FORMAT+SBG\n         CLC   TAPEBUFF(8),=H'64,0,60,0' IS IT IEBCOPY NEW FORMAT? +SBG\n         BNE   NL$NCOPY                 NO - NOT IEBCOPY\nNLTSTCPY BAL   LKR,TEST$CPY             IS IT VS2COPY?             +SBG\n         B     NL$NCOPY                 NO\n         B     IEBCOPY2                 YES - 2 PRINT FILE FORMAT\n         B     IEBCOPY1                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nNL$NCOPY BAL   LKR,TEST$DMP             IS IT IEHDASDR?\n         B     NL$NDSDR                 NO\n         NOP   0                        YES - BUT DON'T USE 2ND     WBF\n*                                             PRINT FILE            WBF\n         B     IHDASDR1\n         SPACE 2\n******************************************************************* SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  WHEN READING PTF TAPES WHICH HAVE APARS FIRST, AND               SBG\n*   THE APARS HAVE IEBUPDTE CONTROL CARDS IN THEM FOR SOURCE UPDATE,SBG\n*   WE WANT TAPEMAP TO THINK THAT THE TAPE HAS PTFS OR APARS,       SBG\n*   NOT IEBUPDTE CONTROL STATEMENTS, WHICH ARE SECONDARY            SBG\n*   TO THE FACT THAT WE HAVE AN APAR TAPE.                          SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n******************************************************************* SBG\n*  NOTE THAT WE DON'T WANT TO TEST FOR SMPPTFIN ON A CBT TAPE.12/88 SBG\n******************************************************************* SBG\nNL$NDSDR DS    0H                                             11/88 SBG\n         BAL   LKR,TEST$CBT             IS IT CBT973 COMPRESS 11/88 SBG\n         B     NL$NCBT                  NO                    11/88 SBG\n         B     CBT2                     YES - 2 PRINT FILE FMT11/88 SBG\n         B     CBT1                     YES - 1 PRINT FILE FMT11/88 SBG\n         SPACE 3                                              11/88 SBG\nNL$NCBT  DS    0H                       LABEL FOR NOT DASDR         SBG\n         SPACE 3                                              07/85 DBC\n         BAL   LKR,TEST$PTF        DOES FILE CONTAIN PTFS?    07/85 DBC\n         B     NL$NPTFS            +0 NO, SKIP                06/86 SBG\n         B     PTFS2               +4 YES, GO DUMP IT         07/85 DBC\n         B     PTFS1               +8 YES, JUST SAY SO        07/85 DBC\n*       NEXT 5 LINES ARE SWITCHED WITH PREV 6 LINES & NAMES CHANGED SBG\nNL$NPTFS DS    0H                                             06/86 SBG\n         BAL   LKR,TEST$UPS             MAYBE IEBUPDTE INPUT STREAM?\n         B     NL$NUPDT                 BOY WILL THIS BE UNRELIABLE SBG\n         B     IEBUPDT2                 YES - 2 PRINT FILE FORMAT\n         B     IEBUPDT1            +8 YES & 1-PRT: HANDLE     07/85 DBC\nNL$NUPDT DS    0H                                             06/86 SBG\n         BAL   LKR,TEST$FDR             IS IT FDR?            07/85 DBC\n         B     NL$NFDR                  NO\n         B     FDR2                     YES - 2 PRINT FILE FORMAT   WBF\n         B     FDR1                     YES,- 1 PRINT FILE FORMAT   WBF\n         SPACE 2\nNL$NFDR  BAL   LKR,TEST$IS              IS IT IEBISAM?        11/88 SBG\n         B     NL$NCDOC                 DIDN'T THINK SO...\n         B     IEBISAM2                 YES - 2 PRINT FILE FORMAT\n         B     IEBISAM1                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$NCDOC BAL   LKR,TEST$CH              IS IT CBT DOC FILE?   12/88 SBG\n         B     NL$NIS                   NUH UH.               12/88 SBG\n         B     NL$LOOP                  YES - DISPLAY EXTRCT'D12/88 SBG\n         B     CBTDOC1                   DATA ON REPORT #1    12/88 SBG\n         SPACE 3                                              12/88 SBG\nNL$NIS   BAL   LKR,TEST$SLK             IS IT A SLICK BACKUP?\n         B     NL$NSLK                  DIDN'T THINK SO...\n         B     SLK2                     YES - 2 PRINT FILE FORMAT\n         B     SLK1                     YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$NSLK  BAL   LKR,TEST$MAP             IS IT A TAPEMAP PRINT FILE?\n         B     NL$LOOP                  NO\n         B     MAP2                     YES - 2 PRINT FILE FORMAT\n****     B     NL$LOOP                  YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNL$LOOP  TAPIO TCCW#DAT,TM=NL$EOF       READ A BLOCK\n         B     NL$LOOP                  DO THAT TILL EOF\n         SPACE 2\nNL$EOF   CLI   UNLOADER,C' '            A SECOND LINE?\n         BE    *+12                     NO - SKIP\n         NEWPAGE  2                     MAKE SURE WE HAVE ENOUGH\n         SPACE 1\nNL$SL    DS    0H                                             07/85 DBC\n         LH    R1,FILE#SEQ              GET THE FILE SEQ #\n         CVD   R1,DWD                   PACK IT\n         MVC   #FILE-2(6),=X'402020202120'                    09/84 DBC\n         ED    #FILE-2(6),DWD+5\n         SPACE 1                                              09/84 DBC\n         MVC   #UNLOAD,UNLOADER\n************************************************************* 12/88 SBG\n*  IF THIS IS A CBT HEADER, PUT THE DISPLAY INFO INTO       * 12/88 SBG\n*    THE DSNAME SLOT.  VER XXX  MM-DD-YY.                   * 12/88 SBG\n************************************************************* 12/88 SBG\n         SPACE 1                                              12/88 SBG\n         CLC   UNLOADER(8),CBHEADER     WAS IT CBTHEADER?     12/88 SBG\n         BNE   NL$CBHD                  NO. NORMAL PROCESSING 12/88 SBG\n         MVC   #DSN(17),CBHLIT     DISPLAY CBT DOC INFO       12/88 SBG\n         MVC   #DSN+4(4),CBTVERS   PUT IN VERSION NUMBER      12/88 SBG\n         MVC   #DSN+9(8),CBTDATE   PUT IN RELEASE DATE        12/88 SBG\nNL$CBHD  DS    0H                                             12/88 SBG\n         SPACE 3\n         CLC   =C'(NULL)',UNLOADER+2 SL NULL FILE?            07/85 DBC\n         BE    NLSLDONE                 YES - CAN'T DO ANYTHING\n         SPACE 1\n         MVC   #INFOSRC,=C' SCAN ' IDENTIFY INFO SOURCE       06/84 DBC\n         MVI   #RECFM,C'V'              ASSUME RECFM=V\n         TM    NLFLAGS,NL@V             IS IT?\n         BO    NL$1                     YES - CONTINUE\n         MVI   #RECFM,C'F'              ASSUME RECFM=F\n         TM    NLFLAGS,NL@F             IS IT?\n         BO    NL$1                     YES - CONTINUE\n         MVI   #RECFM,C'U'              ANYTHING ELSE IS RECFM=U\n         SPACE 2\nNL$1     L     R0,MAXBLKSI         GET SIZE OF LARGEST BLOCK  09/84 DBC\n         CVD   R0,DWD\n         MVC   #BLKSIZE(5),=X'2020202120'\n         ED    #BLKSIZE-1(6),DWD+5\n         SPACE 1\n*******  MVI   #LRECL+4,C'?'\n         SPACE 1\n         L     R0,BLOCKCNT              GET BLOCK COUNT\n         CVD   R0,DWD\n         MVC   #BLKCNT-1(7),=X'20202020202120'\n         ED    #BLKCNT-2(8),DWD+4\n         SPACE 1\n         MVC   #DEN+1(1),TRUE#DEN\n         L     R14,TRUE#DEN\n         TM    PARMFLAG,PF@DEN1\n         BO    *+10\n         MVC   #DEN,24(R14)                                         THO\n         SPACE 1\n         L     R15,BLOCKCNT             COUNT # OF GAPS\n         L     R1,BYTECNT\n         M     R1-1,=F'100'             SCALE\n         D     R1-1,0(,R14)             DIVIDE BY BYTES/INCH\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   DEN3420A                 NO, THEN 3420               THO\n         AH    R1,=Y(8)                 ADD 1 TAPEMARK              THO\n         TM    TFLAG1,T1@SL             REALLY SL?\n         BNO   *+12                     NO - SKIP\n         AH    R1,=Y(2*8)               YES - 2 MORE TAPEMARKS      THO\n         LA    R15,4(,R15)              INCR # OF GAPS\n         M     R15-1,=F'08'             EACH GAP IS .08 INCH        THO\n         B     LENCALC1                                             THO\nDEN3420A AH    R1,=Y(375)               ADD 1 TAPEMARK              THO\n         TM    TFLAG1,T1@SL             REALLY SL?                  THO\n         BNO   *+12                     NO - SKIP                   THO\n         AH    R1,=Y(2*375)             YES - 2 MORE TAPEMARKS      THO\n         LA    R15,4(,R15)              INCR # OF GAPS              THO\n         M     R15-1,=F'60'             EACH GAP IS .60 INCH\n         CLI   TRUE#DEN,C'4'            UNLESS IT'S A 6250 TAPE\n         BNE   *+8                      IT ISN'T\n         SRL   R15,1                    THEN THEY'RE .3 INCH EACH\nLENCALC1 AR    R1,R15                   ADD IN LENGTH OF GAPS       THO\n         LR    R2,R1                    SAVE\n         ICALL TAPEFEET,R14,R15=#LENGTH-2                     06/84 DBC\n         A     R2,LEN#TAPE+4\n         ST    R2,LEN#TAPE+4\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#CUMLEN-2                     06/84 DBC\n         SPACE 2\n         PRTLN OUTBUFF\n         CLI   UNLOADER,C' '            ANY SECOND PRINT LINE?\n         BE    NL$DONE                  NO - SKIP\n         TM    PARMFLAG,PF@INLIN        PARM=INLINE?\n         BNO   NL$DONE                  NO - NO SECOND LINE\n         PRTLN OUTBUFF2\n         MVC   OUTBUFF2,OUTCLR2\n         SPACE 2\nNL$DONE  TM    TFLAG1,T1@SL             THIS TAPE SL?\n         BO    NLSLDONE                 YES - DIFFERENT HANDLING\n         SPACE 1\nNL$DONEX TAPIO TCCW#DAT,TM=NULL$NL      READ NEXT FILE'S FIRST BLK  U14\n         L     R2,LASTSIZE         GET SIZE OF LAST BLOCK     09/84 DBC\n         B     NL$NEXT                  PROCESS NEXT FILE\n         SPACE 3                                              07/85 DBC\nNULL$NL  LH    R1,NUMBNULL              GET NUMBER OF NULL FILES    U14\n         LA    R1,1(,R1)                INCR                        U14\n         STH   R1,NUMBNULL              SAVE NEW COUNT              U14\n         CH    R1,NULLNUMB              DONE ENOUGH?                U14\n         BH    HAVE$EOV                 YES - STOP                  U14\n         LH    R1,FILE#SEQ         NO, GET FILE #             07/85 DBC\n         MVC   #FILE-1(5),=X'2020202120'  MOVE IN EDIT MASK         U14\n         CVD   R1,DWD                                               U14\n         ED    #FILE-2(6),DWD+5                                     U14\n         MVC   #UNLOAD+2(6),=C'(NULL)'  PUT IN INDICATOR      06/84 DBC\n         PRTLN OUTBUFF                                              U14\n         L     R0,LEN#TAPE+4            GET ACCUMULATED TAPE LENGTH U14\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   DEN3420B                 NO, THEN 3420               THO\n         AH    R0,=Y(8)                 COUNT 1 TAPEMARK            THO\n         ST    R0,LEN#TAPE+4            SAVE UPDATED                U14\n         B     NL$DONEX                                             U14\nDEN3420B AH    R0,=Y(375)               COUNT 1 TAPEMARK            THO\n         ST    R0,LEN#TAPE+4            SAVE UPDATED                THO\n         B     NL$DONEX                                             THO\n         SPACE 3\n************************************************************* 12/88 SBG\n*   THIS IS THE START OF NORMAL STANDARD LABEL PROCESSING.  * 12/88 SBG\n************************************************************* 12/88 SBG\nTPVOL1OK OI    TFLAG1,T1@SL             INDICATE SL PROCESSING12/88 SBG\n         MVC   TITLE1+5(6),VOLSERNO\n         MVC   TITLE1+19(10),VOLOWNER\n         MVC   TITLE1+13(6),TITLE1+12   BLANK OUT KEYWORD\n         CLC   VOLOWNER,BLANKS          OWNER ALL BLANK?\n         BE    *+10\n         MVC   TITLE1+13(6),=C'OWNER='\n         NI    TFLAG2,255-T2@RQVOL      TURN OFF FLAG\n         CLC   VOLSERNO(6),JFCB+118     GET WHAT WE ASKED FOR?\n         BE    MATCHVOL                 YES - CONTINUE\n         OI    TFLAG2,T2@RQVOL          SET FLAG\n         SPACE 2\nMATCHVOL NEWPAGE ,                      PRINT HEADER LINES\n         NI    TFLAG1,255-T1@ANLZ       RESET FLAG\n         TM    PARMFLAG,PF@NL      NL PROCESSING FORCED?      06/84 DBC\n         BNZ   ANLZ1               YES, SET ANALYZE SIGNAL    06/84 DBC\n         TM    PARMFLAG,PF@NOCHK   NO, SCAN BYPASSED?         06/84 DBC\n         BNZ   NOANLZ1             YES, SKIP                  06/84 DBC\nANLZ1    OI    TFLAG1,T1@ANLZ      NO, SET ANALYZE SIGNAL     06/84 DBC\nNOANLZ1  DS    0H                                             06/84 DBC\n         SPACE 1\n         TM    PARMFLAG,PF@NL           FORCE NL ANALYSIS?\n         BNO   *+12                     NO - CONTINUE\n         XI    TFLAG1,T1@SL             YES - TURN OFF FLAG\n         B     NL$NEXT                  AND GO TO NL ROUTINE\n         SPACE 1\n         MVI   WHERE,1                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#LBL,TM=IEHINITT     READ THE HDR LABELS\n         B     DATAREAD                 SKIP FIRST TIME\n         SPACE 3                                              07/85 DBC\nNLSLDONE TM    TFLAG1,T1@SL        SL-TAPE?                   07/85 DBC\n         BZ    SPACER              NO, SKIP THIS              07/85 DBC\n         CLC   =C'0001',FL1VOLSQ        FIRST VOLUME OF FILE?\n         BE    TEST$EOV                 YES.\n         MVC   FVOL#MSG+22(4),FL1VOLSQ  VOL SEQ #\n         MVC   FVOL#MSG+80(6),FL1FILSR  FIRST VOLSER\n         PRTLN FVOL#MSG\n         SPACE 2\nTEST$EOV CLC   =C'EOV2',FL2LABI\n         BNE   NOT$EOV                  EOV.\n         PRTLN ' *** THE ABOVE FILE IS CONTINUED ON ANOTHER VOLUME'\n         B     HAVE$EOV            ALL DONE                   07/85 DBC\nNOT$EOV  DS    0H                                             07/85 DBC\n         SPACE 3                                              07/85 DBC\nSPACER   PRTLN OUTBUFF                  BLANK LINE\nNEXTFILE TAPIO TCCW#FSF                 FWD SPACE\n         MVI   WHERE,1                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#LBL,TM=HAVE$EOV     READ HDR LABELS\n         SPACE 1\nDATAREAD MVC   UNLOADER,UNLOADER-1      CLEAR UNLOADED FLAG\n         TAPIO TCCW#FSF                 SKIP TO END OF HDR LABELS\n         MVI   NLFLAGS,NL@V+NL@F        ASSUME RECFM=V & RECFM=F\n         MVI   WHERE,3                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#DAT,TM=NULLFILE     READ DATA\n         L     R1,LASTSIZE         GET SIZE OF (FIRST) BLOCK  09/84 DBC\n         ST    R1,MAXBLKSI         INIT BIGGEST BLOCK READ    09/84 DBC\n         AH    R1,=Y(4*80)              2 HDR + 2 EOF LABELS\n         ST    R1,BYTECNT               INIT TOTAL BYTES READ\n         MVC   BLOCKCNT,F1              INIT NUMBER OF BLOCKS READ\n         NI    NLFLAGS,255-NL@CHANG     FIRST BLOCK NOT A CHANGE\n         OI    NLFLAGS,NL@F             STILL COULD BE RECFM=F\n         SPACE 2\n         BAL   LKR,TEST$CH              TEST FOR CBT HEADER   10/90 SBG\n         B     TSTRECFM                 NOT CBTHEADER, GO ON  10/90 SBG\n         NOP   0                        NO EFFECT ON REPORT 2 10/90 SBG\n         B     TEST$LCT                 PROCESS HEADER FILE   10/90 SBG\n         SPACE 2                                              10/90 SBG\nTSTRECFM CLI   FL2RECFM,C'F'            RECFM=FB?             10/90 SBG\n         BNE   NOT$RF$F                 NO - NOT IEHMOVE OR IEBISAM\n         CLC   FL2LRECL,C00080          LRECL=80?\n         BNE   FIND$EOF                 NO - NOT IEHMOVE OR IEBISAM\n***      CLC   FL2BLKL,C00800           BLKSIZE=800?\n***      BNE   TST$UPDT                 NO - NOT IEHMOVE'D\n         CLI   FL2BLKA,C'B'             BLOCKED?\n*  SWITCH TESTS FOR SMPPTFIN AND IEBUPDTE                           SBG\n         BNE   TEST$PTF                 NO - NOT IEHMOVE'D          SBG\n         BAL   LKR,TEST$MV              IS IT IEHMOVE?\n         B     TST$UPDT                 NO - TRY NEXT               SBG\n         B     IEHMOVE2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\n************************************************************* 06/86 SBG\n*  ORIGINAL CODE WOULD NOT DETECT AN APAR TAPE AS SUCH.             SBG\n*                                                                   SBG\n*  WHEN READING PTF TAPES WHICH HAVE APARS FIRST, AND               SBG\n*   THE APARS HAVE IEBUPDTE CONTROL CARDS IN THEM FOR SOURCE UPDATE,SBG\n*   WE WANT TAPEMAP TO THINK THAT THE TAPE HAS PTFS OR APARS,       SBG\n*   NOT IEBUPDTE CONTROL STATEMENTS, WHICH ARE SECONDARY            SBG\n*   TO THE FACT THAT WE HAVE AN APAR TAPE.                          SBG\n*                                                                   SBG\n*  THEREFORE I AM MOVING THE CODE WHICH FEELS FOR SMPPTFIN FORMAT   SBG\n*  BEFORE THE CODE WHICH FEELS FOR IEBUPDTE FORMAT, TO DETECT       SBG\n*  AN APAR TAPE WHEN WE HAVE ONE.                                   SBG\n************************************************************* 06/86 SBG\n         SPACE 3                                              07/85 DBC\nTST$UPDT DS    0H                LABEL FOR TEST IEBUPDTE            SBG\n*                          BUT TEST FOR PTFIN COMES FIRST, SO       SBG\n*  I SWITCHED DAVE'S CODE AROUND BETWEEN THESE 3 LABELS.            SBG\n         BAL   LKR,TEST$PTF        DOES FILE CONTAIN PTFS?    07/85 DBC\n         B     TST$NPTF            +0 NO, SKIP                07/85 DBC\n         B     PTFS2               +4 YES & 2-PRT FMT; HANDLE 07/85 DBC\n         B     TEST$LCT            +8 YES & 1-PRT FMT; HANDLE 07/85 DBC\nTST$NPTF DS    0H                                             07/85 DBC\n         BAL   LKR,TEST$UPS             SEE IF IEBUPDTE INPUT STREAM\n         B     TST$NUPD            +0 PROBABLY NOT            07/85 DBC\n         B     IEBUPDT2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT            +8 YES, JUST SAY SO        07/85 DBC\nTST$NUPD DS    0H                                             07/85 DBC\n*  I SWITCHED DAVE'S CODE AROUND BETWEEN THESE 3 LABELS.            SBG\n         SPACE 3\nTST$ISAM BAL   LKR,TEST$IS              IS IT IEBISAM?\n         B     TST$MAP                  NO                    11/88 SBG\n         B     IEBISAM2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nTST$MAP  BAL   LKR,TEST$MAP             IS IT A TAPEMAP PRINT FILE?\n         B     FIND$EOF                 NO\n         B     MAP2                     YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNOT$RF$F CLC   =X'00CA6D0F',TAPEBUFF+8  TEST IEBCOPY FIRST    08/90 SBG\n         BE    FORGTLBL         IEBCOPY-IGNORE WHAT'S IN LABEL08/90 SBG\n         CLC   =X'01CA6D0F',TAPEBUFF+8  TEST FOR PDSE UNLOAD  06/93 SBG\n         BE    FORGTLBL         IEBCOPY-IGNORE WHAT'S IN LABEL06/93 SBG\n         CLI   FL2RECFM,C'V'            RECFM=V?              08/90 SBG\n         BNE   NOT$RF$V                 NO - NOT IEBCOPY'D\n         CLI   FL2BLKA,C'S'             RECFM=VS?\n         BNE   TST$CBT                  NOT VS. MAYBE CBT973. 11/88 SBG\nFORGTLBL BAL   LKR,TEST$CPY             IS IT VS2COPY?        08/90 SBG\n         B     TST$CBT                  NO - MAYBE CBT\n         B     IEBCOPY2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nTST$CBT  BAL   LKR,TEST$CBT             IS IT CBT973 COMPRESS 11/88 SBG\n         B     FIND$EOF                 NO                    11/88 SBG\n         B     CBT2                     YES - 2 PRINTFILE FMT 11/88 SBG\n         B     TEST$LCT                 YES - 1 PRINTFILE FMT 11/88 SBG\n         SPACE 3                                              11/88 SBG\nNOT$RF$V CLI   FL2RECFM,C'U'            RECFM=U?\n         BNE   FIND$EOF                 NO - NOT IEHDASDR\n         BAL   LKR,TEST$DMP             IS IT IEHDASDR?\n         B     TST$FDR                  NO\n         NOP   0                        DON'T USE 2ND PRINT FILE    WBF\n         B     TEST$LCT                 CONTINUE\n         SPACE 3\nTST$FDR  BAL   LKR,TEST$FDR             IS IT FDR?\n         B     TST$SLK                  NO\n         B     FDR2                     YES - 2 PRINT FILE FORMAT   WBF\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT   WBF\n         SPACE 3\nTST$SLK  BAL   LKR,TEST$SLK             IS IT IEBISAM?\n         B     FIND$EOF                 NO\n         B     SLK2                     YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\nTEST$LCT TM    PARMFLAG,PF@INLIN        PARM=INLINE?\n         BNO   FIND$EOF                 NO - SKIP THIS\n         NEWPAGE  2                     MORE THAN 1 LINE LEFT?\n         SPACE 1\n         CLC   IEBCOPY,UNLOADER         UNLOADED BY IEBCOPY?\n         BE    IEBCOPY1                 YES - PRINT EXTRA INFO\n         CLC   IEHMOVE,UNLOADER         UNLOADED BY IEHMOVE?\n         BE    IEHMOVE1                 YES - PRINT EXTRA INFO\n         CLC   IEBISAM,UNLOADER         UNLOADED BY IEBISAM?\n         BE    IEBISAM1                 YES - PRINT EXTRA INFO\n         CLC   IEHDASDR,UNLOADER        DUMPED BY IEHDASDR?\n         BE    IHDASDR1                 YES - PRINT EXTRA INFO\n         CLC   FDR,UNLOADER             DUMPED BY FDR?\n         BE    FDR1                     YES - PRINT EXTRA INFO\n         CLC   SLICKMNG,UNLOADER        UNLOADED BY SLICK?\n         BE    SLK1                     YES - PRINT EXTRA INFO\n         CLC   CBT973,UNLOADER          CBT973 COMPRESS FORMAT11/88 SBG\n         BE    CBT1                     YES - PRINT EXTRA INFO11/88 SBG\n         CLC   CBTEMPTY,UNLOADER        CBT TAPE EMPTY FILE?  11/88 SBG\n         BE    CBTEMP1                  YES - PRINT EXTRA INFO11/88 SBG\n         CLC   CBHEADER,UNLOADER        CBT TAPE DOC FILE?    12/88 SBG\n         BE    CBTDOC1                  YES - PRINT DESCRPTN  12/88 SBG\n         CLC   SMPPTFIN,UNLOADER   SYSMODS?                   07/85 DBC\n         BE    PTFS1               YES, GO SAY SO             07/85 DBC\n         CLC   IEBUPXXX,UNLOADER   NO, UPDATE STREAM?         07/85 DBC\n         BE    IEBUPDT1            YES, GO SAY SO             07/85 DBC\n****     CLC   CTAPEMAP,UNLOADER        CREATED FOR TAPEMAP?\n****     BE    MAP1                     DOESN'T MATTER - MORE THAN\n****                                    ONE LINE OF INFO, SO CAN'T\n****                                    PRINT IT INLINE\n         SPACE 3\nFIND$EOF TM    PARMFLAG,PF@NOCHK        CHECKING SL TAPE?     06/84 DBC\n         BZ    SCAN$EOF                 YES - READ TILL EOF   06/84 DBC\n         SPACE 1\n         TAPIO TCCW#FSF                 FSF PAST REST OF DATA\n         SPACE 2\nREAD$EOF MVI   WHERE,2                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#LBL,TM=MISS$EOF     READ TRAILER LABEL\nTEST$EOF CLC   =C'EOF1',FL1LABI         TRAILER LABEL?\n         BE    HAVE$EOF                 YES - OK\n         CLC   =C'EOV1',FL1LABI         OTHER KIND?\n         BE    HAVE$EOF                 YES - OK\n         SPACE 1\nMISS$EOF PRTLN '0EOF OR EOV LABEL NOT FOUND WHERE EXPECTED'\n         B     REWINDIT                 REWIND AND LEAVE    %%%%%%%%%\n         SPACE 2\nSCAN$EOF TAPIO TCCW#DAT,TM=SL$SAVE      READ & TALLY A DATA BLOCK\n         B     SCAN$EOF                 DO THAT TILL EOF\n         SPACE 2\nSL$SAVE  MVC   NL#SAVE(16),MAXBLKSI SAVE ALL INFO            09/84 DBC\n         MVC   NL#FLAGX,NLFLAGS         MORE...\n         B     READ$EOF                 GO READ THE EOF LABELS\n         SPACE 2\nHAVE$EOF LA    R1,1                     ASSUME 1-LINE GROUPS\n         TM    PARMFLAG,PF@NOCHK        CHECKING?             06/84 DBC\n         BNZ   *+8                      NO - SKIP             06/84 DBC\n         LA    R1,2(,R1)                YES - NEED 2 MORE EACH\n         CLI   UNLOADER,C' '            IS THIS FILE UNLOADED?\n         BE    *+8                      NO - SKIP\n         LA    R1,1(,R1)                YES - NEED 1 MORE LINE\n         TM    PARMFLAG,PF@INLIN        INLINE INFO?          12/88 SBG\n         BZ    *+8                      NO - SKIP             12/88 SBG\n         LA    R1,1(,R1)                YES - NEED EXTRA LINE 12/88 SBG\n         LR    R0,R1                    COPY FOR STUPID MACRO\n         NEWPAGE  (R0)                  CHECK FOR ENOUGH LINES\n         SPACE 2\n         TM    PARMFLAG,PF@NOCHK   SL TAPE WITH NL SCANNING?  07/85 DBC\n         BZ    BYWHOZ              YES, DEFER NAMING THE      07/85 DBC\n*                                  UNLOADER UNTIL I BUILD THE 07/85 DBC\n*                                  \"SCAN\" LINE MESSAGE.       07/85 DBC\n         MVC   #UNLOAD,UNLOADER         SAY WHO UNLOADED IT\nBYWHOZ   DS    0H                                             07/85 DBC\n         MVC   #FILE(4),FL1FILSQ        FILE #\n         ICALL DEZERO,R14,R1=#FILE      REMOVE LEADING ZEROES\n         MVC   #DSN(17),FL1ID           DSN\n         CLI   FL1FSEC,C'0'             PASSWORD PROTECTED?\n         BE    NOTPSWD                  NO - SKIP\n         CLI   FL1FSEC,C'1'             PASSWORD PROTECTED?\n         BE    YESPSWD                  YES - MOVE IT IN\n         CLI   FL1FSEC,C'3'             NOPWREAD?\n         BNE   WHATPSWD                 NO - WHAT THEN????\n         MVC   #PSWD,=C' WRT'           YES                   06/84 DBC\n         B     NOTPSWD                  CONTINUE\nWHATPSWD MVC   #PSWD,=C' ???'           SAY WHAT?             06/84 DBC\n         B     NOTPSWD\nYESPSWD  MVC   #PSWD,=C' YES'           SAY SO.               06/84 DBC\n         SPACE 3\nNOTPSWD  MVC   #CDATE(2),FL1CREDT+1     YEAR CREATED\n         MVI   #CDATE+2,C'.'\n         MVC   #CDATE+3(3),FL1CREDT+3   DAY CREATED\n         MVC   #EDATE(2),FL1EXPDT+1     YEAR EXPIRES\n         MVI   #EDATE+2,C'.'\n         MVC   #EDATE+3(3),FL1EXPDT+3   DAY EXPIRES\n         SPACE 3                                              06/84 DBC\n         MVC   #INFOSRC,=C'LABELS' SHOW INFO SOURCE           06/84 DBC\n         MVC   #BLKCNT(6),FL1BLKCT      BLOCK COUNT\n         ICALL DEZERO,R14,R1=#BLKCNT    REMOVE LEADING ZEROES\n         SPACE 2\n         MVC   #RECFM(1),FL2RECFM       RECFM\n         MVC   #RECFM+1(1),FL2BLKA      BLOCK ATTRIBUTE\n         MVC   #RECFM+2(1),FL2CNTRL     CONTROL CHARACTER\n         CLI   #RECFM+1,C'R'            WEIRDO RECFM?  (FR OR VR)\n         BNE   NOT$RF$R                 NOT RECFM=FR OR VR\n         MVC   #RECFM+3(1),#RECFM+2     MOVE CTL CHAR OVER\n         MVC   #RECFM+1(2),=C'BS'       IT'S REALLY FBS OR VBS\nNOT$RF$R MVC   #BLKSIZE(5),FL2BLKL      BLOCK LENGTH\n         ICALL DEZERO,R14,R1=#BLKSIZE   REMOVE LEADING ZEROES\n         MVC   #LRECL(5),FL2LRECL       RECORD LENGTH\n         ICALL DEZERO,R14,R1=#LRECL     REMOVE LEADING ZEROES\n         CLI   TRUE#DEN,C'5'            3480 CARTRIDGE ?            THO\n         BNE   *+8                      NO THEN BYPASS MOD          THO\n         MVI   FL2DEN,C'5'              MODIFY WITH 3480 DEN        THO\n         IC    R15,FL2DEN               GET TAPE DENSITY\n         STC   R15,#DEN+1               SET IN PRINT LINE\n         CLC   TRUE#DEN(1),FL2DEN       LABEL CORRECT?\n         BE    *+8                      YES - OK\n         OI    TFLAG1,T1@BADEN          SET BAD DENSITY FLAG\n         N     R15,F15                  JUST DIGIT\n         SLL   R15,2                    MULTIPLY BY 4\n         LA    R3,DEN#LIST(R15)         POINT TO DENSITY VALUE\n         TM    PARMFLAG,PF@DEN1         PARM=DEN1?\n         BO    DEN$1                    YES - LEAVE 1 CHAR DEN\n         CLI   FL2DEN,C'5'              TOO HIGH?                   THO\n         BH    DEN$1                    YES - SKIP\n         CLI   FL2DEN,C'0'              TOO LOW?\n         BL    DEN$1                    YES - SKIP\n         MVC   #DEN,24(R3)              MOVE CHAR FORM OF DENSITY   THO\n         SPACE 1\nDEN$1    MVC   #TRTCH+1(2),FL2TRTCH     TAPE RECORDING TECHNI 06/84 DBC\n         SPACE 1                                              06/84 DBC\n         MVC   #CREATOR(8),FL2JOBD GET CREATING JOBNAME       06/84 DBC\n         CLI   FL2STEPD,C' '       IS THERE A STEPNAME?       06/84 DBC\n         BE    GOTCREAT            NO, SKIP                   06/84 DBC\n         MVI   #CREATOR-1,C'X'     YES, SET SCAN STOPPER      06/84 DBC\n         LA    R1,#CREATOR+8       LOAD BACK-SCANNER          06/84 DBC\n         BALR  R14,0               LOAD LOOP HEAD             06/84 DBC\n         BCTR  R1,0                BACK SCAN                  06/84 DBC\n         CLI   0(R1),C' '          EO-JOBNAME YET?            06/84 DBC\n         BER   R14                 NO, CONTINUE BACKSCAN      06/84 DBC\n         MVI   1(R1),C'/'          YES, INSERT SEPARATOR      06/84 DBC\n         MVC   2(8,R1),FL2STEPD    GET STEPNAME               06/84 DBC\n         MVI   #CREATOR-1,C' '     CLEAR STOPPER              06/84 DBC\nGOTCREAT DS    0H                                             06/84 DBC\n         SPACE 2\n*    *****  COMPUTE THE LENGTH (INCHES) OF THIS TAPE DATA SET.\n         SPACE 1                                              06/84 DBC\n         TM    PARMFLAG,PF@NOCHK   DON'T DO IT IF A SCAN IS - 06/84 DBC\n         BZ    SKIPGUES             BEING DONE ANYWAY         06/84 DBC\n         SPACE 1\n         PACK  DWD,FL1BLKCT(6)          BLOCK COUNT\n         CVB   R15,DWD                  SAVE BLOCK COUNT\n         LA    R1,4(,R15)               ADD 4 GAPS TO BLOCK COUNT.\n         L     R3,TRUE#DEN              GET PTR TO TRUE DENSITY\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   *+12                     NO, THEN 3420               THO\n         M     R1-1,=F'08'              EACH GAP IS .08 INCH        THO\n         B     *+20                                                 THO\n         M     R1-1,=F'60'              EACH GAP IS 6/10 INCH\n*  NOTE - LENGTH KEPT IN .01 INCHES\n         CLI   TRUE#DEN,C'4'            6250 BPI?\n         BNE   *+8                      NO - SKIP\n         SRL   R1,1                     GAPS AT 6250 ARE .3 INCH\n         LR    R2,R1                    SAVE LENGTH OF GAPS\n         PACK  DWD,FL2BLKL(5)           BLKSIZE.\n         CVB   R1,DWD\n         MR    R1-1,R15                 BLKSIZE * BLOCK_COUNT\n         AH    R1,=Y(4*80)              2 HDR & 2 EOF LABELS\n         M     R1-1,=F'100'             CONVERT TO .01\n         D     R1-1,0(,R3)              DIVIDE BY DENSITY.\n         CLI   TRUE#DEN,C'5'            IS IT A 3480 TAPE DRIVE ?   THO\n         BNE   *+12                     NO, THEN 3420               THO\n         AH    R1,=Y(8*3)               3 TAPEMARKS @ 0.08 INCH     THO\n         B     *+8                                                  THO\n         AH    R1,=Y(375*3)             3 TAPEMARKS @ 3.75 INCH\n         AR    R2,R1                    ADD TO LENGTH OF DATA\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#LENGTH-2 FORMAT FILE LENGTH  06/84 DBC\n         A     R2,LEN#TAPE              ADD TO TOTAL LENGTH\n         ST    R2,LEN#TAPE              SAVE NEW TOTAL LENGTH\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPEFEET,R14,R15=#CUMLEN-2 FORMAT CUMULATIVE L 06/84 DBC\nSKIPGUES DS    0H                                             06/84 DBC\n         SPACE 1\n         PRTLN OUTBUFF\n         SPACE 2\n         TM    PARMFLAG,PF@NOCHK        SL WITH NL ANALYSIS?  06/84 DBC\n         BNZ   NO$CHECK                 NO - SEE IF SECOND LI 06/84 DBC\n         MVC   MAXBLKSI(16),NL#SAVE RESTORE INFO              09/84 DBC\n         MVC   NLFLAGS,NL#FLAGX         MORE...\n         B     NL$SL                    YES - GO DO IT\n         SPACE 2\nNO$CHECK TM    PARMFLAG,PF@INLIN        INLINE MESSAGES?\n         BNO   NLSLDONE                 NO - DO NEXT FILE\n         CLI   UNLOADER,C' '            UNLOADED?\n         BE    NLSLDONE                 NO - DO NEXT FILE\n         PRTLN OUTBUFF2                 PRINT TRUE ATTRS OF UNLOADED DS\n         MVC   OUTBUFF2,OUTCLR2         CLEAR OTHER PRINT LINE\n         B     NLSLDONE                 DO NEXT FILE\n         SPACE 3\nHAVE$EOV PRTLN '-     *** EOV ***'\n         LTR   LCTR2,LCTR2              ANYTHING PRINTED ON OTHER PAGE?\n         BZ    NO$EOV2                  NO - SKIP\n         MVC   OUTBUFF2(17),=C'-     *** EOV ***'\n         PRTLN2                         FLAG END OF OTHER PRINT FILE\n         SPACE 1\nNO$EOV2  TM    TFLAG1,T1@BADEN          ANY INCORRECT DENSITIES?\n         BNO   NO$BADEN                 NO - SKIP\n         LA    R0,9                     ASSUME NOT PARM=NONOTE\n         TM    PARMFLAG,PF@NONOT        WANT THE NOTE?\n         BNO   *+8                      YES - SO USE 9\n         LA    R0,6                     PARM=NONOTE, SO USE 6\n         NEWPAGE  (R0)                  GO TO TOP OF PAGE IF NEEDED\n         LA    LCTR,1(,LCTR)            WILL CALL PRTLN 1 EXTRA TIME\n         MVC   OUTBUFF(113),INCORLAB    REPL LITERAL BY FIELD 10/90 SBG\n*                                       FOR ADDRESSABILITY    10/90 SBG\n         L     R2,TRUE#DEN              GET PTR TO 4 CHAR TRUE DEN\n         CLI   TRUE#DEN,C'2'            800 BPI?\n         BNE   *+6                      NO - OK\n         BCTR  R2,0                     RIGHT JUSTIFY THE \"800\"\n         MVC   OUTBUFF+98(4),20(R2)     MOVE INTO PRINT LINE\n         PRTLN OUTBUFF\n         MVI   OUTBUFF,C'+'             SET FOR OVERPRINT\n         MVC   OUTBUFF+98(4),20(R2)     LIGHT UP THE DENSITY\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE\n         BAL   R14,PUTPRTLN             PRINT IT ONCE (NO CLEAR OUTBUFF\n         PRTLN OUTBUFF                  AND THE THIRD TIME\n         SPACE 2\nNO$BADEN TM    PARMFLAG,PF@NONOT        WANT THE NOTE?\n         BO    REWINDIT                 NO - SO DON'T\n         NEWPAGE  4                     ENOUGH LINES LEFT ON PAGE?\n         PRTLN '0NOTE:  LENGTH(S) ARE COMPUTED, (BASED ON BLKSIZE, BLKC$\n               OUNT, AND DENSITY), AND ARE THEREFORE ONLY APPROXIMATE.'\n         TM    TFLAG1,T1@ANLZ           ANALYZING?\n         BO    REWINDIT                 YES - GOOD LENGTHS PRINTED\n         PRTLN '        LENGTHS FOR RECFMS OTHER THAN F,FB,ETC MAY NOT $\n               BE VERY CLOSE TO THE TRUE LENGTH.'\n         SPACE 2\nREWINDIT TAPIO TCCW#RWD                 REWIND THE TAPE\n         SPACE 2\nCLOSE$TP CLOSE MF=(E,TAPEMFL)\n         SPACE 2\nRETURN   L     R14,RET#ADDR             GET RETURN ADDR\n         BR    R14\n         SPACE 2\nNULLFILE MVC   UNLOADER+2(6),=C'(NULL)' PUT IN INDICATOR      06/84 DBC\n         TAPIO TCCW#LBL   %%%%%         READ EOF'S                %%%%%\n         B     TEST$EOF   %%%%%         TEST FOR 'EOF'            %%%%%\n         SPACE 2\nUNEXTPMK PRTLN '0*** UNEXPECTED TAPE MARK ***'\n         B     REWINDIT                 CLOSE UP & LEAVE\n         SPACE 2\nLEADTPMK NEWPAGE  ,                     PRINT THE HEADER LINES\n         PRTLN '0++++ TAPE HAS LEADING TAPE MARK ++++'\n         BCTR  LCTR,0                   ACCOUNT FOR EXTRA BLANK LINE\n         PRTLN OUTBUFF                  BLANK LINE\n         MVI   VOLLABI,C'X'             INSURE NL ROUTINE\n         MVI   NUMBNULL+1,1             INIT NUMBER OF NULL FILES   U14\n         TAPIO TCCW#DAT,TM=LEAD$EOV     READ FIRST BLOCK FROM FILE  U14\n         B     DO$SENSE                 DO NL ANALYSIS\n         SPACE 2\nLEAD$EOV MVI   NUMBNULL+1,2             SET NUMBER OF NULL FILES    U14\n         CLI   NULLNUMB+1,2             TOO MANY?                   U14\n         BL    HAVE$EOV                 YES - STOP                  U14\n         MVC   #UNLOAD+2(6),=C'(NULL)'  FLAG IT               06/84 DBC\n         MVI   #FILE+3,C'1'             SET FOR PRINT               U14\n         PRTLN OUTBUFF                                              U14\n         B     DO$SENSE                                             U14\n         SPACE 2\nIEHINITT PRTLN '-++++ TAPE HAS BEEN RE-LABELLED WITH IEHINITT ++++'\n         B     REWINDIT                 ...\n         EJECT\nTEST$MV  CLC   =C'UNLOADED',TAPEBUFF+16 IEHMOVE'S TRADEMARK?\n         BNER  LKR                      NO\n         MVC   UNLOADER(7),IEHMOVE      SAY WHO\n         SPACE 1\nTEST$RET IFP2  Y,4(,LKR)                RETURN POINT FOR 2 PRINT FILES\n         B     8(,LKR)                  RETURN POINT FOR 1 PRINT FILE\n         SPACE 2\n************************************************************  11/88 SBG\n* THE CBT973 COMPRESS PROGRAM MAY BE FOUND IN SOURCE FORM  *  11/88 SBG\n* ON THE CBT MODS TAPE, FILE (2,NL), RECFM=FB,LRECL=80,    *  11/88 SBG\n* BLKSIZE=32720.  IT TAKES 80-BYTE FB RECORDS AS INPUT,    *  11/88 SBG\n* AND PRODUCES 94-BYTE LRECL, VB RECORDS AS OUTPUT.        *  11/88 SBG\n*                                                          *  11/88 SBG\n* DATA COMPRESSION TAKES THE FORM OF SQUEEZING OUT BLANKS. *  11/88 SBG\n* A 10-BYTE BIT MAP HEADER TELLS THE PROGRAM WHICH OF THE  *  11/88 SBG\n* 80 CHARACTERS WERE BLANKS, AND WHICH WERE NOT.  A RDW    *  11/88 SBG\n* PRECEDES THE 10-BYTE BIT MAP, FOLLOWED BY THE NON-BLANK  *  11/88 SBG\n* BYTES OF THE RECORD.  THE PROGRAM COUNTS ON A LOT OF     *  11/88 SBG\n* BLANK CHARACTERS IN THE RECORD, TO ALLOW COMPRESSION     *  11/88 SBG\n* TO BE ACHIEVED.                                          *  11/88 SBG\n*                                                          *  11/88 SBG\n* IT IS THE PRACTICE ON THE CBT TAPE TO IEBUPDTE-UNLOAD    *  11/88 SBG\n* A SOURCE-FORMAT PDS TO A SEQUENTIAL FILE, AND THEN TO    *  11/88 SBG\n* COMPRESS THE BLANKS OUT WITH THE CBT973 PROGRAM WHEN     *  11/88 SBG\n* UNLOADING THE FILE ON TO THE CBT TAPE.  TAPEMAP USES     *  11/88 SBG\n* THE CBT973 DECOMPRESS ALGORITHM TO DECOMPRESS ONE        *  11/88 SBG\n* 80-BYTE RECORD AT A TIME, AND THEN USES ITS IEBUPDTE     *  11/88 SBG\n* MEMBER NAME INTERPRETATION ON EACH DECOMPRESSED RECORD.  *  11/88 SBG\n*                                                          *  11/88 SBG\n* MEMBER NAMES IN UNLOADED LIBRARIES ARE THUS DIRECTLY     *  12/88 SBG\n* REPORTED BY DOING A \"TAPEMAP\" RUN ON A CBT TAPE.         *  11/88 SBG\n*                                                          *  12/88 SBG\n* USUALLY ANY FB 80-BYTE LRECL NON-IEBUPDTE FILES ARE ALSO *  12/88 SBG\n* COMPRESSED.  THESE FILES WILL APPEAR ON REPORT 2 BUT     *  12/88 SBG\n* WILL NOT SHOW AS HAVING ANY MEMBERS.                     *  12/88 SBG\n************************************************************  11/88 SBG\nTEST$CBT CLC   TAPEBUFF+2(3),=X'000000' LOOK LIKE BDW+X'00'?  11/88 SBG\n         BNER  LKR                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+0(2),=X'0000'   LOOK LIKE BDW?        11/88 SBG\n         BER   LKR                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+6(2),=X'0000'   LOOK LIKE RDW?        11/88 SBG\n         BNER  LKR                      NO CAN'T BE CBT973 FMT11/88 SBG\n         CLC   TAPEBUFF+4(2),=X'0000'   LOOK LIKE RDW?        11/88 SBG\n         BER   LKR                      NO CAN'T BE CBT973 FMT11/88 SBG\nTEST$CBA LA    R1,TAPEBUFF+4    IF CBT973, THEN START OF RDW  11/88 SBG\n         LA    R3,0                 CLEAR REGISTER            11/88 SBG\n*        IC    R3,1(,R1)            PRESUMED RECORD SIZE      07/90 SBG\n         LH    R3,0(,R1)    DON'T BE MODULO 256..SAVE IT ALL. 07/90 SBG\n         C     R3,=F'94'            LRECL=94 MAX FOR CBT973.  11/88 SBG\n         BHR   LKR                  BETWEEN 95 & 255, NOT CBT 11/88 SBG\n         ST    R4,CBSAVE4           USE R4 FOR WKREG          11/88 SBG\n         LH    R4,TAPEBUFF          GET BLKSIZE FROM BDW      11/88 SBG\n         S     R4,=F'4'             4 LESS FOR COMPARE W/RECSZ11/88 SBG\n         CR    R3,R4                ONE RECORD IN THIS BLOCK? 11/88 SBG\n         BL    TEST$CBN             YES. SKIP TEST PAST EO-REC11/88 SBG\n************************************************************* 12/88 SBG\n*   \"EMPTY FILES\" ON THE CBT TAPE ARE NOT REALLY EMPTY.     * 12/88 SBG\n*    THEY ARE ONE-RECORD CBT973 COMPRESSED FILES WITH A     * 12/88 SBG\n*    CERTAIN FIXED LITERAL EXPRESSION ON THE ONE CARD.      * 12/88 SBG\n*    A USER OF THE CBT TAPE WOULD LIKE TO KNOW WHICH TAPE   * 12/88 SBG\n*    FILES ARE CONSIDERED \"EMPTY\" BY THE TAPE ADMINISTRATOR.* 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBL CLC   14(L'EMPTYLIT,R1),EMPTYLIT   CBT \"EMPTY\" FILE? 11/88 SBG\n         BE    TEST$CBE             FLAG AS CBT EMPTY FILE    12/88 SBG\n         CLC   14(L'EMPTYLI2,R1),EMPTYLI2   OLD \"EMPTY\" FILE? 12/88 SBG\n         BNE   TEST$CBN             NO-STILL TEST FOR CBT973. 12/88 SBG\n************************************************************* 12/88 SBG\n*   AN \"EMPTY FILE\" ON THE CBT TAPE HAS BEEN FOUND.         * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBE MVC   UNLOADER(8),CBTEMPTY  REPORT AS EMPTY.         12/88 SBG\n         L     R4,CBSAVE4           RESTORE REG 4             11/88 SBG\n         TM    TFLAG2,T2@PRT2       IS SECOND REPORT WANTED?  12/88 SBG\n         BOR   LKR            NO SECOND REPORT FOR EMPTY FILE 12/88 SBG\n         B     8(,LKR)        WE WANT TO FLAG IF ONE REPORT   12/88 SBG\n************************************************************* 12/88 SBG\n*   CBTEMPTY IS FLAGGED ON 'PARM=INLINE', BUT WE DON'T WANT * 12/88 SBG\n*    WANT EMPTY CBT FILES REPORTED ON THE SECOND REPORT     * 12/88 SBG\n*    TO CONFUSE SOMEONE WHO MAY THINK IT IS A NONTRIVIAL    * 12/88 SBG\n*    NON-IEBUPDTE CBT973-COMPRESSED FILE.                   * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CBN DS    0H                   NOT CBT EMPTY FILE        11/88 SBG\n         AR    R3,R1                PAST RECORD END           11/88 SBG\n         LH    R4,0(,R3)            GET SECOND RECORD SIZE    11/88 SBG\n         C     R4,=F'14'            SEE IF LESS THAN 14       11/88 SBG\n         BL    TEST$CJ1             LESS THAN 14 IS NO GOOD   08/90 SBG\n         C     R4,=F'94'            SEE IF MORE THAN 94       08/90 SBG\n         BNH   TEST$CJ2             IN BETWEEN, TEST FURTHER  08/90 SBG\nTEST$CJ1 L     R4,CBSAVE4           RESTORE REG 4 BEFORE RET  08/90 SBG\n         BR    LKR                  GO BACK TO CALLER         08/90 SBG\nTEST$CJ2 CLI   0(R3),X'00'          IF CBT973, MUST BE X'00'  08/90 SBG\n         BNER  LKR                  NOT SO, THEN NOT CBT973   11/88 SBG\n         CLI   1(R3),X'00'          IF CBT973, CAN'T BE X'00' 11/88 SBG\n         BER   LKR                  IT IS, THEN NOT CBT973    11/88 SBG\n         CLC   2(2,R3),=X'0000'     LOOK LIKE RDW?            11/88 SBG\n         BNER  LKR                  NO. CAN'T BE CBT973 FMT   11/88 SBG\nTEST$CBM LA    R1,14(,R1)           GO TO \"NONBLANK\" DATA     11/88 SBG\nTEST$CBO CLI   0(R1),X'40'          HAD BETTER NOT BE A BLANK 11/88 SBG\n         BER   LKR                  IT IS A BLANK. NO GOOD.   11/88 SBG\n         LA    R1,1(,R1)            BUMP ONE BYTE             11/88 SBG\n         CR    R1,R3                END OF NONBLANK DATA?     11/88 SBG\n         BL    TEST$CBO             NO, KEEP TRYING           11/88 SBG\n         MVC   UNLOADER(6),CBT973   ASSUME CBT973 FORMAT      11/88 SBG\n         B     TEST$RET                 RETURN                11/88 SBG\n         SPACE 2                                              11/88 SBG\nTEST$CPY CLC   =X'00CA6D0F',TAPEBUFF+8  VS2COPY'S TRADEMARK?\n         BE    $CPYTEST                 YES.  FOLLOW THRU     06/93 SBG\n         CLC   =X'01CA6D0F',TAPEBUFF+8  PDSE UNLOAD ?         06/93 SBG\n         BNER  LKR                      NO\n$CPYTEST MVC   UNLOADER(7),IEBCOPY      SAY WHO               06/93 SBG\n         B     TEST$RET                 RETURN\n         SPACE 2\nTEST$UPS ST    LKR,DWD                  SAVE MY RETURN ADDR\n         LA    R2,80                    BXLE INCR\n         LA    R15,TAPEBUFF             BXLE START\n         LR    R3,R15                   COPY FOR END\n         A     R3,LASTSIZE         POINT PAST END            09/84 DBC\n         SR    R3,R2                    POINT TO LAST CARD IN BLOCK\n         SPACE 1\nTEST$UPL LR    R1,R15                   COPY CARD START ADDR\n         BAL   LKR,TEST$UP              IS THIS IEBUPDTE CTL CARD?\n         B     TEST$UPB                 NO - GO BXLE\n         MVC   UNLOADER(8),IEBUPXXX SAY WHO                   06/84 DBC\n         L     LKR,DWD                  GET BACK MY RETURN ADDR\n         B     TEST$RET                 AND RETURN TO CALLER\n         SPACE 1\nTEST$UPB BXLE  R15,R2,TEST$UPL          TRY ALL CARDS IN THIS BLOCK\n         L     LKR,DWD                  RESTORE RETURN ADDR\n         BR    LKR                      NOT IEBUPDTE INPUT STREAM\n         SPACE 2\nTEST$UP  CLC   =C'./',0(R1)             START RIGHT?\n         MVI   UPDTXFLG,C' '            ASSUME ./ CONTROL CARD11/88 SBG\n         BE    TEST$UPC                 CONTINUE              11/88 SBG\nTEST$UPX CLC   =C'><',0(R1)             SUBORDINATE MEMBER?   11/88 SBG\n         BNER  LKR                      NO - THAT WAS QUICK\n         MVI   UPDTXFLG,C'>'            REALLY >< CONTROL CARD11/88 SBG\nTEST$UPC DS    0H                       CONTINUE PROCESSING   11/88 SBG\n         LA    R1,2(,R1)                POINT TO SCAN START\n         LA    R0,69                    MAX SCAN LENGTH\n         BAL   R14,F$BLANK              FIND END OF NAME FIELD\n         BAL   R14,F$CHARS              FIND THE VERB\n         CLC   =C'ADD ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'REPL ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'CHANGE ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'CHNGE ',0(R1)    IEBUPDAT TYPE CHANGE?      06/84 DBC\n         BNER  LKR                 NO, RETURN EMPTY HANDED    06/84 DBC\n         SPACE 2\nTU$SAVE  MVC   UPDT#TYP(1),0(R1)        A,R,C\n         MVC   IEBUPXXX,=C'IEBUPDTE' ASSUMPTION               06/84 DBC\n         STM   R0,R1,TU$SAVE2      SAVE SCANNER               06/84 DBC\n         SPACE 1\nTU$LOOP  LA    R1,1(,R1)\n         CLC   =C'MEMBER=',0(R1)\n         BE    TU$MEM\n         CLC   =C'NAME=',0(R1)\n         BE    TU$NAM\n         BCT   R0,TU$LOOP               SCAN THE REST OF THE CARD\n         SPACE 3                                              06/84 DBC\n************************************************************* 06/84 DBC\n*        THIS IS NOT AN INTERESTING IEBUPDTE TYPE CARD, BUT * 06/84 DBC\n*        IT STILL MIGHT BE AN INTERESTING IEBUPDAT TYPE     * 06/84 DBC\n*        CARD. SCAN TO SEE IF THE OPERAND FIELDS START WITH * 06/84 DBC\n*        A FIRST POSITIONAL PARAMETER THAT IS A MEMBER      * 06/84 DBC\n*        NAME.                                              * 06/84 DBC\n************************************************************* 06/84 DBC\n         SPACE 1                                              06/84 DBC\n         LM    R0,R1,TU$SAVE2      RESTORE VERB PTR           06/84 DBC\n         BAL   R14,F$BLANK         SCAN PAST THE VERB         06/84 DBC\n         BAL   R14,F$CHARS         SCAN TO THE OPERANDS       06/84 DBC\n         STM   R0,R1,TU$SAVE2      SAVE OPERANDS PTR          06/84 DBC\n         SPACE 1                                              06/84 DBC\n         LA    R0,9                MAX L'NAME+1               06/84 DBC\n         BALR  R14,0               LOOP HEAD                  06/84 DBC\n         CLI   0(R1),C'='          IEBUPDTE TYPE CARD?        06/84 DBC\n         BER   LKR                 YES, GIVE UP               06/84 DBC\n         CLI   0(R1),C','          NO, EO-1ST OPERAND?        06/84 DBC\n         BE    TU$UPDAT            YES, GO SAVE               06/84 DBC\n         CLI   0(R1),C' '          MAYBE, CHECK AGAIN         06/84 DBC\n         BE    TU$UPDAT            YES, GO SAVE               06/84 DBC\n         LA    R1,1(,R1)           NO, ADVANCE SCANNER        06/84 DBC\n         BCTR  R0,R14              LOOP BACK                  06/84 DBC\n         BR    LKR                 1ST OPERAND TOO LONG; GVUP 06/84 DBC\n         SPACE 1                                              06/84 DBC\nTU$UPDAT MVC   IEBUPXXX,=C'IEBUPDAT' RESET \"UNLOADER\" NAME    06/84 DBC\n         LM    R0,R1,TU$SAVE2      RESTORE NAME POINTER       06/84 DBC\n         B     4(,LKR)             RETURN WITH NAME           06/84 DBC\n         SPACE 2\nTU$MEM   LA    R1,7(,R1)                POINT TO MEMBER NAME\n         B     *+8                      SKIP OTHER LA\n         SPACE 1\nTU$NAM   LA    R1,5(,R1)                POINT TO MEMBER NAME\n         SPACE 1\n         MVI   8(R1),C','               BE SURE TO STOP\n         B     4(,LKR)                  FOUND A NAME\n         EJECT ,                                              07/85 DBC\n************************************************************* 07/85 DBC\n*        TEST TO SEE IF THE CURRENT FILE IS A SMPPTFIN      * 07/85 DBC\n*        FILE.                                              * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTF ST    LKR,DWD             SAVE THE RETURN PTR        07/85 DBC\n         LA    R2,80               GET BXLE SCANNER           07/85 DBC\n         LA    R15,TAPEBUFF        --> TAPE BUFFER            07/85 DBC\n         LR    R3,R15              GET -                      07/85 DBC\n         AL    R3,LASTSIZE          BXLE -                    07/85 DBC\n         SLR   R3,R2                 LIMIT                    07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTL LR    R1,R15              --> NEXT CARD              07/85 DBC\n         BAL   LKR,TEST$PT         SEE IF IT'S ++PTF, ++APAR, 07/85 DBC\n*                                  ++FUNCTION, OR ++USERMOD   07/85 DBC\n         B     TEST$PTB            +0 NOPE, SKIP TO NEXT CARD 07/85 DBC\n         MVC   UNLOADER(8),SMPPTFIN +4 YEP, NAME THE          07/85 DBC\n*                                  \"UNLOADER\"                 07/85 DBC\n         L     LKR,DWD             RESTORE RETURN ADDRESS     07/85 DBC\n         B     TEST$RET            GO RETURN TO CALLER        07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PTB BXLE  R15,R2,TEST$PTL     ADVANCE TO NEXT CARD AND   07/85 DBC\n*                                  LOOP TO TEST IT            07/85 DBC\n         SPACE 1                                              07/85 DBC\n         L     LKR,DWD             NO ++PTF ATC. CARD WAS     07/85 DBC\n*                                  FOUND. RESTORE LINK        07/85 DBC\n         BR    LKR                 RETURN EMPTY HANDED        07/85 DBC\n         SPACE 3                                              07/85 DBC\n************************************************************* 07/85 DBC\n*        SEE IF THE CURRENT RECORD IS A SMP SYSMOD HEADER   * 07/85 DBC\n*        CARD (++PTF, ++APAR, ++FUNCTION, OR ++USERMOD).    * 07/85 DBC\n*        NOTE, THIS SCAN EXAMINES ONLY ONE CARD AT A TIME.  * 07/85 DBC\n*        ACCORDINGLY, IT WILL WORK ONLY IF THE SYSMOD'S     * 07/85 DBC\n*        NAME IS NOT CONTINUED ONTO ANOTHER CARD.           * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nTEST$PT  CLC   =C'++',0(R1)        PLUSPLUS CARD?             07/85 DBC\n         BNER  LKR                 NO, RETURN +0              07/85 DBC\n         LA    R1,2(,R1)           YES, ADVANCE SCANNER       07/85 DBC\n         LA    R0,69               LOAD SCAN LIMIT            07/85 DBC\n         BAL   R14,F$CHARS         SKIP BLANKS                07/85 DBC\n         SPACE 1                                              07/85 DBC\n         LA    R14,7               L'SYSMOD TYPE NAME         07/85 DBC\n         CLC   =C'USERMOD',0(R1)   ++USERMOD?                 07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         LA    R14,3               NO, RESET L'NAME           07/85 DBC\n         CLC   =C'PTF',0(R1)       ++PTF?                     07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         LA    R14,8               NO, RESET L'NAME           07/85 DBC\n         CLC   =C'FUNCTION',0(R1)  ++FUNCTION?                07/85 DBC\n         BE    TP$SAVE             YES, PROCEED               07/85 DBC\n         CLC   =C'APAR',0(R1)      NO, ++APAR?                07/85 DBC\n         BNER  LKR                 NO, RETURN +0              07/85 DBC\n         LA    R14,4               YES, SET L'NAME            07/85 DBC\n         SPACE 1                                              07/85 DBC\nTP$SAVE  MVC   PTF#TYPE,0(R1)      SAVE SYSMOD TYPE           07/85 DBC\n         SR    R0,R14              DECR LOOP CNTL; TOO FAR?   07/85 DBC\n         BNPR  LKR                 YES, RETURN +0             07/85 DBC\n         ALR   R1,R14              NO, ADVANCE SCANNER        07/85 DBC\n         BAL   R14,F$CHARS         SKIP MORE BLANKS, IF ANY   07/85 DBC\n         CLI   0(R1),C'('          SUB-VALUE?                 07/85 DBC\n         BNER  LKR                 NO, RETURN +0              07/85 DBC\n         BCT   R0,TP$PTF           YES, DECR SCAN LIMIT       07/85 DBC\n         BR    LKR                 RETURN +0 IF TOO FAR       07/85 DBC\nTP$PTF   LA    R1,1(,R1)           ADVANCE ONE                07/85 DBC\n         BAL   R14,F$CHARS         SKIP MORE BLANKS, IF ANY   07/85 DBC\n         B     4(,LKR)             RETRUN +4 WITH A POINTER   07/85 DBC\n*                                  TO THE SYSMOD NAME.        07/85 DBC\n         EJECT ,                                              07/85 DBC\n************************************************************* 12/88 SBG\n*  WE WANT TO CHECK IF WE HAVE FILE 1 FROM A REAL CBT TAPE. * 12/88 SBG\n*   IF THAT'S WHAT WE HAVE, WE WANT TO REPORT THE VERSION   * 12/88 SBG\n*   NUMBER AND CREATION DATE OF THAT CBT TAPE.              * 12/88 SBG\n************************************************************* 12/88 SBG\nTEST$CH  ST    R15,CBSAVE15        SAVE REG 15                12/88 SBG\n         LA    R15,TAPEBUFF        CBT HEADER. LOOK FOR       12/88 SBG\n         CLC   CHJOBLIT,0(R15)     ARNIE CASINGHINO'S JOBNAME 12/88 SBG\n         BE    TEST$CHG            CBT HEADER                 12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         BR    LKR                 RETURN NOT FOUND           12/88 SBG\nTEST$CHG MVC   UNLOADER(8),CBHEADER     FLAG AS FILE 1 OF CBT 12/88 SBG\n         MVI   CSTATCLR,X'40'      CLEAR VERS & DATE          12/88 SBG\n         MVC   CBTVERS(12),CSTATCLR   NOW DO IT .             12/88 SBG\n         ST    R4,CBSAVE4          SAVE REG 4                 12/88 SBG\n         LR    R4,R15              ADDR OF TAPE BUFFER        12/88 SBG\n         A     R4,CDOCSIZE         END OF BLOCK ADDRESS       12/88 SBG\nTEST$CHL LA    R15,1(,R15)         SEARCH FOR DATE AND VERSION12/88 SBG\n         CR    R15,R4              END OF BLOCK YET?          12/88 SBG\n         BNL   TEST$CHR            NO DATE OR VERSION FOUND   12/88 SBG\n         CLC   VERSLIT1,0(R15)     DATE HDR FOUND?            12/88 SBG\n         BE    TEST$CHD            YEP. GET DATE.             12/88 SBG\n         CLC   VERSLIT2,0(R15)     VERSION # HDR FOUND?       12/88 SBG\n         BNE   TEST$CHL            NOPE. KEEP TRYING.         12/88 SBG\nTEST$CHV MVC   CBTVERS(4),10(R15)  SAVE VERSION #             12/88 SBG\n         L     R4,CBSAVE4          RESTORE REG 4              12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         B     TEST$RET            DONE WITH EXTRACTION.      12/88 SBG\nTEST$CHD MVC   CBTDATE(8),10(R15)  SAVE TAPE RELEASE DATE     12/88 SBG\n         B     TEST$CHL            KEEP TRYING FOR VERSION #. 12/88 SBG\nTEST$CHR L     R4,CBSAVE4          RESTORE REG 4              12/88 SBG\n         L     R15,CBSAVE15        RESTORE REG 15             12/88 SBG\n         BR    LKR                 RETURN UNSUCCESSFUL        12/88 SBG\n         EJECT                                                12/88 SBG\nF$BLANK  BCTR  R0,0                     -1 FROM LENGTH\n         CLI   0(R1),C' '               GOT A BLANK YET?\n         BER   R14                      YES - RETURN\n         LA    R1,1(,R1)                MOVE SCAN PTR\n         BCT   R0,F$BLANK+2             KEEP SCANNING\n         BR    LKR                      NONE--RETURN TO CALLER'S CALLER\n         SPACE 2\nF$CHARS  BCTR  R0,0                     -1 FROM LENGTH\n         CLI   0(R1),C' '               FIND A CHAR?\n         BNER  R14                      YES - RETURN\n         LA    R1,1(,R1)                INCR SCAN PTR\n         BCT   R0,F$CHARS+2             KEEP SCANNING\n         BR    LKR                      NONE--RETURN TO CALLER'S CALLER\n         SPACE 2\nTEST$DMP CLC   =X'F47006016663B24D',TAPEBUFF+12  IEHDASDR'S TRADEMARK?\n         BNER  LKR                      NO\n         MVC   UNLOADER(8),IEHDASDR     SAY WHO\n         MVC   DASDRSAV(24),TAPEBUFF    SAVE HEADER RECORD\n         LR    R2,LKR                   SAVE RETURN ADDR\n         TAPIO TCCW#DAT                 IGNORE CCWS\n         SPACE 1\nCOM$DUMP TAPIO TCCW#DAT                 READ FIRST TRK'S DATA\n         MVC   FDRSAVE(8),TAPEBUFF+12   SAVE IN CASE FDR\n         LR    LKR,R2                   RETURN\n         B     TEST$RET\n         SPACE 2\nTEST$FDR CLC   =C'THATS ALL FOLK',TAPEBUFF+5   HIS TRADEMARK?\n         BNER  LKR                      NO\n         LR    R2,LKR                   SAVE RETURN ADDR\n         MVC   DASDRSAV(24),TAPEBUFF    SAVE HEADER RECORD\n         MVC   UNLOADER(3),FDR          SAY FDR FOR NOW\n         CLI   TAPEBUFF+19,C'S'         WAS IT FDR?\n         BE    COM$DUMP                 YES\n         MVC   UNLOADER(6),FDRDSF       NO  - MAYBE FDRDSF\n         CLI   TAPEBUFF+19,C'F'         FDRDSF?\n         BE    COM$DUMP                 YES\n         MVC   UNLOADER(6),FDRXXX       NO  - BUT SOME KIND OF FDR?\n         B     COM$DUMP                 CONTINUE\n         SPACE 2\nTEST$SLK CLC   =F'20',LASTSIZE     RIGHT LENGTH FOR SLICK HDR 09/84 DBC\n         BNER  LKR\n         CLC   TAPEBUFF+8(12),FFS         FF'S AT END OF RECORD?\n         BNER  LKR\n         CLI   TAPEBUFF+1,C'B'          BACKUP FLAG PRESENT?\n         BNER  LKR\n         MVC   DASDRSAV(20),TAPEBUFF    SAVE THE FIRST RECORD\n         LR    R2,LKR                   SAVE RETURN ADDR\n         TAPIO TCCW#DAT                 GET 2ND RECORD\n         LR    LKR,R2                   RESTORE RETURN ADDR\n         CLC   TAPEBUFF(2),=H'0'        1ST HALFWORD = 0?\n         BNER  LKR\n         CLC   TAPEBUFF+2(2),=H'0'      2ND HALFWORD = 0 OR FF'S?\n         BE    TEST$SK1\n         CLC   TAPEBUFF+2(2),FFS\n         BNER  LKR\nTEST$SK1 LH    R2,TAPEBUFF+4            VERIFY LENGTH OF RECORD\n         LTR   R2,R2\n         BNPR  LKR\n         LA    R2,8(,R2)\n         C     R2,LASTSIZE         LENGTH OK?                09/84 DBC\n         BNER  LKR\n         CLC   TAPEBUFF+6(2),=H'0'      LAST HALF OF RDW = 0?\n         BNER  LKR\n         MVC   UNLOADER(8),SLICKMNG     SHOW SLICKMNG AS UNLOADER\n         B     TEST$RET                 RETURN TO MAINLINE\n         SPACE 3\n* FOR IEBISAM, THE BEGINNING OF THE DCB IS UNLOADED TO THE FIRST\n* TWO CARDS.  SO CHECK (GUESS?) IF IT LOOKS LIKE AN ISAM DCB\nTEST$IS  CLC   TAPEBUFF(4),=Y(0,154)    SEQ # AND LENGTH CORRECT?\n         BNER  LKR                      NO\n         CLC   TAPEBUFF+80(2),H1        SECOND SEQ # CORRECT\n         BNER  LKR                      NO\n         TM    TAPEBUFF+4+48,X'10'      DCBOFLGS,DCBOFOPN\n         BNOR  LKR                      NOT \"OPEN\"\n         CLI   TAPEBUFF+4+26,X'80'      DSORG=IS?\n         BE    *+10                     YES - CONTINUE\n         CLI   TAPEBUFF+4+26,X'81'      DSORG=ISU?\n         BNER  LKR                      NO\n         MVC   UNLOADER(7),IEBISAM      SAY WHO\n         B     TEST$RET                 RETURN\n         SPACE 3\nTEST$MAP CLC   =C'$$TAPEMAP.PRINT.FILE$$',TAPEBUFF  CHECK FOR HEADER\n         BNER  LKR                      NO\n         L     R1,LASTSIZE         VERIFY BLOCK MULT OF 80 BY 09/84 DBC\n         SR    R0,R0\n         LA    R2,80\n         DR    R0,R2\n         LTR   R0,R0\n         BNZR  LKR                      NO\n         MVC   UNLOADER(7),CTAPEMAP     YES - THIS IS FOR US\n         B     TEST$RET\n         EJECT\nIEBUPDT1 MVC   OUTBUFF2+8(27),=C'IS AN IEBUPXXX INPUT STREAM' 07/85 DBC\n         MVC   OUTBUFF2+14(8),IEBUPXXX CORRECT RELOADER NAME  07/85 DBC\n         B     PRT$ONE             GO RELOOP                  07/85 DBC\n         SPACE 3                                              07/85 DBC\nPTFS1    MVC   OUTBUFF2+8(35),=C'IS AN SMPPTFIN SYSMODS INPUT STREAM' C\n         B     PRT$ONE             GO RELOOP                  07/85 DBC\n         SPACE 3                                              07/85 DBC\nCBT1     CLC   CBTEMPTY,UNLOADER        CBT EMPTY FILE        11/88 SBG\n         BE    CBTEMP1                  PRINT SPECIAL INFO    11/88 SBG\n         MVC   OUTBUFF2+8(28),=C'IS IN CBT973 COMPRESS FORMAT'  /88 SBG\n         B     PRT$ONE             GO RELOOP                  11/88 SBG\n         SPACE 3                                              07/85 DBC\nCBTEMP1  MVC   OUTBUFF2+8(25),=C'IS AN EMPTY CBT TAPE FILE'   11/88 SBG\n         B     PRT$ONE             GO RELOOP                  11/88 SBG\n         SPACE 3                                              07/85 DBC\nCBTDOC1  MVC   OUTBUFF2+8(27),=C'CBT TAPE DOCUMENTATION FILE' 12/88 SBG\n         B     PRT$ONE             GO RELOOP                  12/88 SBG\n         SPACE 3                                              12/88 SBG\nIEHMOVE1 MVC   #BLKCNT+OUTBUFF2-OUTBUFF(4),=C'DSN='\n         MVC   #BLKCNT+OUTBUFF2-OUTBUFF+4(44),TAPEBUFF+85 MOVE DISK DSN\n         SPACE 1\n         BAL   LKR,SET$ONE\n         DC    Y(169)                   DSORG OFFSET\n         DC    Y(171)                   RECFM OFFSET\n         DC    Y(173)                   BLKSIZE OFFSET\n         DC    Y(175)                   LRECL OFFSET\n         SPACE 3\nIEBCOPY1 BAL   LKR,SET$ONE\n         DC    Y(12)                    DSORG OFFSET\n         DC    Y(18)                    RECFM OFFSET\n         DC    Y(14)                    BLKSIZE OFFSET\n         DC    Y(16)                    LRECL OFFSET\n         SPACE 3\nIEBISAM1 BAL   LKR,SET$ONE\n         DC    Y(4+26)                  DSORG OFFSET\n         DC    Y(4+36)                  RECFM OFFSET\n         DC    Y(4+62)                  BLKSIZE OFFSET\n         DC    Y(4+2+82)                LRECL OFFSET\n         SPACE 3\nSET$ONE  MVC   OUTBUFF2+8(24),=C'TRUE ATTRIBUTES:  DSORG='\n         ICALL CNVDSORG,R14,R15=OUTBUFF2+32 FORMAT THE DSORG\n         ICALL CNVRECFM,R14,R15=#RECFM+OUTBUFF2-OUTBUFF\n         SPACE 1\n         LA    R1,TAPEBUFF\n         AH    R1,4(,LKR)               POINT TO BLKSIZE\n         ICALL CONVHALF,R14,R15=#BLKSIZE-1+OUTBUFF2-OUTBUFF\n         SPACE 1\n         LA    R1,TAPEBUFF\n         AH    R1,6(,LKR)               POINT TO LRECL\n         ICALL CONVHALF,R14,R15=#LRECL-1+OUTBUFF2-OUTBUFF\n         SPACE 2\n*  FOR PARM=INLINE, THE REPORT MUST PRINT BOTH THE RESULTS    12/88 SBG\n*  OF THE LABEL PROCESSING (FOR SL) AND THE RESULTS OF THE    12/88 SBG\n*  SCAN PROCESSING.                                           12/88 SBG\nPRT$ONE  TM    TFLAG1,T1@SL             SL TAPE?              12/88 SBG\n         BNO   PRT$ONEX                 NO. DO NORMAL STUFF   12/88 SBG\n         TM    PARMFLAG,PF@INLIN        INLINE ?              12/88 SBG\n         BO    FIND$EOF                 REGULAR INLINE STUFF  12/88 SBG\nPRT$ONEX TM    TFLAG1,T1@ANLZ           ANALYZING?            12/88 SBG\n         BNO   FIND$EOF                 NO\n         B     NL$LOOP                  YES - KEEP SCANNING NL TAPE\n         SPACE 3\n*  FIRST RECORD SAVED IN \"DASDRSAV\"\nIHDASDR1 MVC   OUTBUFF2+8(15),=C'DUMP FROM CCHH='\n         UNPK  OUTBUFF2+23(9),DASDRSAV+0(5)\n         TR    OUTBUFF2+23(8),HEXTAB    MAKE EBCDIC\n         MVC   OUTBUFF2+31(5),=C' OF A'\n         IC    R1,DASDRSAV+21           GET DEVTYPE\n         N     R1,=F'255'               CLEAN\n         MH    R1,=H'6'\n         LA    R14,=C'2321  2311  2314  2302  2301  2305-12305-23330  3*\n               340  3350  3375  3330-13380  '                 06/84 DBC\n         LA    R14,0(R14,R1)            GET ADDR OF THIS DEVTYPE\n         MVC   OUTBUFF2+37(6),0(R14)    MOVE TO PRINT LINE\n         CLC   =F'0',DASDRSAV+8         THIS TAPE START AT 0?\n         BNE   PRT$ONE                  NO - CAN'T FIND VOLSER\n*  SECOND RECORD IS IN \"TAPEBUFF\"\n         CLC   =C'VOL1VOL1',TAPEBUFF+216  LABEL?\n         BNE   PRT$ONE                  NO - SKIP\n         MVC   OUTBUFF2+46(7),=C'VOLUME='\n         MVC   OUTBUFF2+53(6),TAPEBUFF+224\n         MVC   OUTBUFF2+61(6),=C'OWNER='\n         MVC   OUTBUFF2+67(10),TAPEBUFF+261\n         B     PRT$ONE\n         SPACE 3\n* FIRST RECORD SAVED IN \"DASDRSAV\"\nFDR1     MVC   OUTBUFF2+8(20),=C'DUMPED FROM A UUUUUU'\n         MVC   FDRDVEND(1),DASDRSAV+4   SET UP FENCE FOR DEV TYPE\n         LA    R1,FDRDVTAB              POINT TO FDR DEV TYPE TABLE\nFDR1LOOP CLC   DASDRSAV+4(1),0(R1)      MATCH?\n         BE    FDR1FND                  YES\n         LA    R1,7(,R1)                NO  - BUMP TO NEXT ENTRY\n         B     FDR1LOOP\nFDR1FND  MVC   OUTBUFF2+22(6),1(R1)     PUT DEV TYPE IN MESSAGE\n         CLC   =C'DUMMYDSF',FDRSAVE     IS IT A NORMAL DUMP?\n         BE    PRT$ONE                  YES - ALL FOR NOW\n*                                       NO  - MUST BE ABS TRK DUMP\n         MVC   OUTBUFF2+28(22),=C' (ABSOLUTE TRACK DUMP)'\n         B     PRT$ONE\n         SPACE 3\nSLK1     MVC   OUTBUFF2+8(30),=C'SLICK LIBRARY BACKUP, CYCLE = '\n         MVC   OUTBUFF2+38(1),DASDRSAV  PUT IN THE CYCLE NUMBER\n         MVC   OUTBUFF2+39(12),=C', MAXSIZE = '\n         ICALL CONVHALF,R14,R1=DASDRSAV+2,R15=OUTBUFF2+41\n         B     PRT$ONE                  PRINT THE INFO LINE\n         EJECT\nIEHMOVE2 LA    R0,7                     ASSUME PARM=NOMEM\n         TM    PARMFLAG,PF@NOMEM        IS IT?\n         BO    *+8                      YES\n         LA    R0,9                     NO\n         TM    TAPEBUFF+169,X'02'       DSORG=PO?\n         BO    *+8                      YES\n         LA    R0,7                     NO\n         NEWPAGE  (R0),2                ENOUGH LINES LEFT ON PAGE?\n         SPACE 1\n         BAL   LKR,SET$FULL             SET UP HEADER\n         DC    Y(169)                   DSORG OFFSET\n         DC    Y(171)                   RECFM OFFSET\n         DC    Y(173)                   BLKSIZE OFFSET\n         DC    Y(175)                   LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEHMOVE   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,LKR,R1=TAPEBUFF+282 CONVERT UNIT TYPE\n         SPACE 1\n         PRTLN2                         PRINT FIRST INFO LINE\n         SPACE 1\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FOR MSM\n         MVC   OUTBUFF2+25(7),=C'C-DATE='\n         ICALL CONVDATE,LKR,R1=TAPEBUFF+138,R15=OUTBUFF2+32 C-DATE\n         SPACE 1\n         MVC   OUTBUFF2+42(7),=C'E-DATE='\n         ICALL CONVDATE,LKR,R1=TAPEBUFF+141,R15=OUTBUFF2+49 E-DATE\n         SPACE 1\n         MVC   OUTBUFF2+59(4),=C'DSN='\n         MVC   OUTBUFF2+63(44),TAPEBUFF+85       MOVE IN OLD DSN\n         SPACE 1\n****     CLC   =C'VS2',TAPEBUFF+152     CHECK PROGRAMMING SYSTEM\n****     BE    MV$NOVOL                 SKIP IF OS/VS2\n         TM    TAPEBUFF+132,X'0F'       SEE IF LOOKS LIKE PACKED DATE\n         BO    MV$NOVOL                 SKIP IF NEW FORMAT IEHMOVE DS\n         CLI   TAPEBUFF+135,0           INVALID FOR VOLSER ANYWAY?\n         BE    MV$NOVOL                 SKIP IF NEW FORMAT IEHMOVE DS\n         MVC   OUTBUFF2+120(4),=C'VOL='\n         MVC   OUTBUFF2+124(6),TAPEBUFF+130\n         SPACE 1\nMV$NOVOL PRTLN2                         PRINT SECOND INFO LINE\n         SPACE 2\n         TM    TAPEBUFF+169,X'02'       DSORG=PO?\n         BNO   STAR$TWO                 NO - SKIP\n         BAL   LKR,FMU$                 PRINT HEADER\n         SPACE 2\n         L     BLEN,LASTSIZE       GET SIZE OF BLOCK          09/84 DBC\n         SH    BLEN,=H'80'              MINUS FIRST CARD USED\n         LA    BPTR,TAPEBUFF+80         -> NEXT CARD TO USE\n         BAL   LKR,SEG$NEXT             NOW HAVE CARDS 1 & 2\n         BAL   LKR,SEG$NEXT             NOW 2 & 3\n         BAL   LKR,SEG$NEXT             NOW 3 & 4\n         BAL   LKR,SEG$NEXT             NOW 4 & 5\n         LA    DPTR,MV#BUFF1+46         -> FIRST MEMBER NAME -4\n         CLI   0(DPTR),X'C8'            START OF MEMBER?\n         BE    MV$GOT1                  YES\n         LA    DPTR,3(,DPTR)            -> OTHER PLACE\n         CLI   0(DPTR),X'C8'            START OF MEMBER?\n         BE    MV$GOT1                  YES\n         BAL   R14,BOOM                 PRINT LOGIC ERROR MSG\n         SPACE 2\nMV$GOT1  LA    DPTR,4(,DPTR)            -> FIRST MEMBER NAME\n         SPACE 2\nMV$LOOP  BAL   LKR,MOVE$MEM             MEMBER NAME TO PRINT LINE\n         BAL   LKR,SEG$TEST             SEE IF WITHIN RANGE\n         SPACE 2\n*  RECORDS IN AN IEHMOVE UNLOADED DATASET HAVE THE FOLLOWING FORMAT:\n*  FIRST 2 BYTES OF EACH CARD IS A BINARY SEQUENCE NUMBER.\n*  AFTER THAT, THERE IS SOME HEADER INFO (THE FMT1 DSCB + OTHER JUNK),\n*  THEN THE RECORDS IN THIS FORMAT:  LENGTH OF THIS \"RECORD\", 1 BYTE\n*  INDICATOR WITH THE FOLLOWING BIT MEANINGS:\n*    X'80' -> 3 BYTE TTR FOLLOWS INDICATOR BYTE\n*    X'40' -> UNLOADED DS IS PDS\n*    X'20' -> RECORD IS PART OF A MEMBER\n*    X'10' -> RECORD IS A NOTE LIST\n*    X'08' -> RECORD IS A DIRECTORY ENTRY\n*    X'04' -> RECORD IS A DUMMY RECORD\n*  THIS INFORMATION IS IN THE SOURCE TO MODULE IEHMVSRA\n         SPACE 1\nMV$NXTBL CLI   2(DPTR),X'E0'            DATA RECORD?\n         BE    MV$REC                   YES\n         CLI   2(DPTR),X'D0'            NOTE LIST RECORD?\n         BE    MV$REC                   YES\n         CLI   2(DPTR),X'C8'            DIRECTORY RECORD?\n         BE    MV$MEND                  YES\n         CLI   2(DPTR),X'C4'            DUMMY RECORD?\n         BE    MV$DUMMY                 YES\n         CLI   2(DPTR),X'0A'            END OF DS?\n         BNH   DIR$END                  YES\n*** LOGIC ERROR ***\n         PRTLN2                         PRINT (POSSIBLY) UNFINISHED LIN\n         BAL   R14,BOOM                 PRINT LOGIC ERROR MSG\n         SPACE 2\nMV$DUMMY MVC   DWD(2),0(DPTR)           COPY LENGTH TO ALIGNED PLACE\n         LH    DLEN,DWD                 LOAD LENGTH OF DUMMY RECORD\n         LA    DPTR,12(DPTR,DLEN)       POINT TO NEXT\n         BAL   LKR,SEG$TEST             MAKE SURE STILL WITHIN RANGE\n         B     MV$LOOP                  DO NEXT MEMBER NAME\n         SPACE 2\nMV$REC   MVC   DWD(2),0(DPTR)           COPY LEN TO ALIGNED PLACE\n         LH    DLEN,DWD                 GET BLOCK LENGTH\n         LA    DPTR,6(DPTR,DLEN)        POINT PAST LEN,E0,TTR,DATA\n         SPACE 2\nMV$SCAN  CL    DPTR,MV#ABUF2            WITHIN RANGE?\n         BL    MV$NXTBL                 YES - PROCESS NEXT BLOCK\n         BAL   LKR,SEG$NEXT             SKIP 78 BYTES\n         B     MV$SCAN                  KEEP GOING\n         SPACE 2\nMV$MEND  LA    DPTR,6(,DPTR)            -> MEMBER NAME\n         BAL   LKR,SEG$TEST             WITHIN RANGE?\n         B     MV$LOOP                  GO PRINT NEXT NAME\n         SPACE 2\nSEG$TEST CL    DPTR,MV#ABUF2            WITHIN RANGE?\n         BLR   LKR                      YES - JUST RETURN\n         SPACE 1\nSEG$NEXT MVC   MV#BUFF1,MV#BUFF2\n         LTR   BLEN,BLEN                ANY LEFT?\n         BP    SEG$MVC                  YES - USE IT\n         BZ    *+8                      NO\n* RAN OFF END OF DATASET\n***      EX    0,*                      *** LOGIC ERROR ***\n         B     DIR$END                  FORGET THAT - IT'S THE END\n         SPACE 1\n         ST    LKR,LKRSAVE              SAVE RETURN ADDR\n         TAPIO TCCW#DAT,TM=SEG$EOF      READ ANOTHER BLOCK\n         L     LKR,LKRSAVE              RESTORE RETURN ADDR\n         LA    BPTR,TAPEBUFF            RESET PTR\n         L     BLEN,LASTSIZE       AND LENGTH LEFT            09/84 DBC\n         SPACE 1\nSEG$MVC  SH    BLEN,=H'80'              DECR LENGTH LEFT / THIS BLOCK\n         MVC   MV#BUFF2,2(BPTR)         MOVE A SEGMENT\n         LA    BPTR,80(,BPTR)           -> NEXT SEGMENT\n         SH    DPTR,=H'78'              BACK UP DATA PTR\n         BR    LKR                      RETURN TO CALLER\n         SPACE 2\nSEG$EOF  BCTR  BLEN,0                   SET FLAG\n         L     LKR,LKRSAVE              RESTORE RETURN ADDR\n         OI    TFLAG1,T1@MVEOF          REMEMBER HIT EOF\n         BR    LKR                      RETURN TO CALLER\n         SPACE 3\nCONVDATE SR    R0,R0                    CLEAR FOR IC\n         IC    R0,0(,R1)                GET THE YEAR\n         CVD   R0,DWD                   CONVERT TO PACKED\n         UNPK  0(3,R15),DWD+6(2)        AND THEN TO EBCDIC\n         OI    2(R15),C'0'              FIX SIGN\n         MVC   0(2,R15),1(R15)          MOVE YEAR OVER\n         MVI   2(R15),C'.'              PUT IN THE DOT\n         MVC   DWD(2),1(R1)             MOVE DAY TO ALIGNED PLACE\n         LH    R0,DWD                   GET THE YEAR\n         CVD   R0,DWD                   CONVERT TO PACKED\n         UNPK  3(3,R15),DWD+6(2)        AND THEN TO EBCDIC\n         OI    5(R15),C'0'              FIX THE SIGN\n         BR    LKR                      RETURN TO CALLER\n         EJECT\nIEBCOPY2 LA    R0,7                     ASSUME MEMBERS\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEMBERS?\n         BNO   *+8                      NOPE - OK\n         LA    R0,5                     NO MEMBERS\n         NEWPAGE  (R0),2                TEST LINE COUNTER\n         SPACE 1\n         BAL   LKR,SET$FULL             SET UP HEADER\n         DC    Y(12)                    DSORG OFFSET\n         DC    Y(18)                    RECFM OFFSET\n         DC    Y(14)                    BLKSIZE OFFSET\n         DC    Y(16)                    LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEBCOPY   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,LKR,R1=TAPEBUFF+24  FORMAT THE UNIT TYPE\n         SPACE 2\n         BAL   LKR,FMU                  'FOLLOWING MEMBERS UNLOADED:'\n         SPACE 2\n         TAPIO TCCW#DAT                 IGNORE THE NEXT BLOCK\n         SPACE 2\nIBCPY$LP TAPIO TCCW#DAT                 READ A DIRECTORY BLOCK\n         LH    BLEN,TAPEBUFF+4          GET RDW\n         SH    BLEN,=H'8'               -8 FOR BDR & RDW\n         LA    BPTR,TAPEBUFF+8          INIT BLOCK PTR\n         SPACE 2\nDIR$NEXT LA    DPTR,22(,BPTR)           INIT DIR BLK PTR\n         LH    DLEN,20(,BPTR)           GET LENGTH USED\n         SH    DLEN,=H'2'               LENGTH OF DATA\n         SPACE 2\nDIR$LP   CLC   0(8,DPTR),=8X'FF'        END OF DIRECTORY?\n         BE    DIR$END                  YES - DONE\n         BAL   LKR,MOVE$MEM             MOVE NAME TO PRINT LINE\n         LTR   DLEN,DLEN                ANYTHING LEFT?\n         BP    DIR$LP                   CONTINUE IF MORE LEFT\n         LA    BPTR,256+12+8(,BPTR)     NEXT DIRECTORY BLOCK\n         SH    BLEN,=Y(256+12+8)        DECR LENGTH LEFT\n         BP    DIR$NEXT                 MORE IN THIS TAPE BLOCK\n         B     IBCPY$LP                 GET NEXT BLOCK FROM TAPE\n         SPACE 2\nDIR$END  LA    R0,OUTBUFF2+16           GET START PTR FOR COMPARE\n         CR    R0,PPTR                  ANY ON THIS LINE?\n         BE    STAR$TWO                 NO - DONE\n         PRTLN2                         PRINT PARTIAL LINE\n         B     STAR$TWO                 CONTINUE PROCESSING\n         SPACE 3\nMOVE$MEM MVC   0(8,PPTR),0(DPTR)        MOVE NAME TO PRINT LINE\n         IC    R1,11(,DPTR)             GET USER DATA LENGTH\n         N     R1,=F'31'                STRIP OFF JUNK\n         LA    R1,12(R1,R1)             GET LENGTH OF ENTRY\n         AR    DPTR,R1                  ADVANCE DIR PTR\n         SR    DLEN,R1                  DECR LENGTH LEFT\n         SPACE 1\n         LA    PPTR,10(,PPTR)           NEXT PRINT LINE POSITION\n         CL    PPTR,OB2END              END OF PRINT LINE?\n         BNHR  LKR                      NO - RETURN\n         LR    PPTR,LKR                 SAVE RETURN ADDR\n         PRTLN2                         PRINT IT\n         LR    LKR,PPTR                 RESTORE RETURN ADDR\n         LA    PPTR,OUTBUFF2+16         RESET PTR\n         BR    LKR                      RETURN TO CALLER\n         EJECT ,                                              09/84 DBC\nIEBUPDT2 LA    R0,7\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEM?\n         BNO   *+8                      NO\n         LA    R0,5                     YES\n         NEWPAGE  (R0),2\n         BAL   LKR,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(27),=C'IS AN IEBUPXXX INPUT STREAM' 6/84 DBC\n         MVC   OUTBUFF2+37(8),IEBUPXXX CORRECT RELOADER NAME  06/84 DBC\n         MVC   OUTBUFF2+58(55),=C':   A-ADD   C-CHANGE   R-REPLACE   > X\n               = SUBORDINATE NAME'                            11/88 SBG\n         BAL   LKR,FMU                  'FOLLOWING MEMBERS UNLOADED:'\n         SPACE 2\nUPDTE$L1 LA    BLEN,80                  BXLE INCR\n         LA    DPTR,TAPEBUFF            POINT TO START\n         LR    BPTR,DPTR                COPY START ADDR\n         A     BPTR,LASTSIZE       POINT PAST END OF BLOCK    09/84 DBC\n         SR    BPTR,BLEN                BACK UP FOR BXLE\n         SPACE 1\nUPDTE$L2 LR    R1,DPTR                  COPY CARD ADDR\n         BAL   LKR,TEST$UP              IS THIS ONE?\n         B     UPDTE$BX                 NO - SKIP\n         SPACE 1\n         MVC   0(1,PPTR),UPDT#TYP       MOVE A,R,C\n         MVI   1(PPTR),C'-'             SEPARATOR\n         CLI   UPDTXFLG,C'>'            SUBORDINATE MEMBER?   11/88 SBG\n         BNE   UPDTE$LB                 NO. USE - AS SEPARATOR11/88 SBG\n         MVI   1(PPTR),C'>'             SUBORD.  USE >.       11/88 SBG\nUPDTE$LB DS    0H                       GO PUT IN MEMBER NAME 11/88 SBG\n         MVC   2(8,PPTR),0(R1)          MEMBER NAME\n         LA    R1,1(,PPTR)\nUPDTE$L3 CLI   0(R1),C','               END OF MEMBER NAME?\n         BE    UPDTE$EM                 YES\n         CLI   0(R1),C' '               END OF MEMBER NAME?\n         BE    UPDTE$EM                 YES\n         LA    R1,1(,R1)                INCR SCAN PTR\n         B     UPDTE$L3                 CONTINUE\n         SPACE 1\nUPDTE$EM MVC   0(7,R1),OUTBUFF+1        BLANK OUT GARBAGE\n         LA    PPTR,11(,PPTR)           BUMP PRINT LINE PTR\n         CL    PPTR,OB2END2             PAST END?\n         BNH   UPDTE$BX                 NO - CONTINUE\n         PRTLN2                         PRINT THE MEMBERS\n         LA    PPTR,OUTBUFF2+16         RESET PTR\n         SPACE 1\nUPDTE$BX BXLE  DPTR,BLEN,UPDTE$L2       KEEP SCANNING\n         TAPIO TCCW#DAT,TM=UPDT$EOF     GET NEXT BLOCK\n         B     UPDTE$L1                 GO CHECK IT\n         SPACE 2\nUPDT$EOF OI    TFLAG1,T1@MVEOF          SET \"HIT EOF\"\n         B     DIR$END                  CLEAN UP\n         EJECT ,                                              07/85 DBC\nCBT2     DS    0H   INSERT CODE TO DISPLAY MEMBERS FOR CBT973.11/88 SBG\n         LA    R0,7                                           11/88 SBG\n         TM    PARMFLAG,PF@NOMEM        PARM=NOMEM?           11/88 SBG\n         BNO   *+8                      NO                    11/88 SBG\n         LA    R0,5                     YES                   11/88 SBG\n         NEWPAGE  (R0),2                                      11/88 SBG\n         BAL   LKR,SET$FULD             SET UP HEADER INFO    11/88 SBG\n         DC    4Y(0)                    FILLER                11/88 SBG\n         MVC   OUTBUFF2+31(27),=C'IS A CBT973 COMPRESSED FILE' 1/88 SBG\n         MVC   OUTBUFF2+58(55),=C':   A-ADD   C-CHANGE   R-REPLACE   > X\n               = SUBORDINATE NAME'                            11/88 SBG\n         BAL   LKR,FMU         'FOLLOWING MEMBERS UNLOADED:'  11/88 SBG\n         SPACE 2                                              11/88 SBG\n*   SAVE REGISTERS USED FOR CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 2                                              11/88 SBG\n*   **************          CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$D00  STM   R1,R5,CBSTOR01           REGS 1 THRU 5         11/88 SBG\n         STM   R8,R10,CBSTOR08          REGS 8 THRU 10        11/88 SBG\n         LA    R5,TAPEBUFF     BEGINNING OF BLOCK PROCESSING. 11/88 SBG\n         ST    R1,CBSTOR1          USE R1 FOR WORK REG NOW    11/88 SBG\n         LH    R1,0(,R5)           GET BLOCK SIZE FROM BDW    11/88 SBG\n         ST    R1,CBTBLK1          STORE BLOCK SIZE FOR LATER 11/88 SBG\n         AR    R1,R5               POINT PAST E-O-BLOCK       11/88 SBG\n         ST    R1,CBTAPEND         REMEMBER E-O-BLOCK ADDRESS 11/88 SBG\n         L     R1,CBSTOR1          RESTORE R1.                11/88 SBG\n         LA    R5,4(,R5)                POINT TO RDW          11/88 SBG\n*                              BEGINNING OF RECORD PROCESSING.11/88 SBG\nCBT$D0B  LA    R8,14(,R5)          POINT TO BEGIN OF DATA     11/88 SBG\n         ST    R1,CBSTOR1          USE R1 FOR WORK REG NOW    11/88 SBG\n         ST    R6,CBSTOR06         USE R6 FOR WORK REG NOW    11/88 SBG\n         LA    R1,0                CLEAR R1 POSITIVE          11/88 SBG\n*        IC    R1,1(,R5)           STORE RECORD SIZE FROM RDW 07/90 SBG\n         LH    R1,0(,R5)           STORE RECORD SIZE FROM RDW 07/90 SBG\n*   THIS IS NEVER BIGGER THAN 94 -- LET ALONE 255 ||          11/88 SBG\n         C     R1,=F'94'           LRECL=94 MAX FOR CBT973    07/90 SBG\n         BH    CBT$EOF             BREAK OUT OF LOOP IF BIGGER07/90 SBG\n         S     R1,=F'12'           -12 JUST TO GO PAST DATA   11/88 SBG\n*                                   AND LAST 2 HEADER BITS    11/88 SBG\n         LA    R5,2(,R5)           HALFWAY TO HEADER BITS     11/88 SBG\n         MVI   CBTCLEAR,X'40'      MOVE IN BLANK TO ...       11/88 SBG\n         MVC   CBTCARD,CBTCLEAR       CLEAR 80-BYTE WORKAREA. 11/88 SBG\n         LA    R9,CBTCARD          ADDRESS OF 80-BYTE CARD    11/88 SBG\n         LA    R6,5                5 LOOPS TO EXPAND CARD     11/88 SBG\nCBT$D0C  EQU   *                   EXPAND 16 BYTES AT A TIME  11/88 SBG\n         LA    R4,16               LOOP COUNTER               11/88 SBG\n         LA    R5,2(,R5)           BUMP HEADER BIT POINTER    11/88 SBG\n         ICM   R3,12,0(R5)         2 BYTES MASK BITS TO SLIDE 11/88 SBG\nCBT$D0D  EQU   *                   INNER LOOP TO DO 16 BYTES  11/88 SBG\n         SLR   R2,R2               CLEAR TARGET REGISTER      11/88 SBG\n         SLDL  R2,1                SLIDE OVER ONE MASK BIT    11/88 SBG\n         LTR   R2,R2               IS BIT 0 OR 1 ?            11/88 SBG\n         BZ    CBT$D0F             IF 0, NEEDS BLANK TO FILL  11/88 SBG\n         MVC   0(1,R9),0(R8)       MOVE THE NON-BLANK         11/88 SBG\n         LA    R8,1(,R8)           BUMP DATA PTR TO NEXT BYTE 11/88 SBG\nCBT$D0E  EQU   *                   RESTORE THE CARD-IMAGE     11/88 SBG\n         LA    R9,1(,R9)           POINT TO NEXT CARD BYTE    11/88 SBG\n         BCT   R4,CBT$D0D          RESTORE 16-BYTE GROUP      11/88 SBG\n         BCT   R6,CBT$D0C          DO THAT 5 TIMES            11/88 SBG\n         AR    R5,R1               BUMP POINTER TO NEXT RDW.  11/88 SBG\n         LM    R1,R4,CBSTOR01      REGS 1 THRU 4. 5 HAS PTR   11/88 SBG\n         LM    R8,R10,CBSTOR08     REGS 8 THRU 10             11/88 SBG\n*        L     R6,CBSTOR06         RESTORE R6. USED FOR PPTR. 11/89 SBG\n         B     CBT$L2              ONE CARD IS RESTORED, FOR  11/88 SBG\n*                                   PURPOSES OF EXAMINATION.  11/88 SBG\nCBT$D0F  EQU   *                   RTN TO INSERT A BLANK      11/88 SBG\n         MVI   0(R9),X'40'         MOVE BLANK IN TO DECOMPRESS11/88 SBG\n         B     CBT$D0E             CONTINUE RESTORING CARD.   11/88 SBG\n         SPACE 1                                              11/88 SBG\n*   **************   END OF CBT973 DECOMPRESS ROUTINE.        11/88 SBG\n         SPACE 2                                              11/88 SBG\n*  AT THIS POINT, A CARD-IMAGE OF DATA IS RESTORED INTO       11/88 SBG\n*    THE FIELD, CBTCARD.  WE THEN USE REGULAR IEBUPDTE        11/88 SBG\n*    PROCESSING TO LOOK FOR MEMBER NAMES.                     11/88 SBG\n         SPACE 2                                              11/88 SBG\nCBT$L2   L     PPTR,CBSTOR06       RESTORE REGISTER PPTR      11/88 SBG\n         LA    R1,CBTCARD          LOAD CARD ADDRESS          11/88 SBG\n         ST    R5,CBSTOR05         SAVE RECD PTR              11/88 SBG\n         BAL   LKR,TEST$UP         IS THIS A MEMBER INDICATOR 11/88 SBG\n         B     CBT$BX              NO - SKIP TO THE NEXT CARD 11/88 SBG\n         L     R5,CBSTOR05         RESTORE RECD PTR           11/88 SBG\n         SPACE 1                                              11/88 SBG\n         MVC   0(1,PPTR),UPDT#TYP    MOVE A,R,C               11/88 SBG\n         MVI   1(PPTR),C'-'             SEPARATOR             11/88 SBG\n         CLI   UPDTXFLG,C'>'            SUBORDINATE MEMBER?   11/88 SBG\n         BNE   CBT$LB                   NO. USE - AS SEPARATOR11/88 SBG\n         MVI   1(PPTR),C'>'             SUBORD.  USE >.       11/88 SBG\nCBT$LB   DS    0H                       GO PUT IN MEMBER NAME 11/88 SBG\n         MVC   2(8,PPTR),0(R1)          MEMBER NAME           11/88 SBG\n         LA    R1,1(,PPTR)                                    11/88 SBG\nCBT$L3   CLI   0(R1),C','               END OF MEMBER NAME?   11/88 SBG\n         BE    CBT$EM                   YES                   11/88 SBG\n         CLI   0(R1),C' '               END OF MEMBER NAME?   11/88 SBG\n         BE    CBT$EM                   YES                   11/88 SBG\n         LA    R1,1(,R1)                INCR SCAN PTR         11/88 SBG\n         B     CBT$L3                   CONTINUE              11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$EM   MVC   0(7,R1),OUTBUFF+1        BLANK OUT GARBAGE     11/88 SBG\n         LA    PPTR,11(,PPTR)           BUMP PRINT LINE PTR   11/88 SBG\n         CL    PPTR,OB2END2             PAST END?             11/88 SBG\n         BNH   CBT$BX                   NO - CONTINUE         11/88 SBG\n         ST    R5,CBSTOR05              SAVE RECD PTR         11/88 SBG\n         PRTLN2                         PRINT THE MEMBERS     11/88 SBG\n         ST    LCTR2,CBSTOR09           UPDATE LCTR2 SAVEREG  11/89 SBG\n         LA    PPTR,OUTBUFF2+16         RESET PTR             11/88 SBG\n         SPACE 1                                              11/88 SBG\nCBT$BX   L     R5,CBSTOR05              RESTORE RECD PTR      11/88 SBG\n         C     R5,CBTAPEND              AT END OF BLOCK YET?  11/88 SBG\n         BL    CBT$D0B                  NO. GET NEXT RECORD   11/88 SBG\n*    TRY TO RESTORE REGISTERS THAT MIGHT BE USED ELSEWHERE.   11/88 SBG\n         TAPIO TCCW#DAT,TM=CBT$EOF      GET NEXT BLOCK        11/88 SBG\n         B     CBT$D00                  GO CHECK IT           11/88 SBG\n         SPACE 2                                              11/88 SBG\nCBT$EOF  OI    TFLAG1,T1@MVEOF          SET \"HIT EOF\"         11/88 SBG\n         B     DIR$END                  CLEAN UP              11/88 SBG\n         EJECT ,                                              11/88 SBG\n************************************************************* 07/85 DBC\n*                                                           * 07/85 DBC\n*        THE CURRENT TAPE FILE CONTAINS SMPPTFIN SYSMODS.   * 07/85 DBC\n*        SCAN THE FILE TO GET THE NAMES OF THE SYSMODS      * 07/85 DBC\n*        CONTAINED THEREIN, AND DISPLAY THEM.               * 07/85 DBC\n*                                                           * 07/85 DBC\n************************************************************* 07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTFS2    LA    R0,7                REQUIRED HEADER SPACE      07/85 DBC\n         TM    PARMFLAG,PF@NOMEM   SCAN FOR \"MEMBERS\"?        07/85 DBC\n         BNO   *+8                 YES, PROCEED               07/85 DBC\n         LA    R0,5                NO, DON'T NEED SO MUCH     07/85 DBC\n         NEWPAGE (R0),2            WIDOW PREVENTION           07/85 DBC\n         SPACE 1                                              07/85 DBC\n         BAL   LKR,SET$FULD        MESSAGE SETUP              07/85 DBC\n         DC    4Y(0)                    FILLER                07/85 DBC\n         MVC   OUTBUFF2+31(35),=C'IS AN SMPPTFIN SYSMODS INPUT STREAM'\n         MVC   OUTBUFF2+66(43),=C':   A-APAR   F-FUNCTION   P-PTF   U-U*\n               SERMOD'             DEFINITIONS                07/85 DBC\n         BAL   LKR,FMU             DISPLAY THE MESSAGE        07/85 DBC\n         SPACE 3                                              07/85 DBC\nPTF$L1   LA    BLEN,80             BXLE INCRIMENT             07/85 DBC\n         LA    DPTR,TAPEBUFF       BXLE SCANNER               07/85 DBC\n         LR    BPTR,DPTR           SET -                      07/85 DBC\n         AL    BPTR,LASTSIZE        BXLE-                     07/85 DBC\n         SLR   BPTR,BLEN             LIMIT                    07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTF$L2   LR    R1,DPTR             MESSAGE SINK SCANNER       07/85 DBC\n         BAL   LKR,TEST$PT         DOES THE CURRENT CARD NAME 07/85 DBC\n*                                  THE START OF A NEW SYSMOD? 07/85 DBC\n         B     PTF$BX              +0 NO, SKIP                07/85 DBC\n         MVC   0(1,PPTR),PTF#TYPE  +4 YES, GET SYSMOD TYPE    07/85 DBC\n         MVI   1(PPTR),C'-'        FRAME                      07/85 DBC\n         MVC   2(7,PPTR),0(R1)     SYSMOD NAME (ALWAYS SEVEN  07/85 DBC\n*                                  CHARACTERS LONG)           07/85 DBC\n         LA    PPTR,10(,PPTR)      ADVANCE SINK SCANNERR      07/85 DBC\n         CL    PPTR,OB2END2        IS MSG LINE FULL?          07/85 DBC\n         BNH   PTF$BX              NOT YET; GOO LOOP          07/85 DBC\n         PRTLN2 ,                  YES, PRINT THE LINE        07/85 DBC\n         LA    PPTR,OUTBUFF2+16    RESET SINK SCANNER         07/85 DBC\nPTF$BX   BXLE  DPTR,BLEN,PTF$L2    CONTINUE SCANNING THE BLK  07/85 DBC\n         SPACE 1                                              07/85 DBC\n         TAPIO TCCW#DAT,TM=PTF$EOF READ NEXT BLOCK            07/85 DBC\n         B     PTF$L1              LOOP TO SCAN IT            07/85 DBC\n         SPACE 1                                              07/85 DBC\nPTF$EOF  OI    TFLAG1,T1@MVEOF     EOF; REMEMBER              07/85 DBC\n         B     DIR$END             GO DISPLAY FILE            07/85 DBC\n*                                  DESCRIPTION MESSAGES       07/85 DBC\n         EJECT ,                                              07/85 DBC\nIEBISAM2 BAL   LKR,SET$FULL             SET UP HEADER\n         DC    Y(4+26)                  DSORG OFFSET\n         DC    Y(4+36)                  RECFM OFFSET\n         DC    Y(4+62)                  BLKSIZE OFFSET\n         DC    Y(4+2+82)                LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEBISAM   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,LKR,R1=TAPEBUFF+4+17-3  CONVERT UNIT TYPE\n         SPACE 1\n         PRTLN2                         PRINT SECOND INFO LINE\n         B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nFDR2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BAL   LKR,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(14),=C'WAS DUMPED BY ' SET UP UNLOADER\n         MVC   OUTBUFF2+45(6),UNLOADER            MESSAGE\n         CLC   FDRSAVE,=C'DUMMYDSF'     NORMAL DUMP?\n         BE    *+10                     YES\n*                                       NO  - WARN USER\n         MVC   OUTBUFF2+54(22),=C' (ABSOLUTE TRACK DUMP)'\n         PRTLN2                         PRINT THE HEADER\n         TM    PARMFLAG,PF@NOMEM        DETAILS WANTED?\n         BO    FDR2NODT                 NO\n*                                       YES - CHECK DUMP TYPE\n         CLC   FDRSAVE,=C'DUMMYDSF'     WAS IT A DSF'ABLE DUMP?\n         BNE   FDR2ABS                  NO\n*                                       YES - ISSUE MESSAGE\n         MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING DATA SETS DUMPED:'\n         PRTLN2\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(DSFHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'DSFHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2\nFDR2LOOP CLC   =C'DUMMYDSF',TAPEBUFF+12 IS THIS A DSCB BLOCK?\n         BNE   FDR2VOL                  NO  - TRY FOR VOLSER\n*                                       YES\n         LA    R5,TAPEBUFF+40           POINT TO FIRST DSCB\n         LH    R6,TAPEBUFF+30           GET DSCB COUNT THIS BLOCK\nFDR2DSCB LTR   R6,R6                    MORE DSCB'S TO GO?\n         BNP   FDR2NBLK                 NO  - GET NEXT BLOCK\n*                                       YES\n         CLI   44(R5),C'1'              FORMAT 1 DSCB?\n         BNE   FDR2NDSC                 NO\n*                                       YES\n         C     LCTR2,=F'1'              ROOM ON PAGE FOR NEXT LINE?\n         BH    FDR2DSCC                 NO\n         NEWPAGE ,2                     FORCE EJECT\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(DSFHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'DSFHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2                         PRINT THEM\nFDR2DSCC MVC   OUTBUFF2+DSFDSN(44),0(R5)   MOVE IN DSNAME\n         LH    R14,98(,R5)                 GET LAST TRACK USED\n         LA    R14,1(,R14)                 MAKE 1 RELATIVE\n         STH   R14,98(,R5)                 SAVE IT BACK\n         ICALL CONVHALF,R14,R1=98(,R5),R15=OUTBUFF2+DSFTRK\n         ICALL CNVRECFX,R14,R1=84(,R5),R15=OUTBUFF2+DSFRECFM\n         ICALL CONVHALF,R14,R1=88(,R5),R15=OUTBUFF2+DSFLRECL-1\n         ICALL CONVHALF,R14,R1=86(,R5),R15=OUTBUFF2+DSFBLKSZ+1\n         ICALL CNVDSORX,R14,R1=82(,R5),R15=OUTBUFF2+DSFDSORG\n         ICALL CONVDATE,LKR,R1=53(,R5),R15=OUTBUFF2+DSFCDATE\n         ICALL CONVDATE,LKR,R1=56(,R5),R15=OUTBUFF2+DSFEDATE\n         TM    93(R5),X'40'            RACF DEFINED?\n         BZ    *+10                    NO\n         MVC   OUTBUFF2+DSFSECUR+5(4),=C'RACF'   YES\n         TM    93(R5),X'10'            PASSWORD?\n         BZ    FDR2PRT                 NO\n         MVC   OUTBUFF2+DSFSECUR(4),=C'WPWD'  YES - ASSUME WPWD\n         TM    93(R5),X'04'            READ PSWD REQUIRED?\n         BO    *+8                     NO\n         MVI   OUTBUFF2+DSFSECUR,C'R'  YES\n         TM    93(R5),X'50'            BOTH RACF/PSWD?\n         BNO   FDR2PRT                 NO\n         MVI   OUTBUFF2+DSFSECUR+4,C'/'  YES\nFDR2PRT  PRTLN2                        PRINT THE LINE\nFDR2NDSC LA    R5,148(,R5)             BUMP PAST DSCB/COUNT FIELD\n         S     R6,=F'1'\n         B     FDR2DSCB\nFDR2NBLK TAPIO TCCW#DAT,TM=FDR2EOF     GET NEXT BLOCK\n         B     FDR2LOOP\nFDR2EOF  MVI   OUTBUFF2,C'0'\n         OI    TFLAG1,T1@MVEOF         REMEMBER WE HIT EOF\n       MVC  OUTBUFF2+12(63),=C'0***LISTING TERMINATED. FDR FILE NOT COM$\n               PLETE ON THIS VOLUME***'\n         PRTLN2\nFDR2FAKE MVC   TAPEBUFF+4(4),=X'FFFFFFFF'   FAKE OUT FDR2VOL\nFDR2VOL  MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+8(20),=C'DUMPED FROM A UUUUUU'\n         MVC   FDRDVEND(1),DASDRSAV+4   SET UP FENCE FOR DEV TYPE\n         LA    R1,FDRDVTAB              POINT TO FDR DEV TYPE TABLE\nFDR2VOLA CLC   DASDRSAV+4(1),0(R1)      MATCH?\n         BE    FDR2VOLB                 YES\n         LA    R1,7(,R1)                NO  - BUMP TO NEXT ENTRY\n         B     FDR2VOLA\nFDR2VOLB MVC   OUTBUFF2+22(6),1(R1)     PUT DEV TYPE IN MESSAGE\n         MVC   OUTBUFF2+28(16),=C'         VOLSER='\n         CLC   UNLOADER(6),FDRDSF       WAS THIS DSF?\n         BE    FDR2VOLM                 YES - NO VOLSER AVAILABLE\n         CLC   =XL4'00',TAPEBUFF+4      DOES DUMP INCLUDE CYL/TRK 0/0?\n         BNE   FDR2VOLM                 NO  - NO VOLSER AVAILABLE\n*                                       YES\n         LA    R1,TAPEBUFF+20           POINT TO FIRST COUNT FIELD\n         LA    R0,TAPEBUFF              POINT TO 2ND TRACK IN BLOCK\n         AH    R0,TAPEBUFF+2\nFDR2VOLC CLC   0(5,R1),=X'0000000003'   POINTING TO REC 3 ON TRK 0?\n         BE    FDR2VOLG                 YES\n         BH    FDR2VOLM                 NO - AND NO VOLSER AVAIL\n         SR    R15,R15\n         IC    R15,5(,R1)               GET KEY LENGTH\n         AH    R15,6(,R1)               ADD IN DATA LENGTH\n         LA    R1,8(R15,R1)             POINT TO NEXT RECORD\n         CR    R1,R0                    PAST TRACK 0?\n         BNL   FDR2VOLM                 YES\n         B     FDR2VOLC                 NO  - KEEP GOING\nFDR2VOLG CLC   8(8,R1),=C'VOL1VOL1'     GOT VOL LABEL?\n         BNE   FDR2VOLM                 NO  - STRANGE\n         MVC   OUTBUFF2+44(6),16(R1)    YES - MOVE IT INTO MSG\n         B     FDR2VOLP\nFDR2VOLM MVC   OUTBUFF2+43(14),=C' NOT AVAILABLE'\nFDR2VOLP PRTLN2\n         B     STAR$TWO\nFDR2ABS  MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(63),=C'ABSOLUTE TRACK DETAILS NOT AVAILABLE $\n               IN THIS VERSION OF TAPEMAP'\n         PRTLN2\n         B     FDR2FAKE\nFDR2NODT CLC   =C'DUMMYDSF',TAPEBUFF+12  DSCB BLOCK?\n         BNE   FDR2VOL                   NO  - CHECK FOR VOLSER\n         TAPIO TCCW#DAT,TM=FDR2EOF       YES - CHECK NEXT BLOCK\n         B     FDR2NODT\n         SPACE 3\nSLK2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BAL   LKR,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(16),=C'WAS UNLOADED BY ' SET UP UNLOADER\n         MVC   OUTBUFF2+47(8),UNLOADER            MESSAGE\n         PRTLN2                         PRINT THE HEADER\n         MVC   OUTBUFF2+8(30),=C'SLICK LIBRARY BACKUP, CYCLE = '\n         MVC   OUTBUFF2+38(1),DASDRSAV  PUT IN THE CYCLE NUMBER\n         MVC   OUTBUFF2+39(12),=C', MAXSIZE = '\n         ICALL CONVHALF,R14,R1=DASDRSAV+2,R15=OUTBUFF2+41\n         PRTLN2                         PRINT FIRST INFO LINE\n         TM    PARMFLAG,PF@NOMEM        DETAILS WANTED?\n         BO    STAR$TWO                 NO\n*                                       YES\n         MVI   OUTBUFF2,C'0'\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING MEMBERS UNLOADED:'\n         PRTLN2\n         L     R15,=A(SLKHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'SLKHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         PRTLN2\nSLK2LOOP OC    TAPEBUFF(2),TAPEBUFF     IS THIS A HEADER BLOCK?\n         BNZ   SLK2NBLK                 NO  - TRY NEXT BLOCK\n*                                       YES\n         C     LCTR2,=F'1'              ROOM ON PAGE FOR NEXT LINE?\n         BH    SLK2MGO                  NO\n         NEWPAGE ,2                     FORCE EJECT\n         ST    R15,CBSAVE15             SAVE REG 15           11/88 SBG\n         L     R15,=A(SLKHDING)         ADDRESSABILITY TO VAR 11/88 SBG\n         MVC   OUTBUFF2(L'SLKHDING),0(R15)     COLUMN HEADING 11/88 SBG\n         L     R15,CBSAVE15             RESTORE REG 15        11/88 SBG\n         PRTLN2                         PRINT THEM\nSLK2MGO  MVC   OUTBUFF2+SLKMEM(10),TAPEBUFF+8   MEMBER NAME\n         MVI   OUTBUFF2+SLKSTAT-1,C'.'          .\n         MVC   OUTBUFF2+SLKSTAT(4),TAPEBUFF+18  STATUS\n         ICALL CONVP2,R14,R1=TAPEBUFF+32,       REVISION               X\n               R15=OUTBUFF2+SLKREV\n         MVC   OUTBUFF2+SLKINFO(8),TAPEBUFF+34  INFO\n         MVC   OUTBUFF2+SLKTYPE(8),TAPEBUFF+42  TYPE\n         ICALL CONVP4,R14,R1=TAPEBUFF+58,       ACTST                  X\n               R15=OUTBUFF2+SLKACTST\n         ICALL CONVP4,R14,R1=TAPEBUFF+62,       DELST                  X\n               R15=OUTBUFF2+SLKDELST\n         ICALL CONVP3,R14,R1=TAPEBUFF+66,       BLOCKS                 X\n               R15=OUTBUFF2+SLKBLKS\n         ICALL CONVMDY,R14,R1=TAPEBUFF+74,      C-DATE                 X\n               R15=OUTBUFF2+SLKCREAT\n         ICALL CONVMDY,R14,R1=TAPEBUFF+122,     U-DATE                 X\n               R15=OUTBUFF2+SLKUPD\n         PRTLN2\nSLK2NBLK TAPIO TCCW#DAT,TM=SLK2EOF         GET NEXT BLOCK\n         B     SLK2LOOP\nSLK2EOF  OI    TFLAG1,T1@MVEOF             SET \"HIT EOF\"\n         B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nMAP2     NEWPAGE 9,2                    CHECK FOR ROOM ON PAGE\n         BAL   LKR,SET$FULD             SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(49),=C'CONTAINS THE FOLLOWING USER-SUPPLIED $\n               INFORMATION:'\n         PRTLN2                         PRINT THE HEADER INFO\n** USE R5 TO POINT TO INFO TO BE PRINTED,\n** AND R6 TO CONTROL DEBLOCKING LOOP\n         LA    R5,TAPEBUFF+80           SKIP FILE HEADER INFO\n         L     R6,LASTSIZE                                    09/84 DBC\n         SH    R6,=H'80'\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FIRST LINE\n         B     MAPLOOPX                 BRANCH TO MIDDLE OF LOOP\nMAPLOOP  LA    R5,80(,R5)               GET TO NEXT INFO LOGICAL RECORD\n         SH    R6,=H'80'                CHECK FOR END OF BLOCK\nMAPLOOPX BNP   MAPNEXT                  GET NEXT BLOCK IF NECESSARY\nMAPLOOPY MVC   OUTBUFF2+16(72),0(R5)    PRINT 72 CHARS OF INFO\n         PRTLN2\n         B     MAPLOOP                  GET NEXT LOGICAL RECORD\nMAPNEXT  TAPIO TCCW#DAT,TM=MAPEOF       READ NEXT BLOCK\n         L     R1,LASTSIZE         VERIFY BLOCK MULT OF 80 BY 09/84 DBC\n         SR    R0,R0\n         LA    R2,80\n         DR    R0,R2\n         LTR   R0,R0\n         BNZ   MAPERR                   NO  - ERROR\n         LA    R5,TAPEBUFF              RESET LOOP REGS\n         L     R6,LASTSIZE                                    09/84 DBC\n         B     MAPLOOPY\nMAPERR   MVC   OUTBUFF2+12(53),=C'*** LISTING TERMINATED, INVALID BLOCK$\n                ENCOUNTERED ***'\n         PRTLN2\n         B     STAR$TWO\nMAPEOF   OI    TFLAG1,T1@MVEOF          REMEMBER EOF FOUND\n****     B     STAR$TWO\n         EJECT ,                                              09/84 DBC\nSTAR$TWO MVC   OUTBUFF2(2),=C'0*'\n         MVC   OUTBUFF2+2(L'OUTBUFF2-2),OUTBUFF2+1\n         PRTLN2\n         TM    TFLAG1,T1@MVEOF          ALREADY HIT EOF?\n         BO    CHKMVEOF                 YES - SEE WHERE TO GO\n         TM    TFLAG1,T1@SL             SL TAPE?\n         BO    FIND$EOF                 YES - CONTINUE PROCESSING\n         B     NL$LOOP                  SCAN THRU REST OF FILE\n         SPACE 1\nCHKMVEOF NI    TFLAG1,255-T1@MVEOF      RESET FLAG\n         TM    TFLAG1,T1@SL             SL TAPE?\n         BO    SL$SAVE                  YES - GO READ THE EOF LABELS\n         B     NL$EOF                   NO\n         SPACE 3\nFMU      PRTLN2                         PRINT INFO LINE\nFMU$     TM    PARMFLAG,PF@NOMEM        WANT MEMBER LISTING?\n         BO    STAR$TWO                 NO - DONE\n         MVI   OUTBUFF2,C'0'            SET CC\n         MVC   OUTBUFF2+16(27),=C'FOLLOWING MEMBERS UNLOADED:'\n         PRTLN2                         PRINT HEADER\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FIRST MEMBER LINE\n         LA    PPTR,OUTBUFF2+16         INIT PRINT LINE PTR\n         BR    LKR                      RETURN TO CALLER\n         SPACE 3\nSET$FULL MVC   OUTBUFF2+54(17),=C'...  WAS:  DSORG='\n         ICALL CNVDSORG,R14,R15=OUTBUFF2+71  CONVERT DSORG\n         SPACE 1\n         MVC   OUTBUFF2+76(6),=C'LRECL='\n         LA    R1,TAPEBUFF\n         AH    R1,6(,LKR)               GET LRECL ADDR\n         ICALL CONVHALF,R14,R15=OUTBUFF2+82  CONVERT LRECL\n         BAL   R14,SLIDE                MOVE IT LEFT\n         SPACE 1\n         MVC   OUTBUFF2+90(6),=C'RECFM='\n         ICALL CNVRECFM,R14,R15=OUTBUFF2+96  CONVERT RECFM\n         SPACE 1\n         MVC   OUTBUFF2+104(8),=C'BLKSIZE='\n         LA    R1,TAPEBUFF\n         AH    R1,4(,LKR)               GET BLKSIZE ADDR\n         ICALL CONVHALF,R14,R15=OUTBUFF2+112 CONVERT BLKSIZE\n         BAL   R14,SLIDE                MOVE IT LEFT\n         SPACE 2\nSET$FULD MVI   OUTBUFF2,C'-'            SET CC\n         MVC   OUTBUFF2+1(17),FL1ID     MOVE IN (TAPE) DSN\n         MVC   OUTBUFF2+19(5),=C'(FILE'\n         MVC   OUTBUFF2+25(4),FL1FILSQ  MOVE IN FILE SEQ#\n         MVC   OUTBUFF2+29(17),=C') WAS UNLOADED BY'\n         B     8(,LKR)                  RETURN TO CALLER\n         SPACE 3\nBOOM     STM   R0,R15,BOOMREGS          SAVE ALL REGS\n         MVC   OUTBUFF2(50),=C'0*** TAPEMAP LOGIC ERROR - CONTACT TEC S$\n               UPPORT ***'                                          WBF\n         PRTLN2                         PRINT ERROR MSG\n         TM    PARMFLAG,PF@TEST         ABEND?\n         BNO   STAR$TWO                 NO - IGNORE REST OF FILE\n         SPACE 1\n         CLOSE MF=(E,OPENMFL)           CLOSE SYSPRINT\n         IFP2  N,BOOM2                  SKIP IF NOT OPEN\n         CLOSE MF=(E,OPENMFL2)          CLOSE SYSPRNT2\n         SPACE 1\nBOOM2    LA    R14,BOOMREGS             POINT TO REG SAVE AREA\n         EX    0,*                      AND AWAY WE GO\n         EJECT\n***********************************************************************\n*                                                                     *\n*  SUBROUTINE TO DO I/O TO TAPE                                       *\n*                                                                     *\n***********************************************************************\nTAPIO    ST    R0,TAPEIOB+16            SET CCW ADDR\n         EXCP  TAPEIOB\n         WAIT  ECB=TAPEECB\n         CLI   TAPEECB,X'7F'            DID IT WORK?\n         BE    TAPIO$OK                 YES - CONTINUE\n         CLI   TAPEECB,X'41'            CHANNEL PROGRAM ERROR?\n         BNE   TIONTMK             NO, NOT TAPEMARK           07/85 DBC\n         CLI   IOBCSW+4,X'0D'      YES, CHEND, DEVEND, UNITEXCPT?\n         BNE   TIONTMK             NO, NOT FILE MARK          07/85 DBC\n         LA    R0,1                YES, GET FILE INCRIMENT    07/85 DBC\n         AH    R0,FILE#SEQ         INCR TAPEMARK COUNTER      07/85 DBC\n         STH   R0,FILE#SEQ         STORE NEW VALUE            07/85 DBC\n         BR    LKR                 RETURN TO CALLER           07/85 DBC\nTIONTMK  DS    0H                                             07/85 DBC\n         SPACE 1                                              07/85 DBC\n         ST    LKR,LKRTAPIO             SAVE LKR FOR RECURSION      U16\n         CH    LCTR,=H'&LINEPPG'        ANYTHING ON PAGE? U13 11/88 SBG\n         BL    *+8                      YES - CONTINUE              U13\n         NEWPAGE  ,                     PRINT THE TITLE             U13\n         MVC   OUTBUFF(44),=C'-*** TAPE I/O ERROR *** ECB CODE=XX *** C$\n               SW='                                                 U13\n         HEX   OUTBUFF+33,TAPEECB,LEN=1                             U13\n         HEX   OUTBUFF+44,IOBCSW+1,LEN=7                            U13\n         MVC   OUTBUFF+59(24),=C'*** IOBSENSE0,1=XXXX ***'          U13\n         HEX   OUTBUFF+75,TAPEIOB+2,LEN=2                           U13\n         PRTLN OUTBUFF\n         SPACE 1\n**       L     R1,DD#PTR                -> DD SECTION OF TIOT       U13\n**       SH    R1,=H'24'                -> TIOT                     U13\n**       AH    R1,TAPEDCB+40            -> DD ENTRY FOR TAPE        U13\n**       L     R1,16(,R1)               -> UCB                      U13\n         L     R1,TAPEMFL               -> DCB                      U13\n         L     R1,44(,R1)               -> DEB                      U13\n         L     R1,32(,R1)               -> UCB                      U13\n         L     R2,20(,R1)               -> EXTENDED SENSE INFO      U13\n         MVC   OUTBUFF(16),=C' *** SENSE DATA='                     U13\n         HEX   OUTBUFF+16,(00,R2),LEN=4                             U13\n         HEX   OUTBUFF+25,(04,R2),LEN=4                             U13\n         HEX   OUTBUFF+35,(08,R2),LEN=4                             U13\n         HEX   OUTBUFF+44,(12,R2),LEN=4                             U13\n         HEX   OUTBUFF+54,(16,R2),LEN=4                             U13\n         HEX   OUTBUFF+63,(20,R2),LEN=4                             U13\n         PRTLN OUTBUFF                  PRINT THE SENSE DATA        U13\n         SPACE 3\n         NEWPAGE  10                    NEXT PAGE IF NEED ROOM      U15\n         MVC  OUTBUFF(35),=C'0    BITS SET ARE FLAGGED ''*'' BELOW' U15\n         PRTLN OUTBUFF                  PRINT HEADER                U15\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE FIRST ONE      U15\n         SPACE 2\n*  R2 -> SENSE DATA                                                 U15\n         LA    R3,10                    NUMBER OF BYTES             U15\n         L     R4,=A(ERR#LIST)          -> ERROR MESSAGES           U15\n         SPACE 1\nNEXTBYTE LA    R6,OUTBUFF+5             -> LINE POS                 U15\n         LA    R1,X'80'                 MASK BIT                    U15\n         SPACE 1\nTEST$BIT MVC   2(10,R6),0(R4)           MOVE TEXT                   U15\n         EX    R1,BIT$TM                IS THIS BIT SET?            U15\n         BZ    *+8                      NO - SKIP                   U15\n         MVI   0(R6),C'*'               FLAG THIS ONE               U15\n         SPACE 1\n         LA    R4,10(,R4)               -> NEXT MSG                 U15\n         LA    R6,16(,R6)               -> NEXT PRINT LINE POS      U15\n         SRA   R1,1                     MOVE BIT RIGHT              U15\n         BNZ   TEST$BIT                 CONTINUE WITH THIS BYTE     U15\n         PRTLN OUTBUFF                  PRINT DESC OF THIS BYTE     U15\n         LA    R2,1(,R2)                -> NEXT BYTE OF SENSE DATA  U15\n         BCT   R3,NEXTBYTE              CONTINUE IF MORE            U15\n         SPACE 3\n         CLI   WHERE,3                  READING DATA?\n         BNE   CLOSE$TP                 NO - CLOSE UP AND LEAVE\n         L     R1,TAPEIOB+16            GET CCW ADDR\n         CLI   0(R1),RD                 WAS IT A READ?\n         BNE   CLOSE$TP                 NO - CLOSE UP AND LEAVE\n         LA    R0,TCCW#FSF              SKIP REST OF DATA...\n         L     LKR,LKRTAPIO             RESTORE LKR                 U16\n         B     TAPIO                    START AT TOP OF THIS SUBRTN\n         SPACE 2\nBIT$TM   TM    0(R2),*-*                << EXECUTED >>              U15\n         SPACE 3                                              07/85 DBC\nTAPIO$OK LA    R0,TCCW#FSF         WAS THIS A -               07/85 DBC\n         CLM   R0,7,TAPEIOB+17      FORWARD SKIP FILE CMD?    07/85 DBC\n         BNE   TIOSAMFL            NO, STILL IN SAME FILE     07/85 DBC\n         LA    R0,1                YES, GET FILE INCRIMENT    07/85 DBC\n         AH    R0,FILE#SEQ         GET NEW FILE# -1           07/85 DBC\n         STH   R0,FILE#SEQ         STORE BACK                 07/85 DBC\nTIOSAMFL DS    0H                                             07/85 DBC\n         SPACE 1                                              07/85 DBC\n         L     R0,=A(BUFFSIZE)          GET LENGTH REQUESTED  07/85 DBC\n         MVC   DWD+2(2),IOBCSW+6        COPY LENGTH LEFT\n         XC    DWD(2),DWD               CLEAR HIGH 2 BYTES\n         S     R0,DWD                   MINUS LENGTH UNUSED\n         ST    R0,LASTSIZE         EQUALS SIZE READ           09/84 DBC\n         TM    TFLAG1,T1@ANLZ           ANALYZING?\n         BNO   4(,LKR)                  NO - SKIP THIS JUNK\n         A     R0,BYTECNT               ADD PREVIOUS BYTE COUNT\n         ST    R0,BYTECNT               SAVE NEW TOTAL\n         L     R1,BLOCKCNT              GET BLOCK COUNT\n         LA    R1,1(,R1)                INCR\n         ST    R1,BLOCKCNT              SAVE NEW COUNT\n         CLC   LASTSIZE+2(2),TAPEBUFF START WITH BLKSIZE?     09/84 DBC\n         BE    *+8                      YES - COULD BE RECFM=V\n         NI    NLFLAGS,255-NL@V         NO - NOT RECFM=V\n         CLC   LASTSIZE,MAXBLKSI        SAME SIZE?\n         BE    4(,LKR)                  YES - DONE HERE\n         BH    TAPIO$H                  LAST BLOCK IS BIGGEST\n         TM    NLFLAGS,NL@CHANG         ALREADY CHANGED?\n         BO    TAPIO$NL                 YES - TURN OFF RECFM=F\n         OI    NLFLAGS,NL@CHANG         SET \"CHANGED\"\n         B     4(,LKR)                  RETURN\n         SPACE 1\nTAPIO$H  OI    NLFLAGS,NL@CHANG         SET \"CHANGED\"\n         MVC   MAXBLKSI,LASTSIZE        SAVE NEW BIGGEST BLKSIZE\nTAPIO$NL NI    NLFLAGS,255-NL@F         NOT RECFM=F\n         B     4(,LKR)                  RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*  SUBROUTINE TO HANDLE PRINT OUTPUT                                  *\n*                                                                     *\n***********************************************************************\nNEWPAGE  CR    LCTR,R0                  ENOUGH LINES LEFT?\n         BNLR  LKR                      YES - JUST RETURN\n         LA    LCTR,LINESPP-2           RESET LINE COUNTER\n         PRTLN TITLE1\n         TM    TFLAG1,T1@PAGE1          IS THIS FIRST PAGE OF VOL?\n         BNO   NEWPAG$2                 NO - SKIP THIS STUFF.\n         NI    TFLAG1,255-T1@PAGE1      TURN OFF FLAG\n         MVC   TITLE2+1(28),TITLE2      BLANK IT OUT\n         SPACE 1\nNEWPAG$3 TM    TFLAG1,T1@PARM           HAVE PARM FIELD?\n         BNO   NEWPAG$4                 NO - SKIP\n         TM    TFLAG2,T2@LPARM          IS IT TOO LONG?\n         BO    NEWPAG$4                 YES - SKIP\n         MVC   TITLE2+1(28),PARM#MSG+1  MOVE IN THE PARM FIELD\n         SPACE 1\nNEWPAG$4 PRTLN TITLE2                   PRINT AUTHOR LINE\n         SPACE 1\nNEWPAG$1 TM    TFLAG1,T1@PARM           HAVE PARM FIELD?\n         BNO   NEWPAG$2                 NO - DON'T PRINT IT\n         TM    TFLAG2,T2@LPARM          LONG PARM FIELD?\n         BNO   NEWPAG$5                 NO - ALREADY PRINTED        U15\n         PRTLN PARM#MSG                 PRINT IT\nNEWPAG$5 TM    TFLAG1,T1@PERR           ERROR IN PARM FIELD?\n         BNO   NEWPAG$2                 NO - DON'T PRINT IT\n         PRTLN PARMERR                  PRINT IT\n         SPACE 1\nNEWPAG$2 LA    R0,DASHES\n         BAL   R14,PUTPRTLN             SEPARATOR LINE\n         PRTLN COLHEAD1,I\n         PRTLN COLHEAD2,I\n         LA    R0,DASHES\n         BAL   R14,PUTPRTLN             SEPARATOR LINE\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE THE FIRST FILE U15\n         BCTR  LCTR,0                   ADJUST THE LINE COUNT       U15\n         TM    TFLAG2,T2@RQVOL          WRONG VOLUME MOUNTED?       U15\n         BNOR  LKR                      NO - ALL DONE               U15\n         NI    TFLAG2,255-T2@RQVOL      TURN OFF FLAG NOW           U15\n         MVI   OUTBUFF,C'-'             TRIPLE SPACE                U15\n         MVI   OUTBUFF+41,C'*'          START OF BOX                U15\n         MVC   OUTBUFF+42(49),OUTBUFF+41  REST OF IT                U15\n         PRTLN OUTBUFF                  PRINT TOP OF BOX            U15\n         MVC   OUTBUFF+41(50),=C'* ID OF MOUNTED VOLUME DIFFERS FROM ID$\n                REQUESTED *'            MOVE IN MSG                 U15\n         PRTLN OUTBUFF                  PRINT MSG                   U15\n         SH    LCTR,=H'2'               ACCOUNT FOR TRIPLE SPACE    U15\n         MVI   OUTBUFF+41,C'*'          START OF BOX                U15\n         MVC   OUTBUFF+42(49),OUTBUFF+41  REST OF IT                U15\n         PRTLN OUTBUFF                  PRINT BOTTOM OF BOX         U15\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE FIRST FILE     U15\n         BR    LKR                      RETURN\n         SPACE 3\nPRTLN    ST    R14,PRT#SAVE             SAVE RETURN ADDR\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE\n         BAL   R14,PUTPRTLN             WRITE OUTPUT LINE\n         L     R14,PRT#SAVE             RESTORE RETURN ADDR\n         MVC   OUTBUFF,OUTCLEAR         CLEAR OUTPUT LINE\n         BCTR  LCTR,R14                 RETURN IF MORE LINES LEFT\n         ST    R14,R14SAVE              SAVE MY R14\n         ST    LKR,LKRSAVE              SAVE SOMEONE'S LKR\n         NEWPAGE ,                      DO A NEW PAGE\n         L     R14,R14SAVE              RESTORE MY R14\n         L     LKR,LKRSAVE              RESTORE SOMEONE'S LKR\n         BR    R14                      RETURN TO CALLER\n         SPACE 2\nPUTPRTLN L     R1,OPENMFL               GET DCB ADDR\n         PUT   (1),(0)                  WRITE OUTPUT LINE\n         ORG   *-2                      BACK OVER BALR\n         BR    R15                      MAKE HIM RETURN TO MY CALLER\n         SPACE 3\n************************************************************* 12/88 SBG\n* A BAL TO NEWPAGE2+4 IS DONE IN SEVERAL PLACES.            * 12/88 SBG\n* THE CONDITION CODE AT THOSE POINTS IS NOT SET AT LABEL    * 12/88 SBG\n* NEWPAGE2, BUT RATHER, JUST ABOVE THOSE BAL INSTRUCTIONS.  * 12/88 SBG\n* IT IS THEREFORE IMPORTANT THAT THE INSTRUCTION JUST BELOW * 12/88 SBG\n* LABEL NEWPAGE2 HAVE THE CORRECT CONDITION SETTINGS.       * 12/88 SBG\n************************************************************* 12/88 SBG\nNEWPAGE2 CR    LCTR2,R0                 ENOUGH LINES LEFT?    12/88 SBG\n         BNLR  LKR                      YES - JUST RETURN     12/88 SBG\n         SPACE 1\n         LA    R0,TITLE1                GET RECORD ADDR\n         BAL   R14,PUTPRNT2+4           WRITE IT OUT\n         LA    R0,DASHES\n         BAL   R14,PUTPRNT2+4           WRITE IT OUT\n         LA    LCTR2,LINESPP-2          RESET LINE COUNTER\n         BR    LKR                      RETURN TO CALLER\n         SPACE 3\nPRTLN2   ST    R14,PRT#SAVE             SAVE RETURN ADDR\n         LA    R1,3                     ASSUME TRIPLE SPACE\n         CLI   OUTBUFF2,C'-'            IS IT?\n         BE    P2$OK                    YES\n         BCTR  R1,0                     ASSUME DOUBLE SPACE\n         CLI   OUTBUFF2,C'0'            IS IT?\n         BE    P2$OK                    YES\n         BCTR  R1,0                     ASSUME SINGLE SPACE\n         CLI   OUTBUFF2,C' '            IS IT?\n         BE    P2$OK                    YES\n         MVI   OUTBUFF2,C' '            MAKE A BLANK\n         SPACE 1\nP2$OK    SR    LCTR2,R1                 DECR LINE COUNT\n         BP    P2$GO                    CONTINUE IF OK\n         NEWPAGE  ,2                    SET NEW PAGE\n         MVI   OUTBUFF2,C'-'            TRIPLE SPACE FIRST LINE     U13\n         SH    LCTR2,=H'3'              ACCOUNT FOR IT              U13\n         SPACE 1\nP2$GO    BAL   R14,PUTPRNT2             WRITE OUTPUT LINE\n         MVC   OUTBUFF2,OUTCLR2         CLEAR OUTPUT LINE\n         L     R14,PRT#SAVE             GET RETURN ADDR\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\nPUTPRNT2 LA    R0,OUTBUFF2              GET RECORD ADDR\n         L     R1,OPENMFL2              GET SYSPRNT2 DCB ADDR\n         PUT   (1),(0)                  WRITE IT OUT\n         ORG   *-2                      BACK OVER BALR\n         BR    R15                      MAKE HIM RETURN TO MY CALLER\n         SPACE 3\n         PUSH  PRINT                                                U13\n         PRINT GEN                                                  U13\n         SPACE 1\nPRT$EXIT DCBEXIT  BLKSIZE=3192,BUFNO=1                              U15\n         POP   PRINT                                                U13\n         EJECT\n***********************************************************************\n*                                                                     *\n*    ICALLABLE SUBROUTINES                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n*  SUBROUTINE TO CONVERT A HALFWORD TO PRINTABLE FORM\nCONVHALF MVC   DWD(2),0(R1)             MOVE FIELD TO AN ALIGNED PLACE\n         LH    R0,DWD                   PICK IT UP\n         CVD   R0,DWD                   CONVERT TO PACKED\n         MVC   1(5,R15),=X'2020202120'  MOVE IN EDIT MASK\n         ED    0(6,R15),DWD+5           DO THE EDIT\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 2-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP2   MVC   1(3,R15),=X'202120'      MOVE EDIT PATTERN TO OUT AREA\n         ED    0(4,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 3-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP3   MVC   1(5,R15),=X'2020202120'  MOVE EDIT PATTERN TO OUT AREA\n         ED    0(6,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A 4-BYTE PACKED FIELD TO PRINTABLE FORM\nCONVP4   MVC   1(7,R15),=X'20202020202120'  MOVE EDIT PATTERN\n         ED    0(8,R15),0(R1)           CONVERT PACKED TO DECIMAL\n         BR    R14\n         SPACE 3\n*  SUBROUTINE TO CONVERT A PACKED DATE FIELD TO PRINTABLE FORM\nCONVMDY  MVC   MDYP(4),=PL4'0'          ZERO MDYP (4-BYTES PACKED)\n         MVC   MDYP(3),0(R1)            GET MMDDYY (PACKED W/O SIGN)\n         UNPK  MDYU(7),MDYP(4)          UNPACK IT\n         MVC   0(2,R15),MDYU            MOVE MM\n         MVI   2(R15),C'/'                   /\n         MVC   3(2,R15),MDYU+2               DD\n         MVI   5(R15),C'/'                   /\n         MVC   6(2,R15),MDYU+4               YY\n         BR    R14                      RETURN\n         SPACE 3\n*  SUBROUTINE TO REMOVE LEADING BLANKS\nSLIDE    CLI   0(R15),C' '              NON-BLANK YET?\n         BNER  R14                      YES - RETURN TO CALLER\n         MVC   0(6,R15),1(R15)          MOVE IT LEFT 1 POS\n         B     SLIDE                    AND CHECK IT AGAIN\n         SPACE 3\n*  SUBROUTINE TO REMOVE LEADING ZEROES\nDEZERO   CLI   0(R1),C'0'               NON-ZERO YET?\n         BNER  R14                      YES - RETURN\n         MVI   0(R1),C' '               MAKE IT A BLANK\n         A     R1,=F'1'                 ADVANCE\n         B     DEZERO                   LOOP\n         SPACE 3\n*  SUBROUTINE TO CONVERT A UNIT TYPE\nCONVUNIT MVC   OUTBUFF2+120(9),=C'UNIT=????'\n         CLI   3(R1),X'0E'              TOO BIG?              06/84 DBC\n         BHR   LKR                      YES - RETURN\n         IC    R14,3(,R1)               ELSE GET BYTE\n         N     R14,=F'255'              ISOLATE IT\n         BZR   LKR                      INVALID IF ZERO\n         BCTR  R14,0                    -1 BECAUSE NO ZERO\n         MH    R14,=H'6'                LENGTH OF A TABLE ENTRY\n         LA    R15,=C'2311  2301  2303  2302  2321  2305-12305-22314  3$\n               330  3340  3350  3375  3330-13380  '           06/84 DBC\n         LA    R14,0(R14,R15)           POINT TO CORRECT ENTRY\n         MVC   OUTBUFF2+125(6),0(R14)   MOVE DEVTYPE TO LINE\n         BR    LKR                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A DSORG\nCNVDSORG LA    R1,TAPEBUFF\n         AH    R1,0(,LKR)               GET DSORG ADDR\n         SPACE 1\nCNVDSORX TM    0(R1),X'01'              DSORG=**U\n         BNO   *+8                      NO - SKIP\n         MVI   2(R15),C'U'\n         SPACE 1\n         MVC   0(2,R15),=C'PO'          ASSUME DSORG=PO\n         TM    0(R1),X'02'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'DA'          ASSUME DSORG=DA\n         TM    0(R1),X'20'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'PS'          ASSUME DSORG=PS\n         TM    0(R1),X'40'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'IS'          ASSUME DSORG=IS\n         TM    0(R1),X'80'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(4,R15),=C'VSAM'        ASSUME VSAM\n         CLC   0(2,R1),=X'0008'         IS IT?\n         BER   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(4,R15),=C'**  '        NONE OF THE ABOVE???\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO CONVERT A RECFM\nCNVRECFM LA    R1,TAPEBUFF\n         AH    R1,2(,LKR)               GET RECFM ADDR\n         SPACE 1\nCNVRECFX TM    0(R1),X'C0'              RECFM=U?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'U'\n         B     RECFM$2                  CONTINUE\n         SPACE 1\n         TM    0(R1),X'80'              RECFM=F?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'F'\n         B     RECFM$2                  CONTINUE\n         SPACE 1\n         TM    0(R1),X'40'              RECFM=V?\n         BNO   *+8                      NO - TRY NEXT\n         MVI   0(R15),C'V'\n         SPACE 1\nRECFM$2  LA    R15,1(,R15)\n         TM    0(R1),X'10'              BLOCKED?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'B'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'08'              SPANNED?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'S'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'20'              TRK OVFL?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'T'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'02'              RECFM=A?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'A'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'01'              RECFM=M?\n         BNOR  R14                      NO - RETURN TO CALLER\n         MVI   0(R15),C'M'\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO COMPUTE TAPEFEET\nTAPEFEET XR    R0,R0\n         D     R0,=F'1200'              GET LENGTH IN FEET\n         CH    R0,=H'600'               ROUND UP?\n         BL    *+8                      NO\n         A     R1,=F'1'                 ROUND UP.\n         CVD   R1,DWD\n         MVC   1(5,R15),=X'2020202120'\n         ED    0(6,R15),DWD+5\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO FIND A TIOT ENTRY\nTIOTSCAN L     R1,DD#PTR                -> DD SECTION\n         XR    R0,R0                    CLEAR FOR IC\n         BAL   R14,*+6                  SET LOOP ADDR & SKIP\n         SPACE 1\n         AR    R1,R0                    POINT TO NEXT ENTRY\n         IC    R0,0(,R1)                GET LENGTH OF THIS ENTRY\n         LTR   R0,R0                    END OF TIOT?\n         BZR   LKR                      YES - \"NOT FOUND\" RETURN\n         CLC   4(8,R1),0(R15)           THIS IT?\n         BNER  R14                      NO - LOOP\n         CLC   =F'0',16(R1)             DD DUMMY? (LIKE MSM?)\n         BNE   4(,LKR)                  NO - RETURN (FOUND)\n         BR    LKR                      SAY NOT FOUND\n         EJECT\n         LTORG ,\n         SPACE 6\n*  REGISTERS USED IN ROUTINES TO LIST IEHMOVE & IEBCOPY UNLOADED MEMBRS\nBLEN     EQU   R2      *PAIR*           BLOCK LENGTH LEFT\nBPTR     EQU   R3      *PAIR*           -> CURRENT POS IN BLOCK\nDLEN     EQU   R4                       DIRBLK OR DATA LENGTH LEFT\nDPTR     EQU   R5                       -> CURRENT POS IN BLOCK\nPPTR     EQU   R6                       -> POS IN PRINT LINE\n         SPACE 1\n*  OTHER MISC REGISTERS\nLCTR     EQU   R8                       # OF LINES LEFT THIS PAGE\nLCTR2    EQU   R9                       SAME FOR OTHER FILE\nLKR      EQU   R10                      INTERNAL LINKAGE REGISTER   U14\n         SPACE 1\nCC       EQU   X'40'                    COMMAND CHAINING\nSLI      EQU   X'20'                    SUPPRESS LENGTH INDIC.\n         SPACE 1\nRD       EQU   X'02'                    READ\nFSF      EQU   X'3F'                    FORWARD SPACE FILE\nRWD      EQU   X'07'                    REWIND\n         SPACE 1\nBUFFSIZE EQU   X'FFFF'             SIZE OF TAPE BUFFER        09/84 DBC\nLINESPP  EQU   &LINEPPG                 LINES PRINTED PER PAGE11/88 SBG\n         SPACE 2\nOPENMFL2 OPEN  (SYSPRNT2,OUTPUT),MF=L\nOPENMFL  OPEN  (SYSPRINT,OUTPUT),MF=L\nOPENMFLI OPEN  SYSIN,MF=L\nTAPEMFL  OPEN  TAPEDCB,MF=L\n         SPACE 1\nEXLST    DC    A(0)\nPRTEXLST DC    X'85',AL3(PRT$EXIT)\n         SPACE 2\nTAPEECB  DC    A(0)\nTAPEIOB  DC    X'42000000'              IOBFLAG1 (SET FOR CMD CHAINING)\n         DC    A(TAPEECB)               ECB ADDR\nIOBCSW   DC    2F'0'                    CSW\n         DC    A(0)                     CHANNEL PGM ADDR\n         DC    A(TAPEDCB),A(0)          DCB ADDR\n         DC    H'1',H'0'                TAPE BLOCK COUNT INCREMENT\n         SPACE 1\nTCCW#FSF CCW   FSF,0,0,1                FWD SPACE FILE\n         SPACE 1\nTCCW#LBL CCW   RD,*-*,CC,80             READ 80 BYTE BLOCK INTO FL1LABI\n         CCW   RD,*-*,00,80             READ IN NEXT BLOCK INTO FL2LABI\n         SPACE 1\nTCCW#DAT CCW   RD,*-*,SLI,BUFFSIZE      READ DATA BLOCK\n         SPACE 1\nTCCW#RWD CCW   RWD,0,0,1                REWIND THE TAPE\n         SPACE 1\nTCCW#SNS CCW   4,SENSDATA,SLI,24        READ SENSE DATA\n         SPACE 2\nSENSDATA DC    XL24'00'                 SENSE DATA BUFFER\n         SPACE 2\nTFLAG1   DC    X'00'                    FLAGS\nT1@PARM  EQU   X'80'                    HAVE PARM FIELD\nT1@PERR  EQU   X'40'                    ERROR IN PARM FIELD\nT1@PAGE1 EQU   X'20'                    THIS IS FIRST TITLE GROUP\nT1@BADEN EQU   X'10'                    DENSITY ERROR IN TAPE LABEL(S)\nT1@SL    EQU   X'08'                    THIS TAPE IS SL\nT1@ANLZ  EQU   X'04'                    PARM=CHECK OR NL TAPE\nT1@MVEOF EQU   X'02'                    IEHMOVE2 HAS READ TILL EOF\nT1@DATA  EQU   X'01'                    HAVE INPUT DATA\n         SPACE 1\nTFLAG2   DC    X'00'                    MORE\nT2@RQVOL EQU   X'80'                    REQUESTED VOL MISMATCH\nT2@LPARM EQU   X'40'                    PARM FIELD LONGER THAN 21 CHARS\nT2@PRT2  EQU   X'20'                    SECOND PRINT FILE IN USE\n         SPACE 1\nNLFLAGS  DC    X'00'                    NON-LABELLED TAPE FLAGS\nNL@V     EQU   X'80'                    RECFM=V\nNL@F     EQU   X'40'                    RECFM=F\nNL@CHANG EQU   X'20'                    BLOCKSIZE HAS CHANGED\n         SPACE 1\nPARMFLAG DC    X'00'\nPF@TEST  EQU   X'80'                    TEST\nPF@INLIN EQU   X'40'                    INLINE\nPF@NOMEM EQU   X'20'                    NOMEMBERS (NOMEM)\nPF@DEN1  EQU   X'10'                    DEN1\nPF@NATTR EQU   X'08'                    NOATTR\nPF@NONOT EQU   X'04'                    NONOTE\nPF@NOCHK EQU   X'02'                    NOCHECK (NOSCAN)      06/84 DBC\nPF@NL    EQU   X'01'                    NL\n         SPACE 1\nPARMTAB  DC    H'3',C'TEST     ',AL1(PF@TEST)\n         DC    H'5',C'INLINE   ',AL1(PF@INLIN)\n         DC    H'8',C'NOMEMBERS',AL1(PF@NOMEM)\n         DC    H'4',C'NOMEM    ',AL1(PF@NOMEM)\n         DC    H'3',C'DEN1     ',AL1(PF@DEN1)\n         DC    H'5',C'NOATTR   ',AL1(PF@NATTR)\n         DC    H'5',C'NONOTE   ',AL1(PF@NONOT)\n         DC    H'6',C'NOCHECK  ',AL1(PF@NOCHK)                06/84 DBC\n         DC    H'5',C'NOSCAN   ',AL1(PF@NOCHK)                06/84 DBC\nPARMLAST DC    H'1',C'NL       ',AL1(PF@NL)\n         SPACE 2\n         DC    C' '                     FOR CLEARING \"UNLOADER\"\nUNLOADER DC    CL8' '             /   /IEBCOPY/IEHMOVE/IEBISA 06/84 DBC\nC00080   DC    C'00080'\n         ORG   C00080+1\nC00800   DC    C'00800'\nRET#ADDR DC    A(EOD2)                  RETURN ADDR\nDEN#LIST DC    F'200,556,800,1600,6250,37871'  DENSITY VALUES       THO\n         DC    C'200 556 800 16006250N/A '     RIGHT AFTER ABO LINE THO\nTRUE#DEN DC    C'3',AL3(DEN#LIST+8)     REAL DEN;  -> 4 CHAR REAL DEN\nF1       DC    F'1'                                                 U14\nH1       EQU   F1+2                                                 U14\nF15      DC    F'15'                                                U14\nNULLNUMB DC    H'0'                     # OF NULL FILES TO SKIP     U14\nNUMBNULL DC    H'0'                     # OF NULL FILES / THIS TAPE U14\nWHERE    DC    X'00'                    WHERE-WE-ARE FLAG\n         SPACE 1\n         PUSH  PRINT\n         PRINT GEN\n         SPACE 1\nHEXTAB   HEXTAB  DUAL=NO\n         SPACE 1\nDAYS     DAYS  LEFT                                                 THO\n         SPACE 1                                                    THO\nMONTHS   MONTHS                                                     THO\n         SPACE 3                                                    THO\n         POP   PRINT                                                THO\n         SPACE 1                                                    THO\nFDRDVTAB DS    0C                                             09/84 DBC\n         DC    C'A2305-1'                                     09/84 DBC\n         DC    C'C2305-2'                                     09/84 DBC\n         DC    C'M3380  '                                     09/84 DBC\n         DC    C'N3375  '                                     09/84 DBC\n         DC    C'T2314  '                                     09/84 DBC\n         DC    C'U3340-1'          TABLE OF FDR DEVICE TYPES  09/84 DBC\n         DC    C'V3340-2'          AND CODES\n         DC    C'X3330  '\n         DC    C'Y3330-1'\n         DC    C'Z3350  '\nFDRDVEND DC    C' ??????'          FENCE FOR UNKNOWN FDR DEVICES\n         EJECT\nWORKD    DSECT                          RESUME\nDD#PTR   DS    A                        -> DD SECTION OF TIOT\nLEN#TAPE DS    F                        TAPE LENGTH\n         DS    F                        NL LENGTH\nFILE#SEQ DS    H                        NL FILE SEQ #\n         DS    H                        (UNUSED)\nPRT#SAVE DS    A                        SAVE FOR RETURN ADDR\nLKRSAVE  DS    A                        MORE...\nLKRTAPIO DS    A                        ...OF THE...\nR14SAVE  DS    A                        ...SAME\nTU$SAVE2 DS    2A                  USED BY TEST$UP            06/84 DBC\nBOOMREGS DS    16F                      REG SAVE AREA FOR LOGIC ERROR\nMAXBLKSI DS    F                   BIGGEST BLOCK READ SO FAR  09/84 DBC\nLASTSIZE DS    F                   SIZE OF THE LAST BLK READ  09/84 DBC\nBLOCKCNT DS    F                        # OF BLOCKS READ\nBYTECNT  DS    F                        TOTAL # OF BYTES READ\nCBTBLK1  DS    F                   STORE BLOCKSIZ FOR CBT973. 11/88 SBG\nCBTAPEND DS    F                   STORE EO-BLOCK FOR CBT973. 11/88 SBG\nCBSTOR1  DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR01 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR02 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR03 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR04 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR05 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR06 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR08 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR09 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSTOR10 DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSAVE4  DS    F                   STORE REGISTER FOR CBT973. 11/88 SBG\nCBSAVE15 DS    F                   STORE REGISTER 15          11/88 SBG\nNL#SAVE  DS    4F                  SAVE FOR NL STUFF IF SL    09/84 DBC\nNL#FLAGX DS    X                        SAME\nUPDT#TYP DS    C                        A,R,C FOR UPDTE\nPTF#TYPE DS    C                   A,F,P,U FOR SYSMODS        07/85 DBC\nUPDTXFLG DS    C                   FLAG IF ./ OR >< IN UPDTE  11/88 SBG\nBLANKS   DS    0CL17,CL16' '\nOUTCLEAR DC    C' '                     FOR CLEARING OUTBUFF\nOUTBUFF  DS    CL133\nOUTCLR2  DC    C' '                     FOR CLEARING OUTBUFF2\nOUTBUFF2 DS    CL133,7C                                             U14\nDASHES   DS    CL133\nINBUFF   DS    CL80\nLABELS   DS    3CL80                    FOR VOL,FL1,FL2\nCBTCLEAR DC    C' '                     FOR CLEARING CBT CARD 11/88 SBG\nCBTCARD  DS    CL80              CBT973 CARD-IMAGE EXPANSION  11/88 SBG\nCSTATCLR DC    C' '                     FOR CLEARING CBT DOC  12/88 SBG\nCBTVERS  DS    CL4                      CBT TAPE VERSION #    12/88 SBG\nCBTDATE  DS    CL8                      CBT TAPE RELEASE DATE 12/88 SBG\nMV#ABUF2 DS    A(MV#BUFF2)              ADDR OF SECOND DE-SPANNING BUFF\nMV#BUFF1 DS    CL78                     FIRST DE-SPANNING BUFFER\nMV#BUFF2 DS    CL78                     SECOND DE-SPANNING BUFFER\nPARM#MSG DS    CL110                    FOR PARM\nOB2END   DS    A(OUTBUFF2+110)          ADDR OF END OF OUTBUFF2\nOB2END2  DS    A(OUTBUFF2+110+10)       SAME FOR UPDTE\nDASDRSAV DS    XL24                     FOR HEADER RECORD\nFDRSAVE  DS    CL8                      FOR 'DUMMYDSF' IF PRESENT\nMDYP     DS    PL4'0'                   FOR CONVMDY\nMDYU     DS    CL7                      FOR CONVMDY\n         SPACE 2                                              12/88 SBG\n***** LOADED  LITERALS  -  SEE END OF THE PROGRAM  ********** 12/88 SBG\n         DS    0D                                             12/88 SBG\nEMPTYLIT DC    C'THISFILEHASBEENDELETEDORISRESERVED'  NEWVERS 12/88 SBG\nEMPTYLI2 DC    C'DELETEDBYPREVIOUSVERSIONOFTHISTAPE'  OLDVERS 12/88 SBG\nREQ#VOL  DC    C'+** REQUESTED VOL=\"123456\" **'\n         SPACE 1\nFVOL#MSG DC    C' *** THIS IS VOLUME # XXXX OF THE ABOVE MULTIPLE VOLUM$\n               E FILE.  FIRST VOLUME WAS XXXXXX.'\n         SPACE 1\nPARMERR  DC    C' UNKNOWN PARM OPTION AT COL=XXX.  ANY REMAINING PARM I$\n               GNORED.'\nFFS      DC    XL12'FFFFFFFFFFFFFFFFFFFFFFFF'\nCHJOBLIT DC    C'//MVSMODS'       ARNIE CASINGHINO'S JOBNAME  12/88 SBG\nVERSLIT1 DC    C'* VERSION'       DATE OF CBT TAPE - PREFIX   12/88 SBG\nVERSLIT2 DC    C'VERSION #'       VERSION OF CBT TAPE PREFIX  12/88 SBG\nCBHLIT   DC    C'VER        -  -  '   DISPLAY FOR CBTHEADER   12/88 SBG\n         SPACE 1                                              12/88 SBG\n************************************************************* 12/88 SBG\n*  TABLE OF UNLOADER LITERALS - NOTE, IF YOU ADD TO THIS      12/88 SBG\n*   TABLE, YOU MUST ADD TO THE LIST OF LITERALS TO BE MOVED   12/88 SBG\n*   INTO THIS WORKAREA THAT IS AT THE END OF THIS PROGRAM.    12/88 SBG\n*  PLEASE SEE THE LABEL CALLED \"LITMOVES\" -  THIS WAS BECAUSE 12/88 SBG\n*   THE 3RD BASE REGISTER WAS EXCEEDED, AND I MOVED SOME OF   12/88 SBG\n*   THE LITERALS INTO THE WORKAREA DSECT.  THEY THEREFORE     12/88 SBG\n*   HAVE TO BE INITIALIZED IN THE GETMAINED WORKAREA STORAGE. 12/88 SBG\n************************************************************* 12/88 SBG\nIEBCOPY  DC    C'IEBCOPY'\nIEHMOVE  DC    C'IEHMOVE'\nIEBISAM  DC    C'IEBISAM'\nIEHDASDR DC    C'IEHDASDR'\nIEBUPXXX DC    C'IEBUPXXX'         IEBUPDTE OR IEBUPDAT       06/84 DBC\nFDR      DC    C'FDR   '\nFDRDSF   DC    C'FDRDSF'\nFDRXXX   DC    C'FDR???'\nSLICKMNG DC    C'SLICKMNG'                                    09/84 DBC\nCTAPEMAP DC    C'TAPEMAP'\nSMPPTFIN DC    C'SMPPTFIN'                                    07/85 DBC\nCBT973   DC    C'CBT973'                                      11/88 SBG\nCBTEMPTY DC    C'CBTEMPTY'         EMPTY FILE ON THE CBT TAPE 11/88 SBG\nCBHEADER DC    C'CBT DOC '         DOC FILE FOR THE CBT TAPE  12/88 SBG\nUTY3420C DC    X'33008003'        UNIT TYPE FOR 3420C CARTS   09/89\u00acSBG\n         DS    0F                 ALIGNMENT                   12/88 SBG\nCDOCSIZE DC    F'32720'           BLOCK SIZE OF CBT DOC FILE  12/88 SBG\nINCORLAB DC    C'-*****  ONE OR MORE FILES HAVE DENSITY INDICATED INCOR$\n               RECTLY IN LABELS.  ALL FILES ARE WRITTEN AT XXXX BPI  **$\n               ***'\n***** LOADED  LITERALS  -  SEE END OF THE PROGRAM  ********** 12/88 SBG\n         SPACE 2\nDWD      DS    D\nJFCB     DS    XL176                    DWD ALIGNED\n************************************************************* 12/88 SBG\n*  WE CONTINUE TO ADDRESS THE PROBLEM OF EXCEEDING 3 BASE   * 12/88 SBG\n*  REGISTERS.  PREVIOUSLY, THE TAPE BUFFER WAS ALIGNED ON   * 12/88 SBG\n*  HALF A PAGE.  WE WANT TO HAVE MOST OF THIS HALF A PAGE   * 12/88 SBG\n*  FOR COPYING LITERALS SO THEY CAN BE ADDRESSABLE FROM THE * 12/88 SBG\n*  WORKAREA'S BASE REGISTER.  WE HOPE THE ALIGNMENT OF      * 12/88 SBG\n*  WORKD+2048 WASN'T REALLY NECESSARY.                      * 12/88 SBG\n*-----------------------------------------------------------* 12/88 SBG\n*  HOWEVER, IF TAPEBUFF+NNN HAS BEEN SPECIFIED IN ANY       * 12/88 SBG\n*  INSTRUCTION, THE SUM OF THE DISPLACEMENT OF TAPEBUFF     * 12/88 SBG\n*  AND NNN MUST NOT EXCEED 4095.  THE LARGEST SUCH          * 12/88 SBG\n*  DISPLACEMENT WE HAVE FOUND AT THIS WRITING IS 282.       * 12/88 SBG\n*  THAT IS TO SAY, TAPEBUFF+282 IS THE FARTHEST OUT         * 12/88 SBG\n*  ADDRESS THAT THE CURRENT INCARNATION OF THIS PROGRAM     * 12/88 SBG\n*  HAS TO GET TO, FROM REGISTER 13.  THEREFORE, I HAVE      * 12/88 SBG\n*  SUBTRACTED 300 FROM 4096 AND SET TAPEBUFF AT WORKD+3796. * 12/88 SBG\n*  PLEASE REMEMBER THAT AT LEAST DOUBLEWORD ALIGNMENT       * 12/88 SBG\n*  SHOULD BE OBSERVED.                                      * 12/88 SBG\n************************************************************* 12/88 SBG\n         ORG   WORKD+3796   ALIGN THE BUFFER NOT SO REAL WELL 12/88 SBG\nTAPEBUFF DS    CL(BUFFSIZE)             TAPE INPUT DATA BUFFER\nWORKLEN  EQU   *-WORKD\n         SPACE 2\n         ORG   OUTBUFF+1\n#UNLOAD  DS    CL8,1C                                         06/84 DBC\n#FILE    DS    CL4,2C                                         06/84 DBC\n#DSN     DS    CL17,2C\n#PSWD    DS    CL4,2C                                         06/84 DBC\n#CDATE   DS    CL6,2C\n#EDATE   DS    CL6,2C                                         06/84 DBC\n#INFOSRC DS    CL6,2C                                         06/84 DBC\n#RECFM   DS    CL5,2C                                         06/84 DBC\n#LRECL   DS    CL5,2C\n#BLKSIZE DS    CL5,2C\n#BLKCNT  DS    CL6,2C\n#DEN     DS    CL4,1C                                         06/84 DBC\n#TRTCH   DS    CL3,2C                                         06/84 DBC\n#LENGTH  DS    CL4,2C                                         06/84 DBC\n#CUMLEN  DS    CL4,2C                                         06/84 DBC\n#CREATOR DS    CL17                                           06/84 DBC\n         SPACE 2\n         PUSH  PRINT\n         PRINT GEN\n         SPACE 2\n         ORG   LABELS\n         SPACE 2\n         VOL   DSECT=NO\n         FL1   DSECT=NO\n         FL2   DSECT=NO\n         POP   PRINT\n         EJECT\nTAPEMAP  CSECT                          RESUME\n         SPACE 2\n         XYZZY NOGEN               SUPPRESS EXPANSION         06/84 DBC\n         SPACE 1                                              06/84 DBC\nTAPEDCB  DCB   DSORG=PS,MACRF=E,DDNAME=SYSUT1,DEVD=TA,EXLST=EXLST,     $\n               IOBAD=TAPEIOB\n         XYZZY GEN                                            09/84 DBC\n         SPACE 2\nTITLE1   DC    C'1VOL=                             TAPE ANALYSIS PROGRA$\n               M   (T A P E M A P)                DAYDAYDAY  MON DD, 19$\n               YY  (YY.DDD)  HH:MM:SS'\nTTL1TIME EQU   *-9\nTTL1DATE EQU   TTL1TIME-23\nTTL1DAY  EQU   TTL1DATE-11\n         SPACE 2\nTITLE2   DC    C'                                                      $\n                                                                       $\n                                    '\n         SPACE 2\nDSFHDING DS    CL133\n         ORG   DSFHDING\n         DC    CL17'0'\nDSFDSN   EQU   *-DSFHDING\n         DC    CL44'-------------------DSNAME-------------------',C'-'\nDSFTRK   EQU   *-DSFHDING\n         DC    CL9'TRKS USED',C'-'                     TRACKS USED\nDSFRECFM EQU   *-DSFHDING\n         DC    CL5'RECFM',C'-'                         RECFM\nDSFLRECL EQU   *-DSFHDING\n         DC    CL5'LRECL',C'-'                         LRECL\nDSFBLKSZ EQU   *-DSFHDING\n         DC    CL7'BLKSIZE',C'-'                       BLKSIZE\nDSFDSORG EQU   *-DSFHDING\n         DC    CL5'DSORG',C'-'                         DSORG\nDSFCDATE EQU   *-DSFHDING\n         DC    CL7'CREATED',C'-'                       C-DATE\nDSFEDATE EQU   *-DSFHDING\n         DC    CL7'EXPIRES',C'-'                       E-DATE\nDSFSECUR EQU   *-DSFHDING\n         DC    CL8'SECURITY',C'-'                      SECURITY\n         ORG   ,\nSLKHDING DS    CL133\n         ORG   SLKHDING\n         DC    CL17'0'\nSLKMEM   EQU   *-SLKHDING\n         DC    CL10'NAME------.'          MEMBER\nSLKSTAT  EQU   *-SLKHDING\n         DC    CL4'STAT',C'-'             STATUS\nSLKREV   EQU   *-SLKHDING-1\n         DC    CL3'REV',C'-'              REVISION\nSLKINFO  EQU   *-SLKHDING\n         DC    CL10'---INFO---',C'-'      INFO\nSLKTYPE  EQU   *-SLKHDING\n         DC    CL8'--TYPE--',C'-'         TYPE\nSLKACTST EQU   *-SLKHDING-1\n         DC    CL7'--ACTST',C'-'          ACTST\nSLKDELST EQU   *-SLKHDING-1\n         DC    CL7'--DELST',C'-'          DELST\nSLKBLKS  EQU   *-SLKHDING-1\n         DC    CL5'-BLKS',C'-'            BLOCKS\nSLKCREAT EQU   *-SLKHDING\n         DC    CL8'-CREATED',C'-'         CREATE DATE\nSLKUPD   EQU   *-SLKHDING\n         DC    CL8'-UPDATED'              LAST UPDATE DATE\n         ORG   ,\n         SPACE 2\n         XYZZY NOGEN                                          09/84 DBC\n         SPACE 1                                              09/84 DBC\nSYSIN    DCB  DSORG=PS,MACRF=GM,DDNAME=SYSIN,LRECL=80,EODAD=EOD,BUFNO=1\n         SPACE 2\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,LRECL=133,            $\n               RECFM=FBA,EXLST=PRTEXLST\n         SPACE 2\nSYSPRNT2 DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRNT2,LRECL=133,            $\n               RECFM=FBA,EXLST=PRTEXLST\n         SPACE 1                                              06/84 DBC\n         XYZZY GEN                 RESTORE EXPANSIONS         06/84 DBC\nCOLHEAD1 DC    CL133' '            1ST TITLE LINE             06/84 DBC\n         ORG   COLHEAD1+1          RELOCATE BACK              06/84 DBC\n         DC    CL8'RELOAD',C' '    #UNLOAD                    06/84 DBC\n         DC    CL4'FILE',C'  '     #FILE                      06/84 DBC\n         DC    CL17' ',C'  '       #DSN                       06/84 DBC\n         DC    CL4'PSWD',C'  '     #PSWD                      06/84 DBC\n         DC    CL6' ',C'  '        #CDATE                     06/84 DBC\n         DC    CL6' ',C'  '        #EDATE                     06/84 DBC\n         DC    CL6' INFO',C'  '    #INFOSRC                   06/84 DBC\n         DC    CL5' ',C'  '        #RECFM                     06/84 DBC\n         DC    CL5' ',C'  '        #LRECL                     06/84 DBC\n         DC    CL5'BLOCK',C'  '    #BLKSIZE                   06/84 DBC\n         DC    CL6' BLOCK',C'  '   #BLKCNT                    06/84 DBC\n         DC    CL3' ',C'  '        #DEN                       06/84 DBC\n         DC    CL3' ',C'  '        #TRTCH                     06/84 DBC\n         DC    CL4'LNTH',C'  '     #LENGTH                    06/84 DBC\n         DC    CL4'TOTL',C'  '     #CUMLEN                    06/84 DBC\n         DC    C'CREATOR'          #CREATOR                   06/84 DBC\n         ORG   ,                   RESTORE                    06/84 DBC\n         SPACE 3                                              06/84 DBC\nCOLHEAD2 DC    CL133' '            2ND TITLE LINE             06/84 DBC\n         ORG   COLHEAD2+1          RELOCATE BACK              06/84 DBC\n         DC    CL8'FORMAT',C' '    #UNLOAD                    06/84 DBC\n         DC    CL4'SEQ#',C'  '     #FILE                      06/84 DBC\n         DC    CL17'DATASET NAME',C'  ' #DSN                  06/84 DBC\n         DC    CL4'REQD',C'  '     #PSWD                      06/84 DBC\n         DC    CL6'C-DATE',C'  '   #CDATE                     06/84 DBC\n         DC    CL6'E-DATE',C'  '   #EDATE                     06/84 DBC\n         DC    CL6'SOURCE',C'  '   #INFOSRC                   06/84 DBC\n         DC    CL5'RECFM',C'  '    #RECFM                     06/84 DBC\n         DC    CL5'LRECL',C'  '    #LRECL                     06/84 DBC\n         DC    CL5' SIZE',C'  '    #BLKSIZE                   06/84 DBC\n         DC    CL6' COUNT',C'  '   #BLKCNT                    06/84 DBC\n         DC    CL3'DEN',C'  '      #DEN                       06/84 DBC\n         DC    CL3'TRT',C'  '      #TRTCH                     06/84 DBC\n         DC    CL4'(FT)',C'  '     #LENGTH                    06/84 DBC\n         DC    CL4'LNTH',C'  '     #CUMLEN                    06/84 DBC\n         DC    C'JOBNAME/STEPNAME' #CREATOR                   06/84 DBC\n         ORG   ,                   RESTORE                    06/84 DBC\n         SPACE 3                                              06/84 DBC\n         EJECT\nERR#LIST DC    0F'0'                                                U15\n*                                                                   U15\n*  ERROR MSGS FOR EACH SENSE BIT FOR 3420 TAPE DRIVES               U15\n*                                                                   U15\n         SPACE 1\n*** BYTE 0                       BIT                                U15\n         DC    C'CMD REJ   '      0     80                          U15\n         DC    C'INT REQ   '      1     40                          U15\n         DC    C'BUS OUT CK'      2     20                          U15\n         DC    C'EQC CHK   '      3     10                          U15\n         DC    C'DATA CHK  '      4     08                          U15\n         DC    C'OVERRUN   '      5     04                          U15\n         DC    C'WORD CNT 0'      6     02                          U15\n         DC    C'DATA CNVTR'      7     01                          U15\n         SPACE 1\n*** BYTE 1                       BIT                                U15\n         DC    C'NOISE     '      0     80                          U15\n         DC    C'SEL+RDY+NB'      1     40                          U15\n         DC    C'NOT READY '      2     20                          U15\n         DC    C'7 TRK FEAT'      3     10                          U15\n         DC    C'@ LOAD PT '      4     08                          U15\n         DC    C'WRITE STAT'      5     04                          U15\n         DC    C'FILE PROT '      6     02                          U15\n         DC    C'NOT CAPABL'      7     01                          U15\n         SPACE 1\n*** BYTE 2                       BIT                                U15\n         DC    C'TIE BIT 0 '      0     80                          U15\n         DC    C'TIE BIT 1 '      1     40                          U15\n         DC    C'TIE BIT 2 '      2     20                          U15\n         DC    C'TIE BIT 3 '      3     10                          U15\n         DC    C'TIE BIT 4 '      4     08                          U15\n         DC    C'TIE BIT 5 '      5     04                          U15\n         DC    C'TIE BIT 6 '      6     02                          U15\n         DC    C'TIE BIT 7 '      7     01                          U15\n         SPACE 1\n*** BYTE 3                       BIT                                U15\n         DC    C'R/W VRC   '      0     80                          U15\n         DC    C'MT/LRC    '      1     40                          U15\n         DC    C'SKEW      '      2     20                          U15\n         DC    C'END DC/CRC'      3     10                          U15\n         DC    C'ENV/ECC   '      4     08                          U15\n         DC    C'1600 BPI  '      5     04                          U15\n         DC    C'BACKWARD  '      6     02                          U15\n         DC    C'C/P COMPAR'      7     01                          U15\n         SPACE 1\n*** BYTE 4                       BIT                                U15\n         DC    C'MP H E    '      0     80                          U15\n         DC    C'DROP READY'      1     40                          U15\n         DC    C'TAPE INDIC'      2     20                          U15\n         DC    C'W T VRC   '      3     10                          U15\n         DC    C'MICROPGM  '      4     08                          U15\n         DC    C'LWR       '      5     04                          U15\n         DC    C'UNIT CHECK'      6     02                          U15\n         DC    C'RSRVD RPQ '      7     01                          U15\n         SPACE 1\n*** BYTE 5                       BIT                                U15\n         DC    C'NEW SUBSYS'      0     80                          U15\n         DC    C'NEW SUBSYS'      1     40                          U15\n         DC    C'WTM CHECK '      2     20                          U15\n         DC    C'ID BURST  '      3     10                          U15\n         DC    C'START READ'      4     08                          U15\n         DC    C'PART''L REC'     5     04                          U15\n         DC    C'POSTAMBLE '      6     02                          U15\n         DC    C'RSRVD RPQ '      7     01                          U15\n         SPACE 1\n*** BYTE 6                       BIT                                U15\n         DC    C'7 TRK UNIT'      0     80                          U15\n         DC    C'WRT CURR  '      1     40                          U15\n         DC    C'DUAL DEN  '      2     20                          U15\n         DC    C'NOT 1600  '      3     10                          U15\n         DC    C'MOD 4,6,8 '      4     08                          U15\n         DC    C'MD 5,6,7,8'      5     04                          U15\n         DC    C'MOD 3,4   '      6     02                          U15\n         DC    C'MD 3,4,7,8'      7     01                          U15\n         SPACE 1\n*** BYTE 7                       BIT                                U15\n         DC    C'LAMP FAIL '      0     80                          U15\n         DC    C'BOTM LEFT '      1     40                          U15\n         DC    C'BOTM RIGHT'      2     20                          U15\n         DC    C'RESET KEY '      3     10                          U15\n         DC    C'DSE       '      4     08                          U15\n         DC    C'ERASE HEAD'      5     04                          U15\n         DC    C'AIR BEARNG'      6     02                          U15\n         DC    C'LOAD FAIL '      7     01                          U15\n         SPACE 1\n*** BYTE 8                       BIT                                U15\n         DC    C'IBG       '      0     80                          U15\n         DC    C'SPARE ?   '      1     40                          U15\n         DC    C'SPARE ?   '      2     20                          U15\n         DC    C'EARLY READ'      3     10                          U15\n         DC    C'CTL BURST '      4     08                          U15\n         DC    C'SLOW RD B '      5     04                          U15\n         DC    C'SLOW RD E '      6     02                          U15\n         DC    C'VELOCITY  '      7     01                          U15\n         SPACE 1\n*** BYTE 9                       BIT                                U15\n         DC    C'6250 CORR '      0     80                          U15\n         DC    C'WRT VEL CH'      1     40                          U15\n         DC    C'CHAN BUFF '      2     20                          U15\n         DC    C'CRC III   '      3     10                          U15\n         DC    C'6250 FEAT '      4     08                          U15\n         DC    C'SPARE ?   '      5     04                          U15\n         DC    C'SPARE ?   '      6     02                          U15\n         DC    C'TCU RSRVD '      7     01                          U15\n         EJECT                                                12/88 SBG\n************************************************************* 12/88 SBG\n*    THE FOLLOWING LITERALS ARE MOVED INTO THE WORKAREA     * 12/88 SBG\n*    DSECT.  THE REASON IS THAT THE 3RD BASE REGISTER HAS   * 12/88 SBG\n*    BEEN EXCEEDED IN THE COURSE OF PROGRAM MODIFICATIONS,  * 12/88 SBG\n*    AND SOME LITERALS WHICH WERE ADDRESSABLE BY THE BASE   * 12/88 SBG\n*    REGISTERS, HAVE NOW BEEN MOVED TO THE WORK AREA DSECT. * 12/88 SBG\n*    THEREFORE, ANY CHANGES TO THAT PART OF THE WORKAREA    * 12/88 SBG\n*    DSECT MUST BE REFLECTED BY CORRESPONDING CHANGES       * 12/88 SBG\n*    HERE.                                                  * 12/88 SBG\n************************************************************* 12/88 SBG\n         DS    0D                  ALIGNMENT                  12/88 SBG\nLITMOVES DC    C'THISFILEHASBEENDELETEDORISRESERVED'  NEWVERS 12/88 SBG\n         DC    C'DELETEDBYPREVIOUSVERSIONOFTHISTAPE'  OLDVERS 12/88 SBG\n         DC    C'+** REQUESTED VOL=\"123456\" **'\n         SPACE 1\n         DC    C' *** THIS IS VOLUME # XXXX OF THE ABOVE MULTIPLE VOLUM$\n               E FILE.  FIRST VOLUME WAS XXXXXX.'\n         SPACE 1\n         DC    C' UNKNOWN PARM OPTION AT COL=XXX.  ANY REMAINING PARM I$\n               GNORED.'\n         DC    XL12'FFFFFFFFFFFFFFFFFFFFFFFF'\n         DC    C'//MVSMODS'       ARNIE CASINGHINO'S JOBNAME  12/88 SBG\n         DC    C'* VERSION'       DATE OF CBT TAPE - PREFIX   12/88 SBG\n         DC    C'VERSION #'       VERSION OF CBT TAPE PREFIX  12/88 SBG\n         DC    C'VER        -  -  '   DISPLAY FOR CBTHEADER   12/88 SBG\n************************************************************* 12/88 SBG\n         DC    C'IEBCOPY'          UNLOADER NAMES             12/88 SBG\n         DC    C'IEHMOVE'                                     12/88 SBG\n         DC    C'IEBISAM'                                     12/88 SBG\n         DC    C'IEHDASDR'                                    12/88 SBG\n         DC    C'IEBUPXXX'         IEBUPDTE OR IEBUPDAT       12/88 SBG\n         DC    C'FDR   '                                      12/88 SBG\n         DC    C'FDRDSF'                                      12/88 SBG\n         DC    C'FDR???'                                      12/88 SBG\n         DC    C'SLICKMNG'                                    12/88 SBG\n         DC    C'TAPEMAP'                                     12/88 SBG\n         DC    C'SMPPTFIN'                                    12/88 SBG\n         DC    C'CBT973'                                      12/88 SBG\n         DC    C'CBTEMPTY'         EMPTY FILE ON THE CBT TAPE 12/88 SBG\n         DC    C'CBT DOC '         DOC FILE FOR THE CBT TAPE  12/88 SBG\n         DC    X'33008003'        UNIT TYPE FOR 3420C CARTS   09/89\u00acSBG\n         DS    0F                 ALIGNMENT                   12/88 SBG\n         DC    F'32720'           BLOCK SIZE OF CBT DOC FILE  12/88 SBG\n         DC    C'-*****  ONE OR MORE FILES HAVE DENSITY INDICATED INCOR$\n               RECTLY IN LABELS.  ALL FILES ARE WRITTEN AT XXXX BPI  **$\n               ***'\nLITMVLEN EQU   *-LITMOVES                                     12/88 SBG\n************************************************************* 12/88 SBG\n*    END OF LITERAL MOVES.                                  * 12/88 SBG\n************************************************************* 12/88 SBG\n         EJECT                                                12/88 SBG\n         DCBD  DSORG=PS,DEVD=DA                                     THO\nUCB      DSECT                                                      THO\n         IEFUCBOB                                                   THO\n         AIF   ('&SP4' EQ 'YES').NEWDEB1                            SBG\n         IEZDEB                                                     THO\n         AGO   .OLDDEB1                                             SBG\n.NEWDEB1 ANOP                                                       SBG\n         IECTDEBX                                                   SBG\n.OLDDEB1 ANOP                                                       SBG\n         END   TAPEMAP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "X3480": {"ttr": 6657, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x00\\x1f\\x00\\x91\\x00\\x1f\\x12\\x00\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf9\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-01-01T00:00:00", "modifydate": "1991-01-01T12:00:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "FILE299"}, "text": "ON MAY 21, 1990, I BROKE AN IBM 3480 CARTRIDGE APART AND MEASURED\n IS AS 652 FEET IN LENGTH. THIS TAPE WAS COMPLETELY FULL OF SMF\n DATA (A COPY OF COURSE) AND TAPEMAP SHOWED THAT IT WAS ONLY\n 503 FEET IN LENGTH. I'M NOT SURE WHAT IT ALL MEANS, MAYBE THERE\n HAS TO BE A LONG LEADER AND TRAILER ON THE TAPE\n\n                          ARNIE\n\n\nAS OF YET (03/22/87) TAPEMAP DOES NOT HAVE 3480 SUPPORT\n\n1 MILLIMETER   =     .039   INCH\n1 CENTIMETER   =    0.39    INCH\n1 INCH         =    2.54    CENTIMETERS\n\nDENSITY OF 3480\n\n 1491 CHARACTERS PER MILLIMETER AMERICAN NATIONAL STANDARD\n\n1 CHARACTER = 1 BYTE OR 8 BITS\n\n           1491\n      X    25.4\n          -------\n         37,871\n      X       8\n          -------\n        302,971 BITS PER INCH\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT299/FILE299.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT299", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}