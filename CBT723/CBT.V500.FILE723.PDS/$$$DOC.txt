Sam,

Can you check out this small bit of ISPF code for me?  It
consists of two small COBOL programs and one panel.  Compile and
link the COBOL into some load library accessible to ISPF
(ISPLLIB, STEPLIB or TSOLIB tasklib) and slap the panel into some
ISPPLIB as member name SHOWMEMP.

Invoke as: Command ===> TSO SHOWMEM

It's no big deal or anything.  It just shows 24/31 bit memory
limits, usage and how much is still available.  You can get the
same thing (an TONS of other stuff) by using ISPVCALL STATUS from
Option 6 (TSO) of ISPF.  I wrote it more to demonstrate how to put
an ISPF "wrapper" around generic code (callable from anywhere).
This is why one of the programs is named CLCCSTOR (the "generic"
subroutine) and the other one has as its name, the command name:
SHOWMEM.

If everything hangs together, toss it on the CBT tape.  One
advantage that the little dialog has is that as you press enter,
the amounts can change.  If an ISPF user starts new screens or
edit sessions, more memory is consumed and pressing enter will
"refresh" the numbers. With ISPVCALL STATUS, you'd have to end
the View/Edit of the trace file and reinvoke ISPVCALL STATUS to
get the numbers to "refresh".

Jim Moore
