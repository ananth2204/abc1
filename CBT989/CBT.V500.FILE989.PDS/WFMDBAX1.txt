/*                                                                   REXX
  WFM4ADD - Add records to dsn and mbr dbs based on datasetname list
*/
 call xmsg 'Add database records, parm:' arg(1)

 call xtso "profile"
 $nomsgid=(wordpos('NOMSGID',$.1)>0)
 if $nomsgid then do
   call xtso "profile msgid"
   say 'Profile MSGID set temporarily'
 end

 $et = time('e')
 parse value copies('0 ',20) with $rc $msglvl .
 $indent = '       '
 arg p
 p=space(translate(p,' ',','))
 parse var p . 'MSGLVL('$msglvl')' . 0 . 'SORTU('$sortu')' .,
           0 . 'TYPRUN('$typrun')' . 0 . 'PDSMAIN('$pdsmain')' .
 $msglvl =word($msglvl 0,1)
 $pdsmain=word($pdsmain 'PDSMAIN',1)
 $sortu =word($sortu 'N',1)
 if wordpos($sortu,'N Y')=0 then exit xmsg('Invalid sortu',8)
 if wordpos($typrun,'SIM RUN')=0 then exit xmsg('Invalid typrun',8)
 say 'Msglvl:' $msglvl
 say 'Sortu: ' $sortu
 say 'Typrun:' $typrun

 /* read and filter dsn list */
 call xmsg 'Read and format dsn list'
 "execio * diskr updlist (stem updl. finis)"
 if rc<>0 then call quit 8,'Read updlist rc' rc
 call xmsg updl.0 'records read from list'
 /* drop 'delete' records */
 nn=0
 do n=1 to updl.0
   if left(updl.n,1)='*' ,
    | substr(updl.n,51,1)='D' then iterate
   parse value nn+1 strip(left(updl.n,50)) with nn dsnl.nn
 end
 dsnl.0=nn
 call xmsg dsnl.0 'dataset records after dropping deletes'
 drop updl.
 if dsnl.0=0 then call quit 4,'Empty list'
 if $sortu='Y' then do
   call bpxwunix 'sort -u', 'DSNL.', 'DSNL.', 'STDERR.'
   call xmsg  dsnl.0 'dataset records after sort-unique'
 end
 if $msglvl>1 then do
   call xmsg  'Dataset list'
   do n=1 to dsnl.0
     say $indent dsnl.n
   end
 end
 say ''

 /* make update lists */
 call xmsg 'Building dataset and member update records'
 mbran=0          /* count all members so far         */
 mbrwn=0          /* count members in write buffer    */
 mbrwmax=1000     /* max count before write to buffer */
 dsaln=0          /* count datasets so far            */
 do dsnln=1 to dsnl.0
   mbrln=0        /* count members in library         */
   Call PdsData dsnl.dsnln dsnln
   if mbrwn<mbrwmax then iterate
   call xmsg '-write member list for' mbrwn 'at' mbran
   mbrl.0=mbrwn
   "execio" mbrwn "diskw mbrdbin (stem mbrl.)"
   if rc<>0 then do
     call xmsg 'Write mbrdbin rc' rc
     do n=1 to mbrwn
       say '"'mbrl.n'"'
     end
     call quit 8,'write mbrdbin rc' rc
   end
   mbrwn=0        /* count members in write buffer */
 end
 "execio" mbrwn "diskw mbrdbin (stem mbrl. finis)"
 drop dsnl.
 dsal.0=dsaln
 call xmsg 'Datasets' dsaln', members' mbran
 say ''

 if $typrun='RUN' then do

   /* update dsn db */
   call xmsg 'Update dsndb with' dsaln 'records'
   "execio" dsaln "diskw dsndbin (stem dsal. finis)"
   if rc >1 then call quit 8,'write dsnlist rc' rc
   cc=XSort('SORTIN=DSNDBIN,SORTOUT=DSNDB','FIELDS(5,12,CH,A)')
   if cc<>0 then call quit 12,'Sort rc' cc
   call xmsg 'Update ok'
   say ''

   /* update mbr db */
   if mbran=0 then call quit 4,'No member updates'
   call xmsg 'Update mbrdb with' mbran 'records'
   cc=XSort('SORTIN=MBRDBIN,SORTOUT=MBRDB','FIELDS(5,20,CH,A)')
   if cc<>0 then call quit 8,'Sort rc' cc
   call xmsg 'Update ok'
   say ''

 end
 else call xmsg 'Add bypassed due to typrun' $typrun

 /* process ended */
 call xmsg 'Add ended, elapsed time:' time('e') - $et
 call quit $rc

Quit:
 if $nomsgid then call xtso "profile nomsgid"
 if arg(2)<>'' then say time() arg(2)
 exit word(arg(1) 0,1)

 /*--------------------------------------------------------------------
                      Load dataset info
 add dsnlist DSAL.DSAN with key vol dsn type dsorg recfm lrecl cat
 add mbrlist MBRL.MBRN with name||key,
               id;created;updated;vermod;mod;size;init;,
               ssi;attr;aliasof
 --------------------------------------------------------------------*/
PdsData:
 arg p
 parse var p dvol +6 ddsn dnum .
 dkey = date('c'), /* 4 bytes */
     || left(space(translate(time('l'),' ',':.'),0),8) /* 8 bytes */

 Call xmsg 'Dataset' ddsn 'on' dvol '('dnum 'of' dsnl.0')'
 cc=Listdsi("'"ddsn"' volume("dvol")")
 if cc=16 & sysreason=24   then return  Xmsg('Not found')
 if cc<>0                  then return  Xmsg('Listdsi rc' cc ,
                           'reason('sysreason')' listdsic(sysreason))
 if left(sysdsorg,2)<>'PO' then return  Xmsg('Not partitioned')
 if sysdssms='PDSE' then sysdsorg='PE'
 sysrecfm=left(space(translate(sysrecfm,' ',','),0),2)
 dsaln=dsaln+1
 /* cataloged info */
 dscat='N'
 cc=XTSO("listc ent('"ddsn"') volume")
 if cc=0 then do
   n=$.0
   cvol = right(word($.n,1),6)
   if cvol=sysvolume then dscat='Y'
 end

 dsal.dsaln = dkey dvol space(ddsn sysdsorg sysrecfm syslrecl sysblksize dscat)

 cc=outtrap('pl.')
 ""$PdsMain "'"ddsn"' vol("dvol") attr : short"
 pcc=rc
 cc=outtrap('off')
 if pcc<>0 then return xmsg('PDSMAIN error' pcc,8)

 parse value '0 0 PO' with mln pp dsorg name vermod created id,
      updated attr size init ssi mod aliasof dsinfo lastname

 Do pp=1 to pl.0
   parse var pl.pp w1 w2 w3 .
   Select
     when w1='PDS230I' & w3='VER.MOD' then iterate
     when w1='PDS232I' & w3='ALIASOF' then iterate
     when w1='PDS230I' | w1='PDS232I' then do
       parse value '' with name vermod created id,
          updated attr size init ssi mod aliasof
       if w1='PDS230I' then do  /*  srclib */
         if w3='SSI:' then parse var pl.pp . =10 name +8 . ssi .
         else,
           parse var pl.pp . =10 name +8 . =21 vermod =29 created +8 .,
           =39 updated =54 size =60 init =66 mod =73 id
       end
       else ,                   /*  pgmlib */
         parse var pl.pp . =9 name =18 aliasof,
           =27 created =36 size =42 ssi =51 attr
       if pos('.',name)>0 then do
         call xmsg name 'invalid member name, ignored'
         iterate
       end
       if name=lastname then do
         call xmsg name 'duplicate member name, ignored'
         iterate
       end
       lastname=name
       mbrln=mbrln+1
       mbrwn=mbrwn+1   /* update # members in write buffer */
       mbrl.mbrwn=left(strip(name),8,'\')dkey,
       || space(id';'created';'updated';'vermod';'mod';'size';'init';',
              ssi';'attr';'aliasof,0)
     end
     when w1='PDS400W' then return xmsg('Empty library',1)
     when w1='PDS530W' then return xmsg('Not a library',2)
  /* when w1='PDS531W' then dsal.dsaln=overlay('PE',dsal.dsaln,66)   pdse*/
     otherwise nop
   end
 end
 mbran=mbran+mbrln     /* update # members so far          */
 call xmsg 'Member records:' mbrln 'totals so far:' mbran
 return 0
l8: return left(strip(arg(1)),8)
/*
Dataset info
----+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
PDS200I DISP UNIT     RECFM LRECL BLKSIZE   ALLOCTRK FREETRK SECONDARY FREEDIR
PDS200I SHR  3390     FB       80    5600   1X     7       0     3 TRK       5

Srclib member info
PDS230I MEMBER      VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT   MOD   ID
PDS230I  $$$#DATE    01.00  02/09/29  02/09/29 22:29    12    12     0  SHIPDAT

Pgmlib member info
PDS232I NAME     ALIASOF   CREATED  SIZE SSI      ATTRIBUTES
PDS232I MSGXRBL           17/01/20  5800          R24, A31
*/
XMsg: if arg(1)<>'' then say time() arg(1);return word(arg(2) 0,1)
XTso: trace off; zz=outtrap(word(arg(2) '$.',1))
        address tso arg(1);zz=outtrap('off');xtsorc=rc;return rc

XSort:
 r.1 = ' OPTION' translate(arg(1))
 "execio 1 diskw dfsparm (stem r. finis)"
 r.1 = ' SORT' translate(arg(2))
 "execio 1 diskw sysin  (stem r. finis)"
 "Call *(SORT)"
 src=rc
 if src<>0 then do
   "execio * diskr sysout (stem sout. finis)"
   do n=1 to sout.0
     say sout.n
   end
   return xmsg('SORT rc' src,8)
 end
 Return 0

ListDsiC: Procedure
 t.0 ='Normal completion.'
 t.1 ='Error parsing the function.'
 t.2 ='Dynamic allocation processing error.'
 t.3 ='The data set is a type that cannot be processed.'
 t.4 ='Error determining UNIT name.'
 t.5 ='Data set not cataloged.'
 t.6 ='Error obtaining the data set name.'
 t.7 ='Error finding device type.'
 t.8 ='The data set does not reside on DASD.'
 t.9 ='DFHSM migrated the data set,',
      'NORECALL prevents retrieval.'
 t.11='Directory information was requested, but you lack',
      'authority to access the data set.'
 t.12='VSAM data sets are not supported.'
 t.13='The data set could not be opened.'
 t.14='Device type not found in UCB tables.'
 t.17='System or user abend occurred.'
 t.18='Partial data set information was obtained.'
 t.19='Data set resides on multiple volumes.'
 t.20='Device type not found in eligible device table.'
 t.21='Catalog error trying to locate the data set.'
 t.22='Volume not mounted.'
 t.23='Permanent I/O error on volume.'
 t.24='Data set not found.'
 t.25='Data set migrated to non-DASD device.'
 t.27='No volume serial is allocated to the data set.'
 t.28='The ddname must be one to eight characters.'
 t.29='Data set name or ddname must be specified.'
 t.30='Data set is not SMS-managed.'
 t.31='ISITMGD macro returned with bad return code and reason code.',
      'Return code and reason code can be found in message',
      'IKJ58431I, which is returned in variable &SYSMSGLVL2.'
 t.32='Unable to retrieve SMS information.',
      'DFSMS/MVS has incorrect level.'
 n=arg(1)+0
 return t.n
