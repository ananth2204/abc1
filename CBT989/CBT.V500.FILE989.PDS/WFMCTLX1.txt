/*                                                              rexx

  Generate control data for other steps

*/

 parse value '' with date1 date2
 arg p

 say 'WFM control data generator started at' todayd() '('date('j')')' time()
 if p<>'' then call Listp 'Parameters',p
 else say 'No parameters'
 parse var p . 'DATE('$date')' ,
           0 . 'DISK('$disk')' ,
           .

 /* get date(s) from parm or dataset */
 if $date<>'' then do      /* date from parm    */
   say 'Using date from parm'
   parse var $date date1','date2
   date2 = word(date2 date1,1)
 end
 else do                   /* date from dataset */
   "execio 1 diskr lastdate (stem r. finis)"
   if rc=0 then do
     Call Listp  'Old lastdate record',r.1
     olddate = word(r.1,1)
     date1 = ud2bd(olddate)+1
     if date1>ysday() then exit xmsg('Update already run',4)
     date1 = bd2sd(date1)
   end
   else say 'Read lastdate rc' rc', will use default'
 end
 if date1<>'' then date1 = ud2bd(date1)
 else date1 = ToDay()-2
 if date2<>'' then date2 = ud2bd(date2)
 else date2 = ToDay()-1
 call listp 'Date range',bd2dd(date1)','bd2dd(date2)
 if date1>date2 then exit xmsg('Invalid daterange',8)

 /* update lastdate in dataset */
 if $date='' then do /* rewrite if read from file */
   r.1=bd2dd(date2) '    was:' olddate 'latest run:' todayd() time()
   Call Listp  'New lastdate record',r.1
   "execio 1 diskw lastdate (stem r. finis)"
 end

 /* SMF dump date               */
 r.1 = ' DATE('bd2ljd(date1)','bd2ljd(date2)')'
 Call Listp  'SMF dump date',r.1
 "execio 1 diskw smfldate (stem r. finis)"

 /* SMF history ds date (sort)  */
 r.1 = "            OR,11,4,BI,LT,X'"bd2smf(date1)"',",
    ||             "OR,11,4,BI,GT,X'"bd2smf(date2)"',"
 Call Listp  'SMF history date',r.1
 "execio 1 diskw smfhdate (stem r. finis)"

 /* disk record for dsn db      */
 if $disk='' then r.1 = '* all disks'
 else r.1 = ' INCLUDE COND=(18,'length($disk)',CH,EQ,C'''$DISK''')'
 Call Listp  'Dsn DB daterec',r.1
 "execio 1 diskw ddbdisk (stem r. finis)"

 /* disk record for sorts  */
 if $disk='' then r.1 = '* all disks'
 else r.1 = ' INCLUDE COND=(1,'length($disk)',CH,EQ,C'''$DISK''')'
 "execio 1 diskw smfdisk (stem r. finis)"
 Call Listp  'SORT disk record',r.1

 /* disk record for VTOC  */
 if $disk='' then r.1 = '  ALL -'
 else r.1 = '   '$disk '-'
 Call Listp  'VTOC disk record',r.1
 "execio 1 diskw vtocdisk (stem r. finis)"

 /* date records for VTOC  */
 r.1= '   AND1(REFDT,GE,'bd2jd(date1)') AND2(REFDT,LE,'bd2jd(date2)') +'
 Call Listp  'VTOC date record',r.1
 "execio 1 diskw vtocdate (stem r. finis)"

 say 'WFM control data generator ended at' date('s') time()
 exit 0

Listp: trace off; say left(arg(1),20) strip(arg(2));return 0
XMsg:  trace off; if arg(1)<>'' then say arg(1);return word(arg(2) 0,1)
/* date conversions */
sd2bd:  return date('b',arg(1),'s')
dd2bd:  return date('b',space(translate(arg(1),' ','-'),0),'s')
jd2bd:  return date('b','20'left(arg(1),2)'0101','s')-1+substr(arg(1),3)
ljd2bd: return date('b',    left(arg(1),4)'0101','s')-1+substr(arg(1),5)
bd2jd:  return substr(Date('S',arg(1),'B'),3,2)Right(Date('d',arg(1),'B'),3,0)
bd2ljd: return Left(bd2sd(arg(1)),2)bd2jd(arg(1))
bd2sd:  return date('s',arg(1),'b')
bd2dd:  return Insert('-',Insert('-',bd2sd(arg(1)),6),4)
bd2y2:  return substr(Date('S',arg(1),'B'),3,2)
bd2y4:  return left(Date('S',arg(1),'B'),4)
ud2bd:  trace off
 if arg(1)='' then return date('b')
 if pos('-',arg(1))>0 then return dd2bd(arg(1))     /* dashed                */
 if length(arg(1))=8  then return sd2bd(arg(1))     /* standard              */
 if length(arg(1))=5  then return jd2bd(arg(1))     /* julian                */
 if length(arg(1))=7  then return ljd2bd(arg(1))    /* long julian           */
 return    arg(1)                                   /* assume base           */
today:  return date('b')
ysday:  return date('b')-1
bd2smf: return '01'bd2jd(arg(1))'F'                 /* century 20xx forced   */
todayd: return bd2dd(date('b'))
