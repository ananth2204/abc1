{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011656000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE297.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE297.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x04'", "DS1TRBAL": "b'\\xc4\\xb2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x05\\x00\\x0e\\x02\\x06\\x00\\x08\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t)\\x8f\\x01\\t)\\x8f\\x12S\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-10-25T00:00:00", "modifydate": "2009-10-25T12:53:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-478"}, "text": "REGULAR CBT TAPE - VERSION 478    FILE:  297\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT478.FILE297\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 10 MEMBERS COUNTED; CUMULATIVE SIZE IS 4,288 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   10/25/09    12:53:44    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$CHANGE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x14\\x01\\x07\\x07o\\x01\\x07\\x07o!\\x08\\x00!\\x00!\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-03-17T00:00:00", "modifydate": "2007-03-17T21:08:14", "lines": 33, "newlines": 33, "modlines": 0, "user": "SBGOLOB"}, "text": "Global Resource Serialization (GRS) ISPF Interface\n\nVersion 1.4.2\nProvides an interactive view of the GRS queue utilizing ISPF\ndialog manager services\n\nA high level resource list is displayed based on user specified\nselection criteria\n\nFrom the high level resource list, individual resource details\ncan be accessed\n\nChange Log:\n2007-03-15 - Version 1 Release 4 Modification 2\n             RIBETCBF - TCB Abending flag removed in z/OS 1.6\n             Change default waiters to 0\n             Change default propagate to NO\n             Enhanced GQSCAN return code checking\n             Add RIBDMIN RIB detail minimum length (64KB)\n             Add RIBDMAX RIB detail maximum length (256KB)\n             Add RIBLMIN RIB list minimum length (4MB)\n             Add RIBLMAX RIB list maximum length (20MB)\n2005-10-19 - Version 1 Release 4 Modification 1\n2004-09-04 - Version 1 Release 4 Modification 0\n2003-08-29 - Version 1 Release 3 Modification 0\n             Modified GQSCAN return code checking\n             Modified selection criteria manipulation\n             Changed GRSSCSCO references from CL7 to CL8\n             Add message - No Unknown Major Names\n             Add XSYS=NO as default to GQSCAN (GRSSCAN)\n             Move Major Enqueue Tabble to $COMMON\n1999-04-27 - Version 2 Release 6 Modification 0\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\"\\x01\\x00\"O\\x01\\x07\\x07o!\\t\\x00\\x08\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-08-11T00:00:00", "modifydate": "2007-03-17T21:09:22", "lines": 8, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "Global Resource Serialization (GRS) ISPF Interface\n    - Current Version is 1.4.2\n\nProvides an interactive view of the GRS queue. A high\nlevel resource list is displayed based on user\nspecified selection criteria.  From the high level\nresource list, individual resource details can be\naccessed.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$COMMON": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x007\\x00\\x97#\\x0f\\x01\\x07\\x05\\x7f!!\\x0c8\\x07_\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1997-08-18T00:00:00", "modifydate": "2007-02-26T21:21:37", "lines": 3128, "newlines": 1887, "modlines": 0, "user": "ZT15"}, "text": "**********************************************************************\n*                                                                    *\n* $COMMON      Common macros                                         *\n*                                                                    *\n**********************************************************************\n*                                                                    *\n* Name         Description                                           *\n* ========     ================                                      *\n* $ADD         Add                                                   *\n* $ADDRESS     Address macro operands                                *\n* $CVD         Convert to decimal                                    *\n* $DECR        Decrement                                             *\n* $ENTRY       Standard Linkage - Entry                              *\n* $EXIT        Standard Linkage - Exit                               *\n* $FILL        Fill a Field                                          *\n* $FIND        Find character                                        *\n* $HEX         Hex                                                   *\n* $INCR        Increment                                             *\n* $STRIP       Strip character                                       *\n* $VLC         Variable length compare                               *\n* $VLM         Variable length move                                  *\n* $VLT         Variable Length Translate and Test                    *\n* ADDPOP       Start Pop-Up Window Mode                              *\n* BRIF         Browse interface                                      *\n* BROWSE       Browse a dataset                                      *\n* CONTROL      Set processing modes                                  *\n* DISPLAY      Display panels and messages                           *\n* DSINFO       Data Set Information Dialog Service                   *\n* EDIT         Edit a dataset                                        *\n* IEEMBRDS     SMF RDS                                               *\n* IEEMBSST     SMF Selectivity Table                                 *\n* IHALLT       LNKLST Table (LLT)                                    *\n* IHALPAT      LPALST Table (LPAT)                                   *\n* IKJEFTSR     TSO/E Service Facility Routine                        *\n* IKJZT301     TSO/E Broadcast Data Set Record 1                     *\n* IKJZT302     TSO/E Broadcast Notices Directory Record              *\n* IKJZT303     TSO/E Broadcast Notices Message Record                *\n* IKJZT304     TSO/E Broadcast Mail Directory Record                 *\n* IKJZT305     TSO/E Broadcast Mail Message Record                   *\n* ISPFINIT     Initialize ISPF Environment                           *\n* ISPFTERM     Terminate ISPF Environment                            *\n* ISPFVARS     Define ISPF Variables                                 *\n* LMCLOSE      Close a Data Set                                      *\n* LMDFREE      Free a Data Set List ID                               *\n* LMDINIT      Initialize a Data Set List                            *\n* LMDLIST      List Data Sets                                        *\n* LMFREE       Free Data Set from its Association with Data ID       *\n* LMINIT       Generate a Data ID for a Data Set                     *\n* LMMLIST      List a Library's Members                              *\n* LMOPEN       Open a Data Set                                       *\n* LOG          Write a message to the log data set                   *\n* PQUERY       Obtain panel information                              *\n* REMPOP       Remove a Pop-Up Window                                *\n* SELECT       Select a panel or function                            *\n* SETMSG       Set next message                                      *\n* TBADD        Add a row to a table                                  *\n* TBBOTTOM     Set the row pointer to the bottom                     *\n* TBCLOSE      Close and save a table                                *\n* TBCREATE     Create a new table                                    *\n* TBDELETE     Delete a row from a table                             *\n* TBDISPL      Display table information                             *\n* TBEND        Close a table without saving                          *\n* TBERASE      Erase a table                                         *\n* TBEXIST      Determine whether a row exists in a table             *\n* TBGET        Retrieve a row from a table                           *\n* TBLMAJOR     Major Enqueue Table                                   *\n* TBMOD        Modify a row from table                               *\n* TBOPEN       Open a table                                          *\n* TBPUT        Update a row from table                               *\n* TBQUERY      Obtain table information                              *\n* TBSARG       Define a search argument                              *\n* TBSAVE       Save a table                                          *\n* TBSCAN       Search a table                                        *\n* TBSKIP       Move the row pointer                                  *\n* TBSORT       Sort a table                                          *\n* TBTOP        Set the row pointer to the top                        *\n* TBVCLEAR     Clear table variables                                 *\n* VCOPY        Create a copy of a variable                           *\n* VDEFINE      Define function variables                             *\n* VDELETE      Remove a definition of function variables             *\n* VGET         Retrieve variables from a pool or profile             *\n* VMASK        Mask and Edit Processing                              *\n* VPUT         Update variables in the shared or profile pool        *\n* VREPLACE     Replace a variable                                    *\n* VRESET       Reset function variables                              *\n*                                                                    *\n**********************************************************************\n*                                                                    *\n* Name     Syntax                                                    *\n* ======== ================                                          *\n* $ADD     To,From                                                   *\n* $ADDRESS Address macro operands                                    *\n* $CVD     To,From,mask                                              *\n* $DECR    Operand                                                   *\n* $ENTRY   Standard Linkage - Entry                                  *\n* $EXIT    Standard Linkage - Exit                                   *\n* $FILL    Field,Immediate_Character                                 *\n* $FIND    Find character                                            *\n* $HEX     To,From,Length                                            *\n* $INCR    Operand                                                   *\n* $STRIP   Field,Immediate_Character                                 *\n* $VLC     Variable length compare                                   *\n* $VLM     Variable length move                                      *\n* $VLT     Variable Length Translate and Test                        *\n* BRIF     DATA=,RECFM=,LRECL=,READ=0,COMMAND=0,DIALOG=,PANEL=,      *\n*          FORMAT=,MIXED=NO,ERRET=                                   *\n* BROWSE   DATASET=                                                  *\n* CONTROL  CTL1,CTL2,CTL3,CTL4                                       *\n* DISPLAY  PANEL=,MESSAGE=,CURSOR=,CSRPOS=,COMMAND=,RETBUFFR=,       *\n*          RETLGTH=,MSGLOC=                                          *\n* EDIT     DSNAME,VOLSER                                             *\n* IHALLT                                                             *\n* IHALPAT                                                            *\n* IKJEFTSR                                                           *\n* IKJZT301                                                           *\n* IKJZT302                                                           *\n* IKJZT303                                                           *\n* IKJZT304                                                           *\n* IKJZT305                                                           *\n* ISPFINIT ZDL=YES/NO,ZDS=YES/NO,ZERR=YES/NO                         *\n* ISPFTERM                                                           *\n* ISPFVARS ZDL=YES/NO,ZDS=YES/NO,ZERR=YES/NO                         *\n* LMCLOSE                                                            *\n* LMDFREE                                                            *\n* LMDINIT                                                            *\n* LMDLIST                                                            *\n* LMFREE                                                             *\n* LMINIT                                                             *\n* LMMLIST                                                            *\n* LMOPEN                                                             *\n* LOG      MESSAGE=                                                  *\n* PQUERY   PLF2P2,ZDATA                                              *\n* SELECT   PANEL(PPPP),OPT(OOOO)                                     *\n* SELECT   CMD(CCCC),LANG(LLLL),MODE(MMMM)                           *\n* SELECT   PGM(PPPP),MODE(MMMM)                                      *\n* SELECT   * NEWAPPL(AAAA),PASSLIB/NEWPOOL,SUSPEND                   *\n* SETMSG   MESSAGE=,COND=,MSGLOC=                                    *\n* TBADD    TABLE=,SAVE=(),ORDER=,MULT=1                              *\n* TBBOTTOM TABLE=                                                    *\n* TBCLOSE  TABLE=                                                    *\n* TBCREATE TABLE=,KEYS=(),NAMES=(),WRITE=,REPLACE=,LIBRARY=,SHARE=   *\n* TBDELETE TABLE=                                                    *\n* TBDISPL  TABLE=,PANEL=,MESSAGE=,CURSOR=,CSRROW=,CSRPOS=,AUTOSEL=   *\n*          POSITION=,ROWID=,MSGLOC,LC=(V,VALUE,MODULE)               *\n* TBEND    TABLE=                                                    *\n* TBERASE  TABLE=,LIBRARY=ISPTABL                                    *\n* TBEXIST  TABLE=                                                    *\n* TBGET    TABLE=                                                    *\n* TBLMAJOR                                                           *\n* TBMOD    TABLE=,SAVE=(),ORDER=                                     *\n* TBOPEN   TABLE=,WRITE=WRITE,LIBRARY=ISPTABL,SHARE=                 *\n* TBPUT    TABLE=                                                    *\n* TBQUERY  TABLE=,KEYS(V),NAMES(V),ROWNUM(V),KEYNUM(V),NAMENUM(V),   *\n*          POSITION(V)                                               *\n* TBSARG   TABLE=,ARGLIST=(),MODE=NEXT,NAMECOND=()                   *\n* TBSAVE   TABLE=                                                    *\n* TBSCAN   TABLE=,ARGLIST=(),SAVENAME=,ROWID=,MODE=NEXT,NOREAD=      *\n*          POSITION=,CONDLIST=()                                     *\n* TBSKIP   TABLE=,NUMBER=1                                           *\n* TBSORT   TABLE=,FILEDS=()                                          *\n* TBTOP    TABLE=                                                    *\n* TBVCLEAR TABLE=                                                    *\n* VCOPY    NAMES=(),LENGTH=8,VARIABLE=,MODE=                         *\n* VDEFINE  NAMES=(),VARIABLE=,FORMAT=CHAR,LENGTH=8,OPTIONS=,USERDATA=*\n* VDELETE  NAMES=()                                                  *\n* VGET     NAMES=(),POOL=                                            *\n* VMASK    NAMES=(),FORMAT=,USER=,LENGTH=                            *\n* VPUT     NAMES=(),POOL=                                            *\n* VREPLACE VARIABLE-NAME,FULL-WORD-LENGTH,DATA-AREA                  *\n* VRESET                                                             *\n*                                                                    *\n**********************************************************************\n         MACRO\n**********************************************************************\n* $ADD         Add                                                   *\n**********************************************************************\n&LABEL   $ADD  &TO,&FROM\n         AIF   (T'&TO EQ 'F').FULL\n         AIF   (T'&TO EQ 'H').HALF\n         AIF   (T'&TO EQ 'P').PACKED\n         MNOTE 8,'$ADD error:  Unknown operand - &TO'\n         AGO   .MEND\n.FULL    ANOP\n&LABEL   L     R15,&TO             Get current value\n         A     R15,&FROM           Add value\n         ST    R15,&TO             Save new value\n         AGO   .MEND\n.HALF    ANOP\n&LABEL   LH    R15,&TO             Get current value\n         AH    R15,&FROM           Add value\n         STH   R15,&TO             Save new value\n         AGO   .MEND\n.PACKED  ANOP\n&LABEL   AP    &TO,&FROM           Add value\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* $ADDRESS     Address macro operands                                *\n**********************************************************************\n* Usage:       $ADDRESS RN,ADDR  --->  LA  RN,ADDR                   *\n*              $ADDRESS RN,(R3)  --->  LR  RN,R3                     *\n*              $ADDRESS RN,@ADDR --->  L   RN,ADDR                   *\n*              $ADDRESS RN,C'LIT' ---> LA  RN,=C'LIT'                *\n*              $ADDRESS RN,F'1'  --->  LA  RN,=F'1'                  *\n**********************************************************************\n&LABEL   $ADDRESS\n         LCLC  &REG,&OP\n         AIF   (N'&SYSLIST EQ 2).OKPARM\n         MNOTE 8,'$ADDRESS error - 2 parameters required'\n         AGO   .MEND\n.OKPARM  ANOP\n&REG     SETC  '&SYSLIST(1)'\n&OP      SETC  '&SYSLIST(2)'\n         AIF   (T'&LABEL EQ 'O').BYNAME\n&LABEL   DS    0H\n.BYNAME  AIF   ('&OP'(1,1) EQ '(').LR\n         AIF   ('&OP'(1,1) EQ '@').L\n         AIF   ('&OP'(K'&OP,1) EQ '''').LIT\n         LA    &REG,&OP            Point by address\n         MEXIT\n.LR      ANOP\n&OP      SETC  '&OP'(2,K'&OP-2)\n         AIF   ('&OP' EQ '&REG').LRXIT\n         LR    &REG,&OP            Point by register\n.LRXIT   MEXIT\n.L       ANOP\n&OP      SETC  '&OP'(2,K'&OP-1)\n         L     &REG,&OP\n         MEXIT\n.LIT     ANOP\n         LA    &REG,=&OP\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* $CVD         Convert to decimal                                    *\n**********************************************************************\n&LABEL   $CVD  &TO,&FROM,&MASK\n         AIF   (T'&FROM EQ 'F').FULL\n         AIF   (T'&FROM EQ 'H').HALF\n         MNOTE 8,'$CVD error:  Unknown operand - &FROM'\n         AGO   .MEND\n.FULL    ANOP\n&LABEL   L     R15,&FROM           Get current value\n         AGO   .CVD\n.HALF    ANOP\n&LABEL   LH    R15,&FROM           Get current value\n         AGO   .CVD\n.CVD     ANOP\n         CVD   R15,DOUBLE          Convert to decimal\n         MVC   &TO,&MASK           Mask\n         EDMK  &TO,DOUBLE+2        Edit\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* $DECR        Decrement                                             *\n**********************************************************************\n&LABEL   $DECR &OP\n         LCLC  &REG\n         AIF   (T'&OP EQ 'F').F\n         AIF   (T'&OP EQ 'H').H\n         AIF   (T'&OP EQ 'P').P\n         AIF   ('&OP'(1,1) EQ '(').R\n         MNOTE 8,'$DECR error:  Unknown operand - &OP'\n         AGO   .MEND\n.F       ANOP\n&LABEL   L     R15,&OP             Get current value\n         BCTR  R15,0               Decrement\n         ST    R15,&OP             Save new value\n         AGO   .MEND\n.H       ANOP\n&LABEL   LH    R15,&OP             Get current value\n         BCTR  R15,0               Decrement\n         STH   R15,&OP             Save new value\n         AGO   .MEND\n.P       ANOP\n&LABEL   SP    &OP,=P'1'           Decrement\n         AGO   .MEND\n.R       ANOP\n&REG     SETC  '&OP'(2,K'&OP-2)\n&LABEL   LR    R15,&OP             Get current value\n         BCTR  R15,0               Decrement\n         LR    &OP,R15             Save new value\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* $HEX         Hex                                                   *\n**********************************************************************\n&LABEL   $HEX  &TO,&FROM,&LEN=\n         LCLA  &OFFSET\n         LCLC  &RF\n         LCLC  &HEX\n&HEX     SETC  'HEX'.'&SYSNDX'\n         AIF   ('&FROM'(1,1) EQ '(').REG\n&LABEL   LA    R15,&TO             Load TO address\n         LA    R1,&FROM            Load FROM address\n         LA    R0,&LEN             Load LEN value\n         AGO   .COMMON\n.REG     ANOP\n&LABEL   LA    R15,&TO             Load TO address\n&RF      SETC  '&FROM'(2,K'&FROM-2)\n         ST    &RF,W_FULL1         Store register FROM value\n         LA    R1,W_FULL1          Load FROM address\n&OFFSET  SETA  4-&LEN              Determine FROM offset\n         LA    R1,&OFFSET.(,R1)    Add offset to FROM address\n         LA    R0,&LEN             Load LEN value\n         AGO   .COMMON\n.COMMON  ANOP\n&HEX     EQU   *\n         MVC   1(1,R15),0(R1)      Move FROM byte\n         UNPK  0(3,R15),1(2,R15)   Unpack\n         L     R14,=A(TBLHEX)      Set HEX table address\n         USING TBLHEX,R14          Reference HEX table\n         TR    0(2,R15),TBLHEX     Convert to HEX\n         DROP  R14                 Dereference HEX table\n         LA    R15,2(,R15)         Increment TO address by 2\n         LA    R1,1(,R1)           Increment FROM address by 1\n         BCT   R0,&HEX             Do again until LEN is zero\n         MVI   0(R15),C' '         Blank residual byte\n         MEND\n         MACRO\n**********************************************************************\n*                                                                    *\n* Usage:                                                             *\n* Name     $ENTRY    Keywords...                                     *\n*                                                                    *\n* Name     Module name                                               *\n*          Values:   Any valid module name                           *\n*          Default:  NULL                                            *\n*                                                                    *\n* Keywords:                                                          *\n* AMODE    Addressing mode                                           *\n*          Values:   24/31/ANY                                       *\n*          Default:  31                                              *\n*                                                                    *\n* BASE     Base registers                                            *\n*          Values:   (Rxx,Ryy,Rzz...) - Any valid registers          *\n*          Default:  (R12)                                           *\n*                                                                    *\n* DWA      Dynamic work area                                         *\n*          Values:   (ddd,rrr,lll)                                   *\n*                    ddd  - Dynamic work area dummy section (DSECT)  *\n*                    rrr  - Dynamic work area base register          *\n*                    lll  - Dynamic work area length                 *\n*          Default:  NULL - Dynamic work area not used               *\n*                                                                    *\n* DWALOC   Location of getmained dynamic work area                   *\n*          Values:   BELOW/ANY/RES/EXPLICIT                          *\n*          Default:  RES                                             *\n*                                                                    *\n* MODID    Module identification                                     *\n*          Values:   YES/NO                                          *\n*          Default:  YES                                             *\n*                                                                    *\n* RMODE    Residence mode                                            *\n*          Values:   24/ANY                                          *\n*          Default:  ANY                                             *\n*                                                                    *\n* SABNDRY  Savearea boundary                                         *\n*          Values:   DBLWD|PAGE                                      *\n*          Default:  DBLWD                                           *\n*                                                                    *\n* SALENGTH Savearea length                                           *\n*          Values:   Any valid length                                *\n*          Default:  0                                               *\n*                                                                    *\n* SALOC    Savearea location                                         *\n*          Values:   BELOW/ANY/RES/EXPLICIT                          *\n*          Default:  RES                                             *\n*                                                                    *\n* SASP     Savearea subpool                                          *\n*          Values:   Any valid subpool                               *\n*          Default:  0                                               *\n*                                                                    *\n* SAVEMETH Save/restore methodology                                  *\n*          Values:   NO/STACK/STORAGE                                *\n*                    NO      - Do not save/restore                   *\n*                    SHARED  - Shared storage                        *\n*                    STACK   - Save status on stack                  *\n*                    STORAGE - Save registers in storage             *\n*          Default:  STORAGE                                         *\n*                                                                    *\n* SP       Subpool of getmained savearea/work area                   *\n*          Values:   Any valid subpool                               *\n*          Default:  0                                               *\n*                                                                    *\n* SPLEVEL  Macro level                                               *\n*          Values:   0/1/2/3/4/5/6                                   *\n*          Default:  0 - Use default macro level                     *\n*                                                                    *\n* SWA      Static work area                                          *\n*          Values:   (ccc,rrr)                                       *\n*                    ccc  - Static work area control section (CSECT) *\n*                    rrr  - Static work area base register           *\n*          Default:  NULL - Static work area not used                *\n*                                                                    *\n**********************************************************************\n* $ENTRY       Standard Linkage - Entry                              *\n**********************************************************************\n&LABEL   $ENTRY &AMODE=31,         Addressing mode                     X\n               &BASE=(R11,R12),    Base Registers                      X\n               &DWA=,              Dynamic work area                   X\n               &DWALOC=RES,        Location of dynamic work area       X\n               &MODID=YES,         Module identification               X\n               &RMODE=ANY,         Residence mode                      X\n               &SABNDRY=DBLWD,     Savearea boundary                   X\n               &SALENGTH=0,        Savearea length                     X\n               &SALOC=RES,         Savearea location                   X\n               &SASP=0,            Savearea subpool                    X\n               &SAVEMETH=SHARED,   Save/restore methodology            X\n               &SPLEVEL=0,         Macro level                         X\n               &SUBPOOL=0,         Subpool of savearea/work area       X\n               &SWA=               Static work area\n         GBLA  &GCOMMON            Common Macros Level\n         GBLC  &GAMODE             Addressing Mode\n         GBLC  &GBRU               Base register using\n         GBLC  &GCSECT             Control Section\n         GBLC  &GDWAL              Dynamic work area length\n         GBLC  &GDWAN              Dynamic work area name\n         GBLC  &GDWAR              Dynamic work area register\n         GBLC  &GRMODE             Residence Mode\n         GBLC  &GSABNDRY           Savearea boundary\n         GBLC  &GSALENGTH          Savearea length\n         GBLC  &GSALOC             Savearea location\n         GBLC  &GSASP              Savearea subpool\n         GBLC  &GSAVEMETH          Save/restore methodology\n         GBLC  &GSPLEVEL           Macro level\n         GBLC  &GSUBPOOL           Subpool of savearea/work area\n         GBLC  &GSWAN              Static work area name\n         GBLC  &GSWAR              Static work area register\n         GBLC  &GTRACE             Trace (YES/NO)\n         GBLC  &GTRACEDD           Trace DDNAME (DDNAME)\n         GBLC  &SYSSPLV            Macro level\n         LCLA  &BRC                Base register count\n         LCLC  &BC                 Base register current\n         LCLC  &BP                 Base register Caller's\n         LCLC  &DWALBL             Dynamic work area label\n&GCOMMON SETA  11                  Common Macros Level\n         MNOTE *,'$ENTRY Utilizing the following parameters:'\n         MNOTE *,'       AMODE=&AMODE'\n         MNOTE *,'       BASE=&BASE'\n         MNOTE *,'       DWA=&DWA'\n         MNOTE *,'       DWALOC=&DWALOC'\n         MNOTE *,'       MODID=&MODID'\n         MNOTE *,'       RMODE=&RMODE'\n         MNOTE *,'       SABNDRY=&SABNDRY'\n         MNOTE *,'       SALENGTH=&SALENGTH'\n         MNOTE *,'       SALOC=&SALOC'\n         MNOTE *,'       SASP=&SASP'\n         MNOTE *,'       SAVEMETH=&SAVEMETH'\n         MNOTE *,'       SPLEVEL=&SPLEVEL'\n         MNOTE *,'       SUBPOOL=&SUBPOOL'\n         MNOTE *,'       SWA=&SWA'\n         MNOTE *,'       GTRACE=&GTRACE'\n         MNOTE *,'       GTRACEDD=&GTRACEDD'\n&GAMODE  SETC  '&AMODE'            Addressing Mode\n&GCSECT  SETC  '&LABEL'            Control Section\n&GRMODE  SETC  '&RMODE'            Residence Mode\n&GSABNDRY SETC '&SABNDRY'          Savearea boundary\n&GSALENGTH SETC '&SALENGTH'        Savearea length\n&GSALOC SETC '&SALOC'              Savearea location\n&GSASP  SETC '&SASP'               Savearea subpool\n&GSAVEMETH SETC  '&SAVEMETH'       Save/restore methodology\n&GSPLEVEL SETC '&SPLEVEL'          Macro level\n&GSUBPOOL SETC  '&SUBPOOL'         Subpool of savearea/work area\n         AIF   ('&DWALOC' EQ 'BELOW').DWALOCOK,                        X\n               ('&DWALOC' EQ 'ANY').DWALOCOK,                          X\n               ('&DWALOC' EQ 'RES').DWALOCOK,                          X\n               ('&DWALOC' EQ 'EXPLICIT').DWALOCOK\n         MNOTE 8,'$ENTRY Invalid DWALOC=&DWALOC'\n         MNOTE 8,'BELOW/ANY/RES/EXPLICIT are valid'\n         MEXIT\n.DWALOCOK ANOP\n         AIF   ('&SALOC' EQ 'BELOW').SALOCOK,                          X\n               ('&SALOC' EQ 'ANY').SALOCOK,                            X\n               ('&SALOC' EQ 'RES').SALOCOK,                            X\n               ('&SALOC' EQ 'EXPLICIT').SALOCOK\n         MNOTE 8,'$ENTRY Invalid SALOC=&SALOC'\n         MNOTE 8,'BELOW/ANY/RES/EXPLICIT are valid'\n         MEXIT\n.SALOCOK ANOP\n         AIF   ('&SABNDRY' EQ 'DBLWD').SABNDRYOK,                      X\n               ('&SABNDRY' EQ 'PAGE').SABNDRYOK\n         MNOTE 8,'$ENTRY Invalid SABNDRY=&SABNDRY'\n         MNOTE 8,'DBLWD|PAGE are valid'\n         MEXIT\n.SABNDRYOK ANOP\n&GCSECT  CSECT                     Control Section\n.**********************************************************************\n.*       AMODE                                                        *\n.**********************************************************************\n         AIF   ('&AMODE' EQ '24').AMODEOK,                             X\n               ('&AMODE' EQ '31').AMODEOK,                             X\n               ('&AMODE' EQ 'ANY').AMODEOK\n         MNOTE 8,'$ENTRY Invalid AMODE=&AMODE - 24/31/ANY'\n         MEXIT\n.AMODEOK ANOP\n&GCSECT  AMODE &GAMODE             Addressing Mode\n         AGO   .AMODEEND\n.AMODENO ANOP\n         AGO   .AMODEEND\n.AMODEEND ANOP\n.**********************************************************************\n.*       RMODE                                                        *\n.**********************************************************************\n         AIF   ('&RMODE' EQ '24').RMODEOK,                             X\n               ('&RMODE' EQ 'ANY').RMODEOK\n         MNOTE 8,'$ENTRY Invalid RMODE=&RMODE - 24/ANY'\n         MEXIT\n.RMODEOK ANOP\n&GCSECT  RMODE &GRMODE             Residence Mode\n         AGO   .RMODEEND\n.RMODENO ANOP\n         AGO   .RMODEEND\n.RMODEEND ANOP\n.**********************************************************************\n.*       SPLEVEL                                                      *\n.**********************************************************************\n         AIF   ('&SPLEVEL' EQ '0').SPLVLNO,                            X\n               ('&SPLEVEL' EQ '1').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '2').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '3').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '4').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '5').SPLVLYES,                           X\n               ('&SPLEVEL' EQ '6').SPLVLYES\n         MNOTE 8,'$ENTRY Invalid SPLEVEL=&SPLEVEL - 0/1/2/3/4/5/6'\n         MEXIT\n.SPLVLYES ANOP\n         SPLEVEL SET=&SPLEVEL      Set macro level\n         AGO   .SPLVLEND\n.SPLVLNO ANOP\n         SPLEVEL SET               Use default macro level\n         AGO   .SPLVLEND\n.SPLVLEND ANOP\n.**********************************************************************\n.*       Module identification                                        *\n.**********************************************************************\n         AIF   ('&MODID' EQ 'NO').MODIDNO,                             X\n               ('&MODID' EQ 'YES').MODIDYES\n         MNOTE 8,'$ENTRY Invalid MODID=&MODID - YES/NO'\n         MEXIT\n.MODIDYES ANOP\n         B     4+1+24+3(0,R15)     Branch around module identification\n         DC    AL1(24)             Module identification length\n         DC    CL8'&GCSECT'        CSECT name\n         DC    CL8'&SYSDATE'       Assembly date\n         DC    CL8'&SYSTIME'       Assembly time\n         DC    AL3(0)              Filler\n         AGO   .MODIDEND\n.MODIDNO ANOP\n         AGO   .MODIDEND\n.MODIDEND ANOP\n.**********************************************************************\n.*       Register / Savearea Equates                                  *\n.**********************************************************************\n         AIF   (D'R0).REGEQUNO\nA0       EQU    0                  Access register\nA1       EQU    1                  Access register\nA2       EQU    2                  Access register\nA3       EQU    3                  Access register\nA4       EQU    4                  Access register\nA5       EQU    5                  Access register\nA6       EQU    6                  Access register\nA7       EQU    7                  Access register\nA8       EQU    8                  Access register\nA9       EQU    9                  Access register\nA10      EQU   10                  Access register\nA11      EQU   11                  Access register\nA12      EQU   12                  Access register\nA13      EQU   13                  Access register\nA14      EQU   14                  Access register\nA15      EQU   15                  Access register\nC0       EQU    0                  Control register\nC1       EQU    1                  Control register\nC2       EQU    2                  Control register\nC3       EQU    3                  Control register\nC4       EQU    4                  Control register\nC5       EQU    5                  Control register\nC6       EQU    6                  Control register\nC7       EQU    7                  Control register\nC8       EQU    8                  Control register\nC9       EQU    9                  Control register\nC10      EQU   10                  Control register\nC11      EQU   11                  Control register\nC12      EQU   12                  Control register\nC13      EQU   13                  Control register\nC14      EQU   14                  Control register\nC15      EQU   15                  Control register\nF0       EQU    0                  Floating point register\nF1       EQU    2                  Floating point register\nF2       EQU    4                  Floating point register\nF3       EQU    6                  Floating point register\nR0       EQU    0                  General register - System\nR1       EQU    1                  General register - System\nR2       EQU    2                  General register - System\nR3       EQU    3                  General register\nR4       EQU    4                  General register\nR5       EQU    5                  General register\nR6       EQU    6                  General register\nR7       EQU    7                  General register\nR8       EQU    8                  General register\nR9       EQU    9                  General register\nR10      EQU   10                  General register\nR11      EQU   11                  General register\nR12      EQU   12                  General register\nR13      EQU   13                  General register - Savearea\nR14      EQU   14                  General register - System\nR15      EQU   15                  General register - System\nSAVEPL1  EQU    0                  Savearea PL1\nSAVEPREV EQU    4                  Savearea Previous (from caller)\nSAVENEXT EQU    8                  Savearea Next (from target)\nSAVER14  EQU   12                  Savearea R14 (Return address)\nSAVER15  EQU   16                  Savearea R15 (Entry address)\nSAVER0   EQU   20                  Savearea R0\nSAVER1   EQU   24                  Savearea R1\nSAVER2   EQU   28                  Savearea R2\nSAVER3   EQU   32                  Savearea R3\nSAVER4   EQU   36                  Savearea R4\nSAVER5   EQU   40                  Savearea R5\nSAVER6   EQU   44                  Savearea R6\nSAVER7   EQU   48                  Savearea R7\nSAVER8   EQU   52                  Savearea R8\nSAVER9   EQU   56                  Savearea R9\nSAVER10  EQU   60                  Savearea R10\nSAVER11  EQU   64                  Savearea R11\nSAVER12  EQU   68                  Savearea R12\n&GREGEQU SETA  1\n.REGEQUNO ANOP\n.**********************************************************************\n.*       Save Registers                                               *\n.**********************************************************************\n         AIF   ('&GSAVEMETH' EQ 'STORAGE').SAVESTORAGE,                X\n               ('&GSAVEMETH' EQ 'SHARED').SAVESHARED,                  X\n               ('&GSAVEMETH' EQ 'STACK').SAVESTACK,                    X\n               ('&GSAVEMETH' EQ 'NO').SAVENO\n         MNOTE 8,'$ENTRY Invalid SAVEMETH=&GSAVEMETH'\n         MNOTE 8,'$ENTRY Syntax: SAVEMETH=NO/STACK/STORAGE'\n         MEXIT\n.SAVESHARED ANOP\n.SAVESTORAGE ANOP\n         SAVE  (14,12)             Save registers in storage\n         AGO   .SAVEEND\n.SAVESTACK ANOP\n         BAKR  R14,0               Save status on stack\n         AGO   .SAVEEND\n.SAVENO  ANOP\n.*                                 Do not save\n.SAVEEND ANOP\n.**********************************************************************\n.*       Base Register(s)                                             *\n.**********************************************************************\n         AIF   (N'&BASE EQ 0).BASENO\n         AIF   (T'&BASE NE 'O').BASEOK\n         MNOTE 8,'$ENTRY Missing Required Keyword BASE'\n         MEXIT\n.BASEOK  ANOP\n         LR    &BASE(1),R15        Load base register\n&BRC     SETA 1\n.BASENXT ANOP\n         AIF   (&BRC EQ N'&BASE).BASEEND\n&BRC     SETA  &BRC+1              Increment base register count\n&BC      SETC  '&BASE(&BRC)'       Current base register\n&BP      SETC  '&BASE(&BRC-1)'     Caller's base register\n         LA    &BC,4095(,&BP)      Load base register\n         LA    &BC,1(,&BC)         Load base register\n         AGO   .BASENXT\n.BASEEND ANOP\n&GBRU    SETC  '&BASE'\n         AIF   ('&BASE'(1,1) NE '(').USING1\n&GBRU    SETC  '&BASE'(2,K'&BASE-2)\n.USING1  ANOP\n         USING &LABEL,&GBRU        Reference control section\n.BASENO  ANOP\n.**********************************************************************\n.*       Obtain savearea                                              *\n.**********************************************************************\n         AIF   ('&GSALENGTH' EQ '0').SANO\n         LR    R3,R0               Caller's R0\n         LR    R4,R1               Caller's R1\n         MNOTE *,'STORAGE OBTAIN, '\n         MNOTE *,'        BNDRY=&GSABNDRY, '\n         MNOTE *,'        LENGTH=&GSALENGTH, '\n         MNOTE *,'        LOC=&GSALOC, '\n         MNOTE *,'        SP=&GSASP '\n         STORAGE OBTAIN,                                               X\n               BNDRY=&GSABNDRY,                                        X\n               LENGTH=&GSALENGTH,                                      X\n               LOC=&GSALOC,                                            X\n               SP=&GSASP\n         ST    R13,SAVEPREV(,R1)   Savearea previous\n         ST    R1,SAVENEXT(,R13)   Savearea next\n         AIF   ('&GSAVEMETH' NE 'STACK').SANOSTACK\n         MVC   SAVEPL1(,R13),=C'F1SA' Indicate linkage stack usage\n.SANOSTACK ANOP\n         LR    R13,R1              Reference savearea\n         LR    R0,R3               Caller's R0\n         LR    R1,R4               Caller's R1\n         AGO   .SAEND\n.SANO    ANOP\n         AIF   ('&GSAVEMETH' EQ 'SHARED').SASHARED\n.*                                 Do not obtain savearea storage\n         AGO   .SAEND\n.SASHARED ANOP\n         AH    R13,=H'72'          Shared savearea\n         AGO   .SAEND\n.SAEND   ANOP\n.**********************************************************************\n.*       Dynamic work area                                            *\n.**********************************************************************\n         AIF   (N'&DWA EQ 0).DWANO\n         AIF   (N'&DWA EQ 3).DWAOK\n         MNOTE 8,'$ENTRY Invalid DWA=&DWA'\n         MNOTE 8,'$ENTRY Syntax  DWA=(DSECT_NAME,REGISTER,LENGTH)'\n         MEXIT\n.DWAOK   ANOP\n&GDWAN   SETC  '&DWA(1)'           Dynamic work area name\n&GDWAR   SETC  '&DWA(2)'           Dynamic work area register\n&GDWAL   SETC  '&DWA(3)'           Dynamic work area length\n&DWALBL  SETC  'DWA'.'&SYSNDX'     Dynamic work area label\n         LR    R3,R0               Caller's R0\n         LR    R4,R1               Caller's R1\n         MNOTE *,'STORAGE OBTAIN,LENGTH=&GDWAL,LOC=&DWALOC Obtain DWA'\n         STORAGE OBTAIN,LENGTH=&GDWAL,LOC=&DWALOC,BNDRY=PAGE Obtain DWA\n         LR    &GDWAR,R1           Set Dynamic work area base\n         USING &GDWAN,&GDWAR       Reference Dynamic work area\n         LR    R0,R3               Caller's R0\n         LR    R1,R4               Caller's R1\n         AGO   .DWAEND\n.DWANO   ANOP\n&GDWAN   SETC  ''                  Dynamic work area name\n&GDWAR   SETC  ''                  Dynamic work area register\n&GDWAL   SETC  ''                  Dynamic work area length\n         AGO   .DWAEND\n.DWAEND  ANOP\n.**********************************************************************\n.*       Static work area                                             *\n.**********************************************************************\n         AIF   (N'&SWA EQ 0).SWANO\n         AIF   (N'&SWA EQ 2).SWAOK\n         MNOTE 8,'$ENTRY Invalid SWA=&SWA'\n         MNOTE 8,'$ENTRY Syntax: SWA=(CSECT_NAME,REGISTER)'\n         MEXIT\n.SWAOK   ANOP\n&GSWAN   SETC  '&SWA(1)'           Static work area name\n&GSWAR   SETC  '&SWA(2)'           Static work area register\n         L     &GSWAR,=A(&GSWAN)   Set static work area base\n         USING &GSWAN,&GSWAR       Reference static work area\n         AGO   .SWAEND\n.SWANO   ANOP\n&GSWAN   SETC  ''                  Static work area name\n&GSWAR   SETC  ''                  Static work area register\n         AGO   .SWAEND\n.SWAEND  ANOP\n.**********************************************************************\n.*       Trace                                                        *\n.**********************************************************************\n         AIF   ('&GTRACE' NE 'YES').TRACEEND\n         LCLC  &NOTRACE\n&NOTRACE SETC  'NOTRACE'.'&SYSNDX'\n         LR    R3,R1               Save parameter list\n         TM    &GTRACEDD+48,X'10'  &GTRACEDD open ?\n         BZ    &NOTRACE            . No\n         $FILL W_TRACE,C' '        Blank tracer record\n         MVC   W_TRACE(020),=CL020' Entering &GCSECT'\n         PUT   &GTRACEDD,W_TRACE\n         LR    R1,R3               Restore parameter list\n&NOTRACE EQU   *\n         AGO   .TRACEEND\n.TRACEEND ANOP\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n*        Macro Name:                                                 *\n*        Operation:      Standard Linkage - Exit                     *\n*        Usage:                                                      *\n**********************************************************************\n*                                                                    *\n* Syntax:                                                            *\n* Name     $EXIT     Keywords...                                     *\n*                                                                    *\n* Name     Module name                                               *\n*          Values:   Any valid module name                           *\n*          Default:  NULL                                            *\n*                                                                    *\n* Keywords:                                                          *\n* LTORG    Literal pool at end of module                             *\n*          Values:   YES/NO                                          *\n*          Default:  YES                                             *\n*                                                                    *\n**********************************************************************\n**********************************************************************\n* $EXIT        Standard Linkage - Exit                               *\n**********************************************************************\n&LABEL   $EXIT &LTORG=YES          Literal pool\n         GBLC  &GBRU               Base register using\n         GBLC  &GCSECT             Control Section\n         GBLC  &GDWAL              Dynamic work area length\n         GBLC  &GDWAR              Dynamic work area register\n         GBLC  &GSALENGTH          Savearea length\n         GBLC  &GSAVEMETH          Save/restore methodology\n         GBLC  &GTRACE             Trace (YES/NO)\n         GBLC  &GTRACEDD           Trace DDNAME (DDNAME)\n         MNOTE *,'$EXIT  Utilizing the following parameters:'\n         MNOTE *,'       LTORG=&LTORG'\n         MNOTE *,'       GTRACE=&GTRACE'\n         MNOTE *,'       GTRACEDD=&GTRACEDD'\n.**********************************************************************\n.*       Return Code                                                  *\n.**********************************************************************\n&LABEL.0 L     R3,=F'0'            Return code 0\n         B     &LABEL.X            Exit\n&LABEL.4 L     R3,=F'4'            Return code 4\n         B     &LABEL.X            Exit\n&LABEL.8 L     R3,=F'8'            Return code 8\n         B     &LABEL.X            Exit\n&LABEL.C L     R3,=F'12'           Return code 12\n         B     &LABEL.X            Exit\n&LABEL.R LR    R3,R15              Return code in R15\n         B     &LABEL.X            Exit\n&LABEL.X EQU   *                   Exit\n.**********************************************************************\n.*       Trace                                                        *\n.**********************************************************************\n         AIF   ('&GTRACE' NE 'YES').TRACEEND\n         LCLC  &NOTRACE\n&NOTRACE SETC  'NOTRACE'.'&SYSNDX'\n         TM    &GTRACEDD+48,X'10'  &GTRACEDD open ?\n         BZ    &NOTRACE            . No\n         $FILL W_TRACE,C' '        Blank tracer record\n         MVC   W_TRACE(020),=CL020' Exiting  &GCSECT'\n         PUT   &GTRACEDD,W_TRACE\n&NOTRACE EQU   *\n         AGO   .TRACEEND\n.TRACEEND ANOP\n.**********************************************************************\n.*       Dynamic work area                                            *\n.**********************************************************************\n         AIF   ('&GDWAR' EQ '').DWANO\n*        L     R0,=F'&GDWAL'       Dynamic work area length\n         MNOTE *,'STORAGE RELEASE,ADDR=(&GDWAR),LENGTH=&GDWAL DWA'\n         STORAGE RELEASE,ADDR=(&GDWAR),LENGTH=&GDWAL Release DWA\n         AGO   .DWAEND\n.DWANO   ANOP\n         AGO   .DWAEND\n.DWAEND  ANOP\n.**********************************************************************\n.*       Release savearea                                             *\n.**********************************************************************\n         AIF   ('&GSALENGTH' EQ '0').SANO\n         LR    R1,R13              Savearea address\n         L     R13,4(R13)          Restore previous savearea\n         MNOTE *,'STORAGE RELEASE,ADDR=(R1),LENGTH=&GSALENGTH'\n         STORAGE RELEASE,ADDR=(R1),LENGTH=&GSALENGTH Release savearea\n         AGO   .SAEND\n.SANO    ANOP\n         AIF   ('&GSAVEMETH' EQ 'SHARED').SASHARED\n         AGO   .SAEND\n.*                                 Do not release savearea\n.SASHARED ANOP\n         SH    R13,=H'72'          Shared savearea\n         AGO   .SAEND\n.SAEND   ANOP\n.**********************************************************************\n.*       Restore environment                                          *\n.**********************************************************************\n         AIF   ('&GSAVEMETH' EQ 'SHARED').SAVESHARED,                  X\n               ('&GSAVEMETH' EQ 'STORAGE').SAVESTORAGE,                X\n               ('&GSAVEMETH' EQ 'STACK').SAVESTACK,                    X\n               ('&GSAVEMETH' EQ 'NO').SAVENO\n         MNOTE 8,'$EXIT Invalid SAVEMETH=&GSAVEMETH'\n         MNOTE 8,'$EXIT Syntax: SAVEMETH=NO/STACK/STORAGE'\n         MEXIT\n.SAVESHARED ANOP\n.SAVESTORAGE ANOP\n         LR    R15,R3              Set return code\n         L     14,12(0,13)         Restore R14 from storage\n         LM    0,12,20(13)         Restore R0:R12 from storage\n         BSM   0,14                Return control\n         AGO   .SAVEEND\n.SAVESTACK ANOP\n         LR    R15,R3              Set return code\n         PR                        Restore status from stack\n         AGO   .SAVEEND\n.SAVENO  ANOP\n         LR    R15,R3              Set return code\n         BSM   0,14                Return control\n         AGO   .SAVEEND\n.SAVEEND ANOP\n.**********************************************************************\n.*       LTORG                                                        *\n.**********************************************************************\n         AIF   ('&LTORG' EQ 'YES').LTORGYES,                           X\n               ('&LTORG' EQ 'NO').LTORGNO\n         MNOTE 8,'$EXIT Invalid LTORG=&LTORG - YES/NO'\n         MEXIT\n.LTORGYES ANOP\n         LTORG                     Literal pool\n.LTORGNO ANOP\n         AGO   .LTORGEND\n.LTORGEND ANOP\n.MEND    ANOP\n         DROP  &GBRU               Dereference control section\n         MEND\n         MACRO\n**********************************************************************\n* $FILL        Fill a Field                                          *\n**********************************************************************\n&LABEL   $FILL &F,&C\n&LABEL   LA    R0,&F               Receiving field address\n         LA    R1,L'&F             Receiving field length\n         XR    R14,R14             Sending field address - none\n         XR    R15,R15             Sending field length - none\n         ICM   R15,B'1000',=&C     Pad character\n         MVCL  R0,R14              Fill the field\n         MEND\n         MACRO\n**********************************************************************\n* $FIND        Find character                                        *\n**********************************************************************\n&LABEL   $FIND &OP,                Operand                             X\n               &CHAR,              Character                           X\n               &DECREMENT=YES,     Decrement - Yes/No                  X\n               &MODE=BE            Mode - BE/BNE/...\n         LCLC  &FIND1,&FIND2\n&FIND1   SETC  'FIND1'.'&SYSNDX'\n&FIND2   SETC  'FIND2'.'&SYSNDX'\n&LABEL   $ADDRESS R14,&OP(1)       Operand\n         AIF   (N'&OP EQ 2).OPL\n         LA    R1,L'&OP(1)         Operand length default\n         AGO   .OPEND\n.OPL     ANOP\n         $ADDRESS R1,&OP(2)        Operand length specified\n.OPEND   ANOP\n         XR    R15,R15             Clear length\n&FIND1   EQU   *\n         CLI   0(R14),&CHAR        Match ?\n         &MODE &FIND2              . Yes\n         LA    R14,1(R14)          Increment operand address\n         LA    R15,1(R15)          Increment current length\n         BCT   R1,&FIND1           Process next operand, if any\n&FIND2   EQU   *\n         AIF   ('&DECREMENT' EQ 'NO').DECNO\n         BCTR  R15,0               Length - 1\n.DECNO   ANOP\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* $INCR        Increment                                             *\n**********************************************************************\n&LABEL   $INCR &OP,&TYPE\n         AIF   (T'&OP EQ 'F').F\n         AIF   (T'&OP EQ 'H').H\n         AIF   (T'&OP EQ 'P').P\n         AIF   ('&TYPE' EQ 'F').F\n         AIF   ('&TYPE' EQ 'H').H\n         AIF   ('&TYPE' EQ 'P').P\n         AIF   ('&OP'(1,1) EQ '(').R\n         MNOTE 8,'$INCR error:  Unknown operand - &OP - &TYPE'\n         AGO   .MEND\n.F       ANOP\n&LABEL   L     R15,&OP             Get current value\n         LA    R15,1(,R15)         Increment\n         ST    R15,&OP             Save new value\n         AGO   .MEND\n.H       ANOP\n&LABEL   LH    R15,&OP             Get current value\n         LA    R15,1(,R15)         Increment\n         STH   R15,&OP             Save new value\n         AGO   .MEND\n.P       ANOP\n&LABEL   AP    &OP,=P'1'           Increment\n         AGO   .MEND\n.R       ANOP\n&REG     SETC  '&OP'(2,K'&OP-2)\n&LABEL   LA    &OP,1(&OP)          Increment\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* $STRIP       Strip character                                       *\n**********************************************************************\n&LABEL   $STRIP &FIELD,            Field                               X\n               &CHAR               Character\n         LCLC  &STRIP1,&STRIP2,&STRIP3\n&STRIP1  SETC  'STRIP1'.'&SYSNDX'\n&STRIP2  SETC  'STRIP2'.'&SYSNDX'\n&STRIP3  SETC  'STRIP3'.'&SYSNDX'\n&LABEL   $ADDRESS R14,&FIELD(1)    Field\n         AIF   (N'&FIELD EQ 2).LENGTH\n         LA    R1,L'&FIELD(1)      Field length default\n         AGO   .NOLENGTH\n.LENGTH  ANOP\n         $ADDRESS R1,&FIELD(2)     Field length specified\n.NOLENGTH ANOP\n         LA    R0,W_WRK            Work address\n         LA    R1,L'&FIELD         Field length\n         LA    R14,&FIELD          Field address\n         LR    R15,R1              Field length\n         MVCL  R0,R14              Copy to work area\n         $FILL &FIELD,C' '         Clear field\n         $ADDRESS R1,&FIELD(1)     Field address\n         LA    R14,W_WRK           Work address\n         LA    R15,L'&FIELD        Field length\n&STRIP1  EQU   *\n         CLI   0(R14),&CHAR        Match ?\n         BE    &STRIP2             . Yes\n         MVC   0(1,R1),0(R14)      Copy the character\n         LA    R14,1(R14)          Increment work address\n         LA    R1,1(R1)            Increment field address\n         B     &STRIP3             Continue\n&STRIP2  EQU   *\n         LA    R14,1(R14)          Increment work address\n&STRIP3  EQU   *\n         BCT   R15,&STRIP1         Process next character, if any\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* $VLC         Variable length compare                               *\n**********************************************************************\n&LABEL   $VLC  &OP1,               Operand 1                           X\n               &OP2,               Operand 2                           X\n               &LEN,               Length                              X\n               &DECREMENT=YES      Decrement - Yes/No\n         LCLC  &VLC1,&VLC2\n&VLC1    SETC  'VLC1'.'&SYSNDX'\n&VLC2    SETC  'VLC2'.'&SYSNDX'\n&LABEL   $ADDRESS R14,&OP1         Operand 1\n         $ADDRESS R1,&LEN          Length\n         $ADDRESS R15,&OP2         Operand 2\n         AIF   ('&DECREMENT' EQ 'NO').DECNO\n         BCTR  R1,0                Length - 1\n.DECNO   ANOP\n         B     &VLC2\n&VLC1    CLC   0(*-*,R14),0(R15)   Variable length compare (executed)\n&VLC2    EQU   *\n         EX    R1,&VLC1            Variable length compare\n         MEND\n         MACRO\n**********************************************************************\n* $VLM         Variable length move                                  *\n**********************************************************************\n&LABEL   $VLM  &OP1,               Operand 1                           X\n               &OP2,               Operand 2                           X\n               &LEN,               Length                              X\n               &DECREMENT=YES      Decrement - Yes/No\n         LCLC  &VLM1,&VLM2\n&VLM1    SETC  'VLM1'.'&SYSNDX'\n&VLM2    SETC  'VLM2'.'&SYSNDX'\n&LABEL   $ADDRESS R14,&OP1         Operand 1\n         $ADDRESS R1,&LEN          Length\n         $ADDRESS R15,&OP2         Operand 2\n         AIF   ('&DECREMENT' EQ 'NO').DECNO\n         BCTR  R1,0                Length - 1\n.DECNO   ANOP\n         B     &VLM2\n&VLM1    MVC   0(*-*,R14),0(R15)   Variable length move (executed)\n&VLM2    EQU   *\n         EX    R1,&VLM1            Variable length move\n         MEND\n         MACRO\n**********************************************************************\n* $VLTRT       Variable Length Translate and Test                    *\n**********************************************************************\n&LABEL   $VLTRT  &OP1,             Operand 1                           X\n               &OP2,               Operand 2                           X\n               &LEN,               Length                              X\n               &DECREMENT=YES      Decrement - Yes/No\n&LABEL   $ADDRESS R14,&OP1         Storage 1\n         $ADDRESS R15,&OP2         Storage 2\n         $ADDRESS R1,&LEN          Length\n         AIF   ('&DECREMENT' EQ 'NO').DECNO\n         BCTR  R1,0                Length - 1\n.DECNO   ANOP\n         EX    R1,P_VLTRT          Variable Length Translate and Test\n         MEND\n         MACRO\n**********************************************************************\n* ADDPOP       Start Pop-Up Window Mode                              *\n**********************************************************************\n&LABEL   ADDPOP &POPLOC=,          Pop Location                        X\n               &ROW=,              Row                                 X\n               &COL=               Column\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'ADDPOP ',                                           X\n               =C'&POPLOC ',                                           X\n               =C'&ROW ',                                              X\n               =C'&COL '),                                             X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* BRIF         Browse Interface                                      *\n**********************************************************************\n&LABEL   BRIF  &DATA=,             Dataset name                        X\n               &RECFM=,            Record format                       X\n               &LRECL=,            Logical record length               X\n               &READ=0,            Read routine                        X\n               &COMMAND=0,         Command routine                     X\n               &DIALOG=,           Dialog data                         X\n               &PANEL=,            Panel name                          X\n               &FORMAT=,           Format name                         X\n               &MIXED=NO,          YES/NO                              X\n               &ERRET=             Error Routine\n         AIF   ('&MIXED' EQ 'YES').MIXEDOK,                            X\n               ('&MIXED' EQ 'NO').MIXEDOK\n         MNOTE 8,'BRIF Invalid MIXED=&MIXED - YES/NO'\n         AGO   .MEND\n.MIXEDOK ANOP\n         AIF   ('&RECFM' EQ 'F').RECFMOK,                              X\n               ('&RECFM' EQ 'FA').RECFMOK,                             X\n               ('&RECFM' EQ 'FM').RECFMOK,                             X\n               ('&RECFM' EQ 'U').RECFMOK,                              X\n               ('&RECFM' EQ 'V').RECFMOK,                              X\n               ('&RECFM' EQ 'VA').RECFMOK,                             X\n               ('&RECFM' EQ 'VM').RECFMOK\n         MNOTE 8,'BRIF Invalid RECFM=&RECFM - F/FA/FM/U/V/VA/VM'\n         AGO   .MEND\n.RECFMOK ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'BRIF ',                                             X\n               &DATA,                                                  X\n               =C'&RECFM ',                                            X\n               &LRECL,                                                 X\n               =A(&READ),                                              X\n               =A(&COMMAND),                                           X\n               &DIALOG,                                                X\n               =C'&PANEL ',                                            X\n               =C'&FORMAT ',                                           X\n               =C'&MIXED '),                                           X\n               VL,MF=(E,W_CL512)\n         AIF   ('&ERRET' EQ '').MEND\n         LTR   15,15               Okay ?\n         AIF   ('&ERRET'(1,1) EQ '(').ERRETR\n         BNZ   &ERRET              . No\n         AGO   .MEND\n.ERRETR  ANOP\n         BR    &ERRET(1)           . No\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* BROWSE       Browse a dataset                                      *\n**********************************************************************\n&LABEL   BROWSE &DATASET=,         DSNAME                              X\n               &ERRET=,            Error Routine                       X\n               &VOLUME=,           SERIAL                              X\n               &PASSWORD=,         PSWD-VALUE                          X\n               &PANEL=,            PANEL-NAME                          X\n               &FORMAT=,           FORMAT-NAME                         X\n               &MIXED=             YES/NO\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'BROWSE ',                                           X\n               &DATASET),                                              X\n               VL,MF=(E,W_CL512)\n         AIF   ('&ERRET' EQ '').MEND\n         LTR   15,15               Okay ?\n         AIF   ('&ERRET'(1,1) EQ '(').ERRETR\n         BNZ   &ERRET              . No\n         AGO   .MEND\n.ERRETR  ANOP\n         BR    &ERRET(1)           . No\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* CONTROL      Set processing modes                                  *\n**********************************************************************\n&LABEL   CONTROL &CTL1,&CTL2,&CTL3,&CTL4\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'CONTROL ',                                          X\n               =C'&CTL1 ',                                             X\n               =C'&CTL2 ',                                             X\n               =C'&CTL3 ',                                             X\n               =C'&CTL4 '),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* DISPLAY      Display panels and messages                           *\n**********************************************************************\n&LABEL   DISPLAY &PANEL=,          PANEL-NAME                          X\n               &END=,              End label                           X\n               &MESSAGE=,          MESSAGE-ID                          X\n               &CURSOR=,           CURSOR-FIELD-NAME                   X\n               &CSRPOS=,           CURSOR-POSITION                     X\n               &COMMAND=,          STACK-BUFFER-NAME                   X\n               &RETBUFFR=,         RET-BUFFER-NAME                     X\n               &RETLGTH=,          RET-LENGTH-NAME                     X\n               &MSGLOC=,           MESSAGE-FIELD-NAME                  X\n               &PC=()              Primary-command\n         AIF   ('&PC'(1,1) EQ '(').OKPC\n         MNOTE 8,'DISPLAY PC=&PC - MUST BE IN PARENTHESIS'\n.OKPC    ANOP\n         LCLA  &CNT\n         LCLC  &NLLBL\n         LCLC  &NPLBL,&PCLBL\n         LCLC  &CMP,&LBL,&ID,&SEL\n&PCLBL   SETC  'PC'.'&SYSNDX'\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'DISPLAY ',                                          X\n               =C'&PANEL ',                                            X\n               =C'&MESSAGE ',                                          X\n               =C'&CURSOR ',                                           X\n               =C'&CSRPOS ',                                           X\n               =C'&COMMAND ',                                          X\n               =C'&RETBUFFR ',                                         X\n               =C'&RETLGTH ',                                          X\n               =C'&MSGLOC '),                                          X\n               VL,MF=(E,W_CL512)\n         C     R15,=F'8'           End ?\n         BNL   &END                . Yes\n         AIF   ('&PC'(1,2) EQ '()').MEND\n.PC      ANOP\n&PCLBL   EQU   *\n&CNT     SETA  0\n&CNT     SETA  &CNT+1\n&SEL     SETC  '&PC(&CNT)'\n.NEXTPC  ANOP\n&CNT     SETA  &CNT+1\n         AIF   (&CNT GT N'&PC).ENDPC\n&CMP     SETC  '&PC(&CNT)'\n&NLLBL   SETC  'N'.'&CMP'.'&SYSNDX'\n&CNT     SETA  &CNT+1\n&LBL     SETC  '&PC(&CNT)'\n         CLC   &SEL,=C'&CMP'       Match ?\n         BNE   &NLLBL              . No\n         CONTROL DISPLAY,SAVE      Save display environment\n         CALL  &LBL                &LBL\n         CONTROL DISPLAY,RESTORE   Restore display environment\n         B     &LABEL              Redisplay\n&NLLBL   EQU *\n         AGO   .NEXTPC\n.ENDPC   ANOP\n*        B     &LABEL              Redisplay\n.ENDLBL  ANOP\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* DSINFO       Data Set Information Dialog Service                   *\n**********************************************************************\n&LABEL   DSINFO &DSN,&SER\n         AIF   ('&SER' EQ '').NOSER\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'DSINFO ',                                           X\n               &DSN,                                                   X\n               &SER),                                                  X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.NOSER   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'DSINFO ',                                           X\n               &DSN),                                                  X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* EDIT         Edit a dataset                                        *\n**********************************************************************\n&LABEL   EDIT &EDSN,&EVOL\n         AIF   ('&EVOL' EQ '').NOVOL\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'EDIT ',                                             X\n               &EDSN,                                                  X\n               &EVOL),                                                 X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.NOVOL   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'EDIT ',                                             X\n               &EDSN),                                                 X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* IHALLT       LNKLST Table (LLT)                                    *\n**********************************************************************\n         IHALLT\nLLT      DSECT                     LNKLST Table (LLT)\nLLTHEAD  DS    0CL8                Header section\nLLTID    DS    CL4                 Table id 'LLT '\nLLTCOUNT DS    F                   Number of entries in table\nLLTENTRY DS    0CL45               Table entry\nLLTDSLTH DS    AL1                 Length of data set name\nLLTDSN   DS    CL44                Data set name\n         MEND\n         MACRO\n**********************************************************************\n* IEEMBRDS     SMF RDS                                               *\n**********************************************************************\n         IEEMBRDS\nIEEMBRDS DSECT                         SMF RDS\nRDSID    DS    C'RDS '                 CONTROL BLOCK ID\nRDSNEXT  DS    A(IEEMBRDS)             FORWARD CHAIN POINTER\nRDSPREV  DS    A(IEEMBRDS)             BACKWARD CHAIN POINTER\n*\nRDSFLG1  DS    X\nRDSFREE  EQU   X'10'                   NEED TO FREE DATASET\nRDSDUMP  EQU   X'08'                   OPER HAS BEEN TOLD TO DUMP DS\nRDSREADY EQU   X'04'                   DS IS OPEN AND READY\nRDSCLOSE EQU   X'02'                   DS NEEDS TO BE CLOSED\nRDSNDOP  EQU   X'01'                   DS NEEDS TO BE OPENED\n*\nRDSFLG2  DS    X\nRDSLOST  EQU   X'80'                   DUMMY RDS FOR LOST DATA\nRDSPHYER EQU   X'40'                   PHYSICAL I/O ERROR\nRDSLOGER EQU   X'20'                   LOGICAL I/O ERROR\nRDSFLG3  DS    X                       RESERVED\nRDSDSLEN DS    AL1(L'RDSNAME)          LENGTH OF DATA SET NAME  HBB5510\nRDSNAME  DS    CL44'SYS1.MANX '        DATA SET NAME            HBB5510\nRDSVOLID DS    C'SYSRES'               VOLUME SERIAL\n         DS    2X                      alignment                HBB5510\nRDSDDN   DS    C'SYS00001'             DDNAME RETURNED BY DYNALLOC\nRDSCAPTY DS    F                       CAPACITY IN # OF BLOCKS\nRDSNXTBL DS    F                       NUMBER OF NEXT AVAIL BLOCK\nRDSBQE   DS    A                       ADDR OF BQE BEING WRITTEN\nRDSAVSPC DS    F                       AVAIL SPACE FROM SHOWCB\nRDSENRBA DS    F                       ENDRBA FROM SHOWCB\nRDSCINV  DS    F                       CONTROL INTERVAL SIZE\nRDSDOMID DS    F                       MSG # OF DUMP MSG\n         DS    F                                                HBB5510\nRDSRPL   DS    19F                     VSAM RPL\nRDSACB   DS    19F                     VSAM ACB\n         MEND\n         MACRO\n**********************************************************************\n* IEEMBSST     SMF Selectivity Table                                 *\n**********************************************************************\n         IEEMBSST\nSST      DSECT                         SMF Selectivity Table\nSSTNAME  DS    CL4'SYS'                sub-system name\nSSTFLAGS DS    X\nSSTDETAL EQU   X'80'                   DETAILED ACCT'NG\nSSTACTIV EQU   X'40'                   SUBSYSTEM ACTIVE\nSSTRESET EQU   X'20'\n         DS    XL3\nSSTINTVL DS    XL8                     INTERVAL LENGTH\nSSTRCDON DS    32X                     ONE BIT PER RECORD\nSSTEXTAB DS    A(EXITTAB)              A(EXIT TABLE)\n*\nEXITTAB  DSECT\nEXITSPL  DS    XL4                     SUBPOOL ID AND LENGTH\nEXITNMBR DS    F                       NUMBER OF EXITS\nEXITNTRY EQU   *\nEXITNAME DS    CL8                     EXIT NAME\nEXITFLGS DS    XL4                     Flags\nEXITADDR DS    A                       A(EXIT)\nEXITINAC EQU   X'80'                   EXIT ACTIVE\nEXITEND  DS    0H\n         MEND\n         MACRO\n**********************************************************************\n* IHALPAT      LPALST Table (LPAT)                                   *\n**********************************************************************\n         IHALPAT\nLPAT     DSECT                     LPALST Table (LPAT)\nLPATHDR  DS    0CL8                Header section\nLPATID   DS    CL4                 Table id 'LPAT'\nLPATCNT  DS    F                   Number of entries in table\nLPATNTRY DS    0CL45               Table entry\nLPATDSLN DS    AL1                 Length of data set name\nLPATDSN  DS    CL44                Data set name\n         MEND\n         MACRO\n**********************************************************************\n* IKJEFTSR     TSO/E Service Facility Routine                        *\n**********************************************************************\n&LABEL   IKJEFTSR\n&LABEL   L     R15,TSRADDR         IKJEFTSR address\n         CALL  (15),                                                   X\n               (TSRFLAGS,TSRBUF,TSRLEN,TSRRETRN,TSRREASN,TSRABEND),    *\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* IKJZT301     TSO/E Broadcast Data Set Record 1                     *\n**********************************************************************\n         IKJZT301\nR1BC     DSECT\nR1BCPTRP DS    0AL4\nR1BCFLGS DS    AL1                 Notices flags - not used\nR1BCPTR  DS    AL3                 First notices directory RBA\nR1USPTRP DS    0AL4\nR1USFLGS DS    AL1                 User mail flags - not used\nR1USPTR  DS    AL3                 First user mail directory RBA\nR1RECNUM DS    AL4                 Total number of records\nR1BCMAX  DS    AL2                 Maximum Notices records\nR1DSN    DS    CL24                Broadcast dataset name\nR1LEVEL  DS    CL7                 Level\n         DS    CL1                 Reserved\nR1FRESRH DS    AL3                 Free search record RBA\nR1GENNUM DS    AL4                 Notice table generation number\n         DS    CL76                Reserved\n         MEND\n         MACRO\n**********************************************************************\n* IKJZT302     TSO/E Broadcast Notices Directory Record              *\n**********************************************************************\n         IKJZT302\nBCDIR    DSECT\nBCDENTRY DS    0CL5\nBCDNOMSG DS    0AL1\nBCDMSGNO DS    XL2                 Notice message number in hex\nBCDMRBA  DS    AL3                 Notice message RBA\n         DS    24CL5               Next 24 notices\n         DS    CL8                 Reserved\nBCDREND  DS    AL1                 End of record indicator - x'7F'\nBCDNEXT  DS    AL3                 Next notice directory (zero if end)\n         MEND\n         MACRO\n**********************************************************************\n* IKJZT303     TSO/E Broadcast Notices Message Record                *\n**********************************************************************\n         IKJZT303\nBCMSG    DSECT\nBCMLNG   DS    AL1                 Notice message length\nBCMTEXT  DS    CL125               Notice message\n         DS    CL3                 Reserved\n         MEND\n         MACRO\n**********************************************************************\n* IKJZT304     TSO/E Broadcast Mail Directory Record                 *\n**********************************************************************\n         IKJZT304\nUSDIR    DSECT\nUSDENTRY DS    0CL13\nUSDID    DS    CL7                 Userid\nUSDRBA   DS    AL3                 First message (zero if none)\nUSDEND   DS    AL3                 Last message (zero if none)\n         DS    8CL13               Next 8 userids\n         DS    CL8                 Reserved\nUSDREND  DS    AL1                 End of record indicator - x'7F'\nUSDNEXT  DS    AL3                 Next mail directory (zero if end)\n         MEND\n         MACRO\n**********************************************************************\n* IKJZT305     TSO/E Broadcast Mail Message Record                   *\n**********************************************************************\n         IKJZT305\nUSMSG    DSECT\nUSMLNG   DS    AL1                 Mail message length\nUSMTEXT  DS    CL125               Mail message\nUSMNEXT  DS    AL3                 Next mail message (zero if last)\n         MEND\n         MACRO\n**********************************************************************\n* ILRPART      Paging Activity Reference Table (PART)                *\n**********************************************************************\n         ILRPART\nPART     DSECT\nPARTIDEN DS    C'PART'\nPARTSIZE DS    F\nPARTEUSE DS    F\nPARTCIR0 DS    A\nPARTCIR1 DS    A\nPARTCIR2 DS    A\nPARTTPAR DS    0A\nPARTDSNL DS    A\nPARTPCTQ DS    A\nPARTLCNT DS    H\nPARTFLG1 DS    B\n         DS    X\nPARTNPCF DS    A\nPARTNPCL DS    A\nPARTTIME DS    F\n         DS    CL32\nPARTENTS EQU   *\n*\nPARTENT  DSECT\nPAREPARE DS    A\nPAREBRST DS    AL1\nPAREIORN DS    AL1\n         DS    XL2\nPARETYPE DS    B\nPAREPLPA EQU   X'80'\nPARECOMM EQU   X'40'\nPAREDPLX EQU   X'20'\nPARELOCL EQU   X'10'\nPAREBPF  EQU   X'08'\nPARESPP  EQU   X'04'\nPAREPD   EQU   X'02'\nPAREDRN  EQU   X'01'\nPAREFLG1 DS    B\nPARENUSE EQU   X'80'\nPARENVIO EQU   X'10'\nPARENN   DS    H\nPAREDEIB DS    A\nPARESZSL DS    F\nPARESLTA DS    F\nPARERRCT DS    F\nPAREIORB DS    A\nPAREPATP DS    A\nPAREPCTP DS    A\nPAREEDBP DS    A\nPAREUCBP DS    A(UCBOB)\nPARETIOR DS    A\nPARETIME DS    F\nPARERQTM DS    F\n         DS    H\nPAREREQS DS    H\nPAREFLG2 DS    B\nPARELSLT DS    XL3\nPAREOCTB DS    A\nPAREMIGA DS    A\nPARECADR DS    FL1\n         DS    XL19\nPARTELEN EQU   *-PARTENT\n         MEND\n         MACRO\n**********************************************************************\n* ISPFINIT     Initialize ISPF Environment                           *\n**********************************************************************\n&LABEL   ISPFINIT &ZDL=NO,         ZDL Variables                       X\n               &ZDS=NO,            ZDS Variables                       X\n               &ZERR=NO            ZERR Variables\n*\n**       Validate ISPF Environment\n*\n&LABEL   LOAD  EP=ISPQRY,ERRET=IIEXIT Load current ISPQRY module\n         LR    R15,R0              ISPQRY address\n         BALR  R14,R15             Invoke ISPQRY\n         LTR   15,15               ISPF environment ?\n         BNZ   IIEXIT              . No\n         DELETE EP=ISPQRY          Delete current ISPQRY module\n*\n**       Load ISPF Interface Module (ISPLINK)\n*\n         LOAD  EP=ISPLINK,ERRET=IIEXIT Load current ISPLINK module\n         ST    R0,ISPLINK@         Save ISPLINK address\n*\n**       Load TSO Service Facility Routine\n*\n         LOAD  EP=IKJEFTSR,ERRET=IIEXIT Load current IKJEFTSR module\n         ST    R0,TSRADDR          Save IKJEFTSR address\n         MVC   TSRLEN,=F'100'      IKJEFTSR length\n         MVC   TSRFLAGS,=X'00000101' IKJEFTSR flags\n*\n**       Define ISPF System Variables\n*\n         VDEFINE NAMES=(DATAID),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(LISTID),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(MEMBER),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZAPPLID),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZCMD),FORMAT=CHAR,LENGTH=80\n         VDEFINE NAMES=(ZDATE),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDATEF),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDATEFD),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDAY),FORMAT=CHAR,LENGTH=2\n         VDEFINE NAMES=(ZEDLMSG),FORMAT=CHAR,LENGTH=80\n         VDEFINE NAMES=(ZEDSMSG),FORMAT=CHAR,LENGTH=24\n         VDEFINE NAMES=(ZJDATE),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ZLANG),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZLOGO),FORMAT=CHAR,LENGTH=3\n         VDEFINE NAMES=(ZMONTH),FORMAT=CHAR,LENGTH=2\n         VDEFINE NAMES=(ZPLACE),FORMAT=CHAR,LENGTH=7\n         VDEFINE NAMES=(ZPREFIX),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZSTDYEAR),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(ZSYSID),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZTDSELS),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(ZTDTOP),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ZTIME),FORMAT=CHAR,LENGTH=5\n         VDEFINE NAMES=(ZTIMEL),FORMAT=CHAR,LENGTH=11\n         VDEFINE NAMES=(ZUDMVOL),FORMAT=CHAR,LENGTH=1\n         VDEFINE NAMES=(ZUSER),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZYEAR),FORMAT=CHAR,LENGTH=2\n         AIF   ('&ZDL' EQ 'NO').ZDLNO\n         VDEFINE NAMES=(ZDLBLKSZ),FORMAT=CHAR,LENGTH=5\n         VDEFINE NAMES=(ZDLCATNM),FORMAT=CHAR,LENGTH=44\n         VDEFINE NAMES=(ZDLCDATE),FORMAT=CHAR,LENGTH=10\n         VDEFINE NAMES=(ZDLDEV),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDLDSNTP),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDLDSORG),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(ZDLEDATE),FORMAT=CHAR,LENGTH=10\n         VDEFINE NAMES=(ZDLEXT),FORMAT=CHAR,LENGTH=3\n         VDEFINE NAMES=(ZDLLRECL),FORMAT=CHAR,LENGTH=5\n         VDEFINE NAMES=(ZDLMIGR),FORMAT=CHAR,LENGTH=3\n         VDEFINE NAMES=(ZDLRDATE),FORMAT=CHAR,LENGTH=10\n         VDEFINE NAMES=(ZDLRECFM),FORMAT=CHAR,LENGTH=5\n         VDEFINE NAMES=(ZDLSIZE),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ZDLSPACU),FORMAT=CHAR,LENGTH=10\n         VDEFINE NAMES=(ZDLUSED),FORMAT=CHAR,LENGTH=3\n         VDEFINE NAMES=(ZDLVOL),FORMAT=CHAR,LENGTH=6\n.ZDLNO   ANOP\n         AIF   ('&ZDS' EQ 'NO').ZDSNO\n         VDEFINE NAMES=(ZDS#MEM),FORMAT=CHAR,LENGTH=13\n         VDEFINE NAMES=(ZDS#VOLS),FORMAT=CHAR,LENGTH=2\n         VDEFINE NAMES=(ZDSBLK),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ZDSCB1),FORMAT=CHAR,LENGTH=96\n         VDEFINE NAMES=(ZDSCDATE),FORMAT=CHAR,LENGTH=10\n         VDEFINE NAMES=(ZDSDC),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDSDEVT),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDSDIR),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDSDIRA),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ZDSDIRU),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDSDSNT),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDSEXTA),FORMAT=CHAR,LENGTH=7\n         VDEFINE NAMES=(ZDSEXTU),FORMAT=CHAR,LENGTH=7\n         VDEFINE NAMES=(ZDSLREC),FORMAT=CHAR,LENGTH=7\n         VDEFINE NAMES=(ZDSMC),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDSORG),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDSPAGU),FORMAT=CHAR,LENGTH=13\n         VDEFINE NAMES=(ZDSPERU),FORMAT=CHAR,LENGTH=13\n         VDEFINE NAMES=(ZDSRDATE),FORMAT=CHAR,LENGTH=10\n         VDEFINE NAMES=(ZDSRF),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ZDSSC),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDSSEQ),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(ZDSSPC),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZDSTOTA),FORMAT=CHAR,LENGTH=13\n         VDEFINE NAMES=(ZDSTOTU),FORMAT=CHAR,LENGTH=13\n         VDEFINE NAMES=(ZDSVOL),FORMAT=CHAR,LENGTH=6\n         VDEFINE NAMES=(ZDSVTAB),FORMAT=CHAR,LENGTH=354\n         VDEFINE NAMES=(ZDSXDATE),FORMAT=CHAR,LENGTH=10\n         VDEFINE NAMES=(ZDS1EX),FORMAT=CHAR,LENGTH=13\n         VDEFINE NAMES=(ZDS2EX),FORMAT=CHAR,LENGTH=13\n         VDEFINE NAMES=(ZDS2SPC),FORMAT=CHAR,LENGTH=8\n.ZDSNO   ANOP\n         AIF   ('&ZERR' EQ 'NO').ZERRNO\n         VDEFINE NAMES=(ZERRALRM),FORMAT=CHAR,LENGTH=3\n         VDEFINE NAMES=(ZERRHM),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZERRLM),FORMAT=CHAR,LENGTH=512\n         VDEFINE NAMES=(ZERRMSG),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(ZERRSM),FORMAT=CHAR,LENGTH=24\n.ZERRNO  ANOP\nIIEXIT   EQU   *\n         MEND\n         MACRO\n**********************************************************************\n* ISPFTERM     Terminate ISPF Environment                            *\n**********************************************************************\n&LABEL   ISPFTERM\n&LABEL   VDELETE NAMES=(*)         Delete all ISPF variables\n         DELETE EP=ISPLINK         Delete current ISPLINK module\n         DELETE EP=IKJEFTSR        Delete current IKJEFTSR module\n         MEND\n         MACRO\n**********************************************************************\n* ISPFVARS     Define ISPF Variables                                 *\n**********************************************************************\n&LABEL   ISPFVARS &ZDL=NO,         ZDL Variables                       X\n               &ZDS=NO,            ZDS Variables                       X\n               &ZERR=NO            ZERR Variables\n*\n**       Define ISPF System Variables\n*\n*BRIFADR  DS    F                   BRIF address\nBRIFDSN  DS    CL044               BRIF data set name\nBRIFDWA  DS    F                   BRIF dynamic work area\nBRIFRECL DS    F                   BRIF record length\nBRIFRECN DS    F                   BRIF record number\nBRIFREM  DS    F                   BRIF remainder\nDATAID   DS    CL008               ISPF Data Identifier\nDOUBLE   DS    D                   Doubleword work area\nFULL     DS    F                   Fullword work area\nHALF     DS    H                   Halfword work area\nISPLINK@ DS    F                   ISPLINK address\nLISTID   DS    CL008               ISPF List Identifier\nMEMBER   DS    CL008               ISPF Member Name\nTABLE    DS    CL008               ISPF Table Name\nTSRABEND DS    F                   IKJEFTSR abend code\nTSRADDR  DS    F                   IKJEFTSR address\nTSRBUF   DS    CL133               IKJEFTSR buffer\nTSRFLAGS DS    F                   IKJEFTSR flags\nTSRLEN   DS    F                   IKJEFTSR length\nTSRREASN DS    F                   IKJEFTSR reason code\nTSRRETRN DS    F                   IKJEFTSR return code\nW_CL016  DS    CL016               16 byte general work area\nW_CL512  DS    CL512               512 byte general work area\nZAPPLID  DS    CL008               ISPF Application Identifier\nZCMD     DS    CL080               ISPF Command Line\nZDATE    DS    CL008               ISPF Date\nZDATEF   DS    CL008               ISPF Date\nZDATEFD  DS    CL008               ISPF Date\nZDAY     DS    CL002               ISPF Day (dd)\nZEDLMSG  DS    CL080               ISPF Generic Message - Long\nZEDSMSG  DS    CL024               ISPF Generic Message - Short\nZJDATE   DS    CL006               ISPF Julian Date (yy.ddd)\nZLANG    DS    CL008               ISPF Session Language\nZLOGO    DS    CL003               ISPF Logo (YES/NO)\nZMONTH   DS    CL002               ISPF Month (mm)\nZPLACE   DS    CL007               ISPF Command Line Placement\nZPREFIX  DS    CL008               ISPF Prefix\nZSCREEND DS    CL004               ISPF Screen Depth\nZSCREENW DS    CL004               ISPF Screen Width\nZSTDYEAR DS    CL004               ISPF Year (yyyy)\nZSYSID   DS    CL008               ISPF System Name\nZTDSELS  DS    CL004               ISPF Selections\nZTDTOP   DS    CL006               ISPF CRP of most recent display\nZTIME    DS    CL005               ISPF Time (hh:mm)\nZTIMEL   DS    CL011               ISPF Time (hh:mm:ss:th)\nZUDMVOL  DS    CL001               Multivolume 'Y' 'N'\nZUSER    DS    CL008               ISPF User Identification\nZYEAR    DS    CL002               ISPF Year (yy)\n         AIF   ('&ZDL' EQ 'NO').ZDLNO\nZDLBLKSZ DS    CL005               Block size\nZDLCATNM DS    CL044               Catalog name\nZDLCDATE DS    CL010               Creation date\nZDLDEV   DS    CL008               Device type\nZDLDSNTP DS    CL008               Dsname type 'PDS' 'LIBRARY' ' '\nZDLDSORG DS    CL004               Data set organization\nZDLEDATE DS    CL010               Expiration date\nZDLEXT   DS    CL003               Number of extents used\nZDLLRECL DS    CL005               Logical record length\nZDLMIGR  DS    CL003               Migrated 'YES' 'NO'\nZDLRDATE DS    CL010               Last referenced date\nZDLRECFM DS    CL005               Record format\nZDLSIZE  DS    CL006               Data set size in tracks\nZDLSPACU DS    CL010               Space units CYLINDERS,MEGABYTES...\nZDLUSED  DS    CL003               Percentage of used tracks/pages\nZDLVOL   DS    CL006               Volume serial\n.ZDLNO   ANOP\n         AIF   ('&ZDS' EQ 'NO').ZDSNO\nZDS#MEM  DS    CL013               Number of members\nZDS#VOLS DS    CL002               Number of volumes\nZDSBLK   DS    CL006               Block size\nZDSCB1   DS    CL096               Format 1 data control block\nZDSCDATE DS    CL010               Creation date\nZDSDC    DS    CL008               Data class\nZDSDEVT  DS    CL008               Device type\nZDSDIR   DS    CL008               Directory blocks (PDSE)\nZDSDIRA  DS    CL006               Allocated directory blocks\nZDSDIRU  DS    CL008               Used directory blocks\nZDSDSNT  DS    CL008               Data set name type\nZDSEXTA  DS    CL007               Allocated extents\nZDSEXTU  DS    CL007               Used extents\nZDSLREC  DS    CL007               Logical record length\nZDSMC    DS    CL008               Management class\nZDSORG   DS    CL008               Data set organization\nZDSPAGU  DS    CL013               Pages used (PDSE)\nZDSPERU  DS    CL013               Percent used (PDSE)\nZDSRDATE DS    CL010               Referenced date\nZDSRF    DS    CL006               Record format\nZDSSC    DS    CL008               Storage class\nZDSSEQ   DS    CL004               Compressible YES/NO\nZDSSPC   DS    CL008               Primary space units\nZDSTOTA  DS    CL013               Allocated space units\nZDSTOTU  DS    CL013               Used space units\nZDSVOL   DS    CL006               First or only volume\nZDSVTAB  DS    CL354               Volume table (all volumes)\nZDSXDATE DS    CL010               Expiration date\nZDS1EX   DS    CL013               Primary space allocation\nZDS2EX   DS    CL013               Secondary space allocation\nZDS2SPC  DS    CL008               Secondary space units\n.ZDSNO   ANOP\n         AIF   ('&ZERR' EQ 'NO').ZERRNO\nZERRALRM DS    CL003               Alarm 'YES' 'NO'\nZERRHM   DS    CL008               Help panel name\nZERRLM   DS    CL512               Long-message text\nZERRMSG  DS    CL008               Message ID\nZERRSM   DS    CL024               Short-message text\n.ZERRNO  ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMCLOSE      Close a Data Set                                      *\n**********************************************************************\n&LABEL   LMCLOSE &DATAID=DATAID    Data Identifier\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMCLOSE ',                                          X\n               &DATAID),                                               X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMDFREE      Free a Data Set List ID                               *\n**********************************************************************\n&LABEL   LMDFREE &LISTID=LISTID    List Identifier\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMDFREE ',                                          X\n               &LISTID),                                               X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMDINIT      Initialize a Data Set List                            *\n**********************************************************************\n&LABEL   LMDINIT &LISTID=LISTID,   List Identifier                     X\n               &LEVEL=0,           Dataset-level                       X\n               &VOLUME=            Volume\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMDINIT ',                                          X\n               =C'&LISTID ',                                           X\n               &LEVEL),                                                X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMDLIST      List Data Sets                                        *\n**********************************************************************\n&LABEL   LMDLIST &LISTID=LISTID,   List Identifier                     X\n               &OPTION=LIST,       LIST/FREE/SAVE                      X\n               &DATASET=,          Dataset                             X\n               &STATS=NO,          YES/NO                              X\n               &GROUP=0            Group\n         AIF   ('&OPTION' EQ 'LIST').OPTIONOK,                         X\n               ('&OPTION' EQ 'FREE').OPTIONOK,                         X\n               ('&OPTION' EQ 'SAVE').OPTIONOK\n         MNOTE 8,'LMDLIST Invalid OPTION=&OPTION - LIST/FREE/SAVE'\n         AGO   .MEND\n.OPTIONOK ANOP\n         AIF   ('&STATS' EQ 'YES').STATSOK,                            X\n               ('&STATS' EQ 'NO').STATSOK\n         MNOTE 8,'LMDLIST Invalid STATS=&STATS - YES/NO'\n         AGO   .MEND\n.STATSOK ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMDLIST ',                                          X\n               &LISTID,                                                X\n               =C'&OPTION ',                                           X\n               =C'&DATASET ',                                          X\n               =C'&STATS '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMFREE       Free Data Set from its Association with Data ID       *\n**********************************************************************\n&LABEL   LMFREE &DATAID=DATAID     Data Identifier\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMFREE ',                                           X\n               &DATAID),                                               X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMINIT       Generate a Data ID for a Data Set                     *\n**********************************************************************\n&LABEL   LMINIT &DATAID=DATAID,    Data Identifier                     X\n               &DATASET=0,         Dataset-name                        X\n               &DDNAME=0,          Dd-name                             X\n               &VOLUME=0,          Volume                              X\n               &PASSWORD=0,        Password                            X\n               &ENQ=SHR            Enqueue\n         AIF   ('&ENQ' EQ 'SHR').ENQOK,                                X\n               ('&ENQ' EQ 'EXCLU').ENQOK,                              X\n               ('&ENQ' EQ 'SHRW').ENQOK,                               X\n               ('&ENQ' EQ 'MOD').ENQOK\n         MNOTE 8,'LMINIT Invalid ENQ=&ENQ - SHR/EXCLU/SHRW/MOD'\n         AGO   .MEND\n.ENQOK   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMINIT ',                                           X\n               =C'&DATAID ',                                           X\n               0,0,0,0,0,0,                                            X\n               &DATASET,                                               X\n               &DDNAME,                                                X\n               &VOLUME,                                                X\n               &PASSWORD,                                              X\n               =C'&ENQ '),                                             X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMMLIST      List a Library's Members                              *\n**********************************************************************\n&LABEL   LMMLIST &DATAID=DATAID,   Data Identifier                     X\n               &OPTION=LIST,       LIST/FREE/SAVE                      X\n               &MEMBER=,           Member-var                          X\n               &STATS=NO           YES/NO\n         AIF   ('&OPTION' EQ 'LIST').OPTIONOK,                         X\n               ('&OPTION' EQ 'FREE').OPTIONOK,                         X\n               ('&OPTION' EQ 'SAVE').OPTIONOK\n         MNOTE 8,'LMMLIST Invalid OPTION=&OPTION - LIST/FREE/SAVE'\n         AGO   .MEND\n.OPTIONOK ANOP\n         AIF   ('&STATS' EQ 'YES').STATSOK,                            X\n               ('&STATS' EQ 'NO').STATSOK\n         MNOTE 8,'LMMLIST Invalid STATS=&STATS - YES/NO'\n         AGO   .MEND\n.STATSOK ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMMLIST ',                                          X\n               &DATAID,                                                X\n               =C'&OPTION ',                                           X\n               =C'&MEMBER ',                                           X\n               =C'&STATS '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* LMOPEN       Open a Data Set                                       *\n**********************************************************************\n&LABEL   LMOPEN &DATAID=DATAID,    Data Identifier                     X\n               &OPTION=INPUT       Option\n         AIF   ('&OPTION' EQ 'INPUT').OPTIONOK,                        X\n               ('&OPTION' EQ 'OUTPUT').OPTIONOK\n         MNOTE 8,'LMOPEN Invalid OPTION=&OPTION - INPUT/OUTPUT'\n         AGO   .MEND\n.OPTIONOK ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LMOPEN ',                                           X\n               &DATAID,                                                X\n               =C'&OPTION '),                                          X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n         TBLMAJOR\n**********************************************************************\n* TBLMAJOR     Major Enqueue Table                                   *\n**********************************************************************\n DC CL1'N',CL8'!CANDLE ',CL32'Candle-Omegamon'\nMAJORLEN EQU   *-TBLMAJOR          MAJOR table entry length\n DC CL1'N',CL8'$CACHENV',CL32'Candle-Omegamon'\n DC CL1'N',CL8'@MVS2   ',CL32'CA-ENF'\n DC CL1'N',CL8'$PDSFAST',CL32'SEA-PDSFAST'\n DC CL1'N',CL8'$RXQUEUE',CL32'CA-ASM2_Reload_Queue'\n DC CL1'N',CL8'ABENDAID',CL32'CW-AbendAid'\n DC CL1'N',CL8'ABENDDAM',CL32'CW-AbendAid'\n DC CL1'N',CL8'ABENDSMF',CL32'CW-AbendAid'\n DC CL1'N',CL8'ACFVSAM ',CL32'CA-ACF2'\n DC CL1'N',CL8'ACIFRDR ',CL32'CA-DISPATCH_ACIF_External'\n DC CL1'N',CL8'ADABASLX',CL32'ADABAS'\n DC CL1'N',CL8'ADRPRDCT',CL32'CA-LIBRARIAN_Master'\n DC CL1'N',CL8'AICVMSTR',CL32'INFOHUB'\n DC CL1'N',CL8'AMFORDB2',CL32'EDA/SQL'\n DC CL1'Y',CL8'ANFGDATS',CL32'IP/Printway_Queue_Dataset'\n DC CL1'N',CL8'ANFMIOCB',CL32'IP/Printway'\n DC CL1'Y',CL8'ARCDSN  ',CL32'DFSMS/HSM_Dataset'\n DC CL1'Y',CL8'ARCENQG ',CL32'DFSMS/HSM_Dataset'\n DC CL1'N',CL8'ARCGPA  ',CL32'DFSMS/HSM'\n DC CL1'N',CL8'ARCHBKLG',CL32'CA-ASM2_Backup_Log'\n DC CL1'N',CL8'ARCLOG  ',CL32'CA-ASM2_Activity_Log'\n DC CL1'N',CL8'ARCPVOL ',CL32'DFSMS/HSM'\n DC CL1'N',CL8'ASM     ',CL32'CA-ASM2_Tape'\n DC CL1'N',CL8'ASM2    ',CL32'CA-ASM2'\n DC CL1'N',CL8'ASM2.IXR',CL32'CA-ASM2_VSAM_Dataset_Reload'\n DC CL1'N',CL8'ASM2IXR ',CL32'CA-ASM2'\n DC CL1'N',CL8'ASM2SYSA',CL32'CA-ASM2_Archive_Volume'\n DC CL1'N',CL8'ASM2SYSB',CL32'CA-ASM2_Backup_Volume'\n DC CL1'N',CL8'ASTEXMM ',CL32'CA-ASTEX_FSR'\n DC CL1'N',CL8'ATMSVDB ',CL32'CA-OPS_Status_Variable'\n DC CL1'N',CL8'BBI     ',CL32'BB-MAINVIEW'\n DC CL1'N',CL8'BBISS   ',CL32'BB-MAINVIEW'\n DC CL1'N',CL8'BLGAPI  ',CL32'I/M_API'\n DC CL1'N',CL8'BLGDICTN',CL32'I/M_Dictionary'\n DC CL1'N',CL8'BLGMAIL ',CL32'I/M_Mail'\n DC CL1'N',CL8'BLGPMFPU',CL32'I/M_Panel'\n DC CL1'N',CL8'BLGRNID ',CL32'I/M_Record'\n DC CL1'N',CL8'BLGSEQN ',CL32'I/M_Record Key'\n DC CL1'N',CL8'BLGUT4  ',CL32'I/M_SDLDS'\n DC CL1'N',CL8'BLGVCGZR',CL32'I/M_Cognizer'\n DC CL1'N',CL8'BLXCAS  ',CL32'I/M_Server'\n DC CL1'N',CL8'BLXDAS  ',CL32'I/M'\n DC CL1'N',CL8'BLXDASDS',CL32'I/M'\n DC CL1'N',CL8'BLXLCDS ',CL32'I/M'\n DC CL1'N',CL8'BLXMSDA ',CL32'I/M_APPC'\n DC CL1'N',CL8'BLXSNAP ',CL32'I/M'\n DC CL1'N',CL8'BLXSPCAS',CL32'I/M'\n DC CL1'N',CL8'BLXVSI  ',CL32'I/M'\n DC CL1'N',CL8'BMCSRDSN',CL32'BMC-Registry'\n DC CL1'N',CL8'BUNDL   ',CL32'CA-BUNDL'\n DC CL1'N',CL8'CA-AM   ',CL32'CA-ASM2_Control_Blocks'\n DC CL1'N',CL8'CA-ENF  ',CL32'CA-ENF'\n DC CL1'N',CL8'CA-GNMP ',CL32'CA-ASM2'\n DC CL1'N',CL8'CA-XCF  ',CL32'CA-ENF'\n DC CL1'Y',CL8'CADB2   ',CL32'CA-Platinum'\n DC CL1'N',CL8'CAIENQBL',CL32'CA-EZTEST'\n DC CL1'N',CL8'CANDLE  ',CL32'Candle'\n DC CL1'N',CL8'CANDLEDD',CL32'Candle-Omegamon'\n DC CL1'N',CL8'CANDLENQ',CL32'Candle-Omegamon'\n DC CL1'N',CL8'CAOPERA ',CL32'CA-Opera'\n DC CL1'Y',CL8'CAOUPRTA',CL32'CA-Symdump_Dataset'\n DC CL1'N',CL8'CASCHDSC',CL32'CA-Scheduler/Smart_Console'\n DC CL1'N',CL8'CASNMLGR',CL32'CA-CAICCI'\n DC CL1'N',CL8'CASNMNET',CL32'CA-ENF'\n DC CL1'N',CL8'CASULLCK',CL32'CA-APCDOC'\n DC CL1'N',CL8'CASUSLCK',CL32'CA-APCDOC'\n DC CL1'N',CL8'CA1     ',CL32'CA-1'\n DC CL1'N',CL8'CA11CMT ',CL32'CA-11_CMT'\n DC CL1'N',CL8'CA11JEHF',CL32'CA-11_JEHF'\n DC CL1'N',CL8'CA7SC   ',CL32'CA-7/SmartConsole'\n DC CL1'N',CL8'CBKCICS ',CL32'CICS_BAC'\n DC CL1'N',CL8'CEEM@MOU',CL32'LE_MSGFILE'\n DC CL1'N',CL8'CFXCFMON',CL32'CF_Monitor'\n DC CL1'N',CL8'CNMINIT ',CL32'Netview'\n DC CL1'N',CL8'COMPLETE',CL32'COM-PLETE'\n DC CL1'N',CL8'COMPUWRE',CL32'CW'\n DC CL1'N',CL8'COSMOS  ',CL32'CA-Dynam/TLMS'\n DC CL1'N',CL8'CPWKFXTC',CL32'CW-AbendAid/FX'\n DC CL1'Y',CL8'CPXCSLQN',CL32'CA-Symdump_CSL_Dataset'\n DC CL1'N',CL8'CSAAMGR ',CL32'Candle-Omegamon'\n DC CL1'N',CL8'CSLENQBL',CL32'CA-EZTEST'\n DC CL1'N',CL8'CSTADSYS',CL32'Supra'\n DC CL1'N',CL8'CTLIELEM',CL32'CA-ENDEVOR_Element'\n DC CL1'Y',CL8'CTLIMSTR',CL32'CA-ENDEVOR_Master_Control_Dataset'\n DC CL1'N',CL8'CTLIPROC',CL32'CA-ENDEVOR'\n DC CL1'N',CL8'CTS     ',CL32'CA-1'\n DC CL1'N',CL8'CWCATALG',CL32'CW-AbendAid/FX'\n DC CL1'Y',CL8'DADSBI  ',CL32'CA-DADSPlus_Batch_Interface_Dataset'\n DC CL1'Y',CL8'DCONTROL',CL32'CA-Detector_Dataset'\n DC CL1'N',CL8'DFHSTRM ',CL32'CICS_Log_Stream'\n DC CL1'N',CL8'DIFOPEN ',CL32'DTS-DIF'\n DC CL1'N',CL8'DRS31SYS',CL32'LRS-DRS'\n DC CL1'N',CL8'DSAMANGR',CL32'CA-ASM2_Archive/Backup'\n DC CL1'N',CL8'DSAPREFX',CL32'CA-ASM2_Date_Time_Stamp'\n DC CL1'N',CL8'DSARACT ',CL32'CA-DISPATCH_External_Archive'\n DC CL1'N',CL8'DSARREQ ',CL32'CA-DISPATCH_External_Archive'\n DC CL1'N',CL8'DSD1ACT ',CL32'CA-DISPATCH_External_Distribution'\n DC CL1'N',CL8'DSD1REQ ',CL32'CA-DISPATCH_External_Distribution'\n DC CL1'N',CL8'DSD2ACT ',CL32'CA-DISPATCH_External_Distribution'\n DC CL1'N',CL8'DSD2REQ ',CL32'CA-DISPATCH_External_Distribution'\n DC CL1'N',CL8'DSD3ACT ',CL32'CA-DISPATCH_External_Distribution'\n DC CL1'N',CL8'DSD3REQ ',CL32'CA-DISPATCH_External_Distribution'\n DC CL1'N',CL8'DSD4ACT ',CL32'CA-DISPATCH_External_Distribution'\n DC CL1'N',CL8'DSD4REQ ',CL32'CA-DISPATCH_External_Distribution'\n DC CL1'N',CL8'DSEXACT ',CL32'CA-DISPATCH_External_Extract'\n DC CL1'N',CL8'DSEXREQ ',CL32'CA-DISPATCH_External_Extract'\n DC CL1'Y',CL8'DSPURI01',CL32'IBM-IMS_DBMS_RECON_Dataset'\n DC CL1'N',CL8'DSSI0001',CL32'DSSI'\n DC CL1'N',CL8'DS50DIST',CL32'CA-DISPATCH'\n DC CL1'N',CL8'DS50OVDB',CL32'CA-DISPATCH'\n DC CL1'N',CL8'DS50OVSP',CL32'CA-DISPATCH'\n DC CL1'N',CL8'DS50QRLS',CL32'CA-DISPATCH'\n DC CL1'Y',CL8'DTMJBMQ ',CL32'MVS_Solutions-Thruput_Manager_Dataset'\n DC CL1'N',CL8'DVG221@@',CL32'Netview_FTP'\n DC CL1'N',CL8'DVG221QH',CL32'Netview_FTP'\n DC CL1'N',CL8'EBCASB  ',CL32'CA-Deliver'\n DC CL1'N',CL8'ECMCONFL',CL32'CA-MIM'\n DC CL1'N',CL8'ECMGLOBL',CL32'CA-MIM'\n DC CL1'N',CL8'EDIDSN  ',CL32'CA-MIM'\n DC CL1'N',CL8'EDIGLOBL',CL32'CA-MIM'\n DC CL1'N',CL8'EMCSERVR',CL32'EMC-Server'\n DC CL1'N',CL8'ENDEVOR ',CL32'CA-ENDEVOR_Utility'\n DC CL1'N',CL8'ENF     ',CL32'CA-ENF'\n DC CL1'N',CL8'ENFDBASE',CL32'CA-ENF'\n DC CL1'N',CL8'ENQ$AVRS',CL32'SEA-$AVRS'\n DC CL1'N',CL8'EPILOG  ',CL32'Candle-Omegamon'\n DC CL1'N',CL8'EPVTMA I',CL32'Candle-Omegamon'\n DC CL1'N',CL8'ESFCHKPT',CL32'CA-Spool_Checkpoint'\n DC CL1'N',CL8'ESFSSVT ',CL32'CA-Spool_Initialization'\n DC CL1'N',CL8'ETCLEAN ',CL32'CA-eTrust'\n DC CL1'N',CL8'ETEAS   ',CL32'Candle-Omegamon'\n DC CL1'Y',CL8'FDRABR  ',CL32'IDP-FDR/ABR'\n DC CL1'N',CL8'FDRABRV ',CL32'IDP-FDR/ABR'\n DC CL1'N',CL8'FILEAID ',CL32'CW-FileAid'\n DC CL1'N',CL8'FILEMASK',CL32'????'\n DC CL1'N',CL8'FOCUS   ',CL32'Focus'\n DC CL1'N',CL8'GDI     ',CL32'CA-MIM'\n DC CL1'N',CL8'GIMISCVE',CL32'SMPE'\n DC CL1'N',CL8'GIMSMP  ',CL32'SMPE'\n DC CL1'N',CL8'GSVXQNAM',CL32'CA-SYSVIEW/E_Security'\n DC CL1'N',CL8'GTALOCAL',CL32'CA-MIA'\n DC CL1'N',CL8'HCIQNAME',CL32'CW-AbendAid/FX'\n DC CL1'N',CL8'H2000000',CL32'Candle-Omegamon'\n DC CL1'N',CL8'IAMCRT  ',CL32'IDP-IAM'\n DC CL1'N',CL8'IAMENQ  ',CL32'IDP-IAM'\n DC CL1'N',CL8'IBMNCCF ',CL32'Netview'\n DC CL1'N',CL8'ICEHIPER',CL32'DFSORT_Hiperspace'\n DC CL1'N',CL8'IDMSCV  ',CL32'CA-IDMS_CV'\n DC CL1'N',CL8'IDMSDC  ',CL32'CA-IDMS_DC'\n DC CL1'Y',CL8'IGDCDS  ',CL32'SMS_Control_Dataset'\n DC CL1'Y',CL8'IGDCDSXS',CL32'SMS_Control_Dataset'\n DC CL1'N',CL8'IMSKILL ',CL32'Focus'\n DC CL1'N',CL8'IMSSINK ',CL32'Focus'\n DC CL1'N',CL8'INFOMAN ',CL32'GEAC-Information_Expert'\n DC CL1'N',CL8'INFOPAC ',CL32'ViewDirect'\n DC CL1'N',CL8'INGPLEX ',CL32'System_Automation'\n DC CL1'N',CL8'INGXSG  ',CL32'System_Automation'\n DC CL1'N',CL8'INGXSG00',CL32'System_Automation'\n DC CL1'Y',CL8'INTERTST',CL32'CA-InterTest_Dataset'\n DC CL1'N',CL8'IOAP500 ',CL32'CONTROL-D'\n DC CL1'N',CL8'IOBSNMP ',CL32'OSASNMP'\n DC CL1'N',CL8'IPCPCDS ',CL32'IPCP'\n DC CL1'N',CL8'IPGMGREX',CL32'CA-GSS_ISET'\n DC CL1'N',CL8'IXRA    ',CL32'CA-ASM2_IXR'\n DC CL1'N',CL8'JOBHIST ',CL32'CA-JOBTRAC_History'\n DC CL1'N',CL8'KCNDLCFQ',CL32'Candle-Omegamon'\n DC CL1'N',CL8'KO2     ',CL32'Candle-Omegamon'\n DC CL1'N',CL8'KO200071',CL32'Candle-Omegamon'\n DC CL1'N',CL8'LANDMARK',CL32'ASG-TMON'\n DC CL1'N',CL8'LCMMAIN ',CL32'STK-LCM'\n DC CL1'N',CL8'LIBRLAM ',CL32'CA-Librarian'\n DC CL1'N',CL8'LMSA0AR ',CL32'LMS'\n DC CL1'N',CL8'LMSLOCAL',CL32'LMS'\n DC CL1'Y',CL8'LSERVDSN',CL32'CA-L-Serv_Dataset'\n DC CL1'N',CL8'MFDDINFO',CL32'CW-AbendAid'\n DC CL1'N',CL8'MIGRATOR',CL32'CA-Platinum'\n DC CL1'N',CL8'MIMCKP  ',CL32'CA-MIM'\n DC CL1'N',CL8'MIMGLOBL',CL32'CA-MIM_Control'\n DC CL1'N',CL8'MIMLOCAL',CL32'CA-MIM'\n DC CL1'N',CL8'MSIGLOBL',CL32'CA-MIM'\n DC CL1'N',CL8'MSP     ',CL32'HARBOR'\n DC CL1'N',CL8'NETMAN  ',CL32'CA-Netman'\n DC CL1'N',CL8'NMSSID  ',CL32'Solve'\n DC CL1'N',CL8'NMVFS   ',CL32'Solve'\n DC CL1'N',CL8'NPM     ',CL32'NPM'\n DC CL1'N',CL8'NTMNBRD ',CL32'CA-Netman'\n DC CL1'N',CL8'NVIVSAMP',CL32'CA-N-Vision_Record'\n DC CL1'Y',CL8'NVIVSAMS',CL32'CA-N-Vision_Dataset'\n DC CL1'N',CL8'OCENQUES',CL32'Candle-Omegamon'\n DC CL1'N',CL8'OMCI    ',CL32'Candle-Omegamon'\n DC CL1'N',CL8'OPS/MVS ',CL32'CA-OPS/MVS'\n DC CL1'N',CL8'ORACLE  ',CL32'ORACLE'\n DC CL1'Y',CL8'OTPRMLIB',CL32'OTS-Tapecopy_Parmlib_Dataset'\n DC CL1'N',CL8'PANVALET',CL32'CA-Panvalet'\n DC CL1'N',CL8'PDSMAN  ',CL32'CA-PDSMAN'\n DC CL1'N',CL8'PDSMENQ ',CL32'CA-PDSMAN'\n DC CL1'N',CL8'PDSMTITL',CL32'CA-PDSMAN'\n DC CL1'N',CL8'PDT$DIN ',CL32'CA-Detector'\n DC CL1'N',CL8'PDTDINCC',CL32'CA-Detector'\n DC CL1'N',CL8'PDVSFILE',CL32'CW-AbendAid'\n DC CL1'N',CL8'PLATINUM',CL32'CA-Platinum'\n DC CL1'Y',CL8'PSACNTL ',CL32'CA-SQLAnalyzer_Dataset'\n DC CL1'N',CL8'PSNCPSNC',CL32'MTECH-PSYNC'\n DC CL1'N',CL8'PSPOPX21',CL32'SW-VSAM_Assist'\n DC CL1'N',CL8'PSPOPX22',CL32'SW-VSAM_Assist'\n DC CL1'N',CL8'PXMINI  ',CL32'CA-XManager'\n DC CL1'N',CL8'PXMTSS  ',CL32'CA-XManager'\n DC CL1'N',CL8'QSYSARCH',CL32'TWS'\n DC CL1'N',CL8'QUIKSTRF',CL32'QuickStart'\n DC CL1'N',CL8'QUIKSTRT',CL32'QuickStart'\n DC CL1'N',CL8'RAIJVTCB',CL32'????'\n DC CL1'N',CL8'RAMIS   ',CL32'CA-RAMIS'\n DC CL1'N',CL8'RAMISIO ',CL32'CA-RAMIS'\n DC CL1'N',CL8'RAMISLOG',CL32'CA-RAMIS'\n DC CL1'N',CL8'RAMISOP ',CL32'CA-RAMIS'\n DC CL1'N',CL8'RBP0200 ',CL32'CA-Platinum'\n DC CL1'N',CL8'RC/EDIT ',CL32'CA-Platinum-RC/EDIT'\n DC CL1'N',CL8'RMOCKPT ',CL32'CA-Deliver_Checkpoint'\n DC CL1'Y',CL8'RMOUPD  ',CL32'CA-Deliver_Database_Dataset'\n DC CL1'N',CL8'ROSACT  ',CL32'CA-ROSCOE'\n DC CL1'N',CL8'ROSCLIBE',CL32'CA-ROSCOE'\n DC CL1'N',CL8'SA$CIN  ',CL32'CA-Detector'\n DC CL1'N',CL8'SA$COE  ',CL32'CA-Detector'\n DC CL1'N',CL8'SAGCTIMO',CL32'COM-PLETE'\n DC CL1'Y',CL8'SARACT  ',CL32'CA-VIEW_Accounting_Dataset'\n DC CL1'N',CL8'SARPAC  ',CL32'CA-VIEW'\n DC CL1'N',CL8'SARSTC  ',CL32'CA-VIEW'\n DC CL1'Y',CL8'SARUPD  ',CL32'CA-VIEW_Database_Dataset'\n DC CL1'N',CL8'SASDATA ',CL32'SAS-SAS'\n DC CL1'N',CL8'SDSI    ',CL32'CA-MIM'\n DC CL1'Y',CL8'SERLOG  ',CL32'Logrec_Dataset'\n DC CL1'N',CL8'SIBIXFP ',CL32'IXFP'\n DC CL1'Y',CL8'SPFDSN  ',CL32'ISPF_Dataset'\n DC CL1'Y',CL8'SPFEDIT ',CL32'ISPF_Edit_Dataset'\n DC CL1'N',CL8'SPFPAN  ',CL32'CA-Panvalet_Member'\n DC CL1'N',CL8'SPFUSER ',CL32'ISPF_User'\n DC CL1'N',CL8'SPZAPLIB',CL32'Superzap'\n DC CL1'N',CL8'SRSBATCH',CL32'RA-Smart/RESTART'\n DC CL1'Y',CL8'STKALSQN',CL32'STK-SILO_Database_Dataset'\n DC CL1'N',CL8'STKENQNM',CL32'STK-SILO'\n DC CL1'N',CL8'STROBE-B',CL32'CW-Strobe'\n DC CL1'N',CL8'STROBECV',CL32'CW-Strobe'\n DC CL1'N',CL8'SYSAOP  ',CL32'Printserver'\n DC CL1'N',CL8'SYSCATLG',CL32'Catalog'\n DC CL1'N',CL8'SYSCBR  ',CL32'OAM'\n DC CL1'Y',CL8'SYSDSN  ',CL32'System_Dataset'\n DC CL1'N',CL8'SYSDSNSY',CL32'VTAM'\n DC CL1'N',CL8'SYSIEA01',CL32'Dump'\n DC CL1'N',CL8'SYSIEFSD',CL32'Allocation'\n DC CL1'Y',CL8'SYSIEWLP',CL32'Linkage_Editor_Dataset'\n DC CL1'Y',CL8'SYSIGGV1',CL32'Master_Catalog_Dataset'\n DC CL1'Y',CL8'SYSIGGV2',CL32'User_Catalog_Dataset'\n DC CL1'N',CL8'SYSIKJBC',CL32'TSOE_Broadcast'\n DC CL1'N',CL8'SYSIKJUA',CL32'TSOE_UADS'\n DC CL1'N',CL8'SYSNFSC ',CL32'Unix_System_Services_-_NSF'\n DC CL1'N',CL8'SYSOSR02',CL32'OTIS/OAM'\n DC CL1'Y',CL8'SYSSMF01',CL32'SMF_Dataset'\n DC CL1'N',CL8'SYSVSAM ',CL32'VSAM'\n DC CL1'N',CL8'SYSVTOC ',CL32'VTOC'\n DC CL1'N',CL8'SYSZ-TSS',CL32'CA-Top_Secret_Initialization'\n DC CL1'N',CL8'SYSZ#SSI',CL32'SSI'\n DC CL1'N',CL8'SYSZALCF',CL32'IEFAUTO'\n DC CL1'N',CL8'SYSZAPPC',CL32'APPC'\n DC CL1'N',CL8'SYSZARC ',CL32'DFSMS/HSM'\n DC CL1'N',CL8'SYSZASCH',CL32'ASCH'\n DC CL1'N',CL8'SYSZATR ',CL32'Logger'\n DC CL1'N',CL8'SYSZATS ',CL32'Tape'\n DC CL1'N',CL8'SYSZAVM ',CL32'AVM'\n DC CL1'N',CL8'SYSZBDT ',CL32'BDT'\n DC CL1'N',CL8'SYSZBPX ',CL32'BPX'\n DC CL1'N',CL8'SYSZCAXW',CL32'CAXW'\n DC CL1'N',CL8'SYSZCBR ',CL32'OAM'\n DC CL1'N',CL8'SYSZCMDS',CL32'Commands'\n DC CL1'N',CL8'SYSZCOMM',CL32'GRS'\n DC CL1'N',CL8'SYSZCSD ',CL32'CSD'\n DC CL1'N',CL8'SYSZCSV ',CL32'CSV'\n DC CL1'N',CL8'SYSZCT  ',CL32'Component_Trace'\n DC CL1'Y',CL8'SYSZDAE ',CL32'DAE_Dataset'\n DC CL1'N',CL8'SYSZDFH ',CL32'CICS'\n DC CL1'Y',CL8'SYSZDRK ',CL32'TWS'\n DC CL1'N',CL8'SYSZDSCB',CL32'DSCB'\n DC CL1'Y',CL8'SYSZDSN ',CL32'HFS_Dataset'\n DC CL1'N',CL8'SYSZDSN3',CL32'DB2'\n DC CL1'N',CL8'SYSZDTS2',CL32'DTS'\n DC CL1'N',CL8'SYSZDTS3',CL32'DTS'\n DC CL1'N',CL8'SYSZDTS4',CL32'DTS'\n DC CL1'N',CL8'SYSZDTS5',CL32'DTS'\n DC CL1'N',CL8'SYSZEC16',CL32'Purge'\n DC CL1'N',CL8'SYSZERB ',CL32'RMF'\n DC CL1'N',CL8'SYSZGGLG',CL32'BDAM'\n DC CL1'N',CL8'SYSZGSYS',CL32'Sysplex_Group'\n DC CL1'N',CL8'SYSZGTF1',CL32'GTF'\n DC CL1'N',CL8'SYSZIAT ',CL32'JES3_Checkpoint'\n DC CL1'N',CL8'SYSZIGDI',CL32'SMS'\n DC CL1'N',CL8'SYSZIGGI',CL32'TSB'\n DC CL1'N',CL8'SYSZIGW0',CL32'PDSE'\n DC CL1'N',CL8'SYSZIGW1',CL32'PDSE'\n DC CL1'N',CL8'SYSZIHV ',CL32'ESCON_Manager'\n DC CL1'N',CL8'SYSZIKTC',CL32'TSOE'\n DC CL1'N',CL8'SYSZILRD',CL32'Page'\n DC CL1'N',CL8'SYSZIO  ',CL32'PAGEDEL_Command'\n DC CL1'N',CL8'SYSZIOA ',CL32'????'\n DC CL1'N',CL8'SYSZIOS ',CL32'IOS'\n DC CL1'N',CL8'SYSZISTC',CL32'Restart'\n DC CL1'N',CL8'SYSZIXFP',CL32'IXFP'\n DC CL1'N',CL8'SYSZJES2',CL32'JES2_Checkpoint'\n DC CL1'N',CL8'SYSZJWTP',CL32'Job_Step_Messages'\n DC CL1'N',CL8'SYSZLLA1',CL32'LLACOPY'\n DC CL1'N',CL8'SYSZLOGR',CL32'Logrec'\n DC CL1'N',CL8'SYSZMCS ',CL32'MCS'\n DC CL1'N',CL8'SYSZNIP ',CL32'NIP'\n DC CL1'Y',CL8'SYSZOPEN',CL32'Opening_Dataset'\n DC CL1'N',CL8'SYSZPCCB',CL32'PCCB'\n DC CL1'N',CL8'SYSZPGAD',CL32'PAGEADD_Command'\n DC CL1'N',CL8'SYSZPGDL',CL32'PAGEDEL Command'\n DC CL1'Y',CL8'SYSZPSWD',CL32'Password_Dataset'\n DC CL1'N',CL8'SYSZRACF',CL32'RACF'\n DC CL1'N',CL8'SYSZRAC2',CL32'RACF'\n DC CL1'N',CL8'SYSZRBMF',CL32'RMF'\n DC CL1'N',CL8'SYSZRBZZ',CL32'RMF'\n DC CL1'N',CL8'SYSZREUS',CL32'????'\n DC CL1'N',CL8'SYSZRMM ',CL32'RMM'\n DC CL1'N',CL8'SYSZRPLW',CL32'Catalog'\n DC CL1'N',CL8'SYSZSDO ',CL32'DLF'\n DC CL1'N',CL8'SYSZSDSF',CL32'SDSF'\n DC CL1'N',CL8'SYSZSMF1',CL32'SMF_Buffer'\n DC CL1'N',CL8'SYSZSPI ',CL32'SPI'\n DC CL1'N',CL8'SYSZSVC ',CL32'SVC_Table'\n DC CL1'N',CL8'SYSZTCPI',CL32'TCPIP'\n DC CL1'N',CL8'SYSZTIOT',CL32'TIOT'\n DC CL1'N',CL8'SYSZTRC ',CL32'System_Trace'\n DC CL1'N',CL8'SYSZTSOE',CL32'TSOE'\n DC CL1'N',CL8'SYSZUSRL',CL32'User_Labels'\n DC CL1'N',CL8'SYSZVARY',CL32'Reconfiguration_Command'\n DC CL1'N',CL8'SYSZVMV ',CL32'Volume_Mount_and_Verify'\n DC CL1'N',CL8'SYSZVOLS',CL32'Volume_Serial'\n DC CL1'N',CL8'SYSZVVDS',CL32'VVDS'\n DC CL1'N',CL8'SYSZWLM ',CL32'WLM'\n DC CL1'N',CL8'SYSZWTOR',CL32'WTOR'\n DC CL1'N',CL8'TAOTCPIP',CL32'Fischer-TAO'\n DC CL1'N',CL8'TAOTCPIT',CL32'Fischer-TAO'\n DC CL1'N',CL8'TASA    ',CL32'ETCL'\n DC CL1'N',CL8'TBLBASE ',CL32'Tablebase'\n DC CL1'N',CL8'TCPIP   ',CL32'TCPIP'\n DC CL1'N',CL8'TCPIPL62',CL32'TCPIP'\n DC CL1'N',CL8'TCPIPSYS',CL32'TCPIP'\n DC CL1'Y',CL8'TDMFRESV',CL32'Softek-Replicator'\n DC CL1'N',CL8'TELONTDF',CL32'CA-TELON'\n DC CL1'N',CL8'TELONTST',CL32'CA-TELON'\n DC CL1'N',CL8'TICMVS  ',CL32'TICTOC'\n DC CL1'N',CL8'TMONMVS ',CL32'ASG-TMONMVS'\n DC CL1'Y',CL8'TMRMCF  ',CL32'MVS_Solutions-Thruput_Manager_Dataset'\n DC CL1'N',CL8'TMSAPEC ',CL32'CA-1'\n DC CL1'N',CL8'TMSQNAME',CL32'CA-1'\n DC CL1'N',CL8'TPCLOCAL',CL32'CA-MIA'\n DC CL1'N',CL8'TPXBRCST',CL32'CA-TPX'\n DC CL1'N',CL8'TPXVSAMP',CL32'CA-TPX'\n DC CL1'N',CL8'TPXVSAMS',CL32'CA-TPX'\n DC CL1'N',CL8'UCCONEQN',CL32'CA-1'\n DC CL1'N',CL8'UCC7CMDS',CL32'CA-7'\n DC CL1'N',CL8'UCC7SVT ',CL32'CA-7'\n DC CL1'N',CL8'UC07    ',CL32'CA-7'\n DC CL1'N',CL8'VALETPAN',CL32'CA-Panvalet'\n DC CL1'N',CL8'VIOOPX21',CL32'SW-VIO_Plus'\n DC CL1'N',CL8'VIOOPX22',CL32'SW-VIO_Plus'\n DC CL1'Y',CL8'VLAM-MDB',CL32'Documerge_Dataset'\n DC CL1'N',CL8'VSVSSI  ',CL32'LRS-VPS_SSI'\n DC CL1'N',CL8'XCOMDYNA',CL32'CA-XCOM'\n DC CL1'N',CL8'XCOMGLOB',CL32'CA-XCOM'\n DC CL1'N',CL8'XCOM62  ',CL32'CA-XCOM'\n DC CL1'N',CL8'XEROXOSF',CL32'XPAF'\n DC CL1'N',CL8'XPAF    ',CL32'XPAF'\n DC CL1'N',CL8'XPE/MVS ',CL32'CA-L-Serv'\n DC CL1'N',CL8'XPEDITER',CL32'CW-Xpediter'\n DC CL1'N',CL8'XPNOTIFY',CL32'CW-Xpediter'\n DC CL1'N',CL8'ZEDLNK  ',CL32'Session_Manager'\n DC CL1'Y',CL8'24X7    ',CL32'Neon-MissionControl_Dataset'\n DC CL1'Y',CL8'24X7NTSO',CL32'Neon-MissionControl_Dataset'\nMAJORNUM EQU   (*-TBLMAJOR)/MAJORLEN MAJOR table entry count\n DC CL1'N',CL8'????????',CL32'Unknown'\n         MEND\n         MACRO\n**********************************************************************\n* LOG          Write a message to the log data set                   *\n**********************************************************************\n&LABEL   LOG   &MESSAGE=           MESSAGE-ID\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'LOG ',                                              X\n               =C'&MESSAGE '),                                         X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* PQUERY       Obtain panel information                              *\n*                                                                    *\n*               PARAMETERS ARE :                                     *\n*               1. PANEL-NAME                                        *\n*               2. AREA-NAME                                         *\n* \"AREATYP\"  3. VARIABLE-NAME THAT WILL BE SET TO DYNAMIC OR GRAPHIC *\n* \"COLS\"     4. VARIABLE-NAME THAT WILL BE SET TO AREA-WIDTH (COLS)  *\n* \"ROWS\"     5. VARIABLE-NAME THAT WILL BE SET TO AREA-LENGTH (ROWS) *\n* \"TLROW\"    6. VARIABLE-NAME THAT WILL BE SET TO TOP LEFT ROW NUM   *\n* \"TLCOL\"    7. VARIABLE-NAME THAT WILL BE SET TO TOP LEFT COL NUM   *\n* BEFORE ISSUING \"PQUERY\", VDEFINES MUST BE DONE FOR 3 THROUGH 7.    *\n**********************************************************************\n&LABEL   PQUERY  &QPNL,&QAREA\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'PQUERY ',                                           X\n               =C'&QPNL',                                              X\n               =C'&QAREA',                                             X\n               =C'AREATYP',                                            X\n               =C'COLS',                                               X\n               =C'ROWS',                                               X\n               =C'TLROW',                                              X\n               =C'TLCOL'),                                             X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* REMPOP       Remove a Pop-Up Window                                *\n**********************************************************************\n&LABEL   REMPOP &ALL=              All pop-ups\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'REMPOP ',                                           X\n               =C'&ALL '),                                             X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* SELECT       Select a panel or function                            *\n**********************************************************************\n&LABEL   SELECT  &SEL1,&SEL2,&SEL3,&SEL4,&SEL5\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'SELECT ',                                           X\n               =F'60.',                                                X\n               =CL60'&SEL1 &SEL2 &SEL3 &SEL4 &SEL5'),                  X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* SETMSG       Set next message                                      *\n**********************************************************************\n&LABEL   SETMSG &MESSAGE=,         MESSAGE-ID                          X\n               &COND=,             CONDITIONAL                         X\n               &MSGLOC=            MESSAGE-FIELD-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'SETMSG ',                                           X\n               =C'&MESSAGE ',                                          X\n               =C'&COND ',                                             X\n               =C'&MSGLOC '),                                          X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBADD        Add a row to a table                                  *\n**********************************************************************\n&LABEL   TBADD &TABLE=,            TABLE-NAME                          X\n               &SAVE=(),           SAVE-NAME-LIST                      X\n               &ORDER=,            ORDER                               X\n               &MULT=1             NUMBER OF ROWS\n         AIF   ('&SAVE'(1,1) EQ '(').OKSAVE\n         MNOTE 8,'TBADD SAVE=&SAVE - MUST BE IN PARENTHESIS'\n         AGO   .MEND\n.OKSAVE ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBADD ',                                            X\n               =C'&TABLE ',                                            X\n               =C'&SAVE',                                              X\n               =C'&ORDER ',                                            X\n               =F'&MULT.'),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBBOTTOM     Set the row pointer to the bottom                     *\n**********************************************************************\n&LABEL   TBBOTTOM &TABLE=          TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBBOTTOM ',                                         X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBCLOSE      Close and save a table                                *\n**********************************************************************\n&LABEL   TBCLOSE &TABLE=           TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBCLOSE ',                                          X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBCREATE     Create a new table                                    *\n**********************************************************************\n&LABEL   TBCREATE &TABLE=,         TABLE-NAME                          X\n               &KEYS=(),           KEY-NAME-LIST                       X\n               &NAMES=(),          NAME-LIST                           X\n               &WRITE=NOWRITE,     WRITE/NOWRITE                       X\n               &REPLACE=REPLACE,   REPLACE                             X\n               &LIBRARY=,          LIBRARY                             X\n               &SHARE=             SHARE\n         AIF   ('&KEYS'(1,1) EQ '(').OKKEYS\n         MNOTE 8,'TBCREATE KEYS=&KEYS - MUST BE IN PARENTHESIS'\n.OKKEYS  ANOP\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'TBCREATE NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBCREATE ',                                         X\n               =C'&TABLE ',                                            X\n               =C'&KEYS',                                              X\n               =C'&NAMES',                                             X\n               =C'&WRITE ',                                            X\n               =C'&REPLACE ',                                          X\n               =C'&LIBRARY ',                                          X\n               =C'&SHARE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBDELETE     Delete a row from a table                             *\n**********************************************************************\n&LABEL   TBDELETE &TABLE=          TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBDELETE ',                                         X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBDISPL      Display table information                             *\n**********************************************************************\n&LABEL   TBDISPL &TABLE=,          TABLE-NAME                          X\n               &PANEL=,            PANEL-NAME                          X\n               &MESSAGE=,          MESSAGE-ID                          X\n               &CURSOR=,           FIELD-NAME                          X\n               &CSRROW=,           TABLE-ROW-NUMBER                    X\n               &CSRPOS=,           CURSOR-POSITION                     X\n               &AUTOSEL=NO,        AUTOSEL                             X\n               &POSITION=,         CRP-NAME                            X\n               &ROWID=,            ROWID-NAME                          X\n               &MSGLOC=,           MESSAGE-FIELD-NAME                  X\n               &PCLOC=,            Primary command locate              X\n               &PCSORT=,           Primary command sort                X\n               &LC=()              LINE-COMMAND\n         AIF   ('&LC'(1,1) EQ '(').OKLC\n         MNOTE 8,'TBDISPL LC=&LC - MUST BE IN PARENTHESIS'\n.OKLC    ANOP\n         LCLA  &CNT\n         LCLC  &NLLBL\n         LCLC  &ENDLBL,&DSP1LBL,&DSP2LBL,&NPLBL,&PRCLBL,&LCLBL,&TOPLBL\n         LCLC  &LOCLBL\n         LCLC  &CMP,&LBL,&ID,&SEL\n         AIF   ('&POSITION' NE '').POSITION\n&POSTION SETC  '&TABLE'.'CRP'\n.POSITION ANOP\n&TOPLBL  SETC  '&LABEL'\n         AIF   ('&TOPLBL' NE '').LABEL\n&TOPLBL  SETC  'TOP'.'&SYSNDX'\n.LABEL   ANOP\n&DSP1LBL SETC  'DSP1'.'&SYSNDX'\n&DSP2LBL SETC  'DSP2'.'&SYSNDX'\n&ENDLBL  SETC  'END'.'&SYSNDX'\n&LOCLBL  SETC  'LOC'.'&SYSNDX'\n&SRTLBL  SETC  'SRT'.'&SYSNDX'\n&PRCLBL  SETC  'PRC'.'&SYSNDX'\n&LCLBL   SETC  'LC'.'&SYSNDX'\n         MVC   TABLE,=CL8'&TABLE'  Table name\n&TOPLBL  MVC   ZCMD,=CL80' '       Clear primary command\n         L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBDISPL ',                                          X\n               =C'&TABLE ',                                            X\n               =C'&PANEL ',                                            X\n               =C'&MESSAGE ',                                          X\n               =C'&CURSOR ',                                           X\n               =C'&CSRROW ',                                           X\n               =C'&CSRPOS ',                                           X\n               =C'&AUTOSEL ',                                          X\n               =C'&POSITION ',                                         X\n               =C'&ROWID ',                                            X\n               =C'&MSGLOC '),                                          X\n               VL,MF=(E,W_CL512)\n         C     R15,=F'8'           End ?\n         BNL   &ENDLBL             . Yes\n         AIF   ('&PCLOC' EQ '').PCLOC\n         CLC   ZCMD(1),=CL1'L'     Primary command - Locate ?\n         BNE   &LOCLBL             . No\n         CALL  &PCLOC              Primary command - Locate\n         B     &TOPLBL\n&LOCLBL  EQU *\n.PCLOC   ANOP\n         AIF   ('&PCSORT' EQ '').PCSORT\n         CLC   ZCMD(1),=CL1'S'     Primary command - Sort ?\n         BNE   &SRTLBL             . No\n         CALL  &PCSORT             Primary command - Sort\n         B     &TOPLBL\n&SRTLBL  EQU *\n.PCSORT  ANOP\n&PRCLBL  EQU *\n         AIF   ('&LC' NE '()').LC\n         B     &TOPLBL             Redisplay\n         AGO   .ENDLBL\n.LC      ANOP\n         MVC   &TABLE.SEL,ZTDSELS\n&LCLBL   EQU   *\n&CNT     SETA  0\n&CNT     SETA  &CNT+1\n&SEL     SETC  '&LC(&CNT)'\n.NEXTLC  ANOP\n&CNT     SETA  &CNT+1\n         AIF   (&CNT GT N'&LC).ENDLC\n&CMP     SETC  '&LC(&CNT)'\n&NLLBL   SETC  'N'.'&CMP'.'&SYSNDX'\n&CNT     SETA  &CNT+1\n&LBL     SETC  '&LC(&CNT)'\n         CLC   &SEL,=C'&CMP'       Match ?\n         BNE   &NLLBL              . No\n         CONTROL DISPLAY,SAVE      Save display environment\n         CALL  &LBL                &LBL\n         CONTROL DISPLAY,RESTORE   Restore display environment\n         B     &DSP1LBL\n&NLLBL   EQU *\n         AGO   .NEXTLC\n.ENDLC   ANOP\n         CLI   &SEL,C' '           Blank ?\n         BE    &DSP2LBL            . Yes\n&DSP1LBL MVI   &SEL,C' '           Clear line command\n         CLC   &TABLE.SEL,=CL4'0001'\n         BNH   &TOPLBL\n&DSP2LBL L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBDISPL ',                                          X\n               =C'&TABLE ',                                            X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C' ',                                                  X\n               =C'&POSITION ',                                         X\n               =C' ',                                                  X\n               =C' '),                                                 X\n               VL,MF=(E,W_CL512)\n         C     R15,=F'8'           End ?\n         BNL   &ENDLBL             . Yes\n         B     &PRCLBL             Reprocess selections\n.ENDLBL  ANOP\n&ENDLBL  EQU   *                   End/Return\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBEND        Close a table without saving                          *\n**********************************************************************\n&LABEL   TBEND &TABLE=             TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBEND ',                                            X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBERASE      Erase a table                                         *\n**********************************************************************\n&LABEL   TBERASE &TABLE=,          TABLE-NAME                          X\n               &LIBRARY=ISPTABL    LIBRARY-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBERASE ',                                          X\n               =C'&TABLE ',                                            X\n               =C'&LIBRARY '),                                         X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBEXIST      Determine whether a row exists in a table             *\n**********************************************************************\n&LABEL   TBEXIST &TABLE=           TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBEXIST ',                                          X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBGET        Retrieve a row from a table                           *\n**********************************************************************\n&LABEL   TBGET &TABLE=             TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBGET ',                                            X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBMOD        Modify a row from table                               *\n**********************************************************************\n&LABEL   TBMOD &TABLE=,            TABLE-NAME                          X\n               &SAVE=(),           SAVE-NAME-LIST                      X\n               &ORDER=             ORDER\n         AIF   ('&SAVE'(1,1) EQ '(').OKSAVE\n         MNOTE 8,'TBMOD SAVE=&SAVE - MUST BE IN PARENTHESIS'\n.OKSAVE  ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBMOD ',                                            X\n               =C'&TABLE ',                                            X\n               =C'&SAVE',                                              X\n               =C'&ORDER '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBOPEN       Open a table                                          *\n**********************************************************************\n&LABEL   TBOPEN &TABLE=,           TABLE-NAME                          X\n               &WRITE=WRITE,       WRITE/NOWRITE                       X\n               &LIBRARY=ISPTLIB,   LIBRARY                             X\n               &SHARE=             SHARE\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBOPEN ',                                           X\n               =C'&TABLE ',                                            X\n               =C'&WRITE ',                                            X\n               =C'&LIBRARY ',                                          X\n               =C'&SHARE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBPUT        Update a row from table                               *\n**********************************************************************\n&LABEL   TBPUT &TABLE=             TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBPUT ',                                            X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBQUERY      Obtain table information                              *\n**********************************************************************\n&LABEL   TBQUERY &TABLE=,          TABLE-NAME                          X\n               &KEYS=,             KEY-NAME                            X\n               &NAMES=,            VAR-NAME                            X\n               &ROWNUM=,           ROWNUM-NAME                         X\n               &KEYNUM=,           KEYNUM-NAME                         X\n               &NAMENUM=,          NAMENUM-NAME                        X\n               &POSITION=          CRP-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBQUERY ',                                          X\n               =C'&TABLE ',                                            X\n               =C'&KEYS ,',                                            X\n               =C'&NAMES ,',                                           X\n               =C'&ROWNUM ,',                                          X\n               =C'&KEYNUM ,',                                          X\n               =C'&NAMENUM ,',                                         X\n               =C'&POSITION '),                                        X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBSARG       Define a search argument                              *\n**********************************************************************\n&LABEL   TBSARG &TABLE=,           TABLE-NAME                          X\n               &ARGLIST=(),        NAME-LIST                           X\n               &MODE=NEXT,         NEXT/PREVIOUS                       X\n               &NAMECOND=()        NAME-COND-PAIRS\n         AIF   ('&ARGLIST'(1,1) EQ '(').ARGLIST\n         MNOTE 8,'TBSARG ARGLIST=&ARGLIST - MUST BE IN PARENTHESIS'\n.ARGLIST ANOP\n         AIF   ('&MODE' EQ 'NEXT').MODE\n         AIF   ('&MODE' EQ 'PREVIOUS').MODE\n         MNOTE 8,'TBSARG MODE=&MODE - MUST BE NEXT OR PREVIOUS'\n.MODE    ANOP\n         AIF   ('&NAMECOND'(1,1) EQ '(').NAMECOND\n         MNOTE 8,'TBSARG NAMECOND=&NAMECOND - MUST BE IN PARENTHESIS'\n.NAMECOND ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSARG ',                                           X\n               =C'&TABLE ',                                            X\n               =C'&ARGLIST',                                           X\n               =C'&MODE ',                                             X\n               =C'&NAMECOND'),                                         X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBSAVE       Save a table                                          *\n**********************************************************************\n&LABEL   TBSAVE &TABLE=            TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSAVE ',                                           X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBSCAN       Search a table                                        *\n**********************************************************************\n&LABEL   TBSCAN &TABLE=,           TABLE-NAME                          X\n               &ARGLIST=(),        NAME-LIST                           X\n               &SAVENAME=,         VAR-NAME                            X\n               &ROWID=,            ROWID-NAME                          X\n               &MODE=NEXT,         NEXT/PREVIOUS                       X\n               &NOREAD=,           NOREAD                              X\n               &POSITION=,         CRP-NAME                            X\n               &CONDLIST=()        CONDITION-VALUE-LIST\n         AIF   ('&ARGLIST'(1,1) EQ '(').ARGLIST\n         MNOTE 8,'TBSCAN ARGLIST=&ARGLIST - MUST BE IN PARENTHESIS'\n.ARGLIST ANOP\n         AIF   ('&MODE' EQ 'NEXT').MODE\n         AIF   ('&MODE' EQ 'PREVIOUS').MODE\n         MNOTE 8,'TBSCAN MODE=&MODE - MUST BE NEXT OR PREVIOUS'\n.MODE    ANOP\n         AIF   ('&CONDLIST'(1,1) EQ '(').CONDLIST\n         MNOTE 8,'TBSCAN CONDLIST=&CONDLIST - MUST BE IN PARENTHESIS'\n.CONDLIST ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSCAN ',                                           X\n               =C'&TABLE ',                                            X\n               =C'&ARGLIST',                                           X\n               =C'&SAVENAME ',                                         X\n               =C'&ROWID ',                                            X\n               =C'&MODE ',                                             X\n               =C'&NOREAD ',                                           X\n               =C'&POSITION ',                                         X\n               =C'&CONDLIST'),                                         X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBSKIP       Move the row pointer                                  *\n**********************************************************************\n&LABEL   TBSKIP &TABLE=,           TABLE-NAME                          X\n               &NUMBER=+1,         NUMBER                              X\n               &VAR=,              VAR-NAME                            X\n               &ROWID=,            ROWID-NAME                          X\n               &ROW=,              ROWID                               X\n               &NOREAD=,           NOREAD                              X\n               &CRP=,              CRP-NAME                            X\n               &END=               END\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSKIP ',                                           X\n               =C'&TABLE ',                                            X\n               =F'&NUMBER',                                            X\n               =C'&VAR ',                                              X\n               =C'&ROWID ',                                            X\n               =C'&ROW ',                                              X\n               =C'&NOREAD ',                                           X\n               =C'&CRP '),                                             X\n               VL,MF=(E,W_CL512)\n         AIF   ('&END' EQ '').MEND\n         C     R15,=F'0'           End ?\n         BNE   &END                . Yes\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBSORT       Sort a table                                          *\n**********************************************************************\n&LABEL   TBSORT &TABLE=,           TABLE-NAME                          X\n               &FIELDS=()          SORT-LIST - FIELD,B|C|N,A|D\n         LCLC  &IFIELDS,&ITABLE\n         AIF   ('&TABLE'(1,1) NE '@').TABLE\n&ITABLE  SETC  '&TABLE'(2,K'&TABLE-1)\n         AIF   ('&FIELDS'(1,1) NE '@').TIFD\n&IFIELDS SETC  '&FIELDS'(2,K'&FIELDS-1)\n.TIFI    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSORT ',                                           X\n               &ITABLE,                                                X\n               &IFIELDS),                                              X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.TIFD    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSORT ',                                           X\n               &ITABLE,                                                X\n               =C'&FIELDS'),                                           X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.TABLE   ANOP\n         AIF   ('&FIELDS'(1,1) NE '@').TDFD\n&IFIELDS SETC  '&FIELDS'(2,K'&FIELDS-1)\n.TDFI    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSORT ',                                           X\n               =C'&TABLE ',                                            X\n               &IFIELDS),                                              X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.TDFD    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBSORT ',                                           X\n               =C'&TABLE ',                                            X\n               =C'&FIELDS'),                                           X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBTOP        Set the row pointer to the top                        *\n**********************************************************************\n&LABEL   TBTOP &TABLE=             TABLE-NAME\n         LCLC  &ITABLE\n         AIF   ('&TABLE'(1,1) NE '@').TABLE\n&ITABLE  SETC  '&TABLE'(2,K'&FIELDS-1)\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBTOP ',                                            X\n               &ITABLE),                                               X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.TABLE   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBTOP ',                                            X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* TBVCLEAR     Clear table variables                                 *\n**********************************************************************\n&LABEL   TBVCLEAR &TABLE=          TABLE-NAME\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'TBVCLEAR ',                                         X\n               =C'&TABLE '),                                           X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VCOPY        Create a copy of a variable                           *\n**********************************************************************\n&LABEL   VCOPY &NAME=,             NAME                                X\n               &LENGTH=,           LENGTH                              X\n               &VARIABLE=,         VARIABLE                            X\n               &MODE=              LOCATE/MOVE\n         LCLA  &WRKLENA\n         LCLC  &WRKLEN,&WRKVAR\n         AIF   ('&LENGTH' NE '').LEN\n         LA    R0,L'&NAME              max length of dsname\n         ST    R0,FULL                 max length of dsname\n         MNOTE 0,'VCOPY - LENGTH= DEFAULTING TO LENGTH OF &NAME'\n         AGO   .LENEND\n.LEN     ANOP\n         LA    R0,&LENGTH              max length of dsname\n         ST    R0,FULL                 max length of dsname\n         AGO   .LENEND\n.LENEND  ANOP\n&WRKVAR  SETC  '&VARIABLE'\n         AIF   ('&WRKVAR' NE '').VARIABLE\n&WRKVAR  SETC '&NAME'\n         MNOTE 0,'VCOPY - VARIABLE= DEFAULTING TO &NAME'\n.VARIABLE ANOP\n         AIF   ('&MODE' EQ 'LOCATE').MODE\n         AIF   ('&MODE' EQ 'MOVE').MODE\n         MNOTE 8,'VCOPY - MODE=&MODE INVALID - MUST BE LOCATE OR MOVE'\n         MEXIT\n.MODE    ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VCOPY ',                                            X\n               =C'(&NAME) ',                                           X\n               FULL,                                                   X\n               &WRKVAR,                                                X\n               =C'&MODE '),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VDEFINE      Define function variables                             *\n**********************************************************************\n&LABEL   VDEFINE &NAMES=(),        NAME-LIST                           X\n               &VARIABLE=,         VARIABLE                            X\n               &FORMAT=CHAR,       FORMAT                              X\n               &LENGTH=8,          LENGTH                              X\n               &OPTIONS=,          OPTIONS                             X\n               &USERDATA=          USER-DATA\n         LCLC  &VAR\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'VDEFINE NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n         AIF   ('&VARIABLE' EQ '').NOVAR\n&VAR     SETC  '&VARIABLE'\n         AGO   .ENDVAR\n.NOVAR   ANOP\n&VAR     SETC  '&NAMES'(2,K'&NAMES-2)\n.ENDVAR  ANOP\n         AIF   ('&OPTIONS' EQ '').NOOPT\n         L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VDEFINE ',                                          X\n               =C'&NAMES',                                             X\n               &VAR,                                                   X\n               =C'&FORMAT ',                                           X\n               =F'&LENGTH.',                                           X\n               =C'&OPTIONS '),                                         X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.NOOPT   ANOP\n         L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VDEFINE ',                                          X\n               =C'&NAMES',                                             X\n               &VAR,                                                   X\n               =C'&FORMAT ',                                           X\n               =F'&LENGTH.'),                                          X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VDELETE      Remove a definition of function variables             *\n**********************************************************************\n&LABEL   VDELETE &NAMES=()         NAME-LIST\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'VDELETE NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VDELETE ',                                          X\n               =C'&NAMES'),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VGET         Retrieve variables from a pool or profile             *\n**********************************************************************\n&LABEL   VGET  &NAMES=(),          NAME-LIST                           X\n               &POOL=PROFILE       ASIS/SHARED/PROFILE\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'VGET NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VGET ',                                             X\n               =C'&NAMES ',                                            X\n               =C'&POOL '),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VMASK        Mask and Edit Processing                              *\n**********************************************************************\n&LABEL   VMASK &NAMES=(),          NAME-LIST                           X\n               &FORMAT=,           SYSTEM-FORMAT                       X\n               &LENGTH=,           LENGTH                              X\n               &USER=              USER-FORMAT\n         LCLC  &VAR\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'VMASK NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n         AIF   ('&FORMAT' EQ '').NOFORMAT\n         AIF   ('&FORMAT' EQ 'LOCATE').FORMAT\n         AIF   ('&FORMAT' EQ 'IDATE').FORMAT\n         AIF   ('&FORMAT' EQ 'STDDATE').FORMAT\n         AIF   ('&FORMAT' EQ 'ITIME').FORMAT\n         AIF   ('&FORMAT' EQ 'STDTIME').FORMAT\n         AIF   ('&FORMAT' EQ 'JDATE').FORMAT\n         AIF   ('&FORMAT' EQ 'JSTD').FORMAT\n         MNOTE 8,'VMASK - FORMAT=&FORMAT Invalid'\n         MEXIT\n         L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VMASK ',                                            X\n               =C'&NAMES ',                                            X\n               =C'FORMAT ',                                            X\n               =C'&FORMAT '),                                          X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.NOFORMAT ANOP\n         L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VMASK ',                                            X\n               =C'&NAMES ',                                            X\n               =C'USER ',                                              X\n               =C'&USER ',                                             X\n               =F'&LENGTH.'),                                          X\n               VL,MF=(E,W_CL512)\n         AGO   .MEND\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VPUT         Update variables in the shared or profile pool        *\n**********************************************************************\n&LABEL   VPUT  &NAMES=(),          NAME-LIST                           X\n               &POOL=PROFILE       ASIS/SHARED/PROFILE\n         AIF   ('&NAMES'(1,1) EQ '(').NAMES\n         MNOTE 8,'VPUT NAMES=&NAMES - MUST BE IN PARENTHESIS'\n.NAMES   ANOP\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VPUT ',                                             X\n               =C'&NAMES ',                                            X\n               =C'&POOL '),                                            X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VREPLACE     Replace a variable                                    *\n*                                                                    *\n*              THE FIRST PARAMETER IS VARIABLE-NAME, SECOND FULLWORD *\n*              LENGTH, THIRD THE DATA.                               *\n**********************************************************************\n&LABEL   VREPLACE &FLD,&LEN,&DATA\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VREPLACE ',                                         X\n               =C'(&FLD) ',                                            X\n               &LEN,                                                   X\n               &DATA),                                                 X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n         MACRO\n**********************************************************************\n* VRESET       Reset function variables                              *\n**********************************************************************\n&LABEL   VRESET\n&LABEL   L     R15,ISPLINK@        ISPLINK address\n         CALL  (15),                                                   X\n               (=C'VRESET '),                                          X\n               VL,MF=(E,W_CL512)\n.MEND    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE297": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t)\\x8f\\x01\\t)\\x8f\\x12S\\x00\\x16\\x00\\x16\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-10-25T00:00:00", "modifydate": "2009-10-25T12:53:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "CBT-478"}, "text": "//***FILE 297 is from Michael Cleary and is an ISPF dialog to       *   FILE 297\n//*           provide an interactive interface to the GRS (Global   *   FILE 297\n//*           Resource Serialization) queue.                        *   FILE 297\n//*                                                                 *   FILE 297\n//*     MIKE CLEARY HAS A NEW ADDRESS:                              *   FILE 297\n//*                                                                 *   FILE 297\n//*     Contact: Michael J. Cleary                                  *   FILE 297\n//*              IBM Global Services                                *   FILE 297\n//*              310-602-4105 (voice)                               *   FILE 297\n//*              mailto:michaeljosephcleary@yahoo.com               *   FILE 297\n//*              http://sites.google.com/site/michaeljosephcleary/  *   FILE 297\n//*                                                                 *   FILE 297\n//*     Description:                                                *   FILE 297\n//*       GRS ISPF Interface                                        *   FILE 297\n//*                                                                 *   FILE 297\n//*     Function:                                                   *   FILE 297\n//*       Provides an interactive view of the Global Resource       *   FILE 297\n//*       Serialization (GRS) queue. A high level resource          *   FILE 297\n//*       list is displayed based on user specified selection       *   FILE 297\n//*       criteria.  From the high level resource list,             *   FILE 297\n//*       individual resource details can be accessed.              *   FILE 297\n//*                                                                 *   FILE 297\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GRS": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01c\\x00F\\x00\\x97'O\\x01\\x07\\x07O\\x00\\x04\\x03\\xaa\\x02\\xdd\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@\"", "ispf": {"version": "01.99", "flags": 0, "createdate": "1997-10-01T00:00:00", "modifydate": "2007-03-15T00:04:46", "lines": 938, "newlines": 733, "modlines": 0, "user": "ZT15"}, "text": "//&SYSUID.GRS JOB (GRS),'GRS',\n//             CLASS=U,MSGCLASS=X,NOTIFY=&SYSUID.\n//JESDS OUTPUT PAGEDEF=LDUP,FORMDEF=LDUP,JESDS=ALL,FORMS=3H25\n//ASM     EXEC PGM=ASMA90,PARM='NODECK,OBJ,RENT'\n//STEPLIB   DD DISP=SHR,DSN=SYS1.SASMMOD1\n//SYSLIB    DD DISP=SHR,DSN=SYS1.MACLIB\n//          DD DISP=SHR,DSN=SYS1.MODGEN\n//          DD DISP=SHR,DSN=ZTGP01.MJCUTIL.MACLIB         <=== $COMMON\n//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSPRINT  DD SYSOUT=*,OUTPUT=*.JESDS\n//SYSLIN    DD DSN=&&OBJECT,SPACE=(CYL,(9,9)),UNIT=SYSDA,\n//             DISP=(NEW,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS)\n//SYSIN     DD *\n         TITLE 'GRS - GRS ISPF Interface'\nGRS      START 0\n**********************************************************************\n*                                                                    *\n* Name:            GRS                                               *\n*                                                                    *\n* Description:     GRS ISPF Interface                                *\n*                                                                    *\n* Function:                                                          *\n*   Provides an interactive view of the Global Resource              *\n*   Serialization (GRS) queue utilizing the ISPF Dialog              *\n*   Manager. A high level resource list is displayed based on        *\n*   user specified selection criteria.  From the high level          *\n*   resource list, individual resource details can be                *\n*   accessed.                                                        *\n*                                                                    *\n* Installation:                                                      *\n*   1) GRS PDS contains the following.                               *\n*      Member    Type      Contents                                  *\n*      ======    ====      ========                                  *\n*      $COMMON   ASM/MACRO Common Macros                             *\n*      GRS       ASM/JCL   GRS ISPF Interface                        *\n*      GRS@PRIM  ISPPLIB   GRS ISPF Interface                        *\n*      GRSMAJ    ISPPLIB   GRS ISPF Interface                        *\n*      GRSP002   ISPPLIB   GRS ISPF Interface                        *\n*      GRSP003   ISPPLIB   GRS ISPF Interface                        *\n*                                                                    *\n*   2) Assemble and link-edit GRS.  The assembly and linkedit        *\n*   must both get a return code zero.                                *\n*                                                                    *\n*   3) The load module and panels need to be available on ISPLLIB    *\n*   and ISPPLIB allocations respectively.  For the young at          *\n*   heart, this can easily be accomplished via LIBDEF's in a         *\n*   CLIST.                                                           *\n*                                                                    *\n*   PROC 0                                                           *\n*   CONTROL MAIN MSG                                                 *\n*   ISPEXEC LIBDEF ISPLLIB DATASET ID('ZTGP01.MJCUTIL.LINKLIB')      *\n*   ISPEXEC LIBDEF ISPPLIB DATASET ID('ZTGP01.MJCUTIL.ISPPLIB')      *\n*   ISPEXEC SELECT PGM(GRS)                                          *\n*   ISPEXEC LIBDEF ISPLLIB                                           *\n*   ISPEXEC LIBDEF ISPPLIB                                           *\n*   EXIT                                                             *\n*                                                                    *\n* Contact:         Michael J. Cleary                                 *\n*                  IBM Global Services                               *\n*                  877-343-1849 (voice)                              *\n*                  mailto:michaeljosephcleary@yahoo.com              *\n*                  http://www.geocities.com/michaeljosephcleary/     *\n*                                                                    *\n* Abend codes:     None                                              *\n*                                                                    *\n* Addressing mode: 31                                                *\n*                                                                    *\n* ASC mode:        Primary                                           *\n*                                                                    *\n* Change Log:                                                        *\n* 2007-03-15 - Version 1 Release 4 Modification 2                    *\n*              RIBETCBF - TCB Abending flag removed in z/OS 1.6      *\n*              Change default waiters to 0                           *\n*              Change default propagate to NO                        *\n*              Enhanced GQSCAN return code checking                  *\n*              Add RIBDMIN RIB detail minimum length (64KB)          *\n*              Add RIBDMAX RIB detail maximum length (256KB)         *\n*              Add RIBLMIN RIB list minimum length (4MB)             *\n*              Add RIBLMAX RIB list maximum length (20MB)            *\n* 2005-10-19 - Version 1 Release 4 Modification 1                    *\n* 2004-09-04 - Version 1 Release 4 Modification 0                    *\n* 2003-08-29 - Version 1 Release 3 Modification 0                    *\n*              Modified GQSCAN return code checking                  *\n*              Modified selection criteria manipulation              *\n*              Changed GRSSCSCO references from CL7 to CL8           *\n*              Add message - No Unknown Major Names                  *\n*              Add XSYS=NO as default to GQSCAN (GRSSCAN)            *\n*              Move Major Enqueue Tabble to $COMMON                  *\n* 1999-04-27 - Version 2 Release 6 Modification 0                    *\n*                                                                    *\n* Copyright:       Michael J. Cleary                                 *\n*                                                                    *\n* Control blocks:  Numerous                                          *\n*                                                                    *\n* CSECTs:          Numerous                                          *\n*                                                                    *\n* Dependencies:    None                                              *\n*                                                                    *\n* Disclaimer:      IBM neither expresses nor implies any warranty as *\n*                  to the fitness of these computer programs for any *\n*                  function.  The use of these programs or the       *\n*                  results therefrom is entirely at the risk of the  *\n*                  user.  Consequently, the user may modify these    *\n*                  programs in any way they thinks fit.  These       *\n*                  programs are Freeware and may be freely copied.   *\n*                  They may be freely distributed to any other party *\n*                  on condition that no inducement beyond reasonable *\n*                  handling costs is offered or accepted by either   *\n*                  side for such distribution.                       *\n*                                                                    *\n* DSECTs:          Numerous                                          *\n*                                                                    *\n* Entry points:    GRS                                               *\n*                                                                    *\n* Environment:     MVS/ESA, TSO, ISPF                                *\n*                                                                    *\n* Input:           Selection criteria                                *\n*                                                                    *\n* Key:             8                                                 *\n*                                                                    *\n* Language:        MVS 370 assembler                                 *\n*                                                                    *\n* Linkage:         Standard linkage for entry/exit                   *\n*                                                                    *\n* Location:        Private                                           *\n*                                                                    *\n* Macros:                                                            *\n*   Name     Description                                             *\n*   ======== ===========                                             *\n*   $COMMON  Common Macros                                           *\n*                                                                    *\n* Messages:        Numerous                                          *\n*                                                                    *\n* Mode:            Task                                              *\n*                                                                    *\n* Module type:     Procedure                                         *\n*                                                                    *\n* Output:          GRS queue information                             *\n*                                                                    *\n* Parameter list:  None                                              *\n*                                                                    *\n* Patch label:     None                                              *\n*                                                                    *\n* Reason codes:    None                                              *\n*                                                                    *\n* Recovery:        None                                              *\n*                                                                    *\n* Reentrancy:      Reentrant                                         *\n*                                                                    *\n* Registers:                                                         *\n*   Saved:         0-12,14-15 via SAVE(14,12)                        *\n*   Restored:      0-12,14 via RETURN(14,12),RC=(15)                 *\n*   Base:          11/12                                             *\n*   Dynamic work:  10                                                *\n*   Static work:   9                                                 *\n*                                                                    *\n* Return codes:                                                      *\n*   Zero - Normal                                                    *\n*                                                                    *\n* Residence mode:  Any                                               *\n*                                                                    *\n* Savearea:        Dynamically obtained storage 4KB                  *\n*                                                                    *\n* Serialization:   None                                              *\n*                                                                    *\n* Size:            Approximately 32KB                                *\n*                                                                    *\n* State:           Problem                                           *\n*                                                                    *\n* Tables:          Major queue name table                            *\n*                                                                    *\n* User exits:      None                                              *\n*                                                                    *\n* Virtual Storage:                                                   *\n*   RIB Detail 64KB-256KB in the extended private area               *\n*   RIB List   4MB-20MB   in the extended private area               *\n*                                                                    *\n* Wait states:     None                                              *\n*                                                                    *\n* X-memory mode:   HASID=PASID=SASID                                 *\n*                                                                    *\n**********************************************************************\n         TITLE '$COMMON - Common Macros'\n         PRINT OFF                 Stop source and object printing\n         COPY  $COMMON             Common Macros\n         PRINT ON                  Resume source and object printing\n         TITLE 'GRS - Mainline'\nGRS      $ENTRY DWA=(GRSDWA,R10,GRSDWA#), Entry                        X\n               SABNDRY=PAGE,SALENGTH=4096,                             X\n               SWA=(GRSSWA,R9)\n         GBLA  &GCOMMON            Common Macros Level\n         AIF   (&GCOMMON GE 11).COMMONOK\n         MNOTE 8,'$COMMON Macro Mismatch:  Required=11, Used=&GCOMMON'\n         AGO   .COMMONOK\n.COMMONOK      ANOP\nRIBDMIN  EQU   (64*1024)           RIB detail minimum length (64KB)\nRIBDMAX  EQU   (256*1024)          RIB detail maximum length (256KB)\nRIBLMIN  EQU   (4*1024*1024)       RIB list minimum length (4MB)\nRIBLMAX  EQU   (20*1024*1024)      RIB list maximum length (20MB)\n         GBLC  &GVRM               Version Release Modification (v.r.m)\n&GVRM    SETC '1.4.2'              Version Release Modification (v.r.m)\n         CALL  GRSINIT             Initialization\n         CLC   GRSMAXRC,=F'0'      OK ?\n         BNE   GRSNOPRO            . No\n         CALL  GRSPROC             Process\nGRSNOPRO EQU   *\n         CALL  GRSTERM             Termination\n         L     R15,GRSMAXRC        Maximum return code\n         B     GRSR                Exit\nGRS      $EXIT                     Exit\n         TITLE 'GRSEXPL - Explode'\nGRSEXPL  $ENTRY                    Entry\n         TBCREATE TABLE=GRS3,      Create table                        X\n               NAMES=(GRS3JOB,GRS3SYS,GRS3USA,GRS3STA)\n*\n**       Save Selection Criteria\n*\n         LA    R0,GRSSCSAV         Selection criteria save address\n         LA    R1,L'GRSSCSAV       Selection criteria save length\n         LA    R14,GRSSCSCO        Selection criteria address\n         LR    R15,R1              Selection criteria length\n         MVCL  R0,R14              Save selection criteria\n*\n**       Current ?\n*\n         CLI   GRS2LC,C'C'         Current ?\n         BE    EXPLSELC            . Yes\n         L     R4,GRS2PTR          RIB extent pointer\n         B     EXPLSELS\n*\n**       Process current\n*\nEXPLSELC EQU   *\n         MVC   GRSSCMAJ,GRS2MAJ    Major\n         MVC   GRSSCMIN,GRS2MIN    Minor\n         MVC   W_GQSCAN(L_GQSCAN),T_GQSCAN Copy GQSCAN parameter list\n         L     R15,GRSRDA          RIB detail address\n         ST    R15,W_GQSCAN+00     RIB detail address\n         L     R15,GRSRDL          RIB detail length\n         ST    R15,W_GQSCAN+04     RIB detail length\n         XC    GRSTOKEN,GRSTOKEN   Initailize GQSCAN token\n         CALL  GRSSCAN             Scan\n         L     R15,GRSRIBC         RIB count\n         LTR   R15,R15             RIB count ?\n         BNZ   EXPLOK              . Yes\n         MVC   ZEDSMSG,=CL24'Not Found'\n         MVC   ZEDLMSG,=CL80'Specified resources not found'\n         SETMSG MESSAGE=ISRZ001\n         B     EXPLGRS3            Exit - RC=0\nEXPLOK   L     R4,GRSRDA           RIB detail address\n         USING RIB,R4              RIB area\n         MVC   GRS2TO,RIBNTO       Tasks owning\n         MVC   GRS2TWE,RIBNTWE     Tasks waiting exclusive\n         MVC   GRS2TWS,RIBNTWS     Tasks waiting shared\nEXPLSELS LA    R5,40(R4)           RIB variable section\n         USING RIBVAR,R5           RIB variable section\n         LR    R6,R5\n         AH    R6,RIBVLEN          RIB variable section length\n         USING RIBE,R6             RIB extent\n         L     R8,RIBNRIBE         Extent count\nEXPLEXT  EQU   *\n         MVC   GRS3JOB,RIBEJBNM    Jobname\n         MVC   GRS3SYS,RIBESYSN    Sysname\nEXPLTYP0 EQU   *\n         MVC   GRS3USA,=CL9'Shared' Shared\n         TM    RIBERFLG,RIBETYPE   Type ?\n         BO    EXPLTYPX            . Shared\n         MVC   GRS3USA,=CL9'Exclusive'\nEXPLTYPX EQU   *\nEXPLSTA0 EQU   *\n         MVC   GRS3STA,=CL8'Owner' Owner\n         TM    RIBESFLG,RIBESTAT   Status ?\n         BO    EXPLSTAX            . Owner\n         MVC   GRS3STA,=CL8'Waiting'\nEXPLSTAX EQU   *\n         TBADD TABLE=GRS3          Add table entry\n         LA    R6,RIBEEND-RIBE(R6) Next extent\n         BCT   R8,EXPLEXT          Process next extent, if any\n*\n**       Major Description\n*\n         LA    R15,MAJORNUM        Major table size\n         L     R14,=A(TBLMAJOR)    Major table address\nCHKMAJOR EQU    *\n         CLC   GRS2MAJ,1(R14)      Major match ?\n         BE    GOTMAJOR            . Yes\n         LA    R14,MAJORLEN(R14)   Next major\n         BCT   R15,CHKMAJOR        Process next major, if any\nGOTMAJOR EQU   *\n         MVC   GRSMAJOR,9(R14)     Major\n         TBSORT TABLE=GRS3,        Sort table                          X\n               FIELDS=(GRS3JOB,C,A,GRS3SYS,C,A)\n         TBTOP TABLE=GRS3          Top of table\nGRSP003  TBDISPL TABLE=GRS3,       Display table                       X\n               PANEL=GRSP003\nEXPLGRS3 EQU   *                   Exit\n         TBEND TABLE=GRS3          Delete table\n*\n**       Restore Selection Criteria\n*\n         LA    R0,GRSSCSCO         Selection criteria address\n         LA    R1,L'GRSSCSAV       Selection criteria length\n         LA    R14,GRSSCSAV        Selection criteria save address\n         LR    R15,R1              Selection criteria save length\n         MVCL  R0,R14              Restore selection criteria\nGRSEXPL  $EXIT                     Exit\n         TITLE 'GRSINIT - Initialization'\nGRSINIT  $ENTRY                    Entry\n*\n**       Initialize ISPF Environment\n*\n         ISPFINIT                  Initialize ISPF environment\n*\n**       Define ISPF Variables\n*\n         VDEFINE NAMES=(GRSLEVEL),FORMAT=CHAR,LENGTH=5\n         VDEFINE NAMES=(GRSMAJOR),FORMAT=CHAR,LENGTH=32\n         VDEFINE NAMES=(GRSRDLKB),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(GRSRIBC),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(GRSRIBS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(GRSRLLKB),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(GRSSCJOB),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(GRSSCMAJ),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(GRSSCMIN),FORMAT=CHAR,LENGTH=255\n         VDEFINE NAMES=(GRSSCOWN),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(GRSSCPRO),FORMAT=CHAR,LENGTH=3\n         VDEFINE NAMES=(GRSSCREQ),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(GRSSCSCO),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(GRSSCSYS),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(GRSSCTYP),FORMAT=CHAR,LENGTH=7\n         VDEFINE NAMES=(GRSSCWAI),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(GRS2FLAG),FORMAT=CHAR,LENGTH=4\n         VDEFINE NAMES=(GRS2LC),FORMAT=CHAR,LENGTH=1\n         VDEFINE NAMES=(GRS2MAJ),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(GRS2MIN),FORMAT=CHAR,LENGTH=255\n         VDEFINE NAMES=(GRS2PTR),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(GRS2SCO),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(GRS2TO),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(GRS2TWE),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(GRS2TWS),FORMAT=FIXED,LENGTH=4\n         VDEFINE NAMES=(GRS3JOB),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(GRS3LC),FORMAT=CHAR,LENGTH=1\n         VDEFINE NAMES=(GRS3STA),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(GRS3SYS),FORMAT=CHAR,LENGTH=8\n         VDEFINE NAMES=(GRS3USA),FORMAT=CHAR,LENGTH=9\n*\n**       Obtain RIB List Storage\n*\n         STORAGE OBTAIN,LENGTH=(RIBLMAX,RIBLMIN),LOC=ANY\n         LTR   R15,R15             OK ?\n         BZ    INITRLOK            . Yes\n         MVC   ZEDSMSG,=CL24'Storage Not Obtained'\n         MVC   ZEDLMSG,=CL80'RIB List Storage Not Obtained'\n         SETMSG MESSAGE=ISRZ001\n         MVC   GRSMAXRC,=F'4'      Set maximum return code\n         B     GRSINIT4            Exit\nINITRLOK EQU   *\n         ST    R0,GRSRLL           RIB list length\n         ST    R1,GRSRLA           RIB list address\n         L     R15,GRSRLL          RIB list length\n         SRL   R15,10              Convert to KB\n         ST    R15,GRSRLLKB        RIB list length (KB)\n*\n**       Obtain RIB Detail Storage\n*\n         STORAGE OBTAIN,LENGTH=(RIBDMAX,RIBDMIN),LOC=ANY\n         LTR   R15,R15             OK ?\n         BZ    INITRDOK            . Yes\n         MVC   ZEDSMSG,=CL24'Storage Not Obtained'\n         MVC   ZEDLMSG,=CL80'RIB Detail Storage Not Obtained'\n         SETMSG MESSAGE=ISRZ001\n         MVC   GRSMAXRC,=F'4'      Set maximum return code\n         B     GRSINIT4            Exit\nINITRDOK EQU   *\n         ST    R0,GRSRDL           RIB detail length\n         ST    R1,GRSRDA           RIB detail address\n         L     R15,GRSRDL          RIB detail length\n         SRL   R15,10              Convert to KB\n         ST    R15,GRSRDLKB        RIB detail length (KB)\nGRSINIT  $EXIT                     Exit\n         TITLE 'GRSLIST - List'\nGRSLIST  $ENTRY                    Entry\n         TBCREATE TABLE=GRS2,      Create table                        X\n               NAMES=(GRS2MAJ,GRS2MIN,GRS2SCO,GRS2TO,GRS2TWE,GRS2TWS,GRX\n               S2FLAG,GRS2PTR)\n         XC    GRSCSEL,GRSCSEL     Initialize selected count\n         L     R7,GRSRIBC          RIB count\n         L     R4,GRSRLA           RIB list address\n         USING RIB,R4              RIB area\nLISTRIB  EQU   *                   Process RIB\n         ST    R4,GRS2PTR          RIB extent pointer\n         MVI   GRSJBFND,C'Y'       Job found (default)\n         CLI   GRSSCJOB,C' '       Job specified ?\n         BE    LISTRIB2            . No\n         MVI   GRSJBFND,C'N'       Job not found\nLISTRIB2 EQU   *                   PROCESS RIB\n         LA    R5,40(R4)           RIB variable section\n         USING RIBVAR,R5           RIB variable section\n         LR    R6,R5               RIB address\n         AH    R6,RIBVLEN          RIB variable section length\n         USING RIBE,R6             RIB extent\n         L     R8,RIBNRIBE         Extent count\n         TM    RIBSCOPE,RIBSYS     System ?\n         BNO   LISTSNO1            . No\n         MVC   GRS2SCO,=CL8'System' . Yes\n         B     LISTFLAG\nLISTSNO1 EQU   *\n         TM    RIBSCOPE,RIBSYSS    Systems ?\n         BNO   LISTSNO2            . No\n         MVC   GRS2SCO,=CL8'Systems' . Yes\n         B     LISTFLAG\nLISTSNO2 EQU   *\n         TM    RIBSCOPE,RIBSTEP    Step ?\n         BNO   LISTSNO3            . No\n         MVC   GRS2SCO,=CL8'Step'  . Yes\n         B     LISTFLAG\nLISTSNO3 EQU   *\nLISTFLAG EQU   *\n         $FILL GRS2FLAG,C' '       Initialize\n         TM    RIBERFLG,RIBEMC     Must complete ?\n         BNO   LISTFNOM            . No\n         MVI   GRS2FLAG+00,C'M'    Must complete\nLISTFNOM EQU   *\n         TM    RIBERFLG,RIBERESV   Reserve ?\n         BNO   LISTFNOR            . No\n         MVI   GRS2FLAG+01,C'R'    Reserve\nLISTFNOR EQU   *\n         TM    RIBERFLG,RIBERESC   Converted ?\n         BNO   LISTFNOC            . No\n         MVI   GRS2FLAG+02,C'C'    Converted\nLISTFNOC EQU   *\n         TM    RIBERFLG,RIBEAUTH   Authorized ?\n         BNO   LISTFNOA            . No\n         MVI   GRS2FLAG+03,C'A'    Authorized\nLISTFNOA EQU   *\n         MVC   GRS2MAJ,RIBQNAME    Major\n         $FILL GRS2MIN,C' '        Clear minor\n         SR    R15,R15             Minor length\n         IC    R15,RIBRNMLN        Minor length\n         $VLM  GRS2MIN,RIBRNAME,(R15) Minor\n         MVC   GRS2TO,RIBNTO       Tasks owning\n         MVC   GRS2TWE,RIBNTWE     Tasks waiting exclusive\n         MVC   GRS2TWS,RIBNTWS     Tasks waiting shared\nLISTEXT  EQU   *                   Process extent\n         CLI   GRSSCJOB,C' '       Job specified ?\n         BE    LISTJOB2            . No\n         $FIND GRSSCJOB,C' '       Find first blank\n         $VLC  GRSSCJOB,RIBEJBNM,(R15),DECREMENT=NO Match ?\n         BNE   LISTJOB2            . No\n         MVI   GRSJBFND,C'Y'       Job found\nLISTJOB2 EQU   *\n         LA    R6,RIBEEND-RIBE(R6) Next extent\n         BCT   R8,LISTEXT          Process next extent, if any\n         CLI   GRSSCJOB,C' '       Job specified ?\n         BE    LISTJOB3            . No\n         CLI   GRSJBFND,C'Y'       Job found ?\n         BNE   CONT4               . No\nLISTJOB3 EQU   *\n         TBADD TABLE=GRS2          Add table entry\n         $INCR GRSCSEL             Increment selected count\nCONT4    LR    R4,R6\n         BCT   R7,LISTRIB          Process next RIB, if any\n         L     R15,GRSCSEL         Selected count\n         LTR   R15,R15             Any selected ?\n         BNZ   LISTOK              . Yes\n         MVC   ZEDSMSG,=CL24'Not Found'\n         MVC   ZEDLMSG,=CL80'Specified resources not found'\n         SETMSG MESSAGE=ISRZ001\n         B     LISTTBEN            Exit\nLISTOK   EQU   *\n         L     R7,GRSRIBC          RIB count\n         S     R4,GRSRLA           Determine RIB list address used\n         SRL   R4,10               Convert to KB\n         LA    R4,1(R4)            Round up\n         ST    R4,GRSRIBS          RIB size\n         TBSORT TABLE=GRS2,        Sort table                          X\n               FIELDS=(GRS2MAJ,C,A,GRS2MIN,C,A)\n         TBTOP TABLE=GRS2          Top of table\nGRSP002  TBDISPL TABLE=GRS2,       Display table                       X\n               PANEL=GRSP002,                                          X\n               LC=(GRS2LC,C,GRSEXPL,S,GRSEXPL)\nLISTTBEN EQU   *\n         TBEND TABLE=GRS2          Delete table\nGRSLIST  $EXIT                     Exit\n         TITLE 'GRSMAJ - Major Audit'\nGRSMAJ   $ENTRY                    Entry\n*\n**       Save Selection Criteria\n*\n         LA    R0,GRSSCSAV         Selection criteria save address\n         LA    R1,L'GRSSCSAV       Selection criteria save length\n         LA    R14,GRSSCSCO        Selection criteria address\n         LR    R15,R1              Selection criteria length\n         MVCL  R0,R14              Save selection criteria\n*\n**       Process Major Audit\n*\n         MVC   GRSSCSCO,=CL8'ALL'  Scope - All\n         $FILL GRSSCSYS,C' '       System - Blank\n         MVC   GRSSCPRO,=CL3'NO'   GRSPlex - Propagate\n         MVC   GRSSCTYP,=CL7'BOTH' Type - Both reserves and enqueues\n         $FILL GRSSCJOB,C' '       Jobname - Blank\n         $FILL GRSSCMAJ,C' '       Major - Blank\n         $FILL GRSSCMIN,C' '       Minor - Blank\n         MVC   GRSSCREQ,=F'0'      Requestors - Zero\n         MVC   GRSSCOWN,=F'0'      Owners - Zero\n         MVC   GRSSCWAI,=F'0'      Waiters - Zero\n         MVC   W_GQSCAN(L_GQSCAN),T_GQSCAN Copy GQSCAN parameter list\n         L     R15,GRSRLA          RIB list address\n         ST    R15,W_GQSCAN+00     RIB list address\n         L     R15,GRSRLL          RIB list length\n         ST    R15,W_GQSCAN+04     RIB list length\n         XC    GRSTOKEN,GRSTOKEN   Initailize GQSCAN token\n         XC    GRSCMAJ,GRSCMAJ     Initailize Major count\n         CALL  GRSSCAN             Scan\n         TBCREATE TABLE=GRSMAJ,    Create table                        X\n               KEYS=(GRSSCMAJ)\n         XC    GRSCSEL,GRSCSEL     Initialize selected count\n         L     R7,GRSRIBC          RIB count\n         L     R4,GRSRLA           RIB list address\n         USING RIB,R4              RIB area\nMAJRIB   EQU   *                   Process RIB\n         ST    R4,GRS2PTR          RIB extent pointer\n         LA    R5,40(R4)           RIB variable section\n         USING RIBVAR,R5           RIB variable section\n         LR    R6,R5               RIB address\n         AH    R6,RIBVLEN          RIB variable section length\n         USING RIBE,R6             RIB extent\n         L     R8,RIBNRIBE         Extent count\n         MVC   GRSSCMAJ,RIBQNAME   Major\n*\n**       Major Description\n*\n         LA    R15,MAJORNUM        Major table size\n         L     R14,=A(TBLMAJOR)    Major table address\nCHKMAJ   EQU   *\n         CLC   GRSSCMAJ,1(R14)     Major match ?\n         BE    GOTMAJ              . Yes\n         LA    R14,MAJORLEN(R14)   Next major\n         BCT   R15,CHKMAJ          Process next major, if any\n         $INCR GRSCMAJ             Increment Major count\n         TBADD TABLE=GRSMAJ        Add table entry\nGOTMAJ   EQU   *\nMAJEXT   EQU   *                   Process RIB\n         LA    R6,RIBEEND-RIBE(R6) Next extent\n         BCT   R8,MAJEXT           Process next extent, if any\n         LR    R4,R6\n         BCT   R7,MAJRIB           Process next RIB, if any\n         L     R15,GRSCMAJ         Major count\n         LTR   R15,R15             Any ?\n         BNZ   MAJOK               . Yes\n         MVC   ZEDSMSG,=CL24'No Unknown Major Names'\n         MVC   ZEDLMSG,=CL80'No unknown major enqueue names found'\n         SETMSG MESSAGE=ISRZ001\n         B     MAJTBEN             Continue\nMAJOK    EQU   *\n         TBSORT TABLE=GRSMAJ,      Sort table                          X\n               FIELDS=(GRSSCMAJ,C,A)\n         TBTOP TABLE=GRSMAJ        Top of table\n         TBDISPL TABLE=GRSMAJ,     Display table                       X\n               PANEL=GRSMAJ\nMAJTBEN  EQU   *\n         TBEND TABLE=GRSMAJ        Delete table\n         $FILL ZCMD,C' '           Command line - blank\n*\n**       Restore Selection Criteria\n*\n         LA    R0,GRSSCSCO         Selection criteria address\n         LA    R1,L'GRSSCSAV       Selection criteria length\n         LA    R14,GRSSCSAV        Selection criteria save address\n         LR    R15,R1              Selection criteria save length\n         MVCL  R0,R14              Restore selection criteria\nGRSMAJ   $EXIT                     Exit\n         TITLE 'GRSPROC - Process'\nGRSPROC  $ENTRY                    Entry\n*\n**       Default Values\n*\n         MVC   GRSSCSCO,=CL8'ALL'  Scope - All\n         $FILL GRSSCSYS,C' '       System - Blank\n         MVC   GRSSCPRO,=CL3'NO'   GRSPlex - Propagate\n         MVC   GRSSCTYP,=CL7'BOTH' Type - Both reserves and enqueues\n         $FILL GRSSCJOB,C' '       Jobname - Blank\n         MVC   GRSSCMAJ,=CL8'SYSDSN' Major - SYSDSN\n         $FILL GRSSCMIN,C' '       Minor - Blank\n         MVC   GRSSCREQ,=F'0'      Requestors - Zero\n         MVC   GRSSCOWN,=F'0'      Owners - Zero\n         MVC   GRSSCWAI,=F'0'      Waiters - Zero\nGRS@PRIM DISPLAY PANEL=GRS@PRIM,   Selection criteria                  X\n               END=GRSPROC0,                                           X\n               PC=(ZCMD(5),AUDIT,GRSMAJ)\n         MVC   W_GQSCAN(L_GQSCAN),T_GQSCAN Copy GQSCAN parameter list\n         L     R15,GRSRLA          RIB list address\n         ST    R15,W_GQSCAN+00     RIB list address\n         L     R15,GRSRLL          RIB list length\n         ST    R15,W_GQSCAN+04     RIB list length\n         XC    GRSTOKEN,GRSTOKEN   Initailize GQSCAN token\n         CALL  GRSSCAN             Scan\n         C     R15,=XL4'00000000'  RC=00 Resource found ?\n         BNE   NOTRC00             . No\n         CALL  GRSLIST             List\n         B     GRS@PRIM            Selection criteria\nNOTRC00  EQU   *\n*\n**       Return Code / Reason Code\n*\n         LA    R15,RTNRSNNUM       Return / Reason table size\n         L     R7,=A(RTNRSNTBL)    Return / Reason table address\nCHKRTNRSN EQU   *\n         CLC   GRSRTNRSNCD,0(R7)   Return / Reason match ?\n         BE    GOTRTNRSN           . Yes\n         LA    R7,RTNRSNLEN(R7)    Next Return / Reason\n         BCT   R15,CHKRTNRSN       Process next Return / Reason, if any\nGOTRTNRSN EQU  *\n         MVC   ZEDSMSG(24),02(R7)   Short message\n         MVC   ZEDLMSG+00(08),=CL8'RTNCD=x\"' Return code\n         $HEX  ZEDLMSG+08,GRSRTNRSNCD+00,LEN=1 Return code\n         MVC   ZEDLMSG+10(10),=CL10'\" RSNCD=x\"' Reason code\n         $HEX  ZEDLMSG+20,GRSRTNRSNCD+01,LEN=1 Reason code\n         MVC   ZEDLMSG+22(02),=CL2'\" ' Reason code\n         MVC   ZEDLMSG+24(40),26(R7)   Long message\n         SETMSG MESSAGE=ISRZ001\n         B     GRS@PRIM            Selection criteria\nGRSPROC  $EXIT                     Exit\n         TITLE 'GRSSCAN - Scan'\nGRSSCAN  $ENTRY                    Entry\n*\n**       Major name\n*\n         CLI   GRSSCMAJ,C' '       Major specified ?\n         BE    MAJEND              . No\n         LA    R15,GRSSCMAJ        Major address\n         ST    R15,W_GQSCAN+08     Major address\n         $FIND GRSSCMAJ,C' ',DECREMENT=NO Find first blank\n         STCM  R15,B'0001',W_GQSCAN+47 Major length\n         OC    W_GQSCAN+45(1),=BL1'00000010' Major length specified\nMAJEND   EQU   *\n*\n**       Minor name\n*\n         CLI   GRSSCMIN,C' '       Minor specified ?\n         BE    MINEND              . No\n         LA    R15,GRSSCMIN        Minor address\n         ST    R15,W_GQSCAN+12     Minor address\n         $FIND GRSSCMIN,C' ',DECREMENT=NO Find first blank\n         STCM  R15,B'0001',W_GQSCAN+46 Minor length\n         OC    W_GQSCAN+45(1),=BL1'00000100' Generic minor\nMINEND   EQU   *\n*\n**       Sysname\n*\n         CLI   GRSSCSYS,C' '       Sysname specified ?\n         BE    SYSEND              . No\n         LA    R15,GRSSCSYS        Sysname address\n         ST    R15,W_GQSCAN+16     Sysname address\n         OC    W_GQSCAN+45(1),=BL1'10000000' Sysname specified\nSYSEND   EQU   *\n*\n**       Request count\n*\n         CLC   GRSSCREQ,=F'0'      Request count specified ?\n         BE    REQEND              . No\n         MVC   W_GQSCAN+24(4),GRSSCREQ Request count\n         OC    W_GQSCAN+45(1),=BL1'01000000' Request count specified\nREQEND   EQU   *\n*\n**       Owner count\n*\n         CLC   GRSSCOWN,=F'0'      Owner count specified ?\n         BE    OWNEND              . No\n         MVC   W_GQSCAN+28(4),GRSSCOWN Owner count\n         OC    W_GQSCAN+45(1),=BL1'00100000' Owner count specified\nOWNEND   EQU   *\n*\n**       Waitor count\n*\n         CLC   GRSSCWAI,=F'0'      Wait count specified ?\n         BE    WAIEND              . No\n         MVC   W_GQSCAN+32(4),GRSSCWAI Wait count\n         OC    W_GQSCAN+45(1),=BL1'00010000' Wait count specified\nWAIEND   EQU   *\n*\n**       Scope\n*\n         LA    R15,SCOPENUM        Scope table size\n         LA    R14,SCOPETBL        Scope table address\nCHKSCOPE EQU    *\n         CLC   GRSSCSCO,0(R14)     Scope match ?\n         BE    GOTSCOPE            . Yes\n         LA    R14,SCOPELEN(R14)   Next scope\n         BCT   R15,CHKSCOPE        Process next scope, if any\nGOTSCOPE EQU   *\n         NC    W_GQSCAN+44(1),=BL1'00000111' Clear scope\n         OC    W_GQSCAN+44(1),8(R14) Set scope\n*\n**       Reserve\n*\n         CLI   GRSSCTYP,C'B'       Reserves and enqueues specified ?\n         BE    RESEND              . Yes\n         CLI   GRSSCTYP,C'R'       Reserve specified ?\n         BE    RESRES              . No\n         CLI   GRSSCTYP,C'E'       Enqueue specified ?\n         BE    RESENQ              . Yes\n         B     RESEND\nRESRES   EQU   *\n         OC    W_GQSCAN+44(1),=BL1'00000010' Reserve specified\n         B     RESEND\nRESENQ   EQU   *\n         OC    W_GQSCAN+44(1),=BL1'00000100' Enqueue specified\n         B     RESEND\nRESEND   EQU   *\n*\n**       GRSPlex\n*\n         CLI   GRSSCPRO,C'Y'       GRSPlex Yes specified ?\n         BE    PLXYES              . Yes\n         CLI   GRSSCPRO,C'N'       GRSPlex No specified ?\n         BE    PLXNO               . Yes\n         B     PLXNO               Default to No\nPLXYES   EQU   *\n         NC    W_GQSCAN+45(1),=BL1'00000001' Set GRSPlex Yes specified\n         B     PLXEND\nPLXNO    EQU   *\n         OC    W_GQSCAN+45(1),=BL1'00000001' Set GRSPlex No specified\n         B     PLXEND\nPLXEND   EQU   *\n*\n**       Issue GQSCAN\n*\n         GQSCAN MF=(E,W_GQSCAN)    GQSCAN\n         ST    R1,GRSRIBC          RIB count\n         ST    R15,GRSRTNCD        GQSCAN Return Code\n         CLI   GRSRTNCD+3,X'00'    Return code 00 ?\n         BE    GRSNORSN            . Yes, skip reason code\n         CLI   GRSRTNCD+3,X'04'    Return code 04 ?\n         BE    GRSNORSN            . Yes, skip reason code\n         CLI   GRSRTNCD+3,X'08'    Return code 08 ?\n         BE    GRSNORSN            . Yes, skip reason code\n         CLI   GRSRTNCD+3,X'10'    Return code 10 ?\n         BE    GRSNORSN            . Yes, skip reason code\n         CLI   GRSRTNCD+3,X'14'    Return code 14 ?\n         BE    GRSNORSN            . Yes, skip reason code\n         ST    R0,GRSRSNCD         GQSCAN Reason Code\nGRSNORSN EQU   *\n         MVC   GRSRTNRSNCD+0(1),GRSRTNCD+3 GQSCAN Return Code\n         MVC   GRSRTNRSNCD+1(1),GRSRSNCD+3 GQSCAN Reason Code\n         B     GRSSCANR            Exit - RC=R15\nGRSSCAN  $EXIT                     Exit\n         TITLE 'GRSTERM - Termination'\nGRSTERM  $ENTRY                    Entry\n*\n**       Terminate ISPF Environment\n*\n         ISPFTERM                  Terminate ISPF environment\n*\n**       Release RIB List Storage\n*\n         L     R0,GRSRLL           RIB list length\n         STORAGE RELEASE,ADDR=GRSRLA,LENGTH=(0) Release RIB list\n         LTR   R15,R15             OK ?\n         BZ    TERMRLOK            . Yes\n         MVC   ZEDSMSG,=CL24'Storage Not Released'\n         MVC   ZEDLMSG,=CL80'RIB List Storage Not Released'\n         SETMSG MESSAGE=ISRZ001\n         MVC   GRSMAXRC,=F'4'      Set maximum return code\n         B     GRSTERM4            Exit\nTERMRLOK EQU   *\n*\n**       Release RIB Detail Storage\n*\n         L     R0,GRSRDL           RIB detail length\n         STORAGE RELEASE,ADDR=GRSRDA,LENGTH=(0) Release RIB detail\n         LTR   R15,R15             OK ?\n         BZ    TERMRDOK            . Yes\n         MVC   ZEDSMSG,=CL24'Storage Not Released'\n         MVC   ZEDLMSG,=CL80'RIB Detail Storage Not Released'\n         SETMSG MESSAGE=ISRZ001\n         MVC   GRSMAXRC,=F'4'      Set maximum return code\n         B     GRSTERM4            Exit\nTERMRDOK EQU   *\nGRSTERM  $EXIT                     Exit\n         TITLE 'GRSDWA - Dynamic Workarea'\nGRSDWA   DSECT                     Dynamic Workarea\nGRSCSEL  DS    F                   Count - Selected\nGRSJBFND DS    CL001               Job found\nGRSCMAJ  DS    F                   Major count\nGRSMAJOR DS    CL032               Major Description\nGRSRDA   DS    F                   RIB detail adress\nGRSRDL   DS    F                   RIB detail length\nGRSRDLKB DS    F                   RIB detail length (KB)\nGRSRIBC  DS    F                   RIB count\nGRSRIBS  DS    F                   RIB size\nGRSMAXRC DS    F                   Maximum Return Code\nGRSRLA   DS    F                   RIB list address\nGRSRLL   DS    F                   RIB list length\nGRSRLLKB DS    F                   RIB list length (KB)\nGRSTOKEN DS    F                   GQSCAN Token\nGRSRTNCD DS    F                   GQSCAN Return Code\nGRSRSNCD DS    F                   GQSCAN Reason Code\nGRSRTNRSNCD DS CL002               GQSCAN Return / Reason Code\n*\n**       Selection Criteria\n*\nGRSSCSCO DS    CL008               Selection Criteria - Scope\nGRSSCSYS DS    CL008               Selection Criteria - System\nGRSSCPRO DS    CL003               Selection Criteria - GRSPlex\nGRSSCTYP DS    CL007               Selection Criteria - Type\nGRSSCJOB DS    CL008               Selection Criteria - Job\nGRSSCMAJ DS    CL008               Selection Criteria - Major\nGRSSCMIN DS    CL255               Selection Criteria - Minor\nGRSSCREQ DS    F                   Selection Criteria - Requestors\nGRSSCOWN DS    F                   Selection Criteria - Owners\nGRSSCWAI DS    F                   Selection Criteria - Waiters\nGRSSCSAV DS    CL(*-GRSSCSCO)      Selection Criteria - Save\n*\n**\n*\nGRS2CRP  DS    CL008               ISPF Current Row Pointer\nGRS2FLAG DS    CL004               List - Flags\nGRS2LC   DS    CL001               ISPF Line Command\nGRS2MAJ  DS    CL008               List - Major\nGRS2MIN  DS    CL255               List - Minor\nGRS2PTR  DS    F                   List - RIB extent pointer\nGRS2SCO  DS    CL008               List - Scope\nGRS2SEL  DS    CL004               ISPF Selections\nGRS2TO   DS    F                   List - Tasks owning\nGRS2TWE  DS    F                   List - Tasks waiting exclusive\nGRS2TWS  DS    F                   List - Tasks waiting shrared\nGRS3CRP  DS    CL008               ISPF Current Row Pointer\nGRS3JOB  DS    CL008               Detail - Job\nGRS3LC   DS    CL001               ISPF Line Command\nGRS3SELS DS    CL004               ISPF Selections\nGRS3STA  DS    CL008               Detail - Status\nGRS3SYS  DS    CL008               Detail - System\nGRS3USA  DS    CL009               Detail - Usage\n         DS    0F                  Fullword alignment\nW_GQSCAN EQU   *                   GQSCAN parameter list\n         ORG   *+L_GQSCAN          GQSCAN parameter list length\n         ISPFVARS                  Define ISPF variables\nGRSDWA#  EQU   *-GRSDWA            Dynamic workarea length\n         TITLE 'GRSSWA - Static Workarea'\nGRSSWA   $ENTRY BASE=,DWA=,MODID=NO,SAVEMETH=NO,SWA=\nT_GQSCAN GQSCAN QUIT=NO,REQLIM=MAX,MF=L GQSCAN list\nL_GQSCAN EQU   *-T_GQSCAN          GQSCAN length\nGRSLEVEL DC    CL005'&GVRM'        Level\nRTNRSNTBL EQU *\n DC X'0400',CL24'Not Found',CL80'No resources matched request'\nRTNRSNLEN EQU  *-RTNRSNTBL         Scope table entry length\n DC X'0800',CL24'RIB Area Full',CL80'AREA parameter too small'\n DC X'0A04',CL24'Parameter Error',CL80'GRS address space not active'\n DC X'0A08',CL24'Parameter Error',CL80'AREA parameter too small'\n DC X'0A0C',CL24'Parameter Error',CL80'Mutually exclusive arguments'\n DC X'0A10',CL24'Parameter Error',CL80'Local lock error'\n DC X'0A14',CL24'Parameter Error',CL80'RESNAME parameter invalid'\n DC X'0A18',CL24'Parameter Error',CL80'ASID parameter invalid'\n DC X'0A1C',CL24'Parameter Error'\n DC         CL80'REQCNT mutually exclusive with OWNERCNT/WAITCNT'\n DC X'0A20',CL24'Parameter Error',CL80'SCOPE parameter invalid'\n DC X'0A28',CL24'Parameter Error',CL80'Storage protect key error'\n DC X'0A2C',CL24'Parameter Error',CL80'TOKEN parameter invalid'\n DC X'0A30',CL24'Parameter Error',CL80'Authorization error'\n DC X'0A34',CL24'Parameter Error'\n DC         CL80'QUIT=YES requires TOKEN parameter'\n DC X'0A38',CL24'Parameter Error',CL80'CMS lock error'\n DC X'0A3C',CL24'Parameter Error',CL80'Other lock error'\n DC X'0A40',CL24'Parameter Error',CL80'SRB mode error'\n DC X'0A44',CL24'Parameter Error',CL80'REQLIM parameter invalid'\n DC X'0A48',CL24'Parameter Error',CL80'REQCNT parameter invalid'\n DC X'0A4C',CL24'Parameter Error',CL80'OWNERCT parameter invalid'\n DC X'0A50',CL24'Parameter Error',CL80'WAITCNT parameter invalid'\n DC X'0A58',CL24'Parameter Error',CL80'MLACTIVE error'\n DC X'0C00',CL24'System Error',CL80'Unrecoverable error'\n DC X'0C04',CL24'System Error',CL80'Resuming ring/star error'\n DC X'0C08',CL24'System Error',CL80'Storage obtain error'\n DC X'0C0C',CL24'System Error',CL80'Sysplex error'\n DC X'0C10',CL24'System Error',CL80'Migrating ring/star error'\n DC X'0C14',CL24'System Error',CL80'Inconsistent data error'\n DC X'1000',CL24'Program Error',CL80'Specified system unknown'\n DC X'1400',CL24'Environmental Error',CL80'Environmental Error'\nRTNRSNNUM EQU  (*-RTNRSNTBL)/RTNRSNLEN Scope table entry count\n DC X'0000',CL24'Unknown Error',CL80'Unknown Error'\nSCOPETBL DC    CL008'STEP    ',BL1'10000000'\nSCOPELEN EQU   *-SCOPETBL          Scope table entry length\n         DC    CL008'SYSTEM  ',BL1'01000000'\n         DC    CL008'SYSTEMS ',BL1'00100000'\n         DC    CL008'ALL     ',BL1'11100000'\nSCOPENUM EQU   (*-SCOPETBL)/SCOPELEN Scope table entry count\n         DC    CL008'ALL     ',BL1'11100000' Default\n*\n**       Hexadecimal Table\n*\nTBLHEX   CSECT\n         DC    256X'00'            Assume all characters are invalid\n         ORG   TBLHEX+X'F0'        0 is valid\n         DC    1X'F0'              0 is valid\n         ORG   TBLHEX+X'F1'        1 is valid\n         DC    1X'F1'              1 is valid\n         ORG   TBLHEX+X'F2'        2 is valid\n         DC    1X'F2'              2 is valid\n         ORG   TBLHEX+X'F3'        3 is valid\n         DC    1X'F3'              3 is valid\n         ORG   TBLHEX+X'F4'        4 is valid\n         DC    1X'F4'              4 is valid\n         ORG   TBLHEX+X'F5'        5 is valid\n         DC    1X'F5'              5 is valid\n         ORG   TBLHEX+X'F6'        6 is valid\n         DC    1X'F6'              6 is valid\n         ORG   TBLHEX+X'F7'        7 is valid\n         DC    1X'F7'              7 is valid\n         ORG   TBLHEX+X'F8'        8 is valid\n         DC    1X'F8'              8 is valid\n         ORG   TBLHEX+X'F9'        9 is valid\n         DC    1X'F9'              9 is valid\n         ORG   TBLHEX+X'FA'        A is valid\n         DC    1X'C1'              A is valid\n         ORG   TBLHEX+X'FB'        B is valid\n         DC    1X'C2'              B is valid\n         ORG   TBLHEX+X'FC'        C is valid\n         DC    1X'C3'              C is valid\n         ORG   TBLHEX+X'FD'        D is valid\n         DC    1X'C4'              D is valid\n         ORG   TBLHEX+X'FE'        E is valid\n         DC    1X'C5'              E is valid\n         ORG   TBLHEX+X'FF'        F is valid\n         DC    1X'C6'              F is valid\n         TITLE 'Major Enqueue Table'\nTBLMAJOR $ENTRY BASE=,DWA=,MODID=NO,SAVEMETH=NO,SWA=\n         TBLMAJOR                  Major Enqueue Table\n         TITLE 'Resource Information Block (RIB)'\nRIB      DSECT                     Resource Information Block (RIB)\nRIB      ISGRIB                    Resource Information Block (RIB)\n         END\n//LINK    EXEC PGM=HEWL,PARM='MAP,LET,LIST',COND=(0,NE)\n//SYSLIN    DD DSN=&&OBJECT,DISP=(OLD,DELETE)\n//SYSLMOD   DD DISP=SHR,DSN=ZTGP01.MJCUTIL.LINKLIB(GRS) <= DESTINATION\n//SYSUT1    DD UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSPRINT  DD SYSOUT=*,OUTPUT=*.JESDS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GRS@PRIM": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x06\\x00\\x97\\x11_\\x01\\x07\\x07O\\x00\\x05\\x00.\\x00\\x13\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1997-04-25T00:00:00", "modifydate": "2007-03-15T00:05:06", "lines": 46, "newlines": 19, "modlines": 0, "user": "ZT15"}, "text": ")ATTR\n _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ)\n ! TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ) PAD(_)\n $ TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) JUST(LEFT)  COLOR(YELLOW)\n @ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)\n ~ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT)\n | TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n } TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n * TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(RED)\n # TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(TURQ)\n ` TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(YELLOW)\n % TYPE(TEXT)   INTENS(HIGH)\n + TYPE(TEXT)   INTENS(LOW)\n { TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(TURQ)\n)BODY EXPAND(\\\\)\n+\\ \\ GRS@Z    +Selection Criteria \\ \\\n}Command ===>_ZCMD\n+\n+Names\n  }System (SYSNAME=)  . . ._GRSSCSYS+                      +RIB List(KB)~Z     +\n  }Job  . . . . . . . . . ._GRSSCJOB+                    +RIB Detail(KB)~Z     +\n  }Major (RESNAME=qname)  ._GRSSCMAJ+\n  }Minor (RESNAME=rname)  ._GRSSCMIN                                           +\n+\n+Parameters\n  }Scope (SCOPE=) . . . . ._Z       +   }ALL,STEP,SYSTEM,SYSTEMS\n  }Plex-wide (XSYS=)  . . ._Z  +        }NO,YES\n  }Type (RESERVE=)  . . . ._Z      +    }BOTH,ENQ,RESERVE\n  }Requestors (REQCNT=) . ._Z    +      }0 thru 32768\n  }Owners (OWNERCT=)  . . ._Z    +      }0 thru 32768\n  }Waiters (WAITCNT=) . . ._Z    +      }0 thru 32768\n+\n+Enter}END+command to exit\n+\n+Primary Command}AUDIT+will list major names that are unknown to this program\n)INIT\n &Z1       = 'GRSLEVEL GRSRLLKB GRSRDLKB GRSSCSCO GRSSCPRO'\n &Z2       = 'GRSSCTYP GRSSCREQ GRSSCOWN GRSSCWAI'\n .ZVARS    = '(&Z1 &Z2)'\n .CURSOR  = GRSSCMIN\n)REINIT\n)PROC\n VER(&GRSSCPLX,LIST,NO,YES)\n VER(&GRSSCSCO,LIST,ALL,STEP,SYSTEM,SYSTEMS)\n VER(&GRSSCTYP,LIST,BOTH,RESERVE,ENQ)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GRSMAJ": {"ttr": 2060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x98\\x05/\\x01\\x04$\\x8f\\x16H\\x00\\x1f\\x00\\x1c\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1998-02-21T00:00:00", "modifydate": "2004-09-04T16:48:00", "lines": 31, "newlines": 28, "modlines": 0, "user": "ZT15"}, "text": ")ATTR\n _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ)\n ! TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ) PAD(_)\n $ TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) JUST(LEFT)  COLOR(YELLOW)\n @ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)\n ~ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT)\n | TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n } TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n * TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(RED)\n # TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(TURQ)\n ` TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(YELLOW)\n % TYPE(TEXT)   INTENS(HIGH)\n + TYPE(TEXT)   INTENS(LOW)\n { TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(TURQ)\n)BODY EXPAND(\\\\)\n+\\ \\ GRS@Z    +Unknown Major Names \\ \\\n}Command ===>_ZCMD\n\n  +Major\n)MODEL\n  @GRSSCMAJ\n)INIT\n .ZVARS = '(GRSLEVEL)'\n &M1      = '**************************'\n &M2      = '***** End of Resources ****'\n &ZTDMARK = '&M1&M2&M1'\n &AMT   = CSR\n &ZCMD  = ' '\n)REINIT\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GRSP002": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01O\\x00\\x00\\x00\\x97\\x11o\\x01\\x04$\\x8f\\x16H\\x00#\\x00\\x10\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.79", "flags": 0, "createdate": "1997-04-26T00:00:00", "modifydate": "2004-09-04T16:48:00", "lines": 35, "newlines": 16, "modlines": 0, "user": "ZT15"}, "text": ")ATTR\n _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ)\n ! TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ) PAD(_)\n $ TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) JUST(LEFT)  COLOR(YELLOW)\n @ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)\n ~ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT)\n | TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n } TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n * TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(RED)\n # TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(TURQ)\n ` TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(YELLOW)\n % TYPE(TEXT)   INTENS(HIGH)\n + TYPE(TEXT)   INTENS(LOW)\n { TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(TURQ)\n)BODY EXPAND(\\\\)\n+\\ \\ GRS@Z    +Resources \\ \\\n}Command ===>_ZCMD\n\n+Actions:   S-Select,C-Current    +RIB Count:~Z    +     RIB Size(KB):~Z   +\n  %Major    Minor                                        Scope     O WE WS Flags\n)MODEL\n!Z@GRS2MAJ @GRS2MIN                                     @GRS2SCO~Z  ~Z ~Z @Z\n)INIT\n .ZVARS = '(GRSLEVEL GRSRIBC GRSRIBS GRS2LC GRS2TO GRS2TWE GRS2TWS GRS2FLAG)'\n &M1      = '**************************'\n &M2      = '***** End of Resources ****'\n &ZTDMARK = '&M1&M2&M1'\n &AMT   = CSR\n &ZCMD  = ' '\n &GRS2LC =' '\n)REINIT\n &GRS2LC =' '\n)PROC\n VER(&GRS2LC,LIST,C,S)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GRSP003": {"ttr": 2307, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01$\\x00\\x00\\x00\\x97\\x12\\x7f\\x01\\x04$\\x8f\\x16I\\x00#\\x00\\x16\\x00\\x00\\xe9\\xe3\\xf1\\xf5@@@@@@'", "ispf": {"version": "01.36", "flags": 0, "createdate": "1997-05-07T00:00:00", "modifydate": "2004-09-04T16:49:00", "lines": 35, "newlines": 22, "modlines": 0, "user": "ZT15"}, "text": ")ATTR\n _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ)\n ! TYPE(INPUT)  INTENS(HIGH) CAPS(ON)  JUST(LEFT)  COLOR(TURQ) PAD(_)\n $ TYPE(OUTPUT) INTENS(HIGH) CAPS(OFF) JUST(LEFT)  COLOR(YELLOW)\n @ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)\n ~ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT)\n | TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n } TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(GREEN)\n * TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(RED)\n # TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(RIGHT) COLOR(TURQ)\n ` TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(YELLOW)\n % TYPE(TEXT)   INTENS(HIGH)\n + TYPE(TEXT)   INTENS(LOW)\n { TYPE(TEXT)   INTENS(LOW)  CAPS(OFF) JUST(LEFT)  COLOR(TURQ)\n)BODY EXPAND(\\\\)\n+\\ \\ GRS@Z    +Resource Detail \\ \\\n}Command ===>_ZCMD\n\n  %Major    Description                                  Scope     O WE WS Flags\n  @GRS2MAJ @GRSMAJOR                                    @GRS2SCO~Z  ~Z ~Z @Z\n  %Minor\n  @GRS2MIN\n+\n  %Job      System   Usage      Status\n)MODEL\n  @GRS3JOB @GRS3SYS @GRS3USA   @GRS3STA\n)INIT\n .ZVARS = '(GRSLEVEL GRS2TO GRS2TWE GRS2TWS GRS2FLAG)'\n &M1      = '**************************'\n &M2      = '****** End of Details *****'\n &ZTDMARK = '&M1&M2&M1'\n &AMT   = CSR\n &ZCMD  = ' '\n)REINIT\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT297/FILE297.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT297", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}