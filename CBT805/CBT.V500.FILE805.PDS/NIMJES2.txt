NIMJES2  TITLE 'JES2 subtask for the sub-agent      BY M.SCHMUTZOK'
*PROCESS USING(WARN(15))
         ACONTROL CPAT(NOSYSL,NOCASE)
**********************************************************************
*  (C)   Copyright Shands HealthCare, 2009                           *
*  Program was written by:                                           *
*    Michael Schmutzok                                               *
*    Sr. Systems Programmer                                          *
*    Shands HealthCare                                               *
*    Information Services                                            *
*    1329 SW 16th St, Room 3150                                      *
*    Gainesville, FL  32608-1128                                     *
*    mailto:schmum@shands.ufl.edu                                    *
*    352.265.7982          (fax)                                     *
*    352.265.8317  x85465  (voice)                                   *
**********************************************************************
*                                                                    *
*  MODULE NAME:  NIMJES2                                             *
*                                                                    *
*                                                                    *
*  DESCRIPTIVE NAME:  SNMP SUBAGENT FOR NIMBUS                       *
*                                                                    *
*  FUNCTION: THIS MODULE IS UNDER CONSTRUCTION. FUTURE USES MAY      *
*            INCLUDE:                                                *
*                                                                    *
*            - Spool volume utilization                              *
*                                                                    *
*  OPERATION: THE FOLLOWING ACTIONS ARE TAKEN BY THIS MODULE:        *
*      1) INITIALIZE THE SUB-TASK CONTROL BLOCK                      *
*      2) ESTABLISH THE ESTAE ENVIRONMENT                            *
*      3) SET THE TIMER                                              *
*      4) WAIT FOR TIMER POP OR AGENT POST                           *
*      5) EXECUTE SYSTEM REXX EXEC 'QUERYJES' TO GET JOE AND JQE     *
*         VALUES                                                     *
*      6) UPDATE THE MIB VALUES                                      *
*                                                                    *
*  DEPENDENCIES: IF USING THE SNAP FUNCTION FOR DEBUGGING, MAKE      *
*                SURE THE PCCSSNAP MODULE IS IN THE STEPLIB OR       *
*                LINKLIST TO PREVENT S806 ABEND                      *
*                                                                    *
*  RESTRICTIONS: NONE                                                *
*                                                                    *
*  REGISTER CONVENTIONS:                                             *
*                                                                    *
*          STANDARD ENTRY LINKAGE                                    *
*                                                                    *
*          R0 AND R1 USED FOR SYSTEM SERVICE INVOCATION              *
*          R2 THROUGH R6 ARE WORK REGISTERS                          *
*          R7 AGCB ADDRESSING                                        *
*          R8 THROUGH R9 ARE WORK REGISTERS                          *
*          R10 AGCB ADDRESSING                                       *
*          R11 IS A WORK REGISTERS                                   *
*          R12 IS THE BASE REGISTER                                  *
*                                                                    *
*                                                                    *
*  INPUT:  None                                                      *
*                                                                    *
*  OUTPUT: UPDATED MIB VALUES                                        *
*                                                                    *
*  RETURN CODES = 0  NORMAL TERMINATION                              *
*                                                                    *
*  CHANGES:                                                          *
*    1/30/09 - Added code to execute the system REXX exec, QUERYJES. *
*              This exec must reside in SYS1.SAXREXEC. The exec      *
*              will issue the $DJOBDEF and $DOUTDEF commands to      *
*              extract the JOE and JQE values.                       *
*                                                                    *
**********************************************************************
         SPACE 1
         PRINT ON,GEN,NODATA
         SPACE 1
NIMJES2  CSECT ,                       Establish the NIMJES2 csect
         SPACE 1
         USING *,R15
         SPACE 1
NIMJES2  MODID                         Est. module identification
         STM   R14,R12,12(R13)         Save the caller's registers
         LR    R12,R15                 Setup the local base register
         DROP  R15
         USING NIMJES2,R12             Est. code addressability
         LR    R7,R1                   Save the AGCB address
         USING AGCB,R7                 Establish AGCB addr.
         LA    R15,NIMJ000             Prepare for the BSM
         O     R15,=X'80000000'        Indicate AMODE=31
         BSM   R0,R15                  Set the AMODE, continue on
NIMJ000  DS    0H
         MODESET KEY=NZERO,            Get into supervisor state       C
               MODE=SUP
         GETMAIN RC,                   Allocate STCB                   C
               LV=STCBLEN,                                             C
               SP=230,                                                 C
               LOC=ANY
         LTR   R15,R15                 Successful GETMAIN ...
         BZ    NIMJ010                  Yes, skip ABEND and continue
         ABEND 666,,,USER              Term the subtask (not the agent)
NIMJ010  DS    0H
         LR    R10,R1                  Set STCB addressability
         USING STCB,R10                Establish global addr. for      C
                                        the STCB
         LR    R2,R10                  Zero the
         LA    R3,STCBLEN               new subtask
         MVCL  R2,R14                    control block
         MVC   STCBID,=C'STCB'         Set the eye catcher
         MVC   STCBMN,=C'NIMJES2 '     Set the module name
         SPACE 1
         ST    R7,STCBAGCB             Save the AGCB address
         LA    R15,STCBSAVE            Perform
         ST    R13,4(,R15)               save
         ST    R15,8(,R13)                 area
         LR    R13,R15                       linkage
***********************************************************************
*        SET UP ESTAE ROUTINE                                         *
***********************************************************************
         MVC   STCBMPL(NIMEPLL),NIMEPL Copy list form ESTAE
         L     R2,=V(NIMESTA)          Get the ESTAE routine address
         ESTAE (2),                    Establish the ESTAE exit        C
               MF=(E,STCBMPL),                                         C
               PARAM=(R10)
         MVC   STCBMPL(WTO1L),WTO1 Copy the WPL for message 1
         WTO   MF=(E,STCBMPL)          Issue message to operator
***********************************************************************
*        INITIALIZATION                                               *
***********************************************************************
         MVC   JESSPLU(3),=X'090003'   jessplu - DspStr, len=3
         MVC   JESJOEU(3),=X'090003'   jesjoeu - DspStr, len=3
         MVC   JESJQEU(3),=X'090003'   jesjqeu - DspStr, len=3
         XC    MyVarLst,MyVarLst       Clear the VarLst header
         XC    MyVarEn1,MyVarEn1       Clear the Var entry
         XC    MyVarEn2,MyVarEn2       Clear the Var entry
         LA    2,MyVarLst              Point to my variable list
         USING AxrArgLst,2             Addressability
         MVC   AxrArgLstId,MyAxrVarLstAcro Indicate VAR list type
         LA    5,AxrArgLstCurVer       Version = 0
         ST    5,AxrArgLstVer          Initialize the version
         L     5,kNumVars              Obtain the number of variables
         STH   5,AxrArgLstNumber       Store the number of variables
         DROP  2
         LA    2,MyVarEn1              1st var entry
         USING AxrArgEntry,2           Addressability
         LA    5,JOEINT                field to store value
         ST    5,AXRARGADDRLOW         Store output argument
         LA    5,VarName1              name of field to store value
         ST    5,AXRARGNameADDRLOW     Store addr of name of output var
         MVI   AxrArgNameLength,L'VarName1 len of field to store value
         OI    AXRARGINPUTFLGS1,AXRARGOutput   Indicate output var
         MVI   AxrArgType,AxrArgTypeChar       Indicate char string
         LA    5,L'JOEINT              Obtain length (in bytes)
         SLL   5,1                     Mult by 2 - length is in hex    C
                                       digits (not bytes)
         ST    5,AxrArgLength          Store length in var entry
         DROP 2
         LA  2,MyVarEn2                2nd var entryy
         USING AxrArgEntry,2           Addressability
         LA  5,JQEINT                  field to store value
         ST  5,AXRARGADDRLOW           Store output argument
         LA  5,VarName2                name of field to store value
         ST  5,AXRARGNameADDRLOW       Store addr of name of output var
         MVI AxrArgNameLength,L'VarName2 len of field to store value
         OI  AXRARGINPUTFLGS1,AXRARGOutput   Indicate output var
         MVI AxrArgType,AxrArgTypeChar       Indicate char string
         LA  5,L'JQEINT                Obtain length (in bytes)
         SLL 5,1                       Mult by 2 - length is in hex    *
                                       digits (not bytes)
         ST  5,AxrArgLength            Store length in var entry
         OI    INITFLAG,JES2BIT        Show that we're initialized
***********************************************************************
*        SET UP TIMER                                                 *
***********************************************************************
TIMESET  DS    0H
         XC    STCBTECB,STCBTECB       Clear the timer ECB
         TM    STCBFLG1,STCB1TIM       STIMERM set?
         BO    WAIT                      yes, go finish wait
         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM
         LA    R4,STCBTMID             Point to STIMERD id word area
         LA    R5,AGCBJINT             Get the timer interval address
         LA    R6,STCBTECB             Get addr of ECB addr
         ST    R6,STCBCOMA             Save it
         OI    STCBFLG1,STCB1TIM       Indicate timer outstanding ...
         STIMERM SET,                  Set/reset NPRO timer            C
               DINTVL=(R5),                                            C
               ID=(R4),                                                C
               EXIT=TIMEXIT,                                           C
               PARM=STCBCOMA,                                          C
               MF=(E,STCBMPL)
***********************************************************************
*        WAIT FOR TIMER POP OR POST FROM AGENT                        *
***********************************************************************
WAIT     DS    0H
         LA    R4,STCBTECB             Point to timer ECB
         ST    R4,STCBTEP              Save it in list
         LA    R4,AGCBECBJ             Point to communication ECB
         ST    R4,STCBCEP              Save it in list
         OI    STCBCEP,X'80'           Indicate end of ECB list
         WAIT  1,                      Wait for something to post      C
               ECBLIST=STCBECBL,                                       C
               LONG=YES
         TM    AGCBECBJ,X'40'          Did we get posted by the agent?
         BO    EXIT                     Yes, assume shutdown for now
         TM    STCBTECB,X'40'          Did the timer pop?
         BZ    TIMESET                  No, don't know, go wait again
***********************************************************************
*        MIB UPDATE                                                   *
***********************************************************************
MIBUPDT  DS    0H
*        WTO   'JES2 METRICS ROUTINE'
         MVC   STCBMPL(STCBAPLL),AXREXX Copy list form AXREXX
         AXREXX REQUEST=EXECUTE,       Call system REXX                C
               NAME=kEXECNAME,         Exec name (QUERYJES)            C
               TIMELIMIT=NO,           No time limit                   C
               REXXVARS=MyVarLst,      My variable list                C
               REXXDIAG=MyAxrDiag,     Diagnostic area for errors      C
               SYNC=YES,               Synchronize                     C
               RETCODE=OutRC,          field to store return code      C
               RSNCODE=OutRsn,         field to store reason code      C
               MF=(E,STCBMPL)
         LTR   15,15                   AXREXX failure?
         JNZ   FailLabel                 yes, go tell us
         LA    2,MyAxrDiag               no, let's check the diag area
         USING AxrDiag,2               Diagnostic area addressability
         TM    AxrDiagFlgs1,AxrDiagNoExecRetCode Exec rc unattainable?
         JNZ   FailLabel                 yes, go tell us
         L     15,AxrDiagExecRetCode     no, load exec return code
         LTR   15,15                   Bad exec return code?
         JNZ   FailLabel                 yes, go tell us
         MVC   JESJOEU+3(3),JOEINT     Update the MIB
         MVC   JESJQEU+3(3),JQEINT     Update the MIB
         XI    STCBFLG1,STCB1TIM       clear timer flag
         B     TIMESET                 Go wait for next interval
***********************************************************************
*        TIMER EXIT                                                   *
***********************************************************************
TIMEXIT  DS    0H
         STM   R14,R12,4(R13)          Save regs
         LR    R4,R1                   Save parameter
         L     R5,4(R1)                Point to TIMEECB
         POST  (R5)                    Post the event
         LM    R14,R12,4(R13)          Load regs
         BR    R14                     Return
*****************************
*****   EXIT ROUTINES   *****
*****************************
EXIT     DS    0H
         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM
         LA    R4,STCBTMID             Point to STIMERD id word area
         STIMERM CANCEL,               Cancel timer                    C
               ID=(R4),                                                C
               MF=(E,STCBMPL)
         MVC   STCBMPL(WTO2L),WTO2     Copy the WPL for message 2
         WTO   MF=(E,STCBMPL)          Issue message to operator
         L     R9,4(,R13)              Get high save (last SACB ref)
         FREEMAIN RU,                  Free the STCB                   C
               LV=STCBLEN,                                             C
               A=(10),                                                 C
               SP=230
         LR    R13,R9                  Get high save area address
         RETURN (14,12),RC=0           Return to MVS, terminate subtask
******************************
*****   ERROR ROUTINES   *****
******************************
FailLabel DS   0H
         MVC   STCBMPL(WTO3L),WTO3     Copy the WPL for message 3
         LA    R2,STCBMPL              Point to dynamic area
         L     R3,OutRC                Load RC
         CVD   R3,STCBDWD              Convert it to decimal
         UNPK  WTO3RC(8,R2),STCBDWD+4(4) Unpack it
         OI    WTO3RC+7(R2),X'F0'      Correct the sign
         MVC   STCBDWD+3(4),OutRsn     Move reason code to work area
         UNPK  WTO3RS(9,R2),STCBDWD+3(5) Unpack it to msg
         MVI   WTO3RS+8(R2),C' '       Clear out that packed sign
         TR    WTO3RS(8,R2),TABLE      Make hex viewable
         WTO   MF=(E,STCBMPL)          Issue message to operator
         BAL   R8,SNAPRTN              Snap the control blocks
         B     TIMESET                 Go do it all over again
SNAPRTN  DS    0H
         STM   R2,R3,REGSAVE           Save regs
         LA    R2,STCBTECB             Start of STCB
         LA    R3,OutRsn               End of STCB
         LA    R4,AGCBJTCB             Start of AGCB
         LA    R5,AGCBECBJ             End of AGCB
         MVC   STCBMPL(NIMLPLL),NIMLPL  COPY LIST FORM LINK
         LINK  EP=PCCSSNAP,PARAM=((R2),(R3),(R4),(R5)),VL=1,           C
               MF=(E,STCBMPL)
         LM    R2,R3,REGSAVE           Reload regs
         BR    R8                      Return whence we came
         EJECT
**************************************************
***   S T O R A G E    D E F I N I T I O N S   ***
**************************************************
         EJECT
R0       EQU   0                   Register
R1       EQU   1                     equates
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
VarName1 DC    C'joeint'               6
VarName2 DC    C'jqeint'               6
kNumVars DC    F'2'                    4
MyAxrVarLstAcro DC AL4(AxrVarLstAcro)  4
kExecName DC   CL8'QUERYJES'           8
NIMLPL   LINK  EP=PCCSSNAP,SF=L
NIMLPLL  EQU   *-NIMLPL
NIMEPL   ESTAE *-*,TERM=YES,       List form ESTAE parmlist            C
               RECORD=YES,PARAM=*-*,MF=L
NIMEPLL  EQU   *-NIMEPL
NIMTPL   STIMERM SET,MF=L
NIMTPLL  EQU   *-NIMTPL
WTO1     WTO   'NMJS100I JES2 PROBE INITIALIZATION COMPLETE',ROUTCDE=(1C
               ,10),MF=L
WTO1L    EQU   *-WTO1
WTO2     WTO   'NMJS199I JES2 PROBE TERMINATION COMPLETE',ROUTCDE=(1,10C
               ),MF=L
WTO2L    EQU   *-WTO2
WTO3     WTO   'NMJS101E AXREXX ERROR, RETCODE= xxxxxxxx, RSNCODE= xxxxC
               xxxx ',ROUTCDE=(1,10),MF=L
WTO3L    EQU   *-WTO3
WTO3RC   EQU   WPLTXT-WPL+32,8
WTO3RS   EQU   WPLTXT-WPL+51,8
AXREXX   AXREXX MF=(L,DAXREXX)
         ORG   *-240
TABLE    EQU   *
         DS    240C
         DC    C'0123456789ABCDEF'
         LTORG
         EJECT
*************************
*** DYNAMIC WORK AREA ***
*************************
         TITLE 'SUB TASK APPLICATION CONTROL BLOCK'
         NIMSTCB ,                 GENERATE STCB DSECT
         TITLE 'AGENT CONTROL BLOCK (AGCB)'
         NIMAGCB ,                 GENERATE AGCB DSECT
         EJECT
         IEZWPL ,                  Generate MVS WPL dsect
         EJECT
NIMJES2L EQU   *-NIMJES2
         END NIMJES2
