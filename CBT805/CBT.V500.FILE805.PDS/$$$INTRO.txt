SNMP Overview

  SNMP is an acronym that stands for Simple Network Management
  Protocol and is part of the TCP/IP protocol suite that is
  included in the z/OS Communications Server IP.  SNMP is a set
  of protocols that describes management data and the protocols
  for exchanging that data between heterogeneous systems. The
  protocols include both the description of the management data,
  defined in the Management Information Base (MIB), and the
  operations for exchanging or changing that information. By
  implementing common protocols, management data can be exchanged
  between different platforms with relative ease.

  SNMP is based on the manager/agent model consisting of an SNMP
  manager, an SNMP agent, a database of management information,
  managed SNMP devices and the network protocol. The SNMP manager
  provides the interface between the human network manager and
  the management system. The SNMP agent provides the interface
  between the manager and the physical device(s) being managed.

  The SNMP manager and agent use an SNMP Management Information
  Base (MIB) and a relatively small set of commands to exchange
  information. The SNMP MIB is organized in a tree structure with
  individual variables, such as point status or description,
  being represented as leaves on the branches. A long numeric tag
  or object identifier (OID) is used to distinguish each variable
  uniquely in the MIB and in SNMP messages.

  SNMP uses five basic messages (GET, GET-NEXT, GET-RESPONSE,
  SET, and TRAP) to communicate between the SNMP manager and the
  SNMP agent. The GET and GET-NEXT messages allow the manager to
  request information for a specific variable.  The agent, upon
  receiving a GET or GET-NEXT message, will issue a GET-RESPONSE
  message to the SNMP manager with either the information
  requested or an error indication as to why the request cannot
  be processed. A SET message allows the SNMP manager to request
  a change be made to the value of a specific variable in the
  case of an alarm remote that will operate a relay. The SNMP
  agent will then respond with a GET-RESPONSE message indicating
  the change has been made or an error indication as to why the
  change cannot be made. The SNMP TRAP message allows the agent
  to spontaneously inform the SNMP manager of an "important"
  event.

  Most of the messages (GET, GET-NEXT, and SET) are only issued
  by the SNMP manager. Because the TRAP message is the only
  message capable of being initiated by an SNMP agent, it is the
  message used by DPS Remote Telemetry Units (RTUs) to report
  alarms. This notifies the SNMP manager as soon as an alarm
  condition occurs, instead of waiting for the SNMP manager to
  ask.

SNMP and Shands (the Hospital at the University of Florida)

  Recently, Shands bought an Enterprise monitoring software
  package called NimBUS from a company called NimSoft. We use the
  software to monitor hardware and software applications. Various
  metrics (information) are interrogated at regular intervals and
  alerts sent out to the responsible parties when threshold
  levels are exceeded or error conditions are detected.
  Unfortunately, the product was never designed with the
  mainframe in mind. However, the product uses SNMP extensively
  to query data and receive SNMP traps so I was able to exploit
  this by writing my own sub-agent and monitoring programs. Much
  of the alerting I do is designed to relieve the operator from
  having to a) detect an error condition and b) notify us of the
  error. With the sub-agent, console monitoring program, and our
  Enterprise monitoring system, we are able to be paged and/or
  emailed immediately whenever a system critical condition
  arises. Early detection greatly decreases our chances of a
  downtime.

NIMBCONS
  The monitoring program is basically a software system console.
  All console messages are received by the program and for select
  messages, an SNMP trap is sent out which our monitoring
  software intercepts and sets an alert. Currently, we are
  monitoring the following error messages:

  IGD17380I STORAGE GROUP (sgname) IS ESTIMATED AT xx% OF CAPACITY
  DFHSM0131 applid CICS is under stress (short on storage below 16MB)
  DFHSM0133 applid CICS is under stress (short on storage above 16MB)
  DFHSM0102 applid A storage violation has been detected by...
  DFHSM0103 applid A storage violation has been detected by...

NIMAGENT
  The sub-agent that I wrote interrogates several sub-systems and
  collects data.  This data is queried by the monitoring software
  and alerts are generated if need be. Currently, I collect or
  plan to collect:

  NIMSYS  - CPU utilization, Hardware Model, Last IPL Date, Last
            IPL Time, LPAR Name, OS Product Name, OS Product
            Version
  NIMJES  - JES2 JOE utilization, Jes2 JQE utilization. Future
            enhancements will include SPOOL utilization
  NIMHSM  - Future enhancement will include
            MCDS/BCDS/OCDS/Journal free space, function statuses
  NIMEXST - Check on the existence of critical started tasks,
            Jobs, DB2 regions, etc.
  NIMDASD - Future enhancement will include mirroring status,
            storage group free space

