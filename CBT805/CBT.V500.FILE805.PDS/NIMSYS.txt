NIMSYS   TITLE 'System subtask for the sub-agent      BY M.SCHMUTZOK'
*PROCESS USING(WARN(15))
         ACONTROL CPAT(NOSYSL,NOCASE)
**********************************************************************
*  (C)   Copyright Shands HealthCare, 2009                           *
*  Program was written by:                                           *
*    Michael Schmutzok                                               *
*    Sr. Systems Programmer                                          *
*    Shands HealthCare                                               *
*    Information Services                                            *
*    1329 SW 16th St, Room 3150                                      *
*    Gainesville, FL  32608-1128                                     *
*    mailto:schmum@shands.ufl.edu                                    *
*    352.265.7982          (fax)                                     *
*    352.265.8317  x85465  (voice)                                   *
**********************************************************************
*                                                                    *
*  MODULE NAME:  NIMSYS                                              *
*                                                                    *
*                                                                    *
*  DESCRIPTIVE NAME:  SNMP SUBAGENT FOR NIMBUS                       *
*                                                                    *
*  FUNCTION: THIS SUBTASK WILL EXTRACT VARIOUS ITEMS OF DATA FOR     *
*            QUERYING BY NIMBUS. IT WILL ALSO MONITOR THE CPU        *
*            UTILIZATION. CURRENT INFO AVAILABLE THROUGH THIS        *
*            SUBTASK IS:                                             *
*            SYSID   - SYSTEM ID                                     *
*            CPUMDL  - CPU MODEL                                     *
*            PRODNM  - PRODUCT NAME                                  *
*            PRODVER - PRODUCT VERSION                               *
*            IPLDATE - LAST IPL DATE                                 *
*            IPLTIME - LAST IPL TIME                                 *
*            SYSSTAT - SYSTEM STATUS (USED TO PUT SYSTEM IN 'MAINT'  *
*                      MODE FOR LEGIMATE DOWNTIMES)                  *
*                                                                    *
*  OPERATION: THE FOLLOWING ACTIONS ARE TAKEN BY THIS MODULE:        *
*      1) INITIALIZE THE SUB-TASK CONTROL BLOCK                      *
*      2) ESTABLISH THE ESTAE ENVIRONMENT                            *
*      3) SET THE TIMER                                              *
*      4) WAIT FOR TIMER POP OR AGENT POST                           *
*      5) UPDATE THE MIB VALUES                                      *
*                                                                    *
*  DEPENDENCIES: IF USING THE SNAP FUNCTION FOR DEBUGGING, MAKE      *
*                SURE THE PCCSSNAP MODULE IS IN THE STEPLIB OR       *
*                LINKLIST TO PREVENT S806 ABEND                      *
*                                                                    *
*  RESTRICTIONS: NONE                                                *
*                                                                    *
*  REGISTER CONVENTIONS:                                             *
*                                                                    *
*          STANDARD ENTRY LINKAGE                                    *
*                                                                    *
*          R0 AND R1 USED FOR SYSTEM SERVICE INVOCATION              *
*          R2 THROUGH R6 ARE WORK REGISTERS                          *
*          R7 AGCB ADDRESSING                                        *
*          R8 THROUGH R9 ARE WORK REGISTERS                          *
*          R10 AGCB ADDRESSING                                       *
*          R11 IS A WORK REGISTERS                                   *
*          R12 IS THE BASE REGISTER                                  *
*                                                                    *
*                                                                    *
*  INPUT:  None                                                      *
*                                                                    *
*  OUTPUT: UPDATED MIB VALUES                                        *
*                                                                    *
*  RETURN CODES = 0  NORMAL TERMINATION                              *
*                                                                    *
**********************************************************************
         SPACE 1
         PRINT ON,GEN,NODATA
         SPACE 1
NIMSYS   CSECT ,                   Establish the NIMSYS csect
         SPACE 1
         USING *,R15
         SPACE 1
NIMSYS   MODID                     Est. module identification
         STM   R14,R12,12(R13)     Save the caller's registers
         LR    R12,R15             Setup the local base register
         DROP  R15
         USING NIMSYS,R12          Est. code addressability
         LR    R7,R1               Save the AGCB address
         USING AGCB,R7             Establish AGCB addr.
         LA    R15,NIMS000         Prepare for the BSM
         O     R15,=X'80000000'    Indicate AMODE=31
         BSM   R0,R15              Set the AMODE, continue on
NIMS000  DS    0H
         MODESET KEY=NZERO,        Get into supervisor state           C
               MODE=SUP
         GETMAIN RC,               Allocate STCB                       C
               LV=STCBLEN,                                             C
               SP=230,                                                 C
               LOC=ANY
         LTR   R15,R15             Successful GETMAIN ...
         BZ    NIMS010              Yes, skip ABEND and continue
         ABEND 666,,,USER          Terminate the subtask (not the FSS)
NIMS010  DS    0H
         LR    R10,R1              Set STCB addressability
         USING STCB,R10            Establish global addr. for          C
                                    the STCB
         LR    R2,R10              Zero the
         LA    R3,STCBLEN           new subtask
         MVCL  R2,R14                control block
         MVC   STCBID,=C'STCB'     Set the eye catcher
         MVC   STCBMN,=C'NIMSYS  ' Set the module name
         SPACE 1
         ST    R7,STCBAGCB         Save the AGCB address
         LA    R15,STCBSAVE        Perform
         ST    R13,4(,R15)           save
         ST    R15,8(,R13)             area
         LR    R13,R15                   linkage
***********************************************************************
*        SET UP ESTAE ROUTINE                                         *
***********************************************************************
         MVC   STCBMPL(NIMEPLL),NIMEPL    Copy list form ESTAE
         L     R2,=V(NIMESTA)      Get the ESTAE routine address
         ESTAE (2),                Establish the ESTAE exit            C
               MF=(E,STCBMPL),                                         C
               PARAM=(R10)
         MVC   STCBMPL(WTO1L),WTO1 Copy the WPL for message 1
         WTO   MF=(E,STCBMPL)      Issue message to operator
***********************************************************************
*        INITIALIZATION                                               *
***********************************************************************
MIBINIT  DS    0H
         MVC   SYSID(3),=XL3'090008'
         MVC   CPUMDL(3),=XL3'090008'
         MVC   PRODNM(3),=XL3'090010'
         MVC   PRODVER(3),=XL3'090008'
         MVC   IPLDATE(3),=XL3'090006'
         MVC   IPLTIME(3),=XL3'090008'
         MVC   CPUUTIL(3),=XL3'010004'
         MVC   SYSSTAT(3),=XL3'010001'
         LA    R2,REQTYPE              load addr of request type
         ST    R2,PARMLIST             save it to parm list #1
         LA    R2,RECTYPE              load addr of record type
         ST    R2,PARMLIST+4           save it to parm list #2
         LA    R2,SUBTYPE              load addr of record sub type
         ST    R2,PARMLIST+8           save it to parm list #3
         LA    R3,R793RLEN             Length of record
         L     R6,CVTPTR               Address of CVT
         USING CVT,R6
*   Use this code if using one of the address space subtypes
*   (one section per ASID)
*        L     R5,CVTASVT              ASVT address
*        USING ASVT,R5
*        M     R2,ASVTMAXU             Multiply by maximum users
*        DROP  R5                      ASVT no longer needed
         A     R3,HDRLEN               Add length of record headers
         ST    R3,STCBERBL             Save buffer length
         SR    R4,R4                   Subpool 0
         GETMAIN RU,LV=(3),            Get storage                     C
               SP=(4)
         LTR   R15,R15                 Successful GETMAIN?
         BZ    NIMS020                   Yes, skip ABEND and continue
         ABEND 667,,,USER                no, Terminate the subtask
NIMS020  DS    0H
         ST    R1,PARMLIST+12          buffer addr to parm list #4
         LA    R2,STCBERBL             load addr of buffer length
         ST    R2,PARMLIST+16          buffer len to parm list #5
         LA    R2,CPUUTL               load addr of cpu util save area
         ST    R2,PARMLIST+20          save it to parm list #6
         LA    R2,DPR                  load addr of demand page rate
         ST    R2,PARMLIST+24          save it to parm list #7
         L     R8,CVTSMCA              GET THE SMCA ADDRESS
         USING SMCABASE,R8             SMCA ADDRESSABILITY
         MVC   AGCBTMP(4),SMCAIDTE     LOAD IPL DATE
         MVI   AGCBTMP,X'00'           ZERO OUT CENTURY BYTE
         UNPK  AGCBTMP2(9),AGCBTMP(5)  MAKE IT VIEWABLE
         MVC   IPLDATE+3(2),AGCBTMP2+2 MOVE TO AGCB VAR (YY)
         MVI   IPLDATE+5,C'.'          MOVE IN PERIOD
         MVC   IPLDATE+6(3),AGCBTMP2+4 MOVE TO AGCB VAR (DDD)
         L     R1,SMCAITME             LOAD IPL TIME
         DROP  R8
         SR    R0,R0                   CLEAR EVEN REGISTER
         D     R0,=F'360000'           GET HOURS
         CVD   R1,AGCBDWD              CONVERT TO DECIMAL
         UNPK  AGCBTMP2(9),AGCBDWD+4(5) MAKE IT VIEWABLE
         MVC   IPLTIME+3(2),AGCBTMP2+5 SAVE HOURS
         MVI   IPLTIME+5,C':'          CONSTANT
         LR    R1,R0
         SR    R0,R0                   CLEAR EVEN REGISTER
         D     R0,=F'6000'             GET MINUTES
         CVD   R1,AGCBDWD              CONVERT TO DECIMAL
         UNPK  AGCBTMP2(9),AGCBDWD+4(5) MAKE IT VIEWABLE
         MVC   IPLTIME+6(2),AGCBTMP2+5 SAVE MINUTES
         MVI   IPLTIME+8,C':'          CONSTANT
         LR    R1,R0
         SR    R0,R0                   CLEAR EVEN REGISTER
         D     R0,=F'100'              GET SECONDS
         CVD   R1,AGCBDWD              CONVERT TO DECIMAL
         UNPK  AGCBTMP2(9),AGCBDWD+4(5) MAKE IT VIEWABLE
         MVC   IPLTIME+9(2),AGCBTMP2+5 SAVE SECONDS
         L     R8,CVTECVT              GET EXTENDED CVT ADDRESS
         USING ECVT,R8                 SMCA ADDRESSABILITY
         MVC   CPUMDL+3(8),ECVTHDNM    SAVE HARDWARE MODEL
         MVC   SYSID+3(8),ECVTLPNM     SAVE LPAR NAME
         MVC   PRODNM+3(16),ECVTPNAM   SAVE PRODUCT NAME
         MVC   PRODVER+3(2),ECVTPVER   SAVE PRODUCT VERSION
         MVI   PRODVER+5,C'.'          MOVE IN PERIOD
         MVC   PRODVER+6(2),ECVTPREL   SAVE PRODUCT RELEASE
         MVI   PRODVER+8,C'.'          MOVE IN PERIOD
         MVC   PRODVER+9(2),ECVTPMOD   SAVE PRODUCT MODIFICATION
         MVI   SYSSTAT+3,X'01'         Indicate system is up
         OI    INITFLAG,SYSBIT         Indicate subtask up and running
         DROP  R6,R8
***********************************************************************
*        SET UP TIMER                                                 *
***********************************************************************
TIMESET  DS    0H
         XC    STCBTECB,STCBTECB       Clear the timer ECB
         TM    STCBFLG1,STCB1TIM       STIMERM set?
         BO    WAIT                      yes, go finish wait
         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM
         LA    R4,STCBTMID             Point to STIMERD id word area
         LA    R5,AGCBSINT             Get the timer interval address
         LA    R6,STCBTECB             Get addr of ECB addr
         ST    R6,STCBCOMA             Save it
         OI    STCBFLG1,STCB1TIM       Indicate timer outstanding ...
         STIMERM SET,                  Set/reset NPRO timer            C
               DINTVL=(R5),                                            C
               ID=(R4),                                                C
               EXIT=TIMEXIT,                                           C
               PARM=STCBCOMA,                                          C
               MF=(E,STCBMPL)
***********************************************************************
*        WAIT FOR TIMER POP OR POST FROM AGENT                        *
***********************************************************************
WAIT     DS    0H
         LA    R4,STCBTECB             Point to timer ECB
         ST    R4,STCBTEP              Save it in list
         LA    R4,AGCBECBS             Point to communication ECB
         ST    R4,STCBCEP              Save it in list
         OI    STCBCEP,X'80'           Indicate end of ECB list
         WAIT  1,                      Wait for something to post      C
               ECBLIST=STCBECBL,                                       C
               LONG=YES
         TM    AGCBECBS,X'40'          Did we get posted by the agent?
         BO    EXIT                     Yes, assume shutdown for now
         TM    STCBTECB,X'40'          Did the timer pop?
         BZ    TIMESET                  No, don't know, go wait again
***********************************************************************
*        MIB UPDATE                                                   *
***********************************************************************
MIBUPDT  DS    0H
*        MVC   STCBMPL(NIMLPLL),NIMLPL copy list form of LINK
         LA    R1,PARMLIST             Parameter to reg 1
         LINK  EP=ERBSMFI              Link to RMF interface
         LTR   R15,R15                 return code good?
         BNZ   ERBERR                    no, go let us know
         L     R8,PARMLIST+12          get buffer address
         USING SMF79HDR,R8
         L     R4,SMF79ASS             load the data section offset
         DROP  R8
         AR    R8,R4                   point to data section
         USING R793,R8
         MVC   STCBWD(4),R793CUT       extract cpu utilization
         L     R4,STCBWD               load it
         MVC   STCBWD(4),R793OUTU      extract out/ready queue
         A     R4,STCBWD               add out/ready queue
         ST    R4,STCBWD               save it
         MVC   CPUUTIL+3(4),STCBWD     update the MIB
         DROP  R8
         XI    STCBFLG1,STCB1TIM       clear timer set flag
*        BAL   R8,SNAPRTN
         B     TIMESET                 Go wait for next interval
***********************************************************************
*        TIMER EXIT                                                   *
***********************************************************************
TIMEXIT  DS    0H
         STM   R14,R12,4(R13)
         LR    R4,R1                   SAVE PARAMETER
         L     R5,4(R1)                POINT TO TIMEECB
         POST  (R5)
         LM    R14,R12,4(R13)
         BR    R14
*****************************
*****   EXIT ROUTINES   *****
*****************************
EXIT     DS    0H
         TM    STCBFLG1,STCB1TIM   STIMERM set?
         BNO   TIMRBYP               no, bypass stimer cancel
         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM
         LA    R4,STCBTMID             Point to STIMERM id word area
         STIMERM CANCEL,               Cancel timer                    C
               ID=(R4),                                                C
               MF=(E,STCBMPL)
TIMRBYP  DS    0H
         MVC   STCBMPL(WTO2L),WTO2 Copy the WPL for message 2
         WTO   MF=(E,STCBMPL)      Issue message to operator
         L     R2,PARMLIST+12      Get ptr to buffer start
         L     R3,STCBERBL         Get buffer length
         SR    R4,R4               Subpool zero
         FREEMAIN RU,                                                  C
               LV=(3),                                                 C
               A=(2),                                                  C
               SP=(4)
         L     R9,4(,R13)          Get high save (last SACB reference)
         FREEMAIN RU,              Free the STCB                       C
               LV=STCBLEN,                                             C
               A=(10),                                                 C
               SP=230
         LR    R13,R9              Get high save area address
         RETURN (14,12),RC=0       Return to MVS, terminate sub task
******************************
*****   ERROR ROUTINES   *****
******************************
ERBERR   DS    0H
         CVD   R15,STCBDWD         convert to decimal
         UNPK  STCBDWD2(8),STCBDWD+4(4) make it viewable
         MVZ   STCBDWD2+7(1),STCBDWD2+6  all of itewable
         MVC   STCBMPL(MSG200EL),MSG200E link to erbsmfi failed msg
         LA    R2,STCBMPL          Point to message area failed msg
         MVC   MSG200RC(3,R2),STCBDWD2+5 move in return code
         WTO   MF=(E,STCBMPL)      Issue message to operator
         B     EXIT
*SNAPRTN  DS    0H
*         STM   R2,R5,REGSAVE
*         LA    R2,STCBID
*         LA    R3,STCBFLG1
*         L     R2,STCBAGCB
*         LA    R3,AGCBLEN(R2)
*         L     R4,PARMLIST+12     erbsmfi buff addr
*         LR    R5,R4              buff addr +
*         A     R5,STCBERBL                    buff len = buff end
*         LR    R6,R5
*         MVC   STCBMPL(NIMLPLL),NIMLPL  COPY LIST FORM LINK
*         LINK  EP=PCCSSNAP,PARAM=((R2),(R3),(R4),(R5)),VL=1,
*               MF=(E,STCBMPL)
*         LM    R2,R3,REGSAVE
*         BR    R8
         EJECT
**************************************************
***   S T O R A G E    D E F I N I T I O N S   ***
**************************************************
         EJECT
REQTYPE  DC    F'1'                Request type
RECTYPE  DC    F'79'               Record type 79
SUBTYPE  DC    F'3'                Subtype 3
HDRLEN   DC    A(HLEN+PLEN+CLEN)   Header length
NIMLPL   LINK  EP=PCCSSNAP,SF=L
NIMLPLL  EQU   *-NIMLPL
NIMEPL   ESTAE *-*,TERM=YES,       List form ESTAE PARMLIST            C
               RECORD=YES,PARAM=*-*,MF=L
NIMEPLL  EQU   *-NIMEPL
NIMTPL   STIMERM SET,MF=L
NIMTPLL  EQU   *-NIMTPL
MSG200E  WTO   'NMSY200E LINK TO ERBSMFI FAILED - RC=xxx',             C
               ROUTCDE=(1,10),MF=L
MSG200EL EQU   *-MSG200E
MSG200RC EQU   WPLTXT-WPL+37,3
WTO1     WTO   'NMSY100I SYS PROBE INITIALIZATION COMPLETE',ROUTCDE=(1,C
               10),MF=L
WTO1L    EQU   *-WTO1
WTO2     WTO   'NMSY199I SYS PROBE TERMINATION COMPLETE',ROUTCDE=(1,10)C
               ,MF=L
WTO2L    EQU   *-WTO2
         LTORG
         EJECT
*************************
*** DYNAMIC WORK AREA ***
*************************
         TITLE   'SUB TASK APPLICATION CONTROL BLOCK'
         NIMSTCB ,                 GENERATE STCB DSECT
         TITLE   'AGENT CONTROL BLOCK (AGCB)'
         NIMAGCB ,                 GENERATE AGCB DSECT
         PRINT  NOGEN
* SMF record 79 mapping
         ERBSMFR 79                Generate MVS WPL dsect
* Record lengths
SMF79HDR DSECT
HLEN     EQU    *-SMF79HDR
SMF79PRO DSECT
PLEN     EQU    *-SMF79PRO
R79CHL   DSECT
CLEN     EQU    *-R79CHL
NIMSYS   CSECT
* System control block mappings
         CVT     DSECT=YES,LIST=NO     Generate MVS CVT dsect
         IHAASVT DSECT=YES,LIST=NO
         IEESMCA ,
         IHAECVT ,
         IEZWPL ,                  Generate MVS WPL dsect
R0       EQU   0                   Register
R1       EQU   1                     equates
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   NIMSYS
