//SCHMUMAS JOB (,OSS),'SCHMUTZOK,MIKE',
//             CLASS=A,MSGCLASS=X,NOTIFY=SCHMUM
//OUT1     OUTPUT DEPT='TECH SUPPORT',JESDS=ALL,DEFAULT=YES,
//             TITLE='ASSEMBLE SYSREXXJ'
/*JOBPARM LINES=100
//*-----------------------------------------------*
//*   LIB: SCHMUM.NIMAGNT.SOURCE(SYSREXXJ)
//*   DOC: ASSEMBLE AND LINK USING ASMA90
//*-----------------------------------------------*
//ASMA    EXEC ASMACL,
// PARM.C='XREF(SHORT),OBJECT', RENT',
// PARM.L='LIST,XREF,AC=1' ENT,REUS'
//C.SYSLIB  DD DSN=SYS1.MACLIB,DISP=SHR
//          DD DSN=SYS1.AMODGEN,DISP=SHR
//          DD DSN=MSS.SCHMUM.MACLIB,DISP=SHR
//C.SYSIN   DD *
SYSREXXJ CSECT ,
SYSREXXJ AMODE 31
SYSREXXJ RMODE 31
************************************************************
*
*  TITLE: SYSREXXJ
*
*  Function:  Obtain various JES2 info by invoking an exec to
*     parse the output of JES2 display commands.
*       $DSPL    Get the SPOOL volume utilization percentage
*       $DJOBDEF Get pct of JQE's available
*       $DOUTDEF Get pct of JOE's available
*
*  NOTE: This program was created to develop the code that will
*        later be incorporated within a sub-task. The system
*        REXX approach is used wherever a metric is needed
*        but can't be gotten to through control block chaining
*        (i.e. I can't write JES2 programs!)
*
************************************************************
         BAKR  14,0
         USING SYSREXXJ,12
         LR    12,15
         MODID BR=YES
* Initialize everything
         XC  MyVarLst,MyVarLst    Clear the VarLst header
         XC  MyVarEn1,MyVarEn1    Clear the Var entry
         XC  MyVarEn2,MyVarEn2    Clear the Var entry
* Build Variable list
         LA  2,MyVarLst
         USING AxrArgLst,2
         MVC AxrArgLstId,MyAxrVarLstAcro
         LA  5,AxrArgLstCurVer
         ST  5,AxrArgLstVer       Initialize the version
         L   5,kNumVars           Obtain the number of variables
         STH  5,AxrArgLstNumber   Store the number of variables
         DROP 2
         LA  2,MyVarEn1           Addressability to 1st var entry
         USING AxrArgEntry,2
         LA  5,JOEPCT
         ST  5,AXRARGADDRLOW      Store output argument
         LA  5,VarName1
         ST  5,AXRARGNameADDRLOW  Store address of name of output var
         MVI AxrArgNameLength,L'VarName1
         OI  AXRARGINPUTFLGS1,AXRARGOutput   Indicate output var
         MVI AxrArgType,AxrArgTypeChar          Indicate char string
         LA  5,L'JOEPCT           Obtain length (in bytes)
         SLL 5,1                  Mult by 2 - length is in hex         *
                                  digits (not bytes)
         ST  5,AxrArgLength       Store length in var entry
         DROP 2
         LA  2,MyVarEn2           Addressability to 2nd var entry
         USING AxrArgEntry,2
         LA  5,JQEPCT
         ST  5,AXRARGADDRLOW      Store output argument
         LA  5,VarName2
         ST  5,AXRARGNameADDRLOW  Store address of name of output var
         MVI AxrArgNameLength,L'VarName2
         OI  AXRARGINPUTFLGS1,AXRARGOutput   Indicate output var
         MVI AxrArgType,AxrArgTypeChar          Indicate char string
         LA  5,L'JQEPCT           Obtain length (in bytes)
         SLL 5,1                  Mult by 2 - length is in hex         *
                                  digits (not bytes)
         ST  5,AxrArgLength       Store length in var entry
         DROP 2
         AXREXX REQUEST=EXECUTE,NAME=kEXECNAME,TIMELIMIT=NO,           *
               REXXVARS=MyVarLst,REXXDIAG=MyAxrDiag,SYNC=YES,          *
               RETCODE=OutRC,RSNCODE=OutRsn
         LTR   15,15
         JNZ   FailLabel
         LA    2,MyAxrDiag
         USING AxrDiag,2
         TM    AxrDiagFlgs1,AxrDiagNoExecRetCode
         JNZ   FailLabel
         L     15,AxrDiagExecRetCode
         LTR   15,15
         JNZ   FailLabel
*        Everything looks good.   Process variables here
         LA    R2,MSG151E
         MVC   MSG151JO(5,R2),JOEPCT Move Free JOE pct
         MVC   MSG151JQ(5,R2),JQEPCT Move Free JQE pcts
         WTO   MF=(E,MSG151E)       Issue message to operator
Exit     DS   0H
         PR
* Perform error checking
FailLabel DS   0H
         LA    R2,MSG150E
         L     R3,OutRC
         CVD   R3,DBLWRD            Convert it to decimal
         UNPK  MSG150RC(8,R2),DBLWRD+4(4) Unpack it
         OI    MSG150RC+7(R2),X'F0' Correct the sign
         MVC   DBLWRD+3(4),OutRsn   Move reason code to work area
         UNPK  MSG150RS(9,R2),DBLWRD+3(5) Unpack it to msg
         MVI   MSG150RS+8(R2),C' '  Clear out that packed sign
         TR    MSG150RS(8,R2),TABLE Make hex viewable
         WTO   MF=(E,MSG150E)       Issue message to operator
SNAPRTN  DS    0H
         LA    R2,@START
         LA    R3,@END
         LINK  EP=PCCSSNAP,PARAM=((R2),(R3)),VL=1
         B     Exit
*
*  Constants
*
@START   EQU   *
DBLWRD   DS    D
OutRC    DS    F
OutRsn   DS    F
kNumVars DC    F'2'                    4
MyAxrVarLstAcro DC AL4(AxrVarLstAcro)  4
kExecName DC   CL8'QUERYJES'           8
JOEPCT   DS    CL5
JQEPCT   DS    CL5
VarName1 DC    C'joepct'               3
VarName2 DC    C'jqepct'               3
MyAxrDiag DS   CL(AXRDIAG_LEN)        40
MyVarLst DS    CL(AXRARGLST_LEN)      16
MyVarEn1 DS    CL(AXRARGENTRY_LEN)    40
MyVarEn2 DS    CL(AXRARGENTRY_LEN)    40
MSG150E  WTO   'SYSREXXJ: RETCODE= xxxxxxxx, RSNCODE= xxxxxxxx ',      C
               ROUTCDE=(1,10),MF=L
MSG150EL EQU   *-MSG150E
MSG150RC EQU   WPLTXT-WPL+19,8
MSG150RS EQU   WPLTXT-WPL+38,8
MSG151E  WTO   'SYSREXXJ: Free JOEs: xx.xx%, Free JQEs: xx.xx%',       C
               ROUTCDE=(1,10),MF=L
MSG151EL EQU   *-MSG151E
MSG151JO EQU   WPLTXT-WPL+21,8
MSG151JQ EQU   WPLTXT-WPL+40,8
@END     EQU   *
         ORG   *-240
TABLE    EQU   *
         DS    240C
         DC    C'0123456789ABCDEF'
         AXRZARG DSECT=YES,AXRARGLST=YES,AXRARGENTRY=YES,AXRDIAG=YES
         IEZWPL ,                  Generate MVS WPL dsect
         REGS
         END
//L.SYSLMOD DD DSN=MSS.SCHMUM.LOADLIB,DISP=SHR
//L.SYSIN   DD  *
    NAME SYSREXXJ(R)
