./ ADD NAME=$$CTLBLK 0101-09022-09022-1542-00029-00024-00029-SCHMUM
SYS1.MACLIB
  BPXYCONS - SYSCALL CONSTANTS
  BPXYWAST - WAIT STATUS WORD
  CVT      - COMMUNICATIONS VECTOR TABLE
  ERBSMFR  - RMF SMF RECORD MAPPING
  IEAVG131 - MCS EXTENDED CONSOLE STATUS AREA
  IEAVG132 - PREFIX AREA FOR MESSAGE DATA BLOCK
  IEAVM105 - MESSAGE DATA BLOCK  (MDB)
  IEESMCA  - SMF CONTROL TABLE
  IEFTIOT1 - TASK INPUT/OUTPUT TABLE
  IEFZB4D0 - DYNAMIC ALLOCATION (SVC 99) PARAMETER LIST
  IEFZB4D2 - DYNAMIC ALLOCATION KEY DEFINITION TABLE
  IEZCIB   - COMMAND INPUT BUFFER MAPPING MACRO
  IEZCOM   - COMMUNICATIONS PARAMETER LIST
  IEZVG111 - MCSOPER OPERPARM MAPPING
  IEZVG200 - CONVCON PARAMETER LIST / CNZCONV CONSTANTS
  IHAASCB  - ADDRESS SPACE CONTROL BLOCK

SYS1.AMODGEN
  IEZBITS  - SYMBOLIC BITS
  IEZVX100 - COMMUNICATIONS TASK INSTALLATION EXIT
  IEZWPL   - WTO/WTOR/MLWTO/WTP PARAMETER LIST
  IHAASVT  - ADDRESS SPACE VECTOR TABLE
  IHAECVT  - EXTENDED COMMUNICATIONS VECTOR TABLE

USER WRITTEN
  DPIPDU   - DPI PDU MAPPING MACRO
  NIMAGCB  - AGENT CONTROL BLOCK
  NIMSTCB  - SUBTASK CONTROL BLOCK
./ ADD NAME=$$MACROS 0103-09022-09022-1206-00049-00040-00040-SCHMUM
INCLUDED:
  #SNAP     - CODING TO SNAP STORAGE AREAS
  ALLOC     - DYNAMIC ALLOCATION
  DYNSPACE  - DSECT FOR ALLOC
  ENTERX    - ENTRY HOUSEKEEPING
  FREE      - DYNAMIC UN-ALLOCATION
  LEAVE     - EXIT HOUSEKEEPING
  NIMAGCB   - SUB-AGENT CONTROL BLOCK
  NIMSTCB   - SUBTASK CONTROL BLOCK
  REGS      - ESTABLISH REGISTERS
  S99FAIL   - DYNAMIC ALLOCATION ERROR ROUTINE

SYS1.MACLIB
  ABEND     - ABNORMALLY TERMINATE THE CURRENT TASK
  ATTACH    - PROVIDE THE INTERFACE TO THE ATTACH SUBTASK SERVICE
              ROUTINE (IEAVEAT0) VIA SVC 42
  CALL      - PASS CONTROL TO AN EXTERNAL PROGRAM
  CONVCON   - CONSOLE NAME AND ID CONVERTER MACRO
  DETACH    - PROVIDE THE INTERFACE TO THE DETACH SUBTASK SERVICE
              ROUTINE (IEAVEED0) VIA SVC 62
  ESTAE     - EXTENDED SPECIFY TASK ABNORMAL EXIT
  EXTRACT   - EXTRACT SYSTEM INFORMATION
  FREEMAIN  - FREE MAIN STORAGE MACRO
  GETMAIN   - GET MAIN STORAGE MACRO
  IDENTIFY  - IDENTIFY CONTENT SUPERVISOR KEY WORDS
  LINK      - PASS CONTROL TO AN EXTERNAL PROGRAM
  MCSOPER   - PERFORM THE NON SPACE SWITCH PC TO THE MCSOPER SERVICES
  MCSOPMSG  - RETRIEVE THE ADDRESS AND ALET OF A MESSAGE WHEN POSTED
              BY COMM TASK
  MGCRE     - BUILD A PARAMETER LIST FOR SVC 34 COMMAND PROCESSING
  MODESET   - SWITCH BETWEEN SUPERVISOR AND PROGRAMMER MODE
  POST      - PROVIDES AN INTERFACE TO THE POST SERVICE RTN (IEAVEPST)
  QEDIT     - CIB CHAIN MANIPULATOR
  RETURN    - EXIT HOUSEKEEPING
  SDUMP     - INTERFACE BETWEEN THE CALLER AND SVC DUMP
  SETRP     - INTERFACE FOR RECOVERY ROUTINES TO COMMUNICATE WITH RTM
  STIMERM   - SET, TEST OR CANCEL UP TO 16 REAL TIME INTERVALS
  STORAGE   - INTERFACE TO STORAGE ROUTINES
  SYSEVENT  - PROVIDES THE INTERFACE TO THE SYSTEM RESOURCE MANAGER
  SYSSTATE  - SET THE VALUE OF THE GLOBAL SET SYMBOL "SYSASCE" TO A
              SPECIFIED VALUE OR A DEFAULT VALUE
  WAIT      - INTERFACE TO THE WAIT SERVICE ROUTINE (IEAVEWAT)
  WTO       - WRITE TO OPERATOR
  WTOR      - WRITE TO OPERATOR WITH REPLY

TCPIP.SEZACMAC
  EZASMI    - PROVIDE S/390 ASSEMBLER SOCKETS INTERFACE
  TPIMASK   - SET OR TEST BITS IN THE READ, WRITE AND EXCEPTION MASKS
              USED IN THE SELECT/SELECTEX MACRO OR CALLS
./ ADD NAME=#SNAP    0100-94119-94119-1132-00397-00397-00000-SUP00T
         MACRO                                                          #SNAP
&NAME    #SNAP &STORAGE=,&LIST=,&ID=,&PDATA=,&SDATA=,&DCB=              #SNAP
         MNOTE *,'       #SNAP     VERSION 001 07/09/85            MAS' #SNAP
.********************************************************************** #SNAP
.*                                                                    * #SNAP
.* #SNAP                                                              * #SNAP
.*                                                                    * #SNAP
.* FUNCTION       GENERATE CODING TO DISPLAY A RANGE OF STORAGE       * #SNAP
.*                AND REGISTERS.                                      * #SNAP
.*                                                                    * #SNAP
.* DESCRIPTION    THIS MACRO WILL GENERATE CODE THAT WILL:            * #SNAP
.*                 1)  CREATE SNAP DCB                                * #SNAP
.*                 2)  OPEN SNAP DCB                                  * #SNAP
.*                 3)  ISSUE SNAP SVC                                 * #SNAP
.*                 4)  CLOSE SNAP DCB                                 * #SNAP
.*                                                                    * #SNAP
.*                REGISTERS 0, 1, 14, AND 15 ARE USED BY THE          * #SNAP
.*                SNAP AND MUST NOT BE SPECIFIED AS FIRST OR          * #SNAP
.*                LAST VALUES.                                        * #SNAP
.*                                                                    * #SNAP
.* SYNTAX         NAME     #SNAP STORAGE=(FIRST,LAST),                * #SNAP
.*                               LIST=SYMBOL3,                        * #SNAP
.*                               SDATA=(SYS DATA CODE),               * #SNAP
.*                               PDATA=(PROB DATA CODE),              * #SNAP
.*                               ID=ID NUMBER                         * #SNAP
.*                                                                    * #SNAP
.*               NAME    - SPECIFIES THE SYMBOLIC TAG TO BE           * #SNAP
.*                         ASSIGNED TO THE FIRST INSTRUCTION          * #SNAP
.*                         GENERATED.  THIS OPERAND IS OPTIONAL.      * #SNAP
.*                                                                    * #SNAP
.*               STORAGE - SPECIFIES ONE OR MORE PAIRS OF STARTING    * #SNAP
.*                         AND ENDING ADDRESSES OF AREAS TO BE DUMPED.* #SNAP
.*                         EACH STARTING ADRRESS IS ROUNDED DOWN TO A * #SNAP
.*                         FULL WORD BOUNDARY AND EACH ENDING ADDRESS * #SNAP
.*                         IS ROUNDED UP TO A FULLWORD BOUNDARY. IF A * #SNAP
.*                         SYMBOLIC NAME IS SPECIFIED, IT MUST BE     * #SNAP
.*                         ADDRESSABLE.  IF A REGISTER IS SPECIFIED,  * #SNAP
.*                         IT MUST BE ENCLOSED IN PARENTHESES. THIS   * #SNAP
.*                         THIS PARAMETER IS REQUIRED IF THE LIST     * #SNAP
.*                         PARAMETER IS NOT USED.                     * #SNAP
.*                                                                    * #SNAP
.*               LIST    - SPECIFIES THE SYMBOLIC NAME OF A LIST OF   * #SNAP
.*                         ENTRIES TO BE DUMPED OR A REGISTER WHICH   * #SNAP
.*                         CONTAINS THE ADDRESS OF THE LIST.          * #SNAP
.*                         IF A SYMBOLIC NAME IS SPECIFIED, IT MUST   * #SNAP
.*                         BE ADDRESSABLE.  IF A REGISTER IS          * #SNAP
.*                         SPECIFIED, IT MUST BE ENCLOSED IN          * #SNAP
.*                         PARENTHESES.  THIS PARAMETER IS REQUIRED   * #SNAP
.*                         IF THE FIRST AND LAST PARAMETERS ARE NOT   * #SNAP
.*                         USED.                                      * #SNAP
.*                                                                    * #SNAP
.*                SDATA  - SPECIFIES THE SYSTEM CONTROL PROGRAM       * #SNAP
.*                         INFORMATION TO BE DUMPED. VALID CODES ARE: * #SNAP
.*                         ALL, NUC, SQA, LSQA, SWA, CB, Q, TRT, DM,  * #SNAP
.*                         ERR, IO, AND PCDATA. SEE OS/VS2 MVS        * #SNAP
.*                         SUPERVISOR SERVICES AND MACRO INSTRUCTION  * #SNAP
.*                         MANUAL FOR MORE INFORMATION ABOUT THESE    * #SNAP
.*                         OPTIONS. THIS PARAMETER IS OPTIONAL.       * #SNAP
.*                                                                    * #SNAP
.*                PDATA  - SPECIFIES THE PROBLEM PROGRAM INFORMATION  * #SNAP
.*                         TO BE DUMPED. VALID CODES ARE:             * #SNAP
.*                         ALL, PSW, REGS, SA, SAH, JPA, LPA, ALLPA,  * #SNAP
.*                         AND SPLS. SEE OS/VS2 MVS SUPERVISOR        * #SNAP
.*                         SERVICES AND MACRO INSTRUCTION MANUAL FOR  * #SNAP
.*                         MORE INFORMATION ABOUT THESE OPTIONS. THIS * #SNAP
.*                         PARAMETER IS OPTIONAL.                     * #SNAP
.*                                                                    * #SNAP
.*                ID     - SPECIFIES THE NUMBER THAT IS TO BE PRINTED * #SNAP
.*                         IN THE IDENTIFICATION HEADING WITH THE     * #SNAP
.*                         DUMP. THIS PARAMETER IS OPTIONAL.          * #SNAP
.*                                                                    * #SNAP
.*                                                                    * #SNAP
.* ERRORS         FIRST VALUE NOT SPECIFIED                     - 8   * #SNAP
.*                LAST  VALUE NOT SPECIFIED                     - 8   * #SNAP
.*                LIST VALUE NOT SPECIFIED                      - 8   * #SNAP
.*                                                                    * #SNAP
.* EXAMPLE        DUMP STORAGE AREAS 3000-3500 AND 4000-4500. ALSO    * #SNAP
.*                INCLUDE THE NUCLEUS AND THE PSW. ID NUMBER IS 1.    * #SNAP
.*                                                                    * #SNAP
.*                         #SNAP STORAGE=(3000,3500,4000,4500),       * #SNAP
.*                               SDATA=NUC,PDATA=PSW,ID=1             * #SNAP
.*                                                                    * #SNAP
.*                                                                    * #SNAP
.* GLOBALS                                                            * #SNAP
.*                                                                    * #SNAP
.*                NONE                                                * #SNAP
.*                                                                    * #SNAP
.* MACROS USED                                                        * #SNAP
.*                                                                    * #SNAP
.*                SNAP, OPEN, CLOSE, DCB                              * #SNAP
.*                                                                    * #SNAP
.********************************************************************** #SNAP
.*                                                                      #SNAP
         LCLA  &FLAGS1,&FLAGS2,&FLAGS3,&FLAGSE3,&FLAGS4                 #SNAP
         LCLA  &CTR1,&CTR2,&DISP                                        #SNAP
         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7,&B8,&B9,&B10,&B11,&B12   #SNAP
         LCLB  &B13,&B14,&B15,&B16,&B17,&B18,&B19,&B20,&B21,&B22,&B23   #SNAP
         LCLB  &B24,&B25,&B30                                           #SNAP
         LCLB  &OSVS2R2,&VS2SE3,&OSENVS2                                #SNAP
         LCLC  &C1,&SNAPDCB
         ACTR  9000
&B0      SETB  1
&OSVS2R2 SETB  1
&OSENVS2 SETB  1
&VS2SE3  SETB  1
&SNAPDCB SETC  'SNAPDCB'
.*                                                                      #SNAP
         AIF   ('&SDATA' EQ '').CHKSTR
         AIF   ('&SDATA'(1,1) EQ '(').ABC1
&B2      SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'CB')
&B3      SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'TRT')
&B4      SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'NUC')
&B7      SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'Q')
&B17     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'SQA')
&B18     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'LSQA')
&B19     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'SWA')
&B20     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'DM')
&B21     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'IO')
&B22     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'ERR')
&B30     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'PCDATA')
&CTR1    SETA  &B2+&B3+&B4+&B17+&B18+&B19+&B7+&B20+&B21+&B22+&B30
         AIF   ('&CTR1' EQ '0').MSG2
         AGO   .CHKSTR
.ABC1    ANOP
&CTR1    SETA  N'&SDATA
&CTR2    SETA  0
.LOOPA   ANOP
&CTR2    SETA  &CTR2+1
&C1      SETC  '&SDATA(&CTR2)'
         AIF   ('&C1' EQ 'TRT').SETTRT
         AIF   ('&C1' EQ 'NUC').SETNUC
         AIF   ('&C1' EQ 'CB').SETCB
         AIF   ('&C1' EQ 'Q').SETQ
         AIF   ('&C1' EQ 'SQA').SETSQA
         AIF   ('&C1' EQ 'LSQA').SETLSQA
         AIF   ('&C1' EQ 'SWA').SETSWA
         AIF   ('&C1' EQ 'DM').SETDM
         AIF   ('&C1' EQ 'IO').SETIO
         AIF   ('&C1' EQ 'ERR').SETERR
         AIF   ('&C1' EQ 'PCDATA').SETPC
         AIF   ('&C1' EQ 'ALL').SETALL
         AGO   .MSG2
.CHKOPT  ANOP
         AIF   ('&CTR2' NE '&CTR1').LOOPA
         AGO   .CHKSTR
.SETTRT  ANOP
&B3      SETB  1
         AGO   .CHKOPT
.SETNUC  ANOP
&B4      SETB  1
         AGO   .CHKOPT
.SETCB   ANOP
&B2      SETB  1
         AGO   .CHKOPT
.SETQ    ANOP
&B7      SETB  1
         AGO   .CHKOPT
.SETSQA  ANOP
&B17     SETB  1
         AGO   .CHKOPT
.SETLSQA ANOP
&B18     SETB  1
         AGO   .CHKOPT
.SETSWA  ANOP
&B19     SETB  1
         AGO   .CHKOPT
.SETDM   ANOP
&B20     SETB  1
         AGO   .CHKOPT
.SETIO   ANOP
&B21     SETB  1
         AGO   .CHKOPT
.SETERR  ANOP
&B22     SETB  1
         AGO   .CHKOPT
.SETPC   ANOP
&B30     SETB  1
         AGO   .CHKOPT
.SETALL  ANOP
&B2      SETB  1
&B3      SETB  1
&B4      SETB  1
&B7      SETB  1
&B17     SETB  1
&B18     SETB  1
&B19     SETB  1
&B20     SETB  1
&B21     SETB  1
&B22     SETB  1
&B30     SETB  1
.CHKSTR  ANOP
&B5      SETB  ('&STORAGE' NE '')
&B16     SETB  ('&LIST' NE '')
         AIF   ('&B5' EQ '1' AND '&B16' EQ '1').MSG4
         AIF   ('&B5' EQ '0').CHKSTRB
&CTR1    SETA  N'&STORAGE
         AIF   (&CTR1 LT 2).MSG4
.CHKSTRA ANOP
&CTR1    SETA  &CTR1-2
         AIF   (&CTR1 EQ 0).CHKSTRC
         AIF   (&CTR1 LT 1).MSG4
         AGO   .CHKSTRA
.CHKSTRB ANOP
         AIF   ('&B16' EQ '0').MSG4
         AIF   (N'&LIST NE 1).MSG4
.CHKSTRC ANOP
&B6      SETB  ('&ID' NE '')
         AIF   ('&PDATA' EQ '').SETFLAG
         AIF   ('&PDATA'(1,1) EQ '(').ABC2
&B8      SETB  ('&PDATA' EQ 'SAH' OR '&PDATA' EQ 'SA' OR '&PDATA' EQ 'AX
               LL')
&B9      SETB  ('&PDATA' EQ 'SAH')
&B10     SETB  ('&PDATA' EQ 'REGS' OR '&PDATA' EQ 'ALL')
&B11     SETB  ('&PDATA' EQ 'LPA' OR '&PDATA' EQ 'ALLPA' OR '&PDATA' EQX
                'ALL')
&B12     SETB  ('&PDATA' EQ 'JPA' OR '&PDATA' EQ 'ALLPA' OR '&PDATA' EQX
                'ALL')
&B13     SETB  ('&PDATA' EQ 'PSW' OR '&PDATA' EQ 'ALL')
&B14     SETB  ('&PDATA' EQ 'SPLS' OR '&PDATA' EQ 'ALL')
&CTR1    SETA  &B8+&B9+&B10+&B11+&B12+&B13+&B14
         AIF   ('&CTR1' EQ '0').MSG3
&B15     SETB  0
         AGO   .SETFLAG
.ABC2    ANOP
&CTR1    SETA  N'&PDATA
&CTR2    SETA  0
.LOOPB   ANOP
&C1      SETC  '&PDATA(&CTR2)'
         AIF   ('&C1' EQ 'SA').SETSA
         AIF   ('&C1' EQ 'SAH').SETSAH
         AIF   ('&C1' EQ 'REGS').SETREGS
         AIF   ('&C1' EQ 'LPA').SETLPA
         AIF   ('&C1' EQ 'JPA').SETJPA
         AIF   ('&C1' EQ 'ALLPA').SETALPA
         AIF   ('&C1' EQ 'PSW').SETPSW
         AIF   ('&C1' EQ 'SPLS').SETSPLS
         AIF   ('&C1' EQ 'ALL').SETPALL
         AGO   .MSG3
.CHKPMOR ANOP
         AIF   ('&CTR2' NE '&CTR1').LOOPB
         AGO   .SETFLAG
.SETSA   ANOP
&B8      SETB  1
         AGO   .CHKPMOR
.SETSAH  ANOP
&B8      SETB  1
&B9      SETB  1
         AGO   .CHKPMOR
.SETREGS ANOP
&B10     SETB  1
         AGO   .CHKPMOR
.SETLPA  ANOP
&B11     SETB  1
         AGO   .CHKPMOR
.SETJPA  ANOP
&B12     SETB  1
         AGO   .CHKPMOR
.SETALPA ANOP
&B11     SETB  1
&B12     SETB  1
         AGO   .CHKPMOR
.SETPSW  ANOP
&B13     SETB  1
         AGO   .CHKPMOR
.SETSPLS ANOP
&B14     SETB  1
         AGO   .CHKPMOR
.SETPALL ANOP
&B8      SETB  1
&B10     SETB  1
&B11     SETB  1
&B12     SETB  1
&B13     SETB  1
&B14     SETB  1
.SETFLAG ANOP
&FLAGS1  SETA  128*&B4+64*&B17+32*&B18+16*&B19+8*&B3+4*&B2+2*&B7+1*&B20
&FLAGS2  SETA  128*&B8+64*&B9+32*&B10+16*&B11+8*&B12+4*&B13+2*&B14+1*&BX
               15
&FLAGS3  SETA  64*&OSVS2R2+32*&OSENVS2+16*&B0+8*&B6+4*&B1+2*&B5+2*&B16+X
               1*&B23
&FLAGSE3 SETA  128*&VS2SE3
&FLAGS4  SETA  128*&B21+64*&B22+32*&B30
         OPEN  (SNAPDCB,(OUTPUT))
         CNOP  0,4
&NAME    BAL   1,A&SYSNDX              BRANCH AROUND PARM LIST
         AIF   ('&B6' EQ '0').NOIDS
         AIF   ('&ID'(1,1) EQ '(').NOIDS
         DC    AL1(&ID)                ID NUMBER
         AGO   .CONT
.NOIDS   ANOP
         DC    AL1(0)                  ID NUMBER
.CONT    ANOP
         DC    AL1(&FLAGS3)            OPTION FLAGS
         DC    AL1(&FLAGSE3)           OPTION FLAGS 2
         DC    AL1(0)                  RESERVED
         DC    AL1(&FLAGS1)            SDATA FLAGS ONE
         DC    AL1(&FLAGS4)            SDATA FLAGS TWO
         DC    AL1(&FLAGS2)            PDATA FLAGS
         DC    AL1(0)                  RESERVED
         DC    A(&SNAPDCB)             DCB ADDRESS
         DC    A(0)                    TCB ADDRESS
         AIF   ('&B5' EQ '1').STORON
         AIF   ('&LIST'(1,1) EQ '(').LISTREG
         DC    A(&LIST)                ADDRESS OF SNAPSHOT LIST
         AGO   .CHHDR
.STORON  ANOP
&CTR1    SETA  N'&STORAGE
         AGO   .PROSTOR
.LISTREG ANOP
         DC    A(0)                    ADDRESS OF SNAPSHOT LIST
.CHHDR   ANOP
         DC    A(0)                    ADDRESS OF HEADER LIST
         AGO   .PROCSUB
.PROSTOR ANOP
         DC    A(*+8)                  ADDRESS OF SNAPSHOT LIST
         DC    A(0)                    ADDRESS OF HEADER LIST
.LOOP1   ANOP
&CTR2    SETA  &CTR2+1
         AIF   ('&STORAGE(&CTR2)' EQ '').STYPE1
         AIF   ('&STORAGE(&CTR2)'(1,1) EQ '(').STYPE1
         DC    A(&STORAGE(&CTR2))  STARTING/ENDING ADDRESS
         AIF   ('&CTR2' NE '&CTR1').LOOP1
         AGO   .PROCSUB
.STYPE1  ANOP
         DC    A(0)                STARTING/ENDING ADDRESS
         AIF   ('&CTR2' NE '&CTR1').LOOP1
.PROCSUB ANOP
A&SYSNDX DS    0H
         AIF   ('&B6' EQ '0').NOID
         AIF   ('&ID'(1,1) NE '(').NOID
         STC   &ID,0(0,1)       GET ID NUMBER
.NOID    ANOP
         AIF   ('&B5' EQ '0').NOSTOR
&CTR2    SETA  0
&DISP    SETA  20
.LOOP2   ANOP
&CTR2    SETA  &CTR2+1
&DISP    SETA  &DISP+4
&C1      SETC  '&STORAGE(&CTR2)'
         AIF   ('&STORAGE(&CTR2)'(1,1) EQ '(').STOR
         AGO   .AIF
.STOR    ANOP
         ST    &C1,&DISP.(0,1)     GET STARTING/ENDING ADDRESS
.AIF     ANOP
         AIF   ('&CTR2' NE '&CTR1').LOOP2
         OI    &DISP.(1),X'80'     SET END OF LIST INDICATOR
         AGO   .SVC51
.NOSTOR  ANOP
         AIF   ('&LIST'(1,1) NE '(').SVC51
         ST    &LIST,16(0,1)       STORE SNAPSHOT ADDR INTO PARM LIST
.SVC51   ANOP
         SVC   51
         CLOSE SNAPDCB
         AIF   ('&DCB' EQ 'NO').EXIT
         B     B&SYSNDX
&SNAPDCB DCB   DSORG=PS,RECFM=VBA,MACRF=(W),BLKSIZE=1632,LRECL=125,    X
               DDNAME=SNAPDD
B&SYSNDX DS    0H
.EXIT    ANOP
         MEXIT
.ERROR1  ANOP
         ABEND 111,DUMP
         AGO   .EXIT
.ERROR2  ANOP
         ABEND 222,DUMP
         AGO   .EXIT
.ERROR3  ANOP
         ABEND 333,DUMP
         AGO   .EXIT
.MSG1    IHBERMAC  6
         MEXIT
.MSG2    ANOP
&B2      SETB  1
&B3      SETB  0
&B4      SETB  0
&B7      SETB  0
&B17     SETB  0
&B18     SETB  0
&B19     SETB  0
&B20     SETB  0
&B21     SETB  0
&B22     SETB  0
         IHBERMAC  183,&SDATA,CB
         AGO   .CHKSTR
.MSG3    ANOP
&B8      SETB  1
&B9      SETB  0
&B10     SETB  1
&B11     SETB  1
&B12     SETB  1
&B13     SETB  1
&B14     SETB  1
         IHBERMAC  183,&PDATA,ALL
         AGO   .SETFLAG
.MSG4    IHBERMAC  189
         MEXIT
         MEND
./ ADD NAME=ALLOC    0102-85112-90002-1654-00298-00294-00008-MSCHMTZ
         MACRO
&NAME    ALLOC &DUMMY,&PERM,&DSN=,&DDN=,&DDNRET=,&MEMBER=,&DISP=,      X
               &VOL=,&UNIT=,&SYSOUT=,&FREE=,&COPIES=,&LABEL=,          X
               &BLKSIZE=,&DEN=,&DSORG=,&KEYLEN=,&LRECL=,&RECFM=,       X
               &PASWORD=,&DSNRET=,&MF=AUTO,&PREFIX=,&ERROR=,           X
               &SPACE=,&F=,&FILE=,&DA=,&QNAME=,&DSORGRT=,              X
               &VOLRET=,&DCBDSN=,&DCBDDN=,&SPECIAL=,&DDNTO=,           X
               &FORMS=,&DEST=,&SSREQ=,&FORUSER=,&TU=,&DSNPDE=,&USER=,  X
               &SUBSYS=
.**********************************************************************
.*                                                                    *
.*    THIS MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION BY BUILDING   *
.*    A DYNAMIC ALLOCATION PARAMETER LIST AND INVOKING SVC 99.        *
.*    IT FIRST SETS UP A WORKAREA ENVIRONMENT FOR THE PARAMETER LIST  *
.*    AND THEN TESTS THE KEYWORDS SUPPLIED AND INVOKES INNER MACROS   *
.*    TO BUILD THE TEXT UNITS. THE INNER MACROS THEMSELVES USE INNER  *
.*    MACROS TO UPDATE GLOBAL VARIABLES, STORE TEXT UNIT POINTERS ETC *
.*    THERE ARE THREE WAYS OF SPECIFYING THE WORK AREA ADDRESS.       *
.*    A) MF=AUTO, MF=G, MF=(E,ADDRESS,LNTHSYMB).                      *
.*    IN THE FIRST FORM, AN INNER MACRO DYNSPACE IS CALLED TO NAME    *
.*    A WORK AREA, THE NAME BEING RETURNED IN THE GLOBAL SETC         *
.*    VARIABLE &DYNSP. A DSECT IS CREATED TO MAP THIS AREA.           *
.*    THE GLOBAL VARIABLES &DTUO (TEXT UNIT OFFSET COUNTER) AND       *
.*    &DTUPO (TEXT UNIT POINTER OFFSET ACCUMULATOR) ARE SET TO ZERO.  *
.*    THESE ACCUMULATORS ARE UPDATED AS EACH TEXT UNIT PROCESSOR      *
.*    AQUIRES STORAGE. AFTER ALL TEXT UNITS HAVE BEEN BUILT, THE      *
.*    AMOUNT OF SPACE USED IS CALCULATED, AND THE DYNSPACE MACRO IS   *
.*    THEN CALLED AGAIN TO LOG THE AMOUNT NEEDED. DYNSPACE SETS A     *
.*    GLOBAL VARIABLE &DYNSPQ TO THE HIGHEST AMOUNT ANY ALLOC OR      *
.*    FREE MACRO REQUESTED, AND WHEN CALLED WITH THE EXPAND OPTION,   *
.*    (NO OPERANDS OR NAME FIELD SUPPLIED), EXPANDS INTO A DS FOR     *
.*    THAT QUANTITY. (SEE DYNSPACE)                                   *
.*    MF=G SPECIFIES THAT THE ALLOC MACRO ENTER THE BEGIN MACRO       *
.*    WORKAREA TO ACQUIRE THE STORAGE NECESSARY. IT DOES THIS VIA     *
.*    THE RCPDS MACRO. (SEE RCPDS). HOWEVER, IF THE ALLOC MACRO IS    *
.*    CALLED SEVERAL TIMES WITH THIS OPTION, A LOT OF STORAGE WILL BE *
.*    USED UP, AS THE STORAGE WILL NOT BE SHARED. THUS, THIS FORM     *
.*    SHOULD ONLY BE USED IF THE ALLOC/FREE MACRO IS ONLY TO BE USED  *
.*    ONCE OR TWICE DURING AN ASSEMBLY.                               *
.*    MF=E CAUSES THE MACRO TO USE A USER SPECIFIED WORK AREA. THE    *
.*    SECOND PARAMETER GIVES THE NAME OF THE WORKAREA, AND AN         *
.*    OPTIONAL THIRD PARAMETER IS THE NAME OF A SYMBOL TO BE EQUATED  *
.*    TO THE LENGTH OF THE REQUIRED WORK AREA.                        *
.*                                                                    *
.*    DYNAMIC ALLOCATION FUNCTIONS ARE SIMILAR TO THOSE AVAILABLE    *
.*    WITH JCL, USING THE SAME KEYWORDS. HOWEVER, CERTAIN FORMATS    *
.*    ARE SLIGHTLY DIFFERENT. FOR INSTANCE, CERTAIN KEYWORDS CAN     *
.*    HAVE VARYING PARAMETERS, EG DATASET NAME, DDNAME, VOLSER ETC.  *
.*    PROVISION IS MADE FOR BOTH VARIABLE SPECIFICATION.             *
.*    IN THE ABSOLUTE FORM, THE PARAMETER IS ENTERED IN QUOTES,      *
.*    E.G.   ALLOC DSN='SYS1.LINKLIB',DISP=SHR                       *
.*    HOWEVER, THIS NAME REMAINS FIXED FOR THE ASSEMBLY.             *
.*    IN THE VARIABLE FORMAT, THE ADDRESS OF A LOCATOR IS SPECIFIED, *
.*    WHERE THE LOCATOR CONSISTS OF A SIX BYTE FIELD, THE FIRST 4    *
.*    BYTES OF WHICH POINT TO THE PARAMETER, WHILE THE NEXT TWO      *
.*    CONTAIN THE LENGTH.                                            *
.*    EG          ALLOC DSN=LOCATOR                                  *
.*       LOCATOR  DC    A(DSN),Y(12)                                 *
.*       DSN      DC    C'SYS1.LINKLIB'                              *
.*                                                                   *
.*       NUMERIC QUANTITIES E.G. COPIES= FOR SYSOUT, SHOULD EITHER   *
.*       SPECIFY A NUMERIC VALUE, COPIES=3,                          *
.*       A VALUE IN A REGISTER, COPIES=(R3),                         *
.*       OR THE NAME OFF A FULLWORD CONTAINING THE VALUE,            *
.*          COPIES=NUMCOPYS, WHERE NUMCOPYS IS THE NAME OF A         *
.*       FULLWORD FIELD.                                             *
.*                                                                   *
.*       OTHER KEYWORDS SUCH AS DISP= CAN ONLY HAVE THE ABSOLUTE     *
.*       FORM, AND VALUES SHOULD NOT BE ENTERED WITHIN QUOTES.       *
.*       ADDITIONAL FACILITIES NOT AVAILABLE WITH JCL ARE THE        *
.*       RETURN BY THE SYSTEM OF INFORMATION ON THE DATASET, EG      *
.*       DSORG. THIS IS DONE BY SPECIFYING DSORGRT=SYMBOL, WHERE     *
.*       SYMBOL IS A SYMBOL WHICH WILL BE EQUATED TO A TWO BYTE      *
.*       FIELD CONTAINING THE DSORG TYPE (SEE JOB MANAGEMENT,        *
.*       SUPERVISOR AND TSO).                                        *
.*       THE SYSTEM CAN ALSO GENERATE AND RETURN A DDNAME. THIS IS   *
.*       CARRIED OUT BY ENTERING DDNTO=(ADDR1,ADDR2,,...)            *
.*       WHERE ADDR1,ADDR2 ETC ARE THE NAMES OF 8 BYTE FIELDS WHICH  *
.*       ARE TO RECEIVE THE DDNAME.                                  *
.*       FOR FURTHER INFORMATION ON DYNAMIC ALLOCATION, SEE          *
.*       JOB MANAGEMENT, SUPERVISOR AND TSO.                         *
.*                                                                   *
.**********************************************************************
         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO
         GBLA  &DTUO              OFFSET TO TEXT UNITS
         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS
         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS
         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL
         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC
         LCLA  &DDNRTO,&DSNRTO         FOR EQUATES FOR RETURNED FLDS
         LCLA  &VOLRTO,&DSRGRTO        FOR EQUATES FOR RETURNED FIELDS
         LCLA  &I                 COUNTER
         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E
         LCLC  &C,&T,&PAR
.*
.*   THE ALLOC MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION,
&RCPS99(1)     SETB           1
&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER
&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX
&NAME    DS    0H
         AIF   ('&PREFIX' EQ '').TMF
         AIF   (K'&PREFIX LT 4).POK
         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'
&DYNP    SETC  '&PREFIX'(1,4)
         AGO   .TMF
.POK     ANOP
&DYNP    SETC  '&PREFIX'
.TMF     AIF   ('&MF(1)' EQ 'G').GEN
         AIF   ('&MF' NE 'AUTO').TMFE
NAME     DYNSPACE             GET NAME FOR SPACE
         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST
         USING &DYNP.DS,R1             USE GENERATED DSECT
&T       SETC  'A'
&PAR     SETC  '&DYNSP+4'
&DSECT   SETB  1
         AGO   .START
.TMFE    AIF   ('&MF(2)' NE '').E2OK
         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'
         AGO   .GEN
.E2OK    ANOP
&DSECT   SETB  1
         AIF   ('&MF(2)' EQ '(').RMFE
         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS
         USING &DYNP.DS,R1             USE GENERATED DSECT
         AGO   .START
.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START
         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS
         AGO   .START
.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP
.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB
         USING S99RB,R15
         ST    R15,0(R1)               AND STORE IN RB POINTER
         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST
         MVI   S99RBLN,20              MOVE IN LIST LENGTH
         MVI   S99VERB,S99VRBAL        MOVE IN VERB CODE
         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS
         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB
         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS
         USING S99TUNIT,R15
&DTUO    SETA  0
&DTUPO   SETA  0
         AIF   ('&SSREQ' EQ 'YES').SSREQ
.TDSN    AIF   ('&DSN&DA' NE '').DSN
         AIF   ('&DSNPDE' NE '').DSNPDE
         AIF   ('&DSNRET' NE '').DSNRT
         AIF   ('&SYSOUT' NE '').SYSOUT
         AIF   ('&DUMMY' NE '').DUMMY
         AIF   ('&QNAME' NE '').QNAME
.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN
         AIF   ('&DDNRET&DDNTO' NE '').DDNRT
.TUNIT   AIF   ('&UNIT&VOL' NE '').UNIT
.TSUBSYS AIF   ('&SUBSYS' NE '').SUBSYS
.TVOLRET AIF   ('&VOLRET' NE '').VOLRET
.TDSRGO  AIF   ('&DSORGRT' NE '').DSORGRT
.TLABEL  AIF   ('&LABEL' NE '').LABEL
.TPSWD   AIF   ('&PASWORD' NE '').PASWORD
.TFORUSE AIF   ('&FORUSER' NE '').FORUSER
.TTU     AIF   ('&TU' NE '').TU
.TDISP   AIF   ('&DISP' NE '').DISP
.TSPACE  AIF   ('&SPACE' NE '').SPACE
.TLRECL  AIF   ('&LRECL' NE '').DCB
         AIF   ('&DEN' NE '').DCB
         AIF   ('&RECFM' NE '').DCB
         AIF   ('&BLKSIZE' NE '').DCB
         AIF   ('&DSORG' NE '').DCB
         AIF   ('&KEYLEN' NE '').DCB
.TDCBDSN AIF   ('&DCBDSN' NE '').DCBDSN
.TDCBDDN AIF   ('&DCBDDN' NE '').DCBDDN
.TFREE   AIF   ('&FREE' EQ 'CLOSE').FREE                         TE7343
.TPERM   AIF   ('&PERM' EQ 'PERM' OR '&PERM' EQ 'PERMANENT').PERM
         AIF   ('&DUMMY' EQ 'PERM' OR '&DUMMY' EQ 'PERMANENT').PERM
.TSPECI  AIF   ('&SPECIAL' NE '').SPECIAL
         AGO   .SVC99
.SSREQ   RCPSSREQ
         AGO   .TDSN
.DSN     RCPDSN &DSN&DA,&MEMBER
         AGO   .TDDN
.DSNPDE  RCPDSNPD &DSNPDE
         AGO   .TDDN
.DSNRT   RCPDSNRT &DSNRET
&DSNRTO  SETA  &DTUO-46
         AGO   .TDDN
.SYSOUT  RCPSYSOU &SYSOUT,COPIES=&COPIES,FREE=&FREE,DEST=&DEST,        X
               FORMS=&FORMS,USER=&USER
         AGO   .TDDN
.DUMMY   RCPDUMMY &DUMMY
         AGO   .TDDN
.QNAME   RCPQNAME &QNAME
         AGO   .TDDN
.DDN     RCPDDN &DDN&F&FILE
         AGO   .TUNIT
.DDNRT   RCPDDNRT &DDNRET
&DDNRTO  SETA  &DTUO-10
         AGO   .TUNIT
.UNIT    RCPUNIT &UNIT,&VOL
         AGO   .TSUBSYS
.SUBSYS  RCPSUB  &SUBSYS
         AGO   .TVOLRET
.VOLRET  RCPVOLRT &VOLRET
&VOLRTO  SETA  &DTUO-8
         AGO   .TDSRGO
.DSORGRT RCPDSRGR
&DSRGRTO SETA  &DTUO-2
         AGO   .TLABEL
.LABEL   RCPLABEL &LABEL
         AGO   .TPSWD
.PASWORD RCPPSWD &PASWORD
         AGO   .TFORUSE
.FORUSER RCPFORUS &FORUSER
         AGO   .TTU
.TU      RCPTU &TU
         AGO   .TDISP
.DISP    RCPDISP &DISP
         AGO   .TSPACE
.SPACE   RCPSPACE &SPACE
         AGO   .TLRECL
.DCB     RCPDDCB LRECL=&LRECL,DEN=&DEN,RECFM=&RECFM,BLKSIZE=&BLKSIZE,  X
               DSORG=&DSORG,KEYLEN=&KEYLEN
         AGO .TDCBDSN
.DCBDSN  RCPDCBDS &DCBDSN
         AGO .TDCBDDN
.DCBDDN  RCPDCBDD &DCBDDN
         AGO .TFREE                                              TE7343
.FREE    RCPFREE  &FREE                                          TE7343
         AGO   .TPERM
.PERM    RCPPERM
         AGO   .TSPECI
.SPECIAL RCPSPEC &SPECIAL
.SVC99   ANOP
&DTUPO   SETA  &DTUPO-4
         SPACE
         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS
         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR
         RCPSR2 UNSAVE
&DTUPO   SETA  &DTUPO+4
         AIF   (NOT &DSECT).DYNA
         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY
         LA    R14,4(R1)               POINT TO REQUEST BLOCK
.DYNA    DYNALLOC
         AIF   (NOT &DSECT).LTR
         USING &DYNP.RB,R14            SET UP ADDRESSABILITY
**       NOTE  R14 HAS RB ADDRESS, R15 HAS SVC 99 RETURN CODE        **
.LTR     AIF   ('&ERROR' EQ '').TDDTO
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   &ERROR                  BRANCH IF NON ZERO
.TDDTO   AIF   ('&DDNTO' EQ '').RESERVE
&I       SETA  0
.DDNTOL  ANOP
&I       SETA  &I+1
         AIF   ('&DDNTO(&I)' EQ '').RESERVE
         AIF   ('&DDNTO(&I)'(1,1) EQ '(').DDNTOR
         MVC   &DDNTO(&I).(8),&DYNP.TU+&DDNRTO+2
         AGO   .DDNTOL
.DDNTOR  ANOP
&C       SETC  '&DDNTO(&I)'(2,K'&DDNTO(&I)-2)
         MVC   0(8,&C),&DYNP.TU+&DDNRTO+2
         AGO   .DDNTOL
.RESERVE AIF   (&DSECT).RESDS
         SPACE 1
***********************************************************************
**       RESERVE SPACE FOR DYNALLOC PARAMETER LIST                   **
***********************************************************************
         RCPDS
.SSP     ANOP
&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER
&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK
&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS
         AIF   (&DTUO EQ 0).DTU21
&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS
         AIF   (&DSNRTO EQ 0).TDDNRTO
&DSNRET  EQU   &DYNP.TU+&DSNRTO        OFFSET TO RETURNED DSN
.TDDNRTO AIF   ('&DDNRET' EQ '').DTU11
&DDNRET  EQU   &DYNP.TU+&DDNRTO        OFFSET TO RETURNED DDNAME
.DTU11   AIF   (&VOLRTO EQ 0).DTU12
&VOLRET  EQU   &DYNP.TU+&VOLRTO        OFFSET TO RETURNED VOLSER
.DTU12   AIF   (&DSRGRTO EQ 0).DTU10
&DSORGRT EQU   &DYNP.TU+&DSRGRTO       OFFSET TO RETURNED DSORG
         AGO   .DTU10
.DTU21   ANOP
&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS
.DTU10   ANOP
&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED
         AIF   (&DSECT).DSP
         RCPDS
         SPACE 3
         AGO   .EXIT
.RESDS   ANOP
         AIF   ('&DYNSP' EQ '').SP3
         DYNSPACE ADD
.SP3     SPACE
&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA
         AGO   .SSP
.DSP     AIF   ('&MF(3)' EQ '').END1
&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA
.END1    ANOP
&SYSECT  CSECT
         SPACE 3
.EXIT    MEND
./ ADD NAME=DPIPDU   0100-09022-09022-1155-00198-00198-00000-SCHMUM
         MACRO
         DPIPDU
*/** START OF SPECIFICATIONS *************************************** */
*/*            Distributed Protocol Interface Protocol Data Unit     */
*/*                                                                  */
*/*01* MACRO NAME: DPIPDU                                            */
*/*                                                                  */
*/*01* DESCRIPTIVE-NAME: Distributed Protocol Interface Protocol     */
*/*                      Data Unit Mapping Macro                     */
*/*                                                                  */
*/********************************************************************/
DPIPDU   DSECT ,
DPIHDR   DS    0C             DPI Header
DPIPLEN  DS    H              Packet length (MSB to LSB)
DPIPMAJ  DS    C              protocol major version
*                               2 (SNMP DPI protocol)
DPIPMIN  DS    C              protocol minor version
*                               3 (version 2)
DPIPREL  DS    C              protocol release
*                               0 (release 0)
DPIPID   DS    CL2            packet id (MSB to LSB)
DPIPTYPE DS    C              packet type
DPIGET   EQU   X'01'           DPI Get Request
DPIGETN  EQU   X'02'           DPI Get Next
DPISET   EQU   X'03'           DPI Set
DPITRAP1 EQU   X'04'           DPI Trap V1
DPIRESP  EQU   X'05'           DPI Response
DPIREG   EQU   X'06'           DPI Register
DPIUNREG EQU   X'07'           DPI Unregister
DPIOPEN  EQU   X'08'           DPI Open
DPICLOSE EQU   X'09'           DPI Close
DPICOMIT EQU   X'10'           DPI Commit
DPIUNDO  EQU   X'11'           DPI Undo
DPIGETB  EQU   X'12'           DPI Get Bulk
DPITRAP2 EQU   X'13'           DPI Trap V2
DPIINFRM EQU   X'14'           DPI Inform
DPITHERE EQU   X'15'           DPI Are You There
DPITYPE  EQU   *
DPIHDRL  EQU   *-DPIPMAJ      header length
**********************************************************************
*            DPI Get PDU                                             *
**********************************************************************
DPIG     ORG   DPITYPE
DPIGCNL  DS    H              community name length (MSB to LSB)
DPIGCN   EQU   *              community name (if any)
*DPIGGID  DS    CL?            null terminated group ID (with trailing
*                                dot)  strlen=(group ID) + 1
*DPIGIID  DS    CL?            null terminated instance ID (no trailing
*                                dot)  strlen=(instance ID) + 1
**********************************************************************
*            DPI Get Next PDU                                        *
**********************************************************************
DPIN     ORG   DPITYPE
DPINCNL  DS    H              community name length (MSB to LSB)
DPINCN   EQU   *              community name (if any)
DPINVAR  DS    0C             start of variable section
*DPINGID  DS    CL?            null terminated group ID (with trailing
*                                dot)  strlen=(group ID) + 1
*DPINIID  DS    CL?            null terminated instance ID (no trailing
*                                dot)  strlen=(instance ID) + 1
**********************************************************************
*            DPI Set PDU                                             *
**********************************************************************
DPIS     ORG   DPITYPE
DPISCNL  DS    H              community name length (MSB to LSB)
DPISCN   EQU   *              community name (if any)
DPISVAR  DS    0C             start of variable section
*DPISGID  DS    CL?            null terminated group ID (with trailing
*                                dot)  strlen=(group ID) + 1
*DPISIID  DS    CL?            null terminated instance ID (no trailing
*                                dot)  strlen=(instance ID) + 1
*DPISVART DS    CL1            SNMP Variable Type Value
*
*DPISVLEN DS    CL2            Length of value (MSB to LSB)
*DPISVAL  DS    CL?            value
**********************************************************************
*            DPI Trap PDU                                            *
**********************************************************************
DPIT     ORG   DPITYPE
DPITGTC  DS    C              SNMP generic trap code
DPITSTC  DS    C              SNMP specific trap code
DPITVAR  DS    0C             start of variable section
*DPITGID  DS    CL?            null terminated group ID (with trailing
*                                dot)  strlen=(group ID) + 1
*DPITIID  DS    CL?            null terminated instance ID (no trailing
*                                dot)  strlen=(instance ID) + 1
*DPITVART DS    CL1            SNMP Variable Type Value
*
*DPITVLEN DS    CL2            Length of value (MSB to LSB)
*DPITVAL  DS    CL?            value
**********************************************************************
*            DPI Response PDU                                        *
**********************************************************************
DPIP     ORG   DPITYPE
DPIPERRC DS    C              error code
DPIPERRI DS    CL4            error index (MSB to LSB)
DPIPVAR  EQU   *              start of variable section
*DPIPGID  DS    CL?            null terminated group ID (with trailing
*                                dot)  strlen=(group ID) + 1
*DPIPIID  DS    CL?            null terminated instance ID (no trailing
*                                dot)  strlen=(instance ID) + 1
*DPIPVART DS    CL1            SNMP Variable Type Value
*
*DPIPVLEN DS    CL2            Length of value (MSB to LSB)
*DPIPVAL  DS    CL?            value
**********************************************************************
*            DPI Register PDU                                        *
**********************************************************************
DPIR     ORG   DPITYPE
DPIRPRIO DS    F              requested priority (MSB to LSB)
DPIRTO   DS    H              timeout in seconds (MSB to LSB)
DPIRVSEL DS    C              view selection (0 = you (agent) do,
*                               1 = I do)
DPIRGBSL DS    C              getbulk selection (0=use GetNext,
*                               1=use GetBulk)
DPIRGID  EQU   *              null terminated group ID (with trailing
*                               dot)
**********************************************************************
*            DPI Unregister PDU                                      *
**********************************************************************
DPIU     ORG   DPITYPE
DPIUVSEL DS    C              reason code
DPIUGID  EQU   *              null terminated group ID (with trailing
*                               dot)
**********************************************************************
*            DPI Open PDU                                            *
**********************************************************************
DPIO     ORG   DPITYPE
DPIOTO   DS    H              requested overall timeout (seconds, MSB
*                               to LSB)
DPIOMVAR DS    H              max varBinds per DPI packet (MSB to LSB)
DPIOCSET DS    C              Selected character set (0=Native,
*                               1=ASCII)
DPIOOID  EQU   *              null terminated sub-agent ID (OID)
*                               strlen=(sub-agent ID) + 1
DPIOVAR  DS    0C             start of variable section
*DPIODESC DS    CL?            null terminated sub-agent Description
*                               strlen=(sub-agent Description) + 1
*DPIOPWL  DS    CL2            password length (zero if no password,
*                                MSB to LSB)
*DPIOPW   DS    CL?            password (if any)
**********************************************************************
*            DPI Close PDU                                           *
**********************************************************************
DPIC     ORG   DPITYPE
DPICTO   DS    C              reason code
**********************************************************************
*            DPI Commit PDU                                          *
**********************************************************************
DPIM     ORG   DPITYPE
DPIMCNL  DS    H              community name length (MSB to LSB)
DPIMCN   EQU   *              community name (if any)
DPIMVAR  DS    0C             start of variable section
*DPIMGID  DS    CL?            null terminated group ID (with trailing
*                                dot)  strlen=(group ID) + 1
*DPIMIID  DS    CL?            null terminated instance ID (no trailing
*                                dot)  strlen=(instance ID) + 1
*DPIMVART DS    CL1            SNMP Variable Type Value
*
*DPIMVLEN DS    CL2            Length of value (MSB to LSB)
*DPIMVAL  DS    CL?            value
**********************************************************************
*            DPI Undo PDU                                            *
**********************************************************************
DPID     ORG   DPITYPE
DPIDCNL  DS    H              community name length (MSB to LSB)
DPIDCN   EQU   *              community name (if any)
DPIDVAR  DS    0C             start of variable section
*DPIDGID  DS    CL?            null terminated group ID (with trailing
*                                dot)  strlen=(group ID) + 1
*DPIDIID  DS    CL?            null terminated instance ID (no trailing
*                                dot)  strlen=(instance ID) + 1
*DPIDVART DS    CL1            SNMP Variable Type Value
*
*DPIDVLEN DS    CL2            Length of value (MSB to LSB)
*DPIDVAL  DS    CL?            value
**********************************************************************
*            DPI Get Bulk PDU                                        *
**********************************************************************
DPIB     ORG   DPITYPE
DPIBNREP DS    F              non-repeaters (MSB to LSB)
DPIBMREP DS    F              max-repetitions (MSB to LSB)
DPIBVAR  DS    0C             start of variable section
*DPIBGID  DS    CL?            null terminated group ID (with trailing
*                                dot)  strlen=(group ID) + 1
*DPIBIID  DS    CL?            null terminated instance ID (no trailing
*                                dot)  strlen=(instance ID) + 1
**********************************************************************
*            CONSTANTS                                               *
**********************************************************************
tooBig   EQU   X'01'
noSuchNm EQU   X'02'
badval   EQU   X'03'
readOnly EQU   X'04'
genErr   EQU   X'05'
resUnav  EQU   X'0D'
getBlkNS EQU   X'6C'
         MEND  ,
./ ADD NAME=DYNSPACE 0100-85112-85112-0812-00052-00052-00000-MAS1
         MACRO
&NAME    DYNSPACE &TYPE
.*
.*    THIS IS AN INNER MACRO TO ALLOC/FREE.
.*    IT IS CALLED TO   A) NAME AN AREA FOR THE PARMLIST
.*                      B) LOG THE VARIOUS AMOUNTS NEEDED BY
.*                         EACH, REMEMBERING THE LARGEST.
.*                      C) GENERATING A DS FOR THE LARGEST AMOUNT.
.*    THE FIRST TWO FUNCTIONS ARE INVOKED BY ALLOC/FREE MACROS ONLY,
.*    AND THE THIRD IS USED BY THE PROGRAMMER, EITHER EXPLICITLY,
.*    OR BY BEGINWKA, IF THE LATTER IS USED.
.*
.*     TO INVOKE THE NAMING FUNCTION, ALLOC/FREE GENERATE
.*     NAME DYNSPACE
.*     NOTE. THE NAMING OPERATION ONLY GENERATES A NAME ON THE
.*     FIRST CALL IN THE ASSEMBLY. THE NAME REMAINS THE SAME UNTIL
.*     DYNSPACE IS CALLED TO EXPAND INTO A DS.
.*
.*     THE SECOND FUNCTION IS INVOKED BY THE MACRO CALL
.*          DYNSPACE ADD
.*     (NO NAME FIELD AND ONE OPERAND)
.*     IT USES THE GLOBAL VARIABLES &DTUO AND &DTUPO TO CALCULATE
.*     THE SPACE FOR THIS REQUEST, AND UPDATES &DYNSPQ ONLY IF THE
.*     CURRENT REQUEST IS FOR A GREATER AMOUNT
.*
.*     THE THIRD FUNCTION IS INVOKED BY CALLING DYNSPACE WITH NO
.*     NAME OR OPERAND FIELD.
.*     THIS EXPANDS INTO A DEFINE STORAGE, CLEARS THE DYNSPACE NAME
.*     GLOBAL SETC, AND THE &DYNSPQ GLOBAL SETA.
.*     THUS, THE MACRO IS SERIALLY REUSABLE IN ALL FUNCTIONS.
.*
         GBLA  &DYNSPQ,&DTUO,&DTUPO,&RCPDYN
         GBLC  &DYNP,&DYNSP
         LCLA  &I
         AIF   ('&NAME' NE '').NAME
         AIF   ('&TYPE' EQ '').ALLOC
.*   THE ACCUMULATE FUNCTION IS REQUIRED
&I       SETA  24+&DTUO+&DTUPO         GET AMOUNT FOR THIS REQUEST
         AIF   (&I LE &DYNSPQ).EXIT    IF CURRENT < MAX, EXIT
&DYNSPQ  SETA  &I                      ELSE UPDATE CURRENT MAXIMUM
         MEXIT
.NAME    AIF   ('&DYNSP' NE '').EXIT   IF NAME ALREADY EXISTS, EXIT
&DYNSP   SETC  'DYNSP&RCPDYN'           ELSE GENERATE A NAME
.EXIT    MEXIT
.ALLOC   AIF   ('&DYNSP' EQ '').EXIT
*
**     RESERVE SPACE FOR ALLOC/FREE MACRO WORK AREA
*
&DYNSP   DS    0F,CL&DYNSPQ            RESERVE SPACE
&DYNSP   SETC  ''                      SET MAX QUANTITY TO 0
&DYNSPQ  SETA 0
         MEND
./ ADD NAME=ENTERX   0100-91039-91039-1038-00138-00138-00000-MAS00T
         MACRO
&SUBR    ENTERX &BASES,&SAVE,&CSECT
.*   THIS MACRO, USED WITH THE LEAVE MACRO, WILL PERFORM
.*   STANDARD HOUSEKEEPING FOR A CSECT, INCLUDING SAVEAREA
.*   CONSTRUCTION AND CHAINING, AND GETTING SOME STORAGE,
.*   IF THAT IS DESIRED.
.*   THE LEAVE MACRO WILL FREE THE GOTTEN STORAGE
.*   THE OPERANDS ARE
.*       &SUBR    ENTER  &BASES,&SAVE,&CSECT
.*    WHERE
.*       &SUBR    IS THE NAME OF THE CSECT
.*       &BASES   ARE THE BASE REGISTERS FOR THE ROUTINE
.*       &SAVE    IS THE LABEL FOR A SAVEAREA, OR A SUBPOOL
.*                AND LENGTH FOR THE GETMAIN
.*       &CSECT   TO CONTINUE AN EXISTING CSECT WITH ENTRY
.*                POINT &SUBR
.*
.*    EXAMPLES -
.*               ENTER 13,*
.*
.*       THIS WILL GENERATE NON-REENTRANT CODE, USING SAVEAREA
.*       AS THE SAVE AREA LABEL, AND REGISTER 13 FOR THE BASE
.*       REGISTER.
.*
.*       RENTMOD  ENTER (12,11),(,LDSECT)
.*
.*       THIS WILL GENERATE REENTRANT CODE WITH REGISTERS 12 AND
.*       11 FOR BASE REGISTERS.  A GETMAIN WILL BE DONE FOR THE
.*       DEFAULT SUBPOOL (0) WITH A LENGTH 'LDSECT'.
.*
         GBLC  &LV,&SP
         LCLA  &K,&N
         LCLC  &AREA,&B(16),&SUBNAME,&S
&SUBNAME SETC  '&SUBR'
         AIF   ('&SUBNAME' NE '').SUBSPEC
&SUBNAME SETC  'MAIN'         DEFAULT CSECT NAME
.SUBSPEC AIF   ('&CSECT' EQ '').NOTENT  IS IT AN ENTRY POINT?
&CSECT   CSECT
&SUBNAME DS    0F
         AGO   .CSSPEC
.NOTENT  ANOP
&SUBNAME CSECT
.CSSPEC  ANOP
         SAVE  (14,12),T,&SUBNAME   SAVE THE REGISTERS
         AIF   ('&BASES(1)' EQ '15' OR '&BASES' EQ '').R15SET
         AIF   ('&BASES(1)' EQ '13' AND '&SAVE' NE '').R15SET
         LR    &BASES(1),15  SET FIRST BASE REG
.R15SET  CNOP  0,4
&S       SETC  '&SUBNAME'
         AIF   (N'&SAVE EQ 2).P4   SUBPOOL, SIZE SPEC?
         AIF   ('&SAVE' EQ '').P3  NO SAVEAREA - DEFAULT
&AREA    SETC  '&SAVE'
         AIF   ('&SAVE' NE '*').P2
&AREA    SETC  'SAVEAREA'
.P2      AIF   ('&BASES(1)' NE '13').P4
&S       SETC  '*'
         USING &SUBNAME,15
         ST    14,&AREA+4
         LA    14,&AREA
         ST    14,8(13)
         L     14,&AREA+4
         ST    13,&AREA+4
         BAL   13,*+76        SKIP AROUND THE SAVEAREA
         DROP  15
         AGO   .P4
.P3      AIF   ('&BASES(1)' NE '13').P4
         MNOTE 8,'*** CONTENTS OF REG 13 ARE LOST.  NO SAVE AREA WAS ESX
               TABLISHED.'
.P4      AIF   ('&BASES(1)' NE '14' OR '&SAVE' EQ '').P5
         MNOTE 8,'*** MACRO RESTRICTION - REG 14 MUST NOT BE USED AS THX
               E FIRST BASE REGISTER IF A SAVE AREA IS USED.'
.P5      AIF   ('&BASES' EQ '').P9
&N       SETA  N'&BASES
.P6      ANOP
&K       SETA  &K+1
&B(&K)   SETC  ','.'&BASES(&K)'
         AIF   (N'&SAVE EQ 1).PE
         AIF   ('&BASES(&K)' NE '13').P7
         MNOTE 8,'*** REG 13 MAY NOT BE USED AS A BASE REGISTER FOR REEX
               NTRANT CODE.'
         AGO   .P7
.PE      AIF   ('&BASES(&K+1)' NE '13' OR '&SAVE' EQ '').P7
         MNOTE 8,'*** WHEN USING A SAVE AREA, REG 13 MAY NOT BE USED ASX
                A SECONDARY BASE REGISTER.'
.P7      AIF   ('&BASES(&K+1)' NE '').P6
         USING &S&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)&B(9)&B(10)&B(X
               11)&B(12)&B(13)&B(14)&B(15)&B(16)
&K       SETA  1
         AIF   ('&BASES(1)' NE '13' OR '&SAVE' EQ '').P8
&AREA    DC    18F'0'
.P8      AIF   (&K GE &N).P10
         LA    &BASES(&K+1),X'FFF'(&BASES(&K))
         LA    &BASES(&K+1),1(&BASES(&K+1))
&K       SETA  &K+1
         AGO   .P8
.P9      USING &SUBNAME,15
.P10     AIF   (N'&SAVE GE 2).P13
         AIF   ('&SAVE' EQ '' OR '&BASES(1)' EQ '13').P12
         AIF   ('&SAVE(1,1)' GE '0').P16  NUMERIC MEANS A PASSED AREA
         ST    14,&AREA+4
         LA    14,&AREA
         ST    14,8(13)
         L     14,&AREA+4
         ST    13,&AREA+4
.P11     BAL   13,*+76       SKIP AROUND THE SAVEAREA
&AREA    DC    18F'0'
.P12     MEXIT
.P13     ANOP
&LV      SETC  '&SAVE(2)'
&SP      SETC  '0'
         AIF   ('&SAVE(1)' EQ '').P14
&SP      SETC  '&SAVE(1)'
.P14     CNOP  0,4          DO A GETMAIN FOR THE AREA
         BAL   1,*+8          POINT THE SP AND LV
ENT&SYSNDX DC  AL1(&SP)       SUBPOOL FOR THE GETMAIN
         DC    AL3(&LV)       LENGTH OF THE GETMAIN
         L     0,0(1)         GET THE DATA IN REG 1
         SVC   10             ISSUE THE GETMAIN
.*                            CHAIN THE SAVEAREAS
         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE
         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS
         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS
         LR    13,1           THIS IS MY SAVEAREA
         LA    4,12(13)       YES, POINT PAST THE CHAIN
         L     5,ENT&SYSNDX   GET THE SIZE
         LA    6,12           MINUS THE CHAIN AREA (12 BYTES )
         SR    5,6            GIVES THE AMOUNT TO CLEAR
         SR    7,7            CLEAR THE FROM COUNT AND CLEAR BYTE
         MVCL  4,6            WHEE, CLEAR IT OUT
         LM    0,7,20(2)      RESTORE THE ORIGINAL REGISTERS
         MEXIT
.P16     L     1,&AREA+0(1)   NUMERIC &SAVE IMPLIES A PASSED SAVEAREA
         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE
         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS
         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS
         LR    13,1           THIS IS MY SAVEAREA
         LM    0,2,20(2)      RESTORE ORIGINAL REGS
         MEND
./ ADD NAME=FREE     0100-85112-85112-0814-00133-00133-00000-MAS1
         MACRO
&NAME    FREE  &UNALC,&DSN=,&DDN=,&MEMBER=,&DISP=,&SYSOUT=,            X
               &ERROR=,&MF=AUTO,&PREFIX=,&FILE=,&F=,&DA=,&HOLD=
         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO
         GBLA  &DTUO              OFFSET TO TEXT UNITS
         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS
         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS
         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL
         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC
         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E
         LCLC  &C,&T,&PAR
&RCPS99(1)     SETB           1
&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER
&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX
&NAME    DS    0H
         AIF   ('&PREFIX' EQ '').TMF
         AIF   (K'&PREFIX LT 4).POK
         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'
&DYNP    SETC  '&PREFIX'(1,4)
         AGO   .TMF
.POK     ANOP
&DYNP    SETC  '&PREFIX'
.TMF     AIF   ('&MF(1)' EQ 'G').GEN
         AIF   ('&MF' NE 'AUTO').TMFE
NAME     DYNSPACE             GET NAME FOR SPACE
         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST
         USING &DYNP.DS,R1             USE GENERATED DSECT
&T       SETC  'A'
&PAR     SETC  '&DYNSP+4'
&DSECT   SETB  1
         AGO   .START
.TMFE    AIF   ('&MF(2)' NE '').E2OK
         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'
         AGO   .GEN
.E2OK    ANOP
&DSECT   SETB  1
         AIF   ('&MF(2)' EQ '(').RMFE
         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS
&T       SETC  'A'
&PAR     SETC  '&MF(2)+4'
         USING &DYNP.DS,R1             USE GENERATED DSECT
         AGO   .START
.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START
&PAR     SETC  '&MF(2)'(2,K'&MF(2)-2)
&T       SETC  'R'
         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS
&PAR     SETC  '4&MF(2)'
         USING &DYNP.DS,R1             USE GENERATED DSECT
         AGO   .START
.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP
&T       SETC  'A'
&PAR     SETC  '&DYNP.RB'
.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB
         USING S99RB,R15
         ST    R15,0(R1)               AND STORE IN RB POINTER
         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST
         MVI   S99RBLN,20              MOVE IN LIST LENGTH
         MVI   S99VERB,S99VRBUN        MOVE IN VERB CODE
         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS
         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB
         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS
         USING S99TUNIT,R15
&DTUO    SETA  0
&DTUPO   SETA  0
         AIF   ('&DSN&DA' NE '').DSN
         AIF   ('&SYSOUT' NE '').SYSOUT
.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN
.TDISP   AIF   ('&DISP' NE '').DISP
.TUNALC  AIF   ('&UNALC' NE '').PERM
.THOLD   AIF   ('&HOLD' NE '').HOLD
         AGO   .SVC99
.DSN     RCPFDSN &DSN&DA,&MEMBER
         AGO   .TDDN
.SYSOUT  RCPFSYS &SYSOUT
         AGO   .TDDN
.DDN     RCPFDDN &DDN&F&FILE
         AGO   .TDISP
.DISP RCPFDISP &DISP
         AGO   .TUNALC
.PERM    RCPUNALC
         AGO   .THOLD
.HOLD    RCPFHOLD &HOLD
.SVC99   ANOP
&DTUPO   SETA  &DTUPO-4
         SPACE
         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS
         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR
         RCPSR2 UNSAVE
&DTUPO   SETA  &DTUPO+4
         AIF   (NOT &DSECT).DYNA
         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY
.DYNA    DYNALLOC
         AIF   ('&ERROR' EQ '').RESERVE
         AIF   ('&PAR' EQ '').LTR
         L&T   R14,&PAR                 LOAD REG 14 WITH ADDRESS OF RB
         AIF   (NOT &DSECT).LTR
         USING &DYNP.RB,R14            SET UP ADDRESSABILITY
.LTR     LTR   R15,R15                 TEST RETURN CODE
         BNZ   &ERROR                  BRANCH IF NON ZERO
**       NOTE.  R14 POINTS TO REQUEST BLOCK, R15 HAS RETURN CODE     **
.RESERVE AIF   (&DSECT).RESDS
         SPACE
***********************************************************************
**       RESERVE SPACE FOR DYNALLOC DATA                             **
***********************************************************************
         RCPDS
.SSP     ANOP
&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER
&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK
&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS
         AIF   (&DTUO EQ 0).DTU11
&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS
         AGO   .DTU10
.DTU11   ANOP
&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS
.DTU10   ANOP
&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED
         AIF   (&DSECT).DSP
         RCPDS
         SPACE 3
         AGO   .EXIT
.RESDS   ANOP
         AIF   ('&DYNSP' EQ '').SP3
         DYNSPACE ADD
.SP3     SPACE
&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA
         AGO   .SSP
.DSP     AIF   ('&MF(3)' EQ '').END1
&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA
.END1    ANOP
&SYSECT  CSECT
         SPACE 3
.EXIT    MEND
./ ADD NAME=LEAVE    0100-91039-91039-1038-00018-00018-00000-MAS00T
         MACRO
&NAME    LEAVE &EQ,&RC=
         GBLC  &LV,&SP
&NAME    LR    2,13
         L     13,4(13)
         AIF   ('&RC' EQ '').L0
         LA    15,&RC         LOAD THE RETURN CODE
.L0      STM   15,1,16(13)  STORE RETURN REGS
         AIF   ('&LV' EQ '').L1  ANYTHING TO FREE?
         FREEMAIN R,LV=&LV,SP=&SP,A=(2)  FREE THE AREA
         LTR   15,15
         BZ    GONE
         ABEND 999,DUMP
GONE     DS    0H
.L1      RETURN (14,12),T     RETURN FROM WHENCE WE CAME
         AIF   ('&EQ' NE 'EQ').L4  REGISTERS TOO?
         REGS
.L4      MEND
./ ADD NAME=NIMAGCB  0103-09022-09029-1334-00288-00288-00003-SCHMUM
         MACRO -- NIMAGCB - Agent Control Block
         NIMAGCB ,
         IEZBITS ,                 Symbolic bits
         SPACE 1
***********************************************************************
*                                                                     *
*        NIMAGCB - Agent Control Block (AGCB)                         *
*                                                                     *
*  FUNCTION:                                                          *
*                                                                     *
*        This control block is used by the agent, NIMAGENT.           *
*        It contains all of the non-static data areas needed by       *
*        that reentrant code, including parameter lists for system    *
*        services, anchors for controls blocks for the sub tasks,     *
*        agent options, ECBs, etc.                                    *
*                                                                     *
*  USED BY:                                                           *
*                                                                     *
*        NIMAGENT, NIMEXST, NIMDASD, NIMJES2, NIMHSM, NIMESTAE, NIMSYS*
*                                                                     *
*        CREATED BY: NIMAGENT        FREED BY: NIMAGENT               *
*                                                                     *
*        SUBPOOL: 230                KEY: 1                           *
*                                                                     *
*        SIZE: SEE AGCBLEN                                            *
*                                                                     *
*        POINTED TO BY:  R11 in NIMxxxx                               *
*                                                                     *
*        FREQUENCY:  one AGCB is allocated by NIMAGENT                *
*                                                                     *
*        RESIDENCY:  Virtual and Real - below the 16M line, although  *
*                    alternate data areas for some of the fields may  *
*                    be used if necessary AMODE 31 support is there.  *
*                                                                     *
*        SERIALIZATION:  Fields in this control block may only be     *
*                        altered by the agent task, and preferably    *
*                        only by code in subtasks. Fields can be      *
*                        referenced by other tasks without concern    *
*                        about the AGCB being deleted.                *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT ,
AGCB     DSECT ,                   Agent Control Block dsect
AGCBID   DC    C'AGCB'             control block ID
AGCBAGCB DS    A                   Address of this control block
         SPACE 1
***********************************************************************
*                                                                     *
*        SHANDS MIB                                                   *
*                                                                     *
***********************************************************************
*        SYSTEM - METRICS                                             *
***********************************************************************
SYSMET   EQU   *
SYSID    DS    XL3,CL8             SYSTEM ID
CPUMDL   DS    XL3,CL8             CPU MODEL
PRODNM   DS    XL3,CL16            PRODUCT NAME
PRODVER  DS    XL3,CL8             PRODUCT VERSION
IPLDATE  DS    XL3,CL6             LAST IPL DATE
IPLTIME  DS    XL3,CL8             LAST IPL TIME
SYSSTAT  DS    XL3,C               System status
CPUUTIL  DS    XL3,CL4             CPU utilization
JESSPLU  DS    XL3,CL3             JES2 spool utilization
JESJOEU  DS    XL3,CL3             JES2 JOE utilization
JESJQEU  DS    XL3,CL3             JES2 JQE utilization
SYSVNUM  EQU   11
***********************************************************************
*        DASD METRICS                                                 *
***********************************************************************
DASDMET  EQU   *
V2X1STAT DS    XL3,C               V2X1 status
V2X2STAT DS    XL3,C               V2X2 status
DASDVNUM EQU   (*-DASDMET)/4
***********************************************************************
*        APPLICATION METRICS - CICS                                   *
***********************************************************************
CICSMET  EQU   *
SMSPROD  DS    XL3,C               CICS region status
SMSPRD2  DS    XL3,C               CICS region status
SMSEADP  DS    XL3,C               CICS region status
HISPROD  DS    XL3,C               CICS region status
HISRS    DS    XL3,C               CICS region status
SMSTEST  DS    XL3,C               CICS region status
SMS2TST  DS    XL3,C               CICS region status
SMSEADT  DS    XL3,C               CICS region status
HISTST   DS    XL3,C               CICS region status
CSFP     DS    XL3,C               CICS region status
CICSVNUM EQU   (*-CICSMET)/4
***********************************************************************
*        APPLICATION METRICS - DB2                                    *
***********************************************************************
DB2MET   EQU   *
DSNPMSTR DS    XL3,C               DB2 region status
DSNPDBM1 DS    XL3,C               DB2 region status
DSNPDIST DS    XL3,C               DB2 region status
IRLMPROC DS    XL3,C               DB2 region status
DSNHMSTR DS    XL3,C               DB2 region status
DSNHDBM1 DS    XL3,C               DB2 region status
DSNHDIST DS    XL3,C               DB2 region status
IRLMPROH DS    XL3,C               DB2 region status
DB2VNUM  EQU   (*-DB2MET)/4
***********************************************************************
*        APPLICATION METRICS - STC                                    *
***********************************************************************
STCMET   EQU   *
STCUC4   DS    XL3,C               UC4 status
STCXPTR  DS    XL3,C               XPTRMAIN (SystemWare) status
STCNEMC  DS    XL3,C               NIMBEMCS (Nimbus console) status
STCPSYNC DS    XL3,C               PSYNC status
STCVNUM  EQU   (*-STCMET)/4
***********************************************************************
*        APPLICATION METRICS - HSM                                    *
***********************************************************************
HSMMET1  EQU   *
HSMSTAT  DS    XL3,C               HSM status
HSMVNUM1 EQU   (*-HSMMET1)/4
HSMMET2  EQU   *
HSMBCDS  DS    XL3,CL3             HSM BCDS freespace
HSMMCDS  DS    XL3,CL3             HSM MCDS freespace
HSMOCDS  DS    XL3,CL3             HSM OCDS freespace
HSMJRNL  DS    XL3,CL3             HSM Journal freespace
HSMVNUM2 EQU   (*-HSMMET2)/4
         SPACE 1
***********************************************************************
*                                                                     *
*        General work areas, subtask address space information, etc.  *
*                                                                     *
***********************************************************************
         SPACE 1
AGCBDWD  DS    D                   Double word work area
AGCBXINT DS    D                   Timer interval for NIMEXST
AGCBJINT DS    D                   Timer interval for NIMJES2
AGCBHINT DS    D                   Timer interval for NIMHSM
AGCBDINT DS    D                   Timer interval for NIMDASD
AGCBSINT DS    D                   Timer interval for NIMSYS
AGCBDW2  DS    D                   Message data work area
AGCBCOMM DS    32D                 Data area for operator commands
BUF      DS    10D                 BUFFER FOR READ/WRITE
RESPPDU  DS    10D                 DPI response buffer
AGCBMN   DS    CL8                 Module name
AGCBEXTA DS    0A                  EXTRACT answer area, order dependent
AGCBTIOT DS    A                    Address of TIOT
AGCBCOM  DS    A                    Address of COM area
AGCBCIB  DS    F                   Address of active CIB
AGCBDIDS DS    0F                  Beginning of the message DOM IDs
AGCBDID1 DS    F                    DOM ID for SFSS001I
AGCBDID2 DS    F                    DOM ID for SFSS002I
AGCBDIDN EQU   (*-AGCBDIDS)/4      Number of message DOM IDs
AGCBRECB DS    F                   ECB for possible WTORs
AGCBFLG1 DS    F                   General flag for dispatching
AGCB1STP EQU   B'00010000'          Agent ordered by ops to stop
AGCB1ABE EQU   B'00001000'          Agent is ABENDing
AGCB1EOF EQU   B'10000000'          EOF encountered for PARMLIB
AGCBFWD  DS    F                   work area
AGCBMODA DS    A                   Address of NIMAGNT
AGCBMODX DS    A                   Address of NIMEXST
AGCBMODJ DS    A                   Address of NIMJES2
AGCBMODH DS    A                   Address of NIMHSM
AGCBMODD DS    A                   Address of NIMDASD
AGCBMODS DS    A                   Address of NIMSYS
AGCBCECB DS    F                   Comunication ECB
*
AGCBXTCB DS    F                   Exist subtask TCB
AGCBXECB DS    F                   Exist subtask ECB
AGCBECBX DS    F                   Exist communication ECB
*
AGCBJTCB DS    F                   JES2 subtask TCB
AGCBJECB DS    F                   JES2 subtask ECB
AGCBECBJ DS    F                   JES2 communication ECB
*
AGCBHTCB DS    F                   HSM subtask TCB
AGCBHECB DS    F                   HSM subtask ECB
AGCBECBH DS    F                   HSM communication ECB
*
AGCBDTCB DS    F                   Dasd subtask TCB
AGCBDECB DS    F                   Dasd subtask ECB
AGCBECBD DS    F                   DASD communication ECB
*
AGCBSTCB DS    F                   Sys subtask TCB
AGCBSECB DS    F                   Sys subtask ECB
AGCBECBS DS    F                   Sys communication ECB
*
AGCBECBL DS    0F                  List of ECB addresses
SECBA    DS    F                   SELECTEX ECB address
CECBA    DS    F                   Communications ECB address
RSNDMASK DS    F                  *Read mask
RRETMASK DS    F                  *Returned read mask
SECB     DS    F                  SELECTEX ecb
ERRNO    DS    F
RETCODE  DS    F
HOW      DS    F                  END COMMUNICATION TO- AND FROM-SOCKET
INSTANCS DS    F                  instance identifier - start
INSTANCE DS    F                  instance identifier - end
HSMASCB  DS    F                  ascb of DFHSM
FUNC     DS    CL8                function name
HSMASID  DS    H                  asid of dfhsm
AGCBRCVL DS    H                  Binary number for single Route Code
SOCKDESC DS    H                  socket descriptor
AGCBTMP  DS    CL5                Work area
AGCBTMP2 DS    CL9                Work area
AGCBINST DS    C                  instance number
INITFLAG DS    BL1                daughter init flag
SYSBIT   EQU   BIT3               nimsys init flag
EXSTBIT  EQU   BIT4               nimexst init flag
JES2BIT  EQU   BIT5               nimjes2 init flag
HSMBIT   EQU   BIT6               nimhsm init flag
DASDBIT  EQU   BIT7               nimdasd init flag
MODFLAG  DS    BL1                daughter command flag
MAINTBIT EQU   BIT1               exist - set something in maint mode
SHUTBIT  EQU   BIT7               shutdown
EXSTFLG  DS    BL1                NIMEXST work flag
MAINTON  EQU   BIT1               turn maint mode on
MAINTOFF EQU   BIT2               turn maint mode off
METFND   EQU   BIT3               metric entry found
         CNOP  0,4
NAME     DS    0CL16              SOCKET NAME STRUCTURE
FAMILY   DS    AL2                FAMILY
PORT     DS    H
ADDRESS  DS    F
         DS    XL8                RESERVED
MYTIE    EZASMI TYPE=TASK,STORAGE=CSECT     TIE
EZASMGW  EZASMI TYPE=GLOBAL,      STORAGE DEFINITION FOR GWA           C
               STORAGE=CSECT
***********************************************************************
*                                                                     *
*        Save areas for various routines in subtasks                  *
*                                                                     *
***********************************************************************
         SPACE 1
AGCBSAVE DS    18F                 Save area for agent code
REGSAVE  DS    4F                  Save area for subroutine branches
         SPACE 1
***********************************************************************
*                                                                     *
*        Provide a single work area for short-term use to allow for   *
*        NIMAGENT to remain reentrant.  This combines the needs for   *
*        various parameters lists for MVS system services.            *
*                                                                     *
*        *  A WPL, with WPX, for building WTO messages - the maximum  *
*           length this component would ever want is used.            *
*        *  A WPL, with WPX, for building WTOR messages - the maximum *
*           length this component would ever want is used.            *
*        *  A parameter list for the ESTAE call                       *
*        *  A parameter list for the ATTACHs for subtasks             *
*        *  A parameter list for the EXTRACT call                     *
*                                                                     *
***********************************************************************
         SPACE 1
AGCBMPL  DS    0F                  Parm area for WTO, ESTAE, etc
         SPACE 1
*        WTO   '1234567890123456789012345678901234567890123456789012345
*              678901234567890123456789012345678901234567890',
*              ROUTCDE=(2,17),DESC=(2,7),MF=L
         WTO   '1234567890123456789012345678901234567890123456789012345C
               678901234567890123456789012345678901234567890',         C
               ROUTCDE=(2,17),DESC=(2,7),MF=L
         EJECT ,
         ORG   AGCBMPL             ORG back for WTOR WPL
*        WTOR  '1234567890123456789012345678901234567890123456789012345
*              678901234567890123456789012345678901234567890',
*              *-*,1,*-*,ROUTCDE=(1,10,17),DESC=(2),MF=L
         WTOR  '1234567890123456789012345678901234567890123456789012345C
               678901234567890123456789012345678901234567890',         C
               *-*,1,*-*,ROUTCDE=(1,10,17),DESC=(2),MF=L
         SPACE 2
         ORG   AGCBMPL             ORG back for ESTAE parm list
*        ESTAE *-*,TERM=YES,RECORD=YES,PARAM=*-*,MF=L
         ESTAE *-*,TERM=YES,RECORD=YES,PARAM=*-*,MF=L
AGCBEPLL EQU   *-AGCBMPL           Length of ESTAE parm list
         EJECT ,
         ORG   AGCBMPL             ORG back for ATTACH parm list
*        ATTACH EPLOC=*-*,ECB=*-*,SM=SUPV,DISP=YES,SZERO=NO,SF=L
         ATTACH EPLOC=*-*,ECB=*-*,SM=SUPV,DISP=YES,SZERO=NO,SF=L
AGCBAPLL EQU   *-AGCBMPL           Length of ATTACH parm list
         SPACE 2
         ORG   AGCBMPL             ORG back for EXTRACT parm list
*        EXTRACT *-*,'S',FIELDS=(COMM,TIOT),MF=L
         EXTRACT *-*,'S',FIELDS=(COMM,TIOT),MF=L
AGCBXPLL EQU   *-AGCBMPL           Length of EXTRACT parm list
         SPACE 2
         SPACE 2
         ORG   ,                   ORG to end of parm lists
         SPACE 1
         DS    0D
AGCBLEN  EQU   *-AGCB              AGCB length
.*
         MEND  ,                   End of macro IAZAGCB
./ ADD NAME=NIMSTCB  0107-09022-09029-1258-00122-00117-00013-SCHMUM
         MACRO -- NIMSTCB - Sub task Control Block
         NIMSTCB ,
         SPACE 1
***********************************************************************
*                                                                     *
*        NIMSTCB - Sub Task Control Block (STCB)                      *
*                                                                     *
*  FUNCTION:                                                          *
*                                                                     *
*        This control block is used by the sub tasks.                 *
*        It contains most of the non-static data areas needed by      *
*        that reeentrant code, including parameter lists for system   *
*        services, ECBs, etc.                                         *
*                                                                     *
*  USED BY:                                                           *
*                                                                     *
*        NIMEXIST, NIMDASD, NIMJES2, NIMESTAE, NIMHSM                 *
*                                                                     *
*        CREATED BY: NIMxxxx         FREED BY: NIMxxxx                *
*                                                                     *
*        SUBPOOL: 230                KEY: 1                           *
*                                                                     *
*        SIZE: see STCBLEN                                            *
*                                                                     *
*        POINTED TO BY:  R10 in NIMxxxx                               *
*                                                                     *
*        FREQUENCY:  one STCB is allocated for each sub task.         *
*                                                                     *
*        RESIDENCY:  Virtual and Real - below the 16M line            *
*                    negotiated to use full AMODE 31 support          *
*                                                                     *
*        SERIALIZATION:  Fields in this control block may only be     *
*                        referenced by the owning sub task,           *
*                        preferably only by code in NIMxxxx.  The     *
*                        STCB cannot be referenced by other tasks     *
*                        without concern about it being deleted.      *
*                                                                     *
***********************************************************************
         EJECT ,
***********************************************************************
*                                                                     *
*        General work areas, ECBs, flags, etc.                        *
*                                                                     *
***********************************************************************
         SPACE 1
STCB     DSECT ,                   Sample FSA Control Block dsect
STCBID   DC    C'STCB'             Control block ID
STCBMN   DS    CL8                 Module name
STCBDWD  DS    D                   Double word work area
STCBDWD2 DS    D                   Double word work area
STCBSAVE DS    18F                 Subtask top save area
STCBWD   DS    F                   Word work area
STCBTMID DS    F                   Word for Timer Services to place id
STCBTECB DS    A                   Timer ECB
STCBECBL DS    0F                  ECB list for sub task
STCBTEP  DS    A                   address of timer ECB
STCBCEP  DS    A                   address of agent communication ECB
STCBAGCB DS    A                   Agent control block
STCBCOMA DS    A                   Comm address
STCBERBL DS    A                   ERBSMFI buffer length
PARMLIST DS    7A                  Parmlist for erbsmfi
CPUUTL   DS    F                   Return area for CPU util.
DPR      DS    F                   Return area for demand paging
STCBFLG1 DS    X                   General communications flag byte
STCB1ABE EQU   B'00000100'         the Subtask is ABENDing
STCB1TIM EQU   B'00001000'         timer still outstanding
STCB1TRM EQU   B'00010000'         the Subtask should terminate
MyAxrDiag DS   CL(AXRDIAG_LEN)        40
MyVarLst DS    CL(AXRARGLST_LEN)      16
MyVarEn1 DS    CL(AXRARGENTRY_LEN)    40
MyVarEn2 DS    CL(AXRARGENTRY_LEN)    40
JOEINT   DS    CL3                 Return area for JOE percentage
JQEINT   DS    CL3                 Return area for JQE percentage
OutRC    DS    F                   Return code from AXREXX
OutRsn   DS    F                   Reason code from AXREXX
         SPACE 1
***********************************************************************
*                                                                     *
*        Provide a single work area for short-term use to allow for   *
*        NIMxxxx to remain reentrant.  This combines the needs for    *
*        various parameters lists for MVS system services.            *
*                                                                     *
*        *  A WPL, with WPX, for building WTO messages - the maximum  *
*           length this component would ever want is used.            *
*        *  A WPL, with WPX, for building WTOR messages - the maximum *
*           length this component would ever want is used.            *
*        *  A parameter list for the ESTAE call                       *
*        *  A parameter list for the STIMERM SET/CANCEL calls         *
*                                                                     *
***********************************************************************
         SPACE 1
STCBMPL  DS    0F                  Parm area for WTO, ESTAE, etc
         SPACE 1
         WTO   '1234567890123456789012345678901234567890123456789012345C
               678901234567890123456789012345678901234567890',         C
               ROUTCDE=(2,17),DESC=(2,7),MF=L
         EJECT ,
         ORG   STCBMPL             ORG back for WTOR WPL       @420LPCW
         WTOR  '1234567890123456789012345678901234567890123456789012345C
               678901234567890123456789012345678901234567890',         C
               *-*,1,*-*,ROUTCDE=(1,10,17),DESC=(2),MF=L       @420LPCW
         SPACE 1                                               @420LPCW
STCBRECB DS    F                   ECB for possible WTORs      @420LPCW
STCBRPLY DS    CL112               Response area for WTORs     @420LPCW
         EJECT                                                 @420LPCW
         ORG   STCBMPL             ORG back for ESTAE parm list
         ESTAE *-*,TERM=YES,RECORD=YES,PARAM=*-*,MF=L
STCBEPLL EQU   *-STCBMPL           Length of ESTAE parm list
         SPACE 2                                               @420LPCW
         ORG   STCBMPL             ORG back for STIMERM parm list
         STIMERM SET,MF=L          STIMERM parameter list
STCBSPLL EQU   *-STCBMPL           Length of STIMERM parm list
         SPACE 1
         ORG   STCBMPL             ORG back for STIMERM parm list
         AXREXX MF=(L,NIMSTCB)
STCBAPLL EQU   *-STCBMPL           Length of ESTAE parm list
         SPACE 1
         ORG   ,                   ORG to end of parm lists
STCBLEN  EQU   *-STCB              STCB Length
.*
         AXRZARG DSECT=YES,AXRARGLST=YES,AXRARGENTRY=YES,AXRDIAG=YES
         MEND  ,                   End of macro NIMSTCB
./ ADD NAME=RCPBFRGS 0100-85112-85112-0816-00019-00019-00000-MAS1
         MACRO
         RCPBFRGS &BUFPTR,&WKREGS
         GBLC  &RCPBFRP,&RCPBFR1,&RCPBFR2
         AIF   ('&BUFPTR' EQ '').TGP
&RCPBFRP SETC  '&BUFPTR'
         AGO   .TWK1
.TGP     AIF   ('&RCPBFRP' NE '').TWK1
&RCPBFRP SETC  'R1'
.TWK1    AIF   ('&WKREGS(1)' EQ '').TG1
&RCPBFR1 SETC  '&WKREGS(1)'
         AGO   .TWK2
.TG1     AIF   ('&RCPBFR1' NE '').TWK2
&RCPBFR1 SETC  'R14'
.TWK2    AIF   ('&WKREGS(2)' EQ '').TG2
&RCPBFR2 SETC  '&WKREGS(2)'
         MEXIT
.TG2     AIF   ('&RCPBFR2' NE '').EXIT
&RCPBFR2 SETC  'R15'
.EXIT    MEND
./ ADD NAME=RCPBTU   0100-85112-85112-0817-00017-00017-00000-MAS1
         MACRO
         RCPBTU &KEY,&NUM,&PAR
         LCLA  &L
.*
.*  INNER MACRO FOR ALLOC, TO GENERATE TEXT UNITS ENTERED
.*  IN QUOTES
.*
&L       SETA  K'&PAR-2                GET LENGTH OF TEXT UNIT
         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY
         MVI   S99TUNUM+1,&NUM         SET NUMBER FIELD
         MVI   S99TULNG+1,&L           MOVE IN LENGTH
         MVC   S99TUPAR(&L.),=C&PAR    MOVE IN TEXT UNIT
&L       SETA  &L+6
         AIF   (&L/2 EQ (&L+1)/2).LOK
&L       SETA  &L+1
.LOK     RCPDINC &L
         MEND
./ ADD NAME=RCPBTU2  0100-85112-85112-0817-00019-00019-00000-MAS1
         MACRO
         RCPBTU &KEY,&NUM,&PAR
         GBLA  &DTUPO
         GBLC  &DYNP
         LCLA  &L
.*
.*  INNER MACRO FOR ALLOC, TO BRANCH AROUND TEXT UNIT AND
.*  CREATE TEXT UNIT
.*
&L       SETA  K'&PAR+8                GET LENGTH TO BRANCH AROUND
         AIF   (&L/2 EQ (&L+1)/2).LOK  MAKE SURE LENGTH IS EVEN
&L       SETA  &L+1
.LOK     BAL   R14,*+&L                BRANCH AROUND TEXT UNIT
&L       SETA  K'&PAR-2
         DC    Y(&KEY,&NUM,&L),C&PAR   TEXT UNIT
         LA    R14,0(R14)              CLEAR HIGH ORDER BYTE
         ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS
&DTUPO   SETA  &DTUPO+4
         MEND
./ ADD NAME=RCPCKID  0100-85112-85112-0818-00045-00045-00000-MAS1
         MACRO
&NAME    RCPCKID              &CHECKID
         GBLB  &RCPECT(2),&RCPPSCB(2)
         GBLC  &RCPPRE
         LCLC  &CHARVAR,&P
         LCLA  &COUNTR,&L
&P       SETC  '&RCPPRE'
&RCPPSCB(1) SETB  1
&RCPECT(1)  SETB  1
         EJECT
         SPACE 4
***********************************************************************
***  THE USERID OF THE USER IS CHECKED. IF IT IS NOT VALID, THE    ****
***   COMMAND PRETENDS IT DOES NOT EXIST BY LINKING TO EXEC IN     ****
***   THE SAME WAY THE TMP DOES IF IT CANNOT FIND THE COMMAND.     ****
***********************************************************************
         SPACE 3
         L     R1,CPPLPSCB             LOAD ADDRESS OF PSCB
         USING PSCB,R1                 PSCB ADDRESSABILITY
.NID     ANOP
&COUNTR  SETA  &COUNTR+1
         AIF   ('&CHECKID(&COUNTR)' EQ '').ENDID
&CHARVAR SETC  '&CHECKID(&COUNTR)'
&L       SETA  K'&CHARVAR
         AIF   ('&CHARVAR'(1,1) EQ '''').QCID
         CLC   PSCBUSER(&L),=C'&CHARVAR'  IS THE USERID VALID?
         BE    &P.IDOK                     YES, BRANCH OUT
         AGO   .NID
.QCID    ANOP
&L       SETA  &L-2
         CLC   PSCBUSER(&L),=C&CHARVAR    IS THE USERID VALID?
         BE    &P.IDOK                     YES, BRANCH OUT
         AGO   .NID
.ENDID   L     R1,CPPLECT              LOAD ECT ADDRESS
         SPACE 2
         USING ECT,R1
         MVC   ECTPCMD,&P.EXECN        MOVE IN COMMAND NAME
         DROP  R1                      KILL ECT ADDRESSABILITY
         L     R1,CPPLCBUF             LOAD CBUF ADDRESS
         XC    2(2,R1),2(R1)           ZERO OFFSET FIELD
         L     R1,&P.CPPL              RELOAD CPPL ADDRESS
         XCTL  EPLOC=&P.EXECN
&P.EXECN DC    CL8'EXEC'               NAME OF EXEC PROCESSOR
&P.IDOK  DS    0H
         MEND
./ ADD NAME=RCPDDN   0100-85112-85112-0819-00027-00027-00000-MAS1
         MACRO
         RCPDDN &DDN
         GBLC  &DYNP
         SPACE 1
***********************************************************************
**   BUILD THE DDNAME TEXT UNIT                                      **
***********************************************************************
         AIF   ('&DDN'(K'&DDN,1) EQ '/').BTU
         AIF   ('&DDN'(1,1) EQ '''').Q
         RCPSR2
         AIF   ('&DDN'(1,1) EQ '(').R
         L     R14,&DDN                LOAD ADDRESS OF DDNAME
         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME
         AGO   .STH
.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME
         LH    R2,4&DDN                LOAD LENGTH OF DDNAME
.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE DDNAME
         MVI   S99TUKEY+1,DALDDNAM     MOVE IN DDNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 14
         MEXIT
.Q       RCPBTU DALDDNAM,1,&DDN
         MEXIT
.BTU     RCPTUBFR DALDDNAM,14,&DDN
         MEND
./ ADD NAME=RCPDDNRT 0100-85112-85112-0819-00012-00012-00000-MAS1
         MACRO
         RCPDDNRT
         SPACE 1
***********************************************************************
**    DDNAME RETURN TEXT UNIT                                        **
***********************************************************************
         MVI   S99TUKEY+1,DALRTDDN     SET RETURN DDNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,8            SET LENGTH FIELD
         MVC   S99TUPAR(8),=CL8' '     INITIALIZE FIELD TO BLANKS
         RCPDINC 14
         MEND
./ ADD NAME=RCPDEBUG 0100-85112-85112-0820-00019-00019-00000-MAS1
         MACRO
         RCPDEBUG &ON
         GBLA  &RCPBGN#,&RCPSWS(10)
         GBLB  &RCPDBUG
         GBLC  &RCPPRE,&RCPWKDS,&RCPWKCS
         AIF   ('&ON' EQ '').TSW
&RCPDBUG SETB 1
.TSW     AIF   (&RCPDBUG).DEBUG
         MEXIT
.DEBUG   MNOTE *,'RCPBGN# IS &RCPBGN#'
         MNOTE *,'RCPSWS(1) IS &RCPSWS(1)'
         MNOTE *,'RCPSWS(2) IS &RCPSWS(2)'
         MNOTE *,'RCPSWS(3) IS &RCPSWS(3)'
         MNOTE *,'RCPSWS(4) IS &RCPSWS(4)'
         MNOTE *,'RCPSWS(5) IS &RCPSWS(5)'
         MNOTE *,'RCPWKCS IS ''&RCPWKCS'''
         MNOTE *,'RCPWKDS IS ''&RCPWKDS'''
         MNOTE *,'RCPPRE IS ''&RCPPRE'''
         MEND
./ ADD NAME=RCPDFPL  0100-85112-85112-0820-00044-00044-00000-MAS1
         MACRO
         RCPDFPL
         GBLC  &RCPPRE
         GBLB  &RCPDFPL(2)
         GBLB  &RCPDFPB(2)
         LCLC  &P,&L,&L1
&P       SETC  '&RCPPRE'
         EJECT
         AIF   (&RCPDFPL(2)).BYPDFPL
&RCPDFPL(2) SETB 1
         IKJDFPL
L#DFPL   EQU   *-DFPL                  LENGTH OF DEFAULT PARAM LIST
         IKJDFPB
L#DFPB   EQU   *-DFPB                  LENGTH OF DEFAULT PARAM BLOCK
&SYSECT  CSECT                         RESUME PROGRAM CSECT
         SPACE 3
.BYPDFPL RCPDS
&P.DFPL  DS    CL(L#DFPL)              RESERVE SPACE FOR DFPL
&P.DFPB  DS    CL(L#DFPB)              RESERVE SPACE FOR DFPB
&P.DSNB  DS    CL48                    RESERVE SPACE FOR DSNAME BUFFER
         RCPDS
         EJECT
***********************************************************************
***   THIS CODE GENERATES AN DEFAULT SERVICE ROUTINE PARAMETER LIST ***
***       AND PARAMETER BLOCK                                       ***
***********************************************************************
         LA    R1,&P.DFPL              LOAD DFPL ADDRESS
         USING DFPL,R1                 DFPL ADDRESSABLE
         MVC   DFPLUPT,CPPLUPT         MOVE IN ADDRESS OF UPT
         MVC   DFPLECT,CPPLECT         MOVE IN ADDRESS OF ECT
         LA    R15,&P.ECB              LOAD ADDRESS OF ATTN ECB
         ST    R15,DFPLECB             AND STORE IN DFPL
         LA    R15,&P.DFPB             LOAD DFBP ADDRESS
         ST    R15,DFPLDFPB             AND STORE IT IN DFPB
         DROP  R1
         USING DFPB,R15                ADDRESS DFPB DSECT
         XC    DFPB(L#DFPB),DFPB       CLEAR DEFAULT PARAMETER BLOCK
         MVC   DFPBPSCB,CPPLPSCB       MOVE IN ADDRESS OF PSCB
         LA    R1,&P.DSNB              LOAD DSNAME BUFFER ADDRESS
         ST    R1,DFPBDSN               AND STORE IT INTO DFPB
         MVI   DFPBCODE,DFPB04          SET ENTRY CODE
         DROP  R15                     DFPB NO LONGER ADDRESSABLE
         EJECT
         MEND
./ ADD NAME=RCPDINC  0100-85112-85112-0821-00013-00013-00000-MAS1
         MACRO
         RCPDINC &L1
         GBLA  &DTUO,&DTUPO
         GBLC  &DYNP
         AIF   ('&L1' EQ '').T2
         ST    R15,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS
         LA    R15,&L1.(R15)           BUMP TEXT UNIT PTR TO NEXT SLOT
&DTUPO   SETA  &DTUPO+4
&DTUO    SETA  &DTUO+&L1
         MEXIT
.T2      ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS
&DTUPO   SETA  &DTUPO+4
         MEND
./ ADD NAME=RCPDISP  0101-85112-86135-0923-00053-00053-00001-MAS1
         MACRO
         RCPDISP &DISP
         LCLA  &I
         LCLB  &B(4)
         AIF   ('&DISP(1)' EQ '').TD2
         SPACE
***********************************************************************
**     DATA SET INITIAL STATUS                                       **
***********************************************************************
&B(1)    SETB  ('&DISP(1)' EQ 'SHR')
&B(2)    SETB  ('&DISP(1)' EQ 'NEW')
&B(3)    SETB  ('&DISP(1)' EQ 'MOD')
&B(4)    SETB  ('&DISP(1)' EQ 'OLD')
         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK1
         MNOTE 8,'&DISP(1) IS INVALID, DISP=SHR USED'
&B(1)    SETB  1
.OK1     ANOP
&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)
         MVC   S99TUKEY(8),=Y(DALSTATS,1,1,X'0&I.00')
         RCPDINC 8
.TD2     AIF   ('&DISP(2)' EQ '').TD3
         SPACE
***********************************************************************
**    DATA SET NORMAL DISPOSITION                                    **
***********************************************************************
&B(1)    SETB  ('&DISP(2)' EQ 'KEEP')
&B(2)    SETB  ('&DISP(2)' EQ 'DELETE')
&B(3)    SETB  ('&DISP(2)' EQ 'CATLG')
&B(4)    SETB  ('&DISP(2)' EQ 'UNCATLG')
         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK2
         MNOTE 8,'&DISP(2) IS INVALID, DISP=(,KEEP) USED'
&B(1)    SETB  1
.OK2     ANOP
&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)
         MVC   S99TUKEY(8),=Y(DALNDISP,1,1,X'0&I.00')
         RCPDINC 8
.TD3     AIF   ('&DISP(3)' EQ '').EXIT
         SPACE
***********************************************************************
**   DATASET CONDITIONAL DISPOSITION                                 **
***********************************************************************
&B(1)    SETB  ('&DISP(3)' EQ 'KEEP')
&B(2)    SETB  ('&DISP(3)' EQ 'DELETE')
&B(3)    SETB  ('&DISP(3)' EQ 'CATLG')
&B(4)    SETB  ('&DISP(3)' EQ 'UNCATLG')
         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3
         MNOTE 8,'&DISP(3) IS INVALID, DISP=(,,KEEP) USED'
&B(1)    SETB  1
.OK3     ANOP
&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)
         MVC   S99TUKEY(8),=Y(DALCDISP,1,1,X'0&I.00')
         RCPDINC 8
.EXIT    MEND
./ ADD NAME=RCPDS    0100-85112-85112-0822-00026-00026-00000-MAS1
         MACRO
         RCPDS
         GBLB  &RCPDSBR
         GBLC  &RCPWKDS,&RCPWKCS,&RCPDS
         AIF   ('&RCPDS' NE '').RESUME
&RCPDS   SETC  '&SYSECT'
         AIF   ('&RCPWKDS' EQ '').CSECT
&RCPWKDS DSECT                         ENTER WORKAREA DSECT
         MEXIT
.CSECT   AIF   ('&RCPWKCS' EQ '').BRANCH
&RCPWKCS CSECT                         ENTER WORKAREA CSECT
         MEXIT
.RESUME  AIF   (&RCPDSBR).BRTO
&RCPDS   CSECT                         RESUME PROGRAM CSECT
&RCPDS   SETC  ''
         MEXIT
.BRANCH  ANOP
&RCPDS   SETC  'RCP&SYSNDX'
&RCPDSBR SETB  1
         B     &RCPDS                  BRANCH AROUND CONSTANTS
         MEXIT
.BRTO    ANOP
&RCPDS   DS    0H
&RCPDSBR SETB  0
&RCPDS   SETC  ''
         MEND
./ ADD NAME=RCPDSECT 0100-85112-85112-0822-00011-00011-00000-MAS1
         MACRO
&NAME    RCPDSECT &LTORG=YES
         AIF   ('&LTORG' NE 'YES').RCPDS
***********************************************************************
****                  LITERALS                                     ****
***********************************************************************
         SPACE 3
         LTORG
         EJECT
.RCPDS   RCPDS
         MEND
./ ADD NAME=RCPDSN   0101-85112-89235-1627-00069-00068-00001-MSCHMTZ
         MACRO
         RCPDSN &DSN,&MEM
         LCLC  &MEMBER
         GBLC  &DYNP
         SPACE
***********************************************************************
**   BUILD THE DSNAME TEXT UNIT                                      **
***********************************************************************
         AIF   ('&DSN'(1,1) EQ '''').Q
         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD
         AIF   ('&DSN'(1,1) EQ '(').REG
         AIF   ('&DSN'  EQ '*').TERM
         RCPSR2
         L     R14,&DSN                LOAD ADDRESS OF DSNAME
         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME
.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE DSNAME
         MVI   S99TUKEY+1,DALDSNAM     MOVE IN DSNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 50
         AGO   .TMEMBER
.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME
         RCPSR2
         LH    R2,4&DSN                LOAD LENGTH OF DSNAME
         AGO   .STH
.TERM    MVI   S99TUKEY+1,DALTERM
         RCPDINC 4
         MEXIT
.BD      RCPTUBFR DALDSNAM,50,&DSN
         AGO   .TMEMBER
.Q       RCPBTU DALDSNAM,1,&DSN
.TMEMBER AIF   ('&MEM' EQ '').EXIT
         SPACE
***********************************************************************
**   BUILD THE MEMBER NAME TEXT UNIT                                 **
***********************************************************************
&MEMBER  SETC  '&MEM'
         AIF   ('&MEM' NE '*').MOK
         AIF   ('&DSN'(1,1) NE '''').MAST
         MNOTE 8,'MEMBER=* INVALID WITH QUOTED DSNAME'
         MEXIT
.MAST    ANOP
&MEMBER  SETC  '8+&DSN'
.MOK     ANOP
         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM
         AIF   ('&MEMBER'(1,1) EQ '''').QM
         RCPSR2
         AIF   ('&MEMBER'(1,1) EQ '(').RM
         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME
         LTR   R2,R2                   TEST FOR ZERO
         BZ    *+30                    IF NO MEMBER, SKIP
         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER
         AGO   .STHM
.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER
         LTR   R2,R2                   AND TEST FOR ZERO
         BZ    *+30                    IF NO MEMBER, SKIP
         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER
.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME
         MVI   S99TUKEY+1,DALMEMBR     MOVE IN MEMBER KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 14
         MEXIT
.BM      RCPTUBFR DALMEMBR,14,&MEMBER
         MEXIT
.QM      RCPBTU DALMEMBR,1,&MEMBER
.EXIT    MEND
./ ADD NAME=RCPDSNPD 0100-85112-85112-0824-00009-00009-00000-MAS1
         MACRO
         RCPDSNPD &PDE
         AIF   ('&PDE'(1,1) EQ '(').RPDE
         RCPDSN &PDE,8+&PDE
         RCPPSWD 16+&PDE
         MEXIT
.RPDE    RCPDSN &PDE,8&PDE
         RCPPSWD 16(&PDE)
         MEND
./ ADD NAME=RCPDSNRT 0100-85112-85112-0824-00011-00011-00000-MAS1
         MACRO
         RCPDSNRT
         SPACE
***********************************************************************
**    DSNAME RETURN TEXT UNIT                                        **
***********************************************************************
         MVI   S99TUKEY+1,DALRTDSN     SET RETURN DSNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,44           SET LENGTH FIELD
         RCPDINC 50
         MEND
./ ADD NAME=RCPDSRGR 0100-85112-85112-0825-00012-00012-00000-MAS1
         MACRO
         RCPDSRGR
         SPACE
***********************************************************************
**    DSORG RETURN TEXT UNIT                                         **
***********************************************************************
         MVI   S99TUKEY+1,DALRTORG     SET RETURN DSORG KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,2            SET LENGTH FIELD
         XC    S99TUPAR(2),S99TUPAR    INITIALIZE FIELD TO ZERO
         RCPDINC 8
         MEND
./ ADD NAME=RCPDUMMY 0100-85112-85112-0826-00009-00009-00000-MAS1
         MACRO
         RCPDUMMY &DUMMY
         SPACE
***********************************************************************
**      DUMMY DATASET TEXT UNIT                                      **
***********************************************************************
         MVI   S99TUPAR+1,DALDUMMY     MOVE IN DUMMY DS TEXT UNIT KEY
         RCPDINC 4
         MEND
./ ADD NAME=RCPENDD  0100-85112-85112-0826-00037-00037-00000-MAS1
         MACRO
&NAME    RCPENDD
         GBLB  &RCPECT(2),&RCPUPT(2),&RCPPSCB(2),&RCPS99(2)
         GBLC  &RCPPRE,&RCPWKDS,&RCPDS
         LCLC  &P,&CS
&CS      SETC  '&RCPDS'                PROGRAM CSECT
         AIF   (NOT &RCPS99(1)).TDS
         DYNSPACE
.TDS     AIF   ('&RCPWKDS' EQ '').RCPDS
         DS    0D                      ALIGN TO DOUBLEWORD
&P       SETC  '&RCPPRE'
&P.WKLEN EQU   *-&RCPWKDS              LENGTH OF WORK AREA
.RCPDS   RCPDS
         EJECT
         AIF   (NOT &RCPECT(1) OR &RCPECT(2)).TRYUPT
         IKJECT
&CS      CSECT                         REENTER MAIN CSECT
         EJECT
&RCPECT(2)     SETB           1
.TRYUPT  AIF   (NOT &RCPUPT(1) OR &RCPUPT(2)).TRYPSCB
         IKJUPT
&CS      CSECT                         REENTER MAIN CSECT
         EJECT
&RCPUPT(2) SETB  1
.TRYPSCB AIF   (NOT &RCPPSCB(1) OR &RCPPSCB(2)).TRYS99
         IKJPSCB
&CS      CSECT                         REENTER MAIN CSECT
         EJECT
&RCPPSCB(2) SETB  1
.TRYS99  AIF   (NOT &RCPS99(1) OR &RCPS99(2)).TRYREST
         IEFZB4D0
         EJECT
         IEFZB4D2
&CS      CSECT                         REENTER MAIN CSECT
         EJECT
&RCPS99(2) SETB  1
.TRYREST MEND
./ ADD NAME=RCPFDDN  0100-85112-85112-0827-00027-00027-00000-MAS1
         MACRO
         RCPFDDN &DDN
         GBLC &DYNP
         SPACE
***********************************************************************
**        FREE DDNAME TEXT UNIT                                      **
***********************************************************************
         AIF   ('&DDN'(1,1) EQ '''').Q
         AIF   ('&DDN'(K'&DDN,1) EQ '/').B
         RCPSR2
         AIF   ('&DDN'(1,1) EQ '(').R
         L     R14,&DDN                LOAD ADDRESS OF DDNAME
         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME
         AGO   .STH
.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME
         LH    R2,4&DDN                LOAD LENGTH OF DDNAME
.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE DDNAME
         MVI   S99TUKEY+1,DUNDDNAM     MOVE IN DDNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 14
         MEXIT
.Q       RCPBTU DUNDDNAM,1,&DDN
         MEXIT
.B       RCPTUBFR DUNDDNAM,14,&DDN
         MEND
./ ADD NAME=RCPFDISP 0100-85112-85112-0827-00020-00020-00000-MAS1
         MACRO
         RCPFDISP &DISP
         LCLB  &B(4)
         LCLA  &I
         SPACE
***********************************************************************
**       OVERRIDING DISPOSITION                                      **
***********************************************************************
&B(1)    SETB  ('&DISP' EQ 'KEEP')
&B(2)    SETB  ('&DISP' EQ 'DELETE')
&B(3)    SETB  ('&DISP' EQ 'CATLG')
&B(4)    SETB  ('&DISP' EQ 'UNCATLG')
         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3
         MNOTE 8,'&DISP IS INVALID, DISP=KEEP USED'
&B(1)    SETB  1
.OK3     ANOP
&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)
         MVC   S99TUKEY(8),=Y(DUNOVDSP,1,1,X'0&I.00')
         RCPDINC 8
.EXIT    MEND
./ ADD NAME=RCPFDSN  0100-85112-85112-0828-00064-00064-00000-MAS1
         MACRO
         RCPFDSN &DSN,&MEM
         LCLC  &MEMBER
         GBLC  &DYNP
         SPACE
***********************************************************************
**      FREE DATA SET TEXT UNIT                                      **
***********************************************************************
         AIF   ('&DSN'(1,1) EQ '''').Q
         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD
         AIF   ('&DSN'(1,1) EQ '(').REG
         RCPSR2
         L     R14,&DSN                LOAD ADDRESS OF DSNAME
         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME
.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE DSNAME
         MVI   S99TUKEY+1,DUNDSNAM     MOVE IN DSNAME KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 50
         AGO   .TMEMBER
.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME
         RCPSR2
         LH    R2,4&DSN                LOAD LENGTH OF DSNAME
         AGO   .STH
.BD      RCPTUBFR DUNDSNAM,50,&DSN
         AGO   .TMEMBER
.Q       RCPBTU DUNDSNAM,1,&DSN
.TMEMBER AIF   ('&MEM' EQ '').EXIT
         SPACE
***********************************************************************
**       FREE MEMBER NAME TEXT UNIT                                  **
***********************************************************************
&MEMBER  SETC  '&MEM'
         AIF   ('&MEM' NE '*').MOK
         AIF   ('&DSN'(1,1) NE '''').MAST
         MNOTE 8,'MEMBER=* INVALID WITH QUOTED DSNAME'
         MEXIT
.MAST    ANOP
&MEMBER  SETC  '8+&DSN'
.MOK     ANOP
         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM
         RCPSR2
         AIF   ('&MEMBER'(1,1) EQ '(').RM
         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME
         LTR   R2,R2                   TEST FOR ZERO
         BZ    *+30                    IF NO MEMBER, SKIP
         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER
         AGO   .STHM
.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER
         LTR   R2,R2                   AND TEST FOR ZERO
         BZ    *+30                    IF NO MEMBER, SKIP
         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER
.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME
         MVI   S99TUKEY+1,DUNMEMBR     MOVE IN MEMBER KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         RCPDINC 14
         MEXIT
.BM      RCPTUBFR DUNMEMBR,14,&MEMBER
         MEXIT
.QM      RCPBTU DUNMEMBR,1,&MEMBER
.EXIT    MEND
./ ADD NAME=RCPFHOLD 0100-85112-85112-0828-00024-00024-00000-MAS1
         MACRO
         RCPFHOLD &H
         AIF   ('&H' EQ 'YES').YES
         AIF   ('&H' EQ 'NO').NO
         MNOTE 4,'HOLD PARMETER VALUE INCORRECT - IGNORED'
         MEXIT
.YES     ANOP
         SPACE 1
***********************************************************************
**       OVERIDING SYSOUT HOLD TEXT UNIT                             **
***********************************************************************
         SPACE 1
         MVI   S99TUKEY+1,DUNOVSHQ MOVE IN TEXT UNIT KEY
         RCPDINC 4
         MEXIT
.NO      ANOP
         SPACE 1
***********************************************************************
**       OVERIDING SYSOUT NO HOLD TEXT UNIT                          **
***********************************************************************
         SPACE 1
         MVI   S99TUKEY+1,DUNOVSHQ MOVE IN TEXT UNIT KEY
         RCPDINC 4
         MEND
./ ADD NAME=RCPFORUS 0100-85112-85112-0829-00008-00008-00000-MAS1
         MACRO - TO SET UP SVC 99 TEXT UNIT 'FOR USER'
         RCPFORUS &T
         SPACE 1
***********************************************************************
**       'FOR USER' TEXT UNIT                                        **
***********************************************************************
         RCPVCHAR 0,5,&T,N=X'7701'
         MEND
./ ADD NAME=RCPFREE  0100-85112-85112-0829-00009-00009-00000-MAS1
         MACRO
         RCPFREE &FREE
         SPACE
***********************************************************************
**      UNALLOC AT CLOSE TEXT UNIT                                   **
***********************************************************************
         MVI   S99TUPAR+1,DALCLOSE     MOVE IN CLOSE TEXT UNIT KEY
         RCPDINC 4
         MEND
./ ADD NAME=RCPIOPL  0100-85112-85112-0830-00071-00071-00000-MAS1
         MACRO
&NAME    RCPIOPL
         GBLC  &RCPPRE
         GBLB  &RCPIOPL(2)
         GBLB  &RCPSTPB(2),&RCPPTPB(2),&RCPPGPB(2),&RCPGTPB(2)
         LCLC  &P,&L,&L1
&P       SETC  '&RCPPRE'
         EJECT
         AIF   (&RCPIOPL(2)).BYPIOPL
&RCPIOPL(2) SETB 1
         IKJIOPL
L#IOPL   EQU   *-IOPL                  LENGTH OF IO PARAM LIST
&SYSECT  CSECT                         RESUME PROGRAM CSECT
         SPACE 3
.BYPIOPL RCPDS
&P.IOPL  DS    CL(L#IOPL)              RESERVE SPACE FOR IOPL
         RCPDS
         SPACE 5
***********************************************************************
***   THIS CODE GENERATES AN I/O SERVICE ROUTINE PARAMETER LIST     ***
***********************************************************************
         LA    R1,&P.IOPL              LOAD IOPL ADDRESS
         USING IOPL,R1                 IOPL ADDRESSABLE
         MVC   IOPLUPT,CPPLUPT         MOVE IN ADDRESS OF UPT
         MVC   IOPLECT,CPPLECT         MOVE IN ADDRESS OF ECT
         LA    R15,&P.ECB              LOAD ADDRESS OF ATTN ECB
         ST    R15,IOPLECB             AND STORE IN IOPL
         DROP  R1
  AIF (&RCPSTPB(1) OR &RCPGTPB(1) OR &RCPPGPB(1) OR &RCPPTPB(1)).I
         MEXIT
.I       EJECT
         AIF   (NOT &RCPSTPB(1) OR &RCPSTPB(2)).TPT
         IKJSTPB
&RCPSTPB(2) SETB 1
L#STPB   EQU   *-STPB         LENGTH OF STPB
&SYSECT  CSECT
.TPT     AIF   (NOT &RCPPTPB(1) OR &RCPPTPB(2)).TGT
         IKJPTPB
&RCPPTPB(2) SETB 1
L#PTPB   EQU   *-PTPB         LENGTH OF PTPB
&SYSECT  CSECT
.TGT     AIF   (NOT &RCPGTPB(1) OR &RCPGTPB(2)).TPG
         IKJGTPB
&RCPGTPB(2) SETB 1
L#GTPB   EQU   *-GTPB         LENGTH OF GTPB
&SYSECT  CSECT
.TPG     AIF   (NOT &RCPPGPB(1) OR &RCPPGPB(2)).STO
         IKJPGPB
&RCPPGPB(2) SETB 1
L#PGPB   EQU   *-PGPB         LENGTH OF PGPB
&SYSECT  CSECT
.STO     SPACE 3
&L       SETC  ''
         RCPDS
         AIF   (NOT &RCPSTPB(1)).XPT
&P.STPB  DS    CL(L#STPB)              RESERVE SPACE FOR STPB
&L       SETC  '&L.+L#STPB'
.XPT     AIF   (NOT &RCPPTPB(1)).XGT
&P.PTPB  DS    CL(L#PTPB)              RESERVE SPACE FOR PTPB
&L       SETC  '&L.+L#PTPB'
.XGT     AIF   (NOT &RCPGTPB(1)).XPG
&P.GTPB  DS    CL(L#GTPB)              RESERVE SPACE FOR GTPB
&L       SETC  '&L.+L#GTPB'
.XPG     AIF   (NOT &RCPPGPB(1)).XC
&P.PGPB  DS    CL(L#PGPB)              RESERVE SPACE FOR PGPB
&L       SETC  '&L.+L#PGPB'
.XC      RCPDS
&L1      SETC  '&L'(2,K'&L-1)
&L       SETC  '&P'.'&L1'(3,4)
         XC    &L.(&L1.),&L            CLEAR IOPB AREA
         MEND
./ ADD NAME=RCPLINK  0100-85112-85112-0830-00053-00053-00000-MAS1
         MACRO
&NAME    RCPLINK &MODULE
         LCLC  &OFFSET,&C
         AIF   ('&MODULE' EQ '').ERROR
         AIF   ('&MODULE' NE 'IKJPARS').T1
&OFFSET  SETC  '524'
         AGO   .START
.T1      AIF   ('&MODULE' NE 'IKJDAIR').T2
&OFFSET  SETC  '732'
         AGO   .START
.T2      AIF   ('&MODULE' NE 'IKJEHDEF').T3
&OFFSET  SETC  '736'
         AGO   .START
.T3      AIF   ('&MODULE' NE 'IKJEHCIR').T4
&OFFSET  SETC  '740'
         AGO   .START
.T4      AIF   ('&MODULE' NE 'IKJPUTL').T5
&OFFSET  SETC  '444'
         AGO   .START
.T5      AIF   ('&MODULE' NE 'IKJGETL').T6
&OFFSET  SETC  '348'
         AGO   .START
.T6      AIF   ('&MODULE' NE 'IKJSCAN').T7
&OFFSET  SETC  '480'
         AGO   .START
.T7      AIF   ('&MODULE' NE 'IKJPTGT').T8
&OFFSET  SETC  '464'
         AGO   .START
.T8      AIF   ('&MODULE' NE 'IKJSTCK').T9
&OFFSET  SETC  '472'
         AGO   .START
.T9      ANOP
&NAME    DS    0H
*
 MNOTE *,' EP OF &MODULE. NOT IN CVT. STANDARD LINK USED'
*
         AGO   .LINK
.START   ANOP
&NAME    L     R15,16                  LOAD CVT ADDRESS
         L     R15,&OFFSET.(R15)       LOAD MODULE ADDRESS
         LTR   R15,R15                 IS MODULE ADDRESS THERE?
&C       SETC  'RCP&SYSNDX'
         BNM   &C.L                     IF NOT, BRANCH TO LINK
         BALR  R14,R15                  ELSE BALR TO IT
         B     &C.B                      AND BYPASS LINK
&C.L     LINK  EP=&MODULE
&C.B     DS    0H                      BRANCHED TO IF LINK BYPASSED
         MEXIT
.LINK    ANOP
&NAME    LINK  EP=&MODULE
         MEXIT
.ERROR   MNOTE 4,'NO MODULE NAME SPECIFIED'
         MEND
./ ADD NAME=RCPLOAD  0100-85112-85112-0831-00116-00116-00000-MAS1
         MACRO
&NAME    RCPLOAD &MOD,&EP1
         GBLC  &RCPPTEP,&RCPGTEP,&RCPPGEP
         GBLC  &RCPDFEP,&RCPSTEP,&RCPPREP
         GBLC  &RCPPRE
         LCLA  &I,&J
         LCLB  &EPXISTS
         LCLC  &OFFSET,&C,&EP,&MODULE
&EP      SETC  '&EP1'
&MODULE  SETC  '&MOD'
         AIF   ('&MODULE' EQ '').ERROR
         AIF   ('&MODULE'(K'&MOD,1) NE ')').NOBR
&I       SETA  K'&MOD
.LOOP    ANOP
&I       SETA  &I-1
         AIF   (&I LT 2).NOLB
         AIF   ('&MOD'(&I,1) NE '(').LOOP
&MODULE  SETC  '&MOD'(1,&I-1)
&J       SETA  K'&MOD-1-&I
&EP      SETC  '&MOD'(&I+1,&J)
         RCPDS
&EP      DS    F                       TO STORE MODULE ADDRESS
         RCPDS
.NOBR    ANOP
&EPXISTS  SETB  ('&EP' NE '')
         AIF   ('&MODULE' NE 'IKJPARS').T1
&OFFSET  SETC  '524'
&RCPPREP SETC '&EP'
         AIF   (&EPXISTS).START
         RCPDS
&RCPPREP SETC '&RCPPRE.PREP'
&EP      SETC  '&RCPPREP'
&RCPPREP DS    F                       TO HOLD ADDRESS OF IKJPARS
         RCPDS
         AGO   .START
.T1      AIF   ('&MODULE' NE 'IKJDAIR').T2
&OFFSET  SETC  '732'
         AGO   .START
.T2      AIF   ('&MODULE' NE 'IKJEHDEF').T3
&RCPDFEP SETC  '&EP'
&OFFSET  SETC  '736'
         AIF   (&EPXISTS).START
&RCPDFEP SETC  '&RCPPRE.DFEP'
         RCPDS
&RCPDFEP DS    F                       ADDR OF DEFAULT SERVICE ROUTINE
         RCPDS
&EP      SETC  '&RCPDFEP'
         AGO   .START
.T3      AIF   ('&MODULE' NE 'IKJEHCIR').T4
&OFFSET  SETC  '740'
         AGO   .START
.T4      AIF   ('&MODULE' NE 'IKJPUTL').T5
&RCPPTEP SETC  '&EP'
&OFFSET  SETC  '444'
         AIF   (&EPXISTS).START
&RCPPTEP SETC  '&RCPPRE.PTEP'
&EP      SETC  '&RCPPTEP'
         RCPDS
&RCPPTEP DS    F                       ADDR OF PUTLINE ROUTINE
         RCPDS
         AGO   .START
.T5      AIF   ('&MODULE' NE 'IKJGETL').T6
&RCPGTEP SETC  '&EP'
&OFFSET  SETC  '348'
         AIF   (&EPXISTS).START
&RCPGTEP SETC  '&RCPPRE.GTEP'
&EP      SETC  '&RCPGTEP'
         RCPDS
&RCPGTEP DS    F                       ADDR OF GETLINE ROUTINE
         RCPDS
         AGO   .START
.T6      AIF   ('&MODULE' NE 'IKJSCAN').T7
&OFFSET  SETC  '480'
         AGO   .START
.T7      AIF   ('&MODULE' NE 'IKJPTGT').T8
&RCPPGEP SETC  '&EP'
&OFFSET  SETC  '464'
         AIF   (&EPXISTS).START
&RCPPGEP SETC  '&RCPPRE.PGEP'
&EP      SETC  '&RCPPGEP'
         RCPDS
&RCPPGEP DS    F                       ADDR OF PUTGET ROUTINE
         RCPDS
         AGO   .START
.T8      AIF   ('&MODULE' NE 'IKJSTCK').T9
&RCPSTEP SETC  '&EP'
&OFFSET  SETC  '472'
         AIF   (&EPXISTS).START
&RCPSTEP SETC  '&RCPPRE.STEP'
&EP      SETC  '&RCPSTEP'
         RCPDS
&RCPSTEP DS    F                       ADDR OF STACK ROUTINE
         RCPDS
         AGO   .START
.T9      ANOP
&NAME    DS    0H
*
 MNOTE *,' EP OF &MODULE. NOT IN CVT. STANDARD LOAD USED'
*
         AGO   .LOAD
.START   ANOP
&NAME    L     R15,16                  LOAD CVT ADDRESS
         L     R0,&OFFSET.(R15)        LOAD MODULE ADDRESS
         LTR   R0,R0                   IS MODULE LOADED?
&C       SETC  'RCP&SYSNDX'
         BM    &C                      IF SO, BYPASS LOAD MACRO
.LOAD    LOAD EP=&MODULE.
         AIF   ('&EP' EQ '').EPERR
&C       ST    R0,&EP                  STORE ENTRY POINT ADDRESS
         MEXIT
.EPERR   MNOTE 4,'EP RETURN FIELD NOT SPECIFIED'
         MEXIT
.ERROR   MNOTE 4,'NO MODULE NAME SPECIFIED'
         MEXIT
.NOLB    MNOTE 4,'INVALID MODULE NAME ''&MOD'''
         MEND
./ ADD NAME=RCPLOCSW 0100-85112-85112-0832-00091-00091-00000-MAS1
*23456789*12345*78921234567893123456789*
         MACRO
         RCPLOCSW &SW
.********************************************************************
.*                                                                  *
.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *
.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *
.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *
.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *
.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *
.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *
.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *
.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *
.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *
.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *
.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *
.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*
.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *
.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *
.*       BIT IN THE LIST.                                           *
.*                                                                  *
.********************************************************************
         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES
         GBLA  &RCPDSW0                NO OF SWS FOUND BY RCPLOCSW
         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS
         GBLB  &RCPDSW3(20)   INVERT INDICATOR
         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES
         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES
         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES
         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES
         GBLC  &RCPDSW1(20)            SWITCH BYTE NAMES
         GBLC  &RCPDSW2(20)            SWITCH BIT NAME(S)
         LCLA  &I,&J,&K,&L,&M,&N
         LCLB  &NOT
         LCLC  &C,&SW1,&SW2
&RCPDSW0 SETA  0                       INITIALIZE
&N       SETA  N'&SW                   NO OF SWITCHES ENTERED
&J       SETA  &RCPDSW#*8+8            INDEX TO LAST DECLARED SW BIT
.LOOP1   AIF   (&M GE &N).EXIT        LOOP FOR EACH SW
&M       SETA  &M+1
&SW2     SETC  '&SW(&M)'               SWITCH TO SEARCH FOR
         AIF   ('&SW2' EQ '').LOOP1    SKIP IF NULL
&I       SETA  8                       INDEX TO FIRST DECLARED SW - 1
&NOT     SETB  0
         AIF   ('&SW2'(1,1) NE '¬' AND '&SW2'(1,1) NE '-').TNOT2
&SW2     SETC  '&SW2'(2,K'&SW2-1)       REMOVE NOT SIGN
&NOT     SETB  1                       INDICATE INVERT FUNCTION
         AGO   .LOOP1A                 CONTINUE
.TNOT2   AIF   (K'&SW2 LT 5).LOOP1A    CHECK LENGTH
         AIF   ('&SW2'(1,4) NE 'NOT-').LOOP1A  WAS SWITCH INVERTED?
&SW2     SETC  '&SW2'(5,K'&SW2-4)      STRIP OFF 'NOT-'
&NOT     SETB  1                       INDICATE INVERTED
.LOOP1A  AIF   (&I GE &J).TGEN         SEARCH NAME ARRAY
&I       SETA  &I+1
         AIF   ('&RCPDSWB(&I)' NE '&SW2').LOOP1A
.*
.*   WE FOUND IT
.*
&L       SETA  (&I-1)/8                INDEX TO BYTE NAME
&SW1     SETC  '&RCPDSWN(&L)'          GET BYTE NAME
.FOUNDSW ANOP                          HAVE WE HAD IT BEFORE?
&K       SETA  0
.SWL1    AIF   (&K GE &RCPDSW0).NEWSW1
&K       SETA  &K+1
         AIF   ('&RCPDSW1(&K)' NE '&SW1').SWL1
         AIF   (&RCPDSW3(&K) NE &NOT).SWL1  ENSURE INVERT BIT THE SAME
.*
.* WE FOUND IT
.*
&RCPDSW2(&K) SETC '&RCPDSW2(&K)+&SW2'  CONCATENATE CURRENT SW
         AGO   .LOOP1                  GO DO NEXT
.NEWSW1  ANOP
&RCPDSW0 SETA  &K+1                    NEXT SW BYTE INDEX
&RCPDSW1(&RCPDSW0) SETC '&SW1'         BYTE NAME
&RCPDSW2(&RCPDSW0) SETC '&SW2'         BIT NAME
&RCPDSW3(&RCPDSW0) SETB (&NOT)         SET INVERT INDICATOR
         AGO   .LOOP1                  GO DO NEXT
.TGEN    ANOP  SEARCH GENERIC NAME ARRAY
&I       SETA  0
&L       SETA  K'&SW2
.LOOP2   ANOP
&I       SETA  &I+1
         AIF   (&I GT &RCPGSW#).NOTFND
&C       SETC  '&RCPGSWB(&I)'
         AIF   (&L LT K'&C).LOOP2
         AIF   ('&SW2'(1,K'&C) NE '&C').LOOP2
&SW1     SETC  '&RCPGSWN(&I)'
         AGO   .FOUNDSW                EUREKA
.NOTFND  MNOTE 4,'SWITCH ''&SW2'' NOT DECLARED'
         AGO   .LOOP1
.EXIT    MEND
./ ADD NAME=RCPLOCS1 0100-85112-85112-0832-00077-00077-00000-MAS1
*23456789*12345*78921234567893123456789*
         MACRO
         RCPLOCSW &SW
.********************************************************************
.*                                                                  *
.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *
.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *
.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *
.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *
.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *
.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *
.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *
.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *
.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *
.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *
.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *
.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*
.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *
.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *
.*       BIT IN THE LIST.                                           *
.*                                                                  *
.********************************************************************
         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES
         GBLA  &RCPDSW0                NO OF SWS FOUND BY RCPLOCSW
         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS
         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES
         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES
         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES
         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES
         GBLC  &RCPDSW1(20)            SWITCH BYTE NAMES
         GBLC  &RCPDSW2(20)            SWITCH BIT NAME(S)
         LCLA  &I,&J,&K,&L,&M,&N       LOCAL COUNTERS
         LCLC  &C,&SW1,&SW2
&RCPDSW0 SETA  0                       INITIALIZE
&N       SETA  N'&SW                   NO OF SWITCHES ENTERED
&J       SETA  &RCPDSW#*8              INDEX TO LAST DECLARED SW BIT
.LOOP1   AIF   (&M GE &N).EXIT        LOOP FOR EACH SW
&M       SETA  &M+1
&SW2     SETC  '&SW(&M)'               SWITCH TO SEARCH FOR
         AIF   ('&SW2' EQ '').LOOP1    SKIP IF NULL
&I       SETA  8                       INDEX TO FIRST DECLARED SW - 1
.LOOP1A  AIF   (&I GE &J).TGEN         SEARCH NAME ARRAY
&I       SETA  &I+1
         AIF   ('&RCPDSWB(&I)' NE '&SW2').LOOP1A
.*
.*   WE FOUND IT
.*
&L       SETA  (&I-1)/8                INDEX TO BYTE NAME
&SW1     SETC  '&RCPDSWN(&L)'          GET BYTE NAME
.FOUNDSW ANOP                          HAVE WE HAD IT BEFORE?
&K       SETA  0
.SWL1    AIF   (&K GE &RCPDSW0).NEWSW1
&K       SETA  &K+1
         AIF   ('&RCPDSW1(&K)' NE '&SW1').SWL1
.*
.* WE FOUND IT
.*
&RCPDSW2(&K) SETC '&RCPDSW2(&K)+&SW2'  CONCATENATE CURRENT SW
         AGO   .LOOP1                  GO DO NEXT
.NENSW1  ANOP
&RCPDSW0 SETA  &K+1                    NEXT SW BYTE INDEX
&RCPDSW1(&RCPDSW0) SETC '&SW1'         BYTE NAME
&RCPDSW2(&RCPDSW0) SETC '&SW2'         BIT NAME
         AGO   .LOOP1                  GO DO NEXT
.TGEN    ANOP  SEARCH GENERIC NAME ARRAY
&I       SETA  0
&L       SETA  K'&SW2
.LOOP2   ANOP
&I       SETA  &I+1
         AIF   (&I GT &RCPGSW#).NOTFND
&SW1     SETC  '&RCPGSWN(&I)'
         AIF   (&L LT K'&SW1).LOOP2
         AIF   ('&SW1'(1,&L) NE '&SW2').LOOP2
         AGO   .FOUNDSW                EUREKA
.NOTFND  MNOTE 4,'SWITCH ''&SW2'' NOT DECLARED'
         AGO   .LOOP1
.EXIT    MEND
./ ADD NAME=RCPLOCS2 0100-85112-85112-0833-00095-00095-00000-MAS1
*23456789*12345*78921234567893123456789*
         MACRO
         RCPLOCSW &SW
.********************************************************************
.*                                                                  *
.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *
.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *
.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *
.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *
.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *
.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *
.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *
.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *
.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *
.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *
.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *
.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*
.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *
.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *
.*       BIT IN THE LIST.                                           *
.*                                                                  *
.********************************************************************
         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES
         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS
         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES
         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES
         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES
         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES
         GBLC  &RCPDSW1                SWITCH BYTE NAME
         GBLC  &RCPDSW2                SWITCH BIT NAME(S)
         LCLA  &I,&J,&K,&L,&M,&N       LOCAL COUNTERS
         LCLC  &C
&RCPDSW2 SETC  '&SW(1)'                EXTRACT 1ST SWITCH BIT
&J       SETA  &RCPDSW#*8+8            ARRAY POS OF LAST SW BIT
&I       SETA  8                       ARRAY POS-1 OF 1ST SW BIT
.LOOP1   AIF   (&I GE &J).TGEN         IF SW NOT FOUND IN 1ST ARRAY,
.*                                      GO SEARCH GENERIC NAME ARRAY
&I       SETA  &I+1
         AIF   ('&RCPDSWB(&I)' NE '&RCPDSW2').LOOP1  LOOK FOR MATCH
.*
.*       OK, WE'VE FOUND A MATCH.
.*
&I       SETA  (&I-1)/8               GET POS OF SWITCH BYTE
&RCPDSW1 SETC  '&RCPDSWN(&I)'         MOVE IT TO EXIT PARM VAR
&I       SETA  &I*8+1                 POINT TO 1ST SW BIT IN IT
&J       SETA  &I+8                   POINT TO LAST SW BIT IN IT
&M       SETA  N'&SW                  GET NO OF SWITCHES
&L       SETA  1
.*
.*       NOW WE PROCESS SUBSEQUENT SWITCHES IN THE LIST
.*
.LOOP2   AIF   (&L GE &M).EXIT        EXIT WHEN FINISHED
&L       SETA  &L+1                   POINT TO NEXT SW IN LIST
&C       SETC  '&SW(&L)'               EXTRACT IT
&RCPDSW2 SETC  '&RCPDSW2.+&C'           THEN APPEND TO PREVIOUS
.*
.*       NOW WE CHECK THAT THE SWITCH IS DECLARED IN THE SAME
.*       BYTE AS THE FIRST.
.*
&N       SETA  &I-1                     POINT TO 1ST BIT POS MINUS 1
.LOOP3   AIF   (&N GE &J).NM            IF SW NOT FOUND, ISSUE MNOTE
&N       SETA  &N+1                     POINT TO NEXT
         AIF   ('&C' NE '&RCPDSWB(&N)').LOOP3  SEARCH FOR MATCH
         AGO   .LOOP2                   IF FOUND, GO PROCESS NEXT
.NM      MNOTE 4,'WARNING: SWITCH ''&C'' NOT DECLARED IN SAME BYTE AS  X
               SWITCH ''&SW(1)'' - LOGIC ERROR MAY OCCUR'
         AGO   .LOOP2            CONTINUE FOR NEXT SWITCH BIT
.*
.*       IF THE SWITCH WAS NOT LOCATED IN THE EXPLICIT NAME ARRAY,
.*       THE GENERIC NAME ARRAY IS SEARCHED.
.*
.TGEN    ANOP
&I       SETA  0
&RCPDSW2 SETC  '&SW(1)'                EXTRACT 1ST SWITCH
&L       SETA  K'&RCPDSW2              GET LENGTH OF 1ST SW
.LOOP4   AIF   (&I GE &RCPGSW#).ERROR  IF NOT SW NOT DECLARED, ERROR
&I       SETA  &I+1
&C       SETC  '&RCPGSWB(&I)'          GET GENERIC PREFIX
&K       SETA  K'&C                    GET LENGTH OF GENERIC PREFIX
         AIF   (&L LT &K).LOOP4         AND SKIP IF LEN OF SWITCH NAME
.*                                          < LEN OF GENERIC PREFIX
         AIF   ('&RCPDSW2'(1,&K) NE '&C').LOOP4  ALSO SKIP IF NO MATCH
&RCPDSW1 SETC  '&RCPGSWN(&I)'          SAVE SWITCH BYTE NAME
&I       SETA   1
&J       SETA   N'&SW
.LOOP5   AIF   (&I GE &J).EXIT         EXIT WHEN FINISHED
&I       SETA   &I+1
&RCPDSW2 SETC   '&RCPDSW2.+&SW(&I)'     APPEND THIS SWITCH
         AIF    ('&SW(&I)    '(1,&K) EQ '&C').LOOP5 CHECK PREFIX
         MNOTE 4,'WARNING: SWITCH ''&SW(&I)'' NOT GENERICALLY EQUAL TO X
               SWITCH ''&SW(1)'''
         AGO   .LOOP5
.ERROR   MNOTE 8,'SWITCH ''&SW(1)'' NOT DECLARED'
&RCPDSW1 SETC  ''             INDICATE ERROR
.EXIT    MEND
./ ADD NAME=RCPMCA   0100-85112-85112-0833-00023-00023-00000-MAS1
         MACRO
         RCPMCA &DSECT=YES
         GBLC  &RCPPRE
         GBLA  &RCPSWS(10)
         LCLC  &P
     RCPDEBUG
&P       SETC  '&RCPPRE'
         AIF   (&RCPSWS(2) NE 2).DSECT
&P.MCA   DS    0F                      MODULE COMMUNICATIONS AREA
         AGO   .MCA2
.DSECT   ANOP
&P.MCA   DSECT                         MODULE COMMUNICATIONS AREA
.MCA2    ANOP
&P.XDS   DS    F                       ADDR OF EXTERNAL DUMMY SECTION
         AIF   (&RCPSWS(3) LT 1).EXIT
&P.A#GET DS    F                       ADDRESS OF LIFO GET ROUTINE
&P.A#FRE DS    F                       ADDRESS OF LIFO FREE ROUTINE
&P.#S    DS    F                       ADDRESS OF CURRENT LIFO STACK
&P.#E    DS    F                       ADDRESS OF END OF LIFO STACK
&P.#N    DS    F                       ADDRESS OF NEXT FREE AREA
&P.#C    DS    F                       ADDRESS OF NEXT LIFO STACK
&P.#L    DS    F                       LENGTH OF CURRENT LIFO STACK
.EXIT    MEND
./ ADD NAME=RCPNTU   0100-85112-85112-0834-00047-00047-00000-MAS1
         MACRO
         RCPNTU &KEY,&LEN,&PAR
.*
.*     THIS IS AN ALLOC/FREE MACRO TEXT UNIT PROCESSOR SUBROUTINE
.*     MACRO. IT BUILDS NUMERIC TYPE TEXT UNITS.
.*
         LCLA  &L,&R
         LCLC  &C
         GBLC  &RCPTYPE
.*  ALLOC/FREE INNER MACRO TO SET UP NUMERIC TEXT UNITS
&L       SETA  1                       DEFAULT LENGTH
         AIF   ('&LEN' EQ '').NL
&L       SETA  &LEN
.NL      MVI   S99TUKEY+1,&KEY         SET KEY FIELD
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,&L           SET LENGTH FIELD
         AIF   ('&PAR'(1,1) EQ '(').REG
         RCPTYPE &PAR                  ANALYSE PARAMETER
         AIF   ('&RCPTYPE' EQ 'N').NUMERIC
&R       SETA  4-&L
         MVC   S99TUPAR(&L),&R+&PAR    MOVE IN QUANTITY
         RCPDINC 10
         MEXIT
.NUMERIC AIF   (&L EQ 1).NL1
         MVC   S99TUPAR(&L.),=AL&L.(&PAR) MOVE IN QUANTITY
&R       SETA  &L+6
         AIF   (&R/2 EQ (&R+1)/2).LOK ENSURE LENGTH EVEN
&R       SETA  &R+1
.LOK     RCPDINC &R
         MEXIT
.NL1     MVI   S99TUPAR,&PAR           MOVE IN QUANTITY
         RCPDINC 8
         MEXIT
.REG     ANOP
&C       SETC  '&PAR'(2,K'&PAR-2)
         AIF   (&L EQ 3).STCM
         AIF   (&L EQ 2).STH
         AIF   (&L EQ 1).STC
         ST    &C,S99TUPAR             STORE TEXT UNIT QUANTITY
         AGO   .RCPDINC
.STH     STH   &C,S99TUPAR             STORE TEXT UNIT QUANTITY
         AGO   .RCPDINC
.STC     STC   &C,S99TUPAR             STORE TEXT UNIT QUANTITY
         AGO   .RCPDINC
.STCM    STCM  &C,7,S99TUPAR           STORE TEXT UNIT QUANTITY
.RCPDINC RCPDINC 10
         MEND
./ ADD NAME=RCPPERM  0100-85112-85112-0834-00009-00009-00000-MAS1
         MACRO
         RCPPERM
         SPACE
***********************************************************************
**     PERMANENTLY ALLOCATED ATTRIBUTE TEXT UNIT                     **
***********************************************************************
         MVI   S99TUKEY+1,DALPERMA     SET TEXT UNIT KEY
         RCPDINC  4
         MEND
./ ADD NAME=RCPPPL   0100-85112-85112-0835-00092-00092-00000-MAS1
         MACRO
&NAME    RCPPPL &PCL=,&NOPARM=,&PARSERR=,&PDLREG=R11,                  X
               &PDLNAME=,&PARSEP=,&PARSWKA=
         GBLB  &RCPPPL(2),&RCPECT(2)
         GBLC  &RCPPRE,&RCPPREP
         LCLC  &P
&P       SETC  '&RCPPRE'
         AIF   (&RCPPPL(2)).BPPL
         EJECT
         IKJPPL
L#PPL    EQU   *-PPL                   LENGTH OF PPL
&SYSECT  CSECT
         SPACE 1
&RCPPPL(2) SETB 1
.BPPL    RCPDS
&P.PPL   DS    CL(L#PPL)               RESERVE SPACE FOR PPL
&P.PDLP  DS    F                       POINTER TO PDL
         RCPDS
         SPACE 6
***********************************************************************
***   THIS CODE GENERATES A PARSE PARAMETER LIST                    ***
***********************************************************************
         XC    &P.PDLP,&P.PDLP         ZERO PDL POINTER
         AIF   ('&NOPARM(1)' EQ '' OR '&NOPARM(2)' NE '').PB2
         L     R1,CPPLECT              LOAD ECT ADDRESS
&RCPECT(1) SETB 1
         USING ECT,R1                  ECT ADDRESSABLE
         TM    ECTSWS,ECTNOPD          WERE ANY OPERANDS SUPPLIED?
         BO    &NOPARM(1)              NO, BRANCH OUT
         SPACE
.PB2     LA    R1,&P.PPL               LOAD PPL ADDRESS
         USING PPL,R1
         MVC   PPLUPT,CPPLUPT          MOVE IN UPT ADDRESS
         MVC   PPLECT,CPPLECT          MOVE IN ECT ADDRESS
         MVC   PPLCBUF,CPPLCBUF        MOVE IN CBUF ADDRESS
         LA    R15,&P.ECB              LOAD ATTN ECB ADDRESS
         ST    R15,PPLECB              AND STORE IN PPL
         LA    R15,&P.PDLP             LOAD PDL POINTER ADDRESS
         ST    R15,PPLANS               AND STORE IN PPL
         AIF   ('&PARSWKA' EQ '').PB3
         AIF   ('&PARSWKA'(1,1) EQ '').PB4
         LA    R15,&PARSWKA            LOAD ADDRESS OF WORK AREA
         ST    R15,PPLUWA               AND STORE IN PPL
         AGO   .PB3
.PB4     ST    &PARSWKA(1),PPLUWA      STORE ADDRESS OF WORKAREA
.PB3     AIF   ('&PCL' EQ '').EXIT
         L     R15,=V(&PCL)            LOAD PCL ADDRESS
         ST    R15,PPLPCL              AND STORE IN PPL
         SPACE 2
         AIF   ('&NOPARM(1)' EQ '' OR '&NOPARM(2)' EQ '').PB5
         L     R1,CPPLECT              LOAD ECT ADDRESS
&RCPECT(1) SETB 1
         USING ECT,R1
         TM    ECTSWS,ECTNOPD          WERE ANY OPERANDS SUPPLIED?
         BO    &NOPARM(1)               NO, BRANCH OUT
         SPACE
.PB5     AIF   ('&SYSPARM' EQ 'MVT').MVTBYP
         AIF   ('&RCPPREP' EQ '').NOPREP
         L     R15,&RCPPREP            LOAD EP OF IKJPARS
         BALR  R14,R15                  AND ENTER IT
         AGO   .PRET
.NOPREP  ANOP
         L     R15,16                  LOAD CVT ADDRESS
         TM    524(R15),X'80'          IS IKJPARS LOADED?
         AIF   ('&PARSEP' EQ '').PBL1
         BZ    &P.LOAD                  NO, BRANCH TO LOAD SVC
         L     R15,524(15)             LOAD EP OF IKJPARS
         ST    R15,&PARSEP             SAVE ITS ADDRESS
         BALR  R14,R15                 THEN BALR TO IT
         B     &P.PLNKB                BYPASS LOAD SVC
&P.LOAD  LOAD  EP=IKJPARS
         LR    R15,R0                  LOAD EP OF IKJPARS
         ST    R15,&PARSEP             SAVE IT
         BALR  R14,R15                 THEN BALR TO IT
&P.PLNKB DS    0H
         AGO   .PRET
.PBL1    BZ    &P.PLINK                 NO, BRANCH TO LINK SVC
         L     R15,524(R15)            ELSE LOAD ITS ADDRESS
         BALR  R14,R15                  AND BALR TO IT
         B     &P.PLNKB                BYPASS LINK SVC
.MVTBYP  ANOP
&P.PLINK LINK  EP=IKJPARS
&P.PLNKB DS    0H
.PRET    AIF   ('&PARSERR' EQ '').EXIT
         SPACE
         LTR   R15,R15                 TEST RETURN CODE
         BNZ   &PARSERR                 AND BRANCH ON NON-ZERO
         SPACE
         AIF   ('&PDLREG' EQ '' OR '&PDLNAME' EQ '').EXIT
         L     &PDLREG,&P.PDLP         LOAD PDL ADDRESS
         USING &PDLNAME,&PDLREG        PDL DSECT ADDRESSABLE
.EXIT    MEND
./ ADD NAME=RCPPROC  0100-85112-85112-0835-00157-00157-00000-MAS1
         MACRO
         RCPPROC &WKCSECT=,&WKDSECT=,                                  X
               &REG1=,&REG0=,&ISA=,&SAVEPRE=,                          X
               &SAVESUF=,&SP=
         GBLA  &RCPSWS(10)
         GBLC  &RCPPRE,&RCPWKCS,&RCPWKDS
         GBLC  &RCPSPN
         LCLC  &P,&C
         RCPDEBUG
&P       SETC  '&RCPPRE'
         AIF   ('&WKCSECT' EQ '').TDS
         SPACE
         MNOTE 4,'WKCSECT= OPTION INVALID WITH PROC OPTION, '
         MNOTE *,'    WKDSECT=  USED INSTEAD'
&RCPWKDS SETC  '&WKCSECT'
         AGO   .SETCS
.TDS     AIF   ('&WKDSECT' EQ '').SYSECT
&RCPWKDS SETC  '&WKDSECT'
         AGO   .SETCS
.SYSECT  ANOP
&RCPWKDS SETC  '&SYSECT'
.SET1    AIF   (K'&RCPWKDS LT 8).LOK
&RCPWKDS SETC  '&RCPWKDS'(1,4)'&RCPWKDS'(6,3)'1'
         AGO   .SETCS
.LOK     ANOP
&RCPWKDS SETC  '&RCPWKDS.1'
.SETCS   ANOP
&RCPWKCS SETC  ''
&RCPSWS(4) SETA &RCPSWS(2)-1 SET W/A TO BE FREED OPT IF PROC(MAIN)
         AIF   ('&ISA' EQ '').NISA
&RCPSWS(3) SETA 1                      SET LIFO FLAG IF ISA SPEC
.NISA    ANOP
         SPACE 2
         RCPDS
         DS    9D                      SAVE AREA
&P.RCODE DS    F                       RETURN CODE
         RCPMCA
         RCPDS
         SPACE 2
         AIF   ('&REG1' EQ '').TR0
         LR    &REG1,R1                SAVE CONTENTS OF REG 1
.TR0     AIF   ('&REG0' EQ '').TP
         LR    &REG0,R0                SAVE CONTENTS OF REG 0
.TP      AIF   (&RCPSWS(2) EQ 2).PROCMN   PROCMAIN OPTION
         AIF   (&RCPSWS(3) EQ 1).PL    LIFO OPTION
         L     R15,0(R13)              R15 -> MODULE COMMUNIC. AREA
         L     R15,&P.XDS-&P.MCA(R15)  LOAD EXTERNAL DUMMY SECT ADDR
         AL    R15,&P.QCON             GET OFFSET TO WORK AREA
         ST    R15,8(R13)              CHAIN SAVE
         ST    R13,4(R15)               AREAS TOGETHER
         MVC   0(4,R15),0(R13)         COPY POINTER TO COMM AREA
         LR    R13,R15                 LOAD WORK AREA ADDRESS
         USING &RCPWKDS,R13              ESTABLISH ADDRESSABLITY TO IT
         MEXIT
.PL      ANOP
***********************************************************************
*        GET WORKAREA FROM LIFO STACK                                 *
***********************************************************************
         #GET  LV=&P.WKLEN
         ST    R1,8(R13)               CHAIN SAVE
         ST    R13,4(R1)                AREAS TOGETHER
         MVC   0(4,R1),0(R13)          PROPAGATE MODULE COMM. AREA ADDR
         LR    R13,R1                  LOAD WORK AREA ADDRESS
         USING &RCPWKDS,R13             ESTABLISH ADDRESSABILITY TO IT
         MEXIT
.PROCMN  L     R0,&P.CXD               LOAD WORK AREA LENGTH
         AIF   ('&SYSPARM' EQ 'MVT').MVT
 MNOTE *,'      GETMAIN RU,LV=(0),SP=&SP,BNDRY=PAGE'
         GETMAIN RU,LV=(0),SP=&SP,BNDRY=PAGE
         AGO   .CONT
.MVT     AIF   ('&SP' EQ '').NOSP
         ICM   R0,8,=AL1(&SP)          INSERT SUBPOOL NUMBER
.NOSP    ANOP
*        GETMAIN R,LV=(0)              OBTAIN A WORK AREA
.CONT    ANOP
&RCPSPN  SETC  '&SP'
         LR    R15,R13                 SAVE CALLER'S SAVE AREA ADDR
         LR    R13,R1                  LOAD EXT DUMMY SECTION ADDR
         AL    R13,&P.QCON              ADD OFFSET TO WORK AREA
         ST    R13,8(R15)              CHAIN SAVE
         ST    R15,4(R13)               AREAS TOGETHER
         USING &RCPWKDS,R13            GET WORKAREA ADDRESSABILITY
         ST    R1,&P.XDS               STORE DUMMY SECTION ADDR IN     X
                                         MODULE COMMUNICATIONS AREA
         LA    R15,&P.MCA              STORE COMMUNICATIONS AREA ADDR
         ST    R15,0(R13)               IN WORD 1 OF SAVE AREA
         AIF   (&RCPSWS(3) EQ 0 AND '&ISA' EQ '').EXIT
&RCPSWS(3) SETA 1                      SET LIFO IN CASE ONLY ISA SPEC
&C       SETC  '&ISA'
         AIF   ('&ISA' NE '').TK
&C       SETC  '8192'
         AGO   .NK
.TK      AIF   ('&C'(K'&C,1) NE 'K').NK
&C       SETC  '&C'(1,K'&C-1)'*1024'
.NK      EJECT
***********************************************************************
**       INITIALIZE MODULE COMMUNICATIONS AREA WITH POINTERS         **
**       TO LIFO STACK AND LIFO GET/FREE ROUTINES                    **
***********************************************************************
         SPACE 1
         MVC   &P.A#GET,=V(#####GET)   MOVE LIFO GET AND FREE
         MVC   &P.A#FRE,=V(####FREE)    ROUTINE ADDRESSES TO MCA
         L     R15,=Q(#####ISA)        COMPUTE LIFO STACK
         AL    R15,&P.XDS               PSEUDO REGISTER OFFSET
         ST    R15,&P.#S                 AND INITIALIZE POINTERS
         ST    R15,&P.#N                  IN MODULE COMMUNICATIONS AREA
         L     R14,=A(&C)              LOAD SIZE OF INITIAL STACK AREA
         ST    R14,&P.#L               STORE THIS IN MCA
         ALR   R15,R14                  THEN COMPUTE STACK END ADDRESS
         ST    R15,&P.#E                 AND STORE THIS INTO MCA
         EJECT
***********************************************************************
**       LIFO STACK GET/FREE ROUTINES                                **
***********************************************************************
         SPACE 1
#####ISA DXD   CL(&C)                  DEFINE PSEUDO REGISTER FOR ISA
         SPACE 1
#####GET CSECT                         LIFO GET ROUTINE
         USING *,R15
         USING &P.MCA,R1
         A     R0,&P.F7                ROUND LENGTH UP TO
         N     R0,&P.F8                 A MULTIPLE OF 8
         AL    R0,&P.#N                COMPUTE NEXT FREE LIFO SLOT ADDR
         CL    R0,&P.#E                COMPARE TO STACK END ADDRESS
         BH    &P.GA                    AND IF TOO BIG, BRANCH
         LR    R15,R1                  PRESERVE MCA ADDRESS
         USING &P.MCA,R15              NEW BASE
         L     R1,&P.#N                LOAD ADDRESS OF SLOT
         ST    R0,&P.#N                 AND STORE ADDRESS OF NEXT SLOT
         BR    R14                     RETURN TO CALLER
         SPACE 1
&P.GA    EQU   *                       IF CURRENT SLOT TOO SMALL
*        ABEND 1000,DUMP                ABEND FOR NOW
         ABEND 1000,DUMP
         SPACE 2
####FREE DS    0H                      LIFO FREE ROUTINE
         ENTRY ####FREE
         USING *,R15                   BASE ADDRESS
         USING &P.MCA,R1               MCA ADDRESS
         CL    R0,&P.#S                CHECK THAT
         BL    &P.FA                    ADDRESS TO BE
         CL    R0,&P.#E                  FREED IS WITHIN
         BH    &P.FA                      BOUND OF CURRENT STACK
         AL    R0,&P.F7                GET UPPER DOUBLE
         N     R0,&P.F8                 WORD BOUNDARY
         ST    R0,&P.#N                  AND UPDATE MCA
         BR    R14                     RETURN TO CALLER
         SPACE 1
&P.FA    EQU   *                       IF ADDRESS NOT WITHIN THIS STACK
*        ABEND 1001,DUMP               ABEND
         ABEND 1001,DUMP
         SPACE 2
&P.F7    DC    F'7'                    CONSTANTS
&P.F8    DC    F'-8'                    TO ROUND UP TO DOUBLEWORD SIZE
         DROP  R1,R15                  KILL ADDRESSABILITY
&SYSECT  CSECT                         RESUME MAIN PROGRAM CSECT
.EXIT    MEND
./ ADD NAME=RCPPSWD  0100-85112-85112-0836-00009-00009-00000-MAS1
         MACRO
         RCPPSWD &PASSW
         GBLC  &DYNP
         SPACE
***********************************************************************
**   BUILD THE PASSWORD TEXT UNIT                                    **
***********************************************************************
         RCPVCHAR DALPASSW,14,&PASSW
         MEND
./ ADD NAME=RCPQNAME 0100-85112-85112-0836-00009-00009-00000-MAS1
         MACRO
         RCPQNAME &QNAME
         GBLC  &DYNP
         SPACE
***********************************************************************
**   BUILD THE QNAME TEXT UNIT                                       **
***********************************************************************
         RCPVCHAR DALQNAME,14,&QNAME
         MEND
./ ADD NAME=RCPRNGE  0100-85112-85112-0837-00017-00017-00000-MAS1
         MACRO - BREAK A RANGE PARAMETER INTO TWO
         RCPRNGE &P
         GBLC  &RCPRNGE(2)
         LCLA  &I,&J,&K
&K       SETA  K'&P
&RCPRNGE(1) SETC ''
&RCPRNGE(2) SETC ''
.LOOP    ANOP
&I       SETA  &I+1
         AIF   (&I GT &K).NR
         AIF   ('&P'(&I,1) NE '-' AND '&P'(&I,1) NE ':').LOOP
&RCPRNGE(1) SETC '&P'(1,&I-1)
&RCPRNGE(2) SETC '&P'(&I+1,&K-&I)
         MEXIT
.NR      ANOP
&RCPRNGE(1) SETC '&P'
         MEND
./ ADD NAME=RCPSPACE 0100-85112-85112-0841-00095-00095-00000-MAS1
         MACRO
         RCPSPACE &SPACE
         GBLA  &RCPSUB#                NO OF SUBLIST ELEMENTS
         GBLC  &RCPSUBL(100)           SUBLIST ELEMENTS
.**********************************************************************
.*    THIS IS AN ALLOC INNER MACRO TO BUILD THE ALLOCATION SPACE
.*    QUANTITY TEXT UNIT. IT SHOULD BE SPECIFIED AS:-
.*     SPACE=(TYPE,(PRIMARY,SECONDARY,DIRECTORY),RLSE,CONTIG,ROUND)
.*   WHERE TYPE IS 'TRK', 'CYL', 'ABSTR' OR A BLOCK QUANTITY
.*     'CYL' OR 'TRK' SHOULD NOT BE ENTERED IN QUOTES. THE BLOCK
.*     QUANTITY CAN BE A NUMBER, A REGISTER (IN BRACKETS), OR THE
.*     NAME OF A FULLWORD CONTAINING THE BLOCK SIZE.
.**********************************************************************
         AIF   ('&SPACE(1)' EQ '' OR '&SPACE(1)' EQ 'TRK').TRK
         AIF   ('&SPACE(1)' EQ 'CYL').CYL
***********************************************************************
**        SPACE UNIT IN BLOCKS                                       **
***********************************************************************
         RCPNTU DALBLKLN,3,&SPACE(1)  GENERATE BLOCK UNIT TU
         AGO   .TPRIME        GO TEST PRIME QUANTITY
.TRK     ANOP  TRACK SPEC REQ OR DEFAULTED
         SPACE
***********************************************************************
**       SPACE QUANTITY IN TRACKS                                    **
***********************************************************************
         MVI   S99TUKEY+1,DALTRK       SET TEXT UNIT KEY
         RCPDINC 4
         AGO   .TPRIME
.CYL     ANOP  CYL QUANTITY
         SPACE 1
***********************************************************************
**      SPACE UNIT IN CYLINDERS                                      **
***********************************************************************
         MVI   S99TUKEY+1,DALCYL       SET TEXT UNIT KEY
         RCPDINC 4                     STORE TEXT UNIT ADDR
.TPRIME  RCPSUBL &SPACE(2)             BREAK UP SUBLIST
         AIF   (&RCPSUB# EQ 0).TCONTIG
         AIF   ('&RCPSUBL(1)' EQ '').TSP2
         SPACE
***********************************************************************
**       PRIMARY SPACE QUANTITY                                      **
***********************************************************************
         RCPNTU DALPRIME,3,&RCPSUBL(1)
.TSP2    AIF   (&RCPSUB# LT 2).TCONTIG
         AIF   ('&RCPSUBL(2)' EQ '').TSP3
         SPACE
***********************************************************************
**       SECONDARY SPACE QUANTITY                                    **
***********************************************************************
         RCPNTU DALSECND,3,&RCPSUBL(2)
.TSP3    AIF   (&RCPSUB# LT 3).TCONTIG
         AIF   ('&RCPSUBL(3)' EQ '').TCONTIG
         SPACE
***********************************************************************
**       DIRECTORY BLOCK QUANTITY                                    **
***********************************************************************
         RCPNTU DALDIR,3,&RCPSUBL(3)
.TCONTIG AIF  ('&SPACE(3)' EQ 'CONTIG' OR '&SPACE(4)' EQ 'CONTIG').CON
         AIF   ('&SPACE(3)' EQ 'MXIG' OR '&SPACE(4)' EQ 'MXIG').MXIG
         AIF   ('&SPACE(3)' EQ 'ALX' OR '&SPACE(4)' EQ 'ALX').ALX
.TRLSE   AIF   ('&SPACE(3)' EQ 'RLSE' OR '&SPACE(4)' EQ 'RLSE').RLSE
.TROUND  AIF   ('&SPACE(4)'EQ'ROUND'OR'&SPACE(5)'EQ'ROUND').ROUND
         MEXIT
.CON     ANOP
***********************************************************************
**      CONTIGUOUS SPACE TEXT UNIT                                   **
***********************************************************************
         RCPNTU DALSPFRM,1,8
         AGO   .TRLSE
.MXIG    ANOP
***********************************************************************
**       MAXIMUM CONTIGUOUS SPACE TEXT UNIT                          **
***********************************************************************
         RCPNTU DALSPFRM,1,4
         AGO   .TRLSE
.ALX     ANOP
***********************************************************************
**       'ALX' SPACE TEXT UNIT                                       **
***********************************************************************
         RCPNTU DALSPFRM,1,2
         AGO   .TRLSE
.RLSE    ANOP
***********************************************************************
**      RELEASE UNUSED SPACE TEXT UNIT                               **
***********************************************************************
         MVI   S99TUKEY+1,DALRLSE      SET TEXT UNIT KEY
         RCPDINC 4
         AGO   .TROUND
.ROUND   ANOP
***********************************************************************
**      RELEASE UNUSED SPACE TEXT UNIT                               **
***********************************************************************
         MVI   S99TUKEY+1,DALROUND     MOVE IN TEXT UNIT KEY
         RCPDINC 4
         MEND
./ ADD NAME=RCPSPEC  0100-85112-85112-0841-00013-00013-00000-MAS1
         MACRO - SET UP USER DEFINED TEXT UNIT
         RCPSPEC &T
         LCLA  &I,&J
&I       SETA  1
&J       SETA  K'&T
         SPACE
***********************************************************************
**       PROCESS SPECIAL TEXT UNITS                                  **
***********************************************************************
.LOOP    RCPVCHAR &T(&I),&T(&I+2),&T(&I+3),N=&T(&I+1)
&I       SETA  &I+4
         AIF   (&I LE &J).LOOP
         MEND
./ ADD NAME=RCPSR2   0100-85112-85112-0842-00020-00020-00000-MAS1
         MACRO
         RCPSR2 &A
         GBLB  &RCPSR2
         GBLC  &DYNP
         LCLC  &C
.*   TO SAVE REG 2 IN REG 0 FOR ALLOC INNER MACROS FIRST TIME ONLY
.*    IF OPERAND SUPPLIED AND SAVE DONE, RESTORES REG 2 AND
.*    GENERATES MOVE INSTRUCTION FOR EXECUTE
         AIF   ('&A' NE '').UNSAVE
         AIF   (&RCPSR2).EXIT
&RCPSR2  SETB  1
         LR    R0,R2                   SAVE CONTENTS OF REGISTER 2
         MEXIT
.UNSAVE  AIF   (NOT &RCPSR2).EXIT
         B     *+10                    SKIP NEXT INSTRUCTION
&C       SETC  '&DYNP.MVC'
&C       MVC   S99TUPAR(0),0(R14)      EXECUTED MOVE
         LR    R2,R0                   RESTORE CONTENTS OF REGISTER 2
&RCPSR2  SETB  0
.EXIT    MEND
./ ADD NAME=RCPSSREQ 0100-85112-85112-0843-00010-00010-00000-MAS1
         MACRO
         RCPSSREQ
         SPACE 1
***********************************************************************
**       SUBSYSTEM REQUEST TEXT UNIT                                 **
***********************************************************************
         SPACE 1
         MVI   S99TUKEY+1,DALSSREQ MOVE IN TEXT UNIT KEY
         RCPDINC                   4
         MEND
./ ADD NAME=RCPSUB   0102-90002-90003-1026-00009-00009-00001-MSCHMTZ
         MACRO
         RCPSUB &S
         GBLC  &DYNP
         SPACE 1
***********************************************************************
**       SUBSYS TEXT UNIT                                            **
***********************************************************************
         RCPVCHAR DALSSNM,14,&S
.EXIT    MEND
./ ADD NAME=RCPSUBL  0100-85112-85112-0843-00036-00036-00000-MAS1
         MACRO - BREAK DOWN A SUBLIST
         RCPSUBL &L
         GBLA  &RCPSUB#                NO OF ELEMENTS FOUND
         GBLC  &RCPSUBL(100)           ELEMENTS
         LCLA  &I,&J,&K
&RCPSUB# SETA  0                       INITIALIZE
         AIF   ('&L' EQ '').EXIT       EXIT IF NULL STRING
         AIF   ('&L'(1,1) NE '(').NOSUB
&K       SETA  K'&L-1
&I       SETA  2
&J       SETA  1
.LOOP    ANOP
&J       SETA  &J+1
         AIF   (&J  GT &K).LAST
         AIF   ('&L'(&J,1) NE ',').LOOP
&RCPSUB# SETA &RCPSUB#+1
         AIF   (&J EQ &I).NULL
&RCPSUBL(&RCPSUB#) SETC '&L'(&I,&J-&I)
&I       SETA  &J+1
         AGO   .LOOP
.NULL    ANOP
&RCPSUBL(&RCPSUB#) SETC ''
&I       SETA  &J+1
         AGO   .LOOP
.LAST    AIF   (&J EQ &I).LASTNUL
&RCPSUB# SETA  &RCPSUB#+1
&RCPSUBL(&RCPSUB#) SETC '&L'(&I,&J-&I)
         AGO   .EXIT
.LASTNUL ANOP
&RCPSUB# SETA  &RCPSUB#+1
&RCPSUBL(&RCPSUB#) SETC ''
         AGO   .EXIT
.NOSUB   ANOP
&RCPSUBL(1) SETC '&L'
&RCPSUB# SETA 1
.EXIT    MEND
./ ADD NAME=RCPSYSOU 0101-85112-89227-0904-00066-00060-00008-MSCHMTZ
         MACRO
         RCPSYSOU &CLASS,&COPIES=,&FREE=,&DEST=,&FORMS=,&USER=
         GBLC  &DYNP
         LCLC  &C
         AIF   ('&CLASS(1)' EQ '').TPGN
&C       SETC  '&CLASS(1)'
         SPACE
***********************************************************************
**       SYSOUT CLASS TEXT UNIT                                      **
***********************************************************************
         AIF   ('&C'(1,1) EQ '''').Q
         AIF   ('&C'(K'&C,1) EQ '/').BS
         AIF   ('&C'(1,1) EQ '(').REG
         L     R14,&C                  LOAD ADDRESS OF SYSOUT CLASS
         MVC   S99TUPAR(1),0(R14)       AND MOVE IT TO TEXT UNIT
         AGO   .SKEY
.REG     MVC   S99TUPAR(1),0&C         MOVE SYSOUT CLASS TO TEXT UNIT
.SKEY    MVI   S99TUKEY+1,DALSYSOU     SET SYSOUT KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,1            SET LENGTH FIELD
         RCPDINC 8
         AGO   .TPGN
.BS      RCPTUBFR DALSYSOU,14,&C
         AGO   .TPGN
.Q       RCPBTU DALSYSOU,1,&C
.TPGN    AIF   ('&CLASS(2)' EQ '').TCOP
         SPACE
***********************************************************************
**   SYSOUT PROGRAM NAME TEXT UNIT                                   **
***********************************************************************
&C       SETC  '&CLASS(2)'
         RCPVCHAR DALSPGNM,14,&C
.TCOP    AIF   ('&COPIES' EQ '').TFREE
         SPACE
***********************************************************************
**    SYSOUT COPIES TEXT UNIT                                        **
***********************************************************************
         RCPNTU DALCOPYS,1,&COPIES
.TFREE   AIF   ('&FREE' EQ '').TDEST
         SPACE
***********************************************************************
**     FREE = CLOSE TEXT UNIT                                        **
***********************************************************************
         AIF   ('&FREE' EQ 'CLOSE').CLOSEOK
         MNOTE 4,' **** FREE=&FREE INVALID, FREE=CLOSE USED'
.CLOSEOK MVI   S99TUKEY+1,DALCLOSE     MOVE IN TEXT UNIT KEY
         RCPDINC 4
.TDEST   AIF   ('&DEST' EQ '').TFORMS
         SPACE
***********************************************************************
**       SYSOUT DESTINATION TEXT UNIT                                **
***********************************************************************
         RCPVCHAR DALSUSER,14,&DEST
.TFORMS  AIF   ('&FORMS' EQ '').TUSER
         SPACE
***********************************************************************
**     SYSOUT FORMS NUMBER TEXT UNIT                                 **
***********************************************************************
         RCPVCHAR DALSFMNO,14,&FORMS
.TUSER   AIF   ('&USER' EQ '').EXIT
         SPACE
***********************************************************************
**       USER ID TEXT UNIT                                           **
***********************************************************************
         RCPVCHAR DALUSRID,14,&USER
.EXIT    MEND
./ ADD NAME=RCPTU    0100-85112-85112-0844-00025-00025-00000-MAS1
         MACRO
         RCPTU &TU            TEXT UNIT LIST
         GBLA  &DTUPO         TEXT UNIT POINTER OFFSET
         GBLC  &DYNP          ALLOC SYMBOL PREFIX
         LCLA  &I,&J
         LCLC  &C
         SPACE 1
***********************************************************************
**       ADD SPECIAL TEXT UNITS                                      **
***********************************************************************
&J       SETA  N'&SYSLIST
.LOOP    ANOP
&I       SETA  &I+1
         AIF   (&I GT &J).EXIT
         AIF   ('&TU(&I)'(1,1) EQ '(').R
         LA    R15,&TU(&I)             LOAD TEXT UNIT ADDRESS
         ST    R15,&DYNP.TUP+&DTUPO     AND STORE IT IN POINTER LIST
&DTUPO   SETA  &DTUPO+4
         AGO   .LOOP
.R       ANOP
&C       SETC  '&TU(&I)'(2,K'&TU(&I)-2)
         ST    &C,&DYNP.TUP+&DTUPO     STORE TEXT UNIT ADDR IN PTR LIST
&DTUPO   SETA  &DTUPO+4
         AGO   .LOOP
.EXIT    MEND
./ ADD NAME=RCPTUBFR 0100-85112-85112-0845-00060-00060-00000-MAS1
         MACRO  - BUILD TEXT UNIT FROM BUFFER
         RCPTUBFR &KEY,                TEXT UNIT KEY                   X
               &L,                     MAXIMUM LENGTH VALUE            X
               &C,                     TEXT UNIT                       X
               &N=1                    TEXT UNIT NUMBER
         GBLC  &EXECNAM
         LCLC  &C1,&C2
         LCLA  &I,&K
         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY
         AIF   ('&N' EQ '' OR '&N' EQ '1').N1
         LA    R14,&N                  LOAD TEXT UNIT NUMBER
         STH   R14,S99TUNUM             AND STORE INTO TEXT UNIT
         AGO   .ENDN
.N1      MVI   S99TUNUM+1,1            SET TEXT UNIT NUMBER
.ENDN    ANOP
&K       SETA  K'&C
&I       SETA  &K-1
.LOOP1   ANOP
&K       SETA  &K-1
         AIF   (&K LE 0).STD
         AIF   ('&C'(&K,1) NE '/').LOOP1
&C2      SETC  '&C'(&K+1,&I-&K)
&C1      SETC  '&C'(1,&K-1)
         AIF   ('&C1'(1,1) NE '(').TC2
&C1      SETC  '0&C1'
.TC2     AIF   ('&C2' EQ '0000').V2B
         AIF   ('&C2' EQ '00').V1B
         AIF   ('&C2' EQ '0').V0B
         AIF   ('&C2'(1,1) EQ '(').RL
         MVI   S99TULNG+1,&C2          SET LENGTH FIELD
         MVC   S99TUPAR(&C2.),&C1      MOVE IN TEXT UNIT
         RCPDINC &L
         MEXIT
.STD     ANOP
&K       SETA  &L-6
         MVI   S99TULNG+1,&K           SET TEXT UNIT LENGTH
&C1      SETC  '&C'(1,&I)              REMOVE TRAILING SLASH
         MVC   S99TUPAR(&K),&C1        MOVE IN TEXT UNIT
         RCPDINC &L
         MEXIT
.V2B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH
         S     R14,=A(4)               EXCLUDE LENGTH OF HEADER
&C1      SETC  '4+&C1'
         AGO   .MOVE
.V1B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH
&C1      SETC  '2+&C1'
         AGO   .MOVE
.V0B     SLR   R14,R14                 CLEAR FOR IC
         IC    R14,&C1                 INSERT TEXT UNIT LENGTH
&C1      SETC  '1+&C1'
         AGO   .MOVE
.RL      ANOP
&C2      SETC  '&C2'(2,K'&C2-2)
         LR    R14,&C2                 LOAD TEXT UNIT LENGTH
.MOVE    STH   R14,S99TULNG             AND STORE INTO LENGTH FIELD
         BCTR  R14,0                   GET MACHINE LENGTH
         EXECUTE ,MVC,S99TUPAR-S99TUNIT(0,R15),&C1
         EX    R14,&EXECNAM            MOVE IN TEXT UNIT
         RCPDINC &L
         MEND
./ ADD NAME=RCPTXTL  0100-85112-85112-0845-00017-00017-00000-MAS1
         MACRO - TO COUNT CHARACTERS IN A STRING
         RCPTXTL &S
         GBLA  &RCPTXTL
         LCLA  &I,&K,&L
&RCPTXTL SETA  0
         AIF   (K'&S LT 3).MEND
&RCPTXTL SETA  K'&S-2
&L       SETA  &RCPTXTL
&I       SETA  1
.LOOP    ANOP
&I       SETA  &I+1
.LOOP2   AIF   (&I GT &L).MEND
         AIF   ('&S'(&I,2) NE '''''' AND '&S'(&I,2) NE '&&').LOOP
&I       SETA  &I+2
&RCPTXTL SETA  &RCPTXTL-1
         AGO   .LOOP2
.MEND    MEND
./ ADD NAME=RCPTYPE  0100-85112-85112-0846-00014-00014-00000-MAS1
         MACRO
         RCPTYPE &T
         GBLC  &RCPTYPE
         LCLA  &I,&K
&K       SETA  K'&T
&RCPTYPE SETC  ''
         AIF   (&K EQ 0).EXIT
&RCPTYPE SETC  'C'
.LOOP    ANOP
&I       SETA  &I+1
         AIF   ('&T'(&I,1) LT '0' OR '&T'(&I,1) GT '9').EXIT
         AIF   (&I LT &K).LOOP
&RCPTYPE SETC  'N'
.EXIT    MEND
./ ADD NAME=RCPUNALC 0100-85112-85112-0846-00009-00009-00000-MAS1
         MACRO
         RCPUNALC
         SPACE 1
***********************************************************************
**     FREE EVEN IF PERMANENTLY ALLOCATED                            **
***********************************************************************
         MVI   S99TUKEY+1,DUNUNALC     SET TEXT UNIT KEY
         RCPDINC  4
         MEND
./ ADD NAME=RCPUNIT  0100-85112-85112-0847-00016-00016-00000-MAS1
         MACRO
         RCPUNIT &U,&V
         GBLC  &DYNP
         AIF   ('&U' EQ '').TVOL
         SPACE 1
***********************************************************************
**       UNIT NAME TEXT UNIT                                         **
***********************************************************************
         RCPVCHAR DALUNIT,14,&U
.TVOL    AIF   ('&V' EQ '').EXIT
         SPACE 1
***********************************************************************
**       VOLUME SERIAL TEXT UNIT                                     **
***********************************************************************
         RCPVCHAR DALVLSER,14,&V
.EXIT    MEND
./ ADD NAME=RCPVCHAR 0100-85112-85112-0847-00031-00031-00000-MAS1
         MACRO
         RCPVCHAR &KEY,&LEN,&C,&N=1
         GBLC  &DYNP
         AIF   ('&C'(K'&C,1) EQ '/').BM
         AIF   ('&C'(1,1) EQ '''').QM
         RCPSR2
         AIF   ('&C'(1,1) EQ '(').RM
         LH    R2,&C+4                 LOAD LENGTH OF TEXT UNIT
         LTR   R2,R2                   TEST FOR ZERO
         BZ    *+30                    IF NO TEXT UNIT, SKIP
         L     R14,&C                  LOAD ADDRESS OF TEXT UNIT
         AGO   .STHM
.RM      LH    R2,4&C                  LOAD LENGTH OF TEXT UNIT
         LTR   R2,R2                   AND TEST FOR ZERO
         BZ    *+30                    IF NO TEXT UNIT, SKIP
         L     R14,0&C                 LOAD ADDRESS OF TEXT UNIT
.STHM    STH   R2,S99TULNG             STORE LENGTH OF TEXT UNIT
         BCTR  R2,0                    DECREMENT FOR EXECUTE
         EX    R2,&DYNP.MVC            MOVE IN TEXT UNIT
         MVI   S99TUKEY+1,&KEY         MOVE IN TEXT UNIT KEY
         AIF   ('&N' EQ '1' OR '&N' EQ '').N1
         LA    R14,&N                  LOAD TEXT UNIT NUMBER
         STH   R14,S99TUNUM             AND STORE IT IN TEXT UNIT
         AGO   .ENDN
.N1      MVI   S99TUNUM+1,1            SET NUMBER FIELD
.ENDN    RCPDINC &LEN
         MEXIT
.BM      RCPTUBFR &KEY,&LEN,&C
         MEXIT
.QM      RCPBTU &KEY,&N,&C
         MEND
./ ADD NAME=RCPVOLRT 0101-85112-85200-1023-00012-00012-00002-MAS1
         MACRO
         RCPVOLRT
         SPACE 1
***********************************************************************
**    VOLUME SERIAL RETURN TEXT UNIT                                 **
***********************************************************************
         MVI   S99TUKEY+1,DALRTVOL     SET RETURN VOLUME SERIAL KEY
         MVI   S99TUNUM+1,1            SET NUMBER FIELD
         MVI   S99TULNG+1,6            SET LENGTH FIELD
         MVC   S99TUPAR(6),=CL6' '     INITIALIZE FIELD TO BLANKS
         RCPDINC 14
         MEND
./ ADD NAME=REGS     0100-09022-09022-1206-00008-00008-00000-SCHMUM
         MACRO
         REGS   &C
         LCLA   &N
.L       ANOP
R&N      EQU    &N
&N       SETA   &N+1
         AIF    (&N LT 16).L
         MEND
./ ADD NAME=S99FAIL  0100-85112-85112-0852-00066-00066-00000-MAS1
         MACRO
&NAME    S99FAIL &RB=(R14),&RC=(R15),&CPPL=,&MF=G,&CP=
         GBLB  &RCPCPPL(2)             CP INDICATOR
         GBLC  &RCPPRE
         LCLB  &GEN
         LCLC  &C
&NAME    DS    0H
         AIF   ('&MF(1)' EQ 'G').GEN
         AIF   ('&MF(1)' EQ 'E').EXEC
         MNOTE 4,'&MF(1) IS AN INVALID MF, MF=G USED'
.GEN     LA    R1,FAIL&SYSNDX     LOAD PLIST ADDRESS
&GEN     SETB  1
         AGO   .L
.EXEC    AIF   ('&MF(2)' NE '').LISTOK
         MNOTE 8,'LIST ADDRESS NOT SPECIFIED'
         MEXIT
.LISTOK  AIF   ('&MF(3)' EQ '').TMF2
&MF(3)   EQU   24                      LENGTH OF PARAMETER LIST
.TMF2    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').L
         AIF   ('&MF(2)'(1,1) EQ '(').REG
         LA    R1,&MF(2)          LOAD DAIRFAIL PARAM LIST ADDRESS
         AGO   .L
.REG     ANOP
&C       SETC  '&MF(2)'(2,K'&MF(2)-2)
         LR    R1,&C              LOAD DAIRFAIL PARAM LIST ADDR
.L       AIF   ('&RB'(1,1) EQ '(').RBR
         AIF   ('&RB' NE '').RBA
         MNOTE 8,'REQ BLOCK ADDRESS NOT SPECIFIED'
         MEXIT
.RBR     ST    &RB(1),0(R1)       STORE S99 RB ADDRESS
         AGO   .RC
.RBA     LA    R14,&RB            LOAD ADDRESS OF REQ BLOCK
         ST    R14,0(R1)          AND STORE IN PLIST
.RC      AIF   ('&RC'(1,1) EQ '(').RCR
         LA    R14,&RC            LOAD ADDRESS OF RET CODE
         ST    R14,4(R1)          AND STORE IN PLIST
         AGO   .EFF02
.RCR     ANOP
.GRC     LA    R14,20(R1)         LOAD ADDR RET CODE FLD
         ST    &RC(1),0(R14)      STORE RET CODE
         ST    R14,4(R1)          AND STORE ITS ADDRESS
.EFF02   LA    R14,=A(0)          LOAD ADDR OF FULLWORD OF 0
         ST    R14,8(R1)          STORE IT.
         AIF   ('&CP' EQ 'YES' OR &RCPCPPL(1)).CPID
         LA    R14,=X'8032'       LOAD ADDRESS OF CALLERID
         ST    R14,12(R1)          AND STORE IT
         XC    16(4,R1),16(R1)    CLEAR CPPL POINTER
         AGO   .GO
.CPID    LA    R14,=Y(50)         LOAD ADDRESS OF CALLERID
         ST    R14,12(R1)         AND STORE IT
         AIF   ('&CPPL' EQ '').DCPPL
         AIF   ('&CPPL'(1,1) EQ '(').RCPPL
         LA    R14,&CPPL          LOAD CPPL ADDRESS
         ST    R14,16(R1)          AND STORE IT
         AGO   .GO
.DCPPL   MVC   16(4,R1),&RCPPRE.CPPL MOVE IN CPPL ADDRESS
         AGO   .GO
.RCPPL   ST    &CPPL(1),16(R1)    STORE ADDRESS OF CPPL
.GO      LINK  EP=IKJEFF18
         AIF   (NOT &GEN).EXIT
         SPACE 1
         RCPDS
&C SETC 'FAIL&SYSNDX'
&C       DS    6F             RESERVE SPACE FOR PARAM LIST
         RCPDS
.EXIT    MEND
