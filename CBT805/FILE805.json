{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012834000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1293292, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE805.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1293292, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1293292, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE805.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x15\\x10'", "DS1TRBAL": "b'2V'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05v\\x00\\x08\\x05w\\x00\\x0e\\x00\\x16'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t\\x04/\\x01\\t\\x04/\\x11\\x05\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-02-11T00:00:00", "modifydate": "2009-02-11T11:05:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-478"}, "text": "REGULAR CBT TAPE - VERSION 478    FILE:  805\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT478.FILE805\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 29 MEMBERS COUNTED; CUMULATIVE SIZE IS 11,912 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/11/09    11:05:40    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$INTRO": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x003\\x01\\t\\x04/\\x01\\t\\x04/\\x11\\x02\\x00g\\x00g\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-02-11T00:00:00", "modifydate": "2009-02-11T11:02:33", "lines": 103, "newlines": 103, "modlines": 0, "user": "SCHMUM"}, "text": "SNMP Overview\n\n  SNMP is an acronym that stands for Simple Network Management\n  Protocol and is part of the TCP/IP protocol suite that is\n  included in the z/OS Communications Server IP.  SNMP is a set\n  of protocols that describes management data and the protocols\n  for exchanging that data between heterogeneous systems. The\n  protocols include both the description of the management data,\n  defined in the Management Information Base (MIB), and the\n  operations for exchanging or changing that information. By\n  implementing common protocols, management data can be exchanged\n  between different platforms with relative ease.\n\n  SNMP is based on the manager/agent model consisting of an SNMP\n  manager, an SNMP agent, a database of management information,\n  managed SNMP devices and the network protocol. The SNMP manager\n  provides the interface between the human network manager and\n  the management system. The SNMP agent provides the interface\n  between the manager and the physical device(s) being managed.\n\n  The SNMP manager and agent use an SNMP Management Information\n  Base (MIB) and a relatively small set of commands to exchange\n  information. The SNMP MIB is organized in a tree structure with\n  individual variables, such as point status or description,\n  being represented as leaves on the branches. A long numeric tag\n  or object identifier (OID) is used to distinguish each variable\n  uniquely in the MIB and in SNMP messages.\n\n  SNMP uses five basic messages (GET, GET-NEXT, GET-RESPONSE,\n  SET, and TRAP) to communicate between the SNMP manager and the\n  SNMP agent. The GET and GET-NEXT messages allow the manager to\n  request information for a specific variable.  The agent, upon\n  receiving a GET or GET-NEXT message, will issue a GET-RESPONSE\n  message to the SNMP manager with either the information\n  requested or an error indication as to why the request cannot\n  be processed. A SET message allows the SNMP manager to request\n  a change be made to the value of a specific variable in the\n  case of an alarm remote that will operate a relay. The SNMP\n  agent will then respond with a GET-RESPONSE message indicating\n  the change has been made or an error indication as to why the\n  change cannot be made. The SNMP TRAP message allows the agent\n  to spontaneously inform the SNMP manager of an \"important\"\n  event.\n\n  Most of the messages (GET, GET-NEXT, and SET) are only issued\n  by the SNMP manager. Because the TRAP message is the only\n  message capable of being initiated by an SNMP agent, it is the\n  message used by DPS Remote Telemetry Units (RTUs) to report\n  alarms. This notifies the SNMP manager as soon as an alarm\n  condition occurs, instead of waiting for the SNMP manager to\n  ask.\n\nSNMP and Shands (the Hospital at the University of Florida)\n\n  Recently, Shands bought an Enterprise monitoring software\n  package called NimBUS from a company called NimSoft. We use the\n  software to monitor hardware and software applications. Various\n  metrics (information) are interrogated at regular intervals and\n  alerts sent out to the responsible parties when threshold\n  levels are exceeded or error conditions are detected.\n  Unfortunately, the product was never designed with the\n  mainframe in mind. However, the product uses SNMP extensively\n  to query data and receive SNMP traps so I was able to exploit\n  this by writing my own sub-agent and monitoring programs. Much\n  of the alerting I do is designed to relieve the operator from\n  having to a) detect an error condition and b) notify us of the\n  error. With the sub-agent, console monitoring program, and our\n  Enterprise monitoring system, we are able to be paged and/or\n  emailed immediately whenever a system critical condition\n  arises. Early detection greatly decreases our chances of a\n  downtime.\n\nNIMBCONS\n  The monitoring program is basically a software system console.\n  All console messages are received by the program and for select\n  messages, an SNMP trap is sent out which our monitoring\n  software intercepts and sets an alert. Currently, we are\n  monitoring the following error messages:\n\n  IGD17380I STORAGE GROUP (sgname) IS ESTIMATED AT xx% OF CAPACITY\n  DFHSM0131 applid CICS is under stress (short on storage below 16MB)\n  DFHSM0133 applid CICS is under stress (short on storage above 16MB)\n  DFHSM0102 applid A storage violation has been detected by...\n  DFHSM0103 applid A storage violation has been detected by...\n\nNIMAGENT\n  The sub-agent that I wrote interrogates several sub-systems and\n  collects data.  This data is queried by the monitoring software\n  and alerts are generated if need be. Currently, I collect or\n  plan to collect:\n\n  NIMSYS  - CPU utilization, Hardware Model, Last IPL Date, Last\n            IPL Time, LPAR Name, OS Product Name, OS Product\n            Version\n  NIMJES  - JES2 JOE utilization, Jes2 JQE utilization. Future\n            enhancements will include SPOOL utilization\n  NIMHSM  - Future enhancement will include\n            MCDS/BCDS/OCDS/Journal free space, function statuses\n  NIMEXST - Check on the existence of critical started tasks,\n            Jobs, DB2 regions, etc.\n  NIMDASD - Future enhancement will include mirroring status,\n            storage group free space\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$DISCL": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00'\\x01\\t\\x02/\\x01\\t\\x04\\x0f\\x15E\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2009-01-22T00:00:00", "modifydate": "2009-02-09T15:45:27", "lines": 23, "newlines": 23, "modlines": 0, "user": "SCHMUM"}, "text": "***********************************************************************\n*                                                                     *\n*                           DISCLAIMER                                *\n*                                                                     *\n*      The author, including shands healthcare, its officers,         *\n*      directors, and employees make no representation or             *\n*      warranty of any kind whatsoever, including, but not            *\n*      limited to, representations or warranties, express or          *\n*      implied, or merchantability, fitness for use or purpose,       *\n*      accuracy or completeness of processes, procedures,             *\n*      designs, definitions, instructions, information, or            *\n*      functioning of any programs, documents, or related             *\n*      materials; the author further expressly disclaims any          *\n*      knowledge of purpose for which these programs,                 *\n*      documents, or related material may be utilized or their        *\n*      applicability for such use, nor shall the fact of making       *\n*      them available constitute any such representation,             *\n*      warranty, or knowledge; nor does the author assume any         *\n*      liability, responsibility, or obligation arising from          *\n*      the use or malfunctioning of of these computer programs,       *\n*      documentation, or related materials.                           *\n*                                                                     *\n***********************************************************************\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$PDSLOAD": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x17\\x002\\x01\\x026_\\x01\\t\\x04\\x1f#\\x14\\x00&\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.23", "flags": 0, "createdate": "2002-12-31T00:00:00", "modifydate": "2009-02-10T23:14:32", "lines": 38, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBL JOB (ACCT#),PDSLOAD,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//* --------------------------------------------------- *//\n//*      PDSLOAD JOB TO CREATE INSTALL LIBRARIES        *//\n//*         Change 'yourid.' to your userid ---         *//\n//*         Change 'volser'  to your output volser      *//\n//*     (THIS JOB WAS TESTED TO WORK ON MY SYSTEM)      *//\n//* --------------------------------------------------- *//\n//TSOBATCH EXEC PGM=IKJEFT01\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN DD *\n   RECEIVE INDS('this.pds.name(PDSLOAD)')\n   DSN ('yourid.TEMP.PDSLOAD') VOL(volser)\n/*\n//*\n//PDSLOAD PROC IPDS='yourid.CBT478.FILE805',       <=== THIS PDS\n//             OPRE=yourid,\n//             QUAL=FILE805,\n//             MEMB=XXX,\n//             OUNT=SYSALLDA,\n//             OVL=volser,\n//             DSP1=NEW,\n//             DSP2=CATLG,\n//             DSP3='',\n//             P=30,S=60,D=44\n//*\n//LOAD   EXEC PGM=PDSLOAD\n//STEPLIB  DD DISP=SHR,DSN=yourid.TEMP.PDSLOAD\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=&IPDS(&MEMB)\n//SYSUT2   DD UNIT=&OUNT,VOL=SER=&OVL,\n//             DSN=&OPRE..&QUAL..&MEMB,\n//             DISP=(&DSP1,&DSP2&DSP3),\n//             SPACE=(TRK,(&P,&S,&D),RLSE)\n//  PEND\n//*\n//S001 EXEC PDSLOAD,MEMB=MACROS\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "#README": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00#\\x01\\t\\x02\\x1f\\x01\\t\\x04\\x1f#\\x17\\x00m\\x00\\x11\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2009-01-21T00:00:00", "modifydate": "2009-02-10T23:17:23", "lines": 109, "newlines": 17, "modlines": 0, "user": "SCHMUM"}, "text": "***********************************************************************\n* Many thanks go out to those of you on the MVS and Assembler         *\n* ListServs who answered the many questions I had while I was         *\n* creating this beastie.                                              *\n***********************************************************************\n\nOVERVIEW\n  This dataset contains several programs which may be of general\n  interest to other installations.  They are, of course, available on\n  an as-is condition with the usual disclaimer.\n\n  I am under no illusions about the level of my assembler coding\n  skills.  I'm not an expert by any means.  However, having said\n  that, these programs were used in z/OS 1.7 and our current z/OS\n  1.9 environment.  They should work on any IBM supported system.\n  Some may not work on earlier systems.\n\n  This dataset contains the source code and JCL needed to establish\n  an SNMP sub-agent, an EMC (Extended MCS) monitoring started task\n  and an externally called storage snap program.  Run the $PDSLOAD\n  job to create the macro library from the MACROS member of this\n  pds.\n\n  The IBM macros can be found in SYS1.MACLIB, TCPIP.SEZAMAC and\n  SYS1.AMODGEN. A list of the macros and control block DSECTS used\n  can be found in member $$CTLBLK.\n\n  For some of the metrics I gather, I couldn't figure out how to get\n  the information through control block chaining (I DID mention I\n  wasn't an expert in this). To compensate for this, I use/call system\n  REXX execs from which I issue JES2 commands, HSM commands, etc. and\n  process the output from these commands. Not the most efficient way\n  to do it, but it works.\n\n  2/10/09 - As of this writing, I have discovered a bug with system\n  REXX in that AXRCMD does not handle certain types of multi-line\n  command output (e.g. $DSPOOL, F HSM,QUERY CDS, etc.). A PMR has\n  been opened with IBM.\n\nNIMAGENT\n  This SNMP sub-agent attaches several subtasks which query/check\n  various system metrics and updates established MIB values. These\n  values may then be queried by an external monitor (such as NimBUS\n  in our case) and alerting done. All of the SNMP interfacing is done\n  via the Distributed Program Interface (DPI). See RFC 1228 for more\n  information.\n\n  Future enhancements:\n  - Eliminate the system REXX execs by going directly to the control\n    blocks\n  - Finish the RENT process. Currently the sub-tasks are re-entrant\n    but the overall load module is not.\n  - Add a MODIFY command to dynamically change the timer interval for\n    any of the sub-tasks (currently hardcoded).\n\nNIMBEMCS\n  The EMC monitoring program can be used to monitor console messages\n  and issue SNMP traps to an external monitoring system for alerting\n  purposes. The sample included here was based on a sample IBM\n  program found in SYS1.SAMPLIB(IEAEXMCS).\n\n  Note: The EMC monitoring program issues SNMP traps.  Ours is coded\n  to use the 'awtrap' program which I found within the base Unicenter\n  code from Computer Associates (CAI) and is found in the HFS/ZFS\n  file:\n     /cai/agent/ro/awtrap\n\n  If you do not have access to this command, you will need to code\n  or find own trap command or issue one via DPI.\n\nPCCSSNAP\n  PCCSSNAP is a re-entrant program that can be linked to from a\n  program and used to snap storage areas for debugging purposes. The\n  addresses of the storage area to be snapped are passed via a\n  parmlist. The snap output is directed to a JES2 sysout dataset,\n  which a DD (SNAPDD) is dynamically allocated for.\n\n\nDataset Contents:\n\n  Member      Description\n  --------------------------------------------------------------\n  $$DISCL   - Disclaimer\n  #README   - This member description list\n  ASM       - Assemble/link entire sub-agent\n  ASM1      - Assemble/link a single subtask\n  Author    - Contact information\n  LINK1     - Linkedit sub-agent\n  NIMAGENT  - Started task JCL for NIMAGNT program\n  NIMAGNT   - Main sub-agent\n  NIMBEMCS  - Console monitoring program\n  NIMBCONS  - Started task JCL for NIMBEMCS program\n  NIMDASD   - Subtask: DASD checks\n  NIMESTA   - Sub-agent/sub-task ESTAI routine\n  NIMEXST   - Subtask: Started task existence checking\n  NIMHSM    - Subtask: HSM checking\n  NIMJES2   - Subtask: JES2 checking\n  NIMMIB    - Subagent MIB\n  NIMSYS    - Subtask: System information\n  NMIBDESC  - Sample MIBDESC for TCPIP\n  NMIBSDAT  - Sample MIBDATA for TCPIP\n  PCCSSNAP  - Callable program to snap data areas for debugging\n  QUERYJES  - System REXX exec to query JES2 metrics (used in NIMJES2)\n\n  The following were used to develop the code to be included within\n  a sub-task\n\n  SYSREXX   - JCL to execute a program that calls a system REXX exec\n  SYSREXXJ  - Program to call system REXX exec (code used in NIMJES2)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE805": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t\\x04/\\x01\\t\\x04/\\x11\\x05\\x00\\x8a\\x00\\x8a\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-02-11T00:00:00", "modifydate": "2009-02-11T11:05:00", "lines": 138, "newlines": 138, "modlines": 0, "user": "CBT-478"}, "text": "//***FILE 805 is from Michael Schmutzok and contains the source     *   FILE 805\n//*       code and JCL needed to establish an SNMP sub-agent, an    *   FILE 805\n//*       EMC (Extended MCS) monitoring started task and an         *   FILE 805\n//*       externally called storage snap program.  Member MACROS    *   FILE 805\n//*       in this file contains the user written macros needed to   *   FILE 805\n//*       compile the programs.                                     *   FILE 805\n//*                                                                 *   FILE 805\n//*       See member $$$INTRO for an explanation of SNMP and an     *   FILE 805\n//*       introduction to what this package does.  It basically     *   FILE 805\n//*       finds \"alerts\" in the system operation, so the sysprog    *   FILE 805\n//*       or an operator can keep track of them.                    *   FILE 805\n//*                                                                 *   FILE 805\n//*           email:  schmum@shands.ufl.edu                         *   FILE 805\n//*                                                                 *   FILE 805\n//*       Many thanks go out to those of you on the MVS and         *   FILE 805\n//*       Assembler ListServs who answered the many questions I     *   FILE 805\n//*       had while I was creating this beastie.                    *   FILE 805\n//*                                                                 *   FILE 805\n//*     OVERVIEW                                                    *   FILE 805\n//*     --------                                                    *   FILE 805\n//*       This dataset contains several programs which may be of    *   FILE 805\n//*       general interest to other installations.  They are, of    *   FILE 805\n//*       course, available on an as-is condition with the usual    *   FILE 805\n//*       disclaimer.                                               *   FILE 805\n//*                                                                 *   FILE 805\n//*       I am under no illusions about the level of my assembler   *   FILE 805\n//*       coding skills.  I'm not an expert by any means.           *   FILE 805\n//*       However, having said that, these programs were used in    *   FILE 805\n//*       z/OS 1.7 and our current z/OS 1.9 environment.  They      *   FILE 805\n//*       should work on any IBM supported system.  Some may not    *   FILE 805\n//*       work on earlier systems.                                  *   FILE 805\n//*                                                                 *   FILE 805\n//*       This dataset contains the source code and JCL needed      *   FILE 805\n//*       to establish an SNMP sub-agent, an EMC (Extended MCS)     *   FILE 805\n//*       monitoring started task and an externally called          *   FILE 805\n//*       storage snap program. Its sister dataset contains the     *   FILE 805\n//*       user written macros needed to compile the programs.       *   FILE 805\n//*       The IBM macros can be found in SYS1.MACLIB,               *   FILE 805\n//*       TCPIP.SEZAMAC and SYS1.AMODGEN. A list of the macros      *   FILE 805\n//*       and control block DSECTS used can be found in member      *   FILE 805\n//*       $$CTLBLK.                                                 *   FILE 805\n//*                                                                 *   FILE 805\n//*       For some of the metrics I gather, I couldn't figure       *   FILE 805\n//*       out how to get the information through control block      *   FILE 805\n//*       chaining (I DID mention I wasn't an expert in this).      *   FILE 805\n//*       To compensate for this, I use/call system REXX execs      *   FILE 805\n//*       from which I issue JES2 commands, HSM commands, etc.      *   FILE 805\n//*       and process the output from these commands. Not the       *   FILE 805\n//*       most efficient way to do it, but it works.                *   FILE 805\n//*                                                                 *   FILE 805\n//*       2/10/09 - As of this writing, I have discovered a bug     *   FILE 805\n//*       with system REXX in that AXRCMD does not handle           *   FILE 805\n//*       certain types of multi-line command output (e.g.          *   FILE 805\n//*       $DSPOOL, F HSM,QUERY CDS, etc.). A PMR has been opened    *   FILE 805\n//*       with IBM.                                                 *   FILE 805\n//*                                                                 *   FILE 805\n//*     NIMAGENT                                                    *   FILE 805\n//*     --------                                                    *   FILE 805\n//*       This SNMP sub-agent attaches several subtasks which       *   FILE 805\n//*       query/check various system metrics and updates            *   FILE 805\n//*       established MIB values. These values may then be          *   FILE 805\n//*       queried by an external monitor (such as NimBUS in our     *   FILE 805\n//*       case) and alerting done. All of the SNMP interfacing      *   FILE 805\n//*       is done via the Distributed Program Interface (DPI).      *   FILE 805\n//*       See RFC 1228 for more information.                        *   FILE 805\n//*                                                                 *   FILE 805\n//*       Future enhancements:                                      *   FILE 805\n//*       - Eliminate the system REXX execs by going directly to    *   FILE 805\n//*         the control blocks                                      *   FILE 805\n//*       - Finish the RENT process. Currently the sub-tasks are    *   FILE 805\n//*         re-entrant but the overall load module is not.          *   FILE 805\n//*       - Add a MODIFY command to dynamically change the timer    *   FILE 805\n//*         interval for any of the sub-tasks (currently            *   FILE 805\n//*         hardcoded).                                             *   FILE 805\n//*                                                                 *   FILE 805\n//*     NIMBEMCS                                                    *   FILE 805\n//*     --------                                                    *   FILE 805\n//*       The EMC monitoring program can be used to monitor         *   FILE 805\n//*       console messages and issue SNMP traps to an external      *   FILE 805\n//*       monitoring system for alerting purposes. The sample       *   FILE 805\n//*       included here was based on a sample IBM program found     *   FILE 805\n//*       in SYS1.SAMPLIB(IEAEXMCS).                                *   FILE 805\n//*                                                                 *   FILE 805\n//*       Note: The EMC monitoring program issues SNMP traps.       *   FILE 805\n//*       Ours is coded to use the 'awtrap' program which I         *   FILE 805\n//*       found within the base Unicenter code from Computer        *   FILE 805\n//*       Associates (CAI) and is found in the HFS/ZFS file:        *   FILE 805\n//*          /cai/agent/ro/awtrap                                   *   FILE 805\n//*                                                                 *   FILE 805\n//*       If you do not have access to this command, you will       *   FILE 805\n//*       need to code or find own trap command or issue one via    *   FILE 805\n//*       DPI.                                                      *   FILE 805\n//*                                                                 *   FILE 805\n//*     PCCSSNAP                                                    *   FILE 805\n//*     --------                                                    *   FILE 805\n//*       PCCSSNAP is a re-entrant program that can be linked to    *   FILE 805\n//*       from a program and used to snap storage areas for         *   FILE 805\n//*       debugging purposes. The addresses of the storage area     *   FILE 805\n//*       to be snapped are passed via a parmlist. The snap         *   FILE 805\n//*       output is directed to a JES2 sysout dataset, which a      *   FILE 805\n//*       DD (SNAPDD) is dynamically allocated for.                 *   FILE 805\n//*                                                                 *   FILE 805\n//*     Dataset Contents:                                           *   FILE 805\n//*                                                                 *   FILE 805\n//*       Member      Description                                   *   FILE 805\n//*       ------------------------------------------------------    *   FILE 805\n//*       $$DISCL   - Disclaimer                                    *   FILE 805\n//*       #README   - This member description list                  *   FILE 805\n//*       ASM       - Assemble/link entire sub-agent                *   FILE 805\n//*       ASM1      - Assemble/link a single subtask                *   FILE 805\n//*       Author    - Contact information                           *   FILE 805\n//*       LINK1     - Linkedit sub-agent                            *   FILE 805\n//*       NIMAGENT  - Started task JCL for NIMAGNT program          *   FILE 805\n//*       NIMAGNT   - Main sub-agent                                *   FILE 805\n//*       NIMBEMCS  - Console monitoring program                    *   FILE 805\n//*       NIMBCONS  - Started task JCL for NIMBEMCS program         *   FILE 805\n//*       NIMDASD   - Subtask: DASD checks                          *   FILE 805\n//*       NIMESTA   - Sub-agent/sub-task ESTAI routine              *   FILE 805\n//*       NIMEXST   - Subtask: Started task existence checking      *   FILE 805\n//*       NIMHSM    - Subtask: HSM checking                         *   FILE 805\n//*       NIMJES2   - Subtask: JES2 checking                        *   FILE 805\n//*       NIMMIB    - Subagent MIB                                  *   FILE 805\n//*       NIMSYS    - Subtask: System information                   *   FILE 805\n//*       NMIBDESC  - Sample MIBDESC for TCPIP                      *   FILE 805\n//*       NMIBSDAT  - Sample MIBDATA for TCPIP                      *   FILE 805\n//*       PCCSSNAP  - Callable program to snap data areas for       *   FILE 805\n//*                   debugging                                     *   FILE 805\n//*       QUERYJES  - System REXX exec to query JES2 metrics        *   FILE 805\n//*                   (used in NIMJES2)                             *   FILE 805\n//*                                                                 *   FILE 805\n//*       The following were used to develop the code to be         *   FILE 805\n//*       included within a sub-task                                *   FILE 805\n//*                                                                 *   FILE 805\n//*       SYSREXX   - JCL to execute a program that calls a         *   FILE 805\n//*                   system REXX exec                              *   FILE 805\n//*       SYSREXXJ  - Program to call system REXX exec (code        *   FILE 805\n//*                   used in NIMJES2)                              *   FILE 805\n//*                                                                 *   FILE 805\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASM": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0f\\x00)\\x01\\x07'\\x7f\\x01\\t\\x04\\x1f\\x11\\x05\\x00U\\x00/\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@\"", "ispf": {"version": "01.15", "flags": 0, "createdate": "2007-10-04T00:00:00", "modifydate": "2009-02-10T11:05:29", "lines": 85, "newlines": 47, "modlines": 0, "user": "SCHMUM"}, "text": "//SCHMUMAS JOB (,OSS),'SCHMUTZOK,MIKE',\n//             CLASS=A,MSGCLASS=X,NOTIFY=SCHMUM\n//OUT1     OUTPUT DEPT='TECH SUPPORT',JESDS=ALL,DEFAULT=YES,\n//             TITLE='ASSEMBLE ALL MODULES OF NIMAGENT'\n/*JOBPARM LINES=100\n//ASMESTA  EXEC ASMAC,\n//             PARM='XREF(SHORT),OBJECT,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=TCPIP.SEZACMAC,DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.MACLIB,DISP=SHR\n//SYSLIN   DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMESTA),DISP=SHR\n//SYSIN    DD  DSN=SCHMUM.NIMAGNT.SOURCE(NIMESTA),DISP=SHR\n//***\n//ASMEXST  EXEC ASMAC,COND=(0,NE),\n//             PARM='XREF(SHORT),OBJECT,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=TCPIP.SEZACMAC,DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.MACLIB,DISP=SHR\n//SYSLIN   DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMEXST),DISP=SHR\n//SYSIN    DD  DSN=SCHMUM.NIMAGNT.SOURCE(NIMEXST),DISP=SHR\n//***\n//ASMJES2  EXEC ASMAC,COND=(0,NE),\n//             PARM='XREF(SHORT),OBJECT,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=TCPIP.SEZACMAC,DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.MACLIB,DISP=SHR\n//SYSLIN   DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMJES2),DISP=SHR\n//SYSIN    DD  DSN=SCHMUM.NIMAGNT.SOURCE(NIMJES2),DISP=SHR\n//***\n//ASMHSM   EXEC ASMAC,COND=(0,NE),\n//             PARM='XREF(SHORT),OBJECT,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=TCPIP.SEZACMAC,DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.MACLIB,DISP=SHR\n//SYSLIN   DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMHSM),DISP=SHR\n//SYSIN    DD  DSN=SCHMUM.NIMAGNT.SOURCE(NIMHSM),DISP=SHR\n//***\n//ASMDASD  EXEC ASMAC,COND=(0,NE),\n//             PARM='XREF(SHORT),OBJECT,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=TCPIP.SEZACMAC,DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.MACLIB,DISP=SHR\n//SYSLIN   DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMDASD),DISP=SHR\n//SYSIN    DD  DSN=SCHMUM.NIMAGNT.SOURCE(NIMDASD),DISP=SHR\n//***\n//ASMSYS   EXEC ASMAC,COND=(0,NE),\n//             PARM='XREF(SHORT),OBJECT,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=TCPIP.SEZACMAC,DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.MACLIB,DISP=SHR\n//SYSLIN   DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMSYS),DISP=SHR\n//SYSIN    DD  DSN=SCHMUM.NIMAGNT.SOURCE(NIMSYS),DISP=SHR\n//***\n//ASMAGNT  EXEC ASMAC,COND=(0,NE),\n//             PARM='XREF(SHORT),OBJECT,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=TCPIP.SEZACMAC,DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.MACLIB,DISP=SHR\n//SYSLIN   DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMAGNT),DISP=SHR\n//SYSIN    DD  DSN=SCHMUM.NIMAGNT.SOURCE(NIMAGNT),DISP=SHR\n//***\n//LKED     EXEC LKED,COND=(0,NE),\n//             PARM='LIST,LET,XREF,AC=1' ENT,REUS'\n//SYSLMOD  DD  DSN=OSS.PROD.ASM.LOAD,DISP=SHR\n//SYSLIN   DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMAGNT),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMEXST),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMJES2),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMHSM),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMDASD),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMSYS),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMESTA),DISP=SHR\n//         DD  DDNAME=SYSIN\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n ENTRY NIMAGNT\n ORDER NIMAGNT\n PAGE NIMAGNT,NIMEXST,NIMJES2,NIMHSM,NIMDASD,NIMSYS,NIMESTA\n NAME NIMAGNT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASM1": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x007\\x01\\x07)\\x7f\\x01\\t\\x04\\x1f\\x11\\x06\\x00\\x1f\\x00\\x12\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2007-10-24T00:00:00", "modifydate": "2009-02-10T11:06:37", "lines": 31, "newlines": 18, "modlines": 0, "user": "SCHMUM"}, "text": "//SCHMUMAS JOB (,OSS),'SCHMUTZOK,MIKE',\n//             CLASS=A,MSGCLASS=X,NOTIFY=SCHMUM\n//OUT1     OUTPUT DEPT='TECH SUPPORT',JESDS=ALL,DEFAULT=YES,\n//             TITLE='ASSEMBLE A SINGLE MODULE OF NIMAGENT'\n/*JOBPARM LINES=100\n//ASMAGNT  EXEC ASMAC,\n//             PARM='XREF(SHORT),OBJECT,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=TCPIP.SEZACMAC,DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.MACLIB,DISP=SHR\n//SYSLIN   DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMJES2),DISP=SHR\n//SYSIN    DD  DSN=SCHMUM.NIMAGNT.SOURCE(NIMJES2),DISP=SHR\n//***\n//LKED     EXEC LKED,COND=(0,NE),\n//             PARM='LIST,LET,XREF,AC=1' ENT,REUS'\n//SYSLMOD  DD  DSN=MSS.SCHMUM.LOADLIB,DISP=SHR\n//SYSLIN   DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMAGNT),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMEXST),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMJES2),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMHSM),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMDASD),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMSYS),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMESTA),DISP=SHR\n//         DD  DDNAME=SYSIN\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n ENTRY NIMAGNT\n ORDER NIMAGNT\n PAGE NIMAGNT,NIMEXST,NIMJES2,NIMHSM,NIMDASD,NIMSYS,NIMESTA\n NAME NIMAGNT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AUTHOR": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x04\\x01\\t\\x02/\\x01\\t\\x02/\\x16\\t\\x00\\x0c\\x00\\x08\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2009-01-22T00:00:00", "modifydate": "2009-01-22T16:09:04", "lines": 12, "newlines": 8, "modlines": 0, "user": "SCHMUM"}, "text": "1/22/2009\n\nMichael Schmutzok\nSr. Systems Programmer\nShands HealthCare\nInformation Services\n1329 SW 16th St\nRoom 3150\nGainesville, FL  32608-1128\nmailto:schmum@shands.ufl.edu\n352.265.7982          (fax)\n352.265.8317  x85465  (voice)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LINK1": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\t\\x00V\\x01\\x07'\\x0f\\x01\\t\\x04\\x1f\\x11\\x17\\x00\\x16\\x00\\x0e\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@\"", "ispf": {"version": "01.09", "flags": 0, "createdate": "2007-09-27T00:00:00", "modifydate": "2009-02-10T11:17:56", "lines": 22, "newlines": 14, "modlines": 0, "user": "SCHMUM"}, "text": "//SCHMUMLE JOB (,TECH),'Mike Schmutzok',\n//             CLASS=A,MSGCLASS=X,NOTIFY=SCHMUM\n//OUT1     OUTPUT DEPT='Tech Support',JESDS=ALL,DEFAULT=YES,\n//             TITLE='Link edit the NIMAGENT modules '\n/*JOBPARM LINES=100\n//LKED     EXEC LKED,\n//             PARM='LIST,LET,XREF,AC=1' ENT,REUS'\n//SYSLMOD  DD  DSN=MSS.SCHMUM.LOADLIB,DISP=SHR\n//SYSLIN   DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMAGNT),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMEXST),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMJES2),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMHSM),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMDASD),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMSYS),DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.OBJLIB(NIMESTA),DISP=SHR\n//         DD  DDNAME=SYSIN\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n ENTRY NIMAGNT\n ORDER NIMAGNT\n PAGE NIMAGNT,NIMEXST,NIMJES2,NIMHSM,NIMDASD,NIMSYS,NIMESTA\n NAME NIMAGNT(R)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MACROS": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t\\x04\\x1f\\x01\\t\\x04\\x1f\\x13\\x07\\x0e\\xb5\\x0e\\xb5\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-02-10T00:00:00", "modifydate": "2009-02-10T13:07:00", "lines": 3765, "newlines": 3765, "modlines": 0, "user": "SCHMUM"}, "text": "./ ADD NAME=$$CTLBLK 0101-09022-09022-1542-00029-00024-00029-SCHMUM\nSYS1.MACLIB\n  BPXYCONS - SYSCALL CONSTANTS\n  BPXYWAST - WAIT STATUS WORD\n  CVT      - COMMUNICATIONS VECTOR TABLE\n  ERBSMFR  - RMF SMF RECORD MAPPING\n  IEAVG131 - MCS EXTENDED CONSOLE STATUS AREA\n  IEAVG132 - PREFIX AREA FOR MESSAGE DATA BLOCK\n  IEAVM105 - MESSAGE DATA BLOCK  (MDB)\n  IEESMCA  - SMF CONTROL TABLE\n  IEFTIOT1 - TASK INPUT/OUTPUT TABLE\n  IEFZB4D0 - DYNAMIC ALLOCATION (SVC 99) PARAMETER LIST\n  IEFZB4D2 - DYNAMIC ALLOCATION KEY DEFINITION TABLE\n  IEZCIB   - COMMAND INPUT BUFFER MAPPING MACRO\n  IEZCOM   - COMMUNICATIONS PARAMETER LIST\n  IEZVG111 - MCSOPER OPERPARM MAPPING\n  IEZVG200 - CONVCON PARAMETER LIST / CNZCONV CONSTANTS\n  IHAASCB  - ADDRESS SPACE CONTROL BLOCK\n\nSYS1.AMODGEN\n  IEZBITS  - SYMBOLIC BITS\n  IEZVX100 - COMMUNICATIONS TASK INSTALLATION EXIT\n  IEZWPL   - WTO/WTOR/MLWTO/WTP PARAMETER LIST\n  IHAASVT  - ADDRESS SPACE VECTOR TABLE\n  IHAECVT  - EXTENDED COMMUNICATIONS VECTOR TABLE\n\nUSER WRITTEN\n  DPIPDU   - DPI PDU MAPPING MACRO\n  NIMAGCB  - AGENT CONTROL BLOCK\n  NIMSTCB  - SUBTASK CONTROL BLOCK\n./ ADD NAME=$$MACROS 0103-09022-09022-1206-00049-00040-00040-SCHMUM\nINCLUDED:\n  #SNAP     - CODING TO SNAP STORAGE AREAS\n  ALLOC     - DYNAMIC ALLOCATION\n  DYNSPACE  - DSECT FOR ALLOC\n  ENTERX    - ENTRY HOUSEKEEPING\n  FREE      - DYNAMIC UN-ALLOCATION\n  LEAVE     - EXIT HOUSEKEEPING\n  NIMAGCB   - SUB-AGENT CONTROL BLOCK\n  NIMSTCB   - SUBTASK CONTROL BLOCK\n  REGS      - ESTABLISH REGISTERS\n  S99FAIL   - DYNAMIC ALLOCATION ERROR ROUTINE\n\nSYS1.MACLIB\n  ABEND     - ABNORMALLY TERMINATE THE CURRENT TASK\n  ATTACH    - PROVIDE THE INTERFACE TO THE ATTACH SUBTASK SERVICE\n              ROUTINE (IEAVEAT0) VIA SVC 42\n  CALL      - PASS CONTROL TO AN EXTERNAL PROGRAM\n  CONVCON   - CONSOLE NAME AND ID CONVERTER MACRO\n  DETACH    - PROVIDE THE INTERFACE TO THE DETACH SUBTASK SERVICE\n              ROUTINE (IEAVEED0) VIA SVC 62\n  ESTAE     - EXTENDED SPECIFY TASK ABNORMAL EXIT\n  EXTRACT   - EXTRACT SYSTEM INFORMATION\n  FREEMAIN  - FREE MAIN STORAGE MACRO\n  GETMAIN   - GET MAIN STORAGE MACRO\n  IDENTIFY  - IDENTIFY CONTENT SUPERVISOR KEY WORDS\n  LINK      - PASS CONTROL TO AN EXTERNAL PROGRAM\n  MCSOPER   - PERFORM THE NON SPACE SWITCH PC TO THE MCSOPER SERVICES\n  MCSOPMSG  - RETRIEVE THE ADDRESS AND ALET OF A MESSAGE WHEN POSTED\n              BY COMM TASK\n  MGCRE     - BUILD A PARAMETER LIST FOR SVC 34 COMMAND PROCESSING\n  MODESET   - SWITCH BETWEEN SUPERVISOR AND PROGRAMMER MODE\n  POST      - PROVIDES AN INTERFACE TO THE POST SERVICE RTN (IEAVEPST)\n  QEDIT     - CIB CHAIN MANIPULATOR\n  RETURN    - EXIT HOUSEKEEPING\n  SDUMP     - INTERFACE BETWEEN THE CALLER AND SVC DUMP\n  SETRP     - INTERFACE FOR RECOVERY ROUTINES TO COMMUNICATE WITH RTM\n  STIMERM   - SET, TEST OR CANCEL UP TO 16 REAL TIME INTERVALS\n  STORAGE   - INTERFACE TO STORAGE ROUTINES\n  SYSEVENT  - PROVIDES THE INTERFACE TO THE SYSTEM RESOURCE MANAGER\n  SYSSTATE  - SET THE VALUE OF THE GLOBAL SET SYMBOL \"SYSASCE\" TO A\n              SPECIFIED VALUE OR A DEFAULT VALUE\n  WAIT      - INTERFACE TO THE WAIT SERVICE ROUTINE (IEAVEWAT)\n  WTO       - WRITE TO OPERATOR\n  WTOR      - WRITE TO OPERATOR WITH REPLY\n\nTCPIP.SEZACMAC\n  EZASMI    - PROVIDE S/390 ASSEMBLER SOCKETS INTERFACE\n  TPIMASK   - SET OR TEST BITS IN THE READ, WRITE AND EXCEPTION MASKS\n              USED IN THE SELECT/SELECTEX MACRO OR CALLS\n./ ADD NAME=#SNAP    0100-94119-94119-1132-00397-00397-00000-SUP00T\n         MACRO                                                          #SNAP\n&NAME    #SNAP &STORAGE=,&LIST=,&ID=,&PDATA=,&SDATA=,&DCB=              #SNAP\n         MNOTE *,'       #SNAP     VERSION 001 07/09/85            MAS' #SNAP\n.********************************************************************** #SNAP\n.*                                                                    * #SNAP\n.* #SNAP                                                              * #SNAP\n.*                                                                    * #SNAP\n.* FUNCTION       GENERATE CODING TO DISPLAY A RANGE OF STORAGE       * #SNAP\n.*                AND REGISTERS.                                      * #SNAP\n.*                                                                    * #SNAP\n.* DESCRIPTION    THIS MACRO WILL GENERATE CODE THAT WILL:            * #SNAP\n.*                 1)  CREATE SNAP DCB                                * #SNAP\n.*                 2)  OPEN SNAP DCB                                  * #SNAP\n.*                 3)  ISSUE SNAP SVC                                 * #SNAP\n.*                 4)  CLOSE SNAP DCB                                 * #SNAP\n.*                                                                    * #SNAP\n.*                REGISTERS 0, 1, 14, AND 15 ARE USED BY THE          * #SNAP\n.*                SNAP AND MUST NOT BE SPECIFIED AS FIRST OR          * #SNAP\n.*                LAST VALUES.                                        * #SNAP\n.*                                                                    * #SNAP\n.* SYNTAX         NAME     #SNAP STORAGE=(FIRST,LAST),                * #SNAP\n.*                               LIST=SYMBOL3,                        * #SNAP\n.*                               SDATA=(SYS DATA CODE),               * #SNAP\n.*                               PDATA=(PROB DATA CODE),              * #SNAP\n.*                               ID=ID NUMBER                         * #SNAP\n.*                                                                    * #SNAP\n.*               NAME    - SPECIFIES THE SYMBOLIC TAG TO BE           * #SNAP\n.*                         ASSIGNED TO THE FIRST INSTRUCTION          * #SNAP\n.*                         GENERATED.  THIS OPERAND IS OPTIONAL.      * #SNAP\n.*                                                                    * #SNAP\n.*               STORAGE - SPECIFIES ONE OR MORE PAIRS OF STARTING    * #SNAP\n.*                         AND ENDING ADDRESSES OF AREAS TO BE DUMPED.* #SNAP\n.*                         EACH STARTING ADRRESS IS ROUNDED DOWN TO A * #SNAP\n.*                         FULL WORD BOUNDARY AND EACH ENDING ADDRESS * #SNAP\n.*                         IS ROUNDED UP TO A FULLWORD BOUNDARY. IF A * #SNAP\n.*                         SYMBOLIC NAME IS SPECIFIED, IT MUST BE     * #SNAP\n.*                         ADDRESSABLE.  IF A REGISTER IS SPECIFIED,  * #SNAP\n.*                         IT MUST BE ENCLOSED IN PARENTHESES. THIS   * #SNAP\n.*                         THIS PARAMETER IS REQUIRED IF THE LIST     * #SNAP\n.*                         PARAMETER IS NOT USED.                     * #SNAP\n.*                                                                    * #SNAP\n.*               LIST    - SPECIFIES THE SYMBOLIC NAME OF A LIST OF   * #SNAP\n.*                         ENTRIES TO BE DUMPED OR A REGISTER WHICH   * #SNAP\n.*                         CONTAINS THE ADDRESS OF THE LIST.          * #SNAP\n.*                         IF A SYMBOLIC NAME IS SPECIFIED, IT MUST   * #SNAP\n.*                         BE ADDRESSABLE.  IF A REGISTER IS          * #SNAP\n.*                         SPECIFIED, IT MUST BE ENCLOSED IN          * #SNAP\n.*                         PARENTHESES.  THIS PARAMETER IS REQUIRED   * #SNAP\n.*                         IF THE FIRST AND LAST PARAMETERS ARE NOT   * #SNAP\n.*                         USED.                                      * #SNAP\n.*                                                                    * #SNAP\n.*                SDATA  - SPECIFIES THE SYSTEM CONTROL PROGRAM       * #SNAP\n.*                         INFORMATION TO BE DUMPED. VALID CODES ARE: * #SNAP\n.*                         ALL, NUC, SQA, LSQA, SWA, CB, Q, TRT, DM,  * #SNAP\n.*                         ERR, IO, AND PCDATA. SEE OS/VS2 MVS        * #SNAP\n.*                         SUPERVISOR SERVICES AND MACRO INSTRUCTION  * #SNAP\n.*                         MANUAL FOR MORE INFORMATION ABOUT THESE    * #SNAP\n.*                         OPTIONS. THIS PARAMETER IS OPTIONAL.       * #SNAP\n.*                                                                    * #SNAP\n.*                PDATA  - SPECIFIES THE PROBLEM PROGRAM INFORMATION  * #SNAP\n.*                         TO BE DUMPED. VALID CODES ARE:             * #SNAP\n.*                         ALL, PSW, REGS, SA, SAH, JPA, LPA, ALLPA,  * #SNAP\n.*                         AND SPLS. SEE OS/VS2 MVS SUPERVISOR        * #SNAP\n.*                         SERVICES AND MACRO INSTRUCTION MANUAL FOR  * #SNAP\n.*                         MORE INFORMATION ABOUT THESE OPTIONS. THIS * #SNAP\n.*                         PARAMETER IS OPTIONAL.                     * #SNAP\n.*                                                                    * #SNAP\n.*                ID     - SPECIFIES THE NUMBER THAT IS TO BE PRINTED * #SNAP\n.*                         IN THE IDENTIFICATION HEADING WITH THE     * #SNAP\n.*                         DUMP. THIS PARAMETER IS OPTIONAL.          * #SNAP\n.*                                                                    * #SNAP\n.*                                                                    * #SNAP\n.* ERRORS         FIRST VALUE NOT SPECIFIED                     - 8   * #SNAP\n.*                LAST  VALUE NOT SPECIFIED                     - 8   * #SNAP\n.*                LIST VALUE NOT SPECIFIED                      - 8   * #SNAP\n.*                                                                    * #SNAP\n.* EXAMPLE        DUMP STORAGE AREAS 3000-3500 AND 4000-4500. ALSO    * #SNAP\n.*                INCLUDE THE NUCLEUS AND THE PSW. ID NUMBER IS 1.    * #SNAP\n.*                                                                    * #SNAP\n.*                         #SNAP STORAGE=(3000,3500,4000,4500),       * #SNAP\n.*                               SDATA=NUC,PDATA=PSW,ID=1             * #SNAP\n.*                                                                    * #SNAP\n.*                                                                    * #SNAP\n.* GLOBALS                                                            * #SNAP\n.*                                                                    * #SNAP\n.*                NONE                                                * #SNAP\n.*                                                                    * #SNAP\n.* MACROS USED                                                        * #SNAP\n.*                                                                    * #SNAP\n.*                SNAP, OPEN, CLOSE, DCB                              * #SNAP\n.*                                                                    * #SNAP\n.********************************************************************** #SNAP\n.*                                                                      #SNAP\n         LCLA  &FLAGS1,&FLAGS2,&FLAGS3,&FLAGSE3,&FLAGS4                 #SNAP\n         LCLA  &CTR1,&CTR2,&DISP                                        #SNAP\n         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7,&B8,&B9,&B10,&B11,&B12   #SNAP\n         LCLB  &B13,&B14,&B15,&B16,&B17,&B18,&B19,&B20,&B21,&B22,&B23   #SNAP\n         LCLB  &B24,&B25,&B30                                           #SNAP\n         LCLB  &OSVS2R2,&VS2SE3,&OSENVS2                                #SNAP\n         LCLC  &C1,&SNAPDCB\n         ACTR  9000\n&B0      SETB  1\n&OSVS2R2 SETB  1\n&OSENVS2 SETB  1\n&VS2SE3  SETB  1\n&SNAPDCB SETC  'SNAPDCB'\n.*                                                                      #SNAP\n         AIF   ('&SDATA' EQ '').CHKSTR\n         AIF   ('&SDATA'(1,1) EQ '(').ABC1\n&B2      SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'CB')\n&B3      SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'TRT')\n&B4      SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'NUC')\n&B7      SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'Q')\n&B17     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'SQA')\n&B18     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'LSQA')\n&B19     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'SWA')\n&B20     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'DM')\n&B21     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'IO')\n&B22     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'ERR')\n&B30     SETB  ('&SDATA' EQ 'ALL' OR '&SDATA' EQ 'PCDATA')\n&CTR1    SETA  &B2+&B3+&B4+&B17+&B18+&B19+&B7+&B20+&B21+&B22+&B30\n         AIF   ('&CTR1' EQ '0').MSG2\n         AGO   .CHKSTR\n.ABC1    ANOP\n&CTR1    SETA  N'&SDATA\n&CTR2    SETA  0\n.LOOPA   ANOP\n&CTR2    SETA  &CTR2+1\n&C1      SETC  '&SDATA(&CTR2)'\n         AIF   ('&C1' EQ 'TRT').SETTRT\n         AIF   ('&C1' EQ 'NUC').SETNUC\n         AIF   ('&C1' EQ 'CB').SETCB\n         AIF   ('&C1' EQ 'Q').SETQ\n         AIF   ('&C1' EQ 'SQA').SETSQA\n         AIF   ('&C1' EQ 'LSQA').SETLSQA\n         AIF   ('&C1' EQ 'SWA').SETSWA\n         AIF   ('&C1' EQ 'DM').SETDM\n         AIF   ('&C1' EQ 'IO').SETIO\n         AIF   ('&C1' EQ 'ERR').SETERR\n         AIF   ('&C1' EQ 'PCDATA').SETPC\n         AIF   ('&C1' EQ 'ALL').SETALL\n         AGO   .MSG2\n.CHKOPT  ANOP\n         AIF   ('&CTR2' NE '&CTR1').LOOPA\n         AGO   .CHKSTR\n.SETTRT  ANOP\n&B3      SETB  1\n         AGO   .CHKOPT\n.SETNUC  ANOP\n&B4      SETB  1\n         AGO   .CHKOPT\n.SETCB   ANOP\n&B2      SETB  1\n         AGO   .CHKOPT\n.SETQ    ANOP\n&B7      SETB  1\n         AGO   .CHKOPT\n.SETSQA  ANOP\n&B17     SETB  1\n         AGO   .CHKOPT\n.SETLSQA ANOP\n&B18     SETB  1\n         AGO   .CHKOPT\n.SETSWA  ANOP\n&B19     SETB  1\n         AGO   .CHKOPT\n.SETDM   ANOP\n&B20     SETB  1\n         AGO   .CHKOPT\n.SETIO   ANOP\n&B21     SETB  1\n         AGO   .CHKOPT\n.SETERR  ANOP\n&B22     SETB  1\n         AGO   .CHKOPT\n.SETPC   ANOP\n&B30     SETB  1\n         AGO   .CHKOPT\n.SETALL  ANOP\n&B2      SETB  1\n&B3      SETB  1\n&B4      SETB  1\n&B7      SETB  1\n&B17     SETB  1\n&B18     SETB  1\n&B19     SETB  1\n&B20     SETB  1\n&B21     SETB  1\n&B22     SETB  1\n&B30     SETB  1\n.CHKSTR  ANOP\n&B5      SETB  ('&STORAGE' NE '')\n&B16     SETB  ('&LIST' NE '')\n         AIF   ('&B5' EQ '1' AND '&B16' EQ '1').MSG4\n         AIF   ('&B5' EQ '0').CHKSTRB\n&CTR1    SETA  N'&STORAGE\n         AIF   (&CTR1 LT 2).MSG4\n.CHKSTRA ANOP\n&CTR1    SETA  &CTR1-2\n         AIF   (&CTR1 EQ 0).CHKSTRC\n         AIF   (&CTR1 LT 1).MSG4\n         AGO   .CHKSTRA\n.CHKSTRB ANOP\n         AIF   ('&B16' EQ '0').MSG4\n         AIF   (N'&LIST NE 1).MSG4\n.CHKSTRC ANOP\n&B6      SETB  ('&ID' NE '')\n         AIF   ('&PDATA' EQ '').SETFLAG\n         AIF   ('&PDATA'(1,1) EQ '(').ABC2\n&B8      SETB  ('&PDATA' EQ 'SAH' OR '&PDATA' EQ 'SA' OR '&PDATA' EQ 'AX\n               LL')\n&B9      SETB  ('&PDATA' EQ 'SAH')\n&B10     SETB  ('&PDATA' EQ 'REGS' OR '&PDATA' EQ 'ALL')\n&B11     SETB  ('&PDATA' EQ 'LPA' OR '&PDATA' EQ 'ALLPA' OR '&PDATA' EQX\n                'ALL')\n&B12     SETB  ('&PDATA' EQ 'JPA' OR '&PDATA' EQ 'ALLPA' OR '&PDATA' EQX\n                'ALL')\n&B13     SETB  ('&PDATA' EQ 'PSW' OR '&PDATA' EQ 'ALL')\n&B14     SETB  ('&PDATA' EQ 'SPLS' OR '&PDATA' EQ 'ALL')\n&CTR1    SETA  &B8+&B9+&B10+&B11+&B12+&B13+&B14\n         AIF   ('&CTR1' EQ '0').MSG3\n&B15     SETB  0\n         AGO   .SETFLAG\n.ABC2    ANOP\n&CTR1    SETA  N'&PDATA\n&CTR2    SETA  0\n.LOOPB   ANOP\n&C1      SETC  '&PDATA(&CTR2)'\n         AIF   ('&C1' EQ 'SA').SETSA\n         AIF   ('&C1' EQ 'SAH').SETSAH\n         AIF   ('&C1' EQ 'REGS').SETREGS\n         AIF   ('&C1' EQ 'LPA').SETLPA\n         AIF   ('&C1' EQ 'JPA').SETJPA\n         AIF   ('&C1' EQ 'ALLPA').SETALPA\n         AIF   ('&C1' EQ 'PSW').SETPSW\n         AIF   ('&C1' EQ 'SPLS').SETSPLS\n         AIF   ('&C1' EQ 'ALL').SETPALL\n         AGO   .MSG3\n.CHKPMOR ANOP\n         AIF   ('&CTR2' NE '&CTR1').LOOPB\n         AGO   .SETFLAG\n.SETSA   ANOP\n&B8      SETB  1\n         AGO   .CHKPMOR\n.SETSAH  ANOP\n&B8      SETB  1\n&B9      SETB  1\n         AGO   .CHKPMOR\n.SETREGS ANOP\n&B10     SETB  1\n         AGO   .CHKPMOR\n.SETLPA  ANOP\n&B11     SETB  1\n         AGO   .CHKPMOR\n.SETJPA  ANOP\n&B12     SETB  1\n         AGO   .CHKPMOR\n.SETALPA ANOP\n&B11     SETB  1\n&B12     SETB  1\n         AGO   .CHKPMOR\n.SETPSW  ANOP\n&B13     SETB  1\n         AGO   .CHKPMOR\n.SETSPLS ANOP\n&B14     SETB  1\n         AGO   .CHKPMOR\n.SETPALL ANOP\n&B8      SETB  1\n&B10     SETB  1\n&B11     SETB  1\n&B12     SETB  1\n&B13     SETB  1\n&B14     SETB  1\n.SETFLAG ANOP\n&FLAGS1  SETA  128*&B4+64*&B17+32*&B18+16*&B19+8*&B3+4*&B2+2*&B7+1*&B20\n&FLAGS2  SETA  128*&B8+64*&B9+32*&B10+16*&B11+8*&B12+4*&B13+2*&B14+1*&BX\n               15\n&FLAGS3  SETA  64*&OSVS2R2+32*&OSENVS2+16*&B0+8*&B6+4*&B1+2*&B5+2*&B16+X\n               1*&B23\n&FLAGSE3 SETA  128*&VS2SE3\n&FLAGS4  SETA  128*&B21+64*&B22+32*&B30\n         OPEN  (SNAPDCB,(OUTPUT))\n         CNOP  0,4\n&NAME    BAL   1,A&SYSNDX              BRANCH AROUND PARM LIST\n         AIF   ('&B6' EQ '0').NOIDS\n         AIF   ('&ID'(1,1) EQ '(').NOIDS\n         DC    AL1(&ID)                ID NUMBER\n         AGO   .CONT\n.NOIDS   ANOP\n         DC    AL1(0)                  ID NUMBER\n.CONT    ANOP\n         DC    AL1(&FLAGS3)            OPTION FLAGS\n         DC    AL1(&FLAGSE3)           OPTION FLAGS 2\n         DC    AL1(0)                  RESERVED\n         DC    AL1(&FLAGS1)            SDATA FLAGS ONE\n         DC    AL1(&FLAGS4)            SDATA FLAGS TWO\n         DC    AL1(&FLAGS2)            PDATA FLAGS\n         DC    AL1(0)                  RESERVED\n         DC    A(&SNAPDCB)             DCB ADDRESS\n         DC    A(0)                    TCB ADDRESS\n         AIF   ('&B5' EQ '1').STORON\n         AIF   ('&LIST'(1,1) EQ '(').LISTREG\n         DC    A(&LIST)                ADDRESS OF SNAPSHOT LIST\n         AGO   .CHHDR\n.STORON  ANOP\n&CTR1    SETA  N'&STORAGE\n         AGO   .PROSTOR\n.LISTREG ANOP\n         DC    A(0)                    ADDRESS OF SNAPSHOT LIST\n.CHHDR   ANOP\n         DC    A(0)                    ADDRESS OF HEADER LIST\n         AGO   .PROCSUB\n.PROSTOR ANOP\n         DC    A(*+8)                  ADDRESS OF SNAPSHOT LIST\n         DC    A(0)                    ADDRESS OF HEADER LIST\n.LOOP1   ANOP\n&CTR2    SETA  &CTR2+1\n         AIF   ('&STORAGE(&CTR2)' EQ '').STYPE1\n         AIF   ('&STORAGE(&CTR2)'(1,1) EQ '(').STYPE1\n         DC    A(&STORAGE(&CTR2))  STARTING/ENDING ADDRESS\n         AIF   ('&CTR2' NE '&CTR1').LOOP1\n         AGO   .PROCSUB\n.STYPE1  ANOP\n         DC    A(0)                STARTING/ENDING ADDRESS\n         AIF   ('&CTR2' NE '&CTR1').LOOP1\n.PROCSUB ANOP\nA&SYSNDX DS    0H\n         AIF   ('&B6' EQ '0').NOID\n         AIF   ('&ID'(1,1) NE '(').NOID\n         STC   &ID,0(0,1)       GET ID NUMBER\n.NOID    ANOP\n         AIF   ('&B5' EQ '0').NOSTOR\n&CTR2    SETA  0\n&DISP    SETA  20\n.LOOP2   ANOP\n&CTR2    SETA  &CTR2+1\n&DISP    SETA  &DISP+4\n&C1      SETC  '&STORAGE(&CTR2)'\n         AIF   ('&STORAGE(&CTR2)'(1,1) EQ '(').STOR\n         AGO   .AIF\n.STOR    ANOP\n         ST    &C1,&DISP.(0,1)     GET STARTING/ENDING ADDRESS\n.AIF     ANOP\n         AIF   ('&CTR2' NE '&CTR1').LOOP2\n         OI    &DISP.(1),X'80'     SET END OF LIST INDICATOR\n         AGO   .SVC51\n.NOSTOR  ANOP\n         AIF   ('&LIST'(1,1) NE '(').SVC51\n         ST    &LIST,16(0,1)       STORE SNAPSHOT ADDR INTO PARM LIST\n.SVC51   ANOP\n         SVC   51\n         CLOSE SNAPDCB\n         AIF   ('&DCB' EQ 'NO').EXIT\n         B     B&SYSNDX\n&SNAPDCB DCB   DSORG=PS,RECFM=VBA,MACRF=(W),BLKSIZE=1632,LRECL=125,    X\n               DDNAME=SNAPDD\nB&SYSNDX DS    0H\n.EXIT    ANOP\n         MEXIT\n.ERROR1  ANOP\n         ABEND 111,DUMP\n         AGO   .EXIT\n.ERROR2  ANOP\n         ABEND 222,DUMP\n         AGO   .EXIT\n.ERROR3  ANOP\n         ABEND 333,DUMP\n         AGO   .EXIT\n.MSG1    IHBERMAC  6\n         MEXIT\n.MSG2    ANOP\n&B2      SETB  1\n&B3      SETB  0\n&B4      SETB  0\n&B7      SETB  0\n&B17     SETB  0\n&B18     SETB  0\n&B19     SETB  0\n&B20     SETB  0\n&B21     SETB  0\n&B22     SETB  0\n         IHBERMAC  183,&SDATA,CB\n         AGO   .CHKSTR\n.MSG3    ANOP\n&B8      SETB  1\n&B9      SETB  0\n&B10     SETB  1\n&B11     SETB  1\n&B12     SETB  1\n&B13     SETB  1\n&B14     SETB  1\n         IHBERMAC  183,&PDATA,ALL\n         AGO   .SETFLAG\n.MSG4    IHBERMAC  189\n         MEXIT\n         MEND\n./ ADD NAME=ALLOC    0102-85112-90002-1654-00298-00294-00008-MSCHMTZ\n         MACRO\n&NAME    ALLOC &DUMMY,&PERM,&DSN=,&DDN=,&DDNRET=,&MEMBER=,&DISP=,      X\n               &VOL=,&UNIT=,&SYSOUT=,&FREE=,&COPIES=,&LABEL=,          X\n               &BLKSIZE=,&DEN=,&DSORG=,&KEYLEN=,&LRECL=,&RECFM=,       X\n               &PASWORD=,&DSNRET=,&MF=AUTO,&PREFIX=,&ERROR=,           X\n               &SPACE=,&F=,&FILE=,&DA=,&QNAME=,&DSORGRT=,              X\n               &VOLRET=,&DCBDSN=,&DCBDDN=,&SPECIAL=,&DDNTO=,           X\n               &FORMS=,&DEST=,&SSREQ=,&FORUSER=,&TU=,&DSNPDE=,&USER=,  X\n               &SUBSYS=\n.**********************************************************************\n.*                                                                    *\n.*    THIS MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION BY BUILDING   *\n.*    A DYNAMIC ALLOCATION PARAMETER LIST AND INVOKING SVC 99.        *\n.*    IT FIRST SETS UP A WORKAREA ENVIRONMENT FOR THE PARAMETER LIST  *\n.*    AND THEN TESTS THE KEYWORDS SUPPLIED AND INVOKES INNER MACROS   *\n.*    TO BUILD THE TEXT UNITS. THE INNER MACROS THEMSELVES USE INNER  *\n.*    MACROS TO UPDATE GLOBAL VARIABLES, STORE TEXT UNIT POINTERS ETC *\n.*    THERE ARE THREE WAYS OF SPECIFYING THE WORK AREA ADDRESS.       *\n.*    A) MF=AUTO, MF=G, MF=(E,ADDRESS,LNTHSYMB).                      *\n.*    IN THE FIRST FORM, AN INNER MACRO DYNSPACE IS CALLED TO NAME    *\n.*    A WORK AREA, THE NAME BEING RETURNED IN THE GLOBAL SETC         *\n.*    VARIABLE &DYNSP. A DSECT IS CREATED TO MAP THIS AREA.           *\n.*    THE GLOBAL VARIABLES &DTUO (TEXT UNIT OFFSET COUNTER) AND       *\n.*    &DTUPO (TEXT UNIT POINTER OFFSET ACCUMULATOR) ARE SET TO ZERO.  *\n.*    THESE ACCUMULATORS ARE UPDATED AS EACH TEXT UNIT PROCESSOR      *\n.*    AQUIRES STORAGE. AFTER ALL TEXT UNITS HAVE BEEN BUILT, THE      *\n.*    AMOUNT OF SPACE USED IS CALCULATED, AND THE DYNSPACE MACRO IS   *\n.*    THEN CALLED AGAIN TO LOG THE AMOUNT NEEDED. DYNSPACE SETS A     *\n.*    GLOBAL VARIABLE &DYNSPQ TO THE HIGHEST AMOUNT ANY ALLOC OR      *\n.*    FREE MACRO REQUESTED, AND WHEN CALLED WITH THE EXPAND OPTION,   *\n.*    (NO OPERANDS OR NAME FIELD SUPPLIED), EXPANDS INTO A DS FOR     *\n.*    THAT QUANTITY. (SEE DYNSPACE)                                   *\n.*    MF=G SPECIFIES THAT THE ALLOC MACRO ENTER THE BEGIN MACRO       *\n.*    WORKAREA TO ACQUIRE THE STORAGE NECESSARY. IT DOES THIS VIA     *\n.*    THE RCPDS MACRO. (SEE RCPDS). HOWEVER, IF THE ALLOC MACRO IS    *\n.*    CALLED SEVERAL TIMES WITH THIS OPTION, A LOT OF STORAGE WILL BE *\n.*    USED UP, AS THE STORAGE WILL NOT BE SHARED. THUS, THIS FORM     *\n.*    SHOULD ONLY BE USED IF THE ALLOC/FREE MACRO IS ONLY TO BE USED  *\n.*    ONCE OR TWICE DURING AN ASSEMBLY.                               *\n.*    MF=E CAUSES THE MACRO TO USE A USER SPECIFIED WORK AREA. THE    *\n.*    SECOND PARAMETER GIVES THE NAME OF THE WORKAREA, AND AN         *\n.*    OPTIONAL THIRD PARAMETER IS THE NAME OF A SYMBOL TO BE EQUATED  *\n.*    TO THE LENGTH OF THE REQUIRED WORK AREA.                        *\n.*                                                                    *\n.*    DYNAMIC ALLOCATION FUNCTIONS ARE SIMILAR TO THOSE AVAILABLE    *\n.*    WITH JCL, USING THE SAME KEYWORDS. HOWEVER, CERTAIN FORMATS    *\n.*    ARE SLIGHTLY DIFFERENT. FOR INSTANCE, CERTAIN KEYWORDS CAN     *\n.*    HAVE VARYING PARAMETERS, EG DATASET NAME, DDNAME, VOLSER ETC.  *\n.*    PROVISION IS MADE FOR BOTH VARIABLE SPECIFICATION.             *\n.*    IN THE ABSOLUTE FORM, THE PARAMETER IS ENTERED IN QUOTES,      *\n.*    E.G.   ALLOC DSN='SYS1.LINKLIB',DISP=SHR                       *\n.*    HOWEVER, THIS NAME REMAINS FIXED FOR THE ASSEMBLY.             *\n.*    IN THE VARIABLE FORMAT, THE ADDRESS OF A LOCATOR IS SPECIFIED, *\n.*    WHERE THE LOCATOR CONSISTS OF A SIX BYTE FIELD, THE FIRST 4    *\n.*    BYTES OF WHICH POINT TO THE PARAMETER, WHILE THE NEXT TWO      *\n.*    CONTAIN THE LENGTH.                                            *\n.*    EG          ALLOC DSN=LOCATOR                                  *\n.*       LOCATOR  DC    A(DSN),Y(12)                                 *\n.*       DSN      DC    C'SYS1.LINKLIB'                              *\n.*                                                                   *\n.*       NUMERIC QUANTITIES E.G. COPIES= FOR SYSOUT, SHOULD EITHER   *\n.*       SPECIFY A NUMERIC VALUE, COPIES=3,                          *\n.*       A VALUE IN A REGISTER, COPIES=(R3),                         *\n.*       OR THE NAME OFF A FULLWORD CONTAINING THE VALUE,            *\n.*          COPIES=NUMCOPYS, WHERE NUMCOPYS IS THE NAME OF A         *\n.*       FULLWORD FIELD.                                             *\n.*                                                                   *\n.*       OTHER KEYWORDS SUCH AS DISP= CAN ONLY HAVE THE ABSOLUTE     *\n.*       FORM, AND VALUES SHOULD NOT BE ENTERED WITHIN QUOTES.       *\n.*       ADDITIONAL FACILITIES NOT AVAILABLE WITH JCL ARE THE        *\n.*       RETURN BY THE SYSTEM OF INFORMATION ON THE DATASET, EG      *\n.*       DSORG. THIS IS DONE BY SPECIFYING DSORGRT=SYMBOL, WHERE     *\n.*       SYMBOL IS A SYMBOL WHICH WILL BE EQUATED TO A TWO BYTE      *\n.*       FIELD CONTAINING THE DSORG TYPE (SEE JOB MANAGEMENT,        *\n.*       SUPERVISOR AND TSO).                                        *\n.*       THE SYSTEM CAN ALSO GENERATE AND RETURN A DDNAME. THIS IS   *\n.*       CARRIED OUT BY ENTERING DDNTO=(ADDR1,ADDR2,,...)            *\n.*       WHERE ADDR1,ADDR2 ETC ARE THE NAMES OF 8 BYTE FIELDS WHICH  *\n.*       ARE TO RECEIVE THE DDNAME.                                  *\n.*       FOR FURTHER INFORMATION ON DYNAMIC ALLOCATION, SEE          *\n.*       JOB MANAGEMENT, SUPERVISOR AND TSO.                         *\n.*                                                                   *\n.**********************************************************************\n         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO\n         GBLA  &DTUO              OFFSET TO TEXT UNITS\n         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS\n         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS\n         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL\n         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC\n         LCLA  &DDNRTO,&DSNRTO         FOR EQUATES FOR RETURNED FLDS\n         LCLA  &VOLRTO,&DSRGRTO        FOR EQUATES FOR RETURNED FIELDS\n         LCLA  &I                 COUNTER\n         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E\n         LCLC  &C,&T,&PAR\n.*\n.*   THE ALLOC MACRO PROVIDES A DYNAMIC ALLOCATION FUNCTION,\n&RCPS99(1)     SETB           1\n&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER\n&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX\n&NAME    DS    0H\n         AIF   ('&PREFIX' EQ '').TMF\n         AIF   (K'&PREFIX LT 4).POK\n         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'\n&DYNP    SETC  '&PREFIX'(1,4)\n         AGO   .TMF\n.POK     ANOP\n&DYNP    SETC  '&PREFIX'\n.TMF     AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF' NE 'AUTO').TMFE\nNAME     DYNSPACE             GET NAME FOR SPACE\n         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n&T       SETC  'A'\n&PAR     SETC  '&DYNSP+4'\n&DSECT   SETB  1\n         AGO   .START\n.TMFE    AIF   ('&MF(2)' NE '').E2OK\n         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'\n         AGO   .GEN\n.E2OK    ANOP\n&DSECT   SETB  1\n         AIF   ('&MF(2)' EQ '(').RMFE\n         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START\n         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS\n         AGO   .START\n.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP\n.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB\n         USING S99RB,R15\n         ST    R15,0(R1)               AND STORE IN RB POINTER\n         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST\n         MVI   S99RBLN,20              MOVE IN LIST LENGTH\n         MVI   S99VERB,S99VRBAL        MOVE IN VERB CODE\n         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS\n         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB\n         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS\n         USING S99TUNIT,R15\n&DTUO    SETA  0\n&DTUPO   SETA  0\n         AIF   ('&SSREQ' EQ 'YES').SSREQ\n.TDSN    AIF   ('&DSN&DA' NE '').DSN\n         AIF   ('&DSNPDE' NE '').DSNPDE\n         AIF   ('&DSNRET' NE '').DSNRT\n         AIF   ('&SYSOUT' NE '').SYSOUT\n         AIF   ('&DUMMY' NE '').DUMMY\n         AIF   ('&QNAME' NE '').QNAME\n.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN\n         AIF   ('&DDNRET&DDNTO' NE '').DDNRT\n.TUNIT   AIF   ('&UNIT&VOL' NE '').UNIT\n.TSUBSYS AIF   ('&SUBSYS' NE '').SUBSYS\n.TVOLRET AIF   ('&VOLRET' NE '').VOLRET\n.TDSRGO  AIF   ('&DSORGRT' NE '').DSORGRT\n.TLABEL  AIF   ('&LABEL' NE '').LABEL\n.TPSWD   AIF   ('&PASWORD' NE '').PASWORD\n.TFORUSE AIF   ('&FORUSER' NE '').FORUSER\n.TTU     AIF   ('&TU' NE '').TU\n.TDISP   AIF   ('&DISP' NE '').DISP\n.TSPACE  AIF   ('&SPACE' NE '').SPACE\n.TLRECL  AIF   ('&LRECL' NE '').DCB\n         AIF   ('&DEN' NE '').DCB\n         AIF   ('&RECFM' NE '').DCB\n         AIF   ('&BLKSIZE' NE '').DCB\n         AIF   ('&DSORG' NE '').DCB\n         AIF   ('&KEYLEN' NE '').DCB\n.TDCBDSN AIF   ('&DCBDSN' NE '').DCBDSN\n.TDCBDDN AIF   ('&DCBDDN' NE '').DCBDDN\n.TFREE   AIF   ('&FREE' EQ 'CLOSE').FREE                         TE7343\n.TPERM   AIF   ('&PERM' EQ 'PERM' OR '&PERM' EQ 'PERMANENT').PERM\n         AIF   ('&DUMMY' EQ 'PERM' OR '&DUMMY' EQ 'PERMANENT').PERM\n.TSPECI  AIF   ('&SPECIAL' NE '').SPECIAL\n         AGO   .SVC99\n.SSREQ   RCPSSREQ\n         AGO   .TDSN\n.DSN     RCPDSN &DSN&DA,&MEMBER\n         AGO   .TDDN\n.DSNPDE  RCPDSNPD &DSNPDE\n         AGO   .TDDN\n.DSNRT   RCPDSNRT &DSNRET\n&DSNRTO  SETA  &DTUO-46\n         AGO   .TDDN\n.SYSOUT  RCPSYSOU &SYSOUT,COPIES=&COPIES,FREE=&FREE,DEST=&DEST,        X\n               FORMS=&FORMS,USER=&USER\n         AGO   .TDDN\n.DUMMY   RCPDUMMY &DUMMY\n         AGO   .TDDN\n.QNAME   RCPQNAME &QNAME\n         AGO   .TDDN\n.DDN     RCPDDN &DDN&F&FILE\n         AGO   .TUNIT\n.DDNRT   RCPDDNRT &DDNRET\n&DDNRTO  SETA  &DTUO-10\n         AGO   .TUNIT\n.UNIT    RCPUNIT &UNIT,&VOL\n         AGO   .TSUBSYS\n.SUBSYS  RCPSUB  &SUBSYS\n         AGO   .TVOLRET\n.VOLRET  RCPVOLRT &VOLRET\n&VOLRTO  SETA  &DTUO-8\n         AGO   .TDSRGO\n.DSORGRT RCPDSRGR\n&DSRGRTO SETA  &DTUO-2\n         AGO   .TLABEL\n.LABEL   RCPLABEL &LABEL\n         AGO   .TPSWD\n.PASWORD RCPPSWD &PASWORD\n         AGO   .TFORUSE\n.FORUSER RCPFORUS &FORUSER\n         AGO   .TTU\n.TU      RCPTU &TU\n         AGO   .TDISP\n.DISP    RCPDISP &DISP\n         AGO   .TSPACE\n.SPACE   RCPSPACE &SPACE\n         AGO   .TLRECL\n.DCB     RCPDDCB LRECL=&LRECL,DEN=&DEN,RECFM=&RECFM,BLKSIZE=&BLKSIZE,  X\n               DSORG=&DSORG,KEYLEN=&KEYLEN\n         AGO .TDCBDSN\n.DCBDSN  RCPDCBDS &DCBDSN\n         AGO .TDCBDDN\n.DCBDDN  RCPDCBDD &DCBDDN\n         AGO .TFREE                                              TE7343\n.FREE    RCPFREE  &FREE                                          TE7343\n         AGO   .TPERM\n.PERM    RCPPERM\n         AGO   .TSPECI\n.SPECIAL RCPSPEC &SPECIAL\n.SVC99   ANOP\n&DTUPO   SETA  &DTUPO-4\n         SPACE\n         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS\n         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR\n         RCPSR2 UNSAVE\n&DTUPO   SETA  &DTUPO+4\n         AIF   (NOT &DSECT).DYNA\n         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY\n         LA    R14,4(R1)               POINT TO REQUEST BLOCK\n.DYNA    DYNALLOC\n         AIF   (NOT &DSECT).LTR\n         USING &DYNP.RB,R14            SET UP ADDRESSABILITY\n**       NOTE  R14 HAS RB ADDRESS, R15 HAS SVC 99 RETURN CODE        **\n.LTR     AIF   ('&ERROR' EQ '').TDDTO\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &ERROR                  BRANCH IF NON ZERO\n.TDDTO   AIF   ('&DDNTO' EQ '').RESERVE\n&I       SETA  0\n.DDNTOL  ANOP\n&I       SETA  &I+1\n         AIF   ('&DDNTO(&I)' EQ '').RESERVE\n         AIF   ('&DDNTO(&I)'(1,1) EQ '(').DDNTOR\n         MVC   &DDNTO(&I).(8),&DYNP.TU+&DDNRTO+2\n         AGO   .DDNTOL\n.DDNTOR  ANOP\n&C       SETC  '&DDNTO(&I)'(2,K'&DDNTO(&I)-2)\n         MVC   0(8,&C),&DYNP.TU+&DDNRTO+2\n         AGO   .DDNTOL\n.RESERVE AIF   (&DSECT).RESDS\n         SPACE 1\n***********************************************************************\n**       RESERVE SPACE FOR DYNALLOC PARAMETER LIST                   **\n***********************************************************************\n         RCPDS\n.SSP     ANOP\n&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER\n&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK\n&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS\n         AIF   (&DTUO EQ 0).DTU21\n&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS\n         AIF   (&DSNRTO EQ 0).TDDNRTO\n&DSNRET  EQU   &DYNP.TU+&DSNRTO        OFFSET TO RETURNED DSN\n.TDDNRTO AIF   ('&DDNRET' EQ '').DTU11\n&DDNRET  EQU   &DYNP.TU+&DDNRTO        OFFSET TO RETURNED DDNAME\n.DTU11   AIF   (&VOLRTO EQ 0).DTU12\n&VOLRET  EQU   &DYNP.TU+&VOLRTO        OFFSET TO RETURNED VOLSER\n.DTU12   AIF   (&DSRGRTO EQ 0).DTU10\n&DSORGRT EQU   &DYNP.TU+&DSRGRTO       OFFSET TO RETURNED DSORG\n         AGO   .DTU10\n.DTU21   ANOP\n&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS\n.DTU10   ANOP\n&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED\n         AIF   (&DSECT).DSP\n         RCPDS\n         SPACE 3\n         AGO   .EXIT\n.RESDS   ANOP\n         AIF   ('&DYNSP' EQ '').SP3\n         DYNSPACE ADD\n.SP3     SPACE\n&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA\n         AGO   .SSP\n.DSP     AIF   ('&MF(3)' EQ '').END1\n&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA\n.END1    ANOP\n&SYSECT  CSECT\n         SPACE 3\n.EXIT    MEND\n./ ADD NAME=DPIPDU   0100-09022-09022-1155-00198-00198-00000-SCHMUM\n         MACRO\n         DPIPDU\n*/** START OF SPECIFICATIONS *************************************** */\n*/*            Distributed Protocol Interface Protocol Data Unit     */\n*/*                                                                  */\n*/*01* MACRO NAME: DPIPDU                                            */\n*/*                                                                  */\n*/*01* DESCRIPTIVE-NAME: Distributed Protocol Interface Protocol     */\n*/*                      Data Unit Mapping Macro                     */\n*/*                                                                  */\n*/********************************************************************/\nDPIPDU   DSECT ,\nDPIHDR   DS    0C             DPI Header\nDPIPLEN  DS    H              Packet length (MSB to LSB)\nDPIPMAJ  DS    C              protocol major version\n*                               2 (SNMP DPI protocol)\nDPIPMIN  DS    C              protocol minor version\n*                               3 (version 2)\nDPIPREL  DS    C              protocol release\n*                               0 (release 0)\nDPIPID   DS    CL2            packet id (MSB to LSB)\nDPIPTYPE DS    C              packet type\nDPIGET   EQU   X'01'           DPI Get Request\nDPIGETN  EQU   X'02'           DPI Get Next\nDPISET   EQU   X'03'           DPI Set\nDPITRAP1 EQU   X'04'           DPI Trap V1\nDPIRESP  EQU   X'05'           DPI Response\nDPIREG   EQU   X'06'           DPI Register\nDPIUNREG EQU   X'07'           DPI Unregister\nDPIOPEN  EQU   X'08'           DPI Open\nDPICLOSE EQU   X'09'           DPI Close\nDPICOMIT EQU   X'10'           DPI Commit\nDPIUNDO  EQU   X'11'           DPI Undo\nDPIGETB  EQU   X'12'           DPI Get Bulk\nDPITRAP2 EQU   X'13'           DPI Trap V2\nDPIINFRM EQU   X'14'           DPI Inform\nDPITHERE EQU   X'15'           DPI Are You There\nDPITYPE  EQU   *\nDPIHDRL  EQU   *-DPIPMAJ      header length\n**********************************************************************\n*            DPI Get PDU                                             *\n**********************************************************************\nDPIG     ORG   DPITYPE\nDPIGCNL  DS    H              community name length (MSB to LSB)\nDPIGCN   EQU   *              community name (if any)\n*DPIGGID  DS    CL?            null terminated group ID (with trailing\n*                                dot)  strlen=(group ID) + 1\n*DPIGIID  DS    CL?            null terminated instance ID (no trailing\n*                                dot)  strlen=(instance ID) + 1\n**********************************************************************\n*            DPI Get Next PDU                                        *\n**********************************************************************\nDPIN     ORG   DPITYPE\nDPINCNL  DS    H              community name length (MSB to LSB)\nDPINCN   EQU   *              community name (if any)\nDPINVAR  DS    0C             start of variable section\n*DPINGID  DS    CL?            null terminated group ID (with trailing\n*                                dot)  strlen=(group ID) + 1\n*DPINIID  DS    CL?            null terminated instance ID (no trailing\n*                                dot)  strlen=(instance ID) + 1\n**********************************************************************\n*            DPI Set PDU                                             *\n**********************************************************************\nDPIS     ORG   DPITYPE\nDPISCNL  DS    H              community name length (MSB to LSB)\nDPISCN   EQU   *              community name (if any)\nDPISVAR  DS    0C             start of variable section\n*DPISGID  DS    CL?            null terminated group ID (with trailing\n*                                dot)  strlen=(group ID) + 1\n*DPISIID  DS    CL?            null terminated instance ID (no trailing\n*                                dot)  strlen=(instance ID) + 1\n*DPISVART DS    CL1            SNMP Variable Type Value\n*\n*DPISVLEN DS    CL2            Length of value (MSB to LSB)\n*DPISVAL  DS    CL?            value\n**********************************************************************\n*            DPI Trap PDU                                            *\n**********************************************************************\nDPIT     ORG   DPITYPE\nDPITGTC  DS    C              SNMP generic trap code\nDPITSTC  DS    C              SNMP specific trap code\nDPITVAR  DS    0C             start of variable section\n*DPITGID  DS    CL?            null terminated group ID (with trailing\n*                                dot)  strlen=(group ID) + 1\n*DPITIID  DS    CL?            null terminated instance ID (no trailing\n*                                dot)  strlen=(instance ID) + 1\n*DPITVART DS    CL1            SNMP Variable Type Value\n*\n*DPITVLEN DS    CL2            Length of value (MSB to LSB)\n*DPITVAL  DS    CL?            value\n**********************************************************************\n*            DPI Response PDU                                        *\n**********************************************************************\nDPIP     ORG   DPITYPE\nDPIPERRC DS    C              error code\nDPIPERRI DS    CL4            error index (MSB to LSB)\nDPIPVAR  EQU   *              start of variable section\n*DPIPGID  DS    CL?            null terminated group ID (with trailing\n*                                dot)  strlen=(group ID) + 1\n*DPIPIID  DS    CL?            null terminated instance ID (no trailing\n*                                dot)  strlen=(instance ID) + 1\n*DPIPVART DS    CL1            SNMP Variable Type Value\n*\n*DPIPVLEN DS    CL2            Length of value (MSB to LSB)\n*DPIPVAL  DS    CL?            value\n**********************************************************************\n*            DPI Register PDU                                        *\n**********************************************************************\nDPIR     ORG   DPITYPE\nDPIRPRIO DS    F              requested priority (MSB to LSB)\nDPIRTO   DS    H              timeout in seconds (MSB to LSB)\nDPIRVSEL DS    C              view selection (0 = you (agent) do,\n*                               1 = I do)\nDPIRGBSL DS    C              getbulk selection (0=use GetNext,\n*                               1=use GetBulk)\nDPIRGID  EQU   *              null terminated group ID (with trailing\n*                               dot)\n**********************************************************************\n*            DPI Unregister PDU                                      *\n**********************************************************************\nDPIU     ORG   DPITYPE\nDPIUVSEL DS    C              reason code\nDPIUGID  EQU   *              null terminated group ID (with trailing\n*                               dot)\n**********************************************************************\n*            DPI Open PDU                                            *\n**********************************************************************\nDPIO     ORG   DPITYPE\nDPIOTO   DS    H              requested overall timeout (seconds, MSB\n*                               to LSB)\nDPIOMVAR DS    H              max varBinds per DPI packet (MSB to LSB)\nDPIOCSET DS    C              Selected character set (0=Native,\n*                               1=ASCII)\nDPIOOID  EQU   *              null terminated sub-agent ID (OID)\n*                               strlen=(sub-agent ID) + 1\nDPIOVAR  DS    0C             start of variable section\n*DPIODESC DS    CL?            null terminated sub-agent Description\n*                               strlen=(sub-agent Description) + 1\n*DPIOPWL  DS    CL2            password length (zero if no password,\n*                                MSB to LSB)\n*DPIOPW   DS    CL?            password (if any)\n**********************************************************************\n*            DPI Close PDU                                           *\n**********************************************************************\nDPIC     ORG   DPITYPE\nDPICTO   DS    C              reason code\n**********************************************************************\n*            DPI Commit PDU                                          *\n**********************************************************************\nDPIM     ORG   DPITYPE\nDPIMCNL  DS    H              community name length (MSB to LSB)\nDPIMCN   EQU   *              community name (if any)\nDPIMVAR  DS    0C             start of variable section\n*DPIMGID  DS    CL?            null terminated group ID (with trailing\n*                                dot)  strlen=(group ID) + 1\n*DPIMIID  DS    CL?            null terminated instance ID (no trailing\n*                                dot)  strlen=(instance ID) + 1\n*DPIMVART DS    CL1            SNMP Variable Type Value\n*\n*DPIMVLEN DS    CL2            Length of value (MSB to LSB)\n*DPIMVAL  DS    CL?            value\n**********************************************************************\n*            DPI Undo PDU                                            *\n**********************************************************************\nDPID     ORG   DPITYPE\nDPIDCNL  DS    H              community name length (MSB to LSB)\nDPIDCN   EQU   *              community name (if any)\nDPIDVAR  DS    0C             start of variable section\n*DPIDGID  DS    CL?            null terminated group ID (with trailing\n*                                dot)  strlen=(group ID) + 1\n*DPIDIID  DS    CL?            null terminated instance ID (no trailing\n*                                dot)  strlen=(instance ID) + 1\n*DPIDVART DS    CL1            SNMP Variable Type Value\n*\n*DPIDVLEN DS    CL2            Length of value (MSB to LSB)\n*DPIDVAL  DS    CL?            value\n**********************************************************************\n*            DPI Get Bulk PDU                                        *\n**********************************************************************\nDPIB     ORG   DPITYPE\nDPIBNREP DS    F              non-repeaters (MSB to LSB)\nDPIBMREP DS    F              max-repetitions (MSB to LSB)\nDPIBVAR  DS    0C             start of variable section\n*DPIBGID  DS    CL?            null terminated group ID (with trailing\n*                                dot)  strlen=(group ID) + 1\n*DPIBIID  DS    CL?            null terminated instance ID (no trailing\n*                                dot)  strlen=(instance ID) + 1\n**********************************************************************\n*            CONSTANTS                                               *\n**********************************************************************\ntooBig   EQU   X'01'\nnoSuchNm EQU   X'02'\nbadval   EQU   X'03'\nreadOnly EQU   X'04'\ngenErr   EQU   X'05'\nresUnav  EQU   X'0D'\ngetBlkNS EQU   X'6C'\n         MEND  ,\n./ ADD NAME=DYNSPACE 0100-85112-85112-0812-00052-00052-00000-MAS1\n         MACRO\n&NAME    DYNSPACE &TYPE\n.*\n.*    THIS IS AN INNER MACRO TO ALLOC/FREE.\n.*    IT IS CALLED TO   A) NAME AN AREA FOR THE PARMLIST\n.*                      B) LOG THE VARIOUS AMOUNTS NEEDED BY\n.*                         EACH, REMEMBERING THE LARGEST.\n.*                      C) GENERATING A DS FOR THE LARGEST AMOUNT.\n.*    THE FIRST TWO FUNCTIONS ARE INVOKED BY ALLOC/FREE MACROS ONLY,\n.*    AND THE THIRD IS USED BY THE PROGRAMMER, EITHER EXPLICITLY,\n.*    OR BY BEGINWKA, IF THE LATTER IS USED.\n.*\n.*     TO INVOKE THE NAMING FUNCTION, ALLOC/FREE GENERATE\n.*     NAME DYNSPACE\n.*     NOTE. THE NAMING OPERATION ONLY GENERATES A NAME ON THE\n.*     FIRST CALL IN THE ASSEMBLY. THE NAME REMAINS THE SAME UNTIL\n.*     DYNSPACE IS CALLED TO EXPAND INTO A DS.\n.*\n.*     THE SECOND FUNCTION IS INVOKED BY THE MACRO CALL\n.*          DYNSPACE ADD\n.*     (NO NAME FIELD AND ONE OPERAND)\n.*     IT USES THE GLOBAL VARIABLES &DTUO AND &DTUPO TO CALCULATE\n.*     THE SPACE FOR THIS REQUEST, AND UPDATES &DYNSPQ ONLY IF THE\n.*     CURRENT REQUEST IS FOR A GREATER AMOUNT\n.*\n.*     THE THIRD FUNCTION IS INVOKED BY CALLING DYNSPACE WITH NO\n.*     NAME OR OPERAND FIELD.\n.*     THIS EXPANDS INTO A DEFINE STORAGE, CLEARS THE DYNSPACE NAME\n.*     GLOBAL SETC, AND THE &DYNSPQ GLOBAL SETA.\n.*     THUS, THE MACRO IS SERIALLY REUSABLE IN ALL FUNCTIONS.\n.*\n         GBLA  &DYNSPQ,&DTUO,&DTUPO,&RCPDYN\n         GBLC  &DYNP,&DYNSP\n         LCLA  &I\n         AIF   ('&NAME' NE '').NAME\n         AIF   ('&TYPE' EQ '').ALLOC\n.*   THE ACCUMULATE FUNCTION IS REQUIRED\n&I       SETA  24+&DTUO+&DTUPO         GET AMOUNT FOR THIS REQUEST\n         AIF   (&I LE &DYNSPQ).EXIT    IF CURRENT < MAX, EXIT\n&DYNSPQ  SETA  &I                      ELSE UPDATE CURRENT MAXIMUM\n         MEXIT\n.NAME    AIF   ('&DYNSP' NE '').EXIT   IF NAME ALREADY EXISTS, EXIT\n&DYNSP   SETC  'DYNSP&RCPDYN'           ELSE GENERATE A NAME\n.EXIT    MEXIT\n.ALLOC   AIF   ('&DYNSP' EQ '').EXIT\n*\n**     RESERVE SPACE FOR ALLOC/FREE MACRO WORK AREA\n*\n&DYNSP   DS    0F,CL&DYNSPQ            RESERVE SPACE\n&DYNSP   SETC  ''                      SET MAX QUANTITY TO 0\n&DYNSPQ  SETA 0\n         MEND\n./ ADD NAME=ENTERX   0100-91039-91039-1038-00138-00138-00000-MAS00T\n         MACRO\n&SUBR    ENTERX &BASES,&SAVE,&CSECT\n.*   THIS MACRO, USED WITH THE LEAVE MACRO, WILL PERFORM\n.*   STANDARD HOUSEKEEPING FOR A CSECT, INCLUDING SAVEAREA\n.*   CONSTRUCTION AND CHAINING, AND GETTING SOME STORAGE,\n.*   IF THAT IS DESIRED.\n.*   THE LEAVE MACRO WILL FREE THE GOTTEN STORAGE\n.*   THE OPERANDS ARE\n.*       &SUBR    ENTER  &BASES,&SAVE,&CSECT\n.*    WHERE\n.*       &SUBR    IS THE NAME OF THE CSECT\n.*       &BASES   ARE THE BASE REGISTERS FOR THE ROUTINE\n.*       &SAVE    IS THE LABEL FOR A SAVEAREA, OR A SUBPOOL\n.*                AND LENGTH FOR THE GETMAIN\n.*       &CSECT   TO CONTINUE AN EXISTING CSECT WITH ENTRY\n.*                POINT &SUBR\n.*\n.*    EXAMPLES -\n.*               ENTER 13,*\n.*\n.*       THIS WILL GENERATE NON-REENTRANT CODE, USING SAVEAREA\n.*       AS THE SAVE AREA LABEL, AND REGISTER 13 FOR THE BASE\n.*       REGISTER.\n.*\n.*       RENTMOD  ENTER (12,11),(,LDSECT)\n.*\n.*       THIS WILL GENERATE REENTRANT CODE WITH REGISTERS 12 AND\n.*       11 FOR BASE REGISTERS.  A GETMAIN WILL BE DONE FOR THE\n.*       DEFAULT SUBPOOL (0) WITH A LENGTH 'LDSECT'.\n.*\n         GBLC  &LV,&SP\n         LCLA  &K,&N\n         LCLC  &AREA,&B(16),&SUBNAME,&S\n&SUBNAME SETC  '&SUBR'\n         AIF   ('&SUBNAME' NE '').SUBSPEC\n&SUBNAME SETC  'MAIN'         DEFAULT CSECT NAME\n.SUBSPEC AIF   ('&CSECT' EQ '').NOTENT  IS IT AN ENTRY POINT?\n&CSECT   CSECT\n&SUBNAME DS    0F\n         AGO   .CSSPEC\n.NOTENT  ANOP\n&SUBNAME CSECT\n.CSSPEC  ANOP\n         SAVE  (14,12),T,&SUBNAME   SAVE THE REGISTERS\n         AIF   ('&BASES(1)' EQ '15' OR '&BASES' EQ '').R15SET\n         AIF   ('&BASES(1)' EQ '13' AND '&SAVE' NE '').R15SET\n         LR    &BASES(1),15  SET FIRST BASE REG\n.R15SET  CNOP  0,4\n&S       SETC  '&SUBNAME'\n         AIF   (N'&SAVE EQ 2).P4   SUBPOOL, SIZE SPEC?\n         AIF   ('&SAVE' EQ '').P3  NO SAVEAREA - DEFAULT\n&AREA    SETC  '&SAVE'\n         AIF   ('&SAVE' NE '*').P2\n&AREA    SETC  'SAVEAREA'\n.P2      AIF   ('&BASES(1)' NE '13').P4\n&S       SETC  '*'\n         USING &SUBNAME,15\n         ST    14,&AREA+4\n         LA    14,&AREA\n         ST    14,8(13)\n         L     14,&AREA+4\n         ST    13,&AREA+4\n         BAL   13,*+76        SKIP AROUND THE SAVEAREA\n         DROP  15\n         AGO   .P4\n.P3      AIF   ('&BASES(1)' NE '13').P4\n         MNOTE 8,'*** CONTENTS OF REG 13 ARE LOST.  NO SAVE AREA WAS ESX\n               TABLISHED.'\n.P4      AIF   ('&BASES(1)' NE '14' OR '&SAVE' EQ '').P5\n         MNOTE 8,'*** MACRO RESTRICTION - REG 14 MUST NOT BE USED AS THX\n               E FIRST BASE REGISTER IF A SAVE AREA IS USED.'\n.P5      AIF   ('&BASES' EQ '').P9\n&N       SETA  N'&BASES\n.P6      ANOP\n&K       SETA  &K+1\n&B(&K)   SETC  ','.'&BASES(&K)'\n         AIF   (N'&SAVE EQ 1).PE\n         AIF   ('&BASES(&K)' NE '13').P7\n         MNOTE 8,'*** REG 13 MAY NOT BE USED AS A BASE REGISTER FOR REEX\n               NTRANT CODE.'\n         AGO   .P7\n.PE      AIF   ('&BASES(&K+1)' NE '13' OR '&SAVE' EQ '').P7\n         MNOTE 8,'*** WHEN USING A SAVE AREA, REG 13 MAY NOT BE USED ASX\n                A SECONDARY BASE REGISTER.'\n.P7      AIF   ('&BASES(&K+1)' NE '').P6\n         USING &S&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)&B(9)&B(10)&B(X\n               11)&B(12)&B(13)&B(14)&B(15)&B(16)\n&K       SETA  1\n         AIF   ('&BASES(1)' NE '13' OR '&SAVE' EQ '').P8\n&AREA    DC    18F'0'\n.P8      AIF   (&K GE &N).P10\n         LA    &BASES(&K+1),X'FFF'(&BASES(&K))\n         LA    &BASES(&K+1),1(&BASES(&K+1))\n&K       SETA  &K+1\n         AGO   .P8\n.P9      USING &SUBNAME,15\n.P10     AIF   (N'&SAVE GE 2).P13\n         AIF   ('&SAVE' EQ '' OR '&BASES(1)' EQ '13').P12\n         AIF   ('&SAVE(1,1)' GE '0').P16  NUMERIC MEANS A PASSED AREA\n         ST    14,&AREA+4\n         LA    14,&AREA\n         ST    14,8(13)\n         L     14,&AREA+4\n         ST    13,&AREA+4\n.P11     BAL   13,*+76       SKIP AROUND THE SAVEAREA\n&AREA    DC    18F'0'\n.P12     MEXIT\n.P13     ANOP\n&LV      SETC  '&SAVE(2)'\n&SP      SETC  '0'\n         AIF   ('&SAVE(1)' EQ '').P14\n&SP      SETC  '&SAVE(1)'\n.P14     CNOP  0,4          DO A GETMAIN FOR THE AREA\n         BAL   1,*+8          POINT THE SP AND LV\nENT&SYSNDX DC  AL1(&SP)       SUBPOOL FOR THE GETMAIN\n         DC    AL3(&LV)       LENGTH OF THE GETMAIN\n         L     0,0(1)         GET THE DATA IN REG 1\n         SVC   10             ISSUE THE GETMAIN\n.*                            CHAIN THE SAVEAREAS\n         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE\n         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS\n         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS\n         LR    13,1           THIS IS MY SAVEAREA\n         LA    4,12(13)       YES, POINT PAST THE CHAIN\n         L     5,ENT&SYSNDX   GET THE SIZE\n         LA    6,12           MINUS THE CHAIN AREA (12 BYTES )\n         SR    5,6            GIVES THE AMOUNT TO CLEAR\n         SR    7,7            CLEAR THE FROM COUNT AND CLEAR BYTE\n         MVCL  4,6            WHEE, CLEAR IT OUT\n         LM    0,7,20(2)      RESTORE THE ORIGINAL REGISTERS\n         MEXIT\n.P16     L     1,&AREA+0(1)   NUMERIC &SAVE IMPLIES A PASSED SAVEAREA\n         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE\n         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS\n         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS\n         LR    13,1           THIS IS MY SAVEAREA\n         LM    0,2,20(2)      RESTORE ORIGINAL REGS\n         MEND\n./ ADD NAME=FREE     0100-85112-85112-0814-00133-00133-00000-MAS1\n         MACRO\n&NAME    FREE  &UNALC,&DSN=,&DDN=,&MEMBER=,&DISP=,&SYSOUT=,            X\n               &ERROR=,&MF=AUTO,&PREFIX=,&FILE=,&F=,&DA=,&HOLD=\n         GBLA  &RCPDYN            COUNTER FOR NO ENTRIES TO MACRO\n         GBLA  &DTUO              OFFSET TO TEXT UNITS\n         GBLA  &DTUPO             OFFSET TO TEXT UNIT POINTERS\n         GBLB  &RCPS99(2)         TELL RCPDSECT NEED DSECTS\n         GBLC  &DYNP              PREFIX FOR LABELS FOR THIS CALL\n         GBLC  &DYNSP         NAME FOR AUTOMATIC STORAGE ALLOC\n         LCLB  &DSECT             DSECT NEEDED FOR STORAGE, MF=E\n         LCLC  &C,&T,&PAR\n&RCPS99(1)     SETB           1\n&RCPDYN  SETA  &RCPDYN+1          INCEREMENT COUNTER\n&DYNP    SETC  'DYN&RCPDYN' SET DEFAULT PREFIX\n&NAME    DS    0H\n         AIF   ('&PREFIX' EQ '').TMF\n         AIF   (K'&PREFIX LT 4).POK\n         MNOTE 4,'PREFIX TOO LONG, 1ST 4 CHARS USED'\n&DYNP    SETC  '&PREFIX'(1,4)\n         AGO   .TMF\n.POK     ANOP\n&DYNP    SETC  '&PREFIX'\n.TMF     AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF' NE 'AUTO').TMFE\nNAME     DYNSPACE             GET NAME FOR SPACE\n         LA    R1,&DYNSP               LOAD ADDRESS OF PARAM LIST\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n&T       SETC  'A'\n&PAR     SETC  '&DYNSP+4'\n&DSECT   SETB  1\n         AGO   .START\n.TMFE    AIF   ('&MF(2)' NE '').E2OK\n         MNOTE 4,'PLIST ADDRESS OMITTED, MF=G USED'\n         AGO   .GEN\n.E2OK    ANOP\n&DSECT   SETB  1\n         AIF   ('&MF(2)' EQ '(').RMFE\n         LA    R1,&MF(2)               LOAD PARAM LIST ADDRESS\n&T       SETC  'A'\n&PAR     SETC  '&MF(2)+4'\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.RMFE    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').START\n&PAR     SETC  '&MF(2)'(2,K'&MF(2)-2)\n&T       SETC  'R'\n         LR    R1,&PAR                 LOAD S99 PARAM LIST ADDRESS\n&PAR     SETC  '4&MF(2)'\n         USING &DYNP.DS,R1             USE GENERATED DSECT\n         AGO   .START\n.GEN     LA    R1,&DYNP.RBP            LOAD ADDRESS OF S99 RBP\n&T       SETC  'A'\n&PAR     SETC  '&DYNP.RB'\n.START   LA    R15,&DYNP.RB            LOAD ADDRESS OF S99 RB\n         USING S99RB,R15\n         ST    R15,0(R1)               AND STORE IN RB POINTER\n         XC    4(&DYNP.LEN-4,R1),4(R1) ZERO PARAMETER LIST\n         MVI   S99RBLN,20              MOVE IN LIST LENGTH\n         MVI   S99VERB,S99VRBUN        MOVE IN VERB CODE\n         LA    R14,&DYNP.TUP           LOAD ADDRESS OF TU POINTERS\n         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB\n         LA    R15,&DYNP.TU            POINT TO SPACE FOR TEXT UNITS\n         USING S99TUNIT,R15\n&DTUO    SETA  0\n&DTUPO   SETA  0\n         AIF   ('&DSN&DA' NE '').DSN\n         AIF   ('&SYSOUT' NE '').SYSOUT\n.TDDN    AIF   ('&DDN&FILE&F' NE '').DDN\n.TDISP   AIF   ('&DISP' NE '').DISP\n.TUNALC  AIF   ('&UNALC' NE '').PERM\n.THOLD   AIF   ('&HOLD' NE '').HOLD\n         AGO   .SVC99\n.DSN     RCPFDSN &DSN&DA,&MEMBER\n         AGO   .TDDN\n.SYSOUT  RCPFSYS &SYSOUT\n         AGO   .TDDN\n.DDN     RCPFDDN &DDN&F&FILE\n         AGO   .TDISP\n.DISP RCPFDISP &DISP\n         AGO   .TUNALC\n.PERM    RCPUNALC\n         AGO   .THOLD\n.HOLD    RCPFHOLD &HOLD\n.SVC99   ANOP\n&DTUPO   SETA  &DTUPO-4\n         SPACE\n         MVI   &DYNP.TUP+&DTUPO,X'80'  SET HIGH ORDER BIT ON TEXT PTRS\n         MVI   &DYNP.RBP,X'80'         SET HIGH ORDER BIT ON RB PTR\n         RCPSR2 UNSAVE\n&DTUPO   SETA  &DTUPO+4\n         AIF   (NOT &DSECT).DYNA\n         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY\n.DYNA    DYNALLOC\n         AIF   ('&ERROR' EQ '').RESERVE\n         AIF   ('&PAR' EQ '').LTR\n         L&T   R14,&PAR                 LOAD REG 14 WITH ADDRESS OF RB\n         AIF   (NOT &DSECT).LTR\n         USING &DYNP.RB,R14            SET UP ADDRESSABILITY\n.LTR     LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &ERROR                  BRANCH IF NON ZERO\n**       NOTE.  R14 POINTS TO REQUEST BLOCK, R15 HAS RETURN CODE     **\n.RESERVE AIF   (&DSECT).RESDS\n         SPACE\n***********************************************************************\n**       RESERVE SPACE FOR DYNALLOC DATA                             **\n***********************************************************************\n         RCPDS\n.SSP     ANOP\n&DYNP.RBP DS   F                       SVC 99 REQ BLOCK POINTER\n&DYNP.RB  DS   5F                      SVC 99 REQUEST BLOCK\n&DYNP.TUP DS   CL&DTUPO                SPACE FOR TEXT POINTERS\n         AIF   (&DTUO EQ 0).DTU11\n&DYNP.TU  DS   CL&DTUO                 SPACE FOR TEXT UNITS\n         AGO   .DTU10\n.DTU11   ANOP\n&DYNP.TU  DS   0C                      NO SPACE NEEDED FOR TEXT UNITS\n.DTU10   ANOP\n&DYNP.LEN EQU  *-&DYNP.RBP             LENGTH OF SPACE USED\n         AIF   (&DSECT).DSP\n         RCPDS\n         SPACE 3\n         AGO   .EXIT\n.RESDS   ANOP\n         AIF   ('&DYNSP' EQ '').SP3\n         DYNSPACE ADD\n.SP3     SPACE\n&DYNP.DS DSECT                         DSECT TO MAP SVC 99 DATA\n         AGO   .SSP\n.DSP     AIF   ('&MF(3)' EQ '').END1\n&MF(3)   EQU   &DYNP.LEN               LENGTH OF AREA\n.END1    ANOP\n&SYSECT  CSECT\n         SPACE 3\n.EXIT    MEND\n./ ADD NAME=LEAVE    0100-91039-91039-1038-00018-00018-00000-MAS00T\n         MACRO\n&NAME    LEAVE &EQ,&RC=\n         GBLC  &LV,&SP\n&NAME    LR    2,13\n         L     13,4(13)\n         AIF   ('&RC' EQ '').L0\n         LA    15,&RC         LOAD THE RETURN CODE\n.L0      STM   15,1,16(13)  STORE RETURN REGS\n         AIF   ('&LV' EQ '').L1  ANYTHING TO FREE?\n         FREEMAIN R,LV=&LV,SP=&SP,A=(2)  FREE THE AREA\n         LTR   15,15\n         BZ    GONE\n         ABEND 999,DUMP\nGONE     DS    0H\n.L1      RETURN (14,12),T     RETURN FROM WHENCE WE CAME\n         AIF   ('&EQ' NE 'EQ').L4  REGISTERS TOO?\n         REGS\n.L4      MEND\n./ ADD NAME=NIMAGCB  0103-09022-09029-1334-00288-00288-00003-SCHMUM\n         MACRO -- NIMAGCB - Agent Control Block\n         NIMAGCB ,\n         IEZBITS ,                 Symbolic bits\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        NIMAGCB - Agent Control Block (AGCB)                         *\n*                                                                     *\n*  FUNCTION:                                                          *\n*                                                                     *\n*        This control block is used by the agent, NIMAGENT.           *\n*        It contains all of the non-static data areas needed by       *\n*        that reentrant code, including parameter lists for system    *\n*        services, anchors for controls blocks for the sub tasks,     *\n*        agent options, ECBs, etc.                                    *\n*                                                                     *\n*  USED BY:                                                           *\n*                                                                     *\n*        NIMAGENT, NIMEXST, NIMDASD, NIMJES2, NIMHSM, NIMESTAE, NIMSYS*\n*                                                                     *\n*        CREATED BY: NIMAGENT        FREED BY: NIMAGENT               *\n*                                                                     *\n*        SUBPOOL: 230                KEY: 1                           *\n*                                                                     *\n*        SIZE: SEE AGCBLEN                                            *\n*                                                                     *\n*        POINTED TO BY:  R11 in NIMxxxx                               *\n*                                                                     *\n*        FREQUENCY:  one AGCB is allocated by NIMAGENT                *\n*                                                                     *\n*        RESIDENCY:  Virtual and Real - below the 16M line, although  *\n*                    alternate data areas for some of the fields may  *\n*                    be used if necessary AMODE 31 support is there.  *\n*                                                                     *\n*        SERIALIZATION:  Fields in this control block may only be     *\n*                        altered by the agent task, and preferably    *\n*                        only by code in subtasks. Fields can be      *\n*                        referenced by other tasks without concern    *\n*                        about the AGCB being deleted.                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT ,\nAGCB     DSECT ,                   Agent Control Block dsect\nAGCBID   DC    C'AGCB'             control block ID\nAGCBAGCB DS    A                   Address of this control block\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        SHANDS MIB                                                   *\n*                                                                     *\n***********************************************************************\n*        SYSTEM - METRICS                                             *\n***********************************************************************\nSYSMET   EQU   *\nSYSID    DS    XL3,CL8             SYSTEM ID\nCPUMDL   DS    XL3,CL8             CPU MODEL\nPRODNM   DS    XL3,CL16            PRODUCT NAME\nPRODVER  DS    XL3,CL8             PRODUCT VERSION\nIPLDATE  DS    XL3,CL6             LAST IPL DATE\nIPLTIME  DS    XL3,CL8             LAST IPL TIME\nSYSSTAT  DS    XL3,C               System status\nCPUUTIL  DS    XL3,CL4             CPU utilization\nJESSPLU  DS    XL3,CL3             JES2 spool utilization\nJESJOEU  DS    XL3,CL3             JES2 JOE utilization\nJESJQEU  DS    XL3,CL3             JES2 JQE utilization\nSYSVNUM  EQU   11\n***********************************************************************\n*        DASD METRICS                                                 *\n***********************************************************************\nDASDMET  EQU   *\nV2X1STAT DS    XL3,C               V2X1 status\nV2X2STAT DS    XL3,C               V2X2 status\nDASDVNUM EQU   (*-DASDMET)/4\n***********************************************************************\n*        APPLICATION METRICS - CICS                                   *\n***********************************************************************\nCICSMET  EQU   *\nSMSPROD  DS    XL3,C               CICS region status\nSMSPRD2  DS    XL3,C               CICS region status\nSMSEADP  DS    XL3,C               CICS region status\nHISPROD  DS    XL3,C               CICS region status\nHISRS    DS    XL3,C               CICS region status\nSMSTEST  DS    XL3,C               CICS region status\nSMS2TST  DS    XL3,C               CICS region status\nSMSEADT  DS    XL3,C               CICS region status\nHISTST   DS    XL3,C               CICS region status\nCSFP     DS    XL3,C               CICS region status\nCICSVNUM EQU   (*-CICSMET)/4\n***********************************************************************\n*        APPLICATION METRICS - DB2                                    *\n***********************************************************************\nDB2MET   EQU   *\nDSNPMSTR DS    XL3,C               DB2 region status\nDSNPDBM1 DS    XL3,C               DB2 region status\nDSNPDIST DS    XL3,C               DB2 region status\nIRLMPROC DS    XL3,C               DB2 region status\nDSNHMSTR DS    XL3,C               DB2 region status\nDSNHDBM1 DS    XL3,C               DB2 region status\nDSNHDIST DS    XL3,C               DB2 region status\nIRLMPROH DS    XL3,C               DB2 region status\nDB2VNUM  EQU   (*-DB2MET)/4\n***********************************************************************\n*        APPLICATION METRICS - STC                                    *\n***********************************************************************\nSTCMET   EQU   *\nSTCUC4   DS    XL3,C               UC4 status\nSTCXPTR  DS    XL3,C               XPTRMAIN (SystemWare) status\nSTCNEMC  DS    XL3,C               NIMBEMCS (Nimbus console) status\nSTCPSYNC DS    XL3,C               PSYNC status\nSTCVNUM  EQU   (*-STCMET)/4\n***********************************************************************\n*        APPLICATION METRICS - HSM                                    *\n***********************************************************************\nHSMMET1  EQU   *\nHSMSTAT  DS    XL3,C               HSM status\nHSMVNUM1 EQU   (*-HSMMET1)/4\nHSMMET2  EQU   *\nHSMBCDS  DS    XL3,CL3             HSM BCDS freespace\nHSMMCDS  DS    XL3,CL3             HSM MCDS freespace\nHSMOCDS  DS    XL3,CL3             HSM OCDS freespace\nHSMJRNL  DS    XL3,CL3             HSM Journal freespace\nHSMVNUM2 EQU   (*-HSMMET2)/4\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        General work areas, subtask address space information, etc.  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nAGCBDWD  DS    D                   Double word work area\nAGCBXINT DS    D                   Timer interval for NIMEXST\nAGCBJINT DS    D                   Timer interval for NIMJES2\nAGCBHINT DS    D                   Timer interval for NIMHSM\nAGCBDINT DS    D                   Timer interval for NIMDASD\nAGCBSINT DS    D                   Timer interval for NIMSYS\nAGCBDW2  DS    D                   Message data work area\nAGCBCOMM DS    32D                 Data area for operator commands\nBUF      DS    10D                 BUFFER FOR READ/WRITE\nRESPPDU  DS    10D                 DPI response buffer\nAGCBMN   DS    CL8                 Module name\nAGCBEXTA DS    0A                  EXTRACT answer area, order dependent\nAGCBTIOT DS    A                    Address of TIOT\nAGCBCOM  DS    A                    Address of COM area\nAGCBCIB  DS    F                   Address of active CIB\nAGCBDIDS DS    0F                  Beginning of the message DOM IDs\nAGCBDID1 DS    F                    DOM ID for SFSS001I\nAGCBDID2 DS    F                    DOM ID for SFSS002I\nAGCBDIDN EQU   (*-AGCBDIDS)/4      Number of message DOM IDs\nAGCBRECB DS    F                   ECB for possible WTORs\nAGCBFLG1 DS    F                   General flag for dispatching\nAGCB1STP EQU   B'00010000'          Agent ordered by ops to stop\nAGCB1ABE EQU   B'00001000'          Agent is ABENDing\nAGCB1EOF EQU   B'10000000'          EOF encountered for PARMLIB\nAGCBFWD  DS    F                   work area\nAGCBMODA DS    A                   Address of NIMAGNT\nAGCBMODX DS    A                   Address of NIMEXST\nAGCBMODJ DS    A                   Address of NIMJES2\nAGCBMODH DS    A                   Address of NIMHSM\nAGCBMODD DS    A                   Address of NIMDASD\nAGCBMODS DS    A                   Address of NIMSYS\nAGCBCECB DS    F                   Comunication ECB\n*\nAGCBXTCB DS    F                   Exist subtask TCB\nAGCBXECB DS    F                   Exist subtask ECB\nAGCBECBX DS    F                   Exist communication ECB\n*\nAGCBJTCB DS    F                   JES2 subtask TCB\nAGCBJECB DS    F                   JES2 subtask ECB\nAGCBECBJ DS    F                   JES2 communication ECB\n*\nAGCBHTCB DS    F                   HSM subtask TCB\nAGCBHECB DS    F                   HSM subtask ECB\nAGCBECBH DS    F                   HSM communication ECB\n*\nAGCBDTCB DS    F                   Dasd subtask TCB\nAGCBDECB DS    F                   Dasd subtask ECB\nAGCBECBD DS    F                   DASD communication ECB\n*\nAGCBSTCB DS    F                   Sys subtask TCB\nAGCBSECB DS    F                   Sys subtask ECB\nAGCBECBS DS    F                   Sys communication ECB\n*\nAGCBECBL DS    0F                  List of ECB addresses\nSECBA    DS    F                   SELECTEX ECB address\nCECBA    DS    F                   Communications ECB address\nRSNDMASK DS    F                  *Read mask\nRRETMASK DS    F                  *Returned read mask\nSECB     DS    F                  SELECTEX ecb\nERRNO    DS    F\nRETCODE  DS    F\nHOW      DS    F                  END COMMUNICATION TO- AND FROM-SOCKET\nINSTANCS DS    F                  instance identifier - start\nINSTANCE DS    F                  instance identifier - end\nHSMASCB  DS    F                  ascb of DFHSM\nFUNC     DS    CL8                function name\nHSMASID  DS    H                  asid of dfhsm\nAGCBRCVL DS    H                  Binary number for single Route Code\nSOCKDESC DS    H                  socket descriptor\nAGCBTMP  DS    CL5                Work area\nAGCBTMP2 DS    CL9                Work area\nAGCBINST DS    C                  instance number\nINITFLAG DS    BL1                daughter init flag\nSYSBIT   EQU   BIT3               nimsys init flag\nEXSTBIT  EQU   BIT4               nimexst init flag\nJES2BIT  EQU   BIT5               nimjes2 init flag\nHSMBIT   EQU   BIT6               nimhsm init flag\nDASDBIT  EQU   BIT7               nimdasd init flag\nMODFLAG  DS    BL1                daughter command flag\nMAINTBIT EQU   BIT1               exist - set something in maint mode\nSHUTBIT  EQU   BIT7               shutdown\nEXSTFLG  DS    BL1                NIMEXST work flag\nMAINTON  EQU   BIT1               turn maint mode on\nMAINTOFF EQU   BIT2               turn maint mode off\nMETFND   EQU   BIT3               metric entry found\n         CNOP  0,4\nNAME     DS    0CL16              SOCKET NAME STRUCTURE\nFAMILY   DS    AL2                FAMILY\nPORT     DS    H\nADDRESS  DS    F\n         DS    XL8                RESERVED\nMYTIE    EZASMI TYPE=TASK,STORAGE=CSECT     TIE\nEZASMGW  EZASMI TYPE=GLOBAL,      STORAGE DEFINITION FOR GWA           C\n               STORAGE=CSECT\n***********************************************************************\n*                                                                     *\n*        Save areas for various routines in subtasks                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nAGCBSAVE DS    18F                 Save area for agent code\nREGSAVE  DS    4F                  Save area for subroutine branches\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        Provide a single work area for short-term use to allow for   *\n*        NIMAGENT to remain reentrant.  This combines the needs for   *\n*        various parameters lists for MVS system services.            *\n*                                                                     *\n*        *  A WPL, with WPX, for building WTO messages - the maximum  *\n*           length this component would ever want is used.            *\n*        *  A WPL, with WPX, for building WTOR messages - the maximum *\n*           length this component would ever want is used.            *\n*        *  A parameter list for the ESTAE call                       *\n*        *  A parameter list for the ATTACHs for subtasks             *\n*        *  A parameter list for the EXTRACT call                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nAGCBMPL  DS    0F                  Parm area for WTO, ESTAE, etc\n         SPACE 1\n*        WTO   '1234567890123456789012345678901234567890123456789012345\n*              678901234567890123456789012345678901234567890',\n*              ROUTCDE=(2,17),DESC=(2,7),MF=L\n         WTO   '1234567890123456789012345678901234567890123456789012345C\n               678901234567890123456789012345678901234567890',         C\n               ROUTCDE=(2,17),DESC=(2,7),MF=L\n         EJECT ,\n         ORG   AGCBMPL             ORG back for WTOR WPL\n*        WTOR  '1234567890123456789012345678901234567890123456789012345\n*              678901234567890123456789012345678901234567890',\n*              *-*,1,*-*,ROUTCDE=(1,10,17),DESC=(2),MF=L\n         WTOR  '1234567890123456789012345678901234567890123456789012345C\n               678901234567890123456789012345678901234567890',         C\n               *-*,1,*-*,ROUTCDE=(1,10,17),DESC=(2),MF=L\n         SPACE 2\n         ORG   AGCBMPL             ORG back for ESTAE parm list\n*        ESTAE *-*,TERM=YES,RECORD=YES,PARAM=*-*,MF=L\n         ESTAE *-*,TERM=YES,RECORD=YES,PARAM=*-*,MF=L\nAGCBEPLL EQU   *-AGCBMPL           Length of ESTAE parm list\n         EJECT ,\n         ORG   AGCBMPL             ORG back for ATTACH parm list\n*        ATTACH EPLOC=*-*,ECB=*-*,SM=SUPV,DISP=YES,SZERO=NO,SF=L\n         ATTACH EPLOC=*-*,ECB=*-*,SM=SUPV,DISP=YES,SZERO=NO,SF=L\nAGCBAPLL EQU   *-AGCBMPL           Length of ATTACH parm list\n         SPACE 2\n         ORG   AGCBMPL             ORG back for EXTRACT parm list\n*        EXTRACT *-*,'S',FIELDS=(COMM,TIOT),MF=L\n         EXTRACT *-*,'S',FIELDS=(COMM,TIOT),MF=L\nAGCBXPLL EQU   *-AGCBMPL           Length of EXTRACT parm list\n         SPACE 2\n         SPACE 2\n         ORG   ,                   ORG to end of parm lists\n         SPACE 1\n         DS    0D\nAGCBLEN  EQU   *-AGCB              AGCB length\n.*\n         MEND  ,                   End of macro IAZAGCB\n./ ADD NAME=NIMSTCB  0107-09022-09029-1258-00122-00117-00013-SCHMUM\n         MACRO -- NIMSTCB - Sub task Control Block\n         NIMSTCB ,\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        NIMSTCB - Sub Task Control Block (STCB)                      *\n*                                                                     *\n*  FUNCTION:                                                          *\n*                                                                     *\n*        This control block is used by the sub tasks.                 *\n*        It contains most of the non-static data areas needed by      *\n*        that reeentrant code, including parameter lists for system   *\n*        services, ECBs, etc.                                         *\n*                                                                     *\n*  USED BY:                                                           *\n*                                                                     *\n*        NIMEXIST, NIMDASD, NIMJES2, NIMESTAE, NIMHSM                 *\n*                                                                     *\n*        CREATED BY: NIMxxxx         FREED BY: NIMxxxx                *\n*                                                                     *\n*        SUBPOOL: 230                KEY: 1                           *\n*                                                                     *\n*        SIZE: see STCBLEN                                            *\n*                                                                     *\n*        POINTED TO BY:  R10 in NIMxxxx                               *\n*                                                                     *\n*        FREQUENCY:  one STCB is allocated for each sub task.         *\n*                                                                     *\n*        RESIDENCY:  Virtual and Real - below the 16M line            *\n*                    negotiated to use full AMODE 31 support          *\n*                                                                     *\n*        SERIALIZATION:  Fields in this control block may only be     *\n*                        referenced by the owning sub task,           *\n*                        preferably only by code in NIMxxxx.  The     *\n*                        STCB cannot be referenced by other tasks     *\n*                        without concern about it being deleted.      *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n***********************************************************************\n*                                                                     *\n*        General work areas, ECBs, flags, etc.                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSTCB     DSECT ,                   Sample FSA Control Block dsect\nSTCBID   DC    C'STCB'             Control block ID\nSTCBMN   DS    CL8                 Module name\nSTCBDWD  DS    D                   Double word work area\nSTCBDWD2 DS    D                   Double word work area\nSTCBSAVE DS    18F                 Subtask top save area\nSTCBWD   DS    F                   Word work area\nSTCBTMID DS    F                   Word for Timer Services to place id\nSTCBTECB DS    A                   Timer ECB\nSTCBECBL DS    0F                  ECB list for sub task\nSTCBTEP  DS    A                   address of timer ECB\nSTCBCEP  DS    A                   address of agent communication ECB\nSTCBAGCB DS    A                   Agent control block\nSTCBCOMA DS    A                   Comm address\nSTCBERBL DS    A                   ERBSMFI buffer length\nPARMLIST DS    7A                  Parmlist for erbsmfi\nCPUUTL   DS    F                   Return area for CPU util.\nDPR      DS    F                   Return area for demand paging\nSTCBFLG1 DS    X                   General communications flag byte\nSTCB1ABE EQU   B'00000100'         the Subtask is ABENDing\nSTCB1TIM EQU   B'00001000'         timer still outstanding\nSTCB1TRM EQU   B'00010000'         the Subtask should terminate\nMyAxrDiag DS   CL(AXRDIAG_LEN)        40\nMyVarLst DS    CL(AXRARGLST_LEN)      16\nMyVarEn1 DS    CL(AXRARGENTRY_LEN)    40\nMyVarEn2 DS    CL(AXRARGENTRY_LEN)    40\nJOEINT   DS    CL3                 Return area for JOE percentage\nJQEINT   DS    CL3                 Return area for JQE percentage\nOutRC    DS    F                   Return code from AXREXX\nOutRsn   DS    F                   Reason code from AXREXX\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        Provide a single work area for short-term use to allow for   *\n*        NIMxxxx to remain reentrant.  This combines the needs for    *\n*        various parameters lists for MVS system services.            *\n*                                                                     *\n*        *  A WPL, with WPX, for building WTO messages - the maximum  *\n*           length this component would ever want is used.            *\n*        *  A WPL, with WPX, for building WTOR messages - the maximum *\n*           length this component would ever want is used.            *\n*        *  A parameter list for the ESTAE call                       *\n*        *  A parameter list for the STIMERM SET/CANCEL calls         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSTCBMPL  DS    0F                  Parm area for WTO, ESTAE, etc\n         SPACE 1\n         WTO   '1234567890123456789012345678901234567890123456789012345C\n               678901234567890123456789012345678901234567890',         C\n               ROUTCDE=(2,17),DESC=(2,7),MF=L\n         EJECT ,\n         ORG   STCBMPL             ORG back for WTOR WPL       @420LPCW\n         WTOR  '1234567890123456789012345678901234567890123456789012345C\n               678901234567890123456789012345678901234567890',         C\n               *-*,1,*-*,ROUTCDE=(1,10,17),DESC=(2),MF=L       @420LPCW\n         SPACE 1                                               @420LPCW\nSTCBRECB DS    F                   ECB for possible WTORs      @420LPCW\nSTCBRPLY DS    CL112               Response area for WTORs     @420LPCW\n         EJECT                                                 @420LPCW\n         ORG   STCBMPL             ORG back for ESTAE parm list\n         ESTAE *-*,TERM=YES,RECORD=YES,PARAM=*-*,MF=L\nSTCBEPLL EQU   *-STCBMPL           Length of ESTAE parm list\n         SPACE 2                                               @420LPCW\n         ORG   STCBMPL             ORG back for STIMERM parm list\n         STIMERM SET,MF=L          STIMERM parameter list\nSTCBSPLL EQU   *-STCBMPL           Length of STIMERM parm list\n         SPACE 1\n         ORG   STCBMPL             ORG back for STIMERM parm list\n         AXREXX MF=(L,NIMSTCB)\nSTCBAPLL EQU   *-STCBMPL           Length of ESTAE parm list\n         SPACE 1\n         ORG   ,                   ORG to end of parm lists\nSTCBLEN  EQU   *-STCB              STCB Length\n.*\n         AXRZARG DSECT=YES,AXRARGLST=YES,AXRARGENTRY=YES,AXRDIAG=YES\n         MEND  ,                   End of macro NIMSTCB\n./ ADD NAME=RCPBFRGS 0100-85112-85112-0816-00019-00019-00000-MAS1\n         MACRO\n         RCPBFRGS &BUFPTR,&WKREGS\n         GBLC  &RCPBFRP,&RCPBFR1,&RCPBFR2\n         AIF   ('&BUFPTR' EQ '').TGP\n&RCPBFRP SETC  '&BUFPTR'\n         AGO   .TWK1\n.TGP     AIF   ('&RCPBFRP' NE '').TWK1\n&RCPBFRP SETC  'R1'\n.TWK1    AIF   ('&WKREGS(1)' EQ '').TG1\n&RCPBFR1 SETC  '&WKREGS(1)'\n         AGO   .TWK2\n.TG1     AIF   ('&RCPBFR1' NE '').TWK2\n&RCPBFR1 SETC  'R14'\n.TWK2    AIF   ('&WKREGS(2)' EQ '').TG2\n&RCPBFR2 SETC  '&WKREGS(2)'\n         MEXIT\n.TG2     AIF   ('&RCPBFR2' NE '').EXIT\n&RCPBFR2 SETC  'R15'\n.EXIT    MEND\n./ ADD NAME=RCPBTU   0100-85112-85112-0817-00017-00017-00000-MAS1\n         MACRO\n         RCPBTU &KEY,&NUM,&PAR\n         LCLA  &L\n.*\n.*  INNER MACRO FOR ALLOC, TO GENERATE TEXT UNITS ENTERED\n.*  IN QUOTES\n.*\n&L       SETA  K'&PAR-2                GET LENGTH OF TEXT UNIT\n         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,&NUM         SET NUMBER FIELD\n         MVI   S99TULNG+1,&L           MOVE IN LENGTH\n         MVC   S99TUPAR(&L.),=C&PAR    MOVE IN TEXT UNIT\n&L       SETA  &L+6\n         AIF   (&L/2 EQ (&L+1)/2).LOK\n&L       SETA  &L+1\n.LOK     RCPDINC &L\n         MEND\n./ ADD NAME=RCPBTU2  0100-85112-85112-0817-00019-00019-00000-MAS1\n         MACRO\n         RCPBTU &KEY,&NUM,&PAR\n         GBLA  &DTUPO\n         GBLC  &DYNP\n         LCLA  &L\n.*\n.*  INNER MACRO FOR ALLOC, TO BRANCH AROUND TEXT UNIT AND\n.*  CREATE TEXT UNIT\n.*\n&L       SETA  K'&PAR+8                GET LENGTH TO BRANCH AROUND\n         AIF   (&L/2 EQ (&L+1)/2).LOK  MAKE SURE LENGTH IS EVEN\n&L       SETA  &L+1\n.LOK     BAL   R14,*+&L                BRANCH AROUND TEXT UNIT\n&L       SETA  K'&PAR-2\n         DC    Y(&KEY,&NUM,&L),C&PAR   TEXT UNIT\n         LA    R14,0(R14)              CLEAR HIGH ORDER BYTE\n         ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n&DTUPO   SETA  &DTUPO+4\n         MEND\n./ ADD NAME=RCPCKID  0100-85112-85112-0818-00045-00045-00000-MAS1\n         MACRO\n&NAME    RCPCKID              &CHECKID\n         GBLB  &RCPECT(2),&RCPPSCB(2)\n         GBLC  &RCPPRE\n         LCLC  &CHARVAR,&P\n         LCLA  &COUNTR,&L\n&P       SETC  '&RCPPRE'\n&RCPPSCB(1) SETB  1\n&RCPECT(1)  SETB  1\n         EJECT\n         SPACE 4\n***********************************************************************\n***  THE USERID OF THE USER IS CHECKED. IF IT IS NOT VALID, THE    ****\n***   COMMAND PRETENDS IT DOES NOT EXIST BY LINKING TO EXEC IN     ****\n***   THE SAME WAY THE TMP DOES IF IT CANNOT FIND THE COMMAND.     ****\n***********************************************************************\n         SPACE 3\n         L     R1,CPPLPSCB             LOAD ADDRESS OF PSCB\n         USING PSCB,R1                 PSCB ADDRESSABILITY\n.NID     ANOP\n&COUNTR  SETA  &COUNTR+1\n         AIF   ('&CHECKID(&COUNTR)' EQ '').ENDID\n&CHARVAR SETC  '&CHECKID(&COUNTR)'\n&L       SETA  K'&CHARVAR\n         AIF   ('&CHARVAR'(1,1) EQ '''').QCID\n         CLC   PSCBUSER(&L),=C'&CHARVAR'  IS THE USERID VALID?\n         BE    &P.IDOK                     YES, BRANCH OUT\n         AGO   .NID\n.QCID    ANOP\n&L       SETA  &L-2\n         CLC   PSCBUSER(&L),=C&CHARVAR    IS THE USERID VALID?\n         BE    &P.IDOK                     YES, BRANCH OUT\n         AGO   .NID\n.ENDID   L     R1,CPPLECT              LOAD ECT ADDRESS\n         SPACE 2\n         USING ECT,R1\n         MVC   ECTPCMD,&P.EXECN        MOVE IN COMMAND NAME\n         DROP  R1                      KILL ECT ADDRESSABILITY\n         L     R1,CPPLCBUF             LOAD CBUF ADDRESS\n         XC    2(2,R1),2(R1)           ZERO OFFSET FIELD\n         L     R1,&P.CPPL              RELOAD CPPL ADDRESS\n         XCTL  EPLOC=&P.EXECN\n&P.EXECN DC    CL8'EXEC'               NAME OF EXEC PROCESSOR\n&P.IDOK  DS    0H\n         MEND\n./ ADD NAME=RCPDDN   0100-85112-85112-0819-00027-00027-00000-MAS1\n         MACRO\n         RCPDDN &DDN\n         GBLC  &DYNP\n         SPACE 1\n***********************************************************************\n**   BUILD THE DDNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DDN'(K'&DDN,1) EQ '/').BTU\n         AIF   ('&DDN'(1,1) EQ '''').Q\n         RCPSR2\n         AIF   ('&DDN'(1,1) EQ '(').R\n         L     R14,&DDN                LOAD ADDRESS OF DDNAME\n         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME\n         AGO   .STH\n.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME\n         LH    R2,4&DDN                LOAD LENGTH OF DDNAME\n.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DDNAME\n         MVI   S99TUKEY+1,DALDDNAM     MOVE IN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.Q       RCPBTU DALDDNAM,1,&DDN\n         MEXIT\n.BTU     RCPTUBFR DALDDNAM,14,&DDN\n         MEND\n./ ADD NAME=RCPDDNRT 0100-85112-85112-0819-00012-00012-00000-MAS1\n         MACRO\n         RCPDDNRT\n         SPACE 1\n***********************************************************************\n**    DDNAME RETURN TEXT UNIT                                        **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTDDN     SET RETURN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,8            SET LENGTH FIELD\n         MVC   S99TUPAR(8),=CL8' '     INITIALIZE FIELD TO BLANKS\n         RCPDINC 14\n         MEND\n./ ADD NAME=RCPDEBUG 0100-85112-85112-0820-00019-00019-00000-MAS1\n         MACRO\n         RCPDEBUG &ON\n         GBLA  &RCPBGN#,&RCPSWS(10)\n         GBLB  &RCPDBUG\n         GBLC  &RCPPRE,&RCPWKDS,&RCPWKCS\n         AIF   ('&ON' EQ '').TSW\n&RCPDBUG SETB 1\n.TSW     AIF   (&RCPDBUG).DEBUG\n         MEXIT\n.DEBUG   MNOTE *,'RCPBGN# IS &RCPBGN#'\n         MNOTE *,'RCPSWS(1) IS &RCPSWS(1)'\n         MNOTE *,'RCPSWS(2) IS &RCPSWS(2)'\n         MNOTE *,'RCPSWS(3) IS &RCPSWS(3)'\n         MNOTE *,'RCPSWS(4) IS &RCPSWS(4)'\n         MNOTE *,'RCPSWS(5) IS &RCPSWS(5)'\n         MNOTE *,'RCPWKCS IS ''&RCPWKCS'''\n         MNOTE *,'RCPWKDS IS ''&RCPWKDS'''\n         MNOTE *,'RCPPRE IS ''&RCPPRE'''\n         MEND\n./ ADD NAME=RCPDFPL  0100-85112-85112-0820-00044-00044-00000-MAS1\n         MACRO\n         RCPDFPL\n         GBLC  &RCPPRE\n         GBLB  &RCPDFPL(2)\n         GBLB  &RCPDFPB(2)\n         LCLC  &P,&L,&L1\n&P       SETC  '&RCPPRE'\n         EJECT\n         AIF   (&RCPDFPL(2)).BYPDFPL\n&RCPDFPL(2) SETB 1\n         IKJDFPL\nL#DFPL   EQU   *-DFPL                  LENGTH OF DEFAULT PARAM LIST\n         IKJDFPB\nL#DFPB   EQU   *-DFPB                  LENGTH OF DEFAULT PARAM BLOCK\n&SYSECT  CSECT                         RESUME PROGRAM CSECT\n         SPACE 3\n.BYPDFPL RCPDS\n&P.DFPL  DS    CL(L#DFPL)              RESERVE SPACE FOR DFPL\n&P.DFPB  DS    CL(L#DFPB)              RESERVE SPACE FOR DFPB\n&P.DSNB  DS    CL48                    RESERVE SPACE FOR DSNAME BUFFER\n         RCPDS\n         EJECT\n***********************************************************************\n***   THIS CODE GENERATES AN DEFAULT SERVICE ROUTINE PARAMETER LIST ***\n***       AND PARAMETER BLOCK                                       ***\n***********************************************************************\n         LA    R1,&P.DFPL              LOAD DFPL ADDRESS\n         USING DFPL,R1                 DFPL ADDRESSABLE\n         MVC   DFPLUPT,CPPLUPT         MOVE IN ADDRESS OF UPT\n         MVC   DFPLECT,CPPLECT         MOVE IN ADDRESS OF ECT\n         LA    R15,&P.ECB              LOAD ADDRESS OF ATTN ECB\n         ST    R15,DFPLECB             AND STORE IN DFPL\n         LA    R15,&P.DFPB             LOAD DFBP ADDRESS\n         ST    R15,DFPLDFPB             AND STORE IT IN DFPB\n         DROP  R1\n         USING DFPB,R15                ADDRESS DFPB DSECT\n         XC    DFPB(L#DFPB),DFPB       CLEAR DEFAULT PARAMETER BLOCK\n         MVC   DFPBPSCB,CPPLPSCB       MOVE IN ADDRESS OF PSCB\n         LA    R1,&P.DSNB              LOAD DSNAME BUFFER ADDRESS\n         ST    R1,DFPBDSN               AND STORE IT INTO DFPB\n         MVI   DFPBCODE,DFPB04          SET ENTRY CODE\n         DROP  R15                     DFPB NO LONGER ADDRESSABLE\n         EJECT\n         MEND\n./ ADD NAME=RCPDINC  0100-85112-85112-0821-00013-00013-00000-MAS1\n         MACRO\n         RCPDINC &L1\n         GBLA  &DTUO,&DTUPO\n         GBLC  &DYNP\n         AIF   ('&L1' EQ '').T2\n         ST    R15,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n         LA    R15,&L1.(R15)           BUMP TEXT UNIT PTR TO NEXT SLOT\n&DTUPO   SETA  &DTUPO+4\n&DTUO    SETA  &DTUO+&L1\n         MEXIT\n.T2      ST    R14,&DYNP.TUP+&DTUPO    STORE TEXT UNIT ADDRESS\n&DTUPO   SETA  &DTUPO+4\n         MEND\n./ ADD NAME=RCPDISP  0101-85112-86135-0923-00053-00053-00001-MAS1\n         MACRO\n         RCPDISP &DISP\n         LCLA  &I\n         LCLB  &B(4)\n         AIF   ('&DISP(1)' EQ '').TD2\n         SPACE\n***********************************************************************\n**     DATA SET INITIAL STATUS                                       **\n***********************************************************************\n&B(1)    SETB  ('&DISP(1)' EQ 'SHR')\n&B(2)    SETB  ('&DISP(1)' EQ 'NEW')\n&B(3)    SETB  ('&DISP(1)' EQ 'MOD')\n&B(4)    SETB  ('&DISP(1)' EQ 'OLD')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK1\n         MNOTE 8,'&DISP(1) IS INVALID, DISP=SHR USED'\n&B(1)    SETB  1\n.OK1     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DALSTATS,1,1,X'0&I.00')\n         RCPDINC 8\n.TD2     AIF   ('&DISP(2)' EQ '').TD3\n         SPACE\n***********************************************************************\n**    DATA SET NORMAL DISPOSITION                                    **\n***********************************************************************\n&B(1)    SETB  ('&DISP(2)' EQ 'KEEP')\n&B(2)    SETB  ('&DISP(2)' EQ 'DELETE')\n&B(3)    SETB  ('&DISP(2)' EQ 'CATLG')\n&B(4)    SETB  ('&DISP(2)' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK2\n         MNOTE 8,'&DISP(2) IS INVALID, DISP=(,KEEP) USED'\n&B(1)    SETB  1\n.OK2     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DALNDISP,1,1,X'0&I.00')\n         RCPDINC 8\n.TD3     AIF   ('&DISP(3)' EQ '').EXIT\n         SPACE\n***********************************************************************\n**   DATASET CONDITIONAL DISPOSITION                                 **\n***********************************************************************\n&B(1)    SETB  ('&DISP(3)' EQ 'KEEP')\n&B(2)    SETB  ('&DISP(3)' EQ 'DELETE')\n&B(3)    SETB  ('&DISP(3)' EQ 'CATLG')\n&B(4)    SETB  ('&DISP(3)' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3\n         MNOTE 8,'&DISP(3) IS INVALID, DISP=(,,KEEP) USED'\n&B(1)    SETB  1\n.OK3     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DALCDISP,1,1,X'0&I.00')\n         RCPDINC 8\n.EXIT    MEND\n./ ADD NAME=RCPDS    0100-85112-85112-0822-00026-00026-00000-MAS1\n         MACRO\n         RCPDS\n         GBLB  &RCPDSBR\n         GBLC  &RCPWKDS,&RCPWKCS,&RCPDS\n         AIF   ('&RCPDS' NE '').RESUME\n&RCPDS   SETC  '&SYSECT'\n         AIF   ('&RCPWKDS' EQ '').CSECT\n&RCPWKDS DSECT                         ENTER WORKAREA DSECT\n         MEXIT\n.CSECT   AIF   ('&RCPWKCS' EQ '').BRANCH\n&RCPWKCS CSECT                         ENTER WORKAREA CSECT\n         MEXIT\n.RESUME  AIF   (&RCPDSBR).BRTO\n&RCPDS   CSECT                         RESUME PROGRAM CSECT\n&RCPDS   SETC  ''\n         MEXIT\n.BRANCH  ANOP\n&RCPDS   SETC  'RCP&SYSNDX'\n&RCPDSBR SETB  1\n         B     &RCPDS                  BRANCH AROUND CONSTANTS\n         MEXIT\n.BRTO    ANOP\n&RCPDS   DS    0H\n&RCPDSBR SETB  0\n&RCPDS   SETC  ''\n         MEND\n./ ADD NAME=RCPDSECT 0100-85112-85112-0822-00011-00011-00000-MAS1\n         MACRO\n&NAME    RCPDSECT &LTORG=YES\n         AIF   ('&LTORG' NE 'YES').RCPDS\n***********************************************************************\n****                  LITERALS                                     ****\n***********************************************************************\n         SPACE 3\n         LTORG\n         EJECT\n.RCPDS   RCPDS\n         MEND\n./ ADD NAME=RCPDSN   0101-85112-89235-1627-00069-00068-00001-MSCHMTZ\n         MACRO\n         RCPDSN &DSN,&MEM\n         LCLC  &MEMBER\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**   BUILD THE DSNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DSN'(1,1) EQ '''').Q\n         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD\n         AIF   ('&DSN'(1,1) EQ '(').REG\n         AIF   ('&DSN'  EQ '*').TERM\n         RCPSR2\n         L     R14,&DSN                LOAD ADDRESS OF DSNAME\n         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME\n.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DSNAME\n         MVI   S99TUKEY+1,DALDSNAM     MOVE IN DSNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 50\n         AGO   .TMEMBER\n.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME\n         RCPSR2\n         LH    R2,4&DSN                LOAD LENGTH OF DSNAME\n         AGO   .STH\n.TERM    MVI   S99TUKEY+1,DALTERM\n         RCPDINC 4\n         MEXIT\n.BD      RCPTUBFR DALDSNAM,50,&DSN\n         AGO   .TMEMBER\n.Q       RCPBTU DALDSNAM,1,&DSN\n.TMEMBER AIF   ('&MEM' EQ '').EXIT\n         SPACE\n***********************************************************************\n**   BUILD THE MEMBER NAME TEXT UNIT                                 **\n***********************************************************************\n&MEMBER  SETC  '&MEM'\n         AIF   ('&MEM' NE '*').MOK\n         AIF   ('&DSN'(1,1) NE '''').MAST\n         MNOTE 8,'MEMBER=* INVALID WITH QUOTED DSNAME'\n         MEXIT\n.MAST    ANOP\n&MEMBER  SETC  '8+&DSN'\n.MOK     ANOP\n         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM\n         AIF   ('&MEMBER'(1,1) EQ '''').QM\n         RCPSR2\n         AIF   ('&MEMBER'(1,1) EQ '(').RM\n         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER\n         AGO   .STHM\n.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME\n         MVI   S99TUKEY+1,DALMEMBR     MOVE IN MEMBER KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.BM      RCPTUBFR DALMEMBR,14,&MEMBER\n         MEXIT\n.QM      RCPBTU DALMEMBR,1,&MEMBER\n.EXIT    MEND\n./ ADD NAME=RCPDSNPD 0100-85112-85112-0824-00009-00009-00000-MAS1\n         MACRO\n         RCPDSNPD &PDE\n         AIF   ('&PDE'(1,1) EQ '(').RPDE\n         RCPDSN &PDE,8+&PDE\n         RCPPSWD 16+&PDE\n         MEXIT\n.RPDE    RCPDSN &PDE,8&PDE\n         RCPPSWD 16(&PDE)\n         MEND\n./ ADD NAME=RCPDSNRT 0100-85112-85112-0824-00011-00011-00000-MAS1\n         MACRO\n         RCPDSNRT\n         SPACE\n***********************************************************************\n**    DSNAME RETURN TEXT UNIT                                        **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTDSN     SET RETURN DSNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,44           SET LENGTH FIELD\n         RCPDINC 50\n         MEND\n./ ADD NAME=RCPDSRGR 0100-85112-85112-0825-00012-00012-00000-MAS1\n         MACRO\n         RCPDSRGR\n         SPACE\n***********************************************************************\n**    DSORG RETURN TEXT UNIT                                         **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTORG     SET RETURN DSORG KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,2            SET LENGTH FIELD\n         XC    S99TUPAR(2),S99TUPAR    INITIALIZE FIELD TO ZERO\n         RCPDINC 8\n         MEND\n./ ADD NAME=RCPDUMMY 0100-85112-85112-0826-00009-00009-00000-MAS1\n         MACRO\n         RCPDUMMY &DUMMY\n         SPACE\n***********************************************************************\n**      DUMMY DATASET TEXT UNIT                                      **\n***********************************************************************\n         MVI   S99TUPAR+1,DALDUMMY     MOVE IN DUMMY DS TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n./ ADD NAME=RCPENDD  0100-85112-85112-0826-00037-00037-00000-MAS1\n         MACRO\n&NAME    RCPENDD\n         GBLB  &RCPECT(2),&RCPUPT(2),&RCPPSCB(2),&RCPS99(2)\n         GBLC  &RCPPRE,&RCPWKDS,&RCPDS\n         LCLC  &P,&CS\n&CS      SETC  '&RCPDS'                PROGRAM CSECT\n         AIF   (NOT &RCPS99(1)).TDS\n         DYNSPACE\n.TDS     AIF   ('&RCPWKDS' EQ '').RCPDS\n         DS    0D                      ALIGN TO DOUBLEWORD\n&P       SETC  '&RCPPRE'\n&P.WKLEN EQU   *-&RCPWKDS              LENGTH OF WORK AREA\n.RCPDS   RCPDS\n         EJECT\n         AIF   (NOT &RCPECT(1) OR &RCPECT(2)).TRYUPT\n         IKJECT\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPECT(2)     SETB           1\n.TRYUPT  AIF   (NOT &RCPUPT(1) OR &RCPUPT(2)).TRYPSCB\n         IKJUPT\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPUPT(2) SETB  1\n.TRYPSCB AIF   (NOT &RCPPSCB(1) OR &RCPPSCB(2)).TRYS99\n         IKJPSCB\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPPSCB(2) SETB  1\n.TRYS99  AIF   (NOT &RCPS99(1) OR &RCPS99(2)).TRYREST\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n&CS      CSECT                         REENTER MAIN CSECT\n         EJECT\n&RCPS99(2) SETB  1\n.TRYREST MEND\n./ ADD NAME=RCPFDDN  0100-85112-85112-0827-00027-00027-00000-MAS1\n         MACRO\n         RCPFDDN &DDN\n         GBLC &DYNP\n         SPACE\n***********************************************************************\n**        FREE DDNAME TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DDN'(1,1) EQ '''').Q\n         AIF   ('&DDN'(K'&DDN,1) EQ '/').B\n         RCPSR2\n         AIF   ('&DDN'(1,1) EQ '(').R\n         L     R14,&DDN                LOAD ADDRESS OF DDNAME\n         LH    R2,&DDN+4               LOAD LENGTH OF DDNAME\n         AGO   .STH\n.R       L     R14,0&DDN               LOAD ADDRESS OF DDNAME\n         LH    R2,4&DDN                LOAD LENGTH OF DDNAME\n.STH     STH   R2,S99TULNG             STORE DDNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DDNAME\n         MVI   S99TUKEY+1,DUNDDNAM     MOVE IN DDNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.Q       RCPBTU DUNDDNAM,1,&DDN\n         MEXIT\n.B       RCPTUBFR DUNDDNAM,14,&DDN\n         MEND\n./ ADD NAME=RCPFDISP 0100-85112-85112-0827-00020-00020-00000-MAS1\n         MACRO\n         RCPFDISP &DISP\n         LCLB  &B(4)\n         LCLA  &I\n         SPACE\n***********************************************************************\n**       OVERRIDING DISPOSITION                                      **\n***********************************************************************\n&B(1)    SETB  ('&DISP' EQ 'KEEP')\n&B(2)    SETB  ('&DISP' EQ 'DELETE')\n&B(3)    SETB  ('&DISP' EQ 'CATLG')\n&B(4)    SETB  ('&DISP' EQ 'UNCATLG')\n         AIF   (&B(1) OR &B(2) OR &B(3) OR &B(4)).OK3\n         MNOTE 8,'&DISP IS INVALID, DISP=KEEP USED'\n&B(1)    SETB  1\n.OK3     ANOP\n&I       SETA  8*&B(1)+4*&B(2)+2*&B(3)+&B(4)\n         MVC   S99TUKEY(8),=Y(DUNOVDSP,1,1,X'0&I.00')\n         RCPDINC 8\n.EXIT    MEND\n./ ADD NAME=RCPFDSN  0100-85112-85112-0828-00064-00064-00000-MAS1\n         MACRO\n         RCPFDSN &DSN,&MEM\n         LCLC  &MEMBER\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**      FREE DATA SET TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&DSN'(1,1) EQ '''').Q\n         AIF   ('&DSN'(K'&DSN,1) EQ '/').BD\n         AIF   ('&DSN'(1,1) EQ '(').REG\n         RCPSR2\n         L     R14,&DSN                LOAD ADDRESS OF DSNAME\n         LH    R2,&DSN+4               LOAD LENGTH OF DSNAME\n.STH     STH   R2,S99TULNG             STORE DSNAME LENGTH\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE DSNAME\n         MVI   S99TUKEY+1,DUNDSNAM     MOVE IN DSNAME KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 50\n         AGO   .TMEMBER\n.REG     L     R14,0&DSN               LOAD ADDRESS OF DSNAME\n         RCPSR2\n         LH    R2,4&DSN                LOAD LENGTH OF DSNAME\n         AGO   .STH\n.BD      RCPTUBFR DUNDSNAM,50,&DSN\n         AGO   .TMEMBER\n.Q       RCPBTU DUNDSNAM,1,&DSN\n.TMEMBER AIF   ('&MEM' EQ '').EXIT\n         SPACE\n***********************************************************************\n**       FREE MEMBER NAME TEXT UNIT                                  **\n***********************************************************************\n&MEMBER  SETC  '&MEM'\n         AIF   ('&MEM' NE '*').MOK\n         AIF   ('&DSN'(1,1) NE '''').MAST\n         MNOTE 8,'MEMBER=* INVALID WITH QUOTED DSNAME'\n         MEXIT\n.MAST    ANOP\n&MEMBER  SETC  '8+&DSN'\n.MOK     ANOP\n         AIF   ('&MEMBER'(K'&MEMBER,1) EQ '/').BM\n         RCPSR2\n         AIF   ('&MEMBER'(1,1) EQ '(').RM\n         LH    R2,4+&MEMBER            LOAD LENGTH OF MEMBER NAME\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,&MEMBER             LOAD ADDRESS OF MEMBER\n         AGO   .STHM\n.RM      LH    R2,4&MEMBER             LOAD LENGTH OF MEMBER\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO MEMBER, SKIP\n         L     R14,0&MEMBER            LOAD ADDRESS OF MEMBER\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF MEMBER\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN MEMBER NAME\n         MVI   S99TUKEY+1,DUNMEMBR     MOVE IN MEMBER KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         RCPDINC 14\n         MEXIT\n.BM      RCPTUBFR DUNMEMBR,14,&MEMBER\n         MEXIT\n.QM      RCPBTU DUNMEMBR,1,&MEMBER\n.EXIT    MEND\n./ ADD NAME=RCPFHOLD 0100-85112-85112-0828-00024-00024-00000-MAS1\n         MACRO\n         RCPFHOLD &H\n         AIF   ('&H' EQ 'YES').YES\n         AIF   ('&H' EQ 'NO').NO\n         MNOTE 4,'HOLD PARMETER VALUE INCORRECT - IGNORED'\n         MEXIT\n.YES     ANOP\n         SPACE 1\n***********************************************************************\n**       OVERIDING SYSOUT HOLD TEXT UNIT                             **\n***********************************************************************\n         SPACE 1\n         MVI   S99TUKEY+1,DUNOVSHQ MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n         MEXIT\n.NO      ANOP\n         SPACE 1\n***********************************************************************\n**       OVERIDING SYSOUT NO HOLD TEXT UNIT                          **\n***********************************************************************\n         SPACE 1\n         MVI   S99TUKEY+1,DUNOVSHQ MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n./ ADD NAME=RCPFORUS 0100-85112-85112-0829-00008-00008-00000-MAS1\n         MACRO - TO SET UP SVC 99 TEXT UNIT 'FOR USER'\n         RCPFORUS &T\n         SPACE 1\n***********************************************************************\n**       'FOR USER' TEXT UNIT                                        **\n***********************************************************************\n         RCPVCHAR 0,5,&T,N=X'7701'\n         MEND\n./ ADD NAME=RCPFREE  0100-85112-85112-0829-00009-00009-00000-MAS1\n         MACRO\n         RCPFREE &FREE\n         SPACE\n***********************************************************************\n**      UNALLOC AT CLOSE TEXT UNIT                                   **\n***********************************************************************\n         MVI   S99TUPAR+1,DALCLOSE     MOVE IN CLOSE TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n./ ADD NAME=RCPIOPL  0100-85112-85112-0830-00071-00071-00000-MAS1\n         MACRO\n&NAME    RCPIOPL\n         GBLC  &RCPPRE\n         GBLB  &RCPIOPL(2)\n         GBLB  &RCPSTPB(2),&RCPPTPB(2),&RCPPGPB(2),&RCPGTPB(2)\n         LCLC  &P,&L,&L1\n&P       SETC  '&RCPPRE'\n         EJECT\n         AIF   (&RCPIOPL(2)).BYPIOPL\n&RCPIOPL(2) SETB 1\n         IKJIOPL\nL#IOPL   EQU   *-IOPL                  LENGTH OF IO PARAM LIST\n&SYSECT  CSECT                         RESUME PROGRAM CSECT\n         SPACE 3\n.BYPIOPL RCPDS\n&P.IOPL  DS    CL(L#IOPL)              RESERVE SPACE FOR IOPL\n         RCPDS\n         SPACE 5\n***********************************************************************\n***   THIS CODE GENERATES AN I/O SERVICE ROUTINE PARAMETER LIST     ***\n***********************************************************************\n         LA    R1,&P.IOPL              LOAD IOPL ADDRESS\n         USING IOPL,R1                 IOPL ADDRESSABLE\n         MVC   IOPLUPT,CPPLUPT         MOVE IN ADDRESS OF UPT\n         MVC   IOPLECT,CPPLECT         MOVE IN ADDRESS OF ECT\n         LA    R15,&P.ECB              LOAD ADDRESS OF ATTN ECB\n         ST    R15,IOPLECB             AND STORE IN IOPL\n         DROP  R1\n  AIF (&RCPSTPB(1) OR &RCPGTPB(1) OR &RCPPGPB(1) OR &RCPPTPB(1)).I\n         MEXIT\n.I       EJECT\n         AIF   (NOT &RCPSTPB(1) OR &RCPSTPB(2)).TPT\n         IKJSTPB\n&RCPSTPB(2) SETB 1\nL#STPB   EQU   *-STPB         LENGTH OF STPB\n&SYSECT  CSECT\n.TPT     AIF   (NOT &RCPPTPB(1) OR &RCPPTPB(2)).TGT\n         IKJPTPB\n&RCPPTPB(2) SETB 1\nL#PTPB   EQU   *-PTPB         LENGTH OF PTPB\n&SYSECT  CSECT\n.TGT     AIF   (NOT &RCPGTPB(1) OR &RCPGTPB(2)).TPG\n         IKJGTPB\n&RCPGTPB(2) SETB 1\nL#GTPB   EQU   *-GTPB         LENGTH OF GTPB\n&SYSECT  CSECT\n.TPG     AIF   (NOT &RCPPGPB(1) OR &RCPPGPB(2)).STO\n         IKJPGPB\n&RCPPGPB(2) SETB 1\nL#PGPB   EQU   *-PGPB         LENGTH OF PGPB\n&SYSECT  CSECT\n.STO     SPACE 3\n&L       SETC  ''\n         RCPDS\n         AIF   (NOT &RCPSTPB(1)).XPT\n&P.STPB  DS    CL(L#STPB)              RESERVE SPACE FOR STPB\n&L       SETC  '&L.+L#STPB'\n.XPT     AIF   (NOT &RCPPTPB(1)).XGT\n&P.PTPB  DS    CL(L#PTPB)              RESERVE SPACE FOR PTPB\n&L       SETC  '&L.+L#PTPB'\n.XGT     AIF   (NOT &RCPGTPB(1)).XPG\n&P.GTPB  DS    CL(L#GTPB)              RESERVE SPACE FOR GTPB\n&L       SETC  '&L.+L#GTPB'\n.XPG     AIF   (NOT &RCPPGPB(1)).XC\n&P.PGPB  DS    CL(L#PGPB)              RESERVE SPACE FOR PGPB\n&L       SETC  '&L.+L#PGPB'\n.XC      RCPDS\n&L1      SETC  '&L'(2,K'&L-1)\n&L       SETC  '&P'.'&L1'(3,4)\n         XC    &L.(&L1.),&L            CLEAR IOPB AREA\n         MEND\n./ ADD NAME=RCPLINK  0100-85112-85112-0830-00053-00053-00000-MAS1\n         MACRO\n&NAME    RCPLINK &MODULE\n         LCLC  &OFFSET,&C\n         AIF   ('&MODULE' EQ '').ERROR\n         AIF   ('&MODULE' NE 'IKJPARS').T1\n&OFFSET  SETC  '524'\n         AGO   .START\n.T1      AIF   ('&MODULE' NE 'IKJDAIR').T2\n&OFFSET  SETC  '732'\n         AGO   .START\n.T2      AIF   ('&MODULE' NE 'IKJEHDEF').T3\n&OFFSET  SETC  '736'\n         AGO   .START\n.T3      AIF   ('&MODULE' NE 'IKJEHCIR').T4\n&OFFSET  SETC  '740'\n         AGO   .START\n.T4      AIF   ('&MODULE' NE 'IKJPUTL').T5\n&OFFSET  SETC  '444'\n         AGO   .START\n.T5      AIF   ('&MODULE' NE 'IKJGETL').T6\n&OFFSET  SETC  '348'\n         AGO   .START\n.T6      AIF   ('&MODULE' NE 'IKJSCAN').T7\n&OFFSET  SETC  '480'\n         AGO   .START\n.T7      AIF   ('&MODULE' NE 'IKJPTGT').T8\n&OFFSET  SETC  '464'\n         AGO   .START\n.T8      AIF   ('&MODULE' NE 'IKJSTCK').T9\n&OFFSET  SETC  '472'\n         AGO   .START\n.T9      ANOP\n&NAME    DS    0H\n*\n MNOTE *,' EP OF &MODULE. NOT IN CVT. STANDARD LINK USED'\n*\n         AGO   .LINK\n.START   ANOP\n&NAME    L     R15,16                  LOAD CVT ADDRESS\n         L     R15,&OFFSET.(R15)       LOAD MODULE ADDRESS\n         LTR   R15,R15                 IS MODULE ADDRESS THERE?\n&C       SETC  'RCP&SYSNDX'\n         BNM   &C.L                     IF NOT, BRANCH TO LINK\n         BALR  R14,R15                  ELSE BALR TO IT\n         B     &C.B                      AND BYPASS LINK\n&C.L     LINK  EP=&MODULE\n&C.B     DS    0H                      BRANCHED TO IF LINK BYPASSED\n         MEXIT\n.LINK    ANOP\n&NAME    LINK  EP=&MODULE\n         MEXIT\n.ERROR   MNOTE 4,'NO MODULE NAME SPECIFIED'\n         MEND\n./ ADD NAME=RCPLOAD  0100-85112-85112-0831-00116-00116-00000-MAS1\n         MACRO\n&NAME    RCPLOAD &MOD,&EP1\n         GBLC  &RCPPTEP,&RCPGTEP,&RCPPGEP\n         GBLC  &RCPDFEP,&RCPSTEP,&RCPPREP\n         GBLC  &RCPPRE\n         LCLA  &I,&J\n         LCLB  &EPXISTS\n         LCLC  &OFFSET,&C,&EP,&MODULE\n&EP      SETC  '&EP1'\n&MODULE  SETC  '&MOD'\n         AIF   ('&MODULE' EQ '').ERROR\n         AIF   ('&MODULE'(K'&MOD,1) NE ')').NOBR\n&I       SETA  K'&MOD\n.LOOP    ANOP\n&I       SETA  &I-1\n         AIF   (&I LT 2).NOLB\n         AIF   ('&MOD'(&I,1) NE '(').LOOP\n&MODULE  SETC  '&MOD'(1,&I-1)\n&J       SETA  K'&MOD-1-&I\n&EP      SETC  '&MOD'(&I+1,&J)\n         RCPDS\n&EP      DS    F                       TO STORE MODULE ADDRESS\n         RCPDS\n.NOBR    ANOP\n&EPXISTS  SETB  ('&EP' NE '')\n         AIF   ('&MODULE' NE 'IKJPARS').T1\n&OFFSET  SETC  '524'\n&RCPPREP SETC '&EP'\n         AIF   (&EPXISTS).START\n         RCPDS\n&RCPPREP SETC '&RCPPRE.PREP'\n&EP      SETC  '&RCPPREP'\n&RCPPREP DS    F                       TO HOLD ADDRESS OF IKJPARS\n         RCPDS\n         AGO   .START\n.T1      AIF   ('&MODULE' NE 'IKJDAIR').T2\n&OFFSET  SETC  '732'\n         AGO   .START\n.T2      AIF   ('&MODULE' NE 'IKJEHDEF').T3\n&RCPDFEP SETC  '&EP'\n&OFFSET  SETC  '736'\n         AIF   (&EPXISTS).START\n&RCPDFEP SETC  '&RCPPRE.DFEP'\n         RCPDS\n&RCPDFEP DS    F                       ADDR OF DEFAULT SERVICE ROUTINE\n         RCPDS\n&EP      SETC  '&RCPDFEP'\n         AGO   .START\n.T3      AIF   ('&MODULE' NE 'IKJEHCIR').T4\n&OFFSET  SETC  '740'\n         AGO   .START\n.T4      AIF   ('&MODULE' NE 'IKJPUTL').T5\n&RCPPTEP SETC  '&EP'\n&OFFSET  SETC  '444'\n         AIF   (&EPXISTS).START\n&RCPPTEP SETC  '&RCPPRE.PTEP'\n&EP      SETC  '&RCPPTEP'\n         RCPDS\n&RCPPTEP DS    F                       ADDR OF PUTLINE ROUTINE\n         RCPDS\n         AGO   .START\n.T5      AIF   ('&MODULE' NE 'IKJGETL').T6\n&RCPGTEP SETC  '&EP'\n&OFFSET  SETC  '348'\n         AIF   (&EPXISTS).START\n&RCPGTEP SETC  '&RCPPRE.GTEP'\n&EP      SETC  '&RCPGTEP'\n         RCPDS\n&RCPGTEP DS    F                       ADDR OF GETLINE ROUTINE\n         RCPDS\n         AGO   .START\n.T6      AIF   ('&MODULE' NE 'IKJSCAN').T7\n&OFFSET  SETC  '480'\n         AGO   .START\n.T7      AIF   ('&MODULE' NE 'IKJPTGT').T8\n&RCPPGEP SETC  '&EP'\n&OFFSET  SETC  '464'\n         AIF   (&EPXISTS).START\n&RCPPGEP SETC  '&RCPPRE.PGEP'\n&EP      SETC  '&RCPPGEP'\n         RCPDS\n&RCPPGEP DS    F                       ADDR OF PUTGET ROUTINE\n         RCPDS\n         AGO   .START\n.T8      AIF   ('&MODULE' NE 'IKJSTCK').T9\n&RCPSTEP SETC  '&EP'\n&OFFSET  SETC  '472'\n         AIF   (&EPXISTS).START\n&RCPSTEP SETC  '&RCPPRE.STEP'\n&EP      SETC  '&RCPSTEP'\n         RCPDS\n&RCPSTEP DS    F                       ADDR OF STACK ROUTINE\n         RCPDS\n         AGO   .START\n.T9      ANOP\n&NAME    DS    0H\n*\n MNOTE *,' EP OF &MODULE. NOT IN CVT. STANDARD LOAD USED'\n*\n         AGO   .LOAD\n.START   ANOP\n&NAME    L     R15,16                  LOAD CVT ADDRESS\n         L     R0,&OFFSET.(R15)        LOAD MODULE ADDRESS\n         LTR   R0,R0                   IS MODULE LOADED?\n&C       SETC  'RCP&SYSNDX'\n         BM    &C                      IF SO, BYPASS LOAD MACRO\n.LOAD    LOAD EP=&MODULE.\n         AIF   ('&EP' EQ '').EPERR\n&C       ST    R0,&EP                  STORE ENTRY POINT ADDRESS\n         MEXIT\n.EPERR   MNOTE 4,'EP RETURN FIELD NOT SPECIFIED'\n         MEXIT\n.ERROR   MNOTE 4,'NO MODULE NAME SPECIFIED'\n         MEXIT\n.NOLB    MNOTE 4,'INVALID MODULE NAME ''&MOD'''\n         MEND\n./ ADD NAME=RCPLOCSW 0100-85112-85112-0832-00091-00091-00000-MAS1\n*23456789*12345*78921234567893123456789*\n         MACRO\n         RCPLOCSW &SW\n.********************************************************************\n.*                                                                  *\n.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *\n.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *\n.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *\n.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *\n.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *\n.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *\n.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *\n.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *\n.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *\n.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *\n.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *\n.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*\n.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *\n.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *\n.*       BIT IN THE LIST.                                           *\n.*                                                                  *\n.********************************************************************\n         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES\n         GBLA  &RCPDSW0                NO OF SWS FOUND BY RCPLOCSW\n         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS\n         GBLB  &RCPDSW3(20)   INVERT INDICATOR\n         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES\n         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES\n         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES\n         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES\n         GBLC  &RCPDSW1(20)            SWITCH BYTE NAMES\n         GBLC  &RCPDSW2(20)            SWITCH BIT NAME(S)\n         LCLA  &I,&J,&K,&L,&M,&N\n         LCLB  &NOT\n         LCLC  &C,&SW1,&SW2\n&RCPDSW0 SETA  0                       INITIALIZE\n&N       SETA  N'&SW                   NO OF SWITCHES ENTERED\n&J       SETA  &RCPDSW#*8+8            INDEX TO LAST DECLARED SW BIT\n.LOOP1   AIF   (&M GE &N).EXIT        LOOP FOR EACH SW\n&M       SETA  &M+1\n&SW2     SETC  '&SW(&M)'               SWITCH TO SEARCH FOR\n         AIF   ('&SW2' EQ '').LOOP1    SKIP IF NULL\n&I       SETA  8                       INDEX TO FIRST DECLARED SW - 1\n&NOT     SETB  0\n         AIF   ('&SW2'(1,1) NE '\u00ac' AND '&SW2'(1,1) NE '-').TNOT2\n&SW2     SETC  '&SW2'(2,K'&SW2-1)       REMOVE NOT SIGN\n&NOT     SETB  1                       INDICATE INVERT FUNCTION\n         AGO   .LOOP1A                 CONTINUE\n.TNOT2   AIF   (K'&SW2 LT 5).LOOP1A    CHECK LENGTH\n         AIF   ('&SW2'(1,4) NE 'NOT-').LOOP1A  WAS SWITCH INVERTED?\n&SW2     SETC  '&SW2'(5,K'&SW2-4)      STRIP OFF 'NOT-'\n&NOT     SETB  1                       INDICATE INVERTED\n.LOOP1A  AIF   (&I GE &J).TGEN         SEARCH NAME ARRAY\n&I       SETA  &I+1\n         AIF   ('&RCPDSWB(&I)' NE '&SW2').LOOP1A\n.*\n.*   WE FOUND IT\n.*\n&L       SETA  (&I-1)/8                INDEX TO BYTE NAME\n&SW1     SETC  '&RCPDSWN(&L)'          GET BYTE NAME\n.FOUNDSW ANOP                          HAVE WE HAD IT BEFORE?\n&K       SETA  0\n.SWL1    AIF   (&K GE &RCPDSW0).NEWSW1\n&K       SETA  &K+1\n         AIF   ('&RCPDSW1(&K)' NE '&SW1').SWL1\n         AIF   (&RCPDSW3(&K) NE &NOT).SWL1  ENSURE INVERT BIT THE SAME\n.*\n.* WE FOUND IT\n.*\n&RCPDSW2(&K) SETC '&RCPDSW2(&K)+&SW2'  CONCATENATE CURRENT SW\n         AGO   .LOOP1                  GO DO NEXT\n.NEWSW1  ANOP\n&RCPDSW0 SETA  &K+1                    NEXT SW BYTE INDEX\n&RCPDSW1(&RCPDSW0) SETC '&SW1'         BYTE NAME\n&RCPDSW2(&RCPDSW0) SETC '&SW2'         BIT NAME\n&RCPDSW3(&RCPDSW0) SETB (&NOT)         SET INVERT INDICATOR\n         AGO   .LOOP1                  GO DO NEXT\n.TGEN    ANOP  SEARCH GENERIC NAME ARRAY\n&I       SETA  0\n&L       SETA  K'&SW2\n.LOOP2   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &RCPGSW#).NOTFND\n&C       SETC  '&RCPGSWB(&I)'\n         AIF   (&L LT K'&C).LOOP2\n         AIF   ('&SW2'(1,K'&C) NE '&C').LOOP2\n&SW1     SETC  '&RCPGSWN(&I)'\n         AGO   .FOUNDSW                EUREKA\n.NOTFND  MNOTE 4,'SWITCH ''&SW2'' NOT DECLARED'\n         AGO   .LOOP1\n.EXIT    MEND\n./ ADD NAME=RCPLOCS1 0100-85112-85112-0832-00077-00077-00000-MAS1\n*23456789*12345*78921234567893123456789*\n         MACRO\n         RCPLOCSW &SW\n.********************************************************************\n.*                                                                  *\n.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *\n.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *\n.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *\n.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *\n.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *\n.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *\n.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *\n.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *\n.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *\n.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *\n.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *\n.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*\n.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *\n.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *\n.*       BIT IN THE LIST.                                           *\n.*                                                                  *\n.********************************************************************\n         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES\n         GBLA  &RCPDSW0                NO OF SWS FOUND BY RCPLOCSW\n         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS\n         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES\n         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES\n         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES\n         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES\n         GBLC  &RCPDSW1(20)            SWITCH BYTE NAMES\n         GBLC  &RCPDSW2(20)            SWITCH BIT NAME(S)\n         LCLA  &I,&J,&K,&L,&M,&N       LOCAL COUNTERS\n         LCLC  &C,&SW1,&SW2\n&RCPDSW0 SETA  0                       INITIALIZE\n&N       SETA  N'&SW                   NO OF SWITCHES ENTERED\n&J       SETA  &RCPDSW#*8              INDEX TO LAST DECLARED SW BIT\n.LOOP1   AIF   (&M GE &N).EXIT        LOOP FOR EACH SW\n&M       SETA  &M+1\n&SW2     SETC  '&SW(&M)'               SWITCH TO SEARCH FOR\n         AIF   ('&SW2' EQ '').LOOP1    SKIP IF NULL\n&I       SETA  8                       INDEX TO FIRST DECLARED SW - 1\n.LOOP1A  AIF   (&I GE &J).TGEN         SEARCH NAME ARRAY\n&I       SETA  &I+1\n         AIF   ('&RCPDSWB(&I)' NE '&SW2').LOOP1A\n.*\n.*   WE FOUND IT\n.*\n&L       SETA  (&I-1)/8                INDEX TO BYTE NAME\n&SW1     SETC  '&RCPDSWN(&L)'          GET BYTE NAME\n.FOUNDSW ANOP                          HAVE WE HAD IT BEFORE?\n&K       SETA  0\n.SWL1    AIF   (&K GE &RCPDSW0).NEWSW1\n&K       SETA  &K+1\n         AIF   ('&RCPDSW1(&K)' NE '&SW1').SWL1\n.*\n.* WE FOUND IT\n.*\n&RCPDSW2(&K) SETC '&RCPDSW2(&K)+&SW2'  CONCATENATE CURRENT SW\n         AGO   .LOOP1                  GO DO NEXT\n.NENSW1  ANOP\n&RCPDSW0 SETA  &K+1                    NEXT SW BYTE INDEX\n&RCPDSW1(&RCPDSW0) SETC '&SW1'         BYTE NAME\n&RCPDSW2(&RCPDSW0) SETC '&SW2'         BIT NAME\n         AGO   .LOOP1                  GO DO NEXT\n.TGEN    ANOP  SEARCH GENERIC NAME ARRAY\n&I       SETA  0\n&L       SETA  K'&SW2\n.LOOP2   ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &RCPGSW#).NOTFND\n&SW1     SETC  '&RCPGSWN(&I)'\n         AIF   (&L LT K'&SW1).LOOP2\n         AIF   ('&SW1'(1,&L) NE '&SW2').LOOP2\n         AGO   .FOUNDSW                EUREKA\n.NOTFND  MNOTE 4,'SWITCH ''&SW2'' NOT DECLARED'\n         AGO   .LOOP1\n.EXIT    MEND\n./ ADD NAME=RCPLOCS2 0100-85112-85112-0833-00095-00095-00000-MAS1\n*23456789*12345*78921234567893123456789*\n         MACRO\n         RCPLOCSW &SW\n.********************************************************************\n.*                                                                  *\n.*       INNER MACRO USED BY GOIF, SET, RESET AND FLIP.             *\n.*       THE PARM PASSED IS THE SWITCH OR LIST OF SWITCHES.         *\n.*       RCPLOCSW SCANS THE ARRAYS SET UP BY DCLSW TO SEE IF THE    *\n.*       SWITCH BIT NAMES WERE DECLARED, AND IF A LIST WAS PASSED,  *\n.*       WHETHER ALL THE SWITCH BITS BELONG TO THE SAME BYTE.       *\n.*       RCPLOCSW PASSES BACH THE SWITCH BYTE NAME IN GLOBAL SETC   *\n.*       VARIABLE &RCPDSW1 AND THE SWITCH BIT NAME IN GLOBAL SETC   *\n.*       &RCPDSW2. IF A LIST OF SWITCHES WAS PASSED, &RCPDSW2       *\n.*       CONTAINS THE SWITCH NAMES SEPARATED BY PLUS SIGNS.         *\n.*       IF THE FIRST OR ONLY SWITCH WAS NOT FOUND, &RCPDSW1 IS SET *\n.*       TO NULL. IF A LIST OF SWITCHES IS PASSED AND ANY SWITCH IS *\n.*       NOT DECLARED IN THE SAME SWITCH BYTE AS THE FIRST, AN MNOTE*\n.*       IS ISSUED WARNING OF POSSIBLE ERROR, BUT &RCPDSW1 IS SET   *\n.*       TO THE NAME OF THE SWITCH BYTE CONTAINING THE FIRST SWITCH *\n.*       BIT IN THE LIST.                                           *\n.*                                                                  *\n.********************************************************************\n         GBLA  &RCPDSW#,&RCPGSW#       COUNTER FOR DECLARED SWITCHES\n         GBLB  &RCPDSWD(99)            DEFER DECLARE INDICATORS\n         GBLC  &RCPDSWN(99)            SWITCH BYTE NAMES\n         GBLC  &RCPDSWB(800)           SWITCH BIT NAMES\n         GBLC  &RCPGSWN(99)            GENERIC SWITCH BYTE NAMES\n         GBLC  &RCPGSWB(99)            GENERIC SWITCH BIT PREFIXES\n         GBLC  &RCPDSW1                SWITCH BYTE NAME\n         GBLC  &RCPDSW2                SWITCH BIT NAME(S)\n         LCLA  &I,&J,&K,&L,&M,&N       LOCAL COUNTERS\n         LCLC  &C\n&RCPDSW2 SETC  '&SW(1)'                EXTRACT 1ST SWITCH BIT\n&J       SETA  &RCPDSW#*8+8            ARRAY POS OF LAST SW BIT\n&I       SETA  8                       ARRAY POS-1 OF 1ST SW BIT\n.LOOP1   AIF   (&I GE &J).TGEN         IF SW NOT FOUND IN 1ST ARRAY,\n.*                                      GO SEARCH GENERIC NAME ARRAY\n&I       SETA  &I+1\n         AIF   ('&RCPDSWB(&I)' NE '&RCPDSW2').LOOP1  LOOK FOR MATCH\n.*\n.*       OK, WE'VE FOUND A MATCH.\n.*\n&I       SETA  (&I-1)/8               GET POS OF SWITCH BYTE\n&RCPDSW1 SETC  '&RCPDSWN(&I)'         MOVE IT TO EXIT PARM VAR\n&I       SETA  &I*8+1                 POINT TO 1ST SW BIT IN IT\n&J       SETA  &I+8                   POINT TO LAST SW BIT IN IT\n&M       SETA  N'&SW                  GET NO OF SWITCHES\n&L       SETA  1\n.*\n.*       NOW WE PROCESS SUBSEQUENT SWITCHES IN THE LIST\n.*\n.LOOP2   AIF   (&L GE &M).EXIT        EXIT WHEN FINISHED\n&L       SETA  &L+1                   POINT TO NEXT SW IN LIST\n&C       SETC  '&SW(&L)'               EXTRACT IT\n&RCPDSW2 SETC  '&RCPDSW2.+&C'           THEN APPEND TO PREVIOUS\n.*\n.*       NOW WE CHECK THAT THE SWITCH IS DECLARED IN THE SAME\n.*       BYTE AS THE FIRST.\n.*\n&N       SETA  &I-1                     POINT TO 1ST BIT POS MINUS 1\n.LOOP3   AIF   (&N GE &J).NM            IF SW NOT FOUND, ISSUE MNOTE\n&N       SETA  &N+1                     POINT TO NEXT\n         AIF   ('&C' NE '&RCPDSWB(&N)').LOOP3  SEARCH FOR MATCH\n         AGO   .LOOP2                   IF FOUND, GO PROCESS NEXT\n.NM      MNOTE 4,'WARNING: SWITCH ''&C'' NOT DECLARED IN SAME BYTE AS  X\n               SWITCH ''&SW(1)'' - LOGIC ERROR MAY OCCUR'\n         AGO   .LOOP2            CONTINUE FOR NEXT SWITCH BIT\n.*\n.*       IF THE SWITCH WAS NOT LOCATED IN THE EXPLICIT NAME ARRAY,\n.*       THE GENERIC NAME ARRAY IS SEARCHED.\n.*\n.TGEN    ANOP\n&I       SETA  0\n&RCPDSW2 SETC  '&SW(1)'                EXTRACT 1ST SWITCH\n&L       SETA  K'&RCPDSW2              GET LENGTH OF 1ST SW\n.LOOP4   AIF   (&I GE &RCPGSW#).ERROR  IF NOT SW NOT DECLARED, ERROR\n&I       SETA  &I+1\n&C       SETC  '&RCPGSWB(&I)'          GET GENERIC PREFIX\n&K       SETA  K'&C                    GET LENGTH OF GENERIC PREFIX\n         AIF   (&L LT &K).LOOP4         AND SKIP IF LEN OF SWITCH NAME\n.*                                          < LEN OF GENERIC PREFIX\n         AIF   ('&RCPDSW2'(1,&K) NE '&C').LOOP4  ALSO SKIP IF NO MATCH\n&RCPDSW1 SETC  '&RCPGSWN(&I)'          SAVE SWITCH BYTE NAME\n&I       SETA   1\n&J       SETA   N'&SW\n.LOOP5   AIF   (&I GE &J).EXIT         EXIT WHEN FINISHED\n&I       SETA   &I+1\n&RCPDSW2 SETC   '&RCPDSW2.+&SW(&I)'     APPEND THIS SWITCH\n         AIF    ('&SW(&I)    '(1,&K) EQ '&C').LOOP5 CHECK PREFIX\n         MNOTE 4,'WARNING: SWITCH ''&SW(&I)'' NOT GENERICALLY EQUAL TO X\n               SWITCH ''&SW(1)'''\n         AGO   .LOOP5\n.ERROR   MNOTE 8,'SWITCH ''&SW(1)'' NOT DECLARED'\n&RCPDSW1 SETC  ''             INDICATE ERROR\n.EXIT    MEND\n./ ADD NAME=RCPMCA   0100-85112-85112-0833-00023-00023-00000-MAS1\n         MACRO\n         RCPMCA &DSECT=YES\n         GBLC  &RCPPRE\n         GBLA  &RCPSWS(10)\n         LCLC  &P\n     RCPDEBUG\n&P       SETC  '&RCPPRE'\n         AIF   (&RCPSWS(2) NE 2).DSECT\n&P.MCA   DS    0F                      MODULE COMMUNICATIONS AREA\n         AGO   .MCA2\n.DSECT   ANOP\n&P.MCA   DSECT                         MODULE COMMUNICATIONS AREA\n.MCA2    ANOP\n&P.XDS   DS    F                       ADDR OF EXTERNAL DUMMY SECTION\n         AIF   (&RCPSWS(3) LT 1).EXIT\n&P.A#GET DS    F                       ADDRESS OF LIFO GET ROUTINE\n&P.A#FRE DS    F                       ADDRESS OF LIFO FREE ROUTINE\n&P.#S    DS    F                       ADDRESS OF CURRENT LIFO STACK\n&P.#E    DS    F                       ADDRESS OF END OF LIFO STACK\n&P.#N    DS    F                       ADDRESS OF NEXT FREE AREA\n&P.#C    DS    F                       ADDRESS OF NEXT LIFO STACK\n&P.#L    DS    F                       LENGTH OF CURRENT LIFO STACK\n.EXIT    MEND\n./ ADD NAME=RCPNTU   0100-85112-85112-0834-00047-00047-00000-MAS1\n         MACRO\n         RCPNTU &KEY,&LEN,&PAR\n.*\n.*     THIS IS AN ALLOC/FREE MACRO TEXT UNIT PROCESSOR SUBROUTINE\n.*     MACRO. IT BUILDS NUMERIC TYPE TEXT UNITS.\n.*\n         LCLA  &L,&R\n         LCLC  &C\n         GBLC  &RCPTYPE\n.*  ALLOC/FREE INNER MACRO TO SET UP NUMERIC TEXT UNITS\n&L       SETA  1                       DEFAULT LENGTH\n         AIF   ('&LEN' EQ '').NL\n&L       SETA  &LEN\n.NL      MVI   S99TUKEY+1,&KEY         SET KEY FIELD\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,&L           SET LENGTH FIELD\n         AIF   ('&PAR'(1,1) EQ '(').REG\n         RCPTYPE &PAR                  ANALYSE PARAMETER\n         AIF   ('&RCPTYPE' EQ 'N').NUMERIC\n&R       SETA  4-&L\n         MVC   S99TUPAR(&L),&R+&PAR    MOVE IN QUANTITY\n         RCPDINC 10\n         MEXIT\n.NUMERIC AIF   (&L EQ 1).NL1\n         MVC   S99TUPAR(&L.),=AL&L.(&PAR) MOVE IN QUANTITY\n&R       SETA  &L+6\n         AIF   (&R/2 EQ (&R+1)/2).LOK ENSURE LENGTH EVEN\n&R       SETA  &R+1\n.LOK     RCPDINC &R\n         MEXIT\n.NL1     MVI   S99TUPAR,&PAR           MOVE IN QUANTITY\n         RCPDINC 8\n         MEXIT\n.REG     ANOP\n&C       SETC  '&PAR'(2,K'&PAR-2)\n         AIF   (&L EQ 3).STCM\n         AIF   (&L EQ 2).STH\n         AIF   (&L EQ 1).STC\n         ST    &C,S99TUPAR             STORE TEXT UNIT QUANTITY\n         AGO   .RCPDINC\n.STH     STH   &C,S99TUPAR             STORE TEXT UNIT QUANTITY\n         AGO   .RCPDINC\n.STC     STC   &C,S99TUPAR             STORE TEXT UNIT QUANTITY\n         AGO   .RCPDINC\n.STCM    STCM  &C,7,S99TUPAR           STORE TEXT UNIT QUANTITY\n.RCPDINC RCPDINC 10\n         MEND\n./ ADD NAME=RCPPERM  0100-85112-85112-0834-00009-00009-00000-MAS1\n         MACRO\n         RCPPERM\n         SPACE\n***********************************************************************\n**     PERMANENTLY ALLOCATED ATTRIBUTE TEXT UNIT                     **\n***********************************************************************\n         MVI   S99TUKEY+1,DALPERMA     SET TEXT UNIT KEY\n         RCPDINC  4\n         MEND\n./ ADD NAME=RCPPPL   0100-85112-85112-0835-00092-00092-00000-MAS1\n         MACRO\n&NAME    RCPPPL &PCL=,&NOPARM=,&PARSERR=,&PDLREG=R11,                  X\n               &PDLNAME=,&PARSEP=,&PARSWKA=\n         GBLB  &RCPPPL(2),&RCPECT(2)\n         GBLC  &RCPPRE,&RCPPREP\n         LCLC  &P\n&P       SETC  '&RCPPRE'\n         AIF   (&RCPPPL(2)).BPPL\n         EJECT\n         IKJPPL\nL#PPL    EQU   *-PPL                   LENGTH OF PPL\n&SYSECT  CSECT\n         SPACE 1\n&RCPPPL(2) SETB 1\n.BPPL    RCPDS\n&P.PPL   DS    CL(L#PPL)               RESERVE SPACE FOR PPL\n&P.PDLP  DS    F                       POINTER TO PDL\n         RCPDS\n         SPACE 6\n***********************************************************************\n***   THIS CODE GENERATES A PARSE PARAMETER LIST                    ***\n***********************************************************************\n         XC    &P.PDLP,&P.PDLP         ZERO PDL POINTER\n         AIF   ('&NOPARM(1)' EQ '' OR '&NOPARM(2)' NE '').PB2\n         L     R1,CPPLECT              LOAD ECT ADDRESS\n&RCPECT(1) SETB 1\n         USING ECT,R1                  ECT ADDRESSABLE\n         TM    ECTSWS,ECTNOPD          WERE ANY OPERANDS SUPPLIED?\n         BO    &NOPARM(1)              NO, BRANCH OUT\n         SPACE\n.PB2     LA    R1,&P.PPL               LOAD PPL ADDRESS\n         USING PPL,R1\n         MVC   PPLUPT,CPPLUPT          MOVE IN UPT ADDRESS\n         MVC   PPLECT,CPPLECT          MOVE IN ECT ADDRESS\n         MVC   PPLCBUF,CPPLCBUF        MOVE IN CBUF ADDRESS\n         LA    R15,&P.ECB              LOAD ATTN ECB ADDRESS\n         ST    R15,PPLECB              AND STORE IN PPL\n         LA    R15,&P.PDLP             LOAD PDL POINTER ADDRESS\n         ST    R15,PPLANS               AND STORE IN PPL\n         AIF   ('&PARSWKA' EQ '').PB3\n         AIF   ('&PARSWKA'(1,1) EQ '').PB4\n         LA    R15,&PARSWKA            LOAD ADDRESS OF WORK AREA\n         ST    R15,PPLUWA               AND STORE IN PPL\n         AGO   .PB3\n.PB4     ST    &PARSWKA(1),PPLUWA      STORE ADDRESS OF WORKAREA\n.PB3     AIF   ('&PCL' EQ '').EXIT\n         L     R15,=V(&PCL)            LOAD PCL ADDRESS\n         ST    R15,PPLPCL              AND STORE IN PPL\n         SPACE 2\n         AIF   ('&NOPARM(1)' EQ '' OR '&NOPARM(2)' EQ '').PB5\n         L     R1,CPPLECT              LOAD ECT ADDRESS\n&RCPECT(1) SETB 1\n         USING ECT,R1\n         TM    ECTSWS,ECTNOPD          WERE ANY OPERANDS SUPPLIED?\n         BO    &NOPARM(1)               NO, BRANCH OUT\n         SPACE\n.PB5     AIF   ('&SYSPARM' EQ 'MVT').MVTBYP\n         AIF   ('&RCPPREP' EQ '').NOPREP\n         L     R15,&RCPPREP            LOAD EP OF IKJPARS\n         BALR  R14,R15                  AND ENTER IT\n         AGO   .PRET\n.NOPREP  ANOP\n         L     R15,16                  LOAD CVT ADDRESS\n         TM    524(R15),X'80'          IS IKJPARS LOADED?\n         AIF   ('&PARSEP' EQ '').PBL1\n         BZ    &P.LOAD                  NO, BRANCH TO LOAD SVC\n         L     R15,524(15)             LOAD EP OF IKJPARS\n         ST    R15,&PARSEP             SAVE ITS ADDRESS\n         BALR  R14,R15                 THEN BALR TO IT\n         B     &P.PLNKB                BYPASS LOAD SVC\n&P.LOAD  LOAD  EP=IKJPARS\n         LR    R15,R0                  LOAD EP OF IKJPARS\n         ST    R15,&PARSEP             SAVE IT\n         BALR  R14,R15                 THEN BALR TO IT\n&P.PLNKB DS    0H\n         AGO   .PRET\n.PBL1    BZ    &P.PLINK                 NO, BRANCH TO LINK SVC\n         L     R15,524(R15)            ELSE LOAD ITS ADDRESS\n         BALR  R14,R15                  AND BALR TO IT\n         B     &P.PLNKB                BYPASS LINK SVC\n.MVTBYP  ANOP\n&P.PLINK LINK  EP=IKJPARS\n&P.PLNKB DS    0H\n.PRET    AIF   ('&PARSERR' EQ '').EXIT\n         SPACE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   &PARSERR                 AND BRANCH ON NON-ZERO\n         SPACE\n         AIF   ('&PDLREG' EQ '' OR '&PDLNAME' EQ '').EXIT\n         L     &PDLREG,&P.PDLP         LOAD PDL ADDRESS\n         USING &PDLNAME,&PDLREG        PDL DSECT ADDRESSABLE\n.EXIT    MEND\n./ ADD NAME=RCPPROC  0100-85112-85112-0835-00157-00157-00000-MAS1\n         MACRO\n         RCPPROC &WKCSECT=,&WKDSECT=,                                  X\n               &REG1=,&REG0=,&ISA=,&SAVEPRE=,                          X\n               &SAVESUF=,&SP=\n         GBLA  &RCPSWS(10)\n         GBLC  &RCPPRE,&RCPWKCS,&RCPWKDS\n         GBLC  &RCPSPN\n         LCLC  &P,&C\n         RCPDEBUG\n&P       SETC  '&RCPPRE'\n         AIF   ('&WKCSECT' EQ '').TDS\n         SPACE\n         MNOTE 4,'WKCSECT= OPTION INVALID WITH PROC OPTION, '\n         MNOTE *,'    WKDSECT=  USED INSTEAD'\n&RCPWKDS SETC  '&WKCSECT'\n         AGO   .SETCS\n.TDS     AIF   ('&WKDSECT' EQ '').SYSECT\n&RCPWKDS SETC  '&WKDSECT'\n         AGO   .SETCS\n.SYSECT  ANOP\n&RCPWKDS SETC  '&SYSECT'\n.SET1    AIF   (K'&RCPWKDS LT 8).LOK\n&RCPWKDS SETC  '&RCPWKDS'(1,4)'&RCPWKDS'(6,3)'1'\n         AGO   .SETCS\n.LOK     ANOP\n&RCPWKDS SETC  '&RCPWKDS.1'\n.SETCS   ANOP\n&RCPWKCS SETC  ''\n&RCPSWS(4) SETA &RCPSWS(2)-1 SET W/A TO BE FREED OPT IF PROC(MAIN)\n         AIF   ('&ISA' EQ '').NISA\n&RCPSWS(3) SETA 1                      SET LIFO FLAG IF ISA SPEC\n.NISA    ANOP\n         SPACE 2\n         RCPDS\n         DS    9D                      SAVE AREA\n&P.RCODE DS    F                       RETURN CODE\n         RCPMCA\n         RCPDS\n         SPACE 2\n         AIF   ('&REG1' EQ '').TR0\n         LR    &REG1,R1                SAVE CONTENTS OF REG 1\n.TR0     AIF   ('&REG0' EQ '').TP\n         LR    &REG0,R0                SAVE CONTENTS OF REG 0\n.TP      AIF   (&RCPSWS(2) EQ 2).PROCMN   PROCMAIN OPTION\n         AIF   (&RCPSWS(3) EQ 1).PL    LIFO OPTION\n         L     R15,0(R13)              R15 -> MODULE COMMUNIC. AREA\n         L     R15,&P.XDS-&P.MCA(R15)  LOAD EXTERNAL DUMMY SECT ADDR\n         AL    R15,&P.QCON             GET OFFSET TO WORK AREA\n         ST    R15,8(R13)              CHAIN SAVE\n         ST    R13,4(R15)               AREAS TOGETHER\n         MVC   0(4,R15),0(R13)         COPY POINTER TO COMM AREA\n         LR    R13,R15                 LOAD WORK AREA ADDRESS\n         USING &RCPWKDS,R13              ESTABLISH ADDRESSABLITY TO IT\n         MEXIT\n.PL      ANOP\n***********************************************************************\n*        GET WORKAREA FROM LIFO STACK                                 *\n***********************************************************************\n         #GET  LV=&P.WKLEN\n         ST    R1,8(R13)               CHAIN SAVE\n         ST    R13,4(R1)                AREAS TOGETHER\n         MVC   0(4,R1),0(R13)          PROPAGATE MODULE COMM. AREA ADDR\n         LR    R13,R1                  LOAD WORK AREA ADDRESS\n         USING &RCPWKDS,R13             ESTABLISH ADDRESSABILITY TO IT\n         MEXIT\n.PROCMN  L     R0,&P.CXD               LOAD WORK AREA LENGTH\n         AIF   ('&SYSPARM' EQ 'MVT').MVT\n MNOTE *,'      GETMAIN RU,LV=(0),SP=&SP,BNDRY=PAGE'\n         GETMAIN RU,LV=(0),SP=&SP,BNDRY=PAGE\n         AGO   .CONT\n.MVT     AIF   ('&SP' EQ '').NOSP\n         ICM   R0,8,=AL1(&SP)          INSERT SUBPOOL NUMBER\n.NOSP    ANOP\n*        GETMAIN R,LV=(0)              OBTAIN A WORK AREA\n.CONT    ANOP\n&RCPSPN  SETC  '&SP'\n         LR    R15,R13                 SAVE CALLER'S SAVE AREA ADDR\n         LR    R13,R1                  LOAD EXT DUMMY SECTION ADDR\n         AL    R13,&P.QCON              ADD OFFSET TO WORK AREA\n         ST    R13,8(R15)              CHAIN SAVE\n         ST    R15,4(R13)               AREAS TOGETHER\n         USING &RCPWKDS,R13            GET WORKAREA ADDRESSABILITY\n         ST    R1,&P.XDS               STORE DUMMY SECTION ADDR IN     X\n                                         MODULE COMMUNICATIONS AREA\n         LA    R15,&P.MCA              STORE COMMUNICATIONS AREA ADDR\n         ST    R15,0(R13)               IN WORD 1 OF SAVE AREA\n         AIF   (&RCPSWS(3) EQ 0 AND '&ISA' EQ '').EXIT\n&RCPSWS(3) SETA 1                      SET LIFO IN CASE ONLY ISA SPEC\n&C       SETC  '&ISA'\n         AIF   ('&ISA' NE '').TK\n&C       SETC  '8192'\n         AGO   .NK\n.TK      AIF   ('&C'(K'&C,1) NE 'K').NK\n&C       SETC  '&C'(1,K'&C-1)'*1024'\n.NK      EJECT\n***********************************************************************\n**       INITIALIZE MODULE COMMUNICATIONS AREA WITH POINTERS         **\n**       TO LIFO STACK AND LIFO GET/FREE ROUTINES                    **\n***********************************************************************\n         SPACE 1\n         MVC   &P.A#GET,=V(#####GET)   MOVE LIFO GET AND FREE\n         MVC   &P.A#FRE,=V(####FREE)    ROUTINE ADDRESSES TO MCA\n         L     R15,=Q(#####ISA)        COMPUTE LIFO STACK\n         AL    R15,&P.XDS               PSEUDO REGISTER OFFSET\n         ST    R15,&P.#S                 AND INITIALIZE POINTERS\n         ST    R15,&P.#N                  IN MODULE COMMUNICATIONS AREA\n         L     R14,=A(&C)              LOAD SIZE OF INITIAL STACK AREA\n         ST    R14,&P.#L               STORE THIS IN MCA\n         ALR   R15,R14                  THEN COMPUTE STACK END ADDRESS\n         ST    R15,&P.#E                 AND STORE THIS INTO MCA\n         EJECT\n***********************************************************************\n**       LIFO STACK GET/FREE ROUTINES                                **\n***********************************************************************\n         SPACE 1\n#####ISA DXD   CL(&C)                  DEFINE PSEUDO REGISTER FOR ISA\n         SPACE 1\n#####GET CSECT                         LIFO GET ROUTINE\n         USING *,R15\n         USING &P.MCA,R1\n         A     R0,&P.F7                ROUND LENGTH UP TO\n         N     R0,&P.F8                 A MULTIPLE OF 8\n         AL    R0,&P.#N                COMPUTE NEXT FREE LIFO SLOT ADDR\n         CL    R0,&P.#E                COMPARE TO STACK END ADDRESS\n         BH    &P.GA                    AND IF TOO BIG, BRANCH\n         LR    R15,R1                  PRESERVE MCA ADDRESS\n         USING &P.MCA,R15              NEW BASE\n         L     R1,&P.#N                LOAD ADDRESS OF SLOT\n         ST    R0,&P.#N                 AND STORE ADDRESS OF NEXT SLOT\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\n&P.GA    EQU   *                       IF CURRENT SLOT TOO SMALL\n*        ABEND 1000,DUMP                ABEND FOR NOW\n         ABEND 1000,DUMP\n         SPACE 2\n####FREE DS    0H                      LIFO FREE ROUTINE\n         ENTRY ####FREE\n         USING *,R15                   BASE ADDRESS\n         USING &P.MCA,R1               MCA ADDRESS\n         CL    R0,&P.#S                CHECK THAT\n         BL    &P.FA                    ADDRESS TO BE\n         CL    R0,&P.#E                  FREED IS WITHIN\n         BH    &P.FA                      BOUND OF CURRENT STACK\n         AL    R0,&P.F7                GET UPPER DOUBLE\n         N     R0,&P.F8                 WORD BOUNDARY\n         ST    R0,&P.#N                  AND UPDATE MCA\n         BR    R14                     RETURN TO CALLER\n         SPACE 1\n&P.FA    EQU   *                       IF ADDRESS NOT WITHIN THIS STACK\n*        ABEND 1001,DUMP               ABEND\n         ABEND 1001,DUMP\n         SPACE 2\n&P.F7    DC    F'7'                    CONSTANTS\n&P.F8    DC    F'-8'                    TO ROUND UP TO DOUBLEWORD SIZE\n         DROP  R1,R15                  KILL ADDRESSABILITY\n&SYSECT  CSECT                         RESUME MAIN PROGRAM CSECT\n.EXIT    MEND\n./ ADD NAME=RCPPSWD  0100-85112-85112-0836-00009-00009-00000-MAS1\n         MACRO\n         RCPPSWD &PASSW\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**   BUILD THE PASSWORD TEXT UNIT                                    **\n***********************************************************************\n         RCPVCHAR DALPASSW,14,&PASSW\n         MEND\n./ ADD NAME=RCPQNAME 0100-85112-85112-0836-00009-00009-00000-MAS1\n         MACRO\n         RCPQNAME &QNAME\n         GBLC  &DYNP\n         SPACE\n***********************************************************************\n**   BUILD THE QNAME TEXT UNIT                                       **\n***********************************************************************\n         RCPVCHAR DALQNAME,14,&QNAME\n         MEND\n./ ADD NAME=RCPRNGE  0100-85112-85112-0837-00017-00017-00000-MAS1\n         MACRO - BREAK A RANGE PARAMETER INTO TWO\n         RCPRNGE &P\n         GBLC  &RCPRNGE(2)\n         LCLA  &I,&J,&K\n&K       SETA  K'&P\n&RCPRNGE(1) SETC ''\n&RCPRNGE(2) SETC ''\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &K).NR\n         AIF   ('&P'(&I,1) NE '-' AND '&P'(&I,1) NE ':').LOOP\n&RCPRNGE(1) SETC '&P'(1,&I-1)\n&RCPRNGE(2) SETC '&P'(&I+1,&K-&I)\n         MEXIT\n.NR      ANOP\n&RCPRNGE(1) SETC '&P'\n         MEND\n./ ADD NAME=RCPSPACE 0100-85112-85112-0841-00095-00095-00000-MAS1\n         MACRO\n         RCPSPACE &SPACE\n         GBLA  &RCPSUB#                NO OF SUBLIST ELEMENTS\n         GBLC  &RCPSUBL(100)           SUBLIST ELEMENTS\n.**********************************************************************\n.*    THIS IS AN ALLOC INNER MACRO TO BUILD THE ALLOCATION SPACE\n.*    QUANTITY TEXT UNIT. IT SHOULD BE SPECIFIED AS:-\n.*     SPACE=(TYPE,(PRIMARY,SECONDARY,DIRECTORY),RLSE,CONTIG,ROUND)\n.*   WHERE TYPE IS 'TRK', 'CYL', 'ABSTR' OR A BLOCK QUANTITY\n.*     'CYL' OR 'TRK' SHOULD NOT BE ENTERED IN QUOTES. THE BLOCK\n.*     QUANTITY CAN BE A NUMBER, A REGISTER (IN BRACKETS), OR THE\n.*     NAME OF A FULLWORD CONTAINING THE BLOCK SIZE.\n.**********************************************************************\n         AIF   ('&SPACE(1)' EQ '' OR '&SPACE(1)' EQ 'TRK').TRK\n         AIF   ('&SPACE(1)' EQ 'CYL').CYL\n***********************************************************************\n**        SPACE UNIT IN BLOCKS                                       **\n***********************************************************************\n         RCPNTU DALBLKLN,3,&SPACE(1)  GENERATE BLOCK UNIT TU\n         AGO   .TPRIME        GO TEST PRIME QUANTITY\n.TRK     ANOP  TRACK SPEC REQ OR DEFAULTED\n         SPACE\n***********************************************************************\n**       SPACE QUANTITY IN TRACKS                                    **\n***********************************************************************\n         MVI   S99TUKEY+1,DALTRK       SET TEXT UNIT KEY\n         RCPDINC 4\n         AGO   .TPRIME\n.CYL     ANOP  CYL QUANTITY\n         SPACE 1\n***********************************************************************\n**      SPACE UNIT IN CYLINDERS                                      **\n***********************************************************************\n         MVI   S99TUKEY+1,DALCYL       SET TEXT UNIT KEY\n         RCPDINC 4                     STORE TEXT UNIT ADDR\n.TPRIME  RCPSUBL &SPACE(2)             BREAK UP SUBLIST\n         AIF   (&RCPSUB# EQ 0).TCONTIG\n         AIF   ('&RCPSUBL(1)' EQ '').TSP2\n         SPACE\n***********************************************************************\n**       PRIMARY SPACE QUANTITY                                      **\n***********************************************************************\n         RCPNTU DALPRIME,3,&RCPSUBL(1)\n.TSP2    AIF   (&RCPSUB# LT 2).TCONTIG\n         AIF   ('&RCPSUBL(2)' EQ '').TSP3\n         SPACE\n***********************************************************************\n**       SECONDARY SPACE QUANTITY                                    **\n***********************************************************************\n         RCPNTU DALSECND,3,&RCPSUBL(2)\n.TSP3    AIF   (&RCPSUB# LT 3).TCONTIG\n         AIF   ('&RCPSUBL(3)' EQ '').TCONTIG\n         SPACE\n***********************************************************************\n**       DIRECTORY BLOCK QUANTITY                                    **\n***********************************************************************\n         RCPNTU DALDIR,3,&RCPSUBL(3)\n.TCONTIG AIF  ('&SPACE(3)' EQ 'CONTIG' OR '&SPACE(4)' EQ 'CONTIG').CON\n         AIF   ('&SPACE(3)' EQ 'MXIG' OR '&SPACE(4)' EQ 'MXIG').MXIG\n         AIF   ('&SPACE(3)' EQ 'ALX' OR '&SPACE(4)' EQ 'ALX').ALX\n.TRLSE   AIF   ('&SPACE(3)' EQ 'RLSE' OR '&SPACE(4)' EQ 'RLSE').RLSE\n.TROUND  AIF   ('&SPACE(4)'EQ'ROUND'OR'&SPACE(5)'EQ'ROUND').ROUND\n         MEXIT\n.CON     ANOP\n***********************************************************************\n**      CONTIGUOUS SPACE TEXT UNIT                                   **\n***********************************************************************\n         RCPNTU DALSPFRM,1,8\n         AGO   .TRLSE\n.MXIG    ANOP\n***********************************************************************\n**       MAXIMUM CONTIGUOUS SPACE TEXT UNIT                          **\n***********************************************************************\n         RCPNTU DALSPFRM,1,4\n         AGO   .TRLSE\n.ALX     ANOP\n***********************************************************************\n**       'ALX' SPACE TEXT UNIT                                       **\n***********************************************************************\n         RCPNTU DALSPFRM,1,2\n         AGO   .TRLSE\n.RLSE    ANOP\n***********************************************************************\n**      RELEASE UNUSED SPACE TEXT UNIT                               **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRLSE      SET TEXT UNIT KEY\n         RCPDINC 4\n         AGO   .TROUND\n.ROUND   ANOP\n***********************************************************************\n**      RELEASE UNUSED SPACE TEXT UNIT                               **\n***********************************************************************\n         MVI   S99TUKEY+1,DALROUND     MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n         MEND\n./ ADD NAME=RCPSPEC  0100-85112-85112-0841-00013-00013-00000-MAS1\n         MACRO - SET UP USER DEFINED TEXT UNIT\n         RCPSPEC &T\n         LCLA  &I,&J\n&I       SETA  1\n&J       SETA  K'&T\n         SPACE\n***********************************************************************\n**       PROCESS SPECIAL TEXT UNITS                                  **\n***********************************************************************\n.LOOP    RCPVCHAR &T(&I),&T(&I+2),&T(&I+3),N=&T(&I+1)\n&I       SETA  &I+4\n         AIF   (&I LE &J).LOOP\n         MEND\n./ ADD NAME=RCPSR2   0100-85112-85112-0842-00020-00020-00000-MAS1\n         MACRO\n         RCPSR2 &A\n         GBLB  &RCPSR2\n         GBLC  &DYNP\n         LCLC  &C\n.*   TO SAVE REG 2 IN REG 0 FOR ALLOC INNER MACROS FIRST TIME ONLY\n.*    IF OPERAND SUPPLIED AND SAVE DONE, RESTORES REG 2 AND\n.*    GENERATES MOVE INSTRUCTION FOR EXECUTE\n         AIF   ('&A' NE '').UNSAVE\n         AIF   (&RCPSR2).EXIT\n&RCPSR2  SETB  1\n         LR    R0,R2                   SAVE CONTENTS OF REGISTER 2\n         MEXIT\n.UNSAVE  AIF   (NOT &RCPSR2).EXIT\n         B     *+10                    SKIP NEXT INSTRUCTION\n&C       SETC  '&DYNP.MVC'\n&C       MVC   S99TUPAR(0),0(R14)      EXECUTED MOVE\n         LR    R2,R0                   RESTORE CONTENTS OF REGISTER 2\n&RCPSR2  SETB  0\n.EXIT    MEND\n./ ADD NAME=RCPSSREQ 0100-85112-85112-0843-00010-00010-00000-MAS1\n         MACRO\n         RCPSSREQ\n         SPACE 1\n***********************************************************************\n**       SUBSYSTEM REQUEST TEXT UNIT                                 **\n***********************************************************************\n         SPACE 1\n         MVI   S99TUKEY+1,DALSSREQ MOVE IN TEXT UNIT KEY\n         RCPDINC                   4\n         MEND\n./ ADD NAME=RCPSUB   0102-90002-90003-1026-00009-00009-00001-MSCHMTZ\n         MACRO\n         RCPSUB &S\n         GBLC  &DYNP\n         SPACE 1\n***********************************************************************\n**       SUBSYS TEXT UNIT                                            **\n***********************************************************************\n         RCPVCHAR DALSSNM,14,&S\n.EXIT    MEND\n./ ADD NAME=RCPSUBL  0100-85112-85112-0843-00036-00036-00000-MAS1\n         MACRO - BREAK DOWN A SUBLIST\n         RCPSUBL &L\n         GBLA  &RCPSUB#                NO OF ELEMENTS FOUND\n         GBLC  &RCPSUBL(100)           ELEMENTS\n         LCLA  &I,&J,&K\n&RCPSUB# SETA  0                       INITIALIZE\n         AIF   ('&L' EQ '').EXIT       EXIT IF NULL STRING\n         AIF   ('&L'(1,1) NE '(').NOSUB\n&K       SETA  K'&L-1\n&I       SETA  2\n&J       SETA  1\n.LOOP    ANOP\n&J       SETA  &J+1\n         AIF   (&J  GT &K).LAST\n         AIF   ('&L'(&J,1) NE ',').LOOP\n&RCPSUB# SETA &RCPSUB#+1\n         AIF   (&J EQ &I).NULL\n&RCPSUBL(&RCPSUB#) SETC '&L'(&I,&J-&I)\n&I       SETA  &J+1\n         AGO   .LOOP\n.NULL    ANOP\n&RCPSUBL(&RCPSUB#) SETC ''\n&I       SETA  &J+1\n         AGO   .LOOP\n.LAST    AIF   (&J EQ &I).LASTNUL\n&RCPSUB# SETA  &RCPSUB#+1\n&RCPSUBL(&RCPSUB#) SETC '&L'(&I,&J-&I)\n         AGO   .EXIT\n.LASTNUL ANOP\n&RCPSUB# SETA  &RCPSUB#+1\n&RCPSUBL(&RCPSUB#) SETC ''\n         AGO   .EXIT\n.NOSUB   ANOP\n&RCPSUBL(1) SETC '&L'\n&RCPSUB# SETA 1\n.EXIT    MEND\n./ ADD NAME=RCPSYSOU 0101-85112-89227-0904-00066-00060-00008-MSCHMTZ\n         MACRO\n         RCPSYSOU &CLASS,&COPIES=,&FREE=,&DEST=,&FORMS=,&USER=\n         GBLC  &DYNP\n         LCLC  &C\n         AIF   ('&CLASS(1)' EQ '').TPGN\n&C       SETC  '&CLASS(1)'\n         SPACE\n***********************************************************************\n**       SYSOUT CLASS TEXT UNIT                                      **\n***********************************************************************\n         AIF   ('&C'(1,1) EQ '''').Q\n         AIF   ('&C'(K'&C,1) EQ '/').BS\n         AIF   ('&C'(1,1) EQ '(').REG\n         L     R14,&C                  LOAD ADDRESS OF SYSOUT CLASS\n         MVC   S99TUPAR(1),0(R14)       AND MOVE IT TO TEXT UNIT\n         AGO   .SKEY\n.REG     MVC   S99TUPAR(1),0&C         MOVE SYSOUT CLASS TO TEXT UNIT\n.SKEY    MVI   S99TUKEY+1,DALSYSOU     SET SYSOUT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,1            SET LENGTH FIELD\n         RCPDINC 8\n         AGO   .TPGN\n.BS      RCPTUBFR DALSYSOU,14,&C\n         AGO   .TPGN\n.Q       RCPBTU DALSYSOU,1,&C\n.TPGN    AIF   ('&CLASS(2)' EQ '').TCOP\n         SPACE\n***********************************************************************\n**   SYSOUT PROGRAM NAME TEXT UNIT                                   **\n***********************************************************************\n&C       SETC  '&CLASS(2)'\n         RCPVCHAR DALSPGNM,14,&C\n.TCOP    AIF   ('&COPIES' EQ '').TFREE\n         SPACE\n***********************************************************************\n**    SYSOUT COPIES TEXT UNIT                                        **\n***********************************************************************\n         RCPNTU DALCOPYS,1,&COPIES\n.TFREE   AIF   ('&FREE' EQ '').TDEST\n         SPACE\n***********************************************************************\n**     FREE = CLOSE TEXT UNIT                                        **\n***********************************************************************\n         AIF   ('&FREE' EQ 'CLOSE').CLOSEOK\n         MNOTE 4,' **** FREE=&FREE INVALID, FREE=CLOSE USED'\n.CLOSEOK MVI   S99TUKEY+1,DALCLOSE     MOVE IN TEXT UNIT KEY\n         RCPDINC 4\n.TDEST   AIF   ('&DEST' EQ '').TFORMS\n         SPACE\n***********************************************************************\n**       SYSOUT DESTINATION TEXT UNIT                                **\n***********************************************************************\n         RCPVCHAR DALSUSER,14,&DEST\n.TFORMS  AIF   ('&FORMS' EQ '').TUSER\n         SPACE\n***********************************************************************\n**     SYSOUT FORMS NUMBER TEXT UNIT                                 **\n***********************************************************************\n         RCPVCHAR DALSFMNO,14,&FORMS\n.TUSER   AIF   ('&USER' EQ '').EXIT\n         SPACE\n***********************************************************************\n**       USER ID TEXT UNIT                                           **\n***********************************************************************\n         RCPVCHAR DALUSRID,14,&USER\n.EXIT    MEND\n./ ADD NAME=RCPTU    0100-85112-85112-0844-00025-00025-00000-MAS1\n         MACRO\n         RCPTU &TU            TEXT UNIT LIST\n         GBLA  &DTUPO         TEXT UNIT POINTER OFFSET\n         GBLC  &DYNP          ALLOC SYMBOL PREFIX\n         LCLA  &I,&J\n         LCLC  &C\n         SPACE 1\n***********************************************************************\n**       ADD SPECIAL TEXT UNITS                                      **\n***********************************************************************\n&J       SETA  N'&SYSLIST\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   (&I GT &J).EXIT\n         AIF   ('&TU(&I)'(1,1) EQ '(').R\n         LA    R15,&TU(&I)             LOAD TEXT UNIT ADDRESS\n         ST    R15,&DYNP.TUP+&DTUPO     AND STORE IT IN POINTER LIST\n&DTUPO   SETA  &DTUPO+4\n         AGO   .LOOP\n.R       ANOP\n&C       SETC  '&TU(&I)'(2,K'&TU(&I)-2)\n         ST    &C,&DYNP.TUP+&DTUPO     STORE TEXT UNIT ADDR IN PTR LIST\n&DTUPO   SETA  &DTUPO+4\n         AGO   .LOOP\n.EXIT    MEND\n./ ADD NAME=RCPTUBFR 0100-85112-85112-0845-00060-00060-00000-MAS1\n         MACRO  - BUILD TEXT UNIT FROM BUFFER\n         RCPTUBFR &KEY,                TEXT UNIT KEY                   X\n               &L,                     MAXIMUM LENGTH VALUE            X\n               &C,                     TEXT UNIT                       X\n               &N=1                    TEXT UNIT NUMBER\n         GBLC  &EXECNAM\n         LCLC  &C1,&C2\n         LCLA  &I,&K\n         MVI   S99TUKEY+1,&KEY         SET TEXT UNIT KEY\n         AIF   ('&N' EQ '' OR '&N' EQ '1').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE INTO TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET TEXT UNIT NUMBER\n.ENDN    ANOP\n&K       SETA  K'&C\n&I       SETA  &K-1\n.LOOP1   ANOP\n&K       SETA  &K-1\n         AIF   (&K LE 0).STD\n         AIF   ('&C'(&K,1) NE '/').LOOP1\n&C2      SETC  '&C'(&K+1,&I-&K)\n&C1      SETC  '&C'(1,&K-1)\n         AIF   ('&C1'(1,1) NE '(').TC2\n&C1      SETC  '0&C1'\n.TC2     AIF   ('&C2' EQ '0000').V2B\n         AIF   ('&C2' EQ '00').V1B\n         AIF   ('&C2' EQ '0').V0B\n         AIF   ('&C2'(1,1) EQ '(').RL\n         MVI   S99TULNG+1,&C2          SET LENGTH FIELD\n         MVC   S99TUPAR(&C2.),&C1      MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.STD     ANOP\n&K       SETA  &L-6\n         MVI   S99TULNG+1,&K           SET TEXT UNIT LENGTH\n&C1      SETC  '&C'(1,&I)              REMOVE TRAILING SLASH\n         MVC   S99TUPAR(&K),&C1        MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEXIT\n.V2B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n         S     R14,=A(4)               EXCLUDE LENGTH OF HEADER\n&C1      SETC  '4+&C1'\n         AGO   .MOVE\n.V1B     LH    R14,&C1                 LOAD TEXT UNIT LENGTH\n&C1      SETC  '2+&C1'\n         AGO   .MOVE\n.V0B     SLR   R14,R14                 CLEAR FOR IC\n         IC    R14,&C1                 INSERT TEXT UNIT LENGTH\n&C1      SETC  '1+&C1'\n         AGO   .MOVE\n.RL      ANOP\n&C2      SETC  '&C2'(2,K'&C2-2)\n         LR    R14,&C2                 LOAD TEXT UNIT LENGTH\n.MOVE    STH   R14,S99TULNG             AND STORE INTO LENGTH FIELD\n         BCTR  R14,0                   GET MACHINE LENGTH\n         EXECUTE ,MVC,S99TUPAR-S99TUNIT(0,R15),&C1\n         EX    R14,&EXECNAM            MOVE IN TEXT UNIT\n         RCPDINC &L\n         MEND\n./ ADD NAME=RCPTXTL  0100-85112-85112-0845-00017-00017-00000-MAS1\n         MACRO - TO COUNT CHARACTERS IN A STRING\n         RCPTXTL &S\n         GBLA  &RCPTXTL\n         LCLA  &I,&K,&L\n&RCPTXTL SETA  0\n         AIF   (K'&S LT 3).MEND\n&RCPTXTL SETA  K'&S-2\n&L       SETA  &RCPTXTL\n&I       SETA  1\n.LOOP    ANOP\n&I       SETA  &I+1\n.LOOP2   AIF   (&I GT &L).MEND\n         AIF   ('&S'(&I,2) NE '''''' AND '&S'(&I,2) NE '&&').LOOP\n&I       SETA  &I+2\n&RCPTXTL SETA  &RCPTXTL-1\n         AGO   .LOOP2\n.MEND    MEND\n./ ADD NAME=RCPTYPE  0100-85112-85112-0846-00014-00014-00000-MAS1\n         MACRO\n         RCPTYPE &T\n         GBLC  &RCPTYPE\n         LCLA  &I,&K\n&K       SETA  K'&T\n&RCPTYPE SETC  ''\n         AIF   (&K EQ 0).EXIT\n&RCPTYPE SETC  'C'\n.LOOP    ANOP\n&I       SETA  &I+1\n         AIF   ('&T'(&I,1) LT '0' OR '&T'(&I,1) GT '9').EXIT\n         AIF   (&I LT &K).LOOP\n&RCPTYPE SETC  'N'\n.EXIT    MEND\n./ ADD NAME=RCPUNALC 0100-85112-85112-0846-00009-00009-00000-MAS1\n         MACRO\n         RCPUNALC\n         SPACE 1\n***********************************************************************\n**     FREE EVEN IF PERMANENTLY ALLOCATED                            **\n***********************************************************************\n         MVI   S99TUKEY+1,DUNUNALC     SET TEXT UNIT KEY\n         RCPDINC  4\n         MEND\n./ ADD NAME=RCPUNIT  0100-85112-85112-0847-00016-00016-00000-MAS1\n         MACRO\n         RCPUNIT &U,&V\n         GBLC  &DYNP\n         AIF   ('&U' EQ '').TVOL\n         SPACE 1\n***********************************************************************\n**       UNIT NAME TEXT UNIT                                         **\n***********************************************************************\n         RCPVCHAR DALUNIT,14,&U\n.TVOL    AIF   ('&V' EQ '').EXIT\n         SPACE 1\n***********************************************************************\n**       VOLUME SERIAL TEXT UNIT                                     **\n***********************************************************************\n         RCPVCHAR DALVLSER,14,&V\n.EXIT    MEND\n./ ADD NAME=RCPVCHAR 0100-85112-85112-0847-00031-00031-00000-MAS1\n         MACRO\n         RCPVCHAR &KEY,&LEN,&C,&N=1\n         GBLC  &DYNP\n         AIF   ('&C'(K'&C,1) EQ '/').BM\n         AIF   ('&C'(1,1) EQ '''').QM\n         RCPSR2\n         AIF   ('&C'(1,1) EQ '(').RM\n         LH    R2,&C+4                 LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,&C                  LOAD ADDRESS OF TEXT UNIT\n         AGO   .STHM\n.RM      LH    R2,4&C                  LOAD LENGTH OF TEXT UNIT\n         LTR   R2,R2                   AND TEST FOR ZERO\n         BZ    *+30                    IF NO TEXT UNIT, SKIP\n         L     R14,0&C                 LOAD ADDRESS OF TEXT UNIT\n.STHM    STH   R2,S99TULNG             STORE LENGTH OF TEXT UNIT\n         BCTR  R2,0                    DECREMENT FOR EXECUTE\n         EX    R2,&DYNP.MVC            MOVE IN TEXT UNIT\n         MVI   S99TUKEY+1,&KEY         MOVE IN TEXT UNIT KEY\n         AIF   ('&N' EQ '1' OR '&N' EQ '').N1\n         LA    R14,&N                  LOAD TEXT UNIT NUMBER\n         STH   R14,S99TUNUM             AND STORE IT IN TEXT UNIT\n         AGO   .ENDN\n.N1      MVI   S99TUNUM+1,1            SET NUMBER FIELD\n.ENDN    RCPDINC &LEN\n         MEXIT\n.BM      RCPTUBFR &KEY,&LEN,&C\n         MEXIT\n.QM      RCPBTU &KEY,&N,&C\n         MEND\n./ ADD NAME=RCPVOLRT 0101-85112-85200-1023-00012-00012-00002-MAS1\n         MACRO\n         RCPVOLRT\n         SPACE 1\n***********************************************************************\n**    VOLUME SERIAL RETURN TEXT UNIT                                 **\n***********************************************************************\n         MVI   S99TUKEY+1,DALRTVOL     SET RETURN VOLUME SERIAL KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,6            SET LENGTH FIELD\n         MVC   S99TUPAR(6),=CL6' '     INITIALIZE FIELD TO BLANKS\n         RCPDINC 14\n         MEND\n./ ADD NAME=REGS     0100-09022-09022-1206-00008-00008-00000-SCHMUM\n         MACRO\n         REGS   &C\n         LCLA   &N\n.L       ANOP\nR&N      EQU    &N\n&N       SETA   &N+1\n         AIF    (&N LT 16).L\n         MEND\n./ ADD NAME=S99FAIL  0100-85112-85112-0852-00066-00066-00000-MAS1\n         MACRO\n&NAME    S99FAIL &RB=(R14),&RC=(R15),&CPPL=,&MF=G,&CP=\n         GBLB  &RCPCPPL(2)             CP INDICATOR\n         GBLC  &RCPPRE\n         LCLB  &GEN\n         LCLC  &C\n&NAME    DS    0H\n         AIF   ('&MF(1)' EQ 'G').GEN\n         AIF   ('&MF(1)' EQ 'E').EXEC\n         MNOTE 4,'&MF(1) IS AN INVALID MF, MF=G USED'\n.GEN     LA    R1,FAIL&SYSNDX     LOAD PLIST ADDRESS\n&GEN     SETB  1\n         AGO   .L\n.EXEC    AIF   ('&MF(2)' NE '').LISTOK\n         MNOTE 8,'LIST ADDRESS NOT SPECIFIED'\n         MEXIT\n.LISTOK  AIF   ('&MF(3)' EQ '').TMF2\n&MF(3)   EQU   24                      LENGTH OF PARAMETER LIST\n.TMF2    AIF   ('&MF(2)' EQ '(R1)' OR '&MF(2)' EQ '(1)').L\n         AIF   ('&MF(2)'(1,1) EQ '(').REG\n         LA    R1,&MF(2)          LOAD DAIRFAIL PARAM LIST ADDRESS\n         AGO   .L\n.REG     ANOP\n&C       SETC  '&MF(2)'(2,K'&MF(2)-2)\n         LR    R1,&C              LOAD DAIRFAIL PARAM LIST ADDR\n.L       AIF   ('&RB'(1,1) EQ '(').RBR\n         AIF   ('&RB' NE '').RBA\n         MNOTE 8,'REQ BLOCK ADDRESS NOT SPECIFIED'\n         MEXIT\n.RBR     ST    &RB(1),0(R1)       STORE S99 RB ADDRESS\n         AGO   .RC\n.RBA     LA    R14,&RB            LOAD ADDRESS OF REQ BLOCK\n         ST    R14,0(R1)          AND STORE IN PLIST\n.RC      AIF   ('&RC'(1,1) EQ '(').RCR\n         LA    R14,&RC            LOAD ADDRESS OF RET CODE\n         ST    R14,4(R1)          AND STORE IN PLIST\n         AGO   .EFF02\n.RCR     ANOP\n.GRC     LA    R14,20(R1)         LOAD ADDR RET CODE FLD\n         ST    &RC(1),0(R14)      STORE RET CODE\n         ST    R14,4(R1)          AND STORE ITS ADDRESS\n.EFF02   LA    R14,=A(0)          LOAD ADDR OF FULLWORD OF 0\n         ST    R14,8(R1)          STORE IT.\n         AIF   ('&CP' EQ 'YES' OR &RCPCPPL(1)).CPID\n         LA    R14,=X'8032'       LOAD ADDRESS OF CALLERID\n         ST    R14,12(R1)          AND STORE IT\n         XC    16(4,R1),16(R1)    CLEAR CPPL POINTER\n         AGO   .GO\n.CPID    LA    R14,=Y(50)         LOAD ADDRESS OF CALLERID\n         ST    R14,12(R1)         AND STORE IT\n         AIF   ('&CPPL' EQ '').DCPPL\n         AIF   ('&CPPL'(1,1) EQ '(').RCPPL\n         LA    R14,&CPPL          LOAD CPPL ADDRESS\n         ST    R14,16(R1)          AND STORE IT\n         AGO   .GO\n.DCPPL   MVC   16(4,R1),&RCPPRE.CPPL MOVE IN CPPL ADDRESS\n         AGO   .GO\n.RCPPL   ST    &CPPL(1),16(R1)    STORE ADDRESS OF CPPL\n.GO      LINK  EP=IKJEFF18\n         AIF   (NOT &GEN).EXIT\n         SPACE 1\n         RCPDS\n&C SETC 'FAIL&SYSNDX'\n&C       DS    6F             RESERVE SPACE FOR PARAM LIST\n         RCPDS\n.EXIT    MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NIMAGENT": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x06\\x01\\t\\x02\\x1f\\x01\\t\\x02/\\x16\\x18\\x00\\x04\\x00\\x03\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2009-01-21T00:00:00", "modifydate": "2009-01-22T16:18:06", "lines": 4, "newlines": 3, "modlines": 0, "user": "SCHMUM"}, "text": "//***  NIMBUS MAINFRAME SUB-AGENT\n//NIMAGENT EXEC PGM=NIMAGNT,TIME=1440\n//STEPLIB  DD DISP=SHR,DSN=MSS.SCHMUM.LOADLIB\n//SYSABEND DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NIMAGNT": {"ttr": 2310, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01[\\x00\\x12\\x01\\x07)\\x7f\\x01\\t\\x03\\x0f\\t\"\\x03Q\\x02\\xa8\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.91", "flags": 0, "createdate": "2007-10-24T00:00:00", "modifydate": "2009-01-30T09:22:12", "lines": 849, "newlines": 680, "modlines": 0, "user": "SCHMUM"}, "text": "NIMAGENT TITLE 'NimBUS SNMP Sub-Agent - Main rtn   BY M.SCHMUTZOK'\n*PROCESS USING(WARN(15))\n         ACONTROL CPAT(NOSYSL,NOCASE)\n**********************************************************************\n*  (C)   Copyright Shands HealthCare, 2009                           *\n*  Program was written by:                                           *\n*    Michael Schmutzok                                               *\n*    Sr. Systems Programmer                                          *\n*    Shands HealthCare                                               *\n*    Information Services                                            *\n*    1329 SW 16th St, Room 3150                                      *\n*    Gainesville, FL  32608-1128                                     *\n*    mailto:schmum@shands.ufl.edu                                    *\n*    352.265.7982          (fax)                                     *\n*    352.265.8317  x85465  (voice)                                   *\n**********************************************************************\n*                                                                    *\n*  MODULE NAME:  NIMAGNT                                             *\n*                                                                    *\n*                                                                    *\n*  DESCRIPTIVE NAME:  SNMP subagent for NimBUS                       *\n*                                                                    *\n*  FUNCTION: THIS MAIN ROUTINE IS RESPONSIBLE FOR ATTACHING ALL      *\n*            OF THE SUBTASKS, HANDLING ALL SNMP REQUESTS,            *\n*            TERMINATION/CLEANUP, OPERATOR MODIFY COMMANDS AND       *\n*            ESTABLISHING A CONNECTION TO SNMP.                      *\n*                                                                    *\n*  OPERATION: THE FOLLOWING ACTIONS ARE TAKEN BY THIS MODULE:        *\n*      1) INITIALIZE THE SUB-AGENT AND SUB-TASK CONTROL BLOCKS       *\n*      2) ESTABLISH THE ESTAE ENVIRONMENT                            *\n*      3) ATTACH ALL OF THE SUB-TASKS                                *\n*      4) INITIALIZE THE CONSOLE COMMUNICATION INTERFACE             *\n*      5) REGISTER THE SUB-AGENT WITH SNMP                           *\n*      6) WAIT FOR AND PROCESS OPERATOR COMMANDS, SUB-TASK REQUESTS, *\n*         AND SNMP REQUESTS                                          *\n*                                                                    *\n*  DEPENDENCIES: IF USING THE SNAP FUNCTION FOR DEBUGGING, MAKE      *\n*                SURE THE PCCSSNAP MODULE IS IN THE STEPLIB OR       *\n*                LINKLIST TO PREVENT S806 ABEND                      *\n*                                                                    *\n*  RESTRICTIONS: NONE                                                *\n*                                                                    *\n*  REGISTER CONVENTIONS:                                             *\n*                                                                    *\n*          STANDARD ENTRY LINKAGE                                    *\n*                                                                    *\n*          R0 AND R1 USED FOR SYSTEM SERVICE INVOCATION              *\n*          R2 THROUGH R4 ARE WORK REGISTERS                          *\n*          R5 DPIPDU ADDRESSING                                      *\n*          R6 WORK REGISTER                                          *\n*          R7 CIB MAPPING                                            *\n*          R8 WORK REGISTER                                          *\n*          R9 COM AREA ADDRESSING                                    *\n*          R10 AGCB ADDRESSING                                       *\n*          R11 CONTAINS THE ADDRESS OF THE DYNAMIC AREA              *\n*          R12 IS THE BASE REGISTER                                  *\n*                                                                    *\n*                                                                    *\n*  INPUT:  OPERATOR MODIFY COMMANDS:                                 *\n*            PLACING AN OBJECT IN AND OUT OF 'MAINTENANCE MODE'      *\n*              F NIMAGENT,MAINT,ON|OFF,XXXXXXXX                      *\n*            SHUTTING DOWN NIMAGENT                                  *\n*              F NIMAGENT,STOP                                       *\n*            CHANGING THE CHECK INTERVAL TIME                        *\n*              F NIMAGENT,INTERVAL,XXXX,MMMM (FUTURE ADDITION)       *\n*                                                                    *\n*  OUTPUT: SYSTEM INFORMATION AND STATUS OF VARIOUS MONITORED        *\n*          OBJECTS, ETC WHICH ARE ACCESSIBLE USING SNMP GET          *\n*          REQUESTS FOR THE CORRESPONDING OID.                       *\n*                                                                    *\n*  RETURN CODES = 0  NORMAL TERMINATION                              *\n*                                                                    *\n**********************************************************************\n         PRINT ON,GEN,NODATA\nNIMAGNT  CSECT ,                   Establish the csect\n         USING *,R15\nNIMAGNT  MODID                     Est. module identification\n         STM   R14,R12,12(R13)     Save caller's registers\n         LR    R11,R15             Setup local base register\n         DROP  R15\n         LA    R12,2048(R11)       Addressability\n         LA    R12,2048(R12)       Addressability\n         USING NIMAGNT,R11,R12     Est. code addressability\n         LA    R15,NIMA000         Prepare to force the AMODE\n         O     R15,=X'80000000'    Indicate AMODE=31\n         BSM   R0,R15              Set the AMODE, continue on\nNIMA000  DS    0H\n         MODESET KEY=NZERO,MODE=SUP Get into supervisor state\n         SLR   R1,R1               Ensure SYSEVENT does not POST ECB\n         SYSEVENT TRANSWAP         Force SWAP out, then in for good\n         GETMAIN RC,LV=AGCBLEN,SP=230,LOC=ANY      Allocate the AGCB\n         LTR   R15,R15             Successful GETMAIN ...\n         BZ    NIMA010              Yes, skip ABEND and continue\n         ABEND 888,,STEP,USER      ABEND the Agent\n*----------------------------------------------------------------------\n*        INITIALIZATION\n*----------------------------------------------------------------------\nNIMA010  DS    0H\n         LR    R10,R1              Set AGCB addressability\n         USING AGCB,R10            Establish global addr. for the AGCB\n         LR    R2,R10              Zero the\n         LA    R3,AGCBLEN           new Agent\n         MVCL  R2,R14                control block\n         MVC   AGCBID,=C'AGCB'     Set the eye catcher\n         LA    R15,AGCBSAVE        Perform\n         ST    R13,4(,R15)           save\n         ST    R15,8(,R13)             area\n         LR    R13,R15                   linkage\n         MVC   AGCBXINT(8),DFLTXTME initial existence subtask timer\n         MVC   AGCBJINT(8),DFLTJTME initial JES subtask timer\n         MVC   AGCBHINT(8),DFLTHTME initial HSM subtask timer\n         MVC   AGCBDINT(8),DFLTDTME initial DASD subtask timer\n         MVC   AGCBSINT(8),DFLTSTME initial SYS subtask timer\n         MVC   FAMILY(2),=AL2(2)   Socket name structure\n         LA    R7,SECB             Selectex ecb\n         ST    R7,SECBA            Save address\n*----------------------------------------------------------------------\n*        ESTAE INITIALIZATION\n*----------------------------------------------------------------------\n         MVC   AGCBMPL(AGCBEPLL),NIMAEPL  Copy list form ESTAE\n         L     R2,=V(NIMESTA)      Get the ESTAE routine address\n         ESTAE (2),                Establish the ESTAE exit            C\n               MF=(E,AGCBMPL),                                         C\n               PARAM=(10)\n*----------------------------------------------------------------------\n*        TIOT/COMM EXTRACTION\n*----------------------------------------------------------------------\nNIMA020  DS    0H\n         LA    R9,AGCBEXTA         Point to area for EXTRACT info\n         MVC   AGCBMPL(AGCBXPLL),NIMAXPL  Copy list form EXTRACT\n         EXTRACT (R9),             Get CIB info, TIOT addr             C\n               MF=(E,AGCBMPL)\n         L     R9,AGCBTIOT         Pick up the TIOT address\n         MVC   AGCBMN(8),TIOCSTEP-TIOT(R9) Save the agent name\n*----------------------------------------------------------------------\n*        SUBTASK ATTACH ROUTINE\n*----------------------------------------------------------------------\n         LA    R3,NIMEXSTN         Name of subtasks\n         LA    R4,AGCBXECB         Subtask ECB table\n         LA    R5,AGCBXTCB         Subtask TCB table\n         LA    R6,VNIMEXST         Point to module addresses\n         LA    R7,5                Number of subtasks\nNIMA800  DS    0H\n         L     R1,0(R6)            Load module address\n         IDENTIFY EPLOC=(R3),      Identify the entry point            C\n               ENTRY=(1)\n         MVC   AGCBMPL(MSG243EL),MSG243E Assume bad IDENTIFY\n         LR    R0,R15              Pick up IDENTIFY code for msg\n         CL    R15,=F'4'           Was IDENTIFY successful?\n         BH    NIMA810               No, go return the error\n         MVC   AGCBMPL(AGCBAPLL),NIMAAPL   Copy ATTACH parm list\n         LR    R1,R10              Load the AGCB for the subtask\n         ATTACH EPLOC=(R3),        Attach the subtask                  C\n               ECB=(R4),                                               C\n               DPMOD=+2,                                               C\n               SF=(E,AGCBMPL)\n         LTR   R0,R15              Test ATTACH return code\n         BZ    NIMA820             ATTACH ok, move on\n         MVC   AGCBMPL(MSG244EL),MSG244E Bad attach\n         LA    R2,AGCBMPL          Point to message area\n         ST    R0,AGCBDWD          Save RC\n         UNPK  MSG24XRC(9,R2),AGCBDWD(5) Unpack it\n         TR    MSG24XRC(8,R2),HEXTAB Make all of it viewable\n         MVI   MSG24XRC+8(R2),C' ' Get rid of bad byte\n         MVC   MSG24XNM(8,R2),0(R3) Move in module name\n         B     NIMA815             Issue error message\nNIMA810  DS    0H\n         LA    R2,AGCBMPL          Point to message area\n         ST    R0,AGCBDWD          Save RC\n         UNPK  MSG243RC(9,R2),AGCBDWD(5) Unpack it\n         TR    MSG243RC(8,R2),HEXTAB Make all of it viewable\n         MVI   MSG243RC+8(R2),C' ' Get rid of bad byte\n         MVC   MSG243NM(8,R2),0(R3) Move in module name\nNIMA815  DS    0H\n         WTO   MF=(E,AGCBMPL)      Issue message to operator\n         B     SHUTDOWN            End the agent\nNIMA820  DS    0H\n         ST    R1,0(R5)            Save the address from ATTACH\n         MVC   AGCBMPL(MSG141IL),MSG141I Attach successful\n         LA    R2,AGCBMPL          Point to message area\n         MVC   MSG14XNM(8,R2),0(R3) Move in module name\n         WTO   MF=(E,AGCBMPL)      Issue message to operator\n         LA    R3,8(R3)            Point to next name\n         LA    R4,12(R4)           Subtask ECB table\n         LA    R5,12(R5)           Subtask TCB table\n         LA    R6,4(R6)            Point to next module address\n         BCT   R7,NIMA800          Go attach the next sub-task\nNIMA1000 DS    0H\n*----------------------------------------------------------------------\n*        INITIALIZE CONSOLE COMMUNICATION INTERFACE\n*----------------------------------------------------------------------\n         L     R9,AGCBCOM          Get addr of the COMM area\n         USING COM,R9              Establish COMM area addressability\n         L     R1,COMECBPT         Get address of the communication ECB\n         O     R1,=X'80000000'     Set high bit - last ECB in list\n         ST    R1,CECBA            Put addr of modify ECB in list\n         MVC   AGCBMPL(MSG202EL),MSG202E Set up for no CIB msg\n         ICM   R7,15,COMCIBPT      Pick up first CIB off CSCB\n         BNZ   GOTCIB              Go process start CIB\n         BAL   R8,EMSGRTN          No start CIB, must be batch (ERR!)\n         B     SHUTDOWN            Leave\nGOTCIB   DS    0H\n         BAL   R8,DELCIB           Go delete the start CIB\n         QEDIT ORIGIN=COMCIBPT,    Limit CIBS to one                   C\n               CIBCTR=1\n*----------------------------------------------------------------------\n*        SNMP SUBAGENT REGISTRATION\n*----------------------------------------------------------------------\n         MVC   FUNC(8),=CL8'INITAPI' Function name for error message\n         EZASMI TYPE=INITAPI,      Issue INITAPI macro                 C\n               MAXSOC=MAXSOC,      Max number of sockets               C\n               MAXSNO=MAXSNO,      Max number of sockets returned      C\n               APITYPE=APITYPE,    API type field                      C\n               RETCODE=RETCODE,    Field for return code               C\n               ERRNO=ERRNO,        Field for returned error number     C\n               ERROR=ERROR         Address to branch to if error occurs\n         L     R6,RETCODE          Load return code\n         LTR   R6,R6               Zero return code?\n         BNM   SOCKET1               yes, continue\n         BAL   R8,EMSGRTN            no, issue results message\n         B     SHUTDOWN            Exit\nSOCKET1  DS    0H\n         MVC   FUNC(8),=CL8'SOCKET1' Function name for error message\n         LA    R5,DATAGRAM         Point to pdu\n         BAL   R8,SOCKET           Go open socket\n         STH   R6,SOCKDESC         Save retcode (=socket descriptor)\n         LTR   R6,R6               Check it\n         BM    TERMAPI             --> We are done!\n         MVC   FUNC(8),=CL8'GETHOSTI' Function name for error message\n         EZASMI TYPE=GETHOSTID,    GETHOSTID type                      C\n               RETCODE=RETCODE,    Field for return code               C\n               ERRNO=ERRNO         Field for returned error number\n         L     R6,RETCODE          Load return code\n         C     R6,=F'-1'           RC=-1?\n         BNE   CONNECT1              no, continue\n         BAL   R8,EMSGRTN            yes, issue results message\n         B     TERMAPI             Exit\nCONNECT1 DS    0H\n         ST    R6,ADDRESS          Save host address\n         MVC   PORT(2),SNMPPORT    Load snmp port #\n         MVC   FUNC(8),=CL8'CONNECT1' Function name for error message\n         BAL   R8,CONNECT          Connect to snmp socket\n         MVC   FUNC(8),=CL8'SWRITE1' Function name for error message\n         LA    R4,PDU1LEN          Point to pdu length\n         LA    R5,PDU1             Point to Get dpiPortForTCP.0 pdu\n         BAL   R8,WRITE            Issue GET DPI_port\n         MVC   FUNC(8),=CL8'SREAD1' Function name for error message\n         BAL   R8,READ             SNMP response PDU for GET DPI_port\n         MVC   PORT(2),BUF+45      Save port number\n         BAL   R8,CLOSE            Close SNMP socket\n         MVC   FUNC(8),=CL8'SOCKET2' Function name for error message\n         LA    R5,STREAM           Indicate stream\n         BAL   R8,SOCKET           Open DPI socket\n         STH   R6,SOCKDESC         Save retcode (=socket descriptor)\n         LTR   R6,R6               CHECK IT\n         BM    TERMAPI             --> We are done!\n         MVC   FUNC(8),=CL8'CONNECT2' Function name for error message\n         BAL   R8,CONNECT          Go connect\n         MVC   FUNC(8),=CL8'DWRITE1' Function name for error message\n         LA    R4,PDU2LEN          Point to pdu length\n         LA    R5,PDU2             Point to pdu\n         BAL   R8,WRITE            Go open DPI\n         MVC   FUNC(8),=CL8'DREAD1' Function name for error message\n         BAL   R8,READ             Get result\n         MVC   FUNC(8),=CL8'DWRITE2' Function name for error message\n         LA    R4,PDU3LEN          Point to pdu length\n         LA    R5,PDU3             Point to DPI_resgister pdu\n         BAL   R8,WRITE            Go register with SNMP\n         MVC   FUNC(8),=CL8'DREAD2' Function name for error message\n         BAL   R8,READ             Go get results\n         TPIMASK SET,              Set mask                            C\n               MASK=RSNDMASK,                                          C\n               SD=SOCKDESC\n         MVC   AGCBMPL(MSG100IL),MSG100I Copy the WPL for message 1\n         WTO   MF=(E,AGCBMPL)      Issue message to operator\n*----------------------------------------------------------------------\n*        SET UP WAIT\n*----------------------------------------------------------------------\nLOOP     DS    0H\n         MVC   FUNC(8),=CL8'SELECTEX' Function name for error message\n         EZASMI TYPE=SELECTEX,     SELECTX function                    C\n               MAXSOC=MAXSOC,      Max number of sockets               C\n               RSNDMSK=RSNDMASK,   Read mask                           C\n               RRETMSK=RRETMASK,   Returned read mask                  C\n               SELECB=(AGCBECBL,'LIST'), Post these ECBs if activity   C\n               RETCODE=RETCODE,    Field for return code               C\n               ERRNO=ERRNO,        Field for returned error number     C\n               ERROR=ERROR         Address to branch to if error occurs\n         L     R6,RETCODE          Load return code\n         LTR   R6,R6               Good return code?\n         BNM   TPIMASK2              Yes, return\n         BAL   R8,EMSGRTN            No, go issue error message\n         BAL   R8,CLOSE            Close the connection\n         B     TERMAPI             Terminate the subagent\nTPIMASK2 DS    0H\n         TPIMASK TEST,MASK=RRETMASK,SD=SOCKDESC   SNMP interrupt?\n         BE    DPIRD3              Yes, go process SNMP request\n         ICM   R7,15,COMCIBPT      No, check for operator interrupt\n         USING CIB,R7              Base CIB mapping\n         CLI   CIBVERB,CIBSTOP     Was it a STOP command?\n         BNE   NOTSTOP             No, keep checking\n         BAL   R8,CLOSE            Close\n         B     TERMAPI             Exit\nNOTSTOP  DS    0H\n         CLI   CIBVERB,CIBMODFY    Was it a modify command?\n         BNE   NOTMDFY             No, go free CIB\n         BAL   R8,DELCIB           Free CIB\n         B     CIBRTN              It was a MODIFY, go process command\n         B     LOOP                Go wait for next interrupt\nNOTMDFY  DS    0H\n         WTO   'UNKNOWN INTERRUPT RECEIVED. BYPASSING'\n         BAL   R8,DELCIB           Free CIB\n         B     LOOP                Don't know what interrupted us\n*----------------------------------------------------------------------\n*        PROCESS CIB ROUTINES\n*----------------------------------------------------------------------\nDELCIB   DS    0H\n         QEDIT ORIGIN=COMCIBPT,    Free the CIB                        C\n               BLOCK=(R7)\n         BR    R8                  Return\nCIBRTN   DS    0H\n         MVI   AGCBCOMM,C' '       Clear print line\n         MVC   AGCBCOMM+1(255),AGCBCOMM  Clear print line\n         IC    R15,CIBDATLN        Get size of modify data\n         BCTR  R15,R0              Decrement for EXECUTE\n         EX    R15,MVC060          Move to COMMDATA\n         B     PMF01000            Go process operator command\nMVC060   MVC   AGCBCOMM(0),CIBDATA Move data to work area\n         DROP  R7,R9\n*----------------------------------------------------------------------\n*     PROCESS SNMP REQUESTS\n*----------------------------------------------------------------------\nDPIRD3   DS    0H\n         USING DPIPDU,R5           Get addressability\n         MVC   FUNC(8),=CL8'DREAD3' Function name for error message\n         BAL   R8,READ             Go get request\n         XC    RESPPDU(75),RESPPDU Clear response pdu\n         MVC   RESPPDU(7),BUF      Copy HDR\n         LA    R5,BUF              Point to buffer\n         CLI   DPIPTYPE,DPIGET     Get request?\n         BE    GETRTN                yes, go process\n         CLI   DPIPTYPE,DPIGETN    Getnext request?\n         BE    GETRTN                yes, go process\nBADREQ   DS    0H\n         MVI   DPIPERRC,genErr     General error\n         B     BADRESP             Go issue error PDU\nGETRTN   DS    0H\n         MVC   FUNC(8),=CL8'DWRITE3' Function name for error message\n         LA    R3,DPIGCN           Point to community name\n         AH    R3,DPIGCNL          Add community name length (if any)\n         LA    R5,RESPPDU          Point to PDU request\n         MVI   DPIPTYPE,DPIRESP    Indicate DPI response PDU\n         LA    R4,DPIPVAR          Point to variable section\nGIDLOOP  DS    0H\n         MVC   0(1,R4),0(R3)       Move a byte from buffer to resppdu\n         LA    R4,1(R4)            Point to next byte - resppdu\n         LA    R3,1(R3)            point to next byte - buffer\n         CLI   0(R3),X'00'         End of variable?\n         BNE   GIDLOOP               No, keep going\n         MVC   0(1,R4),0(R3)         Yes, move in null\n         LA    R4,1(R4)            Point to next byte - resppdu\n         LA    R3,1(R3)            Point to next byte - buffer\n         ST    R3,INSTANCS         Save start of instance\nINSTLOOP DS    0H\n         MVC   0(1,R4),0(R3)       Move a byte from buffer to resppdu\n         LA    R4,1(R4)            Point to next byte - resppdu\n         LA    R3,1(R3)            Point to next byte - buffer\n         CLI   0(R3),X'00'         End of variable?\n         BNE   INSTLOOP              No, keep going\n         ST    R3,INSTANCE         Save end of instance\n         MVC   0(1,R4),0(R3)         Yes, move in null\n         LA    R4,1(R4)            Point to next byte - resppdu\nVALUE    DS    0H\n         L     R3,INSTANCE         Point to end of instance\n         SH    R3,=H'2'            Subtract 1\n         CLC   0(2,R3),=C'.0'      Zero instance?\n         BE    ZEROINST              yes, continue\n         L     R3,INSTANCE         Point to end of instance\nZEROINST DS    0H\n         SH    R3,=H'2'            Subtract 1\n         CLI   0(R3),C'.'          1 digit instance?\n         BNE   DIGIT2                No, go get 2 digit instance\nDIGIT1   DS    0H\n         PACK  AGCBDWD(8),1(1,R3)  Convert instance to dec nbr\n         B     GOTINST             Go process instance\nDIGIT2   DS    0H\n         PACK  AGCBDWD(8),0(2,R3)  Convert instance to dec nbr\nGOTINST  DS    0H\n         CVB   R2,AGCBDWD          Make usable\n         STC   R2,AGCBINST         Save it\n         L     R3,INSTANCS         Point to start of instance\n         CLI   0(R3),C'1'          System metrics?\n         BE    SYSM                  Yes, go process\n         CLI   0(R3),C'2'          Dasd metrics?\n         BE    DASDM                 Yes, go process\n         CLI   0(R3),C'3'          Application metrics?\n         BE    APPLM                 Yes, go process\n         B     BADREQ                No, go issue bad response\nSYSM     DS    0H\n         CLI   AGCBINST,SYSVNUM    Valid variable number?\n         BH    BADREQ                No, go issue bad response\n         PACK  AGCBDWD(8),2(1,R3)  Convert instance to dec nbr\n         LA    R6,SYSMET           Point to system metrics vars\n         B     GETVAR              Go get variable\nDASDM    DS    0H\n         CLI   AGCBINST,DASDVNUM   Valid variable number?\n         BH    BADREQ                No, go issue bad response\n         PACK  AGCBDWD(8),2(1,R3)  Convert instance to dec nbr\n         LA    R6,DASDMET          Point to dasd metrics vars\n         B     GETVAR              Go get variable\nAPPLM    DS    0H\n         CLI   2(R3),C'1'          CICS metrics?\n         BE    CICSM                 Yes, go process\n         CLI   2(R3),C'2'          DB2 metrics?\n         BE    DB2M                  Yes, go process\n         CLI   2(R3),C'3'          STC metrics?\n         BE    STCM                  Yes, go process\n         CLI   2(R3),C'4'          HSM metrics?\n         BE    HSMM                  Yes, go process\n         B     BADREQ                No, go issue bad response\nCICSM    DS    0H\n         CLI   AGCBINST,CICSVNUM   Valid variable number?\n         BH    BADREQ                No, go issue bad response\n         PACK  AGCBDWD(8),4(1,R3)  Convert instance to dec nbr\n         LA    R6,CICSMET          Point to CICS metrics vars\n         B     GETVAR              Go get variable\nDB2M     DS    0H\n         CLI   AGCBINST,DB2VNUM    Valid variable number?\n         BH    BADREQ                No, go issue bad response\n         PACK  AGCBDWD(8),4(1,R3)  Convert instance to dec nbr\n         LA    R6,DB2MET           Point to db2 metrics vars\n         B     GETVAR              Go get variable\nSTCM     DS    0H\n         CLI   AGCBINST,STCVNUM    Valid variable number?\n         BH    BADREQ                No, go issue bad response\n         PACK  AGCBDWD(8),4(1,R3)  Convert instance to dec nbr\n         LA    R6,STCMET           Point to stc metrics vars\n         B     GETVAR              Go get variable\nHSMM     DS    0H\n         CLI   AGCBINST,HSMVNUM2   Valid variable number?\n         BH    BADREQ                No, go issue bad response\n         PACK  AGCBDWD(8),4(1,R3)  Convert instance to dec nbr\n         LA    R6,HSMMET1          Point to hsm metrics vars\n         B     GETVAR              Go get variable\nGETVAR   DS    0H\n         XR    R3,R3               Clear loop counter\n         IC    R3,AGCBINST         Load instance number\n         SH    R3,=H'1'            Subtract 1\n         LTR   R3,R3               First entry?\n         BZ    LOOPBYP               Yes, bypass loop\nVALLOOP  DS    0H\n         MVC   AGCBFWD+2(2),1(R6)  Extract variable length\n         L     R2,AGCBFWD          Load variable length\n         LA    R2,3(R2)            Add length of length field\n         AR    R6,R2               Point to next value\n         BCT   R3,VALLOOP          Loop until right value\nLOOPBYP  DS    0H\n         MVC   0(3,R4),0(R6)       Move in the type, length\n         LA    R4,3(R4)            Move resppdu pointer\n         MVC   AGCBFWD+2(2),1(R6)  Extract variable length\n         L     R3,AGCBFWD          Load variable length\n         STM   R4,R7,REGSAVE       Save registers\n         LR    R5,R3               To length\n         LR    R7,R3               From length\n         LA    R6,3(R6)            From address\n         MVCL  R4,R6               Move value to resppdu\n         LM    R4,R7,REGSAVE       Save registers\n         AR    R4,R3               Move resppdu pointer\n         LA    R5,RESPPDU          Load start of response pdu buffer\n         SR    R4,R5               End - start = pdu length\n         ST    R4,REGSAVE          Save pdu length\n         SH    R4,=H'2'            Length - 2 = packet length\n         STH   R4,DPIPLEN          Move in packet length\n         LA    R4,REGSAVE          Restore pdu length for write\n         BAL   R8,WRITE            Go write it out\n*        BAL   R8,SNAPRTN          Go snap storage for debugging\n         B     LOOP                Wait for another request\n         DROP  R5\n*----------------------------------------------------------------------\n*        SOCKET OPEN\n*          R5 - SOCKET TYPE\n*----------------------------------------------------------------------\nSOCKET   DS    0H\n         EZASMI TYPE=SOCKET,       Issue SOCKET Macro                  C\n               AF=INET,            INET or IUCV                        C\n               SOCTYPE=(R5),         STREAM(TCP) DATAGRAM(UDP) OR RAW  C\n               ECB=SECB,           For exits and ECBs                  C\n               RETCODE=RETCODE,    Specify RETCODE field               C\n               ERRNO=ERRNO,        Specify ERRNO field                 C\n               ERROR=ERROR         Abend if Macro error\n         L     R6,RETCODE          Load return code\n         LTR   R6,R6               Good return code?\n         BNMR  R8                    Yes, return\n         BAL   R8,EMSGRTN            No, go issue error message\n         B     TERMAPI             Exit\n*----------------------------------------------------------------------\n*        SOCKET CLOSE\n*----------------------------------------------------------------------\nCLOSE    DS    0H\n         MVC   FUNC(8),=CL8'CLOSE'\n         EZASMI TYPE=CLOSE,        Issue Macro                         C\n               S=SOCKDESC,         Socket descriptor                   C\n               ECB=SECB,           For exits and ECBs                  C\n               RETCODE=RETCODE,    Field for return code               C\n               ERRNO=ERRNO,        Field for returned error number     C\n               ERROR=ERROR         Address to branch to if error occurs\n         L     R6,RETCODE          Load return code\n         LTR   R6,R6               Good return code?\n         BZR   R8                    Yes, return\n         BAL   R8,EMSGRTN            No, go issue error message\n*----------------------------------------------------------------------\n*        TERMAPI\n*----------------------------------------------------------------------\nTERMAPI  DS    0H\n         EZASMI TYPE=TERMAPI       Terminate the API\n         B     SHUTDOWN            End it all\n*----------------------------------------------------------------------\n*        SOCKET CONNECT\n*----------------------------------------------------------------------\nCONNECT  DS    0H\n         EZASMI TYPE=CONNECT,      Issue Macro                         C\n               S=SOCKDESC,         Socket descriptor                   C\n               NAME=NAME,          Socket name structure               C\n               ECB=SECB,           For exits and ECBs                  C\n               RETCODE=RETCODE,    Field for return code               C\n               ERRNO=ERRNO,        Field for returned error number     C\n               ERROR=ERROR         Address to branch to if error occurs\n         L     R6,RETCODE          Load return code\n         LTR   R6,R6               Good return code?\n         BNMR  R8                    Yes, return\n         BAL   R8,EMSGRTN            No, go issue error message\n         B     TERMAPI             Exit\n*----------------------------------------------------------------------\n*        SOCKET READ\n*          R4 - SIZE OF BUFFER\n*          R5 - BUFFER\n*----------------------------------------------------------------------\nREAD     DS    0H\n         EZASMI TYPE=READ,         Issue Macro                         C\n               S=SOCKDESC,         Socket descriptor                   C\n               NBYTE=NBYTE,        Size of buffer                      C\n               BUF=BUF,            Buffer                              C\n               ECB=SECB,           For exits and ECBs                  C\n               RETCODE=RETCODE,    Field for return code               C\n               ERRNO=ERRNO,        Field for returned error number     C\n               ERROR=ERROR         Address to branch to if error occurs\n         L     R6,RETCODE          Load return code\n         LTR   R6,R6               Good return code?\n         BNMR  R8                    Yes, return\n         BAL   R8,EMSGRTN            No, go issue error message\n         BAL   R8,CLOSE            Go close connection\n         B     TERMAPI             Terminate the API\n*----------------------------------------------------------------------\n*        SOCKET WRITE\n*          R4 - SIZE OF BUFFER\n*          R5 - BUFFER\n*----------------------------------------------------------------------\nWRITE    DS    0H\n         EZASMI TYPE=WRITE,        Issue Macro                         C\n               S=SOCKDESC,         Stream socket                       C\n               NBYTE=(R4),         Size of buffer                      C\n               BUF=(R5),           Buffer                              C\n               ECB=SECB,           For exits and ECBs                  C\n               RETCODE=RETCODE,    Field for return code               C\n               ERRNO=ERRNO,        Field for returned error number     C\n               ERROR=ERROR         Address to branch to if error occurs\n         L     R6,RETCODE          Load return code\n         LTR   R6,R6               Good return code?\n         BNMR  R8                    Yes, returnue\n         ST    R8,REGSAVE            Save return address\n         BAL   R8,EMSGRTN            No, issue results message\n         L     R8,REGSAVE          Load original return\n         BR    R8                  Return\n*----------------------------------------------------------------------\n*        PROCESS OPERATOR MODIFY COMMAND\n*----------------------------------------------------------------------\nPMF01000 DS    0H\n         CLC   AGCBCOMM(4),=CL4'STOP' Stop command entered?\n         BE    SHUTDOWN            Go terminate sub-agent\n         CLC   AGCBCOMM(5),=CL5'MAINT' Maint command entered?\n         BE    MAINTCMD                 Yes, go process\n         MVC   AGCBMPL(MSG151EL),MSG151E COPY LIST FORM\n         LA    R2,AGCBMPL          Point to message area\n         MVC   MSG151CM(8,R2),AGCBCOMM  Load message\n         WTO   MF=(E,AGCBMPL)      Issue message to operator\n         B     LOOP                Go await next command\nMAINTCMD DS    0H\n         OI    MODFLAG,MAINTBIT    Set maint command flag\n         LA    R7,AGCBXTCB         Point to subtask TCB/ECB table\n         POST  8(R7)               Post the subtask communication ECB\n         B     LOOP                Go await next command\n*****************************\n*****   EXIT ROUTINES   *****\n*****************************\nSHUTDOWN DS    0H\n*        CHAP  -2\n*        STIMER WAIT,DINTVL=INTV\n         BAL   R8,DELCIB           Done with CIB\n         LA    R7,AGCBXTCB         Point to subtask TCB/ECB table\n         LA    R8,5                Number of TCBs\nTCBLOOP  DS    0H\n         ICM   R6,B'1111',0(R7)    TCB?\n         BZ    NEXTTCB              No, go check next\n         BAL   R14,GOTTCB           Yes, go detach\n         XC    0(4,R7),0(R7)       Clear the TCB entry\nNEXTTCB  DS    0H\n         LA    R7,12(R7)           Point to next table entry\n         BCT   R8,TCBLOOP          Do until end of table\n         B     EXIT                Go shutdown agent\nGOTTCB   DS    0H\n         TM    4(R7),X'80'         Sub task ECB still waiting?\n         BNZ   NOPOST                No, must have abended\n         OI    MODFLAG,SHUTBIT     Set shutdown bit\n         POST  8(R7)               Post the subtask communication ECB\n         WAIT  ECB=4(R7)           Wait for subtask to terminate\nNOPOST   DS    0H\n         DETACH 0(R7),STAE=YES     Detach the subtask\n         LTR   R0,R15              Test DETACH return code\n         BZR   R14                 DETACH good, go finish TCB list\n         ST    R0,AGCBDWD          Save RC\n         MVC   AGCBMPL(MSG245EL),MSG245E Bad detach\n         LA    R2,AGCBMPL          Point to message area\n         LA    R3,NIMJES2N         Start of module name table\n         UNPK  MSG24XRC(9,R2),AGCBDWD(5) Unpack it\n         TR    MSG24XRC(8,R2),HEXTAB Make all of it viewable\n         MVI   MSG24XRC+8(R2),C' ' Get rid of bad byte\n         MVC   MSG24XNM(8,R2),0(R3) Move in module name\n         WTO   MF=(E,AGCBMPL)      Issue message to operator\n         BR    R14                 Go finish TCB list\nEXIT     DS    0H\n         MVC   AGCBMPL(MSG199IL),MSG199I Copy the WPL for message 2\n         WTO   MF=(E,AGCBMPL)      Issue message to operator\n         L     R9,4(,R13)          Get high save (last SACB reference)\n         FREEMAIN RU,              Free the AGCB                       C\n               LV=AGCBLEN,                                             C\n               A=(10),                                                 C\n               SP=230\n         LR    R13,R9              Get high save area address\n         RETURN (14,12),RC=0       Return to MVS, terminate sub task\n******************************\n*****   ERROR ROUTINES   *****\n******************************\nERROR    ABEND 1,DUMP\n         CNOP  2,4\nEMSGRTN  DS    0H\n         MVC   AGCBMPL(MSG150EL),MSG150E  Copy list form\n         LA    R2,AGCBMPL          Point to message area\n         MVC   MSG150FN(8,R2),FUNC Move function name to msg\n         MVI   MSG150SN(R2),C'-'   Move sign\n         CVD   R6,AGCBDWD          Convert it to decimal\n         UNPK  MSG150RC(8,R2),AGCBDWD+4(4) Unpack it\n         OI    MSG150RC+7(R2),X'F0' Correct the sign\n         L     R6,ERRNO            Get ERRNO value\n         CVD   R6,AGCBDWD          Convert it to decimal\n         UNPK  MSG150EN(8,R2),AGCBDWD+4(4) Unpack it\n         OI    MSG150EN+7(R2),X'F0' Correct the sign\n         SR    R6,R6               Clear out...\n         ST    R6,RETCODE          RETCODE and...\n         ST    R6,ERRNO               ERRNO\n         WTO   MF=(E,AGCBMPL)      Issue message to operator\n         BR    R8                  Return\n*SNAPRTN  DS    0H\n*         STM   R2,R3,REGSAVE\n*         LA    R2,AGCBID\n*         LA    R3,REGSAVE+12\n*         MVC   AGCBMPL(NIMLPLL),NIMLPL  COPY LIST FORM LINK\n*         LINK  EP=PCCSSNAP,PARAM=((R2),(R3)),VL=1,MF=(E,AGCBMPL)\n*         LM    R2,R3,REGSAVE\n*         BR    R8\n         USING DPIPDU,R5           Get addressability\nOIDERR   DS    0H\n         MVI   DPIPERRC,noSuchNm   Load no such name error\nBADRESP  DS    0H\n         LA    R5,RESPPDU          Point to response PDU\n         MVI   DPIPTYPE,DPIRESP    Indicate DPI response PDU\n         MVI   DPIPERRI+3,X'01'    Error code index\n         LA    R4,11               Set length of packet\n         IC    R4,DPIPLEN+1        Add to pdu\n         LA    R4,2(R4)            Set length of pdu\n         ST    R4,REGSAVE          Save it\n         LA    R4,REGSAVE          Point to it\n         MVC   FUNC(8),=CL8'DWRITE3' Indicate write function\n         BAL   R8,WRITE            Go write the response PDU\n         B     LOOP                Go await next command\n         DROP  R5\n         EJECT\n**************************************************\n***   S T O R A G E    D E F I N I T I O N S   ***\n**************************************************\n         EJECT\nR0       EQU   0                   Register\nR1       EQU   1                     equates\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8                   BAL return\nR9       EQU   9\nR10      EQU   10                  Program addressability\nR11      EQU   11                  AGCB addressability\nR12      EQU   12                  Program addressability\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         DS    0F\nDFLTXTME DC    CL8'00010000'       Default wait between checks nimexst\nDFLTJTME DC    CL8'00050000'       Default wait between checks nimjes2\nDFLTHTME DC    CL8'00010000'       Default wait between checks nimhsm\nDFLTDTME DC    CL8'00010000'       Default wait between checks nimdasd\nDFLTSTME DC    CL8'00003000'       Default wait between checks nimsys\nNIMEXSTN DC    CL8'NIMEXST'        Existence monitor\nNIMJES2N DC    CL8'NIMJES2'        JES2 monitor\nNIMHSMN  DC    CL8'NIMHSM'         HSM monitor\nNIMDASDN DC    CL8'NIMDASD'        V2X monitor\nNIMSYSN  DC    CL8'NIMSYS'         SYS monitor\nVNIMEXST DC    V(NIMEXST)          module address\nVNIMJES2 DC    V(NIMJES2)          module address\nVNIMHSM  DC    V(NIMHSM)           module address\nVNIMDASD DC    V(NIMDASD)          module address\nVNIMSYS  DC    V(NIMSYS)           module address\nSNMPPORT DC    H'161'              SNMP listening prot\nNBYTE    DC    F'75'               SIZE OF BUFFER\nINET     DC    F'2'\nSTREAM   DC    F'1'\nDATAGRAM DC    F'2'\nMAXSOC   DC    F'50'\nMAXSNO   DC    F'49'\nAPITYPE  DC    H'2'\nPDU1     EQU   * Get dpiPortForTCP.0\n         DC    X'30'\n         DC    AL1(PDU1L-2)\n         DC    X'02010004'\n         DC    X'08',C'shandtss'\n         DC    X'A01C'\n         DC    X'020101'\n         DC    X'020100'\n         DC    X'020100'\n         DC    X'3011'\n         DC    X'300F'\n         DC    X'060B'\n         DC    X'2B06010401020201010100'\n         DC    X'0500'\nPDU1L    EQU   *-PDU1\nPDU1LEN  DC    A(PDU1L)\n*\nPDU2     EQU   * SNMP_DPI_OPEN\nPDULEN   DC    AL2(PDU2L-2)\nHDR      DC    X'02020000'\nREQID    DC    X'00'\nPDUTYPE  DC    X'08'\nTIMEOUT  DC    X'0078'\nMAXVBIND DC    X'00'\nCHARSET  DC    X'00'\nSAID     DC    X'00',C'1.3.6.1.4.1.15037'    subagent ID\nDESC     DC    X'00',C'NimBUS SNMP Subagent'\n         DC    X'000000'\nPDU2L    EQU   *-PDU2\nPDU2LEN  DC    A(PDU2L)\n*\nPDU3     EQU   * SNMP_DPI_REGISTER\n         DC    AL2(PDU3L-2)\n         DC    X'02020000'\n         DC    X'00'\n         DC    X'06'\n         DC    X'FFFFFFFF'\n         DC    X'00000000'\nOID      DC    C'1.3.6.1.4.1.15037.',X'00'\nPDU3L    EQU   *-PDU3\nPDU3LEN  DC    A(PDU3L)\n*\nPDU4     EQU   * DPI_RESPONSE\n         DC    AL2(PDU4L-2)\n         DC    X'020200'\n         DC    X'0000'                       request id\n         DC    X'05'                         DPI_Response\n         DC    X'05'                         Error code\n         DC    X'00000000'                   Error Index\nPDU4L    EQU   *-PDU4\nPDU4LEN  DC    A(PDU4L)\nNIMAXPL  EXTRACT *-*,'S',FIELDS=(COMM,TIOT),MF=L\nNIMAAPL  ATTACH EPLOC=*-*,ECB=*-*,SM=SUPV,DISP=YES,SZERO=NO,SF=L\nNIMAEPL  ESTAE *-*,TERM=YES,       LIST FORM ESTAE PARMLIST            C\n               RECORD=YES,PARAM=*-*,MF=L\nNIMLPL   LINK  SF=L\nNIMLPLL  EQU   *-NIMLPL\nMSG100I  WTO   'NMAG100I NIMBUS AGENT INITIALIZATION COMPLETE.',ROUTCDEC\n               =(1,10),MF=L\nMSG100IL EQU   *-MSG100I\nMSG199I  WTO   'NMAG199I NIMBUS AGENT TERMINATION COMPLETE.   ',ROUTCDEC\n               =(1,10),MF=L\nMSG199IL EQU   *-MSG199I\nMSG141I  WTO   'NMAG141I XXXXXXXX PROBE SUCCESSFULLY ATTACHED',ROUTCDE=C\n               (1,10),MF=L\nMSG141IL EQU   *-MSG141I\nMSG14XNM EQU   WPLTXT-WPL+9,8\nMSG142I  WTO   'NMAG142I XXXXXXXX PROBE SUCCESSFULLY DETACHED',ROUTCDE=C\n               (1,10),MF=L\nMSG142IL EQU   *-MSG142I\nMSG150E  WTO   'NMAG150E xxxxxxxx RETCODE= sxxxxxxxx ERRNO=xxxxxxxx',ROC\n               UTCDE=(1,10),MF=L\nMSG150EL EQU   *-MSG150E\nMSG150FN EQU   WPLTXT-WPL+9,8\nMSG150SN EQU   WPLTXT-WPL+27,1\nMSG150RC EQU   WPLTXT-WPL+28,8\nMSG150EN EQU   WPLTXT-WPL+43,8\nMSG151E  WTO   'NMAG151E UNKNOWN COMMAND ENTERED:           ',ROUTCDE=(C\n               1,10),MF=L\nMSG151EL EQU   *-MSG151E\nMSG151CM EQU   WPLTXT-WPL+34,8\nMSG202E  WTO   'NMAG202E START ERROR, NO START CIB FOUND',ROUTCDE=(1,10C\n               ),MF=L\nMSG202EL EQU   *-MSG202E\nMSG243E  WTO   'NMAG243E SUBTASK EP IDENTIFY FAILED FOR XXXXXXX, R15=XXC\n               XXXXXX',ROUTCDE=(1,10),MF=L\nMSG243EL EQU   *-MSG243E\nMSG243NM EQU   WPLTXT-WPL+40,8\nMSG243RC EQU   WPLTXT-WPL+53,8\nMSG244E  WTO   'NMAG244E SUBTASK ATTACH FAILED FOR XXXXXXX, R15=XXXXXXXC\n                X',ROUTCDE=(1,10),MF=L\nMSG244EL EQU   *-MSG244E\nMSG24XNM EQU   WPLTXT-WPL+35,8\nMSG24XRC EQU   WPLTXT-WPL+48,8\nMSG245E  WTO   'NMAG245E SUBTASK DETACH FAILED FOR XXXXXXX, R15=XXXXXXXC\n                X',ROUTCDE=(1,10),MF=L\nMSG245EL EQU   *-MSG245E\nHEXTAB   EQU   *-240\n         DC    C'01234567'\n         DC    C'89ABCDEF'\n         LTORG\n         EJECT\n*************************\n*** DYNAMIC WORK AREA ***\n*************************\n         TITLE 'SUB TASK APPLICATION CONTROL BLOCK'\n         NIMSTCB ,                 GENERATE STCB DSECT\n         TITLE 'AGENT CONTROL BLOCK (AGCB)'\n         NIMAGCB ,                 GENERATE AGCB DSECT\nTIOT     DSECT ,                   Generate MVS\n         IEFTIOT1 ,                  TIOT dsect\n         IEZWPL ,                  Generate MVS WPL dsect\nCIB      DSECT ,                   Generate MVS\n         IEZCIB ,                    CIB dsect\nCOM      DSECT ,                   Generate MVS\n         IEZCOM  ,                   COMLIST (CSCB) dsect\n         DPIPDU  ,                 Generate DPI PDU layouts\nNIMAGNTL EQU   *-NIMAGNT           Length of this module\n         END NIMAGNT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NIMBCONS": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x007\\x01\\t\\x02\\x1f\\x01\\t\\x02/\\x16\\x18\\x00\\x05\\x00\\x04\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2009-01-21T00:00:00", "modifydate": "2009-01-22T16:18:37", "lines": 5, "newlines": 4, "modlines": 0, "user": "SCHMUM"}, "text": "//***  EMC MONITOR\n//NBC      EXEC PGM=NIMBEMCS,TIME=1440\n//STEPLIB  DD DISP=SHR,DSN=OSS.PROD.ASM.LOAD\n//SYSPRINT DD SYSOUT=X\n//SYSABEND DD SYSOUT=X\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NIMBEMCS": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00C\\x01\\t\\x02\\x1f\\x01\\t\\x03\\x0f\\t$\\x04W\\x04j\\x00,\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2009-01-21T00:00:00", "modifydate": "2009-01-30T09:24:43", "lines": 1111, "newlines": 1130, "modlines": 44, "user": "SCHMUM"}, "text": "//SCHMUMAS JOB (,OSS),'SCHMUTZOK,MIKE',\n//             CLASS=A,MSGCLASS=X,NOTIFY=SCHMUM\n//OUT1     OUTPUT DEPT='TECH SUPPORT',JESDS=ALL,DEFAULT=YES,\n//             TITLE='ASSEMBLE NIMBEMCS'\n/*JOBPARM LINES=100\n//ASMA     EXEC ASMACL,\n//             PARM.C='XREF(SHORT),OBJECT',\n//             PARM.L='LIST,XREF,AC=1' ,RENT,REUS'\n//C.SYSLIB DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SCHMUM.NIMAGNT.MACLIB,DISP=SHR\n//C.SYSIN  DD  *\n*PROCESS  USING(NOWARN)\nIEAEXMCS CSECT ,\nIEAEXMCS AMODE ANY\nIEAEXMCS RMODE 24\n*---------------------------------------------------------------------*\n*- Descriptive name: Application program for setting up an extended  -*\n*-           MCS console interface so that SNMP traps can be sent to -*\n*-           NimBUS for alerting purposes based on selected error    -*\n*-           messages                                                -*\n*-                                                                   -*\n*- Function: An example showing how to use the extended console      -*\n*-           programming interface to activate a console, deactivate -*\n*-           a console, receive messages, process MDB objects, and   -*\n*-           listen for console alerts.                              -*\n*-                                                                   -*\n*-           This example also illustrates use of some other MVS     -*\n*-           operations facilities including:                        -*\n*-           the MODIFY/STOP interface (using EXTRACT and QEDIT),    -*\n*-           CONVCON to see if a console is active,                  -*\n*-           MGCRE to issue system commands,                         -*\n*-           WTO using the TEXT key,                                 -*\n*-           and DOM to delete a held message.                       -*\n*-                                                                   -*\n*-         NIMBEMCS responds to the following MODIFY commands:       -*\n*-                                                                   -*\n*-              ACTIVATE <optional console name>                     -*\n*-                 to activate its extended console                  -*\n*-                                                                   -*\n*-              DEACTIVATE                                           -*\n*-                 to deactivate its extended console                -*\n*-                                                                   -*\n*-           Any other modify command will be reissued as an MVS     -*\n*-           command via MGCRE.                                      -*\n*-                                                                   -*\n*-           Any messages that are received through the extended     -*\n*-           console are reissued as single line WTOs to the last    -*\n*-           console that issued a MODIFY command.                   -*\n*-                                                                   -*\n*-         NIMBEMCS is implemented as a reentrant program.  It must  -*\n*-           be APF authorized.  Wherever possible it runs problem   -*\n*-           state, key 8.                                           -*\n*-                                                                   -*\n*- Operation:                                                        -*\n*-     initialization                                                -*\n*-     main router loop                                              -*\n*-       if done, exit                                               -*\n*-       if message queued, process all messages                     -*\n*-          process all MDBs in the message                          -*\n*-            determine object type                                  -*\n*-            call appropriate processing routine                    -*\n*-              for this example, the processing routines establish  -*\n*-              addressability to the object and return;  no actual  -*\n*-              processing is really performed                       -*\n*-       if alert posted, process the alert                          -*\n*-          display any alert conditions                             -*\n*-          this example doesn't try to recover from any alert       -*\n*-           conditions, it just deactivates the console             -*\n*-       if modify or stop queued, process the CIB                   -*\n*-          when CIB is a modify, determine command                  -*\n*-             when 'ACTIVATE' the console is activated              -*\n*-             when 'DEACTIVATE' the console is deactivated          -*\n*-             otherwise complain about invalid command              -*\n*-          when CIB is a stop, set done flag                        -*\n*-          delete the CIB                                           -*\n*-                                                                   -*\n*- NOTE: This is a re-entrant program, but should be assembled   @P1A-*\n*-       without the PARM=RENT option. If PARM=RENT is used,     @P1A-*\n*-       the assembler will issue warning messages saying        @P1A-*\n*-       \"RE-ENTRANT CHECK FAILED\".                              @P1A-*\n*-       Dynamic variables should be added between the labels    @P1A-*\n*-       DYNMODEL and DYNL.                                      @P1A-*\n*-                                                                   -*\n*---------------------------------------------------------------------*\n* The following console messages will cause an SNMP trap to be sent   *\n* to NimBUS:                                                          *\n*                                                                     *\n* OPS001I xxxxxxxx  (any message - used for testing)                  *\n* DSNJ110E x LAST COPY x ACTIVE LOG DATA SET IS x PERCENT FULL        *\n* IGD17380I STORAGE GROUP (sgname) IS ESTIMATED AT xx% OF CAPACITY    *\n* DFHSM0131 applid CICS is under stress (short on storage below 16MB) *\n* DFHSM0133 applid CICS is under stress (short on storage above 16MB) *\n* DFHSM0102 applid A storage violation has been detected by...        *\n* DFHSM0103 applid A storage violation has been detected by...        *\n* ARKE*****: (A6G0  ) TIF ABEND T*** IN PROGRAM pppppppp              *\n*                                                                     *\n* MAS 12/03/08   Added code to restrict processing of DSNJ110E        *\n*                messages to those with a percentage equal to or      *\n*                greater than 25%                                     *\n*---------------------------------------------------------------------*\n* begin AR mode linkage convention\n       BAKR    R14,0              save regs\n       SAC     512                set AR mode\n       SYSSTATE ASCENV=AR         let macros know\n       LAE     R12,0(R15,0)       base and address regs\n       USING   IEAEXMCS,R12       addressability\n       MODID   ,                  eye catcher and date\n       STORAGE OBTAIN,LENGTH=DYNL,LOC=BELOW get dynamic storage\n       LAE     R11,0(0,R1)        use R11 as dyn base\n       LAE     R2,DYNMODEL        address of dynamic area model\n       L       R3,=A(DYNL)        length of dynamic area\n       LAE     R4,0(0,R11)        address of dynamic area\n       LR      R5,R3              length of dynamic area\n       MVCL    R4,R2              copy model to dynamic area\n       USING   DYNMODEL,R11       map model over dynamic area\n       LAE     R13,SV             put save area addr in R13\n       MVC     4(4,R13),=C'F1SA'  set acro in save area\n* end AR mode linkage convention\n* begin initialization\n       SAC     0                  set primary mode\n       SYSSTATE ASCENV=P          let macros know\n       LA      R9,COMADDR         get address for com area\n       EXTRACT (R9),FIELDS=COMM,  extract the com area                 X\n               MF=(E,EXTRACT)\n       L       R9,COMADDR         get address of the area\n       USING   COM,R9             use R9 as base address of comm area\n       ICM     R7,15,COMCIBPT     get address of the CIB\n       BZ      NOCIB              no start CIB\n       BAL     R14,DOCIB          process the CIB\nNOCIB  DS      0H\n       QEDIT   ORIGIN=COMCIBPT,                                        X\n               CIBCTR=1           set modify limit to 1\n       L       R1,COMECBPT        get address of the com ecb\n       O       R1,=X'80000000'    set high bit - last ecb in list\n       ST      R1,MODECB          put addr of modify ecb in list\n       LA      R1,ECB             get addr of message ecb\n       ST      R1,MECB            put into ecb list\n       LA      R1,ALERT           get addr of alert ecb\n       ST      R1,AECB            put into ecb list\n       MVC     WTOID,=C'WJS999I ' message id for echoed messages\n       MVC     CMDRSP,STRTD       started task, init msg back to cons\n       LA      R1,INITMSG         get initialization message\n       BAL     R14,MESSR          display message\n       MVI     CMDRSP,0           make sure command response reset\n       WTO     TEXT=INITMS2,      display held initialization msg      X\n               MF=(E,WTOHOLD)\n       ST      R1,MSGID           keep held message id for DOM\n       MVC     BUFLENA,=F'20'\n       MVC     BUFFERA(20),=C'/cai/agent/ro/awtrap'\n*                                 PGMNAME\n       LA      R15,=F'6'            LENGTH\n       ST      R15,ARGLLST+00       LENGTH PARM LIST\n       LA      R15,PROGRAM          ARGUMENT\n       ST      R15,ARGSLST+00       ARGUMENT ADDRESS PARM LIST\n*                                 FIRST - PART 1 (-h)\n       LA      R15,=F'2'            LENGTH\n       ST      R15,ARGLLST+04       LENGTH PARM LIST\n       LA      R15,HOST1            ARGUMENT\n       ST      R15,ARGSLST+04       ARGUMENT ADDRESS PARM LIST\n*                                 FIRST - PART 2 (gsm11)\n       LA      R15,=F'13'           LENGTH\n       ST      R15,ARGLLST+08       LENGTH PARM LIST\n       LA      R15,DESTIP           ARGUMENT\n       ST      R15,ARGSLST+08       ARGUMENT ADDRESS PARM LIST\n*                                 SECOND - PART 1 (-c)\n       LA      R15,=F'2'            LENGTH\n       ST      R15,ARGLLST+12       LENGTH PARM LIST\n       LA      R15,COMM1            ARGUMENT\n       ST      R15,ARGSLST+12       ARGUMENT ADDRESS PARM LIST\n*                                 SECOND - PART 2 (shandstss)\n       LA      R15,=F'9'            LENGTH\n       ST      R15,ARGLLST+16       LENGTH PARM LIST\n       LA      R15,COMM2            ARGUMENT\n       ST      R15,ARGSLST+16       ARGUMENT ADDRESS PARM LIST\n*                                 THIRD (1.3.6.1.4.1.15037.6.3)\n       LA      R15,=F'21'           LENGTH\n       ST      R15,ARGLLST+20       LENGTH PARM LIST\n       LA      R15,TRAPOID          ARGUMENT\n       ST      R15,ARGSLST+20       ARGUMENT ADDRESS PARM LIST\n*                                 FOURTH (type - 6)\n       LA      R15,=F'1'            LENGTH\n       ST      R15,ARGLLST+24       LENGTH PARM LIST\n       LA      R15,TYPE             ARGUMENT\n       ST      R15,ARGSLST+24       ARGUMENT ADDRESS PARM LIST\n*                                 FIFTH - PART (subtype)\n       LA      R15,=F'2'            LENGTH\n       ST      R15,ARGLLST+28       LENGTH PARM LIST\n       LA      R15,SUBTYPE          ARGUMENT\n       ST      R15,ARGSLST+28       ARGUMENT ADDRESS PARM LIST\n*                                 SIXTH - Part 1 - VAR NUMBER\n       LA      R15,=F'23'           LENGTH\n       ST      R15,ARGLLST+32       LENGTH PARM LIST\n       LA      R15,VAR1OID          ARGUMENT\n       ST      R15,ARGSLST+32       ARGUMENT ADDRESS PARM LIST\n*                                 SIXTH - PART 2 - VAR TYPE\n       LA      R15,=F'2'            LENGTH\n       ST      R15,ARGLLST+36       LENGTH PARM LIST\n       LA      R15,STRING           ARGUMENT\n       ST      R15,ARGSLST+36       ARGUMENT ADDRESS PARM LIST\n*                                 SIXTH - PART 3 - VAR VALUE\n       LA      R15,VAR1VAL          ARGUMENT\n       ST      R15,ARGSLST+40       ARGUMENT ADDRESS PARM LIST\n*                                 SEVENTH - PART 1 - VAR NUMBER\n       LA      R15,=F'23'           LENGTH\n       ST      R15,ARGLLST+44       LENGTH PARM LIST\n       LA      R15,VAR2OID          ARGUMENT\n       ST      R15,ARGSLST+44       ARGUMENT ADDRESS PARM LIST\n*                                 SEVENTH - PART 2 - VAR TYPE\n       LA      R15,=F'2'            LENGTH\n       ST      R15,ARGLLST+48       LENGTH PARM LIST\n       LA      R15,STRING           ARGUMENT\n       ST      R15,ARGSLST+48       ARGUMENT ADDRESS PARM LIST\n*                                 SEVENTH - PART 3 - VAR VALUE\n       LA      R15,=F'80'           LENGTH\n       ST      R15,ARGLLST+52       LENGTH PARM LIST\n       LA      R15,VAR2VAL          ARGUMENT\n       ST      R15,ARGSLST+52       ARGUMENT ADDRESS PARM LIST\n*                                 SEVENTH - PART 3 - VAR VALUE\n       MVC     ARGCNT,=F'14'      ARG COUNT (INCLUDING PGMNAME)\n* end initialization\n*---------------------------------------------------------------------*\n*-                                                                   -*\n*- LOOP:     ASCMODE=PRIMARY, IN-LINE ENTRY                          -*\n*- Function: Main processing loop; watch for done and posted ECBs    -*\n*- Operation:                                                        -*\n*-     if done then exit                                             -*\n*-     wait for ecb post (message, alert, or modify/stop)            -*\n*-     if message ecb posted, call GETMSGS                           -*\n*-     if alert ecb posted, call DOALERT                             -*\n*-     if modify/stop ecb posted, call DOCIB                         -*\n*-     go back to top of loop                                        -*\n*-                                                                   -*\n*---------------------------------------------------------------------*\nLOOP   DS      0H                 main processing loop\n       CLI     DONE,0             check for termination\n       BZ      WAIT               no, do wait\n       STORAGE RELEASE,           free dynamic storage                 X\n               LENGTH=DYNL,                                            X\n               ADDR=(R11)\n       PR                         exit program\nWAIT   DS      0H\n       WAIT    ECBLIST=ECBS       wait for a message/alert/modify/stop\n       L       R1,ECB             get msg ecb\n       N       R1,=X'40000000'    check for post\n       BZ      CKALRT             not set, check alert\n       XC      ECB,ECB            clear message ecb\n       BAL     R14,GETMSGS        process the message\nCKALRT DS      0H\n       L       R1,ALERT           get alert ecb\n       N       R1,=X'40000000'    check for post\n       BZ      CKCIB              not posted, check modify\n       XC      ALERT,ALERT        clear alert ecb\n       BAL     R14,DOALERT        process alert\nCKCIB  DS      0H\n       ICM     R1,15,COMCIBPT     get CIB pointer\n       BZ      LOOP               no CIB, back to main loop\n       BAL     R14,DOCIB          process the CIB (QEDIT takes care of X\n                                  the ECB)\n       B       LOOP               back to main loop\n*---------------------------------------------------------------------*\n*-                                                                   -*\n*- GETMSGS:  BRANCH ENTERED ASCMODE=PRIMARY, sets ASCMODE=AR         -*\n*- Function: process all messages queued to this console             -*\n*- Operation:                                                        -*\n*-     invoke MCSOPMSG in supervisor state                           -*\n*-     when a message is returned (GOTMDB)                           -*\n*-        loop through the mdb objects                               -*\n*-          when general object, call GOTMDBG                        -*\n*-          when control prog object, call GOTMDBC                   -*\n*-          when text object, call GOTMDBT                           -*\n*-          otherwise unknown object type                            -*\n*-     when an error occurs in MCSOPMSG (GOTERR)                     -*\n*-        put out error message                                      -*\n*-        set done flag to exit program                              -*\n*-     return to caller                                              -*\n*-                                                                   -*\n*---------------------------------------------------------------------*\n       SYSSTATE ASCENV=P          let macros know primary mode\nGETMSGS DS     0H\n       BAKR    R14,0              save caller environment\nMSGLP  DS      0H\n       L       R8,CNID            load the console id in reg 8     @P4A\n       LTR     R8,R8              is the id = 0 (ie was it             X\n                                           deactivated?            @P4A\n       BZ      LVGETM             then leave this proc - no msgs       X\n                                           to receive              @P4A\n       SAC     0                  set primary mode for modeset\n       MODESET MF=(E,SUP)         set sup state\n       SAC     512                this procedure runs in AR mode\n       SYSSTATE ASCENV=AR         let macros know\n       MCSOPMSG REQUEST=GETMSG,   get a message                        X\n               NAME=CNAME,        my console name                  @P5CX\n               RTNCODE=RC,        save return code                     X\n               RSNCODE=RSN,       save reason code                     X\n               MF=(E,MCSOPMPL)\n       LAE     R8,0(0,R1)         put mdb address in R8\n       USING   MDB,R8             addressability to the mdb\n       SAC     0                  set primary mode for modeset\n       SYSSTATE ASCENV=P          let macro know\n       MODESET MF=(E,PROB)        set problem state\n       SAC     512                this procedure runs in AR mode\n       SYSSTATE ASCENV=AR         let macros know\n       MVI     MDBFLGS,0          clear processing flags\n       MVI     CMDRSP,0           assume not issuing command response\n       LA      R15,8              looking for message returned\n       C       R15,RC             see if any messages\n       BH      GOTMDB             process it (rc<8)\n       BL      GOTERR             some kind of error (rc>8)\n       PR                         no more messages (rc=8)\nGOTERR DS      0H\n       LA      R1,BADGET          get error message\n       BAL     R14,MESSR          show it\n       MVI     DONE,1             set done flag\nLVGETM EQU     *                  Exit point of GETMSGS            @P4A\n       PR                         return error message\n*---------------------------------------------------------------------*\n*-                                                                   -*\n*- GOTMDB:   ENTRY VIA BRANCH (NOT A SUBROUTINE)                     -*\n*- Function: Process the general object and control program object   -*\n*-           for a message.  Assumptions must not be made that these -*\n*-           objects will preceed any text objects.                  -*\n*- Operation:                                                        -*\n*-     find end of MDB                                               -*\n*-     loop through objects                                          -*\n*-         when general object                                       -*\n*-           call GOTMDBG to process general object                  -*\n*-         when control program object                               -*\n*-           call GOTMDBC to process control program object          -*\n*-         otherwise ignore object                                   -*\n*-       if both objects found, go process text objects              -*\n*-       skip to next object                                         -*\n*-         add object length                                         -*\n*-         if end of MDB, this MDB does not have proper objects      -*\n*-           to process as a message; just ignore it                 -*\n*-                                                                   -*\n*---------------------------------------------------------------------*\nGOTMDB DS      0H\n       LR      R5,R8              calc end of mbd in R5\n       AH      R5,MDBLEN          start+mdblen in header\n       LR      R6,R8              remember start of MDB for pass 2\n       LA      R8,MDBHLEN(R8)     bump to 1st object\nOBJLP  DS      0H                 loop through the objects\n       LH      R3,MDBTYPE         get type\n       C       R3,=A(MDBGOBJ)     check for general object\n       BNE     NOTG               not general object\n       TM      MDBFLGS,MDBFGO     see if first general object\n       BO      NXTOBJ             no, skip it\n       BAL     R14,GOTMDBG        process general object\n       B       NXTOBJ             bump to next object\nNOTG   DS      0H\n       C       R3,=A(MDBCOBJ)     check for control prog object\n       BNE     NOTC               not control prog object\n       TM      MDBFLGS,MDBFCO     see if first control prog object\n       BO      NXTOBJ             no, skip it\n       BAL     R14,GOTMDBC        process control prog object\n       B       NXTOBJ             bump to next object\nNOTC   DS      0H                 not control prog obj\nNXTOBJ DS      0H                 find next object\n       TM      MDBFLGS,MDBFGO+MDBFCO see if we found general and SCP\n       BO      FNDTXT             got them, loop through text objs\n       AH      R8,MDBLEN          bump to next object\n       CR      R8,R5              see if this is the end\n       BL      OBJLP              no, get another object\n       B       MSGLP              missing necessary objects, skip it\n*---------------------------------------------------------------------*\n*-                                                                   -*\n*- FNDTXT:   ENTRY VIA BRANCH (NOT A SUBROUTINE)                     -*\n*- Function: Process all text objects in all MDBs for this message.  -*\n*-           Text objects are always ordered, but it cannot be       -*\n*-           assumed that they are contiguous.                       -*\n*- Operation:                                                        -*\n*-     find end of MDB                                               -*\n*-     get pointer to next MDB in message                            -*\n*-     loop through MDBs                                             -*\n*-        loop through objects                                       -*\n*-            when text object                                       -*\n*-              call GOTMDBT to process text object                  -*\n*-            otherwise ignore object                                -*\n*-          skip to next object                                      -*\n*-            add object length                                      -*\n*-            if end of MDB, move to next MDB                        -*\n*-                                                                   -*\n*---------------------------------------------------------------------*\nFNDTXT DS      0H\n       LR      R8,R6              reset R8 to start of MDB\nTXTLP  DS      0H\n       LR      R5,R8              calc end of mbd in R5\n       AH      R5,MDBLEN          start+mdblen in header\n       LAE     R6,0(0,R8)         calc prefix address in R6\n       SH      R6,=AL2(MDBPLNNO)  prefix=start-prefix length\n       USING   MDBPRFX,R6         get addressability\n       L       R6,MDBPNEXT        get forward pointer in R6\n       DROP    R6                 R6 no longer base for prefix\n       LA      R8,MDBHLEN(R8)     bump to 1st object\nTOBJLP DS      0H                 loop through the objects\n       LH      R3,MDBTYPE         get type\n       C       R3,=A(MDBTOBJ)     check for text object\n       BNE     NOTT               not text object\n       BAL     R14,GOTMDBT        process text object\nNOTT   DS      0H\n       AH      R8,MDBLEN          bump to next object\n       CR      R8,R5              see if this is the end\n       BL      TOBJLP             no, get another object\n       LTR     R6,R6              check for more MDBs for message\n       BZ      MSGLP              done with message\n       LR      R8,R6              next mdb\n       B       TXTLP              process the mdb\n       DROP    R8\n*---------------------------------------------------------------------*\n*-                                                                   -*\n*- GOTMDBG:  BRANCH ENTERED, ASCMODE=AR, R8=ADDR(general object)     -*\n*- Function: process MDB general object                              -*\n*- Operation:                                                        -*\n*-     establish addressability to the general object                -*\n*-     indicate general object processed                             -*\n*-                                                                   -*\n*---------------------------------------------------------------------*\n       SYSSTATE ASCENV=AR         let macros know AR mode\nGOTMDBG DS     0H\n       BAKR    R14,0              save caller environment\n       USING   MDBG,R8            addressability to general object\n       OI      MDBFLGS,MDBFGO     set processed general object\n       PR\n       DROP    R8\n*---------------------------------------------------------------------*\n*-                                                                   -*\n*- GOTMDBC:  BRANCH ENTERED, ASCMODE=AR, R8=ADDR(control prog object)-*\n*- Function: process MDB control program object                      -*\n*- Operation:                                                        -*\n*-     establish addressability to the control program object        -*\n*-     if this is an MVS object                                      -*\n*-        set flag indicating control prog object found for the msg  -*\n*-        save message text offset for text processing               -*\n*-        if this is a command response message                      -*\n*-           save the CART                                           -*\n*-           indicate that the text echo should be command response  -*\n*-                                                                   -*\n*---------------------------------------------------------------------*\n       SYSSTATE ASCENV=AR         let macros know AR mode\nGOTMDBC DS     0H\n       BAKR    R14,0              save caller environment\n       USING   MDBSCP,R8          addressability to control prog object\n       CLC     MDBCPNAM,=C'MVS '  make sure it is an MVS object\n       BNE     GOTC1              if not, just skip it\n       OI      MDBFLGS,MDBFCO     set processed control prog object\n       LH      R1,MDBCTOFF        get text offset\n       ST      R1,TOFF            save it for text processing\n       TM      MDBCATT1,MDBCMCSC  check if command response\n       BZ      GOTC1              not command response\n       MVC     MCART,MDBCCART     hold onto cart\n       MVI     CMDRSP,1           issue any WTOs as cmd response\nGOTC1  DS      0H\n       PR\n       DROP    R8\n*---------------------------------------------------------------------*\n*-                                                                   -*\n*- GOTMDBT:  BRANCH ENTERED, ASCMODE=AR, R8=ADDR(text object)        -*\n*- Function: process MDB text objects                                -*\n*- Operation:                                                        -*\n*-     establish addressability to the text object                   -*\n*-     calculate the length of the text                              -*\n*-     move it to a buffer                                           -*\n*-     set the length                                                -*\n*-     issue text as a single line WTO                               -*\n*-                                                                   -*\n*---------------------------------------------------------------------*\n       SYSSTATE ASCENV=AR         let macros know AR mode\nGOTMDBT DS     0H\n       BAKR    R14,0              save caller environment\n       USING   MDBT,R8            addressability to text object\n       LH      R1,MDBTLEN         get text object length\n       S       R1,=A(MDBTMSGT-MDBTLEN) subtract non-text size\n       S       R1,TOFF            take off offset to text\n       C       R1,=A(L'WTOTXT)    make sure its not too long for buf\n       BNH     GOTT1              ok\n       L       R1,=A(L'WTOTXT)    not ok, truncate at buf length\nGOTT1  DS      0H\n       S       R1,=F'1'           set up for MVC\n       LAE     R2,MDBTMSGT        get address of text\n       A       R2,TOFF            bump past prefix info\n       CLC     WTOID,0(R2)        see if this message is my echo\n       BE      GOTTX              don't redisplay my text echo\n*****************************************\n*      7 character messages             *\n*****************************************\n* OPS001I  Manual SNMP trap issued by operations\n       LA      R15,=F'8'            LENGTH\n       ST      R15,ARGLLST+40       LENGTH PARM LIST\n       LA      R5,8               message offset\n*      CLC     0(7,R2),=CL7'OPS001I'\n       CLC     0(8,R2),=CL8'OPS001I '\n       BE      GOTT2              Yes, go process it\n*****************************************\n*      8 character messages             *\n*****************************************\n* DSNJ110E x LAST COPY x ACTIVE LOG DATA SET IS x PERCENT FULL\n       LA      R15,=F'8'            LENGTH\n       ST      R15,ARGLLST+40       LENGTH PARM LIST\n       LA      R5,10              message offset\n       CLC     0(8,R2),=CL8'DSNJ110E'  Q. DB2 message?\n       BNE     NXTCHK             A. yes, process it          MAS120308\n       CLI     48(R2),C' '        Q. >9% ?                    MAS120308\n       BE      NXTCHK             A. no, ignore message       MAS120308\n       mvi     temp,c'<'\n       mvc     temp+1(2),47(r2)\n       mvi     temp+3,c'>'\n       PACK    TEMPPK,47(2,R2)    convert to packed decimal   MAS120308\n       CP      TEMPPK,=PL2'24'    Q. >= 25% ?                 MAS120308\n       BH      GOTT2              A. Yes, process message     MAS120308\nNXTCHK DS      0H                                             MAS120308\n*****************************************\n*      9 character messages             *\n*****************************************\n       LA      R15,=F'9'            LENGTH\n       ST      R15,ARGLLST+40       LENGTH PARM LIST\n       LA      R5,10              message offset\n* IGD17380I STORAGE GROUP (sgname) IS ESTIMATED AT xx% OF CAPACITY\n       CLC     0(9,R2),=CL9'IGD17380I'\n       BE      GOTT2              yes, process it\n* DFHSM0131 applid CICS is under stress (short on storage below 16MB)\n       CLC     0(9,R2),=CL9'DFHSM0131'\n       BE      GOTT2              yes, process it\n       CLC     1(9,R2),=CL9'DFHSM0131'\n       BE      GOTT2              yes, process it\n* DFHSM0133 applid CICS is under stress (short on storage above 16MB)\n       CLC     0(9,R2),=CL9'DFHSM0133'\n       BE      GOTT2              yes, process it\n       CLC     1(9,R2),=CL9'DFHSM0133'\n       BE      GOTT2              yes, process it\n* DFHSM0102 applid A storage violation has been detected by...\n       CLC     0(9,R2),=CL9'DFHSM0102'\n       BE      GOTT2              yes, process it\n       CLC     1(9,R2),=CL9'DFHSM0102'\n       BE      GOTT2              yes, process it\n* DFHSM0103 applid A storage violation has been detected by...\n       CLC     0(9,R2),=CL9'DFHSM0103'\n       BE      GOTT2              yes, process it\n       CLC     1(9,R2),=CL9'DFHSM0103'\n       BE      GOTT2              yes, process it\n* ARKE*****: (A6G0  ) TIF ABEND T*** IN PROGRAM pppppppp\n         CLC     0(4,R2),=CL4'ARKE'\n         BNE     GOTTX              none of the above - get out\n         MVC     VAR1VAL(L'VAR1VAL),BLANKS\n         MVC     VAR2VAL(L'VAR2VAL),BLANKS\n         LR      R6,R2              save msg pointer\n         SR      R1,R5              take off offset to msg\n         AR      R2,R5              point to message body\n         EX      R1,GOTTMVC2        move text to buffer\n         LA      R6,VAR2VAL         point to message buffer\n         LR      R2,R1              length of message\n         SH      R2,=H'15'          minus length of string plus some\n         CH      R2,=H'11'          length less than string?\n         BH      TIFLOOP            no, go check\n         B       GOTTX              yes, can't be tif abend msg\nTIFLOOP  DS      0H\n         SAC     0                  run in primary mode\n         SYSSTATE ASCENV=P          tell macros primary mode\n         CLC     0(11,R6),=CL11'TIF ABEND T'  TIF abend message?\n         BE      GOTT3              tif abend found, continue\n         LA      R6,1(R6)\n         BCT     R2,TIFLOOP         Do until all of message checked\n         B       GOTTX              tif abend not found, get out\nGOTT2    DS      0H\n         MVC     VAR1VAL(L'VAR1VAL),BLANKS\n         MVC     VAR2VAL(L'VAR2VAL),BLANKS\n         LR      R6,R2              save msg pointer\n         SR      R1,R5              take off offset to msg\n         AR      R2,R5              point to message body\n         CLI     0(R6),C'+'         + in front of message?\n         BNE     GOTT2A               no, continue\n         AH      R2,=H'1'             yes, point past it\n         SH      R1,=H'1'               subtract 1 from length\n         LA      R6,1(R6)           Point to true msgid\nGOTT2A   DS      0H\n         EX      R1,GOTTMVC2        move text to buffer\nGOTT3    DS      0H\n         S       R5,=F'2'           set up for MVC\n         EX      R5,GOTTMVC1        put msgid in var1val\n         BAL     R14,SENDTRP        go issue trap\nGOTTX    DS      0H\n         PR\nGOTTMVC1 MVC     VAR1VAL(0),0(R6)   put msgid in var1val\nGOTTMVC2 MVC     VAR2VAL(0),0(R2)   put msg in var2val\n         DROP    R8\n*---------------------------------------------------------------------*\n*-                                                                   -*\n*- DOALERT:  BRANCH ENTERED ASCMODE=PRIMARY, sets ASCMODE=AR         -*\n*- Function: process a console alert notification                    -*\n*- Operation:                                                        -*\n*-     establish addressability the the console status area          -*\n*-     check each alert indicator                                    -*\n*-       if set, put out a message                                   -*\n*-     no error handling is performed this example, just             -*\n*-      deactivate the console on any alert                          -*\n*-                                                                   -*\n*---------------------------------------------------------------------*\nDOALERT DS     0H\n       BAKR    R14,0              save caller environment\n       SAC     512                get into AR mode\n       SYSSTATE ASCENV=AR         let macros know\n       L       R2,CSA             get address of the status area\n       LAM     R2,R2,CSAALET      get ALET for status area\n       USING   MCSCSA,R2          establish addressability\n       CLI     MCSCMLIM,0         reached memory limit?\n       BZ      ALRT1              no\n       LA      R1,MSGMLIM         get error message\n       BAL     R14,MESSR          display it\nALRT1  DS      0H\n       CLI     MCSCDLIM,0         reached queue limit?\n       BZ      ALRT2              no\n       LA      R1,MSGDLIM         get error message\n       BAL     R14,MESSR          display it\nALRT2  DS      0H\n       CLI     MCSCINTR,0         internal error?\n       BZ      ALRT3              no\n       LA      R1,MSGINTR         get error message\n       BAL     R14,MESSR          display it\nALRT3  DS      0H\n       CLI     MCSCALRT,0         reached alert percent?\n       BZ      ALRT4              no\n       LA      R1,MSGALRT         get error message\n       BAL     R14,MESSR          display it\nALRT4  DS      0H\n       LA      R1,ALRMSG          get alert message\n       BAL     R14,MESSR          display it\n       BAL     R14,DEACT          deactivate console\n       PR\n*---------------------------------------------------------------------*\n*-                                                                   -*\n*- DOCIB:    BRANCH ENTERED ASCMODE=PRIMARY                          -*\n*- Function: process all CIBs queued to this job                     -*\n*- Operation:                                                        -*\n*-     loop while there are CIBs                                     -*\n*-        when modify CIB                                            -*\n*-           save requesting console id                              -*\n*-           when activate command                                   -*\n*-              invoke MCSOPER to activate the console               -*\n*-              display acknowledgement or error                     -*\n*-           when deactivate command                                 -*\n*-              invoke MCSOPER to deactivate the console             -*\n*-              display acknowledgement or error                     -*\n*-        when stop CIB                                              -*\n*-           set done indicator                                      -*\n*-        delete the CIB                                             -*\n*-     return to caller                                              -*\n*-                                                                   -*\n*---------------------------------------------------------------------*\n       SYSSTATE ASCENV=P          let macros know primary mode\nDOCIB  DS      0H\n       BAKR    R14,0              save caller environment\n       MVI     CMDRSP,1           issue WTOs as command response\nCIBLP  DS      0H\n       ICM     R7,15,COMCIBPT     get address of the CIB\n       BNZ     SVINFO             got one, check the CIB type\n       MVI     CMDRSP,0           turn off cmd response flag\n       PR                         no, return to caller\n       USING   CIB,R7             CIB based on R7\nSVINFO DS      0H\n       LR      R1,R7              get consid and CART from CIBX\n       AH      R1,CIBXOFF         CIBX=addr(CIB)+CIBXOFF\n       USING   CIBX,R1            get addressability\n       MVC     MYOPER,CIBXCNID    get console id that I will talk to\n       MVC     MCART,CIBXCART     keep CART for a cmd response\n       DROP    R1                 done with CIBX\n       CLI     CIBVERB,CIBMODFY   check for modify\n       BNE     CKSTOP             no, try stop\n       CLC     MSGID,=F'0'        do I have a message to be DOMed\n       BE      DOFCMD             no\n       DOM     MSG=MSGID          DOM it\n       XC      MSGID,MSGID        clear held message id\nDOFCMD DS      0H\n       LH      R3,CIBDATLN        get text length in R3\n       C       R3,=A(L'CMDACT)    check cmd length\n       BL      NOTACT             too short\n       CLC     CMDACT(L'CMDACT),CIBDATA  check text\n       BNE     NOTACT             not activate\n       L       R1,CNID            see if I have a console active\n       LTR     R1,R1              any id?\n       BNZ     ISACT              yes, don't activate another\n       MVC     CNAME,=C'NIMBUS  ' default name if none supplied\n       LA      R2,L'CMDACT+1      R2-->past activate command\n       SR      R3,R2              remaining chars in command\n       BNP     CHKNM              no console name provided\n       C       R3,=F'8'           no more than 8 chars in console name\n       BH      CHKNM              too much text for name - ignore it\n       MVC     CNAME,=CL8' '      start with a blank name field\n       LA      R2,CIBDATA(R2)     get address of name in the cib\n       S       R3,=F'1'           calc move length\n       EX      R3,MOVECN          do the move\n       B       CHKNM              see if it is already active\nMOVECN DS      0H\n       MVC     CNAME(0),0(R2)     this move instruction is EX'ed\nCHKNM  DS      0H                 check if console active using convcon\n       XC      CONV(CONVPLEN),CONV clear convcon parm list\n       MVC     CONVACRO,=C'CONV'  set acronym\n       MVI     CONVVRSN,CONVRID   set version\n       OI      CONVFLGS,CONVPFLD  set name to id conversion\n       MVC     CONVFLD,CNAME      set console name\n       OI      CONVGFLG,CONVNPAR  set no area verification\n       CONVCON CONV               call convcon\n       LTR     R15,R15            check rc\n       BNZ     DOACT              branch if not active\nISACT  DS      0H\n       LA      R1,DIDACT          error, console already active\n       BAL     R14,MESSR          show message\n       B       DELCIB             delete CIB\nDOACT  DS      0H\n       LA      R1,OPERPRM         build operparm defaults\n       USING   MCSOPPRM,R1        map area\n       XC      OPERPRM(MCSOPLEN),OPERPRM clear operparm parm list\n       MVI     MCSOAUTH,MCSOMSTR  set master authority\n       MVI     MCSORCFL,MCSORCAL  all route codes\n       MVC     MCSOKEY,=C'EXAMPLE ' set key\n       MODESET MF=(E,SUP)         set sup state to activate console\n       MCSOPER REQUEST=ACTIVATE,  activate the console                 X\n               NAME=CNAME,        activate name found in CNAME         X\n               TERMNAME=CNAME,    use CNAME for the termname audit     X\n               OPERPARM=OPERPRM,  use my OPERPARMs if none in RACF     X\n               MSGDLVRY=FIFO,     request fifo delivery                X\n               MSGECB=ECB,        ecb to be posted when msg is queued  X\n               ALERTECB=ALERT,    ecb to be posted when alert occurs   X\n               MCSCSA=CSA,        returned status area address         X\n               MCSCSAA=CSAALET,   returned status area alet            X\n               CONSID=CNID,       returned console id                  X\n               RTNCODE=RC,        save return code                     X\n               RSNCODE=RSN,       save reason code                     X\n               MF=(E,MCSOPPL)\n       MODESET MF=(E,PROB)        back to problem state\n       ICM     R15,15,RC          get return code\n       BNZ     ACTERR             if non-zero, process error\n       LA      R1,NOWACT          now active message\n       BAL     R14,MESSR          display it\n       B       DELCIB             done with CIB\nACTERR DS      0H\n       LA      R1,BADINI          console initialization error\n       BAL     R14,MESSR          display message\n       B       DELCIB             done with CIB\nNOTACT DS      0H\n       C       R3,=A(L'CMDDACT)   check for deactivate command\n       BL      NOTDACT            bad length\n       CLC     CMDDACT(L'CMDDACT),CIBDATA check text\n       BNE     NOTDACT            not deactivate command\n       BAL     R14,DEACT          deactivate console\n       B       DELCIB             done with CIB\nNOTDACT DS     0H                 not my command, issue it as MGCRE\n       MODESET MF=(E,SUP0)        sup state, key 0 for SVC34\n       LA      R2,CIBDATLN        get address of length field\n       MGCRE   TEXT=(R2),         point text to CIB data length field  X\n               CONSID=CNID,       issue from my console                X\n               CART=MCART,        use input CART to correlate response X\n               MF=(E,MGCREPL)     list form in MGCREPL\n       MODESET MF=(E,PROB)        back to problem state, key\n       B       DELCIB             done with CIB\nCKSTOP DS      0H\n       CLI     CIBVERB,CIBSTOP    check for stop CIB\n       BNE     CKSTRT             not stop either\n       MVI     DONE,1             signal done\n       ICM     R1,15,CNID         get console id\n       BZ      DELCIB             the console is not active\n       BAL     R14,DEACT          deactivate it\n       B       DELCIB             done with CIB\nCKSTRT DS      0H\n       CLI     CIBVERB,CIBSTART   check for start CIB\n       BNE     DELCIB             CIB not used by this prog\n       MVI     STRTD,1            this is a started task\nDELCIB DS      0H\n       QEDIT   ORIGIN=COMCIBPT,                                        X\n               BLOCK=(R7)         free the CIB\n       B       CIBLP              go look for another\n*---------------------------------------------------------------------*\n*-                                                                   -*\n*- DEACT:     BRANCH ENTERED, SETS ASCMODE=PRIMARY                   -*\n*- Function:  deactivate the console                                 -*\n*- Operation:                                                        -*\n*-     save caller state                                             -*\n*-     set sup state for MCSOPER deactivate                          -*\n*-     if rc is 0 then                                               -*\n*-        set current console id to 0 (CNID)                         -*\n*-        display console deactivated message                        -*\n*-      else                                                         -*\n*-        display deactivation error message                         -*\n*-                                                                   -*\n*---------------------------------------------------------------------*\nDEACT  DS      0H\n       BAKR    R14,0              save caller state\n       SAC     0                  runs in primary mode\n       SYSSTATE ASCENV=P          tell macros\n       MODESET MF=(E,SUP)         set sup state\n       MCSOPER REQUEST=DEACTIVATE,                                     X\n               NAME=CNAME,        deactivate the console           @P5CX\n               RTNCODE=RC,        save return code                     X\n               RSNCODE=RSN,       save reason code                     X\n               MF=(E,MCSOPPL)\n       MODESET MF=(E,PROB)        set problem state\n       ICM     R15,15,RC          get return code\n       BNZ     DACTERR            if non-zero, process error\n       XC      CNID,CNID          zero console id to show not active\n       LA      R1,NOWDACT         get not active message\n       BAL     R14,MESSR          display it\n       PR                         return\nDACTERR DS     0H\n       LA      R1,BADDACT         deactivate error\n       BAL     R14,MESSR          display message\n       PR                         return\n*---------------------------------------------------------------------*\n*-                                                                   -*\n*- MESSR:     BRANCH ENTERED, R1=ADDR(message), SETS ASCMODE=PRIMARY -*\n*- Function:  display a message                                      -*\n*- Operation:                                                        -*\n*-       does a WTO of the message passed as the parameter           -*\n*-                                                                   -*\n*---------------------------------------------------------------------*\nMESSR  DS      0H\n       BAKR    R14,0              save caller environment\n       SAC     0                  run in primary mode\n       SYSSTATE ASCENV=P          tell macros primary mode\n       LR      R2,R1              use R2 for text in WTO\n       CLI     CMDRSP,1           check for command response\n       BE      MESSRC             yes, issue as cmd response\n       WTO     TEXT=(R2),         display message                      X\n               MF=(E,WTOPL)\n       PR                         return to caller\nMESSRC DS      0H\n       WTO     TEXT=(R2),         display message                      X\n               CONSID=MYOPER,                                          X\n               CART=MCART,                                             X\n               MF=(E,WTOPLCR)\n       PR                         return to caller\n*---------------------------------------------------------------------*\n*-                                                                   -*\n*- SENDTR:    BRANCH ENTERED, R1=ADDR(message), SETS ASCMODE=PRIMARY -*\n*- Function:  Issue SNMP trap                                        -*\n*- Operation:                                                        -*\n*-       send an snmp trap with the msgid as variable 1 and the      -*\n*-       message body as variable 2                                  -*\n*-                                                                   -*\n*---------------------------------------------------------------------*\nSENDTRP DS      0H\n       BAKR    R14,0             save caller environment\n       SAC     0                 run in primary mode\n       SYSSTATE ASCENV=P         tell macros primary mode\n       MVC     WTOTXT(L'MSG14),MSG14 initialize wto message\n       MVC     WTOTXT(7),=C'BPX1ATX' save function to error msg\n       MVC     WTOID(8),=CL8'WJS014E' save msg id\n       LA      R1,WTOLEN\n       STH     R1,WTOBUF\n       MVC     ENVCNT,=F'0'       NUMBER OF ENV. DATA ITEMS PASSED\n       MVC     ENVLENS,=F'0'      ADDR OF ENV. DATA LENGTH LIST\n       MVC     ENVPARMS,=F'0'     ADD OF ENV. DATA\n       MVC     EXITRTNA,=F'0'     ->EXIT ROUTINE\n       MVC     EXITPLA,=F'0'      ->EXIT PARAMETER LIST\n       OI      RSNCODE,X'80'      Signal end of parameter list\nBPX1ATX DS      0H\n       CALL    BPX1ATX,                                                +\n               (BUFLENA,          input: pathname length               +\n               BUFFERA,           input: pathname                      +\n               ARGCNT,            input: argument count                +\n               ARGLLST,           input: argument length list          +\n               ARGSLST,           input: argument addr LIST            +\n               ENVCNT,            input: environment count             +\n               ENVLENS,           input: environment length list       +\n               ENVPARMS,          input: environment addr list         +\n               EXITRTNA,          input: exit routine addr OR 0        +\n               EXITPLA,           input: exit parm list addr OR 0      +\n               RETVAL,            return value: child PID or -1        +\n               RETCODE,           return code                          +\n               RSNCODE),          reason code                          +\n               VL,MF=(E,PLIST)    --------------------------------\n       L       R15,RETVAL         Load return value\n       C       R15,=F'-1'         test for -1 return\n       BE      BADBPX             -1 is error\nBPX1WAT  DS    0H\n*                                 -waitpid------------------------\n       LA      R15,WAST           resolve address of status\n       ST      R15,WASTA          save address of status\n       MVC     PROCID,RETVAL      wait for attached child\n       MVC     WAITOPT,=F'0'      no options (just wait)\n       SPACE   ,\n       MVC     WTOTXT(7),=C'BPX1WAT' save function to error msg\n       CALL    BPX1WAT,           wait for a child process to end      +\n               (PROCID,           input: PID being waited on           +\n               WAITOPT,           input: options       BPXYCONS        +\n               WASTA,             ->exit status field, BPXTWAST        +\n               RETVAL,            return value: -1, 0, child PID       +\n               RETCODE,           return code                          +\n               RSNCODE),          reason code                          +\n               VL,MF=(E,PLIST)    --------------------------------\n       L       R15,RETVAL         load return value\n       C       R15,=F'-1'         test for -1 return\n       BE      BADBPX             -1 is error\nBPX1MPC DS      0H\n*                                 -mvsprocclp---------------------\n       XC      WAST(WAST#LENGTH),WAST clear\n       MVI     WASTEXITCODE,57    user defined exit code\n       SPACE   ,\n       MVC     WTOTXT(7),=C'BPX1MPC' save function to error msg\n       CALL    BPX1MPC,           mvs process cleanup                  +\n               (WAST,             input: ending status code 0-255      +\n               RETVAL,            return value: 0, -1 or 1             +\n               RETCODE,           return code                          +\n               RSNCODE),          reason code                          +\n               VL,MF=(E,PLIST)    --------------------------------\n       L       R15,RETVAL         load return value\n       C       R15,=F'-1'         test for -1 return\n       BE      BADBPX             if -1, then go complain\n       SAC     512                run in primary mode\n       SYSSTATE ASCENV=AR         tell macros primary mode\n       PR                         return to caller\nBADBPX DS    0H\n       MVC     TEMP(4),RETVAL     save it\n       UNPK    TEMP2(9),TEMP(5)   make it viewable\n       TR      TEMP2(8),TABLE     all of it\n       MVC     WTOTXT+ORETVAL(8),TEMP2\n       MVC     TEMP(4),RETCODE    save it\n       UNPK    TEMP2(9),TEMP(5)   make it viewable\n       TR      TEMP2(8),TABLE     all of it\n       MVC     WTOTXT+ORETCODE(8),TEMP2  move to wto\n       MVC     TEMP(4),RSNCODE    save it\n       UNPK    TEMP2(9),TEMP(5)   make it viewable\n       TR      TEMP2(8),TABLE     all of it\n       MVC     WTOTXT+ORSNCODE(8),TEMP2  MOVE TO WTO\n       LA      R1,WTOBUF          UNIX sys srvc error\n       SAC     512                run in primary mode\n       SYSSTATE ASCENV=AR         tell macros primary mode\n       BAL     R14,MESSR          display message\n       PR                         return to caller\n*---------------------------------------------------------------------*\n*- messages                                                          -*\n*---------------------------------------------------------------------*\nBADINI  DC     AL2(L'MSG0)\nMSG0    DC     C'WJS000I ERROR ACTIVATING CONSOLE'\nBADGET  DC     AL2(L'MSG1)\nMSG1    DC     C'WJS001I ERROR TRYING TO GET A MESSAGE'\nDIDACT  DC     AL2(L'MSG2)\nMSG2    DC     C'WJS002I CONSOLE IS ALREADY ACTIVE'\nNOWACT  DC     AL2(L'MSG3)\nMSG3    DC     C'WJS003I CONSOLE HAS BEEN ACTIVATED'\nNOWDACT DC     AL2(L'MSG5)\nMSG5    DC     C'WJS005I CONSOLE HAS BEEN DEACTIVATED'\nBADDACT DC     AL2(L'MSG6)\nMSG6    DC     C'WJS006I ERROR DEACTIVATING CONSOLE'\nALRMSG  DC     AL2(L'MSG7)\nMSG7    DC     C'WJS007I ALERT DETECTED - DEACTIVATING CONSOLE'\nINITMSG DC     AL2(L'MSG8)\nMSG8    DC     C'WJS008I NOW ACCEPTING MODIFY COMMANDS'\nMSGMLIM DC     AL2(L'MSG9)\nMSG9    DC     C'WJS009I CONSOLE QUEUEING STOPPED DUE TO MEMORY LIMIT'\nMSGDLIM DC     AL2(L'MSG10)\nMSG10   DC     C'WJS010I CONSOLE QUEUEING STOPPED DUE TO DEPTH LIMIT'\nMSGINTR DC     AL2(L'MSG11)\nMSG11   DC     C'WJS011I INTERNAL SYSTEM ERROR ON CONSOLE'\nMSGALRT DC     AL2(L'MSG12)\nMSG12   DC     C'WJS012I RECEIVED QUEUE DEPTH ALERT'\nINITMS2 DC     AL2(L'MSG13)\nMSG13   DC     C'WJS013I WAITING FOR FIRST COMMAND'\nMSG14   DC     C'        : RETVAL=        , RETCODE=        , RSNCODE= X\n                      '\n*---------------------------------------------------------------------*\n*- static variables                                                  -*\n*---------------------------------------------------------------------*\nCMDACT   DC    C'ACTIVATE'        activate command\nCMDDACT  DC    C'DEACTIVATE'      deactivate command\nPROGRAM  DC    CL6'awtrap'\nHOST1    DC    CL2'-h'\nDESTIP   DC    CL13'159.178.31.55'\nCOMM1    DC    CL2'-c'\nCOMM2    DC    CL9'shandstss'\nTRAPOID  DC    CL19'1.3.6.1.4.1.15037.6.3'\nVAR1OID  DC    CL21'1.3.6.1.4.1.15037.1.2.6'\nVAR2OID  DC    CL21'1.3.6.1.4.1.15037.1.2.7'\nTYPE     DC    CL1'6'\nSUBTYPE  DC    CL2'15'\nSTRING   DC    CL2'-s'\nPLIST    CALL  ,(,,,,,,,,,,,,),VL,MF=L\nORETVAL  EQU   17\nORETCODE EQU   17+18\nORSNCODE EQU   17+18+18\nBLANKS   DC    CL80' '\nTABLE    EQU   *-240\n         DC    C'0123456789ABCDEF'\n        LTORG\n*---------------------------------------------------------------------*\n*- dynamic area model                                                -*\n*---------------------------------------------------------------------*\nDYNMODEL DS    0F\nECBS    DS     0CL12              ecb list for wait\nMECB    DS     A                    addr(message ecb)\nAECB    DS     A                    addr(alert ecb)\nMODECB  DS     A                    addr(modify/stop ecb)\nCNID    DC     F'0'               console id\nCSA     DS     A                  addr(mcscsa)\nCSAALET DS     F                  alet(mcscsa)\nECB     DC     F'0'               message ecb\nALERT   DC     F'0'               alert ecb\nCOMADDR DS     F                  addr(comarea) from extract\nRC      DS     F                  return code from mcsoper/mcsopmsg\nRSN     DS     F                  reason code from mcsoper/mcsopmsg\nMYOPER  DS     F                  console id from last modify command\nMSGID   DC     F'0'\nOPERPRM DS     CL(MCSOPLEN)       OPERPARMs area\nMCART   DS     CL8                CART from message or CIB\nCNAME   DS     CL8                console name to activate\n        DC     CL2'  '            space for area id on convcon\nSV      DS     18F                save area\nBUFLENA  DS    F\nARGCNT   DS    F\nARGLLST  DS    14A\nARGSLST  DS    14A\nENVCNT   DS    F\nENVLENS  DS    F\nENVPARMS DS    F\nEXITRTNA DS    A\nEXITPLA  DS    A\nRETVAL   DS    F\nRETCODE  DS    F\nRSNCODE  DS    F\nPROCID   DS    F                Process ID\nWASTA    DS    A                ->BPXYWAST\nWAITOPT  DS    A                WAIT OPTIONS\nTOFF     DS    F                offset to message in text object\nMOFF     DS    F                offset to msg body in text object\nDONE     DC    FL1'0'           done flag\nMDBFLGS  DC    FL1'0'           mdb flags\nBUFFERA  DS    CL256\nVAR1VAL  DS    CL9              VARIABLE1 VALUE (MSGID)\nVAR2VAL  DS    CL80             VARIABLE2 VALUE (MSG)\nTEMPPK   DS    PL2\nTEMP     DS    CL5\nTEMP2    DS    CL9\nMDBFGO   EQU   X'01'            processed general object\nMDBFCO   EQU   X'02'            processed control prog object\nCMDRSP   DC    FL1'0'           command response flag\nSTRTD    DC    FL1'0'           indicator that this was started task\n         DS    0H\nWTOBUF   DS    FL2              length for dynamic messages\nWTOID    DS    CL8              messge id for echoed messages\nWTOTXT   DS    CL118            message text\nWTOLEN   EQU   *-WTOBUF\n         EJECT\nWTOPL   WTO    TEXT=,             WTO parameter list                   X\n               DESC=(7),                                               X\n               MF=L\nWTOPLCR WTO    TEXT=,             WTO parameter list for cmd response  X\n               CONSID=,                                                X\n               CART=,                                                  X\n               DESC=(5,7),        descriptor code 5 is cmd response    X\n               MF=L\nWTOHOLD WTO    TEXT=,             WTO parameter list to hold msgs      X\n               DESC=(3,7),                                             X\n               MF=L\n        EJECT\nMGCREPL MGCRE  MF=(L)             MGCRE parameter list\n        EJECT\nSUP     MODESET MODE=SUP,MF=L     MODESET parm list for sup state\nSUP0    MODESET MODE=SUP,                                              X\n               KEY=ZERO,MF=L      MODESET parm list for sup, key 0\nPROB    MODESET MODE=PROB,                                             X\n               KEY=NZERO,MF=L MODESET parm list for problem state\nEXTRACT EXTRACT MF=L              EXTRACT parameter list\n        EJECT\n        IEZVG200 DSECT=NO         CONVCON parameter list\n        EJECT\n        MCSOPER MF=(L,MCSOPPL)    MCSOPER parameter list\n        EJECT\n        MCSOPMSG MF=(L,MCSOPMPL),PLISTVER=2 MCSOPMSG Parm List     @P5C\n        BPXYWAST DSECT=NO         Status word for wait\nDYNL    EQU    *-DYNMODEL         dynamic area length\n*---------------------------------------------------------------------*\n*- required DSECTs                                                   -*\n*---------------------------------------------------------------------*\n        EJECT\n        CVT DSECT=YES\n        EJECT\n        IEAVG132 ,                mdb prefix\n        EJECT\n        IEAVM105 ,                mdb\n        EJECT\n        IEAVG131 ,                console status area\n        EJECT\n        IEZVG111 ,                operparm parameter area\n        EJECT\nCOM     DSECT\n        IEZCOM   ,                COM area\n        EJECT\nCIB     DSECT\n        IEZCIB   ,                CIB and CIBX\n        IEZVX100\n        BPXYCONS ,                OS/390 UNIX CONSTANTS\n*---------------------------------------------------------------------*\n*- register usage                                                    -*\n*---------------------------------------------------------------------*\nR1      EQU    1                  work and parm reg\nR2      EQU    2                  work reg\nR3      EQU    3                  work reg\nR4      EQU    4                  work reg\nR5      EQU    5                  pointer to end of the mdb\nR6      EQU    6                  next mdb pointer\nR7      EQU    7                  base for CIB\nR8      EQU    8                  base for mdb and mdb objects\nR9      EQU    9                  base for com area\nR11     EQU    11                 dynamic storage base\nR12     EQU    12                 module base\nR13     EQU    13                 linkage\nR14     EQU    14                 linkage\nR15     EQU    15                 linkage\n        END\n//L.SYSLMOD DD DSN=OSS.PROD.ASM.LOAD,DISP=SHR\n//L.SYSLIB DD  DSN=SYS1.CSSLIB,DISP=SHR\n//L.SYSIN  DD  *\n    NAME NIMBEMCS(R)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NIMDASD": {"ttr": 3079, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x10\\x00@\\x01\\x07'\\x8f\\x01\\t\\x02/\\x16\\x10\\x00\\xfb\\x00\\xae\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@\"", "ispf": {"version": "01.16", "flags": 0, "createdate": "2007-10-05T00:00:00", "modifydate": "2009-01-22T16:10:40", "lines": 251, "newlines": 174, "modlines": 0, "user": "SCHMUM"}, "text": "NIMDASD  TITLE 'DASD subtask for the sub-agent     BY M.SCHMUTZOK'\n*PROCESS USING(WARN(15))\n         ACONTROL CPAT(NOSYSL,NOCASE)\n**********************************************************************\n*  (C)   Copyright Shands HealthCare, 2009                           *\n*  Program was written by:                                           *\n*    Michael Schmutzok                                               *\n*    Sr. Systems Programmer                                          *\n*    Shands HealthCare                                               *\n*    Information Services                                            *\n*    1329 SW 16th St, Room 3150                                      *\n*    Gainesville, FL  32608-1128                                     *\n*    mailto:schmum@shands.ufl.edu                                    *\n*    352.265.7982          (fax)                                     *\n*    352.265.8317  x85465  (voice)                                   *\n**********************************************************************\n*                                                                    *\n*  MODULE NAME:  NIMDASD                                             *\n*                                                                    *\n*                                                                    *\n*  DESCRIPTIVE NAME:  SNMP SUBAGENT FOR NIMBUS                       *\n*                                                                    *\n*  FUNCTION: THIS MODULE IS UNDER CONSTRUCTION. FUTURE USES MAY      *\n*            INCLUDE:                                                *\n*                                                                    *\n*            - STATUS CHECKS FOR THE V2X AND V2X2                    *\n*            - FLASHCOPY STATUS OF VOLUMES                           *\n*            - V2X/V2X1 ERRORS                                       *\n*            - STORAGE POOL FREESPACE LEVELS                         *\n*                                                                    *\n*  OPERATION: THE FOLLOWING ACTIONS ARE TAKEN BY THIS MODULE:        *\n*      1) INITIALIZE THE SUB-TASK CONTROL BLOCK                      *\n*      2) ESTABLISH THE ESTAE ENVIRONMENT                            *\n*      3) SET THE TIMER                                              *\n*      4) WAIT FOR TIMER POP OR AGENT POST                           *\n*      5) UPDATE THE MIB VALUES                                      *\n*                                                                    *\n*  DEPENDENCIES: IF USING THE SNAP FUNCTION FOR DEBUGGING, MAKE      *\n*                SURE THE PCCSSNAP MODULE IS IN THE STEPLIB OR       *\n*                LINKLIST TO PREVENT S806 ABEND                      *\n*                                                                    *\n*  RESTRICTIONS: NONE                                                *\n*                                                                    *\n*  REGISTER CONVENTIONS:                                             *\n*                                                                    *\n*          STANDARD ENTRY LINKAGE                                    *\n*                                                                    *\n*          R0 AND R1 USED FOR SYSTEM SERVICE INVOCATION              *\n*          R2 THROUGH R6 ARE WORK REGISTERS                          *\n*          R7 AGCB ADDRESSING                                        *\n*          R8 THROUGH R9 ARE WORK REGISTERS                          *\n*          R10 AGCB ADDRESSING                                       *\n*          R11 IS A WORK REGISTERS                                   *\n*          R12 IS THE BASE REGISTER                                  *\n*                                                                    *\n*                                                                    *\n*  INPUT:  None                                                      *\n*                                                                    *\n*  OUTPUT: UPDATED MIB VALUES                                        *\n*                                                                    *\n*  RETURN CODES = 0  NORMAL TERMINATION                              *\n*                                                                    *\n**********************************************************************\n         SPACE 1\n         PRINT ON,GEN,NODATA\n         SPACE 1\nNIMDASD  CSECT ,                   Establish the NIMDASD csect\n         SPACE 1\n         USING *,R15\n         SPACE 1\nNIMDASD  MODID                     Est. module identification\n         STM   R14,R12,12(R13)     Save the caller's registers\n         LR    R12,R15             Setup the local base register\n         DROP  R15\n         USING NIMDASD,R12         Est. code addressability\n         LR    R7,R1               Save the AGCB address\n         USING AGCB,R7             Establish AGCB addr.\n         LA    R15,NIMD000         Prepare for the BSM\n         O     R15,=X'80000000'    Indicate AMODE=31\n         BSM   R0,R15              Set the AMODE, continue on\nNIMD000  DS    0H\n         MODESET KEY=NZERO,        Get into supervisor state           C\n               MODE=SUP\n         GETMAIN RC,               Allocate STCB                       C\n               LV=STCBLEN,                                             C\n               SP=230,                                                 C\n               LOC=ANY\n         LTR   R15,R15             Successful GETMAIN ...\n         BZ    NIMD010              Yes, skip ABEND and continue\n         ABEND 666,,,USER          Terminate the subtask (not the FSS)\nNIMD010  DS    0H\n         LR    R10,R1              Set STCB addressability\n         USING STCB,R10            Establish global addr. for          C\n                                    the STCB\n         LR    R2,R10              Zero the\n         LA    R3,STCBLEN           new subtask\n         MVCL  R2,R14                control block\n         MVC   STCBID,=C'STCB'     Set the eye catcher\n         MVC   STCBMN,=C'NIMDASD ' Set the module name\n         SPACE 1\n         ST    R7,STCBAGCB         Save the AGCB address\n         LA    R15,STCBSAVE        Perform\n         ST    R13,4(,R15)           save\n         ST    R15,8(,R13)             area\n         LR    R13,R15                   linkage\n***********************************************************************\n*        SET UP ESTAE ROUTINE                                         *\n***********************************************************************\n         MVC   STCBMPL(NIMEPLL),NIMEPL    Copy list form ESTAE\n         L     R2,=V(NIMESTA)      Get the ESTAE routine address\n         ESTAE (2),                Establish the ESTAE exit            C\n               MF=(E,STCBMPL),                                         C\n               PARAM=(R10)\n         MVC   STCBMPL(WTO1L),WTO1 Copy the WPL for message 1\n         WTO   MF=(E,STCBMPL)      Issue message to operator\n***********************************************************************\n*        INITIALIZATION                                               *\n***********************************************************************\n         MVC   DASDMET(3),=X'090001'   V2X1 status - DspStr, len=1\n         MVC   DASDMET+4(3),=X'090001' V2X2 status - DspStr, len=1\n         OI    INITFLAG,DASDBIT\n***********************************************************************\n*        SET UP TIMER                                                 *\n***********************************************************************\nTIMESET  DS    0H\n         XC    STCBTECB,STCBTECB       Clear the timer ECB\n         TM    STCBFLG1,STCB1TIM       STIMERM set?\n         BO    WAIT                      yes, go finish wait\n         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM\n         LA    R4,STCBTMID             Point to STIMERD id word area\n         LA    R5,AGCBDINT             Get the timer interval address\n         LA    R6,STCBTECB             Get addr of ECB addr\n         ST    R6,STCBCOMA             Save it\n         OI    STCBFLG1,STCB1TIM       Indicate timer outstanding ...\n         STIMERM SET,                  Set/reset NPRO timer            C\n               DINTVL=(R5),                                            C\n               ID=(R4),                                                C\n               EXIT=TIMEXIT,                                           C\n               PARM=STCBCOMA,                                          C\n               MF=(E,STCBMPL)\n***********************************************************************\n*        WAIT FOR TIMER POP OR POST FROM AGENT                        *\n***********************************************************************\nWAIT     DS    0H\n         LA    R6,STCBTECB             Point to timer ECB\n         ST    R6,STCBTEP              Save it in list\n         LA    R6,AGCBECBD             Point to communication ECB\n         ST    R6,STCBCEP              Save it in list\n         OI    STCBCEP,X'80'           Indicate end of ECB list\n         WAIT  1,                      Wait for something to post      C\n               ECBLIST=STCBECBL,                                       C\n               LONG=YES\n         TM    AGCBECBD,X'40'          Did we get posted by the agent?\n         BO    EXIT                     Yes, assume shutdown for now\n         TM    STCBTECB,X'40'          Did the timer pop?\n         BZ    TIMESET                  No, don't know, go wait again\n***********************************************************************\n*        MIB UPDATE                                                   *\n***********************************************************************\nMIBUPDT  DS    0H\n*        WTO   'DASD METRICS ROUTINE'\n         XI    STCBFLG1,STCB1TIM       Clear timer flag\n         B     TIMESET                 Go wait for next interval\n***********************************************************************\n*        TIMER EXIT                                                   *\n***********************************************************************\nTIMEXIT  DS    0H\n         STM   R14,R12,4(R13)          Save regs\n         LR    R4,R1                   Save parameter\n         L     R5,4(R1)                Point to timer ECB\n         POST  (R5)                    Post the ECB\n         LM    R14,R12,4(R13)          Restore regs\n         BR    R14                     Return\n*****************************\n*****   EXIT ROUTINES   *****\n*****************************\nEXIT     DS    0H\n         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM\n         LA    R4,STCBTMID             Point to STIMERD id word area\n         STIMERM CANCEL,               Cancel timer                    C\n               ID=(R4),                                                C\n               MF=(E,STCBMPL)\n         MVC   STCBMPL(WTO2L),WTO2 Copy the WPL for message 2\n         WTO   MF=(E,STCBMPL)      Issue message to operator\n         L     R9,4(,R13)          Get high save (last SACB reference)\n         FREEMAIN RU,              Free the STCB                       C\n               LV=STCBLEN,                                             C\n               A=(10),                                                 C\n               SP=230\n         LR    R13,R9              Get high save area address\n         RETURN (14,12),RC=0       Return to MVS, terminate sub task\n******************************\n*****   ERROR ROUTINES   *****\n******************************\n*SNAPRTN  DS    0H\n*         STM   R2,R3,REGSAVE\n*         LA    R2,STCBTECB\n*         LA    R3,STCBCEP\n*         LA    R4,AGCBDTCB\n*         LA    R5,AGCBECBD\n*         MVC   STCBMPL(NIMLPLL),NIMLPL  COPY LIST FORM LINK\n*         LINK  EP=PCCSSNAP,PARAM=((R2),(R3),(R4),(R5)),VL=1,\n*              MF=(E,STCBMPL)\n*         LM    R2,R3,REGSAVE\n*         BR    R8\n         EJECT\n**************************************************\n***   S T O R A G E    D E F I N I T I O N S   ***\n**************************************************\n         EJECT\nR0       EQU   0                   Register\nR1       EQU   1                     equates\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nNIMLPL   LINK  EP=PCCSSNAP,SF=L\nNIMLPLL  EQU   *-NIMLPL\nNIMEPL   ESTAE *-*,TERM=YES,       List form ESTAE parmlist            C\n               RECORD=YES,PARAM=*-*,MF=L\nNIMEPLL  EQU   *-NIMEPL\nNIMTPL   STIMERM SET,MF=L\nNIMTPLL  EQU   *-NIMTPL\nWTO1     WTO   'NMDA100I DASD PROBE INITIALIZATION COMPLETE',ROUTCDE=(1C\n               ,10),MF=L\nWTO1L    EQU   *-WTO1\nWTO2     WTO   'NMDA199I DASD PROBE TERMINATION COMPLETE',ROUTCDE=(1,10C\n               ),MF=L\nWTO2L    EQU   *-WTO2\n         LTORG\n         EJECT\n*************************\n*** DYNAMIC WORK AREA ***\n*************************\n         TITLE 'SUB TASK APPLICATION CONTROL BLOCK'\n         NIMSTCB ,                 GENERATE STCB DSECT\n         TITLE 'AGENT CONTROL BLOCK (AGCB)'\n         NIMAGCB ,                 GENERATE AGCB DSECT\n         EJECT\nNIMDASDL EQU   *-NIMDASD\n         END NIMDASD\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NIMESTA": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x12\\x00\\x08\\x01\\x07'o\\x01\\t\\x03\\x0f\\t%\\x03G\\x03S\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@\"", "ispf": {"version": "01.18", "flags": 0, "createdate": "2007-10-03T00:00:00", "modifydate": "2009-01-30T09:25:08", "lines": 839, "newlines": 851, "modlines": 0, "user": "SCHMUM"}, "text": "*PROCESS USING(WARN(15))\n         ACONTROL CPAT(NOSYSL,NOCASE)\nNIMESTA  TITLE 'SUBAGENT AND SUBTASK ESTAE ROUTINE   BY M.SCHMUTZOK'\n***********************************************************************\n*                                                                     *\n* MODULE NAME = NIMESTA                                               *\n*                                                                     *\n* DESCRIPTIVE NAME = Agent and subtask ESTAE routine.                 *\n*                                                                     *\n* FUNCTION = This module is used to debug agent and subtask abends.   *\n*                                                                     *\n*                                                                     *\n*    REGISTER CONVENTIONS = R0-R1  =   Parameter/work                 *\n*                           R11    =   SEWA address for this ABEND    *\n*                           R12    =   Code base register             *\n*                           R13    =   Save area address              *\n*                           R14    =   Linkage                        *\n*                           R15    =   Linkage, return codes          *\n*                                                                     *\n* MODULE TYPE = Procedure ( CSECT type )                              *\n*                                                                     *\n*    MODULE SIZE = See the NIMESTL equate at the end of NIMESTA       *\n*                                                                     *\n*    ATTRIBUTES = Reentrant (Key Zero storage)                        *\n*                                                                     *\n*               = AMODE 24 for the agent, AMODE 24 or 31 for the      *\n*                 subtasks (depending on AMODE of the subtask at the  *\n*                 time the ESTAE was established).  Control blocks    *\n*                 will not be RMODE 31 unless the entry AMODE is 31.  *\n*                                                                     *\n*               = RMODE 24                                            *\n*                                                                     *\n* ENTRY POINT = NIMESTA                                               *\n*                                                                     *\n*    PURPOSE = Provide basic ESTAE SNAP support for the agent and     *\n*              sub tasks.                                             *\n*                                                                     *\n*    LINKAGE = SYNCH from RTM due to agent or subtask abend           *\n*                                                                     *\n*    INPUT = SDWA, plus AGCB (agent) or STCB (subtask) in SDWAPARM    *\n*                                                                     *\n*    OUTPUT = Error analysis messages, an SDUMP, a WTOR to hold up    *\n*             messages and prevent the agent and/or subtask address   *\n*             space from ending until debugging can be done,          *\n*             eventually percolation (always).                        *\n*                                                                     *\n*    EXIT-NORMAL = Percolate                                          *\n*                                                                     *\n*    EXIT-ERROR = None                                                *\n*                                                                     *\n* EXTERNAL REFERENCES = See below                                     *\n*                                                                     *\n*    ROUTINES = None                                                  *\n*                                                                     *\n*    DATA AREAS = See mapping macros expanded below                   *\n*                                                                     *\n*    CONTROL BLOCKS = See mapping macros expanded below               *\n*                                                                     *\n* TABLES = None                                                       *\n*                                                                     *\n* MACROS = MVS  - DOM, FREEMAIN, GETMAIN, (IEFJSSIB), (IEFJSSOB),     *\n*                 IEZWPL, IHASDWA, SDUMP, SETRP, WAIT, WTO, WTOR      *\n*                                                                     *\n* MACROS = agent/sub task - NIMSEWA (inline), NIMAGCB                 *\n*                                                                     *\n***********************************************************************\n         TITLE 'General ESTAE/recovery processing comment block'\n***********************************************************************\n*                                                                     *\n*        This module is part of an MVS SNMP agent.                    *\n*                                                                     *\n*        Both the agent and each sub task point to this module as     *\n*        their ESTAE routine. This module does not recover from       *\n*        ABENDS. It purposely issues many in order to stop the task,  *\n*        not recover from ABENDs, but purposely issues many           *\n*        get a snapshot of the situation, allow debugging, etc.       *\n*                                                                     *\n*        The structure of the module, with a separate task            *\n*        per sub task and some 'watching' for the loss of sub tasks   *\n*        in the agent is suitable for repetitive testing. If the      *\n*        agent or a sub task ABENDs, the messages from this ESTAE     *\n*        routine, along with other tools while this ESTAE has its     *\n*        WTOR outstanding, can be used to do some debugging.          *\n*        Afterward, the sub task will end and the agent will          *\n*        cleanup and will end itself.                                 *\n*                                                                     *\n*        This ESTAE routine simply does the following:                *\n*                                                                     *\n*          - Allocates a work area (SEWA) for reentrant use.          *\n*          - Analyzes the error (mostly from the SDWA).               *\n*          - Issues an non-scrollable message about the ABEND.        *\n*          - Takes an SVC dump, and reports on its success.           *\n*          - Issues non-scrollable info messages about the error      *\n*            instruction, PSW, and error registers.  All values are   *\n*            from the agent/subtask's RB level, not necessarily the   *\n*            actual ABENDing instruction (e.g. a GETMAIN SVC is       *\n*            reported, versus the instruction deep within the SVC).   *\n*          - A WTOR is issued to hold up processing to allow          *\n*            debugging.                                               *\n*          - If the WTOR response indicates so, the info messages are *\n*            DOM'ed and re-displayed, either for the last-RB info,    *\n*            or for the time-of-error instruction, PSW, and regs.     *\n*          - After the WTOR, all outstanding messages are DOMed.      *\n*          - The SEWA is FREEMAINed, and the ESTAE percolates.        *\n*                                                                     *\n***********************************************************************\n         TITLE 'ESTAE entry point from RTM'\n***********************************************************************\n*                                                                     *\n*        This is the NIMESTA entry point. The agent or a subtask      *\n*        may have ended, and RTM entered NIMESTA via SYNCH.           *\n*                                                                     *\n*        No assumptions are made about R15 on entry.  We may or may   *\n*        not have an SDWA and its associated save area and error      *\n*        information (normally there WILL be an SDWA).                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         PRINT ON,GEN,NODATA\n         SPACE 1\nNIMESTA  CSECT ,                   Establish the Csect\n         SPACE 1\n         BALR  R12,0               Establishing general\n         USING *,R12                   program addressability\n         SPACE 1\n         B     NIME010             Bypass the prolog information\n         SPACE 1\nNIMESTA  MODID BRANCH=NO           Est. module identification\n         TITLE 'Find the SDWA (if any), ABEND and reason codes'\n***********************************************************************\n*                                                                     *\n*        See if the SDWA is available.  If so:                        *\n*                                                                     *\n*          - save the registers in the save area provided by the      *\n*            system (register 13) if the SDWA was provided            *\n*          - get the ABEND completion code, and the reason code       *\n*          - set R10 to the SDWA address, rather than zero            *\n*                                                                     *\n*        Otherwise:                                                   *\n*                                                                     *\n*          - get the ABEND code from R1, and use a zero reason code   *\n*          - set R10 to zero, rather than an SDWA address             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING SDWA,R10            Establish SDWA addressability\n         SPACE 1\nNIME010  DS    0H\n         C     R0,NOMEMRY          Do we have the SDWA around ...\n         BE    NIME020              No, skip the store of registers\n         SPACE 1\n         STM   R14,R12,12(R13)     Have SDWA, save registors\n         LR    R10,R1              Get A(SDWA) into R10\n         L     R8,SDWAABCC         Get ABEND completion code in R8\n         L     R5,SDWAPARM         Get A(passed parm list) in R5\n         ICM   R7,B'1111',SDWAXPAD Get addr of the SDWAPTRS area\n         BZ    NIME030              None there, R7 reason code zero\n         ICM   R7,B'1111',SDWASRVP-SDWAPTRS(R7)  Get SDWARC1 area addr\n         BZ    NIME030                            None, R7 reason zero\n         L     R7,SDWACRC-SDWARC1(,R7)           Get ABEND reason code\n         B     NIME030                            and go get the parms\n         SPACE 1\nNIME020  DS    0H\n         SLR   R10,R10             Show that the SDWA is not around\n         LR    R8,R1               Get ABEND completion code in R8\n         LR    R5,R2               Get A(passed parm list)\n         SLR   R7,R7               Set a zero reason code\n         SPACE 1\nNIME030  DS    0H\n         LR    R9,R14              Save R14 from destruction\n         SPACE 1\n         DROP  R10                 Drop SDWA addressability\n         TITLE 'GETMAIN an ESTAE work area (SEWA)'\n***********************************************************************\n*                                                                     *\n*        Allocate a work area for this ESTAE routine call.  This      *\n*        area is necessary to allow NIMESTA to remain reentrant.      *\n*                                                                     *\n*        The GETMAIN is performed unconditionally.  If it fails,      *\n*        this ESTAE routine will terminate, but that is reasonable    *\n*        since the routine is for debug snaps only, not recovery.     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING SEWA,R11            Establish SEWA addressability\n         SPACE 1\n         GETMAIN R,LV=SEWALEN,SP=230,LOC=BELOW    Get a work area\n         SPACE 1\n         LR    R11,R1              Establish work area address\n         LR    R2,R11              Zero\n         LA    R3,SEWALEN           the\n         SLR   R15,R15               new\n         MVCL  R2,R14                 SEWA\n         SPACE 1\n         MVC   SEWAID,=C'SEWA'     Set the control block ID\n         ST    R8,SEWACODE         Save the completion code and\n         ST    R7,SEWAREAS          the reason code\n         TITLE 'Analyze the ABEND code, format the first (ABEND) messagC\n               e'\n***********************************************************************\n*                                                                     *\n*        Determine if the ABEND is a SYSTEM or USER ABEND, and the    *\n*        agent or subtask that failed. Build the first WTO message    *\n*        with this information to inform the operator of the ABEND.   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         MVC   SEWAWTO1(ESTAEM1L),ESTAEM1  Copy the WPL for message 1\n         LA    R3,SEWAWTO1                 Point to the message WPL\n         SPACE 1\n         N     R8,SYSMASK                  Is this a system ABEND ...\n         BNZ   NIME040                      Yes, go process as such\n         SPACE 1\n         MVC   ESTAEM1T(6,R3),XUSER        User ABEND, copy ABEND code\n         L     R8,USERMASK                 Get mask for User ABEND code\n         N     R8,SEWACODE                  and clear other nibbles\n         SPACE 1\n         CVD   R8,SEWADWD                  Convert User code to decimal\n         UNPK  SEWABCDE(4),SEWADWD+5(3)     and unpack the PD result\n         OI    SEWABCDE+3,X'F0'            Make last digit printable\n         B     NIME050                     Go complete the ABEND WTO\n         SPACE 1\nNIME040  DS    0H\n         MVC   ESTAEM1T(6,R3),XSYSTEM      System ABEND, copy ABEND cde\n         UNPK  SEWABCDE(3),SEWACODE+1(2)   Unpack the completion code\n         OI    SEWABCDE+2,X'F0'            Turn on the zone digit\n         TR    SEWABCDE(3),HEXTAB          Translate to printable hex\n         SPACE 1\nNIME050  DS    0H\n         MVC   ESTAEM1C(4,R3),SEWABCDE     Move ABEND code to message\n         UNPK  ESTAEM1R(9,R3),SEWAREAS(5)  Unpack the reason code\n         MVI   ESTAEM1R+8(R3),C' '          and fix the last digit\n         SPACE 1\n         CLC   0(4,R5),=C'AGCB'            Agent or subtask....\n         BE    NIME060                      agent, go get agent name\n         USING STCB,R5                     Set up STCB addressability\n         MVC   ESTAEM1N(8,R3),STCBMN-STCB(R5) Save subtask name in MSG\n         MVC   SEWAAGCB,STCBAGCB           Save agent AGCB address\n         OI    STCBFLG1,STCB1ABE           Indicate the subtask\n         OI    SEWAFLG1,SEWA1SUB            is ABENDing\n         B     NIME070                     Go issue the ABEND WTO\n         DROP  R5                          Drop STCB addressability\n         SPACE 1\nNIME060  DS    0H\n         USING AGCB,R5                     Set up AGCB addressability\n         MVC   ESTAEM1N(8,R3),AGCBMN-AGCB(R5) Save agent name in MSG\n         ST    R5,SEWAAGCB                 Save agent AGCB address\n         OI    AGCBFLG1,AGCB1ABE           Indicate agent ABENDing\n         DROP  R5\n         TITLE 'Issue the first (ABEND) message, issue an SVC dump (SDUC\n               MP)'\n***********************************************************************\n*                                                                     *\n*        Issue the first message to notify the operator of the ABEND. *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nNIME070  DS    0H\n         WTO   MF=(E,SEWAWTO1)     Issue ABEND message to operator\n         ST    R1,SEWADID1         Save the DOM ID for message 1\n         SPACE 1\n         L     R1,SEWAAGCB                 Get agent AGCB addr\n         TM    SEWAFLG1,SEWA1SUB           Is this an subtask ABENDing\n         BNO   NIME080                      No, go issue the SDUMP\n         MVI   SEWARESP,C'P'               Fake percolate rep\n         TM    STCBFLG1-STCB(R1),STCB1ABE  Did agent already ABEND ...\n         BO    NIME230                      Yes, skip most NIME logic\n         EJECT\n***********************************************************************\n*                                                                     *\n*        Issue an SDUMP macro to get an SVC dump.                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nNIME080  DS    0H\n         MVC   SEWASDT+1(L'ESTAEM1D),ESTAEM1D(R3)  Copy the dump title\n         MVI   SEWASDT,L'ESTAEM1D                   and set its length\n         MVC   SEWAMPL(NIMEDPLL),NIMEDPL           Copy SDUMP parm list\n         SPACE 1\n         SDUMP HDRAD=SEWASDT,MF=(E,SEWAMPL)        Issue the SDUMP\n         SPACE 1\n         B     NIME090             Check the SDUMP return code\n         SPACE 1\nNIMEDPL  SDUMP HDRAD=*-*,SDATA=(RGN,CSA,LPA,SQA,TRT),QUIESCE=YES,MF=L\nNIMEDPLL EQU   *-NIMEDPL           Length of SDUMP parm list\n         TITLE 'Issue the SDUMP success or failure message to the operaC\n               tor'\n***********************************************************************\n*                                                                     *\n*        Determine if the SVC dump completed successfully.  Either    *\n*        way, let the operator know about the SDUMP status after      *\n*        issuing the first formatted ABEND message.                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING SDWA,R10            Est SDWA addressability\n         SPACE 1\nNIME090  DS    0H\n         LTR   R15,R15             Was a complete dump taken ...\n         BNZ   NIME100              No, go write bad-dump WTO\n         LA    R2,ESTAEM2           Yes, then dump was successful\n         B     NIME110             Go output dump information WTO\n         SPACE 1\nNIME100  DS    0H\n         MVC   SEWAMPL(ESTAEM3L),ESTAEM3     Copy bad-dump WPL\n         LA    R2,SEWAMPL                    Point to the WPL\n         CVD   R15,SEWADWD                   Convert retcode to decimal\n         UNPK  ESTAEM3C(4,R2),SEWADWD+5(3)   Unpack PD return code\n         OI    ESTAEM3C+3(R2),X'F0'          Make last digit printable\n         SPACE 1\n         LTR   R10,R10             Is there an SDWA ...\n         BZ    NIME110              No, no reason code\n         ICM   R1,B'1111',SDWAXPAD Get addr of SDWAPTRS area\n         BZ    NIME110              None there, no reason code\n         ICM   R1,B'1111',SDWASRVP-SDWAPTRS(R1)  Get SDWARC1\n         BZ    NIME110                            None, no rc\n         SLR   R15,R15             Pick up the reason code\n         IC    R15,SDWASDRC-SDWARC1(,R1) from the SDWA and\n         CVD   R15,SEWADWD                convert to decimal\n         UNPK  ESTAEM3R(4,R2),SEWADWD+5(3)   Unpack PD reason\n         OI    ESTAEM3R+3(R2),X'F0'          Fix last digit\n         SPACE 1\nNIME110  DS    0H\n         WTO   MF=(E,(2))          Issue a message about the SVC DUMP\n         ST    R1,SEWADID2         Save the DOM ID for MSG 2 or 3\n         TITLE 'Collect last-RB or time-of-error PSW, registers, etc frC\n               om the SDWA'\n***********************************************************************\n*                                                                     *\n*        This code begins the logic to display the messages about     *\n*        the error.  It might be executed more than once, being       *\n*        looped back upon after the end-of-ESTAE WTOR.                *\n*                                                                     *\n*        Either the last-RB or the time-of-error information about    *\n*        the problem are to be displayed.  The first entry into this  *\n*        code does not have SEWA1TOE on, so the last-RB information   *\n*        is to be displayed.  Later cases may have it on.             *\n*                                                                     *\n*        The appropriate information from the SDWA is collected here. *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nNIME120  DS    0H\n         LTR   R10,R10             Was SDWA acquired for us...\n         BZ    NIME210              No, just WTOR/exit then\n         SPACE 1\n         TM    SEWAFLG1,SEWA1TOE   Use time-of-error SDWA?\n         BO    NIME130              Yes, go copy those values\n         SPACE 1\n         MVC   SEWAEC,SDWAEC2      Copy\n         MVC   SEWAINC,SDWAINC2     last-RB\n         MVC   SEWAILC,SDWAILC2      PSW,\n         MVC   SEWAICD,SDWAICD2       codes,\n         LA    R1,SDWASRSV             and\n         ST    R1,SEWAREGS              registers\n         MVI   SEWAMIDC,C'0'       Indicate use NIME40x msgs\n         MVC   SEWAMTYP,=C'LRB'    Indicate info type\n         B     NIME140             Go issue the messages\n         SPACE 1\nNIME130  DS    0H\n         MVC   SEWAEC,SDWAEC1      Copy\n         MVC   SEWAINC,SDWAINC1     time-of-error\n         MVC   SEWAILC,SDWAILC1      PSW,\n         MVC   SEWAICD,SDWAICD1       codes,\n         LA    R1,SDWAGRSV             and\n         ST    R1,SEWAREGS              registers\n         MVC   SEWAMTYP,=C'TOE'    Indicate info type\n         MVI   SEWAMIDC,C'1'       Indicate use NIME41x msgs\n         SPACE 1\n         DROP  R10                 Drop SDWA addressability\n         TITLE 'Format and issue messages about the failing instructionC\n                and PSW'\n***********************************************************************\n*                                                                     *\n*        Format and issue a message about the failing instruction.    *\n*                                                                     *\n*        The default is for the instruction at the last interrupt     *\n*        for the agent or subask RB.  For example, if a GETMAIN SVC   *\n*        failed, the instruction shown will be the SVC itself, not    *\n*        the error instruction (e.g. an ABEND SVC) within GETMAIN.    *\n*                                                                     *\n*        If the SEWA1TOE flag is on, the time-of-error PSW will be    *\n*        used to find the instruction instead.                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nNIME140  DS    0H\n         N     R12,=A(X'00FFFFFF') Clean up the base register\n         LA    R15,NIME150         Prepare for the BASSM\n         O     R15,=X'80000000'    Indicate AMODE=31\n         BASSM R4,R15              Set the AMODE, save current\n         SPACE 1\nNIME150  DS    0H\n         MVC   SEWAMPL(ESTAEM4L),ESTAEM4  Copy instruction WPL\n         LA    R2,SEWAMPL                  and point to the WPL\n         SPACE 1\n         L     R1,SEWAEC+4         Get PSW address at error\n         CLI   SEWAICD,X'10'       Decrement\n         BE    NIME160              PSW\n         CLI   SEWAICD,X'11'         by\n         BE    NIME160                ILC\n         SLR   R3,R3                   unless\n         IC    R3,SEWAILC               page-\n         SR    R1,R3                     fault\n         SPACE 1\nNIME160  DS    0H\n         LRA   R15,0(R1)           Valid instruction stor ...\n         BNZ   NIME180              no, skip format attempt\n         LRA   R15,6(R1)           Valid instruction stor ...\n         BNZ   NIME180              no, skip format attempt\n         SPACE 1\n         UNPK  ESTAEM4I(L'ESTAEM4I+1,R2),0(7,R1)  Format\n         TR    ESTAEM4I(,R2),HEXTAB                failing\n         MVI   ESTAEM4I+L'ESTAEM4I(R2),C' '         instruction\n         SPACE 1\n         LA    R15,NIME170         Prepare to BSM back\n         N     R4,=A(X'80000000')  Setup the AMODE bit in\n         OR    R15,R4               R15 to 'pop' the AMODE\n         BSM   R0,R15              BSM to reset the AMODE\n         SPACE 1\nNIME170  DS    0H\n         SLR   R1,R1               Use\n         IC    R1,SEWAILC           ILC for\n         ALR   R1,R1                 length of\n         LA    R1,ESTAEM4I(R1,R2)     instruction\n         MVC   0(8,R1),BLANKS          display\n         EJECT ,\n         MVC   ESTAEMMI(,R2),SEWAMIDC  Set up the msg id and\n         MVC   ESTAEMMT(,R2),SEWAMTYP   the msg info type\n         SPACE 1\n         WTO   MF=(E,(2))          Issue failing instruction message\n         ST    R1,SEWADID4         Save the DOM ID for MSG 4\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        Format and issue a message showing the error PSW.            *\n*                                                                     *\n*        The PSW used from the SDWA might be from the last interrupt  *\n*        for the agent or subtask RB. For example, if a GETMAIN SVC   *\n*        failed, the PSW shown will be from the time of the SVC       *\n*        issuance, not from the time of the error within the SVC.     *\n*                                                                     *\n*        However, if SEWA1TOE is on, the display here will be of the  *\n*        PSW (etc) from the time of error.                            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nNIME180  DS    0H\n         MVC   SEWAMPL(ESTAEM5L),ESTAEM5    Copy the PSW WPL\n         LA    R2,SEWAMPL                   Point to the WPL\n         SPACE 1\n         UNPK  ESTAEM5A(9,R2),SEWAEC(5)     Format\n         UNPK  ESTAEM5B(9,R2),SEWAEC+4(5)    left and\n         TR    ESTAEM5A(,R2),HEXTAB           right\n         TR    ESTAEM5B(,R2),HEXTAB            halves of\n         MVI   ESTAEM5A+L'ESTAEM5A(R2),C' '     PSW at time\n         MVI   ESTAEM5B+L'ESTAEM5B(R2),C' '      of ABEND\n         SPACE 1\n         MVC   ESTAEM5C(,R2),SEWAILC        Format\n         OI    ESTAEM5C(R2),X'F0'            ILC\n         UNPK  ESTAEM5D(3,R2),SEWAINC(2)    Format\n         TR    ESTAEM5D(,R2),HEXTAB          interrupt\n         MVI   ESTAEM5D+2(R2),C' '            code\n         SPACE 1\n         MVC   ESTAEMMI(,R2),SEWAMIDC  Set up the msg id and\n         MVC   ESTAEMMT(,R2),SEWAMTYP   the msg info type\n         SPACE 1\n         WTO   MF=(E,(2))          Issue the PSW message to operator\n         ST    R1,SEWADID5         Save the DOM ID for MSG 5\n         TITLE 'Format and issue messages showing the registers at the C\n               time of error'\n***********************************************************************\n*                                                                     *\n*        Format and issue messages in a grid that display the         *\n*        contents of the registers at the time of error.              *\n*                                                                     *\n*        As with the failing instruction and PSW, the register values *\n*        displayed will be from the agent or subask RB level's last   *\n*        interrupt, not from the lowest RB level at the time of the   *\n*        error (e.g. not from the ABEND issuance within an SVC).      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         MVC   SEWAMPL(ESTAEM6L),ESTAEM6     Copy the register WPL\n         LA    R2,SEWAMPL                    Point to the WPL\n         SPACE 1\n         L     R3,SEWAREGS         Point to register values\n         LA    R4,4                Loop will type 4 lines\n         LA    R6,SEWADID6         Point to the 4 MSG-6 DOM IDs\n         SPACE 1\nNIME190  DS    0H\n         LA    R5,ESTAEM6C(,R2)    Point to the message area\n         LA    R7,4                Loop to type 4 regs per line\n         LA    R1,0(R4,R4)         Insert\n         LA    R1,REGNUMS-2(R1)     register\n         MVC   ESTAEM6S(,R2),0(R1)   number\n         SPACE 1\nNIME200  DS    0H\n         UNPK  0(9,R5),0(5,R3)     Edit\n         MVI   8(R5),C' '           next\n         TR    0(8,R5),HEXTAB        register\n         LA    R3,4(,R3)           Increment source pointer\n         LA    R5,9(,R5)           Increment target pointer\n         BCT   R7,NIME200          Loop for all 4 registers\n         SPACE 1\n         MVC   ESTAEMMI(,R2),SEWAMIDC  Set up the msg id and\n         MVC   ESTAEMMT(,R2),SEWAMTYP   the msg info type\n         SPACE 1\n         WTO   MF=(E,(2))          Issue a register message\n         SPACE 1\n         ST    R1,0(R6)            Save the DOM ID for this MSG 6\n         LA    R6,4(,R6)           Increment the DOM ID pointer\n         BCT   R4,NIME190          Loop for all 4 lines\n         TITLE 'Issue a WTOR to allow storage viewing, debugging'\n***********************************************************************\n*                                                                     *\n*        Now a WTOR is issued to stop the agent and sub task          *\n*        address space from terminating before the operator has a     *\n*        chance to debug, look at storage via VM/CP or other          *\n*        methods, etc.                                                *\n*                                                                     *\n*        The operator can respond \"P\" to cause the task to terminate. *\n*        Alternately, a (re)display of the last-RB (LRB) or the       *\n*        time-of-error (TOE) information can be requested.            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nNIME210  DS    0H\n         L     R1,SEWAAGCB                 Get the AGCB address\n         MVI   SEWARESP,C'P'               Fake percolate rep\n         SPACE 1\n         MVC   SEWAMPL(ESTAEM7L),ESTAEM7   Copy WTOR WPL to work area\n         LTR   R10,R10                     Is there an SDWA...\n         BNZ   NIME220                      Yes, skip recopy\n         MVC   SEWAMPL(ESTAEM8L),ESTAEM8   Copy limited WTOR\nNIME220  DS    0H\n         XC    SEWAECB,SEWAECB             Clear WTOR ECB\n         MVI   SEWARESP,X'00'              Clear response area\n         SPACE 1\n         WTOR  ,SEWARESP,,SEWAECB,MF=(E,SEWAMPL)  Issue holdup\n         SPACE 1\n         WAIT  ECB=SEWAECB         Wait for the WTOR response\n         TITLE 'Delete (DOM) the messages issued, allowing them to scroC\n               ll'\n***********************************************************************\n*                                                                     *\n*        The messages issued so far were non-scrollable action        *\n*        messages.  For the agent, they would be DOMed anyway         *\n*        now that the agent address space is about to end.  However,  *\n*        they do not get DOMed automatically in the sub task case.    *\n*                                                                     *\n*        (Descriptor code 7 implies automatic DOMs at the end of      *\n*        a job-step task, not a daughter task like the sub tasks.)    *\n*                                                                     *\n*        If the task is about to end (\"P\" response) then,             *\n*        run though all the DOM ids for the messages issued so        *\n*        far, and DOM the messages.  If a re-display of the error     *\n*        information is to be done, only DOM those messages and       *\n*        loop back to perform the (re)display.                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nNIME230  DS    0H\n         CLI   SEWARESP,C'P'       Valid reply, percolate ...\n         BNE   NIME240              No, go try R and E\n         LA    R2,SEWADIDS         Point to DOM IDs in SEWA\n         LA    R3,SEWADIDN          and get the count of them\n         B     NIME250             Go DOM all ids and exit\n         SPACE 1\nNIME240  DS    0H\n         LA    R2,SEWADII1         Point to SEWA info DOM ids\n         LA    R3,SEWADIIN          and get the count of them\n         OI    SEWAFLG1,SEWA1TOE   Assume time-of-error\n         CLC   SEWARESP(3),=C'TOE' Valid reply, time-of-err...\n         BE    NIME250              Yes, go DOM some, loop\n         NI    SEWAFLG1,255-SEWA1TOE     Turn of assumption\n         CLC   SEWARESP(3),=C'LRB' Valid reply, last-RB ...\n         BNE   NIME210              No, ask WTOR again\n         SPACE 1\nNIME250  DS    0H\n         ICM   R1,B'1111',0(R2)    Get the next DOM ID\n         BZ    NIME260              none there, skip the DOM\n         SPACE 1\n         DOM   MSG=(1)             Delete the operator message\n         XC    0(4,R2),0(R2)       Zero the DOM ID field\n         SPACE 1\nNIME260  DS    0H\n         LA    R2,4(,R2)           Point to the next DOM ID\n         BCT   R3,NIME250          Loop to process all DOMs\n         SPACE 1\n         CLI   SEWARESP,C'P'       Is this percolate case ...\n         BNE   NIME120              No, loop for R and E cases\n         SPACE 1                                               @R03P877\n         TITLE 'FREEMAIN the SEWA and percolate to allow the task or adC\n                drspc to end'\n***********************************************************************\n*                                                                     *\n*        The NIMESTA work area (SEWA) is now FREEMAINED. Even though *\n*        this ESTAE did not recover, the address space may simply     *\n*        lose a subtask. Therefore storage cleanup is required.       *\n*                                                                     *\n*        Register 14 is restored and Register 15 set to zero, no      *\n*        matter what.  If RTM provided NIMESTA with an SDWA, then     *\n*        use the SETRP macro to percolate.  Otherwise use R14.        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         FREEMAIN RU,LV=SEWALEN,A=(11),SP=230    FREEMAIN the SEWA\n         SPACE 1\n         LTR   R10,R10             Was the SDWA acquired for us...\n         BZ    NIME270              No, just use RETURN then\n         SPACE 1\n         SETRP RC=0,WKAREA=(10)    Tell MVS to percolate\n         SPACE 1\nNIME270  DS    0H\n         LR    R14,R9              Restore register 14 and\n         SR    R15,R15              set R15 to 0 (see SPL)\n         BR    R14                 Let the TASK terminate\n         TITLE 'Data area'\n***********************************************************************\n*                                                                     *\n*        This is the general read-only data area for NIMESTA. Any     *\n*        data areas requiring changes must be in the SEWA.            *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n****  Data Fields necessary for determining/WTOing the ABEND code\n         SPACE 1\n         DS    0F\nHEXTAB   EQU   *-240               Table to fixup System ABEND code\n         DC    C'01234567'\n         DC    C'89ABCDEF'\n         DS    0F\nSYSMASK  DC    X'00FFF000'         Masks to determine if ABEND is\nUSERMASK DC    X'00000FFF'          a System or User ABEND\nXSYSTEM  DC    CL6'SYSTEM'         Character statements of ABEND\nXUSER    DC    CL6' USER '          type for ABEND information WTO\n         SPACE 2\n****  MISCELLANEOUS DATA FIELDS\n         SPACE 1\nREGNUMS  DC    C'128 4 0 '         Register numbers\nBLANKS   DC    CL8' '              Blanks\nNOMEMRY  DC    F'12'               Code in R0 showing no SDWA\n         SPACE 2\n         LTORG ,                   Literal pool for NIMESTA\n         TITLE 'Message area'\n***********************************************************************\n*                                                                     *\n*        These messages are copied to the SEWA before issuing them    *\n*        so that NIMESTA can remain reentrant.                        *\n*                                                                     *\n*        All these messages contain descriptor codes 2 and 7.  Hence  *\n*        they will be highlighted and non-deletable until after the   *\n*        hold-up WTOR is responded to, at which time they are DOMed.  *\n*                                                                     *\n*        Note, these WPLs do not contain a WPX, and agent/subtask     *\n*        message routing is not supported for the ROUTCDEs.           *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nESTAEM1  WTO   'NIME401E XXXXXXXX ABENDED, XXXXXX CODE=XXXX REASON=XXXXC\n               XXXX  ',ROUTCDE=(1,10),DESC=(2,7),MF=L\n         SPACE 1\nESTAEM1N EQU   WPLTXT-WPL+9,8,C'C'  agent or subtask name\nESTAEM1T EQU   WPLTXT-WPL+27,6,C'C'  ABEND type in the WTO\nESTAEM1C EQU   WPLTXT-WPL+39,4,C'C'  ABEND code in the WTO\nESTAEM1R EQU   WPLTXT-WPL+51,8,C'C'  Reason code in the WTO\nESTAEM1D EQU   WPLTXT-WPL+9,56,C'C'  Title for SVC DUMP from WTO\nESTAEM1L EQU   *-ESTAEM1             Length of message\n         SPACE 2\nESTAEM2  WTO   'NIME402E NIMESTA AGT/SUB SVC DUMP COMPLETE',           C\n               ROUTCDE=(1,10),DESC=(2,7),MF=L\n         EJECT ,\n         SPACE 2\nESTAEM3  WTO   'NIME403E AGT/SUB SVC DUMP FAILED, R15=XXXX, REASON=????C\n               ',ROUTCDE=(1,10),DESC=(2,7),MF=L\n         SPACE 1\nESTAEM3C EQU   WPLTXT-WPL+38,4,C'C'  Bad return code from SDUMP\nESTAEM3R EQU   WPLTXT-WPL+51,4,C'C'  Bad reason code\nESTAEM3L EQU   *-ESTAEM3           Length of message\n         SPACE 2\nESTAEM4  WTO   'NIME4x4E LRB FAILING INSTR WAS ************        ',  C\n               MF=L,ROUTCDE=(1,10),DESC=(2,7)     msg 404/414\n         SPACE 1\nESTAEMMI EQU   WPLTXT-WPL+5,1      Spot for variable msg id\nESTAEMMT EQU   WPLTXT-WPL+9,3      Spot for variable msg type\nESTAEM4I EQU   WPLTXT-WPL+31,12    Failing instruction\nESTAEM4L EQU   *-ESTAEM4           Length of message\n         SPACE 2\nESTAEM5  WTO   'NIME4x5E LRB PSW  = ******** ******** ILC = *  IC = ** C\n               ',MF=L,ROUTCDE=(1,10),DESC=(2,7)   msg 405/415\n         SPACE 1\nESTAEM5A EQU   WPLTXT-WPL+20,8     ABEND PSW (left half)\nESTAEM5B EQU   WPLTXT-WPL+29,8     ABEND PSW (right half)\nESTAEM5C EQU   WPLTXT-WPL+44,1     ABEND instruction length, Halfwords\nESTAEM5D EQU   WPLTXT-WPL+52,2     Interrupt code\nESTAEM5L EQU   *-ESTAEM5           Length of message\n         EJECT ,\n         SPACE 2\nESTAEM6  WTO   'NIME4x6E LRB R**  = ******** ******** ******** ********C\n                ',MF=L,ROUTCDE=(1,10),DESC=(2,7)  msg 406/416\n         SPACE 1\nESTAEM6S EQU   WPLTXT-WPL+14,2     Starting register number, this line\nESTAEM6C EQU   WPLTXT-WPL+20,4*9   Register contents\nESTAEM6L EQU   *-ESTAEM6           Length of message\n         SPACE 2\nESTAEM7  WTOR  'NIME407R REPLY \"P\" WHEN NIMESTA MAY PERCOLATE, OR  \"TOEC\n               \" (TIME-OF-ERROR) OR \"LRB\" (LAST-RB) FOR ERROR INFO RE-DC\n               ISPLAY',*-*,3,*-*,ROUTCDE=(1,10),DESC=(2),MF=L\nESTAEM7L EQU   *-ESTAEM7           Length of WTOR\n         SPACE 2\nESTAEM8  WTOR  'NIME408R REPLY \"P\" WHEN NIMESTA MAY PERCOLATE',        C\n               *-*,1,*-*,ROUTCDE=(1,10),DESC=(2),MF=L\nESTAEM8L EQU   *-ESTAEM8           Length of WTOR\n         TITLE 'Dsect mappings -- General MVS control blocks'\nNIMESTA CSECT ,                    Re-establish the Csect\n         SPACE 1\nR0       EQU   0                   Register\nR1       EQU   1                     equates\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\n         PRINT NOGEN,NODATA\n         SPACE 1\n         IHASDWA DSECT=YES         Generate MVS SDWA Dsect\n         IEZWPL ,                  Generate MVS WPL Dsect\n         SPACE 1\n         PRINT GEN,NODATA\n         TITLE 'Dsect mappings -- Sub task control block'\n         NIMSTCB ,                 Generate subtask STCB Dsect\n         TITLE 'Dsect mappings -- ESTAE work area (SEWA)'\n***********************************************************************\n*                                                                     *\n*        SEWA  - ESTAE Work Area                                      *\n*                                                                     *\n*  FUNCTION:                                                          *\n*                                                                     *\n*        Provide a work area for the NIMESTA routine. The SEWA is     *\n*        used mostly to keep NIMESTA reentrant.                       *\n*                                                                     *\n* USED BY:                                                            *\n*                                                                     *\n*        NIMESTA During ABEND processing for NIMAGENT or NIMxxxx.     *\n*                                                                     *\n*        CREATED BY: NIMESTA         FREED BY: NIMESTA                *\n*                                                                     *\n*        SUBPOOL: 230                KEY: 0                           *\n*                                                                     *\n*        SIZE: See SEWALEN                                            *\n*                                                                     *\n*        POINTED TO BY:  R11 during NIMESTA processing                *\n*                                                                     *\n*        FREQUENCY:  One SEWA is in existance during the ABEND of     *\n*                    the agent or sub task                            *\n*                                                                     *\n*        RESIDENCY:  VIRTUAL - Below the 16M line                     *\n*                    REAL - Below the 16M line                        *\n*                                                                     *\n*        SERIALIZATION:  No special processing                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSEWA     DSECT ,                   Dsect for ESTAE work area\n         SPACE 1\nSEWAID   DC    CL4'SEWA'           Control block ID\nSEWAAGCB DS    A                   Address of the agent AGCB\nSEWACODE DS    F                   ABEND completion code from SDWA\nSEWAREAS DS    F                   ABEND reason code from SDWA\nSEWADWD  DS    D                   Double word for CVD, UNPK\nSEWABCDE DS    CL4                 Bytes for EBCDIC ABEND code\nSEWAECB  DS    F                   ECB for WTOR\nSEWARESP DS    CL8                 WTOR response area\nSEWAFLG1 DS    X                   General flag byte\nSEWA1SUB EQU   B'10000000'          FSA (vs FSS) is ABENDing\nSEWA1TOE EQU   B'01000000'          Display time-of-error info\n         DS    3X                  Reserved for future use\n         SPACE 1\nSEWAEC   DS    CL(L'SDWAEC2)       Copy of SDWAEC1 or EC2\nSEWAINC  DS    CL(L'SDWAINC2)      Copy of SDWAINC1 or INC2\nSEWAILC  DS    CL(L'SDWAILC2)      Copy of SDWAILC1 or ILC2\nSEWAICD  DS    CL(L'SDWAICD2)      Copy of SDWAICD1 or ICD2\nSEWAMIDC DS    CL1                 '0' or '1', for NIME4xY msg\nSEWAMTYP DS    CL3                 'LRB' or 'TOE' msg type\nSEWAREGS DS    A                   Address of SDWAGRSV or SRSV\n         EJECT ,\nSEWADIDS DS    0F                  Beginning of the message DOM IDs\nSEWADID1 DS    F                    DOM ID for msg 1\nSEWADID2 DS    F                    DOM ID for msg 2 or 3\nSEWADII1 DS    0F                  -> Start of error info ids\nSEWADID4 DS    F                    DOM ID for msg 4\nSEWADID5 DS    F                    DOM ID for msg 5\nSEWADID6 DS    4F                   DOM IDs for the 4 msg 6's\nSEWADIIN EQU   (*-SEWADII1)/4      Number of info msg DOM IDs\nSEWADIDN EQU   (*-SEWADIDS)/4      Number of message DOM IDs\n         SPACE 2\nSEWAMPL  DS    0D                  Parm list area for MVS services\n         SPACE 1\n         ORG   SEWAMPL             ORG back for WPL\n         WTO   '1234567890123456789012345678901234567890123456789012345C\n               67890123456789012345678901234567890123456789012345678901C\n               234567890',                                             C\n               ROUTCDE=2,DESC=(2,7),MF=L\n         SPACE 2\n         ORG   SEWAMPL             ORG back for WTOR WPL\n         WTOR  '1234567890123456789012345678901234567890123456789012345C\n               67890123456789012345678901234567890123456789012345678901C\n               234567890',                                             C\n               *-*,1,*-*,ROUTCDE=(1,10),DESC=(2),MF=L\n         EJECT ,\n         ORG   SEWAMPL             ORG back for SDUMP, SDUMP title\n         SDUMP HDRAD=*-*,SDATA=(RGN,CSA,LPA,SQA,TRT),QUIESCE=YES,MF=L\nSEWASDT  DC    AL1(100),CL100' '   Maximum length SVC DUMP title\n         SPACE 2\n         ORG   ,                   ORG to end of SEWA\n         DS    0D                  Pad general work area\nSEWAMPLL EQU   *-SEWAMPL           Length of parm list area\n         SPACE 2\nSEWAWTO1 DS    CL(SEWAMPLL)        Space for special WTO 1\n         SPACE 1\nSEWALEN  EQU   *-SEWA              Length of SEWA work area\n         TITLE 'Dsect mappings -- Agent control block (AGCB)'\n         NIMAGCB ,                 Generate agent AGCB Dsect\n         SPACE 3\nNIMESTA CSECT ,                    Re-establish the Csect\n         SPACE 1\nNIMESTL  EQU   *-NIMESTA           Length of this module\n         END   ,                   END OF NIMESTA\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NIMEXST": {"ttr": 3589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01c\\x00\\x01\\x01\\x07'\\x0f\\x01\\t\\x02/\\x16\\x13\\x02\\x16\\x00e\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@\"", "ispf": {"version": "01.99", "flags": 0, "createdate": "2007-09-27T00:00:00", "modifydate": "2009-01-22T16:13:01", "lines": 534, "newlines": 101, "modlines": 0, "user": "SCHMUM"}, "text": "NIMEXST  TITLE 'Started task existence checking    BY M.SCHMUTZOK'\n*PROCESS USING(WARN(15))\n         ACONTROL CPAT(NOSYSL,NOCASE)\n**********************************************************************\n*  (C)   Copyright Shands HealthCare, 2009                           *\n*  Program was written by:                                           *\n*    Michael Schmutzok                                               *\n*    Sr. Systems Programmer                                          *\n*    Shands HealthCare                                               *\n*    Information Services                                            *\n*    1329 SW 16th St, Room 3150                                      *\n*    Gainesville, FL  32608-1128                                     *\n*    mailto:schmum@shands.ufl.edu                                    *\n*    352.265.7982          (fax)                                     *\n*    352.265.8317  x85465  (voice)                                   *\n**********************************************************************\n*                                                                    *\n*  MODULE NAME:  NIMEXST                                             *\n*                                                                    *\n*                                                                    *\n*  DESCRIPTIVE NAME:  SNMP SUBAGENT FOR NIMBUS                       *\n*                                                                    *\n*  FUNCTION: THIS SUBTASK WILL RUN THE ASCB CHAIN AND VERIFY THE     *\n*            EXISTENCE OF SELECT STARTED TASKS/JOBS WHICH ARE        *\n*            DEFINED WITHIN A TABLE. THE STATUS OF THE MONITORED     *\n*            STC/JOB CAN BE QUERIED BY NIMBUS (1=UP, 2=DOWN). IN     *\n*            ADDITION, THIS MODULE WILL PROCESS 'MAINT' REQUESTS.    *\n*            IF A MAINT COMMAND IS RECEIVED VIA A MOODIFY            *\n*            COMMAND, THIS MODULE WILL SET THE STATUS OF THE         *\n*            OBJECT TO A 3. THIS DOES NOT SET OFF AN ALERT. IT       *\n*            CAN BE USED FOR MAINTENANCE WITHOUT WORRY OF NIMBUS     *\n*            ALERTS GOING OFF DURING THE DOWNTIME.                   *\n*            CURRENTLY, THE FOLLOWING OBJECTS ARE MONITORED:         *\n*                                                                    *\n*            CICS REGIONS:                                           *\n*              SMSPROD, SMS2PRD, SMSEADP, HISPRD, HISRS              +\n*              SMSTEST, SMS2TST, SMSEADT, HISTEST, CSFP              *\n*            DB2 REGIONS:                                            *\n*              DSNPMSTR, DSNPDBM1, DSNPDIST, IRLMPROC                *\n*              DSNHMSTR, DSNHDBM1, DSNHDIST, IRLMPROH                *\n*            STARTED TASKS:                                          *\n*              UC4, XPTRMAIN, NIMBEMCS, PSYNC                        *\n*                                                                    *\n*  OPERATION: THE FOLLOWING ACTIONS ARE TAKEN BY THIS MODULE:        *\n*      1) INITIALIZE THE SUB-TASK CONTROL BLOCK                      *\n*      2) ESTABLISH THE ESTAE ENVIRONMENT                            *\n*      3) SET THE TIMER                                              *\n*      4) WAIT FOR TIMER POP OR AGENT POST                           *\n*      5) RUN THE ASCB CHAIN AND LOOK FOR EXISTENCE OF SELECTED      *\n*         JOBS/STCS                                                  *\n*      6) UPDATE THE MIB VALUES                                      *\n*                                                                    *\n*  DEPENDENCIES: IF USING THE SNAP FUNCTION FOR DEBUGGING, MAKE      *\n*                SURE THE PCCSSNAP MODULE IS IN THE STEPLIB OR       *\n*                LINKLIST TO PREVENT S806 ABEND                      *\n*                                                                    *\n*  RESTRICTIONS: NONE                                                *\n*                                                                    *\n*  REGISTER CONVENTIONS:                                             *\n*                                                                    *\n*          STANDARD ENTRY LINKAGE                                    *\n*                                                                    *\n*          R0 AND R1 USED FOR SYSTEM SERVICE INVOCATION              *\n*          R2 THROUGH R6 ARE WORK REGISTERS                          *\n*          R7 AGCB ADDRESSING                                        *\n*          R8 THROUGH R9 ARE WORK REGISTERS                          *\n*          R10 AGCB ADDRESSING                                       *\n*          R11 IS A WORK REGISTERS                                   *\n*          R12 IS THE BASE REGISTER                                  *\n*                                                                    *\n*                                                                    *\n*  INPUT:  None                                                      *\n*                                                                    *\n*  OUTPUT: UPDATED MIB VALUES                                        *\n*                                                                    *\n*  RETURN CODES = 0  NORMAL TERMINATION                              *\n*                                                                    *\n**********************************************************************\n         SPACE 1\n         PRINT ON,GEN,NODATA\n         SPACE 1\nNIMEXST  CSECT ,                   Establish the NIMEXST csect\n         SPACE 1\n         USING *,R15\n         SPACE 1\nNIMEXST  MODID                     Est. module identification\n         STM   R14,R12,12(R13)     Save the caller's registers\n         LR    R12,R15             Setup the local base register\n         DROP  R15\n         USING NIMEXST,R12         Est. code addressability\n         LR    R7,R1               Save the AGCB address\n         USING AGCB,R7             Establish AGCB addr.\n         LA    R15,NIMX000         Prepare for the BSM\n         O     R15,=X'80000000'    Indicate AMODE=31\n         BSM   R0,R15              Set the AMODE, continue on\nNIMX000  DS    0H\n         MODESET KEY=NZERO,        Get into supervisor state           C\n               MODE=SUP\n         GETMAIN RC,               Allocate STCB                       C\n               LV=STCBLEN,                                             C\n               SP=230,                                                 C\n               LOC=ANY\n         LTR   R15,R15             Successful GETMAIN ...\n         BZ    NIMX010              Yes, skip ABEND and continue\n         ABEND 666,,,USER          Terminate the subtask (not the FSS)\nNIMX010  DS    0H\n         LR    R10,R1              Set STCB addressability\n         USING STCB,R10            Establish global addr. for          C\n                                    the STCB\n         LR    R2,R10              Zero the\n         LA    R3,STCBLEN           new subtask\n         MVCL  R2,R14                control block\n         MVC   STCBID,=C'STCB'     Set the eye catcher\n         MVC   STCBMN,=C'NIMEXST ' Set the module name\n         SPACE 1\n         ST    R7,STCBAGCB         Save the AGCB address\n         LA    R15,STCBSAVE        Perform\n         ST    R13,4(,R15)           save\n         ST    R15,8(,R13)             area\n         LR    R13,R15                   linkage\n***********************************************************************\n*        SET UP ESTAE ROUTINE                                         *\n***********************************************************************\n         MVC   STCBMPL(NIMEPLL),NIMEPL    Copy list form ESTAE\n         L     R2,=V(NIMESTA)      Get the ESTAE routine address\n         ESTAE (2),                Establish the ESTAE exit            C\n               MF=(E,STCBMPL),                                         C\n               PARAM=(R10)\n         MVC   STCBMPL(MSG100IL),MSG100I Copy the WPL for message 1\n         WTO   MF=(E,STCBMPL)      Issue message to operator\n***********************************************************************\n*        INITIALIZATION                                               *\n***********************************************************************\n         LA    R4,CICSMET          point to start of exist table\n         LA    R5,CICSVNUM         get number of table entries\nLOOPC    DS    0H\n         MVC   0(3,R4),=X'010001'  stc status - dsply strng, len=1\n         LA    R4,4(R4)            point to next table entry\n         BCT   R5,LOOPC            do until done\n         LA    R4,DB2MET           point to start of exist table\n         LA    R5,DB2VNUM          get number of table entries\nLOOPD    DS    0H\n         MVC   0(3,R4),=X'010001'  db2 status - dsply strng, len=1\n         LA    R4,4(R4)            point to next table entry\n         BCT   R5,LOOPD            do until done\n         LA    R4,STCMET           point to start of exist table\n         LA    R5,STCVNUM          get number of table entries\nLOOPE    DS    0H\n         MVC   0(3,R4),=X'010001'   stc status - dsply strng, len=1\n         LA    R4,4(R4)            point to next table entry\n         BCT   R5,LOOPE            do until done\n         MVC   HSMSTAT(3),=X'010001' hsm status - dsply strng, len=1\nLOOPF    DS    0H\n         OI    INITFLAG,EXSTBIT    indicate to mother that we're done\n***********************************************************************\n*        SET UP TIMER                                                 *\n***********************************************************************\nTIMESET  DS    0H\n         XC    STCBTECB,STCBTECB       Clear the timer ECB\n         TM    STCBFLG1,STCB1TIM       STIMERM set?\n         BO    WAIT                      yes, go finish wait\n         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM\n         LA    R4,STCBTMID             Point to STIMERD id word area\n         LA    R5,AGCBXINT             Get the timer interval address\n         LA    R6,STCBTECB             Get addr of ECB addr\n         ST    R6,STCBCOMA             Save it\n         OI    STCBFLG1,STCB1TIM       Indicate timer outstanding ...\n         STIMERM SET,                  Set/reset NPRO timer            C\n               DINTVL=(R5),                                            C\n               ID=(R4),                                                C\n               EXIT=TIMEXIT,                                           C\n               PARM=STCBCOMA,                                          C\n               MF=(E,STCBMPL)\n         LTR   R15,R15                 STIMER set ok?\n         BNZ   ERROR                     no, go tell\n         B     ECHK000                 go do initial check\n***********************************************************************\n*        WAIT FOR TIMER POP OR POST FROM AGENT                        *\n***********************************************************************\nWAIT     DS    0H\n         XI    MODFLAG,MAINTBIT        clear modify bit\n         XC    AGCBECBX,AGCBECBX       clear ecb\n         LA    R4,STCBTECB             Point to timer ECB\n         ST    R4,STCBTEP              Save it in list\n         LA    R4,AGCBECBX             Point to communication ECB\n         ST    R4,STCBCEP              Save it in list\n         OI    STCBCEP,X'80'           Indicate end of ECB list\n         WAIT  1,                      Wait for something to post      C\n               ECBLIST=STCBECBL,                                       C\n               LONG=YES\n         TM    AGCBECBX,X'40'          Did we get posted by the agent?\n         BO    CMDCHK                   Yes, go see what's wanted\n         TM    STCBTECB,X'40'          Did the timer pop?\n         BZ    WAIT                     No, don't know, go wait again\n         XI    STCBFLG1,STCB1TIM       Clear timer flag\nECHK000  DS    0H\n         LA    R6,CICSMET              Start of CICS metrics table\n         LA    R11,CICSTAB             Start of CICS name table\n         LA    R8,CICSVNUM             Number of table entries\n         BAL   R14,ECHK010             go check for existence\n         LA    R6,DB2MET               Start of DB2 metrics table\n         LA    R11,DB2TAB              Start of DB2 name table\n         LA    R8,DB2VNUM              Number of table entries\n         BAL   R14,ECHK010             go check for existence\n         LA    R6,STCMET               Start of STC metrics table\n         LA    R11,STCTAB              Start of STC name table\n         LA    R8,STCVNUM              Number of table entries\n         BAL   R14,ECHK010             go check for existence\n         LA    R6,HSMMET1              Start of HSM metrics table\n         LA    R11,HSMTAB              Start of HSM name table\n         LA    R8,HSMVNUM1             Number of table entries\n         BAL   R14,ECHK010             go check for existence\n         B     TIMESET                 Go wait for next timer pop\n***********************************************************************\n*        Modify commands                                              *\n*        F NIMAGENT,MAINT,    <cics_region)                           *\n*                         ON,                                         *\n*                         OFF,                                        *\n***********************************************************************\nCMDCHK   DS    0H\n         TM    MODFLAG,SHUTBIT         shutdown command given?\n         BO    EXIT                      yes, go exit\n         LA    R6,AGCBCOMM+6           Point to command area + maint\n         TM    MODFLAG,MAINTBIT        maintenance mode requested?\n         BO    MNTMODE                   yes, go process\n         MVC   STCBMPL(MSG200EL),MSG200E  COPY LIST FORM\n         LA    R5,STCBMPL              point to message area\n         MVC   MSG200CM(8,R5),AGCBCOMM move in 8 bytes of command\n         WTO   MF=(E,STCBMPL)          issue message to operator\n         B     WAIT                    wait for next event post\nMNTMODE  DS    0H\n         CLC   0(2,R6),=C'ON'          maint mode \"ON\"\n         BE    MNTON                     yes, go set it on\nMNTOFF   DS    0H\n         LA    R6,4(R6)                point to object\n         BAL   R14,GETLNGTH            go get object name length\n         SH    R11,=H'1'               decrement one for move/checks\n         BAL   R14,OBJCHK              go see if it exists\n         LA    R2,CICSMET              Start of CICS metrics table\n         LA    R3,CICSTAB              Start of CICS name table\n         LA    R8,CICSVNUM             Number of table entries\n         BAL   R14,GETOID              go find oid to modify\n         TM    EXSTFLG,METFND          did we find it?\n         BO    GOTOFF                    yes, go turn off\n         LA    R2,DB2MET               Start of DB2 metrics table\n         LA    R3,DB2TAB               Start of DB2 name table\n         LA    R8,DB2VNUM              Number of table entries\n         BAL   R14,GETOID              go find oid to modify\n         TM    EXSTFLG,METFND          did we find it?\n         BO    GOTOFF                    yes, go turn off\n         LA    R2,STCMET               Start of STC metrics table\n         LA    R3,STCTAB               Start of STC name table\n         LA    R8,STCVNUM              Number of table entries\n         BAL   R14,GETOID              go find oid to modify\n         TM    EXSTFLG,METFND          did we find it?\n         BO    GOTOFF                    yes, go turn off\n         LA    R2,HSMMET1              Start of HSM metrics table\n         LA    R3,HSMTAB               Start of HSM name table\n         LA    R8,HSMVNUM1             Number of table entries\n         BAL   R14,GETOID              go find oid to modify\n         TM    EXSTFLG,METFND          did we find it?\n         BO    GOTOFF                    yes, go turn off\n         B     BADOBJ                    no, go issue error message\nGOTOFF   DS    0H\n         MVI   3(R2),X'01'             turn off maintenance mode\n         XI    EXSTFLG,METFND          clear 'found' flag\n         LA    R3,STCBMPL              point to message area\n         MVC   STCBMPL(MSG102IL),MSG102I  copy list form\n         EX    R11,MVC3\n         WTO   MF=(E,STCBMPL)          Issue message to operator\n         B     WAIT                    wait for next event post\nMNTON    DS    0H\n         LA    R6,3(R6)                point to object\n         BAL   R14,GETLNGTH            go get object name length\n         SH    R11,=H'1'               decrement one for move/checks\n         BAL   R14,OBJCHK              go see if it exists\n         LA    R2,CICSMET              Start of CICS metrics table\n         LA    R3,CICSTAB              Start of CICS name table\n         LA    R8,CICSVNUM             Number of table entries\n         BAL   R14,GETOID              go find oid to modify\n         TM    EXSTFLG,METFND          did we find it?\n         BO    GOTON                     yes, go turn off\n         LA    R2,DB2MET               Start of DB2 metrics table\n         LA    R3,DB2TAB               Start of DB2 name table\n         LA    R8,DB2VNUM              Number of table entries\n         BAL   R14,GETOID              go find oid to modify\n         TM    EXSTFLG,METFND          did we find it?\n         BO    GOTON                     yes, go turn off\n         LA    R2,STCMET               Start of STC metrics table\n         LA    R3,STCTAB               Start of STC name table\n         LA    R8,STCVNUM              Number of table entries\n         BAL   R14,GETOID              go find oid to modify\n         TM    EXSTFLG,METFND          did we find it?\n         BO    GOTON                     yes, go turn off\n         LA    R2,HSMMET1              Start of HSM metrics table\n         LA    R3,HSMTAB               Start of HSM name table\n         LA    R8,HSMVNUM1             Number of table entries\n         BAL   R14,GETOID              go find oid to modify\n         TM    EXSTFLG,METFND          did we find it?\n         BO    GOTON                     yes, go turn off\n         B     BADOBJ                    no, go issue error message\nGOTON    DS    0H\n         MVI   3(R2),X'03'             set maintenance mode\n         XI    EXSTFLG,METFND          clear 'found' flag\n         LA    R3,STCBMPL              point to message area\n         MVC   STCBMPL(MSG101IL),MSG101I  copy list form\n         EX    R11,MVC1\n         WTO   MF=(E,STCBMPL)          Issue message to operator\n         B     WAIT                    wait for next event post\nOBJCHK   DS    0H\n         LA    R3,CICSTAB              point to start of object table\n         LA    R4,NUMENT               number of entries\nOBJCHKLP DS    0H\n         EX    R11,CLC1\n         BER   R14                       yes, return\n         LA    R3,8(R3)                point to next entry\n         BCT   R4,OBJCHKLP             do until found or not\nBADOBJ   DS    0H\n         LA    R3,STCBMPL              point to message area\n         MVC   STCBMPL(MSG201EL),MSG201E  copy list form\n         EX    R11,MVC2\n         WTO   MF=(E,STCBMPL)          Issue message to operator\n         B     WAIT                    wait for next event post\nGETLNGTH DS    0H\n         LR    R3,R6                   save start of object\n         LA    R4,8                    max length\n         XR    R11,R11                 clear counter\nGETLOOP  DS    0H\n         CLI   0(R3),X'00'             end of object?\n         BER   R14                       yes, return with length\n         LA    R3,1(R3)                point to next byte\n         LA    R11,1(R11)              add one to counter\n         BCT   R4,GETLOOP              do until done\n         BR    R14                     return with object length\nGETOID   DS    0H\n         OI    EXSTFLG,METFND          assume we'll find it here\n         EX    R11,CLC2                found the entry?\n         BER   R14                       yes, return\n         LA    R2,4(R2)                next metric entry\n         LA    R3,8(R3)                next entry in name table\n         BCT   R8,GETOID               do until done\n         XI    EXSTFLG,METFND          remove 'found' flag\n         BR    R14                     return\nCLC1     CLC   0(0,R3),0(R6)           object = table entry?\nCLC2     CLC   0(0,R3),0(R6)           object = table entry?\nMVC1     MVC   MSG101NM(0,R3),0(R6)    move object name to msg\nMVC2     MVC   MSG201NM(0,R3),0(R6)    move object name to msg\nMVC3     MVC   MSG102NM(0,R3),0(R6)    move object name to msg\n***********************************************************************\n*        EXISTENCE CHECKING                                           *\n***********************************************************************\nECHK010  DS    0H\n         CLI   3(R6),X'03'             maint mode?\n         BE    ECHK060                 GO DO NEXT ENTRY\n         L     R2,CVTPTR               POINT TO CVT  - X'10'\n         USING CVT,R2                  MAP CVT\n         L     R2,CVTASVT              POINT TO ASVT\n         DROP  R2                      STOP USING R2 FOR CVT\n         USING ASVT,R2                 MAP ASVT\n         LA    R4,ASVTENTY             POINT TO FIRST ENTRY IN TABLE\n         L     R3,ASVTMAXU             LOAD MAX NUMBER OF ENTRIES\nECHK020  DS    0H\n         TM    0(R4),ASVTAVAL          IS THIS AN ASCB ADDRESS?\n         BNO   ECHK030                 YES, BRANCH\n         LA    R4,4(,R4)               NO, POINT TO NEXT ENTRY IN ASVT\n         BCT   R3,ECHK020              GO CHECK NEXT ASVT ENTRY\n         MVI   3(R6),X'02'             SET CURRENT STATUS\n         B     ECHK060                 GO DO NEXT ENTRY\nECHK030  DS    0H\n         L     R9,0(R4)                POINT TO ASCB\n         USING ASCB,R9                 MAP IT\n         L     R5,ASCBJBNI             POINT TO JOBNAME\n         CL    R5,=F'0'                WAS THIS A START/MOUNT/LOGON?\n         BE    ECHK040                 YES, BRANCH\n         CLC   0(8,R11),0(R5)          IS IT THE ASCB OF JOB IN TABLE?\n         BE    ECHK050                 YES, BRANCH\n         LA    R4,4(,R4)               NO, POINT TO NEXT ENTRY IN ASVT\n         BCT   R3,ECHK020              GO CHECK NEXT ASVT ENTRY\n         MVI   3(R6),X'02'             SET CURRENT STATUS\n         B     ECHK060                 GO DO NEXT ENTRY\nECHK040  DS    0H\n         L     R5,ASCBJBNS             POINT TO START/MOUNT/LOGON NAME\n         CLC   0(8,R11),0(R5)          IS IT THE ASCB OF JOB IN TABLE?\n         BE    ECHK050                 YES, BRANCH\n         LA    R4,4(,R4)               NO, POINT TO NEXT ENTRY IN ASVT\n         BCT   R3,ECHK020              GO CHECK NEXT ASVT ENTRY\n         MVI   3(R6),X'02'             SET CURRENT STATUS\n         B     ECHK060                 GO SEE IF TRAP NEEDS TO BE SENT\nECHK050  DS    0H\n         MVI   3(R6),X'01'             SET CURRENT STATUS\nECHK060  DS    0H\n         LA    R6,4(R6)                point to next metric entry\n         LA    R11,8(R11)              point to next name entry\n         BCT   R8,ECHK010              do until all checked\n         BR    R14                     return\n         DROP  R2,R9\n***********************************************************************\n*        TIMER EXIT                                                   *\n***********************************************************************\nTIMEXIT  DS    0H\n         STM   R14,R12,4(R13)\n         LR    R4,R1                   SAVE PARAMETER\n         L     R5,4(R1)                POINT TO TIMEECB\n         POST  (R5)\n         LM    R14,R12,4(R13)\n         BR    R14\n*****************************\n*****   EXIT ROUTINES   *****\n*****************************\nERROR    DS    0H\n         WTO   'NMEX202E STIMER SET UP ERROR DETECTED, MODULE SHUTTING C\n               DOWN',ROUTCDE=(1,10)\nEXIT     DS    0H\n         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM\n         LA    R4,STCBTMID             Point to STIMERD id word area\n         STIMERM CANCEL,               Cancel timer                    C\n               ID=(R4),                                                C\n               MF=(E,STCBMPL)\n         MVC   STCBMPL(MSG199IL),MSG199I Copy the WPL for message 2\n         WTO   MF=(E,STCBMPL)      Issue message to operator\n         L     R9,4(,R13)          Get high save (last SACB reference)\n         FREEMAIN RU,              Free the STCB                       C\n               LV=STCBLEN,                                             C\n               A=(10),                                                 C\n               SP=230\n         LR    R13,R9              Get high save area address\n         RETURN (14,12),RC=0       Return to MVS, terminate sub task\n******************************\n*****   ERROR ROUTINES   *****\n******************************\n*SNAPRTN  DS    0H\n*         STM   R2,R5,REGSAVE\n*         LA    R2,CICSMET\n*         LA    R3,NAME\n*         MVC   STCBMPL(NIMLPLL),NIMLPL  COPY LIST FORM LINK\n*         LINK  EP=PCCSSNAP,PARAM=((R2),(R3)),VL=1,\n*               MF=(E,STCBMPL)\n*         LM    R2,R5,REGSAVE\n*         BR    R14\n         EJECT\n**************************************************\n***   S T O R A G E    D E F I N I T I O N S   ***\n**************************************************\n         EJECT\nR0       EQU   0                   Register\nR1       EQU   1                     equates\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nCICSTAB  EQU   *\n         DC    CL8'SMSPROD'\n         DC    CL8'SMS2PRD'\n         DC    CL8'SMSEADP'\n         DC    CL8'HISPRD'\n         DC    CL8'HISRS'\n         DC    CL8'SMSTEST'\n         DC    CL8'SMS2TST'\n         DC    CL8'SMSEADT'\n         DC    CL8'HISTEST'\n         DC    CL8'CSFP'\nDB2TAB   EQU   *\n         DC    CL8'DSNPMSTR'\n         DC    CL8'DSNPDBM1'\n         DC    CL8'DSNPDIST'\n         DC    CL8'IRLMPROC'\n         DC    CL8'DSNHMSTR'\n         DC    CL8'DSNHDBM1'\n         DC    CL8'DSNHDIST'\n         DC    CL8'IRLMPROH'\nSTCTAB   EQU   *\n         DC    CL8'UC4'\n         DC    CL8'XPTRMAIN'\n         DC    CL8'NIMBCONS'\n         DC    CL8'PSYNC'\nHSMTAB   EQU   *\n         DC    CL8'DFHSM'\nNUMENT   EQU   (*-CICSTAB)/8\nNIMLPL   LINK  EP=PCCSSNAP,SF=L\nNIMLPLL  EQU   *-NIMLPL\nNIMEPL   ESTAE *-*,TERM=YES,       List form ESTAE parmlist            C\n               RECORD=YES,PARAM=*-*,MF=L\nNIMEPLL  EQU   *-NIMEPL\nNIMTPL   STIMERM SET,MF=L\nNIMTPLL  EQU   *-NIMTPL\nMSG100I  WTO   'NMEX100I EXISTENCE PROBE INITIALIZATION COMPLETE',ROUTCC\n               DE=(1,10),MF=L\nMSG100IL EQU   *-MSG100I\nMSG101I  WTO   'NMEX101I          HAS BEEN PLACED INTO MAINTENANCE MODEC\n               .',ROUTCDE=(1,10),MF=L\nMSG101IL EQU   *-MSG101I\nMSG101NM EQU   WPLTXT-WPL+9,8\nMSG102I  WTO   'NMEX102I          HAS BEEN TAKEN OUT OF MAINTENANCE MODC\n               E.',ROUTCDE=(1,10),MF=L\nMSG102IL EQU   *-MSG102I\nMSG102NM EQU   WPLTXT-WPL+9,8\nMSG199I  WTO   'NMEX199I EXISTENCE PROBE TERMINATION COMPLETE',ROUTCDE=C\n               (1,10),MF=L\nMSG199IL EQU   *-MSG199I\nMSG200E  WTO   'NMEX200E UNKNOWN MODIFY COMMAND FOUND:         ',ROUTCDC\n               E=(1,10),MF=L\nMSG200EL EQU   *-MSG200E\nMSG200CM EQU   WPLTXT-WPL+39,8\nMSG201E  WTO   'NMEX201E OBJECT OF MAINT MODE COMMAND NOT FOUND:       C\n                 ',ROUTCDE=(1,10),MF=L\nMSG201EL EQU   *-MSG201E\nMSG201NM EQU   WPLTXT-WPL+49,8\n         LTORG\n         EJECT\n*************************\n*** DYNAMIC WORK AREA ***\n*************************\n         TITLE 'SUB TASK APPLICATION CONTROL BLOCK'\n         NIMSTCB ,                 GENERATE SAMPLE FSA STCB DSECT\n         TITLE 'AGENT CONTROL BLOCK (AGCB)'\n         NIMAGCB ,                 GENERATE SAMPLE FSS SSCB DSECT\n         IEZWPL ,                  Generate MVS WPL dsect\n         CVT DSECT=YES\n         IHAECVT\n         IHAASVT\n         IHAASCB\n         EJECT\nNIMEXSTL EQU   *-NIMEXST\n         END NIMEXST\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NIMHSM": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x1b\\x00\\x05\\x01\\x07'\\x8f\\x01\\t\\x02/\\x16\\x13\\x01/\\x00\\xae\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@\"", "ispf": {"version": "01.27", "flags": 0, "createdate": "2007-10-05T00:00:00", "modifydate": "2009-01-22T16:13:05", "lines": 303, "newlines": 174, "modlines": 0, "user": "SCHMUM"}, "text": "NIMHSM   TITLE 'HSM subtask for the sub-agent     BY M.SCHMUTZOK'\n*PROCESS USING(WARN(15))\n         ACONTROL CPAT(NOSYSL,NOCASE)\n**********************************************************************\n*  (C)   Copyright Shands HealthCare, 2009                           *\n*  Program was written by:                                           *\n*    Michael Schmutzok                                               *\n*    Sr. Systems Programmer                                          *\n*    Shands HealthCare                                               *\n*    Information Services                                            *\n*    1329 SW 16th St, Room 3150                                      *\n*    Gainesville, FL  32608-1128                                     *\n*    mailto:schmum@shands.ufl.edu                                    *\n*    352.265.7982          (fax)                                     *\n*    352.265.8317  x85465  (voice)                                   *\n**********************************************************************\n*                                                                    *\n*  MODULE NAME:  NIMHSM                                              *\n*                                                                    *\n*                                                                    *\n*  DESCRIPTIVE NAME:  SNMP SUBAGENT FOR NIMBUS                       *\n*                                                                    *\n*  FUNCTION: THIS MODULE WILL CHECK FOR THE EXISTENCE OF THE HSM     *\n*            STARTED TASK. FUTURE USES MAY INCLUDE:                  *\n*                                                                    *\n*            - FREESPACE LEVEL OF CDS'SX AND V2X2                    *\n*            - FUNCTION STATUS (I.E. MIGRATE, BACKUP, DUMP, ETC)     *\n*                                                                    *\n*  OPERATION: THE FOLLOWING ACTIONS ARE TAKEN BY THIS MODULE:        *\n*      1) INITIALIZE THE SUB-TASK CONTROL BLOCK                      *\n*      2) ESTABLISH THE ESTAE ENVIRONMENT                            *\n*      3) SET THE TIMER                                              *\n*      4) WAIT FOR TIMER POP OR AGENT POST                           *\n*      5) RUN THE ASCB CHAIN AND LOOK FOR HSM STC                    *\n*      6) UPDATE THE MIB VALUES                                      *\n*                                                                    *\n*  DEPENDENCIES: IF USING THE SNAP FUNCTION FOR DEBUGGING, MAKE      *\n*                SURE THE PCCSSNAP MODULE IS IN THE STEPLIB OR       *\n*                LINKLIST TO PREVENT S806 ABEND                      *\n*                                                                    *\n*  RESTRICTIONS: NONE                                                *\n*                                                                    *\n*  REGISTER CONVENTIONS:                                             *\n*                                                                    *\n*          STANDARD ENTRY LINKAGE                                    *\n*                                                                    *\n*          R0 AND R1 USED FOR SYSTEM SERVICE INVOCATION              *\n*          R2 THROUGH R6 ARE WORK REGISTERS                          *\n*          R7 AGCB ADDRESSING                                        *\n*          R8 THROUGH R9 ARE WORK REGISTERS                          *\n*          R10 AGCB ADDRESSING                                       *\n*          R11 IS A WORK REGISTERS                                   *\n*          R12 IS THE BASE REGISTER                                  *\n*                                                                    *\n*                                                                    *\n*  INPUT:  None                                                      *\n*                                                                    *\n*  OUTPUT: UPDATED MIB VALUES                                        *\n*                                                                    *\n*  RETURN CODES = 0  NORMAL TERMINATION                              *\n*                                                                    *\n**********************************************************************\n         SPACE 1\n         PRINT ON,GEN,NODATA\n         SPACE 1\nNIMHSM   CSECT ,                   Establish the NIMHSM csect\n         SPACE 1\n         USING *,R15\n         SPACE 1\nNIMHSM   MODID                     Est. module identification\n         STM   R14,R12,12(R13)     Save the caller's registers\n         LR    R12,R15             Setup the local base register\n         DROP  R15\n         USING NIMHSM,R12          Est. code addressability\n         LR    R7,R1               Save the AGCB address\n         USING AGCB,R7             Establish AGCB addr.\n         LA    R15,NIMH000         Prepare for the BSM\n         O     R15,=X'80000000'    Indicate AMODE=31\n         BSM   R0,R15              Set the AMODE, continue on\nNIMH000  DS    0H\n         MODESET KEY=NZERO,        Get into supervisor state           C\n               MODE=SUP\n         GETMAIN RC,               Allocate STCB                       C\n               LV=STCBLEN,                                             C\n               SP=230,                                                 C\n               LOC=ANY\n         LTR   R15,R15             Successful GETMAIN ...\n         BZ    NIMH010              Yes, skip ABEND and continue\n         ABEND 666,,,USER          Terminate the subtask\nNIMH010  DS    0H\n         LR    R10,R1              Set STCB addressability\n         USING STCB,R10            Establish global addr. for          C\n                                    the STCB\n         LR    R2,R10              Zero the\n         LA    R3,STCBLEN           new subtask\n         MVCL  R2,R14                control block\n         MVC   STCBID,=C'STCB'     Set the eye catcher\n         MVC   STCBMN,=C'NIMHSM  ' Set the module name\n         SPACE 1\n         ST    R7,STCBAGCB         Save the AGCB address\n         LA    R15,STCBSAVE        Perform\n         ST    R13,4(,R15)           save\n         ST    R15,8(,R13)             area\n         LR    R13,R15                   linkage\n***********************************************************************\n*        SET UP ESTAE ROUTINE                                         *\n***********************************************************************\n         MVC   STCBMPL(NIMEPLL),NIMEPL    Copy list form ESTAE\n         L     R2,=V(NIMESTA)      Get the ESTAE routine address\n         ESTAE (2),                Establish the ESTAE exit            C\n               MF=(E,STCBMPL),                                         C\n               PARAM=(R10)\n         MVC   STCBMPL(WTO1L),WTO1 Copy the WPL for message 1\n         WTO   MF=(E,STCBMPL)      Issue message to operator\n***********************************************************************\n*        INITIALIZATION                                               *\n***********************************************************************\n         MVC   HSMBCDS(3),=X'090003'   first field - DspStr, len=3\n         MVC   HSMMCDS(3),=X'090003'   first field - DspStr, len=3\n         MVC   HSMOCDS(3),=X'090003'   first field - DspStr, len=3\n         MVC   HSMJRNL(3),=X'090003'   first field - DspStr, len=3\n         BAL   R8,HSMSRCH              Go get HSM ascb if up\nNIMH060  DS    0H\n         OI    INITFLAG,HSMBIT         let mom know we're done\n***********************************************************************\n*        SET UP TIMER                                                 *\n***********************************************************************\nTIMESET  DS    0H\n         XC    STCBTECB,STCBTECB       Clear the timer ECB\n         TM    STCBFLG1,STCB1TIM       STIMERM set?\n         BO    WAIT                      yes, go finish wait\n         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM\n         LA    R4,STCBTMID             Point to STIMERD id word area\n         LA    R5,AGCBHINT             Get the timer interval address\n         LA    R6,STCBTECB             Get addr of ECB addr\n         ST    R6,STCBCOMA             Save it\n         OI    STCBFLG1,STCB1TIM       Indicate timer outstanding ...\n         STIMERM SET,                  Set/reset NPRO timer            C\n               DINTVL=(R5),                                            C\n               ID=(R4),                                                C\n               EXIT=TIMEXIT,                                           C\n               PARM=STCBCOMA,                                          C\n               MF=(E,STCBMPL)\n***********************************************************************\n*        WAIT FOR TIMER POP OR POST FROM AGENT                        *\n***********************************************************************\nWAIT     DS    0H\n         LA    R4,STCBTECB             Point to timer ECB\n         ST    R4,STCBTEP              Save it in list\n         LA    R4,AGCBECBH             Point to communication ECB\n         ST    R4,STCBCEP              Save it in list\n         OI    STCBCEP,X'80'           Indicate end of ECB list\n         WAIT  1,                      Wait for something to post      C\n               ECBLIST=STCBECBL,                                       C\n               LONG=YES\n         TM    AGCBECBH,X'40'          Did we get posted by the agent?\n         BO    EXIT                     Yes, assume shutdown for now\n         TM    STCBTECB,X'40'          Did the timer pop?\n         BZ    TIMESET                  No, don't know, go wait again\n***********************************************************************\n*        MIB UPDATE                                                   *\n***********************************************************************\nMIBUPDT  DS    0H\n*        WTO   'HSM METRICS ROUTINE'\n         XI    STCBFLG1,STCB1TIM       clear timer flag\n         BAL   R8,HSMSRCH\n         B     TIMESET\n***********************************************************************\n*        DFHSM STC SEARCH                                             *\n***********************************************************************\nHSMSRCH  DS    0H\n         XC    HSMASCB,HSMASCB         clear HSM ascb addr\n         XC    HSMASID,HSMASID         clear HSM asid\n         L     R2,CVTPTR               POINT TO CVT  - X'10'\n         USING CVT,R2                  MAP CVT\n         L     R2,CVTASVT              POINT TO ASVT\n         DROP  R2                      STOP USING R2 FOR CVT\n         USING ASVT,R2                 MAP ASVT\n         LA    R4,ASVTENTY             POINT TO FIRST ENTRY IN TABLE\n         L     R3,ASVTMAXU             LOAD MAX NUMBER OF ENTRIES\nNIMH020  DS    0H\n         TM    0(R4),ASVTAVAL          IS THIS AN ASCB ADDRESS?\n         BNO   NIMH030                  YES, BRANCH\n         LA    R4,4(,R4)                NO, POINT TO NEXT ENTRY IN ASVT\n         BCT   R3,NIMH020              GO CHECK NEXT ASVT ENTRY\n         BR    R8                      DFHSM not found, stop checks\nNIMH030  DS    0H\n         L     R9,0(R4)                POINT TO ASCB\n         USING ASCB,R9                 MAP IT\n         L     R5,ASCBJBNI             POINT TO JOBNAME\n         CL    R5,=F'0'                WAS THIS A START/MOUNT/LOGON?\n         BE    NIMH040                 YES, BRANCH\n         CLC   0(8,R5),=CL8'DFHSM   '  IS IT THE ASCB OF JOB IN TABLE?\n         BE    NIMH050                 YES, BRANCH\n         LA    R4,4(,R4)               NO, POINT TO NEXT ENTRY IN ASVT\n         BCT   R3,NIMH020              GO CHECK NEXT ASVT ENTRY\n         BR    R8                      DFHSM not found, stop checks\nNIMH040  DS    0H\n         L     R5,ASCBJBNS             POINT TO START/MOUNT/LOGON NAME\n         CLC   0(8,R5),=CL8'DFHSM   '  IS IT THE ASCB OF JOB IN TABLE?\n         BE    NIMH050                 YES, BRANCH\n         LA    R4,4(,R4)               NO, POINT TO NEXT ENTRY IN ASVT\n         BCT   R3,NIMH020              GO CHECK NEXT ASVT ENTRY\n         BR    R8                      DFHSM not found, stop checks\nNIMH050  DS    0H\n         ST    R9,HSMASCB              save ascb address\n         LH    R0,ASCBASID             load asid\n         STH   R0,HSMASID              save asid\n         BR    R8                      return\n***********************************************************************\n*        TIMER EXIT                                                   *\n***********************************************************************\nTIMEXIT  DS    0H\n         STM   R14,R12,4(R13)\n         LR    R4,R1                   SAVE PARAMETER\n         L     R5,4(R1)                POINT TO TIMEECB\n         POST  (R5)\n         LM    R14,R12,4(R13)\n         BR    R14\n*****************************\n*****   EXIT ROUTINES   *****\n*****************************\nEXIT     DS    0H\n         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM\n         LA    R4,STCBTMID             Point to STIMERD id word area\n         STIMERM CANCEL,               Cancel timer                    C\n               ID=(R4),                                                C\n               MF=(E,STCBMPL)\n         MVC   STCBMPL(WTO2L),WTO2 Copy the WPL for message 2\n         WTO   MF=(E,STCBMPL)      Issue message to operator\n         L     R9,4(,R13)          Get high save (last SACB reference)\n         FREEMAIN RU,              Free the STCB                       C\n               LV=STCBLEN,                                             C\n               A=(10),                                                 C\n               SP=230\n         LR    R13,R9              Get high save area address\n         RETURN (14,12),RC=0       Return to MVS, terminate sub task\n******************************\n*****   ERROR ROUTINES   *****\n******************************\n*SNAPRTN  DS    0H\n*         STM   R2,R5,REGSAVE\n*         LA    R2,STCBID\n*         LA    R3,STCBFLG1+1\n*         LA    R4,AGCBID\n*         LA    R5,MYTIE\n*         MVC   STCBMPL(NIMLPLL),NIMLPL  COPY LIST FORM LINK\n*         LINK  EP=PCCSSNAP,PARAM=((R2),(R3),(R4),(R5)),VL=1,\n*               MF=(E,STCBMPL)\n*         LM    R2,R3,REGSAVE\n*         BR    R8\n         EJECT\n**************************************************\n***   S T O R A G E    D E F I N I T I O N S   ***\n**************************************************\n         EJECT\nR0       EQU   0                   Register\nR1       EQU   1                     equates\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nPSA      EQU   0,4096,C'C'\nPSAAOLD  EQU   PSA+548,4,C'A'\nASCBPTR  EQU   PSAAOLD,4,C'F'\nNIMLPL   LINK  EP=PCCSSNAP,SF=L\nNIMLPLL  EQU   *-NIMLPL\nNIMEPL   ESTAE *-*,TERM=YES,       List form ESTAE parmlist            C\n               RECORD=YES,PARAM=*-*,MF=L\nNIMEPLL  EQU   *-NIMEPL\nNIMTPL   STIMERM SET,MF=L\nNIMTPLL  EQU   *-NIMTPL\nWTO1     WTO   'NMHS100I HSM PROBE INITIALIZATION COMPLETE',ROUTCDE=(1,C\n               10),MF=L\nWTO1L    EQU   *-WTO1\nWTO2     WTO   'NMHS199I HSM PROBE TERMINATION COMPLETE',ROUTCDE=(1,10)C\n               ,MF=L\nWTO2L    EQU   *-WTO2\n         LTORG\n         EJECT\n*************************\n*** DYNAMIC WORK AREA ***\n*************************\n         TITLE 'SUB TASK APPLICATION CONTROL BLOCK'\n         NIMSTCB ,                 GENERATE STCB DSECT\n         TITLE 'AGENT CONTROL BLOCK (AGCB)'\n         NIMAGCB ,                 GENERATE AGCB DSECT\n         CVT DSECT=YES,LIST=YES    Generate MVS CVT dsect\n         IHAASVT\n         IHAASCB\n         EJECT\nNIMHSML  EQU    *-NIMHSM\n         END NIMHSM\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NIMJES2": {"ttr": 3850, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x1d\\x00Q\\x01\\x07'\\x7f\\x01\\t\\x04\\x0f\\x15T\\x01[\\x00\\xbc\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@\"", "ispf": {"version": "01.29", "flags": 0, "createdate": "2007-10-04T00:00:00", "modifydate": "2009-02-09T15:54:51", "lines": 347, "newlines": 188, "modlines": 0, "user": "SCHMUM"}, "text": "NIMJES2  TITLE 'JES2 subtask for the sub-agent      BY M.SCHMUTZOK'\n*PROCESS USING(WARN(15))\n         ACONTROL CPAT(NOSYSL,NOCASE)\n**********************************************************************\n*  (C)   Copyright Shands HealthCare, 2009                           *\n*  Program was written by:                                           *\n*    Michael Schmutzok                                               *\n*    Sr. Systems Programmer                                          *\n*    Shands HealthCare                                               *\n*    Information Services                                            *\n*    1329 SW 16th St, Room 3150                                      *\n*    Gainesville, FL  32608-1128                                     *\n*    mailto:schmum@shands.ufl.edu                                    *\n*    352.265.7982          (fax)                                     *\n*    352.265.8317  x85465  (voice)                                   *\n**********************************************************************\n*                                                                    *\n*  MODULE NAME:  NIMJES2                                             *\n*                                                                    *\n*                                                                    *\n*  DESCRIPTIVE NAME:  SNMP SUBAGENT FOR NIMBUS                       *\n*                                                                    *\n*  FUNCTION: THIS MODULE IS UNDER CONSTRUCTION. FUTURE USES MAY      *\n*            INCLUDE:                                                *\n*                                                                    *\n*            - Spool volume utilization                              *\n*                                                                    *\n*  OPERATION: THE FOLLOWING ACTIONS ARE TAKEN BY THIS MODULE:        *\n*      1) INITIALIZE THE SUB-TASK CONTROL BLOCK                      *\n*      2) ESTABLISH THE ESTAE ENVIRONMENT                            *\n*      3) SET THE TIMER                                              *\n*      4) WAIT FOR TIMER POP OR AGENT POST                           *\n*      5) EXECUTE SYSTEM REXX EXEC 'QUERYJES' TO GET JOE AND JQE     *\n*         VALUES                                                     *\n*      6) UPDATE THE MIB VALUES                                      *\n*                                                                    *\n*  DEPENDENCIES: IF USING THE SNAP FUNCTION FOR DEBUGGING, MAKE      *\n*                SURE THE PCCSSNAP MODULE IS IN THE STEPLIB OR       *\n*                LINKLIST TO PREVENT S806 ABEND                      *\n*                                                                    *\n*  RESTRICTIONS: NONE                                                *\n*                                                                    *\n*  REGISTER CONVENTIONS:                                             *\n*                                                                    *\n*          STANDARD ENTRY LINKAGE                                    *\n*                                                                    *\n*          R0 AND R1 USED FOR SYSTEM SERVICE INVOCATION              *\n*          R2 THROUGH R6 ARE WORK REGISTERS                          *\n*          R7 AGCB ADDRESSING                                        *\n*          R8 THROUGH R9 ARE WORK REGISTERS                          *\n*          R10 AGCB ADDRESSING                                       *\n*          R11 IS A WORK REGISTERS                                   *\n*          R12 IS THE BASE REGISTER                                  *\n*                                                                    *\n*                                                                    *\n*  INPUT:  None                                                      *\n*                                                                    *\n*  OUTPUT: UPDATED MIB VALUES                                        *\n*                                                                    *\n*  RETURN CODES = 0  NORMAL TERMINATION                              *\n*                                                                    *\n*  CHANGES:                                                          *\n*    1/30/09 - Added code to execute the system REXX exec, QUERYJES. *\n*              This exec must reside in SYS1.SAXREXEC. The exec      *\n*              will issue the $DJOBDEF and $DOUTDEF commands to      *\n*              extract the JOE and JQE values.                       *\n*                                                                    *\n**********************************************************************\n         SPACE 1\n         PRINT ON,GEN,NODATA\n         SPACE 1\nNIMJES2  CSECT ,                       Establish the NIMJES2 csect\n         SPACE 1\n         USING *,R15\n         SPACE 1\nNIMJES2  MODID                         Est. module identification\n         STM   R14,R12,12(R13)         Save the caller's registers\n         LR    R12,R15                 Setup the local base register\n         DROP  R15\n         USING NIMJES2,R12             Est. code addressability\n         LR    R7,R1                   Save the AGCB address\n         USING AGCB,R7                 Establish AGCB addr.\n         LA    R15,NIMJ000             Prepare for the BSM\n         O     R15,=X'80000000'        Indicate AMODE=31\n         BSM   R0,R15                  Set the AMODE, continue on\nNIMJ000  DS    0H\n         MODESET KEY=NZERO,            Get into supervisor state       C\n               MODE=SUP\n         GETMAIN RC,                   Allocate STCB                   C\n               LV=STCBLEN,                                             C\n               SP=230,                                                 C\n               LOC=ANY\n         LTR   R15,R15                 Successful GETMAIN ...\n         BZ    NIMJ010                  Yes, skip ABEND and continue\n         ABEND 666,,,USER              Term the subtask (not the agent)\nNIMJ010  DS    0H\n         LR    R10,R1                  Set STCB addressability\n         USING STCB,R10                Establish global addr. for      C\n                                        the STCB\n         LR    R2,R10                  Zero the\n         LA    R3,STCBLEN               new subtask\n         MVCL  R2,R14                    control block\n         MVC   STCBID,=C'STCB'         Set the eye catcher\n         MVC   STCBMN,=C'NIMJES2 '     Set the module name\n         SPACE 1\n         ST    R7,STCBAGCB             Save the AGCB address\n         LA    R15,STCBSAVE            Perform\n         ST    R13,4(,R15)               save\n         ST    R15,8(,R13)                 area\n         LR    R13,R15                       linkage\n***********************************************************************\n*        SET UP ESTAE ROUTINE                                         *\n***********************************************************************\n         MVC   STCBMPL(NIMEPLL),NIMEPL Copy list form ESTAE\n         L     R2,=V(NIMESTA)          Get the ESTAE routine address\n         ESTAE (2),                    Establish the ESTAE exit        C\n               MF=(E,STCBMPL),                                         C\n               PARAM=(R10)\n         MVC   STCBMPL(WTO1L),WTO1 Copy the WPL for message 1\n         WTO   MF=(E,STCBMPL)          Issue message to operator\n***********************************************************************\n*        INITIALIZATION                                               *\n***********************************************************************\n         MVC   JESSPLU(3),=X'090003'   jessplu - DspStr, len=3\n         MVC   JESJOEU(3),=X'090003'   jesjoeu - DspStr, len=3\n         MVC   JESJQEU(3),=X'090003'   jesjqeu - DspStr, len=3\n         XC    MyVarLst,MyVarLst       Clear the VarLst header\n         XC    MyVarEn1,MyVarEn1       Clear the Var entry\n         XC    MyVarEn2,MyVarEn2       Clear the Var entry\n         LA    2,MyVarLst              Point to my variable list\n         USING AxrArgLst,2             Addressability\n         MVC   AxrArgLstId,MyAxrVarLstAcro Indicate VAR list type\n         LA    5,AxrArgLstCurVer       Version = 0\n         ST    5,AxrArgLstVer          Initialize the version\n         L     5,kNumVars              Obtain the number of variables\n         STH   5,AxrArgLstNumber       Store the number of variables\n         DROP  2\n         LA    2,MyVarEn1              1st var entry\n         USING AxrArgEntry,2           Addressability\n         LA    5,JOEINT                field to store value\n         ST    5,AXRARGADDRLOW         Store output argument\n         LA    5,VarName1              name of field to store value\n         ST    5,AXRARGNameADDRLOW     Store addr of name of output var\n         MVI   AxrArgNameLength,L'VarName1 len of field to store value\n         OI    AXRARGINPUTFLGS1,AXRARGOutput   Indicate output var\n         MVI   AxrArgType,AxrArgTypeChar       Indicate char string\n         LA    5,L'JOEINT              Obtain length (in bytes)\n         SLL   5,1                     Mult by 2 - length is in hex    C\n                                       digits (not bytes)\n         ST    5,AxrArgLength          Store length in var entry\n         DROP 2\n         LA  2,MyVarEn2                2nd var entryy\n         USING AxrArgEntry,2           Addressability\n         LA  5,JQEINT                  field to store value\n         ST  5,AXRARGADDRLOW           Store output argument\n         LA  5,VarName2                name of field to store value\n         ST  5,AXRARGNameADDRLOW       Store addr of name of output var\n         MVI AxrArgNameLength,L'VarName2 len of field to store value\n         OI  AXRARGINPUTFLGS1,AXRARGOutput   Indicate output var\n         MVI AxrArgType,AxrArgTypeChar       Indicate char string\n         LA  5,L'JQEINT                Obtain length (in bytes)\n         SLL 5,1                       Mult by 2 - length is in hex    *\n                                       digits (not bytes)\n         ST  5,AxrArgLength            Store length in var entry\n         OI    INITFLAG,JES2BIT        Show that we're initialized\n***********************************************************************\n*        SET UP TIMER                                                 *\n***********************************************************************\nTIMESET  DS    0H\n         XC    STCBTECB,STCBTECB       Clear the timer ECB\n         TM    STCBFLG1,STCB1TIM       STIMERM set?\n         BO    WAIT                      yes, go finish wait\n         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM\n         LA    R4,STCBTMID             Point to STIMERD id word area\n         LA    R5,AGCBJINT             Get the timer interval address\n         LA    R6,STCBTECB             Get addr of ECB addr\n         ST    R6,STCBCOMA             Save it\n         OI    STCBFLG1,STCB1TIM       Indicate timer outstanding ...\n         STIMERM SET,                  Set/reset NPRO timer            C\n               DINTVL=(R5),                                            C\n               ID=(R4),                                                C\n               EXIT=TIMEXIT,                                           C\n               PARM=STCBCOMA,                                          C\n               MF=(E,STCBMPL)\n***********************************************************************\n*        WAIT FOR TIMER POP OR POST FROM AGENT                        *\n***********************************************************************\nWAIT     DS    0H\n         LA    R4,STCBTECB             Point to timer ECB\n         ST    R4,STCBTEP              Save it in list\n         LA    R4,AGCBECBJ             Point to communication ECB\n         ST    R4,STCBCEP              Save it in list\n         OI    STCBCEP,X'80'           Indicate end of ECB list\n         WAIT  1,                      Wait for something to post      C\n               ECBLIST=STCBECBL,                                       C\n               LONG=YES\n         TM    AGCBECBJ,X'40'          Did we get posted by the agent?\n         BO    EXIT                     Yes, assume shutdown for now\n         TM    STCBTECB,X'40'          Did the timer pop?\n         BZ    TIMESET                  No, don't know, go wait again\n***********************************************************************\n*        MIB UPDATE                                                   *\n***********************************************************************\nMIBUPDT  DS    0H\n*        WTO   'JES2 METRICS ROUTINE'\n         MVC   STCBMPL(STCBAPLL),AXREXX Copy list form AXREXX\n         AXREXX REQUEST=EXECUTE,       Call system REXX                C\n               NAME=kEXECNAME,         Exec name (QUERYJES)            C\n               TIMELIMIT=NO,           No time limit                   C\n               REXXVARS=MyVarLst,      My variable list                C\n               REXXDIAG=MyAxrDiag,     Diagnostic area for errors      C\n               SYNC=YES,               Synchronize                     C\n               RETCODE=OutRC,          field to store return code      C\n               RSNCODE=OutRsn,         field to store reason code      C\n               MF=(E,STCBMPL)\n         LTR   15,15                   AXREXX failure?\n         JNZ   FailLabel                 yes, go tell us\n         LA    2,MyAxrDiag               no, let's check the diag area\n         USING AxrDiag,2               Diagnostic area addressability\n         TM    AxrDiagFlgs1,AxrDiagNoExecRetCode Exec rc unattainable?\n         JNZ   FailLabel                 yes, go tell us\n         L     15,AxrDiagExecRetCode     no, load exec return code\n         LTR   15,15                   Bad exec return code?\n         JNZ   FailLabel                 yes, go tell us\n         MVC   JESJOEU+3(3),JOEINT     Update the MIB\n         MVC   JESJQEU+3(3),JQEINT     Update the MIB\n         XI    STCBFLG1,STCB1TIM       clear timer flag\n         B     TIMESET                 Go wait for next interval\n***********************************************************************\n*        TIMER EXIT                                                   *\n***********************************************************************\nTIMEXIT  DS    0H\n         STM   R14,R12,4(R13)          Save regs\n         LR    R4,R1                   Save parameter\n         L     R5,4(R1)                Point to TIMEECB\n         POST  (R5)                    Post the event\n         LM    R14,R12,4(R13)          Load regs\n         BR    R14                     Return\n*****************************\n*****   EXIT ROUTINES   *****\n*****************************\nEXIT     DS    0H\n         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM\n         LA    R4,STCBTMID             Point to STIMERD id word area\n         STIMERM CANCEL,               Cancel timer                    C\n               ID=(R4),                                                C\n               MF=(E,STCBMPL)\n         MVC   STCBMPL(WTO2L),WTO2     Copy the WPL for message 2\n         WTO   MF=(E,STCBMPL)          Issue message to operator\n         L     R9,4(,R13)              Get high save (last SACB ref)\n         FREEMAIN RU,                  Free the STCB                   C\n               LV=STCBLEN,                                             C\n               A=(10),                                                 C\n               SP=230\n         LR    R13,R9                  Get high save area address\n         RETURN (14,12),RC=0           Return to MVS, terminate subtask\n******************************\n*****   ERROR ROUTINES   *****\n******************************\nFailLabel DS   0H\n         MVC   STCBMPL(WTO3L),WTO3     Copy the WPL for message 3\n         LA    R2,STCBMPL              Point to dynamic area\n         L     R3,OutRC                Load RC\n         CVD   R3,STCBDWD              Convert it to decimal\n         UNPK  WTO3RC(8,R2),STCBDWD+4(4) Unpack it\n         OI    WTO3RC+7(R2),X'F0'      Correct the sign\n         MVC   STCBDWD+3(4),OutRsn     Move reason code to work area\n         UNPK  WTO3RS(9,R2),STCBDWD+3(5) Unpack it to msg\n         MVI   WTO3RS+8(R2),C' '       Clear out that packed sign\n         TR    WTO3RS(8,R2),TABLE      Make hex viewable\n         WTO   MF=(E,STCBMPL)          Issue message to operator\n         BAL   R8,SNAPRTN              Snap the control blocks\n         B     TIMESET                 Go do it all over again\nSNAPRTN  DS    0H\n         STM   R2,R3,REGSAVE           Save regs\n         LA    R2,STCBTECB             Start of STCB\n         LA    R3,OutRsn               End of STCB\n         LA    R4,AGCBJTCB             Start of AGCB\n         LA    R5,AGCBECBJ             End of AGCB\n         MVC   STCBMPL(NIMLPLL),NIMLPL  COPY LIST FORM LINK\n         LINK  EP=PCCSSNAP,PARAM=((R2),(R3),(R4),(R5)),VL=1,           C\n               MF=(E,STCBMPL)\n         LM    R2,R3,REGSAVE           Reload regs\n         BR    R8                      Return whence we came\n         EJECT\n**************************************************\n***   S T O R A G E    D E F I N I T I O N S   ***\n**************************************************\n         EJECT\nR0       EQU   0                   Register\nR1       EQU   1                     equates\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nVarName1 DC    C'joeint'               6\nVarName2 DC    C'jqeint'               6\nkNumVars DC    F'2'                    4\nMyAxrVarLstAcro DC AL4(AxrVarLstAcro)  4\nkExecName DC   CL8'QUERYJES'           8\nNIMLPL   LINK  EP=PCCSSNAP,SF=L\nNIMLPLL  EQU   *-NIMLPL\nNIMEPL   ESTAE *-*,TERM=YES,       List form ESTAE parmlist            C\n               RECORD=YES,PARAM=*-*,MF=L\nNIMEPLL  EQU   *-NIMEPL\nNIMTPL   STIMERM SET,MF=L\nNIMTPLL  EQU   *-NIMTPL\nWTO1     WTO   'NMJS100I JES2 PROBE INITIALIZATION COMPLETE',ROUTCDE=(1C\n               ,10),MF=L\nWTO1L    EQU   *-WTO1\nWTO2     WTO   'NMJS199I JES2 PROBE TERMINATION COMPLETE',ROUTCDE=(1,10C\n               ),MF=L\nWTO2L    EQU   *-WTO2\nWTO3     WTO   'NMJS101E AXREXX ERROR, RETCODE= xxxxxxxx, RSNCODE= xxxxC\n               xxxx ',ROUTCDE=(1,10),MF=L\nWTO3L    EQU   *-WTO3\nWTO3RC   EQU   WPLTXT-WPL+32,8\nWTO3RS   EQU   WPLTXT-WPL+51,8\nAXREXX   AXREXX MF=(L,DAXREXX)\n         ORG   *-240\nTABLE    EQU   *\n         DS    240C\n         DC    C'0123456789ABCDEF'\n         LTORG\n         EJECT\n*************************\n*** DYNAMIC WORK AREA ***\n*************************\n         TITLE 'SUB TASK APPLICATION CONTROL BLOCK'\n         NIMSTCB ,                 GENERATE STCB DSECT\n         TITLE 'AGENT CONTROL BLOCK (AGCB)'\n         NIMAGCB ,                 GENERATE AGCB DSECT\n         EJECT\n         IEZWPL ,                  Generate MVS WPL dsect\n         EJECT\nNIMJES2L EQU   *-NIMJES2\n         END NIMJES2\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NIMMIB": {"ttr": 4101, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x02\\x01\\t\\x02/\\x01\\t\\x03\\x0f\\t&\\x02o\\x02f\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2009-01-22T00:00:00", "modifydate": "2009-01-30T09:26:02", "lines": 623, "newlines": 614, "modlines": 0, "user": "SCHMUM"}, "text": "-- ******************************************************************\n-- *  (C)   Copyright Shands HealthCare, 2009                       *\n-- *  Program was written by:                                       *\n-- *    Michael Schmutzok                                           *\n-- *    Sr. Systems Programmer                                      *\n-- *    Shands HealthCare                                           *\n-- *    Information Services                                        *\n-- *    1329 SW 16th St, Room 3150                                  *\n-- *    Gainesville, FL  32608-1128                                 *\n-- *    mailto:schmum@shands.ufl.edu                                *\n-- *    352.265.7982          (fax)                                 *\n-- *    352.265.8317  x85465  (voice)                               *\n-- ******************************************************************\nSHANDS-MIB DEFINITIONS ::= BEGIN\n\n      IMPORTS\n              enterprises             FROM RFC1155-SMI\n              OBJECT-TYPE             FROM RFC-1212\n              Counter                 FROM RFC1155-SMI\n              Gauge                   FROM RFC1155-SMI\n              DisplayString           FROM RFC1213-MIB\n              ifIndex                 FROM RFC1213-MIB\n              sysName                 FROM RFC1213-MIB\n              TRAP-TYPE               FROM RFC-1215;\n\n-- ****************************************************************************\n-- The shands enterprise               (1.3.6.1.4.1.15037)\n--   System Metrics                    (1.3.6.1.4.1.15037.1)\n--     LPAR Name                       (1.3.6.1.4.1.15037.1.1)\n--     Hardware Model                  (1.3.6.1.4.1.15037.1.2)\n--     OS Name                         (1.3.6.1.4.1.15037.1.3)\n--     OS Release                      (1.3.6.1.4.1.15037.1.4)\n--     Last IPL Date                   (1.3.6.1.4.1.15037.1.5)\n--     Last IPL Time                   (1.3.6.1.4.1.15037.1.6)\n--     System Status                   (1.3.6.1.4.1.15037.1.7)\n--     CPU Utilization                 (1.3.6.1.4.1.15037.1.8)\n--     JES2 Spool Utilization          (1.3.6.1.4.1.15037.1.9)\n--     JES2 JOE Utilization            (1.3.6.1.4.1.15037.1.10)\n--     JES2 JQE Utilization            (1.3.6.1.4.1.15037.1.11)\n--   DASD Metrics                      (1.3.6.1.4.1.15037.2)\n--     V2X1 Status                     (1.3.6.1.4.1.15037.2.1)\n--     V2X2 Status                     (1.3.6.1.4.1.15037.2.2)\n--   Application Metrics               (1.3.6.1.4.1.15037.3)\n--     CICS Metrics                    (1.3.6.1.4.1.15037.3.1)\n--       SMSPROD Status                (1.3.6.1.4.1.15037.3.1.1)\n--       SMS2PRD Status                (1.3.6.1.4.1.15037.3.1.2)\n--       SMSEADP Status                (1.3.6.1.4.1.15037.3.1.3)\n--       HISPRD  Status                (1.3.6.1.4.1.15037.3.1.4)\n--       HISRS   Status                (1.3.6.1.4.1.15037.3.1.5)\n--       SMSTEST Status                (1.3.6.1.4.1.15037.3.1.6)\n--       SMS2TST Status                (1.3.6.1.4.1.15037.3.1.7)\n--       SMSEADT Status                (1.3.6.1.4.1.15037.3.1.8)\n--       HISTEST Status                (1.3.6.1.4.1.15037.3.1.9)\n--       CSFP    Status                (1.3.6.1.4.1.15037.3.1.10)\n--     DB2 Metrics                     (1.3.6.1.4.1.15037.3.2)\n--       DSNPMSTR Status               (1.3.6.1.4.1.15037.3.2.1)\n--       DSNPDBM1 Status               (1.3.6.1.4.1.15037.3.2.2)\n--       DSNPDIST Status               (1.3.6.1.4.1.15037.3.2.3)\n--       IRLMPROC Status               (1.3.6.1.4.1.15037.3.2.4)\n--       DSNHMSTR Status               (1.3.6.1.4.1.15037.3.2.5)\n--       DSNHDBM1 Status               (1.3.6.1.4.1.15037.3.2.6)\n--       DSNHDIST Status               (1.3.6.1.4.1.15037.3.2.7)\n--       IRLMPROH Status               (1.3.6.1.4.1.15037.3.2.8)\n--     STC Metrics                     (1.3.6.1.4.1.15037.3.3)\n--       UC4 Status                    (1.3.6.1.4.1.15037.3.3.1)\n--       XPTRMAIN Status               (1.3.6.1.4.1.15037.3.3.2)\n--       NIMBCONS Status               (1.3.6.1.4.1.15037.3.3.3)\n--       PSYNCH Status                 (1.3.6.1.4.1.15037.3.3.4)\n--     HSM Metrics                     (1.3.6.1.4.1.15037.3.4)\n--       Status                        (1.3.6.1.4.1.15037.3.4.1)\n--       BCDS Freespace                (1.3.6.1.4.1.15037.3.4.2)\n--       MCDS Freespace                (1.3.6.1.4.1.15037.3.4.3)\n--       OCDS Freespace                (1.3.6.1.4.1.15037.3.4.4)\n--       Journal Freespace             (1.3.6.1.4.1.15037.3.4.5)\n--   Error Messages                    (1.3.6.1.4.1.15037.4)\n--     Message ID                      (1.3.6.1.4.1.15037.4.1)\n--     Message                         (1.3.6.1.4.1.15037.4.2)\n--   Traps                             (1.3.6.1.4.1.15037.5)\n--     Error Message                   (1.3.6.1.4.1.15037.5.1)\n\n-- ****************************************************************************\nshands                    OBJECT IDENTIFIER  ::= { enterprises 15037 }\n\nsthSystem                 OBJECT IDENTIFIER  ::= { shands 1 }\n\nsthDasd                   OBJECT IDENTIFIER  ::= { shands 2 }\n\nsthApps                   OBJECT IDENTIFIER  ::= { shands 3 }\nsthCics                   OBJECT IDENTIFIER  ::= { sthApps 1 }\nsthDb2                    OBJECT IDENTIFIER  ::= { sthApps 2 }\nsthStc                    OBJECT IDENTIFIER  ::= { sthApps 3 }\nsthHsm                    OBJECT IDENTIFIER  ::= { sthApps 4 }\n\nsthErrorMessages          OBJECT IDENTIFIER  ::= { shands 4 }\n\nsthTraps                  OBJECT IDENTIFIER  ::= { shands 5 }\nsthErrMsgTrap             OBJECT IDENTIFIER  ::= { sthTraps 1 }\n\n-- ****************************************************************************\n--    System Information Group\n--    ===============================\n--\n-- The shands enterprise               (1.3.6.1.4.1.15037)\n--      sthSystem                        (1.3.6.1.4.1.15037.1)\n--\n--      The System group contains various system metrics\n--\n-- ****************************************************************************\n\nsthSysLparName OBJECT-TYPE\n    SYNTAX  DisplayString (SIZE (0..8))\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"System name\"\n    ::= { sthSystem 1 }\n\nsthSyshardwareModel OBJECT-TYPE\n    SYNTAX  DisplayString (SIZE (0..8))\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"System model\"\n    ::= { sthSystem 2 }\n\nsthSysOsProductName OBJECT-TYPE\n    SYNTAX  DisplayString (SIZE (0..16))\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"System OS Product Name\"\n    ::= { sthSystem 3 }\n\nsthSysOSProductVersion OBJECT-TYPE\n    SYNTAX  DisplayString (SIZE (0..8))\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"System OS Version\"\n    ::= { sthSystem 4 }\n\nsthSysLastIplDate OBJECT-TYPE\n    SYNTAX  DisplayString (SIZE (0..6))\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"System Last IPL Date\"\n    ::= { sthSystem 5 }\n\nsthSysLastIplTime OBJECT-TYPE\n    SYNTAX  DisplayString (SIZE (0..8))\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"System Last IPL Time\"\n    ::= { sthSystem 6 }\n\nsthSysStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"System status\"\n    ::= { sthSystem 7 }\n\nsthCpuUse OBJECT-TYPE\n    SYNTAX INTEGER (1..100)\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"System CPU utilization\"\n    ::= { sthSystem 8 }\n\nsthJesSpoolUse OBJECT-TYPE\n    SYNTAX INTEGER (1..100)\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"JES2 spool utilization\"\n    ::= { sthSystem 9 }\n\nsthJesJoeUse OBJECT-TYPE\n    SYNTAX INTEGER (1..100)\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"JES2 JOE utilization\"\n    ::= { sthSystem 10 }\n\nsthJesJqeUse OBJECT-TYPE\n    SYNTAX INTEGER (1..100)\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"JES2 JQE utilization\"\n    ::= { sthSystem 11 }\n\n-- ****************************************************************************\n--    Dasd Information Group\n--    ===============================\n--\n-- The shands enterprise               (1.3.6.1.4.1.15037)\n--      sthDasd                        (1.3.6.1.4.1.15037.2)\n--\n--      The Dasd group contains the Dasd subsystem information and status\n--\n-- ****************************************************************************\n\nsthV2x1Status OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"V2X1 Status\"\n    ::= { sthDasd 1 }\n\nsthV2x2Status OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"V2X2 Status\"\n    ::= { sthDasd 2 }\n\n-- ****************************************************************************\n--    Application Information Group - CICS\n--    ===============================\n--\n-- The shands enterprise               (1.3.6.1.4.1.15037)\n--      sthApps                        (1.3.6.1.4.1.15037.3)\n--        sthCics                      (1.3.6.1.4.1.15037.3.1)\n--\n--      The CICS group contains the CICS Region metrics\n--\n-- ****************************************************************************\n\nsthCicsSmsprodStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"CICS Region SMSPROD status\"\n    ::= { sthCics 1 }\n\nsthCicsSms2prdStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"CICS Region SMS2PRD status\"\n    ::= { sthCics 2 }\n\nsthCicsSmseadpStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"CICS Region SMSEADP status\"\n    ::= { sthCics 3 }\n\nsthCicsHisprdStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"CICS Region HISPRD status\"\n    ::= { sthCics 4 }\n\nsthCicsHisrsStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"CICS Region HISRS status\"\n    ::= { sthCics 5 }\n\nsthCicsSmstestStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"CICS Region SMSTEST status\"\n    ::= { sthCics 6 }\n\nsthCicsSms2tstStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"CICS Region SMS2TST status\"\n    ::= { sthCics 7 }\n\nsthCicsSmseadtStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"CICS Region SMSEADT status\"\n    ::= { sthCics 8 }\n\nsthCicsHistestStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"CICS Region HISTEST status\"\n    ::= { sthCics 9 }\n\nsthCicsCsfpStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"CICS Region CSFP status\"\n    ::= { sthCics 10 }\n\n-- ****************************************************************************\n--    Application Information Group - DB2\n--    ===============================\n--\n-- The shands enterprise               (1.3.6.1.4.1.15037)\n--      sthApps                        (1.3.6.1.4.1.15037.3)\n--        sthDb2                       (1.3.6.1.4.1.15037.3.2)\n--\n--      The DB2 group contains the DB2 Region metrics\n--\n-- ****************************************************************************\n\nsthDb2DsnpmstrStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"DB2 region DSNPMSTR status\"\n    ::= { sthDb2 1 }\n\nsthDb2Dsnpdbm1Status OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"DB2 region DSNPDBM1 status\"\n    ::= { sthDb2 2 }\n\nsthDb2DsnpdistStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"DB2 region DSNPDIST status\"\n    ::= { sthDb2 3 }\n\nsthDb2IrlmprocStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"DB2 region IRLMPROC status\"\n    ::= { sthDb2 4 }\n\nsthDb2DsnhmstrStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"DB2 region DSNHMSTR status\"\n    ::= { sthDb2 5 }\n\nsthDb2Dsnhdbm1Status OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"DB2 region DSNHDBM1 status\"\n    ::= { sthDb2 6 }\n\nsthDb2DsnhdistStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"DB2 region DSNHDIST status\"\n    ::= { sthDb2 7 }\n\nsthDb2IrlmprohStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"DB2 region IRLMPROH status\"\n    ::= { sthDb2 8 }\n\n-- ****************************************************************************\n--    Application Information Group - STC\n--    ===============================\n--\n-- The shands enterprise               (1.3.6.1.4.1.15037)\n--      sthApps                        (1.3.6.1.4.1.15037.3)\n--        sthStc                       (1.3.6.1.4.1.15037.3.3)\n--\n--      The STC group contains STC metrics\n--\n-- ****************************************************************************\n\nsthStcUc4Status OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"UC4 status\"\n    ::= { sthStc 1 }\n\nsthStcXptrmainStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"XPTRMAIN status\"\n    ::= { sthStc 2 }\n\nsthStcNimbconsStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"NIMBCONS status\"\n    ::= { sthStc 3 }\n\nsthStcPsynchStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"PSYNCH status\"\n    ::= { sthStc 4 }\n\n-- ****************************************************************************\n--    Application Information Group - DFHSM\n--    ===============================\n--\n-- The shands enterprise               (1.3.6.1.4.1.15037)\n--      sthApps                        (1.3.6.1.4.1.15037.3)\n--        sthHsm                       (1.3.6.1.4.1.15037.3.4)\n--\n--      The HSM group contains the DFHSM metrics\n--\n-- ****************************************************************************\n\nsthHsmStatus OBJECT-TYPE\n    SYNTAX INTEGER\n    {\n      up(1),\n      down(2)\n      maint(3)\n    }\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"DFSMShsm status\"\n    ::= { sthHsm 1 }\n\nsthHsmBcdsUse OBJECT-TYPE\n    SYNTAX INTEGER (1..100)\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"DFSMShsm BCDS utilization\"\n    ::= { sthHsm 2 }\n\nsthHsmMcdsUse OBJECT-TYPE\n    SYNTAX INTEGER (1..100)\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"DFSMShsm MCDS utilization\"\n    ::= { sthHsm 3 }\n\nsthHsmOcdsUse OBJECT-TYPE\n    SYNTAX INTEGER (1..100)\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"DFSMShsm OCDS utilization\"\n    ::= { sthHsm 4 }\n\nsthHsmJrnlUse OBJECT-TYPE\n    SYNTAX INTEGER (1..100)\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"DFSMShsm Journal utilization\"\n    ::= { sthHsm 5 }\n\n-- ****************************************************************************\n--    Error MEssage Information Group\n--    ===============================\n--\n-- The shands enterprise               (1.3.6.1.4.1.15037)\n--      sthErrorMessages               (1.3.6.1.4.1.15037.4)\n--\n--      The Error Message group contains select z/OS error message metrics\n--\n-- ****************************************************************************\n\nsthMsgId OBJECT-TYPE\n    SYNTAX STRING (9)\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"Unique message ID\"\n    ::= { sthErrorMessages 1 }\n\nsthMsg OBJECT-TYPE\n    SYNTAX STRING (1..256)\n    ACCESS read-only\n    STATUS mandatory\n    DESCRIPTION \"Message\"\n    ::= { sthErrorMessages 2 }\n\n-- ****************************************************************************\n--    System Traps\n--    ============================================\n--\n-- The shands enterprise               (1.3.6.1.4.1.15037)\n--     sthTrap                         (1.3.6.1.4.1.15037.5)\n--       sthErrMsgTrap                 (1.3.6.1.4.1.15037.5.1)\n--\n-- ****************************************************************************\n\nsthErrMsgTrap TRAP-TYPE\n    ENTERPRISE      sthTrap\n    VARIABLES       {\n                      sthMsgId\n                      sthMsg\n                    }\n    DESCRIPTION \"This trap is sent when a monitored System message has been trip\nped.\"\n    ::= 1\n\n\nEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NIMSYS": {"ttr": 4357, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00(\\x01\\x084O\\x01\\t\\x02/\\x16\\x14\\x01\\x8f\\x01B\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "2008-12-09T00:00:00", "modifydate": "2009-01-22T16:14:28", "lines": 399, "newlines": 322, "modlines": 0, "user": "SCHMUM"}, "text": "NIMSYS   TITLE 'System subtask for the sub-agent      BY M.SCHMUTZOK'\n*PROCESS USING(WARN(15))\n         ACONTROL CPAT(NOSYSL,NOCASE)\n**********************************************************************\n*  (C)   Copyright Shands HealthCare, 2009                           *\n*  Program was written by:                                           *\n*    Michael Schmutzok                                               *\n*    Sr. Systems Programmer                                          *\n*    Shands HealthCare                                               *\n*    Information Services                                            *\n*    1329 SW 16th St, Room 3150                                      *\n*    Gainesville, FL  32608-1128                                     *\n*    mailto:schmum@shands.ufl.edu                                    *\n*    352.265.7982          (fax)                                     *\n*    352.265.8317  x85465  (voice)                                   *\n**********************************************************************\n*                                                                    *\n*  MODULE NAME:  NIMSYS                                              *\n*                                                                    *\n*                                                                    *\n*  DESCRIPTIVE NAME:  SNMP SUBAGENT FOR NIMBUS                       *\n*                                                                    *\n*  FUNCTION: THIS SUBTASK WILL EXTRACT VARIOUS ITEMS OF DATA FOR     *\n*            QUERYING BY NIMBUS. IT WILL ALSO MONITOR THE CPU        *\n*            UTILIZATION. CURRENT INFO AVAILABLE THROUGH THIS        *\n*            SUBTASK IS:                                             *\n*            SYSID   - SYSTEM ID                                     *\n*            CPUMDL  - CPU MODEL                                     *\n*            PRODNM  - PRODUCT NAME                                  *\n*            PRODVER - PRODUCT VERSION                               *\n*            IPLDATE - LAST IPL DATE                                 *\n*            IPLTIME - LAST IPL TIME                                 *\n*            SYSSTAT - SYSTEM STATUS (USED TO PUT SYSTEM IN 'MAINT'  *\n*                      MODE FOR LEGIMATE DOWNTIMES)                  *\n*                                                                    *\n*  OPERATION: THE FOLLOWING ACTIONS ARE TAKEN BY THIS MODULE:        *\n*      1) INITIALIZE THE SUB-TASK CONTROL BLOCK                      *\n*      2) ESTABLISH THE ESTAE ENVIRONMENT                            *\n*      3) SET THE TIMER                                              *\n*      4) WAIT FOR TIMER POP OR AGENT POST                           *\n*      5) UPDATE THE MIB VALUES                                      *\n*                                                                    *\n*  DEPENDENCIES: IF USING THE SNAP FUNCTION FOR DEBUGGING, MAKE      *\n*                SURE THE PCCSSNAP MODULE IS IN THE STEPLIB OR       *\n*                LINKLIST TO PREVENT S806 ABEND                      *\n*                                                                    *\n*  RESTRICTIONS: NONE                                                *\n*                                                                    *\n*  REGISTER CONVENTIONS:                                             *\n*                                                                    *\n*          STANDARD ENTRY LINKAGE                                    *\n*                                                                    *\n*          R0 AND R1 USED FOR SYSTEM SERVICE INVOCATION              *\n*          R2 THROUGH R6 ARE WORK REGISTERS                          *\n*          R7 AGCB ADDRESSING                                        *\n*          R8 THROUGH R9 ARE WORK REGISTERS                          *\n*          R10 AGCB ADDRESSING                                       *\n*          R11 IS A WORK REGISTERS                                   *\n*          R12 IS THE BASE REGISTER                                  *\n*                                                                    *\n*                                                                    *\n*  INPUT:  None                                                      *\n*                                                                    *\n*  OUTPUT: UPDATED MIB VALUES                                        *\n*                                                                    *\n*  RETURN CODES = 0  NORMAL TERMINATION                              *\n*                                                                    *\n**********************************************************************\n         SPACE 1\n         PRINT ON,GEN,NODATA\n         SPACE 1\nNIMSYS   CSECT ,                   Establish the NIMSYS csect\n         SPACE 1\n         USING *,R15\n         SPACE 1\nNIMSYS   MODID                     Est. module identification\n         STM   R14,R12,12(R13)     Save the caller's registers\n         LR    R12,R15             Setup the local base register\n         DROP  R15\n         USING NIMSYS,R12          Est. code addressability\n         LR    R7,R1               Save the AGCB address\n         USING AGCB,R7             Establish AGCB addr.\n         LA    R15,NIMS000         Prepare for the BSM\n         O     R15,=X'80000000'    Indicate AMODE=31\n         BSM   R0,R15              Set the AMODE, continue on\nNIMS000  DS    0H\n         MODESET KEY=NZERO,        Get into supervisor state           C\n               MODE=SUP\n         GETMAIN RC,               Allocate STCB                       C\n               LV=STCBLEN,                                             C\n               SP=230,                                                 C\n               LOC=ANY\n         LTR   R15,R15             Successful GETMAIN ...\n         BZ    NIMS010              Yes, skip ABEND and continue\n         ABEND 666,,,USER          Terminate the subtask (not the FSS)\nNIMS010  DS    0H\n         LR    R10,R1              Set STCB addressability\n         USING STCB,R10            Establish global addr. for          C\n                                    the STCB\n         LR    R2,R10              Zero the\n         LA    R3,STCBLEN           new subtask\n         MVCL  R2,R14                control block\n         MVC   STCBID,=C'STCB'     Set the eye catcher\n         MVC   STCBMN,=C'NIMSYS  ' Set the module name\n         SPACE 1\n         ST    R7,STCBAGCB         Save the AGCB address\n         LA    R15,STCBSAVE        Perform\n         ST    R13,4(,R15)           save\n         ST    R15,8(,R13)             area\n         LR    R13,R15                   linkage\n***********************************************************************\n*        SET UP ESTAE ROUTINE                                         *\n***********************************************************************\n         MVC   STCBMPL(NIMEPLL),NIMEPL    Copy list form ESTAE\n         L     R2,=V(NIMESTA)      Get the ESTAE routine address\n         ESTAE (2),                Establish the ESTAE exit            C\n               MF=(E,STCBMPL),                                         C\n               PARAM=(R10)\n         MVC   STCBMPL(WTO1L),WTO1 Copy the WPL for message 1\n         WTO   MF=(E,STCBMPL)      Issue message to operator\n***********************************************************************\n*        INITIALIZATION                                               *\n***********************************************************************\nMIBINIT  DS    0H\n         MVC   SYSID(3),=XL3'090008'\n         MVC   CPUMDL(3),=XL3'090008'\n         MVC   PRODNM(3),=XL3'090010'\n         MVC   PRODVER(3),=XL3'090008'\n         MVC   IPLDATE(3),=XL3'090006'\n         MVC   IPLTIME(3),=XL3'090008'\n         MVC   CPUUTIL(3),=XL3'010004'\n         MVC   SYSSTAT(3),=XL3'010001'\n         LA    R2,REQTYPE              load addr of request type\n         ST    R2,PARMLIST             save it to parm list #1\n         LA    R2,RECTYPE              load addr of record type\n         ST    R2,PARMLIST+4           save it to parm list #2\n         LA    R2,SUBTYPE              load addr of record sub type\n         ST    R2,PARMLIST+8           save it to parm list #3\n         LA    R3,R793RLEN             Length of record\n         L     R6,CVTPTR               Address of CVT\n         USING CVT,R6\n*   Use this code if using one of the address space subtypes\n*   (one section per ASID)\n*        L     R5,CVTASVT              ASVT address\n*        USING ASVT,R5\n*        M     R2,ASVTMAXU             Multiply by maximum users\n*        DROP  R5                      ASVT no longer needed\n         A     R3,HDRLEN               Add length of record headers\n         ST    R3,STCBERBL             Save buffer length\n         SR    R4,R4                   Subpool 0\n         GETMAIN RU,LV=(3),            Get storage                     C\n               SP=(4)\n         LTR   R15,R15                 Successful GETMAIN?\n         BZ    NIMS020                   Yes, skip ABEND and continue\n         ABEND 667,,,USER                no, Terminate the subtask\nNIMS020  DS    0H\n         ST    R1,PARMLIST+12          buffer addr to parm list #4\n         LA    R2,STCBERBL             load addr of buffer length\n         ST    R2,PARMLIST+16          buffer len to parm list #5\n         LA    R2,CPUUTL               load addr of cpu util save area\n         ST    R2,PARMLIST+20          save it to parm list #6\n         LA    R2,DPR                  load addr of demand page rate\n         ST    R2,PARMLIST+24          save it to parm list #7\n         L     R8,CVTSMCA              GET THE SMCA ADDRESS\n         USING SMCABASE,R8             SMCA ADDRESSABILITY\n         MVC   AGCBTMP(4),SMCAIDTE     LOAD IPL DATE\n         MVI   AGCBTMP,X'00'           ZERO OUT CENTURY BYTE\n         UNPK  AGCBTMP2(9),AGCBTMP(5)  MAKE IT VIEWABLE\n         MVC   IPLDATE+3(2),AGCBTMP2+2 MOVE TO AGCB VAR (YY)\n         MVI   IPLDATE+5,C'.'          MOVE IN PERIOD\n         MVC   IPLDATE+6(3),AGCBTMP2+4 MOVE TO AGCB VAR (DDD)\n         L     R1,SMCAITME             LOAD IPL TIME\n         DROP  R8\n         SR    R0,R0                   CLEAR EVEN REGISTER\n         D     R0,=F'360000'           GET HOURS\n         CVD   R1,AGCBDWD              CONVERT TO DECIMAL\n         UNPK  AGCBTMP2(9),AGCBDWD+4(5) MAKE IT VIEWABLE\n         MVC   IPLTIME+3(2),AGCBTMP2+5 SAVE HOURS\n         MVI   IPLTIME+5,C':'          CONSTANT\n         LR    R1,R0\n         SR    R0,R0                   CLEAR EVEN REGISTER\n         D     R0,=F'6000'             GET MINUTES\n         CVD   R1,AGCBDWD              CONVERT TO DECIMAL\n         UNPK  AGCBTMP2(9),AGCBDWD+4(5) MAKE IT VIEWABLE\n         MVC   IPLTIME+6(2),AGCBTMP2+5 SAVE MINUTES\n         MVI   IPLTIME+8,C':'          CONSTANT\n         LR    R1,R0\n         SR    R0,R0                   CLEAR EVEN REGISTER\n         D     R0,=F'100'              GET SECONDS\n         CVD   R1,AGCBDWD              CONVERT TO DECIMAL\n         UNPK  AGCBTMP2(9),AGCBDWD+4(5) MAKE IT VIEWABLE\n         MVC   IPLTIME+9(2),AGCBTMP2+5 SAVE SECONDS\n         L     R8,CVTECVT              GET EXTENDED CVT ADDRESS\n         USING ECVT,R8                 SMCA ADDRESSABILITY\n         MVC   CPUMDL+3(8),ECVTHDNM    SAVE HARDWARE MODEL\n         MVC   SYSID+3(8),ECVTLPNM     SAVE LPAR NAME\n         MVC   PRODNM+3(16),ECVTPNAM   SAVE PRODUCT NAME\n         MVC   PRODVER+3(2),ECVTPVER   SAVE PRODUCT VERSION\n         MVI   PRODVER+5,C'.'          MOVE IN PERIOD\n         MVC   PRODVER+6(2),ECVTPREL   SAVE PRODUCT RELEASE\n         MVI   PRODVER+8,C'.'          MOVE IN PERIOD\n         MVC   PRODVER+9(2),ECVTPMOD   SAVE PRODUCT MODIFICATION\n         MVI   SYSSTAT+3,X'01'         Indicate system is up\n         OI    INITFLAG,SYSBIT         Indicate subtask up and running\n         DROP  R6,R8\n***********************************************************************\n*        SET UP TIMER                                                 *\n***********************************************************************\nTIMESET  DS    0H\n         XC    STCBTECB,STCBTECB       Clear the timer ECB\n         TM    STCBFLG1,STCB1TIM       STIMERM set?\n         BO    WAIT                      yes, go finish wait\n         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM\n         LA    R4,STCBTMID             Point to STIMERD id word area\n         LA    R5,AGCBSINT             Get the timer interval address\n         LA    R6,STCBTECB             Get addr of ECB addr\n         ST    R6,STCBCOMA             Save it\n         OI    STCBFLG1,STCB1TIM       Indicate timer outstanding ...\n         STIMERM SET,                  Set/reset NPRO timer            C\n               DINTVL=(R5),                                            C\n               ID=(R4),                                                C\n               EXIT=TIMEXIT,                                           C\n               PARM=STCBCOMA,                                          C\n               MF=(E,STCBMPL)\n***********************************************************************\n*        WAIT FOR TIMER POP OR POST FROM AGENT                        *\n***********************************************************************\nWAIT     DS    0H\n         LA    R4,STCBTECB             Point to timer ECB\n         ST    R4,STCBTEP              Save it in list\n         LA    R4,AGCBECBS             Point to communication ECB\n         ST    R4,STCBCEP              Save it in list\n         OI    STCBCEP,X'80'           Indicate end of ECB list\n         WAIT  1,                      Wait for something to post      C\n               ECBLIST=STCBECBL,                                       C\n               LONG=YES\n         TM    AGCBECBS,X'40'          Did we get posted by the agent?\n         BO    EXIT                     Yes, assume shutdown for now\n         TM    STCBTECB,X'40'          Did the timer pop?\n         BZ    TIMESET                  No, don't know, go wait again\n***********************************************************************\n*        MIB UPDATE                                                   *\n***********************************************************************\nMIBUPDT  DS    0H\n*        MVC   STCBMPL(NIMLPLL),NIMLPL copy list form of LINK\n         LA    R1,PARMLIST             Parameter to reg 1\n         LINK  EP=ERBSMFI              Link to RMF interface\n         LTR   R15,R15                 return code good?\n         BNZ   ERBERR                    no, go let us know\n         L     R8,PARMLIST+12          get buffer address\n         USING SMF79HDR,R8\n         L     R4,SMF79ASS             load the data section offset\n         DROP  R8\n         AR    R8,R4                   point to data section\n         USING R793,R8\n         MVC   STCBWD(4),R793CUT       extract cpu utilization\n         L     R4,STCBWD               load it\n         MVC   STCBWD(4),R793OUTU      extract out/ready queue\n         A     R4,STCBWD               add out/ready queue\n         ST    R4,STCBWD               save it\n         MVC   CPUUTIL+3(4),STCBWD     update the MIB\n         DROP  R8\n         XI    STCBFLG1,STCB1TIM       clear timer set flag\n*        BAL   R8,SNAPRTN\n         B     TIMESET                 Go wait for next interval\n***********************************************************************\n*        TIMER EXIT                                                   *\n***********************************************************************\nTIMEXIT  DS    0H\n         STM   R14,R12,4(R13)\n         LR    R4,R1                   SAVE PARAMETER\n         L     R5,4(R1)                POINT TO TIMEECB\n         POST  (R5)\n         LM    R14,R12,4(R13)\n         BR    R14\n*****************************\n*****   EXIT ROUTINES   *****\n*****************************\nEXIT     DS    0H\n         TM    STCBFLG1,STCB1TIM   STIMERM set?\n         BNO   TIMRBYP               no, bypass stimer cancel\n         MVC   STCBMPL(NIMTPLL),NIMTPL Copy list form STIMERM\n         LA    R4,STCBTMID             Point to STIMERM id word area\n         STIMERM CANCEL,               Cancel timer                    C\n               ID=(R4),                                                C\n               MF=(E,STCBMPL)\nTIMRBYP  DS    0H\n         MVC   STCBMPL(WTO2L),WTO2 Copy the WPL for message 2\n         WTO   MF=(E,STCBMPL)      Issue message to operator\n         L     R2,PARMLIST+12      Get ptr to buffer start\n         L     R3,STCBERBL         Get buffer length\n         SR    R4,R4               Subpool zero\n         FREEMAIN RU,                                                  C\n               LV=(3),                                                 C\n               A=(2),                                                  C\n               SP=(4)\n         L     R9,4(,R13)          Get high save (last SACB reference)\n         FREEMAIN RU,              Free the STCB                       C\n               LV=STCBLEN,                                             C\n               A=(10),                                                 C\n               SP=230\n         LR    R13,R9              Get high save area address\n         RETURN (14,12),RC=0       Return to MVS, terminate sub task\n******************************\n*****   ERROR ROUTINES   *****\n******************************\nERBERR   DS    0H\n         CVD   R15,STCBDWD         convert to decimal\n         UNPK  STCBDWD2(8),STCBDWD+4(4) make it viewable\n         MVZ   STCBDWD2+7(1),STCBDWD2+6  all of itewable\n         MVC   STCBMPL(MSG200EL),MSG200E link to erbsmfi failed msg\n         LA    R2,STCBMPL          Point to message area failed msg\n         MVC   MSG200RC(3,R2),STCBDWD2+5 move in return code\n         WTO   MF=(E,STCBMPL)      Issue message to operator\n         B     EXIT\n*SNAPRTN  DS    0H\n*         STM   R2,R5,REGSAVE\n*         LA    R2,STCBID\n*         LA    R3,STCBFLG1\n*         L     R2,STCBAGCB\n*         LA    R3,AGCBLEN(R2)\n*         L     R4,PARMLIST+12     erbsmfi buff addr\n*         LR    R5,R4              buff addr +\n*         A     R5,STCBERBL                    buff len = buff end\n*         LR    R6,R5\n*         MVC   STCBMPL(NIMLPLL),NIMLPL  COPY LIST FORM LINK\n*         LINK  EP=PCCSSNAP,PARAM=((R2),(R3),(R4),(R5)),VL=1,\n*               MF=(E,STCBMPL)\n*         LM    R2,R3,REGSAVE\n*         BR    R8\n         EJECT\n**************************************************\n***   S T O R A G E    D E F I N I T I O N S   ***\n**************************************************\n         EJECT\nREQTYPE  DC    F'1'                Request type\nRECTYPE  DC    F'79'               Record type 79\nSUBTYPE  DC    F'3'                Subtype 3\nHDRLEN   DC    A(HLEN+PLEN+CLEN)   Header length\nNIMLPL   LINK  EP=PCCSSNAP,SF=L\nNIMLPLL  EQU   *-NIMLPL\nNIMEPL   ESTAE *-*,TERM=YES,       List form ESTAE PARMLIST            C\n               RECORD=YES,PARAM=*-*,MF=L\nNIMEPLL  EQU   *-NIMEPL\nNIMTPL   STIMERM SET,MF=L\nNIMTPLL  EQU   *-NIMTPL\nMSG200E  WTO   'NMSY200E LINK TO ERBSMFI FAILED - RC=xxx',             C\n               ROUTCDE=(1,10),MF=L\nMSG200EL EQU   *-MSG200E\nMSG200RC EQU   WPLTXT-WPL+37,3\nWTO1     WTO   'NMSY100I SYS PROBE INITIALIZATION COMPLETE',ROUTCDE=(1,C\n               10),MF=L\nWTO1L    EQU   *-WTO1\nWTO2     WTO   'NMSY199I SYS PROBE TERMINATION COMPLETE',ROUTCDE=(1,10)C\n               ,MF=L\nWTO2L    EQU   *-WTO2\n         LTORG\n         EJECT\n*************************\n*** DYNAMIC WORK AREA ***\n*************************\n         TITLE   'SUB TASK APPLICATION CONTROL BLOCK'\n         NIMSTCB ,                 GENERATE STCB DSECT\n         TITLE   'AGENT CONTROL BLOCK (AGCB)'\n         NIMAGCB ,                 GENERATE AGCB DSECT\n         PRINT  NOGEN\n* SMF record 79 mapping\n         ERBSMFR 79                Generate MVS WPL dsect\n* Record lengths\nSMF79HDR DSECT\nHLEN     EQU    *-SMF79HDR\nSMF79PRO DSECT\nPLEN     EQU    *-SMF79PRO\nR79CHL   DSECT\nCLEN     EQU    *-R79CHL\nNIMSYS   CSECT\n* System control block mappings\n         CVT     DSECT=YES,LIST=NO     Generate MVS CVT dsect\n         IHAASVT DSECT=YES,LIST=NO\n         IEESMCA ,\n         IHAECVT ,\n         IEZWPL ,                  Generate MVS WPL dsect\nR0       EQU   0                   Register\nR1       EQU   1                     equates\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   NIMSYS\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NMIBDESC": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00(\\x01\\x07)/\\x01\\t\\x03\\x0f\\t&\\x07\\x05\\x06\\xfa\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2007-10-19T00:00:00", "modifydate": "2009-01-30T09:26:28", "lines": 1797, "newlines": 1786, "modlines": 0, "user": "SCHMUM"}, "text": "*--------------------------------------------------------------------*\n* IBM z/OS Communications Server Version 1 Release 7                 *\n*                                                                    *\n* Name: MIBDESC                                                      *\n*                                                                    *\n* Function:                                                          *\n*     Defines MIB variables for NimBUS SNMP                          *\n*                                                                    *\n*                                                                    *\n*--------------------------------------------------------------------*\n* MIB Variable name        | ASN.1 notation        | Type     | TTL  *\n*--------------------------------------------------------------------*\nMIBII                              1.3.6.1.2.1.                     table    0\nsystem                             1.3.6.1.2.1.1.                   table    0\nsysDescr                           1.3.6.1.2.1.1.1.                 display  30\nsysObjectID                        1.3.6.1.2.1.1.2.                 object   30\nsysUpTime                          1.3.6.1.2.1.1.3.                 ticks    1\nsysContact                         1.3.6.1.2.1.1.4.                 display  30\nsysName                            1.3.6.1.2.1.1.5.                 display  30\nsysLocation                        1.3.6.1.2.1.1.6.                 display  30\nsysServices                        1.3.6.1.2.1.1.7.                 number   30\nsysORLastChange                    1.3.6.1.2.1.1.8.                 ticks    10\nsysORTable                         1.3.6.1.2.1.1.9.                 table    0\nsysOREntry                         1.3.6.1.2.1.1.9.1.               table    0\nsysORIndex                         1.3.6.1.2.1.1.9.1.1.             number   10\nsysORID                            1.3.6.1.2.1.1.9.1.2.             object   10\nsysORDescr                         1.3.6.1.2.1.1.9.1.3.             display  30\nsysORUpTime                        1.3.6.1.2.1.1.9.1.4.             ticks    10\ninterfaces                         1.3.6.1.2.1.2.                   table    0\nifNumber                           1.3.6.1.2.1.2.1.                 number   30\nifTable                            1.3.6.1.2.1.2.2.                 table    0\nifEntry                            1.3.6.1.2.1.2.2.1.               table    0\nifIndex                            1.3.6.1.2.1.2.2.1.1.             number   30\nifDescr                            1.3.6.1.2.1.2.2.1.2.             display  30\nifType                             1.3.6.1.2.1.2.2.1.3.             number   30\nifMtu                              1.3.6.1.2.1.2.2.1.4.             number   30\nifSpeed                            1.3.6.1.2.1.2.2.1.5.             gauge    30\nifPhysAddress                      1.3.6.1.2.1.2.2.1.6.             string   30\nifAdminStatus                      1.3.6.1.2.1.2.2.1.7.             number   10\nifOperStatus                       1.3.6.1.2.1.2.2.1.8.             number   3\nifLastChange                       1.3.6.1.2.1.2.2.1.9.             ticks    1\nifInOctets                         1.3.6.1.2.1.2.2.1.10.            counter  1\nifInUcastPkts                      1.3.6.1.2.1.2.2.1.11.            counter  1\nifInNUcastPkts                     1.3.6.1.2.1.2.2.1.12.            counter  1\nifInDiscards                       1.3.6.1.2.1.2.2.1.13.            counter  1\nifInErrors                         1.3.6.1.2.1.2.2.1.14.            counter  1\nifInUnknownProtos                  1.3.6.1.2.1.2.2.1.15.            counter  1\nifOutOctets                        1.3.6.1.2.1.2.2.1.16.            counter  1\nifOutUcastPkts                     1.3.6.1.2.1.2.2.1.17.            counter  1\nifOutNUcastPkts                    1.3.6.1.2.1.2.2.1.18.            counter  1\nifOutDiscards                      1.3.6.1.2.1.2.2.1.19.            counter  1\nifOutErrors                        1.3.6.1.2.1.2.2.1.20.            counter  1\nifOutQLen                          1.3.6.1.2.1.2.2.1.21.            gauge    1\nifSpecific                         1.3.6.1.2.1.2.2.1.22.            object   30\nat                                 1.3.6.1.2.1.3.                   table    0\nat_table                           1.3.6.1.2.1.3.1.1.               table    0\natIfIndex                          1.3.6.1.2.1.3.1.1.1.             number   30\natPhysAddress                      1.3.6.1.2.1.3.1.1.2.             string   30\natNetAddress                       1.3.6.1.2.1.3.1.1.3.             internet 30\nip                                 1.3.6.1.2.1.4.                   table    0\nip_group                           1.3.6.1.2.1.4.                   table    0\nipForwarding                       1.3.6.1.2.1.4.1.                 number   30\nipDefaultTTL                       1.3.6.1.2.1.4.2.                 number   30\nipInReceives                       1.3.6.1.2.1.4.3.                 counter  1\nipInHdrErrors                      1.3.6.1.2.1.4.4.                 counter  1\nipInAddrErrors                     1.3.6.1.2.1.4.5.                 counter  1\nipForwDatagrams                    1.3.6.1.2.1.4.6.                 counter  1\nipInUnknownProtos                  1.3.6.1.2.1.4.7.                 counter  1\nipInDiscards                       1.3.6.1.2.1.4.8.                 counter  1\nipInDelivers                       1.3.6.1.2.1.4.9.                 counter  1\nipOutRequests                      1.3.6.1.2.1.4.10.                counter  1\nipOutDiscards                      1.3.6.1.2.1.4.11.                counter  1\nipOutNoRoutes                      1.3.6.1.2.1.4.12.                counter  1\nipReasmTimeout                     1.3.6.1.2.1.4.13.                number   1\nipReasmReqds                       1.3.6.1.2.1.4.14.                counter  30\nipReasmOKs                         1.3.6.1.2.1.4.15.                counter  1\nipReasmFails                       1.3.6.1.2.1.4.16.                counter  1\nipFragOKs                          1.3.6.1.2.1.4.17.                counter  1\nipFragFails                        1.3.6.1.2.1.4.18.                counter  1\nipFragCreates                      1.3.6.1.2.1.4.19.                counter  1\nipAddrTable                        1.3.6.1.2.1.4.20.                table    0\nipAddrEntry                        1.3.6.1.2.1.4.20.1.              table    0\nipAdEntAddr                        1.3.6.1.2.1.4.20.1.1.            internet 30\nipAdEntIfIndex                     1.3.6.1.2.1.4.20.1.2.            number   30\nipAdEntNetMask                     1.3.6.1.2.1.4.20.1.3.            internet 30\nipAdEntBcastAddr                   1.3.6.1.2.1.4.20.1.4.            number   30\nipAdEntReasmMaxSiz                 1.3.6.1.2.1.4.20.1.5.            number   30\nipRouteDest                        1.3.6.1.2.1.4.21.1.1.            internet 10\nipRouteIfIndex                     1.3.6.1.2.1.4.21.1.2.            number   10\nipRouteMetric1                     1.3.6.1.2.1.4.21.1.3.            number   10\nipRouteMetric2                     1.3.6.1.2.1.4.21.1.4.            number   10\nipRouteMetric3                     1.3.6.1.2.1.4.21.1.5.            number   10\nipRouteMetric4                     1.3.6.1.2.1.4.21.1.6.            number   10\nipRouteNextHop                     1.3.6.1.2.1.4.21.1.7.            internet 10\nipRouteType                        1.3.6.1.2.1.4.21.1.8.            number   10\nipRouteProto                       1.3.6.1.2.1.4.21.1.9.            number   10\nipRouteAge                         1.3.6.1.2.1.4.21.1.10.           ticks    1\nipRouteMask                        1.3.6.1.2.1.4.21.1.11.           internet 1\nipNetToMediaTable                  1.3.6.1.2.1.4.22.                table    0\nipNetToMediaEntry                  1.3.6.1.2.1.4.22.1.              table    0\nipNetToMediaIfIndex                1.3.6.1.2.1.4.22.1.1.            number   10\nipNetToMediaPhysAddress            1.3.6.1.2.1.4.22.1.2.            string   10\nipNetToMediaNetAddress             1.3.6.1.2.1.4.22.1.3.            internet 10\nipNetToMediaType                   1.3.6.1.2.1.4.22.1.4.            number   10\nipRoutingDiscards                  1.3.6.1.2.1.4.23.                counter  10\nipForward                          1.3.6.1.2.1.4.24.                table    0\nipForwardNumber                    1.3.6.1.2.1.4.24.1.              gauge    10\nipForwardTable                     1.3.6.1.2.1.4.24.2.              table    0\nipForwardEntry                     1.3.6.1.2.1.4.24.2.1.            table    0\nipForwardDest                      1.3.6.1.2.1.4.24.2.1.1.          internet 10\nipForwardMask                      1.3.6.1.2.1.4.24.2.1.2.          internet 10\nipForwardPolicy                    1.3.6.1.2.1.4.24.2.1.3.          number   10\nipForwardNextHop                   1.3.6.1.2.1.4.24.2.1.4.          internet 10\nipForwardIfIndex                   1.3.6.1.2.1.4.24.2.1.5.          number   10\nipForwardType                      1.3.6.1.2.1.4.24.2.1.6.          number   10\nipForwardProto                     1.3.6.1.2.1.4.24.2.1.7.          number   10\nipForwardAge                       1.3.6.1.2.1.4.24.2.1.8.          ticks    10\nipForwardInfo                      1.3.6.1.2.1.4.24.2.1.9.          object   10\nipForwardNextHopAS                 1.3.6.1.2.1.4.24.2.1.10.         number   10\nipForwardMetric1                   1.3.6.1.2.1.4.24.2.1.11.         number   10\nipForwardMetric2                   1.3.6.1.2.1.4.24.2.1.12.         number   10\nipForwardMetric3                   1.3.6.1.2.1.4.24.2.1.13.         number   10\nipForwardMetric4                   1.3.6.1.2.1.4.24.2.1.14.         number   10\nipForwardMetric5                   1.3.6.1.2.1.4.24.2.1.15.         number   10\ninetCidrRouteNumber                1.3.6.1.2.1.4.24.6.              number   30\ninetCidrRouteTable                 1.3.6.1.2.1.4.24.7.              table    0\ninetCidrRouteEntry                 1.3.6.1.2.1.4.24.7.1.            table    0\ninetCidrRouteDestType              1.3.6.1.2.1.4.24.7.1.1.          number   30\ninetCidrRouteDest                  1.3.6.1.2.1.4.24.7.1.2.          string   30\ninetCidrRoutePfxLen                1.3.6.1.2.1.4.24.7.1.3.          number   30\ninetCidrRoutePolicy                1.3.6.1.2.1.4.24.7.1.4.          object   30\ninetCidrRouteNextHopType           1.3.6.1.2.1.4.24.7.1.5.          number   30\ninetCidrRouteNextHop               1.3.6.1.2.1.4.24.7.1.6.          string   30\ninetCidrRouteIfIndex               1.3.6.1.2.1.4.24.7.1.7.          number   30\ninetCidrRouteType                  1.3.6.1.2.1.4.24.7.1.8.          number   30\ninetCidrRouteProto                 1.3.6.1.2.1.4.24.7.1.9.          number   30\ninetCidrRouteAge                   1.3.6.1.2.1.4.24.7.1.10.         ticks    30\ninetCidrRouteNextHopAS             1.3.6.1.2.1.4.24.7.1.11.         number   30\ninetCidrRouteMetric1               1.3.6.1.2.1.4.24.7.1.12.         number   30\ninetCidrRouteMetric2               1.3.6.1.2.1.4.24.7.1.13.         number   30\ninetCidrRouteMetric3               1.3.6.1.2.1.4.24.7.1.14.         number   30\ninetCidrRouteMetric4               1.3.6.1.2.1.4.24.7.1.15.         number   30\ninetCidrRouteMetric5               1.3.6.1.2.1.4.24.7.1.16.         number   30\ninetCidrRouteStatus                1.3.6.1.2.1.4.24.7.1.17.         number   30\ninetCidrRouteDiscards              1.3.6.1.2.1.4.24.8.              number   30\nip6Forwarding                      1.3.6.1.2.1.4.25.                number   30\nip6DefaultHopLimit                 1.3.6.1.2.1.4.26.                number   30\nipv6IfTableLastChange              1.3.6.1.2.1.4.29.                ticks    30\nipv6InterfaceTable                 1.3.6.1.2.1.4.30.                table    0\nipv6InterfaceEntry                 1.3.6.1.2.1.4.30.1.              table    0\nipv6InterfaceIfIndex               1.3.6.1.2.1.4.30.1.1.            number   30\nipv6InterfaceReasmMaxSize          1.3.6.1.2.1.4.30.1.2.            number   30\nipv6InterfaceIdentifier            1.3.6.1.2.1.4.30.1.3.            string   30\nipv6InterfacePhysicalAddress       1.3.6.1.2.1.4.30.1.4.            string   30\nipv6InterfaceAdminStatus           1.3.6.1.2.1.4.30.1.5.            number   30\nipv6InterfaceReachableTime         1.3.6.1.2.1.4.30.1.6.            gauge    30\nipv6InterfaceRetransmitTime        1.3.6.1.2.1.4.30.1.7.            gauge    30\nipTrafficStats                     1.3.6.1.2.1.4.31.                table    0\nipSystemStatsTable                 1.3.6.1.2.1.4.31.1.              table    0\nipSystemStatsEntry                 1.3.6.1.2.1.4.31.1.1.            table    0\nipSystemStatsAFType                1.3.6.1.2.1.4.31.1.1.1.          number   30\nipSystemStatsIfIndex               1.3.6.1.2.1.4.31.1.1.2.          number   30\nipSystemStatsInReceives            1.3.6.1.2.1.4.31.1.1.3.          counter  30\nipSystemStatsInOctets              1.3.6.1.2.1.4.31.1.1.5.          counter  30\nipSystemStatsInHdrErrors           1.3.6.1.2.1.4.31.1.1.7.          counter  30\nipSystemStatsInNoRoutes            1.3.6.1.2.1.4.31.1.1.8.          counter  30\nipSystemStatsInAddrErrors          1.3.6.1.2.1.4.31.1.1.9.          counter  30\nipSystemStatsInUnknownProtos       1.3.6.1.2.1.4.31.1.1.10.         counter  30\nipSystemStatsInTruncatedPkts       1.3.6.1.2.1.4.31.1.1.11.         counter  30\nipSystemStatsInForwDatagrams       1.3.6.1.2.1.4.31.1.1.12.         counter  30\nipSystemStatsReasmReqds            1.3.6.1.2.1.4.31.1.1.13.         counter  30\nipSystemStatsReasmOKs              1.3.6.1.2.1.4.31.1.1.14.         counter  30\nipSystemStatsReasmFails            1.3.6.1.2.1.4.31.1.1.15.         counter  30\nipSystemStatsInDiscards            1.3.6.1.2.1.4.31.1.1.16.         counter  30\nipSystemStatsInDelivers            1.3.6.1.2.1.4.31.1.1.17.         counter  30\nipSystemStatsOutRequests           1.3.6.1.2.1.4.31.1.1.18.         counter  30\nipSystemStatsOutNoRoutes           1.3.6.1.2.1.4.31.1.1.19.         counter  30\nipSystemStatsOutForwDatagrams      1.3.6.1.2.1.4.31.1.1.20.         counter  30\nipSystemStatsOutDiscards           1.3.6.1.2.1.4.31.1.1.21.         counter  30\nipSystemStatsOutFragReqds          1.3.6.1.2.1.4.31.1.1.22.         counter  30\nipSystemStatsOutFragOKs            1.3.6.1.2.1.4.31.1.1.23.         counter  30\nipSystemStatsOutFragFails          1.3.6.1.2.1.4.31.1.1.24.         counter  30\nipSystemStatsOutFragCreates        1.3.6.1.2.1.4.31.1.1.25.         counter  30\nipSystemStatsOutTransmits          1.3.6.1.2.1.4.31.1.1.26.         counter  30\nipSystemStatsOutOctets             1.3.6.1.2.1.4.31.1.1.28.         counter  30\nipSystemStatsInMcastPkts           1.3.6.1.2.1.4.31.1.1.30.         counter  30\nipSystemStatsInMcastOctets         1.3.6.1.2.1.4.31.1.1.32.         counter  30\nipSystemStatsOutMcastPkts          1.3.6.1.2.1.4.31.1.1.34.         counter  30\nipSystemStatsOutMcastOctets        1.3.6.1.2.1.4.31.1.1.36.         counter  30\nipSystemStatsInBcastPkts           1.3.6.1.2.1.4.31.1.1.38.         counter  30\nipSystemStatsOutBcastPkts          1.3.6.1.2.1.4.31.1.1.40.         counter  30\nipSystemStatsDiscontinuityTime     1.3.6.1.2.1.4.31.1.1.42.         ticks    30\nipSystemStatsRefreshRate           1.3.6.1.2.1.4.31.1.1.43.         gauge    30\nipAddressPrefixTable                1.3.6.1.2.1.4.32.               table    0\nipAddressPrefixEntry                1.3.6.1.2.1.4.32.1.             table    0\nipAddressPrefixIfIndex              1.3.6.1.2.1.4.32.1.1.           number   30\nipAddressPrefixType                 1.3.6.1.2.1.4.32.1.2.           number   30\nipAddressPrefixPrefix               1.3.6.1.2.1.4.32.1.3.           string   30\nipAddressPrefixLength               1.3.6.1.2.1.4.32.1.4.           number   30\nipAddressPrefixOnLinkFlag           1.3.6.1.2.1.4.32.1.6.           number   30\nipAddressPrefixAutonomousFlag       1.3.6.1.2.1.4.32.1.7.           number   30\nipAddressPrefixAdvPreferredLifetime 1.3.6.1.2.1.4.32.1.8.           ticks    30\nipAddressPrefixAdvValidLifetime     1.3.6.1.2.1.4.32.1.9.           ticks    30\nipAddressTable                     1.3.6.1.2.1.4.33.                table    0\nipAddressEntry                     1.3.6.1.2.1.4.33.1.              table    0\nipAddressAddrType                  1.3.6.1.2.1.4.33.1.1.            number   30\nipAddressAddr                      1.3.6.1.2.1.4.33.1.2.            string   30\nipAddressIfIndex                   1.3.6.1.2.1.4.33.1.3.            number   30\nipAddressType                      1.3.6.1.2.1.4.33.1.4.            number   30\nipAddressPrefix                    1.3.6.1.2.1.4.33.1.5.            object   30\nipAddressOrigin                    1.3.6.1.2.1.4.33.1.6.            number   30\nipAddressStatus                    1.3.6.1.2.1.4.33.1.7.            number   30\nipAddressCreated                   1.3.6.1.2.1.4.33.1.8.            ticks    30\nipAddressLastChanged               1.3.6.1.2.1.4.33.1.9.            ticks    30\ninetNetToMediaTable                1.3.6.1.2.1.4.34.                table    0\ninetNetToMediaEntry                1.3.6.1.2.1.4.34.1.              table    0\ninetNetToMediaIfIndex              1.3.6.1.2.1.4.34.1.1.            number   30\ninetNetToMediaNetAddressType       1.3.6.1.2.1.4.34.1.2.            number   30\ninetNetToMediaNetAddress           1.3.6.1.2.1.4.34.1.3.            string   30\ninetNetToMediaPhysAddress          1.3.6.1.2.1.4.34.1.4.            string   30\ninetNetToMediaLastUpdated          1.3.6.1.2.1.4.34.1.5.            ticks    30\ninetNetToMediaType                 1.3.6.1.2.1.4.34.1.6.            number   30\ninetNetToMediaState                1.3.6.1.2.1.4.34.1.7.            number   30\nipDefaultRouterTable               1.3.6.1.2.1.4.36.                table    0\nipDefaultRouterEntry               1.3.6.1.2.1.4.36.1.              table    0\nipDefaultRouterAFType              1.3.6.1.2.1.4.36.1.1.            number   30\nipDefaultRouterAddress             1.3.6.1.2.1.4.36.1.2.            string   30\nipDefaultRouterIfIndex             1.3.6.1.2.1.4.36.1.3.            number   30\nipDefaultRouterLifetime            1.3.6.1.2.1.4.36.1.4.            ticks    30\nipDefaultRouterPreference          1.3.6.1.2.1.4.36.1.5.            number   30\nicmp                               1.3.6.1.2.1.5.                   table    0\nicmp_group                         1.3.6.1.2.1.5.                   table    0\nicmpInMsgs                         1.3.6.1.2.1.5.1.                 counter  1\nicmpInErrors                       1.3.6.1.2.1.5.2.                 counter  1\nicmpInDestUnreachs                 1.3.6.1.2.1.5.3.                 counter  1\nicmpInTimeExcds                    1.3.6.1.2.1.5.4.                 counter  1\nicmpInParmProbs                    1.3.6.1.2.1.5.5.                 counter  1\nicmpInSrcQuenchs                   1.3.6.1.2.1.5.6.                 counter  1\nicmpInRedirects                    1.3.6.1.2.1.5.7.                 counter  1\nicmpInEchos                        1.3.6.1.2.1.5.8.                 counter  1\nicmpInEchoReps                     1.3.6.1.2.1.5.9.                 counter  1\nicmpInTimestamps                   1.3.6.1.2.1.5.10.                counter  1\nicmpInTimestampReps                1.3.6.1.2.1.5.11.                counter  1\nicmpInAddrMasks                    1.3.6.1.2.1.5.12.                counter  1\nicmpInAddrMaskReps                 1.3.6.1.2.1.5.13.                counter  1\nicmpOutMsgs                        1.3.6.1.2.1.5.14.                counter  1\nicmpOutErrors                      1.3.6.1.2.1.5.15.                counter  1\nicmpOutDestUnreachs                1.3.6.1.2.1.5.16.                counter  1\nicmpOutTimeExcds                   1.3.6.1.2.1.5.17.                counter  1\nicmpOutParmProbs                   1.3.6.1.2.1.5.18.                counter  1\nicmpOutSrcQuenchs                  1.3.6.1.2.1.5.19.                counter  1\nicmpOutRedirects                   1.3.6.1.2.1.5.20.                counter  1\nicmpOutEchos                       1.3.6.1.2.1.5.21.                counter  1\nicmpOutEchoReps                    1.3.6.1.2.1.5.22.                counter  1\nicmpOutTimestamps                  1.3.6.1.2.1.5.23.                counter  1\nicmpOutTimestampReps               1.3.6.1.2.1.5.24.                counter  1\nicmpOutAddrMasks                   1.3.6.1.2.1.5.25.                counter  1\nicmpOutAddrMaskReps                1.3.6.1.2.1.5.26.                counter  1\ninetIcmpTable                      1.3.6.1.2.1.5.27.                table    0\ninetIcmpEntry                      1.3.6.1.2.1.5.27.1.              table    0\ninetIcmpAFType                     1.3.6.1.2.1.5.27.1.1.            number   30\ninetIcmpInMsgs                     1.3.6.1.2.1.5.27.1.2.            counter  30\ninetIcmpInErrors                   1.3.6.1.2.1.5.27.1.3.            counter  30\ninetIcmpOutMsgs                    1.3.6.1.2.1.5.27.1.4.            counter  30\ninetIcmpOutErrors                  1.3.6.1.2.1.5.27.1.5.            counter  30\ninetIcmpMsgTable                   1.3.6.1.2.1.5.28.                table    30\ninetIcmpMsgEntry                   1.3.6.1.2.1.5.28.1.              table    30\ninetIcmpMsgAFType                  1.3.6.1.2.1.5.28.1.1.            number   30\ninetIcmpMsgType                    1.3.6.1.2.1.5.28.1.2.            number   30\ninetIcmpMsgInPkts                  1.3.6.1.2.1.5.28.1.3.            counter  30\ninetIcmpMsgOutPkts                 1.3.6.1.2.1.5.28.1.4.            counter  30\ntcp                                1.3.6.1.2.1.6.                   table    0\ntcp_group                          1.3.6.1.2.1.6.                   table    0\ntcpRtoAlgorithm                    1.3.6.1.2.1.6.1.                 number   30\ntcpRtoMin                          1.3.6.1.2.1.6.2.                 number   30\ntcpRtoMax                          1.3.6.1.2.1.6.3.                 number   30\ntcpMaxConn                         1.3.6.1.2.1.6.4.                 number   30\ntcpActiveOpens                     1.3.6.1.2.1.6.5.                 counter  30\ntcpPassiveOpens                    1.3.6.1.2.1.6.6.                 counter  1\ntcpAttemptFails                    1.3.6.1.2.1.6.7.                 counter  1\ntcpEstabResets                     1.3.6.1.2.1.6.8.                 counter  1\ntcpCurrEstab                       1.3.6.1.2.1.6.9.                 gauge    1\ntcpInSegs                          1.3.6.1.2.1.6.10.                counter  1\ntcpOutSegs                         1.3.6.1.2.1.6.11.                counter  1\ntcpRetransSegs                     1.3.6.1.2.1.6.12.                counter  1\ntcpConnTable                       1.3.6.1.2.1.6.13.                table    0\ntcpConnEntry                       1.3.6.1.2.1.6.13.1.              table    0\ntcpConnState                       1.3.6.1.2.1.6.13.1.1.            number   1\ntcpConnLocalAddress                1.3.6.1.2.1.6.13.1.2.            internet 1\ntcpConnLocalPort                   1.3.6.1.2.1.6.13.1.3.            number   1\ntcpConnRemAddress                  1.3.6.1.2.1.6.13.1.4.            internet 1\ntcpConnRemPort                     1.3.6.1.2.1.6.13.1.5.            number   1\ntcpInErrs                          1.3.6.1.2.1.6.14.                counter  1\ntcpOutRsts                         1.3.6.1.2.1.6.15.                counter  1\ntcpConnectionTable                 1.3.6.1.2.1.6.19.                table    0\ntcpConnectionEntry                 1.3.6.1.2.1.6.19.1.              table    0\ntcpConnectionLocalAddressType      1.3.6.1.2.1.6.19.1.1.            number   30\ntcpConnectionLocalAddress          1.3.6.1.2.1.6.19.1.2.            string   30\ntcpConnectionLocalPort             1.3.6.1.2.1.6.19.1.3.            number   30\ntcpConnectionRemAddressType        1.3.6.1.2.1.6.19.1.4.            number   30\ntcpConnectionRemAddress            1.3.6.1.2.1.6.19.1.5.            string   30\ntcpConnectionRemPort               1.3.6.1.2.1.6.19.1.6.            number   30\ntcpConnectionState                 1.3.6.1.2.1.6.19.1.7.            number   30\ntcpConnectionProcess               1.3.6.1.2.1.6.19.1.8.            number   30\ntcpListenerTable                   1.3.6.1.2.1.6.20.                table    0\ntcpListenerEntry                   1.3.6.1.2.1.6.20.1.              table    0\ntcpListenerLocalAddressType        1.3.6.1.2.1.6.20.1.1.            number   30\ntcpListenerLocalAddress            1.3.6.1.2.1.6.20.1.2.            string   30\ntcpListenerLocalPort               1.3.6.1.2.1.6.20.1.3.            number   30\ntcpListenerProcess                 1.3.6.1.2.1.6.20.1.4.            number   30\nudp                                1.3.6.1.2.1.7.                   table    0\nudp_group                          1.3.6.1.2.1.7.                   table    0\nudpInDatagrams                     1.3.6.1.2.1.7.1.                 counter  1\nudpNoPorts                         1.3.6.1.2.1.7.2.                 counter  1\nudpInErrors                        1.3.6.1.2.1.7.3.                 counter  1\nudpOutDatagrams                    1.3.6.1.2.1.7.4.                 counter  1\nudpTable                           1.3.6.1.2.1.7.5.                 table    0\nudpEntry                           1.3.6.1.2.1.7.5.1.               table    0\nudpLocalAddress                    1.3.6.1.2.1.7.5.1.1.             internet 1\nudpLocalPort                       1.3.6.1.2.1.7.5.1.2.             number   1\nudpEndpointTable                   1.3.6.1.2.1.7.7.                 table    0\nudpEndpointEntry                   1.3.6.1.2.1.7.7.1.               table    0\nudpEndpointLocalAddressType        1.3.6.1.2.1.7.7.1.1.             number   30\nudpEndpointLocalAddress            1.3.6.1.2.1.7.7.1.2.             string   30\nudpEndpointLocalPort               1.3.6.1.2.1.7.7.1.3.             number   30\nudpEndpointRemoteAddressType       1.3.6.1.2.1.7.7.1.4.             number   30\nudpEndpointRemoteAddress           1.3.6.1.2.1.7.7.1.5.             string   30\nudpEndpointRemotePort              1.3.6.1.2.1.7.7.1.6.             number   30\nudpEndpointInstance                1.3.6.1.2.1.7.7.1.7.             gauge    30\nudpEndpointProcess                 1.3.6.1.2.1.7.7.1.8.             gauge    30\negp                                1.3.6.1.2.1.8.                   table    0\negp_group                          1.3.6.1.2.1.8.                   table    0\negpInMsgs                          1.3.6.1.2.1.8.1.                 counter  10\negpInErrors                        1.3.6.1.2.1.8.2.                 counter  10\negpOutMsgs                         1.3.6.1.2.1.8.3.                 counter  10\negpOutErrors                       1.3.6.1.2.1.8.4.                 counter  10\negpNeighState                      1.3.6.1.2.1.8.5.1.1.             number   10\negpNeighAddr                       1.3.6.1.2.1.8.5.1.2.             internet 10\negpNeighAs                         1.3.6.1.2.1.8.5.1.3.             number   10\negpNeighInMsgs                     1.3.6.1.2.1.8.5.1.4.             counter  10\negpNeighInErrs                     1.3.6.1.2.1.8.5.1.5.             counter  10\negpNeighOutMsgs                    1.3.6.1.2.1.8.5.1.6.             counter  10\negpNeighOutErrs                    1.3.6.1.2.1.8.5.1.7.             counter  10\negpNeighInErrMsgs                  1.3.6.1.2.1.8.5.1.8.             counter  10\negpNeighOutErrMsgs                 1.3.6.1.2.1.8.5.1.9.             counter  10\negpNeighStateUps                   1.3.6.1.2.1.8.5.1.10.            counter  10\negpNeighStateDowns                 1.3.6.1.2.1.8.5.1.11.            counter  10\negpNeighIntervalHello              1.3.6.1.2.1.8.5.1.12.            number   10\negpNeighIntervalPoll               1.3.6.1.2.1.8.5.1.13.            number   10\negpNeighMode                       1.3.6.1.2.1.8.5.1.14.            number   10\negpNeighEventTrigger               1.3.6.1.2.1.8.5.1.15.            number   10\negpAs                              1.3.6.1.2.1.8.6.                 number   30\ndot3                               1.3.6.1.2.1.10.7.                table    0\ndot3StatsTable                     1.3.6.1.2.1.10.7.2.              table    0\ndot3StatsEntry                     1.3.6.1.2.1.10.7.2.1.            table    0\ndot3StatsIndex                     1.3.6.1.2.1.10.7.2.1.1.          number   30\ndot3StatsAlignmentErrors           1.3.6.1.2.1.10.7.2.1.2.          counter  30\ndot3StatsFCSErrors                 1.3.6.1.2.1.10.7.2.1.3.          counter  30\ndot3StatsSingleCollisionFrames     1.3.6.1.2.1.10.7.2.1.4.          counter  30\ndot3StatsMultipleCollisionFrames   1.3.6.1.2.1.10.7.2.1.5.          counter  30\ndot3StatsDeferredTransmissions     1.3.6.1.2.1.10.7.2.1.7.          counter  30\ndot3StatsLateCollisions            1.3.6.1.2.1.10.7.2.1.8.          counter  30\ndot3StatsExcessiveCollisions       1.3.6.1.2.1.10.7.2.1.9.          counter  30\ndot3StatsCarrierSenseErrors        1.3.6.1.2.1.10.7.2.1.11.         counter  30\ndot3StatsFrameTooLongs             1.3.6.1.2.1.10.7.2.1.13.         counter  30\ndot3StatsInternalMacReceiveErrors  1.3.6.1.2.1.10.7.2.1.16.         counter  30\ndot3StatsDuplexStatus              1.3.6.1.2.1.10.7.2.1.19.         number   30\nipoaMIB                            1.3.6.1.2.1.10.46.               table    0\nipoaObjects                        1.3.6.1.2.1.10.46.1.             table    0\nipoaLisTable                       1.3.6.1.2.1.10.46.1.2.           table    0\nipoaLisEntry                       1.3.6.1.2.1.10.46.1.2.1          table    0\nipoaLisSubnetAddr                  1.3.6.1.2.1.10.46.1.2.1.1.       internet 10\nipoaLisDefaultMtu                  1.3.6.1.2.1.10.46.1.2.1.2.       number   10\nipoaLisDefaultEncapsType           1.3.6.1.2.1.10.46.1.2.1.3.       number   10\nipoaLisInactivityTimer             1.3.6.1.2.1.10.46.1.2.1.4.       number   10\nipoaLisMinHoldingTime              1.3.6.1.2.1.10.46.1.2.1.5.       number   10\nipoaLisQDepth                      1.3.6.1.2.1.10.46.1.2.1.6.       number   10\nipoaLisMaxCalls                    1.3.6.1.2.1.10.46.1.2.1.7.       number   10\nipoaLisCacheEntryAge               1.3.6.1.2.1.10.46.1.2.1.8.       number   10\nipoaLisRetries                     1.3.6.1.2.1.10.46.1.2.1.9.       number   10\nipoaLisTimeout                     1.3.6.1.2.1.10.46.1.2.1.10.      number   10\nipoaLisDefaultPeakCellRate         1.3.6.1.2.1.10.46.1.2.1.11.      number   10\nipoaLisActiveVcs                   1.3.6.1.2.1.10.46.1.2.1.12.      counter  10\nipoaLisIfMappingRowStatus          1.3.6.1.2.1.10.46.1.3.1.2.       number   10\nipoaArpClientTable                 1.3.6.1.2.1.10.46.1.4.           table    0\nipoaArpClientEntry                 1.3.6.1.2.1.10.46.1.4.1.         table    0\nipoaArpClientAtmAddr               1.3.6.1.2.1.10.46.1.4.1.1.       string   10\nipoaArpClientSrvrInUse             1.3.6.1.2.1.10.46.1.4.1.2.       string   10\nipoaArpClientInArpInReqs           1.3.6.1.2.1.10.46.1.4.1.3.       counter  10\nipoaArpClientInArpOutReqs          1.3.6.1.2.1.10.46.1.4.1.4.       counter  10\nipoaArpClientInArpInReplies        1.3.6.1.2.1.10.46.1.4.1.5.       counter  10\nipoaArpClientInArpOutReplies       1.3.6.1.2.1.10.46.1.4.1.6.       counter  10\nipoaArpClientInArpInvalidInReqs    1.3.6.1.2.1.10.46.1.4.1.7.       counter  10\nipoaArpClientInArpInvalidOutReqs   1.3.6.1.2.1.10.46.1.4.1.8.       counter  10\nipoaArpClientArpInReqs             1.3.6.1.2.1.10.46.1.4.1.9.       counter  10\nipoaArpClientArpOutReqs            1.3.6.1.2.1.10.46.1.4.1.10.      counter  10\nipoaArpClientArpInReplies          1.3.6.1.2.1.10.46.1.4.1.11.      counter  10\nipoaArpClientArpOutReplies         1.3.6.1.2.1.10.46.1.4.1.12.      counter  10\nipoaArpClientArpInNaks             1.3.6.1.2.1.10.46.1.4.1.13.      counter  10\nipoaArpClientArpOutNaks            1.3.6.1.2.1.10.46.1.4.1.14.      counter  10\nipoaArpClientArpUnknownOps         1.3.6.1.2.1.10.46.1.4.1.15.      counter  10\nipoaArpClientArpNoSrvrResps        1.3.6.1.2.1.10.46.1.4.1.16.      counter  10\nipoaArpRemoteSrvrTable             1.3.6.1.2.1.10.46.1.6.           table    0\nipoaArpRemoteSrvrEntry             1.3.6.1.2.1.10.46.1.6.1.         table    0\nipoaArpRemoteSrvrIpAddr            1.3.6.1.2.1.10.46.1.6.1.4.       internet 0\nipoaVcTable                        1.3.6.1.2.1.10.46.1.7.           table    0\nipoaVcEntry                        1.3.6.1.2.1.10.46.1.7.1.         table    0\nipoaVcType                         1.3.6.1.2.1.10.46.1.7.1.3.       number   10\nipoaVcNegotiatedEncapsType         1.3.6.1.2.1.10.46.1.7.1.4.       number   10\nipoaVcNegotiatedMtu                1.3.6.1.2.1.10.46.1.7.1.5.       number   10\nipoaConfigPvcTable                 1.3.6.1.2.1.10.46.1.8.           table    10\nipoaConfigPvcEntry                 1.3.6.1.2.1.10.46.1.8.1.         table    10\nipoaConfigPvcDefaultMtu            1.3.6.1.2.1.10.46.1.8.1.4.       number   10\nsnmp                               1.3.6.1.2.1.11.                  table    0\nsnmp_group                         1.3.6.1.2.1.11.                  table    0\nsnmpInPkts                         1.3.6.1.2.1.11.1.                counter  1\nsnmpOutPkts                        1.3.6.1.2.1.11.2.                counter  1\nsnmpInBadVersions                  1.3.6.1.2.1.11.3.                counter  1\nsnmpInBadCommunityNames            1.3.6.1.2.1.11.4.                counter  1\nsnmpInBadCommunityUses             1.3.6.1.2.1.11.5.                counter  1\nsnmpInASNParseErrs                 1.3.6.1.2.1.11.6.                counter  1\nsnmpInBadTypes                     1.3.6.1.2.1.11.7.                counter  1\nsnmpInNoSuchNames                  1.3.6.1.2.1.11.9.                counter  1\nsnmpInTooBigs                      1.3.6.1.2.1.11.8.                counter  1\nsnmpInBadValues                    1.3.6.1.2.1.11.10.               counter  1\nsnmpInReadOnlys                    1.3.6.1.2.1.11.11.               counter  1\nsnmpInGenErrs                      1.3.6.1.2.1.11.12.               counter  1\nsnmpInTotalReqVars                 1.3.6.1.2.1.11.13.               counter  1\nsnmpInTotalSetVars                 1.3.6.1.2.1.11.14.               counter  1\nsnmpInGetNexts                     1.3.6.1.2.1.11.16.               counter  1\nsnmpInSetRequests                  1.3.6.1.2.1.11.17.               counter  1\nsnmpInGetRequests                  1.3.6.1.2.1.11.15.               counter  1\nsnmpInGetResponses                 1.3.6.1.2.1.11.18.               counter  1\nsnmpInTraps                        1.3.6.1.2.1.11.19.               counter  1\nsnmpOutTooBigs                     1.3.6.1.2.1.11.20.               counter  1\nsnmpOutNoSuchNames                 1.3.6.1.2.1.11.21.               counter  1\nsnmpOutBadValues                   1.3.6.1.2.1.11.22.               counter  1\nsnmpOutReadOnlys                   1.3.6.1.2.1.11.23.               counter  1\nsnmpOutGenErrs                     1.3.6.1.2.1.11.24.               counter  1\nsnmpOutGetRequests                 1.3.6.1.2.1.11.25.               counter  1\nsnmpOutGetNexts                    1.3.6.1.2.1.11.26.               counter  1\nsnmpOutSetRequests                 1.3.6.1.2.1.11.27.               counter  1\nsnmpOutGetResponses                1.3.6.1.2.1.11.28.               counter  1\nsnmpOutTraps                       1.3.6.1.2.1.11.29.               counter  1\n* snmpEnableAuthTraps - obsolete   1.3.6.1.2.1.11.30.               number   10\nsnmpEnableAuthenTraps              1.3.6.1.2.1.11.30.               number   10\nsnmpSilentDrops                    1.3.6.1.2.1.11.31.               counter  1\nsnmpProxyDrops                     1.3.6.1.2.1.11.32.               counter  1\n*\n* OSPF MIB (RFC 1850)\n*\nospf                               1.3.6.1.2.1.14.                  table    0\nospfGeneralGroup                   1.3.6.1.2.1.14.1.                table    0\nospfRouterId                       1.3.6.1.2.1.14.1.1.              internet 10\nospfAdminStat                      1.3.6.1.2.1.14.1.2.              number   10\nospfVersionNumber                  1.3.6.1.2.1.14.1.3.              number   10\nospfAreaBdrRtrStatus               1.3.6.1.2.1.14.1.4.              number   10\nospfASBdrRtrStatus                 1.3.6.1.2.1.14.1.5.              number   10\nospfExternLsaCount                 1.3.6.1.2.1.14.1.6.              gauge    10\nospfExternLsaCksumSum              1.3.6.1.2.1.14.1.7.              number   10\nospfTOSSupport                     1.3.6.1.2.1.14.1.8.              number   10\nospfOriginateNewLsas               1.3.6.1.2.1.14.1.9.              counter  10\nospfRxNewLsas                      1.3.6.1.2.1.14.1.10.             counter  10\nospfExtLsdbLimit                   1.3.6.1.2.1.14.1.11.             number   10\nospfMulticastExtensions            1.3.6.1.2.1.14.1.12.             number   10\n* ospfExitOverflowInterval         1.3.6.1.2.1.14.1.13.             number   10\nospfDemandExtensions               1.3.6.1.2.1.14.1.14.             number   10\nospfAreaTable                      1.3.6.1.2.1.14.2.                table    0\nospfAreaEntry                      1.3.6.1.2.1.14.2.1.              table    0\nospfAreaId                         1.3.6.1.2.1.14.2.1.1.            internet 10\n* ospfAuthType (obsolete)          1.3.6.1.2.1.14.2.1.2.            number   10\nospfImportAsExtern                 1.3.6.1.2.1.14.2.1.3.            number   10\nospfSpfRuns                        1.3.6.1.2.1.14.2.1.4.            counter  10\nospfAreaBdrRtrCount                1.3.6.1.2.1.14.2.1.5.            gauge    10\nospfAsBdrRtrCount                  1.3.6.1.2.1.14.2.1.6.            gauge    10\nospfAreaLsaCount                   1.3.6.1.2.1.14.2.1.7.            gauge    10\nospfAreaLsaCksumSum                1.3.6.1.2.1.14.2.1.8.            number   10\nospfAreaSummary                    1.3.6.1.2.1.14.2.1.9.            number   10\n* ospfAreaStatus                   1.3.6.1.2.1.14.2.1.10.           number   10\nospfStubAreaTable                  1.3.6.1.2.1.14.3.                table    0\nospfStubAreaEntry                  1.3.6.1.2.1.14.3.1.              table    0\nospfStubAreaId                     1.3.6.1.2.1.14.3.1.1.            internet 10\nospfStubTOS                        1.3.6.1.2.1.14.3.1.2.            number   10\nospfStubMetric                     1.3.6.1.2.1.14.3.1.3.            number   10\n* ospfStubStatus                   1.3.6.1.2.1.14.3.1.4.            number   10\nospfStubMetricType                 1.3.6.1.2.1.14.3.1.5.            number   10\nospfLsdbTable                      1.3.6.1.2.1.14.4.                table    0\nospfLsdbEntry                      1.3.6.1.2.1.14.4.1.              table    0\nospfLsdbAreaId                     1.3.6.1.2.1.14.4.1.1.            internet 10\nospfLsdbType                       1.3.6.1.2.1.14.4.1.2.            number   10\nospfLsdbLsid                       1.3.6.1.2.1.14.4.1.3.            internet 10\nospfLsdbRouterId                   1.3.6.1.2.1.14.4.1.4.            internet 10\nospfLsdbSequence                   1.3.6.1.2.1.14.4.1.5.            number   10\nospfLsdbAge                        1.3.6.1.2.1.14.4.1.6.            number   10\nospfLsdbChecksum                   1.3.6.1.2.1.14.4.1.7.            number   10\nospfLsdbAdvertisement              1.3.6.1.2.1.14.4.1.8.            string   10\n*\n* obsolete (see ospfAreaAggregateTable)\n*\n* ospfAreaRangeTable               1.3.6.1.2.1.14.5.                table    0\n* ospfAreaRangeEntry               1.3.6.1.2.1.14.5.1.              table    0\n* ospfAreaRangeAreaId              1.3.6.1.2.1.14.5.1.1.            internet 10\n* ospfAreaRangeNet                 1.3.6.1.2.1.14.5.1.2.            internet 10\n* ospfAreaRangeMask                1.3.6.1.2.1.14.5.1.3.            internet 10\n* ospfAreaRangeStatus              1.3.6.1.2.1.14.5.1.4.            number   10\n* ospfAreaRangeEffect              1.3.6.1.2.1.14.5.1.5.            number   10\n*\n* ospfHostTable                    1.3.6.1.2.1.14.6.                table    0\n* ospfHostEntry                    1.3.6.1.2.1.14.6.1.              table    0\n* ospfHostIpAddress                1.3.6.1.2.1.14.6.1.1.            internet 10\n* ospfHostTOS                      1.3.6.1.2.1.14.6.1.2.            number   10\n* ospfHostMetric                   1.3.6.1.2.1.14.6.1.3.            number   10\n* ospfHostStatus                   1.3.6.1.2.1.14.6.1.4.            number   10\n* ospfHostAreaID                   1.3.6.1.2.1.14.6.1.5.            internet 10\nospfIfTable                        1.3.6.1.2.1.14.7.                table    0\nospfIfEntry                        1.3.6.1.2.1.14.7.1.              table    0\nospfIfIpAddress                    1.3.6.1.2.1.14.7.1.1.            internet 10\nospfAddressLessIf                  1.3.6.1.2.1.14.7.1.2.            number   10\nospfIfAreaId                       1.3.6.1.2.1.14.7.1.3.            internet 10\nospfIfType                         1.3.6.1.2.1.14.7.1.4.            number   10\nospfIfAdminStat                    1.3.6.1.2.1.14.7.1.5.            number   10\nospfIfRtrPriority                  1.3.6.1.2.1.14.7.1.6.            number   10\nospfIfTransitDelay                 1.3.6.1.2.1.14.7.1.7.            number   10\nospfIfRetransInterval              1.3.6.1.2.1.14.7.1.8.            number   10\nospfIfHelloInterval                1.3.6.1.2.1.14.7.1.9.            number   10\nospfIfRtrDeadInterval              1.3.6.1.2.1.14.7.1.10.           number   10\nospfIfPollInterval                 1.3.6.1.2.1.14.7.1.11.           number   10\nospfIfState                        1.3.6.1.2.1.14.7.1.12.           number   10\nospfIfDesignatedRouter             1.3.6.1.2.1.14.7.1.13.           internet 10\nospfIfBackupDesignatedRouter       1.3.6.1.2.1.14.7.1.14.           internet 10\nospfIfEvents                       1.3.6.1.2.1.14.7.1.15.           counter  10\nospfIfAuthType                     1.3.6.1.2.1.14.7.1.16.           number   10\nospfIfAuthKey                      1.3.6.1.2.1.14.7.1.17.           string   10\n* ospfIfStatus                     1.3.6.1.2.1.14.7.1.18.           number   10\nospfIfMulticastForwarding          1.3.6.1.2.1.14.7.1.19.           number   10\nospfIfDemand                       1.3.6.1.2.1.14.7.1.20.           number   10\nospfIfMetricTable                  1.3.6.1.2.1.14.8.                table    0\nospfIfMetricEntry                  1.3.6.1.2.1.14.8.1.              table    0\nospfIfMetricIpAddress              1.3.6.1.2.1.14.8.1.1.            internet 10\nospfIfMetricAddressLessIf          1.3.6.1.2.1.14.8.1.2.            number   10\nospfIfMetricTOS                    1.3.6.1.2.1.14.8.1.3.            number   10\nospfIfMetricValue                  1.3.6.1.2.1.14.8.1.4.            number   10\n* ospfIfMetricStatus               1.3.6.1.2.1.14.8.1.5.            number   10\nospfVirtIfTable                    1.3.6.1.2.1.14.9.                table    0\nospfVirtIfEntry                    1.3.6.1.2.1.14.9.1.              table    0\nospfVirtIfAreaId                   1.3.6.1.2.1.14.9.1.1.            internet 10\nospfVirtIfNeighbor                 1.3.6.1.2.1.14.9.1.2.            internet 10\nospfVirtIfTransitDelay             1.3.6.1.2.1.14.9.1.3.            number   10\nospfVirtIfRetransInterval          1.3.6.1.2.1.14.9.1.4.            number   10\nospfVirtIfHelloInterval            1.3.6.1.2.1.14.9.1.5.            number   10\nospfVirtIfRtrDeadInterval          1.3.6.1.2.1.14.9.1.6.            number   10\nospfVirtIfState                    1.3.6.1.2.1.14.9.1.7.            number   10\nospfVirtIfEvents                   1.3.6.1.2.1.14.9.1.8.            counter  10\nospfVirtIfAuthType                 1.3.6.1.2.1.14.9.1.9.            number   10\nospfVirtIfAuthKey                  1.3.6.1.2.1.14.9.1.10.           string   10\n* ospfVirtIfStatus                 1.3.6.1.2.1.14.9.1.11.           number   10\nospfNbrTable                       1.3.6.1.2.1.14.10.               table    0\nospfNbrEntry                       1.3.6.1.2.1.14.10.1.             table    0\nospfNbrIpAddr                      1.3.6.1.2.1.14.10.1.1.           internet 10\nospfNbrAddressLessIndex            1.3.6.1.2.1.14.10.1.2.           number   10\nospfNbrRtrId                       1.3.6.1.2.1.14.10.1.3.           internet 10\nospfNbrOptions                     1.3.6.1.2.1.14.10.1.4.           number   10\nospfNbrPriority                    1.3.6.1.2.1.14.10.1.5.           number   10\nospfNbrState                       1.3.6.1.2.1.14.10.1.6.           number   10\nospfNbrEvents                      1.3.6.1.2.1.14.10.1.7.           counter  10\nospfNbrLsRetransQLen               1.3.6.1.2.1.14.10.1.8.           gauge    10\n* ospfNbmaNbrStatus                1.3.6.1.2.1.14.10.1.9.           number   10\nospfNbmaNbrPermanence              1.3.6.1.2.1.14.10.1.10.          number   10\nospfNbrHelloSuppressed             1.3.6.1.2.1.14.10.1.11.          number   10\nospfVirtNbrTable                   1.3.6.1.2.1.14.11.               table    0\nospfVirtNbrEntry                   1.3.6.1.2.1.14.11.1.             table    0\nospfVirtNbrArea                    1.3.6.1.2.1.14.11.1.1.           internet 10\nospfVirtNbrRtrId                   1.3.6.1.2.1.14.11.1.2.           internet 10\nospfVirtNbrIpAddr                  1.3.6.1.2.1.14.11.1.3.           internet 10\nospfVirtNbrOptions                 1.3.6.1.2.1.14.11.1.4.           number   10\nospfVirtNbrState                   1.3.6.1.2.1.14.11.1.5.           number   10\nospfVirtNbrEvents                  1.3.6.1.2.1.14.11.1.6.           counter  10\nospfVirtNbrLsRetransQLen           1.3.6.1.2.1.14.11.1.7.           gauge    10\nospfVirtNbrHelloSuppressed         1.3.6.1.2.1.14.11.1.8.           number   10\nospfExtLsdbTable                   1.3.6.1.2.1.14.12.               table    0\nospfExtLsdbEntry                   1.3.6.1.2.1.14.12.1.             table    0\nospfExtLsdbType                    1.3.6.1.2.1.14.12.1.1.           number   10\nospfExtLsdbLsid                    1.3.6.1.2.1.14.12.1.2.           internet 10\nospfExtLsdbRouterId                1.3.6.1.2.1.14.12.1.3.           internet 10\nospfExtLsdbSequence                1.3.6.1.2.1.14.12.1.4.           number   10\nospfExtLsdbAge                     1.3.6.1.2.1.14.12.1.5.           number   10\nospfExtLsdbChecksum                1.3.6.1.2.1.14.12.1.6.           number   10\nospfExtLsdbAdvertisement           1.3.6.1.2.1.14.12.1.7.           string   10\n* ospfRouteGroup                   1.3.6.1.2.1.14.13.               table    0\n* ospfIntraArea                    1.3.6.1.2.1.14.13.1.             table    0\n* ospfInterArea                    1.3.6.1.2.1.14.13.2.             table    0\n* ospfExternalType1                1.3.6.1.2.1.14.13.3.             table    0\n* ospfExternalType2                1.3.6.1.2.1.14.13.4.             table    0\nospfAreaAggregateTable             1.3.6.1.2.1.14.14.               table    0\nospfAreaAggregateEntry             1.3.6.1.2.1.14.14.1.             table    0\nospfAreaAggregateAreaID            1.3.6.1.2.1.14.14.1.1.           internet 10\nospfAreaAggregateLsdbType          1.3.6.1.2.1.14.14.1.2.           number   10\nospfAreaAggregateNet               1.3.6.1.2.1.14.14.1.3.           internet 10\nospfAreaAggregateMask              1.3.6.1.2.1.14.14.1.4.           internet 10\n* ospfAreaAggregateStatus          1.3.6.1.2.1.14.14.1.5.           number   10\nospfAreaAggregateEffect            1.3.6.1.2.1.14.14.1.6.           number   10\nifMIB                              1.3.6.1.2.1.31.                  table    0\nifMIBObjects                       1.3.6.1.2.1.31.1.                table    0\nifXTable                           1.3.6.1.2.1.31.1.1.              table    0\nifXEntry                           1.3.6.1.2.1.31.1.1.1.            table    0\nifName                             1.3.6.1.2.1.31.1.1.1.1.          display  30\nifInMulticastPkts                  1.3.6.1.2.1.31.1.1.1.2.          counter  1\nifInBroadcastPkts                  1.3.6.1.2.1.31.1.1.1.3.          counter  1\nifOutMulticastPkts                 1.3.6.1.2.1.31.1.1.1.4.          counter  1\nifOutBroadcastPkts                 1.3.6.1.2.1.31.1.1.1.5.          counter  1\nifLinkUpDownTrapEnable             1.3.6.1.2.1.31.1.1.1.14.         number   10\nifHighSpeed                        1.3.6.1.2.1.31.1.1.1.15.         gauge    10\nifPromiscuousMode                  1.3.6.1.2.1.31.1.1.1.16.         number   30\nifConnectorPresent                 1.3.6.1.2.1.31.1.1.1.17.         number   30\nifAlias                            1.3.6.1.2.1.31.1.1.1.18.         display  30\nifCounterDiscontinuityTime         1.3.6.1.2.1.31.1.1.1.19.         ticks    1\nifStackTable                       1.3.6.1.2.1.31.1.2.              table    0\nifStackEntry                       1.3.6.1.2.1.31.1.2.1.            table    0\nifStackStatus                      1.3.6.1.2.1.31.1.2.1.3.          number   10\natmMIB                             1.3.6.1.2.1.37.                  table    0\natmMIBObjects                      1.3.6.1.2.1.37.1.                table    0\natmInterfaceConfTable              1.3.6.1.2.1.37.1.2.              table    0\natmInterfaceConfEntry              1.3.6.1.2.1.37.1.2.1.            table    0\natmInterfaceMaxVpcs                1.3.6.1.2.1.37.1.2.1.1.          number   10\natmInterfaceMaxVccs                1.3.6.1.2.1.37.1.2.1.2.          number   10\natmInterfaceConfVpcs               1.3.6.1.2.1.37.1.2.1.3.          number   10\natmInterfaceConfVccs               1.3.6.1.2.1.37.1.2.1.4.          number   10\natmInterfaceMaxActiveVpiBits       1.3.6.1.2.1.37.1.2.1.5.          number   10\natmInterfaceMaxActiveVciBits       1.3.6.1.2.1.37.1.2.1.6.          number   10\natmInterfaceIlmiVpi                1.3.6.1.2.1.37.1.2.1.7.          number   10\natmInterfaceIlmiVci                1.3.6.1.2.1.37.1.2.1.8.          number   10\natmInterfaceAddressType            1.3.6.1.2.1.37.1.2.1.9.          number   10\natmInterfaceAdminAddress           1.3.6.1.2.1.37.1.2.1.10.         string   10\natmInterfaceMyNeighborIpAddress    1.3.6.1.2.1.37.1.2.1.11.         internet 10\natmInterfaceMyNeighborIfName       1.3.6.1.2.1.37.1.2.1.12.         display  30\n* IBM object\nibm                                1.3.6.1.4.1.2.                   table    0\n* IBM Research objects\nibmResearch                        1.3.6.1.4.1.2.2.                 table    0\n* IBM SNMP agent DPI TCP port.  Preferred name is\n*  dpiPortForTCP, but DPI_port and dpiPort are left for compatibility.\nDPI_port                           1.3.6.1.4.1.2.2.1.1.             number   2\ndpiPort                            1.3.6.1.4.1.2.2.1.1.0.           number   2\ndpiPortForTCP                      1.3.6.1.4.1.2.2.1.1.1.0.         number   10\ndpiPortForUDP                      1.3.6.1.4.1.2.2.1.1.2.0.         number   10\ndpiPathNameForUnixStream           1.3.6.1.4.1.2.2.1.1.3.0.         display  30\n* IBM \"ping\" round-trip-time table\nRTTaddr                            1.3.6.1.4.1.2.2.1.3.1.           internet 60\nminRTT                             1.3.6.1.4.1.2.2.1.3.2.           number   60\nmaxRTT                             1.3.6.1.4.1.2.2.1.3.3.           number   60\naveRTT                             1.3.6.1.4.1.2.2.1.3.4.           number   60\nRTTtries                           1.3.6.1.4.1.2.2.1.3.5.           number   60\nRTTresponses                       1.3.6.1.4.1.2.2.1.3.6.           number   60\n*\n* MIB objects for the sample DPI subagents:\n*\n* DPI version 1.1 sample subagent:\n* DPISAMPLE.C supports these variables as an SNMP DPI sample sub-agent\n* it also generates enterprise specific traps via DPI with these objects\ndpiSample                          1.3.6.1.4.1.2.2.1.4.             table    0\ndpiSampleNumber                    1.3.6.1.4.1.2.2.1.4.1.           number   10\n* next one is to be able to send a badValue with a SET request\ndpiSampleNumberString              1.3.6.1.4.1.2.2.1.4.1.1.         string   10\ndpiSampleOctetString               1.3.6.1.4.1.2.2.1.4.2.           string   10\ndpiSampleObjectID                  1.3.6.1.4.1.2.2.1.4.3.           object   10\n* XGMON/SQESERV does not allow to specify empty (so use empty string)\ndpiSampleEmpty                     1.3.6.1.4.1.2.2.1.4.4.           string   10\ndpiSampleInetAddress               1.3.6.1.4.1.2.2.1.4.5.           internet 10\ndpiSampleCounter                   1.3.6.1.4.1.2.2.1.4.6.           counter  10\ndpiSampleGauge                     1.3.6.1.4.1.2.2.1.4.7.           gauge    10\ndpiSampleTimeTicks                 1.3.6.1.4.1.2.2.1.4.8.           ticks    10\ndpiSampleDisplayString             1.3.6.1.4.1.2.2.1.4.9.           display  10\ndpiSampleCommand                   1.3.6.1.4.1.2.2.1.4.10.          display  1\n*\n* DPI version 2.0 sample subagent:\ndpiSimpleInteger                   1.3.6.1.4.1.2.2.1.5.1.           number   10\ndpiSimpleString                    1.3.6.1.4.1.2.2.1.5.2.           string   10\ndpiSimpleCounter32                 1.3.6.1.4.1.2.2.1.5.3.           counter  10\n*\n* XGMON display element override\ndeOverride                         1.3.6.1.4.1.2.2.1.5.1.           display  1\nNVcmd                              1.3.6.1.4.1.2.2.1.5.2.           display  1\nNVreply                            1.3.6.1.4.1.2.2.1.5.3.           display  10\nNVmsgop                            1.3.6.1.4.1.2.2.1.5.4.           display  1\n*\nsaDefaultTimeout                   1.3.6.1.4.1.2.4.12.1.            number   10\nsaMaxTimeout                       1.3.6.1.4.1.2.4.12.2.            number   10\nsaAllowDuplicateIDs                1.3.6.1.4.1.2.4.12.3.            number   10\nsaNumber                           1.3.6.1.4.1.2.4.12.4.            counter  1\nsaAllPacketsIn                     1.3.6.1.4.1.2.4.12.5.            counter  1\nsaAllPacketsOut                    1.3.6.1.4.1.2.4.12.6.            counter  1\nsaTable                            1.3.6.1.4.1.2.4.12.7.            table    0\nsaEntry                            1.3.6.1.4.1.2.4.12.7.1.          table    0\nsaIndex                            1.3.6.1.4.1.2.4.12.7.1.1.        number   10\nsaIdentifier                       1.3.6.1.4.1.2.4.12.7.1.2.        object   10\nsaDescription                      1.3.6.1.4.1.2.4.12.7.1.3.        display  30\nsaStatus                           1.3.6.1.4.1.2.4.12.7.1.4.        number   10\nsaStatusChangeTime                 1.3.6.1.4.1.2.4.12.7.1.5.        ticks    10\nsaProtocol                         1.3.6.1.4.1.2.4.12.7.1.6.        number   10\nsaProtocolVersion                  1.3.6.1.4.1.2.4.12.7.1.7.        number   10\nsaProtocolRelease                  1.3.6.1.4.1.2.4.12.7.1.8.        number   10\nsaTransport                        1.3.6.1.4.1.2.4.12.7.1.9.        number   10\nsaTransportAddress                 1.3.6.1.4.1.2.4.12.7.1.10.       string   10\nsaTimeout                          1.3.6.1.4.1.2.4.12.7.1.11.       number   10\nsaMaxVarBinds                      1.3.6.1.4.1.2.4.12.7.1.12.       number   10\nsaPacketsIn                        1.3.6.1.4.1.2.4.12.7.1.13.       counter  1\nsaPacketsOut                       1.3.6.1.4.1.2.4.12.7.1.14.       counter  1\nsaTreeTable                        1.3.6.1.4.1.2.4.12.8.            table    0\nsaTreeEntry                        1.3.6.1.4.1.2.4.12.8.1.          table    0\nsaTsubtree                         1.3.6.1.4.1.2.4.12.8.1.1.        object   10\nsaTpriority                        1.3.6.1.4.1.2.4.12.8.1.2.        number   10\nsaTindex                           1.3.6.1.4.1.2.4.12.8.1.3.        number   10\nsaTstatus                          1.3.6.1.4.1.2.4.12.8.1.4.        number   10\nsaTtimeout                         1.3.6.1.4.1.2.4.12.8.1.5.        number   10\n*\n* IBM Product object\nibmProd                            1.3.6.1.4.1.2.6.                 table    0\n*\n* IBM 3172 enterprise specific MIB objects\n*\nibm3172                            1.3.6.1.4.1.2.6.1.               table    0\nibm3172SystemTable                 1.3.6.1.4.1.2.6.1.1.             table    0\nibm3172SystemTableEntry            1.3.6.1.4.1.2.6.1.1.1.           table    0\nibm3172Descr                       1.3.6.1.4.1.2.6.1.1.1.1.         display  30\nibm3172Contact                     1.3.6.1.4.1.2.6.1.1.1.2.         display  30\nibm3172Location                    1.3.6.1.4.1.2.6.1.1.1.3.         display  30\nibm3172ifNumber                    1.3.6.1.4.1.2.6.1.1.1.4.         number   1\nibm3172ifTrapTable                 1.3.6.1.4.1.2.6.1.2.             table    0\nibm3172ifTrapTableEntry            1.3.6.1.4.1.2.6.1.2.1.           table    0\nibm3172ifTrapEnable                1.3.6.1.4.1.2.6.1.2.1.1.         number   1\nibm3172ifChanCountersTable         1.3.6.1.4.1.2.6.1.3.             table    0\nibm3172ifChanCountersTableEntry    1.3.6.1.4.1.2.6.1.3.1.           table    0\nibm3172ifInChanOctets              1.3.6.1.4.1.2.6.1.3.1.1.         counter  1\nibm3172ifOutChanOctets             1.3.6.1.4.1.2.6.1.3.1.2.         counter  1\nibm3172ifInChanBlocks              1.3.6.1.4.1.2.6.1.3.1.3.         counter  1\nibm3172ifOutChanBlocks             1.3.6.1.4.1.2.6.1.3.1.4.         counter  1\nibm3172ifLANCountersTable          1.3.6.1.4.1.2.6.1.4.             table    0\nibm3172ifLANCountersTableEntry     1.3.6.1.4.1.2.6.1.4.1.           table    0\nibm3172ifInLANOctets               1.3.6.1.4.1.2.6.1.4.1.1.         counter  1\nibm3172ifOutLANOctets              1.3.6.1.4.1.2.6.1.4.1.2.         counter  1\nibm3172ifInLANFrames               1.3.6.1.4.1.2.6.1.4.1.3.         counter  1\nibm3172ifOutLANFrames              1.3.6.1.4.1.2.6.1.4.1.4.         counter  1\nibm3172ifInLANErrors               1.3.6.1.4.1.2.6.1.4.1.5.         counter  1\nibm3172ifOutLANErrors              1.3.6.1.4.1.2.6.1.4.1.6.         counter  1\nibm3172ifInLANDiscards             1.3.6.1.4.1.2.6.1.4.1.7.         counter  1\nibm3172ifOutLANDiscards            1.3.6.1.4.1.2.6.1.4.1.8.         counter  1\nibm3172ifBlkCountersTable          1.3.6.1.4.1.2.6.1.5.             table    0\nibm3172ifBlkCountersTableEntry     1.3.6.1.4.1.2.6.1.5.1.           table    0\nibm3172ifBlkRcvOctets              1.3.6.1.4.1.2.6.1.5.1.1.         counter  1\nibm3172ifBlkXmitOctets             1.3.6.1.4.1.2.6.1.5.1.2.         counter  1\nibm3172ifBlkRcvFrames              1.3.6.1.4.1.2.6.1.5.1.3.         counter  1\nibm3172ifBlkXmitBlocks             1.3.6.1.4.1.2.6.1.5.1.4.         counter  1\nibm3172ifInBlkErrors               1.3.6.1.4.1.2.6.1.5.1.5.         counter  1\nibm3172ifInBlkDiscards             1.3.6.1.4.1.2.6.1.5.1.6.         counter  1\nibm3172ifDblkCountersTable         1.3.6.1.4.1.2.6.1.6.             table    0\nibm3172ifDblkCountersTableEntry    1.3.6.1.4.1.2.6.1.6.1.           table    0\nibm3172ifDblkRcvOctets             1.3.6.1.4.1.2.6.1.6.1.1.         counter  1\nibm3172ifDblkXmitOctets            1.3.6.1.4.1.2.6.1.6.1.2.         counter  1\nibm3172ifDblkRcvBlocks             1.3.6.1.4.1.2.6.1.6.1.3.         counter  1\nibm3172ifDblkXmitFrames            1.3.6.1.4.1.2.6.1.6.1.4.         counter  1\nibm3172ifOutDblkErrors             1.3.6.1.4.1.2.6.1.6.1.5.         counter  1\nibm3172ifOutDblkDiscards           1.3.6.1.4.1.2.6.1.6.1.6.         counter  1\nibm3172ifDeviceTable               1.3.6.1.4.1.2.6.1.7.             table    0\nibm3172ifDeviceTableEntry          1.3.6.1.4.1.2.6.1.7.1.           table    0\nibm3172ifDeviceNumber              1.3.6.1.4.1.2.6.1.7.1.1.         counter  1\n*\nnetView6000SubAgent                1.3.6.1.4.1.2.6.4.               table     0\nnv6saIcmp                          1.3.6.1.4.1.2.6.4.3.             table     0\nnv6saIcmpEchoReq                   1.3.6.1.4.1.2.6.4.3.1.           number    1\n*\n* MVS SNMP Agent object\nmvsSNMPagent                       1.3.6.1.4.1.2.6.19.              table    0\n*\n* Note that the ibmSNMPRemPing object is obsolete for releases of\n*  TCP/IP after TCP/IP V3R2.  It was replaced by ibmMvsRPingResponseTime\n*ibmSNMPRemPing                    1.3.6.1.4.1.2.6.19.1.            number    1\n*\n* ibmTCPIPmvsMIB enterprise specific MIB objects\n*\nibmTCPIPmvsMIB                     1.3.6.1.4.1.2.6.19.2.            table    0\nibmTCPIPmvsMIBObjects              1.3.6.1.4.1.2.6.19.2.2.          table    0\nibmRemotePingGroup                 1.3.6.1.4.1.2.6.19.2.2.1.        table    0\nibmRemotePingTable                 1.3.6.1.4.1.2.6.19.2.2.1.1.      table    0\nibmRemotePingEntry                 1.3.6.1.4.1.2.6.19.2.2.1.1.1.    table    0\nibmMvsRPingResponseTime            1.3.6.1.4.1.2.6.19.2.2.1.1.1.4.  number   30\nibmTcpipMvsRemPingTable            1.3.6.1.4.1.2.6.19.2.2.1.2.      table    0\nibmTcpipMvsRemPingEntry            1.3.6.1.4.1.2.6.19.2.2.1.2.1.    table    0\nibmMvsRemPingPacketSize            1.3.6.1.4.1.2.6.19.2.2.1.2.1.1.  number   0\nibmMvsRemPingTimeOut               1.3.6.1.4.1.2.6.19.2.2.1.2.1.2.  number   0\nibmMvsRemPingHostAddrType          1.3.6.1.4.1.2.6.19.2.2.1.2.1.3.  number   0\nibmMvsRemPingHostAddr              1.3.6.1.4.1.2.6.19.2.2.1.2.1.4.  string   0\nibmMvsRemPingResponseTime          1.3.6.1.4.1.2.6.19.2.2.1.2.1.5.  number   0\nibmTcpipMvsSystem                  1.3.6.1.4.1.2.6.19.2.2.2.        table    0\nibmMvsSubagentCacheTime            1.3.6.1.4.1.2.6.19.2.2.2.1.      number   30\nibmMvsIgnoreRedirect               1.3.6.1.4.1.2.6.19.2.2.2.2.      number   30\nibmMvsArpCacheTimeout              1.3.6.1.4.1.2.6.19.2.2.2.3.      number   30\nibmMvsTcpKeepAliveTimer            1.3.6.1.4.1.2.6.19.2.2.2.4.      number   30\nibmMvsTcpReceiveBufferSize         1.3.6.1.4.1.2.6.19.2.2.2.5.      number   30\nibmMvsTcpSendBufferSize            1.3.6.1.4.1.2.6.19.2.2.2.6.      number   30\nibmMvsUdpChecksum                  1.3.6.1.4.1.2.6.19.2.2.2.7.      number   30\nibmMvsIplDateAndTime               1.3.6.1.4.1.2.6.19.2.2.2.8.      string   30\nibmMvsNoUdpQueueLimit              1.3.6.1.4.1.2.6.19.2.2.2.9.      number   30\nibmMvsSoMaxConn                    1.3.6.1.4.1.2.6.19.2.2.2.10.     number   30\nibmMvsTcpipProcname                1.3.6.1.4.1.2.6.19.2.2.2.11.     display  30\nibmMvsTcpipAsid                    1.3.6.1.4.1.2.6.19.2.2.2.12.     number   30\nibmMvsSourceVipaEnabled            1.3.6.1.4.1.2.6.19.2.2.2.13.     number   30\nibmMvsOsasfSysplexName             1.3.6.1.4.1.2.6.19.2.2.2.14.     display  30\nibmMvsOsasfHostName                1.3.6.1.4.1.2.6.19.2.2.2.15.     display  30\nibmMvsOsasfProductVersion          1.3.6.1.4.1.2.6.19.2.2.2.16.     display  30\nibmMvsPrimaryInterfaceIfIndex      1.3.6.1.4.1.2.6.19.2.2.2.17.     number   30\nibmMvsIpMaxReassemblySize          1.3.6.1.4.1.2.6.19.2.2.2.18.     number   30\nibmMvsTcpRestrictLowPorts          1.3.6.1.4.1.2.6.19.2.2.2.19.     number   30\nibmMvsUdpRestrictLowPorts          1.3.6.1.4.1.2.6.19.2.2.2.20.     number   30\nibmMvsUdpSendBufferSize            1.3.6.1.4.1.2.6.19.2.2.2.21.     number   30\nibmMvsUdpRecvBufferSize            1.3.6.1.4.1.2.6.19.2.2.2.22.     number   30\nibmMvsTcpipStatisticsEnabled       1.3.6.1.4.1.2.6.19.2.2.2.23.     number   30\nibmMvsFirewallEnabled              1.3.6.1.4.1.2.6.19.2.2.2.24.     number   30\nibmMvsMaximumRetransmitTime        1.3.6.1.4.1.2.6.19.2.2.2.25.     number   30\nibmMvsMinimumRetransmitTime        1.3.6.1.4.1.2.6.19.2.2.2.26.     number   30\nibmMvsRoundTripGain                1.3.6.1.4.1.2.6.19.2.2.2.27.     number   30\nibmMvsVarianceGain                 1.3.6.1.4.1.2.6.19.2.2.2.28.     number   30\nibmMvsVarianceMultiplier           1.3.6.1.4.1.2.6.19.2.2.2.29.     number   30\nibmMvsSendGarbageEnabled           1.3.6.1.4.1.2.6.19.2.2.2.30.     number   30\nibmMvsTcpMaxReceiveBufferSize      1.3.6.1.4.1.2.6.19.2.2.2.31.     number   30\nibmMvsPathMtuDscEnabled            1.3.6.1.4.1.2.6.19.2.2.2.33.     number   30\nibmMvsMultipathType                1.3.6.1.4.1.2.6.19.2.2.2.34.     number   30\nibmMvsIpForwarding                 1.3.6.1.4.1.2.6.19.2.2.2.35.     number   30\nibmMvsDevRetryDuration             1.3.6.1.4.1.2.6.19.2.2.2.36.     gauge    30\nibmMvsTcpFinwait2Time              1.3.6.1.4.1.2.6.19.2.2.2.37.     number   30\nibmMvsTcpTimeStamp                 1.3.6.1.4.1.2.6.19.2.2.2.38.     number   30\nibmMvsTcpipSubagentVersion         1.3.6.1.4.1.2.6.19.2.2.2.39.     number   30\nibmMvsSystemName                   1.3.6.1.4.1.2.6.19.2.2.2.40.     display  30\nibmMvsSysplexName                  1.3.6.1.4.1.2.6.19.2.2.2.41.     display  30\nibmMvsIp6Forwarding                1.3.6.1.4.1.2.6.19.2.2.2.42.     number   30\nibmMvsIp6IcmpErrorLimit            1.3.6.1.4.1.2.6.19.2.2.2.43.     number   30\nibmMvsIp6IgnoreRedirect            1.3.6.1.4.1.2.6.19.2.2.2.44.     number   30\nibmMvsIp6IgnoreRtrHopLimit         1.3.6.1.4.1.2.6.19.2.2.2.45.     number   30\nibmMvsIp6MultipathType             1.3.6.1.4.1.2.6.19.2.2.2.46.     number   30\nibmMvsIp6SourceVipaEnabled         1.3.6.1.4.1.2.6.19.2.2.2.47.     number   30\nibmMvsIp6TcpStackSrcVipaIntfName   1.3.6.1.4.1.2.6.19.2.2.2.48.     display  30\nibmMvsIpsecEnabled                 1.3.6.1.4.1.2.6.19.2.2.2.49.     number   30\nibmMvsTcpTtlsEnabled               1.3.6.1.4.1.2.6.19.2.2.2.50.     number   30\nibmTcpipMvsInterfaceGroup          1.3.6.1.4.1.2.6.19.2.2.3.        table    0\nibmTcpipMvsDeviceTable             1.3.6.1.4.1.2.6.19.2.2.3.1.      table    0\nibmTcpipMvsDeviceEntry             1.3.6.1.4.1.2.6.19.2.2.3.1.1.    table    0\nibmMvsDeviceType                   1.3.6.1.4.1.2.6.19.2.2.3.1.1.1.  number   30\nibmMvsDeviceBaseNumber             1.3.6.1.4.1.2.6.19.2.2.3.1.1.2.  string   30\nibmMvsDeviceIoBufferSize           1.3.6.1.4.1.2.6.19.2.2.3.1.1.3.  number   30\nibmMvsDeviceAutoRestart            1.3.6.1.4.1.2.6.19.2.2.3.1.1.4.  number   30\nibmMvsDeviceNetmanEnabled          1.3.6.1.4.1.2.6.19.2.2.3.1.1.5.  number   30\nibmMvsDeviceHostClawName           1.3.6.1.4.1.2.6.19.2.2.3.1.1.6.  display  30\nibmMvsDeviceWorkstationClawName    1.3.6.1.4.1.2.6.19.2.2.3.1.1.7.  display  30\nibmMvsDeviceReadBuffers            1.3.6.1.4.1.2.6.19.2.2.3.1.1.8.  number   30\nibmMvsDeviceReadSize               1.3.6.1.4.1.2.6.19.2.2.3.1.1.9.  number   30\nibmMvsDeviceWriteBuffers           1.3.6.1.4.1.2.6.19.2.2.3.1.1.10. number   30\nibmMvsDeviceWriteSize              1.3.6.1.4.1.2.6.19.2.2.3.1.1.11. number   30\nibmMvsDeviceProcname               1.3.6.1.4.1.2.6.19.2.2.3.1.1.12. display  30\nibmMvsDeviceIncomingSvcEnabled     1.3.6.1.4.1.2.6.19.2.2.3.1.1.13. number   30\nibmMvsDeviceLuName                 1.3.6.1.4.1.2.6.19.2.2.3.1.1.14. display  30\nibmMvsDeviceRouterStatus           1.3.6.1.4.1.2.6.19.2.2.3.1.1.15. number   30\nibmMvsDeviceActualRouterStatus     1.3.6.1.4.1.2.6.19.2.2.3.1.1.16. number   30\nibmMvsDeviceConfigPackingMode      1.3.6.1.4.1.2.6.19.2.2.3.1.1.17. number   30\nibmMvsDeviceActualPackingMode      1.3.6.1.4.1.2.6.19.2.2.3.1.1.18. number   30\nibmTcpipMvsLinkTable               1.3.6.1.4.1.2.6.19.2.2.3.2.      table    0\nibmTcpipMvsLinkEntry               1.3.6.1.4.1.2.6.19.2.2.3.2.1.    table    0\nibmMvsLinkType                     1.3.6.1.4.1.2.6.19.2.2.3.2.1.1.  number   30\nibmMvsLinkDeviceIndex              1.3.6.1.4.1.2.6.19.2.2.3.2.1.2.  number   30\nibmMvsLinkAdapterAddr              1.3.6.1.4.1.2.6.19.2.2.3.2.1.3.  number   30\nibmMvsLinkNumber                   1.3.6.1.4.1.2.6.19.2.2.3.2.1.4.  number   30\nibmMvsLinkIbmtrCanonical           1.3.6.1.4.1.2.6.19.2.2.3.2.1.5.  number   30\nibmMvsLinkIbmtrBcast               1.3.6.1.4.1.2.6.19.2.2.3.2.1.6.  number   30\nibmMvsLinkMcast                    1.3.6.1.4.1.2.6.19.2.2.3.2.1.7.  number   30\nibmMvsLinkChecksumEnabled          1.3.6.1.4.1.2.6.19.2.2.3.2.1.8.  number   30\nibmMvsLinkArpSupport               1.3.6.1.4.1.2.6.19.2.2.3.2.1.9.  number   30\nibmMvsLinkMacAddress               1.3.6.1.4.1.2.6.19.2.2.3.2.1.10. string   30\nibmMvsLinkVlanId                   1.3.6.1.4.1.2.6.19.2.2.3.2.1.11. number   30\nibmMvsLinkVlanPriorityEnabled      1.3.6.1.4.1.2.6.19.2.2.3.2.1.12. number   30\nibmMvsLinkReadStorageSize          1.3.6.1.4.1.2.6.19.2.2.3.2.1.13. gauge    30\nibmMvsLinkInboundPerfType          1.3.6.1.4.1.2.6.19.2.2.3.2.1.14. number   30\nibmMvsLinkChecksumOffloadEnabled   1.3.6.1.4.1.2.6.19.2.2.3.2.1.15. number   30\nibmTcpipMvsLinkMcastTable          1.3.6.1.4.1.2.6.19.2.2.3.3.      table    0\nibmTcpipMvsLinkMcastEntry          1.3.6.1.4.1.2.6.19.2.2.3.3.1.    table    0\nibmMvsLinkMcastRefCount            1.3.6.1.4.1.2.6.19.2.2.3.3.1.2.  gauge    30\nibmMvsPktTraceTable                1.3.6.1.4.1.2.6.19.2.2.3.4.      table    0\nibmMvsPktTraceEntry                1.3.6.1.4.1.2.6.19.2.2.3.4.1.    table    0\nibmMvsPktTraceProto                1.3.6.1.4.1.2.6.19.2.2.3.4.1.1.  number   30\nibmMvsPktTraceSrcPort              1.3.6.1.4.1.2.6.19.2.2.3.4.1.2.  number   30\nibmMvsPktTraceDestPort             1.3.6.1.4.1.2.6.19.2.2.3.4.1.3.  number   30\nibmMvsPktTraceIpAddrType           1.3.6.1.4.1.2.6.19.2.2.3.4.1.4.  number   30\nibmMvsPktTraceIpAddr               1.3.6.1.4.1.2.6.19.2.2.3.4.1.5.  string   30\nibmMvsPktTraceIpAddrPrefixLen      1.3.6.1.4.1.2.6.19.2.2.3.4.1.6.  number   30\nibmMvsPktTraceLen                  1.3.6.1.4.1.2.6.19.2.2.3.4.1.7.  number   30\nibmMvsPktTraceIntfName             1.3.6.1.4.1.2.6.19.2.2.3.4.1.8.  display  30\nibmMvsPktTraceRecCount             1.3.6.1.4.1.2.6.19.2.2.3.4.1.9.  counter  30\nibmTcpipMvsIfTable                 1.3.6.1.4.1.2.6.19.2.2.3.5.      table    0\nibmTcpipMvsIfEntry                 1.3.6.1.4.1.2.6.19.2.2.3.5.1.    table    0\nibmMvsIfType                       1.3.6.1.4.1.2.6.19.2.2.3.5.1.1.  number   30\nibmMvsIfDeviceIndex                1.3.6.1.4.1.2.6.19.2.2.3.5.1.2.  gauge    30\nibmMvsIfFlag                       1.3.6.1.4.1.2.6.19.2.2.3.5.1.3.  number   30\nibmMvsIfNumber                     1.3.6.1.4.1.2.6.19.2.2.3.5.1.4.  number   30\nibmMvsIfIbmtrBcast                 1.3.6.1.4.1.2.6.19.2.2.3.5.1.5.  number   30\nibmMvsIfArpSupport                 1.3.6.1.4.1.2.6.19.2.2.3.5.1.6.  number   30\nibmMvsIfConfigRouterStatus         1.3.6.1.4.1.2.6.19.2.2.3.5.1.7.  number   30\nibmMvsIfActualRouterStatus         1.3.6.1.4.1.2.6.19.2.2.3.5.1.8.  number   30\nibmMvsIfDupAddrDetCount            1.3.6.1.4.1.2.6.19.2.2.3.5.1.9.  number   30\nibmMvsIfSrcVipaIntfName            1.3.6.1.4.1.2.6.19.2.2.3.5.1.10. display  30\nibmMvsIfConfigMtu                  1.3.6.1.4.1.2.6.19.2.2.3.5.1.11. number   30\nibmMvsIfVlanId                     1.3.6.1.4.1.2.6.19.2.2.3.5.1.12. number   30\nibmMvsIfReadStorageSize            1.3.6.1.4.1.2.6.19.2.2.3.5.1.13. gauge    30\nibmMvsIfInboundPerfType            1.3.6.1.4.1.2.6.19.2.2.3.5.1.14. number   30\nibmMvsIfChpid                      1.3.6.1.4.1.2.6.19.2.2.3.5.1.15. string   30\nibmMvsIfSecClass                   1.3.6.1.4.1.2.6.19.2.2.3.5.1.16. number   30\nibmTcpipMvsIfMcastTable            1.3.6.1.4.1.2.6.19.2.2.3.6.      table    0\nibmTcpipMvsIfMcastEntry            1.3.6.1.4.1.2.6.19.2.2.3.6.1.    table    0\nibmMvsIfMcastAddrType              1.3.6.1.4.1.2.6.19.2.2.3.6.1.1.  number   30\nibmMvsIfMcastAddr                  1.3.6.1.4.1.2.6.19.2.2.3.6.1.2.  string   30\nibmMvsIfMcastRefCount              1.3.6.1.4.1.2.6.19.2.2.3.6.1.3.  gauge    30\nibmTcpipMvsPortGroup               1.3.6.1.4.1.2.6.19.2.2.4.        table    0\nibmTcpipMvsPortTable               1.3.6.1.4.1.2.6.19.2.2.4.1.      table    0\nibmTcpipMvsPortEntry               1.3.6.1.4.1.2.6.19.2.2.4.1.1.    table    0\nibmMvsPortNumberLow                1.3.6.1.4.1.2.6.19.2.2.4.1.1.1.  number   30\nibmMvsPortNumberHigh               1.3.6.1.4.1.2.6.19.2.2.4.1.1.2.  number   30\nibmMvsPortProtocol                 1.3.6.1.4.1.2.6.19.2.2.4.1.1.3.  number   30\nibmMvsPortProcName                 1.3.6.1.4.1.2.6.19.2.2.4.1.1.4.  display  30\nibmMvsPortAutoLoggable             1.3.6.1.4.1.2.6.19.2.2.4.1.1.5.  number   30\nibmMvsPortDelayAcks                1.3.6.1.4.1.2.6.19.2.2.4.1.1.6.  number   30\nibmMvsPortOptMaxSegmentSize        1.3.6.1.4.1.2.6.19.2.2.4.1.1.7.  number   30\nibmMvsPortSharePort                1.3.6.1.4.1.2.6.19.2.2.4.1.1.8.  number   30\nibmMvsPortBindIpAddr               1.3.6.1.4.1.2.6.19.2.2.4.1.1.9.  internet 30\nibmMvsPortSAFResource              1.3.6.1.4.1.2.6.19.2.2.4.1.1.10. display  30\nibmMvsPortReuse                    1.3.6.1.4.1.2.6.19.2.2.4.1.1.11. number   30\nibmMvsPortBindIpAddressType        1.3.6.1.4.1.2.6.19.2.2.4.1.1.12. number   30\nibmMvsPortBindIpAddress            1.3.6.1.4.1.2.6.19.2.2.4.1.1.13. string   30\nibmMvsPortSharePortWlm             1.3.6.1.4.1.2.6.19.2.2.4.1.1.14. number   30\nibmTcpipMvsRouteGroup              1.3.6.1.4.1.2.6.19.2.2.5.        table    0\nibmTcpipMvsGatewayTable            1.3.6.1.4.1.2.6.19.2.2.5.1.      table    0\nibmTcpipMvsGatewayEntry            1.3.6.1.4.1.2.6.19.2.2.5.1.1.    table    0\nibmMvsGatewayMaximumRetransmitTime 1.3.6.1.4.1.2.6.19.2.2.5.1.1.1.  number   30\nibmMvsGatewayMinimumRetransmitTime 1.3.6.1.4.1.2.6.19.2.2.5.1.1.2.  number   30\nibmMvsGatewayRoundTripGain         1.3.6.1.4.1.2.6.19.2.2.5.1.1.3.  number   30\nibmMvsGatewayVarianceGain          1.3.6.1.4.1.2.6.19.2.2.5.1.1.4.  number   30\nibmMvsGatewayVarianceMultiplier    1.3.6.1.4.1.2.6.19.2.2.5.1.1.5.  number   30\nibmMvsGatewayDelayAcks             1.3.6.1.4.1.2.6.19.2.2.5.1.1.6.  number   30\nibmTcpipMvsRouteTable              1.3.6.1.4.1.2.6.19.2.2.5.2.      table    0\nibmTcpipMvsRouteEntry              1.3.6.1.4.1.2.6.19.2.2.5.2.1.    table    0\nibmMvsRouteDestType                1.3.6.1.4.1.2.6.19.2.2.5.2.1.1.  number   30\nibmMvsRouteDest                    1.3.6.1.4.1.2.6.19.2.2.5.2.1.2.  string   30\nibmMvsRoutePfxLen                  1.3.6.1.4.1.2.6.19.2.2.5.2.1.3.  number   30\nibmMvsRoutePolicy                  1.3.6.1.4.1.2.6.19.2.2.5.2.1.4.  object   30\nibmMvsRouteNextHopType             1.3.6.1.4.1.2.6.19.2.2.5.2.1.5.  number   30\nibmMvsRouteNextHop                 1.3.6.1.4.1.2.6.19.2.2.5.2.1.6.  string   30\nibmMvsRouteType                    1.3.6.1.4.1.2.6.19.2.2.5.2.1.7.  number   30\nibmMvsRouteProto                   1.3.6.1.4.1.2.6.19.2.2.5.2.1.8.  number   30\nibmMvsRouteAge                     1.3.6.1.4.1.2.6.19.2.2.5.2.1.9.  gauge    30\nibmMvsRouteMetric1                 1.3.6.1.4.1.2.6.19.2.2.5.2.1.10. number   30\nibmMvsRouteMtu                     1.3.6.1.4.1.2.6.19.2.2.5.2.1.11. number   30\nibmMvsRouteReplaceableFlag         1.3.6.1.4.1.2.6.19.2.2.5.2.1.12. number   30\nibmMvsRouteMaximumRetransmitTime   1.3.6.1.4.1.2.6.19.2.2.5.2.1.13. number   30\nibmMvsRouteMinimumRetransmitTime   1.3.6.1.4.1.2.6.19.2.2.5.2.1.14. number   30\nibmMvsRouteRoundTripGain           1.3.6.1.4.1.2.6.19.2.2.5.2.1.15. number   30\nibmMvsRouteVarianceGain            1.3.6.1.4.1.2.6.19.2.2.5.2.1.16. number   30\nibmMvsRouteVarianceMultiplier      1.3.6.1.4.1.2.6.19.2.2.5.2.1.17. number   30\nibmMvsRouteDelayAcks               1.3.6.1.4.1.2.6.19.2.2.5.2.1.18. number   30\nibmTcpipMvsAtmGroup                1.3.6.1.4.1.2.6.19.2.2.6.        table    0\nosasfChannelTable                  1.3.6.1.4.1.2.6.19.2.2.6.1.      table    0\nosasfChannelEntry                  1.3.6.1.4.1.2.6.19.2.2.6.1.1.    table    0\nibmMvsAtmOsasfChannelNumber        1.3.6.1.4.1.2.6.19.2.2.6.1.1.1.  number   10\nibmMvsAtmOsasfChannelType          1.3.6.1.4.1.2.6.19.2.2.6.1.1.2.  number   10\nibmMvsAtmOsasfChannelSubType       1.3.6.1.4.1.2.6.19.2.2.6.1.1.3.  number   10\nibmMvsAtmOsasfChannelMode          1.3.6.1.4.1.2.6.19.2.2.6.1.1.4.  number   10\nibmMvsAtmOsasfChannelHwModel       1.3.6.1.4.1.2.6.19.2.2.6.1.1.5.  number   10\nibmMvsAtmOsasfChannelState         1.3.6.1.4.1.2.6.19.2.2.6.1.1.6.  number   10\nibmMvsAtmOsasfChannelShared        1.3.6.1.4.1.2.6.19.2.2.6.1.1.7.  number   10\nibmMvsAtmOsasfChannelNumPorts      1.3.6.1.4.1.2.6.19.2.2.6.1.1.8.  number   10\nibmMvsAtmOsasfChannelDeterNodeDesc 1.3.6.1.4.1.2.6.19.2.2.6.1.1.9.  display  30\n* The following textual name can't be used unless the MIBDESC.DATA\n*  file is defined to have greater than 80 columns.\n* ibmMvsAtmOsasfChannelControlUnitNumber\n*                                  1.3.6.1.4.1.2.6.19.2.2.6.1.1.10. number   10\nibmMvsAtmOsasfChannelEcLevel       1.3.6.1.4.1.2.6.19.2.2.6.1.1.12. display  30\nibmMvsAtmOsasfChannelCurLparName   1.3.6.1.4.1.2.6.19.2.2.6.1.1.13. display  30\nibmMvsAtmOsasfChannelCurLparNum    1.3.6.1.4.1.2.6.19.2.2.6.1.1.14. number   10\nibmMvsAtmOsasfChannelManParnName   1.3.6.1.4.1.2.6.19.2.2.6.1.1.15. display  30\nibmMvsAtmOsasfChannelManParnNum    1.3.6.1.4.1.2.6.19.2.2.6.1.1.16. number   10\nibmMvsAtmOsasfChannelFlashLevel    1.3.6.1.4.1.2.6.19.2.2.6.1.1.19. display  30\nosasfPortTable                     1.3.6.1.4.1.2.6.19.2.2.6.2.      table    0\nosasfPortEntry                     1.3.6.1.4.1.2.6.19.2.2.6.2.1.    table    0\nibmMvsAtmOsasfPortNumber           1.3.6.1.4.1.2.6.19.2.2.6.2.1.1.  number   10\nibmMvsAtmOsasfPortType             1.3.6.1.4.1.2.6.19.2.2.6.2.1.2.  number   10\nibmMvsAtmOsasfPortHardwareState    1.3.6.1.4.1.2.6.19.2.2.6.2.1.3.  number   10\nibmMvsAtmOsasfPortMediaType        1.3.6.1.4.1.2.6.19.2.2.6.2.1.4.  number   10\nibmMvsAtmOsasfPortUniType          1.3.6.1.4.1.2.6.19.2.2.6.2.1.5.  number   10\nibmMvsAtmOsasfPortUniVersion       1.3.6.1.4.1.2.6.19.2.2.6.2.1.6.  number   10\nibmMvsAtmOsasfPortNetPrefix        1.3.6.1.4.1.2.6.19.2.2.6.2.1.7.  number   10\nibmMvsAtmOsasfPortNetPrefixPrefix  1.3.6.1.4.1.2.6.19.2.2.6.2.1.8.  string   10\nibmMvsAtmOsasfPortNetPrefixStatus  1.3.6.1.4.1.2.6.19.2.2.6.2.1.9.  number   10\nibmMvsAtmOsasfPortCodeLoadStatus   1.3.6.1.4.1.2.6.19.2.2.6.2.1.10. number   10\nibmMvsAtmOsasfPortMacAddrBurntIn   1.3.6.1.4.1.2.6.19.2.2.6.2.1.11. string   10\nibmMvsAtmOsasfPortMacAddrActive    1.3.6.1.4.1.2.6.19.2.2.6.2.1.12. string   10\nibmMvsAtmOsasfPortMaxPcmConnections 1.3.6.1.4.1.2.6.19.2.2.6.2.1.13. number  10\nibmMvsAtmOsasfPortPcmName          1.3.6.1.4.1.2.6.19.2.2.6.2.1.14. display  30\nibmMvsAtmOsasfPortAAL5InPackets    1.3.6.1.4.1.2.6.19.2.2.6.2.1.15. counter  10\nibmMvsAtmOsasfPortAAL5OutPackets   1.3.6.1.4.1.2.6.19.2.2.6.2.1.16. counter  10\nibmMvsAtmOsasfPortIpAddress        1.3.6.1.4.1.2.6.19.2.2.6.2.1.17. internet 10\nosasfPvcTable                      1.3.6.1.4.1.2.6.19.2.2.6.3.      table    0\nosasfPvcEntry                      1.3.6.1.4.1.2.6.19.2.2.6.3.1.    table    0\nibmMvsAtmOsasfPvcName              1.3.6.1.4.1.2.6.19.2.2.6.3.1.1.  display  30\nibmMvsAtmOsasfPvcBestEffort        1.3.6.1.4.1.2.6.19.2.2.6.3.1.2.  number   10\nibmMvsAtmOsasfPvcFwdPeakCellRate   1.3.6.1.4.1.2.6.19.2.2.6.3.1.3.  number   10\nibmMvsAtmOsasfPvcBwdPeakCellRate   1.3.6.1.4.1.2.6.19.2.2.6.3.1.4.  number   10\nibmMvsAtmOsasfPvcFwdsustainCellRate 1.3.6.1.4.1.2.6.19.2.2.6.3.1.5.  number  10\nibmMvsAtmOsasfPvcBwdsustainCellRate 1.3.6.1.4.1.2.6.19.2.2.6.3.1.6.  number  10\nibmMvsAtmOsasfPvcFwdCellBurstSize  1.3.6.1.4.1.2.6.19.2.2.6.3.1.7.  gauge    10\nibmMvsAtmOsasfPvcBwdCellBurstSize  1.3.6.1.4.1.2.6.19.2.2.6.3.1.8.  gauge    10\nibmMvsAtmOsasfPvcVpi               1.3.6.1.4.1.2.6.19.2.2.6.3.1.9.  number   10\nibmMvsAtmOsasfPvcVci               1.3.6.1.4.1.2.6.19.2.2.6.3.1.10. number   10\nibmMvsAtmOsasfPvcFwdMaxAal5PduSize 1.3.6.1.4.1.2.6.19.2.2.6.3.1.11. number   10\nibmMvsAtmOsasfPvcBwdMaxAal5PduSize 1.3.6.1.4.1.2.6.19.2.2.6.3.1.12. number   10\nibmMvsAtmSnaLeTable                1.3.6.1.4.1.2.6.19.2.2.6.4.      table    0\nibmMvsAtmSnaLeEntry                1.3.6.1.4.1.2.6.19.2.2.6.4.1.    table    0\nibmMvsAtmSnaLeLlcTi                1.3.6.1.4.1.2.6.19.2.2.6.4.1.1.  number   10\nibmMvsAtmSnaLeLlcT1                1.3.6.1.4.1.2.6.19.2.2.6.4.1.2.  number   10\nibmMvsAtmSnaLeLlcT2                1.3.6.1.4.1.2.6.19.2.2.6.4.1.3.  number   10\nibmMvsAtmSnaleMaxStations          1.3.6.1.4.1.2.6.19.2.2.6.4.1.4.  number   10\nibmMvsAtmSnaLeMaxSaps              1.3.6.1.4.1.2.6.19.2.2.6.4.1.5.  number   10\nibmMvsAtmSnaleMaxIn                1.3.6.1.4.1.2.6.19.2.2.6.4.1.6.  number   10\nibmMvsAtmSnaLeMaxOut               1.3.6.1.4.1.2.6.19.2.2.6.4.1.7.  number   10\nibmMvsAtmSnaLeCrsGroupAddress      1.3.6.1.4.1.2.6.19.2.2.6.4.1.8.  string   10\nibmMvsAtmSneLeUserData             1.3.6.1.4.1.2.6.19.2.2.6.4.1.9.  string   10\nibmMvsAtmSnaLeClientEnableState    1.3.6.1.4.1.2.6.19.2.2.6.4.1.10. number   10\nibmMvsAtmSnaLeBestEffortPeakRate   1.3.6.1.4.1.2.6.19.2.2.6.4.1.11. gauge    10\nibmMvsAtmSnaLeMaxLECConnections    1.3.6.1.4.1.2.6.19.2.2.6.4.1.12. number   10\nibmMvsAtmSnaLeTrEnableLoadBalancing 1.3.6.1.4.1.2.6.19.2.2.6.4.1.13. number  10\nibmMvsAtmSnaLeTrLoadBalancing      1.3.6.1.4.1.2.6.19.2.2.6.4.1.14. number   10\nibmMvsAtmSnaLeTrSessionDelay       1.3.6.1.4.1.2.6.19.2.2.6.4.1.15. number   10\nibmMvsAtmLecConfigTable            1.3.6.1.4.1.2.6.19.2.2.6.5.      table    0\nibmMvsAtmLecConfigEntry            1.3.6.1.4.1.2.6.19.2.2.6.5.1.    table    0\nibmMvsAtmLecConfigMode             1.3.6.1.4.1.2.6.19.2.2.6.5.1.1.  number   10\nibmMvsAtmLecConfigLanType          1.3.6.1.4.1.2.6.19.2.2.6.5.1.2.  number   10\nibmMvsAtmLecConfigMaxDataFrameSize 1.3.6.1.4.1.2.6.19.2.2.6.5.1.3.  number   10\nibmMvsAtmLecConfigLanName          1.3.6.1.4.1.2.6.19.2.2.6.5.1.4.  string   10\nibmMvsAtmLecConfigLesAtmAddress    1.3.6.1.4.1.2.6.19.2.2.6.5.1.5.  string   10\nibmMvsAtmLecControlTimeout         1.3.6.1.4.1.2.6.19.2.2.6.5.1.6.  number   10\nibmMvsAtmLecMaxUnknownFrameCount   1.3.6.1.4.1.2.6.19.2.2.6.5.1.7.  number   10\nibmMvsAtmLecMaxUnknownFrameTime    1.3.6.1.4.1.2.6.19.2.2.6.5.1.8.  number   10\nibmMvsAtmLecVccTimeoutPeriod       1.3.6.1.4.1.2.6.19.2.2.6.5.1.9.  number   10\nibmMvsAtmLecMaxRetryCount          1.3.6.1.4.1.2.6.19.2.2.6.5.1.10. number   10\nibmMvsAtmLecAgingTime              1.3.6.1.4.1.2.6.19.2.2.6.5.1.11. number   10\nibmMvsAtmLecForwardDelayTime       1.3.6.1.4.1.2.6.19.2.2.6.5.1.12. number   10\nibmMvsAtmLecExpectedArpResponseTime 1.3.6.1.4.1.2.6.19.2.2.6.5.1.13. number  10\nibmMvsAtmLecFlushTimeout           1.3.6.1.4.1.2.6.19.2.2.6.5.1.14. number   10\nibmMvsAtmLecPathSwitchingDelay     1.3.6.1.4.1.2.6.19.2.2.6.5.1.15. number   10\nibmMvsAtmLecLocalSegmentID         1.3.6.1.4.1.2.6.19.2.2.6.5.1.16. number   10\nibmMvsAtmLecMulticastSendType      1.3.6.1.4.1.2.6.19.2.2.6.5.1.17. number   10\nibmMvsAtmLecMulticastSendAvgRate   1.3.6.1.4.1.2.6.19.2.2.6.5.1.18. gauge    10\nibmMvsAtmLecMulticastSendPeakRate  1.3.6.1.4.1.2.6.19.2.2.6.5.1.19. gauge    10\nibmMvsAtmLecConnectionCompleteTimer 1.3.6.1.4.1.2.6.19.2.2.6.5.1.20. number   10\nibmMvsAtmLecPortName               1.3.6.1.4.1.2.6.19.2.2.6.5.1.21. display  30\nibmMvsAtmLecStatusTable            1.3.6.1.4.1.2.6.19.2.2.6.6.      table    0\nibmMvsAtmLecStatusEntry            1.3.6.1.4.1.2.6.19.2.2.6.6.1.    table    0\nibmMvsAtmLecPrimaryAtmAddress      1.3.6.1.4.1.2.6.19.2.2.6.6.1.1.  string   10\nibmMvsAtmLecID                     1.3.6.1.4.1.2.6.19.2.2.6.6.1.2.  number   10\nibmMvsAtmLecInterfaceState         1.3.6.1.4.1.2.6.19.2.2.6.6.1.3.  number   10\nibmMvsAtmLecLastFailureRespCode    1.3.6.1.4.1.2.6.19.2.2.6.6.1.4.  number   10\nibmMvsAtmLecLastFailureState       1.3.6.1.4.1.2.6.19.2.2.6.6.1.5.  number   10\nibmMvsAtmLecProtocol               1.3.6.1.4.1.2.6.19.2.2.6.6.1.6.  number   10\nibmMvsAtmLecVersion                1.3.6.1.4.1.2.6.19.2.2.6.6.1.7.  number   10\nibmMvsAtmLecTopologyChange         1.3.6.1.4.1.2.6.19.2.2.6.6.1.8.  number   10\nibmMvsAtmLecConfigServerAtmAddress 1.3.6.1.4.1.2.6.19.2.2.6.6.1.9.  string   10\nibmMvsAtmLecConfigSource           1.3.6.1.4.1.2.6.19.2.2.6.6.1.10. number   10\nibmMvsAtmLecActualLanType          1.3.6.1.4.1.2.6.19.2.2.6.6.1.11. number   10\nibmMvsAtmLecActualMaxDataFrameSize 1.3.6.1.4.1.2.6.19.2.2.6.6.1.12. number   10\nibmMvsAtmLecActualLanName          1.3.6.1.4.1.2.6.19.2.2.6.6.1.13. string   10\nibmMvsAtmLecAtmAddress             1.3.6.1.4.1.2.6.19.2.2.6.6.1.14. string   10\nibmMvsAtmLecProxyClient            1.3.6.1.4.1.2.6.19.2.2.6.6.1.15. number   10\nibmMvsAtmLecStatisticsTable        1.3.6.1.4.1.2.6.19.2.2.6.7.      table    0\nibmMvsAtmLecStatisticsEntry        1.3.6.1.4.1.2.6.19.2.2.6.7.1.    table    0\nibmMvsAtmLecArpRequestsOut         1.3.6.1.4.1.2.6.19.2.2.6.7.1.1.  counter  10\nibmMvsAtmLecArpRequestsIn          1.3.6.1.4.1.2.6.19.2.2.6.7.1.2.  counter  10\nibmMvsAtmLecArpRepliesOut          1.3.6.1.4.1.2.6.19.2.2.6.7.1.3.  counter  10\nibmMvsAtmLecArpRepliesIn           1.3.6.1.4.1.2.6.19.2.2.6.7.1.4.  counter  10\nibmMvsAtmLecControlFramesOut       1.3.6.1.4.1.2.6.19.2.2.6.7.1.5.  counter  10\nibmMvsAtmLecControlFramesIn        1.3.6.1.4.1.2.6.19.2.2.6.7.1.6.  counter  10\nibmMvsAtmLecSvcFailures            1.3.6.1.4.1.2.6.19.2.2.6.7.1.7.  counter  10\nibmMvsAtmLecServerTable            1.3.6.1.4.1.2.6.19.2.2.6.8.      table    0\nibmMvsAtmLecServerEntry            1.3.6.1.4.1.2.6.19.2.2.6.8.1.    table    0\nibmMvsAtmLecConfigDirectInterface  1.3.6.1.4.1.2.6.19.2.2.6.8.1.1.  number   10\nibmMvsAtmLecConfigDirectVPI        1.3.6.1.4.1.2.6.19.2.2.6.8.1.2.  number   10\nibmMvsAtmLecConfigDirectVCI        1.3.6.1.4.1.2.6.19.2.2.6.8.1.3.  number   10\nibmMvsAtmLecControlDirectInterface 1.3.6.1.4.1.2.6.19.2.2.6.8.1.4.  number   10\nibmMvsAtmLecControlDirectVPI       1.3.6.1.4.1.2.6.19.2.2.6.8.1.5.  number   10\nibmMvsAtmLecControlDirectVCI       1.3.6.1.4.1.2.6.19.2.2.6.8.1.6.  number   10\n* The following textual name can't be used unless the MIBDESC.DATA\n*  file is defined to have greater than 80 columns.\n* ibmMvsAtmLecControlDistributeInterface\n*                                  1.3.6.1.4.1.2.6.19.2.2.6.8.1.7.  number   10\nibmMvsAtmLecControlDistributeVPI   1.3.6.1.4.1.2.6.19.2.2.6.8.1.8.  number   10\nibmMvsAtmLecControlDistributeVCI   1.3.6.1.4.1.2.6.19.2.2.6.8.1.9.  number   10\nibmMvsAtmLecMulticastSendInterface 1.3.6.1.4.1.2.6.19.2.2.6.8.1.10. number   10\nibmMvsAtmLecMulticastSendVPI       1.3.6.1.4.1.2.6.19.2.2.6.8.1.11. number   10\nibmMvsAtmLecMulticastSendVCI       1.3.6.1.4.1.2.6.19.2.2.6.8.1.12. number   10\nibmMvsAtmLecMulticastFwdInterface  1.3.6.1.4.1.2.6.19.2.2.6.8.1.13. number   10\nibmMvsAtmLecMulticastFwdVPI        1.3.6.1.4.1.2.6.19.2.2.6.8.1.14. number   10\nibmMvsAtmLecMulticastFwdVCI        1.3.6.1.4.1.2.6.19.2.2.6.8.1.15. number   10\nibmMvsAtmLecMacAddressTable        1.3.6.1.4.1.2.6.19.2.2.6.9.      table    0\nibmMvsAtmLecMacAddressEntry        1.3.6.1.4.1.2.6.19.2.2.6.9.1.    table    0\nibmMvsAtmLecMacAddress             1.3.6.1.4.1.2.6.19.2.2.6.9.1.1.  string   10\nibmTcpipMvsTcpGroup                1.3.6.1.4.1.2.6.19.2.2.7.        table    0\nibmTcpipMvsTcpConnTable            1.3.6.1.4.1.2.6.19.2.2.7.1.      table    0\nibmTcpipMvsTcpConnEntry            1.3.6.1.4.1.2.6.19.2.2.7.1.1.    table    0\nibmMvsTcpConnLastActivity          1.3.6.1.4.1.2.6.19.2.2.7.1.1.1.  ticks    10\nibmMvsTcpConnBytesIn               1.3.6.1.4.1.2.6.19.2.2.7.1.1.2.  gauge    10\nibmMvsTcpConnBytesOut              1.3.6.1.4.1.2.6.19.2.2.7.1.1.3.  gauge    10\nibmMvsTcpConnOptions               1.3.6.1.4.1.2.6.19.2.2.7.1.1.6.  string   10\nibmMvsTcpConnOutBuffered           1.3.6.1.4.1.2.6.19.2.2.7.1.1.7.  gauge    10\nibmMvsTcpConnUsrSndNxt             1.3.6.1.4.1.2.6.19.2.2.7.1.1.8.  counter  10\nibmMvsTcpConnSndNxt                1.3.6.1.4.1.2.6.19.2.2.7.1.1.9.  counter  10\nibmMvsTcpConnSndUna                1.3.6.1.4.1.2.6.19.2.2.7.1.1.10. counter  10\nibmMvsTcpConnOutgoingPush          1.3.6.1.4.1.2.6.19.2.2.7.1.1.11. counter  10\nibmMvsTcpConnOutgoingUrg           1.3.6.1.4.1.2.6.19.2.2.7.1.1.12. counter  10\nibmMvsTcpConnOutgoingWinSeq        1.3.6.1.4.1.2.6.19.2.2.7.1.1.13. counter  10\nibmMvsTcpConnInBuffered            1.3.6.1.4.1.2.6.19.2.2.7.1.1.16. gauge    10\nibmMvsTcpConnRcvNxt                1.3.6.1.4.1.2.6.19.2.2.7.1.1.17. counter  10\nibmMvsTcpConnUsrRcvNxt             1.3.6.1.4.1.2.6.19.2.2.7.1.1.18. counter  10\nibmMvsTcpConnIncomingPush          1.3.6.1.4.1.2.6.19.2.2.7.1.1.19. counter  10\nibmMvsTcpConnIncomingUrg           1.3.6.1.4.1.2.6.19.2.2.7.1.1.20. counter  10\nibmMvsTcpConnIncomingWinSeq        1.3.6.1.4.1.2.6.19.2.2.7.1.1.21. counter  10\nibmMvsTcpConnReXmt                 1.3.6.1.4.1.2.6.19.2.2.7.1.1.22. number   10\nibmMvsTcpConnMaxSndWnd             1.3.6.1.4.1.2.6.19.2.2.7.1.1.23. gauge    10\nibmMvsTcpConnReXmtCount            1.3.6.1.4.1.2.6.19.2.2.7.1.1.24. number   10\nibmMvsTcpConnCongestionWnd         1.3.6.1.4.1.2.6.19.2.2.7.1.1.25. gauge    10\nibmMvsTcpConnSSThresh              1.3.6.1.4.1.2.6.19.2.2.7.1.1.26. gauge    10\nibmMvsTcpConnRoundTripTime         1.3.6.1.4.1.2.6.19.2.2.7.1.1.27. gauge    10\nibmMvsTcpConnRoundTripVariance     1.3.6.1.4.1.2.6.19.2.2.7.1.1.28. gauge    10\nibmMvsTcpConnInitSndSeq            1.3.6.1.4.1.2.6.19.2.2.7.1.1.29. gauge    10\nibmMvsTcpConnInitRcvSeq            1.3.6.1.4.1.2.6.19.2.2.7.1.1.30. gauge    10\nibmMvsTcpConnSendMSS               1.3.6.1.4.1.2.6.19.2.2.7.1.1.31. gauge    10\nibmMvsTcpConnSndWl1                1.3.6.1.4.1.2.6.19.2.2.7.1.1.32. counter  10\nibmMvsTcpConnSndWl2                1.3.6.1.4.1.2.6.19.2.2.7.1.1.33. counter  10\nibmMvsTcpConnSndWnd                1.3.6.1.4.1.2.6.19.2.2.7.1.1.34. gauge    10\nibmMvsTcpConnRcvBufSize            1.3.6.1.4.1.2.6.19.2.2.7.1.1.36. gauge    10\nibmMvsTcpConnResourceName          1.3.6.1.4.1.2.6.19.2.2.7.1.1.37. display  30\nibmMvsTcpConnSubtask               1.3.6.1.4.1.2.6.19.2.2.7.1.1.38. gauge    10\nibmMvsTcpConnResourceId            1.3.6.1.4.1.2.6.19.2.2.7.1.1.39. gauge    10\nibmMvsTcpConnSockOpt               1.3.6.1.4.1.2.6.19.2.2.7.1.1.40. string   10\nibmMvsTcpConnRttSeq                1.3.6.1.4.1.2.6.19.2.2.7.1.1.44. counter  10\nibmMvsTcpConnTargetAppl            1.3.6.1.4.1.2.6.19.2.2.7.1.1.48. display  10\nibmMvsTcpConnLuName                1.3.6.1.4.1.2.6.19.2.2.7.1.1.49. display  10\nibmMvsTcpConnClientUserId          1.3.6.1.4.1.2.6.19.2.2.7.1.1.50. display  10\nibmMvsTcpConnLogMode               1.3.6.1.4.1.2.6.19.2.2.7.1.1.51. display  10\nibmMvsTcpConnProto                 1.3.6.1.4.1.2.6.19.2.2.7.1.1.52. string   10\nibmMvsTcpConnDupacks               1.3.6.1.4.1.2.6.19.2.2.7.1.1.53. gauge    10\nibmMvsTcpConnOptMaxSegmentSize     1.3.6.1.4.1.2.6.19.2.2.7.1.1.54. number   10\nibmMvsTcpConnClusterConnFlag       1.3.6.1.4.1.2.6.19.2.2.7.1.1.55. string   10\nibmMvsTcpConnInSegs                1.3.6.1.4.1.2.6.19.2.2.7.1.1.56. counter  10\nibmMvsTcpConnOutSegs               1.3.6.1.4.1.2.6.19.2.2.7.1.1.57. counter  10\nibmMvsTcpConnDSField               1.3.6.1.4.1.2.6.19.2.2.7.1.1.58. string   10\nibmMvsTcpConnSndBufSize            1.3.6.1.4.1.2.6.19.2.2.7.1.1.59. gauge    10\nibmMvsTcpConnAcceptCount           1.3.6.1.4.1.2.6.19.2.2.7.1.1.60. counter  10\nibmMvsTcpConnExceedBacklog         1.3.6.1.4.1.2.6.19.2.2.7.1.1.61. number   10\nibmMvsTcpConnCurrBacklog           1.3.6.1.4.1.2.6.19.2.2.7.1.1.62. number   10\nibmMvsTcpConnMaxBacklog            1.3.6.1.4.1.2.6.19.2.2.7.1.1.63. number   10\nibmMvsTcpConnWindowScale           1.3.6.1.4.1.2.6.19.2.2.7.1.1.64. number   10\nibmMvsTcpConnTimeStamp             1.3.6.1.4.1.2.6.19.2.2.7.1.1.65. number   10\nibmMvsTcpConnServerResourceId      1.3.6.1.4.1.2.6.19.2.2.7.1.1.66. gauge    10\nibmMvsTcpConnsClosed               1.3.6.1.4.1.2.6.19.2.2.7.2.      counter  10\nibmMvsTcpPassiveDrops              1.3.6.1.4.1.2.6.19.2.2.7.3.      counter  10\nibmMvsTcpTimeWaitReused            1.3.6.1.4.1.2.6.19.2.2.7.4.      counter  10\nibmMvsTcpPredictAck                1.3.6.1.4.1.2.6.19.2.2.7.5.      counter  10\nibmMvsTcpPredictData               1.3.6.1.4.1.2.6.19.2.2.7.6.      counter  10\nibmMvsTcpInDupAck                  1.3.6.1.4.1.2.6.19.2.2.7.7.      counter  10\nibmMvsTcpInBadSum                  1.3.6.1.4.1.2.6.19.2.2.7.8.      counter  10\nibmMvsTcpInBadLen                  1.3.6.1.4.1.2.6.19.2.2.7.9.      counter  10\nibmMvsTcpInShort                   1.3.6.1.4.1.2.6.19.2.2.7.10.     counter  10\nibmMvsTcpInPawsDrop                1.3.6.1.4.1.2.6.19.2.2.7.11.     counter  10\nibmMvsTcpInAllBeforeWin            1.3.6.1.4.1.2.6.19.2.2.7.12.     counter  10\nibmMvsTcpInSomeBeforeWin           1.3.6.1.4.1.2.6.19.2.2.7.13.     counter  10\nibmMvsTcpInAllAfterWin             1.3.6.1.4.1.2.6.19.2.2.7.14.     counter  10\nibmMvsTcpInSomeAfterWin            1.3.6.1.4.1.2.6.19.2.2.7.15.     counter  10\nibmMvsTcpInOutOfOrder              1.3.6.1.4.1.2.6.19.2.2.7.16.     counter  10\nibmMvsTcpInAfterClose              1.3.6.1.4.1.2.6.19.2.2.7.17.     counter  10\nibmMvsTcpInWinProbes               1.3.6.1.4.1.2.6.19.2.2.7.18.     counter  10\nibmMvsTcpInWinUpdates              1.3.6.1.4.1.2.6.19.2.2.7.19.     counter  10\nibmMvsTcpOutWinUpdates             1.3.6.1.4.1.2.6.19.2.2.7.20.     counter  10\nibmMvsTcpOutDelayAcks              1.3.6.1.4.1.2.6.19.2.2.7.21.     counter  10\nibmMvsTcpOutWinProbes              1.3.6.1.4.1.2.6.19.2.2.7.22.     counter  10\nibmMvsTcpRxmtTimers                1.3.6.1.4.1.2.6.19.2.2.7.23.     counter  10\nibmMvsTcpRxmtDrops                 1.3.6.1.4.1.2.6.19.2.2.7.24.     counter  10\nibmMvsTcpPMTURxmts                 1.3.6.1.4.1.2.6.19.2.2.7.25.     counter  10\nibmMvsTcpPMTUErrors                1.3.6.1.4.1.2.6.19.2.2.7.26.     counter  10\nibmMvsTcpProbeDrops                1.3.6.1.4.1.2.6.19.2.2.7.27.     counter  10\nibmMvsTcpKeepAliveProbes           1.3.6.1.4.1.2.6.19.2.2.7.28.     counter  10\nibmMvsTcpKeepAliveDrops            1.3.6.1.4.1.2.6.19.2.2.7.29.     counter  10\nibmMvsTcpFinwait2Drops             1.3.6.1.4.1.2.6.19.2.2.7.30.     counter  10\nibmTcpipMvsTcpListenerTable        1.3.6.1.4.1.2.6.19.2.2.7.31.     table    0\nibmTcpipMvsTcpListenerEntry        1.3.6.1.4.1.2.6.19.2.2.7.31.1.   table    0\nibmMvsTcpListenerResourceId        1.3.6.1.4.1.2.6.19.2.2.7.31.1.1. gauge    30\nibmMvsTcpListenerLocalAddrType     1.3.6.1.4.1.2.6.19.2.2.7.31.1.2. number   30\nibmMvsTcpListenerLocalAddr         1.3.6.1.4.1.2.6.19.2.2.7.31.1.3. string   30\nibmMvsTcpListenerLocalPort         1.3.6.1.4.1.2.6.19.2.2.7.31.1.4. number   30\nibmMvsTcpListenerRemoteAddrType    1.3.6.1.4.1.2.6.19.2.2.7.31.1.5. number   30\nibmMvsTcpListenerRemoteAddr        1.3.6.1.4.1.2.6.19.2.2.7.31.1.6. string   30\nibmMvsTcpListenerRemotePort        1.3.6.1.4.1.2.6.19.2.2.7.31.1.7. number   30\nibmMvsTcpListenerAcceptCount       1.3.6.1.4.1.2.6.19.2.2.7.31.1.8. counter  30\nibmMvsTcpListenerExceedBacklog     1.3.6.1.4.1.2.6.19.2.2.7.31.1.9. number   30\nibmMvsTcpListenerCurrBacklog       1.3.6.1.4.1.2.6.19.2.2.7.31.1.10. number  30\nibmMvsTcpListenerMaxBacklog        1.3.6.1.4.1.2.6.19.2.2.7.31.1.11. number  30\nibmMvsTcpListenerResourceName      1.3.6.1.4.1.2.6.19.2.2.7.31.1.12. display 30\nibmMvsTcpListenerCurrConns         1.3.6.1.4.1.2.6.19.2.2.7.31.1.13. gauge   30\nibmMvsTcpListenerTimeouts          1.3.6.1.4.1.2.6.19.2.2.7.31.1.14. counter 30\nibmMvsTcpListenerAge               1.3.6.1.4.1.2.6.19.2.2.7.31.1.15. gauge   30\nibmTcpipMvsTcpConnectionTable      1.3.6.1.4.1.2.6.19.2.2.7.32.      table   0\nibmTcpipMvsTcpConnectionEntry      1.3.6.1.4.1.2.6.19.2.2.7.32.1.    table   0\nibmMvsTcpConnectionInSegs          1.3.6.1.4.1.2.6.19.2.2.7.32.1.1.  counter 30\nibmMvsTcpConnectionOutSegs         1.3.6.1.4.1.2.6.19.2.2.7.32.1.3.  counter 30\nibmMvsTcpConnectionInOctets        1.3.6.1.4.1.2.6.19.2.2.7.32.1.5.  counter 30\nibmMvsTcpConnectionOutOctets       1.3.6.1.4.1.2.6.19.2.2.7.32.1.7.  counter 30\nibmMvsTcpConnectionAge             1.3.6.1.4.1.2.6.19.2.2.7.32.1.9.  ticks   30\nibmMvsTcpConnectionLastActivity    1.3.6.1.4.1.2.6.19.2.2.7.32.1.10. ticks   30\nibmMvsTcpConnectionResourceName    1.3.6.1.4.1.2.6.19.2.2.7.32.1.11. display 30\nibmMvsTcpConnectionResourceId      1.3.6.1.4.1.2.6.19.2.2.7.32.1.12. gauge   30\nibmMvsTcpConnectionSockOpt         1.3.6.1.4.1.2.6.19.2.2.7.32.1.13. string  30\nibmMvsTcpConnectionPolicyAction    1.3.6.1.4.1.2.6.19.2.2.7.32.1.14. display 30\nibmMvsTcpConnectionPolicyRule      1.3.6.1.4.1.2.6.19.2.2.7.32.1.15. display 30\nibmMvsTcpConnectionServerResrcId   1.3.6.1.4.1.2.6.19.2.2.7.32.1.16. gauge   30\nibmMvsTcpConnectionApplName        1.3.6.1.4.1.2.6.19.2.2.7.32.1.17. display 30\nibmMvsTcpConnectionLuName          1.3.6.1.4.1.2.6.19.2.2.7.32.1.18. display 30\nibmMvsTcpConnectionLogMode         1.3.6.1.4.1.2.6.19.2.2.7.32.1.19. display 30\nibmMvsTcpConnectionProto           1.3.6.1.4.1.2.6.19.2.2.7.32.1.20. string  30\nibmMvsTcpConnectionTtlsPolStat     1.3.6.1.4.1.2.6.19.2.2.7.32.1.21. number  30\nibmMvsTcpConnectionTtlsConnStat    1.3.6.1.4.1.2.6.19.2.2.7.32.1.22. number  30\nibmMvsTcpConnectionTtlsSslProt     1.3.6.1.4.1.2.6.19.2.2.7.32.1.23. number  30\nibmMvsTcpConnectionTtlsNegCipher   1.3.6.1.4.1.2.6.19.2.2.7.32.1.24. display 30\nibmMvsTcpConnectionTtlsSecType     1.3.6.1.4.1.2.6.19.2.2.7.32.1.25. number  30\nibmMvsTcpConnectionTtlsPartUID     1.3.6.1.4.1.2.6.19.2.2.7.32.1.26. display 30\nibmMvsTcpListenerTableLastChange   1.3.6.1.4.1.2.6.19.2.2.7.33.      ticks   30\nibmTcpipMvsUdpGroup                1.3.6.1.4.1.2.6.19.2.2.8.        table    0\nibmTcpipMvsUdpTable                1.3.6.1.4.1.2.6.19.2.2.8.1.      table    0\nibmTcpipMvsUdpEntry                1.3.6.1.4.1.2.6.19.2.2.8.1.1.    table    0\nibmMvsUdpLastAct                   1.3.6.1.4.1.2.6.19.2.2.8.1.1.1.  ticks    10\nibmMvsUdpIpOpts                    1.3.6.1.4.1.2.6.19.2.2.8.1.1.3.  string   10\nibmMvsUdpDgramIn                   1.3.6.1.4.1.2.6.19.2.2.8.1.1.4.  counter  10\nibmMvsUdpBytesIn                   1.3.6.1.4.1.2.6.19.2.2.8.1.1.5.  counter  10\nibmMvsUdpDgramOut                  1.3.6.1.4.1.2.6.19.2.2.8.1.1.6.  counter  10\nibmMvsUdpBytesOut                  1.3.6.1.4.1.2.6.19.2.2.8.1.1.7.  counter  10\nibmMvsUdpResourceName              1.3.6.1.4.1.2.6.19.2.2.8.1.1.8.  display  30\nibmMvsUdpSubtask                   1.3.6.1.4.1.2.6.19.2.2.8.1.1.9.  gauge    10\nibmMvsUdpResourceId                1.3.6.1.4.1.2.6.19.2.2.8.1.1.10. gauge    10\nibmMvsUdpSockOpt                   1.3.6.1.4.1.2.6.19.2.2.8.1.1.11. string   10\nibmMvsUdpSendLim                   1.3.6.1.4.1.2.6.19.2.2.8.1.1.12. gauge    10\nibmMvsUdpRecvLim                   1.3.6.1.4.1.2.6.19.2.2.8.1.1.13. gauge    10\nibmMvsUdpEntryState                1.3.6.1.4.1.2.6.19.2.2.8.1.1.14. number   10\nibmMvsUdpMcastTTL                  1.3.6.1.4.1.2.6.19.2.2.8.1.1.15. number   10\nibmMvsUdpMcastLoopback             1.3.6.1.4.1.2.6.19.2.2.8.1.1.16. number   10\nibmMvsUdpMcastLinkAddr             1.3.6.1.4.1.2.6.19.2.2.8.1.1.17. internet 10\nibmMvsUdpDSField                   1.3.6.1.4.1.2.6.19.2.2.8.1.1.18. string   10\nibmTcpipMvsUdpMcastRecvTable       1.3.6.1.4.1.2.6.19.2.2.8.2.      table    0\nibmTcpipMvsUdpMcastRecvEntry       1.3.6.1.4.1.2.6.19.2.2.8.2.1.    table    0\nibmMvsUdpMcastRecvLinkAddr         1.3.6.1.4.1.2.6.19.2.2.8.2.1.4.  internet 20\nibmTcpipMvsUdpEndpointTable        1.3.6.1.4.1.2.6.19.2.2.8.3.      table    0\nibmTcpipMvsUdpEndpointEntry        1.3.6.1.4.1.2.6.19.2.2.8.3.1.    table    0\nibmMvsUdpEndpointInDatagrams       1.3.6.1.4.1.2.6.19.2.2.8.3.1.1.  counter  30\nibmMvsUdpEndpointOutDatagrams      1.3.6.1.4.1.2.6.19.2.2.8.3.1.3.  counter  30\nibmMvsUdpEndpointInOctets          1.3.6.1.4.1.2.6.19.2.2.8.3.1.5.  counter  30\nibmMvsUdpEndpointOutOctets         1.3.6.1.4.1.2.6.19.2.2.8.3.1.7.  counter  30\nibmMvsUdpEndpointLastActivity      1.3.6.1.4.1.2.6.19.2.2.8.3.1.9.  ticks    30\nibmMvsUdpEndpointResourceName      1.3.6.1.4.1.2.6.19.2.2.8.3.1.10. display  30\nibmMvsUdpEndpointSockOpt           1.3.6.1.4.1.2.6.19.2.2.8.3.1.11. string   30\nibmMvsUdpEndpointState             1.3.6.1.4.1.2.6.19.2.2.8.3.1.12. number   30\nibmMvsUdpEndpointMcastHopLim       1.3.6.1.4.1.2.6.19.2.2.8.3.1.13. number   30\nibmMvsUdpEndpointMcastIntfName     1.3.6.1.4.1.2.6.19.2.2.8.3.1.14. display  30\nibmTcpipMvsUdpEndpMcastTable       1.3.6.1.4.1.2.6.19.2.2.8.2.      table    0\nibmTcpipMvsUdpEndpMcastEntry       1.3.6.1.4.1.2.6.19.2.2.8.2.1.    table    0\nibmMvsUdpEndpMcastLocalAddrType    1.3.6.1.4.1.2.6.19.2.2.8.2.1.1.  number   30\nibmMvsUdpEndpMcastLocalAddr        1.3.6.1.4.1.2.6.19.2.2.8.2.1.2.  string   30\nibmMvsUdpEndpMcastLocalPort        1.3.6.1.4.1.2.6.19.2.2.8.2.1.3.  number   30\nibmMvsUdpEndpMcastInstance         1.3.6.1.4.1.2.6.19.2.2.8.2.1.4.  gauge    30\nibmMvsUdpEndpMcastAddrType         1.3.6.1.4.1.2.6.19.2.2.8.2.1.5.  number   30\nibmMvsUdpEndpMcastAddr             1.3.6.1.4.1.2.6.19.2.2.8.2.1.6.  string   30\nibmMvsUdpEndpMcastRecvIntfName     1.3.6.1.4.1.2.6.19.2.2.8.2.1.7.  display  30\nibmTcpipMvsIpGroup                 1.3.6.1.4.1.2.6.19.2.2.9.        table    0\nibmMvsIpInDevLayerCalls            1.3.6.1.4.1.2.6.19.2.2.9.1.      counter  10\nibmMvsIpInUnpackErrors             1.3.6.1.4.1.2.6.19.2.2.9.2.      counter  10\nibmMvsIpInDiscardsMemory           1.3.6.1.4.1.2.6.19.2.2.9.3.      counter  10\nibmMvsIpOutDiscardsDlcSynch        1.3.6.1.4.1.2.6.19.2.2.9.4.      counter  10\nibmMvsIpOutDiscardsDlcAsynch       1.3.6.1.4.1.2.6.19.2.2.9.5.      counter  10\nibmMvsIpOutDiscardsMemory          1.3.6.1.4.1.2.6.19.2.2.9.6.      counter  10\nibmTcpipMvsOsaExpGroup             1.3.6.1.4.1.2.6.19.2.2.10.       table    0\nosaexpChannelTable                 1.3.6.1.4.1.2.6.19.2.2.10.1.     table    0\nosaexpChannelEntry                 1.3.6.1.4.1.2.6.19.2.2.10.1.1.   table    0\nibmMvsOsaExpChannelNumber          1.3.6.1.4.1.2.6.19.2.2.10.1.1.1. number   30\nibmMvsOsaExpChannelType            1.3.6.1.4.1.2.6.19.2.2.10.1.1.2. number   30\nibmMvsOsaExpChannelSubType         1.3.6.1.4.1.2.6.19.2.2.10.1.1.3. number   30\nibmMvsOsaExpChannelMode            1.3.6.1.4.1.2.6.19.2.2.10.1.1.4. number   30\nibmMvsOsaExpChannelState           1.3.6.1.4.1.2.6.19.2.2.10.1.1.5. number   30\nibmMvsOsaExpChannelShared          1.3.6.1.4.1.2.6.19.2.2.10.1.1.6. number   30\nibmMvsOsaExpChannelNumPorts        1.3.6.1.4.1.2.6.19.2.2.10.1.1.7. number   30\nibmMvsOsaExpChannelDeterNodeDesc   1.3.6.1.4.1.2.6.19.2.2.10.1.1.8. string   30\nibmMvsOsaExpChannelControlUnitNumber 1.3.6.1.4.1.2.6.19.2.2.10.1.1.9. string 30\nibmMvsOsaExpChannelCodeLevel       1.3.6.1.4.1.2.6.19.2.2.10.1.1.10. display 30\nibmMvsOsaExpChannelCurLparName     1.3.6.1.4.1.2.6.19.2.2.10.1.1.11. display 30\nibmMvsOsaExpChannelCurLparNum      1.3.6.1.4.1.2.6.19.2.2.10.1.1.12. number  30\nibmMvsOsaExpChannelManLparName     1.3.6.1.4.1.2.6.19.2.2.10.1.1.13. display 30\nibmMvsOsaExpChannelManLparNum      1.3.6.1.4.1.2.6.19.2.2.10.1.1.14. number  30\nibmMvsOsaExpChannelPCIBusUtil1Min  1.3.6.1.4.1.2.6.19.2.2.10.1.1.15. number  30\nibmMvsOsaExpChannelProcessorUtil1Min 1.3.6.1.4.1.2.6.19.2.2.10.1.1.16. number 30\nibmMvsOsaExpChannelPCIBusUtil5Min  1.3.6.1.4.1.2.6.19.2.2.10.1.1.17. number  30\nibmMvsOsaExpChannelProcessorUtil5Min 1.3.6.1.4.1.2.6.19.2.2.10.1.1.18. number 30\nibmMvsOsaExpChannelPCIBusUtilHour  1.3.6.1.4.1.2.6.19.2.2.10.1.1.19. number  30\nibmMvsOsaExpChannelProcessorUtilHour 1.3.6.1.4.1.2.6.19.2.2.10.1.1.20. number 30\nosaexpPerfTable                    1.3.6.1.4.1.2.6.19.2.2.10.2.     table    0\nosaexpPerfEntry                    1.3.6.1.4.1.2.6.19.2.2.10.2.1.   table    0\nibmMvsOsaExpPerfLparNum            1.3.6.1.4.1.2.6.19.2.2.10.2.1.1. number   30\nibmMvsOsaExpPerfProcessorUtil1Min  1.3.6.1.4.1.2.6.19.2.2.10.2.1.2. number   30\nibmMvsOsaExpPerfInKbytesRate1Min   1.3.6.1.4.1.2.6.19.2.2.10.2.1.3. gauge    30\nibmMvsOsaExpPerfOutKbytesRate1Min  1.3.6.1.4.1.2.6.19.2.2.10.2.1.4. gauge    30\nibmMvsOsaExpPerfProcessorUtil5Min  1.3.6.1.4.1.2.6.19.2.2.10.2.1.5. number   30\nibmMvsOsaExpPerfInKbytesRate5Min   1.3.6.1.4.1.2.6.19.2.2.10.2.1.6. gauge    30\nibmMvsOsaExpPerfOutKbytesRate5Min  1.3.6.1.4.1.2.6.19.2.2.10.2.1.7. gauge    30\nibmMvsOsaExpPerfProcessorUtilHour  1.3.6.1.4.1.2.6.19.2.2.10.2.1.8. number   30\nibmMvsOsaExpPerfInKbytesRateHour   1.3.6.1.4.1.2.6.19.2.2.10.2.1.9. gauge    30\nibmMvsOsaExpPerfOutKbytesRateHour  1.3.6.1.4.1.2.6.19.2.2.10.2.1.10. gauge   30\nosaexpEthPortTable                 1.3.6.1.4.1.2.6.19.2.2.10.3.     table    0\nosaexpEthPortEntry                 1.3.6.1.4.1.2.6.19.2.2.10.3.1.   table    0\nibmMvsOsaExpEthPortNumber          1.3.6.1.4.1.2.6.19.2.2.10.3.1.1. number   30\nibmMvsOsaExpEthPortType            1.3.6.1.4.1.2.6.19.2.2.10.3.1.2. number   30\nibmMvsOsaExpEthPortHardwareState   1.3.6.1.4.1.2.6.19.2.2.10.3.1.3. number   30\nibmMvsOsaExpEthPortServiceMode     1.3.6.1.4.1.2.6.19.2.2.10.3.1.4. number   30\nibmMvsOsaExpEthPortDisabledStatus  1.3.6.1.4.1.2.6.19.2.2.10.3.1.5. string   30\nibmMvsOsaExpEthPortConfigName      1.3.6.1.4.1.2.6.19.2.2.10.3.1.6. display  30\nibmMvsOsaExpEthPortConfigSpeed     1.3.6.1.4.1.2.6.19.2.2.10.3.1.7. number   30\nibmMvsOsaExpEthPortActiveSpeed     1.3.6.1.4.1.2.6.19.2.2.10.3.1.8. number   30\nibmMvsOsaExpEthPortMacAddrActive   1.3.6.1.4.1.2.6.19.2.2.10.3.1.9. string   30\nibmMvsOsaExpEthPortMacAddrBurntIn  1.3.6.1.4.1.2.6.19.2.2.10.3.1.10. string  30\nibmMvsOsaExpEthPortUserData        1.3.6.1.4.1.2.6.19.2.2.10.3.1.11. display 30\nibmMvsOsaExpEthPortOutPackets      1.3.6.1.4.1.2.6.19.2.2.10.3.1.12. gauge   30\nibmMvsOsaExpEthPortInPackets       1.3.6.1.4.1.2.6.19.2.2.10.3.1.13. gauge   30\nibmMvsOsaExpEthPortInGroupFrames   1.3.6.1.4.1.2.6.19.2.2.10.3.1.14. gauge   30\nibmMvsOsaExpEthPortInBroadcastFrames 1.3.6.1.4.1.2.6.19.2.2.10.3.1.15. gauge 30\nibmMvsOsaExpEthPortName            1.3.6.1.4.1.2.6.19.2.2.10.3.1.16. display  30\nibmMvsOsaExpEthPortInUnknownIPFrames 1.3.6.1.4.1.2.6.19.2.2.10.3.1.17. gauge  30\nibmMvsOsaExpEthPortGroupMacAddrs   1.3.6.1.4.1.2.6.19.2.2.10.3.1.18. string   30\nosaexpEthSnaTable                  1.3.6.1.4.1.2.6.19.2.2.10.4.     table    0\nosaexpEthSnaEntry                  1.3.6.1.4.1.2.6.19.2.2.10.4.1.   table    0\nibmMvsOsaExpEthSnaInactTimer       1.3.6.1.4.1.2.6.19.2.2.10.4.1.1. number   30\nibmMvsOsaExpEthSnaRespTimer        1.3.6.1.4.1.2.6.19.2.2.10.4.1.2. number   30\nibmMvsOsaExpEthSnaAckTimer         1.3.6.1.4.1.2.6.19.2.2.10.4.1.3. number   30\nibmMvsOsaExpEthSnaMaxIFramesBeforeAck 1.3.6.1.4.1.2.6.19.2.2.10.4.1.4. number 30\nibmMvsOsaExpEthSnaMaxTransmitWindow 1.3.6.1.4.1.2.6.19.2.2.10.4.1.5. number  30\nibmTcpipMvsDVIPAGroup              1.3.6.1.4.1.2.6.19.2.2.11.       table    0\nibmMvsDVIPATable                   1.3.6.1.4.1.2.6.19.2.2.11.1.     table    0\nibmMvsDVIPAEntry                   1.3.6.1.4.1.2.6.19.2.2.11.1.1.   table    0\nibmMvsDVIPAIpAddrType              1.3.6.1.4.1.2.6.19.2.2.11.1.1.1. number   30\nibmMvsDVIPAIpAddr                  1.3.6.1.4.1.2.6.19.2.2.11.1.1.2. string   30\nibmMvsDVIPAMaskType                1.3.6.1.4.1.2.6.19.2.2.11.1.1.3. number   30\nibmMvsDVIPAMaskAddr                1.3.6.1.4.1.2.6.19.2.2.11.1.1.4. string   30\nibmMvsDVIPAStatus                  1.3.6.1.4.1.2.6.19.2.2.11.1.1.5. number   30\nibmMvsDVIPAOrigin                  1.3.6.1.4.1.2.6.19.2.2.11.1.1.6. number   30\nibmMvsDVIPARank                    1.3.6.1.4.1.2.6.19.2.2.11.1.1.7. number   30\nibmMvsDVIPADistributeStatus        1.3.6.1.4.1.2.6.19.2.2.11.1.1.8. number   30\nibmMvsDVIPAMoveable                1.3.6.1.4.1.2.6.19.2.2.11.1.1.9. number   30\nibmMvsDVIPAServMgrEnabled          1.3.6.1.4.1.2.6.19.2.2.11.1.1.10. number  30\nibmMvsDVIPAIntfName                1.3.6.1.4.1.2.6.19.2.2.11.1.1.11. display 30\nibmMvsDVIPARangeConfTable          1.3.6.1.4.1.2.6.19.2.2.11.2.     table    0\nibmMvsDVIPARangeConfEntry          1.3.6.1.4.1.2.6.19.2.2.11.2.1.   table    0\nibmMvsDVIPARangeConfIpAddrType     1.3.6.1.4.1.2.6.19.2.2.11.2.1.1. number   30\nibmMvsDVIPARangeConfIpAddr         1.3.6.1.4.1.2.6.19.2.2.11.2.1.2. string   30\nibmMvsDVIPARangeConfMaskType       1.3.6.1.4.1.2.6.19.2.2.11.2.1.3. number   30\nibmMvsDVIPARangeConfMaskAddr       1.3.6.1.4.1.2.6.19.2.2.11.2.1.4. string   30\nibmMvsDVIPARangeConfMoveable       1.3.6.1.4.1.2.6.19.2.2.11.2.1.5. number   30\nibmMvsDVIPARangeConfStatus         1.3.6.1.4.1.2.6.19.2.2.11.2.1.6. number   30\nibmMvsDVIPADistConfTable           1.3.6.1.4.1.2.6.19.2.2.11.3.     table    0\nibmMvsDVIPADistConfEntry           1.3.6.1.4.1.2.6.19.2.2.11.3.1.   table    0\nibmMvsDVIPADistConfIpAddrType      1.3.6.1.4.1.2.6.19.2.2.11.3.1.1. number   30\nibmMvsDVIPADistConfIpAddr          1.3.6.1.4.1.2.6.19.2.2.11.3.1.2. string   30\nibmMvsDVIPADistConfPort            1.3.6.1.4.1.2.6.19.2.2.11.3.1.3. number   30\n* The following textual name can't be used unless the MIBDESC.DATA\n*  file is defined to have greater than 80 columns.\n* ibmMvsDVIPADistConfTargetDynXcfIpAddrType\n*                                  1.3.6.1.4.1.2.6.19.2.2.11.3.1.4. number   30\nibmMvsDVIPADistConfTargetDynXcfIpAddr 1.3.6.1.4.1.2.6.19.2.2.11.3.1.5. string 30\nibmMvsDVIPADistConfStatus          1.3.6.1.4.1.2.6.19.2.2.11.3.1.6. number   30\nibmMvsDVIPADistConfTimedAffinity   1.3.6.1.4.1.2.6.19.2.2.11.3.1.7. number   30\nibmMvsDVIPADistConfSplxPortsEn     1.3.6.1.4.1.2.6.19.2.2.11.3.1.8. number   30\nibmMvsDVIPADistConfDistMethod      1.3.6.1.4.1.2.6.19.2.2.11.3.1.9. number   30\nibmMvsDVIPADistConfIntfName        1.3.6.1.4.1.2.6.19.2.2.11.3.1.10. display 30\nibmMvsDVIPAConnRoutingTable        1.3.6.1.4.1.2.6.19.2.2.11.4.     table    0\nibmMvsDVIPAConnRoutingEntry        1.3.6.1.4.1.2.6.19.2.2.11.4.1.   table    0\nibmMvsDVIPAConnPort                1.3.6.1.4.1.2.6.19.2.2.11.4.1.1. number   30\nibmMvsDVIPAConnRemoteIpAddrType    1.3.6.1.4.1.2.6.19.2.2.11.4.1.2. number   30\nibmMvsDVIPAConnRemoteIpAddr        1.3.6.1.4.1.2.6.19.2.2.11.4.1.3. string   30\nibmMvsDVIPAConnRemotePort          1.3.6.1.4.1.2.6.19.2.2.11.4.1.4. number   30\nibmMvsDVIPAConnDynXcfIpAddrType    1.3.6.1.4.1.2.6.19.2.2.11.4.1.5. number   30\nibmMvsDVIPAConnDynXcfIpAddr        1.3.6.1.4.1.2.6.19.2.2.11.4.1.6. string   30\nibmMvsDVIPAConnPolicyRuleName      1.3.6.1.4.1.2.6.19.2.2.11.4.1.7. display  30\nibmMvsDVIPAConnPolicyActionName    1.3.6.1.4.1.2.6.19.2.2.11.4.1.8. display  30\nibmMvsDVIPAConnRoute               1.3.6.1.4.1.2.6.19.2.2.11.4.1.9. object   30\nibmMvsDVIPADistPortTable           1.3.6.1.4.1.2.6.19.2.2.11.5.     table    0\nibmMvsDVIPADistPortEntry           1.3.6.1.4.1.2.6.19.2.2.11.5.1.   table    0\nibmMvsDVIPADistPortPort            1.3.6.1.4.1.2.6.19.2.2.11.5.1.1. number   30\n* The following textual name can't be used unless the MIBDESC.DATA\n*  file is defined to have greater than 80 columns.\n* ibmMvsDVIPADistPortTargetDynXcfIpAddrType\n*                                  1.3.6.1.4.1.2.6.19.2.2.11.5.1.2. number   30\nibmMvsDVIPADistPortTargetDynXcfIpAddr 1.3.6.1.4.1.2.6.19.2.2.11.5.1.3. string 30\nibmMvsDVIPADistPortReadyCount      1.3.6.1.4.1.2.6.19.2.2.11.5.1.4. gauge    30\nibmMvsDVIPADistPortTotalConn       1.3.6.1.4.1.2.6.19.2.2.11.5.1.5. counter  30\nibmMvsDVIPADistPortWlmWeight       1.3.6.1.4.1.2.6.19.2.2.11.5.1.6. gauge    30\nibmMvsDVIPADistPortDynamicFlag     1.3.6.1.4.1.2.6.19.2.2.11.5.1.7. number   30\nibmMvsDVIPADistPortFlag            1.3.6.1.4.1.2.6.19.2.2.11.5.1.8. string   30\nibmMvsDVIPADistPortTsr             1.3.6.1.4.1.2.6.19.2.2.11.5.1.9. number   30\nibmMvsDVIPADistPortTcsr            1.3.6.1.4.1.2.6.19.2.2.11.5.1.10. number   30\nibmMvsDVIPADistPortSef             1.3.6.1.4.1.2.6.19.2.2.11.5.1.11. number   30\nibmMvsDVIPADistPortCer             1.3.6.1.4.1.2.6.19.2.2.11.5.1.12. number   30\nibmMvsDVIPAServMgrMulticastIpAddrType     1.3.6.1.4.1.2.6.19.2.2.11.6. number 30\nibmMvsDVIPAServMgrMulticastIpAddr         1.3.6.1.4.1.2.6.19.2.2.11.7. string 30\nibmMvsDVIPAServMgrPort             1.3.6.1.4.1.2.6.19.2.2.11.8.     number   30\nibmMvsDVIPAServMgrPasswordSpecified 1.3.6.1.4.1.2.6.19.2.2.11.9.    number   30\nibmMvsDVIPATrapControl              1.3.6.1.4.1.2.6.19.2.2.11.10.   string   30\nibmMvsDVIPARangeConfigTable        1.3.6.1.4.1.2.6.19.2.2.11.11.    table    0\nibmMvsDVIPARangeConfigEntry        1.3.6.1.4.1.2.6.19.2.2.11.11.1.  table    0\nibmMvsDVIPARangeConfigIpAddrType   1.3.6.1.4.1.2.6.19.2.2.11.11.1.1. number  30\nibmMvsDVIPARangeConfigIpAddr       1.3.6.1.4.1.2.6.19.2.2.11.11.1.2. string  30\nibmMvsDVIPARangeConfigPrefixLen    1.3.6.1.4.1.2.6.19.2.2.11.11.1.3. number  30\nibmMvsDVIPARangeConfigMoveable     1.3.6.1.4.1.2.6.19.2.2.11.11.1.4. number  30\nibmMvsDVIPARangeConfigIntfName     1.3.6.1.4.1.2.6.19.2.2.11.11.1.5. display 30\nibmMvsDVIPARangeConfigStatus       1.3.6.1.4.1.2.6.19.2.2.11.11.1.6. number  30\nibmMvsDVIPARouteTable              1.3.6.1.4.1.2.6.19.2.2.11.12.    table    0\nibmMvsDVIPARouteEntry              1.3.6.1.4.1.2.6.19.2.2.11.12.1   table    0\nibmMvsDVIPARouteDynXcfType         1.3.6.1.4.1.2.6.19.2.2.11.12.1.1. number  30\nibmMvsDVIPARouteDynXcfAddr         1.3.6.1.4.1.2.6.19.2.2.11.12.1.2. string  30\nibmMvsDVIPARouteTargetType         1.3.6.1.4.1.2.6.19.2.2.11.12.1.3. number  30\nibmMvsDVIPARouteTargetAddr         1.3.6.1.4.1.2.6.19.2.2.11.12.1.4. string  30\nibmMvsDVIPARouteStatus             1.3.6.1.4.1.2.6.19.2.2.11.12.1.5. number  30\n* end of ibmTCPIPmvsMIB enterprise specific MIB objects\n*\n* ibmMvsTN3270MIB enterprise specific MIB objects\n*\nibmMvsTN3270MIB                    1.3.6.1.4.1.2.6.19.3.            table    0\nibmMvsTN3270MIBObjects             1.3.6.1.4.1.2.6.19.3.1.          table    0\nibmMvsTN3270ConnGroup              1.3.6.1.4.1.2.6.19.3.1.1.        table    0\nibmMvsTN3270ConnTable              1.3.6.1.4.1.2.6.19.3.1.1.1.      table    0\nibmMvsTN3270ConnEntry              1.3.6.1.4.1.2.6.19.3.1.1.1.1.    table    0\nibmMvsTN3270ConnLocalAddressType   1.3.6.1.4.1.2.6.19.3.1.1.1.1.1.  number   30\nibmMvsTN3270ConnLocalAddress       1.3.6.1.4.1.2.6.19.3.1.1.1.1.2.  string   30\nibmMvsTN3270ConnLocalPort          1.3.6.1.4.1.2.6.19.3.1.1.1.1.3.  number   30\nibmMvsTN3270ConnRemAddressType     1.3.6.1.4.1.2.6.19.3.1.1.1.1.4.  number   30\nibmMvsTN3270ConnRemAddress         1.3.6.1.4.1.2.6.19.3.1.1.1.1.5.  string   30\nibmMvsTN3270ConnRemPort            1.3.6.1.4.1.2.6.19.3.1.1.1.1.6.  number   30\nibmMvsTN3270ConnStartTime          1.3.6.1.4.1.2.6.19.3.1.1.1.1.7.  string   30\nibmMvsTN3270ConnAppl               1.3.6.1.4.1.2.6.19.3.1.1.1.1.8.  display  30\nibmMvsTN3270ConnLuName             1.3.6.1.4.1.2.6.19.3.1.1.1.1.9.  display  30\nibmMvsTN3270ConnLogMode            1.3.6.1.4.1.2.6.19.3.1.1.1.1.10. display  30\nibmMvsTN3270ConnProto              1.3.6.1.4.1.2.6.19.3.1.1.1.1.11. string   30\nibmMvsTN3270ConnRtGroupIndex       1.3.6.1.4.1.2.6.19.3.1.1.1.1.12. gauge    30\nibmMvsTN3270ConnRtIpMethod         1.3.6.1.4.1.2.6.19.3.1.1.1.1.13. number   30\nibmMvsTN3270ConnRtAvgRt            1.3.6.1.4.1.2.6.19.3.1.1.1.1.14. gauge    30\nibmMvsTN3270ConnRtAvgIpRt          1.3.6.1.4.1.2.6.19.3.1.1.1.1.15. gauge    30\nibmMvsTN3270ConnRtAvgCountTrans    1.3.6.1.4.1.2.6.19.3.1.1.1.1.16. gauge    30\nibmMvsTN3270ConnRtIntTimeStamp     1.3.6.1.4.1.2.6.19.3.1.1.1.1.17. string   30\nibmMvsTN3270ConnRtTotalRts         1.3.6.1.4.1.2.6.19.3.1.1.1.1.18. counter  30\nibmMvsTN3270ConnRtTotalIpRts       1.3.6.1.4.1.2.6.19.3.1.1.1.1.19. counter  30\nibmMvsTN3270ConnRtCountTrans       1.3.6.1.4.1.2.6.19.3.1.1.1.1.20. counter  30\nibmMvsTN3270ConnRtCountIP          1.3.6.1.4.1.2.6.19.3.1.1.1.1.21. counter  30\nibmMvsTN3270ConnRtBucket1Rts       1.3.6.1.4.1.2.6.19.3.1.1.1.1.25. counter  30\nibmMvsTN3270ConnRtBucket2Rts       1.3.6.1.4.1.2.6.19.3.1.1.1.1.26. counter  30\nibmMvsTN3270ConnRtBucket3Rts       1.3.6.1.4.1.2.6.19.3.1.1.1.1.27. counter  30\nibmMvsTN3270ConnRtBucket4Rts       1.3.6.1.4.1.2.6.19.3.1.1.1.1.28. counter  30\nibmMvsTN3270ConnRtBucket5Rts       1.3.6.1.4.1.2.6.19.3.1.1.1.1.29. counter  30\nibmMvsTN3270MonGroup               1.3.6.1.4.1.2.6.19.3.1.2.        table    0\nibmMvsTN3270MonGroupTable          1.3.6.1.4.1.2.6.19.3.1.2.1.      table    0\nibmMvsTN3270MonGroupEntry          1.3.6.1.4.1.2.6.19.3.1.2.1.1.    table    0\nibmMvsTN3270MonGroupIndex          1.3.6.1.4.1.2.6.19.3.1.2.1.1.1.  gauge    30\nibmMvsTN3270MonGroupName           1.3.6.1.4.1.2.6.19.3.1.2.1.1.2.  display  30\nibmMvsTN3270MonGroupType           1.3.6.1.4.1.2.6.19.3.1.2.1.1.3.  string   30\nibmMvsTN3270MonGroupSampPeriod     1.3.6.1.4.1.2.6.19.3.1.2.1.1.4.  gauge    30\nibmMvsTN3270MonGroupSampMult       1.3.6.1.4.1.2.6.19.3.1.2.1.1.5.  gauge    30\nibmMvsTN3270MonGroupBucketBndry1   1.3.6.1.4.1.2.6.19.3.1.2.1.1.6.  gauge    30\nibmMvsTN3270MonGroupBucketBndry2   1.3.6.1.4.1.2.6.19.3.1.2.1.1.7.  gauge    30\nibmMvsTN3270MonGroupBucketBndry3   1.3.6.1.4.1.2.6.19.3.1.2.1.1.8.  gauge    30\nibmMvsTN3270MonGroupBucketBndry4   1.3.6.1.4.1.2.6.19.3.1.2.1.1.9.  gauge    30\n* end of ibmMvsTN3270MIB enterprise specific MIB objects\nsnmpSetSerialNo                    1.3.6.1.6.3.1.1.6.1.             number   10\n*\nsnmpEngineID                       1.3.6.1.6.3.10.2.1.1.            string   30\nsnmpEngineBoots                    1.3.6.1.6.3.10.2.1.2.            number   100\nsnmpEngineTime                     1.3.6.1.6.3.10.2.1.3.            number   1\nsnmpEngineMaxMessageSize           1.3.6.1.6.3.10.2.1.4.            number   30\nsnmpUnknownSecurityModels          1.3.6.1.6.3.11.2.1.1.            counter  1\nsnmpInvalidMsgs                    1.3.6.1.6.3.11.2.1.2.            counter  1\nsnmpUnknownPDUHandlers             1.3.6.1.6.3.11.2.1.3.            counter  1\nsnmpTargetSpinLock                 1.3.6.1.6.3.12.1.1.              number   1\nsnmpTargetAddrTable                1.3.6.1.6.3.12.1.2.              table    0\nsnmpTargetAddrEntry                1.3.6.1.6.3.12.1.2.1.            table    0\nsnmpTargetAddrName                 1.3.6.1.6.3.12.1.2.1.1.          string   0\nsnmpTargetAddrTDomain              1.3.6.1.6.3.12.1.2.1.2.          string   60\nsnmpTargetAddrTAddress             1.3.6.1.6.3.12.1.2.1.3.          string   60\nsnmpTargetAddrTimeout              1.3.6.1.6.3.12.1.2.1.4.          number   60\nsnmpTargetAddrRetryCount           1.3.6.1.6.3.12.1.2.1.5.          number   60\nsnmpTargetAddrTagList              1.3.6.1.6.3.12.1.2.1.6.          string   60\nsnmpTargetAddrParams               1.3.6.1.6.3.12.1.2.1.7.          string   60\nsnmpTargetAddrStorageType          1.3.6.1.6.3.12.1.2.1.8.          number   60\nsnmpTargetAddrRowStatus            1.3.6.1.6.3.12.1.2.1.9.          number   60\nsnmpTargetParamsTable              1.3.6.1.6.3.12.1.3.              table    0\nsnmpTargetParamsEntry              1.3.6.1.6.3.12.1.3.1.            table    0\nsnmpTargetParamsName               1.3.6.1.6.3.12.1.3.1.1.          string   0\nsnmpTargetParamsMPModel            1.3.6.1.6.3.12.1.3.1.2.          number   60\nsnmpTargetParamsSecurityModel      1.3.6.1.6.3.12.1.3.1.3.          number   60\nsnmpTargetParamsSecurityName       1.3.6.1.6.3.12.1.3.1.4.          string   60\nsnmpTargetParamsSecurityLevel      1.3.6.1.6.3.12.1.3.1.5.          number   60\nsnmpTargetParamsStorageType        1.3.6.1.6.3.12.1.3.1.6.          number   60\nsnmpTargetParamsRowStatus          1.3.6.1.6.3.12.1.3.1.7.          number   60\nsnmpUnavailableContexts            1.3.6.1.6.3.12.1.4.              counter  1\nsnmpUnknownContexts                1.3.6.1.6.3.12.1.5.              counter  1\nsnmpNotifyTable                    1.3.6.1.6.3.13.1.1.              table    0\nsnmpNotifyEntry                    1.3.6.1.6.3.13.1.1.1.            table    0\nsnmpNotifyName                     1.3.6.1.6.3.13.1.1.1.1.          string   0\nsnmpNotifyTag                      1.3.6.1.6.3.13.1.1.1.2.          string   60\nsnmpNotifyType                     1.3.6.1.6.3.13.1.1.1.3.          number   60\nsnmpNotifyStorageType              1.3.6.1.6.3.13.1.1.1.4.          number   60\nsnmpNotifyRowStatus                1.3.6.1.6.3.13.1.1.1.5.          number   60\nsnmpNotifyFilterProfileTable       1.3.6.1.6.3.13.1.2.              table    0\nsnmpNotifyFilterProfileEntry       1.3.6.1.6.3.13.1.2.1.            table    0\nsnmpNotifyFilterProfileName        1.3.6.1.6.3.13.1.2.1.1.          string   60\nsnmpNotifyFilterProfileStorType    1.3.6.1.6.3.13.1.2.1.2.          number   60\nsnmpNotifyFilterProfileRowStatus   1.3.6.1.6.3.13.1.2.1.3.          number   60\nsnmpNotifyFilterTable              1.3.6.1.6.3.13.1.3.              table    0\nsnmpNotifyFilterEntry              1.3.6.1.6.3.13.1.3.1.            table    0\nsnmpNotifyFilterSubtree            1.3.6.1.6.3.13.1.3.1.1.          object   0\nsnmpNotifyFilterMask               1.3.6.1.6.3.13.1.3.1.2.          string   60\nsnmpNotifyFilterType               1.3.6.1.6.3.13.1.3.1.3.          number   60\nsnmpNotifyFilterStorageType        1.3.6.1.6.3.13.1.3.1.4.          number   60\nsnmpNotifyFilterRowStatus          1.3.6.1.6.3.13.1.3.1.5.          number   60\n*\nusmStatsUnsupportedSecLevels       1.3.6.1.6.3.15.1.1.1.            counter  1\nusmStatsNotInTimeWindows           1.3.6.1.6.3.15.1.1.2.            counter  1\nusmStatsUnknownUserNames           1.3.6.1.6.3.15.1.1.3.            counter  1\nusmStatsUnknownEngineIDs           1.3.6.1.6.3.15.1.1.4.            counter  1\nusmStatsWrongDigests               1.3.6.1.6.3.15.1.1.5.            counter  1\nusmStatsDecryptionErrors           1.3.6.1.6.3.15.1.1.6.            counter  1\nusmUserSpinLock                    1.3.6.1.6.3.15.1.2.1.            number   1\nusmUserTable                       1.3.6.1.6.3.15.1.2.2.            table    0\nusmUserEntry                       1.3.6.1.6.3.15.1.2.2.1.          table    0\nusmUserEngineID                    1.3.6.1.6.3.15.1.2.2.1.1.        string   0\nusmUserName                        1.3.6.1.6.3.15.1.2.2.1.2.        string   0\nusmUserSecurityName                1.3.6.1.6.3.15.1.2.2.1.3.        string   60\nusmUserCloneFrom                   1.3.6.1.6.3.15.1.2.2.1.4.        object   60\nusmUserAuthProtocol                1.3.6.1.6.3.15.1.2.2.1.5.        object   60\nusmUserAuthKeyChange               1.3.6.1.6.3.15.1.2.2.1.6.        number   10\nusmUserOwnAuthKeyChange            1.3.6.1.6.3.15.1.2.2.1.7.        number   10\nusmUserPrivProtocol                1.3.6.1.6.3.15.1.2.2.1.8.        object   60\nusmUserPrivKeyChange               1.3.6.1.6.3.15.1.2.2.1.9.        number   10\nusmUserOwnPrivKeyChange            1.3.6.1.6.3.15.1.2.2.1.10.       number   10\nusmUserPublic                      1.3.6.1.6.3.15.1.2.2.1.11.       string   10\nusmUserStorageType                 1.3.6.1.6.3.15.1.2.2.1.12.       number   60\nusmUserStatus                      1.3.6.1.6.3.15.1.2.2.1.13.       number   60\nvacmContextTable                   1.3.6.1.6.3.16.1.1.              table    0\nvacmContextEntry                   1.3.6.1.6.3.16.1.1.1.            table    0\nvacmContextName                    1.3.6.1.6.3.16.1.1.1.1.          string   60\nvacmSecurityToGroupTable           1.3.6.1.6.3.16.1.2.              table    0\nvacmSecurityToGroupEntry           1.3.6.1.6.3.16.1.2.1.            table    0\nvacmSecurityModel                  1.3.6.1.6.3.16.1.2.1.1.          number   0\nvacmSecurityName                   1.3.6.1.6.3.16.1.2.1.2.          string   0\nvacmGroupName                      1.3.6.1.6.3.16.1.2.1.3.          string   60\nvacmSecurityToGroupStorageType     1.3.6.1.6.3.16.1.2.1.4.          number   60\nvacmSecurityToGroupStatus          1.3.6.1.6.3.16.1.2.1.5.          number   60\nvacmAccessTable                    1.3.6.1.6.3.16.1.4.              table    0\nvacmAccessEntry                    1.3.6.1.6.3.16.1.4.1.            table    0\nvacmAccessContextPrefix            1.3.6.1.6.3.16.1.4.1.1.          string   0\nvacmAccessSecurityModel            1.3.6.1.6.3.16.1.4.1.2.          number   0\nvacmAccessSecurityLevel            1.3.6.1.6.3.16.1.4.1.3.          number   0\nvacmAccessContextMatch             1.3.6.1.6.3.16.1.4.1.4.          number   60\nvacmAccessReadViewName             1.3.6.1.6.3.16.1.4.1.5.          string   60\nvacmAccessWriteViewName            1.3.6.1.6.3.16.1.4.1.6.          string   60\nvacmAccessNotifyViewName           1.3.6.1.6.3.16.1.4.1.7.          string   60\nvacmAccessStorageType              1.3.6.1.6.3.16.1.4.1.8.          number   60\nvacmAccessStatus                   1.3.6.1.6.3.16.1.4.1.9.          number   60\nvacmViewSpinLock                   1.3.6.1.6.3.16.1.5.1.            number   1\nvacmViewTreeFamilyTable            1.3.6.1.6.3.16.1.5.2.            table    0\nvacmViewTreeFamilyEntry            1.3.6.1.6.3.16.1.5.2.1.          table    0\nvacmViewTreeFamilyViewName         1.3.6.1.6.3.16.1.5.2.1.1.        string   0\nvacmViewTreeFamilySubtree          1.3.6.1.6.3.16.1.5.2.1.2.        object   0\nvacmViewTreeFamilyMask             1.3.6.1.6.3.16.1.5.2.1.3.        string   60\nvacmViewTreeFamilyType             1.3.6.1.6.3.16.1.5.2.1.4.        number   60\nvacmViewTreeFamilyStorageType      1.3.6.1.6.3.16.1.5.2.1.5.        number   60\nvacmViewTreeFamilyStatus           1.3.6.1.6.3.16.1.5.2.1.6.        number   60\n*\nslapmSpinLock                      1.3.6.1.3.88.1.1.1.              number    0\nslapmPolicyCountQueries            1.3.6.1.3.88.1.1.2.              counter   0\nslapmPolicyCountAccesses           1.3.6.1.3.88.1.1.3.              counter   0\nslapmPolicyCountSuccessAccesses    1.3.6.1.3.88.1.1.4.              counter   0\nslapmPolicyCountNotFounds          1.3.6.1.3.88.1.1.5.              counter   0\nslapmPolicyPurgeTime               1.3.6.1.3.88.1.1.6.              number    0\nslapmPolicyTrapEnable              1.3.6.1.3.88.1.1.7.              number    0\nslapmPolicyTrapFilter              1.3.6.1.3.88.1.1.8.              number    0\nslapmPolicyStatsTable              1.3.6.1.3.88.1.2.1.              table     0\nslapmPolicyStatsEntry              1.3.6.1.3.88.1.2.1.1.            table     0\nslapmPolicyStatsOperStatus         1.3.6.1.3.88.1.2.1.1.4.          number   10\nslapmPolicyStatsActiveConns        1.3.6.1.3.88.1.2.1.1.5.          gauge    10\nslapmPolicyStatsTotalConns         1.3.6.1.3.88.1.2.1.1.6.          counter  10\nslapmPolicyStatsFirstActivated     1.3.6.1.3.88.1.2.1.1.7.          string  30\nslapmPolicyStatsLastMapping        1.3.6.1.3.88.1.2.1.1.8.          string   10\nslapmPolicyStatsInOctets           1.3.6.1.3.88.1.2.1.1.9.          counter  10\nslapmPolicyStatsOutOctets          1.3.6.1.3.88.1.2.1.1.10.         counter  10\nslapmPolicyStatsConnectionLimit    1.3.6.1.3.88.1.2.1.1.11.         number   10\nslapmPolicyStatsCountAccepts       1.3.6.1.3.88.1.2.1.1.12.         counter  10\nslapmPolicyStatsCountDenies        1.3.6.1.3.88.1.2.1.1.13.         counter  10\nslapmPolicyStatsInDiscards         1.3.6.1.3.88.1.2.1.1.14.         counter  10\nslapmPolicyStatsOutDiscards        1.3.6.1.3.88.1.2.1.1.15.         counter  10\nslapmPolicyStatsInPackets          1.3.6.1.3.88.1.2.1.1.16.         counter  10\nslapmPolicyStatsOutPackets         1.3.6.1.3.88.1.2.1.1.17.         counter  10\nslapmPolicyStatsInProfileOctets    1.3.6.1.3.88.1.2.1.1.18.         counter  10\nslapmPolicyStatsOutProfileOctets   1.3.6.1.3.88.1.2.1.1.19.         counter  10\nslapmPolicyStatsMinRate            1.3.6.1.3.88.1.2.1.1.20.         number   10\nslapmPolicyStatsMaxRate            1.3.6.1.3.88.1.2.1.1.21.         number   10\nslapmPolicyStatsMaxDelay           1.3.6.1.3.88.1.2.1.1.22.         number   10\nslapmPolicyMonitorTable            1.3.6.1.3.88.1.2.2.              table     0\nslapmPolicyMonitorEntry            1.3.6.1.3.88.1.2.2.1.            table     0\nslapmPolicyMonitorControl          1.3.6.1.3.88.1.2.2.1.5.          string  30\nslapmPolicyMonitorStatus           1.3.6.1.3.88.1.2.2.1.6.          string   10\nslapmPolicyMonitorInterval         1.3.6.1.3.88.1.2.2.1.7.          number  30\nslapmPolicyMonitorIntTime          1.3.6.1.3.88.1.2.2.1.8.          string   10\nslapmPolicyMonitorCurrentInRate    1.3.6.1.3.88.1.2.2.1.9.          gauge    10\nslapmPolicyMonitorCurrentOutRate   1.3.6.1.3.88.1.2.2.1.10.         gauge    10\nslapmPolicyMonitorMinRateLow       1.3.6.1.3.88.1.2.2.1.11.         number  30\nslapmPolicyMonitorMinRateHigh      1.3.6.1.3.88.1.2.2.1.12.         number  30\nslapmPolicyMonitorMaxRateHigh      1.3.6.1.3.88.1.2.2.1.13.         number  30\nslapmPolicyMonitorMaxRateLow       1.3.6.1.3.88.1.2.2.1.14.         number  30\nslapmPolicyMonitorMaxDelayHigh     1.3.6.1.3.88.1.2.2.1.15.         number  30\nslapmPolicyMonitorMaxDelayLow      1.3.6.1.3.88.1.2.2.1.16.         number  30\nslapmPolicyMonitorMinInRateNotAchieves 1.3.6.1.3.88.1.2.2.1.17.     counter  10\nslapmPolicyMonitorMaxInRateExceeds 1.3.6.1.3.88.1.2.2.1.18.         counter  10\nslapmPolicyMonitorMaxDelayExceeds  1.3.6.1.3.88.1.2.2.1.19.         counter  10\nslapmPolicyMonitorMinOutRateNotAchieves 1.3.6.1.3.88.1.2.2.1.20.    counter  10\nslapmPolicyMonitorMaxOutRateExceeds 1.3.6.1.3.88.1.2.2.1.21.        counter  10\nslapmPolicyMonitorCurrentDelayRate 1.3.6.1.3.88.1.2.2.1.22.         gauge    10\nslapmPolicyMonitorRowStatus        1.3.6.1.3.88.1.2.2.23.           number   10\nslapmSubcomponentTable             1.3.6.1.3.88.1.2.3.              table     0\nslapmSubcomponentEntry             1.3.6.1.3.88.1.2.3.1.            table     0\nslapmSubcomponentProtocol          1.3.6.1.3.88.1.2.3.1.5.          number   10\nslapmSubcomponentSystemAddress     1.3.6.1.3.88.1.2.3.1.6.          string  30\nslapmSubcomponentPolicyName        1.3.6.1.3.88.1.2.3.1.7.          display 30\nslapmSubcomponentTrafficProfileName 1.3.6.1.3.88.1.2.3.1.8.         display 30\nslapmSubcomponentLastActivity      1.3.6.1.3.88.1.2.3.1.9.          string   10\nslapmSubcomponentInOctets          1.3.6.1.3.88.1.2.3.1.10.         counter  10\nslapmSubcomponentOutOctets         1.3.6.1.3.88.1.2.3.1.11.         counter  10\nslapmSubcomponentTcpOutBufferedOctets 1.3.6.1.3.88.1.2.3.1.12.      counter  10\nslapmSubcomponentTcpInBufferedOctets 1.3.6.1.3.88.1.2.3.1.13.       counter  10\nslapmSubcomponentTcpReXmts         1.3.6.1.3.88.1.2.3.1.14.         counter  10\nslapmSubcomponentTcpRoundTripTime  1.3.6.1.3.88.1.2.3.1.15.         number   10\nslapmSubcomponentTcpRoundTripVariance 1.3.6.1.3.88.1.2.3.1.16.      number   10\nslapmSubcomponentInPdus            1.3.6.1.3.88.1.2.3.1.17.         counter  10\nslapmSubcomponentOutPdus           1.3.6.1.3.88.1.2.3.1.18.         counter  10\nslapmSubcomponentApplName          1.3.6.1.3.88.1.2.3.1.19.         display 30\nslapmSubcomponentMonitorStatus     1.3.6.1.3.88.1.2.3.1.20.         string   10\nslapmSubcomponentMonitorIntTime    1.3.6.1.3.88.1.2.3.1.21.         string   10\nslapmSubcomponentMonitorCurrentInRate 1.3.6.1.3.88.1.2.3.1.22.      gauge    10\nslapmSubcomponentMonitorCurrentOutRate 1.3.6.1.3.88.1.2.3.1.23.     gauge    10\n*\n*                                                                       @J5A\nslapmSubcomponentPolicyRuleIndex   1.3.6.1.3.88.1.2.3.1.24.         number   10\n*\nslapmPolicyNameTable               1.3.6.1.3.88.1.2.4.              table     0\nslapmPolicyNameEntry               1.3.6.1.3.88.1.2.4.1.            table     0\nslapmPolicyNameSystemAddress       1.3.6.1.3.88.1.2.4.1.1.          string   10\nslapmPolicyNameIndex               1.3.6.1.3.88.1.2.4.1.2.          number   10\nslapmPolicyNameOfRule              1.3.6.1.3.88.1.2.4.1.3.          number   10\nslapmPolicyRuleStatsTable          1.3.6.1.3.88.1.2.5.              table     0\nslapmPolicyRuleStatsEntry          1.3.6.1.3.88.1.2.5.1.            table     0\nslapmPolicyRuleStatsOperStatus     1.3.6.1.3.88.1.2.5.1.1.          number   10\nslapmPolicyRuleStatsActiveConns    1.3.6.1.3.88.1.2.5.1.2.          gauge    10\nslapmPolicyRuleStatsTotalConns     1.3.6.1.3.88.1.2.5.1.3.          counter  10\nslapmPolicyRuleStatsLActivated     1.3.6.1.3.88.1.2.5.1.4.          string  30\nslapmPolicyRuleStatsLastMapping    1.3.6.1.3.88.1.2.5.1.5.          string  30\nslapmPolicyRuleStatsInOctets       1.3.6.1.3.88.1.2.5.1.6.          counter  10\nslapmPolicyRuleStatsOutOctets      1.3.6.1.3.88.1.2.5.1.7.          counter  10\nslapmPolicyRuleStatsConnLimit      1.3.6.1.3.88.1.2.5.1.8.          number   10\nslapmPolicyRuleStatsCountAccepts   1.3.6.1.3.88.1.2.5.1.9.          counter  10\nslapmPolicyRuleStatsCountDenies    1.3.6.1.3.88.1.2.5.1.10.         counter  10\nslapmPolicyRuleStatsInDiscards     1.3.6.1.3.88.1.2.5.1.11.         counter  10\nslapmPolicyRuleStatsOutDiscards    1.3.6.1.3.88.1.2.5.1.12.         counter  10\nslapmPolicyRuleStatsInPackets      1.3.6.1.3.88.1.2.5.1.13.         counter  10\nslapmPolicyRuleStatsOutPackets     1.3.6.1.3.88.1.2.5.1.14.         counter  10\nslapmPolicyRuleStatsInProOctets    1.3.6.1.3.88.1.2.5.1.15.         counter  10\nslapmPolicyRuleStatsOutProOctets   1.3.6.1.3.88.1.2.5.1.16.         counter  10\nslapmPolicyRuleStatsMinRate        1.3.6.1.3.88.1.2.5.1.17.         number   10\nslapmPolicyRuleStatsMaxRate        1.3.6.1.3.88.1.2.5.1.18.         number   10\nslapmPolicyRuleStatsMaxDelay       1.3.6.1.3.88.1.2.5.1.19.         number   10\nslapmPolicyRuleStatsTotalRsvpFlows 1.3.6.1.3.88.1.2.5.1.20.         counter  10\nslapmPolicyRuleStatsActRsvpFlows   1.3.6.1.3.88.1.2.5.1.21.         gauge    10\n*\nslapmPRMonTable                    1.3.6.1.3.88.1.2.6.              table     0\nslapmPRMonEntry                    1.3.6.1.3.88.1.2.6.1.            table     0\nslapmPRMonOwnerIndex               1.3.6.1.3.88.1.2.6.1.1.          string   10\nslapmPRMonSystemAddress            1.3.6.1.3.88.1.2.6.1.2.          string   10\nslapmPRMonIndex                    1.3.6.1.3.88.1.2.6.1.3.          number   10\nslapmPRMonControl                  1.3.6.1.3.88.1.2.6.1.4.          string   10\nslapmPRMonStatus                   1.3.6.1.3.88.1.2.6.1.5.          string   10\nslapmPRMonInterval                 1.3.6.1.3.88.1.2.6.1.6.          number   10\nslapmPRMonIntTime                  1.3.6.1.3.88.1.2.6.1.7.          string   10\nslapmPRMonCurrentInRate            1.3.6.1.3.88.1.2.6.1.8.          gauge    10\nslapmPRMonCurrentOutRate           1.3.6.1.3.88.1.2.6.1.9.          gauge    10\nslapmPRMonMinRateLow               1.3.6.1.3.88.1.2.6.1.10.         number   10\nslapmPRMonMinRateHigh              1.3.6.1.3.88.1.2.6.1.11.         number   10\nslapmPRMonMaxRateHigh              1.3.6.1.3.88.1.2.6.1.12.         number   10\nslapmPRMonMaxRateLow               1.3.6.1.3.88.1.2.6.1.13.         number   10\nslapmPRMonMaxDelayHigh             1.3.6.1.3.88.1.2.6.1.14.         number   10\nslapmPRMonMaxDelayLow              1.3.6.1.3.88.1.2.6.1.15.         number   10\nslapmPRMonMinInRateNotAchieves     1.3.6.1.3.88.1.2.6.1.16.         counter  10\nslapmPRMonMaxInRateExceeds         1.3.6.1.3.88.1.2.6.1.17.         counter  10\nslapmPRMonMaxDelayExceeds          1.3.6.1.3.88.1.2.6.1.18.         counter  10\nslapmPRMonMinOutRateNotAchieves    1.3.6.1.3.88.1.2.6.1.19.         counter  10\nslapmPRMonMaxOutRateExceeds        1.3.6.1.3.88.1.2.6.1.20.         counter  10\nslapmPRMonCurrentDelayRate         1.3.6.1.3.88.1.2.6.1.21.         gauge    10\nslapmPRMonRowStatus                1.3.6.1.3.88.1.2.6.1.22.         number   10\n*\nslapm2PolicyLastUpdated        1.3.6.1.4.1.2.5.30.1.1.2.            string    1\nslapm2PolicyLastChecked        1.3.6.1.4.1.2.5.30.1.1.3.            string    1\nslapm2PolicyDeletedTrapEnable  1.3.6.1.4.1.2.5.30.1.1.4.            number    1\nslapm2PolicyMonInterval        1.3.6.1.4.1.2.5.30.1.1.5.            number    1\n*\nslapm2PolicyRuleTable          1.3.6.1.4.1.2.5.30.1.2.1.            table     0\nslapm2PolicyRuleEntry          1.3.6.1.4.1.2.5.30.1.2.1.1.          table     0\nslapm2PolicyRuleIndex          1.3.6.1.4.1.2.5.30.1.2.1.1.1.        number    1\nslapm2PolicyRuleNameOfRule     1.3.6.1.4.1.2.5.30.1.2.1.1.2.        number    1\nslapm2PolicyRuleOperStatus     1.3.6.1.4.1.2.5.30.1.2.1.1.3.        number    1\nslapm2PolicyRuleDeleteTime     1.3.6.1.4.1.2.5.30.1.2.1.1.4.        string    1\n*\nslapm2PolicyRuleStatsTable     1.3.6.1.4.1.2.5.30.1.2.2.            table     0\nslapm2PolicyRuleStatsEntry     1.3.6.1.4.1.2.5.30.1.2.2.1.          table     1\nslapm2PRStatsActiveConns       1.3.6.1.4.1.2.5.30.1.2.2.1.1.        gauge     1\nslapm2PRStatsLActivated        1.3.6.1.4.1.2.5.30.1.2.2.1.4.        string    1\nslapm2PRStatsLastMapping       1.3.6.1.4.1.2.5.30.1.2.2.1.5.        string    1\nslapm2PRStatsAvgTcpRtt         1.3.6.1.4.1.2.5.30.1.2.2.1.14.       gauge     1\nslapm2PRStatsMDTcpRtt          1.3.6.1.4.1.2.5.30.1.2.2.1.15.       gauge     1\nslapm2PRStatsAvgAcceptQDelay   1.3.6.1.4.1.2.5.30.1.2.2.1.16.       gauge     1\nslapm2PRStatsMDAcceptQDelay    1.3.6.1.4.1.2.5.30.1.2.2.1.17.       gauge     1\nslapm2PRStatsAvgSrvrReactTime  1.3.6.1.4.1.2.5.30.1.2.2.1.18.       gauge     1\nslapm2PRStatsMDSrvrReactTime   1.3.6.1.4.1.2.5.30.1.2.2.1.19.       gauge     1\n*\nslapm2PRMonTable               1.3.6.1.4.1.2.5.30.1.2.6.            table     0\nslapm2PRMonEntry               1.3.6.1.4.1.2.5.30.1.2.6.1.          table     0\nslapm2PRMonOwnerIndex          1.3.6.1.4.1.2.5.30.1.2.6.1.1.        number    1\nslapm2PRMonTrapEnable          1.3.6.1.4.1.2.5.30.1.2.6.1.2.        number    1\nslapm2PRMonStatus              1.3.6.1.4.1.2.5.30.1.2.6.1.3.        string    1\nslapm2PRMonTrapFilter          1.3.6.1.4.1.2.5.30.1.2.6.1.4.        number    1\nslapm2PRMonIntTime             1.3.6.1.4.1.2.5.30.1.2.6.1.5.        string    1\nslapm2PRMonTcpRttDelayHigh     1.3.6.1.4.1.2.5.30.1.2.6.1.6.        number    1\nslapm2PRMonTcpRttDelayLow      1.3.6.1.4.1.2.5.30.1.2.6.1.7.        number    1\nslapm2PRMonTcpRttCurrentDelay  1.3.6.1.4.1.2.5.30.1.2.6.1.8.        gauge     1\nslapm2PRMonTcpReXmitHigh       1.3.6.1.4.1.2.5.30.1.2.6.1.9.        number    1\nslapm2PRMonTcpReXmitLow        1.3.6.1.4.1.2.5.30.1.2.6.1.10.       number    1\nslapm2PRMonCurrentTcpReXmit    1.3.6.1.4.1.2.5.30.1.2.6.1.11.       gauge     1\nslapm2PRMonAcceptQDelayHigh    1.3.6.1.4.1.2.5.30.1.2.6.1.12.       number    1\nslapm2PRMonAcceptQDelayLow     1.3.6.1.4.1.2.5.30.1.2.6.1.13.       number    1\nslapm2PRMonAcceptQCurrentDelay 1.3.6.1.4.1.2.5.30.1.2.6.1.14.       gauge     1\nslapm2PRMonRowStatus           1.3.6.1.4.1.2.5.30.1.2.6.1.15.       number    1\n*\nsthSysLparName                 1.3.6.1.4.1.15037.1.1.               string    8\nsthSysHardwareModel            1.3.6.1.4.1.15037.1.2.               string    8\nsthSysOsProductName            1.3.6.1.4.1.15037.1.3.               string   16\nsthSysOSProductVersion         1.3.6.1.4.1.15037.1.4.               string    8\nsthSysLastIplDate              1.3.6.1.4.1.15037.1.5.               string    6\nsthSysLastIplTime              1.3.6.1.4.1.15037.1.6.               string    8\nsthSysStatus                   1.3.6.1.4.1.15037.1.7.               number    1\nsthCpuUse                      1.3.6.1.4.1.15037.1.8.               number    3\nsthJesSpoolUse                 1.3.6.1.4.1.15037.1.9.               number    3\nsthJesJoeUse                   1.3.6.1.4.1.15037.1.10.              number    3\nsthJesJqeUse                   1.3.6.1.4.1.15037.1.11.              number    3\nsthV2x1Status                  1.3.6.1.4.1.15037.2.1.               number    1\nsthV2x2Status                  1.3.6.1.4.1.15037.2.2.               number    1\nsthCicsSmsprodStatus           1.3.6.1.4.1.15037.3.1.1.             number    1\nsthCicsSms2prdStatus           1.3.6.1.4.1.15037.3.1.2.             number    1\nsthCicsSmseadpStatus           1.3.6.1.4.1.15037.3.1.3.             number    1\nsthCicsHisprodStatus           1.3.6.1.4.1.15037.3.1.4.             number    1\nsthCicsHisrsStatus             1.3.6.1.4.1.15037.3.1.5.             number    1\nsthCicsSmstestStatus           1.3.6.1.4.1.15037.3.1.6.             number    1\nsthCicsSms2tstStatus           1.3.6.1.4.1.15037.3.1.7.             number    1\nsthCicsSmseadtStatus           1.3.6.1.4.1.15037.3.1.8.             number    1\nsthCicsHiststStatus            1.3.6.1.4.1.15037.3.1.9.             number    1\nsthCicsCsfpStatus              1.3.6.1.4.1.15037.3.1.10.            number    1\nsthDb2DsnpmstrStatus           1.3.6.1.4.1.15037.3.2.1.             number    1\nsthDb2Dsnpdbm1Status           1.3.6.1.4.1.15037.3.2.2.             number    1\nsthDb2DsnpdistStatus           1.3.6.1.4.1.15037.3.2.3.             number    1\nsthDb2IrlmprocStatus           1.3.6.1.4.1.15037.3.2.4.             number    1\nsthDb2DsnhmstrStatus           1.3.6.1.4.1.15037.3.2.5.             number    1\nsthDb2Dsnhdbm1Status           1.3.6.1.4.1.15037.3.2.6.             number    1\nsthDb2DsnhdistStatus           1.3.6.1.4.1.15037.3.2.7.             number    1\nsthDb2IrlmprohStatus           1.3.6.1.4.1.15037.3.2.8.             number    1\nsthStcUc4Status                1.3.6.1.4.1.15037.3.3.1.             number    1\nsthStcXptrmainStatus           1.3.6.1.4.1.15037.3.3.2.             number    1\nsthStcNimbemcsStatus           1.3.6.1.4.1.15037.3.3.3.             number    1\nsthHsmStatus                   1.3.6.1.4.1.15037.3.4.1.             number    1\nsthHsmBcdsUse                  1.3.6.1.4.1.15037.3.4.2.             number    3\nsthHsmMcdsUse                  1.3.6.1.4.1.15037.3.4.3.             number    3\nsthHsmOcdsUse                  1.3.6.1.4.1.15037.3.4.4.             number    3\nsthHsmJrnlUse                  1.3.6.1.4.1.15037.3.4.5.             number    3\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NMIBSDAT": {"ttr": 5130, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x008\\x01\\x07)/\\x01\\t\\x03\\x0f\\t&\\x00U\\x00J\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2007-10-19T00:00:00", "modifydate": "2009-01-30T09:26:38", "lines": 85, "newlines": 74, "modlines": 0, "user": "SCHMUM"}, "text": "#      Licensed Materials - Property of IBM\n#      This product contains \"Restricted Materials of IBM\"\n#      5647-A01 (C) Copyright IBM Corp. 1996, 1997\n#      All rights reserved.\n#      US Government Users Restricted Rights -\n#      Use, duplication or disclosure restricted by\n#      GSA ADP Schedule Contract with IBM Corp.\n#      See IBM Copyright Instructions.\n\n# short name            OID                  type\n#----------------------------------------------------\n\n# my system variables\n\nmyDescr              1.3.6.1.2.1.1.1.          display\nmyObjectid           1.3.6.1.2.1.1.2.          objectidentifier\nmyUptime             1.3.6.1.2.1.1.3.          Timeticks\nmyContact            1.3.6.1.2.1.1.4.          display\nmyName               1.3.6.1.2.1.1.5.          display\nmyLocation           1.3.6.1.2.1.1.6.          display\nmyServices           1.3.6.1.2.1.1.7.          integer\n\n# DPI SAMPLE MIB (DPI version 2.0 sample program)\n\ndpiSimpleInteger    1.3.6.1.4.1.2.2.1.5.1.0   integer\ndpiSimpleString     1.3.6.1.4.1.2.2.1.5.2.0   display\ndpiSimpleCounter32  1.3.6.1.4.1.2.2.1.5.3.0   counter32\ndpiSimpleCounter64  1.3.6.1.4.1.2.2.1.5.4.0   counter64\n\n# DPI SAMPLE MIB (DPI version 1.1 sample program)\n\ndpiSample              1.3.6.1.4.1.2.2.1.4.      null\ndpiSampleNumber        1.3.6.1.4.1.2.2.1.4.1.    uinteger\ndpiSampleNumberString  1.3.6.1.4.1.2.2.1.4.1.1.  display\ndpiSampleOctetString   1.3.6.1.4.1.2.2.1.4.2.    octetstring\ndpiSampleObjectID      1.3.6.1.4.1.2.2.1.4.3.    objectidentifier\ndpiSampleEmpty         1.3.6.1.4.1.2.2.1.4.4.    display\ndpiSampleInetAddress   1.3.6.1.4.1.2.2.1.4.5.    ipaddress\ndpiSampleCounter       1.3.6.1.4.1.2.2.1.4.6.    counter\ndpiSampleGauge         1.3.6.1.4.1.2.2.1.4.7.    gauge\ndpiSampleTimeTicks     1.3.6.1.4.1.2.2.1.4.8.    timeticks\ndpiSampleDisplayString 1.3.6.1.4.1.2.2.1.4.9.    displaystring\ndpiSampleCommand       1.3.6.1.4.1.2.2.1.4.10.   displaystring\n\n# SHANDS MIB\n\nsthSysLparName         1.3.6.1.4.1.15037.1.1.    displaystring\nsthSysHardwareModel    1.3.6.1.4.1.15037.1.2.    displaystring\nsthSysOsProductName    1.3.6.1.4.1.15037.1.3.    displaystring\nsthSysOSProductVersion 1.3.6.1.4.1.15037.1.4.    displaystring\nsthSysLastIplDate      1.3.6.1.4.1.15037.1.5.    displaystring\nsthSysLastIplTime      1.3.6.1.4.1.15037.1.6.    displaystring\nsthSysStatus           1.3.6.1.4.1.15037.1.7.    integer\nsthCpuUse              1.3.6.1.4.1.15037.1.8.    integer\nsthJesSpoolUse         1.3.6.1.4.1.15037.1.9.    integer\nsthJesJoeUse           1.3.6.1.4.1.15037.1.10.   integer\nsthJesJqeUse           1.3.6.1.4.1.15037.1.11.   integer\nsthV2x1Status          1.3.6.1.4.1.15037.2.1.    integer\nsthV2x2Status          1.3.6.1.4.1.15037.2.2.    integer\nsthCicsSmsprodStatus   1.3.6.1.4.1.15037.3.1.1.  integer\nsthCicsSms2prdStatus   1.3.6.1.4.1.15037.3.1.2.  integer\nsthCicsSmseadpStatus   1.3.6.1.4.1.15037.3.1.3.  integer\nsthCicsHisprodStatus   1.3.6.1.4.1.15037.3.1.4.  integer\nsthCicsHisrsStatuss    1.3.6.1.4.1.15037.3.1.5.  integer\nsthCicsSmstestStatus   1.3.6.1.4.1.15037.3.1.6.  integer\nsthCicsSms2tstStatus   1.3.6.1.4.1.15037.3.1.7.  integer\nsthCicsSmseadtStatus   1.3.6.1.4.1.15037.3.1.8.  integer\nsthCicsHiststStatus    1.3.6.1.4.1.15037.3.1.9.  integer\nsthCicsCsfpStatus      1.3.6.1.4.1.15037.3.1.10. integer\nsthDb2DsnpmstrStatus   1.3.6.1.4.1.15037.3.2.1.  integer\nsthDb2Dsnpdbm1Status   1.3.6.1.4.1.15037.3.2.2.  integer\nsthDb2DsnpdistStatus   1.3.6.1.4.1.15037.3.2.3.  integer\nsthDb2IrlmprocStatus   1.3.6.1.4.1.15037.3.2.4.  integer\nsthDb2DsnhmstrStatus   1.3.6.1.4.1.15037.3.2.5.  integer\nsthDb2Dsnhdbm1Status   1.3.6.1.4.1.15037.3.2.6.  integer\nsthDb2DsnhdistStatus   1.3.6.1.4.1.15037.3.2.7.  integer\nsthDb2IrlmprohStatus   1.3.6.1.4.1.15037.3.2.8.  integer\nsthStcUc4Status        1.3.6.1.4.1.15037.3.3.1.  integer\nsthStcXptrmainStatus   1.3.6.1.4.1.15037.3.3.2.  integer\nsthStcNimbemcsStatus   1.3.6.1.4.1.15037.3.3.3.  integer\nsthHsmStatus           1.3.6.1.4.1.15037.3.4.1.  integer\nsthHsmBcdsUse          1.3.6.1.4.1.15037.3.4.2.  integer\nsthHsmMcdsUse          1.3.6.1.4.1.15037.3.4.3.  integer\nsthHsmOcdsUse          1.3.6.1.4.1.15037.3.4.4.  integer\nsthHsmJrnlUse          1.3.6.1.4.1.15037.3.4.5.  integer\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PCCSSNAP": {"ttr": 5378, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x05\\x01\\t\\x02\\x1f\\x01\\t\\x02/\\x16\\x15\\x00L\\x00D\\x00\\x0e\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2009-01-21T00:00:00", "modifydate": "2009-01-22T16:15:05", "lines": 76, "newlines": 68, "modlines": 14, "user": "SCHMUM"}, "text": "//SCHMUMAS JOB (,TECH),'ASSEMBLE PCCSSNAP',\n//            CLASS=A,MSGCLASS=X,\n//            NOTIFY=SCHMUM,COND=(0,NE)\n//ASMA    EXEC ASMACL,\n// PARM.C='XREF(SHORT),OBJECT,RENT',\n// PARM.L='LIST,XREF,RENT,REUS,AC=1'\n//C.SYSLIB  DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.AMODGEN,DISP=SHR\n//          DD DSN=SCHMUM.NIMAGNT.MACLIB,DISP=SHR\n//C.SYSIN   DD *\n         TITLE 'PCCSSNAP - SNAP PROCESSOR'\n**********************************************************************\n*  (C)   Copyright Shands HealthCare, 2009                           *\n*  Program was written by:                                           *\n*    Michael Schmutzok                                               *\n*    Sr. Systems Programmer                                          *\n*    Shands HealthCare                                               *\n*    Information Services                                            *\n*    1329 SW 16th St, Room 3150                                      *\n*    Gainesville, FL  32608-1128                                     *\n*    mailto:schmum@shands.ufl.edu                                    *\n*    352.265.7982          (fax)                                     *\n*    352.265.8317  x85465  (voice)                                   *\n*********************************************************************\n***       THIS MODULE WILL ALLOCATE AND INVOKE THE SNAP MACRO     ***\n***       TO DUMP SELECTED AREAS OF STORAGE.  THE STARTING AND    ***\n***       ENDING ADDRESSES ARE SPECIFIED VIA A PASSED PARAMETER   ***\n***       LIST. THIS MODULE IS RE-ENTRANT                         ***\n*********************************************************************\nPCCSSNAP AMODE 31\nPCCSSNAP RMODE 24\nPCCSSNAP ENTERX 12,(1,WORKLEN,C)\n         USING WORKAREA,R13\n         LR    R5,R1                      SAVE PARM\n*********************************************************************\n***       PARAMETER VALIDATION AND INITIALIZATION                 ***\n*********************************************************************\n         ALLOC DDN='SNAPDD',SYSOUT='X',ERROR=S99FAIL\nPCCSMSET MODESET KEY=ZERO,MODE=SUP\nLOOP     DS    0H\n         L     R8,0(R5)                   STARTING ADDRESS\n         L     R9,4(R5)                   ENDING ADDRESS\n         #SNAP STORAGE=((R8),(R9)),PDATA=REGS\n         WTO   'PCCS000I SNAP DUMP TAKEN'\n*        CLM   R9,B'1000',=X'70'\n         TM    4(R5),X'80'\n*        BH    EXIT\n         BO    EXIT\n         LA    R5,8(R5)\n         B     LOOP\nEXIT     DS    0H\n         FREE  UNALC,DDN='SNAPDD',ERROR=S99FAIL\n         LEAVE EQ,RC=0\nS99FAIL  DS    0H\n         LR    R10,R15\n         S99FAIL MF=(E,S99LIST,S99FLEN)\n         LR    R10,R15\n         B     EXIT\n         EJECT\n*****************************************\n*** STORAGE DEFINITIONS AND CONSTANTS ***\n*****************************************\n***********************************\n*** DYNAMIC WORKAREA DEFINITION ***\n***********************************\nWORKAREA DSECT\n@SAVE    DS    18F\n         DYNSPACE\nS99LIST  DS    XL(S99FLEN)\nWORKLEN  EQU   *-@SAVE\n         IEFZB4D0\n         IEFZB4D2\n         END   PCCSSNAP\n//L.SYSLMOD DD DSN=MSS.SCHMUM.LOADLIB,DISP=SHR\n//L.SYSIN   DD  *\n    NAME PCCSSNAP(R)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PDSLOAD": {"ttr": 5381, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x15\\x7f\\x01\\x01\\x15\\x7f\\x156\\x00e\\x00e\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-06-06T00:00:00", "modifydate": "2001-06-06T15:36:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "QUERYJES": {"ttr": 5384, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00$\\x01\\t\\x02\\x9f\\x01\\t\\x04\\x0f\\x15W\\x00V\\x00T\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2009-01-29T00:00:00", "modifydate": "2009-02-09T15:57:24", "lines": 86, "newlines": 84, "modlines": 0, "user": "SCHMUM"}, "text": "/* REXX */\n/**********************************************************/\n/*                                                        */\n/* QUERYJES - This exec will issue the $DJOBDEF and the   */\n/*            $DOUTDEF JES2 commands, extract the free    */\n/*            and used JOEs and JQEs and figure the       */\n/*            percentage used. It will also issue         */\n/*            the $DSPL command and extract the SPOOL     */\n/*            volume utilization.                         */\n/*                                                        */\n/*            This exec is executed by the mainframe      */\n/*            Nimbus sub-agent, specifically, the NIMJES  */\n/*            subtask. Values extracted are used to       */\n/*            update MIB values. These values can then    */\n/*            be queried by NimBUS and appropriate        */\n/*            alerts generated if necessary.              */\n/*                                                        */\n/* NOTE!!!    This exec must reside in SYS1.SAXREXEC      */\n/*                                                        */\n/**********************************************************/\nNumeric Digits 4\n/* This code commented out until sysrexx bug fixed by IBM\nMyCmd1  = '$DSPL,ALL'\nResult1 =  AXRCMD(MyCmd1,SpoolVar.,10);\nIf Result1 = 0 Then\n  Do\n    pcttot = 0\n    CALL AXRWTO SpoolVar.0\n    Do LineNum = 1 TO SpoolVar.0 By 3\n      Line3 = LineNum + 2\n      Parse Var SpoolVar.Line3 msgid c1 'PERCENT=' pct\n      pcttot = pcttot + pct\n      End;\n    pcttot = pcttot / SpoolVar.0\n    CALL AXRWTO 'The SPOOL volume utilization is:' pcttot||'%'\n    End;\nElse\n  CALL AXRWTO '$DSPOOL command failed. RC=' Result1\n*/\nMyCmd2  = '$DOUTDEF'\nResult2 =  AXRCMD(MyCmd2,JoeVar.,10);\nIf Result2 = 0 Then\n  Do LineNum = 1 TO JoeVar.0\n    Parse Var JoeVar.LineNum msgid msg\n    If Pos('JOENUM=',msg) <> 0 Then\n      Do\n      Parse Var msg c1 'JOENUM=' numjoe ',' rest\n      Iterate\n      End\n    If Pos('JOEFREE=',msg) <> 0 Then\n      Do\n      Parse Var msg c1 'JOEFREE=' freejoe ',' rest\n      Iterate\n      End\n  End;\n\nMyCmd3  = '$DJOBDEF'\nResult3 =  AXRCMD(MyCmd3,JqeVar.,10);\nIf Result3 = 0 Then\n  Do LineNum = 1 TO JqeVar.0\n    Parse Var JqeVar.LineNum msgid msg\n    If Pos('JOBNUM=',msg) <> 0 Then\n      Do\n      Parse Var msg c1 'JOBNUM=' numjqe ',' rest\n      Iterate\n      End\n    If Pos('JOBFREE=',msg) <> 0 Then\n      Do\n      Parse Var msg c1 'JOBFREE=' freejqe ',' rest\n      Iterate\n      End\n  End;\n\njoepct = (freejoe / numjoe) * 100\nparse var joepct joeint '.' joerem\njqepct = (freejqe / numjqe) * 100\nparse var jqepct jqeint '.' jqerem\njoeint = Right((100-joeint),3,'0')\njqeint = Right((100-jqeint),3,'0')\n/*\nCALL AXRWTO 'FREEJOE='freejoe||', NUMJOE='numjoe ,\n            'FREEJQE='freejqe||', NUMJQE='numjqe\nCALL AXRWTO 'Percent of JOEs used=' 100 - joeint||'%' ,\n            'Percent of JQEs used=' 100 - jqeint||'%'\n*/\nExit 00\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SYSREXX": {"ttr": 5387, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\t\\x02\\x8f\\x01\\t\\x02\\x8f\\x11\\x12\\x00\\x07\\x00\\x07\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-01-28T00:00:00", "modifydate": "2009-01-28T11:12:05", "lines": 7, "newlines": 7, "modlines": 0, "user": "SCHMUM"}, "text": "//SCHMUMSR JOB (,TECH),'MIKE SCHMUTZOK',\n//             CLASS=A,MSGCLASS=X,NOTIFY=SCHMUM\n//OUT1     OUTPUT DEPT='TECH SUPPORT',JESDS=ALL,DEFAULT=YES,\n//             TITLE='SYSTEM REXX'\n/*JOBPARM LINES=100\n//S0010    EXEC PGM=SYSREXXJ\n//STEPLIB  DD  DISP=SHR,DSN=MSS.SCHMUM.LOADLIB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSREXXJ": {"ttr": 5389, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x006\\x01\\t\\x02\\x7f\\x01\\t\\x03\\x0f\\tC\\x00\\x9d\\x00t\\x00\\x00\\xe2\\xc3\\xc8\\xd4\\xe4\\xd4@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2009-01-27T00:00:00", "modifydate": "2009-01-30T09:43:36", "lines": 157, "newlines": 116, "modlines": 0, "user": "SCHMUM"}, "text": "//SCHMUMAS JOB (,OSS),'SCHMUTZOK,MIKE',\n//             CLASS=A,MSGCLASS=X,NOTIFY=SCHMUM\n//OUT1     OUTPUT DEPT='TECH SUPPORT',JESDS=ALL,DEFAULT=YES,\n//             TITLE='ASSEMBLE SYSREXXJ'\n/*JOBPARM LINES=100\n//*-----------------------------------------------*\n//*   LIB: SCHMUM.NIMAGNT.SOURCE(SYSREXXJ)\n//*   DOC: ASSEMBLE AND LINK USING ASMA90\n//*-----------------------------------------------*\n//ASMA    EXEC ASMACL,\n// PARM.C='XREF(SHORT),OBJECT', RENT',\n// PARM.L='LIST,XREF,AC=1' ENT,REUS'\n//C.SYSLIB  DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.AMODGEN,DISP=SHR\n//          DD DSN=MSS.SCHMUM.MACLIB,DISP=SHR\n//C.SYSIN   DD *\nSYSREXXJ CSECT ,\nSYSREXXJ AMODE 31\nSYSREXXJ RMODE 31\n************************************************************\n*\n*  TITLE: SYSREXXJ\n*\n*  Function:  Obtain various JES2 info by invoking an exec to\n*     parse the output of JES2 display commands.\n*       $DSPL    Get the SPOOL volume utilization percentage\n*       $DJOBDEF Get pct of JQE's available\n*       $DOUTDEF Get pct of JOE's available\n*\n*  NOTE: This program was created to develop the code that will\n*        later be incorporated within a sub-task. The system\n*        REXX approach is used wherever a metric is needed\n*        but can't be gotten to through control block chaining\n*        (i.e. I can't write JES2 programs!)\n*\n************************************************************\n         BAKR  14,0\n         USING SYSREXXJ,12\n         LR    12,15\n         MODID BR=YES\n* Initialize everything\n         XC  MyVarLst,MyVarLst    Clear the VarLst header\n         XC  MyVarEn1,MyVarEn1    Clear the Var entry\n         XC  MyVarEn2,MyVarEn2    Clear the Var entry\n* Build Variable list\n         LA  2,MyVarLst\n         USING AxrArgLst,2\n         MVC AxrArgLstId,MyAxrVarLstAcro\n         LA  5,AxrArgLstCurVer\n         ST  5,AxrArgLstVer       Initialize the version\n         L   5,kNumVars           Obtain the number of variables\n         STH  5,AxrArgLstNumber   Store the number of variables\n         DROP 2\n         LA  2,MyVarEn1           Addressability to 1st var entry\n         USING AxrArgEntry,2\n         LA  5,JOEPCT\n         ST  5,AXRARGADDRLOW      Store output argument\n         LA  5,VarName1\n         ST  5,AXRARGNameADDRLOW  Store address of name of output var\n         MVI AxrArgNameLength,L'VarName1\n         OI  AXRARGINPUTFLGS1,AXRARGOutput   Indicate output var\n         MVI AxrArgType,AxrArgTypeChar          Indicate char string\n         LA  5,L'JOEPCT           Obtain length (in bytes)\n         SLL 5,1                  Mult by 2 - length is in hex         *\n                                  digits (not bytes)\n         ST  5,AxrArgLength       Store length in var entry\n         DROP 2\n         LA  2,MyVarEn2           Addressability to 2nd var entry\n         USING AxrArgEntry,2\n         LA  5,JQEPCT\n         ST  5,AXRARGADDRLOW      Store output argument\n         LA  5,VarName2\n         ST  5,AXRARGNameADDRLOW  Store address of name of output var\n         MVI AxrArgNameLength,L'VarName2\n         OI  AXRARGINPUTFLGS1,AXRARGOutput   Indicate output var\n         MVI AxrArgType,AxrArgTypeChar          Indicate char string\n         LA  5,L'JQEPCT           Obtain length (in bytes)\n         SLL 5,1                  Mult by 2 - length is in hex         *\n                                  digits (not bytes)\n         ST  5,AxrArgLength       Store length in var entry\n         DROP 2\n         AXREXX REQUEST=EXECUTE,NAME=kEXECNAME,TIMELIMIT=NO,           *\n               REXXVARS=MyVarLst,REXXDIAG=MyAxrDiag,SYNC=YES,          *\n               RETCODE=OutRC,RSNCODE=OutRsn\n         LTR   15,15\n         JNZ   FailLabel\n         LA    2,MyAxrDiag\n         USING AxrDiag,2\n         TM    AxrDiagFlgs1,AxrDiagNoExecRetCode\n         JNZ   FailLabel\n         L     15,AxrDiagExecRetCode\n         LTR   15,15\n         JNZ   FailLabel\n*        Everything looks good.   Process variables here\n         LA    R2,MSG151E\n         MVC   MSG151JO(5,R2),JOEPCT Move Free JOE pct\n         MVC   MSG151JQ(5,R2),JQEPCT Move Free JQE pcts\n         WTO   MF=(E,MSG151E)       Issue message to operator\nExit     DS   0H\n         PR\n* Perform error checking\nFailLabel DS   0H\n         LA    R2,MSG150E\n         L     R3,OutRC\n         CVD   R3,DBLWRD            Convert it to decimal\n         UNPK  MSG150RC(8,R2),DBLWRD+4(4) Unpack it\n         OI    MSG150RC+7(R2),X'F0' Correct the sign\n         MVC   DBLWRD+3(4),OutRsn   Move reason code to work area\n         UNPK  MSG150RS(9,R2),DBLWRD+3(5) Unpack it to msg\n         MVI   MSG150RS+8(R2),C' '  Clear out that packed sign\n         TR    MSG150RS(8,R2),TABLE Make hex viewable\n         WTO   MF=(E,MSG150E)       Issue message to operator\nSNAPRTN  DS    0H\n         LA    R2,@START\n         LA    R3,@END\n         LINK  EP=PCCSSNAP,PARAM=((R2),(R3)),VL=1\n         B     Exit\n*\n*  Constants\n*\n@START   EQU   *\nDBLWRD   DS    D\nOutRC    DS    F\nOutRsn   DS    F\nkNumVars DC    F'2'                    4\nMyAxrVarLstAcro DC AL4(AxrVarLstAcro)  4\nkExecName DC   CL8'QUERYJES'           8\nJOEPCT   DS    CL5\nJQEPCT   DS    CL5\nVarName1 DC    C'joepct'               3\nVarName2 DC    C'jqepct'               3\nMyAxrDiag DS   CL(AXRDIAG_LEN)        40\nMyVarLst DS    CL(AXRARGLST_LEN)      16\nMyVarEn1 DS    CL(AXRARGENTRY_LEN)    40\nMyVarEn2 DS    CL(AXRARGENTRY_LEN)    40\nMSG150E  WTO   'SYSREXXJ: RETCODE= xxxxxxxx, RSNCODE= xxxxxxxx ',      C\n               ROUTCDE=(1,10),MF=L\nMSG150EL EQU   *-MSG150E\nMSG150RC EQU   WPLTXT-WPL+19,8\nMSG150RS EQU   WPLTXT-WPL+38,8\nMSG151E  WTO   'SYSREXXJ: Free JOEs: xx.xx%, Free JQEs: xx.xx%',       C\n               ROUTCDE=(1,10),MF=L\nMSG151EL EQU   *-MSG151E\nMSG151JO EQU   WPLTXT-WPL+21,8\nMSG151JQ EQU   WPLTXT-WPL+40,8\n@END     EQU   *\n         ORG   *-240\nTABLE    EQU   *\n         DS    240C\n         DC    C'0123456789ABCDEF'\n         AXRZARG DSECT=YES,AXRARGLST=YES,AXRARGENTRY=YES,AXRDIAG=YES\n         IEZWPL ,                  Generate MVS WPL dsect\n         REGS\n         END\n//L.SYSLMOD DD DSN=MSS.SCHMUM.LOADLIB,DISP=SHR\n//L.SYSIN   DD  *\n    NAME SYSREXXJ(R)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT805/FILE805.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT805", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}