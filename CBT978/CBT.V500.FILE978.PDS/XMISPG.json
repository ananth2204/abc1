{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "KTOMIAK", "INMTNODE": "ANYNODE", "INMTUID": "KTOMIAK", "INMFTIME": "20180523170101000000", "INMNUMF": 2}, "INMR02": {"1": {"INMUTILN": "INMCOPY", "INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 251, "INMBLKSZ": 3120, "INMRECFM": "VB", "numfile": 1}, "2": {"INMUTILN": "IEBCOPY", "INMSIZE": 587860, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 81, "INMBLKSZ": 27945, "INMRECFM": "FB", "INMDIR": 11, "INMDSNAM": "VENDOR.GENIE.WISHLIST", "INMMEMBR": "VENDOR.GENIE.WISHLIST", "numfile": 2}, "3": {"INMUTILN": "INMCOPY", "INMSIZE": 587860, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 2}}, "INMR03": {"1": {"INMSIZE": 587860, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}, "2": {"INMSIZE": 587860, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "message": {"file": "b'@\\x7f\\xd2\\x85\\x95\\x95\\x85\\xa3\\x88@\\xc5@\\xe3\\x96\\x94\\x89\\x81\\x92\\x7fL\\xc3\\xc2\\xe3m\\xd2\\x85\\x95|\\xd2\\xe3\\x96\\x94\\x89\\x81\\x92K\\x82\\x89\\xa9n\\xe4K\\xe2K\\xc1K@\\xc3\\xc3z@\\xc1\\xd5\\xe8\\xd5\\xd6\\xc4\\xc5@a\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@\\xd2K@\\xe3\\x96\\x94\\x89\\x81\\x92@@@@@@@@@@@@@@@@@@@@@@\\xe2\\xe3\\xc1\\xd5\\xc4\\xc1\\xd9\\xc4@\\xc7\\xd3\\xd6\\xc2\\xc1\\xd3@\\xc4\\xc9\\xe2\\xc3\\xd3\\xc1\\xc9\\xd4\\xc5\\xd9``````````````````````````\\xe3\\x88\\x85@\\x81\\xa4\\xa3\\x88\\x96\\x99@\\x85\\xa7\\x97\\x93\\x89\\x83\\x89\\xa3\\x93\\xa8@\\x84\\x89\\xa2\\x81\\xa5\\x96\\xa6\\xa2@\\x81\\x95\\xa8@\\x83\\x93\\x81\\x89\\x94@\\xa6\\x88\\x81\\xa3\\xa2\\x96\\x85\\xa5\\x85\\x99@\\x81\\x82\\x96\\xa4\\xa3@\\xa3\\x88\\x85\\x83\\x96\\x99\\x99\\x85\\x83\\xa3\\x95\\x85\\xa2\\xa2@\\x96\\x99@\\x86\\xa4\\x95\\x83\\xa3\\x89\\x96\\x95\\x81\\x93\\x89\\xa3\\xa8@\\x96\\x86@\\xa3\\x88\\x89\\xa2@\\x97\\x99\\x96\\x87\\x99\\x81\\x94k@\\x81\\x95\\x84@\\x84\\x89\\xa2\\x83\\x93\\x81\\x89\\x94\\xa2@\\x93\\x89\\x81\\x82\\x89\\x93\\x89\\xa3\\xa8\\x86\\x96\\x99@\\x81\\x95\\xa8\\xa3\\x88\\x89\\x95\\x87@\\x81\\x95\\x84@\\x85\\xa5\\x85\\x99\\xa8\\xa3\\x88\\x89\\x95\\x87@\\x82\\x81\\x84@\\xa3\\x88\\x81\\xa3@\\x94\\x89\\x87\\x88\\xa3@\\x88\\x81\\x97\\x97\\x85\\x95@\\x89\\x95@\\x83\\x96\\x95\\x95\\x85\\x83\\xa3\\x89\\x96\\x95@\\xa6\\x89\\xa3\\x88k\\x82\\x85\\x86\\x96\\x99\\x85k@\\x84\\xa4\\x99\\x89\\x95\\x87k@\\x96\\x99@\\x81\\x86\\xa3\\x85\\x99@\\xa4\\xa2\\x89\\x95\\x87@\\x89\\xa3K@\\xc9@\\x88\\x81\\xa5\\x85@\\xa3\\x99\\x89\\x85\\x84@\\xa3\\x96@\\x94\\x81\\x92\\x85@\\x89\\xa3@\\xa6\\x96\\x99\\x92@\\x99\\x89\\x87\\x88\\xa3k\\x81\\x95\\x84@\\xc9@\\x81\\x94@\\x97\\x85\\x99\\xa2\\x96\\x95\\x81\\x93\\x93\\xa8@\\x97\\x99\\x85\\xa3\\xa3\\xa8@\\x83\\x96\\x95\\x86\\x89\\x84\\x85\\x95\\xa3@\\xa3\\x88\\x81\\xa3@\\x89\\xa3@\\x84\\x96\\x85\\xa2k@\\x82\\xa4\\xa3@\\x85\\xa5\\x85\\x99\\xa8\\x82\\x96\\x84\\xa8@\\x94\\x81\\x92\\x85\\xa2\\x94\\x89\\xa2\\xa3\\x81\\x92\\x85\\xa2k@\\xa2\\x96@\\x89\\x86@\\xa8\\x96\\xa4@\\xa4\\xa2\\x85@\\x89\\xa3k@\\xa8\\x96\\xa4@\\x84\\x96@\\xa2\\x96@\\x81\\xa3@\\xa8\\x96\\xa4\\x99@\\x96\\xa6\\x95@\\x99\\x89\\xa2\\x92K@\\xe2\\x89\\x95\\x83\\x85\\x99\\x85\\x93\\xa8@\\xa8\\x96\\xa4\\x99\\xa2k\\xd2\\x85\\x95\\x95\\x85\\xa3\\x88@\\xc5K@\\xe3\\x96\\x94\\x89\\x81\\x92@'", "lrecl": 80, "text": " \"Kenneth E Tomiak\"<CBT_Ken@KTomiak.biz>U.S.A. CC: ANYNODE /KTOMIAK   K. Tomiak\n                     STANDARD GLOBAL DISCLAIMER--------------------------The aut\nhor explicitly disavows any claim whatsoever about thecorrectness or functionali\nty of this program, and disclaims liabilityfor anything and everything bad that\nmight happen in connection with,before, during, or after using it. I have tried\nto make it work right,and I am personally pretty confident that it does, but eve\nrybody makesmistakes, so if you use it, you do so at your own risk. Sincerely yo\nurs,Kenneth E. Tomiak\n"}, "file": {"VENDOR.GENIE.WISHLIST": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27945, "DS1LRECL": 81, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12304, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3000, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "180143", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x002'", "DS1LSTAR": "b'\\x00\\xdf\\x02'", "DS1TRBAL": "b'\\xa4\\x06'"}, "COPYR2": {"deb": "b'\\x05\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x06\\x80\\x00\\x04z\\xcb\\xc8'", "extents": ["b'\\x05\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x06\\x80\\x00\\x04z\\xcb\\xc8'", "b'X}Ch\\x00\\x00\\x0b\\xa8\\x00\\x05\\x0b\\xb7\\x00\\x0e\\x00\\xeb'", "b'X}Ch\\x00\\x00\\x08M\\x00\\x03\\x08N\\x00\\x02\\x00\\x0f'", "b'X}Ch\\x00\\x00\\x06W\\x00\\r\\x06[\\x00\\x02\\x002'", "b'X}Ch\\x00\\x00\\x07\\x9d\\x00\\x00\\x07\\xa0\\x00\\x04\\x002'", "b'X}Ch\\x00\\x00\\x07\\xa0\\x00\\x05\\x07\\xa3\\x00\\t\\x002'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"ISPG": {"ttr": 30465, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00I\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x10\\x007\\x007\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:10:49", "lines": 55, "newlines": 55, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG\nKISPEXEC\nTISPF Services Guide\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180513-162126\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNPreface\nN-------\nThis document describes how to use ISPF dialog management component (DM)\nNservices and Program Development Facility component (PDF) services.\nNProgrammers who develop applications with ISPF can use the services\nNdescribed in this publication to develop dialogs from programs or\nNcommand procedures.\nN\nNWho should use this document?\nN-----------------------------\nNThis document is for application programmers who develop dialogs using\nNISPF. Users should be familiar with coding in CLIST, REXX, or any of\nNthe other programming or command procedure languages supported by ISPF\nNin the MVS environment.\nN\nNWhat is in this document?\nN-------------------------\nNThis document contains two chapters.\nN\nNChapter 1, \"Introduction to ISPF services\" describes how to invoke ISPF\nNservices, provides an explanation of various service return codes, and\nNlists and summarizes all of the services described in this document.\nN\nNChapter 2, \"Description of the ISPF services\" contains this information\nNabout each of the ISPF services:\nN\nN-> A description of the function and operation of the service. This\nN   description also refers to other services that can be used with this\nN   service.\nN\nN-> The syntax used to code the service, showing both the command\nM   procedure format and the call format.\nN\nN-> A description of any required or optional keywords or parameters.\nN\nN-> A description of the error codes returned by the service.\nN\nN-> Examples of the how the service is used to develop dialogs.\nN\nNThe services are listed in alphabetical order.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG01": {"ttr": 30467, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00I\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x10\\x00 \\x00 \\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:10:49", "lines": 32, "newlines": 32, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG01\nTISPF Services Guide\nT-Chapter 1. Introduction to ISPF services\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180513-162215\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 1. Introduction to ISPF services\nN----------------------------------------\nNISPF services help you develop interactive ISPF applications called\nNdialogs. These services can make your job easier because they perform\nNmany tedious and repetitious operations. In addition, the ISPF services\nNallow you to start a dialog in batch mode and let it run in the\nNbackground while you work with another application in the foreground.\nN\nNPDF component services communicate with the dialog through dialog\nNvariables. Thus, you can use PDF component services with DM component\nNservices. For information about DM component services and writing\nNdialogs, refer to the z/OS ISPF Dialog Developer's Guide and Reference.\nN\nNYou can also use PDF component services within edit macros, or you can\nNuse edit macros through the EDIT service. For information about writing\nNedit macros, refer to SC34-4820-10 z/OS ISPF Edit and Edit Macros\nNor PDF ispzem90.PDF.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0101": {"ttr": 30469, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00I\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x10\\x007\\x007\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:10:49", "lines": 55, "newlines": 55, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0101\nTISPF Services Guide\nT-Chapter 1.\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141049\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 1. Introduction to ISPF services\nN----------------------------------------\nNDescription of the services\nN---------------------------\nNThe services are described in alphabetical order and each service\nNdescription consists of this information:\nN\nN-> Description: A description of the function and operation of the\nN   service. This description also refers to other services that can be\nN   used with this service.\nN\nN-> Format: The syntax used to code the service, showing commands and\nN   calls.\nN\nN-> Parameters: A description of any required or optional keywords or\nN   parameters.\nN\nN-> Return Codes: A description of the codes returned by the service.\nN   For all services, a return code of 12 or higher implies a severe\nN   error. This error is usually a syntax error, but can be any severe\nN   error detected when using the services.\nN\nN-> Examples: Sample usage of the services.\nN\nNFor each service, the command procedure or command invocation format\nNis shown, followed by the call or call invocation format.\nN\nNThe command formats are provided as CLIST or REXX command procedures,\nNusing ISPEXEC.\nN\nNCall formats are shown in PL/I syntax, although you are not limited to\nNPL/I calls. For example, \";\" ends statements in the formats described.\nNThis is a PL/I convention, but you should use the syntax appropriate\nNfor your programming language.\nN\nNConsider using the Edit model facilities when you code requests for\nNISPF services. This will save keying the parts of dialog elements that\nNare constant regardless of the function in which they are used. See\nNSC34-4820-10 z/OS ISPF Edit and Edit Macros or PDF ispzem90.PDF for a\nNdescription of these facilities.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0102": {"ttr": 30471, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x10\\x00>\\x00>\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:10:50", "lines": 62, "newlines": 62, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0102\nTISPF Services Guide\nT-Chapter 1.\nT-Using ISPQRY to test whether ISPF is active\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141050\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 1. Introduction to ISPF services\nN----------------------------------------\nNUsing ISPQRY to test whether ISPF is active\nN-------------------------------------------\nNA program can determine if ISPF services are currently available to it\nNthrough use of ISPQRY. To test the availability of ISPF, the function\nNissues:\nN\nN  CALL ISPQRY\nN\nN   or\nN\nD  ADDRESS LINKPGM \"ISPQRY\"\nN\nNThere are no parameters associated with the call to ISPQRY. No messages\nNare written to the terminal. The response from ISPQRY is one of these\nNreturn codes:\nN\nN-> 0: The services are available to the caller.\nN\nN-> 20: The services are not available to the caller.\nN\nNExample: Handle ISPF inactive\nN-----------------------------\nI/* We first need rexx in comment if compiled or read from SYSPROC. */\nIREXX_ISPG0102:\nI  rexxpgm_version = \"01.01\"          /* Set with 'ver 1' and 'lev 1'. */\nI\nI  /*\nI  CALL ISPQRY from 'READY' fails with\nI          5 +++ CALL ISPQRY\nI     IRX0040I Error running ISPG0102, line 5: Incorrect call to routine\nI  */\nI  ADDRESS LINKPGM \"ISPQRY\"\nI  ispqry_rc = RC\nI  IF (ispqry_rc = 20) THEN DO\nI    SAY \"\"\nI    SAY \"You must first start ISPF and then you may run this code.\"\nI    SAY \"\"\nI    RETURN ispqry_rc\nI  END\nI\nI  SAY \"\"\nI  SAY \"Congratulations, ISPF is active and services are available.\"\nI  SAY \"\"\nI  RETURN 0\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0103": {"ttr": 30473, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x10\\x007\\x007\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:10:50", "lines": 55, "newlines": 55, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0103\nTISPF Services Guide\nT-Chapter 1.\nT-Invoking the ISPF services\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141050\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 1. Introduction to ISPF services\nN----------------------------------------\nNInvoking the ISPF services\nN--------------------------\nNDialog developers use a command or a call statement to invoke ISPF\nNservices from functions at the point where the service is needed.\nN\nNFunctions coded in a REXX language invoke ISPF services by means of the\nNISPEXEC command. For example:\nN\nI  ADDRESS ISPEXEC \"DISPLAY PANEL(xyz)\"\nN\nNThis example invokes a service to display information on a terminal. A\nNpanel definition named XYZ, prepared by the developer and pre-stored in\nNa panel file, specifies both the content and the format of the display.\nN\nNSee the manual for command procedures (CLIST) or languages:\nN\nN-> Assembler\nN-> APL2\nN-> C\nN-> COBOL\nN-> FORTRAN\nN-> Pascal\nN-> PL/I\nN\nNUsing parameters as symbolic variables (REXX)\nN---------------------------------------------\nNThe ISPEXEC call interface allows you to specify parameters as symbolic\nNvariables. A symbolic variable is one that is preceded by an ampersand\nN(&). Before a scan syntax check of a statement, variable names and the\nNampersands that precede them are replaced with the values of the\nNcorresponding variables. A single scan takes place.\nN\nI  xyz = \"DEMO@PRI\"\nI  ADDRESS ISPEXEC \"DISPLAY PANEL(\"xyz\")\"\nN  OR\nI  xyz = \"DEMO@PRI\"\nI  ADDRESS ISPEXEC \"DISPLAY PANEL(&xyz)\"\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0104": {"ttr": 30475, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x12\\x00`\\x00`\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:12:27", "lines": 96, "newlines": 96, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0104\nTISPF Services Guide\nT-Chapter 1.\nT-Return codes from services\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141227\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 1. Introduction to ISPF services\nN----------------------------------------\nNReturn codes from services\nN--------------------------\nNEach service returns a numeric code, called a return code, indicating\nNthe result of the operation. These return codes are summarized\nNin Table 1.\nN\nNTable 1. Service Return Codes\nN-----------------------------\nNReturn Code Operation Results   Reason\nN----------- ------------------- ---------------------------------------\nN    0       Normal completion   Indicates that the service completed\nN                                operation without errors.\nN----------- ------------------- ---------------------------------------\nN   4, 8     Exception condition Indicates a condition that is not\nN                                necessarily an error, but that the\nN                                dialog should be aware of. A return\nN                                code of 4 is informational, while an 8\nN                                generally indicates a non-terminating\nN                                error condition, such as the end of a\nN                                data set or member list.\nN----------- ------------------- ---------------------------------------\nN10, 12, 14, Error condition     Indicates that the service did not\nN16, 20                          complete operation because of errors.\nN                                Use the CONTROL service to control\nN                                errors with a return code of 12 or\nN                                greater. Return codes of 10 and 14 are\nN                                particular to PDF component services.\nN----------- ------------------- ---------------------------------------\nN\nNReturn codes and their meanings vary for each service and are listed\nNwith each service description in this topic.\nN\nNCommand invocation return code variable\nN---------------------------------------\nNFor a command invocation, the return code is returned in the CLIST\nNvariable LASTCC.\nN\nNREXX invocation return code variable\nN------------------------------------\nNFor REXX, the return code is returned in the reserved variable RC.\nN\nNReturn code of 12 or higher\nN\nNThe dialog can use the ISPF dialog management CONTROL service to set\nNthe error mode to RETURN, or CANCEL, which is the default. See the\nNCONTROL service in Chapter 2, \"Description of the ISPF services,\" for\nNdetailed information.\nN\nI  ADDRESS ISPEXEC \"CONTROL ERRORS CANCEL | RETURN\"\nN\nNThe error mode setting determines what happens when a return code is\nN12 or higher. There are two error modes:\nN\nN  CANCEL: Displays and logs a message, then stops the dialog and\nN  displays the previous Primary Option Menu.\nN\nN  RETURN: Formats an error message, but does not display or log it.\nN  Returns to the function that invoked the service, passing back the\nN  designated return code.\nN\nNIn CANCEL mode, control is not usually returned to the function that\nNinvoked the service. Consequently, the function does not see a return\nNcode of 12 or higher, so you do not have to include logic to process\nNerrors of this severity.\nN\nNHowever, ISPLINK returns a code of 20 to the dialog when an invalid\nNISPF environment causes the error. In this situation, ISPF cannot\nNdisplay a panel to show the error. Control is returned to the dialog,\nNeven though the return code is 12 or higher.\nN\nNIn RETURN mode, control returns to the function that invoked the\nNservice. That function must have logic to handle return codes of 12\nNor higher.\nN\nNThe RETURN mode applies only to the function that invoked the CONTROL\nNservice. If a lower-level function is invoked, it starts out in CANCEL\nNmode. When a function returns to the higher-level function that invoked\nNit, the mode that the higher-level function was operating in resumes.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0105": {"ttr": 30477, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00(\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x12\\x007\\x007\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:12:28", "lines": 55, "newlines": 55, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0105\nTISPF Services Guide\nT-Chapter 1.\nT-System variables used to format error messages\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141228\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 1. Introduction to ISPF services\nN----------------------------------------\nNSystem variables used to format error messages\nN----------------------------------------------\nNIf an error occurs, an error message is formatted before control\nNreturns to the function. This list defines the contents of the system\nNvariables that are used to format error messages:\nN\nNVariables Contents\nN--------- -------------------------------------------------------------\nNZERRALRM  The value YES if an alarm was specified in the message\nN          definition (.ALARM=YES); otherwise, the value NO.\nN--------- -------------------------------------------------------------\nNZERRHM    The name of a Help panel, if one was specified in the message\nN          definition.\nN--------- -------------------------------------------------------------\nNZERRLM    Long-message text in which variables have been resolved.\nN--------- -------------------------------------------------------------\nNZERRMSG   Message ID.\nN--------- -------------------------------------------------------------\nNZERRSM    Short-message text in which variables have been resolved.\nN--------- -------------------------------------------------------------\nN\nNZERRMSG, ZERRSM, and ZERRLM are changed only when the return code from\nNa DM component service is greater than 8.\nN\nNThese system variables are in the function pool, if it exists.\nNOtherwise, they are in the shared variable pool.\nN\nNThe function can display the message, log the message, or both, simply\nNby invoking the appropriate service with the message ID ISRZ002. For\nNexample:\nN\nI  ADDRESS ISPEXEC \"SETMSG MSG(ISRZ002)\"\nN  OR\nI  ADDRESS ISPEXEC \"LOG MSG(ISRZ002)\"\nN\nNThe service provides the short- and long-message text, the name of the\nNcorresponding help panel, and the alarm setting for your use.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0110": {"ttr": 30479, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00(\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x12\\x00-\\x00-\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:12:28", "lines": 45, "newlines": 45, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0110\nTISPF Services Guide\nT-Chapter 1.\nT-A summary of the ISPF services\nT-Display services\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141228\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 1. Introduction to ISPF services\nN----------------------------------------\nNA summary of the ISPF services\nN------------------------------\nNDisplay services\nN----------------\nNADDPOP:  Specifies that the panel displays listed are to be in a pop-up\nN         window. It also identifies the location of the pop-up window\nN         on the screen in relation to the underlying panel or window.\nN\nNDISPLAY: Reads a panel definition from the panel files, initializes\nN         variable information in the panel from the corresponding\nN         dialog variables in the function, shared, or profile variable\nN         pools, and displays the panel on the screen. Optionally, the\nN         DISPLAY service might superimpose a message on the display.\nN\nNREMPOP:  Removes a pop-up window from the screen.\nN\nNSELECT:  Used to display a hierarchy of selection panels or invoke a\nN         function.\nN\nNSETMSG:  Constructs a specified message from the message file in an\nN         ISPF system save area. The message will be superimposed on the\nN         next panel displayed by any DM component service.\nN\nNTBDISPL: Combines information from panel definitions with information\nN         stored in ISPF tables. It displays selected rows from a table,\nN         and allows the user to identify rows for processing.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0111": {"ttr": 30481, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00(\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x12\\x00#\\x00#\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:12:28", "lines": 35, "newlines": 35, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0111\nTISPF Services Guide\nT-Chapter 1.\nT-A summary of the ISPF services\nT-File tailoring services\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141228\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 1. Introduction to ISPF services\nN----------------------------------------\nNA summary of the ISPF services\nN------------------------------\nNFile tailoring services\nN-----------------------\nNThe file tailoring services, listed in the order in which they are\nNnormally invoked, are:\nN\nNFTOPEN:  Prepares the file tailoring process and specifies whether the\nN         temporary file is to be used for output.\nN\nNFTINCL:  Specifies the skeleton to be used and starts the tailoring\nN         process.\nN\nNFTCLOSE: Ends the file tailoring process.\nN\nNFTERASE: Erases an output file created by file tailoring.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0112": {"ttr": 30721, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00(\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x12\\x00c\\x00c\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:12:28", "lines": 99, "newlines": 99, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0112\nTISPF Services Guide\nT-Chapter 1.\nT-A summary of the ISPF services\nT-Library access services\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141228\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 1. Introduction to ISPF services\nN----------------------------------------\nNA summary of the ISPF services\nN------------------------------\nNLibrary access services\nN-----------------------\nNDSINFO:   Returns information about a particular data set in dialog\nN          variables in the function pool.\nN\nNLMCLOSE:  Closes a data set.\nN\nNLMCOMP:   Compresses a partitioned data using either the new compress\nN          request exit or IEBCOPY if the exit is not installed.\nN\nNLMCOPY:   Copies partitioned data set members or sequential data sets,\nN          allowing pack and automatic truncation options.\nN\nNLMDDISP:  Displays the data set list for a specified dslist ID.\nN\nNLMDFREE:  Removes the link between a dslist ID and a DSNAME LEVEL and\nN          VOLUME combination.\nN\nNLMDINIT:  Associates a DSNAME LEVEL and VOLUME combination with a\nN          dslist ID. Thereafter, this dslist ID is used to identify the\nN          DSNAME LEVEL and VOLUME combination for processing by other\nN          library access services.\nN\nNLMDLIST:  Creates a data set list for a specified dslist ID.\nN\nNLMERASE:  Deletes an ISPF library or MVS data set.\nN\nNLMFREE:   Releases the data set associated with a given data-id.\nN\nNLMGET:    Reads one record of a data set.\nN\nNLMINIT:   Associates one or more ISPF libraries or an existing data\nN          set with a data-id. Thereafter, this data-id is used to\nN          identify the data set for processing by other library access\nN          services.\nN\nNLMMADD:   Adds a member to an ISPF library or a partitioned data set.\nN\nNLMMDEL:   Deletes a member of an ISPF library or a partitioned data\nN          set.\nN\nNLMMDISP:  Provides member selection lists for:\nN\nN          -> Single partitioned data sets\nN\nN          -> Concatenations of up to four partitioned data sets.\nN\nNLMMFIND:  Finds a member of an ISPF library or a partitioned data set.\nN\nNLMMLIST:  Creates a member list of an ISPF library or a partitioned\nN          data set.\nN\nNLMMOVE:   Moves partitioned data set members or sequential data sets,\nN          allowing pack and automatic truncation options.\nN\nNLMMREN:   Renames a member of an ISPF library or a partitioned data\nN          set.\nN\nNLMMREP:   Replaces a member of an ISPF library or a partitioned data\nN          set.\nN\nNLMMSTATS: Sets and stores, or deletes ISPF statistics for partitioned\nN          data set members that have fixed-length or variable-length\nN          records.\nN\nNLMOPEN:   Opens a data set.\nN\nNLMPRINT:  Prints to the list data set, with formatting optional.\nN\nNLMPUT:    Writes one record of a data set.\nN\nNLMQUERY:  Provides requested information regarding the data set\nN          associated with a given data-id.\nN\nNLMRENAME: Renames an ISPF library.\nN\nNMEMLIST:  Enables access to the Library Utility member list from within\nN          a dialog.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0113": {"ttr": 30723, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00C\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x14\\x00L\\x00L\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:14:43", "lines": 76, "newlines": 76, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0113\nTISPF Services Guide\nT-Chapter 1.\nT-A summary of the ISPF services\nT-PDF component services\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141443\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 1. Introduction to ISPF services\nN----------------------------------------\nNA summary of the ISPF services\nN------------------------------\nNPDF component services\nN----------------------\nNPDF component services consist of BRIF (Browse Interface), BROWSE,\nNEDIF (Edit Interface), EDIREC (edit recovery for EDIF), EDIT, VIEW,\nNVIIF, and EDREC (edit recovery for EDIT and VIEW), along with the\nNlibrary access services listed in \"Library access services\".\nN\nNBRIF:     Provides browse functions for data accessed through\nN          dialog-supplied I/O routines. It allows you to browse data\nN          other than partitioned data sets or sequential files, such\nN          as subsystem data and in-storage data, and to preprocess the\nN          data being browsed.\nN\nNBROWSE:   Can be used to look at any ISPF library, concatenation of\nN          ISPF libraries, or data set that can be allocated by using\nN          the LMINIT service, and certain other data types not\nN          supported by ISPF. You can browse host data sets on the\nN          workstation or workstation files on the host.\nN\nNEDIF:     Provides edit functions for data accessed through\nN          dialog-supplied I/O routines. It allows you to edit data\nN          other than partitioned data sets or sequential files,\nN          as subsystem data and in-storage data, and to\nN          preprocess the data being browsed.\nN\nNEDIREC:   Initializes an edit recovery table (ISREIRT) for use by the\nN          EDIF service and determines whether recovery from the EDIF\nN          service is pending.\nN\nNEDIT:     Can be used to look at any ISPF library, concatenation of\nN          ISPF libraries, or data set that can be allocated by using\nN          the LMINIT service. The EDIT service provides an interface\nN          to the PDF editor and bypasses the display of the Edit Entry\nN          Panel on the host. You can also edit host files on the\nN          workstation or workstation files on the host.\nN\nNEDREC:    Initializes an edit or view recovery table, determines\nN          whether recovery is pending, and takes the action specified\nN          by the first argument.\nN\nNVIEW:     Functions exactly like the EDIT service, with these\nN          exceptions:\nN\nN          1. You must use the REPLACE or CREATE primary command to save\nN             data.\nN\nN          2. When you enter the END primary command after altering a\nN             file in VIEW mode, you will be prompted to either save the\nN             changes or exit without saving them.\nN\nNVIIF:     Provides edit functions for data accessed through\nN          dialog-supplied I/O routines. It enables you to view data\nN          other than partitioned data sets or sequential files, such\nN          as subsystem data and in-storage data, and to preprocess the\nN          data being viewed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0114": {"ttr": 30725, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00L\\x00L\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:01", "lines": 76, "newlines": 76, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0114\nTISPF Services Guide\nT-Chapter 1.\nT-A summary of the ISPF services\nT-Table services\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141500\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 1. Introduction to ISPF services\nN----------------------------------------\nNA summary of the ISPF services\nN------------------------------\nNTable services\nN--------------\nNServices that Affect an Entire Table\nN------------------------------------\nNTBCLOSE:  Closes a table and saves a permanent copy if the table\nN          was opened.\nN\nNTBCREATE: Creates a new table and opens it for processing.\nN\nNTBEND:    Closes a table without saving it.\nN\nNTBERASE:  Deletes a permanent table from the table output file.\nN\nNTBOPEN:   Opens an existing permanent table for processing.\nN\nNTBQUERY:  Obtains information about a table.\nN\nNTBSAVE:   Saves a permanent copy of a table without closing it.\nN\nNTBSORT:   Sorts a table.\nN\nNTBSTATS:  Provides access to statistics for a table.\nN\nNServices that Affect Table Rows\nN-------------------------------\nNTBADD:    Adds a new row to the table.\nN\nNTBBOTTOM: Sets CRP to the last row and retrieves the row.\nN\nNTBDELETE: Deletes a row from the table.\nN\nNTBEXIST:  Tests for the existence of a row (by key).\nN\nNTBGET:    Retrieves a row from the table.\nN\nNTBMOD:    Updates an existing row in the table. Otherwise, adds a new\nN          row to the table.\nN\nNTBPUT:    Updates a row in the table if it exists and if the keys\nN          match.\nN\nNTBSARG:   Establishes a search argument for use with TBSCAN. Can also\nN          be used in conjunction with TBDISPL.\nN\nNTBSCAN:   Searches a table for a row that matches a list of argument\nN          variables, and retrieves the row.\nN\nNTBSKIP:   Moves the CRP forward or backward by a specified number of\nN          rows, and then retrieves the row at which the CRP is\nN          positioned.\nN\nNTBTOP:    Sets CRP to TOP, ahead of the first row.\nN\nNTBVCLEAR: Sets to null dialog variables that correspond to variables\nN          in the table.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0115": {"ttr": 30727, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00.\\x00.\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:01", "lines": 46, "newlines": 46, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0115\nTISPF Services Guide\nT-Chapter 1.\nT-A summary of the ISPF services\nT-Variable services\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141501\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 1. Introduction to ISPF services\nN----------------------------------------\nNA summary of the ISPF services\nN------------------------------\nNVariable services\nN-----------------\nNAll Functions\nN-------------\nNVERASE:   Removes variables from the shared pool or profile pool.\nN\nNVGET:     Retrieves variables from the shared pool or profile pool or\nN          retrieves the value of a system symbolic variable.\nN\nNVPUT:     Updates variables in the shared pool or profile pool.\nN\nNProgram Functions Only\nN----------------------\nNVCOPY:    Copies data from a dialog variable to the program.\nN\nNVDEFINE:  Defines function program variables to ISPF.\nN\nNVDELETE:  Removes the definition of function variables.\nN\nNVMASK:    Associates a mask with a dialog variable.\nN\nNVREPLACE: Updates dialog variables with program data specified in the\nN          service request.\nN\nNVRESET:   Resets function variables.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0116": {"ttr": 30729, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00U\\x00U\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:01", "lines": 85, "newlines": 85, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0116\nTISPF Services Guide\nT-Chapter 1.\nT-A summary of the ISPF services\nT-Miscellaneous services\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141501\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 1. Introduction to ISPF services\nN----------------------------------------\nNA summary of the ISPF services\nN------------------------------\nNMiscellaneous services\nN----------------------\nNCONTROL:  Allows a function to condition ISPF to expect certain kinds\nN          of display output, or to control the disposition of errors\nN          encountered by dialog management services.\nN\nNFILESTAT: Provides statistics about a site on the connected\nN          workstation.\nN\nNFILEXFER: Uploads files from the workstation or downloads files to the\nN          workstation.\nN\nNGETMSG:   Obtains a message and related information and stores them in\nN          variables specified in the service request.\nN\nNGRERROR:  Provides access to the address of the GDDM. error record and\nN          the address of the GDDM call format descriptor module.\nN\nNGRINIT:   Initializes the ISPF/ GDDM interface and optionally requests\nN          that ISPF define a panel's graphic area as a GDDM graphics\nN          field.\nN\nNGRTERM:   Terminates a previously established GDDM interface.\nN\nNLIBDEF:   Provides applications with a method of dynamically defining\nN          application data element files while in an active ISPF\nN          session.\nN\nNLIST:     Allows a dialog to write data lines directly (without using\nN          print commands or utilities) to the ISPF list data set.\nN\nNLOG:      Allows a function to write a message to the ISPF log file.\nN          The user can specify whether the log is to be printed, kept,\nN          or deleted when ISPF is terminated.\nN\nNPQUERY:   Returns information for a specific area on a specific panel.\nN          The type, size, and position characteristics associated with\nN          the area are returned in variables.\nN\nNQBASELIB: Enables an ISPF dialog to obtain the current library\nN          information for a specified DDNAME.\nN\nNQLIBDEF:  Allows an ISPF dialog to obtain the current LIBDEF definition\nN          information, which can be saved by the dialog and used later\nN          to restore any LIBDEF definitions that may have been\nN          overlaid.\nN\nNQTABOPEN: Allows an ISPF dialog to obtain a list of currently open\nN          ISPF tables. The TBSTATS or TBQUERY service can then be used\nN          to obtain more detailed information about each table.\nN\nNQUERYENQ: Allows an ISPF dialog to obtain a list of all system\nN          enqueues, or all system enqueues that match the specified\nN          criteria.\nN\nNTRANS:    Translates data from one Coded Character Set Identifier\nN          (CCSID) to another.\nN\nNWSCON:    Enables the user to connect to the workstation without using\nN          the GUI parameter on the ISPSTART command and the Initiate\nN          Workstation Connection panel from the ISPF settings.\nN\nNWSDISCON: Enables the user to disconnect from the workstation without\nN          having to terminate the ISPF session.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG02": {"ttr": 30731, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00%\\x00%\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:01", "lines": 37, "newlines": 37, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG02\nTISPF Services Guide\nT-Chapter 2. Description of the ISPF services\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180513-162651\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNThe services are listed in alphabetical order.\nN\nNEach service description consists of:\nN\nNDescription:  A description of the function and operation of the\nN              service. This description also refers to other services\nN              that can be used with this service.\nN\nNFormat:       The syntax used to code the service, showing both command\nN              invocation and call invocation.\nN\nNParameters:   A description of any required or optional keywords or\nN              parameters.\nN\nNReturn Codes: A description of the codes returned by the service. For\nN              all services, a return code of 12 or higher implies a\nN              severe error. This error is usually a syntax error, but\nN              can be any severe error detected when using the services.\nN\nNExamples:     Sample usage of the services.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0201": {"ttr": 30733, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00r\\x00r\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:02", "lines": 114, "newlines": 114, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0201\nTISPF Services Guide\nT-Chapter 2.\nT-ADDPOP-Start pop-up window mode\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141502\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNADDPOP-Start pop-up window mode\nN-------------------------------\nNThe ADDPOP service notifies the dialog manager that all subsequent\nMpanel displays are to appear in a pop-up window. No visible results\nMappear on the screen until you issue a DISPLAY, TBDISPL, or\nMSELECT PANEL call.\nN\nNAll subsequent panel displays will be in the pop-up window created with\nMthe ADDPOP call, until a REMPOP or another ADDPOP is called. Another\nMADDPOP call creates a separate pop-up window.\nN\nNEach pop-up window created as a result of a successful ADDPOP service\nNcall can also have a window title. The title is embedded in the top of\nNthe window frame border and can be only one line length. If the title\nNis longer than the window frame, the dialog manager truncates it. To\nNdefine the window title, set system variable ZWINTTL to the desired\nNwindow title text.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"ADDPOP\" ,\nD    \"POPLOC(\"poploc\")\" ,\nI      Specifies that the dialog manager is to position the\nI      pop-up window relative to the specified field in the currently\nI      displayed panel. If omitted, the pop-up window is offset\nI      positioned relative to the active window.\nN\nD    \"ROW(\"row\"\")\" ,\nI      Specifies that the dialog manager is to adjust the field-specific\nI      location row or offset location row by the specified amount. This\nI      amount can be either positive or negative.\nI      The default value is 0.\nN\nD    \"COLUMN(\"column\")\"\nI      Specifies that the dialog manager is to adjust the\nI      field-specific location column or offset location column by the\nI      specified amount. This amount can be positive or negative.\nI      The default value is 0.\nN\nNParameters\nN----------\nNThe poploc, row, and column parameters are optional.\nN\nNote: When running in GUI mode, the poploc, row, and column\nN     parameters are ignored.\nN\nNIf you omit the poploc parameter when using the ADDPOP service, the\nNDialog Manager offset positions the pop-up window so that the title of\nNthe underlying panel is visible, and horizontally four character spaces\nNto the right of the underlying panel.\nN\nNIf the pop-up window will not fit relative to the ADDPOP positioning\nNparameters, the Dialog Manager overrides these parameters and adjusts\nNthe window so that it fits on the screen.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  addpop_rc = RC\nD  SELECT\nD    WHEN (addpop_rc = 0) THEN DO\nD      /* Normal completion. */\nD      NOP\nD    END\nD    WHEN (addpop_rc = 12) THEN DO\nD      /* An ADDPOP service call was issued before a panel was\nD         displayed or another ADDPOP service call was issued before a\nD         panel was displayed for the previous ADDPOP call. */\nD      SAY \"Ask your programmer to fix the logic.\"\nD    END\nD    WHEN (addpop_rc = 20) THEN DO\nD      /* Severe error. */\nD      SAY \"Ask your programmer to fix the logic.\"\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"browse_rc\").\"\nD    END\nD  END\nN\nNExample 1: Multiple Pop-up Windows.\nN-----------------------------------\nI/* REXX */\nI  ADDRESS ISPEXEC\nI  \"ADDPOP\"\nI  \"DISPLAY PANEL(DEM0201A)\"\nI  \"ADDPOP POPLOC(FIELD2)\"\nI  ZWINTTL = \"POPUP WINDOW TITLE\"\nI  \"DISPLAY PANEL(DEM0201B)\"\nI  \"ADDPOP COLUMN(5) ROW(3)\"\nI  ZWINTTL = \"\"\nI  \"DISPLAY PANEL(DEM0201C)\"\nI  EXIT\nN\nMThe Kenneth Tomiak DEMO collection at www.cbttape.org contains this\nMexample and the (renamed) accompanying panels.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0202": {"ttr": 30977, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00\\xc0\\x00\\xc0\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:02", "lines": 192, "newlines": 192, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0202\nTISPF Services Guide\nT-Chapter 2.\nT-BRIF-Browse interface\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141502\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNBRIF-Browse interface\nN---------------------\nNThe Browse Interface (BRIF) service provides browse functions for data\nNaccessed through dialog-supplied I/O routines. The invoking dialog must\nNperform all environment-dependent functions such as file allocation,\nNopening, reading, closing, and freeing. The dialog is also responsible\nNfor any Enqueue/Dequeue serialization that is required. With the dialog\nNproviding the I/O routines, BRIF allows you to:\nN\nN-> Browse data other than partitioned data sets or sequential files,\nN   such as subsystem data and in-storage data.\nN\nN-> Do preprocessing of the data being browsed.\nN\nNThe invoking dialog provides addresses of routines that will:\nN\nN-> Respond to a read request for a specific record by its relative\nN   position in the data.\nN\nN-> Perform processing for the BROWSE primary command. If this routine\nN   is not provided, ISPF will process any request for the BROWSE\nN   primary command. All addresses must be 31-bit addresses, and the\nN   routines must have an addressing mode (AMODE) of 31.\nN\nNThe dialog-supplied read, write, and command processing routines are\nNcalled directly by ISPF at the same task level (TCB) that displays the\nNISPF screens. If you need to ensure that your program runs at the same\nNtask level as the routines, use the SELECT PGM( ) service to start your\nNprogram. This may be a factor if your program expects to create or\nNshare data spaces or other task-specific resources between the main\nNprogram and the read, write, or command routines.\nN\nNCommand invocation format\nN-------------------------\nNCommand procedures cannot be used to invoke this service.\nN\nMWhat-if someone used LINKMVS on ISPLINK? Hmmm.\nN\nNCall invocation format\nN----------------------\nD  CALL ISPLINK ('BRIFbbbb', +\nD      data-name | 'b', +\nI        This parameter allows you to specify a data name for the source\nI        data to be browsed. This name will be displayed in the Title\nI        line of the default Browse panel; if data-name is not\nI        specified, no name is displayed on the panel. This parameter\nI        must not have any embedded blanks, and its maximum length is\nI        54 characters. This name is stored in ZDSNT in the function\nI        pool.\nN\nD      rec-format, +\nI        The record format of the data to be browsed:\nI        -> F - fixed\nI        -> FA - fixed (ASA printer control characters)\nI        -> FM - fixed (machine code printer control characters)\nI        -> V - variable\nI        -> VA - variable (ASA printer control characters)\nI        -> VM - variable (machine code printer control characters)\nI        -> U - undefined.\nN\nD      rec-len, +\nI        The record length, in bytes, of the data to be browsed. For\nI        variable and undefined record formats, this is the maximum\nI        record length. This parameter must be a positive numeric value\nI        with a maximum value of 32,760 bytes.\nN\nI        The dialog can hide data during a Browse session by specifying\nI        the record length to be less than the actual data being\nI        browsed. By doing this, BRIF displays only the data up to the\nI        specified record length.\nN\nD      read-routine, +\nI        A fullword address indicating the entry point of a\nI        dialog-supplied read routine. See \"Read routinein the manual\nI        for more information about this parameter.\nN\nI        If a read-routine displays its own panel, then a CONTROL\nI        DISPLAY SAVE should be done at the beginning of the panel and\nI        a CONTROL DISPLAY RESTORE should be done at the end.\nN\nD      cmd-routine | 'b', +\nI        A fullword address indicating the entry point of a\nI        dialog-supplied routine that processes the BROWSE primary\nI        command or any dialog-specific primary commands. See \"Command\nI        routine\" in the manual for more information about this\nI        parameter. If this  parameter is not specified, ISPF initiates\nI        a recursive Browse session to handle any request for the BROWSE\nI        primary command.\nN\nI        If a cmd-routine displays its own panel, then a CONTROL DISPLAY\nI        SAVE should be done at the beginning of the panel and a CONTROL\nI        DISPLAY RESTORE should be done at the end.\nN\nD      dialog-data | 'b', +\nI        A fullword address indicating the beginning of a dialog data\nI        area. This address is passed to the dialog-supplied routines.\nI        If no address is supplied, zeros are passed to the dialog\nI        routines. This data area provides a communication area for the\nI        dialog.\nN\nD      ISRBROBA | panel-name | 'b', +\nI        The name of the panel to use for displaying the data. The\nI        default is the standard Browse data display panel (ISRBROBA).\nI        Refer to GC19-3623-30 (f54PC00_v2r3.pdf) z/OS ISPF Planning and\nI        Customizing for information about developing a customized\nI        panel.\nN\nM        SC19-3619-30 (f54dg00_v2r3.pdf) ISPF Dialog Developer's Guide\nM        and Reference Chapter 6 and Chapter 7 have the details you want\nM        for defining a panel.\nN\nD      format-name | 'b', +\nI        The name of the format to be used to reformat the data. The\nI        default is no format. This parameter is provided to support the\nI        IBM 5550 terminal using the Double-Byte Character Set (DBCS).\nN\nD      'NObbbbb' | 'YESbbbb' | 'b' +\nI        Specifies whether the data is treated as mixed-mode DBCS data.\nI        If YES is specified, the BRIF service treats the data as\nI        mixed-mode DBCS data. If NO is specified, the data is treated\nI        as EBCDIC (single-byte) data. This parameter is provided to\nI        support the IBM 5550 terminal using the Double-Byte Character\nI        Set (DBCS).\nN\nD    )\nN\nNDialog-supplied routines\nN------------------------\nMSee EDIF in the manual for several pages on how to code dialog-supplied\nMroutines.\nN\nNBRIF service Return codes\nN-------------------------\nNThese return codes are possible:\nN\nD  call_brif_rc = RC\nD  SELECT\nD    WHEN (call_brif_rc = 0) THEN DO\nD      /* Normal completion. */\nD      NOP\nD    END\nD    WHEN (call_brif_rc = 12) THEN DO\nD      /* No data to browse. */\nD      SAY \"Ask your programmer to display it is an empty data set.\"\nD    END\nD    WHEN (call_brif_rc = 16) THEN DO\nD      /* Unexpected return code received from a dialog-supplied\nD         routine; unable to continue. When an unexpected return code\nD         is received, the BRIF service terminates immediately with a\nD         return code of 16. */\nD      SAY \"Ask your programmer to fix the the failing\" ,\nD        \"dialog-supplied routine.\"\nD    END\nD    WHEN (call_brif_rc = 20) THEN DO\nD      /* Severe error; unable to continue. */\nD      SAY \"Ask your programmer to fix the logic.\"\nD    END\nN\nNExample 1:\nN----------\nNFor a more complete example of using BRIF, including dialog-supplied\nNI/O routines and source code, see SC19-3619-30 (f54dg00_v2r3.pdf)\nNz/OS ISPF Dialog Developer's Guide and Reference.\nN\nMBefore you chase down SC19-3619-30 (f54dg00_v2r3.pdf), here is the\nMimportant sentence from that manual:\nM\nMSee the z/OS ISPF Services Guide for descriptions and examples of BRIF,\nMEDIF, and EDIREC.\nM\nMAnd you are already here.\nMSee EDIF in the manual for several pages on how to code dialog-supplied\nMroutines.\nN\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0203": {"ttr": 30979, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x01\\x01\\x01\\x01\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:02", "lines": 257, "newlines": 257, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0203\nTISPF Services Guide\nT-Chapter 2.\nT-BROWSE-Browse a data set\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141502\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNBROWSE-Browse a data set\nN------------------------\nNThe BROWSE service provides an interface to the Browse function and\nNbypasses the display of the View Entry Panel. For a complete\nNdescription of the Browse function see SC19-3627-30 (f54ug00.pdf)\nNz/OS ISPF User's Guide Volume II.\nN\nNThe BROWSE service allows you to use a customized panel for displaying\nNdata. Panel ISRBROB should be used as a model for your customized\nNpanel. You can also use the BROWSE service recursively, either through\nNnested dialogs or by entering a BROWSE command while browsing. BROWSE\nNallows you to browse up to a maximum of 99,999,999 records.\nN\nNBROWSE can be used to look at any ISPF library, concatenation of ISPF\nNlibraries, or data set that can be allocated by using the LMINIT\nNservice. However, it cannot be used by a PL/I main program that also\nNuses subtasking. The BRIF service allows you to browse data types not\nNsupported by ISPF.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nD  ADDRESS ISPEXEC \"BROWSE\" ,\nD    \"DATASET(\"dsname\")\" ,\nI      The data set name, in TSO syntax, of the data set to be browsed.\nI      This is equivalent to the \"other\" data set name on the View Entry\nI      Panel. You can specify a fully qualified data set name enclosed\nI      in apostrophes. If the apostrophes are omitted, the TSO data set\nI      prefix from the user's TSO profile is automatically attached to\nI      the data set name. The maximum length of this parameter is\nI      56 characters.\nN\nI      For ISPF libraries and MVS partitioned data sets, you can specify\nI      a member name or pattern enclosed in parentheses. If a member\nI      name is not included, or a pattern is specified as part of the\nI      dsname specification when the DATASET keyword is used, a member\nI      selection list for the ISPF library, concatenation of libraries,\nI      or MVS partitioned data set is displayed. See the topic on naming\nI      ISPF libraries and data sets in SC19-3627-30 (bf54ug00_v2r3.pdf)\nI      ISPF User's Guide Volume I for a complete description of patterns\nI      and pattern matching.\nN\nI      Note: You can also specify a VSAM data set name. If a VSAM data\nI      set is specified, ISPF checks the ISPF configuration table to\nI      see if VSAM support is enabled. If it is, the specified tool is\nI      invoked. If VSAM support is not enabled, an error message is\nI      displayed.\nN\nM      IBM FileManager for z/OS supports VSAM data sets.\nN\nD    \"VOLUME(\"serial\")\" /* Not needed for catalogued data sets */ ,\nI      The serial number of the volume on which the data set resides. If\nI      you omit this parameter or code it as blank, the system catalog\nI      is searched for the data set name.\nM      The system catalog is your friend!\nI      The maximum length of this parameter is 6 characters.\nN\nN    \"PASSWORD(\"pswd-value\")\" ,\nN      /* Obsolete if you have CA-ACF2, RACF, CA-Top-Secret. */ ,\nI      The password if the data set has MVS password protection. Do not\nI      specify a password for data sets that are protected by Resource\nI      Access Control Facility (RACF), CA-ACF2, OR CA-Top-Secret.\nN\nD    \"PANEL(\"panel-name\")\" ,\nI      The name of a customized browse panel that you create, to be used\nI      when displaying the data. See GC19-3623-30 (f54pc00_v2r3.pdf)\nI      z/OS ISPF Planning and Customizing for information about\nI      developing a customized panel.\nN\nM      SC19-3619-00 (isp2dg00.pdf) Dialog Developer's Guide and\nM      Reference will provide the details about coding a panel.\nN\nD    \"FORMAT(\"format-name\")\" ,\nI      The name of the format to be used to reformat the data. The\nI      format-name parameter is provided to support the IBM 5550\nI      terminal using the Double-Byte Character Set (DBCS).\nN\nD    \"MIXED(NO | YES)\"\nI      For the MIXED parameter, if YES is specified, the BROWSE service\nI      treats the data as mixed-mode DBCS data. If NO is specified, the\nI      data is treated as EBCDIC (single-byte) data. This parameter is\nI      provided to support the IBM 5550 terminal using the Double-Byte\nI      Character Set (DBCS).\nN\nN  or\nN\nD  ADDRESS ISPEXEC \"BROWSE\" ,\nD    \"DATAID(\"data-id\")\" ,\nI      The data ID that was returned from the LMINIT service. The\nI      maximum length of this parameter is 8 characters.\nN\nI      You can use the LMINIT service in either of two ways before\nI      invoking the BROWSE service:\nN\nI      ->  You can use LMINIT to allocate existing data sets by\nI          specifying a data set name or ISPF library qualifiers.\nI          LMINIT returns a data ID as output. This data ID, rather\nI          than a data set name, is then passed as input to the BROWSE\nI          service.\nN\nI      -> The dialog can allocate its own data set by using the\nI         TSO ALLOCATE command or MVS dynamic allocation, and then pass\nI         the ddname to LMINIT. Again, a data ID is returned as output\nI         from LMINIT and subsequently passed to the BROWSE service.\nI         This procedure is called the ddname interface to BROWSE. It is\nI         particularly useful for browsing VIO data sets, which cannot\nI         be accessed by data set name because they are not cataloged.\nN\nI      Note: Using the data ID of a multivolume data set causes Browse\nI      to look at all volumes of that data set. If you want to look at\nI      just one volume of a multivolume data set, use the data set name\nI      and volume number.\nN\nD    \"MEMBER(\"member-name\")\" ,\nI      A member of an ISPF library or MVS partitioned data set, or a\nI      pattern. If you do not specify a member name when the MEMBER\nI      keyword or call invocation is used, or if a pattern is specified,\nI      a member selection list for the ISPF library, concatenation of\nI      libraries, or MVS partitioned data set is displayed.\nN\nD    \"PANEL(\"panel-name\")\" ,\nI      The name of a customized browse panel that you create, to be used\nI      when displaying the data. See GC19-3623-30 (f54pc00_v2r3.pdf)\nI      z/OS ISPF Planning and Customizing for information about\nI      developing a customized panel.\nN\nM      SC19-3619-00 (isp2dg00.pdf) Dialog Developer's Guide and\nM      Reference will provide the details about coding a panel.\nN\nD    \"FORMAT(\"format-name\")\" ,\nI      The name of the format to be used to reformat the data. The\nI      format-name parameter is provided to support the IBM 5550\nI      terminal using the Double-Byte Character Set (DBCS).\nN\nD    \"MIXED(NO | YES)\"\nI      For the MIXED parameter, if YES is specified, the BROWSE service\nI      treats the data as mixed-mode DBCS data. If NO is specified, the\nI      data is treated as EBCDIC (single-byte) data. This parameter is\nI      provided to support the IBM 5550 terminal using the Double-Byte\nI      Character Set (DBCS).\nN\nN  or\nN\nD  ADDRESS ISPEXEC \"BROWSE\" ,\nD    \"FILE(filevar)\" ,\nI      The name of an ISPF variable containing the path name for a\nI      z/OS UNIX regular file or directory. If the path name is for a\nI      directory, a directory selection list is displayed.\nN\nD    \"PANEL(\"panel-name\")\" ,\nI      The name of a customized browse panel that you create, to be used\nI      when displaying the data. See GC19-3623-30 (f54pc00_v2r3.pdf)\nI      z/OS ISPF Planning and Customizing for information about\nI      developing a customized panel.\nN\nM      SC19-3619-00 (isp2dg00.pdf) Dialog Developer's Guide and\nM      Reference will provide the details about coding a panel.\nN\nD    \"FORMAT(\"format-name\")\" ,\nI      The name of the format to be used to reformat the data. The\nI      format-name parameter is provided to support the IBM 5550\nI      terminal using the Double-Byte Character Set (DBCS).\nN\nD    \"MIXED(NO | YES)\"\nI      For the MIXED parameter, if YES is specified, the BROWSE service\nI      treats the data as mixed-mode DBCS data. If NO is specified, the\nI      data is treated as EBCDIC (single-byte) data. This parameter is\nI      provided to support the IBM 5550 terminal using the Double-Byte\nI      Character Set (DBCS).\nN\nD    \"RECLEN(\"rec-len\")\"\nI      A numeric value specifying the record length to be used when\nI      browsing a z/OS UNIX file. This parameter causes newline\nI      characters in the data to be ignored as record delimiters.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  browse_rc = RC\nD  SELECT\nD    WHEN (browse_rc = 0) THEN DO\nD      /* Normal completion. */\nD      NOP\nD    END\nD    WHEN (browse_rc = 12) THEN DO\nD      /* Zero-length data; empty sequential data set or z/OS UNIX\nD         file, or zero-length member of a partitioned data set. */\nD      SAY \"Ask your programmer to handle this condition.\"\nD    END\nD    WHEN (browse_rc = 14) THEN DO\nD      /* Specified member not found. */\nD      SAY \"Ask your programmer to fix the logic.\"\nD      SAY \"Use SYSDSN('dsname(member)') to verify existence.\"\nD    END\nD    WHEN (browse_rc = 16) THEN DO\nD      /* Either:\nD         -> No members matched the specified pattern.\nD         -> No members in the partitioned data set. */\nD      SAY \"Use SETMSG() to let the user know what happened.\"\nD    END\nD    WHEN (browse_rc = 18) THEN DO\nD      /* A VSAM data set was specified but the ISPF Configuration\nD         Table does not allow VSAM processing. */\nD      SAY \"Use SETMSG() to let the user know what happened.\"\nD    END\nD    WHEN (browse_rc = 20) THEN DO\nD      /* Severe error; unable to continue. */\nD      SAY \"Ask your programmer to fix the logic.\"\nD      ZERRHM = \"*\"\nD      ZERRALRM = \"YES\"\nD      ADDRESS ISPEXEC \"SETMSG MSG(ISRZ002)\"\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"browse_rc\").\"\nD    END\nD  END\nN\nNExample 1: Invoke the BROWSE service to give you a member list\nN--------------------------------------------------------------\nI  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nN\nI  ADDRESS ISPEXEC \"BROWSE DATASET('ISPFPROJ.FTOUTPUT(TEL*)')\"\nN\nN  or\nN\nI  ADDRESS ISPEXEC \"LMINIT DATAID(DDBROW)\" ,\nI    \"DATASET('ISPFPROJ.FTOUTPUT')\"\nI  ADDRESS ISPEXEC \"BROWSE DATAID(&DDBROW) MEMBER(TEL*)\"\nI  ADDRESS ISPEXEC \"LMFREE DATAID(&DDBROW)\"\nN\nN  or\nN\nI  filevar = '/u/user1/filea'\nI  ADDRESS ISPEXEC \"BROWSE FILE(FILEVAR)\"\nN\nNExample 2: Browse a member\nN--------------------------\nI  ADDRESS ISPEXEC \"BROWSE DATASET(DEMO.REXX(ISPG0203))\"\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0204": {"ttr": 31233, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x02\"\\x02\"\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:02", "lines": 546, "newlines": 546, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0204\nTISPF Services Guide\nT-Chapter 2.\nT-CONTROL-Set processing modes\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141502\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNCONTROL-Set processing modes\nN----------------------------\nNThe CONTROL service defines certain processing options for the dialog\nNenvironment. It allows a function to condition ISPF to expect certain\nNkinds of display output, or to control the disposition of errors\nNencountered by other DM component services. The processing options\nNcontrol the display screen and error processing.\nN\nNADDPOP/REMPOP service in relation to CONTROL service\nN----------------------------------------------------\nNThe ADDPOP service performs the equivalent of a CONTROL DISPLAY SAVE\nNprior to creating the pop-up window and the REMPOP service performs\nNthe equivalent of a CONTROL DISPLAY RESTORE after removing the current\nNpop-up window. A dialog should not issue its own CONTROL DISPLAY\nNSAVE/RESTORE around an ADDPOP/REMPOP sequence.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"CONTROL\" ,\nI    \"DISPLAY\" | \"NONDISPL\" | \"ERRORS\" | \"SPLIT\" | \"NOCMD\" |\nI    \"SUBTASK\" | \"TSOGUI\" | \"REFLIST\" | \"LE\" | \"PASSTHRU\"\nN    -------------------------------------------------------\nN\nN-----------------------------------------------------------------------\nD    \"DISPLAY\" ,\nI      Specifies that a display mode is to be set. The valid modes are\nI      LOCK, LINE, REFRESH, SAVE, RESTORE, SM, and ALLVALID. LINE mode\nI      is in effect until the next display of an ISPF panel. REFRESH\nI      occurs on the next display of an ISPF panel.\nN\nI      \"LOCK\" | \"LINE\" | \"SM\" | \"REFRESH\" | \"SAVE\" |\nI      \"RESTORE\" | \"ALLVALID\"\nN      ---------------------------------------------\nD      \"LOCK\" ,\nI        Specifies that the next (and only the next) display\nI        output (such as output from the DISPLAY or TBDISPL service)\nI        is to leave the terminal user's keyboard locked. ISPF\nI        processes the next display output as though the user had\nI        pressed the Enter key. It is the dialog developer's\nI        responsibility to ensure that the keyboard is unlocked by the\nI        subsequent display of a message or panel.\nN\nI        While the keyboard is locked, the screen is not protected from\nI        being overlaid by line-mode messages. To ensure that the screen\nI        is fully rewritten you must follow the CONTROL DISPLAY LOCK\nI        request with a CONTROL DISPLAY LINE request.\nN\nI        CONTROL DISPLAY LOCK can be used to display an \"in process\"\nI        message during a long-running operation.\nN\nD      \"LINE\" ,\nI        Specifies that terminal line-mode output is expected, for\nI        example from a TSO command or program dialog. The screen is\nI        completely rewritten on the next ISPF full-screen write\nI        operation, after the lines have been written.\nN\nI        Note: CONTROL DISPLAY LINE is automatically invoked by the\nI        SELECT service whenever a SELECT CMD request is encountered,\nI        unless the command begins with a percent (%) sign. For example:\nN\nI        -> SELECT CMD(ABC) - causes automatic entry into line mode\nI        -> SELECT CMD(%ABC)- no automatic entry into line mode.\nN\nI        The MODE parameter of the SELECT service can be used to\nI        override this use of the percent sign.\nN\nD        \"START(line-number)\"\nI          This parameter specifies the line number on the screen where\nI          the line-mode output is to begin. (The first line on the\nI          screen is line number 1.) The screen is erased from this line\nI          to the bottom. If this parameter is omitted or coded as zero,\nI          the value defaults to the end of the body of the currently\nI          displayed panel.\nN\nI          The line-number parameter must have an integer value. For a\nI          call, it must be a fullword fixed binary integer. The\nI          parameter should specify a line value that is not within\nI          three lines of the bottom of the logical screen. If the value\nI          is within three lines of the bottom of the logical screen, a\nI          default line value is used. This value is equivalent to the\nI          number of the bottom line of the screen, minus 3.\nN\nI          This parameter is meaningful only when entering line mode. It\nI          can be specified with the SM keyword, since SM reverts to\nI          LINE if the Session Manager is not installed. Once line mode\nI          has been set, subsequent attempts to set line mode (without\nI          intervening full-screen output) are ignored. Accordingly, the\nI          line-number, once set, cannot be changed.\nN\nI          For DBCS terminals, CONTROL DISPLAY LINE always clears the\nI          screen and places the cursor on line 1, regardless of the\nI          line-number value.\nN\nD      \"SM\" ,\nI        Specifies that the TSO Session Manager is to take control of\nI        the screen when the next line-mode output is issued. If the\nI        Session Manager is not installed, the SM keyword is treated as\nI        LINE.\nN\nI        Note: If you specify the SM keyword when graphics interface\nI        mode is active (for example, following a GRINIT service request\nI        but before a GRTERM service request has been issued), Session\nI        Manager does not get control of the screen. In this case, the\nI        SM keyword is treated as LINE.\nN\nD        \"START(line-number)\"\nI          This parameter specifies the line number on the screen where\nI          the line-mode output is to begin. (The first line on the\nI          screen is line number 1.) The screen is erased from this line\nI          to the bottom. If this parameter is omitted or coded as zero,\nI          the value defaults to the end of the body of the currently\nI          displayed panel.\nN\nI          The line-number parameter must have an integer value. For a\nI          call, it must be a fullword fixed binary integer. The\nI          parameter should specify a line value that is not within\nI          three lines of the bottom of the logical screen. If the value\nI          is within three lines of the bottom of the logical screen, a\nI          default line value is used. This value is equivalent to the\nI          number of the bottom line of the screen, minus 3.\nN\nI          This parameter is meaningful only when entering line mode. It\nI          can be specified with the SM keyword, since SM reverts to\nI          LINE if the Session Manager is not installed. Once line mode\nI          has been set, subsequent attempts to set line mode (without\nI          intervening full-screen output) are ignored. Accordingly, the\nI          line-number, once set, cannot be changed.\nN\nI          For DBCS terminals, CONTROL DISPLAY LINE always clears the\nI          screen and places the cursor on line 1, regardless of the\nI          line-number value.\nN\nD      \"REFRESH\"\nI        Specifies that the entire screen image is to be rewritten when\nI        the next ISPF-generated full-screen write is issued to the\nI        terminal. This facility should be used before or after invoking\nI        any program that uses non-ISPF services for generating\nI        full-screen output. Be aware that REFRESH does not always\nI        result in a return to full-screen mode. To ensure a return to\nI        full-screen mode in ISPF, the dialog should issue\nI        CONTROL DISPLAY LINE.\nN\nD      \"SAVE\"\nI        Used in conjunction with DISPLAY, TBDISPL, BROWSE, EDIT, or\nI        VIEW processing to indicate that information about the\nI        current logical screen, including control information, is to\nI        be saved.\nN\nI        Use of the CONTROL service SAVE and RESTORE parameters allows\nI        DISPLAY, TBDISPL, BROWSE, EDIT, or VIEW processing to be\nI        nested. The CONTROL service should be used to save and\nI        restore the environment at each level. SAVE and RESTORE must\nI        be issued in pairs. Issue SAVE following the screen display;\nI        issue RESTORE before the next request for the saved panel.\nN\nI        A command entered by the user in the command field of a\nI        displayed panel causes the dialog manager to issue a SELECT\nI        service request for the dialog to process the command. The\nI        current display environment is automatically saved before\nI        invoking the designated dialog. That environment is\nI        subsequently restored when the dialog ends.\nN\nI        The current DISPLAY environment that existed before the SAVE\nI        is not available to a nested processing level.\nN\nI        Table display service system variables, ZTD*, are not saved\nI        as part of the SAVE/RESTORE information. The values of these\nI        variables may be saved by the dialog developer before\nI        invoking another table display and restored before resuming\nI        processing of the initial table display. Also, the ZVERB\nI        variable is not saved.\nN\nD      \"RESTORE\"\nI        Specifies the restoration of information previously saved by\nI        CONTROL DISPLAY SAVE. The logical screen image is restored\nI        exactly as it appeared when the SAVE was performed.\nI        Processing of the previous panel or table display can then be\nI        resumed.\nN\nD      \"ALLVALID\"\nI        Specifies that ISPF is to consider all displayed code points\nI        from X'40' to X'FE' as valid. This specification applies to all\nI        subsequent DISPLAY and TBDISPL service requests within the\nI        current SELECT level only and remains in effect until the\nI        SELECT level ends. It is not propagated to lower SELECT levels.\nN\nI        It is the responsibility of the dialog to ensure that the code\nI        points are displayable without a hardware error before issuing\nI        this option.\nN\nN-----------------------------------------------------------------------\nD    \"NONDISPL\" ,\nI      Specifies that no display output is to be issued to the terminal\nI      when processing the next panel definition. This option is in\nI      effect only for the next panel; after that, normal display mode\nI      is resumed. Initializing the ZCMD variable to a value may cause\nI      a panel to display after 'CONTROL NONDISPL' has been issued. This\nI      can be circumvented by using the COMMAND option of the DISPLAY\nI      service which will cause the panel specified on the DISPLAY\nI      service to be processed in CONTROL NONDISPL ENTER mode.\nN\nI      Note: NONDISPL mode stays active until the next panel definition\nI      is processed; that is, until the PROC section of a panel display\nI      has been completed. Error conditions, such as an error in the\nI      panels INIT section, or an action coded in an INIT section, such\nI      as .RESP=ENTER, causes panel processing to bypass the panels\nI      PROC section, leaving CONTROL NONDISPL active until the PROC\nI      section of the next panel is processed.\nN\nI      \"ENTER\" | \"END\"\nN      ---------------\nD      \"ENTER\" ,\nI        Specifies that the Enter key is to be simulated as the user\nI        response to the NONDISPL processing for the next panel.\nN\nD      \"END\" ,\nI        Specifies that the END command is to be simulated as the user\nI        response to the NONDISPL processing for the next panel.\nN\nD      \"NOSETMSG\"\nI        Specifies that the SETMSG Service message is to be suppressed\nI        when the panel on which it was intended to be displayed is\nI        suppressed by the CONTROL NONDISPL ENTER Service, but an error\nI        when processing the panel causes the panel to be displayed. The\nI        NOSETMSG parameter is, in effect, only for the next panel. the\nI        NOSETMSG parameter is ignored on the CONTROL NONDISPL END\nI        Service.\nN\nN-----------------------------------------------------------------------\nD    \"ERRORS\" ,\nI      Specifies that an error mode is to be set. The valid modes are\nI      CANCEL and RETURN. If the RETURN mode is set, it applies only to\nI      the function that set it using this, the CONTROL, service. The\nI      error mode that has been set is not propagated to any new\nI      function invoked by the SELECT service.\nN\nI      \"CANCEL\" | \"RETURN\"\nN      -------------------\nD      \"CANCEL\"\nI        Specifies that the dialog is to be terminated on an error\nI        resulting from a return code of 12 or higher from any service.\nI        A message is written to the ISPF log file, and a panel is\nI        displayed to describe the particular error situation. In batch\nI        mode, messages are written to the SYSTSPRT data set.\nN\nD      \"RETURN\"\nI        Specifies that control is to be returned to the dialog on an\nI        error. System variables ZERRxxxx, as described in \"Return codes\nI        from services\" contain the information for the message that\nI        describes the error. The message is not written to the ISPF\nI        log file unless TRACE mode is in effect, and no error panel is\nI        displayed. If you want the dialog to abend with STAE you must\nI        specify CONTROL ERRORS RETURN, because specification of\nI        CONTROL ERRORS CANCEL nullifies the requested STAE.\nN\nN-----------------------------------------------------------------------\nD    \"SPLIT\" ,\nI      Specifies the user's ability to enter split-screen mode, as\nI      defined by the ENABLE or DISABLE keyword.\nN\nI      \"ENABLE\" | \"DISABLE\"\nN      --------------------\nD      \"ENABLE\"\nI        Specifies that the user is to be allowed to enter split-screen\nI        mode. Split-screen mode is normally enabled. It is disabled\nI        only if explicitly requested by use of the CONTROL service. It\nI        remains disabled until explicitly re-enabled by the CONTROL\nI        service. Because SPLIT commands are not supported when ISPF is\nI        running in the batch environment, issuing CONTROL SPLIT ENABLE\nI        results in a severe error (return code 20).\nN\nD      \"DISABLE\"\nI        Specifies that the user's ability to enter split-screen mode is\nI        to be disabled, until explicitly enabled by the CONTROL\nI        service. If the user is already in split screen mode, a return\nI        code of 8 is issued and split-screen mode remains enabled.\nN\nN-----------------------------------------------------------------------\nD    \"NOCMD\"\nI      Specifies that for the next displayed panel only, any command\nI      entered on the command line or through use of a function key is\nI      not to be honored. NOCMD is in effect for any redisplay of the\nI      panel.\nN\nN-----------------------------------------------------------------------\nD    \"SUBTASK\" ,\nI      This option pertains to multi-task program dialogs that are\nI      invoked as TSO commands by the CMD interface of the SELECT\nI      service.\nN\nI      \"PROTECT\" | \"CLEAR\"\nN      -------------------\nD      \"PROTECT\"\nI        Specifies that ISPF is to establish an ESTAE routine to trap\nI        and ignore the abend that occurs when ISPF tries to POST a\nI        subtask that no longer exists.\nN\nM        See additional information in the manual.\nN\nD      \"CLEAR\"\nI        Specifies that ESTAE protection on the POST of a subtask is to\nI        be terminated.\nN\nN-----------------------------------------------------------------------\nD    \"TSOGUI\" ,\nI      ISPF/TSO window.\nN\nI      Note:\nI      1. CONTROL TSOGUI is ignored if you are not running ISPF GUI with\nI         TSO line mode support.\nN\nI      2. CONTROL TSOGUI defaults to ON during ISPF GUI session\nI         initialization.\nN\nI      \"QUERY\" | \"OFF\" | \"ON\"\nN      ----------------------\nD      \"QUERY\"\nI        Gives the current status of the ISPF/TSO window:\nN\nI        RC = 0: Either the user is not running ISPF GUI with TSO line\nI          mode support or TSOGUI is OFF. All TSO input and output is\nI          directed to the 3270 session.\nN\nI        RC = 1: All TSO line mode output is displayed in the ISPF/TSO\nI          window and line mode input must be entered into the ISPF/TSO\nI          window's input field.\nN\nD      \"OFF\"\nI        Specifies that the ISPF/TSO window is suspended and all full\nI        screen and line mode data appear in the 3270 window until\nI        CONTROL TSOGUI ON is issued.\nN\nD      \"ON\"\nI        Specifies that the ISPF/TSO window is to be resumed and all\nI        TSO line mode output and input is directed to the ISPF/TSO\nI        window.\nN\nN-----------------------------------------------------------------------\nD    \"REFLIST\" ,\nI      Data set and library reference lists.\nN\nI      Note:\nI      1. The CONTROL REFLIST command is used to enable or disable\nI         automatic updates to the reference lists. It is intended to\nI         be used around calls to ISPF services that normally cause\nI         entries in the reference lists. These services include EDIT,\nI         BROWSE, VIEW, and LMINIT.\nN\nI      2. When NOUPDATE is specified, the reference list is not updated,\nI         even if the user settings request updates. This is so programs\nI         can ensure that they do not fill up the reference list with\nI         names that the user would never want to see, such as temporary\nI         or intermediate files.\nN\nI      3. The program invoking the CONTROL REFLIST NOUPDATE command to\nI         turn off reference list updates must specify CONTROL REFLIST\nI         UPDATE before it exits. It is recommended that you issue a\nI         CONTROL REFLIST NOUPDATE immediately before the service that\nI         would normally update the reference list (such as LMINIT,\nI         EDIT, or BROWSE) and issue a CONTROL REFLIST UPDATE\nI         immediately after the service returns.\nN\nI      4. There is only one CONTROL REFLIST setting for each logical\nI         screen (or split screen), and using this command can affect\nI         updates in the logical screen after the invoking program ends.\nN\nI      \"UPDATE\" | \"NOUPDATE\"\nN      ---------------------\nD      \"UPDATE\"\nI        Enable ISPF allocations to add entries to the data set and\nI        library reference lists.\nN\nD      \"NOUPDATE\"\nI        Do not allow ISPF allocations to add entries to the data set\nI        and library reference lists.\nN\nN-----------------------------------------------------------------------\nD    \"LE\" ,\nI      ISPF initialization for Language Environment support.\nN\nI      \"ON\" | \"OFF\"\nN      ------------\nD      \"ON\"\nI        CONTROL LE ON is required before each BRIF or EDIF call where\nI        the application has provided Language Environment-enabled\nI        command, read, or write routines.\nN\nD      \"OFF\"\nI        CONTROL LE OFF is required after each such call.\nN\nN-----------------------------------------------------------------------\nD    \"PASSTHRU\"\nI      Specifies if LEFT and RIGHT processing are being passed to the\nI      dialog program for processing.\nN\nI      \"LRSCROLL\"\nI        LEFT and RIGHT scrolling.\nN\nI        \"PASQUERY\" | \"PASOFF\" | \"PASON\"\nN        -------------------------------\nd        \"PASQUERY\"\nI          Gives the current status of processing for the LEFT and RIGHT\nI          scroll commands:\nN\nI          RC = 0: The LEFT and RIGHT scroll commands are not being\nI            passed to the dialog program.\nN\nI          RC = 1: The LEFT and RIGHT scroll commands are being passed\nI            to the dialog program for processing.\nN\nD        \"PASOFF\"\nI          Specifies that the LEFT and RIGHT scroll commands are not to\nI          be passed to the dialog program.\nN\nD         \"PASON\"\nI           Specifies that the LEFT and RIGHT scroll commands are to be\nI           passed to the dialog program for processing.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  control_rc = RC\nD  SELECT\nD    WHEN (control_rc = 0) THEN DO\nD      /* Normal completion. */\nD      NOP\nD    END\nD    WHEN (control_rc = 8) THEN DO\nD      /* Split-screen mode already in effect. Applies only to a\nD         SPLIT DISABLE request. Split-screen mode remains enabled. */\nD      SAY \"Ask your programmer to alter the logic.\"\nD    END\nD    WHEN (control_rc = 20) THEN DO\nD      /* Severe error. */\nD      SAY \"Ask your programmer to fix the logic.\"\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"control_rc\").\"\nD    END\nD  END\nN\nNExample 1: ERRORS - Allow the dialog function to process return codes.\nN----------------------------------------------------------------------\nI  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nN\nMProgramming Using The Keneth Tomiak Method calls for always using\nMthis statement.\nN\nNExample 2: DISPLAY - Lock the screen while displaying a status message.\nN-----------------------------------------------------------------------\nI  ADDRESS ISPEXEC \"CONTROL DISPLAY LOCK\"\nI  control_rc = RC\nI  ADDRESS ISPEXEC \"DISPLAY PANEL(ISPG204A)\"\nI  ADDRESS ISPEXEC \"DISPLAY MSG(ISPG204C)\"\nI  display_rc = RC\nI  say \"DISPLAY MSG RC(\"display_rc\").\"\nN\nNExample 3: NONDISPL - Process a panel definition without displaying it.\nN-----------------------------------------------------------------------\nI  ADDRESS ISPEXEC \"CONTROL NONDISPL\"\nI  ADDRESS ISPEXEC \"DISPLAY PANEL(ISPG201A)\"\nN\nNExample 4: SPLIT.\nN-----------------\nMYou have no good reason for using this!\nN\nNExample 5: NOCMD.\nN-----------------\nN\nNExample 6: SUBTASK.\nN-------------------\nN\nNExample 7: TSOGUI.\nN------------------\nI  ADDRESS ISPEXEC \"CONTROL TSOGUI QUERY\"\nI  tsogui_rc = RC\nI  SELECT\nI    WHEN (tsogui_rc = 0) THEN DO\nI      /* user is not running ISPF GUI with TSO line mode support or\nI         TSOGUI is OFF. All TSO input and output is directed to\nI         the 3270 session. */\nI      SAY \"No TSOGUI support at this time.\"\nI    END\nI    WHEN (tsogui_rc = 1) THEN DO\nI      /* All TSO line mode output is displayed in the ISPF/TSO window\nI         and line mode input must be entered into the ISPF/TSO\nI         window's input field. */\nI    END\nI    OTHERWISE DO\nI      SAY \"Something very unexpected happened, RC(\"tsogui_rc\").\"\nI    END\nI  END\nN\nNExample 8: REFLIST.\nN-------------------\nI  ADDRESS ISPEXEC \"CONTROL REFLIST NOUPDATE\"\nI  ADDRESS ISPEXEC \"BROWSE DATASET('ISPFPROJ.FTOUTPUT(TEL*)')\"\nI  ADDRESS ISPEXEC \"CONTROL REFLIST UPDATE\"\nN\nNExample 9: LE.\nN--------------\nI  ADDRESS ISPEXEC \"CONTROL LE ON\"\nI  CALL ISPLINK('BRIF ','SPOOL.DATA ','V ',132,READRTN,CMDRTN,' ', ,\nI  ' ',' ','NO ')\nI  ADDRESS ISPEXEC \"CONTROL LE OFF\"\nN\nNExample 10: PASSTHRU.\nN---------------------\nI  ADDRESS ISPEXEC \"CONTROL PASSTHRU LRSCROLL PASQUERY\"\nI  pasquery_rc = RC\nI  SELECT\nI    WHEN (pasquery_rc = 0) THEN DO\nI      /* The LEFT and RIGHT scroll commands are not being passed to\nI         the dialog program. */\nI      SAY \"LEFT/RIGHT scrolling are not passed thru.\"\nI    END\nI    WHEN (pasquery_rc = 1) THEN DO\nI      /* The LEFT and RIGHT scroll commands are being passed to the\nI         dialog program for processing. */\nI      SAY \"LEFT/RIGHT scrolling are passed thru.\"\nI    END\nI    OTHERWISE DO\nI      SAY \"Something very unexpected happened, RC(\"pasquery_rc\").\"\nI      SAY ZERRSM\nI      SAY ZERRLM\nI    END\nI  END\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0205": {"ttr": 31489, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x01;\\x01;\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:03", "lines": 315, "newlines": 315, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0205\nTISPF Services Guide\nT-Chapter 2.\nT-DIRLIST-Directory list service\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141503\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNDIRLIST-Directory list service\nN------------------------------\nNThe DIRLIST service allows you to write your own z/OS UNIX directory\nNlist dialog. This service is similar to ISPF option 3.17, the\nNz/OS UNIX Directory List Utility, which displays the list of files in\nNa z/OS UNIX directory. The DIRLIST service allows the caller to control\nNthe format of the data displayed in the list and to process line\nNcommands entered against entries in the list.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"DIRLIST\" ,\nD    \"PATH(pathvar)\" ,\nI      The name of an ISPF variable containing the pathname for a\nI      z/OS UNIX directory. The pathname can contain glob characters to\nI      perform searching of the z/OS UNIX file system.\nN\nM      This must be a variable name, no ampersand allowed.\nN\nD    \"COLS(column-abbrev,colwidth, ...)\" ,\nI      Specifies the columns of data displayed on the z/OS UNIX\nI      directory list. If the parameter is omitted, the directory list\nI      is displayed using the column arrangement defined by the user\nI      using the Directory List Column Arrangement choice from the\nI      z/OS UNIX Directory List Utility Options pull-down menu. See\nI      Table A below.\nN\nI      To request that the ISPF-defined default column arrangement is\nI      used for the directory list display, specify an asterisk:\nN\nI        COLS(*)\nN\nI      Alternatively, you can specify a paired list of columns and\nI      widths values. You specify the column values using the\nI      abbreviations shown in Table A below. The table also shows the\nI      maximum widths that can be specified for each column.\nN\nI      If a column is not specified with the COLS parameter, then that\nI      column is not displayed with the directory list. For example, the\nI      COLS parameter shown below causes the display of a brief\nI      z/OS UNIX directory list showing only a Type column, Owner\nI      column, and a Changed Date/Time column showing 10 of the 19\nI      maximum characters in width:\nN\nI        COLS(TY,4,OW,8,CH,10)\nN\nI      Table A. ISPF-defined column arrangement\nN      ----------------------------------------\nI      Column                     Abbrev Width (Max)\nI      -------------------------- ------ -----\nI      Type .....................   TY       4\nI      Permissions ..............   PE1     10\nI      Audit ....................   AU       6\nI      Extended Attributes (Ext).   EX       4\nI      Format (Fmat) ............   FM       4\nI      Owner ....................   OW       8\nI      Group ....................   GR       8\nI      Links ....................   LI      14\nI      Size .....................   SZ      20\nI      Modified Date/Time .......   MD      19\nI      Changed Date/Time ........   CH      19\nI      Accessed Date/Time .......   AC      19\nI      Created Date/Time ........   CR      19\nI      -------------------------- ------ -----\nN\nI        Additional column selections:\nN        -----------------------------\nI      Column                     Abbrev Width\nI      -------------------------- ------ -----\nI      Permissions - Octal ......   PO1      4\nI      -------------------------- ------ -----\nN\nI        Note:\nI        1. PE (Permissions) and PO (Permissions - Octal) are mutually\nI           exclusive.\nN\nD    \"CONFDRD(YES | NO)\" ,\nI      Specifies whether the Confirm Non-empty Directory Delete panel\nI      appears when using the D (delete) line command from the displayed\nI      directory list to delete a directory containing files.\nI      YES is the default.\nN\nI      YES: ISPF displays the Confirm Non-empty Directory Delete panel. This give\nN\nI      NO:  ISPF does not display the Confirm Non-empty Directory Delete\nI        panel. The directory and all the contained files and\nI        sub-directories are deleted without your having to take any\nI        additional actions.\nN\nD    \"CONFIRM(YES | NO)\" ,\nI      Specifies whether the Confirm Delete panel appears when using the\nI      D (delete) line command from the displayed directory list to\nI      delete a file or empty directory. YES is the default.\nN\nI      YES: ISPF displays the Confirm Delete panel. This gives you the\nI        opportunity to change your mind and keep the file.\nN\nI      NO:  ISPF does not display the Confirm Delete panel. The file is\nI        deleted without your having to take any additional actions.\nN\nD    \"FIXCOLS(YES | NO)\" ,\nI      Specifies whether you can change the column arrangement for the\nI      directory list display using the Directory List Column\nI      Arrangement choice from the z/OS UNIX Directory List Utility\nI      Options pull-down menu. This parameter is ignored if the\nI      column-list parameter is not specified on the call to DIRLIST.\nN\nI      YES: you cannot change the column arrangement specified by the\nI        column-list parameter.\nN\nI      NO:  you can change the column arrangement specified by the\nI        column-list parameter using the Directory List Column\nI        Arrangement choice from the z/OS UNIX Directory List Utility\nI        Options pull-down menu.\nN\nD    \"FROM(file-name)\" ,\nI      The display starting point within the directory list. When this\nI      parameter is used, the directory list is positioned to start at\nI      the first file matching or after the specified filename.\nN\nD    \"LCMDS(line-command-list)\" ,\nI      This parameter allows the calling application to process line\nI      commands entered on the z/OS UNIX directory list display. The\nI      caller can specify a directory list command processor and a list\nI      of line commands to be processed by the line command processor,\nI      rather than the ISPF directory list utility.\nN\nI      The first entry in the line-command-list is the name of the line\nI      command processor. This can be the name of a REXX exec or a\nI      program. The line command processor is invoked using the\nI      SELECT CMD service when one of the line commands specified in the\nI      line-command-list is entered on the directory list display. The\nI      line commands are specified after the name of the line command\nI      processor. Line commands can be from 1 to 8 characters in length.\nI      These line commands can include line commands normally processed\nI      by ISPF, allowing the application to override the processing of\nI      a line command.\nN\nI      The example of the LCMDS parameter shown below causes line\nI      commands DP, B, LCMD1, and W to be processed by line command\nI      processor LCMDPROC. The B line command, normally processed\nI      by the ISPF directory list utility to invoke the ISPF browse\nI      function, is instead handled by LCMDPROC.\nN\nI        LCMDS(LCMDPROC,DP,B,LCMD1,W)\nN\nI      Table B: Variables used to pass data between ISPF and the\nI      line command processor\nN      ---------------------------------------------------------\nI      Variable Length Description\nN      -------- ------ ------------------------------------------------\nI      ZUDLCMD       8 Line command\nI      ZUDPATH    1023 Pathname of file the line command was entered on\nI      ZUDFTYPE      4 File type\nI      ZUDFPERM     10 File permissions\nI      ZUDFPRMO      4 File permissions - octal\nI      ZUDFOWN       8 Owner\nI      ZUDFAUDT      6 Audit settings\nI      ZUDFEXTA      4 Extended attributes\nI      ZUDFFORM      4 File format\nI      ZUDFGRP       8 Owner group\nI      ZUDFLNKS     14 Links\nI      ZUDFSIZE     20 File size\nI      ZUDFMDTM     19 Modified date/time\nI      ZUDFCDTM     19 Changed date/time\nI      ZUDFADTM     19 Accessed date/time\nI      ZUDCRDTM     19 Created date/time\nI      ZUDMESSG     16 Allows the line command processor to set the\nI                      message displayed against the file after the\nI                      line command is processed\nN      -------- ------ ------------------------------------------------\nI      ADDRESS ISPEXEC \"VGET\" ,\nI        \"(ZUDLCMD,  ZUDPATH,  ZUDFTYPE, ZUDFPERM, ZUDFPRMO,\" ,\nI         \"ZUDFOWN,  ZUDFAUDT, ZUDFEXTA, ZUDFFORM, ZUDFGRP,\" ,\nI         \"ZUDFLNKS, ZUDFSIZE, ZUDFMDTM, ZUDFADTM, ZUDCRDTM) SHARED\"\nN      ....\nI      ADDRESS ISPEXEC \"VPUT\" ,\nI        \"(ZUDMESSG) SHARED\"\nN\nI      Line command processor parameters\nN      ---------------------------------\nI      Any parameters entered with a line command are passed to the line\nI      command processor.\nN\nM      It appears any passed parameters are limited to what fits with\nM      your line command and at least one space in the \"Command\" field,\nM      all of 8 characters long.\nN\nI      For a REXX line command processor, each parameter specified with\nI      the line command is passed as an argument string to the REXX\nI      program.\nN\nI      For example, if the line command:\nN\nI        LL a1 B22 c333\nN\nI      is entered and processed by this REXX line command processor:\nI      /* REXX */\nI      Arg p1 p2 p3 . ...\nN\nI      the REXX variable would have these values:\nN\nI      p1 = 'A1'\nI      p2 = 'B22'\nI      p3 = 'C333'\nN\nI      Line command processor return codes\nN      -----------------------------------\nI      0:   Line command completed successfully.\nN\nI      1:   Requests that processing of this line command be handled by\nI           the ISPF directory list utility or, if not a recognized\nI           directory list line command, passed to TSO.\nN\nI      >=8: The line command failed. ISPF issues message ISRU812.\nN\nD    \"PANEL(panel-name)\"\nI      The name of the panel to use for the display of the directory\nI      list. The default is the panel (ISRUUDL0) used for the directory\nI      list displayed using ISPF option 3.17, the z/OS UNIX Directory\nI      List Utility.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  dirlist_rc = RC\nD  SELECT\nD    WHEN (dirlist_rc = 0) THEN DO\nD      /* Normal completion. */\nD      NOP\nD    END\nD    WHEN (dirlist_rc = 8) THEN DO\nD      /* Error building the directory list. The error condition is\nD         described in the ISPF system dialog variables. */\nD      SAY \"Ask your programmer to validate the dialog variables.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (dirlist_rc = 12) THEN DO\nD      /* A keyword value is incorrect. */\nD      SAY \"Ask your programmer to change the keyword value.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (dirlist_rc = 20) THEN DO\nD      /* A severe error occurred while processing the directory\nD         list. */\nD      SAY \"Ask your programmer to fix the logic.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"dirlist_rc\").\"\nD    END\nD  END\nN\nNExample 1: DIRLIST - Displays a modified directory list for cwd.\nN----------------------------------------------------------------\nI  syscalls_rc = SYSCALLS(\"ON\")\nI  ADDRESS SYSCALL \"getcwd cwd\"\nI  ADDRESS ISPEXEC \"DIRLIST\" ,\nI    \"PATH(cwd)\" ,\nI    \"COLS(PE,10,TY,4,MO,10)\" ,\nI    \"LCMDS(ISPGPROC,LL,UPD)\"\nN\nNExample 2: ISPF Option 3.17.\nN----------------------------\nNKudos to Lionel Dyck for this ease-of-use alternative.\nI  ADDRESS ISPEXEC \"SELECT\" ,\nI    \"PGM(ISRDSLST)\" ,\nI    \"PARM(UDL /&cwd)\"\nN\nNExample 3: DIRLIST - User provided code.\nN----------------------------------------\nI  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nI  syscalls_rc = SYSCALLS(\"ON\")\nI  ADDRESS SYSCALL \"getcwd cwd\"\nI  fromname = \".sh_history\"\nI  ADDRESS ISPEXEC \"DIRLIST\" ,\nI    \"PATH(cwd)\"         /* Must be a non-ampersand variable name. */ ,\nI    \"COLS(PE,10,TY,4,MO,10)\" ,\nI    \"FROM(fromname)\"    /* Must be a non-ampersand variable name. */ ,\nI    \"LCMDS(ISPGPROC,LL,UPD)\"\nI  dirlist_rc = RC\nI  RETURN 0\nN\nMThe Kenneth Tomiak DEMO collection at www.cbttape.org contains this\nMexample and the accompanying line command processor.\nN\nN\nNAPAR(OA54681) fixes a flaw where lengths of the ZUD* variables were\nNincorrect.\nN\nN  RN02 PSY UA95129 PUT1802 HIF7N02 ISPF 7.1.0?\nN  RP02 PSY UA95246 PUT1803 HIF7P02 ISPF 7.2.0\nN  RR02 PSY UA95247 PUT1803 HIF7R02 ISPF 7.3.0\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0206": {"ttr": 31491, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x01\\n\\x01\\n\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:53", "lines": 266, "newlines": 266, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0206\nTISPF Services Guide\nT-Chapter 2.\nT-DISPLAY-Display panels and messages\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141553\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNDISPLAY-Display panels and messages\nN-----------------------------------\nNThe DISPLAY service retrieves a panel definition, performs any\nNpre-display processing specified on the panel definition, initializes\nNvariable panel fields from the corresponding dialog variables, and\nNdisplays the panel on the screen. A message can optionally be displayed\nNwith the panel. If the optional message is to be displayed in a message\nNpop-up window, the position of the message pop-up window can be\nNindicated by the MSGLOC parameter.\nN\nNNote: When running in GUI mode, the MSGLOC parameter is ignored.\nN\nNAfter the panel has been displayed, you can enter information and\nNpress the Enter key. All input fields are automatically stored into\nNdialog variables of the same name, and the )PROC section of the panel\nNdefinition is then processed. If any condition occurs that causes a\nNmessage to be displayed (verification failure, MSG=value condition in\nNa TRANS, or explicit setting of .MSG), processing continues to the\nN)HELP or )END section. The )REINIT section is then processed if it is\nNpresent. The panel is then redisplayed with the first, or only, message\nNthat was encountered.\nN\nNWhen the user presses the Enter key again, all input fields are stored\nNand the )PROC section is again processed. This sequence continues until\nNthe entire )PROC section has been processed without any message\nNconditions being encountered. The panel display service finally\nNreturns, with a return code of 0, to the dialog function that\nNinvoked it.\nN\nNAlternatively, when a panel is displayed, the user can enter a CANCEL,\nNEND, EXIT, or RETURN command. If the input fields are not in a\nNscrollable area, they are stored and the )PROC section is processed. In\nNscrollable areas, only the input fields that have been displayed will\nNbe stored. No messages are displayed, even if a MSG condition is\nNencountered. The panel display service then returns to the dialog\nNfunction with a return code of 8.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"DISPLAY\" ,\nD    \"PANEL(panel-name)\" ,\nI      Specifies the name of the panel to be displayed.\nN\nD    \"MSG(message-id)\" ,\nI      Specifies the identification of a message to be displayed on\nI      the panel.\nN\nD    \"CURSOR(cursor-field-name)\" ,\nI      Specifies the name of the field where the cursor is to be\nI      placed.\nN\nI      If cursor-position is specified both by this parameter and by\nI      setting the control variable .CURSOR in the )INIT or )REINIT\nI      section of the panel being displayed, the value in .CURSOR\nI      overrides this parameter.\nN\nD    \"CSRPOS(cursor-position)\" ,\nI      Specifies the character position within the field where the\nI      cursor is to be placed. This position applies regardless of\nI      whether the initial cursor placement was specified in the CURSOR\nI      calling sequence parameter, the .CURSOR control variable in the\nI      )INIT or )REINIT section of a panel, or is the result of default\nI      cursor placement. If cursor-position is not specified or is not\nI      within the field, the default is 1.\nN\nI      If cursor-position is specified both by this parameter and by\nI      setting the control variable .CSRPOS in the )INIT or )REINIT\nI      section of the panel being displayed, the value in .CSRPOS\nI      overrides this parameter.\nN\nD    \"COMMAND(stack-buffer-name)\" ,\nI      Specifies the name of a variable containing the chain of\nI      commands passed by the dialog to ISPF for execution. The maximum\nI      length of the actual command chain within this variable is 255.\nN\nD    \"RETBUFFR(ret-buffer-name)\" ,\nI      Specifies the name of a variable in which the unprocessed portion\nI      of the command chain is stored should an error occur before the\nI      complete chain is processed. This includes the command being\nI      processed when the error is detected.\nN\nD    \"RETLGTH(ret-length-name)\" ,\nI      Specifies the name of a variable in which the length of the\nI      unprocessed portion of the command chain is stored should an\nI      error occur before the complete chain is processed. This includes\nI      the command being processed when the error was detected.\nN\nD    \"MSGLOC(message-field-name)\"\nI      Used to position the message pop-up window. If the application\nI      specifies this parameter, the dialog manager positions the\nI      message pop-up relative to the named field.\nN\nI      If this parameter is omitted and a message is displayed in a\nI      message pop-up window, the window is displayed at the bottom of\nI      the logical screen or below the active ADDPOP pop-up window if\nI      one exists.\nN\nI      For compatibility with later versions, this parameter should be\nI      specified only when the message will display in a pop-up window.\nN\nI      Note: When running in GUI mode, this parameter is ignored.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  display_rc = RC\nD  SELECT\nD    WHEN (display_rc = 0) THEN DO\nD      /* Normal completion.\nD\nD         For the COMMAND option, the ret-buffer-name is set to blanks\nD         and the ret-length-name is set to zero. Passing an empty\nD         command chain buffer also results in a normal completion. */\nD      NOP\nD    END\nD    WHEN (display_rc = 4) THEN DO\nD      /* One or more commands in the stack could not be found in the\nD         active set of command tables. */\nD      NOP\nD    END\nD    WHEN (display_rc = 8) THEN DO\nD      /* User requested termination using the END or RETURN command.\nD         If CANCEL and EXIT are requested from a panel displayed using\nD         the DISPLAY service call and the panel was defined with the\nD         dialog tag language (DTL), the dialog manager returns the\nD         command in ZVERB and sets a return code of 8 from the display\nD         screen. */\nD      NOP\nD    END\nD    WHEN (display_rc = 12) THEN DO\nD      /* The specified panel, message, message location field, or\nD         cursor field could not be found. */\nD      SAY \"Ask your programmer to define the missing entity.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (display_rc = 16) THEN DO\nD      /* Truncation or translation error in storing defined\nD         variables. */\nD      SAY \"Ask your programmer to fix the variable.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (display_rc = 20) THEN DO\nD      /* Severe error. */\nD      SAY \"Ask your programmer to fix the DISPLAY statement.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"display_rc\").\"\nD    END\nD  END\nN\nNUsing the COMMAND Option\nN------------------------\nNThe COMMAND option allows a dialog to pass a chain of commands in the\nNvariable specified by stack-buffer-name to ISPF for execution. The\nNpanel specified on the DISPLAY service request is processed in CONTROL\nNNONDISPL ENTER mode. In addition, when ENTER is simulated by ISPF, the\nNcommand chain is executed as though it were either entered on the\nNcommand line of the panel by the user or entered through a function\nNkey. When the command chain is exhausted or one of the commands cannot\nNbe found in the active set of command tables, processing terminates\nNand control returns directly to the dialog that issued the DISPLAY\nNCOMMAND call, except for those specific error conditions described\nNfurther on in the manual.\nN\nNAll examples should contain:\nN----------------------------\nI  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nN\nNPanel and Message names have been altered by Kenneth Tomiak.\nN\nNExample 1: Display variables and message, set cursor position.\nN--------------------------------------------------------------\nI  ADDRESS ISPEXEC \"DISPLAY\" ,\nI    \"PANEL(DEM0206A)\" ,\nI    \"MSG(DEM0206A)\" ,\nI    \"CURSOR(KLM)\"\nI  display_rc = RC\nN\nNExample 2: Unknown CHECK command handled by DISPLAY.\nN----------------------------------------------------\nI  stacka = \"SPLIT;SWAP;CHECK\"\nI  ADDRESS ISPEXEC \"DISPLAY\" ,\nI    \"PANEL(DEM0206B)\" ,\nI    \"COMMAND(STACKA)\" ,\nI    \"RETBUFFR(BUFFA)\" ,\nI    \"RETLGTH(LGTHA)\"\nI  display_rc = RC\nI  SELECT\nI    WHEN (display_rc = 0) THEN DO\nI      SAY \"The assumption is that there is no CHECK command.\"\nI    END\nI    WHEN (display_rc = 4) THEN DO\nI      SAY \"Command handling terminated with:\" buffa\".\"\nI    END\nI    OTHERWISE DO\nI      SAY \"Something very unexpected happened, RC(\"display_rc\").\"\nI    END\nI  END\nN\nNExample 3: Unknown command handled by dialog.\nN---------------------------------------------\nI  stacka = \"KEYS;CHECK\"\nI  ADDRESS ISPEXEC \"DISPLAY\" ,\nI    \"PANEL(DEM0206B)\" ,\nI    \"COMMAND(STACKA)\" ,\nI    \"RETBUFFR(BUFFA)\" ,\nI    \"RETLGTH(LGTHA)\"\nI  display_rc = RC\nI  SELECT\nI    WHEN (display_rc = 0) THEN DO\nI      SAY \"The KEYS dialog handled that there was no CHECK command.\"\nI    END\nI    WHEN (display_rc = 4) THEN DO\nI      SAY \"Command handling terminated with:\" buffa\".\"\nI    END\nI    OTHERWISE DO\nI      SAY \"Something very unexpected happened, RC(\"display_rc\").\"\nI    END\nI  END\nN\nNExample 4: Command stack contains an invalid parameter.\nN-------------------------------------------------------\nI  stacka = \"PFSHOW COLOR\"\nI  ADDRESS ISPEXEC \"DISPLAY\" ,\nI    \"PANEL(DEM0206B)\" ,\nI    \"COMMAND(STACKA)\" ,\nI    \"RETBUFFR(BUFFA)\" ,\nI    \"RETLGTH(LGTHA)\"\nI  display_rc = RC\nI  SAY \"Did you notice the INVALID PFSHOW PARM message?\"\nN\nNExample 5: Display message in a pop-up window.\nN----------------------------------------------\nI  ADDRESS ISPEXEC \"DISPLAY\" ,\nI    \"PANEL(DEM0206C)\" ,\nI    \"MSG(DEM0206B)\" ,\nI    \"MSGLOC(FLD1)\"\nI  display_rc = RC\nN\nN\nMThe Kenneth Tomiak DEMO collection at www.cbttape.org contains these\nMexamples and the accompanying panel definitions and messages as\nMimagined by Kenneth.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0207": {"ttr": 31745, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00T\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00\\xd2\\x00\\xd2\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:54", "lines": 210, "newlines": 210, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0207\nTISPF Services Guide\nT-Chapter 2.\nT-DSINFO-Data set information dialog service\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141554\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNDSINFO-Data set information dialog service\nN------------------------------------------\nNThe DSINFO service returns assorted information about a particular data\nNset in dialog variables in the function pool. The information returned\nNis the same as that displayed when you use ISPF Option 3.2 or\nNOption 3.4 commands. Additionally, DSINFO returns the unformatted DSCB\nNformat1. DSINFO does not require an LMINIT to be performed first.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"DSINFO\" ,\nD    \"DATASET(dsname)\" ,\nI      Specifies the data set name, in TSO syntax, of the data set that\nI      you want information about. This parameter must be a 46-byte\nI      length field for the call invocation format.\nN\nD    \"VOLUME(serial)\"\nI      Specifies the serial number of the volume on which the data set\nI      can be found. This is only required if the data set is\nI      uncataloged.\nN\nNDialog variables in the function pool:\nN--------------------------------------\nNVariable Length Description\nN-------- ------ -------------------------------------------------------\nNZDSVOL        6 First or only volume\nNZDS#VOLS      2 Number of volumes\nNZDSDEVT       8 Device type\nNZDSORG        8 Data set organization\nNZDSRF         6 Record format\nNZDSLREC       7 Logical record length\nNZDSBLK        6 Block size\nNZDSSPC        8 Primary space units\nNZDS1EX       13 Primary space allocation\nNZDS2SPC       8 Secondary space units\nNZDS2EX       13 Secondary space allocation\nNZDSTOTAX     18 Allocated space units (long format)\nNZDSTOTUX     18 Used space units (long format)\nNZDSDSNT       8 Data set name type\nNZDSSEQ        4 Compressible (YES/NO)\nNZDSCDATE     10 Creation date (National format)\nNZDSXDATE     10 Expiration date (National format)\nNZDSRDATE     10 Referenced date (National format)\nNZDSTOTA      13 Allocated space units\nNZDSTOTU      13 Used space units\nNZDSEXTA       7 Allocated extents\nNZDSEXTU       7 Used extents\nNZDSDIRA       6 Allocated directory blocks\nNZDSDIRU       8 Used directory blocks\nNZDSDIR        8 PDSE directory blocks\nNZDS#MEM      13 Number of members\nNZDSPAGU      13 Pages used (PDSE)\nNZDSPERU      13 Percent used (PDSE)\nNZDSMC         8 Management class\nNZDSSC         8 Storage class\nNZDSDC         8 Data class\nNZDSAPF        4 APF status of the data set (YES/NO/ERR)\nNZDSLNK        4 LNKLST status of the data set (YES/NO/ERR)\nNZDSCB1       96 Format 1 data control block\nNZDSVTAB     354 Volume table (contains all of the volume names for a\nN                multivolume set)\nNZDSOVF        3 Indicates that ZDSTOTAX and ZDSTOTUX should be used\nN                instead of ZDSTOTA and ZDSTOTU.\nNZDSEATR       4 Extended attribute indicator\nNZDSCJOBN      8 Create jobname\nNZDSCSTPN      8 Create stepname\nNZDSDSNV       1 Data set version\nNZDSNGEN       8 Maximum number of generations\nN-------- ------ -------------------------------------------------------\nNNote: ISPF cannot calculate reliable space utilization values for BDAM\nNdata sets. Therefore, the DSINFO service returns question marks (?) in\nNvariables that contain space utilization data when reporting on BDAM\nNdata sets.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  dsinfo_rc = RC\nD  SELECT\nD    WHEN (dsinfo_rc = 0) THEN DO\nD      /* Normal completion. */\nD      NOP\nD    END\nD    WHEN (dsinfo_rc = 8) THEN DO\nD      /* User requested information is unavailable. Dialog error\nD         variables (ZERRLM, and so on) contain further information. */\nD      SAY ZERRSM\nD      SAY ZERRLM\nD      NOP\nD    END\nD    WHEN (dsinfo_rc = 12) THEN DO\nD      /* One of these:\nD         -> FAMS error\nD         -> Obtain error\nD         -> Error obtaining directory information\nD      */\nD      SAY \"Ask your programmer to handle the error.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (dsinfo_rc = 20) THEN DO\nD      /* Severe error. */\nD      SAY \"Ask your programmer to fix the DSINFO statement.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"dsinfo_rc\").\"\nD    END\nD  END\nN\nNExample 1: of DSINFO to obtain information about a cataloged data set.\nN----------------------------------------------------------------------\nI  ADDRESS ISPEXEC \"DSINFO\" ,\nI    \"DATASET(demo.rexx)\"\nI  dsinfo_rc = RC\nI  SAY \"Variable Length Description\"\nI  SAY \"-------- ------ ----------------------------------------------------\"\nI  SAY \"ZDSVOL        6 First or only volume:\" ZDSVOL\nI  SAY \"ZDS#VOLS      2 Number of volumes:\" ZDS#VOLS\nI  SAY \"ZDSDEVT       8 Device type:\" ZDSDEVT\nI  SAY \"ZDSORG        8 Data set organization:\" ZDSORG\nI  SAY \"ZDSRF         6 Record format:\" ZDSRF\nI  SAY \"ZDSLREC       7 Logical record length:\" ZDSLREC\nI  SAY \"ZDSBLK        6 Block size:\" ZDSBLK\nI  SAY \"ZDSSPC        8 Primary space units:\" ZDSSPC\nI  SAY \"ZDS1EX       13 Primary space allocation:\" ZDS1EX\nI  SAY \"ZDS2SPC       8 Secondary space units:\" ZDS2SPC\nI  SAY \"ZDS2EX       13 Secondary space allocation:\" ZDS2EX\nI  SAY \"ZDSTOTAX     18 Allocated space units (long format):\" ZDSTOTAX\nI  SAY \"ZDSTOTUX     18 Used space units (long format):\" ZDSTOTUX\nI  SAY \"ZDSDSNT       8 Data set name type:\" ZDSDSNT\nI  SAY \"ZDSSEQ        4 Compressible (YES/NO):\" ZDSSEQ\nI  SAY \"ZDSCDATE     10 Creation date (National format):\" ZDSCDATE\nI  SAY \"ZDSXDATE     10 Expiration date (National format):\" ZDSXDATE\nI  SAY \"ZDSRDATE     10 Referenced date (National format):\" ZDSRDATE\nI  SAY \"ZDSTOTA      13 Allocated space units:\" ZDSTOTA\nI  SAY \"ZDSTOTU      13 Used space units:\" ZDSTOTU\nI  SAY \"ZDSEXTA       7 Allocated extents:\" ZDSEXTA\nI  SAY \"ZDSEXTU       7 Used extents:\" ZDSEXTU\nI  SAY \"ZDSDIRA       6 Allocated directory blocks:\" ZDSDIRA\nI  SAY \"ZDSDIRU       8 Used directory blocks:\" ZDSDIRU\nI  SAY \"ZDSDIR        8 PDSE directory blocks:\" ZDSDIR\nI  SAY \"ZDS#MEM      13 Number of members:\" ZDS#MEM\nI  SAY \"ZDSPAGU      13 Pages used (PDSE):\" ZDSPAGU\nI  SAY \"ZDSPERU      13 Percent used (PDSE):\" ZDSPERU\nI  SAY \"ZDSMC         8 Management class:\" ZDSMC\nI  SAY \"ZDSSC         8 Storage class:\" ZDSSC\nI  SAY \"ZDSDC         8 Data class:\" ZDSDC\nI  SAY \"ZDSAPF        4 APF status of the data set (YES/NO/ERR):\" ZDSAPF\nI  SAY \"ZDSLNK        4 LNKLST status of the data set (YES/NO/ERR) :\" ZDSLNK\nI  SAY \"ZDSCB1       96 Format 1 data control block:\"\nI  function_rc = Split_Say(ZDSCB1,32)\nI  SAY \"ZDSVTAB     354 Volume table (contains all of the volume names for a\"\nI  SAY \"                multivolume set) :\"\nI  function_rc = Split_Say(ZDSVTAB,32)\nI  SAY \"ZDSOVF        3 Indicates that ZDSTOTAX and ZDSTOTUX should be used\"\nI  SAY \"                instead of ZDSTOTA and ZDSTOTU.:\" ZDSOVF\nI  SAY \"ZDSEATR       4 Extended attribute indicator:\" ZDSEATR\nI  SAY \"ZDSCJOBN      8 Create jobname:\" ZDSJOBN\nI  SAY \"ZDSCSTPN      8 Create stepname:\" ZDSCSTPN\nI  SAY \"ZDSDSNV       1 Data set version:\" ZDSDSNV\nI  SAY \"ZDSNGEN       8 Maximum number of generations:\" ZDSNGEN\nI\nI  RETURN 0\nI\nISplit_Say: PROCEDURE\nI  var_data = ARG(1)\nI  var_leng = Arg(2)\nI  DO WHILE var_data <> \"\"\nI    PARSE VAR var_data chr_data +(var_leng) var_data\nI    SAY \"               \" chr_data\nI    hex_data = C2X(chr_data)\nI    say_data = \"                \"\nI    DO hx = 1 TO LENGTH(hex_data) BY 2\nI      one_data = SUBSTR(hex_data,hx,1)\nI      say_data = say_data || one_data\nI    END\nI    SAY say_data\nI    say_data = \"                \"\nI    DO hx = 2 TO LENGTH(hex_data) BY 2\nI      one_data = SUBSTR(hex_data,hx,1)\nI      say_data = say_data || one_data\nI    END\nI    SAY say_data\nI  END\nI  RETURN 0\nN\nMThe Kenneth Tomiak DEMO collection at www.cbttape.org contains these\nMexamples and the accompanying panel definitions and messages as\nMimagined by Kenneth.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0208": {"ttr": 31747, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00T\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00\\xfc\\x00\\xfc\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:54", "lines": 252, "newlines": 252, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0208\nTISPF Services Guide\nT-Chapter 2.\nT-EDIF-Edit interface\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141554\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNEDIF-Edit interface\nN-------------------\nNThe Edit Interface (EDIF) service provides edit functions for data\nNaccessed through dialog-supplied I/O routines. The invoking dialog must\nNperform all environment-dependent functions such as file allocation,\nNopening, reading, writing, closing, and freeing. The dialog is also\nNresponsible for any Enqueue/Dequeue serialization that is required.\nNWith the dialog providing the I/O routines, EDIF allows you to:\nN\nN-> Edit data other than partitioned data sets or sequential files such\nN   as subsystem data, and in-storage data.\nN\nN-> Do preprocessing and post-processing of the data being edited. The\nN   invoking dialog must provide addresses to routines that:\nN\nN-> Read the data sequentially from beginning to end, returning to Edit\nN   one record on each invocation.\nN\nN-> Write the data sequentially from beginning to end, accepting one\nN   record from Edit on each invocation.\nN\nN-> Perform processing for the MOVE, COPY, CREATE, REPLACE, and EDIT\nN   primary commands. If this routine is not specified, ISPF processes\nN   these commands.\nN\nNAll addresses must be 31-bit addresses, and the routines must have an\nNaddressing mode (AMODE) of 31.\nN\nNWhen an Edit session is operating in recovery mode, a record of your\nNinteractions is automatically recorded in an ISPF-controlled data set.\nNFollowing a system failure, you can use the record to recover the data\nNyou were editing.\nN\nNNote: Dialogs that invoke the EDIF service may invoke the EDIREC\nNservice first to determine if a pending recovery condition exists.\nN\nMYou must use the EDIF service to recover data edited in a previous\nMEDIF session. You must invoke the EDIREC service first to see if a\nMrecovery is pending.\nN\nNA dialog using EDIF can place data into the ZEIUSER dialog variable in\nNthe shared pool. When the system initializes the recovery data set, the\nNsystem also saves the data in ZEIUSER in the Edit recovery table as an\nNextension variable. This is done if RECOVERY is ON when first entering\nNEdit or after you use the SAVE command. This data is then made\nNavailable in dialog variable ZEIUSER at the time edit recovery is\nNprocessed.\nN\nNCommand invocation format\nN-------------------------\nNYou cannot use command procedures to invoke this service.\nN\nMWhat-if someone used LINKMVS on ISPLINK? Hmmm.\nN\nNCall invocation format\nN----------------------\nD  CALL ISPLINK ('EDIFbbbb', +\nD      data-name | 'b', +\nI        This parameter allows you to specify a data name for the source\nI        data to be edited. This name appears in the title line of the\nI        default Edit panel. It is also the target data name for an edit\nI        recovery table entry when edit recovery is active. This name\nI        must not have any embedded blanks, and its maximum length is\nI        54 characters. This name is stored in ZDSNT in the function\nI        pool.\nN\nD      profile-name, +\nI        The name of the edit profile to be used. This parameter is\nI        required when recovery-request = NO or is not specified;\nI        otherwise, it is not allowed.\nN\nD      rec-format, +\nI        The record format:\nI        -> F - fixed,\nI        -> V - variable.\nI        This parameter is required when recovery-request = NO or is not\nI        specified; otherwise, it is optional, but it must be the same\nI        record format that was specified when recovery was initiated\nI        for the data.\nN\nD      rec-len, +\nI        The record length, in bytes. It must be a positive numeric\nI        value between 10 and 32760, inclusive. For variable record\nI        format, this is the maximum record length. This parameter is\nI        required when recovery-request = NO or is not specified;\nI        otherwise, it is optional, but it must be the same record\nI        length that was specified when recovery was initiated for the\nI        data.\nN\nD      read-routine, +\nI        A fullword address indicating the entry point of a\nI        dialog-supplied read routine (required). It is recommended that\nI        the high-order bit of this value be set ON. See \"Read routine\"\nI        in the manual for more information about this parameter.\nN\nD      write-routine | 'b', +\nI        A fullword address indicating the entry point of a\nI        dialog-supplied write routine (required). It is recommended\nI        that the high-order bit of this value be set ON. See \"Write\nI        routine\" in the manual for more information about this\nI        parameter.\nN\nD      cmd-routine | 'b', +\nI        A fullword address indicating the entry point of a\nI        dialog-supplied routine that processes the MOVE, COPY, CREATE,\nI        REPLACE, and EDIT primary commands. It is recommended that the\nI        high-order bit of this value be set ON. See \"Command routine\"\nI        in the manual for more information about this parameter. If\nI        this parameter is not specified, ISPF processes these commands.\nN\nD      dialog-data | 'b', +\nI        A fullword address indicating the beginning of a dialog data\nI        area. This address is passed to the dialog-supplied routines.\nI        If no address is supplied, zeros are passed to the dialog\nI        routines. This data area provides a communication area for the\nI        dialog.\nN\nD      edif_len | 'b', +\nI        The length, in bytes, of the data to be displayed for editing.\nI        This parameter indicates that the data records should be\nI        considered to have a length shorter than rec-len during\nI        editing. Thus, the dialog may include data in the record that\nI        is not accessible for editing.\nN\nI        Edit-len must be a numeric value between 10 and 32760,\nI        inclusive, and must be less than or equal to parameter rec-len.\nI        Rec-len is the default. If the edit-len parameter is specified,\nI        the data that is not displayed are the bytes from (edit-len +1)\nI        to rec-len. That means the inaccessible record data is at the\nI        end of the record.\nN\nI        The edit-len parameter is optional when recovery-request = NO\nI        or is not specified; otherwise, it is not allowed. The\nI        edit-len parameter is not allowed when format-name is\nI        specified.\nN\nD      panel-name | 'b', +\nI        The name of the panel to use for displaying the data. This\nI        parameter is optional when recovery-request = NO or is not\nI        specified; otherwise, it is not allowed. The default is the\nI        standard Edit data display panel. See GC19-3623-30\nI        (f54PC00_v2r3.pdf) z/OS ISPF Planning and Customizing for\nI        information about developing a customized panel.\nN\nM        Using PANELID ON showed ISREDDE2.\nN\nM        SC19-3619-30 (f54dg00_v2r3.pdf) ISPF Dialog Developer's Guide\nM        and Reference Chapter 6 and Chapter 7 have the details you want\nM        for defining a panel.\nN\nD      macro-name | 'b', +\nI        The name of the initial macro to be executed. This parameter\nI        is optional when recovery-request = NO or is not specified;\nI        otherwise, it is not allowed. The default is no initial macro.\nI        See SC19-3621-30 (f54em00_v2r3.pdf) z/OS ISPF Edit and Edit\nI        Macros for more information on macros.\nN\nD      format-name | 'b', +\nI        The name of the format to be used to reformat the data. This\nI        parameter is optional when recovery-request = NO or is not\nI        specified; otherwise, it is not allowed. The default is no\nI        format. This parameter is provided to support the IBM 5550\nI        terminal using the Double-Byte Character Set (DBCS). This\nI        parameter is not allowed when the edit-len parameter is\nI        specified.\nN\nD      'NObbbbb' | 'YESbbbb' | 'b', /* (mixed-mode) */ +\nI        Specifies whether the data is treated as mixed-mode DBCS data.\nI        This parameter is optional when recovery-request = NO or is\nI        not specified; otherwise, it is not allowed. If YES is\nI        specified, the EDIF service treats the data as mixed-mode DBCS\nI        data. If NO (the default) is specified, the data is treated as\nI        EBCDIC (single-byte) data. This parameter is provided to\nI        support the IBM 5550 terminal using the Double-Byte Character\nI        Set (DBCS).\nN\nD      'NObbbbb' | 'YESbbbb' | 'b', /* (recovery-request) */ +\nI        Specifies whether to process a pending edit recovery that was\nI        being edited with the EDIF service when a system failure\nI        occurred. If YES is specified, the edit recovery should\nI        proceed. This function is similar to the EDREC service with the\nI        PROCESS option. If YES is specified to process the edit\nI        recovery, you must specify the read routine and write routine,\nI        but you must not specify profile name, edit-len, panel-name,\nI        macro-name, format-name and mixed-mode. If NO is specified, no\nI        edit recovery is processed; EDIF edits the specified data.\nN\nD      parm-var | 'b', +\nI        The name of an ISPF variable that contains parameters which are\nI        to be passed to the initial macro specified by macro-name. The\nI        variable value must not exceed 200 bytes in length. If no macro\nI        name is specified, parm-var must be blank or not specified.\nN\nD      table-name | 'b'\nI        The name of a user line command table to be used for the edit\nI        session. The value must be 8 characters, blank padded.\nN\nD    )\nN\nNDialog-supplied routines\nN------------------------\nMSee EDIF in the manual for several pages on how to code dialog-supplied\nMroutines.\nN\nNEDIF Service Return Codes\nN-------------------------\nNThese return codes are possible:\nN\nD  call_edif_rc = RC\nD  SELECT\nD    WHEN (call_edif_rc = 0) THEN DO\nD      /* Normal completion. */\nD      NOP\nD    END\nD    WHEN (call_edif_rc = 4) THEN DO\nD      /* Normal completion, data not saved. */\nD      SAY \"Ask your programmer to use SETMSG to show data not saved.\"\nD    END\nD    WHEN (call_edif_rc = 16) THEN DO\nD      /* Unexpected return code received from a dialog-supplied\nD         routine. When an unexpected return code is received, the EDIF\nD         service terminates immediately with a return code of 16. */\nD      SAY \"Ask your programmer to fix the the failing\" ,\nD        \"dialog-supplied routine.\"\nD    END\nD    WHEN (call_edif_rc = 20) THEN DO\nD      /* Severe error; unable to continue. */\nD      SAY \"Ask your programmer to fix the logic.\"\nD    END\nN\nNExample 1:\nN----------\nI  CALL ISPLINK ('EDIF ','EDIFDSN ','EDIFPROF ','F ',80, ,\nI    RDRTN,WRRTN,CMDRTN,MYDATA)\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0209": {"ttr": 31749, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00T\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00\\x84\\x00\\x84\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:54", "lines": 132, "newlines": 132, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0209\nTISPF Services Guide\nT-Chapter 2.\nT-EDIREC-Initialize Edit Recovery\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141554\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNEDIREC-Initialize Edit Recovery\nN-------------------------------\nNThe EDIREC service initializes an edit recovery table (ISREIRT) for use\nNby the EDIF service and determines whether recovery from the EDIF\nNservice is pending. EDIREC also allows you to cancel or defer the\nNrecovery of data modifications.\nN\nNCommand invocation format\nN-------------------------\nNYou cannot use command procedures to invoke this service.\nN\nNCall invocation format\nD  CALL ISPLINK ('EDIREC  ', +\nI    'INIT' | 'QUERY' | 'CANCEL' | 'DEFER'\nD    'INIT    ', | +\nI      The edit recovery table for EDIF should be initialized in the\nI      user profile library if one does not already exist for the\nI      current application.\nN\nD      command-name | 'b', +\nI        A command procedure (CLIST or REXX exec) or a program written\nI        as a command that initializes the EDIF table. If this parameter\nI        is omitted, the INIT option invokes an ISPF-supplied CLIST\nI        named ISREIRTI. ISREIRTI creates an 8-row EDIF recovery table\nI        that permits eight levels of concurrent Edit sessions with\nI        recovery active. The Edit sessions may be due to recursion or\nI        split-screen usage.\nN\nI        If you specify an application-supplied command with the INIT\nI        option, you should pattern the command after ISREIRTI. It can\nI        create a different number of rows, use a different naming\nI        convention for the backup data sets, or specify \"keep\"\nI        (instead of \"delete\") as the backup data set disposition. The\nI        format of the EDIF recovery table must be the same as that\nI        specified in ISREIRTI.\nN\nD    'QUERY   ' | +\nI      The EDIF recovery table should be searched for a pending\nI      recovery. When the QUERY option is specified, EDIREC scans the\nI      EDIF recovery table for an entry containing a recovery pending\nI      condition. If an entry is found (return code 4), the dialog must\nI      then call EDIF with (recovery-request = YES) to recover the data,\nI      or call EDIREC with the CANCEL or DEFER option to dispose of the\nI      pending recovery condition.\nN\nI      These variables are stored in the dialog function pool when\nI      EDIREC is called with the QUERY option and recovery is pending\nI      (return code 4):\nN\nI      -> ZEIBDSN - Backup data name\nI      -> ZEITDSN - Target data name\nI      -> ZEIROW - Row number of entry in the recovery table.\nN\nI      The dialog can check the variables and use them to display\nI      information to the user. The dialog must not change them. If\nI      EDIREC QUERY indicates that recovery is not pending, the previous\nI      variables are not meaningful.\nN\nI      ZEIUSER is an extension variable in the EDIF recovery table that\nI      is provided to contain user data. Whatever data is in dialog\nI      variable ZEIUSER in the shared pool is saved to the ZEIUSER\nI      variable in the EDIF recovery table when the recovery data set\nI      is initialized. This is done if RECOVERY is ON when first\nI      entering Edit or after using the SAVE command.\nN\nI      When EDIREC is called with the QUERY option and the return code\nI      is 4, indicating that recovery is pending, the data is read out\nI      of ZEIUSER in the table and returned to ZEIUSER in the shared and\nI      function pools. If recovery is not pending, this variable is not\nI      meaningful.\nN\nD    'CANCEL  ' | +\nI      Cancellation of edit recovery. The backup data set is erased and\nI      the corresponding entry in the EDIF recovery table is freed.\nN\nD    'DEFER   '\nI      Edit recovery is to be deferred. Recovery is canceled, but the\nI      backup data set is saved so that recovery can be processed at\nI      another time.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  call_edirec_rc = RC\nD  SELECT\nD    WHEN (call_edirec_rc = 0) THEN DO\nD      /* Normal completion.\nD         -> INIT - EDIF recovery table was successfully created.\nD         -> QUERY - Recovery is not pending. */\nD      NOP\nD    END\nD    WHEN (call_edirec_rc = 4) THEN DO\nD      /* Normal completion.\nD         -> INIT - EDIF recovery table already exists for current\nD            application.\nD         -> QUERY - Entry found in EDIF recovery table (recovery is\nD            pending). */\nD      NOP\nD    END\nD    WHEN (call_edirec_rc = 20) THEN DO\nD      /* Severe error; unable to continue. */\nD      SAY \"Ask your programmer to fix the CALL for EDIREC.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"call_edirec_rc\").\"\nD    END\nD  END\nN\nNExample 1: initialize the EDIF recovery table.\nN----------------------------------------------\nI  CALL ISPLINK('EDIREC  ','INIT    ','USRCMD  ')\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0210": {"ttr": 32001, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00T\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x03\\x17\\x03\\x17\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:54", "lines": 791, "newlines": 791, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0210\nTISPF Services Guide\nT-Chapter 2.\nT-EDIT-Edit a data set\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141554\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNEDIT-Edit a data set\nN--------------------\nNThe EDIT service provides an interface to the ISPF editor and bypasses\nNthe display of the Edit Entry Panel. The EDIT interface allows you to\nNuse a customized panel for displaying data (use panel ISREFR01 as a\nNmodel when creating your panel), and lets you specify the initial macro\nNand the edit profile to be used. You can use EDIT to look at any ISPF\nNlibrary, concatenation of ISPF libraries, or data set that can be\nNallocated by using the LMINIT service. You can use the EDIT service\nNrecursively, either through nested dialogs or by entering an EDIT\nNcommand while editing. z/OS ISPF Edit and Edit Macros contains a\nNcomplete description of the editor.\nN\nNWhen EDIT is operating in recovery mode, an audit trail of your\nNinteractions is automatically recorded in an ISPF-controlled data set.\nNFollowing a system failure, you can use the audit trail to recover the\nNdata you were editing.\nN\nNNote:\nN  1. Dialogs that invoke the EDIT service may invoke the EDREC service\nN     first to start edit recovery, because the EDIT service does not\nN     do edit recovery.\nN\nN  2. The EDIT service might alter the DISPLAY environment. Do not\nN     expect the DISPLAY environment that existed before invoking the\nN     EDIT service to remain unchanged.\nN\nN  3. The EDIT service cannot be issued by a PL/I main program that also\nN     uses subtasking.\nN\nN  4. When designing applications that will use the EDIT service, be\nN     aware that you cannot run EDIT in a pop-up window.\nN\nNA dialog using EDIT can place data into the ZEDUSER dialog variable in\nNthe shared pool. The data in ZEDUSER is saved in the edit recovery\nNtable as an extension variable when the recovery data set is\nNinitialized. This is done if RECOVERY is ON when first entering Edit\nNor after using the SAVE command. This data is then made available in\nNdialog variable ZEDUSER at the time edit recovery is processed.\nN\nNYou can use EDIT to edit workstation files on the host and host data\nNsets on the workstation. This function is called distributed editing.\nN\nMSee the manual for more information on distributed editing.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nD  done = 0\nD  DO WHILE done = 0\nD    ADDRESS ISPEXEC \"EDREC QUERY\"\nD    IF (RC = 4) THEN DO\nD      ADDRESS ISPEXEC \"EDREC DEFER\"\nD    END\nD    ELSE DO\nD      done = 1\nD    END\nD  END\nD\nD  ADDRESS ISPEXEC \"EDIT\" ,\nD    \"DATASET(dsname)\" ,\nI      The data set name, in TSO syntax, of the data set to be edited.\nI      This is equivalent to the \"other\" data set name on the Edit Entry\nI      Panel. You can specify a fully qualified data set name enclosed\nI      in apostrophes ('dsname'). If the apostrophes are omitted, the\nI      TSO data set prefix from the user's TSO profile is automatically\nI      prefixed to the data set name. The maximum length of this\nI      parameter is 56 characters.\nN\nI      For ISPF libraries and MVS partitioned data sets, you can specify\nI      a member name or a pattern enclosed in parentheses. If you do not\nI      specify a member name or if you specify a member pattern as part\nI      of the dsname specification when the DATASET keyword is used, a\nI      member selection list for the ISPF library, concatenation of\nI      libraries, or MVS partitioned data set is displayed. See\nI      SC19-3627-30 (f54ug00_v2r3.pdf) z/OS ISPF User's Guide Vol I for\nI      more information about patterns and pattern matching.\nN\nI      Note: You can also specify a VSAM data set name. If a VSAM data\nI      set is specified, ISPF checks the ISPF configuration table to see\nI      if VSAM support is enabled. If it is, the specified tool is\nI      invoked. If VSAM support is not enabled, an error message is\nI      displayed.\nN\nD    \"VOLUME(serial)\" ,\nI      The serial number of the volume on which the data set resides.\nI      If you omit this parameter or code it as blank, the system\nI      catalog is searched for the data set name. The maximum length of\nI      this parameter is 6 characters.\nN\nM      The system catalog is your friend.\nN\nI    \"PASSWORD(pswd-value)\" ,\nN      /* Obsolete if you have CA-ACF2, RACF, CA-Top-Secret. */ ,\nI      The password if the data set has MVS password protection. Do not\nI      specify a password for data sets that are protected by Resource\nI      Access Control Facility (RACF), CA-ACF2, OR CA-Top-Secret.\nN\nD    \"PANEL(panel-name)\" ,\nI      The name of a customized edit panel, created by you, to be used\nI      when displaying the data. See GC19-3623-30 (f54PC00_v2r3.pdf)\nI      z/OS ISPF Planning and Customizing for information about\nI      developing a customized panel.\nN\nM      SC19-3619-30 (f54dg00_v2r3.pdf) ISPF Dialog Developer's Guide\nM      and Reference Chapter 6 and Chapter 7 have the details you want\nM      for defining a panel. for information about developing a\nI      customized panel.\nN\nD    \"MACRO(macro-name)\" ,\nI      The name of the first edit macro to be executed after the data\nI      is read, but before it is displayed. See SC19-3621-30\nI      (f54em00_v2r3.pdf) z/OS ISPF Edit and Edit Macros for more\nI      information on macros.\nN\nD    \"PROFILE(profile-name)\" ,\nI      The name of the edit profile to be used. If you do not specify a\nI      profile name, the profile name defaults to the ISPF library type\nI      or last qualifier of the \"other\" TSO data set name. See\nI      SC19-3621-30 (f54em00_v2r3.pdf) z/OS ISPF Edit and Edit Macros\nI      for more information.\nN\nD    \"FORMAT(format-name)\" ,\nI      The name of the format to be used to reformat the data. The\nI      format-name parameter is provided to support the IBM 5550\nI      terminal using the Double-Byte Character Set (DBCS).\nN\nD    \"MIXED( YES | NO )\" ,\nI      For the MIXED parameter, if YES is specified, the EDIT service\nI      treats the data as mixed-mode DBCS data. If NO is specified, the\nI      data is treated as EBCDIC (single-byte) data. This parameter is\nI      provided to support the IBM 5550 terminal using the Double-Byte\nI      Character Set (DBCS).\nN\nI      NO is the default.\nN\nI    \"LOCK( YES | NO )\" ,\nN      /* Obsolete. */\nI      The LOCK parameter is no longer used since the removal of LMF\nI      from the ISPF product, but is left in for compatibility purposes.\nN\nI      If YES is specified the edit service will fail with return code\nI      12. If you want to be able to specify YES and have the editor\nI      ignore the value, change the FAIL_ON_LMF_LOCK keyword value in\nI      the ISPF Configuration Table to NO.\nN\nI      YES is the default.\nN\nD    \"CONFIRM( YES | NO )\" ,\nI      For the CONFIRM parameter, if you specify YES and then attempt to\nI      CANCEL, MOVE, or REPLACE data while in EDIT mode, ISPF displays a\nI      pop-up panel that requires you to confirm the action. Because\nI      members or data sets that are moved, canceled, or replaced are\nI      deleted, CONFIRM acts as a safeguard against accidental data\nI      loss. If you want to terminate the edit session without saving\nI      the data, press ENTER. If you made a mistake and want to return\nI      to the edit session, enter the END command. If you specify NO as\nI      the CONFIRM value, you will not be required to confirm a CANCEL,\nI      MOVE, or REPLACE.\nN\nD    \"WS( YES | NO )\" ,\nI      For the WS keyword, if you specify YES, the EDIT service edits\nI      the host data set or workstation file on the workstation, using\nI      the workstation editor configured in the ISPF Workstation Tool\nI      Integration Program. For more information see SC19-3628-30\nI      (f54u200_v2r3.pdf) z/OS ISPF User's Guide Vol II. If you specify\nI      NO, the EDIT service edits the host data set or workstation file\nI      on the host using the ISPF editor.\nN\nD    \"WRAP\" ,\nI      Indicates how the editor should process host data that has been\nI      edited on the workstation and now contains records longer than\nI      the logical record length of the host data set. Specifying WRAP\nI      causes the editor to upload the data to the host data set,\nI      wrapping any lines that are longer than the logical record\nI      length. Leaving off the WRAP parameter or passing a blank value\nI      will cause the editor to display a prompt panel to the user with\nI      these options:\nN\nI      -> upload the data, wrapping any long lines\nN\nI      -> have the editor create a temporary data set with a logical\nI         record length large enough to handle the data, then upload\nI         the data to that temporary data set.\nN\nI      This parameter is only valid when WS(YES) is specified.\nN\nD    \"PRESERVE\" ,\nI      When specified, the editor stores the original length of each\nI      record in variable-length data sets and when a record is saved,\nI      the original record length is used as the minimum length for the\nI      record. The editor always includes a blank at the end of a line\nI      if the length of the record is zero or eight. Records can be\nI      extended by adding nonblank data to the record or by using the\nI      SAVE_LENGTH edit macro command. For more information, refer to\nI      SC19-3621-30 (f54em00_v2r3.pdf) z/OS ISPF Edit and Edit Macros.\nN\nD    \"PARM(parm-var)\" ,\nI      The name of an ISPF variable that contains parameters which are\nI      to be passed to the initial macro specified by macro-name. The\nI      variable value must not exceed 200 bytes in length. If no macro\nI      name is specified, parm-var must be blank or not specified.\nN\nD    \"ASCII\" | \"UTF8\" ,\nI      This parameter can be specified when invoking EDIT to edit data\nI      encoded in ASCII (or UTF-8) and the file is not tagged with a\nI      CCSID of 819 (or 1208).\nN\nI      When ASCII is specified or the file is tagged with CCSID 819,\nI      the editor renders the ASCII data readable by converting it to\nI      the CCSID of the terminal. Also, if set for a z/OS UNIX file,\nI      the editor breaks up the data into records using the ASCII\nI      linefeed character (X'0A') and the ASCII carriage return\nI      character (X'0D') as the record delimiter. For z/OS UNIX files,\nI      the linefeed and carriage return characters are removed from the\nI      data loaded into the editor but written back to the file when the\nI      data is saved. This option should not be used when editing\nI      workstation files which are converted to EBCDIC when they are\nI      loaded from the workstation.\nN\nI      When UTF8 is specified, or the file is tagged with CCSID 1208,\nI      the equivalent actions happen, except for UTF-8 instead of ASCII.\nN\nD    \"LINECMDS(tabname)\" ,\nI      A fullword fixed binary integer containing the length of the\nI      buffer parameter.\nN\nD    \"GEN(generation)\"\nI      A fullword fixed integer containing the relative or absolute\nI      generation of the member to be edited. If the value is negative,\nI      it is a relative generation. If the value is positive, it is an\nI      absolute generation that the caller has determined to be valid.\nI      The value 0 (zero) indicates the current generation and is\nI      equivalent to not specifying the parameter. This parameter is\nI      valid only when the specified member is in a PDSE version 2 data\nI      set that is configured for member generations.\nN\nN  or\nN\nD  ADDRESS ISPEXEC \"EDIT\" ,\nD    \"DATAID(data-id))\" ,\nI      The data ID that was returned from the LMINIT service. The\nI      maximum length of this parameter is 8 characters.\nN\nI      You can use the LMINIT service in either of two ways before\nI      invoking the EDIT service:\nN\nI      -> You can use LMINIT to allocate existing data sets by\nI         specifying a data set name or ISPF library qualifiers. LMINIT\nI         returns a data ID as output. This data ID, rather than a data\nI         set name, is then passed as input to the EDIT service.\nN\nI      -> The dialog can allocate its own data sets by using the TSO\nI         ALLOCATE command or MVS dynamic allocation, and then passing\nI         the ddname to LMINIT. Again, a data ID is returned as output\nI         from LMINIT and subsequently passed to the EDIT service. This\nI         procedure is called the ddname interface to EDIT. It is\nI         particularly useful for editing VIO data sets, which cannot\nI         be accessed by data set name because they are not cataloged.\nN\nD    \"MEMBER(member-name)\" ,\nI      A member of an ISPF library or MVS partitioned data set, or a\nI      pattern. If you do not specify a member name when the MEMBER\nI      keyword or call invocation is used, or if a pattern is specified,\nI      a member selection list for the ISPF library, concatenation of\nI      libraries, or MVS partitioned data set is displayed. See\nI      XXXX-XXXX-XX (f54ug00_v2r3.pdf) the z/OS ISPF User's Guide Vol I\nI      for more information about patterns and pattern matching.\nN\nD    \"PANEL(panel-name)\" ,\nI      The name of a customized edit panel, created by you, to be used\nI      when displaying the data. See GC19-3623-30 (f54PC00_v2r3.pdf)\nI      z/OS ISPF Planning and Customizing for information about\nI      developing a customized panel.\nN\nM      SC19-3619-30 (f54dg00_v2r3.pdf) ISPF Dialog Developer's Guide\nM      and Reference Chapter 6 and Chapter 7 have the details you want\nM      for defining a panel. for information about developing a\nI      customized panel.\nN\nD    \"MACRO(macro-name)\" ,\nI      The name of the first edit macro to be executed after the data\nI      is read, but before it is displayed. See SC19-3621-30\nI      (f54em00_v2r3.pdf) z/OS ISPF Edit and Edit Macros for more\nI      information on macros.\nN\nD    \"PROFILE(profile-name)\" ,\nI      The name of the edit profile to be used. If you do not specify a\nI      profile name, the profile name defaults to the ISPF library type\nI      or last qualifier of the \"other\" TSO data set name. See\nI      SC19-3621-30 (f54em00_v2r3.pdf) z/OS ISPF Edit and Edit Macros\nI      for more information.\nN\nD    \"FORMAT(format-name)\" ,\nI      The name of the format to be used to reformat the data. The\nI      format-name parameter is provided to support the IBM 5550\nI      terminal using the Double-Byte Character Set (DBCS).\nN\nD    \"MIXED( YES | NO )\" ,\nI      For the MIXED parameter, if YES is specified, the EDIT service\nI      treats the data as mixed-mode DBCS data. If NO is specified, the\nI      data is treated as EBCDIC (single-byte) data. This parameter is\nI      provided to support the IBM 5550 terminal using the Double-Byte\nI      Character Set (DBCS).\nN\nI      NO is the default.\nN\nI    \"LOCK( YES | NO )\" ,\nN      /* Obsolete. */\nI      The LOCK parameter is no longer used since the removal of LMF\nI      from the ISPF product, but is left in for compatibility purposes.\nN\nI      If YES is specified the edit service will fail with return code\nI      12. If you want to be able to specify YES and have the editor\nI      ignore the value, change the FAIL_ON_LMF_LOCK keyword value in\nI      the ISPF Configuration Table to NO.\nN\nI      YES is the default.\nN\nD    \"CONFIRM( YES | NO )\" ,\nI      For the CONFIRM parameter, if you specify YES and then attempt to\nI      CANCEL, MOVE, or REPLACE data while in EDIT mode, ISPF displays a\nI      pop-up panel that requires you to confirm the action. Because\nI      members or data sets that are moved, canceled, or replaced are\nI      deleted, CONFIRM acts as a safeguard against accidental data\nI      loss. If you want to terminate the edit session without saving\nI      the data, press ENTER. If you made a mistake and want to return\nI      to the edit session, enter the END command. If you specify NO as\nI      the CONFIRM value, you will not be required to confirm a CANCEL,\nI      MOVE, or REPLACE.\nN\nD    \"WS( YES | NO )\" ,\nI      For the WS keyword, if you specify YES, the EDIT service edits\nI      the host data set or workstation file on the workstation, using\nI      the workstation editor configured in the ISPF Workstation Tool\nI      Integration Program. For more information see SC19-3628-30\nI      (f54u200_v2r3.pdf) z/OS ISPF User's Guide Vol II. If you specify\nI      NO, the EDIT service edits the host data set or workstation file\nI      on the host using the ISPF editor.\nN\nD    \"WRAP\" ,\nI      Indicates how the editor should process host data that has been\nI      edited on the workstation and now contains records longer than\nI      the logical record length of the host data set. Specifying WRAP\nI      causes the editor to upload the data to the host data set,\nI      wrapping any lines that are longer than the logical record\nI      length. Leaving off the WRAP parameter or passing a blank value\nI      will cause the editor to display a prompt panel to the user with\nI      these options:\nN\nI      -> upload the data, wrapping any long lines\nN\nI      -> have the editor create a temporary data set with a logical\nI         record length large enough to handle the data, then upload\nI         the data to that temporary data set.\nN\nI      This parameter is only valid when WS(YES) is specified.\nN\nD    \"PRESERVE\" ,\nI      When specified, the editor stores the original length of each\nI      record in variable-length data sets and when a record is saved,\nI      the original record length is used as the minimum length for the\nI      record. The editor always includes a blank at the end of a line\nI      if the length of the record is zero or eight. Records can be\nI      extended by adding nonblank data to the record or by using the\nI      SAVE_LENGTH edit macro command. For more information, refer to\nI      SC19-3621-30 (f54em00_v2r3.pdf) z/OS ISPF Edit and Edit Macros.\nN\nD    \"PARM(parm-var)\" ,\nI      The name of an ISPF variable that contains parameters which are\nI      to be passed to the initial macro specified by macro-name. The\nI      variable value must not exceed 200 bytes in length. If no macro\nI      name is specified, parm-var must be blank or not specified.\nN\nD    \"ASCII\" | \"UTF8\" ,\nI      This parameter can be specified when invoking EDIT to edit data\nI      encoded in ASCII (or UTF-8) and the file is not tagged with a\nI      CCSID of 819 (or 1208).\nN\nI      When ASCII is specified or the file is tagged with CCSID 819,\nI      the editor renders the ASCII data readable by converting it to\nI      the CCSID of the terminal. Also, if set for a z/OS UNIX file,\nI      the editor breaks up the data into records using the ASCII\nI      linefeed character (X'0A') and the ASCII carriage return\nI      character (X'0D') as the record delimiter. For z/OS UNIX files,\nI      the linefeed and carriage return characters are removed from the\nI      data loaded into the editor but written back to the file when the\nI      data is saved. This option should not be used when editing\nI      workstation files which are converted to EBCDIC when they are\nI      loaded from the workstation.\nN\nI      When UTF8 is specified, or the file is tagged with CCSID 1208,\nI      the equivalent actions happen, except for UTF-8 instead of ASCII.\nN\nD    \"LINECMDS(tabname)\" ,\nI      A fullword fixed binary integer containing the length of the\nI      buffer parameter.\nN\nD    \"GEN(generation)\"\nI      A fullword fixed integer containing the relative or absolute\nI      generation of the member to be edited. If the value is negative,\nI      it is a relative generation. If the value is positive, it is an\nI      absolute generation that the caller has determined to be valid.\nI      The value 0 (zero) indicates the current generation and is\nI      equivalent to not specifying the parameter. This parameter is\nI      valid only when the specified member is in a PDSE version 2 data\nI      set that is configured for member generations.\nN\nN  or\nN\nD  ADDRESS ISPEXEC \"EDIT\" ,\nD    \"FILE(file-var)\" ,\nI      The name of an ISPF variable containing the path name for a\nI      z/OS UNIX regular file or directory. An absolute path name or a\nI      path name relative to the current working directory can be\nI      specified. Absolute path names begin with '/'. Relative path\nI      names begin with '.'. If the path name is for a directory, a\nI      directory selection list is displayed.\nN\nD    \"PANEL(panel-name)\" ,\nI      The name of a customized edit panel, created by you, to be used\nI      when displaying the data. See GC19-3623-30 (f54PC00_v2r3.pdf)\nI      z/OS ISPF Planning and Customizing for information about\nI      developing a customized panel.\nN\nM      SC19-3619-30 (f54dg00_v2r3.pdf) ISPF Dialog Developer's Guide\nM      and Reference Chapter 6 and Chapter 7 have the details you want\nM      for defining a panel. for information about developing a\nI      customized panel.\nN\nD    \"MACRO(macro-name)\" ,\nI      The name of the first edit macro to be executed after the data\nI      is read, but before it is displayed. See SC19-3621-30\nI      (f54em00_v2r3.pdf) z/OS ISPF Edit and Edit Macros for more\nI      information on macros.\nN\nD    \"PROFILE(profile-name)\" ,\nI      The name of the edit profile to be used. If you do not specify a\nI      profile name, the profile name defaults to the ISPF library type\nI      or last qualifier of the \"other\" TSO data set name. See\nI      SC19-3621-30 (f54em00_v2r3.pdf) z/OS ISPF Edit and Edit Macros\nI      for more information.\nN\nD    \"FORMAT(format-name)\" ,\nI      The name of the format to be used to reformat the data. The\nI      format-name parameter is provided to support the IBM 5550\nI      terminal using the Double-Byte Character Set (DBCS).\nN\nD    \"MIXED( YES | NO )\" ,\nI      For the MIXED parameter, if YES is specified, the EDIT service\nI      treats the data as mixed-mode DBCS data. If NO is specified, the\nI      data is treated as EBCDIC (single-byte) data. This parameter is\nI      provided to support the IBM 5550 terminal using the Double-Byte\nI      Character Set (DBCS).\nN\nI      NO is the default.\nN\nI    \"LOCK( YES | NO )\" ,\nN      /* Obsolete. */\nI      The LOCK parameter is no longer used since the removal of LMF\nI      from the ISPF product, but is left in for compatibility purposes.\nN\nI      If YES is specified the edit service will fail with return code\nI      12. If you want to be able to specify YES and have the editor\nI      ignore the value, change the FAIL_ON_LMF_LOCK keyword value in\nI      the ISPF Configuration Table to NO.\nN\nI      YES is the default.\nN\nD    \"CONFIRM( YES | NO )\" ,\nI      For the CONFIRM parameter, if you specify YES and then attempt to\nI      CANCEL, MOVE, or REPLACE data while in EDIT mode, ISPF displays a\nI      pop-up panel that requires you to confirm the action. Because\nI      members or data sets that are moved, canceled, or replaced are\nI      deleted, CONFIRM acts as a safeguard against accidental data\nI      loss. If you want to terminate the edit session without saving\nI      the data, press ENTER. If you made a mistake and want to return\nI      to the edit session, enter the END command. If you specify NO as\nI      the CONFIRM value, you will not be required to confirm a CANCEL,\nI      MOVE, or REPLACE.\nN\nD    \"WS( YES | NO )\" ,\nI      For the WS keyword, if you specify YES, the EDIT service edits\nI      the host data set or workstation file on the workstation, using\nI      the workstation editor configured in the ISPF Workstation Tool\nI      Integration Program. For more information see SC19-3628-30\nI      (f54u200_v2r3.pdf) z/OS ISPF User's Guide Vol II. If you specify\nI      NO, the EDIT service edits the host data set or workstation file\nI      on the host using the ISPF editor.\nN\nD    \"WRAP\" ,\nI      Indicates how the editor should process host data that has been\nI      edited on the workstation and now contains records longer than\nI      the logical record length of the host data set. Specifying WRAP\nI      causes the editor to upload the data to the host data set,\nI      wrapping any lines that are longer than the logical record\nI      length. Leaving off the WRAP parameter or passing a blank value\nI      will cause the editor to display a prompt panel to the user with\nI      these options:\nN\nI      -> upload the data, wrapping any long lines\nN\nI      -> have the editor create a temporary data set with a logical\nI         record length large enough to handle the data, then upload\nI         the data to that temporary data set.\nN\nI      This parameter is only valid when WS(YES) is specified.\nN\nD    \"PRESERVE\" ,\nI      When specified, the editor stores the original length of each\nI      record in variable-length data sets and when a record is saved,\nI      the original record length is used as the minimum length for the\nI      record. The editor always includes a blank at the end of a line\nI      if the length of the record is zero or eight. Records can be\nI      extended by adding nonblank data to the record or by using the\nI      SAVE_LENGTH edit macro command. For more information, refer to\nI      SC19-3621-30 (f54em00_v2r3.pdf) z/OS ISPF Edit and Edit Macros.\nN\nD    \"PARM(parm-var)\" ,\nI      The name of an ISPF variable that contains parameters which are\nI      to be passed to the initial macro specified by macro-name. The\nI      variable value must not exceed 200 bytes in length. If no macro\nI      name is specified, parm-var must be blank or not specified.\nN\nD    \"RECLEN(rec-len)\" ,\nI      A numeric value specifying the record length to be used when\nI      editing a z/OS UNIX file. This parameter causes the records to\nI      be loaded into the editor as fixed length and saved back in the\nI      file as fixed length.\nN\nD    \"ASCII\" | \"UTF8\" ,\nI      This parameter can be specified when invoking EDIT to edit data\nI      encoded in ASCII (or UTF-8) and the file is not tagged with a\nI      CCSID of 819 (or 1208).\nN\nI      When ASCII is specified or the file is tagged with CCSID 819,\nI      the editor renders the ASCII data readable by converting it to\nI      the CCSID of the terminal. Also, if set for a z/OS UNIX file,\nI      the editor breaks up the data into records using the ASCII\nI      linefeed character (X'0A') and the ASCII carriage return\nI      character (X'0D') as the record delimiter. For z/OS UNIX files,\nI      the linefeed and carriage return characters are removed from the\nI      data loaded into the editor but written back to the file when the\nI      data is saved. This option should not be used when editing\nI      workstation files which are converted to EBCDIC when they are\nI      loaded from the workstation.\nN\nI      When UTF8 is specified, or the file is tagged with CCSID 1208,\nI      the equivalent actions happen, except for UTF-8 instead of ASCII.\nN\nD    \"LINECMDS(tabname)\" ,\nI      A fullword fixed binary integer containing the length of the\nI      buffer parameter.\nN\nN  or\nN\nD  ADDRESS ISPEXEC \"EDIT\" ,\nD    \"WSFN(ws-filename)\" ,\nI      Specifies the name of a variable containing the path and the file\nI      name in the workstation's file system syntax of the workstation\nI      file to be edited. The maximum length of the path and the\nI      workstation file name within this variable is 256. If the path is\nI      omitted, the working directory configured in the ISPF tool\nI      integrator will be inserted in front of the workstation file name\nI      to resolve the relative path. For more information see\nI      SC19-3628-30 (f54u200_v2r3.pdf) z/OS ISPF User's Guide Vol II.\nN\nD    \"PANEL(panel-name)\" ,\nI      The name of a customized edit panel, created by you, to be used\nI      when displaying the data. See GC19-3623-30 (f54PC00_v2r3.pdf)\nI      z/OS ISPF Planning and Customizing for information about\nI      developing a customized panel.\nN\nM      SC19-3619-30 (f54dg00_v2r3.pdf) ISPF Dialog Developer's Guide\nM      and Reference Chapter 6 and Chapter 7 have the details you want\nM      for defining a panel. for information about developing a\nI      customized panel.\nN\nD    \"MACRO(macro-name)\" ,\nI      The name of the first edit macro to be executed after the data\nI      is read, but before it is displayed. See SC19-3621-30\nI      (f54em00_v2r3.pdf) z/OS ISPF Edit and Edit Macros for more\nI      information on macros.\nN\nD    \"PROFILE(profile-name)\" ,\nI      The name of the edit profile to be used. If you do not specify a\nI      profile name, the profile name defaults to the ISPF library type\nI      or last qualifier of the \"other\" TSO data set name. See\nI      SC19-3621-30 (f54em00_v2r3.pdf) z/OS ISPF Edit and Edit Macros\nI      for more information.\nN\nD    \"FORMAT(format-name)\" ,\nI      The name of the format to be used to reformat the data. The\nI      format-name parameter is provided to support the IBM 5550\nI      terminal using the Double-Byte Character Set (DBCS).\nN\nD    \"MIXED( YES | NO )\" ,\nI      For the MIXED parameter, if YES is specified, the EDIT service\nI      treats the data as mixed-mode DBCS data. If NO is specified, the\nI      data is treated as EBCDIC (single-byte) data. This parameter is\nI      provided to support the IBM 5550 terminal using the Double-Byte\nI      Character Set (DBCS).\nN\nI      NO is the default.\nN\nI    \"LOCK( YES | NO )\" ,\nN      /* Obsolete. */\nI      The LOCK parameter is no longer used since the removal of LMF\nI      from the ISPF product, but is left in for compatibility purposes.\nN\nI      If YES is specified the edit service will fail with return code\nI      12. If you want to be able to specify YES and have the editor\nI      ignore the value, change the FAIL_ON_LMF_LOCK keyword value in\nI      the ISPF Configuration Table to NO.\nN\nI      YES is the default.\nN\nD    \"CONFIRM( YES | NO )\" ,\nI      For the CONFIRM parameter, if you specify YES and then attempt to\nI      CANCEL, MOVE, or REPLACE data while in EDIT mode, ISPF displays a\nI      pop-up panel that requires you to confirm the action. Because\nI      members or data sets that are moved, canceled, or replaced are\nI      deleted, CONFIRM acts as a safeguard against accidental data\nI      loss. If you want to terminate the edit session without saving\nI      the data, press ENTER. If you made a mistake and want to return\nI      to the edit session, enter the END command. If you specify NO as\nI      the CONFIRM value, you will not be required to confirm a CANCEL,\nI      MOVE, or REPLACE.\nN\nD    \"WS( YES | NO )\" ,\nI      For the WS keyword, if you specify YES, the EDIT service edits\nI      the host data set or workstation file on the workstation, using\nI      the workstation editor configured in the ISPF Workstation Tool\nI      Integration Program. For more information see SC19-3628-30\nI      (f54u200_v2r3.pdf) z/OS ISPF User's Guide Vol II. If you specify\nI      NO, the EDIT service edits the host data set or workstation file\nI      on the host using the ISPF editor.\nN\nD    \"WRAP\" ,\nI      Indicates how the editor should process host data that has been\nI      edited on the workstation and now contains records longer than\nI      the logical record length of the host data set. Specifying WRAP\nI      causes the editor to upload the data to the host data set,\nI      wrapping any lines that are longer than the logical record\nI      length. Leaving off the WRAP parameter or passing a blank value\nI      will cause the editor to display a prompt panel to the user with\nI      these options:\nN\nI      -> upload the data, wrapping any long lines\nN\nI      -> have the editor create a temporary data set with a logical\nI         record length large enough to handle the data, then upload\nI         the data to that temporary data set.\nN\nI      This parameter is only valid when WS(YES) is specified.\nN\nD    \"PRESERVE\" ,\nI      When specified, the editor stores the original length of each\nI      record in variable-length data sets and when a record is saved,\nI      the original record length is used as the minimum length for the\nI      record. The editor always includes a blank at the end of a line\nI      if the length of the record is zero or eight. Records can be\nI      extended by adding nonblank data to the record or by using the\nI      SAVE_LENGTH edit macro command. For more information, refer to\nI      SC19-3621-30 (f54em00_v2r3.pdf) z/OS ISPF Edit and Edit Macros.\nN\nD    \"PARM(parm-var)\" ,\nI      The name of an ISPF variable that contains parameters which are\nI      to be passed to the initial macro specified by macro-name. The\nI      variable value must not exceed 200 bytes in length. If no macro\nI      name is specified, parm-var must be blank or not specified.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  edit_rc = RC\nD  SELECT\nD    WHEN (edit_rc = 0) THEN DO\nD      /* Normal completion; data was saved. */\nD      NOP\nD    END\nD    WHEN (edit_rc = 4) THEN DO\nD      /* Normal completion; data was not saved for one of these\nD         reasons:\nD\nD         -> No data changes were made during the EDIT session.\nD\nD         -> The CANCEL command was used to exit EDIT.\nD\nD         -> Browse was substituted for EDIT because insufficient\nD            storage was available to read in the requested data. */\nD      NOP\nD    END\nD    WHEN (edit_rc = 10) THEN DO\nD      /* Member or generation (if specified) not found. */\nD      SAY \"Ask your programmer to handle this condition using SETMSG.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (edit_rc = 12) THEN DO\nD      /* YES was specified for the LOCK parameter. */\nD      SAY \"Ask your programmer to use\" ,\nD        \"QUERYENQ to see who owns the lock.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (edit_rc = 14) THEN DO\nD      /* Member, sequential data set, or z/OS UNIX file in use. */\nD      SAY \"Ask your programmer to use\" ,\nD        \"QUERYENQ to see who has the blocking ENQUEUE.\"\nD      SAY \"Then handle this condition using SETMSG.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (edit_rc = 16) THEN DO\nD      /* Either:\nD\nD         -> No members matched the specified pattern.\nD\nD         -> No members in the partitioned data set. */\nD      SAY \"Ask your programmer to redrive the prompt for a member.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (edit_rc = 18) THEN DO\nD      /* A VSAM data set was specified but the ISPF Configuration\nD         Table does not allow VSAM processing. */\nD      SAY \"Ask your programmer to handle this condition using SETMSG.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (edit_rc = 20) THEN DO\nD      /* Severe error; unable to continue. */\nD      SAY \"Ask your programmer to fix error.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"edit_rc\").\"\nD    END\nD  END\nN\nNExample 1: Edit a PDS member.\nN-----------------------------\nI  ADDRESS ISPEXEC \"EDIT DATASET(DEMO.REXX(ISPG0210))\"\nN\nN or\nN\nI  ADDRESS ISPEXEC \"LMINIT DATAID(EDTID) DATASET(DEMO.REXX)\"\nI  ADDRESS ISPEXEC \"EDIT DATAID(&EDTID) MEMBER(ISPG0210)\"\nI  ADDRESS ISPEXEC \"LMFREE DATAID(&EDTID)\"\nN\nNExample 2: Edit a workstation file.\nN-----------------------------------\nI  WSFNNAME = 'c:\\config.sys'\nI  ADDRESS ISPEXEC \"EDIT WSFN(WSFNNAME) WS(NO)\"\nN\nNExample 3: Edit a z/OS UNIX file.\nN---------------------------------\nI  syscalls_rc = SYSCALLS(\"ON\")\nI  ADDRESS SYSCALL \"getcwd cwd\"\nI  syscalls_rc = RC\nI  getcwd_retval = RETVAL\nI  getcwd_errno = ERRNO\nI  IF ((syscalls_rc >= 0) & (getcwd_retval = -1)) THEN DO\nI    getcwd_errnojr = ERRNOJR\nI  END\nI  ELSE DO\nI    getcwd_errnojr = \"\"\nI  END\nI  filevar = cwd || \"/.sh_history\"\nI  ADDRESS ISPEXEC \"EDIT FILE(filevar)\" /* Must be a variable name. */\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0211": {"ttr": 32259, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00U\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x01\\x00\\x01\\x00\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:55", "lines": 256, "newlines": 256, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0211\nTISPF Services Guide\nT-Chapter 2.\nT-EDREC-Specify edit recovery handling\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141555\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNEDREC-Specify edit recovery handling\nN------------------------------------\nNThe EDREC service initializes an edit recovery table, determines\nNwhether recovery is pending, and takes the action specified by the\nNfirst argument.\nN\nNNote: Dialogs that invoke the EDIT service should invoke the EDREC\nNservice first to start edit recovery, because the EDIT service does not\nNperform edit recovery.\nN\nNWhen you invoke the EDREC service, EDREC displays a special panel.\nNUsing this panel you can recover data, cancel recovery, defer recovery\nNuntil a later time, or enter the END command to return to the next\nNsequential command in your command invocation or to return to the next\nNsequential instruction in your program.\nN\nNThe EDREC service attempts to use the panel that you specified in the\nNEDIT service from which it is recovering. Make sure that this panel is\nNavailable to the EDREC service. It must be in a library allocated to\nNISPPLIB or available through a LIBDEF.\nN\nNNote: You can use the ZEDUSER variable to save LIBDEF information or\nNthe panel name when you invoke EDIT. This is different from edit\nNrecovery entered from option 2, because option 2 always uses its\nNdefault panel.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"EDREC\" ,\nI    \"INIT\" | \"QUERY\" | \"PROCESS\" | \"CANCEL\" | \"DEFER\"\nD    \"INIT\" ,\nI      Initializes an edit recovery table in your profile library if\nI      one does not already exist for the current application. The edit\nI      recovery table is saved in the data set allocated to ddname\nI      ISPPROF in member xxxxEDRT, where xxxx is the ISPF application\nI      ID.\nN\nD      \"CMD(command-name)\"\nI        A CLIST or REXX exec that starts the table. If you omit this\nI        parameter, the INIT option invokes an ISPF-supplied CLIST named\nI        ISREDRTI. ISREDRTI creates an eight-row edit recovery table,\nI        permitting eight levels of concurrent Edit sessions with\nI        recovery active. The Edit sessions can result from recursion\nI        or split-screen usage.\nN\nI        If you specify a command with the INIT option, the command\nI        should be patterned after ISREDRTI. It can create a different\nI        number of rows or use a different naming convention for the\nI        backup data sets, or specify \"keep\" instead of \"delete\" as the\nI        backup data set disposition. The format of the edit recovery\nI        table must be the same as that specified in ISREDRTI.\nN\nD    \"QUERY\"\nI      Causes EDREC to search the edit recovery table for a pending\nI      recovery. When the QUERY option is specified, EDREC scans the\nI      edit recovery table for an entry containing a recovery pending\nI      condition. If the return code is 4, indicating an entry was\nI      found, the dialog must call EDREC with the PROCESS, CANCEL, or\nI      DEFER option.\nN\nI      EDREC QUERY is usually used in a loop, since there can be more\nI      than one pending recovery. Multiple recoveries can result from\nI      recursion or from split-screen usage of the dialog. Each\nI      subsequent call to EDREC with the QUERY option scans the table\nI      starting at the entry after the last one that was found. A\nI      typical loop, written in pseudo-code (showing the parameters\nI      themselves instead of sample values), is shown as Example 0.\nN\nI      As Example 0 shows, EDREC QUERY must be used before each\nI      invocation of any of these EDREC functions: PROCESS, CANCEL, or\nI      DEFER. The variables shown are stored in the dialog function pool\nI      when EDREC is called with the QUERY option and the return code\nI      is 4, indicating that recovery is pending.\nN\nI      ZEDBDSN: Backup data set name.\nN\nI      ZEDMODE: Indicates whether this is an edit session or a view\nI        session that is to be recovered.\nN\nI      ZEDROW: Row number of entry in edit recovery table.\nN\nI      ZEDTDSN: Target data set name.\nN\nI      ZEDTMEM: Target member name, if applicable.\nN\nI      ZEDTVOL: Volume serial of target data set, if a volume serial was\nI        specified on invocation of the EDIT service.\nN\nI      ZEDUSER: is an extension variable in the Edit Recovery Table that\nI        is provided to contain user data. Whatever data is in dialog\nI        variable ZEDUSER in the shared pool is saved to the ZEDUSER\nI        variable in the edit recovery table when the recovery data set\nI        is initialized. This is done if RECOVERY is ON when entering\nI        Edit or after using the SAVE command.\nN\nI      The dialog can check the preceding variables and use them to\nI      display information to the user. If EDREC QUERY shows that\nI      recovery is not pending, the previous variables are not\nI      meaningful.\nN\nI      When EDREC is called with the QUERY option and the return code\nI      is 4, indicating that recovery is pending, or if ISPF option 2\nI      edit recovery takes place, the data is read out of ZEDUSER in\nI      the table and returned to ZEDUSER in the shared and function\nI      pools. If recovery is not pending, this variable is not\nI      meaningful. The extension variable ZEDMODE indicates whether this\nI      is an edit session or a view session that is to be recovered.\nN\nD    \"PROCESS\" ,\nI      Causes edit recovery to proceed.\nN\nI      \"PASSWORD(pswd-value)\" ,\nI        /* Obsolete if you have CA-ACF2, RACF, CA-Top-Secret. */ ,\nI        The password if the data set has MVS password protection. Do\nI        not specify a password for data sets that are protected by\nI        Resource Access Control Facility (RACF), CA-ACF2, OR\nI        CA-Top-Secret.\nN\nI        This parameter is valid only with the PROCESS option.\nN\nD      \"DATAID(data-id)\"\nI        The data ID of the data set that will contain the recovered\nI        data. The recovered data should be saved in a data set other\nI        than the data set that was being edited when the system failure\nI        occurred. If you omit this parameter, EDREC attempts to save\nI        the recovered data in the original data set.\nN\nI        Before using the data ID parameter, the dialog must first\nI        invoke the LMINIT service to specify the target data set and\nI        then pass the data ID to the EDREC service. This procedure can\nI        also control the allocation of the target data set for\nI        recovery, even if it is not the original data set being edited.\nI        You must use this procedure if you originally specified the\nI        data set being edited to the EDIT service using the ddname\nI        interface.\nN\nD    \"CANCEL\"\nI      Cancels edit recovery. The backup data set is erased and the\nI      corresponding entry in the edit recovery table is freed.\nN\nD    \"DEFER\"\nI      Defers edit recovery. Recovery is canceled, but the backup data\nI      set is saved so that recovery can be processed in another Edit\nI      session.\nN\nI      Attention: Use this parameter carefully. It can cause your\nI      original data set to be written over in the next Edit session.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  edrec_rc = RC\nD  SELECT\nD    WHEN (edrec_rc = 0) THEN DO\nD      /* Normal return.\nD\nD         -> INIT: Edit recovery table was successfully created.\nD         -> QUERY: Recovery is not pending.\nD         -> PROCESS: Recovery was completed and the data was saved. */\nD      NOP\nD    END\nD    WHEN (edrec_rc = 4) THEN DO\nD      /* Normal return.\nD\nD         -> INIT: Edit recovery table already exists for current\nD            application.\nD         -> QUERY: Entry found in edit recovery table; recovery is\nD            pending.\nD         -> PROCESS: Recovery was completed, but user did not save\nD            data. */\nD      SAY \"Ask your programmer to handle this condition using SETMSG.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (edrec_rc = 20) THEN DO\nD      /* Severe error; unable to continue. */\nD      SAY \"Ask your programmer to fix error.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"edrec_rc\").\"\nD    END\nD  END\nN\nNExample 0: EDREC QUERY is usually used in a loop.\nN-------------------------------------------------\nI  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nI  done = 0\nI  DO WHILE done = 0\nI    ADDRESS ISPEXEC \"EDREC QUERY\"\nI    IF (RC = 4) THEN DO\nI      ADDRESS ISPEXEC \"EDREC DEFER\"\nI    END\nI    ELSE DO\nI      done = 1\nI    END\nI  END\nN\nNExample 1: Invokes the EDREC service for INIT to create an\nNedit recovery table.\nN----------------------------------------------------------\nI  ADDRESS ISPEXEC \"EDREC INIT\"\nN\nNExample 2: Invokes the LMINIT service for the EDIT service.\nN-----------------------------------------------------------\nI/* REXX exec to use edit recovery prior to edit */\nI\nI  ADDRESS ISPEXEC \"LMINIT DATAID(DATA1) DATASET(DEMO.REXX)\"\nI  IF (RC = 0) THEN DO\nI    ADDRESS ISPEXEC \"EDREC INIT\" /* CREATE RECOVERY TABLE */\nI    edrc = 0\nI    edcon = 1\nI    DO UNTIL ((edrc <> 4) | (edcon = 0))\nI      ADDRESS ISPEXEC \"EDREC QUERY\" /* CHECK FOR RECOVERY DS */\nI      edrc = RC\nI      IF (edrc = 4) THEN DO\nI        Z1 = ZEDTDSN /* SET UP PANEL VARIABLE */\nI                     /* AND SHOW RECOVERY PANEL */\nI        ADDRESS ISPEXEC \"DISPLAY PANEL(ISREDM02) CURSOR(ZCMD)\"\nI        IF ((RC = 0) & (SUBSTR(ZEDCMD,1,1) = \" \")) THEN DO\nI          ADDRESS ISPEXEC \"EDREC PROCESS\" /* PROCESS RECOVERY */\nI          edcon = 0 /* AND END LOOP */\nI        END\nI        ELSE DO\nI          IF ((RC = 0) & (SUBSTR(ZEDCMD,1,1) = \"C\")) THEN DO\nI            ADDRESS ISPEXEC \"EDREC CANCEL\"\nI          END\nI        END\nI      END\nI      ELSE DO\nI        ADDRESS ISPEXEC \"EDREC DEFER\"\nI      END\nI    END\nI    ADDRESS ISPEXEC \"EDIT DATAID(&DATA1) MEMBER(ISPG0211)\"\nI    ADDRESS ISPEXEC \"LMFREE DATAID(&DATA1)\"\nI  END\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0212": {"ttr": 32261, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00U\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00h\\x00h\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:55", "lines": 104, "newlines": 104, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0212\nTISPF Services Guide\nT-Chapter 2.\nT-FILESTAT-Statistics for a file\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141555\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNFILESTAT-Statistics for a file\nN------------------------------\nNUse the FILESTAT service to determine statistics about a file on the\nNconnected workstation. FILESTAT returns information that the file\nNexists, the longest length record in the file, and the date and time\nNon the file.\nN\nNNote: Be aware that when the FILESTAT service is issued for certain\nNreserved or restricted operating system file names, your workstation\nNoperating system or host system can cease to function, or \"hang\". See\nMyour workstation operating system documentation to note reserved or\nNrestricted file names.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"FILESTAT\" ,\nD    \"FILE(var-name)\" ,\nI      The variable name containing the workstation file for which you\nI      want statistics. If no parameters other than the file name are\nI      specified, the function will verify that the file exists with a\nI      return code of 0.\nN\nD    \"LRECL(var-name)\" ,\nI      The variable name in which ISPF returns the longest record length\nI      of the file you specify. The variable is returned in character\nI      format and has a length of 8.\nN\nD    \"DATE(var-name)\"\nI      The variable name in which ISPF returns the date and time that\nI      the specified workstation file was last changed. The date and\nI      time are returned in character format, and have a length of 19.\nI      The date format is 'yyyy/mm/dd hh:mm:ss'.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  filestat_rc = RC\nD  SELECT\nD    WHEN (filestat_rc = 0) THEN DO\nD      /* Workstation file exists. */\nD      NOP\nD    END\nD    WHEN (filestat_rc = 4) THEN DO\nD      /* Workstation file does not exist. */\nD      SAY \"Ask your programmer to handle this condition using SETMSG.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filestat_rc = 8) THEN DO\nD      /* Error in variable specification. */\nD      SAY \"Ask your programmer to fix the variable specification.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filestat_rc = 10) THEN DO\nD      /* No workstation connection exists. */\nD      SAY \"Ask your programmer to handle this condition using SETMSG.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filestat_rc = 12) THEN DO\nD      /* Workstation device is not ready. */\nD      SAY \"Ask the use to ready the workstation using SETMSG.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filestat_rc = 20) THEN DO\nD      /* Severe error in FILESTAT service. */\nD      SAY \"Ask your programmer to fix error.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"filestat_rc\").\"\nD    END\nD  END\nN\nNExample 1: Verifies the existence of a file on the workstation.\nN---------------------------------------------------------------\nI  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nI  fvar = 'd:\\design\\langsel.des'\nI  ADDRESS ISPEXEC \"FILESTAT\" ,\nI    \"FILE(fvar) LRECL(lvar) DATE(dvar)\"\nI  SAY \"Workstation file:\" fvar\nI  SAY \"Last changed:\" dvar \"Max LRECL:\" lvar\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0213": {"ttr": 32513, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00U\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x01 \\x01 \\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:55", "lines": 288, "newlines": 288, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0213\nTISPF Services Guide\nT-Chapter 2.\nT-FILEXFER-Upload or download file\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141555\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNFILEXFER-Upload or download file\nN--------------------------------\nNThe FILEXFER service is used to upload files from the workstation or\nNdownload files to the workstation. It supports the upload and download\nNof z/OS UNIX files.\nN\nNNote: Be aware that when the FILEXFER service is issued for certain\nNreserved or restricted operating system file names, your workstation\nNoperating system or host system can cease to function, or \"hang\". See\nNyour workstation operating system documentation to note reserved or\nNrestricted file names.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"FILEXFER\" ,\nD    \"TO(HOST | WS)\" ,\nI      An ISPF variable that tells where the file will be created upon\nI      the completion of the transfer.\nN\nI      HOST:\nN\nI      -> in binary mode data sets with fixed-length records are padded\nI         with null characters if needed to fill the final record of the\nI         data set. Data sets with variable-length records are not\nI         padded.\nN\nI      -> in text mode for Windows systems, a Carriage-Return/Line-Feed\nI         combination indicates the end of a line. An end-of-file\nI         character that is the last character in the file is not\nI         transmitted to the host. End-of-file characters at other\nI         locations in the file are transmitted to the host along with\nI         the data following the end-of-file character.\nN\nI         For AIX and HP-UX, a Line-Feed character is considered the\nI         end of a line.\nN\nI         If a line is longer than the record length of the data set\nI         the line is split into as many records as are needed to hold\nI         the line.\nN\nI         For data sets with fixed-length records lines are padded with\nI         blanks to reach the record length.\nN\nI      WS:\nN\nI      -> in binary mode all data from each record in the host data set\nI         is concatenated to form the workstation file.\nN\nI      -> in text mode blanks after the last nonblank character are\nI         trimmed form each record. Records consisting entirely of\nI         blanks are sent as a line with a single blank character.\nI         Zero-length records from a data set with variable-length\nI         records are not transferred to the workstation, and can cause\nI         an error condition to occur.\nN\nI         If a data set containing end-of-line characters is transferred\nI         to the workstation and back to the host, the end-of-line\nI         characters are removed and the line is split at the location\nI         of the end-of-line characters. For Windows systems, an\nI         end-of-file character at the end of the data set is also\nI         removed when the data set is transferred to the workstation\nI         and back to the host.\nN\nD    \"HOST(var-name)\" ,\nI      An ISPF variable that contains the name of the host file that is\nI      to be transferred. The name can be a path name for a z/OS UNIX\nI      regular file.\nN\nD    \"WS(var-name)\" ,\nI      An ISPF variable that contains the name of the workstation file\nI      that is to be transferred.\nN\nD    \"BINARY | TEXT\" ,\nI      BINARY: Specifies that no ASCII/EBCDIC character translation\nI        should take place.\nN\nI      TEXT: Specifies that ASCII/EBCDIC translation should take place.\nN\nD    \"STATS | NOSTATS\" ,\nI      STATS: Specifies that ISPF statistics will be generated or\nI        maintained by incrementing the mod level and setting the last\nI        changed time to the time when the member is uploaded.\nN\nI        This is the default.\nN\nI      NOSTATS: Specifies that ISPF statistics will not be generated or\nI        maintained when the member is uploaded.\nN\nD    \"CHKDATE(YES | NO)\" ,\nI      YES: On download, check the date and time of the source file and\nI        the target file. If they are different, perform the file\nI        transfer and update the date and time of the target file to\nI        match those of the source file. If they are the same, do not\nI        perform the file transfer, and set the return code to 2. If\nI        the source file you are downloading from the host to the PC\nI        does not have an entry in the date and time statistics, the\nI        current date is set on the host file at the time of the file\nI        transfer.\nN\nI      NO: Transfer the files regardless of dates and times.\nN\nD    \"SETDATE(YES | NO | SCLM)\" ,\nI      YES: On upload, set the date and time of the host file to be the\nI        same as the workstation file.\nN\nI      SCLM: On upload, set the date and time of the host file to be the\nI        same as the workstation file. In addition to this, set the\nI        SCLM bit on.\nN\nI      NO: On upload, use the system data and time for the host files.\nN\nD    \"MAKEPATH(YES | NO)\" ,\nI      YES: On transfer to the workstation, create the necessary\nI        subdirectories to store the file transferred. This parameter\nI        is ignored on a transfer to the host.\nN\nI      NO: On transfer to the workstation, do not create any\nI        subdirectories to store the file transferred. This parameter\nI        is ignored on a transfer to the host.\nN\nI        NO is the default for this parameter.\nN\nD    \"VOLUME(volume)\"\nI      An ISPF volume number for the location of the 'TO' file. Used\nI      only when working with uncataloged data sets.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  filexfer_rc = RC\nD  SELECT\nD    WHEN (filexfer_rc = 0) THEN DO\nD      /* This is not listed as possible. */\nD      SAY \"This never happens.\"\nD    END\nD    WHEN (filexfer_rc = 2) THEN DO\nD      /* Source file and target file have the same date and time. */\nD      SAY \"Ask your programmer to handle this condition using SETMSG.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 4) THEN DO\nD      /* LMSTAT failed. */\nD      SAY \"Ask your programmer to figure out why LMSTAT failed.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 6) THEN DO\nD      /* LMINIT failed. */\nD      SAY \"Ask your programmer to figure out why LMINIT failed.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 7) THEN DO\nD      /* Error in variable specification. */\nD      SAY \"Ask your programmer to fix the variable specification.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 8) THEN DO\nD      /* \"TO\" direction not valid. */\nD      SAY \"Ask your programmer to fix the TO direction.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 9) THEN DO\nD      /* Host name is too long. */\nD      SAY \"Ask your programmer to fix the host name.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 10) THEN DO\nD      /* No workstation connection exists. */\nD      SAY \"Ask your programmer to tell you to connect a workstation.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 11) THEN DO\nD      /* RC 1 from DTTRANSFER. Host data set had null object handle. */\nD      SAY \"Host data set had null object handle.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 12) THEN DO\nD      /* RC 2 from DTTRANSFER. Workstation file had null object\nD         handle. */\nD      SAY \"Workstation file had null object handle\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 13) THEN DO\nD      /* RC 3 from DTTRANSFER. Host data set could not be opened. */\nD      SAY \"Host data set could not be opened.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 14) THEN DO\nD      /* RC 4 from DTTRANSFER. Workstation file could not be opened. */\nD      SAY \"Workstation file could not be opened.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 15) THEN DO\nD      /* RC 5 from DTTRANSFER. Error reading host data set. */\nD      SAY \"Error reading host data set.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 16) THEN DO\nD      /* RC 6 from DTTRANSFER. Error reading workstation file. */\nD      SAY \"Error reading workstation file.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 17) THEN DO\nD      /* RC 7 from DTTRANSFER. Error writing host data set. */\nD      SAY \"Error writing host data set.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 18) THEN DO\nD      /* RC 8 from DTTRANSFER. Error writing workstation file. */\nD      SAY \"Error writing workstation file.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 19) THEN DO\nD      /* RC 9 from DTTRANSFER. Error closing host data set. */\nD      SAY \"Error closing host data set.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 20) THEN DO\nD      /* Severe error in transfer service. */\nD      SAY \"Ask your programmer to fix error.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 21) THEN DO\nD      /* RC 10 from DTTRANSFER. Error closing workstation file. */\nD      SAY \"Error closing workstation file.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 22) THEN DO\nD      /* RC 11 from DTTRANSFER. User refused file access. */\nD      SAY \"User refused file access.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (filexfer_rc = 23) THEN DO\nD      /* RC Data set or member in use. */\nD      SAY \"Try again later!\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"filexfer_rc\").\"\nD    END\nD  END\nN\nNExample 1: File transfer from the host to the workstation.\nN----------------------------------------------------------\nI  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nI  var1 = \"DEMO.DATA(CSRDSN)\"\nI  var2 = \"E:\\MyOS2\\File.txt\"\nI  ADDRESS ISPEXEC \"VPUT (var1 var2)\"  /* Dubious */\nI  ADDRESS ISPEXEC \"FILEXFER\" ,\nI    \"HOST(var1) WS(var2) TO(WS) TEXT\"\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0214": {"ttr": 32515, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00U\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00o\\x00o\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:55", "lines": 111, "newlines": 111, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0214\nTISPF Services Guide\nT-Chapter 2.\nT-FTCLOSE-End file tailoring\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141555\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNFTCLOSE-End file tailoring\nN--------------------------\nNThe FTCLOSE service is used to terminate the file tailoring process and\nNto indicate the final disposition of the file tailoring output.\nN\nNA member-name parameter should be specified if the output is a library.\nNThe file tailoring output is given the specified member name. No error\nNcondition results if the member-name parameter is not specified and the\nNoutput is not stored in the library.\nN\nNIf the member-name parameter is specified and the output is sequential,\nNa severe error results.\nN\nNThe library parameter should be specified if a library other than that\nNrepresented by the ISPFILE or LIBDEF definition is to be used. The\nNlibrary parameter is ignored if the \"TEMP\" option (temporary file) is\nNspecified on the FTOPEN service or if the ISPFILE definition specifies\nNa sequential data set. A severe error occurs if file tailoring attempts\nNto use a data set that is not a library.\nN\nNThe NOREPL parameter specifies that an existing member in the file\nNtailoring output library is not to be overlaid by the current FTCLOSE\nNservice. If a member of the same name already exists, the FTCLOSE\nNservice request is terminated with a return code of 4 and the original\nNmember remains unaltered.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"FTCLOSE\" ,\nD    \"NAME(member-name)\" ,\nI      Specifies the name of the member in the output library that is to\nI      contain the file tailoring output.\nN\nD    \"LIBRARY(library) \" ,\nI      Specifies the name of a DD statement or lib-type on the LIBDEF\nI      service request that defines the output library in which the\nI      member-name exists. If specified, a generic (non-ISPF) ddname\nI      must be used. If this parameter is omitted, the default is\nI      ISPFILE.\nN\nD    \"NOREPL\"\nI      Specifies that FTCLOSE is not to overlay an existing member in\nI      the output library.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  ftclose_rc = RC\nD  SELECT\nD    WHEN (ftclose_rc = 0) THEN DO\nD      /* Normal completion. */\nD      NOP\nD    END\nD    WHEN (ftclose_rc = 4) THEN DO\nD      /* Member already exists in the output library and NOREPL was\nD         specified. The original member is unchanged. */\nD      SAY \"Ask your programmer to handle the outcome of their choice.\"\nD    END\nD    WHEN (ftclose_rc = 8) THEN DO\nD      /* File not open. FTOPEN was not used before FTCLOSE. */\nD      SAY \"Ask your programmer to fix the logic, FTOPEN missing.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (ftclose_rc = 12) THEN DO\nD      /* Output file in use. ENQ failed. */\nD      SAY \"Ask your programmer to use a FREE file\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (ftclose_rc = 16) THEN DO\nD      /* Skeleton library or output file not allocated. */\nD      SAY \"Ask your programmer to allocate a file.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (ftclose_rc = 20) THEN DO\nD      /* Severe error. */\nD      SAY \"Ask your programmer to fix the severe error.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"ftclose_rc\").\"\nD    END\nD  END\nN\nNExample 1: End the file tailoring process.\nN------------------------------------------\nI  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nI  ADDRESS ISPEXEC \"FTCLOSE\" ,\nI    \"NAME(TELOUT)\"\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0215": {"ttr": 32517, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00V\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00R\\x00R\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:56", "lines": 82, "newlines": 82, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0215\nTISPF Services Guide\nT-Chapter 2.\nT-FTERASE-Erase file tailoring output\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141556\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNFTERASE-Erase file tailoring output\nN-----------------------------------\nNThe FTERASE service erases a member of a file tailoring output library.\nN\nNA severe error occurs if a specified library or the default, ISPFILE,\nNis a sequential file.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"FTERASE\" ,\nD    \"member-name\" ,\nI      Specifies the name of the member that is to be deleted from the\nI      output library.\nN\nD    \"LIBRARY(library-name)\"\nI      Specifies the name of a DD statement or lib-type on the LIBDEF\nI      service request that defines the output library that holds the\nI      member to be deleted. ISPFILE is the default if this parameter\nI      is omitted.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  fterase_rc = RC\nD  SELECT\nD    WHEN (fterase_rc = 0) THEN DO\nD      /* Normal completion. */\nD      NOP\nD    END\nD    WHEN (fterase_rc = 8) THEN DO\nD      /* File does not exist. */\nD      SAY \"Ask your programmer to fix the logic, no file.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (fterase_rc = 12) THEN DO\nD      /* Output file in use. ENQ failed. */\nD      SAY \"Ask your programmer to use a FREE file\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (fterase_rc = 16) THEN DO\nD      /* Alternate output library not allocated. */\nD      SAY \"Ask your programmer to allocate a file.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (fterase_rc = 20) THEN DO\nD      /* Severe error. */\nD      SAY \"Ask your programmer to fix the severe error.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"fterase_rc\").\"\nD    END\nD  END\nN\nNExample 1: Erase member TELOUT in the file tailoring output library.\nN--------------------------------------------------------------------\nI  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nI  ADDRESS ISPEXEC \"FTERASE\" ,\nI    \"TELOUT\"\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0216": {"ttr": 32519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00V\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00X\\x00X\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:56", "lines": 88, "newlines": 88, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0216\nTISPF Services Guide\nT-Chapter 2.\nT-FTINCL-Include a skeleton\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141556\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNFTINCL-Include a skeleton\nN-------------------------\nNThe FTINCL service specifies the skeleton that is to be used to produce\nNthe file tailoring output. If an FTOPEN service has not already been\nNissued, the FTINCL service performs the equivalent of an FTOPEN,\nNwithout the TEMP keyword, before processing the specified skeleton.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"FTINCL\" ,\nD    \"skel-name\" ,\nI      Specifies the name of the skeleton.\nN\nD    \"NOFT\" ,\nI      Specifies that no file tailoring is to be performed on the\nI      skeleton: the entire skeleton is to be copied to the output file\nI      exactly as is with no variable substitution or interpretation of\nI      control records.\nN\nD    \"EXT\"\nI      Enables support for built-in functions in all skeletons processed\nI      by the FTINCL call, unless the NOEXT parameter is specifically\nI      included on the )IM control statement when embedding a lower\nI      level skeleton.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  ftincl_rc = RC\nD  SELECT\nD    WHEN (ftincl_rc = 0) THEN DO\nD      /* Normal completion. */\nD      NOP\nD    END\nD    WHEN (ftincl_rc = 8) THEN DO\nD      /* Skeleton does not exist. */\nD      SAY \"Ask your programmer to fix the logic, no such skeleton.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (ftincl_rc = 12) THEN DO\nD      /* Skeleton in use; ENQ failed. */\nD      SAY \"Ask your programmer to redrive using skel-member.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (ftincl_rc = 16) THEN DO\nD      /* Data truncation occurred or skeleton library or output file\nD         not allocated. */\nD      SAY \"Ask your programmer to verify LRECL and space.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (ftincl_rc = 20) THEN DO\nD      /* Severe error. */\nD      SAY \"Ask your programmer to fix the severe error.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"ftincl_rc\").\"\nD    END\nD  END\nN\nNExample 1: Perform file tailoring using the skeleton named TELSKEL.\nN-------------------------------------------------------------------\nI  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nI  ADDRESS ISPEXEC \"FTINCL\" ,\nI    \"TELSKEL\"\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0217": {"ttr": 32769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00V\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x14\\x15\\x00d\\x00d\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T14:15:56", "lines": 100, "newlines": 100, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0217\nTISPF Services Guide\nT-Chapter 2.\nT-FTOPEN-Begin file tailoring\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141556\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNFTOPEN-Begin file tailoring\nN---------------------------\nNThe FTOPEN service, which begins the file tailoring process, allows\nNskeleton files to be accessed from the skeleton library specified by\nNddname ISPSLIB. The skeleton library must be allocated before invoking\nNISPF. ISPSLIB can specify a concatenation of files.\nN\nNIf output from file tailoring is not to be placed in a temporary file,\nNthe desired output file must be allocated to the ddname ISPFILE before\nNinvoking this service. ISPFILE can designate either a library or a\nNsequential file. The skeleton files can contain variable-length\nNrecords, with a maximum record length of 255.\nN\nNThe same rules apply for DBCS-related variable substitution in file\nNtailoring as those described for file skeleton definition.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"FTOPEN\" ,\nD    \"TEMP\"\nI      Specifies that the output of the file tailoring process should\nI      be placed in a temporary sequential file. Output is fixed-length\nI      80-byte records. The file is automatically allocated by ISPF.\nI      Its name is available in system variable ZTEMPF.\nN\nI      If this parameter is omitted, the output is placed in the library\nI      or sequential file designated by ddname ISPFILE.\nN\nI      ZTEMPF contains a fully qualified data set name. ZTEMPN contains\nI      the ddname. Generated JCL in this file can be substituted for\nI      background execution by using the TSO command:\nN\nI        SUBMIT '&ZTEMPF'\nN\nI      Before issuing the SUBMIT command, the VGET service should be\nI      invoked to initialize the variable ZTEMPF, and the FTCLOSE\nI      service must be invoked to ensure that all of the file tailoring\nI      output is included.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  ftopen_rc = RC\nD  SELECT\nD    WHEN (ftopen_rc = 0) THEN DO\nD      /* Normal completion. */\nD      NOP\nD    END\nD    WHEN (ftopen_rc = 8) THEN DO\nD      /* File tailoring already in progress. */\nD      SAY \"Ask your programmer to fix the logic, already FTOPEN.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (ftopen_rc = 12) THEN DO\nD      /* Output file in use; ENQ failed. */\nD      SAY \"Ask your programmer to redrive using a FREE file.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (ftopen_rc = 16) THEN DO\nD      /* Skeleton library or output file not allocated. */\nD      SAY \"Ask your programmer to allocate the file.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (ftopen_rc = 20) THEN DO\nD      /* Severe error. */\nD      SAY \"Ask your programmer to fix the severe error.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"ftopen_rc\").\"\nD    END\nD  END\nN\nNExample 1: Prepare for access (open) both libraries.\nN----------------------------------------------------\nI  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nI  ADDRESS ISPEXEC \"FTOPEN\"\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISPG0218": {"ttr": 54276, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x009\\x01\\x18\\x13\\x7f\\x01\\x18\\x14?\\x07(\\x00t\\x00r\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-23T07:28:39", "lines": 116, "newlines": 114, "modlines": 0, "user": "KTOMIAK"}, "text": "SISPG0218\nTISPF Services Guide\nT-Chapter 2.\nT-GETMSG-Get a message\nE\"Kenneth Tomiak\"<CBT_Ken@KTomiak.BIZ>\nZ20180517-141556\n*\n@IBM Corporation\n*\nBf54sg00_v2r3.pdf: SC19-3626-30: ISPF\nB-Services Guide\nB-z/OS Version 2 Release 3\n*\nNInteractive System Productivity Facility (ISPF) Services Guide\nN==============================================================\nNChapter 2. Description of the ISPF services\nN-------------------------------------------\nNGETMSG-Get a message\nN--------------------\nNThe GETMSG service obtains a message and related information from the\nNmessage file (ISPMLIB). The short and long message text, help panel\nNname, and alarm indicator can be obtained for a specified message-id.\nNValues for all variables defined in the message are substituted when\nNthe message text is retrieved. If the desired message information is\nNnot present for the short message text, long message text, or help\nNpanel name, the corresponding variable name specified in the GETMSG\nNservice request is set to a null value. If the alarm indicator is not\nNpresent on the message, a value of \"NO\" is returned in the alarm-name\nNvariable.\nN\nNA message type of critical (.TYPE=CRITICAL) on the message definition\nNstatement overrides the values specified for the alarm and window\nNkeywords. For critical messages, the dialog manager sounds the alarm\nNand places the message in a message pop-up window that requires a\nNresponse. If GETMSG asks for the .ALARM value to be returned, the\nNvalue returned will be \"YES\", reflecting the fact that .TYPE=CRITICAL\nNhas forced that value. This is the case if .ALARM was not specified\nN(which would normally default to NO) or if .ALARM=NO is actually\nNdefined for the message.\nN\nNAll the parameters except the message-id are optional. If the optional\nNparameters are omitted, GETMSG simply validates the existence of the\nNspecified message.\nN\nNCommand invocation format\nN-------------------------\nD  ADDRESS ISPEXEC \"GETMSG\" ,\nD    \"MSG(message-id)\" ,\nI      Specifies the identification of the message for which information\nI      is to be retrieved.\nN\nD    \"SHORTMSG(short-message-name)\" ,\nI      Specifies the name of a variable into which the short message\nI      text, if any, is to be stored.\nN\nD    \"LONGMSG(long-message-name)\" ,\nI      Specifies the name of a variable into which the long message\nI      text is to be stored.\nN\nD    \"ALARM(alarm-name)\" ,\nI      Specifies the name of a variable into which the alarm indicator\nI      of \"NO\" or \"YES\" is to be stored.\nN\nD    \"HELP(help-name)\" ,\nI      Specifies the name of a variable into which the help panel name,\nI      if any, is to be stored.\nN\nD    \"TYPE(type-name)\" ,\nI      Specifies the name of the variable into which the message type,\nI      if any, (notify, warning or critical) is to be stored.\nN\nD    \"WINDOW(window-name)\" ,\nI      Specifies the name of the variable into which the window type,\nI      if any (RESP or NORESP), is to be stored.\nN\nD    \"CCSID(ccsid-name)\"\nI      Specifies the name of the variable into which the CCSID, if any,\nI      is to be stored.\nN\nNReturn codes\nN------------\nNThese return codes are possible:\nN\nD  getmsg_rc = RC\nD  SELECT\nD    WHEN (getmsg_rc = 0) THEN DO\nD      /* Normal completion. */\nD      NOP\nD    END\nD    WHEN (getmsg_rc = 12) THEN DO\nD      /* The specified message could not be found.    */\nD      /*                OR                            */\nD      /* You need to initialize one of its variables. */\nD      SAY \"Ask your programmer to LIBDEF ISPSLIB with the message DSN.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    WHEN (getmsg_rc = 20) THEN DO\nD      /* Severe error. */\nD      SAY \"Ask your programmer to fix the severe error.\"\nD      SAY ZERRSM\nD      SAY ZERRLM\nD    END\nD    OTHERWISE DO\nD      SAY \"Something very unexpected happened, RC(\"getmsg_rc\").\"\nD    END\nD  END\nN\nNExample 1: For the message named ISPG218I.\nN------------------------------------------\nI  ADDRESS ISPEXEC \"CONTROL ERRORS RETURN\"\nI  ADDRESS ISPEXEC \"GETMSG MSG(ISPG218I) LONGMSG(errlmsg) HELP(hpanel)\"\nI  SAY \"The HELP panel is\" hpanel\".\"\nI  SAY \"The LONGMSG text is:\"\nI  SAY ERRLMSG\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT978/CBT.V500.FILE978.PDS/XMISPG.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT978/CBT.V500.FILE978.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}