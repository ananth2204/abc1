{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "KTOMIAK", "INMTNODE": "ANYNODE", "INMTUID": "KTOMIAK", "INMFTIME": "20180523170041000000", "INMNUMF": 2}, "INMR02": {"1": {"INMUTILN": "INMCOPY", "INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 251, "INMBLKSZ": 3120, "INMRECFM": "VB", "numfile": 1}, "2": {"INMUTILN": "IEBCOPY", "INMSIZE": 2880514, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 81, "INMBLKSZ": 27945, "INMRECFM": "FB", "INMDIR": 18, "INMDSNAM": "VENDOR.GENIE.WISHLIST", "INMMEMBR": "VENDOR.GENIE.WISHLIST", "numfile": 2}, "3": {"INMUTILN": "INMCOPY", "INMSIZE": 2880514, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 2}}, "INMR03": {"1": {"INMSIZE": 2880514, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}, "2": {"INMSIZE": 2880514, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "message": {"file": "b'@\\x7f\\xd2\\x85\\x95\\x95\\x85\\xa3\\x88@\\xc5@\\xe3\\x96\\x94\\x89\\x81\\x92\\x7fL\\xc3\\xc2\\xe3m\\xd2\\x85\\x95|\\xd2\\xe3\\x96\\x94\\x89\\x81\\x92K\\x82\\x89\\xa9n\\xe4K\\xe2K\\xc1K@\\xc3\\xc3z@\\xc1\\xd5\\xe8\\xd5\\xd6\\xc4\\xc5@a\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@\\xd2K@\\xe3\\x96\\x94\\x89\\x81\\x92@@@@@@@@@@@@@@@@@@@@@@\\xe2\\xe3\\xc1\\xd5\\xc4\\xc1\\xd9\\xc4@\\xc7\\xd3\\xd6\\xc2\\xc1\\xd3@\\xc4\\xc9\\xe2\\xc3\\xd3\\xc1\\xc9\\xd4\\xc5\\xd9``````````````````````````\\xe3\\x88\\x85@\\x81\\xa4\\xa3\\x88\\x96\\x99@\\x85\\xa7\\x97\\x93\\x89\\x83\\x89\\xa3\\x93\\xa8@\\x84\\x89\\xa2\\x81\\xa5\\x96\\xa6\\xa2@\\x81\\x95\\xa8@\\x83\\x93\\x81\\x89\\x94@\\xa6\\x88\\x81\\xa3\\xa2\\x96\\x85\\xa5\\x85\\x99@\\x81\\x82\\x96\\xa4\\xa3@\\xa3\\x88\\x85\\x83\\x96\\x99\\x99\\x85\\x83\\xa3\\x95\\x85\\xa2\\xa2@\\x96\\x99@\\x86\\xa4\\x95\\x83\\xa3\\x89\\x96\\x95\\x81\\x93\\x89\\xa3\\xa8@\\x96\\x86@\\xa3\\x88\\x89\\xa2@\\x97\\x99\\x96\\x87\\x99\\x81\\x94k@\\x81\\x95\\x84@\\x84\\x89\\xa2\\x83\\x93\\x81\\x89\\x94\\xa2@\\x93\\x89\\x81\\x82\\x89\\x93\\x89\\xa3\\xa8\\x86\\x96\\x99@\\x81\\x95\\xa8\\xa3\\x88\\x89\\x95\\x87@\\x81\\x95\\x84@\\x85\\xa5\\x85\\x99\\xa8\\xa3\\x88\\x89\\x95\\x87@\\x82\\x81\\x84@\\xa3\\x88\\x81\\xa3@\\x94\\x89\\x87\\x88\\xa3@\\x88\\x81\\x97\\x97\\x85\\x95@\\x89\\x95@\\x83\\x96\\x95\\x95\\x85\\x83\\xa3\\x89\\x96\\x95@\\xa6\\x89\\xa3\\x88k\\x82\\x85\\x86\\x96\\x99\\x85k@\\x84\\xa4\\x99\\x89\\x95\\x87k@\\x96\\x99@\\x81\\x86\\xa3\\x85\\x99@\\xa4\\xa2\\x89\\x95\\x87@\\x89\\xa3K@\\xc9@\\x88\\x81\\xa5\\x85@\\xa3\\x99\\x89\\x85\\x84@\\xa3\\x96@\\x94\\x81\\x92\\x85@\\x89\\xa3@\\xa6\\x96\\x99\\x92@\\x99\\x89\\x87\\x88\\xa3k\\x81\\x95\\x84@\\xc9@\\x81\\x94@\\x97\\x85\\x99\\xa2\\x96\\x95\\x81\\x93\\x93\\xa8@\\x97\\x99\\x85\\xa3\\xa3\\xa8@\\x83\\x96\\x95\\x86\\x89\\x84\\x85\\x95\\xa3@\\xa3\\x88\\x81\\xa3@\\x89\\xa3@\\x84\\x96\\x85\\xa2k@\\x82\\xa4\\xa3@\\x85\\xa5\\x85\\x99\\xa8\\x82\\x96\\x84\\xa8@\\x94\\x81\\x92\\x85\\xa2\\x94\\x89\\xa2\\xa3\\x81\\x92\\x85\\xa2k@\\xa2\\x96@\\x89\\x86@\\xa8\\x96\\xa4@\\xa4\\xa2\\x85@\\x89\\xa3k@\\xa8\\x96\\xa4@\\x84\\x96@\\xa2\\x96@\\x81\\xa3@\\xa8\\x96\\xa4\\x99@\\x96\\xa6\\x95@\\x99\\x89\\xa2\\x92K@\\xe2\\x89\\x95\\x83\\x85\\x99\\x85\\x93\\xa8@\\xa8\\x96\\xa4\\x99\\xa2k\\xd2\\x85\\x95\\x95\\x85\\xa3\\x88@\\xc5K@\\xe3\\x96\\x94\\x89\\x81\\x92@'", "lrecl": 80, "text": " \"Kenneth E Tomiak\"<CBT_Ken@KTomiak.biz>U.S.A. CC: ANYNODE /KTOMIAK   K. Tomiak\n                     STANDARD GLOBAL DISCLAIMER--------------------------The aut\nhor explicitly disavows any claim whatsoever about thecorrectness or functionali\nty of this program, and disclaims liabilityfor anything and everything bad that\nmight happen in connection with,before, during, or after using it. I have tried\nto make it work right,and I am personally pretty confident that it does, but eve\nrybody makesmistakes, so if you use it, you do so at your own risk. Sincerely yo\nurs,Kenneth E. Tomiak\n"}, "file": {"VENDOR.GENIE.WISHLIST": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27945, "DS1LRECL": 81, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12304, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3000, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "180143", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x002'", "DS1LSTAR": "b'\\x00\\xdf\\x02'", "DS1TRBAL": "b'\\xa4\\x06'"}, "COPYR2": {"deb": "b'\\x05\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x06\\x90\\x00\\x04z\\xcb\\xc8'", "extents": ["b'\\x05\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x06\\x90\\x00\\x04z\\xcb\\xc8'", "b'X}Ch\\x00\\x00\\x0b\\xa8\\x00\\x05\\x0b\\xb7\\x00\\x0e\\x00\\xeb'", "b'X}Ch\\x00\\x00\\x08M\\x00\\x03\\x08N\\x00\\x02\\x00\\x0f'", "b'X}Ch\\x00\\x00\\x06W\\x00\\r\\x06[\\x00\\x02\\x002'", "b'X}Ch\\x00\\x00\\x07\\x9d\\x00\\x00\\x07\\xa0\\x00\\x04\\x002'", "b'X}Ch\\x00\\x00\\x07\\xa0\\x00\\x05\\x07\\xa3\\x00\\t\\x002'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"AMSC": {"ttr": 2602, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC\nKdgt IDCAMS\nKALLOCATE ALTER BLDINDEX CREATE DCOLLECT DEFINE DELETE DIAGNOSE\nKEXAMINE EXPORT IMPORT LISTCAT LISTDATA PRINT REPRO SETCACHE\nKSHCDS VERIFY USERCATALOG MASTERCATALOG\nTAccess Method Services for Catalogs\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNAbout this document\nN-------------------\nNThis document is intended to help you use access method services\nNcommands. It contains reference information about the commands\nNused to manipulate catalogs and the objects cataloged in them. It\nNgives the syntax, a brief description, and examples of each access\nNmethod services command used with catalogs and the objects cataloged\nNin them.\nN\nN  Chapter 1. Using Access Method Services\nN  Chapter 2. Modal Commands\nN  Chapter 3. Functional Command\nN  Chapter 4. ALLOCATE\nN  Chapter 5. ALTER\nN  Chapter 6. ALTER LIBRARYENTRY\nN  Chapter 7. ALTER VOLUMEENTRY\nN  Chapter 8. BLDINDEX\nN  Chapter 9. CREATE LIBRARYENTRY\nN  Chapter 10. CREATE VOLUMEENTRY\nN  Chapter 11. DCOLLECT\nN  Chapter 12. DEFINE ALIAS\nN  Chapter 13. DEFINE ALTERNATEINDEX\nN  Chapter 14. DEFINE CLUSTER\nN  Chapter 15. DEFINE GENERATIONDATAGROUP\nN  Chapter 16. DEFINE NONVSAM\nN  Chapter 17. DEFINE PAGESPACE\nN  Chapter 18. DEFINE PATH\nN  Chapter 20. DELETE\nN  Chapter 21. DIAGNOSE\nN  Chapter 22. EXAMINE\nN  Chapter 23. EXPORT\nN  Chapter 24. EXPORT DISCONNECT\nN  Chapter 25. IMPORT\nN  Chapter 26. IMPORT CONNECT\nN  Chapter 27. LISTCAT\nN  Chapter 28. LISTDATA\nN  Chapter 29. PRINT\nN  Chapter 30. REPRO\nN  Chapter 31. SETCACHE\nN  Chapter 32. SHCDS\nN  Chapter 33. VERIFY\nN  Appendix A. Security Authorization Levels\nN  Appendix F. Interpreting DCOLLECT Output\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC00": {"ttr": 2817, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC00\nTDFSMS AMS\nT-Chapter 0. Preface\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-189953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 0. Preface\nN------------------\nNThe preface is where IBM chose to show how to code statements.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0001": {"ttr": 2819, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0001\nTDFSMS AMS\nT-Chapter 0.\nT-How to code access method services commands\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 0. Preface\nN------------------\nNHow to code access method services commands\nN-------------------------------------------\nNAll access method services commands have the following general\nNstructure:\nN\nN  COMMAND parameters ... \u00ddterminator\u00a8\nN\nN  The command defines the type of service requested. The parameters\nN  further describe the service requested. The terminator indicates the\nN  end of the command statement.\nN\nN  Commands: Commands can begin at, or to the right of, the left margin.\nN  For batch processing jobs, the default margins are 2 and 72.\nN\nN  Commands are separated from their parameters by one or more\nN  separators (blanks, commas, or comments). For some parameters,\nN  parentheses are used as separators. Comments are strings of\nN  characters surrounded by /* and */. Comments can contain any\nN  characters except */.\nN\nNPositional and keyword parameters\nN---------------------------------\nNA parameter can either be a positional parameter or a keyword\nNparameter.\nN\nNPositional parameters must always appear first in a parameter set.\nNIn access method services, positional parameters are never optional.\nN\nNA keyword parameter is a specific character string that can have a\nNvalue following it.\nN\nN  A keyword parameter can have a set of subparameters. Subparameters\nN  follow the same rules as parameter sets in general. When the\nN  subparameters are positional, the first subparameter is always\nN  required.\nN\nNHow to code subparameters\nN-------------------------\nNYou can use decimal (n), hexadecimal (X'n'), or binary (B'n') form to\nNdefine parameters.\nN\nNThese coding conventions apply to the subparameters in this section:\nN\nN-> When the subparameter contains a special character, enclose the\nN   subparameter in single quotation marks; for example, OWNER('*IBM*').\nN\nN-> When the subparameter contains a special character and a single\nN   quotation mark, code the embedded quotation mark as two single\nN   quotation marks; for example, VOLUMES('one' '&').\nN\nN-> When you code the subparameter in hexadecimal form, two hexadecimal\nN   characters represent one alphanumeric or special character. For\nN   example, FROMKEY(X'C1C2C3') is the same as FROMKEY(ABC). When you\nN   code a character string in hexadecimal, use an even number of\nN   hexadecimal characters because it will be justified to the right.\nN\nN-> When the subparameter contains a lowercase alphabetic character,\nN   it is changed to an uppercase alphabetic character.\nN\nNHow to continue commands and parameters\nN---------------------------------------\nNCommands can be continued on several records or lines. Except for the\nNlast line, each record or line must have a hyphen or a plus sign as\nNthe last nonblank character before, or at, the right margin.\nN\nNA hyphen continues the command. A plus sign continues both the command\nNand a value within the command.\nN\nNThe terminator\nN--------------\nNThe terminator ends the command, and can be either a semicolon or the\nNabsence of a continuation mark.\nN\nNIf you use the semicolon as the terminator, do not close it in\nNquotation marks or embed it in a comment. Everything to the right of\nNthe semicolon is ignored.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC01": {"ttr": 2821, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC01\nTDFSMS AMS\nT-Chapter 1. Using Access Method Services\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 1. Using Access Method Services\nN---------------------------------------\nNAccess method services (AMS) is a utility you can use to establish\nNand maintain catalogs and data sets. The Storage Management Subsystem\nN(SMS) and its classes, in conjunction with the automatic class\nNselection (ACS) routines, automate many access method services\nNcommands and their specified parameters. However, if your storage\nNadministrator has not established these routines, you can construct\nNand execute them manually. You can find these commands and parameters\nNin this book.\nN\nNIDCAMS is the program name for access method services (AMS).\nN\nNThere are two types of access method services commands: Functional\nNcommands, which you use to define data sets or list catalogs; and\nNmodal commands, which you use to specify the conditional execution\nNof functional commands. If you are a time sharing option (TSO/E) user,\nNyou are restricted to using only the functional commands. For detailed\nNinformation about these commands, their parameters and subparameters,\nNrefer to the subsequent chapters in this book.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0101": {"ttr": 2823, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0101\nTDFSMS AMS\nT-Chapter 1.\nT-Identifying Data Sets and Volumes\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-093125\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 1. Using Access Method Services\nN---------------------------------------\nNIdentifying Data Sets and Volumes\nN---------------------------------\nNWhen you use access method services commands, you must identify\nNdata sets and volumes. Data sets must be identified when they are\nNaccessed. Volumes must be identified when the system accesses the\nNvolume table of contents (VTOC), allocates or releases space or\nNaccesses a VSAM volume data set (part of the catalog).\nN\nNVSAM data sets or volumes can be identified through the ALLOCATE\nNcommand, through job control language (JCL), or by the data set name\nNor volume serial number within the command that requires the data set\nNor volume for its execution. If you do not use JCL or the ALLOCATE\nNcommand, an attempt is made to dynamically allocate the data set or\nNvolume as required.\nN\nNUnder the SMS, you should not explicitly identify volumes. The\nNsystem identifies the necessary volumes when a storage class is\nNassigned to the data set. You can allocate your data set to a\nNspecific volume only if your storage administrator has set\nNGUARANTEED SPACE=YES in the storage class assigned to your data set.\nNSee z/OS DFSMSdfp Storage Administration for further information\nNabout SMS volume selection.\nN\nNDynamic Allocation\nN------------------\nNYou can dynamically allocate a data set if the data set name exists\nNand is cataloged. The catalog containing the entry must have a name\nNor alias that matches one or more of the qualifiers of the qualified\nNdata set name. All referenced catalogs must be connected to the\nNsystem master catalog.\nN\nNAccess method services does not support the S99TIOEX, S99ACUCB, and\nNS99DSABA options of dynamic allocation. These three options are called\nNthe XTIOT, UCB nocapture and DSAB-above-the-line options. This\nNrestriction applies to the required SYSIN and SYSPRINT data sets and\nNto the DD names that are identified by keywords on the commands.\nN\nNThis restriction does not apply to data sets that are handled by the\nNuser routines that are described in \"User I/O Routines\".\nN\nNAccess method services dynamically allocates VSAM and non-VSAM data\nNsets with a disposition of OLD.\nN\nNJCL DD Statements\nN-----------------\nNWhen you use a JCL DD statement to identify a data set, include this\nNon the DD statement:\nN\nN-> User data set name\nN\nN-> Catalog name of the BCS\nN\nN-> VVDS name\nN\nN-> Unit and volume serial numbers, if the data set is not cataloged\nN\nN-> Disposition\nN\nN-> AMP='AMORG' is required for VVDSs\nN\nNJCL DD Statement for a VSAM Data Set\nN------------------------------------\nNYou can allocate VSAM data sets directly with the access method\nNservices ALLOCATE command. The following DD statements demonstrate\nNtwo additional methods of describing and allocating a VSAM data set:\nN\nN-> For allocating and creating a new data set:\nN\nI//ddname    DD DISP=(NEW,CATLG),DSNAME=dsname,\nI//             RECORG=KS,\nI//             SPACE=(TRK,10,10),STORCLAS=xxxxx\nN\nN-> For allocating an existing data set:\nN\nI//ddname DD DISP=OLD,DSNAME=dsname\nN\nNAccess method services does not provide protection for data sets in a\nNshared environment. Therefore, you should use DISP=OLD on the DD\nNstatement for any data set that can be accessed improperly in a shared\nNenvironment.\nN\nNJCL DD Statement for a Volume\nN-----------------------------\nNTo identify and allocate a volume, include:\nN\nN->  Volume serial number\nN\nN->  Disposition\nN\nN->  Unit\nN\nNThis DD statement identifies and allocates volume VSER01:\nN\nI//VOLDD     DD DISP=OLD,UNIT=3380,VOL=SER=VSER01\nN\nNFor information on concatenated DD statements, see the FILE parameter\nNdescriptions in Chapter 3, \"Functional Command Syntax\". Examples using\nNconcatenated DD statements follow the description of the REPRO command\nNthat begins on Chapter 30, \"REPRO\". For additional information about\nNthe various types of concatenated DD statements, see the section on\nNspecial DD statements in z/OS MVS JCL Reference.\nN\nNJCL DD Statement for a Non-VSAM Data Set\nN----------------------------------------\nNYou can allocate non-VSAM data sets with the access method services\nNALLOCATE command. See the DD statements in the examples that follow\nNthe descriptions of the BLDINDEX, EXPORT, IMPORT, REPRO, and PRINT\nNcommands for additional methods of describing and allocating non-VSAM\nNdata sets.\nN\nNJCL DD Statement for a Snap Dump\nN--------------------------------\nNIf access method services encounters a condition that requires it to\nNabnormally end a job, it takes a snap dump of virtual storage. You\nNmust write an AMSDUMP DD statement to get the snap dump; that is,\nN\nI//AMSDUMP DD SYSOUT=*\nN\nNIf you do not supply an AMSDUMP DD statement and access method services\nNencounters a condition requiring the job to abnormally end, it produces\nNonly an abbreviated dump.\nN\nNJCL DD Statement for a Target Data Set\nN--------------------------------------\nNThe usual target data set for listing is SYSPRINT. The default\nNparameters of this data set are:\nN\nN-> Record format: variable blocked (VBA)\nN-> Logical record length: 125, that is, (121+4)\nN-> Block size: 0\nN\nNPrint lines are 121 bytes long. The first byte is the ANSI (American\nNNational Standards Institute) control character. The minimum LRECL is\nN121 (U-format records only). If a smaller size is used, it is\nNoverridden to 121.\nN\nNYou can alter the defaults by placing other values in the DCB parameter\nNof the SYSPRINT statement. You cannot, however, use a record format of\nNF or fixed block (FB); those are changed to VBA.\nN\nNJCL DD Statement for an Alternate Target Data Set\nN-------------------------------------------------\nNIn several commands you can use an alternate target data set for\nNlisting, but do not use F or FB record formats.\nN\nNJCL statements, system messages, and job statistics are written to the\nNSYSPRINT output device, not to the alternate target data set.\nN\nNDirect Allocation Using JCL\nN---------------------------\nNYou can directly allocate VSAM data sets through JCL.\nN\nNThe following example allocates a new data set and, with DATACLAS,\nNuses the allocation attributes predetermined by the storage\nNadministrator through the ACS routines.\nN\nN//DD1       DD DISP=(NEW,CATLG),DSNAME=EXAMPLE1,\nN//             DATACLAS=DCLAS01\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC0102": {"ttr": 2825, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0102\nTDFSMS AMS\nT-Chapter 1.\nT-Invoking Access Method Services\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 1. Using Access Method Services\nN---------------------------------------\nNInvoking Access Method Services\nN-------------------------------\nNWhen you want to use an access method services function, enter a\nNcommand and specify its parameters. Your request is decoded one\nNcommand at a time; the appropriate functional routines perform all\nNservices required by that command.\nN\nNYou can call the access method services program:\nN\nN-> As a job or jobstep\nN\nN-> From a TSO/E session\nN\nN-> From within your own program\nN\nNYou can run the IDCAMS program (the access method services operating\nNsystem) and include the command and its parameters as input to the\nNprogram. You can also call the IDCAMS program from within another\nNprogram and pass the command and its parameters to the IDCAMS program.\nN\nNTime sharing option (TSO/E) users can run access method services\nNfunctional commands from a TSO/E session as though they were\nNTSO/E commands.\nN\nNSee Appendix D, \"Invoking Access Method Services from Your Program\"\nNfor more information.\nN\nNUsing a Job or Jobstep to invoke Access Method Services\nN-------------------------------------------------------\nNYou can use (JCL) statements to call access method services.\nNPGM=IDCAMS identifies the access method services program. For example:\nN\nD//YOURJOB  JOB YOUR INSTALLATION'S JOB=ACCOUNTING DATA\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSPRINT  DD SYSOUT=*\nD//SYSIN     DD *\nD  access method services commands and their parameters\nD/*\nD//*\nN\nNFrom a Time Sharing Option Session\nN----------------------------------\nNYou can use the time sharing option (TSO/E) with VSAM and access\nNmethod services to:\nN\nN-> Run access method services functional commands\nN\nN-> Run a program to call access method services\nN\nNEach time you enter an access method services command as a TSO/E\nNcommand, TSO/E builds the appropriate interface information and\nNcalls access method services.\nN\nNYou can enter one command at a time. Access method services processes\nNthe command completely before TSO/E lets you continue processing.\nNExcept for ALLOCATE, all the access method services functional\nNcommands are supported in a TSO/E environment.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC0103": {"ttr": 2827, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0103\nTDFSMS AMS\nT-Chapter 1.\nT-Access Method Services Tape Library Support\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 1. Using Access Method Services\nN---------------------------------------\nNAccess Method Services Tape Library Support\nN-------------------------------------------\nNAccess method services provides support for tape library functions.\nNThe access method services ALTER, CREATE, and DELETE commands,\nNhowever, should be used only to recover from tape volume catalog\nNerrors. Because access method services cannot change the library\nNmanager inventory in an automated tape library, ISMF should be used\nNfor usual tape library ALTER, CREATE, and DELETE functions.\nN\nNSummary of Tape Library Support\nN-------------------------------\nNAccess method services supports the following tape library functions:\nN\nN-> Creating, altering, deleting, copying, and listing catalog entries\nN   for tape library and tape volume entries\nN\nN-> Merging tape volume entries into other volume catalogs\nN\nN-> Providing support for functions that maintain an up-to-date tape\nN   library inventory.\nN\nNThe CATALOG parameter is ignored when specified on any command that\nNaffects a tape library entry except for the LISTCAT command.\nN\nNA tape library entry is the record for a tape library. A tape volume\nNentry is the record for a cartridge tape in a tape library.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0104": {"ttr": 3073, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0104\nTDFSMS AMS\nT-Chapter 1.\nT-Order of Catalog Use\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 1. Using Access Method Services\nN---------------------------------------\nNOrder of Catalog Use\nN--------------------\nNTo select the catalog to be searched or chosen for an entry, use\nNthe CATALOG parameter. You can use the CATALOG parameter with several\nNcommands such as ALTER, BLDINDEX, DEFINE, DELETE, EXPORT, and LISTCAT.\nNIf you use an alias name, the catalog associated with the name is\nNsearched or selected.\nN\nNThe multilevel alias facility enhances catalog selection that is based\nNon high-level qualifiers of the data set name. It employs a right to\nNleft search of the multiple levels of qualifiers of the data set name\nNfor a matching alias name or user catalog name. The alias name or\nNuser catalog name with the greatest number of matching qualifiers is\nNselected. For additional information on the multilevel alias facility,\nNsee z/OS DFSMS Managing Catalogs.\nN\nNThroughout the following \"catalog search\" and \"catalog selection\"\nNsections, the catalog name cannot be specified for SMS-managed\nNdata sets unless you have authority from the\nNRACF STGADMIN.IGG.DIRCAT FACILITY class. With this authorization,\nNa data set can be directed to a specific catalog. For more information\nNabout this FACILITY class, see z/OS DFSMSdfp Storage Administration.\nN\nNCatalog Search Order for ALTER\nN------------------------------\nN1. If a catalog is given in the CATALOG parameter, only that catalog\nN   is searched. If the entry is not found, a no-entry-found error is\nN   returned.\nN\nN2. If the entry is identified with a qualified entry name, and it is\nN   not generic, and its qualifiers are the same as the name or the\nN   alias of a catalog, or if the entry is found, no other catalog is\nN   searched.\nN\nN3. The master catalog is searched. If the entry is not found in any\nN   of the indicated catalogs, a no-entry-found error is returned.\nN\nNCatalog Selection Order for BLDINDEX\nN------------------------------------\nNThis section applies only to users of BLDINDEX who code NOSORTCALL.\nN\nN1. If a catalog is specified with the CATALOG parameter, that catalog\nN   is selected to contain work file entries.\nN\nN2. If the entry (data set name on the DD statement) is identified with\nN   a qualified entry name, and:\nN\nN   -> One or more of its qualifiers is the same as the name or the\nN      alias of a catalog,\nN\nN   or\nN\nN   -> The first qualifier is the same as the name or the alias of a\nN      VSAM user catalog\nN\nN   then the user catalog so identified is selected to contain the\nN   work file entries.\nN\nN3. The master catalog is selected to contain the work file entries.\nN\nNCatalog Selection Order for DEFINE\nN----------------------------------\nN1. If a catalog is defined in the CATALOG parameter, that catalog is\nN   selected to contain the to-be-defined entry.\nN\nN2. When a non-VSAM generation data group (GDG) data set is defined,\nN   the catalog containing the GDG base is selected to contain the\nN   to-be-defined non-VSAM entry.\nN\nN3. If no user catalog is specified for the current job step or job,\nN   the entry's name is a qualified name, and:\nN\nN   -> One or more of its qualifiers is the same as the name or the\nN      alias of a catalog,\nN\nN   or\nN\nN   -> The first qualifier is the same as the name or the alias of a\nN      VSAM user catalog,\nN\nN   then the catalog so identified is selected to contain the\nN   to-be-defined entry.\nN\nN4. If no catalog has been identified, either explicitly or implicitly,\nN   VSAM defines an object in the master catalog.\nN\nNCatalog Search Order for DELETE\nN-------------------------------\nNIf this is not a generic delete, the order in which catalogs are\nNsearched to locate an entry to be deleted is:\nN\nN1. If a catalog is given in the CATALOG parameter, only that catalog\nN   is searched. If the entry is not found, a no-entry-found error is\nN   returned.\nN\nN2. If the entry is identified with a qualified entry name, and:\nN\nN   -> One or more of its qualifiers is the same as the name or the\nN      alias of a catalog, If the entry is found, no other catalog is\nN      searched.\nN\nN3. If the entry is not found, the master catalog is searched. If the\nN   entry is not found in the master catalog, a no-entry-found error\nN   is returned.\nN\nNIf this is a generic delete, the order in which catalogs are searched\nNto locate all applicable entries to be deleted is:\nN\nN1. If a catalog is given in the CATALOG parameter, only that catalog\nN   is searched. If an entry that matches the supplied qualifiers is\nN   not found, a no-entry-found error is returned.\nN\nN2. If the entry is identified with a qualified entry name and if one\nN   of the following situations occur, then the catalog search continues\nN   with step 4:\nN\nN   -> One or more of its qualifiers is the same as the name of a\nN      catalog\nN\nN   -> One or more of its qualifiers is the same as the alias of a\nN      catalog\nN\nN   -> The first qualifier is the same as the name of a VSAM user\nN      catalog\nN\nN3. The master catalog is searched.\nN\nN4. If an entry matching the supplied qualifiers is not found in any\nN   of the catalogs searched, a no-entry-found error is returned.\nN\nNIf this is a mask delete, which is having the MASK keyword specified\nNin the DELETE command, the order in which catalogs are searched to\nNlocate all applicable entries to be deleted is:\nN\nN1. If a catalog is given in the CATALOG parameter, only that given\nN   catalog is searched. If there are no entries matching the supplied\nN   mask filter entry in that catalog, a no-entry-found error is\nN   returned.\nN\nN2. If no catalog is given in the CATALOG parameter, only the master\nN   catalog is search. No other catalogs are searched. If there are no\nN   entries matching the supplied mask filter entry in the master\nN   catalog. A no-entry-found error is returned.\nN\nNCaution: Unwanted deletions can take place if the catalog is not\nNspecified with the CATALOG parameter. Other catalogs are searched,\nNaccording to the order previously described, and any entries matching\nNthe supplied qualifiers are deleted.\nN\nNFor information about generic catalog selection for the DELETE\nNcommand, see \"Generic Catalog Selection for DELETE and LISTCAT\".\nN\nNCatalog Selection Order for EXPORT DISCONNECT\nN---------------------------------------------\nN1. If a catalog is specified with the CATALOG subparameter, that\nN   catalog is selected. If the data set is not found in that catalog,\nN   the command will be unsuccessful.\nN\nN2. If the entry is identified with a qualified entry name and one of\nN   the following situations occur, then the catalog search will\nN   continue with step 3:\nN\nN   -> One or more of its qualifiers is the same as the name or the\nN      alias of a catalog\nN\nN   -> The first qualifier is the same as the name or the alias of a\nN      VSAM user catalog\nN\nN   -> The user catalog so identified is searched.\nN\nN3. Then the master catalog is searched. If the entry is not found in\nN   the master catalog, a no-entry-found error is returned.\nN\nNCatalog Search Order for LISTCAT\nN--------------------------------\nNWhen you do not use the ENTRIES parameter, or the command is not run\nNthrough TSO/E and it is not a generic LISTCAT, the order in which\nNcatalogs are searched when entries are to be listed using the\nNLISTCAT command is:\nN\nN1. If a catalog is specified in the CATALOG parameter, only that\nN   catalog is listed.\nN\nN2. If no user catalog is named in the current job step or job, the\nN   master catalog is listed.\nN\nNIf the command is not a generic LISTCAT and the ENTRIES or LEVEL\nNparameter is used, or when the command is run through TSO/E, the\nNorder in which catalogs are searched when entries are to be listed\nNusing the LISTCAT command is:\nN\nN1. If a catalog is in the CATALOG parameter, only that catalog is\nN   searched. If the entry is not found, a no-entry-found error is\nN   returned.\nN\nN2. If the entry is not found, the entry's name is a qualified name,\nN   and:\nN\nN   -> One or more of its qualifiers is the same as the name or the\nN      alias of a catalog that user catalog is searched. If the entry\nI      is found, no other catalog is searched.\nN\nN3. The master catalog is searched. If the entry is not found, a\nN   no-entry-found error is returned.\nN\nNWhen the ENTRIES parameter is used and this is a generic LISTCAT, the\nNorder in which catalogs are searched when entries are to be listed\nNusing the LISTCAT command is:\nN\nN1. If a catalog is shown in the CATALOG parameter, only that catalog\nN   is searched. If an entry is not found that matches the supplied\nN   qualifiers, a no-entry-found error is returned.\nN\nN2. If the entry's name is a qualified name, and:\nN\nN   -> One or more of its qualifiers is the same as the name or the\nN      alias of a catalog is searched. The catalog search continues\nN      with step 4.\nN\nN3. The master catalog is searched. If an entry has not been found in\nN   any of the catalogs searched that matched the supplied qualifiers,\nN   a no-entry-found error is returned.\nN\nNGeneric Catalog Selection for DELETE and LISTCAT\nN------------------------------------------------\nNThe multilevel alias facility enhances generic catalog selection. If\nNyou use generic catalog selection with multilevel aliases, you can\nNselect several catalogs if the number of qualification levels of the\nNgeneric name is less than the maximum your system allows. See\nNz/OS DFSMS Managing Catalogs for information about setting multilevel\nNalias levels in the catalog address space. If the number of\nNqualification levels in the data set name is less than the maximum\nNyour system allows, and aliases exist that match the generic data set\nNname, then every catalog related to those aliases (including the\nNmaster catalog) is selected.\nN\nNThe multilevel alias facility and the system-generated name format\nNrequire special attention, such as:\nN\nN -> During the DEFINE of a VSAM data set, if the specified data/index\nN    name does not point to the same catalog as the cluster, an error\nN    occurs.\nN\nN -> During the DEFINE of a VSAM cluster or a GDG, if the name of the\nN    cluster or GDG matches an existing alias or user catalog, the\nN    DEFINE request is denied with a duplicate-name error. This is to\nN    prevent the data/index component or a GDS from becoming\nN    inaccessible.\nN\nN -> When you add an alias to the catalog, make sure that it does not\nN    cause existing data sets to become inaccessible.\nN\nNWith the multilevel alias facility, a non-VSAM data set with the same\nNhigh-level qualifier as an existing alias of a user catalog can be\nNdefined. For more details, see z/OS DFSMS Managing Catalogs.\nN\nNThe selection order is based upon alias names encountered that match\nNthe generic data set name, not upon the catalogs or the data set\nNnames selected. For LISTCAT, therefore, entries appear in the\nNdata set within alias entry order.\nN\nNShould two or more aliases relate to the same catalog, only the first\nNcatalog reference is used.\nN\nNIf no catalogs are found in the prior searches, the master catalog is\nNsearched.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC0105": {"ttr": 3075, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0105\nTDFSMS AMS\nT-Chapter 1.\nT-Understanding the Order of Assigned Data Set Attributes\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 1. Using Access Method Services\nN---------------------------------------\nNUnderstanding the Order of Assigned Data Set Attributes\nN-------------------------------------------------------\nNYou can select attributes in more than one way with the DEFINE\nNcommand. Because more than one value for the same attribute can be\nNgiven, attributes are selected in the following order of precedence:\nN\nN1. Explicitly specified attributes\nN\nN2. Modeled attributes\nN\nN3. DATA CLASS attributes\nN\nN4. Access method services command defaults\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC02": {"ttr": 3077, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC02\nTDFSMS AMS\nT-Chapter 2. Modal Commands\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 2. Modal CommandS\nN-------------------------\nN  Commonly used single job step command sequences\nN  Avoiding Potential Command Sequence Failures\nN  IF-THEN-ELSE Command Sequence\nN  Null Command\nN  DO-END Command Sequence\nN  SET Command\nN  CANCEL Command\nN  PARM Command\nN  Condition Codes\nN  Common Continuation Errors in Coding Modal Commands\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0201": {"ttr": 3079, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0201\nTDFSMS AMS\nT-Chapter 2.\nT-Modal Commands\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 2. Modal Commands\nN-------------------------\nNModal Commands\nN--------------\nNYou cannot use these commands when Access Method Services is running\nnin Time Sharing Option (TSO).\nN\nN-> IF-THEN-ELSE command sequence, which controls command execution on\nN   the basis of condition codes\nN\nN-> NULL command, which causes the program to take no action\nN\nN-> DO-END command sequence, which specifies more than one functional\nN   access method services command and its parameters\nN\nN-> SET command, which resets condition codes\nN\nN-> CANCEL command, which ends processing of the current job step\nN\nN-> PARM command, which chooses diagnostic aids and options for\nN   printed output.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0202": {"ttr": 3081, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0202\nTDFSMS AMS\nT-Chapter 2.\nT-Commonly used single job step command sequences\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 2. Modal Commands\nN-------------------------\nNCommonly used single job step command sequences\nN-----------------------------------------------\nNA sequence of commands commonly used in a single job step includes\nNDELETE-DEFINE-REPRO or DELETE-DEFINE-BLDINDEX.\nN\nN-> You can specify either a data definition (DD) name or a data set\nN   name with these commands.\nN\nN-> When you refer to a DD name, allocation occurs at job step\nN   initiation. The allocation can result in a job failure, if a\nN   command such as REPRO follows a DELETE-DEFINE sequence that\nN   changes the location (volser) of the data set. (Such failures can\nN   occur with either SMS-managed data sets or non-SMS-managed data\nN   sets.)\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0203": {"ttr": 3083, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0203\nTDFSMS AMS\nT-Chapter 2.\nT-Avoiding Potential Command Sequence Failures\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 2. Modal Commands\nN-------------------------\nNAvoiding Potential Command Sequence Failures\nN--------------------------------------------\nNTo avoid potential failures with a modal command sequence in your\nNIDCAMS job, perform either one of the following tasks:\nN\nN-> Specify the data set name instead of the DD name\nN\nN-> Use a separate job step to perform any sequence of commands\nN   (for example, REPRO, IMPORT, BLDINDEX, PRINT, or EXAMINE) that\nN   follow a DEFINE command.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0204": {"ttr": 3085, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0204\nTDFSMS AMS\nT-Chapter 2.\nT-IF-THEN-ELSE Command Sequence\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 2. Modal Commands\nN-------------------------\nNIF-THEN-ELSE Command Sequence\nN-----------------------------\nNThe syntax of the IF-THEN-ELSE command sequence, which controls\nNcommand execution, is:\nN\nD  IF LASTCC | MAXCC operator number -\nD    THEN DO\nD      command set\nD    END\nD  ELSE DO\nD    command set\nD  END\nN\nNwhere:\nN\nN  IF: States that one or more functional commands should run based\nN    on a test of a condition code. A SET command sets the condition\nN    code, or the condition code reflects the completion status of\nN    previous functional commands.\nN\nN    Nested IF commands: When an IF command appears within a THEN or\nN    ELSE clause, it is called a nested IF command. To see an example\nN    of a nested IF command, see Using Nested IF Commands, Example 1.\nN\nN    -> The maximum level of nesting allowed is 10, starting with the\nN       first IF.\nN\nN    -> Within a nest of IF commands:\nN\nN-    > The innermost ELSE clause is associated with the innermost THEN\nN       clause,\nN\nN    -> The next innermost ELSE clause with the next innermost THEN\nN       clause, and so on. (Each ELSE is matched with the nearest\nN       preceding unmatched THEN.)\nN\nN    -> If there is an IF command that does not require an ELSE clause,\nN       follow the THEN clause with a null ELSE clause (ELSE) unless the\nN       nesting structure does not require one.\nN\nN  LASTCC: LASTCC specifies that the condition code resulting from the\nN    preceding function command be compared, as indicated by the\nN    operator, to the number that follows the operator to determine if\nN    the THEN action is to be done.\nN\nN  MAXCC: MAXCC specifies that the maximum condition code value\nN    established by any previous function command or by a SET command\nN    be compared, as indicated by the operator, to the number following\nN    the operator to determine if the THEN action is to be done.\nN\nN  operator: operator requires a comparison to be made between the\nN    variable and number.\nN\nN    There are six possible comparisons:\nN\nN      Equal to, written as = or EQ\nN\nN      Not equal to, written as ,= or NE\nN\nN      Greater than, written as > or GT\nN\nN      Less than, written as < or LT\nN\nN      Greater than or equal to, written as >= or GE\nN\nN      Less than or equal to, written as <= or LE\nN\nN  number: number is the decimal integer that the program compares to\nN    MAXCC or LASTCC. Access method services initializes both LASTCC\nN    and MAXCC to zero upon entry. See \"Condition Codes\" for the\nN    meaning of condition codes.\nN\nN  THEN: THEN states that a single command or a group of commands\nN    (introduced by DO) is to be run if the comparison is true. THEN\nN    can be followed by another IF command.\nN\nN  ELSE: ELSE specifies that a single command or a group of commands\nN    (introduced by DO) is to be run if the previous comparison is\nN    false. ELSE can be followed by another IF command.\nN\nNUsing Nested IF Commands: Example 1\nN-----------------------------------\nNIn this example, nested IF commands are used to determine whether or\nNnot a REPRO, DELETE, or PRINT command is run.\nN\nI  IF LASTCC > 4 -\nI    THEN IF MAXCC < 12 -\nI      THEN REPRO...\nI      ELSE DELETE...\nI    ELSE IF LASTCC = 4 -\nI    THEN\nI    ELSE PRINT...\nN\nNIf LASTCC is greater than 4, MAXCC is tested. If MAXCC is less\nNthan 12, the REPRO command is run; if the value of MAXCC is 12\nNor greater, the DELETE command is run instead. If the value of\nNLASTCC is 4 or less, LASTCC is tested for being exactly 4; if it is,\nNthe program takes no action. If LASTCC is less than 4, the program\nNruns the PRINT command.\nN\nNUsing Nested IF Commands: Example 2\nN-----------------------------------\nNIn this example, nested IF commands are used to determine whether the\nNprogram should run a REPRO command or a PRINT command.\nN\nI  IF LASTCC > 4 -\nI    THEN IF MAXCC < 12 -\nI      THEN REPRO ...\nI      ELSE\nI    ELSE IF LASTCC = 4 -\nI      THEN PRINT ...\nN\nNIf LASTCC is greater than 4, and MAXCC is 12 or greater, no\nNfunctional commands are run. Use the null ELSE command to indicate\nNthat the next ELSE is to correspond to the first THEN.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC0205": {"ttr": 3329, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0205\nTDFSMS AMS\nT-Chapter 2.\nT-Null Command\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 2. Modal Commands\nN-------------------------\nNNull Command\nN------------\nNThe null command is a THEN or ELSE command that is not followed by a\nNcommand continuation character. If THEN or ELSE is not followed by\nNeither a continuation character or by a command in the same record,\nNthe THEN or ELSE results in no action. The null command supports an\nNELSE command that balances an IF-THEN-ELSE command sequence, and\nNallows null THEN commands.\nN\nNIf you want to indicate a null ELSE command, say:\nN\nD  ELSE\nN\nNIf you want to indicate a null THEN command, say:\nN\nD  IF ... THEN\nD  ELSE ...\nN\nNUse the null command to indicate that no action is to be taken if\nNthe IF clause is satisfied (a null THEN command) or if the IF clause\nNis not satisfied (a null ELSE command).\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0206": {"ttr": 3331, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0206\nTDFSMS AMS\nT-Chapter 2.\nT-DO-END Command Sequence\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 2. Modal Commands\nN-------------------------\nNDO-END Command Sequence\nN-----------------------\nN\nD  DO\nI    Requires that the group of commands that follow is to be treated\nI    as a single unit. That is, the group of commands run as a result\nI    of a single IF command. The END command ends the set of commands.\nI    A command following a DO must begin on a new line.\nN\nD  END\nI    Specifies the end of a set of commands initiated by the nearest\nI    unended DO. END must be on a line by itself.\nN\nN    Restriction: Do not use continuation characters in the DO-END\nN    sequence; they are taken as a null command or cause unpredictable\nN    results.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0207": {"ttr": 3333, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0207\nTDFSMS AMS\nT-Chapter 2.\nT-SET Command\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 2. Modal Commands\nN-------------------------\nNSET Command\nN-----------\nNUse the SET command to change or reset a previously defined condition\nNcode. You can end all processing by setting MAXCC or LASTCC to 16.\nNThe syntax of the SET command is:\nN\nD  SET MAXCC | LASTCC = number\nN\nN  where:\nN\nI  SET: States that a condition code value is to be set. A SET command\nI    that follows a THEN or ELSE that is not run does not alter LASTCC\nI    or MAXCC.\nN\nI  MAXCC: Requires that the value to be reset is the maximum condition\nI    code set by a previous functional command. Setting MAXCC does not\nI    affect LASTCC.\nN\nI  LASTCC: Specifies that the value to be reset is the condition code\nI    set by the immediately preceding functional command.\nN\nI  number: Is the value to be assigned to MAXCC or LASTCC. The maximum\nI    value is 16; a greater value is reduced to 16. If the value of\nI    LASTCC is greater than MAXCC, MAXCC is set equal to the larger\nI    value.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0208": {"ttr": 3335, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0208\nTDFSMS AMS\nT-Chapter 2.\nT-CANCEL Command\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 2. Modal Commands\nN-------------------------\nNCANCEL Command\nN--------------\nNYou can use the CANCEL command to end processing of the current job\nNstep. When you use the CANCEL command, the remainder of the command\nNstream is not processed, including any part of an unprocessed\nNIF-THEN-ELSE statement or DO-END pair. The step ends with a return\nNcode in register 15 equal to the highest condition code encountered\nNbefore the CANCEL command was run. A termination message is printed\nNindicating that the CANCEL command was issued. The syntax of the\nNCANCEL command is:\nN\nD  CANCEL\nN\nNIt has no parameters.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0209": {"ttr": 3337, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0209\nTDFSMS AMS\nT-Chapter 2.\nT-PARM Command\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 2. Modal Commands\nN-------------------------\nNPARM Command\nN------------\nNThe PARM command specifies processing options to be used during\nNexecution. These options remain in effect until changed by another\nNPARM command. You can also use these options in the PARM field of an\nNEXEC statement (in the job control language (JCL)). The syntax of the\nNPARM command is:\nN\nD  PARM TEST( -\nI    Specifies the diagnostic aids that the program should use. After\nI    the TEST option has been established, it remains in effect until\nI    another PARM command resets it. You should use the TRACE, AREAS,\nI    and FULL parameters concurrently. See z/OS DFSMSdfp Diagnosis for\nI    a description of the IDCAMS diagnostic aids and lists of the dump\nI    points and area identifiers.\nN\nD    TRACE -\nI      Specifies that the program should print trace tables whenever it\nI      encounters a dump point.\nN\nD    AREAS(areaid ...\u00a8) -\nI      Lists the modules that are to have selected areas of storage\nI      that is dumped at their dump points. areaid is a 2-character\nI      area identifier defined within the implementation.\nN\nD    FULL((dumpid begin count),(...)) -\nI      States that a full region dump, as well as the trace tables and\nI      selected areas, is to be provided at the specified dump points.\nN\nI      dumpid: specifies the 4-character identifier of the dump point.\nN\nI      begin: Is a decimal integer that specifies the iteration through\nI        the named dump point at which the dump is to be produced.\nI        (The default is 1.)\nN\nI      count: Is a decimal integer that specifies the number of times\nI        that the program should produce dumps. (The default is 1.)\nN\nI      If you use the FULL keyword, you must also use an\nI      AMSDUMP DD statement; for example:\nN\nI        //AMSDUMP DD SYSOUT=*\nM\nM      2018-02-21 In testing the example, //AMSDUMP was NOT used.\nM      Output went to //SYSPRINT.\nN\nD    OFF -\nI      Stops the testing.\nD    ) -\nN\nD    GRAPHICS( -\nI      Indicates the print chain-graphic character set or a special\nI      graphics table that the program should use to produce the output.\nN\nD      CHAIN(AN|HN|PN|QN|RN|SN|TN) -\nI        Is the graphic character set of the print chains you want to\nI        use. The processor uses PN unless the program explicitly\nI        directs it to use another set of graphics.\nN\nI          AN Arrangement A, standard EBCDIC character set, 48\nI          characters\nN\nI          HN Arrangement H, EBCDIC character set for FORTRAN and COBOL,\nI          48 characters\nN\nI          PN PL/1 alphanumeric character set\nN\nI          QN PL/1 preferred alphanumeric character set for scientific\nI          applications\nN\nI          RN Preferred character set for commercial applications of\nI          FORTRAN and COBOL\nN\nI          SN This character set contains lower case and is the\nI          preferred character set for text printing\nN\nI          TN Character set for text printing, 120 characters\nN\nD      TABLE(mname) -\nI        Is the name of a table you supply. This 256-byte table defines\nI        the graphics for each of the 256 possible bit patterns. Any\nI        character sent to the printeris translated to the bit pattern\nI        found in the specified table at the position corresponding to\nI        its numeric value (0-255). If the print chain does not have a\nI        graphic for a byte's bit pattern, the table should specify a\nI        period as the output graphic. The table must be stored as a\nI        module accessible through the LOAD macro.\nD    ) -\nN\nD    MARGINS(leftmargin rightmargin) -\nI      Changes the margins of input records on which command statements\nI      are written. The usual left and right margins are 2 and 72,\nI      respectively. If you code MARGINS, the program scans all\nI      subsequent input records in accordance with the new margins.\nI      You can use this function in conjunction with the comment\nI      feature: You can use respecification of margins to cause\nI      the /* and */ characters to be omitted from the scan. This\nI      causes comments to be treated as commands.\nN\nI      leftmargin: Locates the location of the left margin.\nN\nI      rightmargin: Locates the location of the right margin. The\nI        right margin must be greater than the left margin value.\nN\nNUsing the PARM Command: Example 1\nN---------------------------------\nNIn this example, the program produces dumps on the third and fourth\nNtime through the dump point ZZCA.\nN\nD//STEP01  EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  PARM -\nD    TEST ( -\nD      FULL ( -\nD        ZZCA 03 02 -\nD      ) -\nD    )\nD  LISTCAT -\nD    LEVEL(SYS1) -\nD    ALL\nD  PARM -\nD    TEST(OFF)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNUsing the PARM Command: Example 2\nN---------------------------------\nNIn this example, the program produces dumps on the third and fourth\nNtime through the dump point ZZCA.\nN\nD//STEP02  EXEC PGM=IDCAMS,PARM='TEST(FULL(ZZCA 03 02))'\nD//SYSIN     DD *\nD  LISTCAT -\nD    LEVEL(SYS1) -\nD    ALL\nD/*\nD//SYSPRINT  DD SYSOUT=*\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0210": {"ttr": 3339, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0210\nTDFSMS AMS\nT-Chapter 2.\nT-Condition Codes\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 2. Modal Commands\nN-------------------------\nNCondition Codes\nN---------------\nNThe condition codes that are tested in the IF-THEN-ELSE command\nNsequence are:\nN\nN  0: The function ran as directed and expected. Some informational\nN     messages can be issued.\nN\nN  4: A problem occurred in executing the complete function, but it\nN     continued. The continuation might not provide you with exactly\nN     what you wanted, but no permanent harm was done. A warning\nN     message appears. An example is:\nN\nN     The system was unable to locate an entry in a LISTCAT command.\nN\nN  8: A requested function was completed, but major specifications\nN     were unavoidably bypassed. For example, an entry to be deleted\nN     or altered could not be found in the catalog, or a duplicate\nN     name was found while an entry was being defined and the define\nN     action ended.\nN\nN  12: The program could not perform requested function. The program\nN      sets this condition code as a result of a logical error. A\nN      logical error condition exists when inconsistent parameters are\nN      given, when required parameters are missing, or when a value for\nN      key length, record size, or buffer space is too small or too\nN      large. More information on logical errors that occur during\nN      VSAM record processing is in z/OS DFSMS Macro Instructions for\nN      Data Sets.\nN\nN  16: A severe error occurred that erased the remainder of the command\nN      stream. This condition code results from one of the following:\nN\nN      -> The program cannot open a system output data set. (For\nN         example, a SYSPRINT DD statement was missing.)\nN\nN      -> An irrecoverable error occurred in a system data set\nN\nN      -> An access method services encountered improper IF-THEN-ELSE\nN         command sequences.\nN\nNCondition codes that are tested in the IF-THEN-ELSE command sequence\nNor set by the SET command cannot be passed from one job step to the\nNnext. However, the maximum condition code value established by any\nNprevious functional command or SET command is passed to the operating\nNsystem when the access method services processor returns control to\nNthe system.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0211": {"ttr": 3341, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0211\nTDFSMS AMS\nT-Chapter 2.\nT-Common Continuation Errors in Coding Modal Commands\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBVersion 1 Release 13\nBDFSMS Access Method Services for Catalogs\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 2. Modal Commands\nN-------------------------\nNCommon Continuation Errors in Coding Modal Commands\nN---------------------------------------------------\nNUse continuation rules cautiously when modal commands appear in the\nNinput stream.\nN\nNUse continuation rules cautiously when modal commands appear in the\nNinput stream. (See \"How to continue commands and parameters\" in\nNChapter 0.) The following examples show common continuation errors:\nN\nNExample 1: No continuation after THEN\nN-------------------------------------\nN  IF LASTCC = 0 -\nN    THEN\nN    LISTCAT\nN\nNA continuation mark (hyphen) is missing after the THEN keyword. A\nNnull command is assumed after the THEN keyword, and the LISTCAT\nNcommand is unconditionally run.\nN\nNExample 2: No continuation after the comment\nN--------------------------------------------\nN  IF LASTCC = 0 -\nN    THEN -\nN    REPRO ...\nN  /*ALTERNATE PATH*/\nN  ELSE -\nN  PRINT ...\nN\nNBecause no continuation mark (hyphen) follows the comment, the program\nNassumes a null command. The ELSE keyword will not match the THEN\nNkeyword. Note the correct use of the continuation marks on the other\nNrecords.\nN\nNExample 3: No continuation on the blank line\nN--------------------------------------------\nN  IF LASTCC = 0 -\nN  THEN -\nN    REPRO ...\nN  ELSE -\nN\nN    PRINT ...\nNBecause a blank line with no continuation mark (hyphen) follows the\nNELSE keyword, the ELSE becomes null and the PRINT command is\nNunconditionally run.\nN\nNExample 4: Continuation on the wrong side of the comment\nN--------------------------------------------------------\nN  PARM TEST ( - /*COMMENT*/\nN    TRACE)\nN\nNThe program does not continue the PARM command onto the second record,\nNbecause characters other than blanks appear between the continuation\nNmark (hyphen) and the end of the record.\nN\nNExample 5: No continuation on the comment line\nN----------------------------------------------\nN  PARM TEST ( TRA+\nN  /*FIELD CONTINUATION*/\nN  CE)\nN\nNThe processor finds the end of the PARM command after the second\nNrecord, because no continuation was indicated. The processor rejects\nNcommand.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC03": {"ttr": 3343, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC03\nTDFSMS AMS\nT-Chapter 3. Functional Command\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-093550\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 3. Functional Command\nN-----------------------------\nNThis chapter provides an overview of the access method services\nNfunctional commands for catalogs and for objects that are cataloged\nNin them. The following chapters discuss each command in detail.\nN\nNExamples of each command appear at the end of each chapter.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0301": {"ttr": 3585, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0301\nTDFSMS AMS\nT-Chapter 3.\nT-Functional Command Syntax Summary\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-093635\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 3. Functional Command\nN-----------------------------\nNFunctional Command Syntax Summary\nN---------------------------------\nNThis chapter provides reference information about the following\nNfunctional commands.\nN\nNTable 1. Summary of AMS commands\nNCommands:  Functions\nN---------- ------------------------------------------------------------\nNALLOCATE   Allocates Virtual Storage Access Method (VSAM) and non-VSAM\nN           data sets.\nN---------- ------------------------------------------------------------\nNALTER      Alters attributes of data sets, catalogs, tape library\nN           entries, and tape volume entries that have already been\nN           defined.\nN---------- ------------------------------------------------------------\nNBLDINDEX   Builds alternate indexes for existing data sets.\nN---------- ------------------------------------------------------------\nNCREATE     Creates tape library entries and tape volume entries.\nN---------- ------------------------------------------------------------\nNDCOLLECT   Collects data set, volume usage, and migration utility\nN           information.\nN---------- ------------------------------------------------------------\nNDEFINE     Defines the following objects:\nN           -> ALIAS Defines an alternate name for a non-VSAM data set\nN              or a user catalog.\nN           -> ALTERNATEINDEX defines an alternate index.\nN           -> CLUSTER Defines a cluster for an entry-sequenced,\nN              key-sequenced, linear, or relative record data set.\nN           -> GENERATIONDATAGROUP Defines a catalog entry for a\nN              generation data group.\nN           -> NONVSAM Defines a catalog entry for a non-VSAM data set.\nN           -> PAGESPACE Defines an entry for a page space data set.\nN           -> PATH Defines a path directly over a base cluster or over\nN              an alternate index and its related base cluster.\nN           -> USERCATALOG|MASTERCATALOG Defines a user catalog.\nN---------- ------------------------------------------------------------\nNDELETE     Deletes catalogs, VSAM data sets, and non-VSAM data sets.\nN---------- ------------------------------------------------------------\nNDIAGNOSE   Scans a basic catalog structure (BCS) or a VSAM volume data\nN           set (VVDS) to validate the data structures and detect\nN           structure errors.\nN---------- ------------------------------------------------------------\nNEXAMINE    Analyzes and reports the structural consistency of either\nN           an index or data component of a key-sequence data set\nN           cluster.\nN---------- ------------------------------------------------------------\nNEXPORT     Disconnects user catalogs, and exports VSAM data sets and\nN           catalogs.\nN---------- ------------------------------------------------------------\nNEXPORT     DISCONNECT Disconnects a user catalog.\nN---------- ------------------------------------------------------------\nNIMPORT     Connects user catalogs, and imports VSAM data sets and\nN           catalogs.\nN---------- ------------------------------------------------------------\nNIMPORT     CONNECT Connects a user catalog or a volume catalog.\nN---------- ------------------------------------------------------------\nNLISTCAT    Lists catalog entries.\nN---------- ------------------------------------------------------------\nNPRINT      Prints VSAM data sets, non-VSAM data sets, and catalogs.\nN---------- ------------------------------------------------------------\nNREPRO      Performs the following functions:\nN           -> Copies VSAM and non-VSAM data sets, user catalogs,\nN              master catalogs, and volume catalogs\nN           -> Splits catalog entries between two catalogs\nN           -> Merges catalog entries into another user or master\nN              catalog\nN           -> Merges tape library catalog entries from one volume\nN              catalog into another volume catalog.\nN---------- ------------------------------------------------------------\nNSHCDS      Lists SMSVSAM recovery associated with subsystems spheres\nN           and controls that recovery. This command works both in batch\nN           and in the TSO/E foreground. Includes subcommands that\nN           allow you to perform the following tasks.\nN           -> List information kept by the SMSVSAM server and the\nN              catalog as related to VSAM RLS or DFSMStvs.\nN           -> Take action on work that was shunted.\nN           -> Control a manual forward recovery.\nN           -> Run critical non-RLS batch window work if necessary.\nN           -> Perform a subsystem cold start.\nN---------- ------------------------------------------------------------\nNVERIFY     Causes a catalog to correctly reflect the end of a data\nN           set after an error occurred while closing a VSAM data set.\nN           The error might have caused the catalog to be incorrect.\nN---------- ------------------------------------------------------------\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC04": {"ttr": 3587, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC04\nTDFSMS AMS\nT-Chapter 4. ALLOCATE\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 4. ALLOCATE\nN-------------------\nNAccess method services identifies the verb name ALLOCATE and attaches\nNthe terminal monitor program (TMP) that runs Time Sharing Option (TSO)\nNcommands in the background. The ALLOCATE command should be used only\nNto allocate new data sets to the job step. If you use ALLOCATE through\nNaccess method services for anything else (the handling of SYSOUT data\nNsets, for example), you can get unpredictable results. Refer to\nNz/OS TSO/E Programming Guide for additional information on using this\nNcommand.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0401": {"ttr": 3589, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0401\nTDFSMS AMS\nT-Chapter 4.\nT-Syntax for ALLOCATE Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 4. ALLOCATE\nN-------------------\nNSyntax for ALLOCATE Parameters\nN------------------------------\nIParameters that might cause unpredictable results if used within\nIaccess method services contain /* Use with Caution */.\nISee z/OS TSO/E Command Reference.\nN\nD  ALLOCATE -\nN\nNRequired Parameters\nN-------------------\nD    DATASET(dsname) | -\nN      Abbreviation: DA, DSN, DSNAME\nD    FILE(ddname) | -\nI      DATASET(dsname):  Gives the name of the data set to be\nI        allocated. The data set name must be fully qualified. If this\nI        parameter is omitted, the system creates a temporary data set\nI        name for the actual data set.\nN\nI        -> If the data set name is not in quotation marks and a USER\nI           parameter is given in the JCL, the value in the USER\nI           parameter is prefixed to all data set names given by\nI           ALLOCATE.\nN\nI        -> If the USER parameter is not in the JCL, no prefix is\nI           added to any data set name given by ALLOCATE\nN\nI        -> The ALLOCATE command can be used to create temporary data\nI           sets, but only by omitting the DATASET parameter.\nI           Temporary data sets cannot be created by using the\nI           DATASET parameter.\nN\nI         Non-VSAM temporary data sets are the only uncataloged data\nI         sets that you can create.\nN\nI         For more information about temporary data sets, see\nI         z/OS MVS JCL Reference. For more information about VSAM\nI         temporary data sets, see z/OS DFSMS Using Data Sets.\nN\nI         Exception: A temporary data set that is created by the\nI         ALLOCATE command is deleted at the completion of the current\nI         step. It cannot be referred to by subsequent steps in a job.\nN\nI         -> You cannot concurrently allocate data sets that reside on\nI            the same physical tape volume.\nN\nI         -> To allocate a member of a generation data group, provide\nI            the fully qualified data set name, including the generation\nI            number.\nN\nI       FILE(ddname): This is the name of the data set, and can have\nI         up to eight characters. If you omit this parameter, the system\nI         assigns an available system file name (ddname). Do not use\nI         special ddnames unless you want to use the facilities those\nI         names represent to the system. See \"JCL DD Statement for a\nI         Snap Dump\" for more information about AMSDUMP. See\nI         z/OS MVS JCL Reference for more information about the\nI         following special ddnames:\nN\nI         ->AMSDUMP SYSABEND\nI         ->JOBLIB SYSCKEOV\nI         ->STEPLIB SYSUDUMP\nN\nI         See z/OS TSO/E Command Reference for more information on\nI         these special ddnames:\nN\nI         ->SYSTSIN SYSTSPRT\nN\nI         You cannot use SYSTSIN and SYSTSPRT in a job step that runs\nI         the ALLOCATE command. See \"Restrictions\" for further\nI         information.\nN\nN    * | dsname-list | DUMMY /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nNOptional Parameters\nN-------------------\nD    ACCODE(access code) -\nI      Assigns the accessibility code for an ISO/ANSI output tape data\nI      set, which protects it from unauthorized use. You can use up to\nI      eight characters in the access code, but ISO/ANSI validates only\nI      the first character. The ACCODE can now be any of the following\nI      57 ISO/ANSI a-type characters: blank, upper case letters A-Z,\nI      numeric 0-9, or one of the special characters\nI      !*\"%&'()+,-./:;<=>?_. Password protection is supported for ANSI\nI      tape data sets under the PASSWORD/NOPWREAD options on the LABEL\nI      parameter. Password access overrides any ACCODE value if you\nI      use both options.\nN\nD    ALTFILE(name) -\nI      The name of the SYSIN subsystem data set that is to be allocated,\nI      and can be up to eight characters. The system uses this parameter\nI      primarily in the background.\nN\nD    AVGREC(U | K | M) -\nI      Determines the size of the average record block. You can use the\nI      following values:\nN\nI      U Use the primary and secondary quantities as given on the SPACE\nI        parameter.\nI      K Multiply primary space quantity and secondary space quantity\nI        by 1024 (1 KB).\nI      M Multiply primary space quantity and secondary space quantity\nI        by 1,048,576 (1 MB).\nN\nI      Use the AVGREC parameter to define a new data set when:\nN\nI      -> The units of allocation that is requested for storage space\nI         are records.\nN\nI      -> The primary and secondary space quantities used with the\nI         SPACE parameter represent units, thousands, or millions of\nI         records.\nN\nI      When you use AVGREC with the SPACE parameter, the first\nI      subparameter for the SPACE parameter must give the average\nI      record length of the records.\nI\nI      Use the AVGREC parameter when you want to show records as the\nI      units of allocation. You can also use the AVGREC parameter to\nI      override the space allocation defined in the data class for the\nI      data set.\nN\nI      If SMS is not active, the system checks the syntax and then\nI      ignores the AVGREC parameter.\nN\nD    BFALN(F | D) -\nI      Specifies that each buffer starts either on a word boundary that\nI      is not also a doubleword boundary or on a doubleword boundary.\nN\nI      F Each buffer starts on a fullword boundary that might not be a\nI        doubleword boundary.\nN\nI      D Each buffer starts on a doubleword boundary.\nN\nI      If you do not use this parameter, the system defaults to a\nI      doubleword boundary.\nN\nD    BFTEK(S | E | A | R) -\nI      Is the type of buffering that you want the system to use, such\nI      as:\nN\nI      S Simple buffering\nI      E Exchange buffering\nI      A Automatic record area buffering\nI      R Record buffering\nN\nI      BFTEK(R) is not compatible with partitioned data sets extended\nI      (PDSE) and results in an error if used with the DSNTYPE(LIBRARY)\nI      parameter.\nN\nD    BLKSIZE(value) -\nI      The data control block (DCB) block size for the data set. If the\nI      data set is not on tape and is not dummy, the maximum allowable\nI      value for the block size is 32760. If the data set is on tape or\nI      dummy and the program uses LBI, the maximum allowable value for\nI      the block size is 256K. If you code the K, it multiplies the\nI      value by 1024. \"LBI\" stands for large block interface and means\nI      that the application program coded the BLKSIZE parameter on a\nI      DCBE macro.\nN\nI      You can specify BLKSIZE for NEW or MOD data sets.\nN\nI      For direct access storage device (DASD) data sets: If you do not\nI      use BLKSIZE, the system determines an optimal DCB block size for\nI      the new data set. To create the DCB block size:\nN\nI      -> The system determines the block size if the record format is\nI         not U (undefined) and you do not assign the block size.\nI      -> You can assign the block size through the BLKSIZE parameter.\nI      -> You can use the LIKE parameter to obtain the block size from\nI         an existing model data set.\nI      -> If you do not assign BLKSIZE or LIKE, the system can determine\nI         the block size from the BLOCK parameter.\nN\nI      The block size that you assign for the DCB must be consistent\nI      with the requirements of the RECFM parameter. If you use:\nN\nI      -> RECFM(F), the block size must be equal to, or greater than,\nI         the logical record length.\nI      -> RECFM(FB), the block size must be an integral multiple of the\nI         logical record length.\nI      -> RECFM(V), the block size must be equal to, or greater than,\nI         the largest block in the data set. (For unblocked\nI         variable-length records, the size of the largest block must\nI         allow space for the 4-byte block descriptor word, in addition\nI         to the largest logical record length. The logical record\nI         length must allow space for a 4-byte record descriptor word.)\nI      -> RECFM(VB), the block size must be equal to, or greater than,\nI         the largest block in the data set. For block variable-length\nI         records, the size of the largest block must allow space for\nI         the 4-byte block descriptor word, in addition to the sum of\nI         the logical record lengths that will go into the block. Each\nI         logical record length must allow space for a 4-byte record\nI         descriptor word.\nN\nI         Because the number of logical records can vary, estimate the\nI         optimum block size and the average number of records for each\nI         block, based on your knowledge of the application that requires\nI         the I/O.\nN\nI      -> RECFM(U) and BLKSIZE(80), one character is truncated from the\nI         line if the data set is the TSO terminal. That character\nI         (the last byte) is reserved for an attribute character.\nN\nI      For PDSEs:\nI      -> The system chooses the BLKSIZE if you do not explicitly\nI         specify it. If BLKSIZE is given, the system treats the\nI         BLKSIZE as the length of the simulated block. For create\nI         mode processing, the logical record length is equal to the\nI         block size if LRECL is not given. If you use LRECL, BLKSIZE\nI         must conform to the LRECL and RECFM definitions. If you use:\nN\nI         RECFM(F)                BLKSIZE must equal LRECL\nI         RECFM(FB) or RECFM(FBS) BLKSIZE must be a multiple of LRECL\nI         RECFM(V) or RECFM(VB)   BLKSIZE must be at least four bytes\nI                                 larger than LRECL\nI         RECFM(VBS)              BLKSIZE must be at least eight bytes.\nN\nI      -> For input or update processing, the block size must conform\nI         to the currently defined record length. The BLKSIZE given\nI         when the data set was created is the default. However, you\nI         can use any BLKSIZE if it conforms to the record length\nI         definition.\nN\nD    BUFL(buffer-length) -\nI      The length, in bytes, of each buffer in the buffer pool.\nI      Substitute a decimal number for buffer-length. The number must\nI      not exceed 32,760. If you omit this parameter and the system\nI      acquires buffers automatically, the BLKSIZE and KEYLEN parameters\nI      supply the information needed to establish buffer length.\nN\nD    BUFNO(number-of-buffers) -\nI      The number of buffers that are assigned for data control blocks.\nI      Substitute a decimal number for number-of-buffers. The number\nI      must never exceed 255. You might be limited to a smaller number\nI      of buffers depending on the available amount of virtual storage\nI      in your address space. The following shows how to get a buffer\nI      pool and the action required:\nN\nI      Method                          Action\nI      ------------------------------- --------------------------------\nI      BUILD macro instruction         You must use BUFNO.\nI      GETPOOL macro instruction       The system uses the number that\nI                                      you assign for GETPOOL.\nI      Automatically with BPAM or BSAM You can use BUFNO if the\nI                                      application program was designed\nI                                      to exploit it with the GETBUF\nI                                      macro.\nI      Automatically with QSAM         You can omit BUFNO and accept\nI                                      two buffers.\nN\nD    BUFOFF(block-prefix-length | L) -\nI      Defines the buffer offset. The block-prefix-length must not\nI      exceed 99. L specifies the block prefix field is 4 bytes long\nI      and contains the block length.\nN\nN    BURST | NOBURST /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nN    CHARStablename-list /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nN    COPIES((number),group-value-list) /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nD    DATACLAS(data-class-name) -\nI      This is the 1-to-8 character name of the data class for either\nI      SMS or non-SMS-managed data sets. If you do not assign DATACLAS\nI      for a new data set and the storage administrator has provided\nI      an automatic class selection (ACS) routine, the ACS routine can\nI      select a data class for the data set. If you assign DATACLAS\nI      for an existing data set, SMS ignores it. If SMS is not active,\nI      the system checks the syntax and then ignores the DATACLAS\nI      parameter.\nN\nD    DEN(0 | 1 | 2 | 3 | 4) -\nI      Gives the magnetic tape density as follows:\nI      0 200 bpi/7 track\nI      1 556 bpi/7 track\nI      2 800 bpi/7 and 9 track\nI      3 1600 bpi/9 track\nI      4 6250 bpi/9 track (IBM. 3420 Models 4, 6, and 8)\nN\nN    DEST(destination | destination.userid) /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nD    DIAGNS(TRACE) -\nI      The Open/Close/EOV trace option that gives a module-by-module\nI      trace of the Open/Close/EOV work area and your DCB.\nN\nD    DIR(integer) -\nI      Gives the number of 256 byte records for the directory of a new\nI      partitioned data set. You must use this parameter to allocate a\nI      new partitioned data set.\nN\nD    DSNTYPE(LIBRARY | PDS) -\nI      specifies the type of data set to be allocated\nN\nI        LIBRARY specifies a partitioned data set extended (PDSE).\nI        PDS     specifies a partitioned data set (PDS).\nI        HFS     specifies a UNIX file system. IBM recommends not\nI                using this type of data set. IBM recommends defining\nI                a VSAM linear data set and defining a z/OS file system\nI                (zFS) in it.\nI        PIPE    specifies a first-in first-out (FIFO) special file,\nI                which is also called a named pipe. If you specify PIPE,\nI                you must also specify PATH and not DATASET or DSNAME.\nI        LARGE   specifies a large format sequential data set. It can\nI                have a size greater than 65535 tracks on a single\nI                volume.\nI        BASIC   specifies a basic format sequential data set. It is\nI                limited to no more than 65535 tracks per volume,\nI                which is about 3.6 GB.\nI        EXTREQ  specifies that the data set must be extended format.\nI                It can be sequential or VSAM. It can be striped,\nI                compressed format or neither.\nI        EXTPREF specifies that the data set should be allocated as\nI                extended format, if possible. If not possible, allocate\nI                the data set as basic format.\nI        If you omit DSNTYPE, the type of data set is determined by\nI        other data set attributes, the data class for the data set,\nI        or an installation default.\nN\nI        For more information on PDSE, see z/OS DFSMS Using Data Sets.\nN\nD    DSORG(DA | DAU | PO | POU | PS | PSU) -\nI      The data set organization as:\nN\nI        DA  Direct access\nI        DAU Direct access unmovable\nI        PO  Partitioned organization\nI        POU Partitioned organization unmovable\nI        PS  Physical sequential\nI        PSU Physical sequential unmovable\nN\nI      When you allocate a new data set and do not use the DSORG\nI      parameter, these occur:\nN\nI      -> If you assign a non-zero to the DIR parameter, DSORG defaults\nI         to the partitioned organization (PO) option.\nN\nI      -> If you do not assign a value to the DIR parameter, DSORG\nI         defaults to the physical sequential (PS) option.\nN\nI      -> The system does not store default DSORG information into the\nI         data set until a program opens and writes to the data set.\nN\nI      With PDSEs, the PSU and POU options are incompatible and result\nI      in an error if used with DSNTYPE(LIBRARY) while the data set is\nI      open for output. If the data set is open for input or update,\nI      PSU and POU are ignored.\nN\nI      To indicate the data set organization for VSAM data sets,\nI      see RECORG.\nN\nD    EATTR(NO | OPT) -\nI      A data set level attribute specifying whether a data set can\nI      have extended attributes (format 8 and 9 DSCBs) and optionally\nI      reside in EAS.\nN\nI        NO: No extended attributes. The data set can not have extended\nI          attributes (format 8 and 9 DSCBs) and cannot reside in EAS.\nI          This is the default behavior for non-VSAM data sets.\nN\nI        OPT: Extended attributes are optional. The data set can have\nI          extended attributes (format 8 and 9 DSCBs) and can optionally\nI          reside in EAS. This is the default behavior for VSAM data\nI          sets.\nN\nD    EROPT(ACC | SKP | ABE) -\nI      The option you want to run if an error occurs when the system\nI      reads or writes a record. They are:\nN\nI        ACC: Accept the block of records in which the error was found.\nI        SKP: Skip the block of records in which the error was found.\nI        ABE: End the task abnormally.\nN\nD    EXPDT(year-day) | RETPD(no.-of-days) -\nI      Expiration date or the retention period. The MGMTCLAS maximum\nI      retention period, if given, limits the retention period in this\nI      parameter. The system ignores these parameters for temporary\nI      data sets.\nN\nI      EXPDT and RETPD are mutually exclusive.\nN\nI        EXPDT(year-day): Specifies the data set expiration date.\nI          Specify the expiration date in the form yyyy/ddd, where yyyy\nI          is a four-digit year (to a maximum of 2155) and ddd is the\nI          three-digit day of the year from 001 through 365 (for\nI          non-leap years) or 366 (for leap years).\nN\nI          The following four values are \"never-expire\" dates:\nI          99365, 99366, 1999365, and 1999366. Specifying a\nI          \"never-expire\" date means that the PURGE parameter will\nI          always be required to delete the data set. For related\nI          information, see the \"EXPDT Parameter\" section of\nI          z/OS MVS JCL Reference, SA22-7597.\nN\nI          Notes:\nN\nI          1. Any dates with two-digit years (other than 99365 or 99366)\nI             will be treated as pre-2000 dates. (See note 2.)\nN\nI          2. Specifying the current date or a prior date as the\nI             expiration date will make the data set immediately\nI             eligible for deletion.\nN\nI        RETPD(no.-of-days): Data set retention period in days. It can\nI          be a one-to-five-digit decimal number.\nN\nN    FCB(image-id,ALIGN,VERIFY) /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nN    FLASH(overlay-name,copies) /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nN    FORMS(forms-name) /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nN    HOLD | NOHOLD /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nN    INPUT | OUTPUT /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nD    KEEP | CATALOG -\nM    DELETE | UNCATALOG /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nI      A command processor can modify the final disposition with these\nI      parameters.\nN\nI      KEEP: This retains the data set by the system after step\nI        termination.\nN\nI      CATALOG: This retains the data set in a catalog after step\nI        termination.\nN\nD    KEYLEN(bytes) -\nI      The KEYLEN and TRTCH parameters are mutually exclusive.\nN\nI      This is the length, in bytes, of each of the keys used to locate\nI      blocks of records in the data set when the data set resides on a\nI      direct access device.\nN\nI      If an existing data set has standard labels, you can omit this\nI      parameter and let the system retrieve the key length from the\nI      standard label. If a key length is not supplied by any source\nI      before you enter, the system assumes an OPEN macro instruction\nI      of zero (no keys). This parameter is mutually exclusive with\nI      TRTCH.\nN\nI      When you want to define the key length or override the key\nI      length defined in the data class (DATACLAS) of the data set,\nI      use KEYLEN. The number of bytes is:\nN\nI      -> 1 to 255 for a record organization of key-sequenced\nI         (RECORG(KS))\nN\nI      -> 0 to 255 for a data set organization of physical sequential\nI         (PS) or partitioned (PO)\nN\nI      For PDSEs, you can use 0 or 8. Use 8 only when opening the PDSE\nI      for input. Any other value results in an error.\nN\nD    KEYOFF(offset) -\nI      This shows the key position (offset) of the first byte of the\nI      key in each record. Use it to define key offset or override the\nI      key offset defined in the data class of the data set. It is only\nI      for a key-sequenced data set (RECORG=KS).\nN\nI      Use KEYOFF parameter to allocate both SMS-managed and\nI      non-SMS-managed data sets. If SMS is not active, however, the\nI      system checks syntax and then ignores the KEYOFF parameter.\nN\nD    LABEL(type) -\nI      This selects the label processing, one of: SL, SUL, AL, AUL, NSL,\nI      NL, LTM, or BLP, which correspond to the JCL label-types.\nN\nI      For VSAM data sets, the system always uses SL, whether you\nI      define SL or SUL or neither. NSL, NL, and BLP do not apply to\nI      VSAM data sets.\nN\nD    LIKE(model-dsname) -\nI      The LIKE, REFDD, and USING operands are mutually exclusive.\nI      Refer to z/OS TSO/E Command Reference for additional\nI      information on the USING operand.\nN\nI      This names a model data set. The system uses\nI      these attributes as the attributes of the new data set that is\nI      being allocated. The model data set must be cataloged and must\nI      reside on a direct access device. The volume must be mounted when\nI      you enter the ALLOCATE command.\nN\nI      Note: TSO naming conventions apply when assigning model-dsname.\nN\nI      When the ALLOCATE command assigns attributes to a new data set,\nI      these attributes are copied from the model data set if SMS is\nI      active:\nN\nI        AVGREC Size of average record block (kilobyte, megabyte)\nI        BLOCK, AVBLOCK, TRACKS, CYLINDERS Space unit\nI        DIR    Directory space quantity\nI        DSORG  Non-VSAM data set organization\nI        KEYLEN Key length\nI        KEYOFF Key offset\nI        LRECL  Logical record length\nI        RECFM  Record format\nI        RECORG VSAM data set organization\nI        SPACE  Primary and secondary space quantities.\nN\nI      The system copies these attributes only if SMS is not active:\nI        BLKSIZE Block size\nI        EXPDT Data set expiration date\nI        OPTCD Optional services code (for ISAM data sets only)\nI          Note to Reviewers: OPTCD to be deleted\nI        VSEQ Volume sequence number. You can still use the LIKE\nI          parameter even if you do not have an existing data set with\nI          the exact attributes you want to assign to a new data set.\nI          You can use ALLOCATE attributes to override any model data\nI          set attributes you do not want assigned to the new data set.\nN\nI        When you use this:\nN\nI        -> LIKE must be used with the NEW parameter; it cannot be used\nI           with OLD, SHR, or MOD.\nN\nI        -> Use LIKE with the DATASET parameter; it cannot be used with\nI           FILE.\nN\nI        -> Only one dsname can be given in the DATASET parameter.\nN\nI        -> The system does not copy the block size from the model data\nI           set when SMS is active. If you do not show a block size in\nI           the ALLOCATE command, the system determines an optimal block\nI           size to assign to the data set.\nN\nI        -> When SMS is active, attributes copied from the model data\nI           set override attributes from the data class.\nN\nI        -> If you allocate the new data set with a member name\nI           (indicating a partitioned data set), the system prompts\nI           you for directory blocks unless that quantity is either\nI           shown in the ALLOCATE command or defaulted from the LIKE\nI           data set.\nN\nI        -> If the new data set name is indicated with a member name,\nI           but the model data set is sequential and you have not given\nI           the quantity for directory blocks, you are prompted for\nI           directory blocks.\nN\nI        If you define the directory value as zero and the model\nI        data set is a PDS, the system allocates the new data set as a\nI        sequential data set.\nN\nD    LIMCT(search-number) -\nI      This is the number of blocks or tracks that the system should\nI      search for a block or available space. The number must not\nI      exceed 32760.\nN\nD    LRECL(logical-record-length | (nnnnnK | X)) -\nI      This is the length, in bytes, of the largest logical record in\nI      the data set. You must define this parameter for data sets that\nI      consist of either fixed-length or variable-length records.\nN\nI      Use the DATACLAS parameter in place of LRECL to assign the\nI      logical record length. If SMS is active and you use LRECL, the\nI      system determines the block size.\nN\nI      If the data set contains undefined-length records, omit LRECL.\nN\nI      The logical record length must be consistent with the\nI      requirements of the RECFM parameter and must not exceed the block\nI      size (BLKSIZE parameter), except for variable-length spanned\nI      records. If you use:\nN\nI      -> RECFM(V) or RECFM(V B), then the logical record length is the\nI         sum of the length of the actual data fields plus four bytes\nI         for a record descriptor word.\nN\nI      -> RECFM(F) or RECFM(F B), then the logical record length is the\nI         length of the actual data fields.\nN\nI      -> RECFM(U), omit the LRECL parameter.\nN\nI      LRECL(nnnnnK) allows users of ANSI extended logical records and\nI      users of QSAM \"locate mode\" to assign a K multiplier to the LRECL\nI      parameter. nnnnn can be a number within 1-16384. The K indicates\nI      that the value is multiplied by 1024.\nN\nI      For variable-length spanned records (VS or VBS) processed by\nI      QSAM (locate mode) or BSAM, use LRECL (X) when the logical\nI      record exceeds 32,756 bytes.\nN\nI      For PDSEs, the meaning of LRECL depends upon the data set record\nI      format:\nN\nI      -> Fixed Format Records. For PDSEs opened for output, the logical\nI         record length (LRECL) defines the record size for the newly\nI         created members. You cannot override the data set control\nI         block (DSCB) (LRECL); an attempt to do so will result in an\nI         error.\nN\nI      -> Variable Format Records. The LRECL is the maximum record\nI         length for logical records that are contained in members of\nI         the PDSE.\nN\nI      -> Undefined Format Records. The LRECL is the maximum record\nI         length for records that are contained in members of the PDSEs.\nN\nD    MGMTCLAS(management-class-name) -\nI      For SMS-managed data sets: This is the 1-to-8 character name of\nI      the management class for a new data set. When possible, do not\nI      use MGMTCLAS. Allow it to default through the ACS routines.\nN\nI      After the system allocates the data set, attributes in the\nI      management class define:\nN\nI      -> The migration of the data set. This includes migration both\nI         from primary storage to migration storage, and from one\nI         migration level to another in a hierarchical migration scheme.\nN\nI      -> The backup of the data set. This includes frequency of backup,\nI         number of versions, and retention criteria for backup\nI         versions.\nN\nI      If SMS is not active, the system checks the syntax and ignores\nI      the MGMTCLAS parameter.\nN\nD    MAXVOL(count) -\nI      This is the maximum number (1-255) of volumes upon which a data\nI      set can reside. This number corresponds to the count field on\nI      the VOLUME parameter in JCL. Use this to override the volume\nI      count attribute defined in the data class of the data set.\nN\nI      If VOLUME and PRIVATE parameters are not given, and MAXVOL\nI      exceeds UCOUNT, the system removes no volumes when all the\nI      mounted volumes have been used, causing abnormal termination of\nI      your job. If PRIVATE is given, the system removes one of the\nI      volumes and mounts another volume in its place to continue\nI      processing.\nN\nI      MAXVOL overrides any volume count in the data class (DATACLAS)\nI      of the data set.\nN\nI      Your user attribute data set (UADS) must contain the MOUNT\nI      attribute. Use of this parameter implies PRIVATE.\nN\nN    MODIFY(module-name,trc) /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nD    NEW -\nN    OLD | SHR | MOD /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nI      NEW: This creates a data set. For new partitioned data sets, you\nI        must use the DIR parameter. If you assign a data set name, the\nI        system keeps and catalogs a NEW data set. If you do not assign\nI        a data set name, the system deletes the data set at step\nI        termination.\nN\nD    NCP(no.-of-channel-programs) -\nI      This gives the maximum number of READ or WRITE macro instructions\nI      for BSAM or BPAM that are allowed before the application program\nI      issues a CHECK or WAIT macro instruction. The number must not\nI      exceed 255. If you wish to use chained scheduling, you or your\nI      program must assign an NCP value greater than 1. If you omit the\nI      NCP parameter, the default depends on the application program.\nI      If the program takes no action, the default value is 1. Your\nI      program might be limited to a value smaller than 255 depending\nI      on the available amount of virtual storage in your address space.\nN\nN    OUTDES(output-descriptor-name,...) /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nD    POSITION(sequence-no.) -\nI      This is the relative position (1-65535) of the data set on a\nI      multiple data set tape. The sequence number corresponds to the\nI      data set sequence number field of the label parameter in JCL.\nN\nD    PRIVATE -\nI      This assigns the private-volume use attribute to a volume that\nI      is neither reserved nor permanently in resident. It corresponds\nI      to the PRIVATE keyword of the VOLUME parameter in JCL.\nN\nI      If you do not use VOLUME and PRIVATE parameters and MAXVOL\nI      exceeds UCOUNT, the system removes no volumes when all the\nI      mounted volumes have been used, causing abnormal termination of\nI      your job. If you use PRIVATE, the system removes one of the\nI      volumes and mounts another volume to continue processing.\nN\nD    PROTECT -\nI      This RACF-protects the DASD data set or the first data set on a\nI      tape volume.\nN\nI      -> For a new permanent DASD data set, the status must be NEW or\nI         MOD, treated as NEW, and the disposition must be either KEEP,\nI         CATALOG, or UNCATALOG. With SMS, SECMODEL overrides PROTECT.\nN\nI      -> For a tape volume, the tape must have an SL, SUL, AL, AUL,\nI         or NSL label.\nN\nI      The file sequence number and volume sequence number must be one\nI      (except for NSL). You must assign PRIVATE as the tape volume use\nI      attribute.\nN\nI      The PROTECT parameter is not valid if a data set name is not\nI      given, or if the FCB parameter or status other than NEW or MOD\nI      is used.\nN\nD    RECFM(A,B,D,F,M,S,T,U,V) -\nI      RECFM and RECORG are mutually exclusive.\nN\nI      This sets the format and characteristics of the records in the\nI      data set. They must be completely described by one source only.\nI      If they are not available from any source, the default is an\nI      undefined-length record. See also the RECFM subparameter of the\nI      DCB parameter in z/OS MVS JCL Reference for a detailed\nI      discussion.\nN\nI      Use these with the RECFM parameter:\nN\nI      A To show the record contains ASCII printer control characters\nN\nI      B To indicate the records are blocked\nN\nI      D For variable length ASCII records\nN\nI      F For fixed length records.\nN\nI      M For records with machine code control characters.\nN\nI      S For fixed-length records, the system writes the records as\nI        standard blocks (there must be no truncated blocks or unfilled\nI        tracks except for the last block or track). For variable-length\nI        records, a record can span more than one block. Exchange\nI        buffering, BFTEK(E), must not be used.\nN\nI      T The records can be written onto overflow tracks, if required.\nI        Exchange buffering or BFTEK(E) cannot be used.\nN\nI      U The records are of undefined length.\nN\nI      V Shows variable length records.\nN\nI      You must provide one or more values for this parameter.\nN\nI      For PDSEs, these statements apply:\nN\nI      -> RECFM can be partially modified from the value that is saved\nI         in the DSCB when creating members.\nN\nI      -> In a PDSE that is created as fixed or fixed blocked, members\nI         must always be created with fixed-length logical records.\nI         However, the attribute of blocked might change between\nI         member creates. The first record format assigned to the PDSE\nI         is the default for member creates. The characteristic of\nI         blocked might not change during an open.\nN\nI      -> Attempts to overwrite the record format characteristic of\nI         F, U, or V with another value from that set causes a system\nI         error.\nN\nI      -> RECFM(A) and RECFM(M) are compatible with PDSEs.\nN\nD    RECORG(ES | KS | LS | RR) -\nI      RECORD and RECFM are mutually exclusive.\nN\nI      Determines the organization of the records in a new VSAM data\nI      set. To override the record organization defined in the data\nI      class (DATACLAS) of the data set, use RECORG.\nN\nI      You can assign:\nN\nI      ES For a VSAM entry-sequenced data set\nN\nI      KS For a VSAM key-sequenced data set\nN\nI      LS For a VSAM linear space data set. You cannot access linear\nI         data sets with VSAM record level sharing (RLS).\nN\nI      RR For a VSAM relative record data set\nN\nI      If you do not use RECORG, SMS assumes a non-VSAM data set.\nN\nI      RECORG and RECFM are mutually exclusive. To define the data set\nI      organization for a non-VSAM data set, see DSORG.\nN\nI      Exception: You can use the RECORG parameter to allocate both\nI      SMS-managed and non-SMS-managed data sets. If SMS is not active,\nI      however, the system checks the syntax and ignores the RECORG\nI      parameter.\nN\nD    REFDD(file-name) -\nI      The LIKE, REFDD, and USING operands are mutually exclusive.\nI      Refer to z/OS TSO/E Command Reference for additional\nI      information on the USING operand.\nN\nI      This is the file name of an existing data set whose attributes\nI      are copied to a new data set. The system copies these attributes\nI      to the new data set:\nN\nI      -> Data set organization:\nI        -> Record organization (RECORG)\nI        -> Record format (RECFM)\nN\nI      -> Record length (LRECL)\nN\nI      -> Key length (KEYLEN)\nN\nI      -> Key offset (KEYOFF)\nN\nI      -> Space allocation\nI        -> AVGREC\nI        -> SPACE\nN\nI      The system does not copy the retention period (RETPD) or\nI      expiration date (EXPDT) to the new data set.\nN\nI      Exception: You can use the REFDD parameter to allocate both\nI      SMS-managed and non-SMS-managed data sets. If SMS is not active,\nI      however, the system checks the syntax and then ignores the REFDD\nI      parameter.\nN\nD    RELEASE -\nI      To delete unused space when the data set is closed.\nN\nI      If you use RELEASE for a new data set with the BLOCK or BLKSIZE\nI      parameter, then you must also use the SPACE parameter.\nN\nD    REUSE -\nI      Frees and reallocates the file name if it is currently in use.\nN\nI      You cannot use the REUSE parameter to reallocate a file from a\nI      disposition of OLD to a disposition of SHR. However, you can\nI      first free the file with OLD, then reallocate it with SHR.\nN\nD    ROUND -\nI      Allocates space equal to one or more cylinders. Use this only\nI      when you request space in units of blocks. This parameter\nI      corresponds to the ROUND parameter in the SPACE parameter in JCL.\nN\nD    SECMODEL(profile-name,GENERIC) -\nI      Names an existing RACF profile to copy to the discrete profile.\nI      Use SECMODEL when you want a different RACF data set profile\nI      from the default profile selected by RACF, or when there is no\nI      default profile.\nN\nI      Use GENERIC to state the profile name as a generic data\nI      set profile.\nN\nD    SPACE(quantity,increment) -\nI      Allocates the amount of space for a new data set. If you omit\nI      this parameter, the system uses the IBM-supplied default value\nI      of SPACE(4,24) AVBLOCK (8192). However, your installation might\nI      have changed the default. For more information about default\nI      space, see z/OS MVS Programming: Authorized Assembler Services\nI      Guide.\nN\nI      To have the system determine the amount of space, include the\nI      AVGREC parameter in place of BLOCK, AVBLOCK, CYLINDERS, and\nI      TRACKS. To supply your own space value, define one of the\nI      following: BLOCK(value), BLKSIZE(value), AVBLOCK(value),\nI      CYLINDERS, or TRACKS. The amount of space requested is\nI      determined as follows:\nN\nI      -> BLOCK(value) or BLKSIZE(value): The BLOCK or BLKSIZE\nI         parameter's value is multiplied by the SPACE parameter's\nI         quantity.\nN\nI      -> AVBLOCK(value): The AVBLOCK parameter's value is multiplied\nI         by the SPACE parameter's quantity.\nN\nI      -> CYLINDERS: The SPACE parameter's quantity is given in\nI         cylinders.\nN\nI      -> TRACKS: The SPACE parameter's quantity is given in tracks.\nN\nI      Use SPACE for NEW and MOD data sets.\nN\nI      quantity: Allocates the initial number of units of space for a\nI        data set. For a partitioned data set, a directory quantity is\nI        not necessary.\nN\nI      increment: This is the number of units of space to be added to\nI        the data set each time the previously allocated space has been\nI        filled. You must provide the primary quantity along with the\nI        increment value.\nN\nD    BLOCK(value) | AVBLOCK(value) | CYLINDERS | TRACKS -\nI      BLOCK(value): Shows the average length (in bytes) of the records\nI        written to the data set. The maximum block value used to\nI        determine space to be allocated is 65,535. The block value is\nI        the unit of space that is used by the SPACE parameter. A track\nI        or a cylinder on one device can represent a different amount\nI        of storage (number of bytes) from a track or a cylinder on\nI        another device. Determine the unit of space value from the:\nN\nI        -> Default value of (10 50) AVBLOCK(1000) if no space\nI           parameters (SPACE, AVBLOCK, BLOCK, CYLINDERS, or TRACKS)\nI           are given.\nN\nI        -> The BLOCK parameter.\nN\nI        -> The model data set, if the LIKE parameter is used and BLOCK,\nI           AVBLOCK, CYLINDERS, or TRACKS is not given.\nN\nI        -> The BLKSIZE parameter if BLOCK is not used.\nN\nI      AVBLOCK(value): This shows only the average length (in bytes) of\nI        the records that are written to the data set.\nN\nI      CYLINDERS: Requests allocation in cylinders as the unit of space.\nN\nI      TRACKS: Requests allocation in tracks as the unit of space.\nN\nI      Exception: If you specify tracks for a VSAM data set, the space\nI      allocated will be contiguous. See z/OS DFSMS Using Data Sets\nI      \"Optimizing Control Area Size,\" for more information.\nN\nD    STORCLAS(storage-class-name) -\nI      For SMS-managed data sets: Gives the 1-to-8 character name of\nI      the storage class. When possible, allow STORCLAS to default\nI      through the ACS routines established by your storage\nI      administrator. Attributes assigned through storage class and\nI      the ACS routines replace storage attributes such as UNIT and\nI      VOLUME. If SMS is not active, the system checks the syntax and\nI      then ignores the STORCLAS parameter.\nN\nN    SYSOUT(class) /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nD    TRTCH(C | E | ET | T) -\nI      The TRTCH and KEYLEN parameters are mutually exclusive.\nN\nI      Selects the recording technique for 7-track tape as follows:\nN\nI      C  Data conversion with odd parity and no translation.\nN\nI      E  Even parity with no translation and no conversion.\nN\nI      ET Even parity and no conversion. BCD to EBCDIC translation when\nI         reading, and EBCDIC to BCD translation when writing.\nN\nI      T  Odd parity and no conversion. BCD to EBCDIC translation when\nI         reading, and EBCDIC to BCD translation when writing.\nN\nN    USING(attr-list-name) /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nI      The LIKE, REFDD, and USING operands are mutually exclusive.\nN\nD    UCOUNT(count) | PARALLEL -\nI      Requests a number of device allocations.\nN\nI        UCOUNT(count): This allocates the maximum number of devices,\nI          where count is a value from 1-59.\nN\nI          If you do not use VOLUME and PRIVATE parameters and MAXVOL\nI          exceeds UCOUNT, the system removes no volumes when the\nI          mounted volumes have been used, causing abnormal termination\nI          of your job. If you use PRIVATE, the system removes one of\nI          the volumes and mounts another volume in its place to\nI          continue processing.\nN\nI        PARALLEL: Mounts one device for each volume given on the\nI          VOLUME parameter or in the catalog.\nN\nN    UCS(universal-character-set-name) /* Use with Caution */ -\nI      See z/OS TSO/E Command Reference.\nN\nD    UNIT(type) -\nI      Defines the unit type to which a file or data set is to be\nI      allocated. You can list an installation-defined group name, a\nI      generic device type, or a specific device address. If you do\nI      not supply volume information (the system retrieves volume and\nI      unit information from a catalog), the unit type that is coded\nI      overrides the unit type from the catalog. This condition exists\nI      only if the coded type and class are the same as the cataloged\nI      type and class.\nN\nI      For VSAM data sets, use the AFF subparameter carefully. If the\nI      cluster components and the data and its index reside on unlike\nI      devices, the results of UNIT=AFF are unpredictable.\nN\nI      When you allocate a new SMS-managed data set, the system ignores\nI      the UNIT parameter. The system determines the UNIT and VOLUME\nI      from the storage class associated with the data set. Use UNIT\nI      only if you want to allocate a non-SMS-managed data set to a\nI      specific unit type.\nN\nI      If the storage administrator has set up a default unit under\nI      SMS regardless of whether the data set is SMS-managed, you do\nI      not have to use UNIT. If you do not, the system determines the\nI      default UNIT for both SMS-managed and non-SMS-managed data sets.\nN\nD    VOLUME(serial-list) /* Abbreviation: VOL */ -\nI      This is the serial number of an eligible direct access volume\nI      on which a new data set is to reside or on which an old\nI      data set is located. If you use VOLUME for an old data set, the\nI      data set must be on the specified volume for allocation to take\nI      place. If you do not include VOLUME, the system allocates new\nI      data sets to any eligible direct access volume. The UNIT\nI      information in your procedure entry in the user attribute data\nI      set (UADS) determines eligibility. You can use up to 255 volume\nI      serial numbers.\nN\nI      For VSAM data sets you must use this subparameter carefully.\nI      See the section that discusses DD parameters to avoid when\nI      processing VSAM data sets in z/OS MVS JCL User's Guide before\nI      using the VOLUME subparameters REF, volume-sequence-number, or\nI      volume-count.\nN\nI      When you allocate new SMS-managed data sets, you can let the\nI      ACS routines select the volume for you. The ACS routines assign\nI      your data set to a storage class containing attributes such as\nI      VOLUME and UNIT. You can allocate your data set to a specific\nI      volume only if your storage administrator has stated\nI      GUARANTEED SPACE=YES in the storage class assigned to your\nI      data set. The volume serial numbers you provide might then\nI      override the volume serial numbers used by SMS. If space is not\nI      available on the given volume, however, your request is not\nI      successful.\nN\nD    VSEQ(vol-seq-no.) /* - */\nI      This locates which volume (1-255) of a multivolume begins data\nI      set processing. This parameter corresponds to the volume sequence\nI      number on the VOLUME parameter in JCL. Use VSEQ only when the\nI      data set is a cataloged data set.\nN\nN    WRITER(external-writer-name) /* Use with Caution */\nI       See z/OS TSO/E Command Reference.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC0402": {"ttr": 4099, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0402\nTDFSMS AMS\nT-Chapter 4.\nT-ALLOCATE Examples\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 4. ALLOCATE\nN-------------------\nNALLOCATE Examples\nN-----------------\nNExample 1: Allocate a Data Set Using SMS Class Specifications\nN-------------------------------------------------------------\nMYou should be letting your ACS routines assign\nMSMS Class Specifications!\nN\nD//ALLOC JOB ...\nD//ST01#01 EXEC PGM=IDCAMS,DYNAMNBR=1\nD//SYSIN     DD *\nD  ALLOC -\nD    DSNAME(ALX.ALLOCATE.EXAMPLE1) -\nD    NEW CATALOG -\nD    DATACLAS(STANDARD) -\nD    STORCLAS(FAST) -\nD    MGMTCLAS(VSAM)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//*\nD//\nN\nNIn this example, the ALLOCATE command is used to allocate a new data\nNset. By providing the SMS data class, management class, and storage\nNclass, you can take advantage of the attributes assigned by your\nNstorage administrator through the ACS routines.\nN\nNAlthough this example includes DYNAMNBR, it is not required in this\nNexample. Because this example contains two DD statements, you can do\nNup to two allocations. DYNAMNBR is required only when the number of\nNallocations exceeds the number of DD statements. This example sets\nNDYNAMNBR to 1. This allows up to three allocations for each DD\nNstatement (2) plus DYNAMNBR (1).\nN\nNExample 2: Allocate a VSAM Data Set Using SMS Class Specifications\nN------------------------------------------------------------------\nD//ALLOC    JOB ...\nD//STEP1   EXEC PGM=IDCAMS,DYNAMNBR=1\nD//SYSIN     DD *\nD  ALLOC -\nD    DSNAME(M166575.ALLOC.EXAMPLE2) -\nD    NEW CATALOG -\nD    SPACE(10,2) -\nD    AVBLOCK(80) -\nD    AVGREC(K) -\nD    LRECL(80) -\nD    RECORG(ES) -\nD    EATTR(OPT) -\nD    STORCLAS(FAST) -\nD    MGMTCLAS(VSAM)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThis example uses the ALLOCATE command to allocate a new data set.\nNData class is not assigned, and attributes assigned through the\nNdefault data class are overridden by explicitly specified parameters.\nNBy providing the SMS management class and storage class, you can take\nNadvantage of attributes already assigned through the ACS routines.\nN\nNExample 3: Allocate a New Data Set\nN----------------------------------\nD//ALLOC    JOB ...\nD//STEP1   EXEC PGM=IDCAMS,DYNAMNBR=1\nD//SYSIN     DD *\nD  ALLOC -\nD    DSNAME(XMP.ALLOCATE.EXAMPLE3) -\nD    NEW CATALOG -\nD    SPACE(10,5) TRACKS -\nD    BLKSIZE(1000) -\nD    LRECL(100) -\nD    DSORG(PS) -\nD    UNIT(3380) -\nD    VOL(338002) -\nD    RECFM(F,B)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThis example shows the ALLOCATE command being used to allocate a new\nNdata set XMP.ALLOCATE.EXAMP3.\nN\nNExample 4:\nD//ALLOC    JOB ...\nD//STEP1   EXEC PGM=IDCAMS,DYNAMNBR=1\nD//SYSIN     DD *\nD  ALLOC -\nD    DSNAME(NONVSAM.EXAMPLE4) -\nD    NEW -\nD    DATACLAS(PS000000) -\nD    MGMTCLAS(S1P01M01) -\nD    STORCLAS(S1P01S01)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThis example shows the ALLOCATE command being used to allocate a\nNnon-VSAM data set. ALLOCATE, unlike DEFINE NONVSAM, lets you give the\nNSMS classes for a non-VSAM data set.\nM\nMOf course, YOU need to know what each SMS class does.\nN\nNExample 5: Allocate a Partitioned Data Set Extended\nD//ALLOC    JOB ...\nD//STEP1   EXEC PGM=IDCAMS,DYNAMNBR=1\nD//SYSIN     DD *\nD  ALLOC -\nD    DSNAME(XMP.ALLOCATE.EXAMPLE5) -\nD    NEW -\nD    STORCLAS(SC06) -\nD    MGMTCLAS(MC06) -\nD    DSNTYPE(LIBRARY)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThis example shows the ALLOCATE command being used with the DSNTYPE\nNkeyword to allocate a PDSE.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC05": {"ttr": 4101, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC05\nTDFSMS AMS\nT-Chapter 5. ALTER\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 5. ALTER\nN----------------\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0501": {"ttr": 4103, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0501\nTDFSMS AMS\nT-Chapter 5.\nT-Syntax for ALTER Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 5. ALTER\nN----------------\nNSyntax for ALTER Parameters\nN---------------------------\nD  ALTER -\nN\nNRequired Parameters\nN-------------------\nD    entryname -\nI      This names the entry to be altered.\nN\nI      When attributes of a catalog are altered, entryname must include\nI      either the data or index components. Giving the catalog name\nI      alters attributes defined at the cluster level only. The catalog\nI      name is also the data component name.\nN\nI      The restricted prefix SYS1.VVDS.V or its generic form\nI      SYS1.VVDS.* or SYS1.*.V is not allowed as an entryname for the\nI      ALTER command.\nN\nI      If you are renaming a member of a non-VSAM partitioned data set,\nI      the entryname must given as: pdsname(membername).\nN\nI      See the NEWNAME parameter for information on renaming SMS-managed\nI      data sets.\nN\nI      Identify a generation data set (GDS) with its generation data\nI      group (GDG) name followed by the generation and version numbers\nI      of the data set (GDGname.GxxxxVyy).\nN\nN\nNOptional Parameters\nN-------------------\nD    ACCOUNT(account-info) /* Abbreviation: ACCT */ -\nI      Account is supported only for SMS-managed VSAM or non-VSAM\nI      data sets.\nN\nI      account-info: Use this to change accounting information and user\nI        data for the data set. It must be between 1 and 32 bytes;\nI        otherwise, you will receive an error message.\nN\nD    ADDVOLUMES(volser volser...) /* Abbreviation: AVOL */ -\nI      This provides the volumes that are to be added to the list of\nI      candidate volumes. You can use ALTER ADDVOLUMES to add candidate\nI      volumes to non-managed VSAM data sets and SMS-managed VSAM,\nI      non-VSAM, and generation data sets (GDS). Only nonspecific\nI      volumes can be added to SMS-managed, non-VSAM data sets and GDS\nI      data sets. If an ALTER ADDVOLUMES is done to a data set already\nI      opened and allocated, the data set must be closed, unallocated,\nI      reallocated, and reopened before VSAM can extend onto the newly\nI      added candidate volume. Adding a nonexistent volume to the list\nI      can result in an error when the data set is extended. Ensure that\nI      the volume exists and is online before attempting to extend the\nI      data set.\nN\nI      Restriction: This does not work with non-SMS non-VSAM.\nN\nI      SMS might not use candidate volumes for which you request\nI      specific volsers with the ADDVOLUMES parameter. Sometimes a\nI      user-specified volser for an SMS-managed data set results in an\nI      error. To avoid candidate-volume problems with SMS, you can\nI      have SMS choose the volser used for a candidate volume. To do\nI      this, you can code an * for each volser that you request with\nI      the ADDVOLUMES parameter. If, however, you request both specified\nI      and unspecified volsers in the same command, you must enter the\nI      specified volsers first in command syntax. The system does not\nI      allocate space on candidate volumes until VSAM extends to the\nI      candidate volume. This includes SMS-managed data sets with\nI      guaranteed space.\nN\nD    BUFFERSPACE(size) /* Abbreviations: BUFSP or BUFSPC */ -\nI      Provides the amount of space for buffers. The size you specify\nI      for the buffer space helps VSAM determine the size. IBM\nI      recommends that the size you give is equal to or greater than\nI      the amount specified in the original definition. If the amount\nI      is less, VSAM attempts to get enough space to contain two data\nI      component control intervals and, if the data is key-sequenced,\nI      one index component control interval. You can specify\nI      BUFFERSPACE only for a catalog or for the data component of a\nI      cluster or alternate index. If you use BUFFERSPACE for a catalog,\nI      then you must specify the CATALOG parameter.\nN\nI      The BUFFERSPACE parameter is ignored for VSAM record-level\nI      sharing (RLS) access and DFSMStvs access.\nN\nI      size: Is the amount of space for buffers. This helps VSAM\nI        determine the size of the data component's and index\nI        component's control interval.\nN\nI        Size can be entered in decimal (n), hexadecimal (X'n'), or\nI        binary (B'n') form. The specified size should not be less than\nI        the space needed to contain two data component control\nI        intervals and, if the data is key-sequenced, to contain one\nI        index control interval. If the given size is less than what\nI        VSAM requires, it gets it when the data set is opened.\nN\nI        Note: The limitations of the bufferspace value on how many\nI        buffers will be allocated is based on storage available in\nI        your region, and other parameters or attributes of the data\nI        set.\nN\nD    BUFND(number) /* Abbreviation: BFND */ -\nI      Gives the number of I/O buffers VSAM is to use for transmitting\nI      data between virtual and auxiliary storage. The size of the\nI      buffer area is the size of the data component control interval.\nI      This parameter only applies the data component of a catalog.\nN\nI      The BUFND parameter is ignored for VSAM RLS access and DFSMStvs\nI      access.\nN\nI      number:  Is the number of data buffers you can use. The minimum\nI        number is 3, and the maximum is 32767.\nN\nD    BUFNI(number) /* Abbreviation: BFNI */ -\nI      Is the number of I/O buffers VSAM uses for transmitting the\nI      contents of index entries between virtual and auxiliary storage\nI      for keyed access. The size of the buffer area is the size of the\nI      index control intervals. This parameter only applies the index\nI      component of a catalog.\nN\nI      When altering BUFNI for a catalog other than the current master\nI      on which this command is issued, you will need to include the\nI      CATALOG parameter with the name of the catalog whose index you\nI      are altering.\nN\nI      The BUFNI parameter is ignored for VSAM RLS and DFSMStvs access.\nN\nI      number: Is the number of index buffers you can use. The minimum\nI        number is 2 and the maximum is 32767.\nN\nD    BWO(TYPECICS | TYPEIMS | NO) -\nI      Use this parameter if backup-while-open (BWO) is allowed for the\nI      VSAM sphere. BWO applies only to SMS data sets and cannot be used\nI      with TYPE(LINEAR).\nN\nI      If BWO is specified in the SMS data class, the specified BWO\nI      value is used as part of the data set definition, unless BWO\nI      was previously defined with an explicitly specified or modeled\nI      DEFINE attribute.\nN\nI      TYPECICS /* Abbreviation: TYPEC */: Use TYPECICS to specify BWO\nI        in a CICS environment. For RLS processing, this activates BWO\nI        processing for CICS or DFSMStvs, or both.\nN\nI        For non-RLS processing, CICS determines whether to use this\nI        specification or the specification in the CICS file control\nI        table (FCT). For more information about the use of TYPECICS,\nI        see CICS System Definition Guide.\nN\nI        Exception: If CICS determines that it will use the\nI        specification in the CICS FCT, the specification might override\nI        the TYPECICS parameter for CICS processing.\nN\nI      TYPEIMS /* Abbreviation: TYPEI */: If you want to use BWO\nI        processing in an Information Management System (IMS)\nI        environment, use the TYPEIMS parameter.\nN\nI      NO: Use this when BWO does not apply to the cluster.\nN\nI        Exception: If CICS determines that it will use the\nI        specification in the CICS FCT, the specification might\nI        override the NO parameter for CICS processing.\nN\nD    CCSID(value) -\nI      Is the Coded Character Set Identifier attribute; it identifies:\nN\nI      -> Encoding scheme identifier\nN\nI      -> Character set identifier or identifiers\nN\nI      -> Code page identifier or identifiers\nN\nI      -> Additional coding required to uniquely identify the coded\nI         graphic used\nN\nI      You can use Coded Character Set Identifier (CCSID) only for\nI      system-managed data sets. If the CCSID parameter is not in the\nI      catalog at the time ALTER is called, it is created.\nN\nI      The value for CCSID can be specified in decimal (n), hexadecimal\nI      (X''), or binary (B''). The acceptable range of values is 0\nI      (X'0'') to 65535 (X'FFFF'').\nN\nD    CODE(code) -\nM      Oops - IBM left this out of the manual.\nN\nD    ECSHARING | NOECSHARING -\nI      Indicates whether sharing this catalog can be performed through\nI      the coupling facility.\nN\nI      ECSHARING /* Abbreviation: ECSHR */: Enhanced catalog sharing\nI      (ECS) is allowed. ECS is a catalog sharing method that makes use\nI      of a coupling facility to increase the performance of shared\nI      catalog requests. Please read about ECS in z/OS DFSMS Managing\nI      Catalogs before enabling ECS for a catalog.\nN\nI      NOECSHARING /* Abbreviation: NOECSHR */: Enhanced catalog sharing\nI      (ECS) is not allowed. This is the default. Catalog sharing is\nI      performed, but the ECS sharing method is not be used.\nN\nD    EMPTY | NOEMPTY -\nI      Specifies what is to happen when the maximum number of\nI      generation data sets (GDSs) has been cataloged. If the\nI      generation data group (GDG) is full (the LIMIT is reached), this\nI      attribute determines whether all GDSs or just the oldest GDSs are\nI      processed.\nN\nI      For an SMS-managed GDS, if the NOSCRATCH attribute is used, the\nI      GDS is uncataloged from its GDG base and is recataloged outside\nI      its GDG base as an SMS non-VSAM entry with the rolled-off status.\nN\nI      EMPTY /* Abbreviation: EMP */: Specifies that, when the maximum\nI      number of GDSs is exceeded, all the GDSs are uncataloged or\nI      deleted.\nN\nI      NOEMPTY /* Abbreviation: NEMP */: Used when the maximum number of\nI      GDSs is exceeded. This parameter specifies that only the oldest\nI      GDS is uncataloged or deleted.\nN\nD    ERASE | NOERASE -\nI      Indicates whether to erase the component when its entry in the\nI      catalog is deleted.\nN\nI      ERASE /* Abbreviation: ERAS */: Overwrites the component with\nI        binary zeros when its catalog entry is deleted. If the cluster\nI        or alternate index is protected by a RACF generic or discrete\nI        profile, use RACF commands to assign an ERASE attribute as part\nI        of this profile so that the data component is automatically\nI        erased upon deletion.\nN\nI      NOERASE /* Abbreviation: NERAS */: Specifies the component is not\nI        to be overwritten with binary zeros when its catalog entry is\nI        deleted. NOERASE resets only the indicator in the catalog entry\nI        that was created from a prior DEFINE or ALTER command.\nI        If the cluster or alternate index is protected by a RACF generic\nI        or discrete profile that specifies the ERASE attribute, it is\nI        erased upon deletion. Only RACF commands can be used to alter the\nI        ERASE attribute in a profile.\nN\nD    EXCEPTIONEXIT(entrypoint) /* Abbreviation: EEXT */ -\nI      Is the name of the user-written routine that receives control\nI      if an exception (usually an I/O error) occurs while the entry's\nI      object is being processed. An exception is any condition that\nI      causes a SYNAD exit. The object's exception exit routine is\nI      processed first, then the user's SYNAD exit routine receives\nI      control.\nN\nD    FILE(ddname) -\nI      Specifies one of the following:\nN\nI      -> The name of a DD statement that describes the volume that\nI         contains the data set to be altered.\nN\nI      -> The name of a DD statement that identifies the volume of an\nI         entry that will be renamed. The entry must be a non-VSAM data\nI         set or the data or index component of a cluster, alternate\nI         index, or page space.\nN\nI      -> The name of a DD statement that describes a partitioned data\nI         set when a member is to be renamed.\nN\nI      If you identify multiple volumes of different device types with\nI      FILE, use concatenated DD statements. If you specify ADDVOLUMES\nI      or REMOVEVOLUMES, the volume being added or removed must be\nI      identified.\nN\nI      If FILE is not specified, an attempt is made to dynamically\nI      allocate the object's data set. Therefore, the object's volume\nI      must be mounted as permanently resident or reserved.\nN\nI      Restriction: While the FILE parameter can preallocate a volume\nI      where the data set resides, it does not direct the ALTER request\nI      to the data set to be altered. Instead, a catalog search is done\nI      to locate the data set to be altered.\nN\nD    FILEDATA(TEXT | BINARY) -\nI      Use one of the following:\nN\nI      TEXT: Specifies that the data in the data set is text. If the\nI      data set is read or written across the network, the data in this\nI      data set is EBCDIC on z/OS and ASCII on the workstation.\nN\nI      BINARY: Specifies that data is to be processed as is.\nN\nD    FREESPACE(CI-percent CA-percent) -\nI      Indicates the percent of free space left after any allocation.\nI      CI-percent is a percentage of the amount of space to be preserved\nI      for adding new records and updating existing records, with an\nI      increase in the length of the record. Because a CI is split when\nI      it becomes full, the CA might also need to be split when it is\nI      filled by CIs created by a CI split. The amounts, as percentages,\nI      must be equal to, or less than, 100. If you use 100% of free\nI      space, one record is placed in each control interval and one\nI      control interval is placed in each control area (CA).\nN\nI      Use this parameter to alter the data component of a cluster,\nI      alternate index, or catalog.\nN\nI      If the FREESPACE is altered after the data set has been loaded,\nI      and sequential insert processing is used, the allocation of free\nI      space is not honored.\nN\nD    FRLOG(NONE | REDO) -\nI      Specifies whether VSAM batch logging can be performed for your\nI      VSAM data set. VSAM batch logging is available with CICS VSAM\nI      Recovery V3R1.\nN\nI      NONE: Disables the VSAM batch logging function for your VSAM\nI        data set. Changes made by applications are not written to the\nI        MVS log stream indicated on the LOGSTREAMID parameter.\nN\nI      REDO: Enables the VSAM batch logging function for your VSAM\nI        data set. Changes made by applications are written to the\nI        MVS log stream indicated in the LOGSTREAMID parameter. If you\nI        specify FRLOG(REDO), you must also specify LOGSTREAMID for\nI        that data set, unless the log stream is already defined.\nN\nI      Restrictions:\nN\nI      1. Use the FRLOG parameter only if you want to enable (REDO) or\nI         disable (NONE) VSAM batch logging. Do not use the FRLOG\nI         parameter for data sets that are not intended for use with\nI         VSAM batch logging.\nN\nI      2. If FRLOG is specified, these rules apply to the data set:\nN\nI      -> Must be SMS-managed\nN\nI      -> Cannot be LINEAR or a temporary data set\nN\nD    INHIBIT | UNINHIBIT -\nI      Specifies whether the entry being altered can be accessed for\nI      any operation or only for read operations.\nN\nI      INHIBIT /* Abbreviation: INH */: Used when the entry being\nI        altered is to be read only.\nN\nI      UNINHIBIT /* Abbreviation: UNINH */: Indicates that the\nI        read-only restriction set by a previous ALTER or EXPORT\nI        command is to be removed.\nN\nD    KEYS(length offset) -\nI      Specifies the length and offset of the object's key. If the\nI      altered entry defines an alternate index, offset applies to the\nI      alternate key in the data records in the base cluster.\nN\nI      Restrictions: Use KEYS if all the following are true:\nN\nI      -> The object whose entry is being altered is an alternate index,\nI         a path, a key-sequenced cluster, or a data component of a\nI         key-sequenced cluster or alternate index.\nN\nI      -> The object whose entry is being altered contains no data\nI         records.\nN\nI      -> The values for KEYS in the object's catalog entry are default\nI         values. For default values, see the DEFINE command for the\nI         object.\nN\nI      -> The new values for KEYS do not conflict with the control\nI         interval size specified when the object was defined.\nN\nI      -> The key fits within the record whose length is specified by\nI         the RECORDSIZE parameter.\nN\nI      -> The key fits in the first record segment of a spanned record.\nN\nI      length offset: Is the length of the key (between 1 and 255), in\nI        bytes, and its displacement from the beginning of the data\nI        record, in bytes. The length of the offset cannot be greater\nI        than the length of the data record.\nN\nI      If the values for KEYS in the object's catalog entry are not\nI      default values and ALTER KEYS specifies those same values,\nI      processing continues for any other parameters specified in the\nI      command, and no error message is issued.\nN\nD    LIMIT(limit) -\nI      Used to modify the maximum number (between 1 and 255) of active\nI      generation data sets (GDSs) that might be associated with a\nI      generation data group (GDG) base.\nN\nI      limit: If the limit is less than the current number of active\nI        generations, the oldest generations are rolled off until the\nI        new limit is satisfied. Any GDSs that are rolled off by this\nI        command are listed showing their new status (recataloged,\nI        uncataloged, or deleted). For more information about limit\nI        processing of a GDS, see z/OS DFSMS Managing Catalogs.\nN\nI        If the limit is greater than the current number of active\nI        generations, it does not cause the roll-in of existing rolled\nI        off GDSs. For this function, see the ROLLIN parameter.\nN\nD    LOCK | UNLOCK -\nI      Controls the setting of the catalog lock attribute, and therefore\nI      checks access to a catalog. Use LOCK or UNLOCK when the entry\nI      name identifies a catalog. If the LOCK | UNLOCK parameter is not\nI      specified, the status of the catalog lock attribute is not\nI      changed. Before you lock a catalog, review the information on\nI      locking catalogs in z/OS DFSMS Managing Catalogs.\nN\nI        LOCK: Is used when the catalog identified by entryname is to\nI          be locked. Locking a catalog makes it inaccessible to all\nI          users without read authority to RACF FACILITY class profile\nI          IGG.CATLOCK (including users sharing the catalog on other\nI          systems).\nN\nI          For protected catalogs, locking an unlocked catalog requires\nI          ALTER authority for the catalog being locked, and read\nI          authority to RACF FACILITY profile IGG.CATLOCK. For\nI          unprotected catalogs, locking an unlocked catalog requires\nI          read authority to RACF FACILITY class profile IGG.CATLOCK.\nN\nI        UNLOCK: Specifies that the catalog identified by entryname is\nI          to be unlocked. For RACF and nonprotected catalogs, unlocking\nI          a locked catalog requires read authority to RACF FACILITY\nI          class profile IGG.CATLOCK.\nN\nD    LOG(NONE | UNDO | ALL) -\nI      Establishes whether the sphere to be accessed with VSAM\nI      record-level sharing (RLS) or DFSMStvs is recoverable or\nI      nonrecoverable. It also indicates whether or not forward recovery\nI      logging should be done for the sphere. LOG applies to all\nI      components in the VSAM sphere.\nN\nI      NONE: Indicates that neither an external backout nor a forward\nI        recovery capability is available for the spheres accessed in\nI        VSAM RLS or DFSMStvs mode. If you use this, VSAM RLS and\nI        DFSMStvs consider the sphere to be nonrecoverable.\nN\nI      UNDO: Specifies that changes to the sphere accessed in VSAM RLS\nI        or DFSMStvs mode can be backed out using an external log. VSAM\nI        RLS and DFSMStvs consider the sphere recoverable when you use\nI        LOG(UNDO).\nN\nI      ALL: Specifies that changes to the sphere accessed in VSAM RLS\nI        or DFSMStvs mode can be backed out and forward recovered using\nI        external logs. VSAM RLS and DFSMStvs consider the sphere\nI        recoverable when you use LOG(ALL). When you specify LOG(ALL),\nI        you must also specify the LOGSTREAMID parameter, unless it is\nI        already defined.\nN\nI        VSAM RLS allows concurrent read or update sharing for\nI        nonrecoverable spheres through commit (CICS) and non-commit\nI        protocol applications. For a recoverable sphere, an application\nI        must use DFSMStvs to be able to open the sphere for update\nI        using VSAM RLS access.\nN\nI      Restriction: LOG cannot be used with LINEAR.\nN\nD    LOGSTREAMID(logstream) /* Abbreviation: LSID */ -\nI      Changes or adds the name of the forward recovery log stream. It\nI      applies to all components in the VSAM sphere.\nN\nI      logstream: Is the name of the forward recovery log stream. This\nI        can be a fully qualified name up to 26 characters, including\nI        separators. This parameter is required if you have specified\nI        LOG(ALL).\nN\nN        For information about defining log streams for CICS use, see\nI        the CICS and VSAM Record Level Sharing: Implementation Guide\nI        and z/OS DFSMStvs Administration Guide.\nN\nI      Restriction: LOGSTREAMID cannot be used with LINEAR.\nN\nD    MANAGEMENTCLASS(class) /* Abbreviation: MGMTCLAS */ -\nI      For SMS-managed data sets: Gives the name, 1 to 8 characters,\nI      of the management class for a data set. Your storage\nI      administrator defines the names of the management classes you\nI      can include. If MANAGEMENTCLASS is used for a non-SMS-managed\nI      data set, or if SMS is inactive, the ALTER command is\nI      unsuccessful.\nN\nI      When the storage or management class is altered for a DFSMShsm\nI      migrated data set, ALTER will not recall the data set to make\nI      the change, provided no other parameters are specified.\nN\nI      You must have RACF access authority to alter the management\nI      class.\nN\nD    NEWNAME(newname) -\nI      Indicates that the entry to be altered is to be given a new name.\nN\nI      When you rename an SMS-managed data set residing on DASD, the\nI      MGMTCLAS ACS routine is called and lets you reassign a new\nI      management class.\nN\nI      You can use ALTER NEWNAME to rename SMS-managed generation data\nI      sets (GDS). Table 5, in the manual, shows how NEWNAME resolves\nI      renaming a GDS under different conditions. You can successfully\nI      rename the following:\nN\nI      -> An SMS-managed GDS to an SMS-managed non-VSAM data set\nI      -> An SMS-managed non-VSAM data set to an SMS-managed GDS\nI      -> An SMS-managed GDS to another SMS-managed GDS\nN\nI      Restriction: Catalog names and catalog component names cannot\nI      be renamed.\nN\nI      You might not be able to rename a data set if you are changing\nI      the high-level qualifiers of the data set's name and those\nI      qualifiers are an alias name of a catalog. (The number of\nI      high-level qualifiers used to form an alias can be one to four,\nI      depending on the multilevel alias search level used at your\nI      installation.)\nN\nI      If you are changing a high-level qualifier, NEWNAME acts\nI      differently, depending on whether the data set being renamed is\nI      SMS-managed or non-SMS-managed, and whether the data set has\nI      aliases or not. Table 5, in the manual, shows how NEWNAME\nI      resolves under different conditions.\nN\nI      Restriction: Do not change the name of a data set for which\nI      there are back outs that need to be done. If you change the\nI      data set name in this case, it is impossible to back out the\nI      changes and the data set is in an inconsistent state, which can\nI      cause data integrity problems.\nN\nD    NULLIFY( /* Abbreviation: NULL */ -\nI      Specifies that the protection attributes identified by\nI      Subparameters of NULLIFY are to be nullified. Attributes are\nI      nullified before any respecification of attributes is done.\nN\nD      AUTHORIZATION(MODULE | STRING) /* Abbreviation: AUTH */ -\nI        Is used when the user authorization routine or the user\nI        authorization record is to be nullified.\nN\nI        MODULE /* Abbreviation: MDLE */: Removes the module name from\nI        the catalog record, but the module itself is not to be deleted.\nI        Both the user authorization routine and the user authorization\nI        record (character string) are nullified.\nN\nI        STRING /* Abbreviation: STRG */: Nullifies the authorization\nI        record, but the corresponding module is not nullified.\nN\nD      BWO -\nI        Use this parameter to remove the BWO specification from the\nI        sphere.\nN\nD      CODE -\nI        Nullifies the code name used for prompting.\nN\nD      EXCEPTIONEXIT /* Abbreviation: EEXT */ -\nI        Nullifies the entry's exception exit. The module name is\nI        removed from the catalog record, but the exception-exit\nI        routine itself is not deleted.\nN\nD      LOG -\nI        Nullifies the log parameter.\nN\nI        VSAM RLS or DFSMStvs access to the sphere is not permitted\nI        when the log parameter is nullified.\nN\nD      LOGSTREAMID /* Abbreviation: LSID */ -\nI        When you use this, the name of the forward recovery log\nI        stream is nullified. NULLIFY(LOGSTREAMID) is not allowed if\nI        the data set has a value of LOG(ALL).\nN\nD      OWNER -\nI        Nullifies the owner identification.\nN\nD      RETENTION /* Abbreviation: RETN */ -\nI        Nullifies the retention period that was used in a TO or FOR\nI        parameter.\nD    ) -\nN\nD    OWNER(ownerid) -\nI      Specifies the owner identification for the entry being altered.\nN\nD    RECLAIMCA | NORECLAIMCA  -\nI      Specifies the CA reclaim attribute of a key-sequence data set (KSDS).\nN\nI      RECLAIMCA: Specifies that the DASD space for empty control areas\nI        (CAs) will be reclaimed so that it can reused for that KSDS.\nI        CA reclaim cannot reclaim space for:\nN\nI      -> Partially empty CAs\nN\nI      -> Empty CAs that already existed when CA reclaim was enabled\nN\nI      -> CAs with RBA 0\nN\nI      -> CAs with the highest key of the KSDS\nN\nI      -> Data sets processed with GSR.\nN\nI      NORECLAIMCA: Specifies that the DASD space for empty control\nI        areas (CAs) will not be reclaimed.\nN\nI      You can disable CA reclaim at the system level with the IGDSMSxx\nI      member of PARMLIB or with the SETSMS command. This does not\nI      change CA reclaim attributes in the catalog.\nN\nI      For more information, see the topic about reclaiming CA space\nI      in z/OS DFSMS Using Data Sets, SC26-7410-11.\nN\nD    RECORDSIZE(average maximum) /* Abbreviation: RECSZ */ -\nI      Specifies new average and maximum lengths for data records\nI      contained in the object whose entry is being altered.\nN\nI      If the object whose entry is being altered is a path pointing\nI      to the alternate index, the alternate index is altered; if it\nI      is a path pointing directly to the base cluster, the base\nI      cluster is altered.\nN\nI      If the object whose entry is being altered is an alternate index,\nI      the length of the alternate key must be within the limit\nI      specified by maximum.\nN\nI      Restrictions: RECORDSIZE is used only if all the following are\nI      true:\nN\nI      -> The object whose entry is being altered is an alternate index,\nI         a cluster, a path, or a data component.\nN\nI      -> The object whose entry is being altered contains no data\nI         records.\nN\nI      -> The maximum RECORDSIZE in the object's catalog entry is the\nI         default. For defaults, see the DEFINE command for the object.\nN\nI      -> If NONUNIQUEKEY is used for an alternate index, the record\nI         length to be specified accounts for the increased record size;\nI         this results from the multiple prime key pointers in the\nI         alternate index data record.\nN\nI      -> Use a maximum record length of at least seven bytes less than\nI         the control interval size, unless the record is a spanned\nI         record.\nN\nI      -> Use a record length large enough to contain all prime and\nI         alternate keys previously defined.\nN\nI      If RECORDSIZE in the object's catalog entry is not the default,\nI      and ALTER RECORDSIZE specifies that same value, processing\nI      continues for any other parameters given in the command, and\nI      there is no error message.\nN\nD    REMOVEVOLUMES(volser volser...) /* Abbreviation: RVOL */ -\nI      Specifies volumes to be removed from the list of candidate\nI      volumes associated with the entry being altered. The name of\nI      the data or index component must be specified in the ENTRYNAME\nI      parameter. If you are also adding volumes, the volumes to be\nI      removed are removed after the new volumes are added to the\nI      candidate list. Only nonspecific volumes can be removed from\nI      SMS-managed, non-VSAM data sets, and GDS data sets. For\nI      information on volume cleanup, see \"VSAM Volume Cleanup\" in\nI      z/OS DFSMS Managing Catalogs.\nN\nI      SMS might not use candidate volumes for which you request\nI      specific volsers. Some user-specified volsers. for an\nI      SMS-managed data set can result in an error. To avoid candidate\nI      volume problems with SMS, you can request that SMS choose the\nI      given volser used for a candidate volume. To do this, you can\nI      code an * for each volser that you request. If, however, you\nI      request both specified and unspecified volsers in the same\nI      command, you must enter the specified volsers first in the\nI      command syntax.\nN\nI      To ensure that the operation has completed correctly, the\nI      execution of ALTER REMOVEVOLUMES should be followed by a listing\nI      of the VTOC on the target volume. If ALTER REMOVEVOLUMES did not\nI      scratch any data sets allocated to job steps, it can still\nI      complete with return code zero. Both the basic catalog structure\nI      (BCS) and the VSAM volume data set (VVDS) might be allocated to\nI      another job or TSO/E user. If so, these entities are not\nI      scratched, and any future access method services commands that\nI      depend on ALTER REMOVEVOLUMES completing normally might be\nI      unsuccessful. To ensure that the operation has completed\nI      correctly, follow the execution of ALTER REMOVEVOLUMES with a\nI      listing of the VTOC on the target volume.\nN\nI      Exceptions:\nN\nI      1. If a volume to be removed contains data that belongs to the\nI         entry being altered, the volume is not removed.\nN\nI      2. Volume cleanup is not supported if the volume is SMS managed.\nN\nD    REUSE | NOREUSE -\nI      Controls setting the REUSE indicator for VSAM data sets. A data\nI      set that requires the REUSE attribute be changed to \"reusable\"\nI      cannot be an alternate index nor can it have an associated\nI      alternate index. The data set also cannot be a key-sequenced\nI      data set (KSDS) with one or more key ranges.\nN\nD    ROLLIN /* Abbreviation: ROL */ -\nI      Indicates whether an SMS-managed generation data set (GDS) is to\nI      be rolled-in. The generation data set must be SMS managed and\nI      either in a deferred rolled-in state or a rolled-off state. For\nI      more information about rolling in GDSs, see z/OS DFSMS Using\nI      Data Sets for more information.\nN\nD    SCRATCH | NOSCRATCH /* Abbreviations: SCR and NSCR */ -\nI      Specifies whether generation data sets, when they are\nI      uncataloged, are to be removed from the VTOC of the volume where\nI      they reside.\nN\nI      SCRATCH: Removes the data set's format-1 DSCB from the VTOC so\nI      that the data set can no longer be accessed, and, for SMS-managed\nI      data sets, the non-VSAM volume record (NVR) is removed from the\nI      VVDS.\nN\nI      NOSCRATCH: Indicates that the data set's format-1 DSCB is not\nI      to be removed from the VTOC and, for SMS-managed data sets, the\nI      NVR entry remains in the VVDS.\nN\nD    SHAREOPTIONS(crossregion crosssystem) /* Abbreviation: SHR */ -\nI      Is used when a data or index component of a cluster, alternate\nI      index, or the data component of a catalog can be shared among\nI      users. However, SMS-managed volumes, and catalogs containing\nI      SMS-managed data sets, must not be shared with non-SMS systems.\nI      (For a description of data set sharing, see z/OS DFSMS Using\nI      Data Sets).\nN\nI      The value of SHAREOPTIONS is assumed to be (3,3) when the data\nI      set is accessed in VSAM RLS or DFSMStvs mode.\nN\nI      crossregion: Specifies the amount of sharing allowed among\nI        regions within the same system or within multiple systems\nI        using global resource serialization (GRS). Independent job\nI        steps in an operating system, or multiple systems in a GRS\nI        ring, can access a VSAM data set concurrently. For a\nI        description of GRS, see z/OS MVS Planning: Global Resource\nI        Serialization. Option 3 is the only one applicable for altering\nI        a catalog. To share a data set, each user must code DISP=SHR\nI        in the data set's DD statement. You can use the following\nI        options:\nN\nI        1: The data set can be shared by any number of users for read\nI           processing, or the data set can be accessed by only one user\nI           for read and write processing. VSAM ensures complete data\nI           integrity for the data set. This setting does not allow any\nI           non-RLS access when the data set is already open for VSAM\nI           RLS or DFSMStvs processing. A VSAM RLS or DFSMStvs open will\nI           fail with this option if the data set is already open for\nI           any processing.\nN\nI        2: The data set can be accessed by any number of users for read\nI           processing, and it can also be accessed by one user for\nI           write processing. It is the user's responsibility to provide\nI           read integrity. VSAM ensures write integrity by obtaining\nI           exclusive control for a control interval while it is being\nI           updated. A VSAM RLS or DFSMStvs open is not allowed while\nI           the data set is open for non-RLS output.\nN\nI           If the data set has already been opened for VSAM RLS or\nI           DFSMStvs processing, a non-RLS open for input is allowed;\nI           a non-RLS open for output fails. If the data set is opened\nI           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is\nI           allowed.\nN\nI        3: The data set can be fully shared by any number of users. The\nI           user is responsible for maintaining both read and write\nI           integrity for the data the program accesses. This setting\nI           does not allow any non-RLS access when the data set is\nI           already open for VSAM RLS or DFSMStvs processing. If the\nI           data set is opened for input in non-RLS mode, a VSAM RLS\nI           or DFSMStvs open is allowed.\nN\nI           This option is the only one applicable to a catalog.\nN\nI        4: The data set can be fully shared by any number of users.\nI           For each request, VSAM refreshes the buffers used for\nI           direct processing. This setting does not allow any non-RLS\nI           access when the data set is already open for RLS or DFSMStvs\nI           processing. If the data set is opened for input in non-RLS\nI           mode, a VSAM RLS or DFSMStvs open is allowed.\nN\nI           As in SHAREOPTIONS 3, each user is responsible for\nI           maintaining both read and write integrity for the data the\nI           program accesses.\nN\nI      crosssystem: Is the amount of sharing allowed among systems. Job\nI        steps of two or more operating systems can gain access to the\nI        same VSAM data set regardless of the disposition specified in\nI        each step's DD statement for the data set. To get exclusive\nI        control of the data set's volume, a task in one system issues\nI        the RESERVE macro. The level of cross-system sharing allowed by\nI        VSAM applies only in a multiple operating system environment.\nN\nI        The cross-system sharing options are ignored by VSAM RLS or\nI        DFSMStvs processing. The values are:\nN\nI        1: Reserved.\nN\nI        2: Reserved.\nN\nI        3: Specifies that the data set can be fully shared. With this\nI           option, each user is responsible for maintaining both read\nI           and write integrity for the data the program accesses. User\nI           programs that ignore write integrity guidelines can cause\nI           VSAM program checks, uncorrectable data set problems, and\nI           other unpredictable results.\nN\nI           The RESERVE and DEQ macros are required with this option to\nI           maintain data set integrity. (For information on using\nI           RESERVE and DEQ, see z/OS MVS Programming: Authorized\nI           Assembler Services Reference LLA-SDU and z/OS MVS\nI           Programming: Authorized Assembler Services Reference\nI           ALE-DYN.)\nN\nI        4: Specifies that the data set can be fully shared. For each\nI           request, VSAM refreshes the buffers used for direct\nI           processing. This option requires that you use the RESERVE\nI           and DEQ macros to maintain data integrity while sharing the\nI           data set. Improper use of the RESERVE macro can cause\nI           problems similar to those described under SHAREOPTIONS 3.\nI           (For information on using RESERVE and DEQ, see z/OS MVS\nI           Programming: Authorized Assembler Services Reference\nI           LLA-SDU and z/OS MVS Programming: Authorized Assembler\nI           Services Reference ALE-DYN.)\nN\nI           Output processing is limited to update or add processing\nI           that does not change either the high-used relative byte\nI           address (RBA) or the RBA of the high key data control\nI           interval if DISP=SHR is specified.\nN\nD    STORAGECLASS(class) /* Abbreviation: STORCLAS */ -\nI      For SMS-managed data sets: Gives the name, 1 to 8 characters,\nI      of the storage class. Your storage administrator defines the\nI      names of the storage classes you can assign. A storage class is\nI      assigned when you specify STORAGECLASS or an installation-written\nI      automatic class section (ACS) routine selects a storage class\nI      when the data set is created. Use the storage class to provide\nI      the storage service level to be used by SMS for storage of the\nI      data set. The storage class provides the storage attributes that\nI      are specified on the UNIT and VOLUME operand for non-SMS-managed\nI      data sets.\nN\nI      When the storage or management class is altered for a DFSMShsm\nI      migrated data set, ALTER will not recall the data set to make\nI      the change, provided no other parameters are specified.\nN\nI      You must have RACF access authority to alter the storage class.\nN\nI      If STORAGECLASS is used for a non-SMS-managed data set or if\nI      SMS is inactive, the ALTER command is unsuccessful.\nN\nD    STRNO(number) -\nI      Specifies the number of concurrent catalog positioning requests\nI      that VSAM should manage. Use this parameter to alter the data\nI      component of a catalog. The STRNO setting is ignored when the\nI      data set is opened for RLS or DFSMStvs.\nN\nI      number: Is the number of concurrent requests VSAM must manage.\nI        The minimum number is 2, the maximum is 255.\nN\nD    TO(date) | FOR(days) -\nI      Specifies the retention period for the entry being altered.\nN\nI      You cannot use these parameters for the data or index components\nI      of clusters or alternate indexes. For catalogs, you must use the\nI      data component name. The expiration date in the catalog is\nI      updated, and, for SMS-managed data sets, the expiration date in\nI      the format-1 DSCB is changed. Enter a LISTCAT command to see the\nI      correct expiration date.\nN\nI      The MANAGEMENTCLASS maximum retention period, if specified,\nI      limits the retention period specified by this parameter.\nN\nI      TO(date): Specifies the earliest date that a command without the\nI        PURGE parameter can delete an entry. Specify the expiration\nI        date in the form yyyyddd, where yyyy is a four-digit year (to\nI        a maximum of 2155) and ddd is the three-digit day of the year\nI        from 001 through 365 (for non-leap years) or 366 (for leap\nI        years).\nN\nI        The following four values are \"never-expire\" dates:\nI        99365, 99366, 1999365, and 1999366. Specifying a \"never-expire\"\nI        date means that the PURGE parameter will always be required to\nI        delete an entry. For related information, see the \"EXPDT\nI        Parameter\" section of z/OS MVS JCL Reference, SA22-7597.\nN\nI        Notes:\nN\nI        1. Any dates with two-digit years (other than 99365 or 99366)\nI           will be treated as pre-2000 dates. (See note 2.)\nN\nI        2. Specifying the current date or a prior date as the\nI           expiration date will make an entry immediately eligible\nI           for deletion.\nN\nI      FOR(days): Specifies the number of days you want to keep the\nI        entry. The maximum number is 93000. If the number is 0 through\nI        92999 (except for 9999), the entry is retained for the number\nI        of days indicated. If the number is either 9999 or 93000, the\nI        entry is retained indefinitely. There is a hardware imposed\nI        expiration date of 2155.\nN\nD    TYPE(LINEAR) /* Abbreviation: LIN */ -\nI      Specifies that the VSAM data set type of an entry-sequenced data\nI      set (ESDS) is to be changed to linear. The contents of the data\nI      set are not modified. Only an ESDS with a CI size of 4096 is\nI      eligible to be a linear data set. A linear data set's type cannot\nI      be changed. After you have changed an ESDS set to a linear data\nI      set, the data set must remain a linear data set; you cannot\nI      change it back into an ESDS.\nN\nI      LINEAR: Changes the VSAM data type ESDS to a linear data set\nI        (LDS).\nN\nD    UNIQUEKEY | NONUNIQUEKEY /* Abbreviations: UNQK and NUNQK */ -\nI      Specifies whether the alternate key value can be found in more\nI      than one of the base cluster's data records.\nN\nI      UNIQUEKEY: Makes each alternate key value unique. If the same\nI        alternate key value is found in more than one of the base\nI        cluster's data records, an error results.\nN\nI        You can use UNIQUEKEY for an empty alternate index (that is,\nI        an alternate index that is defined but not yet built).\nN\nI      NONUNIQUEKEY: Allows an alternate key value to point to more\nI        than one data record in the cluster. NONUNIQUEKEY can be\nI        specified for an alternate index at any time.\nN\nI        If the alternate index is empty, you should also consider\nI        defining RECORDSIZE to ensure that each alternate index record\nI        is large enough to contain more than one data record pointer.\nN\nD    UPDATE | NOUPDATE /* Abbreviations: UPD and NUPD */ -\nI      Specifies whether a base cluster's alternate index upgrade set\nI      is to be allocated when the path's name is allocated.\nN\nI      The NOUPDATE setting is ignored when the data set is opened for\nI      VSAM RLS or DFSMStvs. Alternate indexes in the upgrade set are\nI      opened as if UPDATE was specified.\nN\nI      UPDATE: Allocates the cluster's alternate index upgrade set when\nI        the path's name is allocated with a DD statement.\nN\nI      NOUPDATE: Specifies that the cluster's alternate index upgrade\nI        set is not to be allocated but the path's cluster is to be\nI        allocated. You can use NOUPDATE to open a path. If the path\nI        shares a control block structure that uses UPDATE, this\nI        indicates the upgrade set has been allocated and, in this\nI        case, the upgrade set can be updated.\nN\nD    UPGRADE | NOUPGRADE /* Abbreviations: UPG and NUPG */ /* - */\nI      Shows whether an alternate index is to be upgraded (to reflect\nI      the changed data) when its base cluster is modified.\nN\nI      UPGRADE: Indicates that the cluster's alternate index is upgraded\nI        (to reflect the changed data) when the cluster's records are\nI        added to, updated, or erased.\nN\nI        If UPGRADE is used when the cluster is open, the upgrade\nI        attribute does not apply to the alternate index until the\nI        cluster is closed and then opened (that is, a new set of VSAM\nI        control blocks describes the cluster and its attributes).\nN\nI        Use UPGRADE for an empty alternate index (that is, an alternate\nI        index that is defined but not built). However, the UPGRADE\nI        attribute is not effective for the alternate index until the\nI        alternate index is built (see the description of the BLDINDEX\nI        command).\nN\nI      NOUPGRADE: Specifies the alternate index is not to be modified\nI        when the its base cluster is modified. NOUPGRADE can be use\nI        as an alternate index at any time.\nN\nM    CATALOG(catname) /* Abbreviation: CAT */\nI      Specifies the catalog containing the entry to be altered.\nN\nI      To assign catalog names for SMS-managed data sets, you must have\nI      access to the RACF STGADMIN.IGG.DIRCAT FACILITY class.\nI      See \"Storage Management Subsystem (SMS) Considerations\" for more\nI      information. If you are altering BUFNI for a catalog other than\nI      the current master catalog on the system this command is issued\nI      on, then this is a required parameter.\nN\nI      catname: Is the name of the catalog that contains the entry.\nN\nM      If you omit this paramer, and mst of the time you should, they\nM      system will locate the correct catalog by following the ALIAS.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC0511": {"ttr": 4609, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0511\nTDFSMS AMS\nT-Chapter 5.\nT-Example 1: Alter a Cluster's Attributes Using SMS Keywords\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-093852\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 5. ALTER\nN----------------\nNExample 1: Alter a Cluster's Attributes Using SMS Keywords\nN----------------------------------------------------------\nD//ALTER1   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  ALTER -\nD    CLUS.ALTER.EXAMPLE -\nD    LOG(ALL) -\nD    LOGSTREAMID(LogA) -\nD    MANAGEMENTCLASS(VSAM) -\nD    STORAGECLASS(FAST)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe ALTER parameters are:\nN-------------------------\nN-> CLUS.ALTER.EXAMPLE: identifies the cluster to be altered.\nN   The ALTER command modifies some of the attributes of SMS-managed\nN   data set CLUS.ALTER.EXAMPLE. The data set is SMS-managed and is\nN   about to be used in production. Through use in production, it is\nN   expected to grow and require an increase in the frequency of backup,\nN   availability and performance.\nN\nN-> LOG(ALL): specifies that changes to the sphere accessed in RLS and\nN   DFSMStvs mode can be backed out and forward recovered using external\nN   logs.\nN\nN-> LOGSTREAMID: gives the name of the forward recovery log stream.\nN\nN-> MANAGEMENTCLASS: indicating a new management class of VSAM.\nN\nN-> STORAGECLASS: indicating a storage class of FAST.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0512": {"ttr": 4611, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0512\nTDFSMS AMS\nT-Chapter 5.\nT-Example 2: Roll-In a Generation Data Set\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-093908\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 5. ALTER\nN----------------\nNExample 2: Roll-In a Generation Data Set\nN----------------------------------------\nD//ALTER2   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  ALTER -\nD    DATA.G0001V05 -\nD    ROLLIN\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe ALTER parameters are:\nN-------------------------\nN-> DATA.G0001V05: identifies the generation data set to be altered.\nN\nN-> ROLLIN: rolls the generation data set into the GDG base.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0513": {"ttr": 4613, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0513\nTDFSMS AMS\nT-Chapter 5.\nT-Example 3: Alter the Entry Names of Generically Named Clusters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-093919\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 5. ALTER\nN----------------\nNExample 3: Alter the Entry Names of Generically Named Clusters\nN--------------------------------------------------------------\nD//ALTER3   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  ALTER -\nD    GENERIC.*.BAKER -\nD    NEWNAME(GENERIC.*.ABLE)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe ALTER parameters are:\nN-------------------------\nN-> GENERIC.*.BAKER: identifies the objects to be modified.\nN\nN-> NEWNAME: changes each generic entry name GENERIC.*.BAKER to\nN   GENERIC.*.ABLE.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0514": {"ttr": 4615, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0514\nTDFSMS AMS\nT-Chapter 5.\nT-Example 4: Alter the Attributes of a Generation Data Group\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-093929\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 5. ALTER\nN----------------\nNExample 4: Alter the Attributes of a Generation Data Group\nN----------------------------------------------------------\nD//ALTER4   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  ALTER -\nD    GDG01 -\nD    NOEMPTY -\nD    SCRATCH\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe ALTER parameters are:\nN-------------------------\nN-> GDG01: identifies the object to be modified.\nN\nN-> NOEMPTY: uncatalogs only the oldest generation data set when the\nN   maximum number of cataloged generation data sets is exceeded.\nN\nN-> SCRATCH: removes the generation data set's DSCB from the volume VTOC\nN   when the data set is uncataloged. If the data set is SMS-managed,\nN   the NVR is also removed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0515": {"ttr": 4617, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0515\nTDFSMS AMS\nT-Chapter 5.\nT-Example 5: (Missing)\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-093950\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 5. ALTER\nN----------------\nNExample 5:\nN----------\nMIBM did not provide example 5 in this version of the manual.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0516": {"ttr": 4619, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0516\nTDFSMS AMS\nT-Chapter 5.\nT-Example 6: Alter a Data Set Expiration Date\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094000\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 5. ALTER\nN----------------\nNExample 6: Alter a Data Set Expiration Date\nN-------------------------------------------\nD//ALTER6   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  ALTER -\nD    MOD.ALTER.EXAMPLE -\nD    TO(2005123)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe ALTER parameters are:\nN-------------------------\nN->  MOD.ALTER.EXAMPLE: is the name of the data set.\nN\nN->  TO: changes the expiration date of the data set by name. The year\nN    (2005) is a four-digit number, concatenated with the day (123).\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0517": {"ttr": 4621, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0517\nTDFSMS AMS\nT-Chapter 5.\nT-Example 7: Migrate a DB2 Cluster to a Linear Data Set Cluster\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094012\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 5. ALTER\nN----------------\nNExample 7: Migrate a DB2 Cluster to a Linear Data Set Cluster\nN-------------------------------------------------------------\nD//ALTER7   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  ALTER -\nD    EXAMPLE.ABC01 -\nD    TYPE(LINEAR)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe ALTER parameters are:\nN-------------------------\nN-> EXAMPLE.ABC01: identifies the object to be altered.\nN\nN-> TYPE(LINEAR): requests ALTER change the data set type to LDS.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0518": {"ttr": 4623, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0518\nTDFSMS AMS\nT-Chapter 5.\nT-Example 8: Alter a Cluster Name and the Associated Data and Index\nTNames\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094025\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 5. ALTER\nN----------------\nNExample 8: Alter a Cluster Name and the Associated Data and Index Names\nN-----------------------------------------------------------------------\nNJust because you can does not mean you should ever follow this poorly\nNshown example.\nN\nD//ALTER8   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    CLUSTER( -\nD      NAME(EXAMPLE.KSDS) -\nD      TRK(1 1) -\nD      VOL(338001) -\nD    ) -\nD    DATA( -\nD      NAME(EXAMPLE.KSDS.DATA) -\nD    ) -\nD    INDEX( -\nD      NAME(EXAMPLE.KSDS.INDEX) -\nD    )\nD  ALTER -\nD    EXAMPLE.KSDS -\nD    NEWNAME(EXAMPLE.TEST)\nD  ALTER -\nD    EXAMPLE.KSDS.* -\nD    NEWNAME(EXAMPLE.TEST.*)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE parametersd are:\nN---------------------------\nN-> CLUSTER: identifies the type of object to be defined.\nN\nN   -> NAME(EXAMPLE.KSDS): names the object.\nN\nN   -> TRK: requests disk space in tracks.\nN\nN   -> VOL: specifies the VOLSER for the components.\nN\nN-> DATA: identifies the following parameters apply to the DATA\nN   component.\nN\nN   -> NAME(EXAMPLE.KSDS.DATA): names the component.\nN\nN-> INDEX: identifies the following parameters apply to the INDEX\nN   component.\nN\nN   -> NAME(EXAMPLE.KSDS.INDEX): names the component.\nN\nNThe first ALTER parameters are:\nN-------------------------------\nN-> EXAMPLE.KSDS: identifies the object to be modified (cluster\nN   component previously defined).\nN\nN-> NEWNAME: changes the entry name EXAMPLE.KSDS to EXAMPLE.TEST. This\nN   alters the cluster name to EXAMPLE.TEST\nN\nNThe second ALTER parameters are:\nN--------------------------------\nN-> EXAMPLE.KSDS.*: identifies the objects to be modified (data and\nN   index components previously defined).\nN\nN-> NEWNAME: changes each generic entry name EXAMPLE.KSDS.* to\nN   EXAMPLE.TEST.*. This alters the data and index names to\nN   EXAMPLE.TEST.DATA and EXAMPLE.TEST.INDEX\nN\nMAttention:\nM----------\nMUse the second example of the ALTER command with caution.\nM\nMAny data set with the first two qualifiers EXAMPLE.KSDS will be\nMaltered.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC06": {"ttr": 4625, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC06\nTDFSMS AMS\nT-Chapter 6. ALTER LIBRARYENTRY\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148993\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 6. ALTER LIBRARYENTRY\nN-----------------------------\nNThe ALTER LIBRARYENTRY command modifies the attributes of an existing\nNtape library entry. Use this command to recover from tape volume\nNcatalog errors.\nN\nNBecause access method services cannot change the library manager\nNinventory in an automated tape library, use Interactive Storage\nNManagement Facility (ISMF) for normal tape library alter functions.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0601": {"ttr": 4865, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0601\nTDFSMS AMS\nT-Chapter 6.\nT-Syntax for ALTER LIBRARYENTRY Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 6. ALTER LIBRARYENTRY\nN-----------------------------\nNSyntax for ALTER LIBRARYENTRY Parameters\nN----------------------------------------\nD  ALTER\nN\nNRequired Parameters\nN-------------------\nD    entryname -\nI      Identifies the name of the tape library entry being altered. This\nI      entry consists of the 1-to-8 character tape library name.\nN\nD    LIBRARYENTRY /* Abbreviation: LIBENTRY | LIBENT */ -\nI      Alters a tape library entry. To alter a library entry, you must\nI      have access to RACF FACILITY class profile STGADMIN.IGG.LIBRARY.\nN\nNOptional Parameters\nN-------------------\nD    CONSOLENAME(consolename) /* Abbreviation: CONSOLE */ -\nI      Identifies the name of the console that will receive tape\nI      library related messages.\nN\nI      consolename: Specifies a 2-to-8 character console name starting\nI        with an alphabetic character.\nN\nD    DESCRIPTION(desc) /* Abbreviation: DESC */ -\nI      Is a description for the tape library entry being altered.\nN\nI      desc: Lets you include a 1-to-120 character tape library\nI        description. If the description contains commas, semicolons,\nI        embedded blanks, parentheses, or slashes, the entire\nI        description must be enclosed in single quotation marks. The\nI        default for this parameter is blanks.\nN\nD    LIBDEVTYPE(devtype) /* Abbreviation: LDEVT */ -\nI      Identifies the tape library device type.\nN\nI      devtype: Is an 8-character hardware device type. If you do not\nI        use this, LIBDEVTYPE is not established.\nN\nD    LIBRARYID(libid) /* Abbreviation: LIBID */ -\nI      Establishes the connection between the software-assigned tape\nI      library name and the actual tape library hardware.\nN\nI      libid: Is a 5-digit hexadecimal tape library serial number.\nN\nD    LOGICALTYPE(AUTOMATED | MANUAL) /* Abbreviation: LOGTYP */ -\nI      Identifies the type of tape library being created. If you do not\nI      use this parameter, LOGICALTYPE is not established.\nN\nI      AUTOMATED: Indicates an automated tape library.\nN\nI      MANUAL: Is a manual tape library.\nN\nD    NULLIFY(LIBDEVTYPE | LOGICALTYPE) -\nI      Identifies the fields to be nullified. You can enter one or both;\nI      they are not mutually exclusive.\nN\nI      LIBDEVTYPE /* Abbreviation: LDEVT */: specifies that this\nI        parameter be set to blanks, indicating that the parameter is\nI        not established.\nN\nI      LOGICALTYPE /* Abbreviation: LOGTYP */: Specifies that the value\nI        of this parameter be set to blanks, which implies that this\nI        parameter is not established.\nN\nD    NUMBEREMPTYSLOTS(numslots) /* Abbreviation: NUMESLT */ -\nI      Identifies the total number of empty slots in the given tape\nI      library. You can use it only when LOGICALTYPE is AUTOMATED.\nN\nI      numslots: Is the number of tape cartridges you can add to the\nI        tape library. Use a number from 0 to 999999. The default is 0.\nN\nD    NUMBERSCRATCHVOLUMES( /* Abbreviation: NUMSCRV */ -\nD      MEDIA1(num) MEDIA2(num) -\nD      MEDIA3(num) MEDIA4(num) MEDIA5(num) MEDIA6(num) -\nD      MEDIA7(num) MEDIA8(num) MEDIA9(num) MEDIA10(num) -\nD    ) -\nI      Identifies the total number of MEDIA1, MEDIA2, MEDIA3, MEDIA4,\nI      MEDIA5, MEDIA6, MEDIA7, MEDIA8, MEDIA9, and MEDIA10 scratch\nI      volumes currently available in the given tape library.\nN\nI      MEDIA1(num): Specifies the number of Cartridge System Tape\nI        scratch volumes available. Use a number from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA2(num): Specifies the number of Enhanced Capacity Cartridge\nI        System Tape scratch volumes available. Use a number from 0\nI        to 999999.\nI        The default is 0.\nN\nI      MEDIA3(num): Specifies the number of High Performance Cartridge\nI        Tape scratch volumes available. Use a number from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA4(num): Specifies the number of IBM Extended High\nI        Performance Cartridge Tape scratch volumes available. Use a\nI        number from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA5(num): Specifies the number of IBM TotalStorage Enterprise\nI        Tape Cartridge scratch volumes available. Use a number from 0\nI        to 999999.\nI        The default is 0.\nN\nI      MEDIA6(num): Specifies the number of IBM TotalStorage Enterprise\nI        WORM Tape Cartridge scratch volumes available. Use a number\nI        from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA7(num): Specifies the number of IBM TotalStorage Enterprise\nI        Economy Tape Cartridge scratch volumes available. Use a number\nI        from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA8(num): Specifies the number of IBM TotalStorage Enterprise\nI        Economy WORM Tape Cartridge scratch volumes available. Use a\nI        number from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA9(num): Specifies the number of IBM TotalStorage Enterprise\nI        Economy Tape Cartridge scratch volumes available. Use a number\nI        from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA10(num): Specifies the number of IBM TotalStorage Enterprise\nI        Economy WORM Tape Cartridge scratch volumes available. Use a\nI        number from 0 to 999999.\nI        The default is 0.\nN\nD    NUMBERSLOTS(numslots) /* Abbreviation: NUMSLT */ -\nI      Is the total number of slots in the given tape library. You can\nI      use this parameter only when LOGICALTYPE is AUTOMATED.\nN\nI      numslots: Is the total number of tape cartridges that can be\nI        contained in the tape library. Use a number from 0 to 999999.\nI        The default is 0.\nN\nD    SCRATCHTHRESHOLD( /* Abbreviation: SCRTHR */ -\nD      MEDIA1(num) MEDIA2(num) MEDIA3(num) -\nD      MEDIA4(num) MEDIA5(num) MEDIA6(num) MEDIA7(num) -\nD      MEDIA8(num) MEDIA9(num) MEDIA10(num) -\nD    )\nI      Specifies the scratch volume message threshold. When the number\nI      of scratch volumes in the tape library falls below the scratch\nI      threshold, an operator action message, requesting that scratch\nI      volumes be entered into the tape library, is issued to the\nI      library's console. When the number of scratch volumes exceeds\nI      twice the scratch threshold, the message is removed from the\nI      console.\nN\nI      We recommend the use of ISMF panels to make library definition\nI      changes, but if you use IDCAMS, make sure that the total slots\nI      number defined is greater than the highest scratch threshold\nI      you will need. If you issue a\nI      ALTER libname LIBENTRY SCRATCHTHRESHOLD(MEDIAx(num))\nI      command and receive the following system message IDC31903I in\nI      response, the total slots defined are not high enough:\nN\nM      IDC31903I NUMBERSCRATCHVOLUMES IS GREATER THAN AVAILABLE VOLUMES\nN\nI      Do the following to set the total slots higher than the scratch\nI      threshold:\nN\nI        ALTER libname LIBENTRY NUMBERSLOTS(num+1)\nN\nI      followed immediately by:\nN\nI        ALTER libname LIBENTRY SCRATCHTHRESHOLD(MEDIAx(num))\nN\nI      MEDIA1(num): Specifies the threshold number of Cartridge System\nI        Tape scratch volumes. Use a number from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA2(num): Specifies the threshold number of Enhanced Capacity\nI        System Tape scratch volumes. Use a number from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA3(num): Specifies the threshold number of High Performance\nI        Cartridge Tape scratch volumes. Use a number from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA4(num): Specifies the threshold number of IBM Extended High\nI        Performance Cartridge Tape scratch volumes. Use a number from\nI        0 to 999999.\nI        The default is 0.\nN\nI      MEDIA5(num): Specifies the threshold number of IBM TotalStorage\nI        Enterprise Tape Cartridge scratch volumes. Use a number from\nI        0 to 999999.\nI        The default is 0.\nN\nI      MEDIA6(num): Specifies the threshold number of IBM TotalStorage\nI        Enterprise WORM Tape Cartridge scratch volumes. Use a number\nI        from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA7(num): Specifies the threshold number of IBM TotalStorage\nI        Enterprise Economy Tape Cartridge scratch volumes. Use a\nI        number from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA8(num): Specifies the threshold number of IBM TotalStorage\nI        Enterprise Economy WORM Tape Cartridge scratch volumes. Use a\nI        number from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA9(num): Specifies the threshold number of IBM TotalStorage\nI        Enterprise Economy Tape Cartridge scratch volumes. Use a\nI        number from 0 to 999999.\nI        The default is 0.\nN\nI      MEDIA10(num): Specifies the threshold number of IBM TotalStorage\nI        Enterprise Economy WORM Tape Cartridge scratch volumes. Use a\nI        number from 0 to 999999.\nI        The default is 0.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0611": {"ttr": 4867, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0611\nTDFSMS AMS\nT-Chapter 6.\nT-Example 1: Altering a Tape Library Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094151\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 6. ALTER LIBRARYENTRY\nN-----------------------------\nNExample 1: Altering a Tape Library Entry\nN----------------------------------------\nD//ALTER1   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  ALTER -\nD    ATLLIB1 -\nD    LIBRARYENTRY -\nD    NUMBEREMPTYSLOTS(2574) -\nD    NUMBERSCRATCHVOLUMES( -\nD      MEDIA2(400) -\nD      MEDIA6(500) -\nD    ) -\nD    SCRATCHTHRESHOLD( -\nD      MEDIA2(100) -\nD      MEDIA6(200) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe ALTER LIBRARYENTRY parameters are:\nN--------------------------------------\nN-> ATLLIB1: is the name of the entry being altered.\nN\nN-> LIBRARYENTRY: alters a tape library entry.\nN\nN-> NUMBEREMPTYSLOTS: sets the number of empty slots to 2574.\nN\nN-> NUMBERSCRATCHVOLUMES: sets the current number of scratch volumes\nN   available.\nN\nN   -> MEDIA2: to 400.\nN\nN   -> MEDIA6: to 500.\nN\nN-> SCRATCHTHRESHOLD: sets the threshold number of scratch volumes.\nN\nN   -> MEDIA2: to 100.\nN\nN   -> MEDIA6: to 200.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0612": {"ttr": 4869, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0612\nTDFSMS AMS\nT-Chapter 6.\nT-Example 2: Altering a LIBRARY Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094208\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNNChapter 6. ALTER LIBRARYENTRY\nN------------------------------\nNExample 2: Altering a LIBRARY Entry\nN-----------------------------------\nD//ALTER2   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  ALTER -\nD    ATLLIB1 -\nD    LIBRARYENTRY -\nD    NUMBEREMPTYSLOTS(2574) -\nD    NUMBERSCRATCHVOLUMES(MEDIA3(1272)) -\nD    SCRATCHTHRESHOLD(MEDIA3(125))\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe LIBRARYENTRY parameters are:\nN--------------------------------\nN-> ATLLIB1: specifies the name of the entry being altered.\nN\nN-> LIBRARYENTRY: indicates that a LIBRARY entry is being altered.\nN\nN-> NUMBEREMPTYSLOTS: specifies that the number of empty slots available\nN   be set to 2574.\nN\nN-> NUMBERSCRATCHVOLUMES: specifies that the current number of scratch\nN   volumes available.\nN\nN   -> MEDIA3: be set to 1272.\nN\nN-> SCRATCHTHRESHOLD: specifies that the threshold number of scratch\nN   volumes.\nN\nN   -> MEDIA3: be set to 125.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC07": {"ttr": 4871, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC07\nTDFSMS AMS\nT-Chapter 7. ALTER VOLUMEENTRY\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 7. ALTER VOLUMEENTRY\nN----------------------------\nNThe ALTER VOLUMEENTRY command modifies the attributes of an existing\nNtape volume entry. Use this command only to recover from tape volume\nNcatalog errors.\nN\nNBecause access method services cannot change the library manager\nNinventory in an automated tape library, Interactive Storage Management\nNFacility (ISMF) should be used for normal tape library alter functions.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0701": {"ttr": 5121, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0701\nTDFSMS AMS\nT-Chapter 7.\nT-Syntax for ALTER VOLUMEENTRY Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 7. ALTER VOLUMEENTRY\nN----------------------------\nNSyntax for ALTER VOLUMEENTRY Parameters\nN---------------------------------------\nD  ALTER -\nN\nNRequired parameters\nN-------------------\nD    (entryname) -\nI      Names the tape volume entry being altered. This name consists of\nI      a V concatenated with the 1-to-6 character volser. Search\nI      \"Tape Volume Names\" for tape volume volser naming conventions.\nN\nD    VOLUMEENTRY /* Abbreviation: VOLENTRY or VOLENT */ -\nI      Alters a tape volume entry. To alter a tape volume entry, you\nI      must have access to RACF FACILITY class profile\nI      STGADMIN.IGG.LIBRARY.\nN\nNOptional parameters\nN-------------------\nD    CHECKPOINT | NOCHECKPOINT -\nI      Checks whether the tape volume is a secure checkpoint volume.\nI      If you do not use this, the checkpoint status is unknown.\nN\nI      CHECKPOINT /* Abbreviation: CHKPT */: Indicates that the tape\nI        volume is a secure checkpoint volume.\nN\nI      NOCHECKPOINT /* Abbreviation: NOCHKPT */: Indicates that the\nI        volume is not a secure checkpoint volume.\nN\nD    COMPACTION( /* Abbreviation: COMP */ -\nD     YES | IDRC | NO | NONE | UNKNOWN -\nD    ) -\nI      Identifies whether the data on the volume is compacted. The YES\nI      and IDRC parameter variables are synonymous. The NO and NONE\nI      parameter variables are synonymous. Use this parameter only for\nI      private tape volumes. If you use it for scratch tape volumes, a\nI      default of NONE is forced.\nN\nI      YES: Specifies that data is compacted in the manner appropriate\nI        for the type of media.\nN\nI      IDRC: Specifies that improved data recording capability (IDRC)\nI        compaction was used.\nN\nI      NO: Specifies that no compaction was used.\nN\nI      NONE: Specifies that no compaction was used.\nN\nI      UNKNOWN: Specifies that it is unknown if compaction was used.\nN\nD    ENTEREJECTDATE(eedate) /* Abbreviation: EEDATE */ -\nI      Identifies the date that a tape volume was last ejected from a\nI      tape library or last entered into a tape library.\nN\nI      eedate: The date, as YYYY-MM-DD. Search \"Tape Library Date\nI         Formats\" for valid dates.\nI        The default is blank.\nN\nD    EXPIRATIONDATE(expdate) /* Abbreviation: EXDATE */ -\nI      Identifies the date on which the tape volume expires. If there\nI      is more than one data set on the volume, the expiration date is\nI      the latest expiration date among the data sets on the volume.\nN\nI      expdate: Enter a date as YYYY-MM-DD. The expiration date is set\nI        to blanks when the USEATTRIBUTE is SCRATCH.\nN\nD    LIBRARYNAME(libname) /* Abbreviation: LIBNAME */ -\nI      Identifies the name of the tape library in which this tape\nI      volume resides. If you use this parameter, the parameter\nI      LOCATION must equal LIBRARY. If LOCATION equals SHELF, the\nI      library name is set to SHELF.\nN\nI      libname: A 1-to-8 character library name.\nN\nD    LOCATION( /* Abbreviation: LOC */ -\nD     LIBRARY | SHELF -\nD    ) -\nI      Specifies either that the tape volume resides in a tape library\nI      or that it resides on a shelf outside the tape library.\nN\nI      -> If you use LIBRARY, you must also use the LIBRARYNAME\nI         parameter.\nI      -> If you use SHELF, the library name defaults to SHELF.\nN\nD    MEDIATYPE( /* Abbreviation: MTYPE */ -\nD     MEDIA1 | MEDIA2 | MEDIA3 | MEDIA4 | MEDIA5 | MEDIA6 | -\nD     MEDIA7 | MEDIA8 | MEDIA9 | MEDIA10 -\nD    ) -\nI      Identifies the media type of the tape volume. mediatype specifies\nI      one of the following:\nN\nI      MEDIA1: Specifies that the tape volume is Cartridge System Tape.\nN\nI      MEDIA2: Specifies that the tape volume is Enhanced Capacity\nI        System Tape. You cannot use this parameter when\nI        SPECIALATTRIBUTE is READCOMPATIBLE, or RECORDING is set to\nI        18TRACK.\nI        MEDIATYPE defaults to MEDIA2.\nN\nI      MEDIA3: Specifies that the tape volume is High Performance\nI        Cartridge Tape.\nN\nI      MEDIA4: Specifies that the tape volume is IBM Extended High\nI        Performance Cartridge Tape.\nN\nI      MEDIA5: Specifies that the volume is IBM TotalStorage Enterprise\nI        Tape Cartridge.\nN\nI      MEDIA6: Specifies that the volume is IBM TotalStorage Enterprise\nI        WORM Tape Cartridge.\nN\nI      MEDIA7: Specifies that the volume is IBM TotalStorage Enterprise\nI        Economy Tape Cartridge.\nN\nI      MEDIA8: Specifies that the volume is IBM TotalStorage Enterprise\nI        Economy WORM Tape Cartridge.\nN\nI      MEDIA9: Specifies that the volume is IBM TotalStorage Enterprise\nI        Economy Tape Cartridge.\nN\nI      MEDIA10: Specifies that the volume is IBM TotalStorage Enterprise\nI        Economy WORM Tape Cartridge.\nN\nD    MOUNTDATE(mountdate) /* Abbreviation: MDATE */ -\nI      The date on which the tape volume was last mounted onto a tape\nI      drive and successfully opened.\nN\nI      mountdate: The date, YYYY-MM-DD. Search \"Tape Library Date\nI        Formats\" for a description of valid date values.\nI        The default is blank.\nN\nD    NULLIFY(ERRORSTATUS) -\nI      Gives the fields to be nullified.\nN\nI      ERRORSTATUS /* Abbreviation: ERRSTAT */: If you use this, the\nI        error status is set to 0.\nN\nD    OWNERINFORMATION(ownerinfo) /* Abbreviation: OWNINFO */ -\nI      Provides information about the tape volume's owner.\nN\nI      ownerinfo: A 1-to-64 character owner information field. If you\nI        use commas, semicolons, embedded blanks, parentheses, or\nI        slashes, enclose the entire description in apostrophes.\nI        The default is blanks.\nN\nD    RECORDING( /* Abbreviation: REC */ -\nD     18TRACK | 36TRACK | 128TRACK | 256TRACK | 384TRACK | -\nD     EFMT1 | EFMT2 | EFMT3 | EEFMT3 | UNKNOWN -\nD    ) -\nI      Identifies the recording technique for creating the tape. This\nI      parameter can only be used for private tape volumes. Scratch tape\nI      volumes default to UNKNOWN.\nN\nI      18TRACK: Tape was written and must be read on an 18-track device.\nN\nI      36TRACK: Tape was written and must be read on a 36-track device.\nN\nI      128TRACK: Tape was written and must be read on a 128-track\nI        device.\nN\nI      256TRACK: Tape was written and must be read on a 256-track\nI        device. This parameter is valid only when MEDIATYPE(MEDIA3) or\nI        MEDIATYPE(MEDIA4) is specified.\nN\nI      384TRACK: Tape was written and must be read on a 384-track\nI        device. This parameter is valid only when MEDIATYPE(MEDIA3)\nI        or MEDIATYPE(MEDIA4) is specified.\nN\nI      EFMT1: Tape was written and must be read on an EFMT1 (enterprise\nI        format 1) device.\nN\nI        Note: EFMT1 is valid with MEDIATYPE(MEDIA5), (MEDIA6),\nI        (MEDIA7), and (MEDIA8) only.\nN\nI      EFMT2: Tape was written and must be read on an EFMT2 (enterprise\nI        format 2) device.\nN\nI        Note: EFMT2 is valid with MEDIATYPE(MEDIA9) and (MEDIA10) only.\nN\nI      EFMT3: Tape was written and must be read on an EFMT3 (enterprise\nI        format 3) device.\nN\nI        Note: EFMT3 is valid with MEDIATYPE(MEDIA5), (MEDIA6),\nI        (MEDIA7), (MEDIA8), (MEDIA9) and (MEDIA10) only.\nN\nI      EEFMT3: Tape was written and must be read on an EEFMT3 (encrypted\nI        enterprise format 3) device.\nN\nI        Note: EEFMT3 is valid with MEDIATYPE(MEDIA5), (MEDIA6),\nI        (MEDIA7), (MEDIA8), (MEDIA9) and (MEDIA10) only.\nN\nI      UNKNOWN :Tape recording technique is unknown.\nN\nD    SHELFLOCATION(shelf) /* Abbreviation: SHELFLOC */ -\nI      Gives the shelf location for a tape volume that resides outside\nI      a tape library. This parameter can be included for a library\nI      resident volume.\nN\nI      shelf: The 1-to-32 character shelf location information field.\nI        If your description contains commas, semicolons, embedded\nI        blanks, parentheses, or slashes, enclose the entire description\nI        in apostrophes.\nI        The default is blank.\nN\nD    SPECIALATTRIBUTE( /* Abbreviation: SATTR */ -\nD     READCOMPATIBLE | NONE -\nD    ) -\nI      Shows special attributes of the tape volume. Use this parameter\nI      only for private tape volumes. Scratch tape volumes default to\nI      NONE.\nN\nI      READCOMPATIBLE /* Abbreviation: RDCOMPAT */: On subsequent\nI        allocations, read compatible devices for allocation of this\nI        tape volume are used.\nN\nI      NONE: There are no special tape attributes.\nN\nD    STORAGEGROUP(groupname) /* Abbreviation: STORGRP */ -\nI      Identifies the storage group name.\nN\nI      groupname: The 1-to-8 character name of the storage group in\nI        which this tape volume is defined. The default is blanks. If\nI        the USEATTRIBUTE parameter is SCRATCH, however, the storage\nI        group name defaults to *SCRTCH*.\nN\nD    USEATTRIBUTE( /* Abbreviation: UATTR */ -\nD     SCRATCH | PRIVATE -\nD    ) -\nI      Identifies the use attribute of a tape volume. You can use\nI      SCRATCH for scratch volumes, or PRIVATE for private volumes\nI      (tape volumes with unexpired data sets on them). The default is\nI      PRIVATE. If you use SCRATCH, the storage group name is set to\nI      *SCRTCH* and the expiration date is set to blanks.\nN\nD    WRITEDATE(wrtdate) /* Abbreviation: WDATE */ -\nI      Identifies the last date that a data set on the tape volume was\nI      opened for writing.\nN\nI      wrtdate: A date, YYYY-MM-DD. The default is blank.\nN\nD    WRITEPROTECT | NOWRITEPROTECT /* Abbreviations: WPRT and NWPRT */\nI      Identifies whether the tape volume is write-protected or not. If\nI      you do not use this, write-protect status is unknown.\nN\nI      WRITEPROTECT: Indicates that the volume is write-protected.\nN\nI        Setting WRITEPROTECT in the tape volume entry does not\nI        automatically write protect your volume. It is an informational\nI        setting that is recorded when software detects that the volume\nI        is write protected and is not used by software when determining\nI        whether the volume is protected. For a volume to be write\nI        protected, you will still need to set the write protect tab\nI        available on the physical tape volume. Because the availability\nI        to write protect a volume does not exist for logical volumes\nI        in a VTS, (no tab available either physically or logically),\nI        you can alternately use RACF or PROTECT=ALL in your JCL to\nI        protect the volume during usage.\nN\nI      NOWRITEPROTECT: Indicates that the volume is not write-protected.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC0711": {"ttr": 5123, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0711\nTDFSMS AMS\nT-Chapter 7.\nT-NExample 1: Altering a Volume Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094236\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 7. ALTER VOLUMEENTRY\nN----------------------------\nNNExample 1: Altering a Volume Entry\nN-----------------------------------\nD//ALTER1   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  ALTER -\nD    VAL0001 -\nD    VOLUMEENTRY -\nD    EXPIRATIONDATE(2020-12-31) -\nD    LIBRARYNAME(ATLLIB1) -\nD    LOCATION(LIBRARY) -\nD    USEATTRIBUTE(SCRATCH)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe VOLUMEENTRY parameters are:\nN-------------------------------\nN-> VAL0001: Specifies the name of the tape volume entry being altered.\nN    he volume's volser is AL0001.\nN\nN-> VOLUMEENTRY: Indicates that an entry describing a single tape\nN   volume (that is a cartridge) in a tape library is being altered.\nN\nN-> EXPIRATIONDATE: Specifies an expiration date of 2020-12-31. On that\nN   date the data set on the tape volume will expire; however, because\nN   USEATTRIBUTE is specified as SCRATCH, the expiration date is set\nN   to blanks.\nN\nN-> LIBRARYNAME: Specifies that this tape volume record is associated\nN   with a tape library named ATLLIB1.\nN\nN-> LOCATION: Specifies that the tape volume will now reside in a tape\nN   library slot.\nN\nN-> USEATTRIBUTE: Specifies that the tape volume is a scratch volume.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0712": {"ttr": 5125, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0712\nTDFSMS AMS\nT-Chapter 7.\nT-NExample 2: Altering a Volume Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094331\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 7. ALTER VOLUMEENTRY\nN----------------------------\nNNExample 2: Altering a Volume Entry\nN-----------------------------------\nD//ALTER2   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  ALTER -\nD    VAL0001 -\nD    VOLUMEENTRY -\nD    LIBRARYNAME(ATLLIB1) -\nD    MEDIATYPE(MEDIA5) -\nD    RECORDING(EFMT1) -\nD    USEATTRIBUTE(SCRATCH)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe VOLUMEENTRY parameters are:\nN-------------------------------\nN-> VAL0001: Specifies the name of the tape volume entry being altered.\nN   The volume's volser is AL0001.\nN\nN-> VOLUMEENTRY: Indicates that an entry describing a single tape\nN   volume (that is a cartridge) in a tape library is being altered.\nN\nN-> LIBRARYNAME: Specifies that this tape volume record is associated\nN   with a tape library named ATLLIB1.\nN\nN-> MEDIATYPE: Specifies the media type of MEDIA5.\nN\nN-> RECORDING: Specifies the recording technology as EFMT1.\nN\nN-> USEATTRIBUTE: Specifies that the tape volume is a scratch volume.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0713": {"ttr": 5127, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0713\nTDFSMS AMS\nT-Chapter 7.\nT-NExample 3: Altering a Volume Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094342\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 7. ALTER VOLUMEENTRY\nN----------------------------\nNNExample 3: Altering a Volume Entry\nN-----------------------------------\nD//ALTER3   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  ALTER -\nD    VOLUMEENTRY(V0A2991) -\nD    LIBRARYNAME(ATLIB02) -\nD    MEDIATYPE(MEDIA6) -\nD    RECORDING(EFMT1) -\nD    USEATTRIBUTE(SCRATCH)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe VOLUMEENTRY parameters are:\nN-------------------------------\nN-> VOLUMEENTRY(V0A2991): indicates that an entry that describes a\nN   single  volume in a library is being altered.\nN\nN   -> V0A2991: specifies that the name of the volume being altered is\nN      V0A2991 and that the volser is 0A2991.\nN\nN-> LIBRARYNAME: Specifies that this tape volume record is associated\nN   with a tape library named ATLIB02.\nN\nN-> MEDIATYPE: Specifies the media type of MEDIA6.\nN\nN-> RECORDING: Specifies the recording technology as EFMT1.\nN\nN-> USEATTRIBUTE: Specifies that the tape volume is a scratch volume.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC08": {"ttr": 5129, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC08\nTDFSMS AMS\nT-Chapter 8. BLDINDEX\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 8. BLDINDEX\nN-------------------\nNThe BLDINDEX command builds alternate indexes for existing data sets.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0801": {"ttr": 5377, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0801\nTDFSMS AMS\nT-Chapter 8.\nT-Syntax for BLDINDEX Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 8. BLDINDEX\nN-------------------\nNSyntax for BLDINDEX Parameters\nN------------------------------\nD  BLDINDEX -\nN\nNRequired parameters\nN-------------------\nD    INFILE(ddname) | /* Abbreviation: IFILE */ -\nD    INDATASET(entryname) /* Abbreviation: IDS */ -\nI      names the DD statement or data set that identifies the base\nI      cluster or a path that points to the base cluster.\nN\nI      INFILE(ddname) /* Abbreviation: IFILE */: is the DD statement\nI        that identifies the base cluster or a path that points to the\nI        base cluster. You must define the base cluster in the same\nI        catalog as the alternate index, and it must contain at least\nI        one data record.\nN\nI      INDATASET(entryname) /* Abbreviation: IDS */: names the data set\nI        that identifies the base cluster or a path that points to the\nI        base cluster. You must define the base cluster in the same\nI        catalog as the alternate index, and it must contain at least\nI        one data record. When you use INDATASET to dynamically\nI        allocate the base-cluster volume, make sure the base-cluster\nI        volume is mounted as permanently resident or reserved.\nN\nD    OUTFILE(ddname ddname) | /* Abbreviation: OFILE */ -\nD    OUTDATASET(entryname entryname) /* Abbreviation: ODS */ -\nI      names the DD statement or data set that identifies the alternate\nI      index or a path that points to the alternate index. If the data\nI      set has previously been deleted and redefined in this same\nI      invocation of IDCAMS and the FILE parameter was specified on the\nI      delete, you must specify the OUTDATASET keyword instead of\nI      OUTFILE to avoid picking up incorrect volume information from the\nI      original DD statement. Alternately, you may issue the BLDINDEX\nI      in a different step than the step that did the delete and define.\nI      You can build more than one alternate index for the same base\nI      cluster by using more than one ddname or data set name with the\nI      OUTFILE or OUTDATASET parameter.\nN\nI      OUTFILE(ddname ddname...) /* Abbreviation: OFILE */: indicates\nI        the DD statement that identifies the alternate index, or a\nI        path that points to the alternate index. You must define the\nI        alternate index in the same catalog as the base cluster, and\nI        it must be empty (that is, its high-used relative byte address\nI        equals zero) or defined with the REUSE attribute.\nN\nI        The alternate index must be related to the base cluster\nI        identified with INDATASET or INFILE.\nN\nI      OUTDATASET(entryname entryname...) /* Abbreviation: ODS */:\nI        specifies the data set that identifies the alternate index or\nI        a path that points to the alternate index. When you define the\nI        alternate index in the same catalog as the base cluster, it\nI        must be empty (that is, its high-used RBA equals zero) or must\nI        be defined with the REUSE attribute.\nN\nI        The alternate index must be related to the base cluster\nI        identified with INDATASET or INFILE.\nN\nI        When you use OUTDATASET, to dynamically allocate the alternate\nI        index's volume, make sure the volume is mounted as permanently\nI        resident or reserved.\nN\nNOptional parameters\nN-------------------\nD    EXTERNALSORT | INTERNALSORT -\nI      decides whether the key-pointer pairs are to be sorted entirely\nI      within virtual storage.\nN\nI      EXTERNALSORT /* Abbreviation: ESORT */: specifies that two\nI        external-sort work files are defined and built as\nI        entry-sequenced clusters. You must provide two DD statements\nI        that describe the external-sort work files to be defined by\nI        BLDINDEX. You can name the DD statements IDCUT1 and IDCUT2.\nI        When you choose other names for the work file DD statements,\nI        you must identify those DD statements with the WORKFILES\nI        parameter.\nN\nI      INTERNALSORT /* Abbreviation: ISORT*/: requires access method\nI        services to sort the key-pointer pairs entirely within the\nI        user-provided virtual storage, if possible. If you do not\nI        have enough virtual storage available when you use\nI        INTERNALSORT, two external-sort work files are built and the\nI        key-pointer pairs are sorted externally. You must provide DD\nI        statements as for EXTERNALSORT. If the minimum amount of\nI        virtual storage is not provided the BLDINDEX processing ends\nI        with an error message. See z/OS DFSMS Using Data Sets for\nI        more information about alternate indexes.\nN\nD    SORTCALL | NOSORTCALL -\nI      use this parameter to choose whether or not to call DFSORT to\nI      sort the alternate index.\nN\nI      SORTCALL: specifies that you want DFSORT to sort the alternate\nI        index. EXTERNALSORT, INTERNALSORT, WORKFILES, CATALOG, IDCUT1,\nI        and IDCUT2 are ignored when DFSORT is called. If DFSORT is not\nI        available, BLDINDEX uses the IDCAMS internal sort.\nI        SORTCALL is the default.\nN\nI      NOSORTCALL: tells BLDINDEX to use the IDCAMS internal sort (or\nI        external sort if specified) instead of DFSORT to sort the\nI        alternate index. When the IDCAMS internal or external sort is\nI        used, SORTMESSAGELEVEL, SORTDEVICETYPE, SORTMESSAGEDD and\nI        SORTFILENUMBER specifications are prohibited.\nN\nD    SORTDEVICETYPE(device type) /* Abbreviations: SORTDVT SDVT */ -\nI      specifies the DASD device type passed to DFSORT in the DYNALLOC\nI      parameter in the OPTION control statement. Use this parameter\nI      only if you wish to override the default device type for DFSORT\nI      work data sets. See z/OS DFSORT Application Programming Guide\nI      for further details on the DYNALLOC parameter. This parameter is\nI      not allowed if you use NOSORTCALL.\nN\nD    SORTFILENUMBER(number) /* Abbreviations: SORTFN | SFN */ -\nI      Specifies the maximum number of work data sets passed to DFSORT\nI      in the DYNALLOC parameter in the OPTION control statement. Use\nI      this parameter to override the number of work data sets that\nI      BLDINDEX determines are needed. See z/OS DFSORT Application\nI      Programming Guide for further details on the DYNALLOC parameter.\nI      This parameter is not allowed if you use NOSORTCALL.\nN\nD    SORTMESSAGEDD(ddname) /* Abbreviations: SORTMDD | SMDD */ -\nI      Specifies the ddname that describes the DFSORT message data set.\nI      If there is no DD statement for this ddname, a message data set\nI      with this ddname is allocated dynamically as a SYSOUT=* data set.\nI      SYSOUT is the default for ddname. Do not use any ddname reserved\nI      for use by IDCAMS (SYSPRINT or SYSIN) or DFSORT. See z/OS DFSORT\nI      Application Programming Guide for a list of reserved ddnames.\nI      This parameter is not allowed if you use NOSORTCALL or\nI      SORTMESSAGELEVEL (NONE).\nN\nD    SORTMESSAGELEVEL( /* Abbreviations: SORTML | SML */ -\nD     ALL | CRITICAL | NONE -\nD    ) -\nI      Specifies the level of DFSORT messages to print to the DFSORT\nI      message data set. You cannot use this parameter with NOSORTCALL.\nN\nI      ALL: Requires that all DFSORT messages and control statements\nI        are printed tothe message data set.\nN\nI      CRITICAL: Allows only critical DFSORT messages to print to the\nI        message data set. No DFSORT control statements are printed.\nI        Critical is the default.\nN\nI      NONE: Allows no DFSORT messages or control statements to print\nI        to the message data set.\nN\nD    WORKFILES(ddname ddname...) /* Abbreviation: WFILE */ /* - */\nI      Specifies the DD statements that describe the name and placement\nI      of the work files you want BLDINDEX to define if you require an\nI      external sort of the key-pointer pairs. See the CATALOG parameter\nI      for further description of where the work files are defined. You\nI      can use DD statements to describe two work files that are defined\nI      and opened before the BLDINDEX routine begins processing the\nI      base-cluster's data records.\nN\nI      Exception: Do not use tape data sets as work data sets.\nN\nI      If one of the data sets is SMS-managed, the other must either be\nI      SMS-managed or a non-SMS-managed data set cataloged in the\nI      catalog determined by the catalog search order.\nN\nI      When you code the DD statements that describe the work files and\nI      identify them with the standard ddnames IDCUT1 and IDCUT2, you do\nI      not need to use the WORKFILES parameter.\nN\nM    CATALOG(catname) /* Abbreviation: CAT */\nI      names the catalog in which the work files are to be defined. The\nI      work files are defined and used by the BLDINDEX routine. When all\nI      alternate indexes are built and the BLDINDEX routine no longer\nI      needs the work files, they are deleted. Search \"Catalog Selection\nI      Order for BLDINDEX\" for more information.\nN\nI      To use catalog names for SMS-managed data sets, you must have\nI      access to the RACF STGADMIN.IGG.DIRCAT FACILITY class. Search\nI      \"Storage Management Subsystem (SMS) Considerations\" for more\nI      information.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC0802": {"ttr": 5379, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0802\nTDFSMS AMS\nT-Chapter 8.\nT-Calculating Virtual Storage Space for an Alternate Index\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 8. BLDINDEX\nN-------------------\nNCalculating Virtual Storage Space for an Alternate Index\nN--------------------------------------------------------\nN3. The key-pointer pairs are sorted in ascending alternate key order.\nNIf your program provides enough virtual storage, access method services\nNdoes an internal sort. (The sorting of key-pointer pairs takes place\nNentirely within virtual storage.)\nN\nNUse the following process to determine the amount of virtual storage\nNrequired to sort the records internally:\nN\nN  a. Sort record length = alternate key length + (prime key length (\nN     for a key-sequenced data set) or 4 (for an entry-sequenced data\nN     set)).\nN\nN  b. Record sort area size = either the sort record length times the\nN     number of records in the base cluster rounded up to the next\nN     integer multiple of 2048 (the next 2K boundary), or a minimum of\nN     32768, whichever is greater.\nN\nN  c. Sort table size = (record sort area size/sort record length) x 4.\nN\nN  d. The sum of b + c = required amount of virtual storage for an\nN     internal sort. (The amount for an internal sort is in addition\nN     to the normal storage requirements for processing an access method\nN     services command.)\nN\nNIf you do not provide enough virtual storage for an internal sort, or\nNif you specify the EXTERNALSORT parameter, access method services\nNdefines and uses two sort work files and sorts the key-pointer pairs\nNexternally. Access method services uses the sort work files to contain\nNmost of the key-pointer pairs while it sorts some of them in virtual\nNstorage. An external sort work file is a VSAM entry-sequenced cluster,\nNmarked reusable. The minimum amount of virtual storage you need for an\nNexternal sort is:\nN\nN -> 32768 + ((32768/sort record length) x 4)\nN\nNThe amount of space that access method services requests when defining\nNeach sort work file is calculated as follows:\nN\nN  a. Sort records per block = 2041/sort record length\nN\nN  b. Primary space allocation in records = (number of records in base\nN     cluster/sort records per block) + 10\nN\nN  c. Secondary space allocation in records = (primary space allocation\nN     x 0.10) + 10\nN\nNBoth primary and secondary space allocation are requested in records\nNwith a fixed-length record size of 2041 bytes. The control interval\nNsize is 2048 bytes.\nN\nNThere must be enough space on a single DASD volume to satisfy the\nNprimary allocation request; if there is not, the request fails. To\nNcorrect the problem, specify the volume serial of a device that has\nNsufficient space (see \"DD Statements That Describe the Sort Work\nNFiles\").\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC0803": {"ttr": 5381, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0803\nTDFSMS AMS\nT-Chapter 8.\nT-DD Statements That Describe the Sort Work Files\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 8. BLDINDEX\nN-------------------\nNDD Statements That Describe the Sort Work Files\nN-----------------------------------------------\nNVSAM data set space available for the sort routine can be identified by\nNspecifying two ddnames with the WORKFILES parameter and supplying two\nNDD statements that describe the work files to be defined. Each work\nNfile DD statement should be coded:\nN\nN//ddname    DD DISP=OLD,DSNAME=dsname,\nN//             UNIT=devtype,VOL=SER=volser,AMP='AMORG'\nN\nN\nNException: WORKFILES is ignored when DFSORT is available to do the\nNsorting of the alternate index and you have not overridden the default\nNby specifying NOSORTCALL.\nN\nI  ddname: as specified in the WORKFILES parameter. If you do not\nN    specify the WORKFILES parameter and you intend to provide VSAM\nN    data set space for external sort work files, identify the work\nN    file DD statements with the names IDCUT1 and IDCUT2.\nN\nI  DISP=OLD: Required.\nN\nI  dsname: Specifies the name for this ddname.\nN\nI  UNIT=devtype: type of direct access device on which the volume is\nN    mounted. You can specify a generic device type (for example, 3380)\nN    or a device number (for example 121). You cannot specify SYSDA.\nN\nM    Follow your installation's standards.\nN\nI  volser: Follow your installation's standards.\nN\nI  AMP='AMORG': Required.\nN\nNIf BLDINDEX is used interactively in a TSO environment, these sort\nNwork file DD statements must be in the logon procedure.\nN\nMThey do not need to be in the logon procedure! They just need to be\nMallocated before BLDINDEX is invoked.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0811": {"ttr": 5383, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0811\nTDFSMS AMS\nT-Chapter 8.\nT-Example 1: Build an Alternate-Index over a Key-Sequenced Data Set\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094454\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 8. BLDINDEX\nN-------------------\nNExample 1: Build an Alternate-Index over a Key-Sequenced Data Set\nN-----------------------------------------------------------------\nD//BLDINDEX JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  BLDINDEX -\nD    INFILE(BASEDD) -\nD    OUTFILE(AIXDD) -\nD    NOSORTCALL\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//BASEDD    DD DISP=OLD,DSNAME=EXAMPLE.KSDS2\nD//AIXDD     DD DISP=OLD,DSNAME=EXAMPLE.AIX\nD//IDCUT1    DD DISP=OLD,DSNAME=SORT.WORK.ONE,\nD//             UNIT=DISK,VOL=SER=VSER01,AMP='AMORG'\nD//IDCUT2    DD DISP=OLD,DSNAME=SORT.WORK.TWO,\nD//             UNIT=DISK,VOL=SER=VSER01,AMP='AMORG'\nN\nNThe JCL statements are:\nN-----------------------\nN-> BASEDD DD: describes the base cluster.\nN\nN-> AIXDD DD: describes the alternate index.\nN\nN-> IDCUT1 and IDCUT2 DD: describe volumes available as sort work data\nN   sets if an external sort is done. They are not used by BLDINDEX if\nN   enough virtual storage is available for an internal sort. If there\nN   are multiple volumes, a maximum of five volumes for each work file\nN   can be specified.\nN\nNThe BLDINDEX command builds an alternate index. If there is not enough\nNvirtual storage for an internal sort, DD statements with the default\nNddnames of IDCUT1 and IDCUT2 are given for two external-sort work data\nNsets.\nN\nNThe BLDINDEX parameters are:\nN----------------------------\nN-> INFILE: names the base cluster. The ddname of the DD statement for\nN   this object must be identical to this name.\nN\nN-> OUTFILE: names the alternate index. The ddname of the DD statement\nN   for this object must be identical to this name.\nN\nN-> NOSORTCALL: tells BLDINDEX to use the IDCAMS internal sort (or\nN   external sort if specified) instead of DFSORT to sort the alternate\nN   index.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0812": {"ttr": 5385, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0812\nTDFSMS AMS\nT-Chapter 8.\nT-Example 2: Build an Alternate-Index over a KSDS Using DFSORT\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094509\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 8. BLDINDEX\nN-------------------\nNExample 2: Build an Alternate-Index over a KSDS Using DFSORT\nN------------------------------------------------------------\nD//BLDINDEX JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  BLDINDEX -\nD    INFILE(BASEDD) -\nD    OUTFILE(AIXDD) -\nD    SORTCALL -\nD    SORTMESSAGELEVEL(ALL)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//BASEDD    DD DISP=OLD,DSNAME=EXAMPLE.KSDS2\nD//AIXDD     DD DISP=OLD,DSNAME=EXAMPLE.AIX\nN\nNThe JCL statements are:\nN-----------------------\nN-> BASEDD DD: describes the base cluster.\nN\nN-> AIXDD DD: describes the alternate index.\nN\nNThe BLDINDEX command builds an alternate index. BLDINDEX calls DFSORT\nNto sort the alternate index records. If DFSORT is not available,\nNBLDINDEX uses its own sort routines.\nN\nNThe BLDINDEX parameters are:\nN----------------------------\nN-> INFILE: names the base cluster. The ddname of the DD statement for\nN   this object must be identical to this name.\nN\nN-> OUTFILE: names the alternate index. The ddname of the DD statement\nN   for this object must be identical to this name.\nN\nN-> SORTCALL: tells BLDINDEX to call DFSORT to sort the alternate index\nN   records. This parameter is the default.\nN\nN-> SORTMESSAGELEVEL(ALL): requires that all DFSORT messages and control\nN   statements are returned in the DFSORT message data set.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC09": {"ttr": 5387, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC09\nTDFSMS AMS\nT-Chapter 9. CREATE LIBRARYENTRY\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 9. CREATE LIBRARYENTRY\nN------------------------------\nNThe CREATE LIBRARYENTRY command creates a tape library entry. Use it\nNonly to recover from tape volume catalog errors.\nN\nNBecause access method services cannot change the library manager\nNinventory in an automated tape library, ISMF should be used for normal\nNtape library create functions.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0901": {"ttr": 5633, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0901\nTDFSMS AMS\nT-Chapter 9.\nT-Syntax for CREATE LIBRARYENTRY Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 9. CREATE LIBRARYENTRY\nN------------------------------\nNSyntax for CREATE LIBRARYENTRY Parameters\nN-----------------------------------------\nD  CREATE -\nN\nNRequired parameters\nN-------------------\nD    LIBRARYENTRY( /* Abbreviation: LIBENTRY or LIBENT */ -\nI      is the name of the tape library entry being created. To create a\nI      library entry, you must have authorization to RACF FACILITY class\nI      profile STGADMIN.IGG.LIBRARY.\nN\nD      NAME(entryname) -\nI        is the name of the tape library entry being created.\nN\nI        entryname: Consists of a 1-to-8 character tape library name.\nI          The characters can include alphanumerics, $, @, and #. The\nI          first  character cannot be numeric.\nN\nI          To avoid conflicts with volume names, library names cannot\nI          begin with the letter V.\nN\nD      LIBRARYID(libid) /* Abbreviation: LIBID */ -\nI        this number connects the software-assigned tape library name\nI        and the actual tape library hardware.\nN\nI        libid: is a 5-digit hexadecimal tape library serial number.\nN\nNOptional parameters\nN-------------------\nD      CONSOLENAME(consolename) /* Abbreviation: CONSOLE */ -\nI        Identifies the name of the console that will receive tape\nI        library related messages.\nN\nI        consolename: Specifies a 2-to-8 character console name starting\nI          with an alphabetic character.\nN\nD      DESCRIPTION(desc) /* Abbreviation: DESC */ -\nI        Is a description for the tape library entry being altered.\nN\nI        desc: Lets you include a 1-to-120 character tape library\nI          description. If the description contains commas, semicolons,\nI          embedded blanks, parentheses, or slashes, the entire\nI          description must be enclosed in single quotation marks. The\nI          default for this parameter is blanks.\nN\nD      LIBDEVTYPE(devtype) /* Abbreviation: LDEVT */ -\nI        Identifies the tape library device type.\nN\nI        devtype: Is an 8-character hardware device type. If you do not\nI          use this, LIBDEVTYPE is not established.\nN\nD      LIBRARYID(libid) /* Abbreviation: LIBID */ -\nI        Establishes the connection between the software-assigned tape\nI        library name and the actual tape library hardware.\nN\nI        libid: Is a 5-digit hexadecimal tape library serial number.\nN\nD      LOGICALTYPE(AUTOMATED | MANUAL) /* Abbreviation: LOGTYP */ -\nI        Identifies the type of tape library being created. If you do\nI        not use this parameter, LOGICALTYPE is not established.\nN\nI        AUTOMATED: Indicates an automated tape library.\nN\nI        MANUAL: Is a manual tape library.\nN\nD      NUMBEREMPTYSLOTS(numslots) /* Abbreviation: NUMESLT */ -\nI        Identifies the total number of empty slots in the given tape\nI        library. You can use it only when LOGICALTYPE is AUTOMATED.\nN\nI        numslots: Is the number of tape cartridges you can add to the\nI          tape library. Use a number from 0 to 999999.\nI          The default is 0.\nN\nD      NUMBERSCRATCHVOLUMES( /* Abbreviation: NUMSCRV */ -\nD         MEDIA1(num) MEDIA2(num) -\nD         MEDIA3(num) MEDIA4(num) MEDIA5(num) MEDIA6(num) -\nD         MEDIA7(num) MEDIA8(num) MEDIA9(num) MEDIA10(num) -\nD       ) -\nI        Identifies the total number of MEDIA1, MEDIA2, MEDIA3, MEDIA4,\nI        MEDIA5, MEDIA6, MEDIA7, MEDIA8, MEDIA9, and MEDIA10 scratch\nI        volumes currently available in the given tape library.\nN\nI        MEDIA1(num): Specifies the number of Cartridge System Tape\nI          scratch volumes available. Use a number from 0 to 999999.\nI          The default is 0.\nN\nI        MEDIA2(num): Specifies the number of Enhanced Capacity\nI          Cartridge  System Tape scratch volumes available. Use a\nI          number from 0  to 999999.\nI          The default is 0.\nN\nI        MEDIA3(num): Specifies the number of High Performance Cartridge\nI          Tape scratch volumes available. Use a number from 0\nI          to 999999.\nI          The default is 0.\nN\nI        MEDIA4(num): Specifies the number of IBM Extended High\nI          Performance Cartridge Tape scratch volumes available. Use a\nI          number from 0 to 999999.\nI          The default is 0.\nN\nI        MEDIA5(num): Specifies the number of IBM TotalStorage\nI          Enterprise Tape Cartridge scratch volumes available. Use a\nI          number from 0 to 999999.\nI          The default is 0.\nN\nI        MEDIA6(num): Specifies the number of IBM TotalStorage\nI          Enterprise WORM Tape Cartridge scratch volumes available. Use\nI          a number from 0 to 999999.\nI          The default is 0.\nN\nI        MEDIA7(num): Specifies the number of IBM TotalStorage\nI          Enterprise Economy Tape Cartridge scratch volumes available.\nI          Use a number from 0 to 999999.\nI          The default is 0.\nN\nI        MEDIA8(num): Specifies the number of IBM TotalStorage\nI          Enterprise Economy WORM Tape Cartridge scratch volumes\nI          available. Use a number from 0 to 999999.\nI          The default is 0.\nN\nI        MEDIA9(num): Specifies the number of IBM TotalStorage\nI          Enterprise Economy Tape Cartridge scratch volumes available.\nI          Use a number from 0 to 999999.\nI          The default is 0.\nN\nI        MEDIA10(num): Specifies the number of IBM TotalStorage\nI          Enterprise Economy WORM Tape Cartridge scratch volumes\nI          available. Use a number from 0 to 999999.\nI          The default is 0.\nN\nD      NUMBERSLOTS(numslots) /* Abbreviation: NUMSLT */ -\nI        Is the total number of slots in the given tape library. You can\nI        use this parameter only when LOGICALTYPE is AUTOMATED.\nN\nI        numslots: Is the total number of tape cartridges that can be\nI          contained in the tape library. Use a number from 0 to 999999.\nI          The default is 0.\nN\nD      SCRATCHTHRESHOLD( /* Abbreviation: SCRTHR */ -\nD        MEDIA1(num) MEDIA2(num) MEDIA3(num) -\nD        MEDIA4(num) MEDIA5(num) MEDIA6(num) MEDIA7(num) -\nD        MEDIA8(num) MEDIA9(num) MEDIA10(num) -\nD       )\nI        Specifies the scratch volume message threshold. When the number\nI        of scratch volumes in the tape library falls below the scratch\nI        threshold, an operator action message, requesting that scratch\nI        volumes be entered into the tape library, is issued to the\nI        library's console. When the number of scratch volumes exceeds\nI        twice the scratch threshold, the message is removed from the\nI        console.\nN\nI        We recommend the use of ISMF panels to make library definition\nI        changes, but if you use IDCAMS, make sure that the total slots\nI        number defined is greater than the highest scratch threshold\nI        you will need. If you issue a\nI        ALTER libname LIBENTRY SCRATCHTHRESHOLD(MEDIAx(num))\nI        command and receive the following system message IDC31903I in\nI        response, the total slots defined are not high enough:\nN\nM      IDC31903I NUMBERSCRATCHVOLUMES IS GREATER THAN AVAILABLE VOLUMES\nN\nI        Do the following to set the total slots higher than the scratch\nI        threshold:\nN\nI          ALTER libname LIBENTRY NUMBERSLOTS(num+1)\nN\nI        followed immediately by:\nN\nI          ALTER libname LIBENTRY SCRATCHTHRESHOLD(MEDIAx(num))\nN\nI        MEDIA1(num): Specifies the threshold number of Cartridge System\nI          Tape scratch volumes. Use a number from 0 to 999999.\nI          The default is 0.\nN\nI        MEDIA2(num): Specifies the threshold number of Enhanced\nI          Capacity System Tape scratch volumes. Use a number from 0\nI          to 999999.\nI          The default is 0.\nN\nI        MEDIA3(num): Specifies the threshold number of High Performance\nI          Cartridge Tape scratch volumes. Use a number from 0\nI          to 999999.\nI          The default is 0.\nN\nI        MEDIA4(num): Specifies the threshold number of IBM Extended\nI          High Performance Cartridge Tape scratch volumes. Use a\nI          number from 0 to 999999.\nI          The default is 0.\nN\nI        MEDIA5(num): Specifies the threshold number of IBM TotalStorage\nI          Enterprise Tape Cartridge scratch volumes. Use a number from\nI          0 to 999999.\nI          The default is 0.\nN\nI        MEDIA6(num): Specifies the threshold number of IBM TotalStorage\nI          Enterprise WORM Tape Cartridge scratch volumes. Use a number\nI          from 0 to 999999.\nI          The default is 0.\nN\nI        MEDIA7(num): Specifies the threshold number of IBM TotalStorage\nI          Enterprise Economy Tape Cartridge scratch volumes. Use a\nI          number from 0 to 999999.\nI          The default is 0.\nN\nI        MEDIA8(num): Specifies the threshold number of IBM TotalStorage\nI          Enterprise Economy WORM Tape Cartridge scratch volumes. Use a\nI          number from 0 to 999999.\nI          The default is 0.\nN\nI        MEDIA9(num): Specifies the threshold number of IBM TotalStorage\nI          Enterprise Economy Tape Cartridge scratch volumes. Use a\nI          number from 0 to 999999.\nI          The default is 0.\nN\nI        MEDIA10(num): Specifies the threshold number of IBM\nI          TotalStorage Enterprise Economy WORM Tape Cartridge scratch\nI          volumes. Use a number from 0 to 999999.\nI          The default is 0.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0911": {"ttr": 5635, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0911\nTDFSMS AMS\nT-Chapter 9.\nT-Example 1: Creating a Tape Library Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094539\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 9. CREATE LIBRARYENTRY\nN------------------------------\nNExample 1: Creating a Tape Library Entry\nN----------------------------------------\nD//CREATE1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  CREATE -\nD    LIBRARYENTRY( -\nD      NAME(ATLLIB1) -\nD      CONSOLENAME(TESTCON)\nD      DESCRIPTION('TEST LIBRARY ATLLIB1') -\nD      LIBRARYID(12345) -\nD      LIBDEVTYPE(3494-L10) -\nD      LOGICALTYPE(AUTOMATED) -\nD      NUMBERSLOTS(15000) -\nD      NUMBEREMPTYSLOTS(1000) -\nD      NUMBERSCRATCHVOLUMES(MEDIA2(400) MEDIA6(500)) -\nD      SCRATCHTHRESHOLD(MEDIA2(100) MEDIA6(200)) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe LIBRARYENTRY parameters are:\nN--------------------------------\nN-> LIBRARYENTRY: creates an entry for a tape library.\nN\nN-> ATLLIB1: is the name of the entry being created.\nN\nN-> CONSOLENAME: specifies that TESTCON is the console name.\nN\nN-> DESCRIPTION: is the description of the tape library.\nN\nN-> LIBRARYID is the tape library's five-digit hexadecimal serial\nN   number, 12345.\nN\nN-> LIBDEVTYPE: indicates that the tape library device type is 3494-L10.\nN\nN-> LOGICALTYPE: specifies that the tape library is automated.\nN\nN-> NUMBERSLOTS: is the total number of slots available in this tape\nN   library, 15000.\nN\nN-> NUMBEREMPTYSLOTS: sets the number of empty slots to 1000.\nN\nN-> NUMBERSCRATCHVOLUMES: sets the current number of scratch volumes\nN   available.\nN\nN   -> MEDIA2: to 400.\nN\nN   -> MEDIA6: to 500.\nN\nN-> SCRATCHTHRESHOLD: sets the threshold number of scratch volumes. When\nN   the number of available  scratch volumes decreases to these values,\nN   an operator action message is issued to the console.\nN\nN   -> MEDIA2: to 100.\nN\nN   -> MEDIA6: to 200.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC0912": {"ttr": 5637, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC0912\nTDFSMS AMS\nT-Chapter 9.\nT-Example 2: Creating a LIBRARY Record\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094554\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 9. CREATE LIBRARYENTRY\nN------------------------------\nNExample 2: Creating a LIBRARY Record\nN------------------------------------\nD//CREATE2  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  CREATE -\nD    LIBRARYENTRY( -\nD      NAME(ATLLIB1) -\nD      CONSOLENAME(TESTCON) -\nD      DESCRIPTION('TEST LIBRARY ATLLIB1') -\nD      LIBRARYID(12345) -\nD      LOGICALTYPE(AUTOMATED) -\nD      NUMBERSLOTS(14800) -\nD      NUMBEREMPTYSLOTS(1000) -\nD      NUMBERSCRATCHVOLUMES(MEDIA3(500)) -\nD      SCRATCHTHRESHOLD(MEDIA3(200)) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe LIBRARYENTRY parameters are:\nN--------------------------------\nN-> LIBRARYENTRY: indicates that an entry describing an entire LIBRARY\nN   is being created.\nN\nN-> NAME: specifies that the name of the LIBRARYENTRY being created\nN   is ATLLIB1.\nN\nN-> CONSOLENAME: specifies that TESTCON is the console name.\nN\nN-> DESCRIPTION: is the description of the tape library.\nN\nN-> LIBRARYID: is the tape library's five-digit hexadecimal serial\nN   number, 12345.\nN\nN-> LOGICALTYPE: specifies that the tape library is automated.\nN\nN-> NUMBERSLOTS: is the total number of slots available in this tape\nN   library, 14000.\nN\nN-> NUMBEREMPTYSLOTS: sets the number of empty slots to 1000.\nN\nN-> NUMBERSCRATCHVOLUMES: sets the current number of scratch volumes\nN   available.\nN\nN   -> MEDIA3: to 500.\nN\nN-> SCRATCHTHRESHOLD: specifies that when the number of scratch volumes\nN   available falls below the threshold that an operator action message\nN   will be issued.\nN\nN   -> MEDIA3: 200.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC10": {"ttr": 5639, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC10\nTDFSMS AMS\nT-Chapter 10. CREATE VOLUMEENTRY\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 10. CREATE VOLUMEENTRY\nN------------------------------\nNThe CREATE VOLUMEENTRY command creates tape volume entries. Use this\nNcommand only to recover from tape volume catalog errors. Because access\nNmethod services cannot change the library manager inventory in an\nNautomated tape library, ISMF should be used for normal tape library\nNcreate functions.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1001": {"ttr": 5889, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1001\nTDFSMS AMS\nT-Chapter 10.\nT-Syntax for CREATE VOLUMEENTRY Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 10. CREATE VOLUMEENTRY\nN------------------------------\nNSyntax for CREATE VOLUMEENTRY Parameters\nN----------------------------------------\nD  CREATE -\nN\nNRequired parameters\nN-------------------\nD    VOLUMEENTRY( /* Abbreviation: VOLENTRY | VOLENT */ -\nI      Creates a tape volume entry. To CREATE a tape volume entry, you\nI      must have access to RACF FACILITY class profile\nI      STGADMIN.IGG.LIBRARY.\nN\nD      NAME(entryname) -\nI        is the name of the volume entry being created.\nN\nI        entryname: consists of the character 'V' concatenated with the\nI        1-to-6 character volume serial number. The volume serial number\nI        can include only uppercase alphabetics A-Z and numerics 0-9.\nI        For example, VAL0001.\nN\nNOptional parameters\nN-------------------\nD      CHECKPOINT | NOCHECKPOINT /* Abbreviation: CHKPT and NOCHKPT */ -\nI        identifies whether the tape volume is a secure checkpoint\nI        volume. If you do not use this, the checkpoint status is\nI        unknown.\nN\nI          CHECKPOINT: indicates a secure checkpoint volume.\nN\nI          NOCHECKPOINT: indicates a non-secure checkpoint volume.\nN\nD      COMPACTION( /* Abbreviation: COMP */ -\nD       YES  | IDRC | NO | NONE | UNKNOWN -\nD      ) -\nI        identifies whether the data on the volume is compacted. The YES\nI        and IDRC parameter variables are synonymous. The NO and NONE\nI        parameter variables are synonymous.\nN\nI        YES: specifies that data is compacted in the manner appropriate\nI          for the type of media.\nN\nI        IDRC: specifies that improved data recording capability (IDRC)\nI          compaction was used.\nN\nI        NO: specifies that no compaction was used.\nN\nI        NONE: specifies that no compaction was used.\nN\nI        UNKNOWN: specifies that it is not known if compaction was used.\nN\nD      ENTEREJECTDATE(eedate) /* Abbreviation: EEDATE */ -\nI        is the date that a tape volume was last ejected from a tape\nI        library or last entered into a tape library.\nN\nI        eedate: is a date, YYYY-MM-DD. Search \"Tape Library Date\nI          Formats\" for a description of valid date values. The default\nI          is blanks.\nN\nD      EXPIRATIONDATE(expdate) /* Abbreviation: EXDATE */ -\nI        is the date the tape volume expires. If there is more than one\nI        data set on the volume, the expiration date is the latest\nI        expiration date. The expiration date is set to blanks when the\nI        USEATTRIBUTE parameter is specified as SCRATCH.\nN\nI        expdate: is a date, YYYY-MM-DD. Search \"Tape Library Date\nI          Formats\" for a description of valid date values.\nN\nD      LIBRARYNAME(libname) /* Abbreviation: LIBNAME */ -\nI        Is the name of the tape library where the tape volume resides.\nI        If you use this, set LOCATION=LIBRARY. If LOCATION=SHELF, the\nI        library name becomes SHELF.\nN\nI        libname: is a 1-to-8 character name of a tape library.\nN\nD      LOCATION(LIBRARY | SHELF) /* Abbreviation: LOC */ -\nI        Either the tape volume resides in a tape library, or it resides\nI        on a shelf outside the tape library.\nN\nI        -> If you set it to LIBRARY, you must also enter a LIBRARYNAME.\nN\nI        -> If you set it to SHELF, the library name defaults to SHELF.\nN\nD      MEDIATYPE( /* Abbreviation: MTYPE */ -\nD       MEDIA1 | MEDIA2 | MEDIA3 | MEDIA4 |  -\nD        MEDIA5 | MEDIA6 | MEDIA7 | MEDIA8 | MEDIA9 | MEDIA10 -\nD      ) -\nI        Identifies the media type of the tape volume.\nN\nI        MEDIA1: Specifies that the tape volume is Cartridge System\nI          Tape.\nN\nI        MEDIA2: Specifies that the tape volume is Enhanced Capacity\nI          System Tape. You cannot use this parameter when\nI          SPECIALATTRIBUTE is set to READCOMPATIBLE, or RECORDING is\nI          set to 18TRACK.\nI          MEDIATYPE defaults to MEDIA2.\nN\nI        MEDIA3: Specifies that the tape volume is High Performance\nI          Cartridge Tape.\nN\nI        MEDIA4: Specifies that the tape volume is IBM Extended High\nI          Performance Cartridge Tape.\nN\nI        MEDIA5: Specifies that the tape volume is IBM TotalStorage\nI          Enterprise Tape Cartridge.\nN\nI        MEDIA6: Specifies that the tape volume is IBM TotalStorage\nI          Enterprise WORM Tape Cartridge.\nN\nI        MEDIA7: Specifies that the tape volume is IBM TotalStorage\nI          Enterprise Economy Tape Cartridge.\nN\nI        MEDIA8: Specifies that the tape volume is IBM TotalStorage\nI          Enterprise Economy WORM Tape Cartridge.\nN\nI        MEDIA9: Specifies that the tape volume is IBM TotalStorage\nI          Enterprise Economy Tape Cartridge.\nN\nI        MEDIA10: Specifies that the tape volume is IBM TotalStorage\nI          Enterprise Economy WORM Tape Cartridge.\nN\nD      MOUNTDATE(mountdate) /* Abbreviation: MDATE */ -\nI        identifies the date on which the tape volume was last mounted\nI        onto a tape drive and successfully opened.\nN\nI        mountdate: is a date, YYYY-MM-DD. Search \"Tape Library Date\nI          Formats\" for a description of valid date values.\nI          The default for this parameter is blanks.\nN\nD      OWNERINFORMATION(ownerinfo) /* Abbreviation: OWNINFO */ -\nI        provides information about the tape volume's owner.\nN\nI        ownerinfo: specifies a 1-to-64 character owner information\nI        field. If you use commas, semicolons, embedded blanks,\nI        parentheses, or slashes, place the entire description in\nI        apostrophes.\nN\nI        The default is blanks.\nN\nD      RECORDING( /* Abbreviation: REC */ -\nD       18TRACK | 36TRACK | 128TRACK | 256TRACK | 384TRACK | -\nD       EFMT1 | EFMT2 | EFMT3 | EEFMT3 | UNKNOWN -\nD      ) -\nI        identifies the recording technique for creating the tape. You\nI        can only use this for private tape volumes. Scratch tape\nI        volumes default to 36TRACK for MEDIA1 and MEDIA2. Scratch tape\nI        volumes default to 128TRACK for MEDIA3 and MEDIA4.\nN\nI        18TRACK: Tape was written and must be read on an 18-track\nI          device. This parameter is valid only when MEDIATYPE(MEDIA1)\nI          is specified.\nN\nI        36TRACK: Tape was written and must be read on a 36-track\nI          device. This parameter is valid only when MEDIATYPE(MEDIA1)\nI          or MEDIATYPE(MEDIA2) is specified. This parameter cannot be\nI          specified with SPECIALATTRIBUTE(READCOMPATIBLE).\nN\nI        128TRACK: Tape was written and must be read on a 128-track\nI          device. This parameter is valid only when MEDIATYPE(MEDIA3)\nI          or MEDIATYPE(MEDIA4) is specified. This parameter cannot be\nI          specified with SPECIALATTRIBUTE(READCOMPATIBLE).\nN\nI        256TRACK: Tape was written and must be read on a 256-track\nI          device. This parameter is valid only when MEDIATYPE(MEDIA3)\nI          or MEDIATYPE(MEDIA4) is specified.\nN\nI        384TRACK: Tape was written and must be read on a 384-track\nI          device. This parameter is valid only when MEDIATYPE(MEDIA3)\nI          or MEDIATYPE(MEDIA4) is specified.\nN\nI        EFMT1: Tape was written and must be read on an EFMT1\nI          (enterprise format 1) device.\nN\nI          Note: EFMT1 is valid with MEDIATYPE(MEDIA5), (MEDIA6),\nI          (MEDIA7), and (MEDIA8) only.\nN\nI        EFMT2: Tape was written and must be read on an EFMT2\nI          (enterprise format 2) device.\nN\nI          Note: EFMT2 is valid with MEDIATYPE(MEDIA9) and (MEDIA10)\nI          only.\nN\nI        EFMT3: Tape was written and must be read on an EFMT3\nI          (enterprise format 3) device.\nN\nI          Note: EFMT3 is valid with MEDIATYPE(MEDIA5), (MEDIA6),\nI          (MEDIA7), (MEDIA8), (MEDIA9) and (MEDIA10) only.\nN\nI        EEFMT3: Tape was written and must be read on an EEFMT3\nI          (encrypted enterprise format 3) device.\nN\nI          Note: EEFMT3 is valid with MEDIATYPE(MEDIA5), (MEDIA6),\nI          (MEDIA7), (MEDIA8), (MEDIA9) and (MEDIA10) only.\nN\nI        UNKNOWN: Tape recording technique is unknown.\nN\nD      SHELFLOCATION(shelf) /* Abbreviation: SHELFLOC */ -\nI        identifies the shelf location for a tape volume that resides\nI        outside a tape library. This parameter can be included for a\nI        library-resident tape volume.\nN\nI        shelf: a 1-to-32 character shelf location information field.\nI          If you use commas, semicolons, embedded blanks, parentheses,\nI          or slashes, enclose the entire description in apostrophes.\nI          The default is blanks.\nN\nD      SPECIALATTRIBUTE( /* Abbreviation: SATTR */ -\nD       READCOMPATIBLE | NONE -\nD      ) -\nI        shows special attributes of the tape volume. Use this only for\nI        private tape volumes. Scratch tape volumes default to NONE.\nN\nI        READCOMPATIBLE /* Abbreviation: RDCOMPAT */: On subsequent\nI          allocations, the system uses read compatible devices for\nI          allocation of this tape volume.\nN\nI        NONE: requires no special tape attributes.\nN\nD      STORAGEGROUP(groupname) /* Abbreviation: STORGRP */ -\nI        Identifies the storage group name.\nN\nI        groupname: is the 1-to-8 character name of the storage group\nI          in which this tape volume is defined.\nI          The default is blanks.\nN\nI          However, if the USEATTRIBUTE=SCRATCH then the storage group\nI          name defaults to *SCRTCH*.\nN\nD      USEATTRIBUTE( /* Abbreviation: UATTR */ -\nD       SCRATCH | PRIVATE -\nD      ) -\nI        can be SCRATCH for scratch volumes or PRIVATE for private\nI        volumes. If you use SCRATCH, the storage group name is set to\nI        *SCRTCH*, and the expiration date is set to blanks.\nN\nD      WRITEDATE(wrtdate) /* Abbreviation: WDATE */ -\nI        identifies the date that a data set on a tape volume was last\nI        opened for writing.\nN\nI        wrtdate: is a date, YYYY-MM-DD. Search \"Tape Library Date\nI          Formats\" for a description of valid date values.\nI          The default for this parameter is blanks.\nN\nD      WRITEPROTECT | NOWRITEPROTECT /* Abbreviations: WPRT and NWPRT */\nI        identifies whether the tape volume is write protected or not.\nI        If you do not use this, write protect status is unknown.\nN\nI        WRITEPROTECT: indicates that the tape volume is write\nI          protected.\nN\nI          Setting WRITEPROTECT in the tape volume entry does not\nI          automatically write protect your volume. It is an\nI          informational setting that is recorded when software detects\nI          that the volume is write protected and is not used by\nI          software when determining whether the volume is protected.\nI          For a volume to be write protected, you will still need to\nI          set the write protect tab available on the physical tape\nI          volume. Since the availability to write protect a volume\nI          does not exist for logical volumes in a VTS, (no tab\nI          available either physically or logically), you can\nI          alternately use RACF or PROTECT=ALL in your JCL to protect\nI          the volume during usage.\nN\nI        NOWRITEPROTECT: indicates that the tape volume is not write\nI          protected.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC1011": {"ttr": 5891, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1011\nTDFSMS AMS\nT-Chapter 10.\nT-Example 1: Creating a Tape Volume Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094622\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 10. CREATE VOLUMEENTRY\nN------------------------------\nNExample 1: Creating a Tape Volume Entry\nN---------------------------------------\nD//CREATE1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  CREATE -\nD    VOLUMEENTRY( -\nD      NAME(VAL0001) -\nD      LIBRARYNAME(ATLLIB1) -\nD      ENTEREJECTDATE(2002-03-18) -\nD      EXPIRATIONDATE(2010-12-31) -\nD      LOCATION(LIBRARY) -\nD      MOUNTDATE(2004-01-02) -\nD      OWNERINFORMATION('JOHN SMITH,RMKD222') -\nD      SHELFLOCATION(10098SHELF) -\nD      STORAGEGROUP(*SCRTCH*) -\nD      USEATTRIBUTE(SCRATCH) -\nD      WRITEDATE(2004-01-02) -\nD      NOWRITEPROTECT -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe VOLUMEENTRY parameters are:\nN-------------------------------\nN-> VOLUMEENTRY: creates a tape volume entry in a tape library.\nN\nN-> NAME: names the tape volume entry, VAL0001 ('V' concatenated with\nN   volume serial number AL0001).\nN\nN-> LIBRARYNAME: adds this tape volume to the tape library named\nN   ATLLIB1.\nN\nN-> ENTEREJECTDATE: is the date on which the tape volume was last\nN   entered into, or ejected from, the tape library named ATLLIB1.\nN\nN-> EXPIRATIONDATE: is the date on which the tape volume expires.\nN\nN-> LOCATION: specifies that the tape volume will reside in the tape\nN   library.\nN\nN-> MOUNTDATE: is the date when the tape volume was last mounted onto a\nN   tape drive.\nN\nN-> OWNERINFORMATION: gives JOHN SMITH,RMKD222 for owner information.\nN\nN-> SHELFLOCATION: gives 10098SHELF as the shelf location.\nN\nN-> STORAGEGROUP: names the storage group *SCRTCH* (default name when\nN   USEATTRIBUTE=SCRATCH).\nN\nN-> USEATTRIBUTE: specifies the tape volume as SCRATCH.\nN\nN-> WRITEDATE: is the date when the tape volume was last written to.\nN\nN-> NOWRITEPROTECT: identifies the tape volume as not write protected.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1012": {"ttr": 5893, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1012\nTDFSMS AMS\nT-Chapter 10.\nT-Example 2: Creating a VOLUME Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094634\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 10. CREATE VOLUMEENTRY\nN------------------------------\nNExample 2: Creating a VOLUME Entry\nN----------------------------------\nD//CREATE1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  CREATE -\nD    VOLUMEENTRY(V0A2991) -\nD    LIBRARYNAME(ATLIB02) -\nD    MEDIATYPE(MEDIA7) -\nD    RECORDING(EFMT1) -\nD    USEATTRIBUTE(SCRATCH)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe VOLUMEENTRY parameters are:\nN-------------------------------\nN-> VOLUMEENTRY(V0A2991): indicates that an entry describing a single\nN   volume in a library is being created.\nN\nN   -> V0A2991: specifies that the name of the volume entry being\nN      created is V0A2991 and the volser is 0A2991.\nN\nN-> LIBRARYNAME: adds this tape volume to the tape library named\nN   ATLIB02.\nN\nN-> MEDIATYPE: specifies the media type as MEDIA7.\nN\nN-> RECORDING: specifies the recording technology as EFMT1.\nN\nN-> USEATTRIBUTE: specifies the tape volume as SCRATCH.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC11": {"ttr": 5895, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC11\nTDFSMS AMS\nT-Chapter 11. DCOLLECT\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-189953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 11. DCOLLECT\nN--------------------\nnThe DFSMS Data Collection Facility (DCOLLECT) is a function of access\nNmethod services. DCOLLECT collects stored data set, volume and policy\nNvalues into a sequential file you can use as input to other programs\nNor applications.\nN\nNNote: There is a Report Generator option in the ISMF storage\nNAdministrator primary panel 'G' Report Generator that can be used to\nNcreate reports based on the sequential file contents that DCOLLECT\nNproduces. The report generator ships sample report types for DCOLLECT,\nNboth DFSMSdfp and DFSMShsm DCOLLECT record types. In addition, it will\nNship some sample reports based on those.\nN\nNDCOLLECT obtains data on:\nN\nN-> Active Data Sets\nN\nN   DCOLLECT provides data about space use and data set attributes and\nN   indicators on the selected volumes and storage groups.\nN\nN-> VSAM Data Set Information\nN\nN   DCOLLECT provides specific information relating to VSAM data sets\nN   residing on the selected volumes and storage groups.\nN\nN-> Volumes\nN\nN   DCOLLECT provides statistics and information on volumes that are\nN   selected for collection.\nN\nN-> Inactive Data\nN\nN   DCOLLECT produces output for DFSMShsm-managed data, (inactive data\nN   management), which includes both migrated and backed up data sets.\nN\nN   -> Migrated Data Sets: DCOLLECT provides information on space\nN      utilization and data set attributes for data sets migrated by\nN      DFSMShsm.\nN\nN   -> Backed Up Data Sets: DCOLLECT provides information on space\nN      utilization and data set attributes for every version of a data\nN      set backed up by DFSMShsm.\nN\nN-> Capacity Planning\nN\nN   Capacity planning for DFSMShsm-managed data (inactive data\nN   management) includes the collection of both DASD and tape capacity\nN   planning.\nN\nN   -> DASD Capacity Planning: DCOLLECT provides information and\nN      statistics for volumes managed by DFSMShsm (ML0 and ML1).\nN\nN   -> Tape Capacity Planning: DCOLLECT provides statistics for tapes\nN      managed by DFSMShsm.\nN\nN-> SMS Configuration Information\nN\nN   DCOLLECT provides information about the SMS configurations. The\nN   information can be from either an active control data set (ACDS)\nN   or a source control data set (SCDS), or the active configuration.\nN\nN   DCOLLECT provides attributes that are in the selected configuration\nN   for the following:\nN\nN   -> Data Class Constructs\nN   -> Storage Class Constructs\nN   -> Management Class Constructs\nN   -> Storage Group Constructs\nN   -> SMS Volume Information\nN   -> SMS Base Configuration Information\nN   -> Aggregate Group Construct Information\nN   -> Optical Drive Information\nN   -> Optical Library Information\nN   -> Cache Names\nN   -> Accounting Information for the ACS routines\nN\nNRestriction: Use the DCOLLECT command only with volumes that contain\nNan MVS VTOC. If you use the DCOLLECT command with volumes that contain\nNa VM VTOC, the DCOLLECT command fails and error message IDC21804I is\nNdisplayed.\nN\nNFor information on calling DCOLLECT from ISMF, see z/OS DFSMSdfp\nNStorage Administration. For information on using DCOLLECT to monitor\nNspace usage, see Using the Data Collection Application in z/OS DFSMSdfp\nNStorage Administration.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1101": {"ttr": 6145, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1101\nTDFSMS AMS\nT-Chapter 11.\nT-Syntax for DCOLLECT Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 11. DCOLLECT\nN--------------------\nNSyntax for DCOLLECT Parameters\nN------------------------------\nD  DCOLLECT /* Abbreviation: DCOL */ -\nN\nNRequired parameters\nN-------------------\nD    OUTFILE(ddname) | /* Abbreviation: OFILE */ -\nD    OUTDATASET(entryname) /* Abbreviation: ODS */ -\nI      OUTFILE(ddname): enter the name of a DD statement that identifies\nI        the target data set.\nN\nI      OUTDATASET(entryname): identifies the target data set. You must\nI        use a physical sequential data set with a record format of\nI        V or VB. Use an LRECL that is at least the size of the longest\nI        DCOLLECT record to be collected. Changes to the JCL are not\nI        necessary if you use an LRECL larger than the longest record to\nI        be collected. The LRECL should be at least as large as the\nI        longest record DCOLLECT generates but not larger than 32756.\nI        A mid-range value is appropriate.\nN\nI        If you use OUTDATASET, the entryname is dynamically allocated\nI        with a status of either OLD or MOD, as required by the REPLACE\nI        parameter.\nN\nNOptional parameters\nN-------------------\nD    BACKUPDATA /* Abbreviation: BACD */ -\nI      requests that information on backed up data sets is collected\nI      from the given backup control data set (BCDS).\nN\nI      The desired BCDS must be allocated to the ddname BCDS.\nN\nD    CAPPLANDATA /* Abbreviation: CAPD */ -\nI      requests that capacity planning information in the output data\nI      set. Allocate the MCDS to the ddname MCDS and the BCDS to the\nI      ddname BCDS.\nN\nD    DDCMEDIA( -\nD     DDCMENUL | DDCMEDA1 | DDCMEDA2 | -\nD     DDCMEDA3 | DDCMEDA4 | DDCMEDA5 | DDCMEDA6 | -\nD     DDCMEDA7 | DDCMEDA8 | DDCMEDA9 | DDCMEDA10 -\nD    ) -\nI      shows the type and format of the cartridges used for mountable\nI      tape data sets used with this data class. It is mapped by one of\nI      the following attributes:\nN\nI      DDCMENUL Media type is not specified (NULL). The constant value\nI        is 0.\nN\nI      DDCMEDA1 Media type is MEDIA1 (cartridge system tape media). The\nI        constant value is 1.\nN\nI      DDCMEDA2 Media type is MEDIA2 (enhanced capacity cartridge tape\nI        media). The constant value is 2.\nN\nI      DDCMEDA3 Media type is MEDIA3 (high-performance cartridge tape\nI        media). The constant value is 3.\nN\nI      DDCMEDA4 Media type is MEDIA4 (extended high-performance\nI        cartridge tape media). The constant value is 4.\nN\nI      DDCMEDA5 Media type is MEDIA5 (IBM TotalStorage Enterprise Tape\nI        Cartridge media). The constant value is 5.\nN\nI      DDCMEDA6 Media type is MEDIA6 (Enterprise WORM Tape Cartridge\nI        media). The constant value is 6.\nN\nI      DDCMEDA7 Media type is MEDIA7 (Enterprise Economy Tape Cartridge\nI        media). The constant value is 7.\nN\nI      DDCMEDA8 Media type is MEDIA8 (Enterprise Economy WORM Tape\nI        Cartridge media). The constant value is 8.\nN\nI      DDCMEDA9 Media type is MEDIA9 (Enterprise Economy Tape Cartridge\nI        media). The constant value is 9.\nN\nI      DDCMEDA10 Media type is MEDIA10 (Enterprise Economy WORM Tape\nI        Cartridge media). The constant value is 10.\nN\nD    DDCRECTE( -\nD     DDCRTNUL | DDC18TRK | DDC36TRK | -\nD     DDC128TK | DDC256TK | DDC384TK | -\nD     DDCEFMT1 | DDCEFMT2 | DDCEFMT3 | DDCEEFM3 -\nD    ) -\nI      indicates the number of recording tracks on the cartridge used\nI      for the mountable tape data sets associated with this data class.\nN\nI      DDCRTNUL The recording technology is not specified (NULL). The\nI        constant value is 0.\nN\nI      DDC18TRK The recording technology is 18TRACK. The constant value\nI        is 1.\nN\nI      DDC36TRK The recording technology is 36TRACK. The constant value\nI        is 2.\nN\nI      DDC128TK The recording technology is 128TRACK. The constant value\nI        is 3.\nN\nI      DDC256TK The recording technology is 256TRACK. The constant value\nI        is 4.\nN\nI      DDC384TK The recording technology is 384TRACK. The constant value\nI        is 5.\nN\nI      DDCEFMT1 The recording technology is EFMT1. The constant value\nI        is 6.\nN\nI      DDCEFMT2 The recording technology is EFMT2. The constant value\nI        is 6.\nN\nI      DDCEFMT3 The recording technology is EFMT3. The constant value\nI        is 6.\nN\nI      DDCEEFM3 The recording technology is EEFMT3. The constant value\nI        is 6.\nN\nD    ERRORLIMIT(value) /* Abbreviation: ELIMIT */ -\nI      Specifies the maximum number of errors for which detailed\nI      DCOLLECT error messages can print during program run.\nI      ERRORLIMIT prevents runaway message output.\nN\nI      The default for ERRORLIMIT is 2,147,483,647 errors, but any\nI      number between 1 and 2,147,483,647 can be given. Processing\nI      continues even though the error limit has been reached.\nN\nD    EXCLUDEVOLUMES(volser volser...) /* Abbreviation: EXV */ -\nI      allows you to exclude information on a selected volume or group\nI      of volumes. One or more volumes selected by using the\nI      STORAGEGROUP and VOLUMES keywords can be excluded with this\nI      keyword. Options for EXCLUDEVOLUMES are:\nN\nI      -> a fully specified volume serial number, containing 1-to-6\nI         characters\nN\nI      -> a partially specified volume serial number using a single\nI         trailing asterisk as a placeholder for all remaining\nI         characters, or\nN\nI      -> any combination of the above.\nN\nD    EXITNAME(entrypoint) /* Abbreviation: EXIT */ -\nI      Specifies the 1-to-8 character entrypoint name for an external\nI      DCOLLECT user exit module. Load it to an APF-authorized library\nI      for access at the time of DCOLLECT invocation. If you do not use\nI      it, the default DCOLLECT user exit, IDCDCX1, is used.\nN\nD    MIGRATEDATA /* Abbreviation: MIGD */ -\nI      Requests collection of information on migrated data sets from\nI      the specified MCDS (Migration Control Data Set). The desired\nI      MCDS must be allocated to the ddname MCDS.\nN\nD    MIGRSNAPALL | MIGRSNAPERR -\nI      MIGRSNAPALL /* Abbreviation: MSALL */: asks ARCUTIL to do SNAP\nI        processing, and is used for diagnostic reasons only. See\nI        z/OS DFSMShsm Implementation and Customization Guide for more\nI        information on SNAP ALL processing. Do not use it with\nI        MIGRSNAPERR. It is ignored if you do not use MIGRATEDATA,\nI        BACKUPDATA, or CAPPLANDATA.\nN\nI      MIGRSNAPERR /* Abbreviation: MSERR */: requires ARCUTIL to run\nI        SNAP processing when an error occurs during ARCUTIL processing.\nI        Use it for diagnostic purposes only. See z/OS DFSMShsm\nI        Implementation and Customization Guide for more information\nI        on SNAP ALL processing. Do not use it with MIGRSNAPALL. It is\nI        ignored if you do not use MIGRATEDATA, BACKUPDATA, or\nI        CAPPLANDATA.\nN\nD    NODATAINFO /* Abbreviation: NOD */ -\nI      Requests that no data set information records are generated or\nI      written to the output data set. Use this parameter if you want\nI      only volume information generated for the given volumes or\nI      storage groups.\nN\nD    NOVOLUMEINFO /* Abbreviation: NOV */ -\nI      Requests that no volume information records are generated or\nI      written to the output data set. Use this parameter if you want\nI      only data set information generated for the given volumes or\nI      storage groups.\nN\nD    REPLACE | APPEND -\nI      Specifies whether the output data is to replace existing data\nI      or whether the output data is to be added to the end of the\nI      existing data set. The REPLACE/APPEND applies when OUTDATASET is\nI      used. If you use OUTFILE, data set processing is controlled by\nI      the JCL DISP parameter: OLD replaces the current contents of the\nI      data set, and MOD appends new records to the end of the data set.\nN\nI      REPLACE /* Abbreviation: REPL */: asks that the contents of the\nI        output data set are overwritten with new data. All existing\nI        data in the output data set is lost when this parameter is\nI        selected.\nN\nI      APPEND /* Abbreviation: APP */: writes new records starting at\nI        the end of the existing data, if any exists. All existing\nI        data is preserved when this parameter is selected.\nN\nD    SMSDATA( /* Abbreviation: SMS */ -\nD      SCDSNAME(entryname) | -\nD      ACTIVE -\nD    ) -\nI      Requests that SMS configuration data be included in the DCOLLECT\nI      output data set. This parameter can include either an SCDS name\nI      or the keyword ACTIVE.\nN\nI      SCDSNAME(entryname) /* Abbreviation: SCDS */: is the source of\nI        the SMS control data that is to be collected.\nN\nI        entryname: is used to specify the name of an existing cataloged\nI          SCDS. An enqueue with a major name of IGDCDS is issued to\nI          serialize access to the control data set. The enqueue is\nI          held for the duration of SMSDATA processing.\nN\nI      ACTIVE: takes the SMS information from the configuration that is\nI        currently active on the system.\nN\nI      One or more of the following record types is created when you use\nI      SMSDATA:\nN\nI        Type Description\nI        ---- ---------------------------------------------------\nI        DC   Data Class construct information\nI        SC   Storage Class construct information\nI        MC   Management Class construct information\nI        BC   Base Configuration information\nI        SG   Storage Group construct information\nI        VL   Storage Group volume information\nI        AG   Aggregate Group information\nI        DR   OAM Drive Record information\nI        LB   OAM Library Record information\nI        CN   Cache Names from the Base Configuration Information\nI        AI   Accounting Information for the ACS routines\nN\nD    STORAGEGROUP(sgname sgname...) /* Abbreviation: STOG */ -\nI      lists the storage groups from which information is to be\nI      collected. For each storage group listed, a list of online\nI      volume serials is generated. Information is collected for all\nI      data sets residing on those volumes unless you use NODATAINFO.\nI      Volume information is collected unless you use NOVOLUMEINFO.\nI      A maximum of 255 storage groups can be selected.\nN\nI      Although several storage groups can be specified, and the\nI      volume list might have duplicates, each volume's information is\nI      only processed once.\nN\nD    VOLUMES(option option...) /* Abbreviation: VOL */\nI      lists the volumes from which information is to be collected. For\nI      each online volume serial listed (or resolved from generic\nI      specifications), information is collected for all data sets\nI      residing on those volumes unless you use NODATAINFO. Volume\nI      information is collected unless you use NOVOLUMEINFO. You can\nI      use a maximum of 255 volume serials.\nN\nI      option: a fully qualified volser or a volser pattern.\nN\nI        -> A fully specified volume serial number, containing 1-to-6\nI           characters.\nN\nI        -> A partially specified volume serial number using a single\nI           asterisk as a place holder for all remaining characters.\nN\nI        -> Six asterisks to indicate the system residence volume\nI           (SYSRES).\nN\nI        -> Any combination of the above.\nN\nI      For example, you might use one of these for the volume serial\nI      number:\nN\nI        -> SYS001: This collects data from volume SYS001 only.\nN\nI        -> SYS*: This collects data from all online volumes beginning\nI           with SYS.\nN\nI        -> ******: This collects data from the system residence volume\nI           (SYSRES).\nN\nI        -> **: This collects data from all online volumes\nN\nI      Although the same volumes can be specified several times, each\nI      volume's information is only processed once.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1111": {"ttr": 6147, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1111\nTDFSMS AMS\nT-Chapter 11.\nT-Example 1: Generic Volume Data Collection\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094705\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 11. DCOLLECT\nN--------------------\nNExample 1: Generic Volume Data Collection\nN-----------------------------------------\nD//COLLECT1 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DCOLLECT -\nD    OFILE(OUTDS) -\nD    VOLUME(SYS1*)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//OUTDS     DD DISP=(NEW,CATLG),DSN=USER.DCOLLECT.OUTPUT,\nD//             UNIT=SYSALLDA,SPACE=(TRK,(100,100),RLSE),\nD//             DCB=(DSORG=PS,RECFM=VB,BLKSIZE=0,LRECL=32756)\nN\nNThe JCL statements:\nN-------------------\nN-> OUTDS describes the sequential output data set where records from\nN   data collection are written. The LRECL is set to 32756, which is\nN   the largest record size that can be handled by DCOLLECT. You do\nN   not need to change the JCL each time a DCOLLECT record is extended.\nN\nNThe DCOLLECT parameters are:\nN----------------------------\nN-> OFILE: identifies the output data set (USER.DCOLLECT.OUTPUT) by\nN   ddname.\nN\nN-> VOLUME: names the volumes for which data is to be collected. In\nN   this example the generic specification collects data for all\nN   on-line volumes that begin with the characters SYS1.\nN\nNDCOLLECT utilizes LSPACE to gather VOLUME information. LSPACE obtains\nNvolume level serialization. In this example all volumes are exclusive\nNto this system or have proper SYSTEMS scope specified to avoid ENQ\nNconflicts.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1112": {"ttr": 6149, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1112\nTDFSMS AMS\nT-Chapter 11.\nT-Example 2: Storage Group Data Collection\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094717\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 11. DCOLLECT\nN--------------------\nNExample 2: Storage Group Data Collection\nN----------------------------------------\nD//COLLECT2 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DCOLLECT -\nD    OFILE(OUTDS) -\nD    NODATAINFO -\nD    STORAGEGROUP(STGGP001)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//OUTDS     DD DISP=(NEW,CATLG),DSN=USER.DCOLLECT.OUTPUT,\nD//             UNIT=SYSALLDA,SPACE=(TRK,(100,100),RLSE),\nD//             DCB=(DSORG=PS,RECFM=VB,BLKSIZE=0,LRECL=32756)\nN\nNThe JCL statements:\nN-------------------\nN-> OUTDS: describes the sequential output data set where records from\nN   data collection are written. The LRECL is set to 32756, which is\nN   the largest record size that can be handled by DCOLLECT. You do\nN   not need to change the JCL each time a DCOLLECT record is extended.\nN\nNThe DCOLLECT parameters are:\nN----------------------------\nN-> OFILE: identifies the output data set (USER.DCOLLECT.OUTPUT) by\nN   ddname.\nN\nN-> NODATAINFO: says that only volume information records are created\nN   and written to the output data set. No data set information is\nN   collected and written to the output data set.\nN\nN-> STORAGEGROUP: names the storage group from which data is to be\nN   collected. Data is collected from all on line volumes that reside\nN   in storage group STGGP001.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1113": {"ttr": 6151, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1113\nTDFSMS AMS\nT-Chapter 11.\nT-Example 3: Migrated and Backup Data Set Data Collection\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094728\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 11. DCOLLECT\nN--------------------\nNExample 3: Migrated and Backup Data Set Data Collection\nN-------------------------------------------------------\nD//COLLECT3 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DCOLLECT -\nD    OFILE(OUTDS) -\nD    BACKUPDATA -\nD    MIGRATEDATA\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//BCDS      DD DISP=SHR,DSN=HSM.BCDS\nD//MCDS      DD DISP=SHR,DSN=HSM.MCDS\nD//OUTDS     DD DISP=(NEW,CATLG),DSN=USER.DCOLLECT.OUTPUT,\nD//             UNIT=SYSALLDA,SPACE=(TRK,(100,100),RLSE),\nD//             DCB=(DSORG=PS,RECFM=VB,BLKSIZE=0,LRECL=32756)\nN\nNThe JCL statements:\nN-------------------\nN-> BCDS: identifies the Backup Control Data Set. This data set must be\nN   identified by the ddname BCDS. When using a multicluster CDS, each\nN   cluster must be identified on a separate DD statement. The ddnames\nN   are BCDS, BCDS2, BCDS3, and BCDS4.\nN\nN-> MCDS: identifies the Migration Control Data Set. This data set must\nN   be identified by the ddname MCDS. When using a multicluster CDS,\nN   each cluster must be identified on a separate DD statement. The\nN   ddnames are MCDS, MCDS2, MCDS3, and MCDS4.\nN\nN-> OUTDS: describes the sequential output data set where records from\nN   data collection are written. The LRECL is set to 32756, which is\nN   the largest record size that can be handled by DCOLLECT. You do\nN   not need to change the JCL each time a DCOLLECT record is extended.\nN\nNThe DCOLLECT parameters are:\nN----------------------------\nN-> OFILE: identifies the output data set (USER.DCOLLECT.OUTPUT) by\nN   ddname.\nN\nN-> BACKUPDATA: creates data records for all backed up data sets on\nN   this system.\nN\nN-> MIGRATEDATA: creates data records for all migrated data sets that\nN   reside on this system.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1114": {"ttr": 6153, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1114\nTDFSMS AMS\nT-Chapter 11.\nT-Example 4: Combination of Options\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094745\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 11. DCOLLECT\nN--------------------\nNExample 4: Combination of Options\nN---------------------------------\nD//COLLECT4 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DCOLLECT -\nD    OFILE(OUTDS) -\nD    CAPD -\nD    MIGD -\nD    STOG(STGGP100, STGGP101, STGGP200, STGGP201) -\nD    VOL(SYS100, SYS101, SYS200, SYS201)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//BCDS      DD DISP=SHR,DSN=HSM.BCDS\nD//MCDS      DD DISP=SHR,DSN=HSM.MCDS\nD//OUTDS     DD DISP=(NEW,CATLG),DSN=USER.DCOLLECT.OUTPUT,\nD//             UNIT=SYSALLDA,SPACE=(TRK,(100,100),RLSE),\nD//             DCB=(DSORG=PS,RECFM=VB,BLKSIZE=0,LRECL=32756)\nN\nNThe JCL statements:\nN-------------------\nN-> BCDS: identifies the Backup Control Data Set. This data set must be\nN   identified by the ddname BCDS. When using a multicluster CDS, each\nN   cluster must be identified on a separate DD statement. The ddnames\nN   are BCDS, BCDS2, BCDS3, and BCDS4.\nN\nN-> MCDS: identifies the Migration Control Data Set. This data set must\nN   be identified by the ddname MCDS. When using a multicluster CDS,\nN   each cluster must be identified on a separate DD statement. The\nN   ddnames are MCDS, MCDS2, MCDS3, and MCDS4.\nN\nN-> OUTDS: describes the sequential output data set where records from\nN   data collection are written. The LRECL is set to 32756, which is\nN   the largest record size that can be handled by DCOLLECT. You do\nN   not need to change the JCL each time a DCOLLECT record is extended.\nN\nNThe DCOLLECT parameters are:\nN----------------------------\nN-> OFILE: identifies the output data set (USER.DCOLLECT.OUTPUT) by\nN   ddname.\nN\nN-> CAPD: includes capacity planning information in the output data set.\nN\nN-> MIGD: creates data records for all migrated data sets that\nN   reside on this system.\nN\nN-> STOG: names the storage group from which data is to be collected. In\nN   this example, STOG is used to collected data from all on-line\nN   volumes that reside in storage groups STGGP100, STGGP101, STGGP200\nN   and STGGP201.\nN\nN-> VOL: names the volume from which data is to be collected. In this\nN   example, VOL is used to collect data for the on-line volumes SYS100,\nN   SYS101, SYS200 and SYS201.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1115": {"ttr": 6155, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1115\nTDFSMS AMS\nT-Chapter 11.\nT-Example 5: Collection of SMS Construct Information\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094758\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 11. DCOLLECT\nN--------------------\nNExample 5: Collection of SMS Construct Information\nN--------------------------------------------------\nD//COLLECT5 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DCOLLECT -\nD    OFILE(OUTDS) -\nD    SMSDATA(SCDSNAME(SYSPROG.SCDS.SYSTEMA))\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//OUTDS     DD DISP=(NEW,CATLG),DSN=USER.DCOLLECT.OUTPUT,\nD//             UNIT=SYSALLDA,SPACE=(TRK,(10,10),RLSE),\nD//             DCB=(DSORG=PS,RECFM=VB,BLKSIZE=0,LRECL=32756)\nN\nNThe JCL statements:\nN-------------------\nN-> OUTDS: describes the sequential output data set where records from\nN   data collection are written. The LRECL is set to 32756, which is\nN   the largest record size that can be handled by DCOLLECT. You do\nN   not need to change the JCL each time a DCOLLECT record is extended.\nN\nNThe DCOLLECT parameters are:\nN----------------------------\nN-> OFILE: identifies the output data set (USER.DCOLLECT.OUTPUT) by\nN   ddname.\nN\nN-> SMSDATA: collects construct data from the named SCDS. In this\nN   example, the SCDS is named SYSPROG.SCDS.SYSTEMA.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC12": {"ttr": 6401, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC12\nTDFSMS AMS\nT-Chapter 12. DEFINE ALIAS\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 12. DEFINE ALIAS\nN------------------------\nNThe DEFINE ALIAS command defines an alternate name for a non-VSAM\nNdata set or a user catalog.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1201": {"ttr": 6403, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1201\nTDFSMS AMS\nT-Chapter 12.\nT-Syntax for DEFINE ALIAS Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 12. DEFINE ALIAS\nN------------------------\nNSyntax for DEFINE ALIAS Parameters\nN----------------------------------\nD  DEFINE /* Abbreviation: DEF */ -\nN\nNRequired parameters\nN-------------------\nD    ALIAS( -\nI      Defines an alias for a user catalog or non-VSAM data set.\nN\nI      If the entryname in the RELATE parameter is non-VSAM, choose an\nI      aliasname in the NAME parameter. This is done to ensure the\nI      multilevel alias facility selects the catalog that has the\nI      entryname.\nN\nI      The multilevel alias facility and the system-generated name\nI      format requires special attention:\nN\nI      -> When you DEFINE a VSAM data set, point the data/index name to\nI         the same catalog as the cluster; otherwise, an error occurs.\nN\nI      -> During the DEFINE of a VSAM cluster or a generation data group\nI         (GDG), if the name of the cluster or GDG matches an existing\nI         alias or user catalog, the DEFINE request is denied with a\nI         duplicate name error. This prevents the data/index component\nI         or a generation data set (GDS) from becoming inaccessible.\nN\nI      -> When you add an alias to the catalog, ensure it does not cause\nI         existing data sets to become inaccessible.\nN\nI      For more details about using aliases for catalogs, see\nI      z/OS DFSMS Managing Catalogs.\nN\nD      NAME(aliasname) -\nI        Is the alias (the alternate entryname) for a user catalog or\nI        non-VSAM data set. An alias must be unique within a catalog.\nN\nD      RELATE(entryname) | /* Abbreviation: REL */ -\nD      SYMBOLICRELATE(entryname) /* Abbreviation: SYM */ -\nI        Restriction: The RELATE and SYMBOLICRELATE parameters are\nI        mutually exclusive and cannot be specified at the same time.\nI        The resolved value for entryname must be a catalog entry that\nI        is located in the same catalog that contains the value for\nI        aliasname.\nN\nI        RELATE(entryname) /* Abbreviation: REL */: Is the name of the\nI          entry (the user catalog entryname or the non-VSAM data set\nI          name) for which the alias is defined.\nN\nI        SYMBOLICRELATE(entryname) /* Abbreviation: SYM */: Allows the\nI          specification of the base data set name using system\nI          symbols.\nN\nI          For more details, see \"Extended Alias Support\" in z/OS\nI          DFSMS Managing Catalogs.\nN\nD    ) /* - */\nN\nNOptional parameters\nN-------------------\nM    CATALOG(catname) /* Abbreviation: CAT */\nI      Identifies the catalog in which the alias is defined. If the\nI      catalog's volume is physically mounted, it is dynamically\nI      allocated. The volume must be mounted as permanently resident\nI      or reserved. Search \"Catalog Selection Order for DEFINE\" for the\nI      order in which a catalog is selected when the catalog's name is\nI      not given.\nN\nI      catname/alias: Names the catalog or an alias that can be resolved\nI        to a catalog. When the alias is for a user catalog connector,\nI        catname is the name of the master catalog or user catalog in\nI        which the connector record has been defined.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC1211": {"ttr": 6405, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1211\nTDFSMS AMS\nT-Chapter 12.\nT-Example 1: Define Alias for a non-VSAM non-SMS-Managed Data Set\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094824\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 12. DEFINE ALIAS\nN------------------------\nNExample 1: Define Alias for a non-VSAM non-SMS-Managed Data Set\nN---------------------------------------------------------------\nMYUCK! IBM should have made one of those names a lot more different!\nN\nD//DEFALS1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    ALIAS( -\nD      NAME(EXAMPLE.NONVSAM1) -\nD      RELATE(EXAMPLE.NONVSAM) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE ALIAS parameters are:\nN--------------------------------\nN-> NAME: the alias (alternate entryname), EXAMPLE.NONVSAM1.\nN\nN-> RELATE: the entryname, EXAMPLE.NONVSAM, for which the alias is an\nN   alternate entryname.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1212": {"ttr": 6407, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1212\nTDFSMS AMS\nT-Chapter 12.\nT-Example 2: Define an Alias for a User Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094834\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 12. DEFINE ALIAS\nN------------------------\nNExample 2: Define an Alias for a User Catalog\nN---------------------------------------------\nD//DEFALS2  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    ALIAS( -\nD      NAME(RST) -\nD      RELATE(USERCAT.VWXUCAT1) -\nD    ) -\nD    CATALOG(MCAT.AMAST1)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE ALIAS parameters are:\nN--------------------------------\nN-> NAME: the alias, RST.\nN\nN-> RELATE: the name of the user catalog, USERCAT.VWXUCAT1, for which\nN   RST is an alternate entryname.\nN\nN-> CATALOG: the name of the master catalog MCAT.AMAST1 where the RST\nN   alias will be defined.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC13": {"ttr": 6409, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC13\nTDFSMS AMS\nT-Chapter 13. DEFINE ALTERNATEINDEX\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 13. DEFINE ALTERNATEINDEX\nN---------------------------------\nNThe DEFINE ALTERNATEINDEX command defines an alternate index. Use it\nNto show attributes for the alternate index as a whole and for the\nNcomponents of the alternate index.\nN\nNALTERNATEINDEX is comprised of three components:\nN  DEFINE -\nN    ALTERNATEINDEX( -\nN      parameters -\nN    ) -\nN    DATA( -\nN      parameters -\nN    ) -\nN    INDEX( -\nN      parameters -\nN    ) /* - */\nM    CATALOG(catname)\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1301": {"ttr": 6411, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1301\nTDFSMS AMS\nT-Chapter 13.\nT-Syntax for DEFINE ALTERNATEINDEX Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 13. DEFINE ALTERNATEINDEX\nN---------------------------------\nNSyntax for DEFINE ALTERNATEINDEX Parameters\nN-------------------------------------------\nD  DEFINE /* Abbreviation: DEF */ -\nN\nNALTERNATEINDEX parameters\nN-------------------------\nD    ALTERNATEINDEX( /* Abbreviation: AIX */ -\nI      Defines an alternate index or re-catalogs an alternate index\nI      entry.\nN\nI      The ALTERNATEINDEX keyword is followed by the parameters for the\nI      alternate index as a whole. These parameters are enclosed in\nI      parentheses and, optionally, are followed by parameters given\nI      separately for the DATA and INDEX components.\nN\nD      NAME(aliasname) -\nI        The name of the ALTERNATEINDEX component.\nI\nI        The alternate index's entryname or the name of each of its\nI        components. The entry name specified for the alternate index\nI        as a whole is not propagated to the alternate index's\nI        components.\nN\nI        You can define a separate entry name for the alternate index,\nI        its data component, and its index component. If you do not give\nI        a name for the data or index component, one is generated. For\nI        more information about the system-generated name format, see\nI        z/OS DFSMS Managing Catalogs.\nN\nI        When the alternate index, data component, and index component\nI        are individually named, each can be addressed.\nN\nD      RELATE(entryname) /* Abbreviation: REL */ -\nI        Names the alternate index base cluster. The base cluster is\nI        an entry-sequenced cluster or a key-sequenced cluster to which\nI        the alternate index is to be related. You cannot relate an\nI        alternate index to a reusable cluster, to a fixed-length or\nI        variable-length RRDS, an extended addressable ESDS, a catalog,\nI        a VVDS (data set name 'SYS1.VVDS.Vvolser'), another alternate\nI        index, a linear data set, or a non-VSAM data set. An\nI        SMS-managed alternate index has the same management class and\nI        storage class as its base cluster.\nN\nI        Select the entryname so that the multilevel alias facility\nI        selects the same catalog as the one containing the related\nI        data set name.\nN\nD      CYLINDERS(primary secondary) | /* Abbreviation: CYL */ -\nD      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -\nD      MEGABYTES(primary secondary) | /* Abbreviation: MB */ -\nD      RECORDS(primary secondary) | /* Abbreviation: REC */-\nD      TRACKS(primary secondary) /* Abbreviation: TRK */ -\nI        The amount of space in cylinders, kilobytes, megabytes,\nI        records, or tracks allocated to the alternate index from the\nI        volume's available space. A kilobyte and megabyte allocation\nI        resolves to either tracks or cylinders; records are allocated\nI        to the nearest track boundary. Exception: If allocation\nI        resolves to tracks, the space is contiguous. For more\nI        information, see \"Optimizing Control Area Size\" in\nI        z/OS DFSMS Using Data Sets.\nN\nI        Requests for space are directed to DADSM and result in a\nI        format-1 DSCB for the data and index component entries.\nN\nI        If you do not use the MODEL parameter or the RECATALOG\nI        parameter, you must include one, and only one, of these\nI        parameters: CYLINDERS, KILOBYTES, MEGABYTES, RECORDS, or\nI        TRACKS.\nN\nI        The space parameter is optional if the cluster is SMS-managed,\nI        but if you do not use it, space can be modeled or defaulted by\nI        SMS. If it is not determined, the DEFINE is unsuccessful. The\nI        maximum space can be specified with unit of KILOBYTES or\nI        MEGABYTES is 16,777,215. If the amount requested exceeds this\nI        value, you should specify a different larger allocation unit.\nN\nI        To maintain device independence, do not use the TRACKS or\nI        CYLINDERS parameters. If you do not use TRACKS or CYLINDERS\nI        for an SMS-managed alternate index, space is allocated on the\nI        volume selected by SMS.\nN\nM          These days the only mainframe DASD devices in use are\nM          likely to be 3390 and thus the caution about device\nM          independence is no longer applicable. If you have something\nM          else it is way past time to migrate to the current geometry.\nN\nI        When you do not divide the data component into key ranges, and\nI        more than one volume is given, the primary amount of space is\nI        allocated only on the first volume when the component is\nI        defined. When the component increases to extend to additional\nI        volumes, the first allocation on each overflow volume is the\nI        primary amount.\nN\nM          Since you can no longer specify KEYRANGE the above paragraph\nI          should be modified by IBM.\nN\nI        Secondary amounts can be allocated on all volumes available to\nI        contain parts of the alternate index, regardless of the key\nI        ranges when the alternate index is extended.\nN\nI        You can include the amount of space as a parameter of\nI        ALTERNATEINDEX, as a parameter of DATA, or as a parameter of\nI        both DATA and INDEX.\nN\nI        -> If the space is specified as a parameter of ALTERNATEINDEX,\nI           the amount specified is divided between the data and index\nI           components. The division algorithm is a function of control\nI           interval size, record size, device type, and other data set\nI           attributes.\nN\nI           If the division results in an allocation for the data\nI           component that is not an integral multiple of the required\nI           control area size, the data component's allocation is\nI           rounded up to the next higher control area multiple. This\nI           rounding can result in a larger total allocation for your\nI           alternate index than what you specified.\nN\nI           If the space is specified as a parameter of DATA, the entire\nI           amount given is allocated to the data component. An\nI           additional amount of space, depending on control interval\nI           size, record size, device type, and other data set\nI           attributes, is allocated to the index component.\nN\nI        To determine the exact amount of space allocated to each\nI        component, list the alternate index's catalog entry, using\nI        the LISTCAT command.\nN\nI        The primary and each secondary allocation must be able to be\nI        satisfied within five extents; otherwise, your DEFINE or data\nI        set extension is unsuccessful. You can use these keywords for\nI        both SMS managed and non-SMS-managed data sets.\nN\nI        primary: Allocates the initial amount of space to the\nI        alternate index.\nN\nI        secondary: Allocates the amount of space each time the\nI        alternate index extends, as a secondary extent. If the\nI        secondary space allocation is greater than 4.0 gigabytes, it\nI        is reduced to an amount as close to 4.0 GB as possible,\nI        without going over. This is not true for extended\nI        addressability data sets, which have no such space limitation.\nI        When you use secondary, space for the alternate index's data\nI        and index components can be expanded to a maximum of\nI        123 extents.\nN\nD      BUFFERSPACE(size) /* Abbreviations: BUFSP or BUFSPC */ -\nI        Provides the minimum space for buffers. VSAM determines the\nI        data component's and index component's control interval size.\nI        If you do not use BUFFERSPACE, VSAM provides enough space to\nI        contain two data component control intervals and, if the data\nI        is key-sequenced, one index component control interval.\nN\nI        size: is the buffer of space. You can use decimal (n),\nI          hexadecimal (X'n'), or binary (B'n'). The size cannot be\nI          less than enough space to contain two data component control\nI          intervals and, if the data is key sequenced, one index\nI          control interval.\nN\nI          If the buffer size is less than VSAM requires to run your\nI          job, it will be treated as though the parameter was not\nI          specified and the buffer size will be set to the default\nI          value.\nN\nI          Exception: When you use RLS or DFSMStvs access, DFSMS ignores\nI          BUFFERSPACE.\nN\nI          Note: The limitations of the bufferspace value on how many\nI          buffers will be allocated is based on storage available in\nI          your region, and other parameters or attributes of the data\nI          set.\nN\nD      CONTROLINTERVALSIZE(size) /* Abbreviations: CISZ or CNVSZ */ -\nI        Defines the size of the alternate index's control intervals.\nI        This depends on the maximum size of data records, and on the\nI        amount of buffer space given. LSR/GSR buffering technique\nI        users can ensure buffer pool selection by explicitly defining\nI        data and index control interval sizes.\nN\nI        When you do not specify the control interval size, VSAM\nI        determines the control interval size. If you have not specified\nI        BUFFERSPACE and the size of your records permits, VSAM selects\nI        the optimum size for the data control interval size and\nI        512 bytes for the index control interval size.\nN\nI        size: The size of the alternate index's data and index\nI          components.\nN\nI          Because an alternate index always has the spanned attribute,\nI          the control interval size can be less than the maximum\nI          record length. You can define a size from 512, to 8K in\nI          increments of 512 or from 8K to 32K in increments of 2K\nI          (where K is 1024 in decimal notation). If you use a size\nI          that is not a multiple of 512 or 2048, VSAM chooses the\nI          next higher multiple.\nN\nI          The index control interval should be large enough to\nI          accommodate all of the compressed keys in a data control\nI          area. If the index control interval size is too small,\nI          unnecessary control area splits can occur. After the first\nI          define (DEFINE), a catalog listing ( LISTC ) shows the number\nI          of control intervals in a control area and the key length\nI          of the data set. To make a general estimate of the index\nI          control interval size needed, multiply one-half of the key\nI          length (KEYLEN) by the number of data control intervals per\nI          control area (DATA CI/CA):\nN\nI          (KEYLEN/2 ) * DATA CI/CA <= INDEX CISIZE\nN\nI          For information about the relationship between control\nI          interval size and physical block size, see z/OS DFSMS Using\nI          Data Sets for the relationship between control interval size\nI          and physical block size. This document also includes\nI          restrictions that apply to control interval size and\nI          physical block size.\nN\nD      DATACLASS(class) /* Abbreviation: DATACLAS */ -\nI        The 1 to 8 character name of the data class for the data set.\nI        The DATACLASS parameter provides the allocation attributes for\nI        new data sets. Your storage administrator defines the data\nI        class. However, you can override the parameters defined for\nI        DATACLASS by explicitly defining other attributes. Search\nI        \"Understanding the Order of Assigned Data Set Attributes\" for\nI        the order of precedence (filtering) the system uses to select\nI        which attribute to assign. The record organization attribute\nI        of DATACLASS is not used for DEFINE ALTERNATEINDEX.\nn\ni        DATACLASS parameters apply to both SMS-managed and\nI        non-SMS-managed data sets. If DATACLASS is used and SMS is\nI        inactive, the DEFINE is unsuccessful.\nN\nD      ERASE | NOERASE /* Abbreviations: ERAS and NERAS */-\nI        indicates if the records of the alternate index components are\nI        erased when the alternate index is deleted.\nN\nI        ERASE: Requires the records of the alternate index components\nI          are overwritten with binary zeros when the alternate index\nI          is deleted. If the base cluster of the alternate index is\nI          protected by a RACF generic or discrete profile and the base\nI          cluster is cataloged in a catalog, you can use RACF commands\nI          to specify an ERASE attribute as part of this profile so that\nI          the component is automatically erased upon deletion.\nN\nI        NOERASE: Specifies that the records of the alternate index\nI          components are not to be overwritten with binary zeros.\nI          NOERASE prevents the component from being erased if the base\nI          cluster of the alternate index is protected by a RACF\nI          generic or discrete profile that specifies the ERASE\nI          attribute and if the base cluster is cataloged in a catalog.\nI          You can use RACF commands to alter the ERASE attribute in a\nI          profile.\nN\nD      EXCEPTIONEXIT(entrypoint) /* Abbreviation: EEXT */ -\nI        The name of your exception exit routine, that receives control\nI        when an exceptional I/O error condition occurs during the\nI        transfer of data between your program's address space and the\nI        alternate index's direct access storage space. (An exception\nI        is any condition that causes a SYNAD exit to be taken.) The\nI        component's exception exit routine is processed first; then\nI        SYNAD exit routine receives control. If an exception exit\nI        routine is loaded from an unauthorized library during access\nI        method services processing, an abnormal termination occurs.\nN\nD      FILE(ddname) -\nI        Names the DD statement that identifies the direct access\nI        devices and volumes on which to allocate space to the alternate\nI        index. If more than one volume is specified in a volume list,\nI        all volumes must be the same device type.\nN\nI        When the data component and index component are to reside on\nI        different devices, you can create a separate FILE parameter as\nI        a parameter of DATA and INDEX to point to different DD\nI        statements. If the FILE parameter is not used, an attempt is\nI        made to dynamically allocate the required volumes. The volumes\nI        must be mounted as permanently resident or reserved.\nN\nI        The DD statement you specify must be:\nN\nI          //ddname    DD DISP=OLD,\nI          //             UNIT=(devtype,count),VOL=SER=(volser1,...)\nN\nI        Restriction: When FILE refers to more than one volume of the\nI        same device type, the DD statement that describes the volumes\nI        cannot be a concatenated DD statement.\nN\nD      FREESPACE(CI-% CA-% | 0 0) /* Abbreviation: FSPC */ -\nI        Designates the amount of empty space left after any primary or\nI        secondary allocation and any split of control intervals\nI        (CI-percent) and control areas (CA-percent) when the alternate\nI        index is built (search Chapter 8, \"BLDINDEX\"). The empty space\nI        in the control interval and control area is available for data\nI        records that are updated and inserted after the alternate\nI        index is initially built. The amounts are specified as\nI        percentages. CI-percent translates into a number of bytes that\nI        is either equal to, or slightly less than, the percentage\nI        value of CI-percent. CA-percent translates into a number of\nI        control intervals that is either equal to, or less than, the\nI        percentage of CA-percent.\nN\nI        The percentages must be equal to, or less than, 100. When you\nI        use 100% of free space, one data record is placed in the first\nI        control interval of each control area when the alternate index\nI        is built.\nN\nD      KEYS(length offset | 64 0) -\nI        Describes the alternate-key field in the base cluster's data\nI        record.\nN\nI        The key field of an alternate index is called an alternate key.\nI        The data record's alternate key can overlap or be contained\nI        entirely within another (alternate or prime) key field.\nN\nI        The length plus offset cannot be greater than the length of\nI        the base cluster's data record.\nN\nI        When the base cluster's data record spans control intervals,\nI        the record's alternate-key field is within the record's first\nI        segment (that is, in the first control interval).\nN\nI        length offset: Gives the length of the alternate key, in bytes,\nI          and its displacement from the beginning of the base cluster's\nI          data record, in bytes.\nN\nD      MODEL(entryname catname) -\nI        Uses existing entry as a model for the entry being defined or\nI        re-cataloged. DATACLASS, MANAGEMENTCLASS, and STORAGECLASS\nI        cannot be modeled. Search \"Understanding the Order of Assigned\nI        Data Set Attributes\" for information on how the system selects\nI        modeled attributes.\nN\nI        You can use an existing alternate index's entry as a model for\nI        the attributes of the alternate index being defined. For\nI        details about how a model is used, see z/OS DFSMS Managing\nI        Catalogs.\nN\nI        You can use some attributes of the model and override others\nI        by defining them in the cluster or component. If you do not\nI        want to add or change any attributes, use only the entry type\nI        of the model (alternate index, data, or index) and the name of\nI        the entry to be defined.\nN\nI        When you use an alternate index entry as a model for an\nI        alternate index, the model entry's data and index components\nI        are used as models for the to-be-defined entry's data and index\nI        components, unless another entry is specified with the MODEL\nI        parameter as a subparameter of DATA or INDEX.\nN\nI        entryname: Names the entry to be used as a model.\nN\nI        catname: Names the model entry's catalog. You must identify the\nI          catalog that contains the model entry when you want to assign\nI          the catalog's password instead of the model entry's password.\nN\nI          If the catalog's volume is physically mounted, it is\nI          dynamically allocated. The volume must be mounted as\nI          permanently resident or reserved. Search \"Catalog Selection\nI          Order for DEFINE\" for information about the order in which\nI          a catalog is selected when the catalog's name is not\nI          specified.\nN\nD      OWNER(ownerid) -\nI        Gives the identification of the alternate index's owner.\nN\nI        For TSO/E users, if the OWNER parameter does not identify the\nI        owner, the TSO/E user's userid becomes the ownerid value.\nN\nD      RECATALOG | NORECATALOG /* Abbreviations: RCTLG and NRCTLG */ -\nI        Specifies whether the catalog entries for the alternate index\nI        components are re-created from information in the VVDS.\nN\nI        RECATALOG /* Abbreviation: RCTLG */: Recreates the catalog\nI          entries if valid VVDS entries are found on the primary VVDS\nI          volume. If not, the command ends.\nN\nI          Use of RECATALOG requires that the NAME, RELATE, and VOLUMES\nI          parameters be specified as they were when the alternate index\nI          was originally defined. If you use RECATALOG, you are not\nI          required to include CYLINDERS, RECORDS, or TRACKS.\nN\nI          If ATTEMPTS, AUTHORIZATION, CATALOG, CODE, MODEL, NOUPGRADE,\nI          or OWNER parameters were used during the original define,\nI          they must be entered again with RECATALOG to restore their\nI          original values; otherwise, their default values are used.\nN\nI        NORECATALOG /* Abbreviation: NRCTLG */: Specifies that the\nI          catalog entries are not to be re-created from VVDS entries.\nI          Catalog entries are created for the first time.\nN\nD      RECORDSIZE(average maximum | 4086 32600) -\nI        The average and maximum length, in bytes, of an alternate\nI        index record.\nN\nI        An alternate index record can span control intervals, so\nI        RECORDSIZE can be larger than CONTROLINTERVALSIZE. The formula\nI        for the maximum record size of spanned records as calculated\nI        by VSAM is:\nN\nI          MAXLRECL = CI/CA * (CISZ - 10)\nN\nI        where:\nN\nI        -> MAXLRECL is the maximum spanned record size\nN\nI        -> CI/CA represents the number of control intervals per\nI           control area\nN\nI        -> CA is the number of control areas\nN\nI        -> CISZ is the quantity control interval size\nN\nI        You can use either of the following formulas to determine the\nI        size of the alternate index record:\nN\nI        -> When the alternate index supports a key-sequenced base\nI           cluster, use this formula:\nN\nI           RECSZ = 5 + AIXKL + (n x BCKL)\nN\nI        -> When the alternate index supports an entry-sequenced base\nI           cluster, use this formula:\nN\nI           RECSZ = 5 + AIXKL + (n x 4)\nN\nI        Variables in the formulas represent these values:\nN\nI        -> RECSZ is the average record size.\nN\nI        -> AIXKL is the alternate-key length (see the KEYS parameter).\nN\nI        -> BCKL is the base cluster's prime-key length. (You can enter\nI           the LISTCAT command to determine this base cluster's\nI           prime-key length).\nN\nI        -> n = 1 when UNIQUEKEY is specified (RECSZ is also the maximum\nI           record size).\nN\nI        -> n = the number of data records in the base cluster that\nI           contain the same alternate-key value, when NONUNIQUEKEY is\nI           specified.\nN\nI        When you use NONUNIQUEKEY, give a record size large enough to\nI        allow for as many key pointers or RBA pointers as you might\nI        need. The record length values apply only to the alternate\nI        index's data component.\nN\nI        Restriction: REPRO to non-VSAM targets and EXPORT do not\nI        support data sets with record sizes greater than 32760. The\nI        maximum number of prime keys that a single alternate index\nI        logical record can contain is 32767.\nN\nD      REUSE | NOREUSE /* Abbreviations: RUS and NRUS */ -\nI        Indicates whether or not the alternate index can be used again\nI        as a new alternate index.\nN\nI        REUSE /* Abbreviation: RUS */: Indicates that the alternate\nI          index can be used over again as a new alternate index. When\nI          a reusable alternate index is opened, its high-used RBA can\nI          be set to zero. Open it with an access control block using\nI          the RESET attribute.\nN\nI          When you use BLDINDEX to build a reusable alternate index,\nI          the high-used RBA is always reset to zero when the alternate\nI          index is opened for BLDINDEX processing.\nN\nI          Reusable alternate indexes can be multivolumed and might have\nI          up to 123 physical extents.\nN\nI          Exception: If you use the keyword UNIQUE with REUSE, the\nI          DEFINE command is unsuccessful.\nN\nI        NOREUSE /* Abbreviation: NRUS */: Specifies that the alternate\nI          index cannot be used again as a new alternate index.\nN\nD      SHAREOPTIONS(crossregion crosssystem | 1 3) -\nD        /* Abbreviation: SHR */ -\nI        Specifies how an alternate index's data or index component can\nI        be shared among users. However, SMS-managed volumes, and\nI        catalogs containing SMS-managed data sets, must not be shared\nI        with non-SMS systems. For data integrity, ensure that share\nI        options defined for data and index components are the same.\nI        For a description of data set sharing, see z/OS DFSMS Using\nI        Data Sets.\nN\nI        crossregion: Indicates the amount of sharing allowed among\nI          regions within the same system or within multiple systems\nI          using global resource serialization (GRS). Independent job\nI          steps in an operating system, or multiple systems in a GRS\nI          ring, can access a VSAM data set concurrently. For more\nI          information about GRS, see z/OS MVS Planning: Global Resource\nI          Serialization. To share a data set, each user must include\nI          DISP=SHR in the data set's DD statement. You can use the\nI          following options:\nN\nI        1: The data set can be shared by any number of users for read\nI           processing, or the data set can be accessed by only one user\nI           for read and write processing. This setting does not allow\nI           any non-RLS access when the data set is already open for\nI           VSAM RLS or DFSMStvs processing. An RLS or DFSMStvs open\nI           fails with this option if the data set is already open for\nI           any processing.\nN\nI        2: The data set can be accessed by any number of users for read\nI           processing, and it can also be accessed by one user for\nI           write processing. It is the user's responsibility to provide\nI           read integrity. VSAM ensures write integrity by obtaining\nI           exclusive control for a control interval while it is being\nI           updated. A VSAM RLS or DFSMStvs open is not allowed while\nI           the data set is open for non-RLS output.\nN\nI           If the data set has already been opened for VSAM RLS or\nI           DFSMStvs processing, a non-RLS open for input is allowed;\nI           a non-RLS open for output fails. If the data set is opened\nI           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is\nI           allowed.\nN\nI        3: The data set can be fully shared by any number of users. The\nI           user is responsible for maintaining both read and write\nI           integrity for the data the program accesses. This setting\nI           does not allow any non-RLS access when the data set is\nI           already open for VSAM RLS or DFSMStvs processing. If the\nI           data set is opened for input in non-RLS mode, a VSAM RLS or\nI           DFSMStvs open is allowed.\nN\nI           This option is the only one applicable to a catalog.\nN\nI        4: The data set can be fully shared by any number of users. For\nI           each request, VSAM refreshes the buffers used for direct\nI           processing. This setting does not allow any non-RLS access\nI           when the data set is already open for VSAM RLS or DFSMStvs\nI           processing. If the data set is opened for input in non-RLS\nI           mode, a VSAM RLS or DFSMStvs open is allowed.\nN\nI           As in SHAREOPTIONS 3, each user is responsible for\nI           maintaining both read and write integrity for the data the\nI           program accesses.\nN\nI        crosssystem: Specifies the amount of sharing allowed among\nI          systems. Job steps of two or more operating systems can gain\nI          access to the same VSAM data set regardless of the\nI          disposition specified in each step's DD statement for the\nI          data set. However, if you are using GRS across systems or\nI          JES3, the data set might not be shared depending on the\nI          disposition of the system.\nN\nI          To get exclusive control of the data set's volume, a task\nI          in one system issues the RESERVE macro. The level of\nI          cross-system sharing allowed by VSAM applies only in a\nI          multiple operating system environment.\nN\nI          The cross-system sharing options are ignored by VSAM RLS or\nI          DFSMStvs processing. The values are:\nN\nI          1: Reserved.\nN\nI          2: Reserved.\nN\nI          3: Specifies that the data set can be fully shared. Each\nI             user is responsible for maintaining both read and write\nI             integrity for the data that user's program accesses. User\nI             programs that ignore write integrity guidelines can result\nI             in:\nN\nI            -> VSAM program checks\nN\nI            -> Uncorrectable data set errors\nN\nI            -> Unpredictable results\nN\nI            The RESERVE and DEQ macros are required with this option\nI            to maintain data set integrity. (See z/OS MVS Programming:\nI            Authorized Assembler Services Reference ALE-DYN and\nI            z/OS MVS Programming: Authorized Assembler Services\nI            Reference LLA-SDU for information on using RESERVE and DEQ.)\nI            If the sphere is accessed using VSAM RLS or DFSMStvs\nI            protocols, VSAM RLS maintains the required integrity.\nN\nI          4: Specifies that the data set can be fully shared. For each\nI             request, VSAM refreshes the buffers used for direct\nI             processing. This option requires that you use the RESERVE\nI             and DEQ macros to maintain data integrity while sharing\nI             the data set. Improper use of the RESERVE macro can cause\nI             problems similar to those described under SHAREOPTIONS 3.\nI             (See z/OS MVS Programming: Authorized Assembler Services\nI             Reference ALE-DYN and z/OS MVS Programming: Authorized\nI             Assembler Services Reference LLA-SDU for information on\nI             using RESERVE and DEQ.) Output processing is limited to\nI             update, or add processing, or both that does not change\nI             either the high-used RBA or the RBA of the high key data\nI             control interval if DISP=SHR is used.\nN\nI            To ensure data integrity in a shared environment, VSAM\nI            provides users of SHAREOPTIONS 4 (cross-region and\nI            cross-system) with the following assistance:\nN\nI            -> Each PUT writes the appropriate buffer immediately into\nI               the VSAM object's DASD. VSAM writes out the buffer in\nI               the user's address space that contains the new or\nI               updated data record.\nN\nI            -> Each GET refreshes the user's input buffers. The\nI               contents of each data and index buffer used by the\nI               user's program is retrieved from the VSAM object's DASD.\nN\nI            Exception: If you use VSAM RLS or DFSMStvs, SHAREOPTIONS\nI            is assumed to be (3,3). If you do not use VSAM RLS or\nI            DFSMStvs, the SHAREOPTIONS specification is respected.\nN\nD      SPEED | RECOVERY /* Abbreviation: RCVY */ -\nI        Specifies whether the data component's control areas are to be\nI        preformatted during loading.\nN\nI        This parameter is only considered during the actual loading\nI        (creation) of a data set. Creation occurs when the data set is\nI        opened and the high-used RBA is equal to zero. After normal\nI        CLOSE processing at the completion of the load operation, the\nI        physical structure of the data set and the content of the data\nI        set extents are exactly the same, regardless of which option is\nI        used. Any processing of the data set after the successful load\nI        operation is the same, and the specification of this parameter\nI        is not considered.\nN\nI        If you use RECOVERY, the initial load takes longer because the\nI        control areas are first written with either empty or software\nI        end-of-file control intervals. These preformatted control\nI        intervals are then updated, using update writes with the data\nI        records. When SPEED is used, the initial load is faster.\nN\nI        SPEED: Does not preformat the data component's space.\nN\nI          If the initial load is unsuccessful, you must load the data\nI          set again from the beginning because VSAM cannot determine\nI          the location of your last correctly written record. VSAM\nI          cannot find a valid end-of-file indicator when it searches\nI          your data records.\nN\nI        RECOVERY /* Abbreviation: RCVY */: Does preformat the data\nI          component's space prior to writing the data records.\nN\nI          If the initial load is unsuccessful, VSAM can determine the\nI          location of the last record written during the load process.\nN\nD      UNIQUEKEY | NONUNIQUEKEY /* Abbreviations: UNQK and NUNQK */ -\nI        Shows whether more than one data record (in the base cluster)\nI        can contain the same key value for the alternate index.\nN\nI        UNIQUEKEY /* Abbreviation: UNQK */: Points each alternate index\nI          key to only one data record. When the alternate index is\nI          built (search Chapter 8, \"BLDINDEX\") and more than one data\nI          record contains the same key value for the alternate index,\nI          the BLDINDEX processing ends with an error message.\nN\nI        NONUNIQUEKEY /* Abbreviation: NUNQK */: points a key value for\nI          the alternate index to more than one data record in the base\nI          cluster. The alternate index's key record points to a maximum\nI          of 32768 records with non-unique keys.\nN\nI          When you include NONUNIQUEKEY, the maximum record size should\nI          be large enough to allow for alternate index records that\nI          point to more than one data record.\nN\nD      UPGRADE | NOUPGRADE /* Abbreviations: UPG and NUPG */ -\nI        Specifies whether or not the alternate index is to be upgraded\nI        (that is, kept up to date) when its base cluster is modified.\nN\nI        UPGRADE /* Abbreviation: UPG */ Upgrades the cluster's\nI          alternate index to reflect changed data when the base\nI          cluster's records are added to, updated, or erased.\nN\nI          When UPGRADE is specified, the alternate index's name is\nI          cataloged with the names of other alternate indexes for the\nI          base cluster. The group of alternate index names identifies\nI          the upgrade set that includes all the base cluster's\nI          alternate indexes that are opened when the base cluster is\nI          opened for write operations.\nN\nI          The UPGRADE attribute is not effective for the alternate\nI          index until the alternate index is built (search Chapter 8,\nI          \"BLDINDEX\"). If the alternate index is defined when the base\nI          cluster is open, the UPGRADE attribute takes effect the next\nI          time the base cluster is opened.\nN\nI        NOUPGRADE /* Abbreviation: NUPG */: Specifies that the\nI          alternate index does not upgrade when its base cluster is\nI          modified.\nN\nD      VOLUMES(volser volser...) /* Abbreviation: VOL */ -\nI        Specifies the volumes on which an alternate index's components\nI        are to have space. This parameter is not required if the\nI        cluster is modeled or if the cluster is SMS-managed. You can\nI        specify VOLUMES for SMS-managed data sets; however, the volumes\nI        specified might not be used and, in some cases, can result in\nI        an error.\nn\nI        For SMS-managed data sets, you can use up to 59 volumes. If the\nI        combined number of volumes for a cluster and its associated\nI        alternate indexes exceeds 59, unpredictable results can occur.\nn\nI        You can let SMS choose the volumes for SMS-managed data sets by\nI        coding an * for the volser with the VOLUMES parameter. If both\nI        user-specified and SMS-specified volumes are requested, the\nI        user-specified volser must be input first in the command\nI        syntax. The default is one volume.\nN\nI        If you do not use the MODEL parameter, VOLUMES must be placed\nI        as a parameter of ALTERNATEINDEX, or as a parameter of both\nI        DATA and INDEX.\nN\nI        If the data and index components are to reside on different\nI        device types, you must include VOLUMES as a parameter of both\nI        DATA and INDEX. If more than one volume is listed with a single\nI        VOLUMES parameter, the volumes must be the same device type.\nN\nI        You can repeat a volume serial number in the list only if you\nI        use the KEYRANGE parameter. This can place more than one key\nI        range on the same volume. However, repetition is valid only if\nI        all duplicate occurrences are used for the primary allocation\nI        of some key range.\nN\nM          You are not allowed to specify KEYRANGE.\nN\nI        The VOLUMES parameter interacts with other\nI        DEFINE ALTERNATEINDEX parameters. Ensure that the volumes you\nI        define for the alternate index are consistent with the\nI        alternate index's other attributes:\nN\nI        -> CYLINDERS, RECORDS, TRACKS: The volumes contain enough\nI           available space to satisfy the component's primary space\nI           requirement.\nN\nI        -> FILE: To define an alternate index, the volume information\nI           supplied with the DD statement pointed to by FILE must be\nI           consistent with the information listed for the alternate\nI           index and its components.\nN\nD      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */ -\nI        Determines whether an alternate index or component is checked\nI        by a machine action called write-check when a record is written\nI        into it.\nN\nI        WRITECHECK /* Abbreviation: WCK */: Indicates that a record is\nI          written and then read, without data transfer, to test for the\nI          data check condition.\nN\nI          Exception: When you use VSAM RLS or DFSMStvs access, the\nN          WRITECHECK parameter is ignored.\nN\nI        NOWRITECHECK /* Abbreviation: NWCK */: Does not write-check the\nI          alternate index or component. checked by a write check.\nN\nD    ) -\nNDATA parameters\nN---------------\nD      CYLINDERS(primary secondary) | /* Abbreviation: CYL */ -\nD      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -\nD      MEGABYTES(primary secondary) | /* Abbreviation: MB */ -\nD      RECORDS(primary secondary) | /* Abbreviation: REC */-\nD      TRACKS(primary secondary) /* Abbreviation: TRK */ -\nI        The amount of space in cylinders, kilobytes, megabytes,\nI        records, or tracks allocated to the alternate index from the\nI        volume's available space. A kilobyte and megabyte allocation\nI        resolves to either tracks or cylinders; records are allocated\nI        to the nearest track boundary. Exception: If allocation\nI        resolves to tracks, the space is contiguous. For more\nI        information, see \"Optimizing Control Area Size\" in\nI        z/OS DFSMS Using Data Sets.\nN\nI        Requests for space are directed to DADSM and result in a\nI        format-1 DSCB for the data and index component entries.\nN\nI        If you do not use the MODEL parameter or the RECATALOG\nI        parameter, you must include one, and only one, of these\nI        parameters: CYLINDERS, KILOBYTES, MEGABYTES, RECORDS, or\nI        TRACKS.\nN\nI        The space parameter is optional if the cluster is SMS-managed,\nI        but if you do not use it, space can be modeled or defaulted by\nI        SMS. If it is not determined, the DEFINE is unsuccessful. The\nI        maximum space can be specified with unit of KILOBYTES or\nI        MEGABYTES is 16,777,215. If the amount requested exceeds this\nI        value, you should specify a different larger allocation unit.\nN\nI        To maintain device independence, do not use the TRACKS or\nI        CYLINDERS parameters. If you do not use TRACKS or CYLINDERS\nI        for an SMS-managed alternate index, space is allocated on the\nI        volume selected by SMS.\nN\nM          These days the only mainframe DASD devices in use are\nM          likely to be 3390 and thus the caution about device\nM          independence is no longer applicable. If you have something\nM          else it is way past time to migrate to the current geometry.\nN\nI        When you do not divide the data component into key ranges, and\nI        more than one volume is given, the primary amount of space is\nI        allocated only on the first volume when the component is\nI        defined. When the component increases to extend to additional\nI        volumes, the first allocation on each overflow volume is the\nI        primary amount.\nN\nM          Since you can no longer specify KEYRANGE the above paragraph\nI          should be modified by IBM.\nN\nI        Secondary amounts can be allocated on all volumes available to\nI        contain parts of the alternate index, regardless of the key\nI        ranges when the alternate index is extended.\nN\nI        You can include the amount of space as a parameter of\nI        ALTERNATEINDEX, as a parameter of DATA, or as a parameter of\nI        both DATA and INDEX.\nN\nI        -> If the space is specified as a parameter of ALTERNATEINDEX,\nI           the amount specified is divided between the data and index\nI           components. The division algorithm is a function of control\nI           interval size, record size, device type, and other data set\nI           attributes.\nN\nI           If the division results in an allocation for the data\nI           component that is not an integral multiple of the required\nI           control area size, the data component's allocation is\nI           rounded up to the next higher control area multiple. This\nI           rounding can result in a larger total allocation for your\nI           alternate index than what you specified.\nN\nI           If the space is specified as a parameter of DATA, the entire\nI           amount given is allocated to the data component. An\nI           additional amount of space, depending on control interval\nI           size, record size, device type, and other data set\nI           attributes, is allocated to the index component.\nN\nI        To determine the exact amount of space allocated to each\nI        component, list the alternate index's catalog entry, using\nI        the LISTCAT command.\nN\nI        The primary and each secondary allocation must be able to be\nI        satisfied within five extents; otherwise, your DEFINE or data\nI        set extension is unsuccessful. You can use these keywords for\nI        both SMS managed and non-SMS-managed data sets.\nN\nI        primary: Allocates the initial amount of space to the\nI        alternate index.\nN\nI        secondary: Allocates the amount of space each time the\nI        alternate index extends, as a secondary extent. If the\nI        secondary space allocation is greater than 4.0 gigabytes, it\nI        is reduced to an amount as close to 4.0 GB as possible,\nI        without going over. This is not true for extended\nI        addressability data sets, which have no such space limitation.\nI        When you use secondary, space for the alternate index's data\nI        and index components can be expanded to a maximum of\nI        123 extents.\nN\nM      ATTEMPTS(number) -\nM        IBM did not provide any details for this parameter.\nN\nM      AUTHORIZATION(entrypoint string) -\nM        IBM did not provide any details for this parameter.\nN\nD      BUFFERSPACE(size) /* Abbreviations: BUFSP or BUFSPC */ -\nI        Provides the minimum space for buffers. VSAM determines the\nI        data component's and index component's control interval size.\nI        If you do not use BUFFERSPACE, VSAM provides enough space to\nI        contain two data component control intervals and, if the data\nI        is key-sequenced, one index component control interval.\nN\nI        size: is the buffer of space. You can use decimal (n),\nI          hexadecimal (X'n'), or binary (B'n'). The size cannot be\nI          less than enough space to contain two data component control\nI          intervals and, if the data is key sequenced, one index\nI          control interval.\nN\nI          If the buffer size is less than VSAM requires to run your\nI          job, it will be treated as though the parameter was not\nI          specified and the buffer size will be set to the default\nI          value.\nN\nI          Exception: When you use RLS or DFSMStvs access, DFSMS ignores\nI          BUFFERSPACE.\nN\nI          Note: The limitations of the bufferspace value on how many\nI          buffers will be allocated is based on storage available in\nI          your region, and other parameters or attributes of the data\nI          set.\nN\nM      CODE(code) -\nM        IBM did not provide any details for this parameter.\nN\nD      CONTROLINTERVALSIZE(size) /* Abbreviations: CISZ or CNVSZ */ -\nI        Defines the size of the alternate index's control intervals.\nI        This depends on the maximum size of data records, and on the\nI        amount of buffer space given. LSR/GSR buffering technique\nI        users can ensure buffer pool selection by explicitly defining\nI        data and index control interval sizes.\nN\nI        When you do not specify the control interval size, VSAM\nI        determines the control interval size. If you have not specified\nI        BUFFERSPACE and the size of your records permits, VSAM selects\nI        the optimum size for the data control interval size and\nI        512 bytes for the index control interval size.\nN\nI        size: The size of the alternate index's data and index\nI          components.\nN\nI          Because an alternate index always has the spanned attribute,\nI          the control interval size can be less than the maximum\nI          record length. You can define a size from 512, to 8K in\nI          increments of 512 or from 8K to 32K in increments of 2K\nI          (where K is 1024 in decimal notation). If you use a size\nI          that is not a multiple of 512 or 2048, VSAM chooses the\nI          next higher multiple.\nN\nI          The index control interval should be large enough to\nI          accommodate all of the compressed keys in a data control\nI          area. If the index control interval size is too small,\nI          unnecessary control area splits can occur. After the first\nI          define (DEFINE), a catalog listing ( LISTC ) shows the number\nI          of control intervals in a control area and the key length\nI          of the data set. To make a general estimate of the index\nI          control interval size needed, multiply one-half of the key\nI          length (KEYLEN) by the number of data control intervals per\nI          control area (DATA CI/CA):\nN\nI          (KEYLEN/2 ) * DATA CI/CA <= INDEX CISIZE\nN\nI          For information about the relationship between control\nI          interval size and physical block size, see z/OS DFSMS Using\nI          Data Sets for the relationship between control interval size\nI          and physical block size. This document also includes\nI          restrictions that apply to control interval size and\nI          physical block size.\nN\nD      ERASE | NOERASE /* Abbreviations: ERAS and NERAS */-\nI        indicates if the records of the alternate index components are\nI        erased when the alternate index is deleted.\nN\nI        ERASE: Requires the records of the alternate index components\nI          are overwritten with binary zeros when the alternate index\nI          is deleted. If the base cluster of the alternate index is\nI          protected by a RACF generic or discrete profile and the base\nI          cluster is cataloged in a catalog, you can use RACF commands\nI          to specify an ERASE attribute as part of this profile so that\nI          the component is automatically erased upon deletion.\nN\nI        NOERASE: Specifies that the records of the alternate index\nI          components are not to be overwritten with binary zeros.\nI          NOERASE prevents the component from being erased if the base\nI          cluster of the alternate index is protected by a RACF\nI          generic or discrete profile that specifies the ERASE\nI          attribute and if the base cluster is cataloged in a catalog.\nI          You can use RACF commands to alter the ERASE attribute in a\nI          profile.\nN\nD      EXCEPTIONEXIT(entrypoint) /* Abbreviation: EEXT */ -\nI        The name of your exception exit routine, that receives control\nI        when an exceptional I/O error condition occurs during the\nI        transfer of data between your program's address space and the\nI        alternate index's direct access storage space. (An exception\nI        is any condition that causes a SYNAD exit to be taken.) The\nI        component's exception exit routine is processed first; then\nI        SYNAD exit routine receives control. If an exception exit\nI        routine is loaded from an unauthorized library during access\nI        method services processing, an abnormal termination occurs.\nN\nD      FILE(ddname) -\nI        Names the DD statement that identifies the direct access\nI        devices and volumes on which to allocate space to the alternate\nI        index. If more than one volume is specified in a volume list,\nI        all volumes must be the same device type.\nN\nI        When the data component and index component are to reside on\nI        different devices, you can create a separate FILE parameter as\nI        a parameter of DATA and INDEX to point to different DD\nI        statements. If the FILE parameter is not used, an attempt is\nI        made to dynamically allocate the required volumes. The volumes\nI        must be mounted as permanently resident or reserved.\nN\nI        The DD statement you specify must be:\nN\nI          //ddname    DD DISP=OLD,\nI          //             UNIT=(devtype,count),VOL=SER=(volser1,...)\nN\nI        Restriction: When FILE refers to more than one volume of the\nI        same device type, the DD statement that describes the volumes\nI        cannot be a concatenated DD statement.\nN\nD      FREESPACE(CI-% CA-% | 0 0) /* Abbreviation: FSPC */ -\nI        Designates the amount of empty space left after any primary or\nI        secondary allocation and any split of control intervals\nI        (CI-percent) and control areas (CA-percent) when the alternate\nI        index is built (search Chapter 8, \"BLDINDEX\"). The empty space\nI        in the control interval and control area is available for data\nI        records that are updated and inserted after the alternate\nI        index is initially built. The amounts are specified as\nI        percentages. CI-percent translates into a number of bytes that\nI        is either equal to, or slightly less than, the percentage\nI        value of CI-percent. CA-percent translates into a number of\nI        control intervals that is either equal to, or less than, the\nI        percentage of CA-percent.\nN\nI        The percentages must be equal to, or less than, 100. When you\nI        use 100% of free space, one data record is placed in the first\nI        control interval of each control area when the alternate index\nI        is built.\nN\nD      KEYS(length offset | 64 0) -\nI        Describes the alternate-key field in the base cluster's data\nI        record.\nN\nI        The key field of an alternate index is called an alternate key.\nI        The data record's alternate key can overlap or be contained\nI        entirely within another (alternate or prime) key field.\nN\nI        The length plus offset cannot be greater than the length of\nI        the base cluster's data record.\nN\nI        When the base cluster's data record spans control intervals,\nI        the record's alternate-key field is within the record's first\nI        segment (that is, in the first control interval).\nN\nI        length offset: Gives the length of the alternate key, in bytes,\nI          and its displacement from the beginning of the base cluster's\nI          data record, in bytes.\nN\nD      MODEL(entryname catname) -\nI        Uses existing entry as a model for the entry being defined or\nI        re-cataloged. DATACLASS, MANAGEMENTCLASS, and STORAGECLASS\nI        cannot be modeled. Search \"Understanding the Order of Assigned\nI        Data Set Attributes\" for information on how the system selects\nI        modeled attributes.\nN\nI        You can use an existing alternate index's entry as a model for\nI        the attributes of the alternate index being defined. For\nI        details about how a model is used, see z/OS DFSMS Managing\nI        Catalogs.\nN\nI        You can use some attributes of the model and override others\nI        by defining them in the cluster or component. If you do not\nI        want to add or change any attributes, use only the entry type\nI        of the model (alternate index, data, or index) and the name of\nI        the entry to be defined.\nN\nI        When you use an alternate index entry as a model for an\nI        alternate index, the model entry's data and index components\nI        are used as models for the to-be-defined entry's data and index\nI        components, unless another entry is specified with the MODEL\nI        parameter as a subparameter of DATA or INDEX.\nN\nI        entryname: Names the entry to be used as a model.\nN\nI        catname: Names the model entry's catalog. You must identify the\nI          catalog that contains the model entry when you want to assign\nI          the catalog's password instead of the model entry's password.\nN\nI          If the catalog's volume is physically mounted, it is\nI          dynamically allocated. The volume must be mounted as\nI          permanently resident or reserved. Search \"Catalog Selection\nI          Order for DEFINE\" for information about the order in which\nI          a catalog is selected when the catalog's name is not\nI          specified.\nN\nD      NAME(entryname) -\nI        The name of the DATA component.\nN\nI        You can define a separate entry name for the alternate index,\nI        its data component, and its index component. If you do not give\nI        a name for the data or index component, one is generated. For\nI        more information about the system-generated name format, see\nI        z/OS DFSMS Managing Catalogs.\nN\nI        When the alternate index, data component, and index component\nI        are individually named, each can be addressed.\nN\nD      OWNER(ownerid) -\nI        Gives the identification of the alternate index's owner.\nN\nI        For TSO/E users, if the OWNER parameter does not identify the\nI        owner, the TSO/E user's userid becomes the ownerid value.\nN\nD      RECORDSIZE(average maximum) -\nI        The average and maximum length, in bytes, of an alternate\nI        index record.\nN\nI        An alternate index record can span control intervals, so\nI        RECORDSIZE can be larger than CONTROLINTERVALSIZE. The formula\nI        for the maximum record size of spanned records as calculated\nI        by VSAM is:\nN\nI          MAXLRECL = CI/CA * (CISZ - 10)\nN\nI        where:\nN\nI        -> MAXLRECL is the maximum spanned record size\nN\nI        -> CI/CA represents the number of control intervals per\nI           control area\nN\nI        -> CA is the number of control areas\nN\nI        -> CISZ is the quantity control interval size\nN\nI        You can use either of the following formulas to determine the\nI        size of the alternate index record:\nN\nI        -> When the alternate index supports a key-sequenced base\nI           cluster, use this formula:\nN\nI           RECSZ = 5 + AIXKL + (n x BCKL)\nN\nI        -> When the alternate index supports an entry-sequenced base\nI           cluster, use this formula:\nN\nI           RECSZ = 5 + AIXKL + (n x 4)\nN\nI        Variables in the formulas represent these values:\nN\nI        -> RECSZ is the average record size.\nN\nI        -> AIXKL is the alternate-key length (see the KEYS parameter).\nN\nI        -> BCKL is the base cluster's prime-key length. (You can enter\nI           the LISTCAT command to determine this base cluster's\nI           prime-key length).\nN\nI        -> n = 1 when UNIQUEKEY is specified (RECSZ is also the maximum\nI           record size).\nN\nI        -> n = the number of data records in the base cluster that\nI           contain the same alternate-key value, when NONUNIQUEKEY is\nI           specified.\nN\nI        When you use NONUNIQUEKEY, give a record size large enough to\nI        allow for as many key pointers or RBA pointers as you might\nI        need. The record length values apply only to the alternate\nI        index's data component.\nN\nI        Restriction: REPRO to non-VSAM targets and EXPORT do not\nI        support data sets with record sizes greater than 32760. The\nI        maximum number of prime keys that a single alternate index\nI        logical record can contain is 32767.\nN\nD      REUSE | NOREUSE /* Abbreviations: RUS and NRUS */ -\nI        Indicates whether or not the alternate index can be used again\nI        as a new alternate index.\nN\nI        REUSE /* Abbreviation: RUS */: Indicates that the alternate\nI          index can be used over again as a new alternate index. When\nI          a reusable alternate index is opened, its high-used RBA can\nI          be set to zero. Open it with an access control block using\nI          the RESET attribute.\nN\nI          When you use BLDINDEX to build a reusable alternate index,\nI          the high-used RBA is always reset to zero when the alternate\nI          index is opened for BLDINDEX processing.\nN\nI          Reusable alternate indexes can be multivolumed and might have\nI          up to 123 physical extents.\nN\nI          Exception: If you use the keyword UNIQUE with REUSE, the\nI          DEFINE command is unsuccessful.\nN\nI        NOREUSE /* Abbreviation: NRUS */: Specifies that the alternate\nI          index cannot be used again as a new alternate index.\nN\nD      SHAREOPTIONS(crossregion crosssystem | 1 3) -\nD        /* Abbreviation: SHR */ -\nI        Specifies how an alternate index's data or index component can\nI        be shared among users. However, SMS-managed volumes, and\nI        catalogs containing SMS-managed data sets, must not be shared\nI        with non-SMS systems. For data integrity, ensure that share\nI        options defined for data and index components are the same.\nI        For a description of data set sharing, see z/OS DFSMS Using\nI        Data Sets.\nN\nI        crossregion: Indicates the amount of sharing allowed among\nI          regions within the same system or within multiple systems\nI          using global resource serialization (GRS). Independent job\nI          steps in an operating system, or multiple systems in a GRS\nI          ring, can access a VSAM data set concurrently. For more\nI          information about GRS, see z/OS MVS Planning: Global Resource\nI          Serialization. To share a data set, each user must include\nI          DISP=SHR in the data set's DD statement. You can use the\nI          following options:\nN\nI        1: The data set can be shared by any number of users for read\nI           processing, or the data set can be accessed by only one user\nI           for read and write processing. This setting does not allow\nI           any non-RLS access when the data set is already open for\nI           VSAM RLS or DFSMStvs processing. An RLS or DFSMStvs open\nI           fails with this option if the data set is already open for\nI           any processing.\nN\nI        2: The data set can be accessed by any number of users for read\nI           processing, and it can also be accessed by one user for\nI           write processing. It is the user's responsibility to provide\nI           read integrity. VSAM ensures write integrity by obtaining\nI           exclusive control for a control interval while it is being\nI           updated. A VSAM RLS or DFSMStvs open is not allowed while\nI           the data set is open for non-RLS output.\nN\nI           If the data set has already been opened for VSAM RLS or\nI           DFSMStvs processing, a non-RLS open for input is allowed;\nI           a non-RLS open for output fails. If the data set is opened\nI           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is\nI           allowed.\nN\nI        3: The data set can be fully shared by any number of users. The\nI           user is responsible for maintaining both read and write\nI           integrity for the data the program accesses. This setting\nI           does not allow any non-RLS access when the data set is\nI           already open for VSAM RLS or DFSMStvs processing. If the\nI           data set is opened for input in non-RLS mode, a VSAM RLS or\nI           DFSMStvs open is allowed.\nN\nI           This option is the only one applicable to a catalog.\nN\nI        4: The data set can be fully shared by any number of users. For\nI           each request, VSAM refreshes the buffers used for direct\nI           processing. This setting does not allow any non-RLS access\nI           when the data set is already open for VSAM RLS or DFSMStvs\nI           processing. If the data set is opened for input in non-RLS\nI           mode, a VSAM RLS or DFSMStvs open is allowed.\nN\nI           As in SHAREOPTIONS 3, each user is responsible for\nI           maintaining both read and write integrity for the data the\nI           program accesses.\nN\nI        crosssystem: Specifies the amount of sharing allowed among\nI          systems. Job steps of two or more operating systems can gain\nI          access to the same VSAM data set regardless of the\nI          disposition specified in each step's DD statement for the\nI          data set. However, if you are using GRS across systems or\nI          JES3, the data set might not be shared depending on the\nI          disposition of the system.\nN\nI          To get exclusive control of the data set's volume, a task\nI          in one system issues the RESERVE macro. The level of\nI          cross-system sharing allowed by VSAM applies only in a\nI          multiple operating system environment.\nN\nI          The cross-system sharing options are ignored by VSAM RLS or\nI          DFSMStvs processing. The values are:\nN\nI          1: Reserved.\nN\nI          2: Reserved.\nN\nI          3: Specifies that the data set can be fully shared. Each\nI             user is responsible for maintaining both read and write\nI             integrity for the data that user's program accesses. User\nI             programs that ignore write integrity guidelines can result\nI             in:\nN\nI            -> VSAM program checks\nN\nI            -> Uncorrectable data set errors\nN\nI            -> Unpredictable results\nN\nI            The RESERVE and DEQ macros are required with this option\nI            to maintain data set integrity. (See z/OS MVS Programming:\nI            Authorized Assembler Services Reference ALE-DYN and\nI            z/OS MVS Programming: Authorized Assembler Services\nI            Reference LLA-SDU for information on using RESERVE and DEQ.)\nI            If the sphere is accessed using VSAM RLS or DFSMStvs\nI            protocols, VSAM RLS maintains the required integrity.\nN\nI          4: Specifies that the data set can be fully shared. For each\nI             request, VSAM refreshes the buffers used for direct\nI             processing. This option requires that you use the RESERVE\nI             and DEQ macros to maintain data integrity while sharing\nI             the data set. Improper use of the RESERVE macro can cause\nI             problems similar to those described under SHAREOPTIONS 3.\nI             (See z/OS MVS Programming: Authorized Assembler Services\nI             Reference ALE-DYN and z/OS MVS Programming: Authorized\nI             Assembler Services Reference LLA-SDU for information on\nI             using RESERVE and DEQ.) Output processing is limited to\nI             update, or add processing, or both that does not change\nI             either the high-used RBA or the RBA of the high key data\nI             control interval if DISP=SHR is used.\nN\nI            To ensure data integrity in a shared environment, VSAM\nI            provides users of SHAREOPTIONS 4 (cross-region and\nI            cross-system) with the following assistance:\nN\nI            -> Each PUT writes the appropriate buffer immediately into\nI               the VSAM object's DASD. VSAM writes out the buffer in\nI               the user's address space that contains the new or\nI               updated data record.\nN\nI            -> Each GET refreshes the user's input buffers. The\nI               contents of each data and index buffer used by the\nI               user's program is retrieved from the VSAM object's DASD.\nN\nI            Exception: If you use VSAM RLS or DFSMStvs, SHAREOPTIONS\nI            is assumed to be (3,3). If you do not use VSAM RLS or\nI            DFSMStvs, the SHAREOPTIONS specification is respected.\nN\nD      SPEED | RECOVERY /* Abbreviation: RCVY */ -\nI        Specifies whether the data component's control areas are to be\nI        preformatted during loading.\nN\nI        This parameter is only considered during the actual loading\nI        (creation) of a data set. Creation occurs when the data set is\nI        opened and the high-used RBA is equal to zero. After normal\nI        CLOSE processing at the completion of the load operation, the\nI        physical structure of the data set and the content of the data\nI        set extents are exactly the same, regardless of which option is\nI        used. Any processing of the data set after the successful load\nI        operation is the same, and the specification of this parameter\nI        is not considered.\nN\nI        If you use RECOVERY, the initial load takes longer because the\nI        control areas are first written with either empty or software\nI        end-of-file control intervals. These preformatted control\nI        intervals are then updated, using update writes with the data\nI        records. When SPEED is used, the initial load is faster.\nN\nI        SPEED: Does not preformat the data component's space.\nN\nI          If the initial load is unsuccessful, you must load the data\nI          set again from the beginning because VSAM cannot determine\nI          the location of your last correctly written record. VSAM\nI          cannot find a valid end-of-file indicator when it searches\nI          your data records.\nN\nI        RECOVERY /* Abbreviation: RCVY */: Does preformat the data\nI          component's space prior to writing the data records.\nN\nI          If the initial load is unsuccessful, VSAM can determine the\nI          location of the last record written during the load process.\nN\nD      UNIQUEKEY | NONUNIQUEKEY /* Abbreviations: UNQK and NUNQK */ -\nI        Shows whether more than one data record (in the base cluster)\nI        can contain the same key value for the alternate index.\nN\nI        UNIQUEKEY /* Abbreviation: UNQK */: Points each alternate index\nI          key to only one data record. When the alternate index is\nI          built (search Chapter 8, \"BLDINDEX\") and more than one data\nI          record contains the same key value for the alternate index,\nI          the BLDINDEX processing ends with an error message.\nN\nI        NONUNIQUEKEY /* Abbreviation: NUNQK */: points a key value for\nI          the alternate index to more than one data record in the base\nI          cluster. The alternate index's key record points to a maximum\nI          of 32768 records with non-unique keys.\nN\nI          When you include NONUNIQUEKEY, the maximum record size should\nI          be large enough to allow for alternate index records that\nI          point to more than one data record.\nN\nD      VOLUMES(volser volser...) /* Abbreviation: VOL */ -\nI        Specifies the volumes on which an alternate index's components\nI        are to have space. This parameter is not required if the\nI        cluster is modeled or if the cluster is SMS-managed. You can\nI        specify VOLUMES for SMS-managed data sets; however, the volumes\nI        specified might not be used and, in some cases, can result in\nI        an error.\nn\nI        For SMS-managed data sets, you can use up to 59 volumes. If the\nI        combined number of volumes for a cluster and its associated\nI        alternate indexes exceeds 59, unpredictable results can occur.\nn\nI        You can let SMS choose the volumes for SMS-managed data sets by\nI        coding an * for the volser with the VOLUMES parameter. If both\nI        user-specified and SMS-specified volumes are requested, the\nI        user-specified volser must be input first in the command\nI        syntax. The default is one volume.\nN\nI        If you do not use the MODEL parameter, VOLUMES must be placed\nI        as a parameter of ALTERNATEINDEX, or as a parameter of both\nI        DATA and INDEX.\nN\nI        If the data and index components are to reside on different\nI        device types, you must include VOLUMES as a parameter of both\nI        DATA and INDEX. If more than one volume is listed with a single\nI        VOLUMES parameter, the volumes must be the same device type.\nN\nI        You can repeat a volume serial number in the list only if you\nI        use the KEYRANGE parameter. This can place more than one key\nI        range on the same volume. However, repetition is valid only if\nI        all duplicate occurrences are used for the primary allocation\nI        of some key range.\nN\nM          You are not allowed to specify KEYRANGE.\nN\nI        The VOLUMES parameter interacts with other\nI        DEFINE ALTERNATEINDEX parameters. Ensure that the volumes you\nI        define for the alternate index are consistent with the\nI        alternate index's other attributes:\nN\nI        -> CYLINDERS, RECORDS, TRACKS: The volumes contain enough\nI           available space to satisfy the component's primary space\nI           requirement.\nN\nI        -> FILE: To define an alternate index, the volume information\nI           supplied with the DD statement pointed to by FILE must be\nI           consistent with the information listed for the alternate\nI           index and its components.\nN\nD      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */ -\nI        Determines whether an alternate index or component is checked\nI        by a machine action called write-check when a record is written\nI        into it.\nN\nI        WRITECHECK /* Abbreviation: WCK */: Indicates that a record is\nI          written and then read, without data transfer, to test for the\nI          data check condition.\nN\nI          Exception: When you use VSAM RLS or DFSMStvs access, the\nN          WRITECHECK parameter is ignored.\nN\nI        NOWRITECHECK /* Abbreviation: NWCK */: Does not write-check the\nI          alternate index or component. checked by a write check.\nN\nD    ) -\nN\nNINDEX parameters\nN----------------\nD      CYLINDERS(primary secondary) | /* Abbreviation: CYL */ -\nD      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -\nD      MEGABYTES(primary secondary) | /* Abbreviation: MB */ -\nD      RECORDS(primary secondary) | /* Abbreviation: REC */-\nD      TRACKS(primary secondary) /* Abbreviation: TRK */ -\nI        The amount of space in cylinders, kilobytes, megabytes,\nI        records, or tracks allocated to the alternate index from the\nI        volume's available space. A kilobyte and megabyte allocation\nI        resolves to either tracks or cylinders; records are allocated\nI        to the nearest track boundary. Exception: If allocation\nI        resolves to tracks, the space is contiguous. For more\nI        information, see \"Optimizing Control Area Size\" in\nI        z/OS DFSMS Using Data Sets.\nN\nI        Requests for space are directed to DADSM and result in a\nI        format-1 DSCB for the data and index component entries.\nN\nI        If you do not use the MODEL parameter or the RECATALOG\nI        parameter, you must include one, and only one, of these\nI        parameters: CYLINDERS, KILOBYTES, MEGABYTES, RECORDS, or\nI        TRACKS.\nN\nI        The space parameter is optional if the cluster is SMS-managed,\nI        but if you do not use it, space can be modeled or defaulted by\nI        SMS. If it is not determined, the DEFINE is unsuccessful. The\nI        maximum space can be specified with unit of KILOBYTES or\nI        MEGABYTES is 16,777,215. If the amount requested exceeds this\nI        value, you should specify a different larger allocation unit.\nN\nI        To maintain device independence, do not use the TRACKS or\nI        CYLINDERS parameters. If you do not use TRACKS or CYLINDERS\nI        for an SMS-managed alternate index, space is allocated on the\nI        volume selected by SMS.\nN\nM          These days the only mainframe DASD devices in use are\nM          likely to be 3390 and thus the caution about device\nM          independence is no longer applicable. If you have something\nM          else it is way past time to migrate to the current geometry.\nN\nI        When you do not divide the data component into key ranges, and\nI        more than one volume is given, the primary amount of space is\nI        allocated only on the first volume when the component is\nI        defined. When the component increases to extend to additional\nI        volumes, the first allocation on each overflow volume is the\nI        primary amount.\nN\nM          Since you can no longer specify KEYRANGE the above paragraph\nI          should be modified by IBM.\nN\nI        Secondary amounts can be allocated on all volumes available to\nI        contain parts of the alternate index, regardless of the key\nI        ranges when the alternate index is extended.\nN\nI        You can include the amount of space as a parameter of\nI        ALTERNATEINDEX, as a parameter of DATA, or as a parameter of\nI        both DATA and INDEX.\nN\nI        -> If the space is specified as a parameter of ALTERNATEINDEX,\nI           the amount specified is divided between the data and index\nI           components. The division algorithm is a function of control\nI           interval size, record size, device type, and other data set\nI           attributes.\nN\nI           If the division results in an allocation for the data\nI           component that is not an integral multiple of the required\nI           control area size, the data component's allocation is\nI           rounded up to the next higher control area multiple. This\nI           rounding can result in a larger total allocation for your\nI           alternate index than what you specified.\nN\nI           If the space is specified as a parameter of DATA, the entire\nI           amount given is allocated to the data component. An\nI           additional amount of space, depending on control interval\nI           size, record size, device type, and other data set\nI           attributes, is allocated to the index component.\nN\nI        To determine the exact amount of space allocated to each\nI        component, list the alternate index's catalog entry, using\nI        the LISTCAT command.\nN\nI        The primary and each secondary allocation must be able to be\nI        satisfied within five extents; otherwise, your DEFINE or data\nI        set extension is unsuccessful. You can use these keywords for\nI        both SMS managed and non-SMS-managed data sets.\nN\nI        primary: Allocates the initial amount of space to the\nI        alternate index.\nN\nI        secondary: Allocates the amount of space each time the\nI        alternate index extends, as a secondary extent. If the\nI        secondary space allocation is greater than 4.0 gigabytes, it\nI        is reduced to an amount as close to 4.0 GB as possible,\nI        without going over. This is not true for extended\nI        addressability data sets, which have no such space limitation.\nI        When you use secondary, space for the alternate index's data\nI        and index components can be expanded to a maximum of\nI        123 extents.\nN\nM      ATTEMPTS(number) -\nM        IBM did not provide any details for this parameter.\nN\nM      AUTHORIZATION(entrypoint string) -\nM        IBM did not provide any details for this parameter.\nN\nM      CODE(code) -\nM        IBM did not provide any details for this parameter.\nN\nD      CONTROLINTERVALSIZE(size) /* Abbreviations: CISZ or CNVSZ */ -\nI        Defines the size of the alternate index's control intervals.\nI        This depends on the maximum size of data records, and on the\nI        amount of buffer space given. LSR/GSR buffering technique\nI        users can ensure buffer pool selection by explicitly defining\nI        data and index control interval sizes.\nN\nI        When you do not specify the control interval size, VSAM\nI        determines the control interval size. If you have not specified\nI        BUFFERSPACE and the size of your records permits, VSAM selects\nI        the optimum size for the data control interval size and\nI        512 bytes for the index control interval size.\nN\nI        size: The size of the alternate index's data and index\nI          components.\nN\nI          Because an alternate index always has the spanned attribute,\nI          the control interval size can be less than the maximum\nI          record length. You can define a size from 512, to 8K in\nI          increments of 512 or from 8K to 32K in increments of 2K\nI          (where K is 1024 in decimal notation). If you use a size\nI          that is not a multiple of 512 or 2048, VSAM chooses the\nI          next higher multiple.\nN\nI          The index control interval should be large enough to\nI          accommodate all of the compressed keys in a data control\nI          area. If the index control interval size is too small,\nI          unnecessary control area splits can occur. After the first\nI          define (DEFINE), a catalog listing ( LISTC ) shows the number\nI          of control intervals in a control area and the key length\nI          of the data set. To make a general estimate of the index\nI          control interval size needed, multiply one-half of the key\nI          length (KEYLEN) by the number of data control intervals per\nI          control area (DATA CI/CA):\nN\nI          (KEYLEN/2 ) * DATA CI/CA <= INDEX CISIZE\nN\nI          For information about the relationship between control\nI          interval size and physical block size, see z/OS DFSMS Using\nI          Data Sets for the relationship between control interval size\nI          and physical block size. This document also includes\nI          restrictions that apply to control interval size and\nI          physical block size.\nN\nD      EXCEPTIONEXIT(entrypoint) /* Abbreviation: EEXT */ -\nI        The name of your exception exit routine, that receives control\nI        when an exceptional I/O error condition occurs during the\nI        transfer of data between your program's address space and the\nI        alternate index's direct access storage space. (An exception\nI        is any condition that causes a SYNAD exit to be taken.) The\nI        component's exception exit routine is processed first; then\nI        SYNAD exit routine receives control. If an exception exit\nI        routine is loaded from an unauthorized library during access\nI        method services processing, an abnormal termination occurs.\nN\nD      FILE(ddname) -\nI        Names the DD statement that identifies the direct access\nI        devices and volumes on which to allocate space to the alternate\nI        index. If more than one volume is specified in a volume list,\nI        all volumes must be the same device type.\nN\nI        When the data component and index component are to reside on\nI        different devices, you can create a separate FILE parameter as\nI        a parameter of DATA and INDEX to point to different DD\nI        statements. If the FILE parameter is not used, an attempt is\nI        made to dynamically allocate the required volumes. The volumes\nI        must be mounted as permanently resident or reserved.\nN\nI        The DD statement you specify must be:\nN\nI          //ddname    DD DISP=OLD,\nI          //             UNIT=(devtype,count),VOL=SER=(volser1,...)\nN\nI        Restriction: When FILE refers to more than one volume of the\nI        same device type, the DD statement that describes the volumes\nI        cannot be a concatenated DD statement.\nN\nI        Uses existing entry as a model for the entry being defined or\nI        re-cataloged. DATACLASS, MANAGEMENTCLASS, and STORAGECLASS\nI        cannot be modeled. Search \"Understanding the Order of Assigned\nI        Data Set Attributes\" for information on how the system selects\nI        modeled attributes.\nN\nI        You can use an existing alternate index's entry as a model for\nI        the attributes of the alternate index being defined. For\nI        details about how a model is used, see z/OS DFSMS Managing\nI        Catalogs.\nN\nI        You can use some attributes of the model and override others\nI        by defining them in the cluster or component. If you do not\nI        want to add or change any attributes, use only the entry type\nI        of the model (alternate index, data, or index) and the name of\nI        the entry to be defined.\nN\nI        When you use an alternate index entry as a model for an\nI        alternate index, the model entry's data and index components\nI        are used as models for the to-be-defined entry's data and index\nI        components, unless another entry is specified with the MODEL\nI        parameter as a subparameter of DATA or INDEX.\nN\nI        entryname: Names the entry to be used as a model.\nN\nI        catname: Names the model entry's catalog. You must identify the\nI          catalog that contains the model entry when you want to assign\nI          the catalog's password instead of the model entry's password.\nN\nI          If the catalog's volume is physically mounted, it is\nI          dynamically allocated. The volume must be mounted as\nI          permanently resident or reserved. Search \"Catalog Selection\nI          Order for DEFINE\" for information about the order in which\nI          a catalog is selected when the catalog's name is not\nI          specified.\nN\nD      NAME(entryname) -\nI        The name of the INDEX component.\nN\nI        You can define a separate entry name for the alternate index,\nI        its data component, and its index component. If you do not give\nI        a name for the data or index component, one is generated. For\nI        more information about the system-generated name format, see\nI        z/OS DFSMS Managing Catalogs.\nN\nI        When the alternate index, data component, and index component\nI        are individually named, each can be addressed.\nN\nD      OWNER(ownerid) -\nI        Gives the identification of the alternate index's owner.\nN\nI        For TSO/E users, if the OWNER parameter does not identify the\nI        owner, the TSO/E user's userid becomes the ownerid value.\nN\nD      REUSE | NOREUSE /* Abbreviations: RUS and NRUS */ -\nI        Indicates whether or not the alternate index can be used again\nI        as a new alternate index.\nN\nI        REUSE /* Abbreviation: RUS */: Indicates that the alternate\nI          index can be used over again as a new alternate index. When\nI          a reusable alternate index is opened, its high-used RBA can\nI          be set to zero. Open it with an access control block using\nI          the RESET attribute.\nN\nI          When you use BLDINDEX to build a reusable alternate index,\nI          the high-used RBA is always reset to zero when the alternate\nI          index is opened for BLDINDEX processing.\nN\nI          Reusable alternate indexes can be multivolumed and might have\nI          up to 123 physical extents.\nN\nI          Exception: If you use the keyword UNIQUE with REUSE, the\nI          DEFINE command is unsuccessful.\nN\nI        NOREUSE /* Abbreviation: NRUS */: Specifies that the alternate\nI          index cannot be used again as a new alternate index.\nN\nD      SHAREOPTIONS(crossregion crosssystem | 1 3) -\nD        /* Abbreviation: SHR */ -\nI        Specifies how an alternate index's data or index component can\nI        be shared among users. However, SMS-managed volumes, and\nI        catalogs containing SMS-managed data sets, must not be shared\nI        with non-SMS systems. For data integrity, ensure that share\nI        options defined for data and index components are the same.\nI        For a description of data set sharing, see z/OS DFSMS Using\nI        Data Sets.\nN\nI        crossregion: Indicates the amount of sharing allowed among\nI          regions within the same system or within multiple systems\nI          using global resource serialization (GRS). Independent job\nI          steps in an operating system, or multiple systems in a GRS\nI          ring, can access a VSAM data set concurrently. For more\nI          information about GRS, see z/OS MVS Planning: Global Resource\nI          Serialization. To share a data set, each user must include\nI          DISP=SHR in the data set's DD statement. You can use the\nI          following options:\nN\nI        1: The data set can be shared by any number of users for read\nI           processing, or the data set can be accessed by only one user\nI           for read and write processing. This setting does not allow\nI           any non-RLS access when the data set is already open for\nI           VSAM RLS or DFSMStvs processing. An RLS or DFSMStvs open\nI           fails with this option if the data set is already open for\nI           any processing.\nN\nI        2: The data set can be accessed by any number of users for read\nI           processing, and it can also be accessed by one user for\nI           write processing. It is the user's responsibility to provide\nI           read integrity. VSAM ensures write integrity by obtaining\nI           exclusive control for a control interval while it is being\nI           updated. A VSAM RLS or DFSMStvs open is not allowed while\nI           the data set is open for non-RLS output.\nN\nI           If the data set has already been opened for VSAM RLS or\nI           DFSMStvs processing, a non-RLS open for input is allowed;\nI           a non-RLS open for output fails. If the data set is opened\nI           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is\nI           allowed.\nN\nI        3: The data set can be fully shared by any number of users. The\nI           user is responsible for maintaining both read and write\nI           integrity for the data the program accesses. This setting\nI           does not allow any non-RLS access when the data set is\nI           already open for VSAM RLS or DFSMStvs processing. If the\nI           data set is opened for input in non-RLS mode, a VSAM RLS or\nI           DFSMStvs open is allowed.\nN\nI           This option is the only one applicable to a catalog.\nN\nI        4: The data set can be fully shared by any number of users. For\nI           each request, VSAM refreshes the buffers used for direct\nI           processing. This setting does not allow any non-RLS access\nI           when the data set is already open for VSAM RLS or DFSMStvs\nI           processing. If the data set is opened for input in non-RLS\nI           mode, a VSAM RLS or DFSMStvs open is allowed.\nN\nI           As in SHAREOPTIONS 3, each user is responsible for\nI           maintaining both read and write integrity for the data the\nI           program accesses.\nN\nI        crosssystem: Specifies the amount of sharing allowed among\nI          systems. Job steps of two or more operating systems can gain\nI          access to the same VSAM data set regardless of the\nI          disposition specified in each step's DD statement for the\nI          data set. However, if you are using GRS across systems or\nI          JES3, the data set might not be shared depending on the\nI          disposition of the system.\nN\nI          To get exclusive control of the data set's volume, a task\nI          in one system issues the RESERVE macro. The level of\nI          cross-system sharing allowed by VSAM applies only in a\nI          multiple operating system environment.\nN\nI          The cross-system sharing options are ignored by VSAM RLS or\nI          DFSMStvs processing. The values are:\nN\nI          1: Reserved.\nN\nI          2: Reserved.\nN\nI          3: Specifies that the data set can be fully shared. Each\nI             user is responsible for maintaining both read and write\nI             integrity for the data that user's program accesses. User\nI             programs that ignore write integrity guidelines can result\nI             in:\nN\nI            -> VSAM program checks\nN\nI            -> Uncorrectable data set errors\nN\nI            -> Unpredictable results\nN\nI            The RESERVE and DEQ macros are required with this option\nI            to maintain data set integrity. (See z/OS MVS Programming:\nI            Authorized Assembler Services Reference ALE-DYN and\nI            z/OS MVS Programming: Authorized Assembler Services\nI            Reference LLA-SDU for information on using RESERVE and DEQ.)\nI            If the sphere is accessed using VSAM RLS or DFSMStvs\nI            protocols, VSAM RLS maintains the required integrity.\nN\nI          4: Specifies that the data set can be fully shared. For each\nI             request, VSAM refreshes the buffers used for direct\nI             processing. This option requires that you use the RESERVE\nI             and DEQ macros to maintain data integrity while sharing\nI             the data set. Improper use of the RESERVE macro can cause\nI             problems similar to those described under SHAREOPTIONS 3.\nI             (See z/OS MVS Programming: Authorized Assembler Services\nI             Reference ALE-DYN and z/OS MVS Programming: Authorized\nI             Assembler Services Reference LLA-SDU for information on\nI             using RESERVE and DEQ.) Output processing is limited to\nI             update, or add processing, or both that does not change\nI             either the high-used RBA or the RBA of the high key data\nI             control interval if DISP=SHR is used.\nN\nI            To ensure data integrity in a shared environment, VSAM\nI            provides users of SHAREOPTIONS 4 (cross-region and\nI            cross-system) with the following assistance:\nN\nI            -> Each PUT writes the appropriate buffer immediately into\nI               the VSAM object's DASD. VSAM writes out the buffer in\nI               the user's address space that contains the new or\nI               updated data record.\nN\nI            -> Each GET refreshes the user's input buffers. The\nI               contents of each data and index buffer used by the\nI               user's program is retrieved from the VSAM object's DASD.\nN\nI            Exception: If you use VSAM RLS or DFSMStvs, SHAREOPTIONS\nI            is assumed to be (3,3). If you do not use VSAM RLS or\nI            DFSMStvs, the SHAREOPTIONS specification is respected.\nN\nD      VOLUMES(volser volser...) /* Abbreviation: VOL */ -\nI        Specifies the volumes on which an alternate index's components\nI        are to have space. This parameter is not required if the\nI        cluster is modeled or if the cluster is SMS-managed. You can\nI        specify VOLUMES for SMS-managed data sets; however, the volumes\nI        specified might not be used and, in some cases, can result in\nI        an error.\nn\nI        For SMS-managed data sets, you can use up to 59 volumes. If the\nI        combined number of volumes for a cluster and its associated\nI        alternate indexes exceeds 59, unpredictable results can occur.\nn\nI        You can let SMS choose the volumes for SMS-managed data sets by\nI        coding an * for the volser with the VOLUMES parameter. If both\nI        user-specified and SMS-specified volumes are requested, the\nI        user-specified volser must be input first in the command\nI        syntax. The default is one volume.\nN\nI        If you do not use the MODEL parameter, VOLUMES must be placed\nI        as a parameter of ALTERNATEINDEX, or as a parameter of both\nI        DATA and INDEX.\nN\nI        If the data and index components are to reside on different\nI        device types, you must include VOLUMES as a parameter of both\nI        DATA and INDEX. If more than one volume is listed with a single\nI        VOLUMES parameter, the volumes must be the same device type.\nN\nI        You can repeat a volume serial number in the list only if you\nI        use the KEYRANGE parameter. This can place more than one key\nI        range on the same volume. However, repetition is valid only if\nI        all duplicate occurrences are used for the primary allocation\nI        of some key range.\nN\nM          You are not allowed to specify KEYRANGE.\nN\nI        The VOLUMES parameter interacts with other\nI        DEFINE ALTERNATEINDEX parameters. Ensure that the volumes you\nI        define for the alternate index are consistent with the\nI        alternate index's other attributes:\nN\nI        -> CYLINDERS, RECORDS, TRACKS: The volumes contain enough\nI           available space to satisfy the component's primary space\nI           requirement.\nN\nI        -> FILE: To define an alternate index, the volume information\nI           supplied with the DD statement pointed to by FILE must be\nI           consistent with the information listed for the alternate\nI           index and its components.\nN\nD      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */ -\nI        Determines whether an alternate index or component is checked\nI        by a machine action called write-check when a record is written\nI        into it.\nN\nI        WRITECHECK /* Abbreviation: WCK */: Indicates that a record is\nI          written and then read, without data transfer, to test for the\nI          data check condition.\nN\nI          Exception: When you use VSAM RLS or DFSMStvs access, the\nN          WRITECHECK parameter is ignored.\nN\nI        NOWRITECHECK /* Abbreviation: NWCK */: Does not write-check the\nI          alternate index or component. checked by a write check.\nN\nD    ) /* - */\nN\nNOptional parameter\nN------------------\nM    CATALOG(catname) /* Abbreviation: CAT */\nI      Identifies the catalog in which the alternate index is defined.\nI      The catalog also contains the base cluster's entry (see the\nI      description of the RELATE in preceding text). Search \"Catalog\nI      Selection Order for DEFINE\" for the order in which a catalog is\nI      selected if the catalog's name is not specified.\nN\nI      Before you can assign catalog names for SMS-managed data sets,\nI      you must have access to the RACF STGADMIN.IGG.DIRCAT FACILITY\nI      class. Search \"Storage Management Subsystem (SMS) Considerations\"\nI      for more information.\nN\nI      catname/alias: Names the catalog or an alias that can be resolved\nI        to a catalog. For example, if alias ABCD relates to catalog\nI        SYS1.USERCAT then specifying either ABCD or SYS1.USERCAT will\nI        cause the alternate index to be defined in SYS1.USERCAT.\nN\nI      If the catalog's volume is physically mounted, it is dynamically\nI      allocated. Mount the volume as permanently resident or reserved.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC1311": {"ttr": 7171, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1311\nTDFSMS AMS\nT-Chapter 13.\nT-Example 1: Define an Alternate Index Using SMS Data Class\nTSpecification\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094908\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 13. DEFINE ALTERNATEINDEX\nN---------------------------------\nNExample 1: Define an Alternate Index Using SMS Data Class Specification\nN-----------------------------------------------------------------------\nD//DEFAIX1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    ALTERNATEINDEX( -\nD      NAME(EXMP1.AIX) -\nD      RELATE(EXAMPLE.SMS1) -\nD      DATACLAS(VSALLOC) -\nD      NONUNIQUEKEY -\nD      UPGRADE -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE ALTERNATEINDEX parameters are:\nN-----------------------------------------\nN-> NAME: indicates that the alternate index's name is EXMP1.AIX.\nN\nN-> RELATE: identifies the alternate index base cluster, EXAMPLE.SMS1.\nN   Because an SMS-managed alternate index is being defined, the base\nN   cluster must also be SMS-managed.\nN\nN-> DATACLAS: is an installation-defined name of an SMS data class. The\nN   data set assumes the RECORG or RECFM, LRECL, KEYLEN, KEYOFF, AVGREC,\nN   SPACE, EXPDT or RETPD, VOLUME, CISIZE, FREESPACE, and SHAREOPTIONS\nN   parameters assigned to this data class by the ACS routines. This\nN   parameter is optional. If it is not used, the data set will assume\nN   the data class default assigned by the ACS routines.\nN\nM     vsalloc: is an installation defined SMS class.\nN\nN-> NONUNIQUEKEY: specifies that the alternate key value might be the\nN   same for two or more data records in the base cluster.\nN\nN-> UPGRADE: specifies that the alternate index is to be opened by VSAM\nN   and upgraded each time the base cluster is opened for processing.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1312": {"ttr": 7173, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1312\nTDFSMS AMS\nT-Chapter 13.\nT-Example 2: Define an SMS-Managed Alternate Index\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094918\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 13. DEFINE ALTERNATEINDEX\nN---------------------------------\nNExample 2: Define an SMS-Managed Alternate Index\nN------------------------------------------------\nD//DEFAIX2  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    ALTERNATEINDEX( -\nD      NAME(EXMP2.AIX) -\nD      RELATE(EXAMPLE.SMS2) -\nD      KEYS(3 0) -\nD      KILOBYTES(1600 200) -\nD      RECORDSIZE(40 50) -\nD      NONUNIQUEKEY -\nD      UPGRADE -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE ALTERNATEINDEX parameters are:\nN-----------------------------------------\nN-> NAME: indicates that the alternate index's name is EXMP2.AIX.\nN\nN-> RELATE: identifies the alternate index base cluster, EXAMPLE.SMS2.\nN   Because an SMS-managed alternate index is being defined, the base\nN   cluster must also be SMS-managed.\nN\nN-> KEYS: specifies the length and location of the alternate key field\nN   in each of the base cluster's data records. The alternate key field\nN   is the first three bytes of each data record.\nN\nN-> KILOBYTES: allocates the minimum number of tracks required to\nN   contain 1600 kilobytes for the alternate index's space. When the\nN   alternate index is extended, it is to be extended by the minimum\nN   number of tracks required to contain 200 kilobytes.\nN\nN-> RECORDSIZE: specifies that the alternate index's records are\nN   variable length, with an average size of 40 bytes and a maximum\nN   size of 50 bytes.\nN\nN-> NONUNIQUEKEY: specifies that the alternate key value might be the\nN   same for two or more data records in the base cluster.\nN\nN-> UPGRADE: specifies that the alternate index is to be opened by VSAM\nN   and upgraded each time the base cluster is opened for processing.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1313": {"ttr": 7175, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1313\nTDFSMS AMS\nT-Chapter 13.\nT-Example 3: Define an Alternate Index\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094931\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 13. DEFINE ALTERNATEINDEX\nN---------------------------------\nNExample 3: Define an Alternate Index\nN------------------------------------\nD//DEFAIX3  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    ALTERNATEINDEX( -\nD      NAME(EXMP2.AIX) -\nD      RELATE(EXAMPLE.SMS2) -\nD      CYLINDERS(3 1) -\nD      KEYS(3 0) -\nD      RECORDSIZE(40 50) -\nD      NONUNIQUEKEY -\nD      UPGRADE -\nD      VOLUMES(VSER01) -\nD    ) -\nD    CATALOG(USERCAT)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE ALTERNATEINDEX parameters are:\nN-----------------------------------------\nN-> NAME: indicates that the alternate index's name is EXMP2.AIX.\nN\nN-> RELATE: identifies the alternate index base cluster, EXAMPLE.SMS2.\nN   Because an SMS-managed alternate index is being defined, the base\nN   cluster must also be SMS-managed.\nN\nN-> CYLINDERS: allocates three cylinders for the alternate index's\nN   space. The alternate index is extended in increments of one\nN   cylinder.\nN\nN-> KEYS: specifies the length and location of the alternate key field\nN   in each of the base cluster's data records. The alternate key field\nN   is the first three bytes of each data record.\nN\nN-> RECORDSIZE: specifies that the alternate index's records are\nN   variable length, with an average size of 40 bytes and a maximum\nN   size of 50 bytes.\nN\nN-> NONUNIQUEKEY: specifies that the alternate key value might be the\nN   same for two or more data records in the base cluster.\nN\nN-> UPGRADE: specifies that the alternate index is to be opened by VSAM\nN   and upgraded each time the base cluster is opened for processing.\nN\nN-> VOLUMES: indicates that the alternate index is to reside on volume\nN   VSER01. This example assumes that the volume is already cataloged\nN   in the user catalog, USERCAT.\nN\nN-> CATALOG: defines the alternate index in the user catalog, USERCAT.\nM   The ALIAS 'EXAMPLE' must relate to user catalog USERCAT.\nM   Kenneth Tomiak recommends NEVER coding the CATALOG parameter for\nM   application data sets.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1314": {"ttr": 7177, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1314\nTDFSMS AMS\nT-Chapter 13.\nT-Example 4: Define an Alternate Index with RECATALOG\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-094941\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 13. DEFINE ALTERNATEINDEX\nN---------------------------------\nNExample 4: Define an Alternate Index with RECATALOG\nN---------------------------------------------------\nD//DEFAIX4  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    ALTERNATEINDEX( -\nD      NAME(DEFAIXR.AIX01) -\nD      RELATE(DEFKSDS.KSDS03) -\nD      CYLINDERS(2 1) -\nD      RECATALOG -\nD      VOLUMES(333001) -\nD    ) -\nD    CATALOG(USERCAT)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE ALTERNATEINDEX parameters are:\nN-----------------------------------------\nN-> NAME: indicates that the alternate index's name is DEFAIXR.AIX01.\nN\nN-> RELATE: identifies the alternate index base cluster, DEFKSDS.KSDS03.\nN\nN-> CYLINDERS: allocates two cylinders for the alternate index's space.\nN   The alternate index is extended in increments of one cylinder.\nN\nN-> RECATALOG: re-catalogs the alternate index and uses the existing\nN   VVR entry and VTOC entry.\nN\nN-> VOLUMES: places the alternate index on volume 333001. This example\nN   assumes that a VTOC entry already exists for this object.\nN\nN-> CATALOG: defines the alternate index in the user catalog, USERCAT.\nM   The ALIAS 'DEFAIXR' must relate to user catalog USERCAT.\nM   Kenneth Tomiak recommends NEVER coding the CATALOG parameter for\nM   application data sets.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC14": {"ttr": 7179, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC14\nTDFSMS AMS\nT-Chapter 14. DEFINE CLUSTER\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-189953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 14. DEFINE CLUSTER\nN--------------------------\nNUsing Access Method Services, you can set up jobs to execute a\nNsequence of commands with a single invocation of IDCAMS. Modal\nNcommand execution is based on the success or failure of prior commands.\nN\nNUse DEFINE CLUSTER to define attributes for the cluster as a whole and\nNfor the components of the cluster.\nN\nNCLUSTER is comprised of three components:\nN  DEFINE -\nN    CLUSTER( -\nN      parameters -\nN    ) -\nN    DATA( -\nN      parameters -\nN    ) -\nN    INDEX( -\nN      parameters -\nN    ) /* - */\nM    CATALOG(catname)\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1401": {"ttr": 7425, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1401\nTDFSMS AMS\nT-Chapter 14.\nT-Syntax for DEFINE CLUSTER Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 14. DEFINE CLUSTER\nN--------------------------\nNSyntax for DEFINE CLUSTER Parameters\nN------------------------------------\nD  DEFINE /* Abbreviation: DEF */ -\nN\nNCLUSTER parameters\nN------------------\nNRequired parameters\nN-------------------\nD    CLUSTER( /* Abbreviation: CL */ -\nI      CLUSTER defines or recatalogs a cluster or cluster entry.\nN\nI      The CLUSTER keyword is followed by the parameters specified for\nI      the cluster as a whole. These parameters are enclosed in\nI      parentheses and, optionally, are followed by parameters given\nI      separately for the DATA and INDEX components.\nN\nD      NAME(entryname) -\nI        The name of the CLUSTER component.\nI\nI        Defines the cluster's entryname or the name of each of its\nI        components. The entryname used for the cluster as a whole is\nI        not propagated to the cluster's components.\nN\nI        For SMS and non-SMS-managed clusters, the component names must\nI        resolve to the same catalog as the data set's cluster name.\nN\nI        You can define a separate entryname for the cluster, its data\nI        component, and its index component. If no name is specified for\nI        the data and index component, a name is generated. When the\nI        cluster, data component, and index component are individually\nI        named, each can be addressed. For information on system\nI        generated names, see z/OS DFSMS Using Data Sets.\nN\nI        When defining a VSAM volume data set (VVDS), the entryname for\nI        the cluster or the data component must be in the form\nI        SYS1.VVDS.Vvolser, where volser is the volume serial number\nI        specified by the VOLUMES parameter. The default primary and\nI        secondary allocation is 10 tracks. VVDSs cannot be defined in\nI        cylinder-managed space. For information on defining a VVDS\nI        see z/OS DFSMS Managing Catalogs.\nN\nNOptional parameters\nN-------------------\nD      CYLINDERS(primary secondary) | /* Abbreviation: CYL */ -\nD      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -\nD      MEGABYTES(primary secondary) | /* Abbreviation: MB */ -\nD      RECORDS(primary secondary) | /* Abbreviation: REC */-\nD      TRACKS(primary secondary) /* Abbreviation: TRK */ -\nI        The amount of space in cylinders, kilobytes, megabytes,\nI        records, or tracks allocated to the cluster from the volume's\nI        available space. A kilobyte or megabyte allocation resolves to\nI        either tracks or cylinders; record allocation resolves to\nI        tracks.\nN\nI        If the override indicator in Data Class is set ON, the user\nI        specified amount of space in DEFINE command will be overridden\nI        by the space values specified in data Class. This enforces the\nI        installation standard of the system.\nN\nI        Exception: If allocation resolves to tracks, the space is\nI        contiguous. See \"Optimizing Control Area Size\" in z/OS DFSMS\nI        Using Data Sets for more information.\nN\nI        Requests for space are directed to DADSM and result in a\nI        format-1 DSCB for the all entries.\nN\nI        If the cluster is not SMS-managed, you must use the amount of\nI        space allocated, either through this parameter, or through the\nI        DATACLASS, MODEL, or RECATALOG parameters. This parameter is\nI        optional if the cluster is managed by SMS. If it is used, it\nI        overrides the DATACLASS space specification. If it is not used,\nI        it can be modeled or defaulted by SMS. If it cannot be\nI        determined, the DEFINE is unsuccessful.\nN\nI        If you select KILOBYTES or MEGABYTES, the amount of space\nI        allocated is the minimum number of tracks or cylinders required\nI        to contain the specified number of kilobytes or megabytes. The\nI        maximum space can be specified with unit of KILOBYTES or\nI        MEGABYTES is 16,777,215. If the amount requested exceeds this\nI        value, you should specify a larger allocation unit.\nN\nI        If you select RECORDS, the amount of space allocated is the\nI        minimum number of tracks that are required to contain the given\nI        number of records. The maximum number of records is 16,777,215.\nI        If RECORDS is specified for a linear data set, space is\nI        allocated with the number of control intervals equal to the\nI        number of records.\nN\nI        The maximum TRACKS or CYLINDERS value that can be specified on\nI        the DEFINE CLUSTERS command is X'FFFFFF' or 16777215, because\nI        of the 3 byte space parameter fields.\nN\nI        Recommendation: To maintain device independence, do not use the\nI        TRACKS or CYLINDERS parameters. If you use them for an\nI        SMS-managed data set, space is allocated on the volumes\nI        selected by SMS in units equivalent to the device default\nI        geometry. If there is an allocation failure due to lack of\nI        space, SMS retries allocation with a reduced space quantity.\nI        However, any retry, including reduced space quantity, is only\nI        attempted if Space Constraint Relief = Y is specified. SMS\nI        also removes other limitations if the data class allows space\nI        constraint relief.\nN\nI        Regardless of the allocation type, the calculation of the CA\nI        (control area) size is based on the smaller of the two\nI        allocation quantities (primary or secondary) in the DEFINE\nI        command. A CA is never greater than a single cylinder, it\nI        might be less (that is, some number of tracks), depending on\nI        the allocation amount and type used. When tracks or records\nI        are used, the space allocation unit (the CA size) can be\nI        adjusted to one cylinder. This adjustment is made if the\nI        calculated CA size contains more tracks than exist in a single\nI        cylinder of the device being used. The CA area size assigned by\nI        VSAM is the smallest of:\nN\nI        -> One cylinder\nN\nI        -> The primary space quantity\nN\nI        -> The secondary space quantity\nN\nI        If the CA size assigned is not evenly divisible into either\nI        the primary or secondary space quantity, VSAM increases that\nI        space to a value evenly divisible by the CA size. If you are\nI        defining an extended format data set, you should review\nI        \"Defining an Extended Format Key-Sequenced Data Set\" in\nI        z/OS DFSMS Using Data Sets for information about additional\nI        space requirements. DEFINE RECORDS allocates sufficient space\nI        to the specified number of records, but factors unknown at\nI        define time (such as key compression or method of loading\nI        records) can result in inefficient use of the space allocated.\nI        This might prevent every data CA from being completely used,\nI        and you might be unable to load the specified number of records\nI        without requiring secondary allocation.\nN\nI        When multiple volumes are used for a data set, these rules and\nI        conditions apply:\nN\nI        -> The first volume is defined as the prime volume. The initial\nI           allocation of a data set is on the prime volume. The\nI           remaining volumes are defined as candidate volumes.\nN\nI        -> A data set's primary space allocation (defined for each data\nI           set) is the amount of space initially allocated on both the\nI           prime volume and on any candidate volumes the data set\nI           extends to.\nN\nI        -> A data set's secondary space allocation (if it is defined)\nI           is the space allocated when the primary space is filled and\nI           the data set needs additional space on the same volume.\nN\nI        -> If a data set extends to a candidate volume, the amount of\nI           space initially allocated on the candidate volume is the\nI           primary space allocation. If the data set extends beyond\nI           the primary allocation on the candidate volume, then the\nI           amount of space allocated is the secondary space allocation.\nN\nI        -> With a DEFINE request, the primary space allocation must be\nI           fulfilled in not more than five DASD extents unless the\nI           Space Constraint Relief option is specified in the\nI           associated SMS data class.\nN\nI           However, the request is not successful if you do not fulfill\nI           each secondary space allocation in five DASD extents. A DASD\nI           extent is the allocation of one available area of contiguous\nI           space on a volume. For example, if a data set's primary\nI           space allocation is 100 cylinders, you must allocate a\nI           maximum of five DASD extents that add up to 100 cylinders.\nN\nI        Secondary amounts can be allocated on all volumes available to\nI        contain parts of the cluster regardless of the key ranges.\nN\nI        You can specify the amount of space as a parameter of CLUSTER,\nI        as a parameter of DATA, or as a parameter of both. When a\nI        key-sequenced cluster is being defined, and the space is a\nI        parameter of:\nN\nI        -> CLUSTER, the amount is divided between the data and index\nI           components. The division algorithm is a function of control\nI           interval size, record size, device type, and other data set\nI           attributes.\nN\nI           If the division results in an allocation for the data\nI           component that is not an integral multiple of the required\nI           control area size, the data component's allocation is\nI           rounded up to the next higher control area multiple. This\nI           rounding can result in a larger total allocation for your\nI           cluster.\nN\nI        -> DATA, the entire amount specified is allocated to the data\nI           component. An additional amount of space, depending on\nI           control interval size, record size, device type, and other\nI           data set attributes, is allocated to the index component.\nN\nI           Note: If not specified, SMS estimates the size of the index\nI           component to be 10% of the data component. Ensure that\nI           enough space is present on the volume(s) to account for\nI           this estimation.\nN\nI        To determine the exact amount of space allocated to each\nI        component, list the cluster's catalog entry, using the LISTCAT\nI        command.\nN\nI        The primary and each secondary allocation must be able to be\nI        satisfied in not more than five DASD extents; otherwise,\nI        your DEFINE or data set extension is unsuccessful. Starting\nI        with z/OS V1R13, if the primary or secondary space allocation\nI        is 16777215 (X'FFFFFF') tracks or cylinders, the value is\nI        decreased by 1 CA worth. This is because the AMS LISTCAT\nI        command does not recognize all F's as a valid value and\nI        prints a zero instead.\nN\nI        primary: Allocates the initial amount of space to the cluster.\nN\nI        secondary: Allocates an amount of space each time the cluster\nI          extends, as a secondary extent. You can use this secondary\nI          allocation to add space for the data or index components of\nI          the cluster. A VSAM data set can be expanded to 123 extents\nI          per volume. If this is a multi-volume VSAM data set, then\nI          the VSAM component can be extended to a maximum of\nI          255 extents combined over all volumes.\nN\nD      ACCOUNT(account-info) /* Abbreviation: ACCT */ -\nI        Defines up to 32 bytes of accounting information and user data\nI        for the data set. It must be between 1 and 32 bytes, otherwise\nI        you will receive an error message.\nN\nI        account_info: Is only supported for SMS-managed VSAM and\nI          non-VSAM data sets. It is only used for the data set level\nI          (not member level) of PDSE/PDS.\nN\nD      BUFFERSPACE(size) /* Abbreviations: BUFSP or BUFSPC */ -\nI        Provides the minimum space for buffers. VSAM determines the\nI        data component's and index component's control interval size.\nI        If you do not use BUFFERSPACE, VSAM provides enough space to\nI        contain two data component control intervals and, if the data\nI        is key-sequenced, one index component control interval.\nN\nI        size: is the buffer of space. You can use decimal (n),\nI          hexadecimal (X'n'), or binary (B'n'). The size cannot be\nI          less than enough space to contain two data component control\nI          intervals and, if the data is key sequenced, one index\nI          control interval.\nN\nI          If the buffer size is less than VSAM requires to run your\nI          job, it will be treated as though the parameter was not\nI          specified and the buffer size will be set to the default\nI          value.\nN\nI          Exception: When you use RLS or DFSMStvs access, DFSMS ignores\nI          BUFFERSPACE.\nN\nI          Note: The limitations of the bufferspace value on how many\nI          buffers will be allocated is based on storage available in\nI          your region, and other parameters or attributes of the data\nI          set.\nN\nD      BWO(TYPECICS | TYPEIMS | NO) -\nI        Use this parameter if backup-while-open (BWO) is allowed for\nI        the VSAM sphere. BWO applies only to SMS data sets and cannot\nI        be used with TYPE(LINEAR).\nN\nI        If BWO is specified in the SMS data class, the value defined is\nI        used as the data set definition, unless it has been previously\nI        defined with an explicitly specified or modeled DEFINE\nI        attribute.\nN\nI        TYPECICS /* Abbreviation: TYPEC */: Use TYPECICS to specify\nI          BWO in a CICS or DFSMStvs environment. For RLS processing,\nI          this activates BWO processing for CICS, or DFSMStvs, or both.\nI          For non-RLS processing, CICS determines whether to use this\nI          specification or the specification in the CICS FCT. See the\nI          CICS System Definition Guide.\nN\nI          Exception: If CICS determines that it will use the\nI          specification in the CICS FCT, the specification might\nI          override the TYPECICS or NO parameters.\nN\nI        TYPEIMS /* Abbreviation:TYPEI */: Use to enable BWO processing\nI          for IMS data sets.\nN\nI        NO: Use this when BWO does not apply to the cluster.\nN\nI          Exception: If CICS determines that it will use definitions\nI          in the CICS FCT, the TYPECICS or NO parameters might be\nI          overwritten.\nN\nD      CONTROLINTERVALSIZE(size) /* Abbreviations: CISZ or CNVSZ */ -\nI        Defines the size of the cluster's control intervals.\nI        This depends on the maximum size of data records, and on the\nI        amount of buffer space given. LSR/GSR buffering technique\nI        users can ensure buffer pool selection by explicitly defining\nI        data and index control interval sizes.\nN\nI        When you do not specify the control interval size, VSAM\nI        determines the control interval size. If you have not specified\nI        BUFFERSPACE and the size of your records permits, VSAM selects\nI        the optimum size for the data control interval size and\nI        512 bytes for the index control interval size.\nN\nI        size: The size of the cluster's data and index\nI          components.\nN\nI          Because an cluster always has the spanned attribute,\nI          the control interval size can be less than the maximum\nI          record length. You can define a size from 512, to 8K in\nI          increments of 512 or from 8K to 32K in increments of 2K\nI          (where K is 1024 in decimal notation). If you use a size\nI          that is not a multiple of 512 or 2048, VSAM chooses the\nI          next higher multiple.\nN\nI          The index control interval should be large enough to\nI          accommodate all of the compressed keys in a data control\nI          area. If the index control interval size is too small,\nI          unnecessary control area splits can occur. After the first\nI          define (DEFINE), a catalog listing ( LISTC ) shows the number\nI          of control intervals in a control area and the key length\nI          of the data set. To make a general estimate of the index\nI          control interval size needed, multiply one-half of the key\nI          length (KEYLEN) by the number of data control intervals per\nI          control area (DATA CI/CA):\nN\nI          (KEYLEN/2 ) * DATA CI/CA <= INDEX CISIZE\nN\nI          For information about the relationship between control\nI          interval size and physical block size, see z/OS DFSMS Using\nI          Data Sets for the relationship between control interval size\nI          and physical block size. This document also includes\nI          restrictions that apply to control interval size and\nI          physical block size.\nN\nD      DATACLASS(class) /* Abbreviation: DATACLAS */ -\nI        The 1 to 8 character name of the data class for the data set.\nI        The DATACLASS parameter provides the allocation attributes for\nI        new data sets. Your storage administrator defines the data\nI        class. However, you can override the parameters defined for\nI        DATACLASS by explicitly defining other attributes. Search\nI        \"Understanding the Order of Assigned Data Set Attributes\" for\nI        the order of precedence (filtering) the system uses to select\nI        which attribute to assign. The record organization attribute\nI        of DATACLASS is not used for DEFINE CLUSTER.\nn\ni        DATACLASS parameters apply to both SMS-managed and\nI        non-SMS-managed data sets. If DATACLASS is used and SMS is\nI        inactive, the DEFINE is unsuccessful.\nN\nD      EATTR(NO | OPT) -\nI        A data set level attribute specifying whether a data set can\nI        have extended attributes (format 8 and 9 DSCBs) and optionally\nI        reside in EAS.\nN\nI        NO: No extended attributes. The data set can not have extended\nI          attributes (format 8 and 9 DSCBs) and cannot reside in EAS.\nI          This is the default behavior for non-VSAM data sets.\nN\nI        OPT: Extended attributes are optional. The data set can have\nI          extended attributes (format 8 and 9 DSCBs) and can optionally\nI          reside in EAS. This is the default behavior for VSAM data\nI          sets.\nN\nI        DFSMS does not provide an actual default value for the EATTR\nI        attribute. If an EATTR attribute is not specified on the DEFINE\nI        command, in the SMS DATA CLASS, JCL, dynamic allocation\nI        parameters or MODEL data set, the EATTR value is recorded as\nI        not being specified in the attributes for the data set. For\nI        VSAM files a not specified value is treated by the system as\nI        if OPT was specified for EATTR.\nN\nI        For non-VSAM files a not specified value is treated by the\nI        system as if NO was specified for EATTR. A not specified value\nI        for EATTR is the setting for data sets created prior to EAS\nI        support. When an EATTR attribute of not specified is\nI        encountered during a DEFINE or end of volume (EOV) extend\nI        processing, DFSMS internally performs the default action for\nI        the data set type when creating the new extent location.\nN\nI        Search Appendix E, \"DCOLLECT User Exit\" and Appendix F,\nI        \"Interpreting DCOLLECT Output\"  for collecting EATTR values\nI        stored in the volume table of contents (VTOC) and SMS DATA\nI        CLASS. The cataloged EATTR value is provided in DCOLLECT and\nI        LISTCAT.\nN\nD      ERASE | NOERASE /* Abbreviations: ERAS and NERAS */-\nI        indicates if the records of the cluster components are\nI        erased when the cluster is deleted.\nN\nI        ERASE: Requires the records of the cluster components\nI          are overwritten with binary zeros when the cluster\nI          is deleted. If the base cluster of the cluster is\nI          protected by a RACF generic or discrete profile and the base\nI          cluster is cataloged in a catalog, you can use RACF commands\nI          to specify an ERASE attribute as part of this profile so that\nI          the component is automatically erased upon deletion.\nN\nI        NOERASE: Specifies that the records of the cluster\nI          components are not to be overwritten with binary zeros.\nI          NOERASE prevents the component from being erased if the base\nI          cluster of the cluster is protected by a RACF\nI          generic or discrete profile that specifies the ERASE\nI          attribute and if the base cluster is cataloged in a catalog.\nI          You can use RACF commands to alter the ERASE attribute in a\nI          profile.\nN\nD      EXCEPTIONEXIT(entrypoint) /* Abbreviation: EEXT */ -\nI        The name of your exception exit routine, that receives control\nI        when an exceptional I/O error condition occurs during the\nI        transfer of data between your program's address space and the\nI        cluster's direct access storage space. (An exception\nI        is any condition that causes a SYNAD exit to be taken.) The\nI        component's exception exit routine is processed first; then\nI        SYNAD exit routine receives control. If an exception exit\nI        routine is loaded from an unauthorized library during access\nI        method services processing, an abnormal termination occurs.\nN\nD      FILE(ddname) -\nI        Names the DD statement that identifies the direct access\nI        devices and volumes on which to allocate space to the alternate\nI        index. If more than one volume is specified in a volume list,\nI        all volumes must be the same device type.\nN\nI        When the data component and index component are to reside on\nI        different devices, you can create a separate FILE parameter as\nI        a parameter of DATA and INDEX to point to different DD\nI        statements. If the FILE parameter is not used, an attempt is\nI        made to dynamically allocate the required volumes. The volumes\nI        must be mounted as permanently resident or reserved.\nN\nI        The DD statement you specify must be:\nN\nI          //ddname    DD DISP=OLD,\nI          //             UNIT=(devtype,count),VOL=SER=(volser1,...)\nN\nI        Restriction: When FILE refers to more than one volume of the\nI        same device type, the DD statement that describes the volumes\nI        cannot be a concatenated DD statement.\nN\nD      FREESPACE(CI-% CA-% | 0 0) /* Abbreviation: FSPC */ -\nI        Designates the amount of empty space left after any primary or\nI        secondary allocation and any split of control intervals\nI        (CI-percent) and control areas (CA-percent) when the alternate\nI        index is built (search Chapter 8, \"BLDINDEX\"). The empty space\nI        in the control interval and control area is available for data\nI        records that are updated and inserted after the alternate\nI        index is initially built. The amounts are specified as\nI        percentages. CI-percent translates into a number of bytes that\nI        is either equal to, or slightly less than, the percentage\nI        value of CI-percent. CA-percent translates into a number of\nI        control intervals that is either equal to, or less than, the\nI        percentage of CA-percent.\nN\nI        The percentages must be equal to, or less than, 100. When you\nI        use 100% of free space, one data record is placed in the first\nI        control interval of each control area when the cluster\nI        is built.\nN\nD      FRLOG(ALL |NONE | REDO | UNDO) -\nI        Specifies if VSAM batch logging can be performed for your VSAM\nI        data set. VSAM batch logging is available with CICS VSAM\nI        Recovery V3R1.\nN\nI        There is no default value for FRLOG. If FRLOG is left out, the\nI        data set cannot be used for VSAM batch logging. See the ALTER\nI        command for enabling VSAM batch logging after a data set is\nI        created.\nN\nI        ALL: Enables the changes made to your VSAM data set to be both\nI          backed out and forward recovered using the VSAM logging. The\nI          LOGSTREAMID parameter indicates the changes that are made by\nI          applications that are written to the MVS log stream. When\nI          specifying FRLOG(ALL), you must also specify LOGSTREAMID.\nN\nI        NONE: Indicates that the data set can be used for VSAM batch\nI          logging. However, the function should be disabled. The\nI          LOGSTREAMID parameter indicates changes that are made by\nI          applications that are written to the MVS log stream.\nI          Specifying FRLOG(NONE) implies that you may use the data set\nI          for RLS processing; omitting it indicates that RLS processing\nI          will not occur.\nN\nI        REDO: Enables the VSAM batch logging function for your VSAM\nI          data set. The LOGSTREAMID parameter indicates changes that\nI          are made by applications that are written to the MVS log\nI          stream. When specifying FRLOG(REDO), you must also specify\nI          LOGSTREAMID.\nN\nI        UNDO: Enables the changes made to your VSAM data set to be\nI          backed out using the VSAM logging. The LOGSTREAMID parameter\nI          indicates changes that are made by applications that are\nI          written to the MVS log stream. When specifying FRLOG(UNDO),\nI          you must also specify LOGSTREAMID.\nN\nI          Restrictions:\nN\nI          -> If you do not want VSAM batch logging for your data set,\nI             do not specify the FRLOG parameter. If you specify\nI             FRLOG(NONE), the data set must support VSAM batch logging,\nI             but logging is not in effect.\nN\nI          -> If FRLOG is specified, the data set:\nN\nI            -> Must be SMS-managed\nN\nI            -> Cannot be LINEAR or a temporary data set\nN\nD      INDEXED | LINEAR | NONINDEXED | NUMBERED -\nD        /* Abbreviations: IXD, LIN, NIXD, and NUMD */ -\nI        Specifies the type of data organization for the cluster.\nN\nI        If you want a data organization other than INDEXED (the\nI        default), you must explicitly use it with this parameter.\nN\nI        When a cluster is defined, you indicate whether the data is to\nI        be indexed (key-sequenced), nonindexed (entry-sequenced),\nI        numbered (relative record), or linear.\nN\nI        Certain parameters apply only to key-sequenced clusters, as\nI        noted in the description of each of these parameters.\nN\nI        Linear data set clusters are treated as ESDS clusters that must\nI        be processed using control interval access.\nN\nI        If you do not choose either the data organization or the MODEL\nI        parameter, your cluster defaults to key-sequenced (indexed).\nN\nI        If you want to define an entry-sequenced or a relative record\nI        cluster, you must specify the NONINDEXED, the NUMBERED, or the\nI        MODEL parameter.\nN\nI        The data organization you select must be consistent with other\nI        parameters you specify.\nN\nI        INDEXED /* Abbreviation: IXD */: Shows that the cluster being\nI          defined is for key-sequenced data. If INDEXED is specified,\nI          an index component is automatically defined and cataloged.\nI          The data records can be accessed by key or by relative-byte\nI          address (RBA).\nN\nI        LINEAR /* Abbreviation: LIN */: Specifies that the cluster\nI          being defined is for linear data. Because linear data set\nI          clusters are treated as ESDS clusters that must be processed\nI          using control interval access, you can use most of the\nI          commands and parameters you use to manipulate ESDS clusters.\nI          There are two exceptions:\nN\nI          -> Parameters that refer to logical records are not allowed\nI             (except RECORDS).\nN\nI          -> Use partial printing by specifying the RBA syntax. Space\nI             is allocated for a linear data set with the number of\nI             control intervals equal to the number of records. Linear\nI             data sets cannot be accessed for RLS processing. The LOG,\nI             LOGSTREAMID, and BWO parameters do not apply to linear\nI             data sets.\nN\nI          Restriction: Linear data sets cannot be accessed for\nI          VSAM RLS or DFSMStvs processing. The LOG, LOGSTREAMID,\nI          and BWO parameters do not apply to linear data sets.\nN\nI        NONINDEXED /* Abbreviation: NIXD */: Indicates that the cluster\nI          being defined is for entry-sequenced data. The data records\nI          can be accessed sequentially or by relative-byte address\nI          (RBA).\nN\nI        NUMBERED /* Abbreviation: NUMD */: Specifies that the cluster's\nI          data organization is for relative record data. A relative\nI          record cluster, which is similar to an entry-sequenced\nI          cluster, has fixed-length records or variable-length records\nI          that are stored in slots. The RECORDSIZE parameter\nI          determines if the records are fixed-length or variable-length.\nI          Empty slots hold space for records to be added later. The\nI          data records are accessed by relative record number (slot\nI          number).\nN\nD      KEYS(length offset | 64 0) -\nI        Describes the alternate-key field in the base cluster's data\nI        record.\nN\nI        The key field of an cluster is called an alternate key.\nI        The data record's alternate key can overlap or be contained\nI        entirely within another (alternate or prime) key field.\nN\nI        The length plus offset cannot be greater than the length of\nI        the base cluster's data record.\nN\nI        When the base cluster's data record spans control intervals,\nI        the record's alternate-key field is within the record's first\nI        segment (that is, in the first control interval).\nN\nI        length offset: Gives the length of the alternate key, in bytes,\nI          and its displacement from the beginning of the base cluster's\nI          data record, in bytes.\nN\nD      LOG(NONE | UNDO | ALL) -\nI        Establishes whether the sphere to be accessed with VSAM\nI        record-level sharing (RLS) or DFSMStvs is recoverable or\nI        non-recoverable. It also indicates whether or not forward\nI        recovery logging should be performed for the data set. LOG\nI        applies to all components in the VSAM sphere. VSAM uses LOG\nI        in the following way:\nN\nI          Nonrecoverable Sphere\nI          ---------------------\nI            The sphere is considered nonrecoverable if LOG(NONE) is\nI            specified. VSAM allows concurrent read and update sharing\nI            across multiple resource managers and other applications.\nN\nI          Recoverable Sphere\nI          ------------------\nI            The sphere is considered recoverable if LOG(UNDO) or\nI            LOG(ALL) is specified. For a recoverable sphere, VSAM\nI            does not allow applications that do not support commit\nI            and backout to open a data set in the sphere for output\nI            using RLS access, but applications can open the sphere\nI            for output using DFSMStvs access. The applications can,\nI            however, open the sphere for RLS access for input\nI            processing only.\nN\nI          If LOG is specified in the SMS data class, the value defined\nI          is used as the data set definition, unless it has been\nI          previously defined with an explicitly specified or modeled\nI          DEFINE attribute. LOG cannot be used with LINEAR. LOGSTREAMID\nI          cannot be used with LINEAR.\nN\nI        NONE: Indicates that neither an external backout nor a forward\nI          recovery capability is available for the sphere accessed in\nI          VSAM RLS or DFSMStvs mode. If you use LOG(NONE), RLS and\nI          DFSMStvs consider the sphere to be nonrecoverable.\nN\nI        UNDO: Specifies that changes to the sphere accessed in\nI          VSAM RLS or DFSMStvs mode can be backed out using an external\nI          log. RLS and DFSMStvs consider the sphere to be recoverable\nI          when you use LOG(UNDO).\nN\nI        ALL: Specifies that changes to the sphere accessed in RLS and\nI          DFSMStvs mode can be backed out and forward recovered using\nI          external logs. DFSMStvs and RLS consider the sphere\nI          recoverable when you use LOG(ALL). When you specify LOG(ALL),\nI          you must also specify the LOGSTREAMID parameter.\nN\nI          VSAM RLS and DFSMStvs allow concurrent read or update sharing\nI          for nonrecoverable spheres through commit (CICS) and\nI          noncommit protocol applications. For a recoverable sphere,\nI          a noncommit protocol application must use DFSMStvs to be\nI          able to open the sphere for update using RLS access.\nN\nD      LOGSTREAMID(logstream) /* Abbreviation:LSID */ -\nI        Gives the name of the forward recovery log stream. It applies\nI        to all components in the VSAM sphere.\nN\nI        If LOGSTREAMID is specified in the SMS data class, the value\nI        defined is used as the data set definition, unless it has been\nI        previously defined with an explicitly specified or modeled\nI        DEFINE attribute.\nN\nI        logstream: The name of the forward recovery log stream. This\nI          can be a fully qualified name up to 26 characters, including\nI          separators. If LOG(ALL) is specified, LOGSTREAMID(name) must\nI          be specified.\nN\nI          For information about defining log streams for CICS use, see\nI          CICS and VSAM Record Level Sharing: Implementation Guide and\nI          z/OS DFSMStvs Administration Guide.\nN\nD      MANAGEMENTCLASS(class) /* Abbreviation:MGMTCLAS */ -\nI        For SMS-managed data sets: Specifies the name, 1-to-8\nI        characters, of the management class for a new data set. Your\nI        storage administrator defines the names of the management\nI        classes you can use. If MANAGEMENTCLASS is not used, but\nI        STORAGECLASS is used or defaulted, MANAGEMENTCLASS is derived\nI        from automatic class selection (ACS). If MANAGEMENTCLASS is\nI        specified and STORAGECLASS is not specified or derived, the\nI        DEFINE is unsuccessful. If SMS is inactive and MANAGEMENTCLASS\nI        is specified, the DEFINE will be unsuccessful. MANAGEMENTCLASS\nI        cannot be listed as a subparameter of DATA or INDEX.\nN\nD      MODEL(entryname catname) -\nI        Specifies an existing entry to be used as a model for the entry\nI        being defined. Search \"Understanding the Order of Assigned Data\nI        Set Attributes\" for information on how the system selects\nI        modeled attributes.\nN\nI        A VVDS cannot be modeled.\nN\nI        DATACLASS, MANAGEMENTCLASS, and STORAGECLASS attributes are\nI        not modeled.\nN\nI        You can use an existing cluster's entry as a model for the\nI        attributes of the cluster being defined. For details about how\nI        a model is used, see z/OS DFSMS Managing Catalogs.\nN\nI        You can use some attributes of the model and override others\nI        by explicitly specifying them in the definition of the cluster\nI        or component. If you do not want to add or change any\nI        attributes, you need specify only the entry type (cluster,\nI        data, or index) of the model to be used and the name of the\nI        entry to be defined.\nN\nI        Search \"Understanding the Order of Assigned Data Set\nI        Attributes\" for more information about the order in which the\nI        system selects an attribute. When you use a cluster entry as\nI        a model for the cluster, the data and index entries of the\nI        model cluster are used as models for the data and index\nI        components of the cluster still to be defined, unless another\nI        entry is specified with the MODEL parameter as a subparameter\nI        of DATA or INDEX.\nN\nI        entryname: specifies the name of the cluster or component entry\nI          to be used as a model.\nN\nD      OWNER(ownerid) -\nI        Gives the identification of the cluster's owner.\nN\nI        For TSO/E users, if the OWNER parameter does not identify the\nI        owner, the TSO/E user's userid becomes the ownerid value.\nN\nD      RECATALOG | NORECATALOG /* Abbreviations: RCTLG and NRCTLG */ -\nI        Specifies whether the catalog entries for the cluster\nI        components are re-created from information in the VVDS.\nN\nI        RECATALOG /* Abbreviation: RCTLG */: Recreates the catalog\nI          entries if valid VVDS entries are found on the primary VVDS\nI          volume. If not, the command ends.\nN\nI          Use of RECATALOG requires that the NAME, RELATE, and VOLUMES\nI          parameters be specified as they were when the cluster\nI          was originally defined. If you use RECATALOG, you are not\nI          required to include CYLINDERS, RECORDS, or TRACKS.\nN\nI          If ATTEMPTS, AUTHORIZATION, CATALOG, CODE, MODEL, NOUPGRADE,\nI          or OWNER parameters were used during the original define,\nI          they must be entered again with RECATALOG to restore their\nI          original values; otherwise, their default values are used.\nN\nI        NORECATALOG /* Abbreviation: NRCTLG */: Specifies that the\nI          catalog entries are not to be re-created from VVDS entries.\nI          Catalog entries are created for the first time.\nN\nD      RECORDSIZE(average maximum | 4086 32600) -\nD      /* Abbreviation: RECSZ */ -\nI        Specifies the average and maximum lengths, in bytes, of the\nI        records in the data component. The minimum record size is\nI        1 byte.\nN\nI        RECORDSIZE can be given as a parameter of either CLUSTER or\nI        DATA. This parameter overrides the LRECL specification on the\nI        DATACLASS parameter.\nN\nI        For nonspanned records, the maximum record size + 7 cannot\nI        exceed the data component's control interval size (that is,\nI        the maximum nonspanned record size, 32761, + 7 equals the\nI        maximum data component control interval size, 32768).\nN\nI        When you use a record size that is larger than one control\nI        interval, you must also specify spanned records (SPANNED).\nI        The formula for the maximum record size of spanned records as\nI        calculated by VSAM is as follows:\nN\nI        MAXLRECL = CI/CA * (CISZ - 10)\nN\nI        where:\nN\nI        -> MAXLRECL is the maximum spanned record size.\nN\nI        -> CI/CA represents the number of control intervals per\nI           control area.\nN\nI        -> CISZ is the control interval size.\nN\nI        When you select NUMBERED, you identify a data set as a relative\nI        record data set. If you use NUMBERED and select the same value\nI        for average as for maximum, the relative records must be\nI        fixed-length. If you specify NUMBERED and select two different\nI        values for the average and maximum record sizes, the relative\nI        records can be variable-length. If you know that your relative\nI        records are fixed-length, however, be sure to define them as\nI        fixed-length. Performance is affected for relative record data\nI        sets defined as variable-length. Each variable-length relative\nI        record is increased internally in length by four.\nN\nI        When your records are fixed length, you can use the following\nI        formula to find a control interval size that contains a whole\nI        number (n) of records:\nN\nI        CISZ = (n x RECSZ) + 10\nN\nI        or\nN\nI        n = (CISZ - 10) / RECSZ\nN\nI        where:\nN\nI        -> n is the number of fixed-length records in a control\nI           interval.\nN\nI        -> CISZ is the control interval size (see also the\nI           CONTROLINTERVALSIZE parameter).\nN\nI        -> RECSZ is the average record size.\nN\nI        default: When SPANNED is used, the default is\nI          RECORDSIZE(4086 32600).  Otherwise, the default is\nI          RECORDSIZE(4089 4089).\nN\nI        Example:\nN\nI        REC(sec) x RECSZ(avg) > RECSZ(max)\nN\nI        where:\nN\nI        -> REC(sec) is the secondary space allocation quantity, in\nI           records.\nN\nI        -> RECSZ(avg) is the average record size (default = 4086 or\nI           4089 bytes).\nN\nI        -> RECSZ(max) is the maximum record size (default = 4089 or\nI           32600 bytes).\nN\nI        When the SPANNED record size default prevails (32600 bytes),\nI        the secondary allocation quantity should be at least 8 records.\nN\nI        Restriction: With REPRO and EXPORT, you cannot use data sets\nI        with record sizes greater than 32760.\nN\nD      REUSE | NOREUSE /* Abbreviations: RUS and NRUS */ -\nI        Indicates whether or not the cluster can be used again\nI        as a new cluster.\nN\nI        REUSE /* Abbreviation: RUS */: Indicates that the alternate\nI          index can be used over again as a new cluster. When\nI          a reusable cluster is opened, its high-used RBA can\nI          be set to zero. Open it with an access control block using\nI          the RESET attribute.\nN\nI          When you use BLDINDEX to build a reusable cluster,\nI          the high-used RBA is always reset to zero when the alternate\nI          index is opened for BLDINDEX processing.\nN\nI          Reusable clusteres can be multivolumed and might have\nI          up to 123 physical extents.\nN\nI          Exception: If you use the keyword UNIQUE with REUSE, the\nI          DEFINE command is unsuccessful.\nN\nI        NOREUSE /* Abbreviation: NRUS */: Specifies that the alternate\nI          index cannot be used again as a new cluster.\nN\nD      SHAREOPTIONS(crossregion crosssystem | 1 3) -\nD        /* Abbreviation: SHR */ -\nI        Specifies how an cluster's data or index component can\nI        be shared among users. However, SMS-managed volumes, and\nI        catalogs containing SMS-managed data sets, must not be shared\nI        with non-SMS systems. For data integrity, ensure that share\nI        options defined for data and index components are the same.\nI        For a description of data set sharing, see z/OS DFSMS Using\nI        Data Sets.\nN\nI        crossregion: Indicates the amount of sharing allowed among\nI          regions within the same system or within multiple systems\nI          using global resource serialization (GRS). Independent job\nI          steps in an operating system, or multiple systems in a GRS\nI          ring, can access a VSAM data set concurrently. For more\nI          information about GRS, see z/OS MVS Planning: Global Resource\nI          Serialization. To share a data set, each user must include\nI          DISP=SHR in the data set's DD statement. You can use the\nI          following options:\nN\nI        1: The data set can be shared by any number of users for read\nI           processing, or the data set can be accessed by only one user\nI           for read and write processing. This setting does not allow\nI           any non-RLS access when the data set is already open for\nI           VSAM RLS or DFSMStvs processing. An RLS or DFSMStvs open\nI           fails with this option if the data set is already open for\nI           any processing.\nN\nI        2: The data set can be accessed by any number of users for read\nI           processing, and it can also be accessed by one user for\nI           write processing. It is the user's responsibility to provide\nI           read integrity. VSAM ensures write integrity by obtaining\nI           exclusive control for a control interval while it is being\nI           updated. A VSAM RLS or DFSMStvs open is not allowed while\nI           the data set is open for non-RLS output.\nN\nI           If the data set has already been opened for VSAM RLS or\nI           DFSMStvs processing, a non-RLS open for input is allowed;\nI           a non-RLS open for output fails. If the data set is opened\nI           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is\nI           allowed.\nN\nI        3: The data set can be fully shared by any number of users. The\nI           user is responsible for maintaining both read and write\nI           integrity for the data the program accesses. This setting\nI           does not allow any non-RLS access when the data set is\nI           already open for VSAM RLS or DFSMStvs processing. If the\nI           data set is opened for input in non-RLS mode, a VSAM RLS or\nI           DFSMStvs open is allowed.\nN\nI           This option is the only one applicable to a catalog.\nN\nI        4: The data set can be fully shared by any number of users. For\nI           each request, VSAM refreshes the buffers used for direct\nI           processing. This setting does not allow any non-RLS access\nI           when the data set is already open for VSAM RLS or DFSMStvs\nI           processing. If the data set is opened for input in non-RLS\nI           mode, a VSAM RLS or DFSMStvs open is allowed.\nN\nI           As in SHAREOPTIONS 3, each user is responsible for\nI           maintaining both read and write integrity for the data the\nI           program accesses.\nN\nI        crosssystem: Specifies the amount of sharing allowed among\nI          systems. Job steps of two or more operating systems can gain\nI          access to the same VSAM data set regardless of the\nI          disposition specified in each step's DD statement for the\nI          data set. However, if you are using GRS across systems or\nI          JES3, the data set might not be shared depending on the\nI          disposition of the system.\nN\nI          To get exclusive control of the data set's volume, a task\nI          in one system issues the RESERVE macro. The level of\nI          cross-system sharing allowed by VSAM applies only in a\nI          multiple operating system environment.\nN\nI          The cross-system sharing options are ignored by VSAM RLS or\nI          DFSMStvs processing. The values are:\nN\nI          1: Reserved.\nN\nI          2: Reserved.\nN\nI          3: Specifies that the data set can be fully shared. Each\nI             user is responsible for maintaining both read and write\nI             integrity for the data that user's program accesses. User\nI             programs that ignore write integrity guidelines can result\nI             in:\nN\nI            -> VSAM program checks\nN\nI            -> Uncorrectable data set errors\nN\nI            -> Unpredictable results\nN\nI            The RESERVE and DEQ macros are required with this option\nI            to maintain data set integrity. (See z/OS MVS Programming:\nI            Authorized Assembler Services Reference ALE-DYN and\nI            z/OS MVS Programming: Authorized Assembler Services\nI            Reference LLA-SDU for information on using RESERVE and DEQ.)\nI            If the sphere is accessed using VSAM RLS or DFSMStvs\nI            protocols, VSAM RLS maintains the required integrity.\nN\nI          4: Specifies that the data set can be fully shared. For each\nI             request, VSAM refreshes the buffers used for direct\nI             processing. This option requires that you use the RESERVE\nI             and DEQ macros to maintain data integrity while sharing\nI             the data set. Improper use of the RESERVE macro can cause\nI             problems similar to those described under SHAREOPTIONS 3.\nI             (See z/OS MVS Programming: Authorized Assembler Services\nI             Reference ALE-DYN and z/OS MVS Programming: Authorized\nI             Assembler Services Reference LLA-SDU for information on\nI             using RESERVE and DEQ.) Output processing is limited to\nI             update, or add processing, or both that does not change\nI             either the high-used RBA or the RBA of the high key data\nI             control interval if DISP=SHR is used.\nN\nI            To ensure data integrity in a shared environment, VSAM\nI            provides users of SHAREOPTIONS 4 (cross-region and\nI            cross-system) with the following assistance:\nN\nI            -> Each PUT writes the appropriate buffer immediately into\nI               the VSAM object's DASD. VSAM writes out the buffer in\nI               the user's address space that contains the new or\nI               updated data record.\nN\nI            -> Each GET refreshes the user's input buffers. The\nI               contents of each data and index buffer used by the\nI               user's program is retrieved from the VSAM object's DASD.\nN\nI            Exception: If you use VSAM RLS or DFSMStvs, SHAREOPTIONS\nI            is assumed to be (3,3). If you do not use VSAM RLS or\nI            DFSMStvs, the SHAREOPTIONS specification is respected.\nN\nD      SPANNED | NONSPANNED /* Abbreviation: SPND and NSPND */-\nI        Specifies whether a data record is allowed to cross control\nI        interval boundaries.\nN\nI        If SPANNED or NONSPANNED is specified in the SMS data class,\nI        the value defined is used as the data set definition, unless\nI        it has been previously defined with an explicitly specified\nI        or modeled DEFINE attribute.\nN\nI        This parameter cannot be used when defining a linear data set\nI        cluster.\nN\nI        SPANNED /* Abbreviation: SPND */: Specifies that, if the\nI          maximum length of a data record (as specified with\nI          RECORDSIZE) is larger than a control interval, the record is\nI          contained on more than one control interval. This allows\nI          VSAM to select a control interval size that is optimum for\nI          the DASD.\nN\nI          When a data record that is larger than a control interval\nI          is put into a cluster that allows spanned records, the first\nI          part of the record completely fills a control interval.\nI          Subsequent control intervals are filled until the record is\nI          written into the cluster. Unused space in the record's last\nI          control interval is not available to contain other data\nI          records.\nN\nI          Using this parameter for a Variable-Length or a Fixed-Length\nI          Relative Record Data Set causes an error.\nN\nI        NONSPANNED /* Abbreviation: NSPND */: Indicates that the record\nI          must be contained in one control interval. VSAM selects a\nI          control interval size that accommodates your largest record.\nN\nD      SPEED | RECOVERY /* Abbreviation: RCVY */ -\nI        Specifies whether the data component's control areas are to be\nI        preformatted during loading.\nN\nI        This parameter is only considered during the actual loading\nI        (creation) of a data set. Creation occurs when the data set is\nI        opened and the high-used RBA is equal to zero. After normal\nI        CLOSE processing at the completion of the load operation, the\nI        physical structure of the data set and the content of the data\nI        set extents are exactly the same, regardless of which option is\nI        used. Any processing of the data set after the successful load\nI        operation is the same, and the specification of this parameter\nI        is not considered.\nN\nI        If you use RECOVERY, the initial load takes longer because the\nI        control areas are first written with either empty or software\nI        end-of-file control intervals. These preformatted control\nI        intervals are then updated, using update writes with the data\nI        records. When SPEED is used, the initial load is faster.\nN\nI        SPEED: Does not preformat the data component's space.\nN\nI          If the initial load is unsuccessful, you must load the data\nI          set again from the beginning because VSAM cannot determine\nI          the location of your last correctly written record. VSAM\nI          cannot find a valid end-of-file indicator when it searches\nI          your data records.\nN\nI        RECOVERY /* Abbreviation: RCVY */: Does preformat the data\nI          component's space prior to writing the data records.\nN\nI          If the initial load is unsuccessful, VSAM can determine the\nI          location of the last record written during the load process.\nN\nD      STORAGECLASS(class) /* Abbreviation: STORCLAS */ -\nI        For SMS-managed data sets: Gives the name, 1-to-8 characters\nI        of the storage class.\nN\nI        Your storage administrator defines the names of the storage\nI        classes you can use. A storage class is assigned either when\nI        you use STORAGECLASS, or an ACS routine selects a storage class\nI        for the new data set. The storage class provides the storage\nI        attributes that are specified on the UNIT and VOLUME operand\nI        for non-SMS managed data sets. Use the storage class to select\nI        the storage service level to be used by SMS for storage of the\nI        data set. If SMS is inactive and STORAGECLASS is used, the\nI        DEFINE will be unsuccessful.\nN\nI        STORAGECLASS cannot be selected as a subparameter of DATA\nI        or INDEX.\nN\nD      TO(date) | FOR(days) -\nI        Specifies the retention period for the cluster being defined.\nI        If neither TO nor FOR is used, the cluster can be deleted at\nI        any time. The MANAGEMENTCLASS maximum retention period, if\nI        selected, limits the retention period specified by this\nI        parameter.\nN\nI        For non-SMS-managed data sets, the correct retention period is\nI        reflected in the catalog entry. The VTOC entry cannot contain\nI        the correct retention period.\nN\nI        Enter a LISTCAT command for the correct expiration date.\nN\nI        For SMS-managed data sets, the expiration date in the catalog\nI        is updated and the expiration date in the format-1 DSCB is\nI        changed. If the expiration date in the catalog does not agree\nI        with the expiration date in the VTOC, the VTOC entry overrides\nI        the catalog entry.\nN\nI        TO(date): Specifies the earliest date that a command without\nI          the PURGE parameter can delete an entry. Specify the\nI          expiration date in the form yyyyddd, where yyyy is a\nI          four-digit year (to a maximum of 2155) and ddd is the\nI          three-digit day of the year from 001 through 365\nI          (for non-leap years) or 366 (for leap years).\nN\nI          The following four values are \"never-expire\" dates:\nI          99365, 99366, 1999365, and 1999366. Specifying a\nI          \"never-expire\" date means that the PURGE parameter will\nI          always be required to delete an entry. For related\nI          information, see the \"EXPDT Parameter\" section of\nI          z/OS MVS JCL Reference, SA22-7597.\nN\nI          Note: Specifying the current date as the expiration date will\nI          make an entry eligible for deletion.\nN\nI        FOR(days): Specifies the number of days you want to keep the\nI          cluster being defined. The maximum number is 93000. If the\nI          number is 0 through 92999 (except for 9999), the entry is\nI          retained for the number of days indicated. If the number is\nI          either 9999 or 93000, the entry is retained indefinitely.\nI          There is a hardware imposed expiration date of 2155.\nN\nD      VOLUMES(volser volser...) /* Abbreviation: VOL */ -\nI        Specifies the volumes on which an cluster's components\nI        are to have space. This parameter is not required if the\nI        cluster is modeled or if the cluster is SMS-managed. You can\nI        specify VOLUMES for SMS-managed data sets; however, the volumes\nI        specified might not be used and, in some cases, can result in\nI        an error.\nn\nI        For SMS-managed data sets, you can use up to 59 volumes. If the\nI        combined number of volumes for a cluster and its associated\nI        clusteres exceeds 59, unpredictable results can occur.\nn\nI        You can let SMS choose the volumes for SMS-managed data sets by\nI        coding an * for the volser with the VOLUMES parameter. If both\nI        user-specified and SMS-specified volumes are requested, the\nI        user-specified volser must be input first in the command\nI        syntax. The default is one volume.\nN\nI        If you do not use the MODEL parameter, VOLUMES must be placed\nI        as a parameter of CLUSTER, or as a parameter of both\nI        DATA and INDEX.\nN\nI        If the data and index components are to reside on different\nI        device types, you must include VOLUMES as a parameter of both\nI        DATA and INDEX. If more than one volume is listed with a single\nI        VOLUMES parameter, the volumes must be the same device type.\nN\nI        You can repeat a volume serial number in the list only if you\nI        use the KEYRANGE parameter. This can place more than one key\nI        range on the same volume. However, repetition is valid only if\nI        all duplicate occurrences are used for the primary allocation\nI        of some key range.\nN\nM          You are not allowed to specify KEYRANGE.\nN\nI        The VOLUMES parameter interacts with other\nI        DEFINE CLUSTER parameters. Ensure that the volumes you\nI        define for the cluster are consistent with the\nI        cluster's other attributes:\nN\nI        -> CYLINDERS, RECORDS, TRACKS: The volumes contain enough\nI           available space to satisfy the component's primary space\nI           requirement.\nN\nI        -> FILE: To define an cluster, the volume information\nI           supplied with the DD statement pointed to by FILE must be\nI           consistent with the information listed for the alternate\nI           index and its components.\nN\nD      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */ -\nI        Determines whether an cluster or component is checked\nI        by a machine action called write-check when a record is written\nI        into it.\nN\nI        WRITECHECK /* Abbreviation: WCK */: Indicates that a record is\nI          written and then read, without data transfer, to test for the\nI          data check condition.\nN\nI          Exception: When you use VSAM RLS or DFSMStvs access, the\nN          WRITECHECK parameter is ignored.\nN\nI        NOWRITECHECK /* Abbreviation: NWCK */: Does not write-check the\nI          cluster or component. checked by a write check.\nN\nD    ) -\nNDATA parameters\nN---------------\nD    DATA( -\nD      CYLINDERS(primary secondary) | /* Abbreviation: CYL */ -\nD      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -\nD      MEGABYTES(primary secondary) | /* Abbreviation: MB */ -\nD      RECORDS(primary secondary) | /* Abbreviation: REC */-\nD      TRACKS(primary secondary) /* Abbreviation: TRK */ -\nI        The amount of space in cylinders, kilobytes, megabytes,\nI        records, or tracks allocated to the cluster from the\nI        volume's available space. A kilobyte and megabyte allocation\nI        resolves to either tracks or cylinders; records are allocated\nI        to the nearest track boundary. Exception: If allocation\nI        resolves to tracks, the space is contiguous. For more\nI        information, see \"Optimizing Control Area Size\" in\nI        z/OS DFSMS Using Data Sets.\nN\nI        Requests for space are directed to DADSM and result in a\nI        format-1 DSCB for the data and index component entries.\nN\nI        If you do not use the MODEL parameter or the RECATALOG\nI        parameter, you must include one, and only one, of these\nI        parameters: CYLINDERS, KILOBYTES, MEGABYTES, RECORDS, or\nI        TRACKS.\nN\nI        The space parameter is optional if the cluster is SMS-managed,\nI        but if you do not use it, space can be modeled or defaulted by\nI        SMS. If it is not determined, the DEFINE is unsuccessful. The\nI        maximum space can be specified with unit of KILOBYTES or\nI        MEGABYTES is 16,777,215. If the amount requested exceeds this\nI        value, you should specify a different larger allocation unit.\nN\nI        To maintain device independence, do not use the TRACKS or\nI        CYLINDERS parameters. If you do not use TRACKS or CYLINDERS\nI        for an SMS-managed cluster, space is allocated on the\nI        volume selected by SMS.\nN\nM          These days the only mainframe DASD devices in use are\nM          likely to be 3390 and thus the caution about device\nM          independence is no longer applicable. If you have something\nM          else it is way past time to migrate to the current geometry.\nN\nI        When you do not divide the data component into key ranges, and\nI        more than one volume is given, the primary amount of space is\nI        allocated only on the first volume when the component is\nI        defined. When the component increases to extend to additional\nI        volumes, the first allocation on each overflow volume is the\nI        primary amount.\nN\nM          Since you can no longer specify KEYRANGE the above paragraph\nI          should be modified by IBM.\nN\nI        Secondary amounts can be allocated on all volumes available to\nI        contain parts of the cluster, regardless of the key\nI        ranges when the cluster is extended.\nN\nI        You can include the amount of space as a parameter of\nI        CLUSTER, as a parameter of DATA, or as a parameter of\nI        both DATA and INDEX.\nN\nI        -> If the space is specified as a parameter of CLUSTER,\nI           the amount specified is divided between the data and index\nI           components. The division algorithm is a function of control\nI           interval size, record size, device type, and other data set\nI           attributes.\nN\nI           If the division results in an allocation for the data\nI           component that is not an integral multiple of the required\nI           control area size, the data component's allocation is\nI           rounded up to the next higher control area multiple. This\nI           rounding can result in a larger total allocation for your\nI           cluster than what you specified.\nN\nI           If the space is specified as a parameter of DATA, the entire\nI           amount given is allocated to the data component. An\nI           additional amount of space, depending on control interval\nI           size, record size, device type, and other data set\nI           attributes, is allocated to the index component.\nN\nI        To determine the exact amount of space allocated to each\nI        component, list the cluster's catalog entry, using\nI        the LISTCAT command.\nN\nI        The primary and each secondary allocation must be able to be\nI        satisfied within five extents; otherwise, your DEFINE or data\nI        set extension is unsuccessful. You can use these keywords for\nI        both SMS managed and non-SMS-managed data sets.\nN\nI        primary: Allocates the initial amount of space to the\nI        cluster.\nN\nI        secondary: Allocates the amount of space each time the\nI        cluster extends, as a secondary extent. If the\nI        secondary space allocation is greater than 4.0 gigabytes, it\nI        is reduced to an amount as close to 4.0 GB as possible,\nI        without going over. This is not true for extended\nI        addressability data sets, which have no such space limitation.\nI        When you use secondary, space for the cluster's data\nI        and index components can be expanded to a maximum of\nI        123 extents.\nN\nD      BUFFERSPACE(size) /* Abbreviations: BUFSP or BUFSPC */ -\nI        Provides the minimum space for buffers. VSAM determines the\nI        data component's and index component's control interval size.\nI        If you do not use BUFFERSPACE, VSAM provides enough space to\nI        contain two data component control intervals and, if the data\nI        is key-sequenced, one index component control interval.\nN\nI        size: is the buffer of space. You can use decimal (n),\nI          hexadecimal (X'n'), or binary (B'n'). The size cannot be\nI          less than enough space to contain two data component control\nI          intervals and, if the data is key sequenced, one index\nI          control interval.\nN\nI          If the buffer size is less than VSAM requires to run your\nI          job, it will be treated as though the parameter was not\nI          specified and the buffer size will be set to the default\nI          value.\nN\nI          Exception: When you use RLS or DFSMStvs access, DFSMS ignores\nI          BUFFERSPACE.\nN\nI          Note: The limitations of the bufferspace value on how many\nI          buffers will be allocated is based on storage available in\nI          your region, and other parameters or attributes of the data\nI          set.\nN\nD      CONTROLINTERVALSIZE(size) /* Abbreviations: CISZ or CNVSZ */ -\nI        Defines the size of the cluster's control intervals.\nI        This depends on the maximum size of data records, and on the\nI        amount of buffer space given. LSR/GSR buffering technique\nI        users can ensure buffer pool selection by explicitly defining\nI        data and index control interval sizes.\nN\nI        When you do not specify the control interval size, VSAM\nI        determines the control interval size. If you have not specified\nI        BUFFERSPACE and the size of your records permits, VSAM selects\nI        the optimum size for the data control interval size and\nI        512 bytes for the index control interval size.\nN\nI        size: The size of the cluster's data and index\nI          components.\nN\nI          Because an cluster always has the spanned attribute,\nI          the control interval size can be less than the maximum\nI          record length. You can define a size from 512, to 8K in\nI          increments of 512 or from 8K to 32K in increments of 2K\nI          (where K is 1024 in decimal notation). If you use a size\nI          that is not a multiple of 512 or 2048, VSAM chooses the\nI          next higher multiple.\nN\nI          The index control interval should be large enough to\nI          accommodate all of the compressed keys in a data control\nI          area. If the index control interval size is too small,\nI          unnecessary control area splits can occur. After the first\nI          define (DEFINE), a catalog listing ( LISTC ) shows the number\nI          of control intervals in a control area and the key length\nI          of the data set. To make a general estimate of the index\nI          control interval size needed, multiply one-half of the key\nI          length (KEYLEN) by the number of data control intervals per\nI          control area (DATA CI/CA):\nN\nI          (KEYLEN/2 ) * DATA CI/CA <= INDEX CISIZE\nN\nI          For information about the relationship between control\nI          interval size and physical block size, see z/OS DFSMS Using\nI          Data Sets for the relationship between control interval size\nI          and physical block size. This document also includes\nI          restrictions that apply to control interval size and\nI          physical block size.\nN\nD      DATACLASS(class) /* Abbreviation: DATACLAS */ -\nI        The 1 to 8 character name of the data class for the data set.\nI        The DATACLASS parameter provides the allocation attributes for\nI        new data sets. Your storage administrator defines the data\nI        class. However, you can override the parameters defined for\nI        DATACLASS by explicitly defining other attributes. Search\nI        \"Understanding the Order of Assigned Data Set Attributes\" for\nI        the order of precedence (filtering) the system uses to select\nI        which attribute to assign. The record organization attribute\nI        of DATACLASS is not used for DEFINE CLUSTER.\nn\ni        DATACLASS parameters apply to both SMS-managed and\nI        non-SMS-managed data sets. If DATACLASS is used and SMS is\nI        inactive, the DEFINE is unsuccessful.\nN\nD      ERASE | NOERASE /* Abbreviations: ERAS and NERAS */-\nI        indicates if the records of the cluster components are\nI        erased when the cluster is deleted.\nN\nI        ERASE: Requires the records of the cluster components\nI          are overwritten with binary zeros when the cluster\nI          is deleted. If the base cluster of the cluster is\nI          protected by a RACF generic or discrete profile and the base\nI          cluster is cataloged in a catalog, you can use RACF commands\nI          to specify an ERASE attribute as part of this profile so that\nI          the component is automatically erased upon deletion.\nN\nI        NOERASE: Specifies that the records of the cluster\nI          components are not to be overwritten with binary zeros.\nI          NOERASE prevents the component from being erased if the base\nI          cluster of the cluster is protected by a RACF\nI          generic or discrete profile that specifies the ERASE\nI          attribute and if the base cluster is cataloged in a catalog.\nI          You can use RACF commands to alter the ERASE attribute in a\nI          profile.\nN\nD      EXCEPTIONEXIT(entrypoint) /* Abbreviation: EEXT */ -\nI        The name of your exception exit routine, that receives control\nI        when an exceptional I/O error condition occurs during the\nI        transfer of data between your program's address space and the\nI        cluster's direct access storage space. (An exception\nI        is any condition that causes a SYNAD exit to be taken.) The\nI        component's exception exit routine is processed first; then\nI        SYNAD exit routine receives control. If an exception exit\nI        routine is loaded from an unauthorized library during access\nI        method services processing, an abnormal termination occurs.\nN\nD      FILE(ddname) -\nI        Names the DD statement that identifies the direct access\nI        devices and volumes on which to allocate space to the alternate\nI        index. If more than one volume is specified in a volume list,\nI        all volumes must be the same device type.\nN\nI        When the data component and index component are to reside on\nI        different devices, you can create a separate FILE parameter as\nI        a parameter of DATA and INDEX to point to different DD\nI        statements. If the FILE parameter is not used, an attempt is\nI        made to dynamically allocate the required volumes. The volumes\nI        must be mounted as permanently resident or reserved.\nN\nI        The DD statement you specify must be:\nN\nI          //ddname    DD DISP=OLD,\nI          //             UNIT=(devtype,count),VOL=SER=(volser1,...)\nN\nI        Restriction: When FILE refers to more than one volume of the\nI        same device type, the DD statement that describes the volumes\nI        cannot be a concatenated DD statement.\nN\nD      FREESPACE(CI-% CA-% | 0 0) /* Abbreviation: FSPC */ -\nI        Designates the amount of empty space left after any primary or\nI        secondary allocation and any split of control intervals\nI        (CI-percent) and control areas (CA-percent) when the alternate\nI        index is built (search Chapter 8, \"BLDINDEX\"). The empty space\nI        in the control interval and control area is available for data\nI        records that are updated and inserted after the alternate\nI        index is initially built. The amounts are specified as\nI        percentages. CI-percent translates into a number of bytes that\nI        is either equal to, or slightly less than, the percentage\nI        value of CI-percent. CA-percent translates into a number of\nI        control intervals that is either equal to, or less than, the\nI        percentage of CA-percent.\nN\nI        The percentages must be equal to, or less than, 100. When you\nI        use 100% of free space, one data record is placed in the first\nI        control interval of each control area when the cluster\nI        is built.\nN\nD      KEYS(length offset | 64 0) -\nI        Describes the alternate-key field in the base cluster's data\nI        record.\nN\nI        The key field of an cluster is called an alternate key.\nI        The data record's alternate key can overlap or be contained\nI        entirely within another (alternate or prime) key field.\nN\nI        The length plus offset cannot be greater than the length of\nI        the base cluster's data record.\nN\nI        When the base cluster's data record spans control intervals,\nI        the record's alternate-key field is within the record's first\nI        segment (that is, in the first control interval).\nN\nI        length offset: Gives the length of the alternate key, in bytes,\nI          and its displacement from the beginning of the base cluster's\nI          data record, in bytes.\nN\nD      MODEL(entryname catname) -\nI        Specifies an existing entry to be used as a model for the entry\nI        being defined. Search \"Understanding the Order of Assigned Data\nI        Set Attributes\" for information on how the system selects\nI        modeled attributes.\nN\nI        A VVDS cannot be modeled.\nN\nI        DATACLASS, MANAGEMENTCLASS, and STORAGECLASS attributes are\nI        not modeled.\nN\nI        You can use an existing cluster's entry as a model for the\nI        attributes of the cluster being defined. For details about how\nI        a model is used, see z/OS DFSMS Managing Catalogs.\nN\nI        You can use some attributes of the model and override others\nI        by explicitly specifying them in the definition of the cluster\nI        or component. If you do not want to add or change any\nI        attributes, you need specify only the entry type (cluster,\nI        data, or index) of the model to be used and the name of the\nI        entry to be defined.\nN\nI        Search \"Understanding the Order of Assigned Data Set\nI        Attributes\" for more information about the order in which the\nI        system selects an attribute. When you use a cluster entry as\nI        a model for the cluster, the data and index entries of the\nI        model cluster are used as models for the data and index\nI        components of the cluster still to be defined, unless another\nI        entry is specified with the MODEL parameter as a subparameter\nI        of DATA or INDEX.\nN\nI        entryname: specifies the name of the cluster or component entry\nI          to be used as a model.\nN\nD      NAME(entryname) -\nI        The name of the DATA component.\nN\nI        You can define a separate entry name for the cluster,\nI        its data component, and its index component. If you do not give\nI        a name for the data or index component, one is generated. For\nI        more information about the system-generated name format, see\nI        z/OS DFSMS Managing Catalogs.\nN\nI        When the cluster, data component, and index component\nI        are individually named, each can be addressed.\nN\nD      OWNER(ownerid) -\nI        Gives the identification of the cluster's owner.\nN\nI        For TSO/E users, if the OWNER parameter does not identify the\nI        owner, the TSO/E user's userid becomes the ownerid value.\nN\nD      RECORDSIZE(average maximum) -\nI        The average and maximum length, in bytes, of an alternate\nI        index record.\nN\nI        An cluster record can span control intervals, so\nI        RECORDSIZE can be larger than CONTROLINTERVALSIZE. The formula\nI        for the maximum record size of spanned records as calculated\nI        by VSAM is:\nN\nI          MAXLRECL = CI/CA * (CISZ - 10)\nN\nI        where:\nN\nI        -> MAXLRECL is the maximum spanned record size\nN\nI        -> CI/CA represents the number of control intervals per\nI           control area\nN\nI        -> CA is the number of control areas\nN\nI        -> CISZ is the quantity control interval size\nN\nI        You can use either of the following formulas to determine the\nI        size of the cluster record:\nN\nI        -> When the cluster supports a key-sequenced base\nI           cluster, use this formula:\nN\nI           RECSZ = 5 + AIXKL + (n x BCKL)\nN\nI        -> When the cluster supports an entry-sequenced base\nI           cluster, use this formula:\nN\nI           RECSZ = 5 + AIXKL + (n x 4)\nN\nI        Variables in the formulas represent these values:\nN\nI        -> RECSZ is the average record size.\nN\nI        -> AIXKL is the alternate-key length (see the KEYS parameter).\nN\nI        -> BCKL is the base cluster's prime-key length. (You can enter\nI           the LISTCAT command to determine this base cluster's\nI           prime-key length).\nN\nI        -> n = 1 when UNIQUEKEY is specified (RECSZ is also the maximum\nI           record size).\nN\nI        -> n = the number of data records in the base cluster that\nI           contain the same alternate-key value, when NONUNIQUEKEY is\nI           specified.\nN\nI        When you use NONUNIQUEKEY, give a record size large enough to\nI        allow for as many key pointers or RBA pointers as you might\nI        need. The record length values apply only to the alternate\nI        index's data component.\nN\nI        Restriction: REPRO to non-VSAM targets and EXPORT do not\nI        support data sets with record sizes greater than 32760. The\nI        maximum number of prime keys that a single cluster\nI        logical record can contain is 32767.\nN\nD      REUSE | NOREUSE /* Abbreviations: RUS and NRUS */ -\nI        Indicates whether or not the cluster can be used again\nI        as a new cluster.\nN\nI        REUSE /* Abbreviation: RUS */: Indicates that the alternate\nI          index can be used over again as a new cluster. When\nI          a reusable cluster is opened, its high-used RBA can\nI          be set to zero. Open it with an access control block using\nI          the RESET attribute.\nN\nI          When you use BLDINDEX to build a reusable cluster,\nI          the high-used RBA is always reset to zero when the alternate\nI          index is opened for BLDINDEX processing.\nN\nI          Reusable clusteres can be multivolumed and might have\nI          up to 123 physical extents.\nN\nI          Exception: If you use the keyword UNIQUE with REUSE, the\nI          DEFINE command is unsuccessful.\nN\nI        NOREUSE /* Abbreviation: NRUS */: Specifies that the alternate\nI          index cannot be used again as a new cluster.\nN\nD      SHAREOPTIONS(crossregion crosssystem | 1 3) -\nD        /* Abbreviation: SHR */ -\nI        Specifies how an cluster's data or index component can\nI        be shared among users. However, SMS-managed volumes, and\nI        catalogs containing SMS-managed data sets, must not be shared\nI        with non-SMS systems. For data integrity, ensure that share\nI        options defined for data and index components are the same.\nI        For a description of data set sharing, see z/OS DFSMS Using\nI        Data Sets.\nN\nI        crossregion: Indicates the amount of sharing allowed among\nI          regions within the same system or within multiple systems\nI          using global resource serialization (GRS). Independent job\nI          steps in an operating system, or multiple systems in a GRS\nI          ring, can access a VSAM data set concurrently. For more\nI          information about GRS, see z/OS MVS Planning: Global Resource\nI          Serialization. To share a data set, each user must include\nI          DISP=SHR in the data set's DD statement. You can use the\nI          following options:\nN\nI        1: The data set can be shared by any number of users for read\nI           processing, or the data set can be accessed by only one user\nI           for read and write processing. This setting does not allow\nI           any non-RLS access when the data set is already open for\nI           VSAM RLS or DFSMStvs processing. An RLS or DFSMStvs open\nI           fails with this option if the data set is already open for\nI           any processing.\nN\nI        2: The data set can be accessed by any number of users for read\nI           processing, and it can also be accessed by one user for\nI           write processing. It is the user's responsibility to provide\nI           read integrity. VSAM ensures write integrity by obtaining\nI           exclusive control for a control interval while it is being\nI           updated. A VSAM RLS or DFSMStvs open is not allowed while\nI           the data set is open for non-RLS output.\nN\nI           If the data set has already been opened for VSAM RLS or\nI           DFSMStvs processing, a non-RLS open for input is allowed;\nI           a non-RLS open for output fails. If the data set is opened\nI           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is\nI           allowed.\nN\nI        3: The data set can be fully shared by any number of users. The\nI           user is responsible for maintaining both read and write\nI           integrity for the data the program accesses. This setting\nI           does not allow any non-RLS access when the data set is\nI           already open for VSAM RLS or DFSMStvs processing. If the\nI           data set is opened for input in non-RLS mode, a VSAM RLS or\nI           DFSMStvs open is allowed.\nN\nI           This option is the only one applicable to a catalog.\nN\nI        4: The data set can be fully shared by any number of users. For\nI           each request, VSAM refreshes the buffers used for direct\nI           processing. This setting does not allow any non-RLS access\nI           when the data set is already open for VSAM RLS or DFSMStvs\nI           processing. If the data set is opened for input in non-RLS\nI           mode, a VSAM RLS or DFSMStvs open is allowed.\nN\nI           As in SHAREOPTIONS 3, each user is responsible for\nI           maintaining both read and write integrity for the data the\nI           program accesses.\nN\nI        crosssystem: Specifies the amount of sharing allowed among\nI          systems. Job steps of two or more operating systems can gain\nI          access to the same VSAM data set regardless of the\nI          disposition specified in each step's DD statement for the\nI          data set. However, if you are using GRS across systems or\nI          JES3, the data set might not be shared depending on the\nI          disposition of the system.\nN\nI          To get exclusive control of the data set's volume, a task\nI          in one system issues the RESERVE macro. The level of\nI          cross-system sharing allowed by VSAM applies only in a\nI          multiple operating system environment.\nN\nI          The cross-system sharing options are ignored by VSAM RLS or\nI          DFSMStvs processing. The values are:\nN\nI          1: Reserved.\nN\nI          2: Reserved.\nN\nI          3: Specifies that the data set can be fully shared. Each\nI             user is responsible for maintaining both read and write\nI             integrity for the data that user's program accesses. User\nI             programs that ignore write integrity guidelines can result\nI             in:\nN\nI            -> VSAM program checks\nN\nI            -> Uncorrectable data set errors\nN\nI            -> Unpredictable results\nN\nI            The RESERVE and DEQ macros are required with this option\nI            to maintain data set integrity. (See z/OS MVS Programming:\nI            Authorized Assembler Services Reference ALE-DYN and\nI            z/OS MVS Programming: Authorized Assembler Services\nI            Reference LLA-SDU for information on using RESERVE and DEQ.)\nI            If the sphere is accessed using VSAM RLS or DFSMStvs\nI            protocols, VSAM RLS maintains the required integrity.\nN\nI          4: Specifies that the data set can be fully shared. For each\nI             request, VSAM refreshes the buffers used for direct\nI             processing. This option requires that you use the RESERVE\nI             and DEQ macros to maintain data integrity while sharing\nI             the data set. Improper use of the RESERVE macro can cause\nI             problems similar to those described under SHAREOPTIONS 3.\nI             (See z/OS MVS Programming: Authorized Assembler Services\nI             Reference ALE-DYN and z/OS MVS Programming: Authorized\nI             Assembler Services Reference LLA-SDU for information on\nI             using RESERVE and DEQ.) Output processing is limited to\nI             update, or add processing, or both that does not change\nI             either the high-used RBA or the RBA of the high key data\nI             control interval if DISP=SHR is used.\nN\nI            To ensure data integrity in a shared environment, VSAM\nI            provides users of SHAREOPTIONS 4 (cross-region and\nI            cross-system) with the following assistance:\nN\nI            -> Each PUT writes the appropriate buffer immediately into\nI               the VSAM object's DASD. VSAM writes out the buffer in\nI               the user's address space that contains the new or\nI               updated data record.\nN\nI            -> Each GET refreshes the user's input buffers. The\nI               contents of each data and index buffer used by the\nI               user's program is retrieved from the VSAM object's DASD.\nN\nI            Exception: If you use VSAM RLS or DFSMStvs, SHAREOPTIONS\nI            is assumed to be (3,3). If you do not use VSAM RLS or\nI            DFSMStvs, the SHAREOPTIONS specification is respected.\nN\nD      SPANNED | NONSPANNED /* Abbreviation: SPND and NSPND */-\nI        Specifies whether a data record is allowed to cross control\nI        interval boundaries.\nN\nI        If SPANNED or NONSPANNED is specified in the SMS data class,\nI        the value defined is used as the data set definition, unless\nI        it has been previously defined with an explicitly specified\nI        or modeled DEFINE attribute.\nN\nI        This parameter cannot be used when defining a linear data set\nI        cluster.\nN\nI        SPANNED /* Abbreviation: SPND */: Specifies that, if the\nI          maximum length of a data record (as specified with\nI          RECORDSIZE) is larger than a control interval, the record is\nI          contained on more than one control interval. This allows\nI          VSAM to select a control interval size that is optimum for\nI          the DASD.\nN\nI          When a data record that is larger than a control interval\nI          is put into a cluster that allows spanned records, the first\nI          part of the record completely fills a control interval.\nI          Subsequent control intervals are filled until the record is\nI          written into the cluster. Unused space in the record's last\nI          control interval is not available to contain other data\nI          records.\nN\nI          Using this parameter for a Variable-Length or a Fixed-Length\nI          Relative Record Data Set causes an error.\nN\nI        NONSPANNED /* Abbreviation: NSPND */: Indicates that the record\nI          must be contained in one control interval. VSAM selects a\nI          control interval size that accommodates your largest record.\nN\nD      SPEED | RECOVERY /* Abbreviation: RCVY */ -\nI        Specifies whether the data component's control areas are to be\nI        preformatted during loading.\nN\nI        This parameter is only considered during the actual loading\nI        (creation) of a data set. Creation occurs when the data set is\nI        opened and the high-used RBA is equal to zero. After normal\nI        CLOSE processing at the completion of the load operation, the\nI        physical structure of the data set and the content of the data\nI        set extents are exactly the same, regardless of which option is\nI        used. Any processing of the data set after the successful load\nI        operation is the same, and the specification of this parameter\nI        is not considered.\nN\nI        If you use RECOVERY, the initial load takes longer because the\nI        control areas are first written with either empty or software\nI        end-of-file control intervals. These preformatted control\nI        intervals are then updated, using update writes with the data\nI        records. When SPEED is used, the initial load is faster.\nN\nI        SPEED: Does not preformat the data component's space.\nN\nI          If the initial load is unsuccessful, you must load the data\nI          set again from the beginning because VSAM cannot determine\nI          the location of your last correctly written record. VSAM\nI          cannot find a valid end-of-file indicator when it searches\nI          your data records.\nN\nI        RECOVERY /* Abbreviation: RCVY */: Does preformat the data\nI          component's space prior to writing the data records.\nN\nI          If the initial load is unsuccessful, VSAM can determine the\nI          location of the last record written during the load process.\nN\nD      VOLUMES(volser volser...) /* Abbreviation: VOL */ -\nI        Specifies the volumes on which an cluster's components\nI        are to have space. This parameter is not required if the\nI        cluster is modeled or if the cluster is SMS-managed. You can\nI        specify VOLUMES for SMS-managed data sets; however, the volumes\nI        specified might not be used and, in some cases, can result in\nI        an error.\nn\nI        For SMS-managed data sets, you can use up to 59 volumes. If the\nI        combined number of volumes for a cluster and its associated\nI        clusteres exceeds 59, unpredictable results can occur.\nn\nI        You can let SMS choose the volumes for SMS-managed data sets by\nI        coding an * for the volser with the VOLUMES parameter. If both\nI        user-specified and SMS-specified volumes are requested, the\nI        user-specified volser must be input first in the command\nI        syntax. The default is one volume.\nN\nI        If you do not use the MODEL parameter, VOLUMES must be placed\nI        as a parameter of CLUSTER, or as a parameter of both\nI        DATA and INDEX.\nN\nI        If the data and index components are to reside on different\nI        device types, you must include VOLUMES as a parameter of both\nI        DATA and INDEX. If more than one volume is listed with a single\nI        VOLUMES parameter, the volumes must be the same device type.\nN\nI        You can repeat a volume serial number in the list only if you\nI        use the KEYRANGE parameter. This can place more than one key\nI        range on the same volume. However, repetition is valid only if\nI        all duplicate occurrences are used for the primary allocation\nI        of some key range.\nN\nM          You are not allowed to specify KEYRANGE.\nN\nI        The VOLUMES parameter interacts with other\nI        DEFINE CLUSTER parameters. Ensure that the volumes you\nI        define for the cluster are consistent with the\nI        cluster's other attributes:\nN\nI        -> CYLINDERS, RECORDS, TRACKS: The volumes contain enough\nI           available space to satisfy the component's primary space\nI           requirement.\nN\nI        -> FILE: To define an cluster, the volume information\nI           supplied with the DD statement pointed to by FILE must be\nI           consistent with the information listed for the alternate\nI           index and its components.\nN\nD      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */ -\nI        Determines whether an cluster or component is checked\nI        by a machine action called write-check when a record is written\nI        into it.\nN\nI        WRITECHECK /* Abbreviation: WCK */: Indicates that a record is\nI          written and then read, without data transfer, to test for the\nI          data check condition.\nN\nI          Exception: When you use VSAM RLS or DFSMStvs access, the\nN          WRITECHECK parameter is ignored.\nN\nI        NOWRITECHECK /* Abbreviation: NWCK */: Does not write-check the\nI          cluster or component. checked by a write check.\nN\nD    ) -\nN\nNINDEX parameters\nN----------------\nD    INDEX( -\nD      CYLINDERS(primary secondary) | /* Abbreviation: CYL */ -\nD      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -\nD      MEGABYTES(primary secondary) | /* Abbreviation: MB */ -\nD      RECORDS(primary secondary) | /* Abbreviation: REC */-\nD      TRACKS(primary secondary) /* Abbreviation: TRK */ -\nI        The amount of space in cylinders, kilobytes, megabytes,\nI        records, or tracks allocated to the cluster from the\nI        volume's available space. A kilobyte and megabyte allocation\nI        resolves to either tracks or cylinders; records are allocated\nI        to the nearest track boundary. Exception: If allocation\nI        resolves to tracks, the space is contiguous. For more\nI        information, see \"Optimizing Control Area Size\" in\nI        z/OS DFSMS Using Data Sets.\nN\nI        Requests for space are directed to DADSM and result in a\nI        format-1 DSCB for the data and index component entries.\nN\nI        If you do not use the MODEL parameter or the RECATALOG\nI        parameter, you must include one, and only one, of these\nI        parameters: CYLINDERS, KILOBYTES, MEGABYTES, RECORDS, or\nI        TRACKS.\nN\nI        The space parameter is optional if the cluster is SMS-managed,\nI        but if you do not use it, space can be modeled or defaulted by\nI        SMS. If it is not determined, the DEFINE is unsuccessful. The\nI        maximum space can be specified with unit of KILOBYTES or\nI        MEGABYTES is 16,777,215. If the amount requested exceeds this\nI        value, you should specify a different larger allocation unit.\nN\nI        To maintain device independence, do not use the TRACKS or\nI        CYLINDERS parameters. If you do not use TRACKS or CYLINDERS\nI        for an SMS-managed cluster, space is allocated on the\nI        volume selected by SMS.\nN\nM          These days the only mainframe DASD devices in use are\nM          likely to be 3390 and thus the caution about device\nM          independence is no longer applicable. If you have something\nM          else it is way past time to migrate to the current geometry.\nN\nI        When you do not divide the data component into key ranges, and\nI        more than one volume is given, the primary amount of space is\nI        allocated only on the first volume when the component is\nI        defined. When the component increases to extend to additional\nI        volumes, the first allocation on each overflow volume is the\nI        primary amount.\nN\nM          Since you can no longer specify KEYRANGE the above paragraph\nI          should be modified by IBM.\nN\nI        Secondary amounts can be allocated on all volumes available to\nI        contain parts of the cluster, regardless of the key\nI        ranges when the cluster is extended.\nN\nI        You can include the amount of space as a parameter of\nI        CLUSTER, as a parameter of DATA, or as a parameter of\nI        both DATA and INDEX.\nN\nI        -> If the space is specified as a parameter of CLUSTER,\nI           the amount specified is divided between the data and index\nI           components. The division algorithm is a function of control\nI           interval size, record size, device type, and other data set\nI           attributes.\nN\nI           If the division results in an allocation for the data\nI           component that is not an integral multiple of the required\nI           control area size, the data component's allocation is\nI           rounded up to the next higher control area multiple. This\nI           rounding can result in a larger total allocation for your\nI           cluster than what you specified.\nN\nI           If the space is specified as a parameter of DATA, the entire\nI           amount given is allocated to the data component. An\nI           additional amount of space, depending on control interval\nI           size, record size, device type, and other data set\nI           attributes, is allocated to the index component.\nN\nI        To determine the exact amount of space allocated to each\nI        component, list the cluster's catalog entry, using\nI        the LISTCAT command.\nN\nI        The primary and each secondary allocation must be able to be\nI        satisfied within five extents; otherwise, your DEFINE or data\nI        set extension is unsuccessful. You can use these keywords for\nI        both SMS managed and non-SMS-managed data sets.\nN\nI        primary: Allocates the initial amount of space to the\nI        cluster.\nN\nI        secondary: Allocates the amount of space each time the\nI        cluster extends, as a secondary extent. If the\nI        secondary space allocation is greater than 4.0 gigabytes, it\nI        is reduced to an amount as close to 4.0 GB as possible,\nI        without going over. This is not true for extended\nI        addressability data sets, which have no such space limitation.\nI        When you use secondary, space for the cluster's data\nI        and index components can be expanded to a maximum of\nI        123 extents.\nN\nD      CONTROLINTERVALSIZE(size) /* Abbreviations: CISZ or CNVSZ */ -\nI        Defines the size of the cluster's control intervals.\nI        This depends on the maximum size of data records, and on the\nI        amount of buffer space given. LSR/GSR buffering technique\nI        users can ensure buffer pool selection by explicitly defining\nI        data and index control interval sizes.\nN\nI        When you do not specify the control interval size, VSAM\nI        determines the control interval size. If you have not specified\nI        BUFFERSPACE and the size of your records permits, VSAM selects\nI        the optimum size for the data control interval size and\nI        512 bytes for the index control interval size.\nN\nI        size: The size of the cluster's data and index\nI          components.\nN\nI          Because an cluster always has the spanned attribute,\nI          the control interval size can be less than the maximum\nI          record length. You can define a size from 512, to 8K in\nI          increments of 512 or from 8K to 32K in increments of 2K\nI          (where K is 1024 in decimal notation). If you use a size\nI          that is not a multiple of 512 or 2048, VSAM chooses the\nI          next higher multiple.\nN\nI          The index control interval should be large enough to\nI          accommodate all of the compressed keys in a data control\nI          area. If the index control interval size is too small,\nI          unnecessary control area splits can occur. After the first\nI          define (DEFINE), a catalog listing ( LISTC ) shows the number\nI          of control intervals in a control area and the key length\nI          of the data set. To make a general estimate of the index\nI          control interval size needed, multiply one-half of the key\nI          length (KEYLEN) by the number of data control intervals per\nI          control area (DATA CI/CA):\nN\nI          (KEYLEN/2 ) * DATA CI/CA <= INDEX CISIZE\nN\nI          For information about the relationship between control\nI          interval size and physical block size, see z/OS DFSMS Using\nI          Data Sets for the relationship between control interval size\nI          and physical block size. This document also includes\nI          restrictions that apply to control interval size and\nI          physical block size.\nN\nD      DATACLASS(class) /* Abbreviation: DATACLAS */ -\nI        The 1 to 8 character name of the data class for the data set.\nI        The DATACLASS parameter provides the allocation attributes for\nI        new data sets. Your storage administrator defines the data\nI        class. However, you can override the parameters defined for\nI        DATACLASS by explicitly defining other attributes. Search\nI        \"Understanding the Order of Assigned Data Set Attributes\" for\nI        the order of precedence (filtering) the system uses to select\nI        which attribute to assign. The record organization attribute\nI        of DATACLASS is not used for DEFINE CLUSTER.\nn\ni        DATACLASS parameters apply to both SMS-managed and\nI        non-SMS-managed data sets. If DATACLASS is used and SMS is\nI        inactive, the DEFINE is unsuccessful.\nN\nD      EXCEPTIONEXIT(entrypoint) /* Abbreviation: EEXT */ -\nI        The name of your exception exit routine, that receives control\nI        when an exceptional I/O error condition occurs during the\nI        transfer of data between your program's address space and the\nI        cluster's direct access storage space. (An exception\nI        is any condition that causes a SYNAD exit to be taken.) The\nI        component's exception exit routine is processed first; then\nI        SYNAD exit routine receives control. If an exception exit\nI        routine is loaded from an unauthorized library during access\nI        method services processing, an abnormal termination occurs.\nN\nD      FILE(ddname) -\nI        Names the DD statement that identifies the direct access\nI        devices and volumes on which to allocate space to the alternate\nI        index. If more than one volume is specified in a volume list,\nI        all volumes must be the same device type.\nN\nI        When the data component and index component are to reside on\nI        different devices, you can create a separate FILE parameter as\nI        a parameter of DATA and INDEX to point to different DD\nI        statements. If the FILE parameter is not used, an attempt is\nI        made to dynamically allocate the required volumes. The volumes\nI        must be mounted as permanently resident or reserved.\nN\nI        The DD statement you specify must be:\nN\nI          //ddname    DD DISP=OLD,\nI          //             UNIT=(devtype,count),VOL=SER=(volser1,...)\nN\nI        Restriction: When FILE refers to more than one volume of the\nI        same device type, the DD statement that describes the volumes\nI        cannot be a concatenated DD statement.\nN\nI        Uses existing entry as a model for the entry being defined or\nI        re-cataloged. DATACLASS, MANAGEMENTCLASS, and STORAGECLASS\nI        cannot be modeled. Search \"Understanding the Order of Assigned\nI        Data Set Attributes\" for information on how the system selects\nI        modeled attributes.\nN\nI        You can use an existing cluster's entry as a model for\nI        the attributes of the cluster being defined. For\nI        details about how a model is used, see z/OS DFSMS Managing\nI        Catalogs.\nN\nI        You can use some attributes of the model and override others\nI        by defining them in the cluster or component. If you do not\nI        want to add or change any attributes, use only the entry type\nI        of the model (cluster, data, or index) and the name of\nI        the entry to be defined.\nN\nI        When you use an cluster entry as a model for an\nI        cluster, the model entry's data and index components\nI        are used as models for the to-be-defined entry's data and index\nI        components, unless another entry is specified with the MODEL\nI        parameter as a subparameter of DATA or INDEX.\nN\nI        entryname: Names the entry to be used as a model.\nN\nI        catname: Names the model entry's catalog. You must identify the\nI          catalog that contains the model entry when you want to assign\nI          the catalog's password instead of the model entry's password.\nN\nI          If the catalog's volume is physically mounted, it is\nI          dynamically allocated. The volume must be mounted as\nI          permanently resident or reserved. Search \"Catalog Selection\nI          Order for DEFINE\" for information about the order in which\nI          a catalog is selected when the catalog's name is not\nI          specified.\nN\nD      MODEL(entryname catname) -\nI        Specifies an existing entry to be used as a model for the entry\nI        being defined. Search \"Understanding the Order of Assigned Data\nI        Set Attributes\" for information on how the system selects\nI        modeled attributes.\nN\nI        A VVDS cannot be modeled.\nN\nI        DATACLASS, MANAGEMENTCLASS, and STORAGECLASS attributes are\nI        not modeled.\nN\nI        You can use an existing cluster's entry as a model for the\nI        attributes of the cluster being defined. For details about how\nI        a model is used, see z/OS DFSMS Managing Catalogs.\nN\nI        You can use some attributes of the model and override others\nI        by explicitly specifying them in the definition of the cluster\nI        or component. If you do not want to add or change any\nI        attributes, you need specify only the entry type (cluster,\nI        data, or index) of the model to be used and the name of the\nI        entry to be defined.\nN\nI        Search \"Understanding the Order of Assigned Data Set\nI        Attributes\" for more information about the order in which the\nI        system selects an attribute. When you use a cluster entry as\nI        a model for the cluster, the data and index entries of the\nI        model cluster are used as models for the data and index\nI        components of the cluster still to be defined, unless another\nI        entry is specified with the MODEL parameter as a subparameter\nI        of DATA or INDEX.\nN\nI        entryname: specifies the name of the cluster or component entry\nI          to be used as a model.\nN\nD      NAME(entryname) -\nI        The name of the INDEX component.\nN\nI        Defines the cluster's entryname or the name of each of its\nI        components. The entryname used for the cluster as a whole is\nI        not propagated to the cluster's components.\nN\nI        For SMS and non-SMS-managed clusters, the component names must\nI        resolve to the same catalog as the data set's cluster name.\nN\nI        You can define a separate entryname for the cluster, its data\nI        component, and its index component. If no name is specified for\nI        the data and index component, a name is generated. When the\nI        cluster, data component, and index component are individually\nI        named, each can be addressed. For information on system\nI        generated names, see z/OS DFSMS Using Data Sets.\nN\nI        When defining a VSAM volume data set (VVDS), the entryname for\nI        the cluster or the data component must be in the form\nI        SYS1.VVDS.Vvolser, where volser is the volume serial number\nI        specified by the VOLUMES parameter. The default primary and\nI        secondary allocation is 10 tracks. VVDSs cannot be defined in\nI        cylinder-managed space. For information on defining a VVDS\nI        see z/OS DFSMS Managing Catalogs.\nN\nD      OWNER(ownerid) -\nI        Gives the identification of the cluster's owner.\nN\nI        For TSO/E users, if the OWNER parameter does not identify the\nI        owner, the TSO/E user's userid becomes the ownerid value.\nN\nD      REUSE | NOREUSE /* Abbreviations: RUS and NRUS */ -\nI        Indicates whether or not the cluster can be used again\nI        as a new cluster.\nN\nI        REUSE /* Abbreviation: RUS */: Indicates that the alternate\nI          index can be used over again as a new cluster. When\nI          a reusable cluster is opened, its high-used RBA can\nI          be set to zero. Open it with an access control block using\nI          the RESET attribute.\nN\nI          When you use BLDINDEX to build a reusable cluster,\nI          the high-used RBA is always reset to zero when the alternate\nI          index is opened for BLDINDEX processing.\nN\nI          Reusable clusteres can be multivolumed and might have\nI          up to 123 physical extents.\nN\nI          Exception: If you use the keyword UNIQUE with REUSE, the\nI          DEFINE command is unsuccessful.\nN\nI        NOREUSE /* Abbreviation: NRUS */: Specifies that the alternate\nI          index cannot be used again as a new cluster.\nN\nD      SHAREOPTIONS(crossregion crosssystem | 1 3) -\nD        /* Abbreviation: SHR */ -\nI        Specifies how an cluster's data or index component can\nI        be shared among users. However, SMS-managed volumes, and\nI        catalogs containing SMS-managed data sets, must not be shared\nI        with non-SMS systems. For data integrity, ensure that share\nI        options defined for data and index components are the same.\nI        For a description of data set sharing, see z/OS DFSMS Using\nI        Data Sets.\nN\nI        crossregion: Indicates the amount of sharing allowed among\nI          regions within the same system or within multiple systems\nI          using global resource serialization (GRS). Independent job\nI          steps in an operating system, or multiple systems in a GRS\nI          ring, can access a VSAM data set concurrently. For more\nI          information about GRS, see z/OS MVS Planning: Global Resource\nI          Serialization. To share a data set, each user must include\nI          DISP=SHR in the data set's DD statement. You can use the\nI          following options:\nN\nI        1: The data set can be shared by any number of users for read\nI           processing, or the data set can be accessed by only one user\nI           for read and write processing. This setting does not allow\nI           any non-RLS access when the data set is already open for\nI           VSAM RLS or DFSMStvs processing. An RLS or DFSMStvs open\nI           fails with this option if the data set is already open for\nI           any processing.\nN\nI        2: The data set can be accessed by any number of users for read\nI           processing, and it can also be accessed by one user for\nI           write processing. It is the user's responsibility to provide\nI           read integrity. VSAM ensures write integrity by obtaining\nI           exclusive control for a control interval while it is being\nI           updated. A VSAM RLS or DFSMStvs open is not allowed while\nI           the data set is open for non-RLS output.\nN\nI           If the data set has already been opened for VSAM RLS or\nI           DFSMStvs processing, a non-RLS open for input is allowed;\nI           a non-RLS open for output fails. If the data set is opened\nI           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is\nI           allowed.\nN\nI        3: The data set can be fully shared by any number of users. The\nI           user is responsible for maintaining both read and write\nI           integrity for the data the program accesses. This setting\nI           does not allow any non-RLS access when the data set is\nI           already open for VSAM RLS or DFSMStvs processing. If the\nI           data set is opened for input in non-RLS mode, a VSAM RLS or\nI           DFSMStvs open is allowed.\nN\nI           This option is the only one applicable to a catalog.\nN\nI        4: The data set can be fully shared by any number of users. For\nI           each request, VSAM refreshes the buffers used for direct\nI           processing. This setting does not allow any non-RLS access\nI           when the data set is already open for VSAM RLS or DFSMStvs\nI           processing. If the data set is opened for input in non-RLS\nI           mode, a VSAM RLS or DFSMStvs open is allowed.\nN\nI           As in SHAREOPTIONS 3, each user is responsible for\nI           maintaining both read and write integrity for the data the\nI           program accesses.\nN\nI        crosssystem: Specifies the amount of sharing allowed among\nI          systems. Job steps of two or more operating systems can gain\nI          access to the same VSAM data set regardless of the\nI          disposition specified in each step's DD statement for the\nI          data set. However, if you are using GRS across systems or\nI          JES3, the data set might not be shared depending on the\nI          disposition of the system.\nN\nI          To get exclusive control of the data set's volume, a task\nI          in one system issues the RESERVE macro. The level of\nI          cross-system sharing allowed by VSAM applies only in a\nI          multiple operating system environment.\nN\nI          The cross-system sharing options are ignored by VSAM RLS or\nI          DFSMStvs processing. The values are:\nN\nI          1: Reserved.\nN\nI          2: Reserved.\nN\nI          3: Specifies that the data set can be fully shared. Each\nI             user is responsible for maintaining both read and write\nI             integrity for the data that user's program accesses. User\nI             programs that ignore write integrity guidelines can result\nI             in:\nN\nI            -> VSAM program checks\nN\nI            -> Uncorrectable data set errors\nN\nI            -> Unpredictable results\nN\nI            The RESERVE and DEQ macros are required with this option\nI            to maintain data set integrity. (See z/OS MVS Programming:\nI            Authorized Assembler Services Reference ALE-DYN and\nI            z/OS MVS Programming: Authorized Assembler Services\nI            Reference LLA-SDU for information on using RESERVE and DEQ.)\nI            If the sphere is accessed using VSAM RLS or DFSMStvs\nI            protocols, VSAM RLS maintains the required integrity.\nN\nI          4: Specifies that the data set can be fully shared. For each\nI             request, VSAM refreshes the buffers used for direct\nI             processing. This option requires that you use the RESERVE\nI             and DEQ macros to maintain data integrity while sharing\nI             the data set. Improper use of the RESERVE macro can cause\nI             problems similar to those described under SHAREOPTIONS 3.\nI             (See z/OS MVS Programming: Authorized Assembler Services\nI             Reference ALE-DYN and z/OS MVS Programming: Authorized\nI             Assembler Services Reference LLA-SDU for information on\nI             using RESERVE and DEQ.) Output processing is limited to\nI             update, or add processing, or both that does not change\nI             either the high-used RBA or the RBA of the high key data\nI             control interval if DISP=SHR is used.\nN\nI            To ensure data integrity in a shared environment, VSAM\nI            provides users of SHAREOPTIONS 4 (cross-region and\nI            cross-system) with the following assistance:\nN\nI            -> Each PUT writes the appropriate buffer immediately into\nI               the VSAM object's DASD. VSAM writes out the buffer in\nI               the user's address space that contains the new or\nI               updated data record.\nN\nI            -> Each GET refreshes the user's input buffers. The\nI               contents of each data and index buffer used by the\nI               user's program is retrieved from the VSAM object's DASD.\nN\nI            Exception: If you use VSAM RLS or DFSMStvs, SHAREOPTIONS\nI            is assumed to be (3,3). If you do not use VSAM RLS or\nI            DFSMStvs, the SHAREOPTIONS specification is respected.\nN\nD      VOLUMES(volser volser...) /* Abbreviation: VOL */ -\nI        Specifies the volumes on which an cluster's components\nI        are to have space. This parameter is not required if the\nI        cluster is modeled or if the cluster is SMS-managed. You can\nI        specify VOLUMES for SMS-managed data sets; however, the volumes\nI        specified might not be used and, in some cases, can result in\nI        an error.\nn\nI        For SMS-managed data sets, you can use up to 59 volumes. If the\nI        combined number of volumes for a cluster and its associated\nI        clusteres exceeds 59, unpredictable results can occur.\nn\nI        You can let SMS choose the volumes for SMS-managed data sets by\nI        coding an * for the volser with the VOLUMES parameter. If both\nI        user-specified and SMS-specified volumes are requested, the\nI        user-specified volser must be input first in the command\nI        syntax. The default is one volume.\nN\nI        If you do not use the MODEL parameter, VOLUMES must be placed\nI        as a parameter of CLUSTER, or as a parameter of both\nI        DATA and INDEX.\nN\nI        If the data and index components are to reside on different\nI        device types, you must include VOLUMES as a parameter of both\nI        DATA and INDEX. If more than one volume is listed with a single\nI        VOLUMES parameter, the volumes must be the same device type.\nN\nI        You can repeat a volume serial number in the list only if you\nI        use the KEYRANGE parameter. This can place more than one key\nI        range on the same volume. However, repetition is valid only if\nI        all duplicate occurrences are used for the primary allocation\nI        of some key range.\nN\nM          You are not allowed to specify KEYRANGE.\nN\nI        The VOLUMES parameter interacts with other\nI        DEFINE CLUSTER parameters. Ensure that the volumes you\nI        define for the cluster are consistent with the\nI        cluster's other attributes:\nN\nI        -> CYLINDERS, RECORDS, TRACKS: The volumes contain enough\nI           available space to satisfy the component's primary space\nI           requirement.\nN\nI        -> FILE: To define an cluster, the volume information\nI           supplied with the DD statement pointed to by FILE must be\nI           consistent with the information listed for the alternate\nI           index and its components.\nN\nD      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */ -\nI        Determines whether an cluster or component is checked\nI        by a machine action called write-check when a record is written\nI        into it.\nN\nI        WRITECHECK /* Abbreviation: WCK */: Indicates that a record is\nI          written and then read, without data transfer, to test for the\nI          data check condition.\nN\nI          Exception: When you use VSAM RLS or DFSMStvs access, the\nN          WRITECHECK parameter is ignored.\nN\nI        NOWRITECHECK /* Abbreviation: NWCK */: Does not write-check the\nI          cluster or component. checked by a write check.\nN\nD    ) /* - */\nN\nNOptional parameter\nN------------------\nM    CATALOG(catname) /* Abbreviation: CAT */\nI      Identifies the catalog in which the cluster is defined.\nI      The catalog also contains the base cluster's entry (see the\nI      description of the RELATE in preceding text). Search \"Catalog\nI      Selection Order for DEFINE\" for the order in which a catalog is\nI      selected if the catalog's name is not specified.\nN\nI      Before you can assign catalog names for SMS-managed data sets,\nI      you must have access to the RACF STGADMIN.IGG.DIRCAT FACILITY\nI      class. Search \"Storage Management Subsystem (SMS) Considerations\"\nI      for more information.\nN\nI      catname/alias: Names the catalog or an alias that can be resolved\nI        to a catalog. For example, if alias ABCD relates to catalog\nI        SYS1.USERCAT then specifying either ABCD or SYS1.USERCAT will\nI        cause the cluster to be defined in SYS1.USERCAT.\nN\nI      If the catalog's volume is physically mounted, it is dynamically\nI      allocated. Mount the volume as permanently resident or reserved.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC1411": {"ttr": 8195, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1411\nTDFSMS AMS\nT-Chapter 14.\nT-Example 1: Define an SMS-Managed Key-Sequenced Cluster\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095010\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 14. DEFINE CLUSTER\nN--------------------------\nNExample 1: Define an SMS-Managed Key-Sequenced Cluster\nN------------------------------------------------------\nD//DEFCLS1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    CLUSTER( -\nD      NAME(SMS04.KSDS01) -\nD      DATACLASS(VSAMDB05) -\nD      MANAGEMENTCLASS(MC1985) -\nD      STORAGECLASS(FINCE02) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE CLUSTER parameters are:\nN----------------------------------\nN-> NAME: indicates that the cluster's name is SMS04.KSDS01.\nN\nN-> DATACLASS: is an installation-defined name of an SMS data class. The\nN   data set assumes the RECORG or RECFM, LRECL, KEYLEN, KEYOFF, AVGREC,\nN   SPACE, EXPDT or RETPD, VOLUME, CISIZE, FREESPACE, and SHAREOPTIONS\nN   parameters assigned to this data class by the ACS routines. This\nN   parameter is optional. If it is not used, the data set will assume\nN   the data class default assigned by the ACS routines.\nN\nM     vsamdb05: is an installation defined SMS class.\nN\nN-> MANAGEMENTCLASS: specifies an installation-defined name of a\nN   management class, MC1985, to be assigned to this cluster. Attributes\nN   of MANAGEMENTCLASS control the data set's retention, backup,\nN   migration, etc.\nN\nM     MC1985: is an installation defined SMS class.\nN\nN-> STORAGECLASS: STORAGECLASS specifies an installation-defined name\nN   of a storage class, FINCE02, to be assigned to this cluster.\nN\nM     FINCE02: is an installation defined SMS class.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1412": {"ttr": 8197, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1412\nTDFSMS AMS\nT-Chapter 14.\nT-Example 2: Define an SMS-Managed Key-Sequenced Cluster Specifying\nTData and Index Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095020\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 14. DEFINE CLUSTER\nN--------------------------\nNExample 2: Define an SMS-Managed Key-Sequenced Cluster Specifying\nN           Data and Index Parameters\nN-----------------------------------------------------------------\nD//DEFCLS2  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    CLUSTER( -\nD      NAME(SMS04.KSDS01) -\nD      DATACLASS(VSAMDB05) -\nD      LOG(ALL) -\nD      LOGSTREAMID(LogA) -\nD      MANAGEMENTCLASS(MC1985) -\nD      STORAGECLASS(FINCE02) -\nD    ) -\nD    DATA -\nD      (MEGABYTES(10 2) -\nD    ) -\nD    INDEX -\nD      (KILOBYTES(25 5) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE CLUSTER parameters are:\nN----------------------------------\nN-> NAME: indicates that the cluster's name is SMS04.KSDS01.\nN\nN-> DATACLASS: is an installation-defined name of an SMS data class. The\nN   data set assumes the RECORG or RECFM, LRECL, KEYLEN, KEYOFF, AVGREC,\nN   SPACE, EXPDT or RETPD, VOLUME, CISIZE, FREESPACE, and SHAREOPTIONS\nN   parameters assigned to this data class by the ACS routines. This\nN   parameter is optional. If it is not used, the data set will assume\nN   the data class default assigned by the ACS routines.\nN\nM     vsamdb05: is an installation defined SMS class.\nN\nN-> LOG(ALL): specifies that changes to the sphere accessed in RLS and\nN   DFSMStvs mode can be backed out and forward recovered using external\nN   logs.\nN\nN-> LOGSTREAMID: gives the name of the forward recovery log stream.\nN\nN-> MANAGEMENTCLASS: specifies an installation-defined name of a\nN   management class, MC1985, to be assigned to this cluster. Attributes\nN   of MANAGEMENTCLASS control the data set's retention, backup,\nN   migration, etc.\nN\nM     MC1985: is an installation defined SMS class.\nN\nN-> STORAGECLASS: STORAGECLASS specifies an installation-defined name\nN   of a storage class, FINCE02, to be assigned to this cluster.\nN\nM     FINCE02: is an installation defined SMS class.\nN\nNThe DATA and INDEX component parameters are:\nN--------------------------------------------\nN-> MEGABYTES: used for DATA, allocates a primary space of 10 megabytes\nN   to the data component. A secondary space of 2 megabytes is specified\nN   for extending the data component.\nN\nN-> KILOBYTES: used for INDEX, allocates a primary space of 25 kilobytes\nN   to the index component. A secondary space of 5 kilobytes is\nN   specified for extending the index component.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1413": {"ttr": 8199, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1413\nTDFSMS AMS\nT-Chapter 14.\nT-Example 3: Define a Key-Sequenced Cluster Specifying Data and Index\nTParameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095031\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 14. DEFINE CLUSTER\nN--------------------------\nNExample 3: Define a Key-Sequenced Cluster Specifying Data and Index\nNParameters\nN-------------------------------------------------------------------\nD//DEFCLS3  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    CLUSTER( -\nD      NAME(VWX.MYDATA) -\nD      RECORDS(1000 500) -\nD      VOLUMES(VSER02) -\nD    ) -\nD    DATA( -\nD      NAME(VWX.KSDATA) -\nD      BUFFERSPACE(25000) -\nD      FREESPACE(20 10) -\nD      KEYS(15 0) -\nD      RECORDSIZE(250 250) -\nD    ) -\nD    INDEX( -\nD      NAME(VWX.KSINDEX) -\nD    ) /* - */\nM    CATALOG (RSTUCAT1)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE CLUSTER parameters are:\nN----------------------------------\nN-> NAME: indicates that the cluster's name is VWX.MYDATA.\nN\nN-> RECORDS: specifies that the cluster's space allocation is 1000 data\nN   records. The cluster is extended in increments of 500 records. After\nN   the space is allocated, VSAM calculates the amount required for the\nN   index and subtracts it from the total.\nN\nN-> VOLUMES: is used when the cluster is to reside on volume VSER02.\nN\nNThe DATA component parameters are:\nN----------------------------------\nN-> NAME: indicates that the data component's name is VWX.KSDATA.\nN\nN-> BUFFERSPACE: verifies that a minimum of 25 000 bytes must be\nN   provided for I/O buffers. A large area for I/O buffers can help to\nN   improve access time with certain types of processing. For example,\nN   with direct processing if the high-level index can be kept in\nN   virtual storage, access time is reduced. With sequential processing,\nN   if enough I/O buffers are available, VSAM can perform a read-ahead,\nN   thereby reducing system overhead and minimizing rotational delay.\nN\nN-> FREESPACE: specifies that 20% of each control interval and 10% of\nN   each control area are to be left free when records are loaded into\nN   the cluster. After the cluster's records are loaded, the free space\nN   can be used to contain new records.\nN\nN-> KEYS: shows that the length of the key field is 15 bytes and that\nN   the key field begins in the first byte (byte 0) of each data record.\nN\nN-> RECORDSIZE: specifies fixed-length records of 250 bytes.\nN\nNThe INDEX component parameters are:\nN-----------------------------------\nN-> NAME: specifies that the index component's name is VWX.KSINDEX.\nN\nNThe CATALOG parameters are:\nN---------------------------\nN-> CATALOG: specifies the catalog name.\nN\nM   You should let the system determine the user catalog for application\nM   data sets.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1414": {"ttr": 8201, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1414\nTDFSMS AMS\nT-Chapter 14.\nT-Example 4: Define an Entry-Sequenced Cluster\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095042\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 14. DEFINE CLUSTER\nN--------------------------\nNExample 4: Define an Entry-Sequenced Cluster\nN--------------------------------------------\nD//DEFCLS4  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    CLUSTER( -\nD      NAME(KLM.EXAMPLE.ESDS1) -\nD      NONINDEXED -\nD      RECORDS(100 500) -\nD      RECORDSIZE(250 250) -\nD      VOLUMES(VSER03) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE CLUSTER parameters are:\nN----------------------------------\nN-> NAME: indicates that the cluster's name is KLM.EXAMPLE.ESDS1.\nN\nN-> NONINDEXED: specifies that the cluster is to be an entry-sequenced\nN   cluster.\nN\nN-> RECORDS: specifies that the cluster's space allocation is 100 data\nN   records. The cluster is extended in increments of 500 records. After\nN   the space is allocated, VSAM calculates the amount required for the\nN   index and subtracts it from the total.\nN\nN-> RECORDSIZE: specifies that the cluster records are fixed length\nN   (the average record size equals the maximum record size) and\nN   250 bytes long.\nN\nN-> VOLUMES: specifies that the cluster is to reside on volume VSER03.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1415": {"ttr": 8449, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1415\nTDFSMS AMS\nT-Chapter 14.\nT-Example 5: Define a Relative Record Cluster\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095053\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 14. DEFINE CLUSTER\nN--------------------------\nNExample 5: Define a Relative Record Cluster\nN-------------------------------------------\nD//DEFCLS5  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    CLUSTER( -\nD      NAME(EXAMPLE.RRDS1) -\nD      NUMBERED -\nD      RECORDSIZE(250 250) -\nD      TRACKS(10 5) -\nD      VOLUMES(VSER01) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE CLUSTER parameters are:\nN----------------------------------\nN-> NAME: indicates that the cluster's name is EXAMPLE.RRDS1.\nN\nN-> NUMBERED: specifies that the cluster's data organization is to be\nN   relative record.\nN\nN-> RECORDSIZE: specifies that the records are fixed-length, 100 byte\nN   records. Average and maximum record length must be equal for a\nN   fixed-length relative record data set, but not equal for a\nN   variable-length RRDS.\nN\nN-> TRACKS: specifies that 10 tracks are allocated for the cluster.\nN   When the cluster is extended, it is to be extended in increments of\nN   5 tracks.\nN\nN-> VOLUMES: specifies that the cluster is to reside on volume VSER01.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1416": {"ttr": 8451, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1416\nTDFSMS AMS\nT-Chapter 14.\nT-Example 6: Define a Reusable Entry-Sequenced Cluster\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095105\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 14. DEFINE CLUSTER\nN--------------------------\nNExample 6: Define a Reusable Entry-Sequenced Cluster\nN----------------------------------------------------\nD//DEFCLS6  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    CLUSTER( -\nD      NAME(EXAMPLE.ESDS2) -\nD      CYLINDERS(2 1) -\nD      NONINDEXED -\nD      RECORDSIZE(2500 3000) -\nD      REUSE -\nD      SPANNED -\nD      VOLUMES(VSER03) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE CLUSTER parameters are:\nN----------------------------------\nN-> NAME: indicates that the cluster's name is EXAMPLE.ESDS2.\nN\nN-> CYLINDERS: specifies that two cylinders are to be allocated for the\nN   cluster's space. When the cluster is extended, it is to be extended\nN   in increments of 1 cylinder.\nN\nN-> NONINDEXED: specifies that the cluster's data organization is to be\nN   entry-sequenced. This parameter overrides the default INDEXED\nN   parameter.\nN\nN-> RECORDSIZE: specifies that the records are variable length, with an\nN   average size of 2500 bytes and a maximum size of 3000 bytes.\nN\nN-> REUSE: specifies that the cluster is to be reusable. Each time the\nN   cluster is opened, its high-used RBA can be reset to zero and it is\nN   effectively an empty cluster.\nN\nN-> SPANNED: specifies that data records can cross control interval\nN   boundaries.\nN\nN-> VOLUMES: specifies that the cluster is to reside on volume VSER03.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1417": {"ttr": 8453, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1417\nTDFSMS AMS\nT-Chapter 14.\nT-Example 7: Define a Key-Sequenced Cluster\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095115\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 14. DEFINE CLUSTER\nN--------------------------\nNExample 7: Define a Key-Sequenced Cluster\nN-----------------------------------------\nD//DEFCLS7  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    CLUSTER( -\nD      NAME(EXAMPLE.KSDS2) -\nD    ) -\nD    DATA( -\nD      ERASE -\nD      EXCEPTIONEXIT(DATEXIT) -\nD      FREESPACE(20 10) -\nD      KEYS(6 4) -\nD      RECORDS(500 100) -\nD      RECORDSIZE(80 100) -\nD      VOLUMES(VSER01) -\nD    ) -\nD    INDEX( -\nD      RECORDS(300 300) -\nD      VOLUMES(VSER01) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE CLUSTER parameters are:\nN----------------------------------\nN-> NAME: indicates that the cluster's name is EXAMPLE.KSDS2.\nN\nNThe DATA component parameters are:\nN----------------------------------\nN-> ERASE: specifies that the cluster's data is to be erased\nN   (overwritten with binary zeros) when the cluster is deleted.\nN\nN-> EXCEPTIONEXIT: specifies the name of the exception exit routine,\nN   DATEXIT, that is to be processed if an I/O error occurs while a\nN   data record is being processed.\nN\nN-> FREESPACE: specifies the amounts of free space to be left in the\nN   data component's control intervals (20%) and the control areas\nN   (10% of the control intervals in the control area) when data records\nN   are loaded into the cluster.\nN\nN-> KEYS: specifies the location and length of the key field in each\nN   data record. The key field is 6 bytes long and begins in the fifth\nN   byte (byte 4) of each data record.\nN\nN-> RECORDS: specifies that an amount of tracks equal to at least\nN   500 records is to be allocated for the data component's space. When\nN   the data component is extended, it is to be extended in increments\nN   of tracks equal to 100 records.\nN\nN-> RECORDSIZE: specifies that the cluster's records are variable\nN   length, with an average size of 80 bytes and a maximum size of\nN   100 bytes.\nN\nN-> VOLUMES: specifies that the cluster is to reside on volume VSER01.\nN\nNThe INDEX componENT parameters are:\nN-----------------------------------\nN-> RECORDS: specifies that an amount of tracks equal to at least\nN   300 records is to be allocated for the index component's space.\nN   When the index component is extended, it is to be extended in\nN   increments of tracks equal to 300 records.\nN\nN-> VOLUMES: specifies that the cluster is to reside on volume VSER01.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1418": {"ttr": 8455, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1418\nTDFSMS AMS\nT-Chapter 14.\nT-Example 8: Define an Entry-Sequenced Cluster Using a Model\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095135\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 14. DEFINE CLUSTER\nN--------------------------\nNExample 8: Define an Entry-Sequenced Cluster Using a Model\nN----------------------------------------------------------\nMIn a production environment it is better to specify the attributes.\nN\nD//DEFCLS8  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    CLUSTER( -\nD      NAME(GENERIC.B.BAKER) -\nD      MODEL(GENERIC.A.BAKER USERCAT4) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE CLUSTER parameters are:\nN----------------------------------\nN-> NAME: indicates that the cluster's name is GENERIC.B.BAKER.\nN\nN-> MODEL: identifies GENERIC.A.BAKER, cataloged in user catalog\nN   USERCAT4, as the cluster to use as a model for GENERIC.B.BAKER. The\nN   attributes and specifications of GENERIC.A.BAKER that are not\nN   otherwise specified with the DEFINE command's parameters are used\nN   to define the attributes and specifications of GENERIC.B.BAKER.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1419": {"ttr": 8457, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1419\nTDFSMS AMS\nT-Chapter 14.\nT-Example 9: Define a VSAM Volume Data Set\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095146\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 14. DEFINE CLUSTER\nN--------------------------\nNExample 9: Define a VSAM Volume Data Set\nN----------------------------------------\nMOnly a Storage Administrator or System Programmer should be\nMpre-defining a VSAM Volume Data Set and then have taken into\nMconsideration the number of entries it needs to hold.\nM\nMFor that reason, the poorly shown IBM example is not being\nMprovided here.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1420": {"ttr": 8459, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1420\nTDFSMS AMS\nT-Chapter 14.\nT-Example 10: Define a Relative Record Data Set with Expiration Date\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095157\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 14. DEFINE CLUSTER\nN--------------------------\nNExample 10: Define a Relative Record Data Set with Expiration Date\nN------------------------------------------------------------------\nMShould you be defining data sets with expiration dates? If so, then\nMit should not be all that difficult to add the TO() parameter to\nMyour DEFINE CLUSTER statements.\nN\nMThe IBM example fails to describe the TO() parameter as they should\nMhave.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1421": {"ttr": 8461, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1421\nTDFSMS AMS\nT-Chapter 14.\nT-Example 11: Define a Linear Data Set Cluster in a Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095208\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 14. DEFINE CLUSTER\nN--------------------------\nNExample 11: Define a Linear Data Set Cluster in a Catalog\nN---------------------------------------------------------\nMDB2 uses Linear Data Set Clusters.\nN\nD//DEFCLS11 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    CLUSTER( -\nD      NAME(EXAMPLE.LDS01) -\nD      LINEAR -\nD      TRACKS(20 10) -\nD      VOLUMES(VSER03) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE CLUSTER parameters are:\nN----------------------------------\nN-> NAME: indicates that the cluster's name is EXAMPLE.LDS01.\nN\nN-> LINEAR: specifies that the cluster's data organization is to\nN   be linear.\nN\nN-> TRACKS: specifies that 20 tracks are allocated for the cluster's\nN   space. When the cluster is extended, it is to be extended in\nN   increments of 10 tracks.\nN\nN-> VOLUMES: specifies that the cluster is to reside on volume VSER03.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC15": {"ttr": 8463, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC15\nKGDG\nTDFSMS AMS\nT-Chapter 15. DEFINE GENERATIONDATAGROUP\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-189953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 15. DEFINE GENERATIONDATAGROUP\nN--------------------------------------\nNThe DEFINE GENERATIONDATAGROUP command creates a catalog entry for a\nNgeneration data group (GDG). For information on generation data group\nNwrapping rules, see z/OS MVS JCL User's Guide.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1501": {"ttr": 8465, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1501\nTDFSMS AMS\nT-Chapter 15.\nT-Syntax for DEFINE GENERATIONDATAGROUP Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-189953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 15. DEFINE GENERATIONDATAGROUP\nN--------------------------------------\nNSyntax for DEFINE GENERATIONDATAGROUP Parameters\nN------------------------------------------------\nD  DEFINE /* Abbreviation: DEF */ -\nN\nNRequired Parameters\nN-------------------\nD    GENERATIONDATAGROUP( /* Abbreviation: GDG */ -\nI      Specifies that a generation data group (GDG) entry is to be\nI      defined. A GDG can contain both SMS- and non-SMS-managed\nI      generation data sets. A generation data set (GDS) cannot be a\nI      VSAM data set. If you create a GDG and its catalog is on an\nI      SMS-managed volume, you should remove any dependencies on pattern\nI      DSCBs. See z/OS DFSMS Using Data Sets for information about GDGs\nI      and GDSs.\nN\nD      NAME(entryname) -\nI        Specifies the name of the GDG being defined.\nN\nD      LIMIT(limit) /* Abbreviation: LIM */ -\nI        Specifies the maximum number, from 1 to 255, of GDSs that can\nI        be associated with the GDG being defined.\nN\nNOptional Parameters\nN-------------------\nD      EMPTY | NOEMPTY /* Abbreviations: EMP and NEMP */ -\nI        Specifies what action is to be taken for the catalog entries\nI        for the GDG base when the number of generation data sets in the\nI        GDG base is equal to the LIMIT value and another GDS is to be\nI        cataloged. The disposition of the actual data sets uncatalogued\nI        from the GDG base is determined by the setting of the\nI        SCRATCH/NOSCRATCH parameter for the GDG base.\nN\nI        EMPTY /* Abbreviation: EMP */: remove all GDS entries from GDG\nI          base when a new GDS is created that causes the GDG LIMIT to\nI          be exceeded.\nN\nI        NOEMPTY /* Abbreviation: NEMP */: remove only the oldest GDS\nI          entry when a new GDS is created that causes GDG LIMIT to be\nI          exceeded.\nN\nD      OWNER(ownerid) -\nI        Identifies the generation data set's owner.\nN\nI        For TSO users, if the owner is not identified with the OWNER\nI        parameter, the TSO userid is the default ownerid.\nN\nD      SCRATCH | NOSCRATCH /* Abbreviations: SCR and NSCR */ -\nI        Specifies what action is to be taken for a generation data set\nI        located on disk volumes when the data set is uncataloged from\nI        the GDG base as a result of EMPTY/NOEMPTY processing. For\nI        generation data sets located on tape, this parameter has no\nI        effect.\nN\nI        You can override the SCRATCH|NOSCRATCH attribute when issuing\nI        the DELETE command.\nN\nI        SCRATCH /* Abbreviation: SCR */: The GDS is deleted from all\nI          disks it occupies when uncatalogued from the GDG base,\nI          regardless of whether it is SMS-managed or not.\nN\nI        NOSCRATCH /* Abbreviation: NSCR */: If the data set is a\nI          non-SMS managed data set it is not removed from any of the\nI          volumes it occupies. If the data set is an SMS-managed data\nI          set it is recataloged as a non-VSAM data set in rolled-off\nI          status, and is no longer associated with the GDG base. It is\nI          not deleted from any of the SMS-managed volumes it occupies.\nN\nD    ) /* - */\nM    CATALOG(catname) /* Abbreviation: CAT */\nI      Identifies the catalog in which the generation data group is to\nI      be defined. If the catalog's volume is physically mounted, it is\nI      dynamically allocated. The volume must be mounted as permanently\nI      resident or reserved. Search \"Catalog Selection Order for DEFINE\"\nI      for the order in which a catalog is selected when the catalog's\nI      name is not specified.\nN\nI      catname/alias: Names the catalog or an alias that can be resolved\nI        to a catalog. For example, if alias ABCD relates to catalog\nI         SYS1.USERCAT, then specifying either ABCD or SYS1.USERCAT will\nI         cause the cluster to be defined in SYS1.USERCAT.\nN\nI        If the catalog's volume is physically mounted, it is\nI        dynamically allocated. Mount the volume as permanently\nI        resident or reserved.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC1511": {"ttr": 8467, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1511\nKMODELDSCB GDG\nTDFSMS AMS\nT-Chapter 15.\nT-Example 1: Define a Generation Data Group\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095241\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 15. DEFINE GENERATIONDATAGROUP\nN--------------------------------------\nNExample 1: Define a Generation Data Group\nN-----------------------------------------\nMKenneth Tomiak modified this example for the real world.\nN\nD//DEFGDG1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    GENERATIONDATAGROUP( -\nD      NAME(GDG01) -\nD      NOEMPTY -\nD      LIMIT(255) -\nD      SCRATCH -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//GDGMODEL  DD DISP=(NEW,CATLG),DSNAME=GDG01.MODEL.DSCB,\nD//             UNIT=DISK,VOL=SER=VSER03,\nD//             SPACE=(TRK,(0)),\nD//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=100)\nD//*\nD//STEP2   EXEC PGM=IEBGENER\nD//SYSIN     DD DUMMY\nD//SYSPRINT  DD SYSOUT=*\nD//SYSUT1    DD DISP=OLD,DSNAME=AN.EXISTING.DATA.SET\nD//SYSUT2    DD DISP=(NEW,CATLG),DSNAME=GDG01(+1),\nD//             UNIT=DISK,VOL=SER=VSER03,\nD//             SPACE=(TRK,(10,5)),\nD//             DCB=(GDG01.MODEL.DSCB)\nN\nNThe JCL statements for STEP1:\nN-----------------------------\nN-> GDGMODEL: Allocates a data set with the DCB parameters to be\nN   assigned to generation data sets.\nN\nNThe DEFINE GENERATIONDATAGROUP parameters are:\nN----------------------------------------------\nN-> NAME: indicates that the GENERATIONDATAGROUP's name is GDG01.\nN\nN-> NOEMPTY: remove only the oldest GDS entry when a new GDS is created\nN   that causes GDG LIMIT to be exceeded.\nN\nN-> LIMIT: specifies that the maximum number of GDGs in the group\nN   is 255. The LIMIT parameter is required.\nN\nN-> SCRATCH: The GDS is deleted from all disks it occupies when\nN   uncatalogued from the GDG base, regardless of whether it is\nN   SMS-managed or not.\nN\nNThe JCL statements for STEP2:\nN-----------------------------\nN-> SYSUT1: points to an existing data set.\nN\nN-> SYSUT2: becomes a generation data set using the model dscb created\nN   when the GDG was defined.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1512": {"ttr": 8705, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1512\nKMODELDSCB GDG\nTDFSMS AMS\nT-Chapter 15.\nT-Example 2: Define a Generation Data Set Using SMS\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095251\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 15. DEFINE GENERATIONDATAGROUP\nN--------------------------------------\nNExample 2: Define a Generation Data Set Using SMS\nN-------------------------------------------------\nMKenneth Tomiak believes your installation's ACS routines should be what\nMassigns SMS classes.\nN\nD//DEFGDS2  JOB ...\nD//STEP1   EXEC PGM=IEBGENER\nD//SYSIN     DD DUMMY\nD//SYSPRINT  DD SYSOUT=*\nD//SYSUT1    DD DISP=OLD,DSNAME=AN.EXISTING.DATA.SET\nD//SYSUT2    DD DISP=(NEW,CATLG),DSNAME=GDG01(+1),\nD//             SPACE=(TRK,(10,5)),\nD//             STORCLAS=GRPVOL1,DATACLAS=ALLOC01\nN\nNThe JCL statements:\nN-------------------\nN-> SYSUT1: points to an existing data set.\nN\nN-> SYSUT2: becomes a generation data set using the dscb attributes\nN   as assigned by installation SMS data class ALLOC01 on the unit\nN   assigned by installation SMS storage class GRPVOL1.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC16": {"ttr": 8707, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC16\nTDFSMS AMS\nT-Chapter 16. DEFINE NONVSAM\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 16. DEFINE NONVSAM\nN--------------------------\nNThe DEFINE NONVSAM command defines a catalog entry for non-VSAM data\nNsets or a collection of objects.\nN\nNDEFINE NONVSAM does not allocate space on the volume. To allocate the\nNprimary space on a volume for a new NONVSAM data set, create the data\nNset.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1601": {"ttr": 8709, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1601\nTDFSMS AMS\nT-Chapter 16.\nT-Syntax for DEFINE NONVSAM Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 16. DEFINE NONVSAM\nN--------------------------\nNSyntax for DEFINE NONVSAM Parameters\nN------------------------------------\nD  DEFINE /* Abbreviation: DEF */ -\nN\nNRequired Parameters\nN-------------------\nD    NONVSAM( /* Abbreviation: NVSAM */ -\nI      specifies that a non-VSAM non-SMS-managed data set is to be\nI      defined or that a collection of objects is to be defined. The\nI      collection of objects you define are SMS-managed. To define a\nI      non-VSAM SMS-managed data set that is not a collection of\nI      objects, use either the ALLOCATE command or JCL.\nN\nD      NAME(entryname) -\nI        specifies the name of the non-VSAM data set or collection of\nI        objects being defined. The entryname is the name that appears\nI        in the catalog; it is the name used in all future references to\nI        the data set. The entryname must be unique within the catalog\nI        in which it is defined.\nN\nI        You identify a GDS with its GDG name followed by the data set's\nI        generation and version numbers (GDGname.GxxxxVyy). The update\nI        or higher RACF authority to the GDG is required. The GDG must\nI        exist before the GDS is defined.\nN\nI        Exception: For OAM, the entryname is the name of the OAM\nI        collection. To define an OAM collection, you must specify both\nI        the COLLECTION and RECATALOG parameters.\nN\nD      DEVICETYPES(devtype devtype...) /* Abbreviation: DEVT */ -\nI        specifies the device types of the volumes containing the\nI        non-VSAM data set being defined. If the non-VSAM data set\nI        resides on different device types, the device types must be\nI        specified in the same order as the volume serial numbers listed\nI        in the VOLUMES parameter.\nN\nI        You can specify a generic device name that is supported by your\nI        system, for example, 3390. Search \"Device Type Translate Table\"\nI        for a list of generic device types.\nN\nI        Restriction: Do not specify an esoteric device group such as\nI        SYSDA, because allocation can be unsuccessful if:\nN\nI        -> Input/output configuration is changed by adding or deleting\nI           one or more esoteric device groups.\nN\nI        -> The esoteric definitions on the creating and using systems\nI           do not match when the catalog is shared between the two\nI           systems.\nN\nI        -> The data set was cataloged on a system not defined with the\nI           Hardware Configuration Definition (HCD), but used on a\nI           system that is defined with HCD.\nN\nI        If you expect to change the device type of the system residence\nI        volume, you can code DEVICETYPES(0000) and this field is\nI        resolved at LOCATE, and DELETE time to the device type. This\nI        will allow you to use the non-VSAM data sets without having to\nI        recatalog them to point to the new volume. When you code\nI        DEVICETYPES(0000) you must also code VOLUMES(******), or an\nI        error will result.\nN\nI        You can code DEVICETYPES(0000) if the VOLUMES parameter\nI        specifies an indirect volume serial ('******'), or an extended\nI        indirect volume serial (a system symbol). A value of\nI        DEVICETYPES(0000) will cause the actual device type to be\nI        determined from the current system residence volume (or its\nI        logical extension) at the time the catalog entry is retrieved.\nI        DEVICETYPES(0000) is only valid with an indirect volume serial\nI        specification in the VOLUMES parameter.\nN\nI        In addition to the above, if you are using the symbolic form\nI        of volume serials, the volume must be mounted and online at\nI        the time the catalog entry is retrieved from the catalog. If\nI        it is not, the catalog request will be terminated with a return\nI        and reason code.\nN\nI        Exception: DEVICETYPES is not applicable for an OAM non-VSAM\nI        entry and is ignored if specified.\nN\nD      VOLUMES(volser volser...) /* Abbreviation: VOL */ -\nI        specifies the volumes to contain the non-VSAM data set. VOLUMES\nI        is required when you define a non-OAM non-VSAM data set.\nN\nI        There are two special forms of the VOLUMES parameter that can\nI        be provided, and they are referred to as the indirect volume\nI        serial forms. They result in the system dynamically resolving\nI        the volume serial to the system residence (or its logical\nI        extension) serial number when the catalog entry is retrieved.\nI        It is not resolved when the DEFINE NONVSAM is processed. This\nI        allows you to later change the volume serial number(s) of the\nI        system residence volume (or its logical extensions) without\nI        having to recatalog the non-VSAM data sets on those volumes.\nN\nI        The two special forms are:\nN\nI        1. VOLUMES(******)\nN\nI        2. VOLUMES(&xxxxx), where &xxxxx is a symbol contained in the\nI           SYS1.PARMLIB IEASYMXX member that was specified at IPL time.\nI           The symbol name is intended to represent the volume that is\nI           a logical extension of the system residence volume. The\nI           symbol name must be specified as a single, simple (not\nI           substringed) symbol of no more than six characters including\nI           the leading ampersand. If a symbol is intended to represent\nI           a six-character volume serial number, the symbol must be\nI           six characters long and the ending period must be omitted.\nI           As an example:\nN\nI           VOLUMES(&SYSR2)\nN\nI           If &SYSR2 has been defined at IPL by an entry in the\nI           IEASYMxx member, the value of that symbol will be used when\nI           this catalog entry is retrieved from the catalog. If the\nI           symbol is not defined, the value returned for the volume\nI           serial will be &SYSR2.\nN\nI           IBM recommends the use of the symbol &SYSR2 for the first\nI           logical extension to the system reference volume, &SYSR3 for\nI           the second, and so on.\nN\nI        Exception: VOLUMES is not applicable for an OAM non-VSAM entry\nI        and is ignored if specified.\nN\nI        If you code VOLUMES(******), then the system dynamically\nI        resolves this to the system residence volume serial number\nI        whenever the catalog entry is used. It is not resolved when\nI        the DEFINE NONVSAM is processed. This allows you to later\nI        change the volume serial number of system residence volume\nI        without also having to recatalog the non-VSAM data sets on\nI        that volume.\nN\nI        Use RACF commands to specify an ERASE attribute in a generic\nI        or discrete profile for a non-VSAM data set. Use of this\nI        attribute renders all allocated DASD tracks unreadable before\nI        space on the volume is made available for reallocation. Refer\nI        to the appropriate RACF publications for information about how\nI        to specify and use this facility.\nN\nNOptional Parameters\nN-------------------\nD      COLLECTION /* Abbreviation: COLLN */ -\nI        specifies that the entry being defined is an Object Access\nI        Method (OAM) entry. This parameter is required when you define\nI        an OAM entry. If you use COLLECTION, you must also specify the\nI        RECATALOG parameter.\nN\nD      FILESEQUENCENUMBERS(number ...) /* Abbreviation: FSEQN */ -\nI        specifies the file sequence number of the non-VSAM data set\nI        being defined. FILESEQUENCENUMBERS is not applicable for an\nI        OAM non-VSAM entry and is ignored if specified.\nN\nI        This number indicates the position of the file being defined\nI        with respect to other files on the tape. If the data set spans\nI        volumes or if more than one volume is specified, you must\nI        specify a file sequence number for each volume. Either 0 or 1\nI        indicates the first data set on the tape volume. The default\nI        is 0.\nN\nD      OWNER(ownerid) -\nI        Identifies the generation data set's owner.\nN\nI        For TSO users, if the owner is not identified with the OWNER\nI        parameter, the TSO userid is the default ownerid.\nN\nI        Exception: If OWNER is not specified, the TSO userid is the\nI        default ownerid.\nN\nD      RECATALOG|NORECATALOG /* Abbreviations: RCTLG and NRCTLG */ -\nI        specifies whether the catalog entries for the non-VSAM data\nI        set are to be re-created or are to be created for the first\nI        time. If RACF is installed, RACF access authority, defined\nI        under SMS, is required.\nN\nI        RECATALOG /* Abbreviation: RCTLG */: specifies that the catalog\nI          entries are re-created if valid VVDS entries are found on the\nI          primary VVDS volume. If valid VVDS entries are not found on\nI          the primary VVDS volume, the command ends. RECATALOG can be\nI          specified only for an SMS-managed data set.\nN\nI          Catalog entries can be re-created only in the catalog\nI          specified in the NVR except for entries that are swap space,\nI          page space, or SYS1 data sets. In a multihost environment,\nI          non-SYS1 IPL data sets that are SMS-managed cannot be\nI          recataloged to a different catalog from the one specified in\nI          the NVR. SMS-managed IPL data sets must be SYS1 data sets to\nI          be shared in a multihost environment.\nN\nI          The VOLUMES and DEVICETYPES parameters are required,\nI          specified as they were when the data set was originally\nI          defined. If the CATALOG, OWNER, or FILESEQUENCENUMBERS\nI          parameters were specified for the original define, they\nI          should be respecified with RECATALOG.\nN\nI          Exception: RECATALOG must be specified when you use the\nI          COLLECTION parameter. DEFINE RECATALOG COLLECTION is intended\nI          to be used to rebuild catalog entries.\nN\nI        NORECATALOG /* Abbreviation: NRCTLG */: creates the catalog\nI          entries for the first time.\nN\nD      TO(date) | FOR(days) -\nI        specifies the retention period for the non-VSAM data set being\nI        defined. If neither a TO nor FOR is specified, the non-VSAM\nI        data set can be deleted at any time.\nN\nI        For non-SMS-managed non-VSAM data sets, the correct retention\nI        period is selected in the catalog entry. The VTOC entry might\nI        not contain the correct retention period. Issue a LISTCAT\nI        command to see the correct expiration date.\nN\nI        For SMS-managed data sets, the expiration date in the catalog\nI        is updated and the expiration date in the format-1 DSCB is\nI        changed. Should the expiration date in the catalog not agree\nI        with the expiration date in the VTOC, the VTOC entry overrides\nI        the catalog entry. In this case, issue a LISTVTOC to see the\nI        correct expiration date.\nN\nI        Exception: TO|FOR is not applicable for an OAM non-VSAM entry\nI        and is ignored if specified. With OAM, a never-expire retention\nI        is assigned to the entry which then requires you to specify\nI        the PURGE parameter of the DELETE command to delete the OAM\nI        non-VSAM entry.\nN\nI        TO(date): Specifies the earliest date that a command without\nI          the PURGE parameter can delete the non-VSAM data set. Specify\nI          the expiration date in the form yyyyddd, where yyyy is a\nI          four-digit year (to a maximum of 2155) and ddd is the\nI          three-digit day of the year from 001 through 365 (for\nI          non-leap years) or 366 (for leap years).\nN\nI          The following four values are \"never-expire\" dates:\nI          99365, 99366, 1999365, and 1999366. Specifying a\nI          \"never-expire\" date means that the PURGE parameter will\nI          always be required to delete the non-VSAM data set. For\nI          related information, see the \"EXPDT Parameter\" section of\nI          z/OS MVS JCL Reference, SA22-7597.\nN\nI          Notes:\nN\nI          1. Any dates with two-digit years (other than 99365 or 99366)\nI             will be treated as pre-2000 dates. (See note 2.)\nN\nI          2. Specifying the current date or a prior date as the\nI             expiration date will make the non-VSAM data set\nI             immediately eligible for deletion.\nN\nD        FOR(days): specifies the number of days to keep the non-VSAM\nI          data set being defined. The maximum number is 93000. If the\nI          number is 0 through 92999 (except for 9999), the entry is\nI          retained for the number of days indicated. If the number is\nI          either 9999 or 93000, the entry is retained indefinitely.\nI          There is a hardware imposed expiration date of 2155.\nN\nD    ) /* - */\nN\nM    CATALOG(catname) /* Abbreviation: CAT */\nI      identifies the catalog in which the non-VSAM data set, or OAM\nI      object is to be defined. Search \"Catalog Selection Order for\nI      DEFINE\" for the order in which a catalog is selected when the\nI      catalog's name is not specified.\nN\nI      catname/alias: Names the catalog or an alias that can be resolved\nI        to a catalog. For example, if alias ABCD relates to catalog\nI         SYS1.USERCAT, then specifying either ABCD or SYS1.USERCAT will\nI         cause the cluster to be defined in SYS1.USERCAT.\nN\nI        If the catalog's volume is physically mounted, it is\nI        dynamically allocated. Mount the volume as permanently\nI        resident or reserved.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC1611": {"ttr": 8711, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1611\nTDFSMS AMS\nT-Chapter 16.\nT-Example 1: Define a Non-VSAM Data Set with the RECATALOG Parameter\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095316\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 16. DEFINE NONVSAM\nN--------------------------\nNExample 1: Define a Non-VSAM Data Set with the RECATALOG Parameter\nN------------------------------------------------------------------\nNIt is assumed that CATALOG, FILESEQUENCENUMBER and OWNER were not\nNspecified for the original define. If any of these parameters were\nNspecified for the original define, they should be respecified in this\nNexample containing RECATALOG.\nN\nD//DEFNVSM1 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    NONVSAM( -\nD      NAME(EXAMPLE.NONVSAM3) -\nD      DEVICETYPE(3390) -\nD      RECATALOG -\nD      VOLUMES(VSER01) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE NONVSAM parameters are:\nN----------------------------------\nN-> NAME: specifies the name of the non-VSAM data set, EXAMPLE.NONVSAM3.\nN\nN-> DEVICETYPE: specifies the type of device that contains the non-VSAM\nN   data sets, an IBM 3390 Direct Access Storage. This parameter is\nN   required because RECATALOG is specified.\nN\nN-> RECATALOG: specifies that the catalog entries are to be re-created.\nN   This assumes that valid VVDS entries are found on the primary VVDS\nN   volume, and the data set is SMS-managed. If either of these\nN   assumptions is not true, the command will be unsuccessful.\nN\nN-> VOLUMES: specifies the volume, VSER01, that contains the\nN   SMS-managed non-VSAM data sets. This parameter is also required\nN   because RECATALOG is specified.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1612": {"ttr": 8713, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1612\nTDFSMS AMS\nT-Chapter 16.\nT-Example 2: Define a Non-VSAM Data Set\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095328\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 16. DEFINE NONVSAM\nN--------------------------\nNExample 2: Define a Non-VSAM Data Set\nN-------------------------------------\nD//DEFNVSM2 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    NONVSAM( -\nD      NAME(EXAMPLE.NONVSAM) -\nD      DEVICETYPE(3390) -\nD      VOLUMES(VSER01) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE NONVSAM parameters are:\nN----------------------------------\nN-> NAME: specifies the name of the non-VSAM data set, EXAMPLE.NONVSAM.\nN\nN-> DEVICETYPE: specifies the type of device that contains the non-VSAM\nN   data sets, an IBM 3390 Direct Access Storage. This parameter is\nN   required because RECATALOG is specified.\nN\nN-> VOLUMES: specifies the volume, VSER01, that contains the\nN   SMS-managed non-VSAM data sets. This parameter is also required\nN   because RECATALOG is specified.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC17": {"ttr": 8715, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC17\nTDFSMS AMS\nT-Chapter 17. DEFINE PAGESPACE\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 17. DEFINE PAGESPACE\nN----------------------------\nNThe DEFINE PAGESPACE command defines an entry for a page space\nNdata set.\nN\nMThis is a system data set.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1701": {"ttr": 8961, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1701\nTDFSMS AMS\nT-Chapter 17.\nT-Syntax for DEFINE PAGESPACE Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 17. DEFINE PAGESPACE\nN----------------------------\nNSyntax for DEFINE PAGESPACE Parameters\nN--------------------------------------\nD  DEFINE /* Abbreviation: DEF */ -\nN\nNRequired Parameters\nN-------------------\nD    PAGESPACE( /* Abbreviation: PGSPC */ -\nI      specifies that a page space is to be defined.\nN\nI      Recommendation: Use the KILOBYTES or MEGABYTES option to specify\nI      the amount of space for the DEFINE PAGESPACE command.\nN\nD      NAME(entryname) -\nI        specifies the name of the page space being defined.\nN\nI      CYLINDERS(primary) | /* Abbreviation: CYL */ -\nI      KILOBYTES(primary) | /* Abbreviation: KB */ -\nI      MEGABYTES(primary) | /* Abbreviation: MB */ -\nI      RECORDS(primary) | /* Abbreviation: REC */ -\nI      TRACKS(primary) /* Abbreviation: TRK */ -\nI        specifies the amount of space that is to be allocated. This\nI        parameter is optional if the volume is managed by SMS. If it\nI        is specified, it overrides the DATACLASS space specification.\nI        If it is not specified, it must be modeled or defaulted by SMS.\nI        If it cannot be determined, the DEFINE is unsuccessful.\nN\nI        If you specify KILOBYTES or MEGABYTES the amount of space\nI        allocated is the minimum number of tracks or cylinders required\nI        to contain the specified number of kilobytes or megabytes. The\nI        maximum space can be specified with unit of KILOBYTES or\nI        MEGABYTES is 16,777,215. If the amount requested exceeds this\nI        value, you should specify a larger allocation unit.\nN\nI        If RECORDS or TRACKS is specified, the quantity specified is\nI        rounded up to the nearest cylinder and the space is allocated\nI        in cylinders.\nN\nI        To maintain device independence, do not specify the TRACKS or\nI        CYLINDERS parameters. If TRACKS or CYLINDERS is specified for\nI        an SMS-managed pagespace, space is allocated on the volume\nI        selected by SMS in units equivalent to the device default\nI        geometry.\nN\nM          These days the only mainframe DASD devices in use are\nM          likely to be 3390 and thus the caution about device\nM          independence is no longer applicable. If you have something\nM          else it is way past time to migrate to the current geometry.\nN\nI        The amount of space need not be specified if the RECATALOG\nI        parameter is specified.\nN\nI        To determine the exact amount of space allocated, list the\nI        page space's catalog entry, using the LISTCAT command.\nN\nI        If you do not specify the MODEL parameter, you must specify\nI        one, and only one, of the following parameters: CYLINDERS,\nI        KILOBYTES, MEGABYTES, RECORDS, or TRACKS.\nN\nI        Note: Page data sets cannot be defined in cylinder-managed\nI        space.\nN\nI        primary: Specifies the amount of space that is to be allocated\nI          to the page space. After the primary extent is full, the\nI          page space is full. The page space cannot extend onto\nI          secondary extents. The maximum number of paging slots for\nI          each page space is 16M. Page spaces regardless of their size\nI          have the extended format and extended addressable attributes\nI          assigned to them whether they are on an SMS managed volume\nI          or a non-SMS managed volume.\nN\nD      VOLUME(volser) /* Abbreviation: VOL */ -\nI        specifies the volume that contains the page space. If you do\nI        not specify the MODEL parameter, or if the page space is not\nI        SMS-managed, VOLUME must be specified as a parameter of\nI        PAGESPACE.\nN\nI        VOLUME can be specified or modeled for a data set that is to\nI        be SMS-managed, but be aware that the volume specified might\nI        not be used and, in some cases, can result in an error. If\nI        VOLUME is not specified for an SMS-managed data set, SMS\nI        selects the volume. See z/OS DFSMSdfp Storage Administration\nI        for information about SMS volume selection.\nN\nI        Nonspecific volumes are indicated for an SMS-managed data set\nI        by coding an * for each volume serial. SMS then determines the\nI        volume serial.\nN\nI        The VOLUME parameter interacts with other DEFINE PAGESPACE\nI        parameters. Ensure that the volumes you specify for the page\nI        space are consistent with the page space's other attributes:\nN\nI        -> The volume must contain enough unallocated space to satisfy\nI           the page space's space requirement.\nN\nI        -> The volume information supplied with the DD statement\nI           pointed to by FILE must be consistent with the information\nI           specified for the page space.\nN\nNOptional Parameters\nN-------------------\nD      DATACLASS(class) /* Abbreviation: DATACLAS */ -\nI        specifies the name, 1-to-8 characters, of the data class for\nI        the data set. It provides the allocation attributes for new\nI        data sets.\nN\nI        Your storage administrator defines the data class. However,\nI        you can override the parameters defined for DATACLASS by\nI        explicitly specifying other attributes. Search \"Understanding\nI        the Order of Assigned Data Set Attributes\" for the order of\nI        precedence (filtering) the system uses to select which\nI        attribute to assign.\nN\nI        DATACLASS parameters apply to both SMS-managed and\nI        non-SMS-managed data sets. If DATACLASS is specified and SMS\nI        is inactive, DEFINE is unsuccessful.\nN\nD      FILE(ddname)\nI        specifies the name of the DD statement that identifies the\nI        device and volume to be allocated to the page space. If the\nI        FILE parameter is not specified and the volume is physically\nI        mounted, the volume identified with the VOLUME parameter is\nI        dynamically allocated. The volume must be mounted as\nI        permanently resident or reserved.\nN\nD      MANAGEMENTCLASS(class) /* Abbreviation: MGMTCLAS */ -\nI        specifies, for SMS-managed data sets only, the 1-to-8\nI        character name of the management class for a new data set.\nI        Your storage administrator defines the names of the management\nI        classes you can specify. If MANAGEMENTCLASS is not specified,\nI        but STORAGECLASS is specified or defaulted, MANAGEMENTCLASS is\nI        derived from automatic class selection (ACS). If\nI        MANAGEMENTCLASS is specified and STORAGECLASS is not specified\nI        or derived, the DEFINE is unsuccessful. If SMS is inactive and\nI        MANAGEMENTCLASS is specified, the DEFINE is unsuccessful.\nN\nD      MODEL(entryname catname) -\nI        Specifies that an existing page space entry is to be used as\nI        a model for the entry being defined. It is possible to use an\nI        already defined page space as a model for another page space.\nI        When one entry is used as a model for another, its attributes\nI        are copied as the new entry is defined.\nN\nI        You can use some attributes of the model and override others\nI        by explicitly specifying them in the definition of the page\nI        space. If you do not want to add or change any attributes, you\nI        need specify only the entry type (page space) of the model to\nI        be used and the name of the entry to be defined. Search\nI        \"Understanding the Order of Assigned Data Set Attributes\" for\nI        more information about the order in which the system selects\nI        an attribute.\nN\nI        entryname: Specifies the name of the page space entry to be\nI          used as a model.\nN\nI        catname:  Specifies the name of the catalog in which the entry\nI          to be used as a model is defined.\nN\nD      OWNER(ownerid) -\nI        specifies the identification of the owner of the page space.\nN\nD      RECATALOG | NORECATALOG /* Abbreviations: RCTLG and NRCTLG */ -\nI        Specifies whether the catalog entries for the cluster\nI        components are to be re-created or are to be created for the\nI        first time.\nN\nI        RECATALOG /* Abbreviation: RCTLG */: If RECATALOG is specified,\nI          the catalog entries are re-created if valid VVDS entries are\nI          found on the primary VVDS volume. If valid VVDS entries are\nI          not found on the primary VVDS volume, the command ends. For\nI          information on resolving VVDS problems, see the text on\nI          deleting VVDS records in z/OS DFSMS Managing Catalogs .\nN\nI          Specification of RECATALOG requires that the NAME and VOLUMES\nI          parameters be specified as they were when the cluster was\nI          originally defined.\nN\nI          The CYLINDERS|RECORDS|TRACKS parameter is not required if\nI          RECATALOG is specified.\nN\nI          If the ATTEMPTS, AUTHORIZATION, CATALOG, MODEL or OWNER\nI          parameters were specified during the original define, they\nI          must be respecified with RECATALOG to restore their original\nI          values; otherwise, their default values are used.\nN\nM            ATTEMPTS and AUTHORIZATION no longer appear as valid\nM            parameters.\nN\nI        NORECATALOG /* Abbreviation: NRCTLG */: creates the catalog\nI          entries for the first time.\nN\nD      STORAGECLASS(class) /* Abbreviation: STORCLAS */ -\nI        For SMS-managed data sets: Specifies the name, 1-to-8\nI        characters, of the storage class.\nN\nI        Your storage administrator defines the names of the storage\nI        classes you can specify. A storage class is assigned if you\nI        use STORAGECLASS or an ACS routine selects a storage class for\nI        the new data set.\nN\nI        The storage class provides the storage attributes that are\nI        specified on the UNIT and VOLUME operand for non-SMS-managed\nI        data sets. Use the storage class to specify the storage\nI        service level to be used by SMS for storage of the data set.\nI        If SMS is inactive and STORAGECLASS is specified, the DEFINE\nI        is unsuccessful.\nN\nD      TO(date) | FOR(days) -\nI        specifies the retention period for the page space. If neither\nI        TO nor FOR is specified, the page space can be deleted at any\nI        time.\nN\nI        The expiration date in the catalog is updated and the\nI        expiration date in the format-1 DSCB is changed. Should the\nI        expiration date in the catalog not agree with the expiration\nI        date in the VTOC, the VTOC entry overrides the catalog entry.\nN\nI        The MANAGEMENTCLASS maximum retention period, if specified,\nI        limits the retention period specified by this parameter.\nN\nI        TO(date): Specifies the earliest date that a command without\nI          the PURGE parameter can delete the page space data set.\nI          Specify the expiration date in the form yyyyddd, where yyyy\nI          is a four-digit year (to a maximum of 2155) and ddd is the\nI          three-digit day of the year from 001 through 365 (for\nI          non-leap years) or 366 (for leap years).\nN\nI          The following four values are \"never-expire\" dates:\nI          99365, 99366, 1999365, and 1999366. Specifying a\nI          \"never-expire\" date means that the PURGE parameter will\nI          always be required to delete the page space data set. For\nI          related information, see the \"EXPDT Parameter\" section of\nI          z/OS MVS JCL Reference, SA22-7597.\nN\nI          Notes:\nN\nI          1. Any dates with two-digit years (other than 99365 or 99366)\nI             will be treated as pre-2000 dates. (See note 2.)\nN\nI          2. Specifying the current date or a prior date as the\nI             expiration date will make the page space data set\nI             immediately eligible for deletion.\nN\nD        FOR(days): specifies the number of days to keep the page space.\nI          The maximum number is 93000. If the number is 0 through 92999\nI          (except for 9999), the entry is retained for the number of\nI          days indicated. If the number is either 9999 or 93000, the\nI          entry is retained indefinitely.\nI          There is a hardware imposed expiration date of 2155.\nN\nD    ) /* - */\nM    CATALOG(catname) /* Abbreviation: CAT */\nI      The CATALOG parameter is allowed on the DEFINE PAGESPACE command\nI      only when the RECATALOG keyword is also coded. To define a new\nI      pagespace that is located in another master catalog (for example,\nI      a target system master catalog), create an alias in the current\nI      master catalog related to the target master catalog. Define the\nI      pagespace using a data set name starting with the alias that was\nI      created. Then rename the pagespace with the ALTER command,\nI      specifying the CATALOG parameter on the ALTER command.\nN\nI      To specify catalog names for SMS-managed data sets, you must have\nI      authority from the RACF STGADMIN.IGG.DIRCAT facility class.\nI      Search \"Storage Management Subsystem (SMS) Considerations\" for\nI      more information.\nN\nI      catname: Names the catalog or an alias that can be resolved\nI        to a catalog. For example, if alias ABCD relates to catalog\nI         SYS1.USERCAT, then specifying either ABCD or SYS1.USERCAT will\nI         cause the cluster to be defined in SYS1.USERCAT.\nN\nI        If the catalog's volume is physically mounted, it is\nI        dynamically allocated. Mount the volume as permanently\nI        resident or reserved.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC1711": {"ttr": 8963, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1711\nTDFSMS AMS\nT-Chapter 17.\nT-Example 1: Define a Page Space\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095353\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 17. DEFINE PAGESPACE\nN----------------------------\nNExample 1: Define a Page Space\nN------------------------------\nD//DEFPGSP1 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    PAGESPACE( -\nD      NAME(SYS1.PAGE2) -\nD      CYLINDERS(10) -\nD      VOLUMES(VSER05) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//VOLUME    DD DISP=OLD,UNIT=DISK,VOL=SER=VSER05\nN\nNThe JCL parameters are:\nN-----------------------\nN-> VOLUME DD: describes the volume on which the data space is to be\nN   defined.\nN\nNThe DEFINE PAGESPACE parameters are:\nN------------------------------------\nN-> NAME: specifies the name of the page space, SYS1.PAGE2.\nN\nN-> CYLINDERS: specifies that the page space is to occupy 10 cylinders.\nN   The page spaces are never extended.\nN\nN-> VOLUMES: specifies that the page space is to reside on volume\nN   VSER05.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1712": {"ttr": 8965, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1712\nTDFSMS AMS\nT-Chapter 17.\nT-Example 2: Define a Page Space in another Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095405\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 17. DEFINE PAGESPACE\nN----------------------------\nNExample 2: Define a Page Space in another Catalog\nN-------------------------------------------------\nD//DEFPGSP2 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    ALIAS( -\nD      NAME(SYS2) -\nD      RELATE(MCAT.TEST.SYSTEM) -\nD    )\nD  DEFINE -\nD    PAGESPACE( -\nD      NAME(SYS2.PAGE2) -\nD      CYLINDERS(10) -\nD      VOLUMES(VSER05) -\nD    )\nD  ALTER -\nD    SYS2.PAGE2 -\nD    NEWNAME(SYS1.PAGE2) -\nD    CATALOG(MCAT.TEST.SYSTEM)\nD  ALTER -\nD    SYS2.PAGE2.DATA -\nD    NEWNAME(SYS1.PAGE2.DATA) -\nD    CATALOG(MCAT.TEST.SYSTEM)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//VOLUME    DD DISP=OLD,UNIT=DISK,VOL=SER=VSER05\nN\nNThe JCL parameters are:\nN-----------------------\nN-> VOLUME DD: describes the volume on which the data space is to be\nN   defined.\nN\nNThe DEFINE ALIAS parameters are:\nN--------------------------------\nNThe DEFINE ALIAS command defines an alias pointing to a target\nNcatalog in which the pagespace is to be defined.\nN\nN-> NAME: identifies the name of the ALIAS.\nN\nN-> RELATE: names the usercatalog where objects will be catalogued.\nN\nNThe DEFINE PAGESPACE parameters are:\nN------------------------------------\nN-> NAME: specifies the name of the page space, SYS2.PAGE2.\nN\nN-> CYLINDERS specifies that the page space is to occupy 10\nN   cylinders. The page spaces are never extended.\nN\nN-> VOLUMES specifies that the page space is to reside on volume\nN   VSER05.\nN\nNThe first ALTER parameters are:\nN-------------------------------\nN-> SYS2.PAGE2: identifies the PAGESPACE component.\nN\nN-> NEWNAME(SYS1.PAGE2): renames the PAGESPACE component.\nN\nN-> CATALOG(MCAT.TEST.SYSTEM): references the master catalog because\nN   the high level qualifier is being changed.\nN\nNThe second ALTER parameters are:\nN--------------------------------\nN-> SYS2.PAGE2.DATA: identifies the PAGESPACE component.\nN\nN-> NEWNAME(SYS1.PAGE2.DATA): renames the DATA component.\nN\nN-> CATALOG(MCAT.TEST.SYSTEM): references the master catalog because\nN   the high level qualifier is being changed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC18": {"ttr": 16135, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x15\\x01\\x18\\x13\\x7f\\x01\\x18\\x13\\x7f\\x117\\x00\\x13\\x00\\x13\\x00\\x00\\xd2\\xe3\\xd6\\xd4\\xc9\\xc1\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-05-17T00:00:00", "modifydate": "2018-05-17T11:37:15", "lines": 19, "newlines": 19, "modlines": 0, "user": "KTOMIAK"}, "text": "SAMSC18\nTDFSMS AMS\nT-Chapter 18. DEFINE PATH\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180517-113715\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 18. DEFINE PATH\nN-----------------------\nNThe DEFINE PATH command defines a path directly over a base cluster\nNor over an alternate index and its related base cluster.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1801": {"ttr": 8967, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1801\nTDFSMS AMS\nT-Chapter 18.\nT-Syntax for DEFINE PATH Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 18. DEFINE PATH\nN-----------------------\nNSyntax for DEFINE PATH Parameters\nN---------------------------------\nD  DEFINE /* Abbreviation: DEF */ -\nN\nNRequired Parameters\nN-------------------\nD    PATH( -\nI      specifies that a path is to be defined or that a path entry\nI      is to be recataloged.\nN\nD      NAME(entryname) -\nI        specifies the path's name.\nN\nD      PATHENTRY(entryname) /* Abbreviation: PENT */ -\nI        when the path consists of an alternate index and its base\nI        clusters, entryname identifies the alternate index entry.\nI        When the path is opened to process data records, both the\nI        alternate index and the base cluster are opened.\nN\nI        entryname: identifies the alternate index entry. When the path\nI          is opened to process data records, both the alternate index\nI          and the base cluster are opened.\nN\nI          When the path consists of a cluster without an alternate\nI          index, entryname identifies the cluster. You can define the\nI          path as though it were an alias for the cluster. This allows\nI          you to specify no-update access to the cluster, so that the\nI          upgrade set will not be required or updated when the cluster\nI          is opened (provided the open does not cause sharing of a\nI          control block structure specifying UPDATE). You can also\nI          establish protection attributes for the alternate name,\nI          separate from the protection attributes of the cluster.\nN\nI          Entry name must not identify a VVDS.\nN\nNOptional Parameters\nN-------------------\nD      MODEL(entryname catname) -\nI        Specifies an existing path entry that is to be used as a model\nI        for the path being defined. You can use some attributes of the\nI        model and override others by explicitly specifying them in the\nI        definition of the path. When you do not want to add or change\nI        any attributes, you specify only the entry type (PATH), the\nI        path's name, its alternate index's or cluster's name, and the\nI        model entry's name.\nN\nI        Search \"Understanding the Order of Assigned Data Set\nI        Attributes\" for more information about the order in which the\nI        system selects an attribute.\nN\nI        entryname: names the entry to be used as a model. The entryname\nI          must name a path entry.\nN\nI        catname:  names the model entry's catalog.\nN\nI          If the catalog's volume is physically mounted, it is\nI          dynamically allocated. The volume must be mounted as\nI          permanently resident or reserved. Search \"Catalog Selection\nI          Order for DEFINE\" for information about the order in which\nI          a catalog is selected when the catalog's name is not\nI          specified. Unless you have RACF authorization to the directed\nI          catalog facility, you should not specify catalog names for\nI          SMS-managed data sets. For TSO users, if the owner is not\nI          identified with the OWNER parameter, the TSO user's userid\nI          becomes the ownerid.\nN\nD      OWNER(ownerid) -\nI        specifies the identification of the path's owner.\nN\nD      RECATALOG | NORECATALOG /* Abbreviations: RCTLG and NRCTLG */ -\nI        Specifies whether a path entry is to be created for the first\nI        time or recataloged.\nN\nI        RECATALOG /* Abbreviation: RCTLG */: specifies that a path\nI          entry is to be recataloged. This requires that the NAME and\nI          PATHENTRY parameters be specified as they were when the path\nI          was originally defined.\nN\nI          If the ATTEMPTS, AUTHORIZATION, CATALOG, MODEL or OWNER\nI          parameters were specified during the original define, they\nI          must be respecified with RECATALOG to restore their original\nI          values; otherwise, their default values are used.\nN\nM            ATTEMPTS and AUTHORIZATION no longer appear as valid\nM            parameters.\nN\nI        NORECATALOG /* Abbreviation: NRCTLG */: specifies that a new\nI          path entry is to be created in a catalog.\nN\nD      TO(date) | FOR(days) -\nI        Specifies the retention period for the path. The path is not\nI        automatically deleted when the expiration date is reached.\nI        When a retention period is not specified, the path can be\nI        deleted at any time. The MANAGEMENTCLASS maximum retention\nI        period, if specified, limits the retention period specified\nI        by this parameter for SMS-managed data sets.\nN\nI        TO(date): Specifies the earliest date that a command without\nI          the PURGE parameter can delete the path. Specify\nI          the expiration date in the form yyyyddd, where yyyy is a\nI          four-digit year (to a maximum of 2155) and ddd is the\nI          three-digit day of the year from 001 through 365 (for\nI          non-leap years) or 366 (for leap years).\nN\nI          The following four values are \"never-expire\" dates:\nI          99365, 99366, 1999365, and 1999366. Specifying a\nI          \"never-expire\" date means that the PURGE parameter will\nI          always be required to delete the non-VSAM data set. For\nI          related information, see the \"EXPDT Parameter\" section of\nI          z/OS MVS JCL Reference, SA22-7597.\nN\nI          Notes:\nN\nI          1. Any dates with two-digit years (other than 99365 or 99366)\nI             will be treated as pre-2000 dates. (See note 2.)\nN\nI          2. Specifying the current date or a prior date as the\nI             expiration date will make the path  immediately eligible\nI             for deletion.\nN\nD        FOR(days): specifies the number of days to keep the path. The\nI          maximum number is 93000. If the number is 0 through 92999\nI          (except for 9999), the entry is retained for the number of\nI          days indicated. If the number is either 9999 or 93000, the\nI          entry is retained indefinitely. There is a hardware imposed\nI          expiration date of 2155.\nN\nD      UPDATE | NOUPDATE /* Abbreviation: UPD and NUPD */ -\nI        specifies whether the base cluster's upgrade set is to be\nI        allocated when the path is opened for processing.\nN\nI        The upgrade set is a group of alternate indexes associated with\nI        the base cluster. The alternate indexes are opened whenever the\nI        base cluster is opened.\nN\nI        UPDATE /* Abbreviation: UPD */: specifies that, when records\nI          in the base cluster are modified or deleted, or when records\nI          are added to the base cluster, each alternate index in the\nI          base cluster's upgrade set is modified to reflect the change\nI          in the cluster's data, just as a key-sequenced cluster's\nI          index is modified each time the cluster's data changes.\nN\nI        NOUPDATE /* Abbreviation: NUPD */: specifies that, when opening\nI          the path, the path's base cluster is to be allocated and the\nI          base cluster's upgrade set is not to be allocated.\nN\nI          You can specify the NOUPDATE attribute for the path even\nI          though the UPGRADE attribute is set for one of the base\nI          cluster's alternate indexes. When a path points to a base\nI          cluster that has a large upgrade set (that is, many alternate\nI          indexes are associated with the base cluster), and the path\nI          is defined with the NOUPDATE attribute, you can open the\nI          path, and consequently the base cluster, and none of the\nI          alternate indexes will be opened.\nN\nI          NOUPDATE will be overridden by opening the path, allowing\nI          sharing of a control block structure that permits UPDATE.\nN\nD    ) /* - */\nN\nM    CATALOG(catname) /* Abbreviation: CAT */\nI      Identifies the catalog that contains the entry of the cluster or\nI      alternate index named in the PATHENTRY parameter. Search\nI      \"Catalog Selection Order for DEFINE\" for the order in which a\nI      catalog is selected if the catalog's name is not specified.\nN\nI      catname/alias: Names the catalog or an alias that can be resolved\nI        to a catalog. For example, if alias ABCD relates to catalog\nI         SYS1.USERCAT, then specifying either ABCD or SYS1.USERCAT will\nI         cause the cluster to be defined in SYS1.USERCAT.\nN\nI        If the catalog's volume is physically mounted, it is\nI        dynamically allocated. Mount the volume as permanently\nI        resident or reserved.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC1811": {"ttr": 9217, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1811\nTDFSMS AMS\nT-Chapter 18.\nT-Example 1: Define a Path\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095429\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 18. DEFINE PATH\nN-----------------------\nNExample 1: Define a Path\nN------------------------\nD//DEFPATH1 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    PATH( -\nD      NAME(EXAMPLE.PATH) -\nD      PATHENTRY(EXAMPLE.AIX) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE PATH parameters are:\nN-------------------------------\nN-> NAME: specifies that the path's name is EXAMPLE.PATH.\nN\nN-> PATHENTRY: identifies the alternate index, EXAMPLE.AIX, that the\nN   path provides access to.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1812": {"ttr": 9219, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1812\nTDFSMS AMS\nT-Chapter 18.\nT-Example 2: Define a Path (Recatalog)\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095440\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 18. DEFINE PATH\nN-----------------------\nNExample 2: Define a Path (Recatalog)\nN------------------------------------\nD//DEFPATH2 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    PATH( -\nD      NAME(EXAMPLE.PATH) -\nD      PATHENTRY(EXAMPLE.AIX) -\nD      RECATALOG -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE PATH parameters are:\nN-------------------------------\nN-> NAME: specifies that the path's name is EXAMPLE.PATH.\nN\nN-> PATHENTRY: identifies the alternate index, EXAMPLE.AIX, that the\nN   path provides access to.\nN\nN-> RECATALOG: specifies that the path entry is to be redefined in the\nN   catalog record for EXAMPLE.AIX.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC19": {"ttr": 9221, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC19\nTDFSMS AMS\nT-Chapter 19. DEFINE USERCATALOG|MASTERCATALOG\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 19. DEFINE USERCATALOG|MASTERCATALOG\nN--------------------------------------------\nNThe DEFINE USERCATALOG command defines a user catalog. When you use\nNthis command, you can specify attributes for the catalog as a whole\nNand for the components of the catalog.\nN\nNUSERCATALOG is comprised of three components:\nN  DEFINE -\nN    USERCATALOG|MASTERCATALOG( -\nN      parameters -\nN    ) -\nN    DATA( -\nN      parameters -\nN    ) -\nN    INDEX( -\nN      parameters -\nN    ) /* - */\nM    CATALOG(catname)\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1901": {"ttr": 9223, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1901\nKMASTERCATALOG\nTDFSMS AMS\nT-Chapter 19.\nT-Syntax for DEFINE USERCATALOG Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148993\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 19. DEFINE USERCATALOG\nN------------------------------\nNSyntax for DEFINE USERCATALOG Parameters\nN----------------------------------------\nD  DEFINE /* Abbreviation: DEF */ -\nN\nNRequired Parameters\nN-------------------\nD    USERCATALOG( | /* Abbreviation: UCAT */ -\nM    MASTERCATALOG( /* Abbreviation: MCAT */ -\nI      Specifies that a catalog is to be defined.\nN\nI      USERCATALOG /* Abbreviation: UCAT */: specifies that a user\nI        catalog is to be defined. USERCATALOG is followed by the\nI        parameters specified for the catalog as a whole. For\nI        information about using an alias to identify a user catalog,\nI        see z/OS DFSMS Managing Catalogs. The update or higher RACF\nI        authority to the master catalog is required.\nN\nM      MASTERCATALOG /* Abbreviation: MCAT */: This keyword parameter\nI        is provided for coexistence with OS/VS1. Processing is\nI        identical for the MASTERCATALOG and USERCATALOG parameters.\nI        When you specify MASTERCATALOG, a user catalog is created. You\nI        can, however, establish a user catalog as a master catalog at\nI        IPL time. See z/OS DFSMS Managing Catalogs for a description of\nI        this procedure.\nN\nNUSERCATALOG parameters\nN----------------------\nN\nNRequired Parameters\nN-------------------\nD      NAME(entryname) -\nI        Specifies the name of the catalog being defined.\nN\nD      VOLUME(volser) /* Abbreviation: VOL */ -\nI        Specifies the volume that is to contain the catalog. VOLUME\nI        must be specified as a parameter of USERCATALOG, unless:\nN\nI        -> You specify the MODEL parameter, or\nN\nI        -> The data set is managed by SMS.\nN\nI           If the data set is SMS-managed, you should not request\nI           specific volume serial numbers with the VOLUME parameter.\nI           The ACS routines will assign the data set to a storage class\nI           containing attributes such as VOLUME and UNIT. You can\nI           allocate your data set to a specific volume serial number\nI           only if your storage administrator has selected GUARANTEED\nI           SPACE=YES in the storage class assigned to the data set.\nI           Only then can you specify volume serial numbers that will\nI           override the volume serial numbers used by SMS. However, if\nI           space is not available on the volumes with the serial\nI           numbers you specified, your request will be unsuccessful.\nI           See z/OS DFSMSdfp Storage Administration for information\nI           about SMS volume selection.\nN\nI        You can choose to let SMS assign specific volume serial numbers\nI        to an SMS-managed data set by coding an * for each volume\nI        serial. SMS then determines the volume serial. If you omit\nI        volser, you get one volume.\nN\nI        If you designate both user-specified and SMS-specified volume\nI        serial numbers for an SMS-managed data set, the user-specified\nI        volume serials numbers (volsers) must be requested first in\nI        the command syntax. Catalogs can only reside on one volume.\nN\nI        The VOLUME parameter interacts with other DEFINE CATALOG\nI        parameters. Ensure that the volume you specify for the catalog\nI        is consistent with the catalog's other attributes:\nN\nI        -> CYLINDERS, RECORDS, TRACKS: The volume contains enough\nI           unallocated space to satisfy the catalog's primary space\nI           requirement. Space on the volume might already be allocated\nI           to non-VSAM data sets and system data sets.\nN\nI        -> FILE: The volume information supplied with the DD statement\nI           is consistent with the information specified for the catalog\nI           and its components.\nN\nNOptional Parameters\nN-------------------\nD      CYLINDERS(primary secondary) | /*Abbreviation: CYL */ -\nD      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -\nD      MEGABYTES(primary secondary | /* Abbreviation: MB */ -\nD      RECORDS(primary secondary | /* Abbreviation: REC */ -\nD      TRACKS(primary secondary) /* Abbreviation: TRK */ -\nI        Specifies the amount of space to be allocated from the volume's\nI        available space. You can specify the amount of space as a\nI        parameter of USERCATALOG, as a parameter of USERCATALOG and\nI        DATA, or as a parameter of USERCATALOG, DATA and INDEX.\nN\nI        This parameter is optional if the cluster is managed by SMS or\nI        provided on the DATA and INDEX component level. If it is\nI        specified for an SMS-managed cluster, it will override the\nI        DATACLASS space specification. If it is not specified for an\nI        SMS-managed cluster, it can be modeled or defaulted by SMS. If\nI        it cannot be determined, the DEFINE will be unsuccessful.\nN\nI        If you specify KILOBYTES or MEGABYTES, the amount of space\nI        allocated is the minimum number of tracks or cylinders required\nI        to contain the specified number of kilobytes or megabytes. The\nI        maximum space can be specified with unit of KILOBYTES or\nI        MEGABYTES is 16,777,215. If the amount requested exceeds this\nI        value, you should specify a larger allocation unit.\nN\nI        To maintain device independence, do not specify the TRACKS or\nI        CYLINDERS parameters. If TRACKS or CYLINDERS is specified for\nI        an SMS-managed user catalog, space is allocated on the volumes\nI        selected by SMS in units equivalent to the device default\nI        geometry.\nN\nM          These days the only mainframe DASD devices in use are\nM          likely to be 3390 and thus the caution about device\nM          independence is no longer applicable. If you have something\nM          else it is way past time to migrate to the current geometry.\nN\nI        z/OS DFSMS Managing Catalogs describes how space allocation\nI        differs depending on the parameters you specify. It also\nI        provides information about estimating the amount of space to\nI        be specified for a catalog. On an extended address volume\nI        (EAV), a catalog will be allocated only in track-managed space.\nN\nI        primary secondary: Specifies the size of the primary and\nI          secondary extents to be allocated. After the primary extent\nI          is filled, the space can expand to include a maximum of 122\nI          additional secondary extents if you have specified a\nI          secondary allocation amount. Secondary allocation should be\nI          specified in case the catalog has to be extended. If you\nI          specify a secondary space allocation greater than\nI          4.0 gigabytes, the value is reset to the maximum value for\nI          that DASD device.\nN\nI        Exception: The abbreviations CYL, CYLINDER, REC, and RECORD\nI        are acceptable to access method services but cannot be used in\nI        TSO because the abbreviations do not have enough initial\nI        letters to make the keyword unique.\nN\nD      BUFFERSPACE(size | 3072) /* Abbreviation: BUFSP | BUFSPC */ -\nI        Provides the amount of space for buffers. The size you specify\nI        for the buffer space helps VSAM determine the size of the data\nI        component's and index component's control interval. If\nI        BUFFERSPACE is not coded, VSAM attempts to get enough space to\nI        contain two data set control intervals and, if the data set is\nI        key-sequenced, one index control interval.\nN\nI        The size specified cannot be less than enough space to contain\nI        two data component control intervals. If the data is\nI        key-sequenced, it should contain only one index control\nI        interval. If the specified size is less than VSAM requires for\nI        the buffers needed to run your job, the default BUFFERSPACE\nI        calculation overrides the size.\nN\nI        This is the default BUFFERSPACE calculation: Data control\nI        interval size x 2 + index control interval size.\nN\nI        size: Provides the amount of space, in bytes, for buffers. Size\nI          can be expressed in decimal (n), hexadecimal (X'n'), or\nI          binary (B'n') form.\nN\nI          Note: The limitations of the bufferspace value on how many\nI          buffers will be allocated is based on storage available in\nI          your region, and other parameters or attributes of the data\nI          set.\nN\nD      BUFND(number) /* Abbreviation: BFND */ -\nI        Specifies the number of I/O buffers VSAM is to use for\nI        transmitting data between virtual and auxiliary storage.\nN\nI        The size of the buffer is the size of the data component\nI        control interval. The minimum number you can specify is the\nI        number specified for STRNO plus 1.\nN\nI        Note that minimum buffer specification does not provide\nI        optimum sequential processing performance. Additional data\nI        buffers benefit direct inserts or updates during control area\nI        splits and will also benefit spanned record accessing.\nN\nI        number: The number of data buffers to be used. The minimum\nI          number allowed is 3; the maximum number allowed is 255.\nN\nD      BUFNI(number) /* Abbreviation: BFNI */ -\nI        Specifies the number of I/O buffers VSAM is to use for\nI        transmitting the contents of index entries between virtual and\nI        auxiliary storage for keyed access.\nN\nI        The size of the buffer is the size of the index control\nI        interval. The minimum number you can specify is the number\nI        specified for STRNO.\nN\nI        Additional index buffers will improve performance by providing\nI        for the residency of some or all the high-level index (index\nI        set records), thereby minimizing the number of high-level index\nI        records to be retrieved from DASD for key-direct processing.\nN\nI        number: The number of index buffers to be used. The minimum\nI          number allowed is 2 and the maximum number allowed is 255.\nN\nD      CONTROLINTERVALSIZE(size) /* Abbreviation: CISZ | CNVSZ */ -\nI        Specifies the size of the control interval for the catalog or\nI        component.\nN\nI        The size of the control interval depends on the maximum size\nI        of the data records and the amount of buffer space you provide.\nN\nI        If you do not code the CONTROLINTERVALSIZE, VSAM determines\nI        the size of control intervals. If you have not specified\nI        BUFFERSPACE and the size of your records permits, VSAM\nI        calculates the optimum control interval size for the data and\nI        index components. This is based partly on device\nI        characteristics.If the control interval size calculated by\nI        VSAM as required for the index component is greater than the\nI        value specified in the parameter, the value calculated by VSAM\nI        will be used.\nN\nI        size: The size of the data and index components of a catalog.\nN\nI          The maximum control interval size is 32768 bytes.\nN\nI          You can specify a size from 512 to 8K in increments of 512\nI          or from 8K to 32K in increments of 2K. K is 1024 in decimal\nI          notation. If you select a size that is not a multiple of\nI          512 or 2048, VSAM chooses the next higher multiple.\nN\nI          Refer to z/OS DFSMS Using Data Sets for a discussion of the\nI          relationship between control interval size and physical block\nI          size. The discussion also includes restrictions that apply\nI          to control interval size and physical block size.\nN\nD      DATACLASS(class) /* Abbreviation: DATACLAS */ -\nI        Specifies the name, 1-to-8 characters, of the data class.\nI        DATACLASS can be specified for SMS-managed and non-SMS-managed\nI        data sets. It provides the allocation attributes for new data\nI        sets. Your storage administrator defines the data class.\nI        However, you can override the parameters defined for DATACLASS\nI        by explicitly specifying other attributes. Search\nI        \"Understanding the Order of Assigned Data Set Attributes\" for\nI        the order of precedence (filtering) the system uses to select\nI        the attributes to assign.\nN\nI        The record organization attribute of DATACLASS is not used by\nI        DEFINE USERCATALOG/MASTERCATALOG. If DATACLASS is specified\nI        and SMS is inactive, DEFINE will be unsuccessful.\nN\nD      EATTR(NO | OPT)\nI        Specifies whether a catalog can have extended attributes\nI        (format 8 and 9 DSCBs) and optionally reside in EAS. The system\nI        records the value for EATTR in the VVDS for the catalog objects\nI        and in the DSCBs created in the VTOC.\nN\nI        NO: The catalog can not have extended attributes (format 8 and\nI          9 DSCBs) or optionally reside in EAS. The catalog is\nI          restricted to track-managed space. NO is the default.\nN\nI        OPT: The catalog can optionally have extended attributes\nI          (format 8 and 9 DSCBs) and can optionally reside in EAS.\nN\nI        You can also specify EATTR with the MODEL parameter.\nN\nD      ECSHARING | NOECSHARING /* Abbreviations: ECSHR and NOECSHR */ -\nI        Indicate whether or not sharing the catalog can be performed\nI        via the coupling facility.\nN\nI        ECSHARING /* Abbreviation: ECSHR */: Enhanced Catalog Sharing\nI          (ECS) is allowed. ECS is a catalog sharing method that makes\nI          use of a coupling facility to improve the performance of\nI          shared catalog requests. Please read about ECS in z/OS DFSMS\nI          Managing Catalogs before enabling ECS for a catalog.\nN\nN\nI        NOECSHARING /* Abbreviation: NOECSHR */: Enhanced Catalog\nI          Sharing (ECS) is not allowed. This is the default.\nN\nI          Catalog sharing will be performed, but the ECS sharing method\nI          will not be used.\nN\nD      FILE(ddname)\nI        Specifies the name of the DD statement that identifies the\nI        device and volume to be used for the catalog. The DD statement\nI        should specify DISP=OLD to prevent premature space allocation\nI        on the volume. If FILE is not specified and the catalog's\nI        volume is physically mounted, the volume identified with the\nI        VOLUME parameter is dynamically allocated. The volume must be\nI        mounted as permanently resident or reserved.\nN\nD      FREESPACE(CI-% CA-% | 0 0) /* Abbreviation: FSPC */ -\nI        Specifies the amount of space that is to be left free when the\nI        catalog is loaded and after any split of control intervals\nI        (CI_percent) and control areas (CA_percent).\nN\nI        The empty space in the control interval and control area is\nI        available for data records that are updated and inserted after\nI        the catalog is initially loaded.\nN\nI        The amounts are specified as percentages. C_percent translates\nI        into a number of bytes that is equal to, or slightly less than,\nI        the percentage value of CI_percent. CA_percent translates into\nI        a number of control intervals that is equal to, or less than,\nI        the percentage value of CA_percent.\nN\nI        CI_percent and CA_percent, must be equal to or less than 100.\nI        If you use FREESPACE(100 100), one data record is placed in\nI        each control interval used for data and one control interval\nI        in each control area is used for data (that is, one data record\nI        is stored in each control area when the data set is loaded).\nN\nI        When no FREESPACE value is coded, the default specifies that\nI        no free space is to be reserved when the data set is loaded.\nN\nD      ICFCATALOG | VOLCATALOG /* Abbreviations: ICFCAT and VOLCAT */ -\nI        Specify the type of catalog to be defined.\nN\nI        ICFCATALOG /* Abbreviation: ICFCAT */: Defines a catalog.\nN\nI        VOLCATALOG /* Abbreviation: VOLCAT */: Defines a tape volume\nI          catalog (VOLCAT). A VOLCAT can contain only tape library and\nI          tape volume entries. You can define either a general VOLCAT\nI          or a specific VOLCAT.\nN\nI          -> A general VOLCAT is the default tape volume catalog. A\nI             general VOLCAT contains all tape library entries and any\nI             tape volume entries that do not point to a specific\nI             VOLCAT. Each system can have access to only one general\nI             VOLCAT. You must define the general VOLCAT prior to\nI             bringing the tape libraries online.\nN\nI          The general VOLCAT must be in the form:\nN\nI            XXXXXXXX.VOLCAT.VGENERAL\nN\nI          where XXXXXXXX either defaults to SYS1 or to another high\nI          level qualifier specified by the LOADxx member in\nI          SYS1.PARMLIB. For more information on changing the\nI          high-level qualifier for VOLCATs, see the section on\nI          bypassing SYSCATxx with LOADxx in z/OS DFSMS Managing\nI          Catalogs.\nN\nI          -> A specific VOLCAT is a tape volume catalog that contains\nI             a specific group of tape volume entries based on the tape\nI             volume serial numbers (tape volsers). A specific VOLCAT\nI             cannot contain tape library entries.\nN\nI             The specific VOLCAT must be in the form:\nN\nI               XXXXXXXX.VOLCAT.Vy\nN\nI             -> where XXXXXXXX either defaults to SYS1 or is another\nI                high-level qualifier specified by the LOADxx member in\nI                SYS1.PARMLIB.\nN\nI             -> where y represents the first character of a tape\nI                volser. A specific VOLCAT contains all the tape volume\nI                entries with volsers whose first character is equal\nI                to y. Search \"Tape Volume Names\" for a discussion of\nI                the naming restrictions for tape volume volsers.\nN\nD      LOCK | UNLOCK -\nI        Controls the setting of the catalog lock attribute, and\nI        therefore checks access to a catalog. LOCK and UNLOCK can be\nI        specified only when the entryname identifies a catalog. UNLOCK\nI        is the default. Before you lock a catalog, review the\nI        information on locking catalogs in z/OS DFSMS Managing\nI        Catalogs.\nN\nI        LOCK: Specifies that the catalog identified by entryname is to\nI          be defined with the lock attribute on. Defining the catalog\nI          with the lock on restricts catalog access to authorized\nI          personnel. Specification of this parameter requires READ\nI          authority to the profile name, IGG.CATLOCK, with class type\nI          FACILITY. Catalogs are usually defined with the lock\nI          attribute on only after a DELETE RECOVERY during catalog\nI          recovery operations. Locking a catalog makes it inaccessible\nI          to all users without READ authority to RACF FACILITY class\nI          profile IGG.CATLOCK (including users sharing the catalog on\nI          other systems).\nN\nI        UNLOCK: Specifies that the catalog identified by entryname is\nI          to be defined with the lock attribute off. This is the\nI          default if LOCK | UNLOCK is not specified.\nN\nD      MANAGEMENTCLASS(class) /* Abbreviation: MGMTCLAS */ -\nI        For SMS-managed data sets: Specifies the name, 1-to-8\nI        characters, of the management class. Your storage administrator\nI        defines the names of the management classes you can specify.\nI        If MANAGEMENTCLASS is not specified, but STORAGECLASS is\nI        specified or defaulted, MANAGEMENTCLASS is derived from\nI        automatic class selection (ACS). If MANAGEMENTCLASS is\nI        specified and SMS is inactive, DEFINE will be unsuccessful.\nN\nD      MODEL(entryname catname)\nI        Specifies that an existing master or user catalog is to be used\nI        as a model for the user catalog being defined.\nN\nI        When one entry is used as a model for another, its attributes\nI        are copied as the new entry is defined. You can use some\nI        attributes of the model and override others by explicitly\nI        specifying them in the definition of the user catalog.\nN\nI        If a model is used, you must specify certain parameters even\nI        though no attributes are to be changed or added. The name of\nI        the user catalog to be defined and volume and space information\nI        must always be specified as parameters of USERCATALOG. Search\nI        \"Understanding the Order of Assigned Data Set Attributes\" for\nI        information about the order in which the system selects an\nI        attribute.\nN\nI        STORAGECLASS and MANAGEMENTCLASS classes can be modeled.\nI        If DATACLASS exists for the entry being used as a model, it is\nI        ignored.\nN\nI        entryname: Specifies the name of the master or user catalog to\nI          be used as a model.\nN\nI        You can specify the EATTR parameter with MODEL.\nN\nD      OWNER(ownerid)\nI        Specifies the identification of the owner of the catalog being\nI        defined.\nN\nM      RECORDSIZE(average maximum | 4086 32400) -\nM      /* Abbreviation: RECSZ */ -\nI        If you specify record size it is ignored, and no error message\nI        gets issued.\nN\nD      SHAREOPTIONS(crossregioncrosssystem |  3 4)\nI        Specifies how a catalog can be shared among users. This\nI        specification applies to both the data and index components of\nI        the catalog.\nN\nI        crossregion: Indicates the amount of sharing allowed among\nI          regions within the same system or within multiple systems\nI          using global resource serialization (GRS). Independent job\nI          steps in an operating system, or multiple systems in a GRS\nI          ring, can access a VSAM data set concurrently. For more\nI          information about GRS, see z/OS MVS Planning: Global Resource\nI          Serialization. To share a data set, each user must include\nI          DISP=SHR in the data set's DD statement. You can use the\nI          following options:\nN\nI        1: The data set can be shared by any number of users for read\nI           processing, or the data set can be accessed by only one user\nI           for read and write processing. This setting does not allow\nI           any non-RLS access when the data set is already open for\nI           VSAM RLS or DFSMStvs processing. An RLS or DFSMStvs open\nI           fails with this option if the data set is already open for\nI           any processing.\nN\nI        2: The data set can be accessed by any number of users for read\nI           processing, and it can also be accessed by one user for\nI           write processing. It is the user's responsibility to provide\nI           read integrity. VSAM ensures write integrity by obtaining\nI           exclusive control for a control interval while it is being\nI           updated. A VSAM RLS or DFSMStvs open is not allowed while\nI           the data set is open for non-RLS output.\nN\nI           If the data set has already been opened for VSAM RLS or\nI           DFSMStvs processing, a non-RLS open for input is allowed;\nI           a non-RLS open for output fails. If the data set is opened\nI           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is\nI           allowed.\nN\nI        3: The data set can be fully shared by any number of users. The\nI           user is responsible for maintaining both read and write\nI           integrity for the data the program accesses. This setting\nI           does not allow any non-RLS access when the data set is\nI           already open for VSAM RLS or DFSMStvs processing. If the\nI           data set is opened for input in non-RLS mode, a VSAM RLS or\nI           DFSMStvs open is allowed.\nN\nI           This option is the only one applicable to a catalog.\nN\nI        4: The data set can be fully shared by any number of users. For\nI           each request, VSAM refreshes the buffers used for direct\nI           processing. This setting does not allow any non-RLS access\nI           when the data set is already open for VSAM RLS or DFSMStvs\nI           processing. If the data set is opened for input in non-RLS\nI           mode, a VSAM RLS or DFSMStvs open is allowed.\nN\nI           As in SHAREOPTIONS 3, each user is responsible for\nI           maintaining both read and write integrity for the data the\nI           program accesses.\nN\nI        crosssystem: Specifies the amount of sharing allowed among\nI          systems. Job steps of two or more operating systems can gain\nI          access to the same VSAM data set regardless of the\nI          disposition specified in each step's DD statement for the\nI          data set. However, if you are using GRS across systems or\nI          JES3, the data set might not be shared depending on the\nI          disposition of the system.\nN\nI          To get exclusive control of the data set's volume, a task\nI          in one system issues the RESERVE macro. The level of\nI          cross-system sharing allowed by VSAM applies only in a\nI          multiple operating system environment.\nN\nI          The cross-system sharing options are ignored by VSAM RLS or\nI          DFSMStvs processing. The values are:\nN\nI          1: Reserved.\nN\nI          2: Reserved.\nN\nI          3: Specifies that the data set can be fully shared. Each\nI             user is responsible for maintaining both read and write\nI             integrity for the data that user's program accesses. User\nI             programs that ignore write integrity guidelines can result\nI             in:\nN\nI            -> VSAM program checks\nN\nI            -> Uncorrectable data set errors\nN\nI            -> Unpredictable results\nN\nI            The RESERVE and DEQ macros are required with this option\nI            to maintain data set integrity. (See z/OS MVS Programming:\nI            Authorized Assembler Services Reference ALE-DYN and\nI            z/OS MVS Programming: Authorized Assembler Services\nI            Reference LLA-SDU for information on using RESERVE and DEQ.)\nI            If the sphere is accessed using VSAM RLS or DFSMStvs\nI            protocols, VSAM RLS maintains the required integrity.\nN\nI          4: Specifies that the data set can be fully shared. For each\nI             request, VSAM refreshes the buffers used for direct\nI             processing. This option requires that you use the RESERVE\nI             and DEQ macros to maintain data integrity while sharing\nI             the data set. Improper use of the RESERVE macro can cause\nI             problems similar to those described under SHAREOPTIONS 3.\nI             (See z/OS MVS Programming: Authorized Assembler Services\nI             Reference ALE-DYN and z/OS MVS Programming: Authorized\nI             Assembler Services Reference LLA-SDU for information on\nI             using RESERVE and DEQ.) Output processing is limited to\nI             update, or add processing, or both that does not change\nI             either the high-used RBA or the RBA of the high key data\nI             control interval if DISP=SHR is used.\nN\nD      STORAGECLASS(class)\nI        For SMS-managed data sets: Specifies the 1-to-8 character name\nI        of the storage class. Your storage administrator defines the\nI        names of the storage classes you can specify. Use the storage\nI        class to specify the storage service level to be used by SMS\nI        for storage of the catalog. If STORAGECLASS is specified and\nI        SMS is inactive, DEFINE will be unsuccessful.\nN\nD      STRNO(number | 2)\nI        Specifies the number of requests (RPLs) requiring concurrent\nI        data set positioning that VSAM is to be prepared to\nI        accommodate.\nN\nI        number: The number of requests catalog administration must be\nI          prepared to accommodate. The minimum number allowed is 2 and\nI          the maximum number is 255.\nN\nD      TO(date) | FOR(days) -\nI        Specifies the retention period for the catalog being defined.\nI        If no value is coded, the catalog can be deleted whenever it is\nI        empty.\nN\nI        The MANAGEMENTCLASS maximum retention period, if specified,\nI        limits the retention period specified by this parameter.\nN\nI        For non-SMS-managed catalogs, the correct retention period is\nI        reflected in the catalog entry. The VTOC entry cannot contain\nI        the correct retention period. Enter a LISTCAT command to see\nI        the correct expiration date.\nN\nI        For SMS-managed catalogs, the expiration date in the catalog\nI        is updated and the expiration date in the format-1 DSCB is\nI        changed. Should the expiration date in the catalog not agree\nI        with the expiration date in the VTOC, the VTOC entry overrides\nI        the catalog entry. In this case, enter a LISTVTOC command to\nI        see the correct expiration date.\nN\nI        TO(date):  Specifies the earliest date that a command without\nI          the PURGE parameter can delete the catalog. Specify the\nI          expiration date in the form yyyyddd, where yyyy is a\nI          four-digit year (to a maximum of 2155) and ddd is the\nI          three-digit day of the year from 001 through 365\nI          (for non-leap years) or 366 (for leap years).\nN\nI          The following four values are \"never-expire\" dates:\nI          99365, 99366, 1999365, and 1999366. Specifying a\nI          \"never-expire\" date means that the PURGE parameter will\nI          always be required to delete the catalog. For related\nI          information, see the \"EXPDT Parameter\" section of z/OS MVS\nI          JCL Reference, SA22-7597.\nN\nI          Notes:\nN\nI          1. Any dates with two-digit years (other than 99365 or 99366)\nI             will be treated as pre-2000 dates. (See note 2.)\nN\nI          2. Specifying the current date or a prior date as the\nI             expiration date will make the catalog immediately eligible\nI             for deletion.\nN\nI        FOR(days): Specifies the number of days to keep the catalog.\nI          The maximum number is 93000. If the number is 0 through 92999\nI          (except for 9999), the entry is retained for the number of\nI          days indicated. If the number is either 9999 or 93000, the\nI          entry is retained indefinitely. There is a hardware imposed\nI          expiration date of 2155.\nN\nD      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */-\nI        Specify whether or not the catalog is to be checked by a\nI        direct access device operation called write check when a\nI        record is written to the device.\nN\nI        WRITECHECK /* Abbreviation: WCK */: Specifies that a record is\nI          to be written and then read, without data transfer.\nN\nI        NOWRITECHECK /* Abbreviation: NWCK */: Specifies that the\nI          catalog is not to be checked by a write Checks to see if a\nI          record has been written to the device.\nD    ) -\nN\nNDATA component\nN--------------\nD    DATA( -\nD      CYLINDERS(primary secondary) | /*Abbreviation: CYL */ -\nD      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -\nD      MEGABYTES(primary secondary | /* Abbreviation: MB */ -\nD      RECORDS(primary secondary | /* Abbreviation: REC */ -\nD      TRACKS(primary secondary) /* Abbreviation: TRK */ -\nI        Specifies the amount of space to be allocated from the volume's\nI        available space. You can specify the amount of space as a\nI        parameter of USERCATALOG, as a parameter of USERCATALOG and\nI        DATA, or as a parameter of USERCATALOG, DATA and INDEX.\nN\nI        This parameter is optional if the cluster is managed by SMS or\nI        provided on the DATA and INDEX component level. If it is\nI        specified for an SMS-managed cluster, it will override the\nI        DATACLASS space specification. If it is not specified for an\nI        SMS-managed cluster, it can be modeled or defaulted by SMS. If\nI        it cannot be determined, the DEFINE will be unsuccessful.\nN\nI        If you specify KILOBYTES or MEGABYTES, the amount of space\nI        allocated is the minimum number of tracks or cylinders required\nI        to contain the specified number of kilobytes or megabytes. The\nI        maximum space can be specified with unit of KILOBYTES or\nI        MEGABYTES is 16,777,215. If the amount requested exceeds this\nI        value, you should specify a larger allocation unit.\nN\nI        To maintain device independence, do not specify the TRACKS or\nI        CYLINDERS parameters. If TRACKS or CYLINDERS is specified for\nI        an SMS-managed user catalog, space is allocated on the volumes\nI        selected by SMS in units equivalent to the device default\nI        geometry.\nN\nM          These days the only mainframe DASD devices in use are\nM          likely to be 3390 and thus the caution about device\nM          independence is no longer applicable. If you have something\nM          else it is way past time to migrate to the current geometry.\nN\nI        z/OS DFSMS Managing Catalogs describes how space allocation\nI        differs depending on the parameters you specify. It also\nI        provides information about estimating the amount of space to\nI        be specified for a catalog. On an extended address volume\nI        (EAV), a catalog will be allocated only in track-managed space.\nN\nI        primary secondary: Specifies the size of the primary and\nI          secondary extents to be allocated. After the primary extent\nI          is filled, the space can expand to include a maximum of\nI          122 additional secondary extents if you have specified a\nI          secondary allocation amount. Secondary allocation should be\nI          specified in case the catalog has to be extended. If you\nI          specify a secondary space allocation greater than\nI          4.0 gigabytes, the value is reset to the maximum value for\nI          that DASD device.\nN\nI          Exception: The abbreviations CYL, CYLINDER, REC, and RECORD\nI          are acceptable to access method services but cannot be used\nI          in TSO because the abbreviations do not have enough initial\nI          letters to make the keyword unique.\nN\nD      BUFFERSPACE(size | 3072) /* Abbreviation: BUFSP | BUFSPC */ -\nI        Provides the amount of space for buffers. The size you specify\nI        for the buffer space helps VSAM determine the size of the data\nI        component's and index component's control interval. If\nI        BUFFERSPACE is not coded, VSAM attempts to get enough space to\nI        contain two data set control intervals and, if the data set is\nI        key-sequenced, one index control interval.\nN\nI        The size specified cannot be less than enough space to contain\nI        two data component control intervals. If the data is\nI        key-sequenced, it should contain only one index control\nI        interval. If the specified size is less than VSAM requires for\nI        the buffers needed to run your job, the default BUFFERSPACE\nI        calculation overrides the size.\nN\nI        This is the default BUFFERSPACE calculation: Data control\nI        interval size x 2 + index control interval size.\nN\nI        size: Provides the amount of space, in bytes, for buffers. Size\nI          can be expressed in decimal (n), hexadecimal (X'n'), or\nI          binary (B'n') form.\nN\nI          Note: The limitations of the bufferspace value on how many\nI          buffers will be allocated is based on storage available in\nI          your region, and other parameters or attributes of the data\nI          set.\nN\nD      BUFND(number) /* Abbreviation: BFND */ -\nI        Specifies the number of I/O buffers VSAM is to use for\nI        transmitting data between virtual and auxiliary storage.\nN\nI        The size of the buffer is the size of the data component\nI        control interval. The minimum number you can specify is the\nI        number specified for STRNO plus 1.\nN\nI        Note that minimum buffer specification does not provide\nI          optimum sequential processing performance. Additional data\nI          buffers benefit direct inserts or updates during control area\nI          splits and will also benefit spanned record accessing.\nN\nI        number: The number of data buffers to be used. The minimum\nI          number allowed is 3; the maximum number allowed is 255.\nN\nD      CONTROLINTERVALSIZE(size) /* Abbreviation: CISZ | CNVSZ */ -\nI        Specifies the size of the control interval for the catalog or\nI        component.\nN\nI        The size of the control interval depends on the maximum size\nI        of the data records and the amount of buffer space you provide.\nN\nI        If you do not code the CONTROLINTERVALSIZE, VSAM determines\nI        the size of control intervals. If you have not specified\nI        BUFFERSPACE and the size of your records permits, VSAM\nI        calculates the optimum control interval size for the data and\nI        index components. This is based partly on device\nI        characteristics.If the control interval size calculated by\nI        VSAM as required for the index component is greater than the\nI        value specified in the parameter, the value calculated by VSAM\nI        will be used.\nN\nI        size: The size of the data and index components of a catalog.\nN\nI          The maximum control interval size is 32768 bytes.\nN\nI          You can specify a size from 512 to 8K in increments of 512\nI          or from 8K to 32K in increments of 2K. K is 1024 in decimal\nI          notation. If you select a size that is not a multiple of\nI          512 or 2048, VSAM chooses the next higher multiple.\nN\nI          Refer to z/OS DFSMS Using Data Sets for a discussion of the\nI          relationship between control interval size and physical block\nI          size. The discussion also includes restrictions that apply\nI          to control interval size and physical block size.\nN\nD      FREESPACE(CI-% CA-% | 0 0) /* Abbreviation: FSPC */ -\nI        Specifies the amount of space that is to be left free when the\nI        catalog is loaded and after any split of control intervals\nI        (CI_percent) and control areas (CA_percent).\nN\nI        The empty space in the control interval and control area is\nI        available for data records that are updated and inserted after\nI        the catalog is initially loaded.\nN\nI        The amounts are specified as percentages. C_percent translates\nI        into a number of bytes that is equal to, or slightly less than,\nI        the percentage value of CI_percent. CA_percent translates into\nI        a number of control intervals that is equal to, or less than,\nI        the percentage value of CA_percent.\nN\nI        CI_percent and CA_percent, must be equal to or less than 100.\nI        If you use FREESPACE(100 100), one data record is placed in\nI        each control interval used for data and one control interval in\nI        each control area is used for data (that is, one data record is\nI        stored in each control area when the data set is loaded).\nN\nI        When no FREESPACE value is coded, the default specifies that\nI        no free space is to be reserved when the data set is loaded.\nN\nM      RECORDSIZE(average maximum | 4086 32400) -\nM      /* Abbreviation: RECSZ */ -\nI        If you specify record size it is ignored, and no error message\nI        gets issued.\nN\nD      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */-\nI        Specify whether or not the catalog is to be checked by a direct\nI        access device operation called write check when a record is\nI        written to the device.\nN\nI        WRITECHECK /* Abbreviation: WCK */: Specifies that a record is\nI          to be written and then read, without data transfer.\nN\nI        NOWRITECHECK /* Abbreviation: NWCK */: Specifies that the\nI          catalog is not to be checked by a write Checks to see if a\nI          record has been written to the device.\nN\nD    ) -\nN\nNINDEX component\nN---------------\nD    INDEX( -\nD      CYLINDERS(primary secondary) | /*Abbreviation: CYL */ -\nD      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -\nD      MEGABYTES(primary secondary | /* Abbreviation: MB */ -\nD      RECORDS(primary secondary | /* Abbreviation: REC */ -\nD      TRACKS(primary secondary) /* Abbreviation: TRK */ -\nI        Specifies the amount of space to be allocated from the volume's\nI        available space. You can specify the amount of space as a\nI        parameter of USERCATALOG, as a parameter of USERCATALOG and\nI        DATA, or as a parameter of USERCATALOG, DATA and INDEX.\nN\nI        This parameter is optional if the cluster is managed by SMS or\nI        provided on the DATA and INDEX component level. If it is\nI        specified for an SMS-managed cluster, it will override the\nI        DATACLASS space specification. If it is not specified for an\nI        SMS-managed cluster, it can be modeled or defaulted by SMS. If\nI        it cannot be determined, the DEFINE will be unsuccessful.\nN\nI        If you specify KILOBYTES or MEGABYTES, the amount of space\nI        allocated is the minimum number of tracks or cylinders required\nI        to contain the specified number of kilobytes or megabytes. The\nI        maximum space can be specified with unit of KILOBYTES or\nI        MEGABYTES is 16,777,215. If the amount requested exceeds this\nI        value, you should specify a larger allocation unit.\nN\nI        To maintain device independence, do not specify the TRACKS or\nI        CYLINDERS parameters. If TRACKS or CYLINDERS is specified for\nI        an SMS-managed user catalog, space is allocated on the volumes\nI        selected by SMS in units equivalent to the device default\nI        geometry.\nN\nM          These days the only mainframe DASD devices in use are\nM          likely to be 3390 and thus the caution about device\nM          independence is no longer applicable. If you have something\nM          else it is way past time to migrate to the current geometry.\nN\nI        z/OS DFSMS Managing Catalogs describes how space allocation\nI        differs depending on the parameters you specify. It also\nI        provides information about estimating the amount of space to\nI        be specified for a catalog. On an extended address volume\nI        (EAV), a catalog will be allocated only in track-managed space.\nN\nI        primary secondary: Specifies the size of the primary and\nI          secondary extents to be allocated. After the primary extent\nI          is filled, the space can expand to include a maximum of\nI          122 additional secondary extents if you have specified a\nI          secondary allocation amount. Secondary allocation should be\nI          specified in case the catalog has to be extended. If you\nI          specify a secondary space allocation greater than\nI          4.0 gigabytes, the value is reset to the maximum value for\nI          that DASD device.\nN\nI          Exception: The abbreviations CYL, CYLINDER, REC, and RECORD\nI          are acceptable to access method services but cannot be used\nI          in TSO because the abbreviations do not have enough initial\nI          letters to make the keyword unique.\nN\nD      BUFNI(number) /* Abbreviation: BFNI */ -\nI        Specifies the number of I/O buffers VSAM is to use for\nI        transmitting the contents of index entries between virtual and\nI        auxiliary storage for keyed access.\nN\nI        The size of the buffer is the size of the index control\nI        interval. The minimum number you can specify is the number\nI        specified for STRNO.\nN\nI        Additional index buffers will improve performance by providing\nI        for the residency of some or all the high-level index (index\nI        set records), thereby minimizing the number of high-level\nI        index records to be retrieved from DASD for key-direct\nI        processing.\nN\nI        number: The number of index buffers to be used. The minimum\nI        number allowed is 2 and the maximum number allowed is 255.\nN\nD      CONTROLINTERVALSIZE(size) /* Abbreviation: CISZ | CNVSZ */ -\nI        Specifies the size of the control interval for the catalog or\nI        component.\nN\nI        The size of the control interval depends on the maximum size\nI        of the data records and the amount of buffer space you provide.\nN\nI        If you do not code the CONTROLINTERVALSIZE, VSAM determines\nI        the size of control intervals. If you have not specified\nI        BUFFERSPACE and the size of your records permits, VSAM\nI        calculates the optimum control interval size for the data and\nI        index components. This is based partly on device\nI        characteristics.If the control interval size calculated by\nI        VSAM as required for the index component is greater than the\nI        value specified in the parameter, the value calculated by\nI        VSAM will be used.\nN\nI        size: The size of the data and index components of a catalog.\nN\nI          The maximum control interval size is 32768 bytes.\nN\nI          You can specify a size from 512 to 8K in increments of 512 or\nI          from 8K to 32K in increments of 2K. K is 1024 in decimal\nI          notation. If you select a size that is not a multiple of\nI          512 or 2048, VSAM chooses the next higher multiple.\nN\nI          Refer to z/OS DFSMS Using Data Sets for a discussion of the\nI          relationship between control interval size and physical block\nI          size. The discussion also includes restrictions that apply to\nI          control interval size and physical block size.\nN\nD      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */-\nI        Specify whether or not the catalog is to be checked by a\nI        direct access device operation called write check when a\nI        record is written to the device.\nN\nI        WRITECHECK /* Abbreviation: WCK */: Specifies that a record is\nI          to be written and then read, without data transfer.\nN\nI        NOWRITECHECK /* Abbreviation: NWCK */: Specifies that the\nI          catalog is not to be checked by a write Checks to see if a\nI          record has been written to the device.\nN\nD    ) /* - */\nN\nM    CATALOG(mastercatname) /* Abbreviation: CAT */\nI      Unused parameter. Retained for compatibility only.\nN\nI      mastercatname: Regardless of specification, the entry will go\nI        into the current system master catalog.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC1911": {"ttr": 9476, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1911\nTDFSMS AMS\nT-Chapter 19.\nT-Example 1: Define a User Catalog, Specifying SMS Keywords\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095828\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 19. DEFINE USERCATALOG\nN------------------------------\nNExample 1: Define a User Catalog, Specifying SMS Keywords\nN---------------------------------------------------------\nD//DEFUCAT1 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    USERCATALOG( -\nD      NAME(USERCAT1) -\nD      DATACLAS(VSDEF) -\nD      ICFCATALOG -\nD      MGMTCLAS(VSAM) -\nD      STORCLAS(SMSSTOR) -\nD      STRNO(3) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE USERCATALOG parameters are:\nN--------------------------------------\nN-> NAME: specifies the user catalog, USERCAT1.\nN\nN-> DATACLAS: specifies an installation-defined name of an SMS data\nN   class, VSDEF. The data set will assume the space parameters, and the\nN   FREESPACE, SHAREOPTIONS, and RECORDSIZE parameters contained in this\nN   data class. If your storage administrator has established ACS\nN   routines that will select a default data class, this parameter is\nN   optional. If a default data class is not assigned to this data set,\nN   however, you must explicitly specify any required parameters, in\nN   this case the space parameter, or the job will be unsuccessful.\nN\nN-> ICFCATALOG: specifies that the user catalog is to be in the catalog\nN   format.\nN\nN-> MGMTCLAS: specifies an installation-defined name of an SMS\nN   management class, VSAM. This parameter is optional. If it is not\nN   specified, the data set might assume the management class default\nN   assigned by the ACS routines.\nN\nN-> STORCLAS: specifies an installation-defined name of an SMS storage\nN   class, SMSSTOR. This parameter is optional. If it is not specified,\nN   the data set will assume the storage class default assigned by the\nN   ACS routines.\nN\nN-> STRNO: specifies that up to 3 concurrent requests to this catalog\nN   are to be processed. Like BUFSP, STRNO is not one of the data class\nN   attributes. If STRNO or BUFSP is not specified, the system will take\nN   the default established by access method services.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1912": {"ttr": 9729, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1912\nTDFSMS AMS\nT-Chapter 19.\nT-Example 2: Define a User Catalog, Taking All Defaults\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095840\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 19. DEFINE USERCATALOG\nN------------------------------\nNExample 2: Define a User Catalog, Taking All Defaults\nN-----------------------------------------------------\nD//DEFUCAT2 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    USERCATALOG( -\nD      NAME(USERCAT1) -\nD      ICFCATALOG -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE USERCATALOG parameters are:\nN--------------------------------------\nN-> NAME: specifies the user catalog, USERCAT1.\nN\nN-> ICFCATALOG: specifies that the user catalog is to be in the catalog\nN   format.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1913": {"ttr": 9731, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1913\nTDFSMS AMS\nT-Chapter 19.\nT-Example 3: Define a User Catalog, Using SMS Keywords and the VOLUME\nTParameter\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095852\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 19. DEFINE USERCATALOG\nN------------------------------\nNExample 3: Define a User Catalog, Specifying SMS Keywords\nNand the VOLUME Parameter\nN---------------------------------------------------------\nD//DEFUCAT3 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    USERCATALOG( -\nD      NAME(USERCAT1) -\nD      DATACLAS(VSDEF) -\nD      ICFCATALOG -\nD      MGMTCLAS(VSAM) -\nD      STORCLAS(SPECIAL) -\nD      STRNO(3) -\nD      VOLUME(VSER01) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE USERCATALOG parameters are:\nN--------------------------------------\nN-> NAME: specifies the user catalog, USERCAT1.\nN\nN-> DATACLAS: specifies an installation-defined name of an SMS data\nN   class, VSDEF. The data set will assume the space parameters, and the\nN   FREESPACE, SHAREOPTIONS, and RECORDSIZE parameters contained in this\nN   data class. If your storage administrator has established ACS\nN   routines that will select a default data class, this parameter is\nN   optional. If a default data class is not assigned to this data set,\nN   however, you must explicitly specify any required parameters, in\nN   this case the space parameter, or the job will be unsuccessful.\nN\nN-> ICFCATALOG: specifies that the user catalog is to be in the catalog\nN   format.\nN\nN-> MGMTCLAS: specifies an installation-defined name of an SMS\nN   management class, VSAM. This parameter is optional. If it is not\nN   specified, the data set might assume the management class default\nN   assigned by the ACS routines.\nN\nN-> STORCLAS: specifies an installation-defined name of an SMS storage\nN   class, SPECIAL. This parameter is optional. If it is not specified,\nN   the data set will assume the storage class default assigned by the\nN   ACS routines.\nN\nN-> STRNO: specifies that up to 3 concurrent requests to this catalog\nN   are to be processed. Like BUFSP, STRNO is not one of the data class\nN   attributes. If STRNO or BUFSP is not specified, the system will take\nN   the default established by access method services.\nN\nN-> VOLUME: specifies that the user catalog is to reside on volume\nN   VSER01. In this example, the installation defined SMS storage class\nN   of SPECIAL has the GUARANTEED SPACE=YES attribute. This allows\nN   specific volume allocation on this DEFINE using the VOLUME keyword.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1914": {"ttr": 9733, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1914\nTDFSMS AMS\nT-Chapter 19.\nT-Example 4: Define a User Catalog, Using SMS Keywords and the VOLUME\nTParameter\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095918\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 19. DEFINE USERCATALOG\nN------------------------------\nNExample 4: Define a User Catalog, Specifying SMS Keywords\nNand the VOLUME Parameter\nN---------------------------------------------------------\nMIBM decided this example was worth showing twice.\nM\nD//DEFUCAT4 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    USERCATALOG( -\nD      NAME(USERCAT1) -\nD      DATACLAS(VSDEF) -\nD      ICFCATALOG -\nD      MGMTCLAS(VSAM) -\nD      STORCLAS(SPECIAL) -\nD      STRNO(3) -\nD      VOLUME(VSER01) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE USERCATALOG parameters are:\nN--------------------------------------\nN-> NAME: specifies the user catalog, USERCAT1.\nN\nN-> DATACLAS: specifies an installation-defined name of an SMS data\nN   class, VSDEF. The data set will assume the space parameters, and the\nN   FREESPACE, SHAREOPTIONS, and RECORDSIZE parameters contained in this\nN   data class. If your storage administrator has established ACS\nN   routines that will select a default data class, this parameter is\nN   optional. If a default data class is not assigned to this data set,\nN   however, you must explicitly specify any required parameters, in\nN   this case the space parameter, or the job will be unsuccessful.\nN\nN-> ICFCATALOG: specifies that the user catalog is to be in the catalog\nN   format.\nN\nN-> MGMTCLAS: specifies an installation-defined name of an SMS\nN   management class, VSAM. This parameter is optional. If it is not\nN   data set might assume the management class default assigned by the\nN   ACS routines.\nN\nN-> STORCLAS specifies an installation-defined name of an SMS storage\nN   class, SPECIAL. This parameter is optional. If it is not specified,\nN   specified, the the data set will assume the storage class default\nN   assigned by the ACS routines.\nN\nN-> STRNO: specifies that up to 3 concurrent requests to this catalog\nN   are to be processed. Like BUFSP, STRNO is not one of the data class\nN   attributes. If STRNO or BUFSP is not specified, the system will take\nN   the default established by access method services.\nN\nN-> VOLUME: specifies that the user catalog is to reside on volume\nN   VSER01. In this example, the installation defined SMS storage class\nN   of SPECIAL has the GUARANTEED SPACE=YES attribute. This allows\nN   specific volume allocation on this DEFINE using the VOLUME keyword.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1915": {"ttr": 9735, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1915\nTDFSMS AMS\nT-Chapter 19.\nT-Example 5: Define a User Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095930\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 19. DEFINE USERCATALOG\nN------------------------------\nNExample 5: Define a User Catalog\nN--------------------------------\nD//DEFUCAT5 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    USERCATALOG( -\nD      NAME(USERCAT5) -\nD      CYLINDERS(3 2) -\nD      FREESPACE(10 20) -\nD      ICFCATALOG -\nD      SHAREOPTIONS(3 4) -\nD      STRNO(3) -\nD      VOLUME(VSER01) -\nD    ) -\nD    DATA( -\nD      BUFND(4) -\nD      CONTROLINTERVALSIZE(4096)) -\nD    ) -\nD    INDEX( -\nD      BUFNI(4) -\nD      CONTROLINTERVALSIZE(2048) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE USERCATALOG parameters are:\nN--------------------------------------\nN-> NAME: specifies the user catalog, USERCAT5.\nN\nN-> CYLINDERS: specifies that 3 cylinders are to be allocated for the\nN   catalog. When the catalog is extended, it is in increments of\nN   2 cylinders.\nN\nN-> FREESPACE: specifies the amount of free space to be left in the\nN   data component's control intervals (10%) and the control areas\nN   (20% of the control intervals in the control area) when data records\nN   are loaded into the user catalog.\nN\nN-> ICFCATALOG: specifies that the user catalog is to be in the catalog\nN   format.\nN\nN-> SHAREOPTIONS: specifies the extent of cross-region sharing 3 (fully\nN   shared by any number of users) and cross-system sharing 4 (fully\nN   shared) to be allowed for the user catalog.\nN\nN-> STRNO: specifies that up to 3 concurrent requests to this catalog\nN   are to be processed. Like BUFSP, STRNO is not one of the data class\nN   attributes. If STRNO or BUFSP is not specified, the system will take\nN   the default established by access method services.\nN\nN-> VOLUME specifies that the user catalog is to reside on volume\nN   VSER01.\nN\nNThe DATA component parameters are:\nN----------------------------------\nN-> BUFND: specifies that 4 data buffers, of the data component's\nN   control interval size is to be used when processing this user\nN   catalog.\nN\nN-> CONTROLINTERVALSIZE: specifies the data component's control interval\nN   size, 4096 for the data component.\nN\nNThe INDEX component parameters are:\nN-----------------------------------\nN-> BUFNI: specifies that 4 index buffers, of the index component's\nN   control interval size is to be used when processing this user\nN   catalog.\nN\nN-> CONTROLINTERVALSIZE: specifies the index component's control\nN   interval size, 2048 for the index component.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1916": {"ttr": 9737, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1916\nTDFSMS AMS\nT-Chapter 19.\nT-Example 6: Define a User Catalog Using the MODEL Parameter\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095942\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 19. DEFINE USERCATALOG\nN------------------------------\nNExample 6: Define a User Catalog Using the MODEL Parameter\nN----------------------------------------------------------\nD//DEFUCAT6 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    USERCATALOG( -\nD      NAME(USERCAT6) -\nD      VOLUME(VSER03) -\nD      MODEL(USERCAT4 USERCAT4) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE USERCATALOG parameters are:\nN--------------------------------------\nN-> NAME: specifies the user catalog, USERCAT6.\nN\nN-> CYLINDERS: specifies that 3 cylinders are to be allocated for the\nN   catalog. When the catalog is extended, it is in increments of\nN   2 cylinders.\nN\nN-> MODEL: identifies USERCAT4 as the catalog to use as a model for\nN   USERCAT6. The attributes and specifications of USERCAT4 that are\nN   not otherwise specified with the above parameters are used to define\nN   the attributes and specifications of USERCAT6. The master catalog,\nN   AMAST1, contains a user-catalog connector entry that points to\nN   USERCAT4. This is why USERCAT4 is specified as MODEL's catname\nN   subparameter. Values and attributes that apply to USERCAT6 as a\nN   result of using USERCAT4 as a model are:\nN\nN   -> CYLINDERS = 3 (primary) and 2 (secondary) are allocated to the\nN      catalog\nN   -> BUFFERSPACE = 3072 bytes\nN   -> ATTEMPTS = 2\nN   -> NOWRITECHECK\nN   -> CODE is null\nM      CODE cannot be coded anyway.\nN   -> AUTHORIZATION is null\nM      AUTHORIZATION cannot be coded anyway.\nN   -> OWNER is null\nN\nN-> VOLUME: specifies that the user catalog is to reside on volume\nN   VSER03.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1917": {"ttr": 9739, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1917\nTDFSMS AMS\nT-Chapter 19.\nT-Example 7: Define a General Tape Volume Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-095952\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 19. DEFINE USERCATALOG\nN------------------------------\nNExample 7: Define a General Tape Volume Catalog\nN-----------------------------------------------\nD//DEFVCAT7 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    USERCATALOG( -\nD      NAME(TEST1.VOLCAT.VGENERAL) -\nD      CYLINDERS(1 1) -\nD      VOLCATALOG -\nD      VOLUME(VSER03) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE USERCATALOG parameters are:\nN--------------------------------------\nN-> NAME: specifies the name of the tape volume catalog as\nN   TEST1.VOLCAT.VGENERAL. This name determines the catalog to be a\nN   general tape volume catalog.\nN\nN-> CYLINDERS: specifies that 1 cylinders are to be allocated for the\nN   catalog. When the catalog is extended, it is in increments of\nN   1 cylinders.\nN\nN-> VOLCATALOG: specifies that the catalog is to contain only tape\nN   library and tape volume entries.\nN\nN-> VOLUME: specifies that the user catalog is to reside on volume\nN   VSER03.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC1918": {"ttr": 9741, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC1918\nTDFSMS AMS\nT-Chapter 19.\nT-Example 8: Define a Specific Tape Volume Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100003\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 19. DEFINE USERCATALOG\nN------------------------------\nNExample 8: Define a Specific Tape Volume Catalog\nN------------------------------------------------\nD//DEFVCAT8 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    USERCATALOG( -\nD      NAME(TEST1.VOLCAT.VT) -\nD      CYLINDERS(1 1) -\nD      VOLCATALOG -\nD      VOLUME(VSER03) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DEFINE USERCATALOG parameters are:\nN--------------------------------------\nN-> NAME: specifies the name of the tape volume catalog to be\nN   TEST1.VOLCAT.VT. This name determines this catalog to be a specific\nN   tape volume catalog. 'VT' specifies that this catalog will contain\nN   all the tape volume entries whose volume serial numbers begin with\nN   the character 'T'.\nN\nN-> CYLINDERS: specifies that 1 cylinders are to be allocated for the\nN   catalog. When the catalog is extended, it is in increments of\nN   1 cylinders.\nN\nN-> VOLCATALOG: specifies that the catalog is to contain only tape\nN   library and tape volume entries.\nN\nN-> VOLUME: specifies that the user catalog is to reside on volume\nN   VSER03.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC20": {"ttr": 9743, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC20\nTDFSMS AMS\nT-Chapter 20. DELETE\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2001": {"ttr": 9985, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2001\nKMASTERCATALOG\nTDFSMS AMS\nT-Chapter 20.\nT-Syntax for DELETE Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNSyntax for DELETE Parameters\nN----------------------------\nD  DELETE /* Abbreviation: DEL */ -\nN\nNRequired Parameters\nN-------------------\nD    (entryname ...) -\nI      names the entries to be deleted. If more than one entry is to be\nI      deleted, the list of entrynames must be enclosed in parentheses.\nI      The maximum number of entrynames that can be specified is 100. If\nI      the MASK keyword is specified, only one entryname can be\nI      specified. This entryname is also known as the mask filter key.\nI      The command will result in error if there are more than one mask\nI      filter keys specified in one command.\nN\nI      Note that a mask entry name is honored only when a MASK keyword\nI      is specified in the DELETE command.\nN\nI      This parameter must be the first parameter following DELETE.\nN\nI      entryname: is the name of the entry to be deleted. A generic name\nI        can be coded to delete multiple entries with one entryname.\nI        (For example, GENERIC.*.BAKER is a generic name where * is any\nI        1-to-8 character simple name.)\nN\nNOptional Parameters\nN-------------------\nD    ALIAS | -\nD    ALTERNATEINDEX | /* Abbreviation: AIX */ -\nD    CLUSTER | /* Abbreviation: CL */ -\nD    GENERATIONDATAGROUP | /* Abbreviation: GDG */ -\nD    LIBRARYENTRY | /* Abbreviation: LIBENTRY | LIBENT */ -\nD    NONVSAM | /* Abbreviation: NVSAM */ -\nD    NVR | -\nD    PAGESPACE | /* Abbreviation: PGSPC */ -\nD    PATH | -\nD    TRUENAME | /* Abbreviation: TNAME */ -\nD    USERCATALOG | /* Abbreviation: UCAT */ -\nD    VOLUMEENTRY | /* Abbreviation: VOLENTRY | VOLENT */ -\nD    VVR -\nI      specifies the type of object or entry to be deleted. If the\nI      object to be deleted is a catalog, truename entry, or VSAM volume\nI      record, USERCATALOG, TRUENAME, NVR, or VVR is required.\nN\nI      If you delete a migrated data set without specifying the entry\nI      type, DFSMShsm will delete the data set without recalling it.\nN\nI      ALIAS: specifies that the entry to be deleted is an alias entry.\nN\nI      ALTERNATEINDEX /* Abbreviation: AIX */: specifies that the object\nI        to be deleted is an alternate index and its data and index\nI        entries. When a path entry is associated with the alternate\nI        index, the path entry is also deleted.\nN\nI        When the alternate index has the to-be-upgraded attribute and\nI        it is the only such alternate index associated with the base\nI        cluster, the base cluster's upgrade-set entry is also deleted.\nN\nI        Exception: If RLS recovery is associated with the alternate\nI        index, all knowledge of the recovery is lost as part of the\nI        delete operation.\nN\nI      CLUSTER /* Abbreviation: CL */: specifies that the object to be\nI        deleted is a cluster, its associated data and index entries,\nI        and any related paths and alternate indexes.\nN\nI        When deleting a VVDS, entryname must be the restricted name\nN\nI        'SYS1.VVDS.Vvolser'.\nN\nI        Exception: If RLS recovery is associated with the sphere, all\nI        knowledge of the recovery is lost as part of the delete\nI        operation.\nN\nI      GENERATIONDATAGROUP /* Abbreviation: GDG */: specifies that the\nI        entry to be deleted is a generation data group (GDG) entry. To\nI        delete a generation data group that is not empty, you must\nI        specify either the FORCE or the RECOVERY parameter. When FORCE\nI        is used, all SMS managed generation data sets pointed to by the\nI        GDG base are scratched. Generation data sets are also removed\nI        from the catalog when you use FORCE.\nN\nI        For both SMS-managed and non-SMS-managed GDGs, if you use\nI        RECOVERY, the GDG entry is deleted from the catalog and\nI        generation data sets remain unaffected in the VTOC. To delete\nI        a GDG using RECOVERY or FORCE, you must specify both\nI        GENERATIONDATAGROUP and RECOVERY or GENERATIONDATAGROUP and\nI        FORCE.\nN\nI        The FORCE and RECOVERY generation data set parameters require\nI        RACF FACILITY class authorization. For information concerning\nI        RACF authorization levels, search Appendix A, \"Security\nI        Authorization Levels\".\nN\nI      LIBRARYENTRY /* Abbreviation: LIBENTRY | LIBENT */: specifies\nI        that the entry to be deleted is a tape library entry. You must\nI        specify the FORCE parameter to delete a tape library entry that\nI        is not empty. A tape library entry is not empty when tape\nI        volume entries are still associated with it.\nN\nI        To delete a tape library entry, you must have authorization to\nI        RACF FACILITY class profile STGADMIN.IGG.LIBRARY.\nN\nI        Because access method services cannot change the library\nI        manager inventory in an automated tape library, ISMF should be\nI        used for normal tape library delete functions. The access\nI        method services DELETE LIBRARYENTRY command should be used only\nI        to recover from volume catalog errors.\nN\nI      NONVSAM: /* Abbreviation: NVSAM */: specifies that the entry to\nI        be deleted is a cataloged non-VSAM data set entry or object\nI        entry.\nN\nI        If the non-VSAM data set has aliases, all of its alias entries\nI        are deleted when you use the DELETE command.\nN\nI        If the non-VSAM data set is partitioned, you can delete one of\nI        its members by specifying pdsname(membername).\nN\nI        If the non-VSAM data set does not have an entry in a catalog,\nI        you can delete its format-1 DSCB from the VTOC by using the\nI        SCRATCH function of the IEHPROGM utility. See z/OS DFSMSdfp\nI        Utilities.\nN\nM          Contact your System Programmer to do this.\nN\nI        Use this parameter to delete generation data sets (GDSs). You\nI        can rerun the job step to reclaim a GDS that is in deferred\nI        roll-in state, if GDS reclaim processing is enabled (it is\nI        enabled by default). For more information about GDS reclaim\nI        processing, see z/OS DFSMSdfp Storage Administration. SMS does\nI        not support temporary non-VSAM data sets.\nN\nI        Exception: You can use RACF commands to specify an ERASE\nI        attribute in a generic or discrete profile for a non-VSAM data\nI        set. Use of the attribute renders all allocated DASD tracks\nI        unreadable before space on the volume is made available for\nI        reallocation. Refer to the appropriate RACF publications for\nI        information about how to specify and use this facility.\nN\nI      NVR: specifies that the object to be deleted is an SMS-managed\nI        non-VSAM volume record (NVR) entry. This parameter must be\nI        specified to delete an NVR from a VSAM volume data set (VVDS)\nI        and its corresponding record from the VTOC. The NVR/VTOC\nI        entries are deleted only if the related non-VSAM object catalog\nI        entry does not exist.\nN\nI        Similar to DELETE VVR, the FILE parameter must specify the DD\nI        statement name that identifies the volume containing the VVDS.\nI        If you select a catalog through alias orientation or by use of\nI        the catalog parameter, it must match the catalog name in the\nI        isolated NVR (unless you have read authority to the RACF\nI        FACILITY class STGADMIN.IGG.DLVVRNVR.NOCAT).\nN\nI      PAGESPACE /* Abbreviation: PGSPC */: specifies that an inactive\nI        page space is to be deleted. A page space is identified as\nI        \"active\" during the operator's IPL procedure. To delete a page\nI        space in an SMS-managed user catalog you must include the\nI        CATALOG parameter.\nN\nI      PATH: specifies that a path entry is to be deleted. No entries\nI        associated with the path are deleted.\nN\nI      TRUENAME /* Abbreviation: TNAME */: specifies that the object to\nI        be deleted is the truename entry for a data or index component\nI        of a cluster or alternate index, or the name of an alternate\nI        index. This parameter must be specified to delete a truename\nI        entry. The truename entry is deleted only if the associated\nI        base record is missing or is inaccessible.\nN\nI      USERCATALOG /* Abbreviation: UCAT */: specifies that the object\nI        to be deleted is a user catalog.\nN\nI        See the CATALOG(catname) parameter for deleting a specific\nI        catalog. Specify USERCATALOG only when you want to delete the\nI        entire CATALOG.\nN\nI        The catalog connector entry in the master catalog is deleted.\nI        If the user catalog has aliases, all the catalog's alias\nI        entries in the master catalog are deleted.\nN\nI        To delete a user catalog when it is empty (that is, it contains\nI        only its self-describing entries and its volume's VVDS entry),\nI        you must specify USERCATALOG. To delete a user catalog that is\nI        not empty, you must specify both USERCATALOG and FORCE.\nN\nI        If you are deleting the catalog as part of recovering from a\nI        backup copy, you may want to use the RECOVERY option instead.\nI        For more information, see the RECOVERY keyword.\nN\nI        You can set up your system so that when you specify RECOVERY\nI        with DELETE USERCATALOG, the system issues WTOR message\nI        IDC1999I requesting confirmation before deleting user catalogs.\nI        Use the modify command to enable or disable this WTOR feature\nI        as follows: F CATALOG,ENABLE(DELRECOVWNG) or\nI        F CATALOG,DISABLE(DELRECOVWNG). By default, the WTOR is\nI        disabled. See the MODIFY command in z/OS MVS System Commands.\nN\nI      VOLUMEENTRY /* Abbreviation: VOLENTRY | VOLENT */: specifies that\nI        the entry to be deleted is a tape library volume.\nN\nI        To delete a tape volume entry, you must have authorization to\nI        RACF FACILITY class profile STGADMIN.IGG.LIBRARY. Because\nI        access method services cannot change the library manager\nI        inventory in an automated tape library, ISMF should be used\nI        for normal tape library delete functions. The access method\nI        services DELETE VOLUMEENTRY command should be used only to\nI        recover from volume catalog errors.\nN\nI      VVR: specifies that the objects to be deleted are one or more\nI        unrelated VSAM volume record (VVR) entries. To delete a VVR\nI        from both the VSAM volume data set (VVDS) and from the VTOC,\nI        you must specify this parameter.\nN\nI        The VVR entry is deleted only if the related cluster or\nI        alternate-index data and index component catalog entries do\nI        not exist. When VVR is specified, the component name of the\nI        cluster or alternate-index to which the VVR was once related\nI        must be specified in the entryname parameter. If you select a\nI        catalog through alias orientation or by use of the catalog\nI        parameter, it must match the catalog name in the isolated VVR\nI        (unless you have read authority to the RACF FACILITY class\nI        STGADMIN.IGG.DLVVRNVR.NOCAT).\nN\nI        The FILE parameter must specify the DD statement name that\nI        identifies the volume on which the VVDS resides.\nN\nD    ERASE | NOERASE /* Abbreviations: ERAS and NERAS */ -\nI      specifies whether the components of a cluster or alternate index\nI      to be deleted are to be erased (overwritten with binary zeros).\nI      This parameter overrides whatever was coded when the cluster or\nI      alternate index was defined or last altered. Specify this\nI      parameter only when a cluster or an alternate index entry is to\nI      be deleted.\nN\nI      If you use ERASE, one of the following conditions must be true:\nN\nI      -> The entry is in the master catalog.\nN\nI      -> The qualifiers in the entry's qualified name are the catalog's\nI         name or alias.\nN\nI      ERASE /* Abbreviation: ERAS */: specifies that the components are\nI         to be overwritten with binary zeros when the cluster or\nI         alternate index is deleted. If ERASE is specified, the volume\nI         that contains the data component must be mounted.\nN\nI        If the cluster is protected by a RACF generic or discrete\nI         profile and the cluster is cataloged in a catalog, use RACF\nI         commands to specify an ERASE attribute as part of this profile\nI         so that the data component is automatically erased upon\nI         deletion.\nN\nI      NOERASE /* Abbreviation: NERAS */: specifies that the components\nI         are not to be overwritten with binary zeros when the cluster\nI         or alternate index is deleted.\nN\nI        NOERASE will not prevent the component from being erased if the\nI         cluster is protected by a RACF generic or discrete profile\nI         that specifies the ERASE attribute and the cluster is\nI         cataloged in a catalog. You can use RACF commands to alter the\nI         ERASE attribute in a profile.\nN\nD    FILE(ddname) -\nI      specifies the name of the DD statement that identifies:\nN\nI      -> The volume that contains a data set to be deleted with\nI         SCRATCH.\nN\nI      -> The data set to be deleted if ERASE is specified.\nN\nI      -> The partitioned data set from which a member (or members) is\nI         to be deleted.\nN\nI      -> The volumes that contain VVDS entries for the objects\nI         cataloged.\nN\nI      -> The VVDS volume that contains a VVR or NVR to be deleted.\nN\nI      Use of the FILE parameter improves the performance of the DELETE\nI      command.\nN\nI      When you delete a data set, the volume referred to in the DD\nI      statement must be the same as the volume referred to in the\nI      usercatalog.\nN\nI      If you do not specify FILE and VSAM requires access to a volume\nI      or volumes during the delete processing, VSAM tries to\nI      dynamically allocate the volumes. When the entryname is\nI      pdsname(membername) VSAM dynamically allocate the entire PDS\nI      rather then the pdsname(member).\nN\nI      When more than one volume is to be identified (for example, a\nI      multivolume data set), FILE identifies the DD statement that\nI      specifies all volumes. If in any of the above cases the volumes\nI      are of a different device type, use concatenated DD statements.\nI      All volumes that contain associations to a cluster being deleted\nI      must also be included on the DD statement referenced by the FILE\nI      parameter.\nN\nI      When deleting multivolume non-VSAM data sets with the SCRATCH\nI      option, DELETE SCRATCH processing requires access to each volume\nI      in the entry's catalog record before the scratch can be issued.\nI      This requires either all volumes to be mounted, online, and\nI      allocatable to the job, or the use of the FILE parameter\nI      specifying a DD statement allocating at least one mountable unit\nI      (not permanently resident or reserved). Deferred mount must be\nI      specified on the DD statement so that allocation will flag the\nI      UCB to allow remove/mount requests to be issued for the unit as\nI      required during delete processing. If access to the volumes\nI      cannot be provided, use DELETE NOSCRATCH to uncatalog the\nI      non-VSAM data set and the user will assume the responsibility of\nI      scratching the format-1 DSCBs from all the volumes. If RACF is\nI      installed, you must have access authority under RACF to specify\nI      DELETE NOSCRATCH.\nN\nI      When the FILE parameter points to a DD statement that has\nI      DISP=SHR the data set can be deleted when allocated to another\nI      user, but is not open.\nN\nI      The use of this DD name in subsequent commands in the same\nI      invocation of IDCAMS may not work properly. Specifically, DEFINE,\nI      BLDINDEX, REPRO, and IMPORT may fail if these commands refer to\nI      the same DD name for output from those commands. This is because\nI      those commands will use volume and device-related information\nI      that may no longer be applicable. BLDINDEX, REPRO, and IMPORT\nI      should use the OUTDATASET keyword instead of OUTFILE to avoid\nI      this problem.\nN\nM      Required when deleting a VVR entry.\nN\nD    FORCE | NOFORCE /* Abbreviations: FRC and NFRC */ -\nI      specifies whether entries that are not empty should be deleted.\nN\nI      FORCE/* Abbreviation: FRC */: lets you delete generation data\nI        groups, tape library entries, and user catalogs without first\nI        ensuring that these entries are empty.\nN\nI        Attention: The FORCE parameter deletes all clusters in the\nI        catalog.\nN\nI        If you delete a generation data group using FORCE:\nN\nI        -> Proper access authority to the RACF resource for catalog\nI           functions is necessary for DELETE GDG FORCE. The\nI           DELETE GDG FORCE function should not be used to redefine\nI           the GDG limit value. ALTER LIMIT should be used instead.\nN\nI        -> The GDG entry is deleted even though it might point to\nI           non-VSAM entries in the catalog.\nN\nI        -> Each SMS-managed non-VSAM data set entry pointed to by the\nI           GDG base entry is deleted before the GDG base entry is\nI           deleted. The non-VSAM data set is scratched.\nN\nI        -> Each non-SMS-managed non-VSAM data set entry pointed to by\nI           the GDG base entry is deleted before the GDG base entry is\nI           deleted.\nN\nI           However, the non-VSAM data set's space and contents on the\nI           volume are undisturbed.\nN\nI        -> No VVDSs are deleted\nN\nI        If you delete a tape library entry using FORCE:\nN\nI        -> The tape library entry is deleted even if tape volume\nI           entries are still associated with the specified tape\nI           library.\nN\nI        -> Any tape volume entries associated with a deleted tape\nI           library entry will remain in the catalog for these tape\nI           volume entries.\nN\nI        If you delete a user catalog using FORCE:\nN\nI          Attention: The FORCE parameter deletes all clusters in the\nI          catalog.\nN\nI        -> The user catalog is deleted even if it contains entries for\nI           objects that have not been deleted.\nN\nI        -> All data sets cataloged in the user catalog as well as the\nI           catalog data set itself are deleted. All volumes on which\nI           these data sets reside must be included with the FILE\nI           parameter.\nN\nI        -> All VSAM clusters are automatically deleted, but the\nI           contents of each cluster and alternate index are not erased.\nI           (If you specify FORCE, the ERASE parameter is ineffective.)\nN\nI        -> SMS-managed non-VSAM data set entries in the user catalog\nI           are deleted and the data sets are scratched.\nN\nI        -> Non-SMS-managed non-VSAM data set entries in the user\nI           catalog are deleted, but the data sets are not scratched.\nI           A non-SMS-managed non-VSAM data set can be located with its\nI           DSCB in the volume's VTOC.\nN\nI      NOFORCE /* Abbreviation: NFRC */: causes the DELETE command to\nI        end when you request the deletion of a generation data group,\nI        tape library entry, or user catalog that is not empty.\nN\nD    MASK | NOMASK -\nI      when you specify the associated filter service rules to be used\nI      for the entry-name (also called filter key). Use the MASK keyword\nI      to specify a single entryname which is a filter key that\nI      identifies the entries to be deleted.\nN\nI      MASK: The MASK keyword cannot be specified with the following\nI        keywords:\nN\nI        -> TRUENAME (TRUENAME)\nN\nI        -> Non-VSAM Volume record (NVR)\nN\nI        -> VSAM Volume Record (VVR)\nN\nI        -> PDSE/PDS member data set\nN\nI        -> Library Entry (LIBRARYENTRY)\nN\nI        -> Tape Volume entry (VOLUMEENTRY)\nN\nI        The DELETE MASK command allows only one entry-name to be\nI        specified. If there are multiple entry-names specified, the\nI        request will fail with error messages.\nN\nI        Specifying MASK results in the entry name being passed to\nI        Common Filter Services which is different from the generic\nI        processing utilized by the default NOMASK. Adding MASK to an\nI        existing entryname can produce different results in the data\nI        sets deleted. See Catalog Search Interface User's Guide in\nI        z/OS DFSMS Managing Catalogs for more information regarding\nI        data set name filter keys.\nN\nI      NOMASK: Indicates the DELETE command contains generic filter\nI        keys. This is the default.\nN\nD    PURGE | NOPURGE /* Abbreviations: PRG and NPRG */ -\nI      specifies whether the entry is to be deleted regardless of the\nI      retention period specified. If this parameter is used for objects\nI      that do not have a date associated with them (for example, VVRs,\nI      aliases, and non-SMS-managed non-VSAM data sets), the\nI      PURGE|NOPURGE parameter is ignored and the object is deleted.\nI      This parameter cannot be used if a truename entry is to be\nI      deleted.\nN\nI      PURGE must be specified to delete an OAM non-VSAM entry, because\nI      it has a never-expire retention.\nN\nI      PURGE /* Abbreviation: PRG */:  specifies that the entry is to\nI        be deleted even if the retention period, specified in the TO\nI        or FOR parameter, has not expired. When deleting a tape library\nI        volume entry, PURGE must be specified if the volume's retention\nI        period has not expired.\nN\nI        PURGE works the same way for migrated objects as it does for\nI        non-migrated objects. PURGE overrides any DFSMShsm control over\nI        the deletion of VSAM base clusters and non-VSAM data sets. It\nI        causes the migrated data set to be deleted regardless of the\nI        expiration date.\nN\nI      NOPURGE /* Abbreviation: NPRG */: specifies that the entry is not\nI        to be deleted if the retention period has not expired.\nN\nD    RECOVERY | NORECOVERY /* Abbreviations: RCVRY and NRCVRY */ -\nI      specifies whether a user catalog, a VSAM volume data set (VVDS),\nI      or a generation data group (GDG) is to be deleted in preparation\nI      for recovery.\nN\nI      RECOVERY /* Abbreviation: RCVRY */: When RECOVERY is specified\nI        and the entry name identifies a user catalog, the user catalog\nI        is to be replaced with an imported backup copy. The user\nI        catalog, its VSAM volume record (VVR), and its VTOC entries\nI        are deleted. The VVR and DSCBs, for each of the objects defined\nI        in the user catalog, are not deleted or scratched. If the\nI        catalog is RACF-protected, alter authority is required.\nN\nI        VSAM must be able to read the VVDS or be able to process it as\nI        an ESDS for the function to complete successfully.\nN\nI        When RECOVERY is specified and entryname identifies a VVDS,\nI        the VVDS is unusable or inaccessible and must be rebuilt by\nI        deleting, redefining, and loading the appropriate VSAM data\nI        sets on the volume. The VVDS entry's DSCB will be scratched\nI        from the VTOC. The CATALOG parameter must contain the name of\nI        the master catalog when a VVDS is deleted with the RECOVERY\nI        parameter. If RACF protected, ALTER authority is required.\nN\nI        When RECOVERY is specified and the entry name identifies a GDG,\nI        the SMS-managed or non-SMS-managed GDG entry is deleted from\nI        the catalog and generation data sets remain unaffected in the\nI        VTOC.\nN\nI        If a VVDS contains a catalog entry or a system data set (SYS1.)\nI        entry that is cataloged in a master catalog, the VVDS catalog\nI        entry and the DSCB of the associated VVDS will not be removed.\nN\nI        If you delete a generation data group (DELETE GDG RECOVERY)\nI        using RECOVERY, proper authority to the RACF resource for\nI        catalog function is necessary.\nN\nI        See the USERCATALOG parameter for information about using\nI        RECOVERY with\nM        IBM failed to finish that thought!\nN\nI      NORECOVERY /* Abbreviation: NRCVRY */: indicates that the entry\nI        is to be processed as described by the other parameters\nI        specified.\nN\nD    SCRATCH | NOSCRATCH /* Abbreviations: SCR and NSCR */ -\nI      specifies whether a data set is to be removed from the VTOC of\nI      the volume on which it resides. This parameter can be specified\nI      only for a cluster, an alternate index, a page space, or a\nI      non-VSAM data set.\nN\nI      Exception:\nN\nI      -> The SCRATCH parameter is not applicable to tape library and\nI         tape volume entries because they have no VVDS or VTOC entries.\nI         IDCAMS DELETE will determine if the data set to be deleted is\nI         a tape data set and issue the NOSCRATCH option on the delete\nI         request. For a data set on tape, using the NONVSAM parameter\nI         with a fully qualified entryname might cause dynamic\nI         allocation of the data set, and therefore a tape mount. To\nI         avoid the tape mount in this situation, either specify\nI         NOSCRATCH or omit NONVSAM.\nN\nI      -> If data set contains indirect or symbolic VOLSER, the scratch\nI         parameter will be ignored, if specified.\nN\nI      SCRATCH /* Abbreviation: SCR */: specifies that a data set is to\nI        be scratched from (removed from the VTOC of) the volume on\nI        which it resides. For VSAM data sets and SMS-managed non-VSAM\nI        data sets, the VSAM volume data set (VVDS) entry is also\nI        removed.\nN\nI        DELETE SCRATCH will ignore any missing data set components\nI        (such as VVRs or F1 DSCBs) and will scratch all the data set\nI        parts that can be found at the time the request is issued.\nN\nI        When SCRATCH is specified for a VVDS, the VVDS is scratched and\nI        the catalog entry for the VVDS is removed. The VVDS must be\nI        empty.\nN\nI        If the catalog entry does not exist for a non-VSAM data set,\nI        you can use the SCRATCH function of the OS/VS IEHPROGM utility\nI        to remove the format-1 DSCB from the VTOC.\nN\nM          Contach your System Programmer to do this.\nN\nI        If you select SCRATCH, one of the following statements must be\nI        true:\nN\nI        -> The entry is in the master catalog.\nN\nI        -> One or more of the qualifiers in the entry's qualified name\nI           is the same as the catalog's name or alias.\nN\nI        -> The FILE parameter is specified.\nN\nI        If you specify SCRATCH when deleting a non-VSAM data set\nI        defined with an esoteric device type, SYSDA for example, the\nI        DELETE will be unsuccessful under the following circumstances:\nN\nI        -> Input/output configuration is changed resulting in addition\nI           or deletion of one or more esoteric device types.\nN\nI        -> The esoteric device type definitions on the creating and\nI           using systems do not match when the catalog is shared\nI           between the two systems.\nN\nI        Note: If the VVDS indicates that the data set is owned by a\nI        catalog other than that catalog identified through the usual\nI        catalog search order for DELETE, a DELETE NOSCRATCH is done\nI        against the catalog that resulted from the catalog search, and\nI        a zero return code is returned to the user. For example, if\nI        you specify a DELETE SCRATCH command against a data set in\nI        Catalog A, and the VVDS indicates that the data set is owned\nI        by Catalog B, a DELETE NOSCRATCH operation is done against\nI        Catalog A, and the data set remains intact and accessible from\nI        Catalog B. Search \"Catalog Search Order for DELETE\" for\nI        information on the catalog search order for DELETE.\nN\nI      NOSCRATCH /* Abbreviation: NSCR */: specifies that the catalog\nI        entry is to be deleted from the catalog without mounting the\nI        volume that contains the object defined by the entry. VVDS and\nI        VTOC entries are not deleted.\nN\nI        If RACF is installed, you must have access authority under\nI        RACF to specify NOSCRATCH. With proper authority,\nI        DELETE NOSCRATCH is allowed on SMS-managed VSAM and non-VSAM\nI        data sets, thus deleting the BCS entry in the catalog without\nI        accessing the VVDS or VTOC.\nN\nI        Attention:\nN\nI        -> DELETE NOSCRATCH can result in uncataloged SMS-managed data\nI           sets.\nN\nI        -> DELETE NOSCRATCH cannot be issued against a VSAM data set\nI           which is currently open.\nN\nI        For more information on cloning zFS, see the VOLUMES parameter\nI        in Access Method Services DEFINE CLUSTER command in z/OS DFSMS\nI        Access Method Services for Catalogs.\nN\nI        NOSCRATCH removes the catalog entry for a VVDS. This entry can\nI        be reinstated with DEFINE RECATALOG. If the volume is mounted\nI        and usable, the VVDS is checked to ensure that the catalog\nI        entry being removed has no data sets in the VVDS. If the\nI        catalog entry indicates there are data sets in the VVDS, the\nI        VVDS's VSAM volume control record (VVCR) is removed and the\nI        catalog entry for the VVDS is removed.\nN\nI        If the volume is mounted and you specify NOSCRATCH for a VSAM\nI        volume data set (VVDS), the catalog entry for the VVDS is\nI        removed, and the catalog back pointer in the VSAM volume\nI        control record (VVCR) is removed.\nN\nI        You should specify NOSCRATCH for the following:\nN\nI        -> If the format-1 DSCB of a non-VSAM data set has already been\nI           scratched from the VTOC.\nN\nI        -> If you are deleting a non-VSAM data set that was defined\nI           with a device type named by the user (for example, SYSDA)\nI           and the device type is not valid.\nN\nI        -> If the object is defined in a catalog and you want to\nI           recatalog the object in the same catalog.\nN\nI        -> After you convert a volume, the names of catalogs owning\nI           data sets on the volume will still be in the VVCR. Only\nI           catalogs that reside on the converted volume need to have\nI           their names in the VVCR. You can remove unneeded catalog\nI           names from the VVCR by using DELETE VVDS NOSCRATCH with the\nI           CATALOG parameter referencing the catalog to be deleted from\nI           the VVCR. For coexistence, an error indication is still\nI           returned if there are VVR or NVRs on the volume for the\nI           referenced catalog.\nN\nI        -> NOSCRATCH affects the DFSMShsm delete function interaction\nI           for VSAM base clusters and non-VSAM data sets. It causes\nI           the migrated data set to be recalled because a migrated\nI           data set cannot be uncataloged.\nN\nD    ) /* - */\nN\nM    CATALOG(mastercatname) /* Abbreviation: CAT */\nI      Specifies the name of the catalog that contains the entries to\nI      be deleted. Search \"Catalog Search Order for DELETE\" for the\nI      order in which catalogs are searched.\nN\nI      This parameter cannot be used to delete a user catalog, and is\nI      ignored when you delete members of a partitioned data set or the\nI      tape library entry. To specify catalog names for SMS-managed data\nI      sets, you must have authority from the RACF STGADMIN.IGG.DIRCAT\nI      FACILITY class. Search \"Storage Management Subsystem (SMS)\nI      Considerations\" for more information.\nN\nI      catname: identifies the catalog that contains the entry to be\nI        deleted.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2011": {"ttr": 10241, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2011\nTDFSMS AMS\nT-Chapter 20.\nT-Example 1: Delete a Truename Entry in a Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100455\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 1: Delete a Truename Entry in a Catalog\nN-----------------------------------------------\nD//DELETE1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    K101.AIX.DATA -\nD    TRUENAME\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> K101.AIX.DATA: is the entryname of the alternate index's data\nN   component to be deleted.\nN\nN-> TRUENAME: specifies the type of entry to be deleted. When a truename\nN   entry is to be deleted, the TRUENAME parameter is required.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2012": {"ttr": 10243, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2012\nTDFSMS AMS\nT-Chapter 20.\nT-Example 2: Delete a User Catalog for Recovery\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100506\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 2: Delete a User Catalog for Recovery\nN---------------------------------------------\nD//DELETE2  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    USERCAT4 -\nD    FILE(DD1) -\nD    RECOVERY -\nD    USERCATALOG\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DD1       DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=VSER01\nN\nNThe JCL statements are:\nN-----------------------\nN-> DD1: specifies the VOLSER where the usercatalog resides.\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> USERCAT4: is the name of the catalog.\nN\nN-> FILE: specifies the ddname of a DD statement that describes the user\nN   catalog's volume and causes it to be mounted.\nN\nN-> RECOVERY: specifies that only the catalog data set is deleted\nN   without deleting the objects defined in the catalog.\nN\nN-> USERCATALOG: specifies that the entryname identifies a user catalog.\nN   When a user catalog is to be deleted, the USERCATALOG parameter is\nN   required.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2013": {"ttr": 10245, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2013\nTDFSMS AMS\nT-Chapter 20.\nT-Example 3: Delete VSAM Volume Records\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100517\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 3: Delete VSAM Volume Records\nN-------------------------------------\nD//DELETE3  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    EXAMPLE.KSDS01.DATA -\nD    FILE(DD1) -\nD    VVR\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DD1       DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=VSER01\nN\nNThe JCL statements are:\nN-----------------------\nN-> DD1: specifies the VOLSER where the DATA component resides.\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> EXAMPLE.KSDS01.DATA: is the name of the data component of the\nN   cluster.\nN\nN-> FILE: specifies the ddname of a DD statement that describes the\nN   data component's volume and causes it to be mounted.\nN\nN-> VVR: specifies that only the VVRs for the cluster are to be deleted.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2014": {"ttr": 10247, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2014\nTDFSMS AMS\nT-Chapter 20.\nT-Example 4: Delete a Non-VSAM Data Set's Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100527\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 4: Delete a Non-VSAM Data Set's Entry\nN---------------------------------------------\nMTruthfully, we are letting AMS delete whatever type of entry it is.\nN\nD//DELETE4  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    EXAMPLE.NONVSAM -\nD    FILE(DD1) -\nD    PURGE\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DD1       DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=VSER01\nN\nNThe JCL statements are:\nN-----------------------\nN-> DD1: specifies the VOLSER where the data set resides.\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> EXAMPLE.NONVSAM: is the entryname of the object to be deleted.\nN\nN-> FILE: specifies the ddname of a DD statement that describes the\nN   non-VSAM data set's volume and causes it to be mounted. When the\nN   data set is deleted, its DSCB entry in the volume's VTOC is removed.\nN\nN-> PURGE: specifies that the non-VSAM data set's retention\nN   period or date is to be ignored.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2015": {"ttr": 10249, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2015\nTDFSMS AMS\nT-Chapter 20.\nT-Example 5: Delete Entries Associated with a Non-VSAM Object from VVDS\nTand VTOC\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100538\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 5: Delete Entries Associated with a Non-VSAM Object\nNfrom VVDS and VTOC\nN-----------------------------------------------------------\nD//DELETE5  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    EXAMPLE.NONVSAM -\nD    FILE(DD1) -\nD    NVR\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DD1       DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=VSER01\nN\nNThe JCL statements are:\nN-----------------------\nN-> DD1: specifies the VOLSER where the data set resides.\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> EXAMPLE.NONVSAM: the name of the non-VSAM object. There must not\nN   be a BCS entry for this object.\nN\nN-> FILE: specifies the ddname of a DD statement that describes the\nN   volume containing the VVDS entry associated with this object.\nN\nN-> NVR: specifies that only the NVR and its corresponding VTOC entry\nN   for this object are to be deleted.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2016": {"ttr": 10251, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2016\nTDFSMS AMS\nT-Chapter 20.\nT-Example 6: Delete a Key-Sequenced VSAM Cluster\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100551\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 6: Delete a Key-Sequenced VSAM Cluster\nN----------------------------------------------\nMTruthfully, we are letting AMS delete whatever type of entry it is.\nN\nD//DELETE6  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    EXAMPLE.KSDS01 -\nD    FILE(DD1) -\nD    PURGE -\nD    ERASE\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DD1       DD DISP=OLD,DSNAME=EXAMPLE.KSDS01,\nD//             UNIT=SYSALLDA,VOL=SER=VSER01\nN\nNThe JCL statements are:\nN-----------------------\nN-> DD1: specifies the VOLSER where the cluster resides.\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> EXAMPLE.KSDS1: which is a key-sequenced VSAM cluster, is the\nN   entryname of the object being deleted.\nN\nN-> FILE: is not required but improves performance if specified.\nN\nN-> PURGE: specifies that the cluster is to be deleted regardless of\nN   its retention period or date.\nN\nN-> ERASE: specifies that the cluster's data component be overwritten\nN   with binary zeros. If the NOERASE attribute was specified when the\nN   cluster was defined or altered, this is ignored.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2017": {"ttr": 10253, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2017\nTDFSMS AMS\nT-Chapter 20.\nT-Example 7: Delete Two Key-Sequenced Clusters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100827\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 7: Delete Two Key-Sequenced Clusters\nN--------------------------------------------\nD//DELETE7  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    ( -\nD      EXAMPLE.KSDS01 -\nD      EXAMPLE.KSDS02 -\nD    ) -\nD    PURGE -\nD    CLUSTER\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> EXAMPLE.KSDS01 and\nN-> EXAMPLE.KSDS02: identify the objects to be\nN   deleted. These are the entrynames of two key-sequenced clusters.\nN\nN-> PURGE: specifies that the cluster be deleted regardless of its\nN   retention period or date.\nN\nN-> CLUSTER: specifies that EXAMPLE.KSDS01 and EXAMPLE.KSDS02 identify\nN   cluster catalog records.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2018": {"ttr": 10255, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2018\nTDFSMS AMS\nT-Chapter 20.\nT-Example 8: Delete a User Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100837\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 8: Delete a User Catalog\nN--------------------------------\nD//DELETE8  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    XXXUCAT1 -\nD    PURGE -\nD    USERCATALOG\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> XXXUCAT1: is the name of the user catalog.\nN\nN-> PURGE: indicates the user catalog's retention period or date is to\nN   be ignored. If PURGE is not specified and the catalog's retention\nN   period has not yet expired, the catalog will not be deleted.\nN\nN-> USERCATALOG: identifies XXXUCAT1 as a user catalog.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2019": {"ttr": 10257, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2019\nTDFSMS AMS\nT-Chapter 20.\nT-Example 9: Delete an Alias Entry in a Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100848\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 9: Delete an Alias Entry in a Catalog\nN---------------------------------------------\nMModified by Kenneth Tomiak to better reflect the example's description.\nN\nD//DELETE9  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    PROD -\nD    ALIAS -\nD    CATALOG(MSTRCAT)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> PROD: is the name of the ALIAS entry.\nN\nN-> ALIAS: specifies the type of entry to be deleted. AMS verifies that\nN   PROD is an alias entry and then deletes it. If PROD identifies\nN   any other entry, AMS does not delete the entry, but notes the\nN   discrepancy with a message to the programmer.\nN\nN-> CATALOG: identifies the catalog containing the entry, MSTRCAT.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2020": {"ttr": 10259, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2020\nTDFSMS AMS\nT-Chapter 20.\nT-Example 10: Delete Generically Named Entries\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100901\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 10: Delete Generically Named Entries\nN--------------------------------------------\nD//DELETE10 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    GENERIC.*.BAKER\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> GENERIC.*.BAKER: a generic name, identifies all catalog entries with\nN   three levels in the name, the high-level qualifier GENERIC, and the\nN   low-level qualifier BAKER.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2021": {"ttr": 10261, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2021\nTDFSMS AMS\nT-Chapter 20.\nT-Example 11: Delete a Generation Data Group's Entries\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100922\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 11: Delete a Generation Data Group's Entries\nN----------------------------------------------------\nMModified by Kenneth Tomiak.\nN\nD//DELETE11 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTCAT -\nD    ENTRIES(GDG01) -\nD    ALL\nD  DELETE -\nD    GDG01.* -\nD    NONVSAM\nD  DELETE -\nD    GDG01 -\nD    GENERATIONDATAGROUP\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe LISTCAT parameters are:\nN---------------------------\nN-> ENTRIES(GDG01): specifies that the entries named GDG01 be listed.\nN   Because GDG01 is a generation data group entry, its associated\nN   generation data set's (non-VSAM) entries are also listed. If one of\nN   the generation data sets has aliases, the alias entries associated\nN   with the generation data set's entry are also listed.\nn\nN-> ALL: specifies that all fields are to be listed.\nn\nNThe first DELETE parameters are:\nN--------------------------------\nM-> GDG01: a generic name, identifies all generation data set entries\nM    with two levels in the name and the high-level qualifier GDG01.\nN\nM-> NONVSAM: ensures the entries are the desired type.\nN\nNThe second DELETE parameters are:\nN---------------------------------\nN-> GDG01: is the entryname of the object being deleted. GDG01\nN   identifies the generation data group base entry.\nN\nN-> GENERATIONDATAGROUP: specifies the type of entry being deleted. AMS\nN   verifies that GDG01 is a generation data group entry, then deletes\nN   it. If GDG01 incorrectly specifies another type of entry, AMS does\nN   not delete the entry, but notes the discrepancy with a message to\nN   the programmer.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2022": {"ttr": 10497, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2022\nTDFSMS AMS\nT-Chapter 20.\nT-Example 12: Delete a Generation Data Group with Recovery\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100931\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 12: Delete a Generation Data Group with Recovery\nN--------------------------------------------------------\nD//DELETE12 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    GDG01 -\nD    RECOVERY -\nD    GENERATIONDATAGROUP\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> GDG01: is the entryname of the object being deleted. GDG01\nN   identifies the generation data group base entry.\nN\nN-> RECOVERY: specifies that only the GDG base entry name in the\nN   catalog is deleted. Its associated generation data sets remain\nN   intact in the VTOC.\nN\nM   This makes the catalog and VTOC messy!\nN\nN-> GENERATIONDATAGROUP: specifies the type of entry being deleted. AMS\nN   verifies that GDG01 is a generation data group entry, then deletes\nN   it. If GDG01 incorrectly specifies another type of entry, AMS does\nN   not delete the entry, but notes the discrepancy with a message to\nN   the programmer.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2023": {"ttr": 10499, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2023\nTDFSMS AMS\nT-Chapter 20.\nT-Example 13: Delete a Member of a Partitioned Data Set\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100941\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 13: Delete a Member of a Partitioned Data Set\nN-----------------------------------------------------\nD//DELETE13 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    EXAMPLE.NONVSAM2(MEM1)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> EXAMPLE.NONVSAM2(MEM1): is the entryname of a member of the\nN   partitioned data set, EXAMPLE.NONVSAM2. The entryname identifies\nN   the member to be deleted.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2024": {"ttr": 10501, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2024\nTDFSMS AMS\nT-Chapter 20.\nT-Example 13A: Delete a Member of a Partitioned Data Set with DISP=SHR\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-100952\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 13A: Delete a Member of a Partitioned Data Set with DISP=SHR\nN--------------------------------------------------------------------\nD//DELET13A JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    EXAMPLE.NONVSAM2(MEM1) -\nD    FILE(PDS)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//PDS       DD DISP=SHR,DSN=EXAMPLE.NONVSAM2\nN\nNThe JCL Statements are:\nN-----------------------\nN-> PDS: allocates the NONVSAM data set with a disposition of SHR.\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> EXAMPLE.NONVSAM2(MEM1): is the entryname of a member of the\nN   partitioned data set, EXAMPLE.NONVSAM2. The entryname identifies\nN   the member to be deleted.\nN\nN-> FILE(PDS): points to the DD statement PDS which allocates the data\nN   set with SHR to the job, hence avoiding dynamic allocation with OLD\nN   of the entire PDS.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2025": {"ttr": 10503, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2025\nTDFSMS AMS\nT-Chapter 20.\nT-Example 13B: Delete all members of a Partitioned Data Set\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101054\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 13B: Delete all members of a Partitioned Data Set\nN---------------------------------------------------------\nD//DELET13B JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    EXAMPLE.NONVSAM2(*)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> EXAMPLE.NONVSAM2(*): is the entryname that includes members of the\nN   partitioned data set, EXAMPLE.NONVSAM2. The entryname identifies\nN   the object to be deleted.\nN\nM   All members will be deleted.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2026": {"ttr": 10505, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2026\nTDFSMS AMS\nT-Chapter 20.\nT-Example 14: Delete a Page Space\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101105\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 14: Delete a Page Space\nN-------------------------------\nD//DELETE14 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    SYS1.PAGE2 -\nD    PAGESPACE\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> SYS1.PAGE2: is the entryname of the object being deleted.\nN   SYS1.PAGE2 identifies a page space entry.\nN\nN-> PAGESPACE: specifies the type of entry being deleted. AMS verifies\nN   that SYS1.PAGE2 is a page space entry, then deletes it. If\nN   SYS1.PAGE2 incorrectly identifies another type of entry, AMS does\nN   not delete it, but sends an error message to the programmer.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2027": {"ttr": 10507, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2027\nTDFSMS AMS\nT-Chapter 20.\nT-Example 15: Delete a VVDS with Recovery\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101116\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 15: Delete a VVDS with Recovery\nN---------------------------------------\nD//DELETE15 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    SYS1.VVDS.V338001 -\nD    FILE(DD1) -\nD    RECOVERY\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DD1       DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=338001\nN\nNThe JCL statements are:\nN-----------------------\nN-> DD1: statement that both describes the VVDS volume and causes it\nN   to be mounted.\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> SYS1.VVDS.V338001: is the name of the VVDS.\nN\nN-> FILE: specifies the name of a DD statement.\nN\nN-> RECOVERY: specifies that the VVDS entry is being deleted from the\nN   VTOC as part of a recovery operation.\nN\nM   IBM's text for this example both claims the VTOC entry will remain\nM   intact and that it will be deleted. Only one of those can be true.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2028": {"ttr": 10509, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2028\nTDFSMS AMS\nT-Chapter 20.\nT-Example 16: Delete an OAM Collection Name\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101126\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 16: Delete an OAM Collection Name\nN-----------------------------------------\nD//DELETE16 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    OAM.COLLECTION.NONVSAM -\nD    FILE(DD1) -\nD    NOSCRATCH\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DD1       DD DISP=OLD,UNIT=SYSALLDA,VOL=SER=VSER01\nN\nNThe JCL statements are:\nN-----------------------\nN-> DD1: statement that both describes the VVDS volume and causes it\nN   to be mounted.\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> OAM.COLLECTION.NONVSAM: is the name of the collection name entry\nN   in the catalog.\nN\nN-> FILE: specifies the name of a DD statement.\nN\nN-> NOSCRATCH: specifies that only the collection name entry on the\nN   catalog be deleted.\nN\nM   This makes for a messy VTOC and is horrendous in an SMS environment!\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2029": {"ttr": 10511, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2029\nTDFSMS AMS\nT-Chapter 20.\nT-Example 17: Delete a Tape Library Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101136\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 17: Delete a Tape Library Entry\nN---------------------------------------\nD//DELETE17 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    (ATLLIB1) -\nD    LIBRARYENTRY\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//*\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> ATLLIB1: is the name of the tape library entry that is to be\nN   deleted.\nN\nN-> LIBRARYENTRY: specifies the type of entry to be deleted.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2030": {"ttr": 10513, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2030\nTDFSMS AMS\nT-Chapter 20.\nT-Example 18: Delete a Tape Volume Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101146\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 20. DELETE\nN------------------\nNExample 18: Delete a Tape Volume Entry\nN--------------------------------------\nD//DELETE18 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DELETE -\nD    (VAL0001) -\nD    VOLUMEENTRY\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe DELETE parameters are:\nN--------------------------\nN-> VAL0001: is the name of the tape volume entry that is to be deleted.\nN   This tape volume entry's volser is AL0001.\nN\nN-> VOLUMEENTRY: specifies the type of entry to be deleted.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC21": {"ttr": 10515, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC21\nTDFSMS AMS\nT-Chapter 21. DIAGNOSE\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-189953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 21. DIAGNOSE\nN--------------------\nNThe DIAGNOSE command scans a basic catalog structure (BCS) or a VSAM\nNvolume data set (VVDS) to validate the data structures and detect\nNstructure errors.\nN\nNSearch Chapter 22, \"EXAMINE\" for information on the EXAMINE command,\nNwhich can inspect the structural integrity of the data or index\nNcomponent of a key-sequenced data set cluster or of a BCS.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2101": {"ttr": 10753, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2101\nTDFSMS AMS\nT-Chapter 21.\nT-Syntax for DIAGNOSE Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 21. DIAGNOSE\nN------------------\nNSyntax for DIAGNOSE Parameters\nN----------------------------\nD  DIAGNOSE /* Abbreviation: DIAG */ -\nN\nNRequired Parameters\nN-------------------\nD    ICFCATALOG | /* Abbreviation: ICFCAT */ -\nD    VVDS -\nI      Specifies which data set is to be scanned for diagnosis.\nN\nI      You must have access authority under the RACF FACILITY class to\nI      diagnose a BCS or a VVDS.\nN\nI      ICFCATALOG /* Abbreviation: ICFCAT */: specifies that the data\nI        set to be scanned for diagnosis is the basic catalog structure\nI        (BCS).\nN\nI      VVDS: Specifies that the data set to be scanned for diagnosis is\nI        a VVDS for a catalog BCS.\nN\nD    INFILE(ddname) | /* Abbreviation: IFILE */ -\nD    INDATASET(datasetname) /* Abbreviation: IDS */ -\nI      names the DD statement or data set that specifies the data set to\nI      be scanned.\nN\nI      Because a VVDS must be referenced by its volume serial number and\nI      unit, use INFILE to specify a VVDS. A BCS can be specified by\nI      either INFILE or INDATASET.\nN\nI      If you are authorized to the RACF FACILITY class name of\nI      STGADMIN.IDC.DIAGNOSE.CATALOG, you are allowed to open a catalog\nI      without performing usual catalog security processing. If you are\nI      authorized to this FACILITY class name, normal RACF checking is\nI      bypassed. If you try to open a catalog and you are not authorized\nI      to this FACILITY class name, message IDC2918I is issued,\nI      processing continues, and normal RACF checking takes place.\nN\nI      INFILE(ddname) /* Abbreviation: IFILE */: specifies the DD\nI        statement of the data set to be scanned.\nN\nI      INDATASET(datasetname) /* Abbreviation: IDS */: specifies the\nI        data set name of the data set to be scanned.\nN\nNOptional Parameters\nN-------------------\nD    COMPAREDD(ddname ...) | /* Abbreviation: CMPRDD */ -\nD    COMPAREDS(dsname ...) /* Abbreviation: CMPRDS */ -\nI      indicates which data sets are to be checked to confirm that they\nI      point to the BCS or VVDS being diagnosed. Because a VVDS must be\nI      referenced by its volume serial number and unit, use COMPAREDD to\nI      specify a VVDS. A BCS can be specified by either COMPAREDD or\nI      COMPAREDS. For diagnosis of a BCS, the compare parameters\nI      identify VVDS names (you can specify a maximum of 99 names). When\nI      diagnosing a VVDS, these parameters identify appropriate BCS data\nI      sets.\nN\nI      If COMPAREDS or COMPAREDD are specified for the catalog whose\nI      name is indicated by the VVDS entry, the catalog should have:\nN\nI      -> A non-VSAM record corresponding to the NVR, or a cluster\nI         record corresponding with the data or index VVR.\nN\nI      -> The same storage class, data class, and management class names\nI         in the corresponding non-VSAM or cluster record.\nN\nI      If you are authorized to the RACF FACILITY class name of\nI      STGADMIN.IDC.DIAGNOSE.VVDS, you are allowed to open a catalog\nI      without performing normal catalog security processing. If you are\nI      authorized to this FACILITY class name, normal RACF checking is\nI      bypassed. If you try to open a catalog and you are not authorized\nI      to this FACILITY class name, message IDC2918I is issued,\nI      processing continues, and normal RACF checking takes place.\nN\nI      COMPAREDD(ddname ...) /* Abbreviation: CMPRDD */: indicates the\nI        ddnames of the specific data sets to be checked.\nN\nI      COMPAREDS(dsname ...) /* Abbreviation: CMPRDS */: indicates the\nI       names of the data sets to be checked.\nN\nD    DUMP | NODUMP -\nI      specifies whether entry hexadecimal dumps are to be provided for\nI      compare errors.\nN\nI      DUMP: indicates that entry hexadecimal dumps are to be provided\nI        for compare errors. This results in message IDC21365I followed\nI        by a display of a record or records.\nN\nI      NODUMP: indicates that no dump is to be provided.\nN\nD    ERRORLIMIT(value) /* Abbreviation: ELIMIT */ -\nI      specifies a modification of the default error limit. Designed to\nI      prevent runaway output, ERRORLIMIT defaults to 16, but any number\nI      from 0 to 2147483647 can be specified. During DIAGNOSE, each\nI      incorrect entry contributes to the error count used against\nI      ERRORLIMIT. When ERRORLIMIT is reached, message IDC31370I is\nI      printed and analysis of the source data set is ended.\nN\nD    EXCLUDE( /* Abbreviation: EXCL */ -\nD      ENTRIES(entryname ...) | /* Abbreviation: ENT */ -\nD      CATALOG(catalogname ...) | /* Abbreviation: CAT */ -\nD      LEVEL(level) /* Abbreviation: LVL */ -\nD    ) -\nI      specifies that entries is excluded from the scan. INCLUDE and\nI      EXCLUDE are mutually exclusive parameters. If omitted, the entire\nI      data set is processed. See z/OS DFSMS Managing Catalogs for more\nI      information on the effect of specifying INCLUDE and EXCLUDE with\nI      the DIAGNOSE commands.\nN\nI      ENTRIES(entryname ...) /* Abbreviation: ENT */: specifies that\nI        the entries listed is excluded from the scan. Up to\nI        255 entrynames can be coded.\nN\nI      CATALOG(catalogname ...) /* Abbreviation: CAT */: specifies that\nI        entries that refer to the named catalog are not scanned. Up to\nI        99 catalog names can be coded. CATALOG can only be coded for\nI        DIAGNOSE VVDS.\nN\nI      LEVEL(level) /* Abbreviation: LVL */: specifies the high-level\nI        qualifiers for entrynames. Only entries with the high-level\nI        qualifier specified is excluded from the scan. One level name\nI        can be coded.\nN\nD    INCLUDE( /* Abbreviation: INCL */ -\nD      ENTRIES(entryname ...) | /* Abbreviation: ENT */ -\nD      CATALOG(catalogname ...) | /* Abbreviation: CAT */ -\nD      LEVEL(level) /* Abbreviation: LVL */ -\nD    ) -\nI      specifies what information is included in the scan. INCLUDE and\nI      EXCLUDE are mutually exclusive parameters. If omitted, the entire\nI      data set is processed. See z/OS DFSMS Managing Catalogs for more\nI      information on the effect of specifying INCLUDE and EXCLUDE with\nI      the DIAGNOSE commands.\nN\nI      ENTRIES(entryname ...) /* Abbreviation: ENT */: specifies that\nI        only the entries listed are scanned. Up to 255 entrynames can\nI        be coded.\nN\nI      CATALOG(catalogname ...) /* Abbreviation: CAT */: specifies that\nI        only entries that refer to the named catalog are scanned.\nI        CATALOG can only be coded for DIAGNOSE VVDS.\nN\nI      LEVEL(level) /* Abbreviation: LVL */: specifies the high-level\nI        qualifiers for entrynames. Only entries with the specified\nI        high-level qualifier are scanned. One level name can be coded.\nN\nD    LIST | -\nD    NOLIST /* Abbreviation: NLST */ -\nI      specifies whether entries that have no errors are to be listed.\nN\nI      LIST: indicates the entries that have no errors are to be listed\nI        in addition to entries that have errors. This results in\nI        message IDC01360I, followed by a list of entrynames.\nN\nI      NOLIST /* Abbreviation: NLST */: indicates that only entries\nI        with errors are listed.\nN\nD    OUTFILE(ddname) /* Abbreviation: OFILE */\nI      specifies a data set, other than the SYSPRINT data set, to\nI      receive the output produced by DIAGNOSE (that is, the output\nI      resulting from the scan operation).\nN\nI      ddname: identifies a DD statement that describes the alternate\nI        target data set. If OUTFILE is not specified, the output is\nI        listed in the SYSPRINT data set. If an alternate data set is\nI        specified, it must meet the requirements shown in\nI        \"JCL DD Statement for an Alternate Target Data Set\".\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2111": {"ttr": 10755, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2111\nTDFSMS AMS\nT-Chapter 21.\nT-Example 1: Diagnose a VVDS Compare the BCS and one VVDS\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101210\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 21. DIAGNOSE\nN--------------------\nNExample 1: Diagnose a VVDS Compare the BCS and one VVDS\nN-------------------------------------------------------\nD//DIAGNS1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DIAGNOSE -\nD    VVDS -\nD    COMPAREDS(CAT002) -\nD    INFILE(DIAGDD)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DIAGDD    DD DISP=SHR,DSN=SYS1.VVDS.VPERM03,\nD//             UNIT=SYSDA,VOL=SER=PERM03,\nD//             AMP='AMORG'\nN\nNThe JCL statements are:\nN-----------------------\nN-> DIAGDD: specifies the input data set, SYS1.VVDS.VPERM03 on\nN   volume PERM03.\nN\nNThe DIAGNOSE parameters are:\nN----------------------------\nN-> VVDS: is the name of the catalog.\nN\nN-> COMPAREDS: indicates that comparison checking is to occur and\nN   specifies the data set name of the BCS, CAT002.\nN\nN-> INFILE: identifies the DD statement, DIAGDD, containing the VVDS\nN   for diagnosis.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2112": {"ttr": 10757, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2112\nTDFSMS AMS\nT-Chapter 21.\nT-Example 2: Diagnose Only the BCS\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101220\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 21. DIAGNOSE\nN--------------------\nNExample 2: Diagnose Only the BCS\nN--------------------------------\nD//DIAGNS2  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DIAGNOSE -\nD    ICFCATALOG -\nD    INFILE(DIAGDD)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DIAGDD    DD DISP=SHR,DSN=UCAT.TESTDSNS\nN\nNThe JCL statements are:\nN-----------------------\nN-> DIAGDD: specifies the input data set. Because only the DSNAME is\nN   given, the BCS, UCAT.TESTDSNS, must be cataloged in the master\nN   catalog.\nN\nM   If your usecatalogs are not defined in your master catalog then you\nM   have a bigger problem to deal with.\nN\nNThe DIAGNOSE parameters are:\nN----------------------------\nN-> ICFCATALOG: indicates the input is a BCS and not a VVDS.\nN\nN-> INFILE: identifies the DD statement containing the input data set\nN   name.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2113": {"ttr": 10759, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2113\nTDFSMS AMS\nT-Chapter 21.\nT-Example 3: Diagnose the BCS Compare the BCS and Some VVDSes\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101232\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 21. DIAGNOSE\nN--------------------\nNExample 3: Diagnose the BCS Compare the BCS and Some VVDSes\nN-----------------------------------------------------------\nMModified by Kenneth Tomiak, hopefully for the better to understand.\nN\nD//DIAGNS3  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DIAGNOSE -\nD    ICFCATALOG -\nD    COMPAREDD(DIAGCMP1 DIAGCMP2 DIAGCMP3) -\nD    INFILE(DIAGCAT)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DIAGCAT   DD DISP=SHR,DSN=UCAT.TESTDSNS\nD//DIAGCMP1  DD DISP=SHR,DSN=SYS1.VVDS.VPERM01,\nD//             UNIT=SYSDA,VOL=SER=PERM01,\nD//             AMP='AMORG'\nD//DIAGCMP2  DD DISP=SHR,DSN=SYS1.VVDS.VPERM02,\nD//             UNIT=SYSDA,VOL=SER=PERM02,\nD//             AMP='AMORG'\nD//DIAGCMP3  DD DISP=SHR,DSN=SYS1.VVDS.VPERM03,\nD//             UNIT=SYSDA,VOL=SER=PERM03,\nD//             AMP='AMORG'\nN\nNThe JCL statements are:\nN-----------------------\nN-> DIAGCAT: specifies the input usercatalog name UCAT.TESTDSNS.\nN\nN-> DIAGCMP*: identify VVDSes to be compared.\nN\nM   There may be other VVDSes attached to the usercatalog. They will\nM   not be checked.\nN\nNThe DIAGNOSE parameters are:\nN----------------------------\nN-> ICFCATALOG: indicates the input is a BCS and not a VVDS.\nN\nN-> COMPAREDD: identifies the DD statements: DIAGCMP1, DIAGCMP2, and\nN   DIAGCMP3 containing the VVDSes for diagnosis.\nN\nN-> INFILE: identifies the DD statement containing the usercatalog\nN   data set name.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2114": {"ttr": 10761, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2114\nTDFSMS AMS\nT-Chapter 21.\nT-Example 4: Diagnose a VVDS Compare the BCS and one VVDS\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101244\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 21. DIAGNOSE\nN--------------------\nNExample 4: Diagnose a VVDS Compare the BCS and one VVDS\nN-------------------------------------------------------\nMThe difference from Example 1 is using COMPAREDD to reference the\nMusercatalog instead of dynamically allocating via COMPAREDS.\nN\nD//DIAGNS4  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DIAGNOSE -\nD    VVDS -\nD    COMPAREDD(DIAGCAT) -\nD    INFILE(DIAGCMP1)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DIAGCAT   DD DISP=SHR,DSN=UCAT.TESTDSNS\nD//DIAGCMP1  DD DISP=SHR,DSN=SYS1.VVDS.VPERM01,\nD//             UNIT=SYSDA,VOL=SER=PERM01,\nD//             AMP='AMORG'\nN\nNThe JCL statements are:\nN-----------------------\nN-> DIAGCAT: specifies the input usercatalog name UCAT.TESTDSNS.\nN\nN-> DIAGCMP1: identifies the VVDS to be compared.\nN\nM   There may be other VVDSes attached to the usercatalog. They will\nM   not be checked. For a complete diagnosis of a BCS you should run\nM   a LISTCAT and specify every VOLSER where an ALTERNATEINDEX, CLUSTER,\nM   and PATH exist.\nN\nNThe DIAGNOSE parameters are:\nN----------------------------\nN-> VVDS: indicates the input is a VVDS.\nN\nN-> COMPAREDD: identifies the DD statement containing the usercatalog\nN   data set name.\nN\nN-> INFILE: identifies the DD statement DIAGCMP1 containing the VVDS\nN   for diagnosis.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2115": {"ttr": 10763, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2115\nTDFSMS AMS\nT-Chapter 21.\nT-Example 5: Diagnose a VVDS Compare the VVDS to one USERCATALOG\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101254\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 21. DIAGNOSE\nN--------------------\nNExample 5: Diagnose a VVDS Compare the VVDS to one USERCATALOG\nN--------------------------------------------------------------\nMMore than one USERCATALOG can use a VOLSER.\nN\nD//DIAGNS5  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DIAGNOSE -\nD    VVDS -\nD    COMPAREDD(DIAGCAT) -\nD    INCLUDE(UCAT.TESTDSNS) -\nD    INFILE(DIAGCMP1) -\nD    LIST\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DIAGCAT   DD DISP=SHR,DSN=UCAT.TESTDSNS\nD//DIAGCMP1  DD DISP=SHR,DSN=SYS1.VVDS.VPERM01,\nD//             UNIT=SYSDA,VOL=SER=PERM01,\nD//             AMP='AMORG'\nN\nNThe JCL statements are:\nN-----------------------\nN-> DIAGCAT: specifies the input usercatalog name UCAT.TESTDSNS.\nN\nN-> DIAGCMP1: identifies the VVDS to be compared.\nN\nM   There may be other VVDSes attached to the usercatalog. They will\nM   not be checked. For a complete diagnosis of a BCS you should run\nM   a LISTCAT and specify every VOLSER where an ALTERNATEINDEX, CLUSTER,\nM   and PATH exist.\nN\nNThe DIAGNOSE parameters are:\nN----------------------------\nN-> VVDS: indicates the input is a VVDS.\nN\nN-> COMPAREDD: identifies the DD statement containing the usercatalog\nN   data set name.\nN\nN-> INCLUDE: specifies that only the VVDS entries cataloged\nN   for CAT001 be diagnosed.\nN\nN-> INFILE: identifies the DD statement DIAGCMP1 containing the VVDS\nN   for diagnosis.\nN\nN-> LIST: specifies that entries both with and without errors be listed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2116": {"ttr": 10765, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2116\nTDFSMS AMS\nT-Chapter 21.\nT-Example 6: Diagnose a VVDS Exclude one USERCATALOG\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101304\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 21. DIAGNOSE\nN--------------------\nNExample 6: Diagnose a VVDS Exclude one USERCATALOG\nN--------------------------------------------------\nD//DIAGNS6  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DIAGNOSE -\nD    VVDS -\nD    COMPAREDS(UCAT.TESTDSNS) -\nD    NODUMP -\nD    ERRORLIMIT(1) -\nD    EXCLUDE( -\nD      CATALOG(UCAT.PRODDSNS) -\nD    ) -\nD    INFILE(DIAGCMP1) -\nD    LIST\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DIAGCMP1  DD DISP=SHR,DSN=SYS1.VVDS.VPERM01,\nD//             UNIT=SYSDA,VOL=SER=PERM01,\nD//             AMP='AMORG'\nN\nNThe JCL statements are:\nN-----------------------\nN-> DIAGCMP1: identifies the VVDS to be compared.\nN\nM   There may be other VVDSes attached to the usercatalog. They will\nM   not be checked. For a complete diagnosis of a BCS you should run\nM   a LISTCAT and specify every VOLSER where an ALTERNATEINDEX, CLUSTER,\nM   and PATH exist.\nM\nM   You should list a VVDS and compare it to all catalogs identified as\nM   having entries in it.\nN\nNThe DIAGNOSE parameters are:\nN----------------------------\nN-> VVDS: indicates the input is a VVDS.\nN\nN-> COMPAREDS: identifies the the usercatalog data set name to be\nN   dynamically allocated.\nN\nN-> NODUMP: specifies that entries with errors are not to be hex-dumped.\nN\nN-> ERRORLIMIT: changes the default number of errors, 16, to be\nN   processed to one.\nN\nN-> EXCLUDE: specifies something is not to be processed.\nN\nN  -> CATALOG: specifies the usercatalog that is to be ignored.\nN\nN-> INFILE: identifies the DD statement DIAGCMP1 containing the VVDS\nN   for diagnosis.\nN\nN-> LIST: requests that entries both with and without errors be listed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2117": {"ttr": 11009, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2117\nTDFSMS AMS\nT-Chapter 21.\nT-Example 7: Diagnose a VVDS Include one ALIAS level\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101314\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 21. DIAGNOSE\nN--------------------\nNExample 7: Diagnose a VVDS Include one ALIAS level\nN--------------------------------------------------\nD//DIAGNS7  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DIAGNOSE -\nD    VVDS -\nD    COMPAREDD(DIAGCAT) -\nD    INCLUDE( -\nD      LEVEL(CAT) -\nD    ) -\nD    INFILE(DIAGCMP1)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DIAGCAT   DD DISP=SHR,DSN=UCAT.CATDSNS\nD//DIAGCMP1  DD DISP=SHR,DSN=SYS1.VVDS.VPERM01,\nD//             UNIT=SYSDA,VOL=SER=PERM01,\nD//             AMP='AMORG'\nN\nNThe JCL statements are:\nN-----------------------\nN-> DIAGCAT: indicates the BCS (usercatalog) data set name.\nN\nN-> DIAGCMP1: identifies the VVDS to be compared.\nN\nM   There may be other VVDSes attached to the usercatalog. They will\nM   not be checked. For a complete diagnosis of a BCS you should run\nM   a LISTCAT and specify every VOLSER where an ALTERNATEINDEX, CLUSTER,\nM   and PATH exist.\nM\nM   You should list a VVDS and compare it to all catalogs identified as\nM   having entries in it.\nN\nNThe DIAGNOSE parameters are:\nN----------------------------\nN-> VVDS: indicates the input is a VVDS.\nN\nN-> COMPAREDD: identifies the DD statement containing the BCS name.\nN\nN-> INCLUDE: indicates that only certain VVDS entries are to be\nN   processed.\nN\nN  -> LEVEL: specifically, entrynames with a high-level qualifier of\nN     CAT.\nN\nN-> INFILE: identifies the DD statement DIAGCMP1 containing the VVDS\nN   for diagnosis.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC22": {"ttr": 11011, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC22\nTDFSMS AMS\nT-Chapter 22. EXAMINE\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 22. EXAMINE\nN-------------------\nNThe EXAMINE command analyzes and reports on the structural integrity of\nNthe index and data components of a key-sequenced data set cluster\nN(KSDS) and of a variable-length relative record data set cluster\nN(VRRDS). In addition, EXAMINE can analyze and report on the structural\nNintegrity of the basic catalog structure (BCS) of a catalog.\nN\nNSee z/OS DFSMS Using Data Sets for more information on KSDSs and\nNVRRDSs. See How to Run Examine and Understanding Message Hierarchy in\nNz/OS DFSMS Managing Catalogs for more information on BCSs. Search\nNChapter 21, \"DIAGNOSE\" for information on the DIAGNOSE command, which\nNinspects the contents of a VVDS or a BCS and looks for logical\nNsynchronization errors.\nN\nNRecommendation: For increased integrity checking, use EXAMINE on the\nNhighest available release. Before using EXAMINE with a catalog or data\nNset that has been closed improperly (as a result of a CANCEL, ABEND or\nNsystem error), use the VERIFY RECOVER command. For more information,\nNsearch Chapter 33, \"VERIFY\".\nN\nMLong ago an implicit VERIFY was added when a cluster is opened. Doing\nMso manually is superfluous unless done with condition checking to\nMhighlight a CANCEL, ABEND, OR system error was the most recent reason\nMfor closure.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2201": {"ttr": 11013, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2201\nTDFSMS AMS\nT-Chapter 22.\nT-Syntax for EXAMINE Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-189953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 22. EXAMINE\nN-------------------\nNSyntax for EXAMINE Parameters\nN-----------------------------\nD  EXAMINE -\nN\nNRequired Parameters\nN-------------------\nD    NAME(clustername) -\nI      specifies the cluster to be analyzed for structural integrity by\nI      EXAMINE. You specify the cluster component you want examined by\nI      setting the appropriate EXAMINE parameters.\nN\nI      clustername: identifies the cluster to be analyzed.\nN\nNOptional Parameters\nN-------------------\nD    DATATEST | /* Abbreviation: DTEST */ -\nD    NODATATEST /* Abbreviation: NODTEST */ -\nI      specifies whether or not EXAMINE is to perform tests associated\nI      with the data component of the cluster.\nN\nI      DATATEST /* Abbreviation: DTEST */:  performs tests upon the\nI        data component of a key-sequenced data set cluster. NOINDEXTEST\nI        and DATATEST are specified when only a DATATEST is desired.\nN\nI        NODATATEST is the default.\nN\nI      NODATATEST /* Abbreviation: NODTEST */: does not perform any\nI        testing upon the data component of a key-sequenced data set\nI        cluster.\nN\nD    INDEXTEST | /* Abbreviation: ITEST */ -\nD    NOINDEXTEST /* Abbreviation: NOITEST */ -\nI      specifies whether or not EXAMINE is to perform tests associated\nI      with the index component of the cluster.\nN\nI      INDEXTEST /* Abbreviation: ITEST */: performs tests upon the\nI        index component of a key-sequenced data set cluster.\nN\nI        INDEXTEST is the default.\nN\nI      NOINDEXTEST /* Abbreviation: NOITEST */ does not perform any\nI        testing upon the index component of a key-sequenced data set\nI        cluster.\nN\nD    ERRORLIMIT(value) /* Abbreviation: ELIMIT */\nI      specifies a numeric limit (value) to the number of errors for\nI      which detailed EXAMINE error messages are to be printed during\nI      program execution.\nN\nI      ERRORLIMIT is designed to prevent runaway message output. The\nI      default value for ERRORLIMIT is 2,147,483,647 errors, but you\nI      can specify any number between 0 and 2,147,483,647. Note that\nI      processing continues even though the error limit is reached.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2211": {"ttr": 11015, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2211\nTDFSMS AMS\nT-Chapter 22.\nT-Example 1: Examine the Index Component of a User Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101340\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 22. EXAMINE\nN-------------------\nNExample 1: Examine the Index Component of a User Catalog\nN--------------------------------------------------------\nNUses the INDEXTEST and NODATATEST defaultS.\nN\nD//EXAMN1   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  EXAMINE -\nD    NAME(UCAT.TESTDSNS) -\nD    ERRORLIMIT(0)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe EXAMINE parameters are:\nN----------------------------\nN-> NAME: specifies the catalog name. The catalog must be connected to\nN   the master catalog.\nN\nN-> ERRORLIMIT: Zero suppresses the printing of detailed error messages.\nN\nM     Somewhat defeating the purpose of running EXAMINE if you hide\nM     the error messages.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2212": {"ttr": 11017, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2212\nTDFSMS AMS\nT-Chapter 22.\nT-Example 2: Examine Both Components of a Key-Sequenced Data Set\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101351\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 22. EXAMINE\nN-------------------\nNExample 2: Examine Both Components of a Key-Sequenced Data Set\nN--------------------------------------------------------------\nD//EXAMN2   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  EXAMINE -\nD    NAME(TEST.KSDS01) -\nD    DATATEST -\nD    INDEXTEST\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe EXAMINE parameters are:\nN----------------------------\nN-> NAME: specifies the cluster name only.\nN\nN-> DATATEST: causes the data component to be examined.\nN\nN-> INDEXTEST: causes the index component to be examined.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2213": {"ttr": 11019, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2213\nTDFSMS AMS\nT-Chapter 22.\nT-Example 3: Examine the Data Component of a User Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101401\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 22. EXAMINE\nN-------------------\nNExample 3: Examine the Data Component of a User Catalog\nN-------------------------------------------------------\nD//EXAMN3   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  EXAMINE -\nD    NAME(UCAT.TESTDSNS) -\nD    DATATEST -\nD    NOINDEXTEST -\nD    ERRORLIMIT(10000)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe EXAMINE parameters are:\nN----------------------------\nN-> NAME: specifies the catalog name. The catalog must be connected to\nN   the master catalog.\nN\nN-> DATATEST: causes the data component to be examined.\nN\nN-> NOINDEXTEST: specifies that the index component is not to be\nN   examined.\nN\nN-> ERRORLIMIT: restricts the printing of detailed error messages to\nN   1000 errors.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC23": {"ttr": 11021, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC23\nTDFSMS AMS\nT-Chapter 23. EXPORT\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 23. EXPORT\nN------------------\nNThe EXPORT command either exports a cluster or an alternate index or\nNcreates a backup copy of a catalog. An empty candidate volume cannot\nNbe exported. Access method services acknowledges and preserves the SMS\nNclasses during EXPORT.\nN\nNAccess method services does not use RLS. If an RLS keyword is specified\nNon the DD statement of a file to be opened by AMS, the keyword will be\nNignored and the file will be opened and accessed in non-RLS mode.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2301": {"ttr": 11023, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2301\nTDFSMS AMS\nT-Chapter 23.\nT-Syntax for EXPORT Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 23. EXPORT\nN------------------\nNSyntax for EXPORT Parameters\nN----------------------------\nD  EXPORT /* Abbreviation: EXP */ -\nN\nNRequired Parameters\nN-------------------\nD    entryname -\nI      Names the cluster, alternate index, or user catalog to be\nI      exported. This parameter must be the first parameter following\nI      EXPORT. If entryname specifies an SMS-managed data set, the\nI      OUTDATASET must either be an SMS-managed data set, or a\nI      non-SMS-managed data set cataloged in the catalog determined by\nI      the catalog search order (search \"Order of Catalog Use\").\nN\nD    OUTFILE(ddname) | /* Abbreviation: OFILE */ -\nD    OUTDATASET(outdsn) /* Abbreviation: ODS */ -\nI      Specifies the name of the DD statement or the data set that is to\nI      receive the data being exported.\nN\nI      Portable data sets loaded by EXPORT must be sequential data sets.\nI      VSAM is not a valid data set organization for portable data sets.\nN\nI      OUTFILE(ddname) /* Abbreviation: OFILE */: Specifies the name of\nI        the DD statement of the target data set.\nN\nI        Only the block size for the DCB parameter should be specified\nI        in the DD statement. The default for block size for EXPORT is\nI        2048. Block size can be given in the DD statement to override\nI        this default and improve performance.\nN\nI        Exception: For a nonlabeled tape, the LRECL should be specified\nI        if any of the input records are greater in size than the block\nI        size. Maximum record size is determined by the value specified\nI        with the maximum subparameter of the RECORDSIZE parameter of\nI        the DEFINE CLUSTER or DEFINE ALTERNATEINDEX command when the\nI        data set was defined.\nN\nI      OUTDATASET(outdsn) /* Abbreviation: ODS */: Specifies the name of\nI        the target data set. If OUTDATASET is specified, an attempt is\nI        made to dynamically allocate the target data set. The\nI        characteristics of the target data set are described in\nI        \"JCL DD Statement for a Target Data Set\".\nN\nI        If OUTDATASET specifies an SMS-managed data set, the exported\nI        data set must either be an SMS-managed data set, or a\nI        non-SMS-managed data set cataloged in the catalog determined\nI        by the catalog search order. For information about this search\nI        order search \"Order of Catalog Use\".\nN\nNOptional Parameters\nN-------------------\nD    CIMODE | /* Abbreviation: CIM */ -\nD    RECORDMODE /* Abbreviation: RECM */ -\nI      Specifies whether control interval processing (CIMODE) or logical\nI      record processing (RECORDMODE) is to be used to export the\nI      records of the data set cluster. RECORDMODE is the default for\nI      ESDS, KSDS, and RRDS clusters. CIMODE is the default for LDS\nI      clusters.\nN\nI      CIMODE /* Abbreviation: CIM */: Specifies that the cluster data\nI        records written to the portable data set are processed as one\nI        VSAM control interval. You can use CIMODE processing to export\nI        data sets more quickly. Each control interval is processed as\nI        one logical record.\nN\nI        If control interval processing is used, the target data set's\nI        catalog entry will not have correct statistics. These\nI        statistics are correctly updated the first time the data set\nI        is opened for output.\nN\nI        When you use control interval processing to export an ESDS\nI        cluster that contains an alternate index, logical record\nI        processing is used, and a warning message is issued.\nN\nI        IMPORT will determine the type of processing (control interval\nI        or logical record) used by EXPORT to process the cluster data\nI        records, and use the same processing type for loading. Thus, a\nI        data set that was exported in control intervals is loaded in\nI        control intervals. Similarly, a data set exported in logical\nI        records is loaded by IMPORT as VSAM logical records.\nN\nI        The CIMODE portable data set created by the EXPORT command is\nI        not compatible with a CIMODE portable data set created on a\nI        VSE system. Therefore, any attempt to import an object exported\nI        on a VSE system with control interval processing support is not\nI        detected by IMPORT and gives unpredictable results.\nN\nI        During CIMODE processing, data set statistics, such as the\nI        number of logical records and the number of inserted records,\nI        are not maintained. Data set statistics are not maintained\nI        because VSAM cannot update logical record information when\nI        whole control intervals are processed. After recalling a data\nI        set, a LISTCAT might not show accurate freespace bytes, and a\nI        read against the VVR might show zero records although records\nI        do exist.\nN\nI      RECORDMODE /* Abbreviation: RECM */: Specifies that cluster data\nI        records written to the portable data set are processed as one\nI        VSAM logical record.\nN\nI        On a system without control interval processing support,\nI        RECORDMODE is the default.\nN\nI        For LDS clusters, the default is CIMODE.\nN\nD    ERASE | /* Abbreviation: ERAS */ -\nD    NOERASE /* Abbreviation: NERAS */ -\nI      Specify whether or not the components of the cluster or\nI      alternate index to be exported are to be erased (that is,\nI      overwritten with binary zeros). This parameter overrides whatever\nI      was specified when the object was defined or last altered.\nN\nI      This parameter can be specified only if the object is to be\nI      permanently exported (that is, deleted from the original system).\nI      It does not apply to catalogs that must be exported as TEMPORARY.\nN\nI      ERASE /* Abbreviation: ERAS */:  Specifies that the components\nI        are to be overwritten with binary zeros when the cluster or\nI        alternate index is deleted. If ERASE is specified, the volume\nI        that contains the data component must be mounted.\nN\nI        If the alternate index is protected by a RACF generic or\nI        discrete profile, use RACF commands to specify an ERASE\nI        attribute as part of this profile so that the data component\nI        is automatically erased upon deletion.\nN\nI      NOERASE /* Abbreviation: NERAS */:  specifies that the components\nI        are not to be overwritten with binary zeros when the cluster\nI        or alternate index is deleted.\nN\nI        NOERASE does not prevent the data component from being erased\nI        if it is protected by a RACF generic or discrete profile that\nI        specifies the ERASE attribute. You can use RACF commands to\nI        alter the ERASE attribute in a profile.\nN\nD    INFILE(ddname) /* Abbreviation: IFILE */ -\nI      Specifies the name of the DD statement that identifies the\nI      cluster, alternate index, or catalog to be exported. If the\nI      cluster, alternate index, or catalog has been defined with a\nI      maximum logical record length greater than 32760 bytes, EXPORT\nI      processing ends with an error message, except for EXPORT with\nI      control interval processing support.\nN\nI      In addition to the DD statement for INFILE, one of the following\nI      conditions must be true:\nN\nI      -> The object's entry is in the master catalog.\nN\nI      -> The qualifiers in the object's name are the catalog's name or\nI         alias.\nN\nI      When INFILE and its DD statement are not specified for a\nI      to-be-exported object, an attempt is made to dynamically\nI      allocate the object with a disposition of OLD.\nN\nD    INHIBITSOURCE | /* Abbreviation: INHS */ -\nD    NOINHIBITSOURCE /* Abbreviation: NINHS */ -\nI      Specifies how the data records in the source data set (ALTERNATE\nI      INDEX and CLUSTER) can be accessed after they have been imported\nI      to another system. Use the ALTER command to alter this parameter.\nN\nI      INHIBITSOURCE /* Abbreviation: INHS */: Specifies that the\nI        original data records in the original system cannot be accessed\nI        for any operation other than retrieval. Use it when the object\nI        is to be temporarily exported. (A backup copy of the object is\nI        made, and the object itself remains in the original system.)\nN\nI        If INHIBITSOURCE is specified when exporting a catalog, it is\nI        ignored and a warning message issued.\nN\nI      NOINHIBITSOURCE /* Abbreviation: NINHS */: specifies that the\nI        original data records in the original system can be accessed\nI        for any kind of operation.\nN\nD    INHIBITTARGET | /* Abbreviation: INHT */ -\nD    NOINHIBITTARGET /* Abbreviation: NINHT */ -\nI      Specify whether or not the data records copied into the target\nI      alternate index or cluster can be accessed for any operation\nI      other than retrieval after they have been imported to another\nI      system. This specification can be altered through the ALTER\nI      command.\nN\nI      INHIBITTARGET /* Abbreviation: INHT */:  specifies that the\nI        target object cannot be accessed for any operation other than\nI        retrieval after it has been imported into another system.\nN\nI        If INHIBITTARGET is specified when exporting a catalog, it is\nI        ignored and a warning message is issued.\nN\nI      NOINHIBITTARGET /* Abbreviation: NINHT */:  Specifies that the\nI        target object can be accessed for any type of operation after\nI        it has been imported into another system.\nN\nD    PURGE | /* Abbreviation: PRG */ -\nD    NOPURGE /* Abbreviation: NPRG */ -\nI      Specify whether or not the cluster or alternate index to be\nI      exported is to be deleted from the original system regardless of\nI      the retention period specified in a TO or FOR parameter when the\nI      object was defined.\nN\nI      This parameter can be specified only if the object is to be\nI      permanently exported, that is, deleted from the original system.\nI      Therefore, it does not apply to catalogs that must be exported\nI      as TEMPORARY.\nN\nI      PURGE /* Abbreviation: PRG */: Specifies that the object is to\nI        be deleted even if the retention period has not expired.\nN\nI      NOPURGE /* Abbreviation: NPRG */: Specifies that the object is\nI        not to be deleted unless the retention period has expired.\nN\nD    TEMPORARY | /* Abbreviation: TEMP */\nD    PERMANENT /* Abbreviation: PERM */\nI      Specify whether or not the cluster, alternate index, or catalog\nI      to be exported is to be deleted from the original system.\nN\nI      TEMPORARY /* Abbreviation: TEMP */: Specifies that the cluster,\nI        alternate index, or catalog is not to be deleted from the\nI        original system. The object in the original system is marked\nI        as temporary to indicate that another copy exists and that the\nI        original copy can be replaced.\nN\nI        To replace the original copy, a portable copy created by an\nI        EXPORT command must be imported to the original system. The\nI        IMPORT command deletes the original copy, defines the new\nI        object, and copies the data from the portable copy into the\nI        newly defined object. Portable data sets being loaded by\nI        EXPORT must be sequential data sets. VSAM is not a valid data\nI        set organization for portable data sets.\nN\nI        Catalogs are exported as TEMPORARY.\nN\nI        Be sure to properly protect the file of the temporary object\nI        if you want to deny unauthorized access to that file.\nN\nI      PERMANENT /* Abbreviation: PERM */: Specifies that the cluster\nI        or alternate index is to be deleted from the original system.\nI        Its storage space is freed. If its retention period has not yet\nI        expired, you must also code PURGE.\nN\nI      If PERMANENT is specified when exporting a catalog, the catalog\nI      will still be exported as TEMPORARY, and a message is issued.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2311": {"ttr": 11266, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2311\nTDFSMS AMS\nT-Chapter 23.\nT-Example 1: Export a Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101425\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 23. EXPORT\nN------------------\nNExample 1: Export a Catalog\nN---------------------------\nD//EXPORT1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  EXPORT -\nD    UCAT.TESTDSNS -\nD    OUTFILE(BACKUP) -\nD    TEMPORARY\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//BACKUP    DD DISP=(NEW,CATLG),DSNAME=CATBACK.TESTDSNS(+1),\nD//             UNIT=(TAPE,,DEFER),LABEL=(1,SL,EXPDT=99000)\nN\nNThe JCL statements are:\nN-----------------------\nN-> BACKUP: describes the portable file that is to BACKUP a copy of\nN   the catalog.\nN\nNThe EXPORT parameters are:\nN----------------------------\nN-> UCAT.TESTDSNS: identifies the object to be exported.\nN\nN-> OUTFILE: points to the BACKUP DD statement. The BACKUP DD statement\nN   describes the portable data set, CATBACK.TESTDSNS(+1), that is to\nN   BACKUP a copy of the catalog.\nN\nN-> TEMPORARY: specifies that the catalog is not to be deleted. The\nN   catalog is marked \"temporary\" to indicate that another copy exists\nN   and that the original copy can be replaced. This is a required\nN   parameter when exporting a catalog that cannot be exported with the\nN   PERMANENT parameter.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2312": {"ttr": 11268, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2312\nTDFSMS AMS\nT-Chapter 23.\nT-Example 2: Export a Key-Sequenced Cluster\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101436\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 23. EXPORT\nN------------------\nNExample 2: Export a Key-Sequenced Cluster\nN-----------------------------------------\nD//EXPORT2  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  EXPORT -\nD    ZZZ.EXAMPLE.KSDS1 -\nD    INHIBITSOURCE -\nD    OUTFILE(BACKUP) -\nD    TEMPORARY\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//BACKUP    DD DISP=(NEW,CATLG),DSNAME=CATBACK.EXAMPLE.KSDS1(+1),\nD//             UNIT=(TAPE,,DEFER),LABEL=(1,SL,EXPDT=99000)\nN\nNThe JCL statements are:\nN-----------------------\nN-> BACKUP: describes the portable file that is to BACKUP a copy of\nN   the catalog.\nN\nNThe EXPORT parameters are:\nN--------------------------\nN-> ZZZ.EXAMPLE.KSDS1: identifies the cluster to be exported.\nN\nN-> INHIBITSOURCE: specifies that the copy of the cluster that remains\nN   in the original system, as a result of TEMPORARY, cannot be\nN   modified. User programs are allowed only to read the cluster's\nN   records.\nN\nN-> OUTFILE: points to the BACKUP DD statement. The BACKUP DD statement\nN   describes the portable data set, CATBACK.EXAMPLE.KSDS1(+1), that is\nN   to BACKUP a copy of the catalog.\nN\nN-> TEMPORARY: specifies that the cluster is not to be deleted. The\nN   cluster's catalog entry is marked \"temporary\" to indicate that\nN   another copy of the cluster exists and that the original copy can\nN   be replaced. (Search the IMPORT Example, \"Example 3: Import a\nN   Key-Sequenced Cluster\".)\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2313": {"ttr": 11270, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2313\nTDFSMS AMS\nT-Chapter 23.\nT-Example 3: Export an Entry-Sequenced Cluster\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101457\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 23. EXPORT\nN------------------\nNExample 3: Export an Entry-Sequenced Cluster\nN--------------------------------------------\nNBecause EXPORT defaults to PERMANENT, the cluster is deleted after its\nNcontents are copied to VSAMBKUP.EXAMPLE.ESDS1(+1).\nN\nNBecause EXPORT defaults to NOINHIBITTARGET, access method services\nNassumes the cluster can be updated (by users of the other system) when\nNit is imported to any system.\nN\nD//EXPORT3  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  EXPORT -\nD    ZZZ.EXAMPLE.ESDS1 -\nD    OUTFILE(BACKUP) -\nD    PURGE\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//BACKUP    DD DISP=(NEW,CATLG),DSNAME=VSAMBKUP.EXAMPLE.ESDS1(+1),\nD//             UNIT=(TAPE,,DEFER),LABEL=(1,SL,EXPDT=99000)\nN\nNThe JCL statements are:\nN-----------------------\nN-> BACKUP: describes the portable file that is to BACKUP a copy of\nN   the catalog.\nN\nNThe EXPORT parameters are:\nN----------------------------\nN-> ZZZ.EXAMPLE.ESDS1: identifies the cluster to be exported.\nN\nN-> OUTFILE: points to the BACKUP DD statement. The BACKUP DD statement\nN   describes the portable data set, VSAMBKUP.EXAMPLE.ESDS1(+1), that is\nN   to BACKUP a copy of the cluster.\nN\nN-> PURGE: allows the cluster to be deleted regardless of its retention\nN   period or date.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2314": {"ttr": 11272, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2314\nTDFSMS AMS\nT-Chapter 23.\nT-Example 4: Export an Entry-Sequenced Cluster Using CIMODE\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101507\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 23. EXPORT\nN------------------\nNExample 4: Export an Entry-Sequenced Cluster Using CIMODE\nN---------------------------------------------------------\nD//EXPORT4  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  EXPORT -\nD    ZZZ.EXAMPLE.ESDS1 -\nD    CIMODE -\nD    OUTFILE(BACKUP) -\nD    TEMPORARY\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//BACKUP    DD DISP=(NEW,CATLG),DSNAME=VSAMBKUP.EXAMPLE.ESDS1(+1),\nD//             UNIT=(TAPE,,DEFER),LABEL=(1,SL,EXPDT=99000)\nN\nNThe JCL statements are:\nN-----------------------\nN-> BACKUP: describes the portable file that is to BACKUP a copy of\nN   the catalog.\nN\nNThe EXPORT parameters are:\nN----------------------------\nN-> ZZZ.EXAMPLE.ESDS1: identifies the cluster to be exported.\nN\nN-> CIMODE: CIMODE specifies that control interval processing is to be\nN   used to process the data one control interval at a time instead of\nN   one record at a time.\nN\nN-> OUTFILE: points to the BACKUP DD statement. The BACKUP DD statement\nN   describes the portable data set, VSAMBKUP.EXAMPLE.ESDS1(+1), that is\nN   to BACKUP a copy of the cluster.\nN\nN-> TEMPORARY: specifies that the cluster is not to be deleted. The\nN   entry of the data set in the catalog is marked \"temporary\" to\nN   indicate that another copy of this data set exists and that the\nN   original copy can be replaced.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2315": {"ttr": 11274, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2315\nTDFSMS AMS\nT-Chapter 23.\nT-Example 5: Export Multiple Data Sets Using Multiple INFILE Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101517\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 23. EXPORT\nN------------------\nNExample 5: Export Multiple Data Sets Using Multiple INFILE Parameters\nN---------------------------------------------------------------------\nD//EXPORT5  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  EXPORT -\nD    MTD.CLUSTER1 -\nD    INFILE(INDS1) -\nD    OUTFILE(BACKUP1)\nD  EXPORT -\nD    MTD.CLUSTER2 -\nD    INFILE(INDS2) -\nD    OUTFILE(BACKUP2)\nD  EXPORT -\nD    MTD.CLUSTER3 -\nD    INFILE(INDS3) -\nD    OUTFILE(BACKUP3)\nD  EXPORT -\nD    MTD.CLUSTER4 -\nD    INFILE(INDS4) -\nD    OUTFILE(BACKUP4)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//INDS1     DD DISP=OLD,DSNAME=MTD.CLUSTER1\nD//INDS2     DD DISP=OLD,DSNAME=MTD.CLUSTER2\nD//INDS3     DD DISP=OLD,DSNAME=MTD.CLUSTER3\nD//INDS4     DD DISP=OLD,DSNAME=MTD.CLUSTER4\nD//BACKUP1   DD DISP=(NEW,CATLG),DSNAME=VSAMBKUP.MTD.CLUSTER1(+1),\nD//             UNIT=3390,SPACE=(TRK,(10,2)),\nD//             DCB=(RECFM=F,BLKSIZE=4101,LRECL=4101)\nD//BACKUP2   DD DISP=(NEW,CATLG),DSNAME=VSAMBKUP.MTD.CLUSTER2(+1),\nD//             UNIT=3390,SPACE=(TRK,(10,2)),\nD//             DCB=(RECFM=F,BLKSIZE=4101,LRECL=4101)\nD//BACKUP3   DD DISP=(NEW,CATLG),DSNAME=VSAMBKUP.MTD.CLUSTER3(+1),\nD//             UNIT=3390,SPACE=(TRK,(10,2)),\nD//             DCB=(RECFM=F,BLKSIZE=4101,LRECL=4101)\nD//BACKUP4   DD DISP=(NEW,CATLG),DSNAME=VSAMBKUP.MTD.CLUSTER4(+1),\nD//             UNIT=3390,SPACE=(TRK,(10,2)),\nD//             DCB=(RECFM=F,BLKSIZE=4101,LRECL=4101)\nN\nNThe JCL statements are:\nN-----------------------\nN-> BACKUP*: describe the portable files that are to contain a\nN   copy of the exported data sets.\nN\nN-> INDS*: allocate the data sets to be exported.\nN\nNThe EXPORT parameters are:\nN----------------------------\nN-> MTD.CLUSTER*: identifies the clusters to be exported.\nN\nN-> INFILE: points to the INDS1 through INDS4 statements.\nN\nN-> OUTFILE: points to the BACKUP* DD statements. The BACKUP* DD\nN   statement describes the portable data sets,\nN   VSAMBKUP.MTD.CLUSTER*(+1), that are to receive a copy of data\nN   sets INDS1 through INDS4.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC24": {"ttr": 11276, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC24\nTDFSMS AMS\nT-Chapter 24. EXPORT DISCONNECT\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 24. EXPORT DISCONNECT\nN-----------------------------\nNThe EXPORT DISCONNECT command disconnects a user catalog.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2401": {"ttr": 11278, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2401\nTDFSMS AMS\nT-Chapter 24.\nT-Syntax for EXPORT DISCONNECT Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148993\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 24. EXPORT DISCONNECT\nN-----------------------------\nNSyntax for EXPORT DISCONNECT Parameters\nN---------------------------------------\nD  EXPORT -\nN\nNRequired Parameters\nN-------------------\nD    usercatname -\nI      names the user catalog to be disconnected. This parameter must\nI      be the first parameter following EXPORT. When you are\nI      disconnecting a user catalog, you must supply the alter\nI      authority to the catalog from which the entry is being removed.\nI      Search \"Catalog Selection Order for EXPORT DISCONNECT\" for the\nI      order in which a catalog is selected.\nN\nI      If the user catalog is SMS-managed, its volume serial number is\nI      indicated at the time of disconnect.\nN\nD    DISCONNECT /* Abbreviation: DCON */ /* - */\nI      specifies that a user catalog is to be disconnected. The\nI      connector entry for the user catalog is deleted from the master\nI      catalog. Also, the user catalog's alias entries are deleted\nI      from the master catalog.\nN\nI      If EXPORT is coded to remove a user catalog connector entry,\nI      DISCONNECT is a required parameter. The VVDS volume and the BCS\nI      volume can be physically moved to the system to which the\nI      catalog is connected.\nN\nI      To make a user catalog available in other systems and in the\nI      original system, code the IMPORT CONNECT command to connect the\nI      user catalog to each system to which it is to be available, but\nI      do not EXPORT DISCONNECT the user catalog.\nN\nI      EXPORT DISCONNECT displays the volume serial number of the user\nI      catalog at the time of the disconnect. This volume serial number\nI      information is required to perform the IMPORT CONNECT.\nN\nNOptional parameters\nN-------------------\nM    CATALOG(catname) /* Abbreviation: CAT */\nI      specifies, for a disconnect operation, the name of the user\nI      catalog from which a user catalog connector entry and any\nI      associated alias entries are to be deleted. Search\nI      \"Catalog Selection Order for EXPORT DISCONNECT\" for the order in\nI      which a catalog is selected when the CATALOG parameter is not\nI      specified. The CATALOG parameter is required when you want to\nI      direct the catalog's entry to a particular catalog other than\nI      the current master catalog on the system you are running this\nI      command on.\nN\nI      catname/alias: Names the catalog or an alias that can be resolved\nI      to a catalog. For example, if alias ABCD relates to catalog\nI      SYS1.USERCAT, then specifying either ABCD or SYS1.USERCAT will\nI      cause the catalog to be disconnected from catalog SYS1.USERCAT.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2411": {"ttr": 11280, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2411\nTDFSMS AMS\nT-Chapter 24.\nT-Example 1: Export Disconnect of a Usercatalog from a Usercatalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101545\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 24. EXPORT DISCONNECT\nN-----------------------------\nNExample 1: Export Disconnect of a Usercatalog from a Usercatalog\nN----------------------------------------------------------------\nD//EXPDIS1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  EXPORT -\nD    UCAT.TESTDSNS -\nD    DISCONNECT -\nD    CATALOG(UCAT.PRODDSNS)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe EXPORT parameters are:\nN--------------------------\nN-> UCAT.TESTDSNS: identifies the object to be disconnected.\nN\nN-> DISCONNECT: identifies the object as a user catalog.\nN\nN-> CATALOG: names the user catalog (UCAT.PRODDSNS) containing the\nN   connector entry being disconnected.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2412": {"ttr": 11282, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2412\nTDFSMS AMS\nT-Chapter 24.\nT-Example 2: Export Disconnect of a User Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101555\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 24. EXPORT DISCONNECT\nN-----------------------------\nNExample 2: Export Disconnect of a User Catalog\nN----------------------------------------------\nD//EXPDIS2  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  EXPORT -\nD    UCAT.TESTDSNS -\nD    DISCONNECT\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe EXPORT parameters are:\nN--------------------------\nN-> UCAT.TESTDSNS: identifies the object to be disconnected.\nN\nN-> DISCONNECT: identifies the object as a user catalog. When a user\nN   catalog's connector entry is to be deleted, DISCONNECT is required.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC25": {"ttr": 11284, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC25\nTDFSMS AMS\nT-Chapter 25. IMPORT\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 25. IMPORT\nN------------------\nNThe IMPORT command moves or restores a cluster or alternate index, or\nNrestores a catalog.\nN\nNRestrictions:\nN-------------\nN-> The original version of the catalog is always deleted when you use\nN   IMPORT.\nN\nN-> You can export a KSDS with extended addressability to a system that\nN   does not support extended addressability if the data set is smaller\nN   than 4GB. If it is larger, the EXPORT and IMPORT commands appear to\nN   complete successfully, but when the data set tries to extend beyond\nN   4GB, a message is issued. You can use REPRO specifically FROMKEY and\nN   TOKEY, or COUNT parameters to reduce the size of the data set to\nN   less than 4GB before using IMPORT.\nN\nN-> VSAM record-level sharing (RLS) information is lost when the IMPORT\nN   is done on a DFSMS/MVS 1.2 or lower system. For the correct\nN   procedure to use when copying or moving data sets with pending\nN   recovery, see \"Using VSAM Record-Level Sharing\" in z/OS DFSMS Using\nN   Data Sets and CICS Recovery and Restart Guide .\nN\nN-> Access Method Services does not use RLS. If an RLS keyword is\nN   specified on the DD statement of a file to be opened by AMS, the\nN   keyword will be ignored and the file will be opened and accessed in\nN   non-RLS mode.\nN\nN-> The CATALOG parameter will not be honored when you use IMPORT to\nN   restore a catalog. You can only import a catalog under the master\nN   catalog.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2501": {"ttr": 11521, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2501\nTDFSMS AMS\nT-Chapter 25.\nT-Syntax for IMPORT Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 25. IMPORT\nN------------------\nNSyntax for IMPORT Parameters\nN----------------------------\nD  IMPORT -\nN\nNRequired Parameters\nN-------------------\nD    INFILE(ddname) | /* Abbreviation: IFILE */ -\nD    INDATASET(entryname) /* Abbreviation: IDS */ -\nI      specifies the name of a DD statement or names the portable data\nI      set that contains a copy of the cluster, alternate index, or\nI      user catalog to be imported.\nN\nI      When importing into a nonexistent or an existing nonempty data\nI      set or catalog, the names specified for management class and\nI      storage class in the IMPORT command override the management class\nI      and storage class names from the portable data set. The class\nI      specifications and other attributes of the exported object are\nI      used to determine the SMS class specifications.\nN\nI      INFILE(ddname) /* Abbreviation: IFILE */: specifies the name of\nI        a DD statement that identifies the portable copy of the\nI        cluster, alternate index, or user catalog to be imported.\nN\nI        If a nonlabeled tape or a direct access data set created by\nI        DOS/VS access method services contains the copy, the following\nI        DCB parameters must be specified on the referenced DD\nI        statement:\nN\nI        -> BLKSIZE. If you specified BLKSIZE when the cluster or\nI           alternate index was exported, you must specify the same\nI           block size value for IMPORT.\nN\nI           If you did not specify a block size for EXPORT, a default\nI           value of 2048 was used. Consequently, if you do not specify\nI           BLKSIZE for IMPORT, IMPORT sets the block size to 2048.\nN\nI        -> LRECL. LRECL is based on the maximum record size of the\nI           exported VSAM data set. Maximum record size is determined by\nI           the value given by the maximum subparameter of the\nI           RECORDSIZE parameter of the DEFINE CLUSTER or\nI           DEFINE ALTERNATEINDEX command when the data set was defined.\nN\nI        -> RECFM. Must be VBS.\nN\nI      INDATASET(entryname) /* Abbreviation: IDS */: specifies the name\nI        of the portable data set that contains a copy of the cluster,\nI        alternate index, or user catalog to be imported.\nN\nI        If INDATASET is specified, the portable data set is dynamically\nI        allocated.\nN\nI        The entryname must be cataloged in a catalog that is accessible\nI        by the system into which the entry is to be imported.\nN\nD    OUTFILE(ddname) | /* Abbreviation: OFILE */ -\nD    OUTDATASET(outdsn) /* Abbreviation: ODS */ -\nI      specifies the name of a DD statement or the name of a cluster,\nI      alternate index, or user catalog to be imported.\nN\nI      When you use OUTFILE or OUTDATASET to describe the data set, one\nI      of the following conditions must be true:\nN\nI      -> The data set's entry is in the master catalog.\nN\nI      -> The qualifiers in the data set's qualified name are the\nI         catalog's name or alias.\nN\nI      -> You are importing a non-SMS-managed catalog:\nN\nI         -> When importing a cluster that was permanently exported,\nI            the OUTFILE parameter should be used.\nN\nI         -> If you are importing to a volume other than the original\nI            volume, the OBJECTS(VOLUMES) parameter must also be\nI            specified.\nN\nI      OUTFILE(ddname) /* Abbreviation: OFILE */: specifies the name of\nI        a DD statement that identifies the data set name and volumes of\nI        the cluster, alternate index, or user catalog that is to be\nI        imported.\nN\nI        If the object was permanently exported or you are importing to\nI        a volume other than the original volume, the DD statement\nI        specifies the name of the cluster or alternate index as DSNAME,\nI        the volume serial number, the device type, DISP=OLD, and\nI        AMP='AMORG'.\nN\nI        If the object has its data and index components on different\nI        device types, specify OUTDATASET instead of OUTFILE.\nN\nI        If the NEWNAME parameter is specified for the cluster or\nI        alternate index entry, the data set name on the DD statement\nI        must be the same as the new name. Failure to do so will result\nI        in the deletion of the original cluster.\nN\nI      OUTDATASET(outdsn) /* Abbreviation: ODS */: specifies the name of\nI        the cluster, alternate index, or user catalog that is to be\nI        imported. If you select OUTDATASET, the VSAM data set you\nI        identify is dynamically allocated.\nN\nI        You can use concatenated DD statements if the object was\nI        permanently exported and its data and index components are on\nI        different device types.\nN\nI        The first DD statement specifies the name of the cluster or\nI        alternate index as the DSNAME, the volume serial numbers and\nI       device type of the data component, DISP=OLD. The second DD\nI        statement specifies the name of the index component as the\nI        DSNAME, the volume serial numbers and device type of the index\nI        component, DISP=OLD.\nN\nI        If NEWNAME is specified for the cluster or alternate index\nI        entry, entryname must be the same as the new name. Also, this\nI        should be the same name as declared on the NEWNAME parameter.\nI        Failure to do so will result in the deletion of the original\nI        cluster.\nN\nNOptional Parameters\nN-------------------\nD    ALIAS | /* Abbreviation: ALS */ -\nD    NOALIAS /* Abbreviation: NALS */ -\nI      specifies whether any aliases are defined for the imported\nI      catalog. ALIAS causes the IMPORT command to retrieve the aliases\nI      that were exported and define them for the catalog being\nI      imported. The default, NOALIAS, will result in no aliases being\nI      imported.\nN\nI      If ALIAS is specified, and the catalog\nN\nI      -> exists but is empty, any aliases that exist in the system for\nI         that catalog are not deleted. Any aliases that exist on the\nI         portable data set are defined for the imported catalog if the\nI         aliases do not exist on the system. Any duplicate aliases will\nI         produce a duplicate alias message. IMPORT will print the list\nI         of aliases that were defined for the imported catalog.\nN\nI      -> exists and is not empty, the catalog is deleted and redefined\nI         from the portable data set. Any aliases that exist in the\nI         system are not deleted. Aliases on the portable data set are\nI         not defined but a list of the alias names from the portable\nI         data set are printed.\nN\nI      -> does not exist, the catalog is defined along with its aliases\nI         from the portable data set. The catalog will then be loaded\nI         from the portable data set.\nN\nI      Hint: Before restoring the catalog, you might want to run\nI      LISTCAT to determine the status of the catalog and its aliases.\nN\nD    ERASE | /* Abbreviation: ERAS */ -\nD    NOERASE /* Abbreviation: NERAS */ -\nI      specifies whether the component of the cluster or alternate index\nI      is to be erased (that is, overwritten with binary zeros). Use\nI      this parameter when you are importing the object into the system\nI      from which it was previously exported with the TEMPORARY option.\nI      This parameter overrides whatever was specified when the object\nI      was defined or last altered.\nN\nI      ERASE /* Abbreviation: ERAS */: overwrites the component with\nI        binary zeros when the cluster or alternate index is deleted.\nI        If ERASE is specified, the volume that contains the data\nI        component must be mounted.\nN\nI        If the cluster is protected by a RACF generic or discrete\nI        profile and the cluster is cataloged in a catalog, use RACF\nI        commands to specify an ERASE attribute as part of this profile\nI        so that the component is automatically erased upon deletion.\nN\nI      NOERASE /* Abbreviation: NERAS */: specifies that the component\nI        is not to be overwritten with binary zeros when the cluster or\nI        alternate index is deleted.\nN\nI        NOERASE resets only the indicator in the catalog entry that was\nI        created from a prior DEFINE or ALTER command. If the cluster is\nI        protected by a RACF generic or discrete profile that specifies\nI        the ERASE attribute and if the cluster is cataloged in a\nI        catalog, it is erased upon deletion. Use RACF commands to\nI        alter the ERASE attribute in a profile.\nN\nD    INTOEMPTY /* Abbreviation: IEMPTY */ -\nI      specifies that you are importing from the portable data set into\nI      an empty data set. If this parameter is not specified, an attempt\nI      to import into an empty data set is unsuccessful. If you import\nI      into an empty SMS-managed data set or catalog, the SMS class\nI      specifications in effect are not changed.\nN\nI      MANAGEMENTCLASS and STORAGECLASS from the portable data set will\nI      not be used, but they will be checked to see if they do exist on\nI      the current system. If they do not exist on the current system,\nI      you must use the OBJECT parameter to override the values.\nN\nI      The RACF profiles associated with the empty non-SMS-managed data\nI      set are retained.\nN\nI      You can use INTOEMPTY to import a previously SMS-managed data set\nI      into a predefined empty non-SMS-managed data set.\nN\nI      When importing into an empty data set, the SAVRAC|NOSAVRAC\nI      parameter applies only to the paths imported and successfully\nI      defined over the empty data set. If the define of an exported\nI      path is unsuccessful because a catalog entry with the same name\nI      already exists, the path on the portable data set is ignored.\nN\nD    LOCK | -\nD    UNLOCK -\nI      controls the setting of the catalog lock attribute, and therefore\nI        checks access to a catalog. LOCK or UNLOCK can be specified\nI        only when entryname identifies a catalog. If the LOCK|UNLOCK\nI        parameter is not specified, the catalog being imported will be\nI        unlocked. Before you lock a catalog, review the information on\nI        locking catalogs in z/OS DFSMS Managing Catalogs. Locking a\nI        catalog makes it inaccessible to all users without read\nI        authority to RACF FACILITY class profile IGG.CATLOCK (including\nI        users sharing the catalog on other systems).\nN\nI      LOCK: specifies that the catalog being imported is to be locked.\nI        Nonexisting catalogs are defined as locked. Existing unlocked\nI        catalogs are locked.\nN\nI        Locking the catalog restricts catalog access to authorized\nI        personnel. Specification of this parameter requires read\nI        authority to the profile name, IGG.CATLOCK, with class type\nI        FACILITY. Catalogs are usually locked only during catalog\nI        recovery operations.\nN\nI      UNLOCK: specifies that the catalog being imported is to be\nI        unlocked. Nonexisting catalogs are defined as unlocked.\nI        Existing locked catalogs are unlocked. If LOCK|UNLOCK is not\nI        specified, the catalog is unlocked.\nN\nD    OBJECTS( /* Abbreviation: OBJ */ -\nD      (entryname\nD        FILE(ddname) -\nD        MANAGEMENTCLASS(class) /* Abbreviation: MGMTCLAS */ -\nD        NEWNAME(newname) /* Abbreviation: NEWNM */ -\nD        STORAGECLASS(class) /* Abbreviation: STORCLAS */ -\nD        VOLUMES(volser ...) /* Abbreviation: VOL */ -\nD      ) -\nM      (...) -\nD    ) -\nI      specifies the new or changed attributes for the cluster,\nI      alternate index, any associated paths, or user catalog to be\nI      imported. Access method services matches each entryname you\nI      specify against the name of each object on the portable data set.\nI      When a match is found, the information specified by OBJECTS\nI      overrides the information on the portable data set.\nN\nI      If you specify NEWNAME when importing a catalog, an error message\nI      is issued and processing ends.\nN\nI      entryname: specifies the name of the data component, index\nI        component, cluster, alternate index, path, or user catalog for\nI        which attributes are being specified. The entryname must\nI        appear on the portable data set; otherwise, the parameter list\nI        is ignored.\nN\nI      FILE(ddname): specifies the name of a DD statement that\nI        identifies the volumes allocated to the data and index\nI        components of a key-sequenced cluster, an alternate index, or\nI        user catalog. This parameter is used when the data and index\nI        components reside on different device types. FILE can be coded\nI        twice within the OBJECTS parameter: once in the parameter set\nI        for the index component and once in a second parameter set for\nI        the data component. If you do not specify FILE, the required\nI        volumes are dynamically allocated.\nN\nI        The volumes must be mounted as permanently resident and\nI        reserved.\nN\nI      MANAGEMENTCLASS(class) /* Abbreviation: MGMTCLAS */: specifies a\nI        1-to-8 character management class name to be associated with\nI        the data set or catalog being imported. It must be associated\nI        with the entry name of the CLUSTER or the alternate index.\nN\nI      NEWNAME(newname) /* Abbreviation: NEWNM */: specifies the new\nI        name of an imported cluster or alternate index or its\nI        components, or an associated path. If you use NEWNAME, only\nI        the name specified as entryname is changed.\nN\nI        Restriction: The NEWNAME parameter is not valid when importing\nI        a catalog.\nN\nI        If you are specifying a new name for a cluster or alternate\nI        index that was exported with the TEMPORARY option and it is\nI        being imported back into the original system, you must also\nI        rename each of its components. If you are specifying NEWNAME\nI        for an SMS-managed cluster or alternate index, you must also\nI        rename each of its components, so that each component orients\nI        to the same user catalog.\nN\nD      STORAGECLASS(class) /* Abbreviation: STORCLAS */: specifies a\nI        1-to-8 character storage class name to be associated with the\nI        data set or catalog being imported. It must be associated with\nI        the entry name of the CLUSTER or the alternate index.\nN\nI      VOLUMES(volser ...) /( Abbreviation: VOL */: specifies either\nI        the volumes on which the cluster, alternate index, or user\nI        catalog is to reside, or the volume on which the user catalog\nI        resides. If VOLUMES is not coded, the original volume is the\nI        receiving volume.\nN\nI        SMS might not use candidate volumes for which you request\nI        specific volsers. In some cases, a user-specified volser for\nI        an SMS-managed data set can result in an error. To avoid\nI        candidate volume problems with SMS, you can request that SMS\nI        choose the specific volser used for a candidate volume. To do\nI        this, you can code an * for each volser that you request. If,\nI        however, you request both specified and unspecified volsers in\nI        the same command, you must enter the specified volsers first\nI        in the command syntax. The default is one volume. For\nI        SMS-managed data sets, you can specify up to 59 volume serial\nI        numbers.\nN\nI        Catalogs can only be on one volume, so only one volume should\nI        be specified when importing a user catalog.\nN\nI        If you use VOLUMES, you can specify the cluster or alternate\nI        index name, the data component name or the index component name\nI        as entryname with the following results:\nN\nI        -> If VOLUMES is specified with the cluster or alternate index\nI           name, the specified volume list is defined for the data\nI           component. For a key-sequenced cluster or alternate index,\nI           the specified volume list is also defined for the index\nI           component.\nN\nI        -> If VOLUMES is specified with the data component name, the\nI           specified volume list is defined for the data component.\nI           Any specification of VOLUMES with the cluster or alternate\nI           index name is overridden.\nN\nI        -> For a key-sequenced cluster or alternate index, if VOLUMES\nI           is specified with the index component name, the specified\nI           volume list is defined for the index component. Any\nI           specification of VOLUMES with the cluster or alternate\nI           index name is overridden.\nN\nI        If a guaranteed space storage class is assigned to the data\nI        sets (cluster) and volume serial numbers are specified, space\nI        is allocated on all specified volumes if the following\nI        conditions are met:\nN\nI        -> All volumes specified are in the same storage group.\nN\nI        -> The storage group to which these volumes belong is in the\nI           list of storage groups selected by the ACS routines for this\nI           allocation.\nN\nI        For clusters or alternate indexes, if multiple volumes are\nI        specified, they must be of the same device type. By repeating\nI        the OBJECTS parameter set for each component and including\nI        VOLUMES in each parameter set, you can have the data and index\nI        components on different volumes. Although the index and data\nI        components can reside on different device types, each volume\nI        of a multivolume component must be of the same type.\nN\nI        If the receiving volume is different from that which originally\nI        contained the cluster or alternate index, the job might end\nI        because of allocation problems. Each space allocation quantity\nI        is recorded in a catalog entry as an amount of cylinders or\nI        tracks even if RECORDS was specified in the DEFINE command.\nN\nI        When a cluster or alternate index is imported, the number of\nI        cylinders or tracks in the catalog entry is not modified, even\nI        though the object might be imported to reside on a device type\nI        other than that it was exported from. If an object is exported\nI        from a smaller DASD and imported to a larger DASD, more space\nI        is allocated than the object needs. Conversely, if an attempt\nI        is made to import an object that previously resided on a larger\nI        DASD to a smaller DASD, it might be unsuccessful.\nN\nI        You can avoid space allocation problems by defining an empty\nI        cluster or alternate index and identifying it as the target for\nI        the object being imported as described below:\nN\nI        -> Use the DEFINE command to define a new entry for the cluster\nI           or alternate index in the catalog to which it is to be\nI           moved. If space was allocated in RECORDS, you can specify\nI           the same quantity; if it was allocated in TRACKS or\nI           CYLINDERS, you must adjust the quantity for the new device\nI           type. If an entry already exists in the catalog for the\nI           object, you must delete that entry or use a different name\nI           in the DEFINE command.\nN\nI        -> Use the IMPORT command to load the portable data set into\nI           the newly defined cluster or alternate index. When IMPORT\nI           encounters an empty target data set, the exported catalog\nI           information is bypassed and only the data records are\nI           processed.\nN\nD    PURGE | /* Abbreviation: PRG */ -\nD    NOPURGE /* Abbreviation: NPRG */\nI      specifies whether the original cluster, alternate index, or\nI      catalog is to be deleted and replaced, regardless of the\nI      retention time specified in the TO or FOR parameter. Use this\nI      parameter when you are importing the object into the original\nI      system from which it was exported with the TEMPORARY option.\nN\nI      PURGE /* Abbreviation: PRG */: specifies that the object is to\nI        be deleted even if the retention period has not expired.\nN\nI      NOPURGE /* Abbreviation: NPRG */: specifies that the object is\nI        not to be deleted unless the retention period has expired.\nN\nD    SAVRAC | /* - */\nD    NOSAVRAC /* - */\nI      specifies, for a RACF-protected object, whether existing profiles\nI      are to be used or whether new profiles are to be created. This\nI      option applies only to discrete profiles. Generic profiles are\nI      not affected.\nN\nI      Exception: The SAVRAC|NOSAVRAC parameters are ignored if the\nI      INTOEMPTY parameter has been specified and the target data set\nI      exists and is empty.\nN\nI      SAVRAC: specifies that RACF data set profiles that already exist\nI        for objects being imported from the portable data set are to\nI        be used. Typically, you would specify this option when\nI        replacing a data set with a portable copy made with an\nI        EXPORT TEMPORARY operation. SAVRAC causes the existing profiles\nI        to be saved and used, rather than letting the system delete old\nI        profiles and create new, default profiles.\nN\nI        The profiles will actually be redefined by extracting\nI        information from existing profiles and adding caller\nI        attributes. You should ensure these added attributes are\nI        acceptable.\nN\nI        The ownership creation group and access list are altered by\nI        the caller of the SAVRAC option.\nN\nI        Requirement: Ensure that valid profiles do exist for clusters\nI        being imported when SAVRAC is specified. If this is not done,\nI        an invalid and improper profile might be \"saved\" and used\nI        inappropriately.\nN\nI      NOSAVRAC: specifies that new RACF data set profiles are to be\nI        created. This is usually the situation when importing a\nI        permanently exported cluster.\nN\nI        If the automatic data set protection option has been specified\nI        for you or if the exported cluster had a RACF indication in the\nI        catalog when it was exported, a profile is defined for the\nI        imported clusters.\nN\nI        If you import into a catalog containing a component with a\nI        duplicate name that is marked as having been temporarily\nI        exported, it, and any associated profiles, is deleted before\nI        the portable data set is imported.\nN\nM    CATALOG(catname) /* Abbreviation: CAT */\nI      specifies the name of the catalog in which the imported object\nI      is to be cataloged. This parameter is ignored if the imported\nI      object is a catalog data set.\nN\nI      catname: is the name of the catalog or an ALIAS of the catalog\nI        into which to define the entry being imported.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2511": {"ttr": 11524, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2511\nTDFSMS AMS\nT-Chapter 25.\nT-Example 1: Import a Cluster Utilizing SMS Keywords\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101619\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 25. IMPORT\nN------------------\nNExample 1: Import a Cluster Utilizing SMS Keywords\nN--------------------------------------------------\nD//IMPORT1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  IMPORT -\nD    INFILE(SOURCE) -\nD    OUTDATASET(K83.EXAMPLE.SMS.ESDS1) -\nD    OBJECTS( -\nD      (HRB.EXAMPLE.ESDS1 -\nD         NEWNAME(K83.EXAMPLE.SMS.ESDS1) -\nD         STORAGECLASS(FAST) -\nD      ) -\nD      (HRB.EXAMPLE.ESDS1.DATA -\nD         NEWNAME(K83.EXAMPLE.SMS.ESDS1.DATA) -\nD      ) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//SOURCE    DD DISP=OLD,DSNAME=VSAMBKUP.EXAMPLE.ESDS1(-1),\nD//             UNIT=(CART,,DEFER)\nN\nNThe JCL statements are:\nN-----------------------\nN-> SOURCE DD: describes the portable file, TAPE1, which resides on a\nN   magnetic tape file that is not mounted by the operator until\nN   access method services opens TAPE1 for processing.\nN\nNThe IMPORT parameters are:\nN--------------------------\nN-> INFILE: points to the SOURCE DD statement.\nN\nN-> OUTDATASET: gives the name of the renamed cluster. In this example,\nN   the data set either might not exist or, if it does exist, it must\nN   not be empty because INTOEMPTY is not specified.\nN\nN-> OBJECTS: changes some of the attributes for the object being\nN   imported:\nN\nN   -> HRB.EXAMPLE.ESDS1: identifies the entry-sequenced cluster as it\nN      is currently named on VSAMBKUP.EXAMPLE.ESDS1(-1).\nN\nN      -> NEWNAME: specifies that the cluster's name is to be changed to\nN         K83.EXAMPLE.SMS.ESDS1.\nN\nN      -> STORAGECLASS: specifies that the data set requires the storage\nN         class, FAST. If the data set K83.EXAMPLE.SMS.ESDS1 existed at\nN         the time of the import and was not empty, it would be deleted\nN         and redefined. If the data set is redefined, the storage class\nN         used for redefinition is derived by the storage class\nN         selection routines using FAST as input. The management class\nN         used for redefinition is derived by the management class\nN         selection routines using the management class in effect when\nN         the object was exported.\nN\nN   -> HRB.EXAMPLE.ESDS1.DATA: identifies the data component as it is\nN      currently named.\nN\nN      -> NEWNAME: specifies that the data component's name it to be\nN         changed to K83.EXAMPLE.SMS.ESDS1.DATA.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2512": {"ttr": 11526, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2512\nTDFSMS AMS\nT-Chapter 25.\nT-Example 2: Import a Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101628\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 25. IMPORT\nN------------------\nNExample 2: Import a Catalog\nN---------------------------\nD//IMPORT2  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  IMPORT -\nD    INFILE(SOURCE) -\nD    OUTDATASET(USERCAT.TESTDSNS) -\nD    ALIAS -\nD    LOCK -\nD    CATALOG(MCAT.PRODSYS)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//SOURCE    DD DISP=OLD,DSNAME=CATBACK.TESTDSNS(-1),\nD//             UNIT=(CART,,DEFER)\nN\nNThe JCL statements are:\nN-----------------------\nN-> SOURCE DD: describes the portable file, CATBACK.TESTDSNS(-1), which\nN   resides on a magnetic tape file that is not mounted by the\nN   operator until access method services opens SOURCE for processing.\nN\nNThe IMPORT parameters are:\nN--------------------------\nN-> INFILE: points to the SOURCE DD statement.\nN\nN-> OUTDATASET: gives the name of the catalog being imported. Access\nN   method services dynamically allocates the catalog.\nN\nN-> ALIAS: specifies that aliases that already exist in the master\nN   catalog for MCAT.PRODSYS are to be preserved and that the aliases\nN   on the portable file are to be listed. However, if MCAT.PRODSYS\nN   had not existed in the system when importing, the aliases on the\nN   portable file would have been defined in MCAT.PRODSYS.\nN\nN-> LOCK: specifies that the catalog being imported is locked.\nN\nN-> CATALOG: identifies the master catalog, ICFMAST1.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2513": {"ttr": 11777, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2513\nTDFSMS AMS\nT-Chapter 25.\nT-Example 3: Import a Key-Sequenced Cluster\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101639\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 25. IMPORT\nN------------------\nNExample 3: Import a Key-Sequenced Cluster\nN-----------------------------------------\nD//IMPORT3  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  IMPORT -\nD    INFILE(SOURCE) -\nD    OUTDATASET(BCN.EXAMPLE.KSDS1)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//SOURCE    DD DISP=OLD,DSNAME=VSAMBKUP.EXAMPLE.KSDS1(-1),\nD//             UNIT=(CART,,DEFER)\nN\nNThe JCL statements are:\nN-----------------------\nN-> SOURCE DD: describes the portable file, VSAMBKUP.EXAMPLE.KSDS1(-1),\nN   which resides on a magnetic tape file that is not mounted by the\nN   operator until access method services opens SOURCE for processing.\nN\nNThe IMPORT parameters are:\nN--------------------------\nN-> INFILE: points to the SOURCE DD statement.\nN\nN-> OUTDATASET: gives the name of the data set being imported.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2514": {"ttr": 11779, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2514\nTDFSMS AMS\nT-Chapter 25.\nT-Example 4: Import an Entry-Sequenced Cluster\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101649\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 25. IMPORT\nN------------------\nNExample 4: Import an Entry-Sequenced Cluster\nN--------------------------------------------\nD//IMPORT4  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  IMPORT -\nD    INFILE(SOURCE) -\nD    OUTDATASET(BCN.EXAMPLE.ESDS3) -\nD    OBJECTS( -\nD      (X98.EXAMPLE.ESDS1 -\nD         NEWNAME(BCN.EXAMPLE.ESDS3) -\nD         VOLUMES(VSER02) -\nD      ) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//SOURCE    DD DISP=OLD,DSNAME=VSAMBKUP.EXAMPLE.ESDS3(-1),\nD//             UNIT=(CART,,DEFER)\nN\nNThe JCL statements are:\nN-----------------------\nN-> SOURCE DD: describes the portable file, VSAMBKUP.EXAMPLE.ESDS3(-1),\nN   which resides on a magnetic tape file that is not mounted by the\nN   operator until access method services opens SOURCE for processing.\nN\nNThe IMPORT parameters are:\nN--------------------------\nN-> INFILE: points to the SOURCE DD statement.\nN\nN-> OUTDATASET: gives the name of the data set being imported.\nN\nN-> OBJECTS: changes some of the attributes for the object being\nN   imported:\nN\nN   -> X98.EXAMPLE.ESDS1: identifies the entry-sequenced cluster as it\nN      is currently named on VSAMBKUP.EXAMPLE.ESDS3(-1).\nN\nN      -> NEWNAME: specifies that the cluster's name is to be changed to\nN         BCN.EXAMPLE.ESDS3.\nN\nN      -> VOLUMES: identifies the new volume on which the cluster is to\nN         reside.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2515": {"ttr": 11781, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2515\nTDFSMS AMS\nT-Chapter 25.\nT-Example 5: Import a Cluster to a different Volume\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101700\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 25. IMPORT\nN------------------\nNExample 5: Import a Cluster to a different Volume\nN-------------------------------------------------\nD//IMPORT5  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  IMPORT -\nD    INFILE(SOURCE) -\nD    OUTDATASET(MPS.IMPORT.CLUSTER) -\nD    OBJECTS( -\nD      (MPS.IMPORT.CLUSTER -\nD         VOLUMES(VSER02) -\nD      ) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//SOURCE    DD DISP=OLD,DSNAME=VSAMBKUP.MPS.CLUSTER(-1),\nD//             UNIT=(CART,,DEFER)\nN\nNThe JCL statements are:\nN-----------------------\nN-> SOURCE DD: describes the portable file, VSAMBKUP.EXAMPLE.ESDS3(-1),\nN   which resides on a magnetic tape file that is not mounted by the\nN   operator until access method services opens SOURCE for processing.\nN\nNThe IMPORT parameters are:\nN--------------------------\nN-> INFILE: points to the SOURCE DD statement.\nN\nN-> OUTDATASET: gives the name of the data set being imported.\nN\nN-> OBJECTS: changes some of the attributes for the object being\nN   imported:\nN\nN   -> MPS.IMPORT.CLUSTER: identifies the key-sequenced cluster.\nN\nN      -> VOLUMES: identifies the new volume on which the cluster is to\nN         reside.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC259A": {"ttr": 11783, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC259A\nKIMPORT\nTDFSMS AMS\nT-Chapter 25.\nT-Repro Example: Repro a Key-Sequenced Cluster from an EXPORT\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101712\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 25. IMPORT\nN------------------\nNRepro Example: Repro a Key-Sequenced Cluster from an EXPORT\nN-----------------------------------------------------------\nMYou would first define the cluster.\nN\nD//REPRO9A  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  REPRO -\nD    INFILE(SOURCE) -\nD    OUTDATASET(BCN.EXAMPLE.KSDS1) -\nD    SKIP(15)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//SOURCE    DD DISP=OLD,DSNAME=VSAMBKUP.EXAMPLE.KSDS1(-1),\nD//             UNIT=(CART,,DEFER)\nN\nNThe JCL statements:\nN-------------------\nN-> SOURCE DD: describes the portable file, VSAMBKUP.EXAMPLE.KSDS1(-1),\nN   which resides on a magnetic tape file that is not mounted by the\nN   operator until access method services opens SOURCE for processing.\nN\nNThe IMPORT parameters are:\nN--------------------------\nN-> INFILE: points to the SOURCE DD statement.\nN\nN-> OUTDATASET: gives the name of the data set being imported.\nN\nN-> SKIP(7): Ignore the first 7 records that EXPORT uses to define\nN   the cluster.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC26": {"ttr": 11785, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC26\nTDFSMS AMS\nT-Chapter 26. IMPORT CONNECT\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 26. IMPORT CONNECT\nN--------------------------\nNThe IMPORT CONNECT command connects a user catalog or a tape volume\nNcatalog to a master catalog.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2601": {"ttr": 11787, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2601\nTDFSMS AMS\nT-Chapter 26.\nT-Syntax for IMPORT CONNECT Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-19953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 26. IMPORT CONNECT\nN--------------------------\nNSyntax for IMPORT CONNECT Parameters\nN------------------------------------\nD  IMPORT -\nN\nNRequired Parameters\nN-------------------\nD    CONNECT /* Abbreviation: CON */ -\nI      specifies that a user catalog or volume catalog is to be\nI      connected to the master catalog in the receiving system. When\nI      you use CONNECT, you must also use OBJECTS to provide the user\nI      or tape volume catalog's name, DASD volser, and DASD volume\nI      device type.\nN\nD    OBJECTS( /* Abbreviation: OBJ */ -\nD      (catname -\nD         DEVICETYPE(devtype) /* Abbreviation: DEVT */ -\nD         VOLUMES(volser) /* Abbreviation: VOL */ -\nD      ) -\nD    ) -\nI      specifies the user or tape volume catalog to be connected.\nN\nI      catname: specifies the name of the user or tape volume catalog\nI        being connected.\nN\nI      DEVICETYPE(devtype) /* Abbreviation: DEVT */: specifies the\nI        device type of the volume that contains the user or tape\nI        volume catalog that is to be connected. You can specify a\nI        device type for any direct access device that is supported.\nN\nI      VOLUMES(volser) /* Abbreviation: VOL */: specifies the volume\nI        containing the user or tape volume catalog.\nN\nNOptional Parameters\nN-------------------\nD    ALIAS | /* Abbreviation: ALS */ -\nI      specifies that alias associations for the already connected user\nI      catalog are to be retained.\nN\nI      The specification of ALIAS during an IMPORT CONNECT operation is\nI      intended for cases in which the volume serial information, or\nI      device type, or both, of the user catalog has changed since the\nI      DEFINE or previous IMPORT CONNECT operation. Specifying ALIAS\nI      results in an operation that is similar to an EXPORT\nI      DISCONNECT/IMPORT CONNECT sequence, except that any aliases that\nI      are of the user catalog are preserved.\nN\nD    VOLCATALOG /* Abbreviation: VOLCAT */ /* - */\nI      specifies that a volume catalog is to be connected.\nN\nM    CATALOG(catname) /* Abbreviation: CAT */\nI      specifies the name of the catalog into which to define the\nI      catalog you are connecting. This parameter is required when you\nI      want to direct the catalog's entry to a particular catalog other\nI      than the master catalog.\nN\nI      To specify catalog names for SMS-managed data sets, you must have\nI      authority from the RACF STGADMIN.IGG.DIRCAT FACILITY class.\nI      Search \"Storage Management Subsystem (SMS) Considerations\" for\nI      more information.\nN\nI      catname: is the name of the catalog or an ALIAS of the catalog\nI        into which to define the entry being imported. If you are\nI        import connecting a user catalog, the specified catalog is\nI        usually the master catalog.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2611": {"ttr": 11789, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2611\nTDFSMS AMS\nT-Chapter 26.\nT-Example 1: Import to Connect a User Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101737\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 26. IMPORT CONNECT\nN--------------------------\nNExample 1: Import to Connect a User Catalog\nN-------------------------------------------\nD//IMPCON1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  IMPORT -\nD    CONNECT -\nD    OBJECTS( -\nD      (USERCAT.TESTDSNS -\nD         DEVICETYPE(3390) -\nD         VOLUME(VSER02) -\nD      ) -\nD    ) -\nD    CATALOG(MCAT.PRODSYS)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe IMPORT CONNECT parameters are:\nN----------------------------------\nN-> CONNECT: specifies that the user catalog connector entry is to be\nN   built and put in the master catalog to connect the user catalog to\nN   the master catalog. CONNECT is required when a user catalog is being\nN   reconnected.\nN\nN-> OBJECTS: is required when a user catalog is being imported. The\nN   subparameters of OBJECTS identify the user catalog, devicetype, and\nN   volser.\nN\nN   -> USERCAT.TESTDSNS: builds a user catalog connector entry that\nN      identifies the user catalog USERCAT.TESTDSNS in the master\nN      catalog MCAT.PRODSYS.\nN\nN      -> DEVICETYPE: the device type of the user catalog's volume 3390.\nN\nN      -> VOLUME: the user catalog's volume, VSER02.\nN\nN-> CATALOG: identifies the master catalog, MCAT.PRODSYS.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC27": {"ttr": 11791, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC27\nTDFSMS AMS\nT-Chapter 27. LISTCAT\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 27. LISTCAT\nN-------------------\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2701": {"ttr": 12033, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2701\nTDFSMS AMS\nT-Chapter 27.\nT-Syntax for LISTCAT Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 27. LISTCAT\nN-------------------\nNSyntax for LISTCAT Parameters\nN-----------------------------\nD  LISTCAT /* Abbreviation: LISTC */ -\nN\nNRequired Parameters\nN-------------------\nN    The LISTCAT command has no required parameters.\nN\nN    When the LISTCAT command is entered as a job step (that is, not\nN    through TSO/E) and no parameters are specified, an entire catalog\nN    is listed. Search \"Catalog Search Order for LISTCAT\" for a\nN    description of how the catalog to be listed is selected.\nN\nN    For TSO/E users, when LISTCAT is invoked from a TSO/E terminal and\nN    no operands are specified, the prefix (the TSO/E userid) becomes\nN    the highest level of entryname qualification and only those entries\nN    with a matching highest level of qualification are listed. It is\nN    as though you specified:\nN\nN      LISTCAT LEVEL(TSO/E user prefix)\nN\nNOptional Parameters\nN-------------------\nD    ALIAS | -\nD    ALTERNATEINDEX | /* Abbreviation: AIX */ -\nD    CLUSTER | /* Abbreviation: CL */ -\nD    DATA | -\nD    GENERATIONDATAGROUP | /* Abbreviation: GDG */ -\nD    INDEX | /* Abbreviation: IX */ -\nD    LIBRARYENTRY | /* Abbreviation: LIBENTRY | LIBENT */ -\nD    NONVSAM | /* Abbreviation: NVSAM */ -\nD    PAGESPACE | /* Abbreviation: PGSPC */ -\nD    PATH | -\nD    USERCATALOG | /* Abbreviation: UCAT */ -\nD    VOLUMEENTRY | /* Abbreviation: VOLENTRY | VOLENT */ -\nI      specifies that certain types of entries are to be listed. Only\nI      those entries whose type is specified are listed. For example, if\nI      you specify CLUSTER but not DATA or INDEX, the cluster's entry is\nI      listed and its associated data and index entries are not listed.\nN\nI      If you use ENTRIES and also specify an entry type, the entryname\nI      is not listed unless it is of the specified type. You can specify\nI      as many entry types as desired. When you want to completely list\nI      a catalog, do not specify any entry type.\nN\nI      ALIAS: specifies that alias entries are to be listed.\nN\nI      ALTERNATEINDEX /* Abbreviation: AIX */: specifies that entries\nI        for alternate indexes are to be listed. If ALTERNATEINDEX is\nI        specified and DATA and INDEX are not also specified, entries\nI        for the alternate index's data and index components are not\nI        listed.\nN\nI      CLUSTER /* Abbreviation: CL */: specifies that cluster entries\nI        are to be listed. If CLUSTER is specified and DATA and INDEX\nI        are not also specified, entries for the cluster's data and\nI        index components are not listed.\nN\nI      DATA: specifies that entries for data components of clusters and\nI        alternate indexes are to be listed.\nN\nI        If a VSAM object's name is specified and DATA is coded, only\nI        the object's data component entry is listed. When DATA is the\nI        only entry type parameter coded, the catalog's data component\nI        is not listed.\nN\nI      GENERATIONDATAGROUP /* Abbreviation: GDG */: specifies that\nI        entries for generation data groups are to be listed. GDSs in\nI        the active state, existing at the time the LISTCAT command is\nI        entered, are identified as such when ALL is specified.\nN\nI      INDEX: Abbreviation: IX */: specifies that entries for index\nI        components of key-sequenced clusters and alternate indexes are\nI        to be listed. If a VSAM object's name is specified and INDEX\nI        is coded, only the object's index component entry is listed.\nI        When INDEX is the only entry type parameter coded, the\nI        catalog's index component is not listed.\nN\nI      LIBRARYENTRY /* Abbreviation: LIBENTRY | LIBENT */: specifies\nI        that tape library entries are to be listed.\nN\nI        libent: specifies the name of the tape library entry.\nN\nI      NONVSAM: /* Abbreviation: NVSAM */: specifies that entries for\nI        non-VSAM data sets are to be listed. If a generation data\nI        group's name and non-VSAM are specified, GDSs in the deferred,\nI        active, or rolled-off state, associated with the GDG are listed\nI        by specifying the ALL option.\nN\nI      PAGESPACE /* Abbreviation: PGSPC */: specifies that entries for\nI        page spaces are to be listed.\nN\nI      PATH: specifies that entries for paths are to be listed.\nN\nI      USERCATALOG /* Abbreviation: UCAT */: specifies that catalog\nI        connectors are to be listed. The user catalog connector entries\nI        are in the master catalog. (User catalog connector entries can\nI        also be in a user catalog, but the operating system does not\nI        recognize them when searching for a user catalog.)\nN\nI      VOLUMEENTRY /* Abbreviation: VOLENTRY | VOLENT */: specifies that\nI        tape library volume entries are to be listed. Prefix the name\nI        of the tape volume with the letter 'V'. For example 'Vxxxxx',\nI        where xxxxx equals the volume name. You can specify the\nI        CATALOG parameter to list tape volume entries from a specific\nI        catalog.\nN\nI        volent: specifies the name of the tape volume entry to be\nI          listed.\nN\nD    CREATION(days) /* Abbreviation: CREAT */ -\nI      specifies that entries of the indicated type (CLUSTER, DATA, and\nI      so on,) are to be listed only if they were created the specified\nI      number of days ago or earlier.\nN\nI      days: specifies the number of days ago. The maximum number that\nI        can be specified is 9999; zero indicates that all entries are\nI        to be listed.\nN\nD    ENTRIES(entryname ...) | /* Abbreviation: ENT */ -\nD    LEVEL(level) /* Abbreviation: LVL */ -\nD      NOCDILVL | CDILVL -\nI      ENTRIES: specifies the names of entries to be listed.\nN\nI      Unexpired GDSs that have been rolled off and recataloged can be\nI      displayed using LISTCAT ENTRIES(gdg.*), LISTCAT LEVEL(gdg) where\nI      gdg is the original name of the GDG, LISTCAT HISTORY, and\nI      LISTCAT ALL. Current and deferred generations are displayed as\nI      well as those that have been rolled off, in alphabetical order.\nN\nI      For TSO/E users, TSO/E will prefix the user ID to the specified\nI      data set name when the ENTRIES parameter is unqualified. The\nI      userid is not prefixed when the LEVEL parameter is specified.\nN\nI      Exception: You can use LISTCAT ENTRY LEVEL command only to list\nI      the cluster information of the entry. To list the data component\nI      information for the entry, you must use the LISTCAT ENTRY ALL\nI      command.\nN\nI      ENTRIES(entryname ...) /* Abbreviation: ENT */: specifies the\nI        name or generic name of each entry to be listed. (See the\nI        generic examples following the description of the LEVEL\nI        parameter.) When you want to list the entries that describe a\nI        user catalog, the catalog's volume must be physically mounted.\nI        You then specify the catalog's name as the entryname.\nN\nI      LEVEL(level) /* Abbreviation: LVL */: specifies that all entries\nI        that match the level of qualification specified by (level) are\nI        to be listed irrespective of the number of additional\nI        qualifiers.\nN\nI        If you specify a generic level name, only one qualifier\nI        replaces the *. The * must not be the last character specified\nI        in the LEVEL parameter. LEVEL(A.*) will give you an error\nI        message.\nN\nI        When you are using a generic name with the LEVEL parameter you\nI        can use a '%' . The'%'acts as a place holder for a single\nI        character. For example, you can specify the following:\nN\nI          LISTCAT LVL(DMP.S7P2.D%%%%%%.T%%%%%%.YDMJBA00)\nN\nI        LEVEL can result in more than one user catalog being searched\nI        if the multilevel alias search level is greater than 1. For\nI        example if TEST is an alias for UCAT.ONE and TEST.PROD is an\nI        alias for UCAT.TWO, and the multilevel alias search level is 2,\nI        LEVEL(TEST) results in both catalogs being searched, and data\nI        sets satisfying both aliases are listed. If TEST and\nI        TEST.PROD are not defined as aliases, and there are catalogs\nI        called TEST.UCAT1 and TEST.UCAT2, LEVEL(TEST) with a multilevel\nI        alias search level of 2 results in both catalogs, as well as\nI        the master catalog, being searched for data sets with a\nI        high-level qualifier of TEST. In this situation, where a level\nI        is being searched that is not also an alias, the master catalog\nI        and all user catalogs with the same high-level qualifier and a\nI        number of qualifiers equal to the multilevel alias search level\nI        are searched for data sets matching the level requested. This\nI        situation should not occur if proper aliases are defined for\nI        user catalogs.\nN\nI        When multiple catalogs are searched, the listed entries appear\nI        in sorted order within the catalogs to which they belong.\nN\nI        NOCDILVL | CDILVL:\nI          You can only specify NOCDILLVL | CDILVL parameters with the\nI          LEVEL parameter.\nN\nI          NOCDILVL: specifies that only the objects whose patterns\nI            match the LEVEL pattern be listed.\nN\nI            NOCDILVL is the default.\nN\nI          CDILVL: specifies that DATA and INDEX objects in CLUSTERs\nI            and AIXs be listed if at least one of the three objects\nI            matches the LEVEL pattern.\nN\nD    EXPIRATION(days) /* Abbreviation: EXPIR */ -\nI      specifies that entries of the indicated type (CLUSTER, DATA, and\nI      so on) are to be listed only if they will expire in the specified\nI      number of days or earlier.\nN\nI      days: specifies the number of days. The maximum number that can\nI        be specified is 9999 and it indicates that all entries are to\nI        be listed. Zero indicates that only entries that have already\nI        expired are to be listed.\nN\nD    FILE(ddname) -\nI      specifies the name of a DD statement that identifies the devices\nI      and volumes that contain information in the VVDS that is to be\nI      listed. If FILE is not specified, the volumes are dynamically\nI      allocated. The volumes must be mounted as permanently resident\nI      or reserved.\nN\nD    LIBRARY(libname) /* Abbreviation: LIB */ -\nI      specifies the name of the tape library entry for which tape\nI      volume entries are to be listed. Only those tape volumes that are\nI      entries in the specified tape library are listed.\nN\nI      libname: specifies a 1-to-8 character tape library name. You can\nI        use a partial tape library name followed by an * to list tape\nI        volume entries for more than one tape library.\nN\nD    NAME | -\nD    HISTORY | /* Abbreviation: HIST */ -\nD    VOLUME | /* Abbreviation: VOL */ -\nD    ALLOCATION | /* Abbreviation: ALLOC */ -\nD    ALL -\nI      specifies the fields to be included for each entry listed.\nI      Appendix B, \"Interpreting LISTCAT Output Listings\" on page 367\nI      in the manual, shows the listed information that results when you\nI      specify nothing (which defaults to NAME), HISTORY, VOLUME,\nI      ALLOCATION, or ALL. For SMS-managed data sets and catalogs, the\nI      SMS class names and last backup date are listed in addition to\nI      the other fields specified. The class definitions are not\nI      displayed.\nN\nI      Exception: For tape library and tape volume entries, only the\nI      ALL parameter is functional. If the HISTORY, VOLUME, and\nI      ALLOCATION parameters are specified for tape library and tape\nI      volume entries, these parameters are ignored. If ALL is not\nI      specified, only the names of the tape library or tape volume\nI      entries are listed.\nN\nI      NAME: specifies that the name and entry type of the entries are\nI        to be listed. Some entry types are listed with their associated\nI        entries. The entry type and name of the associated entry\nI        follow the listed entry's name. For details, see\nI        \"ASN: Associations Group\" on page 376 in Appendix B, and\nI        \"Interpreting LISTCAT Output Listings,\" on page 367.\nN\nI        For TSO/E users, only the name of each entry associated with\nI        the TSO/E user's prefix is listed when no other parameters are\nI        coded.\nN\nI      HISTORY /* Abbreviation: HIST */: specifies that only the\nI        following information is to be listed for each entry: name,\nI        entry type, ownerid, creation date, expiration date, and\nI        release. For GDG base and non-VSAM entries, status is also\nI        listed. For alternate indexes, \"SMS-managed (YES/NO)\" is also\nI        listed. For SMS-managed data sets, storage class, management\nI        class, data class, and last backup date are also listed. If the\nI        last backup date is unavailable, as in the case of migrated\nI        data sets, LISTCAT displays a field of all \"X's\" instead of an\nI        actual date.\nN\nI        HISTORY can be specified for CLUSTER, DATA, INDEX,\nI        ALTERNATEINDEX, PATH, GENERATIONDATAGROUP, PAGESPACE, and\nI        NONVSAM. See examples, Figure 14 on page 414 and Figure 15 on\nI        page 417 in the manual.\nN\nI        The OWNER-IDENT field in the HISTORY subset has been renamed\nI        DATASET-OWNER. This displays the contents of the data set owner\nI        field in the BCS. The ACCOUNT information is listed when the\nI        HISTORY or ALL parameter is specified.\nN\nI      VOLUME /* Abbreviation: VOL */: specifies that the information\nI        provided by specifying HISTORY, plus the volume serial numbers\nI        and device types allocated to the entries, are to be listed.\nI        Volume information is only listed for data and index component\nI        entries, non-VSAM data set entries, and user catalog connector\nI        entries.\nN\nI        For TSO/E users, only the name and volume serial numbers\nI        associated with the TSO/E user's prefix are listed when no\nI        other parameters are coded.\nN\nI      ALLOCATION /* Abbreviation: ALLOC */:  specifies that the\nI        information provided by specifying VOLUME plus detailed\nI        information about the allocation are to be listed. The\nI        information about allocation is listed only for data and index\nI        component entries.\nN\nI      ALL: specifies that all fields are to be listed, including fields\nI        that are not listed under the NAME, HISTORY, VOLUME, and\nI        ALLOCATION options, such as CA-RECLAIM, and fields under\nI        ATTRIBUTES, and STATISTICS.\nN\nI        When multiple catalogs are searched, the listed entries appear\nI        in sorted order within the catalogs to which they belong.\nN\nD    OUTFILE(ddname) /* Abbreviation: OFILE */ /* - */\nI      specifies a data set, other than the SYSPRINT data set, to\nI      receive the output produced by LISTCAT (that is, the listed\nI      catalog entries). Completion messages produced by access method\nI      services are sent to the SYSPRINT data set, along with your job's\nI      JCL and input statements.\nN\nI      ddname: identifies a DD statement that describes the alternate\nI        target data set. If OUTFILE is not specified, the entries are\nI        listed in the SYSPRINT data set. If an alternate data set is\nI        specified, it must meet the requirements in \"JCL DD Statement\nI        for an Alternate Target Data Set\".\nN\nM    CATALOG(mastercatname) /* Abbreviation: CAT */\nI      Specifies the name of the catalog that contains the entries to\nI      be listed. Search \"Catalog Search Order for LISTCAT\" for the\nI      order in which catalogs are searched.\nN\nI      This parameter cannot be used to LISTCAT a user catalog, and is\nI      ignored when you LISTCAT members of a partitioned data set or the\nI      tape library entry. To specify catalog names for SMS-managed data\nI      sets, you must have authority from the RACF STGADMIN.IGG.DIRCAT\nI      FACILITY class. Search \"Storage Management Subsystem (SMS)\nI      Considerations\" for more information.\nN\nI      catname: identifies the catalog that contains the entry to be\nI        listed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2711": {"ttr": 12035, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2711\nTDFSMS AMS\nT-Chapter 27.\nT-Example 1: List an SMS-Managed Data Set\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101759\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 27. LISTCAT\nN-------------------\nNExample 1: List an SMS-Managed Data Set\nN---------------------------------------\nD//LISTCAT1 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTCAT -\nD    ENTRIES(USER01.DATA1.EXAMPL) -\nD    CLUSTER -\nD    HISTORY\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe LISTCAT parameters are:\nN---------------------------\nN-> ENTRIES: specifies the object to be listed.\nN\nN-> CLUSTER: The CLUSTER parameter specifies that only the cluster\nN   component of the entry identified in the ENTRIES parameter are\nN   listed.\nN\nN-> HISTORY: The HISTORY parameter causes the display of the HISTORY\nN   information along with the SMS classes and last backup date.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2712": {"ttr": 12037, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2712\nTDFSMS AMS\nT-Chapter 27.\nT-Example 2: List ALL Key-Sequenced Cluster's Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101809\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 27. LISTCAT\nN-------------------\nNExample 2: List ALL Key-Sequenced Cluster's Entry\nN-------------------------------------------------\nD//LISTCAT2 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTCAT -\nD    ENTRIES(LCT.EXAMPLE.KSDS1) -\nD    CLUSTER -\nD    ALL\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe LISTCAT parameters are:\nN---------------------------\nN-> ENTRIES: specifies the object to be listed.\nN\nN-> CLUSTER: specifies that only the cluster entry is to be listed. If\nN   CLUSTER had not been specified, the cluster's data and index entries\nN   would also be listed.\nN\nN-> ALL: specifies that all fields of the cluster entry are to be\nN   listed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2713": {"ttr": 12039, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2713\nTDFSMS AMS\nT-Chapter 27.\nT-Example 3: Alter a KSDS, Then List the Modified Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101820\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 27. LISTCAT\nN-------------------\nNExample 3: Alter a KSDS, Then List the Modified Entry\nN-----------------------------------------------------\nD//LISTCAT3 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  ALTER -\nD    LCT.KSDATA -\nD    FREESPACE(10 10)\nD  IF LASTCC = 0 THEN DO\nD    LISTCAT -\nD      ENTRIES(LCT.MYDATA) -\nD      ALL\nD  END\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe ALTER parameters are:\nN-------------------------\nN-> LCT.KSDATA: specifies the object to be altered.\nN\nN-> FREESPACE: specifies the new free space percentages for the data\nN   component's control intervals and control areas.\nN\nNThe IF parameters are:\nN----------------------\nN-> IF: The IF ... THEN DO command sequence verifies that the ALTER\nN   command completed successfully before the LISTCAT command runs.\nN\nN-> END: terminates the IF ... THEN DO block.\nN\nNThe LISTCAT parameters are:\nN---------------------------\nN-> ENTRIES: specifies the entryname of the object being listed. Because\nN   LCT.MYDATA is a key-sequenced cluster, the cluster entry, its data\nN   component entry, and its indexcomponent entry are also listed.\nN\nN-> ALL: specifies that all fields of each entry are to be listed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2714": {"ttr": 12041, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2714\nTDFSMS AMS\nT-Chapter 27.\nT-Example 4: Wildcard List Catalog Entries\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101831\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 27. LISTCAT\nN-------------------\nNExample 4: Wildcard List Catalog Entries\nN----------------------------------------\nD//LISTCAT4 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTCAT -\nD    ENTRIES(GENERIC.*.BAKER) -\nD    ALL\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe LISTCAT parameters are:\nN---------------------------\nN-> ENTRIES: specifies the entryname of the object to be listed. Because\nN   GENERIC.*.BAKER is a generic name, more than one entry can be\nN   listed.\nN\nM   All three level entries that start with GENERIC and end with BAKER\nM   will be listed.\nN\nN-> ALL: specifies that all fields of each entry are to be listed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2715": {"ttr": 12043, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2715\nTDFSMS AMS\nT-Chapter 27.\nT-Example 5: List DATA component HISTORY\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101842\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 27. LISTCAT\nN-------------------\nNExample 5: List DATA component HISTORY\nN--------------------------------------\nD//LISTCAT5 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTCAT -\nD    ENTRIES(USER01.DATA1.EXMPL) -\nD    DATA -\nD    HISTORY\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe LISTCAT parameters are:\nN---------------------------\nN-> ENTRIES: specifies the name of the object to be listed.\nN\nN-> DATA: specifies that only the data component of the entry identified\nN   in the ENTRIES parameter is listed.\nN\nN-> HISTORY: specifies that the HISTORY information is displayed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2716": {"ttr": 12045, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2716\nTDFSMS AMS\nT-Chapter 27.\nT-Example 6: List a Tape Library Entry\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101853\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 27. LISTCAT\nN-------------------\nNExample 6: List a Tape Library Entry\nN------------------------------------\nD//LISTCAT6 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTCAT -\nD    LIBRARYENTRIES(ATLLIB1) -\nD    ALL\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe LISTCAT parameters are:\nN---------------------------\nN-> LIBRARYENTRIES: lists the tape library entry.\nN\nN   -> ATLLIB1: identifies ATLLIB1 as the entry to be listed.\nN\nN-> ALL: specifies that all information associated with the tape\nN   library entry ATLLIB1 is to be listed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2717": {"ttr": 12289, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2717\nTDFSMS AMS\nT-Chapter 27.\nT-Example 7: List Tape Volume Entries\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-101903\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 27. LISTCAT\nN-------------------\nNExample 7: List Tape Volume Entries\nN-----------------------------------\nD//LISTCAT7 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTCAT -\nD    VOLUMEENTRIES(VA*) -\nD    LIBRARY(ATLLIB1) -\nD    ALL\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe LISTCAT parameters are:\nN---------------------------\nN-> VOLUMEENTRIES: specifies that information relating to tape volume\nN   entries are to be listed.\nN\nN   -> VA*: only those whose names begin with the letters 'VA' are be\nN      listed.\nN\nN-> LIBRARY: specifies that only tape volume entries associated from a\nN   named library are to be listed.\nN\nN   -> ATLLIB1: identifies ATLLIB1 as the entry to be listed.\nN\nN-> ALL: specifies that all information associated with the tape\nN   library entry ATLLIB1 is to be listed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC28": {"ttr": 12291, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC28\nTDFSMS AMS\nT-Chapter 28. LISTDATA\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNThe LISTDATA command can be used to obtain the following reports:\nN\nN-> Subsystem Counters report, which is a record of the counters within\nN   the subsystem at the time the report is requested.\nN\nN-> Subsystem Status report, which is a record of the status within the\nN   subsystem at the time the report is requested.\nN\nN-> Pinned Track to Data Set Cross Reference report, which is a report\nN   of pinned tracks in cache and NVS cross-referenced to the data sets\nN   involved.\nN\nN-> Device Status report, which is a report of device status with both\nN   the channel connection address (CCA) and the director-to-device\nN   connection (DDC) address for each device. This report is useful in\nN   determining the state of devices that are used in a dual copy pair\nN   (usually called duplex pairs).\nN\nN-> RAID Rank Counters report, which contains data on logical, not\nN   physical, volumes on the RAID disk. This report is issued when\nN   COUNTS SUBSYSTEM or COUNTS ALL are specified.\nN\nN-> Space efficient volume status report, which is a report of the space\nN   efficient volumes on the subsystem.\nN\nN-> Extent pool configuration status report, which is a report of the\nN   extent pools on the storage controller or details about specific\nN   extent pools.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2801": {"ttr": 12293, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2801\nTDFSMS AMS\nT-Chapter 28.\nT-Syntax for LISTDATA COUNTS|STATUS|PINNED|DSTATUS|ACCESSCODE Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNSyntax for LISTDATA COUNTS|STATUS|PINNED|DSTATUS|ACCESSCODE Parameters\nN----------------------------------------------------------------------\nD  LISTDATA /* Abbreviation: LDATA */ -\nN\nD    COUNTS | /* Abbreviation: CNT */ -\nD    STATUS | /* Abbreviation: STAT */ -\nD    PINNED | /* Abbreviation: PIN */ -\nD    DSTATUS | /* Abbreviation: DSTAT */ -\nD    ACCESSCODE /* Abbreviation: ACODE */ -\nI      specifies that an operator message with the remote access code is\nI      issued or if any of the following reports are printed:\nN\nI      -> Subsystem counters report\nN\nI      -> Subsystem status report\nN\nI      -> Pinned track to data set cross reference report\nN\nI      -> Device status report\nN\nI      -> Space efficient volume status report\nN\nI      -> Extent pool configuration status report\nN\nI      COUNTS /* Abbreviation: CNT */: specifies that a Subsystem\nI        Counters report be printed. This parameter is the default.\nN\nI        Note: COUNTS can be used with DEVICE, SUBSYSTEM, or ALL.\nN\nI      STATUS /* Abbreviation: STAT */: specifies that a Subsystem\nI        Status report be printed.\nN\nI        Notes:\nN\nI        1. STATUS can be issued to an offline device by using the\nI           UNITNUMBER parameter.\nN\nI        2. STATUS can be used with WTO parameters\nN\nI        3. The data returned on a 3990 IDCAMS LISTDATA STATUS command\nI           equals the total cache size. The data returned on a 2105 or\nI           2107 control unit only returns the CACHEing information\nI           associated with the device. The complete size of CACHE must\nI           have 2 device requests done, one for each cluster of the\nI           control unit. See APAR OA34771 for more details.\nN\nI      PINNED /* Abbreviation: PIN */:  specifies that a Pinned Data\nI        Status report be printed. The basic syntax is :\nN\nI        LISTDATA PINNED FILE(XYZ) ALL|SUBSYSTEM|DEVICE\nN\nI        Notes:\nN\nI        1. PINNED can be used with DEVICE, SUBSYSTEM, or ALL.\nN\nI        2. PINNED DEVICE can be issued to an offline device by using\nI           the UNITNUMBER parameter.\nN\nI        3. The LISTDATA PINNED report produced in z/OS V1R10 identifies\nI           a range of pinned tracks associated with a data set. In\nI           prior releases the report listed each individual track and\nI           its associated data set name.\nN\nI        4. In z/OS V1R10, a 28-bit cylinder address, X'CCCCcccH', is\nI           used in the display. The 'ccc' are the high order 12-bits\nI           of the cylinder address and 'CCCC' are the low order 16-bits\nI           of the cylinder address. The 'H' is the 4-bit track address.\nI           The 'F' column in the display with an '*' value will\nI           designate when a 28-bit cylinder address is greater than\nI           65535 (X'FFFF').\nN\nI      DSTATUS /* Abbreviation: DSTAT */: specifies that a Device Status\nI        report with device identifier, channel connection addresses\nI        (CCA), and director-to-device connection (DDC) addresses is\nI        printed.\nN\nI        Notes:\nN\nI        1. DSTATUS can be used with DEVICE, SUBSYSTEM, or ALL.\nN\nI        2. DSTATUS does not show offline devices. To show offline\nI           devices, use the STATUS and UNITNUMBER parameters.\nN\nI      ACCESSCODE /* Abbreviation: ACODE */: specifies that the remote\nI        access authorization code is sent to the operator's console in\nI        message IDC01557I. The WTO message is issued for all storage\nI        clusters in the Storage Control.\nN\nI        Notes:\nN\nI        1. ACCESSCODE can also be used with the 3990 and 9390 Models\nI           1 and 2.\nN\nI        2. ACCESSCODE can be issued to an offline device by using the\nI           UNITNUMBER parameter.\nN\nI        3. On the operator panel, the storage cluster modem switch must\nI           be set to Enable for the storage cluster to which the\nI           command is directed. If the modem switch is not set to\nI           Enable, the Storage Control does not generate a remote\nI           support access code and IDC21558I is issued.\nN\nI        4. The remote support access code can be used to establish one\nI           remote support session within one hour of the time the code\nI           is generated. If a remote support session is not established\nI           within one hour, the Storage Control invalidates the remote\nI           support access code.\nN\nI        5. RACF* READ access authority to the FACILITY class resource\nI           STGADMIN.IDC.LISTDATA.ACCESSCODE is required to use the\nI           ACCESSCODE parameter.\nN\nI        6. The storage cluster modem switch must be in the ENABLE\nI           position to generate an access code.\nN\nNRequired Parameters\nN-------------------\nD    FILE(ddname) -\nI      specifies the name of a DD statement that identifies the device\nI      type and volume of a unit within the subsystem. For ddname,\nI      substitute the name of the DD statement identifying the device\nI      type and volume serial number.\nN\nD    VOLUME(volser) /* Abbreviation: VOL */ -\nI      specifies the volume serial number of a volume within the\nI      subsystem. For volser, substitute the volume serial number of\nI      the volume.\nN\nD    UNIT(unittype) -\nI      specifies the unit type of the subsystem. This parameter is\nI      required only when the VOLUME parameter is specified.\nN\nD    UNITNUMBER(devid) /* Abbreviation: UNUM */ -\nI      specifies the MVS device number. UNITNUMBER can be used with\nI      online or offline devices. The UNITNUMBER parameter is only\nI      accepted with STATUS, DEVICE PINNED, and ACCESSCODE.\nN\nI      Note: The UNITNUMBER parameter cannot be used for an online\nI      device in the \"Intervention Required\" state. For\nI      SPACEEFFICIENTVOL, the UNITNUMBER parameter cannot be used with\nI      SUBSYSTEM or ALL.\nN\nNOptional Parameters\nN-------------------\nD    DEVICE | /* Abbreviation: DEV */ -\nD    SUBSYSTEM | /* Abbreviation: SSYS or SUBSYS */ -\nD    ALL -\nI      specifies the scope of the Subsystem Counters report, Pinned\nI      Track report, or the Service Status report. One of these\nI      parameters is specified when the COUNTS, PINNED, or DSTATUS\nI      parameter is specified.\nN\nI      DEVICE /* Abbreviation: DEV */: specifies that only the addressed\nI        device is included in the Subsystem Counters report, Pinned\nI        Track report, or the Device Status report.\nN\nI      SUBSYSTEM /* Abbreviation: SSYS or SUBSYS */: specifies that all\nI        devices within the subsystem are included in the Subsystem\nI        Counters report, Pinned Track report, or Device Status report.\nN\nI      ALL: specifies that all devices on all like Storage Control\nI        models are included in the Subsystem Counters report, Pinned\nI        Track report, or the Device Status report. ALL is the default\nI        parameter when the COUNTS, DSTATUS or PINNED parameter is\nI        specified.\nN\nD    LEGEND | /* Abbreviation: LGND */ -\nD    NOLEGEND /* Abbreviation: NOLGND */ -\nI      specifies whether a legend be printed at the completion of the\nI      requested report.\nN\nI      LEGEND /* Abbreviation: LGND */: specifies that the headings and\nI        any abbreviations used in the report are listed. LEGEND can be\nI        specified for all printed reports.\nN\nI      NOLEGEND /* Abbreviation: NOLGND */:  specifies that the headings\nI        and any abbreviations used in the report are not listed.\nI        NOLEGEND is the default parameter value.\nN\nD    OUTFILE(ddname) | /* Abbreviation: OFILE */ -\nD    OUTDATASET(dsname) /* Abbreviation: ODS or OUTDS */ -\nI      OUTFILE /* Abbreviation: OFILE */: specifies the name of a DD\nI        statement identifying the data set used to contain the report.\nI        For ddname, substitute the name of the DD statement identifying\nI        the data set.\nN\nI      OUTDATASET /* Abbreviation: ODS or OUTDS */: specifies the name\nI        of the alternate target data set. For dsname, substitute the\nI        name of the data set to be used. The data set name must be\nI        cataloged.\nN\nI        Notes:\nN\nI        1. Erase the previous alternate target data set before\nI           specifying the OUTDATASET parameter. If you do not erase the\nI           old data set, your reports can be inaccurate. If a report\nI           seems to be in error, compare the time field with the time\nI           the job was submitted.\nN\nI        2. OUTFILE or OUTDATASET can be specified for all printed\nI           reports.\nN\nD    WTO\nI      WTO as used with LISTDATA STATUS specifies that information on\nI      the overall condition of the subsystem is sent to the system\nI      console and a full report is printed. For 3990 or 9390, other\nI      status messages can appear on the system console. That is, a\nI      message indicating the status of NVS and DASD fast write appears.\nI      If the addressed device is one of a duplex pair, a status message\nI      on the pair appears.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2802": {"ttr": 12295, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2802\nTDFSMS AMS\nT-Chapter 28.\nT-Syntax for LISTDATA SPACEEFFICIENTVOL Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNSyntax for LISTDATA SPACEEFFICIENTVOL Parameters\nN------------------------------------------------\nD  LISTDATA /* Abbreviation: LDATA */ -\nN\nD    SPACEEFFICIENTVOL /* Abbreviations: SEV | SEVOL | SEVOLUME */ -\nI      specifies a report of the Space Efficient (SE) status of the\nI      Space Efficient volume or volumes specified by DEVICE,\nI      SUBSYSTEM, or ALL. A scope of DEVICE will report the SE volume\nI      status of the device where the command was issued. A scope of\nI      SUBSYSTEM will report the SE volume status for every online\nI      Space Efficient Volume attached to the LSS where the addressed\nI      device is attached. A scope of ALL will report the SE status of\nI      every online space efficient volume. If no scope is specified,\nI      'ALL' will be used as the default.\nN\nI      Note: SPACEEFFICIENTVOL can be used with DEVICE, SUBSYSTEM, or\nI      ALL.\nN\nNRequired Parameters\nN-------------------\nD    FILE(ddname) -\nI      specifies the name of a DD statement that identifies the device\nI      type and volume of a unit within the subsystem. For ddname,\nI      substitute the name of the DD statement identifying the device\nI      type and volume serial number.\nN\nD    VOLUME(volser) /* Abbreviation: VOL */ -\nI      specifies the volume serial number of a volume within the\nI      subsystem. For volser, substitute the volume serial number of\nI      the volume.\nN\nD    UNIT(unittype) -\nI      specifies the unit type of the subsystem. This parameter is\nI      required only when the VOLUME parameter is specified.\nN\nD    UNITNUMBER(devid) /* Abbreviation: UNUM */ -\nI      specifies the MVS device number. UNITNUMBER can be used with\nI      online or offline devices. The UNITNUMBER parameter is only\nI      accepted with STATUS, DEVICE PINNED, and ACCESSCODE.\nN\nI      Note: The UNITNUMBER parameter cannot be used for an online\nI      device in the \"Intervention Required\" state. For\nI      SPACEEFFICIENTVOL, the UNITNUMBER parameter cannot be used with\nI      SUBSYSTEM or ALL.\nN\nNOptional Parameters\nN-------------------\nD    DEVICE -\nD      FBDEV(devicenumber) -\nD      LSS(lssid) -\nD    SUBSYSTEM | /* Abbreviation: SSYS or SUBSYS */ -\nD    ALL -\nI      specifies the scope of the Subsystem Counters report, Pinned\nI      Track report, or the Service Status report. One of these\nI      parameters is specified when the COUNTS, PINNED, or DSTATUS\nI      parameter is specified.\nN\nI      DEVICE /* Abbreviation: DEV */: specifies that only the addressed\nI        device is included in the Subsystem Counters report, Pinned\nI        Track report, or the Device Status report.\nN\nI        FBDEV(devicenumber): specifies the device for which the space\nI          efficient volume status report is requested. This is a\nI          subparameter of the DEVICE parameter. This device resides in\nI          the FB LSS identified in the LSS keyword. The valid value for\nI          devicenumber is two hexadecimal characters in the range 00-FF.\nN\nI        LSS(lssid): This subparameter of the DEVICE parameter specifies\nI          the FB LSS for which the space efficient volume status\nI          request is being issued. The valid value for lssid is a two\nI          hexidecimal character number in the range 00-FE. The CKD\nI          addressed device specified in the VOLUME or FILE or\nI          UNITNUMBER keyword provides orientation to a Storage Facility\nI          where the desired fixed block device resides in the device to\nI          where the CKD channel program is issued against.\nN\nI      SUBSYSTEM /* Abbreviation: SSYS or SUBSYS */: specifies that all\nI        devices within the subsystem are included in the Subsystem\nI        Counters report, Pinned Track report, or Device Status report.\nN\nI      ALL: specifies that all devices on all like Storage Control\nI        models are included in the Subsystem Counters report, Pinned\nI        Track report, or the Device Status report. ALL is the default\nI        parameter when the COUNTS, DSTATUS or PINNED parameter is\nI        specified.\nN\nD    LEGEND | /* Abbreviation: LGND */\nD    NOLEGEND /* Abbreviation: NOLGND */\nI      specifies whether a legend be printed at the completion of the\nI      requested report.\nN\nI      LEGEND /* Abbreviation: LGND */: specifies that the headings and\nI        any abbreviations used in the report are listed. LEGEND can be\nI        specified for all printed reports.\nN\nI      NOLEGEND /* Abbreviation: NOLGND */:  specifies that the headings\nI        and any abbreviations used in the report are not listed.\nI        NOLEGEND is the default parameter value.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2803": {"ttr": 12297, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2803\nTDFSMS AMS\nT-Chapter 28.\nT-Syntax for LISTDATA SPACEEFFICIENTVOL Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNSyntax for LISTDATA SPACEEFFICIENTVOL Parameters\nN------------------------------------------------\nD  LISTDATA /* Abbreviation: LDATA */ -\nN\nD    EXTENTPOOLCONFIG -\nD    /* Abbreviations: EPC | EPCONFIGURATION | EPCONFIG */ -\nI      specifies a configuration status report of the extent pools\nI      configured to the subsystem.\nN\nNRequired Parameters\nN-------------------\nD    FILE(ddname) -\nI      specifies the name of a DD statement that identifies the device\nI      type and volume of a unit within the subsystem. For ddname,\nI      substitute the name of the DD statement identifying the device\nI      type and volume serial number.\nN\nD    VOLUME(volser) /* Abbreviation: VOL */ -\nI      specifies the volume serial number of a volume within the\nI      subsystem. For volser, substitute the volume serial number of\nI      the volume.\nN\nD    UNIT(unittype) -\nI      specifies the unit type of the subsystem. This parameter is\nI      required only when the VOLUME parameter is specified.\nN\nD    UNITNUMBER(devid) /* Abbreviation: UNUM */ -\nI      specifies the MVS device number. UNITNUMBER can be used with\nI      online or offline devices. The UNITNUMBER parameter is only\nI      accepted with STATUS, DEVICE PINNED, and ACCESSCODE.\nN\nI      Note: The UNITNUMBER parameter cannot be used for an online\nI      device in the \"Intervention Required\" state. For\nI      SPACEEFFICIENTVOL, the UNITNUMBER parameter cannot be used with\nI      SUBSYSTEM or ALL.\nN\nNOptional Parameters\nN-------------------\nD    EXTENTPOOLID(id) -\nI      A detailed report for a specific Extent Pool can be obtained by\nI      specifying EXTENTPOOLID on the request.\nN\nD    MAPVOLUME | -\nD    SUMMARY -\nI      specifies a summary report or a detailed report for a specific\nI      Extent Pool.\nN\nI      MAPVOLUME: specifies a volume map report for Space Efficient CKD\nI        or FB volume(s) associated with a specific Extent Pool. The\nI        volume map will contain either all of the even LSS's or all of\nI        the odd LSS'sdevices depending on the EXTENTPOOLID used in the\nI        request.\nN\nI      SUMMARY: The SUMMARY report will provide a summary report for\nI        each of the Extent Pools configured on the subsystem. A\nI        detailed report for a specific Extent Pool can be obtained by\nI        specifying EXTENTPOOLID on the request.\nN\nD    LEGEND | /* Abbreviation: LGND */\nD    NOLEGEND /* Abbreviation: NOLGND */\nI      specifies whether a legend be printed at the completion of the\nI      requested report.\nN\nI      LEGEND /* Abbreviation: LGND */: specifies that the headings and\nI        any abbreviations used in the report are listed. LEGEND can be\nI        specified for all printed reports.\nN\nI      NOLEGEND /* Abbreviation: NOLGND */:  specifies that the headings\nI        and any abbreviations used in the report are not listed.\nI        NOLEGEND is the default parameter value.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2811": {"ttr": 12299, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2811\nTDFSMS AMS\nT-Chapter 28.\nT-Example 1: Listing Subsystem Counters for a Particular Device\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102001\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNExample 1: Listing Subsystem Counters for a Particular Device\nN-------------------------------------------------------------\nD//LSTDATA1 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTDATA -\nD    COUNTS -\nD    DEVICE -\nD    FILE(LISTVOL1)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//LISTVOL1  DD DISP=SHR,UNIT=3390,VOL=SER=VOL123\nN\nNThe JCL statements are:\nN-----------------------\nN-> LISTVOL1: statement specifies a 3390 unit and volume VOL123.\nN\nNThe LISTDATA parameters are:\nN----------------------------\nN-> COUNTS: which specifies that a Subsystem Counters report be printed.\nN\nN-> DEVICE: which specifies that the Subsystem Counters report include\nN   only subsystem counters for the addressed device.\nN\nN-> FILE: which specifies LISTVOL1 as the DD statement that allocates\nN   a 3390 unit and volume VOL123.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2812": {"ttr": 12545, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2812\nTDFSMS AMS\nT-Chapter 28.\nT-Example 2: Listing Subsystem Counters for All Devices within a\nT-Subsystem\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102011\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNExample 2: Listing Subsystem Counters for All Devices within\nNa Subsystem\nN------------------------------------------------------------\nD//LSTDATA2 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTDATA -\nD    COUNTS -\nD    OUTFILE(OUTDD) -\nD    SUBSYSTEM -\nD    UNIT(3390) -\nD    VOLUME(VOL002)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//OUTDD     DD DISP=(NEW,CATLG),DSN=&SYSUID..AMSC2812.REPORT,\nD//             UNIT=3390,VOL=SER=OUTVOL,\nD//             SPACE=(TRK,(5,5),RLSE),\nD//             DCB=(RECFM=VBA,BLKSIZE=0,LRECL=125)\nN\nNThe JCL statements are:\nN-----------------------\nN-> OUTDD: statement allocates the output data set\nN   (DSN=&SYSUID..AMSC2812.REPORT) on disk (UNIT=3390) for use by the\nN   LISTDATA command. The DCB parameter is required for the alternate\nN   output data set if it is new.\nN\nNThe LISTDATA parameters are:\nN----------------------------\nN-> COUNTS: which specifies that a Subsystem Counters report be printed.\nN\nN-> OUTFILE: which specifies OUTDD as the name of the DD statement\nN   identifying the data set used to contain the report.\nN\nN-> SUBSYSTEM: which specifies that the Subsystem Counters report\nN   include counters for devices within the subsystem.\nN\nN-> UNIT: which specifies a 3390 unit.\nN\nN-> VOLUME: which specifies volume VOL002.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2813": {"ttr": 12547, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2813\nTDFSMS AMS\nT-Chapter 28.\nT-Example 3: Listing Subsystem Counters for All Devices on\nT-Similar Subsystems\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102021\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNExample 3: Listing Subsystem Counters for All Devices on\nNSimilar Subsystems\nN--------------------------------------------------------\nMModified by Kenneth Tomiak because IBM'S example will fail with:\nM  IKJ56228I DATA SET KTOMIAK.AMSC2812.REPORT NOT IN CATALOG OR CATALOG\nM  IKJ56228I CAN NOT BE ACCESSED\nN\nD//LSTDATA3 JOB ...\nD//STEP1   EXEC PGM=IEFBR14\nD//OUTDS     DD DISP=(NEW,CATLG),DSN=&SYSUID..AMSC2812.REPORT,\nD//             UNIT=3390,VOL=SER=OUTVOL,\nD//             SPACE=(TRK,(5,5),RLSE),\nD//             DCB=(RECFM=VBA,BLKSIZE=0,LRECL=125)\nD//*\nD//STEP2   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTDATA -\nD    COUNTS -\nD    ALL -\nD    OUTDATASET(KTOMIAK.AMSC2812.REPORT) -\nD    UNIT(3390) -\nD    VOLUME(VOL002)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNSTEP1:\nN------\nNThe JCL statements are:\nN-----------------------\nN-> OUTDS: statement allocates the output data set\nN   (DSN=&SYSUID..AMSC2812.REPORT) on a 3390 for use by the LISTDATA\nN   command. If an output data set is not allocated, the report is\nN   printed on the SYSPRINT data set. The DCB parameter is required for\nN   the alternate output data set. The output data set is cataloged in\nN   a usercatalog (DISP=(NEW,CATLG)). This DD statement allocates five\nN   tracks for the output data set and, if more space is required for\nN   the report, the space is extended in increments of five tracks.\nN\nNSTEP2:\nN------\nNThe LISTDATA parameters are:\nN----------------------------\nN-> COUNTS: which specifies that a Subsystem Counters report be printed.\nN\nN-> ALL: which specifies that the Subsystem Counters report include\nN   subsystem counters for all devices on all like subsystems.\nN\nN-> OUTDATASET: which identifies KTOMIAK.AMSC2812.REPORT as the output\nN   data set used for the report; rather than the SYSPRINT data set.\nN\nM     This is a lengthy way to accomplish what the simpler example 2\nN     does. It also requires you name the output data set twice.\nN\nN-> UNIT: which specifies a 3390 unit.\nN\nN-> VOLUME: which specifies volume VOL002.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2814": {"ttr": 12549, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2814\nTDFSMS AMS\nT-Chapter 28.\nT-Example 4: Listing Subsystem Status\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102031\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNExample 4: Listing Subsystem Status\nN-----------------------------------\nD//LSTDATA4 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTDATA -\nD    STATUS -\nD    FILE(LISTVOL2) -\nD    WTO\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//LISTVOL2  DD DISP=SHR,UNIT=3390,VOL=SER=VOL269\nN\nNThe JCL statements are:\nN-----------------------\nN-> LISTVOL2: specifies a 3390 unit for which subsystem status is\nN   reported.\nN\nNThe LISTDATA parameters are:\nN----------------------------\nN-> STATUS: which specifies that a Subsystem Status report be printed.\nN\nN-> FILE: which specifies LISTVOL2 as the DD statement that allocates a\nN   3390 unit and volume VOL269.\nN\nN-> WTO: which specifies that informational messages on the system\nN   console are displayed indicating the status of the subsystem, NVS,\nN   DASD fast write, and the duplex pair if the addressed device is one\nN   of a duplex pair. For example, WTO can produce messages similar to\nN   the following:\nN\nM     IDC01552I SUBSYSTEM CACHING STATUS: ACTIVE-DEV X'123'\nM     IDC01553I NVS STATUS: DEACTIVATED-PROCESSOR/SF-DEV X'123'\nM     IDC01554I DASD FAST WRITE STATUS: ACTIVE-DEV X'123'\nM     IDC01555I DUPLEX PAIR STATUS: PENDING-PRI DEV X'123' SEC DEV X'01'\nM     IDC01556I CACHE FAST WRITE STATUS: DISABLED-DEV X'123'\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2815": {"ttr": 12551, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2815\nTDFSMS AMS\nT-Chapter 28.\nT-Example 5: Listing Pinned Data\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102041\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNExample 5: Listing Pinned Data\nN------------------------------\nD//LSTDATA5 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTDATA -\nD    PINNED -\nD    FILE(LISTVOL2)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//LISTVOL2  DD DISP=SHR,UNIT=3390,VOL=SER=VOL269\nN\nNThe JCL statements are:\nN-----------------------\nN-> LISTVOL2: specifies a 3390 unit for which subsystem status is\nN   reported.\nN\nNThe LISTDATA parameters are:\nN----------------------------\nN-> PINNED: which specifies that a pinned track to data set cross\nN   reference report is printed for all devices on all like models of\nN   IBM Storage Controls.\nN\nN-> FILE: which specifies LISTVOL2 as the DD statement that allocates a\nN   3390 unit and volume VOL269.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2816": {"ttr": 12553, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2816\nTDFSMS AMS\nT-Chapter 28.\nT-Example 6: Listing Device Status\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102050\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNExample 6: Listing Device Status\nN--------------------------------\nD//LSTDATA6 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTDATA -\nD    DSTATUS -\nD    FILE(LISTVOL2) -\nD    SUBSYSTEM\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//LISTVOL2  DD DISP=SHR,UNIT=3390,VOL=SER=VOL269\nN\nNThe JCL statements are:\nN-----------------------\nN-> LISTVOL2: specifies a 3390 unit for which subsystem status is\nN   reported.\nN\nNThe LISTDATA parameters are:\nN----------------------------\nN-> DSTATUS: which specifies that a device status report is printed.\nN\nN-> FILE: which specifies LISTVOL2 as the DD statement that allocates a\nN   3390 unit and volume VOL269.\nN\nN-> SUBSYSTEM: which specifies that a Device Status report includes\nN   status for devices within the subsystem.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2817": {"ttr": 12555, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2817\nTDFSMS AMS\nT-Chapter 28.\nT-Example 7: Generating a Remote Support Access Code\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102102\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNExample 7: Generating a Remote Support Access Code\nN--------------------------------------------------\nD//LSTDATA7 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTDATA -\nD    ACCESSCODE -\nD    FILE(LISTVOL1)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//LISTVOL1  DD DISP=SHR,UNIT=3390,VOL=SER=VOL123\nN\nNThe JCL statements are:\nN-----------------------\nN-> LISTVOL1: specifies a 3390 unit for which subsystem status is\nN   reported.\nN\nNThe LISTDATA parameters are:\nN----------------------------\nN-> ACCESSCODE: which specifies that the 3990 is to generate a remote\nN   support access code if the storage cluster modem switch is set to\nN   Enable.\nN\nN-> FILE: which specifies LISTVOL1 as the DD statement that allocates a\nN   3390 unit and volume VOL123.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2818": {"ttr": 12557, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2818\nTDFSMS AMS\nT-Chapter 28.\nT-Example 8: Reporting Space Efficient Status for a CKD device\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102112\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNExample 8: Reporting Space Efficient Status for a CKD device\nN------------------------------------------------------------\nD//LSTDATA8 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTDATA -\nD    SEV /* SPACEEFFICIENTVOL */ -\nD    DEV /* DEVICE */ -\nD    FILE(SEFLC1)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//SEFLC1    DD DISP=SHR,UNIT=3390,VOL=SER=SE7A55\nN\nNThe JCL statements are:\nN-----------------------\nN-> SEFLC1: specifies a 3390 unit for which subsystem status is\nN   reported.\nN\nNThe LISTDATA parameters are:\nN----------------------------\nN-> SEV: which specifies that a space efficient status report is\nN   printed.\nN\nN-> DEV: which specifies that a space efficient status report includes\nN   status for a device specified by FILE parameter.\nN\nN-> FILE: which specifies SEFLC1 as the DD statement that allocates a\nN   3390 unit and volume SE7A55.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2819": {"ttr": 12559, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2819\nTDFSMS AMS\nT-Chapter 28.\nT-Example 9: Reporting Space Efficient Status for a Fixed Block device\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102122\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNExample 9: Reporting Space Efficient Status for a Fixed Block device\nN--------------------------------------------------------------------\nD//LSTDATA9 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTDATA -\nD    SEV /* SPACEEFFICIENTVOL */ -\nD    DEV /* DEVICE */ -\nD    FBDEV(X'3D') -\nD    LSS(X'25') -\nD    FILE(SEFLC1)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//SEFLC1    DD DISP=SHR,UNIT=3390,VOL=SER=SE7A9B\nN\nNThe JCL statements are:\nN-----------------------\nN-> SEFLC1: specifies a 3390 unit for which subsystem status is\nN   reported.\nN\nNThe LISTDATA parameters are:\nN----------------------------\nN-> SEV: which specifies that a space efficient status report is\nN   printed.\nN\nN-> DEV: which specifies that a space efficient status report includes\nN   status for a single device.\nN\nN-> FBDEV: which specifies X'3D' as a device number of a Fixed Block\nN   device within the logical subystem specifies by the LSS parameter.\nN\nN-> LSS: which specifies X'25' as a logical subsystem for a Fixed Block\nN   device.\nN\nN-> FILE: which specifies SEFLC1 as the DD statement that allocates a\nN   3390 unit and volume SE7A9B. The device specified in this DD\nN   statement is used as an I/O device to obtain the space efficient\nN   status of a Fixed Block device.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2820": {"ttr": 12561, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2820\nTDFSMS AMS\nT-Chapter 28.\nT-Example 10: Reporting extent pool configuration status\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102133\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 28. LISTDATA\nN--------------------\nNExample 10: Reporting extent pool configuration status\nN------------------------------------------------------\nD//LSTDAT10 JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTDATA -\nD    EPC /* EXTENTPOOLCONFIG */ -\nD    SUMMARY -\nD    FILE(SEFLC1)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//SEFLC1    DD DISP=SHR,UNIT=3390,VOL=SER=SE7A53\nN\nNThe JCL statements are:\nN-----------------------\nN-> SEFLC1: specifies a 3390 unit for which extent pool configuration\nN   summary status is reporting.\nN\nNThe LISTDATA parameters are:\nN----------------------------\nN-> EPC: which specifies that an extent pool configuration status\nN   report is printed.\nN\nN-> SUMMARY: which requests a summary report for each of the extent\nN   pools configured on the subsystem.\nN\nN-> FILE: which specifies SEFLC1 as the DD statement that allocates a\nN   3390 unit and volume SE7A53. The device specified in this DD\nN   statement is used as an I/O device to obtain the space efficient\nN   status of a Fixed Block device.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC29": {"ttr": 12563, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC29\nTDFSMS AMS\nT-Chapter 29. PRINT\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 29. PRINT\nN-----------------\nNThe PRINT command prints VSAM data sets, non-VSAM data sets, and\nNcatalogs.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2901": {"ttr": 12801, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2901\nTDFSMS AMS\nT-Chapter 29.\nT-Syntax for PRINT Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 29. PRINT\nN-----------------\nNSyntax for PRINT Parameters\nN---------------------------\nD  PRINT -\nN\nNRequired Parameters\nN-------------------\nD    INFILE(ddname) | /* Abbreviation: IFILE */ -\nD    INDATASET(entryname) /* Abbreviation: IDS */ -\nI      identifies the data set or component to be printed. If the\nI      logical record length of a non-VSAM source data set is greater\nI      than 32,760 bytes, your PRINT command ends with an error message.\nN\nI      INFILE(ddname) /* Abbreviation: IFILE */: specifies the name of\nI        the DD statement that identifies the data set or component to\nI        be printed. You can list a base cluster in alternate-key\nI        sequence by specifying a path name as the data set name in the\nI        DD statement.\nN\nI      INDATASET(entryname) /* Abbreviation: IDS */: specifies the name\nI        of the data set or component to be printed. If INDATASET is\nI        specified, the entryname is dynamically allocated.\nN\nI        You can list a base cluster in alternate-key sequence by\nI        specifying a path name as entryname.\nN\nI        If you are printing a member of a non-VSAM partitioned data\nI        set, the entryname must be specified in the format:\nN\nI          pdsname(membername)\nN\nNOptional Parameters\nN-------------------\nD    CHARACTER | /* Abbreviation: CHAR */ -\nD    DUMP | -\nD    HEX -\nI      specifies the format of the listing.\nN\nI      For the CHARACTER and DUMP parameters, setting the GRAPHICS\nI      parameter of the PARM command determines which bit patterns\nI      print as characters. Search \"PARM Command\" for more information.\nN\nI      Note: When you print non-VSAM variable length records, the\nI      4-byte record descriptor word (RDW) that appears at the beginning\nI      of each record is not printed.\nN\nI      CHARACTER /* Abbreviation: CHAR */: specifies that each byte in\nI        the logical record is to be printed as a character. Bit\nI        patterns not defining a character are printed as periods. Key\nI        fields are listed in character format. CHARACTER must be\nI        specified if data contains DBCS characters. DUMP and HEX cannot\nI        be specified with DBCS.\nN\nI      DUMP: specifies that each byte in the logical record is to be\nI        printed in both hexadecimal and character format. In the\nI        character portion of the listing, bit patterns not defining a\nI        character are printed as periods. Key fields are listed in\nI        hexadecimal format.\nN\nI      HEX: specifies that each byte in the logical record is to be\nI        printed as two hexadecimal digits. Key fields are listed in\nI        hexadecimal format.\nN\nD    DBCS -\nI      specifies that the data to be printed includes DBCS characters.\nI      Bytes from the logical record are printed in their respective\nI      characters (that is, SBCS or DBCS format). Bit patterns not\nI      defining a character are printed as periods. When DBCS is\nI      specified, PRINT checks during printing to ensure that the DBCS\nI      data meets DBCS criteria unless SKIPDBCSCHECK or NODBCSCHECK is\nI      also specified. For more information on DBCS support, see\nI      z/OS DFSMS Using Data Sets.\nN\nD    FROMKEY(key) | /* Abbreviation: FKEY */ -\nD    FROMADDRESS(address) | /* Abbreviation: FADDR */ -\nD    FROMNUMBER(number) | /* Abbreviation: FNUM */ -\nD    SKIP(number) -\nI      locates the data set being listed where listing is to start. If\nI      you do not specify a value, the listing begins with the first\nI      logical record in the data set or component.\nN\nI      The only value that can be specified for a SAM data set is SKIP.\nN\nI      Use FROMADDRESS and TOADDRESS to specify a partial print range\nI      for a linear data set cluster. If required, printing is rounded\nI      up to 4096-byte boundaries.\nN\nI      The starting delimiter must be consistent with the ending\nI      delimiter. For example, if FROMADDRESS is specified for the\nI      starting location, use TOADDRESS to specify the ending location.\nI      The same is true for FROMKEY and TOKEY, and FROMNUMBER and\nI      TONUMBER.\nN\nI      FROMKEY(key) /* Abbreviation: FKEY */: specifies the key of the\nI        first record you want listed. You can specify generic keys\nI        (that is, a portion of the key followed by *). If you specify\nI        generic keys, listing begins at the first record with a key\nI        matching that portion of the key you specified.\nN\nI        You cannot specify a key longer than that defined for the data\nI        set. If you do, the listing is not done. If the specified key\nI        is not found, the next higher key is used as the starting\nI        point for the listing.\nN\nI        FROMKEY can be specified only when an alternate index, a\nI        key-sequenced VSAM data set, a catalog, or an indexed\nI        sequential (ISAM) non-VSAM data set is being printed.\nN\nI          key: can contain 1 to 255 EBCDIC characters. A key ending in\nI            X'5C' is processed as a generic key.\nN\nI      FROMADDRESS(address) /* Abbreviation: FADDR */: specifies the\nI        relative byte address (RBA) of the first record you want\nI        printed. The RBA value must be the beginning of a logical\nI        record. If you specify this parameter for a key-sequenced data\nI        set, the listing is in physical sequential order instead of in\nI        logical sequential order.\nN\nI        FROMADDRESS can be specified only for VSAM key-sequenced,\nI        linear, or entry-sequenced data sets or components. FROMADDRESS\nI        cannot be specified when the data set is accessed through a\nI        path or for a key-sequenced data set with spanned records if\nI        any of those spanned records are to be accessed.\nN\nI          address: Can be specified in decimal (n) or hexadecimal\nI            (X'n'). The specification cannot be longer than one\nI            fullword when specified in decimal.\nN\nI            The largest address you can specify in decimal is\nI            4,294,967,295. If a higher value is required, specify it\nI            in hexadecimal.\nN\nI      FROMNUMBER(number) /* Abbreviation: FNUM */:  specifies the\nI        relative record number of the first record you want printed.\nI        FROMNUMBER can only be specified for VSAM relative record data\nI        sets.\nN\nI          number: Can be specified in decimal (n), hexadecimal (X'n'),\nI            or binary (B'n'). The specification cannot be longer than\nI            one fullword.\nN\nI            The largest address you can specify in decimal is\nI            4,294,967,295. If a higher value is required, specify it in\nI            hexadecimal.\nN\nI      SKIP(number): specifies the number of logical records you want\nI        to skip before the listing of records begins. For example, if\nI        you want the listing to begin with record number 500, you\nI        specify SKIP(499). SKIP should not be specified when you are\nI        accessing the data set through a path; the results are\nI        unpredictable.\nN\nD    INSERTSHIFT((offset1 offset2) ...) | /* Abbreviation: ISHFT */ -\nD    INSERTALL /* Abbreviation: ISALL */ -\nI      If DBCS is specified without INSERTSHIFT nor INSERTALL, the\nI      logical record is assumed to already contain SO and SI\nI      characters. PRINT will check during printing to ensure that the\nI      DBCS data meets DBCS criteria.\nN\nI      INSERTSHIFT((offset1 offset2) ...) /* Abbreviation: ISHFT */:\nI        indicates that SO and SI characters are to be inserted in the\nI        logical record during PRINT command processing. This action\nI        has no effect on the data set referenced by PRINT. This keyword\nI        cannot be specified unless DBCS is also specified.\nN\nI        offset1: Indicates the byte offset in the logical record to be\nI          printed before which a SO character is to be inserted.\nN\nI        offset2: Indicates the byte offset in the logical record to be\nI          printed after which an SI character is to be inserted.\nI          offset2 must be greater than offset1 and the difference must\nI          be an even number.\nN\nI          Offset pairs cannot overlap ranges.\nN\nI        The maximum number of offset pairs that can be specified is\nI        255.\nN\nI      INSERTALL /* Abbreviation: ISALL */: indicates the logical\nI        record is assumed to contain only DBCS characters. An SO\nI        character is inserted at the beginning of the record and an\nI        SI character is inserted at the end of the record.\nN\nD    OUTFILE(ddname) /* Abbreviation: OFILE */ -\nI      identifies a target data set other than SYSPRINT. For ddname,\nI      substitute the name of the JCL statement that identifies the\nI      alternate target data set.\nN\nI      The access method services target data set for listings,\nI      identified by the ddname SYSPRINT, is the default. The target\nI      data set must meet the requirements stated in \"JCL DD Statement\nI      for a Target Data Set\".\nN\nD    SKIPDBCSCHECK((offset1 offset2))...) | /* Abbreviation: SKDCK */ -\nD    NODBCSCHECK /* Abbreviation: NODCK */ -\nI      SKIPDBCSCHECK((offset1 offset2)...) /* Abbreviation: SKDCK */:\nI        indicates that characters between offset1 and offset2 are not\nI        to be checked for DBCS criteria during PRINT command\nI        processing. This keyword cannot be specified unless DBCS is\nI        also specified.\nN\nI        offset1: Indicates the byte offset in the logical record to be\nI          printed at which checking is to cease until offset2 is\nI          reached.\nN\nI        offset2: Indicates the byte offset in the logical record after\nI          which checking is to resume. offset2 must be greater than\nI          offset1.\nN\nI          Offset pairs cannot overlap ranges.\nN\nI        The maximum number of offset pairs that can be specified is\nI        255.\nN\nI      NODBCSCHECK /* Abbreviation: NODCK */: specifies that DBCS\nI        validity checking not be performed.\nN\nD    TOKEY(key) |\nD    TOADDRESS(address) | /* Abbreviation: TADDR */\nD    TONUMBER(number) |\nD    COUNT(number)\nI      locates the data set being listed where you want the listing to\nI      stop. If you do not use this, the listing ends with the logical\nI      end of the data set or component.\nN\nI      The only value that can be specified for a SAM data set is COUNT.\nN\nI      Use FROMADDRESS and TOADDRESS to specify a partial print range\nI      for a linear data set cluster. The location where the listing is\nI      to stop must follow the location where the listing is to begin.\nN\nI      The ending delimiter must be consistent with the starting\nI      delimiter. For example, if FROMADDRESS is specified for the\nI      starting location, use TOADDRESS to specify the ending location.\nI      The same is true for FROMKEY and TOKEY, and FROMNUMBER and\nI      TONUMBER.\nN\nI      TOKEY(key): specifies the key of the last record to be listed.\nI        You can specify generic keys (that is, a portion of the key\nI        followed by *). If you specify generic keys, listing stops\nI        after the last record is listed whose key matches that portion\nI        of the key you specified. If you specify a key longer than that\nI        defined for the data set, the listing is not done.\nN\nI        If the specified key is not found, the next lower key is used\nI        as the stopping point for the listing.\nN\nI        TOKEY can be specified only when an alternate index, a\nI        key-sequenced VSAM data set, a catalog, or an indexed\nI        sequential (ISAM) non-VSAM data set is being printed.\nN\nI          key: Can contain 1 to 255 EBCDIC characters. A key ending in\nI            X'5C' is processed as a generic key.\nN\nI      TOADDRESS(address) /* Abbreviation: TADDR */: specifies the\nI        relative byte address (RBA) of the last record you want listed.\nN\nI        Unlike FROMADDRESS, the RBA value does not need to be the\nI        beginning of a logical record. The entire record containing the\nI        specified RBA is printed. If you specify this parameter for a\nI        key-sequenced data set, the listing is in physical sequential\nI        order instead of in logical sequential order.\nN\nI        TOADDRESS can be specified only for VSAM key-sequenced, linear\nI        or entry-sequenced data sets or components. TOADDRESS cannot\nI        be specified when the data set is accessed through a path.\nI        TOADDRESS cannot be specified for a key-sequenced data set with\nI        spanned records if any of those spanned records are to be\nI        accessed.\nN\nI        address: Can be specified in decimal (n) or hexadecimal (X'n').\nI          The specification cannot be longer than one fullword when\nI          specified in decimal.\nN\nI          The largest address you can specify in decimal is\nI          4,294,967,295. If a higher value is required, specify it in\nI          hexadecimal.\nN\nI      TONUMBER(number) /* Abbreviation: TNUM */: specifies the relative\nI        record number of the last record you want printed. TONUMBER\nI        can be specified only for a VSAM relative record data set.\nN\nI        number: Can be specified in decimal (n), hexadecimal (X'n'),\nI          or binary (B'n').\nN\nI          The specification cannot be longer than one fullword.\nN\nI          The largest address you can specify in decimal is\nI          4,294,967,295. If a higher value is required, specify it in\nI          hexadecimal.\nN\nI      COUNT(number): specifies the number of logical records to be\nI        listed. COUNT should not be specified when you are accessing\nI        the data set through a path; the results are unpredictable.\nN\nI        number: can be specified in decimal (n), hexadecimal (X'n'),\nI          or binary (B'n'); the specification cannot be longer than\nI          one fullword.\nN\nI          The largest address you can specify in decimal is\nI          4,294,967,295. If a higher value is required, specify it in\nI          hexadecimal.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC2911": {"ttr": 12803, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2911\nKPRINT CHARACTER DUMP HEX\nTDFSMS AMS\nT-Chapter 29.\nT-Example 1: Examples of formats\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102158\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 29. PRINT\nN-----------------\nNExample 1: Examples of formats\nN------------------------------\nNCharacter\nN---------\nNIDCAMS SYSTEM SERVICES TIME: 19:26:13 03/08/05 PAGE 6\nNLISTING OF DATA SET -EXAMPLE.LISTC.DATA\nNRBA OF RECORD - 0\nNABCD000000000001ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEFGHIJKLMNOPQR\nN6789ABCDEFGHIJKLMNOPQRSTRUVWYZ0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123\nNIJKLMNOPQRSTUVWYZY0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCDEF\nNUVWXYZ0123456789ABCDEFGHIJKLMNOPQRST....\nN\nNDUMP\nN----\nNIDCAMS SYSTEM SERVICES TIME: 19:26:13 03/08/05 PAGE 2\nNLISTING OF DATA SET -EXAMPLE.LISTC\nNKEY OF RECORD - F0F0F0F0F0F0F0F0F0F0F0F1\nN0000 C1C2C3C4 F0F0F0F0 F0F0F0F0 F0F0F0F1 C1C2C3C4 C5C6C7C8 C9D1D2D3 D4\nN + D5D6D7 *ABCD000000000001ABCDEFGHIJKLMNOP*\nN0020 D8D9E2E3 D4D5D6D7 D8D9F0F1 F2F3F4F5 F6F7F8F9 C1C2C3C4 C5C6C7C8 C9\nN + D1D2D3 *QRSTRUVWYZ0123456789ABCDEFGHIJKL*\nN0040 D4D5D6D7 D8D9E2E3 E4E5E6E7 F8F9F0F1 F2F3F4F5 F6F7F8F9 C1C2C3C4 C5\nN + C6C7C8 *MNOPQRSTRUVWXYZ0123456789ABCDEFG*\nN\nNHEX\nN---\nNIDCAMS SYSTEM SERVICES TIME: 19:26:13 03/08/05 PAGE 4\nNLISTING OF DATA SET -EXAMPLE.LISTC.DATA\nNRBA OF RECORD - 0\nNC1C2C3C4F0F0F0F0F0F0F0F0F0F0F0F1C1C2C3C4C5C6C7C8C9D1D2D3D4D5D6D7D8D9E2\nN + E3E4E5E5E6E7E8F9F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6C7C8\nNC9D1D2D3D4D5D6D7D8D9E2D3D4E5E6E7E8E9F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6C7\nN + C8C9D1D2D3D4D5D6D7D8D9E2E3E4E5E6E7E8E9F0F1F2F3F4F5\nNF6F7F8F9C1C2C3C4C5C6C7C8C9D1D2D3D4D5D6D7D8D9E2E3E4E5E6E7E8E9F0F1F2F3F4\nN + F5F6F7F8F9C1C2C3C4C5C6C7C8C9D1D2D3D4D5D6D7D8D9E2E3\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2912": {"ttr": 12805, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2912\nTDFSMS AMS\nT-Chapter 29.\nT-Example 2: Print a Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102209\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 29. PRINT\nN-----------------\nNExample 2: Print a Catalog\nN--------------------------\nD//PRINT2   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  PRINT -\nD    INDATASET(USERCAT.TESTDSNS)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe PRINT parameters are:\nN-------------------------\nN-> INDATASET: prints the entire catalog, because there are no\nN   delimiting parameters specified.\nN\nN  -> USERCAT.TESTDSNS: specifies the entry to be printed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2913": {"ttr": 12807, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2913\nTDFSMS AMS\nT-Chapter 29.\nT-Example 3: Print a Key-Sequenced Cluster's Data Records\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102218\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 29. PRINT\nN-----------------\nNExample 3: Print a Key-Sequenced Cluster's Data Records\nN-------------------------------------------------------\nNBecause neither HEX nor CHAR was specified, access method services\nNprints each record in the DUMP format.\nN\nD//PRINT3   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  PRINT -\nD    INDATASET(BRD.EXAMPLE.KSDS1)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe PRINT parameters are:\nN-------------------------\nN-> INDATASET: prints data records of the key-sequenced cluster.\nN\nN  -> BRD.EXAMPLE.KSDS1: specifies the entry to be printed.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2914": {"ttr": 12809, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2914\nTDFSMS AMS\nT-Chapter 29.\nT-Example 4: REPRO and PRINT an ESDS Cluster's Records\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102229\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 29. PRINT\nN-----------------\nNExample 4: REPRO and PRINT an ESDS Cluster's Records\nN----------------------------------------------------\nD//PRINT4   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  REPRO -\nD    INDATASET(EXAMPLE.NONVSAM) -\nD    COUNT(15) -\nD    OUTFILE(VSDSET2)\nD  IF LASTCC = 0 THEN DO\nD    PRINT -\nD      INFILE(VSDSET2) -\nD      HEX\nD  END\nD  PRINT -\nD    CHARACTER -\nD    COUNT(15) -\nD    INDATASET(EXAMPLE.NONVSAM)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//VSDSET2   DD DISP=OLD,DSNAME=KRL.EXAMPLE.ESDS1,\nD//             AMP=(BUFND=15) <= Improves performance\nN\nThe JCL statements are:\nN----------------------\nN-> VSDSET2: identifies the entry-sequenced VSAM cluster,\nN   KRL.EXAMPLE.ESDS1, that the records are copied into.\nN\nNThe REPRO parameters are:\nN-------------------------\nN-> REPRO: copies the first 15 records from the source data set.\nN\nN-> INDATASET: identifies the source data set.\nN\nN   -> EXAMPLE.NONVSAM: the source data set.\nN\nN-> OUTFILE: points to the VSDSET2 DD statement. The VSDSET2 DD\nN   statement identifies the output data set, KRL.EXAMPLE.ESDS1.\nN\nNThe IF parameters are:\nN----------------------\nN-> IF LASTCC = 0: verifies that the REPRO command completed\nN   successfully.\nN\nNThe first PRINT parameters are:\nN-------------------------------\nN-> INFILE: points to the VSDSET2 DD statement. The VSDSET2 DD\nN   statement identifies the cluster, KRL.EXAMPLE.ESDS1.\nN\nN-> HEX: specifies that each record is to be printed as a group of\nN   hexadecimal characters.\nN\nNThe second PRINT parameters are:\nN--------------------------------\nN-> CHARACTER: specifies that each record is to be printed as a group\nN   of alphanumeric characters.\nN\nN-> COUNT: specifies that 15 records are to be printed. Because SKIP\nN   was not specified, access method services prints the first\nN   15 records.\nN\nN-> INDATASET: identifies the non-VSAM data set, EXAMPLE.NONVSAM.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2915": {"ttr": 12811, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2915\nTDFSMS AMS\nT-Chapter 29.\nT-Example 5: Print a Linear Data Set Cluster\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102240\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 29. PRINT\nN-----------------\nNExample 5: Print a Linear Data Set Cluster\nN------------------------------------------\nD//PRINT5   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  PRINT -\nD    INDATASET(EXAMPLE.LDS01) -\nD    FROMADDRESS(4096) -\nD    TOADDRESS(8191)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe PRINT parameters are:\nN-------------------------\nN-> INDATASET: identifies the source data set, EXAMPLE.LDS01.\nN\nN-> FROMADDRESS: specifies that printing is to start at offset 4096\nN   in the data set.\nN\nN-> TOADDRESS: specifies that printing is to stop at offset 8191.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC2916": {"ttr": 13057, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC2916\nTDFSMS AMS\nT-Chapter 29.\nT-Example 6: Print a Data Set that Contains DBCS Data\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102251\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 29. PRINT\nN-----------------\nNExample 6: Print a Data Set that Contains DBCS Data\nN---------------------------------------------------\nD//PRINT6   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  PRINT -\nD    INDATASET(USER.PRTSOSI.EXAMPLE) -\nD    CHARACTER -\nD    DBCS\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe PRINT parameters are:\nN-------------------------\nN-> INDATASET: identifies the source data set, USER.PRTSOSI.EXAMPLE.\nN\nN-> CHARACTER: specifies that each record is to be printed as a group\nN   of alphanumeric characters.\nN\nN-> DBCS: specifies that each logical record is to be printed as a group\nN   of alphanumeric characters and the logical record is assumed to\nN   already contain SO and SI characters. The bytes from the logical\nN   record are printed in their respective characters (that is, SBCS\nN   or DBCS character format).\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC30": {"ttr": 13059, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC30\nTDFSMS AMS\nT-Chapter 30. REPRO\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 30. REPRO\nN-----------------\nNThe REPRO command performs the following functions:\nN\nN-> Copies VSAM and non-VSAM data sets\nN\nN-> Copies catalogs\nN\nN-> Copies or merges tape volume catalogs\nN\nN-> Splits integrated catalog facility catalog entries between two\nN   catalogs\nN\nN-> Splits entries from an integrated catalog facility master catalog\nN   into another integrated catalog facility catalog\nN\nN-> Merges integrated catalog facility catalog entries into another\nN   integrated catalog facility user catalog.\nN\nNRestriction: Access Method Services does not use RLS. If an RLS keyword\nNis specified on the DD statement of a file to be opened by AMS, the\nNkeyword will be ignored and the file will be opened and accessed in\nNnon-RLS mode.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3001": {"ttr": 13061, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3001\nTDFSMS AMS\nT-Chapter 30.\nT-Syntax for REPRO Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 30. REPRO\nN-----------------\nNSyntax for REPRO Parameters\nN---------------------------\nD  REPRO -\nN\nNRequired Parameters\nN-------------------\nD    INFILE(ddname) | /* Abbreviation: IFILE */ -\nD    INDATASET(entryname) /* Abbreviation: IDS */ -\nI      Identifies the source data set to be copied. If the logical\nI      record length of a non-VSAM source data set is greater than\nI      32760 bytes, your REPRO command will end with an error message.\nI      The keys in the source data set must be in ascending order.\nN\nI      INFILE(ddname) /* Abbreviation: IFILE */: specifies the name of\nI        the DD statement that identifies the data set to be copied or\nI        the user catalog to be merged. You can copy a base cluster in\nI        alternate-key sequence by specifying a path name as the data\nI        set name in the DD statement.\nN\nI      INDATASET(entryname) /* Abbreviation: IDS */: specifies the name\nI        of the entry to be copied or user catalog to be merged. If\nI        INDATASET is specified, the entryname is dynamically allocated\nI        with a disposition of OLD. You can copy a base cluster in\nI        alternate-key sequence by specifying a path name for the\nI        entryname.\nN\nI        If you are copying a member of a non-VSAM partitioned data set,\nI        the entryname must be specified in the format:\nN\nI          pdsname(membername)\nN\nD    OUTFILE(ddname)| /* Abbreviation: OFILE */ -\nD    OUTDATASET(entryname) /* Abbreviation: ODS */ -\nI      identifies the target data set. If a VSAM data set defined with\nI      a record length greater than 32760 bytes is to be copied to a\nI      sequential data set, your REPRO command will end with an error\nI      message.\nN\nI      Note: To avoid picking up incorrect volume information from the\nI      original DD statement on a data set that has previously been\nI      deleted and redefined in this invocation of IDCAMS and the FILE\nI      parameter was specified on the delete, you must specify the\nI      OUTDATASET keyword instead of OUTFILE. Alternatively, you can\nI      issue the REPRO command in a different step from the step that\nI      invoked the delete and define commands.\nN\nI      OUTFILE(ddname) /* Abbreviation: OFILE */: specifies the name of\nI        a DD statement that identifies the target data set. For VSAM\nI        data sets, the data set name can name a path. If the DD\nI        statement identifies a SYSOUT data set, the attributes must\nI        match those specified in \"JCL DD Statement for a Target Data\nI        Set\".\nN\nI      OUTDATASET(entryname) /* Abbreviation: ODS */: specifies the name\nI        of the target data set. If OUTDATASET is specified, the\nI        entryname is dynamically allocated with a disposition of OLD.\nI        For VSAM data sets, entryname can be that of a path.\nN\nNOptional Parameters\nN-------------------\nD    DBCS -\nI      specifies that bytes in the logical record contain DBCS\nI      characters. REPRO checks to ensure the DBCS data meets DBCS\nI      criteria. For more information about DBCS support, see z/OS\nI      DFSMS Using Data Sets. This parameter cannot be specified with\nI      MERGECAT.\nN\nD    ENTRIES(entryname ...) | /* Abbreviation: ENT */ -\nD    LEVEL(level) /* Abbreviation: LVL */ -\nI      specifies the names of the entries in the source catalog to be\nI      merged when MERGECAT is specified.\nN\nI      For TSO/E users, TSO/E will prefix the userid to the specified\nI      data set name when ENTRIES is specified with an entry name\nI      without the userid. The userid is not prefixed when the LEVEL\nI      parameter is specified.\nN\nI      ENTRIES(entryname ...) /* Abbreviation: ENT */: specifies the\nI        name or generic name of each entry to be merged. (See the\nI        examples of generic entries following the description of the\nI        LEVEL parameter.) When using a generic name with the ENTRIES\nI        parameter, entries must have one qualifier in addition to those\nI        specified in the command.\nN\nI        Note: For information concerning RACF authorization levels,\nI        search Appendix A, \"Security Authorization Levels\". RACF\nI        applies to both SMS- and non-SMS-managed data sets and\nI        catalogs.\nN\nI      LEVEL(level) /* Abbreviation: LVL */: specifies that all entries\nI        matching the level of qualification you indicated with the\nI        LEVEL parameter are to be merged irrespective of the number of\nI        additional qualifiers. If a generic level name is specified,\nI        only one qualifier can replace the *. The * must not be the\nI        last character specified in the LEVEL parameter. LEVEL(A.*)\nI        will give you an error message.\nN\nI        The LEVEL parameter is not allowed when merging tape volume\nI        catalogs.\nN\nI        For tape volume catalogs, search \"Access Method Services Tape\nI        Library Support\" and \"VOLUMEENTRIES parameter\".\nN\nD    ERRORLIMIT(value) /* Abbreviation: ELIMIT */ -\nI      lets you select a failure limit. Use this parameter to set a\nI      limit to the number of errors REPRO copy will tolerate. The\nI      default is 4, but any number from 1 to 2,147,483,647 can be\nI      used.\nN\nD    FILE(ddname) -\nI      specifies the name of a DD statement that identifies all the\nI      volumes that contain the VVDSs to be updated. If you do not\nI      specify FILE, VSAM will try to dynamically allocate the required\nI      volumes.\nN\nD    FROMKEY(key) | /* Abbreviation: FKEY */ -\nD    FROMADDRESS(address) | /* Abbreviation: FADDR */ -\nD    FROMNUMBER(number) | /* Abbreviation: FNUM */ -\nD    SKIP(number) -\nI      specifies the location in the source data set where copying is\nI      to start. If no value is coded, the copying begins with the first\nI      logical record in the data set. You can use only one of the four\nI      choices.\nN\nI      Use the SKIP parameter for a SAM data set.\nN\nI      None of these parameters can be specified if you are copying a\nI      linear data set. You must copy the entire linear data set.\nI      FROMKEY can be specified when copying a catalog, but none of the\nI      other parameters may be used for a catalog.\nN\nI      The starting delimiter must be consistent with the ending\nI      delimiter. For example, if FROMADDRESS is specified for the\nI      starting location, use TOADDRESS to specify the ending location.\nI      The same is true for FROMKEY and TOKEY, and FROMNUMBER and\nI      TONUMBER.\nN\nI      FROMKEY(key) /* Abbreviation: FKEY */: specifies the key of the\nI        first record you want copied. You can specify generic keys\nI        (a portion of the key followed by *). If you specify generic\nI        keys, copying begins at the first record with a key matching\nI        the specified portion of the key. If you specify a key longer\nI        than that defined for the data set, the data set is not copied.\nI        If the specified key is not found, copying begins at the next\nI        higher key.\nN\nI        FROMKEY can be specified only when copying an alternate index,\nI        a KSDS, or a catalog.\nN\nI        key: Can contain 1-to-255 EBCDIC characters. A key ending in\nI          X'5C' is processed as a generic key.\nN\nI      FROMADDRESS(address) /* Abbreviation: FADDR */: specifies the\nI        relative byte address (RBA) of the first record you want\nI        copied. The RBA value must be the beginning of a logical\nI        record. If you specify this parameter for key-sequenced data,\nI        the records are copied in physical sequential order instead of\nI        in logical sequential order. FROMADDRESS:\nN\nI        -> Can be coded only for key-sequenced or entry-sequenced data\nI           sets or components.\nN\nI        -> Cannot be specified when the data set is being accessed\nI           through a path.\nN\nI        -> Cannot be specified for a key-sequenced data set with\nI           spanned records if any of those spanned records are to\nI           be accessed.\nN\nI        address: Can be specified in decimal (n) or hexadecimal (X'n').\nI          The specification cannot be longer than one fullword when\nI          specified in decimal.\nN\nI          The largest address you can specify in decimal is\nI          4,294,967,295. If you require a higher value, specify it in\nI          hexadecimal.\nN\nI      FROMNUMBER(number) /* Abbreviation: FNUM */: specifies the\nI        relative record number of the first record you want copied.\nI        FROMNUMBER can be specified only when you copy a relative\nI        record data set.\nN\nI        number: Can be specified in decimal (n), hexadecimal (X'n'),\nI          or binary (B'n'). The specification cannot be longer than\nI          one fullword.\nN\nI          The largest address you can specify in decimal is\nI          4,294,967,295. If you require a higher value, specify it in\nI          hexadecimal.\nN\nD    SKIP(number) -\nI      specifies the number of logical records to skip before beginning\nI      to copy records. For example, if you want to copy beginning with\nI      record number 500, specify SKIP(499).\nN\nI      SKIP should not be specified when you access the data set through\nI      a path; the results are unpredictable.\nN\nD    INSERTSHIFT((offset1 offset2) ...) | /* Abbreviation: ISHFT */ -\nD    INSERTALL /* Abbreviation: ISALL */ -\nI      If DBCS is specified without INSERTSHIFT or INSERTALL, the\nI      logical record is assumed to already contain SO and SI\nI      characters, and REPRO will check during copying to ensure that\nI      the DBCS data meets DBCS criteria.\nN\nI      INSERTSHIFT or INSERTALL can be specified only if DBCS is also\nI      specified, and the data set being copied is not a catalog.\nN\nI      INSERTSHIFT((offset1 offset2) ...) /* Abbreviation: ISHFT */:\nI        indicates that SO and SI characters are to be inserted in the\nI        logical record during REPRO command processing. This action has\nI        a permanent effect on the target data set.\nN\nI        offset1: Indicates the byte offset in the logical record to be\nI          copied before which a SO character is to be inserted.\nN\nI        offset2: Indicates the byte offset in the logical record to be\nI          copied after which a SI character is to be inserted. offset2\nI          must be greater than offset1 and the difference must be an\nI          odd number.\nN\nI        Offset pairs cannot overlap ranges.\nN\nI        The maximum number of offset pairs that can be specified is 255.\nN\nI      INSERTALL /* Abbreviation: ISALL */: specifies the entire logical\nI        record is assumed to contain only DBCS characters. An SO\nI        character is inserted at the beginning of the record and an\nI        SI character is inserted at the end of the record.\nN\nD    MERGECAT | /* Abbreviation: MRGC */ -\nD    NOMERGECAT /* Abbreviation: N0MRGC */ -\nI      specifies whether entries from the source catalog are to be\nI      merged with the entries of the target catalog. When merging\nI      catalogs ensure that data sets whose entries are merged can\nI      still be located after the merge operation. This parameter\nI      cannot be specified with the DBCS parameter.\nN\nI      MERGECAT merges deferred generations if specified with the GDG\nI      base during a merge of the entire catalog. Deferred generations\nI      retain their deferred status in the target catalog. Rolled-off\nI      generations are also merged during a merge of all entries.\nN\nI      MERGECAT can also be specified for tape volume catalogs or\nI      VOLCATS. For more information on REPRO MERGECAT of VOLCATS,\nI      refer to \"Access Method Services Tape Library Support\".\nN\nI      MERGECAT /* Abbreviation: MRGC */: specifies that the source\nI        catalog entries are to be merged with the target catalog\nI        entries and that the merged entries are to be deleted from\nI        the source catalog upon a successful merge operation.\nN\nI        The merge operation can be restarted if an error occurs,\nI        because the target catalog does not have to be empty. A\nI        LISTCAT and DIAGNOSE should be run before the MERGE is\nI        restarted. If the MERGE ended while processing a generation\nI        data group, it might be necessary to delete that generation\nI        data group from the target catalog because of duplicate data\nI        set names in the source and target catalogs.\nN\nI        Candidate volumes are preserved. MERGECAT retains candidate\nI        volume information when moving an entry from one catalog to\nI        another.\nN\nI        For some duplicate key errors, the merge does not end, and\nI        the processing of the next entry continues. However, some\nI        alias associations might not be merged because of the\nI        duplicate key error.\nN\nI        MERGECAT performs a series of DELETE NOSCRATCH and\nI        DEFINE RECATALOG requests to move entries from one catalog to\nI        another. For information concerning security authorization\nI        levels, see Appendix A, \"Security Authorization Levels\".\nN\nI        During MERGECAT, if the target catalog name is found in the\nI        VVDS, the cluster entry for the VVDS is not recreated in the\nI        target catalog. You must use DEFINE CLUSTER RECATALOG to create\nI        the VVDS cluster entry in the target catalog.\nN\nI        Note that the use of LEVEL or ENTRIES parameter will not move\nI        extended aliases that use the SYMBOLICRELATE parameter to the\nI        new catalog.\nN\nI        For more information on how aliases are processed when using\nI        REPRO MERGECAT, see z/OS DFSMS: Managing Catalogs under the\nI        section Splitting Catalogs or Moving Catalog Entries.\nN\nI        For more information on use of extended aliases see z/OS DFSMS:\nI        Managing Catalogs under the section Extended Alias Support.\nI        See z/OS DFSMS Managing Catalogs for additional information on\nI        the integrity of RACF discrete profiles after using MERGECAT.\nN\nI        MERGECAT can also be specified for tape volume catalogs or\nI        VOLCATS. For more information on REPRO MERGECAT of VOLCATS,\nI        refer to \"Access Method Services Tape Library Support\".\nN\nI      NOMERGECAT /* Abbreviation: N0MRGC */: specifies that the source\nI        catalog is to be completely copied into an empty target\nI        catalog.\nN\nI        The empty target catalog implies that the copy operation cannot\nI        be restarted if an error occurs. Before the copy operation can\nI        be restarted, the target catalog must be redefined and all\nI        volumes that contain objects must be restored. For VOLCAT this\nI        is not applicable because they do not use VVDS. If the\nI        NOMERGECAT for VOLCAT fail you only need to delete or define\nI        the target VOLCAT and restart the NOMERGECAT.\nN\nI        After a REPRO of one catalog to another, the VVRs are changed\nI        to point to the target catalog, and all subsequent processing\nI        must be done under the target catalog.\nN\nI        Attention: Performing REPRO on a catalog while data sets are\nI        open in the source catalog might result in a loss of\nI        information if any of those data sets extend, or other catalog\nI        updates are made. The changes might not be copied to the target\nI        catalog, resulting in a mismatch between the information\nI        contained in the VVDS and the new target BCS. This might cause\nI        the data sets to be inaccessible or receive errors.\nN\nD    REPLACE | /* Abbreviation: REP */ -\nD    NOREPLACE /* Abbreviation: NREP */ -\nI      specifies whether a record in the source cluster (INFILE or\nI      INDATASET) is to replace a record in the target cluster (OUTFILE\nI      or OUTDATASET) when the source cluster is copied into the target\nI      cluster.\nN\nI      When the source cluster is copied, its records might have keys\nI      or relative record numbers identical to the keys or relative\nI      record numbers of data records in the target cluster. In this\nI      case, the source record replaces the target record.\nI      REPLACE|NOREPLACE is not used when copying integrated catalog\nI      facility catalogs because these catalogs do not use the catalog\nI      unload and reload functions.\nN\nI      REPLACE|NOREPLACE is not applicable for VSAM targets.\nN\nI      REPLACE /* Abbreviation: REP */: When a key-sequenced data set\nI        (other than a catalog) is copied, each source record with a\nI        key matching a target record's key replaces the target record.\nI        Otherwise, the source record is inserted into its appropriate\nI        place in the target cluster.\nN\nI        When a relative record data set is copied, each source record\nI        with a relative record number that identifies a data record\nI        (rather than an empty slot) in the target data set replaces\nI        the target data record. Otherwise, the source data record is\nI        inserted into the empty slot its relative record number\nI        identifies.\nN\nI        REPLACE cannot be used if the target data set is identified as\nI        a path through an alternate index, or if the target data set is\nI        a base cluster whose upgrade data set includes an alternate\nI        index defined with the unique-key attribute.\nN\nI      NOREPLACE /* Abbreviation: NREP */: When a key-sequenced data\nI        set (other than a catalog) is copied, target records are not\nI        replaced by source records. For each source record whose key\nI        matches a target record's key, a \"duplicate record\" message is\nI        issued.\nN\nI        When a relative record data set is copied, target records are\nI        not replaced by source records. For each source record whose\nI        relative record number identifies a target data record instead\nI        of an empty slot, a \"duplicate record\" message is issued.\nN\nI        When copying something other than a VSAM data set to a\nI        sequential data set, the error limit parameter allows more than\nI        four mismatches or errors.\nN\nD    REUSE | /* Abbreviation: RUS */ -\nD    NOREUSE /* Abbreviation: NRUS */ -\nI      specifies if the target data set is to be opened as a reusable\nI      data set. This parameter is valid only for VSAM data sets.\nN\nI      REUSE /* Abbreviation: RUS */: specifies that the target data\nI        set, specified with OUTFILE or OUTDATASET, is opened as a\nI        reusable data set whether or not it was defined as reusable\nI        with the REUSE parameter. (See the DEFINE CLUSTER command\nI        description.) If the data set was defined with REUSE, its\nI        high-used relative byte address (RBA) is reset to zero (that\nI        is, the data set is effectively empty) and the operation\nI        proceeds. When you open a reusable data set with the reset\nI        option, that data set cannot be shared with other jobs.\nN\nI        If REUSE is specified and the data set was originally defined\nI        with the NOREUSE option, the data set must be empty; if not,\nI        the REPRO command ends with an error message.\nN\nI      NOREUSE /* Abbreviation: NRUS */: specifies that records are\nI        written at the end of an entry-sequenced data set. (OUTFILE or\nI        OUTDATASET must identify a nonempty data set.)\nN\nD    SKIPDBCSCHECK((offset1 offset2) ...) | /* Abbreviation: SKDCK */ -\nD    NODBCSCHECK /* Abbreviation: NODCK */ -\nI      SKIPDBCSCHECK and NODBCSCHECK cannot be specified unless DBCS is\nI      also specified.\nN\nI      SKIPDBCSCHECK((offset1 offset2) ...) /* Abbreviation: SKDCK */:\nI        indicates that characters between offset1 and offset2 are not\nI        to be checked for DBCS criteria during REPRO command\nI        processing.\nN\nI        offset1: Indicates the byte offset in the logical record to be\nI          copied at which checking is to cease until offset2 is\nI          reached.\nN\nI        offset2: Indicates the byte offset in the logical record after\nI          which checking is to resume. offset2 must be greater than\nI          offset1.\nN\nI        Offset pairs cannot overlap ranges.\nN\nI        The maximum number of offset pairs that can be specified is\nI        255.\nN\nI      NODBCSCHECK /* Abbreviation: NODCK */: indicates DBCS\nI        verification checking will not be done.\nN\nD    TOKEY(key)| /*  */\nD    TOADDRESS(address)| /* Abbreviation: TADDR */\nD    TONUMBER(number)| /* Abbreviation: TNUM */\nD    COUNT(number)\nI      specifies where copying is to end in the data set being copied.\nI      You can specify only one of these parameters for a copy\nI      operation. The location where copying is to end must follow the\nI      location where it is to begin. If no value is coded, copying ends\nI      at the logical end of the data set or component.\nN\nI      COUNT is the only parameter that can be specified for a SAM data\nI      set.\nN\nI      None of these parameters can be specified if you are copying a\nI      linear data set.\nN\nI      You must copy the entire linear data set. TOKEY can be specified\nI      when copying a catalog, but none of the other parameters may be\nI      used for a catalog.\nN\nI      The ending delimiter must be consistent with the starting\nI      delimiter. For example, if FROMADDRESS is specified for the\nI      starting location, use TOADDRESS to specify the ending location.\nI      The same is true for FROMKEY and TOKEY, and FROMNUMBER and\nI      TONUMBER.\nN\nI      TOKEY(key): specifies the key of the last record you want copied.\nI        You can specify generic keys (a portion of the key followed\nI        by *). If you specify generic keys, copying stops after the last\nI        record whose key matches that portion of the key you specified\nI        is copied. If you specify a key longer than the one defined for\nI        the data set, the data set is not copied. If the specified key\nI        is not found, copying ends at the next lower key. TOKEY can be\nI        specified only when copying an alternate index, a KSDS, or a\nI        catalog.\nN\nI        key: Can contain 1-to-255 EBCDIC characters.\nN\nI      TOADDRESS(address) /* Abbreviation: TADDR */: specifies the\nI        relative byte address (RBA) of the last record you want copied.\nI        Unlike FROMADDRESS, the RBA value does not need to be the\nI        beginning of a logical record. The entire record containing\nI        the specified RBA is copied.\nN\nI        If you specify this parameter for a KSDS, the records are\nI        copied in physical sequential order instead of in logical\nI        sequential order.\nN\nI        Use TOADDRESS with VSAM key-sequenced or entry-sequenced data\nI        sets or components. TOADDRESS cannot be specified when the\nI        data set is accessed through a path. TOADDRESS cannot be\nI        specified for a key-sequenced data set with spanned records\nI        if any of those spanned records are to be accessed.\nN\nI        address: can be specified in decimal (n) or hexadecimal (X'n').\nI          The specification cannot be longer than one fullword.\nN\nI          The largest address you can specify in decimal is\nI          4,294,967,295. If you require a higher value, specify it in\nI          hexadecimal.\nN\nI      TONUMBER(number) /* Abbreviation: TNUM */: specifies the relative\nI        record number of the last record you want copied. TONUMBER can\nI        be specified only when you copy a relative record data set.\nN\nI        number: Can be specified in decimal (n), hexadecimal (X'n'),\nI          or binary (B'n'). The specification cannot be longer than\nI          one fullword.\nN\nI          The largest address you can specify in decimal is\nI          4,294,967,295. If you require a higher value, specify it\nI          in hexadecimal.\nN\nI      COUNT(number): specifies the number of logical records you want\nI        copied. COUNT should not be specified when you access the data\nI        set through a path; results are unpredictable.\nN\nD    VOLUMEENTRIES(entryname)  /* - */\nD      /* Abbreviations: VOLENTRIES | VOLENT */\nI      specifies the tape volume catalogs to be merged or copied. The\nI      LEVEL parameter is not allowed when merging tape volume catalogs.\nI      When a tape volume catalog is copied, REPRO verifies that the\nI      target is a tape volume catalog.\nN\nNCryptographic Parameters\nN------------------------\nNYou can use the REPRO cryptographic parameters with the following\nNfacilities:\nN\nN-> IBM Programmed Cryptographic Facility (PCF) (5740-XY5)\nN   Change your configuration to use the cryptographic parameters with\nN   PCF.\nN\nN-> z/OS Integrated Cryptographic Service Facility (ICSF) (5647-A01)\nN   Change your ICSF configuration to use the cryptographic parameters\nN   with ICSF.\nN\nNFor a description of the necessary changes, see z/OS Cryptographic\nNServices ICSF System Programmer's Guide.\nN\nD    DECIPHER( /* Abbreviation: DECPHR */ -\nI      specifies that the source data set is to be deciphered as it is\nI      copied to the target data set. The information from the source\nI      data set header is used to verify the plaintext deciphered data\nI      encrypting key supplied, or deciphered from the information\nI      supplied, as the correct plaintext data encrypting key for the\nI      decipher operation.\nN\nD      DATAKEYFILE(ddname) | /* Abbreviation: DKFILE */ -\nD      DATAKEYVALUE(value) | /* Abbreviation: DKV */ -\nD      SYSTEMKEY /* Abbreviation: SYSKEY */ -\nI        specifies whether you, PCF, or ICSF manages keys privately.\nN\nI        DATAKEYFILE(ddname) /* Abbreviation: DKFILE */: specifies that\nI          the key is to be managed by you, and identifies a data set\nI          that contains the private data encrypting key that was used\nI          to encipher the data. For ddname, substitute the name of the\nI          JCL statement that identifies the data set containing the\nI          private data encrypting key.\nN\nI        DATAKEYVALUE(value) /* Abbreviation: DKV */:\nI          specifies that the key is to be managed by you, and supplies\nI          the 1- to 8-byte value that was used as the plaintext private\nI          data encrypting key to encipher the data.\nN\nI          value: can contain 1-to-8 EBCDIC characters, and must be\nI            enclosed in apostrophes if it contains commas, semicolons,\nI            blanks, parentheses, or slashes. an apostrophe contained\nI            within value must be coded as two apostrophes.\nN\nI            You can code value in hexadecimal form, (X'n'). value can\nI            contain 1-to-16 hexadecimal characters, resulting in 1-to-8\nI            bytes of information. With either EBCDIC or hexadecimal\nI            representation, value is padded on the right with blanks\nI            (X'40') if it is fewer than 8 characters.\nN\nI        SYSTEMKEY /* Abbreviation: SYSKEY */: specifies that PCF or\nI          ICSF manages keys.\nN\nD      SYSTEMDATAKEY(value) /* Abbreviation: SYSDK */ -\nI        specifies the 1- to 8-byte value representing the enciphered\nI        system data encrypting key used to encipher the data. This\nI        parameter is valid only if SYSTEMKEY is specified. If\nI        SYSTEMDATAKEY is not specified, REPRO obtains the enciphered\nI        system data encrypting key from the source data set header.\nI        In this case, STOREDATAKEY must have been specified when the\nI        data set was enciphered.\nN\nI        value: can contain 1-to-8 EBCDIC characters and must be\nI          enclosed in apostrophes if it contains commas, semicolons,\nI          blanks, parentheses, or slashes. An apostrophe must be coded\nI          as two apostrophes.\nN\nI          You can code value in hexadecimal form, (X'n'). value can\nI          contain 1-to-16 hexadecimal characters, resulting in 1-to-8\nI          bytes of information. With either EBCDIC or hexadecimal\nI          representation, value is padded on the right with blanks\nI          (X'40') if it is fewer than 8 characters.\nN\nD      SYSTEMKEYNAME(keyname) /* Abbreviation: SYSKN */ -\nI        specifies the 1-to-8 character key name of the internal key\nI        that was used to encipher the data encrypting key. This\nI        parameter is only valid if SYSTEMKEY is specified. If\nI        SYSTEMKEYNAME is not specified, REPRO obtains the key name of\nI        the internal key from the source data set header. In this case,\nI        STOREKEYNAME must have been specified when the data set was\nI        enciphered.\nN\nD    ) /* - */\nN\nD    ENCIPHER( /* Abbreviation: ENCPHR */\nI      specifies that the source data set is to be enciphered as it is\nI        copied to the target data set.\nN\nD      EXTERNALKEYNAME(keyname) | /* Abbreviation: EKN */ -\nD      INTERNALKEYNAME(keyname) | /* Abbreviation: IKN */ -\nD      PRIVATEKEY /* Abbreviation: PRIKEY */ -\nI        specifies whether you, PCF, or ICSF manages keys privately.\nN\nI        EXTERNALKEYNAME(keyname) /* Abbreviation: EKN */: specifies\nI          that PCF or ICSF manages keys. This parameter also supplies\nI          the 1-to-8 character key name of the external file key that\nI          is used to encipher the data encrypting key. The key is known\nI          only by the deciphering system.\nN\nI          The key name and its corresponding enciphered data encrypting\nI          key are listed in SYSPRINT only if NOSTOREDATAKEY is\nI          specified.\nN\nI        INTERNALKEYNAME(keyname) /* Abbreviation: IKN */: specifies\nI          that PCF or ICSF manages keys. This parameter also supplies\nI          the 1-to-8 character key name of the internal file key that\nI          is used to encipher the data encrypting key. The key is\nI          retained by the key-creating system.\nN\nI          The key name and its corresponding enciphered data encrypting\nI          key will only be listed in SYSPRINT if NOSTOREDATAKEY is\nI          specified.\nN\nI        PRIVATEKEY /* Abbreviation: PRIKEY */: specifies that the key\nI          is to be managed by you.\nN\nD      CIPHERUNIT(number | 1) /* Abbreviation: CPHRUN */ -\nI        specifies that multiple logical source records are to be\nI        enciphered as a unit.\nN\nI        number: specifies the number of records that are to be\nI          enciphered together. By specifying that multiple records are\nI          to be enciphered together, you can improve your security\nI          (chaining is done across logical record boundaries) and also\nI          improve your performance. However, there is a corresponding\nI          increase in virtual storage requirements. The remaining\nI          records in the data set, after the last complete group of\nI          multiple records, are enciphered as a group. (If number is\nI          5 and there are 22 records in that data set, the last 2\nI          records are enciphered as a unit.)\nN\nI          The value for number can range from 1 to 255.\nN\nD      DATAKEYFILE(ddname) | /* Abbreviation: DKFILE */ -\nD      DATAKEYVALUE(value) /* Abbreviation: DKV */ -\nI        specifies that you are supplying a plaintext (not enciphered)\nI        data encrypting key. If one of these parameters is not\nI        specified, REPRO will generate the data encrypting key. These\nI        parameters are valid only when EXTERNALKEYNAME or PRIVATEKEY is\nI        specified. If INTERNALKEYNAME and DATAKEYVALUE or DATAKEYFILE\nI        are specified, REPRO will generate the data encrypting key and\nI        DATAKEYVALUE or DATAKEYFILE are ignored by REPRO.\nN\nI        The plaintext data encrypting key will not be listed in\nI        SYSPRINT unless PRIVATEKEY is specified and REPRO provides the\nI        key.\nN\nI        DATAKEYFILE(ddname) /* Abbreviation: DKFILE */: identifies a\nI          data set that contains the plaintext data encrypting key. For\nI          ddname, substitute the name of the JCL statement that\nI          identifies the data encrypting key data set.\nN\nI        DATAKEYVALUE(value) /* Abbreviation: DKV */: specifies the\nI          8-byte value to be used as the plaintext data encrypting key\nI          to encipher the data.\nN\nI          value: can contain 1-to-8 EBCDIC characters or 1-to-16\nI            hexadecimal characters coded X'n'. Value must be enclosed\nI            in apostrophes if it contains commas, semicolons, blanks,\nI            parentheses, or slashes. An apostrophe must be coded as two\nI            apostrophes. With either EBCDIC or hexadecimal\nI            representation, value is padded on the right with blanks\nI            (X'40') if it is fewer than 8 characters.\nN\nD      SHIPKEYNAMES(keyname ...) /* Abbreviation: SHIPKN */ -\nI        supplies the 1-to-8 character key name of one or more external\nI        file keys to be used to encipher the data encrypting key. Each\nI        key name and its corresponding enciphered data encrypting key\nI        is listed in SYSPRINT, but is not stored in the target data\nI        set header. The primary use for this parameter is to establish\nI        multiple enciphered data encrypting keys to be transmitted to\nI        other locations for use in deciphering the target enciphered\nI        data set. This parameter is valid only when INTERNALKEYNAME or\nI        EXTERNALKEYNAME is specified.\nN\nD      STOREDATAKEY | /* Abbreviation: STRDK */ -\nD      NOSTOREDATAKEY /* Abbreviation: NSTRDK */ -\nI        specifies whether the enciphered data encrypting key is to be\nI        stored in the target data set header. The key used to encipher\nI        the data encrypting key is identified by INTERNALKEYNAME or\nI        EXTERNALKEYNAME. This parameter is valid only when\nI        INTERNALKEYNAME or EXTERNALKEYNAME is specified. If the\nI        enciphered data encrypting key is stored in the data set\nI        header, it does not have to be supplied by the user when the\nI        data is deciphered.\nN\nI        Restriction: A data encrypting key enciphered under the keys\nI        identified by SHIPKEYNAMES cannot be stored in the header.\nI        Therefore, you might want to avoid using STOREDATAKEY and\nI        SHIPKEYNAMES together because this could result in storing\nI        header information unusable at some locations.\nN\nI        STOREDATAKEY /* Abbreviation: STRDK */: specifies that the\nI          enciphered data encrypting key is to be stored in the target\nI          data set header.\nN\nI        NOSTOREDATAKEY /* Abbreviation: NSTRDK */: specifies that the\nI          enciphered data encrypting key is not to be stored in the\nI          target data set header. The keyname and its corresponding\nI          enciphered data encrypting key is listed in SYSPRINT.\nN\nD      STOREKEYNAME(keyname) /* Abbreviation: STRKN */ -\nI        specifies whether to store a keyname for the key used to\nI        encipher the data encrypting key in the target data set header.\nI        The specified keyname must be the name the key is known by on\nI        the system where the REPRO DECIPHER is to be performed. This\nI        keyname must be the same one specified in INTERNALKEYNAME if\nI        REPRO DECIPHER is to be run on the same system.\nN\nI        If REPRO DECIPHER is run on a different system, the specified\nI        keyname can be different from the one specified in\nI        INTERNALKEYNAME orEXTERNALKEYNAME.\nN\nI        This parameter is valid only when INTERNALKEYNAME or\nI        EXTERNALKEYNAME is specified. If the keyname is stored in the\nI        data set header, it does not have to be supplied by the user\nI        when the data is deciphered.\nN\nI        Restriction: Keyname values identified by the SHIPKEYNAMES\nI        parameter cannot be stored in the header. Therefore, you might\nI        want to avoid using STOREKEYNAME and SHIPKEYNAMES together\nI        because this could result in storing header information\nI        unusable at some locations.\nN\nD      USERDATA(value) /* Abbreviation: UDATA */ -\nI        specifies 1-to-32 characters of user data to be placed in the\nI        target data set header. For example, this information can be\nI        used to identify the security classification of the data.\nN\nI        value: can contain 1-to-32 EBCDIC characters. If value contains\nI          a special character, enclose the value in apostrophes (for\nI          example, USERDATA('*CONFIDENTIAL*')). If the value contains\nI          an apostrophe, code the embedded quotation mark as two\nI          apostrophes (for example, USERDATA('COMPANY''S')).\nN\nI          You can code value in hexadecimal form, where two hexadecimal\nI          characters represent one EBCDIC character. For example,\nI          USERDATA(X'C3D6D4D7C1D5E8') is the same as USERDATA(COMPANY).\nN\nI          The string can contain up to 64 hexadecimal characters when\nI          expressed in this form, resulting in up to 32 bytes of\nI          information.\nN\nD    )\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC3011": {"ttr": 13316, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3011\nTDFSMS AMS\nT-Chapter 30.\nT-Example 1a: Copy Nonvsam Records into a VSAM Data Set\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102316\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 30. REPRO\nN-----------------\nNExample 1a: Copy Nonvsam Records into a VSAM Data Set\nN-----------------------------------------------------\nD//REPRO1A  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  REPRO -\nD    INFILE(INPUT) -\nD    ERRORLIMIT(6) -\nD    OUTDATASET(RPR.MYKSDS)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//INPUT     DD DISP=SHR,DSNAME=SEQ.DRGV,DCB=(BUFNO=6)\nN\nNThe JCL statements are:\nN-----------------------\nN-> INPUT: identifies the sequential data set, SEQ.DRGV, that contains\nN   the source records.\nN\nN   The BUFNO parameter specifies the number of buffers assigned to the\nN   sequential data set. This improves performance when the data set's\nN   records are accessed.\nN\nNThe REPRO parameters are:\nN-------------------------\nN-> INFILE: points to the INPUT DD statement, which identifies the\nN   source data set.\nN\nN-> ERRORLIMIT: identifies the number of errors REPRO will tolerate.\nN\nN-> OUTDATASET: identifies the key-sequenced data set into which the\nN   source records are to be copied. The data set is dynamically\nN   allocated by access method services with a DISP=OLD.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3012": {"ttr": 13318, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3012\nTDFSMS AMS\nT-Chapter 30.\nT-Example 1b: Copy KSDS Records into an ESDS\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102328\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 30. REPRO\nN-----------------\nNExample 1b: Copy KSDS Records into an ESDS\nN------------------------------------------\nD//REPRO1B  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  REPRO -\nD    INFILE(INPUT) -\nD    OUTFILE(OUTPUT) -\nD    FROMKEY(DEAN) -\nD    TOKEY(JOHNSON)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//INPUT     DD DISP=OLD,DSNAME=RPR.MYKSDS\nD//OUTPUT    DD DISP=OLD,DSNAME=RPR.MYESDS\nN\nNThe JCL statements are:\nN-----------------------\nN-> INPUT: identifies the key-sequenced cluster, RPR.MYKSDS, that\nN   contains the source records.\nN\nN-> OUTPUT: identifies the entry-sequenced cluster, RPR.MYESDS, that\nN   the records are to be copied into.\nN\nNThe REPRO parameters are:\nN-------------------------\nN-> INFILE: points to the INPUT DD statement, which identifies the\nN   source data set.\nN\nN-> OUTFILE: points to the OUTPUT DD statement, which identifies the\nN   entry-sequenced data set into which the source records are to be\nN   copied.\nN\nN-> FROMKEY: specify the lower key boundary.\nN\nN-> TOKEY: specify the upper key boundary.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3013": {"ttr": 13320, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3013\nTDFSMS AMS\nT-Chapter 30.\nT-Example 2: Merge an ICF User Catalog into Another\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102338\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 30. REPRO\nN-----------------\nNExample 2: Merge an ICF User Catalog into Another\nN-------------------------------------------------\nD//REPRO2   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  REPRO -\nD    INDATASET(USERCAT.TESTDSNS) -\nD    OUTDATASET(USERCAT.DEVLDSNS) -\nD    FILE(DD1) -\nD    MERGECAT\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DD1       DD DISP=OLD,UNIT=DISK,VOL=SER=VSER01\nD//          DD DISP=OLD,UNIT=DISK,VOL=SER=VSER02\nD//          DD DISP=OLD,UNIT=DISK,VOL=SER=VSER03\nN\nNThe JCL statements are:\nN-----------------------\nN-> DD1: describes all the volumes that contain VVDS entries for all\nN   the entries that are being merged.\nN\nNThe REPRO parameters are:\nN-------------------------\nN-> INDATASET: identifies the source catalog, USERCAT.TESTDSNS.\nN\nN-> OUTDATASET: identifies the target catalog, USERCAT.DEVLDSNS.\nN\nN-> FILE: specifies the ddname of a DD statement that describes all the\nN   volumes that contain VVDS entries.\nN\nN-> MERGECAT: specifies that entries from the source catalog are to be\nN   merged with entries of the target catalog.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3014": {"ttr": 13569, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3014\nTDFSMS AMS\nT-Chapter 30.\nT-Example 3: Merge Selected Entries (Split) from a User Catalog\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102349\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 30. REPRO\nN-----------------\nNExample 3: Merge Selected Entries (Split) from a User Catalog\nN-------------------------------------------------------------\nD//REPRO3   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  REPRO -\nD    INDATASET(USERCAT.DEVLDSNS) -\nD    OUTDATASET(USERCAT.VSAMDSNS) -\nD    ENTRIES(VSAMDATA.*) -\nD    FILE(DD1) -\nD    MERGECAT\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//DD1       DD DISP=OLD,UNIT=DISK,VOL=SER=VSER01\nD//          DD DISP=OLD,UNIT=DISK,VOL=SER=VSER02\nD//          DD DISP=OLD,UNIT=DISK,VOL=SER=VSER03\nN\nNThe JCL statements are:\nN-----------------------\nN-> DD1: describes all the volumes that contain VVDS entries for all\nN   the entries that are being merged.\nN\nNThe REPRO parameters are:\nN-------------------------\nN-> INDATASET: identifies the source catalog, USERCAT.DEVLDSNS.\nN\nN-> OUTDATASET: identifies the target catalog, USERCAT.VSAMDSNS.\nN\nN-> FILE: specifies the ddname of a DD statement that describes all the\nN   volumes that contain VVDS entries.\nN\nN-> ENTRIES: specifies a generic name, VSAMDATA.*. All the names of the\nN   entries cataloged in the source catalog that satisfy the generic\nN   name are selected to be merged.\nN\nN-> MERGECAT: specifies that entries from the source catalog are to be\nN   merged with entries of the target catalog.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3015": {"ttr": 13571, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3015\nTDFSMS AMS\nT-Chapter 30.\nT-Example 4: Copy a Catalog (DEFINE, REPRO, EXPORT, LISTCAT, ALIAS)\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102400\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 30. REPRO\nN-----------------\nNExample 4: Copy a Catalog (DEFINE, REPRO, EXPORT, LISTCAT, ALIAS)\nN-----------------------------------------------------------------\nD//REPRO4   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    USERCATALOG( -\nD      NAME(USERCAT.COPYDSNS) -\nD      CYLINDERS(20 10) -\nD      ICFCATALOG -\nD      VOLUME(3390UC) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//*\nD//STEP2   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  REPRO -\nD    INDATASET(USERCAT.VSAMDSNS) -\nD    NOMERGECAT -\nD    OUTDATASET(USERCAT.COPYDSNS)\nD  EXPORT -\nD    USERCAT.VSAMDSNS -\nD    DISCONNECT\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//*\nD//STEP3   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTCAT -\nD    NAME -\nD    CAT(USERCAT.COPYDSNS)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//*\nD//STEP4   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  DEFINE -\nD    ALIAS( -\nD      NAME(VSAMDATA) -\nD      RELATE(USERCAT.COPYDSNS) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNSTEP1\nN-----\nNThe DEFINE USERCATALOG parameters are:\nN--------------------------------------\nN-> NAME: specifies the name of the new catalog, USERCAT.COPYDSNS.\nN\nN-> CYLINDERS: specifies that the catalog itself is initially to occupy\nN   20 cylinders. When the catalog's data component is extended, it is\nN   to be extended in increments of 10 cylinders.\nN\nN-> ICFCATALOG: specifies the catalog format of USERCAT.COPYDSNS.\nN\nN-> VOLUME: specifies that the catalog is to reside on volume 3390UC.\nN\nNSTEP2\nN-----\nNThe REPRO parameters are:\nN-------------------------\nMThe first three records of USERCAT.VSAMDSNS, which describe\nMUSERCAT.VSAMDSNS as an integrated catalog facility catalog, are not\nMcopied into USERCAT.COPYDSNS.\nN\nN-> INDATASET: identifies the source data set, USERCAT.VSAMDSNS.\nN   USERCAT.VSAMDSNS is cataloged in the master catalog.\nN\nN-> NOMERGECAT: specifies that the source catalog is to be completely\nN   copied into an empty target catalog.\nN\nN-> OUTDATASET: identifies the receiving data set, USERCAT.COPYDSNS.\nN   USERCAT.COPYDSNS is cataloged in the master catalog.\nN\nNThe EXPORT parameters are:\nN--------------------------\nN-> USERCAT.VSAMDSNS: names the catalog to be exported.\nN\nN-> DISCONNECT: removes USERCAT.VSAMDSNS's user catalog connector entry\nN   from the master catalog.\nN\nNSTEP3\nN-----\nNThe LISTCAT parameters are:\nN---------------------------\nN-> NAME: specifies that the name and entry type of the entries are to\nN   be listed.\nN\nN-> CAT: names the catalog to be listed, USERCAT.COPYDSNS.\nN\nNSTEP4\nN-----\nNThe DEFINE ALIAS parameters are:\nN--------------------------------\nN-> NAME: names the ALIAS, VSAMDATA.\nN\nN-> RELATE: names the usercatalog where entries will be stored.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3016": {"ttr": 13573, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3016\nTDFSMS AMS\nT-Chapter 30.\nT-Example 5: Copy a DBCS Data Set\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102410\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 30. REPRO\nN-----------------\nNExample 5: Copy a DBCS Data Set\nN-------------------------------\nD//REPRO5   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  REPRO -\nD    INDATASET(MY.DBCS.EXAMPLE) -\nD    DBCS -\nD    INSERTSHIFT((11 30)(51 60)) -\nD    OUTFILE(OUTDS)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//OUTDS     DD DISP=(NEW,CATLG),DSN=MY.DISK.DATA,\nD//             UNIT=3390,SPACE=(TRK,(20,10)),\nD//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=104)\nN\nNThe JCL statements are:\nN-----------------------\nN-> OUTDS: allocates a data set.\nN\nNThe REPRO parameters are:\nN-------------------------\nN-> INDATASET: specifies the name of MY.DBCS.EXAMPLE the data set to be\nN   copied. This data set might not contain SO and SI characters.\nN\nN-> DBCS: specifies that the data contains DBCS characters and should\nN   be criteria checked.\nN\nN-> INSERTSHIFT: specifies that a SO character is inserted before\nN   offsets 11 and 51 of the logical record and a SI character is\nN   inserted after offsets 30 and 60 of the logical record.\nN\nN-> OUTFILE: specifies the ddname of the output, OUTDS. This data set\nN   will have SO and SI characters inserted. Because four shift\nN   characters are being inserted, the LRECL must be 4 bytes larger than\nN   the input data set's LRECL.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3017": {"ttr": 13575, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3017\nTDFSMS AMS\nT-Chapter 30.\nT-Example 6: Encipher Using System Keys\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102421\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 30. REPRO\nN-----------------\nNExample 6: Encipher Using System Keys\nN-------------------------------------\nNThe enciphered data set is deciphered at a remote installation. The\nNkeys are managed by the Programmed Cryptographic Facility, the\nNCryptographic Unit Support, or the z/OS Integrated Cryptographic\nNService Facility.\nN\nD//REPRO6   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  REPRO -\nD    INFILE(CLEAR) -\nD    COUNT(50) -\nD    OUTFILE(CRYPT) -\nD    ENCIPHER( -\nD      CIPHERUNIT(4) -\nD      EXTERNALKEYNAME(AKEY27) -\nD      STOREDATAKEY -\nD      USERDATA(CONF) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//CLEAR     DD DISP=SHR,DSN=MY.RRDS1\nD//CRYPT     DD DISP=(NEW,CATLG),DSN=MY.RRDSEN(+1),\nD//             UNIT=SILO,LABEL=(1,SL,EXPDT=99000),\nD//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=516)\nN\nNThe JCL statements are:\nN-----------------------\nN-> CLEAR: allocates the input source data set.\nN\nN-> CRYPT: allocates a data set. LRECL is the relative record data set\nN   record size plus 4.\nN\nNThe REPRO parameters are:\nN-------------------------\nN-> INFILE: points to the CLEAR DD statement identifying the source\nN   data set to be enciphered, MY.RRDS1.\nN\nN-> COUNT: indicates that 50 records are to be copied.\nN\nN-> OUTFILE: points to the CRYPT DD statement, identifying the target\nN   data set on tape.\nN\nN-> ENCIPHER: indicates that the target data set is to contain an\nN   enciphered copy of the source data set.\nN\nN   -> CIPHERUNIT: indicates that 4 source records at a time are to be\nN      enciphered as a unit.\nN\nN   -> EXTERNALKEYNAME: supplies the name, AKEY27, of the external file\nN      key to be used to encipher the data encrypting key.\nN\nN   -> STOREDATAKEY: indicates that the data encrypting key enciphered\nN      under the secondary file key is to be stored in the header of\nN      the target data set.\nN\nN   -> USERDATA: specifies a character string, CONF, to be stored in\nN      the header of the target data set as user data.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3018": {"ttr": 13577, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3018\nTDFSMS AMS\nT-Chapter 30.\nT-Example 7: Decipher Using System Keys\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102431\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 30. REPRO\nN-----------------\nNExample 7: Decipher Using System Keys\nN-------------------------------------\nNIn this example, the enciphered data set produced by the job in\nNEncipher Using System Keys: Example 6 is deciphered, using a VSAM\nNrelative record data set as the target for the plaintext (deciphered)\nNdata. The empty slots in the original data set are reestablished. Keys\nNare managed by the Programmed Cryptographic Facility or the\nNCryptographic Support Unit.\nN\nD//REPRO7   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  REPRO -\nD    INFILE(CRYPT) -\nD    OUTFILE(CLEAR) -\nD    DECIPHER -\nD      SYSTEMKEY -\nD      SYSTEMKEYNAME(BKEY27) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//CLEAR     DD DISP=OLD,DSN=MY.RRDS1CPY\nD//CRYPT     DD DISP=OLD,DSN=MY.RRDSEN(-0),\nD//             UNIT=SILO,\nD//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=516)\nN\nNThe JCL statements are:\nN-----------------------\nN-> CLEAR: describes the relative record data set.\nN\nN-> CRYPT: describes and allocates the magnetic tape containing the\nN   enciphered data.\nN\nNThe REPRO parameters are:\nN-------------------------\nN-> INFILE: points to the CRYPT DD statement, identifying the tape\nN   containing the enciphered source data.\nN\nN-> OUTFILE: points to the CLEAR DD statement, identifying the data set\nN   to contain the deciphered data, RRDS2. The defined record size must\nN   be the same as that of the original relative record data set.\nN\nN-> DECIPHER: indicates that the source data set is to be deciphered as\nN   it is copied to the target data set.\nN\nN   -> SYSTEMKEY: indicates that keys are managed by the Program\nN      Cryptographic Facility, the Cryptographic Unit Support, or the\nN      z/OS Integrated Cryptographic Service Facility.\nN\nN   -> SYSTEMKEYNAME: supplies the key name, BKEY27, of the internal\nN      file key that was used to encipher the system data encrypting\nN      key. The file key must be an internal file key in this system.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3019": {"ttr": 13579, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3019\nTDFSMS AMS\nT-Chapter 30.\nT-Example 8: Encipher Using Private Keys\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102441\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 30. REPRO\nN-----------------\nNExample 8: Encipher Using Private Keys\nN--------------------------------------\nNThe enciphered data set is deciphered at a remote installation. The\nNkeys are managed by the Programmed Cryptographic Facility, the\nNCryptographic Unit Support, or the z/OS Integrated Cryptographic\nNService Facility.\nN\nD//REPRO8   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  REPRO -\nD    INFILE(CLEAR) -\nD    OUTFILE(CRYPT) -\nD    REUSE -\nD    ENCIPHER( -\nD      PRIVATEKEY -\nD      DATAKEYFILE(KEYIN) -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//CLEAR     DD DISP=OLD,DSN=MY.SAMDS1\nD//CRYPT     DD DISP=OLD,DSN=MY.ESDS1\nD//KEYIN     DD *\nD  X'53467568503A7C29'\nD/*\nN\nNThe JCL statements are:\nN-----------------------\nN-> CLEAR: describes the SAM data set.\nN\nN-> CRYPT: describes the entry-sequenced data set.\nN\nN-> KEYIN: describes the data encrypting key data set consisting of a\nN   single record containing the data encrypting key.\nN\nNThe REPRO parameters are:\nN-------------------------\nN-> INFILE: points to the CLEAR DD statement, identifying the source\nN   data set to be enciphered, MY.SAMDS1.\nN\nN-> OUTFILE: points to the CRYPT DD statement, identifying the target\nN   data set, MY.ESDS1. The defined maximum record size of the\nN   entry-sequenced data set must be large enough to accommodate the\nN   largest SAM record.\nN\nN-> REUSE: indicates that the target data set is to be opened as a\nN   reusable data set. If the data set was defined as REUSE, it is\nN   reset to empty; otherwise, the REPRO command will end.\nN\nN-> ENCIPHER: indicates that the target data set is to contain an\nN   enciphered copy of the source data set.\nN\nN   -> PRIVATEKEY: indicates that the key is to be managed by the user.\nN\nN   -> DATAKEYFILE: points to the KEYIN DD statement that supplies the\nN      plaintext data encrypting key, X'53467568503A7C29', to be used\nN      to encipher the data.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3020": {"ttr": 13581, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3020\nTDFSMS AMS\nT-Chapter 30.\nT-Example 9: Decipher Using Private Keys\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102451\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 30. REPRO\nN-----------------\nNExample 9: Decipher Using Private Keys\nN--------------------------------------\nD//REPRO9   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  REPRO -\nD    INFILE(CRYPT) -\nD    OUTFILE(CLEAR) -\nD    DECIPHER -\nD      DATAKEYVALUE(X'53467568503A7C29') -\nD    )\nD/*\nD//SYSPRINT  DD SYSOUT=*\nD//CLEAR     DD DISP=OLD,DSN=MY.ESDSCPY\nD//CRYPT     DD DISP=OLD,DSN=MY.RRDSEN(-0),\nD//             UNIT=SILO,\nD//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=516)\nN\nNThe JCL statements are:\nN-----------------------\nN-> CLEAR: describes the entry-sequenced record data set.\nN\nN-> CRYPT: describes and allocates the magnetic tape containing the\nN   enciphered data.\nN\nNThe REPRO parameters are:\nN-------------------------\nN-> INFILE: points to the CRYPT DD statement, identifying the tape\nN   containing the enciphered source data.\nN\nN-> OUTFILE: points to the CLEAR DD statement, identifying the data set\nN   to contain the deciphered data, RRDS2. The defined record size must\nN   be the same as that of the original relative record data set.\nN\nN-> DECIPHER: indicates that the source data set is to be deciphered as\nN   it is copied to the target data set.\nN\nN   -> DATAKEYVALUE: indicates that keys are to be managed by the user,\nN      and supplies the plaintext private data encrypting key,\nN      X'53467568503A7C29', used to encipher the data.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC31": {"ttr": 13583, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC31\nTDFSMS AMS\nT-Chapter 31. SETCACHE\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. SETCACHE\nN--------------------\nNYou can use the SETCACHE command to:\nN\nN-> Make cache available or unavailable to the subsystem for caching\nN   operations\nN\nN-> Make an addressed device (actuator) eligible or ineligible for\nN   caching operations\nN\nN-> Make cache unavailable to the subsystem when cache is in pending\nN   state\nN\nN-> Make nonvolatile storage (NVS) available or unavailable to the\nN   subsystem\nN\nN-> Activate or deactivate DASD fast write for a device\nN\nN-> Make DASD fast write unavailable for a device when DASD fast write\nN   is in pending state\nN\nN-> Make cache fast write access available or unavailable to the\nN   subsystem\nN\nN-> Schedule DASD writes for all modified data in cache and NVS\nN   (destage modified data)\nN\nN-> Discard pinned data for a device in cache and NVS\nN\nN-> Establish a duplex pair\nN\nN-> Establish a duplex pair from an existing suspended duplex pair\nN\nN-> Reestablish a duplex pair from the primary volume of a suspended\nN   duplex pair and an alternate device\nN\nN-> Reset a duplex pair to two simplex volumes\nN\nN-> Suspend the primary or secondary volume of a duplex pair\nN\nN-> Reinitialize the subsystem, setting all subsystem and device status\nN   to the Storage Control's initial installation default values\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3101": {"ttr": 13825, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3101\nTDFSMS AMS\nT-Chapter 31.\nT-Syntax for SETCACHE Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102515\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. SETCACHE\nN--------------------\nNSyntax for SETCACHE Parameters\nN------------------------------\nD  SETCACHE -\nN\nNRequired Parameters\nN-------------------\nD    FILE(ddname) |\nD    VOLUME(volser) /* Abbreviation: VOL */ -\nD      UNIT(unittype) | -\nD    UNITNUMBER(devid) /* Abbreviation: UNUM */ -\nI      specifies the volume of a unit within the subsystem.\nN\nI      FILE(ddname): specifies the name of a DD statement that\nI        identifies the device type and volume of a unit within the\nI        subsystem. For ddname, substitute the name of the DD statement\nI        identifying the device type.\nN\nI      VOLUME(volser) /* Abbreviation: VOL */: specifies the volume\nI        serial number of a volume within the subsystem.\nN\nI        UNIT(unittype): specifies the unit type of the subsystem.\nN\nI      UNITNUMBER(devid) /* Abbreviation: UNUM */: is the MVS device\nI        number. The UNITNUMBER parameter is only accepted with the\nI        following:\nN\nI        DEVICE ON or OFF\nI        SUBSYSTEM OFF\nI        NVS OFF\nI        DASDFASTWRITE ON or OFF or PENDINGOFF\nI        DISCARDPINNED\nI        REINITIALIZE\nI        RESETTOSIMPLEX\nI        CACHEFASTWRITE\nN\nI        Note: The UNITNUMBER parameter cannot be used for an online\nI        device in the \"Intervention Required\" state.\nN\nNOptional Parameters\nN-------------------\nD    DEVICE | /* Abbreviation: DEV */ -\nD    SUBSYSTEM | /* Abbreviations: SUBSYS | SSYS */ -\nD    NVS | -\nD    DASDFASTWRITE | /* Abbreviations: DFW | DASDFW */ -\nD    CACHEFASTWRITE /* Abbreviations: CFW | CACHEFW */ -\nI      specifies whether the command pertains to caching for a specific\nI      device or subsystem caching, nonvolatile storage, DASD fast\nI      write to a specific device, or cache fast write access for the\nI      subsystem.\nN\nI      DEVICE /* Abbreviation: DEV */: specifies that access to the\nI        cache for a particular device is allowed or prohibited.\nN\nI        Notes:\nN\nI        1. DEVICE OFF is not supported for the ESS.\nN\nI        2. DEVICE ON or OFF can be issued to an offline device by\nI           using the UNITNUMBER parameter.\nN\nI      SUBSYSTEM /* Abbreviations: SUBSYS | SSYS */: specifies that\nI        access to cache for the subsystem is allowed or prohibited.\nN\nI        Notes:\nN\nI        1. SUBSYSTEM OFF is not supported for the ESS.\nN\nI        2. SUBSYSTEM OFF can be issued to an offline device by using\nI           the UNITNUMBER parameter.\nN\nI        3. READ access authority to the RACF FACILITY class resource\nI           STGADMIN.IDC.SETCACHE.SUBSYSTEM is required to use the\nI           SUBSYSTEM parameter.\nN\nI        Attention: When cache operation is restored,\nI        SETCACHE RESETTODUPLEX must be issued for each suspended duplex\nI        pair in the subsystem.\nN\nI      NVS: specifies that access to the nonvolatile storage is allowed\nI        or prohibited.\nN\nI        Notes:\nN\nI        1. NVS OFF is not supported for the ESS.\nN\nI        2. NVS OFF can be issued to an offline device by using the\nI           UNITNUMBER parameter.\nN\nI      DASDFASTWRITE /* Abbreviations: DFW | DASDFW */: specifies that\nI        DASD fast write to a particular device is allowed or\nI        prohibited.\nN\nI        Notes:\nN\nI        1. DASDFASTWRITE OFF is not supported for the ESS.\nN\nI        2. DASDFASTWRITE ON or OFF or PENDINGOFF can be issued to an\nI           offline device by using the UNITNUMBER parameter.\nN\nI      CACHEFASTWRITE /* Abbreviations: CFW | CACHEFW */: specifies that\nI        cache fast write for the subsystem is allowed or prohibited.\nN\nD    ON | -\nD    OFF | -\nD    PENDINGOFF /* Abbreviation: PEND */ -\nI      specifies whether access is allowed or prohibited.\nN\nI      ON: specifies that access is allowed.\nN\nI      OFF:specifies that access is prohibited.\nN\nI        Note: Setting cache on or off for the subsystem and setting\nI        cache on or off for a device are independent operations. That\nI        is, cache can be set on or off for individual devices whether\nI        the cache is on or off for the subsystem. However, if the cache\nI        is set off for the subsystem, setting cache on for an\nI        individual device has no effect until the cache is set on for\nI        the subsystem.\nN\nI      PENDINGOFF /* Abbreviation: PEND */: specifies a recovery command\nI        to allow cache or DASD fast write to a particular device to be\nI        set off when cache or DASD fast write is in pending state.\nN\nI        Notes:\nN\nI        1. This parameter should only be used as a last resort because\nI           no destage occurs and data could be lost.\nN\nI        2. The PENDINGOFF parameter must be used with either SUBSYSTEM\nI           or DASDFASTWRITE, and is accepted only if SUBSYSTEM OFF or\nI           DASDFASTWRITE OFF failed. That is, when the PENDINGOFF\nI           parameter is used with DASDFASTWRITE, the device must be in\nI           the DEACTIVATION PENDING state. When the PENDINGOFF\nI           parameter is used with SUBSYSTEM, the subsystem must be in\nI           the DEACTIVATION FAILED state (see LISTDATA STATUS).\nI           Otherwise, the command is rejected.\nN\nI        3. PENDINGOFF is not available for NVS. If NVS OFF does not\nI           obtain the desired result, issue a DASDFASTWRITE PENDINGOFF\nI           to each device where DASD fast write is in a deactivation\nI           pending state. NVS OFF should then work.\nN\nD    SUBCHSET(n) -\nI      Specifies the subchannel set number from 0 to 3 that the device\nI      number specified with the UNITNUMBER resides in. Valid with the\nI      CACHEFASTWRITE optional parameter when the UNITNUMBER parameter\nI      is used.\nN\nI      n: Specifies the subchannel set number from 0 to 3 that the\nI        device number specified with the UNITNUMBER resides in.\nN\nNSpecial Purpose Optional Parameters\nN-----------------------------------\nMThe following parameters are not to be issued concurrently with the\nMoptional parameters described previously, or with each other, unless\nMotherwise noted.\nM\nM    DISCARDPINNED | /* Abbreviation: DPIN */ -\nM    DESTAGE | /* Abbreviation: DESTG */ -\nM    REINITIALIZE | /* Abbreviations: RINIT | REINIT */ -\nM    SETSECONDARY(devid) | /* Abbreviation: SSEC */ -\nM    SUSPENDPRIMARY | /* Abbreviations: SUSPRI | SPPRI */ -\nM    SUSPENDSECONDARY | /* Abbreviations: SUSSEC | SPSEC */ -\nM    RESETTODUPLEX | /* Abbreviations: RESETDUP | REDUP */ -\nM    REESTABLISHDUPLEX(devid) | /* Abbreviation: REEST */ -\nM    RESETTOSIMPLEX /* Abbreviations: RESETSIM | RESIM */ -\nI      specifies operations pertaining to dual copy.\nN\nI      DISCARDPINNED /* Abbreviation: DPIN */: specifies that all pinned\nI        cache fast write data and DASD fast write data for the\nI        specified volume is discarded.\nN\nI        Note: DISCARDPINNED can be issued to an offline device by using\nI        the UNITNUMBER parameter.\nN\nI      DESTAGE /* Abbreviation: DESTG */: specifies that a destage to\nI        DASD of all modified tracks in the cache and NVS is to be\nI        scheduled.\nN\nI      REINITIALIZE /* Abbreviations: RINIT | REINIT */: causes a cached\nI        Storage Control subsystem to unconditionally establish or\nI        reestablish all caching status on the subsystem status devices.\nI        (This is a reconfiguration of the subsystem, setting all\nI        caching status to its default values.) REINITIALIZE requires\nI        the use of the UNITNUMBER parameter, because all devices must\nI        be offline before the command is executed.\nN\nI        REINITIALIZE also resets all CCAs and DDCs to the initial\nI        installation values (direct translation).\nN\nI        Notes:\nN\nI        1. The REINITIALIZE parameter terminates dual copy logical\nI           volumes (duplex pairs).\nN\nI        2. Ensure that other operating systems are not accessing the\nI           target subsystem before using the REINITIALIZE command.\nN\nI        3. The REINITIALIZE parameter causes pinned data to be lost.\nN\nI      SETSECONDARY(devid) /* Abbreviation: SSEC */: specifies that a\nI        dual copy (duplex) pair is to be established. The secondary\nI        volume must be offline and is identified by its devid (devid\nI        is the MVS device number). DASD fast write and caching status\nI        of the primary volume are maintained for the duplex pair.\nN\nI        devid: is the MVS device number.\nN\nI        Notes:\nN\nI        1. This parameter is not supported for the ESS.\nN\nI        2. With this parameter, the JCL JOB statement should include\nI           'TIME=1440'.\nN\nI        3. This parameter may be used in conjunction with COPY (with\nI           or without PACE) or NOCOPY.\nN\nI        4. During the process of establishing a duplex pair, caching\nI           for the primary volume is temporarily deactivated.\nN\nI        5. When you use dual copy to migrate from 3390 devices to\nI           RAMAC devices, an invalid format 4 DSCB is created on the\nI           target device. Use ICKDSF to fix the format 4 DSCB. See\nI           your IBM representative for the latest service level of\nI           ICKDSF that provides this function.\nN\nM           2018-03-22 A GOOGLE search hints R17 AND run ICKDSF BUILDIX\nM           to rebuild it.\nN\nI        Device level caching, for both primary and secondary devices,\nI        is set to off to force data destaging. It is set back to on,\nI        automatically by software, after the dual copy operation\nI        completes.\nN\nI        The software can be overridden by IDCAMS allowing cache to be\nI        set on after the establishment of a duplex pair has been\nI        initiated (verify with a DEVSERV command that status is pending\nI        for primary device before setting device cache to on).\nN\nI      SUSPENDPRIMARY /* Abbreviations: SUSPRI | SPPRI */: suspends the\nI        primary volume of a duplex pair. The subsystem swaps the\nI        primary and secondary volumes of the duplex pair. The suspended\nI        device is the secondary address. DASD fast write status and\nI        caching status are maintained.\nN\nI        Note: This parameter is not supported for the ESS.\nN\nI      SUSPENDSECONDARY /* Abbreviations: SUSSEC | SPSEC */: suspends\nI        the secondary volume of a duplex pair. DASD fast write status\nI        and caching status are maintained.\nN\nI        Note: This parameter is not supported for the ESS.\nN\nI      RESETTODUPLEX /* Abbreviations: RESETDUP | REDUP */:\nI        establishes a duplex pair from a suspended duplex pair. The\nI        subsystem always attempts to match channel connection addresses\nI        (CCAs) and director-to-device connection (DDC) addresses, and\nI        swaps the devices after synchronization if a swap would result\nI        in a match. If the pair is swapped, all data in the cache is\nI        invalidated. DASD fast write status and caching status are\nI        maintained.\nN\nI        Notes:\nN\nI        1. This parameter is not supported for the ESS.\nN\nI        2. With this parameter, the JCL JOB statement should include\nI           'TIME=1440'.\nN\nI        3. COPY and PACE can be used in conjunction with this\nI           parameter.\nN\nI      REESTABLISHDUPLEX(devid) /* Abbreviation: REEST */: reestablishes\nI        a duplex pair from the primary volume in a suspended duplex\nI        pair and the user-specified alternate device. DASD fast write\nI        status and caching status are maintained.\nN\nI        Notes:\nN\nI        1. This parameter is not supported for the ESS.\nN\nI        2. With this parameter, the JCL JOB statement should include\nI           'TIME=1440'.\nN\nI        3. COPY and PACE can be used in conjunction with this\nI           parameter.\nN\nI      RESETTOSIMPLEX /* Abbreviations: RESETSIM | RESIM */: terminates\nI        a duplex pair. When the volumes are changed from a duplex pair\nI        to simplex volumes, the old primary volume retains the DASD\nI        fast write and the device caching status of the duplex pair.\nI        For the old secondary volume, DASD fast write becomes inactive\nI        and device caching becomes active (reverts to default status).\nN\nI        Notes:\nN\nI        1. This parameter is not supported for the ESS.\nN\nI        2. RESETTOSIMPLEX can be issued to an offline device by using\nI           the UNITNUMBER parameter.\nN\nM    COPY | -\nM    NOCOPY -\nI      specifies whether or not the Storage Control is to copy the\nI      primary volume onto the secondary volume when establishing a\nI      duplex pair (used only with the SETSECONDARY parameter).\nN\nI      COPY: specifies that the Storage Control is to copy the primary\nI        volume onto the secondary when establishing a duplex pair\nI        (SETSECONDARY). (Copy can be used with the RESETTODUPLEX and\nI        the REESTABLISHDUPLEX parameters.)\nN\nI        Note: Specify the COPY parameter, except for pairs of primary\nI        and secondary volumes that have just been initialized by ICKDSF\nI        using the same initialization parameters.\nN\nI      NOCOPY: specifies that the primary and secondary volumes are\nI        identical and the Storage Control does not need to copy the\nI        primary volume onto the secondary to establish the duplex pair\nI        (used only with SETSECONDARY; cannot be used with\nI        REESTABLISHDUPLEX or RESETTODUPLEX).\nN\nI        Notes:\nN\nI        1. The subsystem keeps an indication that the duplex pair was\nI           established using an internal copy. If an error results\nI           because the two volumes are not identical, this indicator\nI           is checked. The message given as a result of the\nI           out-of-synchronization condition indicates if an internal\nI           copy was done or that the out-of-synchronization condition\nI           is caused by a probable user error.\nN\nI        2. Specify only the NOCOPY parameter when both the primary and\nI           secondary volumes have been initialized with ICKDSF, using\nI           the same initialization parameters, and contain no\nI           application data.\nN\nI        3. Just as the parameter name suggests, nothing is copied from\nI           the primary to the secondary.\nN\nM    PACE(n)\nI      specifies the number of tracks from 1 to 255 that are to be\nI      copied without interruption during the Storage Control copy\nI      operation to establish a duplex pair (SETSECONDARY); to establish\nI      a duplex pair from a suspended duplex pair (RESETTODUPLEX); or\nI      to reestablish a duplex pair from the primary of a suspended\nI      pair and a user-specified alternate (REESTABLISHDUPLEX).\nN\nI      Specifying PACE(0) defines an uninterruptible (dedicated) copy\nI        operation.\nN\nI      Specifying PACE(1) to PACE (255) defines the number of tracks to\nI        copy before releasing the device for any outstanding device\nI        activity (when there is no more activity, the copy of the next\nI        n tracks resumes). The default is 15 tracks.\nN\nI      Note: Specify PACE(1) or (2) for optimum device availability.\nI      Using PACE(0) or a large PACE value may lock out other activity\nI      to the volume for a long time.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC3131": {"ttr": 13828, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3131\nTDFSMS AMS\nT-Chapter 31.\nT-Case 1: Setting Caching On for the Subsystem\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102534\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 1: Setting Caching On for the Subsystem\nN--------------------------------------------\nNSETCACHE SUBSYSTEM ON enables normal caching for the subsystem. If\nNcache storage is disabled or in a pending state, the command fails.\nN\nNNote: Pinned data, a cache failure, or cache disabled for maintenance\nNcan cause the command to fail.\nN\nNAbbreviation: SETC\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3132": {"ttr": 13830, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3132\nTDFSMS AMS\nT-Chapter 31.\nT-Case 2: Setting Caching On for a Device\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-189953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 2: Setting Caching On for a Device\nN---------------------------------------\nNSETCACHE DEVICE ON sets caching on for individual devices. The\nNprerequisite for device caching is subsystem caching on. This\nNcommand can fail due to pinned data.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3133": {"ttr": 13832, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3133\nTDFSMS AMS\nT-Chapter 31.\nT-Case 3: Setting Cache Fast Write On for the Subsystem\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-189953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 3: Setting Cache Fast Write On for the Subsystem\nN-----------------------------------------------------\nNSETCACHE CACHEFASTWRITE ON sets cache fast write on for the subsystem.\nNWith cache fast write on for the subsystem, all caching volumes use\nNcache fast write for any channel program specifying it. If cache fast\nNwrite is not on for the subsystem, the specification is ignored in\nNchannel programs that request it.\nN\nNPrerequisites for cache fast write are:\nN\nN-> Subsystem caching on\nN-> Device caching on\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3134": {"ttr": 13834, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3134\nTDFSMS AMS\nT-Chapter 31.\nT-Case 4: Setting Nonvolatile Storage On for the Subsystem\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-189953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 4: Setting Nonvolatile Storage On for the Subsystem\nN--------------------------------------------------------\nNSETCACHE NVS ON enables use of the nonvolatile storage for the\nNsubsystem and connects the battery to the NVS.\nN\nNIf the command fails, it may be due to:\nN\nN-> Pinned data\nN-> NVS failure\nN-> NVS disabled for maintenance.\nN\nNIf the probable cause is pinned data, use LISTDATA PINNED SUBSYSTEM\nNor DEVSERV to identify which volumes in the subsystem have pinned data.\nNFix the problem that is preventing destage, if possible. If the volume\nNcannot be repaired, use DASD installation recovery procedures. If the\nNpinned volumes have DASD fast write active, issue DASDFASTWRITE OFF and\nNthen DASDFASTWRITE PENDINGOFF to clear the pinned tracks and set DASD\nNfast write off. DISCARDPINNED can also be used; follow DASD recovery\nNprocedures. If the probable cause is NVS failed or disabled, fix the\nNproblem and reissue SETCACHE NVS ON.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3135": {"ttr": 13836, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3135\nTDFSMS AMS\nT-Chapter 31.\nT-Case 5: Setting DASD Fast Write On for a Volume\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-189953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 5: Setting DASD Fast Write On for a Volume\nN-----------------------------------------------\nNSETCACHE DASDFASTWRITE ON activates DASD fast write for the specified\nNvolume. The procedure to activate DASD fast write is:\nN\nN  1. SETCACHE SUBSYSTEM ON\nN  2. SETCACHE DEVICE ON\nN  3. SETCACHE NVS ON\nN  4. SETCACHE DASDFASTWRITE ON\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3136": {"ttr": 13838, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3136\nTDFSMS AMS\nT-Chapter 31.\nT-Case 6: Creating a Duplex Pair from Two Simplex Volumes\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-189953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 6: Creating a Duplex Pair from Two Simplex Volumes\nN-------------------------------------------------------\nNThe procedure to create a duplex pair is:\nN\nN  1. Identify the primary and secondary volumes\nN\nN  2. Issue SETCACHE SUBSYSTEM ON\nN\nN  3. Vary the target secondary volume offline to all systems\nN\nN  4. SETCACHE NVS ON\nN\nN  5. SETCACHE SETSECONDARY specifying the primary volume id and\nN     secondary address\nN\nN  6. SETCACHE DEVICE ON for the primary volume\nN\nN  7. (optional) SETCACHE DASDFASTWRITE ON\nN\nNNotes:\nN  1. If DASD fast write or device caching was on for the primary\nN     volume before SETCACHE SETSECONDARY was issued, DASD fast write\nN     or device caching is on for the pair after it is established.\nN\nN  2. Device caching may be activated to speed up establishing the\nN     duplex pair.\nN\nN  3. When you use dual copy to migrate from 3390 devices to RAMAC\nN     devices, an invalid format 4 DSCB is created on the target\nN     device. An ICKDSF APAR must be installed to fix the format 4 DSCB.\nN     See your IBM representative for the latest service level.\nN\nN  4. If either volume was previously acquired by an LPAR and has not\nN     been released, an error message is issued with text that states\nN     that the duplex pair could not be established because path-groups\nN     are not compatible.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3137": {"ttr": 14081, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3137\nTDFSMS AMS\nT-Chapter 31.\nT-Case 7: Changing 3990 and 9390 Cache and NVS Operating Modes\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 7: Changing 3990 and 9390 Cache and NVS Operating Modes\nN------------------------------------------------------------\nNThis discussion covers the various Storage Control SETCACHE commands\nNand the resulting actions. The commands presented here are not arranged\nNin any priority and operate independently of one another.\nN\nMNo indented subtopic followed. Perhaps the next five (5) topics are\nMmeant to be the missing discussion. With the sloppy state this manual\nMis in it is hard to know for sure.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3138": {"ttr": 14083, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3138\nTDFSMS AMS\nT-Chapter 31.\nT-Case 8: Setting Cache Off for the Subsystem\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 8: Setting Cache Off for the Subsystem\nN-------------------------------------------\nNSETCACHE SUBSYSTEM OFF sets normal caching off for the subsystem. The\nNfollowing actions occur:\nN\nN-> Device caching, cache fast write, and DASD fast write stop. Device\nN   status, with respect to each of these functions, is retained and the\nN   active functions resume when subsystem caching is set on. When DASD\nN   fast write and dual copy are set on together (fast dual copy), the\nN   data is destaged from NVS to both devices.\nN\nN-> Each duplex pair is set to suspended state on the first write\nN   operation to the pair. Also, any duplex pairs with\nN   out-of-synchronization cylinders are suspended after SETCACHE\nN   SUBSYSTEM OFF is issued. However, if there is no write activity to\nN   a duplex pair, and all cylinders are in synchronization, the pair\nN   is not set to suspended duplex state.\nN\nN-> The Storage Control destages all modified data from cache and NVS\nN   to DASD.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3139": {"ttr": 14085, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3139\nTDFSMS AMS\nT-Chapter 31.\nT-Case 9: Setting Caching Off for a Device\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 9: Setting Caching Off for a Device\nN----------------------------------------\nNSETCACHE DEVICE OFF sets device caching off for the specified volume.\nNCache fast write and DASD fast write operations stop for that device.\nNModified data for the volume is destaged to the DASD. The cache fast\nNwrite and DASD fast write volume status is retained so that when cache\nNis set on again, these functions resume.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3140": {"ttr": 14087, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3140\nTDFSMS AMS\nT-Chapter 31.\nT-Case 10: Setting Nonvolatile Storage Off for the Subsystem\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 10: Setting Nonvolatile Storage Off for the Subsystem\nN----------------------------------------------------------\nNSETCACHE NVS OFF deactivates the NVS. This command also disconnects\nNthe NVS battery on a 3990 Model 6, or 9390, or on a 3990 Model 3 with\nNeither RPQ 8B0174 or 8B0175 installed. DASD fast write is stopped and\nNall modified DASD fast write data is destaged to the appropriate\nNvolumes. Cache fast write data is not destaged. Dual copy changed\nNcylinder logging is terminated for dual copy volumes, but both copies\nNof dual copy volumes continue to be updated.\nN\nNEither a hardware failure in a duplex pair while the NVS is\nNdeactivated, or a utility power outage, or a loss of cache, or the\nNcache being set off at this time causes all duplex pairs to be set to\nNsuspended duplex state at the next write I/O to each pair.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3141": {"ttr": 14089, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3141\nTDFSMS AMS\nT-Chapter 31.\nT-Case 11: Setting DASD Fast Write Off for a Volume\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 11: Setting DASD Fast Write Off for a Volume\nN-------------------------------------------------\nNSETCACHE DASDFASTWRITE OFF sets DASD fast write off for the designated\nNvolume. All DASD fast write data for the specified volume is destaged.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3142": {"ttr": 14091, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3142\nTDFSMS AMS\nT-Chapter 31.\nT-Case 12: Setting Cache Fast Write Off for the Subsystem\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 12: Setting Cache Fast Write Off for the Subsystem\nN-------------------------------------------------------\nNSETCACHE CACHEFASTWRITE OFF sets cache fast write off for the logical\nNDASD subsystem. All cache fast write data is destaged to the DASD.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3143": {"ttr": 14093, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3143\nTDFSMS AMS\nT-Chapter 31.\nT-Case 13: Resetting a Duplex Pair to Two Simplex Volumes\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 13: Resetting a Duplex Pair to Two Simplex Volumes\nN-------------------------------------------------------\nNSETCACHE RESETTOSIMPLEX terminates a duplex pair and restores both\nNvolumes to simplex operations. The primary volume retains the DASD\nNfast write status of the dual copy logical volume. The secondary\nNvolume assumes the device status defaults, unless the pair was\nNsuspended, in which case the caching status is inactive. Normally,\nNall updates in NVS and cache are destaged to both the primary and the\nNsecondary volumes.\nN\nNThe primary volume contains copies of all updates to the volume.\nNBecause of a DASD fast write pending condition (probably due to\nNanother job), modified tracks might not have been destaged to the\nNsecondary volume. If the volumes must be identical, either use a\nNutility program to compare the two volumes, or change the secondary\nNvolume serial number using ICKDSF, vary it online, and copy the\nNprimary volume to the secondary volume.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3144": {"ttr": 14095, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3144\nTDFSMS AMS\nT-Chapter 31.\nT-Case 14: Destaging All Modified Data in Cache and NVS to DASD\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 14: Destaging All Modified Data in Cache and NVS to DASD\nN-------------------------------------------------------------\nNSETCACHE DESTAGE specifies that all modified data in cache and NVS is\nNscheduled for destage to DASD. This command is usually issued for\nNshutdown and is included in the operator command Halt End of Day\nN(Halt EOD).\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3145": {"ttr": 14097, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3145\nTDFSMS AMS\nT-Chapter 31.\nT-Case 15: Resetting All Cache and NVS Operating States to Defaults\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 15: Resetting All Cache and NVS Operating States to Defaults\nN-----------------------------------------------------------------\nNSETCACHE REINITIALIZE performs the following:\nN\nN-> Resets all Storage Control cache and NVS operating states to the\nN   initial installation subsystem defaults (in addition all status\nN   tracks are reinitialized).\nN\nN-> Resets all status information to default state.\nN\nN-> Discards all modified tracks in the cache or NVS. All dual copy\nN   logical volumes are set to simplex state and all dual copy logical\nN   volumes are reset to simplex. To save the modified data, issue\nN   SETCACHE DESTAGE before issuing SETCACHE REINITIALIZE.\nN\nNBecause of the nature of this command, all volumes in the subsystem\nNmust be varied offline to all attached system images before the command\nNis issued.\nN\nNAttention: Carefully consider the use of SETCACHE REINITIALIZE before\nNissuing the command and ensure that all data has been destaged to DASD.\nNThis command resets all dual copy logical pairs to simplex state and\nNresets the CCA/DDC pointers to their original state.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3146": {"ttr": 14099, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3146\nTDFSMS AMS\nT-Chapter 31.\nT-Case 16: Using Dual Copy to Migrate Volumes\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 16: Using Dual Copy to Migrate Volumes\nN-------------------------------------------\nNThe following steps show how to migrate data from one device to\nNanother without disrupting the application. Separate procedures are\nNprovided for simplex volumes and duplex pair volumes.\nN\nNNotes:\nN  1. When you use dual copy to migrate volumes, remember that the\nN     correspondence between the original CCA and DDC addresses is\nN     switched and that the Storage Control retains the updated\nN     CCA-to-DDC address correspondence.\nN\nN     Use the message response to the DEVSERV PATHS command to identify\nN     the current CCA-to-DDC relationship.\nN\nN  2. When you use dual copy to migrate from 3390 devices to RAMAC\nN     devices, an invalid format 4 DSCB is created on the target device.\nN     Use ICKDSF to fix the format 4 DSCB. See your IBM representative\nN     for the latest service level of ICKDSF that provides this\nN     function.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3147": {"ttr": 14101, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3147\nTDFSMS AMS\nT-Chapter 31.\nT-Case 17: Migrating Simplex Volume\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 17: Migrating Simplex Volume\nN---------------------------------\nNThe following procedure is used to migrate simplex volumes, that is,\nNvolumes that are not already part of a duplex pair. This procedure is\nNvalid for any two devices qualified to be part of a duplex pair.\nN\nN1. Vary the target secondary volume offline to all attached systems.\nN\nN2. Issue SETCACHE SETSECONDARY.\nN\nN3. After the copy completes, issue SETCACHE SUSPENDPRIMARY.\nN\nN4. Issue SETCACHE RESETTOSIMPLEX.\nN\nN5. The original device is no longer in use. The application continues\nN   to access the same UCB (MVS device address), but is using a\nN   different physical device.\nN\nN6. Proceed with required activities. Use ICKDSF to change the volser\nN   if required.\nN\nNNote: When you use dual copy to migrate from 3390 devices to RAMAC\nNdevices, an invalid format 4 DSCB is created on the target device. Use\nNICKDSF to fix the format 4 DSCB. See your IBM representative for the\nNlatest service level of ICKDSF that provides this function.\nN\nNIf DASD fast write was active before this procedure was executed, it\nNremains active after the procedure completes.\nN\nN1. Before the duplex pair is established, the channel connection\nN   address (CCA), which is known to MVS, and the director to device\nN   connection (DDC) address, which is the physical address known\nN   within the subsystem, are the same as when initialized.\nN\nN2. After creating the duplex pair, both addresses directly correlate.\nN\nN3. When SETCACHE SUSPENDPRIMARY is issued, the Storage Control swaps\nN   the CCA-to-DDC assignments between the primary and the secondary\nN   volumes.\nN\nN4. The system application continues to use the UCB for device 201.\nN   However, the Storage Control directs the I/O to the physical device\nN   addressed by DDC 12 (the target volume). The UCB for the offline\nN   device 212 still points to CCA 12, but the Storage Control points\nN   CCA 12 to the suspended device (DDC 01).\nN\nN5. When SETCACHE RESETTOSIMPLEX is issued, the Storage Control\nN   maintains the swapped CCA-to-DDC pointers.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3148": {"ttr": 14103, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3148\nTDFSMS AMS\nT-Chapter 31.\nT-Case 18: Migrating Duplex Volumes\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 18: Migrating Duplex Volumes\nN---------------------------------\nNThis procedure is valid for migrating a primary or secondary volume in\nNa duplex pair to another like device.\nN\nN-> Vary the target volume offline to all systems.\nN\nN-> Issue SETCACHE SUSPENDSECONDARY or SUSPENDPRIMARY, depending on\nN   whether the secondary or the primary, respectively, needs to be\nN   taken out of the duplex pair.\nN\nN-> Issue SETCACHE REESTABLISHDUPLEX with the third volume.\nN\nN-> After the copy completes, perform the required action for the\nN   volume suspended from the duplex pair.\nN\nNNote: When you use dual copy to migrate from 3390 devices to RAMAC\nNdevices, an invalid format 4 DSCB is created on the target device. Use\nNICKDSF to fix the format 4 DSCB. See your IBM representative for the\nNlatest service level of ICKDSF that provides this function.\nN\nN1. When the SETCACHE SUSPENDPRIMARY completes, the system device number\nN   points to the CCA address of the old primary volume. Internally, the\nN   Storage Control has swapped the CCA-to-DDC pointers. The old primary\nN   CCA now points to the old secondary physical device DDC. Thus, the\nN   old secondary volume has become the new primary volume; all system\nN   I/O is directed to the new primary. The CCA for the old secondary\nN   volume now points to the DDC address of the old primary device.\nN\nN2. After the REESTABLISHDUPLEX completes, the new secondary is\nN   incorporated into the duplex pair, the old primary volume is no\nN   longer in the pair, and the CCA of the old secondary now points to\nN   the DDC address of the old primary. To run ICKDSF or any other\nN   program against the old primary volume, the old primary should be\nN   addressed as 212.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3149": {"ttr": 14105, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3149\nTDFSMS AMS\nT-Chapter 31.\nT-Case 19: Dual Copy Device Address Mapping\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-149953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 31. Using SETCACHE\nN--------------------------\nNCase 19: Dual Copy Device Address Mapping\nN-----------------------------------------\nNIn a dual copy environment, normal subsystem activities can modify the\nNinternal mapping of the system address (device number) to the actual\nNdevice. In IDCAMS reports and in the output of the DEVSERV command,\nNthe low-order two digits of the system address are shown as the CCA,\nNwhereas the physical device address is shown as the DDC. The subsystem\nNmanages the integrity of this mapping, so it need not be a cause for\nNconcern. Circumstances exist, however, when the user needs to be aware\nNthat dual copy address mapping may have changed:\nN\nN-> When device maintenance is required\nN\nN-> When devices are being removed or repositioned\nN\nN-> When subsystem re-initialization is required\nN\nN-> When it is necessary to vary a device offline for reconfiguration\nN   or maintenance, use the CCA to determine the system address.\nN\nNYou can see the current map of system and device addresses by issuing\nNthe DEVSERV command or by running IDCAMS LISTDATA DSTATUS to any device\nNor volume in the subsystem. Along with EREP (for 3380s) and SIM\nNmessages (for 3390s), this information may be useful to the service\nNrepresentative for identifying a failing device.\nN\nNNote: Because of the asynchronous nature of IDCAMS operations, it is\nNpossible that during certain operations, the results from a DEVSERV\nNcommand could differ from the results of an IDCAMS report. If the two\nNoperations start together, the DEVSERV results are more current.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC32": {"ttr": 14337, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC32\nTDFSMS AMS\nT-Chapter 32. SHCDS\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-148953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 32. SHCDS\nN-----------------\nNUse the SHCDS command to list SMSVSAM recovery associated with\nNsubsystems spheres and to control that recovery. This command works\nNboth in batch and in the TSO/E foreground. The functions include the\nNfollowing subcommands:\nN\nN-> List subcommands\nN\nN-> Subcommands that enable you to take action on work that was shunted\nN\nN-> Subcommands to control a manual forward recovery in the absence of\nN   a forward recovery utility that supports SMSVSAM protocols\nN\nN-> Subcommands that enable you to run critical non-RLS batch window\nN   work when it is not possible to first close out all outstanding\nN   SMSVSAM recovery\nN\nN-> A subcommand that allows for a subsystem cold start\nN\nN   Recommendation: After a cold start, if recovery was not completed\nN   for any data sets, they are most likely left in a damaged state and\nN   must be recovered manually. If the data sets are forward\nN   recoverable, their forward recovery logs might also be damaged.\nN   Manually recover the data sets (without using forward recovery),\nN   take backups of them and of any other data sets that use the forward\nN   recovery log, and then delete and redefine the forward recovery log.\nN\nNUse this command cautiously. CICS Recovery and Restart Guide describes\nNmany of the situations that require the use of the SHCDS command. See\nNz/OS DFSMSdfp Storage Administration for details about administering\nNVSAM RLS. See Appendix C, \"Interpreting SHCDS Output Listings\" in the\nNmanual for SHCDS output listings.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC3201": {"ttr": 14339, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3201\nTDFSMS AMS\nT-Chapter 32.\nT-Syntax for SCHDS Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-489953\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 32. SCHDS\nN-----------------\nNSyntax for SCHDS Parameters\nN---------------------------\nD  SCHDS -\nN\nNRequired Parameters\nN-------------------\nNSCHDS has no required parameters, but you must specify one of the\nNoptional parameters.\nN\nNOUTFILE is a second optional parameter you can specify.\nN\nNOptional Parameters\nN-------------------\nD    CFREPAIR( /* Abbreviation: CFREP */ -\nI      Use this command to reconstruct the RLS indicators for all\nI      applicable data sets in a restored catalog. The catalog must be\nI      import-connected on all systems to the master catalog before the\nI      CFREPAIR parameter can be used.\nN\nD      INFILE(ddname) |\nD      INDATASET(dsname) -\nN\nI        INFILE(ddname): Indicates which DD statement defines the\nI          catalog to be processed.\nN\nI        INDATASET(dsname): Use this to specify the name of the catalog\nI          to be processed.\nN\nD      (LIST | NOLIST) -\nI         Optional subparameters, which control the information returned\nI         by the CFREPAIR parameter.\nN\nI          LIST: Requests a list of data sets for which CFREPAIR\nI            successfully restored the RLS information. If you do not\nI            specify this subparameter, CFREPAIR lists only those data\nI            sets whose RLS information could not be restored.\nN\nI          NOLIST: Only data sets whose information could not be\nI            restored are listed. Using this subparameter is the same as\nI            not specifying LIST or NOLIST.\nD    ) -\nN\nD    CFREPAIRDS(base_cluster_name | partially_qualified_cluster_name) -\nI      Use this command to reconstruct the RLS indicators for all\nI      applicable data sets requested after restoring a catalog.\nN\nI      Note: Be sure to identify all data sets used as RLS data sets.\nI      Otherwise, data may be lost.\nN\nI      base_cluster_name: Specifies the name of the data set to be\nI        processed.\nN\nI      partially_qualified_cluster_name: A list of data sets will be\nI        generated using the partially qualified data set name. A\nI        partially qualified data set name is specified by appending\nI        an asterisk to a partial data set name. CFREPAIRDS lists all\nI        data sets processed, not just those with errors.\nN\nD    CFRESET( /* Abbreviation: CFRES */ -\nI      Use this parameter if you've decided to fall back from using\nI      VSAM RLS. The CFRESET parameter clears VSAM RLS indicators in\nI      the catalog for all applicable data sets. A detailed fallback\nI      procedure is included in the z/OS DFSMSdfp Storage\nI      Administration. See the z/OS DFSMSdfp Storage Administration for\nI      information specific to CICS.\nN\nI      If the catalog is later restored, use CFREPAIR to reconstruct\nI      critical information required by the SMSVSAM server.\nN\nD      INFILE(ddname) | -\nD      INDATASET(dsname) -\nN\nI        INFILE(ddname): Specifies the data definition (DD) name of the\nI          catalog to be processed.\nN\nI        INDATASET(dsname): Specifies the data set name of the catalog\nI          to be processed.\nN\nD      (LIST | NOLIST)\nI        Optional subparameters, which control the information returned\nI        by the CFRESET parameter.\nN\nI        LIST: Requests a list of data sets for which CFRESET\nI          successfully processed the RLS indicators. If you do not\nI          specify this subparameter, CFRESET lists only those data\nI          sets whose indicators were not cleared.\nN\nI        NOLIST: Only data sets that were not successfully processed\nI          are listed. Using this subparameter is the same as not\nI          specifying LIST or NOLIST.\nN\nD    ) -\nN\nD    CFRESETDS(base_cluster_name | partially_qualified_cluster_name) -\nD    /* Abbreviation: CFRDS */ -\nI      Use this parameter if you've decided to fall back from using\nI      VSAM RLS. It clears VSAM RLS indicators in the catalog for all\nI      applicable data sets. CFRESETDS This parameter differs from\nI      CFRESET in that it lets you select one or more data sets for\nI      fallback.\nN\nI      base_cluster_name: Specifies the name of the data set to be\nI        processed.\nN\nI      partially_qualified_cluster_name: A list of data sets will be\nI        generated using the partially qualified data set name. A\nI        partially qualified data set name is specified by appending\nI        an asterisk to a partial data set name. CFRESETDS lists all\nI        data sets processed, not just those with errors.\nN\nI      A detailed fallback procedure is included in the z/OS DFSMSdfp\nI      Storage Administration. Also, for information specific to CICS,\nI      see CICS Recovery and Restart Guide.\nN\nD    CFQUIRSDS(base_cluster_name | partially_qualified_cluster_name) -\nD    /* Abbreviation: CFQDS */ -\nI      Use this parameter to turn off the RLS Quiesced indicator in the\nI      catalog for all applicable data sets.\nN\nI      After a data set is quiesced in RLS, the Quiesced indicator in\nI      the catalog will be set to indicate the data set is in a quiesced\nI      state. RLS access is prevented from the data set until this\nI      indicator is reset. This command provides the capability to\nI      directly turn off this indicator in the catalog without going\nI      through the unquiesce process. Refer to the section on RLS\nI      quiesce and unquiesce functions CICS Recovery and Restart Guide\nI      for more information.\nN\nI      base_cluster_name: Specifies the name of the data set to be\nI        processed.\nN\nI      partially_qualified_cluster_name: A list of data sets will be\nI        generated using the partially qualified data set name. A\nI        partially qualified data set name is specified by appending\nI        an asterisk to a partial data set name. CFRESETDS lists all\nI        data sets processed, not just those with errors.\nN\nI      Note that RACF ALTER access is required for any data sets\nI      accessed by this command. Access to STGADMIN FACILITY CLASS\nI      STGADMIN.IGWSCHDS.REPAIR is not required.\nN\nD    DENYNONRLSUPDATE(base-cluster) /* Abbreviation: DENY */ -\nI      If you inadvertently issue PERMITNONRLSUPDATE, use this parameter\nI      to reset the effect of PERMITNONRLSUPDATE.\nN\nI      If recovery was pending, but you did not run a non-RLS batch job,\nI      you must use this parameter. If not reset, CICS takes action\nI      assuming the data set has been opened for update in non-RLS mode.\nN\nI      Do not use DENYNONRLSUPDATE if you do indeed run non-RLS work\nI      after specifying PERMITNONRLSUPDATE. The permit status is reset\nI      the next time the data set is opened in RLS mode.\nN\nD    FRSETRR(base-cluster) /* Abbreviation: SETRR */ -\nI      This parameter sets the forward-recovery-required indicator.\nI      Until reset with the FRRESETRR parameter, access is prevented\nI      until forward recovery is complete.\nN\nI      If you use a forward recovery utility such as CICSVR that\nI      supports RLS, DFSMStvs, or both, do not use this parameter.\nN\nD    FRUNBIND(base-cluster) /* Abbreviation: UNB */ -\nI      This parameter unbinds the retained locks prior to restoring or\nI      moving the data set. These locks protect uncommitted changes and\nI      are needed for eventual backout. They must be rebound by using\nI      the FRBIND parameter.\nN\nI      If you use a forward recovery utility such as CICSVR that\nI      supports RLS, DFSMStvs, or both, do not use this parameter.\nN\nD    FRBIND(base-cluster) /* Abbreviation: BIND */ -\nI      Use this parameter after BLDINDEX to rebind the associated locks\nI      to the restored data set.\nN\nI      Attention: Between the unbind and the bind, do not delete any\nI      clusters in the sphere or change their names.\nN\nI      If you use a forward recovery utility such as CICSVR that\nI      supports RLS, DFSMStvs, or both, do not use this parameter.\nN\nD    FRRESETRR(base-cluster) /* Abbreviation: RESET */ -\nI      Use this parameter after forward recovery is complete and after\nI      locks have been bound to the new location of the data set using\nI      FRBIND. This allows access to the newly recovered data set by\nI      applications other than the forward recovery application.\nN\nI      If you use a forward recovery utility such as CICSVR that\nI      supports RLS, DFSMStvs, or both, do not use this parameter.\nN\nD    FRDELETEUNBOUNDLOCKS(base-cluster) /* Abbreviation: DUNBL */ -\nI      The FRDELETEUNBOUNDLOCKS parameter lets you delete locks in the\nI      rare case when a successful forward recovery is not possible.\nI      Every attempt should be made to complete forward recovery,\nI      whether using a product such as CICSVR that supports VSAM RLS\nI      or using another forward recovery procedure.\nN\nI      If forward recovery does not successfully complete, locks cannot\nI      be reassociated (bound) to the new version of the data set,\nI      because these locks do not provide the protection that online\nI      backout requires.\nN\nI      Before using this parameter, check the documentation for your\nI      online application. For CICS, the procedure is documented in the\nI      CICS Recovery and Restart Guide.\nN\nD    JOBS -\nI      When this keyword is specified, LISTDS returns a list of the jobs\nI      currently accessing the data set in DFSMStvs mode.\nN\nD    LISTALL /* Abbreviation: LALL */ -\nI      Lists all information related to recovery for subsystems and\nI      VSAM spheres accessed in RLS mode. The output from this parameter\nI      can be quite large.\nN\nD    LISTRECOVERY(base-cluster) /* Abbreviation: LRCVY */ -\nI      lists data sets requiring recovery and the subsystems that share\nI      those data sets. Recovery indicators listed are:\nN\nI      -> Lost locks\nN\nI      -> Retained locks\nN\nI      -> Non-RLS update permitted\nN\nI      -> Forward recovery required\nN\nD    LISTDS(base-cluster) /* Abbreviation: LDS */ -\nI      Lists the following information:\nN\nI      -> The assigned coupling facility cache structure name\nN\nI      -> The subsystem type and status:\nN\nI        -> Active for batch\nN\nI        -> Active or failed for online\nN\nI      -> Whether the VSAM sphere is recoverable or nonrecoverable\nN\nI      -> The state of the data set:\nN\nI        -> Forward recovery required\nN\nI        -> Retained locks\nN\nI        -> Lost locks\nN\nI        -> Locks unbound\nN\nI        -> Non-RLS update permitted\nN\nI        -> Permit-first-time switch\nN\nI        -> Optionally, a list of the jobs accessing the data set using\nI           DFSMStvs.\nN\nD    LISTSHUNTED /* Abbreviation: LSH */ -\nD      SPHERE(base-cluster) |\nD      URID(urid | ALL) -\nI      Lists information about work that was shunted due to an inability\nI      to complete a syncpoint (commit or backout) for a given data set\nI      or unit of recovery, or for all shunted units of recovery when\nI      the ALL keyword is specified. The output includes the following\nI      information:\nN\nI      -> The unit of recovery identifier\nN\nI      -> The data set name\nN\nI      -> The job with which the unit of recovery was associated\nN\nI      -> The step within the job with which the unit of recovery was\nI         associated\nN\nI      -> Whether the unit of recovery will be committed or backed out\nI         if it is retried\nN\nI      Shunting is caused by errors such as the following:\nN\nI      -> C-FAILED: A commit failed.\nN\nI      -> B-FAILED: A backout failed.\nN\nI      -> IO-ERROR: An I/O error occurred on the data set.\nN\nI      -> DS-FULL: The data set was full; no space on DASD to add\nI         records.\nN\nI      -> IX-FULL: A larger alternate index is required.\nN\nI      -> LOCK: A failure occurred during an attempt to obtain a lock\nI         during backout.\nN\nI      -> LOG: A log stream became or was made unavailable.\nN\nI      -> CACHE: A cache structure or connection to it failed.\nN\nI         This parameter requires that you have UPDATE authority to the\nI         data set specified.\nN\nI      SPHERE: List a data set.\nN\nI        base-cluster: The data set name.\nN\nI      URID: List a unit of recovery.\nN\nI        urid: The unit of recovery identifier\nN\nI        ALL: List all units of recovery.\nN\nD    LISTSUBSYS(subsystem | ALL) /* Abbreviation: LSS */ -\nI      Lists information about a specific subsystem or all subsystems\nI      known to the SMSVSAM server:\nN\nI      -> Subsystem status\nN\nI         -> Active for batch\nN\nI         -> Active or failed for online\nN\nI      -> A summary showing whether the subsystem's shared data sets\nI         have:\nN\nI         -> Lost locks\nN\nI         -> Retained locks\nN\nI         -> Non-RLS update permitted\nN\nI      For an active subsystem, LISTSUBSYS gives the number of held\nI      locks, waiting lock requests, and retained locks. For a failed\nI      subsystem, LISTSUBSYS shows the number of retained locks.\nN\nD    LISTSUBSYSDS(subsystem | ALL) /* Abbreviation: LSSDSL */ -\nI      Lists information about a specific subsystem or all subsystems\nI      known to the SMSVSAM server, including data sets that it is\nI      sharing. For each subsystem, this parameter lists the following\nI      information:\nN\nI      -> Sharing protocol (online or batch)\nN\nI      -> The status (active or failed)\nN\nI      -> Recovery information for each shared data set:\nN\nI         -> Whether it has retained locks owned by this subsystem\nN\nI         -> Whether it has lost locks owned by this subsystem\nN\nI         -> Whether there are locks not bound to the data set\nN\nI         -> If forward recovery is required\nN\nI         -> If non-RLS update is permitted\nN\nI         -> The permit-first-time switch setting\nN\nD    OUTFILE(ddname) /* Abbreviation: OUTDD */ -\nI      Specifies a data set, other than the SYSPRINT data set, to\nI      receive the output produced by the SCHDS command.\nN\nI      ddname: identifies the DD statement of the alternate target data\nI        set.\nN\nD    PERMITNONRLSUPDATE(base-cluster) /* Abbreviation: PERMT */ -\nI      Allows a data set with pending RLS recovery to be opened for\nI      output in non-RLS mode. This command is used when it is necessary\nI      to run critical batch updates and RLS recovery cannot first be\nI      completed. This is reset the next time the data set is accessed\nI      for RLS. If after using PERMITNONRLSUPDATE, you do not run a\nI      non-RLS batch job, you must use DENYNONRLSUPDATE to prevent\nI      non-RLS updates.\nN\nD    PURGE -\nD      SPHERE(base-cluster) | -\nD      URID(urid) -\nI      Discards the log entries and releases the associated locks. Use\nI      this command when the data set is damaged and cannot be restored\nI      to a state where it is consistent with the log entries. For\nI      example, it might have been necessary to restore the data set\nI      from a backup copy that predates the updates that were made to\nI      the data set prior to the failure.\nN\nI      Recommendation: If any data sets are in a lost locks status, do\nI      not issue this command while a DFSMStvs restart is in progress.\nI      If any lost locks recovery was not completed for a data set that\nI      is being processed by this command, the command does not complete\nI      until the DFSMStvs restart completes.\nN\nI      This parameter requires that you have update authority for the\nI      specified data set.\nN\nD    REMOVESUBSYS(subsystem) /* Abbreviation: RSS */ -\nI      Use this parameter to remove any knowledge of recovery owed to\nI      SMSVSAM by the named subsystem, including locks protecting\nI      uncommitted updates.\nN\nI      Normally, a failed online application would be restarted so that\nI      it can do the required backouts and release locks protecting\nI      uncommitted updates. However, sometimes it might be necessary to\nI      cold start the online application. For more information about\nI      cold starts, see CICS Recovery and Restart Guide.\nN\nI      Use of this parameter is equivalent to cold starting the named\nI      subsystem with respect to the SMSVSAM server. Use REMOVESUBSYS\nI      for the rare cases where either there is no intention of ever\nI      running the subsystem again or the application's cold start\nI      procedures cannot be used. An example of an appropriate use of\nI      REMOVESUBSYS would be removing a test system that is no longer\nI      needed.\nN\nI      If the removed subsystem is ever run again, every effort should\nI      be made to cold start the subsystem.\nN\nI      Attention: Use of REMOVESUBSYS can result in loss of data\nI      integrity.\nN\nD    RETRY -\nD      SPHERE(base-cluster) |\nD      URID(urid)\nI      Retries the syncpoint. Use this command when the data set can be\nI      restored to a state where it is consistent with the log entries.\nI      By consistent, we mean that the data set reflects the state that\nI      existed before the time of the particular unit of recovery for\nI      which DFSMStvs was unable to complete processing. This is\nI      possible for data sets that are forward recoverable or for\nI      failures that do not damage the data set (such as a dropped\nI      path). When the command completes successfully, locks associated\nI      with the log entries are released.\nN\nI      Recommendation: If any data sets are in a lost locks status, do\nI      not issue this command while a DFSMStvs restart is in progress.\nI      If any lost locks recovery was not completed for a data set that\nI      is being processed by this command, the command does not complete\nI      until the DFSMStvs restart completes.\nN\nI      This parameter requires that you have update authority for the\nI      specified data set.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3211": {"ttr": 14342, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3211\nKSCHDS\nTDFSMS AMS\nT-Chapter 32.\nT-Example 1: Using PERMITNONRLSUPDATE With a Generic Data Set Name\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102818\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 32. SCHDS\nN-----------------\nNExample 1: Using PERMITNONRLSUPDATE With a Generic Data Set Name\nN----------------------------------------------------------------\nD//SCHDS1   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  SCHDS  -\nD    PERMITNONRLSUPDATE(SYSPLEX.PERMIT.*)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe SCHDS parameters are:\nN-------------------------\nN-> PERMITNONRLSUPDATE: Allows a data set with pending RLS recovery to\nN   be opened for output in non-RLS mode.\nN\nN   -> SYSPLEX.PERMIT.*: names the three level data sets.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3212": {"ttr": 14344, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3212\nKSCHDS\nTDFSMS AMS\nT-Chapter 32.\nT-Example 2: Listing Data Sets With the High-Level Qualifier SYSPLEX\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102828\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 32. SCHDS\nN-----------------\nNExample 2: Listing Data Sets With the High-Level Qualifier SYSPLEX\nN------------------------------------------------------------------\nD//SCHDS2   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  SCHDS  -\nD    LISTDS(SYSPLEX.*)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe SCHDS parameters are:\nN-------------------------\nN-> LISTDS: List the information for the data sets.\nN\nN   -> SYSPLEX.*: names the two level data sets.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3213": {"ttr": 14346, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3213\nKSCHDS\nTDFSMS AMS\nT-Chapter 32.\nT-Example 3: Listing data sets with JOBS\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102838\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 32. SCHDS\nN-----------------\nNExample 3: Listing data sets with JOBS\nN--------------------------------------\nD//SCHDS3   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  SCHDS  -\nD    JOBS -\nD    LISTDS(SYSPLEX.*)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe SCHDS parameters are:\nN-------------------------\nN-> JOBS: returns a list of the jobs currently accessing the data set\nN   in DFSMStvs mode.\nN\nN-> LISTDS: List the information for the data sets.\nN\nN   -> SYSPLEX.*: names the two level data sets.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3214": {"ttr": 14593, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3214\nKSCHDS\nTDFSMS AMS\nT-Chapter 32.\nT-Example 4: Listing shunted entries\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102847\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 32. SCHDS\nN-----------------\nNExample 4: Listing shunted entries\nN----------------------------------\nD//SCHDS4   JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  SCHDS  -\nD    LISTSHUNTED -\nD      SPHERE(SYSPLEX.KSDS.CLUSTER.NAME)\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe SCHDS parameters are:\nN-------------------------\nN-> LISTSHUNTED: Lists information about work that was shunted due to\nN   an inability to complete a syncpoint (commit or backout) for a\nN   given data set or unit of recovery, or for all shunted units of\nN   recovery when the ALL keyword is specified.\nN\nN-> SPHERE: A data set name will be provided.\nN\nN   -> SYSPLEX.KSDS.CLUSTER.NAME: names the data set.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC33": {"ttr": 14595, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC33\nTDFSMS AMS\nT-Chapter 33. VERIFY\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-150054\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 33. VERIFY\nN------------------\nNThe VERIFY command causes a catalog to correctly reflect the end of a\nNVSAM data set after an error occurs while closing a VSAM data set. The\nNerror might have caused the catalog to be incorrect. When you add the\nNRECOVER parameter, the VERIFY command also completes the interrupted\nNVSAM processing.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3301": {"ttr": 14597, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3301\nTDFSMS AMS\nT-Chapter 33.\nT-Syntax for VERIFY Parameters\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-159004\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 33. VERIFY\nN------------------\nNSyntax for VERIFY Parameters\nN----------------------------\nD  VERIFY /* Abbreviation: VFY */ -\nN\nNRequired Parameters\nN-------------------\nD    FILE(ddname) | -\nD    DATASET(entryname) /* Abbreviation: DS */ -\nI      specifies the cluster to be verified.\nN\nI      FILE: points to a DD statement that specifies the data set.\nN\nI        ddname: names a DD statement identifying the cluster or\nI          alternate index being verified. For further information, see\nI          \"Using VERIFY to Fix Improperly Closed Data Sets\" in\nI          z/OS DFSMS Using Data Sets. The data set is deallocated at\nI          the VERIFY job step termination.\nN\nI      DATASET /* Abbreviation: DS */: names the data set that will by\nI        dynamically allocated.\nN\nI        entryname: specifies the name of the object being verified. If\nI          DATASET is specified, the object is dynamically allocated.\nI          The data set is deallocated dynamically at job termination.\nN\nI      You can use the VERIFY command following a system error that\nI      caused a component opened for update processing to be improperly\nI      closed. You can also use it to verify an entry-sequenced data set\nI      defined with RECOVERY that was open in create mode when the\nI      system error occurred. However, the entry-sequenced data set\nI      must contain records (not be empty) to successfully verify.\nN\nNOptional Parameters\nN-------------------\nD    RECOVER\nI      Completes previously interrupted VSAM processing. The data set\nI      cannot be opened on any system; otherwise, the command will fail\nI      with an OPEN error.\nN\nI      Recommendation: When sharing data sets between different\nI      processors, IBM recommends that you run VERIFY as the first step\nI      of a job stream to prevent job termination caused by an open\nI      access method control block (ACB) error code if the other\nI      processor already has the data set open. IBM also recommends that\nI      you specify the RECOVER parameter after a key-sequenced data set\nI      has been closed improperly.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AMSC3311": {"ttr": 14599, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3311\nTDFSMS AMS\nT-Chapter 33.\nT-Example 1: Upgrade a Data Set's End-of-File Information\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102915\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 33. VERIFY\nN------------------\nNExample 1: Upgrade a Data Set's End-of-File Information\nN-------------------------------------------------------\nD//VERIFY1  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  LISTCAT -\nD    ENTRIES(MY.KSDS1) -\nD    ALL\nD  VERIFY -\nD    DATASET(MY.KSDS1)\nD  LISTCAT -\nD    ENTRIES(MY.KSDS1) -\nD    ALL\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe first LISTCAT parameters are:\nN---------------------------------\nN-> ENTRIES: Names the cluster to be listed.\nN\nN-> ALL: Requests all information about the cluster be shown.\nN\nNThe VERIFY parameters are:\nN--------------------------\nN-> DATASET: Names the cluster whose real EOD and EOKR values are to\nN   be updated.\nN\nNThe second LISTCAT parameters are:\nN----------------------------------\nN-> ENTRIES: Names the cluster to be listed.\nN\nN-> ALL: Requests all information about the cluster be shown.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC3312": {"ttr": 14601, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC3312\nTDFSMS AMS\nT-Chapter 33.\nT-Example 2: Complete Interrupted VSAM Processing\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180513-102928\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNChapter 33. VERIFY\nN------------------\nNExample 2: Complete Interrupted VSAM Processing\nN-----------------------------------------------\nD//VERIFY2  JOB ...\nD//STEP1   EXEC PGM=IDCAMS\nD//SYSIN     DD *\nD  EXAMINE -\nD    NAME(MY.KSDS1) -\nD    DATATEST -\nD    INDEXTEST\nD  IF LASTCC > 4 THEN DO\nD    VERIFY -\nD      DATASET(MY.KSDS1) -\nD      RECOVER\nD    EXAMINE -\nD      NAME(MY.KSDS1) -\nD      DATATEST -\nD      INDEXTEST\nD  END\nD  IF LASTCC > 4 THEN DO\nD    SET MAXCC = 12\nD    CANCEL\nD  END\nD/*\nD//SYSPRINT  DD SYSOUT=*\nN\nNThe first EXAMINE parameters are:\nN---------------------------------\nN-> NAME: Names the cluster to be examined.\nN\nN-> DATATEST: Test the data component.\nN\nN-> INDEXTEST: Test the index component.\nN\nNThe first IF modal command:\nN---------------------------\nN-> LASTCC > 4: Issuing the EXAMINE command for a data set that was\nN   closed improperly, as a result of a CANCEL, ABEND or system error,\nN   can result in a condition code of 8 because of an interrupted VSAM\nN   process.\nN\nNThe VERIFY parameters are:\nN--------------------------\nN-> DATASET: Names the cluster whose real EOD and EOKR values are to\nN   be updated.\nN\nN-> RECOVER: Completes previously interrupted VSAM processing.\nN\nNThe second EXAMINE parameters are:\nN----------------------------------\nN-> NAME: Names the cluster to be examined.\nN\nN-> DATATEST: Test the data component.\nN\nN-> INDEXTEST: Test the index component.\nN\nNThe second IF modal command:\nN----------------------------\nN-> LASTCC > 4: Issuing the EXAMINE command for a data set that was\nN   closed improperly, as a result of a CANCEL, ABEND or system error,\nN   can result in a condition code of 8 because of an interrupted VSAM\nN   process.\nN\nNThe SET parameters are:\nN-----------------------\nN-> MAXCC = 12: Raise the return code to indicate a severe error.\nN\nNThe CANCEL modal command:\nN-------------------------\nNEnds processing of the current job step.\nN\nMThe step has nothing more to do, thus is is superfluous.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC9A": {"ttr": 14603, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC9A\nTDFSMS AMS\nT-Appendix A. Security Authorization\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-159054\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNAppendix A. Security Authorization\nN----------------------------------\nNThis appendix contains tables that show the required Resource Access\nNControl Facility (RACF) authorization levels for access method services\nNcommands. These tables include information for both non-SMS and\nNSMS-managed data sets.\nN\nNIf no RACF profile exists for a data set, you are authorized to access\nNthat data set without further RACF checking. The catalog RACF profile\nNis not checked, even if it exists.\nN\nNThe following tables are contained in this appendix:\nNTable    Contents\nN-------- -------------------------------------------------------\nNTable 6  Required Security Authorization for Catalogs\nNTable 7  Required Security Authorization for VSAM Data Sets\nNTable 8  Required Security Authorization for Non-VSAM Data Sets\nNTable 9  Required Security Authorization for LISTCAT\nNTable 10 Required Security Authorization for Data Set Operations\nNTable 11 Required Security Authorization for VOLCAT Operations\nNTable 12 RACF FACILITY Class Authorization for IDCAMS Commands\nNTable 13 Required Authorization for SHCDS Parameters\nN\nMThe tables are too wide to easily reproduce here.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AMSC9F": {"ttr": 14605, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "SAMSC9F\nTDFSMS AMS\nT-Appendix F. Interpreting DCOLLECT\nEKenneth Tomiak <KenTomiak@KTomiak.org>\nZ20180512-159054\n*\n@IBM Corporation\n*\nBdgt2i2a1.pdf: SC26-7394-13: z/OS\nBDFSMS Access Method Services for Catalogs\nBVersion 1 Release 13\n*\nNAccess Method Services for Catalogs\nN-----------------------------------\nNAppendix F. Interpreting DCOLLECT\nN---------------------------------\nNThis appendix contains General-use Programming Interface and Associated\nNGuidance Information.\nN\nNThis appendix is intended to help you to interpret DCOLLECT output.\nNDCOLLECT provides you with data set information, volume usage\nNinformation, and information about data sets and storage controlled by\nNDFSMShsm. Running DCOLLECT produces a snapshot of the requested\nNinformation as it exists at that time. DCOLLECT does not monitor the\nNinformation continuously. This information can then be used for\nNaccounting, planning, statistical, and other purposes.\nN\nNThe following output record types are included in this appendix:\nN\nNType Name\nN---- ---------------------------------------------------\nN D   Active Data Set Record\nN A   VSAM Association Information\nN V   Volume Information\nN M   Migrated Data Set Information\nN B   Backup Data Set Information\nN C   DASD Capacity Planning Information\nN T   Tape Capacity Planning Information\nNDC   Data Class construct information\nNSC   Storage Class construct information\nNMC   Management Class construct Information\nNBC   Base Configuration Information\nNSG   Storage Group construct Information\nNVL   Storage Group volume Information\nNAG   Aggregate Group Information\nNDR   OAM Drive Record Information\nNLB   OAM Library Record Information\nNCN   Cache Names from the Base Configuration Information\nNAI   Accounting Information from the ACS routines\nN\nNNote: The fields described here are available in a macro form that can\nN be included in an application program. Record formats for the D, A,\nNand V records are mapped by IDCDOUT available in SYS1.MACLIB. Record\nNformats for the M, B, C, and T records are available in ARCUTILP, also\nNavailable in SYS1.MACLIB.\nN\nMBe aware: record layouts can change over time.\n* End of WISH.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT978/CBT.V500.FILE978.PDS/XMAMSC.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT978/CBT.V500.FILE978.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}