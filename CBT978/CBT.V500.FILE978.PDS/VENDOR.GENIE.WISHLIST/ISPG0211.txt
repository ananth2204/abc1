SISPG0211
TISPF Services Guide
T-Chapter 2.
T-EDREC-Specify edit recovery handling
E"Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20180517-141555
*
@IBM Corporation
*
Bf54sg00_v2r3.pdf: SC19-3626-30: ISPF
B-Services Guide
B-z/OS Version 2 Release 3
*
NInteractive System Productivity Facility (ISPF) Services Guide
N==============================================================
NChapter 2. Description of the ISPF services
N-------------------------------------------
NEDREC-Specify edit recovery handling
N------------------------------------
NThe EDREC service initializes an edit recovery table, determines
Nwhether recovery is pending, and takes the action specified by the
Nfirst argument.
N
NNote: Dialogs that invoke the EDIT service should invoke the EDREC
Nservice first to start edit recovery, because the EDIT service does not
Nperform edit recovery.
N
NWhen you invoke the EDREC service, EDREC displays a special panel.
NUsing this panel you can recover data, cancel recovery, defer recovery
Nuntil a later time, or enter the END command to return to the next
Nsequential command in your command invocation or to return to the next
Nsequential instruction in your program.
N
NThe EDREC service attempts to use the panel that you specified in the
NEDIT service from which it is recovering. Make sure that this panel is
Navailable to the EDREC service. It must be in a library allocated to
NISPPLIB or available through a LIBDEF.
N
NNote: You can use the ZEDUSER variable to save LIBDEF information or
Nthe panel name when you invoke EDIT. This is different from edit
Nrecovery entered from option 2, because option 2 always uses its
Ndefault panel.
N
NCommand invocation format
N-------------------------
D  ADDRESS ISPEXEC "EDREC" ,
I    "INIT" | "QUERY" | "PROCESS" | "CANCEL" | "DEFER"
D    "INIT" ,
I      Initializes an edit recovery table in your profile library if
I      one does not already exist for the current application. The edit
I      recovery table is saved in the data set allocated to ddname
I      ISPPROF in member xxxxEDRT, where xxxx is the ISPF application
I      ID.
N
D      "CMD(command-name)"
I        A CLIST or REXX exec that starts the table. If you omit this
I        parameter, the INIT option invokes an ISPF-supplied CLIST named
I        ISREDRTI. ISREDRTI creates an eight-row edit recovery table,
I        permitting eight levels of concurrent Edit sessions with
I        recovery active. The Edit sessions can result from recursion
I        or split-screen usage.
N
I        If you specify a command with the INIT option, the command
I        should be patterned after ISREDRTI. It can create a different
I        number of rows or use a different naming convention for the
I        backup data sets, or specify "keep" instead of "delete" as the
I        backup data set disposition. The format of the edit recovery
I        table must be the same as that specified in ISREDRTI.
N
D    "QUERY"
I      Causes EDREC to search the edit recovery table for a pending
I      recovery. When the QUERY option is specified, EDREC scans the
I      edit recovery table for an entry containing a recovery pending
I      condition. If the return code is 4, indicating an entry was
I      found, the dialog must call EDREC with the PROCESS, CANCEL, or
I      DEFER option.
N
I      EDREC QUERY is usually used in a loop, since there can be more
I      than one pending recovery. Multiple recoveries can result from
I      recursion or from split-screen usage of the dialog. Each
I      subsequent call to EDREC with the QUERY option scans the table
I      starting at the entry after the last one that was found. A
I      typical loop, written in pseudo-code (showing the parameters
I      themselves instead of sample values), is shown as Example 0.
N
I      As Example 0 shows, EDREC QUERY must be used before each
I      invocation of any of these EDREC functions: PROCESS, CANCEL, or
I      DEFER. The variables shown are stored in the dialog function pool
I      when EDREC is called with the QUERY option and the return code
I      is 4, indicating that recovery is pending.
N
I      ZEDBDSN: Backup data set name.
N
I      ZEDMODE: Indicates whether this is an edit session or a view
I        session that is to be recovered.
N
I      ZEDROW: Row number of entry in edit recovery table.
N
I      ZEDTDSN: Target data set name.
N
I      ZEDTMEM: Target member name, if applicable.
N
I      ZEDTVOL: Volume serial of target data set, if a volume serial was
I        specified on invocation of the EDIT service.
N
I      ZEDUSER: is an extension variable in the Edit Recovery Table that
I        is provided to contain user data. Whatever data is in dialog
I        variable ZEDUSER in the shared pool is saved to the ZEDUSER
I        variable in the edit recovery table when the recovery data set
I        is initialized. This is done if RECOVERY is ON when entering
I        Edit or after using the SAVE command.
N
I      The dialog can check the preceding variables and use them to
I      display information to the user. If EDREC QUERY shows that
I      recovery is not pending, the previous variables are not
I      meaningful.
N
I      When EDREC is called with the QUERY option and the return code
I      is 4, indicating that recovery is pending, or if ISPF option 2
I      edit recovery takes place, the data is read out of ZEDUSER in
I      the table and returned to ZEDUSER in the shared and function
I      pools. If recovery is not pending, this variable is not
I      meaningful. The extension variable ZEDMODE indicates whether this
I      is an edit session or a view session that is to be recovered.
N
D    "PROCESS" ,
I      Causes edit recovery to proceed.
N
I      "PASSWORD(pswd-value)" ,
I        /* Obsolete if you have CA-ACF2, RACF, CA-Top-Secret. */ ,
I        The password if the data set has MVS password protection. Do
I        not specify a password for data sets that are protected by
I        Resource Access Control Facility (RACF), CA-ACF2, OR
I        CA-Top-Secret.
N
I        This parameter is valid only with the PROCESS option.
N
D      "DATAID(data-id)"
I        The data ID of the data set that will contain the recovered
I        data. The recovered data should be saved in a data set other
I        than the data set that was being edited when the system failure
I        occurred. If you omit this parameter, EDREC attempts to save
I        the recovered data in the original data set.
N
I        Before using the data ID parameter, the dialog must first
I        invoke the LMINIT service to specify the target data set and
I        then pass the data ID to the EDREC service. This procedure can
I        also control the allocation of the target data set for
I        recovery, even if it is not the original data set being edited.
I        You must use this procedure if you originally specified the
I        data set being edited to the EDIT service using the ddname
I        interface.
N
D    "CANCEL"
I      Cancels edit recovery. The backup data set is erased and the
I      corresponding entry in the edit recovery table is freed.
N
D    "DEFER"
I      Defers edit recovery. Recovery is canceled, but the backup data
I      set is saved so that recovery can be processed in another Edit
I      session.
N
I      Attention: Use this parameter carefully. It can cause your
I      original data set to be written over in the next Edit session.
N
NReturn codes
N------------
NThese return codes are possible:
N
D  edrec_rc = RC
D  SELECT
D    WHEN (edrec_rc = 0) THEN DO
D      /* Normal return.
D
D         -> INIT: Edit recovery table was successfully created.
D         -> QUERY: Recovery is not pending.
D         -> PROCESS: Recovery was completed and the data was saved. */
D      NOP
D    END
D    WHEN (edrec_rc = 4) THEN DO
D      /* Normal return.
D
D         -> INIT: Edit recovery table already exists for current
D            application.
D         -> QUERY: Entry found in edit recovery table; recovery is
D            pending.
D         -> PROCESS: Recovery was completed, but user did not save
D            data. */
D      SAY "Ask your programmer to handle this condition using SETMSG."
D      SAY ZERRSM
D      SAY ZERRLM
D    END
D    WHEN (edrec_rc = 20) THEN DO
D      /* Severe error; unable to continue. */
D      SAY "Ask your programmer to fix error."
D      SAY ZERRSM
D      SAY ZERRLM
D    END
D    OTHERWISE DO
D      SAY "Something very unexpected happened, RC("edrec_rc")."
D    END
D  END
N
NExample 0: EDREC QUERY is usually used in a loop.
N-------------------------------------------------
I  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
I  done = 0
I  DO WHILE done = 0
I    ADDRESS ISPEXEC "EDREC QUERY"
I    IF (RC = 4) THEN DO
I      ADDRESS ISPEXEC "EDREC DEFER"
I    END
I    ELSE DO
I      done = 1
I    END
I  END
N
NExample 1: Invokes the EDREC service for INIT to create an
Nedit recovery table.
N----------------------------------------------------------
I  ADDRESS ISPEXEC "EDREC INIT"
N
NExample 2: Invokes the LMINIT service for the EDIT service.
N-----------------------------------------------------------
I/* REXX exec to use edit recovery prior to edit */
I
I  ADDRESS ISPEXEC "LMINIT DATAID(DATA1) DATASET(DEMO.REXX)"
I  IF (RC = 0) THEN DO
I    ADDRESS ISPEXEC "EDREC INIT" /* CREATE RECOVERY TABLE */
I    edrc = 0
I    edcon = 1
I    DO UNTIL ((edrc <> 4) | (edcon = 0))
I      ADDRESS ISPEXEC "EDREC QUERY" /* CHECK FOR RECOVERY DS */
I      edrc = RC
I      IF (edrc = 4) THEN DO
I        Z1 = ZEDTDSN /* SET UP PANEL VARIABLE */
I                     /* AND SHOW RECOVERY PANEL */
I        ADDRESS ISPEXEC "DISPLAY PANEL(ISREDM02) CURSOR(ZCMD)"
I        IF ((RC = 0) & (SUBSTR(ZEDCMD,1,1) = " ")) THEN DO
I          ADDRESS ISPEXEC "EDREC PROCESS" /* PROCESS RECOVERY */
I          edcon = 0 /* AND END LOOP */
I        END
I        ELSE DO
I          IF ((RC = 0) & (SUBSTR(ZEDCMD,1,1) = "C")) THEN DO
I            ADDRESS ISPEXEC "EDREC CANCEL"
I          END
I        END
I      END
I      ELSE DO
I        ADDRESS ISPEXEC "EDREC DEFER"
I      END
I    END
I    ADDRESS ISPEXEC "EDIT DATAID(&DATA1) MEMBER(ISPG0211)"
I    ADDRESS ISPEXEC "LMFREE DATAID(&DATA1)"
I  END
* End of WISH.
