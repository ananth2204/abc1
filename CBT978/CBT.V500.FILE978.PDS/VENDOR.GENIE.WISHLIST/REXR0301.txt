SREXR0301
Tz/OS TSO/E REXX Reference
T-Chapter 3.
T-Instructions
T-ADDRESS
E"Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20180517-175729
*
@IBM Corporation
*
Bikj4a3a0.pdf
BSA22-7790-10 z/OS TSO/E REXX Reference
BVersion 1 Release 13
*
Nz/OS TSO/E REXX Reference
N=========================
NChapter 3. Keyword instructions
N-------------------------------
NInstructions
N------------
NADDRESS
N-------
NTemporarily or permanently changes the destination of commands.
NCommands are strings sent to an external environment. You can send
Ncommands by specifying clauses consisting of only an expression or by
Nusing the ADDRESS instruction.
N
NSyntax:
D ADDRESS environment expression
N   environment: TSO | CONSOLE | ISPEXEC | ISREDIT | CPICOMM | LU62 |
N                APPCMVS | MVS | LINK | LINKMVS | LINKPGM | ATTACH |
N                ATTACHMVS | ATTACHPGM
N
N   expression: The command sent to the environment.
N
N
MYou can use the MDMD block line command to convert the INFOLINEs to
Mregular DATALINEs.
NExample: Retrieve current environment
N-------------------------------------
I  current_environment = ADDRESS()
I  If ( current_environment = "TSO" ) Then Do
I    FREE FILE(TEMPDD)
I  End
I  Else Do
I    ADDRESS TSO "FREE FILE(TEMPDD)"
I  End
N
NExample: Toggle between environments
N------------------------------------
NSet a different environment and afterwards just use ADDRESS.
I  orig_environment = Address()
I  Address MVS
I  Address TSO
I  Address         /* Goes back to MVS */
I  Address         /* Goes back to TSO */
N
NExample: TSO default
N--------------------
NFree a not-in-use DDName.
I  FREE FILE(TEMPDD)
N
NExample: TSO explicit
N---------------------
NFree a not-in-use DDName.
I  ADDRESS TSO "FREE FILE(TEMPDD)"
N
NExample: CONSOLE
N----------------
NActivate a console, issue a DEVSERV command, loop thru the system
Nreply, and deactivate the console.
I  myid = sysvar("SYSUID") || 2
I  ADDRESS TSO "CONSOLE ACTIVATE NAME("myid")"
I  lastrc = rc
I  If ( lastrc <> 0 ) Then Do
I    Say "Console" myid "might already be in use."
I    Exit 16
I  End
I  devserv_cmd="DS QD,TYPE=ALL,DEFINED"
I  wait_time = 60
I  ADDRESS TSO "CONSPROF SOLDISPLAY(NO) SOLNUM(1000)"
I  cart="DS" || time('M')
I  ADDRESS TSO "CONSOLE SYSCMD("devserv_cmd") CART('"cart"')"
I  getrc = GetMsg("system_reply.","SOL",cart,,wait_time)
I  If ( getrc <> 0 ) Then Do
I    ADDRESS TSO "CONSOLE DEACTIVATE"
I    Exit 12
I  End
I  Say "devserv lines("system_reply.0")"
I  Do srx = 1 to system_reply.0
I    Say Left(system_reply.srx,79)
I  End
I  ADDRESS TSO "CONSOLE DEACTIVATE"
I  Return 0
M
MSA23-1390-00z/OS MVS Planning: Operations
M  RDEFINE TSOAUTH CONSOLE UACC(NONE)
M  PERMIT CONSOLE CLASS(TSOAUTH) ID(racfgrp) ACCESS(READ)
M  SETROPTS RACLIST(TSOAUTH)
M
M  RDEFINE OPERCMDS MVS.** UACC(NONE)
M  PERMIT MVS.MCSOPER.TAPE1 CLASS(OPERCMDS) ID(racfgrp) ACCESS(READ)
M  SETR RACLIST(OPERCMDS) REFRESH
N
N
NExample: ISPEXEC
N----------------
NFind our USERID and then VIEW an existing PARMLIB member.
I  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
I  ADDRESS ISPEXEC "VGET (ZUSER)"
I  ADDRESS ISPEXEC "VIEW DATASET('SYS1.PARMLIB($$$COIBM)'"
N
N
NExample: ISREDIT
N----------------
NAn edit macro to sort in hexadecimal sequence.
I/* We first need rexx in comment if compiled or read from SYSPROC. */
Irexx_sortbyhx:
I  ADDRESS IsrEdit "MACRO (args)"
I  arg.0 =  Words(args)
I  Do wx = 1 to arg.0
I    arg.wx = Word(args,wx)
I  End
I  If ( DataType(arg.1) <> "NUM" ) Then begin_col = 1
I  Else begin_col = arg.1
I  If ( DataType(arg.2) <> "NUM" ) Then span = 4
I  Else span = arg.2
I  ADDRESS ISREDIT "(mydsn) = DATASET"
I  TSO_RC = LISTDSI("'"mydsn"'")
I  If ( TSO_RC > 4 ) Then Do
I    Say "LISTDSI of" mydsn "failed, rc="tso_rc
I    Exit tso_rc
I  End
I  ADDRESS ISREDIT "(mymbr) = MEMBER"
I  ADDRESS ISREDIT "(lastln) = LINENUM .ZLAST"
I  If ( lastln > 1 ) Then Do
I    Call mysort
I  End
I  Exit 1
I
Imysort:
I  outtrap_orig = OUTTRAP("ON")
I  ADDRESS TSO "FREE FI(SORTIN,SORTOUT,SORTMSG,SYSIN)"
I  ADDRESS TSO "FREE DDNAME(SYSIN,SORTIN,SORTOUT,SORTWK01)"
I  If ( DataType(sysused) <> "NUM") Then Do
I    sysused = sysalloc
I  End
I  ADDRESS TSO "ALLOC FILE(SORTWK01)" ,
I    "UNIT(SYSALLDA) SPACE("sysused",10) cylinders"
I  outtrap_now = OUTTRAP(outtrap_orig)
I  recfml = length(sysrecfm)
I  myrecfm = ""
I  Do rx = 1 to recfml
I    one = substr(sysrecfm,rx,1)
I    myrecfm = myrecfm||one" "
I  End
I  If ( Left(myrecfm,1) = "V" ) Then Do
I    begin_col = begin_col + 4
I  End
I  If ( sysunits = "BLOCK" ) Then Do
I    sysunits = "TRACK"
I  End
I  ADDRESS TSO "ALLOC FI(SORTIN) NEW REUSE" ,
I    "UNIT(SYSALLDA) SPACE("sysused")" sysunits"S" ,
I    "RECFM("myrecfm") BLKSIZE(0) LRECL("syslrecl")"
I
I  ADDRESS MVS "AddStack"
I
I  cx = 1
I  Do While ( cx <= lastln )
I    "ISREDIT (sortin) = LINE" cx
I     line_rc = RC
I     cx = cx + 1
I     If ( line_rc = 0 ) Then Queue sortin
I  End
I  Queue ""
I
I  ADDRESS MVS "ExecIO * DiskW sortin (FINIS"
I
I  ADDRESS MVS "DelStack"
I  ADDRESS MVS "AddStack"
I
I  ADDRESS TSO "ALLOC DD(sysin) NEW REUSE" ,
I    "UNIT(SYSALLDA) TRACKS SPACE(1)" ,
I    "RECFM(F B) BLKSIZE(0) LRECL(80)"
I
I  Queue ' SORT FIELDS=('begin_col','span||,
I    ',AC,A),DYNALLOC=(SWORK,3)'
I  Queue " END "
I  Queue ""
I  ADDRESS MVS "ExecIO * DiskW sysin (FINIS"
I
I  ADDRESS MVS "DelStack"
I
I  "ALLOC FI(SORTOUT) NEW REUSE" ,
I    "UNIT(SYSALLDA) SPACE("sysused")" sysunits"S" ,
I    "RECFM("myrecfm") BLKSIZE(0) LRECL("syslrecl")"
I  "ALLOC FI(SORTMSG) sysout(1)"
I  outtrap_orig = Outtrap("alcmsgs.")
I  "ALLOC FI(SYSOUT) sysout(1)"
I  outtrap_now = Outtrap(outtrap_orig)
I
I  "CALL *(SORT)"
I  sort_rc = rc
I  If ( sort_rc <> 0 ) Then Do
I    say "SORT failed with RC("sort_rc")."
I    ADDRESS TSO "FREE DDNAME(SYSIN,SORTIN,SORTOUT,SORTWK01,SYSOUT)"
I    Return sort_rc
I  End
I
I  ADDRESS ISREDIT "DELETE 1 .ZLAST"   /* CLEAN THE EDIT SLATE */
I  ADDRESS MVS "ExecIO * DiskR SORTOUT (Stem srt. FINIS"
I
I   cx = 1
I   Do While cx <> srt.0 + 1
I     SORTOUT = srt.cx
I     Lcx = RIGHT(cx-1,6,0)
I     ADDRESS ISREDIT "LINE_AFTER "Lcx" = (SORTOUT)"
I     cx = cx + 1
I   End
I
I  ADDRESS TSO "FREE DDNAME(SYSIN,SORTIN,SORTOUT,SORTWK01,SYSOUT)"
I  Return
N
N
NExample: CPICOMM LU62 APPCMVS
N-----------------------------
ISee SA32-0982-00, the z/OS TSO/E REXX User's Guide under "Examples
IUsing APPC/MVS Services".
I
IView 'SYS1.SAMPLIB' and SRCHFOR the environment.
MNote: NO rexx example exists for APPCMVS.
N
NExample: CPICOMM
N----------------
NThe following example illustrates the syntax for invoking an
NSAA CPI Communications call under the CPICOMM host command
Nenvironment:
I/* REXX */
I  ADDRESS CPICOMM "CMALLC conversation_id return_code"
I  If ( return_code = CM_OK ) Then Say "OK!"
I  Else Say "Why did this fail? rc("return_code")."
I  Say "Because the IBM Example is incomplete!"
N
NExample: LU62
N-------------
NThe following example illustrates the syntax for invoking an APPC/MVS
Ncall under the LU62 host command environment:
N
I/* REXX */
I  Say "This IBM Example is incomplete!"
I  ADDRESS LU62 "ATBDEAL conversation_id deallocate_type" ,
I    "notify_type return_code"
NExample: APPCMVS
N----------------
N
N
NExample: MVS
N------------
NRead from SYSIN.
I  ADDRESS MVS "ExecIO * DiskR SYSIN (Stem input_records. FINIS"
I  Say "# of SYSIN records: "input_records.0")"
I  Do irx = 1 to input_records.0
I    Say Left(input_records.irx,79)
I  End
N
N
MLINK, LINKMVS, LINKPGM versus ATTACH, ATTCHMVS, ATTCHPGM
M--------------------------------------------------------
MMessage from Kenneth Tomiak:
MIBM fails to provide working examples of LINK, LINKMVS, LINKPGM,
MATTACH, ATTCHMVS, and ATTCHPGM. Their LINKMVS should be using ATTCHMVS
Mand only passes one very long parameter string. It is unclear why
Mthe parameter begins with a NULL parameter followed by a space.
M
MSee my DEMO offering for working examples of JCL invoking REXX that
Muses ATTACH, ATTCHMVS, and ATTCHPGM written in HLASM. Do keep in mind
Mthat the LINK* version is meant for AUTHORIZED programs. IEBCOPY is
Mone instance that long ago dropped its requirement to be authorized.
MYour code is likely unauthorized and you should use the ATTCH* methods.
N
N
NExample: ATTACH
N---------------
NAttach unauthorized programs on a different task level.
NYou can only pass one parameter string. The program you ATTACHed to
Ncan use Register 1 for the two parameters R1 points to.
N-> R1 P1 points to the address of the passed parameter.
N-> R1 P2 points to the length of the passed parameter.
N
N
NExample: ATTCHMVS
N-----------------
NAttach unauthorized programs on a different task level.
NYou can pass one or more parameter strings. The program you ATTACHMVSed
Nto can use Register 1 to access the parameter list.
N
NFor the parameters, specify variable names instead of the actual
Nvalues. The LINKPGM or ATTCHPGM environment itself evaluates the
Nvariables and performs variable substitution.
N
N-> R1 P1 points to the length and parameter string.
N-> R1 P2 points to the length and parameter string.
N-> ...
N-> R1 Pn points to the length and parameter string.
N
N
NExample: ATTCHPGM
N-----------------
NAttach unauthorized programs on a different task level.
N
NFor the parameters, specify variable names instead of the actual
Nvalues. The LINKPGM or ATTCHPGM environment itself evaluates the
Nvariables and performs variable substitution.
N
N-> R1 P1 points to the parameter string.
N-> R1 P2 points to the parameter string.
N-> ...
N-> R1 Pn points to the parameter string.
M
MYou are on your own for the length. Likely each parameter is a
Mset length known by the program.
Irexx_DSNTIAR: /* REXX */
I  PARSE UPPER ARG SQLCODE
I  SQLC = D2X(SQLCODE,8)
I  SQLC = X2C(SQLC)
I
I  SQLCA = "SQLCA   "
I  SQLCA = SQLCA ||  X2C(00000088)
I  SQLCA = SQLCA ||  SQLC
I  SQLCA = SQLCA ||  X2C(0000)
I  SQLCA = SQLCA ||  COPIES(" ",78)
I  SQLCA = SQLCA ||  COPIES(X2C(00),24)
I  SQLCA = SQLCA ||  COPIES(" ",16)
I  TIAR_MSG = X2C(0190)COPIES(" ",400)
I  TEXT_LEN = X2C(00000050) ;
I  ADDRESS ATTCHPGM "DSNTIAR SQLCA TIAR_MSG TEXT_LEN"
I  SAY SUBSTR(TIAR_MSG,4,400);
I  return
N
N
N
NExample: LINK
N-------------
IAttach authorized programs on the same task level.
NYou can only pass one parameter string. The program you LINKed to
Ncan use Register 1 to access the parameter list.
N-> R1 P1 points to the address of the passed parameter.
N-> R1 P2 points to the length of the passed parameter.
N
N
NExample: LINKMVS
N----------------
NAttach authorized programs on the same task level.
NYou can pass one or more parameter strings. The program you LINKMVSed
Nto can use Register 1 to access the parameter list.
N
NFor the parameters, specify variable names instead of the actual
Nvalues. The LINKPGM or ATTCHPGM environment itself evaluates the
Nvariables and performs variable substitution.
N
N-> R1 P1 points to the length and parameter string.
N-> R1 P2 points to the length and parameter string.
N-> ...
N-> R1 Pn points to the length and parameter string.
I/* Rexx - Invoke IEBGENER with alternate ddnames. */
I  prog = "IEBGENER"
I  parm = "" /* Standard PARM, as from JCL */
I  ddlist = copies("00"x,8) ||, /* DDname  1 override: SYSLIN */
I    copies("00"x,8) ||,        /* DDname  2 override: n/a */
I    copies("00"x,8) ||,        /* DDname  3 override: SYSLMOD */
I    copies("00"x,8) ||,        /* DDname  4 override: SYSLIB */
I    left("CTL", 8) ||,         /* DDname  5 override: SYSIN */
I    left("REP", 8) ||,         /* DDname  6 override: SYSPRINT */
I    copies("00"x,8) ||,        /* DDname  7 override: SYSPUNCH */
I    left("INP", 8) ||,         /* DDname  8 override: SYSUT1 */
I    left("OUT", 8) ||,         /* DDname  9 override: SYSUT2 */
I    copies("00"x,8) ||,        /* DDname 10 override: SYSUT3 */
I    copies("00"x,8) ||,        /* DDname 11 override: SYSUT4 */
I    copies("00"x,8) ||,        /* DDname 12 override: SYSTERM */
I    copies("00"x,8) ||,        /* DDname 13 override: n/a */
I    copies("00"x,8)            /* DDname 14 override: SYSCIN */
I  address "LINKMVS" prog "PARM DDLIST"
I  exit rc
N
N
NExample: LINKPGM
N----------------
NAttach authorized programs on the same task level.
NLink to the DB2 program DSNTIAR to translate an error code to the
Nmessage text.
N
NFor the parameters, specify variable names instead of the actual
Nvalues. The LINKPGM or ATTCHPGM environment itself evaluates the
Nvariables and performs variable substitution.
N
N-> R1 P1 points to the parameter string.
N-> R1 P2 points to the parameter string.
N-> ...
N-> R1 Pn points to the parameter string.
M
MYou are on your own for the length. Likely each paramter is a
Mset length.
I
Iyou need to have invoked DSNREXX and received a bad SQLCODE.
I  S_RC = RXSUBCOM("ADD","Rexx4DB2","DSNREXX")
I  Address Rexx4DB2 "CONNECT demo"
I  If ( sqlcode <> 0 ) Then Do
I    SQL_ERRD = ""
I    Do I = 1 To 6
I      SQL_ERRD = SQL_ERRD||D2C(SQLERRD.I,4)
I    End
I    SQL_WARN = ""
I    Do I = 0 To 10
I      SQL_WARN = SQL_WARN||LEFT(SQLWARN.I,1)
I    End
I    SQLCA = 'SQLCA   '||D2C(136,4)||D2C(SQLCODE,4)||D2C(70,2) ,
I      ||LEFT(SQLERRMC,70)||'DSN     '||,
I      SQL_ERRD||SQL_WARN||LEFT(SQLSTATE,5)
I/*   If the length is beyond DSNTIAR possible values (72-240), reset */
I    If MSG_LEN < 72 | MSG_LEN > 240 Then ,
I      MSG_LEN = 120  /* Outside scope */
I    If MSG_LEN = "MSG_LEN" Then,
I      MSG_LEN = 120  /* Default msg length 120 */
I    DB2_ERR_MSG = D2C(MSG_LEN * 12,2) || COPIES(' ',MSG_LEN * 12)
I    DB2_ERR_LEN = D2C(MSG_LEN,4)
I                     /* Execute DSNTIAR program with SQLCA/Parm data */
I    Address LINKPGM "DSNTIAR SQLCA DB2_ERR_MSG DB2_ERR_LEN"
I    Do I = 1 to 12               * Loop through all lines of message */
I      MSG_TEXT = Substr(DB2_ERR_MSG,S_POS,MSG_LEN)  /* Pick out text */
I      MSG_TEXT = Strip(MSG_TEXT,T," ")     /* Remove trailing blanks */
I      If MSG_TEXT > " " Then Say MSG_TEXT  /* Echo msg to terminal */
I      Else Iterate                 /* Some msg lines are blank, skip */
I      S_POS = S_POS + MSG_LEN     /* Skip to next "line" of MSG data */
I    End I
I  End
N
N
NExample: Invoking each environment
N----------------------------------
NThis code will invoke each environment and display what you would use
Nit for.
D/* We first need rexx in comment if compiled or read from SYSPROC. */
Dpgm_REXR0301:
D  rexxpgm_version = "01.00"          /* Set with 'ver 1' and 'lev 2'. */
D
D  showed_commands. = 0
D  current_address = Address()                    /* Built-in function */
D  function_rc = What_can_I_do()
D
D  Address Console                                  /* Issue commands */
D  current_address = Address()
D  function_rc = What_can_I_do()
D
D  Address                                       /* Toggle back to TSO */
D  current_address = Address()
D  function_rc = What_can_I_do()
D
D  Address IspExec                             /* ISPF Dialog Services */
D  current_address = Address()
D  function_rc = What_can_I_do()
D
D  Address IsrEdit                               /* ISPF Edit Services */
D  current_address = Address()
D  function_rc = What_can_I_do()
D
D  Address CPICOMM                    /* SAA CPI  Communications calls */
D  current_address = Address()
D  function_rc = What_can_I_do()
D
D  Address LU62                       /* SAA CPI  Communications calls */
D  current_address = Address()
D  function_rc = What_can_I_do()
D
D  Address APPCMVS                    /* SAA CPI  Communications calls */
D  current_address = Address()
D  function_rc = What_can_I_do()
D
D  Address MVS                                     /* Stack and Buffer */
D  current_address = Address()
D  function_rc = What_can_I_do()
D
D  Address TSO                          /* TSO/E commands and services */
D  current_address = Address()
D  function_rc = What_can_I_do()
D
D  Address                                      /* Toggles back to MVS */
D  current_address = Address()
D  function_rc = What_can_I_do()
D
D  Return 0
D
D/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
DInternal routine to show what the current ADDRESS environment can do.
D>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
DWhat_can_I_do:
D  Say ""
D  Say "The current ADDRESS environment is:" current_address"."
D  Say "----------------------------------- --------"
D  Select
D    When ( current_address = "TSO" ) Then DO
D      If ( showed_commands.current_address = 0 ) Then Do
D        showed_commands.current_address = 1
D        Say "You can use:"
D        Say "  Built-in functions"
D      End
D    End
D    When ( current_address = "CONSOLE" ) Then DO
D      If ( showed_commands.current_address = 0 ) Then Do
D        showed_commands.current_address = 1
D        Say "You can use:"
D        Say "  ACTIVATE DEACTIVATE"
D        Say "  An MVS command (e.g. D A,L)"
D        Say "  CART     GETMSG   SYSCMD (e.g. $S PRT2)"
D      End
D    End
D    When ( current_address = "ISPEXEC" ) Then DO
D      If ( showed_commands.current_address = 0 ) Then Do
D        showed_commands.current_address = 1
D        Say "You can use:"
D        Say "  Any of the ISPF Dialog services."
D        Say "    PANEL, Skeleton (file tailoring), and TABLE"
D        Say "    processing are jsut a hint at what you can use."
D      End
D    End
D    When ( current_address = "ISREDIT" ) Then DO
D      If ( showed_commands.current_address = 0 ) Then Do
D        showed_commands.current_address = 1
D        Say "You can use:"
D        Say "  A wide variety of primary and line commands just as"
D        Say "  if you were in an EDIT sessions"
D      End
D    End
D    When ( current_address = "CPICOMM" ) Then DO
D      If ( showed_commands.current_address = 0 ) Then Do
D        showed_commands.current_address = 1
D        Say "You can use:"
D        Say "  The CPICOMM environment supports the starter set and"
D        Say "  advanced function set of the SAA CPI" ,
D          "Communications calls."
D        Say "    CMACCP (Accept_Conversation)"
D        Say "    CMALLC (Allocate)"
D        Say "    CMCFM (Confirm)"
D        Say "    CMCFMD (Confirmed)"
D        Say "    CMDEAL (Deallocate)"
D        Say "    CMECS (Extract_Conversation_State)"
D        Say "    CMECT (Extract_Conversation_Type)"
D        Say "    CMEMN (Extract_Mode_Name)"
D        Say "    CMEPLN (Extract_Partner_LU_Name)"
D        Say "    CMESL (Extract_Sync_Level)"
D        Say "    CMFLUS (Flush)"
D        Say "    CMINIT (Initialize_Conversation)"
D        Say "    CMPTR (Prepare_To_Receive)"
D        Say "    CMRCV (Receive)"
D        Say "    CMRTS (Request_To_Send)"
D        Say "    CMSCT (Set_Conversation_Type)"
D        Say "    CMSDT (Set_Deallocate_Type)"
D        Say "    CMSED (Set_Error_Direction)"
D        Say "    CMSEND (Send_Data)"
D        Say "    CMSERR (Send_Error)"
D        Say "    CMSF (Set_Fill)"
D        Say "    CMSLD (Set_Log_Data)"
D        Say "    CMSMN (Set_Mode_Name)"
D        Say "    CMSPLN (Set_Partner_LU_Name)"
D        Say "    CMSPTR (Set_Prepare_To_Receive_Type)"
D        Say "    CMSRC (Set_Return_Control)"
D        Say "    CMSRT (Set_Receive_Type)"
D        Say "    CMSSL (Set_Sync_Level)"
D        Say "    CMSST (Set_Send_Type)"
D        Say "    CMSTPN (Set_TP_Name)"
D        Say "    CMTRTS (Test_Request_To_Send_Received)"
D      End
D    End
D    When ( current_address = "LU62" ) Then DO
D      If ( showed_commands.current_address = 0 ) Then Do
D        showed_commands.current_address = 1
D        Say "You can use:"
D        Say "  The LU62 environment supports the APPC/MVS calls."
D        Say "    ATBALLC (Allocate)"
D        Say "    ATBCFM (Confirm)"
D        Say "    ATBCFMD (Confirmed)"
D        Say "    ATBDEAL (Deallocate)"
D        Say "    ATBFLUS (Flush)"
D        Say "    ATBGETA (Get_Attributes)"
D        Say "    ATBGETC (Get_Conversation)"
D        Say "    ATBGETP (Get_TP_Properties)"
D        Say "    ATBGETT (Get_Type)"
D        Say "    ATBPTR (Prepare_to_Receive)"
D        Say "    ATBRCVI (Receive_Immediate)"
D        Say "    ATBRCVW (Receive_and_Wait)"
D        Say "    ATBRTS (Request_to_Send)"
D        Say "    ATBSEND (Send_Data)"
D        Say "    ATBSERR (Send_Error)"
D      End
D    End
D    When ( current_address = "APPCMVS" ) Then DO
D      If ( showed_commands.current_address = 0 ) Then Do
D        showed_commands.current_address = 1
D        Say "You can use:"
D        Say "  The APPCMVS host command environment supports the"
D        Say "  following advanced callable services:"
D        Say "    ATBRFA2 (Register_for_Allocates)"
D        Say "    ATBRAL2 (Receive_Allocate)"
D        Say "    ATBRJC2 (Reject_Conversation)"
D        Say "    ATBSTE2 (Set_Event_Notification)"
D        Say "    ATBGTE2 (Get_Event)"
D        Say "    ATBQAQ2 (Query_Allocate_Queue)"
D        Say "    ATBSAQ2 (Set_Allocate_Queue_Attributes)"
D        Say "    ATBSCA2 (Set_Conversation_Accounting_Information)"
D        Say "    ATBURA2 (Unregister_for_Allocates)"
D        Say "    ATBPOR2 (Post_on_Receipt)"
D        Say ""
D        Say "  And these listed in manual with some of the above:"
D        Say "    ATBTER1 (Register_Test)"
D        Say "    ATBTEA1 (Accept_Test)"
D        Say "    ATBTEU1 (Unregister_Test)"
D        Say "    ATBCUC1 (Cleanup_TP (Unauthorized))"
D        Say "    ATBVERS (APPC_Version_Service)"
D      End
D    End
D    When ( current_address = "MVS" ) Then DO
D      If ( showed_commands.current_address = 0 ) Then Do
D        showed_commands.current_address = 1
D        Say "You can use:"
D        Say "  DELSTACK DROPBUF  EXECIO   EXECUTIL"
D        Say "  HE       HI       HT       RT       TE       TS"
D        Say "  MAKEBUF  NEWSTACK QBUF     QELEM    QSTACK   SUBCOM"
D      End
D    End
D    Otherwise Do
D      Say "Did IBM really add a new ADDRESS environment?"
D    End
D  End
D  Return 0
D
D/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D=======================================================================
D
D Dataset:  REXX(REXR0301)
D Author:   Kenneth Tomiak
D Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
D Manual:   ikj4a3a0.pdf
D           SA22-7790-10 z/OS TSO/E REXX Reference
D           Version 1 Release 13
D           Chapter 3. Keyword instructions
D           ADDRESS
D Overview: Use expanded environments beyond TSO.
D           Executing this will show them.
D
D-----------------------------------------------------------------------
D
D History of Modifications
D ------------------------
Dvv.mm When     Who / What you did ... (Newest change at the top.)
D----- -------- --------------------------------------------------------
D01.01 20171004 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
D               1) Original base code.
D----- -------- --------------------------------------------------------
D
D-----------------------------------------------------------------------
D
DSTANDARD GLOBAL DISCLAIMER
D--------------------------
DThe author explicitly disavows any claim whatsoever about the
Dcorrectness or functionality of this program, and disclaims liability
Dfor anything and everything bad that might happen in connection with,
Dbefore, during, or after using it. I have tried to make it work right,
Dand I am personally pretty confident that it does, but everybody makes
Dmistakes, so if you use it, you do so at your own risk.
D
D=======================================================================
D>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
D
* End of WISH.
