SCRDG2601
TCICS RDG
T-Chapter 26.
T-Syntax
E"Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20180517-121813
*
@IBM Corporation
*
Bdfha4h00.pdf
BSC34-7425-00 CICS Transaction Server for z/OS
B-Resource Definition Guide
B-Version 5 Release 3
*
NCICS Transaction Server for z/OS Resource Definition Guide
N----------------------------------------------------------
NChapter 26. PROGRAM resources
N-----------------------------
NSyntax:
N-------
D  DEFINE
D    PROGRAM(name)
I      Specifies the name of this PROGRAM definition. The name can be
I      up to eight characters in length.
N
I      It is preferable not to use names that start with DFH because
I       these characters are reserved for use by CICS.
N
I      CICS can delete or discard them and replace them with CICS
I      resources when you upgrade or provide new function or fixes.
N
I      To use the program in an active CICS region, it must be
I      link-edited into one of the libraries specified as part of the
I      DFHRPL or dynamic LIBRARY concatenation. If the program is
I      reentrant, you can place it in the link pack area (LPA). For
I      more information about installing application programs, see the
I      CICS Application Programming Guide.
N
D    GROUP(groupname)
I      Every resource definition must have a GROUP name.
I      The resource definition becomes a member of the group and is
I      installed in the CICS system when the group is installed.
N
I      The GROUP name can be up to 8 characters in length. Lowercase
I      characters are treated as uppercase characters.
N
D    DESCRIPTION(text)
I      You can provide a description of the resource that
I      you are defining in this field. The description text can be up to
I      58 characters in length. No restrictions apply to the characters
I      that you can use. However, if you use parentheses, ensure that for
I      each left parenthesis there is a matching right parenthesis. If you
I      use the CREATE command, for each single apostrophe in the text,
I      code two apostrophes.
N
D    API(CICSAPI | OPENAPI)
I      Specifies which API is to be used by the
I      program. The API attribute applies to the following programs:
N
I      -> User application programs
N
I      -> PLT programs
N
I      -> User-replaceable programs
N
I      -> Task-related user exit programs. For more information, see
I         Task-related user exit programs in Developing system programs.
N
I      The API attribute does not apply to global user exits.
N
I      CICSAPI: The program is restricted to use of the CICS permitted
I        application programming interfaces only.
N
I        If the program is defined with CONCURRENCY(QUASIRENT), it always
I        runs on the quasi-reentrant (QR) TCB. If the program is defined
I        with CONCURRENCY(THREADSAFE), it runs on whichever TCB is in use
I        by CICS at the time that is determined as suitable, and if the
I        program is defined with CONCURRENCY(REQUIRED), it always runs
I        on an open TCB.
N
I      OPENAPI: The program is not restricted to the CICS application
I        programming interfaces.
N
I        CICS runs the program on its own open TCB. The type of open TCB
I        used depends on the value of the EXECKEY attribute and the
I        language of the program.
N
I        If CICS requires a switch to the QR TCB when running a command,
I        it returns to the open TCB before handing control back to the
I        application program.
N
I        To specify the OPENAPI attribute, your program must be coded to
I        threadsafe standards and defined with CONCURRENCY(REQUIRED).
N
I        The primary use for OPENAPI programs is to move application
I        workloads off the QR TCB and onto multiple open TCBs. You can
I        benefit from better exploitation of server resources to achieve
I        better throughput.
N
I        Note: The combination of CONCURRENCY(THREADSAFE) API(OPENAPI)
I        supported in previous releases is deprecated but is kept for
I        compatibility, and produces the same behavior as
I        CONCURRENCY(REQUIRED) API(OPENAPI).
N
I        Use of other (non-CICS) APIs in OPENAPI programs is possible. If
I        an open TCB is blocked by an operating system wait, only the
I        single application is affected and not the whole of CICS. Such
I        OPENAPI programs are not permitted to run on the QR TCB precisely
I        because of this risk of blocking the TCB by an operating system
I        wait and thus affecting the whole of CICS. Nevertheless, OPENAPI
I        programs still have obligations to the CICS system as a whole.
I        For more information, see Multithreading: Reentrant,
I        quasi-reentrant, and threadsafe programs in Developing
I        applications.
N
I        Important: Use of other (non-CICS) APIs within CICS is entirely
I        at the discretion and risk of the user. No testing of other
I        (non-CICS) APIs within CICS has been undertaken and use of such
I        APIs is not supported by IBM Service.
N
D    CEDF(YES | NO)
I      Specifies the action of the execution diagnostic
I      facility (EDF) when the program is running under EDF control.
N
I      NO: The EDF diagnostic screens are not displayed.
N
I      YES: The EDF diagnostic screens are displayed. If the program is
I        translated with the NOEDF option, only the program initiation
I        and termination EDF screens are displayed.
N
D    DATALOCATION(BELOW | ANY)
I      Commands that use the SET option can
I      return a data address to an application program; this operand
I      specifies the location of the data. For example, in the command
I      EXEC CICS RECEIVE SET(ptr-ref), ptr-ref is less than 16 MB if
I      DATALOCATION(BELOW) is specified, but might be greater than 16 MB
I      if DATALOCATION(ANY) is specified. DATALOCATION does not affect
I      the operation of the GETMAIN command. For more information about
I      where CICS obtains storage in response to this command, see
I      GETMAIN in Reference Application development.
N
I      ANY: The program can handle 31-bit addresses. The address of the
I        data can be above or below the 16 MB line. The values specified
I        for the DATALOCATION attribute are independent of the addressing
I        mode of the link-edited program. Programs that are link-edited
I        with addressing mode AMODE=24 cannot access data above 16 MB;
I        ensure that the value you specify is compatible with the
I        addressing mode of the link-edited application program:
N
I        -> Specify ANY for all 31-bit or 64-bit programs, unless they
I           pass CICS data addresses on to other 24-bit programs.
N
I        -> Specify DATALOCATION(BELOW) for an AMODE=24 program, unless
I           storage addresses are being passed to a program that can
I           access storage above 16 MB, or the program explicitly switches
I           addressing mode.
N
I      BELOW: The program can handle only 24-bit addresses and must
I        therefore only be given data located below the 16 MB line. If
I        required, data is copied below the 16 MB line before passing
I        its address to the application program.
N
I      DATALOCATION does not affect the operation of the GETMAIN64 or
I      GET64 CONTAINER commands. For more information about these
I      commands, see GETMAIN64 in Reference Application development and
I      GET64 CONTAINER in Reference Application development.
N
D    DYNAMIC(NO | YES)
I      Specifies whether, if the program is the subject
I      of a program-link request, the request can be dynamically routed.
N
I      NO: If the program is the subject of a program-link request, the
I        dynamic routing program is not started.
N
I        For a distributed program link (DPL) request, the server region
I        on which the program is to run must be specified explicitly on
I        the REMOTESYSTEM attribute or on the SYSID option of the
I        EXEC CICS LINK command; otherwise it defaults to the local
I        region.
N
I      YES: If the program is the subject of a program-link request, the
I        CICS dynamic routing program is started. If a remote region is
I        not named on the SYSID option of the EXEC CICS LINK command, the
I        routing program can route the request to the region on which the
I        program is to run.
N
I      The DYNAMIC attribute takes precedence over the REMOTESYSTEM
I      attribute; see REMOTESYSTEM.
N
I      For guidance information about the dynamic routing of DPL requests,
I      see Dynamically routing DPL requests in Getting started.
N
D    EXECUTIONSET(FULLAPI | DPLSUBSET)
I      Specifies whether you want CICS
I      to link to and run a program as if it were running in a remote
I      CICS region.
N
I      DPLSUBSET: Specify DPLSUBSET if you want CICS to link to the
I        program and run it with the API restrictions of a remote DPL
I        program. See Exception conditions for LINK command in Reference
I        Application development for details of the API restrictions for
I        a DPL program.
N
I      FULLAPI: Specify FULLAPI if you want CICS to link to the program
I        and run it without the API restrictions of a DPL program. The
I        program can use the full CICS API.
N
I      The EXECUTIONSET attribute applies only in these cases:
N
I      -> To programs that are being linked to, and not to those programs
I         that are the first to be given control by a transaction.
N
I      -> When the REMOTESYSTEM name is the same name as the local CICS
I         region. Its purpose is to test programs in a local CICS
I         environment as if they were running as DPL programs.
N
D    JVM(NO | YES)
I      Specifies whether the program is a Java program that
I      must run in a Java Virtual Machine (JVM).
N
I      NO: The program is not to run in a JVM.
N
I      YES: The program is to run in a JVM. Specify a class name in the
I        JVMCLASS attribute if you specify JVM(YES).
N
I      In addition to YES and NO, you can also specify DEBUG, but in
I      compatibility mode only (see Sharing the CSD between different
I      releases of CICS in Configuring).
M
I      If you set JVM to YES, and a value is also set for JVMPROFILE
I      (an obsolete attribute), program installation is prevented.
N
D    REMOTENAME(program)
I      Specifies the name of the program on the
I      remote CICS region.
N
I      If you specify REMOTESYSTEM and omit REMOTENAME, the REMOTENAME
I      attribute defaults to the same name as the local name (that is,
I      the program name on this resource definition).
N
D    REMOTESYSTEM(connection)
I      Specifies the name of an IPCONN or a
I      CONNECTION resource that defines a link to the remote CICS region
I      on which the program resides. Specify this attribute if you want
I      CICS to ship a distributed program link (DPL) request to another
I      CICS region.
N
I      Besides the REMOTESYSTEM attribute of the program definition, the
I      DPL server region can also be specified by the following:
N
I      -> The application program, using the SYSID option of the
I         EXEC CICS LINK PROGRAM command
N
I      -> The dynamic routing program.
N
I      The rules of precedence are as follows:
N
I      1. If an application program issues a DPL request, and the SYSID
I         option on the LINK command specifies a remote CICS region,
I         CICS ships the request to the remote region.
N
I         If the installed program definition specifies DYNAMIC(YES), or
I         there is no installed program definition, the dynamic routing
I         program is called for notification only; it cannot reroute the
I         request.
N
I      2. If an application program issues a DPL request, but the SYSID
I         is the same name as the local CICS region or the SYSID option
I         is not specified:
N
I         a. If the installed program definition specifies DYNAMIC(YES),
I            or there is no installed program definition, the dynamic
I            routing program is called and can route the request.
N
I            The REMOTESYSTEM attribute of the program definition, if
I            specified, names the default server region passed to the
I            dynamic routing program.
N
I         b. If the installed program definition specifies DYNAMIC(NO),
I            CICS ships the request to the remote system named on the
I            REMOTESYSTEM attribute. If REMOTESYSTEM is not specified,
I            CICS runs the program locally.
N
I            The rules for specifying the remote system name are the same
I            as for the CONNECTION attribute of the CONNECTION resource
I            definition.
N
I      Note: You must not specify remote attributes for any user-written
I      CICS programs, such as the dynamic transaction routing or
I      autoinstall user programs.
N
D    STATUS(ENABLED | DISABLED)
I      Specifies the program status.
N
I      DISABLED: The program cannot be used.
N
I      ENABLED: The program can be used.
N
I      This attribute is ignored for PROGRAM resources that are
I      dynamically generated by a CICS bundle. The initial status of a
I      PROGRAM resource is derived from the initial status of the bundle
I      that defines the resource.
N
D    TRANSID(char4)
I      If the program is dynamic, this value is the default
I      TRANSID used for the distributed program link (DPL) request. If the
I      program is not dynamic, this value specifies the name of the
I      transaction you want the remote CICS to attach, and under which
I      it is to run the remote program.
N
I      If you do not specify a transaction name on the TRANSID attribute,
I      the remote region runs the DPL program under one of the following
I      CICS-supplied default mirror transactions. If you have defined a
I      user transaction in the remote region to call the mirror program,
I      the DPL program runs under that transaction ID.
N
I      CPMI: The mirror transaction that is used for LU6.2 connections
I        that require data conversion and for TCP/IP and IPIC requests
I        from the CICS Transaction Gateway for Multiplatforms.
N
I      CSMI: The CICS mirror transaction for MRO and LU6.2 connections
I        with sync level 2 and for EXCI and IPIC requests from the CICS
I        Transaction Gateway for z/OS.
N
N
NAttributes for non-Java programs:
N---------------------------------
D    LANGUAGE(ASSEMBLER | C | COBOL | LE370 | PLI)
I      Specifies the program language.
N
I      ASSEMBLER: An assembler language program that was not translated
I        using the LEASM translator option. LEASM is used to translate
I        those assembler programs that are Language Environment-conforming
I        MAIN programs.
N
I      C: A C or C++ program that was not compiled by a Language
I        Environment-conforming compiler.
N
I      COBOL: A COBOL program.
N
I      LE370: A program that uses multi-language support, or has been
I        compiled by a Language Environment-conforming compiler, or is
I        an assembler MAIN program that was translated using the LEASM
I        option to produce a Language Environment-conforming program.
N
I      PLI: A PL/I program.
N
I      In most cases, you do not have to specify the LANGUAGE attribute,
I      because the CICS program manager deduces the correct language and
I      ignores the value you specify. However, if the program is written
I      in assembler language and does not have a DFHEAI or DFHEAG stub,
I      CICS cannot deduce the language and you must specify the
I      appropriate value: If the language is not specified and CICS
I      cannot deduce it, transactions that attempt to use the program
I      abend with code ALIG.
N
I      Although, you usually do not have to specify a value for this
I      attribute, be aware that the value specified is returned in the
I      LANGDEDUCED and LANGUAGE options of the INQUIRE PROGRAM command.
I      Programs that use this command might be affected if you change the
I      value of this attribute.
N
I      This attribute does not apply to JVM programs. CICS deduces that
I      the program is a Java program to run under the control of a JVM
I      when JVM(YES) is specified.
N
I      Specifies the name of this PROGRAM definition. The name can be up
I      to eight characters in length.
N
I      It is preferable not to use names that start with DFH because these
I      characters are reserved for use by CICS. CICS can delete or discard
I      them and replace them with CICS resources when you upgrade or
I      provide new function or fixes.
N
I      To use the program in an active CICS region, it must be link-edited
I      into one of the libraries specified as part of the DFHRPL or
I      dynamic LIBRARY concatenation. If the program is reentrant, you
I      can place it in the link pack area (LPA). For more information
I      about installing application programs, see the CICS Application
I      Programming Guide.
N
D    CONCURRENCY(QUASIRENT | THREADSAFE | REQUIRED)
I      Specifies whether the
I      program is written to threadsafe standards, or is only
I      quasi-reentrant. You can specify the CONCURRENCY attribute for all
I      CICS executable program objects:
N
I      -> User application programs.
N
I      -> PLT programs.
N
I      -> User-replaceable programs.
N
I      -> Global user exit programs. For more information, see Global
I         user exit programs in Developing system programs.
N
I      -> Task-related user exit programs. For more information, see
I         Task-related user exit programs in Developing system programs.
N
I      QUASIRENT: The program is quasi-reentrant only, and relies on the
I        serialization provided by CICS when accessing shared resources.
N
I        The program is restricted to the CICS permitted programming
I        interfaces, and must comply with the CICS quasi-reentrant rules.
I        For more information, see Multithreading: Reentrant,
I        quasi-reentrant, and threadsafe programs in Developing
I        applications.
N
I        This value is supported for all executable programs.
N
I        CICS ensures that the program always runs under the QR TCB, even
I        when control is returned after it has started a JVM or an open
I        API task-related user exit, or when it interacts with threadsafe
I        programs.
N
I      THREADSAFE: The program is written to threadsafe standards. When
I        it accesses shared resources it takes into account the
I        possibility that other programs might be running concurrently
I        and attempting to modify the same resources. The program,
I        therefore, uses appropriate serialization techniques when
I        accessing any shared resources.
N
I        JVM programs and any C and C++ programs compiled with the XPLink
I        option must be defined as threadsafe. For compatibility with
I        previous releases, CONCURRENCY(THREADSAFE) is the default value
I        for Java programs, but the preferred option to use is
I        CONCURRENCY(REQUIRED).
N
I        For information about CICS DB2 application programs, see
I        Application design and development considerations for
I        CICS DB2 in Developing applications.
N
I        For information about writing threadsafe application programs,
I        see Threadsafe programs in Developing applications.
N
I        This value is supported for all executable programs. Threadsafe
I        programs must confirm with Language Environment, or be assembler
I        language programs.
N
I      REQUIRED: The program is written to threadsafe standards. CICS
I        starts the program on an open TCB and ensures that the program
I        always runs on an open TCB. If CICS switches to the QR TCB to
I        run a CICS command, it returns to the open TCB before handing
I        control back to the application program. The type of open TCB
I        used depends on the API setting and the language of the program.
N
I        -> Java programs and OSGi bundles that run in a JVM server use
I           a T8 TCB.
N
I        -> C or C++ XPLink programs operate like OPENAPI programs and
I           use an X8 TCB if CICS key is set, and an X9 TCB if user key
I           is set.
N
I        -> COBOL, PL/I, non-XPLink C or C++, and assembler language
I           programs that also specify API(CICSAPI) use an L8 TCB because
I           CICS commands can operate on this TCB irrespective of the
I           execution key of the program.
N
I        REQUIRED is applicable to user application programs, PLT
I        programs, and user-replaceable programs, and is the preferred
I        option for Java programs. The REQUIRED setting is also suitable
I        for programs that access resource managers like DB2 and WebSphere
I        MQ, which also require an L8 TCB. However, for OPENAPI programs
I        CICS must use an L9 TCB for user key programs and an L8 TCB for
I        CICS key programs so that non-CICS API commands such as MVS
I        requests operate correctly. The CICS-DB2 task-related user exit
I        will use an L8 TCB if it is run with CONCURRENCY(REQUIRED) and
I        API(OPENAPI) or it will run on any eligible key 8 open TCB if
I        run with CONCURRENCY(REQUIRED) and API(OPENAPI).
N
I        You can also specify the program CONCURRENCY attribute using a
I        program autoinstall exit, if program autoinstall is active.
N
D    EXECKEY(USER | CICS)
I      Specifies the key in which CICS gives control
I      to the program, and determines whether the program can modify
I      CICS-key storage. Except for reentrant programs (that is, programs
I      link-edited with the RENT attribute), EXECKEY also defines, with
I      the residency mode, into which of the DSAs CICS loads the program.
N
I      CICS: CICS gives control to the program in CICS key when it is
I        called. CICS loads the program into one of the CICS-key DSAs
I        - either the CDSA or the ECDSA, depending on the residency mode
I        specified for the program.
N
I        In a CICS region with storage protection active, a CICS-key
I        program has read and write access to CICS-key and user-key
I        storage of its own task and all other tasks, whether transaction
I        isolation is active.
N
I      USER: CICS gives control to the program in user key when it is
I        called. CICS loads the program into one of the user-key shared
I        DSAs - either the SDSA or the ESDSA, depending on the residency
I        mode specified for the program.
N
I        In a CICS region with storage protection only active, a
I        user-key program has read and write access to all user-key
I        storage, but read-only access to CICS-key storage.
N
I        In a storage protection and transaction isolation environment,
I        a user-key program has read and write access to the user-key
I        task-lifetime storage of its own task only, and to any shared
I        DSA storage, if the transaction is defined with ISOLATE(YES).
N
I        If a transaction is defined with ISOLATE(NO) in a transaction
I        isolation environment, its user-key programs also have read and
I        write access to the user-key task-lifetime storage of other
I        transactions that are defined with ISOLATE(NO).
N
I        User-key programs always have read-only access to CICS-key
I        storage.
N
I      The EXECKEY attribute is ignored in the following cases:
N
I      -> First-level global user exit programs, task-related user exit
I         programs, user-replaceable programs, and PLT programs always
I         run in CICS key.
N
I      -> If the program is link-edited with the RENT attribute, CICS
I         loads the program into one of the read-only DSAs - either the
I         RDSA or the ERDSA, depending on the residency mode specified
I         for the program. The read-only DSAs are allocated from read-only
I         storage only if RENTPGM=PROTECT is specified as a system
I         initialization parameter.
N
I      -> Programs called by COBOL dynamic CALL always run in the same
I         key as the caller.
N
D    RELOAD(NO | YES)
I      Specifies whether a program control link, load, or
I      XCTL request is to bring in a fresh copy of a program. This
I      attribute does not apply to JVM programs.
N
I      NO: Any valid copy of the program currently in storage is reused
I        for the request.
N
I      YES: A fresh copy of the program is brought into storage for every
I        request. Furthermore, each of these program copies must be
I        removed from storage explicitly, using a storage control
I        FREEMAIN request, when it is no longer required and before the
I        transaction terminates. If the relevant FREEMAIN requests are
I        not issued, areas of the DSA/EDSA become tied up with
I        inaccessible program copies, potentially causing storage
I        shortage or fragmentation.
N
I      Note: If a new version of the program has been placed in the
I      LIBRARY concatenation, a NEWCOPY or PHASEIN must be issued for
I      the program before the new version is loaded.
N
I      You can use RELOAD(YES) to load tables or control blocks that are
I      modified by the execution of any associated programs. Do not
I      specify this value for the first program loaded for a task,
I      because the task does not have a way to issue a FREEMAIN request
I      for the program.
N
I      You must specify RELOAD(YES) for nonreentrant programs.
N
I      For more information about the RELOAD attribute, see the
I      CICS Performance Guide.
N
D    RESIDENT(NO | YES)
I      Specifies the residence status of the program.
I      This attribute does not apply to JVM programs.
N
I      NO: The program is not to be permanently resident. This value must
I        be specified if RELOAD(YES) is specified.
N
I      YES: The program is to be loaded on first reference and is then to
I        be permanently resident in virtual storage, but is to be pageable
I        by the operating system. When you specify RESIDENT(YES), CICS
I        assumes a specification of USAGE(NORMAL).
N
I      For more information about the effects of the RESIDENT attribute,
I      see the CICS Performance Guide.
N
I    RSL: This attribute is obsolete, but is supported to provide
I      compatibility with earlier releases of CICS. For more information,
I      see Obsolete attributes in Reference System definition.
N
D    USAGE(NORMAL | TRANSIENT)
I      Specifies when the storage for this
I      program is released. This attribute does not apply to JVM programs.
N
I      NORMAL: When the resident use count (RESCOUNT) for this program
I        reaches zero, it becomes eligible for removal from storage as
I        part of the normal dynamic program storage compression process.
N
I        This value must be specified if RELOAD(YES) is specified.
N
I      TRANSIENT: When the resident use count (RESCOUNT) for this
I        program becomes zero, the storage for this program is released.
I        Specify this value for programs that are referenced infrequently.
N
D    USELPACOPY(NO | YES)
I      Specifies whether the program is to be used
I      from the link pack area (LPA).
N
I      This attribute does not apply to JVM programs.
N
I      NO: The program is not to be used from the LPA. It is loaded into
I        the CICS address space.
N
I      YES: The program can be used from the LPA if LPA=YES is specified
I        as a system initialization parameter. The use of the program from
I        the LPA requires that it has been installed there and that the
I        program is not named by the PRVMOD system initialization
I        parameter. For more information, see the CICS Transaction
I        Server for z/OS Installation Guide.
N
NAttributes for Java programs:
N-----------------------------
D    CONCURRENCY(THREADSAFE | REQUIRED)
I      Specifies whether the
I      program is written to threadsafe standards, or is only
I      quasi-reentrant. You can specify the CONCURRENCY attribute for all
I      CICS executable program objects:
N
I      -> User application programs.
N
I      -> PLT programs.
N
I      -> User-replaceable programs.
N
I      -> Global user exit programs. For more information, see Global
I         user exit programs in Developing system programs.
N
I      -> Task-related user exit programs. For more information, see
I         Task-related user exit programs in Developing system programs.
N
I      QUASIRENT: The program is quasi-reentrant only, and relies on the
I        serialization provided by CICS when accessing shared resources.
N
I        The program is restricted to the CICS permitted programming
I        interfaces, and must comply with the CICS quasi-reentrant rules.
I        For more information, see Multithreading: Reentrant,
I        quasi-reentrant, and threadsafe programs in Developing
I        applications.
N
I        This value is supported for all executable programs.
N
I        CICS ensures that the program always runs under the QR TCB, even
I        when control is returned after it has started a JVM or an open
I        API task-related user exit, or when it interacts with threadsafe
I        programs.
N
I      THREADSAFE: The program is written to threadsafe standards. When
I        it accesses shared resources it takes into account the
I        possibility that other programs might be running concurrently
I        and attempting to modify the same resources. The program,
I        therefore, uses appropriate serialization techniques when
I        accessing any shared resources.
N
I        JVM programs and any C and C++ programs compiled with the XPLink
I        option must be defined as threadsafe. For compatibility with
I        previous releases, CONCURRENCY(THREADSAFE) is the default value
I        for Java programs, but the preferred option to use is
I        CONCURRENCY(REQUIRED).
N
I        For information about CICS DB2 application programs, see
I        Application design and development considerations for
I        CICS DB2 in Developing applications.
N
I        For information about writing threadsafe application programs,
I        see Threadsafe programs in Developing applications.
N
I        This value is supported for all executable programs. Threadsafe
I        programs must confirm with Language Environment, or be assembler
I        language programs.
N
I      REQUIRED: The program is written to threadsafe standards. CICS
I        starts the program on an open TCB and ensures that the program
I        always runs on an open TCB. If CICS switches to the QR TCB to
I        run a CICS command, it returns to the open TCB before handing
I        control back to the application program. The type of open TCB
I        used depends on the API setting and the language of the program.
N
I        -> Java programs and OSGi bundles that run in a JVM server use
I           a T8 TCB.
N
I        -> C or C++ XPLink programs operate like OPENAPI programs and
I           use an X8 TCB if CICS key is set, and an X9 TCB if user key
I           is set.
N
I        -> COBOL, PL/I, non-XPLink C or C++, and assembler language
I           programs that also specify API(CICSAPI) use an L8 TCB because
I           CICS commands can operate on this TCB irrespective of the
I           execution key of the program.
N
I        REQUIRED is applicable to user application programs, PLT
I        programs, and user-replaceable programs, and is the preferred
I        option for Java programs. The REQUIRED setting is also suitable
I        for programs that access resource managers like DB2 and WebSphere
I        MQ, which also require an L8 TCB. However, for OPENAPI programs
I        CICS must use an L9 TCB for user key programs and an L8 TCB for
I        CICS key programs so that non-CICS API commands such as MVS
I        requests operate correctly. The CICS-DB2 task-related user exit
I        will use an L8 TCB if it is run with CONCURRENCY(REQUIRED) and
I        API(OPENAPI) or it will run on any eligible key 8 open TCB if
I        run with CONCURRENCY(REQUIRED) and API(OPENAPI).
N
I        You can also specify the program CONCURRENCY attribute using a
I        program autoinstall exit, if program autoinstall is active.
N
D    EXECKEY(CICS)
I      Specifies the key in which CICS gives control
I      to the program, and determines whether the program can modify
I      CICS-key storage. Except for reentrant programs (that is, programs
I      link-edited with the RENT attribute), EXECKEY also defines, with
I      the residency mode, into which of the DSAs CICS loads the program.
N
I      CICS: CICS gives control to the program in CICS key when it is
I        called. CICS loads the program into one of the CICS-key DSAs
I        - either the CDSA or the ECDSA, depending on the residency mode
I        specified for the program.
N
I        In a CICS region with storage protection active, a CICS-key
I        program has read and write access to CICS-key and user-key
I        storage of its own task and all other tasks, whether transaction
I        isolation is active.
N
I      USER: CICS gives control to the program in user key when it is
I        called. CICS loads the program into one of the user-key shared
I        DSAs - either the SDSA or the ESDSA, depending on the residency
I        mode specified for the program.
N
I        In a CICS region with storage protection only active, a
I        user-key program has read and write access to all user-key
I        storage, but read-only access to CICS-key storage.
N
I        In a storage protection and transaction isolation environment,
I        a user-key program has read and write access to the user-key
I        task-lifetime storage of its own task only, and to any shared
I        DSA storage, if the transaction is defined with ISOLATE(YES).
N
I        If a transaction is defined with ISOLATE(NO) in a transaction
I        isolation environment, its user-key programs also have read and
I        write access to the user-key task-lifetime storage of other
I        transactions that are defined with ISOLATE(NO).
N
I        User-key programs always have read-only access to CICS-key
I        storage.
N
I      The EXECKEY attribute is ignored in the following cases:
N
I      -> First-level global user exit programs, task-related user exit
I         programs, user-replaceable programs, and PLT programs always
I         run in CICS key.
N
I      -> If the program is link-edited with the RENT attribute, CICS
I         loads the program into one of the read-only DSAs - either the
I         RDSA or the ERDSA, depending on the residency mode specified
I         for the program. The read-only DSAs are allocated from read-only
I         storage only if RENTPGM=PROTECT is specified as a system
I         initialization parameter.
N
I      -> Programs called by COBOL dynamic CALL always run in the same
I         key as the caller.
N
D    JVMCLASS(class)
I      Specifies the name of the main class in a Java
I      program.
N
I      -> For OSGi bundles that run in a JVM server, this value is the
I         name of the OSGi service. The OSGi service is registered when
I         you install the BUNDLE resource that contains the OSGi bundle.
I         You can look up the name of the OSGi service in the Bundle Parts
I         view in CICS Explorer.
N
I      -> For Java programs that run in a JVM server, this value is the
I         class name qualified by the package name.
N
I      -> For web applications in a Liberty JVM server, this value is the
I         protocol qualified service name.
N
N      The names are case sensitive and must be entered with the correct
I      combination of uppercase and lowercase letters. If you use a
I      terminal, ensure that uppercase translation is suppressed.
N
I      This attribute applies only to Java applications running under the
I      control of a JVM. If you specify JVM(NO), CICS ignores any value
I      specified in the JVMClass field at program execution time.
N
D    JVMSERVER(jvmserver)
N
* End of WISH.
