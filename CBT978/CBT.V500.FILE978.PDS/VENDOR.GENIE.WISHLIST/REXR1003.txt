SREXR1003
Tz/OS TSO/E REXX Reference
T-Chapter 10.
T-EXECIO
E"Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20180517-175933
*
@IBM Corporation
*
Bikj4a3a0.pdf
BSA22-7790-10 z/OS TSO/E REXX Reference
BVersion 1 Release 13
*
Nz/OS TSO/E REXX Reference
N=========================
NChapter 10. TSO/E REXX commands
N-------------------------------
NEXECIO
N--------
NEXECIO controls the input and output (I/O) of information to and from
Na data set. Information can be read from a data set to the data stack
Nfor serialized processing or to a list of variables for random
Nprocessing. Information from the data stack or a list of variables can
Nbe written to a data set.
N
N
NSyntax
D  EXECIO lines | * DISKW ddname Write Parms
D  EXECIO lines | * DISKR ddname
D  EXECIO lines | * DISKRU linenum Read Parms
N
I  Write Parms:
D    (STEM var-name OPEN | FINIS )
I  Read Parms:
D    (STEM var-name FIFO| LIFO OPEN | FINIS SKIP )
N
I    lines: the number of lines to be processed. This operand can be a
I           specific decimal number or an arbitrary number indicated
I           by *. When the operand is * and EXECIO is reading from a
I           data set, input is read until EXECIO reaches the end of the
I           data set.
N
I    DISKW:  opens a data set for output (if it is not already open) and
I            writes the specified number of lines to the data set. The
I            lines can be written from the data stack or, if the STEM
I            operand is specified, from a list of variables.
N
I    DISKR:  opens a data set for input (if it is not already open) and
I            reads the specified number of lines from the data set and
I            places them on the data stack. If the STEM operand is
I            specified, the lines are placed in a list of variables
I            instead of on the data stack.
N
I    DISKRU: opens a data set for update (if it is not already open) and
I            reads the specified number of lines from the data set and
I            places them on the data stack. If the STEM operand is
I            specified, the lines are placed in a list of variables
I            instead of on the data stack.
N
I    ddname: the name of the file to which the sequential data set or
I            member of the PDS was allocated. You must allocate the file
I            before you can issue EXECIO. For example, you can allocate
I            a file using the ALLOCATE command in the TSO/E address
I            space only or a JCL DD statement.
N
I    linenum: the line number in the data set at which EXECIO is to
I             begin reading. When a data set is closed and reopened as
I             a result of specifying a record number earlier than the
I             current record number, the file is open for:
N
N             -> input if DISKR is specified
N             -> update if DISKRU is specified
N
I             When a data set is open for input or update, the current
I             record number is the number of the next record to be read.
I             When linenum specifies a record number earlier than the
I             current record number in an open data set, the data set
I             must be closed and reopened to reposition the current
I             record number at linenum.
N
I             When this situation occurs and the data set was not opened
I             at the same task level as that of the executing exec,
I             attempting to close the data set at a different task
I             level results in an EXECIO error. The linenum operand
I             must not be used in this case.
N
I    STEM var-name: the stem of the set of variables into which
I                   information is to be placed. To place information
I                   in compound variables, which allow for easy
I                   indexing, the var-name should end with a period.
I                   For example, MYVAR.
N
I    LIFO: places information about the data stack in LIFO (last in
I          first out) order.
N
I    FIFO: places information about the data stack in FIFO (first in
I          first out) order. FIFO is the default when neither LIFO or
I          FIFO is specified.
N
I    SKIP: reads the specified number of lines but does not place them
I          on the data stack or in variables. When the number of lines
I          is *, EXECIO skips to the end of the data set.
N
I    OPEN: opens the specified data set if it is not already open. You
I          can use OPEN with a lines value of 0 to have EXECIO do one of
I          the following:
N
I          -> open a data set without reading any records
I          -> set the current record number (that is, the number of the
I             next record EXECIO will read) to the record number
I             indicated by the linenum operand, if you specify a value
I             for linenum.
N
I    FINIS: close the data set after the EXECIO command completes. A
I           data set can be closed only if it was opened at the same
I           task level as the exec issuing the EXECIO command.
N
N
NDISKR Example EXEC1
N-------------------
I/* REXX exec (EXEC1) invokes another exec (EXEC2) to open a */
I/* file. EXEC1 then continues reading the same file. */
Isay 'Executing the first exec EXEC1'
I"ALLOC FI(INPUTDD) DA(MYINPUT) REUSE" , /* Allocate input file */
I  "NEW CATALOG TRACKS SPACE(1, 1) RECFM(V B) BLKSIZE(0) LRECL(40)"
I/* */
I/* Now invoke the second exec (EXEC2) to open the INPUTDD file. */
I/* The exec uses a call to invoke the second exec. You can */
I/* also use the TSO/E EXEC command, which would have the */
I/* same result. */
I/* If EXEC2 opens a file and does not close the file before */
I/* returning control to EXEC1, the file remains open when */
I/* control is returned to EXEC1. */
I/* */
Isay 'Invoking the second exec EXEC2'
Icall exec2 /* Call EXEC2 to open file */
Isay 'Now back from the second exec EXEC2. Issue another EXECIO.'
I"EXECIO 1 DISKR INPUTDD (STEM X." /* EXECIO reads record 4 */
Isay x.1
Isay 'Now close the file'
I"EXECIO 0 DISKR INPUTDD (FINIS" /* Close file so it can be freed */
I"FREE FI(INPUTDD)"
IEXIT 0
N
N
NDISKR Example EXEC2
N-------------------
I/* REXX exec (EXEC2) opens the file INPUTDD, reads 3 records, and */
I/* then returns to the invoking exec (EXEC1). The exec (EXEC2) */
I/* returns control to EXEC1 without closing the INPUTDD file. */
I/* */
Isay "Now in the second exec EXEC2"
Isay 'Invoking the third exec EXEC3'
Icall exec3 /* Call EXEC3 to open file */
Isay 'Now back from the second exec EXEC2. Issue another EXECIO.'
IDO I = 1 to 3 /* Read & display first 3 records */
I  "EXECIO 1 DISKR INPUTDD (STEM Y.)"
I  say y.1
IEND
ISay 'Leaving second exec EXEC2. Three records were read from file.'
IRETURN 0
N
N
NDISKW Example EXEC3
N-------------------
I/* REXX exec (EXEC3) opens the file INPUTDD, writes 6 records. */
Isay 'Now in the third exec EXEC3'
Iy.0 = 1
IDO I = 1 to 6 /* Write & display first 6 records */
I  y.1 = "Record #"i
I  "EXECIO 1 DISKW INPUTDD (STEM Y.)"
I  say y.1
IEND
I  "EXECIO 0 DISKW INPUTDD (FINIS)"
ISay 'Leaving third exec EXEC3. Six records were written to file.'
IRETURN 0
* End of WISH.
