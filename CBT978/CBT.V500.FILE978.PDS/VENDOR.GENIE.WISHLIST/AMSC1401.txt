SAMSC1401
TDFSMS AMS
T-Chapter 14.
T-Syntax for DEFINE CLUSTER Parameters
EKenneth Tomiak <KenTomiak@KTomiak.org>
Z20180512-148953
*
@IBM Corporation
*
Bdgt2i2a1.pdf: SC26-7394-13: z/OS
BDFSMS Access Method Services for Catalogs
BVersion 1 Release 13
*
NAccess Method Services for Catalogs
N-----------------------------------
NChapter 14. DEFINE CLUSTER
N--------------------------
NSyntax for DEFINE CLUSTER Parameters
N------------------------------------
D  DEFINE /* Abbreviation: DEF */ -
N
NCLUSTER parameters
N------------------
NRequired parameters
N-------------------
D    CLUSTER( /* Abbreviation: CL */ -
I      CLUSTER defines or recatalogs a cluster or cluster entry.
N
I      The CLUSTER keyword is followed by the parameters specified for
I      the cluster as a whole. These parameters are enclosed in
I      parentheses and, optionally, are followed by parameters given
I      separately for the DATA and INDEX components.
N
D      NAME(entryname) -
I        The name of the CLUSTER component.
I
I        Defines the cluster's entryname or the name of each of its
I        components. The entryname used for the cluster as a whole is
I        not propagated to the cluster's components.
N
I        For SMS and non-SMS-managed clusters, the component names must
I        resolve to the same catalog as the data set's cluster name.
N
I        You can define a separate entryname for the cluster, its data
I        component, and its index component. If no name is specified for
I        the data and index component, a name is generated. When the
I        cluster, data component, and index component are individually
I        named, each can be addressed. For information on system
I        generated names, see z/OS DFSMS Using Data Sets.
N
I        When defining a VSAM volume data set (VVDS), the entryname for
I        the cluster or the data component must be in the form
I        SYS1.VVDS.Vvolser, where volser is the volume serial number
I        specified by the VOLUMES parameter. The default primary and
I        secondary allocation is 10 tracks. VVDSs cannot be defined in
I        cylinder-managed space. For information on defining a VVDS
I        see z/OS DFSMS Managing Catalogs.
N
NOptional parameters
N-------------------
D      CYLINDERS(primary secondary) | /* Abbreviation: CYL */ -
D      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -
D      MEGABYTES(primary secondary) | /* Abbreviation: MB */ -
D      RECORDS(primary secondary) | /* Abbreviation: REC */-
D      TRACKS(primary secondary) /* Abbreviation: TRK */ -
I        The amount of space in cylinders, kilobytes, megabytes,
I        records, or tracks allocated to the cluster from the volume's
I        available space. A kilobyte or megabyte allocation resolves to
I        either tracks or cylinders; record allocation resolves to
I        tracks.
N
I        If the override indicator in Data Class is set ON, the user
I        specified amount of space in DEFINE command will be overridden
I        by the space values specified in data Class. This enforces the
I        installation standard of the system.
N
I        Exception: If allocation resolves to tracks, the space is
I        contiguous. See "Optimizing Control Area Size" in z/OS DFSMS
I        Using Data Sets for more information.
N
I        Requests for space are directed to DADSM and result in a
I        format-1 DSCB for the all entries.
N
I        If the cluster is not SMS-managed, you must use the amount of
I        space allocated, either through this parameter, or through the
I        DATACLASS, MODEL, or RECATALOG parameters. This parameter is
I        optional if the cluster is managed by SMS. If it is used, it
I        overrides the DATACLASS space specification. If it is not used,
I        it can be modeled or defaulted by SMS. If it cannot be
I        determined, the DEFINE is unsuccessful.
N
I        If you select KILOBYTES or MEGABYTES, the amount of space
I        allocated is the minimum number of tracks or cylinders required
I        to contain the specified number of kilobytes or megabytes. The
I        maximum space can be specified with unit of KILOBYTES or
I        MEGABYTES is 16,777,215. If the amount requested exceeds this
I        value, you should specify a larger allocation unit.
N
I        If you select RECORDS, the amount of space allocated is the
I        minimum number of tracks that are required to contain the given
I        number of records. The maximum number of records is 16,777,215.
I        If RECORDS is specified for a linear data set, space is
I        allocated with the number of control intervals equal to the
I        number of records.
N
I        The maximum TRACKS or CYLINDERS value that can be specified on
I        the DEFINE CLUSTERS command is X'FFFFFF' or 16777215, because
I        of the 3 byte space parameter fields.
N
I        Recommendation: To maintain device independence, do not use the
I        TRACKS or CYLINDERS parameters. If you use them for an
I        SMS-managed data set, space is allocated on the volumes
I        selected by SMS in units equivalent to the device default
I        geometry. If there is an allocation failure due to lack of
I        space, SMS retries allocation with a reduced space quantity.
I        However, any retry, including reduced space quantity, is only
I        attempted if Space Constraint Relief = Y is specified. SMS
I        also removes other limitations if the data class allows space
I        constraint relief.
N
I        Regardless of the allocation type, the calculation of the CA
I        (control area) size is based on the smaller of the two
I        allocation quantities (primary or secondary) in the DEFINE
I        command. A CA is never greater than a single cylinder, it
I        might be less (that is, some number of tracks), depending on
I        the allocation amount and type used. When tracks or records
I        are used, the space allocation unit (the CA size) can be
I        adjusted to one cylinder. This adjustment is made if the
I        calculated CA size contains more tracks than exist in a single
I        cylinder of the device being used. The CA area size assigned by
I        VSAM is the smallest of:
N
I        -> One cylinder
N
I        -> The primary space quantity
N
I        -> The secondary space quantity
N
I        If the CA size assigned is not evenly divisible into either
I        the primary or secondary space quantity, VSAM increases that
I        space to a value evenly divisible by the CA size. If you are
I        defining an extended format data set, you should review
I        "Defining an Extended Format Key-Sequenced Data Set" in
I        z/OS DFSMS Using Data Sets for information about additional
I        space requirements. DEFINE RECORDS allocates sufficient space
I        to the specified number of records, but factors unknown at
I        define time (such as key compression or method of loading
I        records) can result in inefficient use of the space allocated.
I        This might prevent every data CA from being completely used,
I        and you might be unable to load the specified number of records
I        without requiring secondary allocation.
N
I        When multiple volumes are used for a data set, these rules and
I        conditions apply:
N
I        -> The first volume is defined as the prime volume. The initial
I           allocation of a data set is on the prime volume. The
I           remaining volumes are defined as candidate volumes.
N
I        -> A data set's primary space allocation (defined for each data
I           set) is the amount of space initially allocated on both the
I           prime volume and on any candidate volumes the data set
I           extends to.
N
I        -> A data set's secondary space allocation (if it is defined)
I           is the space allocated when the primary space is filled and
I           the data set needs additional space on the same volume.
N
I        -> If a data set extends to a candidate volume, the amount of
I           space initially allocated on the candidate volume is the
I           primary space allocation. If the data set extends beyond
I           the primary allocation on the candidate volume, then the
I           amount of space allocated is the secondary space allocation.
N
I        -> With a DEFINE request, the primary space allocation must be
I           fulfilled in not more than five DASD extents unless the
I           Space Constraint Relief option is specified in the
I           associated SMS data class.
N
I           However, the request is not successful if you do not fulfill
I           each secondary space allocation in five DASD extents. A DASD
I           extent is the allocation of one available area of contiguous
I           space on a volume. For example, if a data set's primary
I           space allocation is 100 cylinders, you must allocate a
I           maximum of five DASD extents that add up to 100 cylinders.
N
I        Secondary amounts can be allocated on all volumes available to
I        contain parts of the cluster regardless of the key ranges.
N
I        You can specify the amount of space as a parameter of CLUSTER,
I        as a parameter of DATA, or as a parameter of both. When a
I        key-sequenced cluster is being defined, and the space is a
I        parameter of:
N
I        -> CLUSTER, the amount is divided between the data and index
I           components. The division algorithm is a function of control
I           interval size, record size, device type, and other data set
I           attributes.
N
I           If the division results in an allocation for the data
I           component that is not an integral multiple of the required
I           control area size, the data component's allocation is
I           rounded up to the next higher control area multiple. This
I           rounding can result in a larger total allocation for your
I           cluster.
N
I        -> DATA, the entire amount specified is allocated to the data
I           component. An additional amount of space, depending on
I           control interval size, record size, device type, and other
I           data set attributes, is allocated to the index component.
N
I           Note: If not specified, SMS estimates the size of the index
I           component to be 10% of the data component. Ensure that
I           enough space is present on the volume(s) to account for
I           this estimation.
N
I        To determine the exact amount of space allocated to each
I        component, list the cluster's catalog entry, using the LISTCAT
I        command.
N
I        The primary and each secondary allocation must be able to be
I        satisfied in not more than five DASD extents; otherwise,
I        your DEFINE or data set extension is unsuccessful. Starting
I        with z/OS V1R13, if the primary or secondary space allocation
I        is 16777215 (X'FFFFFF') tracks or cylinders, the value is
I        decreased by 1 CA worth. This is because the AMS LISTCAT
I        command does not recognize all F's as a valid value and
I        prints a zero instead.
N
I        primary: Allocates the initial amount of space to the cluster.
N
I        secondary: Allocates an amount of space each time the cluster
I          extends, as a secondary extent. You can use this secondary
I          allocation to add space for the data or index components of
I          the cluster. A VSAM data set can be expanded to 123 extents
I          per volume. If this is a multi-volume VSAM data set, then
I          the VSAM component can be extended to a maximum of
I          255 extents combined over all volumes.
N
D      ACCOUNT(account-info) /* Abbreviation: ACCT */ -
I        Defines up to 32 bytes of accounting information and user data
I        for the data set. It must be between 1 and 32 bytes, otherwise
I        you will receive an error message.
N
I        account_info: Is only supported for SMS-managed VSAM and
I          non-VSAM data sets. It is only used for the data set level
I          (not member level) of PDSE/PDS.
N
D      BUFFERSPACE(size) /* Abbreviations: BUFSP or BUFSPC */ -
I        Provides the minimum space for buffers. VSAM determines the
I        data component's and index component's control interval size.
I        If you do not use BUFFERSPACE, VSAM provides enough space to
I        contain two data component control intervals and, if the data
I        is key-sequenced, one index component control interval.
N
I        size: is the buffer of space. You can use decimal (n),
I          hexadecimal (X'n'), or binary (B'n'). The size cannot be
I          less than enough space to contain two data component control
I          intervals and, if the data is key sequenced, one index
I          control interval.
N
I          If the buffer size is less than VSAM requires to run your
I          job, it will be treated as though the parameter was not
I          specified and the buffer size will be set to the default
I          value.
N
I          Exception: When you use RLS or DFSMStvs access, DFSMS ignores
I          BUFFERSPACE.
N
I          Note: The limitations of the bufferspace value on how many
I          buffers will be allocated is based on storage available in
I          your region, and other parameters or attributes of the data
I          set.
N
D      BWO(TYPECICS | TYPEIMS | NO) -
I        Use this parameter if backup-while-open (BWO) is allowed for
I        the VSAM sphere. BWO applies only to SMS data sets and cannot
I        be used with TYPE(LINEAR).
N
I        If BWO is specified in the SMS data class, the value defined is
I        used as the data set definition, unless it has been previously
I        defined with an explicitly specified or modeled DEFINE
I        attribute.
N
I        TYPECICS /* Abbreviation: TYPEC */: Use TYPECICS to specify
I          BWO in a CICS or DFSMStvs environment. For RLS processing,
I          this activates BWO processing for CICS, or DFSMStvs, or both.
I          For non-RLS processing, CICS determines whether to use this
I          specification or the specification in the CICS FCT. See the
I          CICS System Definition Guide.
N
I          Exception: If CICS determines that it will use the
I          specification in the CICS FCT, the specification might
I          override the TYPECICS or NO parameters.
N
I        TYPEIMS /* Abbreviation:TYPEI */: Use to enable BWO processing
I          for IMS data sets.
N
I        NO: Use this when BWO does not apply to the cluster.
N
I          Exception: If CICS determines that it will use definitions
I          in the CICS FCT, the TYPECICS or NO parameters might be
I          overwritten.
N
D      CONTROLINTERVALSIZE(size) /* Abbreviations: CISZ or CNVSZ */ -
I        Defines the size of the cluster's control intervals.
I        This depends on the maximum size of data records, and on the
I        amount of buffer space given. LSR/GSR buffering technique
I        users can ensure buffer pool selection by explicitly defining
I        data and index control interval sizes.
N
I        When you do not specify the control interval size, VSAM
I        determines the control interval size. If you have not specified
I        BUFFERSPACE and the size of your records permits, VSAM selects
I        the optimum size for the data control interval size and
I        512 bytes for the index control interval size.
N
I        size: The size of the cluster's data and index
I          components.
N
I          Because an cluster always has the spanned attribute,
I          the control interval size can be less than the maximum
I          record length. You can define a size from 512, to 8K in
I          increments of 512 or from 8K to 32K in increments of 2K
I          (where K is 1024 in decimal notation). If you use a size
I          that is not a multiple of 512 or 2048, VSAM chooses the
I          next higher multiple.
N
I          The index control interval should be large enough to
I          accommodate all of the compressed keys in a data control
I          area. If the index control interval size is too small,
I          unnecessary control area splits can occur. After the first
I          define (DEFINE), a catalog listing ( LISTC ) shows the number
I          of control intervals in a control area and the key length
I          of the data set. To make a general estimate of the index
I          control interval size needed, multiply one-half of the key
I          length (KEYLEN) by the number of data control intervals per
I          control area (DATA CI/CA):
N
I          (KEYLEN/2 ) * DATA CI/CA <= INDEX CISIZE
N
I          For information about the relationship between control
I          interval size and physical block size, see z/OS DFSMS Using
I          Data Sets for the relationship between control interval size
I          and physical block size. This document also includes
I          restrictions that apply to control interval size and
I          physical block size.
N
D      DATACLASS(class) /* Abbreviation: DATACLAS */ -
I        The 1 to 8 character name of the data class for the data set.
I        The DATACLASS parameter provides the allocation attributes for
I        new data sets. Your storage administrator defines the data
I        class. However, you can override the parameters defined for
I        DATACLASS by explicitly defining other attributes. Search
I        "Understanding the Order of Assigned Data Set Attributes" for
I        the order of precedence (filtering) the system uses to select
I        which attribute to assign. The record organization attribute
I        of DATACLASS is not used for DEFINE CLUSTER.
n
i        DATACLASS parameters apply to both SMS-managed and
I        non-SMS-managed data sets. If DATACLASS is used and SMS is
I        inactive, the DEFINE is unsuccessful.
N
D      EATTR(NO | OPT) -
I        A data set level attribute specifying whether a data set can
I        have extended attributes (format 8 and 9 DSCBs) and optionally
I        reside in EAS.
N
I        NO: No extended attributes. The data set can not have extended
I          attributes (format 8 and 9 DSCBs) and cannot reside in EAS.
I          This is the default behavior for non-VSAM data sets.
N
I        OPT: Extended attributes are optional. The data set can have
I          extended attributes (format 8 and 9 DSCBs) and can optionally
I          reside in EAS. This is the default behavior for VSAM data
I          sets.
N
I        DFSMS does not provide an actual default value for the EATTR
I        attribute. If an EATTR attribute is not specified on the DEFINE
I        command, in the SMS DATA CLASS, JCL, dynamic allocation
I        parameters or MODEL data set, the EATTR value is recorded as
I        not being specified in the attributes for the data set. For
I        VSAM files a not specified value is treated by the system as
I        if OPT was specified for EATTR.
N
I        For non-VSAM files a not specified value is treated by the
I        system as if NO was specified for EATTR. A not specified value
I        for EATTR is the setting for data sets created prior to EAS
I        support. When an EATTR attribute of not specified is
I        encountered during a DEFINE or end of volume (EOV) extend
I        processing, DFSMS internally performs the default action for
I        the data set type when creating the new extent location.
N
I        Search Appendix E, "DCOLLECT User Exit" and Appendix F,
I        "Interpreting DCOLLECT Output"  for collecting EATTR values
I        stored in the volume table of contents (VTOC) and SMS DATA
I        CLASS. The cataloged EATTR value is provided in DCOLLECT and
I        LISTCAT.
N
D      ERASE | NOERASE /* Abbreviations: ERAS and NERAS */-
I        indicates if the records of the cluster components are
I        erased when the cluster is deleted.
N
I        ERASE: Requires the records of the cluster components
I          are overwritten with binary zeros when the cluster
I          is deleted. If the base cluster of the cluster is
I          protected by a RACF generic or discrete profile and the base
I          cluster is cataloged in a catalog, you can use RACF commands
I          to specify an ERASE attribute as part of this profile so that
I          the component is automatically erased upon deletion.
N
I        NOERASE: Specifies that the records of the cluster
I          components are not to be overwritten with binary zeros.
I          NOERASE prevents the component from being erased if the base
I          cluster of the cluster is protected by a RACF
I          generic or discrete profile that specifies the ERASE
I          attribute and if the base cluster is cataloged in a catalog.
I          You can use RACF commands to alter the ERASE attribute in a
I          profile.
N
D      EXCEPTIONEXIT(entrypoint) /* Abbreviation: EEXT */ -
I        The name of your exception exit routine, that receives control
I        when an exceptional I/O error condition occurs during the
I        transfer of data between your program's address space and the
I        cluster's direct access storage space. (An exception
I        is any condition that causes a SYNAD exit to be taken.) The
I        component's exception exit routine is processed first; then
I        SYNAD exit routine receives control. If an exception exit
I        routine is loaded from an unauthorized library during access
I        method services processing, an abnormal termination occurs.
N
D      FILE(ddname) -
I        Names the DD statement that identifies the direct access
I        devices and volumes on which to allocate space to the alternate
I        index. If more than one volume is specified in a volume list,
I        all volumes must be the same device type.
N
I        When the data component and index component are to reside on
I        different devices, you can create a separate FILE parameter as
I        a parameter of DATA and INDEX to point to different DD
I        statements. If the FILE parameter is not used, an attempt is
I        made to dynamically allocate the required volumes. The volumes
I        must be mounted as permanently resident or reserved.
N
I        The DD statement you specify must be:
N
I          //ddname    DD DISP=OLD,
I          //             UNIT=(devtype,count),VOL=SER=(volser1,...)
N
I        Restriction: When FILE refers to more than one volume of the
I        same device type, the DD statement that describes the volumes
I        cannot be a concatenated DD statement.
N
D      FREESPACE(CI-% CA-% | 0 0) /* Abbreviation: FSPC */ -
I        Designates the amount of empty space left after any primary or
I        secondary allocation and any split of control intervals
I        (CI-percent) and control areas (CA-percent) when the alternate
I        index is built (search Chapter 8, "BLDINDEX"). The empty space
I        in the control interval and control area is available for data
I        records that are updated and inserted after the alternate
I        index is initially built. The amounts are specified as
I        percentages. CI-percent translates into a number of bytes that
I        is either equal to, or slightly less than, the percentage
I        value of CI-percent. CA-percent translates into a number of
I        control intervals that is either equal to, or less than, the
I        percentage of CA-percent.
N
I        The percentages must be equal to, or less than, 100. When you
I        use 100% of free space, one data record is placed in the first
I        control interval of each control area when the cluster
I        is built.
N
D      FRLOG(ALL |NONE | REDO | UNDO) -
I        Specifies if VSAM batch logging can be performed for your VSAM
I        data set. VSAM batch logging is available with CICS VSAM
I        Recovery V3R1.
N
I        There is no default value for FRLOG. If FRLOG is left out, the
I        data set cannot be used for VSAM batch logging. See the ALTER
I        command for enabling VSAM batch logging after a data set is
I        created.
N
I        ALL: Enables the changes made to your VSAM data set to be both
I          backed out and forward recovered using the VSAM logging. The
I          LOGSTREAMID parameter indicates the changes that are made by
I          applications that are written to the MVS log stream. When
I          specifying FRLOG(ALL), you must also specify LOGSTREAMID.
N
I        NONE: Indicates that the data set can be used for VSAM batch
I          logging. However, the function should be disabled. The
I          LOGSTREAMID parameter indicates changes that are made by
I          applications that are written to the MVS log stream.
I          Specifying FRLOG(NONE) implies that you may use the data set
I          for RLS processing; omitting it indicates that RLS processing
I          will not occur.
N
I        REDO: Enables the VSAM batch logging function for your VSAM
I          data set. The LOGSTREAMID parameter indicates changes that
I          are made by applications that are written to the MVS log
I          stream. When specifying FRLOG(REDO), you must also specify
I          LOGSTREAMID.
N
I        UNDO: Enables the changes made to your VSAM data set to be
I          backed out using the VSAM logging. The LOGSTREAMID parameter
I          indicates changes that are made by applications that are
I          written to the MVS log stream. When specifying FRLOG(UNDO),
I          you must also specify LOGSTREAMID.
N
I          Restrictions:
N
I          -> If you do not want VSAM batch logging for your data set,
I             do not specify the FRLOG parameter. If you specify
I             FRLOG(NONE), the data set must support VSAM batch logging,
I             but logging is not in effect.
N
I          -> If FRLOG is specified, the data set:
N
I            -> Must be SMS-managed
N
I            -> Cannot be LINEAR or a temporary data set
N
D      INDEXED | LINEAR | NONINDEXED | NUMBERED -
D        /* Abbreviations: IXD, LIN, NIXD, and NUMD */ -
I        Specifies the type of data organization for the cluster.
N
I        If you want a data organization other than INDEXED (the
I        default), you must explicitly use it with this parameter.
N
I        When a cluster is defined, you indicate whether the data is to
I        be indexed (key-sequenced), nonindexed (entry-sequenced),
I        numbered (relative record), or linear.
N
I        Certain parameters apply only to key-sequenced clusters, as
I        noted in the description of each of these parameters.
N
I        Linear data set clusters are treated as ESDS clusters that must
I        be processed using control interval access.
N
I        If you do not choose either the data organization or the MODEL
I        parameter, your cluster defaults to key-sequenced (indexed).
N
I        If you want to define an entry-sequenced or a relative record
I        cluster, you must specify the NONINDEXED, the NUMBERED, or the
I        MODEL parameter.
N
I        The data organization you select must be consistent with other
I        parameters you specify.
N
I        INDEXED /* Abbreviation: IXD */: Shows that the cluster being
I          defined is for key-sequenced data. If INDEXED is specified,
I          an index component is automatically defined and cataloged.
I          The data records can be accessed by key or by relative-byte
I          address (RBA).
N
I        LINEAR /* Abbreviation: LIN */: Specifies that the cluster
I          being defined is for linear data. Because linear data set
I          clusters are treated as ESDS clusters that must be processed
I          using control interval access, you can use most of the
I          commands and parameters you use to manipulate ESDS clusters.
I          There are two exceptions:
N
I          -> Parameters that refer to logical records are not allowed
I             (except RECORDS).
N
I          -> Use partial printing by specifying the RBA syntax. Space
I             is allocated for a linear data set with the number of
I             control intervals equal to the number of records. Linear
I             data sets cannot be accessed for RLS processing. The LOG,
I             LOGSTREAMID, and BWO parameters do not apply to linear
I             data sets.
N
I          Restriction: Linear data sets cannot be accessed for
I          VSAM RLS or DFSMStvs processing. The LOG, LOGSTREAMID,
I          and BWO parameters do not apply to linear data sets.
N
I        NONINDEXED /* Abbreviation: NIXD */: Indicates that the cluster
I          being defined is for entry-sequenced data. The data records
I          can be accessed sequentially or by relative-byte address
I          (RBA).
N
I        NUMBERED /* Abbreviation: NUMD */: Specifies that the cluster's
I          data organization is for relative record data. A relative
I          record cluster, which is similar to an entry-sequenced
I          cluster, has fixed-length records or variable-length records
I          that are stored in slots. The RECORDSIZE parameter
I          determines if the records are fixed-length or variable-length.
I          Empty slots hold space for records to be added later. The
I          data records are accessed by relative record number (slot
I          number).
N
D      KEYS(length offset | 64 0) -
I        Describes the alternate-key field in the base cluster's data
I        record.
N
I        The key field of an cluster is called an alternate key.
I        The data record's alternate key can overlap or be contained
I        entirely within another (alternate or prime) key field.
N
I        The length plus offset cannot be greater than the length of
I        the base cluster's data record.
N
I        When the base cluster's data record spans control intervals,
I        the record's alternate-key field is within the record's first
I        segment (that is, in the first control interval).
N
I        length offset: Gives the length of the alternate key, in bytes,
I          and its displacement from the beginning of the base cluster's
I          data record, in bytes.
N
D      LOG(NONE | UNDO | ALL) -
I        Establishes whether the sphere to be accessed with VSAM
I        record-level sharing (RLS) or DFSMStvs is recoverable or
I        non-recoverable. It also indicates whether or not forward
I        recovery logging should be performed for the data set. LOG
I        applies to all components in the VSAM sphere. VSAM uses LOG
I        in the following way:
N
I          Nonrecoverable Sphere
I          ---------------------
I            The sphere is considered nonrecoverable if LOG(NONE) is
I            specified. VSAM allows concurrent read and update sharing
I            across multiple resource managers and other applications.
N
I          Recoverable Sphere
I          ------------------
I            The sphere is considered recoverable if LOG(UNDO) or
I            LOG(ALL) is specified. For a recoverable sphere, VSAM
I            does not allow applications that do not support commit
I            and backout to open a data set in the sphere for output
I            using RLS access, but applications can open the sphere
I            for output using DFSMStvs access. The applications can,
I            however, open the sphere for RLS access for input
I            processing only.
N
I          If LOG is specified in the SMS data class, the value defined
I          is used as the data set definition, unless it has been
I          previously defined with an explicitly specified or modeled
I          DEFINE attribute. LOG cannot be used with LINEAR. LOGSTREAMID
I          cannot be used with LINEAR.
N
I        NONE: Indicates that neither an external backout nor a forward
I          recovery capability is available for the sphere accessed in
I          VSAM RLS or DFSMStvs mode. If you use LOG(NONE), RLS and
I          DFSMStvs consider the sphere to be nonrecoverable.
N
I        UNDO: Specifies that changes to the sphere accessed in
I          VSAM RLS or DFSMStvs mode can be backed out using an external
I          log. RLS and DFSMStvs consider the sphere to be recoverable
I          when you use LOG(UNDO).
N
I        ALL: Specifies that changes to the sphere accessed in RLS and
I          DFSMStvs mode can be backed out and forward recovered using
I          external logs. DFSMStvs and RLS consider the sphere
I          recoverable when you use LOG(ALL). When you specify LOG(ALL),
I          you must also specify the LOGSTREAMID parameter.
N
I          VSAM RLS and DFSMStvs allow concurrent read or update sharing
I          for nonrecoverable spheres through commit (CICS) and
I          noncommit protocol applications. For a recoverable sphere,
I          a noncommit protocol application must use DFSMStvs to be
I          able to open the sphere for update using RLS access.
N
D      LOGSTREAMID(logstream) /* Abbreviation:LSID */ -
I        Gives the name of the forward recovery log stream. It applies
I        to all components in the VSAM sphere.
N
I        If LOGSTREAMID is specified in the SMS data class, the value
I        defined is used as the data set definition, unless it has been
I        previously defined with an explicitly specified or modeled
I        DEFINE attribute.
N
I        logstream: The name of the forward recovery log stream. This
I          can be a fully qualified name up to 26 characters, including
I          separators. If LOG(ALL) is specified, LOGSTREAMID(name) must
I          be specified.
N
I          For information about defining log streams for CICS use, see
I          CICS and VSAM Record Level Sharing: Implementation Guide and
I          z/OS DFSMStvs Administration Guide.
N
D      MANAGEMENTCLASS(class) /* Abbreviation:MGMTCLAS */ -
I        For SMS-managed data sets: Specifies the name, 1-to-8
I        characters, of the management class for a new data set. Your
I        storage administrator defines the names of the management
I        classes you can use. If MANAGEMENTCLASS is not used, but
I        STORAGECLASS is used or defaulted, MANAGEMENTCLASS is derived
I        from automatic class selection (ACS). If MANAGEMENTCLASS is
I        specified and STORAGECLASS is not specified or derived, the
I        DEFINE is unsuccessful. If SMS is inactive and MANAGEMENTCLASS
I        is specified, the DEFINE will be unsuccessful. MANAGEMENTCLASS
I        cannot be listed as a subparameter of DATA or INDEX.
N
D      MODEL(entryname catname) -
I        Specifies an existing entry to be used as a model for the entry
I        being defined. Search "Understanding the Order of Assigned Data
I        Set Attributes" for information on how the system selects
I        modeled attributes.
N
I        A VVDS cannot be modeled.
N
I        DATACLASS, MANAGEMENTCLASS, and STORAGECLASS attributes are
I        not modeled.
N
I        You can use an existing cluster's entry as a model for the
I        attributes of the cluster being defined. For details about how
I        a model is used, see z/OS DFSMS Managing Catalogs.
N
I        You can use some attributes of the model and override others
I        by explicitly specifying them in the definition of the cluster
I        or component. If you do not want to add or change any
I        attributes, you need specify only the entry type (cluster,
I        data, or index) of the model to be used and the name of the
I        entry to be defined.
N
I        Search "Understanding the Order of Assigned Data Set
I        Attributes" for more information about the order in which the
I        system selects an attribute. When you use a cluster entry as
I        a model for the cluster, the data and index entries of the
I        model cluster are used as models for the data and index
I        components of the cluster still to be defined, unless another
I        entry is specified with the MODEL parameter as a subparameter
I        of DATA or INDEX.
N
I        entryname: specifies the name of the cluster or component entry
I          to be used as a model.
N
D      OWNER(ownerid) -
I        Gives the identification of the cluster's owner.
N
I        For TSO/E users, if the OWNER parameter does not identify the
I        owner, the TSO/E user's userid becomes the ownerid value.
N
D      RECATALOG | NORECATALOG /* Abbreviations: RCTLG and NRCTLG */ -
I        Specifies whether the catalog entries for the cluster
I        components are re-created from information in the VVDS.
N
I        RECATALOG /* Abbreviation: RCTLG */: Recreates the catalog
I          entries if valid VVDS entries are found on the primary VVDS
I          volume. If not, the command ends.
N
I          Use of RECATALOG requires that the NAME, RELATE, and VOLUMES
I          parameters be specified as they were when the cluster
I          was originally defined. If you use RECATALOG, you are not
I          required to include CYLINDERS, RECORDS, or TRACKS.
N
I          If ATTEMPTS, AUTHORIZATION, CATALOG, CODE, MODEL, NOUPGRADE,
I          or OWNER parameters were used during the original define,
I          they must be entered again with RECATALOG to restore their
I          original values; otherwise, their default values are used.
N
I        NORECATALOG /* Abbreviation: NRCTLG */: Specifies that the
I          catalog entries are not to be re-created from VVDS entries.
I          Catalog entries are created for the first time.
N
D      RECORDSIZE(average maximum | 4086 32600) -
D      /* Abbreviation: RECSZ */ -
I        Specifies the average and maximum lengths, in bytes, of the
I        records in the data component. The minimum record size is
I        1 byte.
N
I        RECORDSIZE can be given as a parameter of either CLUSTER or
I        DATA. This parameter overrides the LRECL specification on the
I        DATACLASS parameter.
N
I        For nonspanned records, the maximum record size + 7 cannot
I        exceed the data component's control interval size (that is,
I        the maximum nonspanned record size, 32761, + 7 equals the
I        maximum data component control interval size, 32768).
N
I        When you use a record size that is larger than one control
I        interval, you must also specify spanned records (SPANNED).
I        The formula for the maximum record size of spanned records as
I        calculated by VSAM is as follows:
N
I        MAXLRECL = CI/CA * (CISZ - 10)
N
I        where:
N
I        -> MAXLRECL is the maximum spanned record size.
N
I        -> CI/CA represents the number of control intervals per
I           control area.
N
I        -> CISZ is the control interval size.
N
I        When you select NUMBERED, you identify a data set as a relative
I        record data set. If you use NUMBERED and select the same value
I        for average as for maximum, the relative records must be
I        fixed-length. If you specify NUMBERED and select two different
I        values for the average and maximum record sizes, the relative
I        records can be variable-length. If you know that your relative
I        records are fixed-length, however, be sure to define them as
I        fixed-length. Performance is affected for relative record data
I        sets defined as variable-length. Each variable-length relative
I        record is increased internally in length by four.
N
I        When your records are fixed length, you can use the following
I        formula to find a control interval size that contains a whole
I        number (n) of records:
N
I        CISZ = (n x RECSZ) + 10
N
I        or
N
I        n = (CISZ - 10) / RECSZ
N
I        where:
N
I        -> n is the number of fixed-length records in a control
I           interval.
N
I        -> CISZ is the control interval size (see also the
I           CONTROLINTERVALSIZE parameter).
N
I        -> RECSZ is the average record size.
N
I        default: When SPANNED is used, the default is
I          RECORDSIZE(4086 32600).  Otherwise, the default is
I          RECORDSIZE(4089 4089).
N
I        Example:
N
I        REC(sec) x RECSZ(avg) > RECSZ(max)
N
I        where:
N
I        -> REC(sec) is the secondary space allocation quantity, in
I           records.
N
I        -> RECSZ(avg) is the average record size (default = 4086 or
I           4089 bytes).
N
I        -> RECSZ(max) is the maximum record size (default = 4089 or
I           32600 bytes).
N
I        When the SPANNED record size default prevails (32600 bytes),
I        the secondary allocation quantity should be at least 8 records.
N
I        Restriction: With REPRO and EXPORT, you cannot use data sets
I        with record sizes greater than 32760.
N
D      REUSE | NOREUSE /* Abbreviations: RUS and NRUS */ -
I        Indicates whether or not the cluster can be used again
I        as a new cluster.
N
I        REUSE /* Abbreviation: RUS */: Indicates that the alternate
I          index can be used over again as a new cluster. When
I          a reusable cluster is opened, its high-used RBA can
I          be set to zero. Open it with an access control block using
I          the RESET attribute.
N
I          When you use BLDINDEX to build a reusable cluster,
I          the high-used RBA is always reset to zero when the alternate
I          index is opened for BLDINDEX processing.
N
I          Reusable clusteres can be multivolumed and might have
I          up to 123 physical extents.
N
I          Exception: If you use the keyword UNIQUE with REUSE, the
I          DEFINE command is unsuccessful.
N
I        NOREUSE /* Abbreviation: NRUS */: Specifies that the alternate
I          index cannot be used again as a new cluster.
N
D      SHAREOPTIONS(crossregion crosssystem | 1 3) -
D        /* Abbreviation: SHR */ -
I        Specifies how an cluster's data or index component can
I        be shared among users. However, SMS-managed volumes, and
I        catalogs containing SMS-managed data sets, must not be shared
I        with non-SMS systems. For data integrity, ensure that share
I        options defined for data and index components are the same.
I        For a description of data set sharing, see z/OS DFSMS Using
I        Data Sets.
N
I        crossregion: Indicates the amount of sharing allowed among
I          regions within the same system or within multiple systems
I          using global resource serialization (GRS). Independent job
I          steps in an operating system, or multiple systems in a GRS
I          ring, can access a VSAM data set concurrently. For more
I          information about GRS, see z/OS MVS Planning: Global Resource
I          Serialization. To share a data set, each user must include
I          DISP=SHR in the data set's DD statement. You can use the
I          following options:
N
I        1: The data set can be shared by any number of users for read
I           processing, or the data set can be accessed by only one user
I           for read and write processing. This setting does not allow
I           any non-RLS access when the data set is already open for
I           VSAM RLS or DFSMStvs processing. An RLS or DFSMStvs open
I           fails with this option if the data set is already open for
I           any processing.
N
I        2: The data set can be accessed by any number of users for read
I           processing, and it can also be accessed by one user for
I           write processing. It is the user's responsibility to provide
I           read integrity. VSAM ensures write integrity by obtaining
I           exclusive control for a control interval while it is being
I           updated. A VSAM RLS or DFSMStvs open is not allowed while
I           the data set is open for non-RLS output.
N
I           If the data set has already been opened for VSAM RLS or
I           DFSMStvs processing, a non-RLS open for input is allowed;
I           a non-RLS open for output fails. If the data set is opened
I           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is
I           allowed.
N
I        3: The data set can be fully shared by any number of users. The
I           user is responsible for maintaining both read and write
I           integrity for the data the program accesses. This setting
I           does not allow any non-RLS access when the data set is
I           already open for VSAM RLS or DFSMStvs processing. If the
I           data set is opened for input in non-RLS mode, a VSAM RLS or
I           DFSMStvs open is allowed.
N
I           This option is the only one applicable to a catalog.
N
I        4: The data set can be fully shared by any number of users. For
I           each request, VSAM refreshes the buffers used for direct
I           processing. This setting does not allow any non-RLS access
I           when the data set is already open for VSAM RLS or DFSMStvs
I           processing. If the data set is opened for input in non-RLS
I           mode, a VSAM RLS or DFSMStvs open is allowed.
N
I           As in SHAREOPTIONS 3, each user is responsible for
I           maintaining both read and write integrity for the data the
I           program accesses.
N
I        crosssystem: Specifies the amount of sharing allowed among
I          systems. Job steps of two or more operating systems can gain
I          access to the same VSAM data set regardless of the
I          disposition specified in each step's DD statement for the
I          data set. However, if you are using GRS across systems or
I          JES3, the data set might not be shared depending on the
I          disposition of the system.
N
I          To get exclusive control of the data set's volume, a task
I          in one system issues the RESERVE macro. The level of
I          cross-system sharing allowed by VSAM applies only in a
I          multiple operating system environment.
N
I          The cross-system sharing options are ignored by VSAM RLS or
I          DFSMStvs processing. The values are:
N
I          1: Reserved.
N
I          2: Reserved.
N
I          3: Specifies that the data set can be fully shared. Each
I             user is responsible for maintaining both read and write
I             integrity for the data that user's program accesses. User
I             programs that ignore write integrity guidelines can result
I             in:
N
I            -> VSAM program checks
N
I            -> Uncorrectable data set errors
N
I            -> Unpredictable results
N
I            The RESERVE and DEQ macros are required with this option
I            to maintain data set integrity. (See z/OS MVS Programming:
I            Authorized Assembler Services Reference ALE-DYN and
I            z/OS MVS Programming: Authorized Assembler Services
I            Reference LLA-SDU for information on using RESERVE and DEQ.)
I            If the sphere is accessed using VSAM RLS or DFSMStvs
I            protocols, VSAM RLS maintains the required integrity.
N
I          4: Specifies that the data set can be fully shared. For each
I             request, VSAM refreshes the buffers used for direct
I             processing. This option requires that you use the RESERVE
I             and DEQ macros to maintain data integrity while sharing
I             the data set. Improper use of the RESERVE macro can cause
I             problems similar to those described under SHAREOPTIONS 3.
I             (See z/OS MVS Programming: Authorized Assembler Services
I             Reference ALE-DYN and z/OS MVS Programming: Authorized
I             Assembler Services Reference LLA-SDU for information on
I             using RESERVE and DEQ.) Output processing is limited to
I             update, or add processing, or both that does not change
I             either the high-used RBA or the RBA of the high key data
I             control interval if DISP=SHR is used.
N
I            To ensure data integrity in a shared environment, VSAM
I            provides users of SHAREOPTIONS 4 (cross-region and
I            cross-system) with the following assistance:
N
I            -> Each PUT writes the appropriate buffer immediately into
I               the VSAM object's DASD. VSAM writes out the buffer in
I               the user's address space that contains the new or
I               updated data record.
N
I            -> Each GET refreshes the user's input buffers. The
I               contents of each data and index buffer used by the
I               user's program is retrieved from the VSAM object's DASD.
N
I            Exception: If you use VSAM RLS or DFSMStvs, SHAREOPTIONS
I            is assumed to be (3,3). If you do not use VSAM RLS or
I            DFSMStvs, the SHAREOPTIONS specification is respected.
N
D      SPANNED | NONSPANNED /* Abbreviation: SPND and NSPND */-
I        Specifies whether a data record is allowed to cross control
I        interval boundaries.
N
I        If SPANNED or NONSPANNED is specified in the SMS data class,
I        the value defined is used as the data set definition, unless
I        it has been previously defined with an explicitly specified
I        or modeled DEFINE attribute.
N
I        This parameter cannot be used when defining a linear data set
I        cluster.
N
I        SPANNED /* Abbreviation: SPND */: Specifies that, if the
I          maximum length of a data record (as specified with
I          RECORDSIZE) is larger than a control interval, the record is
I          contained on more than one control interval. This allows
I          VSAM to select a control interval size that is optimum for
I          the DASD.
N
I          When a data record that is larger than a control interval
I          is put into a cluster that allows spanned records, the first
I          part of the record completely fills a control interval.
I          Subsequent control intervals are filled until the record is
I          written into the cluster. Unused space in the record's last
I          control interval is not available to contain other data
I          records.
N
I          Using this parameter for a Variable-Length or a Fixed-Length
I          Relative Record Data Set causes an error.
N
I        NONSPANNED /* Abbreviation: NSPND */: Indicates that the record
I          must be contained in one control interval. VSAM selects a
I          control interval size that accommodates your largest record.
N
D      SPEED | RECOVERY /* Abbreviation: RCVY */ -
I        Specifies whether the data component's control areas are to be
I        preformatted during loading.
N
I        This parameter is only considered during the actual loading
I        (creation) of a data set. Creation occurs when the data set is
I        opened and the high-used RBA is equal to zero. After normal
I        CLOSE processing at the completion of the load operation, the
I        physical structure of the data set and the content of the data
I        set extents are exactly the same, regardless of which option is
I        used. Any processing of the data set after the successful load
I        operation is the same, and the specification of this parameter
I        is not considered.
N
I        If you use RECOVERY, the initial load takes longer because the
I        control areas are first written with either empty or software
I        end-of-file control intervals. These preformatted control
I        intervals are then updated, using update writes with the data
I        records. When SPEED is used, the initial load is faster.
N
I        SPEED: Does not preformat the data component's space.
N
I          If the initial load is unsuccessful, you must load the data
I          set again from the beginning because VSAM cannot determine
I          the location of your last correctly written record. VSAM
I          cannot find a valid end-of-file indicator when it searches
I          your data records.
N
I        RECOVERY /* Abbreviation: RCVY */: Does preformat the data
I          component's space prior to writing the data records.
N
I          If the initial load is unsuccessful, VSAM can determine the
I          location of the last record written during the load process.
N
D      STORAGECLASS(class) /* Abbreviation: STORCLAS */ -
I        For SMS-managed data sets: Gives the name, 1-to-8 characters
I        of the storage class.
N
I        Your storage administrator defines the names of the storage
I        classes you can use. A storage class is assigned either when
I        you use STORAGECLASS, or an ACS routine selects a storage class
I        for the new data set. The storage class provides the storage
I        attributes that are specified on the UNIT and VOLUME operand
I        for non-SMS managed data sets. Use the storage class to select
I        the storage service level to be used by SMS for storage of the
I        data set. If SMS is inactive and STORAGECLASS is used, the
I        DEFINE will be unsuccessful.
N
I        STORAGECLASS cannot be selected as a subparameter of DATA
I        or INDEX.
N
D      TO(date) | FOR(days) -
I        Specifies the retention period for the cluster being defined.
I        If neither TO nor FOR is used, the cluster can be deleted at
I        any time. The MANAGEMENTCLASS maximum retention period, if
I        selected, limits the retention period specified by this
I        parameter.
N
I        For non-SMS-managed data sets, the correct retention period is
I        reflected in the catalog entry. The VTOC entry cannot contain
I        the correct retention period.
N
I        Enter a LISTCAT command for the correct expiration date.
N
I        For SMS-managed data sets, the expiration date in the catalog
I        is updated and the expiration date in the format-1 DSCB is
I        changed. If the expiration date in the catalog does not agree
I        with the expiration date in the VTOC, the VTOC entry overrides
I        the catalog entry.
N
I        TO(date): Specifies the earliest date that a command without
I          the PURGE parameter can delete an entry. Specify the
I          expiration date in the form yyyyddd, where yyyy is a
I          four-digit year (to a maximum of 2155) and ddd is the
I          three-digit day of the year from 001 through 365
I          (for non-leap years) or 366 (for leap years).
N
I          The following four values are "never-expire" dates:
I          99365, 99366, 1999365, and 1999366. Specifying a
I          "never-expire" date means that the PURGE parameter will
I          always be required to delete an entry. For related
I          information, see the "EXPDT Parameter" section of
I          z/OS MVS JCL Reference, SA22-7597.
N
I          Note: Specifying the current date as the expiration date will
I          make an entry eligible for deletion.
N
I        FOR(days): Specifies the number of days you want to keep the
I          cluster being defined. The maximum number is 93000. If the
I          number is 0 through 92999 (except for 9999), the entry is
I          retained for the number of days indicated. If the number is
I          either 9999 or 93000, the entry is retained indefinitely.
I          There is a hardware imposed expiration date of 2155.
N
D      VOLUMES(volser volser...) /* Abbreviation: VOL */ -
I        Specifies the volumes on which an cluster's components
I        are to have space. This parameter is not required if the
I        cluster is modeled or if the cluster is SMS-managed. You can
I        specify VOLUMES for SMS-managed data sets; however, the volumes
I        specified might not be used and, in some cases, can result in
I        an error.
n
I        For SMS-managed data sets, you can use up to 59 volumes. If the
I        combined number of volumes for a cluster and its associated
I        clusteres exceeds 59, unpredictable results can occur.
n
I        You can let SMS choose the volumes for SMS-managed data sets by
I        coding an * for the volser with the VOLUMES parameter. If both
I        user-specified and SMS-specified volumes are requested, the
I        user-specified volser must be input first in the command
I        syntax. The default is one volume.
N
I        If you do not use the MODEL parameter, VOLUMES must be placed
I        as a parameter of CLUSTER, or as a parameter of both
I        DATA and INDEX.
N
I        If the data and index components are to reside on different
I        device types, you must include VOLUMES as a parameter of both
I        DATA and INDEX. If more than one volume is listed with a single
I        VOLUMES parameter, the volumes must be the same device type.
N
I        You can repeat a volume serial number in the list only if you
I        use the KEYRANGE parameter. This can place more than one key
I        range on the same volume. However, repetition is valid only if
I        all duplicate occurrences are used for the primary allocation
I        of some key range.
N
M          You are not allowed to specify KEYRANGE.
N
I        The VOLUMES parameter interacts with other
I        DEFINE CLUSTER parameters. Ensure that the volumes you
I        define for the cluster are consistent with the
I        cluster's other attributes:
N
I        -> CYLINDERS, RECORDS, TRACKS: The volumes contain enough
I           available space to satisfy the component's primary space
I           requirement.
N
I        -> FILE: To define an cluster, the volume information
I           supplied with the DD statement pointed to by FILE must be
I           consistent with the information listed for the alternate
I           index and its components.
N
D      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */ -
I        Determines whether an cluster or component is checked
I        by a machine action called write-check when a record is written
I        into it.
N
I        WRITECHECK /* Abbreviation: WCK */: Indicates that a record is
I          written and then read, without data transfer, to test for the
I          data check condition.
N
I          Exception: When you use VSAM RLS or DFSMStvs access, the
N          WRITECHECK parameter is ignored.
N
I        NOWRITECHECK /* Abbreviation: NWCK */: Does not write-check the
I          cluster or component. checked by a write check.
N
D    ) -
NDATA parameters
N---------------
D    DATA( -
D      CYLINDERS(primary secondary) | /* Abbreviation: CYL */ -
D      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -
D      MEGABYTES(primary secondary) | /* Abbreviation: MB */ -
D      RECORDS(primary secondary) | /* Abbreviation: REC */-
D      TRACKS(primary secondary) /* Abbreviation: TRK */ -
I        The amount of space in cylinders, kilobytes, megabytes,
I        records, or tracks allocated to the cluster from the
I        volume's available space. A kilobyte and megabyte allocation
I        resolves to either tracks or cylinders; records are allocated
I        to the nearest track boundary. Exception: If allocation
I        resolves to tracks, the space is contiguous. For more
I        information, see "Optimizing Control Area Size" in
I        z/OS DFSMS Using Data Sets.
N
I        Requests for space are directed to DADSM and result in a
I        format-1 DSCB for the data and index component entries.
N
I        If you do not use the MODEL parameter or the RECATALOG
I        parameter, you must include one, and only one, of these
I        parameters: CYLINDERS, KILOBYTES, MEGABYTES, RECORDS, or
I        TRACKS.
N
I        The space parameter is optional if the cluster is SMS-managed,
I        but if you do not use it, space can be modeled or defaulted by
I        SMS. If it is not determined, the DEFINE is unsuccessful. The
I        maximum space can be specified with unit of KILOBYTES or
I        MEGABYTES is 16,777,215. If the amount requested exceeds this
I        value, you should specify a different larger allocation unit.
N
I        To maintain device independence, do not use the TRACKS or
I        CYLINDERS parameters. If you do not use TRACKS or CYLINDERS
I        for an SMS-managed cluster, space is allocated on the
I        volume selected by SMS.
N
M          These days the only mainframe DASD devices in use are
M          likely to be 3390 and thus the caution about device
M          independence is no longer applicable. If you have something
M          else it is way past time to migrate to the current geometry.
N
I        When you do not divide the data component into key ranges, and
I        more than one volume is given, the primary amount of space is
I        allocated only on the first volume when the component is
I        defined. When the component increases to extend to additional
I        volumes, the first allocation on each overflow volume is the
I        primary amount.
N
M          Since you can no longer specify KEYRANGE the above paragraph
I          should be modified by IBM.
N
I        Secondary amounts can be allocated on all volumes available to
I        contain parts of the cluster, regardless of the key
I        ranges when the cluster is extended.
N
I        You can include the amount of space as a parameter of
I        CLUSTER, as a parameter of DATA, or as a parameter of
I        both DATA and INDEX.
N
I        -> If the space is specified as a parameter of CLUSTER,
I           the amount specified is divided between the data and index
I           components. The division algorithm is a function of control
I           interval size, record size, device type, and other data set
I           attributes.
N
I           If the division results in an allocation for the data
I           component that is not an integral multiple of the required
I           control area size, the data component's allocation is
I           rounded up to the next higher control area multiple. This
I           rounding can result in a larger total allocation for your
I           cluster than what you specified.
N
I           If the space is specified as a parameter of DATA, the entire
I           amount given is allocated to the data component. An
I           additional amount of space, depending on control interval
I           size, record size, device type, and other data set
I           attributes, is allocated to the index component.
N
I        To determine the exact amount of space allocated to each
I        component, list the cluster's catalog entry, using
I        the LISTCAT command.
N
I        The primary and each secondary allocation must be able to be
I        satisfied within five extents; otherwise, your DEFINE or data
I        set extension is unsuccessful. You can use these keywords for
I        both SMS managed and non-SMS-managed data sets.
N
I        primary: Allocates the initial amount of space to the
I        cluster.
N
I        secondary: Allocates the amount of space each time the
I        cluster extends, as a secondary extent. If the
I        secondary space allocation is greater than 4.0 gigabytes, it
I        is reduced to an amount as close to 4.0 GB as possible,
I        without going over. This is not true for extended
I        addressability data sets, which have no such space limitation.
I        When you use secondary, space for the cluster's data
I        and index components can be expanded to a maximum of
I        123 extents.
N
D      BUFFERSPACE(size) /* Abbreviations: BUFSP or BUFSPC */ -
I        Provides the minimum space for buffers. VSAM determines the
I        data component's and index component's control interval size.
I        If you do not use BUFFERSPACE, VSAM provides enough space to
I        contain two data component control intervals and, if the data
I        is key-sequenced, one index component control interval.
N
I        size: is the buffer of space. You can use decimal (n),
I          hexadecimal (X'n'), or binary (B'n'). The size cannot be
I          less than enough space to contain two data component control
I          intervals and, if the data is key sequenced, one index
I          control interval.
N
I          If the buffer size is less than VSAM requires to run your
I          job, it will be treated as though the parameter was not
I          specified and the buffer size will be set to the default
I          value.
N
I          Exception: When you use RLS or DFSMStvs access, DFSMS ignores
I          BUFFERSPACE.
N
I          Note: The limitations of the bufferspace value on how many
I          buffers will be allocated is based on storage available in
I          your region, and other parameters or attributes of the data
I          set.
N
D      CONTROLINTERVALSIZE(size) /* Abbreviations: CISZ or CNVSZ */ -
I        Defines the size of the cluster's control intervals.
I        This depends on the maximum size of data records, and on the
I        amount of buffer space given. LSR/GSR buffering technique
I        users can ensure buffer pool selection by explicitly defining
I        data and index control interval sizes.
N
I        When you do not specify the control interval size, VSAM
I        determines the control interval size. If you have not specified
I        BUFFERSPACE and the size of your records permits, VSAM selects
I        the optimum size for the data control interval size and
I        512 bytes for the index control interval size.
N
I        size: The size of the cluster's data and index
I          components.
N
I          Because an cluster always has the spanned attribute,
I          the control interval size can be less than the maximum
I          record length. You can define a size from 512, to 8K in
I          increments of 512 or from 8K to 32K in increments of 2K
I          (where K is 1024 in decimal notation). If you use a size
I          that is not a multiple of 512 or 2048, VSAM chooses the
I          next higher multiple.
N
I          The index control interval should be large enough to
I          accommodate all of the compressed keys in a data control
I          area. If the index control interval size is too small,
I          unnecessary control area splits can occur. After the first
I          define (DEFINE), a catalog listing ( LISTC ) shows the number
I          of control intervals in a control area and the key length
I          of the data set. To make a general estimate of the index
I          control interval size needed, multiply one-half of the key
I          length (KEYLEN) by the number of data control intervals per
I          control area (DATA CI/CA):
N
I          (KEYLEN/2 ) * DATA CI/CA <= INDEX CISIZE
N
I          For information about the relationship between control
I          interval size and physical block size, see z/OS DFSMS Using
I          Data Sets for the relationship between control interval size
I          and physical block size. This document also includes
I          restrictions that apply to control interval size and
I          physical block size.
N
D      DATACLASS(class) /* Abbreviation: DATACLAS */ -
I        The 1 to 8 character name of the data class for the data set.
I        The DATACLASS parameter provides the allocation attributes for
I        new data sets. Your storage administrator defines the data
I        class. However, you can override the parameters defined for
I        DATACLASS by explicitly defining other attributes. Search
I        "Understanding the Order of Assigned Data Set Attributes" for
I        the order of precedence (filtering) the system uses to select
I        which attribute to assign. The record organization attribute
I        of DATACLASS is not used for DEFINE CLUSTER.
n
i        DATACLASS parameters apply to both SMS-managed and
I        non-SMS-managed data sets. If DATACLASS is used and SMS is
I        inactive, the DEFINE is unsuccessful.
N
D      ERASE | NOERASE /* Abbreviations: ERAS and NERAS */-
I        indicates if the records of the cluster components are
I        erased when the cluster is deleted.
N
I        ERASE: Requires the records of the cluster components
I          are overwritten with binary zeros when the cluster
I          is deleted. If the base cluster of the cluster is
I          protected by a RACF generic or discrete profile and the base
I          cluster is cataloged in a catalog, you can use RACF commands
I          to specify an ERASE attribute as part of this profile so that
I          the component is automatically erased upon deletion.
N
I        NOERASE: Specifies that the records of the cluster
I          components are not to be overwritten with binary zeros.
I          NOERASE prevents the component from being erased if the base
I          cluster of the cluster is protected by a RACF
I          generic or discrete profile that specifies the ERASE
I          attribute and if the base cluster is cataloged in a catalog.
I          You can use RACF commands to alter the ERASE attribute in a
I          profile.
N
D      EXCEPTIONEXIT(entrypoint) /* Abbreviation: EEXT */ -
I        The name of your exception exit routine, that receives control
I        when an exceptional I/O error condition occurs during the
I        transfer of data between your program's address space and the
I        cluster's direct access storage space. (An exception
I        is any condition that causes a SYNAD exit to be taken.) The
I        component's exception exit routine is processed first; then
I        SYNAD exit routine receives control. If an exception exit
I        routine is loaded from an unauthorized library during access
I        method services processing, an abnormal termination occurs.
N
D      FILE(ddname) -
I        Names the DD statement that identifies the direct access
I        devices and volumes on which to allocate space to the alternate
I        index. If more than one volume is specified in a volume list,
I        all volumes must be the same device type.
N
I        When the data component and index component are to reside on
I        different devices, you can create a separate FILE parameter as
I        a parameter of DATA and INDEX to point to different DD
I        statements. If the FILE parameter is not used, an attempt is
I        made to dynamically allocate the required volumes. The volumes
I        must be mounted as permanently resident or reserved.
N
I        The DD statement you specify must be:
N
I          //ddname    DD DISP=OLD,
I          //             UNIT=(devtype,count),VOL=SER=(volser1,...)
N
I        Restriction: When FILE refers to more than one volume of the
I        same device type, the DD statement that describes the volumes
I        cannot be a concatenated DD statement.
N
D      FREESPACE(CI-% CA-% | 0 0) /* Abbreviation: FSPC */ -
I        Designates the amount of empty space left after any primary or
I        secondary allocation and any split of control intervals
I        (CI-percent) and control areas (CA-percent) when the alternate
I        index is built (search Chapter 8, "BLDINDEX"). The empty space
I        in the control interval and control area is available for data
I        records that are updated and inserted after the alternate
I        index is initially built. The amounts are specified as
I        percentages. CI-percent translates into a number of bytes that
I        is either equal to, or slightly less than, the percentage
I        value of CI-percent. CA-percent translates into a number of
I        control intervals that is either equal to, or less than, the
I        percentage of CA-percent.
N
I        The percentages must be equal to, or less than, 100. When you
I        use 100% of free space, one data record is placed in the first
I        control interval of each control area when the cluster
I        is built.
N
D      KEYS(length offset | 64 0) -
I        Describes the alternate-key field in the base cluster's data
I        record.
N
I        The key field of an cluster is called an alternate key.
I        The data record's alternate key can overlap or be contained
I        entirely within another (alternate or prime) key field.
N
I        The length plus offset cannot be greater than the length of
I        the base cluster's data record.
N
I        When the base cluster's data record spans control intervals,
I        the record's alternate-key field is within the record's first
I        segment (that is, in the first control interval).
N
I        length offset: Gives the length of the alternate key, in bytes,
I          and its displacement from the beginning of the base cluster's
I          data record, in bytes.
N
D      MODEL(entryname catname) -
I        Specifies an existing entry to be used as a model for the entry
I        being defined. Search "Understanding the Order of Assigned Data
I        Set Attributes" for information on how the system selects
I        modeled attributes.
N
I        A VVDS cannot be modeled.
N
I        DATACLASS, MANAGEMENTCLASS, and STORAGECLASS attributes are
I        not modeled.
N
I        You can use an existing cluster's entry as a model for the
I        attributes of the cluster being defined. For details about how
I        a model is used, see z/OS DFSMS Managing Catalogs.
N
I        You can use some attributes of the model and override others
I        by explicitly specifying them in the definition of the cluster
I        or component. If you do not want to add or change any
I        attributes, you need specify only the entry type (cluster,
I        data, or index) of the model to be used and the name of the
I        entry to be defined.
N
I        Search "Understanding the Order of Assigned Data Set
I        Attributes" for more information about the order in which the
I        system selects an attribute. When you use a cluster entry as
I        a model for the cluster, the data and index entries of the
I        model cluster are used as models for the data and index
I        components of the cluster still to be defined, unless another
I        entry is specified with the MODEL parameter as a subparameter
I        of DATA or INDEX.
N
I        entryname: specifies the name of the cluster or component entry
I          to be used as a model.
N
D      NAME(entryname) -
I        The name of the DATA component.
N
I        You can define a separate entry name for the cluster,
I        its data component, and its index component. If you do not give
I        a name for the data or index component, one is generated. For
I        more information about the system-generated name format, see
I        z/OS DFSMS Managing Catalogs.
N
I        When the cluster, data component, and index component
I        are individually named, each can be addressed.
N
D      OWNER(ownerid) -
I        Gives the identification of the cluster's owner.
N
I        For TSO/E users, if the OWNER parameter does not identify the
I        owner, the TSO/E user's userid becomes the ownerid value.
N
D      RECORDSIZE(average maximum) -
I        The average and maximum length, in bytes, of an alternate
I        index record.
N
I        An cluster record can span control intervals, so
I        RECORDSIZE can be larger than CONTROLINTERVALSIZE. The formula
I        for the maximum record size of spanned records as calculated
I        by VSAM is:
N
I          MAXLRECL = CI/CA * (CISZ - 10)
N
I        where:
N
I        -> MAXLRECL is the maximum spanned record size
N
I        -> CI/CA represents the number of control intervals per
I           control area
N
I        -> CA is the number of control areas
N
I        -> CISZ is the quantity control interval size
N
I        You can use either of the following formulas to determine the
I        size of the cluster record:
N
I        -> When the cluster supports a key-sequenced base
I           cluster, use this formula:
N
I           RECSZ = 5 + AIXKL + (n x BCKL)
N
I        -> When the cluster supports an entry-sequenced base
I           cluster, use this formula:
N
I           RECSZ = 5 + AIXKL + (n x 4)
N
I        Variables in the formulas represent these values:
N
I        -> RECSZ is the average record size.
N
I        -> AIXKL is the alternate-key length (see the KEYS parameter).
N
I        -> BCKL is the base cluster's prime-key length. (You can enter
I           the LISTCAT command to determine this base cluster's
I           prime-key length).
N
I        -> n = 1 when UNIQUEKEY is specified (RECSZ is also the maximum
I           record size).
N
I        -> n = the number of data records in the base cluster that
I           contain the same alternate-key value, when NONUNIQUEKEY is
I           specified.
N
I        When you use NONUNIQUEKEY, give a record size large enough to
I        allow for as many key pointers or RBA pointers as you might
I        need. The record length values apply only to the alternate
I        index's data component.
N
I        Restriction: REPRO to non-VSAM targets and EXPORT do not
I        support data sets with record sizes greater than 32760. The
I        maximum number of prime keys that a single cluster
I        logical record can contain is 32767.
N
D      REUSE | NOREUSE /* Abbreviations: RUS and NRUS */ -
I        Indicates whether or not the cluster can be used again
I        as a new cluster.
N
I        REUSE /* Abbreviation: RUS */: Indicates that the alternate
I          index can be used over again as a new cluster. When
I          a reusable cluster is opened, its high-used RBA can
I          be set to zero. Open it with an access control block using
I          the RESET attribute.
N
I          When you use BLDINDEX to build a reusable cluster,
I          the high-used RBA is always reset to zero when the alternate
I          index is opened for BLDINDEX processing.
N
I          Reusable clusteres can be multivolumed and might have
I          up to 123 physical extents.
N
I          Exception: If you use the keyword UNIQUE with REUSE, the
I          DEFINE command is unsuccessful.
N
I        NOREUSE /* Abbreviation: NRUS */: Specifies that the alternate
I          index cannot be used again as a new cluster.
N
D      SHAREOPTIONS(crossregion crosssystem | 1 3) -
D        /* Abbreviation: SHR */ -
I        Specifies how an cluster's data or index component can
I        be shared among users. However, SMS-managed volumes, and
I        catalogs containing SMS-managed data sets, must not be shared
I        with non-SMS systems. For data integrity, ensure that share
I        options defined for data and index components are the same.
I        For a description of data set sharing, see z/OS DFSMS Using
I        Data Sets.
N
I        crossregion: Indicates the amount of sharing allowed among
I          regions within the same system or within multiple systems
I          using global resource serialization (GRS). Independent job
I          steps in an operating system, or multiple systems in a GRS
I          ring, can access a VSAM data set concurrently. For more
I          information about GRS, see z/OS MVS Planning: Global Resource
I          Serialization. To share a data set, each user must include
I          DISP=SHR in the data set's DD statement. You can use the
I          following options:
N
I        1: The data set can be shared by any number of users for read
I           processing, or the data set can be accessed by only one user
I           for read and write processing. This setting does not allow
I           any non-RLS access when the data set is already open for
I           VSAM RLS or DFSMStvs processing. An RLS or DFSMStvs open
I           fails with this option if the data set is already open for
I           any processing.
N
I        2: The data set can be accessed by any number of users for read
I           processing, and it can also be accessed by one user for
I           write processing. It is the user's responsibility to provide
I           read integrity. VSAM ensures write integrity by obtaining
I           exclusive control for a control interval while it is being
I           updated. A VSAM RLS or DFSMStvs open is not allowed while
I           the data set is open for non-RLS output.
N
I           If the data set has already been opened for VSAM RLS or
I           DFSMStvs processing, a non-RLS open for input is allowed;
I           a non-RLS open for output fails. If the data set is opened
I           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is
I           allowed.
N
I        3: The data set can be fully shared by any number of users. The
I           user is responsible for maintaining both read and write
I           integrity for the data the program accesses. This setting
I           does not allow any non-RLS access when the data set is
I           already open for VSAM RLS or DFSMStvs processing. If the
I           data set is opened for input in non-RLS mode, a VSAM RLS or
I           DFSMStvs open is allowed.
N
I           This option is the only one applicable to a catalog.
N
I        4: The data set can be fully shared by any number of users. For
I           each request, VSAM refreshes the buffers used for direct
I           processing. This setting does not allow any non-RLS access
I           when the data set is already open for VSAM RLS or DFSMStvs
I           processing. If the data set is opened for input in non-RLS
I           mode, a VSAM RLS or DFSMStvs open is allowed.
N
I           As in SHAREOPTIONS 3, each user is responsible for
I           maintaining both read and write integrity for the data the
I           program accesses.
N
I        crosssystem: Specifies the amount of sharing allowed among
I          systems. Job steps of two or more operating systems can gain
I          access to the same VSAM data set regardless of the
I          disposition specified in each step's DD statement for the
I          data set. However, if you are using GRS across systems or
I          JES3, the data set might not be shared depending on the
I          disposition of the system.
N
I          To get exclusive control of the data set's volume, a task
I          in one system issues the RESERVE macro. The level of
I          cross-system sharing allowed by VSAM applies only in a
I          multiple operating system environment.
N
I          The cross-system sharing options are ignored by VSAM RLS or
I          DFSMStvs processing. The values are:
N
I          1: Reserved.
N
I          2: Reserved.
N
I          3: Specifies that the data set can be fully shared. Each
I             user is responsible for maintaining both read and write
I             integrity for the data that user's program accesses. User
I             programs that ignore write integrity guidelines can result
I             in:
N
I            -> VSAM program checks
N
I            -> Uncorrectable data set errors
N
I            -> Unpredictable results
N
I            The RESERVE and DEQ macros are required with this option
I            to maintain data set integrity. (See z/OS MVS Programming:
I            Authorized Assembler Services Reference ALE-DYN and
I            z/OS MVS Programming: Authorized Assembler Services
I            Reference LLA-SDU for information on using RESERVE and DEQ.)
I            If the sphere is accessed using VSAM RLS or DFSMStvs
I            protocols, VSAM RLS maintains the required integrity.
N
I          4: Specifies that the data set can be fully shared. For each
I             request, VSAM refreshes the buffers used for direct
I             processing. This option requires that you use the RESERVE
I             and DEQ macros to maintain data integrity while sharing
I             the data set. Improper use of the RESERVE macro can cause
I             problems similar to those described under SHAREOPTIONS 3.
I             (See z/OS MVS Programming: Authorized Assembler Services
I             Reference ALE-DYN and z/OS MVS Programming: Authorized
I             Assembler Services Reference LLA-SDU for information on
I             using RESERVE and DEQ.) Output processing is limited to
I             update, or add processing, or both that does not change
I             either the high-used RBA or the RBA of the high key data
I             control interval if DISP=SHR is used.
N
I            To ensure data integrity in a shared environment, VSAM
I            provides users of SHAREOPTIONS 4 (cross-region and
I            cross-system) with the following assistance:
N
I            -> Each PUT writes the appropriate buffer immediately into
I               the VSAM object's DASD. VSAM writes out the buffer in
I               the user's address space that contains the new or
I               updated data record.
N
I            -> Each GET refreshes the user's input buffers. The
I               contents of each data and index buffer used by the
I               user's program is retrieved from the VSAM object's DASD.
N
I            Exception: If you use VSAM RLS or DFSMStvs, SHAREOPTIONS
I            is assumed to be (3,3). If you do not use VSAM RLS or
I            DFSMStvs, the SHAREOPTIONS specification is respected.
N
D      SPANNED | NONSPANNED /* Abbreviation: SPND and NSPND */-
I        Specifies whether a data record is allowed to cross control
I        interval boundaries.
N
I        If SPANNED or NONSPANNED is specified in the SMS data class,
I        the value defined is used as the data set definition, unless
I        it has been previously defined with an explicitly specified
I        or modeled DEFINE attribute.
N
I        This parameter cannot be used when defining a linear data set
I        cluster.
N
I        SPANNED /* Abbreviation: SPND */: Specifies that, if the
I          maximum length of a data record (as specified with
I          RECORDSIZE) is larger than a control interval, the record is
I          contained on more than one control interval. This allows
I          VSAM to select a control interval size that is optimum for
I          the DASD.
N
I          When a data record that is larger than a control interval
I          is put into a cluster that allows spanned records, the first
I          part of the record completely fills a control interval.
I          Subsequent control intervals are filled until the record is
I          written into the cluster. Unused space in the record's last
I          control interval is not available to contain other data
I          records.
N
I          Using this parameter for a Variable-Length or a Fixed-Length
I          Relative Record Data Set causes an error.
N
I        NONSPANNED /* Abbreviation: NSPND */: Indicates that the record
I          must be contained in one control interval. VSAM selects a
I          control interval size that accommodates your largest record.
N
D      SPEED | RECOVERY /* Abbreviation: RCVY */ -
I        Specifies whether the data component's control areas are to be
I        preformatted during loading.
N
I        This parameter is only considered during the actual loading
I        (creation) of a data set. Creation occurs when the data set is
I        opened and the high-used RBA is equal to zero. After normal
I        CLOSE processing at the completion of the load operation, the
I        physical structure of the data set and the content of the data
I        set extents are exactly the same, regardless of which option is
I        used. Any processing of the data set after the successful load
I        operation is the same, and the specification of this parameter
I        is not considered.
N
I        If you use RECOVERY, the initial load takes longer because the
I        control areas are first written with either empty or software
I        end-of-file control intervals. These preformatted control
I        intervals are then updated, using update writes with the data
I        records. When SPEED is used, the initial load is faster.
N
I        SPEED: Does not preformat the data component's space.
N
I          If the initial load is unsuccessful, you must load the data
I          set again from the beginning because VSAM cannot determine
I          the location of your last correctly written record. VSAM
I          cannot find a valid end-of-file indicator when it searches
I          your data records.
N
I        RECOVERY /* Abbreviation: RCVY */: Does preformat the data
I          component's space prior to writing the data records.
N
I          If the initial load is unsuccessful, VSAM can determine the
I          location of the last record written during the load process.
N
D      VOLUMES(volser volser...) /* Abbreviation: VOL */ -
I        Specifies the volumes on which an cluster's components
I        are to have space. This parameter is not required if the
I        cluster is modeled or if the cluster is SMS-managed. You can
I        specify VOLUMES for SMS-managed data sets; however, the volumes
I        specified might not be used and, in some cases, can result in
I        an error.
n
I        For SMS-managed data sets, you can use up to 59 volumes. If the
I        combined number of volumes for a cluster and its associated
I        clusteres exceeds 59, unpredictable results can occur.
n
I        You can let SMS choose the volumes for SMS-managed data sets by
I        coding an * for the volser with the VOLUMES parameter. If both
I        user-specified and SMS-specified volumes are requested, the
I        user-specified volser must be input first in the command
I        syntax. The default is one volume.
N
I        If you do not use the MODEL parameter, VOLUMES must be placed
I        as a parameter of CLUSTER, or as a parameter of both
I        DATA and INDEX.
N
I        If the data and index components are to reside on different
I        device types, you must include VOLUMES as a parameter of both
I        DATA and INDEX. If more than one volume is listed with a single
I        VOLUMES parameter, the volumes must be the same device type.
N
I        You can repeat a volume serial number in the list only if you
I        use the KEYRANGE parameter. This can place more than one key
I        range on the same volume. However, repetition is valid only if
I        all duplicate occurrences are used for the primary allocation
I        of some key range.
N
M          You are not allowed to specify KEYRANGE.
N
I        The VOLUMES parameter interacts with other
I        DEFINE CLUSTER parameters. Ensure that the volumes you
I        define for the cluster are consistent with the
I        cluster's other attributes:
N
I        -> CYLINDERS, RECORDS, TRACKS: The volumes contain enough
I           available space to satisfy the component's primary space
I           requirement.
N
I        -> FILE: To define an cluster, the volume information
I           supplied with the DD statement pointed to by FILE must be
I           consistent with the information listed for the alternate
I           index and its components.
N
D      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */ -
I        Determines whether an cluster or component is checked
I        by a machine action called write-check when a record is written
I        into it.
N
I        WRITECHECK /* Abbreviation: WCK */: Indicates that a record is
I          written and then read, without data transfer, to test for the
I          data check condition.
N
I          Exception: When you use VSAM RLS or DFSMStvs access, the
N          WRITECHECK parameter is ignored.
N
I        NOWRITECHECK /* Abbreviation: NWCK */: Does not write-check the
I          cluster or component. checked by a write check.
N
D    ) -
N
NINDEX parameters
N----------------
D    INDEX( -
D      CYLINDERS(primary secondary) | /* Abbreviation: CYL */ -
D      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -
D      MEGABYTES(primary secondary) | /* Abbreviation: MB */ -
D      RECORDS(primary secondary) | /* Abbreviation: REC */-
D      TRACKS(primary secondary) /* Abbreviation: TRK */ -
I        The amount of space in cylinders, kilobytes, megabytes,
I        records, or tracks allocated to the cluster from the
I        volume's available space. A kilobyte and megabyte allocation
I        resolves to either tracks or cylinders; records are allocated
I        to the nearest track boundary. Exception: If allocation
I        resolves to tracks, the space is contiguous. For more
I        information, see "Optimizing Control Area Size" in
I        z/OS DFSMS Using Data Sets.
N
I        Requests for space are directed to DADSM and result in a
I        format-1 DSCB for the data and index component entries.
N
I        If you do not use the MODEL parameter or the RECATALOG
I        parameter, you must include one, and only one, of these
I        parameters: CYLINDERS, KILOBYTES, MEGABYTES, RECORDS, or
I        TRACKS.
N
I        The space parameter is optional if the cluster is SMS-managed,
I        but if you do not use it, space can be modeled or defaulted by
I        SMS. If it is not determined, the DEFINE is unsuccessful. The
I        maximum space can be specified with unit of KILOBYTES or
I        MEGABYTES is 16,777,215. If the amount requested exceeds this
I        value, you should specify a different larger allocation unit.
N
I        To maintain device independence, do not use the TRACKS or
I        CYLINDERS parameters. If you do not use TRACKS or CYLINDERS
I        for an SMS-managed cluster, space is allocated on the
I        volume selected by SMS.
N
M          These days the only mainframe DASD devices in use are
M          likely to be 3390 and thus the caution about device
M          independence is no longer applicable. If you have something
M          else it is way past time to migrate to the current geometry.
N
I        When you do not divide the data component into key ranges, and
I        more than one volume is given, the primary amount of space is
I        allocated only on the first volume when the component is
I        defined. When the component increases to extend to additional
I        volumes, the first allocation on each overflow volume is the
I        primary amount.
N
M          Since you can no longer specify KEYRANGE the above paragraph
I          should be modified by IBM.
N
I        Secondary amounts can be allocated on all volumes available to
I        contain parts of the cluster, regardless of the key
I        ranges when the cluster is extended.
N
I        You can include the amount of space as a parameter of
I        CLUSTER, as a parameter of DATA, or as a parameter of
I        both DATA and INDEX.
N
I        -> If the space is specified as a parameter of CLUSTER,
I           the amount specified is divided between the data and index
I           components. The division algorithm is a function of control
I           interval size, record size, device type, and other data set
I           attributes.
N
I           If the division results in an allocation for the data
I           component that is not an integral multiple of the required
I           control area size, the data component's allocation is
I           rounded up to the next higher control area multiple. This
I           rounding can result in a larger total allocation for your
I           cluster than what you specified.
N
I           If the space is specified as a parameter of DATA, the entire
I           amount given is allocated to the data component. An
I           additional amount of space, depending on control interval
I           size, record size, device type, and other data set
I           attributes, is allocated to the index component.
N
I        To determine the exact amount of space allocated to each
I        component, list the cluster's catalog entry, using
I        the LISTCAT command.
N
I        The primary and each secondary allocation must be able to be
I        satisfied within five extents; otherwise, your DEFINE or data
I        set extension is unsuccessful. You can use these keywords for
I        both SMS managed and non-SMS-managed data sets.
N
I        primary: Allocates the initial amount of space to the
I        cluster.
N
I        secondary: Allocates the amount of space each time the
I        cluster extends, as a secondary extent. If the
I        secondary space allocation is greater than 4.0 gigabytes, it
I        is reduced to an amount as close to 4.0 GB as possible,
I        without going over. This is not true for extended
I        addressability data sets, which have no such space limitation.
I        When you use secondary, space for the cluster's data
I        and index components can be expanded to a maximum of
I        123 extents.
N
D      CONTROLINTERVALSIZE(size) /* Abbreviations: CISZ or CNVSZ */ -
I        Defines the size of the cluster's control intervals.
I        This depends on the maximum size of data records, and on the
I        amount of buffer space given. LSR/GSR buffering technique
I        users can ensure buffer pool selection by explicitly defining
I        data and index control interval sizes.
N
I        When you do not specify the control interval size, VSAM
I        determines the control interval size. If you have not specified
I        BUFFERSPACE and the size of your records permits, VSAM selects
I        the optimum size for the data control interval size and
I        512 bytes for the index control interval size.
N
I        size: The size of the cluster's data and index
I          components.
N
I          Because an cluster always has the spanned attribute,
I          the control interval size can be less than the maximum
I          record length. You can define a size from 512, to 8K in
I          increments of 512 or from 8K to 32K in increments of 2K
I          (where K is 1024 in decimal notation). If you use a size
I          that is not a multiple of 512 or 2048, VSAM chooses the
I          next higher multiple.
N
I          The index control interval should be large enough to
I          accommodate all of the compressed keys in a data control
I          area. If the index control interval size is too small,
I          unnecessary control area splits can occur. After the first
I          define (DEFINE), a catalog listing ( LISTC ) shows the number
I          of control intervals in a control area and the key length
I          of the data set. To make a general estimate of the index
I          control interval size needed, multiply one-half of the key
I          length (KEYLEN) by the number of data control intervals per
I          control area (DATA CI/CA):
N
I          (KEYLEN/2 ) * DATA CI/CA <= INDEX CISIZE
N
I          For information about the relationship between control
I          interval size and physical block size, see z/OS DFSMS Using
I          Data Sets for the relationship between control interval size
I          and physical block size. This document also includes
I          restrictions that apply to control interval size and
I          physical block size.
N
D      DATACLASS(class) /* Abbreviation: DATACLAS */ -
I        The 1 to 8 character name of the data class for the data set.
I        The DATACLASS parameter provides the allocation attributes for
I        new data sets. Your storage administrator defines the data
I        class. However, you can override the parameters defined for
I        DATACLASS by explicitly defining other attributes. Search
I        "Understanding the Order of Assigned Data Set Attributes" for
I        the order of precedence (filtering) the system uses to select
I        which attribute to assign. The record organization attribute
I        of DATACLASS is not used for DEFINE CLUSTER.
n
i        DATACLASS parameters apply to both SMS-managed and
I        non-SMS-managed data sets. If DATACLASS is used and SMS is
I        inactive, the DEFINE is unsuccessful.
N
D      EXCEPTIONEXIT(entrypoint) /* Abbreviation: EEXT */ -
I        The name of your exception exit routine, that receives control
I        when an exceptional I/O error condition occurs during the
I        transfer of data between your program's address space and the
I        cluster's direct access storage space. (An exception
I        is any condition that causes a SYNAD exit to be taken.) The
I        component's exception exit routine is processed first; then
I        SYNAD exit routine receives control. If an exception exit
I        routine is loaded from an unauthorized library during access
I        method services processing, an abnormal termination occurs.
N
D      FILE(ddname) -
I        Names the DD statement that identifies the direct access
I        devices and volumes on which to allocate space to the alternate
I        index. If more than one volume is specified in a volume list,
I        all volumes must be the same device type.
N
I        When the data component and index component are to reside on
I        different devices, you can create a separate FILE parameter as
I        a parameter of DATA and INDEX to point to different DD
I        statements. If the FILE parameter is not used, an attempt is
I        made to dynamically allocate the required volumes. The volumes
I        must be mounted as permanently resident or reserved.
N
I        The DD statement you specify must be:
N
I          //ddname    DD DISP=OLD,
I          //             UNIT=(devtype,count),VOL=SER=(volser1,...)
N
I        Restriction: When FILE refers to more than one volume of the
I        same device type, the DD statement that describes the volumes
I        cannot be a concatenated DD statement.
N
I        Uses existing entry as a model for the entry being defined or
I        re-cataloged. DATACLASS, MANAGEMENTCLASS, and STORAGECLASS
I        cannot be modeled. Search "Understanding the Order of Assigned
I        Data Set Attributes" for information on how the system selects
I        modeled attributes.
N
I        You can use an existing cluster's entry as a model for
I        the attributes of the cluster being defined. For
I        details about how a model is used, see z/OS DFSMS Managing
I        Catalogs.
N
I        You can use some attributes of the model and override others
I        by defining them in the cluster or component. If you do not
I        want to add or change any attributes, use only the entry type
I        of the model (cluster, data, or index) and the name of
I        the entry to be defined.
N
I        When you use an cluster entry as a model for an
I        cluster, the model entry's data and index components
I        are used as models for the to-be-defined entry's data and index
I        components, unless another entry is specified with the MODEL
I        parameter as a subparameter of DATA or INDEX.
N
I        entryname: Names the entry to be used as a model.
N
I        catname: Names the model entry's catalog. You must identify the
I          catalog that contains the model entry when you want to assign
I          the catalog's password instead of the model entry's password.
N
I          If the catalog's volume is physically mounted, it is
I          dynamically allocated. The volume must be mounted as
I          permanently resident or reserved. Search "Catalog Selection
I          Order for DEFINE" for information about the order in which
I          a catalog is selected when the catalog's name is not
I          specified.
N
D      MODEL(entryname catname) -
I        Specifies an existing entry to be used as a model for the entry
I        being defined. Search "Understanding the Order of Assigned Data
I        Set Attributes" for information on how the system selects
I        modeled attributes.
N
I        A VVDS cannot be modeled.
N
I        DATACLASS, MANAGEMENTCLASS, and STORAGECLASS attributes are
I        not modeled.
N
I        You can use an existing cluster's entry as a model for the
I        attributes of the cluster being defined. For details about how
I        a model is used, see z/OS DFSMS Managing Catalogs.
N
I        You can use some attributes of the model and override others
I        by explicitly specifying them in the definition of the cluster
I        or component. If you do not want to add or change any
I        attributes, you need specify only the entry type (cluster,
I        data, or index) of the model to be used and the name of the
I        entry to be defined.
N
I        Search "Understanding the Order of Assigned Data Set
I        Attributes" for more information about the order in which the
I        system selects an attribute. When you use a cluster entry as
I        a model for the cluster, the data and index entries of the
I        model cluster are used as models for the data and index
I        components of the cluster still to be defined, unless another
I        entry is specified with the MODEL parameter as a subparameter
I        of DATA or INDEX.
N
I        entryname: specifies the name of the cluster or component entry
I          to be used as a model.
N
D      NAME(entryname) -
I        The name of the INDEX component.
N
I        Defines the cluster's entryname or the name of each of its
I        components. The entryname used for the cluster as a whole is
I        not propagated to the cluster's components.
N
I        For SMS and non-SMS-managed clusters, the component names must
I        resolve to the same catalog as the data set's cluster name.
N
I        You can define a separate entryname for the cluster, its data
I        component, and its index component. If no name is specified for
I        the data and index component, a name is generated. When the
I        cluster, data component, and index component are individually
I        named, each can be addressed. For information on system
I        generated names, see z/OS DFSMS Using Data Sets.
N
I        When defining a VSAM volume data set (VVDS), the entryname for
I        the cluster or the data component must be in the form
I        SYS1.VVDS.Vvolser, where volser is the volume serial number
I        specified by the VOLUMES parameter. The default primary and
I        secondary allocation is 10 tracks. VVDSs cannot be defined in
I        cylinder-managed space. For information on defining a VVDS
I        see z/OS DFSMS Managing Catalogs.
N
D      OWNER(ownerid) -
I        Gives the identification of the cluster's owner.
N
I        For TSO/E users, if the OWNER parameter does not identify the
I        owner, the TSO/E user's userid becomes the ownerid value.
N
D      REUSE | NOREUSE /* Abbreviations: RUS and NRUS */ -
I        Indicates whether or not the cluster can be used again
I        as a new cluster.
N
I        REUSE /* Abbreviation: RUS */: Indicates that the alternate
I          index can be used over again as a new cluster. When
I          a reusable cluster is opened, its high-used RBA can
I          be set to zero. Open it with an access control block using
I          the RESET attribute.
N
I          When you use BLDINDEX to build a reusable cluster,
I          the high-used RBA is always reset to zero when the alternate
I          index is opened for BLDINDEX processing.
N
I          Reusable clusteres can be multivolumed and might have
I          up to 123 physical extents.
N
I          Exception: If you use the keyword UNIQUE with REUSE, the
I          DEFINE command is unsuccessful.
N
I        NOREUSE /* Abbreviation: NRUS */: Specifies that the alternate
I          index cannot be used again as a new cluster.
N
D      SHAREOPTIONS(crossregion crosssystem | 1 3) -
D        /* Abbreviation: SHR */ -
I        Specifies how an cluster's data or index component can
I        be shared among users. However, SMS-managed volumes, and
I        catalogs containing SMS-managed data sets, must not be shared
I        with non-SMS systems. For data integrity, ensure that share
I        options defined for data and index components are the same.
I        For a description of data set sharing, see z/OS DFSMS Using
I        Data Sets.
N
I        crossregion: Indicates the amount of sharing allowed among
I          regions within the same system or within multiple systems
I          using global resource serialization (GRS). Independent job
I          steps in an operating system, or multiple systems in a GRS
I          ring, can access a VSAM data set concurrently. For more
I          information about GRS, see z/OS MVS Planning: Global Resource
I          Serialization. To share a data set, each user must include
I          DISP=SHR in the data set's DD statement. You can use the
I          following options:
N
I        1: The data set can be shared by any number of users for read
I           processing, or the data set can be accessed by only one user
I           for read and write processing. This setting does not allow
I           any non-RLS access when the data set is already open for
I           VSAM RLS or DFSMStvs processing. An RLS or DFSMStvs open
I           fails with this option if the data set is already open for
I           any processing.
N
I        2: The data set can be accessed by any number of users for read
I           processing, and it can also be accessed by one user for
I           write processing. It is the user's responsibility to provide
I           read integrity. VSAM ensures write integrity by obtaining
I           exclusive control for a control interval while it is being
I           updated. A VSAM RLS or DFSMStvs open is not allowed while
I           the data set is open for non-RLS output.
N
I           If the data set has already been opened for VSAM RLS or
I           DFSMStvs processing, a non-RLS open for input is allowed;
I           a non-RLS open for output fails. If the data set is opened
I           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is
I           allowed.
N
I        3: The data set can be fully shared by any number of users. The
I           user is responsible for maintaining both read and write
I           integrity for the data the program accesses. This setting
I           does not allow any non-RLS access when the data set is
I           already open for VSAM RLS or DFSMStvs processing. If the
I           data set is opened for input in non-RLS mode, a VSAM RLS or
I           DFSMStvs open is allowed.
N
I           This option is the only one applicable to a catalog.
N
I        4: The data set can be fully shared by any number of users. For
I           each request, VSAM refreshes the buffers used for direct
I           processing. This setting does not allow any non-RLS access
I           when the data set is already open for VSAM RLS or DFSMStvs
I           processing. If the data set is opened for input in non-RLS
I           mode, a VSAM RLS or DFSMStvs open is allowed.
N
I           As in SHAREOPTIONS 3, each user is responsible for
I           maintaining both read and write integrity for the data the
I           program accesses.
N
I        crosssystem: Specifies the amount of sharing allowed among
I          systems. Job steps of two or more operating systems can gain
I          access to the same VSAM data set regardless of the
I          disposition specified in each step's DD statement for the
I          data set. However, if you are using GRS across systems or
I          JES3, the data set might not be shared depending on the
I          disposition of the system.
N
I          To get exclusive control of the data set's volume, a task
I          in one system issues the RESERVE macro. The level of
I          cross-system sharing allowed by VSAM applies only in a
I          multiple operating system environment.
N
I          The cross-system sharing options are ignored by VSAM RLS or
I          DFSMStvs processing. The values are:
N
I          1: Reserved.
N
I          2: Reserved.
N
I          3: Specifies that the data set can be fully shared. Each
I             user is responsible for maintaining both read and write
I             integrity for the data that user's program accesses. User
I             programs that ignore write integrity guidelines can result
I             in:
N
I            -> VSAM program checks
N
I            -> Uncorrectable data set errors
N
I            -> Unpredictable results
N
I            The RESERVE and DEQ macros are required with this option
I            to maintain data set integrity. (See z/OS MVS Programming:
I            Authorized Assembler Services Reference ALE-DYN and
I            z/OS MVS Programming: Authorized Assembler Services
I            Reference LLA-SDU for information on using RESERVE and DEQ.)
I            If the sphere is accessed using VSAM RLS or DFSMStvs
I            protocols, VSAM RLS maintains the required integrity.
N
I          4: Specifies that the data set can be fully shared. For each
I             request, VSAM refreshes the buffers used for direct
I             processing. This option requires that you use the RESERVE
I             and DEQ macros to maintain data integrity while sharing
I             the data set. Improper use of the RESERVE macro can cause
I             problems similar to those described under SHAREOPTIONS 3.
I             (See z/OS MVS Programming: Authorized Assembler Services
I             Reference ALE-DYN and z/OS MVS Programming: Authorized
I             Assembler Services Reference LLA-SDU for information on
I             using RESERVE and DEQ.) Output processing is limited to
I             update, or add processing, or both that does not change
I             either the high-used RBA or the RBA of the high key data
I             control interval if DISP=SHR is used.
N
I            To ensure data integrity in a shared environment, VSAM
I            provides users of SHAREOPTIONS 4 (cross-region and
I            cross-system) with the following assistance:
N
I            -> Each PUT writes the appropriate buffer immediately into
I               the VSAM object's DASD. VSAM writes out the buffer in
I               the user's address space that contains the new or
I               updated data record.
N
I            -> Each GET refreshes the user's input buffers. The
I               contents of each data and index buffer used by the
I               user's program is retrieved from the VSAM object's DASD.
N
I            Exception: If you use VSAM RLS or DFSMStvs, SHAREOPTIONS
I            is assumed to be (3,3). If you do not use VSAM RLS or
I            DFSMStvs, the SHAREOPTIONS specification is respected.
N
D      VOLUMES(volser volser...) /* Abbreviation: VOL */ -
I        Specifies the volumes on which an cluster's components
I        are to have space. This parameter is not required if the
I        cluster is modeled or if the cluster is SMS-managed. You can
I        specify VOLUMES for SMS-managed data sets; however, the volumes
I        specified might not be used and, in some cases, can result in
I        an error.
n
I        For SMS-managed data sets, you can use up to 59 volumes. If the
I        combined number of volumes for a cluster and its associated
I        clusteres exceeds 59, unpredictable results can occur.
n
I        You can let SMS choose the volumes for SMS-managed data sets by
I        coding an * for the volser with the VOLUMES parameter. If both
I        user-specified and SMS-specified volumes are requested, the
I        user-specified volser must be input first in the command
I        syntax. The default is one volume.
N
I        If you do not use the MODEL parameter, VOLUMES must be placed
I        as a parameter of CLUSTER, or as a parameter of both
I        DATA and INDEX.
N
I        If the data and index components are to reside on different
I        device types, you must include VOLUMES as a parameter of both
I        DATA and INDEX. If more than one volume is listed with a single
I        VOLUMES parameter, the volumes must be the same device type.
N
I        You can repeat a volume serial number in the list only if you
I        use the KEYRANGE parameter. This can place more than one key
I        range on the same volume. However, repetition is valid only if
I        all duplicate occurrences are used for the primary allocation
I        of some key range.
N
M          You are not allowed to specify KEYRANGE.
N
I        The VOLUMES parameter interacts with other
I        DEFINE CLUSTER parameters. Ensure that the volumes you
I        define for the cluster are consistent with the
I        cluster's other attributes:
N
I        -> CYLINDERS, RECORDS, TRACKS: The volumes contain enough
I           available space to satisfy the component's primary space
I           requirement.
N
I        -> FILE: To define an cluster, the volume information
I           supplied with the DD statement pointed to by FILE must be
I           consistent with the information listed for the alternate
I           index and its components.
N
D      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */ -
I        Determines whether an cluster or component is checked
I        by a machine action called write-check when a record is written
I        into it.
N
I        WRITECHECK /* Abbreviation: WCK */: Indicates that a record is
I          written and then read, without data transfer, to test for the
I          data check condition.
N
I          Exception: When you use VSAM RLS or DFSMStvs access, the
N          WRITECHECK parameter is ignored.
N
I        NOWRITECHECK /* Abbreviation: NWCK */: Does not write-check the
I          cluster or component. checked by a write check.
N
D    ) /* - */
N
NOptional parameter
N------------------
M    CATALOG(catname) /* Abbreviation: CAT */
I      Identifies the catalog in which the cluster is defined.
I      The catalog also contains the base cluster's entry (see the
I      description of the RELATE in preceding text). Search "Catalog
I      Selection Order for DEFINE" for the order in which a catalog is
I      selected if the catalog's name is not specified.
N
I      Before you can assign catalog names for SMS-managed data sets,
I      you must have access to the RACF STGADMIN.IGG.DIRCAT FACILITY
I      class. Search "Storage Management Subsystem (SMS) Considerations"
I      for more information.
N
I      catname/alias: Names the catalog or an alias that can be resolved
I        to a catalog. For example, if alias ABCD relates to catalog
I        SYS1.USERCAT then specifying either ABCD or SYS1.USERCAT will
I        cause the cluster to be defined in SYS1.USERCAT.
N
I      If the catalog's volume is physically mounted, it is dynamically
I      allocated. Mount the volume as permanently resident or reserved.
* End of WISH.
