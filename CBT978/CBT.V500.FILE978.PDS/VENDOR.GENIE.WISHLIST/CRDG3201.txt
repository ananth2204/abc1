SCRDG3201
TCICS RDG
T-Chapter 32.
T-Syntax
E"Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20180517-121816
*
@IBM Corporation
*
Bdfha4h00.pdf
BSC34-7425-00 CICS Transaction Server for z/OS
B-Resource Definition Guide
B-Version 5 Release 3
*
NCICS Transaction Server for z/OS Resource Definition Guide
N----------------------------------------------------------
NChapter 32. TRANSACTION resources
N---------------------------------
NSyntax:
N-------
D  DEFINE
D    TRANSACTION(name)
I      Specifies the name of the transaction or
I      transaction identifier (TRANSID). The name can be up to
I      4 characters in length.
N
I      It is preferable not to use names that start with DFH because
I      these characters are reserved for use by CICS.
N
I      CICS can delete or discard them and replace them with CICS
I      resources when you upgrade or provide new function or fixes.
N
I      Note:
I      1. If you use a comma (,) in a name, you cannot use commands such
I         as these:
N
I         CEMT INQUIRE TRANSACTION(value1,value2)
I         CEMT SET TRANSACTION(value1,value2)
N
I         where the comma serves as a list delimiter. See CICS Supplied
I         Transactions for information about using lists of resource
I         identifiers.
N
I      2. If you protect your transient data queues using RACF, avoid
I         using % and & in the name. RACF commands assign a special
I         meaning to these characters when they are used in a profile
I         name. See the CICS RACF Security Guide.
N
I       If you want to use other special characters in a transaction
I       identifier, use the XTRANID attribute to specify another name that
I       can be used to initiate the transaction. You must also specify a
I       TRANSACTION name, because this name is the one by which the
I       TRANSACTION definition is known on the CSD file. When defining a
I       transaction, you must also name either a PROGRAM or a
I       REMOTESYSTEM.
N
D    GROUP(groupname)
I      Every resource definition must have a GROUP name.
I      The resource definition becomes a member of the group and is
I      installed in the CICS system when the group is installed.
N
I      The GROUP name can be up to 8 characters in length. Lowercase
I      characters are treated as uppercase characters.
N
D    DESCRIPTION(text)
I      You can provide a description of the resource that
I      you are defining in this field. The description text can be up to
I      58 characters in length. No restrictions apply to the characters
I      that you can use. However, if you use parentheses, ensure that for
I      each left parenthesis there is a matching right parenthesis. If you
I      use the CREATE command, for each single apostrophe in the text,
I      code two apostrophes.
N
D    ACTION(BACKOUT | COMMIT)
I      Specifies the action to be taken when a
I      CICS region fails, or loses connectivity with its coordinator,
I      during 2-phase commit processing after the unit of work has entered
I      the indoubt period. The action depends on the WAIT attribute.
N
I      If WAIT specifies YES, ACTION has no effect unless the WAITTIME
I      expires before recovery from the failure.
N
I      If WAIT specifies NO, the action taken is one of the following:
N
I      BACKOUT: All changes made to recoverable resources are backed out,
I      and the resources are returned to the state they were in before
I      the start of the UOW.
N
I      COMMIT: All changes made to recoverable resources are committed,
I      and the UOW is marked as completed.
N
D    ALIAS(alias)
I      Specifies an alias transaction name for this
I      transaction. The name can be up to 4 characters in length. This
I      option is useful if you want to run on a terminal defined with
I      UCTRAN(NO), or a transaction that allows mixed case input
I      (PROFILE UCTRAN(NO)). For example, you can start the same
I      transaction as ABCD by means of ALIAS(abcd).
N
I      When you install a TRANSACTION definition that contains the ALIAS
I      attribute, the result depends on whether the alias name is already
I      in use in the system:
N
I      -> If the alias name is in use as a primary transaction ID, the
I         ALIAS attribute is ignored.
N
I      -> If the alias name is in use as the alias for a different
I         transaction, the original alias is replaced by the new one. In
I         other words, after the TRANSACTION definition has been
I         installed, the alias name refers to the new transaction, and not
I         the original.
N
D    BREXIT(program)
I      Defines the name of the default bridge exit to be
I      associated with this transaction, if it is started in the 3270
I      bridge environment with a START BREXIT command that does not
I      specify a name on its BREXIT option. The name can be up to
I      8 characters in length.
N
I      If BREXIT is defined, do not specify REMOTESYSTEM, REMOTENAME,
I      DYNAMIC(YES), or RESTART(YES) because they are ignored.
N
I      Note: The Link3270 mechanism is now the recommended way to use
I      the 3270 bridge. Refer to the publications for CICS Transaction
I      Server for OS/390, Version 1 Release 3 if you need to implement
I      new applications using the START BREXIT interface.
N
D    CMDSEC(NO | YES)
I      Specifies whether security checking is to be
I      applied on system programming commands.
N
I      NO: No check is made. The commands are always run.
N
I      YES: A call is made to the external security manager (ESM). CICS
I        either authorizes or prevents access. If the ESM cannot identify
I        the resource or resource type, access is prevented.
N
D    CONFDATA(NO | YES)
I     Specifies whether CICS is to suppress user data
I      from CICS trace entries when the CONFDATA system initialization
I      parameter specifies HIDETC. If the system initialization parameter
I      specifies CONFDATA=SHOW, CONFDATA on the transaction definition
I      is ignored.
N
I      If the system initialization parameter specifies CONFDATA=HIDETC,
I      the following options are effective:
N
I      NO: CICS does not suppress any user data. z/OS Communications
I        Server and MRO initial user data is traced in trace point
I        AP FC92. FEPI user data is traced in the normal CICS FEPI trace
I        points. IPIC user data is traced in the normal CICS IS trace
I        points.
N
I      YES: CICS suppresses user data from the CICS trace points.
N
D    DTIMOUT(NO | mmss)
I      Specifies whether deadlock timeout is to be
I      applied to the task. If the task is suspended (for example,
I      through lack of storage), a purge of the task is initiated if the
I      task stays suspended for longer than the DTIMOUT value. If the
I      purge leads to a transaction abend, the abend code used depends
I      on which part of CICS suspended the task. When using CEDF, the
I      user task, if possible, specifies DTIMOUT(NO) or a large value.
I      This value is also now used as the timeout on all RLS file requests
I      if DTIMOUT is nonzero; otherwise, the request gets the
I      SIT FTIMEOUT value. FTIMEOUT applies to transactions that do not
I      have a deadlock timeout interval active. If a time value is
I      specified for the DTIMOUT keyword of the TRANSACTION definition,
I      this value is used as the file timeout value for that transaction.
N
I      When using CEDF, if any DTIMOUT value has been specified for the
I      user task, the DTIMOUT value is ignored while the user task is
I      suspended and a CEDF task is active. Therefore, the suspended user
I      task cannot end with a deadlock timeout (abend AKCS) while a CEDF
I      task is waiting for a user response.
N
I      For DTIMOUT to be effective in non-RLS usage, set SPURGE to YES.
I      CICS inhibits deadlock timeout at certain points.
N
I      DTIMOUT is not triggered for terminal I/O waits. Because the relay
I      transaction does not access resources after obtaining a session,
I      it has little need for DTIMOUT except to trap suspended allocate
I      requests. However, for I/O waits on a session, the RTIMOUT
I      attribute can be specified on PROFILE definitions for transaction
I      routing on IPIC or MRO sessions and mapped APPC connections.
N
I      You must define some transactions with a DTIMOUT value, because
I      deadlock timeout is the mechanism that CICS uses to deal with
I      short-on-storage (SOS) situations.
N
I      NO: The deadlock timeout feature is not required.
N
I      mmss: The length of time (MMSS for minutes and seconds) after
I        which deadlock timeout ends a suspended task. The maximum value
I        that you can specify is 68 minutes; this value is accurate to
I        one second.
N
D    DUMP(YES | NO)
I      Specifies whether a call is to be made to the dump
I      domain to produce a transaction dump if the transaction ends
I      abnormally.
N
I      This operand has no effect on the following dump operations:
N
I      -> An EXEC CICS DUMP command, which always produces a dump.
N
I      -> The system dumps for dump codes AP0001 and SR0001 that CICS
I         produces with ASRA, ARSB, or ASRD abends. If you specify NO on
I         the transaction DUMP attribute, CICS suppresses the transaction
I         dump, but not the system dump.
N
I      YES: CICS calls the dump domain to produce a transaction dump.
I        Note that the final production or suppression of the transaction
I        dump is controlled by the transaction dump table. For more
I        information about the dump table, see the CICS Operations and
I        Utilities Guide.
N
I        If no transaction dump table entry exists for the given dump code
I        when a transaction abends, CICS creates a temporary entry for
I        which the default is to produce a transaction dump.
N
I        You control dump table entries for transaction dumps using the
I        CEMT SET TRDUMPCODE command, or the CEMT SET TRANDUMPCODE SPI
I        command.
N
I      NO: No call is made to the dump domain, suppressing any potential
I        transaction dump.
N
D    DYNAMIC(NO | YES)
I      Specifies whether the transaction can be
I      dynamically routed to a remote region, using the CICS dynamic
I      transaction routing facility.
N
I      NO: Creates a local or remote definition according to the
I        REMOTESYSTEM attribute.
N
I      YES: Allows the dynamic transaction routing program to determine
I        the localor remote status dynamically at invocation time. For
I        programming information about the dynamic transaction routing
I        program, see the CICS Customization Guide.
N
I    EXTSEC: This attribute is obsolete, but is supported to provide
I      compatibility with earlier releases of CICS.
N
I    INDOUBT: This attribute is obsolete, but is supported to provide
I      compatibility with earlier releases of CICS.
N
D    ISOLATE(YES | NO)
I      Specifies whether CICS is to isolate the
I      transaction user-key task-lifetime storage to provide
I      transaction-to-transaction protection. (See the TASKDATAKEY
I      attribute for a description of user-key storage.) Isolation means
I      that the user-key task-lifetime storage is protected from both
I      reading and writing by the user-key programs of other transactions;
I      that is, from programs defined with EXECKEY(USER). The effect of
I      the ISOLATE attribute of storage access shows the effect of the
I      ISOLATE attribute.
N
I      Note:
I      1. The ISOLATE attribute does not provide any protection against
I         application programs that run in CICS key; that is, from
I         programs defined with EXECKEY(CICS).
N
I      2. VSAM nonshared resources (NSR) are not supported for
I         transactions that use transaction isolation. You must specify
I         ISOLATE(NO) when you define transactions that access VSAM files
I         using NSR. You can also function ship the file request to a
I         remote region. The DFHMIRS program that carries out the
I         request is defined with an EXECKEY of CICS. A CICS-key program
I         has read and write access to CICS-key and user-key storage of
I         its own task and all other tasks, whether transaction isolation
I         is active.
N
I      3. Transaction isolation does not apply to 64-bit storage.
N
I      YES: The transaction user-key task-lifetime storage is isolated
I        from the user-key programs of all other transactions; that is,
I        from programs defined with EXECKEY(USER), but not from programs
I        defined with EXECKEY(CICS).
N
I        Also, the user-key task-lifetime storage of all other
I        transactions is protected from the user-key programs of
I        transactions defined with ISOLATE(YES).
N
I      NO: If you specify ISOLATE(NO), the transaction task-lifetime
I        storage is isolated from the user-key programs of those
I        transactions defined with ISOLATE(YES). The transaction storage
I        is not, however, isolated from user-key programs of other
I        transactions that also specify ISOLATE(NO) because, with this
I        option, the transactions are all allocated to the common
I        subspace.
N
I      Note also that the user-key task-lifetime storage of all
I      transactions defined with ISOLATE(YES) is protected from the
I      user-key programs of transactions defined with ISOLATE(NO).
N
I      Specify ISOLATE(NO) for those transactions that share any part of
I      their user-key task-lifetime storage.
N
D    LOCALQ(NO | YES)
I      Specifies whether queuing on the local system is
I      to be performed.
N
I      NO: No local queuing is to be performed.
N
I      YES: Local queuing can be attempted for a START command with
I        NOCHECK option request when the system or IPIC connection is
I        not available and the system name is valid.
N
I        A system is defined as not available in the following
I        circumstances:
N
I        -> The system is OUT OF SERVICE when the request is initiated.
N
I        -> The attempt to initiate any session to the remote system
I           fails and the corrective action taken by the abnormal
I           condition program (DFHZNAC) or the node error program
I           (DFHZNEP) is to place the system OUT OF SERVICE.
N
I        -> No sessions to the remote system are immediately available,
I           and your XISCONA global user exit program specifies that the
I           request is not to be queued in the issuing region.
N
I        An IPIC connection is defined as not available in the
I        following circumstances:
N
I        -> The IPIC connection is not acquired.
N
I        -> A session is not available and CICS does not queue the
I           request for a new session.
N
I      Use local queuing only for those START commands that represent
I      time-independent requests. The delay implied by local queuing
I      affects the time at which the request is started. It is your
I      responsibility to ensure that this condition is met.
N
I      If you specify LOCALQ(YES), you cannot specify ROUTABLE(YES).
I      You can use the global user exits, XISLCLQ or XISQLCL, to override
I      the setting of the LOCALQ attribute. For programming information
I      about the user exits in the intersystem communication program,
I      see the CICS Customization Guide.
N
D    OTSTIMEOUT(NO | hhmmss)
I      Specifies, in hours, minutes, and seconds,
I      the length of time for which an Object Transaction Service (OTS)
I      transaction, created in an enterprise beans environment and running
I      as a task under this CICS transaction, is allowed to run before
I      the initiator of the OTS transaction must take a sync point or
I      roll back the transaction. If the specified period expires, CICS
I      purges the task.
N
I      The initiator of the OTS transaction can be one of these:
N
I      -> The client of the enterprise bean.
N
I      -> The EJB container. The container issues a sync point at the
I         end of the bean method.
N
I      -> A session bean that manages its own OTS transactions.
N
I      Methods of session beans that manage their own OTS transactions
I      can override the default timeout value by using the
I      setTransactionTimeout method of the
I      javax.Transaction.UserTransaction interface.
N
I      NO: OTS transactions will not timeout. NO is the default.
N
I      hhmmss: The time (in HHMMSS format) before the task is purged.
I        The maximum period is 24 hours (240000).
N
D    PARTITIONSET(partitionset | KEEP | OWN)
I      Specifies the name of the
I      partition set that is to be the default application partition set.
I      The name can be up to 8 characters in length.
N
I      If you do not specify a partition set name or either of the
I      reserved names, CICS destroys existing partitions before the
I      first BMS output to the terminal from the transaction.
N
I      partitionset: CICS destroys existing partitions and loads the
I      named partition set before the first BMS output to the terminal
I      from the transaction. (Existing partitions are not destroyed if
I      the terminal partition set matches the application partition set.)
N
I        This name must not be the same as that specified in
I        PROGRAM(name).
N
I      KEEP: The transaction uses the application partition set for this
I        terminal. This option is typically used for successor
I        transactions in a chain of pseudoconversational transactions.
N
I      OWN: The transaction performs its own partition management.
N
I    PRIMEDSIZE: This attribute is obsolete, but is supported to provide
I      compatibility with earlier releases of CICS.
N
D    PRIORITY(1 | priority)
I      Specifies the transaction priority. This
I      1- to 3-digit decimal value from 0 to 255 is used to establish
I      the overall transaction processing priority. Transaction processing
I      priority is equal to the sum of the terminal priority, transaction
I      priority, and operator priority, not exceeding 255. The higher the
I      number, the higher the priority.
N
D    PROFILE(DFHCICST | profile)
I      Is the name of the PROFILE definition
I      that specifies the processing options used with the terminal that
I      initiated the transaction.
N
I      The default is DFHCICST.
N
I      The processing options provided by the default DFHCICST are shown
I      in PROFILE definitions in group DFHISC. DFHCICST is not suitable
I      for use with a distributed program link. Instead, specify DFHCICSA,
I      which has INBFMH=ALL.
N
D    PROGRAM(program)
I      Specifies the name of the program to which CICS
I      gives control to process this transaction. The name can be up to
I      8 characters in length.
N
I      Ensure that this name is not the same as that specified in
I      PARTITIONSET(name).
N
I      If a name is specified for REMOTESYSTEM, and it differs from that
I      of the current system, you do not need to specify a name for
I      PROGRAM. If, in these circumstances, you do specify a name for
I      PROGRAM, it might be ignored.
N
I      If this transaction definition is for use on a remote program
I      link request, the program name that you specify in this attribute
I      must be the name of the CICS mirror program, DFHMIRS. See the
I      TRANSID attribute on the PROGRAM definition in PROGRAM attributes
I      in Reference System definition.
N
D    REMOTENAME(transaction)
I      Specifies the name of this transaction as
I      it is known in a remote system, if it is to run in a remote system
I      or region using intersystem communication. The remote system can
I      be another CICS region or an IMS system. REMOTENAME can be
I      1 - 4 characters in length if the REMOTESYSTEM attribute specifies
I      another CICS region, or 1 - 8 characters in length if REMOTESYSTEM
I      specifies an IMS system. IMS uses 8-character names and, if
I      REMOTENAME has fewer than 8 characters, IMS translates it into a
I      usable format.
N
I      If you specify REMOTESYSTEM and omit REMOTENAME, the value of
I      REMOTENAME defaults to the local name; that is, the TRANSACTION
I      name on this definition. Note that the transaction does not have
I      to be on the remote system or region.
N
D    REMOTESYSTEM(connection)
I      Specifies the name that identifies the
I      intercommunication link on which the transaction attach request
I      is sent.
N
I      REMOTESYSTEM is one of these identifiers:
N
I      -> For IPIC connections, the first 4 characters of the IPCONN name
I         on the IPCONN definition, which is in service and acquired.
N
I      -> For MRO and APPC connections, the CONNECTION name on the
I         CONNECTION definition.
N
I      REMOTESYSTEM is used for CICS function request shipping
I      (asynchronous processing and transaction routing).
N
I      Ensure that the REMOTESYSTEM options which are specified for a set
I      of transactions do not refer to any other transaction in that set;
I      that is, they are not self-referent, which can lead to looping
I      starts of multiple mirror transactions.
N
D    RESSEC(NO | YES)
I      Specifies whether resource security checking is to
I      be used for resources accessed by this transaction.
N
I      NO: All resources are available to any user who has the authority
I        to use this transaction.
N
I      YES: An external security manager is used. For more details about
I        external security checking, see the CICS RACF Security Guide
N
D    RESTART(NO | YES)
I      Specifies whether the transaction restart facility
I      is to be used to restart those tasks that end abnormally and are
I      later backed out by the dynamic transaction backout facility.
N
I      If RESTART(YES) is specified, the task that failed is restarted
I      from the beginning of the initial program. If dynamic transaction
I      backout fails, or if restart is suppressed dynamically, DFHPEP is
I      called in the normal way. The transaction restart facility is
I      especially useful in situations such as a program isolation
I      deadlock, where the task can be restarted automatically rather
I      than resubmitted manually. A terminal-initiated transaction is
I      allowed to restart during CICS shutdown even if SHUTDOWN(DISABLED)
I      is specified. For more details about automatic transaction restart,
I      see the CICS Recovery and Restart Guide.
N
I      NO: The restart facility is not required.
N
I      YES: The restart facility is to be used.
N
D    ROUTABLE(NO | YES)
I      Specifies whether, if the transaction is the
I      subject of an eligible EXEC CICS START command, it is routed using
I      the enhanced routing method.
N
I      NO: If the transaction is the subject of a START command, it is
I        routed using the traditional method.
N
I      YES: If the transaction is the subject of an eligible START
I        command, it is routed using the enhanced method.
N
I      If you specify ROUTABLE(YES), you cannot specify LOCALQ(YES).
N
I      For details of the enhanced and traditional methods of routing
I      transactions called by EXEC CICS START commands, see the
I      CICS Intercommunication Guide.
N
I    RSL: This attribute is obsolete, but is supported to provide
I      compatibility with earlier releases of CICS.
N
D    RUNAWAY(SYSTEM | 0 | 500-2700000)
I      The time, in milliseconds, for which
I      any task running under this transaction definition can have
I      control of the processor before it is assumed to be in a runaway
I      condition (logical loop). When this interval expires, CICS can
I      abnormally end the task.
N
I      SYSTEM: CICS is to use the ICVR system initialization parameter
I        value as the runaway time limit for this transaction.
N
I      0: No limit applies and no runaway task detection is required for
I        the transaction.
N
I      500-2700000: The runaway time limit in the range 500 - 2700000.
I        When checking whether a task is in a runaway condition, CICS
I        rounds the value you specify downwards, to a multiple of 500.
N
D    SHUTDOWN(DISABLED | ENABLED)
I      Applies to all transactions, and
I      specifies whether the transaction can be run during CICS shutdown.
I      This option supplements the XLT option of the PERFORM SHUTDOWN
I      command. For a transaction to be attached during shutdown, it
I      must either be defined as SHUTDOWN(ENABLED) or, in the case of
I      terminal-based transactions, be named in the XLT specified in the
I      PERFORM SHUTDOWN command.
N
I      DISABLED: The transaction is disabled from running during CICS
I      shutdown.
N
I      ENABLED: The transaction is enabled to run during CICS shutdown.
N
D    SPURGE(NO | YES)
I      Specifies whether the transaction is initially
I      system purgeable or not. SPURGE=NO prevents a transaction being
I      purged by these means:
N
I      ->v Deadlock timeout (DTIMOUT)
N
I      -> An EXEC CICS ... PURGE command
N
I      -> TWAOCT (Cancel Task) being set in the node error program (NEP)
N
I      -> A CEMT SET ... PURGE command
N
I      SPURGE=YES allows such purges to go ahead as far as the user is
I      concerned. CICS might, however, prevent the purge if it is not
I      safe to allow a purge at the point the transaction has reached.
N
I      Note that SPURGE=NO does not prevent a transaction being purged
I      by the read timeout (RTIMOUT) facility, an
I      EXEC CICS SET ... FORCEPURGE command, or a
I      CEMT SET TRANSACTION(tranid) FORCEPURGE command.
N
I      SPURGE determines only the initial value, which can be changed by
I      the transaction while it is running.
N
I      NO: The transaction is not initially system purgeable.
N
I      YES: The transaction is initially system purgeable.
N
D    STATUS(ENABLED | DISABLED)
I      Specifies the transaction status.
N
I      ENABLED: Allows the transaction to be run normally.
N
I      DISABLED: Prevents the transaction from running.
N
I      This attribute is ignored for TRANSACTION resources that are
I      dynamically generated by a CICS bundle. The initial status of a
I      TRANSACTION resource is derived from the initial status of the
I      bundle that defines the resource.
N
D    STORAGECLEAR(NO | YES)
I      Specifies whether task-lifetime storage for
I      this transaction is to be cleared on release. Use STORAGECLEAR to
I      prevent other tasks accidentally viewing any confidential or
I      sensitive data that was being stored by this transaction in
I      task-lifetime storage.
N
D    TASKDATAKEY(USER | CICS)
I      Specifies the storage key of the storage
I      that CICS allocates at task initialization for the duration of the
I      task (task-lifetime storage), and which is accessible by the
I      application. These storage areas are the EXEC interface block
I      (EIB) and the transaction work area (TWA).
N
I      TASKDATAKEY also specifies the key of the storage that CICS
I      obtains on behalf of all programs that run under the transaction.
I      The program-related storage that CICS allocates in the specified
I      key includes these items:
N
I      -> The copies of working storage that CICS obtains for each run
I         of an application program.
N
I      -> The storage that CICS obtains for the program in response to
I         implicit and explicit GETMAIN requests. For example, the program
I         can request storage by a GETMAIN or GETMAIN64 command, or as a
I         result of the SET option on other CICS commands.
N
I      You must specify TASKDATAKEY(USER) if any of the programs in the
I      transaction is defined with EXECKEY(USER). If you specify
I      TASKDATAKEY(CICS) for a transaction, an attempt to run any
I      program in user key under this transaction leads to a task abend,
I      with abend code AEZD.
N
I      USER: CICS obtains user-key storage for this transaction.
I        Application programs running in any key can both read and modify
I        these storage areas.
N
I        User-key programs of transactions defined with ISOLATE(YES) have
I        access only to the user-key task-lifetime storage of their own
I        tasks.
N
I        User-key programs of transactions defined with ISOLATE(NO) also
I        have access to the user-key task-lifetime storage of other tasks
I        defined with ISOLATE(NO).
N
I        See the description of the EXECKEY attribute on the PROGRAM
I        definition for more information about task storage protection.
N
I      CICS: CICS obtains CICS-key storage for this transaction.
I        Application programs running in CICS key can both read and
I        modify these storage areas. Application programs running in
I        user key can only read these storage areas.
N
D    TASKDATALOC(BELOW | ANY)
I      Specifies whether task-lifetime storage
I      acquired by CICS for the duration of the transaction can be located
I      above the 16 MB line in virtual storage. These areas, which relate
I      to specific CICS tasks, include the EXEC interface block (EIB) and
I      the transaction work area (TWA).
N
I      You must specify TASKDATALOC(BELOW) if any of the programs that
I      make up the transaction runs in 24-bit addressing mode. This
I      restriction also applies to task-related user exits running on
I      behalf of the transaction).
N
I      For transactions that do not satisfy any of these conditions, you
I      can specify ANY to obtain the associated virtual storage constraint
I      relief.
N
I      CICS monitors the use of TASKDATALOC(ANY), particularly the
I      following actions:
N
I      -> An attempt to call an AMODE 24 program running under a
I         transaction defined with TASKDATALOC(ANY) results in an AEZC
I         abend.
N
I      -> An attempt to issue an EXEC CICS command or call a task-related
I         user exit while running AMODE(24) with TASKDATALOC(ANY)
I         specified results in an AEZA abend.
N
I      -> An AMODE 31 program running as a transaction with
I         TASKDATALOC(ANY), which attempts to call a task-related user
I         exit that is forced to run AMODE(24), results in an AEZB abend.
N
I      -> If a task-related user exit that is forced to run in AMODE 24
I         is enabled for task start, CICS forces TASKDATALOC(BELOW) for
I         all transactions for the remainder of the CICS run.
N
I      BELOW: Storage areas that CICS acquires for the transaction must
I        be located below the 16 MB line.
N
I      ANY: Storage areas that CICS acquires for the transaction can be
I        located above the 16 MB line in virtual storage.
N
D    TASKREQ(LPA | MSRE | OPID | PA1-3 | PF1-24)
I      Specifies whether a transaction is to be initiated
I      by pressing a function (F or PF) key, by using a light pen, or by
I      using a card. Possible values are as follows:
N
I      -> PA1, PA2, or PA3 for PA keys.
N
I      -> PF1 through PF24 for function keys.
N
I      -> OPID for the operator identification card reader.
N
I      -> LPA for a light-pen-detectable field on a 3270 device.
N
I      -> MSRE for the 10/63 character magnetic slot reader.
N
I      For PA and PF keys, be aware of the following:
N
I      -> If a PA or PF key is specified in the PRINT system
I         initialization parameter, you cannot use the same PF key as the
I         TASKREQ to initiate a transaction.
N
I      -> PA or PF keys specified in the SKRxxxx system initialization
I         parameter as page retrieval keys are interpreted as such during
I         a page retrieval session. You can use the same keys to initiate
I         transactions at other times. Define the keys with the following
I         values:
N
I          TASKREQ=KEY-ID
I          PROGRAM=DFHTPR
I          TWASIZE=1024
I          TPURGE=NO
I          SPURGE=NO
N
I      -> If you define a transaction with PROGRAM(DFHTPR) and define a
I         TASKREQ key, the key initiates the transaction and opens the
I         page retrieval session at the same time.
N
I    TCLASS: This attribute is obsolete, but is supported to provide
I      compatibility with earlier releases of CICS.
N
D    TPNAME(tpname)
I      Specifies the name of the transaction that can be used
I      by an APPC partner if the 4-character length limitation of the
I      TRANSACTION attribute is too restrictive. This name can be up to
I      64 characters in length.
N
I      If this range of characters is not sufficient for a name that you
I      want to specify, you can use the XTPNAME attribute instead of
I      TPNAME.
N
D    TPURGE(NO | YES)
I      Specifies, for non-z/OS Communications Server
I      terminals only, whether the transaction can be purged because of
I      a terminal error.
N
I      NO: The task cannot be purged when a terminal error occurs. Manual
I        intervention by the master terminal operator is required when
I        this happens.
N
I      YES: The task can be purged when a terminal error occurs.
N
D    TRACE(YES | NO)
I      Specifies whether the activity of this transaction
I      is to be traced.
N
I      YES: Trace the activity for this transaction.
N
I      NO: Do not trace the activity for this transaction.
N
I      The CICS-provided transaction definitions for CEDF and CSGM
I      specify TRACE(NO).
N
D    TRANCLASS(DFHTCL00 | tranclass)
I      Specifies the name of the transaction
I      class to which the transaction belongs. Transactions belonging to
I      a transaction class are subject to scheduling constraints before
I      they are allowed to run. The reserved TRANCLASS name DFHTCL00 is
I      used to indicate that the transaction does not belong to any
I      transaction class.
N
I      If a transaction is run and its associated TRANCLASS definition is
I      not installed, the transaction runs without any of the scheduling
I      constraints specified in the TRANCLASS. Message DFHXM0212 is issued
I      as a warning. TRANCLASS can be up to 8 characters in length.
N
I    TRANSEC: This attribute is obsolete, but is supported to provide
I      compatibility with earlier releases of CICS.
N
D    TRPROF(DFHCICSS | profile)
I      Specifies the name of the PROFILE for
I      the session that carries intersystem flows during ISC transaction
I      routing. The name can be up to 8 characters in length.
N
I      You can specify this option only for remote transactions.
N
D    TWASIZE(0 | number)
I      Specifies the size in bytes of the transaction
I      work area to be acquired for this transaction. Specify a
I      1- to 5-digit decimal value in the range 0 - 32767.
N
I      Note:
I      1. Your storage might be corrupted if your TWASIZE is too small.
N
I      2. Do not change the TWASIZE of the CICS-supplied transactions.
N
D    WAIT(YES | NO)
I      Specifies whether an indoubt unit of work (UOW) is
I      to wait, pending recovery from a failure that occurs after the
I      UOW has entered the indoubt state.
N
I      Old-style transaction definitions using INDOUBT(WAIT) are accepted
I      by CICS, and are interpreted as WAIT(YES) ACTION(BACKOUT).
N
I      YES: The UOW is to wait, pending recovery from the failure, to
I        resolve its indoubt state and determine whether recoverable
I        resources are to be backed out or committed. In other words,
I        the UOW is to be shunted.
N
I        Recoverable resources can include one of the following:
N
I        -> DBCTL databases
N
I        -> DB2 databases
N
I        -> Temporary storage queues
N
I        -> Logically recoverable intrapartition transient data queues
I           that specify WAIT(YES) in the TDQUEUE definition
N
I        -> VSAM data sets
N
I        -> BDAM data sets
N
I        The WAIT(YES) option takes effect if none of the following
I        applies:
N
I        -> The transaction has subordinate MRO sessions to back-level
I           systems.
N
I        -> The transaction has LU6.1 subordinate sessions. Note that,
I           in this context, LU6.1 IMS sessions are not subordinates.
N
I        -> The transaction has more than one session and its coordinator
I           session is to a back-level system, or LU6.1.
N
I        -> The task-related user exits attached to the transaction do not
I           support the CICS indoubt protocols.
N
I        If none of the previous exceptions applies, but you have
I        subordinate LU6.2 sessions to systems other than CICS Transaction
I        Server for z/OS systems that do not use the CICS Transaction
I        Server for z/OS indoubt architecture, CICS can indicate that the
I        subordinate must wait by forcing session outage.
N
I        If any resources cannot wait for indoubt resolution by the
I        coordinator, a decision is taken for the transaction in
I        accordance with the ACTION attribute. In practice, the only
I        circumstances that force decisions in this way are updates to
I        transient data queues with WAIT(NO) specified in the TDQUEUE
I        definition, and installations of terminal-related resources. The
I        latter are typically installed using an INSTALL command.
N
I        Table 13 (IN THE MANUAL) shows how the WAIT attribute defined
I        on a TRANSACTION definition and a logically recoverable TDQUEUE
I        definition are resolved when they conflict.
N
I      NO: The UOW is not to wait. CICS immediately takes whatever action
I        is specified on the ACTION attribute.
N
I        If the UOW references more than one transient data queue, and
I        the queues have inconsistent WAIT options, WAIT(NO) always takes
I        precedence and overrides a WAIT(YES). Therefore, a WAIT(NO) on
I        one TDQUEUE definition forces a failed indoubt UOW to take either
I        the BACKOUT or COMMIT attribute defined on the TRANSACTION
I        definition of the UOW.
N
D    WAITTIME(0,0,0 | dd,hh,mm)
I      Specifies how long a transaction is
I      to wait before taking a decision about an indoubt unit of work,
I      based on what is specified in the ACTION attribute.
N
I      00,00,00: The transaction waits indefinitely.
N
I      dd,hh,mm: The time, in days, hours, and minutes, for which the
I        transaction is to wait. The maximum value is 99,23,59.
N
I      WAITTIME takes effect only if WAIT(YES) is specified.
N
D    XTPNAME(xtpname)
I      You can use this attribute as an alternative to
I      TPNAME. Enter a hexadecimal string up to 128 characters in length,
I      representing the name of the transaction that can be used by an
I      APPC partner. All hexadecimal combinations are acceptable except
I      X'40'. To specify an XTPNAME more than 72 characters long to
I      DFHCSDUP, put an asterisk in column 72. The asterisk causes the
I      following line to be concatenated to the current line.
N
D    XTRANID(xtranid)
I      Specifies another name to be used instead of the
I      TRANSACTION name for initiating transactions. The name can be up
I      to 8 hexadecimal digits in length. Because XTRANID is specified
I      in hexadecimal form, you can use a name that contains characters
I      that you cannot specify in the TRANSACTION attribute.
N
I      See also TASKREQ, another transaction alias that can be specified.
N
I      xtranid: A 4-byte transaction identifier in hexadecimal notation;
I        the identifier therefore uses up to 8 hexadecimal digits. If you
I        specify fewer than 8 hexadecimal digits, the identifier is padded
I        on the right with blanks.
N
I      Certain values are reserved for use by CICS, and so the values
I      that you can specify are restricted:
N
I      -> The first byte must not be X'C3'.
N
I      -> The first byte must not be less than or equal to X'40'.
N
I      -> The value must not be X'00000000'.
N
I      -> The last 3 bytes must not be X'FFFFFF'.
N
I      Avoid using values in the range X'00' through X'3F' in the second,
I      third, and fourth bytes if the transaction is to be attached by
I      unsolicited data received from a terminal defined as a 3270 device,
I      because CICS interprets these values as control characters, and not
I      as part of the transaction identifier. For example, if you issue
I      EXEC CICS RETURN or EXEC CICS START and specify
I      TRANSID(X'41303238'), the correct transaction is attached. However,
I      if you issue EXEC CICS RETURN without specifying a TRANSID, and the
I      3270 device transmits data that begins with X'41303238', CICS
I      attempts to attach a transaction as if X'41404040' had been
I      transmitted.
* End of WISH.
