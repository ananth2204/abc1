SREXR0606
Tz/OS TSO/E REXX Reference
T-Chapter 6.
T-Definition
T-Numeric comparisons
E"Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20180522-155741
*
@IBM Corporation
*
Bikj4a3a0.pdf
BSA22-7790-10 z/OS TSO/E REXX Reference
BVersion 1 Release 13
*
Nz/OS TSO/E REXX Reference
N=========================
NChapter 6. Numbers and arithmetic
N---------------------------------
NDefinition
N----------
NNumeric comparisons
N-------------------
NThe comparison operators are:
N
N  =             True if the terms are equal (numerically or when
N                padded, and so forth)
N  \=, ,=, /=    True if the terms are not equal (inverse of =)
N  >             Greater than
N  <             Less than
N  ><            Greater than or less than (same as not equal)
N  <>            Greater than or less than (same as not equal)
N  >=            Greater than or equal to
N  \<, ,<        Not less than
N  <=            Less than or equal to
N  \>, ,>        Not greater than
N  ==            True if terms are strictly equal (identical)
N  \==, ,==, /== True if the terms are NOT strictly equal
N  (inverse of ==)
N  >>            Strictly greater than
N  <<            Strictly less than
N  >>=           Strictly greater than or equal to
N  \<<, ,<<      Strictly NOT less than
N  <<=           Strictly less than or equal to
N  \>>, ,>>      Strictly NOT greater than
N
NGuideline: Throughout the language, the not character, ,, is synonymous
Nwith the backslash (\). You can use the two characters interchangeably,
Naccording to availability and personal preference. The backslash can
Nappear in the following operators:
N  \ (prefix not), \=, \==, \<, \>, \<<, and \>>.
M
MMessage from Kenneth Tomiak
MEmulator keyboards rarely have the not-sign character so
Mthe 'Kenneth Tomiak Programming Method' (KTPM07) recommends not using
Mit. It also recommends not using the backslash and instead code the
Mpositive check with an ELSE DO for the negative check.
N
NYou can use any of these for comparing numeric strings. However, you
Nshould not use ==, \==, ,==, >>, \>>, ,>>, <<, \<<, and ,<< for
Ncomparing numbers because leading and trailing blanks and leading
Nzeros are significant with these operators.
N
N
NLogical (boolean)
N-----------------
NA character string is taken to have the value false if it is 0, and
Ntrue if it is 1. The logical operators take one or two such values
N(values other than 0 or 1 are not allowed) and return 0 or 1 as
Nappropriate:
N
N  & AND:                  Returns 1 if both terms are true.
N  | Inclusive OR:         Returns 1 if either term is true.
N  && Exclusive OR:        Returns 1 if either (but not both) is true.
N  Prefix \,, Logical NOT: Negates; 1 becomes 0, and 0 becomes 1
N
N
NParentheses and operator precedence
N-----------------------------------
NExpression evaluation is from left to right; parentheses and operator
Nprecedence modify this:
N
N-> When parentheses are encountered (other than those that identify
N   function calls) the entire subexpression between the parentheses
N   is evaluated immediately when the term is required.
N-> When the sequence:
N     term1 operator1 term2 operator2 term3
N   is encountered, and operator2 has a higher precedence than
N   operator1, the subexpression (term2 operator2 term3) is evaluated
N   first. The same rule is applied repeatedly as necessary.
N
NNote, however, that individual terms are evaluated from left to right
Nin the expression (that is, as soon as they are encountered). The
Nprecedence rules affect only the order of operations.
* End of WISH.
