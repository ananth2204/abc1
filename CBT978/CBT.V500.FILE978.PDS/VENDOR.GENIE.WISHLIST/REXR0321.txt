SREXR0321
KWHEN
Tz/OS TSO/E REXX Reference
T-Chapter 3.
T-Instructions
T-SELECT
E"Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20180522-155540
*
@IBM Corporation
*
Bikj4a3a0.pdf
BSA22-7790-10 z/OS TSO/E REXX Reference
BVersion 1 Release 13
*
Nz/OS TSO/E REXX Reference
N=========================
NChapter 3. Keyword instructions
N-------------------------------
NInstructions
N------------
NSELECT
N------
NSELECT conditionally calls one of several alternative
Ninstructions.
N
N
NSyntax:
D  SELECT
D    WHEN (expression) THEN DO
D      instruction list | NOP
D    END
D    WHEN (expression) THEN DO
D      instruction list | NOP
D    END
D    OTHERWISE DO
D      instruction list | NOP | null
D    END
D  END
I
I    (expression): Each expression after a WHEN is evaluated in turn
I                  and must result in 0 or 1. If the result is 1, the
I                  instruction following the associated THEN (which may
I                  be a complex instruction such as IF, DO, or SELECT)
I                  is processed and control then passes to the END. If
I                  the result is 0, control passes to the next WHEN
I                  clause.
N
I    instruction list: The instruction can be any assignment, command,
I                      or keyword instruction, including any of the
I                      more complex constructs such as DO, IF, or the
I                      SELECT instruction itself.
N
I                      A null clause is not an instruction, so putting
I                      an extra semicolon (or label) after a THEN clause
I                      is not equivalent to putting a dummy instruction.
I                      The NOP instruction is provided for this purpose.
N
I    OTHERWISE: If none of the WHEN expressions evaluates to 1, control
I               passes to the instructions, if any, after OTHERWISE. In
I               this situation, the absence of an OTHERWISE causes an
I               error (but note that you can omit the instruction list
I               that follows OTHERWISE).
N
M
MMessage from Kenneth Tomiak
MThe extra DO/END on the first WHEN and on OTHERWISE comply with my
M'Kenneth Tomiak Programming Method' (KTPM07) for
Mconsistency, readability, and future expansion.
N
N
NExample:
I  balance = 100
I  check = 50
I  DO ix = 1 TO 3
I    old_balance = balance
I    balance = balance - check
I    SAY old_balance "-" check "=" balance
I    SELECT
I      WHEN balance > 0 THEN DO
I        SAY "Congratulations! You still have" balance "dollars left."
I      END /* WHEN  balance > 0*/
I      WHEN balance = 0 THEN DO
I        SAY "Attention, Balance is now zero! STOP all spending."
I        SAY "You cut it close this month! Hope you do not have any"
I        SAY "checks left outstanding."
I      END /* WHEN balance = 0*/
I      OTHERWISE DO
I        SAY "You have just overdrawn your account."
I        SAY "Your balance now shows" balance "dollars."
I        SAY "Oops! Hope the bank does not close your account."
I      END /* OTHERWISE */
I    END /* Select */
I  END /* DO ix */
* End of WISH.
