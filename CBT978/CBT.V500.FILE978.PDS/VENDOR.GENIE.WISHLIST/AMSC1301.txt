SAMSC1301
TDFSMS AMS
T-Chapter 13.
T-Syntax for DEFINE ALTERNATEINDEX Parameters
EKenneth Tomiak <KenTomiak@KTomiak.org>
Z20180512-148953
*
@IBM Corporation
*
Bdgt2i2a1.pdf: SC26-7394-13: z/OS
BDFSMS Access Method Services for Catalogs
BVersion 1 Release 13
*
NAccess Method Services for Catalogs
N-----------------------------------
NChapter 13. DEFINE ALTERNATEINDEX
N---------------------------------
NSyntax for DEFINE ALTERNATEINDEX Parameters
N-------------------------------------------
D  DEFINE /* Abbreviation: DEF */ -
N
NALTERNATEINDEX parameters
N-------------------------
D    ALTERNATEINDEX( /* Abbreviation: AIX */ -
I      Defines an alternate index or re-catalogs an alternate index
I      entry.
N
I      The ALTERNATEINDEX keyword is followed by the parameters for the
I      alternate index as a whole. These parameters are enclosed in
I      parentheses and, optionally, are followed by parameters given
I      separately for the DATA and INDEX components.
N
D      NAME(aliasname) -
I        The name of the ALTERNATEINDEX component.
I
I        The alternate index's entryname or the name of each of its
I        components. The entry name specified for the alternate index
I        as a whole is not propagated to the alternate index's
I        components.
N
I        You can define a separate entry name for the alternate index,
I        its data component, and its index component. If you do not give
I        a name for the data or index component, one is generated. For
I        more information about the system-generated name format, see
I        z/OS DFSMS Managing Catalogs.
N
I        When the alternate index, data component, and index component
I        are individually named, each can be addressed.
N
D      RELATE(entryname) /* Abbreviation: REL */ -
I        Names the alternate index base cluster. The base cluster is
I        an entry-sequenced cluster or a key-sequenced cluster to which
I        the alternate index is to be related. You cannot relate an
I        alternate index to a reusable cluster, to a fixed-length or
I        variable-length RRDS, an extended addressable ESDS, a catalog,
I        a VVDS (data set name 'SYS1.VVDS.Vvolser'), another alternate
I        index, a linear data set, or a non-VSAM data set. An
I        SMS-managed alternate index has the same management class and
I        storage class as its base cluster.
N
I        Select the entryname so that the multilevel alias facility
I        selects the same catalog as the one containing the related
I        data set name.
N
D      CYLINDERS(primary secondary) | /* Abbreviation: CYL */ -
D      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -
D      MEGABYTES(primary secondary) | /* Abbreviation: MB */ -
D      RECORDS(primary secondary) | /* Abbreviation: REC */-
D      TRACKS(primary secondary) /* Abbreviation: TRK */ -
I        The amount of space in cylinders, kilobytes, megabytes,
I        records, or tracks allocated to the alternate index from the
I        volume's available space. A kilobyte and megabyte allocation
I        resolves to either tracks or cylinders; records are allocated
I        to the nearest track boundary. Exception: If allocation
I        resolves to tracks, the space is contiguous. For more
I        information, see "Optimizing Control Area Size" in
I        z/OS DFSMS Using Data Sets.
N
I        Requests for space are directed to DADSM and result in a
I        format-1 DSCB for the data and index component entries.
N
I        If you do not use the MODEL parameter or the RECATALOG
I        parameter, you must include one, and only one, of these
I        parameters: CYLINDERS, KILOBYTES, MEGABYTES, RECORDS, or
I        TRACKS.
N
I        The space parameter is optional if the cluster is SMS-managed,
I        but if you do not use it, space can be modeled or defaulted by
I        SMS. If it is not determined, the DEFINE is unsuccessful. The
I        maximum space can be specified with unit of KILOBYTES or
I        MEGABYTES is 16,777,215. If the amount requested exceeds this
I        value, you should specify a different larger allocation unit.
N
I        To maintain device independence, do not use the TRACKS or
I        CYLINDERS parameters. If you do not use TRACKS or CYLINDERS
I        for an SMS-managed alternate index, space is allocated on the
I        volume selected by SMS.
N
M          These days the only mainframe DASD devices in use are
M          likely to be 3390 and thus the caution about device
M          independence is no longer applicable. If you have something
M          else it is way past time to migrate to the current geometry.
N
I        When you do not divide the data component into key ranges, and
I        more than one volume is given, the primary amount of space is
I        allocated only on the first volume when the component is
I        defined. When the component increases to extend to additional
I        volumes, the first allocation on each overflow volume is the
I        primary amount.
N
M          Since you can no longer specify KEYRANGE the above paragraph
I          should be modified by IBM.
N
I        Secondary amounts can be allocated on all volumes available to
I        contain parts of the alternate index, regardless of the key
I        ranges when the alternate index is extended.
N
I        You can include the amount of space as a parameter of
I        ALTERNATEINDEX, as a parameter of DATA, or as a parameter of
I        both DATA and INDEX.
N
I        -> If the space is specified as a parameter of ALTERNATEINDEX,
I           the amount specified is divided between the data and index
I           components. The division algorithm is a function of control
I           interval size, record size, device type, and other data set
I           attributes.
N
I           If the division results in an allocation for the data
I           component that is not an integral multiple of the required
I           control area size, the data component's allocation is
I           rounded up to the next higher control area multiple. This
I           rounding can result in a larger total allocation for your
I           alternate index than what you specified.
N
I           If the space is specified as a parameter of DATA, the entire
I           amount given is allocated to the data component. An
I           additional amount of space, depending on control interval
I           size, record size, device type, and other data set
I           attributes, is allocated to the index component.
N
I        To determine the exact amount of space allocated to each
I        component, list the alternate index's catalog entry, using
I        the LISTCAT command.
N
I        The primary and each secondary allocation must be able to be
I        satisfied within five extents; otherwise, your DEFINE or data
I        set extension is unsuccessful. You can use these keywords for
I        both SMS managed and non-SMS-managed data sets.
N
I        primary: Allocates the initial amount of space to the
I        alternate index.
N
I        secondary: Allocates the amount of space each time the
I        alternate index extends, as a secondary extent. If the
I        secondary space allocation is greater than 4.0 gigabytes, it
I        is reduced to an amount as close to 4.0 GB as possible,
I        without going over. This is not true for extended
I        addressability data sets, which have no such space limitation.
I        When you use secondary, space for the alternate index's data
I        and index components can be expanded to a maximum of
I        123 extents.
N
D      BUFFERSPACE(size) /* Abbreviations: BUFSP or BUFSPC */ -
I        Provides the minimum space for buffers. VSAM determines the
I        data component's and index component's control interval size.
I        If you do not use BUFFERSPACE, VSAM provides enough space to
I        contain two data component control intervals and, if the data
I        is key-sequenced, one index component control interval.
N
I        size: is the buffer of space. You can use decimal (n),
I          hexadecimal (X'n'), or binary (B'n'). The size cannot be
I          less than enough space to contain two data component control
I          intervals and, if the data is key sequenced, one index
I          control interval.
N
I          If the buffer size is less than VSAM requires to run your
I          job, it will be treated as though the parameter was not
I          specified and the buffer size will be set to the default
I          value.
N
I          Exception: When you use RLS or DFSMStvs access, DFSMS ignores
I          BUFFERSPACE.
N
I          Note: The limitations of the bufferspace value on how many
I          buffers will be allocated is based on storage available in
I          your region, and other parameters or attributes of the data
I          set.
N
D      CONTROLINTERVALSIZE(size) /* Abbreviations: CISZ or CNVSZ */ -
I        Defines the size of the alternate index's control intervals.
I        This depends on the maximum size of data records, and on the
I        amount of buffer space given. LSR/GSR buffering technique
I        users can ensure buffer pool selection by explicitly defining
I        data and index control interval sizes.
N
I        When you do not specify the control interval size, VSAM
I        determines the control interval size. If you have not specified
I        BUFFERSPACE and the size of your records permits, VSAM selects
I        the optimum size for the data control interval size and
I        512 bytes for the index control interval size.
N
I        size: The size of the alternate index's data and index
I          components.
N
I          Because an alternate index always has the spanned attribute,
I          the control interval size can be less than the maximum
I          record length. You can define a size from 512, to 8K in
I          increments of 512 or from 8K to 32K in increments of 2K
I          (where K is 1024 in decimal notation). If you use a size
I          that is not a multiple of 512 or 2048, VSAM chooses the
I          next higher multiple.
N
I          The index control interval should be large enough to
I          accommodate all of the compressed keys in a data control
I          area. If the index control interval size is too small,
I          unnecessary control area splits can occur. After the first
I          define (DEFINE), a catalog listing ( LISTC ) shows the number
I          of control intervals in a control area and the key length
I          of the data set. To make a general estimate of the index
I          control interval size needed, multiply one-half of the key
I          length (KEYLEN) by the number of data control intervals per
I          control area (DATA CI/CA):
N
I          (KEYLEN/2 ) * DATA CI/CA <= INDEX CISIZE
N
I          For information about the relationship between control
I          interval size and physical block size, see z/OS DFSMS Using
I          Data Sets for the relationship between control interval size
I          and physical block size. This document also includes
I          restrictions that apply to control interval size and
I          physical block size.
N
D      DATACLASS(class) /* Abbreviation: DATACLAS */ -
I        The 1 to 8 character name of the data class for the data set.
I        The DATACLASS parameter provides the allocation attributes for
I        new data sets. Your storage administrator defines the data
I        class. However, you can override the parameters defined for
I        DATACLASS by explicitly defining other attributes. Search
I        "Understanding the Order of Assigned Data Set Attributes" for
I        the order of precedence (filtering) the system uses to select
I        which attribute to assign. The record organization attribute
I        of DATACLASS is not used for DEFINE ALTERNATEINDEX.
n
i        DATACLASS parameters apply to both SMS-managed and
I        non-SMS-managed data sets. If DATACLASS is used and SMS is
I        inactive, the DEFINE is unsuccessful.
N
D      ERASE | NOERASE /* Abbreviations: ERAS and NERAS */-
I        indicates if the records of the alternate index components are
I        erased when the alternate index is deleted.
N
I        ERASE: Requires the records of the alternate index components
I          are overwritten with binary zeros when the alternate index
I          is deleted. If the base cluster of the alternate index is
I          protected by a RACF generic or discrete profile and the base
I          cluster is cataloged in a catalog, you can use RACF commands
I          to specify an ERASE attribute as part of this profile so that
I          the component is automatically erased upon deletion.
N
I        NOERASE: Specifies that the records of the alternate index
I          components are not to be overwritten with binary zeros.
I          NOERASE prevents the component from being erased if the base
I          cluster of the alternate index is protected by a RACF
I          generic or discrete profile that specifies the ERASE
I          attribute and if the base cluster is cataloged in a catalog.
I          You can use RACF commands to alter the ERASE attribute in a
I          profile.
N
D      EXCEPTIONEXIT(entrypoint) /* Abbreviation: EEXT */ -
I        The name of your exception exit routine, that receives control
I        when an exceptional I/O error condition occurs during the
I        transfer of data between your program's address space and the
I        alternate index's direct access storage space. (An exception
I        is any condition that causes a SYNAD exit to be taken.) The
I        component's exception exit routine is processed first; then
I        SYNAD exit routine receives control. If an exception exit
I        routine is loaded from an unauthorized library during access
I        method services processing, an abnormal termination occurs.
N
D      FILE(ddname) -
I        Names the DD statement that identifies the direct access
I        devices and volumes on which to allocate space to the alternate
I        index. If more than one volume is specified in a volume list,
I        all volumes must be the same device type.
N
I        When the data component and index component are to reside on
I        different devices, you can create a separate FILE parameter as
I        a parameter of DATA and INDEX to point to different DD
I        statements. If the FILE parameter is not used, an attempt is
I        made to dynamically allocate the required volumes. The volumes
I        must be mounted as permanently resident or reserved.
N
I        The DD statement you specify must be:
N
I          //ddname    DD DISP=OLD,
I          //             UNIT=(devtype,count),VOL=SER=(volser1,...)
N
I        Restriction: When FILE refers to more than one volume of the
I        same device type, the DD statement that describes the volumes
I        cannot be a concatenated DD statement.
N
D      FREESPACE(CI-% CA-% | 0 0) /* Abbreviation: FSPC */ -
I        Designates the amount of empty space left after any primary or
I        secondary allocation and any split of control intervals
I        (CI-percent) and control areas (CA-percent) when the alternate
I        index is built (search Chapter 8, "BLDINDEX"). The empty space
I        in the control interval and control area is available for data
I        records that are updated and inserted after the alternate
I        index is initially built. The amounts are specified as
I        percentages. CI-percent translates into a number of bytes that
I        is either equal to, or slightly less than, the percentage
I        value of CI-percent. CA-percent translates into a number of
I        control intervals that is either equal to, or less than, the
I        percentage of CA-percent.
N
I        The percentages must be equal to, or less than, 100. When you
I        use 100% of free space, one data record is placed in the first
I        control interval of each control area when the alternate index
I        is built.
N
D      KEYS(length offset | 64 0) -
I        Describes the alternate-key field in the base cluster's data
I        record.
N
I        The key field of an alternate index is called an alternate key.
I        The data record's alternate key can overlap or be contained
I        entirely within another (alternate or prime) key field.
N
I        The length plus offset cannot be greater than the length of
I        the base cluster's data record.
N
I        When the base cluster's data record spans control intervals,
I        the record's alternate-key field is within the record's first
I        segment (that is, in the first control interval).
N
I        length offset: Gives the length of the alternate key, in bytes,
I          and its displacement from the beginning of the base cluster's
I          data record, in bytes.
N
D      MODEL(entryname catname) -
I        Uses existing entry as a model for the entry being defined or
I        re-cataloged. DATACLASS, MANAGEMENTCLASS, and STORAGECLASS
I        cannot be modeled. Search "Understanding the Order of Assigned
I        Data Set Attributes" for information on how the system selects
I        modeled attributes.
N
I        You can use an existing alternate index's entry as a model for
I        the attributes of the alternate index being defined. For
I        details about how a model is used, see z/OS DFSMS Managing
I        Catalogs.
N
I        You can use some attributes of the model and override others
I        by defining them in the cluster or component. If you do not
I        want to add or change any attributes, use only the entry type
I        of the model (alternate index, data, or index) and the name of
I        the entry to be defined.
N
I        When you use an alternate index entry as a model for an
I        alternate index, the model entry's data and index components
I        are used as models for the to-be-defined entry's data and index
I        components, unless another entry is specified with the MODEL
I        parameter as a subparameter of DATA or INDEX.
N
I        entryname: Names the entry to be used as a model.
N
I        catname: Names the model entry's catalog. You must identify the
I          catalog that contains the model entry when you want to assign
I          the catalog's password instead of the model entry's password.
N
I          If the catalog's volume is physically mounted, it is
I          dynamically allocated. The volume must be mounted as
I          permanently resident or reserved. Search "Catalog Selection
I          Order for DEFINE" for information about the order in which
I          a catalog is selected when the catalog's name is not
I          specified.
N
D      OWNER(ownerid) -
I        Gives the identification of the alternate index's owner.
N
I        For TSO/E users, if the OWNER parameter does not identify the
I        owner, the TSO/E user's userid becomes the ownerid value.
N
D      RECATALOG | NORECATALOG /* Abbreviations: RCTLG and NRCTLG */ -
I        Specifies whether the catalog entries for the alternate index
I        components are re-created from information in the VVDS.
N
I        RECATALOG /* Abbreviation: RCTLG */: Recreates the catalog
I          entries if valid VVDS entries are found on the primary VVDS
I          volume. If not, the command ends.
N
I          Use of RECATALOG requires that the NAME, RELATE, and VOLUMES
I          parameters be specified as they were when the alternate index
I          was originally defined. If you use RECATALOG, you are not
I          required to include CYLINDERS, RECORDS, or TRACKS.
N
I          If ATTEMPTS, AUTHORIZATION, CATALOG, CODE, MODEL, NOUPGRADE,
I          or OWNER parameters were used during the original define,
I          they must be entered again with RECATALOG to restore their
I          original values; otherwise, their default values are used.
N
I        NORECATALOG /* Abbreviation: NRCTLG */: Specifies that the
I          catalog entries are not to be re-created from VVDS entries.
I          Catalog entries are created for the first time.
N
D      RECORDSIZE(average maximum | 4086 32600) -
I        The average and maximum length, in bytes, of an alternate
I        index record.
N
I        An alternate index record can span control intervals, so
I        RECORDSIZE can be larger than CONTROLINTERVALSIZE. The formula
I        for the maximum record size of spanned records as calculated
I        by VSAM is:
N
I          MAXLRECL = CI/CA * (CISZ - 10)
N
I        where:
N
I        -> MAXLRECL is the maximum spanned record size
N
I        -> CI/CA represents the number of control intervals per
I           control area
N
I        -> CA is the number of control areas
N
I        -> CISZ is the quantity control interval size
N
I        You can use either of the following formulas to determine the
I        size of the alternate index record:
N
I        -> When the alternate index supports a key-sequenced base
I           cluster, use this formula:
N
I           RECSZ = 5 + AIXKL + (n x BCKL)
N
I        -> When the alternate index supports an entry-sequenced base
I           cluster, use this formula:
N
I           RECSZ = 5 + AIXKL + (n x 4)
N
I        Variables in the formulas represent these values:
N
I        -> RECSZ is the average record size.
N
I        -> AIXKL is the alternate-key length (see the KEYS parameter).
N
I        -> BCKL is the base cluster's prime-key length. (You can enter
I           the LISTCAT command to determine this base cluster's
I           prime-key length).
N
I        -> n = 1 when UNIQUEKEY is specified (RECSZ is also the maximum
I           record size).
N
I        -> n = the number of data records in the base cluster that
I           contain the same alternate-key value, when NONUNIQUEKEY is
I           specified.
N
I        When you use NONUNIQUEKEY, give a record size large enough to
I        allow for as many key pointers or RBA pointers as you might
I        need. The record length values apply only to the alternate
I        index's data component.
N
I        Restriction: REPRO to non-VSAM targets and EXPORT do not
I        support data sets with record sizes greater than 32760. The
I        maximum number of prime keys that a single alternate index
I        logical record can contain is 32767.
N
D      REUSE | NOREUSE /* Abbreviations: RUS and NRUS */ -
I        Indicates whether or not the alternate index can be used again
I        as a new alternate index.
N
I        REUSE /* Abbreviation: RUS */: Indicates that the alternate
I          index can be used over again as a new alternate index. When
I          a reusable alternate index is opened, its high-used RBA can
I          be set to zero. Open it with an access control block using
I          the RESET attribute.
N
I          When you use BLDINDEX to build a reusable alternate index,
I          the high-used RBA is always reset to zero when the alternate
I          index is opened for BLDINDEX processing.
N
I          Reusable alternate indexes can be multivolumed and might have
I          up to 123 physical extents.
N
I          Exception: If you use the keyword UNIQUE with REUSE, the
I          DEFINE command is unsuccessful.
N
I        NOREUSE /* Abbreviation: NRUS */: Specifies that the alternate
I          index cannot be used again as a new alternate index.
N
D      SHAREOPTIONS(crossregion crosssystem | 1 3) -
D        /* Abbreviation: SHR */ -
I        Specifies how an alternate index's data or index component can
I        be shared among users. However, SMS-managed volumes, and
I        catalogs containing SMS-managed data sets, must not be shared
I        with non-SMS systems. For data integrity, ensure that share
I        options defined for data and index components are the same.
I        For a description of data set sharing, see z/OS DFSMS Using
I        Data Sets.
N
I        crossregion: Indicates the amount of sharing allowed among
I          regions within the same system or within multiple systems
I          using global resource serialization (GRS). Independent job
I          steps in an operating system, or multiple systems in a GRS
I          ring, can access a VSAM data set concurrently. For more
I          information about GRS, see z/OS MVS Planning: Global Resource
I          Serialization. To share a data set, each user must include
I          DISP=SHR in the data set's DD statement. You can use the
I          following options:
N
I        1: The data set can be shared by any number of users for read
I           processing, or the data set can be accessed by only one user
I           for read and write processing. This setting does not allow
I           any non-RLS access when the data set is already open for
I           VSAM RLS or DFSMStvs processing. An RLS or DFSMStvs open
I           fails with this option if the data set is already open for
I           any processing.
N
I        2: The data set can be accessed by any number of users for read
I           processing, and it can also be accessed by one user for
I           write processing. It is the user's responsibility to provide
I           read integrity. VSAM ensures write integrity by obtaining
I           exclusive control for a control interval while it is being
I           updated. A VSAM RLS or DFSMStvs open is not allowed while
I           the data set is open for non-RLS output.
N
I           If the data set has already been opened for VSAM RLS or
I           DFSMStvs processing, a non-RLS open for input is allowed;
I           a non-RLS open for output fails. If the data set is opened
I           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is
I           allowed.
N
I        3: The data set can be fully shared by any number of users. The
I           user is responsible for maintaining both read and write
I           integrity for the data the program accesses. This setting
I           does not allow any non-RLS access when the data set is
I           already open for VSAM RLS or DFSMStvs processing. If the
I           data set is opened for input in non-RLS mode, a VSAM RLS or
I           DFSMStvs open is allowed.
N
I           This option is the only one applicable to a catalog.
N
I        4: The data set can be fully shared by any number of users. For
I           each request, VSAM refreshes the buffers used for direct
I           processing. This setting does not allow any non-RLS access
I           when the data set is already open for VSAM RLS or DFSMStvs
I           processing. If the data set is opened for input in non-RLS
I           mode, a VSAM RLS or DFSMStvs open is allowed.
N
I           As in SHAREOPTIONS 3, each user is responsible for
I           maintaining both read and write integrity for the data the
I           program accesses.
N
I        crosssystem: Specifies the amount of sharing allowed among
I          systems. Job steps of two or more operating systems can gain
I          access to the same VSAM data set regardless of the
I          disposition specified in each step's DD statement for the
I          data set. However, if you are using GRS across systems or
I          JES3, the data set might not be shared depending on the
I          disposition of the system.
N
I          To get exclusive control of the data set's volume, a task
I          in one system issues the RESERVE macro. The level of
I          cross-system sharing allowed by VSAM applies only in a
I          multiple operating system environment.
N
I          The cross-system sharing options are ignored by VSAM RLS or
I          DFSMStvs processing. The values are:
N
I          1: Reserved.
N
I          2: Reserved.
N
I          3: Specifies that the data set can be fully shared. Each
I             user is responsible for maintaining both read and write
I             integrity for the data that user's program accesses. User
I             programs that ignore write integrity guidelines can result
I             in:
N
I            -> VSAM program checks
N
I            -> Uncorrectable data set errors
N
I            -> Unpredictable results
N
I            The RESERVE and DEQ macros are required with this option
I            to maintain data set integrity. (See z/OS MVS Programming:
I            Authorized Assembler Services Reference ALE-DYN and
I            z/OS MVS Programming: Authorized Assembler Services
I            Reference LLA-SDU for information on using RESERVE and DEQ.)
I            If the sphere is accessed using VSAM RLS or DFSMStvs
I            protocols, VSAM RLS maintains the required integrity.
N
I          4: Specifies that the data set can be fully shared. For each
I             request, VSAM refreshes the buffers used for direct
I             processing. This option requires that you use the RESERVE
I             and DEQ macros to maintain data integrity while sharing
I             the data set. Improper use of the RESERVE macro can cause
I             problems similar to those described under SHAREOPTIONS 3.
I             (See z/OS MVS Programming: Authorized Assembler Services
I             Reference ALE-DYN and z/OS MVS Programming: Authorized
I             Assembler Services Reference LLA-SDU for information on
I             using RESERVE and DEQ.) Output processing is limited to
I             update, or add processing, or both that does not change
I             either the high-used RBA or the RBA of the high key data
I             control interval if DISP=SHR is used.
N
I            To ensure data integrity in a shared environment, VSAM
I            provides users of SHAREOPTIONS 4 (cross-region and
I            cross-system) with the following assistance:
N
I            -> Each PUT writes the appropriate buffer immediately into
I               the VSAM object's DASD. VSAM writes out the buffer in
I               the user's address space that contains the new or
I               updated data record.
N
I            -> Each GET refreshes the user's input buffers. The
I               contents of each data and index buffer used by the
I               user's program is retrieved from the VSAM object's DASD.
N
I            Exception: If you use VSAM RLS or DFSMStvs, SHAREOPTIONS
I            is assumed to be (3,3). If you do not use VSAM RLS or
I            DFSMStvs, the SHAREOPTIONS specification is respected.
N
D      SPEED | RECOVERY /* Abbreviation: RCVY */ -
I        Specifies whether the data component's control areas are to be
I        preformatted during loading.
N
I        This parameter is only considered during the actual loading
I        (creation) of a data set. Creation occurs when the data set is
I        opened and the high-used RBA is equal to zero. After normal
I        CLOSE processing at the completion of the load operation, the
I        physical structure of the data set and the content of the data
I        set extents are exactly the same, regardless of which option is
I        used. Any processing of the data set after the successful load
I        operation is the same, and the specification of this parameter
I        is not considered.
N
I        If you use RECOVERY, the initial load takes longer because the
I        control areas are first written with either empty or software
I        end-of-file control intervals. These preformatted control
I        intervals are then updated, using update writes with the data
I        records. When SPEED is used, the initial load is faster.
N
I        SPEED: Does not preformat the data component's space.
N
I          If the initial load is unsuccessful, you must load the data
I          set again from the beginning because VSAM cannot determine
I          the location of your last correctly written record. VSAM
I          cannot find a valid end-of-file indicator when it searches
I          your data records.
N
I        RECOVERY /* Abbreviation: RCVY */: Does preformat the data
I          component's space prior to writing the data records.
N
I          If the initial load is unsuccessful, VSAM can determine the
I          location of the last record written during the load process.
N
D      UNIQUEKEY | NONUNIQUEKEY /* Abbreviations: UNQK and NUNQK */ -
I        Shows whether more than one data record (in the base cluster)
I        can contain the same key value for the alternate index.
N
I        UNIQUEKEY /* Abbreviation: UNQK */: Points each alternate index
I          key to only one data record. When the alternate index is
I          built (search Chapter 8, "BLDINDEX") and more than one data
I          record contains the same key value for the alternate index,
I          the BLDINDEX processing ends with an error message.
N
I        NONUNIQUEKEY /* Abbreviation: NUNQK */: points a key value for
I          the alternate index to more than one data record in the base
I          cluster. The alternate index's key record points to a maximum
I          of 32768 records with non-unique keys.
N
I          When you include NONUNIQUEKEY, the maximum record size should
I          be large enough to allow for alternate index records that
I          point to more than one data record.
N
D      UPGRADE | NOUPGRADE /* Abbreviations: UPG and NUPG */ -
I        Specifies whether or not the alternate index is to be upgraded
I        (that is, kept up to date) when its base cluster is modified.
N
I        UPGRADE /* Abbreviation: UPG */ Upgrades the cluster's
I          alternate index to reflect changed data when the base
I          cluster's records are added to, updated, or erased.
N
I          When UPGRADE is specified, the alternate index's name is
I          cataloged with the names of other alternate indexes for the
I          base cluster. The group of alternate index names identifies
I          the upgrade set that includes all the base cluster's
I          alternate indexes that are opened when the base cluster is
I          opened for write operations.
N
I          The UPGRADE attribute is not effective for the alternate
I          index until the alternate index is built (search Chapter 8,
I          "BLDINDEX"). If the alternate index is defined when the base
I          cluster is open, the UPGRADE attribute takes effect the next
I          time the base cluster is opened.
N
I        NOUPGRADE /* Abbreviation: NUPG */: Specifies that the
I          alternate index does not upgrade when its base cluster is
I          modified.
N
D      VOLUMES(volser volser...) /* Abbreviation: VOL */ -
I        Specifies the volumes on which an alternate index's components
I        are to have space. This parameter is not required if the
I        cluster is modeled or if the cluster is SMS-managed. You can
I        specify VOLUMES for SMS-managed data sets; however, the volumes
I        specified might not be used and, in some cases, can result in
I        an error.
n
I        For SMS-managed data sets, you can use up to 59 volumes. If the
I        combined number of volumes for a cluster and its associated
I        alternate indexes exceeds 59, unpredictable results can occur.
n
I        You can let SMS choose the volumes for SMS-managed data sets by
I        coding an * for the volser with the VOLUMES parameter. If both
I        user-specified and SMS-specified volumes are requested, the
I        user-specified volser must be input first in the command
I        syntax. The default is one volume.
N
I        If you do not use the MODEL parameter, VOLUMES must be placed
I        as a parameter of ALTERNATEINDEX, or as a parameter of both
I        DATA and INDEX.
N
I        If the data and index components are to reside on different
I        device types, you must include VOLUMES as a parameter of both
I        DATA and INDEX. If more than one volume is listed with a single
I        VOLUMES parameter, the volumes must be the same device type.
N
I        You can repeat a volume serial number in the list only if you
I        use the KEYRANGE parameter. This can place more than one key
I        range on the same volume. However, repetition is valid only if
I        all duplicate occurrences are used for the primary allocation
I        of some key range.
N
M          You are not allowed to specify KEYRANGE.
N
I        The VOLUMES parameter interacts with other
I        DEFINE ALTERNATEINDEX parameters. Ensure that the volumes you
I        define for the alternate index are consistent with the
I        alternate index's other attributes:
N
I        -> CYLINDERS, RECORDS, TRACKS: The volumes contain enough
I           available space to satisfy the component's primary space
I           requirement.
N
I        -> FILE: To define an alternate index, the volume information
I           supplied with the DD statement pointed to by FILE must be
I           consistent with the information listed for the alternate
I           index and its components.
N
D      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */ -
I        Determines whether an alternate index or component is checked
I        by a machine action called write-check when a record is written
I        into it.
N
I        WRITECHECK /* Abbreviation: WCK */: Indicates that a record is
I          written and then read, without data transfer, to test for the
I          data check condition.
N
I          Exception: When you use VSAM RLS or DFSMStvs access, the
N          WRITECHECK parameter is ignored.
N
I        NOWRITECHECK /* Abbreviation: NWCK */: Does not write-check the
I          alternate index or component. checked by a write check.
N
D    ) -
NDATA parameters
N---------------
D      CYLINDERS(primary secondary) | /* Abbreviation: CYL */ -
D      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -
D      MEGABYTES(primary secondary) | /* Abbreviation: MB */ -
D      RECORDS(primary secondary) | /* Abbreviation: REC */-
D      TRACKS(primary secondary) /* Abbreviation: TRK */ -
I        The amount of space in cylinders, kilobytes, megabytes,
I        records, or tracks allocated to the alternate index from the
I        volume's available space. A kilobyte and megabyte allocation
I        resolves to either tracks or cylinders; records are allocated
I        to the nearest track boundary. Exception: If allocation
I        resolves to tracks, the space is contiguous. For more
I        information, see "Optimizing Control Area Size" in
I        z/OS DFSMS Using Data Sets.
N
I        Requests for space are directed to DADSM and result in a
I        format-1 DSCB for the data and index component entries.
N
I        If you do not use the MODEL parameter or the RECATALOG
I        parameter, you must include one, and only one, of these
I        parameters: CYLINDERS, KILOBYTES, MEGABYTES, RECORDS, or
I        TRACKS.
N
I        The space parameter is optional if the cluster is SMS-managed,
I        but if you do not use it, space can be modeled or defaulted by
I        SMS. If it is not determined, the DEFINE is unsuccessful. The
I        maximum space can be specified with unit of KILOBYTES or
I        MEGABYTES is 16,777,215. If the amount requested exceeds this
I        value, you should specify a different larger allocation unit.
N
I        To maintain device independence, do not use the TRACKS or
I        CYLINDERS parameters. If you do not use TRACKS or CYLINDERS
I        for an SMS-managed alternate index, space is allocated on the
I        volume selected by SMS.
N
M          These days the only mainframe DASD devices in use are
M          likely to be 3390 and thus the caution about device
M          independence is no longer applicable. If you have something
M          else it is way past time to migrate to the current geometry.
N
I        When you do not divide the data component into key ranges, and
I        more than one volume is given, the primary amount of space is
I        allocated only on the first volume when the component is
I        defined. When the component increases to extend to additional
I        volumes, the first allocation on each overflow volume is the
I        primary amount.
N
M          Since you can no longer specify KEYRANGE the above paragraph
I          should be modified by IBM.
N
I        Secondary amounts can be allocated on all volumes available to
I        contain parts of the alternate index, regardless of the key
I        ranges when the alternate index is extended.
N
I        You can include the amount of space as a parameter of
I        ALTERNATEINDEX, as a parameter of DATA, or as a parameter of
I        both DATA and INDEX.
N
I        -> If the space is specified as a parameter of ALTERNATEINDEX,
I           the amount specified is divided between the data and index
I           components. The division algorithm is a function of control
I           interval size, record size, device type, and other data set
I           attributes.
N
I           If the division results in an allocation for the data
I           component that is not an integral multiple of the required
I           control area size, the data component's allocation is
I           rounded up to the next higher control area multiple. This
I           rounding can result in a larger total allocation for your
I           alternate index than what you specified.
N
I           If the space is specified as a parameter of DATA, the entire
I           amount given is allocated to the data component. An
I           additional amount of space, depending on control interval
I           size, record size, device type, and other data set
I           attributes, is allocated to the index component.
N
I        To determine the exact amount of space allocated to each
I        component, list the alternate index's catalog entry, using
I        the LISTCAT command.
N
I        The primary and each secondary allocation must be able to be
I        satisfied within five extents; otherwise, your DEFINE or data
I        set extension is unsuccessful. You can use these keywords for
I        both SMS managed and non-SMS-managed data sets.
N
I        primary: Allocates the initial amount of space to the
I        alternate index.
N
I        secondary: Allocates the amount of space each time the
I        alternate index extends, as a secondary extent. If the
I        secondary space allocation is greater than 4.0 gigabytes, it
I        is reduced to an amount as close to 4.0 GB as possible,
I        without going over. This is not true for extended
I        addressability data sets, which have no such space limitation.
I        When you use secondary, space for the alternate index's data
I        and index components can be expanded to a maximum of
I        123 extents.
N
M      ATTEMPTS(number) -
M        IBM did not provide any details for this parameter.
N
M      AUTHORIZATION(entrypoint string) -
M        IBM did not provide any details for this parameter.
N
D      BUFFERSPACE(size) /* Abbreviations: BUFSP or BUFSPC */ -
I        Provides the minimum space for buffers. VSAM determines the
I        data component's and index component's control interval size.
I        If you do not use BUFFERSPACE, VSAM provides enough space to
I        contain two data component control intervals and, if the data
I        is key-sequenced, one index component control interval.
N
I        size: is the buffer of space. You can use decimal (n),
I          hexadecimal (X'n'), or binary (B'n'). The size cannot be
I          less than enough space to contain two data component control
I          intervals and, if the data is key sequenced, one index
I          control interval.
N
I          If the buffer size is less than VSAM requires to run your
I          job, it will be treated as though the parameter was not
I          specified and the buffer size will be set to the default
I          value.
N
I          Exception: When you use RLS or DFSMStvs access, DFSMS ignores
I          BUFFERSPACE.
N
I          Note: The limitations of the bufferspace value on how many
I          buffers will be allocated is based on storage available in
I          your region, and other parameters or attributes of the data
I          set.
N
M      CODE(code) -
M        IBM did not provide any details for this parameter.
N
D      CONTROLINTERVALSIZE(size) /* Abbreviations: CISZ or CNVSZ */ -
I        Defines the size of the alternate index's control intervals.
I        This depends on the maximum size of data records, and on the
I        amount of buffer space given. LSR/GSR buffering technique
I        users can ensure buffer pool selection by explicitly defining
I        data and index control interval sizes.
N
I        When you do not specify the control interval size, VSAM
I        determines the control interval size. If you have not specified
I        BUFFERSPACE and the size of your records permits, VSAM selects
I        the optimum size for the data control interval size and
I        512 bytes for the index control interval size.
N
I        size: The size of the alternate index's data and index
I          components.
N
I          Because an alternate index always has the spanned attribute,
I          the control interval size can be less than the maximum
I          record length. You can define a size from 512, to 8K in
I          increments of 512 or from 8K to 32K in increments of 2K
I          (where K is 1024 in decimal notation). If you use a size
I          that is not a multiple of 512 or 2048, VSAM chooses the
I          next higher multiple.
N
I          The index control interval should be large enough to
I          accommodate all of the compressed keys in a data control
I          area. If the index control interval size is too small,
I          unnecessary control area splits can occur. After the first
I          define (DEFINE), a catalog listing ( LISTC ) shows the number
I          of control intervals in a control area and the key length
I          of the data set. To make a general estimate of the index
I          control interval size needed, multiply one-half of the key
I          length (KEYLEN) by the number of data control intervals per
I          control area (DATA CI/CA):
N
I          (KEYLEN/2 ) * DATA CI/CA <= INDEX CISIZE
N
I          For information about the relationship between control
I          interval size and physical block size, see z/OS DFSMS Using
I          Data Sets for the relationship between control interval size
I          and physical block size. This document also includes
I          restrictions that apply to control interval size and
I          physical block size.
N
D      ERASE | NOERASE /* Abbreviations: ERAS and NERAS */-
I        indicates if the records of the alternate index components are
I        erased when the alternate index is deleted.
N
I        ERASE: Requires the records of the alternate index components
I          are overwritten with binary zeros when the alternate index
I          is deleted. If the base cluster of the alternate index is
I          protected by a RACF generic or discrete profile and the base
I          cluster is cataloged in a catalog, you can use RACF commands
I          to specify an ERASE attribute as part of this profile so that
I          the component is automatically erased upon deletion.
N
I        NOERASE: Specifies that the records of the alternate index
I          components are not to be overwritten with binary zeros.
I          NOERASE prevents the component from being erased if the base
I          cluster of the alternate index is protected by a RACF
I          generic or discrete profile that specifies the ERASE
I          attribute and if the base cluster is cataloged in a catalog.
I          You can use RACF commands to alter the ERASE attribute in a
I          profile.
N
D      EXCEPTIONEXIT(entrypoint) /* Abbreviation: EEXT */ -
I        The name of your exception exit routine, that receives control
I        when an exceptional I/O error condition occurs during the
I        transfer of data between your program's address space and the
I        alternate index's direct access storage space. (An exception
I        is any condition that causes a SYNAD exit to be taken.) The
I        component's exception exit routine is processed first; then
I        SYNAD exit routine receives control. If an exception exit
I        routine is loaded from an unauthorized library during access
I        method services processing, an abnormal termination occurs.
N
D      FILE(ddname) -
I        Names the DD statement that identifies the direct access
I        devices and volumes on which to allocate space to the alternate
I        index. If more than one volume is specified in a volume list,
I        all volumes must be the same device type.
N
I        When the data component and index component are to reside on
I        different devices, you can create a separate FILE parameter as
I        a parameter of DATA and INDEX to point to different DD
I        statements. If the FILE parameter is not used, an attempt is
I        made to dynamically allocate the required volumes. The volumes
I        must be mounted as permanently resident or reserved.
N
I        The DD statement you specify must be:
N
I          //ddname    DD DISP=OLD,
I          //             UNIT=(devtype,count),VOL=SER=(volser1,...)
N
I        Restriction: When FILE refers to more than one volume of the
I        same device type, the DD statement that describes the volumes
I        cannot be a concatenated DD statement.
N
D      FREESPACE(CI-% CA-% | 0 0) /* Abbreviation: FSPC */ -
I        Designates the amount of empty space left after any primary or
I        secondary allocation and any split of control intervals
I        (CI-percent) and control areas (CA-percent) when the alternate
I        index is built (search Chapter 8, "BLDINDEX"). The empty space
I        in the control interval and control area is available for data
I        records that are updated and inserted after the alternate
I        index is initially built. The amounts are specified as
I        percentages. CI-percent translates into a number of bytes that
I        is either equal to, or slightly less than, the percentage
I        value of CI-percent. CA-percent translates into a number of
I        control intervals that is either equal to, or less than, the
I        percentage of CA-percent.
N
I        The percentages must be equal to, or less than, 100. When you
I        use 100% of free space, one data record is placed in the first
I        control interval of each control area when the alternate index
I        is built.
N
D      KEYS(length offset | 64 0) -
I        Describes the alternate-key field in the base cluster's data
I        record.
N
I        The key field of an alternate index is called an alternate key.
I        The data record's alternate key can overlap or be contained
I        entirely within another (alternate or prime) key field.
N
I        The length plus offset cannot be greater than the length of
I        the base cluster's data record.
N
I        When the base cluster's data record spans control intervals,
I        the record's alternate-key field is within the record's first
I        segment (that is, in the first control interval).
N
I        length offset: Gives the length of the alternate key, in bytes,
I          and its displacement from the beginning of the base cluster's
I          data record, in bytes.
N
D      MODEL(entryname catname) -
I        Uses existing entry as a model for the entry being defined or
I        re-cataloged. DATACLASS, MANAGEMENTCLASS, and STORAGECLASS
I        cannot be modeled. Search "Understanding the Order of Assigned
I        Data Set Attributes" for information on how the system selects
I        modeled attributes.
N
I        You can use an existing alternate index's entry as a model for
I        the attributes of the alternate index being defined. For
I        details about how a model is used, see z/OS DFSMS Managing
I        Catalogs.
N
I        You can use some attributes of the model and override others
I        by defining them in the cluster or component. If you do not
I        want to add or change any attributes, use only the entry type
I        of the model (alternate index, data, or index) and the name of
I        the entry to be defined.
N
I        When you use an alternate index entry as a model for an
I        alternate index, the model entry's data and index components
I        are used as models for the to-be-defined entry's data and index
I        components, unless another entry is specified with the MODEL
I        parameter as a subparameter of DATA or INDEX.
N
I        entryname: Names the entry to be used as a model.
N
I        catname: Names the model entry's catalog. You must identify the
I          catalog that contains the model entry when you want to assign
I          the catalog's password instead of the model entry's password.
N
I          If the catalog's volume is physically mounted, it is
I          dynamically allocated. The volume must be mounted as
I          permanently resident or reserved. Search "Catalog Selection
I          Order for DEFINE" for information about the order in which
I          a catalog is selected when the catalog's name is not
I          specified.
N
D      NAME(entryname) -
I        The name of the DATA component.
N
I        You can define a separate entry name for the alternate index,
I        its data component, and its index component. If you do not give
I        a name for the data or index component, one is generated. For
I        more information about the system-generated name format, see
I        z/OS DFSMS Managing Catalogs.
N
I        When the alternate index, data component, and index component
I        are individually named, each can be addressed.
N
D      OWNER(ownerid) -
I        Gives the identification of the alternate index's owner.
N
I        For TSO/E users, if the OWNER parameter does not identify the
I        owner, the TSO/E user's userid becomes the ownerid value.
N
D      RECORDSIZE(average maximum) -
I        The average and maximum length, in bytes, of an alternate
I        index record.
N
I        An alternate index record can span control intervals, so
I        RECORDSIZE can be larger than CONTROLINTERVALSIZE. The formula
I        for the maximum record size of spanned records as calculated
I        by VSAM is:
N
I          MAXLRECL = CI/CA * (CISZ - 10)
N
I        where:
N
I        -> MAXLRECL is the maximum spanned record size
N
I        -> CI/CA represents the number of control intervals per
I           control area
N
I        -> CA is the number of control areas
N
I        -> CISZ is the quantity control interval size
N
I        You can use either of the following formulas to determine the
I        size of the alternate index record:
N
I        -> When the alternate index supports a key-sequenced base
I           cluster, use this formula:
N
I           RECSZ = 5 + AIXKL + (n x BCKL)
N
I        -> When the alternate index supports an entry-sequenced base
I           cluster, use this formula:
N
I           RECSZ = 5 + AIXKL + (n x 4)
N
I        Variables in the formulas represent these values:
N
I        -> RECSZ is the average record size.
N
I        -> AIXKL is the alternate-key length (see the KEYS parameter).
N
I        -> BCKL is the base cluster's prime-key length. (You can enter
I           the LISTCAT command to determine this base cluster's
I           prime-key length).
N
I        -> n = 1 when UNIQUEKEY is specified (RECSZ is also the maximum
I           record size).
N
I        -> n = the number of data records in the base cluster that
I           contain the same alternate-key value, when NONUNIQUEKEY is
I           specified.
N
I        When you use NONUNIQUEKEY, give a record size large enough to
I        allow for as many key pointers or RBA pointers as you might
I        need. The record length values apply only to the alternate
I        index's data component.
N
I        Restriction: REPRO to non-VSAM targets and EXPORT do not
I        support data sets with record sizes greater than 32760. The
I        maximum number of prime keys that a single alternate index
I        logical record can contain is 32767.
N
D      REUSE | NOREUSE /* Abbreviations: RUS and NRUS */ -
I        Indicates whether or not the alternate index can be used again
I        as a new alternate index.
N
I        REUSE /* Abbreviation: RUS */: Indicates that the alternate
I          index can be used over again as a new alternate index. When
I          a reusable alternate index is opened, its high-used RBA can
I          be set to zero. Open it with an access control block using
I          the RESET attribute.
N
I          When you use BLDINDEX to build a reusable alternate index,
I          the high-used RBA is always reset to zero when the alternate
I          index is opened for BLDINDEX processing.
N
I          Reusable alternate indexes can be multivolumed and might have
I          up to 123 physical extents.
N
I          Exception: If you use the keyword UNIQUE with REUSE, the
I          DEFINE command is unsuccessful.
N
I        NOREUSE /* Abbreviation: NRUS */: Specifies that the alternate
I          index cannot be used again as a new alternate index.
N
D      SHAREOPTIONS(crossregion crosssystem | 1 3) -
D        /* Abbreviation: SHR */ -
I        Specifies how an alternate index's data or index component can
I        be shared among users. However, SMS-managed volumes, and
I        catalogs containing SMS-managed data sets, must not be shared
I        with non-SMS systems. For data integrity, ensure that share
I        options defined for data and index components are the same.
I        For a description of data set sharing, see z/OS DFSMS Using
I        Data Sets.
N
I        crossregion: Indicates the amount of sharing allowed among
I          regions within the same system or within multiple systems
I          using global resource serialization (GRS). Independent job
I          steps in an operating system, or multiple systems in a GRS
I          ring, can access a VSAM data set concurrently. For more
I          information about GRS, see z/OS MVS Planning: Global Resource
I          Serialization. To share a data set, each user must include
I          DISP=SHR in the data set's DD statement. You can use the
I          following options:
N
I        1: The data set can be shared by any number of users for read
I           processing, or the data set can be accessed by only one user
I           for read and write processing. This setting does not allow
I           any non-RLS access when the data set is already open for
I           VSAM RLS or DFSMStvs processing. An RLS or DFSMStvs open
I           fails with this option if the data set is already open for
I           any processing.
N
I        2: The data set can be accessed by any number of users for read
I           processing, and it can also be accessed by one user for
I           write processing. It is the user's responsibility to provide
I           read integrity. VSAM ensures write integrity by obtaining
I           exclusive control for a control interval while it is being
I           updated. A VSAM RLS or DFSMStvs open is not allowed while
I           the data set is open for non-RLS output.
N
I           If the data set has already been opened for VSAM RLS or
I           DFSMStvs processing, a non-RLS open for input is allowed;
I           a non-RLS open for output fails. If the data set is opened
I           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is
I           allowed.
N
I        3: The data set can be fully shared by any number of users. The
I           user is responsible for maintaining both read and write
I           integrity for the data the program accesses. This setting
I           does not allow any non-RLS access when the data set is
I           already open for VSAM RLS or DFSMStvs processing. If the
I           data set is opened for input in non-RLS mode, a VSAM RLS or
I           DFSMStvs open is allowed.
N
I           This option is the only one applicable to a catalog.
N
I        4: The data set can be fully shared by any number of users. For
I           each request, VSAM refreshes the buffers used for direct
I           processing. This setting does not allow any non-RLS access
I           when the data set is already open for VSAM RLS or DFSMStvs
I           processing. If the data set is opened for input in non-RLS
I           mode, a VSAM RLS or DFSMStvs open is allowed.
N
I           As in SHAREOPTIONS 3, each user is responsible for
I           maintaining both read and write integrity for the data the
I           program accesses.
N
I        crosssystem: Specifies the amount of sharing allowed among
I          systems. Job steps of two or more operating systems can gain
I          access to the same VSAM data set regardless of the
I          disposition specified in each step's DD statement for the
I          data set. However, if you are using GRS across systems or
I          JES3, the data set might not be shared depending on the
I          disposition of the system.
N
I          To get exclusive control of the data set's volume, a task
I          in one system issues the RESERVE macro. The level of
I          cross-system sharing allowed by VSAM applies only in a
I          multiple operating system environment.
N
I          The cross-system sharing options are ignored by VSAM RLS or
I          DFSMStvs processing. The values are:
N
I          1: Reserved.
N
I          2: Reserved.
N
I          3: Specifies that the data set can be fully shared. Each
I             user is responsible for maintaining both read and write
I             integrity for the data that user's program accesses. User
I             programs that ignore write integrity guidelines can result
I             in:
N
I            -> VSAM program checks
N
I            -> Uncorrectable data set errors
N
I            -> Unpredictable results
N
I            The RESERVE and DEQ macros are required with this option
I            to maintain data set integrity. (See z/OS MVS Programming:
I            Authorized Assembler Services Reference ALE-DYN and
I            z/OS MVS Programming: Authorized Assembler Services
I            Reference LLA-SDU for information on using RESERVE and DEQ.)
I            If the sphere is accessed using VSAM RLS or DFSMStvs
I            protocols, VSAM RLS maintains the required integrity.
N
I          4: Specifies that the data set can be fully shared. For each
I             request, VSAM refreshes the buffers used for direct
I             processing. This option requires that you use the RESERVE
I             and DEQ macros to maintain data integrity while sharing
I             the data set. Improper use of the RESERVE macro can cause
I             problems similar to those described under SHAREOPTIONS 3.
I             (See z/OS MVS Programming: Authorized Assembler Services
I             Reference ALE-DYN and z/OS MVS Programming: Authorized
I             Assembler Services Reference LLA-SDU for information on
I             using RESERVE and DEQ.) Output processing is limited to
I             update, or add processing, or both that does not change
I             either the high-used RBA or the RBA of the high key data
I             control interval if DISP=SHR is used.
N
I            To ensure data integrity in a shared environment, VSAM
I            provides users of SHAREOPTIONS 4 (cross-region and
I            cross-system) with the following assistance:
N
I            -> Each PUT writes the appropriate buffer immediately into
I               the VSAM object's DASD. VSAM writes out the buffer in
I               the user's address space that contains the new or
I               updated data record.
N
I            -> Each GET refreshes the user's input buffers. The
I               contents of each data and index buffer used by the
I               user's program is retrieved from the VSAM object's DASD.
N
I            Exception: If you use VSAM RLS or DFSMStvs, SHAREOPTIONS
I            is assumed to be (3,3). If you do not use VSAM RLS or
I            DFSMStvs, the SHAREOPTIONS specification is respected.
N
D      SPEED | RECOVERY /* Abbreviation: RCVY */ -
I        Specifies whether the data component's control areas are to be
I        preformatted during loading.
N
I        This parameter is only considered during the actual loading
I        (creation) of a data set. Creation occurs when the data set is
I        opened and the high-used RBA is equal to zero. After normal
I        CLOSE processing at the completion of the load operation, the
I        physical structure of the data set and the content of the data
I        set extents are exactly the same, regardless of which option is
I        used. Any processing of the data set after the successful load
I        operation is the same, and the specification of this parameter
I        is not considered.
N
I        If you use RECOVERY, the initial load takes longer because the
I        control areas are first written with either empty or software
I        end-of-file control intervals. These preformatted control
I        intervals are then updated, using update writes with the data
I        records. When SPEED is used, the initial load is faster.
N
I        SPEED: Does not preformat the data component's space.
N
I          If the initial load is unsuccessful, you must load the data
I          set again from the beginning because VSAM cannot determine
I          the location of your last correctly written record. VSAM
I          cannot find a valid end-of-file indicator when it searches
I          your data records.
N
I        RECOVERY /* Abbreviation: RCVY */: Does preformat the data
I          component's space prior to writing the data records.
N
I          If the initial load is unsuccessful, VSAM can determine the
I          location of the last record written during the load process.
N
D      UNIQUEKEY | NONUNIQUEKEY /* Abbreviations: UNQK and NUNQK */ -
I        Shows whether more than one data record (in the base cluster)
I        can contain the same key value for the alternate index.
N
I        UNIQUEKEY /* Abbreviation: UNQK */: Points each alternate index
I          key to only one data record. When the alternate index is
I          built (search Chapter 8, "BLDINDEX") and more than one data
I          record contains the same key value for the alternate index,
I          the BLDINDEX processing ends with an error message.
N
I        NONUNIQUEKEY /* Abbreviation: NUNQK */: points a key value for
I          the alternate index to more than one data record in the base
I          cluster. The alternate index's key record points to a maximum
I          of 32768 records with non-unique keys.
N
I          When you include NONUNIQUEKEY, the maximum record size should
I          be large enough to allow for alternate index records that
I          point to more than one data record.
N
D      VOLUMES(volser volser...) /* Abbreviation: VOL */ -
I        Specifies the volumes on which an alternate index's components
I        are to have space. This parameter is not required if the
I        cluster is modeled or if the cluster is SMS-managed. You can
I        specify VOLUMES for SMS-managed data sets; however, the volumes
I        specified might not be used and, in some cases, can result in
I        an error.
n
I        For SMS-managed data sets, you can use up to 59 volumes. If the
I        combined number of volumes for a cluster and its associated
I        alternate indexes exceeds 59, unpredictable results can occur.
n
I        You can let SMS choose the volumes for SMS-managed data sets by
I        coding an * for the volser with the VOLUMES parameter. If both
I        user-specified and SMS-specified volumes are requested, the
I        user-specified volser must be input first in the command
I        syntax. The default is one volume.
N
I        If you do not use the MODEL parameter, VOLUMES must be placed
I        as a parameter of ALTERNATEINDEX, or as a parameter of both
I        DATA and INDEX.
N
I        If the data and index components are to reside on different
I        device types, you must include VOLUMES as a parameter of both
I        DATA and INDEX. If more than one volume is listed with a single
I        VOLUMES parameter, the volumes must be the same device type.
N
I        You can repeat a volume serial number in the list only if you
I        use the KEYRANGE parameter. This can place more than one key
I        range on the same volume. However, repetition is valid only if
I        all duplicate occurrences are used for the primary allocation
I        of some key range.
N
M          You are not allowed to specify KEYRANGE.
N
I        The VOLUMES parameter interacts with other
I        DEFINE ALTERNATEINDEX parameters. Ensure that the volumes you
I        define for the alternate index are consistent with the
I        alternate index's other attributes:
N
I        -> CYLINDERS, RECORDS, TRACKS: The volumes contain enough
I           available space to satisfy the component's primary space
I           requirement.
N
I        -> FILE: To define an alternate index, the volume information
I           supplied with the DD statement pointed to by FILE must be
I           consistent with the information listed for the alternate
I           index and its components.
N
D      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */ -
I        Determines whether an alternate index or component is checked
I        by a machine action called write-check when a record is written
I        into it.
N
I        WRITECHECK /* Abbreviation: WCK */: Indicates that a record is
I          written and then read, without data transfer, to test for the
I          data check condition.
N
I          Exception: When you use VSAM RLS or DFSMStvs access, the
N          WRITECHECK parameter is ignored.
N
I        NOWRITECHECK /* Abbreviation: NWCK */: Does not write-check the
I          alternate index or component. checked by a write check.
N
D    ) -
N
NINDEX parameters
N----------------
D      CYLINDERS(primary secondary) | /* Abbreviation: CYL */ -
D      KILOBYTES(primary secondary) | /* Abbreviation: KB */ -
D      MEGABYTES(primary secondary) | /* Abbreviation: MB */ -
D      RECORDS(primary secondary) | /* Abbreviation: REC */-
D      TRACKS(primary secondary) /* Abbreviation: TRK */ -
I        The amount of space in cylinders, kilobytes, megabytes,
I        records, or tracks allocated to the alternate index from the
I        volume's available space. A kilobyte and megabyte allocation
I        resolves to either tracks or cylinders; records are allocated
I        to the nearest track boundary. Exception: If allocation
I        resolves to tracks, the space is contiguous. For more
I        information, see "Optimizing Control Area Size" in
I        z/OS DFSMS Using Data Sets.
N
I        Requests for space are directed to DADSM and result in a
I        format-1 DSCB for the data and index component entries.
N
I        If you do not use the MODEL parameter or the RECATALOG
I        parameter, you must include one, and only one, of these
I        parameters: CYLINDERS, KILOBYTES, MEGABYTES, RECORDS, or
I        TRACKS.
N
I        The space parameter is optional if the cluster is SMS-managed,
I        but if you do not use it, space can be modeled or defaulted by
I        SMS. If it is not determined, the DEFINE is unsuccessful. The
I        maximum space can be specified with unit of KILOBYTES or
I        MEGABYTES is 16,777,215. If the amount requested exceeds this
I        value, you should specify a different larger allocation unit.
N
I        To maintain device independence, do not use the TRACKS or
I        CYLINDERS parameters. If you do not use TRACKS or CYLINDERS
I        for an SMS-managed alternate index, space is allocated on the
I        volume selected by SMS.
N
M          These days the only mainframe DASD devices in use are
M          likely to be 3390 and thus the caution about device
M          independence is no longer applicable. If you have something
M          else it is way past time to migrate to the current geometry.
N
I        When you do not divide the data component into key ranges, and
I        more than one volume is given, the primary amount of space is
I        allocated only on the first volume when the component is
I        defined. When the component increases to extend to additional
I        volumes, the first allocation on each overflow volume is the
I        primary amount.
N
M          Since you can no longer specify KEYRANGE the above paragraph
I          should be modified by IBM.
N
I        Secondary amounts can be allocated on all volumes available to
I        contain parts of the alternate index, regardless of the key
I        ranges when the alternate index is extended.
N
I        You can include the amount of space as a parameter of
I        ALTERNATEINDEX, as a parameter of DATA, or as a parameter of
I        both DATA and INDEX.
N
I        -> If the space is specified as a parameter of ALTERNATEINDEX,
I           the amount specified is divided between the data and index
I           components. The division algorithm is a function of control
I           interval size, record size, device type, and other data set
I           attributes.
N
I           If the division results in an allocation for the data
I           component that is not an integral multiple of the required
I           control area size, the data component's allocation is
I           rounded up to the next higher control area multiple. This
I           rounding can result in a larger total allocation for your
I           alternate index than what you specified.
N
I           If the space is specified as a parameter of DATA, the entire
I           amount given is allocated to the data component. An
I           additional amount of space, depending on control interval
I           size, record size, device type, and other data set
I           attributes, is allocated to the index component.
N
I        To determine the exact amount of space allocated to each
I        component, list the alternate index's catalog entry, using
I        the LISTCAT command.
N
I        The primary and each secondary allocation must be able to be
I        satisfied within five extents; otherwise, your DEFINE or data
I        set extension is unsuccessful. You can use these keywords for
I        both SMS managed and non-SMS-managed data sets.
N
I        primary: Allocates the initial amount of space to the
I        alternate index.
N
I        secondary: Allocates the amount of space each time the
I        alternate index extends, as a secondary extent. If the
I        secondary space allocation is greater than 4.0 gigabytes, it
I        is reduced to an amount as close to 4.0 GB as possible,
I        without going over. This is not true for extended
I        addressability data sets, which have no such space limitation.
I        When you use secondary, space for the alternate index's data
I        and index components can be expanded to a maximum of
I        123 extents.
N
M      ATTEMPTS(number) -
M        IBM did not provide any details for this parameter.
N
M      AUTHORIZATION(entrypoint string) -
M        IBM did not provide any details for this parameter.
N
M      CODE(code) -
M        IBM did not provide any details for this parameter.
N
D      CONTROLINTERVALSIZE(size) /* Abbreviations: CISZ or CNVSZ */ -
I        Defines the size of the alternate index's control intervals.
I        This depends on the maximum size of data records, and on the
I        amount of buffer space given. LSR/GSR buffering technique
I        users can ensure buffer pool selection by explicitly defining
I        data and index control interval sizes.
N
I        When you do not specify the control interval size, VSAM
I        determines the control interval size. If you have not specified
I        BUFFERSPACE and the size of your records permits, VSAM selects
I        the optimum size for the data control interval size and
I        512 bytes for the index control interval size.
N
I        size: The size of the alternate index's data and index
I          components.
N
I          Because an alternate index always has the spanned attribute,
I          the control interval size can be less than the maximum
I          record length. You can define a size from 512, to 8K in
I          increments of 512 or from 8K to 32K in increments of 2K
I          (where K is 1024 in decimal notation). If you use a size
I          that is not a multiple of 512 or 2048, VSAM chooses the
I          next higher multiple.
N
I          The index control interval should be large enough to
I          accommodate all of the compressed keys in a data control
I          area. If the index control interval size is too small,
I          unnecessary control area splits can occur. After the first
I          define (DEFINE), a catalog listing ( LISTC ) shows the number
I          of control intervals in a control area and the key length
I          of the data set. To make a general estimate of the index
I          control interval size needed, multiply one-half of the key
I          length (KEYLEN) by the number of data control intervals per
I          control area (DATA CI/CA):
N
I          (KEYLEN/2 ) * DATA CI/CA <= INDEX CISIZE
N
I          For information about the relationship between control
I          interval size and physical block size, see z/OS DFSMS Using
I          Data Sets for the relationship between control interval size
I          and physical block size. This document also includes
I          restrictions that apply to control interval size and
I          physical block size.
N
D      EXCEPTIONEXIT(entrypoint) /* Abbreviation: EEXT */ -
I        The name of your exception exit routine, that receives control
I        when an exceptional I/O error condition occurs during the
I        transfer of data between your program's address space and the
I        alternate index's direct access storage space. (An exception
I        is any condition that causes a SYNAD exit to be taken.) The
I        component's exception exit routine is processed first; then
I        SYNAD exit routine receives control. If an exception exit
I        routine is loaded from an unauthorized library during access
I        method services processing, an abnormal termination occurs.
N
D      FILE(ddname) -
I        Names the DD statement that identifies the direct access
I        devices and volumes on which to allocate space to the alternate
I        index. If more than one volume is specified in a volume list,
I        all volumes must be the same device type.
N
I        When the data component and index component are to reside on
I        different devices, you can create a separate FILE parameter as
I        a parameter of DATA and INDEX to point to different DD
I        statements. If the FILE parameter is not used, an attempt is
I        made to dynamically allocate the required volumes. The volumes
I        must be mounted as permanently resident or reserved.
N
I        The DD statement you specify must be:
N
I          //ddname    DD DISP=OLD,
I          //             UNIT=(devtype,count),VOL=SER=(volser1,...)
N
I        Restriction: When FILE refers to more than one volume of the
I        same device type, the DD statement that describes the volumes
I        cannot be a concatenated DD statement.
N
I        Uses existing entry as a model for the entry being defined or
I        re-cataloged. DATACLASS, MANAGEMENTCLASS, and STORAGECLASS
I        cannot be modeled. Search "Understanding the Order of Assigned
I        Data Set Attributes" for information on how the system selects
I        modeled attributes.
N
I        You can use an existing alternate index's entry as a model for
I        the attributes of the alternate index being defined. For
I        details about how a model is used, see z/OS DFSMS Managing
I        Catalogs.
N
I        You can use some attributes of the model and override others
I        by defining them in the cluster or component. If you do not
I        want to add or change any attributes, use only the entry type
I        of the model (alternate index, data, or index) and the name of
I        the entry to be defined.
N
I        When you use an alternate index entry as a model for an
I        alternate index, the model entry's data and index components
I        are used as models for the to-be-defined entry's data and index
I        components, unless another entry is specified with the MODEL
I        parameter as a subparameter of DATA or INDEX.
N
I        entryname: Names the entry to be used as a model.
N
I        catname: Names the model entry's catalog. You must identify the
I          catalog that contains the model entry when you want to assign
I          the catalog's password instead of the model entry's password.
N
I          If the catalog's volume is physically mounted, it is
I          dynamically allocated. The volume must be mounted as
I          permanently resident or reserved. Search "Catalog Selection
I          Order for DEFINE" for information about the order in which
I          a catalog is selected when the catalog's name is not
I          specified.
N
D      NAME(entryname) -
I        The name of the INDEX component.
N
I        You can define a separate entry name for the alternate index,
I        its data component, and its index component. If you do not give
I        a name for the data or index component, one is generated. For
I        more information about the system-generated name format, see
I        z/OS DFSMS Managing Catalogs.
N
I        When the alternate index, data component, and index component
I        are individually named, each can be addressed.
N
D      OWNER(ownerid) -
I        Gives the identification of the alternate index's owner.
N
I        For TSO/E users, if the OWNER parameter does not identify the
I        owner, the TSO/E user's userid becomes the ownerid value.
N
D      REUSE | NOREUSE /* Abbreviations: RUS and NRUS */ -
I        Indicates whether or not the alternate index can be used again
I        as a new alternate index.
N
I        REUSE /* Abbreviation: RUS */: Indicates that the alternate
I          index can be used over again as a new alternate index. When
I          a reusable alternate index is opened, its high-used RBA can
I          be set to zero. Open it with an access control block using
I          the RESET attribute.
N
I          When you use BLDINDEX to build a reusable alternate index,
I          the high-used RBA is always reset to zero when the alternate
I          index is opened for BLDINDEX processing.
N
I          Reusable alternate indexes can be multivolumed and might have
I          up to 123 physical extents.
N
I          Exception: If you use the keyword UNIQUE with REUSE, the
I          DEFINE command is unsuccessful.
N
I        NOREUSE /* Abbreviation: NRUS */: Specifies that the alternate
I          index cannot be used again as a new alternate index.
N
D      SHAREOPTIONS(crossregion crosssystem | 1 3) -
D        /* Abbreviation: SHR */ -
I        Specifies how an alternate index's data or index component can
I        be shared among users. However, SMS-managed volumes, and
I        catalogs containing SMS-managed data sets, must not be shared
I        with non-SMS systems. For data integrity, ensure that share
I        options defined for data and index components are the same.
I        For a description of data set sharing, see z/OS DFSMS Using
I        Data Sets.
N
I        crossregion: Indicates the amount of sharing allowed among
I          regions within the same system or within multiple systems
I          using global resource serialization (GRS). Independent job
I          steps in an operating system, or multiple systems in a GRS
I          ring, can access a VSAM data set concurrently. For more
I          information about GRS, see z/OS MVS Planning: Global Resource
I          Serialization. To share a data set, each user must include
I          DISP=SHR in the data set's DD statement. You can use the
I          following options:
N
I        1: The data set can be shared by any number of users for read
I           processing, or the data set can be accessed by only one user
I           for read and write processing. This setting does not allow
I           any non-RLS access when the data set is already open for
I           VSAM RLS or DFSMStvs processing. An RLS or DFSMStvs open
I           fails with this option if the data set is already open for
I           any processing.
N
I        2: The data set can be accessed by any number of users for read
I           processing, and it can also be accessed by one user for
I           write processing. It is the user's responsibility to provide
I           read integrity. VSAM ensures write integrity by obtaining
I           exclusive control for a control interval while it is being
I           updated. A VSAM RLS or DFSMStvs open is not allowed while
I           the data set is open for non-RLS output.
N
I           If the data set has already been opened for VSAM RLS or
I           DFSMStvs processing, a non-RLS open for input is allowed;
I           a non-RLS open for output fails. If the data set is opened
I           for input in non-RLS mode, a VSAM RLS or DFSMStvs open is
I           allowed.
N
I        3: The data set can be fully shared by any number of users. The
I           user is responsible for maintaining both read and write
I           integrity for the data the program accesses. This setting
I           does not allow any non-RLS access when the data set is
I           already open for VSAM RLS or DFSMStvs processing. If the
I           data set is opened for input in non-RLS mode, a VSAM RLS or
I           DFSMStvs open is allowed.
N
I           This option is the only one applicable to a catalog.
N
I        4: The data set can be fully shared by any number of users. For
I           each request, VSAM refreshes the buffers used for direct
I           processing. This setting does not allow any non-RLS access
I           when the data set is already open for VSAM RLS or DFSMStvs
I           processing. If the data set is opened for input in non-RLS
I           mode, a VSAM RLS or DFSMStvs open is allowed.
N
I           As in SHAREOPTIONS 3, each user is responsible for
I           maintaining both read and write integrity for the data the
I           program accesses.
N
I        crosssystem: Specifies the amount of sharing allowed among
I          systems. Job steps of two or more operating systems can gain
I          access to the same VSAM data set regardless of the
I          disposition specified in each step's DD statement for the
I          data set. However, if you are using GRS across systems or
I          JES3, the data set might not be shared depending on the
I          disposition of the system.
N
I          To get exclusive control of the data set's volume, a task
I          in one system issues the RESERVE macro. The level of
I          cross-system sharing allowed by VSAM applies only in a
I          multiple operating system environment.
N
I          The cross-system sharing options are ignored by VSAM RLS or
I          DFSMStvs processing. The values are:
N
I          1: Reserved.
N
I          2: Reserved.
N
I          3: Specifies that the data set can be fully shared. Each
I             user is responsible for maintaining both read and write
I             integrity for the data that user's program accesses. User
I             programs that ignore write integrity guidelines can result
I             in:
N
I            -> VSAM program checks
N
I            -> Uncorrectable data set errors
N
I            -> Unpredictable results
N
I            The RESERVE and DEQ macros are required with this option
I            to maintain data set integrity. (See z/OS MVS Programming:
I            Authorized Assembler Services Reference ALE-DYN and
I            z/OS MVS Programming: Authorized Assembler Services
I            Reference LLA-SDU for information on using RESERVE and DEQ.)
I            If the sphere is accessed using VSAM RLS or DFSMStvs
I            protocols, VSAM RLS maintains the required integrity.
N
I          4: Specifies that the data set can be fully shared. For each
I             request, VSAM refreshes the buffers used for direct
I             processing. This option requires that you use the RESERVE
I             and DEQ macros to maintain data integrity while sharing
I             the data set. Improper use of the RESERVE macro can cause
I             problems similar to those described under SHAREOPTIONS 3.
I             (See z/OS MVS Programming: Authorized Assembler Services
I             Reference ALE-DYN and z/OS MVS Programming: Authorized
I             Assembler Services Reference LLA-SDU for information on
I             using RESERVE and DEQ.) Output processing is limited to
I             update, or add processing, or both that does not change
I             either the high-used RBA or the RBA of the high key data
I             control interval if DISP=SHR is used.
N
I            To ensure data integrity in a shared environment, VSAM
I            provides users of SHAREOPTIONS 4 (cross-region and
I            cross-system) with the following assistance:
N
I            -> Each PUT writes the appropriate buffer immediately into
I               the VSAM object's DASD. VSAM writes out the buffer in
I               the user's address space that contains the new or
I               updated data record.
N
I            -> Each GET refreshes the user's input buffers. The
I               contents of each data and index buffer used by the
I               user's program is retrieved from the VSAM object's DASD.
N
I            Exception: If you use VSAM RLS or DFSMStvs, SHAREOPTIONS
I            is assumed to be (3,3). If you do not use VSAM RLS or
I            DFSMStvs, the SHAREOPTIONS specification is respected.
N
D      VOLUMES(volser volser...) /* Abbreviation: VOL */ -
I        Specifies the volumes on which an alternate index's components
I        are to have space. This parameter is not required if the
I        cluster is modeled or if the cluster is SMS-managed. You can
I        specify VOLUMES for SMS-managed data sets; however, the volumes
I        specified might not be used and, in some cases, can result in
I        an error.
n
I        For SMS-managed data sets, you can use up to 59 volumes. If the
I        combined number of volumes for a cluster and its associated
I        alternate indexes exceeds 59, unpredictable results can occur.
n
I        You can let SMS choose the volumes for SMS-managed data sets by
I        coding an * for the volser with the VOLUMES parameter. If both
I        user-specified and SMS-specified volumes are requested, the
I        user-specified volser must be input first in the command
I        syntax. The default is one volume.
N
I        If you do not use the MODEL parameter, VOLUMES must be placed
I        as a parameter of ALTERNATEINDEX, or as a parameter of both
I        DATA and INDEX.
N
I        If the data and index components are to reside on different
I        device types, you must include VOLUMES as a parameter of both
I        DATA and INDEX. If more than one volume is listed with a single
I        VOLUMES parameter, the volumes must be the same device type.
N
I        You can repeat a volume serial number in the list only if you
I        use the KEYRANGE parameter. This can place more than one key
I        range on the same volume. However, repetition is valid only if
I        all duplicate occurrences are used for the primary allocation
I        of some key range.
N
M          You are not allowed to specify KEYRANGE.
N
I        The VOLUMES parameter interacts with other
I        DEFINE ALTERNATEINDEX parameters. Ensure that the volumes you
I        define for the alternate index are consistent with the
I        alternate index's other attributes:
N
I        -> CYLINDERS, RECORDS, TRACKS: The volumes contain enough
I           available space to satisfy the component's primary space
I           requirement.
N
I        -> FILE: To define an alternate index, the volume information
I           supplied with the DD statement pointed to by FILE must be
I           consistent with the information listed for the alternate
I           index and its components.
N
D      WRITECHECK | NOWRITECHECK /* Abbreviations: WCK and NWCK */ -
I        Determines whether an alternate index or component is checked
I        by a machine action called write-check when a record is written
I        into it.
N
I        WRITECHECK /* Abbreviation: WCK */: Indicates that a record is
I          written and then read, without data transfer, to test for the
I          data check condition.
N
I          Exception: When you use VSAM RLS or DFSMStvs access, the
N          WRITECHECK parameter is ignored.
N
I        NOWRITECHECK /* Abbreviation: NWCK */: Does not write-check the
I          alternate index or component. checked by a write check.
N
D    ) /* - */
N
NOptional parameter
N------------------
M    CATALOG(catname) /* Abbreviation: CAT */
I      Identifies the catalog in which the alternate index is defined.
I      The catalog also contains the base cluster's entry (see the
I      description of the RELATE in preceding text). Search "Catalog
I      Selection Order for DEFINE" for the order in which a catalog is
I      selected if the catalog's name is not specified.
N
I      Before you can assign catalog names for SMS-managed data sets,
I      you must have access to the RACF STGADMIN.IGG.DIRCAT FACILITY
I      class. Search "Storage Management Subsystem (SMS) Considerations"
I      for more information.
N
I      catname/alias: Names the catalog or an alias that can be resolved
I        to a catalog. For example, if alias ABCD relates to catalog
I        SYS1.USERCAT then specifying either ABCD or SYS1.USERCAT will
I        cause the alternate index to be defined in SYS1.USERCAT.
N
I      If the catalog's volume is physically mounted, it is dynamically
I      allocated. Mount the volume as permanently resident or reserved.
* End of WISH.
