SREXR0450
Tz/OS TSO/E REXX Reference
T-Chapter 4.
T-Built-in functions
T-TIME
E"Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20180517-175818
*
@IBM Corporation
*
Bikj4a3a0.pdf
BSA22-7790-10 z/OS TSO/E REXX Reference
BVersion 1 Release 13
*
Nz/OS TSO/E REXX Reference
N=========================
NChapter 4. Functions
N--------------------
NBuilt-in functions
N------------------
NTIME
N----
NTIME returns the local time in the 24-hour clock format: hh:mm:ss
N(hours, minutes, and seconds) by default, for example, 04:41:37.
N
N
NSyntax:
D  TIME(option)
I    option: You can use the following options to obtain alternative
I            formats, or to gain access to the elapsed-time clock.
I            (Only the capitalized and highlighted letter is needed; all
I            characters following it are ignored.)
N
I      Civil: returns the time in Civil format: hh:mmxx. The hours may
I             take the values 1 through 12, and the minutes the values
I             00 through 59. The minutes are followed immediately by the
I             letters am or pm. This distinguishes times in the morning
I             (12 midnight through 11:59 a.m. appearing as 12:00am
I             through 11:59am) from noon and afternoon (12 noon through
I             11:59 p.m. appearing as 12:00pm through 11:59pm). The hour
I             has no leading zero. The minute field shows the current
I             minute (rather than the nearest minute) for consistency
I             with other TIME results.
N
I      Elapsed: returns sssssssss.uuuuuu, the number of
I               seconds.microseconds since the elapsed-time clock
I               (described later) was started or reset. The number has
I               no leading zeros or blanks, and the setting of
I               NUMERIC DIGITS does not affect the number. The
I               fractional part always has six digits.
N
I      Hours: returns up to two characters giving the number of hours
I             since midnight in the format: hh (no leading zeros or
I             blanks, except for a result of 0).
N
I      Long: returns time in the format: hh:mm:ss.uuuuuu (uuuuuu is the
I            fraction of seconds, in microseconds). The first eight
I            characters of the result follow the same rules as for the
I            Normal form, and the fractional part is always six digits.
N
I      Minutes: returns up to four characters giving the number of
I               minutes since midnight in the format: mmmm (no leading
I               zeros or blanks, except for a result of 0).
N
I      Normal: returns the time in the default format hh:mm:ss, as
I              described previously. The hours can have the values
I              00 through 23, and minutes and seconds, 00 through 59.
I              All these are always two digits. Any fractions of seconds
I              are ignored (times are never rounded up).
N
I              This is the default.
N
I      Reset: returns sssssssss.uuuuuu, the number of
I             seconds.microseconds since the elapsed-time clock
I             (described later) was started or reset and also resets the
I             elapsed-time clock to zero. The number has no leading
I             zeros or blanks, and the setting of NUMERIC DIGITS does
I             not affect the number. The fractional part always has six
I             digits.
N
I      Seconds: returns up to five characters giving the number of
I               seconds since midnight in the format: sssss (no leading
I               zeros or blanks, except for a result of 0).
N
N
NExample
N-------
I  clock_24      = Time()                   /* see Normal             */
I  clock_civil   = Time("C")                /* hh:mmxx xx=Am or PM    */
I  clock_elapsed = Time("E")                /* ssssssss.uuuuuu        */
I  clock_hour    = Time("H")                /* hours since midnight   */
I  clock_long    = Time("L")                /* hh:mm:ss.uuuuuu        */
I  clock_minutes = Time("M")                /* minutes since midnight */
I  clock_normal  = Time("N")                /* Default hh:mm:ss       */
I  clock_reset   = Time("R")                /* "E" then reset timer   */
I  clock_seconds = Time("S")                /* Seconds since midnight */
I
I  Say "24 Hour clock:" clock_24"."
I  Parse Var clock_24,
I    current_hour ":" current_minute ":" current_second,
I    =1 regular_hour +2 .
I  am_or_pm = "AM"
I  If (current_hour > 11) Then,
I    Do
I      am_or_pm = "PM"
I      regular_hour = regular_hour - 12
I    End
I  Say "12 Hour clock:" regular_hour":"current_minute am_or_pm
I
I  Say "Time()    ->" Time()
I  Say "Time('C') ->" Time("C")
I  Say "Time('E') ->" Time("E")
I  Say "Time('H') ->" Time("H")
I  Say "Time('L') ->" Time("L")
I  Say "Time('M') ->" Time("M")
I  Say "Time('N') ->" Time("N")
I  Do Until seconds_now > clock_seconds
I    seconds_now = Time("S")
I  End
I  Say "Time('E') ->" Time("E")
I  Say "Time('R') ->" Time("R")
I  Say "Time('S') ->" Time("S")
* End of WISH.
