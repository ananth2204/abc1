SRXCP0100
KREXXC REXXL
TGeorge Fulk
T-REXX Compiler Presentation
T-Tomiak pre-allocations
E"Kenneth Tomiak"<TSO_Ken@KTomiak.BIZ>
Z20180522-155854
Whttp://www.ktomiak.biz/ORG/
@Kenneth Tomiak
*
NGeorge Fulk
N-----------
NREXX Compiler Presentation
N--------------------------
NTomiak pre-allocations
N----------------------
NKenneth Tomiak provides this job to define data sets for the
Nsuccessful execution of the jobs shown in the presentation.
N
I//!xsysuser! JOB (acct-info),
D//             'DEMO: REXXC ALLOCS  ',
D//             RESTART=ST01#09,                   <=== Choose carefully
D//             CLASS=A,MSGCLASS=X,TIME=1440,
D//             REGION=32M,NOTIFY=&SYSUID.
D//*
D//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D//* ===================================================================
D//*
D//* Library: JCL.CNTL(RXCP0100)
D//* Contact: "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
D//* Purpose: This job will refresh the RXC environment.
D//* Setup  : Choose your restart step carefully as you may already
D//*          have some of these data sets allocated for other reasons.
D//*
D//* -------------------------------------------------------------------
D//*
D//* HISTORY OF MODIFICATIONS
D//* ========================
D//* VV.MM WHEN     WHO / WHAT YOU DID ... (NEWEST CHANGE AT THE TOP.)
D//* ----- -------- ----------------------------------------------------
D//* 01.00 20180516 !xsysuser! "Kenneth Tomiajk<CBT_Ken@KTomiak.BIZ>
D//*                1) Original base code.
D//* ----- -------- ----------------------------------------------------
D//*
D//* -------------------------------------------------------------------
D//*
D//* ===================================================================
D//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
D//*
D//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D//* Delete the data set that holds your JCL. You might have this.
D//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
D//ST01#09 EXEC PGM=IDCAMS
D//SYSIN     DD DATA,DLM='!!'
D  DELETE '!xsysuser!.RXC.CNTL'
D  SET MAXCC = 0
D!!
D//SYSPRINT  DD SYSOUT=*
D//*
D//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D//* Define the data sets for job control language statements.
D//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
D//ST02#09 EXEC PGM=IEFBR14
D//CNTL      DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.CNTL,          <===JCL
D//             UNIT=SYSALLDA,VOL=SER=VPWRKA,
D//             SPACE=(TRK,(20,5,5)),
D//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=80)
D//*
D//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D//* Delete the data set that holds your REXX code. You might have this.
D//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
D//ST03#09 EXEC PGM=IDCAMS
D//SYSIN     DD DATA,DLM='!!'
D  DELETE '!xsysuser!.RXC.REXX'
D  SET MAXCC = 0
D!!
D//SYSPRINT  DD SYSOUT=*
D//*
D//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D//* Define the data set that hold your REXX code. You might have this.
D//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
D//ST04#09 EXEC PGM=IEFBR14
D//REXX      DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.REXX,        <==source
D//             UNIT=SYSALLDA,VOL=SER=VPWRKA,
D//             SPACE=(TRK,(20,5,5)),
D//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=80)
D//*
D//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D//* Delete the data sets used with the linkage editor.
D//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
D//ST05#09 EXEC PGM=IDCAMS
D//SYSIN     DD DATA,DLM='!!'
D  DELETE '!xsysuser!.RXC.IEWBLINK'
D  DELETE '!xsysuser!.RXC.LOADLIB'
D  DELETE '!xsysuser!.RXC.OBJLIB'
D  SET MAXCC = 0
D!!
D//SYSPRINT  DD SYSOUT=*
D//*
D//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D//* Define the data sets for program run-times.
D//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
D//ST06#09 EXEC PGM=IEFBR14
D//IEWBLINK  DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.IEWBLINK, <==sysprint
D//             UNIT=SYSALLDA,VOL=SER=VPWRKA,
D//             SPACE=(TRK,(20,5,5)),
D//             DCB=(RECFM=VBA,BLKSIZE=0,LRECL=125)
D//LOADLIB   DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.LOADLIB, <==loadmod
D//             UNIT=SYSALLDA,VOL=SER=VPWRKA,
D//             SPACE=(TRK,(20,5,1)),DSNTYPE=LIBRARY,
D//             DCB=(RECFM=U,BLKSIZE=4096,LRECL=32760)
D//OBJLIB    DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.OBJLIB,   <==Object
D//             UNIT=SYSALLDA,VOL=SER=VPWRKA,
D//             SPACE=(TRK,(10,10,2)),
D//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=80)
D//*
D//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D//* Delete the group of data sets for testing the RXCP* activities.
D//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
D//ST07#09 EXEC PGM=IDCAMS
D//SYSIN     DD DATA,DLM='!!'
D  DELETE '!xsysuser!.RXC.CEXEC'
D  DELETE '!xsysuser!.RXC.IEXEC'
D  DELETE '!xsysuser!.RXC.STUBBED'
D  DELETE '!xsysuser!.RXC.REXXCLST'
D  DELETE '!xsysuser!.RXC.REXXCERR'
D  DELETE '!xsysuser!.RXC.REXXLLST'
D  SET MAXCC = 0
D!!
D//SYSPRINT  DD SYSOUT=*
D//*
D//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D//* Define the data sets for program compilation.
D//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
D//ST08#09 EXEC PGM=IEFBR14
D//CEXEC     DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.CEXEC,    <==compiled
D//             UNIT=SYSALLDA,VOL=SER=VPWRKA,
D//             SPACE=(TRK,(10,10,2)),
D//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=80)
D//IEXEC     DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.IEXEC,    <==%include
D//             UNIT=SYSALLDA,VOL=SER=VPWRKA,
D//             SPACE=(TRK,(10,10,2)),
D//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=80)
D//STUBBED   DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.STUBBED, <==StubObj
D//             UNIT=SYSALLDA,VOL=SER=VPWRKA,
D//             SPACE=(TRK,(10,10,2)),
D//             DCB=(RECFM=FB,BLKSIZE=0,LRECL=80)
D//REXXCLST  DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.REXXCLST, <==sysprint
D//             UNIT=SYSALLDA,VOL=SER=VPWRKA,
D//             SPACE=(TRK,(20,5,5)),
D//             DCB=(RECFM=VBA,BLKSIZE=0,LRECL=125)
D//REXXCERR  DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.REXXCERR, <==systerm
D//             UNIT=SYSALLDA,VOL=SER=VPWRKA,
D//             SPACE=(TRK,(20,5,5)),
D//             DCB=(RECFM=VBA,BLKSIZE=0,LRECL=125)
D//REXXLLST  DD DISP=(NEW,CATLG),DSN=&SYSUID..RXC.REXXLLST, <==sysprint
D//             UNIT=SYSALLDA,VOL=SER=VPWRKA,
D//             SPACE=(TRK,(20,5,5)),
D//             DCB=(RECFM=VBA,BLKSIZE=0,LRECL=125)
D//*
D//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D//* Copy two REXX programs
D//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
D//ST09#09 EXEC PGM=IEBUPDTE,PARM=MOD
D//SYSPRINT  DD SYSOUT=*
D//SYSUT1    DD DISP=(OLD),DSN=&SYSUID..RXC.REXX
D//SYSUT2    DD DISP=(OLD),DSN=&SYSUID..RXC.REXX
D//SYSIN     DD DATA,DLM='!!'
D./         ADD    LIST=ALL,NAME=ANYREXX
D/* rexx */
DRexx_ANYREXX:
D  rexxpgm_version = "01.00"           /* ver lev */
D
D/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D=======================================================================
D This code drives Initialization, Process, and Termination routines.
D=======================================================================
D>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
DMain_Routine:
D  return_code = Initialization_Routine()
D  IF (return_code = 0) THEN DO
D    return_code = Process_Routine()
D  END
D  return_code = Termination_Routine()
D  RETURN return_code
D
D/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D=======================================================================
D
D Dataset:  DEMO.REXX(ANYREXX)
D Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
D Overview: Determine the operating system so that the programmer can
D           use platform-specific instructions. For example:
D           z/OS and z/VM use EXECIO instead of CHARIN/LINE on the PC.
D Syntax:   %ANYREXX |arguments|
D
D-----------------------------------------------------------------------
D
D History of Modifications
D ------------------------
Dvv.mm WHEN     Who / What you did ... (Newest change at the top.)
D----- -------- --------------------------------------------------------
D01.00 20180516 !xsysuser! "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
D               1) Original code in KTPM07 style.
D----- -------- --------------------------------------------------------
D
D-----------------------------------------------------------------------
D
DSTANDARD GLOBAL DISCLAIMER
D--------------------------
DThe author explicitly disavows any claim whatsoever about the
Dcorrectness or functionality of this program, and disclaims liability
Dfor anything and everything bad that might happen in connection with,
Dbefore, during, or after using it. I have tried to make it work right,
Dand I am personally pretty confident that it does, but everybody makes
Dmistakes, so if you use it, you do so at your own risk.
D
D=======================================================================
D>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
D
D/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D=======================================================================
D This routine initializes constants and variables.
D=======================================================================
D>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
DInitialization_Routine:
D  return_code = 0
D  PARSE VERSION,
D    version_rexx_name ,
D    version_rexx_version ,
D    version_rexx_date
D  PARSE SOURCE ,
D    source_host_env ,
D    source_call_type ,
D    source_uc_exec_name ,
D    source_hostdd ,
D    source_hostdsn ,
D    source_nf_exec_name ,
D    source_initial_cmd_env ,
D    source_asid_name ,
D    source_char8_user_token ,
D    source_hostother
D/*
D
DRexx-interpreted:
D---------------------------------------------------
DVersion:
DName:REXX370 Version:3.48 Date:01 May 1992
D
DSource:
DHost env:TSO CALL type:COMMAND EXEC Name:ANYREXX
DHostdd:SYSEXEC HostDSN:? nf Name:?
DCmd env:TSO ASID:ISPF User token:? Other:
D
DRexx-compiled:
D---------------------------------------------------
DName:REXXC370 Version:3.48 Date:23 Dec 1999
D
DSource:
DHost env:TSO CALL type:COMMAND EXEC Name:ANYREXX
DHostdd:SYS00206 HostDSN:!xsysuser!.CBT.CEXEC nf Name:?
DCmd env:TSO ASID:ISPF User token:? Other:
D
D*/
D  address_environment = ADDRESS()
D  return_code = 0
D  RETURN return_code
D
D/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D=======================================================================
D This routine does the processing.
D=======================================================================
D>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
DProcess_Routine:
D  SAY "Version:"
D  SAY ,
D    "Name:"version_rexx_name,
D    "Version:"version_rexx_version,
D    "Date:"version_rexx_date
D
D  SAY ""
D  SAY "Source:"
D  SAY ,
D    "Host env:"source_host_env,
D    "Call type:"source_call_type,
D    "EXEC Name:"source_uc_exec_name
D  SAY ,
D    "Hostdd:"source_hostdd,
D    "HostDSN:"source_hostdsn,
D    "nf Name:"source_nf_exec_name
D  SAY ,
D    "Cmd env:"source_initial_cmd_env,
D    "ASID:"source_asid_name,
D    "User token:"source_char8_user_token,
D    "Other:"source_hostother
D
D  SAY ""
D  SAY "Environment:"
D  SAY address_environment
D
D  op_sys = Determine_Op_Sys()
D  SAY ""
D  SAY "Operating System:"op_sys
D
D  SAY ""
D  SAY "Program Name:" source_pgm_name
D
D  RETURN return_code
D
D/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D=======================================================================
D This routine does cleanup before exiting.
D=======================================================================
D>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
DTermination_Routine:
D  lastline = SOURCELINE()
D  SAY "This code has:" lastline "line(s)."
D  SAY ""
D  SAY COPIES("=",79)
D  SAY LEFT("= RC=" return_code,77) "="
D  SAY COPIES("=",79)
D  SAY ""
D  RETURN return_code
D
D/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D Use VERSION and SOURCE to determine the operating system.
D>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
DDetermine_Op_Sys:
D  SELECT
D    WHEN (LEFT(version_rexx_name,11) = "REXX-ooRexx") THEN DO
D      PARSE VAR version_rexx_name ,
D        . "_" ,
D        Version_rexx_v "." ,
D        Version_rexx_r "." ,
D        Version_rexx_m "(" ,
D        =1 . "_" Version_rexx_vrm "(" .
D      rexx_envir = "PC/ooREXX"
D    END
D    WHEN ((version_rexx_name = "REXXSAA") & ,
D          (source_initial_cmd_env = "DOS")) Then Do
D      rexx_envir = "PC/IBM_PC_DOS"
D    END
D    WHEN ((version_rexx_name = "REXXSAA") & ,
D          (source_initial_cmd_env = "OS2")) Then Do
D      rexx_envir = "PC/IBM_OS/2"
D    END
D    WHEN ((version_rexx_name = "REXX370") & ,
D          (source_initial_cmd_env = "CMS")) Then Do
D      rexx_envir = "VM/CMS"
D    END
D    WHEN ((source_asid_name = "MVS") & ,
D          (source_initial_cmd_env = "MVS")) Then Do
D      rexx_envir = "MVS/Batch"
D    END
D    WHEN ((version_rexx_name = "REXX370") & ,
D          (source_initial_cmd_env = "TSO")) Then Do
D      rexx_envir = "MVS/TSO"
D    END
D    WHEN ((version_rexx_name = "REXX370") & ,
D          (source_initial_cmd_env = "ISPF")) Then Do
D      rexx_envir = "MVS/TSO/ISPF"
D    END
D    WHEN ((version_rexx_name = "REXXC370") & ,
D          (source_initial_cmd_env = "TSO")) Then Do
D      rexx_envir = "MVS/TSO"
D    END
D    WHEN ((version_rexx_name = "REXXC370") & ,
D          (source_initial_cmd_env = "ISPF")) Then Do
D      rexx_envir = "MVS/TSO/ISPF"
D    END
D    WHEN ((version_rexx_name = "REXX/2") & ,
D          (To_Uppercase(LEFT(source_host_env,7)) = "WINDOWS")) Then Do
D      rexx_envir = "PC/SPF-PC"
D    END
D    WHEN (address_environment = "COMMAND") THEN DO
D      rexx_envir = "PC/DOS7.0"
D    END
D    WHEN (address_environment = "SYSTEM") THEN DO
D      rexx_envir = "PC/REGINA"
D    END
D    OTHERWISE DO
D      rexx_envir = "UNKNOWN"
D    END
D  END
D  SELECT
D    WHEN (LEFT(rexx_envir,3) = "MVS") THEN DO
D      source_pgm_name = source_uc_exec_name
D    END
D    WHEN (LEFT(rexx_envir,2) = "VM") THEN DO
D      source_pgm_name = source_uc_exec_name
D    END
D    WHEN (To_Uppercase(LEFT(source_host_env,7)) = "WINDOWS") THEN DO
D      last_slash = LASTPOS("\",source_uc_exec_name)
D      IF (last_slash > 0) THEN DO
D        fileName_ext = SUBSTR(source_uc_exec_name,(last_slash + 1))
D      END
D      ELSE DO
D        fileName_ext = source_uc_exec_name
D      END
D      PARSE VAR fileName_ext source_pgm_name "." Source_pgm_ext
D    END
D    OTHERWISE DO
D      SAY "Otherwise:" rexx_envir To_Uppercase(LEFT(source_host_env,7))
D    END
D  END
D  RETURN rexx_envir
D
D/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
DConvert string to lowercase.
D>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
DTo_Lowercase:
D  PARSE ARG myarg
D  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
D    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
D  END
D  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
D    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
D  END
D  RETURN TRANSLATE(myarg,lowercase_letters,uppercase_letters)
D
D/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
DConvert string to uppercase.
D>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
DTo_Uppercase:
D  PARSE ARG myarg
D  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
D    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
D  END
D  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
D    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
D  END
D  RETURN TRANSLATE(myarg,uppercase_letters,lowercase_letters)
D
D/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D=======================================================================
DEnd of code.
D=======================================================================
D>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
D./         ADD    LIST=ALL,NAME=INVKRXCF
D/* rexx */
DRexx_INVKRXCF:
D  rexxpgm_version = "01.00"           /* ver lev */
D  PARSE ARG hlq
D  IF ((hlq = "hlq") | (hlq = "")) THEN DO
D    SAY "You must provide the high-level-qualifier to the product."
D    RETURN 16
D  END
D  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
D  ADDRESS ISPEXEC "LIBDEF ISPLLIB DATASET ID('"hlq".SFANLMD') STACK"
D  ADDRESS ISPEXEC "LIBDEF ISPMLIB DATASET ID('"hlq".SFANMSEU') STACK"
D  ADDRESS ISPEXEC "LIBDEF ISPPLIB DATASET ID('"hlq".SFANPENU') STACK"
D  ADDRESS ISPEXEC "LIBDEF ISPSLIB DATASET ID('"hlq".SFANSKL') STACK"
D  Address TSO "ALTLIB Activate Application(EXEC)" ,
D    "DATASET('"hlq".SFANCMD') UNCOND"
D  ADDRESS ISPEXEC "SELECT" ,
D    "PGM(ISRFPR) PARM((FANFP14,ISRFP14) 14) NEWPOOL"
D  ADDRESS TSO "ALTLIB DeActivate Application(EXEC)"
D  ADDRESS ISPEXEC "LIBDEF ISPLLIB"
D  ADDRESS ISPEXEC "LIBDEF ISPMLIB"
D  ADDRESS ISPEXEC "LIBDEF ISPPLIB"
D  ADDRESS ISPEXEC "LIBDEF ISPSLIB"
D  RETURN 0
D./         ADD    LIST=ALL,NAME=MORT
D/* rexx */
DRexx_MORT:
D  rexxpgm_version = "01.00"           /* ver lev */
D  ARG loanamt rate years
D  PARSE VERSION v1
D  PARSE SOURCE v2
D  SAY v1
D  SAY v2
D  monthly = loanamt * (rate/1200) * (1+1/(((1+rate/1200)**(12*years)-1))
D  SAY "Monthly payment = $" || FORMAT(monthly,,2)
D  RETURN 0
D./       ENDUP
D!!
D//SYSUT2    DD DISP=OLD,DSN=&SYSUID..RXC.REXX
D//*
D//* End of Job RXCP0100.
D//
* End of WISH.
