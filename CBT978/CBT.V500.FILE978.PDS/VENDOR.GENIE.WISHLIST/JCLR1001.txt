SJCLR1001
Tz/OS JCL Reference
T-Comment Statement Example
E"Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
Z20180512-1590154
*
@IBM Corporation
*
NSA22-7597-16 z/OS JCL Reference
NComment Statement
N=================
NExample: How to add comments to JCL.
N
D//*
D//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D//* Put something meaningful here.
D//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
M
D//*comment
M
I//*On a JES3 system you need to avoid starting with a JES3 keyword.
M
D//*While the manual says you can go out to column 80, do not use
D//*column 72 to continue your comment. Instead just code more
D//*comment cards.
M
MThe //*comment statement is not the same as the comment field found
Mon other JCL statements. In the EXEC example below you can see the
Mcomment field was spread over three statements before a comment
Mstatement was used.
NI have seen too many JCL errors because a comment went to column 72.
M
D//POORLY  EXEC PGM=IEFBR14     Which is different from                 +
D//                             continuing comments from another JCL    +
D//                             statement. But really, there is no      +
D//                             reason to work hard at continuing a     +
D//                             comment when there is a better way.
N
D//BETTER  EXEC PGM=IEFBR14     Which is different from continuing
D//*                            comments from another JCL statement. But
D//*                            really, there is no good reason not to
D//*                            just use //*.
N
NIn some previous IBM examples you will find the time-consuming flower
Nbox kind of comment. A flower-box looked pretty in the days we printed
Nlistings, but they have a heavy price in the time it takes to carefully
Nconstruct it and the time it takes later when a change is made that
Ndisrupts the flow of material inside it.
I
IIf you follow the 'Programming Using The Kenneth Tomiak Method' (PUTKTM)
Ithen you will know to avoid the silly practice. You may still use a three
Isided annotation box. And use different sub-markers to denote levels.
D//*
D//* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
D//* ===================================================================
D//* The string of less than (<) characters shows the start of a comment
D//* block. The first string of equal sign (=) characters shows this is
D//* a major comment. It might be used to describe a job or a multi-step
D//* procedure. Next comes the actual comment.
D//* -------------------------------------------------------------------
D//* The first string of dash (-) characters shows the start of a minor
D//* block. Followed by the actual comment. PUTKTM uses these for steps
d//* and sub-routines in program code. The first string of dash (-)
D//* characters shows the end of the minor block.
D//* -------------------------------------------------------------------
D//* The second string of equal sign (=) characters shows the end of the
D//* major block.
D//* ===================================================================
D//* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
* End of WISH.
