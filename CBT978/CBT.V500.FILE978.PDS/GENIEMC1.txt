/* rexx */
Rexx_GENIEMC1:
  rexxpgm_version = "01.03"           /* ver lev */

  ADDRESS ISREDIT "MACRO (bulk) NOPROCESS"
  UPPER bulk
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  ADDRESS ISREDIT "MEND"
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  TSO.REXX(GENIEMC1)
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Overview: Strip "T" records down in size.
 Syntax:   %GENIEMC1 |bulk|
             bulk: YES when more than one member is being processed.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.03 20180516 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Handle saving a new member RC(04) ledt to adding
                  logic for all of the possible return codes.
               2) If BULK = YES and SAVE failed then SETMSG and
                  do not END. VPUT(GONOGO) = NOGO to halt processing.
----- -------- --------------------------------------------------------
01.02 20180515 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Move NOSMART logic here. Changes PC smart
                  characters to the typewriter based equivalents.
               2) Added macro parameter BULK to signal when more
                  than one member is being processed.
----- -------- --------------------------------------------------------
01.01 20180512 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Tweaking to look at all members.
----- -------- --------------------------------------------------------
01.00 20180511 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  ADDRESS ISREDIT "(editmbr) = MEMBER"
  ADDRESS ISREDIT "(editdsn,origdsn,origlibn) = DATASET"
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  ADDRESS ISREDIT "(finddata) = LINE 1"
  finddata = STRIP(finddata,"B"," ")
  newdata = "S"editmbr
  IF (finddata <> newdata) THEN DO
    ADDRESS ISREDIT "LINE 1 = (newdata)"
  END
  ADDRESS ISREDIT "C ALL 'kenneth e. tomiak' 'Kenneth Tomiak'"
  IF (LEFT(editmbr,4) = "$$$$") THEN DO
    ADDRESS ISREDIT "C ALL 'topic' 'TOPIC'"
    ADDRESS ISREDIT "C ALL 'chapter' 'CHAPTER'"
    ADDRESS ISREDIT "C ALL 'wish' 'WISH'"
    ADDRESS ISREDIT "C ALL 'T-CHAPTER' 'T-Chapter'"
    ADDRESS ISREDIT "C ALL 'NCHAPTER' 'NChapter'"
  END
  SELECT
    WHEN (LENGTH(editmbr) = 4) THEN DO
      NOP
    END
    WHEN (LENGTH(editmbr) = 6) THEN DO
      NOP
    END
    WHEN (LENGTH(editmbr) = 8) THEN DO
      ADDRESS ISREDIT "FIND 'T-Chapter' FIRST"
      find_rc = RC
      IF (find_rc = 0) THEN DO
        ADDRESS ISREDIT "(findline, findpos) = CURSOR"
        findline = findline + 0
        ADDRESS ISREDIT "(finddata) = LINE" findline
        IF (POS(":",finddata) > 0) THEN DO
          PARSE VAR finddata newdata ":" . "-" keeper
        END
        ELSE DO
          PARSE VAR finddata newdata "." . "-" keeper
        END
        newdata = newdata || "."
        ADDRESS ISREDIT "LINE" findline "= (newdata)"
        keeper = STRIP(keeper,"B"," ")
        IF (keeper <> "") THEN DO
          newdata = "T-" || keeper
          ADDRESS ISREDIT "LINE_AFTER" findline "= (newdata)"
        END
      END
    END
    OTHERWISE DO
      NOP
    END
  END

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Change PC smart characters to valid EBCDIC characters.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  ADDRESS ISREDIT "x ' ' all"
  ADDRESS ISREDIT "C x'01' ' ' all"   /*  */
  ADDRESS ISREDIT "C x'05' ' ' all"   /* tab */
  ADDRESS ISREDIT "C x'11' ""'"" all" /*  */
  ADDRESS ISREDIT "C x'12' ""'"" all" /* apostrophe */
  ADDRESS ISREDIT "C x'13' '""' all"  /* start quote */
  ADDRESS ISREDIT "C x'19' '' all"    /* TM */
  ADDRESS ISREDIT "C x'26' ' ' all"   /*  */
  ADDRESS ISREDIT "C x'32' '-' all"   /* dash */
  ADDRESS ISREDIT "C x'39' '' all"    /* TM */
  ADDRESS ISREDIT "C x'3C' '""' all"  /* end quote */
/*ADDRESS ISREDIT "C x'??' ' ' all"   /* not x'50' blank house */ */
  ADDRESS ISREDIT "C x'AF' '' all"    /* Registered */

  ADDRESS ISREDIT "f p'.' first"
  find_rc = RC
  IF ((bulk <> "YES") & (find_rc = 0)) THEN DO
    ADDRESS ISREDIT "(strg,lin) = FIND_COUNTS"
    SAY "("strg","lin") = FIND_COUNTS strings and lines"
    ZERRALRM = "YES"
    ZERRHM = "*"
    ZERRSM = "p'.' found"
    ZERRLM = ,
      LEFT("Reissue the find p'.' first command.",76)
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
  END

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  ADDRESS ISREDIT ,
    "F c'* End of WISH.' 1 ALL"
  find_rc = RC
  IF (find_rc > 0) THEN DO
    ADDRESS ISREDIT ,
      "C '* End of WISH' '* End of WISH.' 1 ALL"
    ADDRESS ISREDIT ,
      "C '* End of WISH..' '* End of WISH.' 1 ALL"
  END
  ADDRESS ISREDIT "(lastline) = LINENUM .ZLAST"
  lastline = lastline + 0
  ADDRESS ISREDIT "(lastdata) = LINE" lastline
  DO WHILE (lastdata = " ")
    IF (STRIP(lastdata,"B"," ") = "") THEN DO
      ADDRESS ISREDIT "DELETE" lastline
      lastline = lastline - 1
    END
    ADDRESS ISREDIT "(lastdata) = LINE" lastline
  END
  IF (lastdata <> "* End of WISH.") THEN DO
    newdata = "* End of WISH."
    ADDRESS ISREDIT "LINE_AFTER" lastline "= (newdata)"
  END
  ADDRESS ISREDIT "(datachgd) = DATA_CHANGED"
  IF (datachgd = "YES") THEN DO
    ADDRESS ISREDIT "FIND 'Z' 1 FIRST"
    find_rc = RC
    IF (find_rc = 0) THEN DO
      ADDRESS ISREDIT "(findline, findpos) = CURSOR"
      findline = findline + 0
      ADDRESS ISREDIT "(finddata) = LINE" findline
      PARSE VALUE TIME("N") WITH hr ":" mn ":" sc
      time_blk = hr || mn || sc
      newdata = "Z" || DATE("S") || "-" || time_blk
      ADDRESS ISREDIT "LINE" findline "= (newdata)"
    END
    gonogo = "NOGO"
    ADDRESS ISREDIT "SAVE"
    save_rc = RC
    SELECT
      WHEN (save_rc = 0) THEN DO
        /* Normal completion */
        gonogo = "GO"
      END
      WHEN (save_rc = 4) THEN DO
        /* New member saved - wish is also a good save */
        gonogo = "GO"
      END
      WHEN (save_rc = 8) THEN DO
        /* Data is not saved; the SAVE command was entered              .
           while in View */
        NOP
      END
      WHEN (save_rc > 12) THEN DO
        /* Data is not saved; possible reasons are:
           -> There is not enough PDS space or directory space available
              to satisfy the command.
           -> The NEWGEN or NOGEN parameter was specified while editing
              a file that is not a member in a PDSE version 2 data set
              that is configured for member generations. */
        ADDRESS ISPEXEC "DSINFO DATASET('"editdsn"')"
        IF (ZDSDIRA = ZDSDIRU) THEN DO
          ZERRLM = "You need to add directory blocks to:" editdsn
          ZERRLM = ZERRLM ,
            LEFT("More than" SPACE(ZDSDIRU) "directory blocks.",76)
        END
        ELSE DO
          ZERRLM = "You need to compress:" editdsn
          ZERRLM = ZERRLM ,
            LEFT("Or allocate it larger than" ,
            SPACE(ZDSTOTUX) ZDSSPC,76)
        END
        return_code = save_rc
      END
      WHEN (save_rc = 20) THEN DO
        /* Severe error */
        return_code = save_rc
      END
      OTHERWISE DO
        SAY "You should never reach here, RC("save_rc")."
        return_code = save_rc
      END
    END
  END
  IF ((bulk <> "YES") & (save_rc > 0)) THEN DO
    ZERRALRM = "YES"
    ZERRHM = "*"
    ZERRSM = "Press HELP!"
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
  END
  ADDRESS ISPEXEC "VPUT (GONOGO) SHARED"
  IF (save_rc < 5) THEN DO
    ADDRESS ISREDIT "END"
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
