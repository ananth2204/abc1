/* rexx */
Rexx_GENIEBLD:
  rexxpgm_version = "01.10"           /* ver lev */

  PARSE ARG Dataset nothing
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Here is where you can tailor GENIE to use a different
 configuration member.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  cfgmember = "$$$$0501"

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

=======================================================================

Dataset: REXX(GENIEBLD)
Contact: "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
Purpose: This code uses ISPF library services to gather all
         members and create the cfgmember member for the %GENIE
         Edit macro.
Syntax:  geniebld |filename|
         filename: a PDS or PDSE where WISHLIST members are stored.

-----------------------------------------------------------------------

History of Modifications
========================
vv.mm When     Who / What you did
----- -------- --------------------------------------------------------
01.10 20180710 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Set return_code on lminit and lmopen.
               2) Initialize dataout_count earlier and use to bypass
                  errant DISKW attempt when PDSDSN is not available.
----- -------- --------------------------------------------------------
01.09 20180517 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added length check for MSGLINE and NOTELINE > 72.
----- -------- --------------------------------------------------------
01.08 20180513 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Removed 'id@type = "F"' as "F" is no longer used.
               2) Changed configuration file to configuration member.
----- -------- --------------------------------------------------------
01.07 20180512 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Stylize using Edit Macro @putktm:
                  Programming Using The Kenneth Tomiak Method.
               2) Stylize using
                  Programming Using The Kenneth Tomiak Method.
               3) Updated initial comment.
               4) Fixed time on "Z" record to not have ":".
----- -------- --------------------------------------------------------
01.06 20180322 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) Show record ctr when bad internal type.
----- -------- --------------------------------------------------------
01.05 20180207 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) SETMSG when cfgmember is successfully built.
----- -------- --------------------------------------------------------
01.04 20180122 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) Removed prompt to overlay cfgmember.
----- -------- --------------------------------------------------------
01.03 20170611 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) Renamed to GENIEBLD.
----- -------- --------------------------------------------------------
01.02 20170531 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) Replaced subsequent use of Dataset to pdsdsn.
               2) Support "F" to map file to a topic.
----- -------- --------------------------------------------------------
01.01 20170507 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) Stylized History of Modifications per PUTKTM-REXX.
               2) Added support for id@type = "R", "X", and "?".
               3) Support case-insensitive id@type values.
                  That means the WISHLIST files are now mixed case
                  tolerant. For example, you can now use "X" or "x".
               4) Add To_Lowercase and To_Uppercase routines.
----- -------- --------------------------------------------------------
01.00 20170411 KTomiak "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
               1) Original code cloned from PDS2UPDT and modified.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  dataout_count = 0
  sysvar_sysuid = SYSVAR("SYSUID")
  IF (Dataset = "") THEN DO
    Dataset = "VENDOR.SYSPG.WISHLIST"
  END
  PDSDSN = STRIP(Dataset,"B","'")
  ADDRESS ISPEXEC "LMINIT DATAID(DATAID)",
    "DATASET('"PDSDSN"') ENQ(SHR)"
  lminit_rc = RC
  IF (lminit_rc <> 0) THEN DO
    ZERRSM = "WISHLIST problem"
    ZERRLM = "THE FILE" PDSDSN "IS IN USE OR DOES NOT EXIST."
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return_code = lminit_rc
    RETURN return_code
  END
  ADDRESS ISPEXEC "LMOPEN DATAID("DATAID")",
    "OPTION(INPUT) LRECL(MYRECLN)"
  lmopen_rc = RC
  IF (lmopen_rc > 0) THEN DO
    ZERRSM = "FILE FAILED TO OPEN"
    ZERRLM = "THE FILE" PDSDSN "FAILED TO OPEN RC="lmopen_rc
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return_code = lmopen_rc
    RETURN return_code
  END
  myrecln = myrecln + 0
  num_lvls = 0
  real_dsn = pdsdsn
  DO WHILE (real_dsn <> "")
    num_lvls = num_lvls + 1
    PARSE VAR real_dsn LQ '.' real_dsn
    lq.num_lvls = LQ
  END
  lq.0 = num_lvls
  out_dsn = sysvar_SYSUID".SEQOUT"
  DO ix = 1 TO num_lvls
    one_level = lq.ix
    IF (one_level = sysvar_SYSUID) THEN DO
      ITERATE
    END
    out_dsn = out_dsn"."one_level
  END
  sysdsn_status = SYSDSN("'"out_dsn"'")
  IF (sysdsn_status = "OK") THEN DO
    "ALLOC FILE(SEQOUT) DA('"out_dsn"') OLD",
      "TRACKS SPACE(250 150) REUSE"
    MYRC=RC
  END
  ELSE DO
    "ALLOC FILE(SEQOUT) DA('"out_dsn"')",
      "NEW CATALOG RECFM(F B) REUSE",
      "BLKSIZE(0) LRECL("MYRECLN")",
      "TRACKS SPACE(250 150)",
      "UNIT(SYSALLDA)"
 /*   "UNIT(SYSALLDA) VOLUME("SYSVOLUME")"  */
    MYRC=RC
  END
  IF (MYRC > 0) THEN DO
    SAY "COULD NOT CREATE" out_dsn "RC="MYRC
    RETURN myrc
  END
  dataout. = ""
  func_rc = Add_Initial_Comment()
  error_count = 0
  warning_count = 0
  pdsmbr = ""
  function_rc = 0
  my_ctr = 0
  uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  DO WHILE (function_rc = 0)
    function_rc = Lmmlist_Pds_Members()
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  ADDRESS ISPEXEC "LMMLIST DATAID("DATAID") OPTION(FREE)"
  ADDRESS ISPEXEC "LMCLOSE DATAID("DATAID")"
  ADDRESS ISPEXEC "LMFREE DATAID("DATAID")"

  IF (dataout_count > 0) THEN DO
    data_rc = Add_Data("*")
    dataout.0 = dataout_count
    "EXECIO * DISKW SEQOUT (STEM dataout. FINIS)"
    "FREE FILE(SEQOUT)"
    IF ((error_count > 0) | (warning_count > 0)) THEN DO
      ZERRSM = error_count "Errors"
      ZERRLM = "Find '!' and fix. Find '?' and verify its use."
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      ADDRESS ISPEXEC "VIEW DATASET('"out_dsn"')"
         /* Return codes                     */
         /* 16 - No members in library       */
         /* 18 - VSAM processing unavailable */
         /* 20 - Severe error                */
         /*                                  */
    END
    IF (error_count = 0) THEN DO
      ZERRSM = cfgmember "replaced"
      ZERRLM = "The config member was successfully built."
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      out_mbr = pdsdsn"("cfgmember")"
      "ALLOC FILE(SEQOUT) DATASET('"out_mbr"') SHR REUSE"
      "EXECIO * DISKW SEQOUT (STEM dataout. FINIS)"
      "FREE FILE(SEQOUT)"
    END
  END
  msg_rc = MSG("OFF")
  "DELETE '"out_dsn"'"
  msg_rc = MSG("ON")
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Loop thru all of the WISHLIST members.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Lmmlist_Pds_Members:
  ADDRESS ISPEXEC "LMMLIST DATAID("DATAID")",
    "OPTION(LIST) MEMBER(pdsmbr) STATS(YES)"
  lmmlist_rc = RC
  IF (lmmlist_rc > 0) THEN DO
    RETURN lmmlist_rc
  END
  my_ctr = my_ctr + 1
  IF (pdsmbr = cfgmember) THEN DO
    RETURN 0
  END
  just_mbr = STRIP(pdsmbr,"T"," ")
  just_len = LENGTH(just_mbr)
  SELECT
    WHEN (just_len = 4) THEN DO
      mbrtype = "T"
      SAY just_mbr
    END
    WHEN (just_len = 6) THEN DO
      mbrtype = "C"
    END
    WHEN (just_len = 8) THEN DO
      mbrtype = "W"
    END
    OTHERWISE DO
      error_count = error_count + 1
      data_rc = Add_Data("*"pdsmbr "! Invalid name length:" just_len)
      SAY "*"pdsmbr "! Invalid name length:" just_len
      RETURN 0
    END
  END
  msg_rc = MSG("OFF")
  "ALLOC FILE(GENIEMBR) DATASET('"pdsdsn"("just_mbr")') SHR REUSE"
  alloc_rc = RC
  msg_rc = MSG("ON")
  IF (alloc_rc <> 0) THEN DO
    error_count = error_count + 1
    data_rc = Add_Data("*"pdsmbr "! ALLOC failed:" alloc_rc)
    SAY "*"pdsmbr "! ALLOC failed:" alloc_rc
    RETURN alloc_rc
  END
  "EXECIO * DISKR GENIEMBR (STEM mbr_record. FINIS)"
  diskr_rc = RC
  "FREE FILE(GENIEMBR)"
  IF (diskr_rc <> 0) THEN DO
    error_count = error_count + 1
    data_rc = Add_Data("*"pdsmbr "! DISKR failed:" diskr_rc)
    SAY "*"pdsmbr "! DISKR failed:" diskr_rc
    RETURN diskr_rc
  END
  IF (mbr_record.0 < 2) THEN DO
    error_count = error_count + 1
    data_rc = Add_Data("*"pdsmbr "! Too few records:" ,
      just_mbr", #="mbr_record.0)
    SAY "*"pdsmbr "! Too few records:" ,
      just_mbr", #="mbr_record.0
    RETURN diskr_rc
  END
  t_record = ""
  c_record = ""
  w_record = ""
  anykey = ""
  anydes = ""
  dspace = ""
  kspace = ""
  DO mbrx = 1 TO mbr_record.0
    mbr_record.mbrx = STRIP(mbr_record.mbrx,"T"," ")
    id@type = LEFT(mbr_record.mbrx,1)
    id@type = To_Uppercase(id@type)
    SELECT
      WHEN (id@type = "*") THEN DO
        NOP
      END
      WHEN (id@type = "#") THEN DO
        NOP
      END
      WHEN (id@type = "@") THEN DO
        NOP
      END
      WHEN (id@type = "B") THEN DO
        NOP
      END
      WHEN (id@type = "D") THEN DO
        NOP
      END
      WHEN (id@type = "E") THEN DO
        NOP
      END
      WHEN (id@type = "G") THEN DO
        NOP
      END
      WHEN (id@type = "I") THEN DO
        NOP
      END
      WHEN (id@type = "K") THEN DO
        anykey = anykey || ,
          kspace || SUBSTR(mbr_record.mbrx,2)
        kspace = " "
      END
      WHEN (id@type = "M") THEN DO
        IF (LENGTH(mbr_record.mbrx) > 73) THEN DO
          data_rc = Add_Data("*"pdsmbr "! Length > 72:" int@name mbrx)
          data_rc = Add_Data("*"pdsmbr "!" Left(mbr_record.mbrx,68))
          SAY "*"pdsmbr "!  Length > 72:" int@name mbrx
          error_count = error_count + 1
        END
      END
      WHEN (id@type = "N") THEN DO
        IF (LENGTH(mbr_record.mbrx) > 73) THEN DO
          data_rc = Add_Data("*"pdsmbr "! Length > 72:" int@name mbrx)
          data_rc = Add_Data("*"pdsmbr "!" Left(mbr_record.mbrx,68))
          SAY "*"pdsmbr "!  Length > 72:" int@name mbrx
          error_count = error_count + 1
        END
      END
      WHEN (id@type = "R") THEN DO
        NOP
      END
      WHEN (id@type = "S") THEN DO
        int@name = SUBSTR(mbr_record.mbrx,2,8)
        IF (just_mbr <> int@name) THEN DO
          data_rc = Add_Data("*"pdsmbr "! Bad internal name:" int@name mbrx)
          SAY "*"pdsmbr "! Bad internal name:" int@name mbrx
          error_count = error_count + 1
        END
        t_record = LEFT(pdsmbr,4)"     "mbrtype
        c_record = LEFT(pdsmbr,6)"   "mbrtype
        w_record = LEFT(pdsmbr,8)" "mbrtype
      END
      WHEN (id@type = "T") THEN DO
        anydes = anydes || ,
          dspace || SUBSTR(mbr_record.mbrx,2)
        dspace = " "
      END
      WHEN (id@type = "U") THEN DO
        NOP
      END
      WHEN (id@type = "W") THEN DO
        NOP
      END
      WHEN (id@type = "X") THEN DO
        NOP
      END
      WHEN (id@type = "Z") THEN DO
        NOP
      END
      WHEN (id@type = "?") THEN DO
        NOP
      END
      OTHERWISE DO
        data_rc = Add_Data("*"pdsmbr "! Bad type:" id@type  ,
          "record:" mbrx)
        SAY "*"pdsmbr "! Bad type:" id@type ,
          "record:" mbrx
        error_count = error_count + 1
      END
    END
  END
  SELECT
    WHEN (mbrtype = "T") THEN DO
      this_string = anydes
      strglen = 60
      DO WHILE (this_string <> "")
        partial_string = Chop_String_To_LENGTH()
        data_rc = Add_Data("G"t_record partial_string)
      END
    END
    WHEN (mbrtype = "C") THEN DO
      this_string = anydes
      strglen = 60
      DO WHILE (this_string <> "")
        partial_string = Chop_String_To_LENGTH()
        data_rc = Add_Data("G"c_record partial_string)
      END
    END
    WHEN (mbrtype = "W") THEN DO
      this_string = anydes
      strglen = 60
      DO WHILE (this_string <> "")
        partial_string = Chop_String_To_LENGTH()
        data_rc = Add_Data("G"w_record partial_string)
      END
    END
    OTHERWISE DO
      NOP
    END
  END
  IF (anykey <> "") THEN DO
    this_string = anykey
    strglen = 60
    DO WHILE (this_string <> "")
      partial_string = Chop_String_To_LENGTH()
      data_rc = Add_Data("G"LEFT(pdsmbr,8) "K" partial_string)
    END
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Add to the stem dataout.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Add_Data:
  PARSE ARG somedata
  dataout_count = dataout_count + 1
  dataout.dataout_count = somedata
  RETURN dataout_count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Add the initial comment.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Add_Initial_Comment:
  data_rc = Add_Data("S"cfgmember)
  data_rc = Add_Data("TGENIE")
  data_rc = Add_Data("T-Chapter 05.")
  data_rc = Add_Data("T-Default configuration member.")
  data_rc = Add_Data("E%GENIEBLD Generator REXX code")
  time_blk = TIME("H") || TIME("M") || LEFT(TIME("S"),2)
  data_rc = Add_Data("Z"DATE("S")"-"time_blk)
  data_rc = Add_Data("*")
  data_rc = Add_Data("*"COPIES("_",79))
  data_rc = Add_Data("*")
  RETURN dataout_count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Break up a string into a smaller length.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Chop_String_To_Length:
  ts_len = LENGTH(this_string)
  IF (ts_len <= strglen) THEN DO
    return_string = this_string
    this_string = ""
    RETURN return_string
  END
  too_long = ""
  good_long = ""
  num_words = WORDS(this_string)
  a_space = ""
  DO word_ctr = 1 TO num_words
    next_word = WORD(this_string,1)
    IF (LENGTH(next_word) > strglen) THEN DO
      IF (good_long <> "") THEN DO
        RETURN good_long
      END
      ELSE DO
        return_string = LEFT(this_string,strglen)
        this_string = SUBSTR(this_string,(strglen + 1))
        RETURN return_string
      END
    END
    too_long = too_long || a_space || next_word
    line_len = LENGTH(too_long)
    IF (line_len > strglen) THEN DO
      RETURN good_long
    END
    good_long = good_long || a_space || next_word
    a_space = " "
    this_string = STRIP(DELSTR(this_string,1,LENGTH(next_word)),"L"," ")
  END
  RETURN good_long

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Pad a string to a desired length.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Fill_String:
  PARSE ARG padlen , padstring
  IF (LENGTH(padstring) > padlen) THEN DO
    SAY "ABORT"
    RETURN LEFT(padstring,padlen)
  END
  IF (LENGTH(padstring) = padlen) THEN DO
    RETURN padstring
  END
  filllen = padlen - LENGTH(padstring)
  RETURN LEFT(padstring COPIES(" ",filllen),padlen)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase: PARSE ARG myarg
  RETURN TRANSLATE(myarg,lowercase_letters,uppercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to uppercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Uppercase: PARSE ARG myarg
  RETURN TRANSLATE(myarg,uppercase_letters,lowercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
