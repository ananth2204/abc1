{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012234000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 764218, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE510.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 764218, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 764218, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE510.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\r\\x05'", "DS1TRBAL": "b'\\x91*'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\xd7\\x00\\x03\\x03\\xd8\\x00\\x01\\x00\\x0e'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04O\\x00\\x02\\x01\\x10\\x05_\\x01\\x10\\x05_\\x18'\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf9@@@\"", "ispf": {"version": "04.79", "flags": 0, "createdate": "2010-02-24T00:00:00", "modifydate": "2010-02-24T18:27:02", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-479"}, "text": "REGULAR CBT TAPE - VERSION 479    FILE:  510\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT479.FILE510\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 19 MEMBERS COUNTED; CUMULATIVE SIZE IS 6,817 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/24/10    18:27:02    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$NOTE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x08\\x01\\x01\\x06\\x0f\\x01\\x10\\x05_\\x18&\\x00\\x18\\x00\\x16\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2001-03-01T00:00:00", "modifydate": "2010-02-24T18:26:08", "lines": 24, "newlines": 22, "modlines": 0, "user": "SBGOLOB"}, "text": "Current email:  ricardoparanhos@easi.com.br\n------- -----   ---------------------------\nGolob, Sam\nFrom:   Ricardo J Paranhos <ricardoparanhos@pt.ibm.com>\nSent:   Thursday, March 01, 2001 9:56 AM\nTo:     sbgolob@attglobal.net\nSubject:        Re: IEBLIST -Reply\nSam;\n\nThe SPACE program is another utility that I had developed and\nwhich is helpful to search volumes by volume names, storage group\nnames, unit address and mount status.  The list that the SPACE\nprogram shows is a search result, and a specific volume can be\nselected to view a list of data sets inside, and space used in\nVSAM data sets too.\n\nThe IEBLIST program don't use SORT yet.  I'm planning to do it\nsoon by adding a keyword to do this and call the SORT program.\n\nBest regards;\n\n\nRicardo Paranhos                       ricardoparanhos@pt.ibm.com\nOS/390 Consultant                      pt150031@pt.ibm.com\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE510": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04O\\x00Q\\x01\\x10\\x05_\\x01\\x10\\x05_\\x18&\\x00%\\x00%\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf9@@@'", "ispf": {"version": "04.79", "flags": 0, "createdate": "2010-02-24T00:00:00", "modifydate": "2010-02-24T18:26:51", "lines": 37, "newlines": 37, "modlines": 0, "user": "CBT-479"}, "text": "//***FILE 510 is from Ricardo Paranhos and contains the IEBLIST     *   FILE 510\n//*           program the SPACE program, and the VARYDASD program.  *   FILE 510\n//*                                                                 *   FILE 510\n//*           The IEBLIST program has much flexibility in listing   *   FILE 510\n//*           datasets by DSN (maskable), VOL(partial or complete)  *   FILE 510\n//*           SG (storage group name), ADD(unit address range),     *   FILE 510\n//*           and CATALOG (search by dataset on catalog).  You can  *   FILE 510\n//*           also list datasets last referenced on or before       *   FILE 510\n//*           a certain date:  REF(yyyyddd) .                       *   FILE 510\n//*                                                                 *   FILE 510\n//*           Using IEBLIST, you can get allocated space and used   *   FILE 510\n//*           space, and totals of these, even for VSAM datasets,   *   FILE 510\n//*           because this program reads the VVDS.                  *   FILE 510\n//*                                                                 *   FILE 510\n//*           IEBLIST was updated by Alexander I. Vasilenko, to     *   FILE 510\n//*           filter on dataset Create Date, and Block Size.        *   FILE 510\n//*                                                                 *   FILE 510\n//*           Fixed by Sam Golob to get the ADD(mmmm-nnnn)          *   FILE 510\n//*           command to work.                                      *   FILE 510\n//*                                                                 *   FILE 510\n//*              email:  Ali_vas@mail.ru                            *   FILE 510\n//*                                                                 *   FILE 510\n//*           The SPACE program is another utility that Ricardo     *   FILE 510\n//*           developed and which is helpful to search volumes by   *   FILE 510\n//*           volume names, storage group names, unit address and   *   FILE 510\n//*           mount status.  The list that the SPACE program shows  *   FILE 510\n//*           is a search result, and a specific volume can be      *   FILE 510\n//*           selected to view a list of data sets inside, and      *   FILE 510\n//*           space used in VSAM data sets too.                     *   FILE 510\n//*                                                                 *   FILE 510\n//*           The VARYDASD program will vary DASD volumes OFFLINE   *   FILE 510\n//*           by checking to see if the volser matches a list       *   FILE 510\n//*           supplied by the SYSIN DD card. If no match, the       *   FILE 510\n//*           program uses IEEVARYD to vary the devices offline.    *   FILE 510\n//*                                                                 *   FILE 510\n//*     \"Ricardo J Paranhos\" <ricardoparanhos@easi.com.br>          *   FILE 510\n//*                                                                 *   FILE 510\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMHCL": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x06O\\x01\\x01\\x06O\\x143\\x00*\\x00*\\x00\\x00\\xe7\\xc9\\xc2\\xd4\\xf0\\xf0\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-03-05T00:00:00", "modifydate": "2001-03-05T14:33:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "XIBM001"}, "text": "//ASMHCL    JOB (200,PRO),'DIPRO   RICARDO',CLASS=W,MSGCLASS=X,\n//          MSGLEVEL=(1,1),REGION=64M,COND=(4,LT),\n//          NOTIFY=&SYSUID\n//*\n//JOBLIB    DD   DSN=XIBM001.LINKLIB,DISP=SHR\n//ASMHCL    PROC\n//*\n//C        EXEC PGM=ASMA90,\n//         PARM='NODECK,OBJECT,LIST'\n//SYSLIB   DD  DSN=SYS1.MACLIB,\n//             DISP=SHR\n//         DD  DSN=SYS1.MODGEN,\n//             DISP=SHR\n//         DD  DSN=SYS1.ICEMAC,\n//             DISP=SHR\n//         DD  DSN=XIBM001.CBTTAPE.SOURCE,DISP=SHR\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1\n//SYSPUNCH DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSLIN   DD  DSN=&OBJ,SPACE=(3040,(40,40),,,ROUND),UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             DCB=(BLKSIZE=3040,LRECL=80,RECFM=FBS,BUFNO=1)\n//*\n//L        EXEC PGM=IEWL,COND=(5,LT,C),\n//    PARM='LIST,LET,XREF,MAP'\n//SYSLIN   DD  DSN=&OBJ,\n//             DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSUT1   DD  DSN=&SYSUT1,SPACE=(1024,(120,120),,,ROUND),UNIT=VIO,\n//             DCB=BUFNO=1\n//SYSPRINT DD  SYSOUT=*\n//*\n// PEND\n//          EXEC ASMHCL\n//C.SYSIN   DD   DSN=XIBM001.CBTTAPE.SOURCE(IEBLIST),DISP=SHR\n//L.SYSLMOD DD   DSN=XIBM001.LINKLIB,DISP=SHR\n//L.SYSLIB  DD   DSN=XIBM001.LINKLIB,DISP=SHR\n//L.SYSIN   DD   *\n  SETCODE AC(1)\n  NAME IEBLIST(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLANK": {"ttr": 524, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NOME    BLANK &TAG\n         LCLA  &A\n&NOME    MVI   &TAG,C' '\n&A       SETA  L'&TAG\n         MVC   &TAG+1(&A-1),&TAG\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GREGJUL": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x02\\x9f\\x01\\x01\\x02\\x9f\\x16B\\x00$\\x00$\\x00\\x00\\xe7\\xc9\\xc2\\xd4\\xf0\\xf0\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-01-29T00:00:00", "modifydate": "2001-01-29T16:42:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "XIBM001"}, "text": "         MACRO                                                          GRE00010\n&LABEL   GREGJUL  &GRJULIN,&GRJULOU,&DOUBLE                             GRE00020\n*        UTILIZA REGISTRADORES  2, 3 & 4                                GRE00030\n*        &GRJULIN  ---  8 CARACTERES                                    GRE00040\n*        &GRJULOU  ---  7 CARACTERES                                    GRE00050\n*        &DOUBLE   ---  DOUBLE WORD                                     GRE00060\n         LA    3,0                                                      GRE00070\n         PACK  &DOUBLE+0(8),&GRJULIN+2(2)                               GRE00080\n         CVB   4,&DOUBLE                      R4 - MES GREGORIANO       GRE00090\n         PACK  &DOUBLE+0(8),&GRJULIN+4(4)                               GRE00100\n         DP    &DOUBLE+0(8),=P'4'             DIVIDE O ANO POR 4,       GRE00110\n         CLI   &DOUBLE+0+7,X'0C'              SE ANO BISSEXTO,          GRE00120\n         BNE   *+18                                                     GRE00130\n         LA    2,2                                                      GRE00140\n         CR    4,2                           E SE MES MAIOR QUE FEV,    GRE00150\n         BNH   *+8                                                      GRE00160\n         LA    3,1(3)                        INCREMENTA ACUMULADOR.     GRE00170\n         BCTR  4,0                                                      GRE00180\n         LA    2,0                                                      GRE00190\n         IC    2,*+52(4)                                                GRE00200\n         AR    3,2                ACUMULA N* DE DIAS MESES ANTERIORES.  GRE00210\n         LTR   4,4                                                      GRE00220\n         BZ    *+8                                                      GRE00230\n         BCT   4,*-12                                                   GRE00240\n         PACK  &DOUBLE+0(8),&GRJULIN+0(2)                               GRE00250\n         CVB   2,&DOUBLE                     R2 - DIA GREGORIANO        GRE00260\n         AR    3,2                           ACUMULA O DIA DO MES.      GRE00270\n         CVD   3,&DOUBLE                                                GRE00280\n         UNPK  &GRJULOU+4(3),&DOUBLE+6(2)                               GRE00290\n         OI    &GRJULOU+6,X'F0'                                         GRE00300\n         MVC   &GRJULOU+0(4),&GRJULIN+4                                 GRE00310\n         B     *+18                                                     GRE00320\n         DC    XL13'001F1C1F1E1F1E1F1F1E1F1E1F'                         GRE00330\n         DS    C                                                        GRE00340\n         DS    0H                                                       GRE00350\n         MEND                                                           GRE00360\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBJCL": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00)\\x01\\x06\\x08?\\x01\\x06\\x08?\\tE\\x00%\\x00%\\x00\\x17\\xc1\\xc9\\xe5@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2006-03-24T00:00:00", "modifydate": "2006-03-24T09:45:29", "lines": 37, "newlines": 37, "modlines": 23, "user": "AIV"}, "text": "//CHKREF       JOB CLASS=A,MSGCLASS=X,\n//             MSGLEVEL=(1,1),REGION=0M,COND=(0,NE)\n//*\n//*\n//             EXEC PGM=IEBLIST\n//*********************************************************************\n//* CONTROL CARDS FOR IEBLIST:                                        *\n//*                                                                   *\n//* DSN(DATA SET NAME MASK)                                           *\n//* VOL(VOLUME,VOLUME,...) - TOTAL OR PARTIAL VOLUME NAME             *\n//* SG(STORGRP,STORGRP,...) - STORAGE GROUP NAME                      *\n//* NOLIST - SET TO NO PRINT OPTION                                   *\n//* ADD(NNNN-MMMM) -     NNNN = INITIAL ADDRESS                       *\n//*                      MMMM = FINAL ADDRESS                         *\n//* CATALOG - SEARCH BY DATA SET ON CATALOG                           *\n//* REF(YYYYDDD) MUST BE NUMERIC, 7 CHARS, ONLY CONSIDERS DATASETS    *\n//*              REFERENCED BEFORE OR EQUAL TO THIS DATE              *\n//*                                                                   *\n//* THE FOLLOWING COMMANDS WERE ADDED BY A.I. VASILENKO:              *\n//* CRE(YYYYDDD,YYYYDDD) - MUST BE NUMERIC, 7 CHARS IN ANY CASE.      *\n//*              WILL SEARCH ONLY DATASETS THAT WERE CREATED BETWEEN  *\n//*              THESE DATES. YOU MAY ISSUE ZERO DATE FOR SEARCH ONLY *\n//*              'HI THEN' OR 'LOW THEN'                              *\n//*                                                                   *\n//* BLKSIZE(NNNNN,NNNNN) SIMILAR TO CRE(...,...)                      *\n//*              WILL WORK ONLY WITH BLOCK SIZES                      *\n//*              NNNNN MUST BE 5 DIGIT LENGTH                         *\n//*********************************************************************\n//STEPLIB      DD DISP=SHR,DSN=AIV.HLASM.LOADLIB\n//SYSPRINT     DD SYSOUT=S\n//*YSPRINT     DD DSN=CPAC.UNUSED.DSN(FORDEL),DISP=SHR\n//SYSUDUMP     DD SYSOUT=U\n//SYSOUT       DD DUMMY SYSOUT=U\n//SYSIN        DD *\n  DSN(AIV.**),CRE(2004130,2005020)\n  VOL(COMM01)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBLHELP": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00$\\x01\\x06\\x08?\\x01\\x06\\tO\\x11P\\x00\\x18\\x00\\x17\\x00\\x04\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2006-03-24T00:00:00", "modifydate": "2006-04-04T11:50:24", "lines": 24, "newlines": 23, "modlines": 4, "user": "SBGOLOB"}, "text": "//*********************************************************************\n//* CONTROL CARDS FOR IEBLIST:                                        *\n//*                                                                   *\n//* DSN(DATA SET NAME MASK)                                           *\n//* VOL(VOLUME,VOLUME,...) - TOTAL OR PARTIAL VOLUME NAME             *\n//* SG(STORGRP,STORGRP,...) - STORAGE GROUP NAME                      *\n//* NOLIST - SET TO NO PRINT OPTION                                   *\n//* ADD(NNNN-MMMM) -     NNNN = INITIAL ADDRESS                       *\n//*                      MMMM = FINAL ADDRESS                         *\n//* ADD(NNNN)            NNNN = INITIAL AND FINAL ADDRESS             *\n//* CATALOG - SEARCH BY DATA SET ON CATALOG                           *\n//* REF(YYYYDDD) MUST BE NUMERIC, 7 CHARS, ONLY CONSIDERS DATASETS    *\n//*              REFERENCED BEFORE OR EQUAL TO THIS DATE              *\n//*                                                                   *\n//* THE FOLLOWING COMMANDS WERE ADDED BY A.I. VASILENKO:              *\n//* CRE(YYYYDDD,YYYYDDD) - MUST BE NUMERIC, 7 CHARS IN ANY CASE.      *\n//*              WILL SEARCH ONLY DATASETS THAT WERE CREATED BETWEEN  *\n//*              THESE DATES. YOU MAY ISSUE ZERO DATE FOR SEARCH ONLY *\n//*              'HI THEN' OR 'LOW THEN'                              *\n//*                                                                   *\n//* BLKSIZE(NNNNN,NNNNN) SIMILAR TO CRE(...,...)                      *\n//*              WILL WORK ONLY WITH BLOCK SIZES                      *\n//*              NNNNN MUST BE 5 DIGIT LENGTH                         *\n//*********************************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEBLIST": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00$\\x01\\x06\\tO\\x01\\x10\\x05_\\x18$\\x08\\x94\\x08u\\x00K\\xe7\\xc9\\xc2\\xd4\\xf0\\xf0\\xf1@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2006-04-04T00:00:00", "modifydate": "2010-02-24T18:24:24", "lines": 2196, "newlines": 2165, "modlines": 75, "user": "XIBM001"}, "text": "***********************************************************************\n* IEBLIST - AUTHOR: RICARDO J. PARANHOS                               *\n*                                                                     *\n*         \"Ricardo J Paranhos\" <ricardoparanhos@easi.com.br>          *\n*                                                                     *\n*         TRANSLATION FROM THE PORTUGUESE:  S. GOLOB                SBG\n*                                                                   AIV\n*         MODIFIED:  ALEXANDER I. VASILENKO     (2006/FEB)          AIV\n*                    ALI_VAS@MAIL.RU                                AIV\n*                                                                     *\n*                    SAM GOLOB     SBGOLOB@ATTGLOBAL.NET            SBG\n*                                                                     *\n*            FIXED ADD(MMMM-NNNN) COMMAND       (2006/MAR)          SBG\n*            FIXED ADD(MMMM)      COMMAND       (2006/MAR)          SBG\n*                                                                     *\n*        ADDED 'UNIT XXXX' UNIT ADDRESS INTO REPORT STRING          AIV\n*                'TOTALS FOR VOLUME ' (CABECA4) (2006/APR)          AIV\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*  CONTROL CARDS FOR IEBLIST:                                         *\n*                                                                     *\n*  DSN(DATA SET NAME MASK)                                            *\n*                                                                     *\n*  VOL(VOLUME,VOLUME,...) - TOTAL OR PARTIAL VOLUME NAME              *\n*                                                                     *\n*  SG(STORGRP,STORGRP,...) - STORAGE GROUP NAME                       *\n*                                                                     *\n*  NOLIST - SET TO NO PRINT OPTION                                    *\n*                                                                     *\n*  ADD(NNNN-MMMM) -     NNNN = INITIAL ADDRESS                        *\n*                       MMMM = FINAL ADDRESS                          *\n*                                                                     *\n*  ADD(NNNN)            NNNN = INITIAL AND FINAL ADDRESS              *\n*                                                                     *\n*  CATALOG - SEARCH BY DATA SET ON CATALOG                            *\n*                                                                     *\n*  REF(YYYYDDD) MUST BE NUMERIC, 7 CHARS, ONLY CONSIDERS DATASETS     *\n*               REFERENCED BEFORE OR EQUAL TO THIS DATE               *\n*                                                                     *\n*      THE FOLLOWING COMMANDS WERE ADDED BY A.I. VASILENKO:           *\n*                                                                     *\n*  CRE(YYYYDDD,YYYYDDD) - MUST BE NUMERIC, 7 CHARS IN ANY CASE.       *\n*               WILL SEARCH ONLY DATASETS THAT WERE CREATED BETWEEN   *\n*               THESE DATES. YOU MAY ISSUE ZERO DATE FOR SEARCH ONLY  *\n*               'HI THEN' OR 'LOW THEN'                               *\n*                                                                     *\n*  BLKSIZE(NNNNN,NNNNN) SIMILAR TO CRE(...,...)                       *\n*               WILL WORK ONLY WITH BLOCK SIZES                       *\n*               NNNNN MUST BE 5 DIGIT LENGTH                          *\n***********************************************************************\nIEBLIST  CSECT\n         SAVE  (14,12)\n         LR    10,15\n         USING IEBLIST,10,11,12,9                                   AIV\n         LA    11,1\n         LA    11,4095(10,11)\n         LA    12,1\n         LA    12,4095(11,12)\n         LA    9,1                                                  AIV\n         LA    9,4095(12,9)                                         AIV\n         ST    9,SREG9                                              AIV\n         LA    2,SA\n         ST    13,SA+4\n         ST    2,8(13)\n         LR    13,2\n***********************************************************************\n* GET SYSTEM DATE AND TIME                                            *\n***********************************************************************\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=DDMMYYYY\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n***********************************************************************\n* OPEN DATA SETS                                                      *\n***********************************************************************\n         OPEN  (SYSPRINT,(OUTPUT),SYSOUT,(OUTPUT))\n***********************************************************************\n* CHECK IF IS A AUTHORIZED STEP                                       *\n***********************************************************************\n         TESTAUTH FCTN=1\n         LTR   15,15\n         BZ    OK_AUTH\n***********************************************************************\n* PRINT A MESSAGE FOR WARNING OF NOT FULLY FUNCTIONAL                 *\n***********************************************************************\n         OI    FLAG_AUTH,X'FF'\n         LH    15,IEB025E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSOUT,SPACE\n         B     GET_STORAGE\n***********************************************************************\n* PRINT A INFORMATIONAL MESSAGE FOR PROCESS AUTHORIZED                *\n***********************************************************************\nOK_AUTH  EQU   *\n         LH    15,IEB026I\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSOUT,SPACE\n***********************************************************************\n* OBTAIN STORAGE FOR PROCESSING                                       *\n***********************************************************************\nGET_STORAGE EQU *\n         LA    1,SYSIN_ADDR\n         L     15,=V(STOR_OBT)\n         BALR  14,15\n         L     1,SYSIN_ADDR\n         L     15,=V(LE_SYSIN)\n         BALR  14,15\n***********************************************************************\n* FIND FOR A VALID KEYWORD                                            *\n***********************************************************************\n         L     9,SYSIN_ADDR\nCLI      EQU   *\n         CLC   0(4,9),=4XL1'FF'\n         BE    ENDPARM\nVERPARM  EQU   *\n         CLC   0(4,9),=CL4'VOL('\n         BE    #VOL\n         CLC   0(4,9),=CL4'ADD('\n         BE    #ADD\n         CLC   0(4,9),=CL4'REF('\n         BE    #REF\n         CLC   0(4,9),=CL4'CRE('                                    AIV\n         BE    #CRE                                                 AIV\n         CLC   0(7,9),=CL7'CATALOG'\n         BE    #CAT\n         CLC   0(8,9),=CL8'BLKSIZE('                                AIV\n         BE    #BLKZ                                                AIV\n         CLC   0(4,9),=CL4'DSN('\n         BE    #DSN\n         CLC   0(3,9),=CL3'SG('\n         BE    #SG\n         CLC   0(5,9),=CL5'NOLIST'\n         BE    #NOLIST\n         CLI   0(9),C','\n         BNE   INVALID_COMMAND\n         LA    9,1(9)\n         B     CLI\n***********************************************************************\n* SEND MESSAGE FOR INVALID KEYWORD                                    *\n***********************************************************************\nINVALID_COMMAND EQU *\n         LH    15,IEB001E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+25(5),0(9)\n         ST    9,SAVER9A          PRESERVE PARM POINTER             SBG\n         L     9,SREG9                                              SBG\n         PUT   SYSOUT,SPACE\n         L     9,SAVER9A          RESTORE PARM POINTER              SBG\n         B     RETURN8\n***********************************************************************\n* ONLY PICK DATASETS REFERENCED BEFORE A CERTAIN 7 DIGIT DATE YYYYDDD *\n***********************************************************************\n#REF     EQU   *\n         OI    FLAG2,X'01'\n         LA    3,1                SET COPY OF FLAG FOR FUNC01       AIV\n         LA    1,REFIN                                              AIV\n         LA    2,REFDAT                                             AIV\n         LA    9,4(,9)\n         B     CONT                                                 AIV\n#CRE     EQU   *                                                    AIV\n         OI    FLAG2,X'02'                                          AIV\n         LA    3,2                SET COPY OF FLAG FOR FUNC01       AIV\n         LA    1,CREIN                                              AIV\n         LA    2,CREDAT1          REG2 - ADDRESS OF CREDAT MIN      AIV\n         LA    9,4(,9)                                              AIV\n         B     CONT                                                 AIV\n#BLKZ    EQU   *                                                    AIV\n         OI    FLAG2,X'04'                                          AIV\n         LA    3,4                SET COPY OF FLAG FOR FUNC01       AIV\n         LA    1,BLKIN1           REG1 - ADDRESS OF BLKSIZE INPUT   AIV\n         LA    2,DSBLK1           REG2 - ADDRESS OF BLKSIZE MIN     AIV\n         LA    9,8(,9)            ADD LENGTH OF 'BLKSIZE('          AIV\n*                                                                   AIV\nCONT     EQU   *                                                    AIV\n         L     15,=V(FUNC01)                                        AIV\n         BALR  14,15                                                AIV\n         B     CLI\n*                                                                   AIV\n***********************************************************************\n* PROCESS  A SELECT FOR STORAGE GROUP                                 *\n***********************************************************************\n#SG      EQU   *\n         OI    FLAG,X'04'\n         LA    9,3(9)\n         LA    1,CALL_LIST\n         OI    STGADDR,X'80'\n         L     15,STGADDR\n         BASSM 14,15\n         L     9,PARM_ADDR\n         LA    9,1(9)\n         LTR   15,15\n         BNZ   INVALID_COMMAND\n         B     CLI\n***********************************************************************\n* PROCESS  OPTION CATALOG SELECTED                                    *\n***********************************************************************\n#CAT     EQU   *\n         OI    FLAG_CATALOG,X'FF'\n         LA    9,7(9)\n         B     CLI\n***********************************************************************\n* PROCESS  A VOLUME ADDRESS SELECTED                                  *\n***********************************************************************\n#ADD     EQU   *                                                    SBG\n         OI    FLAG,X'08'            ADD( HAS BEEN CODED            SBG\n         LA    9,4(,9)               BUMP PAST KEYWORD              SBG\n         MVC   LOW_ADDR(4),0(9)      ASSUME 4 CHARS FOR LOW         SBG\n         LA    9,4(,9)               BUMP PAST THEM                 SBG\n         CLI   0(9),C')'             CLOSE PARENTHESES YET?         SBG\n         BE    ENDONE                YES. ASSUME ONE ADDR ONLY.     SBG\n         CLI   0(9),C'-'             DASH FOR RANGE?                SBG\n         BNE   ENDADD                NO. END SEARCH EARLY.          SBG\n         LA    9,1(,9)               BUMP PAST THE DASH.            SBG\n         MVC   HI_ADDR(4),0(9)       ASSUME 4 CHARS FOR HI          SBG\n         LA    9,4(,9)               BUMP PAST THEM                 SBG\n         B     ENDADD                AND ASSUME TWO ADDRESSES.      SBG\nENDONE   DS    0H                    ONE ADDRESS ASSUMED            SBG\n         CLC   HI_ADDR(4),=CL4' '    CHECK IF SECOND ADDR IS NULL   SBG\n         BNE   ENDADD                NOT NULL, USE IT.              SBG\n         MVC   HI_ADDR(4),LOW_ADDR   COPY LOW ADDRESS TO HI ADDRESS SBG\nENDADD   DS    0H                    ASSUME FINISHED WITH VALUES    SBG\n*                                    USE UNIQUE TRANSLATE TABLE     SBG\n         TR    LOW_ADDR(4),TABHEXQ   TRANSLATE LOW ADDRESS          SBG\n         TR    HI_ADDR(4),TABHEXQ    TRANSLATE HI ADDRESS           SBG\n         LA    9,1(,9)               BUMP TO LOOK FOR NEXT PARAM    SBG\n         B     CLI                   GO BACK AND GET MORE PARAMS    SBG\n***********************************************************************\n* SET A FLAG TO \"NOT PRINT\" FOR A DATA SET NAME ON A VOLUME           *\n***********************************************************************\n#NOLIST  EQU   *\n         OI    FLAG,X'01'\n         LA    9,6(9)\n         B     CLI\n***********************************************************************\n* PROCESS  A VOLUME NAME SELECTED                                     *\n***********************************************************************\n#VOL     EQU   *\n         OI    FLAG,X'04'\n         LA    9,4(9)\n         L     8,VOLUME_ADDR\n         USING VOLUME_DSECT,8\n         LH    15,VOLUME_CNT\n         MH    15,=H'7'\n         LA    8,0(15,8)\nCLIVOL   EQU   *\n         CLI   0(9),C'-'\n         BE    VOLUME_EXCLUDE\n         BLANK VOLUME_NAME\n         TRT   0(7,9),TAB_TRT\n         BZ    INVALID_COMMAND\n         LR    3,1\n         SR    1,9\n         BCTR  1,0\n         EX    1,MVC_VOLUME\n         STC   1,VOLUME_LENGTH\n         OC    VOLUME_LENGTH,MASK_EXCLUDE\n         NI    MASK_EXCLUDE,X'00'\n         LH    15,VOLUME_CNT\n         LA    15,1(15)\n         STH   15,VOLUME_CNT\n         LA    8,7(8)\n         LA    9,1(3)\n         STC   2,BYTE\n         CLI   BYTE,C')'\n         BNE   CLIVOL\n         B     CLI\nVOLUME_EXCLUDE EQU *\n         LA    9,1(9)\n         OI    MASK_EXCLUDE,X'F0'\n         B     CLIVOL\nMVC_VOLUME MVC VOLUME_NAME(0),0(9)\n***********************************************************************\n* PROCEDURE TO VALIDATE OF DATA SET NAME                              *\n***********************************************************************\n#DSN     EQU   *\n         OI    FLAG,X'02'\n         LA    9,4(9)\n         L     8,DSNAME_ADDR\n         USING DSNAME_DSECT,8\nCLIDSNE  EQU   *\n         BLANK DSNAME_NAME\n         TRT   0(45,9),TAB_TRT\n         BZ    INVALID_COMMAND\n         LR    3,1\n         SR    1,9\n         STC   1,DSNAME_LENGTH\n         BCTR  1,0\n         EX    1,MVC_DSNAME\n         STC   2,BYTE\n         EX    1,TRT_TABMASK\n         BZ    FULL_NAME\n         OI    FLAG,X'10'\nFULL_NAME EQU *\n         LH    15,DSNAME_CNT\n         LA    15,1(15)\n         STH   15,DSNAME_CNT\n         LA    8,45(8)\n         LA    9,1(3)\n         CLI   BYTE,C')'\n         BNE   CLIDSNE\n         B     CLI\nMVC_DSNAME MVC DSNAME_NAME(0),0(9)\nTRT_TABMASK TRT DSNAME_NAME(0),TABMASK\n***********************************************************************\n* SEARCH ON UCB FOR A VOLUME                                          *\n***********************************************************************\nENDPARM  EQU   *\n         MVC   TABMASK+193(6),TAB_ALFA\n         MVC   TABMASK+240(10),TAB_NUM\n         XC    AREA,AREA\nPESQUCB  EQU   *\n         UCBSCAN COPY,                                                 X\n               WORKAREA=AREA,                                          X\n               UCBAREA=UCBAREA,                                        X\n               DEVCLASS=DASD,                                          X\n               RANGE=ALL,                                              X\n               DYNAMIC=YES\n         LTR   15,15\n         BNZ   ENDVOLS\n         LA    8,UCBAREA\n         USING UCBOB,8\n***********************************************************************\n* TEST IF THE VOLUME IS ONLINE                                        *\n***********************************************************************\n         TM    UCBSTAT,X'80'\n         BNO   PESQUCB\n***********************************************************************\n* TEST IF WAS SELECTED A VOLUME NAME TO PROCESSING                    *\n***********************************************************************\n         TM    FLAG,X'04'\n         BNO   NEXT\n***********************************************************************\n* LOOP TO COMPARE A VOLUME                                            *\n***********************************************************************\n         LH    15,VOLUME_CNT\n         L     1,VOLUME_ADDR\nCLC_VOLUME EQU *\n         XR    2,2\n         TM    0(1),X'F0'\n         BO    CLC_EXCLUDE\nCLC_INCLUDE EQU *\n         ICM   2,1,0(1)\n         EX    2,CLCVOL\n         BE    NEXT\n         LA    1,7(1)\n         BCT   15,CLC_VOLUME\n         B     PESQUCB\nCLC_EXCLUDE EQU *\n         MVC   BYTE,0(1)\n         NI    BYTE,X'0F'\n         ICM   2,1,BYTE\n         EX    2,CLCVOL\n         BE    PESQUCB\n         LA    1,7(1)\n         BCT   15,CLC_VOLUME\n***********************************************************************\n* VALIDATE MVS UCBTYPES OF DASD VOLUMES                               *\n***********************************************************************\nNEXT     EQU   *\n         TM    UCBTYP+3,X'04'\n         BNO   *+10\n         MVC   UCBUNIT,=CL4'9345'\n         TM    UCBTYP+3,X'0E'\n         BNO   *+10\n         MVC   UCBUNIT,=CL4'3380'\n         TM    UCBTYP+3,X'0F'\n         BNO   *+10\n         MVC   UCBUNIT,=CL4'3390'\n***********************************************************************\n* GET A VOLUME ADDRESS WITH 4 DIGITS AND COMPARE                      *\n***********************************************************************\n         ST    8,SALVA8\n         UCBDEVN DEVN=FULL,UCBPTR=SALVA8\n         MVC   ADDRUCB,FULL          MOVE ADDRESS OFF FOR REPORTING\n         MVC   FULLTR,FULL           MOVE OFF FOR TRANSLATION       SBG\n         MVC   FULLPRT,FULL          MOVE OFF FOR TRANSLATION       AIV\n         TR    FULLTR(4),TABHEXQ     TRANSLATE SO COMPARE WORKS     SBG\n         TM    FLAG,X'08'            ONLY DO ADDR SELECT IF WANTED  SBG\n         BZ    ALLOC                 NO ADDR SELECT, SKIP\n         CLC   FULLTR(4),LOW_ADDR    IS ADDRESS TOO LOW?            SBG\n         BL    PESQUCB               YES. SKIP IT.\n         CLC   FULLTR(4),HI_ADDR     IS ADDRESS TOO HIGH?           SBG\n         BH    PESQUCB               YES. SKIP IT.\n         B     PASSLTRG              JUMP OVER LITERALS AND GO ON.  SBG\n         LTORG\nPASSLTRG DS    0H                    ALIGN ON HALFWORD              SBG\n***********************************************************************\n* DYNAMICALLY ALLOCATE THE VOLUME TO PROCESS                          *\n***********************************************************************\nALLOC    EQU   *\n         L     9,SREG9            ASSIGN REG9 AS BASE REGISTER      AIV\n         MVC   VOLUCB,UCBVOLI\n         MVC   DSNVVDS+17(6),UCBVOLI\n         MVC   VOLSER+6(6),UCBVOLI\n         MVC   UNIT+6(4),UCBUNIT\n         LA    1,ALOC\n         MVC   ALOCTP,=A(VTOCALOC)\n         MVC   ALOCVC,=AL1(1)\n         DYNALLOC\n         LTR   15,15\n         BZ    ALOCOK\n         LH    15,IEB002E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         XR    15,15\n         ICM   15,B'0011',ALOCER\n         CVD   15,DOUBLE\n         UNPK  SPACE+38(5),DOUBLE+5(3)\n         OI    SPACE+42,X'F0'\n         MVC   SPACE+51(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     PESQUCB\n***********************************************************************\n* DYNAMICALLY ALLOCATE THE VVDS OF THE VOLUME TO BE PROCESSED         *\n***********************************************************************\nALOCOK   EQU   *\n         LH    15,IEB009I\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+18(6),VOLUCB\n         MVC   SPACE+62(4),ADDRUCB\n         PUT   SYSOUT,SPACE\n***********************************************************************\n* TEST IF THE PROGRAM IS AUTHORIZED TO EXECUTE VVDS ALLOCATE          *\n***********************************************************************\n         TM    FLAG_AUTH,X'FF'\n         BNO   ALLOC_VVDS\n         OI    FLAG,X'20'\n         B     ALOCOK1\n***********************************************************************\n* ALLOCATE VVDS                                                       *\n***********************************************************************\nALLOC_VVDS EQU *\n         LA    1,ALOC\n         MVC   ALOCTP,=A(VVDSALOC)\n         DYNALLOC\n         LTR   15,15\n         BZ    ALOCOK1\n         OI    FLAG,X'20'\n         CLC   ALOCER,=XL2'1708'\n         BE    ALOCOK1\n         LH    15,IEB010I\n         A     15,MSGADDR\n         MVC   SPACE,0(15)\n         MVC   SPACE+26(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     PESQUCB\nCLCVOL   CLC   1(0,1),UCBVOLI\n         DROP  8\n***********************************************************************\n*              OPEN THE VTOC                                          *\n***********************************************************************\nALOCOK1  EQU   *\n         RDJFCB VTOC\n         USING INFMJFCB,2\n         LA    2,JFCBAREA\n         LTR   15,15\n         BZ    DDOK\n         LH    15,IEB114E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+48(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     RETURN16                RETURN TO OS\nDDOK     EQU   *\n         MVI   JFCBDSNM,X'04'          CREATE DSNAME\n         MVC   JFCBDSNM+1(43),JFCBDSNM    - 44X'04'\n         OI    JFCBTSDM,JFCNWRIT       DO NOT WRITE JFCB DURING OPEN\n         DROP  2\n         OPEN  (VTOC,(INPUT)),TYPE=J\n         TM    FLAG,X'20'\n         BO    GETDEB\n         OPEN  (VVDS,(INPUT))\n         LTR   15,15\n         BZ    GETDEB\n         OI    FLAG,X'20'\n***********************************************************************\n*              ENQUEUE ON VTOC                                        *\n***********************************************************************\nGETDEB   EQU   *\n         L     1,DCBDEBAD-IHADCB+VTOC              GET A(DEB)\n         ST    1,DEBADDR              SAVE DEB ADDRESS\n         LA    1,DEBUCBAD-DEBDASD+DEBBASND-DEBBASIC(1) GET A(UCB)\n         L     1,0(1)                LOAD UCB ADDRESS\n         ST    1,UCBADDR\n***********************************************************************\n* OBTAIN AVAILABLE SPACE ON THE VOLUME BEING PROCESSED                *\n***********************************************************************\nLSPACE   EQU   *\n         LSPACE UCB=UCBADDR,DATA=LSPTEXT\n         LTR   15,15\n         BNZ   ERROLSPC\n         LA    1,LSPTEXT\n         XR    15,15\n         ICM   15,15,8(1)\n         CVD   15,DOUBLE\n         ZAP   CYL_FREE_VOLUME,DOUBLE\n         XR    15,15\n         ICM   15,15,12(1)\n         CVD   15,DOUBLE\n         ZAP   TRK_FREE_VOLUME,DOUBLE\n         AP    TRK_FREE_TOTAL,TRK_FREE_VOLUME\n         AP    CYL_FREE_TOTAL,CYL_FREE_VOLUME\n         B     IXTEST\nERROLSPC EQU   *\n         LH    15,IEB012E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSOUT,SPACE\n         CLOSE VTOC\n         CLOSE VVDS\n         B     UNALLOC\n***********************************************************************\n* VERIFY WHETHER THE VTOC OF THE VOLUME IS INDEXED OR NOT             *\n***********************************************************************\nIXTEST   EQU   *\n         L     1,UCBADDR\n         CVAFTST UCB=(1)\n         CH    15,=H'8'\n         BE    IXVTOC\n         LH    15,IEB013E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+26(6),VOLUCB\n         PUT   SYSOUT,SPACE\n***********************************************************************\n* INITIALIZE THE BUFFER LIST HEADER AND ELEMENTS                      *\n***********************************************************************\nIXVTOC   EQU   *\n         LA    4,CVPL\n         USING CVPL$MAP,4\n         MVC   CVDEB,DEBADDR\n         XC    BFLH$DEF(BFL$SIZE),BFLH$DEF\n         LA    1,BFLH$DEF\n         USING BFL$MAP,1\n         MVI   BFLHNOE,BFLE$N\n         OI    BFLHFL,BFLHDSCB         CCHHR OF DSCB TO BE USED\n         LA    2,BFLH$DEF+BFLHLN\n         USING BFLE,2\n         LA    3,DSCB$DEF\n         LA    5,BFLE$N\nBFLE$INT EQU   *\n         OI    BFLEFL,BFLECHR\n         MVI   BFLELTH,DSCB$SIZ\n         ST    3,BFLEBUF\n         LA    2,BFLELN(2)\n         LA    3,DSCB$SIZ(3)\n         BCT   5,BFLE$INT\n         DROP  1,2\n***********************************************************************\n* INITIALIZE THE FILTERING FIELD FOR SEARCHING THE VTOC               *\n***********************************************************************\n         XC    FCL$DEF(FCLHDLEN),FCL$DEF\n         LA    1,FCL$DEF\n         USING FCL$MAP,1\n         MVC   FCLID,FCL$ID\n         LA    2,FCLHDEND\n         USING FCLDSN,2\n         TM    FLAG,X'02'\n         BNO   ALL_DSETS\n         TM    FLAG,X'10'\n         BO    MASK_DSETS\n         L     8,DSNAME_ADDR\n         LH    15,DSNAME_CNT\n         MVC   FCLCOUNT,DSNAME_CNT\n         OI    FCL1FLAG,FCL1LIST\nDSNAME_LOOP EQU *\n         XC    FCLDSN(FCLDSNEL),FCLDSN\n         MVC   FCLDSNLG,0(8)\n         LA    3,1(8)\n         ST    3,FCLDSNA\n         LA    8,45(8)\n         LA    2,FCLDSNEL(2)\n         BCT   15,DSNAME_LOOP\n         B     INITVTIX\nMASK_DSETS EQU *\n         L     8,DSNAME_ADDR\n         LH    3,DSNCOUNT\n         MH    3,=H'45'\n         LA    8,0(3,8)\n         MVC   FCLCOUNT,=H'1'\n         MVC   FCLDSNLG,0(8)\n         LA    3,1(8)\n         ST    3,FCLDSNA\n         B     INITVTIX\nALL_DSETS EQU  *\n         MVC   FCLCOUNT,=H'1'\n         MVI   FCLDSNLG,X'02'\n         LA    3,=C'**'\n         ST    3,FCLDSNA\n         DROP  1,2\n***********************************************************************\n* READ THE VTOC FOR FIRST TIME                                        *\n***********************************************************************\nINITVTIX EQU   *\n         NI    FLAG,X'7F'\n         CVAFFILT ACCESS=READ,FCL=FCL$DEF,BUFLIST=BFLH$DEF,            X\n               MF=(E,CVPL)\nTEST$RET EQU   *\n         LTR   15,15\n         BZ    READLAST\n         CH    15,=H'4'\n         BNE   IXSEQERR\n         CLI   CVSTAT,STAT064\n         BNE   IXSEQERR\n         B     READOK\n***********************************************************************\n* INITIALIZE READING THE VTOC BUFFER AND START SEARCHING              *\n***********************************************************************\nREADLAST EQU   *\n         OI    FLAG,X'80'\nREADOK   EQU   *\n         LA    2,FCL$DEF\n         USING FCL$MAP,2\n         XR    3,3\n         ICM   3,3,FCLDSCBR\n         BZ    TST$RSUM\n         LA    2,DSCB$DEF\n         USING DSCB$MAP,2\n         OI    FLAG,X'40'\nREADVTIX EQU   *\n         LTR   3,3                   CHECK FOR END OF DSCB'S\n         BZ    TST$RSUM                EXIT IF END OF VTOC\n         TM    FLAG,X'40'\n         BO    *+8\n         LA    2,DSCB$SIZ(2)\n         NI    FLAG,X'BF'\n         BCTR  3,0\n         ZAP   CYL_LOW_EXTENT,=P'0'\n         ZAP   CYL_HIGH_EXTENT,=P'0'\n         ZAP   TRK_LOW_EXTENT,=P'0'\n         ZAP   TRK_HIGH_EXTENT,=P'0'\n         CLI   DS1FMTID,0              IS THIS DSCB UNUSED\n         BE    READVTIX                YES - DONT COUNT IT\n         CLI   DS1FMTID,C'1'           IS THIS A FORMAT 1 DSCB\n         BE    FORMAT1\n         CLI   0(2),C'4'\n         BE    FORMAT4\n         B     READVTIX\n***********************************************************************\n* ISSUE A RESUME TO CONTINUE READING THE VTOC                         *\n***********************************************************************\nTST$RSUM EQU   *\n         TM    FLAG,X'80'\n         BO    IXCLOSE\n         CVAFFILT ACCESS=RESUME,FCL=FCL$DEF,BUFLIST=BFLH$DEF,          X\n               FLTAREA=KEEP,MF=(E,CVPL)\n         B     TEST$RET\n***********************************************************************\n* GET THE TRACKS/CYL FIELD OFF THE FORMAT 4 OF THE VOLUME             *\n***********************************************************************\nFORMAT4  EQU   *\n         XR    15,15\n         ICM   15,3,20(2)\n         CVD   15,DOUBLE\n         MVC   TRK_CYL,DOUBLE+6\n         B     READVTIX\n***********************************************************************\n* READ FORMAT3 OF DATA SET                                            *\n***********************************************************************\nFORMAT3  EQU   *\n         NI    FMT3,X'F0'\n         MVC   MAX_EXTENT,=H'4'\n         MVC   CCHHR3,0(5)\n         OBTAIN ACTADDR\n         LTR   15,15\n         BZ    SEEK_OK\n         LH    15,IEB112E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+54(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     RETURN8\n***********************************************************************\n* SEEK THE VOLUME TO FIND A FORMAT3                                   *\n***********************************************************************\nSEEK_OK  EQU   *\n         LA    5,FMT3AREA\n         CLC   0(4,5),=XL4'03030303'\n         BE    FORMAT3_READ_OK\n         LH    15,IEB113E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+48(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     RETURN8\n***********************************************************************\n* OBTAIN THE FORMAT 3 AND CALCULATE THE EXTENTS                       *\n***********************************************************************\nFORMAT3_READ_OK EQU *\n         LA    5,4(5)\nFORMAT3_NEXT_EXTENT EQU *\n         XR    6,6\n         IC    6,EXTNTS\n         CH    6,MAX_EXTENT\n         BNH   LAST_FORMAT3\n         SH    6,MAX_EXTENT\n         STC   6,EXTNTS\n         LH    6,MAX_EXTENT\n         OI    FMT3,X'01'\nLAST_FORMAT3 EQU *\n         BAL   14,ADDCYL\n         LA    5,10(5)\n         BCT   6,LAST_FORMAT3\n         TM    FMT3,X'F1'\n         BNO   PRINTL\n         TM    FMT3,X'02'\n         BO    FORMAT3\n         LA    5,1(5)\n         MVC   MAX_EXTENT,=H'9'\n         NI    FMT3,X'F0'\n         OI    FMT3,X'02'\n         B     FORMAT3_NEXT_EXTENT\nACTADDR  CAMLST SEEK,CCHHR3,VOLUME3,FMT3AREA\n***********************************************************************\n* PROCESS THE FORMAT 1 FIELDS FOR A DATA SET                          *\n***********************************************************************\nFORMAT1  EQU   *\n* ------\n* DO WE CHECK REF, CRE OR BLKSIZE?                                  AIV\n         TM    FLAG2,X'FF'                                          AIV\n         BZ    PUTLINE            NO. STRING OUTPUT                 AIV\n* THE NEXT CODE EXECUTED IF ANY BIT OF FLAG2 WAS SET                AIV\n         TM    FLAG2,X'01'        PROCESS REFERED DATE              AIV\n         BZ    ENDREFP                                              AIV\n         CLC   =X'000000',DS1REFD +4B                               AIV\n         BE    ENDREFP            CHECK CREATE DATE                 AIV\n         CLC   REFDAT(3),DS1REFD                                    AIV\n         BL    READVTIX           NO. READ ANOTHER RECORD           AIV\n* ADD DS1CREDT ANALYZING HERE                                       AIV\nENDREFP  TM    FLAG2,X'02'        PROCESS CREATE DATE               AIV\n         BZ    ENDCREP                                              AIV\n         CLC   =X'000000',CREDAT1 IS CREATE MIN ZERO?               AIV\n         BE    COMPHI             YES. DO NOT PROCESS               AIV\n         CLC   CREDAT1(3),DS1CREDT COMPARE CREATE MIN WITH DS1CREDT AIV\n         BH    READVTIX           NO. READ ANOTHER RECORD           AIV\nCOMPHI   CLC   =X'000000',CREDAT2 IS CREATE MAX ZERO?               AIV\n         BE    ENDCREP            YES. DO NOT PROCESS               AIV\n         CLC   CREDAT2(3),DS1CREDT +35                              AIV\n         BL    READVTIX           NO. READ ANOTHER RECORD           AIV\nENDCREP  TM    FLAG2,X'04'        PROCESS BLKSIZE                   AIV\n         BZ    PUTLINE                                              AIV\n* CHECK IF THE DS IS NOT VSAM                                       AIV\n*        TM    DS1DSORG+1,DS1ORGAM                                  AIV\n*        BO    READVTIX           VSAM DS, READ ANOTHER RECORD      AIV\n         CLC   =X'0000',BLKSIZ1   IS BLKSIZE MIN ZERO?              AIV\n         BE    COMPMAX            YES. DO NOT PROCESS               AIV\n         CLC   BLKSIZ1(2),DS1BLKL COMPARE BLKSIZE MIN WITH BLKSIZ1  AIV\n         BH    READVTIX           NO. READ ANOTHER RECORD           AIV\nCOMPMAX  CLC   =X'0000',BLKSIZ2   IS BLKSIZE MAX ZERO?              AIV\n         BE    PUTLINE            YES. DO NOT PROCESS               AIV\n         CLC   BLKSIZ2(2),DS1BLKL COMPARE BLKSIZE MAX WITH BLKSIZ2  AIV\n         BL    READVTIX           NO. READ ANOTHER RECORD           AIV\n* ------\nPUTLINE  BLANK LINHA\n         ZAP   TRK_ALOC_EXTENT,=P'0'\n         AP    DSN_VOLUME,=P'1'\n         MVC   DSNAME,DS1DSNAM\n         MVC   PRT_VOLUME,VOLUCB\n***********************************************************************\n* TEST IF IS SET TO SEARCH CATALOG INFORMATION ABOUT DATA SET         *\n***********************************************************************\n         TM    FLAG_CATALOG,X'FF'\n         BNO   NO_CATALOG\n         MVI   PRT_CATALOG_DSN,C'N'\n         MVC   DSNAME_CATALOG,DSNAME\n***********************************************************************\n* EXECUTE LOCATE MACRO INSTRUCTION TO ACCESS CATALOG INFORMATION      *\n***********************************************************************\n         LOCATE CAMLST\n         LTR   15,15\n         BNZ   NO_CATALOG\n         LA    5,LISTA_CATALOG\n         LH    6,0(5)\n         LA    5,2(5)\n***********************************************************************\n* COMPARE THE VOLUME FOUND ON CATALOG WITH THE INDICATED              *\n***********************************************************************\nFIND_VOL_CATALOG EQU *\n         CLC   VOLUCB,4(5)\n         BE    OK_CATALOG\n         LA    5,12(5)\n         BCT   6,FIND_VOL_CATALOG\n         MVI   PRT_CATALOG_DSN,C'E'\n         B     NO_CATALOG\nCAMLST   CAMLST NAME,DSNAME_CATALOG,,LISTA_CATALOG\nOK_CATALOG EQU *\n         MVI   PRT_CATALOG_DSN,C'Y'\n***********************************************************************\n* OBTAIN EXTENTS NUMBER TO DATA SETS IF IS NEED READ FORMAT 3 DSCB    *\n***********************************************************************\nNO_CATALOG EQU *\n         NI    FMT3,X'00'\n         MVC   EXTNTS,DS1NOEPV\n         XR    15,15\n         ICM   15,1,DS1NOEPV\n         CVD   15,DOUBLE\n         CH    15,=H'3'\n         BNH   NO_NEED_FORMAT3\n         OI    FMT3,X'F0'\nNO_NEED_FORMAT3 EQU *\n         MVC   PRT_EXTENTS_DSN,MASK3\n         ED    PRT_EXTENTS_DSN,DOUBLE+6\n         MVC   PRT_SMSFLAG_DSN,=C'Y'\n         TM    DS1SMSFG,DS1SMSDS\n         BO    *+10\n         MVC   PRT_SMSFLAG_DSN,=C'N'\n***********************************************************************\n* PROCESS CREATE DATE AND REFERENCE DATE                              *\n***********************************************************************\nVERIFY_CREATE_DATE EQU *\n         CLC   DS1CREDT,DATE_NULL\n         BE    NULL_CREATE_DATE\n         XR    15,15\n         ICM   15,1,DS1CREDT\n         CVD   15,DOUBLE\n         AP    DOUBLE,=P'1900'\n         UNPK  JULGRIN(5),DOUBLE+5(3)\n         OI    JULGRIN+4,X'F0'\n         XR    15,15\n         ICM   15,3,DS1CREDT+1\n         CVD   15,DOUBLE\n         UNPK  JULGRIN+5(3),DOUBLE+6(2)\n         OI    JULGRIN+7,X'F0'\n         JULGREG JULGRIN+1,JULGROUT,DOUBLE\n         MVC   DIACREDT,JULGROUT\n         MVI   DIACREDT+2,C'/'\n         MVC   MESCREDT,JULGROUT+2\n         MVI   MESCREDT+2,C'/'\n         MVC   ANOCREDT,JULGROUT+4\n         B     VERIFY_REFER_DATE\nNULL_CREATE_DATE EQU *\n         MVC   DTECREDT,DATE_NONE\nVERIFY_REFER_DATE EQU *\n         CLC   DS1REFD,DATE_NULL\n         BE    NULL_REFER_DATE\n         XR    15,15\n         ICM   15,1,DS1REFD\n         CVD   15,DOUBLE\n         AP    DOUBLE,=P'1900'\n         UNPK  JULGRIN(5),DOUBLE+5(3)\n         OI    JULGRIN+4,X'F0'\n         XR    15,15\n         ICM   15,3,DS1REFD+1\n         CVD   15,DOUBLE\n         UNPK  JULGRIN+5(3),DOUBLE+6(2)\n         OI    JULGRIN+7,X'F0'\n         JULGREG JULGRIN+1,JULGROUT,DOUBLE\n         MVC   DIAREFDT,JULGROUT\n         MVI   DIAREFDT+2,C'/'\n         MVC   MESREFDT,JULGROUT+2\n         MVI   MESREFDT+2,C'/'\n         MVC   ANOREFDT,JULGROUT+4\n         B     VERIFY_DATASET_ORG\nNULL_REFER_DATE EQU *\n         MVC   DTEREFDT,DATE_NONE\n***********************************************************************\n* VERIFY THE TYPE OF DATASET WHICH IS BEING HANDLED                   *\n***********************************************************************\nVERIFY_DATASET_ORG EQU *\n         MVC   PRT_DSORG_DSN,=CL2'UN'\n         TM    DS1DSORG,DS1DSGIS\n         BNO   *+16\n         MVC   PRT_DSORG_DSN,=CL2'IS'\n         AP    DSNIS_VOLUME,=P'1'\n         TM    DS1DSORG,DS1DSGPS\n         BNO   *+16\n         MVC   PRT_DSORG_DSN,=CL2'PS'\n         AP    DSNPS_VOLUME,=P'1'\n         TM    DS1DSORG,DS1DSGDA\n         BNO   *+16\n         MVC   PRT_DSORG_DSN,=CL2'DA'\n         AP    DSNDA_VOLUME,=P'1'\n         TM    DS1DSORG,DS1DSGPO\n         BNO   *+16\n         MVC   PRT_DSORG_DSN,=CL2'PO'\n         AP    DSNPO_VOLUME,=P'1'\n         TM    DS1DSORG+1,DS1ACBM\n         BO    VVDSREAD\n         CLC   PRT_DSORG_DSN,=CL3'UN'\n         BNE   *+10\n         AP    DSNUN_VOLUME,=P'1'\n         B     VERRECFM\n***********************************************************************\n* HANDLE VSAM DATASETS                                                *\n***********************************************************************\nVVDSREAD EQU   *\n         TM    FLAG,X'20'\n         BNO   TRATA_VSAM\n         LH    15,IEB111E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+46(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     CALCSPAC\nTRATA_VSAM EQU *\n         MVC   PRT_DSORG_DSN,=CL2'VS'\n         AP    DSNVS_VOLUME,=P'1'\n         STM   1,9,SALVA19\n         XC    VVDSRBA,VVDSRBA\n         POINT RPL=VVDSRPL\n         LTR   15,15\n         BNZ   VVDSERRO\n         GET   RPL=VVDSRPL\n         LTR   15,15\n         BNZ   VVDSERRO\n***********************************************************************\n* READ A RECORD OF THE VVDS AND GET THE HEADER CELL OF THE RECORD     *\n***********************************************************************\nNEXTREC  EQU   *\n         GET   RPL=VVDSRPL\n         LTR   15,15\n         BNZ   VVDSERRO\n         L     2,VVDSADR\n         MVC   HALF,0(2)\n         LH    3,HALF\n         LA    2,2(2)\n         SH    3,=H'2'\n         CLI   2(2),X'E9'\n         BNE   NEXTREC\n***********************************************************************\n* VERIFY THE TYPES OF COMPONENTS BEING HANDLED                        *\n***********************************************************************\nNEXTCOMP EQU   *\n         MVC   HALF,0(2)\n         LH    4,HALF\n         CLI   2(2),X'E9'\n         BE    HEADER\n         CLI   2(2),X'23'\n         BE    VOLCOMP\n         CLI   2(2),X'60'\n         BE    DSNCOMP\n***********************************************************************\n* PREPARE READING THE NEXT COMPONENT                                  *\n***********************************************************************\nSKIPIT   EQU   *\n         AR    2,4\n         SR    3,4\n         BH    NEXTCOMP\n         B     NEXTREC\n***********************************************************************\n* LOOK AT THE HEADER CELL TO SEE IF THE RECORD IS THE ONE WE WANT     *\n***********************************************************************\nHEADER   EQU   *\n         XR    7,7\n         IC    7,8(2)\n         SH    7,=H'2'\n         EX    7,CLCVVDS\n         BNE   NEXTREC\n         B     SKIPIT\nCLCVVDS  CLC   DSNAME(0),9(2)\n***********************************************************************\n* GET THE VALUES OF CISIZE AND AVGREC FOR THE FILE                    *\n***********************************************************************\nDSNCOMP  EQU   *\n         MVC   FULL,22(2)\n         L     15,FULL\n         CVD   15,DOUBLE\n         MVC   PRT_BLKSIZE_DSN,MASK5\n         ED    PRT_BLKSIZE_DSN,DOUBLE+5\n         MVC   FULL,26(2)\n         L     15,FULL\n         CVD   15,DOUBLE\n         MVC   PRT_LRECL_DSN,MASK5\n         ED    PRT_LRECL_DSN,DOUBLE+5\n         B     SKIPIT\n***********************************************************************\n* GET OR CALCULATE THE ALLOCATED AND UTILIZED SPACE FOR THE FILE      *\n***********************************************************************\nVOLCOMP  EQU   *\n         CLI   25(2),X'80'\n         BE    NEXTREC\n         CLI   25(2),X'C0'\n         BE    NEXTREC\n         MVC   FULL,17(2)\n         L     8,FULL\n         MVC   HALF,21(2)\n         LH    3,HALF                                               AIV\n         MVC   FULL(4),3(2)                                         AIV\n         L     7,FULL\n         AR    7,8\n         SLR   6,6\n         S     7,=F'1'\n         DR    6,8                GET NO OF BLOCKS USED\n         SLR   6,6                IGNORE REMINDER ..\n         AR    7,3                ROUND TO TRACK BOUNDARY IF NOT\n         S     7,=F'1'\n         DR    6,3                GET TRACKS USED                   AIV\n         ST    7,TRK_USED         USED TRACKS\n         MVC   FULL(4),13(2)     HIGH ALLOCATED RBA\n         L     7,FULL\n         AR    7,8                ROUND TO BLOCK BOUNDARY\n         SLR   6,6\n         S     7,=F'1'\n         DR    6,8                GET NO OF BLOCKS ALLOCATED\n         SLR   6,6                CLEAR THE REMINDER\n         AR    7,3                ROUND TO TRACK BOUNDARY           AIV\n         S     7,=F'1'            LESS 1\n         DR    6,3                GET TRACKS ALLLOCATED             AIV\n         ST    7,TRK_ALOC         ALLOCATED TRACKS\n         LA    2,42(2)            POINT TO EXTENT INFORMATION\n         SH    4,=H'42'           REMAINING LENGTH\n         SLR   5,5                INITIALISE ACTUAL TRACKS\n***********************************************************************\n* COMPUTE OTHER EXTENTS OF THE DATASET                                *\n***********************************************************************\nNEXTEXT  EQU   *\n         MVC   HALF,10(2)        EXTENT LENGTH\n         AH    5,HALF\n         LA    2,20(2)            POINT TO NEXT EXT\n         SH    4,=H'20'           REMAINING LENGTH\n         BH    NEXTEXT            NEXT EXTENT\n         LR    7,5                ALLOCATED TRACKS\n         CVD   7,DOUBLE\n         MVC   PRT_TRK_ALOC_DSN,MASK5\n         ED    PRT_TRK_ALOC_DSN,DOUBLE+5\n         L     7,TRK_USED\n         MR    6,5                USE TRACKS * ACTUAL ALLOCATED\n         D     6,TRK_ALOC         GET ACTUAL USED TRACKS\n         LTR   6,6                REMINDER ZERO\n         BZ    *+8\n         LA    7,1(7)             OTHERWISE INCREMENT QUOTIENT 1\n         CVD   7,DOUBLE\n         MVC   PRT_TRK_USED_DSN,MASK5\n         ED    PRT_TRK_USED_DSN,DOUBLE+5\n         AP    TRK_USED_VOLUME,DOUBLE+5(3)\nVVDSEOD  EQU   *\n         LM    1,9,SALVA19\n         B     CALCSPAC\n***********************************************************************\n* DETERMINE THE RECORD FORMAT OF THE FILE                             *\n***********************************************************************\nVERRECFM EQU   *\n*        MVC   PRT_RECFM_DSN,=CL2' '\n         L     15,=A(PRT_RECFM_DSN)                                 AIV\n         TM    DS1RECFM,DS1RECFU\n         BNO   RECFMV                                               AIV\n         MVI   0(15),C'U'         PUT 'U' INTO RECFM FIELD          AIV\n         LA    15,1(15)           REG15 = REG15 + 1                 AIV\n         B     RECFMB                                               AIV\n*                                                                   AIV\nRECFMV   TM    DS1RECFM,DS1RECFV                                    AIV\n         BNO   RECFMF                                               AIV\n         MVI   0(15),C'V'         PUT 'V' INTO RECFM FIELD          AIV\n         LA    15,1(15)           REG15 = REG15 + 1                 AIV\n*                                                                   AIV\nRECFMF   TM    DS1RECFM,DS1RECFF                                    AIV\n         BNO   RECFMB                                               AIV\n         MVI   0(15),C'F'         PUT 'F' INTO RECFM FIELD          AIV\n         LA    15,1(15)           REG15 = REG15 + 1                 AIV\n*                                                                   AIV\nRECFMB   TM    DS1RECFM,DS1RECFB                                    AIV\n         BNO   RECFMA                                               AIV\n         MVI   0(15),C'B'         PUT 'B' INTO RECFM FIELD          AIV\n         LA    15,1(15)           REG15 = REG15 + 1                 AIV\n*                                                                   AIV\nRECFMA   TM    DS1RECFM,DS1RECFA                                    AIV\n         BNO   RECFMM                                               AIV\n         MVI   0(15),C'A'         PUT 'A' INTO RECFM FIELD          AIV\n         LA    15,1(15)           REG15 = REG15 + 1                 AIV\n*                                                                   AIV\nRECFMM   TM    DS1RECFM,DS1RECMC                                    AIV\n         BNO   *+8                                                  AIV\n         MVI   0(15),C'M'         PUT 'M' INTO RECFM FIELD          AIV\n         LA    15,1(15)           REG15 = REG15 + 1                 AIV\n*                                                                   AIV\n*        CLI   PRT_RECFM_DSN+1,C' '                                 AIV\n*        BNE   *+14                                                 AIV\n*        MVC   PRT_RECFM_DSN(1),PRT_RECFM_DSN+2                     AIV\n*        MVI   PRT_RECFM_DSN+2,C' '                                 AIV\n***********************************************************************\n* FIND THE RECORD LENGTH AND BLOCK SIZE                               *\n***********************************************************************\n         XR    15,15\n         ICM   15,3,DS1BLKL\n         CVD   15,DOUBLE\n         MVC   PRT_BLKSIZE_DSN,MASK5\n         ED    PRT_BLKSIZE_DSN,DOUBLE+5\n         XR    15,15\n         ICM   15,3,DS1LRECL\n         CVD   15,DOUBLE\n         MVC   PRT_LRECL_DSN,MASK5\n         ED    PRT_LRECL_DSN,DOUBLE+5\n         XR    15,15\n         ICM   15,3,DS1LSTAR\n         CLI   DS1LSTAR+2,X'00'\n         BE    EDIT_USED\n         LA    15,1(15)\nEDIT_USED EQU  *\n         CVD   15,DOUBLE\n         MVC   PRT_TRK_USED_DSN,MASK5\n         ED    PRT_TRK_USED_DSN,DOUBLE+5\n         AP    TRK_USED_VOLUME,DOUBLE+5(3)\n***********************************************************************\n* CALCULATE THE ALLOCATED SPACE OF THE DATA SET                       *\n***********************************************************************\nCALCSPAC EQU   *\n         LA    5,DS1EXT1\n         XR    6,6\n         ICM   6,1,EXTNTS\n         LTR   6,6\n         BZ    PRINTL\n         TM    FMT3,X'F0'\n         BNO   LOOP_ADDCYL_FORMAT1\n***********************************************************************\n* SET TO READ THE FIRST THREE EXTENTS                                *\n***********************************************************************\nADD_FORMAT_3 EQU *\n         SH    6,=H'3'\n         STCM  6,1,EXTNTS\n         LA    6,3\n         MVC   VOLUME3,VOLUCB\nLOOP_ADDCYL_FORMAT1 EQU *\n         BAL   14,ADDCYL\n         LA    5,10(5)\n         BCT   6,LOOP_ADDCYL_FORMAT1\n         TM    FMT3,X'F0'\n         BO    FORMAT3\n         B     PRINTL\n***********************************************************************\n* ROUTINE TO CALCULATE THE ALLOCATED SPACE FOR THE FILE               *\n***********************************************************************\nADDCYL   EQU   *\n         STM   14,15,SALVA14\n         XR    15,15\n         ICM   15,3,2(5)\n         CVD   15,DOUBLE\n         ZAP   CYL_LOW_EXTENT,DOUBLE\n         XR    15,15\n         ICM   15,3,4(5)\n         CVD   15,DOUBLE\n         ZAP   TRK_LOW_EXTENT,DOUBLE\n         XR    15,15\n         ICM   15,3,6(5)\n         CVD   15,DOUBLE\n         ZAP   CYL_HIGH_EXTENT,DOUBLE\n         XR    15,15\n         ICM   15,3,8(5)\n         CVD   15,DOUBLE\n         ZAP   TRK_HIGH_EXTENT,DOUBLE\n         MP    CYL_LOW_EXTENT,TRK_CYL\n         MP    CYL_HIGH_EXTENT,TRK_CYL\n         AP    CYL_LOW_EXTENT,TRK_LOW_EXTENT\n         AP    CYL_HIGH_EXTENT,TRK_HIGH_EXTENT\n         SP    CYL_HIGH_EXTENT,CYL_LOW_EXTENT\n         AP    CYL_HIGH_EXTENT,=P'1'\n         AP    TRK_ALOC_EXTENT,CYL_HIGH_EXTENT\n         LM    14,15,SALVA14\n         BR    14\n***********************************************************************\n* ADD UP THE ALLOCATED SPACE FOR THE FILE AND CHECK IF IT HAS TO      *\n* BE PRINTED                                                          *\n***********************************************************************\nPRINTL   EQU   *\n         AP    TRK_ALOC_VOLUME,TRK_ALOC_EXTENT\n         MVC   PRT_TRK_ALOC_DSN,MASK5\n         ED    PRT_TRK_ALOC_DSN,TRK_ALOC_EXTENT+2\n         TM    FLAG,X'01'\n         BO    READVTIX\n         XC    CABEC,CABEC\n         BAL   14,PUTOUT\n         PUT   SYSPRINT,LINHA\n         AP    NUMLINHA,=P'1'\n         B     READVTIX\n***********************************************************************\n* ROUTINE TO PRINT THE REPORT HEADER LINES FOR EACH PAGE              *\n***********************************************************************\nPUTOUT   EQU   *\n         STM   14,15,SALVA14\n         CP    NUMLINHA,=P'61'\n         BLR   14\n         AP    PAGINA,=P'1'\n         LH    15,CABECA1         DASD SPACE REPORT                 AIV\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSPRINT,SPACE\n         LH    15,CABECA2         DATE&TIME                         AIV\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+8(2),DATED\n         MVC   SPACE+11(2),DATED+2\n         MVC   SPACE+14(4),DATED+4\n         MVC   SPACE+26(2),TIMED                                    AIV\n         MVC   SPACE+29(2),TIMED+2                                  AIV\n         MVC   SPACE+32(2),TIMED+4                                  AIV\n         UNPK  SPACE+119(3),PAGINA                                  AIV\n         OI    SPACE+121,X'F0'                                      AIV\n* -----\n         TM    FLAG2,X'01'\n         BZ    REFSKIP\n         MVC   SPACE+54(4),=C'REF='                                 AIV\n         MVC   SPACE+58(7),REFIN                                    AIV\nREFSKIP  TM    FLAG2,X'02'                                          AIV\n         BZ    CRESKIP                                              AIV\n         MVC   SPACE+67(4),=C'CRE='                                 AIV\n         MVC   SPACE+71(7),CREIN                                    AIV\n         MVC   SPACE+79(2),=C'TO'                                   AIV\n         MVC   SPACE+82(7),CREIN2                                   AIV\nCRESKIP  TM    FLAG2,X'04'                                          AIV\n         BZ    BLKSKIP                                              AIV\n         MVC   SPACE+90(8),=C'BLKSIZE='                             AIV\n         MVC   SPACE+98(5),BLKIN1                                   AIV\n         MVC   SPACE+104(2),=C'TO'                                  AIV\n         MVC   SPACE+107(5),BLKIN2                                  AIV\nBLKSKIP  DS    0H                                                   AIV\n* -----\n         PUT   SYSPRINT,SPACE     APPEND CRE AND/OR REF             AIV\n         BLANK SPACE\n         PUT   SYSPRINT,SPACE     BLANK STRING                      AIV\n         ZAP   NUMLINHA,=P'3'\nPUTCAB   EQU   *\n         XR    15,15\n         IC    15,CABEC\n         SLL   15,2\n         B     *+4(15)\n         B     CABEC1\n         LM    14,15,SALVA14\n         BR    14\nCABEC1   EQU   *\n         LH    15,CABECA3         --- DATA SET NAME ----            AIV\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSPRINT,SPACE     PRINT IT                          AIV\n         AP    NUMLINHA,=P'1'\n         LM    14,15,SALVA14\n         BR    14\n***********************************************************************\n* DEALING WITH POSSIBLE ERRORS IN ACCESSING THE VTOC                  *\n***********************************************************************\nIXSEQERR EQU   *\n         CLI   CVSTAT,STAT032\n         BE    IXCLOSE\n         LH    15,IEB115E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+26(3),=C'FIL'\nIXMACERR EQU   *\n         IC    1,CVSTAT\n         N     1,=F'255'\n         CVD   1,DOUBLE\n         UNPK  SPACE+47(3),DOUBLE+6(2)\n         OI    SPACE+49,X'F0'\n         CVD   15,DOUBLE\n         UNPK  SPACE+36(3),DOUBLE+6(2)\n         OI    SPACE+38,X'F0'\nIXCLOSE  EQU   *\n         CVAFFILT ACCESS=RLSE,FCL=0,BUFLIST=0,                         X\n               MF=(E,CVPL)\n         TM    FLAG,X'10'\n         BNO   CLOSE\n         LH    15,DSNCOUNT\n         LA    15,1(15)\n         STH   15,DSNCOUNT\n         CLC   DSNCOUNT,DSNAME_CNT\n         BL    IXVTOC\n         XC    DSNCOUNT,DSNCOUNT\n***********************************************************************\n* PRINT THE TOTALS FOR THE VOLUME                                     *\n***********************************************************************\nCLOSE    EQU   *\n         CLOSE VTOC\n         CLOSE VVDS\n         BLANK LINHA\n         AP    VOLUME_COUNT,=P'1'\n         CP    DSN_VOLUME,=P'0'\n         BE    UNALLOC\n         AP    VOLUME_COUNT_DSN,=P'1'\n         MVC   PRT_TRK_ALOC_VOLUME,MASK5\n         ED    PRT_TRK_ALOC_VOLUME,TRK_ALOC_VOLUME+2\n         MVC   PRT_TRK_USED_VOLUME,MASK5\n         ED    PRT_TRK_USED_VOLUME,TRK_USED_VOLUME+2\n         AP    TRK_ALOC_TOTAL,TRK_ALOC_VOLUME\n         AP    TRK_USED_TOTAL,TRK_USED_VOLUME\n         MVC   PRT_DSN_VOLUME,MASK5\n         ED    PRT_DSN_VOLUME,DSN_VOLUME+2\n         MVC   PRT_DSNPS_VOLUME,MASK5\n         ED    PRT_DSNPS_VOLUME,DSNPS_VOLUME+2\n         MVC   PRT_DSNPO_VOLUME,MASK5\n         ED    PRT_DSNPO_VOLUME,DSNPO_VOLUME+2\n         MVC   PRT_DSNIS_VOLUME,MASK5\n         ED    PRT_DSNIS_VOLUME,DSNIS_VOLUME+2\n         MVC   PRT_DSNDA_VOLUME,MASK5\n         ED    PRT_DSNDA_VOLUME,DSNDA_VOLUME+2\n         MVC   PRT_DSNVS_VOLUME,MASK5\n         ED    PRT_DSNVS_VOLUME,DSNVS_VOLUME+2\n         MVC   PRT_DSNUN_VOLUME,MASK5\n         ED    PRT_DSNUN_VOLUME,DSNUN_VOLUME+2\n         MVC   PRT_CYL_FREE_VOLUME,MASK7\n         ED    PRT_CYL_FREE_VOLUME,CYL_FREE_VOLUME+2\n         MVC   PRT_TRK_FREE_VOLUME,MASK7\n         ED    PRT_TRK_FREE_VOLUME,TRK_FREE_VOLUME+2\n         MVI   CABEC,X'01'\n         CP    NUMLINHA,=P'56'\n         BNH   *+8\n         BAL   14,PUTOUT\n         BLANK SPACE\n         PUT   SYSPRINT,SPACE\n         LH    15,CABECA4\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+20(6),VOLUCB\n         MVC   SPACE+34(4),UCBUNIT\n         MVC   SPACE+44(4),FULLPRT                                  AIV\n         PUT   SYSPRINT,SPACE\n         BLANK SPACE\n         PUT   SYSPRINT,SPACE\n         LH    15,CABECA5\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSPRINT,SPACE\n         PUT   SYSPRINT,LINHA\n         ZAP   NUMLINHA,=P'61'\n         AP    DSN_TOTAL,DSN_VOLUME\n         AP    DSNUN_TOTAL,DSNUN_VOLUME\n         AP    DSNPS_TOTAL,DSNPS_VOLUME\n         AP    DSNPO_TOTAL,DSNPO_VOLUME\n         AP    DSNIS_TOTAL,DSNIS_VOLUME\n         AP    DSNDA_TOTAL,DSNDA_VOLUME\n         AP    DSNVS_TOTAL,DSNVS_VOLUME\n***********************************************************************\n* FREE THE ALLOCATIONS OF VVDS AND VTOC                               *\n***********************************************************************\nUNALLOC  EQU   *\n         LH    15,IEB008I\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+18(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         LA    1,ALOC\n         MVC   ALOCTP,=A(VTOCULOC)\n         MVC   ALOCVC,=AL1(2)\n         DYNALLOC\nULOCOK   EQU   *\n         LA    1,ALOC\n         MVC   ALOCTP,=A(VVDSULOC)\n         DYNALLOC\n***********************************************************************\n* INITIALIZE THE INDEX COUNTERS                                       *\n***********************************************************************\nZAPINDEX EQU   *\n         NI    FLAG,X'DF'\n         ZAP   DSN_VOLUME,=P'0'\n         ZAP   DSNUN_VOLUME,=P'0'\n         ZAP   DSNPS_VOLUME,=P'0'\n         ZAP   DSNPO_VOLUME,=P'0'\n         ZAP   DSNIS_VOLUME,=P'0'\n         ZAP   DSNDA_VOLUME,=P'0'\n         ZAP   DSNVS_VOLUME,=P'0'\n         ZAP   TRK_ALOC_VOLUME,=P'0'\n         ZAP   TRK_USED_VOLUME,=P'0'\n         B     PESQUCB\n***********************************************************************\n* PRINT THE GENERAL TOTALS OBTAINED                                   *\n***********************************************************************\nENDVOLS  EQU   *\n         BLANK LINHA\n         MVC   PRT_TRK_ALOC_TOTAL,MASK9\n         ED    PRT_TRK_ALOC_TOTAL,TRK_ALOC_TOTAL\n         MVC   PRT_TRK_USED_TOTAL,MASK9\n         ED    PRT_TRK_USED_TOTAL,TRK_USED_TOTAL\n         MVC   PRT_DSN_TOTAL,MASK7\n         ED    PRT_DSN_TOTAL,DSN_TOTAL+1\n         MVC   PRT_DSNPS_TOTAL,MASK7\n         ED    PRT_DSNPS_TOTAL,DSNPS_TOTAL+1\n         MVC   PRT_DSNPO_TOTAL,MASK7\n         ED    PRT_DSNPO_TOTAL,DSNPO_TOTAL+1\n         MVC   PRT_DSNIS_TOTAL,MASK7\n         ED    PRT_DSNIS_TOTAL,DSNIS_TOTAL+1\n         MVC   PRT_DSNDA_TOTAL,MASK7\n         ED    PRT_DSNDA_TOTAL,DSNDA_TOTAL+1\n         MVC   PRT_DSNVS_TOTAL,MASK7\n         ED    PRT_DSNVS_TOTAL,DSNVS_TOTAL+1\n         MVC   PRT_DSNUN_TOTAL,MASK7\n         ED    PRT_DSNUN_TOTAL,DSNUN_TOTAL+1\n         MVC   PRT_CYL_FREE_TOTAL,MASK9\n         ED    PRT_CYL_FREE_TOTAL,CYL_FREE_TOTAL\n         MVC   PRT_TRK_FREE_TOTAL,MASK9\n         ED    PRT_TRK_FREE_TOTAL,TRK_FREE_TOTAL\n         ZAP   NUMLINHA,=P'61'\n         BAL   14,PUTOUT\n         LH    15,CABECA6\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSPRINT,SPACE\n         LH    15,CABECA7\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+11(6),MASK5\n         ED    SPACE+11(6),VOLUME_COUNT\n         MVC   SPACE+40(6),MASK5\n         ED    SPACE+40(6),VOLUME_COUNT_DSN\n         PUT   SYSPRINT,SPACE\n         LH    15,CABECA10\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSPRINT,SPACE\n         PUT   SYSPRINT,LINHA\nRETURN   EQU   *\n         L     9,SREG9            RESTORE REGISTER 9                AIV\n         LH    15,IEB006I\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         L     15,RETCODE\n         CVD   15,DOUBLE\n         UNPK  SPACE+55(3),DOUBLE+6(2)\n         OI    SPACE+57,X'F0'\n         PUT   SYSOUT,SPACE\n         CLOSE SYSPRINT\n         CLOSE SYSOUT\n         L     15,RETCODE\n         L     13,SA+4\n         RETURN (14,12),RC=(15)\nRETURN8  EQU   *\n         MVC   RETCODE,=F'8'\n         B     RETURN\nRETURN16 EQU   *\n         MVC   RETCODE,=F'16'\n         B     RETURN\n***********************************************************************\n* DEAL WITH ERRORS THAT OCCUR DURING ACCESS OF THE VVDS               *\n***********************************************************************\nVVDSERRO EQU   *\n         SHOWCB RPL=VVDSRPL,AREA=FULL,LENGTH=4,FIELDS=(FDBK)\n         L     15,FULL\n         CVD   15,DOUBLE\n         LH    15,IEB110E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         UNPK  SPACE+16(3),DOUBLE+6(2)\n         OI    SPACE+18,X'F0'\n         MVC   SPACE+47(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     RETURN8\n         LTORG\n***********************************************************************\n* DEFINE AREAS FOR PRINTING OF THE REPORT                             *\n***********************************************************************\nNUMLINHA DC    PL2'61'\nPAGINA   DC    PL2'0'\nSTGADDR  DC    V(STGFIND)\nMSGADDR  DC    V(PUTMSG)\nIEB001E  DC    Y(133*0)\nIEB002E  DC    Y(133*1)\nIEB003W  DC    Y(133*2)\nIEB004E  DC    Y(133*3)\nIEB005E  DC    Y(133*4)\nIEB006I  DC    Y(133*5)\nIEB007E  DC    Y(133*6)\nIEB008I  DC    Y(133*7)\nIEB009I  DC    Y(133*8)\nIEB010E  DC    Y(133*9)\nIEB110E  DC    Y(133*10)\nIEB111E  DC    Y(133*11)\nCABECA1  DC    Y(133*12)\nCABECA2  DC    Y(133*13)\nCABECA3  DC    Y(133*14)\nCABECA4  DC    Y(133*15)\nCABECA5  DC    Y(133*16)\nCABECA6  DC    Y(133*17)\nCABECA7  DC    Y(133*18)\nCABECA8  DC    Y(133*19)\nCABECA9  DC    Y(133*20)\nCABECA10 DC    Y(133*21)\nIEB011E  DC    Y(133*22)\nIEB012E  DC    Y(133*23)\nIEB013E  DC    Y(133*24)\nIEB014I  DC    Y(133*25)\nIEB025E  DC    Y(133*26)\nIEB026I  DC    Y(133*27)\nIEB010I  DC    Y(133*28)\nIEB112E  DC    Y(133*29)\nIEB113E  DC    Y(133*30)\nIEB114E  DC    Y(133*31)\nIEB115E  DC    Y(133*32)\nSPACE    DS    CL133\nCALL_LIST CALL  ,(VOLUME_ADDR,VOLUME_CNT,PARM_ADDR),VL,MF=L\n***********************************************************************\n* DEFINE CONSTANTS FOR THE PROGRAM                                    *\n***********************************************************************\nSA       DC    18F'0'\nSREG9    DS    F                                                    AIV\nDOUBLE   DC    D'0'\nTRK_ALOC DC    F'0'\nTRK_USED DC    F'0'\nFULL     DC    F'0'\nFULLTR   DC    F'0'                                                 SBG\nFULLPRT  DC    F'0'                                                 AIV\nBYTE     DC    X'0'\nMASK_EXCLUDE DC X'0'\nHALF     DC    H'0'\nMAX_EXTENT DC  H'0'\nVVDSADR  DC    F'0'\nVVDSRBA  DC    F'0'\nSALVA8   DC    F'0'\nSAVER9A  DC    F'0'\nSAVER9B  DC    F'0'\nSALVA19  DC    9F'0'\nSALVA14  DC    2F'0'\nRETCODE  DC    F'0'\nDEBADDR  DC    F'0'\nUCBADDR  DC    F'0'\nADDRUCB  DC    F'0'\n#FORMAT0 DC    F'0'\nJULGRIN  DS    CL8\nJULGROUT DS    CL8\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\n         ORG\nEXTNTS   DS    X\nMASK3    DC    X'40202120'\nMASK5    DC    X'402020202120'\nMASK7    DC    X'4020202020202120'\nMASK9    DC    X'40202020202020202120'\nTAB_ALFA DC    X'0A0B0C0D0E0F'\nTAB_NUM  DC    X'00010203040506070809'\nDATE_NULL DC   X'000000'\nDATE_NONE DC   CL10'***NONE***'\nLOW_ADDR DC    CL4' '\nHI_ADDR  DC    CL4' '\nUCBUNIT  DC    CL4' '\nUCBAREA  DS    CL48\nAREA     DS    CL100\nPARM_ADDR    DS F\nSYSIN_ADDR   DS F\nVOLUME_ADDR  DS F\nDSNAME_ADDR  DS F\nDSNCOUNT     DS H\nDSNAME_CNT   DS H\nVOLUME_CNT   DS H\nVOLUCB   DS    CL6\nREFIN    DS    0CL7                                                 AIV\nREFYEAR  DS    CL4                                                  AIV\nREFDAY   DS    CL3                                                  AIV\nCREIN    DS    0CL7                                                 AIV\nCREYEAR  DS    CL4                                                  AIV\nCREDAY   DS    CL3                                                  AIV\nCREIN2   DS    0CL7                                                 AIV\nCREYEAR2 DS    CL4                                                  AIV\nCREDAY2  DS    CL3                                                  AIV\nREFDAT   DS    CL3                                                  AIV\nCREDAT1  DC    XL3'00'            CREATE DATE MIN                   AIV\nCREDAT2  DS    XL3'00'            CREATE DATE MAX                   AIV\nBLKIN1   DS    CL5                BLKSIZE MIN INPUT                 AIV\nBLKIN2   DS    CL5                BLKSIZE MAX INPUT                 AIV\nDSBLK1   DS    XL4'00'                                              AIV\nBLKSIZ1  EQU   DSBLK1+2           BLKSIZE MIN                       AIV\nDSBLK2   DS    XL4'00'                                              AIV\nBLKSIZ2  EQU   DSBLK2+2           BLKSIZE MAX                       AIV\nBINYR    DC    XL1'00'\nBINDAY   DC    XL2'0000'\nFLAG     DC    XL1'00'            WAS - DS      X                   AIV\nFLAG2    DC    XL1'00'                                              AIV\nFLAG_CATALOG DS  X\nFLAG_AUTH    DS  X\nFMT3     DS    X\nCABEC    DS    X\nDSNAME_CATALOG DC CL44' '\nLISTA_CATALOG  DS 0D\n               DS 265C\n***********************************************************************\n* DEFINE WORK AREAS FOR THE CALCULATION OPERATIONS                    *\n***********************************************************************\nVOLUME_COUNT     DC    PL3'0'\nVOLUME_COUNT_DSN DC    PL3'0'\nTRK_CYL         DC    PL2'15'\nTRK_LOW_EXTENT  DC    PL5'0'\nTRK_HIGH_EXTENT DC    PL5'0'\nCYL_LOW_EXTENT  DC    PL5'0'\nCYL_HIGH_EXTENT DC    PL5'0'\nTRK_ALOC_EXTENT DC    PL5'0'\nTRK_ALOC_VOLUME DC    PL5'0'\nTRK_USED_VOLUME DC    PL5'0'\nCYL_FREE_VOLUME DC    PL5'0'\nTRK_FREE_VOLUME DC    PL5'0'\nDSNIS_VOLUME    DC    PL5'0'\nDSNUN_VOLUME    DC    PL5'0'\nDSNPS_VOLUME    DC    PL5'0'\nDSNPO_VOLUME    DC    PL5'0'\nDSNDA_VOLUME    DC    PL5'0'\nDSNVS_VOLUME    DC    PL5'0'\nDSN_VOLUME      DC    PL5'0'\nDSNIS_TOTAL     DC    PL5'0'\nDSNUN_TOTAL     DC    PL5'0'\nDSNPS_TOTAL     DC    PL5'0'\nDSNPO_TOTAL     DC    PL5'0'\nDSNDA_TOTAL     DC    PL5'0'\nDSNVS_TOTAL     DC    PL5'0'\nDSN_TOTAL       DC    PL5'0'\nTRK_ALOC_TOTAL  DC    PL5'0'\nTRK_USED_TOTAL  DC    PL5'0'\nCYL_FREE_TOTAL  DC    PL5'0'\nTRK_FREE_TOTAL  DC    PL5'0'\n***********************************************************************\n* DEFINE A REPORT LINE                                                *\n***********************************************************************\nLINHA    DC    CL133' '\n         ORG   LINHA\n         DC    C' '\nDSNAME   DC    CL44' '\n         DC    C' '\nPRT_VOLUME DC    CL6' '\n         DC    C' '\nDTECREDT DC    CL10' '\n         ORG   DTECREDT\nDIACREDT DC    CL2' '\n         DC    C'/'\nMESCREDT DC    CL2' '\n         DC    C'/'\nANOCREDT DC    CL4' '\n         DC    C' '\nDTEREFDT DC    CL10' '\n         ORG   DTEREFDT\nDIAREFDT DC    CL2' '\n         DC    C'/'\nMESREFDT DC    CL2' '\n         DC    C'/'\nANOREFDT DC    CL4' '\n         DC    CL3' '\nPRT_CATALOG_DSN  DC    C' '\n         DC    CL3' '\nPRT_SMSFLAG_DSN  DC    C' '\nPRT_EXTENTS_DSN  DC    CL4' '\n                 DC    CL4' '\nPRT_DSORG_DSN    DC    CL2' '\n                 DC    CL1' '\nPRT_RECFM_DSN    DC    CL3' '\n                 DC    CL3' '\nPRT_LRECL_DSN    DC    CL6' '\nPRT_BLKSIZE_DSN  DC    CL6' '\n                 DC    C' '\nPRT_TRK_ALOC_DSN DC    CL6' '\nPRT_TRK_USED_DSN DC    CL6' '\n                    ORG\n                    ORG   LINHA\n                    DC    C' '\nPRT_DSN_VOLUME      DC    CL6' '\nPRT_DSNPS_VOLUME    DC    CL6' '\nPRT_DSNPO_VOLUME    DC    CL6' '\nPRT_DSNIS_VOLUME    DC    CL6' '\nPRT_DSNDA_VOLUME    DC    CL6' '\nPRT_DSNVS_VOLUME    DC    CL6' '\nPRT_DSNUN_VOLUME    DC    CL6' '\n                    DC    C' '\nPRT_TRK_ALOC_VOLUME DC    CL6' '\nPRT_TRK_USED_VOLUME DC    CL6' '\nPRT_CYL_FREE_VOLUME DC    CL6' '\nPRT_TRK_FREE_VOLUME DC    CL6' '\n                   ORG\n                   ORG   LINHA\n                   DC   C' '\nPRT_DSN_TOTAL      DC    CL8' '\nPRT_DSNPS_TOTAL    DC    CL8' '\nPRT_DSNPO_TOTAL    DC    CL8' '\nPRT_DSNIS_TOTAL    DC    CL8' '\nPRT_DSNDA_TOTAL    DC    CL8' '\nPRT_DSNVS_TOTAL    DC    CL8' '\nPRT_DSNUN_TOTAL    DC    CL8' '\nPRT_TRK_ALOC_TOTAL DC    CL10' '\nPRT_TRK_USED_TOTAL DC    CL10' '\nPRT_CYL_FREE_TOTAL DC    CL10' '\nPRT_TRK_FREE_TOTAL DC    CL10' '\n         ORG\n***********************************************************************\n* DEFINE THE TABLES FOR TREATMENT OF THE COMPARISON MASK              *\n***********************************************************************\n         DS    0D\nTABMASK  DC    256X'00'\n         ORG   TABMASK+C'*'\n         DC    C'*'\n         ORG   TABMASK+C'%'\n         DC    C'%'\n         ORG   TABMASK+C'/'\n         DC    C'/'\n         ORG\nTAB_TRT  DC    256X'00'\n         ORG   TAB_TRT+C')'\n         DC    C')'\n         ORG   TAB_TRT+C','\n         DC    C','\n         ORG\nTABHEXQ  DS    0D                    VALID HEX IN EBCDIC FORMAT     SBG\n         DC    XL16'40404040404040404040404040404040'               SBG\n         DC    XL16'40404040404040404040404040404040'               SBG\n         DC    XL16'40404040404040404040404040404040'               SBG\n         DC    XL16'40404040404040404040404040404040'               SBG\n         DC    XL16'40404040404040404040404040404040'               SBG\n         DC    XL16'40404040404040404040404040404040'               SBG\n         DC    XL16'40404040404040404040404040404040'               SBG\n         DC    XL16'40404040404040404040404040404040'               SBG\n         DC    XL16'40FAFBFCFDFEFF404040404040404040'               AIV\n         DC    XL16'40404040404040404040404040404040'               SBG\n         DC    XL16'40404040404040404040404040404040'               SBG\n         DC    XL16'40404040404040404040404040404040'               SBG\n         DC    XL16'40FAFBFCFDFEFF404040404040404040'               AIV\n         DC    XL16'40404040404040404040404040404040'               SBG\n         DC    XL16'40404040404040404040404040404040'               SBG\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'               SBG\n         DS    0D                                                   SBG\n***********************************************************************\n* WORK AREA TO EXECUTE OBTAIN SEEK TO READ FORMAT 3                   *\n***********************************************************************\nCCHHR3   DS    CL5\nVOLUME3  DS    CL6\nFMT3AREA DS    CL140\n***********************************************************************\n* RETURN AREA FOR MACRO LSPACE                                        *\n***********************************************************************\nLSPTEXT  DS    CL40\n***********************************************************************\n* DEFINE SPACE FOR DYNAMIC ALLOCATION OF VOLUMES                      *\n***********************************************************************\nALOC     DC    A(X'80000000'+ALOCRB)\nALOCRB   DC    AL1(20)\nALOCVC   DC    AL1(1)\n         DC    AL2(0)\nALOCER   DC    AL2(0)\nALOCIN   DC    AL2(0)\nALOCTP   DC    A(0)\n         DC    A(0)\n         DC    A(0)\nDDVVDS   DC    XL2'1',XL2'1',AL2(8),CL8'VVDS'\nDSNVVDS  DC    XL2'2',XL2'1',AL2(17),CL17'SYS1.VVDS.V'\nDISPVVDS DC    XL2'4',XL2'1',XL2'1',XL1'8'\nVVDSALOC CALL  ,(DDVVDS,DSNVVDS,DISPVVDS),VL,MF=L\nVVDSULOC CALL  ,(DDVVDS,DSNVVDS,UFORCE),VL,MF=L\nDDNX     DC    XL2'1',XL2'1',AL2(8),CL8'VTOC'\nDISP     DC    XL2'4',XL2'1',XL2'1',XL1'8'\nUNIT     DC    XL2'15',XL2'1',AL2(4),CL4' '\nVOLSER   DC    XL2'10',XL2'1',AL2(6),CL6' '\nVTOCALOC CALL  ,(DDNX,DISP,UNIT,VOLSER),VL,MF=L\nVTOCULOC CALL  ,(DDNX),VL,MF=L\nUFORCE   DC    XL2'7',XL2'0'\n***********************************************************************\n* MAKE SPACE FOR MAPPING MACRO WORK AREAS                             *\n***********************************************************************\nFCL$ID   DC    CL4'FCL'\nFCL$DEF  DS    (FCLHDLEN+255*FCLDSNEL)X\nFCL$SIZE EQU   *-FCL$DEF\nBFLH$DEF DS    (BFLHLN)X\nBFLE$DEF DS    (BFLE$N*BFLELN)X\nBFL$SIZE EQU   *-BFLH$DEF\nDSCB$DEF DS    (BFLE$N*DSCB$SIZ)X\nBFLE$N   EQU   11\n***********************************************************************\n* DEFINE DCB'S FOR TWO OUTPUTS                                        *\n***********************************************************************\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),                    X\n               LRECL=133,RECFM=FBA,BLKSIZE=13300\nSYSOUT   DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=(PM),                      X\n               LRECL=133,RECFM=FBA,BLKSIZE=13300\n***********************************************************************\n* DEFINE ACB AND RPL THAT WILL BE USED TO READ THE VVDS               *\n***********************************************************************\nVVDS     ACB   DDNAME=VVDS,MACRF=(ADR,SEQ,IN),EXLST=EODAD\nVVDSRPL  RPL   ACB=VVDS,AREA=VVDSADR,AREALEN=4,ARG=VVDSRBA,            X\n               OPTCD=(ADR,SEQ,LOC)\nEODAD    EXLST EODAD=VVDSEOD\n***********************************************************************\n* DCB TO READ A VTOC ENTRY, JFCB AREA, AND AREAS FOR I/O              *\n***********************************************************************\nCVPL     CVAFFILT MF=L,BRANCH=NO,FLTAREA=KEEP\nVTOC     DCB   DDNAME=VTOC,DSORG=PS,RECFM=U,KEYLEN=44,BLKSIZE=96,      X\n               MACRF=(R),EODAD=CLOSE,EXLST=RDJFLIST\nRDJFLIST DC    X'87',AL3(JFCBAREA)\nJFCBAREA DC    176X'0'\n***********************************************************************\n* DEFINE MAPPING FOR A VOLUME ENTRY                                   *\n***********************************************************************\nVOLUME_DSECT  DSECT\nVOLUME_LENGTH DS    XL1\nVOLUME_NAME   DS    CL6\n***********************************************************************\n* DEFINE MAPPING FOR A DATA SET ENTRY                                 *\n***********************************************************************\nDSNAME_DSECT  DSECT\nDSNAME_LENGTH DS    XL1\nDSNAME_NAME   DS    CL44\n***********************************************************************\n* MACROS FOR MAPPING CONTROL BLOCK WORK AREAS                         *\n***********************************************************************\n         DCBD  DSORG=PS,DEVD=DA\n         IEZDEB ,\nJFCB     DSECT\n         IEFJFCBN ,\nCVPL$MAP ICVAFPL CVPLFSA=YES\nFCL$MAP  ICVFCL\nBFL$MAP  ICVAFBFL\nDSCB$MAP DSECT\n         IECSDSL1 (1)\nDSCB$SIZ EQU   *-IECSDSL1\n         CVT   DSECT=YES\n         DSECT\n         IEFUCBOB\n         END   IEBLIST\n***********************************************************************\n* ROUTINE TO OBTAIN STORAGE AREAS TO RETAIN WORK TABLES               *\n***********************************************************************\nSTOR_OBT CSECT\n         STM   14,12,12(13)\n         LR    9,1\n         LR    12,15\n         USING STOR_OBT,12\n         LA    2,SA\n         ST    13,SA+4\n         ST    2,8(13)\n         LR    13,2\n         STORAGE OBTAIN,LENGTH=72*1024\n         ST    1,0(9)\n         STORAGE OBTAIN,LENGTH=7*4097\n         ST    1,4(9)\n         STORAGE OBTAIN,LENGTH=45*255\n         ST    1,8(9)\n         L     13,SA+4\n         LM    14,12,12(13)\n         BR    14\nSA       DS    18F\n         END   STOR_OBT\n***********************************************************************\n* SUBROUTINE TO READ SYSIN                                            *\n***********************************************************************\nLE_SYSIN CSECT\n         STM   14,12,12(13)\n         LR    9,1\n         LR    12,15\n         USING LE_SYSIN,12\n         LA    2,SA\n         ST    13,SA+4\n         ST    2,8(13)\n         LR    13,2\n         OPEN  (SYSIN,(INPUT))\n***********************************************************************\n* READ SYSIN KEYWORDS INTO A TEMPORARY AREA                           *\n***********************************************************************\nGETIN    EQU   *\n         GET   SYSIN,SPACE\n         LA    2,72\n         LA    1,SPACE\nSYSIN_GET EQU *\n         CLI   0(1),C' '\n         BNE   START_PARM\n         LA    1,1(1)\n         BCT   2,SYSIN_GET\n         B     GETIN\nSTART_PARM EQU *\n         LR    3,1\n         BCTR  2,0\n         EX    2,TRT_SYSIN\n         BZ    LINHA_CHEIA\n         BCTR  1,0\nLINHA_CHEIA EQU *\n         SR    1,3\n         EX    1,MVC_LINHA\n         AR    9,1\n         LA    9,1(9)\n         B     GETIN\nMVC_LINHA MVC  0(0,9),0(3)\nTRT_SYSIN TRT  0(0,3),TAB_TRT\nENDIN    EQU   *\n         CLOSE (SYSIN)\n         MVC   0(4,9),FF\n         L     13,SA+4\n         LM    14,12,12(13)\n         BR    14\n         LTORG\nSA       DS    18F\nFF       DC    4X'FF'\nSPACE    DC    CL72' '\nTAB_TRT  DC    256X'00'\n         ORG   TAB_TRT+C' '\n         DC    C' '\n         ORG\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GM),EODAD=ENDIN\n         END   LE_SYSIN\n*********\nFUNC01   CSECT                                                      AIV\n         STM   14,12,12(13)                                         AIV\n         LR    7,1                REG7 - REFDAT ADDRESS             AIV\n         LR    8,2                REG8 - REFDAT ADDRESS             AIV\n         LR    12,15              REG12 - BASE REGISTER             AIV\n         USING FUNC01,12                                            AIV\n         LA    2,SA                                                 AIV\n         ST    13,SA+4                                              AIV\n         ST    2,8(13)                                              AIV\n         LR    13,2                                                 AIV\n*                                                                   AIV\n* ROUTINE                                                           AIV\n*                                                                   AIV\n         ST    3,SFLAG            STORE FLAG2 FOR USE IN THIS FUNC  AIV\n         TM    SFLAG+3,X'03'      FLAG2 = 1 OR 2                    AIV\n         BM    DODATE                                               AIV\n         TM    SFLAG+3,X'04'      FLAG2 = 4                         AIV\n         BO    DOBLKZ                                               AIV\nDODATE   LA    3,2                REG3 = 2 FOR CYCLE                AIV\nDO2      MVC   0(7,7),0(9)        INPUT PARAM - INTO REFDAT         AIV\n         OC    0(7,7),=X'F0F0F0F0F0F0F0'    MORE NUMERIC            AIV\n         LA    9,8(,9)            TO NEXT CMD                       AIV\n         CLC   0(7,7),=X'F0F0F0F0F0F0F0' IS INPUT ZERO?             AIV\n         BE    ZIN1                                                 AIV\n         PACK  PACKYR(3),0(4,7)                                     AIV\n         SP    PACKYR,=P'1900'                                      AIV\n         XC    DOUBLE,DOUBLE                                        AIV\n         MVC   DOUBLE+5(3),PACKYR                                   AIV\n         XR    1,1                                                  AIV\n         CVB   1,DOUBLE                                             AIV\n         STC   1,0(,8)                                              AIV\n         PACK  PACKDAY(2),4(3,7)                                    AIV\n         XC    DOUBLE,DOUBLE                                        AIV\n         MVC   DOUBLE+6(2),PACKDAY                                  AIV\n         XR    1,1                                                  AIV\n         CVB   1,DOUBLE                                             AIV\n         STCM  1,3,1(8)                                             AIV\nZIN1     LA    8,3(8)             REG8 = REG8 + 3 (FOR CREDAT2)     AIV\n         LA    7,7(7)             REG7 = REG7 + 7 (CREDAT2)         AIV\n         TM    SFLAG+3,X'02'      FLAG2 = 02 (CRE PARAM)            AIV\n         BZ    EXIT               IF NOT CRE - EXIT                 AIV\n         BCT   3,DO2              ONE MORE FOR CRE MAX              AIV\n         B     EXIT                                                 AIV\nDOBLKZ   LA    3,2                REG3 = 2 (FOR CYCLE)              AIV\nBLKZ2    MVC   0(5,7),0(9)        PARAM - INTO BLKIN1               AIV\n         OC    0(5,7),=X'F0F0F0F0F0'    MORE NUMERIC                AIV\n         LA    9,6(,9)            TO NEXT CMD OR BLKSIZE MAX        AIV\n         CLC   0(5,7),=X'F0F0F0F0F0'    IS INPUT ZERO?              AIV\n         BE    ZIN2                                                 AIV\n         PACK  PACKYR(3),0(5,7)                                     AIV\n         XC    DOUBLE,DOUBLE                                        AIV\n         MVC   DOUBLE+5(3),PACKYR                                   AIV\n         XR    1,1                                                  AIV\n         CVB   1,DOUBLE                                             AIV\n         ST    1,0(,8)                                              AIV\nZIN2     LA    8,4(8)             REG8 = REG8 + 3 (BLKSIZ2)         AIV\n         LA    7,5(7)             REG7 = REG7 + 5 (BLKIN2)          AIV\n         BCT   3,BLKZ2                                              AIV\n         B     EXIT                                                 AIV\n*                                                                   AIV\n* EXIT                                                              AIV\n*                                                                   AIV\nEXIT     L     13,SA+4                                              AIV\n         ST    9,56(13)           REMEMBER REG9 IN PREV SAVE AREA   AIV\n         LM    14,12,12(13)                                         AIV\n         BR    14                                                   AIV\n*                                                                   AIV\n* STORAGE DEFINITION FOR FUNC01                                     AIV\n*                                                                   AIV\nSA       DS    18F                                                  AIV\nREG9     DS    F                  SAVE DS FOR REG 9                 AIV\nPACKYR   DC    PL3'0'                                               AIV\nPACKDAY  DC    PL2'0'                                               AIV\nDOUBLE   DC    D'0'                                                 AIV\nSFLAG    DS    F\n         END   FUNC01                                               AIV\n*********\n***********************************************************************\n* ROUTINE TO DEAL WITH THE STORAGE GROUP                              *\n***********************************************************************\nSTGFIND  CSECT\nSTGFIND  AMODE 31\nSTGFIND  RMODE 24\n         SAVE (14,12)\n         LR   11,15\n         USING STGFIND,11\n         ST   13,SA+4\n         LA   2,SA\n         ST   2,8(13)\n         LR   13,2\n         LM   4,6,0(1)\n         ST   1,PARM_ADDR\n         MVC  VOLUME_ADDR,0(4)\n         MVC  VOLUME_CNT,0(5)\n         ST   6,SYSIN_ADDR\n         LR   10,9\n***********************************************************************\n* GET THE SIZE AND THE NAME OF THE DESIRED STORAGE GROUP              *\n***********************************************************************\nCLI_STORGRP EQU *\n         BLANK STORGRP_NAME\n         TRT   0(9,10),TAB_TRT\n         BZ    RETURN\n         STC   2,BYTE\n         LR    3,1\n         L     6,SYSIN_ADDR\n         ST    3,0(6)\n         SR    1,10\n         STH   1,STORGRP_LENGTH\n         BCTR  1,0\n         EX    1,MVC_STORGRP\n***********************************************************************\n* INITIALIZE THE SSOB AND SSIB FOR A CALL TO THE SMS SUBSYSTEM        *\n***********************************************************************\n         L     15,=A(INIT_SSSA)\n         BALR  14,15\n         USING IEFSSSA,5\n         MVI   SSSA1TYP,SSSA1SGV\n         MVC   SSSA1NML,STORGRP_LENGTH\n         LH    15,STORGRP_LENGTH\n         BCTR  15,0\n         EX    15,MVC_SSA\n         MVI   SSSA1CNT+3,1\n         XC    SSSA1LEN,SSSA1LEN\n         XC    SSSA1PTR,SSSA1PTR\n         LA    1,SMS_SSOB\n         IEFSSREQ\n         LTR   15,15\n         BNZ   ERRO_SMS\n         CLC   SSSARSN,=F'5002'\n         BE    RETURN\n         L     6,SSSA1PTR\n         USING VLD,6\n***********************************************************************\n* INITIALIZE A LOOP TO OBTAIN THE SPECIFIC VOLUME NAMES               *\n***********************************************************************\n         L     7,VLDPLEN\n         L     9,VLDPCNT\n         LA    5,VLDEF\n         L     8,VOLUME_ADDR\n         USING VOLUME_DSECT,8\n         LH    15,VOLUME_CNT\n         MH    15,=H'7'\n         LA    8,0(15,8)\nLOOP_ADDVOL EQU *\n         MVI   VOLUME_LENGTH,X'05'\n         MVC   VOLUME_NAME,2(5)\n         LA    8,7(8)\n         AR    5,7\n         BCT   9,LOOP_ADDVOL\n         LH    15,VOLUME_CNT\n         L     9,VLDPCNT\n         AR    15,9\n         STH   15,VOLUME_CNT\n         CLI   BYTE,C')'\n         BE    RETURN\n         LA    10,1(3)\n         B     CLI_STORGRP\n***********************************************************************\n* HANDLE AN ERROR IN SMS                                              *\n***********************************************************************\nERRO_SMS EQU   *\n         MVC   WTOE+50(8),STORGRP_NAME\nWTOE     WTO   'IEB0987E - ACCESS ERROR ON SMS TO STORGRP(XXXXXXXX)'\n         LA    15,8\n         B     RETURNE\n***********************************************************************\n* RETURN TO THE MAIN PROGRAM                                          *\n***********************************************************************\nRETURN   EQU   *\n         XR    15,15\nRETURNE  EQU   *\n         L     1,PARM_ADDR\n         LM    4,6,0(1)\n         MVC   0(2,5),VOLUME_CNT\n         L     13,SA+4\n         L     14,12(13)\n         LM    0,12,20(13)\n         BSM   0,14\nMVC_SSA     MVC SSSA1NAM(0),STORGRP_NAME\nMVC_STORGRP MVC STORGRP_NAME(0),0(10)\n***********************************************************************\n* ROUTINE FOR INITIALIZING THE SSSA FOR A CALL TO THE SMS SSI         *\n***********************************************************************\nINIT_SSSA EQU  *\n         STM   14,15,SALVA14\n         L     4,SMS_SSOB\n         USING SSOB,4\n         XC    SSOB_WRK,SSOB_WRK\n         MVI   SSOBLEN+1,SSOBHSIZ\n         MVC   SSOBID,=C'SSOB'\n         MVI   SSOBFUNC+1,SSOBSSMS\n         L     1,CVTPTR\n         L     1,CVTJESCT-CVTMAP(1)\n         L     1,JESCTEXT-JESCT(1)\n         MVC   SSOBSSIB,JESSMSIB-JESPEXT(1)\n         LA    5,SSSA_WRK\n         ST    5,SSOBINDV\n         LA    0,SSSALN+SSSA1LN\n         STH   0,SSSALEN\n         MVC   SSSAID,=C'SSSA'\n         MVI   SSSAVER+1,SSOBSSVR\n         MVI   SSSASFN+1,SSSAACTV\n         MVI   SSSAIFLG,SSSANAUT\n         MVI   SSSA1CNT+3,1\n         LM    14,15,SALVA14\n         BR    14\n         LTORG\n***********************************************************************\n* DEFINE STORAGE AREAS NECESSARY FOR THE PROGRAM                      *\n***********************************************************************\nSA           DS 18F\nSALVA14      DS 2F\nPARM_ADDR    DS F\nSYSIN_ADDR   DS F\nVOLUME_ADDR  DS F\nVOLUME_CNT   DS H\nBYTE         DS X\nSTORGRP_NAME DS CL8\nSTORGRP_LENGTH DS H\nTAB_TRT  DC    256X'00'\n         ORG   TAB_TRT+C')'\n         DC    C')'\n         ORG   TAB_TRT+C','\n         DC    C','\n         ORG\n***********************************************************************\n* RETURN AREA FOR SMS NEEDED BY AN SMS_SSOB                           *\n***********************************************************************\nSMS_SSOB DC    A(SSOB_SMS+X'80000000')\nSSOB_SMS DS    0F\nSSOB_WRK DC    (SSOBHSIZ)X'00'\nSSIB_SMS DS    0F\n         DC    (SSIBSIZE)X'00'\nSSSA_WRK DS    XL(SSSALN+SSSA1LN)\n***********************************************************************\n* DEFINE MAPPING FOR A VOLUME IN AN ARRAY                             *\n***********************************************************************\nVOLUME_DSECT  DSECT\nVOLUME_LENGTH DS    XL1\nVOLUME_NAME   DS    CL6\n         IEFSSSA                       SSOB EXTENSION FOR SMS\n         IGDVLD\n         IEFSSOBH\n         IEFJSSIB\n         IEFJESCT\n         CVT  DSECT=YES\n         END  STGFIND\n***********************************************************************\n* CONTROL SECTION TO DEFINE MESSAGES                                  *\n***********************************************************************\nPUTMSG   CSECT\nPUTMSG   AMODE 31\nPUTMSG   RMODE 24\nIEB001E  DC    CL133' IEB001E - FOUND INVALID XXXXX KEYWORD'\nIEB002E  DC    CL133' IEB002E - DYNAMIC ALLOCATION ERROR - XXXXX VOLUMEX\n                XXXXXX'\nIEB003W  DC    CL133' IEB003W - NO VOLUMES MATCH SELECT CRITERIA'\nIEB004E  DC    CL133' IEB004E - ERROR ON VTOC READ ACCESS FOR PROCESSEDX\n               VOLUME'\nIEB005E  DC    CL133' IEB005E - MODEL NOT FOUND FOR UCB VOLUME'\nIEB006I  DC    CL133' IEB006I - PROCESS COMPLETED, MAXIMUM RETURN CODE X\n               WAS: XXX'\nIEB007E  DC    CL133' IEB007E - BLANK CONTROL CARD FOUND IS INVALID'\nIEB008I  DC    CL133' IEB008I - VOLUME XXXXXX SUCCESSFULLY PROCESSED'\nIEB009I  DC    CL133' IEB009I - VOLUME XXXXXX DYNAMIC ALLOCATED ON UCB X\n               ADDRESS    (XXXX)'\nIEB010E  DC    CL133' IEB010E - MOUNT ATTIBUTED  FOR VOL  XXXXXX CAN NOX\n               T BE IDENTIFIED'\nIEB110E  DC    CL133' IEB110E - VVDS XXX ERROR ON ACCESS FOR VOLUME XXXX\n               XXX'\nIEB111E  DC    CL133' IEB111E - FOUND A VSAM DATA SET ON VOLUME -  XXXXX\n               XX BUT VVDS CAN NOT BE PROCESSED'\nCABECA1  DC    CL133'1DASD SPACE REPORT'\nCABECA2  DC    CL133' DATE - DD/MM/AAAA TIME - HH.MM.SS  PROGRAM IEBLISX\n               T                                                       X\n                            PAG -'\nCABECA3  DC    CL133' --------------- DATA SET NAME -------------- VOLUX\n               ME -CRE DATE- -REF DATE- CAT SMS EXT DSORG RECFM  LRECL X\n               BLKSZ TRACKS  USED'\nCABECA4  DC    CL133' TOTALS FOR VOLUME  XXXXXX TYPE - XXXX UNIT XXXX'\nCABECA5  DC    CL133'  -DSN- --PS- --PO- --IS- --DA- --VS- --UN- TRACKSX\n                USED- FREE--SPACE'\nCABECA6  DC    CL133' TOTAL DASD SPACE COLLECTED'\nCABECA7  DC    CL133' SCAN OF   XXXXXX VOLUMES AND PROCESSED XXXXXX VOLX\n               UMES'\nCABECA8  DC    CL133' '\nCABECA9  DC    CL133' DATA SETS RESUME'\nCABECA10 DC    CL133'  --DSN-- ---PS-- ---PO-- ---IS-- ---DA-- ---VS-- X\n               ---UN-- TRACKS A- TRACKS U- -FREE-SPACE-CYL/TRK'\nIEB011E  DC    CL133' IEB011E - INITIAL SCAN ERROR TO VOLUMES TO PROCESX\n               S'\nIEB012E  DC    CL133' IEB012E - ERROR DURING ALL FREE SPACE OBTAIN ON  X\n               VOLUME XXXXXX'\nIEB013E  DC    CL133' IEB013E - VTOC OF VOLUME XXXXXX NOT INDEXED'\nIEB014I  DC    CL133' IEB014I - A TOTAL OF  XXXXXX DATA SET ON VOLUME XX\n               XXXXX'\nIEB025E  DC    CL133' IEB025E - VVDS READ IS NOT POSSIBLE BECAUSE IEBLIX\n               ST NOT AUTHORIZED'\nIEB026E  DC    CL133' IEB026I - IEBLIST IS RUNNING AUTHORIZED'\nIEB010I  DC    CL133' IEB010I - VVDS ON VOLUME XXXXXX CAN NOT BE ALLOCAX\n               TED'\nIEB112E  DC    CL133' IEB112E - ERRON ON SEEK TO READ A FORMAT 3 TO VOLX\n               UME XXXXXX'\nIEB113E  DC    CL133' IEB113E - ERROR ON ACCES TO FORMAT 3 ON VOLUME XXX\n               XXXX'\nIEB114E  DC    CL133' IEB114E - VTOC DD STATEMENT MISSING FOR VOLUME XXX\n               XXXX'\nIEB115E  DC    CL133' IEB115E - ERROR FROM CVAFXXX - R15=YYY CVSTAT=ZZZX\n               '\n         END   PUTMSG\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEBLISTO": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x017\\x00\\x00\\x01\\x01\\x04o\\x01\\x01\\x07O\\x17\\t\\x07\\xa4\\x07\\x1e\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.55", "flags": 0, "createdate": "2001-02-15T00:00:00", "modifydate": "2001-03-15T17:09:00", "lines": 1956, "newlines": 1822, "modlines": 0, "user": "WSBG"}, "text": "***********************************************************************\n* IEBLIST - AUTHOR:  RICARDO J. PARANHOS                              *\n***********************************************************************\nIEBLIST  CSECT\n         SAVE  (14,12)\n         LR    10,15\n         USING IEBLIST,10,11,12\n         LA    11,1\n         LA    11,4095(10,11)\n         LA    12,1\n         LA    12,4095(11,12)\n         LA    2,SA\n         ST    13,SA+4\n         ST    2,8(13)\n         LR    13,2\n***********************************************************************\n* GET SYSTEM DATE AND TIME                                            *\n***********************************************************************\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=DDMMYYYY\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n***********************************************************************\n* OPEN DATA SETS                                                      *\n***********************************************************************\n         OPEN  (SYSPRINT,(OUTPUT),SYSOUT,(OUTPUT))\n***********************************************************************\n* CHECK IF IS A AUTHORIZED STEP                                       *\n***********************************************************************\n         TESTAUTH FCTN=1\n         LTR   15,15\n         BZ    OK_AUTH\n***********************************************************************\n* PRINT A MESSAGE FOR WARNING OF NOT FULLY FUNCTIONAL                 *\n***********************************************************************\n         OI    FLAG_AUTH,X'FF'\n         LH    15,IEB025E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSOUT,SPACE\n         B     GET_STORAGE\n***********************************************************************\n* PRINT A INFORMATIONAL MESSAGE FOR PROCESS AUTHORIZED                *\n***********************************************************************\nOK_AUTH  EQU   *\n         LH    15,IEB026I\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSOUT,SPACE\n***********************************************************************\n* OBTAIN STORAGE FOR PROCESSING                                       *\n***********************************************************************\nGET_STORAGE EQU *\n         LA    1,SYSIN_ADDR\n         L     15,=V(STOR_OBT)\n         BALR  14,15\n         L     1,SYSIN_ADDR\n         L     15,=V(LE_SYSIN)\n         BALR  14,15\n***********************************************************************\n* FIND FOR A VALID KEYWORD                                            *\n***********************************************************************\n         L     9,SYSIN_ADDR\nCLI      EQU   *\n         CLC   0(4,9),=4XL1'FF'\n         BE    ENDPARM\nVERPARM  EQU   *\n         CLC   0(4,9),=CL4'VOL('\n         BE    #VOL\n         CLC   0(4,9),=CL4'ADD('\n         BE    #ADD\n         CLC   0(4,9),=CL4'REF('\n         BE    #REF\n         CLC   0(7,9),=CL7'CATALOG'\n         BE    #CAT\n         CLC   0(4,9),=CL4'DSN('\n         BE    #DSN\n         CLC   0(3,9),=CL3'SG('\n         BE    #SG\n         CLC   0(5,9),=CL5'NOLIST'\n         BE    #NOLIST\n         CLI   0(9),C','\n         BNE   INVALID_COMMAND\n         LA    9,1(9)\n         B     CLI\n***********************************************************************\n* SEND MESSAGE FOR INVALID KEYWORD                                    *\n***********************************************************************\nINVALID_COMMAND EQU *\n         LH    15,IEB001E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+25(5),0(9)\n         PUT   SYSOUT,SPACE\n         B     RETURN8\n***********************************************************************\n* ONLY PICK DATASETS REFERENCED BEFORE A CERTAIN 7 DIGIT DATE YYYYDDD *\n***********************************************************************\n#REF     EQU   *\n         OI    FLAG2,X'01'\n         LA    9,4(,9)\n         MVC   INDATE(7),0(9)\n         OC    INDATE(7),=X'F0F0F0F0F0F0F0'    MORE NUMERIC\n         LA    9,8(,9)\n         PACK  PACKYR(3),INYEAR\n         SP    PACKYR,=P'1900'\n         XC    DOUBLE,DOUBLE\n         MVC   DOUBLE+5(3),PACKYR\n         XR    1,1\n         CVB   1,DOUBLE\n         STC   1,OUTDATE\n         PACK  PACKDAY(2),INDAY\n         XC    DOUBLE,DOUBLE\n         MVC   DOUBLE+6(2),PACKDAY\n         XR    1,1\n         CVB   1,DOUBLE\n         STCM  1,3,OUTDATE+1\n         B     CLI\n***********************************************************************\n* PROCESS  A SELECT FOR STORAGE GROUP                                 *\n***********************************************************************\n#SG      EQU   *\n         OI    FLAG,X'04'\n         LA    9,3(9)\n         LA    1,CALL_LIST\n         OI    STGADDR,X'80'\n         L     15,STGADDR\n         BASSM 14,15\n         L     9,PARM_ADDR\n         LA    9,1(9)\n         LTR   15,15\n         BNZ   INVALID_COMMAND\n         B     CLI\n***********************************************************************\n* PROCESS  OPTION CATALOG SELECTED                                    *\n***********************************************************************\n#CAT     EQU   *\n         OI    FLAG_CATALOG,X'FF'\n         LA    9,7(9)\n         B     CLI\n***********************************************************************\n* PROCESS  A VOLUME ADDRESS SELECTED                                  *\n***********************************************************************\n#ADD     EQU   *\n         OI    FLAG,X'08'\n         LA    9,4(9)\n         CLI   0(9),C')'\n         BE    ENDADD\n         MVC   LOW_ADDR,0(9)\n         LA    9,4(9)\n         CLI   0(9),C'-'\n         BE    *+14\n         MVC   HI_ADDR,LOW_ADDR\n         B     #ADD\n         LA    9,1(9)\n         MVC   HI_ADDR,0(9)\n         LA    9,4(9)\n         B     #ADD\nENDADD   EQU   *\n         MVC   TABMASK+193(6),TAB_ALFA\n         MVC   TABMASK+240(10),TAB_NUM\n         TR    HI_ADDR,0(1)\n         TR    LOW_ADDR,0(1)\n         LA    9,1(9)\n         MVC   TABMASK+193(6),=6X'00'\n         MVC   TABMASK+240(10),=10X'00'\n         B     CLI\n***********************************************************************\n* SET A FLAG TO NO PTINT OF DATA SET NAME ON VOLUME                   *\n***********************************************************************\n#NOLIST  EQU   *\n         OI    FLAG,X'01'\n         LA    9,6(9)\n         B     CLI\n***********************************************************************\n* PROCESS  A VOLUME NAME SELECTED                                     *\n***********************************************************************\n#VOL     EQU   *\n         OI    FLAG,X'04'\n         LA    9,4(9)\n         L     8,VOLUME_ADDR\n         USING VOLUME_DSECT,8\n         LH    15,VOLUME_CNT\n         MH    15,=H'7'\n         LA    8,0(15,8)\nCLIVOL   EQU   *\n         CLI   0(9),C'-'\n         BE    VOLUME_EXCLUDE\n         BLANK VOLUME_NAME\n         TRT   0(7,9),TAB_TRT\n         BZ    INVALID_COMMAND\n         LR    3,1\n         SR    1,9\n         BCTR  1,0\n         EX    1,MVC_VOLUME\n         STC   1,VOLUME_LENGTH\n         OC    VOLUME_LENGTH,MASK_EXCLUDE\n         NI    MASK_EXCLUDE,X'00'\n         LH    15,VOLUME_CNT\n         LA    15,1(15)\n         STH   15,VOLUME_CNT\n         LA    8,7(8)\n         LA    9,1(3)\n         STC   2,BYTE\n         CLI   BYTE,C')'\n         BNE   CLIVOL\n         B     CLI\nVOLUME_EXCLUDE EQU *\n         LA    9,1(9)\n         OI    MASK_EXCLUDE,X'F0'\n         B     CLIVOL\nMVC_VOLUME MVC VOLUME_NAME(0),0(9)\n***********************************************************************\n* PROCEDURE TO VALIDATE OF DATA SET NAME                              *\n***********************************************************************\n#DSN     EQU   *\n         OI    FLAG,X'02'\n         LA    9,4(9)\n         L     8,DSNAME_ADDR\n         USING DSNAME_DSECT,8\nCLIDSNE  EQU   *\n         BLANK DSNAME_NAME\n         TRT   0(45,9),TAB_TRT\n         BZ    INVALID_COMMAND\n         LR    3,1\n         SR    1,9\n         STC   1,DSNAME_LENGTH\n         BCTR  1,0\n         EX    1,MVC_DSNAME\n         STC   2,BYTE\n         EX    1,TRT_TABMASK\n         BZ    FULL_NAME\n         OI    FLAG,X'10'\nFULL_NAME EQU *\n         LH    15,DSNAME_CNT\n         LA    15,1(15)\n         STH   15,DSNAME_CNT\n         LA    8,45(8)\n         LA    9,1(3)\n         CLI   BYTE,C')'\n         BNE   CLIDSNE\n         B     CLI\nMVC_DSNAME MVC DSNAME_NAME(0),0(9)\nTRT_TABMASK TRT DSNAME_NAME(0),TABMASK\n***********************************************************************\n* SEARCH ON UCB FOR A VOLUME                                          *\n***********************************************************************\nENDPARM  EQU   *\n         MVC   TABMASK+193(6),TAB_ALFA\n         MVC   TABMASK+240(10),TAB_NUM\n         XC    AREA,AREA\nPESQUCB  EQU   *\n         UCBSCAN COPY,                                                 X\n               WORKAREA=AREA,                                          X\n               UCBAREA=UCBAREA,                                        X\n               DEVCLASS=DASD,                                          X\n               RANGE=ALL,                                              X\n               DYNAMIC=YES\n         LTR   15,15\n         BNZ   ENDVOLS\n         LA    8,UCBAREA\n         USING UCBOB,8\n***********************************************************************\n* TEST IF THE VOLUME IS ONLINE                                        *\n***********************************************************************\n         TM    UCBSTAT,X'80'\n         BNO   PESQUCB\n***********************************************************************\n* TEST IF WAS SELECTED A VOLUME NAME TO PROCESSING                    *\n***********************************************************************\n         TM    FLAG,X'04'\n         BNO   NEXT\n***********************************************************************\n* LOOP TO COMPARE A VOLUME                                            *\n***********************************************************************\n         LH    15,VOLUME_CNT\n         L     1,VOLUME_ADDR\nCLC_VOLUME EQU *\n         XR    2,2\n         TM    0(1),X'F0'\n         BO    CLC_EXCLUDE\nCLC_INCLUDE EQU *\n         ICM   2,1,0(1)\n         EX    2,CLCVOL\n         BE    NEXT\n         LA    1,7(1)\n         BCT   15,CLC_VOLUME\n         B     PESQUCB\nCLC_EXCLUDE EQU *\n         MVC   BYTE,0(1)\n         NI    BYTE,X'0F'\n         ICM   2,1,BYTE\n         EX    2,CLCVOL\n         BE    PESQUCB\n         LA    1,7(1)\n         BCT   15,CLC_VOLUME\n***********************************************************************\n* VALIDATE MVS UCBTYPES OF DASD VOLUMES                               *\n***********************************************************************\nNEXT     EQU   *\n         TM    UCBTYP+3,X'04'\n         BNO   *+10\n         MVC   UCBUNIT,=CL4'9345'\n         TM    UCBTYP+3,X'0E'\n         BNO   *+10\n         MVC   UCBUNIT,=CL4'3380'\n         TM    UCBTYP+3,X'0F'\n         BNO   *+10\n         MVC   UCBUNIT,=CL4'3390'\n***********************************************************************\n* GET A VOLUME ADDRESS WITH 4 DIGIT AND COMPARE                       *\n***********************************************************************\n         ST    8,SALVA8\n         UCBDEVN DEVN=FULL,UCBPTR=SALVA8\n         MVC   ADDRUCB,FULL\n         TM    FLAG,X'08'\n         BNO   ALLOC\n         TR    FULL,TABMASK\n         CLC   FULL,LOW_ADDR\n         BL    PESQUCB\n         CLC   FULL,HI_ADDR\n         BH    PESQUCB\n***********************************************************************\n* DYNAMIC ALLOCATE THE VOLUME TO PROCESS                              *\n***********************************************************************\nALLOC    EQU   *\n         MVC   VOLUCB,UCBVOLI\n         MVC   DSNVVDS+17(6),UCBVOLI\n         MVC   VOLSER+6(6),UCBVOLI\n         MVC   UNIT+6(4),UCBUNIT\n         LA    1,ALOC\n         MVC   ALOCTP,=A(VTOCALOC)\n         MVC   ALOCVC,=AL1(1)\n         DYNALLOC\n         LTR   15,15\n         BZ    ALOCOK\n         LH    15,IEB002E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         XR    15,15\n         ICM   15,B'0011',ALOCER\n         CVD   15,DOUBLE\n         UNPK  SPACE+38(5),DOUBLE+5(3)\n         OI    SPACE+42,X'F0'\n         MVC   SPACE+51(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     PESQUCB\n***********************************************************************\n* DYNAMICALLY ALLOCATE THE VVDS OF THE VOLUME TO BE PROCESSED         *\n***********************************************************************\nALOCOK   EQU   *\n         LH    15,IEB009I\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+18(6),VOLUCB\n         MVC   SPACE+62(4),ADDRUCB\n         PUT   SYSOUT,SPACE\n***********************************************************************\n* TEST IF THE PROGRAM IS AUTHORIZED TO EXECUTE VVDS ALLOCATE          *\n***********************************************************************\n         TM    FLAG_AUTH,X'FF'\n         BNO   ALLOC_VVDS\n         OI    FLAG,X'20'\n         B     ALOCOK1\n***********************************************************************\n* ALLOCATE VVDS                                                       *\n***********************************************************************\nALLOC_VVDS EQU *\n         LA    1,ALOC\n         MVC   ALOCTP,=A(VVDSALOC)\n         DYNALLOC\n         LTR   15,15\n         BZ    ALOCOK1\n         OI    FLAG,X'20'\n         CLC   ALOCER,=XL2'1708'\n         BE    ALOCOK1\n         LH    15,IEB010I\n         A     15,MSGADDR\n         MVC   SPACE,0(15)\n         MVC   SPACE+26(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     PESQUCB\nCLCVOL   CLC   1(0,1),UCBVOLI\n         DROP  8\n***********************************************************************\n*              OPEN THE VTOC                                          *\n***********************************************************************\nALOCOK1  EQU   *\n         RDJFCB VTOC\n         USING INFMJFCB,2\n         LA    2,JFCBAREA\n         LTR   15,15\n         BZ    DDOK\n         LH    15,IEB114E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+48(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     RETURN16                RETURN TO OS\nDDOK     EQU   *\n         MVI   JFCBDSNM,X'04'          CREATE DSNAME\n         MVC   JFCBDSNM+1(43),JFCBDSNM    - 44X'04'\n         OI    JFCBTSDM,JFCNWRIT       DO NOT WRITE JFCB DURING OPEN\n         DROP  2\n         OPEN  (VTOC,(INPUT)),TYPE=J\n         TM    FLAG,X'20'\n         BO    GETDEB\n         OPEN  (VVDS,(INPUT))\n         LTR   15,15\n         BZ    GETDEB\n         OI    FLAG,X'20'\n***********************************************************************\n*              ENQUEUE ON VTOC                                        *\n***********************************************************************\nGETDEB   EQU   *\n         L     1,DCBDEBAD-IHADCB+VTOC              GET A(DEB)\n         ST    1,DEBADDR              SAVE DEB ADDRESS\n         LA    1,DEBUCBAD-DEBDASD+DEBBASND-DEBBASIC(1) GET A(UCB)\n         L     1,0(1)                LOAD UCB ADDRESS\n         ST    1,UCBADDR\n***********************************************************************\n* OBTAIN AVAILABLE SPACE ON THE VOLUME BEING PROCESSED                *\n***********************************************************************\nLSPACE   EQU   *\n         LSPACE UCB=UCBADDR,DATA=LSPTEXT\n         LTR   15,15\n         BNZ   ERROLSPC\n         LA    1,LSPTEXT\n         XR    15,15\n         ICM   15,15,8(1)\n         CVD   15,DOUBLE\n         ZAP   CYL_FREE_VOLUME,DOUBLE\n         XR    15,15\n         ICM   15,15,12(1)\n         CVD   15,DOUBLE\n         ZAP   TRK_FREE_VOLUME,DOUBLE\n         AP    TRK_FREE_TOTAL,TRK_FREE_VOLUME\n         AP    CYL_FREE_TOTAL,CYL_FREE_VOLUME\n         B     IXTEST\nERROLSPC EQU   *\n         LH    15,IEB012E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSOUT,SPACE\n         CLOSE VTOC\n         CLOSE VVDS\n         B     UNALLOC\n***********************************************************************\n* VERIFY WHETHER THE VTOC OF THE VOLUME IS INDEXED OR NOT             *\n***********************************************************************\nIXTEST   EQU   *\n         L     1,UCBADDR\n         CVAFTST UCB=(1)\n         CH    15,=H'8'\n         BE    IXVTOC\n         LH    15,IEB013E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+26(6),VOLUCB\n         PUT   SYSOUT,SPACE\n***********************************************************************\n* INITIALIZE THE BUFFER LIST HEADER AND ELEMENTS                      *\n***********************************************************************\nIXVTOC   EQU   *\n         LA    4,CVPL\n         USING CVPL$MAP,4\n         MVC   CVDEB,DEBADDR\n         XC    BFLH$DEF(BFL$SIZE),BFLH$DEF\n         LA    1,BFLH$DEF\n         USING BFL$MAP,1\n         MVI   BFLHNOE,BFLE$N\n         OI    BFLHFL,BFLHDSCB         CCHHR OF DSCB TO BE USED\n         LA    2,BFLH$DEF+BFLHLN\n         USING BFLE,2\n         LA    3,DSCB$DEF\n         LA    5,BFLE$N\nBFLE$INT EQU   *\n         OI    BFLEFL,BFLECHR\n         MVI   BFLELTH,DSCB$SIZ\n         ST    3,BFLEBUF\n         LA    2,BFLELN(2)\n         LA    3,DSCB$SIZ(3)\n         BCT   5,BFLE$INT\n         DROP  1,2\n***********************************************************************\n* INITIALIZE THE FILTERING FIELD FOR SEARCHING THE VTOC               *\n***********************************************************************\n         XC    FCL$DEF(FCLHDLEN),FCL$DEF\n         LA    1,FCL$DEF\n         USING FCL$MAP,1\n         MVC   FCLID,FCL$ID\n         LA    2,FCLHDEND\n         USING FCLDSN,2\n         TM    FLAG,X'02'\n         BNO   ALL_DSETS\n         TM    FLAG,X'10'\n         BO    MASK_DSETS\n         L     8,DSNAME_ADDR\n         LH    15,DSNAME_CNT\n         MVC   FCLCOUNT,DSNAME_CNT\n         OI    FCL1FLAG,FCL1LIST\nDSNAME_LOOP EQU *\n         XC    FCLDSN(FCLDSNEL),FCLDSN\n         MVC   FCLDSNLG,0(8)\n         LA    3,1(8)\n         ST    3,FCLDSNA\n         LA    8,45(8)\n         LA    2,FCLDSNEL(2)\n         BCT   15,DSNAME_LOOP\n         B     INITVTIX\nMASK_DSETS EQU *\n         L     8,DSNAME_ADDR\n         LH    3,DSNCOUNT\n         MH    3,=H'45'\n         LA    8,0(3,8)\n         MVC   FCLCOUNT,=H'1'\n         MVC   FCLDSNLG,0(8)\n         LA    3,1(8)\n         ST    3,FCLDSNA\n         B     INITVTIX\nALL_DSETS EQU  *\n         MVC   FCLCOUNT,=H'1'\n         MVI   FCLDSNLG,X'02'\n         LA    3,=C'**'\n         ST    3,FCLDSNA\n         DROP  1,2\n***********************************************************************\n* READ THE VTOC FOR FIRST TIME                                        *\n***********************************************************************\nINITVTIX EQU   *\n         NI    FLAG,X'7F'\n         CVAFFILT ACCESS=READ,FCL=FCL$DEF,BUFLIST=BFLH$DEF,            X\n               MF=(E,CVPL)\nTEST$RET EQU   *\n         LTR   15,15\n         BZ    READLAST\n         CH    15,=H'4'\n         BNE   IXSEQERR\n         CLI   CVSTAT,STAT064\n         BNE   IXSEQERR\n         B     READOK\n***********************************************************************\n* INITIALIZE READING THE VTOC BUFFER AND START SEARCHING              *\n***********************************************************************\nREADLAST EQU   *\n         OI    FLAG,X'80'\nREADOK   EQU   *\n         LA    2,FCL$DEF\n         USING FCL$MAP,2\n         XR    3,3\n         ICM   3,3,FCLDSCBR\n         BZ    TST$RSUM\n         LA    2,DSCB$DEF\n         USING DSCB$MAP,2\n         OI    FLAG,X'40'\nREADVTIX EQU   *\n         LTR   3,3                   CHECK FOR END OF DSCB'S\n         BZ    TST$RSUM                EXIT IF END OF VTOC\n         TM    FLAG,X'40'\n         BO    *+8\n         LA    2,DSCB$SIZ(2)\n         NI    FLAG,X'BF'\n         BCTR  3,0\n         ZAP   CYL_LOW_EXTENT,=P'0'\n         ZAP   CYL_HIGH_EXTENT,=P'0'\n         ZAP   TRK_LOW_EXTENT,=P'0'\n         ZAP   TRK_HIGH_EXTENT,=P'0'\n         CLI   DS1FMTID,0              IS THIS DSCB UNUSED\n         BE    READVTIX                YES - DONT COUNT IT\n         CLI   DS1FMTID,C'1'           IS THIS A FORMAT 1 DSCB\n         BE    FORMAT1\n         CLI   0(2),C'4'\n         BE    FORMAT4\n         B     READVTIX\n***********************************************************************\n* EMITE RESUME NA CONTINUACAO DA LEITURA DA VTOC                      *\n***********************************************************************\nTST$RSUM EQU   *\n         TM    FLAG,X'80'\n         BO    IXCLOSE\n         CVAFFILT ACCESS=RESUME,FCL=FCL$DEF,BUFLIST=BFLH$DEF,          X\n               FLTAREA=KEEP,MF=(E,CVPL)\n         B     TEST$RET\n***********************************************************************\n* TRATA OS CAMPOS REFERENTES A FORMAT 4 DO VOLUME                     *\n***********************************************************************\nFORMAT4  EQU   *\n         XR    15,15\n         ICM   15,3,20(2)\n         CVD   15,DOUBLE\n         MVC   TRK_CYL,DOUBLE+6\n         B     READVTIX\n***********************************************************************\n* READ FORMAT3 OF DATA SET                                            *\n***********************************************************************\nFORMAT3  EQU   *\n         NI    FMT3,X'F0'\n         MVC   MAX_EXTENT,=H'4'\n         MVC   CCHHR3,0(5)\n         OBTAIN ACTADDR\n         LTR   15,15\n         BZ    SEEK_OK\n         LH    15,IEB112E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+54(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     RETURN8\n***********************************************************************\n* SEEK THE VOLUME TO FIND A FORMAT3                                   *\n***********************************************************************\nSEEK_OK  EQU   *\n         LA    5,FMT3AREA\n         CLC   0(4,5),=XL4'03030303'\n         BE    FORMAT3_READ_OK\n         LH    15,IEB113E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+48(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     RETURN8\n***********************************************************************\n* OBTAIN THE FORMAT 3 AND CALCULATE THE EXTENTS                       *\n***********************************************************************\nFORMAT3_READ_OK EQU *\n         LA    5,4(5)\nFORMAT3_NEXT_EXTENT EQU *\n         XR    6,6\n         IC    6,EXTNTS\n         CH    6,MAX_EXTENT\n         BNH   LAST_FORMAT3\n         SH    6,MAX_EXTENT\n         STC   6,EXTNTS\n         LH    6,MAX_EXTENT\n         OI    FMT3,X'01'\nLAST_FORMAT3 EQU *\n         BAL   14,ADDCYL\n         LA    5,10(5)\n         BCT   6,LAST_FORMAT3\n         TM    FMT3,X'F1'\n         BNO   PRINTL\n         TM    FMT3,X'02'\n         BO    FORMAT3\n         LA    5,1(5)\n         MVC   MAX_EXTENT,=H'9'\n         NI    FMT3,X'F0'\n         OI    FMT3,X'02'\n         B     FORMAT3_NEXT_EXTENT\nACTADDR  CAMLST SEEK,CCHHR3,VOLUME3,FMT3AREA\n***********************************************************************\n* PROCESS THE FORMAT 1 FIELDS FOR A DATA SET                          *\n***********************************************************************\nFORMAT1  EQU   *\n* ------\n         TM    FLAG2,X'01'            BEF DATE PROCESSING IN EFFECT?\n         BZ    ENDREFP\n         CLC   =X'000000',DS1REFD\n         BE    READVTIX\n         CLC   OUTDATE(3),DS1REFD\n         BL    READVTIX\nENDREFP  DS    0H\n* ------\n         BLANK LINHA\n         ZAP   TRK_ALOC_EXTENT,=P'0'\n         AP    DSN_VOLUME,=P'1'\n         MVC   DSNAME,DS1DSNAM\n         MVC   PRT_VOLUME,VOLUCB\n***********************************************************************\n* TEST IF IS SET TO SEARCH CATALOG INFORMATION ABOUT DATA SET         *\n***********************************************************************\n         TM    FLAG_CATALOG,X'FF'\n         BNO   NO_CATALOG\n         MVI   PRT_CATALOG_DSN,C'N'\n         MVC   DSNAME_CATALOG,DSNAME\n***********************************************************************\n* EXECUTE LOCATE MACRO INSTRUCTION TO ACCESS CATALOG INFORMATION      *\n***********************************************************************\n         LOCATE CAMLST\n         LTR   15,15\n         BNZ   NO_CATALOG\n         LA    5,LISTA_CATALOG\n         LH    6,0(5)\n         LA    5,2(5)\n***********************************************************************\n* COMPARE THE VOLUME FOUND ON CATALOG WITH THE INDICATED              *\n***********************************************************************\nFIND_VOL_CATALOG EQU *\n         CLC   VOLUCB,4(5)\n         BE    OK_CATALOG\n         LA    5,12(5)\n         BCT   6,FIND_VOL_CATALOG\n         MVI   PRT_CATALOG_DSN,C'E'\n         B     NO_CATALOG\nCAMLST   CAMLST NAME,DSNAME_CATALOG,,LISTA_CATALOG\nOK_CATALOG EQU *\n         MVI   PRT_CATALOG_DSN,C'Y'\n***********************************************************************\n* OBTAIN EXTENTS NUMBER TO DATA SETS IF IS NEED READ FORMAT 3 DSCB    *\n***********************************************************************\nNO_CATALOG EQU *\n         NI    FMT3,X'00'\n         MVC   EXTNTS,DS1NOEPV\n         XR    15,15\n         ICM   15,1,DS1NOEPV\n         CVD   15,DOUBLE\n         CH    15,=H'3'\n         BNH   NO_NEED_FORMAT3\n         OI    FMT3,X'F0'\nNO_NEED_FORMAT3 EQU *\n         MVC   PRT_EXTENTS_DSN,MASK3\n         ED    PRT_EXTENTS_DSN,DOUBLE+6\n         MVC   PRT_SMSFLAG_DSN,=C'Y'\n         TM    DS1SMSFG,DS1SMSDS\n         BO    *+10\n         MVC   PRT_SMSFLAG_DSN,=C'N'\n***********************************************************************\n* PROCESS CREATE DATE AND REFERENCE DATE                              *\n***********************************************************************\nVERIFY_CREATE_DATE EQU *\n         CLC   DS1CREDT,DATE_NULL\n         BE    NULL_CREATE_DATE\n         XR    15,15\n         ICM   15,1,DS1CREDT\n         CVD   15,DOUBLE\n         AP    DOUBLE,=P'1900'\n         UNPK  JULGRIN(5),DOUBLE+5(3)\n         OI    JULGRIN+4,X'F0'\n         XR    15,15\n         ICM   15,3,DS1CREDT+1\n         CVD   15,DOUBLE\n         UNPK  JULGRIN+5(3),DOUBLE+6(2)\n         OI    JULGRIN+7,X'F0'\n         JULGREG JULGRIN+1,JULGROUT,DOUBLE\n         MVC   DIACREDT,JULGROUT\n         MVI   DIACREDT+2,C'/'\n         MVC   MESCREDT,JULGROUT+2\n         MVI   MESCREDT+2,C'/'\n         MVC   ANOCREDT,JULGROUT+4\n         B     VERIFY_REFER_DATE\nNULL_CREATE_DATE EQU *\n         MVC   DTECREDT,DATE_NONE\nVERIFY_REFER_DATE EQU *\n         CLC   DS1REFD,DATE_NULL\n         BE    NULL_REFER_DATE\n         XR    15,15\n         ICM   15,1,DS1REFD\n         CVD   15,DOUBLE\n         AP    DOUBLE,=P'1900'\n         UNPK  JULGRIN(5),DOUBLE+5(3)\n         OI    JULGRIN+4,X'F0'\n         XR    15,15\n         ICM   15,3,DS1REFD+1\n         CVD   15,DOUBLE\n         UNPK  JULGRIN+5(3),DOUBLE+6(2)\n         OI    JULGRIN+7,X'F0'\n         JULGREG JULGRIN+1,JULGROUT,DOUBLE\n         MVC   DIAREFDT,JULGROUT\n         MVI   DIAREFDT+2,C'/'\n         MVC   MESREFDT,JULGROUT+2\n         MVI   MESREFDT+2,C'/'\n         MVC   ANOREFDT,JULGROUT+4\n         B     VERIFY_DATASET_ORG\nNULL_REFER_DATE EQU *\n         MVC   DTEREFDT,DATE_NONE\n***********************************************************************\n* VERIFY THE TYPE OF DATASET WHICH IS BEING HANDLED                   *\n***********************************************************************\nVERIFY_DATASET_ORG EQU *\n         MVC   PRT_DSORG_DSN,=CL2'UN'\n         TM    DS1DSORG,DS1DSGIS\n         BNO   *+16\n         MVC   PRT_DSORG_DSN,=CL2'IS'\n         AP    DSNIS_VOLUME,=P'1'\n         TM    DS1DSORG,DS1DSGPS\n         BNO   *+16\n         MVC   PRT_DSORG_DSN,=CL2'PS'\n         AP    DSNPS_VOLUME,=P'1'\n         TM    DS1DSORG,DS1DSGDA\n         BNO   *+16\n         MVC   PRT_DSORG_DSN,=CL2'DA'\n         AP    DSNDA_VOLUME,=P'1'\n         TM    DS1DSORG,DS1DSGPO\n         BNO   *+16\n         MVC   PRT_DSORG_DSN,=CL2'PO'\n         AP    DSNPO_VOLUME,=P'1'\n         TM    DS1DSORG+1,DS1ACBM\n         BO    VVDSREAD\n         CLC   PRT_DSORG_DSN,=CL3'UN'\n         BNE   *+10\n         AP    DSNUN_VOLUME,=P'1'\n         B     VERRECFM\n***********************************************************************\n* HANDLE VSAM DATASETS                                                *\n***********************************************************************\nVVDSREAD EQU   *\n         TM    FLAG,X'20'\n         BNO   TRATA_VSAM\n         LH    15,IEB111E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+46(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     CALCSPAC\nTRATA_VSAM EQU *\n         MVC   PRT_DSORG_DSN,=CL2'VS'\n         AP    DSNVS_VOLUME,=P'1'\n         STM   1,9,SALVA19\n         XC    VVDSRBA,VVDSRBA\n         POINT RPL=VVDSRPL\n         LTR   15,15\n         BNZ   VVDSERRO\n         GET   RPL=VVDSRPL\n         LTR   15,15\n         BNZ   VVDSERRO\n***********************************************************************\n* LE REGISTRO DA VVDS E PROCURA A HEADER CELL DO ARQUIVO              *\n***********************************************************************\nNEXTREC  EQU   *\n         GET   RPL=VVDSRPL\n         LTR   15,15\n         BNZ   VVDSERRO\n         L     2,VVDSADR\n         MVC   HALF,0(2)\n         LH    3,HALF\n         LA    2,2(2)\n         SH    3,=H'2'\n         CLI   2(2),X'E9'\n         BNE   NEXTREC\n***********************************************************************\n* VERIFY THE TYPES OF COMPONENTS BEING HANDLED                        *\n***********************************************************************\nNEXTCOMP EQU   *\n         MVC   HALF,0(2)\n         LH    4,HALF\n         CLI   2(2),X'E9'\n         BE    HEADER\n         CLI   2(2),X'23'\n         BE    VOLCOMP\n         CLI   2(2),X'60'\n         BE    DSNCOMP\n***********************************************************************\n* PREPARE READING THE NEXT COMPONENT                                  *\n***********************************************************************\nSKIPIT   EQU   *\n         AR    2,4\n         SR    3,4\n         BH    NEXTCOMP\n         B     NEXTREC\n***********************************************************************\n* TRATA A HEADER CELL PARA VER SE O ARQUIVO E O DESEJADO              *\n***********************************************************************\nHEADER   EQU   *\n         XR    7,7\n         IC    7,8(2)\n         SH    7,=H'2'\n         EX    7,CLCVVDS\n         BNE   NEXTREC\n         B     SKIPIT\nCLCVVDS  CLC   DSNAME(0),9(2)\n***********************************************************************\n* PEGA OS VALORES DE CISIZE E AVGREC DO ARQUIVO                       *\n***********************************************************************\nDSNCOMP  EQU   *\n         MVC   FULL,22(2)\n         L     15,FULL\n         CVD   15,DOUBLE\n         MVC   PRT_BLKSIZE_DSN,MASK5\n         ED    PRT_BLKSIZE_DSN,DOUBLE+5\n         MVC   FULL,26(2)\n         L     15,FULL\n         CVD   15,DOUBLE\n         MVC   PRT_LRECL_DSN,MASK5\n         ED    PRT_LRECL_DSN,DOUBLE+5\n         B     SKIPIT\n***********************************************************************\n* FAZ O CALCULO DO ESPACO ALOCADO E UTILIZADO DO ARQUIVO              *\n***********************************************************************\nVOLCOMP  EQU   *\n         CLI   25(2),X'80'\n         BE    NEXTREC\n         CLI   25(2),X'C0'\n         BE    NEXTREC\n         MVC   FULL,17(2)\n         L     8,FULL\n         MVC   HALF,21(2)\n         LH    9,HALF\n         MVC   FULL(4),9(2)\n         L     7,FULL\n         AR    7,8\n         SLR   6,6\n         S     7,=F'1'\n         DR    6,8                GET NO OF BLOCKS USED\n         SLR   6,6                IGNORE REMINDER ..\n         AR    7,9                ROUND TO TRACK BOUNDARY IF NOT\n         S     7,=F'1'\n         DR    6,9                GET TRACKS USED\n         ST    7,TRK_USED         USED TRACKS\n         MVC   FULL(4),13(2)     HIGH ALLOCATED RBA\n         L     7,FULL\n         AR    7,8                ROUND TO BLOCK BOUNDARY\n         SLR   6,6\n         S     7,=F'1'\n         DR    6,8                GET NO OF BLOCKS ALLOCATED\n         SLR   6,6                CLEAR THE REMINDER\n         AR    7,9                ROUND TO TRACK BOUNDARY\n         S     7,=F'1'            LESS 1\n         DR    6,9                GET TRACKS ALLLOCATED\n         ST    7,TRK_ALOC         ALLOCATED TRACKS\n         LA    2,42(2)            POINT TO EXTENT INFORMATION\n         SH    4,=H'42'           REMAINING LENGTH\n         SLR   5,5                INITIALISE ACTUAL TRACKS\n***********************************************************************\n* COMPUTE OTHER EXTENTS OF THE DATASET                                *\n***********************************************************************\nNEXTEXT  EQU   *\n         MVC   HALF,10(2)        EXTENT LENGTH\n         AH    5,HALF\n         LA    2,20(2)            POINT TO NEXT EXT\n         SH    4,=H'20'           REMAINING LENGTH\n         BH    NEXTEXT            NEXT EXTENT\n         LR    7,5                ALLOCATED TRACKS\n         CVD   7,DOUBLE\n         MVC   PRT_TRK_ALOC_DSN,MASK5\n         ED    PRT_TRK_ALOC_DSN,DOUBLE+5\n         L     7,TRK_USED\n         MR    6,5                USE TRACKS * ACTUAL ALLOCATED\n         D     6,TRK_ALOC         GET ACTUAL USED TRACKS\n         LTR   6,6                REMINDER ZERO\n         BZ    *+8\n         LA    7,1(7)             OTHERWISE INCREMENT QUOTIENT 1\n         CVD   7,DOUBLE\n         MVC   PRT_TRK_USED_DSN,MASK5\n         ED    PRT_TRK_USED_DSN,DOUBLE+5\n         AP    TRK_USED_VOLUME,DOUBLE+5(3)\nVVDSEOD  EQU   *\n         LM    1,9,SALVA19\n         B     CALCSPAC\n***********************************************************************\n* VERIFICA O TIPO DE REGISTRO DO ARQUIVO                              *\n***********************************************************************\nVERRECFM EQU   *\n         MVC   PRT_RECFM_DSN,=CL2' '\n         TM    DS1RECFM,DS1RECFF\n         BNO   *+8\n         MVI   PRT_RECFM_DSN,C'F'\n         TM    DS1RECFM,DS1RECFV\n         BNO   *+8\n         MVI   PRT_RECFM_DSN,C'V'\n         TM    DS1RECFM,DS1RECFU\n         BNO   *+8\n         MVI   PRT_RECFM_DSN,C'U'\n         TM    DS1RECFM,DS1RECFB\n         BNO   *+8\n         MVI   PRT_RECFM_DSN+1,C'B'\n         TM    DS1RECFM,DS1RECFA\n         BNO   *+8\n         MVI   PRT_RECFM_DSN+2,C'A'\n         TM    DS1RECFM,DS1RECMC\n         BNO   *+8\n         MVI   PRT_RECFM_DSN+2,C'M'\n         CLI   PRT_RECFM_DSN+1,C' '\n         BNE   *+14\n         MVC   PRT_RECFM_DSN(1),PRT_RECFM_DSN+2\n         MVI   PRT_RECFM_DSN+2,C' '\n***********************************************************************\n* PEGA O TAMANHO DE REGISTRO E BLKSIZE                                *\n***********************************************************************\n         XR    15,15\n         ICM   15,3,DS1BLKL\n         CVD   15,DOUBLE\n         MVC   PRT_BLKSIZE_DSN,MASK5\n         ED    PRT_BLKSIZE_DSN,DOUBLE+5\n         XR    15,15\n         ICM   15,3,DS1LRECL\n         CVD   15,DOUBLE\n         MVC   PRT_LRECL_DSN,MASK5\n         ED    PRT_LRECL_DSN,DOUBLE+5\n         XR    15,15\n         ICM   15,3,DS1LSTAR\n         CLI   DS1LSTAR+2,X'00'\n         BE    EDIT_USED\n         LA    15,1(15)\nEDIT_USED EQU  *\n         CVD   15,DOUBLE\n         MVC   PRT_TRK_USED_DSN,MASK5\n         ED    PRT_TRK_USED_DSN,DOUBLE+5\n         AP    TRK_USED_VOLUME,DOUBLE+5(3)\n***********************************************************************\n* CALCULATE THE ALLOCATED SPACE OF DATA SET                           *\n***********************************************************************\nCALCSPAC EQU   *\n         LA    5,DS1EXT1\n         XR    6,6\n         ICM   6,1,EXTNTS\n         LTR   6,6\n         BZ    PRINTL\n         TM    FMT3,X'F0'\n         BNO   LOOP_ADDCYL_FORMAT1\n***********************************************************************\n* SET TO READ THE FIRST THREE EXTENTS                                *\n***********************************************************************\nADD_FORMAT_3 EQU *\n         SH    6,=H'3'\n         STCM  6,1,EXTNTS\n         LA    6,3\n         MVC   VOLUME3,VOLUCB\nLOOP_ADDCYL_FORMAT1 EQU *\n         BAL   14,ADDCYL\n         LA    5,10(5)\n         BCT   6,LOOP_ADDCYL_FORMAT1\n         TM    FMT3,X'F0'\n         BO    FORMAT3\n         B     PRINTL\n***********************************************************************\n* ROTINA PARA CALCULO DO ESPACO ALOCADO PELO ARQUIVO                  *\n***********************************************************************\nADDCYL   EQU   *\n         STM   14,15,SALVA14\n         XR    15,15\n         ICM   15,3,2(5)\n         CVD   15,DOUBLE\n         ZAP   CYL_LOW_EXTENT,DOUBLE\n         XR    15,15\n         ICM   15,3,4(5)\n         CVD   15,DOUBLE\n         ZAP   TRK_LOW_EXTENT,DOUBLE\n         XR    15,15\n         ICM   15,3,6(5)\n         CVD   15,DOUBLE\n         ZAP   CYL_HIGH_EXTENT,DOUBLE\n         XR    15,15\n         ICM   15,3,8(5)\n         CVD   15,DOUBLE\n         ZAP   TRK_HIGH_EXTENT,DOUBLE\n         MP    CYL_LOW_EXTENT,TRK_CYL\n         MP    CYL_HIGH_EXTENT,TRK_CYL\n         AP    CYL_LOW_EXTENT,TRK_LOW_EXTENT\n         AP    CYL_HIGH_EXTENT,TRK_HIGH_EXTENT\n         SP    CYL_HIGH_EXTENT,CYL_LOW_EXTENT\n         AP    CYL_HIGH_EXTENT,=P'1'\n         AP    TRK_ALOC_EXTENT,CYL_HIGH_EXTENT\n         LM    14,15,SALVA14\n         BR    14\n***********************************************************************\n* TOTALIZA O ESPACO ALOCADO POR ARQUIVO E VERIFICA SE DEVE IMPRIMIR   *\n***********************************************************************\nPRINTL   EQU   *\n         AP    TRK_ALOC_VOLUME,TRK_ALOC_EXTENT\n         MVC   PRT_TRK_ALOC_DSN,MASK5\n         ED    PRT_TRK_ALOC_DSN,TRK_ALOC_EXTENT+2\n         TM    FLAG,X'01'\n         BO    READVTIX\n         XC    CABEC,CABEC\n         BAL   14,PUTOUT\n         PUT   SYSPRINT,LINHA\n         AP    NUMLINHA,=P'1'\n         B     READVTIX\n***********************************************************************\n* ROTINA DE IMPRESSAO DAS LINHAS DE RELATORIO                         *\n***********************************************************************\nPUTOUT   EQU   *\n         STM   14,15,SALVA14\n         CP    NUMLINHA,=P'61'\n         BLR   14\n         AP    PAGINA,=P'1'\n         LH    15,CABECA1\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSPRINT,SPACE\n         LH    15,CABECA2\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+8(2),DATED\n         MVC   SPACE+11(2),DATED+2\n         MVC   SPACE+14(4),DATED+4\n         MVC   SPACE+28(2),TIMED\n         MVC   SPACE+31(2),TIMED+2\n         MVC   SPACE+34(2),TIMED+4\n         UNPK  SPACE+98(3),PAGINA\n         OI    SPACE+100,X'F0'\n* -----\n         TM    FLAG2,X'01'\n         BZ    REFSKIP\n         MVC   SPACE+66(4),=C'REF='\n         MVC   SPACE+70(7),INDATE\nREFSKIP  DS    0H\n* -----\n         PUT   SYSPRINT,SPACE\n         BLANK SPACE\n         PUT   SYSPRINT,SPACE\n         ZAP   NUMLINHA,=P'3'\nPUTCAB   EQU   *\n         XR    15,15\n         IC    15,CABEC\n         SLL   15,2\n         B     *+4(15)\n         B     CABEC1\n         LM    14,15,SALVA14\n         BR    14\nCABEC1   EQU   *\n         LH    15,CABECA3\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSPRINT,SPACE\n         AP    NUMLINHA,=P'1'\n         LM    14,15,SALVA14\n         BR    14\n***********************************************************************\n* TRATAMENTO DOS POSSIVEIS ERROS COM O ACESSO A VTOC                  *\n***********************************************************************\nIXSEQERR EQU   *\n         CLI   CVSTAT,STAT032\n         BE    IXCLOSE\n         LH    15,IEB115E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+26(3),=C'FIL'\nIXMACERR EQU   *\n         IC    1,CVSTAT\n         N     1,=F'255'\n         CVD   1,DOUBLE\n         UNPK  SPACE+47(3),DOUBLE+6(2)\n         OI    SPACE+49,X'F0'\n         CVD   15,DOUBLE\n         UNPK  SPACE+36(3),DOUBLE+6(2)\n         OI    SPACE+38,X'F0'\nIXCLOSE  EQU   *\n         CVAFFILT ACCESS=RLSE,FCL=0,BUFLIST=0,                         X\n               MF=(E,CVPL)\n         TM    FLAG,X'10'\n         BNO   CLOSE\n         LH    15,DSNCOUNT\n         LA    15,1(15)\n         STH   15,DSNCOUNT\n         CLC   DSNCOUNT,DSNAME_CNT\n         BL    IXVTOC\n         XC    DSNCOUNT,DSNCOUNT\n***********************************************************************\n* IMPRIME TOTAIS POR VOLUME                                           *\n***********************************************************************\nCLOSE    EQU   *\n         CLOSE VTOC\n         CLOSE VVDS\n         BLANK LINHA\n         AP    VOLUME_COUNT,=P'1'\n         CP    DSN_VOLUME,=P'0'\n         BE    UNALLOC\n         AP    VOLUME_COUNT_DSN,=P'1'\n         MVC   PRT_TRK_ALOC_VOLUME,MASK5\n         ED    PRT_TRK_ALOC_VOLUME,TRK_ALOC_VOLUME+2\n         MVC   PRT_TRK_USED_VOLUME,MASK5\n         ED    PRT_TRK_USED_VOLUME,TRK_USED_VOLUME+2\n         AP    TRK_ALOC_TOTAL,TRK_ALOC_VOLUME\n         AP    TRK_USED_TOTAL,TRK_USED_VOLUME\n         MVC   PRT_DSN_VOLUME,MASK5\n         ED    PRT_DSN_VOLUME,DSN_VOLUME+2\n         MVC   PRT_DSNPS_VOLUME,MASK5\n         ED    PRT_DSNPS_VOLUME,DSNPS_VOLUME+2\n         MVC   PRT_DSNPO_VOLUME,MASK5\n         ED    PRT_DSNPO_VOLUME,DSNPO_VOLUME+2\n         MVC   PRT_DSNIS_VOLUME,MASK5\n         ED    PRT_DSNIS_VOLUME,DSNIS_VOLUME+2\n         MVC   PRT_DSNDA_VOLUME,MASK5\n         ED    PRT_DSNDA_VOLUME,DSNDA_VOLUME+2\n         MVC   PRT_DSNVS_VOLUME,MASK5\n         ED    PRT_DSNVS_VOLUME,DSNVS_VOLUME+2\n         MVC   PRT_DSNUN_VOLUME,MASK5\n         ED    PRT_DSNUN_VOLUME,DSNUN_VOLUME+2\n         MVC   PRT_CYL_FREE_VOLUME,MASK7\n         ED    PRT_CYL_FREE_VOLUME,CYL_FREE_VOLUME+2\n         MVC   PRT_TRK_FREE_VOLUME,MASK7\n         ED    PRT_TRK_FREE_VOLUME,TRK_FREE_VOLUME+2\n         MVI   CABEC,X'01'\n         CP    NUMLINHA,=P'56'\n         BNH   *+8\n         BAL   14,PUTOUT\n         BLANK SPACE\n         PUT   SYSPRINT,SPACE\n         LH    15,CABECA4\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+20(6),VOLUCB\n         MVC   SPACE+34(4),UCBUNIT\n         PUT   SYSPRINT,SPACE\n         BLANK SPACE\n         PUT   SYSPRINT,SPACE\n         LH    15,CABECA5\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSPRINT,SPACE\n         PUT   SYSPRINT,LINHA\n         ZAP   NUMLINHA,=P'61'\n         AP    DSN_TOTAL,DSN_VOLUME\n         AP    DSNUN_TOTAL,DSNUN_VOLUME\n         AP    DSNPS_TOTAL,DSNPS_VOLUME\n         AP    DSNPO_TOTAL,DSNPO_VOLUME\n         AP    DSNIS_TOTAL,DSNIS_VOLUME\n         AP    DSNDA_TOTAL,DSNDA_VOLUME\n         AP    DSNVS_TOTAL,DSNVS_VOLUME\n***********************************************************************\n* FREE THE ALLOCATIONS OF VVDS AND VTOC                               *\n***********************************************************************\nUNALLOC  EQU   *\n         LH    15,IEB008I\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+18(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         LA    1,ALOC\n         MVC   ALOCTP,=A(VTOCULOC)\n         MVC   ALOCVC,=AL1(2)\n         DYNALLOC\nULOCOK   EQU   *\n         LA    1,ALOC\n         MVC   ALOCTP,=A(VVDSULOC)\n         DYNALLOC\n***********************************************************************\n* INICIALIZA OS CONTADORES INDEX                                      *\n***********************************************************************\nZAPINDEX EQU   *\n         NI    FLAG,X'DF'\n         ZAP   DSN_VOLUME,=P'0'\n         ZAP   DSNUN_VOLUME,=P'0'\n         ZAP   DSNPS_VOLUME,=P'0'\n         ZAP   DSNPO_VOLUME,=P'0'\n         ZAP   DSNIS_VOLUME,=P'0'\n         ZAP   DSNDA_VOLUME,=P'0'\n         ZAP   DSNVS_VOLUME,=P'0'\n         ZAP   TRK_ALOC_VOLUME,=P'0'\n         ZAP   TRK_USED_VOLUME,=P'0'\n         B     PESQUCB\n***********************************************************************\n* IMPRIME TOTAIS GERAIS OBTIDOS                                       *\n***********************************************************************\nENDVOLS  EQU   *\n         BLANK LINHA\n         MVC   PRT_TRK_ALOC_TOTAL,MASK9\n         ED    PRT_TRK_ALOC_TOTAL,TRK_ALOC_TOTAL\n         MVC   PRT_TRK_USED_TOTAL,MASK9\n         ED    PRT_TRK_USED_TOTAL,TRK_USED_TOTAL\n         MVC   PRT_DSN_TOTAL,MASK7\n         ED    PRT_DSN_TOTAL,DSN_TOTAL+1\n         MVC   PRT_DSNPS_TOTAL,MASK7\n         ED    PRT_DSNPS_TOTAL,DSNPS_TOTAL+1\n         MVC   PRT_DSNPO_TOTAL,MASK7\n         ED    PRT_DSNPO_TOTAL,DSNPO_TOTAL+1\n         MVC   PRT_DSNIS_TOTAL,MASK7\n         ED    PRT_DSNIS_TOTAL,DSNIS_TOTAL+1\n         MVC   PRT_DSNDA_TOTAL,MASK7\n         ED    PRT_DSNDA_TOTAL,DSNDA_TOTAL+1\n         MVC   PRT_DSNVS_TOTAL,MASK7\n         ED    PRT_DSNVS_TOTAL,DSNVS_TOTAL+1\n         MVC   PRT_DSNUN_TOTAL,MASK7\n         ED    PRT_DSNUN_TOTAL,DSNUN_TOTAL+1\n         MVC   PRT_CYL_FREE_TOTAL,MASK9\n         ED    PRT_CYL_FREE_TOTAL,CYL_FREE_TOTAL\n         MVC   PRT_TRK_FREE_TOTAL,MASK9\n         ED    PRT_TRK_FREE_TOTAL,TRK_FREE_TOTAL\n         ZAP   NUMLINHA,=P'61'\n         BAL   14,PUTOUT\n         LH    15,CABECA6\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSPRINT,SPACE\n         LH    15,CABECA7\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         MVC   SPACE+11(6),MASK5\n         ED    SPACE+11(6),VOLUME_COUNT\n         MVC   SPACE+40(6),MASK5\n         ED    SPACE+40(6),VOLUME_COUNT_DSN\n         PUT   SYSPRINT,SPACE\n         LH    15,CABECA10\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         PUT   SYSPRINT,SPACE\n         PUT   SYSPRINT,LINHA\nRETURN   EQU   *\n         LH    15,IEB006I\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         L     15,RETCODE\n         CVD   15,DOUBLE\n         UNPK  SPACE+55(3),DOUBLE+6(2)\n         OI    SPACE+57,X'F0'\n         PUT   SYSOUT,SPACE\n         CLOSE SYSPRINT\n         CLOSE SYSOUT\n         L     15,RETCODE\n         L     13,SA+4\n         RETURN (14,12),RC=(15)\nRETURN8  EQU   *\n         MVC   RETCODE,=F'8'\n         B     RETURN\nRETURN16 EQU   *\n         MVC   RETCODE,=F'16'\n         B     RETURN\n***********************************************************************\n* TRATA ERRO OCORRIDO DURANTE O ACESSO A VVDS                         *\n***********************************************************************\nVVDSERRO EQU   *\n         SHOWCB RPL=VVDSRPL,AREA=FULL,LENGTH=4,FIELDS=(FDBK)\n         L     15,FULL\n         CVD   15,DOUBLE\n         LH    15,IEB110E\n         A     15,MSGADDR\n         MVC   SPACE(133),0(15)\n         UNPK  SPACE+16(3),DOUBLE+6(2)\n         OI    SPACE+18,X'F0'\n         MVC   SPACE+47(6),VOLUCB\n         PUT   SYSOUT,SPACE\n         B     RETURN8\n         LTORG\n***********************************************************************\n* DEFINE AREAS PARA IMPRESSAO DE RELATORIO                            *\n***********************************************************************\nNUMLINHA DC    PL2'61'\nPAGINA   DC    PL2'0'\nSTGADDR  DC    V(STGFIND)\nMSGADDR  DC    V(PUTMSG)\nIEB001E  DC    Y(133*0)\nIEB002E  DC    Y(133*1)\nIEB003W  DC    Y(133*2)\nIEB004E  DC    Y(133*3)\nIEB005E  DC    Y(133*4)\nIEB006I  DC    Y(133*5)\nIEB007E  DC    Y(133*6)\nIEB008I  DC    Y(133*7)\nIEB009I  DC    Y(133*8)\nIEB010E  DC    Y(133*9)\nIEB110E  DC    Y(133*10)\nIEB111E  DC    Y(133*11)\nCABECA1  DC    Y(133*12)\nCABECA2  DC    Y(133*13)\nCABECA3  DC    Y(133*14)\nCABECA4  DC    Y(133*15)\nCABECA5  DC    Y(133*16)\nCABECA6  DC    Y(133*17)\nCABECA7  DC    Y(133*18)\nCABECA8  DC    Y(133*19)\nCABECA9  DC    Y(133*20)\nCABECA10 DC    Y(133*21)\nIEB011E  DC    Y(133*22)\nIEB012E  DC    Y(133*23)\nIEB013E  DC    Y(133*24)\nIEB014I  DC    Y(133*25)\nIEB025E  DC    Y(133*26)\nIEB026I  DC    Y(133*27)\nIEB010I  DC    Y(133*28)\nIEB112E  DC    Y(133*29)\nIEB113E  DC    Y(133*30)\nIEB114E  DC    Y(133*31)\nIEB115E  DC    Y(133*32)\nSPACE    DS    CL133\nCALL_LIST CALL  ,(VOLUME_ADDR,VOLUME_CNT,PARM_ADDR),VL,MF=L\n***********************************************************************\n* DEFINE AREAS CONSTANTES PARA O PROGRAMA                             *\n***********************************************************************\nSA       DC    18F'0'\nDOUBLE   DC    D'0'\nTRK_ALOC DC    F'0'\nTRK_USED DC    F'0'\nFULL     DC    F'0'\nBYTE     DC    X'0'\nMASK_EXCLUDE DC X'0'\nHALF     DC    H'0'\nMAX_EXTENT DC  H'0'\nVVDSADR  DC    F'0'\nVVDSRBA  DC    F'0'\nSALVA8   DC    F'0'\nSALVA19  DC    9F'0'\nSALVA14  DC    2F'0'\nRETCODE  DC    F'0'\nDEBADDR  DC    F'0'\nUCBADDR  DC    F'0'\nADDRUCB  DC    F'0'\n#FORMAT0 DC    F'0'\nJULGRIN  DS    CL8\nJULGROUT DS    CL8\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\n         ORG\nEXTNTS   DS    X\nMASK3    DC    X'40202120'\nMASK5    DC    X'402020202120'\nMASK7    DC    X'4020202020202120'\nMASK9    DC    X'40202020202020202120'\nTAB_ALFA DC    X'0A0B0C0D0E0F'\nTAB_NUM  DC    X'00010203040506070809'\nDATE_NULL DC   X'000000'\nDATE_NONE DC   CL10'***NONE***'\nLOW_ADDR DC    CL4' '\nHI_ADDR  DC    CL4' '\nUCBUNIT  DC    CL4' '\nUCBAREA  DS    CL48\nAREA     DS    CL100\nPARM_ADDR    DS F\nSYSIN_ADDR   DS F\nVOLUME_ADDR  DS F\nDSNAME_ADDR  DS F\nDSNCOUNT     DS H\nDSNAME_CNT   DS H\nVOLUME_CNT   DS H\nVOLUCB   DS    CL6\nINDATE   DS    0CL7\nINYEAR   DS    CL4\nINDAY    DS    CL3\nOUTDATE  DS    CL3\nPACKYR   DC    PL3'0'\nPACKDAY  DC    PL2'0'\nBINYR    DC    XL1'00'\nBINDAY   DC    XL2'0000'\nFLAG     DS    X\nFLAG2    DS    X\nFLAG_CATALOG DS  X\nFLAG_AUTH    DS  X\nFMT3     DS    X\nCABEC    DS    X\nDSNAME_CATALOG DC CL44' '\nLISTA_CATALOG  DS 0D\n               DS 265C\n***********************************************************************\n* DEFINE AREAS DE TRABALHO PARA OPERACOES DE CALCULO                  *\n***********************************************************************\nVOLUME_COUNT     DC    PL3'0'\nVOLUME_COUNT_DSN DC    PL3'0'\nTRK_CYL         DC    PL2'15'\nTRK_LOW_EXTENT  DC    PL5'0'\nTRK_HIGH_EXTENT DC    PL5'0'\nCYL_LOW_EXTENT  DC    PL5'0'\nCYL_HIGH_EXTENT DC    PL5'0'\nTRK_ALOC_EXTENT DC    PL5'0'\nTRK_ALOC_VOLUME DC    PL5'0'\nTRK_USED_VOLUME DC    PL5'0'\nCYL_FREE_VOLUME DC    PL5'0'\nTRK_FREE_VOLUME DC    PL5'0'\nDSNIS_VOLUME    DC    PL5'0'                                            03570\nDSNUN_VOLUME    DC    PL5'0'                                            03580\nDSNPS_VOLUME    DC    PL5'0'                                            03581\nDSNPO_VOLUME    DC    PL5'0'                                            03590\nDSNDA_VOLUME    DC    PL5'0'                                            03600\nDSNVS_VOLUME    DC    PL5'0'                                            03610\nDSN_VOLUME      DC    PL5'0'                                            03620\nDSNIS_TOTAL     DC    PL5'0'                                            03621\nDSNUN_TOTAL     DC    PL5'0'                                            03621\nDSNPS_TOTAL     DC    PL5'0'                                            03622\nDSNPO_TOTAL     DC    PL5'0'                                            03623\nDSNDA_TOTAL     DC    PL5'0'                                            03624\nDSNVS_TOTAL     DC    PL5'0'                                            03625\nDSN_TOTAL       DC    PL5'0'\nTRK_ALOC_TOTAL  DC    PL5'0'\nTRK_USED_TOTAL  DC    PL5'0'\nCYL_FREE_TOTAL  DC    PL5'0'\nTRK_FREE_TOTAL  DC    PL5'0'\n***********************************************************************\n* DEFINE LINHA DE RELATORIO                                           *\n***********************************************************************\nLINHA    DC    CL133' '\n         ORG   LINHA\n         DC    C' '\nDSNAME   DC    CL44' '\n         DC    C' '\nPRT_VOLUME DC    CL6' '\n         DC    C' '\nDTECREDT DC    CL10' '\n         ORG   DTECREDT\nDIACREDT DC    CL2' '\n         DC    C'/'\nMESCREDT DC    CL2' '\n         DC    C'/'\nANOCREDT DC    CL4' '\n         DC    C' '\nDTEREFDT DC    CL10' '\n         ORG   DTEREFDT\nDIAREFDT DC    CL2' '\n         DC    C'/'\nMESREFDT DC    CL2' '\n         DC    C'/'\nANOREFDT DC    CL4' '\n         DC    CL3' '\nPRT_CATALOG_DSN  DC    C' '\n         DC    CL3' '\nPRT_SMSFLAG_DSN  DC    C' '\nPRT_EXTENTS_DSN  DC    CL4' '\n                 DC    CL4' '\nPRT_DSORG_DSN    DC    CL2' '\n                 DC    CL1' '\nPRT_RECFM_DSN    DC    CL3' '\n                 DC    CL3' '\nPRT_LRECL_DSN    DC    CL6' '\nPRT_BLKSIZE_DSN  DC    CL6' '\n                 DC    C' '\nPRT_TRK_ALOC_DSN DC    CL6' '\nPRT_TRK_USED_DSN DC    CL6' '\n                    ORG\n                    ORG   LINHA\n                    DC    C' '\nPRT_DSN_VOLUME      DC    CL6' '\nPRT_DSNPS_VOLUME    DC    CL6' '\nPRT_DSNPO_VOLUME    DC    CL6' '\nPRT_DSNIS_VOLUME    DC    CL6' '\nPRT_DSNDA_VOLUME    DC    CL6' '\nPRT_DSNVS_VOLUME    DC    CL6' '\nPRT_DSNUN_VOLUME    DC    CL6' '\n                    DC    C' '\nPRT_TRK_ALOC_VOLUME DC    CL6' '\nPRT_TRK_USED_VOLUME DC    CL6' '\nPRT_CYL_FREE_VOLUME DC    CL6' '\nPRT_TRK_FREE_VOLUME DC    CL6' '\n                   ORG\n                   ORG   LINHA\n                   DC   C' '\nPRT_DSN_TOTAL      DC    CL8' '\nPRT_DSNPS_TOTAL    DC    CL8' '\nPRT_DSNPO_TOTAL    DC    CL8' '\nPRT_DSNIS_TOTAL    DC    CL8' '\nPRT_DSNDA_TOTAL    DC    CL8' '\nPRT_DSNVS_TOTAL    DC    CL8' '\nPRT_DSNUN_TOTAL    DC    CL8' '\nPRT_TRK_ALOC_TOTAL DC    CL10' '\nPRT_TRK_USED_TOTAL DC    CL10' '\nPRT_CYL_FREE_TOTAL DC    CL10' '\nPRT_TRK_FREE_TOTAL DC    CL10' '\n         ORG\n***********************************************************************\n* WORK AREA TO EXECUTE OBTAIN SEK TO READ FORMAT 3                   *\n***********************************************************************\nCCHHR3   DS    CL5\nVOLUME3  DS    CL6\nFMT3AREA DS    CL140\n***********************************************************************\n* RETURN AREA TO MACRO LSPACE                                         *\n***********************************************************************\nLSPTEXT  DS    CL40\n***********************************************************************\n* DEFINE AREAS PARA ALOCACAO DINAMICA DOS VOLUMES                     *\n***********************************************************************\nALOC     DC    A(X'80000000'+ALOCRB)\nALOCRB   DC    AL1(20)\nALOCVC   DC    AL1(1)\n         DC    AL2(0)\nALOCER   DC    AL2(0)\nALOCIN   DC    AL2(0)\nALOCTP   DC    A(0)\n         DC    A(0)\n         DC    A(0)\nDDVVDS   DC    XL2'1',XL2'1',AL2(8),CL8'VVDS'\nDSNVVDS  DC    XL2'2',XL2'1',AL2(17),CL17'SYS1.VVDS.V'\nDISPVVDS DC    XL2'4',XL2'1',XL2'1',XL1'8'\nVVDSALOC CALL  ,(DDVVDS,DSNVVDS,DISPVVDS),VL,MF=L\nVVDSULOC CALL  ,(DDVVDS,DSNVVDS,UFORCE),VL,MF=L\nDDNX     DC    XL2'1',XL2'1',AL2(8),CL8'VTOC'\nDISP     DC    XL2'4',XL2'1',XL2'1',XL1'8'\nUNIT     DC    XL2'15',XL2'1',AL2(4),CL4' '\nVOLSER   DC    XL2'10',XL2'1',AL2(6),CL6' '\nVTOCALOC CALL  ,(DDNX,DISP,UNIT,VOLSER),VL,MF=L\nVTOCULOC CALL  ,(DDNX),VL,MF=L\nUFORCE   DC    XL2'7',XL2'0'\n***********************************************************************\n* OBTEM ESPACO PARA AREA DAS MACROS DE MAPEAMENTO                     *\n***********************************************************************\nFCL$ID   DC    CL4'FCL'\nFCL$DEF  DS    (FCLHDLEN+255*FCLDSNEL)X\nFCL$SIZE EQU   *-FCL$DEF\nBFLH$DEF DS    (BFLHLN)X\nBFLE$DEF DS    (BFLE$N*BFLELN)X\nBFL$SIZE EQU   *-BFLH$DEF\nDSCB$DEF DS    (BFLE$N*DSCB$SIZ)X\nBFLE$N   EQU   11\n***********************************************************************\n* DEFINE DCB DOS ARQUIVOS QUE SERAO UTILIZADOS                        *\n***********************************************************************\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),                    X\n               LRECL=133,RECFM=FBA,BLKSIZE=13300\nSYSOUT   DCB   DDNAME=SYSOUT,DSORG=PS,MACRF=(PM),                      X\n               LRECL=133,RECFM=FBA,BLKSIZE=13300\n***********************************************************************\n* DEFINE ACB E RPL QUE SERAO USADAS PARA LEITURA DA VVDS              *\n***********************************************************************\nVVDS     ACB   DDNAME=VVDS,MACRF=(ADR,SEQ,IN),EXLST=EODAD\nVVDSRPL  RPL   ACB=VVDS,AREA=VVDSADR,AREALEN=4,ARG=VVDSRBA,            X\n               OPTCD=(ADR,SEQ,LOC)\nEODAD    EXLST EODAD=VVDSEOD\n***********************************************************************\n* BLOCO DA DSCB E AREAS PARA I/O                                      *\n***********************************************************************\nCVPL     CVAFFILT MF=L,BRANCH=NO,FLTAREA=KEEP\nVTOC     DCB   DDNAME=VTOC,DSORG=PS,RECFM=U,KEYLEN=44,BLKSIZE=96,      X\n               MACRF=(R),EODAD=CLOSE,EXLST=RDJFLIST\nRDJFLIST DC    X'87',AL3(JFCBAREA)\nJFCBAREA DC    176X'0'\n***********************************************************************\n* DEFINE TABELA PARA TRATAMENTO DA MASCARA DE COMPARACAO              *\n***********************************************************************\nTABMASK  DC    256X'00'\n         ORG   TABMASK+C'*'\n         DC    C'*'\n         ORG   TABMASK+C'%'\n         DC    C'%'\n         ORG   TABMASK+C'/'\n         DC    C'/'\n         ORG\nTAB_TRT  DC    256X'00'\n         ORG   TAB_TRT+C')'\n         DC    C')'\n         ORG   TAB_TRT+C','\n         DC    C','\n         ORG\n***********************************************************************\n* DEFINE MAPEAMENTO PARA MASCARA DE VOLUME                            *\n***********************************************************************\nVOLUME_DSECT  DSECT\nVOLUME_LENGTH DS    XL1\nVOLUME_NAME   DS    CL6\n***********************************************************************\n* DEFINE MAPEAMENTO PARA MASCARA DE DATA SET NAME                     *\n***********************************************************************\nDSNAME_DSECT  DSECT\nDSNAME_LENGTH DS    XL1\nDSNAME_NAME   DS    CL44\n***********************************************************************\n* MACROS PARA MAPEAMENTO DAS AREAS A SEREM TRABALHADAS                *\n***********************************************************************\n         DCBD  DSORG=PS,DEVD=DA\n         IEZDEB ,\nJFCB     DSECT\n         IEFJFCBN ,\nCVPL$MAP ICVAFPL CVPLFSA=YES\nFCL$MAP  ICVFCL\nBFL$MAP  ICVAFBFL\nDSCB$MAP DSECT\n         IECSDSL1 (1)\nDSCB$SIZ EQU   *-IECSDSL1\n         CVT   DSECT=YES\n         DSECT\n         IEFUCBOB\n         END   IEBLIST\n***********************************************************************\n* ROUTINE TO OBTAIN STORAGE AREAS TO RETAIN WORK TABLES               *\n***********************************************************************\nSTOR_OBT CSECT\n         STM   14,12,12(13)\n         LR    9,1\n         LR    12,15\n         USING STOR_OBT,12\n         LA    2,SA\n         ST    13,SA+4\n         ST    2,8(13)\n         LR    13,2\n         STORAGE OBTAIN,LENGTH=72*1024\n         ST    1,0(9)\n         STORAGE OBTAIN,LENGTH=7*4097\n         ST    1,4(9)\n         STORAGE OBTAIN,LENGTH=45*255\n         ST    1,8(9)\n         L     13,SA+4\n         LM    14,12,12(13)\n         BR    14\nSA       DS    18F\n         END   STOR_OBT\n***********************************************************************\n* SUBROTINA PARA LEITURA DO SYSIN                                     *\n***********************************************************************\nLE_SYSIN CSECT\n         STM   14,12,12(13)\n         LR    9,1\n         LR    12,15\n         USING LE_SYSIN,12\n         LA    2,SA\n         ST    13,SA+4\n         ST    2,8(13)\n         LR    13,2\n         OPEN  (SYSIN,(INPUT))\n***********************************************************************\n* FAZ LEITURA DOS REGISTROS DE SYSIN PARA AREA TEMPORARIA             *\n***********************************************************************\nGETIN    EQU   *\n         GET   SYSIN,SPACE\n         LA    2,72\n         LA    1,SPACE\nSYSIN_GET EQU *\n         CLI   0(1),C' '\n         BNE   START_PARM\n         LA    1,1(1)\n         BCT   2,SYSIN_GET\n         B     GETIN\nSTART_PARM EQU *\n         LR    3,1\n         BCTR  2,0\n         EX    2,TRT_SYSIN\n         BZ    LINHA_CHEIA\n         BCTR  1,0\nLINHA_CHEIA EQU *\n         SR    1,3\n         EX    1,MVC_LINHA\n         AR    9,1\n         LA    9,1(9)\n         B     GETIN\nMVC_LINHA MVC  0(0,9),0(3)\nTRT_SYSIN TRT  0(0,3),TAB_TRT\nENDIN    EQU   *\n         CLOSE (SYSIN)\n         MVC   0(4,9),FF\n         L     13,SA+4\n         LM    14,12,12(13)\n         BR    14\n         LTORG\nSA       DS    18F\nFF       DC    4X'FF'\nSPACE    DC    CL72' '\nTAB_TRT  DC    256X'00'\n         ORG   TAB_TRT+C' '\n         DC    C' '\n         ORG\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GM),EODAD=ENDIN\n         END   LE_SYSIN\n***********************************************************************\n* ROTINA PARA TRATAMENTO DO STORAGE GROUP                             *\n***********************************************************************\nSTGFIND  CSECT\nSTGFIND  AMODE 31\nSTGFIND  RMODE 24\n         SAVE (14,12)\n         LR   11,15\n         USING STGFIND,11\n         ST   13,SA+4\n         LA   2,SA\n         ST   2,8(13)\n         LR   13,2\n         LM   4,6,0(1)\n         ST   1,PARM_ADDR\n         MVC  VOLUME_ADDR,0(4)\n         MVC  VOLUME_CNT,0(5)\n         ST   6,SYSIN_ADDR\n         LR   10,9\n***********************************************************************\n* OBTEM TAMANHO E NOME DO STORAGE GROUP SOLICITADO                    *\n***********************************************************************\nCLI_STORGRP EQU *\n         BLANK STORGRP_NAME\n         TRT   0(9,10),TAB_TRT\n         BZ    RETURN\n         STC   2,BYTE\n         LR    3,1\n         L     6,SYSIN_ADDR\n         ST    3,0(6)\n         SR    1,10\n         STH   1,STORGRP_LENGTH\n         BCTR  1,0\n         EX    1,MVC_STORGRP\n***********************************************************************\n* INICIA SSOB E SSIB PARA CHAMADA AO SMS SUBSYSTEM                    *\n***********************************************************************\n         L     15,=A(INIT_SSSA)\n         BALR  14,15\n         USING IEFSSSA,5\n         MVI   SSSA1TYP,SSSA1SGV\n         MVC   SSSA1NML,STORGRP_LENGTH\n         LH    15,STORGRP_LENGTH\n         BCTR  15,0\n         EX    15,MVC_SSA\n         MVI   SSSA1CNT+3,1\n         XC    SSSA1LEN,SSSA1LEN\n         XC    SSSA1PTR,SSSA1PTR\n         LA    1,SMS_SSOB\n         IEFSSREQ\n         LTR   15,15\n         BNZ   ERRO_SMS\n         CLC   SSSARSN,=F'5002'\n         BE    RETURN\n         L     6,SSSA1PTR\n         USING VLD,6\n***********************************************************************\n* INICIA LOOP PARA OBTENCAO DOS VOLUMES ESPEC\u00edFICOS                   *\n***********************************************************************\n         L     7,VLDPLEN\n         L     9,VLDPCNT\n         LA    5,VLDEF\n         L     8,VOLUME_ADDR\n         USING VOLUME_DSECT,8\n         LH    15,VOLUME_CNT\n         MH    15,=H'7'\n         LA    8,0(15,8)\nLOOP_ADDVOL EQU *\n         MVI   VOLUME_LENGTH,X'05'\n         MVC   VOLUME_NAME,2(5)\n         LA    8,7(8)\n         AR    5,7\n         BCT   9,LOOP_ADDVOL\n         LH    15,VOLUME_CNT\n         L     9,VLDPCNT\n         AR    15,9\n         STH   15,VOLUME_CNT\n         CLI   BYTE,C')'\n         BE    RETURN\n         LA    10,1(3)\n         B     CLI_STORGRP\n***********************************************************************\n* TRATA ERRO NO SMS                                                   *\n***********************************************************************\nERRO_SMS EQU   *\n         MVC   WTOE+50(8),STORGRP_NAME\nWTOE     WTO   'IEB0987E - ACCESS ERROR ON SMS TO STORGRP(XXXXXXXX)'\n         LA    15,8\n         B     RETURNE\n***********************************************************************\n* RETORNA AO PROGRAMA PRINCIPAL                                       *\n***********************************************************************\nRETURN   EQU   *\n         XR    15,15\nRETURNE  EQU   *\n         L     1,PARM_ADDR\n         LM    4,6,0(1)\n         MVC   0(2,5),VOLUME_CNT\n         L     13,SA+4\n         L     14,12(13)\n         LM    0,12,20(13)\n         BSM   0,14\nMVC_SSA     MVC SSSA1NAM(0),STORGRP_NAME\nMVC_STORGRP MVC STORGRP_NAME(0),0(10)\n***********************************************************************\n* ROTINA PARA INICIALIZACAO DA SSSA PARA CHAMADA AO SMS SSI           *\n***********************************************************************\nINIT_SSSA EQU  *\n         STM   14,15,SALVA14\n         L     4,SMS_SSOB\n         USING SSOB,4\n         XC    SSOB_WRK,SSOB_WRK\n         MVI   SSOBLEN+1,SSOBHSIZ\n         MVC   SSOBID,=C'SSOB'\n         MVI   SSOBFUNC+1,SSOBSSMS\n         L     1,CVTPTR\n         L     1,CVTJESCT-CVTMAP(1)\n         L     1,JESCTEXT-JESCT(1)\n         MVC   SSOBSSIB,JESSMSIB-JESPEXT(1)\n         LA    5,SSSA_WRK\n         ST    5,SSOBINDV\n         LA    0,SSSALN+SSSA1LN\n         STH   0,SSSALEN\n         MVC   SSSAID,=C'SSSA'\n         MVI   SSSAVER+1,SSOBSSVR\n         MVI   SSSASFN+1,SSSAACTV\n         MVI   SSSAIFLG,SSSANAUT\n         MVI   SSSA1CNT+3,1\n         LM    14,15,SALVA14\n         BR    14\n         LTORG\n***********************************************************************\n* DEFINE AREAS DE MEMORIA NECESSARIAS AO PROGRAMA                     *\n***********************************************************************\nSA           DS 18F\nSALVA14      DS 2F\nPARM_ADDR    DS F\nSYSIN_ADDR   DS F\nVOLUME_ADDR  DS F\nVOLUME_CNT   DS H\nBYTE         DS X\nSTORGRP_NAME DS CL8\nSTORGRP_LENGTH DS H\nTAB_TRT  DC    256X'00'\n         ORG   TAB_TRT+C')'\n         DC    C')'\n         ORG   TAB_TRT+C','\n         DC    C','\n         ORG\n***********************************************************************\n* AREA DE RETORNO PARA O SMS APONTADA PELA SMS_SSOB                   *\n***********************************************************************\nSMS_SSOB DC    A(SSOB_SMS+X'80000000')\nSSOB_SMS DS    0F\nSSOB_WRK DC    (SSOBHSIZ)X'00'\nSSIB_SMS DS    0F\n         DC    (SSIBSIZE)X'00'\nSSSA_WRK DS    XL(SSSALN+SSSA1LN)\n***********************************************************************\n* DEFINE MAPEAMENTO PARA ARRAY DE VOLUMES                             *\n***********************************************************************\nVOLUME_DSECT  DSECT\nVOLUME_LENGTH DS    XL1\nVOLUME_NAME   DS    CL6\n         IEFSSSA                       SSOB EXTENSION FOR SMS\n         IGDVLD\n         IEFSSOBH\n         IEFJSSIB\n         IEFJESCT\n         CVT  DSECT=YES\n         END  STGFIND\n***********************************************************************\n* CONTROL SECTION TO DEFINE MESSAGES                                  *\n***********************************************************************\nPUTMSG   CSECT\nPUTMSG   AMODE 31\nPUTMSG   RMODE 24\nIEB001E  DC    CL133' IEB001E - FOUND INVALID XXXXX KEYWORD'\nIEB002E  DC    CL133' IEB002E - DYNAMIC ALLOCATION ERROR - XXXXX VOLUMEX\n                XXXXXX'\nIEB003W  DC    CL133' IEB003W - NO VOLUMES MATCH SELECT CRITERIA'\nIEB004E  DC    CL133' IEB004E - ERROR ON VTOC READ ACCESS FOR PROCESSEDX\n               VOLUME'\nIEB005E  DC    CL133' IEB005E - MODEL NOT FOUND FOR UCB VOLUME'\nIEB006I  DC    CL133' IEB006I - PROCESS COMPLETED, MAXIMUM RETURN CODE X\n               WAS: XXX'\nIEB007E  DC    CL133' IEB007E - BLANK CONTROL CARD FOUND IS INVALID'\nIEB008I  DC    CL133' IEB008I - VOLUME XXXXXX SUCCESSFULLY PROCESSED'\nIEB009I  DC    CL133' IEB009I - VOLUME XXXXXX DYNAMIC ALLOCATED ON UCB X\n               ADDRESS    (XXXX)'\nIEB010E  DC    CL133' IEB010E - MOUNT ATTIBUTED  FOR VOL  XXXXXX CAN NOX\n               T BE IDENTIFIED'\nIEB110E  DC    CL133' IEB110E - VVDS XXX ERROR ON ACCESS FOR VOLUME XXXX\n               XXX'\nIEB111E  DC    CL133' IEB111E - FOUND A VSAM DATA SET ON VOLUME -  XXXXX\n               XX BUT VVDS CAN NOT BE PROCESSED'\nCABECA1  DC    CL133'1DASD SPACE REPORT'\nCABECA2  DC    CL133' DATE - DD/MM/AAAA   TIME - HH.MM.SS      PROGRAM X\n                IEBLIST                                  PAG -     '\nCABECA3  DC    CL133' --------------- DATA SET NAME -------------- VOLUX\n               ME -CRE DATE- -REF DATE- CAT SMS EXT DSORG RECFM  LRECL X\n               BLKSZ TRACKS  USED'\nCABECA4  DC    CL133' TOTALS FOR VOLUME  XXXXXX TYPE - XXXX'\nCABECA5  DC    CL133'  -DSN- --PS- --PO- --IS- --DA- --VS- --UN- TRACKSX\n                USED- FREE--SPACE'\nCABECA6  DC    CL133' TOTAL DASD SPACE COLLECTED'\nCABECA7  DC    CL133' SCAN OF   XXXXXX VOLUMES AND PROCESSED XXXXXX VOLX\n               UMES'\nCABECA8  DC    CL133' '\nCABECA9  DC    CL133' DATA SETS RESUME'\nCABECA10 DC    CL133'  --DSN-- ---PS-- ---PO-- ---IS-- ---DA-- ---VS-- X\n               ---UN-- TRACKS A- TRACKS U- -FREE-SPACE-CYL/TRK'\nIEB011E  DC    CL133' IEB011E - INITIAL SCAN ERROR TO VOLUMES TO PROCESX\n               S'\nIEB012E  DC    CL133' IEB012E - ERROR DURING ALL FREE SPACE OBTAIN ON  X\n               VOLUME XXXXXX'\nIEB013E  DC    CL133' IEB013E - VTOC OF VOLUME XXXXXX NOT INDEXED'\nIEB014I  DC    CL133' IEB014I - A TOTAL OF  XXXXXX DATA SET ON VOLUME XX\n               XXXXX'\nIEB025E  DC    CL133' IEB025E - VVDS READ IS NOT POSSIBLE BECAUSE IEBLIX\n               ST NOT AUTHORIZED'\nIEB026E  DC    CL133' IEB026I - IEBLIST IS RUNNING AUTHORIZED'\nIEB010I  DC    CL133' IEB010I - VVDS ON VOLUME XXXXXX CAN NOT BE ALLOCAX\n               TED'\nIEB112E  DC    CL133' IEB112E - ERRON ON SEEK TO READ A FORMAT 3 TO VOLX\n               UME XXXXXX'\nIEB113E  DC    CL133' IEB113E - ERROR ON ACCES TO FORMAT 3 ON VOLUME XXX\n               XXXX'\nIEB114E  DC    CL133' IEB114E - VTOC DD STATEMENT MISSING FOR VOLUME XXX\n               XXXX'\nIEB115E  DC    CL133' IEB115E - ERROR FROM CVAFXXX - R15=YYY CVSTAT=ZZZX\n               '\n         END   PUTMSG\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IGC0025E": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x97\\x17_\\x00\\x97\\x17_\\x17\\x16\\x00\\x16\\x00\\x16\\x00\\x00\\xc9\\xc2\\xd4\\xd9\\xc9\\xc3@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1997-06-24T00:00:00", "modifydate": "1997-06-24T17:16:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "IBMRIC"}, "text": "IGC0025E CSECT\n         USING  IGC0025E,6\n         LA     15,8\n         C      0,ONE\n         BLR    14\n         C      0,TWO\n         BHR    14\n         USING  TCB,4\n         L      4,TCBRBP\n         ICM    4,7,RBLINKB-RBBASIC(4)\n         LA     2,RBOPSW+1-RBBASIC(,4)\n         XR     15,15\n         BCT    0,PROBSTAT\n         NI     0(2),255-RBOPSWPS\n         BR     14\nPROBSTAT OI     0(2),RBOPSWPS\n         BR     14\nONE      DC     F'1'\nTWO      DC     F'2'\n         IKJTCB LIST=YES\n         IHARB  LIST=YES\n         END    IGC0025E\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JULGREG": {"ttr": 2310, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   JULGREG &JULGRIN,&JULGROU,&DOUBLE\n*        UTILIZA REGISTRADORES  15, 0 & 1\n*        &JULGRIN - 7 CARACTERES\n*        &JULGROU - 8 CARACTERES\n         LA    15,0\n         PACK  &DOUBLE+0(8),&JULGRIN+0(4)\n         DP    &DOUBLE+0(8),=P'4'             DIVIDE ANO POR QUATRO,\n         CLI   &DOUBLE+0+7,X'0C'              SE BISSEXTO,\n         BNE   *+8\n         MVI   *+82,X'1D'                     CORRIGE MES FEVEREIRO.\n         PACK  &DOUBLE+0(8),&JULGRIN+4(3)\n         CVB   0,&DOUBLE                      R0 -  DIA JULIANO.\n         LA    1,0\n         LA    1,1(1)\n         IC    15,*+58(1)\n         CR    0,15\n         BNH   *+10\n         SR    0,15\n         B     *-16\n         CVD   0,&DOUBLE                      R0 DIA GREGORIANO\n         UNPK  &JULGROU+0(2),&DOUBLE+6(2)\n         OI    &JULGROU+1,X'F0'\n         CVD   1,&DOUBLE                      R4 MES GREGORIANO\n         UNPK  &JULGROU+2(2),&DOUBLE+6(2)\n         OI    &JULGROU+3,X'F0'\n         MVC   &JULGROU+4(4),&JULGRIN\n         MVI   *+10,X'1C'\n         B     *+18\n         DC    XL13'001F1C1F1E1F1E1F1F1E1F1E1F'\n         DS    C\n         DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PERFORM": {"ttr": 2312, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x95\\x07_\\x00\\x98\\x12\\x7f\\x16%\\x00\\r\\x00\\r\\x00\\x00\\xc9\\xc2\\xd4\\xd9\\xc9\\xc3@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1995-03-16T00:00:00", "modifydate": "1998-05-07T16:25:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "IBMRIC"}, "text": "         MACRO\n&NAME    PERFORM &LABEL\n*\n         AIF   ('&LABEL' EQ '').E1\n*\n&NAME    ST    10,F&SYSNDX              SALVA REGISTRADOR DE DESVIO\n         B     PERF&SYSNDX\nF&SYSNDX DS    F\nPERF&SYSNDX BAL   10,&LABEL\n         L     10,F&SYSNDX\n         AGO   .END\n.E1      MNOTE 8,'*** LABEL NAO PREENCHIDO ***'\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPACE": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x00\\x00\\x99\\x10?\\x01\\x00\"\\x9f\\x14Q\\x03o\\x00\\xbe\\x00\\x00\\xe7\\xc9\\xc2\\xd4\\xf0\\xf0\\xf1@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1999-04-13T00:00:00", "modifydate": "2000-08-16T14:51:00", "lines": 879, "newlines": 190, "modlines": 0, "user": "XIBM001"}, "text": "SPACE    CSECT\nSPACE    AMODE 31\nSPACE    RMODE 24\n         PRINT NOGEN\n         SAVE  (14,12)\n         LR    11,15\n         USING SPACE,11,12\n         LA    12,1\n         LA    12,4095(11,12)\n         LA    2,SA\n         ST    13,SA+4\n         ST    2,8(13)\n         LR    13,2\n***********************************************************************\n* TRATA OS SUBCOMANDOS PASSADOS PELO TMP                              *\n***********************************************************************\n         LR    9,1\n         ST    9,CPPL_PTR\n         USING CPPL,9\n         LA    2,DYN_CSPL\n         ST    2,CSPL_PTR\n         USING CSPL,2\n         MVC   CSPLCBUF,CPPLCBUF\n         LA    4,OUT_AREA\n         ST    4,CSPLOA\n         MVC   CSPLUPT,CPPLUPT\n         MVC   CSPLECT,CPPLECT\n         LA    4,ECB\n         ST    4,CSPLECB\n         LA    4,FLAGWORD\n         ST    4,CSPLFLG\n         XC    ECB,ECB\n         CALLTSSR EP=IKJSCAN,MF=(E,CSPL)\n         L     2,CPPLCBUF\n***********************************************************************\n* CARREGA OS PROGRAMAS PARA NTERFACE ISPF                             *\n***********************************************************************\n         LOAD EP=ISPEXEC\n         ST   0,ISPEXEC@\n         LOAD EP=ISPLINK\n         ST   0,ISPLINK@\n         LOAD EP=SPACEDS\n         ST   0,SPACEDS@\n***********************************************************************\n* GERA AS VARIAVEIS PARA O ISPF                                       *\n***********************************************************************\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST0,ZCMD,TYPE,LEN20),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST1,PVOL,TYPE,LEN6),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST2,PUNIT,TYPE,LEN4),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST3,PADDR,TYPE,LEN4),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST4,PCFREE,TYPE,LEN5),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST5,PTFREE,TYPE,LEN5),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST6,PLCFREE,TYPE,LEN5),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST7,PLTFREE,TYPE,LEN5),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST8,PCTOT,TYPE,LEN5),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST9,PCTFREE,TYPE,LEN3),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST10,PFRAGI,TYPE,LEN3),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST11,PEXTNS,TYPE,LEN3),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST12,PMNTT,TYPE,LEN5),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST13,POPT,TYPE,LEN1),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST14,PSTORGRP,TYPE,LEN8),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST15,PSTSTG,TYPE,LEN2),VL\n*/*******************************************************************/*\n*/* CRIA TABELA PARA MOSTRAR O RESULTADO DA PESQUISA                */*\n*/*******************************************************************/*\nCRIA_TAB EQU   *\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL3,BUF3),VL\n         LTR   15,15\n         BZ    VER_PARM\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL6,BUF6),VL\n         B     CRIA_TAB\n***********************************************************************\n* TRATA O PARAMETRO PASSADO                                           *\n***********************************************************************\nVER_PARM EQU   *\n         LH    3,0(2)\n         LTR   3,3\n         BZ    ENDPARM\n         LH    9,2(2)\n         LA    9,4(2,9)\n         CLI   0(9),C' '\n         BE    ENDPARM\n         LR    1,3\n         SH    1,=H'5'\n         EX    1,UPPER_CASE\n         B     CLI\nUPPER_CASE OC  0(0,9),=50X'40'\n***********************************************************************\n* COMPARA O QUE FOI PASSADO POR PARM COM O ACEITAVEL                  *\n***********************************************************************\nCLI      EQU   *\n         CLC   0(3,9),=CL3'ALL'\n         BE    ENDPARM\n         CLC   0(4,9),=CL4'VOL('\n         BE    #VOL\n         CLC   0(4,9),=CL4'ADD('\n         BE    #ADD\n         CLC   0(4,9),=CL4'MNT('\n         BE    #MNT\n         CLC   0(5,9),=CL5'UNIT('\n         BE    #UNIT\n         CLC   0(3,9),=CL3'SG('\n         BE    #SG\n         CLI   0(9),C','\n         BNE   ERRO_PARM\n         LA    9,1(9)\n         B     CLI\nERRO_PARM EQU  *\n         MVC   WTO001E+30(8),0(9)\nWTO001E  WTO   'SPACE001E - PARAMETRO XXXXXXXX PASSADO ESTA INVALIDO'\n         B     END_PROGRAM\nEND_CLI  EQU   *\n         CR    9,3\n         BNL   ENDPARM\n         B     CLI\n***********************************************************************\n* TRATA A SELECAO POR STORAGE GROUP                                   *\n***********************************************************************\n#SG      EQU   *\n         OI    FLAG,X'40'\n         LA    9,3(9)\n         XR    15,15\n         LA    8,STOR_GROUP_NAME\n         BLANK STOR_GROUP_NAME\n***********************************************************************\n* OBTEM TAMANHO E NOME DO STORAGE GROUP SOLICITADO                    *\n***********************************************************************\nCLC_STORGRP EQU *\n         CLI   0(9),C','\n         BE    END_STORGRP\n         CLI   0(9),C')'\n         BE    END_STORGRP\n         MVC   0(1,8),0(9)\n         LA    9,1(9)\n         LA    8,1(8)\n         LA    15,1(15)\n         B     CLC_STORGRP\n***********************************************************************\n* INICIA SSOB E SSIB PARA CHAMADA AO SMS SUBSYSTEM                    *\n***********************************************************************\nEND_STORGRP EQU *\n         STH    15,STOR_GROUP_LENGTH\n         PERFORM INIT_SSSA\n         USING IEFSSSA,5\n         MVI   SSSA1TYP,SSSA1SGV\n         MVC   SSSA1NML,STOR_GROUP_LENGTH\n         BCTR  15,0\n         EX    15,MVCSSA\n         MVI   SSSA1CNT+3,1\n         XC    SSSA1LEN,SSSA1LEN\n         XC    SSSA1PTR,SSSA1PTR\n         LA    1,SMS_SSOB\n         IEFSSREQ\n         LTR   15,15\n         BNZ   DISPLAY_TAB\n         CLC   SSSARSN,=F'5002'\n         BE    STOR_GROUP_NOTFOUND\n         L     6,SSSA1PTR\n         USING VLD,6\n***********************************************************************\n* INICIA LOOP PARA OBTENCAO DOS VOLUMES ESPEC\u00edFICOS                   *\n***********************************************************************\n         L     7,VLDPLEN\n         L     9,VLDPCNT\n         LA    8,VLDEF\n         ST    9,STOR_COUNT\n         LR    1,9\n         MH    1,=H'7'\n         ST    1,STOR_LENGTH\n         STORAGE OBTAIN,LENGTH=STOR_LENGTH\n         ST    1,STOR_ADDR\nLOOP_ADDVOL EQU *\n         MVI   0(1),X'05'\n         MVC   1(6,1),2(8)\n         LA    1,7(1)\n         AR    8,7\n         BCT   9,LOOP_ADDVOL\n         OI    FLAG,X'04'\n         B     ENDPARM\nMVCSSA   MVC   SSSA1NAM(0),STOR_GROUP_NAME\n***********************************************************************\n* TRATA A SELECAO POR TIPO DE MOUNT DO VOLUME                         *\n***********************************************************************\n#UNIT    EQU   *\n         OI    FLAG,X'01'\n         LA    9,5(9)\n         CLC   0(4,9),=CL4'3390'\n         BE    UNIT_VALIDO\n         CLC   0(4,9),=CL4'3380'\n         BE    UNIT_VALIDO\n         CLC   0(4,9),=CL4'9345'\n         BE    UNIT_VALIDO\n         CLC   0(4,9),=CL4'3375'\n         BE    UNIT_VALIDO\n         MVC   WTO004E+25(4),0(9)\nWTO004E  WTO   'SPACE004E - UNIT XXXX NAO EH VALIDO'\n         B     END_PROGRAM\nUNIT_VALIDO EQU *\n         MVC   TIPO_UNIT,0(9)\n         LA    9,5(9)\n         B     END_CLI\n***********************************************************************\n* TRATA A SELECAO POR TIPO DE MOUNT DO VOLUME                         *\n***********************************************************************\n#MNT     EQU   *\n         OI    FLAG,X'02'\n         LA    9,4(9)\n         CLC   0(3,9),=CL3'PRV'\n         BE    MOUNT_VALIDO\n         CLC   0(3,9),=CL3'STG'\n         BE    MOUNT_VALIDO\n         CLC   0(3,9),=CL3'PUB'\n         BE    MOUNT_VALIDO\nWTO003E  WTO   'SPACE003E - TIPO DE MOUNT SOLICITADO NAO E VALIDO'\n         B     END_PROGRAM\nMOUNT_VALIDO EQU *\n         MVC   TIPO_MOUNT,0(9)\n         LA    9,4(9)\n         B     END_CLI\n***********************************************************************\n* TRATA A SELECAO POR ENDERECO DE VOLUMES                             *\n***********************************************************************\n#ADD     EQU   *\n         OI    FLAG,X'08'\n         LA    9,4(9)\n         LA    1,LOW_ADDR\n         BLANK LOW_ADDR\n         BLANK HI_ADDR\nMVC_ADDR EQU *\n         CLI   0(9),C')'\n         BE    ENDADD\n         CLI   0(9),C'-'\n         BE    END_LOW\n         MVC   0(1,1),0(9)\n         LA    9,1(9)\n         LA    1,1(1)\n         B     MVC_ADDR\nEND_LOW  EQU   *\n         LA    1,HI_ADDR\n         LA    9,1(9)\n         B     MVC_ADDR\nENDADD   EQU   *\n         LA    9,1(9)\n         CLC   HI_ADDR,=CL4' '\n         BNE   *+10\n         MVC   HI_ADDR,LOW_ADDR\n         TR    HI_ADDR,TABMASK\n         TR    LOW_ADDR,TABMASK\n         B     END_CLI\n***********************************************************************\n* TRATA A SELECAO DE VOLUMES PARA PROCESSAMENTO                       *\n***********************************************************************\n#VOL     EQU   *\n         LA    9,4(9)\nVALIDA_VOLUME EQU *\n         XR    15,15\n         BLANK VOLUME_NAME\n         LA    8,VOLUME_NAME\n         PERFORM VERIFICA_SELECT_SMS\nCLC_END_VOLUME EQU *\n         CLI   0(9),C','\n         BE    NEXT_VOLUME\n         CLI   0(9),C')'\n         BE    END_VOLUME\n         CLI   0(9),C' '\n         BE    END_VOLUME\n         MVC   0(1,8),0(9)\n         LA    15,1(15)\n         LA    9,1(9)\n         LA    8,1(8)\n         B     CLC_END_VOLUME\nNEXT_VOLUME EQU *\n         LA    9,1(9)\n         LTR   15,15\n         BZ    VALIDA_VOLUME\n         PERFORM ADD_VOLUME\n         B     VALIDA_VOLUME\nEND_VOLUME EQU *\n         LA    9,1(9)\n         LTR   15,15\n         BZ    END_CLI\n         PERFORM ADD_VOLUME\n         B     END_CLI\nADD_VOLUME EQU *\n         OI    FLAG,X'04'\n         BCTR  15,0\n         STCM  15,1,VOLUME_LENGTH\n         LA    8,VOLUME_STACK\n         XR    15,15\n         ICM   15,1,VOLUME_CNT\n         MH    15,=H'7'\n         LA    8,0(8,15)\n         MVC   0(7,8),VOLUME\n         LA    15,1(15)\n         STCM  15,1,VOLUME_CNT\n         BLANK VOLUME\n         BR    10\n***********************************************************************\n* ROTINA PARA INICIALIZACAO DA SSSA PARA CHAMADA AO SMS SSI           *\n***********************************************************************\nINIT_SSSA EQU  *\n         L     4,SMS_SSOB\n         USING SSOB,4\n         XC    SSOB_WRK,SSOB_WRK\n         MVI   SSOBLEN+1,SSOBHSIZ\n         MVC   SSOBID,=C'SSOB'\n         MVI   SSOBFUNC+1,SSOBSSMS\n         L     1,CVTPTR\n         L     1,CVTJESCT-CVTMAP(1)\n         L     1,JESCTEXT-JESCT(1)\n         MVC   SSOBSSIB,JESSMSIB-JESPEXT(1)\n         LA    5,SSSA_WRK\n         ST    5,SSOBINDV\n         LA    0,SSSALN+SSSA1LN\n         STH   0,SSSALEN\n         MVC   SSSAID,=C'SSSA'\n         MVI   SSSAVER+1,SSOBSSVR\n         MVI   SSSASFN+1,SSSAACTV\n         MVI   SSSAIFLG,SSSANAUT\n         MVI   SSSA1CNT+3,1\n         BR    10\n***********************************************************************\n* TRATA A SELECAO DE VOLUMES PARA PROCESSAMENTO                       *\n***********************************************************************\nVERIFICA_SELECT_SMS EQU *\n         CLC   0(5,9),=CL5'*SMS*'\n         BE    VALIDA_SMS\n         CLC   0(7,9),=CL7'*NOSMS*'\n         BE    VALIDA_NOSMS\n         BR    10\nVALIDA_SMS EQU *\n         LA    9,5(9)\n         OI    FLAG,X'10'\n         BR    10\nVALIDA_NOSMS EQU *\n         LA    9,7(9)\n         OI    FLAG,X'20'\n         BR    10\n***********************************************************************\n* PESQUISA NA TABELA DE UCB O VOLUME                                  *\n***********************************************************************\nENDPARM  EQU   *\n         XC    AREA,AREA\nPESQUCB  EQU   *\n         UCBSCAN COPY,                                                 X\n               WORKAREA=AREA,                                          X\n               UCBAREA=UCBAREA,                                        X\n               DEVCLASS=DASD,                                          X\n               RANGE=ALL,                                              X\n               DYNAMIC=YES\n         LTR   15,15\n         BNZ   DISPLAY\n         LA    8,UCBAREA\n         USING UCBMAP,8\n***********************************************************************\n* VERIFICA SE O VOLUME ENCONTRA-SE ONLINE                             *\n***********************************************************************\n         TM    UCBSTAT,X'80'\n         BNO   PESQUCB\n***********************************************************************\n* TESTA SE FOI FEITA SELECAO POR NOME DE VOLUME                       *\n***********************************************************************\n         TM    FLAG,X'04'\n         BNO   NEXT\n***********************************************************************\n* LOOP DE COMPARACAO COM O NOME DO VOLUME INFORMADO                   *\n***********************************************************************\n         TM    FLAG,X'40'\n         BNO   NO_STOR_GROUP\n         L     1,STOR_ADDR\n         L     15,STOR_COUNT\n         B     CLC_VOLUME\nNO_STOR_GROUP EQU *\n         ICM   15,1,VOLUME_CNT\n         LA    1,VOLUME_STACK\nCLC_VOLUME EQU *\n         XR    2,2\n         ICM   2,1,0(1)\n         EX    2,CLCVOL\n         BE    NEXT\n         LA    1,7(1)\n         BCT   15,CLC_VOLUME\n         B     PESQUCB\nCLCVOL   CLC   1(0,1),UCBVOLI\n***********************************************************************\n* VALIDA OS TIPOS DE VOLUMES POSSIVEIS AO PROCESSAMENTO               *\n***********************************************************************\nNEXT     EQU   *\n         MVC   NOME_VOLUME,UCBVOLI\n         TM    UCBTYP+3,X'04'\n         BNO   *+10\n         MVC   UNIT_VOLUME,=CL4'9345'\n         TM    UCBTYP+3,X'0D'\n         BNO   *+10\n         MVC   UNIT_VOLUME,=CL4'3375'\n         TM    UCBTYP+3,X'0E'\n         BNO   *+10\n         MVC   UNIT_VOLUME,=CL4'3380'\n         TM    UCBTYP+3,X'0F'\n         BNO   *+10\n         MVC   UNIT_VOLUME,=CL4'3390'\n         TM    FLAG,X'01'\n         BNO   VER_MOUNT\n         CLC   TIPO_UNIT,UNIT_VOLUME\n         BNE   PESQUCB\n***********************************************************************\n* VERIFICA O ATRIBUTO DE MONTAGEM DO VOLUME                           *\n***********************************************************************\nVER_MOUNT EQU  *\n         TM    UCBSTAB,X'10'\n         BNO   *+10\n         MVC   MOUNT_VOLUME,=CL5'PRV'\n         TM    UCBSTAB,X'08'\n         BNO   *+10\n         MVC   MOUNT_VOLUME,=CL5'PUB'\n         TM    UCBSTAB,X'04'\n         BNO   *+10\n         MVC   MOUNT_VOLUME,=CL5'STG'\n         TM    FLAG,X'02'\n         BNO   TESTA_ADDR\n         CLC   TIPO_MOUNT,MOUNT_VOLUME\n         BNE   PESQUCB\n***********************************************************************\n* PEGA O ENDERECO DO VOLUME COM 4 DIGITOS E COMPARA COM O INFORMADO   *\n***********************************************************************\nTESTA_ADDR EQU *\n         ST    8,SALVA8\n         UCBDEVN DEVN=FULL,UCBPTR=SALVA8\n         MVC   ADDR_VOLUME,FULL\n         TM    FLAG,X'08'\n         BNO   LSPACE\n         TR    FULL,TABMASK\n         CLC   FULL,LOW_ADDR\n         BL    PESQUCB\n         CLC   FULL,HI_ADDR\n         BH    PESQUCB\n***********************************************************************\n* OBTEM O ESPACO DISPONIVEL NO VOLUME PROCESSADO                      *\n***********************************************************************\nLSPACE   EQU   *\n         OBTAIN SEARCH\n         LTR   15,15\n         BNZ   ERRO_OBTAIN\n***********************************************************************\n* VERIFICA SE O VOLUME E SMS E OBTEM O STORAGE GROUP                  *\n***********************************************************************\nSEARCH_STOR_GROUP EQU *\n         TM    DSCB4+16,X'C0'\n         BNO   VOLUME_NO_SMS\n         TM    FLAG,X'20'\n         BO    PESQUCB\n         PERFORM INIT_SSSA\n         USING IEFSSSA,5\n         MVI   SSSA1TYP,SSSA1VOL       GIVE VOLSER, GET VLD BACK\n         MVI   SSSA1NML+1,6\n         MVC   SSSA1NAM(6),NOME_VOLUME\n         LA    0,SMS_VLD_LEN\n         ST    0,SSSA1LEN             LENGTH OF WORK AREA\n         LA    6,SMS_VLD\n         ST    6,SSSA1PTR             ADDR OF WORK AREA\n         USING VLD,6\n         LA    1,SMS_SSOB             SSOB_PTR\n         IEFSSREQ                  <== CALL SMS\n         LTR   15,15                 SSI OK?\n         BNZ   VOLUME_NO_SMS           NO, JUMP\n         ICM   15,B'1111',SSOBRETN-SSOB+SSOB_SMS\n         BNZ   VOLUME_NO_SMS           BAD, JUMP\n         MVC   PSTORGRP,VLDSTGRP        STORAGE GROUP LENGTH\n***********************************************************************\n* OBTEM O ESTADO DO VOLUME NO STORAGE GROUP                           *\n***********************************************************************\n         ST    8,SALVA8\n         LA    8,VLDEF\n         A     8,VLDSYSOF\n         USING VLDSYSDT,8\n         TM    VLDSTSMS,VLDDISN\n         BO    VOLUME_DISABLE_NEW\n         TM    VLDSTSMS,VLDDIS\n         BO    VOLUME_DISABLE\n         TM    VLDSTSMS,VLDQUIN\n         BO    VOLUME_QUIESCE_NEW\n         TM    VLDSTSMS,VLDQUI\n         BO    VOLUME_QUIESCE\n         TM    VLDSTSMS,VLDENBL\n         BO    VOLUME_ENABLE\n         B     OK_SMS\n***********************************************************************\n* MOVE VALOR OBTIDO DO VOLUME NO STORAGE GROUP PARA O PAINEL          *\n***********************************************************************\nVOLUME_ENABLE EQU *\n         MVC   PSTSTG,=CL2'E '\n         B     OK_SMS\nVOLUME_QUIESCE EQU *\n         MVC   PSTSTG,=CL2'Q '\n         B     OK_SMS\nVOLUME_QUIESCE_NEW EQU *\n         MVC   PSTSTG,=CL2'QN'\n         B     OK_SMS\nVOLUME_DISABLE EQU *\n         MVC   PSTSTG,=CL2'D '\n         B     OK_SMS\nVOLUME_DISABLE_NEW EQU *\n         MVC   PSTSTG,=CL2'DN'\n         B     OK_SMS\nVOLUME_NO_SMS EQU *\n         MVC   PSTSTG,=CL2' '\n         TM    FLAG,X'10'\n         BO    PESQUCB\n         BLANK PSTORGRP\n***********************************************************************\n* TRATA VALORES RELACIONADOS COM O ESPACO DO VOLUME                   *\n***********************************************************************\nOK_SMS   EQU   *\n         L     8,SALVA8\n         XR    15,15\n         ICM   15,3,DSCB4+18\n         CVD   15,DOUBLE\n         SP    DOUBLE,=P'1'\n         MVC   TOT_CYL_VOLUME,MASK5\n         ED    TOT_CYL_VOLUME,DOUBLE+5\n         LSPACE UCB=(8),DATA=LSPTEXT\n         LTR   15,15\n         BNZ   ERRO_LSPACE\n         XR    15,15\n         ICM   15,15,LSPDNEXT\n         CVD   15,DOUBLE\n         MVC   FREE_EXT_VOLUME,MASK5\n         ED    FREE_EXT_VOLUME,DOUBLE+5\n         XR    15,15\n         ICM   15,15,LSPDTCYL\n         CVD   15,DOUBLE\n         MVC   FREE_CYL_VOLUME,MASK5\n         ED    FREE_CYL_VOLUME,DOUBLE+5\n         XR    15,15\n         ICM   15,15,LSPDTTRK\n         CVD   15,DOUBLE\n         MVC   FREE_TRK_VOLUME,MASK5\n         ED    FREE_TRK_VOLUME,DOUBLE+5\n         XR    15,15\n         ICM   15,15,LSPDLCYL\n         CVD   15,DOUBLE\n         MVC   LARG_CYL_VOLUME,MASK5\n         ED    LARG_CYL_VOLUME,DOUBLE+5\n         XR    15,15\n         ICM   15,15,LSPDLTRK\n         CVD   15,DOUBLE\n         MVC   LARG_TRK_VOLUME,MASK5\n         ED    LARG_TRK_VOLUME,DOUBLE+5\n         XR    15,15\n         ICM   15,15,LSPDFRAG\n         CVD   15,DOUBLE\n         MVC   FRAG_IND_VOLUME,MASK5\n         ED    FRAG_IND_VOLUME,DOUBLE+5\n         PERFORM TAB_ADD\n         B     PESQUCB\nTAB_ADD  EQU   *\n         MVC   PVOL,NOME_VOLUME\n         MVC   PUNIT,UNIT_VOLUME\n         MVC   PADDR,ADDR_VOLUME\n         MVC   PMNTT,MOUNT_VOLUME\n         MVC   PCTOT,TOT_CYL_VOLUME+1\n         MVC   PCFREE,FREE_CYL_VOLUME+1\n         MVC   PTFREE,FREE_TRK_VOLUME+1\n         MVC   PLCFREE,LARG_CYL_VOLUME+1\n         MVC   PLTFREE,LARG_TRK_VOLUME+1\n         MVC   PFRAGI,FRAG_IND_VOLUME+3\n         MVC   PEXTNS,FREE_EXT_VOLUME+3\n         PACK  DIVIDE,FREE_CYL_VOLUME+1(5)\n         PACK  DIVISOR,TOT_CYL_VOLUME+1(5)\n         MP    DIVIDE,=P'100'\n         DP    DIVIDE,DIVISOR\n         MVC   FREE_PCT_VOLUME,MASK3\n         ED    FREE_PCT_VOLUME,DIVIDE\n         MVC   PCTFREE,FREE_PCT_VOLUME+1\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL4,BUF4),VL\n         BR    10\n***********************************************************************\n* VERIFICA SE TEM STORAGE A SER LIBERADA                              *\n***********************************************************************\nDISPLAY  EQU   *\n         TM    FLAG,X'40'\n         BNO   DISPLAY_TAB\n         L     1,STOR_ADDR\n         STORAGE RELEASE,LENGTH=STOR_LENGTH,ADDR=(1)\n         B     DISPLAY_TAB\n***********************************************************************\n* TRATA STORAGE GROUP NAO ENCONTRADO                                  *\n***********************************************************************\nSTOR_GROUP_NOTFOUND EQU *\n***********************************************************************\n* MOSTRA O PAINEL COM O RESULTADO OBTIDO                              *\n***********************************************************************\nDISPLAY_TAB EQU *\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL7,BUF7),VL\nDISPLAY_TAB_001 EQU *\n         MVI   POPT,C' '\n         BLANK PUNIT\n         BLANK PVOL\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL8,BUF8),VL\n         LTR   15,15\n         BNZ   END_PROGRAM\n         CLI   POPT,C'S'\n         BE    LINK_SPACEDS\n         LA    3,ZCMD\n***********************************************************************\n* TRATA COMANDO DE CLASSIFICACAO DA TABELA ISPF                       *\n***********************************************************************\nCLC_ZCMD EQU   *\n         CLC   0(4,3),=CL4'SORT'\n         BNE   DISPLAY_TAB_001\n         LA    3,5(3)\n         CLC   0(2,3),=CL2' '\n         BNE   *+14\n         ZAP   DOUBLE,=P'1'\n         B     SORT_COL\n         CLI   1(3),C' '\n         BNE   *+14\n         PACK  DOUBLE,0(1,3)\n         B     SORT_COL\n         PACK  DOUBLE,0(2,3)\nSORT_COL EQU   *\n         LA    4,LIST1\n         CP    DOUBLE,=P'13'\n         BH    DISPLAY_TAB_001\n         CVB   5,DOUBLE\n         BCTR  5,0\n         MH    5,=H'8'\n         AR    4,5\n         MVC   BUF1+22(8),0(4)\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL1,BUF1),VL\n         B     DISPLAY_TAB\nSEARCH   CAMLST SEARCH,F4DSCB,NOME_VOLUME,DSCB4\nERRO_LSPACE EQU *\n         MVC   WTO_LSPACE+49(6),NOME_VOLUME\nWTO_LSPACE WTO   'SPACE002E - ERRO NA LSPACE PARA O VOLUME XXXXXX'\n         B     PESQUCB\nERRO_OBTAIN EQU *\n         MVC   WTO_OBTAIN+53(6),NOME_VOLUME\nWTO_OBTAIN WTO   'SPACE003E - ERRO NO READ DA F4DSCB DO VOLUME XXXXXX'\n         B     PESQUCB\n***********************************************************************\n* CHAMA PROGRAMA PARA VISUALIZACAO DE VOLUME                          *\n***********************************************************************\nLINK_SPACEDS EQU *\n         L     15,SPACEDS@\n         CALL  (15),(PVOL,PUNIT),VL\n         B     DISPLAY_TAB_001\n***********************************************************************\n* DELETA TABELA ISPF E ENCERRA O PROGRAMA                             *\n***********************************************************************\nEND_PROGRAM EQU *\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL5,BUF5),VL\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL6,BUF6),VL\nRETURN   EQU   *\n         L     15,RETCODE\n         L     13,SA+4\n         RETURN (14,12),RC=(15)\n         LTORG\n***********************************************************************\n* DEFINE AREAS CONSTANTES PARA O PROGRAMA                             *\n***********************************************************************\nSA       DC    18F'0'\nDOUBLE   DC    D'0'\nFULL     DC    F'0'\nSALVA8   DC    F'0'\nISPEXEC@ DS    F\nISPLINK@ DS    F\nSPACEDS@ DS    F\nCPPL_PTR DS    F\nCSPL_PTR DS    F\nDYN_CSPL DS    6F\nOUT_AREA DS    2F\nFLAGWORD DS    F\nECB      DS    F\nRETCODE  DC    F'0'\nDEBADDR  DC    F'0'\nUCBADDR  DC    F'0'\nDIVIDE   DS    PL5\nDIVISOR  DS    PL3\nMASK3    DC    X'40202120'\nMASK5    DC    X'402020202120'\nF4DSCB   DC    44X'04'\nDSCB4    DS    CL140\nLOW_ADDR DC    CL4' '\nHI_ADDR  DC    CL4' '\nTIPO_MOUNT DC  CL3' '\nTIPO_UNIT DC  CL4' '\nUCBAREA  DS    CL48\nAREA     DS    CL100\nSTOR_GROUP_LENGTH DS H\nSTOR_GROUP_NAME   DS CL30\nSTOR_COUNT    DS F\nSTOR_LENGTH   DS F\nSTOR_ADDR     DS F\nVOLUME_CNT    DS X\nVOLUME_STACK  DS CL105\nVOLUME        DS 0CL7\nVOLUME_LENGTH DS CL1\nVOLUME_NAME   DS CL6\n         ORG\nFLAG     DS    X\n***********************************************************************\n* DEFINE AREA PARA O ISPF                                             *\n***********************************************************************\nVDEFINE  DC    CL8'VDEFINE'\nTYPE     DC    CL8'CHAR'\nLIST0    DC    CL8'ZCMD'\nLIST1    DC    CL8'PVOL'\nLIST2    DC    CL8'PUNIT'\nLIST3    DC    CL8'PADDR'\nLIST12   DC    CL8'PMNTT'\nLIST8    DC    CL8'PCTOT'\nLIST4    DC    CL8'PCFREE'\nLIST5    DC    CL8'PTFREE'\nLIST11   DC    CL8'PEXTNS'\nLIST6    DC    CL8'PLCFREE'\nLIST7    DC    CL8'PLTFREE'\nLIST9    DC    CL8'PCTFREE'\nLIST10   DC    CL8'PFRAGI'\nLIST14   DC    CL8'PSTORGRP'\nLIST15   DC    CL8'PSTSTG'\nLIST13   DC    CL8'POPT'\nLEN1     DC    F'3'\nLEN2     DC    F'3'\nLEN3     DC    F'3'\nLEN4     DC    F'4'\nLEN5     DC    F'5'\nLEN6     DC    F'6'\nLEN8     DC    F'8'\nLEN20    DC    F'20'\nZCMD     DC    CL20' '\nPVOL     DC    CL6' '\nPUNIT    DC    CL4' '\nPADDR    DC    CL4' '\nPCFREE   DC    CL5' '\nPTFREE   DC    CL5' '\nPLCFREE  DC    CL5' '\nPLTFREE  DC    CL5' '\nPCTOT    DC    CL5' '\nPCTFREE  DC    CL3' '\nPFRAGI   DC    CL3' '\nPEXTNS   DC    CL3' '\nPMNTT    DC    CL5' '\nPSTORGRP DC    CL8' '\nPSTSTG   DC    CL8' '\nPOPT     DC    CL1' '\n*/*******************************************************************/*\n*/* DEFINE AREAS UTILIZADAS PELO ISPF                               */*\n*/*******************************************************************/*\nBUFL1    DC    A(L'BUF1)\nBUFL2    DC    A(L'BUF2)\nBUFL3    DC    A(L'BUF3)\nBUFL4    DC    A(L'BUF4)\nBUFL5    DC    A(L'BUF5)\nBUFL6    DC    A(L'BUF6)\nBUFL7    DC    A(L'BUF7)\nBUFL8    DC    A(L'BUF8)\nBUFL9    DC    A(L'BUF9)\nBUF1     DC    C'TBSORT TBSPACE FIELDS(        )'\nBUF2     DC    C'TBOPEN TBSPACE WRITE'                                    000016\nBUF3     DC    C'TBCREATE TBSPACE NAMES(PVOL,PUNIT,PADDR,PCFREE,PTFREE,X  000016\n               PEXTNS,PLCFREE,PLTFREE,PCTOT,PCTFREE,PFRAGI,PMNTT,PSTORGX\n               RP,PSTSTG)'\nBUF4     DC    C'TBADD TBSPACE'\nBUF5     DC    C'TBEND TBSPACE'\nBUF6     DC    C'TBERASE TBSPACE'\nBUF7     DC    C'TBTOP TBSPACE'\nBUF8     DC    C'TBDISPL TBSPACE PANEL(SPACP001)'                         000016\nBUF9     DC    C'TBGET TBSPACE'                                           000016\n***********************************************************************\n* DEFINE TABELA PARA TRATAMENTO DA MASCARA DE COMPARACAO              *\n***********************************************************************\nTABMASK  DC    256X'00'\n         ORG   TABMASK\n         DC    C'0123456789ABCDEF'\n         ORG   TABMASK+C'*'\n         DC    C'*'\n         ORG   TABMASK+C'%'\n         DC    C'%'\n         ORG   TABMASK+C'/'\n         DC    C'/'\n         ORG   TABMASK+C'A'\n         DC    X'0A0B0C0D0E0F'\n         ORG   TABMASK+C'0'\n         DC    X'00010203040506070809'\n         ORG\n***********************************************************************\n* DEFINE AREAS DE TRABALHO PARA OPERACOES DE CALCULO                  *\n***********************************************************************\nVOLUME_COUNT     DC    PL3'0'\nWTOMSG   WTO   '                                                       X\n                               ',MF=L\n         ORG   WTOMSG+8\nNOME_VOLUME     DC    CL6' '\nUNIT_VOLUME     DC    CL4' '\nADDR_VOLUME     DC    CL4' '\nMOUNT_VOLUME    DC    CL5' '\nFREE_EXT_VOLUME DC    CL6'0'\nFREE_CYL_VOLUME DC    CL6'0'\nFREE_TRK_VOLUME DC    CL6'0'\nFREE_PCT_VOLUME DC    CL4'0'\nLARG_CYL_VOLUME DC    CL6'0'\nLARG_TRK_VOLUME DC    CL6'0'\nFRAG_IND_VOLUME DC    CL6'0'\nTOT_CYL_VOLUME  DC    CL6'0'\n         ORG\n***********************************************************************\n* AREA DE RETORNO DA LSPACE                                           *\n***********************************************************************\nLSPTEXT  DS    CL40\n         ORG   LSPTEXT\nLSPDRETN DS    X\nLSPDSPAC EQU   X'80'\nLSPDF0CN EQU   X'40'\nLSPDVRCN EQU   X'20'\nLSPDSTAT DS    X\nLSPDIXDS EQU   X'80'\nLSPDIXAC EQU   X'40'\nLSPDRSV1 DS    XL2\nLSPDNEXT DS    XL4\nLSPDTCYL DS    XL4\nLSPDTTRK DS    XL4\nLSPDLCYL DS    XL4\nLSPDLTRK DS    XL4\nLSPDF0S  DS    XL4\nLSPDVIRS DS    XL4\nLSPDFRAG DS    XL4\n         ORG\n*************************************************** *******************\n* AREA DE RETORNO PARA O SMS APONTADA PELA SMS_SSOB                   *\n***********************************************************************\nSMS_SSOB DC    A(SSOB_SMS+X'80000000')\nSSOB_SMS DS    0F\nSSOB_WRK DC    (SSOBHSIZ)X'00'\nSSIB_SMS DS    0F\n         DC    (SSIBSIZE)X'00'\nSSSA_WRK DS    XL(SSSALN+SSSA1LN)\nSMS_VLD  DS    XL((VLDEND-VLD)+(VLDEND2-VLDSYSDT))\nSMS_VLD_LEN EQU *-SMS_VLD\n         DSECT\n         UCBMAP\n         IEFSSSA                       SSOB extension for SMS\n         IGDVLD\n         IEFSSOBH\n         IEFJSSIB\n         IEFJESCT\n***********************************************************************\n* DEFINE AREAS DE MAPEAMENTO                                          *\n***********************************************************************\n         IKJCPPL                  COMMAND PROCESSOR PARAMETER LIST\nLCPPL    EQU   *-CPPL             DESCRIBES LENGTH OF THE CPPL\n         CVT  DSECT=YES           CVT NEEDED FOR CALLTSSR\n         IKJCSPL                  COMMAND SCAN PARAMETER LIST\n         IKJCSOA                  COMMAND SCAN OUTPUT AREA\n         END   SPACE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SPACEDS": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1f\\x00\\x00\\x00\\x99\\x11\\x9f\\x00\\x990\\x8f\\x15\\x07\\x03(\\x05W\\x00\\x00\\xe7\\xc9\\xc2\\xd4\\xf0\\xf0\\xf1@@@'", "ispf": {"version": "01.31", "flags": 0, "createdate": "1999-04-29T00:00:00", "modifydate": "1999-11-04T15:07:00", "lines": 808, "newlines": 1367, "modlines": 0, "user": "XIBM001"}, "text": "SPACEDS  CSECT\nSPACEDS  AMODE 31\nSPACEDS  RMODE 24\n         SAVE  (14,12)\n         LR    11,15\n         USING SPACEDS,11,12\n         LA    12,1\n         LA    12,4095(11,12)\n         LA    2,SA\n         ST    13,SA+4\n         ST    2,8(13)\n         LR    13,2\n         LM    2,3,0(1)\n         MVC   NOME_VOLUME,0(2)\n         MVC   UNIT_VOLUME,0(3)\n***********************************************************************\n* CARREGA OS PROGRAMAS PARA USO DO ISPF                               *\n***********************************************************************\n         LOAD  EP=ISPEXEC\n         ST    0,ISPEXEC@\n         LOAD  EP=ISPLINK\n         ST    0,ISPLINK@\n***********************************************************************\n* DEFINE AS VARIAVEIS A SEREM USADAS PELO ISPF                        *\n***********************************************************************\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST0,PVOL1,TYPE,LEN6),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST1,PDSN,TYPE,LEN44),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST2,PORG,TYPE,LEN2),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST3,PALOC,TYPE,LEN5),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST4,PUSE,TYPE,LEN3),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST5,PCDATE,TYPE,LEN10),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST6,PRDATE,TYPE,LEN10),VL\n         L     15,ISPLINK@\n         CALL  (15),(VDEFINE,LIST7,PEXT,TYPE,LEN3),VL\n         MVC   PVOL1,NOME_VOLUME\n***********************************************************************\n* CRIA A TABELA PARA RETORNO DOS ARQUIVOS ENCONTRADOS                 *\n***********************************************************************\nCRIA_TAB EQU   *\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL2,BUF2),VL\n         LTR   15,15\n         BZ    ALLOC\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL3,BUF3),VL\n         LTR   15,15\n         BZ    ALLOC\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL5,BUF5),VL\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL6,BUF6),VL\n         B     CRIA_TAB\n***********************************************************************\n* FAZ ALOCACAO DINAMICA DO VOLUME A SER PROCESSADO                    *\n***********************************************************************\nALLOC    EQU   *\n         MVC   DSNVVDS+17(6),NOME_VOLUME\n         MVC   VOLSER+6(6),NOME_VOLUME\n         MVC   UNIT+6(4),UNIT_VOLUME\n         LA    1,ALOC\n         MVC   ALOCTP,=A(VTOCALOC)\n         MVC   ALOCVC,=AL1(1)\n         DYNALLOC\n         LTR   15,15\n         BNZ   END_PROGRAM\n         OI    FLAG_OPEN_VTOC,X'F0'\n         RDJFCB VTOC\n         USING INFMJFCB,2\n         LA    2,JFCBAREA\n         LTR   15,15\n         BNZ   END_PROGRAM\n***********************************************************************\n* ALOCA DINAMICAMENTE A VVDS DO VOLUME A SER PROCESSADO               *\n***********************************************************************\nALOCOK   EQU   *\n         LA    1,ALOC\n         MVC   ALOCTP,=A(VVDSALOC)\n         DYNALLOC\n         LTR   15,15\n         BNZ   DDOK\n         OI    FLAG_OPEN_VVDS,X'F0'\n***********************************************************************\n* TORNA O PROGRAMA AUTORIZADO                                         *\n***********************************************************************\n         LA     0,1\n         SVC    255\n         OI     FLAG_AUTH,X'FF'\n***********************************************************************\n*              OPEN THE VTOC                                          *\n***********************************************************************\nDDOK     EQU   *\n         MVI   JFCBDSNM,X'04'\n         MVC   JFCBDSNM+1(43),JFCBDSNM\n         OI    JFCBTSDM,JFCNWRIT\n         TM    FLAG_OPEN_VTOC,X'F0'\n         BNO   END_PROGRAM\n         OPEN  (VTOC,(INPUT)),TYPE=J\n         LTR   15,15\n         BNZ   END_PROGRAM\n         OI    FLAG_OPEN_VTOC,X'0F'\n         TM    FLAG_OPEN_VVDS,X'F0'\n         BNO   GETDEB\n         OPEN  (VVDS,(INPUT))\n         LTR   15,15\n         BNZ   GETDEB\n         OI    FLAG_OPEN_VVDS,X'0F'\n***********************************************************************\n* LOCALIZA O ENDERECO DA UCB VIA A DEB DO VOLUME                      *\n***********************************************************************\nGETDEB   EQU   *\n         L     1,DCBDEBAD-IHADCB+VTOC              GET A(DEB)\n         ST    1,DEBADDR              SAVE DEB ADDRESS\n         LA    1,DEBUCBAD-DEBDASD+DEBBASND-DEBBASIC(1) GET A(UCB)\n         L     1,0(1)                LOAD UCB ADDRESS\n         ST    1,UCBADDR\n***********************************************************************\n* INICIALIZA O BUFFER LIST HEADER E ELEMENTOS                         *\n***********************************************************************\nIXVTOC   EQU   *\n         LA    4,CVPL\n         USING CVPL$MAP,4\n         MVC   CVDEB,DEBADDR\n         XC    BFLH$DEF(BFL$SIZE),BFLH$DEF\n         LA    1,BFLH$DEF\n         USING BFL$MAP,1\n         MVI   BFLHNOE,BFLE$N\n         OI    BFLHFL,BFLHDSCB         CCHHR OF DSCB TO BE USED\n         LA    2,BFLH$DEF+BFLHLN\n         USING BFLE,2\n         LA    3,DSCB$DEF\n         LA    5,BFLE$N\nBFLE$INT EQU   *\n         OI    BFLEFL,BFLECHR\n         MVI   BFLELTH,DSCB$SIZ\n         ST    3,BFLEBUF\n         LA    2,BFLELN(2)\n         LA    3,DSCB$SIZ(3)\n         BCT   5,BFLE$INT\n         DROP  1,2\n***********************************************************************\n* INICIALIZA O CAMPO DE FILTRO PARA PESQUISA DA VTOC                  *\n***********************************************************************\n         XC    FCL$DEF(FCL$SIZE),FCL$DEF\n         LA    1,FCL$DEF\n         USING FCL$MAP,1\n         MVC   FCLID,FCL$ID\n         MVC   FCLCOUNT,=H'1'\n         LA    2,FCLHDEND\n         USING FCLDSN,2\n         MVI   FCLDSNLG,X'02'\n         LA    3,=C'**'\n         ST    3,FCLDSNA\n         DROP  1,2\n***********************************************************************\n* EMITE A LEITURA INICIAL NA VTOC                                     *\n***********************************************************************\nINITVTIX EQU   *\n         NI    FLAG,X'7F'\n         CVAFFILT ACCESS=READ,FCL=FCL$DEF,BUFLIST=BFLH$DEF,            X\n               MF=(E,CVPL)\nTEST$RET EQU   *\n         LTR   15,15\n         BZ    READLAST\n         CH    15,=H'4'\n         BNE   IXSEQERR\n         CLI   CVSTAT,STAT064\n         BNE   IXSEQERR\n         B     READOK\n***********************************************************************\n* INICIALIZA A LEITURA DO BUFFER DA VTOC E COMECA A PESQUISA          *\n***********************************************************************\nREADLAST EQU   *\n         OI    FLAG,X'80'\nREADOK   EQU   *\n         LA    2,FCL$DEF\n         USING FCL$MAP,2\n         XR    3,3\n         ICM   3,3,FCLDSCBR\n         BZ    TST$RSUM\n         LA    2,DSCB$DEF\n         USING DSCB$MAP,2\n         OI    FLAG,X'40'\nREADVTIX EQU   *\n         LTR   3,3                   CHECK FOR END OF DSCB'S\n         BZ    TST$RSUM                EXIT IF END OF VTOC\n         TM    FLAG,X'40'\n         BO    *+8\n         LA    2,DSCB$SIZ(2)\n         NI    FLAG,X'BF'\n         BCTR  3,0\n         ZAP   CYL_LOW_EXTENT,=P'0'\n         ZAP   CYL_HIGH_EXTENT,=P'0'\n         ZAP   TRK_LOW_EXTENT,=P'0'\n         ZAP   TRK_HIGH_EXTENT,=P'0'\n         CLI   DS1FMTID,0              IS THIS DSCB UNUSED\n         BE    READVTIX                YES - DONT COUNT IT\n         CLI   DS1FMTID,C'1'           IS THIS A FORMAT 1 DSCB\n         BE    FORMAT1\n         CLI   DS1FMTID,C'3'\n         BE    FORMAT3\n         B     READVTIX\n***********************************************************************\n* EMITE RESUME NA CONTINUACAO DA LEITURA DA VTOC                      *\n***********************************************************************\nTST$RSUM EQU   *\n         TM    FLAG,X'80'\n         BO    IXCLOSE\n         CVAFFILT ACCESS=RESUME,FCL=FCL$DEF,BUFLIST=BFLH$DEF,          X\n               FLTAREA=KEEP,MF=(E,CVPL)\n         B     TEST$RET\n***********************************************************************\n* TRATA OS CAMPOS REFERENTES A FORMAT 4 DO VOLUME                     *\n***********************************************************************\nFORMAT4  EQU   *\n         XR    15,15\n         ICM   15,3,20(2)\n         CVD   15,DOUBLE\n         MVC   TRK_CYL,DOUBLE+6\n         B     READVTIX\n***********************************************************************\n* TRATA OS CAMPOS REFERENTES A FORMAT 3 DO ARQUIVO                    *\n***********************************************************************\nFORMAT3  EQU   *\n         TM    FMT3,X'FF'\n         BNO   READVTIX\n         NI    FMT3,X'00'\n         LA    5,4(2)\n         XR    6,6\n         ICM   6,1,EXTNTS\n         LTR   6,6\n         BZ    READVTIX\n         CH    6,=H'4'\n         BH    ADDFMT3X\n         BAL   14,ADDCYL\n         B     PRINTL\nADDFMT3X EQU   *\n         SH    6,=H'4'\n         STCM  6,1,EXTNTS\n         LA    6,4\n         BAL   14,ADDCYL\n         LA    5,45(2)\n         XR    6,6\n         ICM   6,1,EXTNTS\n         CH    6,=H'9'\n         BH    ADDFMT31\n         BAL   14,ADDCYL\n         B     PRINTL\nADDFMT31 EQU   *\n         SH    6,=H'9'\n         STCM  6,1,EXTNTS\n         LA    6,9\n         BAL   14,ADDCYL\n         B     READVTIX\n***********************************************************************\n* TRATA OS CAMPOS REFERENTES A FORMAT 1 DO ARQUIVO                    *\n***********************************************************************\nFORMAT1  EQU   *\n         ZAP   TRK_ALOC_EXTENT,=P'0'\n         MVC   PDSN,DS1DSNAM\n***********************************************************************\n* PROCESSA OS EXTENTS DO ARQUIVO                                      *\n***********************************************************************\n         MVC   EXTNTS,DS1NOEPV\n         XR    15,15\n         ICM   15,1,EXTNTS\n         CVD   15,DOUBLE\n         LA    1,PEXT\n         BCTR  1,0\n         MVC   0(4,1),MASK3\n         ED    0(4,1),DOUBLE+6\n***********************************************************************\n* PROCESSA AS DATAS DE CRIACAO E REFERENCIA                           *\n***********************************************************************\n         XR    15,15\n         ICM   15,1,DS1CREDT\n         CVD   15,DOUBLE\n         AP    DOUBLE,=P'1900'\n         UNPK  JULGRIN(5),DOUBLE+5(3)\n         OI    JULGRIN+4,X'F0'\n         XR    15,15\n         ICM   15,3,DS1CREDT+1\n         CVD   15,DOUBLE\n         UNPK  JULGRIN+5(3),DOUBLE+6(2)\n         OI    JULGRIN+7,X'F0'\n         JULGREG JULGRIN+1,JULGROUT,DOUBLE\n         MVC   PCDATE(2),JULGROUT\n         MVC   PCDATE+3(2),JULGROUT+2\n         MVC   PCDATE+6(4),JULGROUT+4\n         XR    15,15\n         ICM   15,1,DS1REFD\n         CVD   15,DOUBLE\n         AP    DOUBLE,=P'1900'\n         UNPK  JULGRIN(5),DOUBLE+5(3)\n         OI    JULGRIN+4,X'F0'\n         XR    15,15\n         ICM   15,3,DS1REFD+1\n         CVD   15,DOUBLE\n         UNPK  JULGRIN+5(3),DOUBLE+6(2)\n         OI    JULGRIN+7,X'F0'\n         JULGREG JULGRIN+1,JULGROUT,DOUBLE\n         MVC   PRDATE(2),JULGROUT\n         MVC   PRDATE+3(2),JULGROUT+2\n         MVC   PRDATE+6(4),JULGROUT+4\n***********************************************************************\n* VERIFICA O TIPO DE ARQUIVO QUE ESTA SENDO TRATADO                   *\n***********************************************************************\n         MVC   PORG,=CL2'UN'\n         TM    DS1DSORG,DS1DSGIS\n         BNO   *+10\n         MVC   PORG,=CL2'IS'\n         TM    DS1DSORG,DS1DSGPS\n         BNO   *+10\n         MVC   PORG,=CL2'PS'\n         TM    DS1DSORG,DS1DSGDA\n         BNO   *+10\n         MVC   PORG,=CL2'DA'\n         TM    DS1DSORG,DS1DSGPO\n         BNO   *+10\n         MVC   PORG,=CL2'PO'\n         TM    DS1DSORG+1,DS1ACBM\n         BO    VVDSREAD\n         B     VERRECFM\n***********************************************************************\n* TRATA ARQUIVO VSAM                                                  *\n***********************************************************************\nVVDSREAD EQU   *\n         MVC   PORG,=CL2'VS'\n         STM   1,9,SALVA19\n         XC    VVDSRBA,VVDSRBA\n         POINT RPL=VVDSRPL\n         LTR   15,15\n         BNZ   VVDSERRO\n         GET   RPL=VVDSRPL\n         LTR   15,15\n         BNZ   VVDSERRO\n***********************************************************************\n* LE REGISTRO DA VVDS E PROCURA A HEADER CELL DO ARQUIVO              *\n***********************************************************************\nNEXTREC  EQU   *\n         GET   RPL=VVDSRPL\n         LTR   15,15\n         BNZ   VVDSERRO\n         L     2,VVDSADR\n         MVC   HALF,0(2)\n         LH    3,HALF\n         LA    2,2(2)\n         SH    3,=H'2'\n         CLI   2(2),X'E9'\n         BNE   NEXTREC\n***********************************************************************\n* VERIFICA OS TIPOS DE COMPONENTES QUE SERAO TRATADOS                 *\n***********************************************************************\nNEXTCOMP EQU   *\n         MVC   HALF,0(2)\n         LH    4,HALF\n         CLI   2(2),X'E9'\n         BE    HEADER\n         CLI   2(2),X'23'\n         BE    VOLCOMP\n***********************************************************************\n* PREPARA LEITURA DO PROXIMO COMPONENTE                               *\n***********************************************************************\nSKIPIT   EQU   *\n         AR    2,4\n         SR    3,4\n         BH    NEXTCOMP\n         B     NEXTREC\n***********************************************************************\n* TRATA A HEADER CELL PARA VER SE O ARQUIVO E O DESEJADO              *\n***********************************************************************\nHEADER   EQU   *\n         XR    7,7\n         IC    7,8(2)\n         SH    7,=H'2'\n         EX    7,CLCVVDS\n         BNE   NEXTREC\n         B     SKIPIT\nCLCVVDS  CLC   PDSN(0),9(2)\n***********************************************************************\n* FAZ O CALCULO DO ESPACO ALOCADO E UTILIZADO DO ARQUIVO              *\n***********************************************************************\nVOLCOMP  EQU   *\n         CLI   25(2),X'80'\n         BE    NEXTREC\n         CLI   25(2),X'C0'\n         BE    NEXTREC\n         MVC   FULL,17(2)\n         L     8,FULL\n         MVC   HALF,21(2)\n         LH    9,HALF\n         MVC   FULL(4),9(2)\n         L     7,FULL\n         AR    7,8\n         SLR   6,6\n         S     7,=F'1'\n         DR    6,8                GET NO OF BLOCKS USED\n         SLR   6,6                IGNORE REMINDER ..\n         AR    7,9                ROUND TO TRACK BOUNDARY IF NOT\n         S     7,=F'1'\n         DR    6,9                GET TRACKS USED\n         ST    7,TRK_USED         USED TRACKS\n         MVC   FULL(4),13(2)     HIGH ALLOCATED RBA\n         L     7,FULL\n         AR    7,8                ROUND TO BLOCK BOUNDARY\n         SLR   6,6\n         S     7,=F'1'\n         DR    6,8                GET NO OF BLOCKS ALLOCATED\n         SLR   6,6                CLEAR THE REMINDER\n         AR    7,9                ROUND TO TRACK BOUNDARY\n         S     7,=F'1'            LESS 1\n         DR    6,9                GET TRACKS ALLLOCATED\n         ST    7,TRK_ALOC         ALLOCATED TRACKS\n         LA    2,42(2)            POINT TO EXTENT INFORMATION\n         SH    4,=H'42'           REMAINING LENGTH\n         SLR   5,5                INITIALISE ACTUAL TRACKS\n***********************************************************************\n* COMPUTA OUTROS EXTENTS DO ARQUIVO                                   *\n***********************************************************************\nNEXTEXT  EQU   *\n         MVC   HALF,10(2)        EXTENT LENGTH\n         AH    5,HALF\n         LA    2,20(2)            POINT TO NEXT EXT\n         SH    4,=H'20'           REMAINING LENGTH\n         BH    NEXTEXT            NEXT EXTENT\n         LR    7,5                ALLOCATED TRACKS\n         CVD   7,DOUBLE\n         L     7,TRK_USED\n         MR    6,5                USE TRACKS * ACTUAL ALLOCATED\n         D     6,TRK_ALOC         GET ACTUAL USED TRACKS\n         LTR   6,6                REMINDER ZERO\n         BZ    *+8\n         LA    7,1(7)             OTHERWISE INCREMENT QUOTIENT 1\n         CVD   7,DOUBLE\n         ZAP   TRK_USED,DOUBLE\nVVDSEOD  EQU   *\n         LM    1,9,SALVA19\n         B     CALCSPAC\n***********************************************************************\n* VERIFICA O TIPO DE REGISTRO DO ARQUIVO                              *\n***********************************************************************\nVERRECFM EQU   *\n         MVC   HALF,DS1LSTAR\n         LH    15,HALF\n         LA    15,1(15)\n         CVD   15,DOUBLE\n         ZAP   TRK_USED,DOUBLE\n***********************************************************************\n* CALCULA O ESPACO ALOCADO PELO ARQUIVO                               *\n***********************************************************************\nCALCSPAC EQU   *\n         LA    5,DS1EXT1\n         XR    6,6\n         ICM   6,1,EXTNTS\n         LTR   6,6\n         BZ    PRINTL\n         CH    6,=H'3'\n         BH    ADDFMT3\n         BAL   14,ADDCYL\n         B     PRINTL\nADDFMT3  EQU   *\n         SH    6,=H'3'\n         STCM  6,1,EXTNTS\n         LA    6,3\n         BAL   14,ADDCYL\n         OI    FMT3,X'FF'\n         B     READVTIX\n***********************************************************************\n* ROTINA PARA CALCULO DO ESPACO ALOCADO PELO ARQUIVO                  *\n***********************************************************************\nADDCYL   EQU   *\n         STM   14,15,SALVA14\n         XR    15,15\n         ICM   15,3,2(5)\n         CVD   15,DOUBLE\n         ZAP   CYL_LOW_EXTENT,DOUBLE\n         XR    15,15\n         ICM   15,3,4(5)\n         CVD   15,DOUBLE\n         ZAP   TRK_LOW_EXTENT,DOUBLE\n         XR    15,15\n         ICM   15,3,6(5)\n         CVD   15,DOUBLE\n         ZAP   CYL_HIGH_EXTENT,DOUBLE\n         XR    15,15\n         ICM   15,3,8(5)\n         CVD   15,DOUBLE\n         ZAP   TRK_HIGH_EXTENT,DOUBLE\n         MP    CYL_LOW_EXTENT,TRK_CYL\n         MP    CYL_HIGH_EXTENT,TRK_CYL\n         AP    CYL_LOW_EXTENT,TRK_LOW_EXTENT\n         AP    CYL_HIGH_EXTENT,TRK_HIGH_EXTENT\n         SP    CYL_HIGH_EXTENT,CYL_LOW_EXTENT\n         AP    CYL_HIGH_EXTENT,=P'1'\n         AP    TRK_ALOC_EXTENT,CYL_HIGH_EXTENT\n         LA    5,10(5)\n         BCT   6,ADDCYL\n         LM    14,15,SALVA14\n         BR    14\n***********************************************************************\n* TOTALIZA O ESPACO ALOCADO POR ARQUIVO E VERIFICA SE DEVE IMPRIMIR   *\n***********************************************************************\nPRINTL   EQU   *\n         ZAP   TRK_ALOC,TRK_ALOC_EXTENT\n         CP    TRK_ALOC,=P'0'\n         BH    ALOC_NAOZERO\n         ZAP   TRK_ALOC,=P'1'\nALOC_NAOZERO EQU *\n         LA    1,PALOC\n         BCTR  1,0\n         MVC   0(6,1),MASK5\n         ED    0(6,1),TRK_ALOC+1\n         ZAP   DOUBLE,TRK_USED\n         CP    DOUBLE,=P'0'\n         BH    USED_NAOZERO\n         ZAP   DOUBLE,=P'1'\nUSED_NAOZERO EQU *\n         CP    DOUBLE,TRK_ALOC\n         BNH   DSNAME_NOFULL\n         ZAP   DOUBLE,TRK_ALOC\nDSNAME_NOFULL EQU *\n         MP    DOUBLE,=PL2'100'\n         DP    DOUBLE+3(5),TRK_ALOC+1(3)\n         LA    1,PUSE\n         BCTR  1,0\n         MVC   0(4,1),MASK3\n         ED    0(4,1),DOUBLE+3\n         PERFORM ADD_TABELA\n         B     READVTIX\n***********************************************************************\n* ADICIONA TABELA ISPF                                                *\n***********************************************************************\nADD_TABELA EQU *\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL4,BUF4),VL\n         BR    10\n***********************************************************************\n* TRATAMENTO DOS POSSIVEIS ERROS COM O ACESSO A VTOC                  *\n***********************************************************************\nIXSEQERR EQU   *\n         CLI   CVSTAT,STAT032\n         BE    IXCLOSE\n         MVC   IXMSGMAC,=C'FIL'\nIXMACERR EQU   *\n         IC    1,CVSTAT\n         N     1,=F'255'\n         CVD   1,DOUBLE\n         UNPK  IXMSGST,DOUBLE+6(2)\n         OI    IXMSGST+2,X'F0'\n         CVD   15,DOUBLE\n         UNPK  IXMSGRC,DOUBLE+6(2)\n         OI    IXMSGRC+2,X'F0'\n         WTO   MF=(E,IXMSG)\nIXCLOSE  EQU   *\n         CVAFFILT ACCESS=RLSE,FCL=0,BUFLIST=0,                         X\n               MF=(E,CVPL)\n         B     CLOSE\n***********************************************************************\n* IMPRIME TOTAIS POR VOLUME                                           *\n***********************************************************************\nCLOSE    EQU   *\n         CLOSE VTOC\n         CLOSE VVDS\n***********************************************************************\n* VERIFICA E RETIRA AUTORIZACAO                                       *\n***********************************************************************\n         TM    FLAG_AUTH,X'FF'\n         BNO   UNALLOC\n         LA    0,2\n         SVC   255\n***********************************************************************\n* LIBERA O VOLUME E A VTOC ALOCADOS                                   *\n***********************************************************************\nUNALLOC  EQU   *\n         LA    1,ALOC\n         MVC   ALOCTP,=A(VTOCULOC)\n         MVC   ALOCVC,=AL1(2)\n         DYNALLOC\n         LA    1,ALOC\n         MVC   ALOCTP,=A(VVDSULOC)\n         DYNALLOC\n***********************************************************************\n* MOSTRA O PAINEL COM OS DADOS OBTIDOS                                *\n***********************************************************************\nDISPLAY_TAB EQU *\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL1,BUF1),VL\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL7,BUF7),VL\nDISPLAY_TAB_001 EQU *\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL8,BUF8),VL\n         LTR   15,15\n         BZ    DISPLAY_TAB_001\nEND_PROGRAM EQU *\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL5,BUF5),VL\n         L     15,ISPEXEC@\n         CALL  (15),(BUFL6,BUF6),VL\n***********************************************************************\n* ENCERRA O PROGRAMA                                                  *\n***********************************************************************\nRETURN   EQU   *\n         L     15,RETCODE\n         L     13,SA+4\n         RETURN (14,12),RC=(15)\nRETURN8  EQU   *\n         MVC   RETCODE,=F'8'\n         B     RETURN\n***********************************************************************\n* TRATA ERRO OCORRIDO DURANTE O ACESSO A VVDS                         *\n***********************************************************************\nVVDSERRO EQU   *\n         SHOWCB RPL=VVDSRPL,AREA=FULL,LENGTH=4,FIELDS=(FDBK)\n         L     15,FULL\n         CVD   15,DOUBLE\n         B     RETURN8\n         LTORG\n***********************************************************************\n* DEFINE AREAS CONSTANTES PARA O PROGRAMA                             *\n***********************************************************************\nSA       DC    18F'0'\nDOUBLE   DC    D'0'\nTRK_ALOC DC    F'0'\nTRK_USED DC    F'0'\nNOME_VOLUME DC CL6' '\nUNIT_VOLUME DC CL4' '\nFULL     DC    F'0'\nHALF     DC    H'0'\nISPEXEC@ DC    F'0'\nISPLINK@ DC    F'0'\nVVDSADR  DC    F'0'\nVVDSRBA  DC    F'0'\nSALVA2   DC    F'0'\nSALVA8   DC    F'0'\nSALVA9   DC    F'0'\nSALVA19  DC    9F'0'\nSALVA14  DC    2F'0'\nRETCODE  DC    F'0'\nDEBADDR  DC    F'0'\nUCBADDR  DC    F'0'\nADDRUCB  DC    F'0'\nGETADDR  DC    F'0'\nMASK5    DC    X'402020202120'\nMASK3    DC    X'40202120'\nJULGRIN  DS    CL8\nJULGROUT DS    CL8\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\n         ORG\nEXTNTS   DS    X\nFLAG     DS    X\nFLAG_AUTH DS   X\nFLAG_OPEN_VTOC DS X\nFLAG_OPEN_VVDS DS X\nFMT3     DS    X\n***********************************************************************\n* DEFINE AREAS DE TRABALHO PARA OPERACOES DE CALCULO                  *\n***********************************************************************\nTRK_CYL         DC    PL2'15'\nTRK_LOW_EXTENT  DC    PL5'0'\nTRK_HIGH_EXTENT DC    PL5'0'\nCYL_LOW_EXTENT  DC    PL5'0'\nCYL_HIGH_EXTENT DC    PL5'0'\nTRK_ALOC_EXTENT DC    PL5'0'\nTRK_ALOC_VOLUME DC    PL5'0'\nTRK_USED_VOLUME DC    PL5'0'\nCYL_FREE_VOLUME DC    PL5'0'\nTRK_FREE_VOLUME DC    PL5'0'\n***********************************************************************\n* DEFINE VERIAVEIS DO ISPF                                            *\n***********************************************************************\nVDEFINE  DC    CL8'VDEFINE'\nTYPE     DC    CL8'CHAR'\nLIST0    DC    CL8'PVOL1'\nLIST1    DC    CL8'PDSN'\nLIST2    DC    CL8'PORG'\nLIST3    DC    CL8'PALOC'\nLIST4    DC    CL8'PUSE'\nLIST5    DC    CL8'PCDATE'\nLIST6    DC    CL8'PRDATE'\nLIST7    DC    CL8'PEXT'\nLEN2     DC    F'2'\nLEN3     DC    F'3'\nLEN5     DC    F'5'\nLEN6     DC    F'6'\nLEN10    DC    F'10'\nLEN44    DC    F'44'\nPVOL1    DC    CL6' '\nPDSN     DC    CL44' '\nPORG     DC    CL2' '\n         DC    C' '\nPALOC    DC    CL5' '\n         DC    C' '\nPUSE     DC    CL3' '\n         DC    C' '\nPEXT     DC    CL3' '\nPCDATE   DC    CL10'DD/MM/AAAA'\nPRDATE   DC    CL10'DD/MM/AAAA'\n***********************************************************************\n* DEFINE OS COMANDOS A SEREM EMITIDOS PELO ISPF                       *\n***********************************************************************\nBUFL1    DC    A(L'BUF1)\nBUFL2    DC    A(L'BUF2)\nBUFL3    DC    A(L'BUF3)\nBUFL4    DC    A(L'BUF4)\nBUFL5    DC    A(L'BUF5)\nBUFL6    DC    A(L'BUF6)\nBUFL7    DC    A(L'BUF7)\nBUFL8    DC    A(L'BUF8)\nBUF1     DC    C'TBSORT TBSPC00 FIELDS(PDSN    )'\nBUF2     DC    C'TBOPEN TBSPC00 WRITE'\nBUF3     DC    C'TBCREATE TBSPC00 NAMES(PDSN,PORG,PALOC,PUSE,PEXT,PCDATX\n               E,PRDATE)'\nBUF4     DC    C'TBADD TBSPC00'\nBUF5     DC    C'TBEND TBSPC00'\nBUF6     DC    C'TBERASE TBSPC00'\nBUF7     DC    C'TBTOP TBSPC00'\nBUF8     DC    C'TBDISPL TBSPC00 PANEL(SPACP002)'\n***********************************************************************\n* DEFINE AREAS PARA ALOCACAO DINAMICA DOS VOLUMES                     *\n***********************************************************************\nALOC     DC    A(X'80000000'+ALOCRB)\nALOCRB   DC    AL1(20)\nALOCVC   DC    AL1(1)\n         DC    AL2(0)\nALOCER   DC    AL2(0)\nALOCIN   DC    AL2(0)\nALOCTP   DC    A(0)\n         DC    A(0)\n         DC    A(0)\nDDVVDS   DC    XL2'1',XL2'1',AL2(8),CL8'VVDS'\nDSNVVDS  DC    XL2'2',XL2'1',AL2(17),CL17'SYS1.VVDS.V'\nDISPVVDS DC    XL2'4',XL2'1',XL2'1',XL1'8'\nVVDSALOC CALL  ,(DDVVDS,DSNVVDS,DISPVVDS),VL,MF=L\nVVDSULOC CALL  ,(DDVVDS,DSNVVDS,UFORCE),VL,MF=L\nDDNX     DC    XL2'1',XL2'1',AL2(8),CL8'VTOC'\nDISP     DC    XL2'4',XL2'1',XL2'1',XL1'8'\nUNIT     DC    XL2'15',XL2'1',AL2(4),CL4' '\nVOLSER   DC    XL2'10',XL2'1',AL2(6),CL6' '\nVTOCALOC CALL  ,(DDNX,DISP,UNIT,VOLSER),VL,MF=L\nVTOCULOC CALL  ,(DDNX),VL,MF=L\nUFORCE   DC    XL2'7',XL2'0'\n***********************************************************************\n* AREA PARA EMISSAO DE WTO COM ERRO DE ACESSO AO VOLUME               *\n***********************************************************************\nIXMSG    WTO   'ERROR FROM CVAFXXX - R15=YYY CVSTAT=ZZZ',MF=L,         X\n               ROUTCDE=11\n         ORG   IXMSG+4+15\nIXMSGMAC DS    CL3,CL7\nIXMSGRC  DS    CL3,CL8\nIXMSGST  DS    CL3\n         ORG\n***********************************************************************\n* OBTEM ESPACO PARA AREA DAS MACROS DE MAPEAMENTO                     *\n***********************************************************************\nFCL$ID   DC    CL4'FCL'\nFCL$DEF  DS    (FCLHDLEN+FCLDSNEL)X\nFCL$SIZE EQU   *-FCL$DEF\nBFLH$DEF DS    (BFLHLN)X\nBFLE$DEF DS    (BFLE$N*BFLELN)X\nBFL$SIZE EQU   *-BFLH$DEF\nDSCB$DEF DS    (BFLE$N*DSCB$SIZ)X\nBFLE$N   EQU   11\n***********************************************************************\n* DEFINE ACB E RPL QUE SERAO USADAS PARA LEITURA DA VVDS              *\n***********************************************************************\nVVDS     ACB   DDNAME=VVDS,MACRF=(ADR,SEQ,IN),EXLST=EODAD\nVVDSRPL  RPL   ACB=VVDS,AREA=VVDSADR,AREALEN=4,ARG=VVDSRBA,            X\n               OPTCD=(ADR,SEQ,LOC)\nEODAD    EXLST EODAD=VVDSEOD\n***********************************************************************\n* BLOCO DA DSCB E AREAS PARA I/O                                      *\n***********************************************************************\nCVPL     CVAFFILT MF=L,BRANCH=NO,FLTAREA=KEEP\nVTOC     DCB   DDNAME=VTOC,DSORG=PS,RECFM=U,KEYLEN=44,BLKSIZE=96,      X\n               MACRF=(R),EODAD=CLOSE,EXLST=RDJFLIST\nRDJFLIST DC    X'87',AL3(JFCBAREA)\nJFCBAREA DC    176X'0'\n***********************************************************************\n* MACROS PARA MAPEAMENTO DAS AREAS A SEREM TRABALHADAS                *\n***********************************************************************\n         DCBD  DSORG=PS,DEVD=DA\n         IEZDEB ,\nJFCB     DSECT\n         IEFJFCBN ,\nCVPL$MAP ICVAFPL CVPLFSA=YES\nFCL$MAP  ICVFCL\nBFL$MAP  ICVAFBFL\nDSCB$MAP DSECT\n         IECSDSL1 (1)\nDSCB$SIZ EQU   *-IECSDSL1\n         CVT   DSECT=YES\n         DSECT\n         UCBMAP\n         END   SPACEDS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPACP001": {"ttr": 3076, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00\\x00\\x00\\x99\\x10\\x9f\\x01\\x01\\x03\\x0f\\x083\\x00\\x1a\\x00\\x19\\x00\\x00\\xe7\\xc9\\xc2\\xd4\\xf0\\xf0\\xf1@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "1999-04-19T00:00:00", "modifydate": "2001-01-30T08:33:00", "lines": 26, "newlines": 25, "modlines": 0, "user": "XIBM001"}, "text": ")ATTR\n + TYPE(TEXT)   INTENS(LOW)  SKIP(ON)\n % TYPE(TEXT)   INTENS(HIGH) SKIP(ON)\n _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)\n \u00ac TYPE(INPUT)  INTENS(HIGH) CAPS(ON) NUMERIC(ON)\n $ TYPE(OUTPUT) INTENS(HIGH) SKIP(ON) JUST(ASIS)\n @ TYPE(TEXT)   INTENS(LOW)  SKIP(ON) JUST(LEFT) HILITE(REVERSE)\n # TYPE(TEXT)   INTENS(HIGH) SKIP(ON) JUST(LEFT) HILITE(REVERSE)\n)BODY LMSG(PMSG)\n+                    %Display Volumes+\n+Comando%===>_ZCMD                                            +Scroll%===>_AMT +\n$PMSG\n+  VOLUME UNIT UNIT     TOTAL\u00a6FREE SPACE     \u00a6LARGEST FREE\u00a6PCT  FRAG\u00a6STOR GROUP\n+S SERIAL TYPE ADDR MNT CYLS \u00a6CYLS  TRKS  EXT\u00a6CYLS  TRKS  \u00a6FRE  INDX\u00a6NAME     ST\n+- (1)--- (2)- (3)- (4) (5)--\u00a6(6)-- (7)-- (8)\u00a6(9)-- (10)- \u00a6(11) (12)\u00a6(13)---- --\n)MODEL\n_Z$Z     $Z   $Z   $Z  $Z    $Z    $Z    $Z  $Z    $Z     $Z   $Z   $Z       $Z\n)INIT\n   .ZVARS = '(POPT,PVOL,PUNIT,PADDR,PMNTT,PCTOT,PCFREE,PTFREE,PEXTNS,+\n   PLCFREE,PLTFREE,PCTFREE,PFRAGI,PSTORGRP,PSTSTG)'\n   &ZCMD = ' '\n   &AMT = CSR\n   &ZTDMARK = '+\n- ------ ---- ---- --- ----- ----- --- ----- ----- -----  ---- ---- -------- --'\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SPACP002": {"ttr": 3078, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x99\\x12\\x0f\\x01\\x01\\x03\\x0f\\x083\\x00\\x18\\x00\\x1a\\x00\\x00\\xe7\\xc9\\xc2\\xd4\\xf0\\xf0\\xf1@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1999-04-30T00:00:00", "modifydate": "2001-01-30T08:33:00", "lines": 24, "newlines": 26, "modlines": 0, "user": "XIBM001"}, "text": ")ATTR\n + TYPE(TEXT)   INTENS(LOW)  SKIP(ON)\n # TYPE(TEXT)   INTENS(HIGH) SKIP(ON)\n _ TYPE(INPUT)  INTENS(HIGH) CAPS(ON)\n \u00ac TYPE(INPUT)  INTENS(HIGH) CAPS(ON) NUMERIC(ON)\n $ TYPE(OUTPUT) INTENS(HIGH) SKIP(ON) JUST(ASIS)\n @ TYPE(TEXT)   INTENS(LOW)  SKIP(ON) JUST(LEFT) HILITE(REVERSE)\n)BODY LMSG(PMSG)\n+                    %Data sets on Volume$Z     +\n+Comando#===>_ZCMD                                            +Scroll#===>_AMT +\n$PMSG\n+                                                Trk   Pct     Last\n+Dsname                                       DS Aloc  Use Ext Access\n+-------------------------------------------- -- ----- --- --- ----------\n)MODEL\n$Z                                           $Z $Z    $Z  $Z  $Z         +\n)INIT\n   .ZVARS = '(PVOL1,PDSN,PORG,PALOC,PUSE,PEXT,PRDATE)'\n   &ZCMD = ' '\n   &AMT = CSR\n   &ZTDMARK = '+\n-------------------------------------------- -- ----- --- --- ----------'\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UCBMAP": {"ttr": 3080, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         UCBMAP\nUCBMAP   DS    0F\nUCBCMSEG EQU   *\nUCBJBNR  DS    B\nUCBVRDEV EQU   X'80'\nUCBJES3  EQU   X'40'\nUCBDUC   EQU   X'20'\nUCBJ3DV  EQU   X'10'\nUCBOLDSM EQU   X'08'\nUCBMMSGP EQU   X'04'\nUCBDCONS EQU   X'02'\nUCBMONT  EQU   X'01'\nUCBFL5   DS    B\nUCBDCC   EQU   X'80'\nUCBAF    EQU   X'40'\nUCBAMV   EQU   X'40'\nUCBSMS   EQU   X'20'\nUCBVSDR  EQU   X'10'\nUCBENVRD EQU   X'08'\nUCBNALOC EQU   X'04'\nUCBALTCU EQU   X'02'\nUCBCUIR  EQU   X'01'\nUCBID    DS    C\nUCBSTND  EQU   X'FF'\nUCBIDCPY EQU   X'CC'\nUCBGUCB  EQU   X'11'\nUCBST1   EQU   X'12'\nUCBSTAT  DS    B\nUCBONLI  EQU   X'80'\nUCBCHGS  EQU   X'40'\nUCBRESV  EQU   X'20'\nUCBUNLD  EQU   X'10'\nUCBALOC  EQU   X'08'\nUCBPRES  EQU   X'04'\nUCBSYSR  EQU   X'02'\nUCBDADI  EQU   X'01'\nUCBCHAN  DS    FL2\nUCBSFLS  DS    0BL2\nUCBFLA   DS    BL1\nUCBFL1   EQU   UCBFLA\nUCBDEFER EQU   X'80'\nUCBNRY   EQU   X'40'\nUCBNOTRD EQU   UCBNRY\nUCBPERM  EQU   X'20'\nUCBPSNS  EQU   X'10'\nUCBSTRT  EQU   X'08'\nUCBHALT  EQU   X'04'\nUCBCLEAR EQU   X'02'\nUCBBOX   EQU   X'01'\nUCBFLB   DS    BL1\nUCBINCPT EQU   X'80'\nUCBNOPTH EQU   X'40'\nUCBNOCON EQU   X'20'\nUCBHILVL EQU   X'10'\nUCBHDET  EQU   X'08'\nUCBNXUCB DS    A\nUCBWGT   DS    B\nUCBIN    EQU   X'80'\nUCBOUT   EQU   X'40'\nUCBPUB   EQU   X'20'\nUCBREW   EQU   X'10'\nUCBMTPXP EQU   X'08'\nUCBVORSN EQU   X'04'\nUCBVHRSN EQU   X'02'\nUCBNAME  DS    CL3\nUCBTYP   DS    0CL4\nUCBTBYT1 DS    B\nUCB1FEA0 EQU   X'80'\nUCB1FEA1 EQU   X'40'\nUCB1FEA2 EQU   X'20'\nUCB1FEA3 EQU   X'10'\nUCB1FEA4 EQU   X'08'\nUCB1FEA5 EQU   X'04'\nUCB1FEA6 EQU   X'02'\nUCB1FEA7 EQU   X'01'\nUCBTBYT2 DS    B\nUCB2OPT0 EQU   X'80'\nUCB2OPT1 EQU   X'40'\nUCB2OPT2 EQU   X'20'\nUCB2OPT3 EQU   X'10'\nUCB2OPT4 EQU   X'08'\nUCB2OPT5 EQU   X'04'\nUCB2OPT6 EQU   X'02'\nUCBVLPWR EQU   X'02'\nUCB2OPT7 EQU   X'01'\nUCBDVPWR EQU   X'01'\nUCBDVCLS DS    0B\nUCBTBYT3 DS    B\nUCB3TAPE EQU   X'80'\nUCB3COMM EQU   X'40'\nUCB3CTC  EQU   X'41'\nUCB3DACC EQU   X'20'\nUCB3DISP EQU   X'10'\nUCB3UREC EQU   X'08'\nUCB3CHAR EQU   X'04'\nUCBRSV10 EQU   X'02',,C'X'\nUCBRSV11 EQU   X'01',,C'X'\nUCBUNTYP DS    0C\nUCBTBYT4 DS    C\nUCBEXTPT DS    0A\nUCBFLC   DS    BL1\nUCBATTP  EQU   X'80'\nUCBITFP  EQU   X'40'\nUCBUDE   EQU   X'20'\nUCBIVRS  EQU   X'08'\nUCBIVRR  EQU   X'04'\nUCBDDRSW EQU   X'01'\nUCBEXTP  DS    AL3\nUCBFL2   EQU   UCBFL1\nUCBDEV   EQU   *\n         ORG   UCBDEV\nUCBVTOC  DS    CL4\nUCBVOLI  DS    CL6\nUCBSTAB  DS    BL1\nUCBBSVL  EQU   X'80'\nUCBDVSHR EQU   X'80'\nUCBPGFL  EQU   X'40'\nUCBPRSRS EQU   X'20'\nUCBBALB  EQU   X'20'\nUCBBPRV  EQU   X'10'\nUCBBPUB  EQU   X'08'\nUCBBSTR  EQU   X'04'\nUCBSHAR  EQU   X'02'\nUCBBNUL  EQU   X'01'\nUCBDMCT  DS    XL1\nUCBMOUNT EQU   X'80'\nUCBDMC   EQU   X'7F'\nUCBDATP  EQU   *\nUCBSQC   DS    FL1\nUCBFL4   DS    BL1\nUCBWDAV  EQU   X'40'\nUCBATTN  EQU   X'08'\nUCBHOLD  EQU   X'04'\nUCBMAT   EQU   X'02'\nUCBUSER  DS    FL2\nUCBBASE  DS    A\nUCBNEXP  DS    A\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VARYDASD": {"ttr": 3083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x06\\x8f\\x01\\x01\\x06\\x8f\\x08\\x19\\x01\\xf6\\x01\\xf6\\x00\\x00\\xe7\\xc9\\xc2\\xd4\\xf0\\xf0\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-03-09T00:00:00", "modifydate": "2001-03-09T08:19:00", "lines": 502, "newlines": 502, "modlines": 0, "user": "XIBM001"}, "text": "VARYDASD TITLE 'VARY DASD OFFLINE DEPENDING ON VOLSER'\n*-------------------------------------------------------------------*\n* Name            : VARYDASD\n*\n* Function        : This program will vary DASD volumes OFFLINE by\n*                   checking to see if the volser matches a list\n*                   supplied by the SYSIN DD card. If no match, the\n*                   program uses IEEVARYD to vary the devices\n*                   offline.\n*\n*                   The list supplied by the SYSIN DD can contain a\n*                   placeholder '%' to indicate any character.\n*\n*                   The volser mask must be placed in the columns\n*                   1-6 in the SYSIN dataset.\n*\n*                   System symbols are supported - they must be\n*                   6 characters long and specified WITHOUT the\n*                   trailing dot.\n*\n*                   Comments are indicated by any of the following :\n*                   (a) Blank in column 1\n*                   (b) Asterix in column 1\n*                   (c) '/*' in columns 1-2\n*\n*                   The program can be run in two modes supplied as\n*                   a parameter to the program :\n*\n*                   (1) TYPE=CHECK\n*                       The program issues a WTO indicating the\n*                       ONLINE/OFFLINE status for each device against\n*                       the supplied SYSIN cards. No action is taken\n*                       against any unit.\n*                       This mode allows the user to verify the SYSIN\n*                       cards. This is the default h\n*                   (2) TYPE=APPLY\n*                       The program will vary required devices OFFLINE.\n*\n*                   The program can also issue WTO messages depending\n*                   on a paramter passed to the program :\n*\n*                   (1) WTO=NONE\n*                       No WTOs indicating device status are issued\n*                       by this program.\n*                   (2) WTO=ONLINE\n*                       A WTO is issued for each device that is to\n*                       remain ONLINE.\n*                   (3) WTO=OFFLINE\n*                       A WTO is issued for each device that is to\n*                       be varied OFFLINE.\n*                   (4) WTO=BOTH\n*                       A WTO is issued for each device that is to\n*                       be varied OFFLINE and also for devices that\n*                       remain ONLINE. This is the default\n*\n* Example JCL  :\n*\n* //VARY     EXEC PGM=VARYDASD,PARM='TYPE=CHECK,WTO=ONLINE'\n* //STEPLIB  DD   DISP=SHR,DSN=some.apf.dataset\n* //SYSIN    DD   *\n* D2%%%%\n* MVS2%%\n* JES2%%\n* CAT2%%\n* &SYSR1\n* &SYSR2\n* /*\n*\n*\n* IBM Macros Used : MODID, STORAGE, UCBSCAN, IEEVARYD, WTO, ABEND,\n*                   OPEN, GET, CLOSE, UCBDEVN, MODESET, LINK,\n*                   DCB, CVT, IEFUCBOB, IEEZB833, ASASYMBP\n*\n* Attributes      : Amode(31)\n*                   Rmode(24)\n*                   NORENT\n*                   NOREUS\n*                   NOREFR\n*                   AC(1)\n*\n* Register Usage  :\n*\n* R1  - Used in STATUS routine\n* R2  - work\n* R3  - Device array for IEEVARYD\n* R4  - UCB\n* R5  - Used in STATUS routine\n* R6  - Table of volser masks (float)\n* R7  - Work\n* R8  - Table of volser masks (start)\n* R9  - Number of volser masks\n* R10 - Branch and Link\n* R11 - Device count\n* R12 - Base reg\n* R13 - Workarea\n* R14 - Used in STATUS Routine\n*\n* ABEND Codes :\n* U101  = Invalid length on paramter (must be <= 22)\n*\n*\n*-------------------------------------------------------------------*\n* Changes\n* 27/10/1999  Rob Scott  Code Written                            V1.0\n* 07/12/1999  Rob Scott  Added support for System Symbols        V1.1\n*-------------------------------------------------------------------*\n*\n*-------------------------------------------------------------------*\n* Copyright : Scott Enterprise Consultancy Ltd\n*-------------------------------------------------------------------*\nVARYDASD CSECT\nVARYDASD AMODE 31\nVARYDASD RMODE 24\n         BAKR  R14,R0                 linkage stack\n         LAE   R12,0(R15,0)           set R12 as base\n         USING VARYDASD,R12           address it\n         MODID ,                      eyecatcher\n         LR    R2,R1                  copy any parms passed\nGETWORK  EQU   *\n*--------------------------------------------------------------------*\n* Get some workarea storage and init to zeros.\n*--------------------------------------------------------------------*\n         STORAGE OBTAIN,              get the workarea storage         X\n               LENGTH=WORKLEN,        this much                        X\n               ADDR=(R13),            address in r13                   X\n               SP=0,KEY=8,            subpool 0 storage key 8          X\n               LOC=BELOW,             below the line                   X\n               COND=NO                unconditional\n         USING WORKAREA,R13           address workarea\n         LR    R14,R13                Copy workarea address\n         L     R15,=A(WORKLEN)        Get length of workarea\n         XR    R0,R0                  Clear\n         XR    R1,R1                  Clear\n         MVCL  R14,R0                 Init to zeros\n         MVC   4(4,R13),=C'F1SA'      set label in savearea\n*--------------------------------------------------------------------*\n* Set runtype defaults :\n* TYPE=CHECK,WTO=ALL\n*--------------------------------------------------------------------*\n         OI    RUNTYPE,RUNCHECK+RUNWTOON+RUNWTOOF\nGETARRAY EQU   *\n*--------------------------------------------------------------------*\n* Get some storage for the IEEVARYD service\n*--------------------------------------------------------------------*\n         STORAGE OBTAIN,              get the storage                  X\n               LENGTH=DISK65K,        enough for 65K disks             X\n               ADDR=(R3),             address in r3                    X\n               SP=0,KEY=8,            subpool 0 storage key 8          X\n               LOC=ANY,               above the line                   X\n               COND=NO                unconditional\n         USING WORKAREA,R13           address workarea\n         LR    R14,R3                 Copy workarea address\n         L     R15,=A(DISK65K)        Get length of workarea\n         XR    R0,R0                  Clear\n         XR    R1,R1                  Clear\n         MVCL  R14,R0                 Init to zeros\n         XR    R11,R11                Zero device count\n         ST    R3,DEVARRAY            Store start address\nGETPARMS EQU   *\n         LTR   R2,R2                  Any parms ?\n         BZ    GETVTABL               No - leave as default\n         ICM   R2,B'1111',0(R2)       Any parms ?\n         BZ    GETVTABL               No - leave as default\n         XR    R1,R1                  Clear\n         ICM   R1,B'0011',0(R2)       Get length of parms\n         C     R1,=F'22'              Correct length ?\n         BNH   GOODPARM               Yes - OK\n         WTO   'VARYDASD - INCORRECT PARAMETER LENGTH'\n         ABEND 101,DUMP\nGOODPARM EQU   *\n         LR    R15,R1                 copy parm length\n         BCTR  R15,R0                 -1 for execute\n         EX    R15,PARMCOPY           Copy the parms in\n         LA    R2,COPYPARM            Point to the parms\nPARMLOOP EQU   *\n         CLC   0(10,R2),=CL10'TYPE=APPLY'\n         BE    SETAPPLY               Set TYPE=APPLY flag\n         CLC   0(10,R2),=CL10'TYPE=CHECK'\n         BE    SETCHECK               Set TYPE=CHECK flag\n         CLC   0(8,R2),=CL10'WTO=BOTH'\n         BE    SETBOTH                Set WTO=BOTH flag\n         CLC   0(8,R2),=CL10'WTO=NONE'\n         BE    SETNONE                Set WTO=NONE flag\n         CLC   0(10,R2),=CL10'WTO=ONLINE'\n         BE    SETON                  Set WTO=ONLINE flag\n         CLC   0(11,R2),=CL11'WTO=OFFLINE'\n         BE    SETOFF                 Set WTO=OFFLINE flag\nNEXTPARM EQU   *\n         LA    R2,1(R2)               Shuffle down parms\n         BCT   R1,PARMLOOP            Loop for all\n         B     GETVTABL               and carry on\nSETAPPLY NI    RUNTYPE,255-RUNCHECK   Reset flag\n         OI    RUNTYPE,RUNAPPLY       Set flag\n         B     NEXTPARM               and get next char\nSETCHECK NI    RUNTYPE,255-RUNAPPLY   Reset flag\n         OI    RUNTYPE,RUNCHECK       Set flag\n         B     NEXTPARM               and get next char\nSETBOTH  OI    RUNTYPE,RUNWTOON       Set flag\n         OI    RUNTYPE,RUNWTOOF       Set flag\n         B     NEXTPARM               and get next char\nSETNONE  NI    RUNTYPE,255-RUNWTOON   Reset flag\n         NI    RUNTYPE,255-RUNWTOOF   Reset flag\n         B     NEXTPARM               and get next char\nSETON    NI    RUNTYPE,255-RUNWTOOF   Reset flag\n         OI    RUNTYPE,RUNWTOON       Set flag\n         B     NEXTPARM               and get next char\nSETOFF   NI    RUNTYPE,255-RUNWTOON   Reset flag\n         OI    RUNTYPE,RUNWTOOF       Set flag\n         B     NEXTPARM               and get next char\nGETVTABL EQU   *\n*--------------------------------------------------------------------*\n* Get some storage to hold the volume serials from SYSIN.\n*--------------------------------------------------------------------*\n         STORAGE OBTAIN,              get the workarea storage         X\n               LENGTH=10000*6,        room for 10000 volsers           X\n               ADDR=(R8),             address in r8                    X\n               SP=0,KEY=8,            subpool 0 storage key 8          X\n               LOC=BELOW,             above the line                   X\n               COND=NO                unconditional\n         XR    R9,R9                  init count\n         LR    R6,R8                  copy start address\n*--------------------------------------------------------------------*\n* Now open and read in the SYSIN cards\n* The volser should be specified in columns 1 to 6.\n* Comments are indicated by either :\n* (a) A Space in column 1\n* (b) An asterix in column 1\n* (c) A '/*' in column 1 and 2\n*--------------------------------------------------------------------*\n         OPEN  (SYSIN,(INPUT))        open the sysin cards\nREADCARD EQU   *\n         GET   SYSIN,INREC            Get the record\n         CLI   INREC,C' '             Space ?\n         BE    READCARD               Yes - ignore\n         CLI   INREC,C'*'             Comment ?\n         BE    READCARD               Yes - ignore\n         CLC   INREC(2),=CL2'/*'      Comment ?\n         BE    READCARD               Yes - ignore\n         MVC   TEMPVALU(6),INREC      No - copy the value\n*--------------------------------------------------------------------*\n* We now check to see if a System Symbol has been specified. If so\n* we call ASASYMBM to translate it for us and then place it in\n* the table.\n*--------------------------------------------------------------------*\n         CLI   INREC,X'50'            Is it a symbol ?\n         BNE   GOODCARD               No carry on\n         LA    R7,PARMSYMB            Point to ASASYMBM parms\n         USING SYMBP,R7               Address it\n         XC    PARMSYMB(SYMBP_LEN),PARMSYMB\n         MVC   TEMPSYMB(6),INREC      Copy the symbol\n         MVI   TEMPSYMB+6,C'.'        add a dot\n         LA    R1,TEMPSYMB            Point to the symbol\n         ST    R1,SYMBPPATTERN@       Store in parm list\n         LA    R1,7                   Set length of input\n         ST    R1,SYMBPPATTERNLENGTH  Store in parm list\n         LA    R1,TEMPVALU            Point to the answer area\n         ST    R1,SYMBPTARGET@        Store in parm list\n         LA    R1,F6                  Set length of input\n         ST    R1,SYMBPTARGETLENGTH@  Store in parmlist\n         LA    R1,TEMPRC              Point to rc\n         ST    R1,SYMBPRETURNCODE@    Store in parmlist\n         LINK  EP=ASASYMBM,MF=(E,PARMSYMB)\n         CLC   TEMPRC(4),=F'0'        did we xlate the symbol ?\n         BE    GOODCARD               yes - carry on\n         MVC   BADSYM+53(6),TEMPSYMB\nBADSYM   WTO   'VARYDASD - ERROR TRANSLATING SYSTEM SYMBOL : xxxxxx'\n         B     READCARD\nGOODCARD EQU   *\n*--------------------------------------------------------------------*\n* This is NOT a comment card, copy the six chars into the table of\n* volume masks and increment count (R9) and current pointer (R6)\n*--------------------------------------------------------------------*\n         MVC   0(6,R6),TEMPVALU       Copy in the mask\n         LA    R9,1(R9)               Add to count\n         LA    R6,6(R6)               Point to next volser\n         C     R9,=F'10000'           Maximum number ?\n         BL    READCARD               no - get next record\nENDSYSIN EQU   *\n         CLOSE (SYSIN)                Close the SYSIN dataset\n         LR    R6,R8                  Put back to start\n*\nDASDINIT EQU   *\n*--------------------------------------------------------------------*\n* Now we set up the UCBSCAN loop to shuffle thru the DASD devices and\n* compare the volser to all of the supplied masks.\n*--------------------------------------------------------------------*\n         LA    R4,UCBAREA             Point to copy of UCB\n         USING UCBCMSEG,R4            address it\n         XC    WORKUCB,WORKUCB        Clear UCB workarea\nDASDSCAN EQU   *\n         UCBSCAN COPY,                Perform UCBSCAN                  X\n               WORKAREA=WORKUCB,      Use this workarea                X\n               UCBAREA=UCBAREA,       Copy UCB here                    X\n               CMXTAREA=CMXTAREA,     UCB Common extension             X\n               DEVCLASS=DASD,         Only find DASD                   X\n               DEVN=0,                Start at beginning               X\n               RANGE=ALL,             Include 4-digit devices          X\n               DYNAMIC=YES            and dynamic UCBs\n         LR    R7,R15                 COPY RETURN CODE\n         C     R7,=F'4'               CHECK RC\n         BH    DASDSCAN               If RC > 4 ignore\n         BE    DASDFINI               If RC = 4 then finished\n         TM    UCBSTAT,UCBONLI        Is it Online ?\n         BNO   DASDSCAN               No - get next\n*--------------------------------------------------------------------*\n* We copy the volser to field VOLSER and translate the hex unit\n* address to EBCDIC field UNITADDR\n* Once this is done, we call the STATUS routine to determine if the\n* volume should be varied ONLINE or OFFLINE.\n*--------------------------------------------------------------------*\n         MVC   VOLSER(6),UCBVOLI      Copy the Volser\n         UCBDEVN DEVN=UNITADDR        Get the unit address\n         BAL   R10,STATUS             Check the status\n         LTR   R15,R15                Does volume stay online ?\n         BZ    ONLINE                 Yes - tell ops\nOFFLINE  EQU   *\n         TM    RUNTYPE,RUNWTOOF       Issue OFFLINE WTO ?\n         BNO   BYPWTOOF               No - bypass it\n         MVC   VARYOFFT+16(4),UNITADDR Copy CUA to MSG\n         MVC   VARYOFFT+28(6),VOLSER   Copy volser to MSG\n         WTO   TEXT=VARYOFF           Issue WTO\nBYPWTOOF EQU   *\n         MVC   0(2,R3),UCBCHAN        Copy UCB address (binary)\n         LA    R11,1(R11)             Add one to device count\n         LA    R3,4(R3)               Point to next\n         B     DASDSCAN               and get next UCB\nONLINE   EQU   *\n         TM    RUNTYPE,RUNWTOON       Issue ONLINE WTO ?\n         BNO   DASDSCAN               No - bypass it\n         MVC   KEEPONT+16(4),UNITADDR Copy CUA to MSG\n         MVC   KEEPONT+28(6),VOLSER   Copy volser to MSG\n         MVC   KEEPONT+43(6),MATCHED  Copy pattern to MSG\n         WTO   TEXT=KEEPON            No - just issue WTO\n         B     DASDSCAN               and get next UCB\nDASDFINI EQU   *\n*--------------------------------------------------------------------*\n* We have finished looping thru the UCBs. If we are running\n* TYPE=APPLY, we issue the IEEVARYD service to vary the devices\n* offline.\n*--------------------------------------------------------------------*\n         TM    RUNTYPE,RUNAPPLY       Do the varies ?\n         BNO   FINISHED               No\n         LTR   R11,R11                Any devices to vary ?\n         BZ    FINISHED               no - exit\n         ST    R11,NUMDEVS            Store number of devices\n         MVC   CALLERID(8),=CL8'VARYDASD'\n         LA    R2,DEVINPUT            Point to IEEVARYD input\n         USING VDEV,R2                Address it\n         MVC   VDEV_ID(4),=CL4'VDEV'  Init fields\n         MVI   VDEV_VERSION,VDEV_VERN\n         OI    VDEV_KEYWORDS1,VDEV_OFFLINE\n         L     R3,DEVARRAY            Point to start\n         MODESET MODE=SUP,KEY=ZERO\n         IEEVARYD OPERATION=DEVINPUT, Operation is VARY OFFLINE        x\n               DEVICES=(R3),          List of devices                  x\n               NUMDEVS=NUMDEVS,       Number of devices                x\n               CALLERID=CALLERID,     Plug in VARYDASD as caller       x\n               RETCODE=RETCODE,       Store RC and RSN code            x\n               RSNCODE=RSNCODE\n         MODESET MODE=PROB,KEY=NZERO\n         STORAGE RELEASE,             release storage                  X\n               LENGTH=DISK65K,        this much                        X\n               ADDR=(R3),             address in R3                    X\n               SP=0,KEY=8,            subpool 0 storage key 8          X\n               COND=NO                unconditional\nFINISHED EQU   *\n         STORAGE RELEASE,             release workarea storage         X\n               LENGTH=WORKLEN,        this much                        X\n               ADDR=(R13),            address in R13                   X\n               SP=0,KEY=8,            subpool 0 storage key 8          X\n               COND=NO                unconditional\n         XR    R15,R15                set rc to zero\n         PR                           return\n*\nSTATUS   EQU   *\n*--------------------------------------------------------------------*\n* Determine if volume is in list to be ONLINE or OFFLINE\n*\n* Regs and fields on input :\n*   R9 = Number of volser masks (patterns)\n*   R8 = Starting address of volser mask table\n*   VOLSER = Six char actual volume serial of DASD in question\n*\n* Regs used during processing\n*   R0 = Branch and count within volser mask (up to six)\n*   R1 = Pointer to character within pattern\n*   R5 = Pointer to character within volser\n*   R6 = Pointer to current mask\n*   R14= Branch and count (number of masks)\n*--------------------------------------------------------------------*\n         LR    R14,R9                 Copy number of patterns\n         LR    R6,R8                  Point to start of table\nPATNLOOP EQU   *\n*--------------------------------------------------------------------*\n* This loop processes each volser mask within the table\n*--------------------------------------------------------------------*\n         LR    R1,R6                  point to 1st char in pattern\n         LA    R0,6                   Set loop count\n         LA    R5,VOLSER              Point to the 1st char in volser\nCHARLOOP EQU   *\n*--------------------------------------------------------------------*\n* This loop processes each character within the volser and the mask\n*--------------------------------------------------------------------*\n         CLI   0(R1),C'%'             Placeholder ?\n         BE    NEXTCHAR               Yes - assume match\n         CLC   0(1,R5),0(R1)          Matched char ?\n         BE    NEXTCHAR               Yes\n         B     NEXTPATN               No - try next pattern\nNEXTCHAR EQU   *\n         LA    R1,1(R1)               Move along the pattern\n         LA    R5,1(R5)               Move along the volser\n         BCT   R0,CHARLOOP            Loop for 6 chars\n         MVC   MATCHED(6),0(R6)       Copy the pattern\n         B     STATON                 If we get here - volser ONLINE\nNEXTPATN EQU   *\n         LA    R6,6(R6)               Point to next pattern\n         BCT   R14,PATNLOOP           Loop thru all patterns\nSTATOFF  EQU   *\n         LA    R15,8                  Set RC=4\n         BR    R10                    Return\nSTATON   EQU   *\n         XR    R15,R15                Zero RC\n         BR    R10                    Return\n*\n*-------------------------------------------------------------------*\n* Constants, Variables and DSECTs\n*-------------------------------------------------------------------*\n*\nPARMCOPY MVC   COPYPARM(0),2(R2)     Copy in the parms\n         LTORG\n         DS    0F\nF6       DC    F'6'\n*\nDISK65K  EQU   65536*4\nSYSIN    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,EODAD=ENDSYSIN\n*\nVARYOFF  DS    0F\n         DC    H'80'\nVARYOFFT DC    CL80'VARYDASD - Unit uuuu Volser=vvvvvv placed OFFLINE'\nKEEPON   DS    0F\n         DC    H'80'\nKEEPONT  DC    CL80'VARYDASD - Unit uuuu Volser=vvvvvv Pattern=pppppp kx\n               ept ONLINE'\n*\nWORKAREA DSECT\nSAVEAREA DS    18F                    save area\nINREC    DS    CL80                   SYSIN record\n         DS    0D\nVOLSER   DS    CL6                    Volser\nMATCHED  DS    CL6                    Volser matched pattern\nUNITADDR DS    CL4                    Unit address\nCOPYPARM DS    CL48                   Copy of parms passed\nTEMPSYMB DS    CL7                    Area for system symbol\nTEMPVALU DS    CL6                    Area for returned value\n         DS    0F\nTEMPRC   DS    F                      RC from ASASYMBM\nPARMSYMB DS    CL(SYMBP_LEN)          Parmlist for ASASYMBM)\n         DS    0F\nRUNTYPE  DS    X                      Type of run\nRUNCHECK EQU   X'80'                  Just check (Issue WTO)\nRUNAPPLY EQU   X'40'                  Issue IEEVARYD\nRUNWTOON EQU   X'20'                  Issue WTO for ONLINE volumes\nRUNWTOOF EQU   X'10'                  Issue WTO for OFFLINE volumes\n         DS    0D\nUCBRC    DS    F                      Return code from UCBSCAN\nUCBRSN   DS    F                      Reason code from UCBSCAN\n         DS    0D\nUCBAREA  DS    CL48                   area to get UCB copy\nUCBPAREA DS    CL48                   area to get UCB prefix copy\nCMXTAREA DS    CL32                   area to get CMXT copy\nWORKUCB  DS    CL100                  UCBSCAN workarea\n         DS    0F\nCALLERID DS    CL8                    Caller ID for IEEVARYD\nRETCODE  DS    F                      IEEVARYD return code\nRSNCODE  DS    F                      IEEVARYD reason code\nNUMDEVS  DS    F                      Number of devices\nDEVARRAY DS    F                      Address of device array\nDEVINPUT DS    CL(VDEV_LENGTH)        Length of IEEVARYD input\nWORKLEN  EQU   *-WORKAREA\n*\n         CVT DSECT=YES,LIST=NO\n         IEFUCBOB\n         IEEZB833\n         ASASYMBP\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT510/FILE510.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT510", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}