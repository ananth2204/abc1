{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012140000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 14, "INMDSNAM": "CBT.V500.FILE480.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE480.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x10'", "DS1TRBAL": "b'5\\xa8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\x81\\x00\\x08\\x03\\x82\\x00\\x02\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04_\\x00\\x11\\x01\\x173\\x1f\\x01\\x173\\x1f\\x14&\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf5@@@'", "ispf": {"version": "04.95", "flags": 0, "createdate": "2017-11-27T00:00:00", "modifydate": "2017-11-27T14:26:11", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-495"}, "text": "REGULAR CBT TAPE - VERSION 495    FILE:  480\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT495.FILE480\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 51 MEMBERS COUNTED; CUMULATIVE SIZE IS 4,138 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/27/17    14:26:11    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$INDEX": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x01\\x00$\\x1f\\x01\\x00$O\\x08Q\\x00\\x86\\x00\\x00\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2000-08-28T00:00:00", "modifydate": "2000-08-31T08:51:00", "lines": 134, "newlines": 0, "modlines": 0, "user": "ADMINI3"}, "text": "***********************************************************************\n*                  Baldomero Castilla Roldan\n*                  Programador de Sistemas\n*                  Madrid (Espana)\n*                  bcastill@ceca.es\n*                  bcastill@cajaactiva.es\n***********************************************************************\n*\n* Aqui teneis un conjunto de utilidades, he incluido los programas\n* fuente, y los JCL de ejemplo. Hay REXX, CLIST, EDIT MACROS...\n*\n* Toda la informacion va en 2 librerias:\n*\n*  USXXBCR.CBT.ALL     (incluye todo, excepto los modulos ejecutables)\n*  USXXBCR.CBT.LOADLIB (incluye los ejecutables, tiene que ser APF)\n*\n* Creo que las mas interesantes son:\n*    VERDSN, Se usa para localizar un archivo entre todos los discos de\n*            una instalacion\n*  CKLOCMEM, Se usa para localizar un miembro de una libreria\n*            particionada entre todas las de la instalacion\n*    CKDATE, Es una manera de controlar los pasos de un JCL,\n*            dependiendo de la fecha y hora\n***********************************************************************\n*\n***********************************************************************\n*  Contenido de la Libreria:\n***********************************************************************\n    *\n     CALCUL   (REXX)\n     CALCULP  (PANEL)\n        Descripcion => Es una calculadora\n    *\n     CKDATEJ  (JCL)\n     CKDATEP  (PROCEDIMIENTO CATALOGADO)\n     CKDATEX  (REXX)\n        Descripcion => Utilidad para saber que A\u00a6o, mes, dia...etc.\n                    => en un JCL a traves del Return Code.\n    *\n     CKDELMEJ (JCL)\n     CKDELMEM (PROGRAMA FUENTE EN ASSEMBLER)\n        Descripcion => Borra un miembro de una libreria particionada\n                    => en un proceso Batch (JCL), la ventaja es que\n                    => se puede referenciar la libreria en forma SHR\n    *\n     CKFINAL  (MACRO)\n        Descripcion => Macro que se utiliza en los programas de\n                    => assembler\n    *\n     CKIEBGEJ (JCL)\n     CKIEBGEN (PROGRAMA FUENTE EN ASSEMBLER)\n        Descripcion => Programa que hace un copia desde SYSUT1 a SYSUT2,\n                    => lo mismo que el IEBGENER, pero con archivos de\n                    => cualquier longitud\n    *\n     CKINICIO (MACRO)\n        Descripcion => Macro que se utiliza en los programas de\n                    => assembler\n    *\n     CKLEVEL  (PROGRAMA FUENTE EN ASSEMBLER)\n     CKLEVELJ (JCL)\n        Descripcion => Utilidad para listar el contenido de un grupo\n                    => de archivos secuenciales sin dar el nombre\n                    => completo, solo parte, usando LEVEL.\n    *\n     CKLOCMEJ (JCL)\n     CKLOCMEM (PROGRAMA FUENTE EN ASSEMBLER)\n        Descripcion => Utilidad para localizar un Miembro en todos los\n                    => dataset PDS o PDS/E de una instalacion\n                    => La libreria donde este el modulo tiene que estar\n                    => autorizada (APF)\n    *\n     CKRENMEJ (JCL)\n     CKRENMEM (PROGRAMA FUENTE EN ASSEMBLER)\n        Descripcion => Renombra un miembro de una libreria particionada\n                    => en un proceso Batch (JCL), la ventaja es que\n                    => se puede referenciar la libreria en forma SHR\n    *\n     CKSTJOBM (PROGRAMA FUENTE EN ASSEMBLER)\n     CKSTJOBJ (JCL)\n        Descripcion => Utilidad para detectar si un JOB o STC esta\n                    => ejecutandose en el Sistema\n    *\n     CKSYMB   (EDIT MACRO)\n     CKSYMBOL (PROGRAMA FUENTE EN ASSEMBLER)\n     CKSYMBP  (PROCEDIMIENTO CATALOGADO)\n        Descripcion => Utilidad para submitir un job (CKSYMB) pero\n                    => sustituyendo los symbolos definidos al sistema\n                    => Tambien se pude utilizar un INTRDR (CKSYMBP)\n                    => para ejecutar un job despues de sustituir\n                    => los symbolos del sistema\n    *\n     CKUSOJ   (JCL)\n     CKUSOP   (PROCEDIMIENTO CATALOGADO)\n     CKUSOX   (REXX)\n        Descripcion => Utilidad para usar en un JCL y controlar que\n                    => porcentaje de utilizacion tiene un Dataset\n    *\n     CKYAESTA (PROGRAMA FUENTE EN ASSEMBLER)\n     CKYAESTJ (JCL)\n        Descripcion => Utilidad para detectar si un STC ya esta\n                    => ejecutandose en el Sistema\n    *\n     LLENAR   (EDIT MACRO)\n        Descripcion => Macro de EDIT para rellenar una serie de numeros\n                    => lleva un HELP incorporado\n    *\n     MENSAJE  (PROGRAMA FUENTE EN ASSEMBLER)\n        Descripcion => Porgramas para invocar a la macro WTO y mandar un\n                    => mensaje a la consola maestra\n    *\n     MESES    (CLIST)\n     MESP1    (PANEL)\n     MESP2    (PANEL)\n     MESP3    (PANEL)\n        Descripcion => Es un calendario, usar PFK7 para desplazarse\n                    => adelante, PFK8 para atras y PFK3 para salir\n    *\n     PRESTAMO (CLIST)\n     PRESTA   (PANEL)\n     PRESTA4  (PROGRAMA EN COBOL)\n        Descripcion => Para calcular un prestamo\n    *\n     SUMAR    (EDIT MACRO)\n        Descripcion => Macro de EDIT para sumar una serie de numeros\n                    => lleva un HELP incorporado\n    *\n     VERDSN   (REXX)\n     VERDSNP  (PANEL)\n     VERDSNS  (PROGRAMA FUENTE EN ASSEMBLER)\n     VER00    (MENSAJES)\n        Descripcion => Utilidad para localizar un Dataset por todos los\n                    => discos de una instalacion\n    *\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$INDEXE": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00Q\\x01\\x00$\\x1f\\x01\\x143/\\x145\\x00\\x8a\\x00\\x00\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2000-08-28T00:00:00", "modifydate": "2014-11-28T14:35:51", "lines": 138, "newlines": 0, "modlines": 0, "user": "SBGOLOB"}, "text": "***********************************************************************\n*                  Baldomero Castilla Roldan\n*                  Programador de Sistemas\n*                  Madrid (Espana)\n*                  bcastill@ceca.es\n*                  bcastill@cajaactiva.es\n***********************************************************************\n*\n* I have attempted to translate this documentation into English.\n* Please excuse my poor Spanish.   (S.Golob)\n*\n* This contains a collection of utilities, which include the full\n* program, and a JCL example.  There are REXX, CLIST, EDIT MACROS, etc.\n*\n* All of the information is in 2 libraries:\n*\n*  FILE 480 Source   (includes everything, except executable modules)\n*  FILE 481 Loadlib  (includes the executables, some of which need APF\n*                     authorization.)\n*\n* I think that the most interesting things are:\n*    VERDSN, Used to find a file among all the disk packs in an\n*            installation\n*  CKLOCMEM, Used to find a member of a pds, among all the pds'es\n*            in the entire installation\n*    CKDATE, This is a method of controling the steps of a JCL\n*            stream, depending on the date and the hour\n***********************************************************************\n*\n***********************************************************************\n*  Contents of the Library:\n***********************************************************************\n    *\n     CALCUL   (REXX)\n     CALCULP  (PANEL)\n        Description => This is a calculator\n    *\n     CKDATEJ  (JCL)\n     CKDATEP  (Cataloged Procedure)\n     CKDATEX  (REXX)\n        Description => Utility to know what year, month, day...etc.\n                    => in a JCL, depending on Return Code.\n    *\n     CKDELMEJ (JCL)\n     CKDELMEM (Source Program in Assembler)\n        Description => Delete a member of a partitioned dataset\n                    => in a Batch Job (JCL), the advantage is to\n                    => be able to refer to the library as DISP=SHR\n    *\n     CKFINAL  (MACRO)\n        Description => Assembler macro\n    *\n     CKIEBGEJ (JCL)\n     CKIEBGEN (Source Program in Assembler)\n        Description => Program to make a copy between SYSUT1\n                    => and SYSUT2, the same as IEBGENER, but\n                    => with files of arbitrary length.\n    *\n     CKINICIO (MACRO)\n        Description => Assembler macro\n    *\n     CKLEVEL  (Source Program in Assembler)\n     CKLEVELJ (JCL)\n        Description => Utility to list the contents of a group\n                    => of sequential files, without giving the\n                    => complete name, only a partial name, using\n                    => LEVEL.\n    *\n     CKLOCMEJ (JCL)\n     CKLOCMEM (Source Program in Assembler)\n        Description => Utility.  Given a member name, find all of the\n                    => PDS or PDSE datasets of an installation where\n                    => that module has to be APF authorized.\n    *\n     CKRENMEJ (JCL)\n     CKRENMEM (Source Program in Assembler)\n        Description => Rename a member of a pds in a Batch process\n                    => i.e. with JCL.  The advantage is that you\n                    => only have to allocate the library, DISP=SHR.\n    *\n     CKSTJOBM (Source Program in Assembler)\n     CKSTJOBJ (JCL)\n        Description => Utility to detect if a JOB or and STC is\n                    => executing in the system.\n    *\n     CKSYMB   (EDIT MACRO)\n     CKSYMBOL (Source Program in Assembler)\n     CKSYMBP  (Cataloged Procedure)\n        Description => Utility to submit a job (CKSYMB) but\n                    => sustituting the global symbols defined to the\n                    => system.\n                    => Also, you can use an INTRDR (CKSYMBP)\n                    => to execute such a job before substituting\n                    => the system symbols.\n    *\n     CKUSOJ   (JCL)\n     CKUSOP   (Cataloged Procedure)\n     CKUSOX   (REXX)\n        Description => Utility to use in JCL and to control what\n                    => percentage of utilization a dataset has.\n    *\n     CKYAESTA (Source Program in Assembler)\n     CKYAESTJ (JCL)\n        Description => Utility to detect if an STC is already\n                    => executing in the system.\n    *\n     LLENAR   (EDIT MACRO)\n        Description => Edit Macro to fill up a series of line numbers.\n                    => It has its own HELP incorporated in it.\n    *\n     MENSAJE  (Source Program in Assembler)\n        Description => Programs to invoke a WTO macro and transmit\n                    => a message to the master console.\n    *\n     MESES    (CLIST)\n     MESP1    (PANEL)\n     MESP2    (PANEL)\n     MESP3    (PANEL)\n        Description => This is a calendar, using PFK7 in order to\n                    => display ahead, PFK8 to display backward,\n                    => and PFK3 to exit.\n    *\n     PRESTAMO (CLIST)\n     PRESTA   (PANEL)\n     PRESTA4  (Source Program in COBOL)\n        Descripcion => Utility to calculate lends\n    *\n     SUMAR    (EDIT MACRO)\n        Description => Edit Macro to total a series of numbers.\n                    => Has its own incorporated HELP.\n    *\n     VERDSN   (REXX)\n     VERDSNP  (PANEL)\n     VERDSNS  (Source Program in Assembler)\n     VER00    (MESSAGES)\n        Description => Utility to find a dataset on all of the\n                    => disks in an installation\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE480": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04_\\x00\\x03\\x01\\x173\\x1f\\x01\\x173\\x1f\\x14&\\x00\\xb1\\x00\\xb1\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf5@@@'", "ispf": {"version": "04.95", "flags": 0, "createdate": "2017-11-27T00:00:00", "modifydate": "2017-11-27T14:26:03", "lines": 177, "newlines": 177, "modlines": 0, "user": "CBT-495"}, "text": "//***FILE 480 is a collection of utilities from Baldomero Castilla  *   FILE 480\n//*           of Madrid, Spain.  Baldomero can understand spoken    *   FILE 480\n//*           English and written English, so he can support these  *   FILE 480\n//*           programs.  But he can't write English, so all of the  *   FILE 480\n//*           programs and utilities found here, are commented in   *   FILE 480\n//*           Spanish.  I have translated Baldomero's general       *   FILE 480\n//*           documentation into English, and if anyone needs a     *   FILE 480\n//*           program translated, I guess I can try, without        *   FILE 480\n//*           promising.  There's some very good code here, so if   *   FILE 480\n//*           you think you can negotiate the Spanish, please give  *   FILE 480\n//*           it a shot.  A translation of Baldomero's              *   FILE 480\n//*           documentation follows:                                *   FILE 480\n//*                                                                 *   FILE 480\n//*      Translator's email:  Sam Golob <sbgolob@cbttape.org>       *   FILE 480\n//*                                                                 *   FILE 480\n//*                Baldomero Castilla Roldan                        *   FILE 480\n//*                Programador de Sistemas                          *   FILE 480\n//*                Madrid (Espana)                                  *   FILE 480\n//*                bcastill@ceca.es                                 *   FILE 480\n//*                bcastill@cajaactiva.es                           *   FILE 480\n//*                                                                 *   FILE 480\n//*     I have attempted to translate this documentation into       *   FILE 480\n//*     English.  Please excuse my poor Spanish.   (S.Golob)        *   FILE 480\n//*                                                                 *   FILE 480\n//*     This contains a collection of utilities, which include      *   FILE 480\n//*     the full program, and a JCL example.  There are REXX,       *   FILE 480\n//*     CLIST, EDIT MACROS, etc.                                    *   FILE 480\n//*                                                                 *   FILE 480\n//*     All of the information is in 2 libraries:                   *   FILE 480\n//*                                                                 *   FILE 480\n//*      FILE 480 Source   (includes everything, except             *   FILE 480\n//*                         executable modules)                     *   FILE 480\n//*                                                                 *   FILE 480\n//*      Member   LOADLIB  (includes the executables, some of       *   FILE 480\n//*                         which need APF authorization.)          *   FILE 480\n//*                        This member is in TSO XMIT format,       *   FILE 480\n//*                        and it replaces the former File 481.     *   FILE 480\n//*                                                                 *   FILE 480\n//*     I think that the most interesting things are:               *   FILE 480\n//*                                                                 *   FILE 480\n//*        VERDSN, Used to find a file among all the disk           *   FILE 480\n//*                packs in an installation                         *   FILE 480\n//*                                                                 *   FILE 480\n//*      CKLOCMEM, Used to find a member of a pds, among all        *   FILE 480\n//*                the pds'es in the entire installation            *   FILE 480\n//*                                                                 *   FILE 480\n//*        CKDATE, This is a method of controling the steps of      *   FILE 480\n//*                a JCL stream, depending on the date and the      *   FILE 480\n//*                hour                                             *   FILE 480\n//*                                                                 *   FILE 480\n//*      Contents or the Library:                                   *   FILE 480\n//*                                                                 *   FILE 480\n//*        CALCUL   (REXX)                                          *   FILE 480\n//*        CALCULP  (PANEL)                                         *   FILE 480\n//*           Description => This is a calculator                   *   FILE 480\n//*                                                                 *   FILE 480\n//*        CKDATEJ  (JCL)                                           *   FILE 480\n//*        CKDATEP  (Cataloged Procedure)                           *   FILE 480\n//*        CKDATEX  (REXX)                                          *   FILE 480\n//*           Description => Utility to know what year, month,      *   FILE 480\n//*                       => day...etc.  in a JCL, depending        *   FILE 480\n//*                       => on Return Code.                        *   FILE 480\n//*                                                                 *   FILE 480\n//*        CKDELMEJ (JCL)                                           *   FILE 480\n//*        CKDELMEM (Source Program in Assembler)                   *   FILE 480\n//*           Description => Delete a member of a partitioned       *   FILE 480\n//*                       => dataset in a Batch Job (JCL), the      *   FILE 480\n//*                       => advantage is to be able to refer       *   FILE 480\n//*                       => to the library as DISP=SHR             *   FILE 480\n//*                                                                 *   FILE 480\n//*        CKFINAL  (MACRO)                                         *   FILE 480\n//*           Description => Assembler macro                        *   FILE 480\n//*                                                                 *   FILE 480\n//*        CKIEBGEJ (JCL)                                           *   FILE 480\n//*        CKIEBGEN (Source Program in Assembler)                   *   FILE 480\n//*           Description => Program to make a copy between         *   FILE 480\n//*                       => SYSUT1 and SYSUT2, the same as         *   FILE 480\n//*                       => IEBGENER, but with files of            *   FILE 480\n//*                       => arbitrary length.                      *   FILE 480\n//*                                                                 *   FILE 480\n//*                 (Improved enormously by Sam Golob and           *   FILE 480\n//*                  Warren Whitford, to report record counts,      *   FILE 480\n//*                  and to select some records to copy.)           *   FILE 480\n//*                 Original CKIEBGEN program is called member      *   FILE 480\n//*                 CKIEBGEO here.  Use the new one.                *   FILE 480\n//*                                                                 *   FILE 480\n//*        CKINICIO (MACRO)                                         *   FILE 480\n//*           Description => Assembler macro                        *   FILE 480\n//*                                                                 *   FILE 480\n//*        CKLEVEL  (Source Program in Assembler)                   *   FILE 480\n//*        CKLEVELJ (JCL)                                           *   FILE 480\n//*           Description => Utility to list the contents of a      *   FILE 480\n//*                       => group of sequential files,             *   FILE 480\n//*                       => without giving the complete name,      *   FILE 480\n//*                       => only a partial name, using LEVEL.      *   FILE 480\n//*                                                                 *   FILE 480\n//*        CKLOCMEJ (JCL)                                           *   FILE 480\n//*        CKLOCMEM (Source Program in Assembler)                   *   FILE 480\n//*           Description => Utility.  Given a member name,         *   FILE 480\n//*                       => find all of the PDS or PDSE            *   FILE 480\n//*                       => datasets of an installation where      *   FILE 480\n//*                       => that module has to be APF              *   FILE 480\n//*                       => authorized.                            *   FILE 480\n//*                                                                 *   FILE 480\n//*        CKRENMEJ (JCL)                                           *   FILE 480\n//*        CKRENMEM (Source Program in Assembler)                   *   FILE 480\n//*           Description => Rename a member of a pds in a          *   FILE 480\n//*                       => Batch process i.e. with JCL.  The      *   FILE 480\n//*                       => advantage is that you only have        *   FILE 480\n//*                       => to allocate the library,               *   FILE 480\n//*                       => DISP=SHR.                              *   FILE 480\n//*                                                                 *   FILE 480\n//*        CKSTJOBM (Source Program in Assembler)                   *   FILE 480\n//*        CKSTJOBJ (JCL)                                           *   FILE 480\n//*           Description => Utility to detect if a JOB or and      *   FILE 480\n//*                       => STC is executing in the system.        *   FILE 480\n//*                                                                 *   FILE 480\n//*        CKSYMB   (EDIT MACRO)                                    *   FILE 480\n//*        CKSYMBOL (Source Program in Assembler)                   *   FILE 480\n//*        CKSYMBP  (Cataloged Procedure)                           *   FILE 480\n//*           Description => Utility to submit a job (CKSYMB)       *   FILE 480\n//*                       => but sustituting the global             *   FILE 480\n//*                       => symbols defined to the system.         *   FILE 480\n//*                       => Also, you can use an INTRDR            *   FILE 480\n//*                       => (CKSYMBP) to execute such a job        *   FILE 480\n//*                       => before substituting the system         *   FILE 480\n//*                       => symbols.                               *   FILE 480\n//*                                                                 *   FILE 480\n//*        CKUSOJ   (JCL)                                           *   FILE 480\n//*        CKUSOP   (Cataloged Procedure)                           *   FILE 480\n//*        CKUSOX   (REXX)                                          *   FILE 480\n//*           Description => Utility to use in JCL and to           *   FILE 480\n//*                       => control what percentage of             *   FILE 480\n//*                       => utilization a dataset has.             *   FILE 480\n//*                                                                 *   FILE 480\n//*        CKYAESTA (Source Program in Assembler)                   *   FILE 480\n//*        CKYAESTJ (JCL)                                           *   FILE 480\n//*           Description => Utility to detect if an STC is         *   FILE 480\n//*                       => already executing in the system.       *   FILE 480\n//*                                                                 *   FILE 480\n//*        LLENAR   (EDIT MACRO)                                    *   FILE 480\n//*           Description => Edit Macro to fill up a series of      *   FILE 480\n//*                       => line numbers.  It has its own          *   FILE 480\n//*                       => HELP incorporated in it.               *   FILE 480\n//*                                                                 *   FILE 480\n//*        MENSAJE  (Source Program in Assembler)                   *   FILE 480\n//*           Description => Programs to invoke a WTO macro         *   FILE 480\n//*                       => and transmit a message to the          *   FILE 480\n//*                       => master console.                        *   FILE 480\n//*                                                                 *   FILE 480\n//*        MESES    (CLIST)                                         *   FILE 480\n//*        MESP1    (PANEL)                                         *   FILE 480\n//*        MESP2    (PANEL)                                         *   FILE 480\n//*        MESP3    (PANEL)                                         *   FILE 480\n//*           Description => This is a calendar, using PFK7 in      *   FILE 480\n//*                       => order to display ahead, PFK8 to        *   FILE 480\n//*                       => display backward, and PFK3 to          *   FILE 480\n//*                       => exit.                                  *   FILE 480\n//*                                                                 *   FILE 480\n//*        PRESTAMO (CLIST)                                         *   FILE 480\n//*        PRESTA   (PANEL)                                         *   FILE 480\n//*        PRESTA4  (Source Program in COBOL)                       *   FILE 480\n//*           Description => Utility to calculate lends             *   FILE 480\n//*                                                                 *   FILE 480\n//*                                                                 *   FILE 480\n//*        SUMAR    (EDIT MACRO)                                    *   FILE 480\n//*           Description => Edit Macro to total a series           *   FILE 480\n//*                       => of numbers.  Has its own               *   FILE 480\n//*                       => incorporated HELP.                     *   FILE 480\n//*                                                                 *   FILE 480\n//*        VERDSN   (REXX)                                          *   FILE 480\n//*        VERDSNP  (PANEL)                                         *   FILE 480\n//*        VERDSNS  (Source Program in Assembler)                   *   FILE 480\n//*        VER00    (MESSAGES)                                      *   FILE 480\n//*           Description => Utility to find a dataset on all       *   FILE 480\n//*                       => of the disks in an installation        *   FILE 480\n//*                                                                 *   FILE 480\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CALCUL": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14\\x06\\x00\\x11\\x00\\x0f\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:06:00", "lines": 17, "newlines": 15, "modlines": 0, "user": "ADMINI3"}, "text": "/* REXX */\n\"ISPEXEC LIBDEF ISPPLIB DATASET ID('USXXBCR.CBT.ALL')\"\nmsgstat = MSG('off')\nDD = 0\nRC2 = 0\nADDRESS ISPEXEC 'ADDPOP ROW(14) COLUMN(1)'\nSYNTAX:\n  RC2 = RC\n  RC = 0\nDO WHILE RC = 0\n signal on SYNTAX\n IF RC2 \u00ac= 35 then interpret \"RR = \"DD\"\"\n RC2 = 0\n address ISPEXEC 'DISPLAY PANEL(CALCULP)'\nEND\n\"ISPEXEC LIBDEF ISPPLIB\"\nEXIT 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CALCULP": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14\\x03\\x00\\x10\\x00\\x10\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:03:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "ADMINI3"}, "text": ")ATTR DEFAULT(\u00a2\"$)\n _ TYPE (OUTPUT) INTENS (HIGH) CAPS(OFF) JUST(ASIS)\n | TYPE (INPUT)  INTENS (LOW) CAPS(OFF) JUST(ASIS)\n @ TYPE (TEXT)   INTENS (LOW) CAPS(OFF) JUST(ASIS)\n \u00ac TYPE (TEXT)   INTENS (HIGH) CAPS(OFF) JUST(ASIS)\n)BODY WINDOW(76,6)\n@---\u00acCalculadora@--- teclear en\u00acE@la expresion y en\u00acR@aparecera el resultado\n\u00ac+@Suma\u00ac-@Resta\u00ac*@Multi.\u00ac/@Dividir\u00ac%@Cociente entero\u00ac//@Resto\u00ac**@Exponenciar\n@\n@E=>|DD\n@\n@R=>_RR\n)INIT\n)REINIT\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CKDATEJ": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00$\\x1f\\x01\\x00$\\x1f\\x08E\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-28T00:00:00", "modifydate": "2000-08-28T08:45:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "ADMINI3"}, "text": "//CKDATE   JOB 000000000,' ',MSGCLASS=X,MSGLEVEL=(1,1)\n//**\n//D EXEC CKDATE\n//**\n//**   VARIABLES:\n//**        D.CKANO.RC ===> A#O\n//**        D.CKMES.RC ===> MES\n//**        D.CKDIA.RC ===> DIA\n//**        D.CKHOR.RC ===> HORA\n//**        D.CKMIN.RC ===> MINUTOS\n//**        D.CKSEG.RC ===> SEGUNDOS\n//**        D.CKSEM.RC ===> DIA DE LA SEMANA 01 A 07  = LUNES A DOMINGO\n//**\n//**    | = OR\n//**    & = AND\n//**\n//T IF (D.CKANO.RC = 2000 | D.CKMES.RC = 08 | D.CKDIA.RC = 06) THEN\n//**\n//*** PONER AQUI EL PASO O PASOS A EJECUTAR SI SE CUMPLE\n//**\n//PSI EXEC PGM=IEFBR14\n//**\n//  ELSE\n//**\n//*** PONER AQUI EL PASO O PASOS A EJECUTAR SI NO SE CUMPLE\n//**\n//PNO EXEC PGM=IEFBR14\n//**\n//  ENDIF\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKDATEP": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00$\\x1f\\x01\\x00$\\x1f\\x08D\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-28T00:00:00", "modifydate": "2000-08-28T08:44:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "ADMINI3"}, "text": "//CKDATE PROC\n//CKDIA     EXEC PGM=IRXJCL,PARM='CKDATEX D'\n//SYSEXEC   DD DSN=USXXBCR.CBT.ALL,DISP=SHR\n//SYSTSPRT  DD SYSOUT=X\n//SYSTSIN   DD DUMMY\n//CKMES     EXEC PGM=IRXJCL,PARM='CKDATEX M'\n//SYSEXEC   DD DSN=USXXBCR.CBT.ALL,DISP=SHR\n//SYSTSPRT  DD SYSOUT=X\n//SYSTSIN   DD DUMMY\n//CKANO     EXEC PGM=IRXJCL,PARM='CKDATEX A'\n//SYSEXEC   DD DSN=USXXBCR.CBT.ALL,DISP=SHR\n//SYSTSPRT  DD SYSOUT=X\n//SYSTSIN   DD DUMMY\n//CKHOR     EXEC PGM=IRXJCL,PARM='CKDATEX H'\n//SYSEXEC   DD DSN=USXXBCR.CBT.ALL,DISP=SHR\n//SYSTSPRT  DD SYSOUT=X\n//SYSTSIN   DD DUMMY\n//CKMIN     EXEC PGM=IRXJCL,PARM='CKDATEX I'\n//SYSEXEC   DD DSN=USXXBCR.CBT.ALL,DISP=SHR\n//SYSTSPRT  DD SYSOUT=X\n//SYSTSIN   DD DUMMY\n//CKSEG     EXEC PGM=IRXJCL,PARM='CKDATEX S'\n//SYSEXEC   DD DSN=USXXBCR.CBT.ALL,DISP=SHR\n//SYSTSPRT  DD SYSOUT=X\n//SYSTSIN   DD DUMMY\n//CKSEM     EXEC PGM=IRXJCL,PARM='CKDATEX X'\n//SYSEXEC   DD DSN=USXXBCR.CBT.ALL,DISP=SHR\n//SYSTSPRT  DD SYSOUT=X\n//SYSTSIN   DD DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKDATEX": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00$\\x1f\\x01\\x00$\\x1f\\x08B\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-28T00:00:00", "modifydate": "2000-08-28T08:42:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "ADMINI3"}, "text": "/* REXX */\nARG P\nDS = DATE(S)\nF  = DATE(W)\nTS = TIME( )\nANO = SUBSTR(DS,1,4)\nMES = SUBSTR(DS,5,2)\nDIA = SUBSTR(DS,7,2)\nHOR = SUBSTR(TS,1,2)\nMIN = SUBSTR(TS,4,2)\nSEG = SUBSTR(TS,7,2)\nSAY DIA MES ANO HOR MIN SEG F\nSELECT\n WHEN P = A THEN EXIT ANO\n WHEN P = M THEN EXIT MES\n WHEN P = D THEN EXIT DIA\n WHEN P = H THEN EXIT HOR\n WHEN P = I THEN EXIT MIN\n WHEN P = S THEN EXIT SEG\n WHEN F = 'Monday'    THEN EXIT 01\n WHEN F = 'Tuesday'   THEN EXIT 02\n WHEN F = 'Wednesday' THEN EXIT 03\n WHEN F = 'Thursday'  THEN EXIT 04\n WHEN F = 'Friday'    THEN EXIT 05\n WHEN F = 'Saturday'  THEN EXIT 06\n WHEN F = 'Sunday'    THEN EXIT 07\n OTHERWISE EXIT 99\nEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CKDELMEJ": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14B\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:42:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "ADMINI3"}, "text": "//CKDELMEM JOB 000000000,' ',MSGCLASS=X,MSGLEVEL=(1,1)\n//**\n//**\n//**\n//CKDELMEM  EXEC PGM=CKDELMEM,PARM='MIEMBRO'\n//STEPLIB   DD  DSN=USXXBCR.CBT.LOADLIB,DISP=SHR\n//DDSYSIN   DD  DSN=LIBRERIA DONDE ESTA EL MIEMBRO\n//**\n//**\n//**\n//**\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKDELMEM": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14@\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:40:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "ADMINI3"}, "text": "CKDELMEM CKINICIO\n         LR    R8,R1               LOAD PARM LIST\n         L     R3,0(R8)            ADDRESSING WORK-AREA\n         LH    R5,0(R3)            LENGTH MEMBER NAME\n         BCTR  R5,R0               PREPARE EXECUTE\n         EX    R5,MOVER            MOVE MEMBER\n         OPEN  (DDIN,UPDAT)        OPEN DATASET\n         STOW  DDIN,MEMBER,D       DELETE MEMBER\nCLOSIN   CLOSE (DDIN)              CLOSE DATASET\nFINAL    CKFINAL RET=0\nMOVER    MVC   MEMBER(0),2(R3)     EX MOVE MEMBER\nDDIN     DCB   DDNAME=DDSYSIN,DSORG=PO,MACRF=(R)\n         DS   D\nMEMBER   DC   CL8'        '\n         END   CKDELMEM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKFINAL": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14\\x12\\x00\\x13\\x00\\x13\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:12:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "ADMINI3"}, "text": "         MACRO\n&NOMBRE  CKFINAL  &RET=O\n         AIF   ('&NOMBRE' EQ '').GO\n&NOMBRE  DS    0H\n.GO      ANOP\n         L     RD,4(RD)              RESTAURA DIR. SAVEA LLAMANTE\n         AIF   ('&RET' EQ '(15)').SKIP\n         AIF   ('&RET' EQ '(RF)').SKIP\n         AIF   ('&RET' EQ '(R15)').SKIP\n         ANOP\n         LM    RE,RC,12(RD)           RESTORE THE REGISTERS\n         AIF   ('&RET' EQ 'O').CONTA\n         LA    RF,&RET.(0,0)\n         AGO   .CONTA\n.SKIP    L     RE,12(RD)\n         LM    0,RC,20(RD)                  RESTORE THE REGISTERS\n.CONTA   ANOP\n         BR    RE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKIEBGE$": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x12\\x01\\x00$?\\x01\\x173\\x1f\\x14$\\x00\\x1c\\x00\\x1e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2000-08-30T00:00:00", "modifydate": "2017-11-27T14:24:12", "lines": 28, "newlines": 30, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT495.FILE480(CKIEBGEN)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB495480\n SETCODE AC(0)\n NAME    CKIEBGEN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKIEBGE#": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00$?\\x01\\x00$?\\x11H\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-08-30T00:00:00", "modifydate": "2000-08-30T11:48:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "WSBG"}, "text": "//WSBGU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=S,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//STEPLIB  DD DISP=SHR,DSN=WSBG.HLASMR3.LOAD\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=WSBG.B.ASM\n//SYSIN    DD DISP=SHR,DSN=WSBG.B.ASM(CKIEBGEN)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=WSBG.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=WSBG.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB429480\n SETCODE AC(0)\n NAME    CKIEBGEN(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKIEBGEJ": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x04\\x01\\x00#\\x8f\\x01\\x143/\\x158\\x00\\x10\\x00\\x0b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2014-11-28T15:38:04", "lines": 16, "newlines": 11, "modlines": 0, "user": "SBGOLOB"}, "text": "//CKIEBGEN  JOB 000000000,' ',MSGCLASS=X,MSGLEVEL=(1,1)\n//**\n//**\n//**\n//CKIEBGEN EXEC PGM=CKIEBGEN\n//STEPLIB  DD  DSN=USXXBCR.CBT.LOADLIB,DISP=SHR\n//SYSUT1   DD  DSN=\n//SYSUT2   DD  DSN=\n//SYSPRINT DD  SYSOUT=X\n//**\n//**    YOU HAVE TO SPECIFY ENOUGH DCB INFORMATION\n//**    TO FILL IN ALL THE FIELDS IN THE JFCB.\n//**    SOMETIMES IF THE DATASET IS CATALOGED, THERE\n//**    IS ENOUGH INFORMATION, BUT THERE ARE NO\n//**    DEFAULTS IN THE CKIEBGEN PROGRAM.\n//**\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKIEBGEK": {"ttr": 785, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x143/\\x01\\x143/\\x155\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-11-28T00:00:00", "modifydate": "2014-11-28T15:35:02", "lines": 15, "newlines": 15, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBB JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*    SAMPLE JCL FOR CKIEBGEN\n//*\n//CKIEBGEN EXEC PGM=CKIEBGEN\n//STEPLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSUT1    DD  DISP=SHR,UNIT=562,DSN=ALGOLF.LVL210.JCL,\n//    DCB=(RECFM=FB,LRECL=80,BLKSIZE=800),VOL=(,RETAIN,SER=ALGOLF),\n//    LABEL=(01,SL,EXPDT=98000)\n//SYSUT2    DD  DISP=(NEW,CATLG,DELETE),DSN=SBGOLOB.ALGOLF21.JCL,\n//    DCB=(RECFM=FB,LRECL=80,BLKSIZE=6160),VOL=SER=WORKE1,\n//    SPACE=(TRK,(5,15),RLSE)\n//SYSPRINT  DD  SYSOUT=*\n//SYSUDUMP  DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKIEBGEN": {"ttr": 787, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x009\\x01\\x081/\\x01\\x173\\x1f\\tR\\x033\\x01)\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2008-11-07T00:00:00", "modifydate": "2017-11-27T09:52:39", "lines": 819, "newlines": 297, "modlines": 0, "user": "SBGOLOB"}, "text": "   TITLE 'CKIEBGEN -- GENERAL QSAM FILE COPY PROGRAM  '\n* ----------------------------------------------------------------- *\n*     CKIEBGEN   -   ORIGINAL PROGRAM WAS BY BALDOMERO CASTILLA     *\n*                                                                   *\n*                    \"PRETTIFIED BY SAM GOLOB\"                      *\n*                    \"IMPROVED BY WARREN WHITFORD\"                  *\n*                                                                   *\n*     Function:      General QSAM file copying program that         *\n*                    copies records.                                *\n*                                                                   *\n*     Date Written:  August 25, 2000                                *\n*                                                                   *\n*     Change Levels:                                                *\n*                                                                   *\n*     Level 007 -    Introduce selection criteria to copy only      *\n*      (Nov 2011)    part of a file by counting records.            *\n*                    If SYSIN DD is present, the program looks      *\n*                    for SKIP=mmmmmmm or COPY=nnnnnnn or both,      *\n*                    starting in column 1, to first skip mmmmmmm    *\n*                    records in the file, and then copy the next    *\n*                    nnnnnnn records afterwards.  (S.Golob)         *\n*                                                                   *\n*     Level 008 -    Return code processing for missing DCB         *\n*      (Nov 2017)    attribues.  Fix reporting of RECFM errors.     *\n*                    Get rid of RETURN macro.                       *\n*                    Fix errors in SKIP= and COPY= processing.      *\n*                    Later SKIP=,COPY= overrides earlier coding.    *\n*                    Allow 12 packed digits for SKIP=,COPY=,        *\n*                     so the largest numbers allowed are            *\n*                     999999999999 (12 digits).  Ignore binary      *\n*                     numbers greater than 2,147,483,647, because   *\n*                     the CVB instruction can't handle them, but    *\n*                     the packed numbers are the ones used here     *\n*                     for comparison, not the binary numbers.       *\n*                    If a SKIP= or COPY= card has a numeric error,  *\n*                     then stop the processing with RC=12, and      *\n*                     abort the copy.                               *\n*                    Increased report number size for skipped       *\n*                     or copied records, in or out records.         *\n*                    Fixed possible catastrophic error when you     *\n*                     try and process numbers much greater than 12  *\n*                     digits in SKIP and COPY SYSIN statements.     *\n*                     (Limit number scan to 12 digits only.)        *\n*                                                                   *\n*     Note:  (To test what happens when JFCB fields have NOT YET    *\n*             been filled in, move the OPEN macros for SYSUT1       *\n*             and SYSUT2 to after the GO label, so the RDJFCB       *\n*             is done BEFORE the OPEN.  Then you'll have to fill    *\n*             in all the DCB values in your JCL, in order to get    *\n*             the program to run.  The catalog won't help you       *\n*             then.  This is for diagnosis purposes only.)          *\n* ----------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R7,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         GBLC  &LLEV\n&LLEV    SETC  '008'                SET PROGRAM LEVEL\n*\nCKIEBGEN CSECT\n         YREGS\n         USING *,R15\n         B     EYECATCH\n         DC    C'--- '              MAKE EYECATCHER VISIBLE\n         DC    C'CKIEBGEN - GENERAL QSAM COPY PGM   - '\n         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'--- '\n         DC    C'LEVEL &LLEV '\n         DC    C'--- '              MAKE EYECATCHER VISIBLE\nSAVEAREA DC    18F'0'\nEYECATCH DS    0H                   ENSURE ALIGNMENT\n         SAVE  (14,12)\n         LR    R5,R1                SAVE PARM POINTER\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE AREA ADDRESS\n         DROP  R15\n* -----                             SET UP THREE BASE REGISTERS\n         USING CKIEBGEN,R12,R11,R10\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LR    R1,R5                RESTORE PARM POINTER\n         PRINT GEN\n***********************************************************************\n*                    GET SYSTEM DATE AND TIME                         *\n***********************************************************************\n         STM   R14,R2,SAVE1402\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n*                          FILL HEADDATE AREA WITH INFO TO REUSE\n         MVC   HEADDATE(2),DATED\n         MVI   HEADDATE+2,C'/'\n         MVC   HEADDATE+3(2),DATED+2\n         MVI   HEADDATE+5,C'/'\n         MVC   HEADDATE+6(4),DATED+4\n         MVC   HEADDATE+12(2),TIMED\n         MVI   HEADDATE+14,C':'\n         MVC   HEADDATE+15(2),TIMED+2\n         MVI   HEADDATE+17,C':'\n         MVC   HEADDATE+18(2),TIMED+4\n         MVC   HEADER+54(23),HEADDATE\n         MVI   HEADER+38,C'-'\n         MVC   HEADER+40(6),=C'LEVEL '\n         MVC   HEADER+46(3),=C'&LLEV'\n         LM    R14,R2,SAVE1402\n***********************************************************************\n* ------------------------------------------------------------------- *\nINITCON  DS    0H                   Initialize constants.\n         MVI   FLAGSYSN,X'00'       Initialize SYSIN flag.\n         MVI   ABORTFLG,X'00'       Initialize ABORT flag.\n         MVI   BLNKLINE-1,X'40'     Initial blank for BLNKLINE.\n* ------------------------------------------------------------------- *\n*   Check to see if there are SYSIN cards, and process their values.  *\n* ------------------------------------------------------------------- *\n         OPEN  (SYSPRINT,OUTPUT)\n         BAL   R7,TIOTSCAN          Scan if SYSIN DD is there.\n         TM    FLAGSYSN,X'01'       Is SYSIN DD there?\n         BZ    NOSYSIN              No. Just copy the entire file.\n         BAL   R7,DOSYSIN           Yes. Process all the SYSIN cards.\n* ------------------------------------------------------------------- *\n*   SYSIN, if it exists, has been processed, and its values saved,    *\n*          and the SYSIN DDname has been already CLOSEd.              *\n* ------------------------------------------------------------------- *\nNOSYSIN  DS    0H                   All ABORTs are before the OPENs\n         TM    INVNFLG,X'01'        Invalid SKIP or COPY?\n         BO    ABORT                Yes. Error. ABORT NOW..!!\n         TM    INVNFLG,X'02'        More than 12 digits coded?\n         BO    EXCESS               Yes. Kill it before it multiplies.\n*\n         MVC   OUTLINE,OUTLINE-1    Print program header.\n         MVC   OUTLINE(133),HEADER\n         PUT   SYSPRINT,OUTLINE\n* -------\n         MVC   OUTLINE,OUTLINE-1    Print underlines.\n         MVC   OUTLINE(133),HEADERJ\n         PUT   SYSPRINT,OUTLINE\n*-------------------------------------------------------------------- *\n*  Comment on the placement of OPEN before/after the RDJFCB.          *\n*                                                                     *\n*  In this program, we OPEN the SYSUT1 and SYSUT2 DCB's before        *\n*  doing the RDJFCB to find out the files' characteristics.  OPEN     *\n*  fills in the DCB information from the catalog and the VTOC of      *\n*  the pack, pointed to by the catalog, and adds it to the JFCB.      *\n*  This makes it easier to run the program.  If there is anything     *\n*  REAL that is missing from the JFCB information, then OPEN will     *\n*  usually itself flag the error (producing an invalid OPEN or an     *\n*  abend of the Sx13 type), so our error correction mechanism will    *\n*  not usually work when OPEN comes first.  But if OPEN comes after   *\n*  the RDJFCB, then only the JCL information will show up in the      *\n*  JFCB.  So any DCB information that was not supplied by the JCL,    *\n*  and is therefore missing from the JFCB, will be apparent.          *\n*                                                                     *\n*  Therefore I have an identical version of this program, called      *\n*  CKIEBTST, with no differences except to put the OPEN after the     *\n*  GO label, which is after the RDJFCB.  Then the RDJFCB happens      *\n*  BEFORE the OPEN in that program, and if there is any DCB info      *\n*  missing from the JCL itself, it will now show up.  So we can use   *\n*  the CKIEBTST program to test our error reporting, to see if it     *\n*  is accurate.  And CKIEBTST serves to debug our error-detecting     *\n*  mechanisms in CKIEBGEN.                                            *\n*-------------------------------------------------------------------- *\nPRLMJFCB DS    0H                   Preliminary RDJFCB to determine\n*                                   available DCB field information.\n*\n* -------                           OPEN input and output files.\n* -------                           OPEN is BEFORE the RDJFCB.\n         OPEN  (SYSUT1,(INPUT))\n         OPEN  (SYSUT2,(OUTPUT))\n         RDJFCB SYSUT1\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'1'            Show SYSUT1\n         BAL   R7,PRTJFCB           Print available information.\n         RDJFCB SYSUT2\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'2'            Show SYSUT2\n         BAL   R7,PRTJFCB           Print available information.\n         TM    FLAG1,X'0F'          No problems? Not missing JCL info?\n         BZ    GO                   Then go copy the file.\n         B     ABSTART              Otherwise report errors and exit.\n* ------------------------------------------------------------------- *\nGO       DS    0H                   Proceed to do the file copy.\n* ------------------------------------------------------------------- *\n*   To test for missing DCB attributes, move the SYSUTx OPENS here.   *\n* ------------------------------------------------------------------- *\n         ZAP   INRCDS,=P'0'               Initialize counters.\n         ZAP   OUTRCDS,=P'0'\n         ZAP   SKIPRCDS,=P'0'\n         ZAP   COPYRCDS,=P'0'\n* ------------------------------------------------------------------- *\nREADWRIT DS    0H                         Main processing loop.\n         GET   SYSUT1,AREA                Get a new record.\n         AP    INRCDS,=P'1'               Count it as incoming.\n         TM    SKIPFLG,X'01'              Was SKIP coded?\n         BO    CNTSKIP                    Yes. Handle the skipping.\n         TM    SKIPFLG,X'02'              Was COPY coded?\n         BO    CNTCOPY                    Yes. Handle that.\n         B     PUTITOUT                   Neither. Copy all records.\n*\n*                                         PACKED NUMBERS USED FOR SKIP\nCNTSKIP  DS    0H                         Handle record skipping\n         CP    PKSKIP,INRCDS              Have we exceeded threshold?\n         BL    CNTCOPY                    Yes. See if copy was coded.\n         AP    SKIPRCDS,=P'1'             No. Count this skipped rcrd.\n         B     READWRIT                   And get another one.\n*\n*                                         PACKED NUMBERS USED FOR COPY\nCNTCOPY  DS    0H                         Handle subsequent copy.\n         TM    SKIPFLG,X'02'              Was COPY coded?\n         BZ    CNTCOPYA                   No. Then there's no limit.\n         CP    PKCOPY,COPYRCDS            Limit exceeded?\n         BNH   FIN                        Yes. Get out altogether.\nCNTCOPYA DS    0H\n         AP    COPYRCDS,=P'1'             Count record copied.\nPUTITOUT DS    0H                         And actually copy it.\n         PUT   SYSUT2,AREA\n         AP    OUTRCDS,=P'1'              Output record count.\n         B     READWRIT                   Loop back. Get another record\n* -------\nFIN      DS    0H                         Print Summary report and Exit\n         MVC   OUTLINE,OUTLINE-1\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG01\n         MVC   OUTLINE+19(20),EDPAT2\n         ED    OUTLINE+20(20),INRCDS+0    Number of records input\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG02\n         MVC   OUTLINE+19(20),EDPAT2\n         ED    OUTLINE+20(20),OUTRCDS+0   Number of records output\n         PUT   SYSPRINT,OUTLINE\n         TM    SKIPFLG,X'03'              Were SKIP= or COPY= coded?\n         BZ    GOCLOSE                    No. Extra print unnecessary.\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG03\n         MVC   OUTLINE+19(20),EDPAT2\n         ED    OUTLINE+20(20),SKIPRCDS+0  Number of records skipped\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG04\n         MVC   OUTLINE+19(20),EDPAT2\n         ED    OUTLINE+20(20),COPYRCDS+0  Number of records copied\n         PUT   SYSPRINT,OUTLINE\nGOCLOSE  DS    0H                        Close input and output files\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n* -------\nTHEEND   DS    0H                        Normal Return\n         CLOSE SYSPRINT\n         L     R13,4(,R13)\n         MVC   16(4,R13),=F'0'           Return code 0 in R15\n         LM    R14,R12,12(R13)           RESTORE THE REGISTERS\n         BR    R14                       RETURN\nEXCESS   DS    0H                        Excess digits coded\n         MVC   OUTLINE,OUTLINE-1         Clear line\n         MVC   OUTLINE(133),EXCESMSG     Move excess message\n         PUT   SYSPRINT,OUTLINE\n         B     CLOSPRNT                  Close SYSPRINT\nABORT    DS    0H                        Normal Return\n         MVC   OUTLINE,OUTLINE-1         Clear line\n         MVC   OUTLINE(133),ABORTMSG     Move abort message\n         PUT   SYSPRINT,OUTLINE\nCLOSPRNT DS    0H                        Close SYSPRINT\n         CLOSE SYSPRINT\n         L     R13,4(,R13)\n         MVC   16(4,R13),=F'12'          Return code 12 in R15\n         LM    R14,R12,12(R13)           RESTORE THE REGISTERS\n         BR    R14                       RETURN\n         EJECT\n* ------------------------------------------------------------------- *\n*  Come here if not enough DCB attributes to feed QSAM to make a copy *\n* ------------------------------------------------------------------- *\nABSTART  DS    0H                        Missing DCB attributes....\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n         MVC   OUTLINE,OUTLINE-1         Tell em....\n         MVC   OUTLINE(133),ABENDMSG\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1         Tell em....\n         MVC   OUTLINE(133),ABENDMS2\n         PUT   SYSPRINT,OUTLINE\nGOABS    DS    0H                        Abnormal Return\n         CLOSE SYSPRINT\n         L     R13,4(,R13)\n         MVC   16(4,R13),=F'12'          Return code 12 in R15\n         LM    R14,R12,12(R13)           RESTORE THE REGISTERS\n         BR    R14                       RETURN\n* ------------------------------------------------------------------- *\n* ------------------------------------------------------------------- *\n*                 S  U  B  R  O  U  T  I  N  E  S                     *\n* ------------------------------------------------------------------- *\n* ------------------------------------------------------------------- *\n* -- BELOW ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n* ------------------------------------------------------------------- *\nPRTJFCB  DS    0H                         DSN MESSAGE MOVED BEFORE.\n         MVC   OUTLINE+19(44),JFCBDSNM    MOVE DSNAME.\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGMBR\n         MVC   OUTLINE+19(8),JFCBELNM     MOVE MEMBER NAME.\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGVOLSR           MOVE VOLSER MESSAGE.\n         MVC   OUTLINE+19(6),JFCBVOLS       MOVE UP TO 5 VOLUMES.\n         MVC   OUTLINE+26(6),JFCBVOLS+6\n         MVC   OUTLINE+33(6),JFCBVOLS+12\n         MVC   OUTLINE+40(6),JFCBVOLS+18\n         MVC   OUTLINE+47(6),JFCBVOLS+24\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSORG           MOVE DSORG MESSAGE.\n*                                         FIGURE OUT THE DSORG...\n         MVC   OUTLINE+19(3),=C'IS '      ASSUME ISAM.\n         CLI   JFCDSRG1,JFCORGIS          IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'ISU'      ASSUME ISAM UNMOVABLE.\n         CLI   JFCDSRG1,JFCORGIS+JFCORGU  IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'PS '      ASSUME PHYSICAL SEQUENTIAL.\n         CLI   JFCDSRG1,JFCORGPS          IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'PSU'      ASSUME PS UNMOVABLE.\n         CLI   JFCDSRG1,JFCORGPS+JFCORGU  IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'DA '      ASSUME DIRECT ACCESS.\n         CLI   JFCDSRG1,JFCORGDA          IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'DAU'      ASSUME DA UNMOVABLE.\n         CLI   JFCDSRG1,JFCORGDA+JFCORGU  IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'PO '      ASSUME PARTITIONED.\n         CLI   JFCDSRG1,JFCORGPO          IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         MVC   OUTLINE+19(3),=C'POU'      ASSUME PO UNMOVABLE.\n         CLI   JFCDSRG1,JFCORGPO+JFCORGU  IS IT?\n         BE    PUTDSRG                    YES, AND PUT MESSAGE.\n*\n         OI    FLAG1,X'01'                FLAG DSORG MISSING\n         MVC   OUTLINE+19(15),=C'MISSING OR VSAM'   MOVE TO MSG.\nPUTDSRG  PUT   SYSPRINT,OUTLINE\n* ------------------------------------------------------------------- *\nRECFM    DS    0H                         TEST FOR RECFM.\n         OI    FLAG1,X'08'                ASSUME NO RECFM & DISPROVE.\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGRECFM           MOVE RECFM MESSAGE.\n         LA    R4,OUTLINE+19              POINT TO RECFM REPORT AREA.\n* ------------------------------------------------------------------- *\n*   TEST FOR UNDEFINED FIRST, BECAUSE LRECL=0 IS THEN A VALID VALUE.  *\n* ------------------------------------------------------------------- *\n         TM    JFCRECFM,JFCUND            IS IT UNDEFINED?\n         BNO   NOTUND                     NO. LRECL=0 NOT VALID.\n         MVI   0(R4),C'U'                 MARK AS UNDEFINED.\n         OI    FLAG2,X'01'                FLAG RECFM=U (SPECIAL CASE)\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n         A     R4,ONE                     BUMP ONE PLACE.\n         B     CHKB\nNOTUND   TM    JFCRECFM,JFCFIX            FIXED RECORDS?\n         BNO   NOTFIX                     NO. TRY NEXT.\n         MVI   0(R4),C'F'                 YES. MARK FIXED.\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n         A     R4,ONE                     BUMP ONE PLACE.\n*\nNOTFIX   TM    JFCRECFM,JFCVAR            VARIABLE RECORDS?\n         BNO   CHKB                       NO. TRY NEXT.\n         MVI   0(R4),C'V'                 YES. MARK VARIABLE.\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n         A     R4,ONE                     BUMP ONE PLACE.\n*\nCHKB     TM    JFCRECFM,JFCRFB            BLOCKED RECORDS?\n         BNO   NOTBLK                     NO. TRY NEXT.\n         MVI   0(R4),C'B'                 YES. MARKED BLOCKED.\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n         A     R4,ONE                     BUMP ONE PLACE.\n*\nNOTBLK   TM    JFCRECFM,JFCRFS            SPANNED RECORDS?\n         BNO   NOTSCN                     NO. TRY NEXT.\n         MVI   0(R4),C'S'                 YES. MARK SPANNED.\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n         A     R4,ONE                     BUMP ONE PLACE.\n*\nNOTSCN   TM    JFCRECFM,JFCASA            ASA CONTROL CHARACTERS?\n         BNO   NOTASA                     NO. TRY NEXT.\n         MVI   0(R4),C'A'                 YES. MARK ASA.\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n         A     R4,ONE                     BUMP ONE PLACE.\n*\nNOTASA   TM    JFCRECFM,JFCMAC            MACHINE CONTROL CHARS?\n         BNO   PUTRECFM                   NO. CHECK IF NO RECFM.\n         MVI   0(R4),C'M'                 YES. MARK MACHINE.\n         NI    FLAG1,X'FF'-X'08'          TURN OFF NO RECFM.\n*\nPUTRECFM TM    FLAG1,X'08'                IS RECFM MISSING?\n         BNO   PUTRCFM                    NO. PRINT THE RECFM.\n         MVC   OUTLINE+19(14),=C'NO RECFM CODED'  YES. MARK MISSING.\nPUTRCFM  PUT   SYSPRINT,OUTLINE\n* ------------------------------------------------------------------- *\nLRECL    DS    0H                         TEST FOR LRECL.\n         MVC   OUTLINE,OUTLINE-1          CLEAR OUTPUT.\n         MVC   OUTLINE,MSGLRECL           MOVE LRECL MESSAGE.\n         SR    R4,R4                      CLEAR WORK REGISTER.\n         LH    R4,JFCLRECL                LOAD IT WITH JFCB LRECL.\n         C     R4,=F'0'                   IS THE VALUE ZERO?\n         BNE   LRECPRT                    NO. DON'T TEST FOR RECFM=U.\n         TM    FLAG2,X'01'                IS IT RECFM=U?\n         BO    LRECPRT                    YES. 0 IS LEGITIMATE.\n         OI    FLAG1,X'04'                NO. INDICATE LRECL MISSING.\n         MVC   OUTLINE+19(7),=C'MISSING'  SHOW IT IN MESSAGE.\n         B     LRECPUT                    WRITE LRECL MESSAGE\n*\nLRECPRT  DS    0H                         LRECL PRINT.\n         CVD   R4,DECVALUE                CONVERT BINARY TO PACKED.\n         MVC   OUTLINE+19(12),EDPAT       EDIT.\n         ED    OUTLINE+19(12),DECVALUE+3  DISPLAY LRECL VALUE IN MSG.\nLRECPUT  PUT   SYSPRINT,OUTLINE\n* ------------------------------------------------------------------- *\n*                                         PRINT BLOCKSIZE MESSAGE.\nBLKSIZE  MVC   OUTLINE,OUTLINE-1          CLEAR OUTPUT LINE.\n         MVC   OUTLINE,MSGBLKSZ           MOVE IN BLOCKSIZE MESSAGE.\n         SR    R4,R4                      CLEAR WORK REGISTER.\n         LH    R4,JFCBLKSI                LOAD BINARY BLKSZ FROM JFCB.\n         C     R4,=F'0'                   IS IT ZERO?\n         BNE   BLKSIZEG                   NO. BLOCK SIZE IS GOOD.\n         OI    FLAG1,X'02'                YES. FLAG BLKSIZE MISSING.\n         MVC   OUTLINE+19(15),=C'ZERO OR MISSING'   AND PRINT ERRMSG.\n         B     BLKSZPUT                   GO PRINT BLOCKSIZE ERRMSG.\nBLKSIZEG CVD   R4,DECVALUE                GOOD VALUE, CONVERT TO PACKED\n         MVC   OUTLINE+19(12),EDPAT       BLKSIZE EDIT PATTERN\n         ED    OUTLINE+19(12),DECVALUE+3  DISPLAY VALUE IN MESSAGE.\nBLKSZPUT PUT   SYSPRINT,OUTLINE           PRINT BLOCKSIZE MSG OUT.\n*\n         BR    R7                         RETURN TO CALLER.\n* -- ABOVE ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n* ------------------------------------------------------------------- *\nTIOTSCAN DS    0H                Determine the presence of Optional   *\n*                                DDNAME:   SYSIN                      *\n* ----->                         OPEN SYSIN if there is JCL for it.   *\n* ------------------------------------------------------------------- *\n         ST    R7,SAVER7TT               SAVE BAL REGISTER\n         ST    R3,SAVER3TT               SAVE WORK REGISTERS\n         ST    R5,SAVER5TT\n         L     R5,16                     R5=CVT\n         L     R5,0(,R5)                 R5=TCB WORDS\n         L     R5,4(,R5)                 R5=MY TCB\n         L     R5,12(,R5)                R5=TIOT\n         LA    R5,24(,R5)                R5=FIRST DD ENTRY\nTIOTLOOP CLC   0(4,R5),=XL4'00'          END OF TIOT?\n         BE    TIOTSEND                  YES\nTIOTSYSN CLC   4(8,R5),SYSIN+40          ENTRY MATCH?\n         BNE   TIOTNEXT                  NO. TRY NEXT ONE.\n         OI    FLAGSYSN,X'01'            YES-SHOW PRESENCE OF SYSIN DD\n         B     TIOTNEXT\nTIOTNEXT SR    R3,R3\n         IC    R3,0(,R5)                 R3=LENGTH OF DD ENTRY\n         AR    R5,R3                     R5=NEXT DD ENTRY\n         B     TIOTLOOP                  GO CHECK IT\nTIOTSEND DS    0H\n         L     R3,SAVER3TT               RESTORE WORK REGISTERS\n         L     R5,SAVER5TT\n         L     R7,SAVER7TT               RESTORE BAL REGISTER\n         BR    R7                        R7 IS THE BAL REGISTER\n* ------------------------------------------------------------------- *\nSAVER3TT DS    F\nSAVER5TT DS    F\nSAVER7TT DS    F\nFLAGSYSN DC    X'00'\n* ------------------------------------------------------------------- *\n*                    PROCESS THE SYSIN RECORDS                        *\n* ------------------------------------------------------------------- *\nDOSYSIN  DS    0H                        Process SYSIN records.\n         ST    R7,SAVER7SY\n         OPEN  (SYSIN,(INPUT))\n         STM   R3,R4,SAVE34              Save the work registers.\n         MVC   BLNKLINE,BLNKLINE-1       Clear blank line\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+1(65),=C'   Display SYSIN Cards and Conversions x\n                (Later overrides Earlier)'\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+1(65),=C'   ------- ----- ----- --- ----------- x\n                 ----- --------- ------- '\n         PUT   SYSPRINT,OUTLINE\nSYINLOOP DS    0H                        Read all the SYSIN cards.\n         GET   SYSIN,INSYSIN             GET a card.\n         NI    NUMCFLG,X'FF'-X'07'       Assume number on card is valid\n         MVC   WRKSYSIN(80),INSYSIN      Make a copy of it.\n         OC    WRKSYSIN,BLNKLINE         Uppercase the copy.\n* ------------------------------------------------------------------ *\n*           DISPLAY SYSIN CARDS AS THEY WILL BE LOOKED AT            *\n* ------------------------------------------------------------------ *\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+4(80),WRKSYSIN    Move uppercased card image.\n         MVC   OUTLINE+39(21),=C'<--- (Value as coded)'\n         PUT   SYSPRINT,OUTLINE\n* ------------------------------------------------------------------ *\n*           Test the uppercased card for keywords                    *\n*           And afterwards do the proper displacements               *\n* ------------------------------------------------------------------ *\n         LA    R3,WRKSYSIN               Point R3 to the uppercased.\n         LA    R4,INSYSIN                Point R4 to the original.\n         CLC   =C'COPY= ',0(R3)           COPY= followed by space?\n         BE    SYINLOOP                   No number there, so ignore.\n         CLC   =C'SKIP= ',0(R3)           SKIP= followed by space?\n         BE    SYINLOOP                   No number there, so ignore.\n         CLC   =C'COPY=',0(R3)            COPY= keyword?\n         BE    HCOPY                      Yes. Handle it.\n         CLC   =C'SKIP=',0(R3)            SKIP= keyword?\n         BE    HSKIP                      Yes. Handle it.\n         B     SYINLOOP\nHCOPY    DS    0H                         Handle COPY=\n         OI    SKIPFLG,X'02'              Indicate its presence.\n         LA    R4,5(,R4)                  Point to the number.\n         LA    R3,5(,R3)\n         BAL   R7,NUMBRGET                Extract the number.\n         MVC   CHCOPY(12),CHARNUM         Display value\n         MVC   BICOPY(4),BINVALUE         Binary  value\n         TM    NUMCFLG,X'01'              INVALID?\n         BO    HNZCOPY                    DON'T PACK IF INVALID !!\n         ZAP   PKCOPY,PACKNUM             Packed  value\nHNZCOPY  DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINET(7),=C'COPY=  '\n         MVC   OUTLINE+20(8),=C'Binary: '\n         HEX   OUTLINE+29,4,BICOPY\n         MVC   OUTLINE+45(8),=C'Decimal:'\n         MVC   OUTLINE+55(12),CHCOPY\n         TM    NUMCFLG,X'01'\n         BZ    HCOPYGD\n         MVC   OUTLINE+68(15),=C'Invalid Numeric'\nHCOPYGD  DS    0H\n         TM    NUMCFLG,X'02'\n         BZ    HCOPYGD1\n         MVC   OUTLINE+68(21),=C'Binary Limit Exceeded'\nHCOPYGD1 DS    0H\n         PUT   SYSPRINT,OUTLINE\n         B     SYINLOOP                   Look for next card.\n*\nHSKIP    DS    0H                         Handle SKIP=\n         OI    SKIPFLG,X'01'              Indicate its presence.\n         LA    R4,5(,R4)                  Bump the pointers.\n         LA    R3,5(,R3)\n         BAL   R7,NUMBRGET                Extract the number.\n         MVC   CHSKIP(12),CHARNUM         Display value\n         MVC   BISKIP(4),BINVALUE         Binary  value\n         TM    NUMCFLG,X'01'              INVALID?\n         BO    HNZSKIP                    DON'T PACK IF INVALID !!\n         ZAP   PKSKIP,PACKNUM             Packed  value\nHNZSKIP  DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINET(7),=C'SKIP=  '\n         MVC   OUTLINE+20(8),=C'Binary: '\n         HEX   OUTLINE+29,4,BISKIP\n         MVC   OUTLINE+45(8),=C'Decimal:'\n         MVC   OUTLINE+55(12),CHSKIP\n         TM    NUMCFLG,X'01'           Invalid numeric character coded\n         BZ    HSKIPGD\n         MVC   OUTLINE+68(15),=C'Invalid Numeric'\nHSKIPGD  DS    0H\n         TM    NUMCFLG,X'02'           Binary equivalent > X'7FFFFFFF'\n         BZ    HSKIPGD1                (Doesn't cause abend or RC>0.)\n         MVC   OUTLINE+68(21),=C'Binary Limit Exceeded'\nHSKIPGD1 DS    0H                      PUT error message out.\n         PUT   SYSPRINT,OUTLINE\n         B     SYINLOOP                Look for next card.\nSYSINEND DS    0H\n         MVC   OUTLINE,OUTLINE-1\n*        PUT   SYSPRINT,OUTLINE\n* ----- >\n         CLOSE (SYSIN)\n         LM    R3,R4,SAVE34\nSYSINENX DS    0H\n         MVC   OUTLINE,OUTLINE-1       Print a blank line.\n         PUT   SYSPRINT,OUTLINE\n         L     R7,SAVER7SY\n         BR    R7\n*------------------------  Constants needed for this routine -----*\nSAVE34   DS    2F                Save work registers for routine.\nSAVER7SY DS    F                 Save BAL register.\nINSYSIN  DC    CL80' '           Buffer for SYSIN card image.\nWRKSYSIN DC    CL80' '           Buffer to uppercase SYSIN image.\n         DC    X'40'\nBLNKLINE DC    CL80' '           Place to supply blanks for pgm.\nCHCOPY   DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT\nBICOPY   DS    F                 FULLWORD BINARY NUMBER\nPKCOPY   DS    PL8               Packed Decimal records to copy.\nCHSKIP   DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT\nBISKIP   DS    F                 FULLWORD BINARY NUMBER\nPKSKIP   DS    PL8               Packed Decimal records to skip.\n*-----------------------------------------------------------------*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Routine to get the numeric values from the SYSIN keywords.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*-----------------------------------------------------------------*\nNUMBRGET DS    0H                   Initialize for each SYSIN card.\n         ST    R7,SAVER7NG          Save BAL register.\n         ST    R4,SAVER4A           Save address of number in original\n         ST    R3,SAVER3A           Save address of number in copy\n         NI    NUMCFLG,X'FF'-X'07'  Turn off \"not numeric\" flag.\n         MVC   CHARNUM(12),BLNKLINE   Initialize character field\n         XC    BINVALUE,BINVALUE      Clear binary value\n         LA    R6,12                Limit the search to 12 numbers.\n* ----------------------------------------------------------------- *\n*    Upon entry, R4 points to \"number\" in original.\n*    Upon entry, R3 points to \"number\" in copy.\n* ----------------------------------------------------------------- *\n         CLI   0(R4),C' '        Is the first number value blank?\n         BE    NUMBRCLG          Yes. Ignore the entire card.\n* --\n* ----------------------------------------------------------------- *\n*    At this point, we are looking at the first character after     *\n*     the particular keyword, and we want to test it and extract    *\n*     its value.                                                    *\n* ----------------------------------------------------------------- *\n         CLI   0(R4),X'F0'       Smaller than character 0?\n         BL    NUMBRNVL          Yes. Mark as invalid.\n         CLI   0(R4),X'F9'       Bigger than 9?\n         BH    NUMBRNVL          Yes. Mark as invalid.\n         B     NUMBRVLD          Didn't fail, consider the number valid\n*                   Remember that R4 is start address for \"number\".\nNUMBRNVL DS    0H                Mark the character as invalid number.\n         OI    NUMCFLG,X'01'     Set \"invalid flag\" for this number.\n         OI    INVNFLG,X'01'     Show there's an invalid number coded.\n         MVI   0(R4),C'*'        Mark invalid digit in the report.\nNUMBRVLD DS    0H\n* ----------------------------------------------------------------- *\nNUMBRNUM DS    0H                Loop to extract the number.\n         LA    R4,1(,R4)         Bump R4 to point to next character.\n         C     R4,INSYSIN+71     End of card?\n         BH    NUMBRGNM          Yes, Get number.\n         CLI   0(R4),C' '        Blank here?\n         BE    NUMBRGNM          Yes, Get number.\n** ----- >>   Validity Check - below\n* --\n         CLI   0(R4),X'F0'       Smaller than C'0'?\n         BL    NUMBINVL          Yes. Mark as invalid.\n         CLI   0(R4),X'F9'       Bigger than C'9'?\n         BH    NUMBINVL          Yes. Mark as invalid.\n         B     NUMBVALD          None of above, don't mark invalid.\nNUMBINVL DS    0H                Mark the character as invalid number.\n         OI    NUMCFLG,X'01'     Set \"invalid flag\" for this number.\n         OI    INVNFLG,X'01'     Show there's an invalid number coded.\n         MVI   0(R4),C'*'        Mark invalid digit in the report.\nNUMBVALD DS    0H\n** ----- >>   Validity Check - above\n         BCT   R6,NUMBRNUM       Step up one place.\n         OI    INVNFLG,X'02'     Show we've coded more than 12 numbers\n* ----------------------------------------------------------------- *\n*  This is a serious error, and we abort the COPY with a message.   *\n* ----------------------------------------------------------------- *\nNUMBRGNM DS    0H\n         L     R2,SAVER4A        Load R2 with address of number start\n         SR    R4,R2             How big is the number?\n         BCTR  R4,0              Lower by one for EXECUTE.\n         TM    NUMCFLG,X'01'     Was any digit of the number invalid?\n         BO    NUMBRNPK          Yes, don't try to pack it. S0C7.\n         XC    PACKWORK,PACKWORK   Clear the work area.\n         EX    R4,PACKIT         Pack the number into work area.\n         MVC   OUTLINE,OUTLINE-1\n         HEX   OUTLINE+20,8,PACKWORK     Test display\n*        PUT   SYSPRINT,OUTLINE          For diagnosis of packed no.\n         ZAP   PACKNUM,PACKWORK\n         MVC   OUTLINE,OUTLINE-1\n         HEX   OUTLINE+20,8,PACKNUM      Test display\n*        PUT   SYSPRINT,OUTLINE          For diagnosis of packed no.\nNUMBRNPK DS    0H\n         MVC   CHARNUM(12),BLNKLINE   Clear the display area.\n         EX    R4,MVNUMBER       Move the display value to display.\n         TM    NUMCFLG,X'01'     Was any digit of the number invalid?\n         BO    NUMBRCLG          Yes, don't try to convert it. S0C7.\n* ----------------------------------------------------------------- *\n*      Prevent S0C9 abend if binary number exceeds X'7FFFFFFF'      *\n* ----------------------------------------------------------------- *\n         CP    PACKWORK,=P'2147483647'   Saves S0C9 for big number\n         BH    NUMBRCLY          CVB has upper limit of X'7FFFFFFF'\n         CVB   R0,PACKWORK       Convert the packed version to binary.\n         ST    R0,BINVALUE       Store the binary value for later use.\n         B     NUMBRCLG\nNUMBRCLY DS    0H\n         OI    NUMCFLG,X'02'     CVB limit exceeded. Flag it.\nNUMBRCLG DS    0H                End of routine to extract numbers.\n         L     R3,SAVER3A\n         L     R7,SAVER7NG       Restore BAL register.\n         BR    R7\n* ----------------------------------------------------------------- *\nPACKIT   PACK  PACKWORK,0(0,R2)      <<< EXECUTED >>>\nMVNUMBER MVC   CHARNUM(0),0(R2)      <<< EXECUTED >>>\nSAVER7NG DS    F\nSAVER3A  DS    F\nSAVER4A  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPACKWORK DC    2D'0'             PACK WORK AREA (expanded to 2D)\nCHARNUM  DC    CL12' '           CHARACTER NUMBER JUSTIFIED LEFT\nBINVALUE DS    F                 FULLWORD BINARY NUMBER\nPACKNUM  DS    PL8               Packed number.\n*\nNUMCFLG  DS    X                 Error flag FOR EACH SYSIN card\n*              X'01'             Error present in THIS card\n*              X'02'             Number exceeds CVB limit\n*\nINVNFLG  DS    X                 Error present in ANY card-ABORT..\n*              X'01'             Non-numeric in any card.\n*              X'02'             A coded number exceeds 12 digits.\n*\nSKIPFLG  DC    X'00'\n*                                X'01' - SKIP coded\n*                                X'02' - COPY coded\n* ----------------------------------------------------------------- *\nHEX      DS    0H                    Hex Number Display Routine.\n         ST    R7,SAV7HEX\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R7,SAV7HEX\n         BR    R7                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n* ----------------------------------------------------------------- *\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV7HEX  DC    F'0'\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*-----------------------------------------------------------------*\n*\n* ----- WORK AREA ------ *\nFLAG1    DC    X'00'          For PRTJFCB routine.\n*              X'01'          DSORG is missing or in error\n*              X'02'          BLKSIZE is missing or in error\n*              X'04'          LRECL is missing or in error\n*              X'08'          RECFM is missing or in error\nFLAG2    DC    X'00'          X'01' shows RECFM=U, LRECL=0 is valid\nABORTFLG DC    X'00'\n* ----- CONSTANTS ------ *\nPKZERO   DC    PL8'0'\nONE      DC    F'1'\nDECVALUE DS    CL8\nEDPAT    DC    X'402020206B2020206B202120'\nEDPAT2   DC    X'402020206B2020206B2020206B2020206B202120'\n         DC    C' '\nBLANKS   DC    CL133' '\nOUTLINE  DS    CL133\nOUTLINET EQU   OUTLINE+7\nHEADER   DC    CL133'1  CKIEBGEN - SEQUENTIAL COPY PROGRAM'\nHEADERJ  DC    CL133'-   JFCB REPORT OF DATASET CHARACTERISTICS '\nMSGDSN   DC    CL133'-     SYSUTX DSN ='\nMSGVOLSR DC    CL133'         VOLSER  ='\nMSGMBR   DC    CL133'         MEMBER  ='\nMSGDSORG DC    CL133'         DSORG   ='\nMSGBLKSZ DC    CL133'         BLKSIZE ='\nMSGLRECL DC    CL133'         LRECL   ='\nMSGRECFM DC    CL133'         RECFM   ='\nMSG01    DC    CL133'-    RECORDS  IN ='\nMSG02    DC    CL133'     RECORDS OUT ='\nMSG03    DC    CL133'     SKIPPED     ='\nMSG04    DC    CL133'     COPIED      ='\nABENDMSG DC    CL133'-   JFCB IS MISSING VALUES - CORRECT YOUR JCL '\nABENDMS2 DC    CL133'-         ***  NO DATA WAS COPIED  *** '\nABORTMSG DC    CL133'-   SYSIN CARDS INVALID - COPY ABORTED '\nEXCESMSG DC    CL133'-   SYSIN CARDS INVALID - MORE THAN 12 DIGITS   '\nINRCDS   DC    PL8'0'\nOUTRCDS  DC    PL8'0'\nSKIPRCDS DC    PL8'0'\nCOPYRCDS DC    PL8'0'\n         LTORG\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS,EXLST=JFCB1\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS,EXLST=JFCB1\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA\nSYSIN    DCB   MACRF=GM,DDNAME=SYSIN,DSORG=PS,RECFM=FB,LRECL=80,       X\n               EODAD=SYSINEND\n         DC    CL8' '\nSAVE1402 DS    6F                 ONE MORE FOR SAFETY\n* ----------------------------------------------------------------- *\n*          Work area for time and date display routine              *\n* ----------------------------------------------------------------- *\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\nHEADDATE DC    CL23' '\n         DC    CL8' '\n* ----------------------------------------------------------------- *\n*                    R D J F C B  Work Area                         *\n* ----------------------------------------------------------------- *\n         DS    0F\nJFCB1    DC    X'87'\n         DC    AL3(INFMJFCB)\n         IEFJFCBN LIST=YES\n* ----------------------------------------------------------------- *\n*                         Copy Buffer                               *\n* ----------------------------------------------------------------- *\nAREA     DS    CL32768\n         END   CKIEBGEN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CKIEBGEO": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00$?\\x11I\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd6\\xd9\\xc9\\xc7\\xc9\\xd5\\xd3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-30T11:49:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "ORIGINL"}, "text": "CKIEBGEN CKINICIO\n         PRINT NOGEN\n         OPEN  (SYSUT1,(INPUT))\n         OPEN  (SYSUT2,(OUTPUT))\nLEER     GET   SYSUT1,AREA\n         PUT   SYSUT2,AREA\n         B     LEER\nFIN      CLOSE SYSUT1\n         CLOSE SYSUT2\n         CKFINAL RET=0\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS\nAREA     DS    CL32760\n         END   CKIEBGEN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKIEBG07": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00H\\x01\\x081/\\x01\\x173\\x1f\\x13\\x06\\x02\\x97\\x01)\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2008-11-07T00:00:00", "modifydate": "2017-11-27T13:06:48", "lines": 663, "newlines": 297, "modlines": 0, "user": "SBGOLOB"}, "text": "* ----------------------------------------------------------------- *\n*       CKIEBGEN   -   ORIGINAL PROGRAM WAS BY BALDOMERO CASTILLA   *\n*                                                                   *\n*                      \"PRETTIFIED BY SAM GOLOB\"                    *\n*                      \"IMPROVED BY WARREN WHITFORD\"                *\n*                                                                   *\n*        Level 007 -   Introduce selection criteria to copy only    *\n*         (Nov 2011)   part of a file by counting records.          *\n*                      If SYSIN DD is present, the program looks    *\n*                      for SKIP=mmmmmmm or COPY=nnnnnnn or both,    *\n*                      starting in column 1, to first skip mmmmmmm  *\n*                      records in the file, and then copy the next  *\n*                      nnnnnnn records afterwards.  (S.Golob)       *\n*                                                                   *\n*         (Nov 2017)   When the number in SKIP=, or COPY=, was      *\n*                      greater than 2,147,483,647 then the CVB      *\n*                      instruction (which is really not necessary   *\n*                      for the comparisons, because the packed      *\n*                      values are used for comparisons) goes down   *\n*                      with a S0C9 abend.  This is bypassed in the  *\n*                      code.  That opens us up to a problem when    *\n*                      many more than 10 digits were coded.  And    *\n*                      we solve that by replacing B NUMBRGNM by a   *\n*                      BCT R6,NUMBRGNM, with R6 preset to 10.       *\n*                      This limits the number of numeric digits     *\n*                      searched for, to 10, and no more.            *\n* ----------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R7,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         GBLC  &LLEV\n&LLEV    SETC  '007'\n*\nCKIEBGEN CSECT\n         YREGS\n         USING *,R15\n         B     EYECATCH\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\n         DC    C'CKIEBGEN - GENERAL QSAM COPY PGM   - '\n         DC    C'&SYSDATE',C'  ',C'&SYSTIME ',C'--- '\n         DC    C'LEVEL &LLEV '\n         DC    C'--- '            MAKE EYECATCHER VISIBLE\nSAVEAREA DC    18F'0'\nEYECATCH DS    0H             ENSURE ALIGNMENT\n         SAVE  (14,12)\n         LR    R5,R1          SAVE PARM POINTER\n         LA    R1,SAVEAREA          NEW SAVE-AREA ADDR\n         ST    R1,8(,R13)           FORWARD SAVE-AREA CHAIN PTR\n         ST    R13,4(,R1)           BACKWARD SAVE-AREA CHAIN PTR\n         LR    R13,R1               NEW SAVE AREA ADDRESS\n         DROP  R15\n* -----                       SET UP TWO BASE REGISTERS\n         USING CKIEBGEN,R12,R11,R10\n         LR    R12,R15\n         LR    R11,R12\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LR    R1,R5          RESTORE PARM POINTER\n         PRINT GEN\n***********************************************************************\n* GET SYSTEM DATE AND TIME                                            *\n***********************************************************************\n         STM   R14,R2,SAVE1402\n         TIME  DEC,DATETIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY\n         OI    DATE+4,X'0F'\n         UNPK  DATED,DATE\n         OI    TIME+3,X'0F'\n         UNPK  TIMED,TIME\n*                          FILL HEADDATE AREA WITH INFO TO REUSE\n         MVC   HEADDATE(2),DATED\n         MVI   HEADDATE+2,C'/'\n         MVC   HEADDATE+3(2),DATED+2\n         MVI   HEADDATE+5,C'/'\n         MVC   HEADDATE+6(4),DATED+4\n         MVC   HEADDATE+12(2),TIMED\n         MVI   HEADDATE+14,C':'\n         MVC   HEADDATE+15(2),TIMED+2\n         MVI   HEADDATE+17,C':'\n         MVC   HEADDATE+18(2),TIMED+4\n         MVC   HEADER+54(23),HEADDATE\n         MVI   HEADER+38,C'-'\n         MVC   HEADER+40(6),=C'LEVEL '\n         MVC   HEADER+46(3),=C'&LLEV'\n         LM    R14,R2,SAVE1402\n***********************************************************************\n* ------------------------------------------------------------------- *\nINITCON  DS    0H\n         MVI   FLAGSYSN,X'00'       Initialize SYSIN flag.\n* ------------------------------------------------------------------- *\n         OPEN  (SYSPRINT,OUTPUT)\n         BAL   R7,TIOTSCAN          Scan if SYSIN DD is there.\n         TM    FLAGSYSN,X'01'       Is SYSIN DD there?\n         BZ    NOSYSIN              No. Just copy the entire file.\n         BAL   R7,DOSYSIN           Yes. Process the cards.\nNOSYSIN  DS    0H\nPRLMJFCB DS    0H                   Preliminary RDJFCB to determine\n*                                   available DCB field information.\n*--------\n         MVC   OUTLINE,OUTLINE-1    Print program header.\n         MVC   OUTLINE(133),HEADER\n         PUT   SYSPRINT,OUTLINE\n* -------\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),HEADERJ\n         PUT   SYSPRINT,OUTLINE\n* -------                           OPEN input and output files.\n         OPEN  (SYSUT1,(INPUT))\n         OPEN  (SYSUT2,(OUTPUT))\n         RDJFCB SYSUT1\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'1'            SYSUT1\n         BAL   R7,PRTJFCB           Print available information.\n         RDJFCB SYSUT2\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSN\n         MVI   OUTLINE+11,C'2'            SYSUT2\n         BAL   R7,PRTJFCB           Print available information.\n         TM    FLAG1,X'07'          No problems? Not missing info?\n         BZ    GO                   Then go copy the file.\n         B     ABSTART\n* ------------------------------------------------------------------- *\nGO       DS    0H\n         ZAP   INRCDS,=P'0'               Initialize counters.\n         ZAP   OUTRCDS,=P'0'\n         ZAP   SKIPRCDS,=P'0'\n         ZAP   COPYRCDS,=P'0'\n* ------------------------------------------------------------------- *\nREADWRIT DS    0H                         Main processing loop.\n         TM    INVNFLG,X'01'              Invalid SKIP or COPY?\n         BO    FIN                        Yes. Error. Do nothing.\n*\n         GET   SYSUT1,AREA                Get a new record.\n         AP    INRCDS,=P'1'               Count it as incoming.\n         TM    SKIPFLG,X'01'              Was SKIP coded?\n         BO    CNTSKIP                    Yes. Handle the skipping.\n         TM    SKIPFLG,X'02'              Was COPY coded?\n         BO    CNTCOPY                    Yes. Handle that.\n         B     PUTITOUT                   Neither. Copy all records.\n*\nCNTSKIP  DS    0H                         Handle record skipping\n         CP    PKSKIP,INRCDS              Have we exceeded threshold?\n         BL    CNTCOPY                    Yes. See if copy was coded.\n         AP    SKIPRCDS,=P'1'             No. Count this skipped rcrd.\n         B     READWRIT                   And get another one.\n*\nCNTCOPY  DS    0H                         Handle subsequent copy.\n         TM    SKIPFLG,X'02'              Was COPY coded?\n         BZ    CNTCOPYA                   No. Then there's no limit.\n         CP    PKCOPY,COPYRCDS            Limit exceeded?\n         BNH   FIN                        Yes. Get out altogether.\nCNTCOPYA DS    0H\n         AP    COPYRCDS,=P'1'             Count record copied.\nPUTITOUT DS    0H                         And actually copy it.\n         PUT   SYSUT2,AREA\n         AP    OUTRCDS,=P'1'              Output record count.\n         B     READWRIT                   Loop back. Get another record\n* -------\nFIN      DS    0H                         Summary report and Exit.\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG01\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),INRCDS+2    Number of records input\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG02\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),OUTRCDS+2   Number of records output\n         PUT   SYSPRINT,OUTLINE\n         TM    SKIPFLG,X'03'              Were SKIP= or COPY= coded?\n         BZ    GOCLOSE                    No. Extra print unnecessary.\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG03\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),SKIPRCDS+2  Number of records skipped\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE(133),MSG04\n         MVC   OUTLINE+19(12),EDPAT\n         ED    OUTLINE+19(12),COPYRCDS+2  Number of records copied\n         PUT   SYSPRINT,OUTLINE\nGOCLOSE  DS    0H                        Close input and output files\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n* -------\nTHEEND   DS    0H                        Return\n         CLOSE SYSPRINT\n         L     R13,4(,R13)\n         RETURN (14,12),RC=0\n         EJECT\n* ------------------------------------------------------------------- *\n*  Come here if not enough DCB attributes to feed QSAM to make a copy.\n* ------------------------------------------------------------------- *\nABSTART  DS    0H                        Missing DCB attributes....\n         CLOSE SYSUT1\n         CLOSE SYSUT2\n         MVC   OUTLINE,OUTLINE-1         Tell em....\n         MVC   OUTLINE(133),ABENDMSG\n         PUT   SYSPRINT,OUTLINE\n         B     THEEND\n* ------------------------------------------------------------------- *\n* ------------------------------------------------------------------- *\n*                 S  U  B  R  O  U  T  I  N  E  S                     *\n* ------------------------------------------------------------------- *\n* ------------------------------------------------------------------- *\n* -- BELOW ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n* ------------------------------------------------------------------- *\nPRTJFCB  DS    0H\n         MVC   OUTLINE+19(44),JFCBDSNM    DSNAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGMBR\n         MVC   OUTLINE+19(8),JFCBELNM     MEMBER NAME\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGVOLSR           VOLSER\n         MVC   OUTLINE+19(6),JFCBVOLS\n         MVC   OUTLINE+26(6),JFCBVOLS+6\n         MVC   OUTLINE+33(6),JFCBVOLS+12\n         MVC   OUTLINE+40(6),JFCBVOLS+18\n         MVC   OUTLINE+47(6),JFCBVOLS+24\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGDSORG          DSORG\n         MVC   OUTLINE+19(3),=C'IS '\n         CLI   JFCDSRG1,JFCORGIS\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'ISU'\n         CLI   JFCDSRG1,JFCORGIS+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PS '\n         CLI   JFCDSRG1,JFCORGPS\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PSU'\n         CLI   JFCDSRG1,JFCORGPS+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'DA '\n         CLI   JFCDSRG1,JFCORGDA\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'DAU'\n         CLI   JFCDSRG1,JFCORGDA+JFCORGU\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'PO '\n         CLI   JFCDSRG1,JFCORGPO\n         BE    PUTDSRG\n         MVC   OUTLINE+19(3),=C'POU'\n         CLI   JFCDSRG1,JFCORGPO+JFCORGU\n         BE    PUTDSRG\n         OI    FLAG1,X'01'                FLAG DSORG MISSING\n         MVC   OUTLINE+19(15),=C'MISSING OR VSAM'\nPUTDSRG  PUT   SYSPRINT,OUTLINE\nRECFM    DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGRECFM           RECFM\n         LA    R4,OUTLINE+19\n         TM    JFCRECFM,JFCUND\n         BNO   NOTUND\n         MVI   0(R4),C'U'\n         OI    FLAG2,X'01'                FLAG RECFM=U\n         A     R4,ONE\n         B     CHKB\nNOTUND   TM    JFCRECFM,JFCFIX\n         BNO   NOTFIX\n         MVI   0(R4),C'F'\n         A     R4,ONE\nNOTFIX   TM    JFCRECFM,JFCVAR\n         BNO   CHKB\n         MVI   0(R4),C'V'\n         A     R4,ONE\nCHKB     TM    JFCRECFM,JFCRFB\n         BNO   NOTBLK\n         MVI   0(R4),C'B'\n         A     R4,ONE\nNOTBLK   TM    JFCRECFM,JFCRFS\n         BNO   NOTSCN\n         MVI   0(R4),C'S'\n         A     R4,ONE\nNOTSCN   TM    JFCRECFM,JFCASA\n         BNO   NOTASA\n         MVI   0(R4),C'A'\n         A     R4,ONE\nNOTASA   TM    JFCRECFM,JFCMAC\n         BNO   PUTRCFM\n         MVI   0(R4),C'M'\nPUTRCFM  PUT   SYSPRINT,OUTLINE\nLRECL    DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGLRECL\n         SR    R4,R4\n         LH    R4,JFCLRECL\n         C     R4,=F'0'\n         BNE   LRECPRT\n         TM    FLAG2,X'01'                IS RECFM=U?\n         BO    LRECPRT                    YES-0 IS LEGITIMATE\n         OI    FLAG1,X'04'\n         MVC   OUTLINE+19(7),=C'MISSING'\n         B     LRECPUT\nLRECPRT  DS    0H\n         CVD   R4,DECVALUE\n         MVC   OUTLINE+19(12),EDPAT       LRECL\n         ED    OUTLINE+19(12),DECVALUE+3\nLRECPUT  PUT   SYSPRINT,OUTLINE\nBLKSIZE  MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE,MSGBLKSZ\n         SR    R4,R4\n         LH    R4,JFCBLKSI\n         C     R4,=F'0'\n         BNE   BLKSIZEG                   BLOCK SIZE IS GOOD\n         OI    FLAG1,X'02'                FLAG BLKSIZE MISSING\n         MVC   OUTLINE+19(15),=C'ZERO OR MISSING'\n         B     BLKSZPUT\nBLKSIZEG CVD   R4,DECVALUE\n         MVC   OUTLINE+19(12),EDPAT       BLKSIZE\n         ED    OUTLINE+19(12),DECVALUE+3\nBLKSZPUT PUT   SYSPRINT,OUTLINE\n         BR    R7\n* -- ABOVE ---------------  SUBROUTINE TO PRINT JFCB INFORMATION ---- *\n* ----------------------------------------------------------------- *    06223\nTIOTSCAN DS    0H             Determine the presence of Optional         06224\n*                             DDNAME:   SYSIN                            06225\n* ----->                      OPEN SYSIN if there is JCL for it.         06226\n* ----------------------------------------------------------------- *    06227\n         ST    R7,SAVER7TT    SAVE BAL REGISTER\n         ST    R3,SAVER3TT    SAVE WORK REGISTERS\n         ST    R5,SAVER5TT\n         L     R5,16          R5=CVT                                     06228\n         L     R5,0(,R5)      R5=TCB WORDS                               06229\n         L     R5,4(,R5)      R5=MY TCB                                  06230\n         L     R5,12(,R5)     R5=TIOT                                    06231\n         LA    R5,24(,R5)     R5=FIRST DD ENTRY                          06232\nTIOTLOOP CLC   0(4,R5),=XL4'00' END OF TIOT?                             06233\n         BE    TIOTSEND       YES, CHECK FOR OUTPUT VOL OVERRIDES        06234\nTIOTSYSN CLC   4(8,R5),SYSIN+40                                          06239\n         BNE   TIOTNEXT                                                  06240\n         OI    FLAGSYSN,X'01'       SHOW PRESENCE OF SYSIN    DD         06241\n         B     TIOTNEXT                                                  06242\nTIOTNEXT SR    R3,R3                                                     06243\n         IC    R3,0(,R5)      R3=LENGTH OF DD ENTRY                      06244\n         AR    R5,R3          R5=NEXT DD ENTRY                           06245\n         B     TIOTLOOP       GO CHECK IT                                06246\nTIOTSEND DS    0H                                                        06247\n         L     R3,SAVER3TT    RESTORE WORK REGISTERS\n         L     R5,SAVER5TT\n         L     R7,SAVER7TT    RESTORE BAL REGISTER\n         BR    R7             R7 IS THE BAL REGISTER\n* ----------------------------------------------------------------- *    06227\nSAVER3TT DS    F\nSAVER5TT DS    F\nSAVER7TT DS    F\nFLAGSYSN DC    X'00'\n* ------------------------------------------------------------------ *   06227\n*                  PROCESS THE SYSIN RECORDS                         *\n* ------------------------------------------------------------------ *\nDOSYSIN  DS    0H                        Process SYSIN records.\n         ST    R7,SAVER7SY\n         TM    FLAGSYSN,X'01'            Is SYSIN DD name in JCL?\n         BZ    SYSINENX                  No. Skip this entire section.\n         OPEN  (SYSIN,(INPUT))\n         STM   R3,R4,SAVE34              Save the work registers.\n         MVC   BLNKLINE,BLNKLINE-1       Clear blank line\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+1(26),=C'   Display SYSIN Cards     '\n         PUT   SYSPRINT,OUTLINE\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+1(26),=C'   ------- ----- -----     '\n         PUT   SYSPRINT,OUTLINE\nSYINLOOP DS    0H                        Read all the SYSIN cards.\n         GET   SYSIN,INSYSIN             GET a card.\n         MVC   WRKSYSIN(80),INSYSIN      Make a copy of it.\n         OC    WRKSYSIN,BLNKLINE         Uppercase the copy.\n         LA    R3,WRKSYSIN               Point R3 to the uppercased.\n         LA    R4,INSYSIN                Point R4 to the original.\n* ------------------------------------------------------------------ *\n*           DISPLAY SYSIN CARDS AS THEY WILL BE LOOKED AT            *\n* ------------------------------------------------------------------ *\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINE+4(80),WRKSYSIN    Move uppercased card image.\n         PUT   SYSPRINT,OUTLINE\n* ------------------------------------------------------------------ *\n*           Test the uppercased card for keywords                    *\n*           And afterwards do the proper displacements               *\n* ------------------------------------------------------------------ *\n         CLC   =C'COPY= ',0(R3)           COPY= followed by space?\n         BE    SYINLOOP                   No number there, so ignore.\n         CLC   =C'SKIP= ',0(R3)           SKIP= followed by space?\n         BE    SYINLOOP                   No number there, so ignore.\n         CLC   =C'COPY=',0(R3)            COPY= keyword?\n         BE    HCOPY                      Yes. Handle it.\n         CLC   =C'SKIP=',0(R3)            SKIP= keyword?\n         BE    HSKIP                      Yes. Handle it.\n         B     SYINLOOP\nHCOPY    DS    0H                         Handle COPY=\n         OI    SKIPFLG,X'02'              Indicate its presence.\n         LA    R4,5(,R4)                  Point to the number.\n         LA    R3,5(,R3)\n         BAL   R7,NUMBRGET                Extract the number.\n         MVC   CHCOPY(10),CHARNUM         Display value\n         MVC   BICOPY(4),BINVALUE         Binary  value\n         TM    INVNFLG,X'01'              INVALID?\n         BO    HNZCOPY                    DON'T PACK IF INVALID !!\n         ZAP   PKCOPY,PACKNUM             Packed  value\nHNZCOPY  DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINET(7),=C'COPY=  '\n         HEX   OUTLINE+29,4,BICOPY\n         MVC   OUTLINE+45(8),=C'Decimal:'\n         MVC   OUTLINE+55(10),CHCOPY\n         TM    NUMCFLG,X'01'\n         BZ    HCOPYGD\n         MVC   OUTLINE+66(15),=C'INVALID NUMERIC'\nHCOPYGD  DS    0H\n*        PUT   SYSPRINT,OUTLINE\n         B     SYINLOOP                   Look for next card.\n*\nHSKIP    DS    0H                         Handle SKIP=\n         OI    SKIPFLG,X'01'              Indicate its presence.\n         LA    R4,5(,R4)                  Bump the pointers.\n         LA    R3,5(,R3)\n         BAL   R7,NUMBRGET                Extract the number.\n         MVC   CHSKIP(10),CHARNUM         Display value\n         MVC   BISKIP(4),BINVALUE         Binary  value\n         TM    INVNFLG,X'01'              INVALID?\n         BO    HNZSKIP                    DON'T PACK IF INVALID !!\n         ZAP   PKSKIP,PACKNUM             Packed  value\nHNZSKIP  DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         MVC   OUTLINET(7),=C'SKIP=  '\n         HEX   OUTLINE+29,4,BISKIP\n         MVC   OUTLINE+45(8),=C'Decimal:'\n         MVC   OUTLINE+55(10),CHSKIP\n         TM    NUMCFLG,X'01'\n         BZ    HSKIPGD\n         MVC   OUTLINE+66(15),=C'INVALID NUMERIC'\nHSKIPGD  DS    0H\n*        PUT   SYSPRINT,OUTLINE\n         B     SYINLOOP                   Look for next card.\nSYSINEND DS    0H\n         MVC   OUTLINE,OUTLINE-1\n*        PUT   SYSPRINT,OUTLINE\n* ----- >\n         CLOSE (SYSIN)\n         LM    R3,R4,SAVE34\nSYSINENX DS    0H\n         MVC   OUTLINE,OUTLINE-1\n         PUT   SYSPRINT,OUTLINE\n         L     R7,SAVER7SY\n         BR    R7\n*------------------------  Constants needed for this routine -----*\nSAVE34   DS    2F\nSAVER7SY DS    F\nINSYSIN  DC    CL80' '\nWRKSYSIN DC    CL80' '\n         DC    X'40'\nBLNKLINE DC    CL80' '\nCHCOPY   DC    CL10' '           CHARACTER NUMBER JUSTIFIED LEFT         06854\nBICOPY   DS    F                 FULLWORD BINARY NUMBER\nPKCOPY   DS    PL8\nCHSKIP   DC    CL10' '           CHARACTER NUMBER JUSTIFIED LEFT         06854\nBISKIP   DS    F                 FULLWORD BINARY NUMBER\nPKSKIP   DS    PL8\n*-----------------------------------------------------------------*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*     Routine to get the numeric values from the SYSIN keywords.  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nNUMBRGET DS    0H                                                        06454\n         ST    R7,SAVER7NG          Save BAL register.\n         ST    R4,SAVER4A           Save address of number in original\n         ST    R3,SAVER3A           Save address of number in copy\n         NI    NUMCFLG,X'FF'-X'01'  Turn off \"not numeric\" flag.\n         MVC   CHARNUM(10),BLNKLINE   Initialize character field\n         XC    BINVALUE,BINVALUE      Clear binary value\n         LA    R6,10                Limit search to 10 digits.\n* ----------------------------------------------------------------- *\n*    Upon entry, R4 points to \"number\" in original.\n*    Upon entry, R3 points to \"number\" in copy.\n* ----------------------------------------------------------------- *\n         CLI   0(R4),C' '        Is the first number value blank?        06455\n         BE    NUMBRCLG          Yes. Ignore the entire card.            06456\n* --\n* ----------------------------------------------------------------- *\n*    At this point, we are looking at the first character after     *\n*     the particular keyword, and we want to test it and extract    *\n*     its value.                                                    *\n* ----------------------------------------------------------------- *\n         CLI   0(R4),X'F0'       Smaller than character 0?               06457\n         BL    NUMBRNVL          Yes. Mark as invalid.                   06458\n         CLI   0(R4),X'F9'       Bigger than 9?                          06459\n         BH    NUMBRNVL          Yes. Mark as invalid.                   06460\n         B     NUMBRVLD          Didn't fail, consider the number valid\n*                   Remember that R4 is start address for \"number\".\nNUMBRNVL DS    0H                Mark the character as invalid number.   06464\n         OI    NUMCFLG,X'01'     Set \"invalid flag\" for this number.\n         OI    INVNFLG,X'01'     Show there's an invalid number coded.\n         MVI   0(R4),C'*'        Mark invalid digit in the report.\nNUMBRVLD DS    0H                                                        06464\n* ----------------------------------------------------------------- *\nNUMBRNUM DS    0H                Loop to extract the number.             06464\n         LA    R4,1(,R4)         Bump R4 to point to next character.     06465\n         C     R4,INSYSIN+71     End of card?                            06466\n         BH    NUMBRGNM          Yes, Get number.                        06467\n         CLI   0(R4),C' '        Blank here?                             06468\n         BE    NUMBRGNM          Yes, Get number.                        06469\n** ----- >>   Validity Check - below\n* --\n         CLI   0(R4),X'F0'       Smaller than C'0'?\n         BL    NUMBINVL          Yes. Mark as invalid.\n         CLI   0(R4),X'F9'       Bigger than C'9'?\n         BH    NUMBINVL          Yes. Mark as invalid.\n         B     NUMBVALD          None of above, don't mark invalid.\nNUMBINVL DS    0H                Mark the character as invalid number.   06464\n         OI    NUMCFLG,X'01'     Set \"invalid flag\" for this number.\n         OI    INVNFLG,X'01'     Show there's an invalid number coded.\n         MVI   0(R4),C'*'        Mark invalid digit in the report.\nNUMBVALD DS    0H                                                        06464\n** ----- >>   Validity Check - above\n         BCT   R6,NUMBRNUM       Step up one place. (Limit 10 digits)    06470\n* ----------------------------------------------------------------- *\nNUMBRGNM DS    0H                                                        06471\n         L     R2,SAVER4A        Load R2 with address of number start\n         SR    R4,R2             How big is the number?                  06472\n         BCTR  R4,0              Lower by one for EXECUTE.               06473\n         TM    NUMCFLG,X'01'     Was any digit of the number invalid?\n         BO    NUMBRNPK          Yes, don't try to pack it. S0C7.\n         TM    INVNFLG,X'01'     Was any digit of the number invalid?\n         BO    NUMBRNPK          Yes, don't try to pack it. S0C7.\n         XC    PACKWORK,PACKWORK   Clear the doubleword work area.\n         EX    R4,PACKIT         Pack the number into work area.         06474\n*        MVC   OUTLINE,OUTLINE-1\n*        HEX   OUTLINE+20,8,PACKWORK     Test display\n*        PUT   SYSPRINT,OUTLINE\n         ZAP   PACKNUM,PACKWORK\n*        MVC   OUTLINE,OUTLINE-1\n*        HEX   OUTLINE+20,8,PACKNUM      Test display\n*        PUT   SYSPRINT,OUTLINE\nNUMBRNPK DS    0H                                                        06471\n         MVC   CHARNUM(10),BLNKLINE   Clear the display area.\n         EX    R4,MVNUMBER       Move the display value to display.      06476\n         TM    NUMCFLG,X'01'     Was any digit of the number invalid?\n         BO    NUMBRCLG          Yes, don't try to convert it. S0C7.\n* ----------------------------------------------------------------- *\n*      Prevent S0C9 abend if binary number exceeds X'7FFFFFFF'      *\n* ----------------------------------------------------------------- *\n         CP    PACKWORK,=P'2147483647'   Saves S0C9 for big number\n         BH    NUMBRCLG          CVB has upper limit of X'7FFFFFFF'\n         CVB   R0,PACKWORK       Convert the packed version to binary.   06477\n         ST    R0,BINVALUE       Store the binary value for later use.   06478\nNUMBRCLG DS    0H                                                        06479\n         L     R3,SAVER3A\n         L     R7,SAVER7NG       Restore BAL register.\n         BR    R7                                                        06480\n* ----------------------------------------------------------------- *\nPACKIT   PACK  PACKWORK,0(0,R2)      <<< EXECUTED >>>                    06759\nMVNUMBER MVC   CHARNUM(0),0(R2)      <<< EXECUTED >>>                    06767\nSAVER7NG DS    F\nSAVER3A  DS    F\nSAVER4A  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPACKWORK DC    D'0'              PACK WORK AREA\nCHARNUM  DC    CL10' '           CHARACTER NUMBER JUSTIFIED LEFT         06854\nBINVALUE DS    F                 FULLWORD BINARY NUMBER\nPACKNUM  DS    PL8\nNUMCFLG  DS    X\nINVNFLG  DS    X\nSKIPFLG  DC    X'00'\n*-----------------------------------------------------------------*\nHEX      DS    0H                                                        04224\n         ST    R7,SAV7HEX\n         MVC   1(1,R15),0(R1)        Move byte                           04225\n         UNPK  0(3,R15),1(2,R15)     Unpack                              04226\n         TR    0(2,R15),HEXTAB-240                                       04227\n         LA    R15,2(,R15)           Increment output pointer            04228\n         LA    R1,1(,R1)             Increment input pointer             04229\n         BCT   R0,HEX                Decrement length, then loop         04230\n         MVI   0(R15),C' '           Blank the trailing byte             04231\n         L     R7,SAV7HEX\n         BR    R7                    Return to caller                    04232\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table                     04233\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV7HEX  DC    F'0'\n         SPACE                                                           04234\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*-----------------------------------------------------------------*\n*\n* ----- WORK AREA ------ *\nFLAG1    DC    X'00'\n*              X'01'          DSORG IS MISSING\nFLAG2    DC    X'00'\n* ----- CONSTANTS ------ *\nPKZERO   DC    PL8'0'\nONE      DC    F'1'\nDECVALUE DS    CL8\nEDPAT    DC    X'402020206B2020206B202120'\n         DC    C' '\nBLANKS   DC    CL133' '\nOUTLINE  DS    CL133\nOUTLINET EQU   OUTLINE+7\nHEADER   DC    CL133'1  CKIEBGEN - SEQUENTIAL COPY PROGRAM'\n         DC    CL133' '\nHEADERJ  DC    CL133'-   JFCB REPORT OF DATASET CHARACTERISTICS '\n         DC    CL133' '\nMSGDSN   DC    CL133'-     SYSUTX DSN ='\n         DC    CL133' '\nMSGVOLSR DC    CL133'         VOLSER  ='\n         DC    CL133' '\nMSGMBR   DC    CL133'         MEMBER  ='\n         DC    CL133' '\nMSGDSORG DC    CL133'         DSORG   ='\n         DC    CL133' '\nMSGBLKSZ DC    CL133'         BLKSIZE ='\n         DC    CL133' '\nMSGLRECL DC    CL133'         LRECL   ='\n         DC    CL133' '\nMSGRECFM DC    CL133'         RECFM   ='\n         DC    CL133' '\nMSG01    DC    CL133'-    RECORDS  IN ='\n         DC    CL133' '\nMSG02    DC    CL133'     RECORDS OUT ='\n         DC    CL133' '\nMSG03    DC    CL133'     SKIPPED     ='\n         DC    CL133' '\nMSG04    DC    CL133'     COPIED      ='\n         DC    CL133' '\nABENDMSG DC    CL133'-   JFCB IS MISSING VALUES - CORRECT YOUR JCL '\n         DC    CL133' '\nINRCDS   DC    PL7'0'\nOUTRCDS  DC    PL7'0'\nSKIPRCDS DC    PL7'0'\nCOPYRCDS DC    PL7'0'\n         LTORG\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS,EXLST=JFCB1\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS,EXLST=JFCB1\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBA\nSYSIN    DCB   MACRF=GM,DDNAME=SYSIN,DSORG=PS,RECFM=FB,LRECL=80,       X\n               EODAD=SYSINEND\n         DC    CL8' '\nSAVE1402 DS    6F                 ONE MORE FOR SAFETY\nTIMED    DS    CL7\nDATED    DS    CL9\nDATETIME DS    4F\n         ORG   DATETIME\nTIME     DS    CL4\n         DS    CL4\nDATE     DS    CL5\n         DS    CL3\nHEADDATE DC    CL23' '\n         DC    CL8' '\n         DS    0F\nJFCB1    DC    X'87'\n         DC    AL3(INFMJFCB)\n         IEFJFCBN LIST=YES\nAREA     DS    CL32768\n         END   CKIEBGEN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CKINICIO": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14\\x12\\x00)\\x00)\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:12:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "ADMINI3"}, "text": "         MACRO\n&PGMID   CKINICIO &BASE=RC,&BASE1=RB\n&PGMID   CSECT             ******************************************\n         B     IDLEN(0,R15)\n         DC    CL8'&PGMID'\n         DC    C'&SYSDATE',C' '\n         DC    C'&SYSTIME',C'  '\n         PRINT OFF\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nRA       EQU   10\nR11      EQU   11\nRB       EQU   11\nR12      EQU   12\nRC       EQU   12\nR13      EQU   13\nRD       EQU   13\nR14      EQU   14\nRE       EQU   14\nR15      EQU   15\nRF       EQU   15\n         PRINT ON\nSAVEA    DC    18F'0'\nIDLEN    EQU   *-&PGMID\n         STM   RE,RC,12(RD)\n         USING &PGMID,&BASE\n         LR    &BASE,RF\n         ST    RD,SAVEA+4\n         LR    RE,RD\n         LA    RD,SAVEA\n         ST    RD,8(RE)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKLEVEL": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x146\\x00o\\x00o\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:36:00", "lines": 111, "newlines": 111, "modlines": 0, "user": "ADMINI3"}, "text": "CKLEVEL  CKINICIO\n         LR    R8,R1\n         L     R3,0(R8)\n         SR    R7,R7\n         LH    R7,0(R3)\n         S     R7,F1\n         LA    R3,2(R3)\n         LA    R10,ENTRA\n         LA    R4,ENTRA\n         LA    R9,DSNAME\n         LA    R10,21(R10)\n         LA    R1,0\n         LINK  EP=IDCAMS\n         LTR   R15,R15\n         BNZ   DUMP01\n         WTO   'ANTES DE OPEN SYSPRINT'\n         OPEN  (SYSPRIN,INPUT)\n         WTO   'DESPUES DE OPEN SYSPRINT'\n         OPEN  (LISTADO,OUTPUT)\nLEERI    MVC   ENTRA,BLANCOS\n         GET   SYSPRIN,ENTRA\n         CLC   ENTRA+5(7),NONVSAM\n         BNE   LEERI\n         STC   R7,COMPA+1\nCOMPA    CLC   0(44,R10),0(R3)\n         BNE   LEERI\n         MVC   W1+2(2),ENTRA+0\n         L     R5,W1\n         SH    R5,H21\n         STC   R5,W1\n         MVC   LONDSN+1(1),W1\n         MVC   DSNAME,BLANCOS\n         STC   R5,MOVER+1\nMOVER    MVC   0(44,R9),ENTRA+21\n         LA    R1,ALOC\n         DYNALLOC\n         LTR   R15,R15\n         BNZ   DUMP02\n         OPEN  (DD1,INPUT)\n         MVC   ENTRA,BLANCOS\n         MVC   0(44,R4),0(R9)\n         PUT   LISTADO,ENTRA\nLEERD    MVC   ENTRA,BLANCOS\n         GET   DD1,ENTRA\n         PUT   LISTADO,ENTRA\n         B     LEERD\nFINENTRA CLOSE DD1\n         LA    R1,ULOC\n         DYNALLOC\n         LTR   R15,R15\n         BNZ   DUMP03\n         B     LEERI\nCLOPRIN  CLOSE SYSPRIN\n         CLOSE LISTADO\n         CKFINAL RET=0\n         DS    0F\nW1       DC    D'0'\nF1       DC    F'1'\nH21      DC    H'21'\nNONVSAM  DC    CL7'NONVSAM'\nBLANCOS  DS    0CL140\n         DC    140C' '\n         DS    0F\n*\n*  CONTROL SVC 99 FOR TO ALLOC\n*\nALOC     DC    0F'0',X'80',AL3(ALOCRB)\nALOCRB   DS    0F\n         DC    AL1(20),AL1(01),AL2(0)\nALOCER   DC    AL2(0)\nALOCIN   DC    AL2(0)\n         DC    A(ALOCTP)\n         DC    A(0)\n         DC    A(0)\nALOCTP   CALL  ,(ALOCDDN,ALOCDSP,ALOCDSN),VL,MF=L\nALOCDDN  DC    X'0001'\n         DC    X'0001'\n         DC    X'0003'\nDDNAME   DC    CL3'DD1'\nALOCDSP  DC    X'0004'\n         DC    X'0001'\n         DC    X'0001'\nDISP     DC    X'08'\nALOCDSN  DC    X'0002'\n         DC    X'0001'\nLONDSN   DC    X'0000'\nDSNAME   DC    CL44' '\n*\n*  CONTROL SVC 99 FOR TO UNALLOC\n*\nULOC     DC    0F'0',X'80',AL3(ULOCRB)\nULOCRB   DS    0F\n         DC    AL1(20),AL1(02),AL2(0)\nULOCER   DC    AL2(0)\nULOCIN   DC    AL2(0)\n         DC    A(ULOCTP)\n         DC    A(0)\n         DC    A(0)\nULOCTP   CALL  ,(ULOCDDN),VL,MF=L\nULOCDDN  DC    X'0001'\n         DC    X'0001'\n         DC    X'0003'\nUDDNAME  DC    CL3'DD1'\nDUMP01   ABEND 0001,DUMP        * FALLO EN EL IDCAMS\nDUMP02   ABEND 0002,DUMP        * FALLO AL ASIGNAR\nDUMP03   ABEND 0003,DUMP        * FALLO AL DESASIGNAR\nDD1      DCB   DDNAME=DD1,DSORG=PS,MACRF=GM,EODAD=FINENTRA\nLISTADO  DCB   DDNAME=LISTADO,DSORG=PS,MACRF=PM\nSYSPRIN  DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=GM,EODAD=CLOPRIN\nENTRA    DC    CL140' '\n         END   CKLEVEL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKLEVELJ": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x149\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:39:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "ADMINI3"}, "text": "//CKLEVEL  JOB 000000000,' ',MSGCLASS=X,MSGLEVEL=(1,1)\n//**\n//**\n//**\n//**\n//EJECUTO  EXEC PGM=CKLEVEL,PARM='PARAM'\n//STEPLIB   DD  DSN=USXXBCR.CBT.LOADLIB,DISP=SHR\n//SYSPRINT  DD  UNIT=SYSALLDA,SPACE=(CYL,(10,5))\n//LISTADO   DD  SYSOUT=X,DCB=(RECFM=F,BLKSIZE=132)\n//SYSIN     DD  *\n LISTC LEVEL(XXXXXXXX.XXXXXXXX)\n//**\n//**\n//**\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKLOCMEJ": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14\\x01\\x00\\x0e\\x00\\x0f\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:01:00", "lines": 14, "newlines": 15, "modlines": 0, "user": "ADMINI3"}, "text": "//CKLOCMEM JOB 000000000,' ',MSGCLASS=X,MSGLEVEL=(1,1)\n//**\n//** LA LIBRERIA USXXBCR.CBT.LOADLIB TIENE QUE SER -APF-\n//**\n//**  XXXXXXXX = MIEMBRO A BUSCAR\n//**\n//EJECUTO  EXEC PGM=CKLOCMEM,PARM='XXXXXXXX'\n//STEPLIB   DD  DSN=USXXBCR.CBT.LOADLIB,DISP=SHR\n//SYSPRINT  DD  SYSOUT=X\n//LISTADO   DD  SYSOUT=X,DCB=(RECFM=F,BLKSIZE=132)\n//DCOLLECT  DD  UNIT=VIO,SPACE=(CYL,(40,5)),LRECL=592,RECFM=VB,DSORG=PS\n//SYSIN     DD  *\n  DCOLLECT OUTFILE(DCOLLECT) VOLUMES(*) NOVOLUMEINFO\n//**\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKLOCMEM": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00$O\\t\\x11\\x00d\\x00_\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-31T09:11:00", "lines": 100, "newlines": 95, "modlines": 0, "user": "ADMINI3"}, "text": "CKLOCMEM CKINICIO\n         LR    R8,R1\n         L     R3,0(R8)\n         MVC   MIEMBRO,2(R3)\n         LA    R1,0\n         LINK  EP=IDCAMS\n         LTR   R15,R15\n         OPEN  (DCOLLECT,INPUT)\n         OPEN  (LISTADO,OUTPUT)\nLEER     GET   DCOLLECT\n         LA    R9,4(R1)\n         USING DCUOUTH,R9\n         CLI   DCURCTYP,C'D'\n         BNE   LEER\n         CLI   DCDDSORG,X'02'\n         BNE   LEER\n*\n*  ESTAS 2 INSTRUCCIONES ES PARA SALTARSE LOS ARCHIVOS HFS\n*  SUSTITUIR POR LA SC CORRESPONDIENTE\n*\n         CLC   DCDSTGCL(6),=C'SCOMVS'\n         BE    LEER\n*\nASIGNAR  EQU   *\n         MVC   DSNAME,BLANCOS\n         MVC   DSNAME,DCDDSNAM\n         LA    R1,ALOC\n         DYNALLOC\n         LTR   R15,R15\n         BNZ   LEER\n         MVC   LINEA,BLANCOS\n         OPEN  (DD1,INPUT)\n         FIND  DD1,MIEMBRO,D\n         CL    R15,=F'0'\n         BNE    CLOSDD1\n         MVI   LINEA+1,C'*'\nCLOSDD1  EQU   *\n         MVC   LINEA+4(44),DCDDSNAM\n         PUT   LISTADO,LINEA\n         CLOSE (DD1)\nDESASIG  EQU   *\n         LA    R1,ULOC\n         DYNALLOC\n         LTR   R15,R15\n         BNZ   DUMP03\n         B     LEER\nFINOUT   CLOSE DCOLLECT\n         CLOSE LISTADO\n         CKFINAL RET=0\nBLANCOS  DC    CL133' '\nLINEA    DC    CL133' '\nDUMP01   ABEND 0001,DUMP        * FALLO EN EL IDCAMS\nDUMP02   ABEND 0002,DUMP        * FALLO EN LA ASIGNACION\nDUMP03   ABEND 0003,DUMP        * FALLO EN LA DESASIGNACION\nMIEMBRO  DS    D\nLISTADO  DCB   DDNAME=LISTADO,DSORG=PS,MACRF=PM\nDCOLLECT DCB   DDNAME=DCOLLECT,DSORG=PS,MACRF=GL,EODAD=FINOUT\nDD1      DCB   DDNAME=DD1,DSORG=PO,MACRF=(R)\n*\n*  CONTROL SVC 99 FOR TO ALLOC  LIB-MEMBER TO DD1\n*\nALOC     DC    0F'0',X'80',AL3(ALOCRB)  RB POINTER\nALOCRB   DS    0F\n         DC    AL1(20),AL1(01),AL2(0)  LENGTH,ALLOC_VERB,FLAGS\nALOCER   DC    AL2(0)                  ERROR CODE\nALOCIN   DC    AL2(0)                  INFO CODE\n         DC    A(ALOCTP)               TEXT UNIT LIST POINTER\n         DC    A(0)                    RESERVED\n         DC    A(0)                    FLAGS\nALOCTP   CALL  ,(ALOCDDN,ALOCDSN,ALOCDSP),VL,MF=L\nALOCDDN  DC    X'0001'       FIELD KEY (DDNAME)\n         DC    X'0001'       FIX DATA\n         DC    X'0003'       LENGTH NEXT FIELD\nDDSYSIN  DC    C'DD1'        DDNAME\nALOCDSN  DC    X'0002'       FIELD KEY (DSNAME)\n         DC    X'0001'       FIX DATA\n         DC    X'002C'       LENGTH NEXT FIELD\nDSNAME   DC    CL44' '\nALOCDSP  DC    X'0004'       FIELD KEY  (DISP)\n         DC    X'0001'       FIX DATA\n         DC    X'0001'       LENGTH NEXT FIELD\nDISP     DC    X'08'         DISP=SHR\n*\n*  CONTROL SVC 99 FOR TO UNALLOC EXPL.CTM213.JOBS\n*\nULOC     DC    0F'0',X'80',AL3(ULOCRB)  RB POINTER\nULOCRB   DS    0F\n         DC    AL1(20),AL1(02),AL2(0)  LENGTH,ULLOC_VERB,FLAGS\nULOCER   DC    AL2(0)                  ERROR CODE\nULOCIN   DC    AL2(0)                  INFO CODE\n         DC    A(ULOCTP)               TEXT UNIT LIST POINTER\n         DC    A(0)                    RESERVED\n         DC    A(0)                    FLAGS\nULOCTP   CALL  ,(ULOCDDN),VL,MF=L\nULOCDDN  DC    X'0001'       FIELD KEY (DDNAME)\n         DC    X'0001'       FIX DATA\n         DC    X'0003'       LENGTH NEXT FIELD\n         DC    C'DD1'    DDNAME\n         IDCDOUT\n         END   CKLOCMEM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKRENMEJ": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14C\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:43:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "ADMINI3"}, "text": "//CKRENMEM JOB 000000000,' ',MSGCLASS=X,MSGLEVEL=(1,1)\n//**\n//**\n//**\n//**\n//CKRENMEM  EXEC PGM=CKRENMEM,PARM='OLD,NEW'\n//STEPLIB   DD  DSN=USXXBCR.CBT.LOADLIB,DISP=SHR\n//DDSYSIN   DD  DSN=LIBRERIA\n//**\n//**\n//**\n//**\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKRENMEM": {"ttr": 1553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14@\\x00$\\x00$\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:40:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "ADMINI3"}, "text": "CKRENMEM CKINICIO\n         LR    R8,R1               LOAD PARM LIST\n         L     R3,0(R8)            ADDRESSING WORK-AREA\n         SR    R7,R7               CLEAR R7\n         LH    R7,0(R3)            LOAD LENGTH IN R7\n         LA    R3,2(R3)            ADD 2 TO R3\n         LA    R8,MEMBER           LOAD ADDRESS MEMBER\n         LA    R9,NEWMEM           LOAD ADDRESS NEWMEMBER\nATRAS    MVC   0(1,R8),0(R3)       MOVE ONE CHARACTER OF MEMBER\n         LA    R3,1(R3)            ADD 1 TO R3\n         LA    R8,1(R8)            ADD 1 TO R8\n         S     R7,F1               SUBTRACT 1 TO LENGTH\n         C     R7,F0               IF 0\n         BE    FINAL               GO TO FINAL\n         CLI   0(R3),X'6B'         IF ','\n         BNE   ATRAS\n         LA    R3,1(R3)            JUMP ','\nALLI     MVC   0(1,R9),0(R3)       MOVE ONE CHARACTER OF NEWMEMBER\n         LA    R3,1(R3)            ADD 1 TO R3\n         LA    R9,1(R9)            ADD 1 TO R8\n         S     R7,F1               SUBTRACT 1 TO LENGTH\n         C     R7,F1               IF 1\n         BNE   ALLI\nOPEN     OPEN  (DDIN,UPDAT)        OPEN DATASET\n         STOW  DDIN,PARAM,C        RENAME MEMBER\nCLOSIN   CLOSE (DDIN)              CLOSE DATASET\nFINAL    CKFINAL RET=0\nDDIN     DCB   DDNAME=DDSYSIN,DSORG=PO,MACRF=(R)\n         DS   D\nPARAM    DS   0CL16\nMEMBER   DC   CL8'        '\nNEWMEM   DC   CL8'        '\n         DS   F\nF1       DC   F'1'\nF0       DC   F'0'\n         END   CKRENMEM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKSTJOB": {"ttr": 1555, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14&\\x00&\\x00&\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:26:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "ADMINI3"}, "text": "CKSTJOB  CKINICIO\n         LR    R8,R1\n         L     R3,0(R8)\n         LH    R5,0(R3)\n         BCTR  R5,R0\n         EX    R5,MOVER\n         L     R4,CVTPTR\n         USING CVTMAP,R4\n         L     R5,CVTASVT\n         USING ASVT,R5\n         L     R7,ASVTMAXU\n         LA    R6,ASVTENTY\nLISTA    TM    0(R6),ASVTAVAL\n         BNZ   OTRO\n         L     R10,0(R6)\n         USING ASCB,R10\n         CLC   ASCBJBNI,=F'0'\n         BNE   JOBS\n         CLC   ASCBJBNS,=F'0'\n         BNE   STCYTSU\n         B     OTRO\nJOBS     L     R9,ASCBJBNI\n         CLC   JOB,0(R9)\n         BE    FIN2\n         B     OTRO\nSTCYTSU  L     R9,ASCBJBNS\n         CLC   JOB,0(R9)\n         BE    FIN2\nOTRO     LA    R6,4(R6)\n         BCT   R7,LISTA\nFIN1     CKFINAL RET=1\nFIN2     CKFINAL RET=0\nMOVER    MVC   JOB(0),2(R3)\nJOB      DC    CL8'        '\n         CVT     DSECT=YES\n         IHAASCB DSECT=YES\n         IHAASVT DSECT=YES\n         END   CKSTJOB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKSTJOBJ": {"ttr": 1557, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x144\\x00\\x0b\\x00\\x06\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:34:00", "lines": 11, "newlines": 6, "modlines": 0, "user": "ADMINI3"}, "text": "//CKSTJOB JOB 000000000,' ',MSGCLASS=X,MSGLEVEL=(1,1)\n//**\n//**\n//**   EJEMPLO DE UTILIZACION DEL PROGRAMA CKSTJOB\n//**\n//**   XXXXXXXX = JOB O STC\n//**\n//CKSTJOB   EXEC PGM=CKSTJOB,PARM='XXXXXXXX'\n//STPELIB   DD  DSN=USXXBCR.CBT.LOADLIB,DISP=SHR\n//** (RC= 0 ESTA) (RC=1 NO-ESTA)\n//**\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKSYMB": {"ttr": 1559, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00$\\x1f\\x01\\x00$\\x1f\\x081\\x00 \\x00 \\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-28T00:00:00", "modifydate": "2000-08-28T08:31:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "ADMINI3"}, "text": "ISREDIT MACRO\n CONTROL NOMSG NOLIST NOCONLIST NOSYMLIST NOFLUSH NOPROMPT\n CONTROL MSG LIST CONLIST SYMLIST FLUSH PROMPT\n ISREDIT (NLINA) = LINENUM .ZFIRST\n ISREDIT (NLINZ) = LINENUM .ZLAST\n FREE FI(SYSUT1)\n FREE FI(SYSUT2)\n FREE FI(D)\n SET &HLQ = &SYSUID\n SET &MLQ = T&SUBSTR(1:2,&SYSTIME)&SUBSTR(4:5,&SYSTIME)+\n             &SUBSTR(7:8,&SYSTIME)\n SET &DSYSUT1 = &HLQ..&MLQ..SYSUT1\n SET &DSYSUT2 = &HLQ..&MLQ..SYSUT2\n ATTR D LRECL(80) BLKSIZE(8000) RECFM(F B) DSORG(PS)\n ALLOC FI(SYSUT1) SPACE(1,1) TRACKS CATALOG DA('&DSYSUT1') -\n      UNIT(SYSALLDA) USING(D)\n ALLOC FI(SYSUT2) SPACE(1,1) TRACKS CATALOG DA('&DSYSUT2') -\n      UNIT(SYSALLDA) USING(D)\n OPENFILE SYSUT1 OUTPUT\n DO WHILE &NLINA <= &NLINZ\n   ISREDIT (LINA) = LINE &NLINA\n   SET &SYSUT1 = &NRSTR(&LINA)\n   PUTFILE SYSUT1\n   SET &NLINA = &NLINA + 1\n END\n CLOSFILE SYSUT1\n CALL 'USXXBCR.CBT.LOADLIB(CKSYMBOL)'\n FREE FI(SYSUT1)\n FREE FI(SYSUT2)\n FREE FI(D)\n SUB '&DSYSUT2'\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKSYMBOL": {"ttr": 1561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00$\\x1f\\x01\\x00$\\x1f\\x08)\\x00&\\x00&\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-28T00:00:00", "modifydate": "2000-08-28T08:29:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "ADMINI3"}, "text": "CKSYMBOL AMODE 24\nCKSYMBOL RMODE 24\nCKSYMBOL CKINICIO\nOPEN     OPEN  (ENTRA,INPUT)\n         OPEN  (SALID,OUTPUT)\nLEER     EQU   *\n         GET   ENTRA,AENTRA\n*\n         XC    SYMBP(SYMBP_LEN),SYMBP\n         LA    R4,AENTRA\n         ST    R4,SYMBPPATTERN@\n         LA    R4,L'AENTRA\n         ST    R4,SYMBPPATTERNLENGTH\n         LA    R4,ASALID\n         ST    R4,SYMBPTARGET@\n         MVC   LSALID,=A(L'ASALID)\n         LA    R4,LSALID\n         ST    R4,SYMBPTARGETLENGTH@\n         LA    R4,RETCOD\n         ST    R4,SYMBPRETURNCODE@\n*\n         LINK  EP=ASASYMBM,MF=(E,SYMBP)\n*\n         PUT   SALID,ASALID\n         B     LEER\nFIN      EQU   *\n         CLOSE ENTRA\n         CLOSE SALID\n         CKFINAL RET=0\nAENTRA   DS    CL80\n         DS    0F\nRETCOD   DS    F\nLSALID   DS    F\nASALID   DS    CL80\n         ASASYMBP DSECT=NO\nENTRA    DCB   DDNAME=SYSUT1,MACRF=GM,EODAD=FIN,DSORG=PS\nSALID    DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS,LRECL=80\n         END   CKSYMBOL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKSYMBP": {"ttr": 1563, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00$\\x1f\\x01\\x00$\\x1f\\x083\\x00\\x05\\x00\\x05\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-28T00:00:00", "modifydate": "2000-08-28T08:33:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "ADMINI3"}, "text": "//CKSYMBOL PROC LIB=,MBR=\n//CKSYMBOL EXEC PGM=CKSYMBOL\n//STEPLIB  DD DSN=USXXBCR.CBT.LOADLIB,DISP=SHR\n//SYSUT1   DD DSN=&LIB(&MBR),DISP=SHR\n//SYSUT2   DD SYSOUT=(,INTRDR)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKUSOJ": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00$\\x1f\\x01\\x00$\\x1f\\x08P\\x00\\x18\\x00\\x18\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-28T00:00:00", "modifydate": "2000-08-28T08:50:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "ADMINI3"}, "text": "//CKUSOJ   JOB 000000000,' ',MSGCLASS=X,MSGLEVEL=(1,1)\n//**\n//D EXEC CKUSOP,D=XXXXXXX.XXXX.XXXX,T=YY\n//**\n//**   VARIABLES:\n//**        XXXXXXX.XXXX.XXXX = DATASET\n//**                       YY = % DE OCUPACION\n//**   VARIABLES:\n//**        D.CKUSOP.RC = 0 LA OCUPACION ES MENOR O IGUAL\n//**        D.CKUSOP.RC = 1 LA OCUPACION ES MAYOR\n//**\n//T IF (D.CKUSOP.RC = 0)\n//**\n//*** PONER AQUI EL PASO O PASOS A EJECUTAR SI SE CUMPLE\n//**\n//PSI EXEC PGM=IEFBR14\n//**\n//  ELSE\n//**\n//*** PONER AQUI EL PASO O PASOS A EJECUTAR SI NO SE CUMPLE\n//**\n//PNO EXEC PGM=IEFBR14\n//**\n//  ENDIF\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKUSOP": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x00$\\x1f\\x01\\x00$\\x1f\\x08B\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-08-28T00:00:00", "modifydate": "2000-08-28T08:42:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "ADMINI3"}, "text": "//CKUSO PROC\n//CKUSO     EXEC PGM=IKJEFT01,PARM='CKUSOX &T &D'\n//SYSPROC   DD DSN=USXXBCR.CBT.ALL,DISP=SHR\n//SYSTSPRT  DD SYSOUT=Z\n//SYSTSIN   DD DUMMY\n//**  T=PORCENTAJE DE OCUPACION\n//**  D=DATASET\n//**  SI RC = 0  EL PORCENTAJE ES MENOR O IGUAL\n//**  SI RC = 1  EL PORCENTAJE ES MAYOR\n//**  SI RC = DISTINTO ES ERROR\n//**\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKUSOX": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00$\\x1f\\x01\\x00$\\x1f\\x086\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-28T00:00:00", "modifydate": "2000-08-28T08:36:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "ADMINI3"}, "text": "/* REXX */\nARG TPR MDSN\nPMDSN = ''''||MDSN||''''\nX = LISTDSI(PMDSN)\nTTU0 = (SYSUSED * 100) / SYSALLOC\nTTU1 = TRUNC(TTU0)\nTTUU = 0\nIF TTU1 > TPR THEN TTUU = 1\nSAY 'RC=' TTUU 'DATASET=' MDSN 'REQUE=' TPR ,\n    'ASIGNADO=' SYSUSED ' USADO=' SYSALLOC ' % = ' TTU1\nEXIT TTUU\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKYAESTA": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14\\x11\\x00.\\x00.\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:11:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "ADMINI3"}, "text": "CKYAESTA CKINICIO\n         LR    R8,R1\n         L     R3,0(R8)\n         LH    R5,0(R3)\n         BCTR  R5,R0\n         EX    R5,MOVER\n         L     R4,CVTPTR\n         USING CVTMAP,R4\n         L     R5,CVTASVT\n         USING ASVT,R5\n         L     R7,ASVTMAXU\n         LA    R6,ASVTENTY\nLISTA    TM    0(R6),ASVTAVAL\n         BNZ   OTRO\n         L     R10,0(R6)\n         USING ASCB,R10\n         CLC   ASCBJBNI,=F'0'\n         BNE   JOBS\n         CLC   ASCBJBNS,=F'0'\n         BNE   STCYTSU\n         B     OTRO\nJOBS     L     R9,ASCBJBNI\n         CLC   JOB,0(R9)\n         BE    FIN2\n         B     OTRO\nSTCYTSU  L     R9,ASCBJBNS\n         CLC   JOB,0(R9)\n         BE    FIN2\nOTRO     LA    R6,4(R6)\n         BCT   R7,LISTA\nFIN1     EQU   *\n         CKFINAL RET=0\nFIN2     EQU   *\n         CLI   YAESTA,C' '\n         BNE   FIN22\n         MVI   YAESTA,C'1'\n         B     OTRO\nFIN22    EQU   *\n         CKFINAL RET=1\nMOVER    MVC   JOB(0),2(R3)\nJOB      DC    CL8'        '\nYAESTA   DC    C' '\n         CVT     DSECT=YES\n         IHAASCB DSECT=YES\n         IHAASVT DSECT=YES\n         END   CKYAESTA\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CKYAESTJ": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14(\\x00\\x10\\x00\\x0f\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:28:00", "lines": 16, "newlines": 15, "modlines": 0, "user": "ADMINI3"}, "text": "//CKYAESTJ JOB 000000000,' ',MSGCLASS=X,MSGLEVEL=(1,1)\n//**\n//**  EJEMPLO DE UTILIZACION DEL PROGRAMA\n//**\n//**  XXXXXXXX = STC A CONTROLAR\n//**\n//ESTAONO  EXEC PGM=CKYAESTA,PARM='XXXXXXXX'\n//STEPLIB  DD  DSN=USXXCBR.CBT.LOADLIB,DISP=SHR\n//**\n//ESTA     EXEC PGM=MENSAJE,COND=(00,NE,ESTAONO),\n// PARM='***** EL STC XXXXXXXX NO ESTA ARRANCADO *****'\n//**\n//NOESTA   EXEC PGM=MENSAJE,COND=(01,NE,ESTAONO),\n// PARM='***** EL STC XXXXXXXX YA ESTA ARRANCADO *****'\n//**\n//**\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LLENAR": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14\\x07\\x00 \\x00 \\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:07:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "ADMINI3"}, "text": "ISREDIT MACRO (NUMI NUME INCR)\nCONTROL NOMSG NOLIST NOCONLIST NOSYMLIST NOFLUSH NOPROMPT\nISREDIT (LINE,COLU) = CURSOR\nIF &COLU = 0 THEN SET &COLU = 9\nISREDIT (NLINZ) = LINENUM .ZLAST\nSET &TOLIN = &NUME + &LINE - 1\nIF &TOLIN > &NLINZ THEN +\n DO\n   SET ZEDLMSG = &STR(**ERROR** NO HAY SUFICIENTES LINEAS ***)\n   ISPEXEC SETMSG MSG(ISRZ001)\n   EXIT CODE(0)\n END\nIF (&LENGTH(&NUMI) = 0) OR +\n   (&LENGTH(&NUME) = 0) OR +\n   (&LENGTH(&INCR) = 0) THEN +\n DO\n   SET ZEDLMSG = &STR(**ERROR** FORMATO *LLENAR NI NE IN* NI=NUMERO IN+\n                      ICIAL NE=NUMERO DE LINEAS IN=INCREMENTO)\n   ISPEXEC SETMSG MSG(ISRZ001)\n   EXIT CODE(0)\n END\n SET &CEROS = &STR(0000000000)\n SET &L1 = &LENGTH(&NUME)\nDO WHILE &NUME > 0\n SET &L0 =  &L1 - &LENGTH(&NUMI)\n IF &L0 > 0 THEN SET &NUMI =  &SUBSTR(1:&L0,&CEROS)&NUMI\n ISREDIT LINE &LINE = LINE + < &COLU &NUMI >\n SET &LINE = &LINE + 1\n SET &NUME = &NUME - 1\n SET &NUMI = &NUMI + &INCR\nEND\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOADLIB": {"ttr": 1805, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x143/\\x01\\x143/\\x14B\\x01d\\x01d\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-11-28T00:00:00", "modifydate": "2014-11-28T14:42:00", "lines": 356, "newlines": 356, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "MENSAJE": {"ttr": 1812, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x140\\x00\\x10\\x00\\x10\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:30:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "ADMINI3"}, "text": "MENSAJE CKINICIO\n         LR    R8,R1               LOAD PARM LIST\n         L     R3,0(R8)            ADDRESSING WORK-AREA\n         LH    R5,0(R3)            LENGTH MESSAGE\n         BCTR  R5,R0               PREPARE EXECUTE\n         EX    R5,MOVER            MOVE MESSAGE\n         LA    R4,MENSA            ADDRESS OF MESSAGE AREA\n         WTO   TEXT=(R4),DESC=(11),ROUTCDE=(1)\n         CKFINAL RET=0\nMOVER    MVC   TEXTO(0),2(R3)     EX MOVE MEMBER\n         DS   D\nMENSA    DC   AL2(L'TEXTO)\nTEXTO    DS   0CL100\n         DC   C'                                                  '\n         DC   C'                                                  '\n         END   MENSAJE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MESES": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00$\\x1f\\t\\x02\\x01\\x04\\x01\\x01\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-28T09:02:00", "lines": 260, "newlines": 257, "modlines": 0, "user": "ADMINI3"}, "text": "PROC 0\nCONTROL NOMSG NOLIST NOCONLIST NOSYMLIST NOFLUSH NOPROMPT\n/*\nISPEXEC LIBDEF ISPPLIB DATASET ID('USXXBCR.CBT.ALL')\n/*\n/*  TABLA DE LOS DIAS DE FIESTA EN FORMATO AAAAMMDD\n/*\nSET &FN1  = &STR(2000011)\nSET &FN2  = &STR(2000016)\nSET &FN3  = &STR(20000420)\nSET &FN4  = &STR(20000421)\nSET &FN5  = &STR(2000051)\nSET &FN6  = &STR(2000052)\nSET &FN7  = &STR(20000515)\nSET &FN8  = &STR(20000815)\nSET &FN9  = &STR(20001012)\nSET &FN10 = &STR(2000111)\nSET &FN11 = &STR(2000119)\nSET &FN12 = &STR(2000126)\nSET &FN13 = &STR(2000128)\nSET &FN14 = &STR(20001225)\n/*\n/*   FIN DE LA TABLA\n/*\nSET &ZPF = &&ZPF\nSET &ZZ = &STR(01)\nDO WHILE &ZZ <= 24\n ISPEXEC VGET (ZPF&ZZ)\n SET &ZZ = &ZZ + 01\n IF &LENGTH(&ZZ) = 1 THEN SET &ZZ = &STR(0)&ZZ\nEND\n/*CONTROL MSG LIST CONLIST SYMLIST FLUSH NOPROMPT\nSET &ZZ = &STR(01)\nDO WHILE &ZZ <= 24\n IF &STR(&ZPF&ZZ) = &STR(RETURN) THEN +\n  IF (&ZZ \u00ac= 07) AND (&ZZ \u00ac= 08) AND (&ZZ \u00ac= 19) AND (&ZZ \u00ac= 20) THEN +\n    DO\n     SET &WPF&ZZ = &STR(&ZPF&ZZ)\n     SET &ZPF&ZZ = &STR(END)\n     ISPEXEC VPUT (ZPF&ZZ)\n    END\n SET &ZZ = &ZZ + 01\n IF &LENGTH(&ZZ) = 1 THEN SET &ZZ = &STR(0)&ZZ\nEND\nCONTROL NOMSG NOLIST NOCONLIST NOSYMLIST NOFLUSH NOPROMPT\nSET &WPF07 = &STR(&ZPF07)\nSET &WPF08 = &STR(&ZPF08)\nSET &WPF19 = &STR(&ZPF19)\nSET &WPF20 = &STR(&ZPF20)\nSET &ZPF07 = &STR(END)\nSET &ZPF08 = &STR(END)\nSET &ZPF19 = &STR(END)\nSET &ZPF20 = &STR(END)\nISPEXEC VPUT (ZPF07 ZPF08 ZPF19 ZPF20)\nSET &WSYSJDATE = &STR(&SYS4JDATE)\nSET &WSYSDATE  = &SUBSTR(1:6,&SYS4DATE)&SUBSTR(7:10,&SYS4DATE)\n/*SET &WSYSJDATE = &STR(20)&STR(&SYSJDATE)\n/*SET &WSYSDATE  = &SUBSTR(1:6,&SYSDATE)&STR(20)&SUBSTR(7:8,&SYSDATE)\nDO WHILE (&PFK \u00ac= PF03) AND (&PFK \u00ac= PF15)\n/*DO UNTIL (&PFK = PF03) OR (&PFK = PF15)\nSET &JD   = &SUBSTR(6:8,&WSYSJDATE)\nSET &DD   = &SUBSTR(4:5,&WSYSDATE)\nSET &MM   = &SUBSTR(1:2,&WSYSDATE)\nSET &AA   = &SUBSTR(7:10,&WSYSDATE)\nSET &AAAA = &AA\nSET &MES = 10*(&MM-1) + 1\nSET &MESES = &STR(   ENERO    FEBRERO   MARZO      ABRIL     MAYO   +\nJUNIO     JULIO     AGOSTO    SEPTIEMBRE  OCTUBRE NOVIEMBRE  DICIEMBRE)\nSET &LMM = &SUBSTR(&MES:&MES+9,&STR(&MESES))\nSET &LAA = &STR(  )&AAAA&STR(  )\nSET &AAAA = &AAAA - 1\nSET &BIS  = &AAAA/4\nSET &SW  = &AAAA-4*&BIS\nSET &TOTAL = (&AAAA*365) + &BIS + &JD - &DD + 1\nSET &DISE = &TOTAL/7\nSET &DISE = &TOTAL-&DISE*7\n/*WRITE TOTAL=&TOTAL AA=&AA JD=&JD MM=&MM DD=&DD DISE=&DISE\nIF &DISE = 1 THEN SET &DISE = 7\nIF &DISE = 2 THEN SET &DISE = 1\nIF &DISE = 3 THEN SET &DISE = 2\nIF &DISE = 4 THEN SET &DISE = 3\nIF &DISE = 5 THEN SET &DISE = 4\nIF &DISE = 6 THEN SET &DISE = 5\nIF &DISE = 0 THEN SET &DISE = 6\nIF (&MM = 02) THEN +\n  IF &SW = 3 THEN SET &NVECES = 29\n  ELSE SET &NVECES = 28\nIF (&MM = 04) OR +\n   (&MM = 06) OR +\n   (&MM = 09) OR +\n   (&MM = 11) THEN SET &NVECES = 30\nIF (&MM = 01) OR +\n   (&MM = 03) OR +\n   (&MM = 05) OR +\n   (&MM = 07) OR +\n   (&MM = 08) OR +\n   (&MM = 10) OR +\n   (&MM = 12) THEN SET &NVECES = 31\nSET &NUM = 1\nDO &I = 1 TO 37\nSET &MYINT&I = LOW\nEND\nDO &I = 1 TO 37\nSET &MYCOL&I = GREEN\nEND\nDO &I = 7 TO 37 BY 7\nSET &MYCOL&I = RED\nSET &MYINT&I = HIGH\nEND\nDO &VECES = 1 TO &NVECES\nSET &D&DISE = &NUM\n/*CONTROL MSG LIST CONLIST SYMLIST FLUSH NOPROMPT\nIF (&AA&MM&NUM = &FN1 ) OR +\n   (&AA&MM&NUM = &FN2 ) OR +\n   (&AA&MM&NUM = &FN3 ) OR +\n   (&AA&MM&NUM = &FN4 ) OR +\n   (&AA&MM&NUM = &FN5 ) OR +\n   (&AA&MM&NUM = &FN6 ) OR +\n   (&AA&MM&NUM = &FN7 ) OR +\n   (&AA&MM&NUM = &FN8 ) OR +\n   (&AA&MM&NUM = &FN9 ) OR +\n   (&AA&MM&NUM = &FN10) OR +\n   (&AA&MM&NUM = &FN11) OR +\n   (&AA&MM&NUM = &FN12) OR +\n   (&AA&MM&NUM = &FN13) OR +\n   (&AA&MM&NUM = &FN14) THEN +\n   DO\n     SET &MYINT&DISE = HIGH\n     SET &MYCOL&DISE = RED\n   END\n/*CONTROL NOMSG NOLIST NOCONLIST NOSYMLIST NOFLUSH NOPROMPT\nIF &NUM = &DD THEN +\n DO\n   SET &MYINT&DISE = HIGH\n   SET &MYCOL&DISE = BLUE\n END\nSET &DISE = &DISE + 1\nSET &NUM  = &NUM  + 1\nEND\n/*WRITE ENTRO EN DISPLAY DE PANEL = &PFK\nISPEXEC ADDPOP ROW(01) COLUMN(38)\nIF &LENGTH(&D36) > 0 THEN ISPEXEC DISPLAY PANEL(MESP1)\nELSE IF &LENGTH(&D29) > 0 THEN ISPEXEC DISPLAY PANEL(MESP2)\n     ELSE ISPEXEC DISPLAY PANEL(MESP3)\nISPEXEC REMPOP ALL\n/*WRITE ENTRO EN DISPLAY DE 1 PFK = &PFK\nIF (&PFK \u00ac= PF07) AND +\n   (&PFK \u00ac= PF08) AND +\n   (&PFK \u00ac= PF15) AND +\n   (&PFK \u00ac= PF19) AND +\n   (&PFK \u00ac= PF20) AND +\n   (&PFK \u00ac= PF03) THEN SET &PFK = &STR(PF08)\n/*WRITE ENTRO EN DISPLAY DE 2 PFK = &PFK\nIF (&PFK = PF08) OR (&PFK = PF20) THEN +\n   IF (&MM = 02) THEN +\n      IF &SW = 3 THEN +\n        DO\n         SET &JD = &JD + 29\n         SET &MM = &MM + 1\n        END\n      ELSE DO\n            SET &JD = &JD + 28\n            SET &MM = &MM + 1\n           END\n   ELSE IF (&MM = 04) OR +\n           (&MM = 06) OR +\n           (&MM = 09) OR +\n           (&MM = 11) THEN +\n             DO\n              SET &JD = &JD + 30\n              SET &MM = &MM + 01\n             END\n        ELSE IF (&MM = 01) OR +\n                (&MM = 03) OR +\n                (&MM = 05) OR +\n                (&MM = 07) OR +\n                (&MM = 08) OR +\n                (&MM = 10) THEN +\n                  DO\n                   SET &JD = &JD + 31\n                   SET &MM = &MM + 1\n                  END\n             ELSE IF (&MM = 12) THEN +\n                       DO\n                        SET &AA = &AA + 1\n                        SET &JD = &DD\n                        SET &MM = 1\n                       END\n/*CONTROL MSG LIST CONLIST SYMLIST FLUSH NOPROMPT\nIF (&PFK = PF07) OR (&PFK = PF19) THEN +\n   IF (&MM = 02) OR +\n      (&MM = 04) OR +\n      (&MM = 06) OR +\n      (&MM = 08) OR +\n      (&MM = 09) OR +\n      (&MM = 11) THEN +\n        DO\n         SET &JD = &JD - 31\n         SET &MM = &MM - 01\n        END\n   ELSE IF (&MM = 05) OR +\n           (&MM = 07) OR +\n           (&MM = 10) OR +\n           (&MM = 12) THEN +\n             DO\n              SET &JD = &JD - 30\n              SET &MM = &MM - 1\n             END\n        ELSE IF (&MM = 01) THEN +\n                  DO\n                   SET &AA = &AA - 1\n                   SET &MM = 12\n                   SET &AAAA = &AA\n                   SET &AAAA = &AAAA - 1\n                   SET &BIS  = &AAAA/4\n                   SET &SW  = &AAAA-4*&BIS\n                   IF &SW = 3 THEN SET &JD = 335 + &DD\n                   ELSE SET &JD = 334 + &DD\n                  END\n             ELSE IF (&MM = 03) THEN +\n                     DO\n                      SET &MM = 02\n                      IF &SW = 3 THEN SET &JD = &JD - 29\n                      ELSE SET &JD = &JD - 28\n                     END\nIF &LENGTH(&MM) = 1 THEN SET &MM = &STR(0)&MM\nIF &LENGTH(&JD) = 1 THEN SET &JD = &STR(00)&JD\nIF &LENGTH(&JD) = 2 THEN SET &JD = &STR(0)&JD\nSET &WSYSJDATE = &AA&STR(.)&JD\nSET &WSYSDATE  = &STR(&MM)&STR(/)&DD&STR(/)&AA\n/*WRITE WSYSDATE=&WSYSDATE WSYSJDATE=&WSYSJDATE\nDO &I = 1 TO 37\nSET &D&I = &STR(  )\nEND\nEND\n/*CONTROL MSG LIST CONLIST SYMLIST FLUSH NOPROMPT\nSET &ZPF07 = &STR(&WPF07)\nSET &ZPF08 = &STR(&WPF08)\nSET &ZPF19 = &STR(&WPF19)\nSET &ZPF20 = &STR(&WPF20)\nSET &WPF = &&WPF\nSET &ZZ = &STR(01)\nDO WHILE &ZZ <= 24\n IF &STR(&WPF&ZZ) = &STR(RETURN) THEN +\n  IF (&ZZ \u00ac= 07) AND (&ZZ \u00ac= 08) AND (&ZZ \u00ac= 19) AND (&ZZ \u00ac= 20) THEN +\n    DO\n     SET &ZPF&ZZ = &STR(&WPF&ZZ)\n     ISPEXEC VPUT (ZPF&ZZ)\n    END\n SET &ZZ = &ZZ + 01\n IF &LENGTH(&ZZ) = 1 THEN SET &ZZ = &STR(0)&ZZ\nEND\nSET &ZZ = &STR(01)\nDO WHILE &ZZ <= 24\n ISPEXEC VPUT (ZPF&ZZ)\n SET &ZZ = &ZZ + 01\n IF &LENGTH(&ZZ) = 1 THEN SET &ZZ = &STR(0)&ZZ\nEND\nISPEXEC LIBDEF ISPPLIB\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MESP1": {"ttr": 2054, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x13T\\x00F\\x00F\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T13:54:00", "lines": 70, "newlines": 70, "modlines": 0, "user": "ADMINI3"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "MESP2": {"ttr": 2056, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x13T\\x00A\\x00A\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T13:54:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "ADMINI3"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "MESP3": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x13U\\x007\\x007\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T13:55:00", "lines": 55, "newlines": 55, "modlines": 0, "user": "ADMINI3"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "PRESTA": {"ttr": 2060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00$/\\x01\\x00$/\\x117\\x00,\\x00,\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-29T00:00:00", "modifydate": "2000-08-29T11:37:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "ADMINI3"}, "text": ")ATTR\n    % TYPE (TEXT)   INTENS (HIGH)\n    + TYPE (TEXT)   INTENS (LOW)\n    \u00a2 TYPE (INPUT)  INTENS (HIGH) CAPS(ON)\n    ! TYPE (INPUT)  INTENS (LOW)\n    @ TYPE (OUTPUT) INTENS (HIGH)\n    | TYPE (OUTPUT) INTENS (LOW)\n      CAPS (ON)\n      SKIP (ON)\n)BODY\n+\n%**************************** Calculo de Prestamos *****************************\n+Command ===>\u00a2ZCMD\n+\n+Capital ... _Z       +          Interes ... _Z     +    Fecha ... _Z   +\n+\n+Tiempo .... _Z   +            % Cuota ..... _CUOTA         +\n+\n+Recibo      Pend. Anterior    Nuevo Pendiente       Capital        Interes\n+-------     --------------    ---------------      ---------       -------\n+\n)MODEL\n|LL\n)INIT\n .ZVARS = '(CAPITAL INTERES FECH TIEMPO)'\n .CURSOR = ZCMD\n .HELP = PRE00\n &LL = ' '\n)REINIT\n .AUTOSEL = NO\n  REFRESH(*)\n)PROC\n IF (&FECH = '')\n    &FECH = '&ZYEAR&ZMONTH'\n IF (&CAPITAL = '')\n    &CAPITAL = 01000000\n IF (&TIEMPO = '')\n    &TIEMPO = 0036\n VER (&CAPITAL,NB,PICT,'99999999',MSG=PRE001)\n VER (&INTERES,NB,PICT,'999999',MSG=PRE002)\n VER (&FECH,NB,PICT,'9999',MSG=PRE004)\n VER (&TIEMPO,NB,PICT,'9999',MSG=PRE003)\n &PFK = .PFKEY\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PRESTAMO": {"ttr": 2062, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x00$/\\x01\\x00$/\\x118\\x005\\x003\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-08-29T00:00:00", "modifydate": "2000-08-29T11:38:00", "lines": 53, "newlines": 51, "modlines": 0, "user": "ADMINI3"}, "text": "PROC 0\nCONTROL NOMSG NOLIST NOCONLIST NOSYMLIST NOFLUSH PROMPT\n/*CONTROL MSG LIST CONLIST SYMLIST FLUSH PROMPT\nISPEXEC LIBDEF ISPPLIB DATASET ID('USXXBCR.CBT.ALL')\nERROR RETURN\nDELETE ('&SYSUID..TABLA') NONVSAM PURGE SCRATCH\nFREE FI(DCBT)\nFREE FI(TABLA)\nATTR DCBT LRECL(80) BLKSIZE(8000) RECFM(F B) DSORG(PO)\nALLOC FI(TABLA) SPACE(1,1) TRACKS NEW CATALOG USING(DCBT) +\n      DA('&SYSUID..TABLA') DIR(10)\nISPEXEC LIBDEF ISPTLIB\nISPEXEC LIBDEF ISPTABL\nISPEXEC LIBDEF ISPTABL DATASET ID('&SYSUID..TABLA')\nISPEXEC LIBDEF ISPTLIB DATASET ID('&SYSUID..TABLA')\nSET &C = &STR(0000000012)\nFREE FI(DCB)\nFREE FI(SALIDA)\nATTR DCB LRECL(80) BLKSIZE(8000) RECFM(F B)\nALLOC FI(SALIDA) SPACE(1,1) TRACKS NEW DELETE USING(DCB)\nISPEXEC DISPLAY PANEL(PRESTA)\nDO WHILE &PFK \u00ac= &STR(PF03) AND &PFK \u00ac= &STR(PF15) AND ZTDSELS \u00ac= 0 +\n     AND &PFK \u00ac= &STR(PF04) AND &PFK \u00ac= &STR(PF16)\n ISPEXEC TBERASE TABPREST\n ISPEXEC TBCREATE TABPREST NAMES(LL) SHARE\n ISPEXEC TBCLOSE TABPREST\n CALL 'USXXBCR.CBT.LOADLIB(PRESTA4)' '&CAPITAL&TIEMPO&INTERES&C&FECH'\n OPENFILE SALIDA INPUT\n ISPEXEC TBOPEN TABPREST WRITE\n ISPEXEC TBTOP TABPREST\n GETFILE SALIDA\n SET &CUOTA = &SUBSTR(1:14,&SALIDA)\n GETFILE SALIDA\n DO WHILE &MAXCC \u00ac= 400\n    SET LL = &SUBSTR(1:75,&SALIDA)\n    ISPEXEC TBADD TABPREST SAVE(LL) ORDER\n    GETFILE SALIDA\n END\n CLOSFILE SALIDA\n ISPEXEC TBCLOSE TABPREST\n ISPEXEC TBOPEN TABPREST NOWRITE\n ISPEXEC TBDISPL TABPREST PANEL(PRESTA)\n ISPEXEC TBCLOSE TABPREST\n SET &MAXCC = 0\nEND\nISPEXEC LIBDEF ISPTLIB\nISPEXEC LIBDEF ISPTABL\nISPEXEC LIBDEF ISPPLIB\nFREE FI(DCBT)\nFREE FI(TABLA)\nFREE FI(DCB)\nFREE FI(SALIDA)\nDELETE ('&SYSUID..TABLA') NONVSAM PURGE SCRATCH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRESTA4": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00$/\\x01\\x00$/\\x116\\x00\\x92\\x00\\x92\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-29T00:00:00", "modifydate": "2000-08-29T11:36:00", "lines": 146, "newlines": 146, "modlines": 0, "user": "ADMINI3"}, "text": "000100 IDENTIFICATION DIVISION.\n000200 PROGRAM-ID. PRESTA4.\n000500 ENVIRONMENT DIVISION.\n000600 CONFIGURATION SECTION.\n000700 SOURCE-COMPUTER. IBM-3031.\n000800 OBJECT-COMPUTER. IBM-3031.\n000900 SPECIAL-NAMES.\n001000     DECIMAL-POINT IS COMMA\n001100     C01 IS SALTO-PAG.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT  SALIDA    ASSIGN DA-S-SALIDA.\n       DATA DIVISION.\n       FILE SECTION.\n       FD   SALIDA\n            LABEL RECORDS ARE STANDARD,\n            BLOCK  0  RECORDS,\n            RECORDING MODE IS F.\n       01  R-SALIDA  PIC X(80).\n002200 WORKING-STORAGE SECTION.\n003400 01  R-SPACES PIC X(80) VALUE SPACES.\n003400 01  W-SALIDA PIC X(80).\n003400 01  DATOS.\n003500     03  CPENDANT      PIC 9(10)V9(8).\n003600     03  CNUEVOPEN     PIC S9(10)V9(8).\n003700     03  CCAPITAL      PIC 9(10)V9(8).\n003800     03  CINTERES      PIC 9(10)V9(8).\n003900     03  WCUOTA        PIC 9(10)V9(8).\n008500     03  ZCUOTA        PIC ZZZ.ZZZ.ZZ9,99.\n004000     03  NRECIBS       PIC 9999.\n004100     03  NRECI         PIC 9999 VALUE ZEROS.\n004200     03  TOTCAP        PIC 9(10)V9(8) VALUE ZEROS.\n004300     03  TOTINT        PIC 9(10)V9(8) VALUE ZEROS.\n004400     03  ACUCAP        PIC 9(10)V9(8) VALUE ZEROS.\n004500     03  ACUINT        PIC 9(10)V9(8) VALUE ZEROS.\n004600     03  ANNO          PIC 9999 VALUE 01.\n004700     03  CPRI          PIC 9999 VALUE ZEROS.\n004800     03  WRECI         PIC 9999 VALUE ZEROS.\n004900     03  CONTA         PIC 9999 VALUE ZEROS.\n005000     03  W1            PIC 9(10)V9(8).\n005100     03  W2            PIC 9(10)V9(8).\n005200     03  W3            PIC 9(10)V9(8).\n005300     03  W4            PIC 9(10)V9(8).\n005400     03  W5            PIC 9(10)V9(8).\n005500     03  W6            PIC 9(10)V9(8).\n008100 01  DETA1.\n008300     03  MES-DETA1     PIC XXX.\n008300     03  ANO-DETA1     PIC XX.\n008300     03  PRECI         PIC ZZZ9.\n008400     03  FILLER        PIC XXX VALUE SPACES.\n008500     03  PPENDANT      PIC ZZZ.ZZZ.ZZ9,99.\n008600     03  FILLER        PIC XXX VALUE SPACES.\n008700     03  PNUEVOPEN     PIC ZZZ.ZZZ.ZZ9,99-.\n008800     03  FILLER        PIC XX   VALUE SPACES.\n008900     03  PCAPITAL      PIC ZZZ.ZZZ.ZZ9,99.\n009000     03  FILLER        PIC X(1) VALUE SPACES.\n009100     03  PINTERES      PIC ZZZ.ZZZ.ZZ9,99.\n010400 01  DETA3.\n010500     03  FILLER        PIC X(16) VALUE\n010600         'TOTAL ACUMULADO'.\n010700     03  FILLER        PIC X(30) VALUE\n010800         '. . . . . . . . . . . . .'.\n010900     03  PACUCAP       PIC ZZZ.ZZZ.ZZ9,99.\n011000     03  FILLER        PIC X  VALUE SPACES.\n011100     03  PACUINT       PIC ZZZ.ZZZ.ZZ9,99.\n       01  MESES.\n           03 FILLER PIC XXX VALUE 'ENE'.\n           03 FILLER PIC XXX VALUE 'FEB'.\n           03 FILLER PIC XXX VALUE 'MAR'.\n           03 FILLER PIC XXX VALUE 'ABR'.\n           03 FILLER PIC XXX VALUE 'MAY'.\n           03 FILLER PIC XXX VALUE 'JUN'.\n           03 FILLER PIC XXX VALUE 'JUL'.\n           03 FILLER PIC XXX VALUE 'AGO'.\n           03 FILLER PIC XXX VALUE 'SET'.\n           03 FILLER PIC XXX VALUE 'OCT'.\n           03 FILLER PIC XXX VALUE 'NOV'.\n           03 FILLER PIC XXX VALUE 'DIC'.\n       01  FILLER REDEFINES MESES.\n           03 TMES PIC XXX OCCURS 12 TIMES.\n002200 LINKAGE SECTION.\n002300 01  TARJETA.\n002400     03  FILLER        PIC XX.\n002400     03  CCONCE        PIC 9(8).\n002600     03  PLAZO         PIC 9999.\n002800     03  INTE          PIC 999999.\n003000     03  CUOTA         PIC 9(6)99.\n003200     03  NPRI          PIC 99.\n008300     03  ANO-W         PIC 99.\n008300     03  MES-W         PIC 99.\n011300 PROCEDURE DIVISION USING TARJETA.\n011400 PROGRAMA.\n012300     OPEN OUTPUT SALIDA.\n012300     COMPUTE INTE ROUNDED = INTE / 10000.\n012300     COMPUTE CUOTA ROUNDED = CUOTA / 100.\n011800     IF CUOTA = ZEROS\n011900          NEXT SENTENCE\n012000     ELSE\n012100          MOVE CUOTA TO WCUOTA\n012200          GO TO SIGO.\n012300     COMPUTE W1 ROUNDED = INTE / 1200.\n012400     COMPUTE W2 ROUNDED = 1 / (1 + W1).\n012500     COMPUTE W3 ROUNDED = W2 ** PLAZO.\n012600     COMPUTE W4 ROUNDED = 1 - W3.\n012700     COMPUTE W5 ROUNDED = CCONCE * W1.\n012800     COMPUTE W6 ROUNDED = W5 / W4.\n012900     MOVE    W6 TO WCUOTA.\n012900     MOVE WCUOTA TO ZCUOTA.\n012900     WRITE R-SALIDA FROM ZCUOTA.\n013000 SIGO.\n013100     MOVE PLAZO TO NRECIBS.\n013200     MOVE CCONCE TO CPENDANT CNUEVOPEN.\n013400 MAS.\n013500     ADD 1 TO NRECI.\n013600     IF NRECI > NRECIBS\n013700          GO TO ACABO.\n013800     MOVE NRECI TO PRECI.\n013800     PERFORM MOVER-FECHA.\n013900     MOVE CPENDANT TO PPENDANT.\n014000     COMPUTE W1 ROUNDED = CPENDANT * INTE.\n014100     COMPUTE W2 ROUNDED = W1 / 1200.\n014200     MOVE    W2 TO CINTERES PINTERES.\n014300     COMPUTE W3 ROUNDED = WCUOTA - W2.\n014400     MOVE    W3 TO CCAPITAL PCAPITAL.\n014500     COMPUTE W4 ROUNDED = CPENDANT - CCAPITAL.\n014600     MOVE W4 TO CNUEVOPEN.\n014700     MOVE CNUEVOPEN TO PNUEVOPEN CPENDANT.\n014800     WRITE R-SALIDA FROM DETA1.\n014900     ADD CCAPITAL TO TOTCAP ACUCAP.\n015000     ADD CINTERES TO TOTINT ACUINT.\n019000     GO TO MAS.\n019100 ACABO.\n020000     MOVE ACUCAP TO PACUCAP.\n020100     MOVE ACUINT TO PACUINT.\n022400     WRITE R-SALIDA FROM R-SPACES.\n020200     WRITE R-SALIDA FROM DETA3.\n020300 TERMINO.\n012300     CLOSE SALIDA.\n020500     STOP RUN.\n020300 MOVER-FECHA.\n012300     MOVE ANO-W TO ANO-DETA1.\n012300     MOVE TMES(MES-W) TO MES-DETA1.\n012300     IF MES-W = 12\n012300        ADD 1 TO ANO-W\n012300        MOVE 0 TO MES-W.\n012300     ADD 1 TO MES-W.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUMAR": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x14\\x07\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T14:07:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "ADMINI3"}, "text": "ISREDIT MACRO (NUMO NUMC)\nCONTROL NOMSG NOLIST NOCONLIST NOSYMLIST NOFLUSH NOPROMPT\nISREDIT (LINE,COLU) = CURSOR\nISREDIT (NLINZ) = LINENUM .ZLAST\nSET &TOLIN = &NUMC + &LINE\nIF &TOLIN > &NLINZ THEN +\n DO\n   SET ZEDLMSG = &STR(**ERROR** NO HAY LINEA PARA COLOCAR EL TOTAL **)\n   ISPEXEC SETMSG MSG(ISRZ001)\n   EXIT CODE(0)\n END\nSET &SUMA = 0\nIF &COLU = 0 THEN SET &COLU = 9\nIF (&LENGTH(&NUMO) = 0) OR (&LENGTH(&NUMC) = 0) THEN +\n DO\n   SET ZEDLMSG = &STR(**ERROR** FORMATO *SUMAR ND NS* ND=NUMERO DE +\n                      DIGITOS DE LOS SUMANDOS, NS = NUMERO DE SUMANDOS)\n   ISPEXEC SETMSG MSG(ISRZ001)\n   EXIT CODE(0)\n END\nSET &COLF = &COLU + &NUMO\nDO WHILE &NUMC > 0\n ISREDIT (DLINEA) = LINE &LINE\n SET &SUM1 = &SUBSTR(&COLU:&COLF,&DLINEA)\n SET &SUMA = &SUMA + &SUM1\n SET &LINE = &LINE + 1\n SET &NUMC = &NUMC - 1\nEND\nISREDIT LINE &LINE = LINE + < &COLU &SUMA >\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VERDSN": {"ttr": 2311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x13I\\x00\\x07\\x00\\x03\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T13:49:00", "lines": 7, "newlines": 3, "modlines": 0, "user": "ADMINI3"}, "text": "/* REXX */\n\"ISPEXEC LIBDEF ISPPLIB DATASET ID('USXXBCR.CBT.ALL')\"\n\"ISPEXEC LIBDEF ISPMLIB DATASET ID('USXXBCR.CBT.ALL')\"\n\"CALL 'USXXBCR.CBT.LOADLIB(VERDSN)' \"\n\"ISPEXEC LIBDEF ISPPLIB\"\n\"ISPEXEC LIBDEF ISPMLIB\"\nEXIT 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VERDSNP": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x135\\x00 \\x00 \\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T13:35:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "ADMINI3"}, "text": ")ATTR DEFAULT(!+_)\n    _ TYPE (TEXT)   INTENS (HIGH)\n    + TYPE (TEXT)   INTENS (LOW)\n    \u00a2 TYPE (INPUT)  INTENS (HIGH) CAPS(ON)\n    ! TYPE (INPUT)  INTENS (LOW)\n    @ TYPE (OUTPUT) INTENS (HIGH)\n    | TYPE (OUTPUT) INTENS (LOW) CAPS(OFF)\n)BODY\n+                                                                              _\n+Comando_===>\u00a2ZCMD                                            +Usuario-+&ZUSER\n_                                                             +Fecha  -+&ZDATE\n_            Busqueda de un DSN                               +Hora   -+&ZTIMEL\n_            ------------------                               +Sistema-_&ZSYSID\n_                                                         +.....................\n_                                                         +.+Tvol   +Procesado .\n_                                                         +.@Z   +     @Z  _% +.\n_                                                         +.+Dir +Volume Nvol  .\n_                                                         +.@Z  +@Z     +@Z   +.\n+                                                         +.....................\n+Dataset_===>!Z                                           +                    _\n_                                                                              _\n|Z                        +@Z                                                  _\n|Z                        +                                                   _\n|Z                        +                                                   _\n_                                                                              _\n)INIT\n .ZVARS = '(TVO POR LDI LVO NVO DSN LI1 INF LI2 LI3)'\n .CURSOR = DSN\n)PROC\n VER (&DSN,NB,DSNAME,MSG=VER001)\n)HELP\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VERDSNS": {"ttr": 2315, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x135\\x00\\xb6\\x00\\xb6\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T13:35:00", "lines": 182, "newlines": 182, "modlines": 0, "user": "ADMINI3"}, "text": "VERDSN  CKINICIO\n*\n         OI    DLIST,X'80'\n         LA    R1,PARVDEF\n         LINK  EP=ISPLINK\n*\n         MVC   POR,=P'0'\n*\nDI_PANEL EQU   *\n*\n         USING UCBOB,R6\n         MVC   TOTUCB,CEROP\nCONTUCB  EQU   *\n         UCBSCAN COPY,UCBAREA=UCBA,WORKAREA=WORKAREA,                  X\n               DEVCLASS=DASD,DYNAMIC=YES\n         LTR   R15,R15\n         BNZ   SEGUIR\n         LA    R6,UCBA\n         TM    UCBSTAT,UCBONLI\n         BC    8,CONTUCB\n         AP    TOTUCB,UNOP\n         B     CONTUCB\n*\nSEGUIR   EQU   *\n         UNPK  TVO(4),TOTUCB+0(3)\n         OI    TVO+3,X'F0'\n*\n         OI    DPANEL,X'80'\n         LA    R1,PARDISP\n         LINK  EP=ISPLINK\n         LTR   R15,R15\n         BNZ   FINAL\n*\n         LA    R8,INF\n         MVI   FLAG1,X'00'\n         MVC   LI1,LISPACE\n         MVC   LI2,LISPACE\n         MVC   LI3,LISPACE\n         MVC   INF,INFSPAC\n         MVC   DSNAME,DSN\n         MVC   NUMUCB,CEROP\n*\n*     PROCESO PARA LA LISTA DE UCB'S\n*\nPROCUCB  EQU   *\n         UCBSCAN COPY,UCBAREA=UCBA,WORKAREA=WORKAREA,                  X\n               DEVCLASS=DASD,DYNAMIC=YES\n         LTR   R15,R15\n         BNZ   FINUCB\n         LA    R6,UCBA\n         TM    UCBSTAT,UCBONLI\n         BC    8,PROCUCB\n*\n         AP    NUMUCB,UNOP\n         UNPK  NVO(4),NUMUCB+0(3)\n         OI    NVO+3,X'F0'\n         MVC   TRANUM,CERO2P\n         MVC   TRANUM+4(3),NUMUCB\n         MP    TRANUM,CIENP\n         DP    TRANUM,TOTUCB\n         MVC   POR,TRANUM+1\n*\n         MVC   LVO,UCBVOLI\n         MVC   LDI,UCBNAME\n*\n         OI    DLOCK,X'80'\n         LA    R1,PARCONT\n         LINK  EP=ISPLINK\n*\n         OI    DPANEL,X'80'\n         LA    R1,PARDISP\n         LINK  EP=ISPLINK\n*\n         MVC   VOLUME,UCBVOLI\n         OBTAIN DSCBDSN\n         LTR   R15,R15\n         BNZ   PROCUCB\n*\n         MVI   FLAG1,X'01'\n         MVC   LI1,LI11\n         MVC   0(6,R8),UCBVOLI\n         LA    R8,7(R8)\n         B     PROCUCB\n*\nFINUCB   EQU   *\n         CLI   FLAG1,X'01'\n         BE    SIHAY\n         MVC   LI2,LI21\nSIHAY    EQU   *\n         MVC   LI3,LI31\n         B     DI_PANEL\n*\nFINAL    CKFINAL RET=0\n*\nCAMPOCVD DS    D\n*\nFLAG1    DC    X'00'\nTRANUM   DC    P'000000000000'\nUNOP     DC    P'1'\nCIENP    DC    P'100'\nTOTUCB   DC    P'0000'\nNUMUCB   DC    P'0000'\nCEROP    DC    P'0000'\nCERO2P   DC    P'000000000000'\n*\nPARCONT  DS    0F\n         DC    A(CONTROL)\n         DC    A(DISPLAY)\nDLOCK    DC    A(LOCK)\n*\nPARDISP  DS    0F\n         DC    A(DISPLAY)\nDPANEL   DC    A(PANEL00)\n*\nPARVDEF  DS    0F\n         DC    A(VDEFINE)\n         DC    A(VARIABL1)\n         DC    A(VARIABL2)\n         DC    A(VARIABL3)\n         DC    A(VARIABL4)\nDLIST    DC    A(LIST)\n*\nDISPLAY  DC    C'DISPLAY '\nPANEL00  DC    C'VERDSNP '\nCONTROL  DC    C'CONTROL '\nLOCK     DC    C'LOCK    '\n*\nVDEFINE  DC    C'VDEFINE '\nVARIABL1 DC    C'(TVO POR LDI LVO NVO DSN LI1 INF LI2 LI3)'\nVARIABL2 EQU   *\nTVO      DC    C'    '\nPOR      DC    C'   '\nLDI      DC    C'   '\nLVO      DC    C'      '\nNVO      DC    C'    '\nDSN      DC    C'                                            '\nLI1      DC    C'                         '\nINF      DC    C'                                                  '\nLI2      DC    C'                         '\nLI3      DC    C'                         '\nVARIABL3 EQU   *\n         DC    C'CHAR    '\n         DC    C'PACK    '\n         DC    C'CHAR    '\n         DC    C'CHAR    '\n         DC    C'CHAR    '\n         DC    C'CHAR    '\n         DC    C'CHAR    '\n         DC    C'CHAR    '\n         DC    C'CHAR    '\n         DC    C'CHAR    '\nVARIABL4 DS    0F\n         DC    F'4'\n         DC    F'3'\n         DC    F'3'\n         DC    F'6'\n         DC    F'4'\n         DC    F'44'\n         DC    F'25'\n         DC    F'50'\n         DC    F'25'\n         DC    F'25'\nLIST     DC    C'LIST    '\n*\nDSCBDSN  CAMLST SEARCH,DSNAME,VOLUME,NULLAREA\nDSNAME   DC    C'                                            '\nVOLUME   DS    CL6\nNULLAREA DS    CL140\n*\nUCBA     DS    CL48\nWORKAREA DS    CL100\n*\nLI11     DC    C'Esta en el/los volumen/es'\nLI21     DC    C'No esta en ningun volumen'\nLI31     DC    C'Fin de la Busqueda       '\nLISPACE  DC    C'                         '\nINFSPAC  DC    C'                                                  '\n*\nUCB      DSECT\n         IEFUCBOB LIST=YES\n*\n         END   VERDSN\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VER00": {"ttr": 2319, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00#\\x8f\\x01\\x00#\\x8f\\x136\\x00\\x14\\x00\\x14\\x00\\x00\\xc1\\xc4\\xd4\\xc9\\xd5\\xc9\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-08-25T00:00:00", "modifydate": "2000-08-25T13:36:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "ADMINI3"}, "text": "VER000 '                 ' .ALARM=YES .WINDOW=RESP\n'                                  '\nVER001 'Mal Dataset      ' .ALARM=YES .WINDOW=RESP\n'Teclear un nombre de Dataset correcto '\nVER002 '                 ' .ALARM=YES .WINDOW=RESP\n'                                  '\nVER003 '                 ' .ALARM=YES .WINDOW=RESP\n'                                  '\nVER004 '                 ' .ALARM=YES .WINDOW=RESP\n'                                  '\nVER005 '                 ' .ALARM=YES .WINDOW=RESP\n'                                  '\nVER006 '                 ' .ALARM=YES .WINDOW=RESP\n'                                  '\nVER007 '                 ' .ALARM=YES .WINDOW=RESP\n'                                  '\nVER008 '                 ' .ALARM=YES .WINDOW=RESP\n'                                  '\nVER009 '                 ' .ALARM=YES .WINDOW=RESP\n'                                  '\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT480/FILE480.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT480", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}