REVERSE  TITLE 'PLI FUNCTION TO REVERSE A CHARACTER STRING'
***********************************************************************
*                                                                     *
* SEGMENT NAME:                                                       *
*                                                                     *
*    REVERSE -- PLI FUNCTION TO REVERSE A CHARACTER STRING            *
*                                                                     *
* INPUTS (*TO FUNCTIONS):                                             *
*                                                                     *
*    SOURCE -- THE STRING TO BE REVERSED (*1,2,3)                     *
*       THIS IS A PL/I VARYING LENGTH CHARACTER STRING WHOSE          *
*       CHARACTERS ARE TO BE REVERSED.                                *
*                                                                     *
* FUNCTIONS:                                                          *
*                                                                     *
*    1. IF THE SOURCE STRING IS LONGER THAT THE MAXIMUM (DECLARED)    *
*       LENGTH OF THE TARGET STRING, SET UP TO DO THE REVERSE ONLY ON *
*       THE FIRST 'N' CHARACTERS IN THE SOURCE STRING, WHERE 'N' IS   *
*       THE DECLARED LENGTH OF THE TARGET STRING.                     *
*                                                                     *
*    2. IF THE SOURCE STRING IS LONGER THAT 256 CHARACTERS, REVERSE   *
*       THE LAST 256 CHARACTERS OF THE SOURCE INTO THE FIRST 256      *
*       CHARACTERS OF THE TARGET.  REPEAT FOR THE NEXT 256 BYTES      *
*       UNTIL THERE ARE 256 CHARACTER OR LESS TO PROCESS.             *
*                                                                     *
*    3. IF THERE ARE LESS THAT 256 CHARACTERS TO PROCESS, REVERSE THE *
*       SOURCE TRING INTO THE TARGET STRING                           *
*                                                                     *
* OUTPUTS (*FROM FUNCTIONS):                                          *
*                                                                     *
*    TARGET -- THE STRING TO BE RETURNED (*2,3)                       *
*       THIS IS A PL/I VARYING LENGTH CHARACTER STRING INTO WHICH IS  *
*       PUT THE TARGET STRING WITH THE FIRST LETTER LAST AND THE LAST *
*       LETTER FIRST.                                                 *
*                                                                     *
* NOTES:                                                              *
*                                                                     *
*    1. SAMPLE DECLARATION                                            *
*                                                                     *
*       DECLARE REVERSE ENTRY(VARYING CHARACTER(*)) RETURNS(VARYING   *
*       CHARACTER(256)) EXTERNAL;                                     *
*                                                                     *
*       IF CHARACTER STRINGS LONGER THAN 256 NEED TO BE REVERSED,     *
*       THEN THE RETURNS SPECIFICATION MAY BE INCREASED TO WHATEVER   *
*       IS REQUIRED.                                                  *
*                                                                     *
*       SAMPLE CALL:                                                  *
*       STRING_A = REVERSE(STRING_B);                                 *
*                                                                     *
*    2. THE REVERSE IS DONE USING AN ALGORITHM FROM GRIZWOLDS BOOK    *
*       "ALGORITHMS IN SNOBOL 4".  EACH 256 BYTES OR LESS OF THE      *
*       TARGET IS INITIALIZED WITH THE REQUIRED NUMBER OF CHARACTERS  *
*       FROM THE REVERSE EBCIDIC STRING.  THIS NUMBER IS EQUAL TO THE *
*       LENGTH OF THE SOURCE STRING AND IS TAKEN SO AS TO INCLUDE THE *
*       LAST CHARACTER IN THE STRING.  E.I.  IF TEN CHARACTERS ARE    *
*       REQUIRED, THE LAST TEN IN THE REVERSE EBCDIC STRING.  THE     *
*       EBCIDIC STRING IS STRING OF HEX CHARACTERS STARTING WITH      *
*       X'FF' AND GOING DOWN TO X'00'.  THE INITIALIZED TARGET IS     *
*       THEN USED AS THE FIRST OPERAND OF A TRANSLATE INSTRUCTION AND *
*       THE SOURCE STRING IS USED AS THE SECOND OPERAND.              *
*                                                                     *
*    3. ISSUE HISTORY:                                                *
*                                                                     *
*       ISSUE 02:                                                     *
*       CHANGE THE INCLUDES TO INCLUDE PLRENTR AND PLREXIT.  THIS     *
*       ROUTINE IS ONLY CALLED FROM PL/I AND THE NEW FORM OF THESE    *
*       MACROS DOES NOT USE GETMAIN FREEMAIN.  PL/I'S STACK IS USED   *
*       INSTEAD.                                                      *
*                                                                     *
*       REASON FOR ISSUE 02:  02/13/2004                              *
*       ADD AMODE AND RMODE CARDS TO GET RID OF LINKER MESSAGES       *
*                                                                     *
***********************************************************************
         SPACE
REVERSE1 AMODE ANY
REVERSE1 RMODE ANY
REVERSE  RENTR  BASE=11,PARM=(10,PLIPARMS)
         EJECT
***********************************************************************
*                                                                     *
* GET THE CURRENT LENGTH OF THE SOURCE STRING AND THE MAXIMUM LENGTH  *
* OF THE TARGET STRING.  USE THE MINIMUM AS THE LENGTH TO BE          *
* PROCESSED.  IF THE TARGET IS TO SHORT, ONLY THE FIRST CHARACTERS IN *
* THE SOURCE WILL BE USED.                                            *
*                                                                     *
*      REGISTER USAGE:                                                *
*              R7  -> NEXT SOURCE TEXT TO BE PROCESSED                *
*              R8  -> JUST PAST THE NEXT TARGET SOURCE TO BE          *
*                     PROCESSED                                       *
*              R9  -  LENGTH OF THE SOURCE STRING LEFT TO PROCESS     *
*              R10 -> PARM LIST FROM PL/I                             *
*              R11 -  BASE FOR PROGRAM                                *
*              R12 -> PLI TASK COMMUNICATIONS AREA  -  DO NOT MODIFY  *
*              R13 -> DYNAMIC SAVE AREA                               *
*              R15 -  WORK REGISTER                                   *
*                                                                     *
***********************************************************************
         SPACE
         L     R15,PLIFROM    POINT TO THE SOURCE PARM L/D
         L     R15,0(R15)     POINT TO THE SOURCE STRING
         LH    R9,0(R15)      GET SOURCE STIRNG CURRENT LENGTH
         LA    R7,2(R15)      SAVE THE ADDR OF THE BEGINNING OF THE
*                             SOURCE TEXT
         SPACE
         L     R15,PLITO      POINT TO THE TARGET PARM L/D
         CH    R9,4(R15)      COMPARE THE SOURCE LENGTH TO THE
*                             DECLARED LENGTH OF THE TARGET.
         BNH   SOURCEOK       IF THE TARGET IS LONG ENOUGH, THE
*                             SOURCE LENGTH IS THE ONE TO USE.
         SPACE
         LH    R9,4(R15)      IF THE TARGET IS TO SHORT, ONLY USE
*                             THE FIRST TARGET_LENGTH CHARACTERS
         SPACE
SOURCEOK DS    0H
         L     R8,0(R15)      POINT TO THE TARGET STRING
         STH   R9,0(R8)       STORE THE LENGTH OF THE TARGET STRING
*                             IN THE STRING'S 2 BYTE HEADER.
         LA    R8,2(R9,R8)    POINT TO JUST PAST THE PORTION OF THE
*                             TARGET STRING TO BE USED.
         EJECT
***********************************************************************
*                                                                     *
* CHECK IF THE AMOUNT OF SOURCE STRING LENF TO PROCESS IS LESS THAN   *
* OR EQUAL TO 256 CHARACTERS.  IF SO, GO PROCESS THE REMAINING AMOUNT *
* OF THE STRING.  IF THERE ARE MORE THAN 256 CHARACTERS TO BE         *
* PROCESSED, PROCESS 256 OF THEM AND SEE HOW MUCH IS LEFT.            *
*                                                                     *
*      REGISTER USAGE:                                                *
*              R7  -> NEXT SOURCE TEXT TO BE PROCESSED                *
*              R8  -> JUST PAST THE NEXT TARGET SOURCE TO BE          *
*                     PROCESSED                                       *
*              R9  -  LENGTH OF THE SOURCE STRING LEFT TO PROCESS     *
*              R10 -> PARM LIST FROM PL/I                             *
*              R11 -  BASE FOR PROGRAM                                *
*              R12 -> PLI TASK COMMUNICATIONS AREA  -  DO NOT MODIFY  *
*              R13 -> DYNAMIC SAVE AREA                               *
*                                                                     *
***********************************************************************
         SPACE
TESTLEN  DS    0H
         CH    R9,=H'256'     IS THE STRING MORE THAN 256 CHARACTERS?
         BNH   LASTREV        IF NOT, GO DO THE WHOLE STRING.
         SPACE 5
PROC256  DS    0H
         SH    R8,=H'256'     MOVE BACK 256 CHARACTERS FROM THE END
*                             OF THE STRING
         MVC   0(256,R8),REVERSES    MOVE IN THE REVERSING STRING
         TR    0(256,R8),0(R7)       AND REVERSE IN THE FIRST 256
*                                    BYTES OF THE SOURCE INTO THE LAST
*                                    256 BYTES OF THE TARGET.
         SPACE
         LA    R7,256(R7)            MOVE THE SOURCE POINTER
         SH    R9,=H'256'            REDUCE THE LENGTH TO BE PROCESSED
         B     TESTLEN               AND GO BACK FOR MORE
         EJECT
***********************************************************************
*                                                                     *
* FOR STRINGS LESS THAN 256 CHRACTERS THE LAST 'N' BYTES OF THE       *
* REVERSING STRING ARE MOVED INTO THE TARGET.  'N' IS LENGTH OF THE   *
* SOURCE STRING.  THE TRANSLATE IS THEN EXECUTED FOR THE LENGTH OF    *
* THE SOURCE TO BE PROCESSED.                                         *
*                                                                     *
*      REGISTER USAGE:                                                *
*              R7  -> NEXT SOURCE TEXT TO BE PROCESSED                *
*              R8  -> JUST PAST THE NEXT TARGET SOURCE TO BE          *
*                     PROCESSED                                       *
*              R9  -  LENGTH OF THE SOURCE STRING LEFT TO PROCESS     *
*              R10 -> PARM LIST FROM PL/I                             *
*              R11 -  BASE FOR PROGRAM                                *
*              R12 -> PLI TASK COMMUNICATIONS AREA  -  DO NOT MODIFY  *
*              R13 -> DYNAMIC SAVE AREA                               *
*                                                                     *
***********************************************************************
         SPACE
LASTREV  DS    0H
         SR    R8,R9          POINT TO FRONT OF TARGET STRING
         LA    R15,REVERSES+256    POINT JUST PAST REVERSES
         SR    R15,R9         BACK UP NEEDED NUMBER OF BYTES
         SPACE
         BCTR  R9,0           SUBTRACT 1 FROM LENGTH FOR EXEC INSTR
         SPACE
         EX    R9,MOVEREV     MOVE IN THE REVERSING STRING
         EX    R9,TRANREV     REVERSE THE STRING
         SPACE 2
***********************************************************************
*                                                                     *
* GO BACK TO PL/I                                                     *
*                                                                     *
***********************************************************************
         SPACE
         REXIT
         EJECT
***********************************************************************
*                                                                     *
*                            CONSTANT DATA                            *
*                                                                     *
***********************************************************************
         SPACE
MOVEREV  MVC   0(*-*,R8),0(R15)      MOVE REVERSING STRING
TRANREV  TR    0(*-*,R8),0(R7)       REVERSE STRING
         SPACE 2
REVERSES DC    XL16'FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0'
         DC    XL16'EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0'
         DC    XL16'DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0'
         DC    XL16'CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0'
         DC    XL16'BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0'
         DC    XL16'AFAEADACABAAA9A8A7A6A5A4A3A2A1A0'
         DC    XL16'9F9E9D9C9B9A99989796959493929190'
         DC    XL16'8F8E8D8C8B8A89888786858483828180'
         DC    XL16'7F7E7D7C7B7A79787776757473727170'
         DC    XL16'6F6E6D6C6B6A69686766656463626160'
         DC    XL16'5F5E5D5C5B5A59585756555453525150'
         DC    XL16'4F4E4D4C4B4A49484746454443424140'
         DC    XL16'3F3E3D3C3B3A39383736353433323130'
         DC    XL16'2F2E2D2C2B2A29282726252423222120'
         DC    XL16'1F1E1D1C1B1A19181716151413121110'
         DC    XL16'0F0E0D0C0B0A09080706050403020100'
         SPACE 5
***********************************************************************
*                                                                     *
* PLI DSECT                                                           *
*                                                                     *
***********************************************************************
PLIPARMS DSECT
PLIFROM  DS    A            POINTS TO SOURCE PARM LOCATOR DESCRIPTOR
PLITO    DS    A            POINTS TO TARGET PARM LOCATOR DESCRIPTOR
         SPACE 3
         SYMBAR MODE=DEC
         END
