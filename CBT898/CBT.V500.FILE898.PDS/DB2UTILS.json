{"INMR01": {"INMLRECL": 80, "INMFNODE": "TSTMVS01", "INMFUID": "ALEX", "INMTNODE": "TSTMVS01", "INMTUID": "ALEX", "INMFTIME": "20130904132636000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1528436, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 27920, "INMRECFM": "FB", "INMDIR": 23, "INMDSNAM": "AKOS.DB2.UTILS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1528436, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1528436, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"AKOS.DB2.UTILS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27920, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 128, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "130247", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\n'", "DS1LSTAR": "b'\\x00\\x1f\\x04'", "DS1TRBAL": "b's&'"}, "COPYR2": {"deb": "b'\\x02\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\r\\xa0\\x00\\x04u]`'", "extents": ["b'\\x02\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\r\\xa0\\x00\\x04u]`'", "b'X\\xf3g\\x00\\x00\\x00\\x02\\xf3\\x00\\x05\\x02\\xf5\\x00\\x04\\x00\\x1e'", "b'X\\xf3g\\x00\\x00\\x00\\x02\\xf5\\x00\\x05\\x02\\xf5\\x00\\x0e\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$INDEX": {"ttr": 7939, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00U\\x01\\x020\\x1f\\x01\\x13$\\x7f\\x08%\\x00h\\x001\\x00\\x00\\xc1\\xd3\\xc5\\xe7@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2002-10-28T00:00:00", "modifydate": "2013-09-04T08:25:55", "lines": 104, "newlines": 49, "modlines": 0, "user": "ALEX"}, "text": "\u00a6 Member  \u00a6 Description         (Enter \"INDEX ?\" command for more info.)\n+---------+---------------------------------------------------------------------\n\u00a6$$$INDEX \u00a6Index gen'd by Alex (ALEX) at 08:22 on 04 Sep 2013..\n\u00a6RDB20340 \u00a6R) DB2 tablespace/indexspace filter\n\u00a6R0       \u00a6R) DB2 utilities invoker\n\u00a6R0$XMIT  \u00a6\n\u00a6R0CHKDAT \u00a6R) DB2 Utilities CHECK Data\n\u00a6R0CHKIX  \u00a6R) DB2 Utilities CHECK Index\n\u00a6R0COPY   \u00a6R) DB2 Utilities COPY function\n\u00a6R0CSTRNG \u00a6R) DB2 Utilities change string routine\n\u00a6R0D      \u00a6R) DB2 Utilities mass change edit macro\n\u00a6R0DBSUM  \u00a6R) DB2 Utilities Get_DB_summary\n\u00a6R0DEBUG  \u00a6R) DB2 Utilities Turn trace on/off\n\u00a6R0DIST   \u00a6\n\u00a6R0DIST1  \u00a6j) DB2 utilities distribution JCL\n\u00a6R0DRVR   \u00a6R) DB2 utilities driver\n\u00a6R0DRVR#  \u00a6\n\u00a6R0DSNRX  \u00a6R) DB2 Utilities DSNREXX API interface\n\u00a6R0EDTL   \u00a6R) DB2 utilities Eligible Device table list\n\u00a6R0HELP   \u00a6R) DB2 utilities dynamic help text\n\u00a6R0HELP#  \u00a6\n\u00a6R0HELPBK \u00a6R) DB2 utilities dynamic help text backup\n\u00a6R0HELPP  \u00a6\n\u00a6R0HELPPF \u00a6R) DB2 Utilities help PF key assignment routine\n\u00a6R0JCS    \u00a6S)\n\u00a6R0JOBCRD \u00a6R) DB2 Utilities jobcard parameter processor\n\u00a6R0J01S   \u00a6S)\n\u00a6R0J10S   \u00a6S)\n\u00a6R0J20S   \u00a6S)\n\u00a6R0J30S   \u00a6S)\n\u00a6R0J31S   \u00a6S)\n\u00a6R0LDEF   \u00a6R) DB2 Utilities LISTDEF processor\n\u00a6R0LISTM  \u00a6R) DB2 Utilities member selection list\n\u00a6R0LOAD   \u00a6R) DB2 Utilities LOAD function\n\u00a6R0MIGRAT \u00a6\n\u00a6R0MODIFY \u00a6R) DB2 Utilities MODIFY function\n\u00a6R0PERFLK \u00a6R) DB2 Utilities PERFQ like parameter table build\n\u00a6R0PERFQ  \u00a6R) DB2 Utilities PERFORMANCE QUERY function\n\u00a6R0QUIESC \u00a6R) DB2 Utilities QUIESCE function\n\u00a6R0REBIX  \u00a6R) DB2 Utilities REBUILD INDEX function\n\u00a6R0RECOVR \u00a6R) DB2 Utilities RECOVER function\n\u00a6R0REORG  \u00a6R) DB2 utilities REORG function\n\u00a6R0RUNSTS \u00a6R) DB2 Utilities RUNSTATS function\n\u00a6R0SITE$  \u00a6R) DB2 Utilities site defaults (not up to date)\n\u00a6R0STATS  \u00a6R) DB2 Utilities new member ISPF stats creator\n\u00a6R0T      \u00a6\n\u00a6R0TEMPL  \u00a6R) DB2 Utilities TEMPLATE processor\n\u00a6R0UNLOAD \u00a6R) DB2 Utilities UNLOAD function\n\u00a6R0VALCOP \u00a6R) DB2 Utilities validate 'COPY' dataset routine\n\u00a6R0VALTSP \u00a6R) DB2 Utilities validate TS/IX etc... tables\n\u00a6R0VRLDEF \u00a6\n\u00a6R0WHOME  \u00a6R) DB2 user identifier and greeter\n\u00a6R0WORDAT \u00a6R) Word at column position locator\n\u00a6R010P    \u00a6P)\n\u00a6R012PY   \u00a6P)\n\u00a6R014P    \u00a6P)\n\u00a6R014S    \u00a6S)\n\u00a6R0141P   \u00a6P)\n\u00a6R0142P   \u00a6P)\n\u00a6R0143P   \u00a6P)\n\u00a6R0144P   \u00a6P)\n\u00a6R0145P   \u00a6P)\n\u00a6R020P    \u00a6P)\n\u00a6R022P    \u00a6P)\n\u00a6R030P    \u00a6P)\n\u00a6R040P    \u00a6P)\n\u00a6R050P    \u00a6P)\n\u00a6R051P    \u00a6P)\n\u00a6R052P    \u00a6P)\n\u00a6R053P    \u00a6P)\n\u00a6R054P    \u00a6P)\n\u00a6R060P    \u00a6P)\n\u00a6R061P    \u00a6P)\n\u00a6R0611P   \u00a6P)\n\u00a6R062P    \u00a6P)\n\u00a6R063P    \u00a6P)\n\u00a6R064P    \u00a6P)\n\u00a6R070P    \u00a6P)\n\u00a6R071P    \u00a6P)\n\u00a6R072P    \u00a6P)\n\u00a6R073P    \u00a6P)\n\u00a6R074P    \u00a6P)\n\u00a6R075P    \u00a6P)\n\u00a6R080P    \u00a6P)\n\u00a6R090P    \u00a6P)\n\u00a6R091P    \u00a6P)\n\u00a6R092P    \u00a6P)\n\u00a6R093P    \u00a6P)\n\u00a6R100P    \u00a6P)\n\u00a6R101P    \u00a6P)\n\u00a6R102P    \u00a6P)\n\u00a6R103P    \u00a6P)\n\u00a6R120P    \u00a6P)\n\u00a6R121P    \u00a6P)\n\u00a6R122P    \u00a6P)\n\u00a6R123P    \u00a6P)\n\u00a6R130P    \u00a6P)\n\u00a6R131P    \u00a6P)\n\u00a6R132P    \u00a6P)\n\u00a6R133P    \u00a6P)\n\u00a6R140P    \u00a6P)\n\u00a6R140TP   \u00a6P)\n\u00a6R141TP   \u00a6P)\n\u00a6R150P    \u00a6P)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RDB20340": {"ttr": 257, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01#\\x00\\x07\\x01\\x02!\\x1f\\x01\\x020_\\t)\\x01s\\x01H\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.35", "flags": 0, "createdate": "2002-07-30T00:00:00", "modifydate": "2002-11-01T09:29:07", "lines": 371, "newlines": 328, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------ooo000OOOO000ooo--------------------------*/\n/*                                                                    */\n/* Program - RDB20340                                                 */\n/* Alias   - DB2UTIL                                                  */\n/* Purpose - To generate DB2 utility parms & jcl for given databases  */\n/*         - Special for jobs submitted via CONTROL/M                 */\n/*                                                                    */\n/* The following files have to be pre-allocated prior to invocation:  */\n/*         UTILPARM     - Input options                               */\n/*         LISTDEF      - Output from the DB2 LISTDEF command         */\n/*         OUTLIST      - List of tablespaces to be copied            */\n/*                                                                    */\n/* Input options:                                                     */\n/*         SYSTEM       - DB2 subsystem ( mandatory )                 */\n/*         UTILITY      - Opretion being performed. Default is spaces */\n/*                        which will cause the bypass of last_copy    */\n/*                        checking (\"Ignore\" eyecatcher inserted in   */\n/*                        AUDIT report.                               */\n/*         MIGRATED     - Set to 'PROCESS' to force processing of     */\n/*                        migrated datasets. Default is NO-PROCESS.   */\n/*         LAST_COPY    - Number of hours since the last imagecopy    */\n/*                        NOTE - Only used for \"COPY\" process.        */\n/*                      - (Default = 23.)                             */\n/*         DEBUG        - DEBUG=YES/AUDIT or blank. YES gives full    */\n/*                        REXX trace. Audit gicves a display of data  */\n/*                        processed and results.                      */\n/*         ERROR_RC     - Return code to exit with in case of error.  */\n/*                      - (Default = 1.)                              */\n/*                                                                    */\n/*--------------------------------------------------------------------*/\n    Parse Upper Arg array 'DEBUG=' debug  .\n\n    system    =\n    last_copy = 23                          /* Last copy - hours since*/\n    error_rc  = 1\n    debug     =\n    utility   = 'MISSING'\n    mig_proc  = 'NO-PROCESS'\n\n/*\nAddress TSO\n\"alloc F(UTILPARM) DA('TPCICS.C838704.$DB2.PARM') SHR REU\"\n\"alloc F(LISTDEF)  DA('TPCICS.C838704.$DB2.LIST') SHR REU\"\n\"alloc F(OUTLIST)  DA('TPCICS.C838704.$DB2.OUTLIST') SHR REU\"\n*/\n\n\n    Call read_parm\n    Call print_parm\n    If debug = 'YES' Then Do\n        Trace r\n        x = Msg('On')\n    End\n    Else x = Msg('Off')\n    Call read_listdef\n\n/*--------------------------------------------------------------------*/\n/*  Activate the REXX SQL interface routine                           */\n/*--------------------------------------------------------------------*/\n    'SUBCOM DSNREXX'                /* Host cmd mode available?  */\n    If rc Then,                     /* if not, make it available */\n        s_rc = RXSUBCOM('ADD','DSNREXX','DSNREXX')\n    Address DSNREXX\n    \"CONNECT\" system\n\n/*--------------------------------------------------------------------*/\n/*  Build the DSN commands statements                                 */\n/*--------------------------------------------------------------------*/\n    Address TSO\n    \"NEWSTACK\"\n    Queue '    'ldef_list\n    Do i=ld_p To listdef.0\n        If Word(listdef.i,1) /= 'INCLUDE' Then Iterate\n        Parse VAR listdef.i . tty database '.' tspace . '(' partno ')' .\n        If Datatype(partno) = 'NUM' Then Do\n            partno = partno+0\n            xtra = 'PART('partno')'\n        End\n        Else Do\n            partno = 0\n            xtra   =\n        End\n        If #database /= database Then Do\n            \"NEWSTACK\"\n            Queue '-DISPLAY DB('database') SPACE(*) RESTRICT'\n            Queue 'END'\n            restrict = Get_db_restrict()\n            If debug = 'AUDIT' Then,\n                Say restrict '-DISPLAY DB('database') SPACE(*) RESTRICT'\n            \"DELSTACK\"\n            #database = database\n        End\n        If restrict Then Do\n            \"NEWSTACK\"\n            Queue '-DISPLAY DB('database') SPACE('tspace') LIMIT(*)' xtra\n            Queue 'END'\n            dbsum = Get_db_summary()\n            If debug = 'AUDIT' Then Say dbsum,\n                '-DISPLAY DB('database') SPACE('tspace') LIMIT(*)' xtra\n            \"DELSTACK\"\n        End\n        Else Do\n            dbsum  = 0\n            status = \"'OK2COPY'\"\n        End\n        r_count = '?'\n        If dbsum = 0 Then Do\n            adr@ = Address()\n            Address DSNREXX\n\n            If mig_proc /= 'NO-PROCESS' Then li = 0\n            Else li = Check_if_migrated()\n            If li = 0 & utility = 'COPY' Then,\n                 li = Check_last_imagecopy()\n\n            Address(adr@)\n            If li = 0 Then Queue '            'Strip(listdef.i)\n        End\n        If debug = 'AUDIT' Then Do\n            If utility /= 'COPY' & Datatype(li) = 'NUM' Then li = 'Ignored'\n            Say '  ' dbsum 'space =' Substr(tspace,1,8) 'part('partno')',\n                'status =' Substr(status,1,10) 'Last-copy =' li\n        End\n    End\n\n    If Queued() = 1 Then Do\n        \"DELSTACK\"\n        Say ' '\n        Say '******************** Error ****************************'\n        Say ' '\n        Say 'No tablespaces availalbe for COPY.'\n        Say 'Processing halted with RC='error_rc'.'\n        Say ' '\n        Say '*******************************************************'\n        zispfrc = error_rc;Address ISPEXEC \"VPUT (zispfrc)\"\n        Exit error_rc\n    End\n\n    Queue ''\n    Address TSO \"EXECIO * DISKW OUTLIST ( FINIS\"\n\n    If debug = 'AUDIT' Then Do\n        Address TSO \"EXECIO * DISKR OUTLIST (STEM line. FINIS\"\n        Do i=1 To line.0;Say Right(i,3)')' Strip(line.i,'t');end\n    End\n    If Queued() > 0 Then \"DELSTACK\"\n\n    Address DSNREXX \"DISCONNECT\"\n\n/*\nAddress TSO \"FREE F(UTILPARM,LISTDEF,OUTLIST)\"\n*/\n\n    Exit 0\n\n/*--------------------------------------------------------------------*/\n/*  Obtain the tablespaces for given database from the -DISPLAY       */\n/*  command.                                                          */\n/*  Parse the data for '------' to identify the start of the          */\n/*  tablespace names and '*******' for the end.                       */\n/*--------------------------------------------------------------------*/\nGet_db_restrict:\n    msg = Msg('On');x = Outtrap('list.')\n    \"DSN SYSTEM(\"system\")\"\n    x = Outtrap('Off');msg = Msg(msg)\n\n    Do j=1 To list.0\n        If Word(list.j,1) = '--------' Then Leave\n    End\n    j = j+1\n    If Strip(list.j) = '******** NO SPACES FOUND' Then Return 0\n    Else                                               Return 1\n\n/*--------------------------------------------------------------------*/\n/*  Obtain the tablespaces for given database from the -DISPLAY       */\n/*  command.                                                          */\n/*  Parse the data for '------' to identify the start of the          */\n/*  tablespace names and '*******' for the end.                       */\n/*--------------------------------------------------------------------*/\nGet_db_summary:\n    msg = Msg('On');x = Outtrap('list.')\n    \"DSN SYSTEM(\"system\")\"\n    x = Outtrap('Off');msg = Msg(msg)\n\n    Do j=1 To list.0\n        If Word(list.j,1) = '--------' Then Leave\n        If Word(list.j,1) = 'DSNT362I' Then Do\n            Parse VAR list.j . 'STATUS =' status .\n            If status = 'STOP' Then Return 1\n        End\n    End\n    j = j+1\n    Parse VAR list.j . type p_n status .\n    If Datatype(p_n) = 'CHAR' Then status = p_n\n    Select\n        When status   = 'RW'       Then NOP\n        When status   = 'RO'       Then NOP\n        When status   = 'RW,COPY'  Then NOP\n        When status   = 'RO,COPY'  Then NOP\n        When status   = 'RW,ICOPY' Then NOP\n        When status   = 'RO,ICOPY' Then NOP\n        Otherwise Return 1\n    End\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*       Purpose - To read input parms and validate the input parms   */\n/*--------------------------------------------------------------------*/\nRead_parm:\n    \"EXECIO * DISKR UTILPARM ( STEM list. FINIS\"\n\n    Do i=1 To list.0\n        Parse Upper VAR list.i keyword '=' key_value .\n        Select\n            When keyword = 'LAST_COPY'  Then last_copy = key_value\n            When keyword = 'SYSTEM'     Then system    = key_value\n            When keyword = 'UTILITY'    Then utility   = key_value\n            When keyword = 'ERROR_RC'   Then error_rc  = key_value\n            When keyword = 'DEBUG'      Then debug     = key_value\n            When keyword = 'MIGRATED'   Then mig_proc  = key_value\n            Otherwise NOP\n        End\n    End\n\n    If system = '' Then Do\n        Call print_parm\n        Say ' '\n        Say '******************** Error ****************************'\n        Say ' '\n        Say 'Please provide the DB2 subsystem name.'\n        Say 'Processing halted with RC='error_rc'.'\n        Say ' '\n        Say '*******************************************************'\n        zispfrc = error_rc;Address ISPEXEC \"VPUT (zispfrc)\"\n        Exit error_rc\n    End\n\n    Return\n\n/*--------------------------------------------------------------------*/\n/*       Purpose - To read input parms and validate the input parms   */\n/*--------------------------------------------------------------------*/\nprint_parm:\n    Say 'Runtime parameters:'\n    Say '-------------------'\n    Say 'DB2 subsystem SYSTEM      =' system\n    Say '              UTILITY     =' utility\n    Say '              LAST_COPY   =' last_copy '(hours)'\n    Say '              MIGRATED    =' mig_proc\n    Say '              ERROR_RC    =' error_rc\n    Say '              DEBUG       =' debug\n    Say ' '\n\n    If debug = 'AUDIT' Then Do\n        Say Copies('-',65)\n        Say 'With AUDIT on, the following displays will be presented:'\n        Say '1. 1(restricted) 0(non-restricted) followed by the \"display\"'\n        Say '   command used.'\n        Say '2. If there are restrictions:'\n        Say '   \"Display\" command used for the table/index space with the'\n        Say '   return code.'\n        Say '3. If NO-PROCESS is active for migrated datasets (default):'\n        Say '   The \"sysreason\" followed by the dataset name. Where the'\n        Say '   common reasons are:'\n        Say '     5 - Not catalogued.'\n        Say '     9 - Migrated dataset.'\n        Say '    12 - VSAM dataset (OK reason).'\n        Say '    25 - Migrated to non-DASD.'\n        Say '4. The name of the space (table/index) partlevel, status and'\n        Say '   last-copy value (actually the number of copies since the'\n        Say '   number of hours on the last-copy parameter. The staus will'\n        Say '   be set to \"OK2COPY\" if' restrictions are off.'\n        Say '   This last-copy value may be altered to \"migrated/not-cat\"'\n        Say '   depending on the dataset status returned from the migration'\n        Say '   determination processing.'\n        Say '   For non \"COPY\" functions the last-copy will be changed to'\n        Say '   \"Ignored\" if the space is not migrated or not catalogued.'\n        Say Copies('-',65)\n        Say ' '\n    End\n\n    Return\n\n/*--------------------------------------------------------------------*/\n/*  Read OBJECTS  output from the LISTDEF command.                    */\n/*--------------------------------------------------------------------*/\nread_listdef:\n    \"EXECIO * DISKR LISTDEF ( STEM listdef. FINIS\"\n\n    Do i=1 to listdef.0\n        If ( Index(listdef.i,'DSNU1010I') > 0  &,\n             Index(listdef.i,'DSNUGPVV')  > 0 )  Then Leave\n    End\n\n    If i = listdef.0 Then Do\n        Say '******************** Error ****************************'\n        Say ' '\n        Say 'Unable to find the start of the list expansion'\n        Say 'Processing halted with RC='error_rc'.'\n        Say ' '\n        Say '*******************************************************'\n        zispfrc = error_rc;Address ISPEXEC \"VPUT (zispfrc)\"\n        Exit error_rc\n    End\n\n    ld_p = i+1\n    Parse VAR listdef.ld_p v1 v2 .\n    ldef_list = v1 v2\n    ld_p = ld_p +1\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  To check for existance of image copy within the last \"x\" hours.   */\n/*--------------------------------------------------------------------*/\nCheck_last_imagecopy:\n    sqlstmt = \"SELECT COUNT(*)\",\n             \"FROM SYSIBM.SYSCOPY\",\n             \"WHERE DBNAME = '\"database\"'\",\n             \"AND   TSNAME = '\"tspace\"'\",\n             \"AND   DSNUM  IN (0,\"partno\")\",\n             \"AND   ICTYPE = 'F'\",\n             \"AND   TIMESTAMP > CURRENT TIMESTAMP -\",\n             last_copy \"HOURS\"\n    \"EXECSQL PREPARE S1 FROM :sqlstmt\"\n    \"EXECSQL DECLARE C1 CURSOR FOR S1\"\n    \"EXECSQL OPEN C1\"\n    If sqlcode = 0 Then Do\n        EXECSQL \"FETCH C1 INTO :r_count\"\n        EXECSQL \"CLOSE C1\"\n    End\n\n    Return r_count\n\n/*--------------------------------------------------------------------*/\n/*  To check for existance of image copy within the last \"x\" hours.   */\n/*--------------------------------------------------------------------*/\nCheck_if_migrated:\n    If tty = 'TABLESPACE' Then,\n        sqlstmt = \"SELECT VCATNAME,IPREFIX\",\n                 \"FROM SYSIBM.SYSTABLEPART\",\n                 \"WHERE DBNAME = '\"database\"'\",\n                 \"AND   TSNAME = '\"tspace\"'\"\n    Else\n        sqlstmt = \"SELECT A.VCATNAME,A.IPREFIX\",\n                 \"FROM SYSIBM.SYSINDEXPART A,\",\n                 \"     SYSIBM.SYSINDEXES   B\",\n                 \"WHERE  A.IXNAME     = B.NAME\",\n                 \"AND    A.IXCREATOR  = B.CREATOR\",\n                 \"AND    B.DBNAME     = '\"database\"'\",\n                 \"AND    B.INDEXSPACE = '\"tspace\"'\"\n    \"EXECSQL PREPARE S1 FROM :sqlstmt\"\n    \"EXECSQL DECLARE C1 CURSOR FOR S1\"\n    \"EXECSQL OPEN C1\"\n    If sqlcode = 0 Then Do\n        EXECSQL \"FETCH C1 INTO :vcatname,:ipref\"\n        EXECSQL \"CLOSE C1\"\n    End\n\n    hlq = Strip(vcatname)'.DSNDBD.'database'.'tspace\n    If partno = 0 Then partno = 1\n    dsn = hlq\".\"ipref\"0001.A\"Right(partno,3,'0')\n    x = LISTDSI(\"'\"dsn\"'\" volume \"DIRECTORY NORECALL\")\n    If debug = 'AUDIT' Then Say '  ' Sysreason+0 'DSN   =' dsn\n    If sysreason = 9 | sysreason = 25 Then Return 'Migrated'\n    If sysreason = 5 Then Return 'Not-catalogued'\n\n    Return 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0": {"ttr": 260, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x01\\x02\\'\\x7f\\x01\\x022/\"\\x11\\x00V\\x00C\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xd9\\xc7\\xf1@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2002-10-04T00:00:00", "modifydate": "2002-11-18T22:11:00", "lines": 86, "newlines": 67, "modlines": 0, "user": "SYSPRG1"}, "text": "/******************************** REXX ********************************/\n/*--------------------------ooo000OOOO000ooo--------------------------*/\n/*                                                                    */\n/* Program - R0                                                       */\n/*                                                                    */\n/* Purpose - To generate DB2 utility parms & jcl for given databases  */\n/*         - Special for jobs submitted via CONTROL/M                 */\n/*                                                                    */\n/* The following files will be created if they do not exist:          */\n/*         hlq.LISTDEF  - LISTDEF members. 'hlq' returned by R0SITE$  */\n/*         hlq.TEMPLATE - TEMPLATE members.                           */\n/*                                                                    */\n/* A site default templates dataset should be created and populated   */\n/* and pointed to be variable TEMPSDEF in R0SITE$.                    */\n/*                                                                    */\n/* Members required to package this feature:                          */\n/*   REXX:                                                            */\n/*         R0           - This driver                                 */\n/*                        Note this driver doubles up as a multi      */\n/*                        purpose edit macro.                         */\n/*         R0SITE       - Customise member R0site$ using panels.      */\n/*         R0SITE$      - Customise site default variables            */\n/*         R0WHOME      - Routine to identify user.                   */\n/*         R0HELP       o Dynamic HELP text.                          */\n/*         HELPDRVR     o Routine to drive the help member            */\n/*         HELPTT       o Tutorial on how to build dynamic help text. */\n/*         HELPTN       o Dynamic Tutorial navigation HELP text.      */\n/*                                                                    */\n/*   Panel:                                                           */\n/*         HELPDRVP     o Panel for dynamic help display              */\n/*         R0*P         - Action entry panel                          */\n/*         R0*PY        - Dynamic LISTDEF parameter entry panel       */\n/*         R0*PH        o Help panels (obsolete)                      */\n/*                                                                    */\n/*   Messages:                                                        */\n/*         GC00         - Generic message member                      */\n/*                                                                    */\n/*   Skeletons:                                                       */\n/*         R0S*         - Skeletons                                   */\n/*         R0*S         - Skeletons                                   */\n/*                                                                    */\n/*--------------------------------------------------------------------*/\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    hlq = 'AKOS'\n\n    If Libdef('On') Then \"SELECT CMD(%R0DRVR NEWAPPL(DB2U)\"\n    x=Libdef('Off')\n    Return 0\n\nLibdef:Arg act\n    x = Msg('Off')\n    If act = 'ON' Then Do\n        ispclib = hlq'.DB2.UTILS'\n        ispplib = hlq'.DB2.UTILS'\n        ispslib = hlq'.DB2.UTILS'\n        ispmlib = hlq'.DB2.UTILS'\n        ispllib = hlq'.$LOAD'\n        isptlib = hlq'.ISPTLIB'\n\n        Address TSO \"ALLOC F(HELPDRVR) DA('\"ispclib\"') SHR REU\"\n        Address TSO \"ALTLIB ACTIVATE APPLICATION(EXEC) DA('\"ispclib\"')\"\n        If rc = 0 Then,\n            \"LIBDEF ISPPLIB DATASET ID('&ISPPLIB') STACK\"\n        If rc = 0 Then,\n            \"LIBDEF ISPSLIB DATASET ID('&ISPSLIB') STACK\"\n        If rc = 0 Then,\n            \"LIBDEF ISPMLIB DATASET ID('&ISPMLIB') STACK\"\n        If rc = 0 Then,\n            \"LIBDEF ISPLLIB DATASET ID('&ISPLLIB') STACK\"\n        If rc = 0 Then,\n            \"LIBDEF ISPTLIB DATASET ID('&ISPTLIB') STACK\"\n        If rc = 0 Then Return 1\n    End\n    Address TSO \"FREE  F(HELPDRVR)\"\n    Address TSO \"ALTLIB DEACTIVATE APPLICATION(EXEC)\"\n    \"LIBDEF ISPPLIB\"\n    \"LIBDEF ISPSLIB\"\n    \"LIBDEF ISPMLIB\"\n    \"LIBDEF ISPLLIB\"\n    \"LIBDEF ISPTLIB\"\n    Return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0$XMIT": {"ttr": 262, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x01\\x02(O\\x01\\x022/\\x15\\x18\\x00;\\x00\"\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xd9\\xc7\\xf1@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2002-10-11T00:00:00", "modifydate": "2002-11-18T15:18:00", "lines": 59, "newlines": 34, "modlines": 0, "user": "SYSPRG1"}, "text": "//C838704I JOB TPCICS001,'$#@EXIMP',\n//             CLASS=B,COND=(4,LT),\n//*    RESTART=STEP2,\n//             MSGCLASS=X,\n//             NOTIFY=&SYSUID\n//*\n//*   EX 'TPCICS.C838704.$($#@EXIMP)'\n//*\n//STEP0    EXEC PGM=IEFBR14\n//XMO1     DD DISP=(MOD,DELETE),DSN=TPCICS.C838704.$R0.PDS,\n//            SPACE=(CYL,(0,0)),UNIT=SYSALLDA\n//XMO2     DD DISP=(MOD,DELETE),DSN=TPCICS.C838704.$R0.XMIT,\n//            SPACE=(CYL,(0,0)),UNIT=SYSALLDA\n//STEP1    EXEC PGM=IEBCOPY,REGION=2048K\n//SYSPRINT DD  SYSOUT=*\n//XMI1     DD DISP=SHR,DSN=IVDB2.DB2UTILS.EXEC\n//XMI2     DD DISP=SHR,DSN=IVDB2.DB2UTILS.PANELS\n//XMI3     DD DISP=SHR,DSN=IVDB2.DB2UTILS.SKELS\n//XMI4     DD DISP=SHR,DSN=TPCICS.C838704.$$\n//XMO      DD DISP=(NEW,CATLG),DSN=TPCICS.C838704.$R0.PDS,\n//            SPACE=(CYL,(20,20,100),RLSE),UNIT=SYSALLDA,\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=0,DSORG=PO)\n//SYSIN    DD  *\n COPY OUTDD=XMO,INDD=(XMI1,XMI2,XMI3)\n COPY OUTDD=XMO,INDD=((XMI4,R))\n    SELECT MEMBER=HELPDRVP\n    SELECT MEMBER=HELPDRVR\n    SELECT MEMBER=HELPDRVS\n    SELECT MEMBER=HELPTT\n    SELECT MEMBER=HELPTN\n*\n    SELECT MEMBER=R0$XMIT\n    SELECT MEMBER=R0DIST\n    SELECT MEMBER=R0DIST1\n    SELECT MEMBER=R0DRVR\n    SELECT MEMBER=R0PERFLK\n    SELECT MEMBER=R0PERFQ\n    SELECT MEMBER=R0T\n    SELECT MEMBER=\n    SELECT MEMBER=\n    SELECT MEMBER=\n    SELECT MEMBER=\n    SELECT MEMBER=\n    SELECT MEMBER=\n    SELECT MEMBER=\n    SELECT MEMBER=\n    SELECT MEMBER=\n    SELECT MEMBER=\n    SELECT MEMBER=\n/*\n//*\n//STEP2  EXEC PGM=IKJEFT01,COND=(4,LT)\n//SYSOUT   DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//XMI1     DD DISP=(OLD,DELETE),DSN=TPCICS.C838704.$R0.PDS\n//SYSTSIN  DD *\n XMIT A02.C838704 DA('TPCICS.C838704.$R0.PDS') -\n      OUTDSNAME('TPCICS.C838704.$R0.XMIT')\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "R0CHKDAT": {"ttr": 264, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00$\\x01\\x02)_\\x01\\x021_\\x13\\x07\\x00\\x85\\x00\\x87\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2002-10-22T00:00:00", "modifydate": "2002-11-11T13:07:24", "lines": 133, "newlines": 135, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process Check Data parameter entry                                */\n/*--------------------------------------------------------------------*/\nArg oper1,utillib,templib,tempsdef,debug\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    \"VGET (chkdav,panelv,ssid,sqlid) SHARED\"\n    \"VGET (\"chkdav panelv\" nexto) SHARED\"\n    table = 'CD'Time('s')\n    genolist = 'OFF'\n\ncheckda_tss1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL80) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,checkda_tss1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('chkdav');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal checkda_tss1;End\n\n    If rc /= 0 Then Do\n        \"VPUT (\"chkdav\") SHARED\"\n        gc009 = oper1 \"entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        csr1=;csrp1=\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '9 /OPEN')\n        Signal checkda_tss1\n    End\n\n    ret_scr = 0\n/*--------------------------------------------------------------------*/\n/*  If tablespace has not been validated or has changed, do it.       */\n/*--------------------------------------------------------------------*/\n    If r_table_ts /= chkddbnm || chkdtspc || chkdpart Then,\n        If R0valtsp('TS',chkddbnm,chkdtspc,chkdpart) Then Do\n            csr1 = 'CHKDDBNM'\n            Signal checkda_tss1\n        End\n    r_table_ts = chkddbnm || chkdtspc || chkdpart\n\n    x = checkda_ver_common()\n    If ret_scr Then Signal checkda_tss1\n\n    tspace = chkddbnm'.'chkdtspc\n    If chkdpart = '' Then partno =\n    Else partno = 'PART' chkdpart +0\n\nReturn0:\n    \"VPUT (\"chkdav\" tspace partno genolist) SHARED\"\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Comon rebldinx field verifications:                               */\n/*--------------------------------------------------------------------*/\ncheckda_ver_common:\n    If chkddevt = '*' Then Do\n        gc009 = 'Device type entry for Load operation.'\n        \"SETMSG MSG(GC009)\"\n        x = R0edtl('DASD',10,10,debug)\n        If Datatype(x) = 'CHAR' | x > 20 Then chkddevt = x\n        ret_scr=1\n        Return 4\n    End\n    Else Do\n        x = R0edtl('LIST',,,debug)\n        If Wordpos(chkddevt,x) = 0 Then Do\n            gc009 = 'Invalid devive type. Suggest enter \"*\" for selection list.'\n            \"SETMSG MSG(GC009)\"\n            csr1 = 'chkddevt'\n            ret_scr=1\n            Return 4\n        End\n    End\n\n    If chkdeddn = '*' Then Do\n        gc009 = 'Template processing for ERRORDDN Check Data.'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,tempsdef,'$TTY','ND')\n        x = R0listm(table,templib,'$TTY',,'EXIST')\n        If Datatype(x) = 'CHAR' Then Parse VAR x chkdeddn .\n        ret_scr=1\n    End\n    Else If chkdeddn = '/' Then Do\n             xmsg = 'ERRORDDN Check Data'\n             x = R0templ(templib,tempsdef,xmsg,'chkdeddn')\n             If Datatype(x) = 'CHAR' Then chkdeddn = x\n             ret_scr=1\n         End\n    xmsg=Msg('Off')\n    If Sysdsn(\"'\"templib\"(\"chkdeddn\")'\") /= 'OK' Then,\n        If Sysdsn(\"'\"tempsdef\"(\"chkdeddn\")'\") /= 'OK' Then Do\n            gc009 = 'Template not found.'\n            \"SETMSG MSG(GC009)\"\n            csr1  = 'CHKDEDDN'\n            ret_scr=1\n            xmsg=Msg(xmsg)\n            Return 4\n        End\n    xmsg=Msg(xmsg)\n    If chkdwddn = '*' Then Do\n        gc009 = 'Template processing for WORKDDN Check Data.'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,tempsdef,'$TTY','ND')\n        x = R0listm(table,templib,'$TTY',,'EXIST')\n        If Datatype(x) = 'CHAR' Then Parse VAR x chkdwddn .\n        ret_scr=1\n    End\n    Else If chkdwddn = '/' Then Do\n             xmsg = 'WORKDDN Check Data'\n             x = R0templ(templib,tempsdef,xmsg,'chkdwddn')\n             If Datatype(x) = 'CHAR' Then chkdwddn = x\n             ret_scr=1\n         End\n    xmsg=Msg('Off')\n    If Sysdsn(\"'\"templib\"(\"chkdwddn\")'\") /= 'OK' Then,\n        If Sysdsn(\"'\"tempsdef\"(\"chkdwddn\")'\") /= 'OK' Then Do\n            gc009 = 'Template not found.'\n            \"SETMSG MSG(GC009)\"\n            csr1  = 'CHKDWDDN'\n            ret_scr=1\n            xmsg=Msg(xmsg)\n            Return 4\n        End\n    xmsg=Msg(xmsg)\n\n    Return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0CHKIX": {"ttr": 514, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1f\\x00\\x07\\x01\\x021_\\x01\\x021_\\x17\\x03\\x01\\x10\\x01\\x01\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.31", "flags": 0, "createdate": "2002-11-11T00:00:00", "modifydate": "2002-11-11T17:03:07", "lines": 272, "newlines": 257, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process Check Index parameter entry                               */\n/*--------------------------------------------------------------------*/\nArg oper1,utillib,templib,tempsdef,debug\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    \"VGET (chkixv,panelv,ssid,sqlid) SHARED\"\n    \"VGET (\"chkixv panelv\" nexto) SHARED\"\n    table = 'CI'Time('s')\n\ncheckix_scr1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL130) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,checkix_scr1)\n    If rc /= 0 Then Do\n        \"VPUT (\"chkixv\") SHARED\"\n        gc009 = oper1 \"entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        csr1=;csrp1=\n        Return 9\n    End\n    csr1=;csrp1=\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '10  /OPEN')\n        Signal checkix_scr1\n    End\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('chkixv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal checkix_scr1;End\n\n    genolist = 'OFF'\n    opertp = 'CHECK INDEX'\n    Parse VAR zcmd cmd parm1\n    Select\n        When cils /= '' Then Do\n            cils =\n            ulact = 'LS'\n            x = checkix_lss1()\n            If x = 0 Then Signal Return0\n        End\n        When cits /= '' Then Do\n            cits =\n            ulact = 'TS'\n            x = checkix_tss1()\n            opertp = opertp '(ALL) TABLESPACE'\n            If x = 0 Then Signal Return0\n        End\n        When ciix /= '' Then Do\n            ciix =\n            ulact = 'IX'\n            x = checkix_ixs1()\n            If x = 0 Then Signal Return0\n        End\n        Otherwise Signal checkix_scr1\n    End\n    Signal checkix_scr1\n\nReturn0:\n    If chkisrtn /= '' Then sortnum = 'SORTNUM' chkisrtn\n    Else                   sortnum =\n    \"VPUT (\"chkixv\" tspace partno nexto genolist ulact sortnum\",\n           \"opertp) SHARED\"\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Rebuild index from LiStdef                                         */\n/*--------------------------------------------------------------------*/\ncheckix_lss1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL131) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,checkix_lss1)\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('chkixv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal checkix_lss1;End\n\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '10A /OPEN')\n        Signal checkix_lss1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n    If chkildef = '*' Then Do\n        gc009 = 'Listdef processing for Check Index.'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,utillib)\n        If Datatype(x) = 'CHAR' Then chkildef = x\n        Signal checkix_lss1\n    End\n    Else If chkildef = '/' Then Do\n             gc009 = 'Listdef processing for Check Index.'\n             \"SETMSG MSG(GC009)\"\n             x = r0ldef(utillib,'chkildef')\n             If Datatype(x) = 'CHAR' Then chkildef = x\n             Signal checkix_lss1\n         End\n    If Sysdsn(\"'\"utillib\"(\"chkildef\")'\") /= 'OK' Then Do\n        gc009 = Sysdsn(\"'\"utillib\"(\"chkildef\")'\")\n        csr1 = 'chkildef'\n        \"SETMSG MSG(GC009)\"\n        Signal checkix_lss1\n    End\n    xx = R0vrldef(utillib'('chkildef')','IX')\n    If xx /= 0 Then Do\n        gc009 = 'List contains mixture of TABLESPACE and INDEXSPACE.',\n                'Can only have INDEXSPACEs. Please amend the list or',\n                'select an alternative list.'\n        csr1 = 'chkildef'\n        \"SETMSG MSG(GC009)\"\n        Signal checkix_lss1\n    End\n    x = checkix_ver_common()\n    If ret_scr Then Signal checkix_lss1\n    genolist = 'ON'\n    nexto    = 'JCL(JC,J10,J20,J120)'\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Rebuild index from Table Space                                     */\n/*--------------------------------------------------------------------*/\ncheckix_tss1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL132) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,checkix_tss1)\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('chkixv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal checkix_tss1;End\n\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '10B /OPEN')\n        Signal checkix_tss1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n/*--------------------------------------------------------------------*/\n/*  If tablespace has not been validated or has changed, do it.       */\n/*--------------------------------------------------------------------*/\n    If r_table_ts /= chkidbnm || chkispce || chkipart Then,\n        If R0valtsp('TS',chkidbnm,chkispce,chkipart) Then Do\n            csr1 = 'chkidbnm'\n            Signal checkix_tss1\n        End\n    r_table_ts = chkidbnm || chkispce || chkipart\n\n    x = checkix_ver_common()\n    If ret_scr Then Signal checkix_tss1\n\n    tspace = chkidbnm'.'chkispce\n    If chkipart = '' Then partno =\n    Else partno = 'PART' chkipart +0\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Rebuild index from Index Name                                      */\n/*--------------------------------------------------------------------*/\ncheckix_ixs1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL133) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,checkix_ixs1)\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('chkixv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal checkix_ixs1;End\n\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '10C /OPEN')\n        Signal checkix_ixs1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n/*--------------------------------------------------------------------*/\n/*  If tablespace has not been validated or has changed, do it.       */\n/*--------------------------------------------------------------------*/\n    If r_table_ix /= chkicrea || chkindex || chkiptix Then Do\n        If R0valtsp('RB',chkicrea,chkindex,chkiptix) Then Do\n            csr1 = 'CHKICREA'\n            Signal checkix_ixs1\n        End\n        r_table_ix = chkicrea || chkindex || chkiptix\n    End\n\n    x = checkix_ver_common()\n    If ret_scr Then Signal checkix_ixs1\n\n    tspace = chkicrea'.'chkindex\n    If chkiptix = '' Then partno =\n    Else                  partno = 'PART' chkiptix +0\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Comon rebldinx field verifications:                               */\n/*--------------------------------------------------------------------*/\ncheckix_ver_common:\n/*--------------------------------------------------------------------*/\n/*  Break up supplied WHEN parameters in 72 character lots without    */\n/*  splitting words.                                                  */\n/*--------------------------------------------------------------------*/\n    If chkiwddn = '*' Then Do\n        gc009 = 'Template processing for WORKDDN Check Index.'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,tempsdef,'$TTY','ND')\n        x = R0listm(table,templib,'$TTY',,'EXIST')\n        If Datatype(x) = 'CHAR' Then Parse VAR x chkiwddn .\n        ret_scr = 1\n    End\n    Else If chkiwddn = '/' Then Do\n             xmsg = 'WORKDDN Check Index'\n             x = R0templ(templib,tempsdef,xmsg,'chkiwddn')\n             If Datatype(x) = 'CHAR' Then chkiwddn = x\n             ret_scr = 1\n         End\n    xmsg=Msg('Off')\n    If Sysdsn(\"'\"templib\"(\"chkiwddn\")'\") /= 'OK' Then,\n        If Sysdsn(\"'\"tempsdef\"(\"chkiwddn\")'\") /= 'OK' Then Do\n            gc009 = 'Template not found.'\n            \"SETMSG MSG(GC009)\"\n            csr1  = 'CHKIWDDN'\n            ret_scr=1\n            xmsg=Msg(xmsg)\n            Return 4\n        End\n    xmsg=Msg(xmsg)\n    If chkidevt = '*' Then Do\n        gc009 = 'Device type entry for Load operation.'\n        \"SETMSG MSG(GC009)\"\n        x = R0edtl('DASD',10,10,debug)\n        If Datatype(x) = 'CHAR' | x > 20 Then chkidevt = x\n        ret_scr=1\n        Return 4\n    End\n    Else Do\n        x = R0edtl('LIST',,,debug)\n        If Wordpos(chkidevt,x) = 0 Then Do\n            gc009 = 'Invalid devive type. Suggest enter \"*\" for selection list.'\n            \"SETMSG MSG(GC009)\"\n            csr1 = 'chkidevt'\n            ret_scr=1\n            Return 4\n        End\n    End\n\n    Return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0COPY": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00W\\x01\\x02(\\x9f\\x01\\x021\\x8f\\x16\\x01\\x00w\\x00p\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "2002-10-16T00:00:00", "modifydate": "2002-11-14T16:01:57", "lines": 119, "newlines": 112, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process Jobcard                                                   */\n/*--------------------------------------------------------------------*/\nArg oper1,utillib,templib,tempsdef,debug\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    \"VGET (copyv,panelv,ssid,sqlid) SHARED\"\n    \"VGET (\"copyv panelv\") SHARED\"\n    table = 'CO'Time('s')\n\n/*--------------------------------------------------------------------*/\n/*  Process COPY LISTDEF parameter entry                              */\n/*--------------------------------------------------------------------*/\ncopy_scr1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL20) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,copy_scr1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('copyv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal copy_scr1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '2 /OPEN')\n        Signal copy_scr1\n    End\n    ret_scr = 0\n    If copyldef = '*' Then Do\n        gc009 = 'Listdef processing for COPY.'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,utillib)\n        If Datatype(x) = 'CHAR' Then copyldef = x\n        ret_scr = 1\n    End\n    Else If copyldef = '/' Then Do\n             gc009 = 'Listdef processing for COPY.'\n             \"SETMSG MSG(GC009)\"\n             x = r0ldef(utillib,'copyldef')\n             If Datatype(x) = 'CHAR' Then copyldef = x\n             ret_scr = 1\n         End\n    xmsg = Msg('Off')\n    If Sysdsn(\"'\"utillib\"(\"copyldef\")'\") /= 'OK' Then Do\n        gc009 = Sysdsn(\"'\"utillib\"(\"copyldef\")'\")\n        csr1 = 'copyldef'\n        \"SETMSG MSG(GC009)\"\n        xmsg = Msg(xmsg)\n        Signal copy_scr1\n    End\n    If copycddn = '*' Then Do\n        gc009 = 'Template processing for LOCAL copy'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,tempsdef,'$TTY','ND')\n        x = R0listm(table,templib,'$TTY',,'EXIST','')\n        If Datatype(x) = 'CHAR' Then Parse VAR x copycddn .\n        ret_scr = 1\n    End\n    Else If copycddn = '/' Then Do\n             xmsg = 'LOCAL copy'\n             x = R0templ(templib,tempsdef,xmsg,'copycddn')\n             If Datatype(x) = 'CHAR' Then copycddn = x\n             ret_scr = 1\n         End\n    If copyrddn = '*' Then Do\n        gc009 = 'Template selection for REMOTE copy'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,tempsdef,'$TTY','ND')\n        x = R0listm(table,templib,'$TTY',,'EXIST','')\n        If Datatype(x) = 'CHAR' Then Parse VAR x copyrddn .\n        ret_scr = 1\n    End\n    Else If copyrddn = '/' Then Do\n             xmsg = 'REMOTE copy'\n             x = R0templ(templib,tempsdef,xmsg,'copyrddn')\n             If Datatype(x) = 'CHAR' Then copyrddn = x\n             ret_scr = 1\n         End\n    If ret_scr Then Signal copy_scr1\n\n    If Sysdsn(\"'\"utillib\"(\"copyldef\")'\") /= 'OK' Then Do\n        gc009 = Sysdsn(\"'\"utillib\"(\"copyldef\")'\")\n        csr1 = 'COPYLDEF'\n        \"SETMSG MSG(GC009)\"\n        xmsg = Msg(xmsg)\n        Signal copy_scr1\n    End\n    If copycddn /= '' Then,\n        If Sysdsn(\"'\"templib\"(\"copycddn\")'\") /= 'OK' Then,\n            If Sysdsn(\"'\"tempsdef\"(\"copycddn\")'\") /= 'OK' Then Do\n                gc009 = Sysdsn(\"'\"templib\"(\"copycddn\")'\")\n                csr1 = 'copycddn'\n                \"SETMSG MSG(GC009)\"\n                xmsg = Msg(xmsg)\n                Signal copy_scr1\n            End\n    If copyrddn /= '' Then,\n        If Sysdsn(\"'\"templib\"(\"copyrddn\")'\") /= 'OK' Then,\n            If Sysdsn(\"'\"tempsdef\"(\"copyrddn\")'\") /= 'OK' Then Do\n                gc009 = Sysdsn(\"'\"templib\"(\"copyrddn\")'\")\n                csr1 = 'copyrddn'\n                \"SETMSG MSG(GC009)\"\n                xmsg = Msg(xmsg)\n                Signal copy_scr1\n            End\n\n    \"VPUT (\"copyv\") SHARED\"\n    xmsg = Msg(xmsg)\n    Return 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0CSTRNG": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x001\\x01\\x02)\\x7f\\x01\\x02)\\x7f\\x153\\x00%\\x00%\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-10-24T00:00:00", "modifydate": "2002-10-24T15:33:31", "lines": 37, "newlines": 37, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/**********************************************************************/\n/* TRACE r                                                            */\n/*--------------------------ooo000OOOO000ooo--------------------------*/\n/*                                                                    */\n/* Function to change occurances of a string in a string to another   */\n/* string.                                                            */\n/*                                                                    */\n/* Format:                                                            */\n/*     CSTRING(string,from_string,to_string,occurances)               */\n/*                                                                    */\n/*     where:                                                         */\n/*                                                                    */\n/*          string      - Original string                             */\n/*          from_string - Character(string) in original string        */\n/*          to_string   - New value, character(string)                */\n/*          occurances  - Occurances to change. Default is 1, '*'     */\n/*                        changes all occurances.                     */\n/*          start       - Starting column. Default is 1.              */\n/*                                                                    */\n/*--------------------------------------------------------------------*/\n    Parse ARG string,fstrg,tstrg,rep,start,trace\n    Numeric Digits 10\n    If rep = '*' Then rep = 9999999999\n    If Datatype(rep) /= 'NUM' | Index(rep,'.') > 0 Then rep = 1\n    If Datatype(start) /= 'NUM' | Index(start,'.') > 0 Then start = 1\n    fl = Length(fstrg)\n    tl = Length(tstrg)\n    Do While rep > 0\n        start = Index(string,fstrg,start)\n        If start = 0 Then Leave\n        string = Delstr(string,start,fl)\n        string = Insert(tstrg,string,start-1,tl)\n        rep = rep -1\n        start = start + tl\n    End\n    Return string\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R0D": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x03\\x01\\x02%_\\x01\\x020\\x8f\\x13$\\x007\\x00)\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2002-09-12T00:00:00", "modifydate": "2002-11-04T13:24:03", "lines": 55, "newlines": 41, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/**********************************************************************/\n/* TRACE r                                                            */\n/*--------------------------ooo000OOOO000ooo--------------------------*/\n/*                                                                    */\n/*  Add debug lines to program after DEF processing.                  */\n/*                                                                    */\n/*--------------------------------------------------------------------*/\n    ARG parm#\n    Address ISPEXEC\n    ima_macro = 0\n    If parm# /= '' Then Signal byp1\n    \"CONTROL ERRORS RETURN\"\n    \"ISREDIT MACRO (parm#) NOPROCESS\"\n    If rc > 0 Then SIGNAL byp1\n    ima_macro = 1\n\nbyp1:\n    cactn = \"RETURN\"\n    cactn = \"CANCEL\"\n    \"CONTROL ERRORS\" cactn\n\n    If parm# = '' Then Do\n        gc009 = 'Missing varaiable name.'\n        \"SETMSG MSG(GC009)\"\n        Exit\n    End\n\nini1:\n    \"ISREDIT (status) = USER_STATE\"\n    \"ISREDIT F \"\"If Substr(zcmd,1,3)='DEF' Then Do\"\" FIRST\"\n    If rc = 0 Then Do\n        gc009 = 'DEF code appers to be present. Dlete and re-run',\n                'macro if you want to insert new ones.'\n        \"SETMSG MSG(GC009)\"\n        Exit\n    End\n    otype=\n    Do Forever\n        'ISREDIT F \"zcmd=''DEBUG''\"'\n        If rc /= 0 Then Leave\n        \"ISREDIT (line) = LINE .ZCSR\"\n        Parse VAR line ',' label ')'\n        xx=nl(' ')\n        xx=nl('        Signal' label';End')\n        xx=nl(\"        x=R0site$('\"parm#\"');\" ||,\n              '\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"')\n        xx=nl(\"    If Substr(zcmd,1,3)='DEF' Then Do\")\n    End\n\nExi1:\n    \"ISREDIT USER_STATE = (status)\"\n    Return\n\nnl:Parse Arg nl;\"ISREDIT LINE_AFTER .ZCSR = &OTYPE (nl)\";Return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0DBSUM": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x003\\x01\\x02\"o\\x01\\x02\"o\\x159\\x00 \\x00\\x1f\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2002-08-14T00:00:00", "modifydate": "2002-08-14T15:39:33", "lines": 32, "newlines": 31, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Obtain the tablespaces for given database from the -DISPLAY       */\n/*  command.                                                          */\n/*  Parse the data for '------' to identify the start of the          */\n/*  tablespace names and '*******' for the end.                       */\n/*--------------------------------------------------------------------*/\nGet_db_summary:\n    Address ISPEXEC \"VGET (ssid) SHARED\"\n    msg = Msg('On');x = Outtrap('list.')\n    \"DSN SYSTEM(\"ssid\")\"\n    x = Outtrap('Off');msg = Msg(msg)\n    Do j=1 To list.0\n        If Word(list.j,1) = '--------' Then Leave\n        If Word(list.j,1) = 'DSNT362I' Then Do\n            Parse VAR list.j . 'STATUS =' status .\n            If status = 'STOP' Then Return 1\n        End\n    End\n    j = j+1\n    Parse VAR list.j . type p_n status .\n    If Datatype(p_n) = 'CHAR' Then status = p_n\n    Select\n        When status   = 'RW'      Then NOP\n        When status   = 'RO'      Then NOP\n        When status   = 'RW,COPY' Then NOP\n        When status   = 'RO,COPY' Then NOP\n        Otherwise Return 1\n    End\n\n    Return 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0DEBUG": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x18\\x01\\x02\"_\\x01\\x02%_\\x14Q\\x00\\x0c\\x00\\t\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-08-13T00:00:00", "modifydate": "2002-09-12T14:51:18", "lines": 12, "newlines": 9, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process TEMPLATE data                                             */\n/*--------------------------------------------------------------------*/\neval_debug: Parse Upper Arg db_p1,db_p2\n    If db_p2 /= '' Then db_p2 = ';Signal' db_p2\n    Select\n        When db_p1='R' Then db_p1=''\n        When db_p1=''  Then db_p1='R'\n        Otherwise           db_p1='R'\n    End\n    Return \"debug=\"db_p1\";Trace \"db_p1 || db_p2\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0DIST": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\\x11\\x01\\x02\"\\x0f\\x01\\x022/\\x15\\x18\\x00u\\x00`\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xd9\\xc7\\xf1@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2002-08-08T00:00:00", "modifydate": "2002-11-18T15:18:11", "lines": 117, "newlines": 96, "modlines": 0, "user": "SYSPRG1"}, "text": "//C838704D JOB (TPCICS001),'Distribute R0*',MSGLEVEL=1,\n//        MSGCLASS=X,CLASS=A,NOTIFY=&SYSUID TYPRUN=SCAN\n//*\n//*-------------------------------------------------------------------*\n//* Watch the copying of member R0SITE$ accross systems as the TELSTA *\n//* prototype may cream carefully sculped member on remote systems.   *\n//*-------------------------------------------------------------------*\n//*\n//*\n//VARS    SET Q1DSN=TPCICS.C838704\n//        SET Q2DSN=IVDB2.DB2UTILS\n//*\n//STEP1   EXEC PGM=IEBCOPY,REGION=2048K\n//SYSPRINT DD  SYSOUT=*\n//OUT      DD DISP=SHR,DSN=&Q1DSN..$$\n//MIN      DD DISP=SHR,DSN=&Q2DSN..MSGS\n//PIN      DD DISP=SHR,DSN=&Q2DSN..PANELS\n//RIN      DD DISP=SHR,DSN=&Q2DSN..EXEC\n//SIN      DD DISP=SHR,DSN=&Q2DSN..SKELS\n//SYSIN    DD *\n COPY INDD=((OUT,R)),OUTDD=MIN\n     SELECT MEMBER=GC00\n COPY INDD=((OUT,R)),OUTDD=PIN\n     SELECT MEMBER=HELPDRVP\n     SELECT MEMBER=HELPTBD1\n     SELECT MEMBER=R010P\n     SELECT MEMBER=R012PY\n     SELECT MEMBER=R014P\n     SELECT MEMBER=R0141P\n     SELECT MEMBER=R0142P\n     SELECT MEMBER=R0143P\n     SELECT MEMBER=R020P\n     SELECT MEMBER=R022P\n     SELECT MEMBER=R030P\n     SELECT MEMBER=R040P\n     SELECT MEMBER=R050P\n     SELECT MEMBER=R051P\n     SELECT MEMBER=R052P\n     SELECT MEMBER=R053P\n     SELECT MEMBER=R054P\n     SELECT MEMBER=R060P\n     SELECT MEMBER=R061P\n     SELECT MEMBER=R0611P\n     SELECT MEMBER=R062P\n     SELECT MEMBER=R070P\n     SELECT MEMBER=R071P\n     SELECT MEMBER=R072P\n     SELECT MEMBER=R073P\n     SELECT MEMBER=R074P\n     SELECT MEMBER=R075P\n     SELECT MEMBER=R080P\n     SELECT MEMBER=R090P\n     SELECT MEMBER=R091P\n     SELECT MEMBER=R092P\n     SELECT MEMBER=R093P\n     SELECT MEMBER=R100P\n     SELECT MEMBER=R101P\n     SELECT MEMBER=R102P\n     SELECT MEMBER=R103P\n     SELECT MEMBER=R120P\n     SELECT MEMBER=R121P\n     SELECT MEMBER=R122P\n     SELECT MEMBER=R123P\n     SELECT MEMBER=R130P\n     SELECT MEMBER=R131P\n     SELECT MEMBER=R132P\n     SELECT MEMBER=R133P\n     SELECT MEMBER=R140P\n     SELECT MEMBER=R140TP\n COPY INDD=((OUT,R)),OUTDD=RIN\n     SELECT MEMBER=HELPDRVR\n     SELECT MEMBER=HELPTT\n     SELECT MEMBER=HELPTN\n     SELECT MEMBER=R0\n     SELECT MEMBER=R0CHKDAT\n     SELECT MEMBER=R0CHKIX\n     SELECT MEMBER=R0COPY\n     SELECT MEMBER=R0D\n     SELECT MEMBER=R0DBSUM\n     SELECT MEMBER=R0DEBUG\n     SELECT MEMBER=R0DRVR\n     SELECT MEMBER=R0DSNRX\n     SELECT MEMBER=R0EDTL\n     SELECT MEMBER=R0HELP\n     SELECT MEMBER=R0HELPPF\n     SELECT MEMBER=R0JOBCRD\n     SELECT MEMBER=R0LDEF\n     SELECT MEMBER=R0LISTM\n     SELECT MEMBER=R0LOAD\n     SELECT MEMBER=R0MODIFY\n     SELECT MEMBER=R0PERFLK\n     SELECT MEMBER=R0PERFQ\n     SELECT MEMBER=R0QUIESC\n     SELECT MEMBER=R0REBIX\n     SELECT MEMBER=R0RECOVR\n     SELECT MEMBER=R0REORG\n     SELECT MEMBER=R0RUNSTS\n     SELECT MEMBER=R0SITE\n     SELECT MEMBER=R0STATS\n     SELECT MEMBER=R0TEMPL\n     SELECT MEMBER=R0UNLOAD\n     SELECT MEMBER=R0VALCOP\n     SELECT MEMBER=R0VALTSP\n     SELECT MEMBER=R0WHOME\n     SELECT MEMBER=R0WORDAT\n COPY INDD=((OUT,R)),OUTDD=SIN\n     SELECT MEMBER=HELPDRVS\n     SELECT MEMBER=R0JCS\n     SELECT MEMBER=R0J10S\n     SELECT MEMBER=R0J20S\n     SELECT MEMBER=R014S\n/*\n//\n\n\n\n     SELECT MEMBER=R0SITE$\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R0DIST1": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\"\\x01\\x02\"\\x8f\\x01\\x022/\\x15\\x18\\x00U\\x01\\x80\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xd9\\xc7\\xf1@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2002-08-16T00:00:00", "modifydate": "2002-11-18T15:18:22", "lines": 85, "newlines": 384, "modlines": 0, "user": "SYSPRG1"}, "text": " COPY INDD=((OUT,R)),OUTDD=MIN\n     SELECT MEMBER=GC00\n COPY INDD=((OUT,R)),OUTDD=PIN\n     SELECT MEMBER=HELPDRVP\n     SELECT MEMBER=R010P\n     SELECT MEMBER=R012PY\n     SELECT MEMBER=R014P\n     SELECT MEMBER=R0141P\n     SELECT MEMBER=R0142P\n     SELECT MEMBER=R0143P\n     SELECT MEMBER=R020P\n     SELECT MEMBER=R022P\n     SELECT MEMBER=R030P\n     SELECT MEMBER=R040P\n     SELECT MEMBER=R050P\n     SELECT MEMBER=R051P\n     SELECT MEMBER=R052P\n     SELECT MEMBER=R053P\n     SELECT MEMBER=R054P\n     SELECT MEMBER=R060P\n     SELECT MEMBER=R061P\n     SELECT MEMBER=R0611P\n     SELECT MEMBER=R062P\n     SELECT MEMBER=R070P\n     SELECT MEMBER=R071P\n     SELECT MEMBER=R0711P\n     SELECT MEMBER=R072P\n     SELECT MEMBER=R080P\n     SELECT MEMBER=R090P\n     SELECT MEMBER=R091P\n     SELECT MEMBER=R092P\n     SELECT MEMBER=R093P\n     SELECT MEMBER=R100P\n     SELECT MEMBER=R101P\n     SELECT MEMBER=R102P\n     SELECT MEMBER=R103P\n     SELECT MEMBER=R120P\n     SELECT MEMBER=R121P\n     SELECT MEMBER=R122P\n     SELECT MEMBER=R123P\n     SELECT MEMBER=R130P\n     SELECT MEMBER=R131P\n     SELECT MEMBER=R132P\n     SELECT MEMBER=R133P\n COPY INDD=((OUT,R)),OUTDD=RIN\n     SELECT MEMBER=HELPDRVR\n     SELECT MEMBER=HELPTT\n     SELECT MEMBER=HELPTN\n     SELECT MEMBER=R0\n     SELECT MEMBER=R0CHKDAT\n     SELECT MEMBER=R0CHKIX\n     SELECT MEMBER=R0COPY\n     SELECT MEMBER=R0D\n     SELECT MEMBER=R0DBSUM\n     SELECT MEMBER=R0DEBUG\n     SELECT MEMBER=R0DSNRX\n     SELECT MEMBER=R0EDTL\n     SELECT MEMBER=R0HELP\n     SELECT MEMBER=R0HELPPF\n     SELECT MEMBER=R0JOBCRD\n     SELECT MEMBER=R0LDEF\n     SELECT MEMBER=R0LISTM\n     SELECT MEMBER=R0LOAD\n     SELECT MEMBER=R0MODIFY\n     SELECT MEMBER=R0QUIESC\n     SELECT MEMBER=R0REBIX\n     SELECT MEMBER=R0RECOVR\n     SELECT MEMBER=R0REORG\n     SELECT MEMBER=R0RUNSTS\n     SELECT MEMBER=R0SITE\n     SELECT MEMBER=R0SITE$\n     SELECT MEMBER=R0STATS\n     SELECT MEMBER=R0TEMPL\n     SELECT MEMBER=R0UNLOAD\n     SELECT MEMBER=R0VALCOP\n     SELECT MEMBER=R0VALTSP\n     SELECT MEMBER=R0WHOME\n     SELECT MEMBER=R0WORDAT\n COPY INDD=((OUT,R)),OUTDD=SIN\n     SELECT MEMBER=R0JCS\n     SELECT MEMBER=R0J10S\n     SELECT MEMBER=R0J20S\n     SELECT MEMBER=R014S\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "R0DRVR": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00D\\x01\\x020?\\x01\\x022/\"C\\x03v\\x03 \\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xd9\\xc7\\xf1@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2002-10-30T00:00:00", "modifydate": "2002-11-18T22:43:44", "lines": 886, "newlines": 800, "modlines": 0, "user": "SYSPRG1"}, "text": "/******************************** REXX ********************************/\n    r0ver = 'V1.05'                         /* Version                */\n/*--------------------------ooo000OOOO000ooo--------------------------*/\n/*                                                                    */\n/* Program - R0DRVR                                                   */\n/*                                                                    */\n/* Purpose - To generate DB2 utility parms & jcl for given databases  */\n/*         - Special for jobs submitted via CONTROL/M                 */\n/*                                                                    */\n/* The following files will be created if they do not exist:          */\n/*         hlq.LISTDEF  - LISTDEF members. 'hlq' returned by R0SITE$  */\n/*         hlq.TEMPLATE - TEMPLATE members.                           */\n/*                                                                    */\n/* A site default templates dataset should be created and populated   */\n/* and pointed to be variable TEMPSDEF in R0SITE$.                    */\n/*                                                                    */\n/* Members required to package this feature:                          */\n/*   REXX:                                                            */\n/*         R0           - Launcher. Allocates dataset etc...          */\n/*         R0DRVR       - This driver                                 */\n/*                        Note this driver doubles up as a multi      */\n/*                        purpose edit macro.                         */\n/*         R0SITE$      - Customise site default variables            */\n/*         R0WHOME      - Routine to identify user.                   */\n/*         R0HELP       o Dynamic HELP text.                          */\n/*         HELPDRVR     o Routine to drive the help member            */\n/*         HELPQR       o Dynamic Tutorial QuickRef HELP text.        */\n/*         HELPTN       o Dynamic Tutorial navigation HELP text.      */\n/*         HELPTT       o Tutorial on how to build dynamic help text. */\n/*                                                                    */\n/*   Panel:                                                           */\n/*         HELPDRVP     o Panel for dynamic help display              */\n/*         R0*P         - Action entry panel                          */\n/*         R0*PY        - Dynamic LISTDEF parameter entry panel       */\n/*         R0*PH        o Help panels (obsolete)                      */\n/*                                                                    */\n/*   Messages:                                                        */\n/*         GC00         - Generic message member                      */\n/*                                                                    */\n/*   Skeletons:                                                       */\n/*         R0S*         - Skeletons                                   */\n/*         R0*S         - Skeletons                                   */\n/*                                                                    */\n/*--------------------------------------------------------------------*/\n    Parse Upper Arg array\n    Address ISPEXEC\n    If array /= '' Then Signal byp1\n    \"CONTROL ERRORS RETURN\"\n    \"ISREDIT MACRO (array) NOPROCESS\"\n    If rc > 0 Then SIGNAL byp1\n\n    \"VGET r1macro SHARED\"\n    If r1macro /= '' Then Do\n        Signal on Syntax Name byp1\n        Interpret \"Signal Macro_\"r1macro\n    End\n\nbyp1:\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    helptab = 'HELPDRVR=R0HELP'\n    debug   =\n\nini1:\n    Parse SOURCE . . xcmd .\n    sysid  = Strip(storage(d2x(c2d(storage(10,4)) + x2d(154)),8))\n    userid = Userid()\n\n/*--------------------------------------------------------------------*/\n/* Variables grouped into functions for ease of passing between       */\n/* driver and sub-routines.                                           */\n/*--------------------------------------------------------------------*/\n    drvrv  = 'utillib templib outlist sqlid db2ssid tempsdef',\n             ''\n    tempv  = 'tempdsn tempunit tempstck tempvcnt',\n             'tempdis1 tempdis2 tempdis3',\n             'tempspty tempspa1 tempspa2',\n             'temptrtc tempdcb',\n             'template',\n             ''\n    copyv  = 'copyshrl copylcop copyage',\n             'copyldef copycddn copyrddn',\n             'copyid',\n             ''\n    runsv  = 'runsupdt runshist runspct runsldef',\n             'runsshrl,runsid,runsrep',\n             ''\n    quiev  = 'quiepart quiewrit quieldef',\n             'quieid',\n             ''\n    uloadv = 'unldldef unldownr unldtbnm unlddbnm unldtspc unldpart',\n             'unldspct unldlimt',\n             'unldwhn1 unldwhn2 unldwhn3',\n             'unldpddn unlduddn',\n             'unldid',\n             ''\n    loadv  = 'loadupdt loadhist loadshrl loadstat loadrepl',\n             'loadwddn loadeddn loadmddn loaddddn loadcddn loadrddn',\n             'loaddevt loadsrtk loadresu loadspct loadsrtn',\n             'loadid',\n             ''\n    reorgv = 'reorldef reordbnm reortspc reorupdt reorhist reorlog',\n             'reorpart reorsdat reorskey reorfswc reorkdic reorruse',\n             'reordwat reorrtry reorrdel reorstat reorshrl',\n             'reormdbn reormtsp reoroffl reorindr reorrepo reorleaf',\n             'reordead reorcurt reorspct',\n             'reorsig1 reorval1 reordur1',\n             'reormxro reordran reorllog reordlay reortout',\n             'reorpddn reorcddn reorrddn',\n             'reorcrea reorindx',\n             'reorid',\n             ''\n    recovv = 'recodbnm recospce recotcpy recotdsn recopart recoptix',\n             'recopntr recobjtp recoldef recocrea recoindx recoopt1',\n             'recoid',\n             ''\n    rebixv = 'rebicrea rebindex rebidbnm rebispce rebipart rebiptix',\n             'rebildef rebistat rebiupdt rebihist rebiwddn',\n             'rebidevt rebisrtk rebireus rebisrtn',\n             'rebiid',\n             ''\n    chkdav = 'chkddbnm chkdtspc chkdpart chkdscop',\n             'chkdauxe chkdeddn chkdwddn chkddevt chkddelt',\n             'chkdlog  chkdexcp chkdsrtn',\n             'chkdid',\n             ''\n    chkixv = 'chkicrea chkindex chkidbnm chkispce chkipart chkiptix',\n             'chkildef chkiwddn chkidevt chkisrtn',\n             'chkiid',\n             ''\n    perfqv = 'perfdblk perfctl1 perfid perfsubr',\n             ''\n    migrtv = 'migrldef migrpddn migruddn migrssid migrlpar migrldsn',\n             'migrmdsn migrtdsn migrxcls migrmcls migracct migrsubl',\n             'migrid',\n             ''\n    jobcv  = 'jobcard1 jobcard2 jobcard3 jobcard4 jobcard5',\n             ''\n    sticky = 'ssid sqlid acct',\n             'listname',\n             drvrv reorgv copyv runsv quiev uloadv loadv,\n             loadv recovv rebixv chkdav chkixv perfqv migrtv\n    \"VGET (\"sticky jobcv\") PROFILE\"\n\n    panel10 = 'R010P'                       /* Utility selection      */\n    panel12 = 'R012PY'                      /* LISTDEF parm entry     */\n    panel14 = 'R014P'                       /* Template entry         */\n    panel14P= 'R0141P'                      /* Template type popup    */\n    panel20 = 'R020P'                       /* Copy perm entry        */\n    panel22 = 'R022P'                       /* Modify entry           */\n    panel30 = 'R030P'                       /* Runstat entry          */\n    panel40 = 'R040P'                       /* Quiesce entry          */\n    panel50 = 'R050P'                       /* Unload entry           */\n    panel51 = 'R051P'                       /* Unload From table      */\n    panel52 = 'R052P'                       /* Unload From LIST       */\n    panel53 = 'R053P'                       /* Unload From tablespace */\n    panel54 = 'R054P'                       /* Unload From Copy       */\n    panel60 = 'R060P'                       /* Load                   */\n    panel61 = 'R061P'                       /* Load Dsnames           */\n    panel611= 'R0611P'                      /* Load Table names       */\n    panel62 = 'R062P'                       /* Load Table             */\n    panel63 = 'R063P'                       /* Load Index             */\n    panel70 = 'R070P'                       /* Reorg                  */\n    panel71 = 'R071P'                       /* Reorg TS List          */\n    panel72 = 'R072P'                       /* Reorg TS database      */\n    panel73 = 'R073P'                       /* Reorg IX List          */\n    panel74 = 'R074P'                       /* Reorg IX Index         */\n    panel75 = 'R075P'                       /* Reorg deadline parms   */\n    panel80 = 'R080P'                       /* Chkdata                */\n    panel100= 'R100P'                       /* Recover                */\n    panel101= 'R101P'                       /* Recover List           */\n    panel102= 'R102P'                       /* Recover TS/IX          */\n    panel103= 'R103P'                       /* Recover Index          */\n    panel120= 'R120P'                       /* Rebldix                */\n    panel121= 'R121P'                       /* Rebldix List           */\n    panel122= 'R122P'                       /* Rebldix Index Name     */\n    panel123= 'R123P'                       /* Rebldix TableSpace     */\n    panel130= 'R130P'                       /* ChkIndx                */\n    panel131= 'R131P'                       /* ChkIndx List           */\n    panel132= 'R132P'                       /* ChkIndx Index Name     */\n    panel133= 'R133P'                       /* ChkIndx TableSpace     */\n    panel140= 'R140P'                       /* Perform Query          */\n    panel141= 'R141P'                       /* Perform Query select   */\n    panel150= 'R150P'                       /* Migration select       */\n    panel90 = 'R090P'                       /* Member list table      */\n    panel91 = 'R091P'                       /* Jobcard entry screen   */\n    panel93 = 'R093P'                       /* Dataset table display  */\n\n    panelv = 'panel10 panel12 panel14 panel14p panel20 panel22 panel30',\n             'panel40 panel50 panel51 panel52 panel53 panel54',\n             'panel60 panel61 panel611 panel62 panel63',\n             'panel70 panel71 panel72 panel73 panel74 panel75',\n             'panel80',\n             'panel90 panel91 panel93',\n             'panel100 panel101 panel102 panel103',\n             'panel120 panel121 panel122 panel123',\n             'panel130 panel131 panel132 panel133',\n             'panel140 panel141',\n             'panel150',\n             'helptab',\n             ''\n\n/*  x=helpdrvr(helptab 'I /BUILD')                                    */\n\n    \"VPUT (jobcv,copyv,tempv,runsv,quiev,uloadv,loadv,recovv,rebixv,\",\n          \"chkixv,chkdav,reorgv,perfqv,migrtv,\",\n          \"drvrv,panelv,\"panelv\")SHARED\"\n\n    r1prog  = 'RDB20340'                    /* In/Ex filter routine   */\n    gc00T   = 'WARNING'                     /* GC00 message variable  */\n    table   = 'TB'Time('s')\n    table1  = 'TABLE1'\n\n/*--------------------------------------------------------------------*/\n/*  The following string is used to control processing:               */\n/*  - The first component of each 'word' is the action.               */\n/*  - The following components (: seperated) are the xxx_PROCESS      */\n/*    subroutines performed to complete the action. This way the      */\n/*    processing logic can be readily identified from the contents of */\n/*    the variable.                                                   */\n/*    JCL(...) identifies inclusion modules                           */\n/*--------------------------------------------------------------------*/\n    process_matrix = ' ',\n        'JOBCARD=JC                                    ',\n        'LISTD=LISTDEF                                 ',\n        'TEMPL=TEMPLATE                                ',\n        'PERFQ=PERFQ:JCL(JC,J10,J20,JXXX)              ',\n        'COPY=COPYU:JCL(JC,J10,J20,J21)                ',\n        'MODIFY=MODFU:JCL(JC,J20,J22)                  ',\n        'RUNSTAT=RUNSTAT:JCL(JC,J10,J20,J23)           ',\n        'QUIESCE=QUIES:JCL(JC,J10,J20,J24)             ',\n        'UNLOAD=UNLOAD:JCL(JC,J20,J50)                 ',\n        'LOAD=LOAD:JCL(JC,J20,J60)                     ',\n        'REORG=REORG:JCL(JC,J20,J70)                   ',\n        'CHKDATA=CHKDATA:JCL(JC,J20,J80)               ',\n        'CHKINDX=CHKINDX:JCL(JC,J20,J120)              ',\n        'REBLDIX=REBLDIX:JCL(JC,J20,J120)              ',\n        'RECOVER=RECOVER:JCL(JC,J20,J100)              ',\n        'MIGRATE=MIGRATE:JCL(JC,J10,J20,J30):JCL(J31)  ',\n        ' '\n    Call set_vars_1\n\n    x=R0helppf('On')\n\n/*\nperfq = '/'\n*/\n\n/*--------------------------------------------------------------------*/\n/*  Display utility selection Menu selection                          */\n/*--------------------------------------------------------------------*/\nscr1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL10) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If rc /= 0 Then Signal exit1\n    If zcmd='DEBUG' Then Interpret r0debug(debug,scr1)\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab 'I /OPEN')\n        Signal scr1\n    End\n    csr1=;csrp1=\n    Parse var zcmd cmd parm1 parm2 .\n\n/*--------------------------------------------------------------------*/\n/*  Get subsystem name from dynamic field                             */\n/*--------------------------------------------------------------------*/\n    Parse Var sslist . '[' xxx\n    s# = 0\n    Do i=1 To ss#\n        Parse VAR xxx si +1 '[' xxx\n        If si /= '' Then Do\n            If s# = 0 Then s# = i\n            Else Do\n                csr1  = 'SSLIST'\n                csrp1 = ssl + (i-1)*7 + (i%10*10)\n                gc009 = 'Can only select one SSID.'\n                \"SETMSG MSG(GC009)\"\n                Signal scr1\n            End\n        End\n    End\n    If s# = 0 & ssid = '' Then Do\n        csr1  = 'SSLIST'\n        csrp1 = ssl\n        gc009 = 'SSID must be entered or selected from list.'\n        \"SETMSG MSG(GC009)\"\n        Signal scr1\n    End\n    If s# > 0 Then Do\n        ssid = ss.s#\n        sslist = Overlay(' ',sslist,7+7*(s#-1)+2)\n    End\n\n/*--------------------------------------------------------------------*/\n/* Process matrix according to non-space selection values.            */\n/*--------------------------------------------------------------------*/\n    \"VPUT (ssid,sqlid) SHARED\"\n    uproc_string = process_matrix\n    Do While uproc_string /= ''\n        temp1=;temp2=;temp3=;temp4=;temp5=;temp6=;listd1=;\n        Parse VAR uproc_string xxx uproc_string\n        Parse VAR xxx oper1 '=' nexto\n        Interpret \"act =\" oper1\n        If act = '' Then Iterate\n        genolist='ON';jcl_created=0;ulact=;r1macro=1\n        Interpret oper1 \"= ''\"\n        #nexto=nexto\n        Do middle_loop=0\n            Do while nexto /= ''\n                Parse VAR nexto util2 ':' nexto\n                Parse VAR util2 util2 '(' jclp ')'\n                Interpret \"x =\" util2\"_process('\"nexto\"')\"\n                If x > 8 Then Leave middle_loop\n            End\n            If jcl_created Then x = Edit_JCL()\n            nexto=#nexto\n        End\n    End\n    Signal scr1\n\n/*--------------------------------------------------------------------*/\n/*  Exit routine. Save sticky fields in profile                       */\n/*--------------------------------------------------------------------*/\nexit1:\n    x = R0helppf('Off')\n    \"VPUT (\"sticky\") PROFILE\"\n    Do While Queued() > 0                   /* Del open stacks        */\n        Address TSO \"DELSTACK\"\n    End\n    x=helpdrvr(helptab '/CLOSE')\n    Exit\n\n/*--------------------------------------------------------------------*/\n/*  Process PREFormance Query parameter entry                         */\n/*--------------------------------------------------------------------*/\nperfq_process:\n    \"VPUT (\"perfqv runsv reorgv\" nexto) SHARED\"\n    xx = r0perfq(oper1,templib,tempsdef,debug)\n    If xx = 0 Then \"VGET (\"perfqv runsv reorgv\",ldeftype,nexto,ulact\",\n                         \") SHARED\"\n    listd1=\n    If ulact /= '' Then,\n        temp1=reorpddn;temp2=reorcddn;temp3=reorrddn\n    utilid=perfid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process COPY LISTDEF parameter entry                              */\n/*--------------------------------------------------------------------*/\ncopyu_process:\n    \"VPUT (\"copyv\") SHARED\"\n    xx = r0copy(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then \"VGET (\"copyv\") SHARED\"\n    temp1=copycddn;temp2=copyrddn;listd1=copyldef\n    utilid=copyid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process MODIFY LISTDEF parameter entry                            */\n/*--------------------------------------------------------------------*/\nmodfu_process:\n    \"VPUT (\"copyv\") SHARED\"\n    xx = r0modify(oper1,utillib)\n    If xx = 0 Then \"VGET (\"copyv\") SHARED\"\n    listd1=copyldef\n    utilid=copyid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process RUNSTAT LISTDEF parameter entry                           */\n/*--------------------------------------------------------------------*/\nrunstat_process:\n    \"VPUT (\"runsv\") SHARED\"\n    xx = r0runsts(oper1,utillib)\n    If xx = 0 Then \"VGET (\"runsv\") SHARED\"\n    listd1=runsldef\n    utilid=runsid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process QUIESCE parameter entry                                   */\n/*--------------------------------------------------------------------*/\nquies_process:\n    \"VPUT (\"quiev\") SHARED\"\n    xx = r0quiesc(oper1,utillib)\n    If xx = 0 Then \"VGET (\"quiev\") SHARED\"\n    listd1=quieldef\n    utilid=quieid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process UNLOAD parameter entry                                    */\n/*--------------------------------------------------------------------*/\nunload_process:\n    \"VPUT (\"uloadv\" nexto) SHARED\"\n    xx = r0unload(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n          \"VGET (\"uloadv\" nexto genolist ulact tspace partno dsnx\"\n          \"when1Rwhen2 when3 when4 when5 when6 when7 when8\"\n          \") SHARED\"\n    listd1=unldldef;temp1=unldpddn;temp2=unlduddn\n    utilid=ulid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process UNLOAD parameter entry                                    */\n/*--------------------------------------------------------------------*/\nload_process:\n/*--------------------------------------------------------------------*/\n    \"VPUT (\"loadv\") SHARED\"\n    xx = r0load(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"loadv\" genolist loadtab loadudsn) SHARED\"\n    temp1=loadrddn;temp2=loadcddn;temp3=loadeddn;temp4=loaddddn\n    temp5=loadmddn;temp6=loadwddn\n    utilid=loadid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process REORG parameter entry                                     */\n/*--------------------------------------------------------------------*/\nreorg_process:\n    \"VPUT (\"reorgv\" rotl rots roil roix nexto) SHARED\"\n    xx = r0reorg(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"reorgv\" deadlin1 deadlin2 deadlin3 deadlin4\",\n               \"mapping1 mapping2 mapping3 mapping4 report\",\n               \"rotl rots roil roix\",\n               \"tspace partno nexto genolist ulact) SHARED\"\n    listd1=reorldef\n    temp1=reorpddn;temp2=reorcddn;temp3=reorrddn\n    utilid=reorid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process CHECK DATA parameter entry                                */\n/*--------------------------------------------------------------------*/\nchkdata_process:\n    \"VPUT (\"chkdav\" nexto) SHARED\"\n    xx = r0chkdat(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"chkdav\" genolist tspace partno\",\n              \") SHARED\"\n    temp1=chkdeddn;temp2=chkdwddn\n    utilid=chkdid\n    Return xx\n\n    Signal err1\n\n/*--------------------------------------------------------------------*/\n/*  Process CHECK INDEX parameter entry                               */\n/*--------------------------------------------------------------------*/\nchkindx_process:\n    \"VPUT (\"chkixv\" nexto) SHARED\"\n    xx = r0chkix(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"chkixv\" nexto genolist ulact tspace partno sortnum\",\n              \"opertp) SHARED\"\n    listd1=chkildef;temp1=chkiwddn\n    utilid=chkiid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process RECOVER parameter entry                                   */\n/*--------------------------------------------------------------------*/\nrecover_process:\n    \"VPUT (\"recovv\" nexto) SHARED\"\n    xx = r0recovr(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"recovv\" nexto genolist ulact tspace partno dsnx\",\n               \"tocopy rctype) SHARED\"\n    listd1=recoldef\n    utilid=recoid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process ReBuild Index parameter entry                             */\n/*--------------------------------------------------------------------*/\nrebldix_process:\n    \"VPUT (\"rebixv\" nexto) SHARED\"\n    xx = r0rebix(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"rebixv\" nexto genolist ulact tspace partno\",\n               \"sortnum opertp) SHARED\"\n    listd1=rebildef;temp1=rebiwddn\n    utilid=rebiid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process Migration parameter entry                                 */\n/*--------------------------------------------------------------------*/\nmigrate_process:\n    \"VPUT (\"migrtv\") SHARED\"\n    xx = r0migrat(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"migrtv\",punchdsn,moddsn,mapdsn,tempdsn,password,tablem\",\n              \"unloddsn,sameplex)SHARED\"\n    listd1=migrldef\n    utilid=migrid\n    Return xx\n\nerr1:\n    gc009 = 'Option \"'oper1'\" not developed yet.'\n    \"SETMSG MSG(GC009)\"\n    Signal scr1\n\n/*--------------------------------------------------------------------*/\n/*  Process LISTDEF data                                              */\n/*--------------------------------------------------------------------*/\nlistdef_process:\n    Return r0ldef(utillib,Arg(1))\n\n/*--------------------------------------------------------------------*/\n/*  Process TEMPLATE data                                             */\n/*--------------------------------------------------------------------*/\ntemplate_process:\n    xmsg='your own choosing.'\n    xx = R0templ(templib,tempsdef,xmsg,Arg(1))\n    \"VGET (\"tempv\") SHARED\"\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process Jobcard                                                   */\n/*--------------------------------------------------------------------*/\nJC_process:\n    x = r0jobcrd(utillib,Arg(1))\n    \"VGET (\"jobcv\") PROFILE\"\n    Return x\n\n/*--------------------------------------------------------------------*/\n/* Edit JCL. Output from file tailoring and present under editor.     */\n/*--------------------------------------------------------------------*/\nEdit_JCL:\n    \"CONTROL ERRORS RETURN\"\n    \"TBEND &LOADTAB\"\n    \"FTCLOSE\"\n    \"VGET ZTEMPF\"\n    Address TSO \"ALLOC DD(ZTEMPF) DS('\"ztempf\"') SHR REU\"\n    \"LMINIT DATAID(DATAID) DDNAME(ZTEMPF)\"\n    \"VPUT r1macro SHARED\"\n    \"EDIT DATAID(&DATAID) MACRO(&XCMD)\"\n    \"LMFREE DATAID(&DATAID)\"\n    Address TSO \"FREE DD(ZTEMPF)\"\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Macro 1 to put notelines into JCL                                  */\n/*--------------------------------------------------------------------*/\nmacro_1:\n    r1macro =\n    \"VPUT r1macro SHARED\"\nn_st = mark(2)                              /* Mark next line         */\n/*\n\n`   Hello &CNAME..\n\n    THis is the JCL generated from the parameters entered.\n\n    Either submit from the command line or use your favourite copy\n    routine to save for posterity.\n\n    The contents will self destruct on ending.\n\n                            ****\n\n    \"A wise man will always check his JCL before submiting it.\"\n    -Confucius...\n\n\n*/\nn_en = mark(-2)                             /* Mark prev 2 line       */\n    \"ISREDIT RES\"\n    call put_notelines\n\n    Exit\n\n/*--------------------------------------------------------------------*/\n/* Macro 1 to put notelines into JCL                                  */\n/*--------------------------------------------------------------------*/\nmacro_2:\n    r1macro =\n    \"VPUT r1macro SHARED\"\nn_st = mark(2)                              /* Mark next line         */\n/*\n\n`   Hello &CNAME..\n\n    * NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE *\n\n    You have chosen to execute the LOAD function seperate to the\n    UNLOAD.\n\n    This job should be copied into a permanent member for later\n    submission after the data has been successfully unloaded.\n\n    If you are using FTP your password will be imbedded in the JCL.\n    Suggest entering a dummy password and changing it just prior to\n    job submission. Don't forget to delete the held output as the\n    password will be there also.\n    Alternatively arrange for a generic Userid/password for FTPing.\n\n    The contents will self destruct on ending.\n\n                            ****\n\n    \"A wise man will always check his JCL before submiting it.\"\n    -Confucius...\n\n\n*/\nn_en = mark(-2)                             /* Mark prev 2 line       */\n    \"ISREDIT RES\"\n    call put_notelines\n\n    Exit\n\n/*--------------------------------------------------------------------*/\n/* Build JCL                                                          */\n/*--------------------------------------------------------------------*/\nJCL_process:\n    Do While jclp /= ''\n        Signal on Syntax Name error_off_1\n        Parse VAR jclp jj ',' jclp\n        Interpret \"Call build_COPY_\"jj\n    End\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Routine to build the various types of JCL                          */\n/*    JC         - Obvious.                                           */\n/*    J10        - LISTDEF filter used by:                            */\n/*                 COPY/MODIFY/RUNSTATS                               */\n/*    J20        - DSNUPROC infrastructure                            */\n/*    J21        - COPY/MODIFY                                        */\n/*    J22        - MODIFY                                             */\n/*    J23        - RUNSTATS                                           */\n/*--------------------------------------------------------------------*/\nbuild_copy_JC:\n    Signal Off Syntax\n    Address ISPEXEC\n    If jobcard1 = '' Then Do\n        Call JC_process\n        If jobcard1 = '' Then Drop jobcard1 jobcard2 jobcard3 jobcard4 jobcard5\n    End\n    jcl_created = 1\n    #jc1=jobcard1;#jc3=jobcard3\n    jobcard1 = R0cstrng(Jobcard1,'&UTILITY',oper1,1)\n    jobcard2 = R0cstrng(Jobcard2,'&UTILITY',oper1,1)\n    \"FTOPEN TEMP\"\n    \"FTINCL R0JCS\"\n    jobcard1=#jc1;jobcard3=#jc3\n    If ulact/='NOJ01' Then \"FTINCL R0J01S\"\n    Else ulact=\n\n    Return 0\n\nbuild_copy_j10:\n    Signal Off Syntax\n    If oper1 /= 'PERFQ' Then x = Build_table(utillib'('listd1')','NEW')\n    \"FTINCL R0J10S\"\n    If oper1 /= 'PERFQ' Then \"TBEND &TABLE1\"\n\n    Return 0\n\nbuild_copy_j20:\n    Signal build_copy_jjj\nbuild_copy_j21:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_j22:\n    x = Build_table(utillib'('listd1')','NEW')\nbuild_copy_j23:\nbuild_copy_j231:\nbuild_copy_j24:\n    Signal build_copy_jjj\nbuild_copy_j50:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_j60:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_j70:\nbuild_copy_j701:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_j80:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_j100:\n    Signal build_copy_jjj\nbuild_copy_j120:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_j150:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_jx01:\n    Signal build_copy_jjj\nbuild_copy_jjj:\n    Signal Off Syntax\n    jclopt = Substr(jj,2)\n    \"FTINCL R0J20S\"\n    \"TBEND &TABLE1\"\n    If jclopt = 140 Then \"TBEND &PERFCTL1\"\n\n    Return 0\n\nbuild_copy_j30:\n\"CONTROL ERRORS CANCEL\"\n    \"FTINCL R0J30S\"\n    \"TBEND &TABLEM\"\n\"CONTROL ERRORS RETURN\"\n    Return 0\n\nbuild_copy_j31:\n    If jcl_created Then x = Edit_JCL()\n    If migrsubl = 'Y' Then Do\n        jcl_created = 0\n        Return 9\n    End\n    jcl_created = 1\n    #jc1=jobcard1;#jc3=jobcard3\n    jobcard1 = R0cstrng(Jobcard1,'&UTILITY',oper1,1)\n    jobcard2 = R0cstrng(Jobcard2,'&UTILITY',oper1,1)\n    \"FTOPEN TEMP\"\n    \"FTINCL R0J31S\"\n    jobcard1=#jc1;jobcard3=#jc3\n    r1macro=2\n    Return 0\n\nbuild_templates:\n    Do i=1 To 6\n        Interpret 'xxx = temp'i\n        If xxx = '' Then Iterate\n        x = Build_template_table(xxx,'ADD')\n        Interpret 'temp'i'='\n    End\n    Signal build_copy_jjj\n\n/*====================================================================*/\n/* Common sub-routines (one liners)                                   */\n/*====================================================================*/\n/* Generic syntax error for return of control                         */\n/*--------------------------------------------------------------------*/\nsyntaxerr:Interpret syntaxact;Signal Value retlab\n/*--------------------------------------------------------------------*/\n/* Turn error off after syntax detected in JCL build process          */\n/*--------------------------------------------------------------------*/\nerror_off_1:\n    Signal Off Syntax\n    gc009 = 'Process \"'jj'\" not found. Refer to dialog developer.'\n    Address ISPEXEC \"SETMSG MSG(GC009)\"\n    Return 8\n/*--------------------------------------------------------------------*/\n/* Noteline generator                                                 */\n/*--------------------------------------------------------------------*/\nnl_h:Parse Arg n#;\"ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (n#)\";Return 0\n/*--------------------------------------------------------------------*/\n/* Mark line number for instream 'doco'                               */\n/*--------------------------------------------------------------------*/\nMark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff\n/*--------------------------------------------------------------------*/\n/* Establish whether the template is in the user defined dataset or   */\n/* default site definitions.                                          */\n/*--------------------------------------------------------------------*/\nBuild_template_table: Arg imemb,act\n    If Sysdsn(\"'\"templib\"(\"imemb\")'\") = 'OK' Then xx = templib\n    Else                                          xx = tempsdef\n    x = Build_table(xx'('imemb')',act)\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Build a table from a member to be expanded in a skeleton.          */\n/*--------------------------------------------------------------------*/\nBuild_table: Arg ifile,act\n    table1 = 'TABLE1'\n    If act = 'ADD' Then Do\n        \"TBEXIST &TABLE1\"\n        If rc = 12 Then act = 'NEW'\n        Else \"TBBOTTOM &TABLE1\"\n    End\n    If act = 'NEW' Then Do\n        \"TBEND &TABLE1\"\n        \"TBCREATE &TABLE1 NAMES(DATALINE) NOWRITE REPLACE\"\n    End\n    dd = 'UL'Time('s')\n    Address TSO \"ALLOC F(\"dd\") DA('\"ifile\"') SHR REU\"\n    Address TSO \"EXECIO * DISKR \"dd\" (STEM line. FINIS)\"\n    Do j=1 to line.0\n        dataline = line.j\n        \"TBMOD &TABLE1\"\n    End\n    Address TSO \"FREE F(\"dd\")\"\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Put instream data captured to notelines for edit session           */\n/*--------------------------------------------------------------------*/\nput_notelines:\n    chgchar = '`'\n    syntaxact = \"cname = 'there'\"\n    retlab = error_off_1x\n    Signal on Syntax Name syntaxerr\n    cname = R0whome('C')\nerror_off_1x:\n    Call Off Error\n    \"ISREDIT (caps) = CAPS\"; \"ISREDIT CAPS = OFF\"\n    x = nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')\n    Do i=n_st To n_en\n        line = Sourceline(i)\n        If Substr(line,1,1) = chgchar Then Do Forever\n            line = ' 'Substr(line,2)\n            If Index(line,'&') = 0 Then Leave\n            Parse VAR line p1 '&' var '.' p2\n            data = 'line = p1 || 'var' || p2'\n            Interpret data\n        End\n        x = nl_h('*'Substr(line,1,70)'*')\n    End\n    x = nl_h('*'Copies('-',70)'*')\n    \"ISREDIT CAPS = (caps)\"\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Set variables:                                                     */\n/* Note SQLID is the default RACF user group.                         */\n/*--------------------------------------------------------------------*/\nset_vars_1:\n    x=R0site$('drvrv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n\n    valhex  = '0123456789ABCDEF'\n\nIf userid() /= 'C838704' Then Signal bypass1;\ntempsdef = 'TPCICS.C838704.TEMPLATE.DEFAULT';bypass1:\n\n/*--------------------------------------------------------------------*/\n/* Get all DB2 subsystems on system from the subsystem table in memory*/\n/*--------------------------------------------------------------------*/\n    Numeric digits 10\n    cvt  = Storage('10',4)\n    jesct= Storage(d2x(c2d(cvt)+x2d('128')),4)\n    ssct = Storage(d2x(c2d(jesct)+x2d('18')),4)\n    ssct = c2d(ssct)\n    sslist = '       '\n    ssl    = Length(sslist) +2\n    ss#    = 0\n    adr@ = Address()\n    Address TSO\n    xmsg = Msg('Off')\n\n    Do Forever\n        ssu = Storage(d2x(ssct+20),4)\n        ssu = c2d(ssu)\n        ssi = Storage(d2x(ssu+84),20)\n        If Word(ssi,1) = db2ssid Then Do\n            ssname = Storage(d2x(ssct+8),4)\n/*--------------------------------------------------------------------*/\n/*          Test if DB2 sub-system active                             */\n/*--------------------------------------------------------------------*/\n            \"NEWSTACK\"\n            Queue 'END'\n            'DSN SYSTEM('ssname')'\n            If rc /= 0 Then \"DELSTACK\"\n            Else Do\n/*--------------------------------------------------------------------*/\n                ss#   = ss# +1\n                ss.ss#= ssname\n                sslist = sslist||'[ ]'ssname\n            End\n        End\n        ssct = c2d(Storage(d2x(ssct+4),4))\n        If ssct = 0 Then Leave\n    End\n    Call Off Error\n    xmsg = Msg(xmsg)\n    Address(adr@)\n/*--------------------------------------------------------------------*/\n\n    Return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0DRVR#": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00&\\x01\\x022/\\x01\\x022/\")\\x03t\\x03t\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xd9\\xc7\\xf1@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2002-11-18T00:00:00", "modifydate": "2002-11-18T22:29:26", "lines": 884, "newlines": 884, "modlines": 0, "user": "SYSPRG1"}, "text": "/******************************** REXX ********************************/\n    r0ver = 'V1.05'                         /* Version                */\n/*--------------------------ooo000OOOO000ooo--------------------------*/\n/*                                                                    */\n/* Program - R0DRVR                                                   */\n/*                                                                    */\n/* Purpose - To generate DB2 utility parms & jcl for given databases  */\n/*         - Special for jobs submitted via CONTROL/M                 */\n/*                                                                    */\n/* The following files will be created if they do not exist:          */\n/*         hlq.LISTDEF  - LISTDEF members. 'hlq' returned by R0SITE$  */\n/*         hlq.TEMPLATE - TEMPLATE members.                           */\n/*                                                                    */\n/* A site default templates dataset should be created and populated   */\n/* and pointed to be variable TEMPSDEF in R0SITE$.                    */\n/*                                                                    */\n/* Members required to package this feature:                          */\n/*   REXX:                                                            */\n/*         R0           - Launcher. Allocates dataset etc...          */\n/*         R0DRVR       - This driver                                 */\n/*                        Note this driver doubles up as a multi      */\n/*                        purpose edit macro.                         */\n/*         R0SITE$      - Customise site default variables            */\n/*         R0WHOME      - Routine to identify user.                   */\n/*         R0HELP       o Dynamic HELP text.                          */\n/*         HELPDRVR     o Routine to drive the help member            */\n/*         HELPQR       o Dynamic Tutorial QuickRef HELP text.        */\n/*         HELPTN       o Dynamic Tutorial navigation HELP text.      */\n/*         HELPTT       o Tutorial on how to build dynamic help text. */\n/*                                                                    */\n/*   Panel:                                                           */\n/*         HELPDRVP     o Panel for dynamic help display              */\n/*         R0*P         - Action entry panel                          */\n/*         R0*PY        - Dynamic LISTDEF parameter entry panel       */\n/*         R0*PH        o Help panels (obsolete)                      */\n/*                                                                    */\n/*   Messages:                                                        */\n/*         GC00         - Generic message member                      */\n/*                                                                    */\n/*   Skeletons:                                                       */\n/*         R0S*         - Skeletons                                   */\n/*         R0*S         - Skeletons                                   */\n/*                                                                    */\n/*--------------------------------------------------------------------*/\n    Parse Upper Arg array\n    Address ISPEXEC\n    If array /= '' Then Signal byp1\n    \"CONTROL ERRORS RETURN\"\n    \"ISREDIT MACRO (array) NOPROCESS\"\n    If rc > 0 Then SIGNAL byp1\n\n    \"VGET r1macro SHARED\"\n    If r1macro /= '' Then Do\n        Signal on Syntax Name byp1\n        Interpret \"Signal Macro_\"r1macro\n    End\n\nbyp1:\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    helptab = 'HELPDRVR=R0HELP'\n    debug   =\n\nini1:\n    Parse SOURCE . . xcmd .\n    sysid  = Strip(storage(d2x(c2d(storage(10,4)) + x2d(154)),8))\n    userid = Userid()\n\n/*--------------------------------------------------------------------*/\n/* Variables grouped into functions for ease of passing between       */\n/* driver and sub-routines.                                           */\n/*--------------------------------------------------------------------*/\n    drvrv  = 'utillib templib outlist sqlid db2ssid tempsdef',\n             ''\n    tempv  = 'tempdsn tempunit tempstck tempvcnt',\n             'tempdis1 tempdis2 tempdis3',\n             'tempspty tempspa1 tempspa2',\n             'temptrtc tempdcb',\n             'template',\n             ''\n    copyv  = 'copyshrl copylcop copyage',\n             'copyldef copycddn copyrddn',\n             'copyid',\n             ''\n    runsv  = 'runsupdt runshist runspct runsldef',\n             'runsshrl,runsid,runsrep',\n             ''\n    quiev  = 'quiepart quiewrit quieldef',\n             'quieid',\n             ''\n    uloadv = 'unldldef unldownr unldtbnm unlddbnm unldtspc unldpart',\n             'unldspct unldlimt',\n             'unldwhn1 unldwhn2 unldwhn3',\n             'unldpddn unlduddn',\n             'unldid',\n             ''\n    loadv  = 'loadupdt loadhist loadshrl loadstat loadrepl',\n             'loadwddn loadeddn loadmddn loaddddn loadcddn loadrddn',\n             'loaddevt loadsrtk loadresu loadspct loadsrtn',\n             'loadid',\n             ''\n    reorgv = 'reorldef reordbnm reortspc reorupdt reorhist reorlog',\n             'reorpart reorsdat reorskey reorfswc reorkdic reorruse',\n             'reordwat reorrtry reorrdel reorstat reorshrl',\n             'reormdbn reormtsp reoroffl reorindr reorrepo reorleaf',\n             'reordead reorcurt reorspct',\n             'reorsig1 reorval1 reordur1',\n             'reormxro reordran reorllog reordlay reortout',\n             'reorpddn reorcddn reorrddn',\n             'reorcrea reorindx',\n             'reorid',\n             ''\n    recovv = 'recodbnm recospce recotcpy recotdsn recopart recoptix',\n             'recopntr recobjtp recoldef recocrea recoindx recoopt1',\n             'recoid',\n             ''\n    rebixv = 'rebicrea rebindex rebidbnm rebispce rebipart rebiptix',\n             'rebildef rebistat rebiupdt rebihist rebiwddn',\n             'rebidevt rebisrtk rebireus rebisrtn',\n             'rebiid',\n             ''\n    chkdav = 'chkddbnm chkdtspc chkdpart chkdscop',\n             'chkdauxe chkdeddn chkdwddn chkddevt chkddelt',\n             'chkdlog  chkdexcp chkdsrtn',\n             'chkdid',\n             ''\n    chkixv = 'chkicrea chkindex chkidbnm chkispce chkipart chkiptix',\n             'chkildef chkiwddn chkidevt chkisrtn',\n             'chkiid',\n             ''\n    perfqv = 'perfdblk perfctl1 perfid perfsubr',\n             ''\n    migrtv = 'migrldef migrpddn migruddn migrssid migrlpar migrldsn',\n             'migrmdsn migrtdsn migrxcls migrmcls migracct migrsubl',\n             'migrid',\n             ''\n    jobcv  = 'jobcard1 jobcard2 jobcard3 jobcard4 jobcard5',\n             ''\n    sticky = 'ssid sqlid acct',\n             'listname',\n             drvrv reorgv copyv runsv quiev uloadv loadv,\n             loadv recovv rebixv chkdav chkixv perfqv migrtv\n    \"VGET (\"sticky jobcv\") PROFILE\"\n\n    panel10 = 'R010P'                       /* Utility selection      */\n    panel12 = 'R012PY'                      /* LISTDEF parm entry     */\n    panel14 = 'R014P'                       /* Template entry         */\n    panel14P= 'R0141P'                      /* Template type popup    */\n    panel20 = 'R020P'                       /* Copy perm entry        */\n    panel22 = 'R022P'                       /* Modify entry           */\n    panel30 = 'R030P'                       /* Runstat entry          */\n    panel40 = 'R040P'                       /* Quiesce entry          */\n    panel50 = 'R050P'                       /* Unload entry           */\n    panel51 = 'R051P'                       /* Unload From table      */\n    panel52 = 'R052P'                       /* Unload From LIST       */\n    panel53 = 'R053P'                       /* Unload From tablespace */\n    panel54 = 'R054P'                       /* Unload From Copy       */\n    panel60 = 'R060P'                       /* Load                   */\n    panel61 = 'R061P'                       /* Load Dsnames           */\n    panel611= 'R0611P'                      /* Load Table names       */\n    panel62 = 'R062P'                       /* Load Table             */\n    panel63 = 'R063P'                       /* Load Index             */\n    panel70 = 'R070P'                       /* Reorg                  */\n    panel71 = 'R071P'                       /* Reorg TS List          */\n    panel72 = 'R072P'                       /* Reorg TS database      */\n    panel73 = 'R073P'                       /* Reorg IX List          */\n    panel74 = 'R074P'                       /* Reorg IX Index         */\n    panel75 = 'R075P'                       /* Reorg deadline parms   */\n    panel80 = 'R080P'                       /* Chkdata                */\n    panel100= 'R100P'                       /* Recover                */\n    panel101= 'R101P'                       /* Recover List           */\n    panel102= 'R102P'                       /* Recover TS/IX          */\n    panel103= 'R103P'                       /* Recover Index          */\n    panel120= 'R120P'                       /* Rebldix                */\n    panel121= 'R121P'                       /* Rebldix List           */\n    panel122= 'R122P'                       /* Rebldix Index Name     */\n    panel123= 'R123P'                       /* Rebldix TableSpace     */\n    panel130= 'R130P'                       /* ChkIndx                */\n    panel131= 'R131P'                       /* ChkIndx List           */\n    panel132= 'R132P'                       /* ChkIndx Index Name     */\n    panel133= 'R133P'                       /* ChkIndx TableSpace     */\n    panel140= 'R140P'                       /* Perform Query          */\n    panel141= 'R141P'                       /* Perform Query select   */\n    panel150= 'R150P'                       /* Migration select       */\n    panel90 = 'R090P'                       /* Member list table      */\n    panel91 = 'R091P'                       /* Jobcard entry screen   */\n    panel93 = 'R093P'                       /* Dataset table display  */\n\n    panelv = 'panel10 panel12 panel14 panel14p panel20 panel22 panel30',\n             'panel40 panel50 panel51 panel52 panel53 panel54',\n             'panel60 panel61 panel611 panel62 panel63',\n             'panel70 panel71 panel72 panel73 panel74 panel75',\n             'panel80',\n             'panel90 panel91 panel93',\n             'panel100 panel101 panel102 panel103',\n             'panel120 panel121 panel122 panel123',\n             'panel130 panel131 panel132 panel133',\n             'panel140 panel141',\n             'panel150',\n             'helptab',\n             ''\n\n/*  x=helpdrvr(helptab 'I /BUILD')                                    */\n\n    \"VPUT (jobcv,copyv,tempv,runsv,quiev,uloadv,loadv,recovv,rebixv,\",\n          \"chkixv,chkdav,reorgv,perfqv,migrtv,\",\n          \"drvrv,panelv,\"panelv\")SHARED\"\n\n    r1prog  = 'RDB20340'                    /* In/Ex filter routine   */\n    gc00T   = 'WARNING'                     /* GC00 message variable  */\n    table   = 'TB'Time('s')\n    table1  = 'TABLE1'\n\n/*--------------------------------------------------------------------*/\n/*  The following string is used to control processing:               */\n/*  - The first component of each 'word' is the action.               */\n/*  - The following components (: seperated) are the xxx_PROCESS      */\n/*    subroutines performed to complete the action. This way the      */\n/*    processing logic can be readily identified from the contents of */\n/*    the variable.                                                   */\n/*    JCL(...) identifies inclusion modules                           */\n/*--------------------------------------------------------------------*/\n    process_matrix = ' ',\n        'JOBCARD=JC                                    ',\n        'LISTD=LISTDEF                                 ',\n        'TEMPL=TEMPLATE                                ',\n        'PERFQ=PERFQ:JCL(JC,J10,J20,JXXX)              ',\n        'COPY=COPYU:JCL(JC,J10,J20,J21)                ',\n        'MODIFY=MODFU:JCL(JC,J20,J22)                  ',\n        'RUNSTAT=RUNSTAT:JCL(JC,J10,J20,J23)           ',\n        'QUIESCE=QUIES:JCL(JC,J10,J20,J24)             ',\n        'UNLOAD=UNLOAD:JCL(JC,J20,J50)                 ',\n        'LOAD=LOAD:JCL(JC,J20,J60)                     ',\n        'REORG=REORG:JCL(JC,J20,J70)                   ',\n        'CHKDATA=CHKDATA:JCL(JC,J20,J80)               ',\n        'CHKINDX=CHKINDX:JCL(JC,J20,J120)              ',\n        'REBLDIX=REBLDIX:JCL(JC,J20,J120)              ',\n        'RECOVER=RECOVER:JCL(JC,J20,J100)              ',\n        'MIGRATE=MIGRATE:JCL(JC,J10,J20,J30):JCL(J31)  ',\n        ' '\n    Call set_vars_1\n\n    x=R0helppf('On')\n\n/*\nperfq = '/'\n*/\n\n/*--------------------------------------------------------------------*/\n/*  Display utility selection Menu selection                          */\n/*--------------------------------------------------------------------*/\nscr1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL10) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If rc /= 0 Then Signal exit1\n    If zcmd='DEBUG' Then Interpret r0debug(debug,scr1)\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab 'I /OPEN')\n        Signal scr1\n    End\n    csr1=;csrp1=\n    Parse var zcmd cmd parm1 parm2 .\n\n/*--------------------------------------------------------------------*/\n/*  Get subsystem name from dynamic field                             */\n/*--------------------------------------------------------------------*/\n    Parse Var sslist . '[' xxx\n    s# = 0\n    Do i=1 To ss#\n        Parse VAR xxx si +1 '[' xxx\n        If si /= '' Then Do\n            If s# = 0 Then s# = i\n            Else Do\n                csr1  = 'SSLIST'\n                csrp1 = ssl + (i-1)*7 + (i%10*10)\n                gc009 = 'Can only select one SSID.'\n                \"SETMSG MSG(GC009)\"\n                Signal scr1\n            End\n        End\n    End\n    If s# = 0 & ssid = '' Then Do\n        csr1  = 'SSLIST'\n        csrp1 = ssl\n        gc009 = 'SSID must be entered or selected from list.'\n        \"SETMSG MSG(GC009)\"\n        Signal scr1\n    End\n    If s# > 0 Then Do\n        ssid = ss.s#\n        sslist = Overlay(' ',sslist,7+7*(s#-1)+2)\n    End\n\n/*--------------------------------------------------------------------*/\n/* Process matrix according to non-space selection values.            */\n/*--------------------------------------------------------------------*/\n    \"VPUT (ssid,sqlid) SHARED\"\n    uproc_string = process_matrix\n    Do While uproc_string /= ''\n        temp1=;temp2=;temp3=;temp4=;temp5=;temp6=;listd1=;\n        Parse VAR uproc_string xxx uproc_string\n        Parse VAR xxx oper1 '=' nexto\n        Interpret \"act =\" oper1\n        If act = '' Then Iterate\n        genolist='ON';jcl_created=0;ulact=;r1macro=1\n        Interpret oper1 \"= ''\"\n        #nexto=nexto\n        Do middle_loop=0\n            Do while nexto /= ''\n                Parse VAR nexto util2 ':' nexto\n                Parse VAR util2 util2 '(' jclp ')'\n                Interpret \"x =\" util2\"_process('\"nexto\"')\"\n                If x > 8 Then Leave middle_loop\n            End\n            If jcl_created Then x = Edit_JCL()\n            nexto=#nexto\n        End\n    End\n    Signal scr1\n\n/*--------------------------------------------------------------------*/\n/*  Exit routine. Save sticky fields in profile                       */\n/*--------------------------------------------------------------------*/\nexit1:\n    x = R0helppf('Off')\n    \"VPUT (\"sticky\") PROFILE\"\n    Do While Queued() > 0                   /* Del open stacks        */\n        Address TSO \"DELSTACK\"\n    End\n    x=helpdrvr(helptab '/CLOSE')\n    Exit\n\n/*--------------------------------------------------------------------*/\n/*  Process PREFormance Query parameter entry                         */\n/*--------------------------------------------------------------------*/\nperfq_process:\n    \"VPUT (\"perfqv runsv reorgv\" nexto) SHARED\"\n    xx = r0perfq(oper1,templib,tempsdef,debug)\n    If xx = 0 Then \"VGET (\"perfqv runsv reorgv\",ldeftype,nexto,ulact\",\n                         \") SHARED\"\n    listd1=\n    If ulact /= '' Then,\n        temp1=reorpddn;temp2=reorcddn;temp3=reorrddn\n    utilid=perfid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process COPY LISTDEF parameter entry                              */\n/*--------------------------------------------------------------------*/\ncopyu_process:\n    \"VPUT (\"copyv\") SHARED\"\n    xx = r0copy(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then \"VGET (\"copyv\") SHARED\"\n    temp1=copycddn;temp2=copyrddn;listd1=copyldef\n    utilid=copyid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process MODIFY LISTDEF parameter entry                            */\n/*--------------------------------------------------------------------*/\nmodfu_process:\n    \"VPUT (\"copyv\") SHARED\"\n    xx = r0modify(oper1,utillib)\n    If xx = 0 Then \"VGET (\"copyv\") SHARED\"\n    listd1=copyldef\n    utilid=copyid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process RUNSTAT LISTDEF parameter entry                           */\n/*--------------------------------------------------------------------*/\nrunstat_process:\n    \"VPUT (\"runsv\") SHARED\"\n    xx = r0runsts(oper1,utillib)\n    If xx = 0 Then \"VGET (\"runsv\") SHARED\"\n    listd1=runsldef\n    utilid=runsid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process QUIESCE parameter entry                                   */\n/*--------------------------------------------------------------------*/\nquies_process:\n    \"VPUT (\"quiev\") SHARED\"\n    xx = r0quiesc(oper1,utillib)\n    If xx = 0 Then \"VGET (\"quiev\") SHARED\"\n    listd1=quieldef\n    utilid=quieid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process UNLOAD parameter entry                                    */\n/*--------------------------------------------------------------------*/\nunload_process:\n    \"VPUT (\"uloadv\" nexto) SHARED\"\n    xx = r0unload(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n          \"VGET (\"uloadv\" nexto genolist ulact tspace partno dsnx\"\n          \"when1Rwhen2 when3 when4 when5 when6 when7 when8\"\n          \") SHARED\"\n    listd1=unldldef;temp1=unldpddn;temp2=unlduddn\n    utilid=ulid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process UNLOAD parameter entry                                    */\n/*--------------------------------------------------------------------*/\nload_process:\n/*--------------------------------------------------------------------*/\n    \"VPUT (\"loadv\") SHARED\"\n    xx = r0load(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"loadv\" genolist loadtab loadudsn) SHARED\"\n    temp1=loadrddn;temp2=loadcddn;temp3=loadeddn;temp4=loaddddn\n    temp5=loadmddn;temp6=loadwddn\n    utilid=loadid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process REORG parameter entry                                     */\n/*--------------------------------------------------------------------*/\nreorg_process:\n    \"VPUT (\"reorgv\" rotl rots roil roix nexto) SHARED\"\n    xx = r0reorg(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"reorgv\" deadlin1 deadlin2 deadlin3 deadlin4\",\n               \"mapping1 mapping2 mapping3 mapping4 report\",\n               \"rotl rots roil roix\",\n               \"tspace partno nexto genolist ulact) SHARED\"\n    listd1=reorldef\n    temp1=reorpddn;temp2=reorcddn;temp3=reorrddn\n    utilid=reorid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process CHECK DATA parameter entry                                */\n/*--------------------------------------------------------------------*/\nchkdata_process:\n    \"VPUT (\"chkdav\" nexto) SHARED\"\n    xx = r0chkdat(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"chkdav\" genolist tspace partno\",\n              \") SHARED\"\n    temp1=chkdeddn;temp2=chkdwddn\n    utilid=chkdid\n    Return xx\n\n    Signal err1\n\n/*--------------------------------------------------------------------*/\n/*  Process CHECK INDEX parameter entry                               */\n/*--------------------------------------------------------------------*/\nchkindx_process:\n    \"VPUT (\"chkixv\" nexto) SHARED\"\n    xx = r0chkix(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"chkixv\" nexto genolist ulact tspace partno sortnum\",\n              \"opertp) SHARED\"\n    listd1=chkildef;temp1=chkiwddn\n    utilid=chkiid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process RECOVER parameter entry                                   */\n/*--------------------------------------------------------------------*/\nrecover_process:\n    \"VPUT (\"recovv\" nexto) SHARED\"\n    xx = r0recovr(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"recovv\" nexto genolist ulact tspace partno dsnx\",\n               \"tocopy rctype) SHARED\"\n    listd1=recoldef\n    utilid=recoid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process ReBuild Index parameter entry                             */\n/*--------------------------------------------------------------------*/\nrebldix_process:\n    \"VPUT (\"rebixv\" nexto) SHARED\"\n    xx = r0rebix(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"rebixv\" nexto genolist ulact tspace partno\",\n               \"sortnum opertp) SHARED\"\n    listd1=rebildef;temp1=rebiwddn\n    utilid=rebiid\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process Migration parameter entry                                 */\n/*--------------------------------------------------------------------*/\nmigrate_process:\n    \"VPUT (\"migrtv\") SHARED\"\n    xx = r0migrat(oper1,utillib,templib,tempsdef)\n    If xx = 0 Then,\n        \"VGET (\"migrtv\",punchdsn,moddsn,mapdsn,tempdsn,password,tablem\",\n              \"unloddsn,sameplex)SHARED\"\n    listd1=migrldef\n    utilid=migrid\n    Return xx\n\nerr1:\n    gc009 = 'Option \"'oper1'\" not developed yet.'\n    \"SETMSG MSG(GC009)\"\n    Signal scr1\n\n/*--------------------------------------------------------------------*/\n/*  Process LISTDEF data                                              */\n/*--------------------------------------------------------------------*/\nlistdef_process:\n    Return r0ldef(utillib,Arg(1))\n\n/*--------------------------------------------------------------------*/\n/*  Process TEMPLATE data                                             */\n/*--------------------------------------------------------------------*/\ntemplate_process:\n    xmsg='your own choosing.'\n    xx = R0templ(templib,tempsdef,xmsg,Arg(1))\n    \"VGET (\"tempv\") SHARED\"\n    Return xx\n\n/*--------------------------------------------------------------------*/\n/*  Process Jobcard                                                   */\n/*--------------------------------------------------------------------*/\nJC_process:\n    x = r0jobcrd(utillib,Arg(1))\n    \"VGET (\"jobcv\") PROFILE\"\n    Return x\n\n/*--------------------------------------------------------------------*/\n/* Edit JCL. Output from file tailoring and present under editor.     */\n/*--------------------------------------------------------------------*/\nEdit_JCL:\n    \"CONTROL ERRORS RETURN\"\n    \"TBEND &LOADTAB\"\n    \"FTCLOSE\"\n    \"VGET ZTEMPF\"\n    Address TSO \"ALLOC DD(ZTEMPF) DS('\"ztempf\"') SHR REU\"\n    \"LMINIT DATAID(DATAID) DDNAME(ZTEMPF)\"\n    \"VPUT r1macro SHARED\"\n    \"EDIT DATAID(&DATAID) MACRO(&XCMD)\"\n    \"LMFREE DATAID(&DATAID)\"\n    Address TSO \"FREE DD(ZTEMPF)\"\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Macro 1 to put notelines into JCL                                  */\n/*--------------------------------------------------------------------*/\nmacro_1:\n    r1macro =\n    \"VPUT r1macro SHARED\"\nn_st = mark(2)                              /* Mark next line         */\n/*\n\n`   Hello &CNAME..\n\n    THis is the JCL generated from the parameters entered.\n\n    Either submit from the command line or use your favourite copy\n    routine to save for posterity.\n\n    The contents will self destruct on ending.\n\n                            ****\n\n    \"A wise man will always check his JCL before submiting it.\"\n    -Confucius...\n\n\n*/\nn_en = mark(-2)                             /* Mark prev 2 line       */\n    \"ISREDIT RES\"\n    call put_notelines\n\n    Exit\n\n/*--------------------------------------------------------------------*/\n/* Macro 1 to put notelines into JCL                                  */\n/*--------------------------------------------------------------------*/\nmacro_2:\n    r1macro =\n    \"VPUT r1macro SHARED\"\nn_st = mark(2)                              /* Mark next line         */\n/*\n\n`   Hello &CNAME..\n\n    * NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE - NOTE *\n\n    You have chosen to execute the LOAD function seperate to the\n    UNLOAD.\n\n    This job should be copied into a permanent member for later\n    submission after the data has been successfully unloaded.\n\n    If you are using FTP your password will be imbedded in the JCL.\n    Suggest entering a dummy password and changing it just prior to\n    job submission. Don't forget to delete the held output as the\n    password will be there also.\n    Alternatively arrange for a generic Userid/password for FTPing.\n\n    The contents will self destruct on ending.\n\n                            ****\n\n    \"A wise man will always check his JCL before submiting it.\"\n    -Confucius...\n\n\n*/\nn_en = mark(-2)                             /* Mark prev 2 line       */\n    \"ISREDIT RES\"\n    call put_notelines\n\n    Exit\n\n/*--------------------------------------------------------------------*/\n/* Build JCL                                                          */\n/*--------------------------------------------------------------------*/\nJCL_process:\n    Do While jclp /= ''\n        Signal on Syntax Name error_off_1\n        Parse VAR jclp jj ',' jclp\n        Interpret \"Call build_COPY_\"jj\n    End\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Routine to build the various types of JCL                          */\n/*    JC         - Obvious.                                           */\n/*    J10        - LISTDEF filter used by:                            */\n/*                 COPY/MODIFY/RUNSTATS                               */\n/*    J20        - DSNUPROC infrastructure                            */\n/*    J21        - COPY/MODIFY                                        */\n/*    J22        - MODIFY                                             */\n/*    J23        - RUNSTATS                                           */\n/*--------------------------------------------------------------------*/\nbuild_copy_JC:\n    Signal Off Syntax\n    Address ISPEXEC\n    If jobcard1 = '' Then Do\n        Call JC_process\n        If jobcard1 = '' Then Drop jobcard1 jobcard2 jobcard3 jobcard4 jobcard5\n    End\n    jcl_created = 1\n    #jc1=jobcard1;#jc3=jobcard3\n    jobcard1 = R0cstrng(Jobcard1,'&UTILITY',oper1,1)\n    jobcard2 = R0cstrng(Jobcard2,'&UTILITY',oper1,1)\n    \"FTOPEN TEMP\"\n    \"FTINCL R0JCS\"\n    jobcard1=#jc1;jobcard3=#jc3\n    If ulact/='NOJ01' Then \"FTINCL R0J01S\"\n    Else ulact=\n\n    Return 0\n\nbuild_copy_j10:\n    Signal Off Syntax\n    If oper1 /= 'PERFQ' Then x = Build_table(utillib'('listd1')','NEW')\n    \"FTINCL R0J10S\"\n    If oper1 /= 'PERFQ' Then \"TBEND &TABLE1\"\n\n    Return 0\n\nbuild_copy_j20:\n    Signal build_copy_jjj\nbuild_copy_j21:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_j22:\n    x = Build_table(utillib'('listd1')','NEW')\nbuild_copy_j23:\nbuild_copy_j231:\nbuild_copy_j24:\n    Signal build_copy_jjj\nbuild_copy_j50:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_j60:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_j70:\nbuild_copy_j701:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_j80:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_j100:\n    Signal build_copy_jjj\nbuild_copy_j120:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_j150:\n    x = Build_templates()\n    Signal build_copy_jjj\nbuild_copy_jx01:\n    Signal build_copy_jjj\nbuild_copy_jjj:\n    Signal Off Syntax\n    jclopt = Substr(jj,2)\n    \"FTINCL R0J20S\"\n    \"TBEND &TABLE1\"\n    If jclopt = 140 Then \"TBEND &PERFCTL1\"\n\n    Return 0\n\nbuild_copy_j30:\n\"CONTROL ERRORS CANCEL\"\n    \"FTINCL R0J30S\"\n    \"TBEND &TABLEM\"\n\"CONTROL ERRORS RETURN\"\n    Return 0\n\nbuild_copy_j31:\n    If jcl_created Then x = Edit_JCL()\n    If migrsubl = 'Y' Then Do\n        jcl_created = 0\n        Return 9\n    End\n    jcl_created = 1\n    #jc1=jobcard1;#jc3=jobcard3\n    jobcard1 = R0cstrng(Jobcard1,'&UTILITY',oper1,1)\n    jobcard2 = R0cstrng(Jobcard2,'&UTILITY',oper1,1)\n    \"FTOPEN TEMP\"\n    \"FTINCL R0J31S\"\n    jobcard1=#jc1;jobcard3=#jc3\n    r1macro=2\n    Return 0\n\nbuild_templates:\n    Do i=1 To 6\n        Interpret 'xxx = temp'i\n        If xxx = '' Then Iterate\n        x = Build_template_table(xxx,'ADD')\n        Interpret 'temp'i'='\n    End\n    Signal build_copy_jjj\n\n/*====================================================================*/\n/* Common sub-routines (one liners)                                   */\n/*====================================================================*/\n/* Generic syntax error for return of control                         */\n/*--------------------------------------------------------------------*/\nsyntaxerr:Interpret syntaxact;Signal Value retlab\n/*--------------------------------------------------------------------*/\n/* Turn error off after syntax detected in JCL build process          */\n/*--------------------------------------------------------------------*/\nerror_off_1:\n    Signal Off Syntax\n    gc009 = 'Process \"'jj'\" not found. Refer to dialog developer.'\n    Address ISPEXEC \"SETMSG MSG(GC009)\"\n    Return 8\n/*--------------------------------------------------------------------*/\n/* Noteline generator                                                 */\n/*--------------------------------------------------------------------*/\nnl_h:Parse Arg n#;\"ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (n#)\";Return 0\n/*--------------------------------------------------------------------*/\n/* Mark line number for instream 'doco'                               */\n/*--------------------------------------------------------------------*/\nMark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff\n/*--------------------------------------------------------------------*/\n/* Establish whether the template is in the user defined dataset or   */\n/* default site definitions.                                          */\n/*--------------------------------------------------------------------*/\nBuild_template_table: Arg imemb,act\n    If Sysdsn(\"'\"templib\"(\"imemb\")'\") = 'OK' Then xx = templib\n    Else                                          xx = tempsdef\n    x = Build_table(xx'('imemb')',act)\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Build a table from a member to be expanded in a skeleton.          */\n/*--------------------------------------------------------------------*/\nBuild_table: Arg ifile,act\n    table1 = 'TABLE1'\n    If act = 'ADD' Then Do\n        \"TBEXIST &TABLE1\"\n        If rc = 12 Then act = 'NEW'\n        Else \"TBBOTTOM &TABLE1\"\n    End\n    If act = 'NEW' Then Do\n        \"TBEND &TABLE1\"\n        \"TBCREATE &TABLE1 NAMES(DATALINE) NOWRITE REPLACE\"\n    End\n    dd = 'UL'Time('s')\n    Address TSO \"ALLOC F(\"dd\") DA('\"ifile\"') SHR REU\"\n    Address TSO \"EXECIO * DISKR \"dd\" (STEM line. FINIS)\"\n    Do j=1 to line.0\n        dataline = line.j\n        \"TBMOD &TABLE1\"\n    End\n    Address TSO \"FREE F(\"dd\")\"\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Put instream data captured to notelines for edit session           */\n/*--------------------------------------------------------------------*/\nput_notelines:\n    chgchar = '`'\n    syntaxact = \"cname = 'there'\"\n    retlab = error_off_1x\n    Signal on Syntax Name syntaxerr\n    cname = R0whome('C')\nerror_off_1x:\n    Call Off Error\n    \"ISREDIT (caps) = CAPS\"; \"ISREDIT CAPS = OFF\"\n    x = nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')\n    Do i=n_st To n_en\n        line = Sourceline(i)\n        If Substr(line,1,1) = chgchar Then Do Forever\n            line = ' 'Substr(line,2)\n            If Index(line,'&') = 0 Then Leave\n            Parse VAR line p1 '&' var '.' p2\n            data = 'line = p1 || 'var' || p2'\n            Interpret data\n        End\n        x = nl_h('*'Substr(line,1,70)'*')\n    End\n    x = nl_h('*'Copies('-',70)'*')\n    \"ISREDIT CAPS = (caps)\"\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Set variables:                                                     */\n/* Note SQLID is the default RACF user group.                         */\n/*--------------------------------------------------------------------*/\nset_vars_1:\n    x=R0site$('drvrv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n\n    valhex  = '0123456789ABCDEF'\n\nIf userid() /= 'C838704' Then Signal bypass1;\ntempsdef = 'TPCICS.C838704.TEMPLATE.DEFAULT';bypass1:\n\n/*--------------------------------------------------------------------*/\n/* Get all DB2 subsystems on system from the subsystem table in memory*/\n/*--------------------------------------------------------------------*/\n    Numeric digits 10\n    cvt  = Storage('10',4)\n    jesct= Storage(d2x(c2d(cvt)+x2d('128')),4)\n    ssct = Storage(d2x(c2d(jesct)+x2d('18')),4)\n    ssct = c2d(ssct)\n    sslist = '       '\n    ssl    = Length(sslist) +2\n    ss#    = 0\n    adr@ = Address()\n    Address TSO\n    xmsg = Msg('Off')\n    Do Forever\n        ssu = Storage(d2x(ssct+20),4)\n        ssu = c2d(ssu)\n        ssi = Storage(d2x(ssu+84),20)\n        If Word(ssi,1) = db2ssid Then Do\n            ssname = Storage(d2x(ssct+8),4)\n/*--------------------------------------------------------------------*/\n/*          Test if DB2 sub-system active                             */\n/*--------------------------------------------------------------------*/\n            \"NEWSTACK\"\n            Queue 'END'\n            'DSN SYSTEM('ssname')'\n            If rc /= 0 Then \"DELSTACK\"\n            Else Do\n/*--------------------------------------------------------------------*/\n                ss#   = ss# +1\n                ss.ss#= ssname\n                sslist = sslist||'[ ]'ssname\n            End\n        End\n        ssct = c2d(Storage(d2x(ssct+4),4))\n        If ssct = 0 Then Leave\n    End\n    xmsg = Msg(xmsg)\n    Address(adr@)\n/*--------------------------------------------------------------------*/\n\n    Return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0DSNRX": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00U\\x01\\x02\"o\\x01\\x021\\x0f\\x12\\x12\\x00%\\x00*\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2002-08-14T00:00:00", "modifydate": "2002-11-06T12:12:55", "lines": 37, "newlines": 42, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Check DB2 REXX API interface and set on/off according to argument.*/\n/*--------------------------------------------------------------------*/\nArg arg1,arg2,debug\n    If debug /= '' Then Trace r\n    Select\n        When arg1 = 'EX' Then Do\n            Address ISPEXEC \"VGET (ssid,sqlstmt,sqlretf) SHARED\"\n            Address DSNREXX \"EXECSQL PREPARE S1 FROM :sqlstmt\"\n            Address DSNREXX \"EXECSQL DECLARE C1 CURSOR FOR S1\"\n            Address DSNREXX \"EXECSQL OPEN C1\"\n            sqlcode = 0\n            flds    = Translate(sqlretf,'  ',':,')\n            sqlretv =\n            Do While sqlcode = 0\n                Address DSNREXX \"EXECSQL FETCH C1 INTO\" sqlretf\n                If sqlcode /= 0 Then Leave\n                Interpret 'sqlretv = sqlretv' flds\n                If Arg(2) = 1 Then Leave\n            End\n            rc_r = sqlcode\n            Address DSNREXX \"EXECSQL CLOSE C1\"\n            Address ISPEXEC \"VPUT (sqlretv) SHARED\"\n            Return rc_r\n        End\n        When arg1 = 'ON' Then Do\n            Address ISPEXEC \"VGET (ssid) SHARED\"\n            Address TSO 'SUBCOM DSNREXX'     /* Host cmd mode availe? */\n            If rc Then x = RXSUBCOM('ADD','DSNREXX','DSNREXX')\n            Address DSNREXX \"CONNECT\" ssid\n        End\n        Otherwise Do\n            Address DSNREXX \"DISCONNECT\"\n        End\n    End\n    Return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0EDTL": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00E\\x01\\x020_\\x01\\x021\\x1f\\x16D\\x00^\\x00E\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-11-01T00:00:00", "modifydate": "2002-11-07T16:44:45", "lines": 94, "newlines": 69, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------ooo000OOOO000ooo--------------------------*/\n/*                                                                    */\n/* Program - R0EDTL                                                   */\n/*                                                                    */\n/* Purpose - To force user into a valid device type through a series  */\n/*           of panels.                                               */\n/*                                                                    */\n/* Parameters:                                                        */\n/*    DASD - Bring up the DASD list.                                  */\n/*    TAPE - Bring up the TAPE list.                                  */\n/*    LIST - Return a list of DAS and TAPEs to the caller.            */\n/*         - (blank) prompt for DASD/TAPE selection.                  */\n/*                                                                    */\n/* Members required to package this feature:                          */\n/*   REXX:                                                            */\n/*         R0EDTL       - This driver                                 */\n/*                                                                    */\n/*   Panel:                                                           */\n/*         R0142P       - POP up panel for device TYPE selection.     */\n/*         R0143P       - POP up panel for device selection ( 1-16).  */\n/*         R0144P       - POP up panel for device selection (17-32).  */\n/*         R0145P       - POP up panel for device selection (33-48).  */\n/*                                                                    */\n/*   Messages:                                                        */\n/*         GC00         - Generic message member                      */\n/*                                                                    */\n/*   Programs:                                                        */\n/*         EDTLIST      - Assembler program to provide a list of      */\n/*                        generic device names for a device type in a */\n/*                        REXX variable.                              */\n/*                                                                    */\n/*--------------------------------------------------------------------*/\n    Arg edt,row,col,debug\n    If debug /= '' Then Trace r\n    Address ISPEXEC\n    If row = '' Then row = 5\n    If col = '' Then col = 5\n    If edt /= '' Then Signal Call_edtlist\npop_up_2:\n    zwinttl  = 'Device Types'\n    \"ADDPOP ROW(\"row\") COLUMN(\"col\")\"\n    \"DISPLAY PANEL(R0142P)\"\n    rc1 = rc\n    \"REMPOP\"\n    If rc1 /= 0 Then Do\n        gc009 = 'Device type selection abandoned.'\n        \"SETMSG MSG(GC009)\"\n        Return '?'\n    End\nCall_edtlist:\n    If edt = 'LIST' Then Do\n        list = expand_edt_list('DASD')\n        Return list expand_edt_list('TAPE')\n    End\n    Call edtlist\n    edtocr = c2d(Substr(edtlist,5,4))\n    edtlist= Substr(edtlist,9)\n    If Word(edtlist,1) = 'Error' Then Do\n        gc009 = 'Error found while looking for device type \"'EDT'\".',\n                'Please refer to dialogue developer.'\n        \"SETMSG MSG(GC009)\"\n        Return 8\n    End\n    Do i=1 To edtocr\n        Interpret 'edtt'i' = Substr(edtlist,(i-1)*8+1,8);T'i'='i\n    End\npop_up_3:\n    zwinttl  = 'Device Selection'\n    \"ADDPOP ROW(\"row\") COLUMN(\"col\")\"\n    Select\n        When edtocr < 17 Then \"DISPLAY PANEL(R0143P)\"\n        When edtocr < 33 Then \"DISPLAY PANEL(R0144P)\"\n        Otherwise             \"DISPLAY PANEL(R0145P)\"\n    End\n    rc1 = rc\n    \"REMPOP\"\n    If rc1 /= 0 Then Do\n        gc009 = 'Device type selection abandoned.'\n        \"SETMSG MSG(GC009)\"\n        Signal pop_up_2\n    End\n    Interpret 'Return Strip(edtt'tt')'\n\nexpand_edt_list:\n    edt = Arg(1)\n    Call edtlist\n    edtocr = c2d(Substr(edtlist,5,4))\n    edtlist= Substr(edtlist,9)\n    xx=\n    Do i=1 To edtocr\n        xx=xx Strip(Substr(edtlist,(i-1)*8+1,8))\n    End\n    Return xx\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0HELP": {"ttr": 7681, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01,\\x00\\x01\\x01\\t0\\x0f\\x01\\t0\\x0f\\t\\x15\\x03\\x96\\x03\\x95\\x00\\x00\\xc1\\xd3\\xc5\\xe7@@@@@@'", "ispf": {"version": "01.44", "flags": 0, "createdate": "2009-10-27T00:00:00", "modifydate": "2009-10-27T09:15:01", "lines": 918, "newlines": 917, "modlines": 0, "user": "ALEX"}, "text": "%headline=' DB2 Utilities '\n.1. DB2 Utility Selection.\n!G\n This screen is used to enter select the DB2 system and the action(s) you want\n to perform against them.\n\n You will be presented with a list of DB2 system ids from which one must be\n selected. This list is made up of all the DB2 susb-systems defined on the LPAR.\n Those coloured green are actually active while those in pink are not running or\n!               g    b                                   p   b\n are unavailable.\n\n You will need to enter an SQLID which by default will be set to your RACF\n!                          y     b\n group.\n\n Select as many actions as you wish to process. Each action will take you into\n sub panels for data/parameter entry. If you follow the bouncing ball and do not\n prematuraly exit panels at the end you will be presented with JCL that you can\n either submit or save for later use.\n\n\n.2. Copy/Modify Parameter Entry.\n!G\n This screen is used to enter the parameters for the COPY/MODYFY process.\n!                                                    y           b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  local      - Existing template name to be used for the local copy.  You may\n!y           b\n               enter * or / as per the list name.\n!                    yb   yb\n  remote     - Existing template name to be used for the remote copy. Same as\n!y           b\n               for local template.\n  SHR level  - Share level. Valid values are C(hange) or R(eference).\n!y           b                               yb          yb\n  last copy  - Number of hours since the last copy taken. Default is 23hrs.\n!y           b                                                      y b\n  Age        - Number of days for MODIFY processing only.\n!y           b\n Enter DEFault on the command line to reset parameters to site/system defaults.\n!      y      b\n\n.3. Modify Parameter Entry.\n!G\n This screen is used to enter the parameters for the MODIFY process.\n!                                                    y     b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  last copy  - Number of hour since the last copy taken.\n!y           b\n  Age        - Number of hour for MODIFY processing only.\n!y           b\n Enter DEFault on the command line to reset parameters to site/system defaults.\n!      y      b\n\n.4. RunStat Parameter Entry.\n!G\n This screen is used to enter the parameters for the RUNSTATS process.\n!                                                    y        b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  Update     - Enter the first 2 characters to select/expand the appropriate\n!y           b\n               value. Default is ALL.\n!                                y  b\n  History    - Same as for update.\n!y           b\n  The value of the Update field will determine the valid values for the History\n  field as follows:\n               Update option    History options\n!              1              b 1                            b\n               ALL              ALL, ACCESSPATH, SPACE, NONE\n!              y                g\n=g\n               ACCESSPATH       ACCESSPATH, NONE\n               SPACE            SPACE, NONE\n               NONE             NONE\n=\n  SHR level  - Share level. Valid values are Change or Reference. Default is\n!y           b                               yb        yb\n               REFERENCE.\n!y             y        b\n  Sample     - Sample percentage. Default is 25.\n!y           b                               y b\n\n.5. Quiesce Parameter Entry.\n!G\n This screen is used to enter the parameters for the RUNSTATS process.\n!                                                    y        b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  Write      - ???\n!y           b                                                             yb\n\n.6. Unload.\n!G\n The first UNLOAD screen is an unload type selection screen. Only one selection\n!          y      b\n is permitted. Valid types are:\n=y           b\n  Table      - From a table\n  List       - Using a predefined LISTDEF statements\n  Tablespace - From a tablespace\n  FromCopy   - From a copy\n=\n\n.6a. Unload from a Table.\n!g   2                   g\n This screen is used to enter the parameters for the UNLOAD from TABLE process.\n!                                                    y      b    y     b\n  Table name - Two part entry consisting of the owner and the table name that\n!y           b\n               will be combined as owner.tablename in the JCL generated.\n!                                  y               b\n  Sample     - Numeric percentage to sample for unloadimng. This field is\n!y           b\n  Limit      - Numeric output limit for unloadimng. This field is optional.\n!y           b\n  WHEN parms - SQL statements to be processed. This is a free format field and\n!y           b\n               any wrap around text must be keyed asis without spaces. The\n               WHEN(....) will be wrapped arount this text for you free of\n!              y    b   yb\n               charge.\n\n  PunchDDN   - Existing predefined template's name to be used for the PUNCH DD.\n!y           b                                                        y     b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n  UNLDDN     - Existing predefined template's name to be used for the UNLOAD DD.\n!y           b                                                        y      b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n  Field spec - If field specifications are required it will need to be manually\n!r           b\n               inserted into the JCL generated.\n\n.6b. Unload using a list.\n!g   2                   g\n This screen is used to enter the parameters for the UNLOAD from LIST process.\n!                                                    y      b    y    b\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  Sample     - Numeric percentage to sample for unloadimng. This field is\n!y           b\n  Limit      - Numeric output limit for unloadimng. This field is optional.\n!y           b\n  PunchDDN   - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  UNLDDN     - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  Field spec - If field specifications are required it will need to be manually\n!r           b\n               inserted into the JCL generated.\n\n.6c. Unload from a TableSpace.\n!g   2                        g\n This screen is used to enter the parameters for the UNLOAD from TABLESPACE\n!                                                    y      b    y\nprocess.\n  Tablespace - Two part entry consisting of the database name and the tablespace\n!y           b\n               name that will be combined as dbname.tablespace in the JCL\n!                                            y                 b\n               generated.\n  Part       - Part Level may be provided to unload a partlevel of partitioned\n!y           b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Sample     - Numeric percentage to sample for unloadimng. This field is\n!y           b\n  Limit      - Numeric output limit for unloadimng. This field is optional.\n!y           b\n  PunchDDN   - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  UNLDDN     - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  Field spec - If field specifications are required it will need to be manually\n!r           b\n               inserted into the JCL generated.\n\n.6d. Unload from COPY.\n!g   2                g\n This screen is used to enter the parameters for the UNLOAD from COPY process.\n!                                                    y      b    y    b\n  Tablespace - Two part entry consisting of the database name and the tablespace\n!y           b\n               name that will be combined as dbname.tablespace in the JCL\n!                                            y                 b\n               generated.\n  Sample     - Numeric percentage to sample for unloadimng. This field is\n!y           b\n  Limit      - Numeric output limit for unloadimng. This field is optional.\n!y           b\n  PunchDDN   - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  UNLDDN     - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  Field spec - If field specifications are required it will need to be manually\n!r           b\n               inserted into the JCL generated.\n If copies are found, a dataset selection list will be presented.\n One dataset must be selected to proceed to the JCL generation phase.\n\n.7. Load.\n!G\n The load processing will present a two screen selection menu. Both screens will\n need to be processed to generate JCL.\n a. The first screen will permit the entry of the unloaded datasets and\n!g b\n    subsequent processing of destination table name.\n b. The second screen will permit the entry of runtime control parameters.\n!g b\n\n.7a. Load-Input dataset name and destination table name specification.\n!g   2                                                                g\n This screen permits the entry of the PUNCH and UNLOAD datasets created by an\n!                                     y     b   y      b\n \"external\" unload process.\n You may enter Y in the browse prompt to browse the appropriate dataset.\n!              yb\n The PUNCH dataset is used to extract the table names that were unloaded into\n!    y    b\n the UNLOAD dataset.\n!    y     b\n You will be presented with an ISPF table display of the unoaded tables whose\n destination names may be changed by overtyping the presented values.  The count\n at the end is the number of other tables that are stored in the same tablespace\n the destined table will go to. This will be used for warnings if replace is\n specified and the count is greater than 1.\n Notes - Hitting [ENTER] will register any changes made and return to the screen\n!w       b\n         for presentation purposes.  When the first/next [ENTER] is hit, without\n         changes, the existance of the destined tables will be verified and any\n         errors advised accordingly.\n       - Hitting END PF key will abandon the verification process and\n!w       b\n         return to the load screen.\n\n.7b. Load-Control parameter specification.\n!g   2                                    g\n This screen permits the entry of the following cotrol parameters:\n=y           w b\n  Resume     - No or Yes.\n  SHR Level  - None or Change depending on the value of Resume and specifies the\n               extent to which applications can concurrently access the table\n               space.\n  Replace\n  Statistics:\n!b\n  Update\n  History\n  Sample\n  Sortkeys\n  Sortdevt\n  Sortnum\n  Templates  - Existing predefined template's name to be used for the PUNCH DD.\n!y           w b                                                      y     b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n=b\n  The following templates can be specified:\n=y           wb\n  ErrDDN     -\n  DiscarDD   -\n  MapDDN     -\n  WorkDDN    -\n  CopyDDn    -\n  Recovery   -\n=\n\n\n.8. Reorg.\n!G\n The first screen is a reorg type selection screen. Only one selection is\n permitted. Valid types are:\n=y           b\n  List       - Using a predefined LISTDEF statements\n  TableSpace - Tablespace\n=\n.8a. Reorg using List.\n!g   2                g\n This screen is used to enter the parameters for reorgs using LIST process.\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n               screen.\n  SHR level  - Can have the values of CHANGE, REFERENCE or NONE.\n               The value of this field will determine which indented sub\n               fields below have to be entered.\n    If NONE, all sub fields will be ignored.\n    If CHANGE or REFERENCE the following DEADLINE specifications are required:\n\n              Deadline:         :           Sign:   Value:\n              Drain wait:        Retry:     Retry delay:\n              Mappingtable:          .                       Maxro:\n              Drain:          Longlog:           Delay:      Timeout:\n  Fastswitch:            Yes or No\n Common fields:\n  WORKDDN    - Existing predefined template's name to be used for the PUNCH DD.\n               You may enter * to display a member selection list to chose from.\n               Alternatively you may enter / to enter the template member\n               creation/modification screen.\n  Sortdevt   - Enter valid device type. Default is SYSALLDA.\n  Sortnum    - Specifies the number of temporary data sets to be dynamically\n               allocated by the sort program.\n\n\n\n.9. Check Data.  NOT STARTED........\n!G               R\n\n.10. Check Index.\n!G\n The first screen is a rebuild index type selection screen. Only one selection\n is permitted. Valid types are:\n=y           b\n  List       - Using a predefined LISTDEF statements\n  TableSpace - Tablespace\n  Index      - Index\n=\n\n.10a. Check Index using List.\n!g    2                      g\n This screen is used to enter the parameters for the Check Index using LIST\n!                                                    y           b     y\n process.\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n Common fields:\n  WORKDDN    - Existing predefined template's name to be used for the PUNCH DD.\n!y           b                                                        y     b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n  Sortdevt   - Enter valid device type. Default is SYSALLDA.\n!y           b\n  Sortnum    - Specifies the number of temporary data sets to be dynamically\n!y           b\n               allocated by the sort program.\n\n.10b. Check Index from Tablespace.\n!g    2                             g\n This screen is used to enter the parameters for the Check Index of TableSpace\n!                                                    y           b  y\n process.\n Parameters:\n  Tablespace - Two part entry consisting of the database name and the tablespace\n!y           b\n               name that will be combined as dbname.tablespace in the JCL.\n!                                            y                 b\n  Part       - Part Level may be provided to rebuild a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n For further details of remainig fields, refer to \"Rebuild Index using List\"\n!                                                  g                       b\n above.\n\n.10c. Check Index from Index.\n!g    2                        g\n This screen is used to enter the parameters for the Check Index using an\n!                                                    y           b\n Index.\n!y    b\n Parameters:\n  Index      - Two part entry consisting of the creator name and the index name\n!y           b\n               that will be combined as creator.index in the JCL generated.\n!                                       y             b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Part       - Part Level may be provided to rebuild a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n For further details of remainig fields, refer to \"Rebuild Index using List\"\n!                                                  g                       b\n above.\n\n\n.11. Rebuild Index Parameter Entry.\n!G\n The first screen is a rebuild index type selection screen. Only        one\n selection is permitted. Valid types are:\n=y           b\n  List       - Using a predefined LISTDEF statements\n  TableSpace - Tablespace\n  Index      - Index\n=\n\n.11a. Rebuild Index using List.\n!g    2                        g\n This screen is used to enter the parameters for the Rebuild Index using LIST\n!                                                    y             b     y\n process.\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n Common fields:\n  Reuse      - Valid values are Reuse or  (blank).\n!y           b                  y     b  Yb\n  Update     - Enter the first 2 characters to select/expand the appropriate\n!y           b\n               value. Default is ALL.\n!                                y  b\n  History    - Same as for update.\n!y           b\n  The value of the Update field will determine the valid values for the History\n  field as follows:\n               Update option    History options\n!              1              b 1                            b\n               ALL              ALL, ACCESSPATH, SPACE, NONE\n!              y                g\n=g\n               ACCESSPATH       ACCESSPATH, NONE\n               SPACE            SPACE, NONE\n               NONE             NONE\n=\n  WORKDDN    - Existing predefined template's name to be used for the PUNCH DD.\n!y           b                                                        y     b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n  Sortdevt   - Enter valid device type. Default is SYSALLDA.\n!y           b\n  Sortnum    - Specifies the number of temporary data sets to be dynamically\n!y           b\n               allocated by the sort program.\n  Sortkeys   - Sortkeys or  (blank).  Specifies that index keys are to be sorted\n!y           b y        b  Yb\n               and built in parallel during the SORTBLD phase to improve\n               performance.\n\n.11b. Rebuild Index from Tablespace.\n!g    2                             g\n This screen is used to enter the parameters for the Rebuild Index of TableSpace\n!                                                    y             b  y\n process.\n Parameters:\n  Tablespace - Two part entry consisting of the database name and the tablespace\n!y           b\n               name that will be combined as dbname.tablespace in the JCL.\n!                                            y                 b\n  Part       - Part Level may be provided to rebuild a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n For further details of remainig fields, refer to \"Rebuild Index using List\"\n!                                                  g                       b\n above.\n\n.11c. Rebuild Index from Index.\n!g    2                        g\n This screen is used to enter the parameters for the Rebuild Index using an\n!                                                    y             b\n Index.\n!y    b\n Parameters:\n  Index      - Two part entry consisting of the creator name and the index name\n!y           b\n               that will be combined as creator.index in the JCL generated.\n!                                       y             b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Part       - Part Level may be provided to rebuild a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n For further details of remainig fields, refer to \"Rebuild Index using List\"\n!                                                  g                       b\n above.\n\n\n.12. Recover Parameter Entry.\n!G\n The first RECOVER screen is a recover type selection screen. Only one selection\n!          y       b\n is permitted. Valid types are:\n=y           b\n  List       - Using a predefined LISTDEF statements\n  DB2 Object - Tablespace/Indexspace\n  Index      - Index\n=\n\n.12a. Recover using List.\n!g    2                  g\n This screen is used to enter the parameters for the RECOVER using LIST process.\n!                                                    y       b     y    b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n\n.12b. Recover DB2 Object.\n!g    2                  g\n This screen is used to enter the parameters for the RECOVER of DB2 OBJECT\n!                                                    y       b  y\n process.\n Parameters:\n  Db2 Object - Two part entry consisting of the database name and the\n!y           b\n               table/indexspace name that will be combined as dbname.xxxxxspace\n!                                                             y      w    y\n               in the JCL, where xxxxx represent the table/index processed.\n!                                w     b\n               generated.\n  Part       - Part Level may be provided to unload a partlevel of partitioned\n!y           b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Type       - Must be TS|IX to identify tablespace|indexspace respectively.\n!y           b         y by  b\n               tablespaces. This field is optional (and part 0 is assumed).\n  To         - Recover to Tocopy, toLastcopy or tolastFullcopy. Specify the\n!y           b            yb        yb                yb\n               highlighted character to expand to the appropriate value.\n               Note - If TOCOPY is selected, a dataset selection list will be\n!              w    b    y      b\n                      presented.  One dataset must be selected to proceed to the\n                      JCL generation phase.\n  Option 1   - Valid values are Reuse or Logonly.  Specify the highlighted\n!y           b                  yb       yb\n               character to expand to the appropriate value.\n\n.12c. Recover Index.\n!g    2             g\n This screen is used to enter the parameters for the RECOVER of Index process.\n!                                                    y       b  y     b\n Parameters:\n  Index      - Two part entry consisting of the creator name and the index name\n!y           b\n               that will be combined as creator.index in the JCL generated.\n!                                       y             b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Part       - Part Level may be provided to recover a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n  To         - Refer to \"Recover DB2 Object\" above.\n!y           b           g                 b\n  Option 1   - Refer to \"Recover DB2 Object\" above.\n!y           b           g                 b\n\n\n.13. Migration Parameter Entry.\n!R\n Set templates up with &SSID. as the 2nd. level qualifier for substitution.\n!                      y     b\n Use &LPAR. in MODPUNCH dataset name to include destination LPAR in dsname.\n!    y     b   y       b\n     MODPUNCH: Dataset of all the PUNCH datasets in one\n     SYSMAP  : ???\n     SSID    : Destination DB2 system id.\n     Sub load: Indicate whether the load unload and migrate/load should be\n               executed in one job or seperate jobs.\n   Foreign system -\n     LPAR    : Enter destination LPAR if not on same MVS system.\n     TempDSN : Dataset name to use for FTPing MODPUNCH and UNLOAD dataset to\n               alternate system.\n     Password: Password on destination LPAR\n               Note - Password will be imbedded in the JCL generated. If FTP\n                      is to be used, it is highly recommended that message\n                      class should be to the bit bucket (class Z) or held\n                      output deleted immediately after execution.\n                      Alternatively arrange for an alternate userid for FTP\n                      purposes only.\n     Account : Account on destination system.\n     Ex Class: Execution class (must be a valid class on destination system)\n     MsgClass: Message   class (must be a valid class on destination system)\n\n.20. LISTDEF Parameter Entry.\n!G\n This screen is used to enter command to be passed to the LISTDEF command. The\n list name supplied will be used to permanently store the parameters entered.\n You may enter a * in the neme field to bring up a selection list for all\n!                yb\n members in that dataset. Use option C to create/overwite the member or A to\n!                                    yb                                 yb\n append entered parameters. The member may also be manually edited for fine\n tuning.\n You may populate the screen by enetering an existing member name (or select\n using the * option).  The member can be modidied or saved under another name\n!          yb\n after changes.\n\n Parameters (Room for 33 entries on non-split Model4 terminal):\n  Tablespace - Use this field to enter a 2 level qualifier. * and % wildcards\n!            b                                              yb    yb\n               may be used to DB2 syntax.  2nd. qualifier may be omitted if set\n               to *. Name validation checks will be performed.\n!                 yb\n  TS/IX      - Enter TS or IX to identify as tablespace or indexspace. IX will\n!y           b       y b   y b                                         y b\n               identify an INDEXSPACE while any other value (including a blank)\n               will default to TABLESPACE.\n  Inc/Exc    - Enter I(nclude) or E(xclude) to identify action. E will identify\n!y           b       yb           yb                            yb\n               exclusion while any other value (including a blank) will default\n               to include.\n  RI         - Any non blank value will specify RI.\n!y           b                                  y b\n  Part       - Any non blank value will specify PARTLEVEL.\n!y           b                                  y        b\n\n Example:\n\n List name : ALEX1    options:   C(reate) or A(ppend)\n Parameters:\n             DB2 Object           TS/IX  Inc/Exc   RI  Part\n             DSNRLST  . *          TS    INCLUDE        /\n             DSN8*    . *          TS    INCLUDE        /\n             BMC*     . *          TS    INCLUDE        /\n                      .\n\n.21. Template Parameter Entry.\n!G\n This screen is used to enter template parameters. The template name supplied\n will be used to permanently store the parameters entered.  You may enter a * in\n!                                                                           yb\n the neme field to bring up a selection list for all members in that dataset.\n Use option C to create/overwite the member or A to append entered parameters.\n!           yb                                 yb\n The member may also be manually edited for fine tuning.\n  template   - Use this field to enter the member name to store under. You may\n!y           b\n               enter a * to be presented with a member selection list.\n!                      yb\n  Type       - Use this field to identify the type of template being created or\n!y           b\n               updated. Enter ? to display a popup panel of valid template\n!                             yb\n               types. In the popup panel, enter the appropriate number to have\n               the name placed in the type field. This value will be displayed\n               in the template member selection list to identify the different\n               types of templates.\n               Valid templates in the popup panel:\n                 1 CopyDDN\n!               y  g   b\n                 2 DiscarDDN\n!               y  g     b\n                 3 ErrDDN\n!               y  g  b\n                 4 FilterDDN\n!               y  g     b\n                 5 InDDN\n!               y  g b\n                 6 MapDDN\n!               y  g  b\n                 7 PunchDDN\n!               y  g    b\n                 8 RecoveryDDN\n!               y  g       b\n                 9 UnlDDN\n!               y  g  b\n                10 WorkDDN\n!               y  g   b\n  Action     - Enter C to create/replace member.\n!y           b       yb\n Parameters:\n  disp       - Three field input area for disposition parameters. You only need\n!y           b\n               to enter the first character of MOD, NEW, SHR or OLD and\n!                                              yb   yb   yb     yb\n               CATALG, DELETE, KEEP, PASS or UNCATLG.\n!              yb      yb      yb    yb      yb\n  unit       - Valid unit. Generally should be CART or SYSALLDA.\n!y           b                                 yb      yb\n  trtch      - Hardware compression for CART. Enter the first character of NONE,\n!y           b                          y   b\n               COMP or NOCOMP.\n!              yb      yb\n  stack      - YES or NO.\n!y           b y  b   y b\n  vol count  - Numeric number of volumes. Defult 5.\n!y           b                                   gb\n  DCB        - Model DCB dataset required for unit of CART.\n!y           b                                        y   b\n  space      - Space parameters required for non CART.\n!y           b                               y       b\n Enter DEFault on the command line to reset parameters to site/system defaults.\n!      y       b\n\n.22. Jobcard Entry.\n!G\n This screen is used to enter jobcard parameters to be used in all the JCL\n generated. Customise it to your satisfaction.\n Leave the program name as &UTILITY as it will be substituted by the utility\n!                          y        b\n operation being proxessed.\n\n Enter DEFault on the command line to reset parameters to site/system defaults\n!      y       b\n from the R0SITE$ REXX member.\n!         y      b\n\n.30. DB2 Performance Queries\n!R\n The following queries can be requested:\n\n Runstats information:\n=g\n.30a. Table space without RUNSTATS information\n.30b. Indexes without RUNSTATS information\n.30c. Table spaces with more than 10 percent relocated rows\n.30d. Indexes with clustering level problems\n.30e. Table spaces with more than 5 percent dropped space\n.30f. Table spaces with locking size = 'S' (table space locking)\n.30g. Index levels\n.30h. Indexes with a large leaf page distance\n.30i. Indexes on tables with fewer than 6 pages\n.30j. Indexes not used by any plans or packages\n.30k. Table spaces containing more than one table\n.30l. Table spaces without SPACE information\n.30m. Indexes without SPACE information\n Space information:\n!b\n.30n. Table spaces exceeding allocated primary quantity\n.30o. Indexes exceeding allocated primary quantity\n.30p. Allocated and used space for table spaces\n=\n\n\n.GD. Global site Defaults.\n!G\n This screen is used to enter GLOBAL default site parameters.\n Most fields are sticky fields, however, defaults can be reset from these\n values.\n Points of interest:\n!g\n    HLQ's -\n!y        b\n               The dual option is for combining the sysprefix.userid (as at\n!                  y    b                           y                b\n               Telstra). Other is an up to 2 level qualified prefix.\n!                        y     b\n      For DSN: Identify what high level qualifier is to be used for a prefix to\n!y           b\n               the DSN template name.\n      For Lib: Identify what high level qualifier is to be used for the stored\n!y           b\n               LIBDEFs and templates.\n      For Wrk: Identify what high level qualifier is to be used for work\n!y           b\n               datasets.\n    DSN      : This is the template dataset name to use. (Note, this is the low\n!y           b\n               level quialifiers and will be combined with the HLQ for DSN to\n               arrive at the final name.\n\n`                        (End of Global site Defaults.)\n!G\n*\n*-- INDEX -------------------------------------------------------------*\n*\n#I ?\n                                   I. Index.\n!G                                                                             G\n=Gb                                                                            G\n\n&    Hello &CNAME..\n\n     The following topics will be presented in sequence or fast\n     tracked by code:\n=Gb   2b                                                                       G\n      1  DB2 Utility Selection\n      2  Copy\n      3  Modify\n      4  Runstats\n      5  Quiesce\n      6  Unload\n=Gb   2 b                                                                      G\n      6a  From a Table.\n      6b  Using a list.\n      6c  From a TableSpace.\n      6d  From COPY.\n      7  Load\n!Gb   2b                                                                       G\n      7a  Input dataset name and destination table name specification.\n      7b  Control parameter specification.\n=Gb   2b                                                                       G\n      8  Reorg\n      9  Check Data\n     10  Check Index\n!Gb  2 b                                                                       G\n=Gb  2  b                                                                      G\n     10a  Using List.\n     10b  From Tablespace.\n     10c  From Index.\n     11  Rebuild Index\n!Gb  2 b                                                                       G\n     11a  Using List.\n     11b  From Tablespace.\n     11c  From Index.\n     12  Recover\n!Gb  2 b                                                                       G\n     12a  Using List.\n     12b  From DB2 Object.\n     12c  From Index.\n=Gb  2 b                                                                       G\n     13  Migrate (using list)\n     20  Listdef\n     21  Template\n     22  Jobcard\n     30  DB2 Performance Queries.\n=Gb  2  b                                                                      G\n     30a Table space without RUNSTATS information\n     30b Indexes without RUNSTATS information\n     30c Table spaces with more than 10 percent relocated rows\n     30d Indexes with clustering level problems\n     30e Table spaces with more than 5 percent dropped space\n     30f Table spaces with locking size = 'S' (table space locking)\n     30g Index levels\n     30h Indexes with a large leaf page distance\n     30i Indexes on tables with fewer than 6 pages\n     30j Indexes not used by any plans or packages\n     30k Table spaces containing more than one table\n     30l Table spaces without SPACE information\n     30m Indexes without SPACE information\n     30n Table spaces exceeding allocated primary quantity\n     30o Indexes exceeding allocated primary quantity\n     30p Allocated and used space for table spaces\n=Gb                                                                            G\n\n\n!G\n\n     The following topics will only be presented by code:\n!Gb                                                                            G\n?TN (HELPTN) *\n?TT (HELPTT) *\n     TN  Tutorial Navigation.\n!Gb  2 b                                                                       G\n\n=Gb                                                                            G\n\n                                (End of Index.)\n!G                                                                             G\n Enter I on the command line to return to this index.\n!b     yb\n Enter END PF key to exit tutorial.\n!b     y   b                                                          b\n)END\n=Gy      b                                                                     G\n      1. DB2 Utility Selection\n      2. Copy\n      3. Modify\n      4. Runstats\n      5. Quiesce\n      6. Unload\n      6a. From a Table.\n      6b. Using a list.\n      6c. From a TableSpace.\n      6d. From COPY.\n      7. Load\n      7a. Input dataset name and destination table name specification.\n      7b. Control parameter specification.\n      8. Reorg\n      9. Check Data\n     10. Check Index\n     10a. Using List.\n     10b. From Tablespace.\n     10c. From Index.\n     11. Rebuild Index\n     11a. Using List.\n     11b. From Tablespace.\n     11c. From Index.\n     12. Recover\n     12a. Using List.\n     12b. From DB2 Object.\n     12c. From Index.\n     13. Listdef\n     14. Template\n     15. Jobcard\n     16. DB2 Performance Queries.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0HELP#": {"ttr": 2051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01*\\x00U\\x01\\x02#O\\x01\\x022/\\x15\\x18\\x03\\x95\\x03r\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xd9\\xc7\\xf1@@@'", "ispf": {"version": "01.42", "flags": 0, "createdate": "2002-08-22T00:00:00", "modifydate": "2002-11-18T15:18:55", "lines": 917, "newlines": 882, "modlines": 0, "user": "SYSPRG1"}, "text": "%headline=' DB2 Utilities '\n#1. DB2 Utility Selection.\n!G\n This screen is used to enter select the DB2 system and the action(s) you want\n to perform against them.\n\n You will be presented with a list of DB2 system ids from which one must be\n selected. This list is made up of all the DB2 susb-systems defined on the LPAR.\n Those coloured green are actually active while those in pink are not running or\n!               g    b                                   p   b\n are unavailable.\n\n You will need to enter an SQLID which by default will be set to your RACF\n!                          y     b\n group.\n\n Select as many actions as you wish to process. Each action will take you into\n sub panels for data/parameter entry. If you follow the bouncing ball and do not\n prematuraly exit panels at the end you will be presented with JCL that you can\n either submit or save for later use.\n\n\n#2. Copy/Modify Parameter Entry.\n!G\n This screen is used to enter the parameters for the COPY/MODYFY process.\n!                                                    y           b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  local      - Existing template name to be used for the local copy.  You may\n!y           b\n               enter * or / as per the list name.\n!                    yb   yb\n  remote     - Existing template name to be used for the remote copy. Same as\n!y           b\n               for local template.\n  SHR level  - Share level. Valid values are C(hange) or R(eference).\n!y           b                               yb          yb\n  last copy  - Number of hours since the last copy taken. Default is 23hrs.\n!y           b                                                      y b\n  Age        - Number of days for MODIFY processing only.\n!y           b\n Enter DEFault on the command line to reset parameters to site/system defaults.\n!      y      b\n\n#3. Modify Parameter Entry.\n!G\n This screen is used to enter the parameters for the MODIFY process.\n!                                                    y     b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  last copy  - Number of hour since the last copy taken.\n!y           b\n  Age        - Number of hour for MODIFY processing only.\n!y           b\n Enter DEFault on the command line to reset parameters to site/system defaults.\n!      y      b\n\n#4. RunStat Parameter Entry.\n!G\n This screen is used to enter the parameters for the RUNSTATS process.\n!                                                    y        b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  Update     - Enter the first 2 characters to select/expand the appropriate\n!y           b\n               value. Default is ALL.\n!                                y  b\n  History    - Same as for update.\n!y           b\n  The value of the Update field will determine the valid values for the History\n  field as follows:\n               Update option    History options\n!              1              b 1                            b\n               ALL              ALL, ACCESSPATH, SPACE, NONE\n!              y                g\n=g\n               ACCESSPATH       ACCESSPATH, NONE\n               SPACE            SPACE, NONE\n               NONE             NONE\n=\n  SHR level  - Share level. Valid values are Change or Reference. Default is\n!y           b                               yb        yb\n               REFERENCE.\n!y             y        b\n  Sample     - Sample percentage. Default is 25.\n!y           b                               y b\n\n#5. Quiesce Parameter Entry.\n!G\n This screen is used to enter the parameters for the RUNSTATS process.\n!                                                    y        b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  Write      - ???\n!y           b                                                             yb\n\n#6. Unload.\n!G\n The first UNLOAD screen is an unload type selection screen. Only one selection\n!          y      b\n is permitted. Valid types are:\n=y           b\n  Table      - From a table\n  List       - Using a predefined LISTDEF statements\n  Tablespace - From a tablespace\n  FromCopy   - From a copy\n=\n\n#6a. Unload from a Table.\n!g   2                   g\n This screen is used to enter the parameters for the UNLOAD from TABLE process.\n!                                                    y      b    y     b\n  Table name - Two part entry consisting of the owner and the table name that\n!y           b\n               will be combined as owner.tablename in the JCL generated.\n!                                  y               b\n  Sample     - Numeric percentage to sample for unloadimng. This field is\n!y           b\n  Limit      - Numeric output limit for unloadimng. This field is optional.\n!y           b\n  WHEN parms - SQL statements to be processed. This is a free format field and\n!y           b\n               any wrap around text must be keyed asis without spaces. The\n               WHEN(....) will be wrapped arount this text for you free of\n!              y    b   yb\n               charge.\n\n  PunchDDN   - Existing predefined template's name to be used for the PUNCH DD.\n!y           b                                                        y     b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n  UNLDDN     - Existing predefined template's name to be used for the UNLOAD DD.\n!y           b                                                        y      b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n  Field spec - If field specifications are required it will need to be manually\n!r           b\n               inserted into the JCL generated.\n\n#6b. Unload using a list.\n!g   2                   g\n This screen is used to enter the parameters for the UNLOAD from LIST process.\n!                                                    y      b    y    b\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  Sample     - Numeric percentage to sample for unloadimng. This field is\n!y           b\n  Limit      - Numeric output limit for unloadimng. This field is optional.\n!y           b\n  PunchDDN   - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  UNLDDN     - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  Field spec - If field specifications are required it will need to be manually\n!r           b\n               inserted into the JCL generated.\n\n#6c. Unload from a TableSpace.\n!g   2                        g\n This screen is used to enter the parameters for the UNLOAD from TABLESPACE\n!                                                    y      b    y\nprocess.\n  Tablespace - Two part entry consisting of the database name and the tablespace\n!y           b\n               name that will be combined as dbname.tablespace in the JCL\n!                                            y                 b\n               generated.\n  Part       - Part Level may be provided to unload a partlevel of partitioned\n!y           b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Sample     - Numeric percentage to sample for unloadimng. This field is\n!y           b\n  Limit      - Numeric output limit for unloadimng. This field is optional.\n!y           b\n  PunchDDN   - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  UNLDDN     - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  Field spec - If field specifications are required it will need to be manually\n!r           b\n               inserted into the JCL generated.\n\n#6d. Unload from COPY.\n!g   2                g\n This screen is used to enter the parameters for the UNLOAD from COPY process.\n!                                                    y      b    y    b\n  Tablespace - Two part entry consisting of the database name and the tablespace\n!y           b\n               name that will be combined as dbname.tablespace in the JCL\n!                                            y                 b\n               generated.\n  Sample     - Numeric percentage to sample for unloadimng. This field is\n!y           b\n  Limit      - Numeric output limit for unloadimng. This field is optional.\n!y           b\n  PunchDDN   - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  UNLDDN     - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  Field spec - If field specifications are required it will need to be manually\n!r           b\n               inserted into the JCL generated.\n If copies are found, a dataset selection list will be presented.\n One dataset must be selected to proceed to the JCL generation phase.\n\n#7. Load.\n!G\n The load processing will present a two screen selection menu. Both screens will\n need to be processed to generate JCL.\n a. The first screen will permit the entry of the unloaded datasets and\n!g b\n    subsequent processing of destination table name.\n b. The second screen will permit the entry of runtime control parameters.\n!g b\n\n#7a. Load-Input dataset name and destination table name specification.\n!g   2                                                                g\n This screen permits the entry of the PUNCH and UNLOAD datasets created by an\n!                                     y     b   y      b\n \"external\" unload process.\n You may enter Y in the browse prompt to browse the appropriate dataset.\n!              yb\n The PUNCH dataset is used to extract the table names that were unloaded into\n!    y    b\n the UNLOAD dataset.\n!    y     b\n You will be presented with an ISPF table display of the unoaded tables whose\n destination names may be changed by overtyping the presented values.  The count\n at the end is the number of other tables that are stored in the same tablespace\n the destined table will go to. This will be used for warnings if replace is\n specified and the count is greater than 1.\n Notes - Hitting [ENTER] will register any changes made and return to the screen\n!w       b\n         for presentation purposes.  When the first/next [ENTER] is hit, without\n         changes, the existance of the destined tables will be verified and any\n         errors advised accordingly.\n       - Hitting END PF key will abandon the verification process and\n!w       b\n         return to the load screen.\n\n#7b. Load-Control parameter specification.\n!g   2                                    g\n This screen permits the entry of the following cotrol parameters:\n=y           w b\n  Resume     - No or Yes.\n  SHR Level  - None or Change depending on the value of Resume and specifies the\n               extent to which applications can concurrently access the table\n               space.\n  Replace\n  Statistics:\n!b\n  Update\n  History\n  Sample\n  Sortkeys\n  Sortdevt\n  Sortnum\n  Templates  - Existing predefined template's name to be used for the PUNCH DD.\n!y           w b                                                      y     b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n=b\n  The following templates can be specified:\n=y           wb\n  ErrDDN     -\n  DiscarDD   -\n  MapDDN     -\n  WorkDDN    -\n  CopyDDn    -\n  Recovery   -\n=\n\n\n#8. Reorg.\n!G\n The first screen is a reorg type selection screen. Only one selection is\n permitted. Valid types are:\n=y           b\n  List       - Using a predefined LISTDEF statements\n  TableSpace - Tablespace\n=\n#8a. Reorg using List.\n!g   2                g\n This screen is used to enter the parameters for reorgs using LIST process.\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n               screen.\n  SHR level  - Can have the values of CHANGE, REFERENCE or NONE.\n               The value of this field will determine which indented sub\n               fields below have to be entered.\n    If NONE, all sub fields will be ignored.\n    If CHANGE or REFERENCE the following DEADLINE specifications are required:\n\n              Deadline:         :           Sign:   Value:\n              Drain wait:        Retry:     Retry delay:\n              Mappingtable:          .                       Maxro:\n              Drain:          Longlog:           Delay:      Timeout:\n  Fastswitch:            Yes or No\n Common fields:\n  WORKDDN    - Existing predefined template's name to be used for the PUNCH DD.\n               You may enter * to display a member selection list to chose from.\n               Alternatively you may enter / to enter the template member\n               creation/modification screen.\n  Sortdevt   - Enter valid device type. Default is SYSALLDA.\n  Sortnum    - Specifies the number of temporary data sets to be dynamically\n               allocated by the sort program.\n\n\n\n#9. Check Data.  NOT STARTED........\n!G               R\n\n#10. Check Index.\n!G\n The first screen is a rebuild index type selection screen. Only one selection\n is permitted. Valid types are:\n=y           b\n  List       - Using a predefined LISTDEF statements\n  TableSpace - Tablespace\n  Index      - Index\n=\n\n#10a. Check Index using List.\n!g    2                      g\n This screen is used to enter the parameters for the Check Index using LIST\n!                                                    y           b     y\n process.\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n Common fields:\n  WORKDDN    - Existing predefined template's name to be used for the PUNCH DD.\n!y           b                                                        y     b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n  Sortdevt   - Enter valid device type. Default is SYSALLDA.\n!y           b\n  Sortnum    - Specifies the number of temporary data sets to be dynamically\n!y           b\n               allocated by the sort program.\n\n#10b. Check Index from Tablespace.\n!g    2                             g\n This screen is used to enter the parameters for the Check Index of TableSpace\n!                                                    y           b  y\n process.\n Parameters:\n  Tablespace - Two part entry consisting of the database name and the tablespace\n!y           b\n               name that will be combined as dbname.tablespace in the JCL.\n!                                            y                 b\n  Part       - Part Level may be provided to rebuild a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n For further details of remainig fields, refer to \"Rebuild Index using List\"\n!                                                  g                       b\n above.\n\n#10c. Check Index from Index.\n!g    2                        g\n This screen is used to enter the parameters for the Check Index using an\n!                                                    y           b\n Index.\n!y    b\n Parameters:\n  Index      - Two part entry consisting of the creator name and the index name\n!y           b\n               that will be combined as creator.index in the JCL generated.\n!                                       y             b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Part       - Part Level may be provided to rebuild a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n For further details of remainig fields, refer to \"Rebuild Index using List\"\n!                                                  g                       b\n above.\n\n\n#11. Rebuild Index Parameter Entry.\n!G\n The first screen is a rebuild index type selection screen. Only        one\n selection is permitted. Valid types are:\n=y           b\n  List       - Using a predefined LISTDEF statements\n  TableSpace - Tablespace\n  Index      - Index\n=\n\n#11a. Rebuild Index using List.\n!g    2                        g\n This screen is used to enter the parameters for the Rebuild Index using LIST\n!                                                    y             b     y\n process.\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n Common fields:\n  Reuse      - Valid values are Reuse or  (blank).\n!y           b                  y     b  Yb\n  Update     - Enter the first 2 characters to select/expand the appropriate\n!y           b\n               value. Default is ALL.\n!                                y  b\n  History    - Same as for update.\n!y           b\n  The value of the Update field will determine the valid values for the History\n  field as follows:\n               Update option    History options\n!              1              b 1                            b\n               ALL              ALL, ACCESSPATH, SPACE, NONE\n!              y                g\n=g\n               ACCESSPATH       ACCESSPATH, NONE\n               SPACE            SPACE, NONE\n               NONE             NONE\n=\n  WORKDDN    - Existing predefined template's name to be used for the PUNCH DD.\n!y           b                                                        y     b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n  Sortdevt   - Enter valid device type. Default is SYSALLDA.\n!y           b\n  Sortnum    - Specifies the number of temporary data sets to be dynamically\n!y           b\n               allocated by the sort program.\n  Sortkeys   - Sortkeys or  (blank).  Specifies that index keys are to be sorted\n!y           b y        b  Yb\n               and built in parallel during the SORTBLD phase to improve\n               performance.\n\n#11b. Rebuild Index from Tablespace.\n!g    2                             g\n This screen is used to enter the parameters for the Rebuild Index of TableSpace\n!                                                    y             b  y\n process.\n Parameters:\n  Tablespace - Two part entry consisting of the database name and the tablespace\n!y           b\n               name that will be combined as dbname.tablespace in the JCL.\n!                                            y                 b\n  Part       - Part Level may be provided to rebuild a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n For further details of remainig fields, refer to \"Rebuild Index using List\"\n!                                                  g                       b\n above.\n\n#11c. Rebuild Index from Index.\n!g    2                        g\n This screen is used to enter the parameters for the Rebuild Index using an\n!                                                    y             b\n Index.\n!y    b\n Parameters:\n  Index      - Two part entry consisting of the creator name and the index name\n!y           b\n               that will be combined as creator.index in the JCL generated.\n!                                       y             b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Part       - Part Level may be provided to rebuild a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n For further details of remainig fields, refer to \"Rebuild Index using List\"\n!                                                  g                       b\n above.\n\n\n#12. Recover Parameter Entry.\n!G\n The first RECOVER screen is a recover type selection screen. Only one selection\n!          y       b\n is permitted. Valid types are:\n=y           b\n  List       - Using a predefined LISTDEF statements\n  DB2 Object - Tablespace/Indexspace\n  Index      - Index\n=\n\n#12a. Recover using List.\n!g    2                  g\n This screen is used to enter the parameters for the RECOVER using LIST process.\n!                                                    y       b     y    b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n\n#12b. Recover DB2 Object.\n!g    2                  g\n This screen is used to enter the parameters for the RECOVER of DB2 OBJECT\n!                                                    y       b  y\n process.\n Parameters:\n  Db2 Object - Two part entry consisting of the database name and the\n!y           b\n               table/indexspace name that will be combined as dbname.xxxxxspace\n!                                                             y      w    y\n               in the JCL, where xxxxx represent the table/index processed.\n!                                w     b\n               generated.\n  Part       - Part Level may be provided to unload a partlevel of partitioned\n!y           b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Type       - Must be TS|IX to identify tablespace|indexspace respectively.\n!y           b         y by  b\n               tablespaces. This field is optional (and part 0 is assumed).\n  To         - Recover to Tocopy, toLastcopy or tolastFullcopy. Specify the\n!y           b            yb        yb                yb\n               highlighted character to expand to the appropriate value.\n               Note - If TOCOPY is selected, a dataset selection list will be\n!              w    b    y      b\n                      presented.  One dataset must be selected to proceed to the\n                      JCL generation phase.\n  Option 1   - Valid values are Reuse or Logonly.  Specify the highlighted\n!y           b                  yb       yb\n               character to expand to the appropriate value.\n\n#12c. Recover Index.\n!g    2             g\n This screen is used to enter the parameters for the RECOVER of Index process.\n!                                                    y       b  y     b\n Parameters:\n  Index      - Two part entry consisting of the creator name and the index name\n!y           b\n               that will be combined as creator.index in the JCL generated.\n!                                       y             b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Part       - Part Level may be provided to recover a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n  To         - Refer to \"Recover DB2 Object\" above.\n!y           b           g                 b\n  Option 1   - Refer to \"Recover DB2 Object\" above.\n!y           b           g                 b\n\n\n#13. Migration Parameter Entry.\n!R\n Set templates up with &SSID. as the 2nd. level qualifier for substitution.\n!                      y     b\n Use &LPAR. in MODPUNCH dataset name to include destination LPAR in dsname.\n!    y     b   y       b\n     MODPUNCH: Dataset of all the PUNCH datasets in one\n     SYSMAP  : ???\n     SSID    : Destination DB2 system id.\n     Sub load: Indicate whether the load unload and migrate/load should be\n               executed in one job or seperate jobs.\n   Foreign system -\n     LPAR    : Enter destination LPAR if not on same MVS system.\n     TempDSN : Dataset name to use for FTPing MODPUNCH and UNLOAD dataset to\n               alternate system.\n     Password: Password on destination LPAR\n               Note - Password will be imbedded in the JCL generated. If FTP\n                      is to be used, it is highly recommended that message\n                      class should be to the bit bucket (class Z) or held\n                      output deleted immediately after execution.\n                      Alternatively arrange for an alternate userid for FTP\n                      purposes only.\n     Account : Account on destination system.\n     Ex Class: Execution class (must be a valid class on destination system)\n     MsgClass: Message   class (must be a valid class on destination system)\n\n#20. LISTDEF Parameter Entry.\n!G\n This screen is used to enter command to be passed to the LISTDEF command. The\n list name supplied will be used to permanently store the parameters entered.\n You may enter a * in the neme field to bring up a selection list for all\n!                yb\n members in that dataset. Use option C to create/overwite the member or A to\n!                                    yb                                 yb\n append entered parameters. The member may also be manually edited for fine\n tuning.\n You may populate the screen by enetering an existing member name (or select\n using the * option).  The member can be modidied or saved under another name\n!          yb\n after changes.\n\n Parameters (Room for 33 entries on non-split Model4 terminal):\n  Tablespace - Use this field to enter a 2 level qualifier. * and % wildcards\n!            b                                              yb    yb\n               may be used to DB2 syntax.  2nd. qualifier may be omitted if set\n               to *. Name validation checks will be performed.\n!                 yb\n  TS/IX      - Enter TS or IX to identify as tablespace or indexspace. IX will\n!y           b       y b   y b                                         y b\n               identify an INDEXSPACE while any other value (including a blank)\n               will default to TABLESPACE.\n  Inc/Exc    - Enter I(nclude) or E(xclude) to identify action. E will identify\n!y           b       yb           yb                            yb\n               exclusion while any other value (including a blank) will default\n               to include.\n  RI         - Any non blank value will specify RI.\n!y           b                                  y b\n  Part       - Any non blank value will specify PARTLEVEL.\n!y           b                                  y        b\n\n Example:\n\n List name : ALEX1    options:   C(reate) or A(ppend)\n Parameters:\n             DB2 Object           TS/IX  Inc/Exc   RI  Part\n             DSNRLST  . *          TS    INCLUDE        /\n             DSN8*    . *          TS    INCLUDE        /\n             BMC*     . *          TS    INCLUDE        /\n                      .\n\n#21. Template Parameter Entry.\n!G\n This screen is used to enter template parameters. The template name supplied\n will be used to permanently store the parameters entered.  You may enter a * in\n!                                                                           yb\n the neme field to bring up a selection list for all members in that dataset.\n Use option C to create/overwite the member or A to append entered parameters.\n!           yb                                 yb\n The member may also be manually edited for fine tuning.\n  template   - Use this field to enter the member name to store under. You may\n!y           b\n               enter a * to be presented with a member selection list.\n!                      yb\n  Type       - Use this field to identify the type of template being created or\n!y           b\n               updated. Enter ? to display a popup panel of valid template\n!                             yb\n               types. In the popup panel, enter the appropriate number to have\n               the name placed in the type field. This value will be displayed\n               in the template member selection list to identify the different\n               types of templates.\n               Valid templates in the popup panel:\n                 1 CopyDDN\n!               y  g   b\n                 2 DiscarDDN\n!               y  g     b\n                 3 ErrDDN\n!               y  g  b\n                 4 FilterDDN\n!               y  g     b\n                 5 InDDN\n!               y  g b\n                 6 MapDDN\n!               y  g  b\n                 7 PunchDDN\n!               y  g    b\n                 8 RecoveryDDN\n!               y  g       b\n                 9 UnlDDN\n!               y  g  b\n                10 WorkDDN\n!               y  g   b\n  Action     - Enter C to create/replace member.\n!y           b       yb\n Parameters:\n  disp       - Three field input area for disposition parameters. You only need\n!y           b\n               to enter the first character of MOD, NEW, SHR or OLD and\n!                                              yb   yb   yb     yb\n               CATALG, DELETE, KEEP, PASS or UNCATLG.\n!              yb      yb      yb    yb      yb\n  unit       - Valid unit. Generally should be CART or SYSALLDA.\n!y           b                                 yb      yb\n  trtch      - Hardware compression for CART. Enter the first character of NONE,\n!y           b                          y   b\n               COMP or NOCOMP.\n!              yb      yb\n  stack      - YES or NO.\n!y           b y  b   y b\n  vol count  - Numeric number of volumes. Defult 5.\n!y           b                                   gb\n  DCB        - Model DCB dataset required for unit of CART.\n!y           b                                        y   b\n  space      - Space parameters required for non CART.\n!y           b                               y       b\n Enter DEFault on the command line to reset parameters to site/system defaults.\n!      y       b\n\n#22. Jobcard Entry.\n!G\n This screen is used to enter jobcard parameters to be used in all the JCL\n generated. Customise it to your satisfaction.\n Leave the program name as &UTILITY as it will be substituted by the utility\n!                          y        b\n operation being proxessed.\n\n Enter DEFault on the command line to reset parameters to site/system defaults\n!      y       b\n from the R0SITE$ REXX member.\n!         y      b\n\n#30. DB2 Performance Queries\n!R\n The following queries can be requested:\n\n Runstats information:\n=g\n.30a. Table space without RUNSTATS information\n.30b. Indexes without RUNSTATS information\n.30c. Table spaces with more than 10 percent relocated rows\n.30d. Indexes with clustering level problems\n.30e. Table spaces with more than 5 percent dropped space\n.30f. Table spaces with locking size = 'S' (table space locking)\n.30g. Index levels\n.30h. Indexes with a large leaf page distance\n.30i. Indexes on tables with fewer than 6 pages\n.30j. Indexes not used by any plans or packages\n.30k. Table spaces containing more than one table\n.30l. Table spaces without SPACE information\n.30m. Indexes without SPACE information\n Space information:\n!b\n.30n. Table spaces exceeding allocated primary quantity\n.30o. Indexes exceeding allocated primary quantity\n.30p. Allocated and used space for table spaces\n=\n\n\n#GD. Global site Defaults.\n!G\n This screen is used to enter GLOBAL default site parameters.\n Most fields are sticky fields, however, defaults can be reset from these\n values.\n Points of interest:\n!g\n    HLQ's -\n!y        b\n               The dual option is for combining the sysprefix.userid (as at\n!                  y    b                           y                b\n               Telstra). Other is an up to 2 level qualified prefix.\n!                        y     b\n      For DSN: Identify what high level qualifier is to be used for a prefix to\n!y           b\n               the DSN template name.\n      For Lib: Identify what high level qualifier is to be used for the stored\n!y           b\n               LIBDEFs and templates.\n      For Wrk: Identify what high level qualifier is to be used for work\n!y           b\n               datasets.\n    DSN      : This is the template dataset name to use. (Note, this is the low\n!y           b\n               level quialifiers and will be combined with the HLQ for DSN to\n               arrive at the final name.\n\n`                        (End of Global site Defaults.)\n!G\n*\n*-- INDEX -------------------------------------------------------------*\n*\n#                                  I. Index.\n!G                                                                             G\n=Gb                                                                            G\n\n&    Hello &CNAME..\n\n     The following topics will be presented in sequence or fast\n     tracked by code:\n=Gb   2b                                                                       G\n      1  DB2 Utility Selection\n      2  Copy\n      3  Modify\n      4  Runstats\n      5  Quiesce\n      6  Unload\n=Gb   2 b                                                                      G\n      6a  From a Table.\n      6b  Using a list.\n      6c  From a TableSpace.\n      6d  From COPY.\n      7  Load\n!Gb   2b                                                                       G\n      7a  Input dataset name and destination table name specification.\n      7b  Control parameter specification.\n=Gb   2b                                                                       G\n      8  Reorg\n      9  Check Data\n     10  Check Index\n!Gb  2 b                                                                       G\n=Gb  2  b                                                                      G\n     10a  Using List.\n     10b  From Tablespace.\n     10c  From Index.\n     11  Rebuild Index\n!Gb  2 b                                                                       G\n     11a  Using List.\n     11b  From Tablespace.\n     11c  From Index.\n     12  Recover\n!Gb  2 b                                                                       G\n     12a  Using List.\n     12b  From DB2 Object.\n     12c  From Index.\n=Gb  2 b                                                                       G\n     13  Migrate (using list)\n     20  Listdef\n     21  Template\n     22  Jobcard\n     30  DB2 Performance Queries.\n=Gb  2  b                                                                      G\n     30a Table space without RUNSTATS information\n     30b Indexes without RUNSTATS information\n     30c Table spaces with more than 10 percent relocated rows\n     30d Indexes with clustering level problems\n     30e Table spaces with more than 5 percent dropped space\n     30f Table spaces with locking size = 'S' (table space locking)\n     30g Index levels\n     30h Indexes with a large leaf page distance\n     30i Indexes on tables with fewer than 6 pages\n     30j Indexes not used by any plans or packages\n     30k Table spaces containing more than one table\n     30l Table spaces without SPACE information\n     30m Indexes without SPACE information\n     30n Table spaces exceeding allocated primary quantity\n     30o Indexes exceeding allocated primary quantity\n     30p Allocated and used space for table spaces\n=Gb                                                                            G\n\n\n!G\n\n     The following topics will only be presented by code:\n!Gb                                                                            G\n?TN (HELPTN) *\n?TT (HELPTT) *\n     TN  Tutorial Navigation.\n!Gb  2 b                                                                       G\n\n=Gb                                                                            G\n\n                                (End of Index.)\n!G                                                                             G\n Enter I on the command line to return to this index.\n!b     yb\n Enter END PF key to exit tutorial.\n!b     y   b                                                          b\n)END\n=Gy      b                                                                     G\n      1. DB2 Utility Selection\n      2. Copy\n      3. Modify\n      4. Runstats\n      5. Quiesce\n      6. Unload\n      6a. From a Table.\n      6b. Using a list.\n      6c. From a TableSpace.\n      6d. From COPY.\n      7. Load\n      7a. Input dataset name and destination table name specification.\n      7b. Control parameter specification.\n      8. Reorg\n      9. Check Data\n     10. Check Index\n     10a. Using List.\n     10b. From Tablespace.\n     10c. From Index.\n     11. Rebuild Index\n     11a. Using List.\n     11b. From Tablespace.\n     11c. From Index.\n     12. Recover\n     12a. Using List.\n     12b. From DB2 Object.\n     12c. From Index.\n     13. Listdef\n     14. Template\n     15. Jobcard\n     16. DB2 Performance Queries.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0HELPBK": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x10\\x01\\x02%_\\x01\\x022/\\x15\\x19\\x02\\xad\\x02\\xad\\x00\\x00\\xe2\\xe8\\xe2\\xd7\\xd9\\xc7\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-09-12T00:00:00", "modifydate": "2002-11-18T15:19:10", "lines": 685, "newlines": 685, "modlines": 0, "user": "SYSPRG1"}, "text": "%headline=' DB2 Utilities '\n.1. DB2 Utility Selection.\n!G\n This screen is used to enter select the DB2 system and the action(s) you want\n to perform against them.\n\n You will be presented with a list of DB2 system ids from which one must be\n selected. This list is made up of all the DB2 susb-systems defined on the LPAR.\n Those coloured green are actually active while those in pink are not running or\n!               g    b                                   p   b\n are unavailable.\n\n You will need to enter an SQLID which by default will be set to your RACF\n!                          y     b\n group.\n\n Select as many actions as you wish to process. Each action will take you into\n sub panels for data/parameter entry. If you follow the bouncing ball and do not\n prematuraly exit panels at the end you will be presented with JCL that you can\n either submit or save for later use.\n\n\n.2. Copy/Modify Parameter Entry.\n!G\n This screen is used to enter the parameters for the COPY/MODYFY process.\n!                                                    y           b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  local      - Existing template name to be used for the local copy.  You may\n!y           b\n               enter * or / as per the list name.\n!                    yb   yb\n  remote     - Existing template name to be used for the remote copy. Same as\n!y           b\n               for local template.\n  SHR level  - Share level. Valid values are C(hange) or R(eference).\n!y           b                               yb          yb\n  last copy  - Number of hour since the last copy taken. Default is 23hrs.\n!y           b                                                      y b\n  Age        - Number of hour for MODIFY processing only.\n!y           b\n Enter DEFault on the command line to reset parameters to site/system defaults.\n!      y      b\n\n.3. Modify Parameter Entry.\n!G\n This screen is used to enter the parameters for the MODIFY process.\n!                                                    y     b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  last copy  - Number of hour since the last copy taken.\n!y           b\n  Age        - Number of hour for MODIFY processing only.\n!y           b\n Enter DEFault on the command line to reset parameters to site/system defaults.\n!      y      b\n\n.4. RunStat Parameter Entry.\n!G\n This screen is used to enter the parameters for the RUNSTATS process.\n!                                                    y        b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  Update     - Enter the first 2 characters to select/expand the appropriate\n!y           b\n               value. Default is ALL.\n!                                y  b\n  History    - Same as for update.\n!y           b\n  The value of the Update field will determine the valid values for the History\n  field as follows:\n               Update option    History options\n!              1              b 1                            b\n               ALL              ALL, ACCESSPATH, SPACE, NONE\n!              y                g\n=g\n               ACCESSPATH       ACCESSPATH, NONE\n               SPACE            SPACE, NONE\n               NONE             NONE\n=\n  SHR level  - Share level. Valid values are Change or Reference. Default is\n!y           b                               yb        yb\n               REFERENCE.\n!y             y        b\n  Sample     - Sample percentage. Default is 25.\n!y           b                               y b\n\n.5. Quiesce Parameter Entry.\n!G\n This screen is used to enter the parameters for the RUNSTATS process.\n!                                                    y        b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  Write      - ???\n!y           b                                                             yb\n\n.6. Unload.\n!G\n The first UNLOAD screen is an unload type selection screen. Only one selection\n!          y      b\n is permitted. Valid types are:\n=y           b\n  Table      - From a table\n  List       - Using a predefined LISTDEF statements\n  Tablespace - From a tablespace\n  FromCopy   - From a copy\n=\n\n.6a. Unload from a Table.\n!g   2                   g\n This screen is used to enter the parameters for the UNLOAD from TABLE process.\n!                                                    y      b    y     b\n  Table name - Two part entry consisting of the owner and the table name that\n!y           b\n               will be combined as owner.tablename in the JCL generated.\n!                                  y               b\n  Sample     - Numeric percentage to sample for unloadimng. This field is\n!y           b\n  Limit      - Numeric output limit for unloadimng. This field is optional.\n!y           b\n  WHEN parms - SQL statements to be processed. This is a free format field and\n!y           b\n               any wrap around text must be keyed asis without spaces. The\n               WHEN(....) will be wrapped arount this text for you free of\n!              y    b   yb\n               charge.\n\n  PunchDDN   - Existing predefined template's name to be used for the PUNCH DD.\n!y           b                                                        y     b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n  UNLDDN     - Existing predefined template's name to be used for the UNLOAD DD.\n!y           b                                                        y      b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n  Field spec - If field specifications are required it will need to be manually\n!r           b\n               inserted into the JCL generated.\n\n.6b. Unload using a list.\n!g   2                   g\n This screen is used to enter the parameters for the UNLOAD from LIST process.\n!                                                    y      b    y    b\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n  Sample     - Numeric percentage to sample for unloadimng. This field is\n!y           b\n  Limit      - Numeric output limit for unloadimng. This field is optional.\n!y           b\n  PunchDDN   - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  UNLDDN     - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  Field spec - If field specifications are required it will need to be manually\n!r           b\n               inserted into the JCL generated.\n\n.6c. Unload from a TableSpace.\n!g   2                        g\n This screen is used to enter the parameters for the UNLOAD from TABLESPACE\n!                                                    y      b    y\nprocess.\n  Tablespace - Two part entry consisting of the database name and the tablespace\n!y           b\n               name that will be combined as dbname.tablespace in the JCL\n!                                            y                 b\n               generated.\n  Part       - Part Level may be provided to unload a partlevel of partitioned\n!y           b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Sample     - Numeric percentage to sample for unloadimng. This field is\n!y           b\n  Limit      - Numeric output limit for unloadimng. This field is optional.\n!y           b\n  PunchDDN   - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  UNLDDN     - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  Field spec - If field specifications are required it will need to be manually\n!r           b\n               inserted into the JCL generated.\n\n.6d. Unload from COPY.\n!g   2                g\n This screen is used to enter the parameters for the UNLOAD from COPY process.\n!                                                    y      b    y    b\n  Tablespace - Two part entry consisting of the database name and the tablespace\n!y           b\n               name that will be combined as dbname.tablespace in the JCL\n!                                            y                 b\n               generated.\n  Sample     - Numeric percentage to sample for unloadimng. This field is\n!y           b\n  Limit      - Numeric output limit for unloadimng. This field is optional.\n!y           b\n  PunchDDN   - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  UNLDDN     - Refer to \"Unload from a Table\" above.\n!y           b           g                  b\n  Field spec - If field specifications are required it will need to be manually\n!r           b\n               inserted into the JCL generated.\n If copies are found, a dataset selection list will be presented.\n One dataset must be selected to proceed to the JCL generation phase.\n\n.7. Load.  Being developed....\n!G         R\n\n.8. Reorg.  NOT STARTED........\n!G          R\n\n.9. Check Data.  NOT STARTED........\n!G               R\n\n.10. Check Index.\n!G\n The first screen is a rebuild index type selection screen. Only        one\n selection is permitted. Valid types are:\n=y           b\n  List       - Using a predefined LISTDEF statements\n  TableSpace - Tablespace\n  Index      - Index\n=\n\n.10a. Check Index using List.\n!g    2                        g\n This screen is used to enter the parameters for the Check Index using LIST\n!                                                    y           b     y\n process.\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n Common fields:\n  WORKDDN    - Existing predefined template's name to be used for the PUNCH DD.\n!y           b                                                        y     b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n  Sortdevt   - Enter valid device type. Default is SYSALLDA.\n!y           b\n  Sortnum    - Specifies the number of temporary data sets to be dynamically\n!y           b\n               allocated by the sort program.\n\n.10b. Check Index from Tablespace.\n!g    2                             g\n This screen is used to enter the parameters for the Check Index of TableSpace\n!                                                    y           b  y\n process.\n Parameters:\n  Tablespace - Two part entry consisting of the database name and the tablespace\n!y           b\n               name that will be combined as dbname.tablespace in the JCL.\n!                                            y                 b\n  Part       - Part Level may be provided to rebuild a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n For further details of remainig fields, refer to \"Rebuild Index using List\"\n!                                                  g                       b\n above.\n\n.10c. Check Index from Index.\n!g    2                        g\n This screen is used to enter the parameters for the Check Index using an\n!                                                    y           b\n Index.\n!y    b\n Parameters:\n  Index      - Two part entry consisting of the creator name and the index name\n!y           b\n               that will be combined as creator.index in the JCL generated.\n!                                       y             b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Part       - Part Level may be provided to rebuild a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n For further details of remainig fields, refer to \"Rebuild Index using List\"\n!                                                  g                       b\n above.\n\n\n.11. Rebuild Index Parameter Entry.\n!G\n The first screen is a rebuild index type selection screen. Only        one\n selection is permitted. Valid types are:\n=y           b\n  List       - Using a predefined LISTDEF statements\n  TableSpace - Tablespace\n  Index      - Index\n=\n\n.11a. Rebuild Index using List.\n!g    2                        g\n This screen is used to enter the parameters for the Rebuild Index using LIST\n!                                                    y             b     y\n process.\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n Common fields:\n  Reuse      - Valid values are Reuse or  (blank).\n!y           b                  y     b  Yb\n  Update     - Enter the first 2 characters to select/expand the appropriate\n!y           b\n               value. Default is ALL.\n!                                y  b\n  History    - Same as for update.\n!y           b\n  The value of the Update field will determine the valid values for the History\n  field as follows:\n               Update option    History options\n!              1              b 1                            b\n               ALL              ALL, ACCESSPATH, SPACE, NONE\n!              y                g\n=g\n               ACCESSPATH       ACCESSPATH, NONE\n               SPACE            SPACE, NONE\n               NONE             NONE\n=\n  WORKDDN    - Existing predefined template's name to be used for the PUNCH DD.\n!y           b                                                        y     b\n               You may enter * to display a member selection list to chose from.\n!                            yb\n               Alternatively you may enter / to enter the template member\n!                                          yb\n               creation/modification screen.\n  Sortdevt   - Enter valid device type. Default is SYSALLDA.\n!y           b\n  Sortnum    - Specifies the number of temporary data sets to be dynamically\n!y           b\n               allocated by the sort program.\n  Sortkeys   - Sortkeys or  (blank).  Specifies that index keys are to be sorted\n!y           b y        b  Yb\n               and built in parallel during the SORTBLD phase to improve\n               performance.\n\n.11b. Rebuild Index from Tablespace.\n!g    2                             g\n This screen is used to enter the parameters for the Rebuild Index of TableSpace\n!                                                    y             b  y\n process.\n Parameters:\n  Tablespace - Two part entry consisting of the database name and the tablespace\n!y           b\n               name that will be combined as dbname.tablespace in the JCL.\n!                                            y                 b\n  Part       - Part Level may be provided to rebuild a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n For further details of remainig fields, refer to \"Rebuild Index using List\"\n!                                                  g                       b\n above.\n\n.11c. Rebuild Index from Index.\n!g    2                        g\n This screen is used to enter the parameters for the Rebuild Index using an\n!                                                    y             b\n Index.\n!y    b\n Parameters:\n  Index      - Two part entry consisting of the creator name and the index name\n!y           b\n               that will be combined as creator.index in the JCL generated.\n!                                       y             b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Part       - Part Level may be provided to rebuild a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n For further details of remainig fields, refer to \"Rebuild Index using List\"\n!                                                  g                       b\n above.\n\n\n.12. Recover Parameter Entry.\n!G\n The first RECOVER screen is a recover type selection screen. Only one selection\n!          y       b\n is permitted. Valid types are:\n=y           b\n  List       - Using a predefined LISTDEF statements\n  DB2 Object - Tablespace/Indexspace\n  Index      - Index\n=\n\n.12a. Recover using List.\n!g    2                  g\n This screen is used to enter the parameters for the RECOVER using LIST process.\n!                                                    y       b     y    b\n Parameters:\n  listname   - Existing predefined LISTDEF's name. You may enter * to\n!y           b                                                   yb\n               display a member selection list to chose from. Alternatively you\n               may enter / to enter the LISTDEF member creation/modification\n!                        yb\n               screen.\n\n.12b. Recover DB2 Object.\n!g    2                  g\n This screen is used to enter the parameters for the RECOVER of DB2 OBJECT\n!                                                    y       b  y\n process.\n Parameters:\n  Db2 Object - Two part entry consisting of the database name and the\n!y           b\n               table/indexspace name that will be combined as dbname.xxxxxspace\n!                                                             y      w    y\n               in the JCL, where xxxxx represent the table/index processed.\n!                                w     b\n               generated.\n  Part       - Part Level may be provided to unload a partlevel of partitioned\n!y           b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Type       - Must be TS|IX to identify tablespace|indexspace respectively.\n!y           b         y by  b\n               tablespaces. This field is optional (and part 0 is assumed).\n  To         - Recover to Tocopy, toLastcopy or tolastFullcopy. Specify the\n!y           b            yb        yb                yb\n               highlighted character to expand to the appropriate value.\n               Note - If TOCOPY is selected, a dataset selection list will be\n!              w    b    y      b\n                      presented.  One dataset must be selected to proceed to the\n                      JCL generation phase.\n  Option 1   - Valid values are Reuse or Logonly.  Specify the highlighted\n!y           b                  yb       yb\n               character to expand to the appropriate value.\n\n.12c. Recover Index.\n!g    2             g\n This screen is used to enter the parameters for the RECOVER of Index process.\n!                                                    y       b  y     b\n Parameters:\n  Index      - Two part entry consisting of the creator name and the index name\n!y           b\n               that will be combined as creator.index in the JCL generated.\n!                                       y             b\n               tablespaces. This field is optional (and part 0 is assumed).\n  Part       - Part Level may be provided to recover a partlevel of partitioned\n!y           b\n               Index. This field is optional (and part 0 is assumed).\n  To         - Refer to \"Recover DB2 Object\" above.\n!y           b           g                 b\n  Option 1   - Refer to \"Recover DB2 Object\" above.\n!y           b           g                 b\n\n\n.13. LISTDEF Parameter Entry.\n!G\n This screen is used to enter command to be passed to the LISTDEF command. The\n list name supplied will be used to permanently store the parameters entered.\n You may enter a * in the neme field to bring up a selection list for all\n!                yb\n members in that dataset. Use option C to create/overwite the member or A to\n!                                    yb                                 yb\n append entered parameters. The member may also be manually edited for fine\n tuning.\n You may populate the screen by enetering an existing member name (or select\n using the * option).  The member can be modidied or saved under another name\n!          yb\n after changes.\n\n Parameters (Room for 33 entries on non-split Model4 terminal):\n  Tablespace - Use this field to enter a 2 level qualifier. * and % wildcards\n!            b                                              yb    yb\n               may be used to DB2 syntax.  2nd. qualifier may be omitted if set\n               to *. Name validation checks will be performed.\n!                 yb\n  TS/IX      - Enter TS or IX to identify as tablespace or indexspace. IX will\n!y           b       y b   y b                                         y b\n               identify an INDEXSPACE while any other value (including a blank)\n               will default to TABLESPACE.\n  Inc/Exc    - Enter I(nclude) or E(xclude) to identify action. E will identify\n!y           b       yb           yb                            yb\n               exclusion while any other value (including a blank) will default\n               to include.\n  RI         - Any non blank value will specify RI.\n!y           b                                  y b\n  Part       - Any non blank value will specify PARTLEVEL.\n!y           b                                  y        b\n\n\n.14. Template Parameter Entry.\n!G\n This screen is used to enter template parameters. The template name supplied\n will be used to permanently store the parameters entered.  You may enter a * in\n!                                                                           yb\n the neme field to bring up a selection list for all members in that dataset.\n Use option C to create/overwite the member or A to append entered parameters.\n!           yb                                 yb\n The member may also be manually edited for fine tuning.\n  template   - Use this field to enter the member name to store under. You may\n!y           b\n               enter a * to be presented with a member selection list.\n!                      yb\n  Type       - Use this field to identify the type of template being created or\n!y           b\n               updated. Enter ? to display a popup panel of valid template\n!                             yb\n               types. In the popup panel, enter the appropriate number to have\n               the name placed in the type field. This value will be displayed\n               in the template member selection list to identify the different\n               types of templates.\n               Valid templates in the popup panel:\n                 1 CopyDDN\n!               y  g   b\n                 2 DiscarDDN\n!               y  g     b\n                 3 ErrDDN\n!               y  g  b\n                 4 FilterDDN\n!               y  g     b\n                 5 InDDN\n!               y  g b\n                 6 MapDDN\n!               y  g  b\n                 7 PunchDDN\n!               y  g    b\n                 8 RecoveryDDN\n!               y  g       b\n                 9 UnlDDN\n!               y  g  b\n                10 WorkDDN\n!               y  g   b\n  Action     - Enter C to create/replace member.\n!y           b       yb\n Parameters:\n  disp       - Three field input area for disposition parameters. You only need\n!y           b\n               to enter the first character of MOD, NEW, SHR or OLD and\n!                                              yb   yb   yb     yb\n               CATALG, DELETE, KEEP, PASS or UNCATLG.\n!              yb      yb      yb    yb      yb\n  unit       - Valid unit. Generally should be CART or SYSALLDA.\n!y           b                                 yb      yb\n  trtch      - Hardware compression for CART. Enter the first character of NONE,\n!y           b                          y   b\n               COMP or NOCOMP.\n!              yb      yb\n  stack      - YES or NO.\n!y           b y  b   y b\n  vol count  - Numeric number of volumes. Defult 5.\n!y           b                                   gb\n  DCB        - Model DCB dataset required for unit of CART.\n!y           b                                        y   b\n  space      - Space parameters required for non CART.\n!y           b                               y       b\n Enter DEFault on the command line to reset parameters to site/system defaults.\n!      y       b                             y       b\n\n.15. Jobcard Entry.\n!G\n This screen is used to enter jobcard parameters to be used in all the JCL\n generated.\n Customise it to your satisfaction. Leave the program name &UTILITY to maintain\n!                                                          y        b\n the name of the action for identification.\n\n Enter DEFault on the command line to reset parameters to site/system defaults.\n!      y       b\n#GD. Global site Defaults.\n!G\n This screen is used to enter GLOBAL default site parameters.\n Most fields are sticky fields, however, defaults can be reset from these\n values.\n Points of interest:\n!g\n    HLQ's -\n!y        b\n               The dual option is for combining the sysprefix.userid (as at\n!                  y    b                           y                b\n               Telstra). Other is an up to 2 level qualified prefix.\n!                        y     b\n      For DSN: Identify what high level qualifier is to be used for a prefix to\n!y           b\n               the DSN template name.\n      For Lib: Identify what high level qualifier is to be used for the stored\n!y           b\n               LIBDEFs and templates.\n      For Wrk: Identify what high level qualifier is to be used for work\n!y           b\n               datasets.\n    DSN      : This is the template dataset name to use. (Note, this is the low\n!y           b\n               level quialifiers and will be combined with the HLQ for DSN to\n               arrive at the final name.\n\n`                        (End of Global site Defaults.)\n!G\n*\n*-- INDEX -------------------------------------------------------------*\n*\n#                                  I. Index.\n!G                                                                             G\n=Gb                                                                            G\n\n&    Hello &CNAME..\n\n     The following topics will be presented in sequence or fast\n     tracked by code:\n=Gy      b                                                                     G\n      1. DB2 Utility Selection\n      2. Copy\n      3. Modify\n      4. Runstats\n      5. Quiesce\n      6. Unload\n      6a. From a Table.\n      6b. Using a list.\n      6c. From a TableSpace.\n      6d. From COPY.\n      7. Load\n      8. Reorg\n      9. Check Data\n     10. Check Index\n     10a. Using List.\n     10b. From Tablespace.\n     10c. From Index.\n     11. Rebuild Index\n     11a. Using List.\n     11b. From Tablespace.\n     11c. From Index.\n     12. Recover\n     12a. Using List.\n     12b. From DB2 Object.\n     12c. From Index.\n     13. Listdef\n     14. Template\n     15. Jobcard\n\n\n!G\n\n     The following topics will only be presented by code:\n!Gb                                                                            G\n?TN (HELPTN) *\n?TT (HELPTT) *\n     TN. Tutorial navigation.\n\n=Gb                                                                            G\n\n                                (End of Index.)\n!G                                                                             G\n Enter I on the command line to return to this index.\n!b     yb\n Enter END PF key to exit tutorial.\n!b     y   b                                                          b\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0HELPP": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x000\\x01\\x02#_\\x01\\x02#_\\x110\\x00-\\x00-\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-08-23T00:00:00", "modifydate": "2002-08-23T11:30:30", "lines": 45, "newlines": 45, "modlines": 0, "user": "C838704"}, "text": ")ATTR  DEFAULT(%+_)\n @ TYPE(TEXT) COLOR(YELLOW)\n # TYPE(TEXT) COLOR(GREEN)\n _ TYPE(INPUT) COLOR(RED) HILITE(USCORE)\n ! AREA(DYNAMIC) SCROLL(ON) EXTEND(ON)\n b TYPE(CHAR) COLOR(BLUE)\n g TYPE(CHAR) COLOR(GREEN)\n p TYPE(CHAR) COLOR(PINK)\n r TYPE(CHAR) COLOR(RED)\n t TYPE(CHAR) COLOR(TURQ)\n w TYPE(CHAR) COLOR(WHITE)\n y TYPE(CHAR) COLOR(YELLOW)\n B TYPE(CHAR) COLOR(BLUE)   HILITE(REVERSE)\n G TYPE(CHAR) COLOR(GREEN)  HILITE(REVERSE)\n P TYPE(CHAR) COLOR(PINK)   HILITE(REVERSE)\n R TYPE(CHAR) COLOR(RED)    HILITE(REVERSE)\n T TYPE(CHAR) COLOR(TURQ)   HILITE(REVERSE)\n W TYPE(CHAR) COLOR(WHITE)  HILITE(REVERSE)\n Y TYPE(CHAR) COLOR(YELLOW) HILITE(REVERSE)\n 1 TYPE(CHAR) COLOR(BLUE)   HILITE(USCORE)\n 2 TYPE(CHAR) COLOR(GREEN)  HILITE(USCORE)\n 3 TYPE(CHAR) COLOR(PINK)   HILITE(USCORE)\n 4 TYPE(CHAR) COLOR(RED)    HILITE(USCORE)\n 5 TYPE(CHAR) COLOR(TURQ)   HILITE(USCORE)\n 6 TYPE(CHAR) COLOR(WHITE)  HILITE(USCORE)\n 7 TYPE(CHAR) COLOR(YELLOW) HILITE(USCORE)\n)BODY EXPAND(\\\\)\n#Tutorial+\\ \\ DB2 Utilities \\ \\#Tutorial\n#&SID#===>_ZCMD                                               #Scroll ===>_Z   +\n%\n!DA1,DS1                                                                       !\n+Use@END+PF key to abandon processing.\n)INIT\n &SID = &ZSYSID\n .ZVARS = '(ZSCROLLD)'\n IF (&ZSCROLLD = &Z) &ZSCROLLD = CSR\n &#SCROLLD = &ZSCROLLD\n &ZSCROLLD = TRANS(TRUNC(&ZSCROLLD,1)\n             M,MAX H,HALF P,PAGE C,CSR D,DATA *,*)\n IF (&ZSCROLLD \u00ac= MAX,HALF,PAGE,CSR,DATA) &ZSCROLLD = &#SCROLLD\n)PROC\n &ZSCROLLD = TRANS(TRUNC(&ZSCROLLD,1)\n             M,MAX H,HALF P,PAGE C,CSR D,DATA *,*)\n IF (&ZSCROLLD \u00ac= MAX,HALF,PAGE,CSR,DATA) &ZSCROLLD = &#SCROLLD\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R0HELPPF": {"ttr": 2819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00!\\x01\\x02#_\\x01\\x02(\\x8f\\x139\\x00 \\x00\\x08\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-08-23T00:00:00", "modifydate": "2002-10-15T13:39:21", "lines": 32, "newlines": 8, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------ooo000OOOO000ooo--------------------------*/\n/*                                                                    */\n/* Purpose - To set PF01 and PF13 (HELP) keys from \"HELP\" to          */\n/*           \"DB2UHELP\" so that out dynamic help routine R0HELPR is   */\n/*           invoked when PF01/PF13 is pressed.                       */\n/*                                                                    */\n/* Parameters:                                                        */\n/*   ON    - Sets the PF keys and saves old settings.                 */\n/*   OFF   - Restores old values (default).                           */\n/*                                                                    */\n/*--------------------------------------------------------------------*/\nR0pfk:\n    Address ISPEXEC\n    zkeys = 'ZPF01,ZPF13'\n    skeys = 'SPF01,SPF13'\n    If Translate(Arg(1)) = 'ON' Then Do\n        \"VGET (&ZKEYS) PROFILE\"\n        spf01 = zpf01\n        spf13 = zpf13\n        zpf01 = '?'\n        \"VPUT (&ZKEYS) PROFILE\"\n        \"VPUT (&SKEYS) SHARED\"\n    End\n    Else Do\n        \"VGET (&SKEYS) SHARED\"\n        If spf01 /= '' Then Do\n            zpf01 = spf01\n            \"VPUT (&ZKEYS) PROFILE\"\n        End\n    End\n    Return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0JCS": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x13\\x01\\x02\\x19\\x7f\\x01\\x02 O\\x14H\\x00\\x04\\x00\\x02\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-07-16T00:00:00", "modifydate": "2002-07-23T14:48:13", "lines": 4, "newlines": 2, "modlines": 0, "user": "C838704"}, "text": "&JOBCARD1\n&JOBCARD2\n&JOBCARD3\n&JOBCARD4\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "R0JOBCRD": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x000\\x01\\x02\"_\\x01\\x02)o\\x12I\\x00&\\x00 \\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2002-08-13T00:00:00", "modifydate": "2002-10-23T12:49:30", "lines": 38, "newlines": 32, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process Jobcard                                                   */\n/*--------------------------------------------------------------------*/\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n    \"VGET (jobcv,panel91,helptab) SHARED\"\n    \"VGET (\"jobcv\") PROFILE\"\n\n    If jobcard1 = '' Then Do\n        jobcard1=;jobcard2=;jobcard3=;jobcard4=;jobcard5=\n        x=R0site$('jobcv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n    End\n\nJC_scr1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL91)\"\n    If rc /= 0 Then Do\n        gc009 = \"Jobcard entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '15 /OPEN')\n        Signal JC_scr1\n    End\n    If Substr(zcmd,1,3)='DEF' Then Do\n        jobcard1=;jobcard2=;jobcard3=;jobcard4=;jobcard5=\n        x=R0site$('jobcv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal JC_scr1;End\n    \"VPUT (\"jobcv\") PROFILE\"\n    gc009 = \"Jobcard details stored in profile\"\n    \"SETMSG MSG(GC009)\"\n\n    Return 9\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0J01S": {"ttr": 2825, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x03\\x01\\x02)\\x8f\\x01\\x021\\x0f\\x16A\\x00\\x06\\x00\\x06\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-10-25T00:00:00", "modifydate": "2002-11-06T16:41:03", "lines": 6, "newlines": 6, "modlines": 0, "user": "C838704"}, "text": "//TERM     EXEC DB2CMD\n//SYSTSIN  DD   *\n DSN SYSTEM(&SSID)\n -TERM UTIL(&UTILID)\n END\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "R0J10S": {"ttr": 2827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00X\\x01\\x021_\\x01\\x021_\\x12\\x02\\x00E\\x00E\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2002-11-11T00:00:00", "modifydate": "2002-11-11T12:02:58", "lines": 69, "newlines": 69, "modlines": 0, "user": "C838704"}, "text": ")SET  AUDIT = NO\n)SEL &AUDIT = YES\n//*-------------------------------------------------------------------*\n//* Delete any datasets created in this job for rerun purposes.\n//*-------------------------------------------------------------------*\n//DELETE   EXEC PGM=IDCAMS\n//SYSPRINT DD DUMMY\n//SYSIN    DD *\n  DELETE &OUTLIST\n  IF MAXCC << 9 THEN SET MAXCC=0\n//*\n)ENDSEL &AUDIT = YES\n//*-------------------------------------------------------------------*\n//* Create a LISTDEF filter from a set of INCLUDE/EXCLUDE parameters.\n//*-------------------------------------------------------------------*\n//CREATE   EXEC DSNUPROC,SYSTEM=&SSID,UID='&UTILID',UTPROC='PREVIEW'\n//SYSPRINT DD DISP=(NEW,PASS),UNIT=SYSDA,DSN=&&&&LISTDEF,\n//            SPACE=(TRK,(15,15),RLSE),\n//            DCB=(RECFM=FB,LRECL=120,BLKSIZE=0)\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD *\n)CM--------------------------------------------------------------------\n)CM  LISTDEF from dataset\n)CM--------------------------------------------------------------------\n)SEL &OPER1 \u00ac= PERFQ\n)DOT &TABLE1\n&DATALINE\n)ENDDOT &TABLE1\n)ENDSEL &OPER1 \u00ac= PERFQ\n\n)SEL &OPER1 = PERFQ\n)CM--------------------------------------------------------------------\n)CM  LISTDEF from PERFORMANCE QUERY RUNSTATS\n)CM--------------------------------------------------------------------\n  LISTDEF &OPER1\n)DOT &PERFCTL1\n)SEL &SEL = S\n          INCLUDE &LDEFTYPE &DBNAME..&NAME\n)ENDSEL &SEL = S\n)ENDDOT &PERFCTL1\n)ENDSEL &OPER1 = PERFQ\n/*\n//*\n//*-------------------------------------------------------------------*\n//* Process the filter to weed out INCLUDEs that have not been\n//* processed for &COPULCOP hours.\n//*-------------------------------------------------------------------*\n//FILTER   EXEC DSNREXX,SYSTEM=&SSID,PROG=&R1PROG\n//LISTDEF  DD DISP=(OLD,DELETE),DSN=&&&&LISTDEF\n)SEL &AUDIT \u00ac= YES\n//OUTLIST  DD DISP=(NEW,PASS),DSN=&&&&OUTLIST, FILTER\n)ENDSEL &AUDIT \u00ac= YES\n)SEL &AUDIT = YES\n//OUTLIST  DD DSN=&OUTLIST, FILTER\n//            DISP=(NEW,CATLG),\n)ENDSEL &AUDIT = YES\n//            SPACE=(TRK,(15,15),RLSE),UNIT=SYSALLDA,\n//            DCB=(RECFM=FB,LRECL=120,BLKSIZE=0)\n//UTILPARM DD *\n     SYSTEM      = &SSID\n)SEL &OPER1 = COPY\n     UTILITY     = COPY\n)ENDSEL &OPER1 = COPY\n)SEL &OPER1 = COPY | &OPER1 = MODIFY\n     LAST_COPY   = &COPYLCOP\n)ENDSEL &OPER1 = COPY | &OPER1 = MODIFY\n*    DEBUG       = AUDIT\n/*\n//*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R0J20S": {"ttr": 2829, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01%\\x00\\x16\\x01\\x021o\\x01\\x021o\\x12Q\\x01\\xac\\x01\\xeb\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.37", "flags": 0, "createdate": "2002-11-12T00:00:00", "modifydate": "2002-11-12T12:51:16", "lines": 428, "newlines": 491, "modlines": 0, "user": "C838704"}, "text": ")SET  AUDIT = NO\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 20 - Procedure JCL statements\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = 20\n//*--------------------------------------------------------------------*\n//* Process the &OPER1 action.\n//*--------------------------------------------------------------------*\n)TB 12\n//&OPER1!EXEC DSNUPROC,SYSTEM=&SSID,UID='&UTILID'\n//SYSIN    DD *\n)SEL &GENOLIST = ON\n)SEL &AUDIT \u00ac= YES\n//         DD DISP=(OLD,DELETE),DSN=&&&&OUTLIST\n)ENDSEL &AUDIT \u00ac= YES\n)SEL &AUDIT = YES\n//         DD DISP=SHR,DSN=&OUTLIST\n)ENDSEL &AUDIT = YES\n//         DD *\n)ENDSEL &GENOLIST = ON\n)ENDSEL &JCLOPT = 20\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 21 - COPY(/MODIFY) LIST SYSIN statements\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = 21\n)DOT &TABLE1\n&DATALINE\n)ENDDOT &TABLE1\n  COPY     LIST &LISTD1\n)SEL &COPYCDDN \u00ac= &Z\n           COPYDDN(&COPYCDDN)\n)ENDSEL &COPYCDDN \u00ac= &Z\n)SEL &COPYRDDN \u00ac= &Z\n           RECOVERYDDN(&COPYRDDN)\n)ENDSEL &COPYRDDN \u00ac= &Z\n           SHRLEVEL &COPYSHRL\n)SEL &COPYAGE \u00ac= &Z\n  MODIFY   RECOVERY LIST &LISTD1\n           DELETE AGE(&COPYAGE)\n)ENDSEL &COPYAGE \u00ac= &Z\n)ENDSEL &JCLOPT = 21\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 22 - MODIFY LIST SYSIN statements\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = 22\n)CM--------------------------------------------------------------------\n)CM  LISTDEF from dataset\n)CM--------------------------------------------------------------------\n)DOT &TABLE1\n&DATALINE\n)ENDDOT &TABLE1\n)SEL &COPYAGE \u00ac= &Z\n  MODIFY   RECOVERY LIST &LISTD1\n           DELETE AGE(&COPYAGE)\n)ENDSEL &COPYAGE \u00ac= &Z\n)ENDSEL &JCLOPT = 22\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 23 - RUNSTATS LIST SYSIN statements\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = 23\n  RUNSTATS TABLESPACE LIST &LISTD1\n           TABLE ALL  INDEX ALL\n           REPORT &RUNSREP\n           UPDATE &RUNSUPDT HISTORY &RUNSHIST\n           SAMPLE &RUNSPCT\n           SHRLEVEL &RUNSSHRL\n)ENDSEL &JCLOPT = 23\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 231 - PERFORMANCE QUERY RUNSTATS SYSIN statements\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = 231\n  RUNSTATS &LDEFTYPE LIST PERFQ\n)SEL &LDEFTYPE = TABLESPACE\n           TABLE ALL  INDEX ALL\n)ENDSEL &LDEFTYPE = TABLESPACE\n           REPORT &RUNSREP\n           UPDATE &RUNSUPDT HISTORY &RUNSHIST\n)SEL &LDEFTYPE = TABLESPACE\n           SAMPLE &RUNSPCT\n)ENDSEL &LDEFTYPE = TABLESPACE\n           SHRLEVEL &RUNSSHRL\n)SEL &LDEFTYPE = INDEX\n           KEYCARD\n)ENDSEL &LDEFTYPE = INDEX\n)ENDSEL &JCLOPT = 231\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 24 - QUIESCE LIST SYSIN statements\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = 24\n  QUIESCE LIST &LISTD1\n          WRITE &QUIEWRIT\n)ENDSEL &JCLOPT = 24\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 50   - UNLOAD SYSIN statements\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = 50\n)CM                  - Table1 contains template details\n)DOT &TABLE1\n&DATALINE\n)ENDDOT &TABLE1\n\n)SEL &ULACT  = FT\n  UNLOAD   DATA FROM TABLE &UNLDOWNR..&UNLDTBNM\n)ENDSEL &ULACT  = FT\n\n)SEL &ULACT  = LS\n  UNLOAD   LIST &LISTD1\n)ENDSEL &ULACT  = LS\n\n)SEL &ULACT  = TS\n  UNLOAD TABLESPACE &TSPACE &PARTNO\n)ENDSEL &ULACT  = TS\n\n)SEL &ULACT  = FC\n  UNLOAD   TABLESPACE &UNLDDBNM..&UNLDTSPC\n           FROMCOPY &DSNX\n)ENDSEL &ULACT  = FC\n\n)SEL &UNLDSPCT \u00ac= &Z\n           SAMPLE &UNLDSPCT\n)ENDSEL &UNLDSPCT \u00ac= &Z\n\n)SEL &UNLDLIMT \u00ac= &Z\n           LIMIT  &UNLDLIMT\n)ENDSEL &UNLDLIMT \u00ac= &Z\n\n)SEL &ULACT  = FT\n    &WHEN1\n    &WHEN2\n    &WHEN3\n    &WHEN4\n    &WHEN5\n    &WHEN6\n    &WHEN7\n    &WHEN8\n)ENDSEL &ULACT  = FT\n           PUNCHDDN(&UNLDPDDN)\n           UNLDDN(&UNLDUDDN)\n)ENDSEL &JCLOPT = 50\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 60   - LOAD SYSIN statements\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = 60\n)CM                  - Table1 contains template details\n)DOT &TABLE1\n&DATALINE\n)ENDDOT &TABLE1\n  TEMPLATE &USERID\n           DSN(&LOADUDSN)\n           DISP(OLD,KEEP,KEEP)\n  LOAD DATA INDDN &USERID RESUME &LOADRESU SHRLEVEL &LOADSHRL LOG COPY\n)SEL &LOADREPL = YES\n           REPLACE\n)ENDSEL &LOADREPL = YES\n)SEL &LOADCDDN = &Z\n           NOCOPYPEND\n)ENDSEL &LOADCDDN = &Z\n)DOT &LOADTAB\n  &DATALINE\n)ENDDOT &LOADTAB\n)SEL &LOADCDDN \u00ac= &Z\n           COPYDDN(&LOADCDDN)\n)ENDSEL &LOADCDDN \u00ac= &Z\n           RECOVERYDDN(&LOADRDDN)\n           DISCARDDN(&LOADDDDN)\n           ERRDDN(&LOADEDDN)\n           WORKDDN(&LOADWDDN)\n           SORTDEVT &LOADDEVT\n)SEL &LOADSRTK \u00ac= &Z\n           SORTKEYS &LOADSRTK\n)ENDSEL &LOADSRTK \u00ac= &Z\n)SEL &LOADSRTN \u00ac= &Z\n           SORTNUM &LOADSRTN\n)ENDSEL &LOADSRTN \u00ac= &Z\n)SEL &LOADSTAT = YES\n           STATISTICS TABLE ALL\n)SEL &LOADSPCT \u00ac= &Z\n               SAMPLE &LOADSPCT\n)ENDSEL &LOADSPCT \u00ac= &Z\n               UPDATE &LOADUPDT HISTORY &LOADHIST\n)ENDSEL &LOADSTAT = YES\n)ENDSEL &JCLOPT = 60\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 70   - REORG SYSIN statements\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = 70\n)CM                  - Table1 contains template details\n)DOT &TABLE1\n&DATALINE\n)ENDDOT &TABLE1\n)SEL &ULACT  = TL\n  REORG TABLESPACE LIST &REORLDEF\n)ENDSEL &ULACT  = TL\n)SEL &ULACT  = TS\n  REORG TABLESPACE &REORDBNM..&REORTSPC  &PARTNO\n)ENDSEL &ULACT  = TS\n)SEL &ULACT  = IL\n  REORG INDEX LIST &REORLDEF\n)ENDSEL &ULACT  = IL\n)SEL &ULACT  = IX\n  REORG INDEX &REORCREA..&REORINDX  &PARTNO\n)ENDSEL &ULACT  = IX\n)SEL &REORRUSE = YES\n           REUSE\n)ENDSEL &REORRUSE = YES\n           LOG &REORLOG\n)SEL &REORSDAT = YES\n           SORTDATA\n)ENDSEL &REORSDAT = YES\n)SEL &REORSKEY = YES\n           SORTKEYS\n)ENDSEL &REORSKEY = YES\n           SHRLEVEL &REORSHRL\n               &DEADLIN1\n               &DEADLIN2\n               &DEADLIN3\n               &DEADLIN4\n               &DEADLIN5\n)SEL &ULACT = TL | &ULACT = TS\n               &MAPPING1\n               &MAPPING2\n               &MAPPING3\n               &MAPPING4\n               &MAPPING5\n)ENDSEL &ULACT = TL | &ULACT = TS\n\n           &REPORT\n           FASTSWITCH &REORFSWC\n)SEL &ULACT = TL | &ULACT = IL\n           KEEPDICTIONARY\n)ENDSEL &ULACT = TL | &ULACT = IL\n)SEL &REORSTAT = YES\n           STATISTICS TABLE ALL &SAMPLE INDEX ALL\n               UPDATE &REORUPDT HISTORY &REORHIST FORCEROLLUP YES\n)ENDSEL &REORSTAT = YES\n)SEL &REORPDDN \u00ac= &Z\n           PUNCHDDN(&REORPDDN)\n)ENDSEL &REORPDDN \u00ac= &Z\n)SEL &REORRDDN \u00ac= &Z\n           RECOVERYDDN(&REORRDDN)\n)ENDSEL &REORRDDN \u00ac= &Z\n)SEL &REORCDDN \u00ac= &Z\n           COPYDDN(&REORCDDN)\n)ENDSEL &REORCDDN \u00ac= &Z\n)SEL &REORSRTK \u00ac= &Z\n           SORTKEYS &REORSRTK\n)ENDSEL &REORSRTK \u00ac= &Z\n)SEL &REORSRTN \u00ac= &Z\n           SORTNUM &REORSRTN\n)ENDSEL &REORSRTN \u00ac= &Z\n)ENDSEL &JCLOPT = 70\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 701  - REORG SYSIN statements\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = 701\n)CM                  - Table1 contains template details\n)DOT &TABLE1\n&DATALINE\n)ENDDOT &TABLE1\n)SEL &ULACT  = TL\n  REORG TABLESPACE LIST PERFQ\n)ENDSEL &ULACT  = TL\n)SEL &ULACT  = IL\n  REORG INDEX LIST PERFQ\n)ENDSEL &ULACT  = IL\n)SEL &REORRUSE = YES\n           REUSE\n)ENDSEL &REORRUSE = YES\n           LOG &REORLOG\n)SEL &REORSDAT = YES\n           SORTDATA\n)ENDSEL &REORSDAT = YES\n)SEL &REORSKEY = YES\n           SORTKEYS\n)ENDSEL &REORSKEY = YES\n           SHRLEVEL &REORSHRL\n               &DEADLIN1\n               &DEADLIN2\n               &DEADLIN3\n               &DEADLIN4\n               &DEADLIN5\n)SEL &ULACT = TL | &ULACT = TS\n               &MAPPING1\n               &MAPPING2\n               &MAPPING3\n               &MAPPING4\n               &MAPPING5\n)ENDSEL &ULACT = TL | &ULACT = TS\n\n           &REPORT\n           FASTSWITCH &REORFSWC\n)SEL &ULACT = TL | &ULACT = IL\n           KEEPDICTIONARY\n)ENDSEL &ULACT = TL | &ULACT = IL\n)SEL &REORSTAT = YES\n           STATISTICS TABLE ALL &SAMPLE INDEX ALL\n               UPDATE &REORUPDT HISTORY &REORHIST FORCEROLLUP YES\n)ENDSEL &REORSTAT = YES\n)SEL &REORPDDN \u00ac= &Z\n           PUNCHDDN(&REORPDDN)\n)ENDSEL &REORPDDN \u00ac= &Z\n)SEL &REORRDDN \u00ac= &Z\n           RECOVERYDDN(&REORRDDN)\n)ENDSEL &REORRDDN \u00ac= &Z\n)SEL &REORCDDN \u00ac= &Z\n           COPYDDN(&REORCDDN)\n)ENDSEL &REORCDDN \u00ac= &Z\n)SEL &REORSRTK \u00ac= &Z\n           SORTKEYS &REORSRTK\n)ENDSEL &REORSRTK \u00ac= &Z\n)SEL &REORSRTN \u00ac= &Z\n           SORTNUM &REORSRTN\n)ENDSEL &REORSRTN \u00ac= &Z\n)ENDSEL &JCLOPT = 701\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 80   - CHECK DATA SYSIN statements\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = 80\n)CM                  - Table1 contains template details\n)DOT &TABLE1\n&DATALINE\n)ENDDOT &TABLE1\n  CHECK DATA TABLESPACE &CHKDDBNM..&CHKDTSPC  &PARTNO\n)SEL &CHKDSCOP \u00ac= &Z\n           SCOPE &CHKDSCOP\n)ENDSEL &CHKDSCOP \u00ac= &Z\n)SEL &CHKDAUXE \u00ac= &Z\n           AUXERROR &CHKDAUXE\n)ENDSEL &CHKDAUXE \u00ac= &Z\n)SEL &CHKDDELT \u00ac= &Z\n           DELETE &CHKDDELT\n)ENDSEL &CHKDDELT \u00ac= &Z\n)SEL &CHKDLOG  \u00ac= &Z\n           LOG &CHKDLOG\n)ENDSEL &CHKDLOG  \u00ac= &Z\n)SEL &CHKDEXCP \u00ac= &Z\n           EXCEPTIONS &CHKDEXCP\n)ENDSEL &CHKDEXCP \u00ac= &Z\n)SEL &CHKDDEVT \u00ac= &Z\n           SORTDEVT &CHKDDEVT\n)ENDSEL &CHKDDEVT \u00ac= &Z\n)SEL &CHKDSRTN \u00ac= &Z\n           SORTNUM &CHKDSRTN\n)ENDSEL &CHKDSRTN \u00ac= &Z\n\n)SEL &CHKDEDDN \u00ac= &Z\n           ERRDDN(&CHKDEDDN)\n)ENDSEL &CHKDEDDN \u00ac= &Z\n)SEL &CHKDWDDN \u00ac= &Z\n           WORKDDN(&CHKDWDDN)\n)ENDSEL &CHKDWDDN \u00ac= &Z\n)ENDSEL &JCLOPT = 80\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 100  - RECOVER SYSIN statements\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = 100\n)SEL &ULACT  = LS\n  RECOVER  LIST &LISTD1\n)ENDSEL &ULACT  = LS\n\n)SEL &ULACT  = TS | &ULACT = IX\n  RECOVER  &TSPACE &PARTNO\n           &TOCOPY\n)ENDSEL &ULACT  = TS | &ULACT = IX\n           &RCTYPE\n           LOCALSITE\n)ENDSEL &JCLOPT = 100\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 120  - REBUILD INDEX SYSIN statements\n)CM                  - CHECK   INDEX SYSIN statements\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = 120\n)CM                  - Table1 contains template details\n)DOT &TABLE1\n&DATALINE\n)ENDDOT &TABLE1\n\n)SEL &ULACT  = LS\n  &OPERTP LIST &LISTD1\n)ENDSEL &ULACT  = LS\n\n)SEL &ULACT  = TS\n  &OPERTP &TSPACE\n                      &PARTNO\n)ENDSEL &ULACT  = TS\n)SEL &ULACT  = IX\n  &OPERTP &TSPACE &PARTNO\n)ENDSEL &ULACT  = IX\n           WORKDDN(&REBIWDDN)\n           SORTDEVT &REBIDEVT &SORTNUM\n)SEL &OPER1 = REBLDIX\n)SEL &REBIREUS = YES\n           REUSE\n)ENDSEL &REBIREUS = YES\n           STATISTICS UPDATE &REBIUPDT HISTORY &REBIHIST\n           KEYCARD\n)ENDSEL &OPER1 = REBLDIX\n)ENDSEL &JCLOPT = 120\n\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION X01 - PERFORMANCE QUERY TS with locking size='S'\n)CM--------------------------------------------------------------------\n)SEL &JCLOPT = X01\n/ALTER    EXEC DB2BATCH,SYSTEM=&SSID,PROG=DSNTEP2\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD *\n)CM  - Table contains Table space names\n)DOT &PERFCTL1\n)SEL &SEL = S\n    ALTER &DBNAME..&NAME LOCKRULE = 'ANY';\n)ENDSEL &SEL = S\n)ENDDOT &PERFCTL1\n/*\n)ENDSEL &JCLOPT = X01\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R0J30S": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x17\\x01\\x021o\\x01\\x021o\\x17(\\x00\\xcc\\x00\\xba\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2002-11-12T00:00:00", "modifydate": "2002-11-12T17:28:17", "lines": 204, "newlines": 186, "modlines": 0, "user": "C838704"}, "text": ")CM--------------------------------------------------------------------\n)CM  JCL OPTION 30   - MIGRATE SYSIN statements\n)CM--------------------------------------------------------------------\n)CM                  - Table1 contains template details\n)DOT &TABLEM\n&DATALINE\n)ENDDOT &TABLEM\n\n  UNLOAD   LIST &LISTD1\n           PUNCHDDN(&MIGRPDDN)\n           UNLDDN(&MIGRUDDN)\n           SHRLEVEL CHANGE ISOLATION UR\n/*\n//*--------------------------------------------------------------------\n//*\n//* MassEdit the PUNCH datasets.\n//*\n//*--------------------------------------------------------------------\n//REXX     EXEC PGM=IEFBR14\n//OUTDD    DD DSN=&MODDSN,\n//         SPACE=(0,(0,0)),UNIT=SYSALLDA,\n//         DISP=(MOD,DELETE,DELETE)\n//*\n//         EXEC DSNREXX\n//OUTDD    DD DSN=&MODDSN,\n//         SPACE=(TRK,(15,15)),DCB=(LRECL=80,RECFM=FB,BLKSIZE=3120),\n//         DISP=(,CATLG,DELETE)\n//SYSTSIN  DD  *\nISPSTART CMD(%RDB20370 DBUG= DSN=&PUNCHDSN)\n/*\n)SEL &MIGRLPAR = &Z && &MIGRSUBL = Y\n//*--------------------------------------------------------------------\n//*\n//* Terminate the Utility ID.\n//*\n//*--------------------------------------------------------------------\n//TERM     EXEC DB2CMD\n//SYSTSIN  DD *\n DSN SYSTEM(&MIGRSSID)\n -TERM UTIL(&MIGRID)\n END\n/*\n//*\n//* 6.Loads back.\n//*\n//LOAD     EXEC PGM=IEFBR14\n//OUTDD    DD DSN=&MIGRMDSM,\n//         SPACE=(0,(0,0)),UNIT=SYSALLDA,\n//         DISP=(MOD,DELETE,DELETE)\n//         EXEC DSNUPROC,SYSTEM=&MIGRSSID,UID=&MIGRID,UTPROC=\n//SYSUT1   DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK01 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK02 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK03 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK04 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTOUT  DD UNIT=SYSALLDA,SPACE=(CYL,(150,150))\n//SYSPRINT DD SYSOUT=*\n//SYSMAP   DD DSN=&MAPDSN,\n//            SPACE=(TRK,(15,15)),\n//            DISP=(,CATLG,DELETE)\n//SYSIN    DD DISP=OLD.DSN=&MODDSN\n//\n)ENDSEL &MIGRLPAR = &Z && &MIGRSUBL = Y\n\n)SEL &MIGRLPAR \u00ac= &Z\n)SEL &SAMEPLEX = N\n//*-------------------------------------------------------------------*\n//*\n//* Allocate unload data sets if not on same LPAR and SYSPLEX\n//*\n//*-------------------------------------------------------------------*\n//COPY     EXEC PGM=IEFBR14\n//OUT      DD DSN=&TEMPDSN,\n//            DISP=(MOD,DELETE),\n//            UNIT=SYSALLDA,SPACE=(TRK,(0,0))\n//*-------------------------------------------------------------------*\n//*\n//* Copy data sets to FTP data set\n//*\n//*-------------------------------------------------------------------*\n//         EXEC PGM=ADRDSSU,REGION=4M\n//OUT      DD DSN=&TEMPDSN,\n//            DISP=(NEW,CATLG),UNIT=SYSALLDA,MGMTCLAS=SCRATCH,\n//            SPACE=(CYL,(500,300),RLSE),\n//            DCB=(BLKSIZE=32760)\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD *\n    DUMP                           -\n        DS(INC(                    -\n            &MODDSN, -\n            &UNLODDSN -\n          )                        -\n          )                        -\n        OUTDD(OUT)                 -\n        TOL(ENQF) COMPRESS\n/*\n)SEL &MIGRSUBL = Y\n//*-------------------------------------------------------------------*\n//*\n//* Use FTP to send unload data sets to target system\n//*\n//*-------------------------------------------------------------------*\n// IF RC LE 4 THEN\n//FTPPUT   EXEC PGM=FTP,PARM='&MIGRLPAR (EXIT'\n//RESERVE  DD DISP=OLD,DSN=&TEMPDSN\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD *\n&USERID &PASSWORD\nEBCDIC\nMODE B\nSITE TRACK\nSITE PRIMARY=500\nSITE SECONDARY=300\nPUT '&TEMPDSN' '&TEMPDSN'\nQUIT\n/*\n// ENDIF\n)ENDSEL &MIGRSUBL = Y\n)ENDSEL &SAMEPLEX = N\n)SEL &MIGRSUBL = Y\n//*-------------------------------------------------------------------*\n//*\n//* Submit job to reload on target system\n//*\n//*-------------------------------------------------------------------*\n// IF RC LE 4 THEN\n//REMOTE   EXEC PGM=IEBGENER\n//SYSUT2   DD SYSOUT=(E,INTRDR)\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DUMMY\n//SYSUT1   DD DATA,DLM=$$\n//&USERID.D JOB &ACCT,'FTP-DEST',\n//             CLASS=&MIGRXCLS,\n//             MSGCLASS=&MIGRMCLS,\n//             NOTIFY=&&SYSUID\n/*XEQ &MIGRLPAR\n)SEL &SAMEPLEX = N\n//*-------------------------------------------------------------------*\n//*\n//* Copy from FTP data set to new data sets\n//*\n//*-------------------------------------------------------------------*\n//RESTORE  EXEC PGM=ADRDSSU\n//CART     DD DISP=(OLD,DELETE),DSN=&TEMPDSN\n//SYSPRINT DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//ABNLIGNR DD DUMMY\n//SYSIN    DD *\n   RESTORE -\n        DS (INC(        -\n            &MODDSN, -\n            &UNLODDSN -\n          )            -\n          )            -\n        INDDNAME(CART) -\n        TOL(ENQF)  TGTA(SRC) CATALOG\n/*\n//*-------------------------------------------------------------------*\n//*\n//* Cleanup after processing\n//*\n//*-------------------------------------------------------------------*\n//CLEANUP  EXEC PGM=IEFBR14\n//DD1      DD DSN=&TEMPDSN,\n//            DISP=(MOD,DELETE),\n//            UNIT=SYSALLDA,SPACE=(TRK,(0,0))\n)ENDSEL &SAMEPLEX = N\n//*--------------------------------------------------------------------\n//*\n//* Terminate the Utility ID.\n//*\n//*--------------------------------------------------------------------\n//TERM     EXEC DB2CMD\n//SYSTSIN  DD *\n DSN SYSTEM(&MIGRSSID)\n -TERM UTIL(&MIGRID)\n END\n/*\n//*-------------------------------------------------------------------*\n//*\n//* Loads database\n//*\n//*-------------------------------------------------------------------*\n//LOAD     EXEC PGM=IEFBR14\n//OUTDD    DD DSN=&MIGRMDSM,\n//         SPACE=(0,(0,0)),UNIT=SYSALLDA,\n//         DISP=(MOD,DELETE,DELETE)\n//         EXEC DSNUPROC,SYSTEM=&MIGRSSID,UID=&MIGRID,UTPROC=\n//SYSUT1   DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK01 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK02 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK03 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK04 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTOUT  DD UNIT=SYSALLDA,SPACE=(CYL,(150,150))\n//SYSPRINT DD SYSOUT=*\n//SYSMAP   DD DSN=&MAPDSN,\n//            SPACE=(TRK,(15,15)),\n//            DISP=(,CATLG,DELETE)\n//SYSIN    DD DISP=OLD.DSN=&MODDSN\n//\n$$\n// ENDIF\n)ENDSEL &MIGRSUBL = Y\n)ENDSEL &MIGRLPAR \u00ac= &Z\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R0J31S": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00B\\x01\\x021o\\x01\\x021o\\x173\\x00\\x8e\\x00z\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-11-12T00:00:00", "modifydate": "2002-11-12T17:33:42", "lines": 142, "newlines": 122, "modlines": 0, "user": "C838704"}, "text": ")IM R0JCS\n)CM--------------------------------------------------------------------\n)CM  JCL OPTION 31   - MIGRATE SYSIN statements\n)CM--------------------------------------------------------------------\n)SEL &MIGRLPAR = &Z\n//*--------------------------------------------------------------------\n//*\n//* Terminate the Utility ID.\n//*\n//*--------------------------------------------------------------------\n//TERM     EXEC DB2CMD\n//SYSTSIN  DD *\n DSN SYSTEM(&MIGRSSID)\n -TERM UTIL(&MIGRID)\n END\n/*\n//*\n//* 6.Loads back.\n//*\n//LOAD     EXEC PGM=IEFBR14\n//OUTDD    DD DSN=&MIGRMDSM,\n//         SPACE=(0,(0,0)),UNIT=SYSALLDA,\n//         DISP=(MOD,DELETE,DELETE)\n//         EXEC DSNUPROC,SYSTEM=&MIGRSSID,UID=&MIGRID,UTPROC=\n//SYSUT1   DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK01 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK02 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK03 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK04 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTOUT  DD UNIT=SYSALLDA,SPACE=(CYL,(150,150))\n//SYSPRINT DD SYSOUT=*\n//SYSMAP   DD DSN=&MAPDSN,\n//            SPACE=(TRK,(15,15)),\n//            DISP=(,CATLG,DELETE)\n//SYSIN    DD DISP=OLD.DSN=&MODDSN\n//\n)ENDSEL &MIGRLPAR = &Z\n\n)SEL &MIGRLPAR \u00ac= &Z\n)SEL &SAMEPLEX = N\n//*-------------------------------------------------------------------*\n//*\n//* Use FTP to send unload data sets to target system\n//*\n//*-------------------------------------------------------------------*\n//FTPPUT   EXEC PGM=FTP,PARM='&MIGRLPAR (EXIT'\n//RESERVE  DD DISP=OLD,DSN=&TEMPDSN\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD *\n&USERID &PASSWORD\nEBCDIC\nMODE B\nSITE TRACK\nSITE PRIMARY=500\nSITE SECONDARY=300\nPUT '&TEMPDSN' '&TEMPDSN'\nQUIT\n/*\n)ENDSEL &SAMEPLEX = N\n//*-------------------------------------------------------------------*\n//*\n//* Submit job to reload on target system\n//*\n//*-------------------------------------------------------------------*\n// IF RC LE 4 THEN\n//REMOTE   EXEC PGM=IEBGENER\n//SYSUT2   DD SYSOUT=(E,INTRDR)\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD DUMMY\n//SYSUT1   DD DATA,DLM=$$\n//&USERID.D JOB &ACCT,'FTP-DEST',\n//             CLASS=&MIGRXCLS,\n//             MSGCLASS=&MIGRMCLS,\n//             NOTIFY=&&SYSUID\n/*XEQ &MIGRLPAR\n)SEL &SAMEPLEX = N\n//*-------------------------------------------------------------------*\n//*\n//* Copy from FTP data set to new data sets\n//*\n//*-------------------------------------------------------------------*\n//RESTORE  EXEC PGM=ADRDSSU\n//CART     DD DISP=(OLD,DELETE),DSN=&TEMPDSN\n//SYSPRINT DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//ABNLIGNR DD DUMMY\n//SYSIN    DD *\n   RESTORE -\n        DS (INC(        -\n            &MODDSN, -\n            &UNLODDSN -\n          )            -\n          )            -\n        INDDNAME(CART) -\n        TOL(ENQF)  TGTA(SRC) CATALOG\n/*\n//*-------------------------------------------------------------------*\n//*\n//* Cleanup after processing\n//*\n//*-------------------------------------------------------------------*\n//CLEANUP  EXEC PGM=IEFBR14\n//DD1      DD DSN=&TEMPDSN,\n//            DISP=(MOD,DELETE),\n//            UNIT=SYSALLDA,SPACE=(TRK,(0,0))\n)ENDSEL &SAMEPLEX = N\n//*--------------------------------------------------------------------\n//*\n//* Terminate the Utility ID.\n//*\n//*--------------------------------------------------------------------\n//TERM     EXEC DB2CMD\n//SYSTSIN  DD *\n DSN SYSTEM(&MIGRSSID)\n -TERM UTIL(&MIGRID)\n END\n/*\n//*-------------------------------------------------------------------*\n//*\n//* Loads database\n//*\n//*-------------------------------------------------------------------*\n//LOAD     EXEC PGM=IEFBR14\n//OUTDD    DD DSN=&MIGRMDSM,\n//         SPACE=(0,(0,0)),UNIT=SYSALLDA,\n//         DISP=(MOD,DELETE,DELETE)\n//         EXEC DSNUPROC,SYSTEM=&MIGRSSID,UID=&MIGRID,UTPROC=\n//SYSUT1   DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK01 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK02 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK03 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTWK04 DD UNIT=SYSALLDA,SPACE=(CYL,(50,50))\n//SORTOUT  DD UNIT=SYSALLDA,SPACE=(CYL,(150,150))\n//SYSPRINT DD SYSOUT=*\n//SYSMAP   DD DSN=&MAPDSN,\n//            SPACE=(TRK,(15,15)),\n//            DISP=(,CATLG,DELETE)\n//SYSIN    DD DISP=OLD.DSN=&MODDSN\n//\n$$\n// ENDIF\n)ENDSEL &MIGRLPAR \u00ac= &Z\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R0LDEF": {"ttr": 3079, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00W\\x01\\x02\"_\\x01\\x02)\\x8f\\x10Q\\x00\\xcb\\x00\\xdd\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2002-08-13T00:00:00", "modifydate": "2002-10-25T10:51:57", "lines": 203, "newlines": 221, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process LISTDEF data                                              */\n/*--------------------------------------------------------------------*/\nArg utillib\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n    \"VGET (panelv) SHARED\";\"VGET (\"panelv\") SHARED\"\n    table    = 'LD'Time('s')\n    listname = ''\n\n    Call set_vars_1\n\nlistdef_scr1:\n    zcmd = ''\n    \"DISPLAY PANEL(&panel12) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,listdef_scr1)\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        \"VPUT (listname) PROFILE\"\n        If Arg(2) = '' Then Do\n            gc009 = \"LISTDEF entry panel completed.\"\n            \"SETMSG MSG(GC009)\"\n            Return 9\n        End\n        Else Return listname\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '13 /OPEN')\n        Signal listdef_scr1\n    End\n    Parse VAR zcmd cmd parm1\n/*--------------------------------------------------------------------*/\n/*  Build LISTDEF example values for testing                          */\n/*--------------------------------------------------------------------*/\n    IF Substr(cmd,1,1) = 'B' Then Do;Call set_vars_2;Signal listdef_scr1;End\n/*--------------------------------------------------------------------*/\n    If  listname = '*' Then Do\n        listname =\n        x = R0listm(table,utillib)\n        If Datatype(x) = 'CHAR' Then Do\n            listname = x\n            x = set_vars_2()\n        End\n        Signal listdef_scr1\n    End\n    If listact /= '' Then Do\n        If Sysdsn(\"'\"utillib\"'\") /= 'OK' Then Do\n            Address TSO \"ALLOC DA('\"utillib\"') TRACKS NEW CATALOG\",\n                \"RECFM(F B) LRECL(80) BLKSIZE(0) SPACE(45,15)\",\n                \"DIR(20) UNIT(SYSALLDA) DSORG(PO)\"\n            Address TSO \"FREE  DA('\"utillib\"')\"\n        End\n    End\n\n/*--------------------------------------------------------------------*/\n/*  Parse the dynamic field and verify names and build member contents*/\n/*--------------------------------------------------------------------*/\n    xxx=da1;i=0;j=0\n    Drop linet.\n    Do while xxx /= ''\n        Parse Var xxx,\n          '[' ts1 ']' '[' ts2 ']' '[' type ']' '[' ie ']' '[' ri ']' '[' pl ']',\n          xxx\n        j = j +1\n        ts = ts1'.'ts2\n        If ts /= '.' Then Do\n            If name_ver('TS') > 0 Then Signal listdef_scr1\n            If type = 'IX' Then type = INDEXSPACE\n            Else                type = TABLESPACE\n            If Strip(ri) /= '' Then ri = 'RI'\n            Else                    ri = '  '\n            If pl /= '' Then pl = 'PARTLEVEL'\n            If Substr(ie,1,1) = 'E' Then ie = EXCLUDE\n            Else                         ie = INCLUDE\n            i = i +1\n            linet.i = '    'ie type Substr(ts,1,18) || ri pl\n        End\n    End\n    linet.0 = i\n\n/*--------------------------------------------------------------------*/\n/*  ACtion member update options                                      */\n/*--------------------------------------------------------------------*/\n    edit = ''\n    dd = 'UL'Time('s')\n    Select\n        When listact = 'C' Then Do\n            Address TSO \"ALLOC F(\"dd\") DA('\"utillib\"(\"listname\")')\",\n                \"SHR REU\"\n            Address TSO \"NEWSTACK\"\n            Queue '  LISTDEF' listname\n            Queue ''\n            Address TSO \"EXECIO * DISKW \"dd\" (OPEN\"\n            Address TSO \"DELSTACK\"\n            Address TSO \"EXECIO * DISKW \"dd\" (STEM linet. FINIS\"\n            Address TSO \"FREE  F(\"dd\")\"\n            x = R0stats(utillib\"(\"listname\")\")\n            gc009 = 'Member \"'listname'\" updated.'\n            edit = '/'\n        End\n        When listact = 'A' Then Do\n            Drop line.\n            Address TSO \"ALLOC F(\"dd\") DA('\"utillib\"(\"listname\")')\",\n                \"SHR REU\"\n            If Sysdsn(\"'\"utillib\"(\"listname\")'\") /= 'OK' Then Do\n                line.1 = '  LISTDEF' listname\n                line.0 = 1\n            End\n            Else Address TSO \"EXECIO * DISKR \"dd\" (STEM line. FINIS)\"\n            Address TSO \"EXECIO * DISKW \"dd\" (STEM line. OPEN)\"\n            Address TSO \"EXECIO * DISKW \"dd\" (STEM linet. FINIS\"\n            Address TSO \"FREE  F(\"dd\")\"\n            x = R0stats(utillib\"(\"listname\")\")\n            gc009 = 'Details appended to existin member \"'listname'\".'\n            edit = '/'\n        End\n        Otherwise NOP\n    End\n    listact = ''\n\n    If edit = '/' Then Do\n        \"EDIT DATASET('&UTILLIB(&LISTNAME)')\"\n        \"SETMSG MSG(GC009)\"\n        listedt = ''\n    End\n    Signal listdef_scr1\n\n/*--------------------------------------------------------------------*/\n/*  Verify name format of table/index spaces provided on LISTDEF      */\n/*  parameter entry screen. Allows wildcirding using * and %.         */\n/*--------------------------------------------------------------------*/\nname_ver: Arg fld\n    Interpret \"val = \"fld\n    Parse VAR val v.1 '.' v.2\n    v.1 = Strip(v.1);v.2 = Strip(v.2)\n    If v.2 = '' Then v.2 = '*'\n    Do k=1 To 2\n        of2 = Verify(Substr(v.k,1,1),alpha)\n        If of2 /= 0 Then Signal name_err\n        of2 = Verify(v.k,alpha||numbs)\n        If of2 /= 0 Then Signal name_err\n    End\n    Interpret fld \"= v.1'.'v.2\"\n    Return 0\nname_err:\n    gc009 = 'Invalid name format \"'v.k'\". Re-enter please.'\n    \"SETMSG MSG(GC009)\"\n    csr1 = 'DA1'\n    csrp1 = 13\n    If k = 1 Then of1 = 1\n    Else          of1 = 12\n    csrp1 = csrp1 + (j-1)*80 + of1 + (of2-1)\n    Return 4\n\n\nset_vars_1:\n    xxx   = '[        ].[        ] [  ]  [       ] [  ] [ ]',\n            Substr(' ',1,33)\n    da1   = '            'Copies(xxx,33)\n    alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ@#$%*'\n    numbs = '0123456789'\n\n    Return 0\n\nset_vars_2:\n    If Sysdsn(\"'\"utillib\"(\"listname\")'\") /= 'OK' Then Do\n        gc009 = Sysdsn(\"'\"utillib\"(\"listname\")'\")\n        \"SETMSG MSG(GC009)\"\n        Return 0\n    End\n    dd = 'UL'Time('s')\n    Address TSO \"ALLOC F(\"dd\") DA('\"utillib\"(\"listname\")')\",\n        \"SHR REU\"\n    Address TSO \"EXECIO * DISKR \"dd\" (STEM linei. FINIS\"\n    Address TSO \"FREE  F(\"dd\")\"\n    If linei.0 > 34 Then linei.0 = 34\n    da1 = '            '\n    Do i=2 To linei.0\n        Parse VAR linei.i ie tt db '.' sp .\n        If Index(linei.i,' RI ') > 0 Then ri = 'RI'\n        Else                              ri = '  '\n        If Index(linei.i,' PARTLEVEL ') > 0 Then pl = '/'\n        Else                                     pl = ' '\n        If Substr(tt,1,1) = 'T' Then tt = 'TS'\n        Else                         tt = 'IX'\n        db = Substr(db,1,8);sp = Substr(sp,1,8)\n        da1 = da1 ||,\n              '['db'].['sp'] ['tt']  ['ie'] ['ri'] ['pl']',\n              Substr(' ',1,33)\n    End\n    i = i-1\n    If i < 33 Then Do\n        xxx = '[        ].[        ] [  ]  [       ] [  ] [ ]',\n              Substr(' ',1,33)\n        da1 = da1 || Copies(xxx,34-i)\n    End\n\n    Return 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0LISTM": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00@\\x01\\x02\"o\\x01\\x021_\\x134\\x00\\xa5\\x00\\x88\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "2002-08-14T00:00:00", "modifydate": "2002-11-11T13:34:40", "lines": 165, "newlines": 136, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Members selection panel.                                          */\n/*                                                                    */\n/*  Build a member list ISPF table and present under table display    */\n/*  panel CSGCHPCO to copy members from the backup to staging         */\n/*  datasets.                                                         */\n/*  Parameters (positional comma seperated):                          */\n/*    Table name.                                                     */\n/*    Input file.                                                     */\n/*    Member name of template definitions (only for template list)    */\n/*    Action - any non blank value will RETURN table                  */\n/*    Table exist indicator - any non blank value will not CREATE     */\n/*                            table                                   */\n/*--------------------------------------------------------------------*/\nArg table,ifile,imemb,iact,existab,debug\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n    If debug/='' Then Trace r\n\n    panel90 = 'R090P'                       /* Member list table      */\n    resname1 =' ',                          /* Reserved names list:-  */\n             '$TTY',                        /* Template type XREF     */\n             '#$TTY',                       /* $TTY backup            */\n             ' '\n    resname2 =' ',                          /* Reserved names list:-  */\n             '$$$INDEX',                    /* Index                  */\n             ' '\n\n    If existab /= '' Then Signal list_check_ifile\n    \"TBCREATE &TABLE KEYS(MEMBER) NAMES(LMDATE LMTIME\",\n         \"ZLCDATE ZLMDATE ZLMTIME SELCTD VERSMOD\",\n         \"ZLCNORC ZLINORC ZLMNORC ZLUSER TTY IFILE)\",\n         \"REPLACE NOWRITE\"\n\nlist_check_ifile:\n    If Index(ifile,'.TEMPLATE') > 0 Then pmsg = 'Template Type'\n    Else                                 pmsg =\n\n    If Sysdsn(\"'\"ifile\"'\") /= 'OK' Then Do\n/*      gc009 = \"Dataset '\"ifile\"' not found.\"                        */\n/*      \"SETMSG MSG(GC009)\"                                           */\n        If iact /= '' Then Return 4\n        Signal dis1\n    End\n    \"LMINIT DATAID(DATA1) DATASET('&IFILE') ENQ(SHR)\"\n    \"LMOPEN DATAID(&DATA1) OPTION(INPUT)\"\n    member =\n    tty    =\n    Do Forever\n        \"LMMLIST DATAID(&DATA1) OPTION(LIST) MEMBER(MEMBER)\",\n                \"STATS(YES)\"\n        If rc /= 0 Then Leave\n        If zlvers /= '' Then versmod = zlvers'.'zlmod\n        Else                 versmod = ''\n        member = Strip(member)\n        If Index(resname1,' 'member' ') = 0 Then \"TBADD &TABLE\"\n    End\n    \"LMMLIST DATAID(&DATA1) OPTION(FREE)\"\n    \"LMCLOSE DATAID(&DATA1)\"\n    \"LMFREE  DATAID(&DATA1)\"\n\n    If imemb /= '' Then x = get_temp_type(ifile,imemb)\n    \"TBSORT &TABLE FIELDS(MEMBER,C,A)\"\n    \"TBTOP &TABLE\"\n    If iact /= '' Then Return 0\n\ndis1:\n    sel =\n    \"TBDISPL &TABLE PANEL(&PANEL90)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,dis1)\n    If rc > 4 Then Do\n        \"TBEND &TABLE\"\n        Return ?\n    End\n    Parse var zcmd cmd parm1 parm2\n    If cmd = 'L' Then Do\n        If parm1 = '' Then Do\n            gc009 = 'Missing Locate parameter.'\n            \"SETMSG MSG(gc009)\"\n            Signal dis1\n        End\n        ISPEXEC \"TBTOP &TABLE\"\n        If Index(parm1,'*') > 0 Then\n             member = Substr(parm1,1,Index(parm1,'*')-1)\n        member = parm1'*'\n        ISPEXEC \"TBSCAN &TABLE ARGLIST(MEMBER) CONDLIST(GE)\"\n        Signal dis1\n    End\n\n    If sel = '' Then Signal dis1\n\n    msub = ztdsels\n    Signal con1\n\nmus1:\n    \"TBDISPL &TABLE\"\n\ncon1:\n    act =\n    Select\n        When (sel = 'B') Then act = 'BROWSE'\n        When (sel = 'V') Then act = 'VIEW'\n        When (sel = 'E') Then Do\n            If ifile = tempsdef Then Do\n                act = 'VIEW'\n                gc009 = 'Edit changed to view for site default member.'\n                \"SETMSG MSG(GC009)\"\n            End\n            Else act = 'EDIT'\n        End\n        When (sel = 'S') Then Do\n            If Index(resname2,' 'member' ') = 0 Then Do\n                \"TBEND &TABLE\"\n                If imemb /= '' Then Return member tty\n                Else                Return member\n            End\n            Else Do\n                act = 'BROWSE'\n                gc009 = 'Cannot select this member. It is not a LIST',\n                        'definition member.'\n                \"SETMSG MSG(GC009)\"\n            End\n        End\n        Otherwise NOP\n    End\n    If act = '' Then Signal dis1\n    \"CONTROL DISPLAY SAVE\"\n    \"&ACT DATASET('&IFILE(&MEMBER)')\"\n    \"CONTROL DISPLAY RESTORE\"\n\ngnx1:\n    msub = msub - 1\n    If msub < 1 Then  Signal dis1\n    Else              Signal mus1\n\n/*--------------------------------------------------------------------*/\n/*  Read member $TTY to establish template type.                      */\n/*--------------------------------------------------------------------*/\nget_temp_type: Arg ifile,imemb\n    \"TBTOP &TABLE\"\n    If Sysdsn(\"'\"ifile\"(\"imemb\")'\") /= 'OK' Then Do\n        gc009 = \"Member '\"imemb\"' not found. Cannot expand template type.\"\n        \"ISPEXEC SETMSG MSG(GC009)\"\n        Return 4\n    End\n    dd = 'LM'Time('s')\n    Address TSO \"ALLOC F(\"dd\") DA('\"ifile\"(\"imemb\")') SHR REU\"\n    Address TSO \"EXECIO * DISKR \"dd\" (STEM line. FINIS\"\n    Do i=1 To line.0\n        If Substr(line.i,1,1) = '*' Then Iterate\n        Parse VAR line.i member tty1 .\n        \"TBSCAN &TABLE ARGLIST(MEMBER)\"\n        If rc = 0 Then Do\n            tty = Strip(tty1)\n            \"TBMOD &TABLE\"\n        End\n    End\n    Address TSO \"FREE  F(\"dd\")\"\n\n    Return 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0LOAD": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01,\\x00\\x12\\x01\\x02\"\\x8f\\x01\\x021\\x1f\\x17\\x05\\x01\\xbd\\x01=\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.44", "flags": 0, "createdate": "2002-08-16T00:00:00", "modifydate": "2002-11-07T17:05:12", "lines": 445, "newlines": 317, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process LOAD parameter entry                                      */\n/*--------------------------------------------------------------------*/\n    Arg oper1,utillib,templib,tempsdef,debug\n    Address ISPEXEC\n    If oper1 /= '' Then Signal byp1\n    \"CONTROL ERRORS RETURN\"\n    \"ISREDIT MACRO (array) NOPROCESS\"\n    If rc > 0 Then SIGNAL byp1\n\n    \"VGET macload SHARED\"\n    If macload /= '' Then Do\n        Signal on Syntax Name byp1\n        Interpret \"Signal Macro_\"macload\n    End\n\nbyp1:\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n    Parse Source . . xcmd .\n\n    \"VGET (loadv,panelv,ssid,sqlid) SHARED\"\n    \"VGET (\"loadv panelv\" nexto) SHARED\"\n    loadtab = 'LT'Time('s')+1\n    table   = 'LO'Time('s')+2\n    dd      = 'LO'Time('s')+3\n    #count  = 0\n\nload_scr1:\n    zcmd =\n    csr1=;csrp1=\n    genolist = 'OFF'\n    x = load_tns1()\n    If x /= 0 Then Do\n        \"TBEND &LOADTAB\"\n        \"VPUT (\"loadv\") SHARED\"\n        gc009 = oper1 \"entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        csr1=;csrp1=\n        Return 9\n    End\n    If #count = 0 Then Do\n        gc009 = 'Must process \"Input dataset...\" specifications',\n                'before processing \"Control parameters\".'\n        \"SETMSG MSG(GC009)\"\n        csr1 = 'LDTN'\n        Signal load_scr1\n    End\n    x = load_pss1()\n    If x /= 0 Then Signal load_scr1\n\n    Call Merge_tables\n\nReturn0:\n    \"VPUT (\"loadv\" genolist loadtab loadudsn) SHARED\"\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Input dataset name specifications                                  */\n/*--------------------------------------------------------------------*/\nload_tns1:\n    brpdsn=;brudsn=;zcmd=\n    \"DISPLAY PANEL(&PANEL61) CURSOR(&csr1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,load_tns1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('loadv_2');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal load_tns1;End\n\n    csr1=;csrp1=\n    If rc > 4 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '7A /OPEN')\n        Signal load_tns1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n    If Sysdsn(loadpdsn) /= 'OK' Then Do\n        gc009 = \"Punch dataset not found.\"\n        \"SETMSG MSG(GC009)\"\n        csr1 = 'LOADPDSN'\n        Signal load_tns1\n    End\n    If Sysdsn(loadudsn) /= 'OK' Then Do\n        gc009 = \"Unload dataset not found.\"\n        \"SETMSG MSG(GC009)\"\n        csr1 = 'LOADUDSN'\n        Signal load_tns1\n    End\n    If brpdsn /= '' Then browse_dataset(loadpdsn)\n    If brudsn /= '' Then browse_dataset(loadudsn)\n    If ret_scr Then Signal load_tns1\n    Address TSO \"ALLOC F(\"dd\") DSN(\"loadpdsn\") SHR REU\"\n    Address TSO \"EXECIO * DISKR\" dd \"(STEM line. FINIS)\"\n    Address TSO \"FREE  F(\"dd\")\"\n    \"TBEND &LOADTAB\"\n    \"TBCREATE &LOADTAB KEYS(SEQ#) NAMES(OWNER,TABNAME,EXIST,COUNT)\",\n        \"NOWRITE REPLACE\"\n    \"TBEND &TABLE\"\n    \"TBCREATE &TABLE KEYS(SEQ@) NAMES(DATALINE) NOWRITE REPLACE\"\n    seq#=0;seq@=0;exist='N';count=0;t_list=\n    Do i=1 To line.0\n        dataline=Strip(line.i,'T')\n        seq@=seq@+1;\"TBADD &TABLE\"\n        If Word(dataline,1) /= 'INTO' Then Iterate\n        t_list=t_list seq@\n        Parse VAR dataline '\"'owner '\"' . '\"' tabname '\"' .\n        seq#=seq#+1\n        \"TBMOD &LOADTAB\"\n    End\n\n    \"TBTOP &LOADTAB\"\n    gc009 = 'The following table(s) have been detected for load from',\n            'contentes of' loadpdsn'. Change details or leave ASIS.',\n            'Use END PF key to proceed to next stage or CANcel to',\n            'abandon processing.'\n    \"SETMSG MSG(GC009)\"\nload_TB_tns1:\n    zcmd=;type1='INPUT';color1='RED'\n    \"TBDISPL &LOADTAB PANEL(&PANEL611) CURSOR(&csr1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,load_TB_tns1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('loadv_3');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal load_TB_tns1;End\n\n    csr1=\n    If rc > 4 Then Do\n        \"TBEND &LOADTAB\"\n        gc009 = 'Table name display screen cancelled.'\n        \"SETMSG MSG(GC009)\"\n        Signal load_tns1\n    End\n    csr1='ZCMD'\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '7B /OPEN')\n        Signal load_TB_tns1\n    End\n    If ztdsels = 0 Then Signal load_TB_done\n    msub = ztdsels\n    Signal load_TB_con1\n\nload_TB_mus1:\n    \"TBDISPL &LOADTAB\"\nload_TB_con1:\n    exist = 'N'\n    \"TBMOD &LOADTAB\"\nload_TB_gnx1:\n    msub = msub - 1\n    If msub < 1 Then Do\n        gc009 = 'Table name updated. Press [ENTER] to proceed to',\n                'verify destination tables.'\n        \"SETMSG MSG(GC009)\"\n        Signal load_TB_tns1\n    End\n    Else             Signal load_TB_mus1\n\n/*--------------------------------------------------------------------*/\n/*  Verify each table if it has not been validated before. If table   */\n/*  name changes, validated flag is turned off to force re-validation.*/\n/*--------------------------------------------------------------------*/\nload_TB_done:\n    \"TBTOP &LOADTAB\"\n    #count = 0\n    Do While rc = 0\n        \"TBSKIP &LOADTAB\"\n        If exist = 'N' Then Do\n            x = R0dsnrx('On')\n\n/*  Go verify table and retrieve the tablespace name                  */\n            sqlstmt = \"SELECT DBNAME,TSNAME\",\n                     \"FROM SYSIBM.SYSTABLES\",\n                     \"WHERE CREATOR = '\"owner\"'\",\n                     \"AND   NAME   = '\"tabname\"'\"\n            sqlretf = ':database,:tspace'\n            \"VPUT (sqlstmt,sqlretf) SHARED\"\n            xx = R0dsnrx('Ex',1)\n            If xx /= 0 Then Do\n                x  = R0dsnrx('Off')\n                gc009 = '\"'owner'.'tabname'\" table not found on \"',\n                        ssid'\", RC = 'xx'.'\n                 \"SETMSG MSG(GC009)\"\n                csr1 = 'OWNER'\n                rc = 12\n                Iterate\n            End\n            Address ISPEXEC \"VGET (sqlretv) SHARED\"\n            flds = Translate(sqlretf,'  ',':,')\n            Do While sqlretv /= ''\n                Interpret 'Parse VAR sqlretv' flds 'sqlretv'\n            End\n/*  Go get count of tables in tablespace for warning if REPLACE       */\n/*  specified when count>1.                                           */\n            sqlstmt = \"SELECT COUNT(*)\",\n                     \"FROM SYSIBM.SYSTABLES\",\n                     \"WHERE DBNAME = '\"database\"'\",\n                     \"AND   TSNAME = '\"tspace\"'\"\n            sqlretf = ':count'\n            \"VPUT (sqlstmt,sqlretf) SHARED\"\n            xx = R0dsnrx('Ex',1)\n            x  = R0dsnrx('Off')\n            Address ISPEXEC \"VGET (sqlretv) SHARED\"\n            flds = Translate(sqlretf,'  ',':,')\n            Do While sqlretv /= ''\n                Interpret 'Parse VAR sqlretv' flds 'sqlretv'\n            End\n\n            If count > #count Then #count = count\n            exist = 'Y'\n            \"TBMOD &LOADTAB\"\n        End\n    End\n    If rc > 8 Then Do\n        #count = 0\n        Signal load_TB_tns1\n    End\n\n    gc009 = 'Table name specifications accepted. Processing may',\n            'continue.'\n    \"SETMSG MSG(GC009)\"\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* LOAD parameter entry                                               */\n/*--------------------------------------------------------------------*/\nload_pss1:\n    zcmd=;type1='INPUT';color1='RED'\n    \"DISPLAY PANEL(&PANEL62) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,load_pss1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('loadv_3');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal load_pss1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '7C /OPEN')\n        Signal load_pss1\n    End\n    If loadrepl = 'YES' & #count > 1 & loaddevt /= '*' Then Do\n        gc009 = 'NOTE -',\n                'Some tablespaces being loaded have more than 1 tables',\n                'defined.',\n                'Replace specified, which will replace all tables in',\n                'tablespaces with more than 1 tables.'\n                'Hit [ENTER] to confirm or use END PF key to return',\n                'for change.'\n        csr1='LOADREPL'\n        \"SETMSG MSG(GC009)\"\n        zcmd=;type1='OUTPUT';color1='WHITE'\n        \"DISPLAY PANEL(&PANEL62) CURSOR(&csr1) CSRPOS(&csrp1)\"\n        If rc /= 0 Then Do\n            gc009 = 'Replace verification abandoned.'\n            \"SETMSG MSG(GC009)\"\n            Signal load_pss1\n        End\n        csr1=\n    End\n    If loaddevt = '*' Then Do\n        gc009 = 'Device type entry for Load operation.'\n        \"SETMSG MSG(GC009)\"\n        x = R0edtl('DASD',10,10,debug)\n        If Datatype(x) = 'CHAR' | x > 20 Then loaddevt = x\n        Signal load_pss1\n    End\n    Else Do\n        x = R0edtl('LIST',,,debug)\n        If Wordpos(loaddevt,x) = 0 Then Do\n            gc009 = 'Invalid devive type. Suggest enter \"*\" for selection list.'\n            \"SETMSG MSG(GC009)\"\n            csr1 = 'loaddevt'\n            Signal load_pss1\n        End\n    End\n\n/*--------------------------------------------------------------------*/\n/*  Test all the DDNs for * or / values                               */\n/*--------------------------------------------------------------------*/\n    ddnused = 'C,R,E,D,M,W'\n    x = Msg('Off')\n    Do WHile ddnused /= ''\n        Parse VAR ddnused ddn ',' ddnused\n        Interpret 'xxx = LOAD'ddn'DDN'\n        If xxx = '' Then Iterate\n        If xxx = '*' | xxx = '/' Then Do\n            Select\n                When ddn = 'C' Then yyy = 'COPYDDN'\n                When ddn = 'R' Then yyy = 'RECOVERYDDN'\n                When ddn = 'E' Then yyy = 'ERRDDN'\n                When ddn = 'D' Then yyy = 'DISCARDDN'\n                When ddn = 'M' Then yyy = 'MAPDDN'\n                When ddn = 'W' Then yyy = 'WORKDDN'\n                Otherwise           yyy = '????DDN'\n            End\n            Interpret 'LOAD'ddn'DDN = Load_ver_common(yyy,xxx)'\n            Interpret 'xxx = LOAD'ddn'DDN'\n        End\n        If Sysdsn(\"'\"tempsdef\"(\"Strip(xxx)\")'\") /= 'OK' Then,\n            If Sysdsn(\"'\"templib\"(\"Strip(xxx)\")'\") /= 'OK' Then Do\n                csr1 = 'LOAD'ddn'DDN'\n                ddnused=\n                gc009 = 'Template not found. Please correct and hit',\n                        '[ENTER].'\n                \"SETMSG MSG(GC009)\"\n                ret_scr=1\n            End\n    End\n\n    If ret_scr Then Signal load_pss1\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Comon template testing routine                                    */\n/*--------------------------------------------------------------------*/\nload_ver_common: Arg v1,v2\n    xxx = '?'\n    If v2 = '*' Then Do\n        gc009 = 'Template processing for LOAD' v1'.'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,tempsdef,'$TTY','ND')\n        x = R0listm(table,templib,'$TTY',,'EXIST')\n        If Datatype(x) = 'CHAR' Then Parse VAR x xxx .\n        ret_scr = 1\n    End\n    Else If v2 = '/' Then Do\n             xmsg = 'LOAD' v1\n             x = R0templ(templib,tempsdef,xmsg,v1)\n             If Datatype(x) = 'CHAR' Then xxx = x\n             ret_scr = 1\n         End\n\n    Return xxx\n\nbrowse_dataset: Arg ifile\n    \"BROWSE DATASET(&IFILE)\"\n    ret_scr = 1\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Merge the two tables.                                             */\n/*  Check for changes in output table names and if changed update     */\n/*  the punch table..                                                 */\n/*--------------------------------------------------------------------*/\nMerge_tables:\n    \"TBTOP &LOADTAB\"\n    Do While t_list /= ''\n        Parse VAR t_list seq@ t_list\n        \"TBSKIP &LOADTAB\"\n        \"TBTOP &TABLE\"\n        \"TBSKIP &TABLE NUMBER(&SEQ@)\"\n        dataline = ' INTO TABLE \"'Substr(owner,1,8)'\".\"' ||,\n                   Substr(tabname,1,18)'\"'\n        \"TBMOD &TABLE\"\n    End\n    Do 4;\"TBTOP &TABLE\";\"TBSKIP &TABLE\";\"TBDELETE &TABLE\";ENd\n    \"TBEND &LOADTAB\"\n    loadtab = table\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Macro 1 to put notelines into JCL                                  */\n/*--------------------------------------------------------------------*/\nmacro_1:\n    r1macro =\n    \"VPUT r1macro SHARED\"\nn_st = mark(2)                              /* Mark next line         */\n/*\n\n&   Hello &CNAME..\n\n    This is input data erated from the parameters entered.\n\n    Either submit from the command line or use your favourite copy\n    routine to save for posterity.\n\n    The contents will self destruct on ending.\n\n                            ****\n\n    \"A wise man will always check his JCL before submiting it.\"\n    -Confucius...\n\n\n*/\nn_en = mark(-2)                             /* Mark prev 2 line       */\n    \"ISREDIT RES\"\n    call put_notelines\n\n    Exit\n\n/*--------------------------------------------------------------------*/\n/* Put instream data captured to notelines for edit session           */\n/*--------------------------------------------------------------------*/\nput_notelines:\n    chgchar = '&'\n    syntaxact = \"cname = 'there'\"\n    retlab = error_off_1x\n    Signal on Syntax Name syntaxerr\n    cname = R0whome('C')\nerror_off_1x:\n    Call Off Error\n    \"ISREDIT (caps) = CAPS\"; \"ISREDIT CAPS = OFF\"\n    x = nl_h('*'Centre('ooo000OOOO000ooo',70,'-')'*')\n    Do i=n_st To n_en\n        line = Sourceline(i)\n        If Substr(line,1,1) = chgchar Then Do Forever\n            line = ' 'Substr(line,2)\n            If Index(line,'&') = 0 Then Leave\n            Parse VAR line p1 '&' var '.' p2\n            data = 'line = p1 || 'var' || p2'\n            Interpret data\n        End\n        x = nl_h('*'Substr(line,1,70)'*')\n    End\n    x = nl_h('*'Copies('-',70)'*')\n    \"ISREDIT CAPS = (caps)\"\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Noteline generator                                                 */\n/*--------------------------------------------------------------------*/\nnl_h:Parse Arg n#;\"ISREDIT LINE_BEFORE .ZFIRST = NOTELINE (n#)\";Return 0\nnl_a:Parse Arg n#;\"ISREDIT LINE_AFTER  .ZCSR   = NOTELINE (n#)\";Return 0\nnl_b:Parse Arg n#;\"ISREDIT LINE_BEFORE .ZCSR   = NOTELINE (n#)\";Return 0\n/*--------------------------------------------------------------------*/\n/* Mark line number for instream 'doco'                               */\n/*--------------------------------------------------------------------*/\nMark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0MIGRAT": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00W\\x01\\x021o\\x01\\x021\\x7f\\x12\\x03\\x00\\xf1\\x01~\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2002-11-12T00:00:00", "modifydate": "2002-11-13T12:03:57", "lines": 241, "newlines": 382, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process MIGRATE LISTDEF parameter entry                           */\n/*--------------------------------------------------------------------*/\nArg oper1,utillib,templib,tempsdef,debug\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    \"VGET (migrtv,panelv,ssid,sqlid) SHARED\"\n    \"VGET (\"migrat panelv\") SHARED\"\n    tablem = 'MT'Time('s')\n    sysuid = Userid()\n    today  = Date('e')\n    today = Substr(today,7,2) ||,\n            Substr(today,4,2) ||,\n            Substr(today,1,2)\n    ascb     = Storage(d2x(548),4)\n    asxb     = Storage(d2x(c2d(ascb)+c2d(x2c(6c))),4)\n    acee     = Storage(d2x(c2d(asxb)+c2d(x2c(c8))),4)\n    group    = Strip( Storage(d2x(c2d(acee)+c2d(x2c(1e))),8) )\n\n/*--------------------------------------------------------------------*/\n/*  migrate LiStdef                                                   */\n/*--------------------------------------------------------------------*/\nmigrate_lss1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL150) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,migrate_lss1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        \"VPUT (ssid) SHARED\"\n        x=R0site$('migrtv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        If miglpar /= '' Then Do\n            string = 'jobcard1 jobcard2 jobcard3 jobcard4 jobcard5'\n            \"VGET (\"string\") PROFILE\"\n            string = jobcard1 jobcard2 jobcard3 jobcard4 jobcard5\n            Parse VAR string 'CLASS=' migrxcls ','\n            Parse VAR migrxcls migrxcls\n            Parse VAR string 'MSGCLASS=' migrmcls ','\n            Parse VAR migrmcls migrmcls\n            Parse VAR string . . migracct ',' .\n        End\n        Signal migrate_lss1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '13 /OPEN')\n        Signal migrate_lss1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n    If migrldef = '*' Then Do\n        x = R0listm(table,utillib)\n        If Datatype(x) = 'CHAR' Then migrldef = x\n        ret_scr = 1\n    End\n    Else If migrldef = '/' Then Do\n             x = r0ldef(utillib,'migrldef')\n             If Datatype(x) = 'CHAR' Then migrldef = x\n             ret_scr = 1\n         End\n    If Sysdsn(\"'\"utillib\"(\"migrldef\")'\") /= 'OK' Then Do\n        gc009 = Sysdsn(\"'\"utillib\"(\"migrldef\")'\")\n        csr1 = 'migrldef'\n        \"SETMSG MSG(GC009)\"\n        Signal migrate_lss1\n    End\n    x = migrate_ver_common()\n    If ret_scr Then Signal migrate_lss1\n    x = build_migrate_template()\n    If ret_scr Then Signal migrate_lss1\n\nReturn0:\n    punchdsn = var_2_aster(get_pddn_dsn(migrpddn))\n    unloddsn = var_2_aster(get_pddn_dsn(migruddn))\n    moddsn  = var_sub(migrldsn)\n    mapdsn  = var_sub(migrmdsn)\n    If migrlpar /= '' Then,\n        tempdsn = var_sub(migrtdsn)\n    adr@ = Address()\n    Address TSO\n    sameplex = inquire_plex(migrlpar)\n    Address(adr@)\n    \"VPUT (\"migrtv\",punchdsn,moddsn,mapdsn,tempdsn,password,tablem\",\n          \"unloddsn,sameplex)SHARED\"\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Comon migrate field verifications:                                */\n/*--------------------------------------------------------------------*/\nmigrate_ver_common:\n    If migrpddn = '*' Then Do\n        gc009 = 'Template processing for Migrate PUNCHDDN.'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,tempsdef,'$TTY','ND')\n        x = R0listm(table,templib,'$TTY',,'EXIST')\n        If Datatype(x) = 'CHAR' Then Parse VAR x migrpddn .\n        ret_scr = 1\n    End\n    Else If migrpddn = '/' Then Do\n             xmsg = 'Migrate PUNCHDDN'\n             x = R0templ(templib,tempsdef,xmsg,'migrpddn')\n             If Datatype(x) = 'CHAR' Then migrpddn = x\n             ret_scr = 1\n         End\n    xmsg=Msg('Off')\n    If Sysdsn(\"'\"templib\"(\"migrpddn\")'\") /= 'OK' Then,\n        If Sysdsn(\"'\"tempsdef\"(\"migrpddn\")'\") /= 'OK' Then Do\n            gc009 = 'Template not found.'\n            \"SETMSG MSG(GC009)\"\n            csr1  = 'migrpddn'\n            ret_scr=1\n            xmsg=Msg(xmsg)\n            Return 4\n        End\n    xmsg=Msg(xmsg)\n    If migruddn = '*' Then Do\n        gc009 = 'Template selection for Migrate UNLDDN.'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,tempsdef,'$TTY','ND')\n        x = R0listm(table,templib,'$TTY',,'EXIST')\n        If Datatype(x) = 'CHAR' Then Parse VAR x migruddn .\n        ret_scr = 1\n    End\n    Else If migruddn = '/' Then Do\n             xmsg = 'Migrate UNLDDN'\n             x = R0templ(templib,tempsdef,xmsg,'migruddn')\n             If Datatype(x) = 'CHAR' Then migruddn = x\n             ret_scr = 1\n         End\n    xmsg=Msg('Off')\n    If Sysdsn(\"'\"templib\"(\"migruddn\")'\") /= 'OK' Then,\n        If Sysdsn(\"'\"tempsdef\"(\"migruddn\")'\") /= 'OK' Then Do\n            gc009 = 'Template not found.'\n            \"SETMSG MSG(GC009)\"\n            csr1  = 'migruddn'\n            ret_scr=1\n            xmsg=Msg(xmsg)\n            Return 4\n        End\n    xmsg=Msg(xmsg)\n\n    Return 0\n\nget_pddn_dsn: Arg memb\n    x = proces_tempate(memb)\n    Parse VAR line.2 'DSN(' dsn ')'\n    Return var_sub(dsn)\n\nbuild_migrate_template:\n    \"TBEND &TABLEM\"\n    \"TBCREATE &TABLEM NAMES(DATALINE) NOWRITE REPLACE\"\n    x = proces_tempate(migrpddn,'TBMOD')\n    x = proces_tempate(migruddn,'TBMOD')\n    Return 0\n\nproces_tempate: Arg memb,act\n    file = \"'\"templib\"(\"memb\")'\"\n    If Sysdsn(file) /= 'OK' Then\n        file = \"'\"tempsdef\"(\"memb\")'\"\n    dd = 'MD'Time('s')\n    Address TSO \"ALLOC F(\"dd\") DA(\"file\") SHR REU\"\n    Address TSO \"EXECIO * DISKR \"dd\" (STEM line. FINIS\"\n    Address TSO \"FREE  F(\"dd\")\"\n    If act = '' Then Return 0\n    Do j=1 to line.0\n        If j=2 Then dataline = var_sub(line.j)\n        Else        dataline = line.j\n        \"TBMOD &TABLEM\"\n    End\n    Return 0\n\nvar_sub: Arg file\n    file = r0cstrng(file,'&SSID.',ssid)\n    If Index(file,'&SYSPREF.') > 0 Then,\n        file = r0cstrng(file,'&SYSPREF.',group)\n    If Index(file,'&HLQ.') > 0 Then,\n        file = r0cstrng(file,'&HLQ.',group)\n    file = r0cstrng(file,'&SYSUID.',sysuid)\n    file = r0cstrng(file,'&USERID.',sysuid)\n    file = r0cstrng(file,'&DATE.','D'today)\n    file = r0cstrng(file,'&LPAR.',migrlpar)\n    Return file\n\nvar_2_aster: Arg file\n    Do While Index(file,'&') > 0\n        Parse VAR file p1 '&' . '.' p2\n        file = p1'*'p2\n    End\n    Return file\n\ninquire_plex: Arg lpar\n/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/* Activate CONSOLE facility                                          */\n/*--------------------------------------------------------------------*/\n    alfabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    sol     = Sysvar('SOLDISP')\n    unsol   = Sysvar('UNSDISP')\n    uid     = Userid()\n    x = MSG('Off')\n    \"CONSOLE DEACTIVATE\"\n    x = MSG('On')\n    Do i=1 To 26\n        cn = uid || Substr(alfabet,i,1)\n        x = Outtrap('line.',1,'NOCONCAT')\n        \"CONSOLE ACTIVATE NAME(\"cn\")\"   /* ACTIVATE CONSOLE           */\n        rc1 = rc\n        If rc1 = 0 Then Leave\n    End\n    If rc1 /= 0 Then Do\n        Say 'Could not establist CONSOLE'\n        Return 'Error'\n    End\n    \"CONSPROF SOLDISP(NO) UNSOLDISP(NO)\" /* SET PROFILE TO NO DISPLAYS*/\n/*--------------------------------------------------------------------*/\n/* Issue command to find IODF                                         */\n/*--------------------------------------------------------------------*/\n    \"CONSOLE SYSCMD(D XCF) CART('IOS')\"\n    rc1 = rc\n    msg = getmsg('CONSMSG.',,'ALK',,10)\n    'CONSOLE DEACTIVATE'                  /* deactivate 1st.       */\n    If msg \u00ac= 0 Then Do\n      Say 'No output from console command to process'\n    End\n    plex = ''\n    Do i=2 To consmsg.0\n        plex = plex consmsg.i\n    End\n    Parse VAR plex . pl ':' plex\n    If Wordpos(lpar,plex)>0 Then Return 'Y'\n    Else                         Return 'N'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0MODIFY": {"ttr": 3587, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x01\\x02)_\\x01\\x02)_\\x16P\\x009\\x009\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2002-10-22T00:00:00", "modifydate": "2002-10-22T16:50:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process MODIFY LISTDEF parameter entry                            */\n/*--------------------------------------------------------------------*/\nArg oper1,utillib,debug\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    \"VGET (copyv,panelv,ssid,sqlid) SHARED\"\n    \"VGET (\"copyv panelv\") SHARED\"\n    table = 'MO'Time('s')\n\nmodfu_scr1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL22) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,modfu_scr1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('copyv_m');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal modfu_scr1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '3 /OPEN')\n        Signal modfu_scr1\n    End\n\n    ret_scr = 0\n    If copyldef = '*' Then Do\n        x = R0listm(table,utillib)\n        If Datatype(x) = 'CHAR' Then copyldef = x\n        ret_scr = 1\n    End\n    Else If copyldef = '/' Then Do\n             x = r0ldef(utillib,'copyldef')\n             If Datatype(x) = 'CHAR' Then copyldef = x\n             ret_scr = 1\n         End\n    If ret_scr Then Signal modfu_scr1\n\n    If Sysdsn(\"'\"utillib\"(\"copyldef\")'\") /= 'OK' Then Do\n        gc009 = Sysdsn(\"'\"utillib\"(\"copyldef\")'\")\n        csr1 = 'COPYLDEF'\n        \"SETMSG MSG(GC009)\"\n        Signal modfu_scr1\n    End\n\n    \"VPUT (\"copyv\") SHARED\"\n    Return 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0PERFLK": {"ttr": 3589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x16\\x01\\x02)O\\x01\\x021\\x0f\\x16W\\x00g\\x00=\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2002-10-21T00:00:00", "modifydate": "2002-11-06T16:57:16", "lines": 103, "newlines": 61, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Validate and if valid list Table/indexspace copies.               */\n/*--------------------------------------------------------------------*/\nParse Arg sqlstmt,sqlretf,table,perfdblk,panel,fname1,fname2,debug\n\n    If debug /= '' Then Trace r\n    If panel = '' Then Do                   /* Dataset table display  */\n        paneltb = 'R140TP'\n        selall = '*'\n    End\n    Else Do\n        paneltb = panel\n        selall =\n    End\n    Address ISPEXEC\n    x = R0dsnrx('On')\n\n    \"VPUT (sqlstmt,sqlretf) SHARED\"\n    xx = R0dsnrx('Ex','*')\n    x  = R0dsnrx('Off')\n    \"VGET (sqlretv,ssid) SHARED\"\n\n    If sqlretv = '' Then Do\n        If perfdblk /= '' Then xtra = 'for like \"'perfdblk'\" '\n        Else                   xtra =\n        gc009 = 'No entries found 'xtra'on \"'ssid'\", RC = 'xx'.'\n        \"SETMSG MSG(GC009)\"\n        Return 1\n    End\n\n    seq#  = 0\n    \"TBCREATE &TABLE KEYS(SEQ#,DBNAME,NAME) NAMES(SEL,T1,T2)\",\n              \"REPLACE NOWRITE\"\n    \"TBSORT &TABLE FIELDS(DBNAME,C,D)\"\n\n    flds = Translate(sqlretf,'  ',':,')\n    Do While sqlretv /= ''\n        Interpret 'Parse VAR sqlretv' flds 'sqlretv'\n        seq#=seq#+1\n        \"TBMOD  &TABLE\"\n    End\n    \"TBTOP &TABLE\"\n\ndis0:\n    \"TBDISPL &TABLE PANEL(&PANELTB)\"\n    If rc > 4 Then Do\n        \"TBEND &TABLE\"\n        gc009 = 'PERFQ table/index selection abandoned.'\n        \"SETMSG MSG(GC009)\"\n        Return 1\n    End\n    If zcmd='DEBUG' Then Interpret r0debug(debug,dis0)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('perfqv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal dis0;End\n\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '16 /OPEN')\n        Signal dis0\n    End\n    \"VPUT (perfid) SHARED\"\n    If selall='*' Then Do\n        \"TBTOP &TABLE\"\n        Do Forever\n            \"TBSKIP &TABLE\";If rc /= 0 Then Leave\n            sel = 'S'\n            \"TBMOD &TABLE\"\n        End\n        Return 0\n    End\n\n    If ztdsels = 0 Then Do\n        \"TBTOP &TABLE\"\n        \"TBVCLEAR &TABLE\"\n        sel = 'S'\n        \"TBSARG &TABLE NAMECOND(SEL,EQ)\"\n        \"TBSCAN &TABLE\"\n        If rc /= 0 Then Do\n            gc009 = 'No entries have been selected. Make selection(s)',\n                    'or use END PF key to abandon processing.'\n            \"SETMSG MSG(GC009)\"\n            Signal dis0\n        End\n        Return 0\n    End\n    msub = ztdsels\n    Signal con0\nmus0:\n    \"TBDISPL &TABLE\"\ncon0:\n    If sel /= '' Then sel = 'S'\n    \"TBMOD &TABLE\"\ngnx0:\n    msub = msub - 1\n    If msub < 1 Then Do\n        gc009 = 'Hit [ENTER] to continue processing, make further',\n                'selections or use END PF key to abandon processing.'\n        \"SETMSG MSG(GC009)\"\n        Signal dis0\n    End\n    Else Signal mus0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0PERFQ": {"ttr": 3591, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x012\\x00%\\x01\\x02)O\\x01\\x021\\x7f\\x12\\x16\\x00\\x8c\\x01k\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.50", "flags": 0, "createdate": "2002-10-21T00:00:00", "modifydate": "2002-11-13T12:16:25", "lines": 140, "newlines": 363, "modlines": 0, "user": "C796957"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process PERFormance Query parameter entry                         */\n/*--------------------------------------------------------------------*/\nArg oper1,templib,tempsdef,debug\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    \"VGET (perfqv,panelv,ssid,sqlid) SHARED\"\n    \"VGET (\"perfqv panelv\" nexto) SHARED\"\n\n    process_matrix = ' ',\n        'TSNRS=TSNRS:TABLESPACE:RUNSTATS:R0RUNSTS:J231         ',\n        'IXNRS=IXNRS:INDEXSPACE:RUNSTATS:R0RUNSTS:J231         ',\n        'TS10RR=TS10RR:TABLESPACE:REORG:R0REORG(TL):J701       ',\n        'IXLLPD=IXLLPD:INDEXSPACE:REORG:R0REORG(IL):J701       ',\n        'TSWLSS=TSWLSS:::(NOJ01):JX01                          ',\n        ' '\n    perfctl1 = 'PQ'Time('s')\n    excl_list= \"AND DBNAME NOT IN ('DSNDB06','DSNDB07','DSHADOW')\"\n/*\nts10rr='/'\n*/\nperfq_scr1:\n    zcmd=\n    \"DISPLAY PANEL(&PANEL140) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If rc /= 0 Then Do\n        \"VPUT (\"perfqv\") SHARED\"\n        gc009 = oper1 \"entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '16 /OPEN')\n        Signal perfq_scr1\n    End\n    If zcmd='DEBUG' Then Interpret r0debug(debug,perfq_scr1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('perf');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal perfq_scr1;End\n\n    uproc_string = process_matrix\n    Do While uproc_string /= ''\n        Parse VAR uproc_string xxx uproc_string\n        Parse VAR xxx oper2 '=' label ':' ldeftype,\n            ':' perfsubr ':' sub_x ':' jcl_t .\n        Parse VAR sub_x sub_x '(' ulact ')'\n        Interpret 'act =' oper2\n        If act = '' Then Iterate\n        Interpret oper2 '='\n        Interpret 'x='label'_process()'\n        If x = 0 & sub_x /= '' Then Do\n            gc009 = 'Enter' perfsubr' parameters to supplement \"'oper1'\"',\n                    'processing.'\n            \"SETMSG MSG(GC009)\"\n            Interpret 'x='sub_x'(perfsubr,,templib,tempsdef,,ulact)'\n        End\n        If x > 0 Then Leave\n        nexto = R0cstrng(nexto,'JXXX',jcl_t)\n        \"VGET (perfid) SHARED\"\n        \"VPUT (\"perfqv\",ldeftype,nexto,ulact) SHARED\"\n        Return 0\n    End\n    Signal perfq_scr1\n\n/*--------------------------------------------------------------------*/\n/*  Process Table Space with No RunStats                              */\n/*--------------------------------------------------------------------*/\ntsnrs_process:\n    sqlstmt = \"SELECT DBNAME,NAME FROM SYSIBM.SYSTABLESPACE\",\n              \"WHERE NACTIVEF = - 1\",\n              \"AND DBNAME LIKE '\"perfdblk\"'\" excl_list\n    sqlretf = ':dbname,:name'\n    Return r0perflk(sqlstmt,sqlretf,perfctl1,perfdblk,,,,debug)\n\n/*--------------------------------------------------------------------*/\n/*  Process INdex with No RunStats                                    */\n/*--------------------------------------------------------------------*/\nixnrs_process:\n    sqlstmt = \"SELECT DBNAME,INDEXSPACE,CREATOR,NAME,TBCREATOR,TBNAME\",\n              \"FROM SYSIBM.SYSINDEXES\",\n              \"WHERE SPACEF = - 1\",\n              \"AND DBNAME LIKE '\"perfdblk\"'\" excl_list\n    sqlretf = ':dbname,:v1,:v2,:name,:v4,:v5'\n    sqlretf = ':dbname,:name,:v1,:v2,:v4,:v5'\n    Return r0perflk(sqlstmt,sqlretf,perfctl1,perfdblk,,,,debug)\n\n/*--------------------------------------------------------------------*/\n/*  Process Table spaces with more than 10 percent relocated rows     */\n/*--------------------------------------------------------------------*/\nts10rr_process:\n    sqlstmt = \"SELECT DBNAME,TSNAME\",\n              \"FROM SYSIBM.SYSTABLEPART\",\n              \"WHERE DBNAME LIKE '\"perfdblk\"'\" excl_list,\n              \"AND CARDF > 0\",\n              \"AND ((NEARINDREF + FARINDREF) * 100 / CARDF )  >\" tspct\n    sqlretf = ':dbname,:name'\n    Return r0perflk(sqlstmt,sqlretf,perfctl1,perfdblk,,,,debug)\n\n/*--------------------------------------------------------------------*/\n/*  Process Indexes with a large leaf page distance                   */\n/*--------------------------------------------------------------------*/\nixllpd_process:\n    sqlstmt = \"SELECT DBNAME,INDEXSPACE,CREATOR,NAME\",\n              \"FROM SYSIBM.SYSINDEXES , SYSIBM.SYSINDEXPART\",\n              \"WHERE DBNAME LIKE '\"perfdblk\"'\" excl_list,\n              \"AND NLEAF > 0\",\n              \"AND IXNAME    = NAME\",\n              \"AND IXCREATOR = CREATOR\",\n              \"AND (LEAFFAR / NLEAF) * 100 > 10\"\n    sqlretf = ':dbname,:v1,:v2,:name'\n    Return r0perflk(sqlstmt,sqlretf,perfctl1,perfdblk,,,,debug)\n\n/*--------------------------------------------------------------------*/\n/*  Process Table spaces with locking size = 'S' (table space locking)*/\n/*--------------------------------------------------------------------*/\ntswlss_process:\n    sqlstmt = \"SELECT DBNAME,NAME,LOCKRULE,NTABLES\",\n              \"FROM SYSIBM.SYSTABLESPACE\",\n              \"WHERE LOCKRULE = 'S'\"\n    sqlretf = ':dbname,:name,:t1,:t2'\n    gc009 = \"The following table spaces have locking size = 'S'.\",\n            \"DB2 will use table space locking when accessing a table\",\n            \"in the table space.  You probably only want locking\",\n            \"rule = 'S' for read-only tables or tables that are\",\n            \"accessed by only one user (or batch job) at a time.\",\n            \"Consider changing the locking size to 'A' (any\",\n            \"locking). You may select all (with an *) or individuals\",\n            \"and JCL with ALTER SQL statements will be generated\",\n            \"for your submission.\",\n            \"\"\n    \"SETMSG MSG(GC009)\"\n    f1 = 'Lock size'\n    f2 = 'No. Tables'\n    nexto = 'JCL(JC,JXXX)'\n    Return r0perflk(sqlstmt,sqlretf,perfctl1,perfdblk,'R141TP',f1,f2,debug)\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0QUIESC": {"ttr": 3593, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x14\\x01\\x02\"o\\x01\\x02)_\\x16S\\x009\\x000\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2002-08-14T00:00:00", "modifydate": "2002-10-22T16:53:14", "lines": 57, "newlines": 48, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process QUIESCE parameter entry                                   */\n/*--------------------------------------------------------------------*/\nArg oper1,utillib,debug\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    \"VGET (quiev,panelv,ssid,sqlid) SHARED\"\n    \"VGET (\"quiev quiev\") SHARED\"\n    table = 'QU'Time('s')\n\nquies_scr1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL40) CURSOR(&CSR1) CSRPOS(&CSRP1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,quies_scr1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('quiev');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal quies_scr1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '5 /OPEN')\n        Signal quies_scr1\n    End\n\n    ret_scr = 0\n    If quieldef = '*' Then Do\n        x = R0listm(table,utillib)\n        If Datatype(x) = 'CHAR' Then quieldef = x\n        ret_scr = 1\n    End\n    Else If quieldef = '/' Then Do\n             x = r0ldef(utillib,'quieldef')\n             If Datatype(x) = 'CHAR' Then quieldef = x\n             ret_scr = 1\n         End\n    If ret_scr Then Signal quies_scr1\n\n    If Sysdsn(\"'\"utillib\"(\"quieldef\")'\") /= 'OK' Then Do\n        gc009 = Sysdsn(\"'\"utillib\"(\"quieldef\")'\")\n        csr30 = 'QUIELDEF'\n        \"SETMSG MSG(GC009)\"\n        Signal quies_scr1\n    End\n\n    \"VPUT (\"quiev\") SHARED\"\n    Return 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0REBIX": {"ttr": 3841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01(\\x00T\\x01\\x02#\\x1f\\x01\\x021_\\x17\\x06\\x01\\x10\\x00\\xbb\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.40", "flags": 0, "createdate": "2002-08-19T00:00:00", "modifydate": "2002-11-11T17:06:54", "lines": 272, "newlines": 187, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process REBUILD INDEX parameter entry                             */\n/*--------------------------------------------------------------------*/\nArg oper1,utillib,templib,tempsdef,debug\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    \"VGET (rebixv,panelv,ssid,sqlid) SHARED\"\n    \"VGET (\"rebixv panelv\" nexto) SHARED\"\n    table = 'RI'Time('s')\n\nrebldinx_scr1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL120) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If rc /= 0 Then Do\n        \"VPUT (\"rebixv\") SHARED\"\n        gc009 = oper1 \"entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        csr1=;csrp1=\n        Return 9\n    End\n    If zcmd='DEBUG' Then Interpret r0debug(debug,rebldinx_scr1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('rebixv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal rebldinx_scr1;End\n\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '11  /OPEN')\n        Signal rebldinx_scr1\n    End\n    csr1=;csrp1=\n    genolist = 'OFF'\n    opertp = 'REBUILD INDEX'\n    Parse VAR zcmd cmd parm1\n    Select\n        When rbls /= '' Then Do\n            rbls =\n            ulact = 'LS'\n            x = rebldinx_lss1()\n            If x = 0 Then Signal Return0\n        End\n        When rbts /= '' Then Do\n            rbts =\n            ulact = 'TS'\n            x = rebldinx_tss1()\n            opertp = opertp '(ALL) TABLESPACE'\n            If x = 0 Then Signal Return0\n        End\n        When rbix /= '' Then Do\n            rbix =\n            ulact = 'IX'\n            x = rebldinx_ixs1()\n            If x = 0 Then Signal Return0\n        End\n        Otherwise Signal rebldinx_scr1\n    End\n    Signal rebldinx_scr1\n\nReturn0:\n    If rebisrtn /= '' Then sortnum = 'SORTNUM' rebisrtn' '\n    Else                   sortnum =\n    If rebisrtk /= '' Then sortnum = sortnum || 'SORTKEYS'\n    \"VPUT (\"rebixv\" tspace partno nexto genolist ulact sortnum\",\n           \"opertp) SHARED\"\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Rebuild index from LiStdef                                         */\n/*--------------------------------------------------------------------*/\nrebldinx_lss1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL121) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,rebldinx_lss1)\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('rebixv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal rebldinx_lss1;End\n\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '11A /OPEN')\n        Signal rebldinx_lss1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n    If rebildef = '*' Then Do\n        gc009 = 'Listdef processing for Rebuild Index.'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,utillib)\n        If Datatype(x) = 'CHAR' Then rebildef = x\n        ret_scr = 1\n    End\n    Else If rebildef = '/' Then Do\n             gc009 = 'Listdef processing for Rebuild Index.'\n             \"SETMSG MSG(GC009)\"\n             x = r0ldef(utillib,'rebildef')\n             If Datatype(x) = 'CHAR' Then rebildef = x\n             ret_scr = 1\n         End\n    xmsg=Msg('Off')\n    If Sysdsn(\"'\"utillib\"(\"rebildef\")'\") /= 'OK' Then Do\n        gc009 = Sysdsn(\"'\"utillib\"(\"rebildef\")'\")\n        csr1 = 'rebildef'\n        \"SETMSG MSG(GC009)\"\n        xmsg=Msg(xmsg)\n        Signal rebldinx_lss1\n    End\n    xmsg=Msg(xmsg)\n    xx = R0vrldef(utillib'('rebildef')','1ST')\n    If xx /= 0 Then Do\n        gc009 = 'List contains mixture of TABLESPACE and INDEXSPACE.',\n                'Can only have \"'xx'\"s. Please amend the list or',\n                'select an alternative list.'\n        csr1 = 'rebildef'\n        \"SETMSG MSG(GC009)\"\n        Signal rebldinx_lss1\n    End\n    x = rebldinx_ver_common()\n    If ret_scr Then Signal rebldinx_lss1\n    genolist = 'ON'\n    nexto    = 'JCL(JC,J10,J20,J120)'\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Rebuild index from Table Space                                     */\n/*--------------------------------------------------------------------*/\nrebldinx_tss1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL122) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,rebldinx_tss1)\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('rebixv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal rebldinx_tss1;End\n\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '11B /OPEN')\n        Signal rebldinx_tss1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n    If ret_scr Then Signal rebldinx_tss1\n\n/*--------------------------------------------------------------------*/\n/*  If tablespace has not been validated or has changed, do it.       */\n/*--------------------------------------------------------------------*/\n    If r_table_ts /= rebidbnm || rebispce || rebipart Then,\n        If R0valtsp('TS',rebidbnm,rebispce,rebipart) Then Do\n            csr1 = 'rebidbnm'\n            Signal rebldinx_tss1\n        End\n    r_table_ts = rebidbnm || rebispce || rebipart\n\n    x = rebldinx_ver_common()\n    If ret_scr Then Signal rebldinx_tss1\n\n    tspace = rebidbnm'.'rebispce\n    If rebipart = '' Then partno =\n    Else partno = 'PART' rebipart +0 'FORCEROLLUP YES'\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Rebuild index from Index Name                                      */\n/*--------------------------------------------------------------------*/\nrebldinx_ixs1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL123) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,rebldinx_ixs1)\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('rebixv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal rebldinx_ixs1;End\n\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '11C /OPEN')\n        Signal rebldinx_ixs1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n/*--------------------------------------------------------------------*/\n/*  If tablespace has not been validated or has changed, do it.       */\n/*--------------------------------------------------------------------*/\n    If r_table_ix /= rebicrea || rebindex || rebiptix Then Do\n        If R0valtsp('RB',rebicrea,rebindex,rebiptix) Then Do\n            csr1 = 'REBICREA'\n            Signal rebldinx_ixs1\n        End\n        r_table_ix = rebicrea || rebindex || rebiptix\n    End\n\n    x = rebldinx_ver_common()\n    If ret_scr Then Signal rebldinx_ixs1\n\n    tspace = rebicrea'.'rebindex\n    If rebiptix = '' Then partno =\n    Else                  partno = 'PART' rebiptix +0\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Comon rebldinx field verifications:                               */\n/*--------------------------------------------------------------------*/\nrebldinx_ver_common:\n/*--------------------------------------------------------------------*/\n/*  Break up supplied WHEN parameters in 72 character lots without    */\n/*  splitting words.                                                  */\n/*--------------------------------------------------------------------*/\n    If rebiwddn = '*' Then Do\n        gc009 = 'Template processing for WORKDDN Rebuild Index.'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,tempsdef,'$TTY','ND')\n        x = R0listm(table,templib,'$TTY',,'EXIST')\n        If Datatype(x) = 'CHAR' Then Parse VAR x rebiwddn .\n        ret_scr = 1\n    End\n    Else If rebiwddn = '/' Then Do\n             xmsg = 'WORKDDN Rebuild Index'\n             x = R0templ(templib,tempsdef,xmsg,'rebiwddn')\n             If Datatype(x) = 'CHAR' Then rebiwddn = x\n             ret_scr = 1\n         End\n    If Sysdsn(\"'\"templib\"(\"rebiwddn\")'\") /= 'OK' Then,\n        If Sysdsn(\"'\"tempsdef\"(\"rebiwddn\")'\") /= 'OK' Then Do\n            gc009 = 'Template not found.'\n            \"SETMSG MSG(GC009)\"\n            csr1  = 'REBIWDDN'\n            ret_scr=1\n            Return 4\n        End\n    If rebidevt = '*' Then Do\n        gc009 = 'Device type entry for Rebuild Index.'\n        \"SETMSG MSG(GC009)\"\n        x = R0edtl('DASD',10,10,debug)\n        If Datatype(x) = 'CHAR' | x > 20 Then rebidevt = x\n        ret_scr = 1\n    End\n    Else Do\n        x = R0edtl('LIST',,,debug)\n        If Wordpos(rebidevt,x) = 0 Then Do\n            gc009 = 'Invalid devive type. Suggest enter \"*\" for selection list.'\n            \"SETMSG MSG(GC009)\"\n            csr1 = 'rebidevt'\n            ret_scr = 1\n        End\n    End\n\n    Return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0RECOVR": {"ttr": 3843, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00\\x08\\x01\\x02\"o\\x01\\x02)\\x8f\\x10T\\x00\\xe7\\x00\\x80\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2002-08-14T00:00:00", "modifydate": "2002-10-25T10:54:08", "lines": 231, "newlines": 128, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process UNLOAD LISTDEF parameter entry                            */\n/*--------------------------------------------------------------------*/\nArg oper1,utillib,templib,tempsdef,debug\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    \"VGET (recovv,panelv,ssid,sqlid) SHARED\"\n    \"VGET (\"recovv panelv\" nexto) SHARED\"\n    table  = 'RC'Time('s')\n\nrecover_scr1:\n    genolist = 'OFF'\n    rctype   =\n    zcmd     =\n    \"DISPLAY PANEL(&PANEL100) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If rc /= 0 Then Do\n        \"VPUT (\"recovv\") SHARED\"\n        gc009 = oper1 \"entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='DEBUG' Then Interpret r0debug(debug,recover_scr1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('recovv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal recover_scr1;End\n\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '12  /OPEN')\n        Signal recover_scr1\n    End\n    csr1=;csrp1=\n    Parse VAR zcmd cmd parm1\n    Select\n        When ulls /= '' Then Do\n            ulls  =\n            ulact = 'LS'\n            x = recover_lss1()\n            If x = 0 Then Signal Return0\n        End\n        When ults /= '' Then Do\n            ults  =\n            ulact = 'TS'\n            x = recover_tss1()\n            If x = 0 Then Signal Return0\n        End\n        When ulix /= '' Then Do\n            ulix  =\n            ulact = 'IX'\n            x = recover_ixs1()\n            If x = 0 Then Signal Return0\n        End\n        Otherwise Signal recover_scr1\n    End\n    Signal recover_scr1\n\nReturn0:\n    \"VPUT (\"recovv\" nexto genolist ulact tspace partno dsnx\",\n           \"tocopy rctype) SHARED\"\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Recover LiStdef                                                   */\n/*--------------------------------------------------------------------*/\nrecover_lss1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL101) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,recover_lss1)\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"LISTDEF name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('recovv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal recover_lss1;End\n\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '12A /OPEN')\n        Signal recover_lss1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n    If recoldef = '*' Then Do\n        x = R0listm(table,utillib)\n        If Datatype(x) = 'CHAR' Then recoldef = x\n        ret_scr = 1\n    End\n    Else If recoldef = '/' Then Do\n             x = r0ldef(utillib,'recoldef')\n             If Datatype(x) = 'CHAR' Then recoldef = x\n             ret_scr = 1\n         End\n    If Sysdsn(\"'\"utillib\"(\"recoldef\")'\") /= 'OK' Then Do\n        gc009 = Sysdsn(\"'\"utillib\"(\"recoldef\")'\")\n        csr1 = 'recoldef'\n        \"SETMSG MSG(GC009)\"\n        ret_scr = 1\n    End\n    If ret_scr Then Signal recover_lss1\n\n    genolist = 'ON'\n    nexto    = 'JCL(JC,J10,J20,J100)'\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Recover Table Space                                               */\n/*--------------------------------------------------------------------*/\nrecover_tss1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL102) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"DB2 Object name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='DEBUG' Then Interpret r0debug(debug,recover_tss1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('recovv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal recover_tss1;End\n\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '12B /OPEN')\n        Signal recover_tss1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n    tocopy = recotcpy\n/*--------------------------------------------------------------------*/\n/*  If tablespace has not been validated or has changed, do it.       */\n/*--------------------------------------------------------------------*/\n    dbname = recodbnm\n    tspace = recospce\n    If recobjtp = 'IX' Then objtyp = 'RI'\n    Else                    objtyp = recobjtp\n    If r_table_ts /= dbname || tspace || recopart || objtyp Then,\n        If R0valtsp(objtyp,recodbnm,recospce,recopart,debug) Then Do\n            csr1 = 'recodbnm'\n            Signal recover_tss1\n        End\n    r_table_ts = dbname || tspace || recopart || objtyp\n\n    If recotcpy = 'TOCOPY' Then Do\n        If r_table_fc /= dbname || tspace Then Do\n            If R0valcop(dbname,tspace,recopart) Then Do\n                csr1 = 'recodbnm'\n                Signal recover_tss1\n            End\n            \"VGET (dsnx) SHARED\"\n            r_table_fc = dbname || tspace\n        tocopy = 'TOCOPY' dsnx\n        End\n    End\n    If recobjtp = 'TS' Then tspace = 'TABLESPACE' recodbnm'.'recospce\n    Else                    tspace = 'INDEXSPACE' recodbnm'.'recospce\n    If recopart = '' Then partno =\n    Else                  partno = 'DSNUM' recopart +0\n    rctype = recoopt1\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Recover Index                                                     */\n/*--------------------------------------------------------------------*/\nrecover_ixs1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL103) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"DB2 Object name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='DEBUG' Then Interpret r0debug(debug,recover_ixs1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('recovv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal recover_ixs1;End\n\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '12C /OPEN')\n        Signal recover_ixs1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n    tocopy = recotcpy\n/*--------------------------------------------------------------------*/\n/*  If tablespace has not been validated or has changed, do it.       */\n/*--------------------------------------------------------------------*/\n    If r_table_ix /= recocrea || recoindx || recoptix Then Do\n        dbname = recocrea\n        tspace = recoindx\n        If R0valtsp('OW',dbname,tspace,recoptix) Then Do\n            csr1 = 'recocrea'\n            Signal recover_ixs1\n        End\n        \"VGET (sqlretv) SHARED\"\n        Parse VAR sqlretv dbname tspace .\n        If R0valtsp('RI',dbname,tspace,recoptix) Then Do\n            csr1 = 'recocrea'\n            Signal recover_ixs1\n        End\n        r_table_ix = recocrea || recoindx || recoptix\n    End\n\n    If recotcpy = 'TOCOPY' Then Do\n        If R0valcop(dbname,tspace) Then Do\n            csr1 = 'recocrea'\n            Signal recover_ixs1\n        End\n        \"VGET (dsnx) SHARED\"\n        tocopy = 'TOCOPY' dsnx\n    End\n    tspace = 'INDEX' recocrea'.'recoindx\n    If recoptix = '' Then partno =\n    Else                  partno = 'DSNUM' recoptix +0\n    rctype = recoopt1\n\n    Return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0REORG": {"ttr": 4097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01.\\x00P\\x01\\x020/\\x01\\x021\\x0f\\x17W\\x01\\xb4\\x01\\xb1\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.46", "flags": 0, "createdate": "2002-10-29T00:00:00", "modifydate": "2002-11-06T17:57:50", "lines": 436, "newlines": 433, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process REORG parameter entry                                     */\n/*--------------------------------------------------------------------*/\nArg oper1,utillib,templib,tempsdef,debug,ulact\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    \"VGET (reorgv,panelv,ssid,sqlid,rotl,rots,roil,roix,nexto) SHARED\"\n    xx = rotl rots roil roix nexto\n    \"VGET (\"reorgv panelv\") SHARED\"\n    table = 'RO'Time('s')\n\n/*--------------------------------------------------------------------*/\n/*  Called from Preformance Query ?                                   */\n/*--------------------------------------------------------------------*/\n    If ulact /= '' Then Do\n        If ulact = 'TL' Then x=reorg_tls1()\n        Else                 x=reorg_ils1()\n        If x=0 Then Signal Return0\n        Else Return 9\n    End\n\n    If xx/='' Then \"CONTROL NONDISPL ENTER\"\nreorg_scr1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL70) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,reorg_scr1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('reorgv_1');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal reorg_scr1;End\n\n    If rc /= 0 Then Do\n        \"VPUT (\"reorgv\") SHARED\"\n        gc009 = oper1 \"entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        csr1=;csrp1=\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '8  /OPEN')\n        Signal reorg_scr1\n    End\n    csr1=;csrp1=\n    genolist = 'OFF'\n    Parse VAR zcmd cmd parm1\n\n    Select\n        When rotl /= '' Then Do\n            oper1=Word(oper1,1) 'TS'\n            rotl=;ulact='TL'\n            x = reorg_tls1();If x=0 Then Signal Return0\n        End\n        When rots /= '' Then Do\n            oper1=Word(oper1,1) 'TS'\n            rots=;ulact='TS'\n            x = reorg_tss1();If x=0 Then Signal Return0\n        End\n        When roil /= '' Then Do\n            oper1=Word(oper1,1) 'IX'\n            roil=;ulact='IL'\n            x = reorg_ils1();If x=0 Then Signal Return0\n        End\n        When roix /= '' Then Do\n            oper1=Word(oper1,1) 'IX'\n            roix=;ulact='IX'\n            x=reorg_ixs1();If x=0 Then Signal Return0\n        End\n        Otherwise NOP\n    End\n\n    Signal reorg_scr1\n\nReturn0:\n    dranspec=;deadlin1=;deadlin2=;deadlin3=;deadlin4=\n    mapping1=;mapping2=;mapping3=;mapping4=\n    report=\n    If Word(oper1,2) = 'TS' Then Do\n        If reoroffl /= '' Then report = report || 'OFFPOSLIMIT' reoroffl' '\n        If reorindr /= '' Then report = report || 'INDREFLIMIT' reorindr' '\n    End\n    Else,\n        If reorleaf /= '' Then report = report || 'LEAFDISTLIMIT' reorleaf' '\n    If reorrepo = 'YES' Then report = report || 'REPORTONLY'\n\n    If reorshrl /= 'NONE' Then Do\n        If reorshrl = 'CHANGE' Then Do\n            If reordraw /= '' Then dranspec = dranspec ' DRAIN WAIT' reordraw\n            If reorretr /= '' Then dranspec = dranspec ' RETRY' reorretr\n            If reorretd /= '' Then dranspec = dranspec ' RETRY DELAY' reorretd\n            #deadlin = #deadlin || dranspec\n            i=0;xx='DEADLINE'\n            Do while #deadlin /= ''\n                i=i+1;ll=55-Length(xx)\n                Interpret \"deadlin\"i\" = xx R0wordat(#deadlin,ll,'L')\"\n                xx='   '\n                #deadlin = R0wordat(#deadlin,ll,'T')\n            End\n\n            mapping  = reormdbn'.'reormtsp\n            If reormxro /= '' Then mapping  = mapping  ' MAXRO' reormxro\n            If reordran /= '' Then mapping  = mapping  ' DRAIN' reordran\n            If reorllog /= '' Then mapping  = mapping  ' LONGLOG' reorllog\n            If reordlay /= '' Then mapping  = mapping  ' DELAY' reordlay\n            If reortout /= '' Then mapping  = mapping  ' TIMEOUT' reortout\n            i=0;xx='MAPPINGTABLE'\n            Do while mapping /= ''\n                i=i+1;ll=55-Length(xx)\n                Interpret \"mapping\"i\" = xx R0wordat(mapping,ll,'L')\"\n                xx='   '\n                mapping = R0wordat(mapping,ll,'T')\n            End\n        End\n    End\n    \"VPUT (\"reorgv\" deadlin1 deadlin2 deadlin3 deadlin4\",\n           \"mapping1 mapping2 mapping3 mapping4 report\",\n           \"rotl rots roil roix\",\n           \"tspace partno nexto genolist ulact) SHARED\"\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* REORG database from LISTDEF                                        */\n/*--------------------------------------------------------------------*/\nreorg_tls1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL71) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,reorg_tls1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('reorgv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal reorg_tls1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"from LIST entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '8A /OPEN')\n        Signal reorg_tls1\n    End\n\n    ret_scr=0\n    x=reorg_ver_list('Database');If ret_scr Then Signal reorg_tls1\n\n    x=reorg_ver_common();If ret_scr Then Signal reorg_tls1\n\n    genolist='ON';nexto='JCL(JC,J10,J20,J70)'\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* REORG database from TableSpace                                     */\n/*--------------------------------------------------------------------*/\nreorg_tss1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL72) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,reorg_tss1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('reorgv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal reorg_tss1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '8B /OPEN')\n        Signal reorg_tss1\n    End\n\n    ret_scr = 0\n/*--------------------------------------------------------------------*/\n/*  If tablespace has not been validated or has changed, do it.       */\n/*--------------------------------------------------------------------*/\n    If r_table_ts /= reordbnm || reortspc || reorpart Then,\n        If R0valtsp('TS',reordbnm,reortspc,reorpart) Then Do\n            csr1 = 'REORDBNM'\n            Signal reorg_tss1\n        End\n    r_table_ts = reordbnm || reortspc || reorpart\n\n    x = reorg_ver_common()\n    If ret_scr Then Signal reorg_tss1\n\n    tspace = reordbnm'.'reortspc\n    If reorpart = '' Then partno=\n    Else partno = 'PART' reorpart +0 'FORCEROLLUP YES'\n\n    nexto    = 'JCL(JC,J20,J70)'\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* REORG Index from LISTDEF                                           */\n/*--------------------------------------------------------------------*/\nreorg_ils1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL73) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,reorg_tls1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('reorgv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal reorg_tls1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"from LIST entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '8A /OPEN')\n        Signal reorg_ils1\n    End\n\n    ret_scr=0\n    x=reorg_ver_list('Index');If ret_scr Then Signal reorg_ils1\n\n    x=reorg_ver_common();If ret_scr Then Signal reorg_ils1\n\n    genolist='ON';nexto='JCL(JC,J10,J20,J70)'\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* REORG Index from Index                                             */\n/*--------------------------------------------------------------------*/\nreorg_ixs1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL74) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,reorg_ixs1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('reorgv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal reorg_ixs1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '8B /OPEN')\n        Signal reorg_ixs1\n    End\n\n    ret_scr = 0\n\n/*--------------------------------------------------------------------*/\n/*  If Index has not been validated or has changed, do it.            */\n/*--------------------------------------------------------------------*/\n    If r_table_ix /= reorcrea || reorindx || reorpart Then Do\n        If R0valtsp('RB',reorcrea,reorindx,reorpart) Then Do\n            csr1 = 'REORCREA'\n            Signal reorg_ixs1\n        End\n        r_table_ix = reorcrea || reorindx || reorpart\n    End\n\n    x = reorg_ver_common()\n    If ret_scr Then Signal reorg_ixs1\n\n    If reorpart = '' Then partno =\n    Else                  partno = 'PART' reorpart +0\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Common REORG field verifications:                                 */\n/*--------------------------------------------------------------------*/\nreorg_ver_list:\n    If utillib = '' Then Return 0\n    gc009 = 'Listdef processing for REORG' Arg(1)'.'\n    If reorldef = '*' Then Do\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,utillib)\n        If Datatype(x) = 'CHAR' Then reorldef = x\n        ret_scr = 1\n    End\n    Else If reorldef = '/' Then Do\n             \"SETMSG MSG(GC009)\"\n             x = r0ldef(utillib,'reorldef')\n             If Datatype(x) = 'CHAR' Then reorldef = x\n             ret_scr = 1\n         End\n    If Sysdsn(\"'\"utillib\"(\"reorldef\")'\") /= 'OK' Then Do\n        gc009 = Sysdsn(\"'\"utillib\"(\"reorldef\")'\")\n        csr1 = 'REORLDEF'\n        \"SETMSG MSG(GC009)\"\n        ret_scr = 1\n    End\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Verify common fields                                              */\n/*--------------------------------------------------------------------*/\nreorg_ver_common:\n    Call test_ddn_list\n    If ret_scr Then Return 4\n\n    deadlin=\n    If reorshrl = 'NONE' Then Signal test_ddn_list\n    If reordead /= 'CURRENT' Then Signal SHR_level_CHANGE\n/*--------------------------------------------------------------------*/\n/*  If Deadline = CURRENT then pop up duration expression panel.      */\n/*--------------------------------------------------------------------*/\ndur_ex_scr1:\n    zcmd=\n    zwinttl  = 'Deadline Durations'\n    \"ADDPOP ROW(8) COLUMN(8)\"\n    \"DISPLAY PANEL(&PANEL75) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    rc1 = rc\n    \"REMPOP\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,dur_ex_scr1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('reorgv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        gc009 = 'Default values changed. Returning for verificatiom.'\n        \"SETMSG MSG(GC009)\"\n        ret_scr = 1\n        csr1='ZCMD';Return 9;\n    End\n\n    If rc1 /= 0 Then Do\n        ret_scr=1\n        gc009 = 'Deadline CURRENT parameter entry screen abandoned.'\n        \"SETMSG MSG(GC009)\"\n        csr1='REORDEAD'\n        Return 9\n    End\n    deadlin = reordead reorcurt\n    Do i=1 To 7\n        Interpret \"sign=reorsig\"i\n        If sign = '' Then Iterate\n        Interpret \"valu=reorval\"i\";dura=reordur\"i\n        If Index(' 'deadlin' ',' 'dura' ') > 0 Then Do\n            gc009 = 'Duration \"'dura'\" already used.'\n            \"SETMSG MSG(GC009)\"\n            csr1 = 'REORDUR'i\n            Signal dur_ex_scr1\n        End\n        deadlin = deadlin sign valu dura\n    End\n\n    If deadlin = reordead reorcurt Then Do\n        gc009 = \"No deadline duration specifications entered.\"\n        \"SETMSG MSG(GC009)\"\n        Signal dur_ex_scr1\n    End\n    If #deadlin /= deadlin Then Do\n        #deadlin = deadlin\n        gc009 = \"Hit [ENTER] to verify parameters or change as required.\"\n        \"SETMSG MSG(GC009)\"\n        Signal dur_ex_scr1\n    End\n/*--------------------------------------------------------------------*/\n/*  If SHR level=CHANGE, have to verify MAPPINGTABLE.                 */\n/*--------------------------------------------------------------------*/\nSHR_level_CHANGE:\n    If r_table_mt /= reormdbn || reormtsp Then Do\n        sqlstmt = \"SELECT DBNAME,TSNAME\",\n                 \"FROM SYSIBM.SYSTABLES\",\n                 \"WHERE CREATOR = '\"reormdbn\"'\",\n                 \"AND   NAME   = '\"reormtsp\"'\"\n        sqlretf = ':database,:tspace'\n        \"VPUT (sqlstmt,sqlretf) SHARED\"\n        x  = R0dsnrx('On')\n        xx = R0dsnrx('Ex',1)\n        x  = R0dsnrx('Off')\n        If xx /= 0 Then Do\n            gc009 = '\"'reormdbn'.'reormtsp'\" table not found on \"',\n                    ssid'\", RC = 'xx'.'\n             \"SETMSG MSG(GC009)\"\n            csr1 = 'REORMDBN'\n            ret_scr=1\n        End\n        Else r_table_mt = reormdbn || reormtsp\n    End\n    If ret_scr Then Return 4\n/*--------------------------------------------------------------------*/\n/*  Test all the DDNs for * or / values                               */\n/*--------------------------------------------------------------------*/\ntest_ddn_list:\n    ddnused = 'P,C,R'\n    x = Msg('Off')\n    Do WHile ddnused /= ''\n        Parse VAR ddnused ddn ',' ddnused\n        Interpret 'xxx = REOR'ddn'DDN'\n        If xxx = '' Then Iterate\n        If xxx = '*' | xxx = '/' Then Do\n            Select\n                When ddn = 'C' Then yyy = 'COPYDDN'\n                When ddn = 'R' Then yyy = 'RECOVERYDDN'\n                When ddn = 'P' Then yyy = 'PUNCHDDN'\n                Otherwise           yyy = '????DDN'\n            End\n            Interpret 'REOR'ddn'DDN = reorg_templates(yyy,xxx)'\n            Interpret 'xxx = REOR'ddn'DDN'\n        End\n        If Sysdsn(\"'\"tempsdef\"(\"Strip(xxx)\")'\") /= 'OK' Then,\n            If Sysdsn(\"'\"templib\"(\"Strip(xxx)\")'\") /= 'OK' Then Do\n                csr1 = 'REOR'ddn'DDN'\n                ddnused=\n                gc009 = 'Template not found. Please correct and hit',\n                        '[ENTER].'\n                \"SETMSG MSG(GC009)\"\n                ret_scr=1\n            End\n    End\n\n    Return 0\n/*--------------------------------------------------------------------*/\n/*  Comon template testing routine                                    */\n/*--------------------------------------------------------------------*/\nreorg_templates: Arg v1,v2\n    xxx = '?'\n    If v2 = '*' Then Do\n        gc009 = 'Template processing for REORG' v1'.'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,tempsdef,'$TTY','ND')\n        x = R0listm(table,templib,'$TTY',,'EXIST')\n        If Datatype(x) = 'CHAR' Then Parse VAR x xxx .\n        ret_scr = 1\n    End\n    Else If v2 = '/' Then Do\n             xmsg = 'REORG' v1\n             x = R0templ(templib,tempsdef,xmsg,v1)\n             If Datatype(x) = 'CHAR' Then xxx = x\n             ret_scr = 1\n         End\n\n    Return xxx\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0RUNSTS": {"ttr": 4100, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x14\\x01\\x020_\\x01\\x020_\\x10\\x10\\x00?\\x00?\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-11-01T00:00:00", "modifydate": "2002-11-01T10:10:14", "lines": 63, "newlines": 63, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process RUNSTAT LISTDEF parameter entry.                          */\n/*                                                                    */\n/*  When utillib='' then invocation was from Performance Query funct  */\n/*  with a predefined LISTDEF and utility id.                         */\n/*--------------------------------------------------------------------*/\nArg oper1,utillib,debug\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    \"VGET (runsv,panelv) SHARED\"\n    \"VGET (\"runsv panelv\") SHARED\"\n    table = 'RU'Time('s')\n\nrunstat_scr1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL30) CURSOR(&CSR1) CSRPOS(&CSRP1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,runstat_scr1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('runsv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal runstat_scr1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        \"VPUT (\"runsv\") SHARED\"\n        gc009 = oper1 \"entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '4  /OPEN')\n        Signal runstat_scr1\n    End\n\n    If utillib = '' Then Signal Return0\n    ret_scr = 0\n    If runsldef = '*' Then Do\n        x = R0listm(table,utillib)\n        If Datatype(x) = 'CHAR' Then runsldef = x\n        ret_scr = 1\n    End\n    Else If runsldef = '/' Then Do\n             x = r0ldef(utillib,'runsldef')\n             If Datatype(x) = 'CHAR' Then runsldef = x\n             ret_scr = 1\n         End\n    If ret_scr Then Signal runstat_scr1\n\n    If Sysdsn(\"'\"utillib\"(\"runsldef\")'\") /= 'OK' Then Do\n        gc009 = Sysdsn(\"'\"utillib\"(\"runsldef\")'\")\n        csr1 = 'RUNSLDEF'\n        \"SETMSG MSG(GC009)\"\n        Signal runstat_scr1\n    End\n\nReturn0:\n    \"VPUT (\"runsv\") SHARED\"\n    Return 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0SITE$": {"ttr": 4353, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00Y\\x01\\x021o\\x01\\x021o\\x16W\\x01\\x98\\x01\\x93\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "2002-11-12T00:00:00", "modifydate": "2002-11-12T16:57:59", "lines": 408, "newlines": 403, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------ooo000OOOO000ooo--------------------------*/\n/*                                                                    */\n/* Standalone module to customise per site for varaiable default      */\n/* settings.                                                          */\n/*                                                                    */\n/*--------------------------------------------------------------------*/\n/*                                                                    */\n/* For testing enter the following command on the command line:       */\n/*   \"C C838704 userid\" where userid is the tester.                   */\n/* This will set working default values that would normally not be    */\n/* set for the end user. (Saves keystrokes.)                          */\n/*                                                                    */\n/*--------------------------------------------------------------------*/\n    Arg parm1\n    Address ISPEXEC\n\n    Interpret 'Call' parm1\n\n    defvars=\n    Do i=n_st To n_en\n        Parse Value Sourceline(i) with vn . val .\n        If val /= '' & val /= '/*' Then defvars = defvars vn\n    End\n    \"VPUT (defvars) SHARED\";\"VPUT (\"defvars\") SHARED\"\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Common variables used by different programs.                       */\n/*--------------------------------------------------------------------*/\ncommon_vars:\n    userid   = Userid()\n    sysp     = Sysvar(Syspref)\n    ascb     = Storage(d2x(548),4)\n    asxb     = Storage(d2x(c2d(ascb)+c2d(x2c(6c))),4)\n    acee     = Storage(d2x(c2d(asxb)+c2d(x2c(c8))),4)\n    group    = Strip( Storage(d2x(c2d(acee)+c2d(x2c(1e))),8) )\n    dual     = sysp'.'userid\n    hlqdsn   = group\n    hlqlib   = dual\n    hlqwrk   = dual\n    acct     = 'XXX'\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* How to use.  Ensure the variable definitions in R0DRVR reconcile   */\n/* with the variables below. Pass the variable goup name (as a        */\n/* literal) and the appropriate paragraph will be called. On return   */\n/* from the call any variables not allocated a value (from sourceline */\n/* and 'var= ') will not be put in the variable list for placement    */\n/* into the SHARED profile. The invoking program should then get the  */\n/* values from the profile.                                           */\n/* Note - There is a difference in \"var= \" and \"var='' \".             */\n/* For variable 'COPYV' code as follows:                              */\n/*--------------------------------------------------------------------*/\n    x=R0site$('COPYV');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n\n\n/*--------------------------------------------------------------------*/\n/* R0DRVR required defaults                                           */\n/*--------------------------------------------------------------------*/\ndrvrv:\n    x=common_vars()\n    n_st=mark(1)\n    db2ssid  = 'DSN3EPX'    /* DB2 init program identifier            */\n    utillib  = hlqlib'.LISTDEF'\n    tempsdef = 'IVDB2.DB2USER.TEMPLATE'\n    templib  = hlqlib'.TEMPLATE'\n    outlist  = hlqwrk'.$DB2.OUTLIST'\n    sqlid    = group\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0TEMPL required defaults                                          */\n/*--------------------------------------------------------------------*/\ntempv:\n    x=common_vars()\n    n_st=mark(1)\n    tempdsn  = hlqdsn'.&DB..&TS..D&DT..T&TI.'\n    temptrtc = 'NONE'\n    tempstck = 'YES'\n    tempvcnt = '5'\n    tempdcb  = 'IVDB2.DB2USER.MODELDCB'\n    tempdis1 = 'NEW'\n    tempdis2 = 'CATLG'\n    tempdis3 = 'DELETE'\n    tempunit = 'CART'\n    tempspty = 'CYL'\n    tempspa1 = '15'\n    tempspa2 = '15'\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0COPY/R0MODIFY required defaults                                  */\n/*--------------------------------------------------------------------*/\ncopyv:    n_st=mark(1)\n    copyldef =                              /* Should not be set      */\n    copycddn = 'COPYDDN'\n    copyrddn =\n    copyid   = Userid()'C'\n    copyage  = '15'\n    copylcop = '24'\n    copyshrl = 'CHANGE'\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0MODIFY required defaults                                         */\n/*--------------------------------------------------------------------*/\ncopyv_m:  n_st=mark(1)\n    copyid   = Userid()'C'\n    copyage  = '15'\n    copylcop = '24'\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0RUNSTS required defaults                                         */\n/*--------------------------------------------------------------------*/\nrunsv:    n_st=mark(1)\n    runsldef =                              /* Should not be set      */\n    runsid   = Userid()'R'\n    runsrep  = 'YES'\n    runsshrl = 'CHANGE'\n    runsupdt = 'SPACE'\n    runshist = 'SPACE'\n    runspct  = '25'\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0QIUIES required defaults                                         */\n/*--------------------------------------------------------------------*/\nquiev:    n_st=mark(1)\n    quieldef =                              /* Should not be set      */\n    quieid   = Userid()'Q'\n    quiewrit = 'NO'\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0UNLOAD required defaults                                         */\n/*--------------------------------------------------------------------*/\nuloadv:   n_st=mark(1)\n    unldldef =                              /* Should not be set      */\n    unldownr =                              /* Should not be set      */\n    unldtbnm =                              /* Should not be set      */\n    unlddbnm =                              /* Should not be set      */\n    unldtspc =                              /* Should not be set      */\n    unldpart =                              /* Should not be set      */\n    unldwhn1 =                              /* Should not be set      */\n    unldwhn2 =                              /* Should not be set      */\n    unldwhn3 =                              /* Should not be set      */\n    unldid   = Userid()'U'\n    unldspct =\n    unldlimt =\n    unldpddn = 'PUNCHDDN'\n    unlduddn = 'UNLDDN'\nIf Userid()=C838704 Then Do;                /* Fort testing ONLY      */\n                                            /* Fort testing ONLY      */\nEnd                                         /* Fort testing ONLY      */\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0LOAD required defaults (set #1)                                  */\n/*--------------------------------------------------------------------*/\nloadv_1:  n_st=mark(1)\n    loadid   = Userid()'L'\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0LOAD required defaults (set #2)                                  */\n/*--------------------------------------------------------------------*/\nloadv_2:  n_st=mark(1)\n    loadpdsn =                              /* Should not be set      */\n    loadudsn =                              /* Should not be set      */\nIf Userid()=C838704 Then Do;                /* Fort testing ONLY      */\nloadpdsn = \"'TPCICS.C838704.SYSDBAUT.PUNCH'\"\nloadudsn = \"'TPCICS.C838704.SYSDBAUT.UNLOAD'\"\nEnd                                         /* Fort testing ONLY      */\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0LOAD required defaults (set #3)                                  */\n/*--------------------------------------------------------------------*/\nloadv_3:  n_st=mark(1)\n    loadsrtk =                              /* Should not be set      */\n    loadsrtn =                              /* Should not be set      */\n    loadupdt = 'SPACE'\n    loadhist = 'SPACE'\n    loadrepl = 'YES'\n    loadshrl = 'CHANGE'\n    loadstat = 'YES'\n    loadwddn = 'WORKDDN'\n    loadeddn = 'ERRDDN'\n    loadmddn = 'MAPDDN'\n    loaddddn = 'DISCARD'\n    loadcddn = 'COPYDDN'\n    loadrddn = 'RECOVERY'\n    loaddevt = 'SYSALLDA'\n    loadresu = 'NO'\n    loadspct = 25\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0REORG required defaults (set #1)                                 */\n/*--------------------------------------------------------------------*/\nreorgv_1: n_st=mark(1)\n    reorid   = Userid()'R'\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0REORG required defaults                                          */\n/*--------------------------------------------------------------------*/\nreorgv:   n_st=mark(1)\n    reordbnm =                              /* Should not be set      */\n    reortspc =                              /* Should not be set      */\n    reorpart =                              /* Should not be set      */\n    reorcrea =                              /* Should not be set      */\n    reorindx =                              /* Should not be set      */\n    reorldef =                              /* Should not be set      */\n    reormtsp =                              /* Should not be set      */\n    reormdbn =                              /* Should not be set      */\n    reordwat =                              /* Should not be set      */\n    reorrtry =                              /* Should not be set      */\n    reorkdic = 'YES'\n    reorrdel = 300\n    reorleaf = 200\n    reorrddn = 'RECOVERY'\n    reorshrl = 'CHANGE'\n    reorcurt = 'TIMESTAMP'\n    reorsdat = 'YES'\n    reorskey = 'YES'\n    reorupdt = 'SPACE'\n    reorhist = 'SPACE'\n    reorpddn = 'PUNCHDDN'\n    reorcddn = 'COPYDDN'\n    reorruse = 'YES'\n    reorlog  = 'YES'\n    reordead = 'CURRENT'\n    reormxro = 'DEFER'\n    reordran = 'WRITERS'\n    reorllog = 'CONTINUE'\n    reordlay = 181\n    reortout = 'ABEND'\n    reorfswc = 'YES'\n    reorstat = 'YES'\n    reorspct = 25\n    reordraw = 1800\n    reorretr = 255\n    reorretd = 1\n    reoroffl = 10\n    reorindr = 10\n    reorrepo = 'YES'\n    reorsig1 = '+'\n    reorval1 = 13\n    reordur1 = 'DAYS'\n    reorsig2 = ''\n    reorval2 = ''\n    reordur2 = ''\n    reorsig3 = ''\n    reorval3 = ''\n    reordur3 = ''\n    reorsig4 = ''\n    reorval4 = ''\n    reordur4 = ''\n    reorsig5 = ''\n    reorval5 = ''\n    reordur5 = ''\n    reorsig6 = ''\n    reorval6 = ''\n    reordur6 = ''\n    reorsig7 = ''\n    reorval7 = ''\n    reordur7 = ''\n    reorid   = Userid()'G'\nIf Userid()=C838704 Then Do;                /* Fort testing ONLY      */\n    reormdbn = 'DSN8710'                    /* Fort testing ONLY      */\n    reormtsp = 'MAP_TBL'                    /* Fort testing ONLY      */\nEnd                                         /* Fort testing ONLY      */\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0RECOVR required defaults                                         */\n/*--------------------------------------------------------------------*/\nrecovv:   n_st=mark(1)\n    recoldef =                              /* Should not be set      */\n    recodbnm =                              /* Should not be set      */\n    recospce =                              /* Should not be set      */\n    recobjtp =                              /* Should not be set      */\n    recotcpy =                              /* Should not be set      */\n    recotdsn =                              /* Should not be set      */\n    recopart =                              /* Should not be set      */\n    recoptix =                              /* Should not be set      */\n    recocrea =\n    recoindx =\n    recobjtp = 'TS'\n    recoopt1 = 'REUSE'\n    recoid   = Userid()'O'\nIf Userid()=C838704 Then Do;                /* Fort testing ONLY      */\nrecodbnm = 'DSN8D71A'                       /* Fort testing ONLY      */\nrecospce = 'DSN8S71E'                       /* Fort testing ONLY      */\nrecobjtp = 'TS'                             /* Fort testing ONLY      */\nrecopart = 7                                /* Fort testing ONLY      */\nrecotcpy = 'TOCOPY'                         /* Fort testing ONLY      */\nrecocrea = 'DSN8710'                        /* Fort testing ONLY      */\nrecoindx = 'XEMP1'                          /* Fort testing ONLY      */\nEnd                                         /* Fort testing ONLY      */\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0REBIX  required defaults                                         */\n/*--------------------------------------------------------------------*/\nrebixv:   n_st=mark(1)\n    rebicrea =                              /* Should not be set      */\n    rebindex =                              /* Should not be set      */\n    rebidbnm =                              /* Should not be set      */\n    rebispce =                              /* Should not be set      */\n    rebipart =                              /* Should not be set      */\n    rebiptix =                              /* Should not be set      */\n    rebildef =                              /* Should not be set      */\n    rebistat = 'YES'\n    rebiupdt = 'SPACE'\n    rebihist = 'SPACE'\n    rebiwddn = 'WORKDDN'\n    rebidevt = 'SYSALLDA'\n    rebisrtk = 'YES'\n    rebireus = 'YES'\n    rebisrtn =\n    rebiid   = Userid()'B'\nIf Userid()=C838704 Then Do;                /* Fort testing ONLY      */\nrebicrea = DSN8710                          /* Fort testing ONLY      */\nrebindex = XEMP1                            /* Fort testing ONLY      */\nrebidbnm = DSN8D71A                         /* Fort testing ONLY      */\nrebispce = DSN8S71E                         /* Fort testing ONLY      */\nrebipart = 7                                /* Fort testing ONLY      */\nEnd                                         /* Fort testing ONLY      */\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0CHKDAT required defaults                                         */\n/*--------------------------------------------------------------------*/\nchkdav:   n_st=mark(1)\n    chkddbnm =                              /* Should not be set      */\n    chkdtspc =                              /* Should not be set      */\n    chkdpart =                              /* Should not be set      */\n    chkdid   = Userid()'D'                  /* Should not be set      */\n    chkdscop = 'PENDING'\n    chkdauxe = 'INVALIDATE'\n    chkdeddn = 'ERRDDN'\n    chkdwddn = 'WORKDDN'\n    chkddevt = 'SYSALLDA'\n    chkddelt = 'YES'\n    chkdlog  = 'YES'\n    chkdexcp = 25\n    chkdsrtn = 5\nIf Userid()=C838704 Then Do;                /* Fort testing ONLY      */\nchkddbnm = DSN8D71A                         /* Fort testing ONLY      */\nchkdtspc = DSN8S71E                         /* Fort testing ONLY      */\nchkdpart = 7                                /* Fort testing ONLY      */\nEnd                                         /* Fort testing ONLY      */\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0CHKIX  required defaults                                         */\n/*--------------------------------------------------------------------*/\nchkixv:   n_st=mark(1)\n    chkicrea =                              /* Should not be set      */\n    chkindex =                              /* Should not be set      */\n    chkidbnm =                              /* Should not be set      */\n    chkispce =                              /* Should not be set      */\n    chkipart =                              /* Should not be set      */\n    chkiptix =                              /* Should not be set      */\n    chkildef =                              /* Should not be set      */\n    chkiid   = Userid()'I'\n    chkiwddn = 'WORKDDN'\n    chkidevt = 'SYSALLDA'\n    chkisrtn =\nIf Userid()=C838704 Then Do;                /* Fort testing ONLY      */\nchkicrea = DSN8710                          /* Fort testing ONLY      */\nchkindex = XEMP1                            /* Fort testing ONLY      */\nchkidbnm = DSN8D71A                         /* Fort testing ONLY      */\nchkispce = DSN8S71E /*  4  */               /* Fort testing ONLY      */\nchkipart = 7                                /* Fort testing ONLY      */\nEnd                                         /* Fort testing ONLY      */\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0PERFQ  required defaults                                         */\n/*--------------------------------------------------------------------*/\nperfqv:   n_st=mark(1)\n    perfdblk =                              /* Should not be set      */\n    perfid   = Userid()'P'\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0MIGRAT required defaults                                         */\n/*--------------------------------------------------------------------*/\nmigrtv:   n_st=mark(1)\n    x=common_vars()\n    migrldef =                              /* Should not be set      */\n    migrpddn =                              /* Should not be set      */\n    migruddn =                              /* Should not be set      */\n    migrssid =                              /* Should not be set      */\n    migrsubl = 'N'\n    migrlpar =                              /* Should not be set      */\n    migrldsn = dual'.&SSID..MODPUNCH'\n    migrmdsn = dual'.&SSID..SYSMAP'\n    migrtdsn = dual'.&LPAR..TEMPDSN'\n    migracct =\n    migrxcls =\n    migrmcls =\n    migrid   = Userid()'M'\n    n_en=mark(-1);Return 0\n/*--------------------------------------------------------------------*/\n/* R0JOBCRD required defaults                                         */\n/* job#type - Incrementat -> incremental numeric suffix.              */\n/*--------------------------------------------------------------------*/\njobcv:\n    x=common_vars()\n    n_st=mark(1)\n    jobcard1 =  \"//\"Userid()\"A JOB (\"acct\"),'&UTILITY',CLASS=A,\" ||,\n                \"MSGCLASS=X,\"\n    jobcard2 =  \"//*   RESTART=&UTILITY,\"\n    jobcard3 =  \"//    NOTIFY=&SYSUID,TIME=1440\"\n    jobcard4 =  \"//*\"\n    jobcard5 =  \"//*\"\n    n_en=mark(-1);Return 0\nMark: Arg diff;If Datatype(diff)/='NUM' Then diff=1;Return sigl+diff\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0STATS": {"ttr": 4356, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00E\\x01\\x02\"_\\x01\\x02\"_\\x16E\\x00\\x11\\x00\\x0b\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-08-13T00:00:00", "modifydate": "2002-08-13T16:45:45", "lines": 17, "newlines": 11, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Create stats for a member created under EXECIO which would leave  */\n/*  no stats.                                                         */\n/*--------------------------------------------------------------------*/\nArg ifile\n    Address ISPEXEC\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    Parse VAR ifile ifile '(' member ')'\n    \"LMINIT DATAID(DATA1) DATASET('&IFILE') ENQ(SHR)\"\n    \"LMMSTATS DATAID(&DATA1) MEMBER(&MEMBER)\"\n    \"LMFREE  DATAID(&DATA1)\"\n    Return 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0T": {"ttr": 4358, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x009\\x01\\x02\"\\x0f\\x01\\x02)_\\x14\\x03\\x00L\\x00G\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2002-08-08T00:00:00", "modifydate": "2002-10-22T14:03:39", "lines": 76, "newlines": 71, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Validate and if valid list Table/indexspace copies.               */\n/*--------------------------------------------------------------------*/\nArg sqlstmt,table,debug\n\nTrace r\n    If debug /= '' Then Trace r\n    paneltb = 'R140TP'                      /* Dataset table display  */\n    Address ISPEXEC\nssid='DB2H';\"VPUT (ssid) SHARED\";table='rambo'\n    sqlstmt = \"SELECT DBNAME,INDEXSPACE,CREATOR,NAME,TBCREATOR,TBNAME\",\n                      \"FROM SYSIBM.SYSINDEXES\",\n                      \"WHERE SPACEF = - 1\",\n                      \"AND   DBNAME LIKE 'DSN%'\"\n    x = R0dsnrx('On')\n\n    sqlretf = ':dbname,:name,:v1,:v2,:v4,:v5'\n    \"VPUT (sqlstmt,sqlretf) SHARED\"\n    xx = R0dsnrx('Ex','*')\n    x  = R0dsnrx('Off')\n    \"VGET (sqlretv) SHARED\"\nSay sqlretv\n    If sqlretv = '' Then Do\n        gc009 = 'No COPY found for tablespace',\n                '\"'dbname'.'tspace'\" on \"'ssid'\", RC = 'xx'.'\n        \"SETMSG MSG(GC009)\"\n        Return 1\n    End\n\n    seq#  = 0\n    \"TBCREATE &TABLE KEYS(SEQ#,DBNAME,NAME) NAMES(SEL) REPLACE NOWRITE\"\n    \"TBSORT   &TABLE FIELDS(DBNAME,C,D)\"\n\n    flds = Translate(sqlretf,'  ',':,')\n    Do While sqlretv /= ''\n        Interpret 'Parse VAR sqlretv' flds 'sqlretv'\n        seq#=seq#+1\n        \"TBMOD  &TABLE\"\n    End\n    \"TBTOP &TABLE\"\n\n    selall=\ndis0:\n    \"TBDISPL &TABLE PANEL(&PANELTB)\"\n    If rc > 4 Then Do\n        \"TBEND &TABLE\"\n        gc009 = 'COPY selection abandoned.'\n        \"SETMSG MSG(GC009)\"\n        Return 1\n    End\n    \"VPUT (perfid) SHARED\"\n    If selall='*' Then Do\n        \"TBTOP &TABLE\"\n        Do Forever\n            \"TBSKIP &TABLE\";If rc /= 0 Then Leave\n            sel = 'S'\n            \"TBMOD &TABLE\"\n        End\n        Return 0\n    End\n\n    If ztdsels = 0 Then Return 0\n    msub = ztdsels\n    Signal con0\nmus0:\n    \"TBDISPL &TABLE\"\ncon0:\n    If sel = '' Then Signal gnx0\n    sel = 'S'\n    \"TBMOD &TABLE\"\ngnx0:\n    msub = msub - 1\n    If msub < 1 Then  Signal dis0\n    Else              Signal mus0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0TEMPL": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x007\\x01\\x02\"_\\x01\\x021o\\x15I\\x00\\xe9\\x00\\xa2\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "2002-08-13T00:00:00", "modifydate": "2002-11-12T15:49:37", "lines": 233, "newlines": 162, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process TEMPLATE data                                             */\n/*--------------------------------------------------------------------*/\nParse Arg templib,tempsdef,xmsg,debug\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n    table   = 'TM'Time('s')\n    \"VGET (panelv,tempv) SHARED\";\"VGET (\"panelv\") SHARED\"\n    \"VGET (\"tempv\") PROFILE\"\n    xmsg=Msg('Off')\ntemplate_process:\n    templat# = Arg(4)\n    template =\n    gc009 = 'Template processing for' xmsg\n    \"SETMSG MSG(GC009)\"\n    edt='DASD';Call edtlist;Parse VAR edtlist +8 dasdlist +8 edtlist\n    dasdlist=Strip(dasdlist)\n    Do While edtlist /= ''\n        Parse VAR edtlist xx +8 edtlist\n        dasdlist=dasdlist Strip(xx)\n    End\n    edt='TAPE';Call edtlist;Parse VAR edtlist +8 tapelist +8 edtlist\n    tapelist=Strip(tapelist)\n    Do While edtlist /= ''\n        Parse VAR edtlist xx +8 edtlist\n        tapelist=tapelist Strip(xx)\n    End\n\ntemp_scr1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL14) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,temp_scr1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('tempv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal temp_scr1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        \"VPUT (\"tempv\") PROFILE\"\n        If Arg(4) /= '' Then Return template\n        gc009 = \"TEMPLATE entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '14 /OPEN')\n        Signal temp_scr1\n    End\n\n    Parse VAR zcmd cmd parm1\n    cmd3 = Substr(cmd,1,3)\n    If cmd3 = 'DEF' Then Do\n        xx = R0site$(tempv)\n        Interpret \"Parse var xx\" tempv\n        Signal temp_scr1\n    End\n    If tempddty = '*' | tempddty = '?' Then Do\n        zwinttl  = 'DB2 Template Types'\n        \"ADDPOP ROW(7) COLUMN(26)\"\n        \"DISPLAY PANEL(&PANEL14P)\"\n        rc1 = rc\n        \"REMPOP\"\n        If rc1 = 0 Then tempddty = popval\n        Signal temp_scr1\n    End\n    If template = '*' Then Do\n        template =\n        x = R0listm(table,tempsdef,'$TTY','ND')\n        x = R0listm(table,templib,'$TTY',,'EXIST')\n        If Datatype(x) = 'CHAR' & x /= '?' Then Call pop_from_member\n        Signal temp_scr1\n    End\n    If Index(resename,' 'template' ') > 0 Then Do\n        gc009 = '\"'template'\" reserved name. Please choose another.'\n        \"SETMSG MSG(GC009)\"\n        csr1 = 'TEMPLATE'\n        Signal temp_scr1\n    End\n    If tempunit = '?' Then Do\n        tempunit = R0edtl(,12,11)\n        Signal temp_scr1\n    End\n    If Wordpos(tempunit,dasdlist tapelist)=0 Then Do\n        gc009 = tempunit 'unit name not valid. Valid names are:',\n        'DASD >' dasdlist' <, Tape >' Space(tapelist)' <.',\n        'Hit [ENTER] with value as \"?\" to get a selection list.'\n        \"SETMSG MSG(GC009)\"\n        csr1 = 'TEMPUNIT'\n        tempunit = '?'\n        Signal temp_scr1\n    End\n    If Wordpos(tempunit,tapelist)>0 Then usetape='Y';Else usetape='N'\n    If usetape = 'Y' Then,\n        If Sysdsn(\"'\"tempdcb\"'\") /= 'OK' Then Do\n            gc009 = \"'\"tempdcb\"'\" Sysdsn(\"'\"tempdcb\"'\")\n            \"SETMSG MSG(GC009)\"\n            csr1 = 'TEMPDCB'\n            Signal temp_scr1\n        End\n\n    If tempact /= '' Then Do\n        If Sysdsn(\"'\"templib\"'\") /= 'OK' Then Do\n            Address TSO \"ALLOC DA('\"templib\"') TRACKS NEW CATALOG\",\n                \"RECFM(F B) LRECL(80) BLKSIZE(0) SPACE(45,15)\",\n                \"DIR(20) UNIT(SYSALLDA)\"\n            Address TSO \"FREE  DA('\"templib\"')\"\n        End\n    End\n\n/*--------------------------------------------------------------------*/\n/*  Build member contents                                             */\n/*--------------------------------------------------------------------*/\n    i = 0\n    Drop linet.\n    x = xlt('  TEMPLATE' template       )\n    x = xlt('           DSN('tempdsn')' )\n    x = xlt('           DISP ('tempdis1','tempdis2','tempdis3')' )\n    x = xlt('           UNIT' tempunit  )\n    If usetape = 'N' Then,\n        x = xlt('           SPACE ('tempspa1','tempspa2')' tempspty  )\n    Else Do\n        x = xlt('           STACK' tempstck   )\n        x = xlt('           VOLCNT' tempvcnt  )\n        x = xlt('           TRTCH ' temptrtc  )\n        x = xlt('           MODELDCB' tempdcb )\n    End\n    linet.0  = i\n\n/*--------------------------------------------------------------------*/\n/*  ACtion member update options                                      */\n/*--------------------------------------------------------------------*/\n    edit  =\n    membu =\n    Select\n        When tempact = 'C' Then Do\n            dd = 'UL'Time('s')\n            Address TSO \"ALLOC F(\"dd\") DA('\"templib\"(\"template\")')\",\n                \"SHR REU\"\n            Address TSO \"EXECIO * DISKW \"dd\" (STEM linet. FINIS\"\n            Address TSO \"FREE  F(\"dd\")\"\n            x = R0stats(templib\"(\"template\")\")\n            gc009 = 'Member \"'template'\" updated.'\n            \"SETMSG MSG(GC009)\"\n            edit  = '/'\n            membu = '/'\n        End\n/*   No appends\n        When tempact = 'A' Then Do\n            dd = 'UL'Time('s')\n            Drop line.\n            Address TSO \"ALLOC F(\"dd\") DA('\"templib\"(\"template\")')\",\n                \"SHR REU\"\n            If Sysdsn(\"'\"templib\"(\"template\"'\") /= 'OK' Then Do\n                line.1 = '  LISTDEF' template\n                line.0 = 1\n            End\n            Else Address TSO \"EXECIO * DISKR \"dd\" (STEM line. FINIS)\"\n            Address TSO \"EXECIO * DISKW \"dd\" (STEM line. OPEN)\"\n            Address TSO \"EXECIO * DISKW \"dd\" (STEM linet. FINIS\"\n            Address TSO \"FREE  F(\"dd\")\"\n            x = R0stats(templib\"(\"template\")\")\n            gc009 = 'Details appended to existin member \"'template'\".'\n            edit  = '/'\n            membu = '/'\n        End\n*/\n        Otherwise NOP\n    End\n    tempact =\n\n/*--------------------------------------------------------------------*/\n/*  If a new template has been created, update the $TTY member with   */\n/*  the new template type description. The 3rd. non blank parameter   */\n/*  to \"list_members\" indicates return of table without displaying.   */\n/*--------------------------------------------------------------------*/\n    If membu = '/' Then Do\n        x = R0listm(table,templib,'$TTY','NO-Display')\n        member = template\n        \"TBSCAN &TABLE ARGLIST(MEMBER)\"\n        tty = tempddty\n        \"TBMOD &TABLE\"\n        Address TSO \"ALLOC F(ISPFILE) DA('\"templib\"') SHR REU\"\n        \"FTOPEN\"\n        \"FTINCL  R014S\"\n        \"FTCLOSE NAME($TTY)\"\n        Address TSO \"FREE  F(ISPFILE)\"\n        \"TBEND &TABLE\"\n    End\n    If edit = '/' Then Do\n        \"EDIT DATASET('&templib(&TEMPLATE)')\"\n        \"SETMSG MSG(GC009)\"\n        edit =\n        Signal temp_scr1\n    End\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Populate fields from member selection                              */\n/*--------------------------------------------------------------------*/\npop_from_member:\n    Parse VAR x template tempddty\n    If Sysdsn(\"'\"templib\"(\"template\")'\") = 'OK' Then,\n        Address TSO \"ALLOC F(\"dd\") DA('\"templib\"(\"template\")')  SHR REU\"\n    Else,\n        Address TSO \"ALLOC F(\"dd\") DA('\"tempsdef\"(\"template\")')  SHR REU\"\n    Address TSO \"EXECIO * DISKR \"dd\" (STEM line. FINIS\"\n    Address TSO \"FREE  F(\"dd\")\"\n    string =\n    Do j=1 To line.0\n        string = string Strip(line.j)\n    End\n    Parse VAR string 'DSN(' tempdsn ')'\n    Parse VAR string 'DISP (' tempdis1 ',' tempdis2 ',' tempdis3 ')'\n    Parse VAR string 'UNIT' tempunit 'STACK' tempstck .\n    If Wordpos(tempunit,tapelist)>0 Then usetape='Y';Else usetape='N'\n    If usetape = 'N' Then Do\n        Parse VAR string 'SPACE ('tempspa1 ',' tempspa2 ')' tempspty .\n    End\n    Parse VAR string 'VOLCNT' tempvcnt .\n    Parse VAR string 'TRTCH ' temptrtc .\n    Parse VAR string 'MODELDCB ' tempdcb .\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Build template stem variable                                       */\n/*--------------------------------------------------------------------*/\nxlt: i=i+1;linet.i = Arg(1);Return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0UNLOAD": {"ttr": 4611, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1c\\x00\\'\\x01\\x02\"o\\x01\\x02)\\x8f\\x10V\\x01~\\x01\\x06\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.28", "flags": 0, "createdate": "2002-08-14T00:00:00", "modifydate": "2002-10-25T10:56:27", "lines": 382, "newlines": 262, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Process UNLOAD LISTDEF parameter entry                            */\n/*--------------------------------------------------------------------*/\nArg oper1,utillib,templib,tempsdef,debug\n    Address ISPEXEC\n\n    cactn = \"RETURN\"\n/*  cactn = \"CANCEL\"                                                  */\n    \"CONTROL ERRORS\" cactn\n\n    \"VGET (uloadv,panelv,ssid,sqlid) SHARED\"\n    \"VGET (\"uloadv panelv\" nexto) SHARED\"\n    table = 'UL'Time('s')\n\n    Call temp_var1\n    x = Msg('Off')\n\nunload_scr1:\n    genolist='OFF';zcmd=\n    \"DISPLAY PANEL(&PANEL50) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,unload_scr1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('uloadv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal unload_scr1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        \"VPUT (\"uloadv\") SHARED\"\n        gc009 = oper1 \"entry panel abandoned.\"\n        \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '6  /OPEN')\n        Signal unload_scr1\n    End\n    Parse VAR zcmd cmd parm1\n    Select\n        When ulft /= '' Then Do\n            ulft =\n            ulact = 'FT'\n            x = unload_fts1()\n            If x = 0 Then Signal Return0\n        End\n        When ulls /= '' Then Do\n            ulls =\n            ulact = 'LS'\n            x = unload_lss1()\n            If x = 0 Then Signal Return0\n        End\n        When ults /= '' Then Do\n            ults =\n            ulact = 'TS'\n            x = unload_tss1()\n            If x = 0 Then Signal Return0\n        End\n        When ulfc /= '' Then Do\n            ulfc =\n            ulact = 'FC'\n            x = unload_fcs1()\n            If x = 0 Then Signal Return0\n        End\n        Otherwise Signal unload_scr1\n    End\n    Signal unload_scr1\n\nReturn0:\n    \"VPUT (\"uloadv\" nexto genolist ulact\",\n          \"when1 when2 when3 when4 when5 when6 when7 when8\"\n          \") SHARED\"\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Unload Table (Name)                                               */\n/*--------------------------------------------------------------------*/\nunload_fts1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL51) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,unload_fts1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('uloadv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal unload_fts1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '6A /OPEN')\n        Signal unload_fts1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n/*--------------------------------------------------------------------*/\n/*  If table name has not been validated or has changed, do it.       */\n/*--------------------------------------------------------------------*/\n    If u_table_ft /= unldownr || unldtbnm || ssid Then Do\n        x = R0dsnrx('On')\n\n        sqlstmt = \"SELECT DBNAME,TSNAME\",\n                 \"FROM SYSIBM.SYSTABLES\",\n                 \"WHERE CREATOR = '\"unldownr\"'\",\n                 \"AND   NAME   = '\"unldtbnm\"'\"\n        sqlretf = ':database,:tspace'\n        \"VPUT (sqlstmt,sqlretf) SHARED\"\n        xx = R0dsnrx('Ex',1,debug)\n        x  = R0dsnrx('Off')\n        If xx /= 0 Then Do\n            gc009 = '\"'unldownr'.'unldtbnm'\" table not found on \"',\n                    ssid'\", RC = 'xx'.'\n             \"SETMSG MSG(GC009)\"\n            csr1 = 'unldownr'\n            Signal unload_fts1\n        End\n        Address ISPEXEC \"VGET (sqlretv) SHARED\"\n        flds = Translate(sqlretf,'  ',':,')\n        Do While sqlretv /= ''\n            Interpret 'Parse VAR sqlretv' flds 'sqlretv'\n        End\n        adr2 = Address()\n        Address TSO\n        \"NEWSTACK\"\n        Queue '-DISPLAY DB('database') SPACE('tspace') LIMIT(*)'\n        Queue 'END'\n        dbsum = R0dbsum()\n        \"DELSTACK\"\n        Address(adr2)\n        If dbsum /= 0 Then Do\n            gc009 = '\"'unldownr'.'unldtbnm'\" table not available',\n                    'on \"'ssid'\".'\n             \"SETMSG MSG(GC009)\"\n            csr1 = 'unldownr'\n            Signal unload_fts1\n        End\n\n        u_table_ft = unldownr || unldtbnm || ssid\n    End\n\n    ulwhen = unldwhn1 || unldwhn2 || unldwhn3\n    x = unload_ver_common()\n    If ret_scr Then Signal unload_fts1\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Unload LiStdef                                                    */\n/*--------------------------------------------------------------------*/\nunload_lss1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL52) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,unload_lss1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('uloadv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal unload_lss1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '6B /OPEN')\n        Signal unload_lss1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n    If unldldef = '*' Then Do\n        x = R0listm(table,utillib)\n        If Datatype(x) = 'CHAR' Then unldldef = x\n        ret_scr = 1\n    End\n    Else If unldldef = '/' Then Do\n             x = r0ldef(utillib,'unldldef')\n             If Datatype(x) = 'CHAR' Then unldldef = x\n             ret_scr = 1\n         End\n    If Sysdsn(\"'\"utillib\"(\"unldldef\")'\") /= 'OK' Then Do\n        gc009 = Sysdsn(\"'\"utillib\"(\"unldldef\")'\")\n        csr1 = 'unldldef'\n        \"SETMSG MSG(GC009)\"\n        Signal unload_lss1\n    End\n    ulwhen =\n    x = unload_ver_common()\n    If ret_scr Then Signal unload_lss1\n    genolist = 'ON'\n    nexto    = 'JCL(JC,J10,J20,J50)'\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Unload Table Space                                                */\n/*--------------------------------------------------------------------*/\nunload_tss1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL53) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,unload_tss1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('uloadv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal unload_tss1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '6C /OPEN')\n        Signal unload_tss1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n/*--------------------------------------------------------------------*/\n/*  If tablespace has not been validated or has changed, do it.       */\n/*--------------------------------------------------------------------*/\n    If u_table_ts /= unlddbnm || unldtspc || unldpart || 'TS' Then,\n        If R0valtsp('TS',unlddbnm,unldtspc,unldpart) Then Do\n            csr1 = 'unlddbnm'\n            Signal unload_tss1\n        End\n    u_table_ts = unlddbnm || unldtspc || unldpart || 'TS'\n\n    ulwhen =\n    x = unload_ver_common()\n    If ret_scr Then Signal unload_tss1\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Unload From Copy                                                  */\n/*--------------------------------------------------------------------*/\nunload_fcs1:\n    zcmd =\n    \"DISPLAY PANEL(&PANEL54) CURSOR(&csr1) CSRPOS(&csrp1)\"\n    If zcmd='DEBUG' Then Interpret r0debug(debug,unload_fcs1)\n    If Substr(zcmd,1,3)='DEF' Then Do\n        x=R0site$('uloadv');\"VGET (defvars) SHARED\";\"VGET (\"defvars\") SHARED\"\n        Signal unload_fcs1;End\n\n    csr1=;csrp1=\n    If rc /= 0 Then Do\n        gc009 = oper1 \"FROM TABLE name entry panel abandoned.\"\n         \"SETMSG MSG(GC009)\"\n        Return 9\n    End\n    If zcmd='?' Then Do\n        x=helpdrvr(helptab '6D /OPEN')\n        Signal unload_fcs1\n    End\n\n    ret_scr = 0\n    Parse VAR zcmd cmd parm1\n\n    ulwhen =\n    x = unload_ver_common()\n    If ret_scr Then Signal unload_fcs1\n\n/*--------------------------------------------------------------------*/\n/*  If tablespace has not been validated or has changed, do it.       */\n/*--------------------------------------------------------------------*/\n    If u_table_fc /= unlddbnm || unldtspc Then Do\n        If R0valcop(unlddbnm,unldtspc) Then Do\n            csr1 = 'unlddbnm'\n            Signal unload_fcs1\n        End\n        \"VGET (dsnx) SHARED\"\n    u_table_fc = unlddbnm || unldtspc\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/*  Comon unload field verifications:                                 */\n/*--------------------------------------------------------------------*/\nunload_ver_common:\n/*--------------------------------------------------------------------*/\n/*  Break up supplied WHEN parameters in 72 character lots without    */\n/*  splitting words.                                                  */\n/*--------------------------------------------------------------------*/\n    when1=;when2=;when3=;when4=;when5=;when6=;when7=;when8=\n    If ulwhen /= '' Then Do\n        when1 = 'WHEN ('\n        i=2\n        Do While ulwhen /= ''\n            Interpret 'when'i '= \"      \"Wordat(ulwhen,64,\"L\")'\n            ulwhen = Wordat(ulwhen,60,\"T\")\n            i=i+1\n        End\n        Interpret \"when\"i \"= '     )'\"\n    End\n\n    If unldpddn = '*' Then Do\n        gc009 = 'Template processing for Unload PUNCHDDN.'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,tempsdef,'$TTY','ND')\n        x = R0listm(table,templib,'$TTY',,'EXIST')\n        If Datatype(x) = 'CHAR' Then Parse VAR x unldpddn .\n        ret_scr = 1\n    End\n    Else If unldpddn = '/' Then Do\n             xmsg = 'unload PUNCHDDN'\n             x = R0templ(templib,tempsdef,xmsg,'unldpddn')\n             If Datatype(x) = 'CHAR' Then unldpddn = x\n             ret_scr = 1\n         End\n    If Sysdsn(\"'\"templib\"(\"unldpddn\")'\") /= 'OK' Then,\n        If Sysdsn(\"'\"tempsdef\"(\"unldpddn\")'\") /= 'OK' Then Do\n            gc009 = 'Template not found.'\n            \"SETMSG MSG(GC009)\"\n            csr1  = 'unldpddn'\n            ret_scr=1\n            Return 4\n        End\n    If unlduddn = '*' Then Do\n        gc009 = 'Template selection for Unload UNLDDN.'\n        \"SETMSG MSG(GC009)\"\n        x = R0listm(table,tempsdef,'$TTY','ND')\n        x = R0listm(table,templib,'$TTY',,'EXIST')\n        If Datatype(x) = 'CHAR' Then Parse VAR x unlduddn .\n        ret_scr = 1\n    End\n    Else If unlduddn = '/' Then Do\n             xmsg = 'unload UNLDDN'\n             x = R0templ(templib,tempsdef,xmsg,'unlduddn')\n             If Datatype(x) = 'CHAR' Then unlduddn = x\n             ret_scr = 1\n         End\n    If Sysdsn(\"'\"templib\"(\"unlduddn\")'\") /= 'OK' Then,\n        If Sysdsn(\"'\"tempsdef\"(\"unlduddn\")'\") /= 'OK' Then Do\n            gc009 = 'Template not found.'\n            \"SETMSG MSG(GC009)\"\n            csr1  = 'unlduddn'\n            ret_scr=1\n            Return 4\n        End\n\n    Return 0\n\n/*--------------------------------------------------------------------*/\n/* Temp vars for testing                                              */\n/*    JOBCARD    - Obvious.                                           */\n/*--------------------------------------------------------------------*/\ntemp_var1:\nulwhen = 'A2345678',\n         'B2345678',\n         'C2345678',\n         'D2345678',\n         'E2345678',\n         'F2345678',\n         'G2345678',\n         'H2345678',\n         'I2345678',\n         'J2345678',\n         'K2345678',\n         'L2345678',\n         'M2345678',\n         'N2345678',\n         'O2345678',\n         ''\nParse VAR ulwhen 1 unldwhn1 +67 .,\n                68 unldwhn2 +67 .,\n               135 unldwhn3 +67 .\nunlddbnm = DSN8D71A\nunldpart = 7\nunldtspc = DSN8S71Z /*  0  */\nunldtspc = DSN8S71P /*  1  */\nunldtspc = DSN8S71E /*  4  */\nunldownr = PUBLIC\nunldtbnm = TRUTH\n\nReturn 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0VALCOP": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x05\\x01\\x02\"o\\x01\\x02%_\\x13B\\x00=\\x00=\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2002-08-14T00:00:00", "modifydate": "2002-09-12T13:42:05", "lines": 61, "newlines": 61, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Validate and if valid list Table/indexspace copies.               */\n/*--------------------------------------------------------------------*/\nArg dbname,tspace,p_no,debug\n    If debug /= '' Then Trace r\n    panel93 = 'R093P'                       /* Dataset table display  */\n    Address ISPEXEC\n    x = R0dsnrx('On')\n\n    If p_no = '' Then p_no = 0\n    sqlstmt = \"SELECT DSNAME,ICDATE,ICTIME\",\n             \"FROM SYSIBM.SYSCOPY\",\n             \"WHERE DBNAME = '\"dbname\"'\",\n             \"AND   TSNAME = '\"tspace\"'\",\n             \"AND   DSNUM  = \"p_no,\n             \"AND   ICTYPE = '\"F\"'\",\n             \"AND   ICBACKUP = ' '\",\n             \"ORDER BY ICDATE DESC,ICTIME DESC\"\n    sqlretf = ':dsnx,:datex,:timex'\n    \"VPUT (sqlstmt,sqlretf) SHARED\"\n    xx = R0dsnrx('Ex','*')\n    x  = R0dsnrx('Off')\n    \"VGET (sqlretv) SHARED\"\n    If sqlretv = '' Then Do\n        gc009 = 'No COPY found for tablespace',\n                '\"'dbname'.'tspace'\" on \"'ssid'\", RC = 'xx'.'\n        \"SETMSG MSG(GC009)\"\n        Return 1\n    End\n\n    table = 'VC'Time('s')\n    \"TBCREATE &TABLE KEYS(DSNX) NAMES(DATEX TIMEX) REPLACE NOWRITE\"\n    \"TBSORT   &TABLE FIELDS(DATEX,C,D,TIMEX,C,D)\"\n\n    flds = Translate(sqlretf,'  ',':,')\n    Do While sqlretv /= ''\n        Interpret 'Parse VAR sqlretv' flds 'sqlretv'\n        Parse VAR datex yy +2 mm +2 dd\n        datex = yy'/'mm'/'dd\n        Parse VAR timex hh +2 mm +2 ss\n        timex = hh':'mm':'ss\n        \"TBMOD  &TABLE\"\n    End\n    \"TBTOP &TABLE\"\n\nval_sel_copy_dis1:\n    sel =\n    \"TBDISPL &TABLE PANEL(&PANEL93)\"\n    If rc > 4 Then Do\n        \"TBEND &TABLE\"\n        gc009 = 'COPY selection abandoned.'\n        \"SETMSG MSG(GC009)\"\n        Return 1\n    End\n    If sel = '' Then Signal val_sel_copy_dis1\n    \"TBEND &TABLE\"\n    \"VPUT (dsnx) SHARED\"\n\n    Return 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0VALTSP": {"ttr": 4867, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1b\\x00Y\\x01\\x02\"o\\x01\\x02(?\\x16\\x06\\x00U\\x00\"\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.27", "flags": 0, "createdate": "2002-08-14T00:00:00", "modifydate": "2002-10-10T16:06:59", "lines": 85, "newlines": 34, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Validate Table/indexspace.                                        */\n/*--------------------------------------------------------------------*/\nArg type,dbname,tspace,partno,debug\n    Address ISPEXEC\n    x = R0dsnrx('On')\n    If partno /= '' Then sqlx = \"AND   PARTITION   = \"partno\n    Else                 sqlx =\n    Select\n        When type = 'TS' Then Do            /* TableSpace             */\n            sqlstmt = \"SELECT COUNT(*)\",\n                      \"FROM SYSIBM.SYSTABLEPART\",\n                      \"WHERE DBNAME = '\"dbname\"'\",\n                      \"AND TSNAME = '\"tspace\"'\" sqlx\n            sqlretf = ':exist'\n            mtype   = 'Tablespace'\n        End\n        When type = 'RI' Then Do            /* Recover index          */\n            sqlstmt = \"SELECT COUNT(*)\",\n                      \"FROM SYSIBM.SYSINDEXES\",\n                      \"WHERE DBNAME = '\"dbname\"'\",\n                      \"AND INDEXSPACE = '\"tspace\"'\" sqlx\n            sqlretf = ':exist'\n            mtype   = 'Indexspace'\n        End\n        When type = 'RB' Then Do            /* Rebuild/Reorg index    */\n            sqlstmt = \"SELECT COUNT(*)\",\n                      \"FROM SYSIBM.SYSINDEXPART\",\n                      \"WHERE IXCREATOR = '\"dbname\"'\",\n                      \"AND IXNAME = '\"tspace\"'\" sqlx\n            sqlretf = ':exist'\n            mtype   = 'Indexspace'\n        End\n        When type = 'OW' Then Do            /* Owner                  */\n            sqlstmt = \"SELECT DBNAME,INDEXSPACE\",\n                      \"FROM SYSIBM.SYSINDEXES\",\n                      \"WHERE CREATOR = '\"dbname\"'\",\n                      \"AND NAME = '\"tspace\"'\" sqlx\n            sqlretf = ':ixdbname,:ixname'\n            mtype   = 'Index'\n            exist   = 1                     /* Stop err-msg for Index */\n        End\n        Otherwise Do\n            gc009 = 'Invalid \"'type'\" passed to R0VALTSP. Refer',\n                    'problem to dialogue developer...'\n            \"SETMSG MSG(GC009)\"\n            Return 1\n        End\n    End\nIf debug /= '' Then Do;Say sqlstmt;Trace r;End\n    \"VPUT (sqlstmt,sqlretf) SHARED\"\n    xx = R0dsnrx('Ex',1,debug)\n    x  = R0dsnrx('Off')\n    If tspace = '' Then tspace = dbname\n    Else                tspace = dbname'.'tspace\n    If partno = '' Then partno =\n    Else                partno = ' PART' partno\n    \"VPUT (tspace,partno) SHARED\"\n    If xx = 100 Then Do\n        gc009 = mtype '\"'tspace || partno'\" not found on \"',\n                ssid'\", RC =' xx'.'\n        \"SETMSG MSG(GC009)\"\n        Return 1\n    End\n    If xx /= 0 Then Do\n        gc009 = mtype '\"'tspace || partno'\" completed with RC='xx'.'\n        \"SETMSG MSG(GC009)\"\n        Return 1\n    End\n    \"VGET (sqlretv) SHARED\"\n    flds = Translate(sqlretf,'  ',':,')\n    Do While sqlretv /= ''\n        Interpret 'Parse VAR sqlretv' flds 'sqlretv'\n    End\n    If exist = 0 Then Do\n        \"VGET (ssid) SHARED\"\n        gc009 = mtype '\"'tspace || partno'\" not found on \"',\n                ssid'\" (count=0).'\n        \"SETMSG MSG(GC009)\"\n        Return 1\n    End\n\n    Return 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0VRLDEF": {"ttr": 4869, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x01\\x021o\\x01\\x021o\\x10\\x16\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-11-12T00:00:00", "modifydate": "2002-11-12T10:16:39", "lines": 31, "newlines": 31, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/*--------------------------------------------------------------------*/\n/*  Validate all entries within a listedf are all a particular type.  */\n/*                                                                    */\n/*  Parameters:                                                       */\n/*    util   - listdef dataset(member)                                */\n/*    type   - type to match                                          */\n/*               IX - All INDEXSPACE                                  */\n/*               TS - All TABLESPACE                                  */\n/*               ?? - Any other value, all must match the 1st. entry. */\n/*--------------------------------------------------------------------*/\nR0vrldef:\nArg util,type,debug\n    dd = 'VL'Time('s')\n    Address TSO \"ALLOC F(\"dd\") DA('\"util\"') SHR REU\"\n    Address TSO \"EXECIO * DISKR \"dd\" (STEM line. FINIS\"\n    Select\n        When type = 'IX' Then type = 'INDEXSPACE'\n        When type = 'TS' Then type = 'TABLESPACE'\n        Otherwise             type = Word(line.2,2)\n    End\n    r_c=0\n    Do i=2 To line.0\n        If Substr(line.i,1,1) = '*' Then Iterate\n        If Word(line.i,2) /= type Then Do;r_c=type;Leave;End\n        Parse VAR line.i member tty1 .\n    End\n    Address TSO \"FREE  F(\"dd\")\"\n\n    Return r_c\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0WHOME": {"ttr": 4871, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x12\\x01\\x02\"\\x0f\\x01\\x02#\\x1f\\x173\\x00H\\x00H\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-08-08T00:00:00", "modifydate": "2002-08-19T17:33:12", "lines": 72, "newlines": 72, "modlines": 0, "user": "C838704"}, "text": "/******************************** REXX ********************************/\n/* Note containment.                                                  */\n/*--------------------------------------------------------------------*/\n/*\n    Call On  Error Name errproc_1\n    Say Substr(whoami('C'),1,30)               Christian name\n    Say Substr(whoami('S'),1,30)               Surname\n    Say Substr(whoami(),1,30)                  Both names\n    Call Off Error\n\nerrproc_1:\n    Call Off Error\n    gc009 = \"Hello....\"\n    Return Sigl\n*/\n\nWhoami:\n    Parse Upper ARG type .\n    Parse Source . op_mode .\n    name = getname()\n    If Index(name,',') > 0 Then sep = ','\n    Else                        sep = '.'\n    Interpret \"Parse var name sname '\"sep\"' cname .\"\n    Select\n        When type = ''  Then name = cname sname\n        When type = 'C' Then name = cname\n        Otherwise            name = sname\n    End\n    If op_mode /= 'COMMAND' Then Return U2Lower(name,2,'*')\n    Else Say U2Lower(name,2,'*');Exit\n\n/*--------------------------------------------------------------------*/\n/* Get name from ACEE control block (imported from REXX '$getname' for*/\n/* self containment).                                                 */\n/*--------------------------------------------------------------------*/\ngetname:\n    ascb = Storage('224',4)\n    asxb = Storage(d2x(c2d(ascb)+x2d('6c')),4)\n    acee = Storage(d2x(c2d(asxb)+x2d('c8')),4)\n    nam@ = Storage(d2x(c2d(acee)+x2d('64')),4)\n    name = Storage(c2x(nam@),30)\n    len  = c2d(Substr(name,1,1))\n    name = Substr(name,2,len-1)\n    Return name\n\n/*--------------------------------------------------------------------*/\n/* Convert upper to lower (imported from REXX routine 'lower' for     */\n/* self containment).                                                 */\n/*--------------------------------------------------------------------*/\nU2Lower:\n    ARG text,pos,rep\n    lc = 'abcdefghijklmnopqrstuvwxyz'\n    uc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    If Datatype(rep) /= 'NUM' | Index(rep,'.') > 0 Then rep = 99999\n    If Datatype(pos) /= 'NUM' | Index(pos,'.') > 0 Then pos = 2\n    rname = ''\n    Do i=rep by -1 To 1\n        Parse VAR text name text\n        If pos > 1 Then Do\n            pref = Substr(name,1,pos-1)\n            suff = Substr(name,pos)\n        End\n        Else Do\n            pref = ''\n            suff = name\n        End\n        suff = Translate(suff,lc,uc)\n        rname = rname pref || suff\n        If text = '' Then Leave\n    End\n    Return Strip(rname text)\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R0WORDAT": {"ttr": 4873, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x03\\x00\\x04\\x01\\x02'\\x0f\\x01\\x02'?\\x17\\x17\\x00\\x13\\x00\\x13\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@\"", "ispf": {"version": "01.03", "flags": 0, "createdate": "2002-09-27T00:00:00", "modifydate": "2002-09-30T17:17:04", "lines": 19, "newlines": 19, "modlines": 0, "user": "C838704"}, "text": "/*----------------------------- REXX ---------------------------------*/\n/* Returns the words in a strg that falls on a particular posistion.  */\n/* If the character at the position is blank, the next word is taken. */\n/* Can pass parameter of 'L' or 'T' to split the strg on the word     */\n/* and retyurn the lead or tail part of the strg.                     */\n/*--------------------------------------------------------------------*/\nWordat: Parse Arg i_strg,s_col,r_split\n    Do #i_i=s_col By -1 Until #i_i=1\n        If Substr(i_strg,#i_i,1) = ' ' Then Leave\n    End\n    r_split=Translate(r_split)\n    Select\n        When r_split = 'L' Then Return Strip(Substr(i_strg,1,#i_i-1))\n        When r_split = 'T' Then Return Strip(Substr(i_strg,#i_i))\n        Otherwise Do\n            Parse Value Substr(i_strg,#i_i) With i_strg .\n            Return i_strg\n        End\n    End\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R010P": {"ttr": 4875, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00&\\x01\\x021o\\x01\\x021o\\x08I\\x005\\x005\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-11-12T00:00:00", "modifydate": "2002-11-12T08:49:26", "lines": 53, "newlines": 53, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high) hilite(uscore)\n #   type(TEXT) color(yellow) intens(high)\n $   type(text) color(yellow) intens(high) hilite(reverse)\n @   type(text) color(yellow) intens(high)\n ?   type(OUTPUT) intens(NON)\n !   type(text) color(pink)   intens(high) hilite(reverse)\n ` AREA(DYNAMIC)\n [ TYPE(DATAIN)  COLOR(RED)   INTENS(HIGH) HILITE(USCORE) CAPS(ON)\n ] TYPE(DATAOUT) COLOR(GREEN) intens(low)  CAPS(OFF) SKIP(ON)\n ~ TYPE(DATAOUT) COLOR(BLUE)  intens(low)  CAPS(OFF) SKIP(ON)\n { TYPE(DATAOUT) COLOR(PINK)  intens(low)  CAPS(OFF) SKIP(ON)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Utility Selection >\\-\\&XXXX\n@&SID@===>_ZCMD                                                                +\n@\n+SSID :_SSID+ Enter SSID or select with a@/+from list below.\n`SSLIST                                                                        `\n+\n+Enter@/+against all utilities to be processed:?Z+\n_Z+Performance Queries\n_Z+Copy\n_Z+Modify\n_Z+Runstats\n_Z+Quiesce\n_Z+Unload\n_Z+Load\n_Z+Reorg\n_Z+Check Data\n_Z+Check Index\n_Z+Rebuild Index\n_Z+Recover\n_Z+Migrate\n\n_Z+Listdef\n_Z+Template\n_Z+Jobcard\n)INIT\n .ZVARS = '( +\n            POPUPMSG +\n            PERFQ +\n            COPY MODIFY RUNSTAT QUIESCE +\n            UNLOAD LOAD +\n            REORG CHKDATA CHKINDX REBLDIX RECOVER +\n            MIGRATE +\n            LISTD TEMPL +\n            JOBCARD +\n           )'\n &SID  = &ZSYSID\n &XXXX = &R0VER\n)PROC\n)END\n?Z+Settings     (Not yet developed)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R012PY": {"ttr": 4877, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x08\\x00D\\x01\\x02\\x18o\\x01\\x02)\\x1f\\tV\\x00'\\x00s\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@\"", "ispf": {"version": "01.08", "flags": 0, "createdate": "2002-07-05T00:00:00", "modifydate": "2002-10-18T09:56:44", "lines": 39, "newlines": 115, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _ type(INPUT)   color(red)    intens(high) hilite(uscore)\n ~ type(text)    color(blue)   intens(low)  skip(on) HILITE(USCORE)\n * type(output)  color(red)    intens(high)\n \u00a2 type(output)  color(green)  intens(high)\n @ type(text)    color(yellow) intens(high)\n ?   type(OUTPUT) intens(NON)\n ` AREA(DYNAMIC) SCROLL(ON)    EXTEND(ON)\n [ TYPE(DATAIN)  COLOR(RED)    INTENS(HIGH) HILITE(USCORE) CAPS(ON)\n ] TYPE(DATAOUT) COLOR(BLUE)   intens(low)  CAPS(OFF) SKIP(ON)\n ! AREA(DYNAMIC)\n } TYPE(CHAR)    COLOR(YELLOW)\n { TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 LISTDEF Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Enter details below for LISTDEF include command for\u00a2SSID+              D\n+\n+List name :_LISTNAME+options:_Z+!DYNA1,SHAD1             !\n+Parameters:\n?Z+         ~DB2 Object         +~TS/IX+~Inc/Exc+ ~RI+~Part+\n`DA1                                                                           `\n)INIT\n &GC00T = 'WARNING'\n .ZVARS = '( +\n            LISTACT +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n &DYNA1 = 'C(reate) or A(ppend)'\n &SHAD1 = '}{{{{{{{{{{{}{{{{{{{'\n)PROC\n&XXX = TRUNC(&ZCMD,3)\nIF (&XXX \u00ac= DEB,DEF,'?')\n   IF (&LISTNAME \u00ac= '*')\n      VER(&LISTNAME,NB,NAME)\n   VER(&LISTACT,LIST,C,A)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R014P": {"ttr": 4879, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01%\\x00A\\x01\\x02\\x19\\x0f\\x01\\x02)\\x1f\\x12\\x08\\x00b\\x00E\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.37", "flags": 0, "createdate": "2002-07-09T00:00:00", "modifydate": "2002-10-18T12:08:41", "lines": 98, "newlines": 69, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high)   hilite(uscore)\n +   type(text)  color(blue)  intens(low)    skip(on)\n *   type(output) color(red) intens(high)\n $   type(output) color(green) intens(high)\n @   type(text) color(yellow) intens(high)\n ~   type(text) color(BLUE) intens(low) hilite(uscore)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n h TYPE(CHAR) COLOR(YELLOW)\n n TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Template Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter details below for TEMPLATE command for$SSID+:\n+\n+Template name:_TEMPLATE+Type:_TEMPDDTY   + Action:_Z+!DYNA1,SHAD1             !\n+Parameters   :\n+  DSN        :_TEMPDSN                                       +\n+  Disp       :~Status+\n+              _Z  +           !DYNA2,SHAD2                   !\n+             :~Normal~Abend +\n+              _Z     _Z     + !DYNA3,SHAD3                   !\n+  Unit       :_TEMPUNIT  +\n+  TRTCH      :_Z     +        !DYNA4,SHAD4                   !\n+  Stack      :_Z  +           !DYNA5,SHAD5                   !\n+  Vol count  :_Z  +           Numeric\n+  DCB        :_TEMPDCB                              +\n+  Space      :~Type+\n+              _Z  +           !DYNA6,SHAD6                   !\n+             :~Prim +~Second+\n+              _Z    +_Z    +  Numeric\n?Z+\n)INIT\n .ZVARS = '(+\n            TEMPACT +\n            TEMPDIS1 TEMPDIS2 TEMPDIS3 +\n            TEMPTRTC TEMPSTCK TEMPVCNT +\n            TEMPSPTY TEMPSPA1 TEMPSPA2 +\n            POPUPMSG +\n           )'\n &DYNA1 = 'C(reate)'\n &SHAD1 = 'hnnnnnnn'\n &DYNA2 = 'New, Mod, Shr or Old'\n &SHAD2 = 'hnnnnhnnnnhnnnnnnhbb'\n &DYNA3 = 'Catlg, Delete, Keep or Uncatlg'\n &SHAD3 = 'hnnnnnnhnnnnnnnhnnnnnnnhnnnnnn'\n &DYNA4 = 'None, Comp or Nocomp'\n &SHAD4 = 'hnnnnnhnnnnnnnhnnnnn'\n &DYNA5 = 'Yes or No'\n &SHAD5 = 'hnnnnnnhn'\n &DYNA6 = 'Cyl, Trk or Mb'\n &SHAD6 = 'hnnnnhnnnnnnhn'\n &SID   = &ZSYSID\n\n &GC001 = 'Invalid value. Enter ''?'' for a list of valid values.'\n &GC002 = 'Valid values are \"&DYNA2\".'\n &GC003 = 'Valid values are \"&DUNA3\".'\n &GC004 = 'Valid values are \"&DYNA4\" with unit of ''CART''.'\n &GC005 = 'Valid values are \"&DYNA5\".'\n &GC006 = 'Model DCB dataset required for unit \"CART\".'\n &GC007 = 'Valid values are \"&DYNA6\".'\n)REINIT\n REFRESH(TEMPDIS1,TEMPDIS2,TEMPDIS3,TEMPSPTY,TEMPSTCK)\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n    IF (&TEMPDDTY \u00ac= '*','?')\n       IF (&TEMPLATE \u00ac= '*')\n        IF (&TEMPUNIT \u00ac= '?')\n          VER(&TEMPLATE,NB,NAME)\n          VER(&TEMPDDTY,NB,LIST,COPYDDN,DISCARDDN,ERRDDN,FILTERDDN,INDDN,\n               MAPDDN,PUNCHDDN,RECOVERYDDN,UNLDDN,WORKDDN,MSG=GC001)\n          VER(&TEMPACT,NB,LIST,C,A)\n          VER(&TEMPDSN ,NB)\n          &TEMPDIS1 = TRANS(TRUNC(&TEMPDIS1,1) N,NEW M,MOD S,SHR O,OLD *,*)\n          VER(&TEMPDIS1,NB,LIST,NEW,MOD,SHR,OLD,MSG=GC002)\n          &TEMPDIS2 = TRANS(TRUNC(&TEMPDIS2,1) C,CATLG D,DELETE K,KEEP\n                            U,UNCATLG *,*)\n          VER(&TEMPDIS2,NB,LIST,CATLG,DELETE,KEEP,UNCATLG,MSG=GC003)\n          &TEMPDIS3 = TRANS(TRUNC(&TEMPDIS3,1) C,CATLG D,DELETE K,KEEP\n                            U,UNCATLG *,*)\n          VER(&TEMPDIS3,NB,LIST,CATLG,DELETE,KEEP,UNCATLG,MSG=GC003)\n          VER(&TEMPUNIT,NB)\n          If (&TEMPUNIT = 'CART')\n            VER(&TEMPTRTC,NB,LIST,NONE,COMP,NOCOMP,MSG=GC004)\n          &TEMPSTCK = TRANS(TRUNC(&TEMPSTCK,1) Y,YES N,NO *,*)\n          VER(&TEMPSTCK,NB,LIST,YES,NO,MSG=GC005)\n          VER(&TEMPVCNT,NUM)\n          If (&TEMPUNIT = 'CART')\n            VER(&TEMPDCB,NB,DSNAME,MSG=GC006)\n          ELSE\n            &TEMPSPTY = TRANS(TRUNC(&TEMPSPTY,1) C,CYL T,TRK M,MB *,*)\n            VER(&TEMPSPTY,NB,LIST,CYL,TRK,MB,MSG=GC007)\n            VER(&TEMPSPA1,NB,NUM)\n            VER(&TEMPSPA2,NB,NUM)\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R014S": {"ttr": 4881, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00A\\x01\\x02 ?\\x01\\x02 ?\\x17\\x18\\x00\\x04\\x00\\x04\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-07-22T00:00:00", "modifydate": "2002-07-22T17:18:41", "lines": 4, "newlines": 4, "modlines": 0, "user": "C838704"}, "text": ")TB 10\n)DOT &TABLE\n&MEMBER!&TTY\n)ENDDOT &TABLE1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "R0141P": {"ttr": 4883, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x08\\x00$\\x01\\x02 ?\\x01\\x02'?\\x112\\x00(\\x00\\x18\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@\"", "ispf": {"version": "01.08", "flags": 0, "createdate": "2002-07-22T00:00:00", "modifydate": "2002-09-30T11:32:24", "lines": 40, "newlines": 24, "modlines": 0, "user": "C838704"}, "text": ")ATTR DEFAULT(%+_)\n    _ TYPE(INPUT) INTENS(HIGH) COLOR(RED)    HILITE(USCORE)\n    @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n    $ TYPE(TEXT)  INTENS(HIGH) COLOR(GREEN)\n    ` TYPE(OUTPUT) INTENS(NON)\n)BODY EXPAND(\\\\) WINDOW(25,13) LMSG(MYLMSG) SMSG(MYLMSG)\n_Z % 1+CopyDDN`z+\n%    2+DiscarDDN\n%    3+ErrDDN\n%    4+FilterDDN\n%    5+InDDN\n%    6+MapDDN\n%    7+PunchDDN\n%    8+RecoveryDDN\n%    9+UnlDDN\n%   10+WorkDDN\n+Select applicable DDN\n+from list above or@END\n+PF key to abandon.\n)INIT\n  VGET ZSYSID ASIS\n  &SID = &ZSYSID\n  .ZVARS = '(POPVAL,MYLMSG)'\n  &GC001 = 'Valid values are 1 through 10.'\n)PROC\n  VER(&POPVAL,NB,RANGE,1,10)\n  &POPVAL = TRANS(&POPVAL\n                   1,COPYDDN\n                   2,DISCARDDN\n                   3,ERRDDN\n                   4,FILTERDDN\n                   5,INDDN\n                   6,MAPDDN\n                   7,PUNCHDDN\n                   8,RECOVERYDDN\n                   9,UNLDDN\n                  10,WORKDDN\n                   *,*\n                   MSG=GC001)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R0142P": {"ttr": 4885, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x14\\x01\\x02$o\\x01\\x02)\\x1f\\x11%\\x00\\x18\\x00\\x18\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-09-03T00:00:00", "modifydate": "2002-10-18T11:25:14", "lines": 24, "newlines": 24, "modlines": 0, "user": "C838704"}, "text": ")ATTR DEFAULT(%+_)\n    _ TYPE(INPUT) INTENS(HIGH) COLOR(RED)    HILITE(USCORE)\n    @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n    $ TYPE(TEXT)  INTENS(HIGH) COLOR(GREEN)\n    ` TYPE(OUTPUT) INTENS(NON)\n)BODY EXPAND(\\\\) WINDOW(25,07) LMSG(MYLMSG) SMSG(MYLMSG)\n\n_Z+% 1+DASD`z+\n%    2+TAPE\n+\n+Select device type\n+from list above or@END\n+PF key to abandon.\n)INIT\n  VGET ZSYSID ASIS\n  &SID = &ZSYSID\n  .ZVARS = '(POPVAL,MYLMSG)'\n  &GC001 = 'Valid values are 1 through 2.'\n)PROC\n  VER(&POPVAL,NB,RANGE,1,2)\n  &EDT = TRANS(&POPVAL\n               1,DASD\n               2,TAPE)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R0143P": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\"\\x01\\x020_\\x01\\x020_\\x11\\x11\\x00#\\x00#\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-11-01T00:00:00", "modifydate": "2002-11-01T11:11:22", "lines": 35, "newlines": 35, "modlines": 0, "user": "C838704"}, "text": ")ATTR DEFAULT(%+_)\n    _ TYPE(INPUT) INTENS(HIGH) COLOR(RED)    HILITE(USCORE)\n    @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n    $ TYPE(OUTPUT) INTENS(HIGH) COLOR(WHITE) JUST(RIGHT)\n    ? TYPE(OUTPUT) INTENS(LOW) COLOR(BLUE)\n    ` TYPE(OUTPUT) INTENS(NON)\n)BODY EXPAND(\\\\) WINDOW(25,20) LMSG(MYLMSG) SMSG(MYLMSG)\n\n_Z $T1 ?EDTT1   `z+\n%  $T2 ?EDTT2\n%  $T3 ?EDTT3\n%  $T4 ?EDTT4\n%  $T5 ?EDTT5\n%  $T6 ?EDTT6\n%  $T7 ?EDTT7\n%  $T8 ?EDTT8\n%  $T9 ?EDTT9\n%  $T10?EDTT10\n%  $T11?EDTT11\n%  $T12?EDTT12\n%  $T13?EDTT13\n%  $T14?EDTT14\n%  $T15?EDTT15\n%  $T16?EDTT16\n+Select applicable DDN\n+from list above or@END\n+PF key to abandon.\n)INIT\n  VGET ZSYSID ASIS\n  &SID = &ZSYSID\n  .ZVARS = '(TT,MYLMSG)'\n  &GC001 = 'Valid values are 1 through &EDTOCR..'\n)PROC\n  VER(&TT,NB,RANGE,1,&EDTOCR,MSG=GC001)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R0144P": {"ttr": 5123, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00)\\x01\\x020_\\x01\\x020_\\x11\\x11\\x00\"\\x00#\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-11-01T00:00:00", "modifydate": "2002-11-01T11:11:29", "lines": 34, "newlines": 35, "modlines": 0, "user": "C838704"}, "text": ")ATTR DEFAULT(%+_)\n    _ TYPE(INPUT) INTENS(HIGH) COLOR(RED)    HILITE(USCORE)\n    @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n    $ TYPE(OUTPUT) INTENS(HIGH) COLOR(WHITE) JUST(RIGHT)\n    ? TYPE(OUTPUT) INTENS(LOW) COLOR(BLUE)\n    ` TYPE(OUTPUT) INTENS(NON)\n)BODY EXPAND(\\\\) WINDOW(34,20) LMSG(MYLMSG) SMSG(MYLMSG)\n\n_Z $T1 ?EDTT1   `Z$T17?EDTT17\n%  $T2 ?EDTT2     $T18?EDTT18\n%  $T3 ?EDTT3     $T19?EDTT19\n%  $T4 ?EDTT4     $T20?EDTT20\n%  $T5 ?EDTT5     $T21?EDTT21\n%  $T6 ?EDTT6     $T22?EDTT22\n%  $T7 ?EDTT7     $T23?EDTT23\n%  $T8 ?EDTT8     $T24?EDTT24\n%  $T9 ?EDTT9     $T25?EDTT25\n%  $T10?EDTT10    $T26?EDTT26\n%  $T11?EDTT11    $T27?EDTT27\n%  $T12?EDTT12    $T28?EDTT28\n%  $T13?EDTT13    $T29?EDTT29\n%  $T14?EDTT14    $T30?EDTT30\n%  $T15?EDTT15    $T31?EDTT31\n%  $T16?EDTT16    $T32?EDTT32\n+Select applicable@&EDT+from list\n+above or@END+PF key to abandon.\n)INIT\n  VGET ZSYSID ASIS\n  &SID = &ZSYSID\n  .ZVARS = '(TT,MYLMSG)'\n  &GC001 = 'Valid values are 1 through &EDTOCR..'\n)PROC\n  VER(&TT,NB,RANGE,1,&EDTOCR,MSG=GC001)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R0145P": {"ttr": 5125, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x004\\x01\\x020_\\x01\\x020_\\x11\\x11\\x00#\\x00#\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2002-11-01T00:00:00", "modifydate": "2002-11-01T11:11:34", "lines": 35, "newlines": 35, "modlines": 0, "user": "C838704"}, "text": ")ATTR DEFAULT(%+_)\n    _ TYPE(INPUT) INTENS(HIGH) COLOR(RED)    HILITE(USCORE)\n    @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n    $ TYPE(OUTPUT) INTENS(HIGH) COLOR(WHITE) JUST(RIGHT)\n    ? TYPE(OUTPUT) INTENS(LOW) COLOR(BLUE)\n    ` TYPE(OUTPUT) INTENS(NON)\n)BODY EXPAND(\\\\) WINDOW(48,20) LMSG(MYLMSG) SMSG(MYLMSG)\n\n_Z $T1 ?EDTT1   `Z$T17?EDTT17    $T33?EDTT33\n%  $T2 ?EDTT2     $T18?EDTT18    $T34?EDTT34\n%  $T3 ?EDTT3     $T19?EDTT19    $T35?EDTT35\n%  $T4 ?EDTT4     $T20?EDTT20    $T36?EDTT36\n%  $T5 ?EDTT5     $T21?EDTT21    $T37?EDTT37\n%  $T6 ?EDTT6     $T22?EDTT22    $T38?EDTT38\n%  $T7 ?EDTT7     $T23?EDTT23    $T39?EDTT39\n%  $T8 ?EDTT8     $T24?EDTT24    $T40?EDTT40\n%  $T9 ?EDTT9     $T25?EDTT25    $T41?EDTT41\n%  $T10?EDTT10    $T26?EDTT26    $T42?EDTT42\n%  $T11?EDTT11    $T27?EDTT27    $T43?EDTT43\n%  $T12?EDTT12    $T28?EDTT28    $T44?EDTT44\n%  $T13?EDTT13    $T29?EDTT29    $T45?EDTT45\n%  $T14?EDTT14    $T30?EDTT30    $T46?EDTT46\n%  $T15?EDTT15    $T31?EDTT31    $T47?EDTT47\n%  $T16?EDTT16    $T32?EDTT32    $T48?EDTT48\n+Select applicable@&EDT+from list above\n+or@END+PF key to abandon.\n\n)INIT\n  VGET ZSYSID ASIS\n  &SID = &ZSYSID\n  .ZVARS = '(TT,MYLMSG)'\n  &GC001 = 'Valid values are 1 through &EDTOCR..'\n)PROC\n  VER(&TT,NB,RANGE,1,&EDTOCR,MSG=GC001)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R020P": {"ttr": 5127, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00 \\x01\\x02(\\x9f\\x01\\x02)O\\x14Y\\x00A\\x00A\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2002-10-16T00:00:00", "modifydate": "2002-10-21T14:59:20", "lines": 65, "newlines": 65, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _   type(INPUT)  color(red)    intens(high)  hilite(uscore)\n ~   type(output) color(red)    intens(high)\n $   type(OUTPUT)               intens(non)\n @   type(text)   color(yellow) intens(high)\n `   type(text)   color(pink  ) intens(low )  hilite(reverse)\n \u00a2   type(output) color(green ) intens(high)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Copy/Modify Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter @&OPER1  +details below for\u00a2SSID+:  Utilid:_COPYID  +\n+\n+COPY -\n+  Listname  :_COPYLDEF+  Enter name,@*+for list or@/+to create/modify list.\n+  Templates -            For template names:-\n+     Local  :_COPYCDDN+  Enter name,@*+for list or@/+to create/modify template.\n+     Remote :_COPYRDDN+  Enter name,@*+for list or@/+to create/modify template.\n+  SHR Level :_COPYSHRL + !DYNA1,SHAD1                  !\n+  Last copy :_Z   +      Number of hours since the last copy taken.\n+\n+MODIFY -\n+  Age       :_Z   +      Number of days for MODIFY processing.\n?Z+\n)INIT\n .ZVARS = '(+\n            COPYLCOP COPYAGE +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n &GC001 = 'Local and remote templates cannot be the same or both spaces.'\n &GC002 = 'Valid values are specified to the right of the field.'\n &DYNA1 = 'Change or Reference'\n &SHAD1 = 'ybbbbbbbbbybbbbbbbb'\n IF (&COPYSHRL = &Z) &COPYSHRL = CHANGE\n IF (&COPYLCOP = &Z) &COPYLCOP = 23\n)REINIT\n REFRESH(COPYSHRL)\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&COPYID,NB)\n   IF (&COPYLDEF = '*','/')\n   ELSE\n     VER(&COPYLDEF,NB,NAME)\n     IF (&COPYCDDN = '*','/')\n     ELSE\n       VER(&COPYCDDN,NB,NAME)\n       IF (&COPYRDDN = '*','/')\n       ELSE\n         VER(&COPYRDDN,NAME)\n         IF (&COPYRDDN = '*','/')\n         ELSE\n           IF (&COPYRDDN = &COPYCDDN)\n             VER(&COPYRDDN,NB,MSG=GC001)\n             VER(&COPYRDDN,LIST,X&COPYRDDN,MSG=GC001)\n         &COPYSHRL = TRANS(TRUNC(&COPYSHRL,1) R,REFERENCE C,CHANGE *,*)\n         VER(&COPYSHRL,NB,LIST,REFERENCE,CHANGE,MSG=GC002)\n         VER(&COPYLCOP,NUM)\n         VER(&COPYAGE,NUM)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R022P": {"ttr": 5129, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\"\\x01\\x021_\\x01\\x021_\\x15H\\x00%\\x00\\'\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2002-11-11T00:00:00", "modifydate": "2002-11-11T15:48:22", "lines": 37, "newlines": 39, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT)  color(red)    intens(high)  hilite(uscore)\n ~   type(output) color(red)    intens(high)\n $   type(OUTPUT)               intens(non)\n @   type(text)   color(yellow) intens(high)\n `   type(text)   color(pink  ) intens(low )  hilite(reverse)\n \u00a2   type(output) color(green ) intens(high)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n } TYPE(CHAR)    COLOR(YELLOW)\n { TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Modify Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter @&OPER1  +details below for\u00a2SSID+:  Utilid:_COPYID  +\n+\n+MODIFY -\n+  Listname  :_COPYLDEF+Enter name,@*+for list or@/+to create/modify list.\n+  Age       :_Z   +    Numeric (days)\n?Z+\n)INIT\n .ZVARS = '(+\n            COPYAGE +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n &GC001 = 'Field must be a valid member name ir not ''/'' or ''*''.'\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&COPYID,NB)\n   IF (&COPYLDEF \u00ac= '*','/')\n     VER(&COPYLDEF,NB,NAME,MSG=GC001)\n     VER(&COPYAGE,NUM)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R030P": {"ttr": 5131, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00)\\x01\\x02)O\\x01\\x020\\x1f\\x17\\x19\\x00K\\x00H\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-10-21T00:00:00", "modifydate": "2002-10-28T17:19:29", "lines": 75, "newlines": 72, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _ type(INPUT)  color(red)    intens(high)  hilite(uscore)\n $ type(output) color(YELLOW) intens(high)\n ~ type(text)   color(blue)   intens(low)  skip(on) HILITE(USCORE)\n @ type(text)   color(yellow) intens(high)\n ` type(text)   color(pink  ) intens(low )  hilite(reverse)\n \u00a2 type(output) color(green ) intens(high)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 RunStat Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter @&OPER1  +details below for\u00a2SSID+:  Utilid:_RUNSID  +\n+\n+RUNSTATS -\n+  Listname  :_RUNSLDEF+    Enter name,@*+for list or@/+to create/modify list.\n+  Report    :_Z  +         !DYNA0,SHAD0                  !\n+  Update    :_Z         +  !DYNA1,SHAD1                  !\n+  History   :_Z         +  !DYNA2,SHAD2                  !\n+  SHR Level :_RUNSSHRL +   !DYNA3,SHAD3                  !\n+  Sample    :_Z  +         Numeric percentage\n?Z+\n)INIT\n &DYNA0 = 'Yes or No'\n &SHAD0 = 'ybbbbbbyb'\n &DYNA1 = 'ALl, ACcesspath, SPace or NOne'\n &SHAD1 = 'yybbbyybbbbbbbbbbyybbbbbbbyybb'\n &DYNA2 = &DYNA1\n &SHAD2 = &SHAD1\n &DYNA3 = 'Change or Reference'\n &SHAD3 = 'ybbbbbbbbbybbbbbbbb'\n .ZVARS = '(+\n            RUNSREP RUNSUPDT RUNSHIST RUNSPCT +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n &GC001 = 'Invalid value. Enter from hilighted values to right of field.'\n &GC004 = 'Combined with value of Update invalid. +\n          Valid values are: ACcesspath,NOne.'\n &GC005 = 'Combined with value of Update invalid. +\n          Valid values are: SPace,NOne.'\n &GC006 = 'Combined with value of Update invalid. +\n          Valid values are: NOne.'\n IF (&UTILLIB = &Z)\n    .ATTR (RUNSID)   = 'TYPE(OUTPUT) INTENS(NON)'\n    .ATTR (RUNSLDEF) = 'TYPE(OUTPUT) INTENS(NON)'\n)REINIT\n REFRESH(RUNSUPDT,RUNSHIST,RUNSSHRL)\n)PROC\n&XXX = TRUNC(&ZCMD,3)\nIF (&XXX \u00ac= DEB,DEF,'?')\n  IF (&UTILLIB \u00ac= &Z) VER(&RUNSID,NB)\n  IF (&RUNSLDEF \u00ac= '*','/')\n    IF (&UTILLIB \u00ac= &Z) VER(&RUNSLDEF,NB,NAME)\n    &RUNSREP  = TRANS(TRUNC(&RUNSREP,1) Y,YES N,NO *,*)\n    VER(&RUNSREP,NB,LIST,YES,NO,MSG=GC001)\n    &RUNSUPDT = TRANS(TRUNC(&RUNSUPDT,2) AL,ALL AC,ACCESSPATH SP,SPACE\n               NO,NONE *,*)\n    VER(&RUNSUPDT,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n    &RUNSHIST = TRANS(TRUNC(&RUNSHIST,2) AL,ALL AC,ACCESSPATH SP,SPACE\n               NO,NONE *,*)\n    VER(&RUNSHIST,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n    IF (&RUNSUPDT = ACCESSPATH)\n      VER(&RUNSHIST,LIST,ACCESSPATH,NONE,MSG=GC004)\n    IF (&RUNSUPDT = SPACE)\n      VER(&RUNSHIST,LIST,SPACE,NONE,MSG=GC005)\n    IF (&RUNSUPDT = NONE)\n      VER(&RUNSHIST,LIST,NONE,MSG=GC006)\n    &RUNSSHRL = TRANS(TRUNC(&RUNSSHRL,1) R,REFERENCE C,CHANGE *,*)\n    VER(&RUNSSHRL,NB,LIST,CHANGE,REFERENCE,MSG=GC001)\n    VER(&RUNSPCT,NB,NUM)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R040P": {"ttr": 5133, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x001\\x01\\x02\\x19/\\x01\\x02)O\\x125\\x00*\\x00:\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-07-11T00:00:00", "modifydate": "2002-10-21T12:35:31", "lines": 42, "newlines": 58, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _ type(INPUT)  color(red)    intens(high)  hilite(uscore)\n $ type(output) color(YELLOW) intens(high)\n ~ type(text)   color(blue)   intens(low)  skip(on) HILITE(USCORE)\n @ type(text)   color(yellow) intens(high)\n ` type(text)   color(pink  ) intens(low )  hilite(reverse)\n \u00a2 type(output) color(green ) intens(high)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n } TYPE(CHAR)    COLOR(YELLOW)\n { TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Quiesce Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter @&OPER1  +details below for\u00a2SSID+:  Utilid:_QUIEID  +\n+\n+QUIESCE -\n+    Listname :_QUIELDEF+ Enter name,@*+for list or@/+to create/modify list.\n+    Write    :_Z  +      !DYNA1,SHAD1                  !\n?Z+\n)INIT\n &DYNA1 = 'Yes or No'\n &SHAD1 = '}{{{{{{}{'\n .ZVARS = '(+\n            QUIEWRIT +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n &GC001 = 'Valid values are specified to the right of the field.'\n IF (&QUIEWRIT = &Z) &QUIEWRIT = YES\n)REINIT\nREFRESH(QUIEWRIT)\n)PROC\n&XXX = TRUNC(&ZCMD,3)\nIF (&XXX \u00ac= DEB,DEF,'?')\n  VER(&QUIEID,NB)\n  IF (&QUIELDEF \u00ac= '*','/')\n    VER(&QUIELDEF,NB,NAME)\n    &QUIEWRIT = TRANS(TRUNC(&QUIEWRIT,1) Y,YES N,NO *,*)\n    VER(&QUIEWRIT,NB,LIST,YES,NO,MSG=GC001)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R050P": {"ttr": 5135, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x05\\x01\\x02!\\x9f\\x01\\x02)O\\x126\\x00,\\x00:\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2002-08-07T00:00:00", "modifydate": "2002-10-21T12:36:05", "lines": 44, "newlines": 58, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _   type(INPUT)  color(red)    intens(high)  hilite(uscore)\n $   type(OUTPUT)               intens(non)\n +   type(text)   color(blue)   intens(low)   skip(on)\n @   type(text)   color(yellow) intens(high)\n \u00a2   type(output) color(green ) intens(high)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Unload Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter @&OPER1  +details below for\u00a2SSID+:  Utilid:_UNLDID  +\n+\n+Enter@/+against type of unload to be processed (one selection only):\n_Z+From Table\n_Z+List\n_Z+Tablespace\n_Z+FromCopy\n?Z+\n)INIT\n .ZVARS = '(+\n            ULFT ULLS ULTS ULFC +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n &GC001 = 'Can only select one option.'\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&UNLDID,NB)\n    IF (&ULFT \u00ac= &Z)\n      VER(&ULLS,LIST,XX,MSG=GC001)\n      VER(&ULTS,LIST,XX,MSG=GC001)\n      VER(&ULFC,LIST,XX,MSG=GC001)\n    IF (&ULLS \u00ac= &Z)\n      VER(&ULTS,LIST,XX,MSG=GC001)\n      VER(&ULFC,LIST,XX,MSG=GC001)\n    IF (&ULTS \u00ac= &Z)\n      VER(&ULFC,LIST,XX,MSG=GC001)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R051P": {"ttr": 5137, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00T\\x01\\x02!\\x9f\\x01\\x02)\\x1f\\x10#\\x00?\\x00]\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2002-08-07T00:00:00", "modifydate": "2002-10-18T10:23:54", "lines": 63, "newlines": 93, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high)   hilite(uscore)\n +   type(text)  color(blue)  intens(low)    skip(on)\n $   type(output) color(green) intens(high)\n @   type(text) color(yellow) intens(high)\n ~   type(text) color(BLUE) intens(low) hilite(uscore)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Unload Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter details below for@UNLOAD FROM TABLE+option for$SSID+:\n+\n+Table name:_UNLDOWNR+._UNLDTBNM                       +\n+Sample    :_Z  +       Numeric percentage (optional)\n+Limit     :_Z  +       Numeric output limit (optional)\n+WHEN parameters, (note - text below is WRAP around and not verified):\n+           _UNLDWHN1\n+           _UNLDWHN2\n+\n+Templates -            For template names;\n+  PunchDDN:_UNLDPDDN+  Enter name,@*+for list or@/+to create/modify template.\n+  UNLDDN  :_UNLDUDDN+  Enter name,@*+for list or@/+to create/modify template.\n+\n+\n+(For field specifications, enter direct into generated JCL where indicated.)\n?Z+\n)INIT\n .ZVARS = '(+\n            UNLDSPCT UNLDLIMT +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n\n &GC009B = 'Field required.'\n &GC002 = 'Punch and unload templates cannot be the same.'\n &GC003 = 'Sample and limit fields are mutually exclusive.'\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&UNLDOWNR,NB,MSG=GC009B)\n   VER(&UNLDTBNM,NB,MSG=GC009B)\n   VER(&UNLDSPCT,NUM)\n   VER(&UNLDLIMT,NUM)\n   IF (&UNLDSPCT \u00ac= &Z)\n     IF (&UNLDLIMT \u00ac= &Z)\n        VER(&UNLDLIMT,LIST,X&UNLDLIMT,MSG=GC003)\n   VER(&UNLDPDDN ,NB)\n   VER(&UNLDUDDN ,NB)\n   IF (&UNLDPDDN \u00ac= '*','/')\n     VER(&UNLDPDDN ,NAME)\n   IF (&UNLDUDDN \u00ac= '*','/')\n     VER(&UNLDUDDN ,NAME)\n   IF (&UNLDUDDN = &UNLDPDDN )\n     IF (&UNLDUDDN \u00ac= '*','/')\n       VER(&UNLDUDDN ,LIST,X&UNLDUDDN ,MSG=GC002)\n)END\n    &TEMPDIS2 = TRANS(TRUNC(&TEMPDIS2,1) C,CATLG D,DELETE K,KEEP U,UNCATLG *,*)\n    VER(&TEMPDIS2,NB,LIST,CATLG,DELETE,KEEP,UNCATLG,MSG=GC003)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R052P": {"ttr": 5139, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00E\\x01\\x02!\\x9f\\x01\\x02)\\x1f\\x10\"\\x004\\x00]\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2002-08-07T00:00:00", "modifydate": "2002-10-18T10:22:45", "lines": 52, "newlines": 93, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high)   hilite(uscore)\n +   type(text)  color(blue)  intens(low)    skip(on)\n $   type(output) color(green) intens(high)\n @   type(text) color(yellow) intens(high)\n ~   type(text) color(BLUE) intens(low) hilite(uscore)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Unload Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter details below for@UNLOAD FROM LIST+option for$SSID+:\n+\n+Listname  :_UNLDLDEF+  Enter name,@*+for list or@/+to create/modify list.\n+\n+Templates -            For template names:-\n+  PunchDDN:_UNLDPDDN+  Enter name,@*+for list or@/+to create/modify template.\n+  UNLDDN  :_UNLDUDDN+  Enter name,@*+for list or@/+to create/modify template.\n+\n+\n+(For field specifications, enter direct into generated JCL where indicated.)\n?Z+\n)INIT\n .ZVARS = '(+\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n\n &GC009B = 'Field required.'\n &GC002 = 'Punch and unload templates cannot be the same.'\n &GC003 = 'Sample and limit fields are mutually exclusive.'\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   IF (&UNLDLDEF \u00ac= '*','/')\n     VER(&UNLDLDEF,NB,NAME)\n   VER(&UNLDPDDN ,NB)\n   VER(&UNLDUDDN ,NB)\n   IF (&UNLDPDDN \u00ac= '*','/')\n     VER(&UNLDPDDN ,NAME)\n   IF (&UNLDUDDN \u00ac= '*','/')\n     VER(&UNLDUDDN ,NAME)\n   IF (&UNLDUDDN = &UNLDPDDN )\n     IF (&UNLDUDDN \u00ac= '*','/')\n       VER(&UNLDUDDN ,LIST,X&UNLDUDDN ,MSG=GC002)\n)END\n    &TEMPDIS2 = TRANS(TRUNC(&TEMPDIS2,1) C,CATLG D,DELETE K,KEEP U,UNCATLG *,*)\n    VER(&TEMPDIS2,NB,LIST,CATLG,DELETE,KEEP,UNCATLG,MSG=GC003)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R053P": {"ttr": 5141, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00Y\\x01\\x02\"\\x0f\\x01\\x02)\\x1f\\x10\"\\x005\\x00=\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2002-08-08T00:00:00", "modifydate": "2002-10-18T10:22:59", "lines": 53, "newlines": 61, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high)   hilite(uscore)\n +   type(text)  color(blue)  intens(low)    skip(on)\n $   type(output) color(green) intens(high)\n @   type(text) color(yellow) intens(high)\n ~   type(text) color(BLUE) intens(low) hilite(uscore)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Unload Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter details below for@UNLOAD FROM TABLESPACE+option for$SSID+:\n+\n+Tablespace:_UNLDDBNM+._UNLDTSPC+Part:_Z   +(optional)\n+\n+Templates -            For template names:-\n+  PunchDDN:_UNLDPDDN+  Enter name,@*+for list or@/+to create/modify template.\n+  UNLDDN  :_UNLDUDDN+  Enter name,@*+for list or@/+to create/modify template.\n+\n+\n+(For field specifications, enter direct into generated JCL where indicated.)\n?Z+\n)INIT\n .ZVARS = '(+\n            UNLDPART       +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n\n &GC009B = 'Field required.'\n &GC002 = 'Punch and unload templates cannot be the same.'\n &GC003 = 'Sample and limit fields are mutually exclusive.'\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&UNLDDBNM,NB,NAME)\n   VER(&UNLDTSPC,NB,NAME)\n   IF (&UNLDPART \u00ac= &Z)\n     VER(&UNLDPART,NUM)\n   VER(&UNLDPDDN ,NB)\n   VER(&UNLDUDDN ,NB)\n   IF (&UNLDPDDN \u00ac= '*','/')\n     VER(&UNLDPDDN ,NAME)\n   IF (&UNLDUDDN \u00ac= '*','/')\n     VER(&UNLDUDDN ,NAME)\n   IF (&UNLDUDDN = &UNLDPDDN )\n     IF (&UNLDUDDN \u00ac= '*','/')\n       VER(&UNLDUDDN ,LIST,X&UNLDUDDN ,MSG=GC002)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R054P": {"ttr": 5377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x12\\x01\\x02\"\\x0f\\x01\\x02)\\x1f\\x10#\\x004\\x00>\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-08-08T00:00:00", "modifydate": "2002-10-18T10:23:12", "lines": 52, "newlines": 62, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high)   hilite(uscore)\n +   type(text)  color(blue)  intens(low)    skip(on)\n $   type(output) color(green) intens(high)\n @   type(text) color(yellow) intens(high)\n ~   type(text) color(BLUE) intens(low) hilite(uscore)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Unload Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter details below for@UNLOAD FROMCOPY+option for$SSID+:\n+\n+Tablespace:_UNLDDBNM+._UNLDTSPC+\n+\n+Templates -            For template names:-\n+  PunchDDN:_UNLDPDDN+  Enter name,@*+for list or@/+to create/modify template.\n+  UNLDDN  :_UNLDUDDN+  Enter name,@*+for list or@/+to create/modify template.\n+\n+\n+(For field specifications, enter direct into generated JCL where indicated.)\n?Z+\n)INIT\n .ZVARS = '(+\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n\n &GC009B = 'Field required.'\n &GC002 = 'Punch and unload templates cannot be the same.'\n &GC003 = 'Sample and limit fields are mutually exclusive.'\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&UNLDDBNM,NB,NAME)\n   VER(&UNLDTSPC,NB,NAME)\n   VER(&UNLDPDDN ,NB)\n   VER(&UNLDUDDN ,NB)\n   IF (&UNLDPDDN \u00ac= '*','/')\n     VER(&UNLDPDDN ,NAME)\n   IF (&UNLDUDDN \u00ac= '*','/')\n     VER(&UNLDUDDN ,NAME)\n   IF (&UNLDUDDN = &UNLDPDDN )\n     IF (&UNLDUDDN \u00ac= '*','/')\n       VER(&UNLDUDDN ,LIST,X&UNLDUDDN ,MSG=GC002)\n)END\n    &TEMPDIS2 = TRANS(TRUNC(&TEMPDIS2,1) C,CATLG D,DELETE K,KEEP U,UNCATLG *,*)\n    VER(&TEMPDIS2,NB,LIST,CATLG,DELETE,KEEP,UNCATLG,MSG=GC003)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R060P": {"ttr": 5379, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00$\\x01\\x02!\\x9f\\x01\\x02)O\\x126\\x00\\x1d\\x00:\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-08-07T00:00:00", "modifydate": "2002-10-21T12:36:24", "lines": 29, "newlines": 58, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _   type(INPUT)  color(red)    intens(high)  hilite(uscore)\n +   type(text)   color(blue)   intens(low)   skip(on)\n @   type(text)   color(yellow) intens(high)\n $   type(output) color(green ) intens(high)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Load Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter @&OPER1  +details below for$SSID+:  Utilid:_LOADID  +\n+\n+Enter@/+against type of processing required:\n_Z+Input dataset name and destination table name specification\n_Z+Control parameter specification\n\n%Note+- Both options must be processed to generate JCL.\n?Z+\n)INIT\n .ZVARS = '(+\n            LDTN LDPS +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R061P": {"ttr": 5381, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00B\\x01\\x021\\x1f\\x01\\x021\\x1f\\x12\\x16\\x00)\\x00)\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2002-11-07T00:00:00", "modifydate": "2002-11-07T12:16:42", "lines": 41, "newlines": 41, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high)   hilite(uscore)\n +   type(text)  color(blue)  intens(low)    skip(on)\n $   type(output) color(green) intens(high)\n @   type(text) color(yellow) intens(high)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Load Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter @&OPER1  +details below for$SSID+:  Utilid:_LOADID  +\n+\n+Input datasets -\n+  Punch   :_LOADPDSN                                      +Browse:_Z+\n+  Unload  :_LOADUDSN                                      +Browse:_Z+\n+\n%Note+- The dataset names should be those generated by an unload process.\n+     - Do not use wildcards.\n+     - Datesets must be quoted unless default prefix is required.\n?Z+\n)INIT\n .ZVARS = '(+\n            BRPDSN BRUDSN +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n\n &GC001A = 'Field required.'\n &GC002 = 'Punch and unload templates cannot be the same.'\n &GC003 = 'Sample and limit fields are mutually exclusive.'\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&LOADID,NB)\n   VER(&LOADPDSN,NB,DSNAMEQ,MSG=GC001A)\n   VER(&LOADUDSN,NB,DSNAMEQ,MSG=GC001A)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R0611P": {"ttr": 5383, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00@\\x01\\x021\\x1f\\x01\\x021\\x1f\\x11A\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-11-07T00:00:00", "modifydate": "2002-11-07T11:41:40", "lines": 29, "newlines": 29, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high)   hilite(uscore)\n #   type(&TYPE1) color(&COLOR1)   intens(high)   hilite(uscore) CAPS(ON)\n +   type(text)  color(blue)  intens(low)    skip(on)\n ~   type(text)  color(blue)  intens(low)    skip(on) hilite(uscore)\n $   type(output) color(blue) intens(high)\n @   type(text) color(yellow) intens(high)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Load Table Names >\\-\\\n%&SID%===>_ZCMD                                               `Scroll ===>_AMT +\n%\n+Change values if and as required. Use@END+PF key to abandon process.\n?Z+\n~Owner   +~Table Name                                               ~Table count\n)MODEL\n#OWNER   +#TABNAME                                                  +    $Z\n)INIT\n  .ZVARS = '(POPUPMSG,COUNT)'\n  &SID = &ZSYSID\n  &XAMT = TRANS(TRUNC(&AMT,1) H,HALF P,PAGE C,CSR D,DATA *,*)\n  IF (&XAMT = HALF,PAGE,CSR,DATA) &AMT = &XAMT\n)PROC\n  &XAMT = TRANS(TRUNC(&AMT,1) H,HALF P,PAGE C,CSR D,DATA *,*)\n  IF (&XAMT = HALF,PAGE,CSR,DATA) &AMT = &XAMT\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R062P": {"ttr": 5385, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00D\\x01\\x02)\\x0f\\x01\\x021\\x1f\\x11T\\x00q\\x00o\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2002-10-17T00:00:00", "modifydate": "2002-11-07T11:54:44", "lines": 113, "newlines": 111, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high)   hilite(uscore)\n #   type(&TYPE1) color(&COLOR1)   intens(high)   hilite(uscore)\n +   type(text)  color(blue)  intens(low)    skip(on)\n $   type(output) color(green) intens(high)\n @   type(text) color(yellow) intens(high)\n ~   type(text) color(BLUE) intens(low) hilite(uscore)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n Y TYPE(CHAR) COLOR(YELLOW) HILITE(REVERSE)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Load Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter @&OPER1  +details below for$SSID+:  Utilid:_LOADID  +\n+\n Resume    :#Z  +       !DYNA0,SHAD0                  !\n+SHR Lev   :#Z     +    !DYNA2,SHAD2                  !\n+Replace   :#Z  +       !DYNA1,SHAD1                  !\n+Statistics:#Z  +       !DYNA5,SHAD5                  !\n+  Update  :#LOADUPDT  +!DYNA3,SHAD3                  !\n+  History :#LOADHIST  +!DYNA4,SHAD4                  !\n+  Sample  :#Z  +       Numeric percentage (optional)\n+Sortkeys  :#Z +        Numeric (optional)\n+Sortdevt  :#LOADDEVT+  Enter valid device type (or@*+for a selection list).\n+Sortnum   :#Z +        Numeric (optional)\n+Templates -            For template names: (those marked with%o+are optional)\n+  ErrDDN  :#LOADEDDN+    Enter name,@*+for list or@/+to create/modify template.\n+  DiscarDD:#LOADDDDN+    Enter name,@*+for list or@/+to create/modify template.\n+  MapDDN  :#LOADMDDN+    Enter name,@*+for list or@/+to create/modify template.\n+  WorkDDN :#LOADWDDN+    Enter name,@*+for list or@/+to create/modify template.\n+  CopyDDn :#LOADCDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n+  Recovery:#LOADRDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n?Z+\n)INIT\n .ZVARS = '(+\n            LOADRESU LOADSHRL LOADREPL +\n            LOADSTAT LOADSPCT LOADSRTK LOADSRTN +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n\n &DYNA0 = 'Yes or No'\n &SHAD0 = 'ybbbbbbyb'\n &DYNA1 = &DYNA0\n &SHAD1 = &SHAD0\n &DYNA2 = 'Change or None'\n &SHAD2 = 'ybbbbbbbbbybbb'\n &DYNA3 = 'ALl, ACcesspath, SPace or NOne'\n &SHAD3 = 'yybbbyybbbbbbbbbbyybbbbbbbyybb'\n &DYNA4 = &DYNA3\n &SHAD4 = &SHAD3\n &DYNA5 = &DYNA0\n &SHAD5 = &SHAD0\n &GC001 = 'Invalid value. Enter from hilighted values to right of field.'\n &GC002 = 'Valid values are: NONE or CHANGE with RESUME=YES.'\n &GC003 = 'Valid values are: NONE with RESUME=NO.'\n &GC004 = 'Combined with value of Update invalid. +\n          Valid values are: ACcesspath,NOne.'\n &GC005 = 'Combined with value of Update invalid. +\n          Valid values are: SPace,NOne.'\n &GC006 = 'Combined with value of Update invalid. +\n          Valid values are: NOne.'\n .ATTR (LOADREPL) = 'TYPE(INPUT) COLOR(RED)'\n)REINIT\n REFRESH(LOADRESU,LOADREPL,LOADSHRL,LOADUPDT,LOADHIST)\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&LOADID,NB)\n   &LOADRESU = TRANS(TRUNC(&LOADRESU,1) Y,YES N,NO *,*)\n   VER(&LOADRESU,NB,LIST,YES,NO,MSG=GC001)\n   &LOADSHRL = TRANS(TRUNC(&LOADSHRL,1) C,CHANGE N,NONE *,*)\n   IF (&LOADRESU = YES)\n      VER(&LOADSHRL,LIST,NONE,CHANGE,MSG=GC002)\n   IF (&LOADRESU = NO)\n      VER(&LOADSHRL,LIST,NONE,MSG=GC003)\n   &LOADREPL = TRANS(TRUNC(&LOADREPL,1) Y,YES N,NO *,*)\n   VER(&LOADREPL,NB,LIST,YES,NO,MSG=GC001)\n   &LOADSTAT = TRANS(TRUNC(&LOADSTAT,1) Y,YES N,NO *,*)\n   VER(&LOADSTAT,NB,LIST,YES,NO,MSG=GC001)\n   IF (&LOADSTAT = YES)\n       &LOADUPDT = TRANS(TRUNC(&LOADUPDT,2) AL,ALL AC,ACCESSPATH SP,SPACE\n                  NO,NONE *,*)\n       VER(&LOADUPDT,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n       &LOADHIST = TRANS(TRUNC(&LOADHIST,2) AL,ALL AC,ACCESSPATH SP,SPACE\n                  NO,NONE *,*)\n       VER(&LOADHIST,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n       IF (&LOADUPDT = ACCESSPATH)\n         VER(&LOADHIST,LIST,ACCESSPATH,NONE,MSG=GC004)\n       IF (&LOADUPDT = SPACE)\n         VER(&LOADHIST,LIST,SPACE,NONE,MSG=GC005)\n       IF (&LOADUPDT = NONE)\n         VER(&LOADHIST,LIST,NONE,MSG=GC006)\n       VER(&LOADSPCT,NUM)\n   VER(&LOADSKEY,NUM)\n   IF (&LOADDEVT \u00ac= '*')\n     VER(&LOADDEVT,NB)\n   IF (&LOADEDDN \u00ac= '*','/')\n     VER(&LOADEDDN,NB,NAME)\n   IF (&LOADDDDN \u00ac= '*','/')\n     VER(&LOADDDDN,NB,NAME)\n   IF (&LOADMDDN \u00ac= '*','/')\n     VER(&LOADMDDN,NB,NAME)\n   IF (&LOADWDDN \u00ac= '*','/')\n     VER(&LOADWDDN,NB,NAME)\n   IF (&LOADCDDN \u00ac= '*','/')\n     VER(&LOADCDDN,NAME)\n   IF (&LOADRDDN \u00ac= '*','/')\n     VER(&LOADRDDN,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R063P": {"ttr": 5387, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00Y\\x01\\x02\"\\x0f\\x01\\x02$_\\x106\\x00<\\x00=\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2002-08-08T00:00:00", "modifydate": "2002-09-02T10:36:59", "lines": 60, "newlines": 61, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high)   hilite(uscore)\n +   type(text)  color(blue)  intens(low)    skip(on)\n $   type(output) color(green) intens(high)\n @   type(text) color(yellow) intens(high)\n ~   type(text) color(BLUE) intens(low) hilite(uscore)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\)\n@&ZTIME\\-\\< DB2 Unload Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter details below for@UNLOAD FROM TABLESPACE+option for$SSID+:\n+\n+Tablespace:_ULDBNAME+._ULTSPACE+Part:_Z   +(optional)\n+Sample    :_Z  +       Numeric percentage (optional)\n+Limit     :_Z  +       Numeric output limit (optional)\n+\n+Templates -            For template names:-\n+  PunchDDN:_ULTEMPPU+  Enter name,@*+for list or@/+to create/modify template.\n+  UNLDDN  :_ULTEMPUL+  Enter name,@*+for list or@/+to create/modify template.\n+\n+\n+(For field specifications, enter direct into generated JCL where indicated.)\n)INIT\n .ZVARS = '(+\n            ULPARTNO       +\n            ULSPCT ULLIMIT +\n           )'\n &SID   = &ZSYSID\n\n &GC009B = 'Field required.'\n &GC002 = 'Punch and unload templates cannot be the same.'\n &GC003 = 'Sample and limit fields are mutually exclusive.'\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&ULDBNAME,NB,NAME)\n   VER(&ULTSPACE,NB,NAME)\n   IF (&ULPARTNO \u00ac= &Z)\n     VER(&ULPARTNO,NUM)\n   VER(&ULSPCT,NUM)\n   VER(&ULLIMIT,NUM)\n   IF (&ULSPCT \u00ac= &Z)\n     IF (&ULLIMIT \u00ac= &Z)\n        VER(&ULLIMIT,LIST,X&ULLIMIT,MSG=GC003)\n   VER(&ULTEMPPU,NB)\n   VER(&ULTEMPUL,NB)\n   IF (&ULTEMPPU \u00ac= '*','/')\n     VER(&ULTEMPPU,NAME)\n   IF (&ULTEMPUL \u00ac= '*','/')\n     VER(&ULTEMPUL,NAME)\n   IF (&ULTEMPUL = &ULTEMPPU)\n     IF (&ULTEMPUL \u00ac= '*','/')\n       VER(&ULTEMPUL,LIST,X&ULTEMPUL,MSG=GC002)\n)END\n    &TEMPDIS2 = TRANS(TRUNC(&TEMPDIS2,1) C,CATLG D,DELETE K,KEEP U,UNCATLG *,*)\n    VER(&TEMPDIS2,NB,LIST,CATLG,DELETE,KEEP,UNCATLG,MSG=GC003)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R064P": {"ttr": 5389, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x04\\x01\\x02\"\\x0f\\x01\\x02$_\\x107\\x009\\x00>\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-08-08T00:00:00", "modifydate": "2002-09-02T10:37:04", "lines": 57, "newlines": 62, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high)   hilite(uscore)\n +   type(text)  color(blue)  intens(low)    skip(on)\n $   type(output) color(green) intens(high)\n @   type(text) color(yellow) intens(high)\n ~   type(text) color(BLUE) intens(low) hilite(uscore)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\)\n@&ZTIME\\-\\< DB2 Unload Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter details below for@UNLOAD FROMCOPY+option for$SSID+:\n+\n+Tablespace:_ULDBNAME+._ULTSPACE+\n+Sample    :_Z  +       Numeric percentage (optional)\n+Limit     :_Z  +       Numeric output limit (optional)\n+\n+Templates -            For template names:-\n+  PunchDDN:_ULTEMPPU+  Enter name,@*+for list or@/+to create/modify template.\n+  UNLDDN  :_ULTEMPUL+  Enter name,@*+for list or@/+to create/modify template.\n+\n+\n+(For field specifications, enter direct into generated JCL where indicated.)\n)INIT\n .ZVARS = '(+\n            ULSPCT ULLIMIT +\n           )'\n &SID   = &ZSYSID\n\n &GC009B = 'Field required.'\n &GC002 = 'Punch and unload templates cannot be the same.'\n &GC003 = 'Sample and limit fields are mutually exclusive.'\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&ULDBNAME,NB,NAME)\n   VER(&ULTSPACE,NB,NAME)\n   VER(&ULSPCT,NUM)\n   VER(&ULLIMIT,NUM)\n   IF (&ULSPCT \u00ac= &Z)\n     IF (&ULLIMIT \u00ac= &Z)\n        VER(&ULLIMIT,LIST,X&ULLIMIT,MSG=GC003)\n   VER(&ULTEMPPU,NB)\n   VER(&ULTEMPUL,NB)\n   IF (&ULTEMPPU \u00ac= '*','/')\n     VER(&ULTEMPPU,NAME)\n   IF (&ULTEMPUL \u00ac= '*','/')\n     VER(&ULTEMPUL,NAME)\n   IF (&ULTEMPUL = &ULTEMPPU)\n     IF (&ULTEMPUL \u00ac= '*','/')\n       VER(&ULTEMPUL,LIST,X&ULTEMPUL,MSG=GC002)\n)END\n    &TEMPDIS2 = TRANS(TRUNC(&TEMPDIS2,1) C,CATLG D,DELETE K,KEEP U,UNCATLG *,*)\n    VER(&TEMPDIS2,NB,LIST,CATLG,DELETE,KEEP,UNCATLG,MSG=GC003)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R070P": {"ttr": 5391, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x01\\x02&o\\x01\\x02)O\\x127\\x00)\\x00%\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2002-09-23T00:00:00", "modifydate": "2002-10-21T12:37:00", "lines": 41, "newlines": 37, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _   type(INPUT)  color(red)    intens(high)  hilite(uscore)\n +   type(text)   color(blue)   intens(low)   skip(on)\n @   type(text)   color(yellow) intens(high)\n~    type(text)   color(PINK)   intens(high) hilite(reverse)\n \u00a2   type(output) color(green ) intens(high)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Reorg Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter @&OPER1  +details below for\u00a2SSID+:  Utilid:_REORID  +\n+\n+Enter@/+against type of Reorg to be processed (one selection only per type):\n\n  +Tablespace:\n_Z+  List\n_Z+  Database Name\n  +Index:\n_Z+  List\n_Z+  Index Name\n+\n?Z+\n)INIT\n .ZVARS = '(+\n            ROTL ROTS ROIL ROIX +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n &GC001 = 'Can only select one option.'\n)REINIT\n)PROC\nIF (&ZCMD \u00ac= '?')\n  IF (&ROTL \u00ac= &Z)\n    VER(&ROTS,LIST,XX,MSG=GC001)\n  IF (&ROIL \u00ac= &Z)\n    VER(&ROIX,LIST,XX,MSG=GC001)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R071P": {"ttr": 5633, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00\\x06\\x01\\x02&o\\x01\\x020O\\x154\\x00\\xa8\\x00G\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "2002-09-23T00:00:00", "modifydate": "2002-10-31T15:34:06", "lines": 168, "newlines": 71, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n Y TYPE(CHAR) COLOR(YELLOW) hilite(reverse)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n g TYPE(CHAR)    COLOR(GREEN)\n w TYPE(CHAR)    COLOR(WHITE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Reorg Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter@&OPER1  +from@LIST+option for$SSID+:  Utilid:_REORID  +\n$Z+\n+Listname  :_REORLDEF+  Enter name,@*+for list or@/+to create/modify list.\n+Reuse     :_Z  +       !DYNA1,SHAD1     !          +Log:_Z  +!DYNA2,SHAD2 !\n+SHR level :_REORSHRL + !DYNA3,SHAD3                           !\n+            Deadline:_Z      +!DYNA0,SHAD0                                    !\n+            Drain wait:_Z   +  Retry:_Z  +Retry delay:_Z   +\n+            Mappingtable:_REORMDBN+._REORMTSP          +   Maxro:  _Z    +\n+            Drain:_Z      + Longlog:_Z       + Delay:_Z   +Timeout:_Z    +\n+Offposlim :_Z  +(num)  Indreflimit:_Z   +(num)  Reportonly:_Z  +!DYNAA,SHADA !\n+Fastswitch:_Z  +       !DYNA9,SHAD9                           !\n+Sortdata  :_Z  +       !DYNA4,SHAD4                           !\n+Sortkeys  :_Z  +       !DYNA5,SHAD5                           !\n+Statistics:_Z  +       !DYNA8,SHAD8                           !\n+  Update  :_REORUPDT  +!DYNA6,SHAD6                           !\n+  History :_REORHIST  +!DYNA7,SHAD7                           !\n+  Sample  :_Z  +       Numeric percentage (optional)\n+Templates -            For template names: (those marked with%o+are optional)\n+  PunchDDN:_REORPDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n+  CopyDDn :_REORCDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n+  Recovery:_REORRDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n)INIT\n &SID   = &ZSYSID\n &DYNA0 = 'None or Current(with further input to follow)'\n &SHAD0 = 'ybbbbbbbybbbbbbbwwwwwwwwwwwwwwwwwwwwwwwwwwwwb'\n &DYNA1 = 'Yes or No'\n &SHAD1 = 'ybbbbbbyb'\n &DYNA2 = &DYNA1\n &SHAD2 = &SHAD1\n &DYNA3 = 'Change, Reference or None'\n &SHAD3 = 'ybbbbbbbybbbbbbbbbbbbybbb'\n &DYNA4 = &DYNA1\n &SHAD4 = &SHAD1\n &DYNA5 = &DYNA1\n &SHAD5 = &SHAD1\n &DYNA6 = 'ALl, ACcesspath, SPace or NOne'\n &SHAD6 = 'yybbbyybbbbbbbbbbyybbbbbbbyybb'\n &DYNA7 = &DYNA6\n &SHAD7 = &SHAD6\n &DYNA8 = &DYNA1\n &SHAD8 = &SHAD1\n &DYNA9 = &DYNA1\n &SHAD9 = &SHAD1\n &DYNAA = &DYNA1\n &SHADA = &SHAD1\n &GC001 = 'Valid values are specified to the right of the field.'\n &GC002 = 'Valid values are: Defer, numeric integer or blank'\n &GC003 = 'Valid values are: Writers, All or blank'\n &GC004 = 'Valid values are: Continue, Drain, Term or blank'\n &GC005 = 'Combined with value of Update invalid. +\n          Valid values are: ACcesspath, NOne.'\n &GC006 = 'Combined with value of Update invalid. +\n          Valid values are: SPace, NOne.'\n &GC007 = 'Combined with value of Update invalid. +\n          Valid values are: NOne.'\n &GC008 = 'Valid values are numeric integer or blank'\n &GC009D= 'Valid values are: Abend or Term'\n .ZVARS = '( +\n            POPUPMSG +\n            REORRUSE REORLOG +\n            REORDEAD +\n            REORDRAW REORRETR REORRETD +\n            REORMXRO REORDRAN REORLLOG REORDLAY REORTOUT +\n            REOROFFL REORINDR REORREPO +\n            REORFSWC REORSDAT REORSKEY +\n            REORSTAT REORSPCT +\n           )'\n\n IF (&UTILLIB = &Z)\n    .ATTR (REORID)   = 'TYPE(OUTPUT) INTENS(NON)'\n    .ATTR (REORLDEF) = 'TYPE(OUTPUT) INTENS(NON)'\n)REINIT\nREFRESH(REORUPDT,REORHIST,REORRUSE,REORSHRL,REORSDAT,REORSKEY,REORREPO,\n        REORDEAD,REORMXRO,REORDRAN,REORLLOG,REORDLAY,REORTOUT)\n)PROC\n&XXX = TRUNC(&ZCMD,3)\nIF (&XXX \u00ac= DEB,DEF,'?')\n IF (&UTILLIB \u00ac= &Z) VER(&REORID,NB)\n IF (&REORLDEF \u00ac= '*','/')\n   IF (&UTILLIB \u00ac= &Z) VER(&REORLDEF,NB,NAME)\n   &REORRUSE = TRANS(TRUNC(&REORRUSE,1) Y,YES N,NO *,*)\n   VER(&REORRUSE,LIST,YES,NO,MSG=GC001)\n   &REORLOG  = TRANS(TRUNC(&REORLOG,1) Y,YES N,NO *,*)\n   VER(&REORLOG,NB,LIST,NO,YES,MSG=GC001)\n   &REORSHRL  = TRANS(TRUNC(&REORSHRL,1) N,NONE C,CHANGE R,REFERENCE *,*)\n   VER(&REORSHRL,NB,LIST,NONE,CHANGE,REFERENCE,MSG=GC001)\n   IF (&REORSHRL = CHANGE,REFERENCE)\n      &X1    = 'For SHR level &REORSHRL, valid'\n      &GC008 = '&X1 values are: None or Current'\n      &REORDEAD = TRANS(TRUNC(&REORDEAD,1) C,CURRENT N,NONE *,*)\n      VER(&REORDEAD,NB,LIST,CURRENT,NONE,MSG=GC008)\n      &X2    = 'For Deadline \"&REORDEAD\", valid'\n      &GC009 = '&X2 values are: Timestamp or Date'\n      &GC009A= '&X2 values are: ''+'' or ''-''.'\n      &GC009B= '&X2 values are: Years, MONths, Days, Hours, MINutes, +\n                           Seconds or MICroseconds'\n      &GC009C= 'For Deadline &REORDEAD, must be non-blank numeric'\n   IF (&REORSHRL = CHANGE)\n      &GC009E= 'For SHR level CHANGE, must be in the range 0-1800'\n      &GC009F= 'For SHR level CHANGE, must be in the range 0-255'\n      &GC009G= 'For SHR level CHANGE, must be in the range 1-1800'\n      &GC009H= 'For SHR level CHANGE, must define Mappingtable'\n      VER(&REORDRAW,RANGE,0,1800,MSG=GC009E)\n      VER(&REORRETR,RANGE,0,255,MSG=GC009F)\n      If (&REORRETR \u00ac= &Z)\n         VER(&REORRETD,RANGE,1,1800,MSG=GC009G)\n      VER(&REORMDBN,NB,MSG=GC009H)\n      VER(&REORMTSP,NB,MSG=GC009H)\n      &REORMXRO = TRANS(TRUNC(&REORMXRO,1) D,DEFER *,*)\n      IF (&REORMXRO \u00ac= DEFER)\n         VER(&REORMXRO,NUM,MSG=GC002)\n      &REORDRAN = TRANS(TRUNC(&REORDRAN,1) W,WRITERS A,ALL *,*)\n         VER(&REORDRAN,LIST,WRITERS,ALL,MSG=GC003)\n      &REORLLOG = TRANS(TRUNC(&REORLLOG,1) C,CONTINUE T,TERM D,DRAIN *,*)\n         VER(&REORLLOG,LIST,CONTINUE,TERM,DRAIN,MSG=GC004)\n      VER(&REORDLAY,NUM)\n      &REORTOUT = TRANS(TRUNC(&REORTOUT,1) A,ABEND T,TERM *,*)\n         VER(&REORTOUT,LIST,ABEND,TERM,MSG=GC004)\n   VER(&REOROFFL,NUM,MSG=GC008)\n   VER(&REORINDR,NUM,MSG=GC008)\n   &REORREPO = TRANS(TRUNC(&REORREPO,1) Y,YES N,NO *,*)\n   VER(&REORREPO,NB,LIST,YES,NO)\n   &REORFSWC = TRANS(TRUNC(&REORFSWC,1) Y,YES N,NO *,*)\n   VER(&REORFSWC,NB,LIST,YES,NO,MSG=GC001)\n   &REORSDAT = TRANS(TRUNC(&REORSDAT,1) Y,YES N,NO *,*)\n   VER(&REORSDAT,NB,LIST,YES,NO,MSG=GC001)\n   &REORSKEY = TRANS(TRUNC(&REORSKEY,1) Y,YES N,NO *,*)\n   VER(&REORSKEY,NB,LIST,YES,NO,MSG=GC001)\n   &REORSTAT = TRANS(TRUNC(&REORSTAT,1) Y,YES N,NO *,*)\n   VER(&REORSTAT,NB,LIST,YES,NO,MSG=GC001)\n   IF (&REORSTAT = YES)\n      &REORUPDT = TRANS(TRUNC(&REORUPDT,2) AL,ALL AC,ACCESSPATH SP,SPACE\n                 NO,NONE *,*)\n      VER(&REORUPDT,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n      &REORHIST = TRANS(TRUNC(&REORHIST,2) AL,ALL AC,ACCESSPATH SP,SPACE\n                 NO,NONE *,*)\n      VER(&REORHIST,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n      IF (&REORUPDT = ACCESSPATH)\n        VER(&REORHIST,LIST,ACCESSPATH,NONE,MSG=GC005)\n      IF (&REORUPDT = SPACE)\n        VER(&REORHIST,LIST,SPACE,NONE,MSG=GC006)\n      IF (&REORUPDT = NONE)\n        VER(&REORHIST,LIST,NONE,MSG=GC007)\n      VER(&REORSPCT,NUM)\n   IF (&REORPDDN \u00ac= '*','/')\n     VER(&REORPDDN,NAME)\n   IF (&REORCDDN \u00ac= '*','/')\n     VER(&REORCDDN,NAME)\n   IF (&REORRDDN \u00ac= '*','/')\n     VER(&REORRDDN,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R072P": {"ttr": 5635, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x12\\x01\\x02&o\\x01\\x02)\\x8f\\x102\\x00\\xa7\\x00I\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2002-09-23T00:00:00", "modifydate": "2002-10-25T10:32:12", "lines": 167, "newlines": 73, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n Y TYPE(CHAR) COLOR(YELLOW) hilite(reverse)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n g TYPE(CHAR)    COLOR(GREEN)\n w TYPE(CHAR)    COLOR(WHITE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Reorg Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter@&OPER1  +from@LIST+option for$SSID+:  Utilid:_REORID  +\n$Z+\n+Tablespace:_REORDBNM+._REORTSPC+Part:_Z   +(optional)\n+Reuse     :_Z  +       !DYNA1,SHAD1     !          +Log:_Z  +!DYNA2,SHAD2 !\n+SHR level :_REORSHRL + !DYNA3,SHAD3                           !\n+            Deadline:_Z      +!DYNA0,SHAD0                                    !\n+            Drain wait:_Z   +  Retry:_Z  +Retry delay:_Z   +\n+            Mappingtable:_REORMDBN+._REORMTSP          +   Maxro:  _Z    +\n+            Drain:_Z      + Longlog:_Z       + Delay:_Z   +Timeout:_Z    +\n+Offposlim :_Z  +(num)  Indreflimit:_Z   +(num)  Reportonly:_Z  +!DYNAA,SHADA !\n+Fastswitch:_Z  +       !DYNA9,SHAD9                           !\n+Sortdata  :_Z  +       !DYNA4,SHAD4                           !\n+Sortkeys  :_Z  +       !DYNA5,SHAD5                           !\n+Statistics:_Z  +       !DYNA8,SHAD8                           !\n+  Update  :_REORUPDT  +!DYNA6,SHAD6                           !\n+  History :_REORHIST  +!DYNA7,SHAD7                           !\n+  Sample  :_Z  +       Numeric percentage (optional)\n+Templates -            For template names: (those marked with%o+are optional)\n+  PunchDDN:_REORPDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n+  CopyDDn :_REORCDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n+  Recovery:_REORRDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n)INIT\n &SID   = &ZSYSID\n &DYNA0 = 'None or Current(with further input to follow)'\n &SHAD0 = 'ybbbbbbbybbbbbbbwwwwwwwwwwwwwwwwwwwwwwwwwwwwb'\n &DYNA1 = 'Yes or No'\n &SHAD1 = 'ybbbbbbyb'\n &DYNA2 = &DYNA1\n &SHAD2 = &SHAD1\n &DYNA3 = 'Change, Reference or None'\n &SHAD3 = 'ybbbbbbbybbbbbbbbbbbbybbb'\n &DYNA4 = &DYNA1\n &SHAD4 = &SHAD1\n &DYNA5 = &DYNA1\n &SHAD5 = &SHAD1\n &DYNA6 = 'ALl, ACcesspath, SPace or NOne'\n &SHAD6 = 'yybbbyybbbbbbbbbbyybbbbbbbyybb'\n &DYNA7 = &DYNA6\n &SHAD7 = &SHAD6\n &DYNA8 = &DYNA1\n &SHAD8 = &SHAD1\n &DYNA9 = &DYNA1\n &SHAD9 = &SHAD1\n &DYNAA = &DYNA1\n &SHADA = &SHAD1\n &GC001 = 'Valid values are specified to the right of the field.'\n &GC002 = 'Valid values are: Defer, numeric integer or blank'\n &GC003 = 'Valid values are: Writers, All or blank'\n &GC004 = 'Valid values are: Continue, Drain, Term or blank'\n &GC005 = 'Combined with value of Update invalid. +\n          Valid values are: ACcesspath, NOne.'\n &GC006 = 'Combined with value of Update invalid. +\n          Valid values are: SPace, NOne.'\n &GC007 = 'Combined with value of Update invalid. +\n          Valid values are: NOne.'\n &GC008 = 'Valid values are numeric integer or blank'\n &GC009D= 'Valid values are: Abend or Term'\n .ZVARS = '( +\n            POPUPMSG +\n            REORPART REORRUSE +\n            REORLOG  REORDEAD +\n            REORDRAW REORRETR REORRETD +\n            REORMXRO REORDRAN REORLLOG REORDLAY REORTOUT +\n            REOROFFL REORINDR REORREPO +\n            REORFSWC REORSDAT REORSKEY +\n            REORSTAT REORSPCT +\n           )'\n\n)REINIT\nREFRESH(REORUPDT,REORHIST,REORRUSE,REORSHRL,REORSDAT,REORSKEY,REORREPO,\n        REORDEAD,REORMXRO,REORDRAN,REORLLOG,REORDLAY,REORTOUT)\n)PROC\n&XXX = TRUNC(&ZCMD,3)\nIF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&REORID,NB)\n   VER(&REORDBNM,NB,NAME)\n   VER(&REORTSPC,NB,NAME)\n   IF (&REORPART \u00ac= &Z)\n     VER(&REORPART,NUM)\n   &REORRUSE = TRANS(TRUNC(&REORRUSE,1) Y,YES N,NO *,*)\n   VER(&REORRUSE,LIST,YES,NO,MSG=GC001)\n   &REORLOG  = TRANS(TRUNC(&REORLOG,1) Y,YES N,NO *,*)\n   VER(&REORLOG,NB,LIST,NO,YES,MSG=GC001)\n   &REORSHRL  = TRANS(TRUNC(&REORSHRL,1) N,NONE C,CHANGE R,REFERENCE *,*)\n   VER(&REORSHRL,NB,LIST,NONE,CHANGE,REFERENCE,MSG=GC001)\n   IF (&REORSHRL = CHANGE,REFERENCE)\n      &X1    = 'For SHR level &REORSHRL, valid'\n      &GC008 = '&X1 values are: None or Current'\n      &REORDEAD = TRANS(TRUNC(&REORDEAD,1) C,CURRENT N,NONE *,*)\n      VER(&REORDEAD,NB,LIST,CURRENT,NONE,MSG=GC008)\n      &X2    = 'For Deadline \"&REORDEAD\", valid'\n      &GC009 = '&X2 values are: Timestamp or Date'\n      &GC009A= '&X2 values are: ''+'' or ''-''.'\n      &GC009B= '&X2 values are: Years, MONths, Days, Hours, MINutes, +\n                           Seconds or MICroseconds'\n      &GC009C= 'For Deadline &REORDEAD, must be non-blank numeric'\n   IF (&REORSHRL = CHANGE)\n      &GC009E= 'For SHR level CHANGE, must be in the range 0-1800'\n      &GC009F= 'For SHR level CHANGE, must be in the range 0-255'\n      &GC009G= 'For SHR level CHANGE, must be in the range 1-1800'\n      &GC009H= 'For SHR level CHANGE, must define Mappingtable'\n      VER(&REORDRAW,RANGE,0,1800,MSG=GC009E)\n      VER(&REORRETR,RANGE,0,255,MSG=GC009F)\n      If (&REORRETR \u00ac= &Z)\n         VER(&REORRETD,RANGE,1,1800,MSG=GC009G)\n      VER(&REORMDBN,NB,MSG=GC009H)\n      VER(&REORMTSP,NB,MSG=GC009H)\n      &REORMXRO = TRANS(TRUNC(&REORMXRO,1) D,DEFER *,*)\n      IF (&REORMXRO \u00ac= DEFER)\n         VER(&REORMXRO,NUM,MSG=GC002)\n      &REORDRAN = TRANS(TRUNC(&REORDRAN,1) W,WRITERS A,ALL *,*)\n         VER(&REORDRAN,LIST,WRITERS,ALL,MSG=GC003)\n      &REORLLOG = TRANS(TRUNC(&REORLLOG,1) C,CONTINUE T,TERM D,DRAIN *,*)\n         VER(&REORLLOG,LIST,CONTINUE,TERM,DRAIN,MSG=GC004)\n      VER(&REORDLAY,NUM)\n      &REORTOUT = TRANS(TRUNC(&REORTOUT,1) A,ABEND T,TERM *,*)\n         VER(&REORTOUT,LIST,ABEND,TERM,MSG=GC004)\n   VER(&REOROFFL,NUM,MSG=GC008)\n   VER(&REORINDR,NUM,MSG=GC008)\n   &REORREPO = TRANS(TRUNC(&REORREPO,1) Y,YES N,NO *,*)\n   VER(&REORREPO,NB,LIST,YES,NO)\n   &REORFSWC = TRANS(TRUNC(&REORFSWC,1) Y,YES N,NO *,*)\n   VER(&REORFSWC,NB,LIST,YES,NO,MSG=GC001)\n   &REORSDAT = TRANS(TRUNC(&REORSDAT,1) Y,YES N,NO *,*)\n   VER(&REORSDAT,NB,LIST,YES,NO,MSG=GC001)\n   &REORSKEY = TRANS(TRUNC(&REORSKEY,1) Y,YES N,NO *,*)\n   VER(&REORSKEY,NB,LIST,YES,NO,MSG=GC001)\n   &REORSTAT = TRANS(TRUNC(&REORSTAT,1) Y,YES N,NO *,*)\n   VER(&REORSTAT,NB,LIST,YES,NO,MSG=GC001)\n   IF (&REORSTAT = YES)\n      &REORUPDT = TRANS(TRUNC(&REORUPDT,2) AL,ALL AC,ACCESSPATH SP,SPACE\n                 NO,NONE *,*)\n      VER(&REORUPDT,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n      &REORHIST = TRANS(TRUNC(&REORHIST,2) AL,ALL AC,ACCESSPATH SP,SPACE\n                 NO,NONE *,*)\n      VER(&REORHIST,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n      IF (&REORUPDT = ACCESSPATH)\n        VER(&REORHIST,LIST,ACCESSPATH,NONE,MSG=GC005)\n      IF (&REORUPDT = SPACE)\n        VER(&REORHIST,LIST,SPACE,NONE,MSG=GC006)\n      IF (&REORUPDT = NONE)\n        VER(&REORHIST,LIST,NONE,MSG=GC007)\n      VER(&REORSPCT,NUM)\n   IF (&REORPDDN \u00ac= '*','/')\n     VER(&REORPDDN,NAME)\n   IF (&REORCDDN \u00ac= '*','/')\n     VER(&REORCDDN,NAME)\n   IF (&REORRDDN \u00ac= '*','/')\n     VER(&REORRDDN,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R073P": {"ttr": 5637, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00H\\x01\\x02(?\\x01\\x020O\\x17\\t\\x00\\x98\\x00\\xa7\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2002-10-10T00:00:00", "modifydate": "2002-10-31T17:09:48", "lines": 152, "newlines": 167, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n Y TYPE(CHAR) COLOR(YELLOW) hilite(reverse)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n g TYPE(CHAR)    COLOR(GREEN)\n w TYPE(CHAR)    COLOR(WHITE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Reorg Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter@&OPER1  +from@LIST+option for$SSID+:  Utilid:_REORID  +\n$Z+\n+Listname  :_REORLDEF+  Enter name,@*+for list or@/+to create/modify list.\n+Reuse     :_Z  +       !DYNA1,SHAD1     !          +Log:_Z  +!DYNA2,SHAD2 !\n+SHR level :_REORSHRL + !DYNA3,SHAD3                           !\n+            Deadline:_Z      +!DYNA0,SHAD0                                    !\n+            Drain wait:_Z   +  Retry:_Z  +Retry delay:_Z   +\n+Leafdistlimit:_Z   +(num)  Reportonly:_Z  +!DYNAA,SHADA !\n+Fastswitch:_Z  +       !DYNA9,SHAD9                           !\n+Sortdata  :_Z  +       !DYNA4,SHAD4                           !\n+Sortkeys  :_Z  +       !DYNA5,SHAD5                           !\n+Statistics:_Z  +       !DYNA8,SHAD8                           !\n+  Update  :_REORUPDT  +!DYNA6,SHAD6                           !\n+  History :_REORHIST  +!DYNA7,SHAD7                           !\n+  Sample  :_Z  +       Numeric percentage (optional)\n+Templates -            For template names: (those marked with%o+are optional)\n+  PunchDDN:_REORPDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n+  CopyDDn :_REORCDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n+  Recovery:_REORRDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n)INIT\n &SID   = &ZSYSID\n &DYNA0 = 'None or Current(with further input to follow)'\n &SHAD0 = 'ybbbbbbbybbbbbbbwwwwwwwwwwwwwwwwwwwwwwwwwwwwb'\n &DYNA1 = 'Yes or No'\n &SHAD1 = 'ybbbbbbyb'\n &DYNA2 = &DYNA1\n &SHAD2 = &SHAD1\n &DYNA3 = 'Change, Reference or None'\n &SHAD3 = 'ybbbbbbbybbbbbbbbbbbbybbb'\n &DYNA4 = &DYNA1\n &SHAD4 = &SHAD1\n &DYNA5 = &DYNA1\n &SHAD5 = &SHAD1\n &DYNA6 = 'ALl, ACcesspath, SPace or NOne'\n &SHAD6 = 'yybbbyybbbbbbbbbbyybbbbbbbyybb'\n &DYNA7 = &DYNA6\n &SHAD7 = &SHAD6\n &DYNA8 = &DYNA1\n &SHAD8 = &SHAD1\n &DYNA9 = &DYNA1\n &SHAD9 = &SHAD1\n &DYNAA = &DYNA1\n &SHADA = &SHAD1\n &GC001 = 'Valid values are specified to the right of the field.'\n &GC002 = 'Valid values are: Defer, numeric integer or blank'\n &GC003 = 'Valid values are: Writers, All or blank'\n &GC004 = 'Valid values are: Continue, Drain, Term or blank'\n &GC005 = 'Combined with value of Update invalid. +\n          Valid values are: ACcesspath, NOne.'\n &GC006 = 'Combined with value of Update invalid. +\n          Valid values are: SPace, NOne.'\n &GC007 = 'Combined with value of Update invalid. +\n          Valid values are: NOne.'\n &GC008 = 'Valid values are numeric integer or blank'\n &GC009D= 'Valid values are: Abend or Term'\n .ZVARS = '( +\n            POPUPMSG +\n            REORRUSE REORLOG +\n            REORDEAD +\n            REORDRAW REORRETR REORRETD +\n            REORLEAF REORREPO +\n            REORFSWC REORSDAT REORSKEY +\n            REORSTAT REORSPCT +\n           )'\n IF (&UTILLIB = &Z)\n    .ATTR (REORID)   = 'TYPE(OUTPUT) INTENS(NON)'\n    .ATTR (REORLDEF) = 'TYPE(OUTPUT) INTENS(NON)'\n\n)REINIT\nREFRESH(REORUPDT,REORHIST,REORRUSE,REORSHRL,REORSDAT,REORSKEY,REORREPO,\n        REORDEAD,REORFSWC)\n)PROC\n&XXX = TRUNC(&ZCMD,3)\nIF (&XXX \u00ac= DEB,DEF,'?')\n   IF (&UTILLIB \u00ac= &Z) VER(&REORID,NB)\n IF (&REORLDEF \u00ac= '*','/')\n   IF (&UTILLIB \u00ac= &Z) VER(&REORLDEF,NB,NAME)\n   &REORRUSE = TRANS(TRUNC(&REORRUSE,1) Y,YES N,NO *,*)\n   VER(&REORRUSE,LIST,YES,NO,MSG=GC001)\n   &REORLOG  = TRANS(TRUNC(&REORLOG,1) Y,YES N,NO *,*)\n   VER(&REORLOG,NB,LIST,NO,YES,MSG=GC001)\n   &REORSHRL  = TRANS(TRUNC(&REORSHRL,1) N,NONE C,CHANGE R,REFERENCE *,*)\n   VER(&REORSHRL,NB,LIST,NONE,CHANGE,REFERENCE,MSG=GC001)\n   IF (&REORSHRL = CHANGE,REFERENCE)\n      &X1    = 'For SHR level &REORSHRL, valid'\n      &GC008 = '&X1 values are: None or Current'\n      &REORDEAD = TRANS(TRUNC(&REORDEAD,1) C,CURRENT N,NONE *,*)\n      VER(&REORDEAD,NB,LIST,CURRENT,NONE,MSG=GC008)\n      &X2    = 'For Deadline \"&REORDEAD\", valid'\n      &GC009 = '&X2 values are: Timestamp or Date'\n      &GC009A= '&X2 values are: ''+'' or ''-''.'\n      &GC009B= '&X2 values are: Years, MONths, Days, Hours, MINutes, +\n                           Seconds or MICroseconds'\n      &GC009C= 'For Deadline &REORDEAD, must be non-blank numeric'\n   IF (&REORSHRL = CHANGE)\n      &GC009E= 'For SHR level CHANGE, must be in the range 0-1800'\n      &GC009F= 'For SHR level CHANGE, must be in the range 0-255'\n      &GC009G= 'For SHR level CHANGE, must be in the range 1-1800'\n      &GC009H= 'For SHR level CHANGE, must define Mappingtable'\n      VER(&REORDRAW,RANGE,0,1800,MSG=GC009E)\n      VER(&REORRETR,RANGE,0,255,MSG=GC009F)\n      If (&REORRETR \u00ac= &Z)\n         VER(&REORRETD,RANGE,1,1800,MSG=GC009G)\n   VER(&REORLEAF,NUM,MSG=GC008)\n   &REORREPO = TRANS(TRUNC(&REORREPO,1) Y,YES N,NO *,*)\n   VER(&REORREPO,NB,LIST,YES,NO)\n   &REORFSWC = TRANS(TRUNC(&REORFSWC,1) Y,YES N,NO *,*)\n   VER(&REORFSWC,NB,LIST,YES,NO,MSG=GC001)\n   &REORSDAT = TRANS(TRUNC(&REORSDAT,1) Y,YES N,NO *,*)\n   VER(&REORSDAT,NB,LIST,YES,NO,MSG=GC001)\n   &REORSKEY = TRANS(TRUNC(&REORSKEY,1) Y,YES N,NO *,*)\n   VER(&REORSKEY,NB,LIST,YES,NO,MSG=GC001)\n   &REORSTAT = TRANS(TRUNC(&REORSTAT,1) Y,YES N,NO *,*)\n   VER(&REORSTAT,NB,LIST,YES,NO,MSG=GC001)\n   IF (&REORSTAT = YES)\n      &REORUPDT = TRANS(TRUNC(&REORUPDT,2) AL,ALL AC,ACCESSPATH SP,SPACE\n                 NO,NONE *,*)\n      VER(&REORUPDT,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n      &REORHIST = TRANS(TRUNC(&REORHIST,2) AL,ALL AC,ACCESSPATH SP,SPACE\n                 NO,NONE *,*)\n      VER(&REORHIST,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n      IF (&REORUPDT = ACCESSPATH)\n        VER(&REORHIST,LIST,ACCESSPATH,NONE,MSG=GC005)\n      IF (&REORUPDT = SPACE)\n        VER(&REORHIST,LIST,SPACE,NONE,MSG=GC006)\n      IF (&REORUPDT = NONE)\n        VER(&REORHIST,LIST,NONE,MSG=GC007)\n      VER(&REORSPCT,NUM)\n   IF (&REORPDDN \u00ac= '*','/')\n     VER(&REORPDDN,NAME)\n   IF (&REORCDDN \u00ac= '*','/')\n     VER(&REORCDDN,NAME)\n   IF (&REORRDDN \u00ac= '*','/')\n     VER(&REORRDDN,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R074P": {"ttr": 5639, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x04\\x01\\x02(?\\x01\\x02)\\x8f\\x103\\x00\\x98\\x00\\xa9\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-10-10T00:00:00", "modifydate": "2002-10-25T10:33:04", "lines": 152, "newlines": 169, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n Y TYPE(CHAR) COLOR(YELLOW) hilite(reverse)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n g TYPE(CHAR)    COLOR(GREEN)\n w TYPE(CHAR)    COLOR(WHITE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Reorg Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter@&OPER1  +from@LIST+option for$SSID+:  Utilid:_REORID  +\n$Z+\n+Tablespace:_REORCREA+._REORINDX+Part:_Z   +(optional)\n+Reuse     :_Z  +       !DYNA1,SHAD1     !          +Log:_Z  +!DYNA2,SHAD2 !\n+SHR level :_REORSHRL + !DYNA3,SHAD3                           !\n+            Deadline:_Z      +!DYNA0,SHAD0                                    !\n+            Drain wait:_Z   +  Retry:_Z  +Retry delay:_Z   +\n+Leafdistlimit:_Z   +(num)  Reportonly:_Z  +!DYNAA,SHADA !\n+Fastswitch:_Z  +       !DYNA9,SHAD9                           !\n+Sortdata  :_Z  +       !DYNA4,SHAD4                           !\n+Sortkeys  :_Z  +       !DYNA5,SHAD5                           !\n+Statistics:_Z  +       !DYNA8,SHAD8                           !\n+  Update  :_REORUPDT  +!DYNA6,SHAD6                           !\n+  History :_REORHIST  +!DYNA7,SHAD7                           !\n+  Sample  :_Z  +       Numeric percentage (optional)\n+Templates -            For template names: (those marked with%o+are optional)\n+  PunchDDN:_REORPDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n+  CopyDDn :_REORCDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n+  Recovery:_REORRDDN+ %o+Enter name,@*+for list or@/+to create/modify template.\n)INIT\n &SID   = &ZSYSID\n &DYNA0 = 'None or Current(with further input to follow)'\n &SHAD0 = 'ybbbbbbbybbbbbbbwwwwwwwwwwwwwwwwwwwwwwwwwwwwb'\n &DYNA1 = 'Yes or No'\n &SHAD1 = 'ybbbbbbyb'\n &DYNA2 = &DYNA1\n &SHAD2 = &SHAD1\n &DYNA3 = 'Change, Reference or None'\n &SHAD3 = 'ybbbbbbbybbbbbbbbbbbbybbb'\n &DYNA4 = &DYNA1\n &SHAD4 = &SHAD1\n &DYNA5 = &DYNA1\n &SHAD5 = &SHAD1\n &DYNA6 = 'ALl, ACcesspath, SPace or NOne'\n &SHAD6 = 'yybbbyybbbbbbbbbbyybbbbbbbyybb'\n &DYNA7 = &DYNA6\n &SHAD7 = &SHAD6\n &DYNA8 = &DYNA1\n &SHAD8 = &SHAD1\n &DYNA9 = &DYNA1\n &SHAD9 = &SHAD1\n &DYNAA = &DYNA1\n &SHADA = &SHAD1\n &GC001 = 'Valid values are specified to the right of the field.'\n &GC002 = 'Valid values are: Defer, numeric integer or blank'\n &GC003 = 'Valid values are: Writers, All or blank'\n &GC004 = 'Valid values are: Continue, Drain, Term or blank'\n &GC005 = 'Combined with value of Update invalid. +\n          Valid values are: ACcesspath, NOne.'\n &GC006 = 'Combined with value of Update invalid. +\n          Valid values are: SPace, NOne.'\n &GC007 = 'Combined with value of Update invalid. +\n          Valid values are: NOne.'\n &GC008 = 'Valid values are numeric integer or blank'\n &GC009D= 'Valid values are: Abend or Term'\n .ZVARS = '( +\n            POPUPMSG +\n            REORPART +\n            REORRUSE REORLOG +\n            REORDEAD +\n            REORDRAW REORRETR REORRETD +\n            REORLEAF REORREPO +\n            REORFSWC REORSDAT REORSKEY +\n            REORSTAT REORSPCT +\n           )'\n\n)REINIT\nREFRESH(REORUPDT,REORHIST,REORRUSE,REORSHRL,REORSDAT,REORSKEY,REORREPO,\n        REORDEAD,REORFSWC)\n)PROC\n&XXX = TRUNC(&ZCMD,3)\nIF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&REORID,NB)\n   VER(&REORCREA,NB,NAME)\n   VER(&REORINDX,NB,NAME)\n   IF (&REORPART \u00ac= &Z)\n     VER(&REORPART,NUM)\n   &REORRUSE = TRANS(TRUNC(&REORRUSE,1) Y,YES N,NO *,*)\n   VER(&REORRUSE,LIST,YES,NO,MSG=GC001)\n   &REORLOG  = TRANS(TRUNC(&REORLOG,1) Y,YES N,NO *,*)\n   VER(&REORLOG,NB,LIST,NO,YES,MSG=GC001)\n   &REORSHRL  = TRANS(TRUNC(&REORSHRL,1) N,NONE C,CHANGE R,REFERENCE *,*)\n   VER(&REORSHRL,NB,LIST,NONE,CHANGE,REFERENCE,MSG=GC001)\n   IF (&REORSHRL = CHANGE,REFERENCE)\n      &X1    = 'For SHR level &REORSHRL, valid'\n      &GC008 = '&X1 values are: None or Current'\n      &REORDEAD = TRANS(TRUNC(&REORDEAD,1) C,CURRENT N,NONE *,*)\n      VER(&REORDEAD,NB,LIST,CURRENT,NONE,MSG=GC008)\n      &X2    = 'For Deadline \"&REORDEAD\", valid'\n      &GC009 = '&X2 values are: Timestamp or Date'\n      &GC009A= '&X2 values are: ''+'' or ''-''.'\n      &GC009B= '&X2 values are: Years, MONths, Days, Hours, MINutes, +\n                           Seconds or MICroseconds'\n      &GC009C= 'For Deadline &REORDEAD, must be non-blank numeric'\n   IF (&REORSHRL = CHANGE)\n      &GC009E= 'For SHR level CHANGE, must be in the range 0-1800'\n      &GC009F= 'For SHR level CHANGE, must be in the range 0-255'\n      &GC009G= 'For SHR level CHANGE, must be in the range 1-1800'\n      &GC009H= 'For SHR level CHANGE, must define Mappingtable'\n      VER(&REORDRAW,RANGE,0,1800,MSG=GC009E)\n      VER(&REORRETR,RANGE,0,255,MSG=GC009F)\n      If (&REORRETR \u00ac= &Z)\n         VER(&REORRETD,RANGE,1,1800,MSG=GC009G)\n   VER(&REORLEAF,NUM,MSG=GC008)\n   &REORREPO = TRANS(TRUNC(&REORREPO,1) Y,YES N,NO *,*)\n   VER(&REORREPO,NB,LIST,YES,NO)\n   &REORFSWC = TRANS(TRUNC(&REORFSWC,1) Y,YES N,NO *,*)\n   VER(&REORFSWC,NB,LIST,YES,NO,MSG=GC001)\n   &REORSDAT = TRANS(TRUNC(&REORSDAT,1) Y,YES N,NO *,*)\n   VER(&REORSDAT,NB,LIST,YES,NO,MSG=GC001)\n   &REORSKEY = TRANS(TRUNC(&REORSKEY,1) Y,YES N,NO *,*)\n   VER(&REORSKEY,NB,LIST,YES,NO,MSG=GC001)\n   &REORSTAT = TRANS(TRUNC(&REORSTAT,1) Y,YES N,NO *,*)\n   VER(&REORSTAT,NB,LIST,YES,NO,MSG=GC001)\n   IF (&REORSTAT = YES)\n      &REORUPDT = TRANS(TRUNC(&REORUPDT,2) AL,ALL AC,ACCESSPATH SP,SPACE\n                 NO,NONE *,*)\n      VER(&REORUPDT,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n      &REORHIST = TRANS(TRUNC(&REORHIST,2) AL,ALL AC,ACCESSPATH SP,SPACE\n                 NO,NONE *,*)\n      VER(&REORHIST,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n      IF (&REORUPDT = ACCESSPATH)\n        VER(&REORHIST,LIST,ACCESSPATH,NONE,MSG=GC005)\n      IF (&REORUPDT = SPACE)\n        VER(&REORHIST,LIST,SPACE,NONE,MSG=GC006)\n      IF (&REORUPDT = NONE)\n        VER(&REORHIST,LIST,NONE,MSG=GC007)\n      VER(&REORSPCT,NUM)\n   IF (&REORPDDN \u00ac= '*','/')\n     VER(&REORPDDN,NAME)\n   IF (&REORCDDN \u00ac= '*','/')\n     VER(&REORCDDN,NAME)\n   IF (&REORRDDN \u00ac= '*','/')\n     VER(&REORRDDN,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R075P": {"ttr": 5889, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x01\\x02(?\\x01\\x02(?\\x17\\x10\\x00\\x89\\x00\\xa7\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-10-10T00:00:00", "modifydate": "2002-10-10T17:10:20", "lines": 137, "newlines": 167, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n Y TYPE(CHAR) COLOR(YELLOW) hilite(reverse)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) WINDOW(40,18) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&SID@===>_ZCMD\n@\n+Enter support parameters for\n+SHR level of@CHANGE+and\n+Dealine of@CURRENT+:_REORCURT +\n$Z+\n Sign Value  Duration\n _Z+  _Z   +_REORDUR1    +\n _Z+  _Z   +_REORDUR2    +\n _Z+  _Z   +_REORDUR3    +\n _Z+  _Z   +_REORDUR4    +\n _Z+  _Z   +_REORDUR5    +\n _Z+  _Z   +_REORDUR6    +\n _Z+  _Z   +_REORDUR7    +\n)INIT\n &SID   = &ZSYSID\n &GC001 = 'Valid values are: Timestamp or Date.'\n &GC002 = 'Valid values are: ''+'' or ''-''.'\n &GC003 = 'If sign entered must be non-blank numeric.'\n &GC004 = 'If sign entered must be one of the following: +\n           Years, MONths, Days, Hours, MINutes, +\n           Seconds or MICroseconds.'\n .ZVARS = '( +\n            POPUPMSG +\n            REORSIG1 REORVAL1 +\n            REORSIG2 REORVAL2 +\n            REORSIG3 REORVAL3 +\n            REORSIG4 REORVAL4 +\n            REORSIG5 REORVAL5 +\n            REORSIG6 REORVAL6 +\n            REORSIG7 REORVAL7 +\n           )'\n\n)REINIT\nREFRESH(REORDUR1,REORDUR2,REORDUR3,REORDUR4,REORDUR5,REORDUR6,REORDUR7)\n)PROC\n&XXX = TRUNC(&ZCMD,3)\nIF (&XXX \u00ac= DEB,DEF,'?')\n   &REORCURT = TRANS(TRUNC(&REORCURT,1) T,TIMESTAMP D,DATE *,*)\n   VER(&REORCURT,NB,LIST,TIMESTAMP,DATE,MSG=GC001)\n   IF (&REORSIG1 \u00ac= &Z)\n      VER(&REORSIG1,LIST,'+','-',MSG=GC002)\n      VER(&REORVAL1,NB,NUM,MSG=GC003)\n      &REORDUR1 = TRUNC(&REORDUR1,3)\n      If (&REORDUR1 = MIC,MIN,MON)\n         &REORDUR1 = TRANS(&REORDUR1 MON,MONTHS MIN,MINUTES\n                     MIC,MICROSECONDS *,*)\n      ELSE\n         &REORDUR1 = TRANS(TRUNC(&REORDUR1,1) Y,YEARS D,DAYS\n                     H,HOURS S,SECONDS *,*)\n      VER(&REORDUR1,NB,LIST,YEARS,MONTHS,DAYS,HOURS,MINUTES,\n          SECONDS,MICROSECONDS,MSG=GC004)\n   IF (&REORSIG2 \u00ac= &Z)\n      VER(&REORSIG2,LIST,'+','-',MSG=GC002)\n      VER(&REORVAL2,NB,NUM,MSG=GC003)\n      &REORDUR2 = TRUNC(&REORDUR2,3)\n      If (&REORDUR2 = MIC,MIN,MON)\n         &REORDUR2 = TRANS(&REORDUR2 MON,MONTHS MIN,MINUTES\n                     MIC,MICROSECONDS *,*)\n      ELSE\n         &REORDUR2 = TRANS(TRUNC(&REORDUR2,1) Y,YEARS D,DAYS\n                     H,HOURS S,SECONDS *,*)\n      VER(&REORDUR2,NB,LIST,YEARS,MONTHS,DAYS,HOURS,MINUTES,\n          SECONDS,MICROSECONDS,MSG=GC004)\n   IF (&REORSIG3 \u00ac= &Z)\n      VER(&REORSIG3,LIST,'+','-',MSG=GC002)\n      VER(&REORVAL3,NB,NUM,MSG=GC003)\n      &REORDUR3 = TRUNC(&REORDUR3,3)\n      If (&REORDUR3 = MIC,MIN,MON)\n         &REORDUR3 = TRANS(&REORDUR3 MON,MONTHS MIN,MINUTES\n                     MIC,MICROSECONDS *,*)\n      ELSE\n         &REORDUR3 = TRANS(TRUNC(&REORDUR3,1) Y,YEARS D,DAYS\n                     H,HOURS S,SECONDS *,*)\n      VER(&REORDUR3,NB,LIST,YEARS,MONTHS,DAYS,HOURS,MINUTES,\n          SECONDS,MICROSECONDS,MSG=GC004)\n   IF (&REORSIG4 \u00ac= &Z)\n      VER(&REORSIG4,LIST,'+','-',MSG=GC002)\n      VER(&REORVAL4,NB,NUM,MSG=GC003)\n      &REORDUR4 = TRUNC(&REORDUR4,3)\n      If (&REORDUR4 = MIC,MIN,MON)\n         &REORDUR4 = TRANS(&REORDUR4 MON,MONTHS MIN,MINUTES\n                     MIC,MICROSECONDS *,*)\n      ELSE\n         &REORDUR4 = TRANS(TRUNC(&REORDUR4,1) Y,YEARS D,DAYS\n                     H,HOURS S,SECONDS *,*)\n      VER(&REORDUR4,NB,LIST,YEARS,MONTHS,DAYS,HOURS,MINUTES,\n          SECONDS,MICROSECONDS,MSG=GC004)\n   IF (&REORSIG5 \u00ac= &Z)\n      VER(&REORSIG5,LIST,'+','-',MSG=GC002)\n      VER(&REORVAL5,NB,NUM,MSG=GC003)\n      &REORDUR5 = TRUNC(&REORDUR5,3)\n      If (&REORDUR5 = MIC,MIN,MON)\n         &REORDUR5 = TRANS(&REORDUR5 MON,MONTHS MIN,MINUTES\n                     MIC,MICROSECONDS *,*)\n      ELSE\n         &REORDUR5 = TRANS(TRUNC(&REORDUR5,1) Y,YEARS D,DAYS\n                     H,HOURS S,SECONDS *,*)\n      VER(&REORDUR5,NB,LIST,YEARS,MONTHS,DAYS,HOURS,MINUTES,\n          SECONDS,MICROSECONDS,MSG=GC004)\n   IF (&REORSIG6 \u00ac= &Z)\n      VER(&REORSIG6,LIST,'+','-',MSG=GC002)\n      VER(&REORVAL6,NB,NUM,MSG=GC003)\n      &REORDUR6 = TRUNC(&REORDUR6,3)\n      If (&REORDUR6 = MIC,MIN,MON)\n         &REORDUR6 = TRANS(&REORDUR6 MON,MONTHS MIN,MINUTES\n                     MIC,MICROSECONDS *,*)\n      ELSE\n         &REORDUR6 = TRANS(TRUNC(&REORDUR6,1) Y,YEARS D,DAYS\n                     H,HOURS S,SECONDS *,*)\n      VER(&REORDUR6,NB,LIST,YEARS,MONTHS,DAYS,HOURS,MINUTES,\n          SECONDS,MICROSECONDS,MSG=GC004)\n   IF (&REORSIG7 \u00ac= &Z)\n      VER(&REORSIG7,LIST,'+','-',MSG=GC002)\n      VER(&REORVAL7,NB,NUM,MSG=GC003)\n      &REORDUR7 = TRUNC(&REORDUR7,3)\n      If (&REORDUR7 = MIC,MIN,MON)\n         &REORDUR7 = TRANS(&REORDUR7 MON,MONTHS MIN,MINUTES\n                     MIC,MICROSECONDS *,*)\n      ELSE\n         &REORDUR7 = TRANS(TRUNC(&REORDUR7,1) Y,YEARS D,DAYS\n                     H,HOURS S,SECONDS *,*)\n      VER(&REORDUR7,NB,LIST,YEARS,MONTHS,DAYS,HOURS,MINUTES,\n          SECONDS,MICROSECONDS,MSG=GC004)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R080P": {"ttr": 5891, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x08\\x00#\\x01\\x02'?\\x01\\x02)\\x8f\\x103\\x00M\\x00-\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@\"", "ispf": {"version": "01.08", "flags": 0, "createdate": "2002-09-30T00:00:00", "modifydate": "2002-10-25T10:33:23", "lines": 77, "newlines": 45, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n Y TYPE(CHAR) COLOR(YELLOW) hilite(reverse)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Check Data Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter@&OPER1  +from@TABLESPACE+option for$SSID+: Utilid:_CHKDID  +\n+\n+Tablespace:_CHKDDBNM+._CHKDTSPC+Part:_Z   +(optional)\n+Scope     :_Z      +   !DYNA1,SHAD1                           !\n+Auxerror  :_CHKDAUXE  +!DYNA2,SHAD2                           !\n+Delete    :_Z  +       !DYNA3,SHAD3                           !\n+Log       :_Z  +       !DYNA4,SHAD4                           !\n+Exceptions:_Z  +       !DYNA5,SHAD5                           !\n+ERRDDN    :_CHKDEDDN+  Enter name,@*+for list or@/+to create/modify template.\n+WORKDDN   :_CHKDWDDN+  Enter name,@*+for list or@/+to create/modify template.\n+Sortdevt  :_CHKDDEVT+  Enter valid device type (or@*+for a selection list).\n+Sortnum   :_Z +        !DYNA6,SHAD6                           !\n?Z+\n)INIT\n &SID   = &ZSYSID\n &DYNA1 = 'ALl, AUxonly, PEnding or REfonly'\n &SHAD1 = 'yybbbyybbbbbbbyybbbbbbbbbyybbbbb'\n &DYNA2 = 'Invalidate or Report'\n &SHAD2 = 'ybbbbbbbbbbbbbybbbbb'\n &DYNA3 = 'Yes or No'\n &SHAD3 = 'ybbbbbbyb'\n &DYNA4 = &DYNA3\n &SHAD4 = &SHAD3\n &DYNA5 = 'Numeric or  (blank)'\n &SHAD5 = 'bbbbbbbbbbbYbbbbbbb'\n &DYNA6 = &DYNA5\n &SHAD6 = &SHAD5\n .ZVARS = '( +\n            CHKDPART +\n            CHKDSCOP CHKDDELT CHKDLOG CHKDEXCP +\n            CHKDSRTN +\n            POPUPMSG +\n           )'\n\n &GC001 = 'Valid values are specified to the right of the field.'\n &GC002 = 'Combined with value of Delete invalid. +\n          Valid values are: Yes or No.'\n)REINIT\n REFRESH(CHKDSCOP,CHKDAUXE,CHKDDELT,CHKDLOG)\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&CHKDID,NB)\n   VER(&CHKDDBNM,NB,NAME)\n   VER(&CHKDTSPC,NB)\n   VER(&CHKDPART,NUM)\n   &CHKDSCOP = TRANS(TRUNC(&CHKDSCOP,2) AL,ALL AU,AUXONLY PE,PENDING\n               RE,REFONLY *,*)\n   VER(&CHKDSCOP,LIST,ALL,AUXONLY,PENDING,REFONLY,MSG=GC001)\n   &CHKDAUXE = TRANS(TRUNC(&CHKDAUXE,1) I,INVALIDATE R,REPORT *,*)\n   VER(&CHKDAUXE,LIST,INVALIDATE,REPORT,MSG=GC001)\n   &CHKDDELT = TRANS(TRUNC(&CHKDDELT,1) Y,YES N,NO *,*)\n   VER(&CHKDDELT,LIST,YES,NO,MSG=GC001)\n   IF (&CHKDDELT = YES)\n      &CHKDLOG = TRANS(TRUNC(&CHKDLOG,1) Y,YES N,NO *,*)\n      VER(&CHKDLOG,LIST,YES,NO,MSG=GC002)\n   IF (&CHKDWDDN \u00ac= '*','/')\n     VER(&CHKDWDDN,NB,NAME)\n   IF (&CHKDDEVT \u00ac= '*')\n     VER(&CHKDDEVT,NB)\n   VER(&CHKDSRTN,NUM)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R090P": {"ttr": 5893, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00\\x19\\x01\\x02\\x18_\\x01\\x02(/\\x14F\\x00!\\x00`\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "2002-07-04T00:00:00", "modifydate": "2002-10-09T14:46:19", "lines": 33, "newlines": 96, "modlines": 0, "user": "C838704"}, "text": ")ATTR  DEFAULT(%+_)\n @ TYPE(TEXT) INTENS(high) COLOR(yellow) SKIP(ON)\n ` TYPE(TEXT) INTENS(LOW) COLOR(GREEN) SKIP(ON)\n \u00ac TYPE(OUTPUT) SKIP(ON) INTENS(LOW) CAPS(ON) JUST(RIGHT)\n [ TYPE(OUTPUT) SKIP(ON) INTENS(LOW) caps(OFF)\n ~ TYPE(OUTPUT) SKIP(ON) INTENS(LOW) CAPS(ON)\n # TYPE(OUTPUT) INTENS(HIGH) COLOR(GREEN)\n ? TYPE(OUTPUT) INTENS(NON)\n _ TYPE(INPUT) COLOR(RED) HILITE(USCORE) CAPS(ON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME-DB2 memeber select - &IFILE \\-\\\n@&SID@===>_ZCMD                                               `Scroll ===>_AMT +\n%\n+!DYNA1,SHAD1                                                         !\n?Z+ Name    [PMSG          + Created   Last modified   Size  Init   Mod   Id\n)MODEL\n_Z ~MEMBER  #Z              ~Z        ~Z       ~Z    \u00acZ    \u00acZ    \u00acZ    ~Z\n)INIT\n  &DYNA1 = 'Enter B(rowse), E(dit), V(iew) or S(elect member for use)'\n  &SHAD1 = 'ybbbbbybbbbbbbbbybbbbbbbybbbbbbbbbybbbbbbbbbbbbbbbbbbbbbb'\n  &SID = &ZSYSID\n  .ZVARS = '(POPUPMSG SEL TTY ZLCDATE ZLMDATE +\n            ZLMTIME ZLCNORC ZLINORC ZLMNORC ZLUSER)'\n  &XAMT = TRANS(TRUNC(&AMT,1) H,HALF P,PAGE C,CSR D,DATA *,*)\n  IF (&XAMT = HALF,PAGE,CSR,DATA) &AMT = &XAMT\n)PROC\n  &XAMT = TRANS(TRUNC(&AMT,1) H,HALF P,PAGE C,CSR D,DATA *,*)\n  IF (&XAMT = HALF,PAGE,CSR,DATA) &AMT = &XAMT\n  VER(&SEL,LIST,B,V,S,E)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R091P": {"ttr": 5895, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x003\\x01\\x02 O\\x01\\x02)o\\x12H\\x00$\\x00\\x81\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-07-23T00:00:00", "modifydate": "2002-10-23T12:48:33", "lines": 36, "newlines": 129, "modlines": 0, "user": "C838704"}, "text": ")ATTR DEFAULT(%+_)\n _   type(&PROT1) color(&colr1) intens(high)  hilite(&hili1)\n +   type(text)  color(blue)  intens(low)    skip(on)\n @   type(text) color(yellow) intens(high)\n ?   type(output) intens(non)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Jobcard Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Enter details to be used on all jobcards for JCL generated:\n+\n%===>_JOBCARD1                                                         +\n%===>_JOBCARD2                                                         +\n%===>_JOBCARD3                                                         +\n%===>_JOBCARD4                                                         +\n%===>_JOBCARD5                                                         +\n?Z+\n+Pres@[ENTER]+to save jobcard details or@END+PF key to abandon.\n)INIT\n &SID   = &ZSYSID\n .ZVARS = '(POPUPMSG)'\n\n &GC001 = 'Previous job card must not be spaces.'\n &GC002 = 'At least a one line entry is required.'\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n    IF (&JOBCARD5 \u00ac= &Z)\n      VER(&JOBCARD4,NB,MSG=GC001)\n    IF (&JOBCARD4 \u00ac= &Z)\n      VER(&JOBCARD3,NB,MSG=GC001)\n    IF (&JOBCARD3 \u00ac= &Z)\n      VER(&JOBCARD2,NB,MSG=GC001)\n    VER(&JOBCARD1,NB,MSG=GC002)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R092P": {"ttr": 5897, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00\\x19\\x01\\x02\\x19\\x9f\\x01\\x02$_\\x107\\x00\\x82\\x003\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "2002-07-18T00:00:00", "modifydate": "2002-09-02T10:37:19", "lines": 130, "newlines": 51, "modlines": 0, "user": "C838704"}, "text": ")ATTR DEFAULT(`+_)\n #   type(INPUT) color(red)   intens(high)   hilite(uscore)\n _   type(&PROT1) color(&colr1) intens(high)  hilite(&hili1)\n +   type(text)  color(blue)  intens(low)    skip(on)\n $   type(output) color(green) intens(high)\n @   type(text) color(yellow) intens(high)\n ! AREA(DYNAMIC)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Global Site Defaults >\\-\\\n@&SID@===>_ZCMD\n@\n+   HLQ's -\n+     For DSN:_Z+!DYNA1,SHAD1                        !:_HLQDSN           +\n+     For Lib:_Z+!DYNA2,SHAD2                        !:_HLQLIB           +\n+     For Wrk:_Z+!DYNA3,SHAD3                        !:_HLQWRK           +\n+   Pre def  :_Z                                +Predefined templates\n+   DSN      :_Z                                +Template\n+   TRTCH    :_Z    +                           +NONE, COMP or NOCOMP\n+   Stack    :_Z  +                             +Yes or No\n+   Vol count:_Z  +                             +Numeric\n+   Model DCB:_Z                                +Model DSname\n+   Disp  -\n+     Status :_Z  +                             +New, Mod, Shr or Old\n+     Normal :_Z      +                         +Catlg, Delete, Keep or Uncatg\n+     Abend  :_Z      +                         +Catlg, Delete, Keep or Uncatg\n+   Unit     :_Z       +                        +Valid Unit name\n+   Space -\n+     Type   :_Z  +                             +Cyl, Trk or Mb\n+     Primary:_Z    +                           +Numeric\n+     Second :_Z    +                           +Numeric\n+   SHR Level:_Z        +                       +Reference or Change\n+   Last copy:_Z  +                             +Hour from last copy\n+   Age      :_Z  +                             +Numeric\n+   Runstats -\n+     Update :_Z         +                      +ALl, ACcesspath, SPace or NOne\n+     History:_Z         +                      +ALl, ACcesspath, SPace or NOne\n+     Sample :_Z +                              +Numeric (%)\n+   Q Write  :_Z  +                             +Yes or No\n+   Account  :_Z               +                +Valid JOB account\n+\n)INIT\n &DYNA1 = 'Group, Userid, Syspref, Dual or Other'\n &SHAD1 = 'ybbbbbbybbbbbbbybbbbbbbbybbbbbbbybbbb'\n &DYNA2 = &DYNA1\n &SHAD2 = &SHAD1\n &DYNA3 = &DYNA1\n &SHAD3 = &SHAD1\n .ZVARS = '(+\n            HDSN HLIB HWRK +\n            TEMPSDEF +\n            TEMPDSN  +\n            TEMPTRTC +\n            TEMPSTCK +\n            TEMPVCNT +\n            TEMPDCB  +\n            TEMPDIS1 +\n            TEMPDIS2 +\n            TEMPDIS3 +\n            TEMPUNIT +\n            TEMPSPTY +\n            TEMPSPA1 +\n            TEMPSPA2 +\n            COPYSHRL +\n            COPYLCOP +\n            COPYAGE  +\n            RUNSUPD  +\n            RUNSHIST +\n            RUNSPCT  +\n            QUIEWRIT +\n            ACCT     +\n           )'\n &SID   = &ZSYSID\n\n &GC001 = 'Field must be entered for option \"O\".'\n &GC002 = 'Valid values are \"NONE,COMP,NOCOMP\".'\n &GC003 = 'Valid values are \"Yes,No\".'\n &GC004 = 'Model dataset name must be entered.'\n &GC005 = 'Valid values are \"New,Mod,Shr,Old\".'\n &GC006 = 'Valid values are \"Catlg,Delete,Keep,Uncatlg\".'\n &GC007 = 'Must be a valid UNIT name.'\n &GC008 = 'Valid values are \"Cyl,Trk,Mb\".'\n &GC009 = 'Valid values are \"Reference,Change\".'\n &GC009B = 'Valid values are \"ALl,ACcesspath,SPace,NOne\".'\n)REINIT\n REFRESH(TEMPSTCK,TEMPDIS1,TEMPDIS2,TEMPDIS3,TEMPSPTY,COPYSHRL,\n         RUNSHIST,QUIEWRIT)\n)PROC\n VER(&HDSN,NB,LIST,G,U,S,D,O)\n IF (&HDSN = 'O')\n   VER(&HLQDSN,NB,MSG=GC001)\n VER(&HLIB,NB,LIST,G,U,S,D,O)\n IF (&HLIB = 'O')\n   VER(&HLQLIB,NB,MSG=GC001)\n VER(&HWRK,NB,LIST,G,U,S,D,O)\n IF (&HWRK = 'O')\n   VER(&HLQWRK,NB,MSG=GC001)\n VER(&TEMPDSN ,NB)\n VER(&TEMPTRTC,NB,LIST,NONE,COMP,NOCOMP,MSG=GC002)\n &TEMPSTCK = TRANS(TRUNC(&TEMPSTCK,1) Y,YES N,NO *,*)\n VER(&TEMPSTCK,NB,LIST,YES,NO,MSG=GC003)\n VER(&TEMPVCNT,NB,NUM)\n VER(&TEMPDCB,NB,DSNAME,MSG=GC004)\n &TEMPDIS1 = TRANS(TRUNC(&TEMPDIS1,1) N,NEW M,MOD S,SHR O,OLD *,*)\n VER(&TEMPDIS1,NB,LIST,NEW,MOD,SHR,OLD,MSG=GC005)\n &TEMPDIS2 = TRANS(TRUNC(&TEMPDIS2,1) C,CATLG D,DELETE K,KEEP U,UNCATLG *,*)\n VER(&TEMPDIS2,NB,LIST,CATLG,DELETE,KEEP,UNCATLG,MSG=GC006)\n &TEMPDIS3 = TRANS(TRUNC(&TEMPDIS3,1) C,CATLG D,DELETE K,KEEP U,UNCATLG *,*)\n VER(&TEMPDIS3,NB,LIST,CATLG,DELETE,KEEP,UNCATLG,MSG=GC006)\n VER(&TEMPUNIT,NB,MSG=GC007)\n &TEMPSPTY = TRANS(TRUNC(&TEMPSPTY,1) C,CYL T,TRK M,MB *,*)\n VER(&TEMPSPTY,NB,LIST,CYL,TRK,MB,MSG=GC008)\n VER(&TEMPSPA1,NB,NUM)\n VER(&TEMPSPA2,NB,NUM)\n &COPYSHRL = TRANS(TRUNC(&COPYSHRL,1) R,REFERENCE C,CHANGE *,*)\n VER(&COPYSHRL,NB,LIST,REFERENCE,CHANGE,MSG=GC009)\n VER(&COPYLCOP,NB,NUM)\n VER(&COPYAGE,NB,NUM)\n &RUNSUPD = TRANS(TRUNC(&RUNSUPD,2) AL,ALL AC,ACCESSPATH SP,SPACE\n            NO,NONE *,*)\n VER(&RUNSUPD,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC009B)\n &RUNSHIST = TRANS(TRUNC(&RUNSHIST,2) AL,ALL AC,ACCESSPATH SP,SPACE\n            NO,NONE *,*)\n VER(&RUNSHIST,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC009B)\n VER(&RUNSPCT,NB,NUM)\n &QUIEWRIT = TRANS(TRUNC(&QUIEWRIT,1) Y,YES N,NO *,*)\n VER(&QUIEWRIT,NB,LIST,YES,NO,MSG=GC003)\n\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "R093P": {"ttr": 5899, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x006\\x01\\x02\"\\x0f\\x01\\x02\\'?\\x13\\x03\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-08-08T00:00:00", "modifydate": "2002-09-30T13:03:36", "lines": 31, "newlines": 31, "modlines": 0, "user": "C838704"}, "text": ")ATTR  DEFAULT(%+_)\n @ TYPE(TEXT) INTENS(high) COLOR(yellow) SKIP(ON)\n ` TYPE(TEXT) INTENS(LOW) COLOR(GREEN) SKIP(ON)\n \u00ac TYPE(TEXT) SKIP(ON) INTENS(LOW) color(blue) hilite(uscore)\n ~ TYPE(OUTPUT) SKIP(ON) INTENS(LOW) CAPS(ON)\n # TYPE(OUTPUT) INTENS(HIGH) COLOR(GREEN)\n ? TYPE(OUTPUT) INTENS(NON)\n _ TYPE(INPUT) COLOR(RED) HILITE(USCORE) CAPS(ON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME-DB2 &OPER1 select \\-\\\n@&SID@===>_ZCMD                                               `Scroll ===>_AMT +\n%\n+!DYNA1,SHAD1                                                         !?Z+\n\u00acS\u00ac Dataset                                       +\u00ac Date   +\u00ac Time   +\n)MODEL\n_Z#DSNX                                            ~DATEX    ~TIMEX     Z\n)INIT\n  &DYNA1 = 'Enter S(elect dataset from list below):'\n  &SHAD1 = 'bbbbbbybbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\n  &SID = &ZSYSID\n  .ZVARS = '(POPUPMSG,SEL)'\n  &XAMT = TRANS(TRUNC(&AMT,1) H,HALF P,PAGE C,CSR D,DATA *,*)\n  IF (&XAMT = HALF,PAGE,CSR,DATA) &AMT = &XAMT\n)PROC\n  &XAMT = TRANS(TRUNC(&AMT,1) H,HALF P,PAGE C,CSR D,DATA *,*)\n  IF (&XAMT = HALF,PAGE,CSR,DATA) &AMT = &XAMT\n  VER(&SEL,LIST,S)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R100P": {"ttr": 5901, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x006\\x01\\x02\"O\\x01\\x02)O\\x128\\x00\\'\\x008\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2002-08-12T00:00:00", "modifydate": "2002-10-21T12:38:36", "lines": 39, "newlines": 56, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(text) color(yellow) intens(high) hilite(reverse)\n \u00a2 type(output) color(green ) intens(high)\n # type(text) color(pink)   intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ? type(output) intens(non)\n ! AREA(DYNAMIC)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Recover Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter @&OPER1  +details below for\u00a2SSID+:  Utilid:_RECOID  +\n+\n+Enter@/+against type of unload to be processed (one selection only):\n+\n_Z+List\n_Z+DB2 Object (Tablespace/Indexspace)\n_Z+Index\n?Z+\n)INIT\n .ZVARS = '(+\n            ULLS ULTS ULIX +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n &GC001 = 'Can only select one option.'\n)REINIT\n)PROC\n  IF (&ULLS \u00ac= &Z)\n    VER(&ULTS,LIST,XX,MSG=GC001)\n    VER(&ULIX,LIST,XX,MSG=GC001)\n  IF (&ULTS \u00ac= &Z)\n    VER(&ULIX,LIST,XX,MSG=GC001)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R101P": {"ttr": 5903, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x12\\x01\\x02\"O\\x01\\x02)O\\x129\\x00\\x1d\\x00\\x0b\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-08-12T00:00:00", "modifydate": "2002-10-21T12:39:12", "lines": 29, "newlines": 11, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ? type(output) intens(non)\n ! AREA(DYNAMIC)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Recover Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter details below for@RECOVER LIST+option for$SSID+: Utilid:_RECOID  +\n+\n+Listname  :_RECOLDEF + Enter name,@*+for list or@/+to create/modify list.\n?Z+\n)INIT\n &SID   = &ZSYSID\n .ZVARS = '(POPUPMSG)'\n\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&RECOID,NB)\n   IF (&RECOLDEF \u00ac= '*','/')\n     VER(&RECOLDEF,NB,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R102P": {"ttr": 5905, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00@\\x01\\x02\"O\\x01\\x02)O\\x129\\x008\\x008\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2002-08-12T00:00:00", "modifydate": "2002-10-21T12:39:40", "lines": 56, "newlines": 56, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ? type(output) intens(non)\n ! AREA(DYNAMIC)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Recover Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter details for@RECOVER DB2 Object+option for$SSID+: Utilid:_RECOID  +\n+\n+Db2 Object:_RECODBNM+._RECOSPCE+Part:_Z   +(optional) Type:_Z +TS/IX\n+To:-\n+  Copy    :_RECOTCPY      +!DYNA1,SHAD1                           !\n+Option 1  :_RECOOPT1 +    +!DYNA2,SHAD2                           !\n?Z+\n)INIT\n &DYNA1 = 'Tocopy, toLastcopy or tolastFullcopy'\n &SHAD1 = 'ybbbbbbbbbybbbbbbbbbbbbbbbbbybbbbbbb'\n &DYNA2 = 'Reuse or Logonly'\n &SHAD2 = 'ybbbbbbbbybbbbbb'\n .ZVARS = '(+\n            RECOPART       +\n            RECOBJTP       +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n\n &GC001 = 'Filed must be numeric if supplied.'\n &GC002 = 'Valid values are: TS(Tablespace or IX(Indexspace).'\n &GC003 = 'Valid values are specified to the right of the field.'\n IF (&RECOOPT1 = &Z) &RECOOPT1 = 'REUSE'\n)REINIT\n REFRESH(RECOTCPY)\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&RECOID,NB)\n   VER(&RECODBNM,NB,NAME)\n   VER(&RECOSPCE,NB,NAME)\n   IF (&RECOPART \u00ac= &Z)\n     VER(&RECOPART,NUM,MSG=GC001)\n   VER(&RECOBJTP,NB,LIST,TS,IX,MSG=GC002)\n   IF (&RECOTCPY \u00ac= TOCOPY,TOLASTCOPY,TOLASTFULLCOPY)\n     &RECOTCPY = TRANS(TRUNC(&RECOTCPY,1) T,TOCOPY L,TOLASTCOPY\n                       F,TOLASTFULLCOPY *,*)\n   VER(&RECOTCPY,NB,LIST,TOCOPY,TOLASTCOPY,TOLASTFULLCOPY,MSG=GC003)\n   IF (&RECOOPT1 \u00ac= REUSE,LOGONLY)\n     &RECOOPT1 = TRANS(TRUNC(&RECOOPT1,1) R,REUSE L,LOGONLY *,*)\n   VER(&RECOOPT1,NB,LIST,REUSE,LOGONLY,MSG=GC003)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R103P": {"ttr": 6145, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x08\\x01\\x02\"\\x7f\\x01\\x02)O\\x12@\\x002\\x00(\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2002-08-15T00:00:00", "modifydate": "2002-10-21T12:40:08", "lines": 50, "newlines": 40, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ? type(output) intens(non)\n ! AREA(DYNAMIC)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Recover Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter details for@RECOVER INDEX+option for$SSID+: Utilid:_RECOID  +\n+\n+Index     :_RECOCREA+._RECOINDX                        +Part:_Z   +(Optional)\n+To:-\n+  Copy    :_RECOTCPY      +!DYNA1,SHAD1                           !\n+Option 1  :_RECOOPT1 +    +!DYNA2,SHAD2                           !\n?Z+\n)INIT\n .ZVARS = '(RECOPTIX,POPUPMSG)'\n &DYNA1 = 'Tocopy, toLastcopy or tolastFullcopy'\n &SHAD1 = 'ybbbbbbbbbybbbbbbbbbbbbbbbbbybbbbbbb'\n &DYNA2 = 'Reuse or Logonly'\n &SHAD2 = 'ybbbbbbbbybbbbbb'\n &SID   = &ZSYSID\n\n &GC001 = 'Filed must be numeric if supplied.'\n &GC002 = 'Valid values are: TS(Tablespace or IX(Indexspace).'\n &GC003 = 'Valid values are specified to the right of the field.'\n IF (&RECOOPT1 = &Z) &RECOOPT1 = 'REUSE'\n)REINIT\n REFRESH(RECOTCPY)\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&RECOID,NB)\n   VER(&RECOCREA,NB,NAME)\n   VER(&RECOINDX,NB)\n   VER(&RECOPTIX,NUM)\n   IF (&RECOTCPY \u00ac= TOCOPY,TOLASTCOPY,TOLASTFULLCOPY)\n     &RECOTCPY = TRANS(TRUNC(&RECOTCPY,1) T,TOCOPY L,TOLASTCOPY\n                       F,TOLASTFULLCOPY *,*)\n   VER(&RECOTCPY,NB,LIST,TOCOPY,TOLASTCOPY,TOLASTFULLCOPY,MSG=GC003)\n   IF (&RECOOPT1 \u00ac= REUSE,LOGONLY)\n     &RECOOPT1 = TRANS(TRUNC(&RECOOPT1,1) R,REUSE L,LOGONLY *,*)\n     VER(&RECOOPT1,NB,LIST,REUSE,LOGONLY,MSG=GC003)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R120P": {"ttr": 6147, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x19\\x01\\x02#\\x1f\\x01\\x02)O\\x12@\\x00&\\x00$\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-08-19T00:00:00", "modifydate": "2002-10-21T12:40:19", "lines": 38, "newlines": 36, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _   type(INPUT)  color(red)    intens(high)  hilite(uscore)\n +   type(text)   color(blue)   intens(low)   skip(on)\n @   type(text)   color(yellow) intens(high)\n $   type(text)   color(yellow) intens(high)  hilite(uscore)\n #   type(text)   color(pink)   intens(high)  hilite(uscore)\n \u00a2   type(output) color(green ) intens(high)\n ? type(output) intens(non)\n ! AREA(DYNAMIC)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Rebuild Index Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter @&OPER1  +details below for\u00a2SSID+:  Utilid:_REBIID  +\n+\n+Enter@/+against type of Reubuild Index to be processed (one selection only):\n\n_Z+List\n_Z+Tablespace\n_Z+Index\n?Z+\n)INIT\n .ZVARS = '(+\n            RBLS RBTS RBIX +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n &GC001 = 'Can only select one option.'\n)REINIT\n)PROC\n  IF (&RBLS \u00ac= &Z)\n    VER(&RBTS,LIST,XX,MSG=GC001)\n    VER(&RBIX,LIST,XX,MSG=GC001)\n  IF (&RBTS \u00ac= &Z)\n    VER(&RBIX,LIST,XX,MSG=GC001)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R121P": {"ttr": 6149, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0b\\x00'\\x01\\x02#\\x1f\\x01\\x02)O\\x12@\\x00]\\x00\\x1f\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@\"", "ispf": {"version": "01.11", "flags": 0, "createdate": "2002-08-19T00:00:00", "modifydate": "2002-10-21T12:40:27", "lines": 93, "newlines": 31, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ? type(output) intens(non)\n ! AREA(DYNAMIC)\n Y TYPE(CHAR) COLOR(YELLOW) hilite(reverse)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Rebuild Index Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter@&OPER1  +from@LIST+option for$SSID+:  Utilid:_REBIID  +\n+\n+Listname  :_REBILDEF+  Enter name,@*+for list or@/+to create/modify list.\n+Reuse     :_Z  +       !DYNA1,SHAD1                           !\n+Statistics:_Z  +      +!DYNA6,SHAD6                           !\n+  Update  :_REBIUPDT  +!DYNA2,SHAD2                           !\n+  History :_REBIHIST  +!DYNA3,SHAD3                           !\n+WORKDDN   :_REBIWDDN+  Enter name,@*+for list or@/+to create/modify template.\n+Sortdevt  :_REBIDEVT+  Enter valid device type (or@*+for a selection list).\n+Sortnum   :_Z +        !DYNA4,SHAD4                           !\n+Sortkeys  :_Z  +       !DYNA5,SHAD5                           !\n?Z+\n)INIT\n &SID   = &ZSYSID\n &DYNA1 = 'Yes or No'\n &SHAD1 = 'ybbbbbbyb'\n &DYNA2 = 'ALl, ACcesspath, SPace or NOne'\n &SHAD2 = 'yybbbyybbbbbbbbbbyybbbbbbbyybb'\n &DYNA3 = &DYNA2\n &SHAD3 = &SHAD2\n &DYNA4 = 'Numeric or  (blank)'\n &SHAD4 = 'bbbbbbbbbbbYbbbbbbb'\n &DYNA5 = &DYNA1\n &SHAD5 = &SHAD1\n &DYNA6 = &DYNA1\n &SHAD6 = &SHAD1\n &GC001 = 'Valid values are specified to the right of the field.'\n &GC006 = 'Combined with value of Update invalid. +\n          Valid values are: ACcesspath,NOne.'\n &GC007 = 'Combined with value of Update invalid. +\n          Valid values are: SPace,NOne.'\n &GC008 = 'Combined with value of Update invalid. +\n          Valid values are: NOne.'\n .ZVARS = '( +\n            REBIREUS +\n            REBISTAT +\n            REBISRTN +\n            REBISRTK +\n            POPUPMSG +\n           )'\n\nIF (&REBISTAT = YES)\n   IF (&REBIUPDT = &Z) &REBIUPDT = ALL\n   IF (&REBIHIST = &Z) &REBIHIST = ALL\nIF (&REBIDEVT = &Z) &REBIDEVT = SYSALLDA\n)REINIT\nREFRESH(REBISTAT,REBIUPDT,REBIHIST,REBIREUS,REBIDEVT,REBISRTK)\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&REBIID,NB)\n   IF (&REBILDEF \u00ac= '*','/')\n     VER(&REBILDEF,NB,NAME)\n   &REBIREUS = TRANS(TRUNC(&REBIREUS,1) Y,YES N,NO *,*)\n   VER(&REBIREUS,NB,LIST,YES,NO,MSG=GC001)\n   &REBISTAT = TRANS(TRUNC(&REBISTAT,1) Y,YES N,NO *,*)\n   VER(&REBISTAT,NB,LIST,YES,NO,MSG=GC001)\n   IF (&REBISTAT = YES)\n       &REBIUPDT = TRANS(TRUNC(&REBIUPDT,2) AL,ALL AC,ACCESSPATH\n                         SP,SPACE NO,NONE *,*)\n       VER(&REBIUPDT,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n       &REBIHIST = TRANS(TRUNC(&REBIHIST,2) AL,ALL AC,ACCESSPATH\n                         SP,SPACE NO,NONE *,*)\n       VER(&REBIHIST,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n       IF (&REBIUPDT = ACCESSPATH)\n         VER(&REBIHIST,LIST,ACCESSPATH,NONE,MSG=GC006)\n       IF (&REBIUPDT = SPACE)\n         VER(&REBIHIST,LIST,SPACE,NONE,MSG=GC007)\n       IF (&REBIUPDT = NONE)\n         VER(&REBIHIST,LIST,NONE,MSG=GC008)\n   IF (&REBIWDDN \u00ac= '*','/')\n     VER(&REBIWDDN,NB,NAME)\n   IF (&REBIDEVT \u00ac= '*')\n     VER(&REBIDEVT,NB)\n   VER(&REBISRTN,NUM)\n   &REBISRTK = TRANS(TRUNC(&REBISRTK,1) Y,YES N,NO *,*)\n   VER(&REBISRTK,NB,LIST,YES,NO,MSG=GC001)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R122P": {"ttr": 6151, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00B\\x01\\x02#\\x1f\\x01\\x02)O\\x12@\\x00_\\x000\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2002-08-19T00:00:00", "modifydate": "2002-10-21T12:40:42", "lines": 95, "newlines": 48, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ? type(output) intens(non)\n ! AREA(DYNAMIC)\n Y TYPE(CHAR) COLOR(YELLOW) hilite(reverse)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Rebuild Index Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter@&OPER1  +from@TABLESPACE+option for$SSID+:  Utilid:_REBIID  +\n+\n+Tablespace:_REBIDBNM+._REBISPCE+Part:_Z   +(optional)\n+Reuse     :_Z  +       !DYNA1,SHAD1                           !\n+Statistics:_Z  +      +!DYNA6,SHAD6                           !\n+  Update  :_REBIUPDT  +!DYNA2,SHAD2                           !\n+  History :_REBIHIST  +!DYNA3,SHAD3                           !\n+WORKDDN   :_REBIWDDN+  Enter name,@*+for list or@/+to create/modify template.\n+Sortdevt  :_REBIDEVT+  Enter valid device type (or@*+for a selection list).\n+Sortnum   :_Z +        !DYNA4,SHAD4                           !\n+Sortkeys  :_Z  +       !DYNA5,SHAD5                           !\n?Z+\n)INIT\n &SID   = &ZSYSID\n &DYNA1 = 'Yes or No'\n &SHAD1 = 'ybbbbbbyb'\n &DYNA2 = 'ALl,ACcesspath,SPace,or NOne'\n &SHAD2 = 'yybbyybbbbbbbbbyybbbbbbbyybb'\n &DYNA3 = &DYNA2\n &SHAD3 = &SHAD2\n &DYNA4 = 'Numeric or  (blank)'\n &SHAD4 = 'bbbbbbbbbbbYbbbbbbb'\n &DYNA5 = &DYNA1\n &SHAD5 = &SHAD1\n &DYNA6 = &DYNA1\n &SHAD6 = &SHAD1\n &GC001 = 'Valid values are specified to the right of the field.'\n &GC006 = 'Combined with value of Update invalid. +\n          Valid values are: ACcesspath,NOne.'\n &GC007 = 'Combined with value of Update invalid. +\n          Valid values are: SPace,NOne.'\n &GC008 = 'Combined with value of Update invalid. +\n          Valid values are: NOne.'\n .ZVARS = '( +\n            REBIPART +\n            REBIREUS +\n            REBISTAT +\n            REBISRTN +\n            REBISRTK +\n            POPUPMSG +\n           )'\n\n IF (&REBISTAT = YES)\n    IF (&REBIUPDT = &Z) &REBIUPDT = ALL\n    IF (&REBIHIST = &Z) &REBIHIST = ALL\n IF (&REBIDEVT = &Z) &REBIDEVT = SYSALLDA\n)REINIT\n REFRESH(REBISTAT,REBIUPDT,REBIHIST,REBIREUS,REBIDEVT,REBISRTK)\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&REBIID,NB)\n   VER(&REBIDBNM,NB,NAME)\n   VER(&REBISPCE,NB)\n   VER(&REBIPART,NUM)\n   &REBIREUS = TRANS(TRUNC(&REBIREUS,1) Y,YES N,NO *,*)\n   VER(&REBIREUS,NB,LIST,YES,NO,MSG=GC001)\n   &REBISTAT = TRANS(TRUNC(&REBISTAT,1) Y,YES N,NO *,*)\n   VER(&REBISTAT,NB,LIST,YES,NO,MSG=GC001)\n   IF (&REBISTAT = YES)\n       &REBIUPDT = TRANS(TRUNC(&REBIUPDT,2) AL,ALL AC,ACCESSPATH\n                         SP,SPACE NO,NONE *,*)\n       VER(&REBIUPDT,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n       &REBIHIST = TRANS(TRUNC(&REBIHIST,2) AL,ALL AC,ACCESSPATH\n                         SP,SPACE NO,NONE *,*)\n       VER(&REBIHIST,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n       IF (&REBIUPDT = ACCESSPATH)\n         VER(&REBIHIST,LIST,ACCESSPATH,NONE,MSG=GC006)\n       IF (&REBIUPDT = SPACE)\n         VER(&REBIHIST,LIST,SPACE,NONE,MSG=GC007)\n       IF (&REBIUPDT = NONE)\n         VER(&REBIHIST,LIST,NONE,MSG=GC008)\n   IF (&REBIWDDN \u00ac= '*','/')\n     VER(&REBIWDDN,NB,NAME)\n   IF (&REBIDEVT \u00ac= '*')\n     VER(&REBIDEVT,NB)\n   VER(&REBISRTN,NUM)\n   &REBISRTK = TRANS(TRUNC(&REBISRTK,1) Y,YES N,NO *,*)\n   VER(&REBISRTK,NB,LIST,YES,NO,MSG=GC001)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R123P": {"ttr": 6153, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00I\\x01\\x02#\\x1f\\x01\\x02)O\\x12@\\x00_\\x007\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2002-08-19T00:00:00", "modifydate": "2002-10-21T12:40:49", "lines": 95, "newlines": 55, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ? type(output) intens(non)\n ! AREA(DYNAMIC)\n Y TYPE(CHAR) COLOR(YELLOW) hilite(reverse)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Rebuild Index Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter@&OPER1  +from@INDEX+option for$SSID+:  Utilid:_REBIID  +\n+\n+Index     :_REBICREA+._REBINDEX                        +Part:_Z   +(Optional)\n+Reuse     :_Z  +       !DYNA1,SHAD1                           !\n+Statistics:_Z  +      +!DYNA6,SHAD6                           !\n+  Update  :_REBIUPDT  +!DYNA2,SHAD2                           !\n+  History :_REBIHIST  +!DYNA3,SHAD3                           !\n+WORKDDN   :_REBIWDDN+  Enter name,@*+for list or@/+to create/modify template.\n+Sortdevt  :_REBIDEVT+  Enter valid device type (or@*+for a selection list).\n+Sortnum   :_Z +        !DYNA4,SHAD4                           !\n+Sortkeys  :_Z  +       !DYNA5,SHAD5                           !\n?Z+\n)INIT\n &SID   = &ZSYSID\n &DYNA1 = 'Yes or No'\n &SHAD1 = 'ybbbbbbyb'\n &DYNA2 = 'ALl, ACcesspath, SPace or NOne'\n &SHAD2 = 'yybbbyybbbbbbbbbbyybbbbbbbyybb'\n &DYNA3 = &DYNA2\n &SHAD3 = &SHAD2\n &DYNA4 = 'Numeric or  (blank)'\n &SHAD4 = 'bbbbbbbbbbbYbbbbbbb'\n &DYNA5 = &DYNA1\n &SHAD5 = &SHAD1\n &DYNA6 = &DYNA1\n &SHAD6 = &SHAD1\n &GC001 = 'Valid values are specified to the right of the field.'\n &GC006 = 'Combined with value of Update invalid. +\n          Valid values are: ACcesspath,NOne.'\n &GC007 = 'Combined with value of Update invalid. +\n          Valid values are: SPace,NOne.'\n &GC008 = 'Combined with value of Update invalid. +\n          Valid values are: NOne.'\n .ZVARS = '( +\n            REBIPTIX +\n            REBIREUS +\n            REBISTAT +\n            REBISRTN +\n            REBISRTK +\n            POPUPMSG +\n           )'\n\nIF (&REBISTAT = YES)\n   IF (&REBIUPDT = &Z) &REBIUPDT = ALL\n   IF (&REBIHIST = &Z) &REBIHIST = ALL\nIF (&REBIDEVT = &Z) &REBIDEVT = SYSALLDA\n)REINIT\nREFRESH(REBISTAT,REBIUPDT,REBIHIST,REBIREUS,REBIDEVT,REBISRTK)\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&REBIID,NB)\n   VER(&REBICREA,NB,NAME)\n   VER(&REBINDEX,NB)\n   VER(&REBIPTIX,NUM)\n   &REBIREUS = TRANS(TRUNC(&REBIREUS,1) Y,YES N,NO *,*)\n   VER(&REBIREUS,NB,LIST,YES,NO,MSG=GC001)\n   &REBISTAT = TRANS(TRUNC(&REBISTAT,1) Y,YES N,NO *,*)\n   VER(&REBISTAT,NB,LIST,YES,NO,MSG=GC001)\n   IF (&REBISTAT = YES)\n       &REBIUPDT = TRANS(TRUNC(&REBIUPDT,2) AL,ALL AC,ACCESSPATH\n                         SP,SPACE NO,NONE *,*)\n       VER(&REBIUPDT,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n       &REBIHIST = TRANS(TRUNC(&REBIHIST,2) AL,ALL AC,ACCESSPATH\n                         SP,SPACE NO,NONE *,*)\n       VER(&REBIHIST,NB,LIST,ALL,ACCESSPATH,SPACE,NONE,MSG=GC001)\n       IF (&REBIUPDT = ACCESSPATH)\n         VER(&REBIHIST,LIST,ACCESSPATH,NONE,MSG=GC006)\n       IF (&REBIUPDT = SPACE)\n         VER(&REBIHIST,LIST,SPACE,NONE,MSG=GC007)\n       IF (&REBIUPDT = NONE)\n         VER(&REBIHIST,LIST,NONE,MSG=GC008)\n   IF (&REBIWDDN \u00ac= '*','/')\n     VER(&REBIWDDN,NB,NAME)\n   IF (&REBIDEVT \u00ac= '*')\n     VER(&REBIDEVT,NB)\n   VER(&REBISRTN,NUM)\n   &REBISRTK = TRANS(TRUNC(&REBISRTK,1) Y,YES N,NO *,*)\n   VER(&REBISRTK,NB,LIST,YES,NO,MSG=GC001)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R130P": {"ttr": 6155, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00W\\x01\\x02#\\x1f\\x01\\x02)O\\x12@\\x00&\\x00$\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-08-19T00:00:00", "modifydate": "2002-10-21T12:40:57", "lines": 38, "newlines": 36, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _   type(INPUT)  color(red)    intens(high)  hilite(uscore)\n +   type(text)   color(blue)   intens(low)   skip(on)\n @   type(text)   color(yellow) intens(high)\n $   type(text)   color(yellow) intens(high)  hilite(uscore)\n #   type(text)   color(pink)   intens(high)  hilite(uscore)\n \u00a2   type(output) color(green ) intens(high)\n ? type(output) intens(non)\n ! AREA(DYNAMIC)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Check Index Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter @&OPER1  +details below for\u00a2SSID+:  Utilid:_CHKIID  +\n+\n+Enter@/+against type of Reubuild Index to be processed (one selection only):\n\n_Z+List\n_Z+Tablespace\n_Z+Index\n?Z+\n)INIT\n .ZVARS = '(+\n            CILS CITS CIIX +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n &GC001 = 'Can only select one option.'\n)REINIT\n)PROC\n  IF (&CILS \u00ac= &Z)\n    VER(&CITS,LIST,XX,MSG=GC001)\n    VER(&CIIX,LIST,XX,MSG=GC001)\n  IF (&CITS \u00ac= &Z)\n    VER(&CIIX,LIST,XX,MSG=GC001)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R131P": {"ttr": 6157, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00#\\x01\\x02#\\x1f\\x01\\x02)o\\x104\\x00,\\x00\\x1f\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2002-08-19T00:00:00", "modifydate": "2002-10-23T10:34:23", "lines": 44, "newlines": 31, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ? type(output) intens(non)\n ! AREA(DYNAMIC)\n Y TYPE(CHAR) COLOR(YELLOW) hilite(reverse)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Check Index Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter@&OPER1  +from@LIST+option for$SSID+:  Utilid:_CHKIID  +\n+\n+Listname  :_CHKILDEF+  Enter name,@*+for list or@/+to create/modify list.\n+WORKDDN   :_CHKIWDDN+  Enter name,@*+for list or@/+to create/modify template.\n+Sortdevt  :_CHKIDEVT+  Enter valid device type (or@*+for a selection list).\n+Sortnum   :_Z +        !DYNA1,SHAD1                           !\n?Z+\n)INIT\n &SID   = &ZSYSID\n &DYNA1 = 'Numeric or  (blank)'\n &SHAD1 = 'bbbbbbbbbbbYbbbbbbb'\n .ZVARS = '( +\n            CHKISRTN +\n            POPUPMSG +\n           )'\n\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&CHKIID,NB)\n   IF (&CHKILDEF \u00ac= '*','/')\n     VER(&CHKILDEF,NB,NAME)\n   IF (&CHKIWDDN \u00ac= '*','/')\n     VER(&CHKIWDDN,NB,NAME)\n   IF (&CHKIDEVT \u00ac= '*')\n     VER(&CHKIDEVT,NB)\n   VER(&CHKISRTN,NUM)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R132P": {"ttr": 6159, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00C\\x01\\x02)o\\x01\\x02)o\\x103\\x00/\\x00/\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2002-10-23T00:00:00", "modifydate": "2002-10-23T10:33:43", "lines": 47, "newlines": 47, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ? type(output) intens(non)\n ! AREA(DYNAMIC)\n Y TYPE(CHAR) COLOR(YELLOW) hilite(reverse)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Check Index Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter@&OPER1  +from@TABLESPACE+option for$SSID+:  Utilid:_CHKIID  +\n+\n+Tablespace:_CHKIDBNM+._CHKISPCE+Part:_Z   +(optional)\n+WORKDDN   :_CHKIWDDN+  Enter name,@*+for list or@/+to create/modify template.\n+Sortdevt  :_CHKIDEVT+  Enter valid device type (or@*+for a selection list).\n+Sortnum   :_Z +        !DYNA1,SHAD1                           !\n?Z+\n)INIT\n &SID   = &ZSYSID\n &DYNA1 = 'Numeric or  (blank)'\n &SHAD1 = 'bbbbbbbbbbbYbbbbbbb'\n .ZVARS = '( +\n            CHKIPART +\n            CHKISRTN +\n            POPUPMSG +\n           )'\n\n)REINIT\nREFRESH(CHKIDEVT,CHKISRTN)\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&CHKIID,NB)\n   VER(&CHKIDBNM,NB,NAME)\n   VER(&CHKISPCE,NB)\n   VER(&CHKIPART,NUM)\n   IF (&CHKIWDDN \u00ac= '*','/')\n     VER(&CHKIWDDN,NB,NAME)\n   IF (&CHKIDEVT \u00ac= '*')\n     VER(&CHKIDEVT,NB)\n   VER(&CHKISRTN,NUM)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R133P": {"ttr": 6161, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x07\\x01\\x02)o\\x01\\x02)o\\x104\\x00.\\x00.\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2002-10-23T00:00:00", "modifydate": "2002-10-23T10:34:07", "lines": 46, "newlines": 46, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _ type(INPUT) color(red)   intens(high)   hilite(uscore)\n + type(text)  color(blue)  intens(low)    skip(on)\n $ type(output) color(green) intens(high)\n @ type(text) color(yellow) intens(high)\n ~ type(text) color(BLUE) intens(low) hilite(uscore)\n ? type(output) intens(non)\n ! AREA(DYNAMIC)\n Y TYPE(CHAR) COLOR(YELLOW) hilite(reverse)\n y TYPE(CHAR)    COLOR(YELLOW)\n b TYPE(CHAR)    COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Check Index Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter@&OPER1  +from@INDEX+option for$SSID+:  Utilid:_CHKIID  +\n+\n+Index     :_CHKICREA+._CHKINDEX                        +Part:_Z   +(Optional)\n+WORKDDN   :_CHKIWDDN+  Enter name,@*+for list or@/+to create/modify template.\n+Sortdevt  :_CHKIDEVT+  Enter valid device type (or@*+for a selection list).\n+Sortnum   :_Z +        !DYNA4,SHAD4                           !\n?Z+\n)INIT\n &SID   = &ZSYSID\n &DYNA4 = 'Numeric or  (blank)'\n &SHAD4 = 'bbbbbbbbbbbYbbbbbbb'\n .ZVARS = '( +\n            CHKIPTIX +\n            CHKISRTN +\n            POPUPMSG +\n           )'\n\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   VER(&CHKIID,NB)\n   VER(&CHKICREA,NB,NAME)\n   VER(&CHKINDEX,NB)\n   VER(&CHKIPTIX,NUM)\n   IF (&CHKIWDDN \u00ac= '*','/')\n     VER(&CHKIWDDN,NB,NAME)\n   IF (&CHKIDEVT \u00ac= '*')\n     VER(&CHKIDEVT,NB)\n   VER(&CHKISRTN,NUM)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R140P": {"ttr": 6401, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00F\\x01\\x02)O\\x01\\x021\\x7f\\x12\\x14\\x003\\x00\\x19\\x00\\x00\\xc3\\xf7\\xf9\\xf6\\xf9\\xf5\\xf7@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2002-10-21T00:00:00", "modifydate": "2002-11-13T12:14:46", "lines": 51, "newlines": 25, "modlines": 0, "user": "C796957"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high) hilite(uscore)\n @   type(text) color(yellow) intens(high)\n ?   type(OUTPUT) intens(NON)\n \u00a2   type(output) color(green ) intens(high)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Performance Queries >\\-\\&XXXX\n@&SID@===>_ZCMD                                                                +\n@\n+Please select @&OPER1  +details from below for\u00a2SSID+:\n+Where database like:_PERFDBLK+\n+\n+Enter@/+against all utilities to be processed:\n+Runstats information:\n_Z+Table space without RUNSTATS information\n_Z+Indexes without RUNSTATS information\n+Reorg required:\n_Z+Table spaces with more than_Z +percent relocated rows\n_Z+Indexes with a large leaf page distance\n+Pick a grouping:\n_Z+Table spaces with locking size = 'S' (table space locking)\n+To be announced:\n  +Indexes with clustering level problems\n  +Table spaces with more than 5 percent dropped space\n  +Index levels\n  +Indexes on tables with fewer than 6 pages\n  +Indexes not used by any plans or packages\n  +Table spaces containing more than one table\n  +Table spaces without SPACE information\n  +Indexes without SPACE information\n+Space information:\n  +Table spaces exceeding allocated primary quantity\n  +Indexes exceeding allocated primary quantity\n  +Allocated and used space for table spaces\n?Z+\n)INIT\n .ZVARS = '( +\n            TSNRS +\n            IXNRS +\n            TS10RR TSPCT +\n            IXLLPD +\n            TSWLSS +\n            POPUPMSG +\n           )'\n &SID  = &ZSYSID\n &XXXX = &R0VER\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n    VER(&PERFDBLK,NB)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R140TP": {"ttr": 6403, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x11\\x01\\x02)O\\x01\\x02)\\x7f\\x14@\\x00\\x1f\\x00\\x1c\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-10-21T00:00:00", "modifydate": "2002-10-24T14:40:11", "lines": 31, "newlines": 28, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high)   hilite(uscore)\n #   type(INPUT) color(red)   intens(high)   hilite(uscore) CAPS(ON)\n +   type(text)  color(blue)  intens(low)    skip(on)\n ~   type(text)  color(blue)  intens(low)    skip(on) hilite(uscore)\n $   type(output) color(blue) intens(high)\n @   type(text) color(yellow) intens(high)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Load Table Names >\\-\\\n%&SID%===>_ZCMD                                               `Scroll ===>_AMT +\n?Z+\n+_Z+Leave@*+to select ALL, or clear and select individual(s).  Utilid:_PERFID  +\n~Sel~DBname  ~Name    +\n)MODEL\n #Z+$DBNAME  $NAME\n)INIT\n .ZVARS = '(POPUPMSG,SELALL,SEL)'\n &SID = &ZSYSID\n &XAMT = TRANS(TRUNC(&AMT,1) H,HALF P,PAGE C,CSR D,DATA *,*)\n IF (&XAMT = HALF,PAGE,CSR,DATA) &AMT = &XAMT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n    VER(&PERFID,NB)\n    &XAMT = TRANS(TRUNC(&AMT,1) H,HALF P,PAGE C,CSR D,DATA *,*)\n    IF (&XAMT = HALF,PAGE,CSR,DATA) &AMT = &XAMT\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R141TP": {"ttr": 6405, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00!\\x01\\x021\\x0f\\x01\\x021\\x0f\\x16\\x11\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-11-06T00:00:00", "modifydate": "2002-11-06T16:11:21", "lines": 31, "newlines": 31, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high)   hilite(uscore)\n #   type(INPUT) color(red)   intens(high)   hilite(uscore) CAPS(ON)\n +   type(text)  color(blue)  intens(low)    skip(on)\n ~   type(text)  color(blue)  intens(low)    skip(on) hilite(uscore) CAPS(OFF)\n $   type(output) color(blue) intens(high)\n @   type(text) color(yellow) intens(high)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Load Table Names >\\-\\\n%&SID%===>_ZCMD                                               `Scroll ===>_AMT +\n?Z+\n+_Z+Enter@*+to select ALL, or select individual(s).  Utilid:_PERFID  +\n~Sel~DBname  ~Name    +   ~&FNAME1     +     ~&FNAME2     +\n)MODEL\n #Z+$DBNAME  $NAME        $T1                $T2\n)INIT\n .ZVARS = '(POPUPMSG,SELALL,SEL)'\n &SID = &ZSYSID\n &XAMT = TRANS(TRUNC(&AMT,1) H,HALF P,PAGE C,CSR D,DATA *,*)\n IF (&XAMT = HALF,PAGE,CSR,DATA) &AMT = &XAMT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n    VER(&PERFID,NB)\n    &XAMT = TRANS(TRUNC(&AMT,1) H,HALF P,PAGE C,CSR D,DATA *,*)\n    IF (&XAMT = HALF,PAGE,CSR,DATA) &AMT = &XAMT\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "R150P": {"ttr": 6407, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00S\\x01\\x021o\\x01\\x021\\x7f\\tE\\x00K\\x00H\\x00\\x00\\xc3\\xf8\\xf3\\xf8\\xf7\\xf0\\xf4@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2002-11-12T00:00:00", "modifydate": "2002-11-13T09:45:53", "lines": 75, "newlines": 72, "modlines": 0, "user": "C838704"}, "text": ")ATTR\n _   type(INPUT) color(red)   intens(high)   hilite(uscore)\n +   type(text)  color(blue)  intens(low)    skip(on)\n $   type(output) color(green) intens(high)\n @   type(text) color(yellow) intens(high)\n ~   type(INPUT) intens(non)\n ?   type(OUTPUT) intens(NON)\n ! AREA(DYNAMIC)\n y TYPE(CHAR) COLOR(YELLOW)\n b TYPE(CHAR) COLOR(BLUE)\n)BODY EXPAND(\\\\) SMSG(POPUPMSG) LMSG(POPUPMSG)\n@&ZTIME\\-\\< DB2 Migrate Parameter Entry >\\-\\\n@&SID@===>_ZCMD\n@\n+Please enter details below for@MIGRATE from LIST+for$SSID+:Utilid:_MIGRID  +\n+\n+Listname  :_MIGRLDEF+  Enter name,@*+for list or@/+to create/modify list.\n+Templates -            For template names:-\n+  PunchDDN:_MIGRPDDN+  Enter name,@*+for list or@/+to create/modify template.\n+  UNLDDN  :_MIGRUDDN+  Enter name,@*+for list or@/+to create/modify template.\n+Datasets -\n+  MODPUNCH:_MIGRLDSN                                      +(unquoted)\n+  SYSMAP  :_MIGRMDSN                                      +(unquoted)\n+Destination -\n+  SSID    :_MIGRSSID+  Enter destination DB2 system id.\n+Sub load  :_Z+        @Y+for submit with unload or@N+to create seperate job\n+Foreign system -\n+  LPAR    :_MIGRLPAR+  Enter destination LPAR if not on same MVS system.\n+  TempDSN :_MIGRTDSN                                      +(unquoted)\n+  Password:~PASSWORD+  Password on destination LPAR\n+  Account :_MIGRACCT      +\n+  Ex Class:_Z+         Execution class (must be a valid class on dest system)\n+  MsgClass:_Z+         Message   class (must be a valid class on dest system)\n?Z+        IF (&MIGRSSID = &SSID) &MIGRLPAR\n)INIT\n .ZVARS = '(+\n            MIGRSUBL MIGRXCLS MIGRMCLS +\n            POPUPMSG +\n           )'\n &SID   = &ZSYSID\n\n &GC009B = 'Field required.'\n &GC002 = 'Punch and unload templates cannot be the same.'\n &GC003 = 'Destination system id required.'\n &GC004 = 'Destination system id cannot be the same as souce system id +\n           on the same LPAR.'\n)REINIT\n)PROC\n &XXX = TRUNC(&ZCMD,3)\n IF (&XXX \u00ac= DEB,DEF,'?')\n   IF (&MIGRLDEF \u00ac= '*','/')\n     VER(&MIGRLDEF,NB,NAME)\n     VER(&MIGRPDDN ,NB)\n     VER(&MIGRUDDN ,NB)\n     IF (&MIGRPDDN \u00ac= '*','/')\n       VER(&MIGRPDDN ,NAME)\n       IF (&MIGRUDDN \u00ac= '*','/')\n         VER(&MIGRUDDN ,NAME)\n         IF (&MIGRUDDN = &MIGRPDDN )\n           IF (&MIGRUDDN \u00ac= '*','/')\n             VER(&MIGRUDDN,NB,LIST,X&MIGRUDDN,MSG=GC002)\n         VER(&MIGRLDSN,NB)\n         VER(&MIGRMDSN,NB)\n         VER(&MIGRSSID,NB,NAME,MSG=GC003)\n         VER(&MIGRSUBL,NB,LIST,N,Y)\n         IF (&MIGRLPAR = &Z)\n           IF (&MIGRSSID = &SSID)\n              VER(&MIGRSSID,LIST,X&MIGRSSID,MSG=GC004)\n         ELSE\n           VER(&MIGRLPAR,NAME)\n           VER(&MIGRTDSN,NB)\n           VER(&PASSWORD,NB,NAME)\n           VER(&MIGRXCLS,NB)\n           VER(&MIGRMCLS,NB)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT898/CBT.V500.FILE898.PDS/DB2UTILS.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT898/CBT.V500.FILE898.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}