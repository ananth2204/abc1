{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011340000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 587860, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE148.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 587860, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 587860, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE148.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0b\\x03'", "DS1TRBAL": "b'\\xc3\\x1a'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x0f\\x00\\x0c\\x01\\x10\\x00\\x08\\x00\\x0c'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "THIS MEMBER HAS BEEN ADDED BY ARNOLD CASINGHINO. THIS FILE WAS\nSHIPPED AS SIX SEVERAL FILES ON A TAPE, FOR EASE OF USE EACH\nFILE HAS BEEN PUT IN THIS PDS AS A SEPARATE MEMBER.\n\n          FILE001          ASSEMBLER PROGRAMS\n          FILE002          ISPF CLISTS\n          FILE003          COBOL PROGRAMS\n          FILE004          ISPF MESSAGES\n          FILE005          ISPF PANELS\n          FILE006          ISPF SKELETONS\n\nTHE FOLLOWING INSTALLATION STEPS MAY BE FOLLOWED IN ANY ORDER:\n\nSTEP 1: COMPILE/ASSEMBLE THE COBOL AND ASM PROGRAMS INTO A LIBRARY THAT\n        IS ALLOCATED IN YOUR ISPPLIB CONCATENATION. ALTERNATIVELY, YOU\n        MAY LINK INTO LINKLIST TO AVOID USING ISPPLIB. NO SPECIAL\n        COMPILE PARMS; USE LANGLVL(2).\n\nSTEP 2: COPY THE CLIST MEMBERS TO YOUR CLIST LIBRARY, WHICH MUST BE\n        ACCESSIBLE BY YOUR SYSPROC CONCATENATION.\n\nSTEP 3: COPY THE ISPPLIB MEMBERS TO YOUR ISPPLIB, WHICH MUST BE\n        ACCESSIBLE BY YOUR ISPPLIB CONCATENATION.\n\n        IF YOU WANT TO DEFAULT TO A PARTICULAR PANVALET LIBRARY FOR\n        ++INCLUDE PROCESSING, MODIFY THE PANMSEL AND PANTOPDS\n        PANELS IN THE )INIT SECTION WITH YOUR DEFAULT DATA SET NAME.\n\nSTEP 4: COPY THE ISPSLIB MEMBERS TO YOUR ISPSLIB, WHICH MUST BE\n        ACCESSIBLE BY YOUR ISPSLIB CONCATENTAION.\n\n        MODIFY THE JOBCARD SKELETON ACCORDING TO YOUR NEEDS. SOME OF\n        THE VARIABLES ARE SET BY THE GENPARMS FUNCTION.\n\nSTEP 5: COPY THE ISPMLIB MEMBERS TO YOUR ISPMLIB, WHICH MUST BE\n        ACCESSIBLE BY YOUR ISPMLIB CONCATENTATION.\n\nYOU MAY USE THE \"ISPEXEC LIBDEF\" FUNCTION IF YOU DO NOT WANT TO PUT\nTHESE MEMBERS INTO YOUR ISPF ALLOCATIONS.  CODE THE PROPER LIBDEF\nFUNCTIONS IN CLIST=PANMENU TO POINT TO THE PROPER ISPF LIBRARIES.\n\nNOTES:\n\n* THESE FUNCTIONS WERE CODED ON ISPF RELEASE 2.3 AND TSO/E RELEASE 4.0,\n  AND THEREFORE MAY NOT BE FULLY SUPPORTED ON LOWER LEVEL RELEASES. SEE\n  DOCUMENTATION IN EACH CLIST FOR A LIST OF CALLED FUNCTIONS.\n\n* THE PANMENU CLIST CHECKS TO SEE IF A CERTAIN VARIABLE EXISTS IN THE\n  PROFILE POOL. IF NOT, IT CALLS CLIST=GENPARMS TO SET SCREEN COLORS AND\n  ATTRIBUTES, AND JOB CARD PARAMETERS. THE USER MAY SIMPLY HIT ENTER,\n  FOLLOWED BY THE END KEY, WHEN PRESENTED WITH THE GENPARMS SCREEN TO\n  ACCEPT THE DEFAULT COLORS. THIS WAY EACH USER CAN COLOR CUSTOMIZE\n  SCREENS WITHOUT UPDATING PANELS.\n\n  GENPARMS IS A GOOD TOOL TO USE AS A STANDARD FOR ALL ISPF DIALOGS, AS\n  IT SETS COMMON VARIABLES THAT MOST DIALOGS NEED.\n\n* A PROTECTION KEY MUST BE SPECIFIED FOR PROTECTED LIBARIES, EVEN\n  WHEN ONLY BROWSING THE LIBRARY.  THAT IS BECAUSE MEMBER SELECTION\n  LISTS ARE BUILT USING THE '++PRINT 0-UP' COMMAND, WHICH REQUIRES\n  THE PROTECTION KEY.\n\n* JUST BEFORE SUBMITTING A JOB IN FOREGROUND OR BACKGROUND, THE\n  SYSIN STATMENTS OR THE JCL MAY BE REVIEWED BY THE USER. GENREVU AND\n  GENSUB ARE CALLED BY EACH FUNCTION THAT PRODUCES JCL.\n\n  GENREVU AND GENSUB ARE GOOD TOOLS TO USE AS A STANDARD FOR ISPF\n  DIALOGS, AS THEY ALLOW THE USER TO MAKE LAST-MINUTE CHANGES.\n\n* THE COBOL PROGRAMS DO NOT DO ANYTHING THAT A CLIST CAN NOT DO; THEY\n  ARE CODED SIMPLY FOR PERFORMANCE REASONS.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FILE001": {"ttr": 519, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "./       ADD   NAME=FIXUPDSN\n         TITLE 'FIXUP DSN FOR ISPF CLIST AND SKELETON PROCESSING -V2'\n*---------------------------------------------------------------------*\n*        FIXUPDSN IS AN ISPF PROGRAM DESIGNED TO SIMPLIFY             *\n*        CLIST PROCESSING UNDER ISPF BY DETERMINING IF A              *\n*        DSN PASSED FROM AN ISPF PANEL IS FULLY QUALIFIED IN          *\n*        QUOTES OR NOT.                                               *\n*                                                                     *\n*        IF IT IS FULLY QUALIFIED IN QUOTES THEN THE QUOTES ARE       *\n*        REMOVED AND IT IS PUT BACK INTO THE ISPF VARIABLE POOL.      *\n*                                                                     *\n*        IF IT IS NOT IN QUOTES THEN THE TSO PREFIX (ZPREFIX) IS      *\n*        APPENDED IN FRONT AND IT IS PUT BACK INTO THE ISPF           *\n*        VARIABLE POOL.                                               *\n*                                                                     *\n*        TO INVOKE VIA CLIST:                                         *\n*              ISPEXEC SELECT PGM(FIXUPDSN) PARM(DSN-VARIABLE-NAME)   *\n*                                                                     *\n*        TO RETRIEVE THE UPDATED DSN:                                 *\n*              ISPEXEC VGET DSN-VARIABLE-NAME                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\nFIXUPDSN $PROLOG\n         L     R1,0(R1)           * LOAD ADDR OF PARM\n         LH    R2,0(R1)           * LOAD LENGTH OF PARM\n         LTR   R2,R2              *    LENGTH OF ZERO\n         BZ    NOPARM             * NO - BYPASS MOVE\n         BCTR  R2,R0              *    SUBTRACT LENGTH BY 1\n         EX    R2,MVCPARM         * EXECUTE THE MOVE\n         B     STARTIT\nMVCPARM  MVC   PARM(0),2(1)\nSTARTIT  DS    0H\n         CALL  ISPLINK,(VDEFINE,PNAME,WORK,CHAR,L56,OPT),VL\n         CALL  ISPLINK,(VGET,PNAME),VL\n         CLI   WORK,X'7D'          QUOTED DSN ?\n         BNE   ADDPRE              NO - SO ADD PREFIX\n         LA    R1,WORK+1           -> FIRST REAL CHARACTER\n         LA    R5,DSNWORK\n         LA    R6,56               MAX SEARCH\nDSNMOVE  CLI   0(R1),X'7D'\n         BE    VPUTIT\n         MVC   0(1,R5),0(R1)\n         LA    R5,1(R5)            INCR R5\n         LA    R1,1(R1)            INCR R1\n         BCT   R6,DSNMOVE\nVPUTIT   DS    0H\n         BCTR  R6,R0                   LESS 1\n         LA    R1,=H'56'\n         SR    R1,R6\n         ST    R1,L56                  RESET LENGTH\n         MVC   WORK,DSNWORK\n         CALL  ISPLINK,(VPUT,PNAME,SHARED),VL\n         CALL  ISPLINK,(VDELETE,PNAME),VL\n         B     LEAVE\nADDPRE   MVC   DSNWORK,WORK        SAVE DSN\n         CALL  ISPLINK,(VDEFINE,ZPREF,PREFIX,CHAR,L8,OPT),VL\n         CALL  ISPLINK,(VGET,ZPREF),VL\n         CALL  ISPLINK,(VDELETE,ZPREF),VL\n         LA    R1,PREFIX\n         LA    R2,8\nFPREE    CLI   0(R1),C' '          END OF PREFIX\n         BE    MVDSN               YES\n         LA    R1,1(R1)\n         BCT   R2,FPREE\nMVDSN    MVI   0(R1),C'.'\n         LA    R1,1(R1)\n         LA    R2,48(R2)               ADD 48 TO COUNT\n         LA    R3,DSNWORK\nMDSN     CLI   0(R3),C' '          END OF DSN ?\n         BE    VPUTDSN             YES\n         MVC   0(1,R1),0(R3)\n         LA    R1,1(R1)\n         LA    R3,1(R3)\n         BCT   R2,MDSN\nVPUTDSN  DS    0H\n         LA    R1,56\n         SR    R1,R2\n         ST    R1,L56                  RESET LENGTH\n         CALL  ISPLINK,(VPUT,PNAME,SHARED),VL\n         CALL  ISPLINK,(VDELETE,PNAME),VL\nLEAVE    $EPILOG\n         SPACE\nNOPARM   $EPILOG 4\n         LTORG\nPNAME    DC    C'('\nPARM     DC    CL8' '\n         DC    C')'\nPREFIX   DC    CL56' '\nWORK     EQU   PREFIX,56\nDSNWORK  DC    CL56' '\nL8       DC    F'8'\nL56      DC    F'56'\nOPT      DC    C'(COPY)'\nSHARED   DC    CL8'SHARED'                                *LBD 07/84*\nCHAR     DC    CL8'CHAR'\nZPREF    DC    C'(ZPREFIX)'\nVGET     DC    CL8'VGET'\nVPUT     DC    CL8'VPUT'\nVDELETE  DC    CL8'VDELETE'\nVDEFINE  DC    CL8'VDEFINE'\n         END\n./       ADD   NAME=JOBCHAR\n         TITLE 'INCREMENT JOBNAME CHARACTER'\n         PRINT NOGEN\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*  Author:  Charles Ritchie                                           *\n*           Systems Programming                                       *\n*           First Security Service Company                            *\n*           260 N. Charles Lindbergh Drive                            *\n*           Salt Lake City, UT  84116                                 *\n*           (801) 350-6075                                            *\n*                                                                     *\n*  Written: 11/25/86                                                  *\n*                                                                     *\n*  The purpose of this program is to \"increment\" a one-character      *\n*  ISPF variable, which may later be used as part of a jobname when   *\n*  building JCL via an ISPF dialog.                                   *\n*                                                                     *\n*  The character is incremented through the alphabet (A-Z), the ten   *\n*  numeric digits (0-9), and the characters \"@\", \"#\", and \"$\".  At    *\n*  that point, the character is reset to \"A\".                         *\n*                                                                     *\n*                                                                     *\n*  This facility may be used as follows:                              *\n*                                                                     *\n*  In dialog (CLIST) ===>    ISPEXEC SELECT PGM(JOBCHAR)              *\n*                            ISPEXEC FTOPEN ....                      *\n*                            ISPEXEC FTINCL ....                      *\n*                                                                     *\n*  In skeleton       ===>    //&ZUSER.&JOBCHAR  JOB ...               *\n*                                                                     *\n*  Each time the above dialog is executed, the jobname will           *\n*  increment, thus avoiding \"duplicate jobname\" delays.               *\n*                                                                     *\n*  MACROs used:                                                       *\n*                                                                     *\n*    VSIN    - Saves registers, etc.                                  *\n*    VSOUT   - Sets return code and returns to caller                 *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nJOBCHAR$ CSECT\n         VSIN  RITCHIE          HOUSEKEEPING\n         CALL  ISPLINK,(VDEFINE,XJOBCHAR+4,JOBCHAR,CHAR,XJOBCHAR),VL\n         CALL  ISPLINK,(VGET,LIST1,PROFILE),VL\n         TR    JOBCHAR,TRANTAB  XLATE CHARACTER INTO TABLE DISPACEMENT\n         SR    R2,R2            CLEAR R2\n         IC    R2,JOBCHAR       LOAD JOBCHAR NUMBER INTO R2\n         LA    R2,1(R2)         INCREMENT R2 BY 1\n         CH    R2,LASTCHAR      ARE WE PAST THE LAST CHARACTER ($)?\n         BNH   *+6              IF NOT, SKIP AHEAD\n         SR    R2,R2            OTHERWISE, RESET TO 0 (A)\n         STC   R2,JOBCHAR       STORE UPDATED VALUE INTO JOBCHAR\n         TR    JOBCHAR,TRANTAB  XLATE BACK INTO PRINTABLE CHARACTER\n         CALL  ISPLINK,(VPUT,LIST1,PROFILE),VL\n         VSOUT RC=(R15)         RETURN TO CALLER\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*        D E C L A R A T I V E S                                      *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nJOBCHAR  DS    CL1\nCHAR     DC    C'CHAR '\nLASTCHAR DC    H'38'            VALUE OF LAST CHARACTER ($)\nLIST1    DC    C'(JOBCHAR)'\nPROFILE  DC    C'PROFILE '\nTRANTAB  DC    X'C1C2C3C4C5C6C7C8C9D1D2D3D4D5D6D7'\n         DC    X'D8D9E2E3E4E5E6E7E8E9F0F1F2F3F4F5'\n         DC    X'F6F7F8F97C7B5B2728292A2B2C2D2E2F'\n         DC    X'303132333435363738393A3B3C3D3E3F'\n         DC    X'404142434445464748494A4B4C4D4E4F'\n         DC    X'505152535455565758595A265C5D5E5F'\n         DC    X'606162636465666768696A6B6C6D6E6F'\n         DC    X'707172737475767778797A25247D7E7F'\n         DC    X'808182838485868788898A8B8C8D8E8F'\n         DC    X'909192939495969798999A9B9C9D9E9F'\n         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C0000102030405060708CACBCCCDCECF'\n         DC    X'D0090A0B0C0D0E0F1011DADBDCDDDEDF'\n         DC    X'E0E11213141516171819EAEBECEDEEEF'\n         DC    X'1A1B1C1D1E1F20212223FAFBFCFDFEFF'\nVDEFINE  DC    C'VDEFINE '\nVGET     DC    C'VGET '\nVPUT     DC    C'VPUT '\nXJOBCHAR DC    A(L'JOBCHAR),C'JOBCHAR '\n         END\n./       ADD   NAME=VSIN\n         MACRO\n&VSL     VSIN      &AUTHOR,&BASE,&PREF=R,&OPT=,&SP=0\n         GBLC  &A            CSECT FIRST 4 CHARS (OR LESS)\n         GBLC  &OPTN         &OPT PARM VALUE\n         GBLC  &VSINSP       GETMAIN SUBPOOL NUMBER\n         LCLA  &BN           NUMBER OF BASE REGS SPECIFIED\n         LCLA  &BX1          INDEX TO BASE REGS\n         LCLA  &BX2          INDEX TO BASE REGS\n         LCLA  &K            NUMBER CHARS IN &BASE\n         LCLA  &V            NUMBER CHARS IN CSECTNAME\n         LCLC  &ATHR         NUMBER OF BASE REGS SPECIFIED\n         LCLC  &BAS          BASE REG VALUE BEING WORKED WITH\n         LCLC  &BASES        MULTIPLE BASE REG STRING\n         LCLC  &BR           BRANCH LABEL FOR NORENT CODE\n         LCLC  &TAG          CSECT ID TAG\n         LCLC  &CSNAM        CSECT NAME\n         AIF   (T'&OPT EQ 'O').NOPTN   OMMITTED &OPT SET NULL &OPTN\n         AIF   ('&OPT' EQ 'NORENT').NOPTN   NULL &OPTN\n&OPTN    SETC  '&OPT'\n&VSINSP  SETC  '&SP'\n         AGO   .CCSECTN\n.NOPTN   ANOP\n&OPTN    SETC  ''\n.CCSECTN AIF   ('&SYSECT' NE '').CCS1\n.E0010   MNOTE 8,'CSECTNAME MISSING; MACRO TERMINATED'\n         MEXIT\n.CCS1    ANOP\n&V       SETA  8-K'&SYSECT\n         AIF   ('&V' EQ '8').E0010\n&CSNAM   SETC  '&SYSECT'\n         AIF   (K'&SYSECT EQ 8).CAUTHR\n.LP      ANOP\n&CSNAM   SETC  '&CSNAM..'\n&V       SETA  &V-1\n         AIF   (&V GT 0).LP\n.CAUTHR  ANOP\n&ATHR    SETC  '&AUTHOR'\n         AIF   (K'&ATHR LE 8).CA2\n.E0020   MNOTE 4,'AUTHOR NAME TRUNCATED TO 8 CHARACTERS'\n&ATHR    SETC  '&AUTHOR'(1,8)\n         AGO   .CA3\n.CA2     AIF   ('&ATHR' NE '').CA3\n.E0021   MNOTE 4,'AUTHOR NAME OMMITTED; SET TO ''NOAUTHOR'''\n&ATHR    SETC  'NOAUTHOR'\n.CA3     AIF   (K'&ATHR EQ 8).OKAY\n&V       SETA  8-K'&ATHR\n.LP2     ANOP\n&ATHR    SETC  '&ATHR..'\n.IV      ANOP\n&V       SETA  &V-1\n         AIF   (&V GT 0).LP2\n.OKAY    ANOP\n&TAG     SETC  '&CSNAM.&ATHR'\n         USING *,15\n&VSL     SAVE  (14,12),,&TAG.&SYSDATE...&SYSTIME\n         AIF   (K'&SYSECT LE 4).SA\n&A       SETC  '&SYSECT'(1,4)\n         AGO   .AS\n.SA      ANOP\n&A       SETC  '&SYSECT'\n.AS      ANOP\n         AIF   ('&OPTN' NE '').COPT    CHECK OPT PARM\n.NORENT  ANOP\n&BR      SETC  '&A.&SYSNDX'\n         LA    14,&A.SAVE    LOAD R14 WITH ADDR OF SAVE AREA CR 060989\n         B     &BR           SKIP OVER SAVE AREA             CR 060989\n&A.SAVE  DC    18F'0'        SAVE AREA\n         SPACE 1\n&BR      EQU   *\n         AGO   .CHAIN\n.COPT    ANOP                CHECK 'OPT'\n         AIF   ('&OPTN' EQ 'RENT').RENT\n.E0013A  MNOTE 8,'OPT=&OPT IS INVALID; MACRO TERMINATED'\n         MEXIT\n.RENT    ANOP\n         SR    0,0           CLEAR R0 ...\n         LR    1,0             AND   R1\n         LA    2,18*4        SIZE OF SAVE\n         GETMAIN  RC,LV=(2),SP=&SP\n         LR    14,1          A(NEW SAVEAREA)\n.CHAIN   ANOP\n         ST    14,8(,13)     POINT PREVIOUS SAVE HERE\n         ST    13,4(,14)     POINT CURRENT SAVE TO PREVIOUS\n         AIF   (T'&OPT EQ 'O').NOREST  FOR THE WICKED\n         LM    0,2,20(13)    RESTORE WORK REGS\n         L     15,16(13)     RESTORE REG 15 TOO!            EW 08/01/80\n.NOREST  ANOP\n         LR    13,14         SET CURRENT SAVE POINTER\n         AIF   (T'&BASE NE 'O').SBX\n.SD      ANOP\n         AIF   ('&OPTN' EQ 'RENT').SD12\n.SD13    ANOP\n&BAS     SETC  '13'\n         AGO   .SBX\n.SD12    ANOP\n&BAS     SETC  '12'\n.SBX     ANOP\n&BX1     SETA  0\n&BX2     SETA  1\n         AIF   (T'&BASE EQ 'O').CBXV\n&BN      SETA  N'&BASE       NUMBER OF BASE REGS\n         AIF   ('&BN' EQ '1').SB\n&K       SETA  K'&BASE       NUMBER OF CHARS IN &BASE\n.SB      ANOP\n&BAS     SETC  '&BASE(&BX2)'\n.CBXV    ANOP\n         AIF   ('&BX2' GT '1').CREGS\n         DROP  15\n         AIF   ('&BAS' EQ '13' AND '&OPTN' EQ 'RENT').E0013\n         AIF   ('&BAS' EQ '13' AND '&OPTN' NE '').E0013A\n         AIF   ('&BAS' EQ '13').USE13\n         LR    &BAS,15\n         AIF   ('&BN' GT '1').SBS\n.USEXX   ANOP\n         USING &SYSECT,&BAS\n         AGO   .CEQR         SINGLE BASE SET, ISSUE EQREG\n.SBS     ANOP\n&BASES   SETC  '&BASE'(2,&K-2)         MULTIPLE BASES\n         USING &SYSECT,&BASES\n         AGO   .IBX          INCREMENT INDEXES\n.USE13   ANOP\n         AIF   ('&BN' GT '1').USE13M\n         USING &A.SAVE,13\n         AGO   .IBX          INCREMENT INDEXES\n.USE13M  ANOP\n&BASES   SETC  '&BASE'(2,&K-2)\n         USING &A.SAVE,&BASES\n         AGO   .IBX\n.CREGS   ANOP\n         AIF   ('&BAS' NE '13').SETB\n         AIF   ('&OPTN' EQ 'RENT').E0013\n.E0013B  MNOTE 8,'REG 13 MUST BE FIRST WHEN USED AS BASE; MACRO TERMINA-\n               TED.'\n         MEXIT\n.E0013   MNOTE 8,'BASE REG 13 IS INVALID WHEN OPT=RENT; MACRO TERMINATE-\n               D.'\n         MEXIT\n.SETB    ANOP\n         LA    &BAS,4095(,&BASE(&BX1))\n         LA    &BAS,1(,&BAS)\n.IBX     ANOP\n&BX1     SETA  &BX2\n&BX2     SETA  &BX2+1\n         AIF   ('&BX2' LE '&BN').SB\n.CEQR    ANOP\n         AIF   (T'&PREF EQ 'O').EJ\n         SPACE 1\n         EQREG PREFIX=&PREF\n.EJ      ANOP\n         SPACE 1\n         MEND\n./       ADD   NAME=VSOUT\n         MACRO\n&LBL     VSOUT &RC=\n         GBLC  &A\n         GBLC  &OPTN\n         GBLC  &VSINSP            VSIN GETMAIN SUBPOOL\n         LCLA  &RCK               &RC CHARACTER COUNT\n         LCLC  &RCRV              &RC REGISTER VALUE\n         AIF   (T'&LBL EQ 'O').CRC\n&LBL     EQU   *\n.CRC     ANOP\n         AIF   (T'&RC EQ 'O').Z15\n&RCK     SETA  K'&RC\n         AIF   (N'&RC EQ 1).RCNOK\n         MNOTE 8,'RC=&RC IS INVALID; MACRO TERMINATED'\n         MEXIT\n.RCNOK   ANOP\n         AIF   ('&RC'(1,1) NE '(' AND '&RC'(&RCK,1) NE ')').NP\n&RCRV    SETC  '&RC'(2,&RCK-2)    RC REGISTER VALUE\n         AIF   ('&RCRV' EQ '15').COPT\n         LR    15,&RCRV           GET RETURN CODE VALUE\n         AGO   .COPT\n.NP      ANOP\n         AIF   (T'&RC NE 'N').SYM\n         AIF   ('&RC' LE '4095').LA15\n         MNOTE 8,'RC=&RC EXCEEDS 4095 MAXIMUM; MACRO TERMINATED'\n         MEXIT\n.LA15    ANOP\n         LA    15,&RC\n         AGO   .COPT\n.SYM     ANOP\n         L     15,&RC\n         AGO   .COPT                                            28DEC79\n.Z15     ANOP\n         SR    15,15                   DEFAULT RETURN CODE: ZERO\n.COPT    ANOP\n         AIF   ('&OPTN' EQ '' OR '&OPTN' NE 'RENT').NORENT\n.RENT    ANOP\n         LR    2,13                    COPY A(EXTERNAL-SAVE)\n.NORENT  ANOP\n         L     13,4(,13)               POINT TO CALLER'S SAVE\n         AIF   ('&OPTN' EQ '' OR '&OPTN' NE 'RENT').RET\n         LA    3,18*4                  SAVEAREA SIZE\n         LR    4,15                    SAVE CONDCODE          11/14/85\n         FREEMAIN  RC,A=(2),LV=(3),SP=&VSINSP FREE EXTERNAL SAVE AREA\n         LR    15,4                    RESTORE CONDCODE       11/14/85\n.RET     ANOP\n         RETURN (14,12),RC=(15)        RETURN TO CALLER\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FILE002": {"ttr": 526, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "./       ADD   NAME=EDRESET\nISREDIT MACRO\n  ISREDIT RESET SPECIAL\nEXIT CODE(0)\n./       ADD   NAME=GDGCONV\n/**********************************************************************/\n/*                                                                    */\n/*  CLIST NAME:       GDGCONV                                         */\n/*                                                                    */\n/*  AUTHOR:                                                           */\n/*    Geoffrey McIntyre                                               */\n/*    Computer Operations Technical Support                           */\n/*    First Security Service Company                                  */\n/*    260 N. Charles Lindbergh Drive                                  */\n/*    Salt Lake City, UT  84116                                       */\n/*    (801) 350-6519                                                  */\n/*                                                                    */\n/*  LAST UPDATE:      April 25, 1988                                  */\n/*                                                                    */\n/*  DESCRIPTION:                                                      */\n/*                                                                    */\n/*    CLIST allocation commands accept only GDG's that are specified  */\n/*    with an absolute GDG number.  This function will accept the     */\n/*    relative GDG number of a given entry and return its absolute    */\n/*    number to the calling function.  Thus, users can now enter      */\n/*    relative GDG's in panel input fields.  Output variable con-     */\n/*    taining the fully qualified absolute GDG:  ABSGDG               */\n/*                                                                    */\n/*  CALLING PARMS:    RELGDG                                          */\n/*                                                                    */\n/*  RETURNED PARMS:   ABSGDG  FOUND                                   */\n/*                                                                    */\n/*  TABLES:           RELGDG                                          */\n/*                                                                    */\n/*  MSGS:             GEN206                                          */\n/*                                                                    */\n/*  SKELETONS:        NONE                                            */\n/*                                                                    */\n/*  PANELS:           NONE                                            */\n/*                                                                    */\n/*  CALLED FUNCTIONS: ISPEXEC:  CONTROL  LOG                          */\n/*                              TBADD    TBCLOSE  TBCREATE            */\n/*                              TBEND    TBTOP    VGET  VPUT          */\n/*                    OTHER:    LISTCAT                               */\n/*                                                                    */\n/*  N.B.:  SYSOUTTRAP is used in this dialog.  When making modifica-  */\n/*         tions, make sure that an attempt is not made to trap       */\n/*         SYSOUT from 2 consecutive commands.  Results are un-       */\n/*         predictable.  Consult the latest manual for more complete  */\n/*         information.                                               */\n/*                                                                    */\n/**********************************************************************/\n/*                                                                    */\n/* Check to see if a trace of the CLIST function has been requested.  */\n/* Turn on the requested tracing level.                               */\n\nISPEXEC VGET (QTRACE QTSTNAME)\nSET QNAME  EQ &SYSICMD\n\nIF &QTRACE GT 0 THEN DO\n  WRITE ************************\n  WRITE ** CLIST = &QNAME   **\n  WRITE ************************\n  ISPEXEC LOG MSG(GEN206)\n  IF &QTRACE EQ 2 THEN CONTROL SYMLIST CONLIST LIST MSG\n  ELSE IF &QTRACE EQ 3 AND &QTSTNAME EQ &QNAME THEN +\n    CONTROL SYMLIST CONLIST LIST MSG\n  END\n\nCONTROL ASIS\nCONTROL MSG                               /* Display error messages.  */\nISPEXEC CONTROL ERRORS RETURN             /* Return to function when  */\n                                          /* errors occur.            */\nSTART: -\nISPEXEC VGET (RELGDG) SHARED\nSET &PO = &STR((\nSET &PC = )\nSET &TEMP_VAR1 = &EVAL(&SYSINDEX(&PO,&STR(&RELGDG))+1)\nSET &TEMP_VAR2 = &EVAL(&SYSINDEX(&STR(&PC),&STR(&RELGDG))-1)\nSET &RELGDG_NUM = &SUBSTR(&TEMP_VAR1:&TEMP_VAR2,&STR(&RELGDG))\nSET &GDGBASE = &SUBSTR(1:&EVAL(&TEMP_VAR1-2),&STR(&RELGDG))\n                                          /*                          */\nISPEXEC TBCREATE RELGDG                  /* Create table that will   */-\n        NAMES(RECNO RLTGDG)              /* contain gdg entries.     */-\n        NOWRITE                           /*                          */\n                                          /*                          */\nSET &SYSOUTTRAP = 1000                    /* Trap up to 1000 lines of */\n                                          /* LISTCAT output.          */\nLISTC EN('&GDGBASE') NAME\nIF &LASTCC NE 0 THEN                     /*                          */-\n  DO                                      /*                          */\n    SET &FOUND = NO                       /*                          */\n    GOTO ENDIT                            /*                          */\n  END                                     /*                          */\n                                          /* LISTCAT output.          */\nSET &B   = &SYSOUTLINE                    /* Last line# of sysouttrap.*/\nSET &SYSOUTTRAP = 0                       /* Reset SYSOUTTRAP.        */\nSET &A   = 1                              /* Set counter.             */\nSET &RECNO = 0                            /*                          */\n                                          /*                          */\nDO WHILE &A LE &B                         /* Read each record until   */\n  SET &LINE = &&SYSOUTLINE&A              /* EOF.                     */\n  SET &D = &SUBSTR(4:10,&LINE)            /* If the first 7 chars     */\n  IF &STR(&D) = &STR(NONVSAM) THEN       /* are 'NONVSAM', then      */-\n    DO                                    /*                          */\n      SET &GDG = &SYSINDEX(V00,&LINE)     /* find ending col. of dsn, */\n      SET &RLTGDG = &SUBSTR(17:&EVAL(&GDG+2),&LINE)\n      ISPEXEC TBADD RELGDG                /* and add to table, and    */\n      SET &RECNO       = &RECNO + 1       /* increment the record cnt.*/\n    END                                   /*                          */\n  SET &A = &A + 1                         /* Increment loop counter.  */\nEND                                       /* DO WHILE &A LE &B        */\n                                          /*                          */\nSET &CRP = &RECNO + &RELGDG_NUM           /* Point CRP to row number  */\nISPEXEC TBTOP RELGDG                      /* containing the absolute  */\nISPEXEC TBSKIP RELGDG NUMBER(&CRP)        /* gdg.                     */\nIF &LASTCC GE 8 THEN                      /*If not found, so indicate*/-\n  DO                                      /*                          */\n    SET &FOUND = NO                       /*                          */\n    SET &ABSGDG = NULLFILE                /*                          */\n    GOTO ENDIT                            /*                          */\n  END                                     /*                          */\nSET &FOUND  = YES                         /*                          */\nSET &ABSGDG = &RLTGDG                     /*                          */\n                                          /*                          */\nENDIT: -\nISPEXEC VPUT (ABSGDG FOUND) SHARED        /* Put gdg and found msg    */\n                                          /* back to pool.            */\nISPEXEC TBEND RELGDG                      /* Delete the table.        */\n./       ADD   NAME=GENDSNIN\nCONTROL NOLIST NOCONLIST NOSYMLIST NOMSG\n/**********************************************************************/\n/*  AUTHOR:                                                           */\n/*    Geoffrey McIntyre                                               */\n/*    Computer Operations Technical Support                           */\n/*    First Security Service Company                                  */\n/*    260 N. Charles Lindbergh Drive                                  */\n/*    Salt Lake City, UT  84116                                       */\n/*    (801) 350-6519                                                  */\n/*                                                                    */\n/* This clist 'fixes up' the dsname (removes quotes, if there are no  */\n/* quotes it adds the userid).  Then it checks to see if the dsname   */\n/* is properly cataloged, or if the member name exists.               */\n/*                                                                    */\n/* SHARED POOL VARIABLES:                                             */\n/*   DSNINFO  (INPUT AND OUTPUT)                                      */\n/*   REDIS    (OUTPUT)  -- 'YES' IF THERE IS AN ERROR                 */\n/*   ANSWER   (OUTPUT)  -- &SYSDSN VARIABLE                           */\n/*                                                                    */\n/**********************************************************************/\n       ISPEXEC VGET (DSNINFO) SHARED\n       ISPEXEC SELECT PGM(FIXUPDSN) PARM(DSNINFO)\n       ISPEXEC VGET DSNINFO\n\n       AGAIN: -\n       SET &REDIS = NO\n       SET &ANSWER = &STR(&SYSDSN('&DSNINFO')) /* VFY FILE EXISTANCE */\n       IF &STR(&ANSWER) = OK THEN GOTO STOP\n\n       IF &STR(&ANSWER) = &STR(DATASET NOT FOUND) THEN -\n         DO\n           SET ZEDSMSG = &STR(FILE NOT FOUND)\n           SET ZEDLMSG = &STR('&DSNINFO' NOT FOUND, NOT CATALOGED)\n           ISPEXEC SETMSG MSG(ISRZ001)\n           SET &REDIS = YES             /* REDISPLAY INPUT PANEL      */\n         END\n\n       IF &SUBSTR(1:15,&ANSWER) = &STR(INVALID DATASET) THEN           -\n         DO\n           SET &RELGDG = &STR(&DSNINFO)\n           ISPEXEC VPUT RELGDG SHARED\n           %GDGCONV\n           ISPEXEC VGET (ABSGDG FOUND) SHARED\n\n           IF &FOUND = NO THEN -\n             DO\n               SET ZEDSMSG = &STR(FILE NOT FOUND)\n               SET ZEDLMSG = &STR('&DSNINFO' NOT FOUND, +\n                             NOT CATALOGED)\n               ISPEXEC SETMSG MSG(ISRZ001)\n               SET &REDIS = YES         /* REDISPLAY INPUT PANEL      */\n               GOTO STOP\n             END\n\n           SET &DSNINFO = &ABSGDG\n           ISPEXEC VPUT DSNINFO SHARED\n           GOTO AGAIN\n         END\n\n       IF &SUBSTR(1:16,&ANSWER) = &STR(MEMBER SPECIFIED) THEN          +\n         DO\n           SET ZEDSMSG = &STR(FILE NOT PARTITIONED)\n           SET ZEDLMSG = &STR(MEMBER SPECIFIED, +\n                         BUT DATA SET IS NOT PARTITIONED)\n           ISPEXEC SETMSG MSG(ISRZ001)  /*                           */\n           SET &REDIS = YES             /* REDISPLAY INPUT PANEL     */\n         END\n\n       IF &SUBSTR(1:16,&ANSWER) = &STR(MEMBER NOT FOUND) THEN          +\n         DO\n           SET ZEDSMSG = &STR(MEMBER NOT FOUND)\n           SET ZEDLMSG = &STR(MEMBER DOES NOT EXIST +\n                         IN '&DSNINFO')\n           ISPEXEC SETMSG MSG(ISRZ001)  /*                           */\n           SET &REDIS = YES             /* REDISPLAY INPUT PANEL      */\n         END\nSTOP:  ISPEXEC VPUT (REDIS ANSWER) SHARED\n./       ADD   NAME=GENPARMS\n/* Check to see if a trace of the CLIST function has been requested. */\n/* Turn on the requested tracing level.                              */\n\nISPEXEC VGET (QTRACE QTSTNAME)\nSET QNAME  EQ &SYSICMD\n\nIF &QTRACE GT 0 THEN DO\n  WRITE ************************\n  WRITE ** CLIST = &QNAME   **\n  WRITE ************************\n  ISPEXEC LOG MSG(GEN206)\n  IF &QTRACE EQ 2 THEN CONTROL SYMLIST CONLIST LIST MSG\n  ELSE IF &QTRACE EQ 3 AND &QTSTNAME EQ &QNAME THEN +\n    CONTROL SYMLIST CONLIST LIST MSG\n  END\n\nCONTROL ASIS\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n/*                                                                   */\n/*  CLIST NAME:       GENPARMS                                       */\n/*                                                                   */\n/*  AUTHOR:                                                          */\n/*    Charles A. Ritchie, First Security Bank, Salt Lake City        */\n/*                                                                   */\n/*  LAST UPDATE:      October 15, 1988                               */\n/*    Initial release of CLIST.                                      */\n/*                                                                   */\n/*  DESCRIPTION:                                                     */\n/*    Allows the user to set various global values which will be     */\n/*    used throughout the SCU utilities, such as JOBCARD parameters  */\n/*    and display colors.                                            */\n/*                                                                   */\n/*  CALLING PARMS:    None                                           */\n/*                                                                   */\n/*  TABLES:           None                                           */\n/*                                                                   */\n/*  MSGS:                                                            */\n/*    GEN303   - Parameters updated.                                 */\n/*                                                                   */\n/*  INITIATED BY:                                                    */\n/*    GENPARMS - This dialog may be invoked directly by the user.    */\n/*                                                                   */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nTOP: +\nISPEXEC CONTROL DISPLAY REFRESH\nISPEXEC DISPLAY PANEL(GENPARMS) CURSOR(&CURSOR)\nIF &LASTCC EQ 8 THEN GOTO ENDIT\n\nISPEXEC SETMSG MSG(GEN303)\n\nGOTO TOP\n\nENDIT: +\nEXIT CODE(0)\n./       ADD   NAME=GENREVU\nPROC 1 DSN\n\n/* Check to see if a trace of the CLIST function has been requested. */\n/* Turn on the requested tracing level.                              */\n\nISPEXEC VGET (QTRACE QTSTNAME)\nSET QNAME  EQ &SYSICMD\n\nIF &QTRACE GT 0 THEN DO\n  WRITE ************************\n  WRITE ** CLIST = &QNAME   **\n  WRITE ************************\n  ISPEXEC LOG MSG(GEN206)\n  IF &QTRACE EQ 2 THEN CONTROL SYMLIST CONLIST LIST MSG\n  ELSE IF &QTRACE EQ 3 AND &QTSTNAME EQ &QNAME THEN +\n    CONTROL SYMLIST CONLIST LIST MSG\n  END\n\nCONTROL ASIS\n\n/* This CLIST is a generalized review CLIST which displays ISPF      */\n/* panel GENREVU and allows the user to:                             */\n/*                                                                   */\n/*   1.  Proceed with processing as normal                           */\n/*   2.  Browse the data set                                         */\n/*   3.  Indicate the CLIST should be terminated (via a LASTCC=12)   */\n/*   4.  Edit the data set                                           */\n/*                                                                   */\n/*  This CLIST may be useful in any application that builds non-JCL  */\n/*  data (such as control cards for a program to be invoked later).  */\n/*  By using GENREVU, the user may review and/or update this data    */\n/*  and indicate to the calling CLIST (via the return code) whether  */\n/*  to continue processing or not.                                   */\n\nCONTROL PROMPT\n\nSET &DSNX = &DSN\nISPEXEC VPUT DSNX\nISPEXEC SELECT PGM(FIXUPDSN) PARM(DSNX)\nISPEXEC VGET DSNX\nSET &DSNX = &DSNX  /* REMOVE TRAILING BLANKS PER ISPF/PDF V2 */\nSET &GENRVRC EQ 0\n\nDISPLAY: +\nISPEXEC DISPLAY PANEL(GENREVU)\nSET &RC EQ &LASTCC\nIF &RC EQ 8 THEN DO\n  SET GENRVRC EQ 8\n  GOTO ENDIT\n  END\n\nIF &SOPT = B THEN ISPEXEC BROWSE DATASET('&DSNX')\n\nIF &SOPT = C THEN DO\n  SET GENRVRC = 12\n  GOTO ENDIT\n  END\n\nIF &SOPT = E THEN DO\n  ISPEXEC EDIT DATASET('&DSNX') MACRO(EDRESET)\n  IF &LASTCC EQ 0 THEN ISPEXEC SETMSG MSG(ISRU244)\n  END\n\nIF &SOPT = P THEN GOTO ENDIT\n\nGOTO DISPLAY    /* ASK THE QUESTION AGAIN */\n\nENDIT: +\nEXIT CODE(&GENRVRC)\n./       ADD   NAME=GENSUB\nPROC 1 DSN\n\n/* Check to see if a trace of the CLIST function has been requested. */\n/* Turn on the requested tracing level.                              */\n\nISPEXEC VGET (QTRACE QTSTNAME)\nSET QNAME  EQ &SYSICMD\n\nIF &QTRACE GT 0 THEN DO\n  WRITE ************************\n  WRITE ** CLIST = &QNAME   **\n  WRITE ************************\n  ISPEXEC LOG MSG(GEN206)\n  IF &QTRACE EQ 2 THEN CONTROL SYMLIST CONLIST LIST MSG\n  ELSE IF &QTRACE EQ 3 AND &QTSTNAME EQ &QNAME THEN +\n    CONTROL SYMLIST CONLIST LIST MSG\n  END\n\nCONTROL ASIS\n\n/* This CLIST is a generalized SUBMIT CLIST which displays ISPF      */\n/* panel GENSUB and allows the user to cancel the SUBMIT; do the     */\n/* SUBMIT; edit the job prior to SUBMIT; or browse the job prior     */\n/* to SUBMIT.                                                        */\n\nCONTROL PROMPT\n\nSET RC EQ 0\n\nSET &DSNX = &DSN\nISPEXEC VPUT DSNX\nISPEXEC SELECT PGM(FIXUPDSN) PARM(DSNX)\nISPEXEC VGET DSNX\nSET &DSNX = &DSNX  /* REMOVE TRAILING BLANKS PER ISPF/PDF V2 */\n\nDISPLAY: +\nISPEXEC DISPLAY PANEL(GENSUB)\nSET RC EQ &LASTCC\nIF &RC NE 0 THEN GOTO ENDIT\n\nIF &SOPT = END THEN DO\n  SET RC EQ 8\n  GOTO ENDIT\n  END\n\nIF &SOPT = C THEN DO\n  SET RC EQ 12\n  GOTO ENDIT\n  END\n\nIF &SOPT = S THEN DO\n                    SUBMIT '&DSNX'\n                    GOTO ENDIT\n                    END\n\nIF &SOPT = E THEN DO\n  ISPEXEC EDIT DATASET('&DSNX') MACRO(EDRESET)\n  IF &LASTCC EQ 0 THEN ISPEXEC SETMSG MSG(ISRU244)\n  END\n\nIF &SOPT = B THEN ISPEXEC BROWSE DATASET('&DSNX')\n\nGOTO DISPLAY    /* ASK THE QUESTION AGAIN */\n\nENDIT: +\nEXIT CODE(&RC)\n./       ADD   NAME=PANALLOC\n/**********************************************************************/\n/*                                                                    */\n/*  CLIST NAME:       PANALLOC                                        */\n/*                                                                    */\n/*  AUTHOR:                                                           */\n/*    Geoffrey McIntyre                                               */\n/*    Computer Operations Technical Support                           */\n/*    First Security Service Company                                  */\n/*    260 N. Charles Lindbergh Drive                                  */\n/*    Salt Lake City, UT  84116                                       */\n/*    (801) 350-6519                                                  */\n/*                                                                    */\n/*                                                                    */\n/*  LAST UPDATE:      Sep   19, 1989                                  */\n/*                                                                    */\n/*  DESCRIPTION:                                                      */\n/*                                                                    */\n/*    Allocate a new superset to an existing PANVALET data set.       */\n/*                                                                    */\n/*  CALLING PARMS:    NONE                                            */\n/*                                                                    */\n/*  RETURNED PARMS:   NONE                                            */\n/*                                                                    */\n/*  TABLES:           NONE                                            */\n/*                                                                    */\n/*  MSGS:             GEN206   ISRZ001                                */\n/*                                                                    */\n/*  SKELETONS:        PANALLOC                                        */\n/*                                                                    */\n/*  PANELS:           PANALLOC                                        */\n/*                                                                    */\n/*  CALLED FUNCTIONS: ISPEXEC:  CONTROL  SETMSG   LOG   DISPLAY       */\n/*                              SELECT   FTOPEN   VGET  VPUT          */\n/*                              FTINCL   FTCLOSE                      */\n/*                    OTHER:    FIXUPDSN GENSUB   PAN#1               */\n/*                                                                    */\n/**********************************************************************/\n/*                                                                    */\n/* Check to see if a trace of the CLIST function has been requested. */\n/* Turn on the requested tracing level.                              */\n\nISPEXEC VGET (QTRACE QTSTNAME)            /*                         */\nSET QNAME  EQ &SYSICMD                    /*                         */\n                                          /*                         */\nIF &QTRACE GT 0 THEN DO                   /*                         */\n  WRITE ************************\n  WRITE ** CLIST = &QNAME   **\n  WRITE ************************\n  ISPEXEC LOG MSG(GEN206)                 /*                         */\n  IF &QTRACE EQ 2 THEN CONTROL SYMLIST CONLIST LIST MSG\n  ELSE IF &QTRACE EQ 3 AND &QTSTNAME EQ &QNAME THEN +\n    CONTROL SYMLIST CONLIST LIST MSG      /*                         */\n  END                                     /*                         */\n\nCONTROL   MSG ASIS                        /*                         */\nISPEXEC CONTROL ERRORS RETURN             /* Let the dialog handle   */\n                                          /* errors.                 */\nTOP:                                      /* Begin.                  */+\nISPEXEC DISPLAY PANEL(PANALLOC)           /* Display data entry panel*/\nIF &LASTCC = 8 THEN                       /* If END,                 */+\n  DO                                      /*                         */\n    CONTROL NOMSG                         /*                         */\n    FREE F(SYSIN SYSPRINT PANDD1)         /* free allocations and    */\n    EXIT                                  /* exit.                   */\n  END                                     /*                         */\n                                          /*                         */\nISPEXEC VPUT PDS1                         /*                         */\nISPEXEC SELECT PGM(FIXUPDSN) PARM(PDS1)   /* Fix up PANVALET name.   */\nISPEXEC VGET PDS1                         /*                         */\n                                          /*                         */\nSET &ANSWER = &STR(&SYSDSN('&PDS1'))      /* Does PANVALET exist?    */\nIF &STR(&ANSWER) \u00ac= OK THEN               /*                         */+\n  DO                                      /*                         */\n    SET ZEDSMSG = &STR(NOT CATALOGED)     /* Set error message, and  */\n    SET ZEDLMSG =                         /*                         */+\n        &STR('&PDS1' NOT CATALOGED -- USE 'PANCREAT' TO FIRST CREATE)\n    ISPEXEC SETMSG MSG(ISRZ001)           /*                         */\n    GOTO TOP                              /* redisplay entry panel.  */\n  END                                     /*                         */\n                                          /*                         */\nIF &POPT = TSO   THEN GOTO TSO            /* Foreground.             */\nIF &POPT = BATCH THEN GOTO BATCH          /* Background.             */\n                                          /*                         */\nTSO:                                      /*                         */+\nALLOC F(SYSIN)                            /* Allocate control cards. */+\n      BLKSIZE(800)                        /*                         */+\n      DELETE                              /*                         */+\n      LRECL(80)                           /*                         */+\n      NEW                                 /*                         */+\n      RECFM(F B)                          /*                         */+\n      REUSE                               /*                         */+\n      SP(1 1)                             /*                         */+\n      TRACKS                              /*                         */\n                                          /*                         */\nOPENFILE SYSIN OUTPUT                     /* Open control cards.     */\n                                          /*                         */\nIF &PANCNTL NE  THEN                      /* Supply control word.    */+\n  DO                                      /*                         */\n    SET &SYSIN = &STR(++CONTROL &PANCNTL) /*                         */\n    PUTFILE SYSIN                         /* Write control card.     */\n  END                                     /*                         */\n                                          /*                         */\nSET &SYSIN =                              /* Control card.           */+\n    &STR(++ALLOCATE &PSPRSTNM,&PANTYPE,NOFORMAT) /*                  */\nPUTFILE SYSIN                             /* Write control card.     */\nCLOSFILE SYSIN                            /* Close control cards.    */\n                                          /*                         */\nALLOC F(PANDD1)                           /* Allocate PANVALET       */+\n      DA('&PDS1')                         /*                         */+\n      REUSE                               /* output file.            */+\n      SHR                                 /*                         */\n                                          /*                         */\nIF &LASTCC NE 0 THEN                      /* Allocation did not work.*/+\n  DO                                      /*                         */\n    SET &ZEDSMSG =                        /* Set error message, and  */\n        &STR(ALLOCATION FAILED)           /*                         */\n    SET &ZEDLMSG =                        /*                         */\n        &STR('&PDS1' COULD NOT BE ALLOCATED)\n    ISPEXEC SETMSG MSG(ISRZ001)           /*                         */\n    GOTO TOP                              /* redisplay entry panel.  */\n  END                                     /*                         */\n                                          /*                         */\nALLOC F(SYSPRINT)                         /* Allocate PANVALET       */+\n      DA(*)                               /* messages.               */+\n      REUSE                               /*                         */\n                                          /*                         */\nCALL 'SYS2.PANVALET.LOADLIB(PAN#1)'       /* Call the PANVALET       */\n                                          /* create program.         */\nGOTO TOP                                  /*                         */\n                                          /*                         */\nBATCH:                                    /* Background job.         */+\nISPEXEC VGET (ZTEMPF)                     /*                         */\nISPEXEC SELECT PGM(JOBCHAR)               /* Increment job character.*/\nISPEXEC FTOPEN TEMP                       /* File tailoring.         */\nISPEXEC FTINCL PANALLOC                   /* JCL Skeleton.           */\nISPEXEC FTCLOSE                           /* CLose file tailoring.   */\n%GENSUB '&ZTEMPF'                         /* Generalized submit fac- */\n                                          /* ility.                  */\nGOTO TOP                                  /* Redisplay entry panel.  */\n./       ADD   NAME=PANCREAT\n/**********************************************************************/\n/*                                                                    */\n/*  CLIST NAME:       PANCREAT                                        */\n/*                                                                    */\n/*  AUTHOR:                                                           */\n/*    Geoffrey McIntyre                                               */\n/*    Computer Operations Technical Support                           */\n/*    First Security Service Company                                  */\n/*    260 N. Charles Lindbergh Drive                                  */\n/*    Salt Lake City, UT  84116                                       */\n/*    (801) 350-6519                                                  */\n/*                                                                    */\n/*                                                                    */\n/*  LAST UPDATE:      July  12, 1989                                  */\n/*                                                                    */\n/*  DESCRIPTION:                                                      */\n/*                                                                    */\n/*    Create and initialize a PANVALET data set in foreground or      */\n/*    in the form of a batch job.                                     */\n/*                                                                    */\n/*  CALLING PARMS:    NONE                                            */\n/*                                                                    */\n/*  RETURNED PARMS:   NONE                                            */\n/*                                                                    */\n/*  TABLES:           NONE                                            */\n/*                                                                    */\n/*  MSGS:             GEN206   ISRZ001                                */\n/*                                                                    */\n/*  SKELETONS:        PANCREAT                                        */\n/*                                                                    */\n/*  PANELS:           PANCREAT PANCREAC                               */\n/*                                                                    */\n/*  CALLED FUNCTIONS: ISPEXEC:  CONTROL  SETMSG   LOG   DISPLAY       */\n/*                              SELECT   FTOPEN   VGET  VPUT          */\n/*                              FTINCL   FTCLOSE                      */\n/*                    OTHER:    FIXUPDSN GENSUB   PAN#4               */\n/*                                                                    */\n/**********************************************************************/\n/*                                                                    */\n/* Check to see if a trace of the CLIST function has been requested. */\n/* Turn on the requested tracing level.                              */\n\nISPEXEC VGET (QTRACE QTSTNAME)            /*                         */\nSET QNAME  EQ &SYSICMD                    /*                         */\n                                          /*                         */\nIF &QTRACE GT 0 THEN DO                   /*                         */\n  WRITE ************************\n  WRITE ** CLIST = &QNAME   **\n  WRITE ************************\n  ISPEXEC LOG MSG(GEN206)                 /*                         */\n  IF &QTRACE EQ 2 THEN CONTROL SYMLIST CONLIST LIST MSG\n  ELSE IF &QTRACE EQ 3 AND &QTSTNAME EQ &QNAME THEN +\n    CONTROL SYMLIST CONLIST LIST MSG      /*                         */\n  END                                     /*                         */\n\nCONTROL   MSG ASIS                        /*                         */\nISPEXEC CONTROL ERRORS RETURN             /* Let the dialog handle   */\n                                          /* errors.                 */\nTOP:                                      /* Begin.                  */+\nISPEXEC DISPLAY PANEL(PANCREAT)           /* Display data entry panel*/\nIF &LASTCC = 8 THEN                       /* If END,                 */+\n  DO                                      /*                         */\n    CONTROL NOMSG                         /*                         */\n    FREE F(SYSIN SYSPRINT PANDD1)         /* free allocations and    */\n    EXIT                                  /* exit.                   */\n  END                                     /*                         */\n                                          /*                         */\nISPEXEC VPUT PDS1                         /*                         */\nISPEXEC SELECT PGM(FIXUPDSN) PARM(PDS1)   /* Fix up PANVALET name.   */\nISPEXEC VGET PDS1                         /*                         */\n                                          /*                         */\nIF &PANSPACE GT 10 THEN                   /* User requested more than*/+\n  DO                                      /* 10 cylinders.  Inform   */\n    ISPEXEC DISPLAY PANEL(PANCREAC)       /* user that 10 cyl will   */\n    IF &LASTCC = 8 THEN GOTO TOP          /* hold over 160,000 lines */\n  END                                     /* of code and verify.     */\n                                          /*                         */\nSET &ANSWER = &STR(&SYSDSN('&PDS1'))      /* Does PANVALET data set  */\nIF &STR(&ANSWER) = OK THEN                /* already exist?          */+\n  DO                                      /*                         */\n    SET ZEDSMSG = &STR(ALREADY EXISTS)    /* Set error message, and  */\n    SET ZEDLMSG =                         /*                         */+\n        &STR('&PDS1' ALREADY EXISTS -- CAN NOT CREATE)\n    ISPEXEC SETMSG MSG(ISRZ001)           /*                         */\n    GOTO TOP                              /* redisplay entry panel.  */\n  END                                     /*                         */\n                                          /*                         */\nIF &POPT = TSO   THEN GOTO TSO            /* Foreground.             */\nIF &POPT = BATCH THEN GOTO BATCH          /* Background.             */\n                                          /*                         */\nTSO:                                      /*                         */+\nALLOC F(SYSIN)                            /* Allocate control cards. */+\n      BLKSIZE(800)                        /*                         */+\n      DELETE                              /*                         */+\n      LRECL(80)                           /*                         */+\n      NEW                                 /*                         */+\n      RECFM(F B)                          /*                         */+\n      REUSE                               /*                         */+\n      SP(1 1)                             /*                         */+\n      TRACKS                              /*                         */\n                                          /*                         */\nOPENFILE SYSIN OUTPUT                     /* Open control cards.     */\nSET &SYSIN = &STR(++CLEAR RECORDS=14)     /* Control card.           */\nPUTFILE SYSIN                             /* Write control card.     */\nCLOSFILE SYSIN                            /* Close control cards.    */\n                                          /*                         */\nALLOC F(PANDD1)                           /* Allocate PANVALET       */+\n      BLKSIZE(5492)                       /* output file.            */+\n      CYL                                 /*                         */+\n      DA('&PDS1')                         /*                         */+\n      DSORG(DA)                           /*                         */+\n      NEW                                 /*                         */+\n      RECFM(F)                            /*                         */+\n      REUSE                               /*                         */+\n      SP(&PANSPACE)                       /*                         */\n                                          /*                         */\nIF &LASTCC NE 0 THEN                      /* Allocation did not work.*/+\n  DO                                      /*                         */\n    SET &ZEDSMSG =                        /* Set error message, and  */\n        &STR(ALLOCATION FAILED)           /*                         */\n    SET &ZEDLMSG =                        /*                         */\n        &STR(PROBABLY NOT ENOUGH SPACE AVAILABLE)\n    ISPEXEC SETMSG MSG(ISRZ001)           /*                         */\n    GOTO TOP                              /* redisplay entry panel.  */\n  END                                     /*                         */\n                                          /*                         */\nALLOC F(SYSPRINT)                         /* Allocate PANVALET       */+\n      DA(*)                               /* messages.               */+\n      REUSE                               /*                         */\n                                          /*                         */\nCALL 'SYS2.PANVALET.LOADLIB(PAN#4)'       /* Call the PANVALET       */\n                                          /* create program.         */\nGOTO TOP                                  /*                         */\n                                          /*                         */\nBATCH:                                    /* Background job.         */+\nISPEXEC VGET (ZTEMPF)                     /*                         */\nISPEXEC SELECT PGM(JOBCHAR)               /* Increment job character.*/\nISPEXEC FTOPEN TEMP                       /* File tailoring.         */\nISPEXEC FTINCL PANCREAT                   /* JCL Skeleton.           */\nISPEXEC FTCLOSE                           /* CLose file tailoring.   */\n%GENSUB '&ZTEMPF'                         /* Generalized submit fac- */\n                                          /* ility.                  */\nGOTO TOP                                  /* Redisplay entry panel.  */\n./       ADD   NAME=PANMENU\n/**********************************************************************/\n/*                                                                    */\n/*  CLIST NAME:       PANMENU                                         */\n/*                                                                    */\n/*  AUTHOR:                                                           */\n/*    Geoffrey McIntyre                                               */\n/*    Computer Operations Technical Support                           */\n/*    First Security Service Company                                  */\n/*    260 N. Charles Lindbergh Drive                                  */\n/*    Salt Lake City, UT  84116                                       */\n/*    (801) 350-6519                                                  */\n/*                                                                    */\n/*                                                                    */\n/*  LAST UPDATE:      July  13, 1989                                  */\n/*                                                                    */\n/*  DESCRIPTION:                                                      */\n/*                                                                    */\n/*    This is the ISPF PANVALET interface application.                */\n/*    This dialog displays a selection menu to perform various        */\n/*    PANVALET functions.                                             */\n/*                                                                    */\n/*  CALLING PARMS:    NONE                                            */\n/*                                                                    */\n/*  RETURNED PARMS:   NONE                                            */\n/*                                                                    */\n/*  TABLES:           NONE                                            */\n/*                                                                    */\n/*  MSGS:             GEN206                                          */\n/*                                                                    */\n/*  SKELETONS:        NONE                                            */\n/*                                                                    */\n/*  PANELS:           PANMENU                                         */\n/*                                                                    */\n/*  CALLED FUNCTIONS: ISPEXEC:  CONTROL  DISPLAY                      */\n/*                    CLISTS:   GENPARMS                              */\n/*                    OTHER:    NONE                                  */\n/*                                                                    */\n/*  The PANMENU functions require ISPF 2.3.  These functions          */\n/*  were developed on PANVALET Release 12 and 14, but should also     */\n/*  work on prior releases.                                           */\n/*                                                                    */\n/*  If you are not on ISPF 2.3, you may be able to rewrite portions   */\n/*  of the code.                                                      */\n/*                                                                    */\n/**********************************************************************/\n/*                                                                    */\n/* Check to see if a trace of the CLIST function has been requested. */\n/* Turn on the requested tracing level.                              */\n\nISPEXEC VGET (QTRACE QTSTNAME)\nSET QNAME  EQ &SYSICMD\n\nIF &QTRACE GT 0 THEN DO\n  WRITE ************************\n  WRITE ** CLIST = &QNAME   **\n  WRITE ************************\n  ISPEXEC LOG MSG(GEN206)\n  IF &QTRACE EQ 2 THEN CONTROL SYMLIST CONLIST LIST MSG\n  ELSE IF &QTRACE EQ 3 AND &QTSTNAME EQ &QNAME THEN +\n    CONTROL SYMLIST CONLIST LIST MSG\n  END\n\nCONTROL MSG ASIS                          /*                         */\nISPEXEC CONTROL ERRORS RETURN             /* Return to dialog.       */\n/*                                                                   */\n/* Execute GENPARMS to set default panel colors and attributes.      */\n/*                                                                   */\nISPEXEC VGET (SCUPCHTX) PROFILE\nIF &SCUPCHTX = &Z THEN %GENPARMS          /*                         */\n                                          /*                         */\nISPEXEC SELECT PANEL(PANMENU)             /* Selection menu.         */\n                                          /*                         */\nEXIT                                      /*                         */\n./       ADD   NAME=PANPDS\n/**********************************************************************/\n/*                                                                    */\n/*  CLIST NAME:       PANPDS                                          */\n/*                                                                    */\n/*  AUTHOR:                                                           */\n/*    Geoffrey McIntyre                                               */\n/*    Computer Operations Technical Support                           */\n/*    First Security Service Company                                  */\n/*    260 N. Charles Lindbergh Drive                                  */\n/*    Salt Lake City, UT  84116                                       */\n/*    (801) 350-6519                                                  */\n/*                                                                    */\n/*                                                                    */\n/*  LAST UPDATE:      July  25, 1989                                  */\n/*                                                                    */\n/*  DESCRIPTION:                                                      */\n/*                                                                    */\n/*    PDS to PANVALET copy.  This function allows the user to specify */\n/*    an input PDS and an output PANVALET data set.                   */\n/*    A member selection list can be displayed, or an individual mem- */\n/*    ber or pattern of members can be selected for copying.          */\n/*    Additionally, all members can be specified with an '*'.         */\n/*                                                                    */\n/*  CALLING PARMS:    NONE                                            */\n/*                                                                    */\n/*  RETURNED PARMS:   NONE                                            */\n/*                                                                    */\n/*  TABLES:           MEMLIST (temporary)                             */\n/*                                                                    */\n/*  MSGS:             GEN206  ISRZ001                                 */\n/*                                                                    */\n/*  SKELETONS:        PANPDS                                          */\n/*                                                                    */\n/*  PANELS:           PANPDS   PANPDSML                               */\n/*                                                                    */\n/*  CALLED FUNCTIONS: ISPEXEC:  CONTROL  DISPLAY  FTCLOSE  FTINCL     */\n/*                              FTOPEN                                */\n/*                              LMCLOSE  LMFREE   LMINIT   LMMDISP    */\n/*                              LMMFIND  LMMLIST  LMOPEN              */\n/*                              LOG      SELECT   SETMSG              */\n/*                              TBADD    TBCREATE TBDELETE TBEND      */\n/*                              TBMOD    TBSORT                       */\n/*                              VGET     VPUT                         */\n/*                    OTHER:    GENREVU  GENSUB   JOBCHAR  LISTDSI    */\n/*                              GENDSNIN                              */\n/*                                                                    */\n/**********************************************************************/\n/*                                                                    */\n/* Check to see if a trace of the CLIST function has been requested. */\n/* Turn on the requested tracing level.                              */\n\nISPEXEC VGET (QTRACE QTSTNAME)\nSET QNAME  EQ &SYSICMD\n\nIF &QTRACE GT 0 THEN DO\n  WRITE ************************\n  WRITE ** CLIST = &QNAME   **\n  WRITE ************************\n  ISPEXEC LOG MSG(GEN206)\n  IF &QTRACE EQ 2 THEN CONTROL SYMLIST CONLIST LIST MSG\n  ELSE IF &QTRACE EQ 3 AND &QTSTNAME EQ &QNAME THEN +\n    CONTROL SYMLIST CONLIST LIST MSG\n  END\n\nCONTROL ASIS                              /*                         */\n                                          /*                         */\nISPEXEC CONTROL ERRORS RETURN             /* Return to dialog for    */\n                                          /* error processing.       */\nTOP:                                      /*                         */+\nSET SINGLE  = N                           /* Single member switch.   */\nSET ALLMEMS = N                           /* All members   switch.   */\nISPEXEC TBEND MEMLIST                     /* Make sure the table     */\n                                          /* does not exist.         */\nISPEXEC DISPLAY PANEL(PANPDS)             /* Display panel.          */\nIF &LASTCC = 8 THEN                       /* 'END' command entered.. */+\n  DO                                      /*                         */\n    CONTROL NOMSG                         /*                         */\n    FREE F(SYSIN SYSPRINT PANDD1)         /* De-allocate,            */\n    CONTROL   MSG                         /*                         */\n    ISPEXEC LMMDISP DATAID(&ID)           /* free the display,       */+\n                    OPTION(FREE)          /*                         */\n    ISPEXEC LMCLOSE DATAID(&ID)           /* close and               */\n    ISPEXEC LMFREE  DATAID(&ID)           /* free the input PDS.     */\n    ISPEXEC TBEND MEMLIST                 /* Delete the member table.*/\n    EXIT                                  /* Exit the clist.         */\n  END                                     /*                         */\n                                          /*                         */\nIF &PANCNTL NE  THEN                      /* Control word specified. */+\n   SET PASSWORD = &STR(CON(&PANCNTL))     /*                         */\nELSE                                      /*                         */+\n   SET PASSWORD =                         /*                         */\n                                          /*                         */\nSET DSNINFO = &PDS1                       /* Verify existance of     */\nISPEXEC VPUT DSNINFO SHARED               /* input PDS.              */\n%GENDSNIN                                 /*                         */\nISPEXEC VGET (DSNINFO REDIS) SHARED       /*                         */\nSET PDS1 = &DSNINFO                       /*                         */\nIF &REDIS = YES THEN GOTO TOP             /* Not on disk, return.    */\n                                          /*                         */\nSET DSNINFO = &PDS2                       /* Verify existance of     */\nISPEXEC VPUT DSNINFO SHARED               /* output PANVALET.        */\n%GENDSNIN                                 /*                         */\nISPEXEC VGET (DSNINFO REDIS) SHARED       /*                         */\nSET PDS2 = &DSNINFO                       /*                         */\nIF &REDIS = YES THEN GOTO TOP             /* Not on disk, return.    */\n                                          /*                         */\nLISTDSI '&PDS1'                           /* Get heaps of info about */\n                                          /* the PDS.                */\nIF &SYSDSORG NE PO THEN                   /* Oh, not a PDS!          */+\n  DO                                      /*                         */\n    SET ZEDSMSG = &STR(NOT PARTITIONED)   /*                         */\n    SET ZEDLMSG = &STR('&PDS1' IS '&SYSDSORG' -- NEEDS TO BE +\n                  PARTITIONED)            /*                         */\n    ISPEXEC SETMSG MSG(ISRZ001)           /* Display error message.  */\n    GOTO TOP                              /* Re-enter.               */\n  END                                     /*                         */\n                                          /*                         */\nLISTDSI '&PDS2'                           /* Get heaps of info about */\n                                          /* the PANVALET data set.  */\nIF &SYSDSORG NE DA THEN                   /* Oh, not direct access!  */+\n  DO                                      /*                         */\n    SET ZEDSMSG = &STR(NOT DIRECT ACCESS) /*                         */\n    SET ZEDLMSG = &STR('&PDS2' IS '&SYSDSORG' -- PANVALET LIBRARIES +\n                  ARE DIRECT ACCESS)      /*                         */\n    ISPEXEC SETMSG MSG(ISRZ001)           /* Display error message.  */\n    GOTO TOP                              /* Re-enter.               */\n  END                                     /*                         */\n                                          /*                         */\nISPEXEC LMINIT DATAID(ID)                 /* Initialize Library      */+\n               DATASET('&PDS1')           /* Services for the PDS.   */+\n               ENQ(SHR)                   /*                         */\n                                          /*                         */\nSET &LMINIT_RC = &LASTCC                  /* Capture the return code.*/\n                                          /*                         */\nIF &LMINIT_RC NE 0 THEN                   /* Bad return code.        */+\n  DO                                      /* Write nasti-gram.       */\n    WRITE FAILED TO LMINIT   INPUT DATA SET &PDS1\n    WRITE ERROR CONDITION IS &ZERRLM\n    WRITE COND CODE = &LMINIT_RC\n    ISPEXEC LMCLOSE DATAID(&ID)           /*                         */\n    ISPEXEC LMFREE  DATAID(&ID)           /*                         */\n    EXIT                                  /* Crash.                  */\n  END                                     /*                         */\n                                          /*                         */\nISPEXEC LMOPEN DATAID(&ID)                /* Open the PDS through    */+\n               OPTION(INPUT)              /* Library Services.       */\n                                          /*                         */\nSET &LMOPEN_RC = &LASTCC                  /* Capture the return code.*/\n                                          /*                         */\nIF &LMOPEN_RC NE 0 THEN                   /* Bad return code.        */+\n  DO                                      /* Write nasti-gram.       */\n    WRITE FAILED TO OPEN     INPUT DATA SET &PDS1\n    WRITE ERROR CONDITION IS &ZERRLM\n    WRITE COND CODE = &LMOPEN_RC\n    ISPEXEC LMCLOSE DATAID(&ID)           /*                         */\n    ISPEXEC LMFREE  DATAID(&ID)           /*                         */\n    EXIT                                  /* Crash.                  */\n  END                                     /*                         */\n                                          /*                         */\n/*                                                                   */\n/* Process all members if '*' was specified.                         */\n/*                                                                   */\n/* Note:  All members of a PDS can be copied to PANVALET using the   */\n/*        following commands:                                        */\n/*          ++USING PAN0                                             */\n/*          ++ADD *,&PANFORMT                                        */\n/*        However, to enable the user to add the copy level, this    */\n/*        dialog generates an add card for each individual member.   */\n/*                                                                   */\n                                          /*                         */\nIF &STR(&PANSMEM) = &STR(*) THEN          /* User wants all members  */+\n  DO                                      /* copied.                 */\n    SET LMMLIST_RC = 0                    /* Initialize return code. */\n    SET ALLMEMS = Y                       /* Set 'all members' flag. */\n                                          /*                         */\n    ISPEXEC TBCREATE MEMLIST              /* Create PDS member table.*/+\n                     KEYS(PANTMEM)        /*                         */+\n                     NOWRITE              /* Temporary.              */+\n                     REPLACE              /* Overlay any existing    */+\n                     SHARE                /* table.                  */\n                                          /*                         */\n    ISPEXEC TBSORT   MEMLIST              /* Sort the table.         */+\n                     FIELDS(PANTMEM,C,A)  /*                         */\n                                          /*                         */\n    DO WHILE (&LMMLIST_RC = 0)            /* For each member in the  */\n                                          /* PDS,                    */\n      ISPEXEC LMMLIST DATAID(&ID)         /* get the next member,    */+\n                      OPTION(LIST)        /*                         */+\n                      MEMBER(PANTMEM)     /*                         */+\n                      STATS(NO)           /*                         */\n                                          /*                         */\n      SET LMMLIST_RC = &LASTCC            /* capture the return code.*/\n                                          /*                         */\n      IF &LMMLIST_RC = 0 THEN             /* More members to process.*/+\n        DO                                /*                         */\n          SET PANTMEM = &PANTMEM          /* Remove trailing blanks, */\n                                          /*                         */\n          ISPEXEC TBADD MEMLIST           /* add member name to      */+\n                        ORDER             /* table in sort order.    */\n        END                               /* Exit loop after last    */\n    END                                   /* member.                 */\n                                          /*                         */\n    ISPEXEC LMMLIST DATAID(&ID)           /* Free the storage used   */+\n                    OPTION(FREE)          /* by the LMMLIST service. */\n                                          /*                         */\n  END                                     /* End of processing for   */\n                                          /* 'all members'.          */\n/*                                                                   */\n/* DISPLAY MEMBER LIST IF NO MEMBERS OR A PATTERN WAS SPECIFIED.     */\n/*                                                                   */\n                                          /*                         */\nIF &SYSINDEX(*,&STR(&PANSMEM)) GT 1 OR    /* A pattern or nothing    */+\n   &STR(&PANSMEM)              EQ   THEN  /* is specified.           */+\n     DO                                   /*                         */\n                                          /*                         */\n       ISPEXEC TBCREATE MEMLIST           /* Create PDS member table.*/+\n                        KEYS(PANTMEM)     /*                         */+\n                        NOWRITE           /* Temporary.              */+\n                        REPLACE           /* Replace any existing    */+\n                        SHARE             /* table.                  */\n                                          /*                         */\n       ISPEXEC TBSORT MEMLIST             /* Sort the table.         */+\n                      FIELDS(PANTMEM,C,A) /*                         */\n                                          /*                         */\n       SET &ALLMEMS = P                   /* 'P' for partial copy.   */\n                                          /*                         */\n       IF &STR(&PANSMEM) =  THEN          /* Nothing specified,      */+\n          SET PATTERN = &STR(*)           /*  pattern = '*';         */\n       ELSE                               /* else leave the pattern  */+\n          SET PATTERN = &STR(&PANSMEM)    /* alone.                  */\n                                          /*                         */\n       /*  DISPLAY MEMBER LIST AND RETURN FIRST SELECTED MEMBER      */\n                                          /*                         */\nDISPLAY:                                  /* Display routine.        */+\n       ISPEXEC LMMDISP DATAID(&ID)        /* Display the PDS for     */+\n                       OPTION(DISPLAY)    /* member selection using  */+\n                       MEMBER(&PATTERN)   /* our pattern.            */+\n                       STATS(YES)         /* Display stats, too.     */+\n                       PANEL(PANPDSML)    /* Dynamic display panel.  */+\n                       COMMANDS(ANY)      /*                         */+\n                       FIELD(1)           /* One character select    */\n                                          /* field.                  */\n       SET LMMDISP_RC = &LASTCC           /* Capture the return code.*/\n                                          /*                         */\n       IF &ZLLCMD NE S AND                /* Ooops. Bad selection.   */+\n          &ZLLCMD NE C AND                /*                         */+\n          &ZLLCMD NE &Z     THEN          /*                         */+\n          DO                              /*                         */\n            SET &ZEDSMSG =                /* Nasti-gram msg.         */+\n                &STR(INVALID SELECTION)   /*                         */\n            SET &ZEDLMSG =                /*                         */+\n                &STR(VALID SELECTIONS ARE S AND C)\n            ISPEXEC SETMSG MSG(ISRZ001)   /*                         */\n            GOTO DISPLAY                  /* Re-display.             */\n          END                             /*                         */\n                                          /*                         */\n       IF &ZCMD = CANCEL OR               /* User just cancelled the */+\n          &ZCMD = CAN THEN                /* whole thing.            */+\n         DO                               /*                         */\n           ISPEXEC LMMDISP DATAID(&ID)    /* Free the storage used   */+\n                           OPTION(FREE)   /* by the LMMDISP service. */\n                                          /*                         */\n           ISPEXEC LMCLOSE DATAID(&ID)    /* Close the PDS.          */\n                                          /*                         */\n           ISPEXEC LMFREE  DATAID(&ID)    /* De-allocate the PDS.    */\n                                          /*                         */\n           GOTO TOP                       /* Start over.             */\n         END                              /*                         */\n                                          /*                         */\n       SET GET_RC = 0                     /* Initialize return code. */\n                                          /*                         */\n       IF &LMMDISP_RC = 0 THEN            /* One or more members are */+\n         DO UNTIL &GET_RC GE 8            /* selected.               */\n           IF &ZLLCMD = S THEN            /* 'S' was used to select  */+\n             DO                           /* the member.             */\n                                          /*                         */\n               SET ZLMEMBER = &ZLMEMBER   /* Remove trailing blanks. */\n                                          /*                         */\n               ISPEXEC LMMDISP            /* Update the display with */+\n                       DATAID(&ID)        /* an 'S' in the select    */+\n                       OPTION(PUT)        /* column, and '*SELECTD'  */+\n                       MEMBER(&ZLMEMBER)  /* in the user display     */+\n                       ZLUDATA(*SELECTD)  /*                         */\n                                          /*                         */\n               SET PANTMEM = &ZLMEMBER    /* Set the ISPF table      */\n                                          /* variable value.         */\n               ISPEXEC TBMOD MEMLIST      /* Add the member to the   */+\n                             ORDER        /* table.                  */\n                                          /*                         */\n               ISPEXEC LMMDISP            /* Get next member.        */+\n                       DATAID(&ID)        /*                         */+\n                       OPTION(GET)        /*                         */\n                                          /*                         */\n               SET GET_RC = &LASTCC       /* 8 = no more members.    */\n                                          /*                         */\n               IF &ZLLCMD NE S AND                                     +\n                  &ZLLCMD NE C AND                                     +\n                  &ZLLCMD NE &Z     THEN                               +\n                    DO\n                      SET &ZEDSMSG =                                   + +\n                          &STR(INVALID SELECTION)\n                      SET &ZEDLMSG =                                   + +\n                          &STR(VALID SELECTIONS ARE S AND C)\n                      ISPEXEC SETMSG MSG(ISRZ001)\n                      GOTO DISPLAY\n                    END\n                                          /*                         */\n             END                          /* End of select routine.  */\n                                          /*                         */\n           IF &ZLLCMD = C THEN            /* Cancel this member for  */+\n             DO                           /* selection.              */\n               SET ZLMEMBER = &ZLMEMBER   /* Remove trailing blanks. */\n                                          /*                         */\n               ISPEXEC LMMDISP            /* Put '*CANCELD' in the   */+\n                       DATAID(&ID)        /* display.                */+\n                       OPTION(PUT)        /*                         */+\n                       MEMBER(&ZLMEMBER)  /*                         */+\n                       ZLUDATA(*CANCELD)  /*                         */\n                                          /*                         */\n               SET PANTMEM = &ZLMEMBER    /* Set the ISPF table      */\n                                          /* variable value.         */\n               ISPEXEC TBDELETE MEMLIST   /* Remove the member name  */\n                                          /* from the table.         */\n               ISPEXEC LMMDISP            /* Get next member.        */+\n                       DATAID(&ID)        /*                         */+\n                       OPTION(GET)        /*                         */\n                                          /*                         */\n               SET GET_RC = &LASTCC       /* 8 = no more members.    */\n                                          /*                         */\n               IF &ZLLCMD NE S AND                                     +\n                  &ZLLCMD NE C AND                                     +\n                  &ZLLCMD NE &Z     THEN                               +\n                    DO\n                      SET &ZEDSMSG =                                   + +\n                          &STR(INVALID SELECTION)\n                      SET &ZEDLMSG =                                   + +\n                          &STR(VALID SELECTIONS ARE S AND C)\n                      ISPEXEC SETMSG MSG(ISRZ001)\n                      GOTO DISPLAY\n                    END\n                                          /*                         */\n             END                          /* End of cancel routine.  */\n                                          /*                         */\n         END       /* Do until &GET_RC = 8                           */\n                                          /*                         */\n       IF &LMMDISP_RC = 0 THEN            /*                         */+\n          GOTO DISPLAY                    /* Start over again.       */\n                                          /*                         */\n       IF &LMMDISP_RC = 4 THEN            /* Empty PDS!              */+\n         DO                               /*                         */\n           SET ZEDSMSG =                  /*                         */+\n               &STR(EMPTY OR NO MATCH)    /*                         */\n           SET ZEDLMSG =                  /*                         */+\n               &STR('&PDS1' IS EMPTY OR NO MEMBERS MATCHED +\n               THE SPECIFIED PATTERN)     /*                         */\n           ISPEXEC SETMSG MSG(ISRZ001)    /* Display nasty message.  */\n           GOTO TOP                       /* Start over again.       */\n         END                              /*                         */\n                                          /*                         */\n                                          /*                         */\n       IF &LMMDISP_RC GE 10 THEN          /* Very bad return code.   */+\n         DO                               /* Write nasti-gram.       */\n           WRITE MEMBER LIST DISPLAY FAILED FOR DATA SET &PDS1\n           WRITE ERROR CONDITION IS &ZERRLM\n           WRITE COND CODE = &LMMDISP_RC\n                                          /*                         */\n           ISPEXEC LMMDISP DATAID(&ID)    /* Free LMMDISP storage.   */+\n                           OPTION(FREE)   /*                         */\n                                          /*                         */\n           ISPEXEC LMCLOSE DATAID(&ID)    /* Close the PDS.          */\n           ISPEXEC LMFREE  DATAID(&ID)    /* De-allocate the PDS.    */\n           EXIT                           /* Crash.                  */\n         END                              /*                         */\n                                          /*                         */\n                                          /*                         */\n     END         /* IF &SYSINDEX(*,&STR(&PANSMEM)) GT 1 ....         */\n                                          /*                         */\n/*                                                                   */\n/* Find member if member name was specified.                         */\n/*                                                                   */\n                                          /*                         */\nIF &STR(&PANSMEM) NE  AND                 /* A member name was       */+\n   &STR(&PANSMEM) NE &STR(*) AND          /* specified (no pattern): */+\n   &SYSINDEX(*,&STR(&PANSMEM)) EQ 0 THEN  /*                         */+\n  DO                                      /*                         */\n    SET SINGLE = Y                        /* Set the 'single-member' */\n                                          /* flag.                   */\n    ISPEXEC LMMFIND DATAID(&ID)           /* Does the member actually*/+\n                    MEMBER(&PANSMEM)      /* exist?                  */+\n                    STATS(NO)             /*                         */\n                                          /*                         */\n    SET LMMFIND_RC = &LASTCC              /* Capture the return code.*/\n                                          /*                         */\n    IF &LMMFIND_RC = 8 THEN               /* User specified non-     */+\n      DO                                  /* existing member.        */\n        SET ZEDSMSG =                     /* Set the error message,  */+\n            &STR(MEMBER NOT FOUND)        /*                         */\n        SET ZEDLMSG =                     /*                         */+\n            &STR('&PANSMEM' NOT FOUND IN '&PDS1' DIRECTORY)\n        ISPEXEC SETMSG MSG(ISRZ001)       /*                         */\n        GOTO TOP                          /* and display it.         */\n      END                                 /*                         */\n                                          /*                         */\n    IF &LMMFIND_RC GT 8 THEN              /* Bad return code.        */+\n      DO                                  /* Write the bad news.     */\n        WRITE FAILED TO FIND MEMBER IN &PDS1\n        WRITE ERROR CONDITION IS &ZERRLM\n        WRITE COND CODE = &LMMFIND_RC\n        ISPEXEC LMCLOSE DATAID(&ID)       /* Close the PDS.          */\n        ISPEXEC LMFREE  DATAID(&ID)       /* De-allocate the PDS.    */\n        EXIT                              /* Crash.                  */\n      END                                 /*                         */\n  END         /* IF &STR(&PANSMEM NE  AND &STR(&PANSMEM) NE &STR(*)..*/\n                                          /*                         */\nISPEXEC VGET (ZTEMPF)                     /* Get name of file.       */\nISPEXEC SELECT PGM(JOBCHAR)               /* Increment job character.*/\nISPEXEC FTOPEN TEMP                       /* Start file tailoring.   */\nISPEXEC FTINCL PANPDS                     /* Include the skeleton.   */\nISPEXEC FTCLOSE                           /* Stop file tailoring.    */\n                                          /*                         */\nIF &POPT = TSO THEN                       /* Foreground.             */+\n  DO                                      /*                         */\n    %GENREVU '&ZTEMPF'                    /* Review the generated    */\n    IF &LASTCC NE 0 THEN GOTO TOP         /* cards?                  */\n                                          /*                         */\n    ALLOC F(SYSPUNCH)                     /* Don't need SYSPUNCH.    */+\n          DUMMY                           /*                         */+\n          REUSE                           /*                         */\n                                          /*                         */\n    ALLOC F(SYSPRINT)                     /* Display PAN messages to */+\n          DA(*)                           /* the terminal.           */+\n          REUSE                           /*                         */+\n          SHR                             /*                         */\n                                          /*                         */\n    ALLOC F(PANDD1)                       /* Allocate the output     */+\n          DA('&PDS2')                     /* PANVALET.               */+\n          REUSE                           /*                         */+\n          SHR                             /*                         */\n                                          /*                         */\n    ALLOC F(PANPDS)                       /* Allocate the input PDS. */+\n          DA('&PDS1')                     /*                         */+\n          REUSE                           /*                         */+\n          SHR                             /*                         */\n                                          /*                         */\n    ALLOC F(SYSIN)                        /* Allocate the control    */+\n          DA('&ZTEMPF')                   /* cards.                  */+\n          REUSE                           /*                         */+\n          SHR                             /*                         */\n                                          /*                         */\n    CALL 'SYS2.PANVALET.LOADLIB(PAN#1)'   /* Execute the PAN program.*/\n  END                                     /*                         */\n                                          /*                         */\nIF &POPT = BATCH THEN                     /* Background (batch job). */+\n  DO                                      /*                         */\n    %GENSUB '&ZTEMPF'                     /* Review the JCL?         */\n  END                                     /*                         */\n                                          /*                         */\nGOTO TOP                                  /* Start over again.       */\n./       ADD   NAME=PANSCAN\n/**********************************************************************/\n/*                                                                    */\n/*  CLIST NAME:       PANSCAN                                         */\n/*                                                                    */\n/*  AUTHOR:                                                           */\n/*    Geoffrey McIntyre                                               */\n/*    Computer Operations Technical Support                           */\n/*    First Security Service Company                                  */\n/*    260 N. Charles Lindbergh Drive                                  */\n/*    Salt Lake City, UT  84116                                       */\n/*    (801) 350-6519                                                  */\n/*                                                                    */\n/*                                                                    */\n/*  LAST UPDATE:      July  12, 1989                                  */\n/*                                                                    */\n/*  DESCRIPTION:                                                      */\n/*                                                                    */\n/*    This function will scan a given PANVALET data set for all       */\n/*    occurrences of a specified character string in foreground or    */\n/*    in the form of a background job.                                */\n/*                                                                    */\n/*  CALLING PARMS:    RELGDG                                          */\n/*                                                                    */\n/*  RETURNED PARMS:   ABSGDG  FOUND                                   */\n/*                                                                    */\n/*  TABLES:           RELGDG                                          */\n/*                                                                    */\n/*  MSGS:             GEN206                                          */\n/*                                                                    */\n/*  SKELETONS:        NONE                                            */\n/*                                                                    */\n/*  PANELS:           NONE                                            */\n/*                                                                    */\n/*  CALLED FUNCTIONS: ISPEXEC:  CONTROL  SETMSG   LOG                 */\n/*                              TBADD    TBCLOSE  TBCREATE            */\n/*                              TBEND    TBTOP    VGET  VPUT          */\n/*                    OTHER:    LISTCAT  GENDSNIN GENSUB              */\n/*                                                                    */\n/**********************************************************************/\n/*                                                                    */\n/* Check to see if a trace of the CLIST function has been requested. */\n/* Turn on the requested tracing level.                              */\n\nISPEXEC VGET (QTRACE QTSTNAME)\nSET QNAME  EQ &SYSICMD\n\nIF &QTRACE GT 0 THEN DO\n  WRITE ************************\n  WRITE ** CLIST = &QNAME   **\n  WRITE ************************\n  ISPEXEC LOG MSG(GEN206)\n  IF &QTRACE EQ 2 THEN CONTROL SYMLIST CONLIST LIST MSG\n  ELSE IF &QTRACE EQ 3 AND &QTSTNAME EQ &QNAME THEN +\n    CONTROL SYMLIST CONLIST LIST MSG\n  END\n\nCONTROL   MSG ASIS                        /*                         */\n                                          /*                         */\nISPEXEC CONTROL ERRORS RETURN             /* Let the dialog handle   */\n                                          /* errors.                 */\nTOP:                                      /*                         */+\nISPEXEC DISPLAY PANEL(PANSCAN)            /* Display data entry panel*/\nIF &LASTCC = 8 THEN                       /* If 'END',               */+\n  DO                                      /*                         */\n    CONTROL NOMSG                         /*                         */\n    FREE F(SYSIN SYSPRINT PANDD1)         /* free files, and         */\n    CONTROL   MSG                         /*                         */\n    EXIT                                  /* exit.                   */\n  END                                     /*                         */\n                                          /*                         */\nSET DSNINFO = &PDS1                       /* Check to see if the     */\nISPEXEC VPUT DSNINFO SHARED               /* user-entered PANVALET   */\n%GENDSNIN                                 /* data set actually exists*/\nISPEXEC VGET (DSNINFO REDIS) SHARED       /*                         */\nSET PDS1 = &DSNINFO                       /*                         */\nIF &REDIS = YES THEN GOTO TOP             /* Nope, it doesn't. Dis-  */\n                                          /* play error message.     */\nLISTDSI '&PDS1'                           /*                         */\nIF &SYSDSORG NE DA THEN                   /* If the dsorg of the     */+\n  DO                                      /* data set is not direct  */\n    SET ZEDSMSG =                         /* access, then the user   */+\n        &STR(NOT DIRECT ACCESS)           /* entered a wrong type of */\n    SET ZEDLMSG =                         /*                         */+\n        &STR('&PDS1' IS '&SYSDSORG' -- PANVALET LIBRARIES              +\n                  ARE DIRECT ACCESS)      /* data set.               */\n    ISPEXEC SETMSG MSG(ISRZ001)           /* Display error message.  */\n    GOTO TOP                              /*                         */\n  END                                     /*                         */\n                                          /*                         */\nIF &POPT = TSO   THEN GOTO TSO            /* Foreground.             */\nIF &POPT = BATCH THEN GOTO BATCH          /* Background job.         */\n                                          /*                         */\nTSO:                                      /* Foreground scan.        */+\nALLOC F(SYSIN)                            /* Allocate control cards. */+\n      BLKSIZE(6160)                       /*                         */+\n      DELETE                              /*                         */+\n      LRECL(80)                           /*                         */+\n      NEW                                 /*                         */+\n      RECFM(F B)                          /*                         */+\n      REUSE                               /*                         */\n                                          /*                         */\nOPENFILE SYSIN OUTPUT                     /* Open control cards.     */\n                                          /*                         */\nIF &PANCNTL NE  THEN                      /* Supply control word.    */+\n  DO                                      /*                         */\n    SET &SYSIN = &STR(++CONTROL &PANCNTL) /*                         */\n    PUTFILE SYSIN                         /* Write control card.     */\n  END                                     /*                         */\n                                          /*                         */\nSET &SYSIN = &STR(++SCAN *,'&PANSCAN')    /* Create control card.    */\nPUTFILE SYSIN                             /* Write control card.     */\nCLOSFILE SYSIN                            /* Close control cards.    */\n                                          /*                         */\nSET &ANSWER = &STR(&SYSDSN(SCAN.DATA))    /* Does the scan output    */\nIF &STR(&ANSWER) = OK THEN                /* data set already exist? */+\n  ALLOC F(SYSPRINT)                       /* Yes, delete.            */+\n        DA(SCAN.DATA)                     /*                         */+\n        REUSE                             /*                         */+\n        SHR                               /*                         */\nELSE                                      /*                         */+\n  ALLOC F(SYSPRINT)                       /* No, allocate new.       */+\n        BLKSIZE(23474)                    /*                         */+\n        DA(SCAN.DATA)                     /*                         */+\n        LRECL(121)                        /*                         */+\n        NEW                               /*                         */+\n        RECFM(F B)                        /*                         */+\n        REUSE                             /*                         */+\n        SP(9 2)                           /*                         */+\n        TRACKS                            /*                         */\n                                          /*                         */\nALLOC F(PANDD1)                           /* Allocate the PANVALET   */+\n      DA('&PDS1')                         /* data set.               */+\n      REUSE                               /*                         */+\n      SHR                                 /*                         */\n                                          /*                         */\nCALL 'SYS2.PANVALET.LOADLIB(PAN#8)'       /* Call the PANVALET scan  */\n                                          /* program.                */\nISPEXEC BROWSE DATASET(SCAN.DATA)         /* Browse the scan output. */\nGOTO TOP                                  /* Redisplay entry panel.  */\n                                          /*                         */\nBATCH:                                    /*                         */+\nISPEXEC VGET (ZTEMPF)                     /*                         */\nISPEXEC SELECT PGM(JOBCHAR)               /* Increment job character.*/\nISPEXEC FTOPEN TEMP                       /* File tailoring.         */\nISPEXEC FTINCL PANSCAN                    /* Scan skeleton.          */\nISPEXEC FTCLOSE                           /* End file tailoring.     */\n%GENSUB '&ZTEMPF'                         /* Generalized submit fac- */\n                                          /* ility.                  */\nGOTO TOP                                  /* Redisplay entry panel.  */\n./       ADD   NAME=PANTOPAN\n/**********************************************************************/\n/*                                                                    */\n/*  CLIST NAME:       PANTOPAN                                        */\n/*                                                                    */\n/*  AUTHOR:                                                           */\n/*    Geoffrey McIntyre                                               */\n/*    Computer Operations Technical Support                           */\n/*    First Security Service Company                                  */\n/*    260 N. Charles Lindbergh Drive                                  */\n/*    Salt Lake City, UT  84116                                       */\n/*    (801) 350-6519                                                  */\n/*                                                                    */\n/*                                                                    */\n/*  LAST UPDATE:      July  26, 1989                                  */\n/*                                                                    */\n/*  DESCRIPTION:                                                      */\n/*                                                                    */\n/*    This dialog allows the user to copy individual PANVALET members */\n/*    or groups of members to another PANVALET data set.              */\n/*    The user friendly panels allow you to easily specify which      */\n/*    member, or displays a member list for your selection.           */\n/*                                                                    */\n/*  CALLING PARMS:    NONE                                            */\n/*                                                                    */\n/*  RETURNED PARMS:   NONE                                            */\n/*                                                                    */\n/*  TABLES:           PANUTIL (temporary)                             */\n/*                                                                    */\n/*  MSGS:             GEN206  ISRZ001                                 */\n/*                                                                    */\n/*  SKELETONS:        PANTOPAN                                        */\n/*                                                                    */\n/*  PANELS:           PANTOPAN PANTRAN                                */\n/*                                                                    */\n/*  CALLED FUNCTIONS: ISPEXEC:  CONTROL  DISPLAY                      */\n/*                              FTCLOSE  FTINCL   FTOPEN              */\n/*                              LOG      SELECT   SETMSG              */\n/*                              TBDISPL  TBEND    TBGET   TBPUT       */\n/*                              TBSARG   TBSCAN   TBTOP   TBVCLEAR    */\n/*                              VGET     VPUT                         */\n/*                    OTHER:    GENDSNIN GENSUB   GENREVU             */\n/*                    COBOL:    PANBTBL  (Build member list table)    */\n/*                                                                    */\n/**********************************************************************/\n/*                                                                    */\n/* Check to see if a trace of the CLIST function has been requested. */\n/* Turn on the requested tracing level.                              */\n\nISPEXEC VGET (QTRACE QTSTNAME)\nSET QNAME  EQ &SYSICMD\n\nIF &QTRACE GT 0 THEN DO\n  WRITE ************************\n  WRITE ** CLIST = &QNAME   **\n  WRITE ************************\n  ISPEXEC LOG MSG(GEN206)\n  IF &QTRACE EQ 2 THEN CONTROL SYMLIST CONLIST LIST MSG\n  ELSE IF &QTRACE EQ 3 AND &QTSTNAME EQ &QNAME THEN                    +\n    CONTROL SYMLIST CONLIST LIST MSG\n  END\n\nCONTROL ASIS                              /*                         */\n                                          /*                         */\nISPEXEC CONTROL ERRORS RETURN             /* Return to dialog for    */\n                                          /* error processing.       */\nSET TBL_IS_BUILT_SW = 0                   /* Table is not built yet. */\n                                          /*                         */\nTOP:                                      /* Start.                  */+\nISPEXEC DISPLAY PANEL(PANTOPAN)           /* Display panel.          */\nIF &LASTCC = 8 THEN                       /* 'END' was entered.      */+\n  DO                                      /*                         */\n    ISPEXEC TBEND    PANUTIL              /* Delete table.           */\n    CONTROL NOMSG                         /*                         */\n    FREE F(SYSIN SYSPRINT PANDD1 PANDD2)  /* De-allocate files.      */\n    CONTROL   MSG                         /*                         */\n    EXIT                                  /* Exit dialog function.   */\n  END                                     /*                         */\n                                          /*                         */\nSET DSNINFO = &PDS1                       /* Does input PANVALET     */\nISPEXEC VPUT DSNINFO SHARED               /* data set exist on disk? */\n%GENDSNIN                                 /*                         */\nISPEXEC VGET (DSNINFO REDIS) SHARED       /*                         */\nSET PDS1 = &DSNINFO                       /*                         */\nIF &REDIS = YES THEN GOTO TOP             /* Nope, display error msg.*/\n                                          /*                         */\nSET DSNINFO = &PDS2                       /* Does output PANVALET    */\nISPEXEC VPUT DSNINFO SHARED               /* data set exist on disk? */\n%GENDSNIN                                 /*                         */\nISPEXEC VGET (DSNINFO REDIS) SHARED       /*                         */\nSET PDS2 = &DSNINFO                       /*                         */\nIF &REDIS = YES THEN GOTO TOP             /* Nope, display error msg.*/\n                                          /*                         */\nLISTDSI '&PDS1'                           /* Get lots of info on in- */\n                                          /* put PANVALET data set.  */\nIF &SYSDSORG NE DA THEN                   /* Oops, not direct access.*/+\n  DO                                      /* Display bad news        */\n    SET ZEDSMSG =                         /* message.                */+\n        &STR(NOT DIRECT ACCESS)           /*                         */\n    SET ZEDLMSG =                         /*                         */+\n        &STR('&PDS1' IS '&SYSDSORG' -- PANVALET LIBRARIES +\n        ARE DIRECT ACCESS)                /*                         */\n    ISPEXEC SETMSG MSG(ISRZ001)           /*                         */\n    GOTO TOP                              /*                         */\n  END                                     /*                         */\n                                          /*                         */\nLISTDSI '&PDS2'                           /* Get lots of info on out-*/\n                                          /* put PANVALET data set.  */\nIF &SYSDSORG NE DA THEN                   /* Oops, not direct access.*/+\n  DO                                      /* Display bad news        */\n    SET ZEDSMSG =                         /* message.                */+\n        &STR(NOT DIRECT ACCESS)           /*                         */\n    SET ZEDLMSG =                         /*                         */+\n        &STR('&PDS2' IS '&SYSDSORG' -- PANVALET LIBRARIES +\n        ARE DIRECT ACCESS)                /*                         */\n    ISPEXEC SETMSG MSG(ISRZ001)           /*                         */\n    GOTO TOP                              /*                         */\n  END                                     /*                         */\n                                          /*                         */\nIF &TBL_IS_BUILT_SW = 1 THEN GOTO SKIPTBL /* Don't bother building   */\n                                          /* the table again.        */\n/*                                                                   */\n/* Build ISPF table of PANVALET directory entries.                   */\n/*                                                                   */\n                                          /*                         */\nBUILDTBL:                                 /*                         */+\nALLOC F(SYSIN)                            /* Allocate control cards  */+\n      BLKSIZE(6160)                       /* for PAN program         */+\n      DELETE                              /*                         */+\n      LRECL(80)                           /*                         */+\n      NEW                                 /*                         */+\n      RECFM(F B)                          /*                         */+\n      REUSE                               /*                         */\n                                          /*                         */\nOPENFILE SYSIN OUTPUT                     /* Open control cards.     */\n                                          /*                         */\nIF &PANCNTL NE  THEN                      /* Add control word.       */+\n  DO                                      /*                         */\n    SET SYSIN = &STR(++CONTROL &PANCNTL)  /*                         */\n    PUTFILE SYSIN                         /* Write control card.     */\n  END                                     /*                         */\n                                          /*                         */\nSET SYSIN = &STR(++PRINT 0-UP)            /* Write control card.     */\nPUTFILE SYSIN                             /*                         */\n                                          /*                         */\nCLOSFILE SYSIN                            /* Close control cards.    */\n                                          /*                         */\nALLOC F(SYSPRINT)                         /* Don't need SYSPRINT.    */+\n      DUMMY                               /*                         */+\n      REUSE                               /*                         */\n                                          /*                         */\nALLOC F(PANDD1)                           /* Allocate input PAN.     */+\n      DA('&PDS1')                         /*                         */+\n      REUSE                               /*                         */+\n      SHR                                 /*                         */\n                                          /*                         */\nSET &ANSWER = &STR(&SYSDSN(SYSPUNCH))     /* Does SYSPUNCH exist?    */\n                                          /*                         */\nIF &STR(&ANSWER) = OK THEN                /* Yup.  Allocate it.      */+\n  ALLOC F(SYSPUNCH)                       /*                         */+\n        DA(SYSPUNCH)                      /*                         */+\n        REUSE                             /*                         */+\n        SHR                               /*                         */\n                                          /*                         */\nELSE                                      /*                         */+\n  ALLOC F(SYSPUNCH)                       /* Create it.              */+\n        BLKSIZE(11440)                    /*                         */+\n        CYL                               /*                         */+\n        DA(SYSPUNCH)                      /*                         */+\n        LRECL(80)                         /*                         */+\n        NEW                               /*                         */+\n        RECFM(F B)                        /*                         */+\n        REUSE                             /*                         */+\n        SP(1 1)                           /*                         */\n                                          /*                         */\nCALL 'SYS2.PANVALET.LOADLIB(PAN#2)'       /* Create directory list.  */\n                                          /*                         */\nISPEXEC TBEND   PANUTIL                   /* Delete table no matter  */\n                                          /* what.                   */\nISPEXEC SELECT PGM(PANBTBL)               /* Create the ISPF table.  */\nIF &LASTCC NE 0 THEN                      /*                         */+\n  DO                                      /*                         */\n    WRITE\n    WRITE \"PANBTBL\" -- BUILD MEMBER LIST TABLE -- MALFUNCTIONED\n    WRITE\n    WRITE DO YOU HAVE \"ISPLLIB\" PROPERLY ALLOCATED?\n    WRITE\n    WRITE EXIT ISPF, ALLOCATE PROPERLY, AND RE-ENTER PDF.\n    GOTO TOP                              /*                         */\n  END                                     /*                         */\n                                          /*                         */\nSET TBL_IS_BUILT_SW = 1                   /* Table is built.         */\n                                          /*                         */\nSKIPTBL:                                  /*                         */+\nIF &PANEMEM LT &PANSMEM AND               /* Ending member is less   */+\n   &PANEMEM NE          THEN              /* than starting member... */+\n  DO                                      /*                         */\n    SET ZEDSMSG =                         /* tell the user he goofed.*/+\n        &STR(RESPECIFY ENDING MEMBER)     /*                         */\n    SET ZEDLMSG =                         /*                         */+\n        &STR(&PANEMEM DOES NOT FOLLOW &PANSMEM)\n    ISPEXEC SETMSG MSG(ISRZ001)           /*                         */\n    GOTO TOP                              /*                         */\n  END                                     /*                         */\n                                          /*                         */\n/*                                                                   */\n/* Verify that specified members actually exist.                     */\n/*                                                                   */\n                                          /*                         */\nIF &PANSMEM NE  THEN                      /* Starting member field   */+\n  DO                                      /* is specified.           */\n    SET PANMEM = &PANSMEM                 /*                         */\n                                          /*                         */\n    ISPEXEC TBGET    PANUTIL NOREAD       /* Does member name exist  */\n                                          /* in table?               */\n    IF &LASTCC = 8 THEN                   /* Nope.  Member does not  */+\n      DO                                  /* exist.                  */\n        SET ZEDSMSG =                     /*                         */+\n            &STR(MEMBER NOT FOUND)        /*                         */\n        SET ZEDLMSG =                     /*                         */+\n            &STR('&PANSMEM' NOT FOUND IN '&PDS1' DIRECTORY)\n        ISPEXEC SETMSG MSG(ISRZ001)       /*                         */\n        GOTO TOP                          /* Display error message.  */\n      END                                 /*                         */\n  END                                     /*                         */\n                                          /*                         */\nIF &PANEMEM NE  THEN                      /* Ending member field is  */+\n  DO                                      /* specified.              */\n    SET PANMEM = &PANEMEM                 /*                         */\n                                          /*                         */\n    ISPEXEC TBGET    PANUTIL NOREAD       /* Does member name exist  */\n                                          /* in table?               */\n    IF &LASTCC = 8 THEN                   /* Nope.  Member does not  */+\n      DO                                  /* exist.                  */\n        SET ZEDSMSG =                     /*                         */+\n            &STR(MEMBER NOT FOUND)        /*                         */\n        SET ZEDLMSG =                     /*                         */+\n            &STR('&PANEMEM' NOT FOUND IN '&PDS1' DIRECTORY)\n        ISPEXEC SETMSG MSG(ISRZ001)       /*                         */\n        GOTO TOP                          /* Display error message.  */\n      END                                 /*                         */\n  END                                     /*                         */\n                                          /*                         */\n/*                                                                   */\n/* If no members are specified, display member selection list.       */\n/*                                                                   */\n                                          /*                         */\nIF &PANSMEM =  AND                        /* Starting and ending     */+\n   &PANEMEM =  THEN                       /* member fields are blank.*/+\n  DO                                      /*                         */\n    ISPEXEC TBTOP    PANUTIL              /* Position CRP to top of  */\n                                          /* table.                  */\n    ISPEXEC TBVCLEAR PANUTIL              /* Clear search variables. */\n                                          /*                         */\n    SET PANMEM = &STR(*)                  /* Look for all members.   */\n    ISPEXEC TBSARG   PANUTIL              /*                         */\n                                          /*                         */\n    DISPLAY:                              /*                         */+\n    ISPEXEC TBDISPL  PANUTIL              /* Display member list.    */+\n                     PANEL(PANTRAN)       /*                         */\n                                          /*                         */\n    IF &COMMAND = CAN    OR               /* Cancel processing.      */+\n       &COMMAND = CANCEL THEN             /*                         */+\n      DO                                  /*                         */\n        ISPEXEC TBEND    PANUTIL          /* Delete the table.       */\n        SET TBL_IS_BUILT_SW = 0           /* Set the switch.         */\n        GOTO TOP                          /* Start over again.       */\n      END                                 /*                         */\n                                          /*                         */\n    DO WHILE &RC LT 8                     /* Process each selected   */\n                                          /* member.                 */\n      IF &COMMAND = L      OR             /* User wants to position  */+\n         &COMMAND = LOC    OR             /* member list starting at */+\n         &COMMAND = LOCATE THEN           /* a certain member.       */+\n        DO                                /*                         */\n          SET PANMEM = &PANLOCAT          /* Get the locate variable.*/\n                                          /*                         */\n          ISPEXEC TBTOP   PANUTIL         /* Position CRP to top.    */\n                                          /*                         */\n          ISPEXEC TBSCAN  PANUTIL         /* Put CRP at first field  */+\n                          ARGLIST(PANMEM) /* value that is equal to  */+\n                          NOREAD          /* or greater than the     */+\n                          CONDLIST(GE)    /* locate value.           */\n                                          /*                         */\n          GOTO DISPLAY                    /* Display the member list.*/\n        END                               /*                         */\n      ELSE                                /* No locate command.      */+\n        DO                                /*                         */\n          SELECT &TSELECT                 /* Enter select group.     */\n            WHEN (S) SET PANRMEM =        /* Selected member, set    */+\n                         &STR(*SELECTED)  /* status.                 */\n            WHEN (C)                      /* Cancelled selection.    */+\n              DO                          /*                         */\n                IF &SUBSTR(3,&PANSTAT) = D THEN /* Disabled member.  */+\n                   SET PANRMEM =          /* Reset '*DISABLED' note. */+\n                       &STR(*DISABLED)    /*                         */\n                ELSE                      /*                         */+\n                  IF &PANSUBS NE  THEN    /* Superset member.        */+\n                     SET PANRMEM =        /* Reset '*SUPERSET' note. */+\n                         &STR(*SUPERSET)  /*                         */\n                ELSE                      /*                         */+\n                  SET PANRMEM =           /* Remove '*SELECTED' note.*/\n                SET TSELECT =             /* Initialize select char. */\n              END         /* WHEN (C)         */\n          END                             /* Exit select group       */\n          ISPEXEC TBPUT    PANUTIL        /* Update member table.    */\n        END                               /*                         */\n                                          /*                         */\n      ISPEXEC TBDISPL  PANUTIL            /* Get next selected mem-  */\n                                          /* ber.                    */\n      SET RC = &LASTCC                    /* Capture return code.    */\n                                          /*                         */\n      IF &COMMAND = CAN    OR             /* Cancel selections en-   */+\n         &COMMAND = CANCEL THEN           /* tirely.                 */+\n        DO                                /*                         */\n          ISPEXEC TBEND    PANUTIL        /* Delete table.           */\n          SET TBL_IS_BUILT_SW = 0         /*                         */\n          GOTO TOP                        /* Start over again.       */\n        END                               /*                         */\n    END                                   /*                         */\n                                          /*                         */\n  END                                     /*                         */\n                                          /*                         */\nSET RC = 0                                /* Initialize return code. */\n                                          /*                         */\nISPEXEC VGET (ZTEMPF)                     /* Get file name.          */\nISPEXEC SELECT PGM(JOBCHAR)               /* Increment job character.*/\nISPEXEC FTOPEN TEMP                       /* Start file tailoring.   */\nISPEXEC FTINCL PANTOPAN                   /* Include the skeleton.   */\nISPEXEC FTCLOSE                           /* Stop file tailoring.    */\n                                          /*                         */\nIF &POPT = TSO   THEN GOTO TSO            /* Foreground.             */\nIF &POPT = BATCH THEN GOTO BATCH          /* Background (batch job). */\n                                          /*                         */\nTSO:                                      /* Foreground.             */+\n%GENREVU '&ZTEMPF'                        /* Review control cards?   */\nIF &LASTCC NE 0 THEN GOTO TOP             /* Start over again.       */\n                                          /*                         */\nALLOC F(SYSPUNCH)                         /* Don't need SYSPUNCH.    */+\n      DUMMY                               /*                         */+\n      REUSE                               /*                         */\n                                          /*                         */\nALLOC F(SYSPRINT)                         /* Print PAN messages to   */+\n      DA(*)                               /* the terminal.           */+\n      REUSE                               /*                         */+\n      SHR                                 /*                         */\n                                          /*                         */\nALLOC F(PANDD1)                           /* Allocate the input      */+\n      DA('&PDS1')                         /* PANVALET data set.      */+\n      REUSE                               /*                         */+\n      SHR                                 /*                         */\n                                          /*                         */\nALLOC F(PANDD2)                           /* Allocate the output     */+\n      DA('&PDS2')                         /* PANVALET data set.      */+\n      REUSE                               /*                         */+\n      SHR                                 /*                         */\n                                          /*                         */\nALLOC F(SYSIN)                            /* Allocate the control    */+\n      DA('&ZTEMPF')                       /* cards.                  */+\n      REUSE                               /*                         */+\n      SHR                                 /*                         */\n                                          /*                         */\nCALL 'SYS2.PANVALET.LOADLIB(PAN#2)'       /* Execute the PAN trans-  */\n                                          /* fer program.            */\nGOTO TOP                                  /* Start over again.       */\n                                          /*                         */\nBATCH:                                    /* Background (batch job). */+\n%GENSUB '&ZTEMPF'                         /* Review JCL?             */\n                                          /*                         */\nGOTO TOP                                  /* Start over again.       */\n./       ADD   NAME=PANTOPDS\n/**********************************************************************/\n/*                                                                    */\n/*  CLIST NAME:       PANTOPDS                                        */\n/*                                                                    */\n/*  AUTHOR:                                                           */\n/*    Geoffrey McIntyre                                               */\n/*    Computer Operations Technical Support                           */\n/*    First Security Service Company                                  */\n/*    260 N. Charles Lindbergh Drive                                  */\n/*    Salt Lake City, UT  84116                                       */\n/*    (801) 350-6519                                                  */\n/*                                                                    */\n/*                                                                    */\n/*  LAST UPDATE:      July  26, 1989                                  */\n/*                                                                    */\n/*  DESCRIPTION:                                                      */\n/*                                                                    */\n/*    This function copies user selected members, groups of members,  */\n/*    all 'TEST' members, or all 'PROD' members to a PDS.             */\n/*                                                                    */\n/*  CALLING PARMS:    NONE                                            */\n/*                                                                    */\n/*  RETURNED PARMS:   NONE                                            */\n/*                                                                    */\n/*  TABLES:           PANUTIL                                         */\n/*                                                                    */\n/*  MSGS:             GEN206   ISRZ001                                */\n/*                                                                    */\n/*  SKELETONS:        PANTOPDS                                        */\n/*                                                                    */\n/*  PANELS:           PANTOPDS PANTRAN                                */\n/*                                                                    */\n/*  CALLED FUNCTIONS: ISPEXEC:  CONTROL  DISPLAY                      */\n/*                              FTCLOSE  FTINCL   FTOPEN              */\n/*                              LOG      SELECT   SETMSG              */\n/*                              TBDISPL  TBEND    TBGET    TBPUT      */\n/*                              TBSARG   TBTOP    TBVCLEAR            */\n/*                              VGET     VPUT                         */\n/*                    OTHER:    GENDSNIN LISTDSI  GENREVU  GENSUB     */\n/*                                                                    */\n/**********************************************************************/\n/*                                                                    */\n/* Check to see if a trace of the CLIST function has been requested. */\n/* Turn on the requested tracing level.                              */\n\nISPEXEC VGET (QTRACE QTSTNAME)\nSET QNAME  EQ &SYSICMD\n\nIF &QTRACE GT 0 THEN DO\n  WRITE ************************\n  WRITE ** CLIST = &QNAME   **\n  WRITE ************************\n  ISPEXEC LOG MSG(GEN206)\n  IF &QTRACE EQ 2 THEN CONTROL SYMLIST CONLIST LIST MSG\n  ELSE IF &QTRACE EQ 3 AND &QTSTNAME EQ &QNAME THEN +\n    CONTROL SYMLIST CONLIST LIST MSG\n  END\n                                          /*                         */\nCONTROL ASIS                              /*                         */\n                                          /*                         */\nISPEXEC CONTROL ERRORS RETURN             /* Return to dialog for    */\n                                          /* error processing.       */\nSET TBL_IS_BUILT_SW = 0                   /*                         */\n                                          /*                         */\nTOP:                                      /*                         */+\nISPEXEC DISPLAY PANEL(PANTOPDS)           /* Display panel.          */\nIF &LASTCC = 8 THEN                       /* 'END' was entered.      */+\n  DO                                      /*                         */\n    ISPEXEC TBEND    PANUTIL              /* Delete table.           */\n    CONTROL NOMSG                         /*                         */\n    FREE F(SYSIN SYSPRINT PANDD1)         /* De-allocate files.      */\n    CONTROL   MSG                         /*                         */\n    EXIT                                  /* Exit out.               */\n  END                                     /*                         */\n                                          /*                         */\nSET DSNINFO = &PDS1                       /*                         */\nISPEXEC VPUT DSNINFO SHARED               /*                         */\n%GENDSNIN                                 /* Is PANVALET data set    */\nISPEXEC VGET (DSNINFO REDIS) SHARED       /* cataloged on disk?      */\nSET PDS1 = &DSNINFO                       /*                         */\nIF &REDIS = YES THEN GOTO TOP             /* Nope, start over again. */\n                                          /*                         */\nSET DSNINFO = &PDS2                       /*                         */\nISPEXEC VPUT DSNINFO SHARED               /*                         */\n%GENDSNIN                                 /* Is PDS      data set    */\nISPEXEC VGET (DSNINFO REDIS) SHARED       /* cataloged on disk?      */\nSET PDS2 = &DSNINFO                       /*                         */\nIF &REDIS = YES THEN GOTO TOP             /* Nope, start over again. */\n                                          /*                         */\nIF &PDS11 NE  THEN                        /* Alternate PAN specified?*/+\n  DO                                      /*                         */\n    SET DSNINFO = &PDS11                  /*                         */\n    ISPEXEC VPUT DSNINFO SHARED           /*                         */\n    %GENDSNIN                             /* Is it cataloged on disk?*/\n    ISPEXEC VGET (DSNINFO REDIS) SHARED   /*                         */\n    SET PDS11 = &DSNINFO                  /*                         */\n    IF &REDIS = YES THEN GOTO TOP         /* Nope, start over again. */\n  END                                     /*                         */\n                                          /*                         */\nLISTDSI '&PDS1'                           /* Get heaps of info about */\n                                          /* PANVALET data set.      */\nIF &SYSDSORG NE DA THEN                   /* Oops, not a PANVALET    */+\n  DO                                      /* data set.               */\n    SET ZEDSMSG =                         /*                         */+\n        &STR(NOT DIRECT ACCESS)           /*                         */\n    SET ZEDLMSG =                         /*                         */+\n        &STR('&PDS1' IS '&SYSDSORG' -- PANVALET LIBRARIES +\n              ARE DIRECT ACCESS)          /*                         */\n    ISPEXEC SETMSG MSG(ISRZ001)           /* Inform user of goof-up, */\n    GOTO TOP                              /* and start over again.   */\n  END                                     /*                         */\n                                          /*                         */\nLISTDSI '&PDS2'                           /* Get heaps of info about */\n                                          /* the PDS  data set.      */\nIF &SYSDSORG NE PO THEN                   /* Oops, not a PDS.        */+\n  DO                                      /*                         */\n    SET ZEDSMSG =                         /*                         */+\n        &STR(NOT PARTITIONED)             /*                         */\n    SET ZEDLMSG =                         /*                         */+\n        &STR('&PDS2' IS '&SYSDSORG' -- NEEDS TO BE +\n              PARTITIONED)                /*                         */\n    ISPEXEC SETMSG MSG(ISRZ001)           /* Inform user of goof-up, */\n    GOTO TOP                              /* and start over again.   */\n  END                                     /*                         */\n                                          /*                         */\nIF &PDS11 NE  THEN                        /* Alternate PANVALET      */+\n  DO                                      /* specified?              */\n    LISTDSI '&PDS1'                       /* Get heaps of info about */\n                                          /* it.                     */\n    IF &SYSDSORG NE DA THEN               /* If data set is not      */+\n      DO                                  /* direct access, then     */\n        SET ZEDSMSG =                     /* it can not be a PANVALET*/+\n            &STR(NOT DIRECT ACCESS)       /* data set.               */\n      SET ZEDLMSG = &STR('&PDS11' IS '&SYSDSORG' -- PANVALET LIBRARIES +\n                  ARE DIRECT ACCESS)      /* Redisplay               */\n        ISPEXEC SETMSG MSG(ISRZ001)       /* data entry panel with   */\n        GOTO TOP                          /* error message.          */\n      END                                 /*                         */\n                                          /*                         */\n    ALLOC F(PANDD11)                      /* Allocate include        */+\n          DA('&PDS11')                    /* PANVALET.               */+\n          REUSE                           /*                         */+\n          SHR                             /*                         */\n  END                                     /*                         */\n                                          /*                         */\nIF &STR(&PANSMEM) = &STR(PROD*) OR        /* All production, or      */+\n   &STR(&PANSMEM) = &STR(TEST*) THEN      /* all test is specified:  */+\n     GOTO BUILDTBL                        /* build the ISPF table.   */\n                                          /*                         */\nIF &SYSINDEX(*,&STR(&PANSMEM)) GT 1 THEN  /* A pattern is specified. */+\n  DO                                      /*                         */\n    SET PANKEY =                          /* Get the pattern key.    */+\n        &SUBSTR(1:&LENGTH(&STR(&PANSMEM))-1,&STR(&PANSMEM))\n    SET PANSMEM =                         /*                         */\n  END                                     /*                         */\n                                          /*                         */\nIF &TBL_IS_BUILT_SW = 1 THEN GOTO SKIPTBL /* Table is already built. */\n                                          /*                         */\n/*                                                                   */\n/* Build ISPF table of PANVALET directory entries.                   */\n/*                                                                   */\n                                          /*                         */\nBUILDTBL:                                 /*                         */+\nALLOC F(SYSIN)                            /* Control cards.          */+\n      BLKSIZE(6160)                       /*                         */+\n      DELETE                              /*                         */+\n      LRECL(80)                           /*                         */+\n      NEW                                 /*                         */+\n      RECFM(F B)                          /*                         */+\n      REUSE                               /*                         */\n                                          /*                         */\nOPENFILE SYSIN OUTPUT                     /* Open control cards.     */\n                                          /*                         */\nIF &PANCNTL NE  THEN                      /* Control word specified. */+\n  DO                                      /*                         */\n    SET SYSIN = &STR(++CONTROL &PANCNTL)  /*                         */\n    PUTFILE SYSIN                         /* Write the control card. */\n  END                                     /*                         */\n                                          /*                         */\nSET SYSIN = &STR(++PRINT 0-UP)            /*                         */\nPUTFILE SYSIN                             /* Write the control card. */\n                                          /*                         */\nCLOSFILE SYSIN                            /* Close the control cards.*/\n                                          /*                         */\nALLOC F(SYSPRINT)                         /* Don't need SYSPRINT.    */+\n      DUMMY                               /*                         */+\n      REUSE                               /*                         */\n                                          /*                         */\nALLOC F(PANDD1)                           /* Allocate PANVALET file. */+\n      DA('&PDS1')                         /*                         */+\n      REUSE                               /*                         */+\n      SHR                                 /*                         */\n                                          /*                         */\nSET &ANSWER = &STR(&SYSDSN(SYSPUNCH))     /* Does SYSPUNCH exist?    */\nIF &STR(&ANSWER) = OK THEN                /*                         */+\n  ALLOC F(SYSPUNCH)                       /* Use it.                 */+\n        DA(SYSPUNCH)                      /*                         */+\n        REUSE                             /*                         */+\n        SHR                               /*                         */\n                                          /*                         */\nELSE                                      /*                         */+\n  ALLOC F(SYSPUNCH)                       /* Create it.              */+\n        BLKSIZE(11440)                    /*                         */+\n        CYL                               /*                         */+\n        DA(SYSPUNCH)                      /*                         */+\n        LRECL(80)                         /*                         */+\n        NEW                               /*                         */+\n        RECFM(F B)                        /*                         */+\n        REUSE                             /*                         */+\n        SP(1 1)                           /*                         */\n                                          /*                         */\nCALL 'SYS2.PANVALET.LOADLIB(PAN#2)'       /* Create directory list.  */\n                                          /*                         */\nISPEXEC TBEND   PANUTIL                   /* Delete table.           */\n                                          /*                         */\nISPEXEC SELECT PGM(PANBTBL)               /* Build ISPF table.       */\nIF &LASTCC NE 0 THEN                      /*                         */+\n  DO                                      /*                         */\n    WRITE\n    WRITE \"PANBTBL\" -- BUILD MEMBER LIST TABLE -- MALFUNCTIONED\n    WRITE\n    WRITE DO YOU HAVE \"ISPLLIB\" PROPERLY ALLOCATED?\n    WRITE\n    WRITE EXIT ISPF, ALLOCATE PROPERLY, AND RE-ENTER PDF.\n    GOTO TOP                              /*                         */\n  END                                     /*                         */\n                                          /*                         */\nSET TBL_IS_BUILT_SW = 1                   /* Table is built.         */\n                                          /*                         */\nIF &STR(&PANSMEM) = &STR(PROD*) OR        /* All production members  */+\n   &STR(&PANSMEM) = &STR(TEST*) THEN      /* or test members are     */+\n     GOTO PROCESS                         /* to be copied.           */\n                                          /*                         */\n/*                                                                   */\n/* Verify that specified members actually exist.                     */\n/*                                                                   */\n                                          /*                         */\nSKIPTBL:                                  /*                         */+\nIF &STR(&PANSMEM) NE         AND          /* Single member specified.*/+\n   &STR(&PANSMEM) NE &STR(*) AND          /*                         */+\n   &PANKEY =                 THEN         /*                         */+\n  DO                                      /*                         */\n    SET PANMEM = &STR(&PANSMEM)           /*                         */\n    ISPEXEC TBGET    PANUTIL NOREAD       /* Is member there?        */\n                                          /*                         */\n    IF &LASTCC = 8 THEN                   /* Nope.                   */+\n      DO                                  /*                         */\n        SET ZEDSMSG =                     /*                         */+\n            &STR(MEMBER NOT FOUND)        /*                         */\n        SET ZEDLMSG =                     /*                         */+\n            &STR('&PANSMEM' NOT FOUND IN '&PDS1' DIRECTORY)\n        ISPEXEC SETMSG MSG(ISRZ001)       /* Display error message.  */\n        GOTO TOP                          /* Start over again.       */\n      END                                 /*                         */\n                                          /*                         */\n  END                                     /*                         */\n                                          /*                         */\n/*                                                                   */\n/* If no members are specified, display member selection list.       */\n/*                                                                   */\nIF &STR(&PANSMEM) =  AND                  /* No member specified.    */+\n   &PANKEY =         THEN                 /*                         */+\n  DO                                      /*                         */\n    ISPEXEC TBTOP    PANUTIL              /* Position CRP to top.    */\n    ISPEXEC TBVCLEAR PANUTIL              /* Clear search variables. */\n    SET PANMEM = &STR(*)                  /* Search all members.     */\n    ISPEXEC TBSARG   PANUTIL              /*                         */\n                                          /*                         */\n    DISPLAY:                              /*                         */+\n    ISPEXEC TBDISPL  PANUTIL              /* Display all members.    */+\n                     PANEL(PANTRAN)       /*                         */\n                                          /*                         */\n    IF &COMMAND = CAN    OR               /* Cancel entered.         */+\n       &COMMAND = CANCEL THEN             /*                         */+\n      DO                                  /*                         */\n        ISPEXEC TBEND    PANUTIL          /* Delete table.           */\n        SET TBL_IS_BUILT_SW = 0           /*                         */\n        GOTO TOP                          /* Start over again.       */\n      END                                 /*                         */\n                                          /*                         */\n    DO WHILE &RC LT 8                     /* Process each selection. */\n      IF &COMMAND = L      OR             /* Locate member.          */+\n         &COMMAND = LOC    OR             /*                         */+\n         &COMMAND = LOCATE THEN           /*                         */+\n        DO                                /*                         */\n          SET PANMEM = &PANLOCAT          /* Get starting position.  */\n                                          /*                         */\n          ISPEXEC TBTOP   PANUTIL         /* Position CRP to top.    */\n                                          /*                         */\n          ISPEXEC TBSCAN  PANUTIL         /* Position CRP to first   */+\n                          ARGLIST(PANMEM) /* member that is equal to */+\n                          NOREAD          /* or greater than locate  */+\n                          CONDLIST(GE)    /* string.                 */\n          GOTO DISPLAY                    /* Display list accordingly*/\n        END                               /*                         */\n      ELSE                                /*                         */+\n        DO                                /*                         */\n          SELECT &TSELECT                 /* Enter select group.     */\n            WHEN (S)  SET PANRMEM =       /* Set '*SELECTED' msg.    */+\n                          &STR(*SELECTED) /*                         */\n            WHEN (C)                      /* Cancel this selection.  */+\n              DO                          /*                         */\n                IF &SUBSTR(3,&PANSTAT) = D THEN /* Disabled member,    +\n                  SET PANRMEM =           /* so set the '*DISABLED'  */+\n                      &STR(*DISABLED)     /* flag.                   */\n                ELSE                      /*                         */+\n                  IF &PANSUBS NE  THEN    /* Superset member, so set */+\n                     SET PANRMEM =        /* the '*SUPERSET' flag.   */+\n                         &STR(*SUPERSET)  /*                         */\n                ELSE                      /*                         */+\n                  SET PANRMEM =           /* Blank out the selection */\n                SET TSELECT =             /* character.              */\n              END                         /*        WHEN (C)         */\n          END                             /*        SELECT &TSELECT  */\n          ISPEXEC TBPUT    PANUTIL        /* Update the table.       */\n        END                               /*                         */\n      ISPEXEC TBDISPL  PANUTIL            /* Get next selection.     */\n      SET RC = &LASTCC                    /* Capture the return code.*/\n      IF &COMMAND = CAN    OR             /* Cancel entered.         */+\n         &COMMAND = CANCEL THEN           /*                         */+\n        DO                                /*                         */\n          ISPEXEC TBEND    PANUTIL        /* Delete table.           */\n          SET TBL_IS_BUILT_SW = 0         /*                         */\n          GOTO TOP                        /* Start over again.       */\n        END                               /*                         */\n    END                                   /*                         */\n                                          /*                         */\n  END                                     /*                         */\n                                          /*                         */\nPROCESS:                                  /*                         */+\nSET RC = 0                                /* Initialize return code. */\n                                          /*                         */\nISPEXEC VGET (ZTEMPF)                     /* Get file name.          */\nISPEXEC SELECT PGM(JOBCHAR)               /* Increment job character.*/\nISPEXEC FTOPEN TEMP                       /* Start file tailoring.   */\nISPEXEC FTINCL PANTOPDS                   /* Include skeleton.       */\nISPEXEC FTCLOSE                           /* Stop file tailoring.    */\n                                          /*                         */\nIF &POPT = TSO   THEN GOTO TSO            /* Foreground.             */\nIF &POPT = BATCH THEN GOTO BATCH          /* Background (batch job). */\n                                          /*                         */\nTSO:                                      /* Foreground.             */+\n%GENREVU '&ZTEMPF'                        /* Review control cards?   */\nIF &LASTCC NE 0 THEN GOTO TOP             /* Start over again.       */\nCONTROL NOMSG                             /*                         */\nFREE F(PANDD2)                            /* Make sure there is no   */\nCONTROL MSG                               /* PANDD2 allocation.      */\nALLOC F(SYSPUNCH)                         /* Don't need SYSPUNCH.    */+\n      DUMMY                               /*                         */+\n      REUSE                               /*                         */\n                                          /*                         */\nALLOC F(SYSPRINT)                         /* Print PAN messages to   */+\n      DA(*)                               /* the terminal.           */+\n      REUSE                               /*                         */+\n      SHR                                 /*                         */\n                                          /*                         */\nALLOC F(PANDD1)                           /* Allocate the input      */+\n      DA('&PDS1')                         /* PANVALET data set.      */+\n      REUSE                               /*                         */+\n      SHR                                 /*                         */\n                                          /*                         */\nALLOC F(PANTOPDS)                         /* Allocate the output     */+\n      DA('&PDS2')                         /* PDS.                    */+\n      REUSE                               /*                         */+\n      SHR                                 /*                         */\n                                          /*                         */\nALLOC F(SYSIN)                            /* Allocate the control    */+\n      DA('&ZTEMPF')                       /* cards.                  */+\n      REUSE                               /*                         */+\n      SHR                                 /*                         */\n                                          /*                         */\nCALL 'SYS2.PANVALET.LOADLIB(PAN#1)'       /* Execute the PAN write.  */\n                                          /*                         */\nGOTO TOP                                  /* Start over again.       */\n                                          /*                         */\nBATCH:                                    /* Background (batch job). */+\n%GENSUB '&ZTEMPF'                         /* Review the JCL?         */\n                                          /*                         */\nGOTO TOP                                  /* Start over again.       */\n./       ADD   NAME=PANUTIL\n/**********************************************************************/\n/*                                                                    */\n/*  CLIST NAME:       PANUTIL                                         */\n/*                                                                    */\n/*  AUTHOR:                                                           */\n/*    Geoffrey McIntyre                                               */\n/*    Computer Operations Technical Support                           */\n/*    First Security Service Company                                  */\n/*    260 N. Charles Lindbergh Drive                                  */\n/*    Salt Lake City, UT  84116                                       */\n/*    (801) 350-6519                                                  */\n/*                                                                    */\n/*                                                                    */\n/*  LAST UPDATE:      July  11, 1989                                  */\n/*                                                                    */\n/*  DESCRIPTION:                                                      */\n/*    Browse and edit, and perform other utilities against indivi-    */\n/*    dual members of a PANVALET data set.  The members of the        */\n/*    PANVALET data set are displayed in a member list, and are       */\n/*    accessible through line commands.  The PANVALET control word    */\n/*    must be supplied for all production PANVALET data sets.         */\n/*                                                                    */\n/*  CALLING PARMS : NONE                                              */\n/*                                                                    */\n/*  RETURNED PARMS: NONE                                              */\n/*                                                                    */\n/*  TABLES:         PANSUB   PANUTIL (both temporary tables)          */\n/*                                                                    */\n/*  MSGS:           ISRZ001  ICQCA111 GEN206                          */\n/*                                                                    */\n/*  SKELETONS:      NONE                                              */\n/*                                                                    */\n/*  PANELS:         PANMSEL  PANUTIL  PANCHG   PANSUB                 */\n/*                                                                    */\n/*  CALLED FUNCTIONS: ISPEXEC:  BROWSE   CONTROL  DISPLAY  EDIT       */\n/*                              LOG      SELECT   SETMSG              */\n/*                              TBADD    TBDELETE TBDISPL  TBEND      */\n/*                              TBGET    TBMOD    TBSARG   TBSCAN     */\n/*                              TBSORT   TBTOP    TBVCLEAR            */\n/*                              VGET     VPUT                         */\n/*                                                                    */\n/*                    OTHER:    LISTDSI  GENDSNIN PAN      PAN#1      */\n/*                              PAN#2                                 */\n/*                                                                    */\n/*                    COBOL:    PANBTBL  (Build member list table)    */\n/*                              PANBSTBL (Build member list table of  */\n/*                                        subsets)                    */\n/**********************************************************************/\n/*                                                                    */\n/* Check to see if a trace of the CLIST function has been requested. */\n/* Turn on the requested tracing level.                              */\n\nISPEXEC VGET (QTRACE QTSTNAME)\nSET QNAME  EQ &SYSICMD\n\nIF &QTRACE GT 0 THEN DO\n  WRITE ************************\n  WRITE ** CLIST = &QNAME   **\n  WRITE ************************\n  ISPEXEC LOG MSG(GEN206)\n  IF &QTRACE EQ 2 THEN CONTROL SYMLIST CONLIST LIST MSG\n  ELSE IF &QTRACE EQ 3 AND &QTSTNAME EQ &QNAME THEN +\n    CONTROL SYMLIST CONLIST LIST MSG\n  END\n\nCONTROL   MSG ASIS                        /* Display messages.       */\n                                          /*                         */\nISPEXEC CONTROL ERRORS RETURN             /* Let the dialog take     */\n                                          /* care of errors.         */\nTOP:                                      /*                         */+\nISPEXEC DISPLAY PANEL(PANMSEL)            /* Data entry panel.       */\nIF &LASTCC = 8 THEN                       /* If 'END'                */+\n  DO                                      /*  delete member list     */\n    ISPEXEC TBEND    PANUTIL              /*   table,                */\n    CONTROL NOMSG                         /*                         */\n    FREE F(SYSIN SYSPRINT)                /*  de-allocate control    */\n    EXIT                                  /*   cards, and exit.      */\n  END                                     /*                         */\n                                          /*                         */\nIF &PANCNTL NE  THEN                      /* If the PANVALET control */+\n   SET PASSWORD = &STR(CON(&PANCNTL))     /* word is supplied, set   */\nELSE                                      /* the control keyword for */+\n   SET PASSWORD =                         /* PANVALET commands.      */\n                                          /*                         */\nSET DSNINFO = &PDS1                       /* Setup to check the      */\nISPEXEC VPUT DSNINFO SHARED               /* data set that the user  */\n%GENDSNIN                                 /* entered.  If not cata-  */\nISPEXEC VGET (DSNINFO REDIS) SHARED       /* loged on disk, then re- */\nSET PDS1 = &DSNINFO                       /* display entry panel     */\nIF &REDIS = YES THEN GOTO TOP             /* with error message.     */\n                                          /*                         */\nIF &PDS11 NE  THEN                        /*                         */+\n  DO                                      /*                         */\n    SET DSNINFO = &PDS11                  /* Setup to check the      */\n    ISPEXEC VPUT DSNINFO SHARED           /* data set that the user  */\n    %GENDSNIN                             /* entered.  If not cata-  */\n    ISPEXEC VGET (DSNINFO REDIS) SHARED   /* loged on disk, then re- */\n    SET PDS11 = &DSNINFO                  /* display entry panel     */\n    IF &REDIS = YES THEN GOTO TOP         /* with error message.     */\n  END                                     /*                         */\n                                          /*                         */\nLISTDSI '&PDS1'                           /*                         */\nIF &SYSDSORG NE DA THEN                   /* If data set is not      */+\n  DO                                      /* direct access, then     */\n    SET ZEDSMSG = &STR(NOT DIRECT ACCESS) /* it can not be a PANVALET*/\n    SET ZEDLMSG = &STR('&PDS1' IS '&SYSDSORG' -- PANVALET LIBRARIES +\n                  ARE DIRECT ACCESS)      /* data set. Redisplay     */\n    ISPEXEC SETMSG MSG(ISRZ001)           /* data entry panel with   */\n    GOTO TOP                              /* error message.          */\n  END                                     /*                         */\n                                          /*                         */\nIF &PDS11 NE  THEN                        /*                         */+\n  DO                                      /*                         */\n    LISTDSI '&PDS1'                       /*                         */\n    IF &SYSDSORG NE DA THEN               /* If data set is not      */+\n      DO                                  /* direct access, then     */\n        SET ZEDSMSG =                     /* it can not be a PANVALET*/+\n            &STR(NOT DIRECT ACCESS)       /* data set.               */\n      SET ZEDLMSG = &STR('&PDS11' IS '&SYSDSORG' -- PANVALET LIBRARIES +\n                  ARE DIRECT ACCESS)      /* Redisplay               */\n        ISPEXEC SETMSG MSG(ISRZ001)       /* data entry panel with   */\n        GOTO TOP                          /* error message.          */\n      END                                 /*                         */\n                                          /*                         */\n    ALLOC F(PANDD11)                      /* Allocate include        */+\n          DA('&PDS11')                    /* PANVALET.               */+\n          REUSE                           /*                         */+\n          SHR                             /*                         */\n  END                                     /*                         */\n                                          /*                         */\nALLOC F(SYSIN)                            /* Control cards for PAN   */+\n      BLKSIZE(6160)                       /* directory listing.      */+\n      DELETE                              /*                         */+\n      LRECL(80)                           /*                         */+\n      NEW                                 /*                         */+\n      RECFM(F B)                          /*                         */+\n      REUSE                               /*                         */\n                                          /*                         */\nOPENFILE SYSIN OUTPUT                     /* Open control cards.     */\n                                          /*                         */\nIF &PANCNTL NE  THEN                      /* Supply the control word,*/+\n  DO                                      /* if specified.           */\n    SET &SYSIN = &STR(++CONTROL &PANCNTL) /*                         */\n    PUTFILE SYSIN                         /*                         */\n  END                                     /*                         */\n                                          /*                         */\nIF &PANMEM NE  THEN                       /* Print member name or    */+\n  DO                                      /* member name pattern,    */\n    SET &SYSIN = &STR(++PRINT 0-UP,NAME=&PANMEM)\n  END                                     /* if such was supplied,   */\nELSE                                      /* else                    */+\n  DO                                      /*  print entire directory */\n    SET &SYSIN = &STR(++PRINT 0-UP)       /*  listing.               */\n  END                                     /*                         */\n                                          /*                         */\nPUTFILE SYSIN                             /* Write the PRINT card.   */\n                                          /*                         */\nCLOSFILE SYSIN                            /* Close the control card  */\n                                          /* file.                   */\nALLOC F(SYSPRINT)                         /* Allocate the print file.*/+\n      DUMMY                               /*                         */+\n      REUSE                               /*                         */\n                                          /*                         */\nALLOC F(PANDD1)                           /* Allocate the PANVALET   */+\n      DA('&PDS1')                         /* data set.               */+\n      REUSE                               /*                         */+\n      SHR                                 /*                         */\n                                          /*                         */\nSET &ANSWER = &STR(&SYSDSN(SYSPUNCH))     /* Does DSN=logon.SYSPUNCH */\n                                          /* exist?                  */\nIF &STR(&ANSWER) = OK THEN                /* If yes, then use it,    */+\n  ALLOC F(SYSPUNCH)                       /*                         */+\n        DA(SYSPUNCH)                      /*                         */+\n        REUSE                             /*                         */+\n        SHR                               /*                         */\nELSE                                      /* else,                   */+\n  ALLOC F(SYSPUNCH)                       /* create a new one.       */+\n        BLKSIZE(11440)                    /*                         */+\n        CYL                               /*                         */+\n        DA(SYSPUNCH)                      /*                         */+\n        LRECL(80)                         /*                         */+\n        NEW                               /*                         */+\n        RECFM(F B)                        /*                         */+\n        REUSE                             /*                         */+\n        SP(1 1)                           /*                         */\n                                          /*                         */\nCALL 'SYS2.PANVALET.LOADLIB(PAN#2)'       /* Create the directory    */\n                                          /* listing on disk.        */\nIF &LASTCC NE 0 THEN                      /* If PAN#2 did not work,  */+\n  DO                                      /* write messages.         */\n    WRITE\n    WRITE PAN#2 (PANVALET DIRECTORY PRINT) MALFUNCTIONED.\n    WRITE\n    WRITE DID YOU FORGET THE CONTROL WORD? OR DID SECURITY GET YOU?\n    GOTO TOP                              /* Usually, the user for-  */\n  END                                     /* got to supply the       */\n                                          /* control word.           */\n/**********************************************************************/\n/* VARIABLES:                                                         */\n/*     PDS1        PANVALET LIBRARY DATA SET NAME                     */\n/*     PANMEM      PANVALET LIBRARY MEMBER NAME                       */\n/*     PANRMEM     RENAMED PANVALET LIBRARY MEMBER NAME               */\n/*     PANMAIN     DATE MEMBER MAINTAINED                             */\n/*     PANACCES    DATE MEMBER ACCESSED                               */\n/*     PANSIZE     NO. OF LINES IN MEMBER                             */\n/*     PANLVL      LEVEL NUMBER                                       */\n/*     PANUSER     USER                                               */\n/*     PANSTAT     STATUS                                             */\n/*     PANFORMT    FORMAT                                             */\n/*     PANSUBS     # OF SUBSETS (IN THE SUPERSET)                     */\n/*     PANTYPE     TYPE OF MEMBER                                     */\n/**********************************************************************/\n                                          /*                         */\nISPEXEC TBEND  PANUTIL                    /* Always delete table.    */\nISPEXEC SELECT PGM(PANBTBL)               /* Build member table from */\n                                          /* PAN#2 output.           */\nIF &LASTCC NE 0 THEN                      /*                         */+\n  DO                                      /*                         */\n    WRITE\n    WRITE \"PANBTBL\" -- BUILD MEMBER LIST TABLE -- MALFUNCTIONED\n    WRITE\n    WRITE DO YOU HAVE \"ISPLLIB\" PROPERLY ALLOCATED?\n    WRITE\n    WRITE EXIT ISPF, ALLOCATE PROPERLY, AND RE-ENTER PDF.\n    GOTO TOP                              /*                         */\n  END                                     /*                         */\nEOF:                                      /*                         */+\nISPEXEC TBTOP    PANUTIL                  /* Position CRP at top.    */\nISPEXEC TBVCLEAR PANUTIL                  /* Clear table variables.  */\nSET PANMEM = &STR(*)                      /* Set up the display ser- */\nISPEXEC TBSARG   PANUTIL                  /* vice to display all     */\n                                          /* members.                */\nDISPLAY:                                  /*                         */+\nSET TBDISPL_RC = 0                        /*                         */\nDO WHILE &TBDISPL_RC LT 8                 /* MAIN LOOP - Process     */\n                                          /* multiple selections.    */\n  ISPEXEC TBDISPL  PANUTIL                /* Display the member list.*/+\n                   PANEL(PANUTIL)         /*                         */\n  SET TBDISPL_RC = &LASTCC                /* Save the return code.   */\n  IF &TBDISPL_RC = 8 THEN GOTO TOP        /* If user enters 'END',   */\n                                          /* goto the top and redis- */\n                                          /* play entry panel.       */\n  IF &COMMAND = L      OR                 /* If user entered the     */+\n     &COMMAND = LOC    OR                 /* LOCATE command,         */+\n     &COMMAND = LOCATE THEN               /*                         */+\n    DO                                    /*                         */\n      SET PANMEM = &PANLOCAT              /* position the display    */\n      ISPEXEC TBTOP   PANUTIL             /* to the PANVALET member  */\n      ISPEXEC TBSCAN                      /* that is greater than or */+\n              PANUTIL                     /* equal to the specified  */+\n              ARGLIST(PANMEM)             /* member name.            */+\n              NOREAD                      /*                         */+\n              CONDLIST(GE)                /*                         */\n      GOTO DISPLAY                        /*                         */\n    END                                   /*                         */\n                                          /*                         */\n  IF &COMMAND = SORT THEN                 /* If user entered the     */+\n    DO                                    /* SORT command,           */\n      SET SYSDVAL = &SRTFLDS              /* get SORT fields.        */\n      READDVAL &SRTFLD1 &SRTFLD2          /* Set SORT fields.        */\n      IF &SRTFLD1 =      OR               /* Default: Sort on member */+\n         &SRTFLD1 = NAME THEN             /* name.                   */+\n           SET SRTFLD1 = PANMEM           /*                         */\n      IF &SRTFLD1 = MAINTAIN THEN         /*                         */+\n         SET SRTFLD1 = PANMAIN            /*                         */\n      IF &SRTFLD1 = ACCESS   THEN         /*                         */+\n         SET SRTFLD1 = PANACCES           /*                         */\n      IF &SRTFLD1 = SIZE     THEN         /*                         */+\n         SET SRTFLD1 = PANSIZE            /*                         */\n      IF &SRTFLD1 = LVL      THEN         /*                         */+\n         SET SRTFLD1 = PANLVL             /*                         */\n      IF &SRTFLD1 = USER     THEN         /*                         */+\n         SET SRTFLD1 = PANUSER            /*                         */\n      IF &SRTFLD1 = S        THEN         /*                         */+\n         SET SRTFLD1 = PANSTAT            /*                         */\n      IF &SRTFLD1 = F        THEN         /*                         */+\n         SET SRTFLD1 = PANFORMT           /*                         */\n      IF &SRTFLD1 = SUBSETS  THEN         /*                         */+\n         SET SRTFLD1 = PANSUBS            /*                         */\n      IF &SRTFLD1 = TYPE     THEN         /*                         */+\n         SET SRTFLD1 = PANTYPE            /*                         */\n                                          /*                         */\n      IF &SRTFLD1 = PANMEM   OR           /* For these 5 fields,     */+\n         &SRTFLD1 = PANUSER  OR           /* set the sort option to  */+\n         &SRTFLD1 = PANSTAT  OR           /*                         */+\n         &SRTFLD1 = PANFORMT OR           /*                         */+\n         &SRTFLD1 = PANTYPE  THEN         /*                         */+\n           SET &SRTOPTN1 = A              /* 'ASCENDING'.            */\n      ELSE                                /* For all others, set to  */+\n           SET &SRTOPTN1 = D              /* 'DESCENDING'.           */\n                                          /*                         */\n      IF &SRTFLD2 = NAME THEN             /*                         */+\n         SET SRTFLD2 = PANMEM             /*                         */\n      IF &SRTFLD2 = MAINTAIN THEN         /*                         */+\n         SET SRTFLD2 = PANMAIN            /*                         */\n      IF &SRTFLD2 = ACCESS   THEN         /*                         */+\n         SET SRTFLD2 = PANACCES           /*                         */\n      IF &SRTFLD2 = SIZE     THEN         /*                         */+\n         SET SRTFLD2 = PANSIZE            /*                         */\n      IF &SRTFLD2 = LVL      THEN         /*                         */+\n         SET SRTFLD2 = PANLVL             /*                         */\n      IF &SRTFLD2 = USER     THEN         /*                         */+\n         SET SRTFLD2 = PANUSER            /*                         */\n      IF &SRTFLD2 = S        THEN         /*                         */+\n         SET SRTFLD2 = PANSTAT            /*                         */\n      IF &SRTFLD2 = F        THEN         /*                         */+\n         SET SRTFLD2 = PANFORMT           /*                         */\n      IF &SRTFLD2 = SUBSETS  THEN         /*                         */+\n         SET SRTFLD2 = PANSUBS            /*                         */\n      IF &SRTFLD2 = TYPE     THEN         /*                         */+\n         SET SRTFLD2 = PANTYPE            /*                         */\n                                          /*                         */\n      IF &SRTFLD2 = PANMEM   OR           /* For these 5 fields,     */+\n         &SRTFLD2 = PANUSER  OR           /* set the sort option to  */+\n         &SRTFLD2 = PANSTAT  OR           /*                         */+\n         &SRTFLD2 = PANFORMT OR           /*                         */+\n         &SRTFLD2 = PANTYPE  THEN         /*                         */+\n           SET &SRTOPTN2 = A              /* 'ASCENDING'.            */\n      ELSE                                /* For all others, set to  */+\n           SET &SRTOPTN2 = D              /* 'DESCENDING'.           */\n                                          /*                         */\n      SET MAXCC = 0                       /*                         */\n      IF &SRTFLD2 =          THEN         /*                         */+\n         ISPEXEC TBSORT                   /* Sort the table by       */+\n                 PANUTIL                  /* given sort field.       */+\n                 FIELDS(&SRTFLD1,C,&SRTOPTN1)\n      ELSE                                /*                         */+\n         ISPEXEC TBSORT                   /* Sort the table by       */+\n                 PANUTIL                  /* given sort field.       */+\n                 FIELDS(&SRTFLD1,C,&SRTOPTN1,&SRTFLD2,C,&SRTOPTN2)\n                                          /*                         */\n      IF &MAXCC = 20 THEN                 /* SORT malfunctioned      */+\n        DO                                /*                         */\n          SET BADZCMD = &STR(&COMMAND &SRTFLDS) /* Display command   */\n          SET ZEDSMSG = &STR(INVALID SORT FIELD)\n          SET ZEDLMSG = &STR(VALID SORT FIELDS ARE: NAME MAINTAIN ACCES+\n              S SIZE LVL USER S F SUBSETS and TYPE)\n          ISPEXEC SETMSG MSG(ISRZ001)     /* data entry panel with   */\n        END                               /*                         */\n                                          /*                         */\n      GOTO DISPLAY                        /*                         */\n    END                                   /* if &command = sort      */\n                                          /*                         */\n  IF &COMMAND = RENAMEV THEN              /* Special. Remove all V's */+\n    DO                                    /* from member names.      */\n      SET &TBSKIP_RC = 0                  /*                         */\n      ISPEXEC TBTOP PANUTIL               /* Position to top-of-table*/\n      DO UNTIL &TBSKIP_RC = 8             /* Do until end-of-table.  */\n        ISPEXEC TBSKIP PANUTIL NUMBER(1)  /* Get next row.           */\n        SET TBSKIP_RC = &LASTCC           /*                         */\n        IF &TBSKIP_RC = 8 THEN            /*                         */+\n           GOTO END_SKIP                  /*                         */\n        SET V =                           /* Is there a V?           */+\n            &SUBSTR(&LENGTH(&PANMEM),&PANMEM)\n        IF &V EQ V THEN                   /* Yes.                    */+\n          DO                              /*                         */\n            SET &PANRMEM =                /*                         */+\n                &SUBSTR(1:&LENGTH(&PANMEM)-1,&PANMEM)\n            CONTROL LIST                  /*  Rename the member.     */\n            PAN RENAME &PANMEM &PANRMEM &PASSWORD\n            CONTROL NOLIST                /*                         */\n                                          /*                         */\n            ISPEXEC TBDELETE PANUTIL      /* Delete the member from  */\n                                          /* the table.              */\n            SET OLDMEM  = &PANMEM         /* Save old member name.   */\n            SET PANMEM  = &PANRMEM        /* Set the '*RENAMED'      */\n            SET PANRMEM = &STR(*RENAMED)  /* text in the table.      */\n                                          /*                         */\n            ISPEXEC TBADD    PANUTIL      /* Add the renamed member  */\n                                          /* to the table.           */\n            SET ZEDSMSG = &STR(PAN     - RENAME)\n            SET ZEDLMSG = &STR(&PDS1(&OLDMEM) RENAMED (&PANMEM))\n            ISPEXEC LOG MSG(ISRZ001)      /* Log activity.           */\n          END                             /*                         */\n        END_SKIP:                         /* End of read-table.      */+\n      END                                 /* END do until skip=8.    */\n                                          /*                         */\n      ISPEXEC TBSORT                      /* Sort the table to place */+\n              PANUTIL                     /* the new members in their*/+\n              FIELDS(PANMEM,C,A)          /* correct places.         */\n                                          /*                         */\n      ISPEXEC TBTOP PANUTIL               /*                         */\n      GOTO DISPLAY                        /*                         */\n    END                                   /* END if &command=renamev */\n                                          /*                         */\n  SET PROC_FLAG = ON                      /* Multiple selection flag.*/\n  DO WHILE &PROC_FLAG = ON                /*                         */\n                                          /*                         */\n    IF &FSELECT = B OR                    /* If user wants to BROWSE */+\n       &FSELECT = E THEN                  /* or EDIT,                */+\n      DO                                  /*                         */\n        IF &STR(&PANRMEM) =               /* and if the member is a  */+\n           &STR(*SUPERSET) OR             /* superset,               */+\n           &PANSUBS GT 0   THEN           /*                         */+\n             GOTO SUPERSET                /*   goto superset code,   */\n        SET &MLENGTH = &LENGTH(&PANMEM)   /* else truncate the length*/\n        IF &MLENGTH GT 8 THEN             /* of the PANVALET member  */+\n           SET PDSMEM =                   /* name to 8 characters.   */+\n               &SUBSTR(1:8,&PANMEM)       /*                         */\n        ELSE                              /* to be the second qual-  */+\n           SET PDSMEM = &PANMEM           /* ifier of the OS data    */\n        SET PDSTYPE = &PANTYPE            /* set.                    */\n        IF &PANTYPE = ASMB THEN           /* ASM or                  */+\n           SET PDSTYPE = ASM              /*                         */\n        IF &PANTYPE = ANSCB OR            /* COBOL is the third      */+\n           &PANTYPE = COB72 THEN          /* qualifier ot the OS     */+\n             SET PDSTYPE = COBOL          /* data set.               */\n        SET &ANSWER =                     /* Does the OS data set    */+\n         &STR(&SYSDSN(&PDSMEM..&PDSTYPE)) /* already exist?          */\n        IF &STR(&ANSWER) = OK THEN        /* If so, then delete it.  */+\n           DEL &PDSMEM..&PDSTYPE          /*                         */\n        CONTROL NOMSG                     /*                         */\n        FREE F(PANDD2)                    /* Free Supersets.         */\n        CONTROL   MSG LIST                /* Retrieve PANVALET       */\n        PAN R &PANMEM DA(&PDSMEM..&PDSTYPE) EXPAND\n        CONTROL NOLIST                    /* member to OS data set.  */\n      END                                 /* if &fselect = b or e....*/\n                                          /*                         */\n    IF &FSELECT = B THEN                  /* If 'B' selected,        */+\n      DO                                  /*                         */\n        ISPEXEC CONTROL DISPLAY SAVE      /* Save TBDISPL display.   */\n        ISPEXEC BROWSE                    /*  browse retrieved       */+\n            DATASET(&PDSMEM..&PDSTYPE)    /*  PANVALET member.       */\n        ISPEXEC CONTROL DISPLAY RESTORE   /* Restore TBDISPL display.*/\n        IF &PANDISP = DELETE THEN         /* Delete retrieved OS     */+\n           DELETE &PDSMEM..&PDSTYPE       /* data set when finished  */\n        SET ZEDSMSG = &STR(PAN     - BROWSE)\n        SET ZEDLMSG = &STR(&PDS1(&PANMEM) - BROWSED)\n        ISPEXEC LOG MSG(ISRZ001)          /* Log activity.           */\n      END                                 /* with BROWSE, if so      */\n                                          /* specified.              */\n    IF &FSELECT = E THEN                  /* If 'E' selected,        */+\n      DO                                  /*  edit retrieved         */\n        ISPEXEC CONTROL DISPLAY SAVE      /* Save TBDISPL display.   */\n        ISPEXEC EDIT                      /*  PANVALET member.       */+\n               DATASET(&PDSMEM..&PDSTYPE) /*                         */\n        SET EDIT_RC = &LASTCC             /* Capture EDIT return     */\n        ISPEXEC CONTROL DISPLAY RESTORE   /* Restore TBDISPL display.*/\n        IF &EDIT_RC = 4 AND               /* code. If rc=4, then no  */+\n           &PANDISP = DELETE THEN         /* changes were made,      */+\n             DELETE &PDSMEM..&PDSTYPE     /* delete file.            */\n        IF &EDIT_RC = 0 THEN              /* If rc=0, data set was   */+\n          DO                              /* saved.                  */\n            SET HOLDMEM = &PANMEM         /* Save PANVALET member    */\n            SET    CNT  = 1               /* name; set counter,      */\n            SET ENOUGH  = 0               /* not-found flag, and     */\n            SET HOLD_STAT =               /* PROD/TEST flag.         */+\n                &SUBSTR(1,&PANSTAT)       /*                         */\n            DO UNTIL &ENOUGH = 1          /* Look for the first      */\n              SET PANMEM = &PDSMEM.C&CNT  /* available copy level,   */\n              ISPEXEC TBGET PANUTIL       /* starting at 'C1'; TBGET */+\n                            NOREAD        /* will get a rc=8 when we */\n              SET TBGET_RC = &LASTCC      /* find it.                */\n              IF &TBGET_RC = 0 THEN       /*                         */+\n                 SET CNT = &CNT + 1       /*                         */\n              IF &TBGET_RC = 8 THEN       /* Got it.                 */+\n                 SET ENOUGH = 1           /* Set found-flag.         */\n            END                           /* DO UNTIL &ENOUGH = 1    */\n                                          /*                         */\n            IF &HOLD_STAT = P THEN        /* If production,          */+\n              DO                          /* make a PANVALET copy    */\n                CONTROL LIST              /* and store the OS file   */\n                PAN COPY &HOLDMEM &PANMEM\n                PAN S &PANMEM L(&PANLVL) DA(&PDSMEM..&PDSTYPE) &PANDISP\n              END                         /* to the PANVALET copy.   */\n                                          /*                         */\n            IF &HOLD_STAT = T THEN        /* If test, store the OS   */+\n              DO                          /* file directly to the    */\n                CONTROL LIST              /* PANVALET member.        */\n                PAN S &HOLDMEM L(&PANLVL) DA(&PDSMEM..&PDSTYPE) &PANDISP\n              END                         /*                         */\n                                          /*                         */\n            CONTROL NOLIST                /* Turn off PAN listing.   */\n        /*******************************************************/\n        /* Here we update the member list table by performing **/\n        /* a second PAN directory listing and retrieving the  **/\n        /* new information from the listing.  The table is    **/\n        /* updated to reflect the new member and member stats.**/\n        /*******************************************************/\n                                          /*                         */\n            ALLOC F(SYSIN)                /* Allocate control cards  */+\n                  BLKSIZE(6160)           /* for a special PAN dir-  */+\n                  DELETE                  /* ectory listing. Delete  */+\n                  LRECL(80)               /* when freed.             */+\n                  NEW                     /*                         */+\n                  RECFM(F B)              /*                         */+\n                  REUSE                   /*                         */\n                                          /*                         */\n            OPENFILE SYSIN OUTPUT         /* Open control cards.     */\n                                          /*                         */\n            IF &PANCNTL NE  THEN          /*                         */+\n              DO                          /*                         */\n                SET &SYSIN =              /* Control word.           */+\n                 &STR(++CONTROL &PANCNTL) /*                         */\n                PUTFILE SYSIN             /*                         */\n              END                         /*                         */\n                                          /*                         */\n            SET &TEMPMEM = &HOLDMEM       /* Save off the member     */\n            IF &LENGTH(&TEMPMEM)          /*  name.                  */+\n               = 10 THEN                  /*  name.                  */+\n               SET &TEMPMEM =             /* Truncate the last       */+\n                   &SUBSTR(1:9,&TEMPMEM)  /* character.              */\n            SET &SYSIN =                  /* Create the PAN PRINT    */+\n                &STR(++PRINT 0-UP,NAME=&TEMPMEM) /* command.         */\n            PUTFILE SYSIN                 /* Write the control card. */\n            CLOSFILE SYSIN                /* Close the control cards.*/\n            CALL 'SYS2.PANVALET.LOADLIB(PAN#2)' /* Create the dir-   */\n                                          /* ectory listing.         */\n            ALLOC F(SYSPUNCH)             /*                         */+\n                  BUFNO(7)                /* Allocate the directory  */+\n                  DA(SYSPUNCH)            /* listing so we can read  */+\n                  REUSE                   /* it.                     */+\n                  SHR                     /*                         */\n                                          /*                         */\n            OPENFILE SYSPUNCH INPUT       /* Open the directory list.*/\n                                          /*                         */\n            ERROR DO                      /* If error,               */\n              SET RC = &LASTCC            /*                         */\n              IF &RC = 400 THEN           /* if EOF,                 */+\n                 GOTO EOF1                /*    exit read loop,      */\n              ELSE RETURN                 /* else return.            */\n            END                           /*                         */\n                                          /*                         */\n            SET RC       = 0              /* Initialize return code. */\n                                          /*                         */\n            DO UNTIL &RC = 400            /* Do until end-of-file.   */\n              GETFILE SYSPUNCH            /* Read directory listing. */\n              SET PANMEM   = &SUBSTR(1:10,&STR(&SYSPUNCH))\n              SET PANMAIN  = &SUBSTR(27:34,&STR(&SYSPUNCH))\n              SET PANACCES = &SUBSTR(35:42,&STR(&SYSPUNCH))\n              SET PANSIZE  = &SUBSTR(50:55,&STR(&SYSPUNCH))\n              SET PANLVL   = &SUBSTR(11:13,&STR(&SYSPUNCH))\n              SET PANUSER  = &SUBSTR(14:17,&STR(&SYSPUNCH))\n              SET PANSTAT  = &SUBSTR(24:26,&STR(&SYSPUNCH))\n              SET PANFORMT = &SUBSTR(77:77,&STR(&SYSPUNCH))\n              SET PANTYPE  = &SUBSTR(19:23,&STR(&SYSPUNCH))\n                                          /*                         */\n              ISPEXEC TBMOD               /* Modify or add member    */+\n                      PANUTIL             /* in table.               */+\n                      ORDER               /* RC=8 is acceptable.     */\n                                          /*                         */\n            END                           /* DO UNTIL &RC =400       */\n            EOF1:                         /*                         */+\n            ERROR OFF                     /* Purge the error routine.*/\n                                          /*                         */\n            CLOSFILE SYSPUNCH             /* Close the directory list*/\n                                          /*                         */\n            ISPEXEC TBSORT                /* Sort the table by       */+\n                    PANUTIL               /* ascending member name.  */+\n                    FIELDS(PANMEM,C,A)    /*                         */\n                                          /*                         */\n            ISPEXEC TBGET                 /* Position the table to   */+\n                    PANUTIL               /* updated/added member    */+\n                    NOREAD                /* for display.            */\n                                          /*                         */\n            SET ZEDSMSG = &STR(PAN     - EDIT)\n            SET ZEDLMSG = &STR(&PDS1(&PANMEM) - SAVED)\n            ISPEXEC LOG MSG(ISRZ001)      /* Log activity.           */\n          END                             /* IF &EDIT_RC = 0         */\n      END                                 /* IF &FSELECT = E         */\n                                          /*                         */\n    IF &FSELECT = R THEN                  /* If 'R' selected,        */+\n      DO                                  /*                         */\n        IF &STR(&PANRMEM) = &STR(*RENAMED) OR   /* Check user        */+\n           &STR(&PANRMEM) = &STR(*DISABLED) THEN /*                  */+\n          DO                              /* did not forget the name.*/\n            SET ZEDSMSG = &STR(SPECIFY NEW NAME)\n            SET ZEDLMSG =                 /*                         */+\n                &STR('*RENAMED' AND '*DISABLED' IS NOT A VALID NEW NAME)\n            ISPEXEC SETMSG MSG(ISRZ001)   /* Display error message.  */\n            GOTO DISPLAY                  /*                         */\n          END                             /*                         */\n        CONTROL LIST                      /*  Rename the member.     */\n        PAN RENAME &PANMEM &PANRMEM &PASSWORD\n        CONTROL NOLIST                    /*                         */\n                                          /*                         */\n        ISPEXEC TBDELETE PANUTIL          /* Delete the member from  */\n                                          /* the table.              */\n        SET OLDMEM  = &PANMEM             /* Save old member name.   */\n        SET PANMEM  = &PANRMEM            /* Set the '*RENAMED'      */\n        SET PANRMEM = &STR(*RENAMED)      /* text in the table.      */\n                                          /*                         */\n        ISPEXEC TBADD    PANUTIL          /* Add the renamed member  */\n                                          /* to the table.           */\n        ISPEXEC TBSORT                    /* Sort the table to place */+\n                PANUTIL                   /* the new member in its   */+\n                FIELDS(PANMEM,C,A)        /* correct place.          */\n                                          /*                         */\n        ISPEXEC TBGET                     /* Position the CRP to dis-*/+\n                PANUTIL                   /* play the table starting */+\n                NOREAD                    /* at the new member name. */\n                                          /*                         */\n        SET ZEDSMSG = &STR(PAN     - RENAME)\n        SET ZEDLMSG = &STR(&PDS1(&OLDMEM) RENAMED (&PANMEM))\n        ISPEXEC LOG MSG(ISRZ001)          /* Log activity.           */\n      END                                 /* If &fselect = r         */\n                                          /*                         */\n    IF &FSELECT = L THEN                  /* If 'L' selected, invoke */+\n      DO                                  /* PAN LISTD command on    */\n        CONTROL LIST                      /* specified member.       */\n        PAN LISTDS &PANMEM COMMENT\n        CONTROL NOLIST                    /*                         */\n      END                                 /* ection list.            */\n                                          /*                         */\n    IF &FSELECT = P THEN                  /* If 'P' selected,        */+\n      DO                                  /* invoke PAN D command to */\n        CONTROL LIST                      /* display member on       */\n        PAN D &PANMEM\n        CONTROL NOLIST                    /* screen.                 */\n      END                                 /* If &fselect = p         */\n                                          /*                         */\n    IF &FSELECT = D THEN                  /* If 'D' selected,        */+\n      DO                                  /* disable the member,     */\n        CONTROL LIST                      /*                         */\n        PAN CHANGE &PANMEM STATUS(DISABLE) &PASSWORD\n        CONTROL NOLIST                    /*                         */\n        SET PANSTAT =                     /* set status byte,        */+\n            &SUBSTR(1:2,&PANSTAT)D        /*                         */\n        SET PANRMEM = &STR(*DISABLED)     /* set '*DISABLED', and    */\n        ISPEXEC TBMOD PANUTIL             /* update the table row.   */\n        SET ZEDSMSG = &STR(PAN     - DISABLE)\n        SET ZEDLMSG = &STR(&PDS1(&PANMEM) - DISABLED)\n        ISPEXEC LOG MSG(ISRZ001)          /* Log activity.           */\n      END                                 /* If &fselect = d         */\n                                          /*                         */\n    IF &FSELECT = C THEN                  /* If 'C' selected,        */+\n      DO                                  /* change member stats.    */\n        SET STAT1 = &SUBSTR(1:1,&PANSTAT) /* Save off the stats.     */\n        SET STAT2 = &SUBSTR(2:2,&PANSTAT) /*                         */\n        SET STAT3 = &SUBSTR(3:3,&PANSTAT) /*                         */\n        ISPEXEC CONTROL DISPLAY SAVE      /* Save TBDISPL display.   */\n        ISPEXEC DISPLAY PANEL(PANCHG)     /* Display change panel.   */\n        SET PANCHG_RC = &LASTCC           /* END?                    */\n        ISPEXEC CONTROL DISPLAY RESTORE   /* Restore TBDISPL display */\n        IF &PANCHG_RC = 8 THEN GOTO END_C /* Return if END.          */\n        CONTROL LIST                      /*                         */\n        IF &STR(&COMMENT) NE  THEN        /* Add comment line.       */+\n           PAN CH &PANMEM COM('&STR(&COMMENT)') &PASSWORD\n        IF &HOLDST1 = TEST AND            /* Change to production    */+\n           &STAT1 = PROD   THEN           /* status.                 */+\n           PAN CH &PANMEM S(PROD) &PASSWORD\n        IF &HOLDST2 NE &STAT2 THEN        /* Change active status.   */+\n           PAN CH &PANMEM S(&STAT2) &PASSWORD\n        IF &HOLDST3 NE &STAT3 THEN        /* Change enabled status.  */+\n           PAN CH &PANMEM S(&STAT3) &PASSWORD\n        IF &HOLDUSER NE &PANUSER THEN     /* Change user field.      */+\n           PAN CH &PANMEM U(&PANUSER) &PASSWORD\n        IF &HOLDLVL  NE &PANLVL  THEN     /* Change level.           */+\n           PAN CH &PANMEM L(&HOLDLVL &PANLVL) &PASSWORD\n        IF &STAT3 = ENABLE  THEN          /* Remove '*DISABLED'      */+\n           SET PANRMEM =                  /* if set.                 */\n        IF &STAT3 = DISABLE THEN          /* Set '*DISABLED'.        */+\n           SET PANRMEM = &STR(*DISABLED)  /*                         */\n        CONTROL NOLIST                    /*                         */\n        SET PANSTAT =                     /* Build the stats field.  */+\n            &SUBSTR(1,&STAT1)&SUBSTR(1,&STAT2)&SUBSTR(1,&STAT3)\n                                          /*                         */\n        ISPEXEC TBMOD PANUTIL             /* Update the table row.   */\n                                          /*                         */\n        END_C:                            /*                         */+\n        SET ZEDSMSG = &STR(PAN     - CHANGE)\n        SET ZEDLMSG = &STR(&PDS1(&PANMEM) - CHANGED)\n        ISPEXEC LOG MSG(ISRZ001)          /* Log activity.           */\n      END                                 /* if &fselect = c         */\n                                          /*                         */\n    IF &ZTDSELS > 1 THEN                  /* More selections?        */+\n      ISPEXEC TBDISPL PANUTIL             /*   Get next selection.   */\n    ELSE                                  /* Else                    */+\n      SET &PROC_FLAG = OFF                /*   Redisplay member list.*/\n  END                                     /* do while &proc_flag=on  */\nEND                                       /* do while rc lt 8        */\n                                          /*                         */\nSUPERSET:                                 /* Superset EDIT/BROWSE.   */+\nOPENFILE SYSIN OUTPUT                     /* Open control cards.     */\nIF &PANCNTL NE  THEN                      /*                         */+\n  DO                                      /* Add control word.       */\n    SET &SYSIN = &STR(++CONTROL &PANCNTL) /*                         */\n    PUTFILE SYSIN                         /*                         */\n  END\n                                          /*                         */\nSET &SYSIN = &STR(++PRINT SUPERSET,SUBSET)\nPUTFILE SYSIN                             /* Write control card.     */\nCLOSFILE SYSIN                            /* Close control cards.    */\n                                          /*                         */\nSET &ANSWER = &STR(&SYSDSN(SYSPRINT))     /* Check DSN=logon.SYSPRINT*/\nIF &STR(&ANSWER) = OK THEN                /* Does it exist?          */+\n  ALLOC F(SYSPRINT)                       /* Allocate the existing   */+\n        DA(SYSPRINT)                      /* file,                   */+\n        REUSE                             /*                         */+\n        SHR                               /*                         */\nELSE                                      /* else                    */+\n  ALLOC F(SYSPRINT)                       /* allocate the SYSPRINT   */+\n        BLKSIZE(11374)                    /* file new.               */+\n        CYL                               /*                         */+\n        DA(SYSPRINT)                      /*                         */+\n        LRECL(121)                        /*                         */+\n        NEW                               /*                         */+\n        RECFM(F B)                        /*                         */+\n        REUSE                             /*                         */+\n        SP(1 1)                           /*                         */\n                                          /*                         */\nCALL 'SYS2.PANVALET.LOADLIB(PAN#2)'       /* Create special directory*/\n                                          /* list of subsets.        */\nISPEXEC SELECT PGM(PANBSTBL)              /* Create table from list. */\n                                          /*                         */\nISPEXEC TBTOP    PANSUB                   /* Position CRP at top.    */\nISPEXEC TBVCLEAR PANSUB                   /* Clear table variables.  */\nSET PANMEM = &STR(*)                      /* Search all members.     */\nSET PANSUB = &STR(*)                      /* Search all subsets.     */\nISPEXEC TBSARG   PANSUB                   /* Start search.           */\n                                          /*                         */\nDISPLAY_SUPERSETS:                        /* Display superset/subset */+\nISPEXEC TBDISPL  PANSUB PANEL(PANSUB)     /* member list.            */\nIF &LASTCC = 8 THEN GOTO DISPLAY          /* Return if END.          */\n                                          /*                         */\nIF &ZTDSELS GT 1 THEN                     /* Sorry, only one subset  */+\n  DO                                      /* can be selected at a    */\n    ISPEXEC SETMSG MSG(ICQCA111)          /* time.                   */\n    GOTO DISPLAY_SUPERSETS                /* Redisplay.              */\n  END                                     /*                         */\n                                          /*                         */\nIF &FSELECT = E OR &FSELECT = B THEN      /* If EDIT or BROWSE sel-  */+\n  DO                                      /* ected,                  */\n    SET &MLENGTH = &LENGTH(&PANMEM)       /* truncate the superset   */\n    IF &MLENGTH GT 8 THEN                 /* name down to 8 char-    */+\n       SET SUPMEM = &SUBSTR(1:8,&PANMEM)  /* acters.                 */\n    ELSE                                  /*                         */+\n       SET SUPMEM = &PANMEM               /*                         */\n    SET &MLENGTH = &LENGTH(&PANSUB)       /* Truncate the subset     */\n    IF &MLENGTH GT 8 THEN                 /* name down to 8 char-    */+\n       SET SUBMEM = &SUBSTR(1:8,&PANSUB)  /* acters, too.            */\n    ELSE                                  /*                         */+\n       SET SUBMEM = &PANSUB               /*                         */\n    SET &ANSWER =                         /* Does DSN=logon.superset.*/+\n        &STR(&SYSDSN(&SUPMEM..&SUBMEM))   /*          subset exist?  */\n    IF &STR(&ANSWER) = OK THEN            /* If so, allocate share.  */+\n       ALLOC F(PANDD2)                    /*                         */+\n             DA(&SUPMEM..&SUBMEM)         /*                         */+\n             REUSE                        /*                         */+\n             SHR                          /*                         */\n    ELSE                                  /* If not,                 */+\n       ALLOC F(PANDD2)                    /*   allocate new.         */+\n             BLKSIZE(11440)               /*                         */+\n             DA(&SUPMEM..&SUBMEM)         /*                         */+\n             LRECL(80)                    /*                         */+\n             NEW                          /*                         */+\n             RECFM(F B)                   /*                         */+\n             RELEASE                      /*                         */+\n             REUSE                        /*                         */+\n             SP(9 2)                      /*                         */+\n             TRACKS                       /*                         */\n                                          /*                         */\n    ALLOC F(SYSPRINT)                     /* Allocate messages.      */+\n          DUMMY                           /*                         */+\n          REUSE                           /*                         */\n                                          /*                         */\n    OPENFILE SYSIN OUTPUT                 /* Open control cards.     */\n    SET &SYSIN = &STR(++WRITE WORK,&PANMEM..&PANSUB)\n    PUTFILE SYSIN                         /* Write control card.     */\n    CLOSFILE SYSIN                        /* Close control cards.    */\n    CALL 'SYS2.PANVALET.LOADLIB(PAN#1)'   /* Write subset to PANDD2. */\n    SET PAN1_RC = &LASTCC                 /* Save return code.       */\n    IF &PAN1_RC = 0 THEN                  /* If rc=0 then            */+\n      DO                                  /*                         */\n        IF &FSELECT = E THEN              /*  EDIT                   */+\n           ISPEXEC EDIT                   /*                         */+\n                   DATASET(&SUPMEM..&SUBMEM)\n        IF &FSELECT = B THEN              /*   or                    */+\n           ISPEXEC BROWSE                 /*  BROWSE the subset.     */+\n                   DATASET(&SUPMEM..&SUBMEM)\n      END                                 /*                         */\n    IF &PAN1_RC NE 0 THEN                 /* Ooops.                  */+\n      DO                                  /*                         */\n        WRITE RETRIEVAL OF SUBSET BLEW UP.\n        WRITE COND CODE = &PAN1_RC\n      END                                 /*                         */\n  END            /* if &fselect = e or &fselect = b                  */\n                                          /*                         */\nGOTO DISPLAY_SUPERSETS                    /* Redisplay subsets.      */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FILE003": {"ttr": 1799, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "FILE004": {"ttr": 2052, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "./       ADD   NAME=GEN20\nGEN201   'SPECIFICATION ERROR'         .ALARM=YES\n'TAPE DEVICES MAY NOT BE USED FOR INPUT/OUTPUT WHEN PROCESSING VIA TSO.'\nGEN202   'SPECIFICATION ERROR'         .ALARM=YES\n'A LABEL TYPE OF ''NL'' MAY NOT BE SPECIFIED FOR DISK DEVICES.'\nGEN203   'SPECIFICATION ERROR'         .ALARM=YES\n'THIS FIELD IS MUST BE LEFT BLANK FOR TAPE DATA SETS.'\nGEN204   'SPECIFICATION ERROR'         .ALARM=YES\n'THIS FIELD IS MUST BE LEFT BLANK FOR DISK DATA SETS.'\nGEN205   'UNAVAILABLE DATA SET'        .ALARM=YES\n'ANOTHER USER HAS THE SPECIFIED DATA SET ENQUEUED.'\nGEN206                                 .ALARM=NO\n'CLIST &QNAME BEGINNING EXECUTION.'\nGEN207   'INVALID RECORD LENGTH'       .ALARM=YES\n'RECORD LENGTH EXCEEDS MAXIMUM ('255') FOR EDIT - BROWSE SUBSITUTED.'\nGEN208   '''VOLSER'' MISSING'          .ALARM=YES\n'IF ''UNIT'' IS SPECIFIED, ''VOLSER'' MUST ALSO BE SPECIFIED.'\nGEN209   '''UNIT'' MISSING'            .ALARM=YES\n'IF ''VOLSER'' IS SPECIFIED, ''UNIT'' MUST ALSO BE SPECIFIED.'\n./       ADD   NAME=GEN30\nGEN301   'PARAMETER ERROR'             .ALARM=YES\n'THE EXECUTION PARAMETER IS NOT VALID.  PLEASE SEE THE TUTORIAL.'\nGEN302   'INVALID UNIT'                .ALARM=YES\n'''UNIT'' MUST BE: TEST|DISK|3350|3380|SYSDA|SYSALLDA'\nGEN303   'PARAMETERS UPDATED'          .ALARM=YES\n'ALL OF THE ''GENPARMS'' PARAMETERS HAVE BEEN UPDATED AS REQUESTED.'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FILE005": {"ttr": 2054, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "./       ADD   NAME=GENPARMS\n)ATTR\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n)BODY\n%--------------------------  DEFAULT ISPF PARAMETERS  --------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n{  JOB CLASS        %===>_Z+                (Valid execution class)\n{  MESSAGE CLASS    %===>_Z+                (Valid SYSOUT class)\n{  LONG NAME        %===>_SCUPLNAM         +(Your full name)\n{  APPLICATION CODE %===>_Z +\n{  SCU ROOM NUMBER  %===>_Z  +\n{  PHONE NUMBER     %===>_SCUPPHON+         (Format: nnn-nnnn)\n{  PRINT LINES/INCH %===>_Z   +            +(STD1, STD2, STD3, STD4, STD5, FS01)\n{  PRINT CHAR SET   %===>_Z   +            +(GT15, GT12, etc.. See help)\n{  SESSION MANAGER  %===>_Z  +             +(YES or NO)\n+\n+Specify panel colors and HILITE attributes for each field type below.\n+Available colors are: WHITE, BLUE, RED, GREEN, PINK, YELLOW, or TURQ.\n+Available HILITE attributes are: USCORE, BLINK, REVERSE, or blank (normal).\n+\n{  STANDARD INPUT     %===>_Z      +     {  HILITE %===>_Z      +\n{  FULL-SCREEN INPUT  %===>_Z      +     {  HILITE %===>_Z      +\n{  NORMAL TEXT        %===>_Z      +     {  HILITE %===>_Z      +\n{  HIGH-INTENS TEXT   %===>_Z      +     {  HILITE %===>_Z      +\n{  FIELD DESCRIPTIONS %===>_Z      +     {  HILITE %===>_Z      +\n{  OUTPUT VARIABLES   %===>_Z      +     {  HILITE %===>_Z      +\n)INIT\n  .ZVARS    = '(SCUPJOBC SCUPMSGC SCUPAPPL SCUPROOM SCUPLPI SCUPCHAR +\n    SCUPSMGR SCUPCSTI SCUPHSTI SCUPCFSI SCUPHFSI SCUPCNTX +\n    SCUPHNTX SCUPCHTX   +\n    SCUPHHTX SCUPCFDS SCUPHFDS SCUPCOVR SCUPHOVR)'\n  .CURSOR   = SCUPJOBC\n  .HELP     = GPMT001                  /* TUTORIAL PANEL          */\n  VGET '(SCUPJOBC SCUPMSGC SCUPROOM SCUPAPPL SCUPLNAM SCUPWKNO SCUPLPI +\n    SCUPCHAR +\n    SCUPSMGR SCUPCSTI SCUPHSTI SCUPCFSI SCUPHFSI SCUPCNTX SCUPHNTX +\n    SCUPCHTX SCUPHHTX SCUPCFDS SCUPHFDS SCUPCOVR SCUPHOVR)' PROFILE\n\n  &SCUPJOBC = TRANS (&SCUPJOBC &Z,'T' *,*)\n  &SCUPMSGC = TRANS (&SCUPMSGC &Z,'R' *,*)\n  &SCUPLNAM = TRANS (&SCUPLNAM &Z,&ZUSER *,*)\n  &SCUPAPPL = TRANS (&SCUPAPPL &Z,'??' *,*)\n  &SCUPROOM = TRANS (&SCUPROOM &Z,'000' *,*)\n  &SCUPPHON = TRANS (&SCUPPHON &Z,'000-0000' *,*)\n  &SCUPLPI  = TRANS (&SCUPLPI  &Z,'STD3' *,*)\n  &SCUPCHAR = TRANS (&SCUPCHAR &Z,'GT12' *,*)\n  &SCUPSMGR = TRANS (&SCUPSMGR &Z,'NO' *,*)\n  &SCUPCSTI = TRANS (&SCUPCSTI &Z,'RED' *,*)\n  &SCUPCFSI = TRANS (&SCUPCFSI &Z,'GREEN' *,*)\n  &SCUPCNTX = TRANS (&SCUPCNTX &Z,'BLUE' *,*)\n  &SCUPCHTX = TRANS (&SCUPCHTX &Z,'WHITE' *,*)\n  &SCUPCFDS = TRANS (&SCUPCFDS &Z,'TURQ' *,*)\n  &SCUPCOVR = TRANS (&SCUPCOVR &Z,'YELLOW' *,*)\n\n)PROC\n  VER (&SCUPJOBC,NB,ALPHA)\n  VER (&SCUPMSGC,NB,ALPHA)\n  VER (&SCUPLNAM,NB)\n  VER (&SCUPAPPL,NB,PICT,AA)\n  VER (&SCUPROOM,NB,PICT,NNN)\n  VER (&SCUPPHON,NB,PICT,'NNN-NNNN')\n  VER (&SCUPLPI,LIST,STD1, STD2, STD3, STD4, STD5, FS01)\n  IF (&SCUPLPI = &Z)\n    &SCUPLIP = STD3\n  IF (&SCUPCHAR = &Z)\n    &SCUPCHAR = GT12\n  IF (&SCUPLPI = 'FS01')\n    VER (&SCUPCHAR,NB,LIST,GT15)\n  IF (&SCUPCHAR = 'GT15')\n    VER (&SCUPLPI,NB,LIST,FS01)\n  &SCUPSMGR = TRANS(TRUNC(&SCUPSMGR,1) Y,YES N,NO *,*)\n  VER (&SCUPSMGR,NB,LIST,YES,NO)\n  IF (&SCUPCSTI = &Z)\n    &SCUPCSTI = 'RED'\n  &SCUPCSTI = TRANS(TRUNC(&SCUPCSTI,1) W,WHITE B,BLUE R,RED G,GREEN\n    P,PINK Y,YELLOW T,TURQ)\n  VER (&SCUPCSTI,NB,LIST,WHITE,BLUE,RED,GREEN,PINK,YELLOW,TURQ)\n  &SCUPHSTI = TRANS(TRUNC(&SCUPHSTI,1) U,USCORE B,BLINK R,REVERSE)\n  VER (&SCUPHSTI,LIST,USCORE,BLINK,REVERSE)\n  IF (&SCUPCFSI = &Z)\n    &SCUPCFSI = 'GREEN'\n  &SCUPCFSI = TRANS(TRUNC(&SCUPCFSI,1) W,WHITE B,BLUE R,RED G,GREEN\n    P,PINK Y,YELLOW T,TURQ)\n  VER (&SCUPCFSI,NB,LIST,WHITE,BLUE,RED,GREEN,PINK,YELLOW,TURQ)\n  &SCUPHFSI = TRANS(TRUNC(&SCUPHFSI,1) U,USCORE B,BLINK R,REVERSE)\n  VER (&SCUPHFSI,LIST,USCORE,BLINK,REVERSE)\n  IF (&SCUPCNTX = &Z)\n    &SCUPCNTX = 'BLUE'\n  &SCUPCNTX = TRANS(TRUNC(&SCUPCNTX,1) W,WHITE B,BLUE R,RED G,GREEN\n    P,PINK Y,YELLOW T,TURQ)\n  VER (&SCUPCNTX,NB,LIST,WHITE,BLUE,RED,GREEN,PINK,YELLOW,TURQ)\n  &SCUPHNTX = TRANS(TRUNC(&SCUPHNTX,1) U,USCORE B,BLINK R,REVERSE)\n  VER (&SCUPHNTX,LIST,USCORE,BLINK,REVERSE)\n  IF (&SCUPCHTX = &Z)\n    &SCUPCHTX = 'WHITE'\n  &SCUPCHTX = TRANS(TRUNC(&SCUPCHTX,1) W,WHITE B,BLUE R,RED G,GREEN\n    P,PINK Y,YELLOW T,TURQ)\n  VER (&SCUPCHTX,NB,LIST,WHITE,BLUE,RED,GREEN,PINK,YELLOW,TURQ)\n  &SCUPHHTX = TRANS(TRUNC(&SCUPHHTX,1) U,USCORE B,BLINK R,REVERSE)\n  VER (&SCUPHHTX,LIST,USCORE,BLINK,REVERSE)\n  IF (&SCUPCFDS = &Z)\n    &SCUPCFDS = 'TURQ'\n  &SCUPCFDS = TRANS(TRUNC(&SCUPCFDS,1) W,WHITE B,BLUE R,RED G,GREEN\n    P,PINK Y,YELLOW T,TURQ)\n  VER (&SCUPCFDS,NB,LIST,WHITE,BLUE,RED,GREEN,PINK,YELLOW,TURQ)\n  &SCUPHFDS = TRANS(TRUNC(&SCUPHFDS,1) U,USCORE B,BLINK R,REVERSE)\n  VER (&SCUPHFDS,LIST,USCORE,BLINK,REVERSE)\n  IF (&SCUPCOVR = &Z)\n    &SCUPCOVR = 'YELLOW'\n  &SCUPCOVR = TRANS(TRUNC(&SCUPCOVR,1) W,WHITE B,BLUE R,RED G,GREEN\n    P,PINK Y,YELLOW T,TURQ)\n  VER (&SCUPCOVR,NB,LIST,WHITE,BLUE,RED,GREEN,PINK,YELLOW,TURQ)\n  &SCUPHOVR = TRANS(TRUNC(&SCUPHOVR,1) U,USCORE B,BLINK R,REVERSE)\n  VER (&SCUPHOVR,LIST,USCORE,BLINK,REVERSE)\n  &TEMP     = TRUNC(&ZUSER,5)\n  &TEMP     = TRUNC(&TEMP,3)\n  &TEMP     = .TRAIL\n  &SCUPWKNO = '000&TEMP'\n  VPUT '(SCUPJOBC SCUPMSGC SCUPROOM SCUPPHON SCUPLPI  SCUPAPPL +\n         SCUPLNAM SCUPCHAR SCUPWKNO SCUPSMGR SCUPCSTI SCUPHSTI +\n         SCUPCFSI SCUPHFSI SCUPCNTX SCUPHNTX SCUPCHTX SCUPHHTX +\n         SCUPCFDS SCUPHFDS SCUPCOVR SCUPHOVR)' PROFILE\n  .CURSOR   = SCUPJOBC\n\n)END\n./       ADD   NAME=GENREVU\n)ATTR\n  { TYPE(TEXT)  INTENS(LOW)  COLOR(TURQ)   SKIP(OFF)\n  } TYPE(TEXT)  INTENS(LOW)  COLOR(YELLOW) SKIP(OFF)\n  \\ TYPE(TEXT)  INTENS(HIGH) COLOR(WHITE)  SKIP(OFF) HILITE(BLINK)\n)BODY\n%-------------------------  GENERALIZED REVIEW PANEL  --------------------------\n%OPTION %===>_OPT\n+\n%    E -+Edit the generated data set\n%    B -+Browse the generated data set\n%    P -+Proceed with processing\n%    C -+Cancel processing\n+\n+Dataset containing the generated job is:\n}    '&DSNX'\n+\n+\n_DEBUG\n)INIT\n .CURSOR = OPT\n &OPT = &Z\n)PROC\n   &SOPT=TRUNC(&OPT,1)\n   VER (&SOPT,LIST,B,C,E,P)\n)END\n./       ADD   NAME=GENSUB\n)ATTR\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n)BODY\n%-------------------------  GENERALIZED SUBMIT PANEL  --------------------------\n%OPTION %===>_OPT\n+\n%    E+- Edit the generated job\n%    B+- Browse the generated job\n%    S+- Submit the generated job\n%    C+- Cancel without Submit\n+\n+Data set containing the generated job is:\n%    }DSNX\n+\n)INIT\n .HELP = GSBT001\n .CURSOR = OPT\n &OPT = &Z\n)PROC\n   &SOPT=TRUNC(&OPT,1)\n   VER (&SOPT,LIST,B,C,E,S)\n)END\n./       ADD   NAME=GPMT001\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI) /* RED */\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF) /*Y*/\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF) /*G*/\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX) /* WHITE */\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)     /* WHITE */\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX) /* BLUE */\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS) /* TURQ */\n)BODY\n%TUTORIAL-------------------DEFAULT JCL PARAMETERS  ------------------  TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |       GENERAL INFORMATION       |\n                      -----------------------------------\n\n+This panel allows you to specify some default JCL parameters.  The para-\n meters, once specified (or altered) by the user, are stored in the profile\n variable pool, thus giving standardized ISPF applications access to the same\n variables upon each invocation.\n\n{       JOB CLASS:+Specify the jobclass you want your jobs to run in.\n{   MESSAGE CLASS:+Specify the sysout class you desire the HASP to go to.\n{       LONG NAME:+Programmer's name.\n{APPLICATION CODE:+Two-digit application code or department code.\n{     ROOM NUMBER:+Bin number (your SYSOUT listings will be placed here).\n{ SESSION MANAGER:+Whether or not you want Session Manager support on the\n+                  foreground (option 4) and command (option 6) panels.\n+                  (This only is active to Session Manager users.)\n\n+                            (continued on next page)\n)PROC\n &ZUP = GPMT002\n)END\n./       ADD   NAME=GPMT002\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI) /* RED */\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF) /*Y*/\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF) /*G*/\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX) /* WHITE */\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)     /* WHITE */\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX) /* BLUE */\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS) /* TURQ */\n)BODY\n%TUTORIAL-------------------DEFAULT JCL PARAMETERS  ------------------  TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n\n+ Characters and lines per inch have restrictions which are based on the\n+ character size. All the FCB's are allowed whether they are for 8 1/2\" x 11\"\n+ paper printed non-rotated (the standard direction) or not. This affects all\n+ utilities using the SCU JOBCARD which do not otherwise specify FCB so it is\n+ recommended that you only use STD3 or FS01 FCBs.\n+\n+ Only sysout is printed at the specified density, not HASPS (which default\n+ to 8 LPI.\n+\n{ GT15+characters only are only printable at 10 lines per inch (FS01).\n+\n{ GT12+characters are printable at 8 lines per inch as are most other\n+      IBM standard \"12\" characters sets (STD3 or STD2).\n+\n{ ST15+characters are printable at 12 lines per inch as are the other\n+      IBM standard \"15\" and condensed character sets (STD4 or STD5).\n+\n+\n+\n+                          (continued on next page)\n)PROC\n &ZUP = GPMT003\n)END\n./       ADD   NAME=GPMT003\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI) /* RED */\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF) /*Y*/\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF) /*G*/\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX) /* WHITE */\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)     /* WHITE */\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX) /* BLUE */\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS) /* TURQ */\n)BODY\n%TUTORIAL-------------------DEFAULT JCL PARAMETERS  ------------------  TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n\n+ The display appearance is controlled by variables designed to make the dialog\n  act in a standard way as regards to color and highlighting.  The defaults were\n  specifically selected to make First Security developed dialogs look as\n  consistant as possible to promote readability.\n\n{     STANDARD INPUT:+Command input fields.\n\n{  FULL SCREEN INPUT:+Entire display in input mode.\n\n{        NORMAL TEXT:+Usually instructions or read only text.\n\n{HIGH-INTENSITY TEXT:+Locations such as where you are or where a field is.\n\n{ FIELD DESCRIPTIONS:+Describes fields which are acted upon by a user.\n\n{   OUTPUT VARIABLES:+Fields created or changed by a dialog, not the user.\n\n)PROC\n &ZUP = GPMT001\n)END\n./       ADD   NAME=GSBT001\n+----------------------------%GENERALIZED SUBMIT+-------------------------------\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |      GENERAL INFORMATION        |\n                      -----------------------------------\n\n+ The Generalized Submit Function is invoked by ISPF applications.  It allows\n  the user to determine the disposition of the batch JCL that the dialog\n  created.  Four options are possible:\n\n+%E -+Edit the generated job:    The job is displayed in EDIT mode.\n+%B -+Browse the generated job:  The job is displayed in BROWSE mode.\n+%S -+Submit the generated job:  The job is submitted for batch processing.\n+%C -+Cancel without Submit:     Exit without submitting the job.\n\n+ One may also exit from the panel by depressing the END key.\n)PROC\n/* &ZUP = UTLT000                 /* next higher hierarchy panel */\n)END\n./       ADD   NAME=PANALLOC\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n  | TYPE(INPUT)  INTENS(NON)\n)BODY\n%----------------------------- ALLOCATE SUPERSET -------------------------------\n%COMMAND INPUT ===>_ZCMD                                                       +\n%\n+\n{ PANVALET DATA SET ===>_PANDSN                                      +\n+\n{ SUPERSET NAME     ===>_PSPRSTNM  +\n+\n{ TYPE              ===>_PANTYPE  + (COBOL, BAL, etc.  See manual)\n+\n{ PROCESS OPTION    ===>_POPT +       (BATCH or TSO)\n+\n{ CONTROL           ===>|Z    +\n+\n\u00a6Note:+ Supersets will be defined using the NOFORMAT option to preserve vendor\n+       line numbering.\n)INIT\nIF (&POPT = &Z)\n  &POPT = TSO\n.ZVARS = '(PANCNTL)'\n.HELP = PANT070\n&PANCNTL = &Z\n\n)PROC\nVER (&PANDSN,NB,DSNAME)\nVER (&PSPRSTNM,NB)\nVER (&PANTYPE,NB,LIST,AUTOCODER,BAL,ALC,COBOL,ANSCOBOL,COBOL-72,+\n                      FORTRAN,PL/I,PL/1,RPG,OBJECT,JCL,DATA,OTHER,+\n                      USER780,USER180)\n&POPT = TRANS ( TRUNC(&POPT,1) B,BATCH T,TSO )\nVER (&POPT,NB,LIST,BATCH,TSO)\nVER (&PANCNTL,RANGE,0,65534)\n&PDS1   = &PANDSN\nVPUT (PANDSN PANTYPE POPT) PROFILE\n)END\n./       ADD   NAME=PANCHG\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%-------------------------- PANVALET MEMBER CHANGE -----------------------------\n%OPTION  ===>_ZCMD                                                             +\n+\n+\n+\n+\n% SPECIFY THE CHANGE:\n+\n{ USER               %===>_Z   +    (Numeric)\n{ LEVEL              %===>_Z  +     (Numeric)\n{ PRODUCTION STATUS  %===>_Z   +    (PROD or TEST: you can not change to TEST!)\n{ ACTIVE     STATUS  %===>_Z       +(ACTIVE or INACTIVE)\n{ ENABLE     STATUS  %===>_Z      + (ENABLE or DISABLE)\n\n{ COMMENT            %===>_Z                                                 +\n                                    (Optional, add or replace a user comment)\n+\n)INIT\n&HOLDUSER = &PANUSER\n&HOLDLVL  = &PANLVL\n&STAT1 = TRANS(TRUNC(&STAT1,1)  P,PROD T,TEST         *,*)\n&STAT2 = TRANS(TRUNC(&STAT2,1)  A,ACTIVE I,INACTIVE   *,*)\n&STAT3 = TRANS(TRUNC(&STAT3,1)  E,ENABLE D,DISABLE    *,*)\n&HOLDST1  = &STAT1\n&HOLDST2  = &STAT2\n&HOLDST3  = &STAT3\n.ZVARS = '(PANUSER PANLVL STAT1 STAT2 STAT3 COMMENT)'\n\n)PROC\nVER (&PANUSER,NB,NUM)\nVER (&PANLVL,NB,NUM)\n&STAT1 = TRANS(TRUNC(&STAT1,1)  P,PROD T,TEST         *,*)\n&STAT2 = TRANS(TRUNC(&STAT2,1)  A,ACTIVE I,INACTIVE   *,*)\n&STAT3 = TRANS(TRUNC(&STAT3,1)  E,ENABLE D,DISABLE    *,*)\nVER (&STAT1,NB,LIST,PROD,TEST)\nVER (&STAT2,NB,LIST,ACTIVE,INACTIVE)\nVER (&STAT3,NB,LIST,ENABLE,DISABLE)\nIF (&HOLDST1 = PROD)                        /* Disallow PROD to TEST  */\n  VER(&STAT1,LIST,PROD)                     /* change.                */\n)END\n./       ADD   NAME=PANCREAC\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%------------------------  CONFIRM ALLOCATION AMOUNT  --------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n+DATA SET NAME:%&PDS1                                        +\n+\n+\n+INSTRUCTIONS:\n+\n+   You have requested over 10 cylinders of space.  Ten cylinders will hold over\n+   160,000 lines of code.\n+\n+   Press%ENTER+key to confirm the allocation amount, OR\n+     change the allocation amount and press%ENTER+.\n+      (The data set will be allocated with the requested amount).\n+\n{ SPACE             ===>_Z  +         (Space in cylinders)\n+\n+   Enter%END+command to return to previous panel.\n)INIT\n  &ZCMD = &Z\n.ZVARS = '(PANSPACE)'\n\n)PROC\n  IF (&ZCMD \u00ac= &Z)\n    .MSG = ISRU245\nVER (&PANSPACE,NB,NUM)\n)END\n./       ADD   NAME=PANCREAT\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%-----------------------------  PANVALET CREATE  -------------------------------\n%COMMAND INPUT ===>_ZCMD                                                       +\n%\n+\n+\n+\n{ PANVALET DATA SET ===>_PANDSN                                      +\n+\n{ SPACE             ===>_Z  +         (Space in cylinders)\n+\n{ PROCESS OPTION    ===>_POPT +       (BATCH or TSO)\n+\n+\n\u00a6Note:+ Processing in TSO may take a long time to complete if several cylinders\n+       are specified.  One cylinder holds roughly 16,000 lines of code.\n)INIT\nIF (&POPT = &Z)\n  &POPT = BATCH\n.ZVARS = '(PANSPACE)'\n.HELP = PANT030\n\n)PROC\nVER (&PANDSN,NB,DSNAME)\nVER (&PANSPACE,NB,NUM)\n&POPT = TRANS ( TRUNC(&POPT,1) B,BATCH T,TSO )\nVER (&POPT,NB,LIST,BATCH,TSO)\n&PDS1   = &PANDSN\nVPUT (PANDSN POPT) PROFILE\n)END\n./       ADD   NAME=PANMENU\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%--------------------------  PANVALET UTILITY MENU  ----------------------------\n%OPTION  ===>_ZCMD                                                             +\n+\n+\n+\n+\n%   1 {UTILITIES    + - Edit, browse, and perform other functions against\n%                   +   PANVALET members and subsets.\n%   2 {SCAN         + - Scan a PANVALET library for a string.\n%   3 {CREATE       + - Create a PANVALET library.\n%   4 {PAN TO PDS   + - Copy PANVALET members to a PDS.\n%   5 {PDS TO PAN   + - Copy PDS members to a PANVALET data set.\n%   6 {PAN TO PAN   + - Copy PANVALET members to another PANVALET data set.\n%   7 {ALLOCATE     + - Allocate a superset to an existing PANVALET data set.\n%   T {TUTORIAL     + - Display Information about PANVALET FUNCTIONS\n)INIT\n.HELP  = PANT000\n&ZHTOP = PANT000\n\n)PROC\n\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                1,'CMD(%PANUTIL)'\n                2,'CMD(%PANSCAN)'\n                3,'CMD(%PANCREAT)'\n                4,'CMD(%PANTOPDS)'\n                5,'CMD(%PANPDS)'\n                6,'CMD(%PANTOPAN)'\n                7,'CMD(%PANALLOC)'\n                T,'PGM(ISPTUTOR) PARM(PANT000)'\n              ' ',' '\n                *,'?' )\n\n)END\n./       ADD   NAME=PANMSEL\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n  | TYPE(INPUT)  INTENS(NON)\n)BODY\n%-------------------- PANVALET DATA SET AND MEMBER SELECT ----------------------\n%COMMAND INPUT ===>_ZCMD                                                       +\n%\n+\n+\n+\n{ PANVALET DATA SET ===>_PANDSN                                      +\n+\n{ PANVALET MEMBER   ===>_PANMEM   + (Blank or pattern for member selection list)\n+\n{ OUTPUT DISPOSITION===>_Z     +    (KEEP or DELETE PAN output from browse/edit)\n+\n{ CONTROL           ===>|Z    +\n+\n+\n+\n+\n{ INCLUDE PANVALET  ===>_PANDD11                                     +\n                                    (Optional, additional library for includes)\n)INIT\n&PANMEM  = &Z\n&PANCNTL = &Z\n.HELP    = PANT010\n.ZVARS = '(PANDISP PANCNTL)'\n/* IF (&PANDD11 = &Z)\n/*    &PANDD11 = '''FSB1.CC.PANVALET''' <=== put your panvalet here.\n\n)PROC\nVER (&PANDSN,NB,DSNAME)\nVER (&PANDD11,DSNAME)\n&PANMEM = TRUNC (&PANMEM,'*')\n&PANDISP = TRANS( TRUNC (&PANDISP,1) K,KEEP D,DELETE ' ',' ' *,'?')\nVER (&PANDISP,NB,LIST,DELETE,KEEP)\nVER (&PANCNTL,RANGE,0,65534)\n&PDS1   = &PANDSN\n&PDS11  = &PANDD11\nVPUT (PANDSN PANDISP PANDD11) PROFILE\n)END\n./       ADD   NAME=PANPDS\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n  | TYPE(INPUT)  INTENS(NON)\n)BODY\n%---------------------  PDS TO PANVALET COPY UTILITY  --------------------------\n%COMMAND INPUT ===>_ZCMD\n%\n+\n{ FROM PDS          ===>_PANIPDS                                     +\n{ TO   PANVALET LIB ===>_PANDSN                                      +\n+\n{ MEMBER            ===>_PANSMEM   + (%Member+  to be copied,\n+                                     %'*'   +  for all members,\n+                                     %pattern*+to display pattern member list,\n+                                  or %blank   +to display member list)\n+\n{ FORMAT            ===>_Z       +    (COBOL or BAL)\n{ COPY LEVEL        ===>_Z +          (Program suffix in the PANVALET directory)\n+\n{ PROCESS OPTION    ===>_POPT +       (BATCH or TSO)\n+\n{ CONTROL           ===>|Z    +\n+\n\u00a6Note:+ Processing in TSO may take a long time to complete if many members are\n+       specified.\n)INIT\nIF (&POPT = &Z)\n  &POPT = BATCH\nIF (&PANCPYL = &Z)\n  &PANCPYL = C1\n&PANCNTL = &Z\n&PANKEY  = &Z\n&ZCMD    = &Z\n.ZVARS = '(PANFORMT PANCPYL PANCNTL)'\n.HELP = PANT050\n\n)PROC\nVER (&PANDSN,NB,DSNAME)\nVER (&PANIPDS,NB,DSNAME)\n&PANFORMT = TRANS ( TRUNC(&PANFORMT,1) B,BAL\n                                       C,COBOL\n                                       J,JCL\n                                       O,OBJECT\n                                       A,ANSCOBOL\n                                       D,DATA\n                                       R,RPG\n                                       U,USER780\n                                       P,PL/1\n                                                 )\nVER (&PANFORMT,NB,LIST,BAL,COBOL,JCL,OBJECT,RPG,ALC,AUTOCODER,FORTRAN,DATA,\n                       OTHER,USER780,USER180,ANSCOBOL,PL/1,PL/I,COBOL-72)\n&POPT = TRANS ( TRUNC(&POPT,1) B,BATCH T,TSO )\nVER (&POPT,NB,LIST,BATCH,TSO)\nVER (&PANCPYL,NB,PICT,'A9')\nVER (&PANCNTL,RANGE,0,65534)\n&PDS1   = &PANIPDS\n&PDS2   = &PANDSN\nVPUT (PANDSN PANIPDS POPT PANFORMT PANCPYL) PROFILE\n)END\n./       ADD   NAME=PANPDSML\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  | AREA(DYNAMIC) SCROLL(ON) EXTEND(ON)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  \u00a2 TYPE(OUTPUT) INTENS(HIGH) JUST(RIGHT) PAD(0)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n 01 TYPE(DATAIN) INTENS(HIGH) CAPS(ON)\n 02 TYPE(DATAOUT) INTENS(LOW)\n 03 TYPE(DATAIN)  INTENS(HIGH) CAPS(ON)\n 04 TYPE(DATAOUT)  INTENS(LOW)\n 05 TYPE(DATAOUT)  INTENS(HIGH)\n 06 TYPE(DATAOUT)  INTENS(LOW)\n)BODY WIDTH(80)\n%MEMBER LIST -- &ZDSN --------------------------------------%ROW\u00a2ZMLCR%OF\u00a2ZMLTR+\n%COMMAND ===>_ZCMD                                            %SCROLL ===>_Z   +\n+Copy to{&PDS2..\n+Select multiple members, or%C+to cancel individual selections.\n+Enter%END+command to process selections or%CANCEL+to exit the member list.\n+\n&ZMLCOLS\n|ZDATA ------------------------------------------------------------------------|\n|                                                                              |\n| -----------------------------------------------------------------------------|\n)INIT\n  .ZVARS = 'ZSCML'         /* SCROLL AMT VARIABLE NAME  */\n  .HELP = ISR01130\n\n)PROC\n  VPUT (ZSCML) PROFILE\n)END\n./       ADD   NAME=PANSCAN\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n  | TYPE(INPUT)  INTENS(NON)\n)BODY\n%------------------------------  PANVALET SCAN  --------------------------------\n%COMMAND INPUT ===>_ZCMD                                                       +\n%\n+\n+\n+\n{ PANVALET DATA SET ===>_PANDSN                                      +\n+\n{ SEARCH STRING     ===>_PANSCAN                        +(May include embedded\n+                                                         blanks)\n+\n{ PROCESS OPTION    ===>_POPT +                          (BATCH or TSO)\n+\n{ CONTROL           ===>|Z    +\n+\n\u00a6Note:+ Processing in TSO may take a long time to complete.\n)INIT\nIF (&POPT = &Z)\n  &POPT = BATCH\n&PANCNTL = &Z\n.ZVARS = '(PANCNTL)'\n.HELP = PANT020\n\n)PROC\nVER (&PANDSN,NB,DSNAME)\n&POPT = TRANS ( TRUNC(&POPT,1) B,BATCH T,TSO )\nVER (&POPT,NB,LIST,BATCH,TSO)\nVER (&PANCNTL,RANGE,0,65534)\n&PDS1   = &PANDSN\nVPUT (PANDSN PANSCAN POPT) PROFILE\n)END\n./       ADD   NAME=PANSUB\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n  @ TYPE(OUTPUT) INTENS(LOW)\n  # TYPE(INPUT)  INTENS(HIGH) CAPS(ON) JUST(LEFT) PAD(_)\n  \u00ac TYPE(OUTPUT) INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n)BODY\n\u00acPDS1            %---------------  SUPERSETS  ----------------------------------\n%COMMAND INPUT ===>_ZCMD                                      %SCROLL ===>_Z   +\n%\n+Select{one+member to Edit or Browse.\n+\n+S SUPERSET   SUBSET          MAINTAIN    SIZE\n)MODEL ROWS(SCAN)\n#Z@PANMEM    @PANSUB         @PANMAIN  @PANSIZE\n)INIT\n  .ZVARS = '(ZSCML          +\n             FSELECT)'\n  &FSELECT = &Z\n  &ZTDSELS = 0\n)PROC\nVER (&FSELECT,LIST,B,E)\n)END\n./       ADD   NAME=PANTOPAN\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n  | TYPE(INPUT)  INTENS(NON)\n)BODY\n%-------------------  PANVALET TO PANVALET COPY UTILITY  -----------------------\n%COMMAND INPUT ===>_ZCMD                                                       +\n%\n+\n{ FROM PANVALET LIB ===>_PANDSN                                      +\n+\n{ TO   PANVALET LIB ===>_PANODSN                                     +\n+\n{ STARTING MEMBER   ===>_PANSMEM   +  (Member to be copied, or first one of a\n+                                      range, or blank for member list)\n+\n{ ENDING   MEMBER   ===>_PANEMEM   +  (Optional, ending member of a range to  be\n+                                      copied)\n+\n{ REPLACE           ===>_Z  +         (Replace like-named members, YES or NO)\n+\n{ PROCESS OPTION    ===>_POPT +       (BATCH or TSO)\n+\n{ CONTROL (FROM)    ===>|Z    +\n{ CONTROL (TO)      ===>|Z    +\n+\n\u00a6Note:+ Processing in TSO may take a long time to complete if many members are\n+       specified.\n)INIT\nIF (&POPT = &Z)\n  &POPT = BATCH\nIF (&PANREPL = &Z)\n  &PANREPL = YES\n&PANCNTL = &Z\n.ZVARS = '(PANREPL PANCNTL PANCNTLA)'\n.HELP = PANT060\n\n)PROC\nVER (&PANDSN,NB,DSNAME)\nVER (&PANODSN,NB,DSNAME)\nIF (&PANEMEM \u00ac= &Z)\n  VER (&PANSMEM,NB)\n&PANREPL = TRANS(TRUNC(&PANREPL,1)  Y,YES N,NO     *,*)\nVER (&PANREPL,NB,LIST,YES,NO)\n&POPT = TRANS ( TRUNC(&POPT,1) B,BATCH T,TSO )\nVER (&POPT,NB,LIST,BATCH,TSO)\nVER (&PANCNTL,RANGE,0,65534)\nVER (&PANCNTLA,RANGE,0,65534)\n&PDS1   = &PANDSN\n&PDS2   = &PANODSN\nVPUT (PANDSN PANODSN PANREPL POPT) PROFILE\n)END\n./       ADD   NAME=PANTOPDS\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n  | TYPE(INPUT)  INTENS(NON)\n)BODY\n%---------------------  PANVALET TO PDS COPY UTILITY  --------------------------\n%COMMAND INPUT ===>_ZCMD\n%\n+\n{FROM PANVALET LIB ===>_PANDSN                                      +\n+\n{TO   PDS          ===>_PANOPDS                                     +\n+\n{MEMBER            ===>_PANSMEM   +(%Member+ to be copied,\n+                                  %'*'+     for all members,\n+                                  %pattern*+to display pattern member list,\n+                                  %blank+   to display member list,\n+                                  %'PROD*'+ for all production enabled members,\n+                               or %'TEST*'+ for all test enabled members).\n+\n{PROCESS OPTION    ===>_POPT +       (BATCH or TSO)\n+\n{CONTROL           ===>|Z    +\n+\n{INCLUDE PANVALET  ===>_PANDD11                                     +\n                                   (Optional, additional library for includes)\n\u00a6Note:+ Processing in TSO may take a long time to complete if many members are\n+       specified.\n)INIT\nIF (&POPT = &Z)\n  &POPT = BATCH\n&PANCNTL = &Z\n&PANKEY  = &Z\n.ZVARS = '(PANCNTL)'\n.HELP = PANT040\n/* IF (&PANDD11 = &Z)\n/*   &PANDD11 = '''FSB1.CC.PANVALET'''   <=== put your panvalet here\n\n)PROC\nVER (&PANDSN,NB,DSNAME)\nVER (&PANOPDS,NB,DSNAME)\nVER (&PANDD11,DSNAME)\n&POPT = TRANS ( TRUNC(&POPT,1) B,BATCH T,TSO )\nVER (&POPT,NB,LIST,BATCH,TSO)\nVER (&PANCNTL,RANGE,0,65534)\n&PDS1   = &PANDSN\n&PDS2   = &PANOPDS\n&PDS11  = &PANDD11\nVPUT (PANDSN PANOPDS PANDD11 POPT) PROFILE\n)END\n./       ADD   NAME=PANTRAN\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n  @ TYPE(OUTPUT) INTENS(LOW)\n  | TYPE(OUTPUT) INTENS(LOW)  COLOR(GREEN)\n  # TYPE(INPUT)  INTENS(HIGH) CAPS(ON) JUST(LEFT) PAD(_)\n  \u00ac TYPE(OUTPUT) INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n)BODY\n\u00acPDS1            %------------ PANVALET UTILITY --------------------------------\n%COMMAND INPUT ===>_ZCMD                                      %SCROLL ===>_Z   +\n+Copy to{&PDS2..\n+Select multiple members, or%C+to cancel individual selections.\n+Enter%END+command to process selections or%CANCEL+to exit the member list.\n+\n+S   NAME     ACTION     MAINTAIN  ACCESS   SIZE  LVL  USER  S  F SUBSETS TYPE\n)MODEL ROWS(SCAN)\n#Z@PANMEM    |PANRMEM   @PANMAIN @PANACCES@Z     @Z   @Z   @Z  @Z @Z     @Z\n)INIT\n  .ZVARS = '(ZSCML          +\n             TSELECT        +\n             PANSIZE        +\n             PANLVL         +\n             PANUSER        +\n             PANSTAT        +\n             PANFORMT       +\n             PANSUBS        +\n             PANTYPE)'\n  &TSELECT = &Z\n\n)REINIT\nIF (.MSG = &Z)\n  &TSELECT = &Z\n  REFRESH(TSELECT)\n\n)PROC\nVER (&TSELECT,LIST,C,S)\n&OPTION = &ZCMD\n&COMMAND = TRUNC (&OPTION,' ')\nIF (&COMMAND = L,LOC,LOCATE)\n  &PANLOCAT = .TRAIL\n&ZCMD = &Z\n)END\n./       ADD   NAME=PANT0G0\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL -----------  PANVALET FUNCTIONS - INFORMATION  ---------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |       GENERAL INFORMATION       |\n                      -----------------------------------\n+\n   PANVALET FUNCTIONS is a software utility which allows any authorized user\n   to execute PAN functions quickly and easily -- without having to worry\n   about PANVALET syntax.\n\n   Some of the things that PANVALET FUNCTIONS does is display PANVALET library\n   members in a standard member selection list, similar to PDF Option 3.1.\n   You can then make multiple selections, such as edit, browse, rename, etc.\n\n   PANVALET FUNCTIONS will also copy members from and to a PDS, or from a\n   PANVALET library to another PANVALET library, similar to PDF Option 3.3.\n+\n   PANVALET FUNCTIONS uses the \"PRINT 0-UP\" command to access PANVALET direct-\n   ories. Unfortunately, this PRINT command requires the CONTROL word for pro-\n   tected libraries, because some versions of PRINT reset the \"LAST ACTION\"\n   field in the PANVALET directory.%This means you need to specify the CONTROL\n   word on protected libraries even if you only want to browse.+\n)PROC\n   &ZUP   = PANT000\n)END\n./       ADD   NAME=PANT000\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL -------------------- TABLE OF CONTENTS ---------------------- TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n%                     |       PANVALET FUNCTIONS        |\n%                     |       TABLE OF CONTENTS         |\n%                     -----------------------------------\n+\n+  The following topics are presented in sequence, or may be selected by\n+  entering a one-character selection code in the option field on line 2:\n+\n+     %G+ GENERAL        - General Information about PANVALET FUNCTIONS\n+     %1+ UTILITIES      - Generate SORT Jcl and Control Cards\n+     %2+ SCAN           - Generate IEBGENER Jcl and Control Cards\n+     %3+ CREATE         - Generate IEBUPDTE Jcl and Control Cards\n+     %4+ PAN TO PDS     - Copy PANVALET members to a PDS.\n+     %5+ PDS TO PAN     - Copy PDS members to a PANVALET data set.\n+     %6+ PAN TO PAN     - Copy PANVALET members to another PANVALET data set.\n+     %7+ ALLOCATE       - Allocate a superset to an existing PANVALET data set.\n)PROC\n   &ZSEL = TRANS(&ZCMD\n                G,PANT0G0\n                1,PANT010\n                2,PANT020\n                3,PANT030\n                4,PANT040\n                5,PANT050\n                6,PANT060\n                7,PANT070\n                )\n)END\n./       ADD   NAME=PANT010\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - UTILITIES  ----------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |            UTILITIES            |\n                      -----------------------------------\n+\n  The UTILITIES is the most frequently used function.  You can edit, browse,\n  rename, change, list, disable, and display individual or multiple PANVALET\n  members.\n\n %PANVALET DATA SET:  +\n       Enter the PANVALET data set name in standard TSO syntax (use quotes, or\n       else your logonid will be prefixed to the name you enter).\n\n %PANVALET MEMBER:    +\n       Leave blank or specify a pattern to display a member selection list. A\n       pattern can be specified by entering a partial name ending with an\n       asterisk; however, you may leave off the asterisk. You may also specify a\n       full member name.\n\n              Press%ENTER+to continue with next page.\n)PROC\n   &ZUP   = PANT000\n   &ZCONT = PANT011\n)END\n./       ADD   NAME=PANT011\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - UTILITIES  ----------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |            UTILITIES            |\n                      |           (continued)           |\n                      -----------------------------------\n+\n %OUTPUT DISPOSITION: +\n       When you edit or browse a PANVALET member, you are actually looking at a\n       TSO data set that was just retrieved from PANVALET. This temporary data\n       set will be kept or deleted depending on what you specify here.\n\n %CONTROL:            +\n       If the library is protected, you must specify the protection key.\n\n %INCLUDE PANVALET:   +\n       Optional. Some PANVALET members may have includes in them. If you want\n       them included in your browse and edit output, you must specify the\n       library they are in if different from%PANVALET DATA SET.+\n)PROC\n   &ZUP   = PANT000\n)END\n./       ADD   NAME=PANT015\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - UTILITIES  ----------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |            UTILITIES            |\n                      -----------------------------------\n+\n  You may enter any number of various line commands as listed on the top of the\n  member list.  For example, if you want to disable 5 members, enter a \"D\" in\n  front of each member you want disabled.\n\n %COMMANDS:+\n\n      %SORT+ You may sort the display by entering SORT with one or two sort\n       fields on the command line. e.g. \"SORT SUBSETS\" will cause all subsets to\n       \"float\" to the top of your display. Any column heading (except RENAME) is\n       a valid sort field. The date fields are sorted asis in MM/DD/YY order.\n\n      %LOCATE, LOC,+or%L+\n       You may use the LOCATE primary command to locate a member.\n\n+             Press%ENTER+to continue with next page.\n)PROC\n   &ZUP   = PANT000\n   &ZCONT = PANT016\n)END\n./       ADD   NAME=PANT016\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - UTILITIES  ----------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |            UTILITIES            |\n                      |           (continued)           |\n                      -----------------------------------\n+\n      If you select a superset for browsing or editing, a sub-selection of\n      subsets will display. The display will show%all+supersets and their\n      associated subsets, which you can select to browse or edit, regardless if\n      you selected the superset for browse or edit.\n)PROC\n   &ZUP   = PANT000\n)END\n./       ADD   NAME=PANT020\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - UTILITIES  ----------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |              SCAN               |\n                      -----------------------------------\n+\n  Use SCAN to search through an entire PANVALET data set for a character string.\n\n %PANVALET DATA SET:  +\n       Enter the PANVALET data set name in standard TSO syntax (use quotes, or\n       else your logonid will be prefixed to the name you enter).\n\n %SEARCH STRING:      +\n       Specify your search string.  Embedded blanks are permissable.\n\n %PROCESS OPTION:     +\n       Specify BATCH to create a batch job, or TSO to run in foreground. BATCH\n       is recommended for large data sets.\n\n %CONTROL:            +\n       If the library is protected, you must specify the protection key.\n)PROC\n   &ZUP   = PANT000\n)END\n./       ADD   NAME=PANT030\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - UTILITIES  ----------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |             CREATE              |\n                      -----------------------------------\n+\n  Use CREATE to allocate and initialize a PANVALET data set.\n\n %PANVALET DATA SET:  +\n       Enter the PANVALET data set name in standard TSO syntax (use quotes, or\n       else your logonid will be prefixed to the name you enter).\n\n %SPACE:      +\n       Specify the amount of space you need in cylinders.  One 3380 cylinder\n       will hold about 16,000 lines of code.  If you specify more than 10\n       cylinders, a confirm panel will display. You can then hit enter to\n       accept, or change the amount to something else.\n\n %PROCESS OPTION:     +\n       Specify BATCH to create a batch job, or TSO to run in foreground. BATCH\n       is recommended for large data sets.\n)PROC\n   &ZUP   = PANT000\n)END\n./       ADD   NAME=PANT040\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - PAN TO PDS  ---------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |           PAN TO PDS            |\n                      -----------------------------------\n+\n %PAN TO PDS+allows you to copy PANVALET members to an already existing PDS\n  (Partitioned Data Set).\n\n %FROM PANVALET LIB:  +\n       Enter the PANVALET data set name you are copying from in standard TSO\n       syntax (use quotes, or else your logonid will be prefixed to the name you\n       enter).\n\n %TO PDS:             +\n       Enter the PDS name you are copying to in standard TSO syntax (use quotes,\n       or else your logonid will be prefixed to the name you enter).\n\n              Press%ENTER+to continue with next page.\n)PROC\n   &ZUP   = PANT000\n   &ZCONT = PANT041\n)END\n./       ADD   NAME=PANT041\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - PAN TO PDS  ---------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |           PAN TO PDS            |\n                      |           (continued)           |\n                      -----------------------------------\n+\n %MEMBER:             +\n       Enter%one+of the following:\n        a) a%single member name.+If it does not exist, you will get an error\n           message;\n        b) an%*+to copy all members;\n        c) a%pattern,+like%FRS*,+to specify all members that start with \"FRS\";\n        d) leave this field%blank+to get a member selection list;\n        e)%PROD*+to copy all production enabled members; or\n        f)%TEST*+to copy all test enabled members.\n\n %PROCESS OPTION:     +\n       Specify BATCH to create a batch job, or TSO to run in foreground. BATCH\n       is recommended for large data sets.\n\n              Press%ENTER+to continue with next page.\n)PROC\n   &ZUP   = PANT000\n   &ZCONT = PANT042\n)END\n./       ADD   NAME=PANT042\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - PAN TO PDS  ---------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |           PAN TO PDS            |\n                      |           (continued)           |\n                      -----------------------------------\n+\n %CONTROL:            +\n       If the library is protected, you must specify the protection key.\n\n %INCLUDE PANVALET:   +\n       Optional. Some PANVALET members may have includes in them. If you want\n       them included in your copy process, you must specify the library they are\n       in if different from%FROM PANVALET LIB.+\n\n)PROC\n   &ZUP   = PANT000\n)END\n./       ADD   NAME=PANT050\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - PDS TO PAN  ---------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |           PDS TO PAN            |\n                      -----------------------------------\n+\n %PDS TO PAN+allows you to copy PDS (Partitioned Data Set) members to an already\n  existing PANVALET data set.\n\n %FROM PDS:           +\n       Enter the PDS name you are copying from in standard TSO syntax (use\n       quotes, or else your logonid will be prefixed to the name you enter).\n\n %TO   PANVALET LIB:  +\n       Enter the PANVALET data set name you are copying to in standard TSO\n       syntax (use quotes, or else your logonid will be prefixed to the name you\n       enter).\n\n              Press%ENTER+to continue with next page.\n)PROC\n   &ZUP   = PANT000\n   &ZCONT = PANT051\n)END\n./       ADD   NAME=PANT051\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCOVR) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - PDS TO PAN  ---------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |           PDS TO PAN            |\n                      |           (continued)           |\n                      -----------------------------------\n %MEMBER:             +\n       Enter%one+of the following:\n        a) a%single member name.+If it does not exist, you will get an error\n           message;\n        b) an%*+to copy all members;\n        c) a%pattern,+like%FRS*,+to display a member list of all members start-\n           ing with%FRS+; or\n        d) leave this field%blank+to get a member selection list.\n\n %FORMAT:+\n       Enter the proper format: COBOL for cobol programs, BAL for assembler\n       programs.%Note:+although only COBOL and BAL are listed on the panel,\n       several other formats are permissable, such as JCL, RPG, FORTRAN, etc.\n\n      \\Note:+All members copied will have this format.\n\n              Press%ENTER+to continue with next page.\n)PROC\n   &ZUP   = PANT000\n   &ZCONT = PANT052\n)END\n./       ADD   NAME=PANT052\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - PDS TO PAN  ---------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |           PDS TO PAN            |\n                      |           (continued)           |\n                      -----------------------------------\n\n %COPY LEVEL:+\n       Specify the copy level, which will become a suffix to each member copied\n       to PANVALET. Suffices differentiate test enabled members from production.\n       For example, if you copy FRSOL010 to PANVALET, and the copy level is C1,\n       the PANVALET directory entry will be FRSOL010C1.\n\n %PROCESS OPTION:     +\n       Specify BATCH to create a batch job, or TSO to run in foreground. BATCH\n       is recommended if many members will be copied.\n\n %CONTROL:            +\n       If the library is protected, you must specify the protection key.\n\n)PROC\n   &ZUP   = PANT000\n)END\n./       ADD   NAME=PANT060\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - PAN TO PAN  ---------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |           PAN TO PAN            |\n                      -----------------------------------\n+\n %PAN TO PAN+allows you to copy PANVALET members to an already existing\n  (PANVALET Data Set).\n\n %FROM PANVALET LIB:  +\n       Enter the PANVALET data set name you are copying from in standard TSO\n       syntax (use quotes, or else your logonid will be prefixed to the name you\n       enter).\n\n %TO   PANVALET LIB:  +\n       Enter the PANVALET data set name you are copying to in standard TSO\n       syntax (use quotes, or else your logonid will be prefixed to the name you\n       enter).\n\n              Press%ENTER+to continue with next page.\n)PROC\n   &ZUP   = PANT000\n   &ZCONT = PANT061\n)END\n./       ADD   NAME=PANT061\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - PAN TO PAN  ---------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |           PAN TO PAN            |\n                      |           (continued)           |\n                      -----------------------------------\n+\n %STARTING MEMBER:    +\n       Enter%one+of the following:\n        a) a%single member name.+If it does not exist, you will get an error\n           message;\n        b) first member of a range; the member must exist, or else you will get\n           an error message; or\n        c) leave this field%blank+to get a member selection list.\n\n %ENDING   MEMBER:    +\n       This field is optional. If specified,%STARTING MEMBER+must also be\n       specified. By specifying a range, you can copy all members from, for\n       example, FRSOL000 to FRSOL900, inclusive. If%ENDING MEMBER+does not\n       exist, you will get an error message.\n\n              Press%ENTER+to continue with next page.\n)PROC\n   &ZUP   = PANT000\n   &ZCONT = PANT062\n)END\n./       ADD   NAME=PANT062\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ------------  PANVALET FUNCTIONS - PAN TO PAN  ---------------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |           PAN TO PAN            |\n                      |           (continued)           |\n                      -----------------------------------\n+\n %PROCESS OPTION:     +\n       Specify BATCH to create a batch job, or TSO to run in foreground. BATCH\n       is recommended for large data sets.\n\n %REPLACE: +\n       Specify YES if you want to replace identically named members.  Will not\n       work on production status members.\n\n %CONTROL (FROM):     +\n       If%FROM PANVALET LIB+is protected, you must specify the protection key.\n\n %CONTROL (TO):     +\n       If%TO   PANVALET LIB+is protected, you must specify the protection key.\n\n)PROC\n   &ZUP   = PANT000\n)END\n./       ADD   NAME=PANT070\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ---------  PANVALET FUNCTIONS - ALLOCATE SUPERSET  -----------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |        ALLOCATE SUPERSET        |\n                      -----------------------------------\n+\n %ALLOCATE SUPERSET+allows you to add a superset to an already existing\n  (PANVALET Data Set).\n\n %PANVALET DATA SET:  +\n       Enter the PANVALET data set name you want to add a superset to in\n       standard TSO syntax (use quotes, or else your logonid will be prefixed to\n       the name you enter).\n\n %SUPERSET NAME       +\n       Enter the name of the superset (up to 10 characters).\n\n %TYPE:+\n       Enter the proper format: COBOL for cobol programs, BAL for assembler\n       programs.%Note:+although only COBOL and BAL are listed on the panel,\n       several other formats are permissable, such as JCL, RPG, FORTRAN, etc.\n\n              Press%ENTER+to continue with next page.\n)PROC\n   &ZUP   = PANT000\n   &ZCONT = PANT071\n)END\n./       ADD   NAME=PANT071\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n)BODY\n%TUTORIAL ---------  PANVALET FUNCTIONS - ALLOCATE SUPERSET  -----------TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n%                     -----------------------------------\n                      |        ALLOCATE SUPERSET        |\n                                  (continued)\n                      -----------------------------------\n\n %PROCESS OPTION:     +\n       Specify BATCH to create a batch job, or TSO to run in foreground.\n\n %CONTROL:            +\n       If the library is protected, you must specify the protection key.\n\n)PROC\n   &ZUP   = PANT000\n)END\n./       ADD   NAME=PANUTIL\n)ATTR\n  _ TYPE(INPUT)  INTENS(HIGH) COLOR(&SCUPCSTI) HILITE(&SCUPHSTI) CAPS(ON)\n  } TYPE(OUTPUT) INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  \u00a6 TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCOVR) HILITE(&SCUPHOVR) CAPS(OFF)\n  % TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n  \\ TYPE(TEXT)   INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(BLINK)\n  + TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCNTX) HILITE(&SCUPHNTX)\n  { TYPE(TEXT)   INTENS(LOW)  COLOR(&SCUPCFDS) HILITE(&SCUPHFDS)\n  @ TYPE(OUTPUT) INTENS(LOW)\n  # TYPE(INPUT)  INTENS(HIGH) CAPS(ON) JUST(LEFT) PAD(_)\n  \u00ac TYPE(OUTPUT) INTENS(HIGH) COLOR(&SCUPCHTX) HILITE(&SCUPHHTX)\n)BODY\n\u00acPDS1            %------------ PANVALET UTILITY --------------------------------\n%COMMAND INPUT ===>_ZCMD                                      %SCROLL ===>_Z   +\n+\n{E+- Edit {B+- Browse {R+- Rename {C+- Change {L+- List {D+- Disable {P+-Display\n+\n+S   NAME      RENAME    MAINTAIN  ACCESS   SIZE  LVL  USER  S  F SUBSETS TYPE\n)MODEL ROWS(SCAN)\n#Z@PANMEM    _PANRMEM   @PANMAIN @PANACCES@Z     @Z   @Z   @Z  @Z @Z     @Z\n)INIT\n  .ZVARS = '(ZSCML          +\n             FSELECT        +\n             PANSIZE        +\n             PANLVL         +\n             PANUSER        +\n             PANSTAT        +\n             PANFORMT       +\n             PANSUBS        +\n             PANTYPE)'\n  .HELP = PANT015\n  &FSELECT = &Z\n  &ZTDSELS = 0\n  IF (&BADZCMD \u00ac= &Z)                    /* Display invalid command   */\n    &ZCMD = &BADZCMD\n\n)REINIT\nIF (.MSG = &Z)\n  &FSELECT = &Z\n  REFRESH(FSELECT)\n  &PANRMEM = &Z\n  REFRESH(PANRMEM)\n\n)PROC\nIF (&FSELECT = R)\n  VER (&PANRMEM,NB)\nVER (&FSELECT,LIST,B,E,R,L,D,C,P)\n&OPTION = &ZCMD\n&COMMAND = TRUNC (&OPTION,' ')\nIF (&COMMAND = L,LOC,LOCATE)\n  &PANLOCAT = .TRAIL\nIF (&COMMAND = SORT)\n  &SRTFLDS = .TRAIL\n&ZCMD = &Z\n&BADZCMD = &Z                            /* Initialize invalid command*/\n)END\n/*VER (&ZTDSELS,LIST,0000,0001,MSG=ICQCA111)  /* only 1 selection    */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FILE006": {"ttr": 2569, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "./       ADD   NAME=JOBCARD\n)SEL &SCUFREGN = &Z\n)SET SCUFREGN = 2M\n)ENDSEL\n//&ZUSER.&JOBCHAR   JOB (&SCUPAPPL,D,C,&SCUPROOM,,,&SCUPWKNO),'&SCUPLNA?\nM',CLASS=&SCUPJOBC,\n//            MSGCLASS=&SCUPMSGC,NOTIFY=&ZUSER,REGION=&SCUFREGN\n)SEL &SCUPLPI \u00ac= &Z  && &SCUPCHAR \u00ac= &Z\n//PRINT   OUTPUT DEFAULT=YES,FCB=&SCUPLPI,CHARS=&SCUPCHAR\n)ENDSEL\n)SEL &SCUPAPPL = &Z | &SCUPROOM = &Z | &SCUPJOBC = &Z | &SCUPMSGC = &Z\n//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n//*                                                                   *\n//*   WARNING  WARNING  WARNING  WARNING  WARNING  WARNING  WARNING   *\n//*                                                                   *\n//*  THIS JCL REQUIRES JOB CARD PARAMETERS WHICH MAY BE SPECIFIED IN  *\n//*  THE COMMAND 'GENPARMS'.  AFTER SPECIFYING THESE PARMS (SUCH AS   *\n//*  MSGCLASS, ROOM NUMBER, ETC.), THEY WILL BE STORED IN YOUR ISPF   *\n//*  PROFILE FOR FUTURE REFERENCE.  YOU WILL NOT NEED TO EXECUTE      *\n//*  'GENPARMS' AGAIN UNLESS YOU WISH TO CHANGE THE DEFAULTS YOU      *\n//*  HAVE SET.                                                        *\n//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n)ENDSEL\n./       ADD   NAME=PANALLOC\n)IM JOBCARD\n//JOBLIB    DD DSN=SYS2.PANVALET.LOADLIB,DISP=SHR\n//STEP010  EXEC PGM=PAN#1\n//SYSIN     DD *\n)SEL &PANCNTL \u00ac= &Z\n++CONTROL &PANCNTL\n)ENDSEL\n++ALLOCATE &PSPRSTNM,&PANTYPE,NOFORMAT\n//PANDD1    DD DSN=&PDS1,DISP=SHR\n//SYSPRINT  DD SYSOUT=*\n./       ADD   NAME=PANCREAT\n)IM JOBCARD\n//JOBLIB    DD DSN=SYS2.PANVALET.LOADLIB,DISP=SHR\n//STEP010  EXEC PGM=PAN#4\n//SYSIN     DD *\n++CLEAR RECORDS=14\n//PANDD1    DD DSN=&PDS1,DISP=(,CATLG,DELETE),\n//             UNIT=TEST,SPACE=(CYL,&PANSPACE),\n//             DCB=(RECFM=F,BLKSIZE=5492,DSORG=DA)\n//SYSPRINT  DD SYSOUT=*\n./       ADD   NAME=PANPDS\n)SEL &POPT = BATCH\n)IM JOBCARD\n//PAN      EXEC PGM=PAN#1\n//STEPLIB   DD DSN=SYS2.PANVALET.LOADLIB,DISP=SHR\n//PANPDS    DD DSN=&PDS1,\n//             DISP=SHR\n//PANDD1    DD DSN=&PDS2,DISP=SHR\n//SYSPRINT  DD SYSOUT=*\n//SYSPUNCH  DD DUMMY\n//SYSIN     DD *\n)ENDSEL\n\n)SEL &SINGLE = Y\n++OPTION INPUT,PANPDS,&PANSMEM\n)SEL &PANCNTL \u00ac= &Z\n++CONTROL &PANCNTL\n)ENDSEL\n++ADD &PANSMEM.&PANCPYL,&PANFORMT,NOFORMAT\n)ENDSEL\n\n)CM  'ALLMEMS = P' MEANS ONLY SOME OF THE MEMBERS ARE BEING COPIED,\n)CM     BUT ALL MEMBERS TO BE COPIED ARE IN THE TABLE.\n\n)SEL &ALLMEMS = Y | &ALLMEMS = P\n)DOT MEMLIST\n++OPTION INPUT,PANPDS,&PANTMEM\n)SEL &PANCNTL \u00ac= &Z\n++CONTROL &PANCNTL\n)ENDSEL\n++ADD &PANTMEM.&PANCPYL,&PANFORMT,NOFORMAT\n)ENDDOT\n)ENDSEL\n./       ADD   NAME=PANSCAN\n)IM JOBCARD\n//JOBLIB    DD DSN=SYS2.PANVALET.LOADLIB,DISP=SHR\n//STEP010  EXEC PGM=PAN#8\n//SYSIN     DD *\n)SEL &PANCNTL NE &Z\n++CONTROL &PANCNTL\n)ENDSEL\n++SCAN *,'&PANSCAN'\n//PANDD1    DD DSN=&PDS1,DISP=SHR\n//SYSPRINT  DD SYSOUT=*\n./       ADD   NAME=PANTOPAN\n)TB 72\n\n)SEL &PANREPL EQ YES\n)SET REPLACE = R\n)ENDSEL\n\n)SEL &PANREPL EQ NO\n)SET REPLACE = &Z\n)ENDSEL\n\n\n)SEL &POPT = BATCH\n)IM JOBCARD\n//JOBLIB    DD DSN=SYS2.PANVALET.LOADLIB,DISP=SHR\n//STEP010  EXEC PGM=PAN#2\n//SYSPRINT  DD SYSOUT=*\n//SYSPUNCH  DD DUMMY\n//SYSUDUMP  DD SYSOUT=D,HOLD=YES\n//PANDD1    DD DSN=&PDS1,DISP=SHR\n//PANDD2    DD DSN=&PDS2,DISP=SHR\n//SYSIN     DD *\n)ENDSEL\n\n)SEL &PANCNTL NE &Z\n++CONTROL &PANCNTL\n)ENDSEL\n\n)SEL &PANCNTLA NE &Z\n++CONTROL &PANCNTLA !A\n)ENDSEL\n\n++OPTION OUTPUT\n\n)SEL &PANSMEM NE &Z && &PANEMEM NE &Z\n++TRANSFER &PANSMEM,&PANEMEM !&REPLACE\n)ENDSEL\n\n)SEL &PANSMEM NE &Z && &PANEMEM EQ &Z\n++TRANSFER &PANSMEM !&REPLACE\n)ENDSEL\n\n)SEL &PANSMEM EQ &Z && &PANEMEM EQ &Z\n)CM           ****     DO TABLE        ****\n)CM           ****     DO TABLE        ****\n)DOT PANUTIL\n\n)SEL &TSELECT = S\n++TRANSFER &PANMEM !&REPLACE\n)SET PANACTN = '*GENERATED'\n)ENDSEL\n\n)ENDDOT\n)CM           ****    END DO TABLE     ****\n)CM           ****    END DO TABLE     ****\n)ENDSEL\n./       ADD   NAME=PANTOPDS\n)TB 72\n\n)SEL &POPT = BATCH\n)IM JOBCARD\n//JOBLIB    DD DSN=SYS2.PANVALET.LOADLIB,DISP=SHR\n//STEP010  EXEC PGM=PAN#1\n//SYSPRINT  DD SYSOUT=*\n//SYSPUNCH  DD DUMMY\n//SYSUDUMP  DD SYSOUT=D,HOLD=YES\n//PANDD1    DD DSN=&PDS1,DISP=SHR\n//PANTOPDS  DD DSN=&PDS2,DISP=SHR\n//SYSIN     DD *\n)ENDSEL\n\n)SEL &PANCNTL NE &Z\n++CONTROL &PANCNTL\n)ENDSEL\n\n++OPTION OUTPUT,PANTOPDS\n\n)SEL &PANSMEM EQ '*'\n++WRITE WORK,*\n)ENDSEL\n\n)SEL &PANSMEM EQ &Z && &PANKEY NE &Z\n++WRITE WORK,PREFIX=&PANKEY\n)ENDSEL\n\n)SEL &PANSMEM NE &Z && &PANKEY EQ &Z\n)SEL &PANSMEM NE PROD* && &PANSMEM NE TEST*\n++WRITE WORK,&PANSMEM\n)ENDSEL\n)ENDSEL\n\n)SEL &PANSMEM EQ &Z\n)CM           ****     DO TABLE        ****\n)CM           ****     DO TABLE        ****\n)DOT PANUTIL\n\n)SEL &TSELECT = S\n++WRITE WORK,&PANMEM\n)ENDSEL\n\n)ENDDOT\n)CM           ****    END DO TABLE     ****\n)CM           ****    END DO TABLE     ****\n)ENDSEL\n\n\n)CM    *****    PROCESS ALL PRODUCTION OR TEST MEMBERS  ******\n)CM    *****    PROCESS ALL PRODUCTION OR TEST MEMBERS  ******\n)SEL &PANSMEM EQ PROD*\n)CM           ****     DO TABLE        ****\n)CM           ****     DO TABLE        ****\n)DOT PANUTIL\n\n)SEL &PANSTAT = PAE\n++WRITE WORK,&PANMEM\n)ENDSEL\n\n)ENDDOT\n)CM           ****    END DO TABLE     ****\n)CM           ****    END DO TABLE     ****\n)ENDSEL\n\n)SEL &PANSMEM EQ TEST*\n)CM           ****     DO TABLE        ****\n)CM           ****     DO TABLE        ****\n)DOT PANUTIL\n\n)SEL &PANSTAT = TAE\n++WRITE WORK,&PANMEM\n)ENDSEL\n\n)ENDDOT\n)CM           ****    END DO TABLE     ****\n)CM           ****    END DO TABLE     ****\n)ENDSEL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT148/FILE148.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT148", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}