{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "SIST19", "INMTNODE": "10", "INMTUID": "-PERGEN-", "INMFTIME": "20030320121434000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 27920, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "SISTSO.SIST19.PCSF.EXEC", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SISTSO.SIST19.PCSF.EXEC": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27920, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "030079", "DS1SCEXT": "b'\\x80m\\x10'", "DS1SCALO": "b'P\\x00\\x00\\x03'", "DS1LSTAR": "b'\\x00\\x03\\x16'", "DS1TRBAL": "b'2V'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03@\\x00\\x04\\x8b \\xb8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03@\\x00\\x04\\x8b \\xb8'", "b'X\\xf2\\xdfp\\x00\\x00\\x06\\xcd\\x00\\x00\\x06\\xcd\\x00\\x04\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"PCSF": {"ttr": 31, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x005\\x01\\x03\\x07\\x1f\\x01\\x03\\x07o\\x13\\x15\\x00\\x10\\x00\\x0c\\x00\\x00\\xe2\\xc9\\xe2\\xe3\\xf1\\xf9@@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-17T13:15:35", "lines": 16, "newlines": 12, "modlines": 0, "user": "SIST19"}, "text": "/* rexx inicial de la aplicacion pcsf */\nckds='CSF.SCSFCKDS'\nlrecckds=252\nrecfckds='F' /*fixed*/\npkds='CSF.SCSFPKDS'\nlrecpkds=2800\nrecfpkds='V' /*variable*/\n\naddress ispexec\n'vput (ckds,lrecckds,recfckds) asis'\n'vput (pkds,lrecpkds,recfpkds) asis'\n'addpop'\n'select panel(pcsfp00)'\n'rempop'\nCALL PCSFFIN\nexit\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PCSFCKDS": {"ttr": 33, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x17\\x01\\x03\\x07/\\x01\\x03\\x07/\\x12\"\\x00#\\x00&\\x00\\x00\\xe2\\xc9\\xe2\\xe3\\xf1\\xf9@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2003-03-13T00:00:00", "modifydate": "2003-03-13T12:22:17", "lines": 35, "newlines": 38, "modlines": 0, "user": "SIST19"}, "text": "/* rexx obtiene en el stack las claves del ckds */\naddress ispexec\n'vget (ckds,lrecckds,recfckds) asis'\naddress tso\nmsg=msg('off')\n\n'FREE FI(SYSPRINT,SYSIN,SYSUT1,SYSUT2)'\n\n'ALLOCATE FILE(SYSPRINT) DUMMY'\n\n'ALLOC FI(SYSUT1) DA('ckds') SHR REUSE'\n\n'ALLOCATE FILE(SYSIN) REUSE UNIT(SYSDA) SPACE(1 1) TRACKS',\n'DSORG(PS) RECFM(F B) LRECL(80) BLKSIZE(0)'\n\nqueue ' REPRO IFILE(SYSUT1) OFILE(SYSUT2)'\n'execio 1 diskw SYSIN(FINIS'\n\n'ALLOCATE FILE(SYSUT2) REUSE UNIT(SYSDA) SPACE(5 5) CYLINDERS',\n'DSORG(PS) RECFM('recfckds' B) LRECL('lrecckds') BLKSIZE(0)'\n\n'CALL *(IDCAMS)'\nif rc\u00ac=0 then say 'error idcams prog pcsf01 rc 'rc\n\n'execio * diskr SYSUT2(FINIS stem keys.'\n'free fi(SYSPRINT,SYSIN,SYSUT1,SYSUT2)'\ndo i=1 to keys.0\n   if substr(keys.i,1,1)>'00'x then do\n      label=substr(keys.i,1,64)\n      type=substr(keys.i,65,8)\n      queue label'\u00c7'type\n   end\nend\ndrop keys.\nreturn\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PCSFFIN": {"ttr": 35, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x009\\x01\\x03\\x07o\\x01\\x03\\x07o\\x13$\\x00>\\x00\"\\x00\\x00\\xe2\\xc9\\xe2\\xe3\\xf1\\xf9@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2003-03-17T00:00:00", "modifydate": "2003-03-17T13:24:39", "lines": 62, "newlines": 34, "modlines": 0, "user": "SIST19"}, "text": "/* rexx inicial de la aplicacion pcsf */\nWW=15\naddress ispexec\n'addpop'\nDO WW\n  'control display lock'\n  'display panel(P000010)'\nEND\nDO WW\n  'control display lock'\n  'display panel(P000009)'\nEND\nDO WW\n  'control display lock'\n  'display panel(P000008)'\nEND\nDO WW\n  'control display lock'\n  'display panel(P000007)'\nEND\nDO WW\n  'control display lock'\n  'display panel(P000006)'\nEND\nDO WW\n  'control display lock'\n  'display panel(P000005)'\nEND\nDO WW\n  'control display lock'\n  'display panel(P000004)'\nEND\nDO WW\n  'control display lock'\n  'display panel(P000003)'\nEND\nDO WW\n  'control display lock'\n  'display panel(P000002)'\nEND\nDO WW\n  'control display lock'\n  'display panel(P000001)'\nEND\nDO WW\n  'control display lock'\n  'display panel(P000000)'\nEND\nDO WW\n  'control display lock'\n  'display panel(P000011)'\nEND\nDO WW\n  'control display lock'\n  'display panel(P000012)'\nEND\nDO WW\n  'control display lock'\n  'display panel(P000013)'\nEND\n'rempop'\nexit\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PCSFPKDS": {"ttr": 259, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x13\\x01\\x03\\x07/\\x01\\x03\\x07?\\x127\\x00#\\x00#\\x00\\x00\\xe2\\xc9\\xe2\\xe3\\xf1\\xf9@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2003-03-13T00:00:00", "modifydate": "2003-03-14T12:37:13", "lines": 35, "newlines": 35, "modlines": 0, "user": "SIST19"}, "text": "/* rexx obtiene en el stack las claves del pkds */\naddress ispexec\n'vget (pkds,lrecpkds,recfpkds) asis'\naddress tso\nmsg=msg('off')\n\n'FREE FI(SYSPRINT,SYSIN,SYSUT1,SYSUT2)'\n\n'ALLOCATE FILE(SYSPRINT) DUMMY'\n\n'ALLOC FI(SYSUT1) DA('pkds') SHR REUSE'\n\n'ALLOCATE FILE(SYSIN) REUSE UNIT(SYSDA) SPACE(1 1) TRACKS',\n'DSORG(PS) RECFM(F B) LRECL(80) BLKSIZE(0)'\n\nqueue ' REPRO IFILE(SYSUT1) OFILE(SYSUT2)'\n'execio 1 diskw SYSIN(FINIS'\n\n'ALLOCATE FILE(SYSUT2) REUSE UNIT(SYSDA) SPACE(5 5) CYLINDERS',\n'DSORG(PS) RECFM('recfpkds' B) LRECL('lrecpkds') BLKSIZE(0)'\n\n'CALL *(IDCAMS)'\nif rc\u00ac=0 then say 'error idcams prog pcsf01 rc 'rc\n\n'execio * diskr SYSUT2(FINIS stem keys.'\n'free fi(SYSPRINT,SYSIN,SYSUT1,SYSUT2)'\ndo i=1 to keys.0\n   if substr(keys.i,1,1)>'00'x then do\n      label=substr(keys.i,1,64)\n      type=substr(keys.i,65,8)\n      queue label'\u00c7'type'\u00c7'\n   end\nend\ndrop keys.\nreturn\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PCSF01": {"ttr": 787, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x015\\x00@\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x9f\\x119\\x00Y\\x00\\x01\\x00\\x00\\xe2\\xc9\\xe2\\xe3\\xf1\\xf9@@@@'", "ispf": {"version": "01.53", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-20T11:39:40", "lines": 89, "newlines": 1, "modlines": 0, "user": "SIST19"}, "text": "/*rexx*/\ncall api_vars\naddress tso\nmsg=msg('off')\ncall leo_ckds_en_stem\naddress ispexec\ndo until salir='si'\n   call tabla_ispf\n   call veo_seleccion\nend\nexit\n\nleo_ckds_en_stem:\n   'newstack'\n   call pcsfckds\n   tot=queued()\n   do i=1 to tot\n      pull label '\u00c7' type '\u00c7' .\n      label.i=label\n      type.i=type\n   end\nreturn\n\ntabla_ispf:\n  campos = 'sel1 sel2 label type'\n  'TBCREATE tabla NAMES('campos') KEYS(i) REPLACE NOWRITE'\n  'TBVCLEAR tabla'\n  sel1=' ' ; sel2='\u00d1'\n  do i=1 to tot\n    label=label.i ; type=type.i\n    if label.i\u00ac=' ' then 'TBADD tabla'\n  end\n  'TBTOP tabla'\n  'TBDISPL tabla PANEL(PCSFP01)'\n  if rc=8 then salir='si'\n  IF ZTDSELS \u00ac= 0 THEN DO\n       sel2=sel1\n       'TBMOD tabla'\n       DO WHILE ZTDSELS > 1\n          'TBDISPL tabla'\n          sel2=sel1\n          'TBMOD tabla'\n          IF ZTDSELS = 1 THEN LEAVE\n       END\n  END\nreturn\n\nveo_seleccion:\n  address ispexec\n  'TBTOP tabla'\n  do forever\n     'TBSKIP tabla'\n     if rc\u00ac=0 then leave\n     if (sel2='d'|sel2='D') then call delete_key\n  end\nreturn\n\ndelete_key:\n     'ADDPOP'\n     'DISPLAY PANEL(PCSFP02)'\n     rrc=rc\n     'REMPOP'\n     if rrc=8 then return\n     labelreg=left(label,64)||left(type,8)\n     address linkpgm \"CSNBKRD ReturnCode ReasonCode\"   ,\n                     \"ExitDataLength ExitData\"        ,\n                     \"RuleArrayCount RuleArray\",\n                     \"labelreg\"\n     ret=ReturnValue(ReturnCode,ReasonCode,label,'CSNBKRD')\n     label.i=' '\nreturn\n\napi_vars:\n  ReturnCode       = d2f(0)\n  ReasonCode       = d2f(0)\n  ExitData         = ' '\n  ExitDataLength   = d2f(0)\n  RuleArrayCount   = d2f(1)\n  RuleArray        = 'LABEL-DL'\nreturn\nd2f: procedure ; arg d ; return right('00000000'x||d2c(d),4)\n\nReturnValue: procedure\n parse arg retc , resc , val , func .\n if c2d(retc) <> 0 | c2d(Resc) <> 0 then do\n     say func' -> Return: 'c2x(retc)'  Reason: 'c2x(resc)\n     exit 8\n end\nreturn retc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PCSF02": {"ttr": 789, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x001\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x9f\\x119\\x00Y\\x00(\\x00\\x00\\xe2\\xc9\\xe2\\xe3\\xf1\\xf9@@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-20T11:39:31", "lines": 89, "newlines": 40, "modlines": 0, "user": "SIST19"}, "text": "/*rexx*/\ncall api_vars\naddress tso\nmsg=msg('off')\ncall leo_pkds_en_stem\naddress ispexec\ndo until salir='si'\n   call tabla_ispf\n   call veo_seleccion\nend\nexit\n\nleo_pkds_en_stem:\n   'newstack'\n   call pcsfpkds\n   tot=queued()\n   do i=1 to tot\n      pull label '\u00c7' type '\u00c7' .\n      label.i=label\n      type.i=type\n   end\nreturn\n\ntabla_ispf:\n  campos = 'sel1 sel2 label type'\n  'TBCREATE tabla NAMES('campos') KEYS(i) REPLACE NOWRITE'\n  'TBVCLEAR tabla'\n  sel1=' ' ; sel2='\u00d1'\n  do i=1 to tot\n    label=label.i ; type=type.i\n    if label.i\u00ac=' ' then 'TBADD tabla'\n  end\n  'TBTOP tabla'\n  'TBDISPL tabla PANEL(PCSFP01)'\n  if rc=8 then salir='si'\n  IF ZTDSELS \u00ac= 0 THEN DO\n       sel2=sel1\n       'TBMOD tabla'\n       DO WHILE ZTDSELS > 1\n          'TBDISPL tabla'\n          sel2=sel1\n          'TBMOD tabla'\n          IF ZTDSELS = 1 THEN LEAVE\n       END\n  END\nreturn\n\nveo_seleccion:\n  address ispexec\n  'TBTOP tabla'\n  do forever\n     'TBSKIP tabla'\n     if rc\u00ac=0 then leave\n     if (sel2='d'|sel2='D') then call delete_key\n  end\nreturn\n\ndelete_key:\n     'ADDPOP'\n     'DISPLAY PANEL(PCSFP02)'\n     rrc=rc\n     'REMPOP'\n     if rrc=8 then return\n     label64=left(label,64)\n     address linkpgm \"CSNDKRD ReturnCode ReasonCode\",\n                     \"ExitDataLength ExitData\",\n                     \"RuleArrayCount RuleArray\",\n                     \"label64\"\n     ret=ReturnValue(ReturnCode,ReasonCode,label,'CSNDKRD')\n     label.i=' '\nreturn\n\napi_vars:\n  ReturnCode       = d2f(0)\n  ReasonCode       = d2f(0)\n  ExitData         = ''\n  ExitDataLength   = d2f(0)\n  RuleArrayCount   = d2f(0)\n  RuleArray        = ' '\nreturn\nd2f: procedure ; arg d ; return right('00000000'x||d2c(d),4)\n\nReturnValue: procedure\n parse arg retc , resc , val , func .\n if c2d(retc) <> 0 | c2d(Resc) <> 0 then do\n     say func' -> Return: 'c2x(retc)'  Reason: 'c2x(resc)\n     exit 8\n end\nreturn retc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PCSF03": {"ttr": 283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00\\x19\\x01\\x03\\x07/\\x01\\x03\\x07?\\x108\\x00\\x16\\x00\\x07\\x00\\x00\\xe2\\xc9\\xe2\\xe3\\xf1\\xf9@@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "2003-03-13T00:00:00", "modifydate": "2003-03-14T10:38:19", "lines": 22, "newlines": 7, "modlines": 0, "user": "SIST19"}, "text": "/*rexx*/\naddress ispexec\n'vget (ckds) asis'\naddress tso\n\"CALL *(CSFDREFR) '\"ckds\"'\"\nif rc=0 then address ispexec \"setmsg msg(PCSF001)\"\nelse address ispexec \"setmsg msg(PCSF002)\"\nexit\n/*---\n| address tso\n|   QUEUE \"//\"USERID()\"R JOB CLASS=C,MSGCLASS=C,NOTIFY=&SYSUID  \"\n|   QUEUE \"//*--------------------------------------------------\"\n|   QUEUE \"//* REFRES DEL CKDS - FICHERO DE CLAVES SIMETRICAS   \"\n|   QUEUE \"//* JOB CREATED BY REXX PCSF03                       \"\n|   QUEUE \"//*--------------------------------------------------\"\n|   QUEUE \"//E03   EXEC PGM=CSFEUTIL,PARM='\"PARM\"'\"\n|   QUEUE \"//SYSPRINT DD SYSOUT=*                               \"\n|   QUEUE \"//*--------------------------------------------------\"\n|   QUEUE \" \"\n|   \"SUB *\"\n| exit\n----*/\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PCSF04": {"ttr": 285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00S\\x01\\x03\\x07/\\x01\\x03\\x07/\\x16A\\x00S\\x00S\\x00\\x00\\xe2\\xc9\\xe2\\xe3\\xf1\\xf9@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2003-03-13T00:00:00", "modifydate": "2003-03-13T16:41:53", "lines": 83, "newlines": 83, "modlines": 0, "user": "SIST19"}, "text": "/*rexx*/\ndo forever\n  call api_vars\n  call datos_para_el_hash\n  call obtengo_hash\nend\nexit\n\ndatos_para_el_hash:\n  address ispexec\n  'addpop'\n  'DISPLAY PANEL(PCSFP03)'\n  if rc=8 then exit\n  'rempop'\n  select\n    when P=1 then do\n       RuleArray='MD5     '\n       HashLength= d2f(16)\n       Hash=copies(' ',16)\n    end\n    when P=2 then do\n       RuleArray='SHA-1   '\n       HashLength= d2f(20)\n       Hash=copies(' ',20)\n    end\n    when P=3 then do\n       RuleArray='RPMD-160'\n       HashLength= d2f(20)\n       Hash=copies(' ',20)\n    end\n    otherwise nop\n  end\n  address tso\n  'alloc da('file') fi(@@@oo@@@) shr reuse'\n  if rc>2 then do\n     say 'error en alloc 'file' prog: PCSF04'\n     exit 8\n  end\n  'execio * diskr @@@oo@@@(finis stem reg.'\n  'free fi(@@@oo@@@)'\n  text=''\n  do i=1 to reg.0\n    text=text||reg.i\n    drop reg.i\n  end\n  textLength=d2f(length(text))\nreturn\n\nobtengo_hash:\n    address linkpgm \"CSNBOWH ReturnCode ReasonCode\"       ,\n                    \"ExitDataLength ExitData\"             ,\n                    \"RuleArrayCount RuleArray\"            ,\n                    \"textLength text\"                     ,\n                    \"ChainingVectorLength ChainingVector\" ,\n                    \"HashLength Hash\"\n    ret=ReturnValue(ReturnCode,ReasonCode,,'CSNDBOWH')\n\n    Hash=c2x(Hash) ; tipo=RuleArray\n    address ispexec\n    'addpop'\n    'DISPLAY PANEL(PCSFP04)'\n    if rc=8 then exit\n    'rempop'\nreturn\n\napi_vars:\n  ReturnCode           = d2f(0)\n  ReasonCode           = d2f(0)\n  ExitData             = ''\n  ExitDataLength       = d2f(0)\n  RuleArrayCount       = d2f(1)\n  ChainingVectorLength = d2f(128)\n  ChainingVector       = copies(' ',128)\nreturn\nd2f: procedure ; arg d ; return right('00000000'x||d2c(d),4)\n\nReturnValue: procedure\n parse arg retc , resc , val , func .\n if c2d(retc) <> 0 | c2d(Resc) <> 0 then do\n     say func' -> Return: 'c2x(retc)'  Reason: 'c2x(resc)\n     exit 8\n end\nreturn retc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PCSF05": {"ttr": 513, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x003\\x01\\x03\\x07?\\x01\\x03\\x07?\\x14\\x01\\x00\\x99\\x00S\\x00\\x00\\xe2\\xc9\\xe2\\xe3\\xf1\\xf9@@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "2003-03-14T00:00:00", "modifydate": "2003-03-14T14:01:33", "lines": 153, "newlines": 83, "modlines": 0, "user": "SIST19"}, "text": "/*rexx*/\ndo forever\n  call leo_pkds_en_tabla\n  call datos_para_el_hash\n  call obtengo_la_firma\nend\nexit\n\nleo_pkds_en_tabla:\n  'newstack'\n   call pcsfpkds\n   address ispexec\n   'TBCREATE tabla NAMES(SEL label) REPLACE NOWRITE'\n   'TBVCLEAR tabla'\n   sel=' '\n   tot=queued()\n   do i=1 to tot\n      pull label '\u00c7' .\n      'TBADD tabla'\n   end\n  'TBTOP tabla'\nreturn\n\ndatos_para_el_hash:\n  do until salir='si'\n     call saco_panel_seleccion\n  end\n  select\n    when P=1 then do\n       RuleArray='MD5     '\n       HashLength= d2f(16)\n       Hash=copies(' ',16)\n    end\n    when P=2 then do\n       RuleArray='SHA-1   '\n       HashLength= d2f(20)\n       Hash=copies(' ',20)\n    end\n    when P=3 then do\n       RuleArray='RPMD-160'\n       HashLength= d2f(20)\n       Hash=copies(' ',20)\n    end\n    otherwise nop\n  end\n  address tso\n  'alloc da('file') fi(@@@oo@@@) shr reuse'\n  if rc>2 then do\n     say 'error en alloc 'file' prog: PCSF05'\n     exit 8\n  end\n  'execio * diskr @@@oo@@@(finis stem reg.'\n  'free fi(@@@oo@@@)'\n  text=''\n  do i=1 to reg.0\n    text=text||reg.i\n    drop reg.i\n  end\n  textLength=d2f(length(text))\nreturn\n\nobtengo_la_firma:\n    call api_vars_hash\n    address linkpgm \"CSNBOWH ReturnCode ReasonCode\"       ,\n                    \"ExitDataLength ExitData\"             ,\n                    \"RuleArrayCount RuleArray\"            ,\n                    \"textLength text\"                     ,\n                    \"ChainingVectorLength ChainingVector\" ,\n                    \"HashLength Hash\"\n    ret=ReturnValue(ReturnCode,ReasonCode,,'CSNDBOWH')\n    Hashd=c2x(Hash) ; tipo=RuleArray\n\n    call api_vars_sign\n    address linkpgm \"CSNDDSG ReturnCode ReasonCode\"   ,\n                    \"ExitDataLength ExitData\"         ,\n                    \"RuleArrayCount RuleArray\"        ,\n                    \"PKAPrivateKeyIdentifierLength\"   ,\n                    \"PKAPrivateKeyIdentifier\"         ,\n                    \"HashLength Hash\"                 ,\n                    \"SignatureFieldLength\"            ,\n                    \"SignatureBitLength\"              ,\n                    \"SignatureField\"\n    LongFirma=c2d(SignatureFieldLength)\n    SignatureField=substr(SignatureField,1,LongFirma)\n    Sig=c2x(SignatureField)\n    ret=ReturnValue(ReturnCode,ReasonCode,'Firma 'Sig,'CSNDDSG')\n    address ispexec\n    Sig1=substr(Sig,1,64)\n    Sig2=substr(Sig,65,64)\n    Sig3=substr(Sig,129,64)\n    Sig4=substr(Sig,193,64)\n    Sig5=substr(Sig,257,64)\n    Sig6=substr(Sig,321,64)\n    Sig7=substr(Sig,385,64)\n    Sig8=substr(Sig,449,64)\n    'addpop'\n    'DISPLAY PANEL(PCSFP07)'\n    'rempop'\nreturn\n\napi_vars_hash:\n  ReturnCode           = d2f(0)\n  ReasonCode           = d2f(0)\n  ExitData             = ''\n  ExitDataLength       = d2f(0)\n  RuleArrayCount       = d2f(1)\n  ChainingVectorLength = d2f(128)\n  ChainingVector       = copies(' ',128)\nreturn\napi_vars_sign:\n  long=1000 /* como no se la longitud del modulo a priori, pongo */\n            /* un valor grande 1000, si es menor no importa      */\n            /* porque luego lo recojo con su longitud correcta   */\n  ReturnCode           = d2f(0)\n  ReasonCode           = d2f(0)\n  ExitData             = ''\n  ExitDataLength       = d2f(0)\n  RuleArrayCount       = d2f(1)\n  RuleArray            = 'ISO-9796'\n  PKAPrivateKeyIdentifierLength = d2f(64)\n  PKAPrivateKeyIdentifier = keypka  /* clave recogida del panel */\n  SignatureFieldLength = d2f(long)\n  SignatureBitLength   = d2f(0)\n  SignatureField       = copies(' ',long)\nreturn\nd2f: procedure ; arg d ; return right('00000000'x||d2c(d),4)\n\nReturnValue: procedure\n parse arg retc , resc , val , func .\n if c2d(retc) <> 0 | c2d(Resc) <> 0 then do\n     say func' -> Return: 'c2x(retc)'  Reason: 'c2x(resc)\n     exit 8\n end\nreturn retc\n\nsaco_panel_seleccion:\n   P=''\n   address ispexec\n   'TBTOP tabla'\n   'TBDISPL tabla PANEL(PCSFP05)'\n   if rc=8 then exit 8\n   if ZTDSELS \u00ac= 1  then do\n      'addpop'\n      'display panel(PCSFP06)'\n      'rempop'\n   end\n   else do\n     'TBDELETE tabla'\n     'TBMOD tabla'\n     keypka=label\n     salir='si'\n   end\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PCSF06": {"ttr": 515, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00A\\x01\\x03\\x07?\\x01\\x03\\x07o\\t\\x18\\x00_\\x00\\x86\\x00\\x00\\xe2\\xc9\\xe2\\xe3\\xf1\\xf9@@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "2003-03-14T00:00:00", "modifydate": "2003-03-17T09:18:41", "lines": 95, "newlines": 134, "modlines": 0, "user": "SIST19"}, "text": "/*rexx*/\ncall leo_ckds_en_tabla\ndo until salir='si'\n  call obtengo_datos\n  if salir='si' then call encripto\nend\nexit\n\nleo_ckds_en_tabla:\n  'newstack'\n   call pcsfckds\n   address ispexec\n   'TBCREATE tabla NAMES(SEL label type) REPLACE NOWRITE'\n   'TBVCLEAR tabla'\n   sel=' '\n   tot=queued()\n   do i=1 to tot\n      pull label '\u00c7' type '\u00c7' .\n      'TBADD tabla'\n   end\n  'TBTOP tabla'\nreturn\n\nobtengo_datos:\n   P=''\n   address ispexec\n   'TBTOP tabla'\n   'TBDISPL tabla PANEL(PCSFP08)'\n   if rc=8 then exit 8\n   if ZTDSELS \u00ac= 1  then do\n      'addpop'\n      'display panel(PCSFP06)'\n      'rempop'\n   end\n   else do\n     'TBDELETE tabla'\n     'TBMOD tabla'\n     keydes=label\n     salir='si'\n   end\nreturn\n\nencripto:\n  address tso\n  'alloc da('file1') fi(@@@o1@@@) shr reuse'\n  if rc>2 then do\n     say 'error en alloc 'file' prog: PCSF05'\n     exit 8\n  end\n  'execio * diskr @@@o1@@@(finis stem reg.'\n  'free fi(@@@o1@@@)'\n  text=''\n  call api_vars\n\n  do i=1 to reg.0\n    text=reg.i\n    call encripto_data\n    reg.i=enctext\n  end\n\n  'alloc da('file2') fi(@@@o2@@@) shr reuse'\n  'execio * diskw @@@o2@@@(finis stem reg.'\n  'free fi(@@@o2@@@)'\nreturn\n\nencripto_data:\n    textLength=d2f(length(text))\n    enctext=copies(' ',length(text))\n    address linkpgm \"CSNBENC ReturnCode ReasonCode\"       ,\n                    \"ExitDataLength ExitData\"             ,\n                    \"keydes textLength text icv\"          ,\n                    \"RuleArrayCount RuleArray\"            ,\n                    \"Pad_char ocv enctext\"\n    ret=ReturnValue(ReturnCode,ReasonCode,,'CSNBENC')\nreturn\n\napi_vars:\n  ReturnCode           = d2f(0)\n  ReasonCode           = d2f(0)\n  ExitData             = ' '\n  ExitDataLength       = d2f(0)\n  icv                  = copies('00'x,8)\n  ocv                  = copies('00'x,18)\n  RuleArrayCount       = d2f(1)\n  RuleArray            = 'CUSP    '\n  Pad_char             = d2f(0)\nreturn\nd2f: procedure ; arg d ; return right('00000000'x||d2c(d),4)\n\nReturnValue: procedure\n parse arg retc , resc , val , func .\n if c2d(retc) <> 0 | c2d(Resc) > 4 then do\n     say func' -> Return: 'c2x(retc)'  Reason: 'c2x(resc)\n end\nreturn retc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PCSF07": {"ttr": 517, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00Q\\x01\\x03\\x07O\\x01\\x03\\x07o\\t\\x18\\x00_\\x00_\\x00\\x00\\xe2\\xc9\\xe2\\xe3\\xf1\\xf9@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2003-03-15T00:00:00", "modifydate": "2003-03-17T09:18:51", "lines": 95, "newlines": 95, "modlines": 0, "user": "SIST19"}, "text": "/*rexx*/\ncall leo_ckds_en_tabla\ndo until salir='si'\n  call obtengo_datos\n  if salir='si' then call desencripto\nend\nexit\n\nleo_ckds_en_tabla:\n  'newstack'\n   call pcsfckds\n   address ispexec\n   'TBCREATE tabla NAMES(SEL label type) REPLACE NOWRITE'\n   'TBVCLEAR tabla'\n   sel=' '\n   tot=queued()\n   do i=1 to tot\n      pull label '\u00c7' type '\u00c7' .\n      'TBADD tabla'\n   end\n  'TBTOP tabla'\nreturn\n\nobtengo_datos:\n   P=''\n   address ispexec\n   'TBTOP tabla'\n   'TBDISPL tabla PANEL(PCSFP09)'\n   if rc=8 then exit 8\n   if ZTDSELS \u00ac= 1  then do\n      'addpop'\n      'display panel(PCSFP06)'\n      'rempop'\n   end\n   else do\n     'TBDELETE tabla'\n     'TBMOD tabla'\n     keydes=label\n     salir='si'\n   end\nreturn\n\ndesencripto:\n  address tso\n  'alloc da('file1') fi(@@@o1@@@) shr reuse'\n  if rc>2 then do\n     say 'error en alloc 'file' prog: PCSF05'\n     exit 8\n  end\n  'execio * diskr @@@o1@@@(finis stem reg.'\n  'free fi(@@@o1@@@)'\n  text=''\n  call api_vars\n  do i=1 to reg.0\n    text=reg.i\n    call desencripto_data\n    reg.i=cleartext\n  end\n  'alloc da('file2') fi(@@@o2@@@) shr reuse'\n  'execio * diskw @@@o2@@@(finis stem reg.'\n  'free fi(@@@o2@@@)'\nreturn\n\ndesencripto_data:\n    textLength=d2f(length(text))\n    cleartext=copies(' ',length(text))\n    address linkpgm \"CSNBDEC ReturnCode ReasonCode\"       ,\n                    \"ExitDataLength ExitData\"             ,\n                    \"keydes textLength text icv\"          ,\n                    \"RuleArrayCount RuleArray\"            ,\n                    \"ocv cleartext\"\n    ret=ReturnValue(ReturnCode,ReasonCode,,'CSNBENC')\nreturn\n\napi_vars:\n  textLength=d2f(length(text))\n  ReturnCode           = d2f(0)\n  ReasonCode           = d2f(0)\n  ExitData             = ' '\n  ExitDataLength       = d2f(0)\n  icv                  = copies('00'x,8)\n  ocv                  = copies('00'x,18)\n  RuleArrayCount       = d2f(1)\n  RuleArray            = 'CUSP    '\n  Pad_char             = d2f(0)\nreturn\nd2f: procedure ; arg d ; return right('00000000'x||d2c(d),4)\n\nReturnValue: procedure\n parse arg retc , resc , val , func .\n if c2d(retc) <> 0 | c2d(Resc) > 4 then do\n     say func' -> Return: 'c2x(retc)'  Reason: 'c2x(resc)\n     exit 8\n end\nreturn retc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PCSF08": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x007\\x01\\x03\\x07o\\x01\\x03\\x07o\\x12Y\\x00+\\x008\\x00\\x00\\xe2\\xc9\\xe2\\xe3\\xf1\\xf9@@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2003-03-17T00:00:00", "modifydate": "2003-03-17T12:59:37", "lines": 43, "newlines": 56, "modlines": 0, "user": "SIST19"}, "text": "/*rexx*/\n  call api_vars\n  Form = left('RANDOM',8)\n  number = left(' ',8)\n  do until salir='si'\n      do i=1 to 12\n          address linkpgm \"CSFRNG ReturnCode ReasonCode\"   ,\n                          \"ExitDataLength ExitData\"        ,\n                          \"Form Number\"\n          ret=ReturnValue(ReturnCode,ReasonCode,,'CSFRNG')\n          numeric digits 20\n          valdec=0; mult=1 ; val=c2x(Number)\n          do s=16 to 1 by -1\n               valdec=valdec+x2d(substr(val,s,1))*mult\n               mult=mult*16\n          end\n          interpret 'alehex'||i'=val'\n          interpret 'aledec'||i'=valdec'\n      end\n      address ispexec\n      'addpop'\n      'display panel(PCSFP10)'\n      if rc\u00ac=0 then salir='si'\n      'rempop'\n  end\nexit\n\napi_vars:\n  ReturnCode           = d2f(0)\n  ReasonCode           = d2f(0)\n  ExitData             = ''\n  ExitDataLength       = d2f(0)\n  Form                 = left('RANDOM',8)\nreturn\nd2f: procedure ; arg d ; return right('00000000'x||d2c(d),4)\n\nReturnValue: procedure\n parse arg retc , resc , func .\n if c2d(retc) <> 0 | c2d(Resc) <> 0 then do\n     say func' -> Return: 'c2x(retc)'  Reason: 'c2x(resc)\n     exit 8\n end\nreturn retc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT618/CBT.V500.FILE618.PDS/XEXEC.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT618/CBT.V500.FILE618.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}