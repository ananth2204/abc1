         TITLE 'CHANGE SUSCEPTIBILITY TO CANCEL AND FORCE COMMANDS'
CSCF   CSECT
CSCF   AMODE 31
CSCF   RMODE 24
***********************************************************************
*
*
* CSCF CAN MODIFY A USER'S CANCEL AND/OR FORCE COMMAND SUSCEPTIBLITY.
* CSCF CAN ALSO MODIFY A USER'S SUSCEPTIBLITY TO S322/S522.
*
* SYNTAX :
*
*    CSCF  < JOBNAME( JOB-NAME | '*' ) >
*          < ASID( DECIMAL-ASID | X'HEXADECIMAL-ASID' ) >
*          < CANCEL | NOCANCEL >
*          < FORCE  | NOFORCE  >
*          < TIME   | NOTIME   >
*          < WAITTIME( MMMM,SS ) >
*          < CPUTIME(  MMMM,SS ) >
*          < LIST >
*
*    ALIASES:
*
*         JOBNAME   - USERID
*         NOCANCEL  - NCANCEL
*         NOFORCE   - NFORCE
*
*         CANCEL    -  MAKE THE A/S CANCELABLE
*         NOCANCEL  -  MAKE THE A/S NON-CANCELABLE
*         FORCE     -  MAKE THE A/S FORCEABLE
*         NOFORCE   -  MAKE THE A/S NON-FORCEABLE
*         LIST      -  GIVE BEFORE AND AFTER IMAGES OF THE CB'S.
*
*   'CSCF' WITHOUT (NO)CANCEL, (NO)FORCE, (NO)TIME  GIVES THE STATUS
*   'CSCF' WITHOUT 'JOBNAME' OR 'ASID' WORKS ON INVOKER'S A/S .
*   'CSCF' WITH 'JOBNAME' AND 'ASID' REQUIRES A MATCH ON BOTH.
*   'CSCF' WITH 'JOBNAME' BUT NOT 'ASID' UPDATES ONLY IF 'JOBNAME' IS
*          UNIQUE.  OTHERWISE, IT ISSUES ERROR MESSAGE.
*
*   'CSCF CANCEL'  ASSUMES 'FORCE'   , UNLESS 'NOFORCE' IS SPECIFIED.
*   'CSCF TIME'    ASSUMES 'FORCE'   , UNLESS 'NOFORCE' IS SPECIFIED.
*   'CSCF NOFORCE' ASSUMES 'NOCANCEL', UNLESS 'CANCEL'  IS SPECIFIED.
*   'CSCF NOFORCE' ASSUMES 'NOTIME',   UNLESS 'TIME'    IS SPECIFIED.
*
*   WARNING:  DO NOT LET AN A/S TERMINATE WHEN IT IS NON-FORCEABLE.
*             ALWAYS RESET TO FORCEABLE BEFORE TSO LOGOFF.
*
*             INITIATED JOBS HAVE TWO CSCB'S, SO THE ONE WHICH
*             ASCBJBNI POINTS TO IS USED, IF ASCBJBNI IS NON-ZERO.
*
*             IF ASCBJBNI IS ZERO, THEN ASCBCSCB IS USED TO FIND
*             THE CSCB.  THIS MEANS YOU CAN ONLY UPDATE AN INIT'S
*             CANCEL/NONCANCEL STATUS IF IT IS IDLE.
*
*   ASM SYSLIBS:  SYS1.MACLIB, SYS1.AMODGEN
*
*   BITS FLIPPED:  FORCE  - ASCBNOMT BIT OF ASCBFLG2 IN ASCB
*                  CANCEL - CHCL BIT OF CHACT IN CSCB
*                  TIME   - ASCBTOFF BIT OF ASCBRCTF IN ASCB
*                  CPUTIME- ASCBJSTL WORD IN ASCB
*                  WAITTIME-ASCBSWTL WORD IN ASCB
*
*   ASCBTOFF  CONTROLS WHETHER ANY TIMING (S322 OR S522) IS DONE.
*             IF IT IS '1', THE JOB IS NOT TIMED, AND THE CPUTIME
*             AND WAITTIME VALUES ARE IGNORED.  IF IT IS '0', THE
*             CPUTIME AND WAITTIME ARE ENFORCED, SUBJECT TO THE SMF
*             EXIT IEFUTL.
*
*
***********************************************************************
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
         SAVE (14,12),,' CSCF &SYSDATE &SYSTIME '
         LR    R11,R15                 SET FIRST BASE REG
         LA    R12,2048                SET UP ...
         LA    R12,2048(R11,R12)       SECOND BASE REG
         USING CSCF,R11,R12            ADDRESSABILITY
         LR    R10,R1                  SAVE CPPL
         USING CPPL,R10                ADDRESSABILITY FOR CPPL
         L     R0,SASIZE               PUT SA SIZE IN R0
         GETMAIN  RU,LV=(0)            GETMAIN THE SAVEAREA
         ST    R1,8(,R13)              SAVE NEW SA ADDR IN PREV SA
         ST    R13,4(,R1)              SAVE PREV SA PTR IN NEW SA
         LR    R13,R1                  POINT R13 TO NEW SAVE AREA
         USING SAVEARE1,R13            ADDRESSABILITY FOR SAVEAREA
         LA    R0,8(,R13)              POINT PAST CALLER'S SA POINTER
         L     R1,SASIZE               GET SAVEAREA SIZE
         S     R1,=F'8'                DECREMENT LENGTH OF CLEAR
         XR    R3,R3                   CLEAR R3 (SIZE), R2 IS IGNORED
         XR    R2,R2                   CLEAR PAD BYTE
         MVCL  R0,R2                   CLEAR SAVEAREA STORAGE
         TITLE 'PARSE THE COMMAND'
*
* FILL IN THE PPL
*
         LA    R3,SAVEPPL              POINT R3 TO GETMAINED PPL
         USING PPL,R3                  SET ADDRESSABILITY
         MVC   PPLUPT,CPPLUPT          COPY UPT ADDRESS
         MVC   PPLECT,CPPLECT          COPY ECT ADDRESS
         LA    R1,SAVEECB              GET ECB ADDRESS
         ST    R1,PPLECB               PUT IT IN PPL
         LA    R1,SAVEPCL              GET PCL ADDRESS
         ST    R1,PPLPCL               PUT IT IN PPL
         LA    R0,SAVEPCL              SET TARGET ADDRESS IN GETM STOR
         LA    R1,PCLLEN               SET PCL SIZE
         L     R8,=A(IKJPCL)           GET PCL CSECT (TEMPLATE) ADDRESS
         LA    R9,PCLLEN               GET PCL SIZE
         MVCL  R0,R8                   COPY PCL TEMPLATE- KEEPS IT RENT
         LA    R1,SAVEANSR             GET ANSWER ADDRESS
         ST    R1,PPLANS               PUT IT IN PPL
         MVC   PPLCBUF,CPPLCBUF        COPY ADDRESS OF COMMAND BUF
         ST    R13,PPLUWA              ADDR OF SAVEAREA IN USER WORD
*                                      TO PASS TO VALIDCK RTNS (IF ANY)
* CALL PARSE ROUTINE
*
         CALLTSSR EP=IKJPARS,MF=(E,(R3)) PARSE
         CLI   SAVEANSR,X'FF'          WAS PARSE GOOD?
         BE    NOPARSE                 NO. LEAVE NOW.
         L     R9,SAVEANSR             GET POINTER TO ANSWER AREA
         USING IKJPARMD,R9             PROVIDE ADDRESSABILITY
         TITLE 'SET UP DEFAULT ASID AND JOBNAME'
*
*        SAVE ASVT DATA
*
         L     R4,CVTPTR               GET CVT
         USING CVT,R4                  SET ADDRESSABILITY
         L     R4,CVTASVT              GET ASVT
         USING ASVT,R4                 SET ADDRESSABILITY
         MVC   SAVEMAXU,ASVTMAXU
         LA    R1,ASVTENTY-4           BACK UP ONE ENTRY
         ST    R1,SAVEENTY
         DROP  R4
*
*        SET DEFAULT ASID TO WORK ON
*
         USING PSA,R0                  ADDRESSABILITY
         L     R3,PSAAOLD              GET CURRENT ASCB
         USING ASCB,R3                 SET ADDRESSABILITY
         MVC   ANB+2(2),ASCBASID       COPY ASID TO BINARY
         BAL   R8,CONVASID             CONVERT 'ANB' TO 'AN'
         ICM   R1,15,ASCBJBNI          GET ADDRESS OF JOBNAME
         BNZ   GOTUSER                 GOT HIM.
         ICM   R1,15,ASCBJBNS          GET ADDRESS OF JOBNAME
         BNZ   GOTUSER                 GOT HIM.
         LA    R1,=CL8'UNKNOWN'        DON'T KNOW
GOTUSER  MVC   JN,0(R1)                SET DEFAULT USER
*
*        CHECK FOR ASID KEYWORD
*
         XR    R1,R1                   CLEAR R1
         ICM   R1,3,ASIDK              GET ORDINAL IKJNAME FOR ASID
         BZ    NOASIDP                 NOT THERE. USE DEFAULTS.
         OI    STATBYTE,ASIDBIT        SET ASID-KEYWORD-FOUND BIT.
         L     R2,#ASID                GET ADDRESS OF FULLWORD
         L     R2,0(,R2)               GET FULLWORD INTEG ASID
         ST    R2,ANB                  SAVE IT
         BAL   R8,CONVASID             CONVERT 'ANB' TO 'AN'
         CLC   ANB,SAVEMAXU            IS IT HIGHER THAN MAX?
         BNH   ASIDNHI                 NO. CONTINUE ON.
         MVC   OUTAREA(ASIHMSGL),ASIHMSG  ASID TOO HIGH.
         MVC   ANB,SAVEMAXU            MAX ASCB
         BAL   R8,CONVASID             CONVERT 'ANB' TO 'AN'
         MVC   OUTAREAT(4),AN          MOVE TO MESSAGE
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     SKIPSTS2                 ... AND LEAVE.
ASIDNHI  SLL   R2,2                    MULTIPLY BY 4
         L     R1,SAVEENTY             RESTORE ASVTENTY ADDRESS
         LA    R1,0(R2,R1)             OFFSET TO SPECIFIED ASCB POINTER
         TM    0(R1),ASVTAVAI          IS IT AVAILABLE?
         BO    ASIDAV                  YES, BAD ASCB, TELL HIM
         XR    R3,R3
         ICM   R3,7,1(R1)              NOW LOAD THE POINTER
         BZ    ASIDAV                  BAD ASCB. (JUST BEING SAFE)
         ICM   R1,15,ASCBJBNI          GET JOBNAME ADDRESS
         BNZ   GOTJBN                  GOT ONE
         ICM   R1,15,ASCBJBNS          GET STC TSO NAME ADDRESS
         BNZ   GOTJBN                  GOT ONE
ASIDAV   MVC   OUTAREA(ASAVMSGL),ASAVMSG   NO JOB FOR ASID
         MVC   OUTAREAT(4),AN          JOBNAME SPECIFIED
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     SKIPSTS2                  ... AND LEAVE.
GOTJBN   MVC   JNA,0(R1)               COPY IT TO JNA
NOASIDP  ICM   R1,3,JOBNAMEK           GET ORDINAL IKJNAME FOR JOBNAME
         BZ    CKASCB                  NOT THERE. SKIP IT.
         OI    STATBYTE,JOBBIT         SET JOBNAME BIT.
         L     R2,#JOBNAME             GET ADDRESS OF JOBNAME
         CLI   0(R2),C'*'              IS IT * ?
         BE    CKASCB                  YES. LEAVE DEFAULT ALONE.
         MVC   JN,=CL8' '              CLEAR JN
         XR    R1,R1
         ICM   R1,3,#JOBNAME+4         GET LENGTH OF PARM
         BCTR  R1,0                    DECREMENT FOR MOVE
         EX    R1,EXMVC                MOVE TO JN
CKASCB   DS    0H
         TM    STATBYTE,JOBBIT+ASIDBIT DID USER SPECIFY NOTHING?
         BZ    VALASCB                 YES. USE DEFAULTS.
         TM    STATBYTE,JOBBIT+ASIDBIT DID USER SPEC BOTH JOB AND ASID?
         BNO   TESTJOB                 NO. CHECK FOR ONE OR THE OTHER
         CLC   JN,JNA                  DO JOBNAMES AGREE ?
         BE    VALASCB                 YES. ASCB VALIDATED.
         MVC   OUTAREA(MMJNMSGL),MMJNMSG MISMATCH IN JOBNAMES.
         MVC   OUTAREAT+5(4),AN        ASID REQUESTED
         MVC   OUTAREAT+13(8),JNA      JOBNAME OF ABOVE ASID
         MVC   OUTAREAT+27(8),JN       JOBNAME REQUESTED
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     SKIPSTS2                  ... AND LEAVE.
EXMVC    MVC   JN(0),0(R2)             EXECUTED MOVE
TESTJOB  DS    0H
         TM    STATBYTE,JOBBIT         DID USER SPECIFY JOBNAME ONLY?
         BO    SRCHCHN                 YES. GO FIND IT'S ASID
         MVC   JN,JNA                  NO. USE JOBNAME OF ASID SPECFIED
         B     VALASCB                 VALIDATED ASCB.
SRCHCHN  DS    0H
         L     R2,SAVEMAXU             MAX CHAIN LENGTH
         L     R5,SAVEENTY             GET TOP ASCB ADDRESS
         LA    R6,0                    SET HIT COUNTER TO 0
LOOPCHN  DS    0H
         LA    R5,4(,R5)               GET NEXT IN CHAIN
         TM    0(R5),ASVTAVAI          IS IT AVAILABLE
         BO    NEXTCHN                 NO. DO NEXT ONE
         L     R3,0(,R5)               GET ASCB
         ICM   R7,15,ASCBJBNI          ANY NAME?
         BNZ   GOJBNI2                 NOT HERE
         ICM   R7,15,ASCBJBNS          ANY NAME?
         BZ    NEXTCHN                 NO. SKIP IT.
GOJBNI2  CLC   JN,0(R7)                SAME NAME
         BNE   NEXTCHN                 NO. TRY AGAIN.
         LA    R6,1(R6)                INCREMENT HIT COUNTER
         MVC   ANB+2(2),ASCBASID       MOVE IN ASID NUMBER TO BIN FIELD
         ST    R3,SAVEASCB             SAVE THIS ASCB
NEXTCHN  DS    0H
         BCT   R2,LOOPCHN              TRY AGAIN
         C     R6,=F'1'                HOW MANY JOBS WERE THERE?
         BE    RESTASCB                   1  . GO DO IT.
         BL    JOBNOTF                    0  . TELL HIM.
         MVC   OUTAREA(MULTMSGL),MULTMSG >1 . TELL HIM.
         MVC   OUTAREAT+9(8),JN
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     SKIPSTS2                  ... AND LEAVE.
JOBNOTF  MVC   OUTAREA(NOJFMSGL),NOJFMSG NO JOBS FOUND.
         MVC   OUTAREAT(8),JN
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     SKIPSTS2                  ... AND LEAVE.
RESTASCB L     R3,SAVEASCB             RESTORE THE SAVED ASCB
VALASCB  DS    0H
*
*        GOT ASCB
*
         BAL   R8,CONVASID             CONVERT 'ANB' TO 'AN'
         L     R4,ASCBCSCB             GET CURRENT CSCB
         USING CHAIN,R4                ADDRESSABILITY
         ICM   R2,15,ASCBJBNI          ACTIVE BATCH JOB ?
         BZ    GOTCSCB                 NO. USE ASCBCSCB
         LA    R1,CHKEY-CHAIN          ASCBJBNI POINTS TO CHKEY IN CSCB
         SR    R2,R1                   WE WANT, SO GET START OF CSCB.
         CLC   =CL4'CSCB',CHRES4-CHAIN(R2)  EYECATCHER OK?
         BNE   GOTCSCB                 NO. USE ASCBCSCB
         LR    R4,R2                   YES. USE CSCB AT ASCBJBNI
GOTCSCB  DS    0H
*
*        DO STATUS DISPLAY
*
         MVC   OUTAREA(STATBL),STATB   MOVE MESSAGE TEMPLATE
         MVC   OUTAREAT(8),JN
         MVC   OUTAREAT+14(4),AN
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         BAL   R8,PUTCANM
         BAL   R8,PUTFORM
         BAL   R8,PUTTIME
         BAL   R8,PUTTIMEV             TIMEOUT VALUES
*
*        CHECK FOR CHANGE REQUEST
*
         XR    R1,R1                   CLEAR R1
         ICM   R1,3,CANCELK            GET ORDINAL IKJNAME FOR CANCEL
         BZ    SKIPCAN                 NOT THERE. SKIP IT.
         OI    EXCLBYTE,CANBIT         SET CANCEL BIT
SKIPCAN  ICM   R1,3,NCANCELK           GET ORDINAL IKJNAME FOR NOCANCEL
         BZ    SKIPNCAN                NOT THERE. SKIP IT.
         OI    EXCLBYTE,NCANBIT        SET NOCANCEL BIT
SKIPNCAN DS    0H
         ICM   R1,3,FORCEK             GET ORDINAL IKJNAME FOR FORCE
         BZ    SKIPFOR                 NOT THERE. SKIP IT.
         OI    EXCLBYTE,FORBIT         SET FORCE  BIT
SKIPFOR  ICM   R1,3,NFORCEK            GET ORDINAL IKJNAME FOR NOFORCE
         BZ    SKIPNFOR                NOT THERE. SKIP IT.
         OI    EXCLBYTE,NFORBIT        SET NOFORCE  BIT
SKIPNFOR DS    0H
         ICM   R1,3,TIMEK              GET ORDINAL IKJNAME FOR TIME
         BZ    SKIPTIM                 NOT THERE. SKIP IT.
         OI    EXCLBYTE,TIMBIT         SET TIME   BIT
SKIPTIM  ICM   R1,3,NTIMEK             GET ORDINAL IKJNAME FOR NOTIME
         BZ    SKIPNTIM                NOT THERE. SKIP IT.
         OI    EXCLBYTE,NTIMBIT        SET NOTIME   BIT
SKIPNTIM DS    0H
         ICM   R1,3,CPUK               GET ORDINAL IKJNAME FOR CPUTIME
         BZ    SKIPCPU                 NOT THERE. SKIP IT.
         OI    EXCLBYTE,CPUBIT         SET CPU BIT
         L     R1,#CMM                 GET ADDRESS OF 1ST PDE
         MVC   MMB,0(R1)               SAVE MINUTES
         CLC   MMB,=F'1439'            IS IT HIGHER THAN MAX?
         MVI   OUTAREA+CPUBMSGL-1,C'1' SET ERROR NUMBER
         BH    CPUBAD                  YES. GO DO ERROR MSG.
         L     R1,#CSS                 GET ADDRESS OF 2ND PDE
         MVC   SSB,0(R1)               SAVE SECONDS
         CLC   SSB,=F'59'              IS IT HIGHER THAN MAX?
         MVI   OUTAREA+CPUBMSGL-1,C'2' SET ERROR NUMBER
         BH    CPUBAD                  YES. GO DO ERROR MSG.
         CLC   MMB(8),=XL8'0'          IS IT 0?
         MVI   OUTAREA+CPUBMSGL-1,C'3' SET ERROR NUMBER
         BE    CPUBAD                  YES. GO DO ERROR MSG.
         LA    R1,CPUTIME              POINT TO OUTPUT WORD
         BAL   R8,CONVTUS              CONVERT MMSS TO 2**20 MICROSEC
         B     SKIPCPU                 NO. SKIP ERROR MESSAGE.
CPUBAD   MVC   OUTAREA(CPUBMSGL-1),CPUBMSG  CPU TIME INVALID
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     SKIPSTS2                 ... AND LEAVE.
SKIPCPU  DS    0H
         ICM   R1,3,WAITK              GET ORDINAL IKJNAME FOR WAITTIME
         BZ    SKIPWAIT                NOT THERE. SKIP IT.
         OI    EXCLBYTE,WAITBIT        SET WAIT BIT
         L     R1,#WMM                 GET ADDRESS OF 1ST PDE
         MVC   MMB,0(R1)               SAVE MINUTES
         CLC   MMB,=F'1439'            IS IT HIGHER THAN MAX?
         MVI   OUTAREA+WATBMSGL-1,C'1' SET ERROR NUMBER
         BH    WAITBAD                 YES. GO DO ERROR MSG.
         L     R1,#WSS                 GET ADDRESS OF 2ND PDE
         MVC   SSB,0(R1)               SAVE SECONDS
         CLC   SSB,=F'59'              IS IT HIGHER THAN MAX?
         MVI   OUTAREA+WATBMSGL-1,C'2' SET ERROR NUMBER
         BH    WAITBAD                 YES. GO DO ERROR MSG.
         CLC   MMB(8),=XL8'0'          IS IT 0?
         MVI   OUTAREA+WATBMSGL-1,C'3' SET ERROR NUMBER
         BE    WAITBAD                 YES. GO DO ERROR MSG.
         LA    R1,WAITTIME             POINT TO OUTPUT WORD
         BAL   R8,CONVTUS              CONVERT MMSS TO 2**20 MICROSEC
         B     SKIPWAIT                BYPASS ERROR MSG
WAITBAD  MVC   OUTAREA(WATBMSGL-1),WATBMSG  WAIT TIME INVALID
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     SKIPSTS2                 ... AND LEAVE.
SKIPWAIT DS    0H
         NC    AUTHBYTS,AUTHBYTS       ANY AUTH REQUESTS?
         BZ    CSCFEND                 NO. JUST STATUS REQUEST.
         BAL   R8,TESTAUTH             SEE IF USER IS ALLOWED.
         BZ    TESTNOFC                YES. GO TO IT.
         MVC   OUTAREA(AUTHMSGL),AUTHMSG  NO. ISSUE AUTH MESSAGE.
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     CSCFEND                  ... AND END NOW.
*
* TEST FOR ASSUMED NOFORCE / CANCEL
*
TESTNOFC TM    EXCLBYTE,CANBIT+NFORBIT USER ASKED CANCEL OR NOFORCE?
         BNM   ENDNOFC                 BOTH OR NEITHER. DON'T WORRY.
         TM    EXCLBYTE,CANBIT         USER ASKED CANCEL ?
         BZ    TRYFOR1                 NO. RATHER NOFORCE.
         OI    EXCLBYTE,FORBIT         ASSUME FORCEABLE TOO.
         B     ENDNOFC                 END THIS CHECK
TRYFOR1  OI    EXCLBYTE,NCANBIT        ASSUME NONCANCELABLE TOO.
ENDNOFC  DS    0H
*
* TEST FOR ASSUMED NOFORCE / TIMED
*
TESTNOFT TM    EXCLBYTE,TIMBIT+NFORBIT USER ASKED TIMED OR NOFORCE?
         BNM   ENDNOFT                 BOTH OR NEITHER. DON'T WORRY.
         TM    EXCLBYTE,TIMBIT         USER ASKED TIMED?
         BZ    TRYFOR2                 NO. RATHER NOFORCE.
         OI    EXCLBYTE,FORBIT         ASSUME FORCEABLE TOO.
         B     ENDNOFT                 END THIS CHECK
TRYFOR2  OI    EXCLBYTE,NTIMBIT        ASSUME NOT TIMED TOO.
ENDNOFT  DS    0H
*
* TEST FOR CANCEL / NOCANCEL
*
         TM    EXCLBYTE,CANBIT+NCANBIT CAN/NCAN OPTIONS SPECIFIED?
         BZ    CANSKIP                 NONE. SKIP THIS SECTION
         BO    CANNUTS                 BOTH. USER IS NUTS.
         BAL   R8,GETHOT               GET INTO SUP STATE,KEY ZERO.
         LTR   R15,R15                 ANY PROBLEMS?
         BZ    DOENQ1                  NO. DO IT.
         MVC   OUTAREA(MODECANL),MODECAN  NO. ISSUE MODECAN MESSAGE.
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     CANSKIP                  ... AND END NOW.
DOENQ1   DS    0H
         ENQ   ,MF=(E,ENQLIST)         ENQUEUE WITH SMC
         LTR   R15,R15                 HOW DID WE DO ?
         BZ    CANENQ0                 ENQ OK.
         L     R15,0(,R15)             GET 1ST RC
         LTR   R15,R15                 IS IT 0 ?
         BZ    CANENQ0                 ENQ OK.
         SRL   R15,2                   DIVIDE BY 4
         BCTR  R15,0                   DECREMENT BY 1
         SLL   R15,5                   MULTIPLY BY 32
         LA    R15,ENQMSGS(R15)        INDEX INTO STACK OF ENQ MESSAGES
         MVC   OUTAREAT(32),0(R15)     MOVE IN MESSAGE
         MVC   OUTAREAL,=H'36'         MOVE IN LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
CANNOGO  NI    EXCLBYTE,255-CANBIT-NCANBIT  CAN'T FLIP THOSE BITS
CANENQ0  DS    0H
         TM    EXCLBYTE,CANBIT         CANCEL OPTION SPECIFIED?
         BZ    CANCAN                  NO. SKIP THIS.
         OI    CHACT,CHCL              TURN  ON CANCELABLE BIT
         OI    STATBYTE,CHGBIT         TURN  ON CHANGE BIT
         B     CANDONE
CANCAN   DS    0H
         TM    EXCLBYTE,NCANBIT        NOCANCEL OPTION SPECIFIED?
         BZ    CANDONE                 NO. SKIP THIS.
         NI    CHACT,255-CHCL          TURN OFF CANCELABLE BIT
         OI    STATBYTE,CHGBIT         TURN  ON CHANGE BIT
         B     CANDONE
CANDONE  DS    0H
         DEQ   ,MF=(E,DEQLIST)
         BAL   R8,GETCOLD              COOL OFF
         B     CANSKIP
CANNUTS  DS    0H
         MVC   OUTAREA(CANMSGL),CANMSG  WRITE THE PROBLEM OUT
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     CSCFEND                   ... AND LEAVE.
CANSKIP  DS    0H
*
* TEST FOR FORCE  / NOFORCE
*
         TM    EXCLBYTE,FORBIT+NFORBIT FOR/NFOR OPTIONS SPECIFIED?
         BZ    FORSKIP                 NONE. SKIP THIS SECTION
         BO    FORNUTS                 BOTH. USER IS NUTS.
         BAL   R8,GETHOT               GET INTO SUP STATE,KEY ZERO.
         LTR   R15,R15                 ANY PROBLEMS?
         BZ    OBLOCK                  NO. DO IT.
         MVC   OUTAREA(MODEFORL),MODEFOR  NO. ISSUE MODEFOR MESSAGE.
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     FORSKIP                  ... AND END NOW.
OBLOCK   DS    0H
         SETLOCK OBTAIN,TYPE=DISP,REGS=USE,MODE=COND,                XXX
               RELATED=(CSCF(FORDONE))
         C     R15,=F'8'               DID WE GET IT ?
         BE    OBLOCK                  NO. TRY AGAIN.
         BL    GOTLOCK                 YES. GO TO IT.
         BAL   R8,GETCOLD              COOL OFF
         MVC   OUTAREA(FORMSG2L),FORMSG2  WRITE THE PROBLEM OUT
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     FORSKIP                 SKIP THE REST.
GOTLOCK  DS    0H
         INTSECT SET,TYPE=GLOBAL       SERIALIZE ASCBFLG2
         TM    EXCLBYTE,FORBIT         WANT IT FORCEABLE?
         BZ    FORFOR                  NO. TRY NEXT OPTION
         NI    ASCBFLG2,255-ASCBNOMT   MAKE IT FORCEABLE
         OI    STATBYTE,CHGBIT         TURN  ON CHANGE BIT
         B     FORDONE
FORFOR   TM    EXCLBYTE,NFORBIT        WANT IT NON-FORCEABLE?
         BZ    FORDONE                 NO. TRY NEXT OPTION
         OI    ASCBFLG2,ASCBNOMT       MAKE IT NON-FORCEABLE
         OI    STATBYTE,CHGBIT         TURN  ON CHANGE BIT
FORDONE  DS    0H
         INTSECT RESET,TYPE=GLOBAL
         SETLOCK RELEASE,TYPE=DISP,REGS=USE,                         XXX
               RELATED=(CSCF(OBLOCK))
         BAL   R8,GETCOLD              COOL OFF
         B     FORSKIP
FORNUTS  DS    0H
         MVC   OUTAREA(FORMSGL),FORMSG  WRITE THE PROBLEM OUT
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     CSCFEND
FORSKIP  DS    0H
*
* TEST FOR TIME / NOTIME
*
         TM    EXCLBYTE,TIMBIT+NTIMBIT TIM/NTIM OPTIONS SPECIFIED?
         BZ    TIMSKIP                 NONE. SKIP THIS SECTION
         BO    TIMNUTS                 BOTH. USER IS NUTS.
         BAL   R8,GETHOT               GET INTO SUP STATE,KEY ZERO.
         LTR   R15,R15                 ANY PROBLEMS?
         BZ    CKTIME                  NO. DO IT.
         MVC   OUTAREA(MODETIML),MODETIM  NO. ISSUE MODETIM MESSAGE.
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     TIMSKIP                  ... AND END NOW.
CKTIME   TM    EXCLBYTE,TIMBIT         WANT IT TIMED?
         BZ    TIMTIM                  NO. TRY NEXT OPTION
         NI    ASCBRCTF,255-ASCBTOFF   MAKE IT TIMED.
         OI    STATBYTE,CHGBIT         TURN  ON CHANGE BIT
         B     TIMDONE
TIMTIM   TM    EXCLBYTE,NTIMBIT        WANT IT NOT TIMED?
         BZ    TIMDONE                 NO. TRY NEXT OPTION
         OI    ASCBRCTF,ASCBTOFF       MAKE IT NOT TIMED.
         OI    STATBYTE,CHGBIT         TURN  ON CHANGE BIT
TIMDONE  DS    0H
         BAL   R8,GETCOLD              COOL OFF
         B     TIMSKIP
TIMNUTS  DS    0H
         MVC   OUTAREA(TIMMSGL),TIMMSG  WRITE THE PROBLEM OUT
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     CSCFEND
TIMSKIP  DS    0H
*
* TEST FOR CPUTIME
*
         TM    EXCLBYTE,CPUBIT         CPU TIME TO BE SET?
         BZ    CPUSKIP                 NONE. SKIP THIS SECTION
         BAL   R8,GETHOT               GET INTO SUP STATE,KEY ZERO.
         LTR   R15,R15                 ANY PROBLEMS?
         BZ    CKCPU                   NO. DO IT.
         MVC   OUTAREA(MODECPUL),MODECPU  NO. ISSUE MODECPU MESSAGE.
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     CPUSKIP                  ... AND END NOW.
CKCPU    DS    0H
         MVC   ASCBJSTL,CPUTIME        MOVE NEW CPU TIME IN.
         OI    STATBYTE,CHGBIT         TURN  ON CHANGE BIT
         BAL   R8,GETCOLD              COOL OFF
CPUSKIP  DS    0H
*
* TEST FOR WAITTIME
*
         TM    EXCLBYTE,WAITBIT        WAIT TIME TO BE SET?
         BZ    WATSKIP                 NONE. SKIP THIS SECTION
         BAL   R8,GETHOT               GET INTO SUP STATE,KEY ZERO.
         LTR   R15,R15                 ANY PROBLEMS?
         BZ    CKWAT                   NO. DO IT.
         MVC   OUTAREA(MODEWATL),MODEWAT  NO. ISSUE MODEWAT MESSAGE.
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     WATSKIP                  ... AND END NOW.
CKWAT    DS    0H
         MVC   ASCBSWTL,WAITTIME       MOVE NEW WAIT TIME IN.
         OI    STATBYTE,CHGBIT         TURN  ON CHANGE BIT
         BAL   R8,GETCOLD              COOL OFF
WATSKIP  DS    0H
CSCFEND  DS    0H
*
*        DO STATUS DISPLAY
*
         TM    STATBYTE,CHGBIT         DID STATUS CHANGE?
         BZ    SKIPSTS2                NO. SKIP IT.
         MVI   OUTAREAT,C' '           BLANK LINE
         MVC   OUTAREAL,=H'5'          LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         MVC   OUTAREA(STATBL),STATB   MOVE MESSAGE TEMPLATE
         MVC   OUTAREAT(8),JN
         MVC   OUTAREAT+14(4),AN
         MVC   OUTAREAT+20(6),=CL6'AFTER'
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         BAL   R8,PUTCANM
         BAL   R8,PUTFORM
         BAL   R8,PUTTIME
         BAL   R8,PUTTIMEV             TIMEOUT VALUES
SKIPSTS2 DS    0H
         TITLE 'CLEAN UP AND EXIT '
*
*        FREE STORAGE AND EXIT
*
         IKJRLSA SAVEANSR              RELEASE PARSE STORAGE
NOPARSE  L     R0,SASIZE               GET SIZE OF FREEMAIN
         L     R5,SAVERC               GET RETURN CODE FROM SAVE AREA
         LR    R1,R13                  POINT TO GETMAINED STORAGE
         L     R13,4(,R13)             RESTORE CALLERS SAVE AREA
         FREEMAIN RU,LV=(0),A=(1)      RELEASE SAVE AREA
         LR    R15,R5                  SET RETURN CODE
         RETURN (14,12),,RC=(15)
*
* END OF MAINLINE PROGRAM
*
*
         TITLE 'SUBROUTINES'
*  SUBROUTINE TO GET INTO SUPERVISOR STATE, KEY 0
*  LINKAGE : R8
*
GETHOT   DS    0H                      GET HOT
         TESTAUTH FCTN=1,RBLEVEL=1     ARE WE APF AUTHORIZED ?
         LTR   R15,R15                 CHECK RETURN CODE.
         BNZR  R8                      IF NOT, DON'T DO MODESET.
         MODESET KEY=ZERO,MODE=SUP     CHANGE STATE AND KEY.
         XR    R15,R15                 CLEAR R15. JUST IN CASE.
         BR    R8                      GO BACK TO CALLER
*
*  SUBROUTINE TO GET INTO PROBLEM STATE, KEY 8
*  LINKAGE : R8
*
GETCOLD  DS    0H                      GET COLD
         MODESET KEY=NZERO,MODE=PROB   CHANGE STATE AND KEY
         BR    R8                      GO BACK TO CALLER
*
*  SUBROUTINE TO SEE IF USER IS ALLOWED TO CHANGE THE ASCB AND CSCB.
*  SET CC 0 IF ALLOWED.
*  LINKAGE : R8
*
TESTAUTH DS    0H
         B     GOODGUY                 PERMIT EVERYBODY
         L     R6,CPPLPSCB             GET PSCB ADDRESS
         USING PSCB,R6                 ADDRESSABILITY
         TM    PSCBATR1,PSCBCTRL       IS THERE OPER AUTHORITY?
         BZ    NOTAUTH                 NO. PROHIBIT.
         CLC   =C'SY',PSCBUSER         'SY' SYSPROG?
         BE    GOODGUY                 YES. RETURN AND ALLOW.
         CLC   =C'TP',PSCBUSER         'TP' SYSPROG?
         BE    GOODGUY                 YES. RETURN AND ALLOW.
         CLC   =C'SR',PSCBUSER         'SRM' SYSPROG?
         BE    GOODGUY                 YES. RETURN AND ALLOW.
         CLC   =C'OP',PSCBUSER         OPERATOR?
         BE    NOCFT                   YES. NOT CANCEL, FORCE, OR TIME
         CLC   =C'TS',PSCBUSER         TECH SUPPORT?
         BE    NOCFT                   YES. NOT CANCEL, FORCE, OR TIME
NOTAUTH  LTR   R12,R12                 SET CC ¬0
         BR    R8                      RETURN
NOCFT    NI    EXCLBYTE,WAITBIT+CPUBIT ONLY PERMITTED AUTHORITIES.
GOODGUY  SR    R0,R0                   SET CC 0
         BR    R8                      RETURN
         DROP  R6
*
*  CONVERT ASID IN 'ANB' TO CHAR AND PUT IN 'AN'.  R0 USED.
*  LINKAGE : R8
*
CONVASID L     R0,ANB                  GET BINARY ASID
         CVD   R0,DW                   CONVERT TO NUMERIC
         MVC   DW2,=X'4020202020202120' EDIT MASK
         ED    DW2,DW+4                 EDIT
         MVC   AN,DW2+4                 MOVE TO 'AN'
         BR    R8                      RETURN
*
*  CONVERT BINARY NUMBER AT W1 TO ZONE DECIMAL AND PUT IN W2. R0 USED.
*  ONLY LAST 4 DIGITS USED.
*  LINKAGE : R7
*
CONV2ZD  L     R0,W1                   GET BINARY NUMBER
         CVD   R0,DW                   CONVERT TO NUMERIC
         MVC   DW2,=X'4020202020202120' EDIT MASK
         ED    DW2,DW+4                 EDIT
         MVC   W2,DW2+4                 MOVE TO W2
         BR    R7                      RETURN
*
*  CONVERT ZD NUMBER AT W1 TO BINARY AND PUT IN W2. R0 USED.
*  LINKAGE : R2
*
CONV2BI  PACK  DW,W1                   GET ZD NUMBER
         CVB   R0,DW                   CONVERT TO BINARY
         ST    R0,W2                    MOVE TO W2
         BR    R7                      RETURN
*
*  SUBROUTINE TO PUTLINE CSCB CHACT IF "LIST" OPTION SPECIFIED.
*  ALSO WILL PUTLINE CURRENT "CANCELABLE" OR "NON-CANCELABLE" STATUS.
*  LINKAGE : R8
*
PUTCANM  DS    0H
         TM    CHACT,CHCL              IS IT CANCELLABLE?
         BZ    CM1                     NO. GO TO NON-CAN MSG.
         MVC   OUTAREAT(10),=CL10'CANCELABLE'
         MVC   OUTAREAL,=H'14'         LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     CM11                    RETURN
CM1      DS    0H
         MVC   OUTAREAT(14),=CL14'NON-CANCELABLE'
         MVC   OUTAREAL,=H'18'         LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
CM11     DS    0H
         XR    R1,R1                   CLEAR R1
         ICM   R1,3,LISTK              WAS LIST SPECIFIED?
         BZ    SKIPLST1                NOT THERE. SKIP IT.
         STCM  R4,15,OUTAREAT+8
         STCM  R4,15,OUTAREAT+12
         TR    OUTAREAT+8(4),TABLEHI   TRANSLATE
         TR    OUTAREAT+12(4),TABLELO  TRANSLATE
         MVC   OUTAREAT+0(1),OUTAREAT+8
         MVC   OUTAREAT+1(1),OUTAREAT+12
         MVC   OUTAREAT+2(1),OUTAREAT+9
         MVC   OUTAREAT+3(1),OUTAREAT+13
         MVC   OUTAREAT+4(1),OUTAREAT+10
         MVC   OUTAREAT+5(1),OUTAREAT+14
         MVC   OUTAREAT+6(1),OUTAREAT+11
         MVC   OUTAREAT+7(1),OUTAREAT+15
         MVC   OUTAREAL,=H'12'         LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         MVC   OUTAREAT(15),=CL15'CSCB   V  CHACT'
         MVC   OUTAREAL,=H'19'         LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         MVC   OUTAREAT(184),0(R4)     MOVE TEXT IN
         MVC   OUTAREAL,=H'83'         REDUCED LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         TR    OUTAREAT(184),TABLEHI   TRANSLATE
         MVC   OUTAREAL,=H'83'         REDUCED LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         MVC   OUTAREAT(184),0(R4)     MOVE TEXT IN
         TR    OUTAREAT(184),TABLELO   TRANSLATE
         MVC   OUTAREAL,=H'83'         LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
SKIPLST1 BR    R8
*
*  SUBROUTINE TO PUTLINE ASCBFLG2 IF "LIST" OPTION SPECIFIED.
*  ALSO WILL PUTLINE CURRENT "FORCEABLE" OR "NON-FORCEABLE" STATUS.
*  LINKAGE : R8
*
PUTFORM  DS    0H
         TM    ASCBFLG2,ASCBNOMT       IS IT FORCEABLE ?
         BO    CM2                     NO. GO TO NON-FOR MSG.
         MVC   OUTAREAT(9),=CL9'FORCEABLE'
         MVC   OUTAREAL,=H'13'
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     CM22
CM2      DS    0H
         MVC   OUTAREAT(13),=CL13'NON-FORCEABLE'
         MVC   OUTAREAL,=H'17'
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
CM22     DS    0H
         XR    R1,R1                   CLEAR R1
         ICM   R1,3,LISTK              WAS LIST SPECIFIED?
         BZ    SKIPLST2                NOT THERE. SKIP IT.
         MVC   OUTAREAT(16),=CL16'ASCB ASCBFLG2  V'
         MVC   OUTAREAL,=H'20'         LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         MVC   OUTAREAT,100(R3)        MOVE TEXT IN
         MVC   OUTAREAL,=H'83'         REDUCED LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         TR    OUTAREAT,TABLEHI        TRANSLATE
         MVC   OUTAREAL,=H'83'         REDUCED LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         MVC   OUTAREAT,100(R3)        MOVE TEXT IN
         TR    OUTAREAT,TABLELO        TRANSLATE
         MVC   OUTAREAL,=H'83'         REDUCED LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
SKIPLST2 BR    R8
*
*  SUBROUTINE TO PUTLINE CURRENT ASCBJSTL (CPU TIME LIMIT FOR JOBSTEP)
*              AND ALSO CURRENT ASCBSWTL (WAIT TIME LIMIT FOR JOBSTEP)
*  LINKAGE : R8
*
PUTTIMEV DS    0H
         MVC   OUTAREA(TIMEMSGL),TIMEMSG  CPU TIME FIRST
         MVC   OUTAREAT+4(4),=C'CPU '  'CPU ' EYECATCHER
         L     R15,ASCBJSTL            POINT TO CPU TIME
         LA    R1,1                    CALC 2**20
         SLL   R1,20
         MR    R14,R1                  MULTIPLY
         D     R14,=F'100000'          DIVIDE BY A MILLION/10
         XR    R14,R14                 CLEAR R14
         LA    R15,5(,R15)             ADD 5 TO ROUND
         D     R14,=F'10'              DIVIDE BY 10 TO GET SECONDS
         XR    R14,R14                 CLEAR R14
         D     R14,=F'60'              DIVIDE BY 60
         ST    R14,SSB                 SAVE SECONDS
         ST    R15,MMB                 SAVE MINUTES
         MVC   W1,MMB                  MINUTES
         BAL   R7,CONV2ZD              CONVERT TO ZONED DECIMAL
         MVC   OUTAREAT+16(4),W2       PUT IN MESSAGE
         MVC   W1,SSB                  SECONDS
         BAL   R7,CONV2ZD              CONVERT TO ZONED DECIMAL
         MVC   OUTAREAT+30(4),W2       MOVE TO MESSAGE
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         MVC   OUTAREAT+4(4),=C'WAIT'  'WAIT' EYECATCHER
         L     R15,ASCBSWTL            POINT TO WAIT TIME
         LA    R1,1                    CALC 2**20
         SLL   R1,20
         MR    R14,R1                  MULTIPLY
         D     R14,=F'100000'          DIVIDE BY A MILLION/10
         XR    R14,R14                 CLEAR R14
         LA    R15,5(,R15)             ADD 5 TO ROUND
         D     R14,=F'10'              DIVIDE BY 10 TO GET SECONDS
         XR    R14,R14                 CLEAR R14
         D     R14,=F'60'              DIVIDE BY 60 TO GET MINUTES
         ST    R14,SSB                 SAVE SECONDS
         ST    R15,MMB                 SAVE MINUTES
         MVC   W1,MMB                  MINUTES
         BAL   R7,CONV2ZD              CONVERT TO ZONED DECIMAL
         MVC   OUTAREAT+16(4),W2       PUT IN MESSAGE
         MVC   W1,SSB                  SECONDS
         BAL   R7,CONV2ZD              CONVERT TO ZONED DECIMAL
         MVC   OUTAREAT+30(4),W2       MOVE TO MESSAGE
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         BR    R8
*
*  SUBROUTINE TO CONVERT THE MINUTES AND SECONDS IN MMB AND SSB INTO
*              TIMER UNITS AND PUT THE VALUE AT THE WORD POINTED BY R1
*  LINKAGE : R8
*
CONVTUS  DS    0H
         L     R15,MMB                 GET MINUTES
         M     R14,=F'60'              MULTIPLY TO GET SECONDS
         A     R15,SSB                 ADD SECONDS
         M     R14,=F'10'              MULTIPLY BY 10
         A     R15,=F'5'               ADD 5 TO ROUND IT
         M     R14,=F'100000'          MULTIPLY BY 100000
         LR    R0,R1                   SAVE R1
         LA    R1,1                    CALC 2**20
         SLL   R1,20
         DR    R14,R1                  DIVIDE TO GET TU
         LR    R1,R0                   RESTORE R1
         ST    R15,0(,R1)              SET ANSWER
         BR    R8                      RETURN
*
*  SUBROUTINE TO PUTLINE ASCBRCTF IF "LIST" OPTION SPECIFIED.
*  ALSO WILL PUTLINE CURRENT "TIMED" OR "NOT TIMED" STATUS.
*  LINKAGE : R8
*
PUTTIME  DS    0H
         TM    ASCBRCTF,ASCBTOFF       IS ASCB BEING TIMED?
         BO    TO2                     NO. GO TO "NOT TIMED" MSG.
         MVC   OUTAREAT(5),=CL5'TIMED'
         MVC   OUTAREAL,=H'9'
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         B     TO22
TO2      DS    0H
         MVC   OUTAREAT(26),=CL26'NOT-TIMED, BUT IF IT WERE,'
         MVC   OUTAREAL,=H'30'
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
TO22     DS    0H
         XR    R1,R1                   CLEAR R1
         ICM   R1,3,LISTK              WAS LIST SPECIFIED?
         BZ    SKIPLST3                NOT THERE. SKIP IT.
         MVC   OUTAREAT(16),=CL16'ASCB ASCBRCTF  V'
         MVC   OUTAREAL,=H'20'         LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         MVC   OUTAREAT,87(R3)         MOVE TEXT IN
         MVC   OUTAREAL,=H'83'         REDUCED LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         TR    OUTAREAT,TABLEHI        TRANSLATE
         MVC   OUTAREAL,=H'83'         REDUCED LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
         MVC   OUTAREAT,87(R3)         MOVE TEXT IN
         TR    OUTAREAT,TABLELO        TRANSLATE
         MVC   OUTAREAL,=H'83'         REDUCED LENGTH
         BAL   R14,PUTLSUB             DO THE PUTLINE ...
SKIPLST3 BR    R8
*
*  SUBROUTINE TO PUTLINE WHAT'S IN OUTAREA.
*  USES SAVEARE2 AS SAVE AREA.
*  LINKAGE : R14
*
PUTLSUB  SAVE (14,12)
         LA    R1,SAVEARE2             POINT TO NEW SAVE AREA
         ST    R1,8(,R13)              SAVE NEW SA ADDR IN PREV SA
         ST    R13,4(,R1)              SAVE PREV SA PTR IN NEW SA
         LR    R13,R1                  POINT R13 TO NEW SAVE AREA
         USING SAVEARE2,R13            ADDRESSABILITY FOR SAVEARE2
         MVC   PL1(PL1L),PL1C          MOVE PARM LIST
         L     R1,CPPLUPT              GET UPT ADDRESS
         ST    R1,IOPL+0               SAVE IT IN IOPL
         L     R1,CPPLECT              GET ECT ADDRESS
         ST    R1,IOPL+4               SAVE IT IN IOPL
         LA    R1,SAVEECB              GET ECB ADDRESS
         ST    R1,IOPL+8               SAVE IT IN IOPL
         PUTLINE PARM=PL1,                                             X
               OUTPUT=(OUTAREA,TERM,SINGLE,DATA),                      X
               MF=(E,IOPL)           IOPL+12 WILL BE FILLED IN BY MACRO
*
         L     R13,4(,R13)             POINT TO OLD SAVE AREA
         USING SAVEARE1,R13            ADDRESSABILITY FOR SAVEARE1
         RETURN (14,12),,RC=(15)
*
         TITLE 'CONSTANTS AND LITERALS '
*
* MESSAGE TEMPLATES FOR PUTLINE
*
MMJNMSG  DC    Y(MMJNMSGL,0)
         DC    C'ASID AAAA IS JJJJJJJJ, NOT JJJJJJJJ. NO ACTION TAKEN.'
MMJNMSGL EQU   *-MMJNMSG
MULTMSG  DC    Y(MULTMSGL,0)
         DC    C'MULTIPLE JJJJJJJJ JOBS FOUND. NO ACTION TAKEN. '
         DC    C'USE ASID PARAMETER.'
MULTMSGL EQU   *-MULTMSG
NOJFMSG  DC    Y(NOJFMSGL,0)
         DC    C'JJJJJJJJ JOB NOT FOUND. NO ACTION TAKEN.'
NOJFMSGL EQU   *-NOJFMSG
ASIHMSG  DC    Y(ASIHMSGL,0)
         DC    C'AAAA IS THE MAXIMUM ASID. NO ACTION TAKEN.'
ASIHMSGL EQU   *-ASIHMSG
CPUBMSG  DC    Y(CPUBMSGL,0)
       DC C'CPU TIME NOT IN RANGE (0,1) - (1439,59). NO ACTION TAKEN. '
CPUBMSGL EQU   *-CPUBMSG
TIMEMSG  DC    Y(TIMEMSGL,0)
         DC    C'MAX      TIME -      MINUTES,      SECONDS '
TIMEMSGL EQU   *-TIMEMSG
WATBMSG  DC    Y(WATBMSGL,0)
     DC  C'WAIT TIME NOT IN RANGE (0,1) - (1439,59). NO ACTION TAKEN. '
WATBMSGL EQU   *-WATBMSG
ASAVMSG  DC    Y(ASAVMSGL,0)
         DC    C'AAAA IS AN UNASSIGNED ASID. NO ACTION TAKEN.'
ASAVMSGL EQU   *-ASAVMSG
CANMSG   DC    Y(CANMSGL,0)
         DC    C'"CANCEL" AND "NOCANCEL" ARE MUTUALLY EXCLUSIVE.       X
               NO ACTION TAKEN.'
CANMSGL  EQU   *-CANMSG
FORMSG   DC    Y(FORMSGL,0)
         DC    C'"FORCE" AND "NOFORCE" ARE MUTUALLY EXCLUSIVE.         X
               NO ACTION TAKEN.'
FORMSGL  EQU   *-FORMSG
FORMSG2  DC    Y(FORMSG2L,0)
         DC    C'SETLOCK OBTAIN TYPE=DISP ENCOUNTERED A LEVEL ERROR.   X
               NO ACTION TAKEN.'
FORMSG2L EQU   *-FORMSG2
TIMMSG   DC    Y(TIMMSGL,0)
         DC    C'"TIME" AND "NOTIME" ARE MUTUALLY EXCLUSIVE.           X
               NO ACTION TAKEN.'
TIMMSGL  EQU   *-TIMMSG
AUTHMSG  DC    Y(AUTHMSGL,0)
         DC    C'YOU DO NOT HAVE ADEQUATE AUTHORITY FOR ONE OR MORE OPTX
               IONS. NO ACTION TAKEN.'
AUTHMSGL EQU   *-AUTHMSG
MODECAN  DC    Y(MODECANL,0)
         DC    C'CANCEL/NOCANCEL OPTIONS REQUIRE THAT CSCF BE AUTHORIZEX
               D. NO ACTION TAKEN.'
MODECANL EQU   *-MODECAN
MODEFOR  DC    Y(MODEFORL,0)
         DC    C'FORCE/NOFORCE OPTIONS REQUIRE THAT CSCF BE AUTHORIZED.X
                NO ACTION TAKEN.'
MODEFORL EQU   *-MODEFOR
MODETIM  DC    Y(MODETIML,0)
         DC    C'TIME/NOTIME OPTIONS REQUIRE THAT CSCF BE AUTHORIZED. NX
               O ACTION TAKEN.'
MODETIML EQU   *-MODETIM
MODECPU  DC    Y(MODECPUL,0)
         DC    C'CPUTIME OPTION REQUIRES THAT CSCF BE AUTHORIZED. NO ACX
               TION TAKEN.'
MODECPUL EQU   *-MODECPU
MODEWAT  DC    Y(MODEWATL,0)
         DC    C'WAITTIME OPTION REQUIRES THAT CSCF BE AUTHORIZED. NO AX
               CTION TAKEN.'
MODEWATL EQU   *-MODEWAT
STATB    DC    Y(STATBL,0)
         DC    C'JJJJJJJJ ASID(    ) BEFORE :  '
STATBL   EQU   *-STATB
ENQMSGS  DC    CL32'ENQ RC=4, RESOURCE IN USE'
         DC    CL32'ENQ RC=8, RESOURCE ALREADY OWNED'
         DC    CL32'ENQ RC=C, UNKNOWN RETURN CODE'
         DC    CL32'ENQ RC=10, UNKNOWN RETURN CODE'
         DC    CL32'ENQ RC=14, PRIOR REQ FAILED TOO'
         DC    CL32'ENQ RC=18, TOO MANY ENQS IN A/S'
*
         DS    0D
*
* CONSTANTS
*
TABLELO  DC    16CL16'0123456789ABCDEF'
TABLEHI  DC    16C'0',16C'1',16C'2',16C'3',16C'4',16C'5',16C'6',16C'7'
         DC    16C'8',16C'9',16C'A',16C'B',16C'C',16C'D',16C'E',16C'F'
SASIZE   DC    A(GETLEN)               SAVEAREA SIZE
QNAME    DC    CL8'SYSIEFSD'           CSCB SERIALIZATION DESCRIBED ..
RNAME    DC    C'Q10'                   ... IN DEBUG HANDBOOK
PL1C     PUTLINE MF=L
PL1L     EQU   *-PL1C
ENQLIST  ENQ   (QNAME,RNAME,E,L'RNAME,SYSTEM),SMC=STEP,MF=L
ENQLISTL EQU   *-ENQLIST
DEQLIST  DEQ   (QNAME,RNAME,L'RNAME,SYSTEM),RMC=STEP,MF=L
DEQLISTL EQU   *-DEQLIST
         TITLE 'LTORG CONSTANTS'
         LTORG
         TITLE 'PARSE MACROS'
IKJPCL   IKJPARM
CANCELK  IKJKEYWD
CANCEL   IKJNAME 'CANCEL'
NCANCELK IKJKEYWD
NCANCEL  IKJNAME 'NOCANCEL',ALIAS='NCANCEL'
FORCEK   IKJKEYWD
FORCE    IKJNAME 'FORCE'
NFORCEK  IKJKEYWD
NFORCE   IKJNAME 'NOFORCE',ALIAS='NFORCE'
TIMEK    IKJKEYWD
TIME     IKJNAME 'TIME'
NTIMEK   IKJKEYWD
NTIME    IKJNAME 'NOTIME'
LISTK    IKJKEYWD
LIST     IKJNAME 'LIST'
JOBNAMEK IKJKEYWD
JOBNAME  IKJNAME 'JOBNAME',ALIAS=('USERID'),SUBFLD=@JOBNAME
ASIDK    IKJKEYWD
ASID     IKJNAME 'ASID',SUBFLD=@ASID
CPUK     IKJKEYWD
CPU      IKJNAME 'CPUTIME',SUBFLD=@CPU
WAITK    IKJKEYWD
WAIT     IKJNAME 'WAITTIME',SUBFLD=@WAIT
@JOBNAME IKJSUBF
#JOBNAME IKJIDENT 'JOBNAME',ASTERISK,MAXLNTH=8,                        X
               FIRST=ALPHA,OTHER=ALPHANUM,                             X
               PROMPT='JOBNAME OR USERID',                             X
               HELP=('NAME OF JOB, STC OR TSO USER. "*" IS ALLOWED.')
@ASID    IKJSUBF
#ASID    IKJIDENT 'ASID',INTEG,                                        X
               PROMPT='DECIMAL OR HEX ASID',                           X
               HELP=('FORMS: DECIMAL "NNNN..."  OR HEX "X''XXXX...''"',X
               'BINARY FORM (YES!) IS ALLOWED TOO - "B''BBBB...''"')
@CPU     IKJSUBF
#CMM     IKJIDENT 'CPU MINUTES',INTEG,MAXLNTH=4,                       X
               PROMPT='NEW CPU MINUTES (1-1439)'                       X
               HELP=('CPU MINUTES TO LIMIT THE JOB TO (1-1439)')
#CSS     IKJIDENT 'CPU SECONDS',INTEG,MAXLNTH=2,DEFAULT='0',           X
               HELP=('THE NEW CPU SECONDS TO LIMIT THE JOB TO (1-59)')
@WAIT    IKJSUBF
#WMM     IKJIDENT 'WAIT MINUTES',INTEG,MAXLNTH=4,                      X
               PROMPT='NEW WAIT MINUTES (1-1439)'                      X
               HELP=('WAIT MINUTES TO LIMIT THE JOB TO (1-1439)')
#WSS     IKJIDENT 'WAIT SECONDS',INTEG,MAXLNTH=2,DEFAULT='0',          X
               HELP=('THE NEW WAIT SECONDS TO LIMIT THE JOB TO (1-59)')
         IKJENDP
IKJPCL   CSECT ,
PCLLEN   EQU   *-IKJPCL
CSCF   CSECT ,
         TITLE 'DSECTS'
         IKJCPPL
         IKJPPL
PPLLEN   EQU   *-PPL          LENGTH OF PPL
         PRINT NOGEN
         CVT   PREFIX=NO,DSECT=YES
         TITLE 'SAVE AREA AND WORK AREA DSECT'
SAVEAREA DSECT
SAVEARE1 DS    18F            MAIN RTN SAVE AREA
SAVEARE2 DS    18F            SUBROUTINE SAVE AREA
JN       DS    D              JOBNAME FROM PARSE
JNA      DS    D              JOBNAME FROM ASCB OF ASID PARSED
DW       DS    D              WORK DOUBLE WORD
DW2      DS    D              WORK DOUBLE WORD
SAVEANSR DS    F              PARSE ANSWER AREA POINTER
SAVEECB  DS    F              DUMB ECB FOR PARSE
SAVERC   DS    F              RETURN CODE
ANB      DS    F              ASID NUMBER BINARY
AN       DS    F              ASID NUMBER CHARACTER
SAVEMAXU DS    F              SAVE COPY OF ASVTMAXU
SAVEENTY DS    F              SAVE COPY OF ASVTENTY ADDRESS
SAVEASCB DS    F              SAVE COPY OF ASCB FOR JOBNAME
MMB      DS    F              ASID NUMBER CHARACTER
SSB      DS    F              ASID NUMBER CHARACTER
CPUTIME  DS    F              CPU IN TIME 2**20 MICROSECONDS
WAITTIME DS    F              WAIT TIME IN 2**20 MICROSECONDS
W1       DS    F              WORK WORD
W2       DS    F              WORK WORD
SAVEPPL  DS    CL(PPLLEN)     STORAGE COPY OF PPL
SAVEPCL  DS    CL(PCLLEN)     STORAGE COPY OF PCL
PL1      PUTLINE MF=L
IOPL     DS    4F
*
OUTAREA  DS    0F
OUTAREAL DS    H
OUTAREAF DS    H
OUTAREAT DS    CL256
         EJECT
         DS    0F
*
* START OF AUTHORIZED FUNCTION BYTES
*
AUTHBYTS DS    0CL1
EXCLBYTE DS    XL1
CANBIT   EQU   B'10000000'             CANCEL   REQUESTED
NCANBIT  EQU   B'01000000'             NOCANCEL REQUESTED
FORBIT   EQU   B'00100000'             FORCE    REQUESTED
NFORBIT  EQU   B'00010000'             NOFORCE  REQUESTED
TIMBIT   EQU   B'00001000'             TIME     REQUESTED
NTIMBIT  EQU   B'00000100'             NOTIME   REQUESTED
CPUBIT   EQU   B'00000010'             NEW CPU TIME REQUESTED
WAITBIT  EQU   B'00000001'             NEW WAIT TIME REQUESTED
*
* END OF AUTHORIZED FUNCTION BYTES
*
STATBYTE DS    XL1
CHGBIT   EQU   B'10000000'             CONTROL BLOCK WAS CHANGED
ASIDBIT  EQU   B'01000000'             ASID SPECIFIED
JOBBIT   EQU   B'00100000'             JOBNAME SPECIFIED
*
GETLEN   EQU   *-SAVEAREA
         TITLE 'DSECTS'
         PRINT NOGEN
         DSECT
         IHAASVT
         IHAASCB
         IHAPSA
         IKJPSCB
         IEECHAIN
         IHASVT ,         /* REQ'D BY INTSECT MACRO */
         END
