{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011638000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1998724, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 34, "INMDSNAM": "CBT.V500.FILE280.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1998724, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1998724, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE280.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00!\\x07'", "DS1TRBAL": "b'\\x9b\\xa8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xf0\\x00\\x03\\x01\\xf2\\x00\\x06\\x00\"'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"AD": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00'\\x00'\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 39, "newlines": 39, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE AD\n.SUBT Purpose\nThe ADJUST control word causes all output to be moved to the right of\nthe physical left print margin.\n.SUBT Format\n|\n|  .AD           <EVEN|ODD>  <0\b_|n|+n|-n>\n|\n.SUBT Usage\nThe .AD control word causes the logical left margin of the formatted\nprintout to be moved \"n\" spaces to the right of the actual left margin\nof the output device (printer or terminal).  This adjustment value\nremains in effect for all subsequent lines until altered by\nanother .AD control word.  An operand of the form \"+n\" adds\nthe value \"n\" to the current adjust value.  An operand of the form\n\"-n\" subtracts the value \"n\" from the current adjust value.  The\ncurrent adjust value may be accessed via the &SYSAD system variable\nsymbol.\n.sp\nIf \"EVEN\" is specified as an optional parameter then even numbered\npages will be adjusted by the sum of the adjust value plus the\neven adjust.\nThe \"ODD\" option works in the same way for odd numbered pages.\n.SUBT Defaults\nThis command creates a break.\nWhen the operand for a simple adjust is omitted then\nthe value of \"n\" comes from the initial value set by ADJUST or\nCENTER in the parm field, normally zero.\nThe default for an EVEN or ODD Adjust is always zero.\n.SUBT Examples\n.tr \u00ac .\n.of 4\n(1) To check if adjust value is at least five:\n.sp\n.nf\n\u00acur \u00acif &SYSAD LT 5;\u00acth \u00acad 5\nThis text is at least five spaces from left margin.\n.tr \u00ac \u00ac\n.cm End of AD\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "AP": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x93\\x00\\x93\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 147, "newlines": 147, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "APDIXCTL": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x10\\x00\\x10\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE APDIXCTL\n.cm\n.cm   Called with two positional parameters to imbed an appendix.\n.cm   The first positional parameter is the appendix letter.\n.cm   The second positional parameter is the last update date\n.cm   that applies to that source member.\n.cm\n.ur .if '&UPDATE' ne '' and '&UPDATE' gt '&2';.th .ef\n.ur .tt /SCRIPT//APPENDIX &1/\n.ur .if '&SCENTRE' = 'YES' .th .ur .et /APPENDIX &1//SCRIPT/\n.ur .sr apndix&1=%\n.sa\n.ur .im APENDIX&1\n.pa\n.re\n.cm End of APDIXCTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "APENDIXA": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\xff\\x00\\xff\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 255, "newlines": 255, "modlines": 0, "user": "CBT249"}, "text": ".cm OTHER CONTROL WORDS AND ARGUMENTS Appendix\n.li )\n)ur )bx 1 &sysll\n)sp;)ce OTHER CONTROL WORDS AND ARGUMENTS\n)sp;)bx off\n)sp\nThere exists a growing set of basic SCRIPT control words that are\nundocumented in this reference guide.  These commands are\nundocumented because they are special purpose,\nredundant or no longer useful.\nMost such control words exist in this version of SCRIPT for\ncompatibility with other versions of SCRIPT\nbut some are intended for use only by programmers debugging\na programme function.\n)sp\nThese control words have been omitted from the body of this\nReference Guide in order to make the beginner less overwhelmed\nby the quantity of material to be learned.\nThe objective is a smaller set of control words with common\narguments that are easier to remember and thus easier\nto use effectively.\n)sp\nAn example of control words is the \".PA ODD\" control word that\nejects to the top of the next odd numbered page.\nThe other two implementations \".PD\" for PAGE ODD and \".OP\"\nfor ODD PAGE are difficult to remember because of infrequent use.\n)sp\nAn example of common arguments is \".FN BEGIN\", \".CE YES\" and\n\".SU ON\".\nFor less frequently used control words it can be difficult to\nremember which pair to use -- ON/OFF, YES/NO, BEGIN/END or\nSAVE/NOSAVE.\nActually, ON, Yes, Begin and SAve are all equivalent positive\noperands and OFf, No, End, STop and QUit are all negative\noperands.\nSo if you know \".CE\" controls centering of text it doesn't matter\nif you enter \".CE YES\", \".CE ON\" or \".CE B\", the function\nwill be the same.\n)sp\nNumeric arguments are much the same.\nWhere possible, the relative argument is supported.\nFor example, \".IN +5\" can be very powerful if you don't want\nto worry about the current indent setting.\nAnd always, a numeric expression may be used in place of a single\nterm.\n\".IN 30\" may be what you code but \".IN &SYSLL/2\" is what\nyou mean;\n\".SI 201\" may be what you code but \".(100*2)+%\" is\nwhat you mean.\n)sp\nThe undocumented control words are listed here with a brief\nexplanation of their function for complete documentation\nof the current implementation.  It is suggested that the\npreferred commands should be used wherever possible.\n)sp\nA complete documentation of all control words may be formatted\nby specifying '+TYPE=ALL' in the invocation parameter list.\n)ur This manual was formatted with TYPE='&TYPE'.\n)sp\n)rm T save nosave\n)ur )if '&SYSCP' eq 'Y';)th )cp end;)sp;)cp begin\n)ur )ur )if '&&&1' = '';)se &1=%\n)in 5\n)un 5\n)rm\n)cm ------------------------------------\n)si T ab\n.AB <1\b_|n|YES|NO|TRACEON|TRACEOFF>\n)br\nThe ABEND control word is special purpose.\nIt will take effect only if DEBUG has been specified at\ninvocation time.\nA number or YES will terminate SCRIPT with the appropriate\nUser Abend.\nA NO is a no-op and TRACEON or TRACEOFF interacts with\nSUPRTRAC for debugging.\n)si T ar\n.AR <L\b_O\b_W\b_E\b_R\b_|UPPER>\n)br\nThe ARABIC control word causes page numbers to use Arabic\nnumerals.\n)br\n\".PN ARABIC <L\b_O\b_W\b_E\b_R\b_|UPPER>\" is the preferred form.\n)si T dc\n.DC\n)br\nThe DON'T COUNT control word causes all output produced directly\nby the immediately following text line to not be counted\nfor purposes of page length control.\n)br\n\".SP 0\" is the preferred form.\n)si T ds\n.DS\n)br\nThe DOUBLE SPACE control word causes a line to be skipped\nbetween lines of output except in footnotes.\n)br\n\".LS <0\b_|n|YES|NO>\" is the preferred form.\n)si T en\n.EN\n)br\nThe END DO GROUP control word terminates the range of a Do Group\nstarted with a \".DO\".\n)br\n\".DO END\" is the preferred form.\n)si T ep\n.EP\n)br\nThe EVEN PAGE control word causes output to continue on\nthe next even numbered page.\n)br\n\".PA EVEN\" is the preferred form.\n)si T fd\n.FD <1\b_|n> <S1|'S1'S2'S3'>\n)br\nThe ODD FOOTING control word specifies three items of title\ninformation to be printed at the bottom of odd numbered\npages.\n)br\n\".OB <1\b_|n> /S1/S2/S3/\" is the preferred form.\n)si T fe\n.FE <1\b_|n> <S1|'S1'S2'S3'>\n)br\nThe footing control word specifies three items of title information\nto be printed at the bottom of even and odd numbered pages.\n)br\n\".BT <1\b_|n> /S1/S2/S3/\" is the preferred form.\n)si T fi\n.FI <Y\b_E\b_S\b_|NO|LEFT|RIGHT|CENTRE|INSIDE|OUTSIDE|HALF>\n)br\nThe FORMAT control word combines the effect of CONCATENATE\nand JUSTIFY.\n)br\n\".FO\" is the preferred form.\n)si T fv\n.FV <1\b_|n> <S1|'S1'S2'S3'>\n)br\nThe EVEN FOOTING control word specifies the three items of title\ninformation to be printed at the bottom of\neven numbered pages.\n)br\n\".EB <1\b_|n> /S1/S2/S3/\" is the preferred form.\n)si T hd\n.HD <1\b_|n> <S1|'S1'S2'S3'>\n)br\nThe ODD HEADING control word is used to define three\nheadings to be printed at the top of odd numbered pages.\n)br\n\".OT <1\b_|n> /S1/S2/S3/\" is the preferred form.\n)si T he\n.HE <1\b_|n> <S1|'S1'S2'S3'\n)br\nThe HEADING control word is used to define three headings to\nbe printed at the top of both even and odd numbered pages.\n)br\n\".TT <1\b_|n> /S1/S2/S3\" is the preferred form.\n)si T hv\n.HV <1\b_|n> <S1|'S1'S2'S3'>\n)br\nThe EVEN HEADING control word is used to define three headings\nto be printed at the top of even numbered pages.\n)br\n\".ET <1\b_|n> /S1/S2/S3/\" is the preferred form.\n)si T NC\n.NC <Y\b_E\b_S\b_|NO>\n)br\nThe NO CONCATENATE control word stops words from shifting to or from\nthe next line.\n)br\n\".CO NO\" is the preferred form.\n)si T NF\n.NF <Y\b_E\b_S\b_|NO>\n)br\nThe NO FORMAT control word causes lines to be output as they\nappear in the input by negating the effect of JUSTIFY and\nCONCATENATE.\n)br\n\".FO NO\" is the preferred form.\n)si T NJ\n.NJ <Y\b_E\b_S\b_|NO>\n)br\nThe NO JUSTIFY control word stops justification of text to the\nright margin.\n)br\n\".JU NO\" is the preferred form.\n)si T oc\n.OC <char|ON|O\b_F\b_F\b_|n> <c1 ...>\n    char/<ON|OFF|n> <c1 ...>\n)br\nThe OVERLAY CHARACTER control word causes characters in input\ntext lines to be overlaid with a backspace and user defined character\nor itself.\n)br\n\".US <line>\" is the preferred form.\n)si T op\n.OP\n)br\nThe ODD PAGE EJECT control word causes output to continue on the\nnext odd numbered page.\n)br\n\".PA ODD\" is the preferred form.\n)si T pd\n.PD\n)br\nThe ODD PAGE control word causes output to continue on the next\nodd numbered page.\n)br\n\".PA ODD\" is the preferred form.\n)si T pr\n.PR information\n)br\nThe PRINT control word causes one line of information\nto be typed on the user's terminal.\n)br\n\".TY information\" is the preferred form.\n)si T pv\n.PV\n)br\nThe EVEN PAGE control word causes output to continue on the next\neven numbered page.\n)br\n\".PA EVEN\" is the preferred form.\n)si T ri\n.RI <1\b_|n|YES|NO|line>\n)br\nThe RIGHT ADJUST control word causes the next input line\nto be right adjusted in the output line.\n)br\n\".RA\" is the preferred form.\n)si T ro\n.RO <L\b_O\b_W\b_E\b_R\b_|UPPER>\n)br\nThe ROMAN control word causes page numbers to use lower-case\nRoman numerals.\n)br\n\".PN ROMAN <L\b_O\b_W\b_E\b_R\b_|UPPER>\" is the preferred form.\n)si T ss\n.SS\n)br\nThe SINGLE SPACE control word causes output to be single spaced.\n)br\n\".LS <0\b_|n|YES|NO>\" is the preferred form.\n)si T ul\n.UL <1\b_|n|ON|OFF> <line>\n)br\nThe UNDERLINE control word causes alphanumeric characters in\nsubsequent text lines to be overstruck with a BACKSPACE and an\nunderscore.\n)br\n\".US <line>\" is the preferred form.\n)in\n)cp end\n)rm T delete\n)li .\n.cm End of OTHER CONTROL WORDS AND ARGUMENTS Appendix\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "APENDIXB": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x007\\x007\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 55, "newlines": 55, "modlines": 0, "user": "CBT249"}, "text": ".cm Appendix for SAMPLE INPUT TO SCRIPT\n.ur .bx 1 &sysll\n.sp;.ce SAMPLE INPUT TO SCRIPT\n.sp;.bx off\n.sp 2\n.nf\n.li )\n.tt 'SCRIPT'APPENDIX C'Page %'\n.ur .bx 1 &sysll\n.sp;.ce SAMPLE OUTPUT FROM SCRIPT\n.sp;.bx off\n.rm 45\n.ra EXAMPLE OF REMOTE CONTROL\n.rm\n.sp 2\n\"Oh nuts!  I have to type this whole page over\".  That\ncomplaint is probably heard many times in the course of\npreparing manuscripts--reports, letters, minutes and so on.\nThen there is the problem of making duplicate\n.us original\ncopies--of a typed\nmanuscript.  When we use an ordinary typewriter,\ntext-processing, as this is called, can be a time-consuming\nand harrassing job.  The SCRIPT facility, which operates\nunder CMS(*),\n.fn begin\n(*) Conversational Monitor System for VM/370\n.fn end\nwas written to handle these procedures for you;\nyou merely type in the first version and make\nany necessary corrections later.  By\nusing the \"commands\" that you type in with your lines of\ntext, the computer prints out as many \"first\" copies as you\nwish, with margins, spacing, indentation, etc., performed\nin accordance with your commands.\n.sp 1\nOne of the most useful features of SCRIPT is right-margin\njustification, as in book and newspaper printing.  This\nmeans that your text is spaced as evenly as possible\nbetween the margins of your printed page, filling in with\nblanks where  necessary.  The printed line is\nunder control of a \"line-length\" command; any\nshort line that you type in will \"grab\" words\nfrom a longer line above or below it, and fill out the\nline with blanks where necessary to avoid splitting words\nat the margins.  This is the ordinary (or default) mode\nunder SCRIPT.  You can, however, have lines printed out\nexactly as you type them in, with no justification\nperformed by SCRIPT, by including a command that instructs\nthe computer to turn off the format mode.  This is useful\nfor typing figures and charts.  Line justification can\nlater be respecified if desired.\n.cm Last line of Input Text.\n)li .\n.cm End of Appendix for SAMPLE INPUT TO SCRIPT\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "APENDIXC": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00/\\x00/\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "CBT249"}, "text": ".cm Appendix for SAMPLE OUTPUT FROM SCRIPT\n.ur .bx 1 &sysll\n.sp;.ce SAMPLE OUTPUT FROM SCRIPT\n.sp;.bx off\n.rm 45\n.ra EXAMPLE OF REMOTE CONTROL\n.rm\n.sp 2\n.fo\n\"Oh nuts!  I have to type this whole page over\".  That\ncomplaint is probably heard many times in the course of\npreparing manuscripts--reports, letters, minutes and so on.\nThen there is the problem of making duplicate\n.us original\ncopies--of a typed\nmanuscript.  When we use an ordinary typewriter,\ntext-processing, as this is called, can be a time-consuming\nand harrassing job.  The SCRIPT facility, which operates\nunder CMS(*),\n.fn begin\n(*) Conversational Monitor System for VM/370\n.fn end\nwas written to handle these procedures for you;\nyou merely type in the first version and make\nany necessary corrections later.  By\nusing the \"commands\" that you type in with your lines of\ntext, the computer prints out as many \"first\" copies as you\nwish, with margins, spacing, indentation, etc., performed\nin accordance with your commands.\n.sp 1\nOne of the most useful features of SCRIPT is right-margin\njustification, as in book and newspaper printing.  This\nmeans that your text is spaced as evenly as possible\nbetween the margins of your printed page, filling in with\nblanks where  necessary.  The printed line is\nunder control of a \"line-length\" command; any\nshort line that you type in will \"grab\" words\nfrom a longer line above or below it, and fill out the\nline with blanks where necessary to avoid splitting words\nat the margins.  This is the ordinary (or default) mode\nunder SCRIPT.  You can, however, have lines printed out\nexactly as you type them in, with no justification\nperformed by SCRIPT, by including a command that instructs\nthe computer to turn off the format mode.  This is useful\nfor typing figures and charts.  Line justification can\nlater be respecified if desired.\n.cm End of Appendix for SAMPLE OUTPUT FROM SCRIPT\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "APENDIXD": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00=\\x00=\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 61, "newlines": 61, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE PAGE SETUP appendix\n.ur .bx 1 &sysll\n.sp;.ce PAGE  SETUP\n.sp;.bx off\n.sp\n.lb SCRIPTCD\nThe outer rectangle of\n*'s in the diagram below indicate the physical dimensions of a sheet\nof paper.  The inner rectangle of *'s represents the \"text area\"\n(that part of the physical page into which\nSCRIPT formats the input text).\n.nf\n.sp\n.ce on\n************************************************************\n*--.AD--->|------------------.LL------------------>        *\n*    |    |                                                *\n*    |    |---------------------------------------+        *\n*    |    |     |                                 |        *\n*    |    |    .HS    (for Top Titles, if any)    |        *\n*    |   .TM    |                                 |        *\n*    |    |---------------------------------------+        *\n*    |    |     |                                          *\n*    |    |    .HM                                         *\n*    |    |     |                                          *\n*    |    *****************************************        *\n*    |    *                                       *        *\n*    |    *                                       *        *\n*    |    *            The Text Area              *        *\n*    |    *                                       *        *\n*    |    *                                       *        *\n*   .PL   *--.IN--->                              *        *\n*    |    *         --.OF-->                      *        *\n*    |    *                                       *        *\n*    |    *                                       *        *\n*    |    *                                       *        *\n*    |    *                                       *        *\n*    |    *****************************************        *\n*    |    |     |                                          *\n*    |    |    .FM                                         *\n*    |    |     |                                          *\n*    |    |---------------------------------------+        *\n*    |   .BM    |                                 |        *\n*    |    |    .FS (for Bottom Titles, if any)    |        *\n*    |    |     |                                 |        *\n*    |    |---------------------------------------+        *\n*    |    |                                                *\n************************************************************\n.ce off\n.fo\n.sp\nThe default values for the control words shown above are as\nfollows:\n.sp\n     .AD 0  (Adjust)           .IN 0   (Indent)\n     .BM 6  (Bottom Margin)    .LL 60  (Line Length)\n     .FM 1  (Footing Margin)   .OF 0   (Offset)\n     .FS 1  (Footing Space)    .PL 66  (Page Length)\n     .HM 1  (Heading Margin)   .TM 6   (Top Margin)\n     .HS 1  (Heading Space)\n.cm End of PAGE SETUP appendix\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "APENDIXE": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\\\\\x00\\\\\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 92, "newlines": 92, "modlines": 0, "user": "CBT249"}, "text": ".cm OFFLINE CONTROL STATEMENTS Appendix\n.ur .bx 1 &sysll\n.sp;.ce OFFLINE CONTROL STATEMENTS\n.sp;.bx off\n.sp\n.in\n.nf\n.tb 12 16\n//jobname  JOB  ...  Accounting Information\n//stepnam1\tEXEC PGM=SCRIPT,REGION=128K,PARM='options'\n//SYSPRINT\tDD\tSYSOUT=A\n//SYSTERM\tDD\tSYSOUT=A\n//SYSIN\tDD\tDSNAME=input.file,DISP=SHR\n//SYSCONS\tDD\tDSNAME=console.file,DISP=SHR\n//SYSLIB\tDD\tDSNAME=library.file,DISP=SHR\n/*\n.sp 2\n.us Where:\n.sp 1\n.fo\n.in 5\n.of 9\noptions  The PARM parameter on the EXEC statement contains the\n\"options\" which are as specified and used as described on\n.ur page &options..\n.sp 2\n.of 9\nDDNAMES  required by SCRIPT and their functions are listed below:\n.sp\n.of 9\nSYSIN    is for the primary input dataset.  The\ndataset name\nreferenced should be equivalent to the Online Command Format's\n\"filename\" parameter being\nthe dataset qualification level preceeding SCRIPT.\n.sp 1\n.of 9\nSYSTERM  is for output of messages such as those from \".pr\"\nor \".ty\" and those\ninitiated by errors and \".er\".  It also is used when output is\nonline for the message \"Load paper; hit return:\".\n.sp 1\n.of 9\nSYSCONS  is used for input and responses to messages\nprinted in SYSTERM.\nThe SCRIPT control words \".rd\", \".rv\" and \".te\" use this\nDDNAME to receive input lines.\nIf these control words are not used and OFFLINE is specified\nthis DD Statement can be omitted.\n.sp 1\n.of 9\nSYSPRINT is for the formatted and edited output from SCRIPT.\n.sp 1\n.of 9\nSYSLIB   is a partitioned dataset for .AP and .IM by member name only.\n.sp 2\n.in\n.cp 10\n.us Notes:\n.sp 1\n.in 5\n.of 4\n(1) Output datasets used by SCRIPT must have variable\nlength records with ASA carriage control.  Any BLKSIZE\nthat does not span tracks can be used for the input datasets.\nThe record length of output datasets may range up to 244\nwith 137 as the default.\n.sp 1\n.of 4\n(2) Besides the required DD Statements mentioned above\neach IMBED or APPEND Control word whose Filename has not been used in\nany previous\ntext files must have an additional DD Statement included in the job\nsetup with the Filename used as the DDNAME.\n.sp 1\n.of 4\n(3) A catalogued procedure exists to invoke SCRIPT and supply\noutput DD statements.\nThe following is a possibility for such a procedure:\n.sp\n.of\n.nf\n//SCRIPT   PROC PROG=SCRIPT,SCRIPT=,SIZE=128K\n//SCRIPT   EXEC PGM=&PROG,PARM='&SCRIPT',REGION=&SIZE\n//*\n//*      S C R I P T\n//*\n//SYSHYPH   DD  DSN=SCRIPT.SYSHYPH,DISP=SHR\n//SYSPRINT  DD  SYSOUT=A\n//SYSTERM   DD  SYSOUT=A\n.fo\n.in\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "APENDIXF": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x84\\x00\\x84\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 132, "newlines": 132, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "APENDIXG": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x01&\\x01&\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 294, "newlines": 294, "modlines": 0, "user": "CBT249"}, "text": ".cm SYSTEM REFERENCE SYMBOLS AND REMOTES Appendix\n.sr refcard = N\n.go NOTCARD\n.lb SCRIPTCD\n.sr refcard = Y\n.lb NOTCARD\n.ur .if &refcard eq N;.th .do;.cp begin\n.ur .bx 1 &sysll\n.sp;.ce SYSTEM REFERENCE SYMBOLS AND REMOTES\n.sp;.bx off\n.sp\nThere are System Reference Variables that are initialized to values\ndescribing the SCRIPT environment and information about the date\nand time.  The following first table shows the variables, and they\nall must be in uppercase if the NOUPPER option was specified,\nand describes their initial values.  These values may be altered\nwith SET REFERENCE control words as regular reference variables,\nbut this is not recommended.\n.cp end;.do end\nAll System Reference Variables begin with 'SYS'\nor '$', so that\n\"SYSDATE\" and \"$DATE\" return the same value.\n.su on;.in 11\n.sp;.un 11;.uc Date and Time\n.if &refcard eq N;.do\n.sp;.cp 4;.un 11\nSYSYEAR    The value of the current year.  In this year 19&SYSYEAR.,\nSYSYEAR has the value '&SYSYEAR'.\n.sp;.cp 4;.un 11\nSYSPYEAR   The value of the current year, including the century.\nso the current SYSPYEAR would be '&SYSPYEAR'.\n.sp;.cp 4;.un 11\n.se nn=&SYSDAYOFM\nSYSMONTH   The two-digit number of the current month of the year\nwith high order zeros.  For today, &SYSPMONTH &nn., SYSMONTH has\nthe value '&SYSMONTH'.\n.sp;.cp 4;.un 11\nSYSPMONTH  The alphabetic name of the current month, with only\nthe first character in uppercase.  This month SYSPMONTH has the\nvalue '&SYSPMONTH'.\n.sp;.cp 4;.un 11\nSYSDAYOFY  The three-digit Julian day number in the current year,\nwith high order zeros.  SYSDAYOFY now has the value '&SYSDAYOFY'.\n.sp;.cp 4;.un 11\nSYSDAYOFM  The two-digit day number in the current month with high\norder zeros.  For today, &SYSPMONTH &nn., SYSDAYOFM has the value\n'&SYSDAYOFM'.\n.sp;.cp 4;.un 11\nSYSDAYOFW  Today &SYSPDAYOFW., &SYSPMONTH &nn., SYSDAYOFW has the\nvalue '&SYSDAYOFW'.  Sunday is considered as the first day of the week.\n.sp;.cp 4;.un 11\nSYSPDAYOFW The alphabetic name of today, with only the first character\nin uppercase.  Today SYSPDAYOFW contains '&SYSPDAYOFW'.\n.do end\n.sp;.cp 4;.un 11\nSYSDATE    The current month, day, and year.\nSYSDATE now has the value '&SYSDATE'.\n.se nn=&SYSHOUR\n.se ampm='A.M.'\n.if &nn ge 12\n.se ampm='P.M.'\n.if &refcard eq N;.do\n.sp;.cp 4;.un 11\nSYSHOUR    The two-digit hour of the day on the twenty-four hour\nclock, with leading zeros.  It is now &nn.:&SYSMINUTE and\nSYSHOUR has the value '&SYSHOUR'.\n.sp;.cp 4;.un 11\nSYSMINUTE  The two-digit minute of the hour with leading zeros.\nIt is now &nn.:&SYSMInUTE and SYSMINUTE has the value '&SYSMINUTE'.\n.sp;.cp 4;.un 11\nSYSSECOND  The two-digit seconds of the minute with leading zeros.\nIt is now &nn.:&SYSMINUTE.:&SYSSECOND and SYSSECOND has the value\n'&SYSSECOND'.\n.do end\n.sp;.cp 4;.un 11\nSYSTIME    The current time, in hours, minutes, and seconds.\nSYSTIME now has the value '&SYSTIME'.\n.if &refcard eq N;.do\n.sp;.cp 6;.un 11;.uc Current Version of SCRIPT\n.sp;.cp 4;.un 11\nSYSVERSION A character string describing the SCRIPT program\ncurrently being used.\nSYSVERSION now has the value '&SYSVERSION'.\n.do end\n.if &refcard eq N;.do\n.sp;.in;.cp 10\nCertain SCRIPT system reference variables exist\nto provide \"programming language\" capabilities.\nThese variable\nnames may not be used as the target of a Set Reference operation.\n.in 11\n.do end\n.if &refcard eq N;.do\n.sp;.un 11;.uc Input\n.sp;.cp 4;.un 11\nSYSFILE    The current input DDNAME or FILENAME.  SYSFILE now\nhas the value '&SYSFILE'.\n.sp;.cp 4;.un 11\nSYSFLNEST  The current file nesting level of input files as\na result of IMBEDs and SIGNALs.\nThe current value of SYSFLNEST is &SYSFLNEST..\n.sp;.cp 4;.un 11\nSYSMEMBER  The current input member within SYSFILE.  This will be\nnull if there is no member.  SYSMEMBER now has the value\n'&SYSMEMBER'.\n.sp;.cp 4;.un 11\nSYSRECNO   The current record number within the current file or\nfile member.  SYSRECNO now has the value &SYSRECNO..\n.sp;.cp 5;.un 11\nSYSRMNEST  The current file nesting level of Remotes as\na result of automatic and signalled remotes.\nThe current value of SYSRMNEST is &SYSRMNEST..\n.sp;.cp 4;.un 11\nSYSSEQNO   The eight-digit sequence number, actual or generated, on\nthe current input record.  SYSSEQNO now has the value '&SYSSEQNO'.\n.do end\n.sp;.cp 6;.un 11;.uc Output\n.if &refcard eq N;.do\n.sp;.cp 4;.un 11\nSYSDPAGE   The current decimal portion for the page number of the\npage now being formatted.\nThis value may be null if the page numbers are all integer.\nThe current value of SYSDPAGE is '&SYSDPAGE'.\n.do end\n.sp;.cp 4;.un 11\nSYSLINE    The current output line number on the page now being\nformatted.  SYSLINE now has the value &SYSLINE..\n.sp;.cp 4;.un 11\nSYSPAGE    The current integer page number of the page\nnow being formatted.\nThis could be used instead of the Page Number Escape symbol in SET\nREFERENCE control statements.  The current value of SYSPAGE is\n&SYSPAGE..\n.sp;.cp 4;.un 11\nSYSPPAGE   The current page number as it appears in a Title line.\nThis might be in Roman, Arabic or Arabic with a Decimal portion\nformat.\nThe current value of SYSPPAGE is &SYSPPAGE..\n.if &refcard eq N;.do\n.sp;.cp 4;.un 11\nSYSRETCODE The current return code for SCRIPT set by errors in\nprocessing or by the user with the \".ER\" control word.\n.do end\n.if &refcard eq N;.do\n.sp;.cp 4;.un 11\nSYSRET     The return code from the last SYSTEM (.SY) control word.\nSYSRET now has the value '&SYSRET'.\n.do end\n.sp;.in;.cp begin\n.la yes\n.uc Current Value of Control Words\n.sp\nSYSAD      Current Adjust Value.               SYSAD=&SYSAD\nSYSADEVEN  Current Even Page Adjust Value.     SYSADEVEN=&SYSADEVEN\nSYSADODD   Current Odd Page Adjust Value.      SYSADODD=&SYSADODD\nSYSBC      Balance Column Switch.              SYSBC=&SYSBC\nSYSBM      Current Bottom Margin.              SYSBM=&SYSBM\nSYSBS      Current User Backspace Character    SYSBS=&SYSBS\nSYSBX      Box in progress Switch.             SYSBX=&SYSBX\n.cp end\nSYSCC      Conditional Column Switch.          SYSCC=&SYSCC\nSYSCCC     Buffered Conditional Column Lines.  SYSCCC=&SYSCCC\nSYSCD      Current Column Definition Count.    SYSCD=&SYSCD\nSYSCL      Current Column Length.              SYSCL=&SYSCL\nSYSCP      Conditional Keep Switch.            SYSCP=&SYSCP\nSYSCPC     Buffered Conditional Page Lines.    SYSCPC=&SYSCPC\nSYSDA      Current Dark Output Value.          SYSDA=&SYSDA\nSYSDHSET   Current Table of Contents number    SYSDHSET=&SYSDHSET\nSYSFB      Floating Block Switch.              SYSFB=&SYSFB\nSYSFBC     Total Floating Block Lines.         SYSFBC=&SYSFBC\nSYSFBF     First Floating Block Lines.         SYSFBF=&SYSFBF\nSYSFK      Floating Keep Switch.               SYSFK=&SYSFK\nSYSFKC     Buffered Floating Keep Lines.       SYSFKC=&SYSFKC\nSYSFM      Current Footing Margin.             SYSFM=&SYSFM\nSYSFN      Current Footnote Switch.            SYSFN=&SYSFN\nSYSFNC     Current Buffered Footnote Lines.    SYSFNC=&SYSFNC\nSYSFNCOUNT Count of Footnotes.                 SYSFNCOUNT=&SYSFNCOUNT\nSYSFS      Current Footing Space.              SYSFS=&SYSFS\nSYSHI      Current Hanging Indent Value.       SYSHI=&SYSHI\nSYSHM      Current Heading Margin.             SYSHM=&SYSHM\nSYSHN      Current Headnote Switch.            SYSHN=&SYSHN\nSYSHNC     Buffered Headnote Lines.            SYSHNC=&SYSHNC\nSYSHS      Current Heading Space.              SYSHS=&SYSHS\nSYSHY      Current Hyphenation Mode.           SYSHY=&SYSHY\nSYSHYC     Exception Dictionary word count.    SYSHYC=&SYSHYC\nSYSIN      Current Indent Value.               SYSIN=&SYSIN\nSYSINR     Current Right Indent Value.         SYSINR=&SYSINR\nSYSLL      Current Line Length.                SYSLL=&SYSLL\nSYSLS      Current Line Spacing.               SYSLS=&SYSLS\nSYSMC      Multiple Column Mode Switch.        SYSMC=&SYSMC\n.cp begin\nSYSPI      Current Paragraph Indent Value.     SYSPI=&SYSPI\nSYSPL      Current Page Length.                SYSPL=&SYSPL\nSYSSC      Single Column Switch.               SYSSC=&SYSSC\nSYSTM      Current Top Margin.                 SYSTM=&SYSTM\nSYSWD      Current Widow Switch.               SYSWD=&SYSWD\n.cp end;.la no\n.in 11\n.sp;.un 11;.cp 6;.uc Options\n.if &refcard eq N;.do\n.sp;.cp 3;.un 11\nSYSCONT    The error CONTINUE count.  SYSCONT now has the value\n&SYSCONT..\n.do end\n.if &refcard eq N;.do\n.sp;.cp 3;.un 11\nSYSCPI     The value of the Characters Per Inch (CPINCH=) parameter.\nSYSCPI now has the value &SYSCPI..\n.do end\n.if &refcard eq N;.do\n.sp;.cp 3;.un 11\nSYSPARM    The list of options passed to SCRIPT when\nit was invoked.  SYSPARM now has the value '&SYSPARM'.\n.do end\n.sp;.cp 3;.un 11\nSYSPASSNO  The current pass number on the input.  The current\nvalue of SYSPASSNO is &SYSPASSNO..\n.sp;.cp 5;.un 11\nSYSPASSOF  The total number of passes to be made on the input\nfiles to produce one output file.  This value is set by\nPASSES= at invocation.  The\ncurrent value of SYSPASSOF is &SYSPASSOF..\n.sp;.cp 4;.un 11\nSYSOUT     Returns 'TERM' if output is online and 'PRINT' if output\nis offline.\nThe current value of SYSOUT is '&SYSOUT'.\n.if &refcard eq N;.do\n.sp;.cc 3;.un 11\nSYSONLINE  Returns 'Y' if output is online and 'N' if not.\nThe current value of SYSONLINE is '&SYSONLINE'.\n.do end\n.if &refcard eq N;.do\n.sp;.cc 3;.un 11\nSYSOFFLINE Returns 'Y' if output is offline and 'N' if not.\nThe current value of SYSOFFLINE is '&SYSOFFLINE'.\n.do end\n.su no\n.in;.sp\n.cp 7\n.uc Special REMOTEs\n.ur .if &refcard eq N;.do\n.sp\nIf the user chooses to define a named remote with a\nname that is in the following list, then SCRIPT will automatically\nsignal the remote whenever the appropriate circumstance occurs.\n.do end\n.in 9\n.sp;.un 9\nSYSBLANK is signalled with\nno operands if a blank input line is encountered.\nIf this REMOTE does not exist, then a \".SK\" is substituted.\n.ur .if &refcard eq N;.do\nThe following is a useful possibility for such a remote:\n.sp\n.cp begin\n     .rm SYSBLANK save nosave\n     .sp;.cp 2\n     .rm\n.cp end\n.do end\n.sp;.cp 4;.un 9\nSYSIX0   is signalled during\nthe printing of an Index\nwhenever the first letter of the first-level\nindex entry changes, with that first letter as the value of\nreference variable \"1\".\n.sp;.cp 2;.un 9\nSYSIX1   is signalled before each first-level\nindex entry is printed.\n.sp;.cp 2;.un 9\nSYSIX2   is signalled before each second-level\nindex entry is printed.\n.sp;.cp 2;.un 9\nSYSIX3   is signalled before each third-level\nindex entry is printed.\n.ur .if &refcard eq N;.do\n.sp;.in\nThe following named remotes are automatically signalled when\na circumstance occurs.\nThey may manipulate reference variables or titles.\nThey should not generate text or do spacing as SCRIPT will continue\nprocessing the current page with the event that caused the signal.\n.do end\n.in 9\n.sp;.un 9\nSYSBM    is signalled before printing the Bottom Margin area.\n.sp;.un 9\nSYSBOT   is signalled after printing the Bottom Margin area.\n.sp;.un 9\nSYSTM    is signalled after printing the Top Margin area.\n.sp;.un 9\nSYSTOP   is signalled before printing the Top Margin area.\n.in\n.cm End of SYSTEM REFERENCE SYMBOLS AND REMOTES Appendix\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "APENDIXH": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00:\\x00:\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "APENDIXI": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x03>\\x03>\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 830, "newlines": 830, "modlines": 0, "user": "CBT249"}, "text": ".li );)su on\n)sr hrglass=5;)cm explanations in this much from left and right\n)sr brkind='* ';)cm break control word indicator\n)tb ./&SYSLL.RIGHT\n)ur )bx 1 &sysll\n)sp;)ce CONTROL  WORD  SUMMARY\n)sp;)bx off\n)sp\n)ra Break Control Words indicated by \"*\"\n)lb SCRIPTCD\n)in;)sp;)cp begin\n.   <line> \t&nl\n)in +&hrglass -&hrglass\nThe line operand of the NULL control word will be treated\nas input, either text or control word.\n)cp end;)in;)sp;)cp begin\n... <ident|n> <line> \t&lb\n)in +&hrglass -&hrglass\nAn alternate form of the LABEL control word specifies an\nidentifier that is to be associated with the current input record.\n)cp end;)in;)sp;)cp begin\n.AD <EVEN|ODD> <0\b_|n|+n|-n> \t&brkind&ad\n)in +&hrglass -&hrglass\nThe ADJUST control word causes all output to be moved\nto the right of the physical left print margin.\n)cp end;)in;)sp;)cp begin\n.AP Filename <args> \t&ap\n)in +&hrglass -&hrglass\nThe APPEND control word allows an additional file to be\nappended to the file just printed.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.AR <L\b_O\b_W\b_E\b_R\b_|UPPER> \t&ar\n)in +&hrglass -&hrglass\nThe ARABIC control word causes page numbers to use Arabic numerals.\n)cp end;)in;)do end\n)sp;)cp begin\n.BC <O\b_N\b_|OFF> \t&bc\n)in +&hrglass -&hrglass\nThe BALANCE COLUMNS control word enables or disables column\nbalancing for multiple column output.\n)cp end;)in;)sp;)cp begin\n.BM <6\b_|n|+n|-n> \t&brkind&bm\n)in +&hrglass -&hrglass\nThe BOTTOM MARGIN control word specifies\nthe number of lines which are to appear between the bottom\nof the output page and the last line of ordinary\nor footnote text.\n)cp end;)in;)sp;)cp begin\n.BR <line> \t&brkind&br\n)in +&hrglass -&hrglass\nBREAK causes the immediately previous line to be output\nwithout filling in with words from the next line.\n)cp end;)in;)sp;)cp begin\n.BS <char> <H\b_J\b_O\b_I\b_N\b_|NOHJOIN> \t&bs\n)in +&hrglass -&hrglass\nThe BACKSPACE control word specifies the input character to\nbe treated as a logical backspace and a hex join character.\n)cp end;)in;)sp;)cp begin\n.BT <1\b_|n> </S1/S2/S3/> \t&bt\n)in +&hrglass -&hrglass\nThe BOTTOM TITLE control word is used to define three items of\ntitle information to be printed at the bottom of even and\nodd numbered pages.\n)cp end;)in;)sp;)cp begin\n.BX <<v1 <v2 ...>>|OFF|DELETE> \t&brkind&bx\n)in +&hrglass -&hrglass\nThe BOX control word creates the horizontal lines and initiates\nthe vertical rules that will surround user text.\n)cp end;)in;)sp;)cp begin\n.CB      \t&brkind&cb\n)in +&hrglass -&hrglass\nThe COLUMN BEGIN control word causes subsequent text to begin\nat the top of a new column.\n)cp end;)in;)sp;)cp begin\n.CC <0\b_|n|BEGIN|END <0\b_|m>> \t&cc\n)in +&hrglass -&hrglass\nThe CONDITIONAL COLUMN control word causes a column begin to\noccur if insufficient lines remain in the current column for text.\n)cp end;)in;)sp;)cp begin\n.CD <n <d1 <d2 ... d9>>> \t&brkind&cd\n)in +&hrglass -&hrglass\nThe COLUMN DEFINITION control word defines how many columns\nof output are to be formatted on each page and where each column\nis to start.\n)cp end;)in;)sp;)cp begin\n.CE <1\b_|n|YES|NO|line> \t&brkind&ce\n)in +&hrglass -&hrglass\nThe line(s) following the CENTER control word will be centered\nbetween the margins.\n)cp end;)in;)sp;)cp begin\n.CL <0\b_|n|+n|-n> \t&brkind&cl\n)in +&hrglass -&hrglass\nThe COLUMN LENGTH control word defines the width in characters\nof each column in multiple column mode.\n)cp end;)in;)sp;)cp begin\n.CM <anything> \t&cm\n)in +&hrglass -&hrglass\nThe COMMENT control word is ignored and may be used to enter\ncomments into a script file.\n)cp end;)in;)sp;)cp begin\n.CO <Y\b_E\b_S\b_|NO> \t&brkind&co\n)in +&hrglass -&hrglass\nCONCATENATE cancels a previous NO CONCATENATE control\nword and causes the output lines to be formed by\nconcatenating input lines and truncating at the nearest\nword boundary to fit within the specified line length.\n)cp end;)in;)sp;)cp begin\n.CP <0\b_|n|BEGIN|END <0\b_|m>> \t&cp\n)in +&hrglass -&hrglass\nThe CONDITIONAL PAGE control word causes a page eject\nto occur if insufficient lines remain on the current page\nfor text.\n)cp end;)in;)sp;)cp begin\n.CR <oo <ww>> \t&cr\n)in +&hrglass -&hrglass\nThe CONTROL WORD REPLACEMENT word is used to change the control word\nthat identifies a SCRIPT function, to delete a SCRIPT function\nor to reset the set of SCRIPT control words.\n)cp end;)in;)sp;)cp begin\n.CS <n> <<ON|OFF>|<INCLUDE|IGNORE>> \t&cs\n)in +&hrglass -&hrglass\nThe CONDITIONAL SECTION control word causes only selected\nportions of the total document to be printed by associating\na conditional section code with selected portions of the\ndocument.\n)cp end;)in;)sp;)cp begin\n.CW <;|character> \t&cw\n)in +&hrglass -&hrglass\nThe CONTROL WORD SEPARATOR control word defines the delimiter\nbetween control commands so that multiple controls and text\nmay be entered on one line.\n)cp end;)in;)sp;)cp begin\n.DA <1\b_|n|+n|-n|YES|NO> \t&da\n)in +&hrglass -&hrglass\nThe DARK OUTPUT control word specifies the number of times\nthat Offline Output is to be overstruck.\n)cp end;)in;)sp;)cp begin\n.DC \t&brkind&dc\n)in +&hrglass -&hrglass\nThe DON'T COUNT control word causes all output produced\ndirectly by the immediately following text line to not\nbe counted for purposes of page length control.\n)cp end;)in;)sp;)cp begin\n.DH <SET m> n <<SKBF n> <SPAF n> <TCOF n> <TCIN n>\n               <BR|NBR> <OJ|NOJ> <PA|NPA> <TC|NTC>\n               <TO|NTO> <TS|NTS> <UP|NUP> <US|NUS>> \t&dh\n)in +&hrglass -&hrglass\nThe DEFINE HEADING control word defines the formatting conditions\nfor the various heading levels in the Tables of Contents.\n)cp end;)in;)sp;)cp begin\n.DM name /line1/.../linen</> \t&dm\n    name <BEGIN|END>\n    name DELETE\n)in +&hrglass -&hrglass\nThe DEFINE MACRO control word defines a sequence of input lines to\nbe invoked by \"name\" as a user-defined control word or as\na .SI operand.\n)cp end;)in;)sp;)cp begin\n.DO <B\b_E\b_G\b_I\b_N\b_|END> \t&do\n)in +&hrglass -&hrglass\nThe DO control word may be used following a THEN or ELSE control\nword to allow multiple input lines to be conditionally included.\n)cp end;)in;)sp;)cp begin\n.DS \t&brkind&ds\n)in +&hrglass -&hrglass\nThe DOUBLE SPACE control word causes a line to be skipped\nbetween lines of output except in footnotes.\n)cp end;)in;)sp;)cp begin\n.EB <1\b_|n> </S1/S2/S3/> \t&eb\n)in +&hrglass -&hrglass\nThe EVEN BOTTOM control word is used to define three items of title\ninformation to be printed at the bottom of even-numbered pages.\n)cp end;)in;)sp;)cp begin\n.EF <Y\b_E\b_S\b_|NO> \t&ef\n)in +&hrglass -&hrglass\nThe END OF FILE control word causes immediate termination\nof the current input file and resumption of the next\nhigher level file if any, or termination of processing if none.\n)cp end;)in;)sp;)cp begin\n.EL line \t&el\n)in +&hrglass -&hrglass\nThe ELSE control word causes an input line to be conditionally\nincluded depending on the truth value of a previous IF control word.\n)cp end;)in;)sp;)cp begin\n.EM <Y\b_E\b_S\b_|NO|OFFNO> \t&em\n)in +&hrglass -&hrglass\nThe EMPTY PAGE control word is used to control suppression\nof empty (except for headings and footings) pages.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.EN \t&en\n)in +&hrglass -&hrglass\nThe END DO GROUP control word is used to terminate the range of\na preceding DO control word.\n)cp end;)in;)do end\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.EP \t&brkind&ep\n)in +&hrglass -&hrglass\nThe EVEN PAGE EJECT control word causes output to continue on\nan even numbered page.\n)cp end;)in;)do end\n)sp;)cp begin\n.ER <n|*> <line> \t&er\n)in +&hrglass -&hrglass\nThe ERROR control word sets a program return code and/or\ndisplays an error message on the Error file.\n)cp end;)in;)sp;)cp begin\n.ET <1\b_|n> </S1/S2/S3/> \t&et\n)in +&hrglass -&hrglass\nThe EVEN TITLE control word is used to define three headings\nto be printed at the top of even numbered\npages.\n)cp end;)in;)sp;)cp begin\n.EZ <ON <lastDewey>> \t&ez\n    <OFF           >\n    <tagval line   >\n)in +&hrglass -&hrglass\nThe EasySCRIPT control word is used to initiate and provide\ninput to the EasySCRIPT macro processor\n)cp end;)in;)sp;)cp begin\n.FB <BEGIN|END <0\b_|m>> \t&fb\n    <DUMP <n>>\n)in +&hrglass -&hrglass\nThe FLOATING BLOCK control word allows the user to enter a block\nof text that will print later in the document.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.FD <1\b_|n> <S1|'S1'S2'S3'> \t&fd\n)in +&hrglass -&hrglass\nThe ODD FOOTING control word specifies three items of title\ninformation to be printed at the bottom of odd numbered\npages.\n)cp end;)in;)do end\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.FE <1\b_|n> <S1|'S1'S2'S3'> \t&fe\n)in +&hrglass -&hrglass\nThe FOOTING control word specifies three items of title\ninformation to be printed at the bottom of even and odd numbered\npages.\n)cp end;)in;)do end\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.FI <Y\b_E\b_S\b_|NO|LEFT|RIGHT|CENTRE|INSIDE|OUTSIDE|HALF> \t&brkind&fi\n)in +&hrglass -&hrglass\nAlternate form of FORMAT.  See the .FO control word.\n)cp end;)in;)do end\n)sp;)cp begin\n.FK <BEGIN|END <0\b_|m>> \t&fk\n    <DUMP <n>>\n)in +&hrglass -&hrglass\nThe FLOATING KEEP control word enables the user to enter a\nblock of text that will print together immediately or at the\ntop of the next page.\n)cp end;)in;)sp;)cp begin\n.FM <1\b_|n|+n|-n> \t&brkind&fm\n)in +&hrglass -&hrglass\nThe FOOTING MARGIN control word specifies the number of blank\nlines which are to be left between the bottom of\nformatted text and any footing line.\n)cp end;)in;)sp;)cp begin\n.FN <BEGIN|END> \t&fn\n    <SET n>\n    <SET n /S1/S2/S3/>\n)in +&hrglass -&hrglass\nThe FOOTNOTE control word allows the user to enter a footnote\nwhich will be printed at the end of the current page.\n)cp end;)in;)sp;)cp begin\n.FO <Y\b_E\b_S\b_|NO|LEFT|RIGHT|CENTRE|INSIDE|OUTSIDE|HALF> \t&brkind&fo\n)in +&hrglass -&hrglass\nThe FORMAT control word combines the effect of\nCONCATENATE and JUSTIFY.\n)cp end;)in;)sp;)cp begin\n.FS <1\b_|n|+n|-n> \t&brkind&fs\n)in +&hrglass -&hrglass\nThe FOOTING SPACE control word specifies the number of footing\nlines to be printed at the bottom of both even and odd numbered\npages.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.FV <1\b_|n> <S1|'S1'S2'S3'> \t&fv\n)in +&hrglass -&hrglass\nThe EVEN FOOTING control word specifies three items of\ntitle information to be printed at the bottom of even numbered\npages.\n)cp end;)in;)do end\n)sp;)cp begin\n.GO <ident|n|+n|-n> \t&go\n)in +&hrglass -&hrglass\nThe GOTO control word specifies that the next input record is to be\nselected out of normal sequence.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.HD <1\b_|n> <S1|'S1'S2'S3'> \t&hd\n)in +&hrglass -&hrglass\nThe ODD HEADING control word is used to define three headings\nto be printed at the top of odd numbered pages.\n)cp end;)in;)do end\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.HE <1\b_|n> <S1|'S1'S2'S3'> \t&he\n)in +&hrglass -&hrglass\nThe HEADING control word is used to define three headings\nto be printed at the top of both even and odd numbered\npages.\n)cp end;)in;)do end\n)sp;)cp begin\n.HI <0\b_|n|+n|-n|YES|NO> \t&brkind&hi\n)in +&hrglass -&hrglass\nThe HANGING INDENT control word specifies an indent of additional\nspaces in each line of a paragraph after the first.\n)cp end;)in;)sp;)cp begin\n.HL <0\b_|n> line \t&brkind&hl\n)in +&hrglass -&hrglass\nThe HEADING LEVEL control word adds a level \"n\" entry to the\ncurrent Table of Contents.\n)cp end;)in;)sp;)cp begin\n.HM <1\b_|n|+n|-n> \t&brkind&hm\n)in +&hrglass -&hrglass\nThe HEADING MARGIN control word specifies the number of blank\nlines which are to be left between the heading line and\nthe first line of text.\n)cp end;)in;)sp;)cp begin\n.HN <EVEN|ODD> <BEGIN|END> \t&hn\n    <EVEN|ODD> <PURGE|DUMP>\n)in +&hrglass -&hrglass\nThe HEADNOTE control word defines a block of formatted text\nto appear at the top of all pages.\n)cp end;)in;)sp;)cp begin\n.HS <1\b_|n|+n|-n> \t&brkind&hs\n)in +&hrglass -&hrglass\nThe HEADING SPACE control word specifies the number of heading\nlines to be printed at the top of both even and odd numbered\npages.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.HV <1\b_|n> <S1|'S1'S2'S3'> \t&hv\n)in +&hrglass -&hrglass\nThe EVEN HEADING control word is used to define three headings\nto be printed at the top of even numbered pages.\n)cp end;)in;)do end\n)sp;)cp begin\n.HW text-line \t&hw\n)in +&hrglass -&hrglass\nThe HYPHENATE WORD control word allows a user to specify text\nwith conditional hyphenation break points.\n)cp end;)in;)sp;)cp begin\n.HY <ON|USER|OFF> \t&hy\n    <SET THRESH <5\b_|n|+n|-n>>\n    <SET MINPT <3\b_|n|+n|-n>>\n    <SET ENDPT <3\b_|n|+n|-n>>\n    <SET SUP   <3\b_|n|+n|-n>>\n    <SUP>\n    <ADD|DELETE|CHANGE> word-with-breaks\n    <TEST word-without-breaks|DUMP|PURGE>\n)in +&hrglass -&hrglass\nThe HYPHENATION control word is used to set the level of\nhyphenation required and to manipulate the automatic hyphenation\nexception word list.\n)cp end;)in;)sp;)cp begin\n.Hn line \t&brkind&h0\n)in +&hrglass -&hrglass\nThe HEADING LEVEL control word adds a level \"n\" entry to the\ncurrent Table of Contents.\nThe value of \"n\" may range from 0 to 9.\n)cp end;)in;)sp;)cp begin\n.IF <<'S1' op 'S2'|n1 op n2> <line>> \t&if\n)in +&hrglass -&hrglass\nThe IF control word sets a truth value to determine processing\nof subsequent input lines.\n)cp end;)in;)sp;)cp begin\n.IL <0\b_|n|+n|-n> \t&brkind&il\n)in +&hrglass -&hrglass\nThe INDENT LINE control word forces the next output line to\nstart a specified number of columns to the right of the\ncurrent input column.\n)cp end;)in;)sp;)cp begin\n.IM Filename <args> \t&im\n)in +&hrglass -&hrglass\nThe IMBED control word is used to insert the contents\nof a specified file into the printout of another file.\n)cp end;)in;)sp;)cp begin\n.IN <0\b_|m|+m|-m|*> <0\b_|n|+n|-n|*> \t&brkind&in\n)in +&hrglass -&hrglass\nThe INDENT control word causes the logical left and/or right\nmargins of the printout to be indented a specified number\nof spaces.\n)cp end;)in;)sp;)cp begin\n.IX <1\b_|n> 'S1' <'S2' <'S3'>> <<.> <ref>> \t&ix\n    <1\b_|n> . <DUMP|PURGE>\n)in +&hrglass -&hrglass\nThe INDEX control word builds an index structure with references\nand triggers printing of the result.\n)cp end;)in;)sp;)cp begin\n.JU <Y\b_E\b_S\b_|NO|LEFT|RIGHT|CENTRE|INSIDE|OUTSIDE|HALF> \t&brkind&ju\n)in +&hrglass -&hrglass\nThe JUSTIFY control word causes output lines to be\npadded with extra blanks so that the right margin is\njustified.\n)cp end;)in;)sp;)cp begin\n.LA <1\b_|n|YES|NO|line> \t&brkind&la\n)in +&hrglass -&hrglass\nThe LEFT ADJUST control word causes the next input line\nto be left adjusted in the output line, as if under\nNO FORMAT.\n)cp end;)in;)sp;)cp begin\n.LB <ident|n> <line> \t&lb\n)in +&hrglass -&hrglass\nThe LABEL control word specifies an identifier that is to be\nassociated with the current input record.\n)cp end;)in;)sp;)cp begin\n.LE <Y\b_E\b_S\b_|NO> \t&le\n)in +&hrglass -&hrglass\nThe LEADING BLANK LINE control word is used to control\nsuppression of blank lines at the beginning of a page.\n)cp end;)in;)sp;)cp begin\n.LI <1\b_|n|ON|OFF|char|line> \t&li\n)in +&hrglass -&hrglass\nThe LITERAL control word allows the control word indicator\nin the first column to be ignored or changed on following lines.\n)cp end;)in;)sp;)cp begin\n.LL <6\b_0\b_|n|+n|-n> \t&brkind&ll\n)in +&hrglass -&hrglass\nThe LINE LENGTH control word specifies the number of horizontal\ncharacter positions which are to be printed in subsequent\noutput lines.\n)cp end;)in;)sp;)cp begin\n.LN <n|+n|-n> \t&brkind&ln\n)in +&hrglass -&hrglass\nThe LINE IMMEDIATE control word causes output to resume at an absolute\nline number down on the current page or up on the next page.\n)cp end;)in;)sp;)cp begin\n.LS <0\b_|n|+n|-n|YES|NO> \t&brkind&ls\n)in +&hrglass -&hrglass\nThe LINE SPACING control word causes zero or more blank lines to\nbe skipped between each line of formatted output\nexcept when within a footnote.\n)cp end;)in;)sp;)cp begin\n.MC      \t&brkind&mc\n)in +&hrglass -&hrglass\nThe MULTIPLE COLUMN control word restores multi-column output\nafter it has been suppressed by .SC (SINGLE COLUMN).\n)cp end;)in;)sp;)cp begin\n.MS <ON|OFF> \t&ms\n)in +&hrglass -&hrglass\nThe MACRO SUBSTITUTION control word prevents user-defined\nmacros (see .DM) from being invoked.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.NC <Y\b_E\b_S\b_|NO> \t&brkind&nc\n)in +&hrglass -&hrglass\nThe NO CONCATENATE control word stops words from shifting\nto or from the next line.\n)cp end;)in;)do end\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.NF <Y\b_E\b_S\b_|NO> \t&brkind&nf\n)in +&hrglass -&hrglass\nThe NO FORMAT control word causes lines to be output as\nthey appear in the input by negating the effect\nof JUSTIFY and CONCATENATE.\n)cp end;)in;)do end\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.NJ <Y\b_E\b_S\b_|NO> \t&brkind&nj\n)in +&hrglass -&hrglass\nThe NO JUSTIFY control word stops justification of the\nright margin.\n)cp end;)in;)do end\n)sp;)cp begin\n.OB <1\b_|n> </S1/S2/S3/> \t&ob\n)in +&hrglass -&hrglass\nThe ODD BOTTOM control word is used to define three headings\nto be printed at the bottom of odd-numbered pages.\n)cp end;)in;)sp;)cp begin\n.OC <char|ON|O\b_F\b_F\b_|n> <c1 ...> \t&oc\n    char/<ON|OFF|n> <c1 ...>\n)in +&hrglass -&hrglass\nThe OVERLAY CHARACTER control word causes characters in input text\nlines to be overlaid with a backspace and user defined\ncharacter or itself.\n)cp end;)in;)sp;)cp begin\n.OF <0\b_|n|+n|-n> \t&brkind&of\n)in +&hrglass -&hrglass\nThe OFFSET control word causes all but the first line of a\nsection to be indented.\n)cp end;)in;)sp;)cp begin\n.OJ <1\b_|n|YES|NO|line> \t&brkind&oj\n)in +&hrglass -&hrglass\nThe OUT JUSTIFY control word causes the specified lines to be aligned\nto the outside of the page.\n)cp end;)in;)sp;)cp begin\n.OO <1\b_|n|ON <string>>\n    <OFF|DELETE> \t&oo\n)in +&hrglass -&hrglass\nThe OUTPUT OVERLAY control word causes blanks in formatted output\nrecords to be overlaid with a user defined string.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.OP \t&brkind&op\n)in +&hrglass -&hrglass\nThe ODD PAGE EJECT control word causes output to continue on\nan odd numbered page.\n)cp end;)in;)do end\n)sp;)cp begin\n.OT <1\b_|n> </S1/S2/S3/> \t&ot\n)in +&hrglass -&hrglass\nThe ODD TITLE control word is used to define three headings\nto be printed at the top of odd numbered pages.\n)cp end;)in;)sp;)cp begin\n.OV <1\b_|n|ON <string>> \t&ov\n    <OFF|DELETE>\n)in +&hrglass -&hrglass\nThe OVERLAY control word causes following input text lines\nto be overlaid by the contents of the text line following\nthis command.\n)cp end;)in;)sp;)cp begin\n.PA <%\b_+\b_1\b_|n|+n|-n <m|+m|-m>> \t&brkind&pa\n    <YES|NO|ODD|EVEN>\n)in +&hrglass -&hrglass\nThe PAGE control word causes an output page eject\nand optionally resets the page number.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.PD \t&brkind&pd\n)in +&hrglass -&hrglass\nThe ODD PAGE control word causes output to continue on an\nodd numbered page.\n)cp end;)in;)do end\n)sp;)cp begin\n.PE <1\b_|n|YES|NO|DELETE> \t&pe\n)in +&hrglass -&hrglass\nThe PERFORM control word causes remainder of the same or the next\ninput line to be executed multiple times.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.PI <0\b_|n|+n|-n|YES|NO> \t&brkind&pi\n)in +&hrglass -&hrglass\nThe PARAGRAPH INDENT control word specifies the number of blank\nspaces to be inserted at the beginning of each paragraph.\n)cp end;)in;)do end\n)sp;)cp begin\n.PL <6\b_6\b_|n|+n|-n> \t&brkind&pl\n)in +&hrglass -&hrglass\nThe PAGE LENGTH control word specifies the physical size of the\noutput page in units of physical output lines.\n)cp end;)in;)sp;)cp begin\n.PN <O\b_N\b_|OFF|OFFNO> \t&pn\n    <ARABIC|ROMAN <L\b_O\b_W\b_E\b_R\b_|UPPER>>\n    <PREFIX|SUFFIX <string>>\n    <FRAC|NORM>\n)in +&hrglass -&hrglass\nThe PAGE NUMBER control allows the user to control the\nincrementing and formatting of page numbers.\n)cp end;)in;)sp;)cp begin\n.PP <line> \t&brkind&pp\n)in +&hrglass -&hrglass\nThe PARAGRAPH START control word defines the beginning of a new\nparagraph.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.PR <information> \t&pr\n)in +&hrglass -&hrglass\nThe PRINT control word causes one line of information\nto be typed on the user's terminal.\n)cp end;)in;)do end\n)sp;)cp begin\n.PS <%\b_|character> \t&ps\n)in +&hrglass -&hrglass\nThe PAGE NUMBER SYMBOL control word defines the character\nin headings and footings to be replaced by the current\npage number.\n)cp end;)in;)sp;)cp begin\n.PT <line> \t&pt\n)in +&hrglass -&hrglass\nThe PUT TABLE OF CONTENTS control word adds an input line to the\nTable of Contents.\n)cp end;)in;)sp;)cp begin\n.PU <1\b_|n> <line> \t&pu\n)in +&hrglass -&hrglass\nThe PUT WORKFILE control word allows the user to output records\nof data to an output file.\nThis file may be imbedded later or be kept.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.PV \t&brkind&pv\n)in +&hrglass -&hrglass\nThe EVEN PAGE control word causes output to continue on\nan even numbered page.\n)cp end;)in;)do end\n)sp;)cp begin\n.QQ <Y\b_E\b_S\b_|NO> \t&brkind&qq\n)in +&hrglass -&hrglass\nThe QUIT QUICKLY control word causes immediate termination\nof all input and output file processing.\n)cp end;)in;)sp;)cp begin\n.QU <Y\b_E\b_S\b_|NO> \t&brkind&qu\n)in +&hrglass -&hrglass\nThe QUIT control word causes immediate termination of all input file\nprocessing.\n)cp end;)in;)sp;)cp begin\n.RA <1\b_|n|YES|NO|line> \t&brkind&ra\n)in +&hrglass -&hrglass\nThe RIGHT ADJUST control word causes the next input\nline to be right adjusted in the output line.\n)cp end;)in;)sp;)cp begin\n.RC n <ON|OFF|ON/OFF> \t&rc\n    n <char|SET string>\n)in +&hrglass -&hrglass\nThe REVISION CODE control word allows selected portions of the\ntotal document to be marked in the left margin\nwith a revision code character.\n)cp end;)in;)sp;)cp begin\n.RD <1\b_|n> \t&rd\n)in +&hrglass -&hrglass\nThe READ TERMINAL control word allows the user to\nenter a line to be ignored during SCRIPT output.\n)cp end;)in;)sp;)cp begin\n.RE \t&re\n)in +&hrglass -&hrglass\nThe RESTORE STATUS control word restores the page environment\nlast saved with a SAVE STATUS.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.RI <1\b_|n|YES|NO|line> \t&brkind&ri\n)in +&hrglass -&hrglass\nAlternate form of RIGHT ADJUST.  See the .RA control word.\n)cp end;)in;)do end\n)sp;)cp begin\n.RM <*|n|name <m|SAVE|N\b_O\b_S\b_A\b_V\b_E\b_> <S\b_A\b_V\b_E\b_|NOSAVE>> \t&rm\n    <*|n|name DELETE>\n    <DELETE>\n)in +&hrglass -&hrglass\nThe REMOTE control word defines one or more\ninput lines to be processed at a\nspecific place on the current page, the next page, or\nsubsequent pages automatically, to be triggered by SIGNAL (see .SI),\nor to be used as a user-defined control word.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.RO <L\b_O\b_W\b_E\b_R\b_|UPPER> \t&ro\n)in +&hrglass -&hrglass\nThe ROMAN control word causes page numbers to use\nlower-case Roman numerals.\n)cp end;)in;)do end\n)sp;)cp begin\n.RV name \t&rv\n)in +&hrglass -&hrglass\nThe READ VARIABLE control word allows the user to set the value\nof a variable symbol from an online terminal.\n)cp end;)in;)sp;)cp begin\n.SA \t&sa\n)in +&hrglass -&hrglass\nThe SAVE STATUS control word saves the current page environment\nin a push down stack to be restored later with a RESTORE STATUS.\n)cp end;)in;)sp;)cp begin\n.SC      \t&brkind&sc\n)in +&hrglass -&hrglass\nThe SINGLE COLUMN control word temporarily suppresses multi-column\noutput.\n)cp end;)in;)sp;)cp begin\n.SE name <'string'|numeric expression> \t&se\n)in +&hrglass -&hrglass\nThis SET REFERENCE control word allows the user to\nassign a character or numeric value to a symbolic reference\nname optionally using other symbolic reference names (see also .SR).\n)cp end;)in;)sp;)cp begin\n.SI <*\b_|n|name> <args> \t&si\n)in +&hrglass -&hrglass\nThe SIGNAL REMOTE control word causes the specified REMOTE\nto be invoked immediately.\n)cp end;)in;)sp;)cp begin\n.SK <1\b_|n> <A> <C> \t&brkind&sk\n)in +&hrglass -&hrglass\nThe SKIP control word generates a specified number of blank lines\nbefore the next output line, except at the top of a page.\n)cp end;)in;)sp;)cp begin\n.SP <1\b_|n> <A> <C> \t&brkind&sp\n)in +&hrglass -&hrglass\nThe SPACE control word generates a specific number of\nblank lines before processing continues.\n)cp end;)in;)sp;)cp begin\n.SR name<=> <'string'|numeric expression> \t&sr\n)in +&hrglass -&hrglass\nThe SET REFERENCE control word allows the user to assign\na character or numeric value to a symbolic reference\nname (see also .SE).\n)cp end;)in;)sp;)cp begin\n.SS \t&brkind&ss\n)in +&hrglass -&hrglass\nThe SINGLE SPACE control word causes output to be\nsingle spaced.\n)cp end;)in;)sp;)cp begin\n.SU <1\b_|n|ON|OFF|line> \t&su\n    <U\b_P\b_P\b_E\b_R\b_|NOUPPER>\n    <TRACEON|TRACEOFF>\n)in +&hrglass -&hrglass\nThe SUBSTITUTE SYMBOL control word causes subsequent input\ntext and control lines\nto be reformatted by substituting the current values\nof specified reference names in the line and to be processed\nas if it had been in the input.\n)cp end;)in;)sp;)cp begin\n.SY <line> \t&sy\n)in +&hrglass -&hrglass\nThe SYSTEM control word passes a command line to the host\noperating system.\n)cp end;)in;)sp;)cp begin\n.TB <n1 n2 n3 ...> \t&brkind&tb\n    <<'string'|char/>n<L\b_|R|C|'char> ...>\n    <SET <char>>\n)in +&hrglass -&hrglass\nThe TAB SETTING control word specifies the tab stops\nto be assumed for the following lines when converting the\nTAB character (X'05') generated by the terminal\nTAB key into the appropriate number of spaces.\n)cp end;)in;)sp;)cp begin\n.TC <1\b_|n|* <C\b_O\b_N\b_T\b_E\b_N\b_T\b_S\b_|line>> \t&brkind&tc\n    <ADD <m ... >>\n    <PURGE>\n)in +&hrglass -&hrglass\nThe TABLE OF CONTENTS control word causes the specified Table of\nContents to be printed.\n)cp end;)in;)sp;)cp begin\n.TE <1\b_|n> \t&te\n)in +&hrglass -&hrglass\nThe TERMINAL INPUT control word allows the user to enter control\nor input lines during processing of the input file.\n)cp end;)in;)sp;)cp begin\n.TH line \t&th\n)in +&hrglass -&hrglass\nThe THEN control word causes an input line to be conditionally\nincluded depending on the truth value of a previous IF control word.\n)cp end;)in;)sp;)cp begin\n.TI <s <s\b_|t>> \t&ti\n    <<s1 t1> <s2 t2> ...>\n    <SET <char>>\n)in +&hrglass -&hrglass\nThe TRANSLATE ON INPUT control word allows the user to specify\nan escape character and the contents of a translate table to\nbe used on input lines.\n)cp end;)in;)sp;)cp begin\n.TM <6\b_|n|+n|-n> \t&brkind&tm\n)in +&hrglass -&hrglass\nThe TOP MARGIN control word specifies the number of lines\nto be placed between the physical top of the\noutput page and the first line of text.\n)cp end;)in;)sp;)cp begin\n.TR <s <s\b_|t>> \t&tr\n    <<s1 t1> <s2 t2> ...>\n)in +&hrglass -&hrglass\nThe TRANSLATE ON OUTPUT control word allows the user to specify the\ncontents of the translate table used for output.\n)cp end;)in;)sp;)cp begin\n.TT <1\b_|n> </S1/S2/S3/> \t&tt\n)in +&hrglass -&hrglass\nThe TOP TITLE control word is used to define three headings\nto be printed at the top of both even and odd numbered\npages.\n)cp end;)in;)sp;)cp begin\n.TY <information> \t&ty\n)in +&hrglass -&hrglass\nThe TYPE ON TERMINAL control word causes one line of information\nto be typed on the user's terminal.\n)cp end;)in;)sp;)cp begin\n.UC <line> \t&uc\n)in +&hrglass -&hrglass\nThe UNDERSCORE AND CAPITALIZE control word underscores and capitalizes\nan input line.\n)cp end;)in;)sp;)cp begin\n.UD <<ON|OFF> c1 <c2 ... >> \t&ud\n    <SET|INCLUDE|IGNORE> char\n)in +&hrglass -&hrglass\nThe UNDERSCORE DEFINITION control word is used to specify the\ncharacters to be underscored with the automatic underscoring\ncommands.\n)cp end;)in\n)if '&type' eq ALL;)do\n)sp;)cp begin\n.UL <1\b_|n|ON|OFF> <line> \t&ul\n)in +&hrglass -&hrglass\nThe UNDERLINE control word causes alphanumeric characters in\nsubsequent text lines to be overstruck with a backspace and an\nunderscore.\n)cp end;)in;)do end\n)if '&type' eq ALL;)do;)sp;)cp begin\n.UN <0\b_|n|+n|-n> \t&brkind&un\n)in +&hrglass -&hrglass\nThe UNDENT control word forces the next output line to\nstart a specified number of columns to the left of the\ncurrent indent.\n)cp end;)in;)do end\n)sp;)cp begin\n.UP <line> \t&up\n)in +&hrglass -&hrglass\nThe UPPERCASE control word is used to capitalize an input line.\n)cp end;)in;)sp;)cp begin\n.UR line \t&ur\n)in +&hrglass -&hrglass\nThe USE REFERENCE control word causes an input line to\nbe reformatted by substituting the current values of specified\nreference names in the line and to be processed as if\nit had been the input (see also .SE and .SR).\n)cp end;)in;)sp;)cp begin\n.US <line> \t&us\n)in +&hrglass -&hrglass\nThe UNDERSCORE control word is used to underscore an input line.\n)cp end;)in;)sp;)cp begin\n.WD <Y\b_E\b_S\b_|NO> \t&wd\n)in +&hrglass -&hrglass\nThe WIDOW control word prevents the first and last lines of\na paragraph from being split across a page boundary from the\nrest of a paragraph.\n)cp end;)in;)su off;)li .\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "APENDIXX": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00B\\x00B\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 66, "newlines": 66, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE SYSPUB COMMAND SUMMARY appendix\n.ce\n.us SYSPUB COMMAND SUMMARY\n.sp 1\n.lb SCRIPTCD\n.in\nSYSPUB is a set of \"high-level\" formatting commands designed\nfor reports, papers, user's guides,\nmanuals, books, reference manuals, and other\nacademic publications such as theses.\nTo access the SYSPUB commands, specify\n.sp;     .im syspub layout=xxx\n.sp;at the beginning of your input file, and replace \"xxx\" by\none of the layouts shown below.\nEach of the layouts incorporates all of the commands of\nthe layouts above it.\nFor more information, see the SYSPUB User's Guide.\n.ud off =\n.fo no;.sp;.cc begin;.uc layout=report;.sp\n  .chapter 'title'\n  .section 'title'\n  .subsection 'title'\n  .subsub 'title'\n  .para <n>\n.cc end;.sp;.cc begin\n  .footnote 'refword' <'punctuation'>\n  .footend\n  .quote <BEGIN|END>\n  .point <BEGIN|END|1|2|3|SET s1 s2 s3>\n  .boxon  and  .boxoff\n.cc end;.sp;.cc begin\n  .tabnum refname\n  .tabbegin\n  .table refname 'title'\n  .tabend <page>\n.cc end;.sp;.cc begin\n  .fignum refname\n  .figbegin\n  .figure refname 'title'\n  .figend <page>\n.cc end;.sp;.cc begin;.uc layout=paper,ieee;.sp\n  .prelim 'title'\n  .appendix 'title'\n  .bibliography 'alternate title'\n  .bib\n.cc end;.sp;.cc begin;.uc layout=guide;.sp\n  .index <n <'alternate title'>>\n  .contents <'alternate title'>\n  .tables <'alternate title'>\n  .figures <'alternate title'>\n.cc end;.sp;.cc begin;.uc layout=manual,refman;.sp\n  .titlepage\n  .part 'title'\n.cc end\n.sp;.cc begin;.uc layout=thesis,apa3,apa4;.sp\n  .by 'name of author'\n  .course 'title of course'\n  .degree 'title of degree'\n  .date\n.sp\n  .declaration\n  .borrow\n.cc end\n.ud on =\n.in;.fo\n.cm END OF APPENDIX\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "AR": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x16\\x00\\x16\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "BC": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\"\\x00\"\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE BC\n.SUBT Purpose\nThe BALANCE COLUMNS control word enables or disables column\nbalancing for multiple column output.\n.SUBT Format\n|\n|  .BC           <O\b_N\b_|OFF>\n|\n.SUBT Usage\nWhen multiple column output is in effect, the columns of\ntext on a page that is not full may be balanced when\na page eject or column definition is encountered.\nThis means that the number of lines in each column of text is made\nas equal as possible before being output.\nWhen balanced columns is turned off, the number of lines in each\ncolumn is determined by filling each column with text or by\ncolumn begin (.CB) or conditional column begin (.CC) control words.\nIn this case the columns will not be equalized or balanced\nbefore being output.\n.SUBT Defaults\nThis control word does not create a break.\nThe initial and default operand is \"ON\".\n.SUBT Notes\n.of 4\n(1) Even if BALANCE COLUMNS is ON, a column may be ineligible\nfor balancing if it is terminated by\na conditional or explicit column begin (.CB) control word or if\nthe column fills a page and contains a footnote.\n.sp\n.of 4\n(2) A page eject or column begin that forces the termination of the\nlast column on a page, does not mark a column ineligible for\nbalancing.\n.cm End of BC\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "BLANKPG": {"ttr": 1294, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "BM": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00-\\x00-\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "BR": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x004\\x004\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE BR\n.SUBT Purpose\nBREAK causes the immediately previous line to be typed without\nfilling in with words from the next line.\n.SUBT Format\n|\n|  .BR           <line>\n|\n.SUBT Usage\nBREAK is used to prevent concatenation of lines such as paragraph\nheadings or the last line of a paragraph.  It causes\nthe preceding line to be typed as a short line if it is\nshorter than the current line length.\n.sp\nThe optional \"line\" operand starts one blank after\nthe control word and may be text or another control word.\n.SUBT Defaults\nThis command does create a break.\nThat is its only function.\n.SUBT Notes\n.of 4\n(1) Many of the other control words act as a BREAK.  No BREAK is\nnecessary when one of these is present.\nThe description of each control word under\n.us Defaults,\nstates if the control word acts as a break or not.\n.of 4\n(2) A blank or tab in column one of an input line has the effect\nof a BREAK immediately before the line.\n.of 4\n(3) If NO CONCATENATE is in effect, all lines appear to be followed\nby a BREAK.\n.SUBT Examples\n.fo no\n.of 4\n(1)  Heading:\n.li .br\nFirst line of paragraph ...\n.fo;.sp\n     This example would be printed as:\n.sp\nHeading:\n.br\nFirst line of paragraph ...\n.sp\n.cp begin\n     Without the BREAK, it would be printed:\n.sp\nHeading:\nFirst line of paragraph ...\n.cp end\n.cm End of BR\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "BS": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00-\\x00-\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE BS\n.SUBT Purpose\nThe BACKSPACE control word specifies the input character to be\ntreated as a logical backspace and a hex join character.\n.SUBT Format\n|\n|  .BS           <char> <H\b_J\b_O\b_I\b_N\b_|NOHJOIN>\n|\n.SUBT Usage\nIn all subsequent input text and control lines, each occurrence\nof the character \"char\" will be replaced with the backspace\ncharacter.\nThis is most useful when the user's input device does not offer\na backspace facility.\n.sp\nIn addition, the user defineable backspace character has the\nfunction of \"hex join\" unless \"NOHJOIN\" is specified.\nThus if the character before the backspace is from \"0\" to \"9\",\n\"A\" to \"F\" or \"a\" to \"f\" and the character after the backspace\nis in the same range, then the three characters will be replaced\nby a single character.\nThis hex join facility is supported only for the user backspace\ncharacter and not the real backspace character X'16', although\nthe real backspace could be specified as the user's backspace.\n.SUBT Defaults\nThis command will not create a break when encountered.\nThe initial default user backspace character is not defined.\nAn omitted character operand will disable the facility.\n.SUBT Examples\n.of 4\n(1) .BS +;ABCDEFG+++++++_______\n.sp\nwill produce:\n.sp\n.bs +;ABCDEFG+++++++_______\n.bs\n.sp\n.of 4\n(2) .bs \u00ac HJOIN;In f\u00ac_i\u00ac_g\u00ac_ B\u00ac9B\u00ac1\u00ac\u00ac__.\n.sp\nwill produce:\n.sp\n.bs \u00ac HJOIN;In f\u00ac_i\u00ac_g\u00ac_ B\u00ac9B\u00ac1\u00ac\u00ac__.\n.bs\n.cm End of BS\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "BT": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00$\\x00$\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "BX": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00B\\x00B\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 66, "newlines": 66, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE BX\n.SUBT Purpose\nThe BOX control word creates the horizontal lines and initiates\nthe vertical rules that will surround user text.\n.SUBT Format\n|                <v1 <v2 <v3 ... >>>\n|  .BX           <OFF>\n|                <DELETE>\n.SUBT Usage\nWith numeric operands, this command creates a horizontal line\nwith vertical connectors above joining a previous .BX command (if any)\nand vertical connectors below in the specified columns to the\nnext .BX command.\nThe numeric operands specified must be in increasing column\norder and a signed operand is relative to the preceeding operand.\n.sp\nIf no operand is present, the last Box verticals are repeated.\nA single operand draws a line, not a box.\n.sp\nThe \"OFF\" operand terminates the box with a final horizontal line.\nThe \"DELETE\" operand terminates the box with no final line.\n.sp\nTwo character sets are used by SCRIPT to draw the boxes.\nThe first consists of '+', '-' and '|' which is used with the\nONLINE option.\nThe second set is the special box drawing characters of the TN\nprint train, which is used with the OFFLINE option.\n.SUBT Defaults\nThis command creates a break.\n.br;.cp begin\n.SUBT Examples\n.tr \u00ac .\n.of 4\n.fo no\n(1) \u00acin +5 -5\n\u00acbx 1 &sysll\n\u00acsk;\u00acla ONE;\u00acce TWO;\u00acra THREE\n\u00acsk;\u00acbx\nThis is a continued box showing\nformatted text in a box.\n\u00acbx off\n.fo yes\n.cp end\n.sp\n.tr\n.cp begin\nproduces:\n.sp\n.in +5 -5\n.ur .bx 5 &sysll\n.sk;.la ONE;.ce TWO;.ra THREE\n.sk;.bx\nThis is a continued box showing\nformatted text in a box.\n.bx off\n.in -5 +5\n.cp end\n.sp\n.of 4\n(2) .bx 20 30;.sp;.bx;.sp;.bx 10 40;.sp\n.of 4\n    .bx 20 30;.sp;.bx off\n.sp\nproduces:\n.bx 20 30;.sp;.bx;.sp;.bx 10 40;.sp;.bx 20 30;.sp;.bx off\n.cm End of BX\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "CB": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x16\\x00\\x16\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT Reference CB\n.SUBT Purpose\nThe COLUMN BEGIN control word causes subsequent text to begin at the\ntop of a new column.\n.SUBT Format\n|\n|  .CB\n|\n.SUBT Usage\nWhen in multiple column mode, this control word causes\nthe following text to appear at the top of the next output column.\nIf this control word is encountered while processing\nthe last column on a page then it is equivalent to a page eject.\n.sp\nThe same action may be caused by a CONDITIONAL COLUMN BEGIN (.CC).\n.SUBT Defaults\nThis control word causes a break.\nNo operand may be specified.\n.SUBT Notes\n.of 4\n(1) This control word is illegal in a Keep or Footnote.\n.cm End of CB\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CC": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT Reference CC\nThe CONDITIONAL COLUMN BEGIN control word causes a column begin\nto occur if insufficient lines remain in the current column for text.\n.SUBT Format\n|                <0\b_|n>\n|  .CC\n|                <BEGIN|END <0\b_|m>>\n.SUBT Usage\nWith a numeric operand, a check is made for \"n\" lines remaining\nin the current column.\nIf \"n\" lines do not remain, a COLUMN BEGIN is performed which makes\nthe current column ineligible for balancing.\nIf \"n\" lines do remain, no action is performed, but if BALANCE\nCOLUMNS is \"ON\" then output in the current column may be split by\nlater balancing of column text.\n.sp\nInstead of counting output lines, input text may start with a \"BEGIN\"\noperand and terminate with \"END\".\nThis works within columns the way \".CP\" works with pages.\nThe \"END\" operand may be further qualified with a numeric argument \"m\"\nwhere this value is added to the length of the formatted block before\ndeciding if the block will fit on the current column.\n.SUBT Defaults\nThis control word does not create a break.\nThe default operand is zero which will not perform any action.\n.cm End of CC\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "CD": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00:\\x00:\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT Reference CD\n.SUBT Purpose\nThe COLUMN DEFINITION control word defines how many columns\nof output are to be formatted on each page and where each column is to\nstart.\n.SUBT Format\n|\n|  .CD         <n <d1 <d2 ... d9>>>\n|\n.SUBT Usage\nThe first operand of the COLUMN DEFINITION control word defines\nthe number of columns of output text that are to formatted from\nnow on.\nThe operand may range from 1 to 9 columns and may be signed, indicating\na change relative to the current definition.\n.sp\nThe following numeric operands specify up to nine displacements\nrelative to the current adjust (.AD) setting, after which the formatted\noutput columns are to appear.\nA zero displacement means no displacement at all.\nIf a displacement is signed, it means a change relative to the previous\ndisplacement in the same control word.\n.sp\nIf all operands are omitted, it is a redefinition of the current\nCOLUMN DEFINITION.\nNote the .CD control word causes all input text to that point\nto be printed with the former definition.\nIf displacement operands are omitted, their former value is retained.\n.sp\nThe COLUMN DEFINITION does not set the width of each column.\nSee the COLUMN LENGTH (.CL) control word.\nIf text should overflow past the displacement of a following\ncolumn because of FORMAT NO text or overlays, the text\nof the following column will replace the former.\n.SUBT Defaults\nThis control word causes a break.\nThe initial number of columns is one, with displacements\n0, 46, 92, 0, 0, 0, 0, 0, 0.\nOmitted operands in this control word retain their former value.\n.SUBT Notes\n.of 4\n(1) This control word is not allowed in Keeps or Footnotes.\n.SUBT Examples\n.of 4\n(1) .cd 1 0\n.br\nThis is the same as single column mode.\nIt specifies one column at displacement zero.\n.sp\n.of 4\n(2) .ll 60;.cl 27;.cd 2 0 33\n.br\nThis specifies a Line Length of 60 and a Column Length of 27.\nText will be formatted from column 1 (displacement 0) to\ncolumn 27 and from column 34 (displacement 33) to\ncolumn 60, leaving a 6 character \"gutter\" or white space\nbetween columns.\n.cm End of CD\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "CE": {"ttr": 1553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x003\\x003\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE CE\n.SUBT Purpose\nThe line following the CENTER control word will be centered between\nthe margins.\n.SUBT Format\n|\n|  .CE          <1\b_|n|YES|NO|line>\n|\n.SUBT Usage\nThe \"line\" operand or the next \"n\" text lines in the input file,\nincluding leading blanks,\nwill be centered between the left and right margins.\n.SUBT Defaults\nThis command causes a break.\nA numeric operand will center the following \"n\"\ninput lines.  A \"YES\" operand will center all following input lines\nuntil a \"NO\" operand is encountered.\n.SUBT Notes\n.of 4\n(1) If the line to be centered is longer than the current line\nlength, it will be truncated and _\bn_\bo_\bt centered.\n.of 4\n(2) The left and right margins are the value of any indent value\n(.IN) and the current Line Length altered by Right Indent,\nrespectively.\n.SUBT Examples\n(1) .CE O\b_t\b_h\b_e\b_r\b__M\b_e\b_t\b_h\b_o\b_d\b_s\b_\n.sp 1\nWhen this line is typed, the characters\n\"_\bO_\bt_\bh_\be_\br__\bM_\be_\bt_\bh_\bo_\bd_\bs\" will be centered:\n.sp 1\n.ce\n_\bO_\bt_\bh_\be_\br__\bM_\be_\bt_\bh_\bo_\bd_\bs\n.sp\n.cp begin\n.of 4\n.tr \u00ac .\n(2) \u00acce 3;first line\n.br\n\u00acsp;number two line\n.br\nthird line\n.tr \u00ac \u00ac\n.sp\nproduces:\n.sp\n.ce 3;first line\n.sp;number two line\nthird line\n.cp end\n.cm End of CE\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "CL": {"ttr": 1555, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x17\\x00\\x17\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT Reference CL\n.SUBT Purpose\nThe COLUMN LENGTH control word defines the width in characters\nof each column in multiple column mode.\n.SUBT Format\n|\n|  .CL           <0\b_|n|+n|-n>\n|\n.SUBT Usage\nThe .CL control word defines the number of characters in each\ncolumn of formatted output, when in multiple column mode.\nThe COLUMN LENGTH may be set with a numeric argument or be changed\nrelative to its current value with a signed argument.\n.sp\nA zero argument is a special case.\nThis sets the Column Length equal to the current Line Length (.LL).\n.sp\nThis control word is used with COLUMN DEFINITION (.CD) to define\nthe column and gutter placement on a page.\n.SUBT Defaults\nThis control word causes a break.\nThe initial and default value is equal to the Line Length.\n.cm End of CL\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "CM": {"ttr": 1557, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00L\\x00L\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 76, "newlines": 76, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE CM\n.SUBT Purpose\nThe COMMENT control word is ignored and may be used to enter\ncomments into a SCRIPT file.\n.SUBT Format\n|\n|  .CM           <anything>\n|\n.SUBT Usage\nThe .CM control word allows comments to be stored in the SCRIPT file.\nThese comments may be seen whenever the input file is edited\nor printed.\n.sp\nComment lines may be used to store unique identifications for use\nduring editing of the file.\n.SUBT Defaults\nThis command does not cause a break.\n.SUBT Notes\n.of 4\n(1) Since only the first two characters of a control line\n(exclusive of the control word indicator, normally \".\")\nare examined to determine what control word is present, and since\nundefined reference names have null-string (\"\") values, a reference\nname can be given the value 'CM' and used to control conditional\nrecognition of other control words.\n(See Example 2).\n.sp\n.of 4\n(2) If the control word cannot be identified then a first control\nword character of asterisk \"*\" will be recognized as a comment that\ngoes to the very end of the current input record, regardless of\ncontrol word separators and other control words.\n.SUBT Examples\n.of 4\n(1) .CM .NF used below.\n.sp\nThe comment line will be seen when examining\nthe printout of the SCRIPT file and will\nserve to explain what is going on.\n.sp\n.of 4\n.tr \u00ac .\n(2) .sr stop0='CM '\n.br\n\u00acur .ur .&&stop&n..im setup\n.sp\nIf the reference name \"n\" has any value other than 0,\nthe line will be:\n.sp\n     .im setup\n.sp\nIf the reference name \"n\" has the value 0, the line will be:\n.sp\n     .CM im setup\n.sp\nwhich is interpreted as a comment and thus ignored.\n.sp\n.fo no\n.of 4\n(3) \u00accm This is a comment\n\u00accmThis is a comment\n\u00ac*  This is a comment\n\u00ac* This is a comment\n\u00ac*This is a comment\n.fo yes\n.sp\nThe control lines above are equivalent.\n.sp\n.of 4\n(4) .cm This is a comment followed by a space;.sp\n.br\n\u00ac* This is a comment followed by a space;.sp\n.sp\nThe control lines above are not equivalent.\n.tr\n.cm End of CM\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "CMSSCR": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\xac\\x00\\xac\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 172, "newlines": 172, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "CO": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "CONTENTS": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00+\\x00+\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE CONTENTS\n.ur .if '&UPDATE' ne '';.th .ef\n.ur .bx 1 &sysll\n.sp;.ce TABLE OF CONTENTS\n.sp;.bx off\n.sp\n.ds\n.in\n.ur .tb ./&SYSLL.RIGHT\n.nf\n.ur Preface \t&preface\n.ur Purpose \t&purpose\n.ur Options \t&options\n.ur Error Messages \t&error\n.ur CMS Online Procedures \t&cmsscr\n.ur TSO Online Procedures \t&tsoscr\n.ur Online Terminal Support \t&onterm\n.ur Offline Printer Support \t&offscr\n.ur Creation of Input Files \t&crinput\n.ur SCRIPT Control Words \t&contwords\n.sp\n.ur .tb 5 9 ./&SYSLL.RIGHT\n.cp begin\nAppendices:\n.ur \tA.\tOther Control Words and Arguments \t&apndixA\n.ur \tB.\tSample Input to SCRIPT \t&apndixB\n.ur \tC.\tSample Output from SCRIPT \t&apndixC\n.ur \tD.\tPage Setup \t&apndixD\n.ur \tE.\tOffline Control Statements \t&apndixE\n.ur \tF.\tNotes on this Document \t&apndixF\n.ur \tG.\tSystem Reference Symbols and Remotes \t&apndixG\n.ur \tH.\tPrint Trains \t&apndixH\n.ur \tI.\tControl Word Summary \t&apndixI\n.cp end\n.ss\n.tb\n.fo\n.pa\n.se reftab='.'\n.im REFALPH\n.pa 1\n.ar\n.cm End of CONTENTS\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "CORRTRAN": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "CBT249"}, "text": ".tr 1 y 2 2 3 3 4 8 5 4 6 6 7 5 8 7 9 # 0 9 - . & %\n.tr q f w $ e u r n t @ y i u t i o o q p d @ <\n.tr a p s r d v f c g a h z j & k w l y $ * # ;\n.tr z 0 x / c x v l b , n s m j , g . k / h\n.tr = b ; e : E  ' m * > ( \" ) ( _ \u00ac + B\n.tr Q F W ! E U R N T \u00a2 Y I U T I O O Q P D \u00a2 '\n.tr A P S R D V F C G A H Z J + K W L Y ! - \" M\n.tr Z ) X ? C X V L B | N S M J ? H\n.tr < 40 > 40 | 40 \u00ac 40\n.tr 8d 40 9d 40 b0 40 b1 40 b2 40 b3 40 b4 40 b5 40\n.tr b6 40 b7 40 b8 40 b9 40 00 40 \u00a2 40 02 40\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "CP": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00;\\x00;\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 59, "newlines": 59, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "CR": {"ttr": 1805, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x001\\x001\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE CR\n.SUBT Purpose\nThe CONTROL WORD REPLACEMENT control word is used to change\nthe control word that identifies a SCRIPT function, to\ndelete a SCRIPT function or to reset the set of SCRIPT\ncontrol words.\n.SUBT Format\n|\n|  .CR           <OO <WW>>\n|\n.SUBT Usage\nThe original control word \"OO\" will be replaced by a working\ncontrol word \"WW\".  The \"OO\" control word will no longer be\nrecognized as a valid control word since the \"WW\" control\nword has replaced it.  If \"WW\" is also a valid control word then\nit will lose its former function.\nThe replacements made are not cumulative but always work from\nthe original control words.\nIf the second argument \"WW\"\nis missing, then the original control word is reset for that word\nand any working control words equal to \"WW\" are reset to their\noriginal values.  If both arguments are omitted then all working\ncontrol words are reset to their original values.\n.SUBT Defaults\nThis command will not create a break when encountered.\n.SUBT Examples\n.of 4\n(1) .cr sp jp\n.br\nThe SPACE control word is replaced by JUMP.  The \"jp\" control word\nhas all the functions and attributes of \"sp\" which is no longer\nrecognized.\n.sp 1\n.cp 7\n.of 4\n(2) .cr te rc\n.br\nThe TERMINAL READ control word is replaced by READ CONTROL.  The\n\"rc\" control word has all the functions and attributes of \"te\"\nwhich is no longer recognized.  Moreover, the REVISION CODE\n\"rc\" control word is no longer available.\n.sp 1\n.cp 4\n.of 4\n(3) .cr rc\n.br\nFollowing example (2) this will reset TERMINAL READ to \"te\" and\nrestore the availability of the REVISION CODE control word, \"rc\".\n.cm End of CR\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "CRINPUT": {"ttr": 1807, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00P\\x00P\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 80, "newlines": 80, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE CRINPUT\n.ur .if '&UPDATE' ne '' and '&UPDATE' gt '770919' .th .ef\n.us Creation of Input for SCRIPT\n.sr crinput=%\n.sp\nAll input must be in the form of fixed or variable length records\nor WYLBUR Edit-format records.\nA fixed file is assumed to be sequenced in the last eight\ncolumns of each record, an assumption that is dropped with\nthe first record per file or member that doesn't have\nonly numerics in those columns.\nA file with a variable format is also assumed to be sequenced\nin a specifiable eight columns of each record, normally\nthe last eight.\nInput can have a maximum length of 240\n.FNADD\n.ur characters&LP..\n.fn begin\n.in\n.fo\n.ur .of &OFN\n.ur (&NFN.) It is possible to input more than 130 characters per line\nif backspaces and underscores are used.\n.fn end\nSCRIPT will format these input\nlines into lines of length specified by \".ll\", normally\n.FNADD\n.ur 60&LP..\n.fn begin\n.in\n.fo\n.ur .of &OFN\n.ur (&NFN.) If the sequence character, backspace, character is\nfound, the backspace/character will not be counted.\n.fn end\n.sp\nFormatting of a line with characters from a following line can be\nprevented by\ncreating what is called a \"break\".  A break\nis caused explicitly by use of leading blanks (one is sufficient), a\ntab, or\nthe break command word (.br).  Implicit breaks are caused by any of\nthe commands\nthat cause normal line spacing to be interrupted.  Breaking\ncapabilities for each\ncommand word can be found in its complete description in the\nremainder of this manual.\n.sp\nInput lines containing backspaces may be canonicalized or\nuncanonicalized.\nThis means that if \"<\" represents the backspace character then\n\"ABC<<<___\" and \"A<_B<_C<_\" will produce identical results.\nThe correct number of character positions will be typed per line\nif online and will overprint properly if offline.\nThe UNDERSCORE control words, \".UC\", \".UD\", \".US\", may alleviate some\nproblems encountered when editing backspaces with a\ntext editor.\n.sp\nAn input line may contain an Escape Character (X'27')\nfollowed by a single Function Character.\nThese two characters do not count toward filling the length\nof the line.\nIf \"!\" represents the Escape Character, \"!D\" on your terminal\nmoves the paper down one half line and \"!U\" moves the paper\nup one half line, then \"X!D2!U\" could be used to create\nthe symbols for \"X squared\".\nFor offline output to a printer, the Escape Character and the\nfollowing Function Character are lost.\n.sp\nEscape Characters must be entered in canonicalized order.\nIf \"<\" represents a backspace, then to enter \"A\" sub \"i+1\"\nto the \"n-2\" power  requires:\n     A!Ui<!D!Dn!U!U+<!D!D-!U!U1<!D!D2!U\n.br\nThe following, which may be more natural, is not\ncanonicalized and will not work:\n     A!Ui+1<<<!D!Dn-2!U\n.in\n.pa\n.cm End of CRINPUT\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "CS": {"ttr": 1810, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00Q\\x00Q\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 81, "newlines": 81, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "CW": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00 \\x00 \\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE CW\n.SUBT Purpose\nThe CONTROL WORD SEPARATOR control word defines the delimiter\nbetween control commands so that multiple controls and text\nmay be entered on one line.\n.SUBT Format\n|\n|  .CW         <;|character>\n|\n.SUBT Usage\nAll subsequent input lines with a control word at the start\nare examined for the CONTROL WORD SEPARATOR.  If found then\nthe single input line is logically divided into multiple\ninput lines.  The subsequent line will be taken following\nthe separator up to the next separator or to end of line.\n.SUBT Defaults\nThis command will not create a break when encountered.  The\ninitial default CONTROL WORD SEPARATOR character is the\nsemi-colon \";\".  Any character may be used as an argument.  If\nthe argument is omitted then more than one control word may\nnot be entered per line and control words and text may not\nbe entered on one line.\n.SUBT Examples\n.of 4\n(1) .sp 2;.un 4;(a) this is example number one ...\n.sp\n.of 4\n(2) .cw #;.he 'left;'center;'right;'#.cw ;#.sp;.cm\n     The above example makes the CW \"#\", defines a heading\nusing a semi-colon, redefines the CW to be \";\" and then uses\nit.\n.cm End of CW\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "DA": {"ttr": 2051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE DA\n.SUBT Purpose\nThe DARK OUTPUT control word specifies the number of times that\nOffline Output is to be overstruck.\n.SUBT Format\n|\n|  .DA          <1\b_|n|+n|-n|YES|NO>\n|\n.SUBT Usage\nThe .DA control word defines the number of times that all\nOffline Output lines are to be overstruck.\nIn the case of Footnotes and Keeps, they are overstruck according\nto the DARK value when these are defined, not when they are\nprinted.\nOnly entire lines can be overstruck, not parts of lines.\nSee .OC for partial line overstriking.\nThe control word has no effect for Online Output, with or\nwithout the SCREEN option.\n.sp\nA \"NO\" operand is the same as 1; the \"YES\" operand is the same\nas 2.\n.SUBT Defaults\nThis control word does not create a break.\nUnless otherwise specified n = 1 is in effect.\nIf the operand is omitted then the value of the DArk= parm\nwill be taken, normally one.\n.cm End of DA\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "DC": {"ttr": 2053, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE DC\n.SUBT Purpose\nThe DON'T COUNT control word causes all output produced directly by\nthe immediately following text line\nto not be counted for purposes of page length control.\n.SUBT Format\n|\n|  .DC\n|\n.SUBT Usage\nIf output is off-line, all output produced by the next text line will\nbe overprinted on the last printed line.\n.sp 1\nIf output is on-line, output produced by the next text line will be\ntyped normally, but will not be counted\ntowards the page length.\n.sp 1\nThe .DC control word is primarily useful to allow the user to store\nequations and such in his SCRIPT file when\ntwo or more typeballs are necessary during output.\n.SUBT Defaults\nThis command will cause a break before processing\nthe immediately following text line and it will be in effect only for\nthat line.\nSubsequent lines will be processed normally.\n.SUBT Notes\n.of 4\n(1) Only text lines which immediately follow a .DC are not counted.\n.cm End of DC\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DH": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00N\\x00N\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 78, "newlines": 78, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE DH\n.SUBT Purpose\nThe DEFINE HEADING control word defines the formatting conditions for\nthe various heading levels in the Table of Contents.\n.SUBT Format\n|              <SET m> n <<SKBF n> <SPAF n>\n|                         <TCIN n> <TCOF n>\n|  .DH                    <BR|NBR> <OJ|NOJ>\n|                         <PA|NPA> <TC|NTC>\n|                         <TO|NTO> <TS|NTS>\n|                         <UP|NUP> <US|NUS>>\n.SUBT Usage\nThe .DH control word is used to respecify the formatting\noptions for Head Level (.HL) operands.\nThe \"SET\" option may specify a Table of Contents number \"m\"\nfrom 0 to 9.\nThus up to ten concurrent Tables of Contents may be\naccumulated for printing later with the Table of Contents (.TC)\ncontrol word.\n.sp\nThe head level to be modified is specified with \"n\" and may range\nfrom 0 to nine.\nSee the Head Level control word (.HL) for the initial setting\nof all options.\n.sp\n.of 8\nSKBF n  \"n\" is the number of skips (.SK) to be printed before\nthe Head Level in the formatted text.\n.of 8\nSPAF n  \"n\" is the number of spaces (.SP) to be printed after\nthe Head Level in the formatted text.\n.of 8\nTCIN n  \"n\" is the number of columns to indent (.IN) a\ntitle in the Table of Contents.\n.of 8\nTCOF n  \"n\" is the number of columns to offset (.OF) a\nmultiple line title in the Table of Contents.\n.sp;.of 8\nBR      do a break after the Head Level in formatted text.\n.of 8\nNBR     don't do a break.\n.sp;.of 8\nOJ      Out Justify (.OJ) the Head Level in formatted text.\n.of 8\nNOJ     don't Out Justify.\n.sp;.of 8\nPA      do a page eject before the Head Level if not already\nat the top of a page.\n.of 8\nNPA     don't do a page eject.\n.sp;.of 8\nTC      include this Head Level entry in the Table of Contents.\n.of 8\nNTC     don't include in the Table of Contents.\n.sp;.of 8\nTO      include this Head Level entry\n.us only\nin the Table of Contents.\n.sp;.of 8\nNTO     include this Head Level entry in the text.\n.sp;.of 8\nTS      space one line (.SP) before a Head Level entry in\nthe Table of Contents.\n.of 8\nNTS     don't space before in Table of Contents.\n.sp;.of 8\nUP      convert the Head Level in formatted text to\nupper case.\n.of 8\nNUP     don't convert the Head Level to upper case.\n.sp;.of 8\nUS      Underscore (.US) the Head Level in formatted text.\n.of 8\nNUS     don't underscore the Head Level.\n.sp\n.SUBT Defaults\nThis control word does not create a break.\n.cm End of DH\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "DM": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x001\\x001\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "DO": {"ttr": 2060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00#\\x00#\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "DS": {"ttr": 2062, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE DS\n.SUBT Purpose\nThe DOUBLE SPACE control word causes a line to be skipped between\neach output line.\n.SUBT Format\n|\n|  .DS\n|\n.SUBT Usage\nSubsequent output lines will be double spaced.\n.SUBT Defaults\nThis command is not in effect unless encountered.\nIt does cause a break to occur when specified.\n.SUBT Notes\n.of 4\n(1) Single spacing is the normal mode.\n.sp 1\n.of 4\n(2) .SP control words encountered while .DS is in effect will produce\n_\bt_\bw_\bi_\bc_\be the normal number of blank lines.\n.sp 1\n.of 4\n(3) Footnote lines are never double spaced.\n.sp 1\n.of 4\n(4) The operand to the .CP control word is _\bn_\bo_\bt doubled when .DS\nis in effect.\n.cm End of DS\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "EB": {"ttr": 2064, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00*\\x00*\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "EF": {"ttr": 2066, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x17\\x00\\x17\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE EF\n.SUBT Purpose\nThe END OF FILE control word causes immediate termination\nof the current input file and resumption of the next\nhigher level file if any, or termination of processing if none.\n.SUBT Format\n|\n|  .EF           <Y\b_E\b_S\b_|NO>\n|\n.SUBT Usage\nWhen SCRIPT encounters an END OF FILE control word in a file\nthat is being imbedded, the imbedded file is terminated and\nthe higher level file is resumed.\nSimilarly, a Remote containing this control word will be terminated,\nreturning to the next higher level file.\nWhen SCRIPT encounters an\nEND OF FILE control word in a file that is not imbedded, the\noutput advances to the top of the next page and prints any\nstacked footnotes or text created by \".CP or .FK begin/end\"\nsequences before termination of all processing.\n.SUBT Defaults\nThis command does not create a break.\n.cm End of EF\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "EL": {"ttr": 2068, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00C\\x00C\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 67, "newlines": 67, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE EL\n.SUBT Purpose\nThe ELSE control word causes an input line to be conditionally\nincluded depending on the truth value of a previous IF control word.\n.SUBT Format\n|\n|  .EL            line\n|\n.SUBT Usage\nThe line which begins one blank after the .EL control word is included\nfor processing only if the preceeding .IF statement had a \"false\"\nvalue.\n.sp\nThe line may include any control word except another\nThen (.TH) or an Else (.EL).\nThe object line may be another .IF and these may be nested up to ten\nlevels.  The object may be an Imbed (.IM) or Signal (.SI), in which\ncase the current IF status and its nesting level will be saved and\nlater restored when the current file nest level is resumed.\nWhen using a nested IF, the Else is always matched to the innermost\nunpaired Then.\nIt may thus be necessary to enter an Else with no object\nline to define the required branching structure.\n.sp\nThis control word may be used only immediately following\na .IF, a .TH or a .TH .DO/.EN group.\n.SUBT Defaults\nThe \".el\" control word does not act as a break itself.\nHowever, control words within the line may create a break if\nthe preceeding .IF is \"false\" and the interpreted line creates\na break.\nIf \"line\" is omitted then the object of the .EL has no effect.\n.cp 12\n.SUBT Examples\n.tr \u00ac .\n.nf\n.of 4\n(1) Have a\n\u00acif &retcode = 0;\u00acth great\n\u00acel \u00acif &retcode = 4;\u00acth good\n\u00acel \u00acif &retcode = 8\n\u00acth bad\n\u00acel \u00acif &retcode = 12;\u00acth terrible;\u00acel *!?\nday.\n.sp\n.fo\nThis sequence will format a sentence describing the kind of day\nthat is to be hoped for.\n.sp\n.cp begin\n.nf\n.of 4\n(2) \u00acur \u00acif &type = FINAL;\u00acth \u00acdo begin\n\u00actt //SCRIPT//\n\u00acbt //-%-//\n\u00acdo end\n\u00acel \u00acdo begin\n\u00actt //SCRIPT DRAFT//\n\u00acbt //-%-/Please Return/\n\u00acdo end\n.sp\n.fo\nThis sequence will set page titles depending on the value of variable\n&type.\n.cp end\n.tr\n.cm End of EL\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "EM": {"ttr": 2070, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00*\\x00*\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "EN": {"ttr": 2072, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "EP": {"ttr": 2074, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x17\\x00\\x17\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE EP\n.SUBT Purpose\nThe EVEN PAGE EJECT control word causes output to continue on an\neven numbered page.\n.SUBT Format\n|\n|  .EP\n|\n.SUBT Usage\nThe .EP control word causes one or two page ejects so that output\ncontinues on an even numbered page.\n.SUBT Defaults\nThis control word creates a break.\n.SUBT Notes\n.of 4\n(1) If empty-page suppression is on (.EM NO), the page number will be\nincremented to the next even number and output\nwill continue on the next physical page.\n.sp 1\n.of 4\n(2) The EVEN PAGE EJECT control has the same effect as the\nEVEN PAGE (.PV) control.\n.cm End of EP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ER": {"ttr": 2306, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x005\\x005\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE ER\n.SUBT Purpose\nThe ERROR control word sets a program return code for\nSCRIPT and/or displays a message on the Error file.\n.SUBT Format\n|\n|  .ER           <n|*>  <line>\n|\n.SUBT Usage\nThe optional first operand of ERROR may be used to set the\nreturn code passed back to the caller of SCRIPT.\nIf the first operand is a numeric expression then the\nmaximum of that value and the current return code is set.\nIf the first operand is omitted or '*' then no return code\nis set.\n.sp\nOne blank following the first operand is a line of information\nthat is displayed as a SCRIPT error message\non the Error file (SYSTERM),\nregardless of ONLINE or OFFLINE, or the current Pass number.\nIf no string follows the return code operand then no output is\ndone.\n.sp\nThe system variable symbol &SYSRETCODE is provided to examine\nthe current return code.\n.SUBT Defaults\nThis command word will not create a break.  Zero is the default\nreturn code value if none is specified.\n.sp\nAn error return code of sixteen or higher is considered\nto be a Terminal Error and will terminate all input\nand output processing.\n.SUBT Examples\n.of 4\n(1) .er 4 This is a comment about an error.\n.br\nThis example sets the program return code to \"four\" and\nprints a warning message on SYSTERM.\n.sp\n.cp 4\n.of 4\n(2) .er 16\n.br\nThis example sets the return code to \"sixteen\" and\nprints nothing.\n.sp\n.cp 4\n.of 4\n(3) .er * HI!\n.br\nThis example leaves the return code unchanged and prints\na \"HI!\" message on SYSTERM.\n.cm End of ER\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "ERRORS": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x01\\xf5\\x01\\xf5\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 501, "newlines": 501, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "ET": {"ttr": 2317, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00)\\x00)\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "EZ": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x12\\x00\\x12\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE EZ\n.SUBT Purpose\nThe EasySCRIPT control word is used to initiate and provide\ninput to the EasySCRIPT macro processor.\n.SUBT Format\n|                <ON <lastDewey>>\n|  .EZ           <OFF           >\n|                <tagval line   >\n.SUBT Usage\nFor now, refer to pages 60-65 and 92-93 of the\nIBM SCRIPT/370 Version 3 User's Guide (SH20-1857) for\na description of the language and facilities.\n.SUBT Notes\n.of 4\n(1) EasySCRIPT is currently in development and test.\nIt is not now distributed.\n.in\n.cm End of EZ\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FB": {"ttr": 2563, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x001\\x001\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "FCLIST": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x95\\x00\\x95\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 149, "newlines": 149, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE FCLIST\n.rm CWADD save\n.if '&UPDATE' eq '' or '&UPDATE' lt '&DATE' .th .do begin\n.se nmax=&nmax+1\n.se c(&nmax)=\"&1\"\n.if \"&CWNAME\" ne '' .th .se cc(&nmax)=\"&CWNAME\"\n.se d(&nmax)=\"&2.\"\n.se i=2\n.su off\n.ur .pe &0-&i;.se i=&i+1;.se d(&nmax)=\"&&d(&nmax) &&&i..\"\n.su on\n.se u(&nmax)=&DATE\n.do end\n.se DATE=;.se CWNAME=''\n.rm\n.se nmax=0;.su on\n.CWADD '  ' NULL DATE=770921 CWNAME=NL\n.CWADD AD ADJUST DATE=760910\n.CWADD AP APPEND DATE=770610\n.if 'ALL' eq '&type';.CWADD AR ARABIC DATE=760101\n.CWADD BC BALANCE COLUMNS DATE=770222\n.CWADD BM BOTTOM MARGIN DATE=770221\n.CWADD BR BREAK DATE=780109\n.CWADD BS BACKSPACE DATE=780109\n.CWADD BT BOTTOM TITLE DATE=760101\n.CWADD BX BOX DATE=770112\n.CWADD CB COLUMN BEGIN DATE=770222\n.CWADD CC CONDITIONAL COLUMN BEGIN DATE=770222\n.CWADD CD COLUMN DEFINITION DATE=770222\n.CWADD CE CENTER DATE=761129\n.CWADD CL COLUMN LENGTH DATE=770223\n.CWADD CM COMMENT DATE=761217\n.CWADD CO CONCATENATE DATE=760101\n.CWADD CP CONDITIONAL PAGE DATE=760101\n.CWADD CR CONTROL WORD REPLACEMENT DATE=760101\n.CWADD CS CONDITIONAL SECTION DATE=760101\n.CWADD CW CONTROL WORD SEPARATOR DATE=760101\n.CWADD DA DARK OUTPUT DATE=760101\n.if 'ALL' eq '&type';.CWADD DC DON'T COUNT DATE=760101\n.CWADD DH DEFINE HEADING DATE=770915\n.CWADD DM DEFINE MACRO DATE=770816\n.CWADD DO DO DATE=760401\n.if 'ALL' eq '&type';.CWADD DS DOUBLE SPACE DATE=760101\n.CWADD EB EVEN PAGE BOTTOM TITLE DATE=760101\n.CWADD EF END OF FILE DATE=760101\n.CWADD EL ELSE CONDITION DATE=760101\n.CWADD EM EMPTY PAGE DATE=760101\n.if 'ALL' eq '&type';.CWADD EN END DO GROUP DATE=760401\n.if 'ALL' eq '&type';.CWADD EP EVEN PAGE EJECT DATE=760101\n.CWADD ER ERROR DATE=770610\n.CWADD ET EVEN PAGE TOP TITLE DATE=760101\n.CWADD EZ EasySCRIPT DATE=780109\n.CWADD FB FLOATING BLOCK DATE=760913\n.if 'ALL' eq '&type';.CWADD FD ODD FOOTING DATE=760101\n.if 'ALL' eq '&type';.CWADD FE FOOTING DATE=760101\n.CWADD FK FLOATING KEEP DATE=770413\n.CWADD FM FOOTING MARGIN DATE=760101\n.CWADD FN FOOTNOTE DATE=780109\n.CWADD FO FORMAT DATE=770418\n.CWADD FS FOOTING SPACE DATE=760101\n.if 'ALL' eq '&type';.CWADD FV EVEN FOOTING DATE=760101\n.CWADD GO GOTO DATE=760101\n.if 'ALL' eq '&type';.CWADD HD ODD HEADING DATE=760101\n.if 'ALL' eq '&type';.CWADD HE HEADING DATE=760101\n.CWADD HI HANGING INDENT DATE=760723\n.CWADD HL HEADING LEVEL DATE=770802\n.CWADD HM HEADING MARGIN DATE=760101\n.CWADD HN HEADNOTE DATE=770610\n.CWADD HS HEADING SPACE DATE=760101\n.if 'ALL' eq '&type';.CWADD HV EVEN HEADING DATE=760101\n.CWADD HW HYPHENATE WORD DATE=761203\n.CWADD HY HYPHENATION DATE=770704\n.CWADD H0 HEAD LEVEL n DATE=770802\n.CWADD IF CONDITIONAL DATE=761202\n.CWADD IL INDENT LINE DATE=761203\n.CWADD IM IMBED DATE=770610\n.CWADD IN INDENT DATE=760101\n.CWADD IX INDEX DATE=770121\n.CWADD JU JUSTIFY DATE=770418\n.CWADD LA LEFT ADJUST DATE=761202\n.CWADD LB LABEL DATE=771019\n.CWADD LE LEADING BLANK LINE DATE=771208\n.CWADD LI LITERAL DATE=761202\n.CWADD LL LINE LENGTH DATE=760101\n.CWADD LN IMMEDIATE LINE DATE=760101\n.CWADD LS LINE SPACING DATE=770610\n.CWADD MC MULTIPLE COLUMN DATE=770223\n.CWADD MS MACRO SUBSTITUTION DATE=770716\n.if 'ALL' eq '&type';.CWADD NC NO CONCATENTATE DATE=760101\n.if 'ALL' eq '&type';.CWADD NF NO FORMAT DATE=760101\n.if 'ALL' eq '&type';.CWADD NJ NO JUSTIFY DATE=760101\n.CWADD OB ODD PAGE BOTTOM TITLE DATE=760101\n.if 'ALL' eq '&type';.CWADD OC OVERLAY CHARACTER DATE=760101\n.CWADD OF OFFSET DATE=760723\n.CWADD OJ OUT JUSTIFY DATE=770802\n.CWADD OO OUTPUT OVERLAY DATE=760101\n.if 'ALL' eq '&type';.CWADD OP ODD PAGE EJECT DATE=760101\n.CWADD OT ODD PAGE TOP TITLE DATE=760101\n.CWADD OV OVERLAY DATE=760101\n.CWADD PA PAGE EJECT DATE=760101\n.if 'ALL' eq '&type';.CWADD PD ODD PAGE FORCE DATE=760101\n.CWADD PE PERFORM DATE=760101\n.CWADD PI PARAGRAPH INDENT DATE=770330\n.CWADD PL PAGE LENGTH DATE=760101\n.CWADD PN PAGE NUMBERING DATE=761217\n.CWADD PP PARAGRAPH START DATE=771203\n.if 'ALL' eq '&type';.CWADD PR PRINT DATE=760101\n.CWADD PS PAGE NUMBER SYMBOL DATE=760101\n.CWADD PT PUT TABLE OF CONTENTS DATE=770816\n.CWADD PU PUT WORKFILE DATE=761217\n.if 'ALL' eq '&type';.CWADD PV EVEN PAGE FORCE DATE=760101\n.CWADD QQ QUIT QUICKLY DATE=761206\n.CWADD QU QUIT DATE=770712\n.CWADD RA RIGHT ADJUST DATE=761202\n.CWADD RC REVISION CODE DATE=771031\n.CWADD RD READ TERMINAL DATE=760101\n.CWADD RE RESTORE STATUS DATE=760101\n.CWADD RM REMOTE DATE=760101\n.if 'ALL' eq '&type';.CWADD RO ROMAN DATE=760101\n.CWADD RV READ VARIABLE DATE=761206\n.CWADD SA SAVE STATUS DATE=770228\n.CWADD SC SINGLE COLUMN DATE=770223\n.CWADD SE SET REFERENCE DATE=760910\n.CWADD SI SIGNAL REMOTE DATE=770610\n.CWADD SK SKIP DATE=771206\n.CWADD SP SPACE DATE=771206\n.CWADD SR SET REFERENCE DATE=771230\n.if 'ALL' eq '&type';.CWADD SS SINGLE SPACE DATE=760101\n.CWADD SU SUBSTITUTE SYMBOL DATE=780105\n.CWADD SY SYSTEM COMMAND DATE=770124\n.CWADD TB TABULATION SET DATE=770805\n.CWADD TC TABLE OF CONTENTS DATE=770816\n.CWADD TE TERMINAL INPUT DATE=760101\n.CWADD TH THEN CONDITION DATE=760101\n.CWADD TI TRANSLATE ON INPUT DATE=760101\n.CWADD TM TOP MARGIN DATE=770221\n.CWADD TR TRANSLATE DATE=760101\n.CWADD TT TOP TITLE DATE=761202\n.CWADD TY TYPE ON TERMINAL DATE=760101\n.CWADD UC UNDERSCORE CAPITALIZE DATE=761210\n.CWADD UD UNDERSCORE DEFINITION DATE=761210\n.if 'ALL' eq '&type';.CWADD UL UNDERLINE DATE=760101\n.CWADD UN UNDENT DATE=761202\n.CWADD UP UPPERCASE DATE=761210\n.CWADD UR USE REFERENCE DATE=770421\n.CWADD US UNDERSCORE DATE=761210\n.CWADD WD WIDOW DATE=760803\n.rm CWADD delete;.su off\n.cm End of FCLIST\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "FD": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\"\\x00\"\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE FD\n.SUBT Purpose\nThe ODD FOOTING control word specifies three items of title\ninformation to be printed at the bottom of\nodd numbered pages.\n.SUBT Format\n|                    S1\n|  .FD        <1\b_|n>\n|                    'S1'S2'S3'\n.SUBT\n.sp 1\n.fo\n.in +5\nwhere optional \"n\", from 1 to the value of the HSFSOVER option,\ngives the odd footing line number\nand S1, S2 and S3 are character strings _\bn_\bo_\bt containing\nquotation marks.\nAny of the fields may be omitted, but the quotation marks must be\nincluded to\nindicate missing fields, e.g., 'S1''S3'.\n.SUBT Usage\nThe .FD control word is used in a way similar to the .HE control\nword.  The title items defined with .FD\nwill be printed in a footing line near the bottom of odd numbered\npages.  The number of footing lines printed on odd pages is\nset by .FS (Footing Space).\n.SUBT Defaults\nA break will not be created when this command is encountered.  Unless\notherwise specified \".fd ''''\" will be in effect.\n.SUBT Notes\n.of 4\n(1) The quotation marks are used to delimit the character strings,\n_\bN_\bO_\bT to surround them.\n.cm End of FD\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "FE": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00'\\x00'\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 39, "newlines": 39, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE FE\n.SUBT Purpose\nThe FOOTING control word specifies three items of title information\nto be printed at the bottom of\neven and odd numbered pages.\n.SUBT Format\n|                       S1\n|  .FE           <1\b_|n>\n|                       'S1'S2'S3'\n.SUBT\n.sp 1\n.fo\n.in +5\nWhere optional \"n\", from 1 to the value of the HSFSOVER option,\ngives the footing line number\nand S1, S2 and S3 are character strings _\bn_\bo_\bt containing\nquotation marks.\nAny of the fields may be omitted, but the quotation marks must be\nincluded to\nindicate missing fields, e.g., 'S1''S3'.\n.SUBT Usage\nThe .FE control word is used in a way similar to the .HE control\nword.  The title items defined with .FE\nwill be printed in a footing line near the bottom of even and\nodd numbered pages.  The number of footing lines printed is set\nby .FS (Footing Space).\n.SUBT Defaults\nA break will not be created when this command word is encountered.\nUnless otherwise specified\n\".fe ''''\" will be in effect.\n.SUBT Notes\n.of 4\n(1) The quotation marks are used to delimit the character strings,\n_\bN_\bO_\bT to surround them.\n.sp 1\n.of 4\n(2) See the .HE (Heading) control word for an explanation\nof how the Heading and Footing tables overlap.\n.cm End of FE\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "FK": {"ttr": 2573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x005\\x005\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "FM": {"ttr": 2575, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00&\\x00&\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "FN": {"ttr": 2577, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x8b\\x00\\x8b\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 139, "newlines": 139, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "FO": {"ttr": 2580, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "FS": {"ttr": 2818, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00*\\x00*\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "FV": {"ttr": 2820, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00#\\x00#\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE FV\n.SUBT Purpose\nThe EVEN FOOTING control word specifies three items of title\ninformation to be printed at the bottom of\neven numbered pages.\n.SUBT Format\n|                       S1\n|  .FV           <1\b_|n>\n|                       'S1'S2'S3'\n.SUBT\n.sp 1\n.fo\n.in +5\nwhere optional \"n\", from 1 to the value of the HSFSOVER option,\ngives the even heading line number\nand S1, S2 and S3 are character strings _\bn_\bo_\bt\ncontaining quotation marks.  Any of the\nfields may be omitted, but the quotation marks\nmust be included to\nindicate missing fields, e.g., 'S1''S3'.\n.SUBT Usage\nThe .FV control word is used in a way similar to the .HE control\nword.  The title items defined with .FV\nwill be printed in a footing line near the bottom of even numbered\npages.  The number of footing lines printed on even pages is set\nby .FS (Footing Space).\n.SUBT Defaults\nA break will not be created when this command\nword is encountered and until\nthen \".fv ''''\" will be in effect.\n.SUBT Notes\n.of 4\n(1) The quotation marks are used to delimit the character strings,\n_\bN_\bO_\bT to surround them.\n.cm End of FV\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "GO": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00+\\x00+\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE GO\n.SUBT Purpose\nThe GOTO control word specifies that the next input record is to\nbe selected out of normal sequence.\n.SUBT Format\n|\n|  .GO           <ident|n|+n|-n>\n|\n.SUBT Usage\nThe .GO control word defines an identifier\nthat must match the identifier of a LABEL (.LB) control word\nwithin the current input file.  The identifier is converted\nto upper case prior to use and may range from one to eight characters\nin length.\nAlternatively an absolute record number or signed relative\nrecord number may be specified.\nIn either case input processing will continue at the specified\nrecord.\n.sp\nThe transfer of control may be forward or backward within the\ninput file if on a DASD device (Disk) but may only be forward\nif on a Unit Record device (Card Reader).\n.SUBT Defaults\nThis command does not create a break.\n.SUBT Examples\n.tr \u00ac .\n.of 4\n(1) \u00acur \u00acif '&1' = 'DONE';\u00acth \u00acgo DONE\n.br\nNot finished yet.\n.br\n\u00aclb DONE The End.\n.sp\n.of 4\n(2) \u00acse i=0;\u00aclb LOOP \u00acse i=&i+1\n.br\n\u00acur &i\n.br\n\u00acur \u00acif &i lt 50;\u00acgo LOOP\n.br\nEnd of Block of fifty numbers.\n.tr\n.cm End of GO\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HD": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x008\\x008\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 56, "newlines": 56, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE HD\n.SUBT Purpose\nThe ODD HEADING control word is used to define three headings to be\nprinted at the top of odd numbered pages.\n.SUBT Format\n|                       S1\n|  .HD           <1\b_|n>\n|                       'S1'S2'S3'\n.SUBT\n.sp 1\n.fo\n.in +5\nwhere optinal \"n\", from 1 to the value of the HSFSOVER option,\ngives the odd heading line number\nand S1, S2 and S3 are character strings not containing\nquotation marks.  Any of the fields may be omitted, but the quotation\nmarks must be included\nto indicate missing fields, e.g., 'S1''S3'.\n.SUBT Usage\nThe .HD control word is used in the same way as the .HE\ncontrol word.  The headings defined with .HD will appear\nonly on\n.FNADD\n.ur .ur .ur odd numbered&LP.&RP pages, however.\n.fn begin\n.in\n.of 4\n.ur (&NFN.) Odd numbered pages are those which have the binding to\nthe left of the left-hand margin in a book.\n.fn end\nThe number of heading lines printed on odd pages is set by .HS\n(Heading Space).\n.SUBT Defaults\nThis command does not create a break.  Unless otherwise specified\n\".hd '''PAGE  %'\" will be in effect except on page one of output\nwhich will have a blank heading.\n.SUBT Notes\n.of 4\n(1) Appearance of .HD does not affect the headings defined for\neven numbered pages by .HE or .HV.\n.of 4\n(2) .HD may be used in conjuction with .HV (even heading) to produce\noutput suitable for double-side printing.\n.of 4\n(3) The quotation marks are used to delimit the character strings,\n_\bN_\bO_\bT to surround them.\n.cp begin\n.SUBT Examples\n .hd 'Department of Alchemy''ATN-05-3-70-%'\n .hv 'ATN-05-3-70-%''Department of Alchemy'\n.sp 1\nCould be used to obtain output in which the number of the technical\npaper is always in the upper outside corner\nand the department name is always in the upper inside corner.\n.cp end\n.cm End of HD\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "HE": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00_\\x00_\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 95, "newlines": 95, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "HEADER": {"ttr": 2829, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x14\\x00\\x14\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE Header\n.tt ////\n.bt ////\nApplications Program Series\n.sp 10\n.ce yes\nWaterloo SCRIPT REFERENCE MANUAL\n.sp 10\nUniversity of Waterloo\n.sp\nWaterloo, Ontario, Canada\n.sp 2\nJanuary 13, 11378\n.ur .if '&UPDATE' ne '';.th .do begin\n.sp 4\n.ur -- Updates only past &UPDATE --\n.do end\n.ce no\n.pa 1\n.cm End of Header\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HI": {"ttr": 2831, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00D\\x00D\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 68, "newlines": 68, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE HI\n.SUBT Purpose\nThe HANGING INDENT control word specifies an indent of additional\nspaces in each line of a paragraph after the first.\n.SUBT Format\n|\n|  .HI          <0\b_|n|+n|-n|YES|NO>\n|\n.SUBT Usage\nThe \".HI\" control word causes \"n\" spaces to be inserted at the\nbeginning of each line of a \"paragraph\", except the first.\nSee the PARAGRAPH INDENT control word (.PI) for control\nof the first line.\nThe operand may be signed, in which case the current\nvalue is incremented or decremented appropriately.\nA \"YES\" argument will set the hanging indent value to five.\nA \"NO\" argument is equivalent to a zero operand and\nterminates the hanging indent function.\nThe resulting value of hanging indent may never be negative or\nexceed the current line length \".LL\" minus one.\n.sp\nA hanging indent takes effect following a paragraph indent.\nSee the PARAGRAPH INDENT control word (.PI) for rules that\ndetermine the start of a new \"paragraph\".\n.sp\nNote that the Hanging Indent function is in addition to\nthe current INDENT (.IN) value.\n.sp\nThe Hanging Indent function may be overridden by use of the\nOFFSET control word (.OF).\nSetting a Hanging Indent value will clear any OFFSET currently\nin use.\n.SUBT Defaults\nThis control word creates a break.\nAn initial value of zero is assumed, which is also assumed if\nthe operand is omitted.\n.SUBT Examples\n.fo no\n(1) .in +5\n    .hi 5\n    (a)  This is point number one that will demonstrate\n    the function of the Hanging Indent control word.\n    .sp\n    (b)  After every break in the text, the letter eye\n    catchers are reset to the current Indent value.\n    .sp\n    (c)  But the second and subsequent lines of each point\n    are indented further from the left margin as if an\n    OFFSET control word had preceeded each point.\n    .sp\n    .hi\n.fo yes\n.sp\nProduces:\n.sp\n.in +5\n.hi 5\n(a)  This is point number one that will demonstrate\nthe function of the Hanging Indent control word.\n.sp\n(b)  After every break in the text, the letter eye\ncatchers are reset to the current Indent value.\n.sp\n(c)  But the second and subsequent lines of each point\nare indented further from the left margin as if an\nOFFSET control word had preceeded each point.\n.hi\n.cm End of HI\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "HL": {"ttr": 2833, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x002\\x002\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 50, "newlines": 50, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE HL\n.SUBT Purpose\nThe HEADING LEVEL control word adds a Heading to the text\nand/or to the current Table of Contents.\n.SUBT Format\n|\n|  .HL           <0\b_|n> line\n|\n.SUBT Usage\nThe .HL control word adds a \"line\" heading to the formatted\noutput and/or to the current Table of Contents.\nThe first parameter \"n\" defines what level of heading it is\nand may range from 0 to 9.\n.sp\nThe meaning for the options may be found in the Define Heading\n(.DH) control word.\n.sp\n.in +5\n.ur .bx &sysin+1 +7 +4 +4 +4 +4 +4 +4 +4 +4 +4 +4\n  .HL    0   1   2   3   4   5   6   7   8   9\n.bx\n.bx\n  SKBF   0   0   3   3   3   1   1   0   0   0\n.bx\n  SPAF   0   5   2   2   2   0   0   0   0   0\n.bx\n  TCIN   0   0   0   2   4   6   8   0   0   0\n.bx\n  TCOF   1   1   1   1   1   1   1   0   0   0\n.bx\n  BR         Y   Y   Y   Y\n.bx\n  OJ         Y\n.bx\n  PA         Y\n.bx\n  TC     Y   Y   Y   Y\n.bx\n  TO     Y\n.bx\n  TS         Y\n.bx\n  UP         Y   Y   Y       Y\n.bx\n  US         Y   Y       Y   Y   Y\n.bx off\n.in -5\n.SUBT Defaults\nThis control word causes a break.\n.cm End of HL\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "HM": {"ttr": 2835, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\"\\x00\"\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "HN": {"ttr": 2837, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x007\\x007\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 55, "newlines": 55, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT Reference HN\n.hn begin\n.su .bx 1 &sysll\n.sp\n.CE;.UC headnote\n.sp\n.bx off\n.sp\n.hn end\n.SUBT Purpose\nThe HEADNOTE control word defines a block of formatted text to\nappear at the top of all pages.\n.SUBT Format\n|                <EVEN|ODD> <BEGIN|END>\n|  .HN\n|                <EVEN|ODD> <PURGE|DUMP>\n.SUBT Usage\nThe .HN control word with \"BEGIN\" and \"END\" operands, defines the\nlimits of text to be formatted and printed following the Top\nMargin area of each subsequent output page.\nThe formatting environment is saved and restore while defining\nthe Headnote.\n.sp\nThe \"PURGE\" operand deletes the current Headnote.\nNote that \"CANCEL\" and \"DELETE\" are equivalent operands to \"PURGE\".\nThe \"DUMP\" operand may be used to print the Headnote at a place other\nthan the top of a page.\n.sp\nAn optional parameter \"EVEN\" may be specified to define\na Headnote that will appear only at the top of even\nnumbered pages.\nIf both a Headnote and an Even Headnote are defined,\nthe EVEN Headnote takes precedence on even pages.\nAn optional parameter \"ODD\" has the corresponding effect\non odd numbered pages.\n.sp\nAny outstanding Conditional or Floating Keep text will print\nfollowing the Headnote.\n.SUBT Defaults\nThis control word does not create a break.\nNo operand is assumed by default.\n.SUBT Examples\n(1) .HN BEGIN\n    .SU .BX 1 &sysll\n    .SP\n    .CE;.UC headnote\n    .SP\n    .BX off\n    .SP\n    .HN END\n.sp\n    This example appears at the top of this page.\n.br\n.hn PURGE\n.cm End of HN\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "HS": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00'\\x00'\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 39, "newlines": 39, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "HV": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00.\\x00.\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE HV\n.SUBT Purpose\nThe EVEN HEADING control word is used to define three headings to be\nprinted at the top of\neven numbered pages.\n.SUBT Format\n|                       S1\n|  .HV           <1\b_|n>\n|                       'S1'S2'S3'\n.SUBT\n.sp 1\n.fo\n.in +5\nwhere the optional \"n\", from 1 to the value of the HSFSOVER option,\ngives the footing line number\nand S1, S2 and S3 are character strings _\bn_\bo_\bt containing\nquotation marks.\nAny of the fields may be omitted, but the quotation marks must be\nincluded to\nindicate missing fields, e.g., 'S1''S3'.\n.SUBT Usage\nThe .HV control word is used in a way similar to .HE. The headings\ndefined by .HV are, however, printed\n.FNADD\n.ur only on even numbered pages&LP..\n.fn begin\n.in\n.ur .of &OFN\n.ur (&NFN.) Even numbered pages are bound on the right margin.\n.fn end\nThe number of heading lines printed on an even page are defined\nby .HS (Heading Space).\n.SUBT Defaults\nThis command does not create a break when encountered.  Unless\notherwise\nspecified \".hv '''PAGE %'\" is will be in effect.\n.SUBT Notes\n.of 4\n(1) Appearance of .HV does not affect headings defined for\nodd numbered pages via .HE or .HD.\n.of 4\n(2) See the description of .HE and .HD for further notes and examples.\n.of 4\n(3) The quotation marks are used to delimit the character strings,\n_\bN_\bO_\bT to surround them.\n.cm End of HV\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "HW": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00%\\x00%\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE HW\n.SUBT Purpose\nThe HYPHENATE WORD control word allows a user to specify text\nwith conditional hyphenation break points.\n.SUBT Format\n|\n|  .HW           text-line\n|\n.SUBT Usage\nThis facility allows a word or line of text to be formatted\nwith conditional hyphens.\nIf the \"text-line\" will fit on the current line then it will be printed\nwithout hyphens.\nOtherwise, SCRIPT will attempt to use one of the indicated hyphens\nas a hyphenation point and the others will not be printed.\nAutomatic Hyphenation may be ON or OFF at the time this control word is\nencountered.\nThe hyphenation exception dictionary is not affected by this.\nThe \"text-line\" operand starts one blank after the control word.\nA compound word such as \"brother-in-law\" must be entered with double\nhyphens, indicating that a single hyphen must remain.\nA hyphen is only considered to be a hyphen if preceeded and followed\nby an alphabetic character.\n.SUBT Defaults\nThis control word does not create a break.\nIf the operand is omitted, no action is performed.\n.SUBT Examples\n.of 4\n(1) .HW I need a pter-o-phyl-lum sca-la-re\n.br\n.li .HW and a le-bis-tes\n.br\n.li .HW re-tic-u-la-tus.\n.sp\n.of 4\n(2) .HW It's for my mo-ther--in--law.\n.cm End of HW\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "HY": {"ttr": 3079, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x87\\x00\\x87\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 135, "newlines": 135, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "H0": {"ttr": 3082, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE H0\n.SUBT Purpose\nThe HEAD LEVEL \"n\" control word adds a Heading to the\ntext and/or to the current Table of Contents.\n.SUBT Format\n|  .H0\n|   to           line\n|  .H9\n.SUBT Usage\nThe .H0 to .H9 control words are short form commands\nfor Heading Level (.HL) with an operand of 0 to 9.\n.sp\nSee Heading Level (.HL) for all the information.\n.SUBT Defaults\nThis control word causes a break.\n.SUBT Examples\n.of 4\n.tr \u00ac .\n(1) .h1 This is a level one heading\n.sp\nis equivalent to:\n.sp\n\u00achl 1 This is a level one heading\n.br\n.tr\n.cm End of H0\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "IF": {"ttr": 3084, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00i\\x00i\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 105, "newlines": 105, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE IF\n.SUBT Purpose\nThe IF control word causes the next input line to be\nprocessed or not depending on the result of a comparison.\n.SUBT Format\n|                S1  \"op\"  S2  <line>\n|  .IF\n|                n1  \"op\"  n2  <line>\n.SUBT\n.fo\n.sp 1\nWhere:\n.sp 1\n.of 5\nS1 and S2 are undelimited character strings, starting with an\nalphabetic and not containing blanks\nor delimited character strings that contain blanks,\n.of 5\nn1 and n2 are decimal integers or expressions containing no\nblanks, and\n.of 5\n\"op\" is one of the following delimited before and after by\nat least one blank:\n.sp 1\n     =    or   EQ   -   equal\n     \u00ac=   or   NE   -   not equal\n     <    or   LT   -   less than\n     >    or   GT   -   greater than\n     <=   or   LE   -   less than or equal\n     >=   or   GE   -   greater than or equal\n.sp\n.of 5\n<line> is a command or text line starting one blank after the\nsecond operand.\n.SUBT Usage\nIf the comparison operation is true, the <line> operand is processed\nnormally.\nIf the <line> operand is omitted then the next logical\ninput line is processed normally.  Otherwise, the next input\nline is skipped (ignored).  The next logical input line is up to the\nfirst following control word separator (see .CW) or the next\nphysical input record, whichever occurs first.\n.sp\nAs an alternative to the logical record immediately following\nbeing used in the \"true\" case and ignored in the \"false\" case\nthe then (.TH) and else (.EL) control words may be used instead.\nIn this second mode the .TH case is executed if the .IF is \"true\"\nand the .EL case if the .IF is \"false\".\nA series of .IFs may be nested up to ten levels by making an .IF\nthe object of a .TH or an .EL.\nSee descriptions of THEN and ELSE for more information.\n.sp 1\nIf the first operand begins with a delimiter, normally \"'\",\nor with an alphabetic, the comparison\nwill be between two character strings using the standard EBCDIC\ncollating sequence.\n.sp 1\nIf the first operand begins with \"+\", \"-\", \"(\" or a numeric,\nthe comparison will be\nbetween two signed decimal integers.\n.sp\nMultiple comparisons may be done in one statement by using one of the\nfollowing operations between comparisons.\nEvaluation of multiple comparisons is done left to right.\n.sp\n         AND or &, OR or |\n.SUBT Defaults\nThis command does not create a break when encountered.\n.SUBT Notes\n.of 4\n(1) If the two character strings to be compared have unequal\nlengths, then the comparison will be done from the start\nof both strings with the minimum length of the two.\nIf that is equal then the shorter string is considered\nto be the smaller.\n.SUBT Examples\n.tr \u00ac .\n.of 4\n(1) \u00acsr a % / 2 * 2 - %\n.br\n\u00acur .if &a = 0\n.br\nWill cause the next input line to be processed if the\ncurrent page number is even.\n.sp 1\n.of 4\n(2) \u00acif 'A' eq A\n.br\nThis will always be a true character comparison.\n.sp 1\n.of 4\n(3) \u00acif 9 EQ +9\n.br\nThis will always be a true numeric comparison.\n.sp\n.cp 5\n.of 4\n(4) \u00acif &number = 'roman' or &number = 'ROMAN'\n.br\n\u00acth \u00acpn roman;\u00acel \u00acpn arabic\n.br\nThis will set subsequent page numbering to roman numerals or\narabic numerals depending on the value of variable \"&number\".\n.tr \u00ac\n.cm End of IF\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "IL": {"ttr": 3087, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00&\\x00&\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE IL\n.SUBT Purpose\nThe INDENT LINE control word forces the next output line to start\na specified number of columns to the right of the current input column.\n.SUBT Format\n|\n|  .IL           <0\b_|n|+n|-n>\n|\n.SUBT Usage\nThe .IL control word causes the next output line to begin \"n\"\nspaces to the right.\nA relative operand alters an immediately preceeding INDENT LINE\nor UNDENT.\n.SUBT Defaults\nThis command will create a break.\nIf the operand is omitted then 0 will be assumed.\n.SUBT Examples\n.of 4\n(1) .in +5;.il +3;This is a first text line of\n.br\ntext on two output lines.\n.sp\nproduces:\n.sp\n.in +9;.il +3;This is a first text line of\ntext on two output lines.\n.in -9\n.sp\n.of 4\n(2) .in +5;.il -3;This is a second test of a line of\n.br\ntest on two output lines.\n.sp\nproduces:\n.sp\n.in +9;.il -3;This is a second text of a line of\ntext on two output lines.\n.cm End of IL\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "IM": {"ttr": 3089, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x9d\\x00\\x9d\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 157, "newlines": 157, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE IM\n.SUBT Purpose\nThe IMBED control word is used to insert the contents of a specified\nfile into the printout of another file.\n.SUBT Format\n|               Filename              <n1><n2>\n|  .IM                       <args> <.        >\n|            Filename(member)         <label>\n.SUBT\n.fo\n.sp\n.in 5\nWhere:\n.sp 1\n.of 8\n<args>  is a list of \"n\" elements separated by blanks or\ndelimited strings separated by blanks such that\nspecial set reference symbol &1 is set to the value of the first,\n&2 to the second, &n to the last and\n&0 to \"n\" even if \"n\" is zero.\n.sp\nAlternatively, a keyword parameter may be set in this list of\narguments if it contains an equal sign, no undelimited blanks\nand is a valid .SR assignment statement.\nIf keyword parameters are used then &0 will be set, even if zero.\n.sp\nThe special reference symbol &* is set to the string of\nall positional and keyword arguments.\n.sp\nWhen the default LOCAL option is specified, all of these\nreference symbols are defined as local variables\nand may only be used within the file being imbedded.\n.sp\n.of 8\n.li 1\n.       is the current control word indicator character, normally\nperiod \".\".\n.sp\n.of 8\nn1      specifies the start of the range of records to be included.\n.sp\n.of 8\nn2      specifies the end of the range of records to be included.\n.sp\n.of 8\nlabel   specifies the label which marks the first record to be\nincluded.\n.SUBT Usage\nThe first argument names a text file whose contents are to be\nincluded in the input.\nEach \"Filename\" that has not been used in a previous IMBED or\nAPPEND\nControl word must have an associated \"DD Statement\"\nor \"TSO FILE ALLOC\" that references a\ndataset containing valid input records.  If the\n\"DD Statement\" is missing SCRIPT will write an error message before\nclosing\nall opened files.\n.sp 1\n\"n1\" gives the item number of the first line of the imbedded file to be\nread, \"n2\" gives the item number of the last\nline to be read.  Instead of \"n1 n2\", the single character \"*\" may\nbe used to indicate that the entire file is\nto be included.  The \"*\" may also be used instead of \"n2\" to indicate\nthat the rest of the file (that is, records \"n1\" through\nthe end) are to be included.\n\"label\" may be specified instead of \"n1\" and \"n2\".\nThis specifies that the first record to be included in\nthe file is a Label (.LB) control word with a matching\n\"label\".\n.sp 1\nThe .IM and .AP control words perform similar functions, but .IM\nallows the contents of a second file to be\ninserted into the printout of an existing file rather than appended\nto it.  Imbedding\nmay be used to insert standard sets of control words at desired\nspots, or to control formatting\nof a long document out of individual files.\n.sp 1\nThe number of levels to which files may be imbedded is limited by the\namount of storage available to contain control blocks and buffers.\nSaid in a different way: a file may imbed another file or itself,\nand then that file may imbed another file\nor itself, and then that file ... this can continue until\nthe stack of imbedded files becomes unreasonable and all available\nstorage contains imbedded file control blocks.\n.SUBT Defaults\nThis command word does not create a break when encountered.\nThe entire file is read in starting at the first line, i.e., * is\nassumed.\n.SUBT Examples\n.of 4\n(a) .IM CHAPTER4\n.br\nThe contents of the file named CHAPTER4 will be included\nin the input.  When the end of CHAPTER4 is reached,\nprocessing of the current file will continue.\n.sp 1\n.of 4\n.cp 3\n(b) .IM SYSCONS . 2 *\n.br\nAll but the first line of SYSCONS will be imbedded.  Note\nthat SYSCONS is the Filename used by \".te\" and\n\".rd\".  This can be used\nto give added flexibility to the SCRIPT file.  For example, suppose\nthere are several \".te's\" within the file\nand it is executed both on-line and off-line.  Because \".te\"\nalways starts reading at the first line the following technique can\nbe used.\n.sp 1\n.cp 10\n.nf\n .sr test 1\n .ty If output is off-line, enter \".sr test 0\",\n .ty otherwise nothing.\n .te\n .ty Enter Date of this manual.\n .ur .if &test = 0\n .th .im control . 2 2\n .el .te\n.sp 1\n.fo\nSYSCONS would reference a dataset if the output was directed\noff-line, and the\nfirst line of that dataset would be \".sr test 0\".\nIf the output is directed to the offline printer a \"DD Statement\"\nsimilar to the one\nbelow would have to be included in the job setup for input of this\nfile.\n.sp 1\n.in 7\n//SYSCONS  DD  DSNAME=pref.PS,DISP=SHR\n.sp\n.in 9\nIf SYSCONS was a member of a partitioned dataset\nthen the following \"DD statement\" would be necessary:\n.br\n.in 7\n//SYSCONS DD DSNAME=pref.PO(SYSCONS),DISP=SHR\n.sp 1\n.in 5\n.of 4\n.cp 4\n(c) .IM FOOTNOTE one 'one plus one' . 12 15\n.br\nLines 12, 13, 14 and 15 of FOOTNOTE will be imbedded with\n&1 set to \"one\", &2 set to \"one plus one\" and &0 set to \"2\".\nThe value of \"&*\" is set to \"one 'one plus one'\".\n.sp\n.of 4\n(d) .IM ERROR 'ERROR MESSAGE TEXT' severity=4\n.br\nFile ERROR will be imbedded with the message text in the &1 variable.\nVariable &0 is set to one and keyword variable &SEVERITY\nis set to the value four.\n.cm End of IM\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "IN": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00/\\x00/\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE IN\n.SUBT Purpose\nThe INDENT control word causes the logical left and/or right\nmargins of the printout to be indented a specified number\nof spaces.\n.SUBT Format\n|\n|  .IN           <0\b_|m|+m|-m|*> <0\b_|n|+n|-n|*>\n|\n.SUBT Usage\nThe .IN control word causes printout to be indented \"m\" spaces from\nthe left margin and \"n\" spaces from the right margin.\nThis indentation remains in\n.FNADD\n.ur effect for all subsequent lines&LP\n.fn begin\n.in\n.ur .of &OFN\n.ur (&NFN.) Including new paragraphs, new footnotes and new pages.  It\nremains in effect even if \".FO NO\" is specified.\n.fn e\nuntil another .IN is encountered.  An operand of the form \"+m\"\nadds the value m to the current indent setting.  An operand\nof the form \"-m\" subtracts the value m from the current indent setting\nor makes it zero if this is negative.\nAn operand of the form \"*\" leaves the current left indent value\nunchanged.\n.sp\nThe second operand specifies a relative change to be applied to\nthe current line length.\n\".IN * 0-5\" will place the right margin for formatted text five\nspaces to the left of the current line length.\nA second operand of the form \"*\" leaves the current right indent\nvalue unchanged.\n.sp\n\".IN 0 0\" or \".IN\" will cancel the indentation and cause printout to\nbe formatted between the original left margin and the current line\nlength.\n.SUBT Defaults\nWhen this control word is encountered it creates a break and until\nthen \"m\" = 0 is in effect.\nWhen the operand is omitted \"m\" = 0 is assumed.\n.SUBT Notes\n.of 4\n(1) The .IN request causes any offset (.OF) setting or undent (.UN)\nsetting to be cleared unless a first operand of \"*\" is specified.\n.cm End of IN\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "IX": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00a\\x00a\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 97, "newlines": 97, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "JU": {"ttr": 3336, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00(\\x00(\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "LA": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x19\\x00\\x19\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE LA\n.SUBT Purpose\nThe LEFT ADJUST control word causes the next input line to be\nleft adjusted in the output line, as if under FORMAT NO.\n.SUBT Format\n|\n|  .LA          <1\b_|n|YES|NO|line>\n|\n.SUBT Usage\nThe \"line\" operand or the next \"n\" lines in the input file,\nincluding any leading blanks,\nwill be left adjusted to the left indent margin in the\noutput lines.\nThe \"line\" operand starts one blank after the control word.\n.SUBT Defaults\nThis command will create a break when encountered.  A numeric\noperand will left adjust the following \"n\" input lines.  A\n\"YES\" operand will left adjust all following input lines until\na \"NO\" operand is encountered or until a CENTER or RIGHT ADJUST\ncontrol.\n.SUBT Notes\n.of 4\n(1) The LEFT ADJUST control word is a way of specifying\nFORMAT NO control without changing the current FORMAT setting.\n.cm End of LA\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "LB": {"ttr": 3340, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x006\\x006\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 54, "newlines": 54, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "LE": {"ttr": 3342, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x003\\x003\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "LI": {"ttr": 3344, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00:\\x00:\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE LI\n.SUBT Purpose\nThe LITERAL control word allows the control word indicator in\nthe first column to be ignored or changed on following lines.\n.SUBT Format\n|\n|  .LI           <1\b_|n|ON|OFF|char|line>\n|\n.SUBT Usage\nThe .LI control word allows subsequent input lines to start with\nthe control indicator and yet be treated as input text when the\nargument is omitted or numeric.  If the single character of the\nargument is non-numeric, then that character replaces the initial\nperiod \".\" character as the control word indicator in column one\nof input lines.\n.sp 1\nThe character asterisk \"*\" may not be used as the control word\ncharacter.\nIf asterisk is used, it means restore the default of period.\n.sp\nIf the \".LI ON\" is specified then it can only be terminated\nby \".LI OFF\" starting in column one of an input record.\n.SUBT Defaults\nThis command word will not create a break.  A check for a control\nword indicator character in the following \"n\" lines is to be\nomitted.  A non-numeric operand changes the control word indicator\ncharacter from a period \".\" to the single character of the operand.\n.SUBT Notes\n.of 4\n(1) The LITERAL control would be used when a text line must begin\nwith a period, such as when entering a number preceded by a\ndecimal point or beginning a line with an ellipsis.  Even then\nit would only be necessary to use LITERAL control if the line\ncould not be reworded, rearranged or altered with a leading blank.\n.sp\n.cp 5\n.of 4\n(2) A second control word indicator character may be set that\nhas a sligntly different interpretation.\nA command of the following form:\n.sp\n     .LI , NOBREAK\n.sp\nwill define the comma \",\" to be the Nobreak Control Word Indicator.\nThen the use of comma will suppress the normal \"break\" action\nof all control words.  For example \",SP\" will leave an immediate\nspace without flushing the current bufferred text first and\n\",BR\" would be a no-op.\nThis facility can be very useful for changing indents\nor spacing within a paragraph without destroying the justification.\nBut beware that the current partially buffered output line is\nnot alterable and that not all \"NOBREAK\" combinations may\nproduce valid combinations with other control words.\n.sp\n     .LI * NOBREAK\n.sp\ncan be used to cancel this facility.\n.cm End of LI\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "LL": {"ttr": 3346, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "LN": {"ttr": 3348, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00/\\x00/\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE LN\n.SUBT Purpose\nThe IMMEDIATE LINE control word causes output to resume at an absolute\nline number further down the current page or up on the next.\n.SUBT Format\n|\n|  .LN           <n|+n|-n>\n|\n.SUBT Usage\nThis control word will position the next line of user output\nto a specified line between the top and bottom margins.\nAn operand of \"1\" is the first line following the Top Margin.\n.sp\nNormally the process involves spacing down on the current page.\nIf the operand specified is higher on the page than the\ncurrent line position, then a page eject will be done first\nfollowed by the required number of spaces.\nAn operand of the form \"+n\" spaces down on the current page and\nan operand of the form \"-n\" spaces down on the next page.\n.sp\nWhen spacing, automatic remotes are not triggered.\nLeading spaces are allowed on a page whether or not\nthe .LE control word has been specified.\n.sp\nThis control word is considered illegal within a Footnote\nor a Keep.\n.SUBT Defaults\nThis command does create a break when encountered.\nAn operand must be specified as none will be assumed.\n.SUBT Examples\n.of 4\n(1) .LN 22;This is on Line 22 of the text area.\n.sp\nAfter causing a break, the output spaces and/or ejects\nto the next occurrence of Line twenty-two following\nthe top margin.\n.sp\n.cp begin\n.of 4\n(2) .LN -5\n.sp\nThis ejects the current page and spaces to five lines higher\nthan the former page position.\nThis would cause an error if the former page position were not\nat least five lines down from the top margin.\n.cp end\n.cm End of LN\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "LS": {"ttr": 3350, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00#\\x00#\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "MC": {"ttr": 3352, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x14\\x00\\x14\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT Reference MC\n.SUBT Purpose\nThe MULTIPLE COLUMN control word restores multi-column output\nafter it has been suppressed by .SC (SINGLE COLUMN).\n.SUBT Format\n|\n|  .MC\n|\n.SUBT Usage\nIf SINGLE COLUMN had been previously specified, this control word\nwill restore the former multiple column environment.\nIf SINGLE COLUMN had not been previously specified,\nthen a break will be caused and no other action.\n.SUBT Defaults\nThis control word causes a break.\nIt takes no operands.\n.SUBT Notes\n.of 4\n(1) This control word may not be specified within a Keep or Footnote.\n.cm End of MC\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MS": {"ttr": 3586, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT Reference MS\n.SUBT Purpose\nThe MACRO SUBSTITUTION control word prevents user-defined\nmacros from being invoked.\n.SUBT Format\n|\n|  .MS           <ON|OFF>\n|\n.SUBT Usage\nThis control word interacts with user macros defined\nby .DM (Define Macro).\nAn \"ON\" operand causes SCRIPT to compare the name of each\ndefined macro with each control word encountered.\nAn \"OFF\" operand will suppress this comparison.\n.SUBT Defaults\nThis control word does not create a break.\nNo default operand is assumed and \"OFF\" is the\ninitial setting.\n.SUBT Notes\n.of 4\n(1) Even with Macro Substitution \"OFF\", the macro may still\nbe invoked by using .SI (Signal).\n.of 4\n(2) Macro Substitution only affects macros specified by .DM\n(Define Macro).  Named Remotes are not affected.\n.cm End of MS\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "NC": {"ttr": 3588, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE NC\n.SUBT Purpose\nThe NO CONCATENATE control word stops words from shifting to or from\nthe next line.\n.SUBT Format\n|\n|  .NC          <Y\b_E\b_S\b_|NO>\n|\n.SUBT Usage\nThe NO CONCATENATE control word stops words from shifting to\nand from the next line.  There will be a one-to-one\ncorrespondence between the words in input and output lines.\n.SUBT Defaults\nThis command word does create a break\nand is not in effect until encountered.  An omitted operand is\ntreated as \"YES\".  A \"NO\" operand is equivalent to \".CO\" (See\nthe .CO control word).\n.SUBT Notes\n.of 4\n(1) Concatenation will be completed for the lines which\nprecede the .NC control word, since it also acts\nas a BREAK.\n.sp 1\n.of 4\n(2) If JUSTIFY is in effect, the right margin will still be adjusted.\n.cm End of NC\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "NF": {"ttr": 3590, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE NF\n.SUBT Purpose\nThe NO FORMAT control word causes lines to be output as they appear\nin the input by negating the effect of JUSTIFY and CONCATENATE.\n.SUBT Format\n|\n|  .NF           <Y\b_E\b_S\b_|NO>\n|\n.SUBT Usage\nThe .NF control word is a short way to specify .NJ and .NC.\nSubsequent output lines will be typed exactly as they appear\nin the input until a .FO, .JU or .CO control word is encountered.\n.sp\nTables and equations are more easily entered if .NF is used\nto suppress formatting just before the input records.\n.SUBT Defaults\nThis command does create a break and is not in effect until\nencountered.\nAn omitted operand is treated as \"YES\".\nA \"NO\" operand is equivalent to \".FO\"\n(see the .FO control word).\n.SUBT Notes\n.of 4\n(1) Input lines under NO FORMAT control that exceed the length of\nthe output device (normally 132 for a printer) will be truncated\non the right.\n.cm End of NF\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "NJ": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x15\\x00\\x15\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE NJ\n.SUBT Purpose\nThe NO JUSTIFY control word stops justification of text to the\nright margin.\n.SUBT Format\n|\n|  .NJ          <Y\b_E\b_S\b_|NO>\n|\n.SUBT Usage\nThe .NJ control word causes SCRIPT to cease inserting extra spaces\ninto lines in order to justify the right margin.  If\nCONCATENATE is in effect, the output lines will be as long as\npossible without exceeding the current\nline length and without breaking words in the middle.  The resulting\noutput will be similar to what an ordinary\ntypist would produce.\n.SUBT Defaults\nThis command does create a break and is not in effect until\nencountered.  An omitted operand is treated as \"YES\".  A \"NO\"\noperand is equivalent to \".JU\" (See the .JU control word).\n.cm End of NJ\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "NL": {"ttr": 3594, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x009\\x009\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "NSCRFC1": {"ttr": 3596, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x005\\x005\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE NSCRFC1\n.cm ------------------------- Start of Remote Star\n.rm * save\n.sr adj='la'\n.ur .if %/2*2-% \u00ac= 0;.th .sr adj='ra'\n.ur .if '&SCENTRE' \u00ac= 'YES' .th .sr adj='ra'\n.in\n.sr bxadj=1;.ur .if '&adj' eq 'ra';.se bxadj=&sysll-9\n.ur .&adj YES\n.ur .bx &bxadj +9\n.sp\n.ur .ur |  .&&c(&n)   |\n.sp\n.bx off\n.ur .&adj NO\n.sp 1\n.rm\n.cm ------------------------- End of Remote Star\n.im fclist\n.sr n=0\n.rm CWCALL save nosave\n.se n=&n+1\n.se ctemp=\"&&c(&n)\"\n.ur .ur .if \"&&cc(&n)\" ne '' .th .se ctemp=\"&&cc(&n)\"\n.se &ctemp=%\n.ur .ur .tt /SCRIPT//&&d(&n)/\n.ur .if '&SCENTRE' eq 'YES' .th .ur .ur .et /&&d(&n)//SCRIPT/\n.sa\n.ur .im &ctemp\n.pa\n.re\n.rm\n.rm SUBT save nosave\n.ur .if '&SYSBX' eq 'Y' .bx OFF\n.ur .if &0 eq 0 .ef\n.ur .if '&1' eq 'Purpose' .th .do begin\n.fo yes;.in 0;.cp 5;.ef\n.do end\n.ur .if '&1' eq 'Format' .th .do begin\n.fo no;.in 5;.sp;.cp 5;.ur .bx 6 16 &SYSLL-5;.ef\n.do end\n.ur .if '&1' eq 'Usage' .th .do begin\n.fo yes;.in 0;.sp;.cp 5;.ef\n.do end\n.fo yes;.in;.sp;.ur .if '&SYSCP' ne 'Y' .th .cp 5\n.ur .us &1:;.in 5;.sp\n.rm\n.se contwords=%\n.ur .pe &nmax;.si CWCALL;.in 0;.fo\n.rm CWCALL delete\n.rm SUBT delete\n.rm * delete\n.cm End of NSCRFC1\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "OB": {"ttr": 3598, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00)\\x00)\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "OC": {"ttr": 3600, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00<\\x00<\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE OC\n.SUBT Purpose\nThe OVERLAY CHARACTER control word causes characters in input text\nlines to be overlaid with a backspace and user defined\ncharacter or itself.\n.SUBT Format\n|            <char|ON|O\b_F\b_F\b_|n> <c1 ...>\n|  .OC\n|            char/<ON|OFF|n> <c1 ...>\n.SUBT Usage\nThe .OC control word is used to overstrike characters in\na single following or all following input text lines\nwith a specified character or the character itself.  Blanks, tabs,\nbackspaces, characters equal to the overstrike character and\nup to twenty exception characters separated by blanks\n<c\"i\"> are not overlaid.\n.sp\nA single character first operand overstrikes with that\ncharacter.  A single character followed immediately by\n\"/ON\" is equivalent,\nfollowed by \"/OFF\" turns it off and followed by \"n\"\nturns it on for only the next \"n\" input text lines.\n.sp\nAn operand of the form \"ON\" turns on boldface letters\nby overstriking a character with itself,\n\"OFF\" disables this and \"n\" turns overstriking with itself\non for the next \"n\" input text lines.\nTo overstrike only the next text line with itself code \".OC +1\"\nsince \".OC 1\" would overlay text with \"1\"s.\n.sp\nCare must be taken that the insertion\nof backspaces and the extra character does not force the internal\n240 character input line buffer to overflow.\n.SUBT Defaults\nThis control word does not create a break.\nIf the operands are omitted, all character overstriking is turned off.\n.SUBT Examples\n.tr \u00ac .\n.of 4\n(1) To facilitate long underscoring:\n.sp\n.nf\nThe\n\u00acoc _/1;OVERLAY CHARACTER\ncontrol word can save a lot of editing problems.\n\u00acoc _ .;To overlay a string of text or an entire paragraph\ncan be tedious to enter and worse to modify subsequently.\n\u00acoc OFF\n.tr \u00ac \u00ac\n.fo\n.sp\nProduces:\n.sp\nThe\n.oc _/1;OVERLAY CHARACTER\ncontrol word can save a lot of editing problems.\n.oc _ .;To overlay a string of text or an entire paragraph\ncan be tedious to enter and worse to modify subsequently.\n.oc\n.cm End of OC\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "OF": {"ttr": 3602, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00I\\x00I\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "OFFSCR": {"ttr": 3605, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00E\\x00E\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE OFFSCR\n.ur .if '&UPDATE' ne '' and '&UPDATE' gt '780106' .th .ef\n.us Offline Printer Support:\n.sr offscr=%\n.sp\nSCRIPT can also be executed as a background job or an over-the-counter\nbatch job so that it will print directly on the offline printer.\nThe appendix titled \"Offline Control Statements\"\ncontains the JCL for submitting such a job.\n.sp\nKeyword parameters may be specified to define the\nphysical characteristics of the output printer.\n.sp\n.cp begin\nFFCHannel=<1\b_|n>\n.in +4\nThe Form Feed Channel option specifies\nthe printer channel from 1 to 9 that SCRIPT will\nuse to align output below a page perforation.\n.in -4\n.cp end\n.sp\n.cp begin\nFFTOp=<3\b_|n>\n.in +4\nThe Form Feed Top option specifies\nthe line number on the page that corresponds to\nthe FFCHANNEL= skip on an output page.\nThe value of this parameter may vary from line 1 to 175.\n.in -4\n.cp end\n.sp\n.cp begin\nWhen output is to be formatted for the offline printer:\n.sp\n.of 4\n(1) The first page of output will be positioned at a page\ncrease (perforation) before normal first page\nprocessing is initiated if a title or text is to be\nprinted above the Form Feed Top line (FFTOP=)\nof the page.\n.cp end\n.sp\n.cp begin\n.of 4\n(2) If a title is to be printed on the first page,\na Top Title (.TT) control word must preceed the first text\nline in the input stream.\n.cp end\n.sp\n.cp begin\n.of 4\n(3) All pages of an OFFLINE file may print from the first line\njust below the page perforation for the full Page Length (.PL).\nTherefore the .PL value, the FFCHANNEL= and FFTOP= parameters\nshould agree with the physical setup of the printer paper.\n.cp end\n.sp\n.cp begin\n.of 4\n(4) Blank output lines preceeding the FCHANNEL= line on each\noutput page are not printed.\nThus SCRIPT output to an IBM 3800 printer will be correct\nif the user does not put titles or text in the top and bottom\none half inch of an output page.\n.cp end\n.in\n.pa\n.cm End of OFFSCR\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "OJ": {"ttr": 3607, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x19\\x00\\x19\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE OJ\n.SUBT Purpose\nThe OUT JUSTIFY control word causes the specified\nlines to be aligned to the outside of the paper.\n.SUBT Format\n|\n|  .OJ           <1\b_|n|YES|NO|line>\n|\n.SUBT Usage\nThe \"line\" operand or the next \"n\" lines in the input\nfile, including any leading blanks, will be adjusted\nto the outside indent margins.\nThis means that .OJ performs like Left Adjust (.LA)\non even numbered pages and like Right Adjust (.RA)\non odd numbered pages.\nThe \"line\" operand starts one blank after the control word.\n.SUBT Defaults\nThis command will create a break when encountered.\nA numeric operand will out justify the following\n\"n\" input lines.\nA \"YES\" operand will outjustify all following\ninput lines until a \"NO\" operand is encountered\nor until a Centre (.CE), Left Adjust (.LA) or Right Adjust\n(.RA) control.\n.cm End of OJ\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "ONTERM": {"ttr": 3841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00a\\x00a\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 97, "newlines": 97, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE ONTERM\n.ur .if '&UPDATE' ne '' and '&UPDATE' gt '771219' .th .ef\n.us Online Terminal Support\n.sp\n.sr onterm=%\nSCRIPT has enhanced support for Online ASCII terminals.\nIn particular this support would be most useful for\nhardcopy terminals using the 'Diablo' print mechanism.\nFor such terminals, if the user includes terminal escape\ncodes as part of the document, then these escape codes\nwill be retained within the text without confusing the\njustification algorithm.\n.sp\nFor terminals supporting a Negative Line Feed it will\nbe used to support the SPace zero or Don't Count control words.\nIf the user makes use of the Null Character (X'00'),\nTN superscripts and box drawing characters\nor ALA subscripts, these will be altered to the appropriate\nescapes and printable characters for the terminal.\nFor multiple column output SCRIPT uses the absolute\nHorizontal Tabbing facility of the terminal.\nAnd lastly, SCRIPT will take advantage of the variable\nHorizontal Motion Index feature to display output\nfrom 4 to 18 characters per inch and will generate\nproportional interword spacing codes.\n.sp\n.of 6\nNOTE: This version of SCRIPT has not solved the problem\nof Output Overlay and the vertical sides of Boxes.\nThese characters may be incorrectly placed in formatted\ntext because of the variable width of the interword blanks.\n.in +0\n.sp\nBut all of this comes at a price.\nNew positional and keyword parameters must be specified\nin order to make use of the facilities of the terminal.\n.sp\nCPInch=<10|n>\n.in +4\nThis parameter specifies the horizontal\nnumber of characters per inch for ONline output.\nFor this to have any effect, the Horizontal Motion\nIndex (HMI) must be defined for the terminal.\nThe default CPI is 10, but may range from 4 to 18.\n.in -4\n.sp\n.cp 5\nX1620\n.in +4\nThis positional parameter defines the output terminal\nto be a XEROX 1620 diablo terminal.\nSCRIPT makes use of the HMI, Negative Line Feed,\nSuperscript, Subscript and absolute Tabbing features\nof the terminal.\n.in -4\n.sp\n.cp 5\nMULTI3\n.in +4\nThis positional parameter defines the output terminal\nto be an Ahearn and Soper Multiwriter III terminal.\nIt is currently defined identical to the X1620.\nThe terminal however will do backward typing and horizontal\ntabbing to optimize the speed of output.\n.in -4\n.sp\n.cp 5\nQUME\n.in +4\nThis positional parameter defines the output\nterminal to be a QUME terminal.\nCurrently it is defined with none of the attributes\nthat SCRIPT requires for enhanced output.\nThe function codes are known to be different from the X1620\nbut what they are exactly is not known for this\nversion of SCRIPT.\n.in -4\n.sp\n.cp 5\nASISterm\n.in +4\nThis positional parameter defines an output terminal\nthat knows nothing about escape characters and special\ncharacters such as Superscripts and Subscripts.\n.in -4\n.sp\n.cp 5\nMYTERM\n.in +4\nThis positional parameter defines the output terminal\nto an installation dependent terminal.\nBy default this parameter defines a 2741 type of terminal\nthat cannot do any of the features described above.\nSpecial characters are simulated on such a terminal however.\n.in -4\n.pa\n.cm End of ONTERM\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OO": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x008\\x008\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 56, "newlines": 56, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE OO\n.SUBT Purpose\nThe OUTPUT OVERLAY control word causes blanks in formatted\noutput records to be overlaid with a user defined string.\n.SUBT Format\n|                <1\b_|n|ON <string>>\n|  .OO\n|                <OFF|DELETE>\n.SUBT Usage\nThe .OO control word is used to alter occurrences of blanks in the\nnext \"n\" formatted output lines and spaces.\nEvery occurrence of blank after the\nADJUST (see .AD) column will be replaced by the corresponding\ncharacter in the output overlay \"string\".  The \"string\" is\ndefined starting one blank after the first operand on the same line.\nIf omitted, the \"string\" will be the next input record.\n.sp\nThe first operand specifies the number of times the overlay\noperation is to be performed.  An \"ON\" operand continues the\nprocess indefinitely.  More than one Output Overlay \"string\"\nmay be specified.  These are printed in the order in which\nthey are defined.\nAn \"OFF\" operand terminates the first entry on the queue; a \"0\"\noperand defines an entry that is never used; a \"DELETE\"\noperand purges the entire queue.\n.SUBT Defaults\nThis control word does not cause a break.\n.SUBT Examples\n.tr \u00ac .\n.of 4\n(1) to facilitate margin headers:\n.sp\n.nf\n\u00acoo 1 Head One\n\u00acoo 1\nHead Two\n\u00acin 20\nThis is some text that will have a margin header\ndefined in the left margin.  Those header lines\nread \"Head One\" and \"Head Two\".\n.sp\n.fo\n.tr \u00ac \u00ac\n.cp begin\nProduces:\n.sp\n.oo 1 Head One\n.oo 1\nHead Two\n.in 20\nThis is some text that will have a margin header\ndefined in the left margin.  Those header lines\nread \"Head One\" and \"Head Two\".\n.cp end\n.oo Delete\n.cm End of OO\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "OP": {"ttr": 3846, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x17\\x00\\x17\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE OP\n.SUBT Purpose\nThe ODD PAGE EJECT control word causes output to continue on an\nodd-numbered page.\n.SUBT Format\n|\n|  .OP\n|\n.SUBT Usage\nThe .OP control word causes one or two page ejects so that output\ncontinues on an odd-numbered page.\n.SUBT Defaults\nThis command will create a break when encountered.\n.SUBT Notes\n.of 4\n(1) If empty-page suppression is on (.EM NO), the page number will be\nincremented to the next odd page and output\nwill continue on the next physical page.\n.sp 1\n.of 4\n(2) The ODD PAGE EJECT control has the same effect as the\nODD PAGE (.PD) control.\n.cm End of OP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OPTIONS": {"ttr": 3848, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x013\\x013\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 307, "newlines": 307, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "OT": {"ttr": 3854, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00*\\x00*\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "OV": {"ttr": 3856, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x001\\x001\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE OV\n.SUBT Purpose\nThe OVERLAY control word causes following input text lines to\nbe overlaid by the contents of the text line following this command.\n.SUBT Format\n|                <1\b_|n|YES <string>>\n|  .OV\n|                <OFF|DELETE>\n.SUBT Usage\nThe .OV control word is used to alter occurrences of blanks in the\nnext \"n\" input text lines.  Every occurrence of blank in the text\nlines will be replaced by the corresponding character in the overlay\noperand line, up to the maximum length of the overlay operand line\nand the input text line.  A \"YES\" operand continues the process\nindefinitely.  A \"NO\" operand terminates the process.\nA \"DELETE\" operand purges the entire queue.\n.sp\nMultiple Input Overlay strings are queued.\nSee Output Overlay (.OO) for more information.\n.SUBT Defaults\nThis control word does not create a break.\n.br;.cp 20\n.SUBT Examples\n.tr \u00ac .\n.of 4\n(1) To facilitate block building:\n.sp\n.fo no\n\u00acfo no;\u00acov yes\n       |       *\n****************\n*\n*    Title\n*\n****************\n\u00acov no;\u00acfo yes\n.sp\nProduces:\n.sp\n.tr \u00ac \u00ac\n.fo no;.ov yes\n       |       *\n****************\n*\n*    Title\n*\n****************\n.ov no\n.cm End of OV\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "PA": {"ttr": 4097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00?\\x00?\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 63, "newlines": 63, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "PD": {"ttr": 4099, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x13\\x00\\x13\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE PD\n.SUBT Purpose\nThe ODD PAGE control word causes output to continue on an\nodd numbered page.\n.SUBT Format\n|\n|  .PD\n|\n.SUBT Usage\nThe .PD control word causes one or two page ejects so that output\ncontinues on an odd numbered page.\n.SUBT Defaults\nThis command will create a break when encountered.\n.SUBT Notes\n.of 4\n(1) If empty page suppression is on (.EM NO), the page number will be\nincremented to the next odd page and output\nwill continue on the next physical page.\n.cm End of PD\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PE": {"ttr": 4101, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00A\\x00A\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE PE\n.SUBT Purpose\nThe PERFORM control word causes the remainder of the same or the next\ninput line to be executed multiple times.\n.SUBT Format\n|\n|  .PE          <1\b_|n|YES|NO|DELETE>\n|\n.SUBT Usage\nThe PERFORM control word provides a primitive facility for DO-LOOPs.\nThe string following on the same input line is executed \"n\" times\nbefore passing on to the next physical record.\nA \"YES\" operand executes the line an\ninfinite number (actually 32,767) of times.\nA \"NO\" or zero operand terminates processing of the current line\nimmediately.\nPerforms within performs are supported.\nA \"DELETE\" operand terminates all nested levels of performs.\n.SUBT Defaults\nThis control word does not cause a break.  An omitted operand\nwill be treated as one.\n.SUBT Examples\n.tr \u00ac .\n.of 4\n(1) To build a block of twenty asterisk lines, centered on the page:\n.sp\n\u00acpe 20;\u00acce;*******************************\n.sp\n.of 4\n(2) Alternatively the operand string to be performed may be entered\non the following input record:\n.sp\n\u00acpe 20\n.br\n\u00acce;*******************************\n.sp\n.cp 15\n.of 4\n(3) To format the first 10000 numbers in paragraphs of 100:\n.sp\n.nf\n\u00ac\u00ac\u00ac\n\u00acsr j=100;\u00accm paragraph count\n\u00acsr max=10000;\u00accm total number count\n\u00acrm 255 save nosave\n\u00acse i=&i+1\n\u00acse t=-&i/&j*&j+&i;\u00accm remainder mod j\n\u00acur &i\n\u00acur \u00acif &t = 0\n\u00acsp\n\u00acrm\n\u00acpe yes;\u00acsi 255;\u00acur \u00acif &i ge &max;\u00acpe delete\n\u00ac\u00ac\u00ac\n.sp\n.of 4\n(4) Same example as above using nested perform:\n.sp\n\u00ac\u00ac\u00ac\n\u00acsr j=100;.* numbers per paragraph count\n\u00acsr max=10000;.* total number count\n\u00acsr i=0;.* clear starting value\n\u00acur .pe &max/&j;.sp;.ur .pe &j;.se i=&i+1;.ur &i\n\u00ac\u00ac\u00ac\n.tr \u00ac \u00ac\n.cm End of PE\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "PI": {"ttr": 4103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00R\\x00R\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 82, "newlines": 82, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE PI\n.SUBT Purpose\nThe PARAGRAPH INDENT control word specifies the number of blank\nspaces to be inserted at the beginning of each paragraph.\n.SUBT Format\n|\n|  .PI          <0\b_|n|+n|-n|YES|NO>\n|\n.SUBT Usage\nThe \".PI\" control word causes \"n\" spaces to be inserted at the\nbeginning of the first line of each paragraph.\nThe operand may be signed, in which case the current value is\nincremented or decremented appropriately.\nA \"YES\" argument will set the paragraph indent value to three.\nA \"NO\" argument is equivalent to a zero operand and terminates\nthe paragraph indent function.\nThe value of paragraph indent may never\nbe negative or larger than the current line length \".LL\"\nminus one.\n.sp\nThe beginning of a paragraph is determined when:\n.sp\n.in +3;.of 4\n(1) The line of text is not under .CE, .LA or .RA control.\n.of 4\n(2) Text is being formatted with Concatenation on \".CO\" or\nunder Format control \".FO\".\n.of 4\n(3) The line of text does not start with a tab character.\n.SUBT Defaults\nThis control word creates a break.  An initial value of zero\nis assumed, which is also assumed if the operand is omitted.\n.br;.cp 10\n.SUBT Examples\n.nf\n.in +0 -9\n.of 4\n.tr \u00ac .\n(1) This is paragraph number one.  Note\nthat there is no indentation at the start\nof this paragraph.\n\u00acpi 3\n\u00acsp\nThis is paragraph number two and it is\nindented.\n\u00acsp\nThis is paragraph number three and it is\nalso indented because a paragraph indent\nstays around until explicitly cleared.\n\u00acpi +3\n\u00acsp\nThis paragraph is indented even further\nalthough the input started in column\nnumber one.\n\u00acsp\n\u00acpi\nNow paragraph indent is cleared.\n.tr \u00ac \u00ac\n.fo\n.sp\nProduces:\n.sp\nThis is paragraph number one.  Note\nthat there is no indentation at the start\nof this paragraph.\n.pi 3\n.sp\nThis is paragraph number two and it is\nindented.\n.sp\nThis is paragraph number three and it is\nalso indented because a paragraph indent\nstays around until explicitly cleared.\n.pi +3\n.sp\nThis paragraph is indented even further\nalthough the input started in column\nnumber one.\n.sp\n.pi\nNow paragraph indent is cleared.\n.cm End of PI\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "PL": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00!\\x00!\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "PN": {"ttr": 4108, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00A\\x00A\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "PP": {"ttr": 4110, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x001\\x001\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 49, "newlines": 49, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE PP\n.SUBT Purpose\nThe PARAGRAPH START control word defines the beginning of a new\nparagraph.\n.SUBT Format\n|\n|  .PP           <line>\n|\n.SUBT Usage\nThis command performs actions typical at the start of a new\nparagraph.\nThis includes leaving a blank line,\ntesting for bottom of current page and causing an indent\non the next output line.\n.sp\nThe \"line\" operand starts one blank after the control word.\nIf the operand is missing, the text for the start of the\nparagraph comes from the next input text line.\n.SUBT Defaults\nThis control word creates a break.\n.SUBT Examples\n.tr \u00ac .\n.of 4\n(1) \u00acpp Line of text ...\n.sp\nis equivalent to:\n.sp\n\u00acsk\n.br\n\u00accc 2\n.br\n\u00acil +3\n.br\nLine of text ...\n.sp\n.of 4\n(2) \u00acpp First line of text;Second line of text.\n.sp\nis equivalent to:\n.sp\n\u00acpp\n.br\nFirst line of text\n.br\nSecond line of text.\n.sp\nbecause the semicolon is the control word separator.\n.tr\n.cm End of PP\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "PR": {"ttr": 4112, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\"\\x00\"\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE PR\n.SUBT Purpose\nThe PRINT control word causes one line of information to be typed on\nthe user's terminal.\n.SUBT Format\n|\n|  .PR           information\n|\n.SUBT Usage\nIf output is to the user's terminal, the .PR control is\n.FNADD\n.ur ignored&LP..\n.fn begin\n.in\n.ur .of &OFN\n.ur (&NFN.) Except during the first pass of a TWOPASS run,\nwhen .PR causes output normally.\n.fn end\nOtherwise, the entire operand field is printed on the terminal.\n.sp 1\nThe .PR control may be of use, for example, immediately\npreceding a .TE (Terminal Input) control word as a\nreminder of what to do.\n.SUBT Defaults\nThis command word will not create a break when encountered.\n.SUBT Examples\n .pr Type Name and Address (3 lines)\n .te\n .br\n .te\n .br\n .te\n .br\n.cm End of PR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PREFACE": {"ttr": 4114, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00#\\x00#\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE PREFACE\n.ur .if '&UPDATE' ne '';.th .ef\n.ro;.li , nobreak;,pa 1;.li * nobreak\n.ur .bx 1 &sysll\n.sp;.ce PREFACE\n.sp;.bx off\n.sp 3\n.se preface='&sysppage'\nThe quality and accuracy of a document depend greatly on the ease\nwith which revisions\ncan be made to the document.  This statement is particularly true of\ntechnical documents (into\nwhich class the present manual falls), which should always accurately\nreflect the status of the things they\ndescribe.\n.sp 1\nIt is natural that computer software solutions to the problems of\ndocument production\nshould be devised.  CTSS's \"runoff\", MULTIC's \"runoff\" and CMS's\n\"SCRIPT\" represent similar\nsuch solutions.\n.sp 1\nThis manual describes \"SCRIPT\", an outgrowth of NSCRIPT\nintended for use under TSO (currently still available from\nthe SHARE programme library) and of SCRIPT intended for\nuse under CMS on a System/360 model 67 running under CP/67.\nSCRIPT running under 360/OS/TSO or 370/VM/CMS has the same\noutward appearance as it did when running under CMS.\nIts set of command words encompasses most of those\nbelonging to SCRIPT, MULTIC's \"runoff\" and TSO's FORMAT.  In most\ncases they perform identical functions and have the same symbolic\nnotation.\n.in\n.pa\n.cm End of PREFACE\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "PS": {"ttr": 4116, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00#\\x00#\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE PS\n.SUBT Purpose\nThe PAGE NUMBER SYMBOL control word defines the character\nin headings and footings to be replaced by the current\npage number.\n.SUBT Format\n|\n|  .PS           <%\b_|character>\n|\n.SUBT Usage\nThe percent sign \"%\" is usually reserved for use as\nthe page number symbol.  SCRIPT substitutes the current\npage number for each occurrence of the percent sign\nwithin a heading or footing line.  To allow the percent\nsign to appear in titles the .PS control word is supported\nto change the character to be replaced by the current page\nnumber.\n.SUBT Defaults\nThis command will not create a break when encountered.  The\ninitial default PAGE NUMBER SYMBOL character is the percent\nsign \"%\".  Any character may be used as an argument.  If the\nargument is omitted then the percent sign is restored as the\ndefault character.\n.SUBT Notes\n.of 4\n(1) The character specified in the PAGE NUMBER SYMBOL control\nword takes effect for all subsequent headings and footings.  This\nmeans heading and footing specifications may have to be\nrespecified at the same time.\n.sp\n.of 4\n(2) In the Set Reference (.SR) control word, the percent sign \"%\"\nor the ampersand \"&\" or the .PS argument will all be recognized\nas the current page number symbol.\n.cm End of PS\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "PT": {"ttr": 4118, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00#\\x00#\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE PT\n.SUBT Purpose\nThe PUT TABLE OF CONTENTS control word adds an input\nline to the Table of Contents.\n.SUBT Format\n|\n|  .PT           <line>\n|\n.SUBT Usage\nThe .PT control word supplements the \".HL\" (Head Level)\ncontrol word for adding text and control words to\nthe current Table of Contents.\n.sp\nThe \"line\" operand starts one blank after the end of the\ncontrol word.\nIn this way leading blanks may be part of the\ntext added.\nIf the \"line\" operand starts with the control word\nindicator, normally \".\", the operand line is entered\nas is.\nIf the \"line\" operand does not start with the control word\nindicator it is taken to be a text line and the current page\nnumber is appended to the \"line\".\n.SUBT Defaults\nThis control word does not create a break.\nA command operand could create a break when the\nTable of Contents is formatted with the \".TC\" control word.\n.SUBT Notes\n.of 4\n(1) A .PT control word used within a Keep Block or Footnote\ndoes not add the \"line\" operand to the Table of Contents\nuntil the Keep Block or Footnote is actually printed.\nThis ensures the ordering and page numbers in the\nTable of Contents will always be correct.\n.cm End of PT\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "PU": {"ttr": 4353, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00(\\x00(\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "PURPOSE": {"ttr": 4355, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00%\\x00%\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE PURPOSE\n.ur .if '&UPDATE' ne '' and '&UPDATE' gt '760101';.th .ef\n.in 0\n.us Purpose:\n.sr purpose=%\n.sp 1\nSCRIPT is used to format an input file containing text and\ncontrol lines.\nThe file may contain fixed or variable length records or\nWYLBUR Edit-format records.\nFormatting is specified by control lines (lines that begin with\na control indicator, normally a period, followed by a two letter\ncontrol word).\nThe appendix titled \"Sample Input to SCRIPT\" contains an unformatted\nlisting of a sample input file.\n.sp\nThe \"SCRIPT\" command causes the specified file to be edited and\nformatted, directed by control lines contained within the input file.\nEach line read from the input file is inspected for a first character\nequal to the control identifier, normally a period, which identifies a\ncontrol line.\nControl lines are not output, but are interpreted to specify the\nformat of the output.\nThe control word may be specified in either upper or lower case\n(or a mixture of the two) and must be separated from its arguments\n(if any) by one or more spaces.\nControl lines may appear anywhere in the file, and have effect on\nall output produced after their appearance.\n.sp\nOutput can be directed to the user's terminal, the offline printer\nby submitting a batch job, or to a permanent file and then printed\non the offline printer using a utility program.\nCertain differences in the processing occur depending on where the\noutput is directed.\nThese differences are described below under individual headings.\n.pa\n.cm End of PURPOSE\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "PV": {"ttr": 4357, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x13\\x00\\x13\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE PV\n.SUBT Purpose\nThe EVEN PAGE control word causes output to continue on an\neven numbered page.\n.SUBT Format\n|\n|  .PV\n|\n.SUBT Usage\nThe .PV control word causes one or two page ejects so that output\ncontinues on an even numbered page.\n.SUBT Defaults\nThis command word will create a break when encountered.\n.SUBT Notes\n.of 4\n(1) If empty page suppression is on (.EM NO), the page number will be\nincremented to the next even page and output\nwill continue on the next physical page.\n.cm End of PV\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "QQ": {"ttr": 4359, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x18\\x00\\x18\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE QQ\n.SUBT Purpose\nThe QUIT QUICKLY control word causes immediate termination of all input\nand output file processing.\n.SUBT Format\n|\n|  .QQ           <Y\b_E\b_S\b_|NO>\n|\n.SUBT\n.sp\n.fo yes\n     YES  Allows the QUIT QUICKLY function to operate.\n.sp\n     NO   Suppresses the QUIT QUICKLY function.\n.SUBT Usage\nWhen SCRIPT encounters a QUIT QUICKLY control word with an\naffirmative operand, even in a Remote Sequence or in a file that\nis being Imbedded, the processing terminates for the current pass.\nIf multiple passes have been specified, these will be done\nnormally.\n.SUBT Defaults\nThis command creates a break.\nAn omitted operand is treated as \"YES\".\n.cm End of QQ\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "QU": {"ttr": 4361, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00#\\x00#\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE QU\n.SUBT Purpose\nThe QUIT control causes immediate termination of all input file\nprocessing.\n.SUBT Format\n|\n|  .QU           <Y\b_E\b_S\b_|NO>\n|\n.SUBT\n.sp 1\n.fo\n.in 10\n.tb 20\n.of 10\nYES\tAllows the QUIT function to operate.\n.sp 1\n.of 10\nNO\tSuppresses the QUIT function.\n.tb\n.SUBT Usage\nWhen SCRIPT encounters a QUIT control word with an affirmative\noperand, even in a Remote Sequence or in a file\nthat is being Imbedded, the output\nadvances to the top of the next page and clears any\nstacked footnotes or text created by \".CP or .FK begin/end\"\nsequences before termination of all processing for the current pass.\n.SUBT Defaults\nThis command creates a break.\nAn omitted operand is treated as \"YES\".\n.SUBT Notes\n.of 4\n(1) The .QT control word is supported for compatibiblity\nwith QUIT in former versions of SCRIPT.\nThe two functions are identical.\n.cm End of QU\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "RA": {"ttr": 4363, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00+\\x00+\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE RA\n.SUBT Purpose\nThe RIGHT ADJUST control word causes the next input line to be right\nadjusted in the output line.\n.SUBT Format\n|\n|  .RA           <1\b_|n|YES|NO|line>\n|\n.SUBT Usage\nThe \"line\" operand or the next \"n\" input text lines,\nincluding any leading or trailing\nblanks, will be right adjusted in the output lines.\n.SUBT Defaults\nThis control word will create a break when encountered.  A numeric\noperand will right adjust the following \"n\" input lines.  A \"YES\"\noperand will right adjust all following input lines until a \"NO\"\noperand is encountered or until a CENTER control.\n.sp\nThe \"line\" operand starts one blank after the control word.\n.SUBT Notes\n.of 4\n(1) If the next line is longer than the current line length, it will\nbe truncated.\n.sp\n.of 4\n(2) The .RI control is provided for compatibility with RIGHT ADJUST\nin other versions of SCRIPT.\nThe two functions are identical.\n.SUBT Examples\n.of 4\n(1) .ra (1.5)\n.sp\nProduces:\n.sp\n.ra (1.5)\n.sp\n.of 4\n(2) .ur .ra &sysdate\n.sp\nProduces:\n.sp\n.ur .ra &sysdate\n.cm End of RA\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "RC": {"ttr": 4365, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00e\\x00e\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE RC\n.SUBT Purpose\nThe REVISION CODE control word allows selected portions of the total\ndocument to be marked in the left margin with a settable revision\ncode character.\n.SUBT Format\n|                n  <ON|OFF|ON/OFF>\n|  .RC\n|                n  <char|SET string>\n.SUBT\n.sp 1\n.fo\n.in 10\n.tb 18\n.of 7\nn\trepresents a revision code number and may be any numeric\nfrom 1 to 99.\n.sp 1\n.of 7\nON\tspecifies following text records are part of revision\nsection \"n\".\n.sp 1\n.of 7\nOFF\tspecifies that text for revision section \"n\" has ended.\n.sp 1\n.of 7\nON/OFF\tspecifies that only the first following text record is part\nof revision section \"n\".\n.sp 1\n.of 7\nchar\tspecifies the character to be printed in the left margin\nfor revision section \"n\".\n.sp 1\n.of 7\nSET string specifies the character string to be printed in the left\nmargin for revision section \"n\".\nThe \"string\" may be up to eight characters long and may be delimited\nif it contains blanks.\n.tb\n.SUBT Usage\nThe REVISION CODE control word sets the revision character and the\ninput text to be associated with each revision level.  When a\ndocument contains multiple revision levels and the modifications\noverlap, it is important that revision codes be turned off in the\nreverse order that they were turned on.  Put another way, only\nthe current active revision code may be turned off.\n.sp\nSpace is made for revision characters in the left margin by shifting\nall output text up to two spaces to the right.\nThe revision character will be printed one blank before the text area.\nEven text under indent control will be shifted.\nHowever, if sufficient left margin\nspace is available because of ADJUST or CENTER parameters, no right\nshifting is done.\nWhen specifying revision \"string\"s it is the user's responsibility\nto set the ADJUST value large enough to allow the \"string\" to\nbe inserted.\nThe \"string\" is right adjusted, one blank before the text area\nand will be truncated on the left if insufficient space is available.\nIf no such parameters are specified you should\ndefine the revision code characters before any text is formatted\nor immediately after a page eject so that entire pages will be\nindented uniformly.\n.SUBT Defaults\nThis command does not create a break when encountered.  Operand one\nmust be present; if operand two is omitted then the revision code\ncharacter is set to blank if the current revision code character\nis defined.\nSimilarly, if the operand after \"SET\" is omitted then the\nrevision code is set to blank if the current revision code is defined.\n.SUBT Notes\n.of 4\n(1) A Revision Code \"string\" cannot contain tab or backspace\ncharacters.\n.SUBT Examples\n.tr \u00ac .\n.nf\n.of 4\n(1) \u00acrc 3 on\ntext3...\n\u00acrc 1 on\ntext1...\n\u00acrc 2 on/off;text2...\ntext1...\n\u00acrc 1 off\ntext3...\n\u00acrc 3 off\n.sp\n.of 4\n(2) \u00acrc 1 'Rev. 1'\n\u00acrc 2 'Rev. 2'\nThis text is unrevised.\n\u00acrc 1 on\nThis text is from the first revision.\n\u00acrc 2 on/off\nThis text is from the second revision.\nAnd this is the last line from the first revision.\n\u00acrc 1 off\nThis text is again unrevised.\n.tr\n.cm End of RC\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "RD": {"ttr": 4368, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\"\\x00\"\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "RE": {"ttr": 4370, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00&\\x00&\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE RE\n.SUBT Purpose\nThe RESTORE STATUS control word restores the page environment\nto the last status saved with a SAVE STATUS.\n.SUBT Format\n|\n|  .RE\n|\n.SUBT Usage\nThe RESTORE STATUS control word resets control word values\nsaved in a push down stack by the preceding SAVE STATUS\ncontrol word.  An error message will result if there is\nno corresponding SAVE STATUS control word preceding.\n.SUBT Defaults\nThis command causes a break.\n.SUBT Examples\n.of 4\n(1) An example of SAVE and RESTORE status is shown in the following\nRemote example:\n.sp 1\n.nf\n.in +5\n.li )\n ...\n.rm 7 NOSAVE\n.sa;.cm This saves the current page environment\n.in 10\n.tb 10 15\n.ls 0\n.ce\n-FIGURE ONE-\nText ... text   text ...\n.pa\n.re;.cm This restores the current page environment\n.rm\n ...\n)li .\n.cm End of RE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REF$": {"ttr": 4372, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x14\\x00\\x14\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "CBT249"}, "text": ".cm Start of REF$\n.se c=0\n.rm REF$ save nosave\n.su on\n.sp 2\n.cp 10\n.se c=&c+1\n.se p(&c)=%\n.if &&p(&c) le 9;.se p(&c)=' &&p(&c)'\n.se t(&c)='&1'\n.if &0 >= 2;.se t(&c)='&&t(&c) &2'\n.if &0 ge 3;.se t(&c)='&&t(&c) &3'\n.if &0 ge 4;.se t(&c)='&&t(&c) &4'\n.if &0 ge 5;.se t(&c)='&&t(&c) &5'\n.if &0 ge 6;.se t(&c)='&&t(&c) &6'\n.us &&t(&c)\n.sp\n.su off\n.rm\n.cm End of REF$\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REFALPH": {"ttr": 4374, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x01\\x8b\\x01\\x8b\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 395, "newlines": 395, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE REFALPH\n.ur .bx 1 &sysll\n.sp;.ce SCRIPT Control Words by Function\n.sp;.bx off\n.se contfunc=&sysppage\n.se brkind='* '\n.lb SCRIPTCD\n.ur .if '&reftab' eq '' ..th .tb 23 &SYSLL.RIGHT\n.el .ur .tb 23 '&reftab'&SYSLL.RIGHT\n.fo off;.su on\n.sp\n  *  INDICATES CONTROL WORD CAUSES A BREAK\n.sp\n.cp begin\n.uc Backspace\n.sp\n     BackSpace\t.BS <char> <H\b_J\b_O\b_I\b_N\b_|NOHJOIN> \t&bs\n.cp end\n.sp;.cp begin\n.uc Boxes\n.sp\n  *  BoX\t.BX <<v1 <v2 ... >>|OFF|DELETE> \t&bx\n.cp end\n.sp\n.cp begin\n.uc Comment\n.sp\n     CoMment\t.CM <anything> \t&cm\n     Comment\t.*  <anything> \t&cm\n.cp end\n.sp\n.cp begin\n.uc Conditional Facilities\n.sp\n     Conditional\t.CS n <<ON|OFF>|<INCLUDE|IGNORE>> \t&cs\n        Section\n     IF\t.IF opnd <operator> opnd <line> \t&if\n     THen\t.TH line \t&th\n     ELse\t.EL line \t&el\n     DO\t.DO <B\b_E\b_G\b_I\b_N\b_|END> \t&do\n.if '&type' eq ALL\n     ENd \"do\"\t.EN    \t&en\n     PErform\t.PE <1\b_|n|YES|NO|DELETE> \t&pe\n.sp\n     see also .CC, .CP, .SK, .SP\n.cp end\n.sp\n.cp begin\n.uc Control Word Operations\n.sp\n     Control Word\t.CW <;|char> \t&cw\n        separator\n     Control word\t.CR <oo <ww>> \t&cr\n        Replacement\n     LIteral\t.LI <1\b_|n|ON|OFF|char|line> \t&li\n     Null\t.   <line> \t&nl\n.cp end\n.sp\n.cp begin\n.uc EasySCRIPT\n.sp\n     EasySCRIPT\t.EZ <ON <lastDewey>> \t&ez\n               \t    <OFF           >\n               \t    <tagval line   >\n.cp end\n.sp\n.cp begin\n.uc File Processing\n.sp\n     APpend\t.AP Filename <args> \t&ap\n     IMbed\t.IM Filename <args> \t&im\n     End of File\t.EF <Y\b_E\b_S\b_|NO> \t&ef\n     PUt workfile\t.PU <1\b_|n> <line> \t&pu\n  *  Quit Quickly\t.QQ <Y\b_E\b_S\b_|NO> \t&qq\n  *  QUit\t.QU <Y\b_E\b_S\b_|NO> \t&qu\n.sp\n     GOto\t.GO <ident|n|+n|-n> \t&go\n     LaBel\t.LB <ident|n> <line> \t&lb\n     LaBel\t... <ident|n> <line> \t&lb\n.cp end\n.sp\n.cp begin\n.uc Floating Text Blocks\n.sp\n     Floating Block\t.FB <BEGIN|END <0\b_|m>> \t&fb\n                   \t    <DUMP <n>>\n     Floating Keep\t.FK <BEGIN|END <0\b_|m>> \t&fk\n                  \t    <DUMP <n>>\n.cp end\n.sp\n.cp begin\n.uc Footnotes\n.sp\n     FootNote\t.FN <BEGIN|END> \t&fn\n             \t    <SET n>\n             \t    <SET n /s1/s2/s3/>\n.cp end\n.sp\n.cp begin\n.uc Formatting\n.sp\n  *  BReak\t.BR <line> \t&br\n  *  CEnter\t.CE <1\b_|n|YES|NO|line> \t&ce\n  *  COncatenate\t.CO <Y\b_E\b_S\b_|NO> \t&co\n  *  FOrmat\t.FO <Y\b_E\b_S\b_|NO|LEFT|RIGHT|CENTRE> \t&fo\n           \t    <INSIDE|OUTSIDE|HALF>\n.if '&type' eq all;.do\n  *      or\t.FI <Y\b_E\b_S\b_|NO|LEFT|RIGHT|CENTRE> \t&fi\n           \t    <INSIDE|OUTSIDE|HALF>\n.do end\n  *  JUstify\t.JU <Y\b_E\b_S\b_|NO|LEFT|RIGHT|CENTRE> \t&ju\n            \t    <INSIDE|OUTSIDE|HALF>\n  *  Left Adjust\t.LA <1\b_|n|YES|NO|line> \t&la\n.if '&type' eq all\n  *  No Concatenate\t.NC <Y\b_E\b_S\b_|NO> \t&nc\n.if '&type' eq ALL\n  *  No Format\t.NF <Y\b_E\b_S\b_|NO> \t&nf\n.if '&type' eq ALL\n  *  No Justify\t.NJ <Y\b_E\b_S\b_|NO> \t&nj\n  *  Out Justify\t.OJ <1\b_|n|YES|NO|line> \t&oj\n  *  Right Adjust\t.RA <1\b_|n|YES|NO|line> \t&ra\n.if '&type' eq ALL\n  *            or\t.RI <1\b_|n|YES|NO|line> \t&ri\n.cp end\n.sp\n.cp begin\n.uc Formatting Environment Status\n.sp\n     REstore status\t.RE    \t&re\n     SAve status\t.SA    \t&sa\n.cp end\n.sp\n.cp begin\n.uc Headnotes\n.sp\n     HeadNote\t.HN <EVEN|ODD> <BEGIN|END> \t&hn\n             \t    <EVEN|ODD> <PURGE|DUMP>\n.cp end\n.sp\n.cp begin\n.uc Hyphenation Control\n.sp\n     HYphenation\t.HY <ON|USER|OFF> \t&hy\n                \t    <SET THRESH <5\b_|n|+n|-n>>\n                \t    <SET MINPT <3\b_|n|+n|-n>>\n                \t    <SET ENDPT <3\b_|n|+n|-n>>\n                \t    <SET SUP   <3\b_|n|+n|-n>>\n                \t    <SUP>\n                \t    <ADD|DELETE|CHANGE> word-with-breaks\n                \t    <TEST word-without-breaks|DUMP|PURGE>\n     Hyphenate Word\t.HW text-line \t&hw\n.cp end\n.sp\n.cp begin\n.uc Index\n.sp\n     IndeX\t.IX <1\b_|n> 'S1' <'S2' <'S3'>> <<.> <ref>>\n          \t    <1\b_|n> . <DUMP|PURGE> \t&ix\n.cp end\n.sp\n.cp begin\n.uc Line Spacing\n.sp\n  *  SKip\t.SK <1\b_|n> <A> <C> \t&sk\n  *  SPace\t.SP <1\b_|n> <A> <C> \t&sp\n  *  LiNe immediate\t.LN <n|+n|-n> \t&ln\n  *  Single Space\t.SS    \t&ss\n  *  Double Space\t.DS    \t&ds\n  *  Line Spacing\t.LS <0\b_|n|+n|-n|YES|NO> \t&ls\n  *  Don't Count\t.DC     \t&dc\n     LEading space\t.LE <Y\b_E\b_S\b_|NO> \t&le\n.cp end\n.sp\n.cp begin\n.uc Macros\n.sp\n     Define Macro\t.DM name /line1/...linen</> \t&dm\n                 \t    name <BEGIN|END>\n                 \t    name DELETE\n     Macro\t.MS <ON|OFF> \t&ms\n        Substitution\n.cp end\n.sp\n.cp begin\n.uc Margin Modification\n.sp\n  *  ADjust\t.AD <EVEN|ODD> <0\b_|n|+n|-n> \t&ad\n  *  Hanging Indent\t.HI <0\b_|n|+n|-n|YES|NO> \t&hi\n  *  INdent\t.IN <0\b_|m|+m|-m|*> <0\b_|n|+n|-n|*> \t&in\n  *  Indent Line\t.IL <0\b_|n|+n|-n> \t&il\n  *  OFfset\t.OF <0\b_|n|+n|-n> \t&of\n.if '&type' eq ALL\n  *  Paragraph Indent\t.PI <0\b_|n|+n|-n|YES|NO> \t&pi\n  *  Paragraph start\t.PP <line> \t&pp\n.if '&type' eq ALL\n  *  UNdent\t.UN <0\b_|n|+n|-n> \t&un\n.cp end\n.sp\n.cp begin\n.uc Multiple Columns\n.sp\n     Balance Columns\t.BC <O\b_N\b_|OFF> \t&bc\n  *  Column Begin\t.CB      \t&cb\n     Conditional\t.CC <0\b_|n|BEGIN|END <0\b_|m>> \t&cc\n        Column\n  *  Column\t.CD <n <d1 <d2 ... d9>>> \t&cd\n        Definition\n  *  Column Length\t.CL <0\b_|n|+n|-n> \t&cl\n  *  Multiple Column\t.MC      \t&mc\n  *  Single Column\t.SC      \t&sc\n.cp end\n.sp\n.cp begin\n.uc Overlaying Text\n.sp\n     DArk output\t.DA <1\b_|n|+n|-n|YES|NO> \t&da\n     Overlay\t.OC <char|ON|O\b_F\b_f\b_|n> <c1 ...> \t&oc\n        Character\t    char/<ON|OFF|n> <c1 ...>\n     Output Overlay\t.OO <1\b_|n|ON <string>> \t&oo\n                   \t    <OFF|DELETE>\n     OVerlay on    \t.OV <1\b_|n|ON <string>> \t&ov\n        input      \t    <OFF|DELETE>\n.cp end\n.sp\n.cp begin\n.uc Page Dimensions\n.sp\n  *  Line Length\t.LL <6\b_0\b_|n|+n|-n> \t&ll\n  *  Page Length\t.PL <6\b_6\b_|n|+n|-n> \t&pl\n.sp\n  *  Top Margin\t.TM <6\b_|n|+n|-n> \t&tm\n  *  Heading Margin\t.HM <1\b_|n|+n|-n> \t&hm\n  *  Heading Space\t.HS <1\b_|n|+n|-n> \t&hs\n.sp\n  *  Bottom Margin\t.BM <6\b_|n|+n|-n> \t&bm\n  *  Footing Margin\t.FM <1\b_|n|+n|-n> \t&fm\n  *  Footing Space\t.FS <1\b_|n|+n|-n> \t&fs\n.cp end\n.sp\n.cp begin\n.uc Page Numbering\n.sp\n     Page Symbol\t.PS <%\b_|Character> \t&ps\n     Page Numbering\t.PN <O\b_N\b_|OFF|ONOFF> \t&pn\n                   \t    <ARABIC|ROMAN <L\b_O\b_W\b_E\b_R\b_|UPPER>>\n                   \t    <PREFIX|SUFFIX <string>>\n                   \t    <FRAC|NORM>\n.if '&type' eq ALL\n     ARabic\t.AR <L\b_O\b_W\b_E\b_R\b_|UPPER> \t&ar\n.if '&type' eq ALL\n     ROman\t.RO <L\b_O\b_W\b_E\b_R\b_|UPPER> \t&ro\n.cp end\n.sp\n.cp begin\n.uc Page Spacing\n.sp\n  *  PAge eject\t.PA <%\b_+\b_1\b_|n|+n|-n <m|+m|-m>> \t&pa\n               \t    <YES|NO|ODD|EVEN>\n     Conditional Page\t.CP <0\b_|n|BEGIN|END <0\b_|m>> \t&cp\n.if '&type' eq ALL\n  *  Even Page eject\t.EP    \t&ep\n.if '&type' eq ALL\n  *  Page eVen\t.PV    \t&pv\n.if '&type' eq ALL\n  *  Odd Page eject\t.OP    \t&op\n.if '&type' eq ALL\n  *  Page oDd\t.PD    \t&pd\n     EMpty page\t.EM <Y\b_E\b_S\b_|NO|OFFNO> \t&em\n.cp end\n.sp\n.cp begin\n.uc Page Titles\n.sp\n     Top Title\t.TT <1\b_|n> /S1/S2/S3/ \t&tt\n.if '&type' eq ALL\n     HEading\t.HE <1\b_|n> <S1|'S1'S2'S3'> \t&he\n     Even Title\t.ET <1\b_|n> /S1/S2/S3/ \t&et\n.if '&type' eq ALL\n     Heading eVen\t.HV <1\b_|n> <S1|'S1'S2'S3'> \t&hv\n     Odd Title\t.OT <1\b_|n> /S1/S2/S3/ \t&ot\n.if '&type' eq ALL\n     Heading oDd\t.HD <1\b_|n> <S1|'S1'S2'S3'> \t&hd\n.sp\n     Bottom Title\t.BT <1\b_|n> /S1/S2/S3/ \t&bt\n.if '&type' eq ALL\n     Footing\t.FE <1\b_|n> <S1|'S1'S2'S3'> \t&fe\n     Even Bottom\t.EB <1\b_|n> /S1/S2/S3/ \t&eb\n.if '&type' eq ALL\n     Footing eVen\t.FV <1\b_|n> <S1|'S1'S2'S3'> \t&fv\n     Odd Bottom\t.OB <1\b_|n> /S1/S2/S3/ \t&ob\n.if '&type' eq ALL\n     Footing oDd\t.FD <1\b_|n> <S1|'S1'S2'S3'> \t&fd\n.cp end\n.sp\n.cp begin\n.uc Reference Variables\n.sp\n     Read Variable\t.RV symbol \t&rv\n     SEt reference\t.SE symbol=<'string'|expression> \t&se\n     Set Reference\t.SR symbol <'string'|expression> \t&sr\n     SUbstitute\t.SU <1\b_|n|ON|OFF|line> \t&su\n        reference\t    <U\b_P\b_P\b_E\b_R\b_|NOUPPER>\n                 \t    <TRACEON|TRACEOFF>\n     Use Reference\t.UR line \t&ur\n.cp end\n.sp\n.cp begin\n.uc Remotes\n.sp\n     ReMote\t.RM <*|n|name <m|SAVE|N\b_O\b_S\b_A\b_V\b_E\b_> <S\b_A\b_V\b_E\b_|NOSAVE>>\n           \t    <*|n|name DELETE>\n           \t    <DELETE> \t&rm\n     SIgnal remote\t.SI <*\b_|n|name> <args> \t&si\n.cp end\n.sp\n.cp begin\n.uc Revision Codes\n.sp\n     Revision Code\t.RC n <ON|OFF|ON/OFF> \t&rc\n                  \t    n <char|SET string>\n.cp end\n.sp\n.cp begin\n.uc System Communication\n.sp\n     SYstem\t.SY line \t&sy\n.cp end\n.sp\n.cp begin\n.uc Tabs\n.sp\n  *  TaB\t.TB <n1 n2 n3 ...> \t&tb\n        \t    <<'string'|char/>n<L\b_|R|C|'char'> ...>\n        \t    <SET <char>>\n.cp end\n.sp;.cp begin\n.uc Tables of Contents\n.sp\n     Define Heading\t.DH <SET m> n <<SKBF n> <SPAF n>\n                   \t               <TCOF n> <TCIN n>\n                   \t               <BR|NBR> <OJ|NOJ>\n                   \t               <PA|NPA> <TC|NTC>\n                   \t               <TO|NTO> <TS|NTS>\n                   \t               <UP|NUP> <US|NUS>> \t&dh\n  *  Heading Level\t.HL <0\b_|n> line \t&hl\n  *     or        \t.Hn line \t&h0\n     Put Table of\t.PT <line> \t&pt\n        contents\n  *  Table of\t.TC <1\b_|n|* <C\b_O\b_N\b_T\b_E\b_N\b_T\b_S\b_|line>> \t&tc\n        Contents\t    <ADD <m ... >>\n                \t    <PURGE>\n.cp end\n.sp\n.cp begin\n.uc Terminal Input and Output\n.sp\n     ERror\t.ER <n|*> <line> \t&er\n     ReaD terminal\t.RD <1\b_|n> \t&rd\n     TErminal input\t.TE <1\b_|n> \t&te\n     TYpe on terminal\t.TY <information> \t&ty\n.if '&type' eq ALL\n     PRint\t.PR <information> \t&pr\n.cp end\n.sp\n.cp begin\n.uc Translation of Characters\n.sp\n     Translate on\t.TI <s <s\b_|t>> \t&ti\n        Input    \t    <<s1 t1> <s2 t2> ...>\n                 \t    <SET <char>>\n     TRanslate   \t.TR <s <s\b_|t>> \t&tr\n        on output\t    <<s1 t1> <s2 t2> ...>\n.cp end\n.sp\n.cp begin\n.uc Underscoring and Uppercase\n.sp\n     Underscore and\t.UC <line> \t&uc\n        Capitalize\n     Underscore\t.UD <<ON|OFF> <char1 ... >> \t&ud\n        Definition\t    <SET|INCLUDE|IGNORE <char>>\n.if '&type' eq ALL\n     Underline\t.UL <1\b_|n|ON|OFF> <line> \t&ul\n     UPpercase\t.UP <line> \t&up\n     UnderScore\t.US <line> \t&us\n.cp end\n.sp;.cp begin\n.uc Widow Control\n.sp\n     WiDow\t.WD <Y\b_E\b_S\b_|NO> \t&wd\n.cp end\n.fo on;.su off\n.tb\n.in\n.cm End of REFALPH\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "REFERENC": {"ttr": 4615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00:\\x00:\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT Introduction Driver\n.ur .if &SYSAD lt 10;.ad 10\n.tt ////\n.bt //-%-//\n.bm 5\n.ti SET !\n.ti T 05\n.ur .if &SYSPASSNO eq 1;.im SUPERT\n.pn ROMAN\n.le yes\n.sp 5\n.le no\n.ce 1;.us UOW_SCRIPT\n.sp\n.ce 1;.us A_TEXT_FORMATTER\n.sp 2\n.us Table of Contents\n.sp\n.ur .tb -/&SYSLL\n!T\n.sp\n.sa;.* SAVE THE ENVIRONMENT\n.ur .tb ./&SYSLL-8\n.se c=&c+0;.se i=0\n.fo no;.in +5\n.ur .pe &c;.se i=&i+1;.ur .ur &&t(&i) !T &&p(&i)\n.sp\n.re;.* RESTORE THE ENVIRONMENT - TABS, INDENT, FORMAT.\n.ur .tb -/&SYSLL\n!T\n.im REF$\n.sp\n.cs 99 include\n.cs 99 begin\n.rc 01 |\n.rc 02 !!;.cm Note double exclamation marks for .ti support.\n.rc 01 on\nThis small paragraph was added at the last moment.  It will\nonly be included conditionally as a demonstration of conditional\nsections.\n.rc 02 on/off\nNote the revision code characters in the left margin.\nAnd that closes these trivial comments on the same page as the\nTable of Contents.\n.rc 01 off\n.cs 99 end\n.tt /SCRIPT//SCRIPT/;.pa 1;.pn ARABIC\n.im REFINTRO\n.ti;.pa\n.im SETADD\n.im OPTIONS\n.im APENDIXD\n.pa\n.im REFALPH\n.pa\n.im APENDIXI\n.qt\n.cm End of Introduction Driver\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REFINTRO": {"ttr": 4617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x02\\x02\\x02\\x02\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 514, "newlines": 514, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "RM": {"ttr": 4871, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x94\\x00\\x94\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 148, "newlines": 148, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "RO": {"ttr": 4875, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x17\\x00\\x17\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "RV": {"ttr": 4877, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00'\\x00'\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 39, "newlines": 39, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE RV\n.SUBT Purpose\n.in 5\nThe READ VARIABLE control word allows the user to set\nthe value of a variable symbol from an online terminal.\n.SUBT Format\n|\n|  .RV           name\n|\n.SUBT Usage\nThe .RV control word verifies that the \"name\" operand is a\nvalid reference name.\nIf it is then one line of data is read from the terminal and\nthis line is used as the right hand operand of a SET\nREFERENCE (.SR) control line.\n.sp\nNo message is displayed at the terminal indicating a READ\nVARIABLE is being done.\nThis may be done with a TYPE ON TERMINAL (.TY) control word\npreceeding the .RV.\n.SUBT Defaults\nThis command word does not create a break.\n.SUBT Examples\n.of 4\n(1) .rv TEST\n.sp\nIf 'NONE' were entered at the terminal then this would be\nequivalent to:\n.sp\n.li .sr TEST='NONE'\n.sp\n.of 4\n(2) .rv array(1)\n.sp\nIf \"3*99/5\" were entered at the terminal then this would be\nequivalent to:\n.sp\n.li .sr array(1)=3*99/5\n.cm End of RV\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "SA": {"ttr": 4879, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00=\\x00=\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 61, "newlines": 61, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE SA\n.SUBT Purpose\nThe SAVE STATUS control word saves the current page environment\nin a push down stack to be restored later with a RESTORE STATUS.\n.SUBT Format\n|\n|  .SA\n|\n.SUBT Usage\nIn order to design a modular SCRIPT input file, it may be necessary\nto alter one or more formatting characteristics for a section or\nchapter.  For example, a new absolute INDENT value may be desired\nwithout knowing the value of the existing INDENT and that value must\nbe restored before returning control.  The SAVE STATUS control word\nwill save the current page environment in a push down stack\nof up to nine levels, to be popped up later with a RESTORE STATUS.\nNote that SAVE STATUS does not change any current values.\n.sp 1\nThe status of the following control words are saved:\n.cd 2 6 33\n .AD Adjust\n .BC Balance Columns\n .BM Bottom Margin\n .CD Column Definition\n .CE Centre\n .CL Column Length\n .CO Concatenate\n .DA Dark Output\n .DS Double Space\n .FM Footing Margin\n .FO Format\n .FS Footing Space\n .HI Hanging Indent\n .HM Heading Margin\n .HS Heading Space\n .HY Hyphenation Set\n .IL Indent Line\n .IN Indent\n .JU Justify\n .LA Left Adjust\n .LE Leading Space\n .LI Literal\n .LL Line Length\n .LS Line Spacing\n .OC Overlay Character\n .OF Offset\n .PI Paragraph Indent\n .PL Page Length\n .PN Page Numbering\n .RA Right Adjust\n .SS Single Space\n .SU Substitute Mode\n .TB Tab Setting\n .TI Translate on Input\n .TM Top Margin\n .TR Translate\n .UN Undent\n.cd 1 0\n.SUBT Defaults\nThis command does not cause a break.\n.cm End of SA\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SC": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT Reference SC\n.SUBT Purpose\nThe SINGLE COLUMN control word temporarily suppresses multiple column\noutput.\n.SUBT Format\n|\n|  .SC\n|\n.SUBT Usage\nWhen in Multiple Column mode, this control word may be used to\ntemporarily revert to single column output.\nThis may be useful for defining a single column figure in\nthe middle of text.\nThe text to that point will be formatted according to the\ncurrent COLUMN DEFINITION and BALANCE COLUMN control words.\nThe Line Length (.LL) is restored before proceeding.\nMultiple Column output is restored by the next MULTIPLE\nCOLUMN (.MC) or COLUMN DEFINITION (.CD) control word.\n.sp\nIf MULTIPLE COLUMN is not in effect when this control word\nis encountered, a break will be caused, and no other action.\n.SUBT Defaults\nThis control word creates a break.\nIt takes no operands.\n.SUBT Notes\n.of 4\n(1) This control word is illegal within a Keep or Footnote.\n.cm End of SC\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SCRDOC": {"ttr": 5123, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x01p\\x01p\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 368, "newlines": 368, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT Implementation Guide\n.ur .if &SYSAD lt 10 and &SYSOUT eq PRINT .ad 10\n.bt ''-%-''\n.ll 55\n.tm 6\n.hm 2\n.bm 4\n.fm 1\n.tr \u00ac / @ 40\n.sp 12\n.ra 1\n.ur &SYSDATE\n.sp\nMEMORANDUM\n.sp 2\nTo:       SCRIPT Users\n.sp\n.ur Subject:  &sysversion\n.sp\nFrom:     Mrs. Sandi Ward\n          Department of Computing Services\n          University of Waterloo\n          Waterloo, Ontario\n          Canada   N2L 3G1\n.sp\n     ---------------------------------------------\n.sp 2\n.ul Disclaimer:\n.sp\n.ds\n.in +5 -5\nAlthough this programme has been tested by its developer, no\nwarranty, expressed or implied, is made by the developer or the\nUniversity of Waterloo, as to the accuracy and functioning of the\nprogramme and related programme material, nor shall the fact of\ndistribution constitute any such warranty, and no responsibility\nis assumed by the developer or the University of Waterloo,\nin connection therewith.\n.ss\n.in\n.pa\n.tt /SCRIPT//SCRIPT/\n     Distribution of the current version of SCRIPT will be\nmade to those users who submit a 1200 foot or larger reel of tape\nand a check or purchase order for twenty-five dollars\n($25 in Canadian funds) to cover costs of distribution.\nThe distribution tape is the result of\ndoing IEHMOVEs from 2314 disk to tape.  The\ntape will be 9-track and 800 or 1600 BPI depending upon request.\nIt is labelled 'SCRIPT' and contains the following datasets.\n.sp 2\n.fo no\n        DSNAME     SEQ     CONTENTS\n.sp\n     SCRIPT.TEXT    1  Object decks\n                       SPACE=(3200,(80,,3))\n                       RECFM=FB,LRECL=80,BLKSIZE=3200\n     SCRIPT.FMEMO   2  Documentation (Recfm=FB,\n                            Unsequenced for CMS)\n                       SPACE=(3360,(500,,12))\n                       RECFM=FB,LRECL=80,BLKSIZE=3360\n     SCRIPT.MEMO    3  Documentation (Recfm=VB,\n                            Unsequenced for OS)\n                       SPACE=(3360,(220,,12))\n                       RECFM=VB,LRECL=84,BLKSIZE=3360\n     SCRIPT.SOURCE  4  Source\n                       SPACE=(3360,(200,,3))\n                       RECFM=FB,LRECL=80,BLKSIZE=3360\n     SCRIPT.MACLIB  5  Macros and Copy Code\n                       SPACE=(3360,(800,,20))\n                       RECFM=FB,LRECL=80,BLKSIZE=3360\n     SCRIPT.LOAD    6  Load module\n                       SPACE=(7294,(40,,3))\n                       RECFM=U,LRECL=7294,BLKSIZE=7294\n     SCRIPT.SYSHYPH 7  Hyphenation Exception Dictionary\n                       SPACE=(3360,(20))\n                       RECFM=VB,LRECL=80,BLKSIZE=3360\n     SCRIPT.TSO     8  Alternate TSO Interface material\n                       SPACE=(3360,(120,,3))\n                       RECFM=FB,LRECL=80,BLKSIZE=3360\n.fo yes\n.pa\n     Following is suggested JCL to assemble and linkedit\none new member '??' into SCRIPT for use under OS.\nNote that source members CMSCRIPT and TSOCRIPT are not\nassembled this way.\n.sp\n.fo no\n\u00ac\u00ac??  JOB  '#############,T=1,P=200'\n\u00ac\u00ac*  SCRASLK - TO ASSEMBLE AND LINK A SCRIPT MODULE\n\u00ac\u00acSTEP1  EXEC  PGM=ASMGASM,REGION=150K,\n\u00ac\u00ac             PARM='TERM'\n\u00ac\u00acSYSLIB   DD  DSN=SCRIPT.MACLIB,DISP=SHR\n\u00ac\u00ac         DD  DSN=SYS1.MACLIB,DISP=SHR\n\u00ac\u00acSYSUT1   DD  DSN=&&SYSUT1,DISP=(NEW,DELETE,DELETE),\n\u00ac\u00ac         SPACE=(CYL,(6,1)),UNIT=2314\n\u00ac\u00acSYSUT2   DD  DSN=&&SYSUT2,DISP=(NEW,DELETE,DELETE),\n\u00ac\u00ac         SPACE=(CYL,(8,2)),UNIT=(2314,SEP=SYSUT1)\n\u00ac\u00acSYSUT3   DD  DSN=&&SYSUT3,DISP=(NEW,DELETE,DELETE),\n\u00ac\u00ac         SPACE=(CYL,(8,2)),UNIT=(2314,SEP=(SYSUT1,SYSUT2))\n\u00ac\u00acSYSPRINT DD SYSOUT=A\n\u00ac\u00acSYSTERM  DD SYSOUT=A\n\u00ac\u00acSYSLIN   DD DSN=SCRIPT.TEXT(??),DISP=OLD\n\u00ac\u00acSYSIN    DD DSN=SCRIPT.SOURCE(??),DISP=SHR\n\u00ac\u00acLKED    EXEC  PGM=LINKEDIT,REGION=180K,\n\u00ac\u00ac             PARM='LIST,XREF,NCAL,SIZE=(180K,50K)'\n\u00ac\u00acSYSPRINT  DD  SYSOUT=A\n\u00ac\u00acSYSUT1    DD  DSN=&&SYSUT,DISP=(NEW,DELETE,DELETE),\n\u00ac\u00ac          SPACE=(CYL,(1,1)),UNIT=2314\n\u00ac\u00acMODLIB    DD  DSN=SCRIPT.TEXT,DISP=SHR\n\u00ac\u00acSYSLMOD   DD  DSN=SCRIPT.LOAD,DISP=OLD\n\u00ac\u00acSYSLIN    DD  *\n         INCLUDE   MODLIB(SCRIPTW)\n         INCLUDE   MODLIB(SCRIPTCW)\n         INCLUDE   MODLIB(SCRIPTFO)\n         INCLUDE   MODLIB(SCRIPTHY)\n         INCLUDE   MODLIB(SCRIPTMC)\n         INCLUDE   MODLIB(SCRIPTOU)\n         INCLUDE   MODLIB(SCRIPTPM)\n         INCLUDE   MODLIB(SCRIPTRD)\n         INCLUDE   MODLIB(SCRIPTSY)\n         INCLUDE   MODLIB(SYSINT)\n         ENTRY     SCRIPTW\n         NAME      SCRIPT(R)\n\u00ac*\n.fo\n.sp\n.cp begin\n     The inclusion of SCRIPTHY, the hyphenation routine, may be\ndeleted to save some 12K in the size of the module.\nHarmless Unresolved External References will result\nand the Hyphenation (.HY) facilities may not be used.\n.cp end\n.sp 2\n.cp begin\n     Following is a suggested procedure for running\nSCRIPT in OS batch.\n.sp\n.fo no\n\u00ac\u00acSCRIPT   PROC PROG=SCRIPT,SCRIPT=,SIZE=128K\n\u00ac\u00acSCRIPT   EXEC PGM=&PROG,PARM='&SCRIPT',REGION=&SIZE\n\u00ac\u00ac*\n\u00ac\u00ac*      S C R I P T\n\u00ac\u00ac*\n\u00ac\u00acSTEPLIB   DD  DSN=SCRIPT.LOAD,DISP=SHR\n\u00ac\u00acSYSHYPH   DD  DSN=SCRIPT.SYSHYPH,DISP=SHR\n\u00ac\u00acSYSPRINT  DD  SYSOUT=A\n\u00ac\u00acSYSTERM   DD  SYSOUT=A\n.fo\n.cp end\n.sp 2\n.cp begin\n     Following is a suggested procedure for formatting a\nSCRIPT manual in OS batch.\n.sp\n.fo no\n\u00ac\u00acSCRIPTMN PROC PROG=SCRIPT,MEM=SCRIPT,SCRIPT=,SIZE=160K\n\u00ac\u00ac         EXEC PGM=&PROG,PARM='&SCRIPT',\n\u00ac\u00ac             REGION=&SIZE\n\u00ac\u00ac*\n\u00ac\u00ac*      TO FORMAT AN OFFLINE SCRIPT MANUAL\n\u00ac\u00ac*\n\u00ac\u00acSTEPLIB   DD  DSN=SCRIPT.LOAD,DISP=SHR\n\u00ac\u00acSYSHYPH   DD  DSN=SCRIPT.SYSHYPH,DISP=SHR\n\u00ac\u00acSYSPRINT  DD  SYSOUT=A\n\u00ac\u00acSYSTERM   DD  SYSOUT=A\n\u00ac\u00acSYSLIB    DD  DSN=SCRIPT.MEMO,DISP=SHR\n\u00ac\u00acSYSIN     DD  DSN=SCRIPT.MEMO(&MEM),DISP=SHR\n.fo\n.cp end\n.sp 2\n.cp begin\n     Then to format a SCRIPT Reference Guide, run the\nfollowing job:\n.sp\n.fo no\n\u00ac\u00acSCRIPTMN  JOB  '#,T=2,P=200'\n\u00ac\u00ac     EXEC  SCRIPTMN\n.fo\n.cp end\n.sp\n.cp begin\n     Note that using the default PASS=1 option causes the table\nof contents to print at the end of the manual.\nTo make the table of contents print at the start, after the\nheader page, add PASS=2 to the parm field.\n.cp end\n.sp 2\n.cp begin\n     Member SYSPUB within SCRIPT.MEMO contains a sample set of\nSCRIPT high level Macros for formatting a thesis or\nother research report in chapters and\nsections with an automatic Table of Contents and\nFigure, Footnote and Table numbering.\nTo format documentation for SYSPUB that uses SYSPUB\nwith automatic hyphenation:\n.sp\n\u00ac\u00acSYSPUBMN  JOB  '#,T=1,P=50'\n.br\n\u00ac\u00ac     EXEC  SCRIPTMN,MEM=SYSPUBMN,SIZE=250K\n.cp end\n.sp 2\n.cp begin\n     To format an Introduction to SCRIPT that uses SYSPUB\nwith automatic hyphenation:\n.sp\n\u00ac\u00acSCRINTRO  JOB  '#,T=1,P=50'\n.br\n\u00ac\u00ac     EXEC  SCRIPTMN,MEM=SCRINTRO,SIZE=250K\n.cp end\n.sp 2\n.cp begin\n     To format a SCRIPT Techniques Guide that uses SYSPUB\nwith automatic hyphenation:\n.sp\n\u00ac\u00acSCRIPTNI  JOB  '#,T=1,P=50'\n.br\n\u00ac\u00ac     EXEC  SCRIPTMN,MEM=SCRIPTNI,SIZE=250K\n.cp end\n.sp 2\n.cp begin\n     To format a sample SCRIPT Reference Card:\n.sp\n\u00ac\u00acSCRIPTCD  JOB  '#,T=1,P=20'\n.br\n\u00ac\u00ac     EXEC  SCRIPTMN,MEM=SCRIPTCD\n.cp end\n.sp 2\n.cp begin\n     The following discourse concerns generating and running\nSCRIPT under CMS.\n.sp\n     Since the distribution tape is in unloaded IEHMOVE format\nthe data must be restored using the IEHMOVE facilities of the\nTAPEPDS and TAPEMAC commands, except SCRIPT.SYSHYPH which is\na sequential file.\n.cp end\n.sp\n     Source member CMSCRIPT is the SCRIPT interface routine.\nAssembling CMSCRIPT requires SCRIPT.MACLIB and CMSLIB.\nThe CMSCRIPT TEXT deck produced includes an ordered table of\nV-cons which forces the CMS LOADER to automatically include all of\nthe required SCRIPT TEXT decks.\nTo generate the SCRIPT MODULE which includes SCRIPT's interface\nroutine perform the following:\n.sp\n     LOAD CMSCRIPT (CLEAR\n     GENMOD SCRIPT (FROM CMSCRIPT\n.sp 2\n     To assemble the source decks of SCRIPT requires SCRIPT.MACLIB\nand the OS macros from the CMS equivalent of SYS1.MACLIB.\nThe SCRIPT source decks that you may wish to assemble all\nhave filenames of pattern 'SCRIPT*' and 'SYSINT'.\n.sp 2\n     Under CMS there is support to type a file \"SCRIPT@MEMO@Y\" in\nresponse to a filename containing a '?'.  The following is a\nsuggestion for this file:\n.pa\n.fo no\nFORMAT:   SCRipt fname ( option1 ... optionN )\n                 where fname has filetype of SCRIPT\n                 and fname '?' for HELP.\n.sp\nOPTIONS:  (Capital letters indicate minimum length,\n           default comes first)\n.sp\nTErminal (or ONline  NOFIle) - output goes to terminal\nMEmo     (or ONline  FIle  ) - output goes to 'fname MEMO'\nDIsk     (or OFfline FIle  ) - output goes to 'fname LISTING'\nPRinter  (or OFfline NOFIle) - output goes to printer\nNOPRint                      - no output produced\n.sp\nNOADjust/ADjust  - thirty columns from left margin\nNOCEnter/CEnter  - same as ADJUST\nNOCOnt/COntinue  - continue in spite of errors\nNODEBUG/DEBUG    - for program debugging features\nFOrmat/NOFOrmat  - to disable text formatting\nLOCal/GLObal     - to define positional call arguments\nNOMArk/MArk      - to indicate start of text lines\nNONUmber/NUmber  - to show filename and record number\nPROFile/NOPROFile - to imbed \"PROFILE SCRIPT\"\nNOQUiet/QUiet    - to suppress ONLINE version message\nNOSCREen/SCREen  - for ONLINE output to a CRT\nSIX/EIGHT        - initial six or eight lines per 11\" page\nNOSTAT/STAT      - statistics on error file\nNOSTop/STop      - wait at bottom of each page\nNOTRans/TRans    - uppercase conversion of output\nONEPass/TWOPass  - number of passes to produce output\nUPper/NOUPper    - reference names to uppercase\nWAit/NOWAit      - prompt for first ONLINE page insertion\n.sp\nADjust=<0|nn>     - adjust output from left margin\nBMargin=<6|nn>    - default BOTTOM MARGIN\nCENTER=<0|nn>     - same as ADJUST\nCOntinue=<0|n>    - continue for number of errors\nDArk=<1|n>        - DARK Offline Output\nFFCHannel=<1|n>   - printer channel skip to align page\nFFTOp=<3|n>       - line number of page with channel skip\nFMargin=<1|nn>    - default FOOTING MARGIN\nFNSize=<200|nn>   - max outstanding footnote lines\nHMargin=<1|nn>    - default HEADING MARGIN\nHSFSover=<9|nn>   - Top Title/Bottom Title overlap\nLINenum/LEGalnum=<0|nn> - print page line number in column nn\nLLength=<60|nn>   - default LINE LENGTH\nNUmber=<0|nn>     - same as NUMBER in column nn\nPAge=<1|mm<:nn>>  - output from page mm to page nn\nPASses=<1|nn>     - number of passes to produce output\nPLength=<66|nn>   - default PAGE LENGTH\nRMSize=<200|nn>   - max records per remote\nSEQCol=<240|nn>   - sequence column on variable files\nSRLen=<150|nn>    - max length of character value\nTABLeft=<0|1>     - left tab adjustment\nTMargin=<6|nn>    - default TOP MARGIN\n.sp\n&string value     - set reference value externally\n.fo\n.pa\n     The following concerns an experimental program\ncalled NSCATS that can convert most of an ATS Archive Document\nto SCRIPT Input format (RECFM=V, unsequenced).\nThe source is in SCRIPT.SOURCE(NSCATS) and should\nbe compiled with PL1/F.  The load module is in SCRIPT.LOAD(NSCATS).\nTo use it requires the following JCL:\n.sp\n.fo no\n\u00ac\u00acNSCATS  JOB  '#,T=1,P=20'\n\u00ac\u00ac       EXEC  PGM=NSCATS,REGION=100K\n\u00ac\u00acSTEPLIB   DD  DSN=SCRIPT.LOAD,DISP=SHR\n\u00ac\u00acSYSPRINT  DD  SYSOUT=A\n\u00ac\u00acSYSUT1    DD  DSN=ATS.ARCHIVE,UNIT=2400,VOL=SER=??????,\n\u00ac\u00ac             DISP=OLD,LABEL=(2,BLP),\n\u00ac\u00ac             DCB=(RECFM=F,LRECL=3100,BLKSIZE=3100)\n\u00ac\u00acSYSUT2    DD  DSN=SCRIPT.INPUT,UNIT=2314,VOL=SER=??????,\n\u00ac\u00ac             DISP=(NEW,KEEP),SPACE=(TRK,(10,10)),\n\u00ac\u00ac             DCB=(RECFM=VB,LRECL=244,BLKSIZE=3520)\n.sp 2\n.fo\n     This version of SCRIPT should run successfully under TSO.\nA sample TSO interface routine is provided in source member\nTSOCRIPT.  This routine is not completely up to date --\nsee comments at start of code.\nA second TSO interface routine which is larger and more up to\ndate is found in file 'SCRIPT.TSO'.\nSee member 'NOTES' within this file for more information.\nTo make SCRIPT compatible with the TSO Editor,\nsequencing in first eight columns of variable length files is\nsupported via the SEQCOLUMN= parameter.\n.sp 2\n.cp 3\n     This current version of SCRIPT was assembled with Assembler\n(G) V2L7a.  Though not every routine was tested, it is expected\nthat Assembler (H) or\nthe IBM VS/VM System Assembler, Assember (XF) may also\nbe used.  It should be noted that any possible future versions may\nagain be resequenced and possibly restructured.\n.sp 2\n.cp 5\n     This tape is being distributed with no warranty, expressed\nor implied.\nThe Department of Computing Services is interested in receiving bug\nreports and ideas for extensions.\n.oc yes\nMoreover, we ask that any extensions made to this package\nbe reported and if possible, that the source changes be\nmade available.\n.oc no\n.qt\n.cm End of SCRDOC\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "SCRINTRO": {"ttr": 5130, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x05\"\\x05\"\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 1314, "newlines": 1314, "modlines": 0, "user": "CBT249"}, "text": "..cm NOTE TO OTHER INSTALLATIONS -------------------------------------------\n..cm\n..cm      ALL INSTALLATION-DEPENDENT TEXT IN THIS INTRODUCTION\n..cm      IS LOCATED IN THE ABSTRACT AND THE CHAPTERS TITLED 'USING SCRIPT'\n..cm      AND 'WHERE TO GO FROM HERE', AND IS BRACKETED BY \"CONDITIONALS\"\n..cm\n..cm for the top title of page 1\n..sr install = 'UNIVERSITY OF WATERLOO COMPUTING CENTRE'\n..cm\n..cm if you don't want the hyphenation exception dictionary,\n..cm remove the \"hy=full\" and set \"withhyph\" to \"without\"\n..sr withhyph = with\n..im syspub layout=guide hy=full\n..hy change op-er-and\n..cm\n..cm The Reference Variable '&site', if null, will cause the Waterloo-\n..cm dependent text to print.  You can therefore specify\n..cm\n..cm      +site=something\n..cm\n..cm in the invoking parameter list to avoid this -- however, you must\n..cm then define three additional input files:\n..cm\n..cm      editors -- text explaining the editors available and where the\n..cm                 user can get more information on them\n..cm      output --  text explaining what is available in the way of high-\n..cm                 speed line-printer setups, etc\n..cm      using --   text explaining the systems available from which the\n..cm                 user can submit (invoke) a SCRIPT job, etc.\n..cm\n..cm END OF NOTE TO OTHER INSTALLATIONS -----------------------------------\n..tm 12;..hs 3\n..ur ..us |..tt 1 /|&install|//|IntroSCR|/\n..ur ..us |.tt 3 /|Introduction to SCRIPT|//&sysdate/\n.prelim 'Abstract'\n..tm 6;..hs 0;..tt ////;..tt 3 ////\n..pp;The University of Waterloo version of SCRIPT\nis a powerful text formatting program.\nSCRIPT is very easy to use for \"simple\" documents such as memos and small\npapers; with just a few SCRIPT commands (called \"control words\"),\nyou can satisfy the formatting\nrequirements of most documents.\n..pp SCRIPT is also extremely useful for the preparation\nof large documents such as manuals, theses, and other research\nand instructional publications.\nBy using some of the \"programming language\" capabilities of SCRIPT, it\nis possible to make SCRIPT generate a table of contents and an index,\nor to write your own control words.\nThis makes SCRIPT\nparticularly useful for the construction and\nmaintenance of large documents, where you wish to be able to\nstandardize the layout and\nmake significant changes to a component of the document (add a chapter, delete\na chapter, or re-order large sections of text) without affecting the rest\nof the document.\n..pp;To use SCRIPT, you must use a text editor to create the input file.\n..ur ..if '&site' ne '';..th ..im editors .;..el ..do\nThere are a number of text editors available to you:\nWITS, WYLBUR, the VM/370 CMS Editor, or CMS WYLBUR.\nIf you are not familiar with any of these editors, introductory\ndocumentation may be obtained from any of the Consulting Offices, and reference\nmanuals are available through the Computer Reference Room.\n..do end\n..pp In all systems, it is\npossible to direct the output to a high-speed line printer.\nThis is usually desirable for \"proofreading\" copies; it is also often\ndesirable for the \"final copy\" of a large document.\n..ur ..if '&site' ne '';..th ..im output .;..el ..do;\nIt is possible for you to\nrequest that the document be printed on white paper.\nSpecial mylar printer\nribbons may be purchased which result in a very high-quality printout acceptable\nfor reproduction by photo-offset printing;\nor, if original copies are required, a heavy-bond paper is also available.\nInformation\non purchasing and using mylar ribbons and/or special paper can be obtained\nby contacting the I/O Services Office (MC 1070, extension 2686).\n..pp;Under CMS, the formatted document may be typed at your terminal,\nstopping at the bottom of each page for the next sheet of paper.\n..do end\n..pp This \"Introduction to SCRIPT\" is intended to\n..ul 1 introduce;you to SCRIPT, and therefore will not discuss all of\nthe features of SCRIPT.\nMost of the SCRIPT control words discussed in this Introduction have\nadditional capabilities;\nthey are described herein in the ways in which they are likely to be used\nmost often.\n..pp;The version of SCRIPT in existence at the time this Introduction was\nprinted was:\n..sp;..ce 1;..ur &sysversion\n.chapter 'Introduction'\n..pp SCRIPT is a computer program which accepts\n..us input,\n..us processes\nit, and produces\n..us output.\n..pp SCRIPT recognizes only two different types of input:\n..us text;and\n..us control words.\nThe processing which SCRIPT performs is called\n..us text formatting.\nThe output produced by SCRIPT is a document\nin which all of the text has been formatted according to the layout\ninstructions specified by the control words.\n.chapter 'Creating the Input'\n..pp The input to SCRIPT is a collection of text and control words which you\ntype at a\n..us typewriter terminal;or\n..us visual-display terminal;by using a\n..us text editor.\nA text editor is a computer program\nwhich allows you to enter, correct, delete, add, and save the text and control\nwords.\n..pp When you are entering the input,\nit is important that you start each sentence of the text on a new\ninput line.  This makes subsequent insertions or deletions of sentences\nmuch easier to perform.\n.section 'Control Words and Text'\n..pp Each time SCRIPT reads an input line, it looks at the character in\ncolumn 1.  If that character is a \".\",\nSCRIPT considers the input to be a control word.\nOtherwise, the input line is treated as text.\n..pp Each SCRIPT control word is of the form\n..sp;     .xx operand(s)\n..sp;The \".\" is called the control word indicator\n..us literal,\n..se lipage = &syspage\nand \"xx\" is a 2-character control word.\n..ix 'li (LITERAL)'\nSome SCRIPT control words have one or more\n..us operands.\nThe first operand begins in the second position after the control word;\neach operand is separated by a blank.\n.section 'Putting More Than One Control Word on the Same Input Line'\n..pp This may be done by separating each control word with a\nsemicolon (;).\nSCRIPT refers to the semicolon as the control word\n..us separator.\n..ix 'cw (CONTROL WORD SEPARATOR)'\nYou can also put text on this same input line.  In general,\nthen, an input line which contains control words is entered as follows:\n..sp;     .xx operands;.yy operands;.zz operands;text\n..sp;where \"xx\", \"yy\", and \"zz\" are control words (with or without operands).\nYou cannot put SCRIPT control words after the text on an input line.\n.chapter 'The Formatting Process'\n..pp The basic step in the text formatting process is the creation of an output\nline.\n.section 'The Line Length'\n..pp The SCRIPT \".ll\"\n..ix 'll (LINE LENGTH)'\nLINE LENGTH\ncontrol word specifies the number of character positions in the output line.\nThe line length for this Introduction was defined with the control word\n..sp;..ur      .ll &sysll\n..sp\nThe operand can be an absolute numeric value, as above,\nor a signed numeric, such as\n..sp;     .ll +20\n..sp;which adds 20 to the current LINE LENGTH value.\nIf no operand is specified,\nthe default of sixty will be assumed.\nNormally, you will specify the value for \".ll\" at the beginning of the\ndocument and then not change it.\n.section 'Single- and Double-Spacing'\n..pp By default, SCRIPT single-spaces the output lines.  The SCRIPT \".ds\"\n..ix 'ds (DOUBLE SPACING)';DOUBLE SPACING control word will cause a blank\nline to be generated between each output line.  You can get SCRIPT to revert\nto single-spacing by issuing the \".ss\"\n..ix 'ss (SINGLE SPACING)';SINGLE SPACING control word.\n.section 'Starting a New Paragraph'\n..pp The easiest way to define the start of a new paragraph is to use the\nSCRIPT \".pp\"\n..ix 'pp (PARAGRAPH START)';PARAGRAPH START control word.  For example,\n..sp;     .pp;This is the start of a new paragraph ...\n..sp;produces:\n..pp;This is the start of a new paragraph.  The \".pp\" control word skips\na line and indents the line of text 3 spaces.\n..in\n.section 'Underscoring and Capitalizing'\n..pp The SCRIPT \".us\"\n..ix 'us (UNDERSCORE)';UNDERSCORE control word, \".up\"\n..ix 'up (UPPERCASE)';UPPERCASE control word, and \".uc\"\n..ix 'uc (UNDERSCORE AND CAPITALIZE)';UNDERSCORE AND CAPITALIZE control word\nallow you to underscore and/or capitalize a single line of text.\nThey are of the form\n..sp;     .us line of text to be underscored\n     .up line of text to be capitalized\n     .uc line of text to be underscored (and capitalized)\n..sp;and produce the following effects:\n..in 5\n..sp;..us line of text to be underscored\n..br;..up line of text to be capitalized\n..br;..uc line of text to be underscored (and capitalized)\n..in\n..pp With \".us\" and \".uc\", it is possible to underscore only selected\nparts of the line.\nThis requires that the SCRIPT \".ud\"\n..ix 'ud (UNDERSCORE DEFININTION)';UNDERSCORE DEFINITION control word\nbe used to define a special \"escape\" character which will indicate that\nunderscoring is to be turned off and on again.\nFor example, if\n..sp;     .ud set |\n..sp;has already been specified, then\n..sp;..cc 2;     .us line |of text |to be |under|scored\n     .uc line |of text |to be |under|scored and capitalized\n..sp;will produce\n..sp;..in 5;..cc 2\n..us line |of text |to be |under|scored\n..br\n..uc line |of text |to be |under|scored and capitalized\n..in\n..pp;By default, these control words will underscore all characters\n.tabnum unders\n..ur except those shown in Table &unders..\nIf you want to add any of these characters to the list to be underscored\nautomatically, you can use the \"on\" operand of \".ud\" to do it.\nFor example, if you want SCRIPT to include parentheses in the list of\ncharacters which will be underscored if they appear in the operand string\nof a \".uc\" or \".us\", then specify:\n..sp;     .ud on ( )\n.tabbegin;.boxon\n.table unders 'Characters Not Underscored (by default)'\n..tb set $\n..ur ..tb &sysin+30 &sysin+40 &sysin+50\n..us $Graphic$Hex\n..us Character$Symbol$Code\n..sp\nbackspace$none$16\nblank$$40\ncomma$,$6B\ncolon$:$7A\ndouble quote$\"$7F\nexclamation mark$!$5A\nleft brace$\u00bb$8B\nleft bracket$\u00dd$AD\nleft parenthesis$($4D\nperiod$.$4B\nquestion mark$?$6F\nright brace$\u00ba$9B\nright bracket$\u00a8$BD\nright parenthesis$)$5D\nsemicolon$;$5E\ntab$none$05\nunderscore$_$6D\n..br;..tb set\n.boxoff;.tabend\n.section 'Keeping a Block of Text Together on the Same Page'\n..pp In many instances, it is necessary to ensure that a block of text not be\nsplit across a page boundary -- for example, the text (or spaces) for\ncharts, figures, or tables.\nThere are two methods which may be used to prevent output lines\nfrom being split over two pages.\n..pp The SCRIPT \".cp\"\n.ix 'cp (CONDITIONAL PAGE)'\nCONDITIONAL PAGE control word can be used to start a new page if there\nis not enough room on the current page.\nFor example, when SCRIPT encounters the input sequence\n..sp;..cc begin\n     .cp begin\n     input text and other SCRIPT control words\n     .cp end\n..cc end;..sp\nit formats the \"input text and other SCRIPT control words\"\nin an internal \"work area\" so that it knows how many lines of output\nthis input sequence has created.\nIf there is not sufficient room for these output lines on the current page,\nSCRIPT leaves the rest of the current page blank, and\nprints these already-formatted output lines at the top of the next page.\n..pp If you know precisely how many output lines are needed,\nit is more efficient to use \".cp\" with a numeric operand.\nFor example,\n..sp;     .cp 10\n..sp;will start a new page if there are less than 10 lines available\non the current page.\n..pp The \".cp\" control word, as mentioned above, will cause the remainder of\nthe current page to be left blank if a new page must be started.\nThis is often highly undesirable.\nIf you use the SCRIPT \".fk\"\n..ix 'fk (FLOATING KEEP)'\nFLOATING KEEP control word\n..sp;..cc begin\n     .fk begin\n     input text and other SCRIPT control words\n     .fk end\n..cc end;..sp\nSCRIPT will format the \"input text and other SCRIPT control words\" internally,\nand print the resulting output lines\non the current page if there is room for them.\nIf there is insufficient room,\nSCRIPT will save them for printing on the next page, and will\nfill the current page with the output created by the text and control words\nwhich follow the FLOATING KEEP begin/end sequence.\n.section 'Starting a New Page'\n..pp You can force the output to start on a new page\nby using the SCRIPT \".pa\"\nPAGE control word.\n..sp;..cc 3;     .pa\n..ix 'pa (PAGE)'\n..ix 'pa (PAGE)' 'see also \"em\"'\n     .pa +5\n     .pa 1\n..sp;The first example skips to the top of the next page;\nyou might wish to do this, for example, to cause a new chapter to start on\na new page.\nThe second example skips to the top of the next page and adds five\nto the page number.\nThis may be useful if you intend to insert five pages which\nare to be produced in some other fashion.\nThe third example skips to the top of the next page and resets the\npage number to \"1\".\n.section 'Blank Lines (Spaces)'\n..pp The SCRIPT \".sp\"\n..ix 'sp (SPACE)'\nSPACE control word creates blank output lines.\nThe operand specifies\nthe number of blank lines desired.\n..sp;..cc 2\n     .sp 5\n     .sp\n..sp;The first example produces five blank lines, the second example\nthe default of one.\nIf double-spacing were in effect, the first example would produce 10 blank lines\nand the second would produce 2.  If you want to leave a specific number of\nblank lines independent of whether you may decide later on to switch the\ndocument from single- to double-spacing (or vice versa), then use the \"absolute\"\noperand, as in\n..ix 'sp (SPACE)' 'absolute'\n..sp;     .sp 5 a\n..sp;In this form, \".sp\" will produce the specified number of \"absolute\"\nblank lines, independent of the line-spacing mode.\n.section 'Blank Lines at the Top of a Page'\n..pp By default, SCRIPT prevents the printing of blank lines at the top of a\npage.  If you want to\n..ul allow;this, use the \".le\"\n..ix 'le (LEADING SPACES)'\n..ix 'sp (SPACE)' 'at the top of a page' . 'see also \"le\"'\nLEADING SPACES control word.\nFor example, you might begin each new chapter with the input sequence\n..sp;     .pa;.le yes;.sp 5 a;.le no\n..sp;The \".le yes\" allows the printing of blank lines at the top of the\npage, and the \".le no\" suppresses them again.\n.section 'Printing Empty Pages'\n..pp;By default, SCRIPT does not print pages which are empty.\nYou can use the SCRIPT \".em\" EMPTY PAGES control word to force SCRIPT\nto print empty pages.\nFor example,\n..ix 'em (EMPTY PAGES)'\n..sp;     .pa;.em yes;.pa;.pa;.em no\n..sp;leaves the rest of the current page blank, tells SCRIPT to print\nempty pages, creates two empty pages, and then suppresses the printing\nof empty pages again.\n.section 'Breaks'\n..se brpage = '&pubSWprt'\n..pp A \"break\" in the output text is a place where the current output\nline has been printed, no matter how full it may be,\nand a new output line begun.\nThere are four ways in which you can specify or cause a \"break\" in the\noutput text to occur.\nThe first way is to use the SCRIPT control word BREAK,\n..sp;     .br\n..ix 'br (BREAK)'\n..pp The second way is to use a SCRIPT control word which, in addition to\ndoing other things, also\n..us implies;a break (such as the \".sp\" control word).\n..pp The third way is to start an input line with one or more blanks.\nThis starts a new output line, indented by the number of blanks\nwith which the input line starts.\n..pp The fourth way is to start an input line with a tab character.\nThis starts a new output line, indented to the first defined tab stop.\n.chapter 'The Definition and Use of Tabs'\n.section 'Defining Tab-Stop Positions'\n..pp;SCRIPT does not know about any physical tab-stop settings you may have\non your output device.  Instead, you must use the SCRIPT \".tb\"\n..ix 'tb (TAB)'\nTAB control word to define the positions in the output line which are to\nbe used as tab-stop settings.  By default, tab-stop settings are\ndefined in positions 5, 10, 15, 20, ..., 80, as in\n..sp;     .tb 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80\n..sp;When SCRIPT encounters a tab character while putting words onto the output\nline, it inserts the number of blanks necessary to move over to the right\nso that the character after the TAB will appear in the next tab position\nin the output line.\n..pp;For example, with the default tab-stop positions, a TAB in the first column\nof an input line will create a new output line in which the first 4 positions\nare blank.\n.section 'Entering TAB Characters in the Input'\n..pp If your input device has a TAB key, you can use it to enter the TAB\ncharacter simply by depressing the TAB key.\nIf your input device does not have a TAB key,\nthen you can make use of the SCRIPT\n\".tb set\"\n..ix 'tb (TAB)';..ix 'tb (TAB)' 'set'\nTAB SET control word to define a special character which\nwill be treated as the TAB character whenever it is encountered in the input.\nFor example, if you were to include the control word\n..sp;     .tb set $\n..sp;at the beginning of your input file,\nyou would be defining the \"$\" to be the \"TAB\" character -- any time\nSCRIPT encounters an \"$\" in an input line,\nit will automatically\ninsert the number of blanks necessary to move over to the next defined\ntab-stop position.\n.section 'Tabs with a \"Fill String\"'\n..pp;In addition to inserting blanks as it moves over to the next tab-stop\nposition, SCRIPT also provides the ability for you to specify a\n\"fill string\" (one or more non-blank characters) to be used instead of\nblanks.\nFor example, if you had defined a tab-stop position with\n..sp;     .tb '. '50\n..tb '. '50\n..sp;then the input sequence\n..sp;..cc 5\n     .tb set $\n     .sp\n     hello $ there\n     .br\n     how are $ you\n..sp;would produce\n..tb set $\n..sp;hello $ there\n..br;how are $ you\n..br;..tb set\n.section 'Right-Aligning Tabs'\n..pp;SCRIPT also gives you the ability to specify a tab-stop position to\nwhich text will be right-aligned.\nFor example, if you had defined the above tab-stop position as\n..sp;..ur      .tb '. '&pubSWll.r\n..sp;then the exact same input sequence would produce\n..ur ..tb '. '&pubSWll.R\n..tb set $\n..sp;hello $ there\n..br;how are $ you\n..br;..tb set\n..sp;The TAB between the words \"hello\" and \"there\" causes SCRIPT to\n\"push\" the word \"there\" over to the right until its last character is in\n..ur column &pubSWll..\n.section 'Centering Tabs'\n..pp;If the tab-stop position is followed by the letter \"C\", such as\n..sp;     .tb 30c\n..sp;then SCRIPT will align the text following the TAB\nso that it is centered at that position.\nFor example,\n..sp;..cc 4\n     .tb set \u00ac;.tb 30c\n     the value is\u00ac123456789\n     .br\n     and the next is\u00ac123\n..sp;will cause the number \"123456789\" to print so that the \"5\" is in\ncolumn 30, as shown below.\n..tb set \u00ac;..tb 30c\n..sp;the value is \u00ac123456789\n..br;and the next is\u00ac123\n..br;..tb set\n.section 'Character-Aligning Tabs'\n..pp;If the tab-stop position is followed by\na delimited single character, such as\n..sp;     .tb 30'.'\n..sp;then SCRIPT will align the text following the TAB to the first\noccurrence of that character.\nFor example,\n..sp;..cc 4\n     .tb set \u00ac;.tb 30'.'\n     the value is\u00ac12.456789\n     .br\n     and the next is\u00ac123.56\n..sp;will cause the number \"12.456789\" to print so that the \".\" is in\ncolumn 30, as shown below.\n..tb set \u00ac;..tb 30'.'\n..sp;the value is\u00ac12.456789\n..br;and the next is\u00ac123.56\n..br;..tb set\n.chapter 'The Output Page'\n.section 'The Left and Right Margins'\n..pp;The SCRIPT \".ad\"\n..ix 'ad (ADJUST)'\nADJUST control word may be used to define the\nstarting position of the output line with respect to the physical left margin\n(the physical left margin of this Introduction\n..ur is actually &sysad spaces to the left of this paragraph).\nThe term \"physical left margin\" refers to the leftmost possible print position\nof the output device (terminal or printer).\nThe term \"left margin\" by itself is used in this\nIntroduction to refer to the starting position of the output line on the\noutput device, as defined by the ADJUST value.\nSince the initial ADJUST value is zero, the left margin and the physical\nleft margin are therefore identical at the start of SCRIPT processing.\nSpecifying a non-zero ADJUST value\nmoves the left margin the specified number of spaces to the right of\nthe physical left margin.\nThe length of the output line, as defined by \".ll\",\nis not affected by the ADJUST value.\n..pp For example, this document contains the SCRIPT control words\n..sp;..su;     .ad &sysad;.ll &sysll\n..sp\nat the beginning of the input file; this creates an output line which begins\n..ur in print position &sysad+1 and ends in print position &sysad+&sysll..\nThis ADJUST value was specified in order to allow a sufficient\nmargin on the left of the page for binding.\n..pp The right margin is one position to the right of the position defined by\nthe sum of the ADJUST and LINE LENGTH values.\n.section 'The Top and Bottom Margins'\n..pp The SCRIPT \".tm\"\n..ix 'tm (TOP MARGIN)'\nTOP MARGIN control word may be used to define the number\nof lines to be left at the top of each output page.\nThe top margin for this Introduction was created with the control word\n..sp;..ur      .tm &systm\n..pp The SCRIPT \".bm\"\n..ix 'bm (BOTTOM MARGIN)'\nBOTTOM MARGIN control word may be used to define the number\nof lines to be left at the bottom of each output page.\nThe bottom  margin for this Introduction was created with the control\nword\n..sp;..ur      .bm &sysbm\n.section 'The Text Area'\n..pp The text area is that area of the output page bounded on the left by the\nleft margin (as defined by the ADJUST value), on the right by the right margin\n(as defined by the sum of the ADJUST and LINE LENGTH values plus 1),\non the top\nby the top margin (as defined by the TOP MARGIN value), and on the bottom by\nthe bottom margin (as defined by the BOTTOM MARGIN value).\n..pp It is this \"text area\" into which SCRIPT places its output lines.\nWhenever the text area becomes full, SCRIPT automatically skips to a new page.\n.chapter 'The Formatting Modes'\n..pp The criterion which SCRIPT uses in attempting to \"fill\"\nthe output line is called the \"formatting mode\".\nTo show the effects of the various formatting modes, the text in the following\nsections has been formatted by the same control words which the text is\ndescribing.\n.section 'Unformatted Mode'\n..pp;To begin, we will start with \"unformatted mode\", by issuing the SCRIPT\ncontrol word\n..sp;     .fo no\n..ix 'fo (FORMAT)'\n..fo no\n..pp In the \"unformatted mode\", SCRIPT does no \"text\nformatting\"; it\nmerely copies the text exactly as it appeared in the input lines.\nWe are now in \"unformatted mode\".\nThis is useful when we want to enter the text for a table or\nfigure or example, and we\nwant the output to appear exactly as we entered it.\n..pp In \"unformatted\" mode,\n\".ll\" has no effect on the length of the output line.\nFor text in sentence-and-paragraph form, we want something else.\n.section 'Concatenated Mode'\n..hy user;..ju no\n..pp If we now specify the SCRIPT control word CONCATENATE,\n..sp;     .co\n..ix 'co (CONCATENATE)'\n..sp;..co\nthen SCRIPT puts as many words as possible on an output line.\nNote that, although no output line is longer than the \".ll\" value,\nthe right margin is still \"ragged\".\nWe can get even more text onto each output line if we also add\n\"hyphenation\" to the \"concatenation\" process.\n.section 'Hyphenation'\n..ju no\n..pp SCRIPT has three modes of hyphenation.\nThe hyphenation mode is specified with the HYPHENATE control word:\n..sp;..cc 3\n     .hy off\n     .hy user\n     .hy on\n..ix 'hy (HYPHENATE)'\n..hy off\n..pp The \"off\" operand causes SCRIPT to perform no hyphenation.\n..hy user\n..pp The hyphenation mode specified by the \"user\" operand is the default\nhyphenating mode.\nIf SCRIPT encounters a hyphenated word and it cannot\nget the whole word on the current output line but\n..us can;get the first part and the hyphen, it will do so, and put the\nrest of the word on the next output line.\n..hy on\n..pp The \"on\" operand causes SCRIPT to perform automatic hyphenation.\nSCRIPT attempts to detect all permissible hyphenation points in a word*,\n..fn begin\n..of 1\n*The part of Waterloo SCRIPT which performs hyphenation was adapted from\nthe IBM \"HYPHENATION/360\" computer program.\n..fn end\nand then puts as much of the word as possible on the current line, followed\nby a hyphen.\nThe rest of the hyphenated word is used to start the next output line.\n..pp SCRIPT's hyphenation attempts\ndo not always result in a hyphenation point which is aesthetically pleasing.\nUnfortunately, the human's rules for deciding which\nhyphenation points \"don't look right\" are not sufficiently well-defined\nto be programmed.\nTo overcome this, there is an \"exception dictionary\" which you may choose\nto imbed (using the SCRIPT \".im\"\n..ix 'im (IMBED)';control word)\nif you are formatting your document with \".hy on\", by specifying\n..sp;     .im syshyph\n..ix 'hy (HYPHENATE)' 'imbedding the exception dictionary'\n..sp;at the beginning of your document.\nThe \"syshyph\" file contains several thousand \"exception\" words.\nWhen hyphenation is \"on\", SCRIPT first checks a word it wants to hyphenate\nto see if it is in the exception dictionary.\nIf it is, SCRIPT considers only the hyphenation points defined\nfor that word in the exception dictionary (which may, of course, be\n..ul 1 none).\n..ur This Introduction was formatted &withhyph the exception dictionary.\n..pp The SCRIPT \".hy\" control word has several additional operands for\nmodifying the hyphenation process and the exception dictionary.\nIt is beyond the intended scope of this Introduction to discuss them here;\nyou can learn more about the \".hy\" control word (and other control words)\nin the SCRIPT Reference Manual mentioned later in this document.\n.section 'Concatenated-and-Justified (Formatted) Mode'\n..ju no\n..pp In the\n..hw \"concatenated--and--justified\"\nmode, SCRIPT adds another\nstep beyond that of concatenation -- after it realizes that it cannot\nget any more on the output line, it then\ninserts extra blanks between words.\nWe can add justification to the concatenation process by using the SCRIPT\ncontrol word JUSTIFY\n..sp;     .ju\n..ju\n..ix 'ju (JUSTIFY)'\n..sp;and SCRIPT will include justification from this point on.\nThis is the default formatting mode.  SCRIPT\nrefers to this \"concatenated-and-justified\" mode as the \"formatted\" mode.\nRather than specifying both \".co\" and \".ju\", we could create the\nsame effect by specifying the SCRIPT control word FORMAT\n..sp;     .fo\n..ix 'fo (FORMAT)'\n.chapter 'Positioning Blocks of Text in the Text Area'\n.section 'Centering Lines of Text'\n..pp The SCRIPT \".ce\" CENTRE control word,\n..ix 'ce (CENTRE)';as used in the following input sequence\n..sp;..cc 3\n     .ce begin\n     input text and other SCRIPT control words\n     .ce end\n..sp;will cause each text line in the range of the \"begin/end\" to be\ncentered on a separate output line.\nIf only one input line is to be centered, it can be entered as\n..sp;     .ce line of text to be centered\n..pp A numeric operand can be used, for a specific number of\n..ul input;lines of text.\n.section 'Right-Adjusting Lines of Text'\n..pp The SCRIPT \".ra\"\n..ix 'ra (RIGHT ADJUST)'\nRIGHT ADJUST control word causes input text to be right-adjusted on output.\nIt is used in the same manner as \".ce\" above.\nFor example,\n..sp;     .ra this line of text\n..sp;produces:\n..sp;..ra this line of text\n.section 'Indenting Blocks of Text'\n..pp The output line normally starts at the left margin (as defined by the\nADJUST value).\nTo indent output lines a specific number of spaces, use the SCRIPT \".in\"\n..ix 'in (INDENT)'\nINDENT control word.\nThis indentation will remain in effect until another \".in\"\ncontrol word is encountered.\nConsider the following examples:\n..sp;..cc begin;     .in 10\n..sp;..in 10;This causes all output lines to be indented ten spaces from\nthe left margin.  The control word\n..sp;..in 4; .in +5\n..sp;..in 15;adds five to the current INDENT value, so that output\nlines are now indented 15 spaces from the left margin.  The control word\n..sp;..in 4; .in\n..cc end;..in\n..sp;used without an operand causes the INDENT value to be reset to\nzero, so that the output lines now begin at the left margin again.\n..pp Note that the INDENT control word, when used in the above ways, does\nnot alter the positioning of the right margin.\nIf that is desired, the control word may be used in the form\n..sp;..in 4; .in 10 -5\n..sp;..in 10 -5;which causes the left margin to be indented 10 spaces from\nthe ADJUST value and the right margin to be indented five spaces to the\n..ul 1 left;of the LINE LENGTH value.\n..in;..pp In no case does the INDENT value ever alter the\nLINE LENGTH value.\n.section 'Indenting a Single Line of Text'\n..pp To indent only the next line\nof text, use the SCRIPT \".il\"\n..ix 'il (INDENT LINE)';INDENT LINE control word.  For example,\n..sp;     .il +3;will cause the next line of ...\n..sp;produces:\n..sp;..il +3;will cause the next line of text to be indented 3 more than\nthe value of \".in\" currently in effect.\n.section 'Offsetting Lines of Text'\n..pp To offset all output lines after the next one is printed, use the SCRIPT\n\".of\"\n..ix 'of (OFFSET)'\nOFFSET control word.\nThe \".of\" value is relative to the current \".in\" INDENT value, and\nremains in effect until the next \".of\"\nor \".in\" control word is used.\nA list of points could be formatted by using OFFSET as follows.\n..sp;..in 4;..cc begin\n .of 4\n (1) first text input line for point\n second text input line for point\n .of 4\n (2) first text input line for second point\n second text input line for second point\n .of\n..cc end;..sp;..in\n..pp;The explanation below was formatted using the above technique.\n..sp;..of 4;(a) The next output line after the \".of 4\" is encountered will\nbegin at the INDENT value, but output lines thereafter, until the next \".of\"\nis encountered, will be offset 4 spaces from the INDENT value.\n..sp;..of 4\n(b) The second \".of 4\" is necessary to cancel the effect of the previous\n\".of 4\", so that the \"(2)\" will be printed beginning at the INDENT value,\nwith output lines thereafter being offset 4 spaces to the right.\n..sp;..of 4;(c) The \".of\" after the text for the second point\nre-sets the current OFFSET value to zero.\n.section 'Output Overlay Patterns'\n..pp The SCRIPT \".oo\" OUTPUT OVERLAY control word\n..ix 'oo (OUTPUT OVERLAY)'\nreplaces blanks in output columns with a specified overlay pattern.\nFor example, the input sequence\n..sp;..cc 6\n     .in 10\n     .oo 1 OUTPUT\n     .oo 1 OVERLAY\n     .oo 1 Example\n     causes the output to be indented\n     10 spaces ...\n..sp;produces:\n..sp;..in 10;..oo 1 OUTPUT;..oo 1 OVERLAY;..oo 1 Example\ncauses the output to be indented 10 spaces from the left margin and\ndefines a sequence of three \"output overlay\" patterns, each of which is to be\nprinted \"1\" time, as indicated by the \"1\" following the \".oo\".\nThe \"output overlay\" patterns are printed in the order in which they are\ndefined.\n..in\n..pp;The \".oo\" control word can be used to create marginal notes in\nindented text, as shown below.\n..sp;..cc begin\n     .in 10\n     The following lines of text will be indented 10 spaces\n     and the \".oo\" OUTPUT OVERLAY control word will\n     be used to position the word \"here\"\n     .oo 1 here==>\n     on the line in which the word appears.\n     Note that \".oo\" does not create a break in the\n     formatting of the text.\n..cc end;..sp;produces:\n..sp;..cc begin\n..in 10\nThe following lines of text will be indented 10 spaces\nand the \".oo\" OUTPUT OVERLAY control word will\nbe used to position the word \"here\"\n..oo 1 here==>\non the line in which the word appears.\nNote that \".oo\" does not create a break in the\nformatting of the text.\n..in\n..cc end\n.section 'The \"Significant Blank\":  Keeping Things on the Same Line'\n..pp;When it is necessary to ensure that SCRIPT keeps a string of characters\nwhich includes blanks together on the same output line, the SCRIPT \".tr\"\nTRANSLATE ON OUTPUT control word must be used.\nFor example, the input sequence\n..sp;..cc begin\n     It is absolutely essential that the characters\n     .tr $ 40\n     X$=$a$+$b$+$c$+$d appear on the same\n     line of output, and that SCRIPT not insert\n     any extra blanks in the string.\n     .tr\n..cc end;..ix 'tr (TRANSLATE ON OUTPUT)';..sp;produces:\n..sp;..cc begin;..in 5\nIt is absolutely essential that the characters\n.tr $ 40\nX$=$a$+$b$+$c$+$d appear on the same\nline of output, and that SCRIPT not insert\nany extra blanks in the string.\n.tr\n..cc end;..in\n..pp;The \".tr $ 40\" causes SCRIPT to translate all occurrences of \"$\" to\na blank (40 is the machine-code representation for a blank)\n..us after |each line has been formatted and |just before |it is printed.\nThe \".tr\" all by itself terminates this \"translate on output\" process.\nBe sure not to terminate it right after specifying the string to which you\nwant it to apply, because it probably hasn't printed yet; wait a few lines,\nas was done above.\n.section 'Putting a Box Around Text'\n..pp;The SCRIPT \".bx\" BOX control word allows you to create boxes.\nFor example, the input sequence\n..sp;..cc begin\n     .cp begin\n     .bx 1 60\n     .sp;.in +3 -3\n     This text will have a box around it,\n     in columns 1 and 60,\n     compliments of the \".bx\" control word.\n     .in -3 +3;.sp\n     .bx off\n     .cp end\n..cc end;..ix 'bx (BOX)';..sp;produces:\n..sp;..cc begin\n..bx 1 60\n..sp;..in +3 -3\nThis text will have a box around it,\nin columns 1 and 60,\ncompliments of the \".bx\" control word.\n..in -3 +3;..sp\n..bx off\n..cc end\n.section 'Widowing'\n..pp;If you want SCRIPT to attempt to prevent the first line of a block\nof text from being the last line on a page, or prevent the last line of\na block of text from being the first line on a page, then specify\nthe SCRIPT \".wd\" WIDOW control word\n..ix 'wd (WIDOW)'\n..sp;     .wd\n.chapter 'Footnotes'\n..ix 'fn (FOOTNOTE)'\n..pp Many documents require the use of footnotes.\nUsing SCRIPT, it is possible to enter the text of the footnote immediately\nafter the word\nto which the footnote refers.\nSCRIPT formats the footnote text into an internal \"work area\",\ncounts the number of output lines which result, and leaves sufficient room\nat the bottom of the text area to ensure that the footnote text\nis printed at the bottom of the same*\n..fn begin\n..of 1\n*It is possible that some or all of the footnote may spill onto\nthe next page or for the line containing the reference to\nget pushed over.\n..fn end\npage.  For example, the text for the footnote at the bottom of this page was\ncreated by the following sequence of text and control words:\n..wd\n..sp;..cc begin\n     at the bottom of the same*\n     .fn begin\n     .of 1\n     *It is possible that some or all of the\n     footnote may spill onto the next page or\n     for the line containing the reference to get\n     pushed over.\n     .fn end\n     page.  For example, the text for the footnote ...\n..cc end\n..pp;The SCRIPT \".fn begin\"\nFOOTNOTE BEGIN control word defines the start of the footnote.\nThe output resulting from the input text and SCRIPT control words thereafter\nis saved in SCRIPT's internal \"work area\".\nThe SCRIPT \".fn end\"\nFOOTNOTE END control word terminates this \"internal formatting\"\nof the footnote and restores the formatting mode and\nthe values of control words such as \".in\" and\n\".of\" to whatever their values were before the \".fn begin\" was encountered.\n..pp;By default, SCRIPT separates the last line of text from the first\nline of the footnotes by a blank line followed by a line with a centered\nrow of dashes, followed by another blank line.\nYou can change this by using the \"set\"\n..ix 'fn (FOOTNOTE)' 'set';operand of the \".fn\" control word.\nFor example, the following input sequence\n..sp\n..cc 5\n     .fn set 4\n     .fn set 1 /--------------------///\n     .fn set 2 ////\n     .fn set 3 ////\n     .fn set 4 ////\n..sp;sets the number of \"footnote separator\" lines to 4, the first of\nwhich contains 20 left-justified dashes.\nThe 2nd, 3rd, and 4th separator lines will be entirely blank.\nWhatever you place between the first and second slash will be left-justified\non that separator line.\nWhatever you place between the second and third slash will be centered.\nWhatever you place between the third and fourth slash will be right-justified.\n.chapter 'Page Numbering:  Top and Bottom Titles'\n.section 'Title Lines in the Top Margin'\n..pp The SCRIPT \".hs\"\n..ix 'hs (HEADING SPACE)'\nHEADING SPACE control word defines the\nnumber of heading lines which may be printed in the TOP MARGIN area.\nThe HEADING SPACE for this Introduction was defined by\n..sp;..ur      .hs &syshs\n..pp The SCRIPT \".hm\"\n..ix 'hm (HEADING MARGIN)'\nHEADING MARGIN control word is used to define the number of blank lines\nto be left between the HEADING SPACE area and the first line of the text area.\nThe HEADING MARGIN for this Introduction was defined with\n..sp;..ur     .hm &syshm\n..pp Note that the sum of the \".hs\" and \".hm\" values may not\nbe greater that the \".tm\" value.\nIf you currently have a \".tm\" value of 5 and you want to define\n..sp;     .hm 3;.hs 3;.tm 7\n..sp;it must be done in the order\n..sp;     .tm 7;.hm 3;.hs 3\n..pp The SCRIPT \".tt\"\n..ix 'tt (TOP TITLE)'\nTOP TITLE control word allows you to define lines of text to be printed\nin the HEADING SPACE of each page.\nThis control word is of the form\n..sp;     .tt n /left string/centre string/right string/\n..sp;The value \"n\" specifies the line number in the HEADING SPACE on which\nthis heading line is to be printed;\nif a value is not specified, \"1\" is assumed.\nThe characters specified in place of the three \"strings\" will appear\nleft-justified, centered, and right-justified on that output line.\n.section 'Title Lines in the Bottom Margin'\n..pp Three similar control words exist for the BOTTOM MARGIN area of each page.\nThe SCRIPT \".fs\"\n..ix 'fs (FOOTING SPACE)'\nFOOTING SPACE control word specifies the number of lines to be used for\nbottom titles.  The \".fm\"\n..ix 'fm (FOOTING MARGIN)'\nFOOTING MARGIN control word specifies the number of blank lines to be left\nbetween the last line of the text area and the first line of the FOOTING\nSPACE area.  The \".bt\"\n..ix 'bt (BOTTOM TITLE)'\nBOTTOM TITLE control word is used to define the title lines to be printed\nin the FOOTING SPACE area.\n..pp A word of caution is in order.  Do not confuse footnotes and footings.\nFootnotes are printed at the bottom of the text area; footing (bottom title)\nlines are printed in the FOOTING SPACE area.\n.section 'Page Numbering'\n..pp;If page numbering is required, then place a percent sign (%)\ninto one of the three strings of characters in the top and/or bottom titles.\nThe \"%\" will be replaced with the current page number when SCRIPT prints the\ntitle line.\nFor example,\n..sp;..cc 2\n     .tt ////\n     .bt //- % -//\n..sp;were used to define the top and bottom titles for this Introduction.\nBy default, SCRIPT uses\n..sp;     .tt ///PAGE %/;.bt ////\n..sp;and arabic numerals for the page numbers.\nYou can specify the numbering style for the page numbers by specifying any of:\n..sp;..cc 3\n     .pn arabic\n     .pn roman\n     .pn roman upper\n..ix 'pn (PAGE NUMBERING)'\n.chapter 'Multiple-Column Output'\n.pp;The text you read in newspapers and magazines\nis formatted in multiple columns per page.\nA number of journals also use this style,\nand some of them require that authors submit\ncamera-ready copy which is already formatted\nin multiple columns (some IEEE publications, for example).\nSCRIPT can produce output in up to nine columns\non a page.\n.section 'Defining the Page Layout'\n.pp;To use this multiple-column facility,\nyou must specify the following:\n.point begin\nthe \".cl\" COLUMN LENGTH control word, to define\nthe number of characters to be placed on each\n.ix 'cl (COLUMN LENGTH)'\nline in a column,\n.point\nthe \".cd\" COLUMN DEFINITION control word, to\ndefine the number of columns on the page and the\n.ix 'cd (COLUMN DEFINITION)'\ndisplacement of each relative to the left\nmargin, and\n.point\nthe \".ll\" LINE LENGTH control word, to define the\ntotal number of character positions on the\nresulting multiple-column output line.\n.point end\n.pp;As an example, imagine that you wish to format output\nin two 60-character columns per page,\nwith a 10-character \"gutter\" between them,\nresulting in a total line length of 130 characters.\nThis can be achieved by the\nSCRIPT control words\n..sp;     .cl 60;.cd 2 0 70;.ll 130\n.sp;which define two 60-character columns starting\nat displacements 0 and 70 on the 130-character line.\nThe first column occupies positions 1\nthrough 60, the gutter occupies positions 61 through\n70, and the second column occupies position 71 through 130.\n.section 'Starting a New Column'\n.pp;Working in multiple-column mode requires a change in the\napproach taken to formatting a document.  As in single-column\nmode, the \".pa\" PAGE EJECT and \".cp\" CONDITIONAL PAGE\ncontrol words operate on a\n.us page\nbasis.  However, there are also \".cb\" COLUMN BEGIN and \".cc\"\nCONDITIONAL COLUMN control words which operate on a\n.us column\n.ix 'cb (COLUMN BEGIN)';.ix 'cc (CONDITIONAL COLUMN)'\nbasis, and you should use them instead of \".pa\" and \".cp\"\n(unless you really want to start a new page).\nIn  multiple-column mode, text defined with a\n\".fk\" FLOATING KEEP sequence will be promoted to the next\ncolumn if it won't fit in the current column,\nand footnotes are printed at the bottoms of columns instead of pages.\n.section 'Balancing Columns'\n.pp;By default, SCRIPT attempts to \"balance\" the columns\non a page before it prints the page.\nFor example, if the first column on a page\nis full and the second is only half full, then\nSCRIPT will move some lines from the bottom\nof the first column to the top of the second column,\nto create two columns which are each three-quarters\nfull, before it prints the page.\n..pp;You can use the \".bc\"\nBALANCE COLUMNS control word (with an ON or OFF\n.ix 'bc (BALANCE COLUMNS)'\noperand) to explicitly prevent (OFF) or allow\n(ON) column-balancing.\n..pp;There are some things which prevent SCRIPT from attempting\nto balance the columns on a page even when column-balancing is \"ON\".\nFor example, if a column contains a footnote or was terminated with\na \".cb\" COLUMN BEGIN, then that column cannot be balanced.\n.section 'Switching Between Single and Multiple Columns'\n..sp\n.multicol 2\n..il +3;The \".sc\" SINGLE COLUMN control word allows\nyou to switch from multiple-column\n..ix 'sc (SINGLE COLUMN)'\nmode to single-column mode (for example,\nto create a table or figure the full width\nof the page), and the \".mc\" MULTIPLE COLUMN\ncontrol word will switch you back to the\n..ix 'mc (MULTIPLE COLUMN)'\npreviously-defined multiple-column mode.\nFor more complicated effects you can use\nthe \".cd\" control word instead.\nFor example, you can go from two columns to three\ncolumns and back to two columns again.\n..pp;If \".bc on\" is in effect, then\nany time you switch from a multiple-column mode\nto a different number of columns (by using either \".sc\"\nor \".cd\"), SCRIPT attempts to balance columns\nbefore switching to the new\ncolumn mode.\n.multicol 1\n.chapter 'Using System Reference Variables'\n..pp;System Reference Variables are maintained by SCRIPT\nto make it possible to get at information that may be useful\nin formatting a document.\nFor example, the SCRIPT \".ur\" USE REFERENCE control word\n..ix 'ur (USE REFERENCE)'\n..sp;     .ur &sysdate\n..sp;results in the characters\n..sp;..in 5;..ur &sysdate\n..sp;..in;which is the date on which this document was printed.\nThis is extremely useful in preparing letters, because it can be used\nin conjunction with \".ra\" (RIGHT ADJUST), as in\n..ix 'ra (RIGHT ADJUST)'\n..sp;     .ur .ra &sysdate\n..sp;to produce the following effect:\n..sp;..ur ..ra &sysdate\n.chapter 'Creating Your Own SCRIPT Control Words Using MACROs'\n..pp A MACRO is a \"named\" sequence of SCRIPT control words and text delimited\nwith \".dm\" DEFINE MACRO\n..ix 'dm (DEFINE MACRO)'\ncontrol words.  SCRIPT saves these input lines\nand invokes them automatically whenever\nthe name of the MACRO is used as a SCRIPT control word.\nFor example,\n..sp;..cc 3\n     .dm para begin\n     .sp a;.il +8\n     .dm para end\n..sp;defines a MACRO named \"para\" which you can invoke by specifying\n..sp;     .para\n..sp;and, as a result, one blank line will be generated and the next line\nof text will be indented 8 positions to the right of the current indent value.\n.chapter 'The Control Word Indicator and Separator'\n.section 'Ignoring the Control Word Indicator'\n..pp;There will be instances in which it is necessary to force SCRIPT\nto treat an input line as text even though it starts with the control\nword indicator (.) mentioned on page\n..ur &lipage..\nThis can be done for a specific number of input lines by using the SCRIPT \".li\"\n..ix 'li (LITERAL)'\nLITERAL control word.  For example,\n..sp;..cc 3;     .li 2\n     ... This line of text starts with a \".\"\n     ... and so does this one\n..sp;causes SCRIPT to take the next 2 input lines as text even though they\nstart with the control word indicator.\n.section 'Changing the Control Word Indicator'\n..ix 'li (LITERAL)'\n..pp;If you have a large number of input text lines which start with the\ncontrol word indicator, and you don't want to have to bother counting them\nand specifying the \".li\" control word as shown in the previous section, then\nyou can change the control word indicator to some other character.\nFor example,\n..sp;..cc 6;     .li ?\n     .These are lines of text which may or may not\n     start with \".\"s, but will be treated as text anyway\n     .       ...\n     .       ...\n     ?li .\n..sp;causes SCRIPT to change the control word indicator from\na \".\" to a \"?\", and then back to a \".\" later on.\n.section 'Defining a \"No-Break\" Control Word Indicator'\n..pp;Many of the SCRIPT control words described in this Introduction\ncause a \"break\"\n..ur (see Section &brpage.).\nThere are some instances in which this is not desirable.\nYou can define a \"no-break\" control word indicator by using\nthe \".li\" control word.  For example,\n..sp;     .li , nobreak\n..ix 'li (LITERAL)'\n..sp;defines the \",\" as the \"no-break\" control word indicator.\nThis is very useful whenever you want to use a control word which\nwould normally create a break without having it do so, as shown below:\n..sp;..cc begin\n     The following lines of text will be formatted without\n     creating any breaks, and, at the same time, we will\n     indent the text 10 spaces, starting with the line\n     in which the word \"here\"\n     ,in 10\n     appears.  If \".in\" were used instead, the line\n     containing this word would be printed, no matter\n     how full it was, and the indent would start with\n     the next line after it.\n     .in\n..cc end;..sp;produces:\n..ix 'in (INDENT)' 'without creating a break'\n..sp;..cc begin\nThe following lines of text will be formatted without\ncreating any breaks, and, at the same time, we will\nindent the text 10 spaces, starting with the line\nin which the word \"here\"\n,,in 10\nappears.  If \".in\" were used instead, the line\ncontaining this word would be printed, no matter\nhow full it was, and the indent would start with\nthe next line after it.\n..in\n..cc end\n..pp;If you want to\n..us remove\nthe \"no-break\" indicator, so that it is no longer in effect, then specify\n..sp;     .li * nobreak\n.section 'The Control Word Separator'\n..pp;If you ever find it necessary to change the control word separator\ncharacter, the SCRIPT \".cw\"\n..ix 'cw (CONTROL WORD SEPARATOR)';CONTROL WORD SEPARATOR control word\nwill do it for you.  For example,\n..sp;     .cw <\n..sp;causes the control word separator character\n(the semicolon, \";\") to be replaced by the character \"<\";\nyou can restore it to the semicolon later on by specifying\n..sp;     .cw ;\n..cm -- start of installation-dependent chapters -------------------------\n..ur ..if '&site' ne '';..th ..im using .;..el ..do\n.chapter 'Using SCRIPT'\n.section 'VM/370 CMS'\n..pp In CMS, you may use either EDIT or WYLBUR to create a file\nof type \"script\", enter the input records, and save the file.\nTo SCRIPT the file, specify the CMS command\n..sp;     SCript filename (options\n..sp;where \"filename\" is the name of your input file.\nA list of the options available may be obtained by issuing the CMS\ncommand\n..sp;     help script\n..sp;(or \"$help script\" from within EDIT, or \"@help script\" from within WYLBUR).\n..pp It is also possible to use the \"help\" command to get reference information\non a particular SCRIPT control word, by specifying the control\nword instead of \"script\" (for example, \"help .in\" will tell you about INDENT).\n.section 'The BATCH Service'\n..pp If you are using WITS or WYLBUR to create your file, then the following\nJob Control Language (JCL) should be included:\n..sp;..cc begin\n     //jobname JOB '#,F=5200,accounting options'\n     //  EXEC  SCRIPT\n     //SCRIPT.SYSIN  DD  *\n     input file\n     /*\n..sp;..cc end;The \"accounting options\" are described in the \"BATCH Job Card\nOptions\" document available from any of the Consulting Offices.\nIf you wish to specify any SCRIPT options, then change the EXEC card to\n..sp;     //  EXEC SCRIPT,SCRIPT='options'\n.section 'The DEBUG Service'\n..pp SCRIPT may be accessed through the DEBUG Service reader/printer\nstations or the WIDJET system as follows:\n..sp;..cc 3\n     $ACC acct# name\n     $JOB  SCRIPT\n     input file\n..sp;Unfortunately, keypunches do not have lower-case characters.\n.section 'The UTILITY Service'\n..pp If you are using WITS or WYLBUR, you can submit a SCRIPT job to the\nDEBUG Service, but the time- and page-limits are restrictive.\nInstead, it is more appropriate to submit a SCRIPT job to the\nCLASS=Y UTILITY Service, using the following control cards:\n..sp;..cc 4\n     //jobname JOB '#,F=5200,accounting options',CLASS=Y\n     $JOB  SCRIPT\n     input file\n     /*\n.section 'Some Very Helpful SCRIPT Options'\n..pp;There are a great many options you can specify when invoking SCRIPT,\nbut most of them are beyond the scope of this Introduction.\nThe \"MARK\" and \"NUM\" options below will make it considerably easier for you to\nrelate the output produced by SCRIPT to the corresponding lines in your\ninput file, and hence make it easier for you to edit your input file.\n..in 10\n..sp;..cc 3;..oo 1 EIGHT\n..ix 'options' 'EIGHT'\nSCRIPT assumes that the output is being produced at SIX lines to the vertical\ninch on a page which is 11 inches long.  Specifying the EIGHT option\ncauses SCRIPT to count lines at eight per inch instead of six to decide when\nthe 11-inch page is \"full\".\n..sp;..cc 3;..oo 1 MARK\n..ix 'options' 'MARK'\nThe \"MARK\" option causes SCRIPT to underscore the first character of each\ninput text line in the output.  This makes it easier to determine\nexactly which input line you are looking at, in conjunction with the \"NUM=\"\noption.\n..sp;..cc 3;..oo 1 NUM=n\n..ix 'options' 'NUM='\nThe \"NUM=\" option causes SCRIPT to print the input line numbers and the\nname of the input file from which they came, starting in output column \"n\".\nFor example, \"NUM=85\" is convenient, because it puts this information\noff to the right of the text area.  Take care that the value you specify\nfor \"nn\" is greater than the sum of the ADJUST and LINE LENGTH values for\nyour document.\n..sp;..cc 3;..oo 1 PA=m:n\n..ix 'options' 'PA= (PAGE)'\nCauses SCRIPT to print only pages \"m\" through \"n\".\nIf \":n\" is omitted, only pages from \"m\" to the end of the document are printed.\n..sp;..cc 3;..oo 1 PL=n\n..ix 'options' 'PL= (PAGE LENGTH)'\nIf your output is not being produced on paper that is 11 inches long, you\nwill need to tell SCRIPT how many lines there are on the page.\nFor example, if your output page is 12.5 inches long, then specify\n\"PL=75\" for 6 lines to the inch, or \"PL=100\" for 8 lines to the inch.\n..sp;..cc 3;..oo 1 PR;..oo 1 DISK;..oo 1 SCREen\n..ix 'options' 'PR'\n..ix 'options' 'DISK'\n..ix 'options' 'SCREEN'\nThese options are only useful in CMS, where the output is sent to your\nterminal by default\n(in all other systems mentioned\nabove, output is always sent to the high-speed line printer).\nThe \"PR\" option causes SCRIPT to send the output directly to the high-speed\nprinter.  The \"DISK\" option causes SCRIPT to put the output on your disk,\nin a file with the same name as the input file, but with a file type of\nLISTING.\nThe \"SCREen\" option is useful for visual-display devices which do not support\n\"backspace and underscore\" output.\n..sp;..cc 3;..oo 1 STOP\n..ix 'options' 'STOP'\nIf your output is being produced at a hard-copy terminal, this option will\ncause SCRIPT to stop at the bottom of each page so that you can put in\nthe next sheet of paper.\n..sp;..cc 2;..fo no;..oo 1 example\nSPOOL PRINTER FORM 5200\nSC filename (PR NUM=85 MARK\n..in\n.chapter 'Where To Go From Here?'\n..pp Before you embark on using SCRIPT for a document of any great complexity,\nit is recommended that you try SCRIPT on a few small documents, to build up\nsome experience.\n..pp If you need help with SCRIPT, contact one of the User Services\nConsultants, in any of the Consulting Offices.\n.section 'SCRIPT Reference Card'\n..pp;A copy of the most current SCRIPT Reference Card may be obtained\nfrom any of the Consulting Offices.\n.section 'SYSPUB'\n..pp SYSPUB is a set of MACROs which simplify the task of\npreparing and formatting documents which fall into the category of papers,\ntheses, books, and other research publications.\n..pp SYSPUB allows you to prepare your publication using a set of commands\nwhich perform all of the numbering of chapters, sections, subsections,\ntables, figures, and footnotes automatically.\nThese commands also format the text to conform to a widely-accepted\nset of layout standards (including those required for theses at this\nuniversity).\nSYSPUB will also generate a Table of Contents for your publication.\n..pp;SYSPUB allows you to prepare your document\nwithout you having to learn any more about SCRIPT than is presented\nin this Introduction\n(in fact, with SYSPUB, you don't need most of what is in this Introduction,\nbut it's a good idea to understand it anyway).\nThis Introduction was prepared using the SYSPUB commands.\n..pp A copy of the SYSPUB User's Guide many be obtained from any of the\nConsulting Offices.\n.section 'Obtaining a SCRIPT Reference Manual'\n..pp The material presented in this Introduction is the basis for solving\nmost of the common formatting problems.\nWhen you need more information on SCRIPT, then submit the following job:\n..sp;..cc 2\n     //jobname JOB  '#,TIME=2,PAGES=300,F=5200'\n     //     EXEC     SCRIPTMN\n.section 'Updating Your SCRIPT Reference Manual'\n..pp;SCRIPT is under on-going development at the University of\nWaterloo.  Updates to your SCRIPT Reference Manual may be produced by\nsubmitting the following job:\n..sp;..cc 2\n     //jobname JOB '#,T=1,P=200,F=5200'\n     //     EXEC     SCRIPTMN,SCRIPT='+UPDATE=yymmdd'\n..sp\nwhere \"yymmdd\" is replaced by the date on which your SCRIPT Reference\nManual was printed (see the title page in the SCRIPT Reference Manual).\nEach time you submit this job, you obtain a new title page, and replacement\npages for your Reference Manual for any component which has been changed\nsince the date specified by \"yymmdd\".\n..pp;You can submit either of the above jobs through WITS, WYLBUR, or CMS.\nIf you are submitting a job through CMS, then type \"help submit\" for more\ninformation before you attempt to submit the job.\nIf you are submitting a job on cards at a BATCH Service card-reader, then\nyou must replace the \"#\" with your account number and lock.\n..do end;..cm end of installation-dependent chapters ---------------------\n.index 1 'Index of SCRIPT Control Words and Options' 2\n.contents\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SCRIPT": {"ttr": 5641, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00E\\x00E\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE\n.ur .if &SYSAD lt 10 .ad 10\n.ur .if &SYSPASSNO eq 1 .im SUPERT\n.tm 6\n.bm 5\n.hm 2\n.fm 2\n.im HEADER\n.bt //-%-//\n.ur .if '&UPDATE' ne '' .ur .bt //Updates for &UPDATE//\n.sr SCENTRE = 'NO'\n.ur .if '&UPDATE' eq '' and '&BINDING' eq 'CENTRE' .th .do\n.sr SCENTRE = 'YES'\n.ad ODD 5\n.do end\n.tt /SCRIPT//PREFACE/\n.ur .if '&SCENTRE' eq 'YES' .th .et /PREFACE//SCRIPT/\n.ur .if &SYSPASSOF gt 1 .im PREFACE\n.tt /SCRIPT//TABLE OF CONTENTS/\n.ur .if '&SCENTRE' eq 'YES' .th .et /TABLE OF CONTENTS//SCRIPT/\n.ur .if &SYSPASSOF gt 1 .im CONTENTS\n.im SETADD\n.tt /SCRIPT//PURPOSE/\n.ur .if '&SCENTRE' eq 'YES' .th .et /PURPOSE//SCRIPT/\n.im PURPOSE\n.tt /SCRIPT//OPTIONS/\n.ur .if '&SCENTRE' eq 'YES' .th .et /OPTIONS//SCRIPT/\n.im OPTIONS\n.tt /SCRIPT//ERROR MESSAGES/\n.ur .if '&SCENTRE' eq 'YES' .th .et /ERROR MESSAGES//SCRIPT/\n.im ERRORS\n.tt /SCRIPT//CMS ONLINE PROCEDURES/\n.ur .if '&SCENTRE' eq 'YES' .th .et /CMS ONLINE PROCEDURES//SCRIPT/\n.im CMSSCR\n.tt /SCRIPT//TSO ONLINE PROCEDURES/\n.ur .if '&SCENTRE' eq 'YES' .th .et /TSO ONLINE PROCEDURES//SCRIPT/\n.im TSOSCR\n.tt /SCRIPT//ONLINE TERMINAL SUPPORT/\n.ur .if '&SCENTRE' eq 'YES' .th .et /ONLINE TERMINAL SUPPORT//SCRIPT/\n.im ONTERM\n.tt /SCRIPT//OFFLINE PRINTER SUPPORT/\n.ur .if '&SCENTRE' eq 'YES' .th .et /OFFLINE PRINTER SUPPORT//SCRIPT/\n.im OFFSCR\n.tt /SCRIPT//CREATION OF INPUT FILES/\n.ur .if '&SCENTRE' eq 'YES' .th .et /CREATION OF INPUT FILES//SCRIPT/\n.im CRINPUT\n.if %/2*2-% = 0 .th .im BLANKPG\n.im NSCRFC1\n.em no\n.if %/2*2-% = 0 .th .im BLANKPG\n.im APDIXCTL A 761217\n.im APDIXCTL B 760101\n.im APDIXCTL C 760101\n.im APDIXCTL D 770712\n.im APDIXCTL E 761217\n.im APDIXCTL F 770124\n.im APDIXCTL G 770422\n.im APDIXCTL H 770103\n.im APDIXCTL I 760101\n.tb\n.tt /SCRIPT//PREFACE/\n.ur .if '&SCENTRE' eq 'YES' .th .et /PREFACE//SCRIPT/\n.ur .if &SYSPASSOF le 1 .im PREFACE\n.tt /SCRIPT//TABLE OF CONTENTS/\n.ur .if '&SCENTRE' eq 'YES' .th .et /TABLE OF CONTENTS//SCRIPT/\n.ur .if &SYSPASSOF le 1 .im CONTENTS\n.cm  last line of SCRIPT documentation\n.qt\n.cm End of SCRIPT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SCRIPTCD": {"ttr": 5643, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00O\\x00O\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 79, "newlines": 79, "modlines": 0, "user": "CBT249"}, "text": ".CM ---------- SCRIPT REFERENCE CARD GENERATOR -----------------------\n.LL 72\n.UR .AD (75-&SYSLL)/2\n.PL 132\n.WD\n.HS 0;.HM 0;.TM 1\n.BM 27\n.OB /SCRIPT REFERENCE CARD//%/\n.EB /%//UNIVERSITY OF WATERLOO COMPUTING CENTRE/\n.CM ---------- PAGE CONTROL FOR THE REFERENCE CARD -------------------\n.CR PA XX\n.RM PA SAVE NOSAVE\n.CM\n.RM\n.CM ---------- THE OUTPUT PAGE ---------------------------------------\n.FN SET 1\n.FN SET 1 ////\n.FN ON\n.CE;.UR &SYSVERSION\n.SP\n.UR .BX 1 &SYSLL\n.SP;.CE;THE OUTPUT PAGE\n.SP;.BX OFF;.SP\n.IM APENDIXD . SCRIPTCD\n.FN OFF\n.XX\n.CM ---------- CONTROL WORDS BY FUNCTION -----------------------------\n.SP 3;.CC BEGIN\n.UR .BX 1 &SYSLL\n.SP;.CE;CONTROL WORD SUMMARY, BY FUNCTION\n.SP;.BX OFF;.CC END 10;.SP\n.IM REFALPH . SCRIPTCD\n.CM ---------- OPTIONS -----------------------------------------------\n.SP 3;.CP BEGIN\n.UR .BX 1 &SYSLL\n.SP;.CE;OPTIONS SUMMARY\n.SP;.BX OFF\n.CP END 10;.SP\n..RM IN SAVE NOSAVE\n.UR .IF &0 EQ 0;.TH ..IN\n.EL .UR .IF &1+0 LT 0;..TH ..IN -2\n.EL ..IN +2\n.SR 0 = 0\n.RM\n.SR 0 = 0\n.IM OPTIONS . SCRIPTCD\n.RM IN DELETE\n.CM ---------- SYSTEM REFERENCE VARIABLES AND REMOTES ---------------\n.SP 3;.CP BEGIN\n.UR .BX 1 &SYSLL\n.SP;.CE;SUMMARY OF SYSTEM REFERENCE VARIABLES AND REMOTES\n.SP;.BX OFF\n.CP END 10;.SP\n.IM APENDIXG . SCRIPTCD\n.CM ---------- CONTROL WORDS IN ALPHABETIC ORDER ---------------------\n.SP 3\n.UR .BX 1 &SYSLL\n.SP\n.CE;.UP CONTROL WORD SUMMARY, IN ALPHABETICAL ORDER\n.SP;.BX OFF\n.LI )\n))RM IN SAVE NOSAVE\n)IF &0 NE 0;)TH ))IN 3;)EL ))IN\n)SR 0 = 0\n)RM\n)SR HRGLASS=0\n)UR )TB &SYSLL.RIGHT\n)SR BRKIND='*'\n)SU ON\n)IM APENDIXI ) SCRIPTCD\n.RM IN DELETE\n.CM ---------- SYSPUB COMMAND SUMMARY --------------------------------\n.SP 3;.CP BEGIN\n.UR .BX 1 &SYSLL\n.SP;.CE;SYSPUB COMMAND SUMMARY\n.SP;.BX OFF\n.CP END 10;.SP\n.IM APENDIXX . SCRIPTCD\n.CM ---------- END OF SCRIPT REFERENCE CARD GENERATOR ----------------\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCRIPTNI": {"ttr": 5891, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x02s\\x02s\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 627, "newlines": 627, "modlines": 0, "user": "CBT249"}, "text": "..im syspub layout=guide hy=full\n..sr pubCHrom = 'roman upper'\n..tm 12;..hs 3\n..us |..tt 1 /|UNIVERSITY OF WATERLOO COMPUTING CENTRE|//SCRIPTniq/\n..ur ..us |.tt 3 /|SCRIPT Techniques|//&sysdate/\n.prelim 'ABSTRACT'\n..tm 6;..hs 0;..tt ////;..tt 3 ////\n..pp The University of Waterloo version of SCRIPT (referred to as\nWaterloo SCRIPT, or simply as SCRIPT)\nis a powerful text formatting program.\nA general introduction to SCRIPT is given in the \"Introduction to SCRIPT\"\ndocument available from any of the Consulting Offices.\nIt is assumed that you are familiar with and experienced at using the\nSCRIPT control words presented in that document.\n..pp;This \"SCRIPT Techniques\" document illustrates\nsome of the programming-language capabilities of SCRIPT which will enable\nyou to automate the preparation and maintenance of documentation.\n..pp;There are two good reasons for automating the production of documentation:\n.point begin\nto eliminate the \"unnecessary re-work\" impact of making changes, so that\nyou can add a chapter, delete a section, interchange large sections of text,\netc., without affecting the rest of the document;\n.point\nto make it easier for someone else\nto learn how to use the computer to prepare documenation, and also reduce\nthe amount of \"human time\" needed to produce a document.\n.point end\n..pp;A number of the techniques presented in the following pages can be used\nto create a set of \"higher-level\" formatting commands so that repetitive tasks\ncan be automated, standardized, and simplified.\n..cm --------------------------------------------------------------\n..cc begin;.boxon\nThis document is continually being modified and extended\nto include additional techniques of potential wide-spread interest.\n.boxoff;..cc end\n..cm --------------------------------------------------------------\n.chapter 'Imbedding Other Input Files'\n..pp;With any large document, it is to your advantage to create a separate input\n..us file;(collection of input lines)\nfor each of its constituent parts, and then construct\na small \"driver\" file to imbed each file, in the desired order.  In this\nfashion, small sections of text may be developed independently\nand may easily be interchanged by changing the order in which they are\nimbedded.\n..pp;You can instruct SCRIPT to imbed another input file\nby using the \".im\"\n..ix 'im (IMBED)'\nIMBED control word.  For example, if an input file consisted only of\n..sp;     .im chap1;.im chap2;.im chap3\n..sp;the three \"chapters\" could be maintained as three\nseparate files.  Moreover, the first file, \"chap1\", could consist of\n..sp;     .im sect1;.im sect2\n..sp;which would, in turn, cause two more files to be imbedded during the\nformatting process.\n.chapter 'SCRIPT As A Programming Language'\n.section 'System Reference Variables'\n..pp;SCRIPT maintains a large number of \"status indicators\" and \"system\ninformation  values\" in special variables called \"System Reference Variables\".\nIn the examples listed below, the name of the System Reference Variable is\nshown on the right, followed by a brief explanation, followed in parentheses\nby it's value at the time this document was formatted.\n..sp;..ju no;..in 11\n..oo 1 SYSDATE\n..ur contains today's date (&sysdate)\n..sp;..oo 1 SYSLINE\n..ur the current line number on the page (&sysline)\n..sp;..oo 1 SYSLL\n..ur the current LINE LENGTH (&sysll)\n..sp;..oo 1 SYSPAGE\n..ur contains the current page number, as a number (&syspage)\n..sp;..cc begin;..oo 1 SYSPPAGE\n..ur contains the current page number, as a character string (&sysppage)\n..br;(if we were on page 2 and page numbers were being printed as lower-case\nroman numerals, SYSPPAGE would have the value \"ii\")\n..cc end;..sp;..oo 1 SYSOUT\n..ur a \"TERM\" if output is on-line, otherwise \"PRINT\" (&sysout)\n..in;..pp;System Reference Variables are used in conjunction with the \".ur\"\n..ix 'ur (USE REFERENCE)';control word,\nas shown in the following\nexample which prints today's date.\n..sp;     .ur Today is &sysdate..\n..ix 'ur (USE REFERENCE)'\n..pp;The first period after \"&sysdate\" is treated as a \"concatenation\nindicator\" by SCRIPT.\nThus, \"&sysdate..\" means \"today's date, concatenated with a period\", and the\nresult is:\n..sp;..ur      Today is &sysdate..\n.section 'User-Defined Reference Variables'\n..pp;You can define Reference Variables of your own (just don't pick names\nwhich start with the letters \"sys\") and assign values to them by using\nthe \".sr\" control word.\n..sp;..cc 3;     .sr name = numeric integer value\n     .sr name = string\n     .sr name = 'a delimited string'\n..ix 'sr (SET REFERENCE)'\n..sp;The name of a Reference Variable may contain up to ten alphanumeric\ncharacters.\nA Reference Variable may optionally be subscripted from (-32767) to (+32767).\nThe value assigned to the Reference Variable may be an integer (such as\n..us 3|), an undelimited string (such as the word\n..us dog|), or a delimited string (such as |'hello_there').\n..pp;If you wish to use other Reference Variables on the left- or right-hand\nside of the \"=\", then you must use the alternate form of SET REFERENCE, \".se\",\n..ix 'se (SET REFERENCE)'\nwhich does symbolic substitution as many times as is needed to\neliminate Reference Variables from both the \"name\" and \"value\" fields.\nFor example,\n..sp;     .se i = &i + 1\n..sp;adds 1 to the previous value of Reference Variable \"i\".  If \"i\" has not\npreviously been defined, the above is equivalent to\n..sp;     .se i =  + 1\n..sp;since the \"&i\" results in the null string.\n..pp;If Reference Variable \"dog\" contained the string \"cat\", then\n..sp;     .se &dog = 1\n..sp;would create a Reference Variable \"cat\" with the value \"1\".\n.section 'Automatic Substitution of Reference Variables'\n..pp Whenever there are a large number of lines containing Reference\nVariables, it is often easier to use\nthe SUBSTITUTE REFERENCE control word \".su\"\n..ix 'su (SUBSTITUTE REFERENCE)'\nto cause symbolic substitution,\nrather than numerous occurrences of \".ur\".\nFor example, the following\n..sp;.cc begin\n     .su on\n     .sr fignum = &fignum + 1\n     Figure &fignum ....... &sysppage\n     .su off\n..cc end;..sp\nproduces:\n..sp\n..su on\n..sr fignum=&fignum+1\n     Figure &fignum ....... &sysppage\n..su off\n.section 'The \"PERFORM\" Control Word'\n..pp;The SCRIPT \".pe\" control word is used in one of the two forms\n..sp;..cc 2\n     .pe n;operand line          .pe n\n                         (or)    operand line\n..ix 'pe (PERFORM)'\n..sp;It causes the \"operand line\", which may contain both SCRIPT control\nwords and text, to be \"performed\" the specified \"n\" times.\nFor example, it is sometimes desirable to construct a dashed line which\nwill stretch across the full width of the page (that is, has the same number\nof \"-\"s as the LINE LENGTH value).\nThis can be done as follows:\n..sp;..cc 3\n     .sr dash = ''\n     .ur .pe &sysll\n     .se dash = '-&dash'\n..sp;The first line sets \"dash\" to the null string.\nThe second line results in a \"perform counter\" equal to the \".ll\" value.\nThe third line adds another \"-\" to the value of \"dash\".\nThe Reference Variable \"dash\" can then be used to create a dashed line across\nthe page, as follows:\n..sp;     .br;.ur &dash\n..sp;which results in\n..br;..ur &pubdash\n.section 'Testing Various Conditions:  the \"IF\" Control Word'\n..pp;The full power\nof Reference Variables is realized in conjunction with the ability to test\nthe value of a Reference Variable, and then conditionally do something.\nFor example, the input line\n..sp;     .ur .if &syspage ne 1;.pa\n..sp;says \"if the value of the current page number is not equal to 1, then\neject to the top of the next page\".\nThe \".if\" control word has two forms:\n..ix 'if (IF)'\n..sp;     .if <condition>;<operand>\n..sp;and\n..sp;..cc 3;     .if <condition>\n     .th <operand1>\n..ix 'if (IF)' 'th (THEN)'\n     .el <operand2>\n..ix 'if (IF)' 'el (ELSE)'\n..sp;In both of the above forms, the \"operand\" may be either a single\nSCRIPT control word, or it may be a text line.\n.subsection '\"DO\" Groups'\n..pp;The full power of the \".if\" control word is realized when it is used in\nconjunction with the \".do\" and \".do end\" control words.\n..ix 'do (DO)'\n..ix 'do (DO)' 'do end (DO END)'\n..sp;..cc begin\n     .if <condition>;.th .do\n     <operand1>\n     .do end;.el .do\n     <operand2>\n     .do end\n..cc end\n..sp;The operands can now be any number of SCRIPT control words and/or\ntext lines.\n.section 'LENGTH, TYPE, and SUBSTRING Operations on Reference Variables'\n..pp;SCRIPT provides you with the ability to determine the number of\ncharacters in a Reference Variable or whether a Reference Variable contains\nan integer or a character string, and to take a substring of the contents of\na Reference Variable, as shown below:\n..sp;..ju no;..in 16;..cc begin\n..oo 1 L'&refvar\nthe value of this expression is the number of characters in the variable\n\"refvar\"\n..cc end;..sp;..cc begin;..oo 1 T'&refvar\nthe value of this expression is the character \"N\" if \"refvar\" has an\ninteger value, or \"C\" otherwise\n..cc end;..sp;..cc begin\n..oo 1 &refvar(m:n)\nthe value of this expression is a string consisting of all the characters\nfrom positions \"m\" through \"n\" inclusive in the value of \"refvar\"\n..cc end\n..in;..ju\n..pp;For example, let us assume that at the start of each major section\nof a reference manual, the section number is contained in the Reference\nVariable \"number\" and the section title in the Reference Variable \"title\".\nAt the start of each section, we wish to eject to a new page, reset the\npage number to \"1\", set the page number prefix to the first 5 characters\nof the section title (in upper case) and followed by a dash,\nadd one to the section number, and print the section number and\ntitle such that the title is underscored but the number is not.\nIf the title takes more than one line to print, we want the second and\nsubsequent lines offset ten spaces more than the length of the section number.\nThe following sequence of SCRIPT control words accomplishes that:\n..rm macro 2 nosave\n     .pa 1\n..ur      .ur .up .pn prefix &&&1.(1:5).-\n     .se number = &number + 1\n     .ur .of 10+L'&number\n     .ud set |\n..ur      .ur .us |&&number   |&&&1\n     .of;.sp\n.rm\n..sp;..cc begin;.macro title;..cc end\n..ur ..sr maceg1 = |&pubSWprt|;..ur ..sr maceg2 = |&sysppage|\n.chapter 'Writing Your Own Higher-Level Formatting Commands'\n.section 'MACROs'\n..pp;A MACRO is a \"named\" sequence of SCRIPT control words and text delimited\nwith \".dm\"\n..ix 'dm (DEFINE MACRO)'\ncontrol words.  SCRIPT saves these input lines\nand invokes them automatically whenever\nthe name of the MACRO is used as a SCRIPT control word.\nMACROs are of the form:\n..sp;..cc 3\n     .dm name begin\n     text and/or additional SCRIPT control words\n     .dm name end\n..sp;and are invoked by specifying:\n..sp;     .name operands\n..sp;The operands can be a mixture of two forms:  positional and keyword.\nWhen the MACRO is invoked, SCRIPT processes the keyword operands as though\nthey were of the form\n..sp;     .sr keyword=value\n..sp;and assigns the values of the positional operands to the Reference\nVariables \"1\", \"2\", \"3\", ..., and assigns the\n..us number;of positional operands to the Reference Variable \"0\", and then\nexecutes the body of the MACRO.\n..pp;..ur For example, in Section &maceg1 on page &maceg2., we illustrated\na sequence of SCRIPT control words which were to be executed at the start\nof each section of a reference manual.\nBy using MACROs, we could write a higher-level formatting command, called\n\"section\", to do the same thing:\n..sp;..cc begin\n     .dm section begin\n.macro '1'\n     .dm section end\n..cc end;..sp;Now, all that is necessary to start a new section is to use\nthis \"section\" MACRO just like a SCRIPT control word:\n..sp;     .section 'title of section'\n..sp;SCRIPT will assign the positional operand \"title of section\" to\nReference Variable \"1\", and execute the body of the MACRO.\n..pp;To give a simpler example, we can write a \"paragraph\" MACRO\nand use it to start each paragraph of text in our document:\n..sp;..cc 3\n     .dm para begin\n     .sp a;.il +8\n     .dm para end\n..sp;defines a MACRO named \"para\" which you can invoke by specifying\n..sp;     .para\n..sp;and, as a result, one blank line will be generated and the next line\nof text will be indented 8 positions to the right of the current INDENT value.\n.section 'REMOTEs'\n..pp;A REMOTE is a special sequence of SCRIPT control words and/or text\ndelimited by \".rm\" control words.\n..ix 'rm (REMOTE)'\nSCRIPT saves these input lines and invokes them automatically when a\nparticular event occurs.\nFor example,\n..sp;..cc 3\n     .rm 10\n     text and/or other SCRIPT control words\n     .rm\n..sp\ndefines a REMOTE which will be invoked the next time SCRIPT attempts to output\nsomething on line number 10 (if we're already past line 10 on the current\npage, then it will be invoked at line 10 of the next page).\nIf we wanted this sequence invoked for the next 5 occurrences of line 10\n(that is, on the next 5 pages), then changing the first line to\n..sp;     .rm 10 5\n..sp;would accomplish that.\nIf we wanted this sequence invoked on all subsequent pages, then\n..sp;     .rm 10 save\n..sp;would prevent the REMOTE from being deleted after being invoked a specific\nnumber of times.\n..pp;If we wanted to invoke this REMOTE ourselves, whether we were on line 10\nor not, we could do so by using the\nSCRIPT \".si\" (SIGNAL REMOTE) control word:\n..sp;     .si 10\n..ix 'si (SIGNAL REMOTE)'\n..pp;If we wanted to delete the REMOTE, to prevent it from being invoked again,\nwe could do so by specifying:\n..sp;     .rm 10 delete\n..pp;Rather than deleting a REMOTE, it may be desirable to \"deactivate\" it\ntemporarily.\nThis can be done as follows:\n..sp;..cc 4\n     .rm 10 save\n     .ur &efcm\n     text and/or control words\n     .rm\n..sp;Setting the Reference Variable \"efcm\" to the value \".cm\" results in a\n\"comment\" line when the REMOTE is invoked, so that the \"text and/or control\nwords\" which follow it will get executed as normal.\nWhen we want to \"deactivate\" the REMOTE, however, re-defining the Reference\nVariable \"efcm\" to have the value \".ef\"\n..ix 'ef (END FILE)';(END FILE) will cause SCRIPT to terminate processing\nof the REMOTE when it executes the \".ef\" control word.\nThe REMOTE will still be invoked every time SCRIPT tries to print on line 10,\nbut it won't do anything.\nYou can re-define \"efcm\" back to \".cm\" when you want to re-activate the REMOTE\nlater.\n.chapter 'Floating Blocks'\n..pp;SCRIPT provides several control words which cause text to be formatted\ninto an \"internal workarea\" and then printed; they are of the form\n..sp;..cc 3\n     .xx begin\n     text and/or additional control words\n     .xx end n\n..sp;where \".xx\" is one of the control words\n..sp;..cc 4\n     .cc   (conditional column)\n     .cp   (conditional page)\n     .fk   (floating keep)\n     .fb   (floating block)\n..sp;SCRIPT formats the text in this begin/end sequence into an internal\nworkarea, and keeps a count of the number of lines of \"output\" which resulted.\nIf an integer \"n\" has been specified after the \"end\" operand, SCRIPT adds the\nvalue of \"n\" to this count.\nSCRIPT uses the count in determining where the block of \"output\" lines should\nbe printed, as follows:\n..sp;..in 6;..ju no;..cc begin;..oo 1 .cc\nif the number of lines remaining in the text area in this column is less than\nthe count\nof lines in the block, SCRIPT begins a new column and then prints the block\n..cc end;..sp;..cc begin;..oo 1 .cp\nif the number of lines remaining in the text area on this page is less than\nthe count\nof lines in the block, SCRIPT begins a new page and then prints the block\n..cc end;..sp;..cc begin;..oo 1 .fk\nif the number of lines remaining in the text area in this column is less than\nthe count\nof lines in the block, SCRIPT attempts to fill the remainder of this column\nby formatting the input which follows the block until the column is full, and\nthen prints the block at the top of the next column\n..cc end;..in;..ju\n..pp;The \".fb\" (FLOATING BLOCK) control word functions in a slightly different\n..ix 'fb (FLOATING BLOCK)'\nmanner; the block doesn't print until you tell SCRIPT to print it, and this\nmakes \".fb\" a useful programming tool.\nSCRIPT provides two Reference Variables related to \".fb\"s:\n..sp;..in 8;..ju no;..cc begin;..oo 1 SYSFBC\nthe count of the total number of output lines waiting to print, in all\n\".fb\" blocks\n..cc end;..sp;..cc begin;..oo 1 SYSFBF\nthe count of the number of output lines in the FIRST block waiting to print\n..cc end;..in;..ju\n..pp;To print a \".fb\" block, you must specify the SCRIPT control word\n..sp;     .fb dump n\n..sp;If used without specifying an \"n\", all existing \".fb\" blocks will be\nprinted; if you just want to print the first one, specify a value of \"1\" for\n\"n\"; if you want to print the first 3, then specify a value of \"3\".\n.chapter 'Case-Study Examples'\n.section 'Automating Papers for IEEE Two-Column Photo-Offset Publications'\n..pp;The style requirements and layout form for papers submitted to the\nInstitute of Electrical and Electronics Engineers\nprovide an excellent case-study example in the use of SCRIPT to automate the\npreparation of a document.\n..pp;The layout grid provided by\n.footnote IEEE\n..ju no;IEEE Editorial Department, 345 East 47 Street, New York, N.Y. 10017\n.footend\nis a 9.5\"x13\" area with two columns with a 1/4\" gutter between them.\nOn the first page, the top 2.5\" of the page is to contain a full-page-width\ntitle area, and the bottom 2.5\" of the left column is to be left blank for\nuse by the IEEE.\nThere is a two-line bottom margin; page numbers are centered on the second of\nthese two lines.\nThe style requirements dictate three levels of headings, which we shall\nrefer to as \"chapters\", \"sections\", and \"subsections\".\nChapter titles are to be centered, in capitals, and underscored.\nSection titles are to be flush with the left margin, upper- and lower-case,\nand underscored.\nSubsection titles are to be \"paragraph\" indented, upper- and lower-case,\nunderscored, followed by a period, and run in with the text of the paragraph.\nThe body of the paper is to begin with a short \"ABSTRACT\" in the same style\nas a chapter.\nFor purposes of simplification, we are going to assume that the output\nis being produced at 6 lines to the vertical inch and 10 characters to the\nhorizontal inch.\n..pp;Our objective in this example is to write a file called \"ieee\" which the\nauthor will imbed at the start of the input file for the paper being produced.\nThis \"ieee\" file will contain all the SCRIPT control words needed to set up\nthe formatting environment so that the author's task in producing the paper\n.fignum ieee1\ncan be simplified to the point of producing an input file as shown in\n..ur Figure &ieee1..\n.figbegin;.boxon;..li >\n.im ieee\nTITLE OF PAPER\n.sp\nName of Author\nAuthor's Business Affiliation\nCity, Province/State, Country\n.abstract\n.pp;text of abstract ...\n.chapter 'title'\n.pp;text ...\n.section 'title'\n.pp;.text ...\n.subsection 'title'\ntext ...\n   .\n   .\n.chapter 'References'\n   .\n   .\n>>li .\n.figure ieee1 'Input File Prepared by Author for IEEE Layout'\n.boxoff;.figend\n..pp;The author imbeds the \"ieee\" file, enters the text for the page-one title\narea without worrrying about the vertical or horizontal centering of that text\nin the title area, and then uses the commands we are going to write as MACROs\nto create the paper.\nTo begin, we will write the SCRIPT control words which define the formatting\n.fignum ieee2\n..ur environment for the paper, as shown in Figure &ieee2..\n.figbegin;.boxon;..li >\n.cm --- define page for terminal or printer\n.hs 0;.hm 0;.tm 0;.bt //%//\n.ur .if &sysout eq TERM\n.th .do;.pl 78;.bm 2;.do end\n.el .do;.pl 132;.bm 56;.do end\n.cm --- define hyphenation environment\n.hy on;.hy set thresh 4;.hy set minpt 2\n.hy set endpt 3;.hy set sup 2\n.cm --- define two-column environment\n.ll 95;.cl 45;.cd 2 0 50\n.cm --- define a remote to leave bottom 15 lines\n.cm     of first column blank\n.ur .rm &syspl-&sysbm-15 1\n.cb\n.rm\n.cm --- go into single-column mode, collect title area\n.sc;.ce yes;.fb begin\n>>li .\n.figure ieee2 'The \"ieee\" Formatting Environment'\n.boxoff;.figend\n..pp;..ur Note that, after \"ieee\" is imbedded, we are in \"centered\" mode, and\nthe input text lines are being formatted in the internal \".fb\" workarea.\nAlso, there is a REMOTE waiting to be invoked at line 61 (page length minus\nbottom margin minus 15) which will issue a \".cb\" COLUMN BEGIN and cause the\nlast 15 lines (2.5\") of the first column to be left blank.\n.fignum ieee3\n..ur The \".abstract\" MACRO (see Figure &ieee3), must terminate the \".fb\",\ncentre the floating-block lines at the top of the page, go into two-column\nmode, print the \"ABSTRACT\" title, and start formatting the text.\n.figbegin;.boxon;..li >\n.dm abstract begin\n.cm --- print the title area centered vertically\n.fb end;.ur .sp (15-&sysfbc)/2;.fb dump\n.cm --- go to line 26, print \"ABSTRACT\"\n.ln 26;.mc;.ce 1;.uc abstract\n.fo;.sk c\n.dm abstract end\n>>li .\n.figure ieee3 'The Abstract MACRO'\n.boxoff;.figend\n..pp;The \".sk c\" produces a \"skip conditional\":\n..ix 'sk (SKIP)' 'conditional'\na blank line which will only exist if it is not followed immediately\nby something which produces another blank line (otherwise, SCRIPT will throw\nthe conditional blank line away).\nWe can now write the MACROs for \".chapter\", \".section\", and \".subsection\",\n.fignum ieee4;..ur as shown in Figure &ieee4..\n.figbegin;.boxon;..li >\n.dm chapter begin\n.sp 2;.cc 6;.in;.ce 1;.ur .uc &1\n.fo;.sk c\n.dm chapter end\n.dm section begin\n.sp;.cc 4;.in;.co;.ju no;.hy sup\n.ur .us &1\n.ju;.sk c\n.dm section end\n.dm subsection begin\n.sp;.cc 2;.in;.fo\n.il 3;.ur .us &1..\n.dm subsection end\n>>li .\n.figure ieee4 'The Chapter, Section, and Subsection MACROs'\n.boxoff;.figend\n..pp;The \".in\"s issued by each of these MACROs are just a \"safety precaution\"\nin case the author left an INDENT or OFFSET outstanding -- it depends on\nhow much you want to try to protect people from themselves.\n.section 'Automating Footnotes'\n..pp;The SCRIPT \".fn\" (FOOTNOTE) control word handles the placement of\n..ix 'fn (FOOTNOTE)';footnote text for you, but it does no more than that.\nIn this example, we will write a set of MACROs based on the \".fn\" control\nword to automate footnotes completely.\nWe assume that footnotes are to be numbered consecutively starting at \"1\",\nand that if the document is being produced on the printer, a print train\ncontaining superscript numbers is being used, but if the document is being\nproduced at an on-line terminal, then such superscripts are not available.\nThe MACROs we are going to write will be called \".footnote\" and \".footend\",\nand we will use them in the same way that \".fn begin\" and \".fn end\" are used.\n.fignum foot1\nIn order to translate footnote numbers to superscripts, we need the\n..ur control words shown in Figure &foot1..\n.figbegin;.boxon;..li >\n.cm --- define the \"_\" to be the backspace character\n.cm     and define the hex codes for the superscripts\n.bs _\n.sr super1 = 'B_1'\n.sr super2 = 'B_2'\n.sr super3 = 'B_3'\n.sr super4 = 'B_4'\n.sr super5 = 'B_5'\n.sr super6 = 'B_6'\n.sr super7 = 'B_7'\n.sr super8 = 'B_8'\n.sr super9 = 'B_9'\n.sr super0 = 'B_0'\n.bs\n>>li .\n.figure foot1 'Translating Footnote Numbers to Superscripts'\n.boxoff;.figend\n..pp;..ur The control words shown in Figure &foot1 define 10 Reference\nVariables called \"super1\" through \"super0\" whose values are the machine-code\nrepresentations for the superscript digits 1 through 0.\n.fignum foot2\n..ur The MACROs are shown in Figure &foot2..\nThey are used as follows:\n..sp;..cc 5\n     text, up to word to be\n     .footnote referenced\n     text of footnote\n     .footend\n     followed by rest of sentence\n..sp;and produce the following result:\n..sp;..cc 2\ntext, up to word to be\n.footnote referenced\ntext of footnote\n.footend\nfollowed by rest of sentence\n.figbegin;.boxon;..li >\n.dm footnote begin\n.cm --- add 1 to the previous footnote number\n.se footnum = &footnum + 1\n.cm --- are we online or offline?\n.ur .if &sysout eq TERM;.th .se x = '(&footnum)'\n.el .do\n.sr x = '';.sr i = 0;.up .pe L'&footnum\n.se i = &i + 1;.se x = '&x.&&&&super&&footnum(&i:&i)'\n.do end\n.cm --- output the word and the footnote number\n.ur &1.&x\n.fn begin\n.cm --- if already some footnotes on this page,\n.cm     leave blank line between footnotes\n.ur .if &sysfnc gt 0 .sp\n.cm --- indent and output the footnote symbol\n.ur .in L'&x\n.ur .oo 1 &x\n.cm --- start collecting footnote text\n.dm footnote end\n.dm footend begin\n.fn end\n.dm footend end\n>>li .\n.figure foot2 'The Footnote MACROs'\n.boxoff;.figend\n..pp;The \".footnote\" MACRO adds one to the footnote number, and if\noutput is being produced to the terminal, creates a footnote symbol\nconsisting of the footnote number in parentheses.\nIf output is to the printer, it creates a footnote symbol by converting\neach of the digits in the footnote number to its corresponding\nsuperscript representation.\nThe input line\n..sp;     .se x = '&x.&&&&super&&footnum(&i:&i)'\n..sp;requires an explanation of SCRIPT's \"substitution scan\" algorithm.\nEach time SCRIPT encounters \"&&\", it replaces it by a single \"&\" and then\ncontinues scanning the input line.\nIf the footnote number were \"25\" and SCRIPT were on the first time through the\n\".pe\", then, after one pass of the substitution scan algorithm, the above\nline would have been reduced to\n..sp;     .se x = '&&super&footnum(1:1)'\n..sp;and after the second pass, would have been reduced to\n..sp;     .se x = '&super2'\n..sp;which would give \"x\" the machine-code value \"B2\" on the next pass.\nOn the second time through the \".pe\", \"x\" would end up containing the\nmachine-code value \"B2B5\", the superscript representation of the number \"25\".\n.section 'Automating Boxes'\n..pp;In this example, we will write MACROs called \".boxon\" and \".boxoff\"\n.fignum boxes\n..ur to automate the placement of boxes around text (see Figure &boxes).\n.figbegin;.boxon;..li >\n.dm boxon begin\n.sk;.ur .bx &sysin+1 &syscl+(&sysinr)\n.in +3 -3;.sk\n.dm boxon end\n.dm boxoff begin\n.sk;.in -3 +3;.bx off;.sk\n.dm boxoff end\n>>li .\n.figure boxes 'The Boxon and Boxoff MACROs'\n.boxoff;.figend\n.index 1 'INDEX OF SCRIPT CONTROL WORDS' 2\n.contents\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SCRIPTUP": {"ttr": 6147, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x02u\\x02u\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 629, "newlines": 629, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT SCRIPTUP\n.sp 2;.in;.cp 5\n.la DATE:  January 13, 1978/VERSION(3.2)\n.sp\n.of 2\n- addition of the 'PRINT' or 'PRT' option as an alias\nfor 'OFFLINE'.\n.of 2\n- Enhanced ASCII terminal support.\nVia a parm the terminal type may be defined to allow\nSCRIPT to perform proportional inter-word spacing,\nhalf shift up and down to produce subscripts and superscripts,\nnegative Line Feeds for overstriking and absolute\nTabbing for multiple column output.\n.br\nNew options supported for this function include:\n     X1620 for XEROX 1620 terminals.\n     MULTI3 for Ahearn and Soper MULTIWRITER IIIs.\n     ASISTERM to cripple all character simulation.\n.of 2\n- Internal code changes to reduce CPU requirements.\nPaging characteristics should also be improved.\n.of 2\n- Updated CMS interface to scan Output Parameters\nand prompt at the terminal for long or lower case\nReference Variable values.\nSupport for the SYSVAR option.\n.of 2\n- An improved TSO interface.  (no Waterloo still doesn't run TSO).\n.of 2\n- A change to the rules of scanning delimited strings\nin Set Reference (.SR) commands and file imbed arguments.\n.of 2\n- Replacement of two options.\nFFCHannel= and FFTOp= specify the printer channel and\nits line position on a page to align Offline output.\n.of 2\n- New operands for the Substitute control word, \"UPPER\"\nand \"LOWER\" to control all SET REFERENCE symbols being\nconverted to upper case.\n.of 2\n- New operands for the Backspace control word, \"HJOIN\"\nand \"NOHJOIN\" to control the hex join property of the\nUser Backspace character.\n.of 2\n- The Break control word now supports a \"line\" operand.\n.of 2\n- Floating Keep and Conditional Page blocks that are forced\nto the top of a next page will supercede footnotes on\nthe same page if the block fills the page.\n.of 2\n- Support within SCRIPT for an EasySCRIPT formatting aid.\nEasySCRIPT itself will follow.\n.sp 2;.in;.cp 5\n.la DATE:  November 14, 1977/VERSION(3.1)\n.sp\n.of 2\n- Addition of the \".  \" control word (NULL) to allow\ntext and commands to start anywhere in an input line.\n.of 2\n- ASCII escape character support for terminals that\ncan support a Function Character.\n.of 2\n- Support for \"...\" as a control word.\nIt is an alias for LABEL (.LB).\n.of 2\n- Enhanced support for Conditional Skips and Spaces\nwhen these are used before and at the start and end of\nConditional Page, Floating Keep and Floating Block text.\n.of 2\n- Support in Revision Code (.RC) to allow up\nto eight character Revision Markers.\n.of 2\n- bug fixes, notably in the .HW and .DM area.\n.sp 2;.in;.cp 5\n.la DATE:  August 2, 1977/VERSION(3.0)\n.sp\n.of 2\n- change support for positional arguments\non a file call to be Local Variables.\n.br\ni.e. &0, &1, &2, etc are now defined locally to any file\nor macro and will not be changed (except by the user)\nthroughout the scope of a file level.\n.of 2\n- a new Local Variable named '&*' which returns the entire\nargument list of a file or macro call.\n.of 2\n- the local variable facility may be controlled\nwith a new option.  The default LOCAL enables it\nand GLOBAL supresses it.\n.of 2\n- a new Table of Contents facility has been added.\nThe Define Header (.DH) facility controls how a\nTable of Contents entry is formatted in the text and\nin the Table of Contents.\nThe Head Level (.HL or .H0 - .H9) commands enter\nthe text to be saved and the Table of Contents command\n(.TC) prints it.\n.of 2\n- the Out Justify (.OJ) control has been added.\nIt works like Left Adjust (.LA) on even pages\nand Right Adjust (.RA) on odd pages.\n.of 2\n- the Line Space value is set to Single Space at the start\nof a Footnote, but may be altered within a Footnote.\n.of 2\n- the Line Space control word (.LS) will accept\na relative change operand of the form \"+n\" or \"-n\".\n.of 2\n- EVEN and ODD Headnotes may be defined.\n.of 2\n- the Error (.ER) control word is processed as a normal\nSCRIPT error message and produces a file traceback.\n.of 2\n- the Tab (.TB) control word has been extended.\nThe defined tab may be Left aligning (as before),\nCentre, Right or Character aligning.\nAlso a tab fill string may be defined, in addition to the former\nsingle fill character.\n.of 2\n- a new option TABLeft= may be defined with values 0 or 1.\nIt controls where text should appear after a Left adjusting tab.\n.of 2\n- a new option for .HY (.HY SET SUP n) may be defined\nto control suppression of automatic hyphenation after\n\"n\" automatically hyphenated output lines.\nThe default and initial value for \"n\" is 3.\n.of 2\n- Miscellaneous bug fixes.\n.sp 2;.in;.cp 5\n.la DATE:  April 18, 1977\n.sp\n.of 2\n- .FO HALF and .JU HALF support to Half Justify output text.\nThis formats text with half the number of blanks interspersed\nto fully justify.  The result is not too ragged and not too smooth.\n.of 2\n- .FK DUMP <n> support to force printout of any oustanding\nFloating Keep text.\n.of 2\n- .TB SET <char> support to treat the specified <char> as an\nexact equivalent to the normal Tab Character (X'05').\n.of 2\n- Implementation of Automatic System Remotes.\nThe ones now supported include SYSTOP, SYSTM, SYSBM, SYSBOT\nand SYSBLANK.\n.sp 2;.in;.cp 5\n.la DATE:  March 1, 1977\n.sp\n.of 2\n- Support of multiple column output.\nThis includes the following control words.\n.sp\n     .BC <O\b_N\b_|OFF>         - BALANCE COLUMNS\n     .CB                  - COLUMN BEGIN\n     .CC <0\b_|n|BEGIN|END>  - CONDITIONAL COLUMN\n     .CD <n <v1 <v2 ...>> - COLUMN DEFINITION\n     .CL <0\b_|n>            - COLUMN LENGTH\n     .MC                  - MULTIPLE COLUMN\n     .SC                  - SINGLE COLUMN\n.sp\n.of 2\n- A new control word HEADNOTE (.HN) to define a formatted text\nblock to appear after the Top Title of each output page.\n.of 2\n- A change to the default value of several control words.\nThese reflect the normal standard of one inch of white border\naround text on a page.  The former value is in parentheses.\n     .TM 6   -  TOP MARGIN     (5)\n     .BM 6   -  BOTTOM MARGIN  (3)\n.sp 2;.in;.cp 5\n.la DATE:  December 23, 1976\n.sp\n.of 2\n- Addition of the .BX (Box) control word for creating boxes around\ntext of figures.\n.of 2\n- A new PROFILE option to imbed a PROFILE dataset at the start of\neach pass.\n.of 2\n- The .CE, .LA and .RA control words now accept a \"line\" operand.\n.of 2\n- Addition of the .HW (Hyphenate Word) control word for user\ncontrol of hyphenation in a small section.\n.of 2\n- Additional hyphenation control with \"SET THRESH\",\n\"SET MINPT\", \"SET ENDPT\" and \"SUPPRESS\" operands.\n.of 2\n- A new command .IL (Indent Line) to do one shot paragraph indents.\n.of 2\n- The .IF, .LI and .SU control words now accept a \"line\" operand.\n.of 2\n- The .PN control word may be used to define a PREFIX or SUFFIX\nfor each formatted page number.\nThis control word may enable fractional page numbers (FRAC) and\nthe normal integer page numbers (NORM).\n.of 2\n- The .PP (Paragraph Start) control word for defining the start\nof a paragraph.\n.of 2\n- The .PU (PUT WORK FILE) control word gives the ability to\nput data records on up tp nine files for formatting later\nin the SCRIPT run, or to save for a later application.\n.of 2\n- The .QQ (Quit Quickly) control word for terminating a\nSCRIPT input immediately, with no more output.\n.of 2\n- The .RV (Read Variable) control word for defining the value of\na reference symbol from the user's terminal.\n.of 2\n- The .SK (Skip) control word which is like SPACE with leading\nblank lines suppressed at the top of each page.\n.of 2\n- The .SK and .SP control words take optional operands\n\"A\" for absolute and \"C\" for conditional.\n.of 2\n- A new .SY (System) control word for issuing CMS or CP\ncommands from within SCRIPT.\n.of 2\n- A series of commands .UC, .UD, .UP and .US to facilitate\nunderscoring and capitalizing of text.\n.of 2\n- Top Title (.TT) defaults to null on first page.\n.of 2\n- Clarification of error messages.\n.sp 2;.in;.cp 5\n.la DATE:  September 2, 1976\n.sp\n.of 2\n- Floating Block (.FB) support for formatting now and printing\nlater.\n.of 2\n- Miscellaneous STATISTICS changes.\n.sp 2;.in;.cp 5\n.la DATE:  August 11, 1976\n.sp\n.of 2\n- WIDOW support with a .WD <Y\b_E\b_S\b_|NO> control word.\n.of 2\n- SUBSTRING support for variable symbols.  For example:\n     .SE X = &C(3:6)\n.br\nsets variable X to columns three to six of variable C.\n     .SE X = &V(3,9:)\n.br\nsets variable X to columns 9 to the end of variable V(3).\n.of 2\n- EVEN and ODD page adjust support with\n     .AD <EVEN|ODD> <0\b_|n|+n|-n>\n.sp 2;.in;.cp 5\n.la DATE:  July 30, 1976\n.sp\n.of 2\n- Keyword parameter support for arguments of .AP, .IM\nand .SI control words.\n.of 2\n- Bug fixed to make &SYSLS correctly reflect the current line\nspace\n.sp 2;.in;.cp 5\n.la DATE:  July 22, 1976\n.sp\n.of 2\n- Length attribute of reference symbols may be accessed via:\n     .se i = L'&x\n          or\n     .se j = L'&a(5)\n.of 2\n- Type attribute 'N' for numeric and 'C' for character may\nbe accessed via:\n     .se i = T'&x\n          or\n     .se j = T'&a(5)\n.of 2\n- More error checking on specification of the \"right\nindent\" value, the second operand of .IN.\n.of 2\n- &SYSLS system variable to access current line spacing value.\n.sp 2;.in;.cp 5\n.la DATE:  July 21, 1976\n.sp\n.of 2\n- .IX PURGE support added.\n.of 2\n- Nine concurrent INDEXs supported.\n.sp 2;.in;.cp 5\n.la DATE:  July 14, 1976\n.sp\n.of 4\n- Support for HANGING INDENT (.HI) control word.\n.of 2\n- Change in operation of FLOATING KEEP (.FK) to honour\neach text block separately.\n.of 2\n- HSFSOVER parameter option to specify overlap of the HEADING\nSPACE and FOOTING SPACE.\nThis used to be set at six, default is now nine.\n.of 2\n- Miscellaneous smaller problems fixed.\n.sp 2;.in;.cp 5\n.la DATE:  June 15, 1976\n.sp\n.of 2\n- Support for SYSBLANK remote which is conditionally signalled\nwhen a blank record is present in the input stream.\n.of 2\n- TAB fix beyond line length.\n.sp 2;.in;.cp 5\n.la DATE: June 10, 1976\n.sp\n.of 2\n- Optimize ASA carriage control for OFFLINE or DISK\noutput to decrease file size (i.e. cost).\n.of 2\n- MEMO|NOMEMO option which when specified with ONLINE produces\na 2741/3270 compatible file called \"fname MEMO\" that\nmay be TYPEd.\n.of 2\n- Usual array of nitty bugs.\n.of 2\n- AND and OR support in the .IF control word to satisfy\nmultiple conditions.\n.sp 2;.in;.cp 5\n.la DATE:  May 19, 1976\n.sp\n.of 2\n- Support for DO groups as objects of THEN and ELSE statements\nwith the \".DO BEGIN\" and \".DO END\" control words.\n.of 2\n- Enhance underline (.UL) to accept text in the operand field.\n.of 2\n- Remove the SREference= parameter.\n.of 2\n- Miscellaneous fixes.\n.sp 2;.in;.cp 5\n.la DATE:  April 14, 1976\n.sp\n.of 2\n- A new \".UL\" (underline alphanumerics) control word taking\n<YES|NO|n> as an operand.\n.of 2\n- Support of automatic hyphenation of words with the \".HY YES\"\ncontrol word.\n\".IM SYSHYPH\" may be used to include system exception\ndictionary entries.\n.of 2\n- The \".CP <BEGIN|END>\" control word supports a second numeric\noperand to adjust count of remaining lines on the current page.\n.of 2\n- A new \".IX\" (IndeX) facility for accumulating, ordering and printing\nan index for a document.\n.of 2\n- Miscellaneous bug fixes.\n.sp 2;.in;.cp 5\n.la DATE:  March 8, 1976\n.sp\n.of 2\n- .HY hyphenation support.\n.of 2\n- .JU and .FO support for LEFT, RIGHT, CENTRE, INSIDE and\nOUTSIDE justification.\n.of 2\n- DARK Output option when PRINTER or DISK.\n.sp 2;.in;.cp 5\n.la DATE:  December 15, 1976\n.sp\n.of 2\n- Floating Keep (.FK) added.\n.of 2\n- Conditional Keep (.CP <BEGIN|END>) added.\n.of 2\n- Input Overlay (.OV) and Output Overlay (.OO) redone\nto allow greater stacking of operand lines.\n.of 2\n- Longer TITLE operands within each segment.\n.of 2\n- Fix bug with automatic remote while in Double Space mode.\n.sp 2;.in;.cp 5\n.la DATE:  December 1, 1975\n.sp\n.of 2\n- Better diagnostics for an undefined forward .GOTO.\n.of 2\n- .ER (ERROR) control word for producing your own error messages\nand optionally setting a return code.\n.of 2\n- System variable symbol &SYSRETCODE for examining the\ncurrent program return code.\n.of 2\n- Bug fix in .SA (SAVE) and .RE (RESTORE) control words where\ntoo much information saved caused unpredictable results.\n.sp 2;.in;.cp 5\n.la DATE:  November 14, 1975\n.sp\n.of 2\n- .LB <n|ident> control word has been added.\nThis \"LABEL\" control word defines a label for the input record.\n.of 2\n- .GO <n|ident> control word has been added.\nThis \"GOTO\" control word skips forward or backward in the current\ninput file to the corresponding \"LABEL\".\n.of 2\n- A bug used to occur when a remote signal was within a perform\nstring, causing the perform not to be completed.\nThis has been fixed.\n.sp 2;.in;.cp 5\n.la DATE:  October 31, 1975\n.sp\n.of 2\n- Changes to definition of a remote.\nA remote must be named and a remote may be given a maximum number\nof times to be called before self destructing.\n.of 2\n- Internal restructuring of program organization.\n.of 2\n- Miscellaneous enhancements and bug fixes.\n.sp 2;.in;.cp 5\n.la DATE:  October 1, 1975\n.sp\n.of 2\n- Nested .IF support with the Then (.TH) and Else (.EL)\ncontrol words.\n.of 2\n- Better diagnoxtics when a logic error is detected.\n.of 2\n- Several bug fixes.\n.sp 2;.in;.cp 5\n.la DATE: July 17, 1975\n.sp\n.of 2\n- 3277 display terminals are now recognized as such by SCRIPT.\nFor these devices, lines which contain backspace characters\nare displayed on two separate output lines.\n.of 2\n- A control word indicator which does not cause a break may now\nbe defined.\n.of 2\n- A number of bugs have been resolved.\n.sp 2;.in;.cp 5\n.la DATE:  April 22, 1975\n.sp\n.of 2\n- ONLINE is now the default CMS output option.\n.of 2\n- The LRECL of ONLINE is increased to allow longer single\nline underlining capabilities.\n.sp 2;.in;.cp 5\n.la DATE:  April 16, 1975\n.sp\n.of 2\n- .TI (TRANSLATE ON INPUT) is now supported in control lines\nas well as data lines.\n.of 2\n- .PI (PARAGRAPH INDENT) will set the indenting on the left for\neach first output line of a new paragraph of text.\n.of 2\n- .IM (IMBED) and .AP (APPEND) are correctly supported in the middle\nof a perform string, or the middle of a command line with\nmultiple commands.\n.of 2\n- Spme bugs have been fixed in \".ti set\" and \".sp\" within\nfootnotes.\n.of 2\n- Long (up to 100 characters by default) character arguments are\nsupported without excessive core wastage.\n.sp 2;.in;.cp 5\n.la DATE:  April 2, 1975\n.sp\n.of 2\n- SIGNAL with parameters.\n.of 2\n- Nested PERFORM to five levels.\n.of 2\n- Bug fixes, particularly in the area of leading spaces\non a page conflicting with a remote.\n.of 2\n- .IF character compares are done according to PL/1 conventions.\ni.e. the shorter string is padeed with blanks, and the two strings\nare compared according to the standard collating sequence.\n.sp 2;.in;.cp 5\n.la DATE:  February 6, 1975\n.sp\n.of 2\n- Parenthesis support on Set Reference expressions.\n.of 2\n- Expression support anywhere a self-defining term was valid before.\n.of 2\n- Relative tab support in .TB.\n.of 2\n- Bug fixes in .RM and .TB commands.\n.of 2\n- ASA and Maching Carriage Control support in the SCRIPT input\nroutine.\n.sp 2;.in;.cp 5\n.la DATE:  December 10, 1974\n.sp\n.of 2\n- The .OO (Overlay Output) control word is now supported.\n.of 2\n- The .SU <TRACEON|TRACEOFF> control word may be used to debug\nUser Reference strings.\n.of 2\n- A bug which occurrec when double spaced output was produced\nat the terminal has been fixed.\n.sp 2;.in;.cp 5\n.la DATE:  November 1, 1974\n.sp\n.of 2\n- Subscripted variables are now supported.\n.of 2\n- The Overlay Character (.OC) command has been extended.\n.of 2\n- The ADJUST command (.AD) has been added.\n.of 2\n- A number of problems with the Don't Count (.DC)\ncommand have been resolved.\n.sp 2;.in;.cp 5\n.la DATE:  September 11, 1974\n.sp\n.of 2\n- When operating in terminal mode, the version identification\nis displayed before terminal output begins.\nThe QUIET option may be specified to eliminate this message.\n.of 2\n- Printer output is now optimized by using carriage skips.\n.of 2\n- Several bugs have been eliminated.\n.sp 2;.in;.cp 5\n.la DATE:  June 21, 1974\n.sp\n.of 2\n- Underlined headings and footings are now justified in the\ncorrect fashion.\n.of 2\n- A new control word, .OC (Overlay Character) has been added\nto facilitate underlining.\n.of 2\n- Error checking has been improved.\n.sp 2;.in;.cp 5\n.la DATE:  April 22, 1974\n.sp\n.of 2\n- Diagnostic messages have been improved.\n.of 2\n- The Overlay (.OV) control word has been implemented.\n.of 2\n- The Signal Remote (.SI) control word has been implemented.\n.of 2\n- A new option which prevents environment protection has\nbeen added to the Remote (.RM) control word.\n.of 2\n- The Perform (.PE) control word has been implemented.\n.sp 2;.in;.cp 5\n.la DATE:  April 4, 1974\n.sp\n.of 2\n- The .SA (Save Status) control word has been added to permit the\ncurrent page environment to be saved in a five level pushdown stack.\n.of 2\n- The .RE (Restore Status) control word has been added to restore a\npreviously saved page status.\n.of 2\n- The .IM (Imbed) and .AP (Append) control words have\nbeen extended to support parameters.\n.br\n(e.g. \".IM ABC one two\" will imbed ABC and will set &1 to \"one\",\n&2 to \"two\" and &0 to 2, the parameter count.\n.of 2\n- A number of bugs in the processor have been resolved.\n.sp 2;.in;.cp 5\n.la DATE:  March 22, 1974\n.sp\n.of 2\n- The .CS (Conditional Section) command is now supported.\n.of 2\n- Two blanks will be inserted after lines which end with\na period or a colon.\n.of 2\n- The error messages have been reworked.\n.of 2\n- An abend which occurred when errors were detected with the 2PASS\noption in effect has been corrected.\n.sp 2;.in;.cp 5\n.la DATE:  March 16, 1974\n.sp\n.of 2\n- Reference names may be up to ten characters long.\n.of 2\n- Reference values may be up to fourteen characters long.\n.of 2\n- Operands of the for <+n|-n> may be used with the .BM, .FM, .HM, .LL\n.li .PL and .TM commands, to cause a relative adjustment in the\nassociated value.\n.of 2\n- A new command, .LA (Left Adjust) may be used to suppress formatting\nover a specific range.\n.of 2\n- In addition to blank and period, the characters +, -, *, /, ' and &\nare recognized as delimiters by the .UR command.\n.sp 2;.in;.cp 5\n.la DATE:  February 25, 1974\n.sp\n.of 2\n- SRef=nn parameter to set maximum number of set reference symbols\nwhere 0<nn<4097.\n.of 2\n- .SE form of SET REFERENCE control word which performs repeated\nsubstitution of reference symbols before evaluation.\n.of 2\n- .OF and .IN control words may be used with relative arguments.\n.br\n(e.g.  .IN +5  or  .OF -3).\n.of 2\n- .TI control word (TRANSLATE ON INPUT) added.\nBy defining an escape character and an input translate table,\nthe input character set may be smaller than the output character\nset.\n.of 2\n- <YES|NO> operands may be used\nwith .CO, .FO, .JU, .NC, .NF and .NJ control words (default YES)\nto achieve a more consistent syntax and to reduce the number of\ndifferent control words required to accomplish a function.\n.of 2\n- .SP has been optimized for better performance in both ONLINE\nand OFFLINE modes.\n.sp 2;.in;.cp 5\nPlease direct questions and suggestions to Bruce Uttley, M&C 1028,\nExtension 2717 (userid BEU).\n.cm End of SCRIPTUP\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "SE": {"ttr": 6403, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00 \\x00 \\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE SE\n.SUBT Purpose\nThis alternate SET REFERENCE control word allows the user to\nassign a character or numeric value to a symbolic reference\nname using other symbolic reference names.\n.SUBT Format\n|\n|  .SE           String including ref names\n|\n.SUBT Usage\nThe operand of the SET REFERENCE control word will be reformatted\nby substitution with current values of reference names before\nbeing interpreted as an \".SR\" control word.  The substitution\nwill repeat according to the \".UR\" control word as often as is\nrequired to remove all reference names from the operand string.\n.SUBT Defaults\nThis control word will not create a break when encountered.  See\nthe \".SR\" control word for rules about the operands after\nsubstitution.\n.SUBT Examples\n.nf\n(1) .se i=0;.cm This makes &i zero.\n    .se i=&i+1;.cm This makes &i one.\n.sp\n(2) .se c='&&c';.cm This makes &c \"&c\".\n    .se c='&c';.cm This is an infinite substitution.\n.sp\n(3) .se alpha='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    .se Lalpha=L'&alpha;.cm Assign length of 26\n    .se Letter(1)=&alpha(1:1);.cm Get first letter\n    .se Letter(&Lalpha)=&&alpha(&Lalpha:&Lalpha)\n.cm End of SE\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "SETADD": {"ttr": 6405, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\n\\x00\\n\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "CBT249"}, "text": ".cm SETADD\n.se NFN=0\n.rm FNADD save save\n.su off\n.se NFN=&NFN+1;.se LP='';.se OFN=L'&NFN+3;.se i=0\n.ur .pe L'&NFN\n.se i=&i+1;.se FNn=&&NFN(&i:&i);.se LP='&LP.&&I&FNn'\n.se LP='&L&LP&R'\n.rm\n.cm End of SETADD\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SI": {"ttr": 6407, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00e\\x00e\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE SI\n.SUBT Purpose\nThe SIGNAL REMOTE control word causes the REMOTE defined for this\nline number or identifier to be executed immediately.\n.SUBT Format\n|                               <N1><N2>\n|  .SI           <*\b_|n> <args> <.        >\n|                               <label>\n.SUBT Usage\nThe REMOTE defined for line \"n\" will be triggered as if line \"n\"\nof the output page was about to be printed.\n.sp\nThe value of \"n\" must lie in the range 1 to 32767 or be a\nstring identifier of eight characters or less.\nNote that a value of \"n\"\ngreater than the page length can never be triggered\nautomatically during formatting.\n.sp\nThe optional inclusion of \"args\" sets reference symbol \"&0\"\nto the count of arguments and \"&1\", \"&2\"... to the arguments.\nThe reference symbol \"&*\" is set to the string\nof all arguments.\nWhen the LOCAL option is specified, all of these\nreference symbols are defined as Local variables\nand may only be used within the remote being signalled.\nKeyword parameters may be specified with a valid .SR\nassignment as an argument.\nKeyword parameters are assigned as Global variables.\n.sp\nN1 and N2 may be specified to include only a portion of\nremote \"n\".\n\"label\" may be specified for an implied Goto at the start of\nthe target remote.\nSee the description of Append \".AP\" or Imbed \".IM\" for\nmore information.\n.sp\nEvery control word is first tried as a signal operand.\nThat is to say that a control word of the form \".XX\", which\nis not recognized by SCRIPT, will first be tried as \".SI XX\"\nbefore producing an unrecognized control word diagnostic.\nSuch string identifiers are converted to upper case for matching.\nIt is recommended that any such user defined control words\nstart with a non-alphabetic such as \"$\" or \"!\" to prevent\nname conflicts with current or future SCRIPT control words.\n.SUBT Defaults\nThis command will not create a break when encountered.  If the operand\nis missing or coded as asterisk \"*\" then the value of \"n\" will be\nset to the TOP MARGIN plus one, i.e. (n=TM+1).  If no REMOTE has been\ndefined for line \"n\", then this command is treated as a no-op.\n.br;.cp 20\n.SUBT Examples\n.nf\n.li )\n)of 4\n(1) ...\n.rm 201 save nosave\nthe party of the first part\n.rm\n.rm 202 save nosave\nthe party of the second part\n.rm\nThis is to inform\n.si 201\nthat\n.si 202\nagrees with the proposal.\n...\n)sp 1\nProduces:\n)sp 1\nThis is to inform the party of\nthe first part  that the party\nof the second part agrees with\nthe proposal.\n)li .\n.fo\n.sp\n.nf\n.li )\n)of 4\n(2) .SI $$ arg1 arg2 kw1='string' kw2=4*4\n.$$ arg1 kw1='string' arg2 kw2=4*4\n)sp\nThe above two are equivalent and\n)sp\n.SI SPACE\n.SPACE\n)sp\n)fo\nso are these two.\n)li .\n.sp\n.li )\n)of 4\n(3) .SI SP\n)br\n.SP\n)sp\nThese are equivalent if a named remote exists with the name of \"SP\".\n)li .\n.cm End of SI\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "SK": {"ttr": 6410, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00-\\x00-\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "SP": {"ttr": 6412, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00,\\x00,\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE SP\n.SUBT Purpose\nThe SPACE control word generates a specified number of blank output\nlines.\n.SUBT Format\n|\n|  .SP           <1\b_|n>  <A>  <C>\n|\n.SUBT Usage\nThe SPACE control word causes _\bn blank lines to be output.  If the end\nof the page is reached before satisfying\nthe request, the remaining spaces may or may not be output on the next\npage depending on whether .LE YES has been specified.\nSpaces at the start of a text block, such as .CP or .FK,\nare treated the same way if the text block prints at the top of a page.\nIf DOUBLE SPACE is in effect, twice the specified\nnumber of spaces are output.\n.sp\nThe \"A\" or \"ABS\" operand may be specified to space only the\nspecified number of output lines regardless of the current line\nspacing (.LS) value.\n.sp\nThe \"C\" or \"COND\" operand may be specified to define a conditional\nspace.\nThese conditional spaces are ignored if a SKIP, SPACE or PAGE Eject\ncommand follows immediately with no intervening text.\n.sp\nIf the operand is zero, then the next input text line will be\noverprinted on the last output line, if OFFLINE\nor if the ONLINE terminal has a negative Line Feed capability.\nIn the case of ONLINE output, the next output text line will\nbe output normally, but will not be counted towards the page length.\nThis facility is useful to allow the user to store equations\nand such when two or more typeballs are necessary during output.\n.SUBT Defaults\nThis command does create a break when encountered and if the operand\nis omitted _\bn = 1 will\nbe assumed.\n.SUBT Notes\n.of 4\n(1) .SP control words within footnotes cause blank lines to be\ngenerated within the printout of the footnote\nat the bottom of the page.\n.cm End of SP\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "SR": {"ttr": 6414, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\xbb\\x00\\xbb\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 187, "newlines": 187, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE SR\n.SUBT Purpose\nThe SET REFERENCE control word allows the user to assign a character\nor numeric value to a symbolic\nreference name.\n.SUBT Format\n|                       delimited string\n|  .SR          name<=> undelimited string\n|                       numeric-expression\n.SUBT Usage\nThe reference name named by the first operand is given the value of\nthe second operand.  If the reference name does\nnot exist, it will be created.  The first operand may optionally\nbe followed by an equal sign \"=\".\n.sp\nThe .SR control word may be used for a variety of purposes.  For\nexample:\n.sp\n.in +2\n.of 4\n(1) Symbols may be defined as having as their value the number of the\npage on which they appear\nand can be used to construct a table of contents.\n.of 4\n(2) Symbols can be assigned to count the number of equations being\nused and to number the equations as they\nappear on the output.\n.sp\n.in -2\nWhen the UPPER parm is in effect a reference name may be any\ncharacter string of ten or fewer characters where each\ncharacter is greater than or equal to lower 'a' (all upper and lower\nalphabetics and numerics) or the national characters\n('$', '@', '#') or an underscore ('_').\nThe name is converted to uppercase prior to use.\n.sp\nWhen the NOUPPER parm is in effect\na reference name may be any character string of length\nten or fewer which does not contain\na blank or any special characters.\nThe list of special characters terminating reference\nnames includes the characters:\n.cp 5\n         .  period                 =  equal sign\n         +  plus sign              -  minus sign\n         *  asterisk               /  slash\n         (  left parenthesis       )  right parenthesis\n         '  quote mark             &  ampersand\n.cp 5\n.sp\nThe reference name may optionally be subscripted with an integer,\nsigned or unsigned.  A subscript may range from -32767 to +32767.\nA zero subscript is logically the same as having no subscript.  The\nsubscript value may be implied by specifying a null subscript in\nthe form \"()\".  Thus:\n.sp\n     .sr symbol()=...\n.sp\nis a short form of\n.sp\n     .se symbol=&symbol+1\n     .se symbol(&symbol)=...\n.sp\nor equivalently\n.sp\n     .ur .sr symbol=&symbol+1\n     .ur .sr symbol(&symbol)=...\n.sp\nIf a character string is the assigned value, it must consist\nof no more characters than the maximum allowed by the\nSRLENGTH= parameter, normally one hundred and fifty,\nor the string will be truncated on the right.\nA character argument may be a delimited string or an\nundelimited string.\nIn the first case, if the first character is a ' (quote),\n\" (double quote), / (slash), | (or bar), ! (exclamation mark),\n\u00ac (not sign),\nor \u00a2 (cent sign) then the character value assigned will\nbe from the character following  the delimiter up to the character\npreceeding a matching delimiter that is followed by a blank.\nBlanks are then valid within the operand and the delimiter\ncharacter can be entered into the operand if not followed\nby a blank.\nIn the second case, an undelimited string is terminated\nby the first blank or end of record.\nThe single quote and double quote are recommended as delimiters.\n.sp\nThe syntax supported in numeric expressions is like that of\nFORTRAN.  Decimal terms and binary, character and hexadecimal\nself-defining terms in the ASSEMBLER sense are supported.\nParentheses and unary plus and minus operators are fully\nsupported.  Blanks between terms and operators are optional.\nSee Example (1) for sample expressions.\n.cp 10\n.sp\nThe following <escape>'s are recognized:\n.sp\n     (1) \"%\"   Current page number.\n     (2) \"&\"   Current page number.\n     (3) \"P\b_S\b_\"  Current page number, where\n               P\b_S\b_ is the symbol defined by .PS.\n.SUBT Defaults\nThis command word will not create a break when encountered.  If one\nor both operands\nare omitted it will be treated as an error.\n.SUBT Notes\n.of 4\n(1) See the description of the .UR control word and the TWOPASS\noption for further hints on the use of .SR.\n.sp\n.of 4\n(2) See Appendices for a list of System Reference Names with\ntheir formats and meanings.\n.br;.cp 15\n.SUBT Examples\n.of 4\n.tr \u00ac .\n(1) The following demonstrate valid expressions:\n.sp\n.nf\n\u00acsr i=5\n\u00acsr i= +5\n\u00acsr i=((+5*3-1)*7)+1\n\u00acsr i = % + 1\n\u00acsr i = ((X'F05'+C'A')* B'1111')/16\n\u00acsr i(1+1) = (1+1)\n.sp\n.of 4\n(2) The following demonstrate character assignments:\n.sp\n\u00acsr c=abcdefg\n\u00acsr c = 'ABCDEFG'\n\u00acsr c = \"don't be silly\"\n\u00acsr alpha(1) = 'A'\n\u00acsr alpha(2) = B\n.tr \u00ac \u00ac\n.fo\n.of 4\n.tr \u00ac .\n.sp\n.cp 15\n(3) The sequence:\n.sp\n.nf\n\u00acsr equno=0\n    .\n    .\n    .\n\u00acur .sr equno=&equno + 1\n\u00acur .sr xeqn &equno\n\u00acur x = erfc(a - bc)                           (&equno)\n\u00acur .sr equno = &equno +1\n\u00acur y = erfc(a +bc)                            (&equno.)\n    .\n    .\n    .\n\u00acur Using the previous result for x (Equation &xeqn.)...\n.tr \u00ac \u00ac\n.sp\n.cp 5\n Produces:\n.sp\nx = erfc(a - bc)                            (1)\ny = erfc(a + bc)                            (2)\nUsing the previous result for x (Equation 1)...\n.sp\n.cp 14\n.of 4\n(4) The sequence:\n.sp\n.tr \u00ac .\n.nf\n\u00acsr a 0\n\u00acsr b -5\n\u00acsr c a\n\u00acsr d 'b'\n\u00acur .ur .sr &c &&&d + 1\n\u00acur a = &a..\n\u00acur b = &b..\n.tr \u00ac \u00ac\n.sp\nProduces:\n.sp\na = -4.\n.br\nb = -5.\n.cm End of SR\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "SS": {"ttr": 6418, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x13\\x00\\x13\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE SS\n.SUBT Purpose\nThe SINGLE SPACE control word causes output to be single spaced.\n.SUBT Format\n|\n|  .SS\n|\n.SUBT Usage\nSubsequent output lines will be single spaced.\n.SUBT Defaults\nWhen this command word is encountered it will create a break.  Unless\notherwise specified \".ss\" will be\nin effect.\n.SUBT Notes\n.of 4\n(1) Since SINGLE SPACE is the normal mode, this control word is used\nto undo the effect of a previous \".DS\" DOUBLE SPACE or\n\".LS\" LINE SPACING control word.\n.cm End of SS\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "SU": {"ttr": 6420, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00,\\x00,\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE SU\n.SUBT Purpose\nThe SUBSTITUTE SYMBOL control word causes subsequent input text\nand control lines to be reformatted by substituting the current\nvalues of specified reference names in the line and to be\nprocessed as if it had been in the input.\n.SUBT Format\n|                <1\b_|n|ON|OFF|line>\n|  .SU           <U\b_P\b_P\b_E\b_R\b_|NOUPPER>\n|                <TRACEON|TRACEOFF>\n.SUBT Usage\nThe \"line\" operand or the next \"n\"\ntext and control lines in the input file\nwill be reformatted by substitution with current values\nof reference names.  In other words, the next \"n\" lines\nof input will be interpreted as if sufficient \".UR\"\nUSE REFERENCE control words preceded them to remove\nall reference names from the string.\n.sp\nThe \"UPPER\" argument causes all Reference Variables to be\nconverted to upper case in an assignment or when being used.\nThus \"&X\" and \"&x\" would refer to the same variable.\nThe \"NOUPPER\" argument causes all Reference Variables to\nbe used as entered.\nThis option may also be set using the UPPER or NOUPPER\noption when SCRIPT is invoked.\n.sp\nThe \"TRACEON\" argument uses the SYSTERM error file to print\na record of substitutions under .SU or .UR control words.\nThe initial input record is listed with double spacing and each\nlevel of substitution is listed with single spacing.\nThe \"TRACEOFF\" argument is used to turn this debug feature off.\n.SUBT Defaults\nThe \".SU\" control word does not act as a break itself.  A\nnumeric operand will substitute in the following \"n\"\ninput text lines.  A missing operand will substitute in\nthe one following input text line.  A \"ON\" operand will\nsubstitute in all following input text lines until an\n\"OFF\" or numbered \"n\" operand is encountered.\n.SUBT Notes\n.of 4\n(1) See the description of the \".SR\" and \".UR\" control words\nfor additional information.\n.cm End of SU\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "SUPER": {"ttr": 6658, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x10\\x00\\x10\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "CBT249"}, "text": ".cm SUPER\n.bs +\n.sr L='8+D'\n.sr R='9+D'\n.sr I0='B+0'\n.sr I1='B+1'\n.sr I2='B+2'\n.sr I3='B+3'\n.sr I4='B+4'\n.sr I5='B+5'\n.sr I6='B+6'\n.sr I7='B+7'\n.sr I8='B+8'\n.sr I9='B+9'\n.bs\n.cm End of SUPER\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SUPERT": {"ttr": 6660, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "CBT249"}, "text": ".cm SUPERT\n.sr L='('\n.sr R=')'\n.sr I0=0\n.sr I1=1\n.sr I2=2\n.sr I3=3\n.sr I4=4\n.sr I5=5\n.sr I6=6\n.sr I7=7\n.sr I8=8\n.sr I9=9\n.ur .if '&SYSOUT' eq 'PRINT' .im SUPER\n.cm End of SUPERT\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SY": {"ttr": 6662, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\"\\x00\"\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE SY\n.SUBT Purpose\nThe SYSTEM COMMAND control word passes a command line to the\nhost operating system.\n.SUBT Format\n|\n|  .SY           line\n|\n.SUBT Usage\nThe .SY control word should be used whenever a terminal system\ncommand is to be issued each time a SCRIPT document is formatted.\n.sp\nUnder CMS only CP and CMS Subset commands may be issued.\n.sp\nThe System Variable Symbol \"SYSRET\" provides the return code from the\nlast .SY command issued.\n.SUBT Defaults\nThis control word does not cause a break.\nIf the \"line\" operand is omitted, no action is performed.\n.SUBT Notes\n.of 4\n(1) The only host operating system this command is currently supported\nunder is CMS.\nIn TSO or OS Batch, the command is bypassed.\n.SUBT Examples\n.of 4\n(1) .sy cp spool prt cont\n.br\n.li .ur .if &SYSRET ne 0 .qq\n.sp\nThis example issues a \"CP\" command to create a continuous print\nfile.\nIf the command was not successful, SCRIPT terminates using \".qq\".\n.cm End of SY\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "SYSEZ": {"ttr": 6664, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x03\\x00\\x03\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT SYSEZ --- EasySCRIPT\n.er 4 .EZ control word for EasySCRIPT is in development\n.cm End of SYSEZ\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SYSPUB": {"ttr": 6666, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x05\\x04\\x05\\x04\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 1284, "newlines": 1284, "modlines": 0, "user": "CBT249"}, "text": "..sr pubSWver = 'SYSPUB Version 8.5 (78JAN08)'\n..ur ..if '&syspassno' eq '&pubimbed';..ef\n..ur ..sr pubimbed = &syspassno\n..cs begin\n     .-----------------------------------------------------------.\n     |                                                           |\n     |   SYSPUB -- a set of high-level SCRIPT commands to        |\n     |             simplify the preparation and formatting       |\n     |             of publications.                              |\n     |                                                           |\n     |   AUTHOR -- Roger W. Watt                                 |\n     |             Manager, User Services                        |\n     |             Computing Centre                              |\n     |             University of Waterloo                        |\n     |             Waterloo, Ontario, CANADA                     |\n     |             N2L 3G1                                       |\n     |             (519) 885-1211, x2183                         |\n     |                                                           |\n     '-----------------------------------------------------------'\n..cs end\n..em yes;..ms on\n..ur ..up ..sr publayout = '&layout';..sr layoutn = 0\n..ur ..if '&publayout' eq '';..do;..sr publayout = PAPER\n..ty no \"layout\" specified -- assuming \"paper\"\n..ur ..ty do you have the User's Guide for &pubSWver ?\n..do end\n..ur ..if '&pitch' eq '';..sr pitch = 10\n..ur ..if '&pubSWpch' eq '' ..sr pubSWpch = &pitch\n..ur ..if '&ll' eq '';..th ..ur ..ll 6*&pubSWpch;..el ..ur ..ll &ll\n..ur ..if '&pl' ne '';..ur ..pl &pl\n..ur ..if '&lpi' eq '';..sr lpi = 6\n..ur ..if '&sides' eq '';..sr sides = one\n..ur ..if '&sides' eq one;..th ..ur ..ad &pubSWpch\n..el ..do;..ad;..ur ..ad odd &pubSWpch;..ur ..ad even &pubSWpch/2;..do end\n..ur ..if '&hy' eq '';..th ..sr hy = on\n..el ..ur ..if '&hy' eq full;..th ..do;..im syshyph;..sr hy = on;..do end\n..ur ..if '&pubhyph' eq '' ..sr pubhyph = &hy\n..ur ..if '&ju' eq '';..sr ju = on\n..ur ..if '&pubjust' eq '' ..sr pubjust = &ju\n..sr pubdark = off;..ur ..if '&dark' ne '';..sr pubdark = '+1 _'\n..cw\n..cm don't put in anything that needs a control word separator until later\n..cm ---------- define the 'page environment' for each quantity\n..sr pubBIstyle = '..in 5;..of 3;..ur ..oo 1 &pubBInum..'\n..sr pubstar = '..cm'\n..sr pubXXenv = '..le yes;..ur ..sp &pubSWtop a;..le no'\n..sr pubenv = ',,co;,,su;,,ju &pubjust;,,hy &pubhyph;,,ls &pubSWls'\n..ti 0 b0 1 b1 2 b2 3 b3 4 b4 5 b5 6 b6 7 b7 8 b8 9 b9\n..cm ---------- switches ---------------------------------------------\n..sr pubblank = '                                                  '\n..ur ..sr pubSWls = &sysls\n..cm               the line-spacing mode of the document\n..ur ..sr pubSWnum = &headnum+0\n..ur ..if &headnum+0 eq 0 ..sr pubSWnum = 99\n..cm               all heading levels are to be numbered\n..cm pubSWprt      the current number for CH(AP).SE.SU.SS\n..sr pubSWtbt = 0\n..cm               set to 1 whenever new chapter or appendix started.\n..cm               depending on the value of \"pagenum\", causes page\n..cm               numbering to be at bottom always, or just on first\n..cm               page of ch or ap and at top on subsequent pages.\n..ur ..sr pubSYSfs = &sysfs\n..ur ..sr pubSYShs = &syshs\n..ur ..sr pubMYfs = &pubMYfs+0\n..ur ..sr pubMYhs = &pubMYhs+0\n..cm           save the user-defined heading and footing spaces at\n..cm           the time SYSPUB was imbedded.\n..sr pubSWpgn = bottom\n..cm            the default page-numbering style for the main body of\n..cm            the publication -- other possibility is \"top\"\n..ur ..if '&num' eq top OR '&pagenum' eq top OR '&publayout(1:3)' eq APA\n..th ..do\n..sr pubSWpgn = top\n..rm systop save nosave\n..ur ..if &pubSWtbt ne 1 ..ef\n..sr pubSWtbt = 0\n..ur ,,hs &pubSYShs\n..ur ,,fs &pubMYfs\n.rm\n..do end\n..cm\n..sr pubSWtf = 0\n..cm               set to 1 whenever a table or figure is entered, reset\n..cm               to 0 by \"tfend\" -- used by boxon and boxoff\n..sr pubSWtyp = publication\n..cm\n..cm ---------- set up the page environment --------------------------\n..cw\n..cw ;\n..wd;..hy set thresh 4;..hy set minpt 2;..hy set endpt 3\n..ur ..if &publayout eq IEEE;..th ..do\n..hs 0;..hm 0;..tm 0;..tt ////;..sr pubSYShs = 0\n..bm 2;..bt //%//\n..ur ..pl &lpi*13;..ur ..ll &pitch*19/2;..ur ..sr pubSWll = &sysll\n..ur ..cl &sysll\n..do end\n..el ..do\n..ur ..if &pubMYhs eq 0;..th ..tt ///%/;..el ..cm\n..ur ..if &pubMYfs eq 0;..bt //- % -//\n..ur ..hs &pubMYhs\n..ur ..fs &pubSYSfs\n..fn set 3\n..do end\n..cw\n..sr pubFNset = 3\n..fn set 2 ////\n..fn set 3 ////\n..ud set |\n..li , nobreak\n..sr pubAPnum = 0\n..sr pubBInum = 0\n..sr pubCHnum = 0\n..sr pubCHrom = 0\n..sr pubPAnum = 0\n..cm ---------------------------------------------------------reset\n..rm reset save nosave\n..ur ..sr 0 = &0+1\n..lb loop\n..ur ..sr 0 = &0-1;..ur ..if &0 eq 0 ..ef\n..ur ..ur ..up ..go &&&0.(1:2)\n..lb FO;..sr pubFNreset = '..sr pubFNnum = 0';..go loop\n..lb TA;..sr pubTAreset = '..sr pubTAnum = 0'\n..sr pubTAstyle = '&pubCHrom..&pubTAnum';..go loop\n..lb FI;..sr pubFIreset = '..sr pubFInum = 0'\n..sr pubFIstyle = '&pubCHrom..&pubFInum';..go loop\n.rm\n..cm ------------------------------------------------------multicol\n..cm     k = number of columns\n..cm     g = gutter width\n..cm    cl = column length\n..cm\n..dm multicol begin\n..sr g = 0;..ur ..sr cl = &sysll\n..ur ..sr k = &1;..ur ..if &k le 1;..go loop40\n..sr n = 1;..sr lastg = 0;..sr lastcl = 0\n..ur ..sr llmodk = &sysll - (&sysll/&k)*&k\n..lb loop10\n..ur ..sr g = &n*&k - &llmodk\n..ur ..sr cl = (&sysll-&g*(&k-1))/&k\n..ur ..if &cl lt 20;..go loop20\n..ur ..if &g gt 2;..go loop30\n..lb loop15;..se lastg=&g;..se lastcl=&cl;..se n = &n+1;..go loop10\n..lb loop20;..se g = &lastg;..se cl = &lastcl;..go loop40\n..lb loop30\n..ur ..if &cl/&g gt 15;..go loop15\n..ur ..if &cl/&g lt 3   AND   &n ne 1;..go loop20\n..lb loop40\n..ur ..if &cl eq 0;..th ..do\n..ur ..er 8   cannot fit &1 columns in a &sysll.-character line\n..do end;..el ..do\n..sr x = ''\n..ur ..sr cd = &k\n..sr n = 0;..ur ..pe &k\n..se n = &n+1;..se disp = (&n-1)*(&cl+&g);..se cd = '&cd &disp'\n..ur ..sr pubSWll = &cl\n..ur ..cl &pubSWll\n..ur ..cd &cd\n..do end\n..ur ..sr temp = &pubSWll/3\n..ur ..if &temp gt 20;..sr temp = 20\n..sr pubdash3 = ''\n..ur ..pe &temp;..ur ..sr pubdash3 = '-&pubdash3'\n..ur ..fn set 1 /&pubdash3///\n..ur ..sr pubdash = '&pubdash3'\n..ur ..pe &pubSWll-&temp;..ur ..sr pubdash = '-&pubdash'\n..dm multicol end\n..cm ---------- now define the onecol environment\n..cw ;\n..ur &pubenv\n..si multicol 1\n..cw\n..cm *----------------------------------------------------------*\n..cm *                                                          *\n..cm *          BASIC layout                                    *\n..cm *                                                          *\n..cm *----------------------------------------------------------*\n..ur ..sr layoutn = &layoutn + 1\n..ur ..sr BASIC = &layoutn\n..sr pubsetcont = '..cm'\n..sr pubCHhdr = 'Chapter'\n..sr pubCHkind = 1\n..sr pubCHnar = 'arabic'\n..sr pubSWtop = 4\n..sr pubSWbtw = 2\n..cm --------------------------------------------------------titlepage\n..dm titlepage begin\n,,ss;,,pa 1;..sr pubSWcon = 1\n..ur ..if &layoutn ge &GUIDE;..sr pubeject = 1\n..ur ..hs &pubMYhs;..ur ..fs &pubMYfs\n..ur &pubXXenv\n..ce yes\n..dm\n..cm ------------------------------------------------------------major\n..dm major begin\n..ur ..fs &pubSYSfs\n..ur ..if &0 eq 2 AND '&2' eq 'nonumber';..sr pubSWnum = 0\n..ur ..if |&1| eq noname;..th ..do;..sr pubCHkind=0;..sr pubCHhdr ='';..do end\n..el ..ur ..sr pubCHhdr = |&1|\n..dm\n..cm ----------------------------------------------------------chapter\n..sr pubCHlen = 0\n..sr pubCHorAP = 'CH'\n..sr pubCHstyle = '..ce;..up'\n..sr pubeject = 0\n..sr pubnewpg = '..cb'\n..sr pubFNreset = '..cm'\n..sr pubTAreset = '..cm'\n..sr pubFIreset = '..cm'\n..sr pubSWcon = 0\n..cm       the page number at which the table of contents is to\n..cm       start (is set in everything up to and including\n..cm                 'chapter' and 1 is added by pubCOenv)\n..dm chapter begin\n..sr pubCHorAP = 'CH'\n..ur &pubFNreset;..ur &pubTAreset;..ur &pubFIreset\n..sr pubSEnum = 0\n,,ss;..in\n..ur ..sr tempsave = |&1|\n..fk dump\n..ur ..if &sysfbc ne 0;..si fbdump\n..ur ..sr pubCHnum = &pubCHnum+1\n..ur ..if &pubCHnum eq 1;..si pub1stCH\n..ur ..si &pubCHnar &pubCHnum pubCHrom\n..ur ..sr temp = L'&pubCHrom\n..ur ..if &temp gt &pubCHlen ..sr pubCHlen = &temp\n..hy user;..ur ..si pubchap&pubCHkind\n..pn on;..sk c;..ur ..sr pubSWsp = '&sysppage./&sysline'\n..ur ..sr pubCHrom = &pubCHnum\n..ur &pubenv\n..dm\n..rm pub1stCH save nosave\n..ur ..if &pubCHnum ne 0 AND &pubPAnum eq 0;..ur ..sr pubSWcon = &syspage\n..ur ..if &pubeject eq 1\n..ur ..if &pubPAnum eq 0;..th ..pa 1;..el ..ur &pubnewpg\n..pn prefix\n..ur ..hs &pubMYhs;..ur ..fs &pubSYSfs\n..pn arabic\n..ur &pubsetcont.0 |&pubCHhdr| 'page'\n.rm\n..cm ----------\n..rm pubchap1 save nosave\n..ur ..sr pubSWprt = '&pubCHnum'\n..cm ..ur ..if &pubCHnum gt 1\n..ur ..if &sysline ne 1 &pubnewpg\n..ur ..hs &pubMYhs;..ur ..fs &pubSYSfs\n..sr pubSWtbt = 0\n..ur ..if &publayout eq REFMAN;..do\n..sr pubFNnum = 0\n..ur ..pn prefix &pubPArom..&pubCHrom.-\n,,pa 1\n..ur ..ob 1 /&sysdate//Part &pubPArom Chapter &pubCHrom/\n..ur ..eb 1 /Part &pubPArom Chapter &pubCHrom//&sysdate/\n..do end\n..ur &pubXXenv\n..ur ..if &pubSWnum ge 1;..th ..do\n..ce;..ur ..oc &pubdark;..ur &pubCHhdr &pubCHrom\n..sp;..do end\n..ur ..oc &pubdark;..ur &pubCHstyle &tempsave\n..ur ..if &pubSWnum ge 1;..th ..ur &pubsetcont.1 |&pubCHrom..\t&tempsave|\n..el ..ur &pubsetcont.1 |&tempsave|\n..sp;..sk c\n..ur ..if &pubSWpgn eq top;..sr pubSWtbt = 1\n.rm\n..cm ----------\n..rm pubchap0 save nosave\n..ur ..if '&pubSWsp' ne '&sysppage./&sysline';..ur ..sp &pubSWtop\n..ur ..cc 6+2*(1+&pubSWls)\n..ur ..if &pubSWnum ge 1;..th ..do\n..ur &pubsetcont.1 |&pubCHrom..\t&tempsave|\n..ur ..oc &pubdark;..ur &pubCHstyle &pubCHrom..  &tempsave\n..do end;..el ..do\n..ur &pubsetcont.1 |&tempsave|\n..ur ..if |&tempsave| ne ||;..th ..do\n..ur ..oc &pubdark;..ur &pubCHstyle &tempsave\n..do end\n..do end\n..sk c;..ur ..if &pubCHnum gt 1;..ef\n..ur ..if &pubSWpgn eq top;..sr pubSWtbt = 1\n.rm\n..cm ----------------------------------------------------------section\n..sr pubSEstyle = '..uc'\n..sr pubSWbtw = 3\n..ur ..sr pubSEenv = &pubSWbtw\n..sr pubSWinc = 99\n..cm       the inclusion-level value for putting subheadings\n..cm       in the Table of Contents\n..dm section begin\n,,ss;..in\n..ur ..if &sysfbc ne 0;..si fbdump\n..ur ..if '&pubSWsp' ne '&sysppage./&sysline' ..sp &pubSEenv\n..ur ..sr pubSEnum = &pubSEnum+1\n..ur ..sr pubSWprt = '&pubCHrom..&pubSEnum'\n..sr pubSUnum = 0\n..ju off;..co on;..hy user\n..ur ..cc 4+2*(1+&pubSWls)\n..cm -- will header fit on one line?\n..sr temp1 = 0\n..ur ..if &pubSWnum ge 2;..ur ..sr temp1 = 3+L'&pubSWprt\n..ur ..sr temp2 = L'&1\n..sr temp3 = 0\n..ur ..if &temp1+&temp2 gt &pubSWll;..sr temp3 = 3\n..ur ..in 0 -&temp3;..ur ..of &temp1+5\n..ur ..oc &pubdark;..ur ..if &pubSWnum ge 2;..th ..ur ..uc |&pubSWprt   |&1\n..el ..do\n..ur &pubSEstyle &1\n..do end\n..in;..ur ..if &pubSWinc ge 2 &pubsetcont 2 |&1|\n..sk c;..ur ..sr pubSWsp = '&sysppage./&sysline'\n..ur &pubenv\n..dm\n..cm -------------------------------------------------------------para\n..sr pubPARind = 3\n..dm para begin\n..ur ..if &0 gt 0 ..sr pubPARind = &1\n..sk a;..ur ..il +&pubPARind\n..dm\n..cm ------------------------------------------------------------quote\n..sr pubQUb = ',,ss;..sp a;..in +5 -5'\n..sr pubQUe = '..in -5 +5;..sp c;..ur &pubenv'\n..dm quote begin\n..ur ..if &0 eq 0;..th ..sr 1 = b;..el ..ur ..sr 1 = &1(1:1)\n..ur ..ur &&pubQU&1\n..dm\n..cm ------------------------------------------------------------point\n..sr pubPTc  = '..cm'\n..sr pubPTs  = '..ur ..si pubPTset &*;..ef'\n..sr pubPTe  = '..ur ..in &pubin 0+&pubinr;..ur &pubenv;..sp a c;..ef'\n..sr pubPTb  = '..sr pubPTnum1 = 0;..sr 1 = 1;..sr pubCHorAP = |PT|;'\n..sr pubPTba = '..ur ..sr pubin = &sysin;..ur ..sr pubinr = &sysinr'\n..sr pubPT1  = '..sr pubPTlev=1;..sr pubPTnum2=0;'\n..sr pubPT1a = '..se pubPTind = &pubPTind1'\n..sr pubPT2  = '..sr pubPTlev=2;..sr pubPTnum3=0;'\n..sr pubPT2a = '..se pubPTind = &pubPTind1 + &pubPTind2'\n..sr pubPT3  = '..sr pubPTlev=3;'\n..sr pubPT3a = '..se pubPTind = &pubPTind1 + &pubPTind2 + &pubPTind3'\n..sr pubPTsty1 = 'arabic'\n..sr pubPTstya = 'theatre'\n..sr pubPTstyi = 'roman lower'\n..sr pubPTstyb = 'bullet'\n..sr pubPTin1 = 4\n..sr pubPTina = 3\n..sr pubPTini = 6\n..sr pubPTinb = 2\n..sr pubPTdel1 = '.'\n..sr pubPTdel2 = ')'\n..sr pubPTdel3 = ')'\n..sr pubPTindr = 3\n..cm ----------\n..dm point begin\n..ur ..if &0 eq 0;..th ..sr 1 = c;..el ..ur ..sr 1 = &1(1:1)\n..ur ..if T'&1 ne N;..th ..do;..ur ..ur &&pubPT&1.&&pubPT&1.a;..do end\n..el ..do\n..ur ..if &1 gt 3;..ur ..er 8 '.point &1' is invalid -- level number too large\n..do end\n..ur ..ur &&pubPT&1.&&pubPT&1.a\n..sk a;..ur ..cc &sysls+2\n..ur ..in &pubin+&pubPTindr+&pubPTind 0+&pubinr-&pubPTindr\n..se pubPTnum&pubPTlev = 1 + &&pubPTnum&pubPTlev\n..ur ..ur ..si &&pubPTnar&pubPTlev &&pubPTnum&pubPTlev pubPOnum\n..se j = &pubin+&pubPTindr+&pubPTind-&&pubPTind&pubPTlev\n..ur ..if &j ne 0;..th ..se x = '&&pubblank(1:&j)';..el ..sr x = ''\n..ur ..ur ..oo 1 &x.&pubPOnum.&&pubPTdel&pubPTlev\n..dm\n..rm pubPTset save nosave\n..sr pubi = 1\n..lb loop\n..ur ..sr pubi = 1+&pubi\n..ur ..if &pubi gt &0;..ef\n..se i = '&&&pubi';..ur ..sr j = &pubi - 1\n..ur ..if '&i' eq b;..ur ..sr pubPTdel&j = ''\n..se pubPTind&j = &&pubPTin&i\n..se pubPTnar&j = '&&pubPTsty&i'\n..ur ..ur ..if '&&pubPTnar&j' eq '';..do\n..ur ..sr pubPTnar&j = 'anystyle';..ur ..sr pubPTany = '&i'\n..ur ..sr pubPTind&j = &pubPTinb;..ur ..sr pubPTdel&j = ''\n..do end\n..go loop\n.rm\n..cw ;\n.point set 1 a i\n..cw\n..cm -------------------------------------------------------- boxon\n..sr pubSWbox = N\n..dm boxon begin\n..ur ..if &pubSWtf eq 0;..sk a\n..ur ..bx &sysin+1 &syscl+(&sysinr)\n..in +3 -3;..sk a;..sr pubSWbox = Y\n..dm\n..cm ------------------------------------------------------- boxoff\n..dm boxoff begin\n..sk a;..in -3 +3;..bx off\n..ur ..if &pubSWtf eq 0;..sk a c\n..sr pubSWbox = N\n..dm\n..cm ---------------------------------------------------- footnotes\n..sr pubFNnum = 0\n..sr pubFNsup = nosup\n..sr pubPTbull = '*'\n..bs\n..bs _\n..sr pubsup0 = 'B_0'\n..sr pubsup1 = 'B_1'\n..sr pubsup2 = 'B_2'\n..sr pubsup3 = 'B_3'\n..sr pubsup4 = 'B_4'\n..sr pubsup5 = 'B_5'\n..sr pubsup6 = 'B_6'\n..sr pubsup7 = 'B_7'\n..sr pubsup8 = 'B_8'\n..sr pubsup9 = 'B_9'\n..ur ..if &sysout eq PRINT ..do\n..sr pubFNsup = sup\n..sr pubPTbull = 'A_F'\n..do end\n..sr sysixref = '0_0...0_0'\n..bs\n..cm do not use the control word separator in these two remotes\n..cm will restore to a semicolon when safe, before we leave\n..dm footnote begin\n..cw\n..ur ..if &0 eq 1 ..sr 2 = ''\n..ur ..sr pubarg1 = !&1!\n..ur ..sr pubarg2 = |&2|\n..ur ..sr pubFNnum = &pubFNnum + 1\n..ur ..if &pubFNsup eq nosup ..th ..ur ..sr temp = '(&pubFNnum.)'\n..el ..do\n..cw ;\n..ur ..si superscript '&pubFNnum' temp\n..cw\n..do end\n..ur &pubarg1.&temp.&pubarg2\n..cw ;\n..fn begin\n..ur ..if &sysfnc gt 0 ..sp\n..ur ..sr pubtemp = L'&temp\n..ur ..oo 1 &temp\n..ur ..in &pubtemp\n..dm\n..dm footend begin\n..fn end\n..dm\n..rm superscript save nosave\n..sr x = ''\n..sr i = 0\n..ur ..pe L'&1\n..ur ..sr i=&i+1;..se pubn=&&1(&i:&i);..se x='&x.&&pubsup&pubn'\n..ur ..sr &2 = '&x'\n.rm\n..cm -----------------------------------------------------------arabic\n..rm arabic save nosave\n..ur ..sr &2 = &1\n.rm\n..cm -----------------------------------------------------------bullet\n..rm bullet save nosave\n..ur ..sr &2 = '&pubPTbull'\n.rm\n..cm ---------------------------------------------------------anystyle\n..rm anystyle save nosave\n..ur ..sr &2 = '&pubPTany'\n.rm\n..cm ------------------------------------------------------------roman\n..rm roman save save\n..ur ..if &0 ne 3;..do;..br\n..er 8 error in roman-style numbering request\n..do end\n..ur ..sr temp = &syspage\n..ur ..pn roman &1\n..ur ,,pa &2\n..ur ..sr &3 = &sysppage\n..ur ,,pa &temp\n..pn arabic\n.rm\n..cm ----------------------------------------------------------theatre\n..sr pubalpha = abcdefghijklmnopqrstuvwxyz\n..rm theatre save nosave\n..ur ..sr temp1 = &1\n..sr temp = ''\n..lb start\n..ur ..if &temp1 le 26;..go finish\n..ur ..sr temp = '&temp.a'\n..ur ..sr temp1 = &temp1 - 26\n..go start\n..lb finish\n..se &2 = '&temp.&&pubalpha(&temp1:&temp1)'\n..ur ..if &pubCHorAP ne PT;..ur ..ur ..up ..sr &2 = '&&&2'\n.rm\n..cm ----------\n..ur ..if &publayout ne BASIC ..go REPORT\n..cw\n..cw ;\n..si major noname nonumber;..ef\n..cm *----------------------------------------------------------*\n..cm *                                                          *\n..cm *          REPORT layout                                   *\n..cm *                                                          *\n..cm *----------------------------------------------------------*\n..lb REPORT\n..ur ..sr layoutn = &layoutn + 1\n..ur ..sr REPORT = &layoutn\n..cm -------------------------------------------------------subsection\n..sr pubSUenv = '..ur ..sp &pubSWbtw a'\n..sr pubSUstyle = '..us'\n..sr pubSUstyl2 = '..in;..sk c'\n..dm subsection begin\n,,ss;..in\n..ur ..if '&pubSWsp' ne '&sysppage./&sysline' &pubSUenv\n..ju off;..co on;..hy user\n..ur ..oc &pubdark;..ur ..cc 4+2*(1+&pubSWls)\n..ur ..if &pubSWnum ge 3;..th ..do\n..sr temp1 = 0\n..sr pubSSnum = 0\n..ur ..sr pubSUnum = &pubSUnum+1\n..ur ..sr pubSWprt = '&pubCHrom..&pubSEnum..&pubSUnum'\n..ur ..sr temp1 = 3+L'&pubSWprt\n..ur ..if &temp1+L'&1 gt &pubSWll;..in 0 -3\n..ur ..of &temp1+5\n..ur ..us |&pubSWprt   |&1\n..in;..sk c;..do end\n..el ..do\n..ur &pubSUstyle &1.&pubSUstyl3\n..ur &pubSUstyl2\n..do end\n..ur ..sr pubSWsp = '&sysppage./&sysline'\n..ur ..if &pubSWinc ge 3 &pubsetcont 3 |&1|\n..ur &pubenv\n..dm\n..cm -----------------------------------------------------------subsub\n..ur ..sr pubSSenv = &pubSWbtw\n..sr pubSSstyle = '..ur'\n..sr pubSSstyl2 = '..sp c'\n..dm subsub begin\n,,ss;..in\n..ur ..if &publayout(1:3) ne APA;..th\n..ur ..if '&pubSWsp' ne '&sysppage./&sysline';..ur ..sp &pubSSenv\n..el ..sp\n..ur ..oc &pubdark;..ur ..cc 4+2*(1+&pubSWls)\n..ur ..if &pubSWnum ge 4;..th ..do\n..ur ..sr pubSSnum = &pubSSnum+1\n..ur ..sr pubSWprt = '&pubCHrom..&pubSEnum..&pubSUnum..&pubSSnum'\n..ur ..if 3+L'&pubSWprt+L'&1 gt &pubSWll;..in 0 -3\n..ur ..of 8+L'&pubSWprt\n..ju no;..hy user\n..ur &pubSWprt   &1\n..of;..sp c\n..do end;..el ..do\n..ur &pubSSstyle &1.&pubSSstyl3\n..ur &pubSSstyl2\n..do end\n..ur ..if &pubSWinc ge 4 &pubsetcont 4 |&1|\n..ur ..sr pubSWsp = '&sysppage./&sysline'\n..ur &pubenv\n..dm\n..cm -----------------------------------------------------------tabnum\n..sr pubTAnum = 0\n..sr pubTAstyle = '&pubTAnum'\n..dm tabnum begin\n..ur ..sr pubTAnum = &pubTAnum + 1\n..se &1 = '&pubTAstyle'\n..dm\n..cm ---------------------------------------------------------tabbegin\n..dm tabbegin begin\n..ur ..sr pubTFlines = &sysfbc\n..ss;..fb begin\n..sr pubSWtf = 1\n..dm\n..cm ------------------------------------------------------------table\n..sr pubTAhdr = Table\n..sr pubTAlen = 0\n..sr pubTAabs = 0\n..cm tab character btw table number and title in the .pt\n..dm table begin\n..ur ..sr pubTAabs = &pubTAabs + 1\n..dh set 2;..pt ..in;..pt ..sp c;..pt ..ur ..of &pubCOtab+3;..pt ..cc 3\n..se pubTFnum = '&&&1'\n..ur ..pt &pubTFnum..\t&2\n..pt ..sp c;..dh set 1\n..ur ..sr temp = L'&pubTFnum\n..ur ..if &temp gt &pubTAlen;..ur ..sr pubTAlen = &temp\n..ce;..ur ..up &pubTAhdr &pubTFnum\n..sk;..ce;..hy sup;..ur &2\n..fo no;..sk 2 c\n..dm\n..cm -----------------------------------------------------------tabend\n..dm tabend begin\n..ur ..if '&1' eq page ..th ..si tfend TA page\n..el ..si tfend TA nopage\n..dm\n..cm ------------------------------------------------------------tfend\n..rm tfend save nosave\n..sr pubSWtf = 0\n,,ss;..br\n..ur ..if &2 eq page;..do\n..ur ..sr textarea = &syspl-&systm-&sysbm\n..ur ..sr tflines = &sysfbc-&pubTFlines\n..ur ..if &pubSWbox eq Y;..th ..ur ..sr tflines = &tflines + 2;..el ..cm\n..ur ..sr spaces = &tflines - (&tflines/&textarea)*&textarea\n..ur ..if '&spaces' gt 0 ..sp &textarea-&spaces\n..do end\n..ur ..if &pubSWbox eq Y;.boxoff\n..fb end\n..ur ..ls &pubSWls\n..cm will it fit on this page?\n..sr temp1 = 0\n..ur ..if '&sysppage./&sysline' ne '&pubSWsp'\n..ur ..sr temp1 = &pubSWbtw-&pubSWls\n..ur ..sr temp2 = &syspl-&sysline-&sysbm-&temp1+1\n..ur ..if &sysfnc gt 0 ..sr temp2 = &temp2-&sysfnc-&pubFNset\n..ur ..if &sysfbc-&pubTFlines le &temp2\n..do;..ur ..sp &temp1 a;..fb dump 1;..ur ..sp &pubSWbtw a\n..ur ..sr pubSWsp = '&sysppage./&sysline'\n..do end\n..ur &pubenv\n.rm\n..cm ------------------------------------------------------- fbdump\n..rm fbdump save nosave\n..sr pubstar = '..ef'\n..lb loop\n..ur ..if &sysfbc eq 0;..do;..sr pubstar = '..cm';..ef;..do end\n..sr temp=0;..ur ..if &sysfnc ne 0;..ur ..sr temp = &sysfnc+&pubFNset\n..ur ..if &sysfbf gt &syspl-&systm-&sysbm-&sysline+1-&temp &pubnewpg\n,,fb dump 1\n,,ur ,,sp &pubSWbtw a\n..ur ..sr pubSWsp = '&sysppage./&sysline'\n..go loop\n.rm\n..cm -----------------------------------------------------------fignum\n..sr pubFInum = 0\n..sr pubFIstyle = '&pubFInum'\n..dm fignum begin\n..ur ..sr pubFInum = &pubFInum + 1\n..se &1 = '&pubFIstyle'\n..dm\n..cm ---------------------------------------------------------figbegin\n..dm figbegin begin\n..ur ..sr pubTFlines = &sysfbc\n..ss;..fb begin\n..fo no;..sr pubSWtf = 1\n..dm\n..cm -----------------------------------------------------------figure\n..sr pubFIhdr = 'Figure'\n..sr pubFIlen = 0\n..sr pubFIabs = 0\n..cm tab char btw figure number and title in .pt\n..dm figure begin\n..ur ..if &0 lt 3;..sr 3 = ''\n..ur ..sr pubFIabs = &pubFIabs + 1\n..dh set 3;..pt ..in;..pt ..sp c;..pt ..ur ..of &pubCOtab+3;..pt ..cc 3\n..se pubTFnum = '&&&1'\n..ur ..pt &pubTFnum..\t&2\n..pt ..sp c;..dh set 1\n..ur ..sr temp = L'&pubTFnum\n..ur ..if &temp gt &pubFIlen;..ur ..sr pubFIlen = &temp\n..sk 2 a;..hy user;..co;..ju no\n..ur ..sr temp = |&pubFIhdr &pubTFnum.:  &2.&3|\n..ur ..sr temp1 = &pubSWll-&sysin+&sysinr\n..ur ..if L'&temp lt &temp1;..th ..fo centre\n..el ..ur ..of L'&pubFIhdr+L'&pubTFnum+4\n..ur &temp\n..dm\n..cm -----------------------------------------------------------figend\n..dm figend begin\n..ur ..if '&1' eq page ..th ..si tfend FI page\n..el ..si tfend FI nopage\n..dm\n..cm -------------------------------------------------------------rm *\n..rm * save save\n..ur &pubstar\n..sr flag = '..cm'\n..lb loop\n..ur ..if &sysfbc eq 0 ..ef\n..ur &flag\n,,fb dump 1\n,,ur ,,sp &pubSWbtw a\n..ur ..sr pubSWsp = '&sysppage./&sysline'\n..sr flag='..ur ..if &sysfbf gt &syspl-&systm-&sysbm-&sysline+1-&sysfnc ..ef'\n..go loop\n.rm\n..cm ----------\n..ur ..if &publayout eq REPORT ..do\n..cw\n..cw ;\n..si major noname nonumber;..ef\n..do end\n..cw\n..cm *----------------------------------------------------------*\n..cm *                                                          *\n..cm *          PAPER layout                                    *\n..cm *                                                          *\n..cm *----------------------------------------------------------*\n..ur ..sr layoutn = &layoutn + 1\n..ur ..sr PAPER = &layoutn\n..sr pubSWtop = 5\n..sr pubSWbtw = 3\n..cm -----------------------------------------------------------prelim\n..sr pubprelim = 0\n..dm prelim begin\n..ur &pubFNreset\n,,ss;..in;..sr pubSEnum = 0;..ur ..sr pubprelim = &pubprelim + 1\n..ur ..if &sysline ne 1;..ur ..sp &pubSWtop a\n..cc 6;..ur ..oc &pubdark;..ur &pubCHstyle &1\n..sk;..sk c;..ur ..fs &pubSYSfs\n..ur ..sr pubSWsp = '&sysppage./&sysline';..ur &pubenv\n..dm\n..cm ---------------------------------------------------------appendix\n..sr pubAPlen = 0\n..sr pubAPnar = 'theatre'\n..dm appendix begin\n..ur &pubFNreset;..ur &pubTAreset;..ur &pubFIreset\n,,ss;..in\n..sr tempsave = ''\n..ur ..if &0 ne 0 ..sr tempsave = |&1|\n..fk dump\n..ur ..if &sysfbc ne 0;..si fbdump\n..ur ..hs &pubMYhs\n..ur ..if &sysline ne 1 &pubnewpg\n..pn prefix\n..ur ..fs &pubSYSfs\n..sr pubCHorAP = 'AP'\n..ur ..sr pubAPnum = &pubAPnum+1\n..ur ..if &pubAPnum eq 1 &pubsetcont.0 'Appendix' 'page'\n..sr pubSEnum = 0\n..ur ..si &pubAPnar &pubAPnum pubCHrom\n..sr pubSWtbt = 0\n..ur ..if &publayout eq REFMAN;..do\n..ur ..pn prefix &pubPArom..&pubCHrom.-\n,,pa 1\n..ur ..ob 1 /&sysdate//Part &pubPArom Appendix &pubCHrom/\n..ur ..eb 1 /Part &pubPArom Appendix &pubCHrom//&sysdate/\n..do end\n..ur &pubXXenv\n..ur ..sr pubSWprt = '&pubCHrom'\n..ur ..sr temp = L'&pubCHrom\n..ur ..if &temp gt &pubAPlen;..ur ..sr pubAPlen = &temp\n..fo centre;..ur ..oc &pubdark;..ur Appendix &pubCHrom\n..ur ..if |&tempsave| ne ||;..do;..sk;..hy sup\n..ur ..oc &pubdark;..ur &pubCHstyle &tempsave\n..do end\n..ur &pubsetcont.1 |&pubCHrom..\t&tempsave|\n..sp 2;..sk c;..ur ..sr pubSWsp = '&sysppage./&sysline'\n..ur &pubenv\n..ur ..if &pubSWpgn ne top;..ef\n..ur ..hs &pubSYShs;..sr pubSWtbt = 1\n..dm\n..cm -----------------------------------------------------bibliography\n..dm bibliography begin\n,,ss;..in;..ur &pubFNreset\n..ur ..if &sysfbc ne 0;..si fbdump\n..ur ..if &0 eq 0;..sr 1 = 'BIBLIOGRAPHY'\n..ur ..sr pubBItit = |&1|\n..sr pubSWtbt = 0;..ur ..hs &pubMYhs\n..cm ---------- decide on how to \"page eject\"\n..ur ..if &pubCHnum eq 0;..th ..do\n..ur ..if &pubSWcon ne 0;..th ..pa 1\n..el ..cm\n..ur ..if &publayout ne REFMAN;..th ..pn prefix B;..el ..cm\n..sr pubeject = 1\n..do end;..el ..do\n..pi 0;..ur ..if &publayout ne IEEE;..th ..do;..sr pubBIstyle = '..of 3'\n..ur ..if &sysline ne 1;..th ..ur &pubnewpg;..el ..cm\n..ur ..if &publayout eq REFMAN;..th ..do\n..ur ..up ..pn prefix &pubBItit(1:5).-;,,pa 1\n..ur ..ob 1 /&pubBItit//&sysdate/\n..ur ..eb 1 /&sysdate//&pubBItit/\n..do end;..el ..cm\n..do end;..el ..cm\n..do end\n..cm ---------- end of \"page eject\"\n..ur ..fs &pubSYSfs\n..ur ..if &publayout eq IEEE ..th ..sp &pubSWtop\n..el ..do;..ur &pubsetcont.0 |&pubBItit|\n..pn arabic;..sr pubCHorAP = BI;..ur &pubXXenv\n..do end\n..cc 4;..ce;..ur ..oc &pubdark;..ur &pubCHstyle &pubBItit\n..ur ..if &publayout ne IEEE ..sk 2;..sk c;..ur &pubenv\n,,ss;..ur ..if &pubSWpgn ne top ..ef\n..ur ..hs &pubSYShs;..sr pubSWtbt = 1\n..dm\n..cm --------------------------------------------------------------bib\n..sr pubSWbib = 0\n..cm     set to number of pages occupied by bibliography,\n..cm     if .bib invoked -- used to prevent empty page\n..cm     after the bibliography page(s).  Is also used in .index\n..cm     and .contents to decide whether to generate an\n..cm     entry in the Table of Contents for the bibliograhpy.\n..ur ..sr pubBIenv = '..ju off;..co on;..hy user;..sr pubBIenv = |..cm|'\n..dm bib begin\n..br;..ur &pubBIenv\n..ur ..if &syscc eq Y;..cc end\n..ur ..if &0 eq 0;..go around\n..ur ..if '&1' ne 'end';..go around\n..in;..ur ..if &pubCHnum eq 0;..ur ..sr pubSWbib = &syspage\n..ur &pubenv\n..ef\n..lb around\n..ur ..sr pubBInum = &pubBInum+1\n..ur ..if &0 ne 0  AND  '&1' ne '';..ur ..sr &1 = &pubBInum\n..sp\n..cc begin\n..ur &pubBIstyle\n..dm\n..cm ----------\n..cw\n..cw ;\n..ur ..if &publayout eq PAPER ..do\n..si major noname;..ef;..do end\n..cm *----------------------------------------------------------*\n..cm *                                                          *\n..cm *          IEEE layout                                     *\n..cm *                                                          *\n..cm *----------------------------------------------------------*\n..ur ..sr layoutn = &layoutn + 1\n..ur ..sr IEEE = &layoutn\n..ur ..if &publayout ne IEEE ..go GUIDE\n..ad\n..cw\n..sr pubBIenv = '..cm'\n..sr pubBIstyle = '..in 5;..ur ..oo 1 (&pubBInum.)'\n..sr pubCHstyle = '..ce;..uc'\n..sr pubSEstyle = '..us'\n..sr pubSUstyle = '.para;..us'\n..sr pubSUstyl2 = '..cm'\n..sr pubSUstyl3 = '.'\n..sr pubSEenv = ''\n..sr pubSUenv = '..cm'\n..sr pubSSenv = ''\n..sr pubSWbtw = 1\n..sr pubSWtop = 2\n..sr pubPTindr = 0\n..cw ;\n..ur ..if &sysoffline eq Y;..do\n..ur ..sr temp = &lpi*22;..ur ..bm &temp-&syspl+2;..ur ..pl &temp\n..do end\n..si major noname nonumber\n..dm prelim delete\n..rm prelim 1 nosave\n..ce no;..fb end\n..sr pubstar = '..ef'\n..ur ..sr temp = &lpi*5/2 - &sysfbc\n..ur ..if &temp gt 0;..do;..le yes;..ur ..sp &temp/2;..le no;..do end\n..fb dump 1\n..sr pubstar = '..cm'\n..ur ..if &sysline lt &lpi*5/2;..th ..ur ..ln &lpi*5/2\n..el ..sp 2\n..si multicol 2\n..cs begin\n..fn set 1;..fn begin;..ur ..sp &lpi*5/2-1;..fn end\n..sr pubFNset = 1;..fn set 1 ////\n..cs end\n,,ss;..in;..ur &pubCHstyle &1\n..sk c;..ur &pubenv\n.rm\n..ur ..rm &syspl-&sysbm-&lpi*5/2 1 save\n..cb\n.rm\n,,ss;..fb begin;..ce yes;..ef\n..cm *----------------------------------------------------------*\n..cm *                                                          *\n..cm *          GUIDE layout                                    *\n..cm *                                                          *\n..cm *----------------------------------------------------------*\n..lb GUIDE\n..ur ..sr layoutn = &layoutn + 1\n..ur ..sr GUIDE = &layoutn\n..cw\n..cw ;\n..ur ..if &syspassno gt 1;..th ..do\n..ur ..sr pubCHnsave = &pubCHtit(0)\n..ur ..sr pubTAnsave = &pubTAtit(0)\n..ur ..sr pubFInsave = &pubFItit(0)\n..do end;..el ..do\n..sr pubCHnsave = 0\n..sr pubTAnsave = 0\n..sr pubFInsave = 0\n..do end\n..sr pubCHtit = 0\n..sr pubFItit = 0\n..sr pubTAtit = 0\n..cm ---------- set up for tables of contents\n..sr i = 0\n..lb contloop\n..ur ..sr i = &i + 1\n..ur ..dh set &i 1 npa nus up noj skbf 0 spaf 1\n..pt ..ur ..tb &pubCOtab+1 '. '&pubSWll.R\n..ur ..if &i eq 2;..do\n..pt ..sp;..pt ..ur ..oo 1 &pubTAhdr;..pt ..ra page\n..do end\n..ur ..if &i eq 3;..do\n..pt ..sp;..pt ..ur ..oo 1 &pubFIhdr;..pt ..ra page\n..do end\n..ur ..if &i lt 3 ..go contloop\n..dh set 1\n..sr pubsetcont = '..si setcont'\n..cw\n..cm -----------------------------------------------------------prelim\n..rm prelim delete\n..dm prelim begin\n,,ss;..pn prefix;..in\n..sr pubSEnum = 0\n..sr pubeject = 1\n..ur ..sr pubprelim = &pubprelim+1\n..ur ..if &pubCHnum eq 0;..th ..pn roman\n..el ..ur ..if &sysline ne 1 &pubnewpg\n..ur ..fs &pubSYSfs\n..ur ..sp &pubSWtop a\n..ur ..if &0 ne 0;..do\n..cc 6;..ce;..ur ..oc &pubdark;..ur ..up &1\n..ur &pubsetcont.0 |&1|\n..sk;..sk c;..do end\n..ur ..if &pubCHnum eq 0;..ur ..sr pubSWcon = &syspage\n..ur &pubenv\n..dm\n..cm ----------------------------------------------------------setcont\n..cm -- these fellows do all the work of stuffing things into the\n..cm    table of contents\n..cm\n..cm    (0,1,2,3,4)  (string)   (alternate page reference)\n..cm\n..cm    The first argument is the level number for indenting.  The 3th\n..cm    argument is used only in the case when a 'sysppage' won't work.\n..cm\n..rm setcont0 save nosave\n..pt ..sp 2\n..pt ..in\n..ur ..if |&2| eq part;..do\n..pt ..cc 7\n..ur ..pt ..ce &1\n..ef;..do end\n..ur ..if |&2| eq page;..do\n..pt ..cc 5\n..ur ..if |&1| ne || ..pt ..oo 1 &1\n..ur ..pt ..ra &2\n..ef;..do end\n..pt ..ur ..tb '. '&pubSWll.R\n..ur ..pt &1\n..pt ..ur ..tb &pubCOtab+1 '. '&pubSWll.R\n.rm\n..rm setcont1 save nosave\n..pt ..in\n..pt ..sp c\n..pt ..ur ..of &pubCOtab+6\n..pt ..cc 4\n..ur ..up ..pt &1\n..pt ..sp c\n.rm\n..rm setcont save nosave\n..ur ..pt ..ur ..in &&pubCOtab+3*(&1-1)\n..pt ..of 6\n..ur ..pt &2\n.rm\n..cm ---------------------------------------------------------contents\n..rm contents 1 nosave\n..ur ..if &sysfbc ne 0;..si fbdump\n..in;..ur ..hs &pubMYhs\n..ss;..sr pubSWpgn = 'bottom';..sr pubSWtbt = 0\n..ur ..if &pubeject eq 0;..sr pubSWcon = 0\n..ur ..if &0 eq 0;..sr 1 = 'TABLE OF CONTENTS'\n..ur ..sr pub1title = |&1|\n..ur ..if &sysline ne 1 ..pa\n..ur ..if &pubSWbib ne 0 &pubsetcont.0 |&pubBItit|\n,,ur ,,pa &pubSWcon+1\n..pn roman;..ur ..fs &pubSYSfs\n..hy user\n..sr pubCHorAP = 'CO'\n..ur ..if &publayout eq REFMAN;..do;..pn prefix\n..ur ..ob 1 /CONTENTS//&sysdate/;..ur ..eb 1 /&sysdate//CONTENTS/\n..do end\n..ur &pubXXenv\n..cm -- now, figure out how far to tab over for 0-level entries\n..sr pubCOtab = 0\n..ur ..if &pubSWnum ge 1;..ur ..sr pubCOtab = &pubCHlen\n..ur ..if &pubCOtab lt &pubAPlen;..ur ..sr pubCOtab = &pubAPlen\n..ur ..sr pubCOtab = &pubCOtab + 3\n..cm -- now we can print the table of contents\n..dh set 1;..pt ..in;..ur ..tc * ..ce &pub1title\n..ur &pubenv\n.rm\n..cm -----------------------------------------------------------tables\n..rm tables 1 nosave\n..ur ..if &pubTAabs eq 0;..ef\n,,ss;..in;..ur ..if &sysfbc ne 0;..si fbdump\n..ur ..cc 7+2*&pubTAnum+&pubSWtop\n..ur &pubXXenv\n..ur ..if &0 eq 0;..ur ..sr 1 = 'List of &pubTAhdr.s'\n..hy user\n..ur ..sr pubCOtab = 3 + &pubTAlen\n..dh set 2;..pt ..in;..ur ..tc * ..ce &1\n..ur &pubenv\n.rm\n..cm ----------------------------------------------------------figures\n..rm figures 1 nosave\n..ur ..if &pubFIabs eq 0;..ef\n,,ss;..in;..ur ..if &sysfbc ne 0;..si fbdump\n..ur ..cc 7+2*&pubFInum+&pubSWtop\n..ur &pubXXenv\n..ur ..if &0 eq 0;..ur ..sr 1 = 'List of &pubFIhdr.s'\n..hy user\n..ur ..sr pubCOtab = 3 + &pubFIlen\n..dh set 3;..pt ..in;..ur ..tc * ..ce &1\n..ur &pubenv\n.rm\n..cm ------------------------------------------------------------index\n..dm index begin\n,,ss;..in\n..ur ..if &sysfbc ne 0;..si fbdump\n..hy user;..ur ..hs &pubMYhs\n..ur ..if &0 eq 3;..go around\n..sr 3 = 1\n..ur ..if &0 eq 2;..go around\n..ur ..if &0 eq 0;..do;..sr 1 = 1;..sr 2 = 'INDEX';..go around;..do end\n..ur ..if T'&1 eq N;..th ..sr 2 = 'INDEX'\n..el ..do;..ur ..sr 2 = |&1|;..sr 1 = 1;..do end\n..lb around\n..pa\n..ur ..if &pubSWbib ne 0;..th ..do;..ur &pubsetcont.0 |&pubBItit|\n,,ur ,,pa +&pubSWbib\n..sr pubSWbib = 0\n..do end\n..sr pubCHorAP = 'IN'\n..ur ..if &publayout eq REFMAN;..do;..ur ..pn prefix INDEX&1.-\n,,pa 1;..ur ..ob 1 ///&sysdate/;..ur ..eb 1 /&sysdate///;..do end\n..ur ..sr tempcd = &syscd;..sc;..ur &pubXXenv\n..ur ..fs &pubSYSfs;..fo centre;..ur ..oc &pubdark;..ur &2\n..sk 2;..sk c;..ur &pubsetcont.0 |&2|\n..ur ..if &pubSWpgn eq top ..do\n..ur ..hs &pubSYShs;..sr pubSWtbt = 1;..do end\n..ju off;..co on;..hy user\n..ur ..if &tempcd ne &3;..ur ..si multicol &3\n..sa;..tr 00 40;..su on;..ix &1 . dump\n..su off;..br;..re;..in\n..ur ..if &tempcd ne &3;..ur ..si multicol &tempcd\n..ur &pubenv\n..dm index end\n..cm ----------\n..dm sysix0 begin\n..sk\n..dm sysix0 end\n..dm sysix1 begin\n..in 0;..of 3\n..dm sysix1 end\n..dm sysix2 begin\n..in 3;..of 3\n..dm sysix2 end\n..dm sysix3 begin\n..in 6;..of 3\n..dm sysix3 end\n..cm ----------\n..ur ..if &publayout ne GUIDE ..go MANUAL\n..cw ;\n..si major noname;..ef\n..cm *----------------------------------------------------------*\n..cm *                                                          *\n..cm *          MANUAL layout                                   *\n..cm *                                                          *\n..cm *----------------------------------------------------------*\n..lb MANUAL\n..ur ..sr layoutn = &layoutn + 1\n..ur ..sr MANUAL = &layoutn\n..cm -----------------------------------------------------------prelim\n..dm prelim delete\n..dm prelim begin\n,,ss;..sr pubSEnum = 0\n..sr pubeject = 1\n..ur ..sr pubprelim = &pubprelim+1\n..ur ..hs &pubMYhs\n..ur ..if &pubCHnum gt 0;..th ..cb\n..el ..ur ..if &pubprelim eq 1;..th ..do\n..ur ..if &0 eq 2;..th ,,ur ,,pa &pubSWcon+1\n..el ..ur ..pa &pubSWcon+1\n..do end\n..el ..cm\n..pn prefix;..in\n..ur ..if &pubCHnum eq 0;..pn roman;..ur ..fs &pubSYSfs\n..ur ..if &publayout eq REFMAN;..do\n..ur ..fs &pubMYfs\n..sr pubFNnum = 0\n..sr pubTAnum = 0;..sr pubFInum = 0\n..ur ..up ..pn prefix &1(1:5).-\n,,pa 1\n..ur ..ob 1 /&sysdate//&1/\n..ur ..eb 1 /&1//&sysdate/\n..do end\n..ur ..if &0 eq 0;..sr 1 = ''\n..sr pubSWtbt = 0;..ur &pubXXenv\n..ur ..oc &pubdark;..ur &pubCHstyle &1\n..ur ..if |&1| ne || &pubsetcont.1 |&1|\n..sk;..sk c;..ur ..if &pubCHnum eq 0;..ur ..sr pubSWcon = &syspage\n..ur &pubenv\n..ur ..if &pubSWpgn ne top ..ef\n..ur ..if &pubCHnum eq 0 ..ef\n..ur ..hs &pubSYShs;..sr pubSWtbt = 1\n..dm\n..cm -------------------------------------------------------------part\n..sr pubPAnar = 'roman upper'\n..dm part begin\n..ur &pubFNreset;..ur &pubTAreset;..ur &pubFIreset\n,,ss;..in\n..ur ..if &sysfbc ne 0;..si fbdump\n..sr pubCHorAP = 'PA'\n..ur ..if &publayout eq REFMAN;..th ..do\n..sr pubCHnum = 0;..sr pubAPnum = 0\n..sr pubFIstyle = '&pubPArom..&pubCHrom..&pubFInum'\n..sr pubTAstyle = '&pubPArom..&pubCHrom..&pubTAnum'\n..do end;..el ..cm\n..ur ..sr pubPAnum = &pubPAnum+1\n..ur ..if &pubPAnum eq 1;..th ..do\n..ur ..if '&pubCHnar' eq 'roman upper';..sr pubCHnar = 'arabic'\n..cm\n..ur ..if &pubeject eq 1;..th ..do\n..ur ..if &pubprelim ne 0;..ur ..sr pubSWcon = &syspage\n..pa 1;..do end\n..el ..sr pubeject = 1\n..do end\n..el ..ur ..if &sysline ne 1 &pubnewpg\n..pn prefix;..ur ..si &pubPAnar &pubPAnum pubPArom\n..pn arabic\n..hs 0;..fs 0\n..le yes\n..ur ..sp &syspl/2-&systm-3\n..le no\n..fo centre\n..ur ..oc &pubdark;..ur PART &pubPArom\n..sp;..ur ..up &1\n..br;..ur &pubsetcont.0 |PART &pubPArom..  &1| part\n..ur ..if &pubCHnum eq 0;..th\n..ur ..if &pubCHkind eq 0;..pa\n..ur &pubenv\n..dm\n..cm ----------\n..cw\n..cw ;\n..ur ..if &publayout eq MANUAL ..ef\n..ur ..sr layoutn = &layoutn + 1\n..ur ..sr REFMAN = &layoutn\n..ur ..if &publayout ne REFMAN ..go THESIS\n..cm *----------------------------------------------------------*\n..cm *                                                          *\n..cm *          REFMAN layout                                   *\n..cm *                                                          *\n..cm *----------------------------------------------------------*\n..sr pubMYhs = 1\n..ot 1 ///Page %/\n..et 1 /Page %///\n..sr pubMYfs = 1\n..bt ////\n..sr pubnewpg = '..pa odd'\n..sr pubFIreset = '..sr pubFInum = 0'\n..sr pubFIstyle = '&pubCHrom..&pubFInum'\n..sr pubTAreset = '..sr pubTAnum = 0'\n..sr pubTAstyle = '&pubCHrom..&pubTAnum'\n..ef\n..cm *----------------------------------------------------------*\n..cm *                                                          *\n..cm *          THESIS layout                                   *\n..cm *                                                          *\n..cm *----------------------------------------------------------*\n..lb THESIS\n..ur ..sr layoutn = &layoutn + 1\n..ur ..sr THESIS = &layoutn\n..sr pubSWnam = 'full name of author'\n..sr pubCHnar = 'roman upper'\n..cm ---------- remove on September 1, 1978 ------------------------by\n..rm by 1 nosave\n..ur ..si author &*\n.rm\n..cm -----------------------------------------------------------author\n..rm author 1 nosave\n..ur ..if &0 ne 0;..ur ..sr pubSWnam = |&1|\n..sp 6\nby\n..sp 4\n..ur &pubSWnam\n.rm\n..cm -------------------------------------------------------------date\n..rm date 1 nosave\n..sp\n..ur ..sr temp = &syspl - &sysbm - &sysline\n..ur ..if &temp ge 3;..ur ..sp &temp/2\n..ur Waterloo, Ontario, &syspyear\n..sp\n..ur ..if &0 eq 0;..sr 1 = '(c)'\n..ur &1 &pubSWnam., &syspyear\n..ce no;..ur &pubenv\n.rm\n..cm ------------------------------------------------------declaration\n..rm declaration 1 nosave\n..ur ..pa &pubSWcon+1;..pn prefix;..in;..pn roman;..ur ..fs &pubSYSfs\n..sr pubeject = 1\n..ur &pubXXenv\n..ur &pubenv\n,,ss\n..ur I hereby declare that I am the sole author of this &pubSWtyp..\n..sp\n..ur ..sr pubSWcon = &syspage\n..ur I authorize the University of Waterloo to lend this &pubSWtyp to\nother institutions or individuals for the purpose of scholarly research.\n..sp 9;..ur ..in &syscl/2;..ur &pubSWnam;..in 0;..sp 9\nI further authorize the University of Waterloo to reproduce this\n..ur &pubSWtyp\nby photocopying or by other means, in total or in part, at the request of\nother institutions or individuals for the purpose of scholarly research.\n..sp 9;..ur ..in &syscl/2;..ur &pubSWnam;..in 0\n..ur &pubenv\n.rm\n..cm -----------------------------------------------------------borrow\n..rm borrow 1 nosave\n..ur ..pa &pubSWcon+1;..pn prefix;..in\n..sr pubeject = 1\n..pn roman;..ur ..fs &pubSYSfs\n..ur &pubenv\n,,ss\nThe University of Waterloo requires the signatures of all persons using\n..ur or photocopying this &pubSWtyp..\nPlease sign below, and give address and date.\n..ur ..sr pubSWcon = &syspage\n..ur &pubenv\n.rm\n..cm -----------------------------------------------------------degree\n..rm degree 1 nosave\n..ur ..if &pubSWtyp eq publication;..sr pubSWtyp = thesis\n..sp 5\nA Thesis\npresented to the University of Waterloo\nin partial fulfillment of the\nrequirements for the degree of\n..ur &1\nin\n.rm\n..cm -----------------------------------------------------------course\n..rm course 1 nosave\n..ur ..if &pubSWtyp eq publication;..sr pubSWtyp = paper\n..sp 5\nfor\n..sp;..ur &1\n..sp;..ur &2\n..sp\n.rm\n..cw\n..cw ;\n..ur ..if &publayout eq THESIS;..ef\n..ur ..if &publayout(1:3) ne APA ..do\n..ur ..er 16 &publayout is an invalid layout\n..ef;..do end\n..cm ---------- start of common stuff for the APA layouts ----------\n..si major noname nonumber\n..sr pubnewpg = '..cb'\n..sr pubCHkind = 1\n..ur ..sr layoutn = &layoutn + 1\n..ur ..sr APA3 = &layoutn\n..ur ..if &publayout ne APA3;..go APA4\n..cm *----------------------------------------------------------*\n..cm *                                                          *\n..cm *          APA3 layout                                     *\n..cm *                                                          *\n..cm *----------------------------------------------------------*\n..cw\n..sr pubCHstyle = '..ce;..us'\n..sr pubSEstyle = '..us'\n..sr pubSUenv = '..cm'\n..sr pubSUstyle = '.para;..us'\n..sr pubSUstyl2 = '..cm'\n..sr pubSUstyl3 = '.'\n..sr pubSSstyle = '.para;..us'\n..sr pubSSstyl2 = '..cm'\n..sr pubSSstyl3 = '.'\n..dm subsub delete\n..cw ;\n..ef\n..cm *----------------------------------------------------------*\n..cm *                                                          *\n..cm *          APA4 layout                                     *\n..cm *                                                          *\n..cm *----------------------------------------------------------*\n..lb APA4\n..ur ..sr layoutn = &layoutn + 1\n..ur ..sr APA4 = &layoutn\n..cw\n..sr pubCHstyle = '..ce;..up'\n..sr pubSEstyle = '..ce;..us'\n..sr pubSUstyle = '..us'\n..sr pubSSenv = ''\n..sr pubSSstyle = '.para;..us'\n..sr pubSSstyl2 = '..cm'\n..sr pubSSstyl3 = '.'\n..cw ;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SYSPUBMN": {"ttr": 7173, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x06\\xd9\\x06\\xd9\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 1753, "newlines": 1753, "modlines": 0, "user": "CBT249"}, "text": "..cm document requires (at least) the TN train to print properly\n..im syspub layout=manual hy=full dark=yes\n..sr pubFNsup = sup\n.titlepage\nSYSPUB USER'S GUIDE\n..sk 7\nCOMPUTING CENTRE\n..sk\nUNIVERSITY OF WATERLOO\n..sk 10\n..ur &sysdate\n..sk 10;..fo\n..pp;This User's Guide defines\n..ur &pubSWver..\nIt was produced using the SYSPUB commands, with some\nof the SCRIPT control words described in the \"Introduction to SCRIPT\".\nIt is assumed that you will have access to the \"Introduction to SCRIPT\"\nas you are reading the SYSPUB User's Guide.\nThe current version of SCRIPT is:\n..sp;..ce;..ur &sysversion\n.prelim 'Overview'\n..pp;Many publications in an academic environment have a number of\nthings in common:\n..sp;..of 2\n* preliminary pages:\na title page or area,\nan abstract,\nan acknowledgements section or page,\na Table of Contents,\na List of Tables,\nand a List of Figures.\n..sp;..of 2\n* a main body:\nchapters and appendices divided into\nsections, subsections, and subsubsections,\nwith tables, figures, block quotations, footnotes, lists of points,\nand some additional components such as an index and a bibliography.\n..sp;..of\nHowever, different types of documents have different \"layout\" requirements.\nIn some cases, the various levels of divisions in the main body must\nbe numbered (such as chapter \"I\", section \"1.1\", and subsection \"1.1.1\");\nin others, such numbering is not required.\nIn some cases, new chapters must begin on new pages; in others, it isn't\ndesired.\n..pp;The physical layout of a document\nis just as important as the concepts and facts it\nattempts to convey.\nEnsuring that the layout of a document follows a set of standards\nnecessitates that an identical sequence of layout or \"formatting\" operations\nbe performed for each similar item in the document.\nThis is\n..hw time--consuming,\nrepetitive,\n..hw error--prone work.\nIf the document is being prepared on a\n..hw type-writer,\nit is also work which\nmust be re-done with each successive draft.\n..pp;SYSPUB is a set of commands designed specifically for use in preparing and\nformatting papers, theses, and other types of research and instructional\npublications common to the university environment.\nFor years, people have used the computer to perform some of\nthis work;\nSYSPUB offers a number of additional advantages.\n..pp\nSYSPUB provides 35 different commands for the various components of\nyour document.\nThere are also 9 different output formats, called\n\"layouts\".\nWhen you use SYSPUB, you begin by selecting the layout most appropriate to your\ndocument, but the commands you use thereafter are the same for all layouts.\nThe following is a sample input file which\nformats a document in the form of a paper:\n..sk;..cc begin;..in 4\n .im syspub layout=paper\n .prelim 'Abstract'\n .para\n text of abstract\n .chapter 'Title of First Chapter'\n .para\n text of first paragraph\n .para\n text of second paragraph\n .section 'Title of Section'\n .para\n text of paragraph\n .subsection 'Title of Subsection'\n .para\n   .\n   .\n   .\n..in;..cc end\n..pp;SYSPUB commands correspond to the component parts of your\ndocument.\nFor example, to start a new section, you specify\n.sp;     .section 'title of section'\n.sp;and SYSPUB produces a section heading which conforms to the layout\nstyle you are using.\nThe same is true for the other SYSPUB commands:\nSYSPUB eliminates the need to learn a\n..hw widely--accepted\nset of layout standards.\n..pp;SYSPUB eliminates the\n..hw re--numbering\nproblems caused by revisions.\nIt does the numbering for all of the above items,\nas appropriate to the layout you are using.\nIf you delete a section, or add a chapter, or change the order of subsections,\nthey are automatically\n..hw re--numbered\nthe next time you format your document.\nThe creative desire to add or delete information no longer causes\nadditional \"re-work\".\n..pp;With the simpler layouts, you don't need to use all of the SYSPUB commands.\nFor example, most small reports and papers do not have an index or a table\nof contents.\nHowever, with larger documents, such as users' guides and manuals, these\nare usually desired.\n..pp\nSYSPUB also has a number of\n..hw specific--purpose\nlayouts, including layouts for\ntheses which adhere to the style indicated in the University's\n..us Thesis Regulations and Guide\nbrochure, publications in the style defined in the\n..us Publication Manual of the\n..us American Psychological Association,\nand a layout for papers in the\n..hw two--column\nformat of IEEE\n..hw photo--offset\npublications.\n..pp;When you use SYSPUB, you are actually using a \"superset\" of the\nUniversity of Waterloo version of the SCRIPT text formatter, and all of the\ncapabilities of SCRIPT are available to you.\nSYSPUB doesn't do anything which you couldn't do yourself using SCRIPT; it\njust eliminates the need to learn everything about SCRIPT, and simplifies\na lot of tedious work.\nThe number of SCRIPT commands which you might need in addition to the SYSPUB\ncommands is very small\n(in most cases, the SCRIPT commands which leave a blank line,\ncentre a line, and underscore a word will be sufficient).\n.chapter 'Introduction'\n.section 'Selecting a Layout'\n..pp;The SYSPUB commands\nare stored in a special library which you must imbed at the beginning\nof your SCRIPT input file by placing the SCRIPT \"imbed\" control word\n..sp;     .im syspub layout=xxx\n..sp;before the first occurrence of any SYSPUB command (usually\nas the very first line in your file.\n.tabnum layouts\nIn place of the characters \"xxx\", you must specify one of the\n..ur layouts shown in Table &layouts..\n.tabbegin\n.boxon\n.table layouts 'Layouts'\n..sp;..bx;..sp\n..in +10 *\n..oo 1     report\nprovides the basic SYSPUB commands\n..sp;..oo 1     paper\nfor academic publications, term papers, etc\n..br;..oo 1     IEEE\nfor two-column IEEE photo-offset papers\n..sp;..oo 1     guide\nfor large papers, small manuals,\nuser's guides, etc\n..sp;..oo 1     manual\nfor large manuals, books, etc\n..sp;..oo 1     refman\nfor reference manuals\n..br;(not yet fully-implemented)\n..sp;..oo 1     thesis\nfor theses\n..br;..oo 1     APA3\n..oo 1     APA4\nfor theses in the APA style\n..sk\n..in -10 *;.boxoff\n.tabend\n..pp;The main features of each of the layouts are outlined in\n.tabnum layouts\n..ur Table &layouts..\nThis SYSPUB User's Guide was produced using\n..sp;..ur      .im syspub layout=&layout\n.tabbegin\n.boxon\n.table layouts 'Main Features of the Layouts'\n..sp;..bx;..sp;..fo no\n                                  R  P  G  M  R  T\n                                  E  A  U  A  E  H\n                                  P  P  I  N  F  E\n                                  O  E  D  U  M  S\n                                  R  R  E  A  A  I\n                                  T        L  N  S\n                                  ----------------\ntitle area or page                Y  Y  Y  Y  Y  Y\npreliminary sections                 Y  Y  Y  Y  Y\npreliminary sections start\n    new pages                              Y  Y  Y\ntable of contents, etc                  Y  Y  Y  Y\ndivisions of main body numbered      Y  Y  Y  Y  Y\nmajor divisions start new pages            Y  Y  Y\nappendices                           Y  Y  Y  Y  Y\nbibliography                         Y  Y  Y  Y  Y\nindex                                   Y  Y  Y  Y\n..fo\n.boxoff\n.tabend\n.section 'The Output Device and the Formatting Environment'\n..pp;SYSPUB assumes that the formatted document is to be produced on\n..ix 2 'page layout' 'dimensions'\n..ix 2 'page layout' 'left and right margins'\n8.5x11 pages with a 1.5-inch margin on the left and 1-inch margins on the\ntop, bottom, and right.\nIf the output device is a high-speed line printer, no special\n..ix 2 'page layout' printer\nprinter setup is necessary (aside from white paper and an upper- and\nlower-case print train).  If the output device is a typewriter terminal,\n..ix 2 'page layout' typewriter\nthe left margin of the typewriter should be set one-half inch in from\nthe left side of the paper.\n..pp;If you want the text of the publication to be double-spaced, specify\n..ix 2 'double-spacing'\nthe SCRIPT \".ds\" control word\n..us before |you imbed SYSPUB.\n..pp;There are several\n.footnote 'parameters'\n..us A caution to experienced SCRIPT users:\nThe names of these parameters may not be used\nas SCRIPT reference variables\nanywhere in your input file, nor may you use any SCRIPT reference\nvariables which start with the letters \"pub\".\n.footend\nwhich you may specify on the \".im SYSPUB\"\ncontrol word to control the formatting environment.\n.fignum params\n..ur For each of the parameters shown in Figure &params., the default\nvalue is the one at the top of the vertical list.\n.figbegin\n.boxon\n..fo no;..tr < ac > bc ( ab ) bb\n      <  >        <    >     <    >     <    >\npitch=|10|  sides=|one |  hy=|on  |  ju=|on  |\n      |12|        |both|     |full|     |half|\n      (  )        (    )     |user|     |off |\n                             |off |     (    )\n                             (    )\n..sp\n   <            >     <               >\npl=|66, if SIX  |  ll=|60, if pitch=10|\n   |88, if EIGHT|     |72, if pitch=12|\n   | n          |     | n             |\n   (            )     (               )\n..sp\n    < >            <      >         < >\nlpi=|6|    pagenum=|bottom| headnum=|4|\n    |n|            |top   |         |n|\n    ( )            (      )         ( )\n.figure params 'Parameters To Be Used With \".im syspub\"'\n..tr\n.boxoff\n.figend\n..pp;SYSPUB assumes that the output is being produced on a 10-pitch device\n(10 characters to the horizontal inch).\nIf you are using a 12-pitch output device, specify \"pitch=12\".\n..ix 2 'output' 'characters per inch'\n..pp;If the final copy of your publication is to be reproduced on both\n..ix 2 output 'on both sides of the page'\nsides of the page, the \"sides\" parameter will allow you to specify this.\n..pp;The \"hy\" parameter controls hyphenation:  \"on\" results in automatic\n..ix 2 hyphenation\nhyphenation, \"full\" is the same as \"on\" but also imbeds the hyphenation\nexception dictionary for you, \"user\" will hyphenate only at hyphen points\ndefined in the input text (such as in compound words), and \"off\" causes\nhyphenation not to be performed at all.\n..pp;The \"ju\", \"pl\", and \"ll\" parameters\n..ix 2 output 'line length';..ix 2 output 'page length'\n..ix 2 output justified\nhave the same function as their SCRIPT control-word\nequivalents.\n..pp;By default, SYSPUB always numbers pages at the bottom of the pages;\n..ix numbering pages 'at the top'\nthe \"pagenum\" parameter provides a way of having SYSPUB number the pages\nat the top, except for preliminary pages and the first page of\neach major division of the main body.\n..pp;For those layouts which cause the various headings to be numbered,\n..ix 2 numbering headings\nyou can control the level to which headings are numbered by specifying the\n\"headnum\" parameter.\nBy default, all levels of headings from the first level (chapters and\nappendicies) down to the fourth level (subsubsections) are numbered by\nthose layouts.\nFor example, specifying \"headnum=1\" will cause chapters and appendices to\nbe numbered, but not sections, subsections, or subsubsections.\n.section 'Planning Your Publication'\n..pp;SYSPUB can be very useful while you are still at the stage of\nplanning the general organization of your publication.\nYou can enter the SYSPUB commands to create the major divisions\nof the publication, and then\nformat and print this first-draft \"outline\" document.\nCompleting the publication then becomes a process of \"filling in the\nblanks\".\n.section 'Using SCRIPT'\n..pp;If you are using SCRIPT under CMS, you will probably have to \"define\nstorage\" to at least \"400K\".\nIf you are using the BATCH Service, you will have to change your\nEXEC card to\n..sp;     //  EXEC  SCRIPT,SIZE=200K\n..sp;Depending on the size of your publication, you might not need all\n200K, but it is safer to start high and work down (the printout will tell\nyou how much was actually used).\n..pp;If you are specifying the \"hy=full\" parameter, you should add\n44K to the above figures.\n.section \"Using the SYSPUB User's Guide\"\n.pp;If you are using SYSPUB for the first time, you might find it most\nproductive to adopt a step-by-step \"workbook\" approach to using this\nUser's Guide.\nFirst, select the layout which you suspect is most appropriate for the\npublication you are going to prepare,\nand read up to the end of the chapter which describes that layout.\nSkim over the rest of the User's Guide so that you are aware of\nthe additional capabilities of SYSPUB.\nWhile you are constructing your publication, treat the entire User's Guide\nas a reference manual.\n.chapter 'The REPORT Layout'\n..ix 2 layouts REPORT\n..pp;The REPORT layout is intended for small publications.\nIt provides the basic SYSPUB commands, as\n.tabnum layouts\n..ur shown in Table &layouts..\n.fignum report\n..ur Figure &report shows an example of the organization of the input\nfile for a report.\n.figbegin;.boxon\n .im syspub layout=report\n .titlepage\n THIS IS THE TITLE OF THE REPORT\n .sk 2\n Name of Author\n .chapter 'Introduction'\n text for this chapter\n .chapter 'Hypothesis'\n text\n .chapter 'Method'\n text\n .chapter 'Observations'\n text\n .chapter 'Conclusions'\n text\n.figure report 'Sample Input File Using The REPORT Layout'\n.boxoff;.figend\n.tabbegin\n.boxon\n.table layouts 'REPORT Layout Commands'\n..tb set !;..tb 19\n..ce 1\n .im syspub layout=report\n..sp;..bx;..sp\n..hy user;..co;..ju no\n .titlepage!to define the start of the title page\n .chapter!to create first-level divisions\n .section!to create second-level divisions\n .subsection!to create third-level divisions\n .subsub!to create fourth-level divisions\n .para!to start a new paragraph\n..sp; .footnote, .footend\n!to define a footnote\n..sp;..of 19\n .quote!to define a multiple-line quotation\n..sp;..of 19\n .point!to create up to three levels of lists of numbered points\n..sp;..of\n .tabnum, .tabbegin, .table, .tabend\n..of 19;!to generate a table number, start the table, print the title of\nthe table, and terminate the table\n..sp;..of\n .fignum, .figbegin, .figure, .figend\n..of 19;!similar to tables, but for figures\n..sp;..of\n .boxon, .boxoff\n..of 19\n!to generate a box around text or a table or a figure\n..of\n..tb set\n.boxoff\n.tabend\n.section 'The Title of the Publication'\n..ix 2 'title area'\n..pp;The publications for which the REPORT layout is intended\ndo not have a formal Title Page.\nInstead, they have a \"title area\" at the top of the first page, and the\nbody of the report begins on this page, beneath the title area.\nThe SYSPUB command\n..sp;     .titlepage\n..ix 'titlepage'\n..sp;is used to start the formatting of the title area.\nIt is followed, on the next input line, by the title of the publication\n(in capital letters and\non as many input lines as are needed),\nand by whatever additional text you wish to appear in the title area.\nDo not attempt to centre the text on these input lines;\nSYSPUB will do that for you, automatically, for all the lines of text\nwhich appear in the title area.\n.section 'Starting a Chapter'\n..ix 2 headings chapter\n..pp;The first-level divisions of the \"main body\" are called \"chapters\",\nand are created by using the SYSPUB command\n..sp;     .chapter 'title'\n..ix chapter\n..sk;The chapter title will be centered and printed in capital letters.\n.section 'Starting a Section'\n..ix 2 headings section\n..pp;The second-level divisions of a REPORT layout are called \"sections\".\nSections are defined by using the SYSPUB command\n..sp;     .section 'title'\n..ix section\n..sp;where \"title\" is the title of the section.\nThe section title will be printed in uppercase and underscored.\n.subsection 'Starting a Subsection'\n..ix 2 headings subsection\n..pp;A section may be broken into third-level divisions called\n\"subsections\" by using the SYSPUB command\n..sp;     .subsection 'title'\n..ix subsection\n..sp;where \"title\" is the title of the subsection.\nThe subsection title will be printed as entered, underscored.\n.subsub 'Starting a Subsubsection'\n..ix 2 headings subsubsection\n..pp;If necessary, subsections may be broken into\n\"subsubsections\" by using the SYSPUB command\n..sk;     .subsub 'title'\n..ix subsub;..sk\nThe title will be printed exactly as entered.\n.section 'Starting a Paragraph'\n..ix 2 paragraphs\n..pp;The \".para\" command may be used to start a paragraph.\nIt is used as shown below:\n..sp;..cc 4\n     .para\n     text of paragraph\n     .para\n     text of next paragraph\n..pp;By default, the \".para\" command indents each paragraph by putting\n3 blanks at the start of the first line of text following the \".para\"\ncommand.\nThis can be changed by specifying an \"alternate paragraph indent\" as the\noperand of the \".para\" command.\nFor example, if\n..sp;     .para 5\n..sp;is specified, then the \".para\" command will indent all paragraphs\n5 spaces, from this point on and until the \"paragraph indent\" is re-set\nby another \".para\" command with an \"alternate paragraph indent\" specified.\n.section 'Footnotes'\n..ix 2 footnotes\n..pp;Two SYSPUB commands are provided for the creation of footnotes.\nThey are used in the manner indicated below:\n..sp\n     text of the sentence containing the\n     .footnote 'word'\n     text of the footnote\n     .footend\n     to be referenced, followed by\n     the rest of the sentence, if any.\n..sp;For\n.footnote 'example,'\nThis is a sample footnote.\n.footend\nthe first footnote at the bottom of this page was created by\n..sp;..cc begin\n     For\n     .footnote 'example,'\n     This is a sample footnote.\n     .footend\n     the first footnote at the bottom ...\n..cc end\n.subsection 'Starting the Footnote'\n..sp;     .footnote 'word'\n..ix 'footnote'\n..pp;The \"word\" to be referenced will be printed on the output line\nand the footnote number\nwill be generated automatically and printed\nimmediately behind\n.footnote 'it.'\nIf the output is being produced in 'OFFLINE' mode, the footnote numbers\nare printed as superscripts.\nIf the output is being produced in 'ONLINE' mode, the footnote numbers are\nprinted as normal numbers, in parentheses.\nThe 'ONLINE' or 'OFFLINE' mode is determined by the SCRIPT options\nOFFLINE (or PRINTER or DISK) and ONLINE (or MEMO).\nFor more information, see Appendix A.\n.footend\n..pp;If any punctuation is to come between the \"word\" and the footnote\nnumber, it should be specified as part of the first-operand\n\"word\" to be referenced.\nIf any punctuation is to be placed\nimmediately after the footnote number, it must be specified\nin quotes as the second operand of the \".footnote\" command, as in:\n..sp;     .footnote 'word' 'punctuation'\n..pp;Because the semicolon is the default SCRIPT\n..us control word separator,;it is difficult to cause a\nsemicolon to be accepted as part of either operand of the \".footnote\"\ncommand.  In fact, an error may result if you do not use the SCRIPT \".cw\"\nCONTROL WORD SEPARATOR control word to nullify the control word separator\ncharacter, as shown below.\n..sp;..cc 3;     .cw\n     .footnote 'word' ';'  (or .footnote 'word;')\n     text of the footnote\n..sp;The \".footnote\" command will reset the control word separator back\nto the semicolon before it returns to process the text of the footnote.\n.subsection 'Underscoring the Word to be Referenced'\n..pp;If you want the \"word\" operand of the \".footnote\" command to\nbe underscored, do it as follows:\n..sp;     .footnote '.us word|'\n..sp;The vertical bar at the end is essential.\n.subsection 'Terminating the Footnote'\n..sp;     .footend\n..ix 'footend'\n..pp;The \".footend\" command must follow the text of the footnote.\nIf the footnote is being used in reference to something in the middle of\na sentence, the rest of that sentence must follow the \".footend\" command.\n.section 'Quotations'\n..ix 2 quotations\n.pp;The material in this section pertains only to multiple-line\n(or \"block\") quotations;\n\"in-line\" material in quotes (like the preceding words \"in-line\")\nshould be entered as normal text, without using the\nSYSPUB commands described below.\n..pp;To begin the quotation, use the SYSPUB command\n..sp;     .quote begin\n..ix 'quote' 'begin'\n..sp;On the next input lines, enter the text of the quotation.\nTo terminate the quotation, use the SYSPUB command\n..sp;     .quote end\n..ix 'quote' 'end'\n..sp;For example, the input sequence\n..sp;..cc begin\n     This is the last sentence preceding the quotation;\n     to start the quotation, use \".quote begin\".\n     .quote begin\n     This is the quoted material.\n     Note that it is entered without quotes, and is\n     automatically indented and single-spaced by SYSPUB.\n     .quote end\n     To terminate the quotation use \".quote end\";\n     this is the first sentence after the quotation.\n..cc end;..sp;produces:\n..sp;..cc begin;This is the last sentence preceding the quotation;\nto start the quotation, use \".quote begin\".\n.quote begin\nThis is the quoted material.\nNote that it is entered without quotes, and is\nautomatically indented and single-spaced by SYSPUB.\n.quote end\nTo terminate the quotation, use \".quote end\";\nthis is the first sentence after the quotation.\n..cc end\n.subsection 'Footnotes Inside Quotations'\n..ix 2 footnotes 'inside quotations'\n..pp;If you want to footnote a \"block\" quotation, the SYSPUB commands\nfor the footnote should be used\n..us inside;those for the quotation, as shown in the following example:\n..sp;..cc begin\n     .quote begin\n     text of quotation,\n     up to but not including the last\n     .footnote 'word'\n     text of footnote ...\n     .footend\n     .quote end\n..cc end\n.section 'Lists of Points'\n..ix 2 points\n..pp;It is often appropriate to present a sequence of information as a\nnumbered list of points.\nThe SYSPUB commands \".point begin\", \".point\", and \".point end\"\nmay be used to generate such a numbered list.\n.subsection 'Starting a List of Points'\n     .point begin\n..ix 'point' 'begin'\n..pp;The SYSPUB command \".point begin\" must immediately precede the\ninput line containing the text for the first\npoint in a list.\n.subsection 'Continuing the List of Points'\n     .point\n..ix point\n..pp;The SYSPUB command \".point\" is used to terminate the text of the\npreceding point and is followed by the\ninput line containing the\ntext of the next point.  The number of the point\nwill be one greater than the number of the preceding point.\n..pp;For example, the input sequence\n..sp;..cc begin\n     This is the last sentence before the list of points;\n     now comes the input to create the list of points.\n     .point begin\n     This is the text for the first point.\n     .point\n     This is the text for the next (and last) point.\n     .point end\n..cc end;..sp;produces:\n..sp;This is the last sentence before the list of points;\nnow comes the input to create the list of points.\n.point begin;This is the text for the first point.\n.point;This is the text for the next (and last) point.\n.point end\n.subsection 'Points Within Points'\n..ix 2 points 'multiple levels'\n..pp;SYSPUB supports three levels of points.\nThe \".point\" command can also be used to begin a second-level point if\nyou are already in the middle of a list of points.\n..sp;     .point 2\n..ix point '2'\n..sp;will cause SYSPUB to begin creating second-level points, numbered\nalphabetically.\nTo return to the next point at the first level, specify\n..sp;     .point 1\n..ix point '1'\n..sp;and follow it with the text of the next first-level point.\n..pp;If you are creating second-level points and want to start creating\nthird-level points, then specify\n..sp;     .point 3\n..ix 'point' '3'\n..sp;Third-level points are numbered as lower-case roman numerals.\nTo return to second-level points, specify\n..sp;     .point 2\n..sp;To return to first-level points from third-level points, specify\n..sp;     .point 1\n.subsection 'Terminating the List of Points'\n     .point end\n..ix 'point' 'end'\n..pp;The SYSPUB command \".point end\" is used after the text of the last\npoint, to return from the point-formatting mode to the \"normal text\" mode.\n.subsection 'Altering the Numbering Style for Lists of Points'\n..ix 2 numbering points\n..pp;By default, SYSPUB numbers first-level points using arabic numerals,\nsecond-level points using lower-case alphabetics, and third-level points\nusing lower-case roman numerals.\nYou can change this style by using the \"set\" operand of the SYSPUB\n\".point\" command.  For example,\n..sp;     .point set 1 a i\n..ix 'point' 'set'\n..sp;will set the point-numbering style to the defaults just described.\n..sp;     .point set i a 1\n..sp;will cause first-level points to be numbered using lower-case\nroman numerals (\"i\"), second-level points to use lower-case alphabetics (\"a\"),\nand third-level points to use arabic numerals (\"1\").\n..pp;Operands other than \"1\", \"a\", and \"i\" are valid.\nA \"b\" operand causes SYSPUB to generate bullets for all points at the\nlevel for which it is specified.\n(If the output is being produced at an on-line terminal, asterisks are\ngenerated instead of bullets.)\nIf a character other than one of \"1\", \"a\", \"i\", or \"b\" is specified,\nthen that character will be used in a fashion similar to that for \"bullets\".\n.subsection 'Limitations'\n..pp;There are a few things to keep in mind when using the above\npoint-generating SYSPUB commands.\n.point begin\nThe \"point\" commands\nautomatically indent the left and right margins, so that\nthe text of the points are \"set in\" from the main text.\nTherefore, if you wish to use the SCRIPT \".in\" INDENT control word in a\npoint, use the additive rather than the absolute form of the arguments.\n.point\nIt is possible to use \".point end\" to return from \"point mode\" temporarily\n(for example, to explain something about the preceding or following\npoints) and then resume the \"point mode\" without interrupting the\nnumbering sequence of the list of points.\n..ix 2 numbering points\nIn this case, after the text for the\n\"normal mode\" has been specified, the list of points can be continued\nby using the SYSPUB command \".point\" instead of \".point begin\".\n.point end\nFor example, the text of the above point was terminated with \".point end\",\nand the text of the next point was started with \".point\" rather than\nwith \".point begin\".\n.point\nIf you want to alter the formatting environment for all the points\n..ix 2 points 'altering the format'\ngenerated between the\n\".point begin\" and \".point end\" commands, do it immediately\nbefore the \".point begin\" command.  For example, if the normal formatting\nmode is \"double-spaced and right-justified\", but you want the text of the\npoints to be single-spaced and not right-justified, you can specify\n..sp;     ,ss;.ju no;.point begin\n..sp;and then the text for the first point.\nThe \".point end\" command will restore the default formatting parameters.\n(The \",ss\" above is a \"no-break single space\" control word;\nthe comma is established as the no-break contro word indicator\nwhen you imbed SYSPUB -- see Appendix A for more details).\n.point end\n.section 'Boxes'\n..ix 2 boxes\n..ix boxon;..ix boxoff\n..pp;The two SYSPUB commands \".boxon\" and \".boxoff\" may be\nused to start and terminate a box.\nFor example,\n..sp;..cc 5\n     .boxon\n     This text is surrounded by a box which\n     was created by the \".boxon\" and\n     \".boxoff\" commands.\n     .boxoff\n..sp;produces:\n..cc begin\n.boxon\nThis text is surrounded by a box which\nwas created by the \".boxon\" and\n\".boxoff\" commands.\n.boxoff\n..cc end\n..pp;The conditions which must be adhered to and the restrictions which\nexist within the range of \".boxon\" and \".boxoff\" are defined below.\n.point begin\nThe left side of the box will be generated one position to the right of\nthe current SCRIPT \".in\" INDENT value.  The right side of the box\nwill be generated in the last position of the output line, as defined\nby the current value of the SCRIPT \".ll\" LINE LENGTH value\nmodified by the current \"right-indent\" value of the SCRIPT \".in\"\nINDENT control word.\n.point;You may use the SCRIPT \".bx\" control word to create \"horizontal\nlines\" within the range of \".boxon\" and \".boxoff\".\n.point;If you wish to use the SCRIPT \".in\" indent control word\n..ix 2 boxes 'indenting inside'\nwithin the range of \".boxon\" and \".boxoff\", then use\nthe additive rather than the absolute form of the arguments; for example,\nuse \".in +5\" rather than \".in 5\".  This is necessary because of the SCRIPT\n\".in\" control words issued by \".boxon\" and \".boxoff\":\n..sp;..cc 2\n     .boxon  issues  ..in +3 -3\n     .boxoff issues  ..in -3 +3\n.point\nThe SYSPUB \".boxon\" and \".boxoff\" commands, by themselves, make no\nattempt to keep the box from being split over a page boundary.\nIf you do not want it split\nacross a page boundary,\nthen use the SCRIPT \".cc\" or \".fk\" or \".fb\"\ncontrol words to ensure that the box is contiguous.  If you use\n\".fb\" or \".fk\", or \".cc\" in its \"begin/end\" form to do this,\ndo not rely on the values of any of the SCRIPT\nsystem reference variables such as \"&syspage\" or \"&sysline\" within the\nrange of \".boxon\" and \".boxoff\", as there is no\nguarantee that the box will print in the position in which it was\nformatted; use \".cc\" with a numeric argument instead.\n.point end\n.section 'Tables'\n..ix 2 tables\n..pp;Turabian \u00dd1973:159\u00a8 makes an excellent statement concerning\nthe attention you must give to tables if you are going to use them\neffectively:\n.quote begin\nIf tables are to serve satisfactorily the purpose for which they are made,\nthey not only must be accurately compiled but must be so arranged that\nthey can be easily read and interpreted.\nTo these ends careful spacing, ruling, arrangement of headings, and,\nfinally, the placing of the tables\nwith respect to the text all contribute.\n.quote end\n..pp;The following SYSPUB commands\nare used to construct tables.\nThe SYSPUB command \".tabnum\" is used to generate the table number.\nThe SYSPUB command \".tabbegin\" is used to start the definition of the text\nand SCRIPT control words which create the table.\nThe SYSPUB command \".table\"\nis used to print the table number and title; and the SYSPUB command\n\".tabend\" is used to end the definition of the table and to cause it to be\npositioned\nfor printing.  If the table will fit in the position at which you have\ndefined it, it will do so.  Otherwise, SCRIPT will promote it to another\npage (usually, the next page).\nTo give you a better idea of how these commands are used, consider the\nfollowing example;\nthe commands themselves are described in more detail following the example.\n.subsection 'Example of a Table'\n..pp;Assume that we now wish to make our\nfirst reference to a particular table.\nTo begin, we will generate \"the next available table number\" and\nassign it to the reference variable \"example\".\n..sp;     .tabnum example\n..sp;Then, we can use the reference variable \"example\" to make\nthe reference to the table.\n..sp;..cc 2\n     .ur As can be seen from Table &example.,\n     the quality of ... (rest of sentence).\n..sp;which will actually print as\n..sp;..in 5 -5;.tabnum example\n..ur As can be seen from Table &example.,\nthe quality of ... (rest of sentence).\n..sp;..in 0;Then, at the end of the paragraph in which that sentence\nappears, we can specify the text and the SCRIPT control words\nand SYSPUB commands\nrequired to generate, position, and print the table itself.\n..sp\n     .tabbegin\n     .table example 'This is a Sample Table'\n     first line of table\n     second line of table\n      .\n      .\n      .\n     last line of table\n     .tabend\n..pp;The table which the above commands create is printed below.\nThe box around the table is\n..us not;generated by the above commands; an explanation of how the box\nwas generated is given later in this chapter.\n.tabbegin\n.boxon\n.table example 'This is a Sample Table'\nfirst line of table\nsecond line of table\n .\n .\n .\nlast line of table\n.boxoff\n.tabend\n.subsection 'The Table Number'\n..ix 2 numbering tables\n..pp;A table should be positioned as soon as possible\n..us after\nthe first reference to it in the text.  Since tables must be numbered\nin ascending order throughout the publication, the SYSPUB command\n..sp;     .tabnum refname\n..ix tabnum\n..sp;enables you to generate \"the next available number\"\nfor a table and assign that number to the reference variable \"refname\",\nand then use \"refname\" to refer to the table in the text, before the\ntable is defined, constructed, and printed.\n.subsection 'Positioning the Table'\n..pp;It is desirable to print the table itself as soon as possible after\nit has first been referenced in the text.\nTherefore, at the end of the paragraph which contains the first reference\nto the table, the SYSPUB commands and SCRIPT control words required to\ndefine the table should be inserted, starting with the SYSPUB command\n..sp;     .tabbegin\n..ix tabbegin\n..sp;The \".tabbegin\" command causes single-spacing to be in effect\nand places you in unformatted mode.\nThe SYSPUB \".tabend\" command described below restores the\nformatting mode and the \"line-spacing\"\nto whatever was in effect before \".tabbegin\" was\nencountered.\n.subsection 'The Title of the Table'\n..ix 2 headings table\n..pp;The \".tabbegin\" command should be followed by the SYSPUB command\n..sp;     .table refname 'title of table'\n..ix table\n..sp;which prints the word \"Table\",\nthe value of \"refname\" (the table number), the title of the table, and\nleaves you in \".fo no\" mode.\nIt should then be followed by the text and SCRIPT control words needed to\nconstruct the table (or to leave space in which to paste in the table, if\nthat is how it is to be done).\n.subsection 'Terminating the Table'\n..ix 2 tables 'full-page'\n..pp;To terminate the table, the SYSPUB command\n..sp;     .tabend\n..ix tabend\n..sp;must be inserted next.\nIt causes the table to be positioned and printed,\nand restores the formatting environment for normal text.\nEvery attempt will be made to\nkeep the table contiguous on one page (unless the table requires more than\none page).\n..pp;If you specify this command in the form\n..sp;     .tabend page\n..sp;then SYSPUB will add the number of blank lines required to\nresult in a full-page table.\n..ix 'tabend' 'page'\n..ix 'figend' 'page'\n.subsection 'Limitations'\n..pp;You cannot define a footnote within the range of a table.\nAlso, don't use the SCRIPT \".ix\" index control\nword within a table; it will most likely result in the wrong page number\nin the index, since the table will probably print some other than where\nwhere it was formatted.\n.section 'Figures'\n..ix 2 figures;..ix 2 figures . 'see also \"tables\"'\n..pp;The considerations which must be given\nto tables also apply to figures.\nThe SYSPUB commands for figures\nare exact parallels of those defined above for tables, with the\nexception that the \".figbegin\" command leaves you in \".fo no\" mode.\nFor example,\n.fignum sampfig\n..sp;..cc 12\n     .fignum sampfig\n     .figbegin\n     first line of figure\n     second line of figure\n      .\n      .\n      .\n     last line of figure\n     .figure sampfig 'This is a Sample Figure'\n     .figend\n..ix fignum;..ix figbegin;..ix figure;..ix figend\n..sk;..ur produces Figure &sampfig below.\nNote that the text and SCRIPT control words\nwhich define the figure are placed\n..us before;the SYSPUB \".figure\" command, whereas,\nfor a table, they are placed\n..us after;the \".table\" command.\n.figbegin\n.boxon\nfirst line of figure\nsecond line of figure\n .\n .\n .\nlast line of figure\n.figure sampfig 'This is a Sample Figure'\n.boxoff;.figend\n..sp;..in 0;..fo\n.section 'Calling Tables or Figures by Some Other Name'\n..ix 2 tables 'calling them something else'\n..pp;If you don't need to use both tables and figures in your\npublication, you can make use of the\n..us capabilites\nof the SYSPUB commands for tables and figures to create other\nentities.\n..pp;For example, if your publication had a number of \"examples\", and\nyou wanted to have them handled the same way SYSPUB handles tables\nand figures, you could instruct SYSPUB that your \"figures\" are\nreally \"examples\", by specifying\n..sp;     .sr pubFIhdr = 'Example'\n..sp;immediately after you imbed SYSPUB and before any of the SYSPUB\ncommands for the main body of the publication.\nYou would still use the SYSPUB commands for \"figures\", but they would\nall be annotated as \"examples\" in the output.\n..pp;Similarly, if you wanted tables to be called \"illustrations\", you\ncould do so by specifying\n..sp;     .sr pubTAhdr = 'Illustration'\n.section 'Putting a Box Around a Table or Figure'\n..ix 2 boxes 'around a table or figure'\n..pp;If it is appropriate to draw a box around a table or figure\n(or whatever you are calling them)\nto set it off, the two SYSPUB commands \".boxon\" and \".boxoff\" may be\nused to create the box.  They were used, for example, to put the\n..ur box around Table &example..\nThe \".boxon\"\n..ix boxon;command was placed immediately after the \".tabbegin\"\ncommand, and the \".boxoff\"\n..ix boxoff;command was placed immediately before the \".tabend\" command.\n.chapter 'The PAPER Layout'\n..ix 2 layouts PAPER\n..pp;The PAPER layout provides all of the commands available with REPORT,\nbut in a layout style more suited\nto small research publications, technical papers, or term papers.\nThe various levels of divisions of the \"main body\"\nare numbered (such as \"1.2\" for the second \"section\" in the first \"chapter\").\n.tabnum layouts\n..ur PAPER also provides the additional commands described in Table &layouts..\n.tabbegin;.boxon\n.table layouts 'PAPER Layout Commands'\n..ce 1\n .im syspub layout=paper\n..sp;..bx;..sp\n..co;..ju no\n..tb set !;..tb 19\n..of 19\n .prelim!for preliminary material,\nsuch as an abstract or acknowledgement\n..br;..of 19\n .appendix!to create appendices\n..br;..of 19\n .bibliography!to start a bibliography\n..br;..of 19\n .bib!to start a bibliographic entry\n..of;..tb set\n.boxoff;.tabend\n.section 'Preliminary Material'\n..ix 2 'preliminary sections'\n..pp;Any \"preliminary\" material which the paper requires\nmay be generated by using the SYSPUB command\n..sp;     .prelim 'title'\n..ix prelim\n..pp;The two most obvious uses of the \".prelim\" command are to generate\n\"abstract\" and \"acknowledgements\" material, such as\n..sp;     .prelim 'Abstract'\n..sp;followed by the text of the abstract, and\n..sp;     .prelim 'Acknowledgements'\n..sp;followed by the text of the acknowledgements.\n.section 'Starting an Appendix'\n..ix 2 appendixes\n..pp;An appendix is generated in exactly the same way as a chapter, by\nusing the SYSPUB command\n..sp;     .appendix 'title'\n..ix appendix\n.section 'The Bibliography'\n..ix 2 bibliography\n..pp;The SYSPUB command\n..sp;     .bibliography\n..ix bibliography\n..sp;starts the formatting of the bibliography.\nIf the word \"BIBLIOGRAPHY\" is not an appropriate header for the\nbibliography, then use\n..sp;     .bibliography 'alternate header'\n..sp;where \"alternate header\", for example, might be something\nlike \"Sources Consulted\".\n.subsection 'Starting a Bibliographic Entry'\n..ix 2 bibliography entries\n..ix bib\n..pp;Each of the bibliographic entries is started with the SYSPUB command\n..sp;     .bib\n..sp;If you do not have a style to which you must adhere, then\nit is suggested that the following general form be used to enter the text\nfor the bibliographic entry.\n..sp;..cc 4\n     .bib\n     last name of author, first name, initials.\n     .us title of reference.\n     place of publication:  publisher, year.\n..pp;You do not need to specify any SCRIPT control words for the\nformatting of the bibliographic entries;\nthe \".bib\" command does that for you (see the Bibliography\nat the end of this User's Guide for an example of the formatting).\n..pp;In order to keep the text for a bibliographic entry on one page,\nSYSPUB internally places a SCRIPT \".cc\" begin/end sequence around the\ntext of the bibliographic entry.\nThis means that you cannot use \".cc\", \".cp\", \".fk\", \".fn\", or \".fb\" in\nconjunction with the SYSPUB commands for the bibliography.\n.subsection 'Terminating the Bibliography'\n..ix 'bib end'\n..pp;The text of the\n..us last\nbibliographic reference must be followed by the SYSPUB command\n..sp;     .bib end\n.subsection 'Referencing Bibliographic Entries'\n..ix 2 bibliography references\n..pp;In the main body of the text,\nbibliographic entries are referenced simply by specifying the\nauthor's last name followed by the date of the publication and the\nthe appropriate page number(s) in the publication, as suggested by\nTurabian\u00dd1973:182-183\u00a8.\n.fignum egbibli\n..pp;..ur The example in Figure &egbibli is taken from the Bibliography\nfor this SYSPUB User's Guide.\nFor an alternate method, see Appendix B.\n.figbegin;.boxon;..li >\n.bibliography\n.bib\n.us Introduction to SCRIPT.\nWaterloo:\nUniversity of Waterloo Computing Centre, 1977.\n.bib\n.us MLA Style Sheet.\n2nd ed.  New York:\nModern Language Association of America, 1970.\n.bib end\n>>li .\n.figure egbibli 'Input For a Sample Bibliography'\n.boxoff;.figend\n.section 'Creating Additional Pages After the Main Body'\n..pp;The \".prelim\" command can also be used to create additional pages\nafter the main body of the publication.\n.chapter 'The GUIDE Layout'\n..ix 2 layouts GUIDE\n..pp;With layouts lesser than GUIDE, SYSPUB does not produce a Table of\nContents, and hence is somewhat less expensive to use.\nWith the GUIDE layout (or greater), SYSPUB includes the titles of\npreliminary pages, chapters, appendices, sections, subsections, and\nsubsubsections in the Table of Contents, together with the titles\nspecified by the commands introduced in this chapter.\nIt also constructs a List of Tables and a List of Figures, using the\ntitles specified by the SYSPUB commands which create tables and figures.\n..pp;The GUIDE layout is intended for papers which are large enough to\nwarrant a Table of Contents and/or an Index, or for other medium-sized\ndocuments which do not warrant starting each chapter on a new page.\nIt is assumed that there will be at least one section created by the\n\".prelim\" command (subsequent occurrences do not start new pages),\nfollowed by one or more sections created by \".chapter\" (only the first\nchapter will begin on a new page), followed by zero or more sections\ncreated by \".appendix\" (each appendix starts on a new page),\n..us possibly;followed by the additional commands introduced\n.tabnum layouts\n..ur in Table &layouts..\n.tabbegin;.boxon\n.table layouts 'GUIDE Layout Commands'\n..ce 1\n .im syspub layout=guide\n..sp;..bx;..sp\n..co;..ju no\n..tb set !;..tb 19\n .index!to print an index\n .contents!to print a table of contents\n .tables!to print a \"list of tables\"\n .figures!to print a \"list of figures\"\n..tb set\n.boxoff;.tabend\n.section 'The Index'\n..ix 2 index entries\n..pp;If it is appropriate that your publication contain an index, then\nyou should use the SCRIPT \".ix\" control word\nto create the index entries, as they occur in the text\nof your publication.\nIf you do not want your publication to have an index, ignore this section.\n.subsection 'Printing the Index'\n..ix 2 index\n..pp;At the end of the main body of the publication,\nuse the SYSPUB command\n..sp;     .index\n..ix index\n..sp;to cause the index to be printed.  The word \"INDEX\" will be\ncentred at the top of the first page of the index.\n.subsection 'Publications With More Than One Index'\n..ix index 'more than one index'\n..pp;If it is appropriate that your publication contain more than one\nindex (the SCRIPT \".ix\" control word allows you to construct up to nine\nconcurrently), then each index can be printed by specifying the SYSPUB\ncommand\n..sp;     .index n 'title'\n..sp;once for each index, where \"n\" is the index number (from 1 to 9)\nand \"title\" is the title to be centred at the top of the first page of\nindex \"n\".\n..pp;Note that this form of the \".index\" command may also be used to\nspecify an alternate title for a publication which contains only one\nindex, by specifying\n..sp;     .index 1 'title'\n.subsection 'Printing the Index in Multiple-Column Mode'\n..ix 2 index 'multiple-column output'\n..pp;By default, the index will be printed in single-column mode, the\nsame as the rest of the publication.\nIf your index entries are short, you may wish to have them printed in\nmore than one column per page.\nFor example,\n..sp;     .index n 'title' 2\n..sp;will cause the index to be printed in two columns.\nYou can specify a number larger than \"2\" for this third operand, but you\nmay run into problems unless you have used the \"ll\" parameter to specify\na line length greater than the default when you imbedded SYSPUB.\n.section 'The Table of Contents'\n..ix 2 'contents'\n..ix 2 headings 'table of contents'\n..pp;The Table of Contents includes the titles and page numbers\nof any titles generated\nby the SYSPUB commands \".prelim\", \".part\", \".chapter\", \".appendix\",\n\".section\", \".subsection\", \".subsub\",\n\".bibliography\", and \".index\".\nFor chapters and appendices, the chapter and appendix numbers are printed\nto the left of the titles.\n.subsection 'Printing the Table of Contents'\n..ix contents\n..pp;The \"contents\" command causes the printing of the Table of Contents.\nIt is of the form\n..sp;     .contents 'alternate header'\n..sp;where \"alternate header\" is any character string you wish\nto use as the title of the Table of Contents.  If you do not specify an\n\"alternate header\", then the header \"TABLE OF CONTENTS\" will be used.\n..pp;Unless you have tables or figures, \".contents\" will be the last SYSPUB\ncommand in your input file.\nThe resulting Table of Contents pages will be numbered in lower-case\nroman numerals, starting one greater than the last \"preliminary page\"\nbefore the main body.\nYou will have to remove these Table of Contents pages from the end of\nthe output and insert them in their proper place.\n.subsection 'Printing the List of Tables'\n..ix 2 tables 'list of tables'\n..ix 2 headings 'list of tables'\n..ix tables\n..pp;If the publication contains tables, the SYSPUB command \".tables\"\nshould be used to cause the printing of the List of Tables.\nIt is of the form\n..sp;     .tables 'alternate header'\n..sp;where \"alternate header\" is any character string you wish\nto use as the title of the List of Tables.  If you do not specify an\n\"alternate header\", then the header \"LIST OF TABLES\" will be used.\n.subsection 'Printing the List of Figures'\n..ix 2 figures 'list of figures'\n..ix 2 headings 'list of figures'\n..ix figures\n..pp;If the publication contains figures, the SYSPUB command\n\".figures\" should be used to cause the printing of the List of Figures.\nIt is of the form\n..sp;     .figures 'alternate header'\n..sp;where \"alternate header\" is any character string you wish\nto use as the title of the List of Figures.  If you do not specify an\n\"alternate header\", then the header \"LIST OF FIGURES\" will be used.\n.chapter 'The MANUAL Layout'\n..ix 2 layouts MANUAL\n..pp;The MANUAL layout is intended for documents which are large enough to\nwarrant a formal title page and a number of preliminary pages.\nIf the document is large enough,\nchapters may be grouped together in \"parts\".\nPreliminary pages, parts, chapters, and appendices\neach start on a new page.\n.tabnum layouts\n..ur The additional SYSPUB commands are shown in Table &layouts..\n.tabbegin;.boxon\n.table layouts 'MANUAL Layout Commands'\n..ce 1\n .im syspub layout=manual\n..sp;..bx;..sp\n..co;..ju no\n..tb set !;..tb 19\n .part!to group chapters into \"parts\"\n..tb set\n.boxoff;.tabend\n.section 'The Title Page'\n..ix 2 'title page'\n..pp;With the MANUAL layout, the text which follows the \".titlepage\" command\nwill appear on a \"title page\" by itself.\nThis page will be page \"i\" of the publication, although it will not\nhave a page number printed on it.\nThe other \"preliminary pages\" of the publication, if any, will be\nnumbered at the bottom of each page, beginning with \"ii\".\n.section 'Parts'\n..ix 2 headings parts\n..ix 2 parts\n..pp;If the main body of the publication is large enough that it warrants\nbeing separated into \"parts\", then the SYSPUB command\n..sp;     .part 'title'\n..ix part\n..sp;may be used to generate each of the \"part\" title pages.\nThe word \"PART\", the part number (in upper-case roman numerals), and the\npart title will be centered on an unnumbered page by themselves.\nThe part title will print in uppercase on the part-title page, but will be\nadded to the Table of Contents as you specified it.\n.section 'Chapters'\n..ix 2 headings chapter\n..pp;Each first-level division started by the \".chapter\" command will begin\non a new page, with the word \"Chapter\" and the chapter number\ncentered at the top of the page, and the title of the chapter centered\nbelow.\n.subsection 'Calling the \"Chapters\" by Some Other Name'\n..ix 2 chapters 'calling them something else'\n..pp;In some publications, the term \"chapter\" may not be appropriate,\nand therefore you may want some word other than \"Chapter\" to\nbe used as a \"header\"\nat the beginning of each \"chapter\".\nFor example, if you specify\n..sp;     .major 'Section'\n..ix 'major'\n..sp;immediately before the\nfirst occurence of \".chapter\", SYSPUB will print the\nword \"Section\" at the top of the first page of each \"chapter\".\nNote that you must still use the\n\".chapter\" command to create the major divisions of your publication,\neven though you are calling them something else.\n.section 'Example'\n.fignum outline\n..pp;..ur Figure &outline illustrates the organization of the input\nfile for the \"manual\" layout.\n.figbegin;.boxon\n .im syspub layout=manual\n .titlepage\n THIS IS THE TITLE OF THE MANUAL\n      .\n      . other lines for the title page\n      .\n .prelim 'Abstract'\n .chapter 'Introduction'\n      .\n      .\n      .\n .appendix 'other stuff'\n .contents\n .tables\n .figures\n.figure outline 'Sample Input File Using The MANUAL Layout'\n.boxoff;.figend\n.chapter 'The REFMAN Layout'\n..pp;The REFMAN layout has not yet been fully implemented or tested.\nIt is intended to produce output identical to that of MANUAL except\nfor the numbering of pages, tables, and figures.\nIt also assumes that the document is to be published on both sides of the\npage.\n..cc begin;.boxon\n..ju no\n .im syspub layout=refman\n.boxoff;..cc end\n.chapter 'The THESIS Layout'\n..ix 2 layouts THESIS\n..pp;The THESIS layout produces output\n.footnote identical\nChapter numbers will normally be printed as upper-case roman numerals.\nHowever,\nif the \".part\" command has been used before the first \".chapter\" command is\nencountered, then chapter numbers are printed as arabic numerals to avoid\nconfusion.\n.footend\n..ix 2 numbering chapters\nto that of the MANUAL\n.tabnum layouts\n..ur layout, and provides the commands shown in Table &layouts to create\nthe additional preliminary pages required in a thesis.\n.tabbegin;.boxon\n.table layouts 'THESIS Layout Commands'\n..ce 1\n .im syspub layout=thesis\n..sp;..bx;..sp\n..co;..ju no\n..tb set !;..tb 19\n..of 19\n .author!to specify and position\nthe name of the author on the title page\n..of 19\n .course!to specify the name of the course\nfor which the document is begin submitted, or\n..of 19\n .degree!to specify the name of the degree\nfor which the thesis is being submitted\n..of 19\n .date!to generate the date and copyright lines\n..of 19\n .declaration!creates the \"author's declaration\" page\n..of 19\n .borrow!creates the \"borrower's page\"\n..of;..tb set\n.boxoff;.tabend\n.section 'Additional Commands for the Title Page'\n..ix 2 'title page' 'for a thesis'\n.subsection \"The Author's Name\"\n..pp;The author's name is positioned and printed on the Title Page by using\nthe SYSPUB command\n..sp;     .author 'full name of author'\n..ix 'author'\n..sk;It may be followed by any additional lines of text\nneeded to satisfy the requirements of the thesis.\n..pp;If the author's name contains the apostrophe character ('), then\nthe \".author\" command must be specified instead as\n..sp;     .author \"full name of author\"\n..sp;using the double-quote (\") instead of apostrophes to delimit\nthe author's name.\n.subsection 'Degree'\n..pp;If the publication is being submitted as a thesis in fulfillment of\ndegree requirements, then use the SYSPUB command\n..sp;     .degree 'title of degree'\n..ix 'degree'\n..sp;followed on the next input line(s) by the name of the department\ngranting the degree.\n.subsection 'Course'\n..pp;If the publication is not really a thesis but is being submitted\nin partial fulfillment of\nthe requirements for a particular course, then use the SYSPUB command\n..sp;     .course 'course code' 'title of course'\n..ix 'course'\n..sp;followed on the next input line(s) by any additional\nrelevant information you must supply about the course.\n.subsection 'The Date of the Publication'\n..ix 'date'\n..pp;The \".date\" command causes the \"date\" and \"copyright\" lines to be\nprinted at the bottom of the page.  It is of the form\n..sp;     .date 'copyright symbol'\n..sp;The \"copyright symbol\" is optional; if the command is used as \".date\"\nonly, then the characters \"(c)\" will be used as the copyright symbol.\n..pp;If the \"date\" and \"copyright\" lines which the \".date\" command\nproduces are not appropriate for your publication, you can omit the\n\".date\" command, and instead use the appropriate SCRIPT control words\nand text lines.\n.section \"The Author's Declaration Page\"\n..ix 2 \"author's declaration page\"\n..pp;Most theses must have some form of \"author's declaration\" page.\nThe SYSPUB command\n..sp;     .declaration\n..ix declaration\n..sp;will generate such a page, with the appropriate words on it.\n.section \"The Borrower's Page\"\n..ix 2 \"borrower's page\"\n..pp;A thesis must have a \"borrower's page\".\nSuch a page will be generated by the SYSPUB command\n..sp;     .borrow\n..ix borrow\n.section 'Example'\n.fignum outline1\n..pp;..ur Figure &outline1 illustrates the organization of the input\nfile for a thesis.\n.figbegin;.boxon\n .im syspub layout=thesis\n .titlepage\n THIS IS THE TITLE OF THE THESIS\n .author 'my name'\n .degree 'name of Degree'\n Department granting the Degree\n .date\n .declaration\n .borrow\n .prelim 'Abstract'\n .prelim 'Acknowledgements'\n .chapter 'Introduction'\n .chapter 'Hypothesis'\n .chapter 'Method'\n .chapter 'Observations'\n .chapter 'Conclusions'\n .appendix 'other stuff'\n .contents\n .tables\n .figures\n.figure outline1 'Sample Input File Using The THESIS Layout'\n.boxoff;.figend\n.chapter 'Special Layouts'\n..pp;Several special-purpose layouts are available with SYSPUB,\nfor layout styles particular to specific publishing groups.\nSYSPUB currently has layouts for IEEE and APA.\n.section 'The IEEE Layout'\n..ix 2 layouts IEEE\n..pp;The IEEE layout is intended for papers which are to be produced on\nthe grid sheets provided by the IEEE Editorial Department for\nthe preparation of papers in two-column format for IEEE photo-offset\npublications.\nIt provides all of the SYSPUB commands which correspond to the PAPER\nlayout, with the differences and/or exceptions noted below:\n.point begin\nnone of the headings produced by \".chapter\", \".section\", or \".subsection\"\nwill be numbered;\n.point\ntitles produced by \".chapter\" will be centred,\nunderscored, and capitalized;\n.point\ntitles produced by \".section\" will underscored and printed flush with the\nleft margin, exactly as entered;\n.point\ntitles printed by \".subsection\" will be underscored and indented as\nthe starting text in a new paragraph.\n.point end\n.fignum ieee\nA sample input file using the IEEE layout is\n..ur shown in Figure &ieee..\n.figbegin\n.boxon\n..fo no\n..li ?\n.im syspub layout=ieee\nTITLE OF PAPER\nName of Author\nAuthor's Business Affiliation\nCity, Province, Country\n.prelim 'Abstract'\ntext of short summary or abstract of paper\n.chapter 'Title of First Major Heading in Paper'\ntext\n.section 'Title of Second-Level Heading'\ntext\n.subsection 'Title of Third-Level Heading'\netc\n.bibliography 'References'\netc\n??li .\n.figure ieee 'Sample Input File Using The IEEE Layout'\n.boxoff;.figend\n..pp;If the paper is being produced at 8 lines to the inch, then specify\nthe parameter \"lpi=8\" on the \".im syspub\" command.\n.section 'The APA Layouts'\n..pp;There are two layouts which conform to\nthe style of the American Psychological Association.\nThey provide all of the SYSPUB commands which correspond to the THESIS\nlayout, with the differences and/or exceptions noted below:\n.point begin\nheadings for the various divisions in the main body will not be numbered,\nor named;\n.point\nlayout APA4 supports four levels of divisions of the text:\n..ix 2 layouts APA4\n.point 2\ntitles produced by \".chapter\" will be in uppercase, centered, and will\nstart on a new page;\n.point\ntitles produced by \".section\" will underscored, centered, and printed as\nentered;\n.point\ntitles produced by \".subsection\" will be underscored and printed flush\nwith the left margin, exactly as entered;\n.point\ntitles produced by \".subsub\" will be underscored and indented as\nthe starting text in a new paragraph, exactly as entered.\n.point 1\nlayout APA3 supports three levels of divisions of the text:\n..ix 2 layouts APA3\n.point 2\ntitles produced by \".chapter\" will be underscored, centered, and printed\nas is;\n.point\ntitles produced by \".section\" will be underscored and printed flush\nwith the left margin, exactly as entered;\n.point\ntitles produced by \".subsection\" will be underscored and indented as\nthe starting text in a new paragraph, exactly as entered.\n.point end\n.appendix 'CHANGING THE FORMAT OF THE PUBLICATION'\n.section 'Top and Bottom Margins and Titles'\n..pp;If you wish your publication to have a TOP MARGIN or BOTTOM MARGIN\n..ix 2 'page layout' 'top and bottom margins'\ndifferent than those which are the SCRIPT defaults, then specify\nthe SCRIPT \".tm\" and/or \".bm\" control words\n..us before |you imbed SYSPUB.\nSYSPUB will fail to work properly if you\nre-define them once SYSPUB has been imbedded.\n..pp;SYSPUB, by default, removes from you all\n..ix 2 'page layout' 'top and bottom titles'\ncontrol over the number of title lines in the top and bottom\nmargins, because it constantly issues its own SCRIPT \".hs\" and \".fs\"\ncontrol words\nas it is deciding when to print the top and\nbottom title lines.\nYou can re-define the top and bottom title after you imbed SYSPUB,\nbut SYSPUB will decide when to print the top title and when to\nprint the bottom title.\nIf you wish to define any number of top and bottom title lines which are\n..us always |to be printed at the top and bottom of each and every page,\nthen do the following\n..us before |you imbed SYSPUB:\n..sp;..cc begin\n     .sr pubMYhs = number of top title lines desired\n     .sr pubMYfs = number of bottom title lines desired\n     then define the top and bottom title lines\n..cc end\n..sp;If you do this, you must define at least one of each.\n.section 'Controlling Entries in the Table of Contents'\n..ix 2 contents 'controlling what goes in it'\n..pp;By default, section (second-level), subsection (third-level), and\nsubsubsection (fourth-level)\nheadings are included in the Table of Contents.  You can control the level\nof inclusion by setting the value of the \"inclusion level\", with the\nSCRIPT control word\n..sp;     .sr pubSWinc = value\n..sp;A value of \"4\" or greater will cause section, subsection, and\nsubsubsection headings to be included in the Table of\nContents; this is the default.  A value of \"1\" will cause\nchapter and appendix (first-level)\nheadings to be included, but section,\nsubsection, and subsubsection headings will be\nomitted from the Table of Contents.\n..pp;For example, if you wish to have all subsubsection headings omitted\nfrom the Table of Contents, then the SCRIPT control word\n..sp;     .sr pubSWinc = 3\n..sp;should be specified before the first occurrence of the SYSPUB\ncommand \".subsub\".\n..pp;If you wish to omit the subsection and subsubsection headings from\nthe Table of Contents for\na particular chapter (or range of chapters), then specify the SCRIPT\ncontrol word\n..sp;     .sr pubSWinc = 2\n..sp;before the occurrence of the SYSPUB \".chapter\" command which\ndefines the first chapter for which you want them\nomitted, and then specify the SCRIPT control word\n..sp;     .sr pubSWinc = 4\n..sp;at the very end of the chapter (or at the very end of the\nlast chapter in the range of chapters) for which you want\nthem to be omitted from the Table of Contents.\n.section 'Changing The Numbering Styles'\n.subsection 'Parts, Chapters, and Appendices'\n..ix 2 numbering parts;..ix 2 numbering chapters;..ix 2 numbering appendixes\n..pp;If you do not like the default numbering styles, you can change any or\nall by inserting the SCRIPT control words\n..sp;..cc 3\n     .sr pubPAnar = 'new style'\n     .sr pubCHnar = 'new style'\n     .sr pubAPnar = 'new style'\n..sp;before the first occurence of \".part\", \".chapter\", or \".appendix\"\nrespectively.  The \"new style\" must be one of the choices\n..sp;..cc 3\n     arabic\n     roman upper\n     theatre       (don't use this for chapters)\n..sp;\"Theatre\" numbering results in the sequence \"A\", \"B\", ..., \"Z\".\n.subsection 'Footnotes'\n..ix 2 numbering footnotes\n..pp;You can force the footnote numbering to be done independent of the\nONLINE or OFFLINE output mode by specifying one of the following before\nthe first occurence of the \".footnote\" command.\nSpecifying\n..sp;     .sr pubfnsup = 'nosup'\n..sp;will force the footnote numbers\n..ul 1 not;to be generated as superscripts.  Instead, they will be\ngenerated as though the output mode was ONLINE.  Specifying\n..sp;     .sr pubfnsup = 'sup'\n..sp;will force the footnote numbers to be generated as superscripts even\nif the output mode is ONLINE.\n.section 'Special Considerations'\n..pp;There are a number of things which SYSPUB does internally with which\nyou may not interfere.\nThey are presented below in terms of the SCRIPT control words on which\nthey depend.\n.subsection 'Control Word Separator (cw)'\n..pp;All SYSPUB commands with the exception of those for footnotes demand that\n..sp;     .cw ;\n..sp;be in effect.\n.subsection 'Control Word Indicator Literal (li)'\n..pp;SYSPUB establishes the period (.) as the control word indicator literal\nand the comma (,) as the\n..ul 1 nobreak;control word indicator literal.\nThese must be in effect whenever a SYSPUB command is encountered\nand also must be in effect whenever several circumstances over which\nyou have no control\n.footnote occur.\nSYSPUB causes a number of \"internal\" commands to be invoked\nautomatically (for example, at the top of each page, SYSPUB checks to see if\nthere are any tables or figures to be printed).\n.footend\nThis means that the only time it is\n..us safe\nfor you to change the control word indicator is in the \"begin/end\" range of\na block of text defined by the \".cc\" or \".fk\" or \".fn\" SCRIPT control words.\nDisasterous results will occur in other circumstances.\n.subsection 'Remote (rm)'\n..pp;SYSPUB issues a \"first line of the text area\" REMOTE using\n..sp;     .rm *\n..sp;Therefore, you cannot; nor can you change the TOP MARGIN (tm) value\nafter you imbed SYSPUB.\n.subsection 'Translate on Input (ti)'\n..pp;For your convenience, SYSPUB defines\na translate table which will map the digits 0 through 9 into\ntheir superscript equivalents.  All you need to do to take advantage of\nthis is to use the \"set\" operand of \".ti\" to define an escape\ncharacter.\nFor example, if you specify\n..sp;     .ti set #\n..sp;as the \"translate on input\" escape character,\nthen an input line containing the characters\n..sp;     The quantity \"x squared\" is written as x#2.\n..sp;will print on the high-speed line printer as\n..ti set #\n..sp;     The quantity \"x squared\" is written as x#2.\n..br;..ti set\n.subsection 'Underscore, Underscore and Capitalize (us,uc)'\n..pp;SYSPUB establishes the vertical bar (|) as the \"escape\" character\nwhich turns underscoring off and on in the \".us\" and \".uc\" operand lines,\nby issuing a\n..sp;     .ud set |\n.appendix 'AN ALTERNATE METHOD FOR BIBLIOGRAPHIES'\n..ix 2 bibliography\n..pp;The material below describes a method for preparing the Bibliography\nwhich is not often recommended because it is cumbersome.\nIt may not be used with a layout less than MANUAL.\n.section 'Entering the Bibliographic Entries'\n..ix 2 bibliography entries\n..pp;The bibliography, if present in a publication, is placed at the end of the\npublication (unless there is an index).\nHowever, to allow you to reference the bibliographic entries with symbolic\nreferences instead of absolute numbers,\nthe SYSPUB commands to format the bibliography can be entered\nimmediately after the SYSPUB commands for the title page and immediately\nbefore the SYSPUB command for the preliminary pages (or parts and chapters,\nif there are no preliminary pages).\nIf you do this, you must use the \".bib\" command in the form\n..sp;     .bib refname\n..ix bib\n..sp;where \"refname\" is a unique one- to eight-character \"reference name\"\nwhich the author assigns.\nBibliographic reference numbers\nwill be generated automatically and printed to the left of each reference.\n.section 'Referencing Bibliographic Entries'\n..ix 2 bibliography references\n..pp;In the main body of the publication, the \"refname\"  may be used\nto refer to the bibliographic entry by specifying the\n\"refname\" followed by a period followed by a colon followed by\nthe appropriate page number(s) in the reference.\nFor example, if \"turabian\" were the \"refname\" assigned to the publication by\nTurabian (see the Bibliography for this SYSPUB User's Guide), then\nit could be referenced in the form\n..sp;     .ur \u00dd&turabian.:182-183\u00a8\n..sp;to reference the pages in that publication which describe this method.\nThe number assigned to the bibliographic entry by the\n\".bib\" command is substituted automatically for \"refname\" (in this case,\n\"turabian\").\nTherefore, if bibliographic entries are added to or deleted from the\nbibliography during the writing of the publication, there is no need to have\nto worry about using the proper \"reference number\" in the main body of the\npaper.\n.appendix 'OTHER SYSPUB REFERENCE VARIABLES'\n..pp;The following SYSPUB reference variables may be of some use to you.\n..sp\n..in 10\n..oo 1 pubXXnum\nwhere \"XX\" is one of the following two-letter combinations:\n..sp;..in +5\n..fo no\nBI   bibliographic entry number\nFN   footnote number\nCH   chapter number\nFI   figure number\nPA   part number\nPO   point number\nSE   section number\nSS   subsubsection number\nSU   subsection number\nTA   table number\n..in -5;..sp;..fo\nFor example, if you want to save the current chapter number for reference\nlater in the document, then:\n..sp\n     .chapter 'title of chapter'\n     .se thischap = &pubCHnum\n          .\n          .\n          .\n     As was previously mentioned in\n     .ur Chapter &thischap., we ...\n..sp\n..oo 1 pubSWprt\ncontains the current chapter (or appendix), section, subsection,\nand subsubsection numbers\nas a character string of the form\n..sp;..in +5;chapter.section.subsection.subsubsection\n..sp;..in -5\n..in 10;..oo 1 pubSWtop\nis the number of lines to be skipped at the top of the title page, the first\npage of the bibliography, the declaration page, and the first page created\nby each occurrence of the \".prelim\", \".chapter\", \".appendix\", \".contents\",\n\".tables\", \".figures\", and \".index\" commands.\n..ur Its default value is &pubSWtop., but it can be changed by specifying the\n..sp;     .sr pubSWtop = number of spaces desired\n..sp;SCRIPT control word immediately before invoking the SYSPUB command\nto which you want it to apply.  The new value will be used by all of the\nabove SYSPUB commands encountered thereafter, until you change it again.\n..sp;..in 10;..oo 1 pubSWbtw\nis the number of lines skipped before a section, subsection, or item, and\nbefore and after a table or figure.  You can change it the same way you can\nchange \"pubSWtop\", with the same resultant effect.\n..ur Its default value is &pubSWbtw..\n.bibliography\n.bib scintro\n..us Introduction to SCRIPT.\nWaterloo:  University of Waterloo Computing Centre, 1977.\n.bib\n..us MLA Style Sheet.\n2nd ed.  New York:  Modern Language Association of America, 1970.\n.bib\n..us Preparation of Papers in Two-Column Format For IEEE\n..us Photo-Offset Publications.\nNew York:\nEditorial Department, Institute of Electrical and Electronics Engineers, 1974.\n.bib\n..us Publication Manual of the American Psychological Association.\n2nd ed.  American Psychological Association, 1974.\n.bib screfcd\n..us SCRIPT Reference Card.\nWaterloo:  University of Waterloo Computing Centre, 1977.\n.bib scref\n..us SCRIPT Reference Manual.\nWaterloo:  University of Waterloo Computing Centre, 1977.\n.bib textcms\n..us CMS For Text Processing.\nWaterloo:  University of Waterloo Computing Centre, 1977.\n.bib thesis\n..us Thesis Regulations and Guide.\nWaterloo:  University of Waterloo Graduate Studies Office, 1975.\n.bib turab\nTurabian, Kate L.\n..us A Manual for Writers of Term Papers, Theses, and Dissertations.\n4th ed.  Chicago:  University of Chicago Press, 1973.\n.bib\nWiles, Roy McKeen.\n..us Scholarly Reporting in the Humanities.\n4th ed. revised.\nToronto:  University of Toronto Press, 1972.\n.bib end\n.index 1 'INDEX OF SYSPUB COMMANDS' 2\n.index 2 'DEFAULTS, AND HOW TO ALTER THEM'\n.contents\n.tables\n.figures\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TB": {"ttr": 7940, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x01\\x12\\x01\\x12\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 274, "newlines": 274, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE TB\n.SUBT Purpose\nThe TAB SETTING control word specifies the tab stops to be assumed\nfor the following lines\nwhen converting the TAB character (X'05') generated by the typewriter\nTAB key into the appropriate number\nof spaces.\n.nf\n.SUBT Format\n            <n1 n2 n3 ...>\n.bs $\n   .TB      <<'string'|char/>n<L$_|R|C|'char'> ...>\n.bs\n            <SET <char>>\n.SUBT Usage\n.sp;.fo\nTabulation characters present in the input file are expanded\nby SCRIPT into one or more fill characters, blanks by default, or\nthe fill parameter if specified, to simulate\nthe effect of several logical tab positions.\n.sp 1\nThe logical tab position n can be used with the optional\nfill parameter and alignment parameter.\nThe .TB control word operand n specifies the location\nof the logical tab stops.\nThe tab columns may be specified with signed values in which\ncase the tab is set in the last tab column plus n.\nAs text is entered the blank space between the end of\nthis text and the next tab position (tabulation gap)\nis used to accomodate the fill parameter. The fill\nparameter char or string is associated with\na particular column n and may be a single character\nor a string delimited by ', \", or /.\nIf the fill string is a single character, this\ncharacter is propagated in the tabulation gap.\n(see examples 1 and 2).\nFor a fill string greater than one character the\nfollowing situation results.\nThe fill string is propagated in a work area and the\nparticular column bounds of the tabulation gap\nare used to extract the expanded fill string, that is, a fill string\nof 'abc' in a tabulation gap from column 5 to 9 inclusive, will be\nfilled in as bcabc.\n(see example 3).\nIf the tabulation gap is smaller than the fill string then\nonly a subset of the fill string is extracted.\n(see example 4).\n.sp\nThe alignment parameter associated with column n\ncan be used for left or right justification, centering, or\ncharacter alignment.\nWhen tab positions are specified, fields are left justified\nin column n. If fields are to be right justifed or\ncentred then an R or C should immediately follow the tab\nposition. (See examples 6 and 7).\nFields can also be aligned on a particular\ncharacter by specifying the quoted character following the\nn operand.\nThe alignment processing is done during input before\nany other formatting occurs.\nThis functions by logically tabbing to column n and\nsearching for the alignment character. The length of\nthe tabulation gap is subsequently adjusted so this\ncharacter will be aligned in column n. (see example 8).\n.sp\n.sp 1\nA .TB control word with no operands causes reversion to the default\ntab settings.\n.sp\nA .TB control word with a \"SET\" operand may be used to define a single\ncharacter that is to be treated as a user tab character.\nThe user Tab character is in addition to the normal Tab character\nand is treated as a Tab in text and control commands.\nA \"SET\" with no character operand following only allows\nthe normal Tab character (X'05').\n.sp\n.sp\n.SUBT Defaults\nThis control word will create a break.  Until \".tb\" is encountered\nwith operands,\nthe tab columns are 5, 10, 15,  ..., 80.  They will be in effect from\nthe beginning or when \".tb\" is\nencountered without operands.\n.SUBT Notes\n.of 4\n(1) The tab stops must be specified in ascending order.\n.of 4\n(2) Upon encountering a phrase which can\n.ur .ul not\nbe centered or right justified on a particular column,\nthen the next tab setting is obtained which allows\nthe desired result.\nThus each phrase under an alignment constraint is\nbounded by the previous and next tab stops specified.\n(see example 5).\n.of 4\n(3) Under CONCATENATE (.CO) or FORMAT (.FO), attempting to tab outside\nthe limit of the LINE LENGTH (.LL) produces unpredictable results.\n.SUBT Examples\n.tr \u00ac .\n.of 4\n.nf\n(1) \u00actb set :\n\u00actb 5 +/15 -/25 */35\n:a:b:c:d\n.sp\nwill produce\n.sp\n.of\n.in\n.fo\n.tb set :\n.tb 5r 15r 25r 35r\n:5:15:25:35\n.bs $\n:v$|:v$|:v$|:v$|\n.bs\n.tb 5 +/15 -/25 */35\n:a:b:c:d\n.sp\n.nf\n.tb set\n.in 5\n.of 4\n(2) An equivalent result is produced by:\n.sp\n\u00actb 5 +/+10 -/+10 */+10\n.sp\n.cp 8\n.of 4\n(3) \u00actb set :\n\u00actb 20 'xyza'30\n12345:123:123\n.sp\nproduces\n.sp\n.of\n.tb set :\n.tb 20r 30r\n:20:30\n.bs $\n:v$|:v$|\n.bs\n.tb 20 'xyza'30\n12345\t123\t123\n.sp\n.tb set\n.of 4\n.nf\n(4) \u00actb set :\n\u00actb 1/10 '234'25 \"5678\"40 /1234567890/55\nthis:is a:tab:fill:test.\n.sp\nproduces\n.of\n.in\n.sp\n.fo\n.tb set :\n.tb  10r 20r 30r 40r 50r\n:10:20:30:40:50\n.bs $\n:v$|:v$|:v$|:v$|:v$|\n.bs\n.tb 1/10 '234'25 \"5678\"40 /1234567890/55\nthis:is a:tab:fill:test.\n.of 4\n.nf\n.tb set\n.in 4\n.sp\n(5) \u00actb set :\n\u00actb 5c 10c\n:2345678\n\u00acsp\n:234 67890\n.sp\nwill produce\n.sp\n.of\n.in\n.tb set :\n.tb 5r 10r\n:5:10\n.bs $\n:v$|:v$|\n.bs\n.tb 5c 10c\n:2345678\n.sp\n:234 67890\n.sp\n.tb set\n.of 4\n.in 5\n.nf\n.of 4\n(6) \u00actb set :\n\u00actb 19c 30c 50c\n\u00acnf\n\u00acur \u00acuc command:break:default:meaning\n\u00acsp\n\u00actb 20r 30c 40l\n cw c:no:c=;:control word separator is c\n\u00acsp\n in n:yes:n=0:indent left margin n spaces\n\u00acsp\n br:yes::break\n.sp\nproduces\n.of\n.in\n.sp\n.tb set $\n.tb 19c 30c 50c\n.bs =\n\t19\t30\t50\n\t v=|\tv=|\tv=|\n.bs\n.nf\n.ur .uc command$break$default$meaning\n.sp\n.tb 20r 30c 40l\n cw c$no$c=;$control word separator is c\n.sp\n in n$yes$n=0$indent left margin n spaces\n.sp\n br$yes$$break\n.tb set\n.sp\n.cp 12\n.in 5\n.of 4\n(7) \u00actb set :\n\u00acsp\n\u00actb   10r  12l 50r\n:sin x =:x - x**3/3! + x**5/5! - ...:(9)\n\u00acsp\n:sinh x =:x + x**3/3! - x**5/5! + ...:(10)\n.sp\nproduces\n.of 0\n.in\n.tb set $\n.sp\n.tb   10r  12l 50r\n$sin x =$x - x**3/3! + x**5/5! - ...$(9)\n.sp\n$sinh x =$x + x**3/3! - x**5/5! + ...$(10)\n.sp\n.nf\n.of 4\n.in 5\n.tb set\n.of 4\n(8) \u00actb set :\n\u00actb 25'.'\nCPU charges:$123.45\n\u00acsp\nI/O costs:$1.26\n.sp\nproduces\n.in\n.of\n.sp\n.tb 25'.'\n.tb set :\nCPU charges:$123.45\n.sp\nI/O costs:$1.26\n.tb set\n.tr\n.in\n.cm End of TB\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "TC": {"ttr": 7945, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x89\\x00\\x89\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 137, "newlines": 137, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE TC\n.SUBT Purpose\nThe TABLE OF CONTENTS control word causes the current\nTable of Contents to be printed.\nThe control words .H0 through .H9 and .PT are used to\ngenerate entries in the Table of Contents.\n.SUBT Format\n|                <1\b_|n|* <C\b_O\b_N\b_T\b_E\b_N\b_T\b_S\b_|line>>\n|  .TC           <ADD <m ... >>\n|                <PURGE>\n.SUBT Usage\n.sp\nUp to ten concurrent Table of Contents may be accumulated\nfor printing and the table printed by this command is\ndetermined by the current .DH Table of Contents number.\n.sp\nThe operand \"n\" of the .TC control word specifies\nthe number of pages reserved for the Table of Contents.\nIf the Table of Contents requires other\nthan n pages, a gap or overlap in pagination will occur.\nA default of 1 page is used if this operand\nis not specified. An operand of * causes page\nnumbering to proceed sequentially from the Table of\nContents to the text following.\n.sp\nThe \"line\" operand is the phrase used for the\nTable of Contents heading.\nA default phrase of\n.ur .us CONTENTS\nis generated if \"line\" is omitted.\nThe heading is created by generating a pseudo\nhead-level 1 with an operand of\n.ur .us CONTENTS\nor \"line\".\nThe \"line\" operand would be formatted with head-level 1\noptions in effect from the Define Heading (.DH) control word.\nThis pseudo head-level becomes the first entry in the Table\nof Contents and normally causes a page eject if not already\nat the top of the page.\n.sp\nEntries in the Table of Contents are formatted according\nto the line and page dimensions that are in effect\nupon encountering the .TC control word.\n.sp\nThe  ADD operand causes the Tables of Contents specified\nby <m ... > to be added to the current Table of Contents.\nAttempting to chain the current table to itself will\nresult in a null operation.\n.sp\nThe PURGE operand will delete the current Table of\nContents.\n.sp\nThe .TC control word is not allowed in a Floating Keep.\n.SUBT Defaults\nThis control word will cause a break.\n.SUBT Examples\n.in 5\n.tr \u00ac .\n.nf\n\u00acdh 4 tc\n\u00ach1 1.0 This is a level one heading.\n    .\n    text\n    .\n\u00ach2 1.1 This is a level two heading.\n    .\n    text\n    .\n\u00ach3 1.1.1 This is a level three heading.\n    .\n    text\n    .\n\u00ach4 1.1.1.1 This is a level four heading.\n    .\n    text\n    .\n\u00acpt .sp 2\n\u00acpt End of Table of Contents\n\u00actc * Example Contents\n.tr\n.in\n.sp 3\nproduces:\n.pa\n.dh 1 npa\n.fo\n.dh 4 tc\n.h1 1.0 This is a level one heading.\nA level one heading has the following default\ncharacteristics:\n.sp\n-    Starts at the top of a new page.\n.of 5\n-    Is right justified if it falls on an\nodd numbered page.\n.of 5\n-    Is typed in uppercase and underscored.\n.of 5\n-    Is followed by five spaces.\n.in +0\n.h2 1.1 This is a level two heading.\nA level two heading has the following default\ncharacteristics:\n.sp\n-    Has three line skips before it.\n.of 5\n-    Is typed in uppercase and underscored.\n.of 5\n-    Is followed by two spaces.\n.in +0\n.h3 1.1.1 This is a level three heading.\n.of\nA level three heading has the following\ndefault characteristics:\n.sp\n-    Has three line skips before it.\n.of 5\n-    Is typed in uppercase letters.\n.of 5\n-    Is followed by two spaces.\n.in +0\n.h4 1.1.1.1 This is a level four heading.\n.of\nA level four heading has the following default\ncharacteristics:\n.sp\n-    Has three line skips before it.\n.of 5\n-    Is underscored.\n.of 5\n-    Is followed by two spaces.\n.in +0\n.pt .sp 2\n.pt End of Table of Contents\n.in\n.tc * Example Contents\n.cm End of TC\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "TE": {"ttr": 7948, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00>\\x00>\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TH": {"ttr": 7950, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00,\\x00,\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE TH\n.SUBT Purpose\nThe THEN control word causes an input line to be conditionally\nincluded depending on the truth value of a previous IF control word.\n.SUBT Format\n|\n|  .TH             line\n|\n.SUBT Usage\nThe line which begins one blank after the .TH control word\nis included for processing only if the preceeding IF statement\nhad a \"true\" value.\n.sp\nThe line may include any control word except another Then (.TH)\nor an Else (.EL).\nThe object line may be another .IF and these may be nested\nup to ten levels.\nThe object line may also be an Imbed (.IM) or Signal (.SI)\nin which case the current IF status and its nesting level will\nbe saved and later restored when the current file nest level\nis resumed.\n.SUBT Defaults\nThe \".th\" control word does not act as a break in itself.\nHowever, control words within the line may create a break\nif the preceeding .IF is \"true\" and the interpreted line\ncreates a break.\nIf \"line\" is omitted then the object of the Then has no effect.\n.SUBT Examples\n.of 4\n(1) .if &sptype = 'page';.th .pa;.el .sp 2\n.sp\nThis example either starts a new page or spaces two lines\ndepending on whether the value of reference variable is\n'page' or not.\n.sp\n.cp 7\n.of 4\n(2) .if &i le 1;.im afile\n.sp\nThis example will imbed an input file named \"AFILE\" if the\nvalue of \"i\" is less than or equal to one.\nNote that a .TH control word is assumed following a .IF\nif the immediately following record is not .TH or .EL.\n.cm End of TH\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "TI": {"ttr": 8193, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00+\\x00+\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TM": {"ttr": 8195, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TR": {"ttr": 8197, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00`\\x00`\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 96, "newlines": 96, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE TR\n.SUBT Purpose\nThe TRANSLATE control word allows the user to specify the contents\nof a translate table to be used for output.\n.SUBT Format\n|               <s <s\b_|t>>\n|  .TR\n|               <<s1 t1> <s2 t2> ...>\n.SUBT\n.sp 1\n.fo\n.in +5\nWhere S1, T1, etc., are single characters or two-digit hexadecimal\nnumbers using upper or lower case letters.\n.SUBT Usage\nAll subsequent output lines will be printed with all occurrences\nof \"S1\" replaced by \"T1\", etc.  If no operand is present the\ntranslate table specified by the TRANSLATE option will be reinstated.\n.sp 1\nThe .TR control word is primarily of use when output must use a\ndifferent character set than was used\nto create the SCRIPT files.  For example, the user may\nprint online a file which uses special characters not\n.FNADD\n.ur available on the terminal&LP\n.fn begin\n.in\n.ur .of &OFN\n.ur (&NFN.) For example, the superscript characters are not available\non the 2741 terminal.\n.fn end\nor use a \"correspondence coded\" secretary's typewriter typeball with a\ndifferent type style to be used in place of the normal \"terminal\ncoded\" typeball\nby using a special translate table.\n.SUBT Defaults\nThis command will not create a break when encountered.  No\ntranslation, except upper case conversion if the TRANSLATE option was\nspecified,\nwill be in effect until \".tr\" is encountered with operands.\n.SUBT Notes\n.of 4\n(1) Heading, footing, and footnote lines are translated under control\nof the translate table current when the\nline is output.\n.sp 1\n.of 4\n.cp 2\n(2) SCRIPT control lines\nare never translated.\n.sp 1\n.of 4\n.cp 3\n(3) Translate pairs remain active until explicitly re-specified.\n.sp 1\n.of 4\n.cp 4\n(4) Hexadecimal numbers are recognized by the presence of two\ncharacters (instead of one) and may use\nupper or lower case letters A-F.\n.sp 1\n.of 4\n(5) The last pair in a .TR line may consist of only one argument,\nwhich indicates that the\ncorresponding character is to be translated into itself (left\nunchanged).\n.SUBT Examples\n.of 4\n(1) .TR 8D ( 9D ) B0 0 ... B9 9\n.br\nCauses the UN Trains's superscript parentheses and numbers to\nprint as ordinary parentheses and numbers.\n.sp 1\n.cp 5\n.of 4\n(2) .TR % 7C\n.br\nCauses occurrences of the character \"%\" to be replaced by the\ncharacter X'7C', the \"@\" character, which may not be easy\nto enter into a file by virtue of being the character\nerase character in some terminal systems.\n.sp 1\n.cp 3\n.of 4\n(3) .TR 40 ?\n.br\nCauses all blanks in the file to be typed as \"?\" on output.\n.sp 1\n.cp 5\n.of 4\n(4) .TR 05 40\n.br\nThis is probably an attempt to remove all tabulation characters from\nthe file, but it has no effect since all\ntab characters are removed prior to printing the output.\n.cm End of TR\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "TSOSCR": {"ttr": 8200, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\t\\x00\\t\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE TSOSCR\n.ur .if '&UPDATE' ne '' and '&UPDATE' gt '760701' .th .ef\n.us TSO Online Procedures:\n.sp\n.sr tsoscr=%\nAny help from a TSO installation for this section will\nbe appreciated.\n.pa\n.cm End of TSOSCR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TT": {"ttr": 8202, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00b\\x00b\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 98, "newlines": 98, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TY": {"ttr": 8205, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00!\\x00!\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE TY\n.SUBT Purpose\nThe TYPE ON TERMINAL control word causes one line of information to\nbe typed on the user's terminal.\n.SUBT Format\n|\n|  .TY           information\n|\n.SUBT Usage\nIf output has started to the user's terminal, the .TY control word\nis ignored.\nOtherwise, the entire operand field is printed on the terminal.\n.sp 1\nThe .TY control may be of use, for example, immediately\npreceding a .TE (Terminal Input) control word as a\nreminder of what to do.\n.SUBT Defaults\nThis command word will not create a break when encountered.\n.SUBT Examples\n.of 4\n(1) The following could be used for interactive prompting:\n.sp\n.nf\n.li )\n.ty Type Name and Address in three lines:\n.te\n.br\n.te\n.br\n.te\n.br\n)li .\n.cm End of TY\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UC": {"ttr": 8207, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE UC\n.SUBT Purpose\nThe UNDERSCORE CAPITALIZE control word underscores and capitalizes\nan input line.\n.SUBT Format\n|\n|  .UC           <line>\n|\n.SUBT Usage\nThe .UC control word applies the rules of UPPERCASE (.UP) and\nUNDERSCORE (.US) to the \"line\" operand.\nThe \"line\" operand starts one blank after the control word\nand may be text or another control word.\n.SUBT Defaults\nThis command does not create a break.\nIf the \"line\" operand is omitted, no action is performed.\n.SUBT Examples\n.of 4\n(1) This is UC example number\n.br\n.li .uc one.\n.sp\nproduces:\n.sp\nThis is UC example number\n.uc one.\n.cm End of UC\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "UD": {"ttr": 8209, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00E\\x00E\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE UD\n.SUBT Purpose\nThe UNDERSCORE DEFINITION control word is used to specify the\ncharacters to be underscored with the automatic\nunderscoring commands.\n.SUBT Format\n|                <<ON|OFF> c1 <c2 ... >>\n|  .UD\n|                <SET|INCLUDE|IGNORE> char\n.SUBT Usage\nThe .UD control word with the \"ON\" operand specifies which\ncharacters in character or two digit hexadecimal representation\nare to be automatically underscored with the .US (UNDERSCORE)\nand the .UC (UNDERSCORE CAPITALIZE) control words.\nConversely, the \"OFF\" operand specifies which characters are not to be\nautomatically underscored with the same facility.\n.sp\nThe \"INCLUDE\" operand defines an escape character that enables the\nautomatic underscoring facility within a line.\nThe \"IGNORE\" operand defines an escape character that disables\nthe facility within a line.\nIn this way only parts of lines may be underscored.\nThe \"SET\" operand defines both these escape characters to the\nsame character resulting in the first occurrence disabling\nthe facility, the next enabling it, and so on.\n.sp\nAll characters except the following are underscored by default:\n.sp\n.us      Hex Char     Hex Char     Hex Char    Hex Char\n      05 TAB       5A !         6F ?        AD \u00dd\n      16 BACKSPACE 5D )         7A :        BD \u00a8\n      40 BLANK     5E ;         7F \"\n      4B .         6B ,         8B \u00bb\n      4D (         6D _         9B \u00ba\n.SUBT Defaults\nThis command does not create a break.\nThis command with no operands clears the escape characters\nand resets the characters to be underscored.\nAn omitted character operand for SET, INCLUDE or IGNORE\ndisables this facility which is the initial setting.\n.SUBT Examples\n.of 4\n(1) .US ,SPACE=(TRK,(1,1,1))\n.br\nwould give:\n.br\n.us ,SPACE=(TRK,(1,1,1))\n.sp\n.of 4\n(2) .ud on ( ) ,;.ud off =\n.br\n.li .us ,SPACE=(TRK,(1,1,1))\n.br\nwould then give:\n.br\n.ud on ( ) ,;.ud off =\n.us ,SPACE=(TRK,(1,1,1))\n.sp\n.of 4\n(3) .ud set !\n.br\n.li .us !,SPACE=(!TRK,(1,1,1)!)\n.br\nwould then give:\n.br\n.ud set !\n.us !,SPACE=(!TRK,(1,1,1)!)\n.ud\n.cm End of UD\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "UL": {"ttr": 8211, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00'\\x00'\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 39, "newlines": 39, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE UL\n.SUBT Purpose\nThe UNDERLINE control word causes alphanumeric characters in\nsubsequent text lines to be overstruck with a backspace and\nan underscore.\n.SUBT Format\n|\n|  .UL           <1\b_|n|ON|OFF> <line>\n|\n.SUBT Usage\nThe .UL control word is used to overstrike alphanumeric characters\nwith an underscore in a specified number of following input\ntext lines.\n.sp\nThe characters that are underscored include lower case alphabetics,\nupper case alphabetics, numerics and superscript numerics.\nBlanks, punctuation and special characters are not underscored.\n.sp\nA line of input text may optionally be specified following the\nfirst argument.  If omitted, the first line of text is taken from\nfollowing input records.\n.sp\nCare must be taken that the insertion of backspaces and underscores\ndoes not force the internal 240 character input line buffer\nto overflow.\n.SUBT Defaults\nThe control word does not create a break.\nIf the first operand is omitted then only the next input text\nline will be underlined.\nIf the \"line\" operand is omitted, then the first text to underscore\nwill come from following input.\nThe first operand may be omitted when the \"line\" operand is present\nonly if the first word in \"line\" is not recognized as a valid first\noperand.\n.SUBT Notes\n.of 4\n(1) The use of the .UL control word is mutually exclusive with Overlay\nCharacter (.OC).\n.cm End of UL\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "UN": {"ttr": 8213, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00(\\x00(\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE UN\n.SUBT Purpose\nThe UNDENT control word forces the next output line to start a\nspecified number of columns to the left of the\ncurrent indent.\n.SUBT Format\n|\n|  .UN           <0\b_|n|-n|+n>\n|\n.SUBT Usage\nThe .UN control word causes the next output line to begin _\bn spaces\nfurther left than the current\nindentation.\nA relative change as in \"+n\" or \"-n\" changes the previously\nspecified .UN or .IL (Indent Line).\n.sp 1\nThe .UN control word serves a similar purpose as .OF, but in a\ndifferent way.  The choice between\nthe two is largely a matter of personal preference.\n.SUBT Defaults\nThis command will create a break when encountered.  If\nthe operand is omitted then _\bn = 0 will be assumed.\n.SUBT Notes\n.of 4\n(1) The undentation may not exceed the current indentation.\n.SUBT Examples\n.in +4\n.un 4\n(1) The following two sequences are equivalent:\n.sp 1\n.in +5\n.nf\n .in 5\n .of 4\n <text>\n.sp 1\n .in 9\n .un 4\n <text>\n.cm End of UN\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "UP": {"ttr": 8215, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00#\\x00#\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE UP\n.SUBT Purpose\nThe purpose of the UPPERCASE control word is to capitalize an input\nline.\n.SUBT Format\n|\n|  .UP           <line>\n|\n.SUBT Usage\nThe .UP control word converts each lower case alphabetic in the \"line\"\noperand to upper case.\nThe \"line\" operand starts one blank after the control word\nand may be text or another control word.\n.sp\nUse the TRANSLATE parameter option if the whole document is\nto be printed in upper case.\n.SUBT Defaults\nThis command does not create a break.\nIf the \"line\" operand is omitted, no action is performed.\n.SUBT Examples\n.of 4\n(1) This is UP example number\n.br\n.li .UP one.\n.sp\nproduces:\n.sp\nThis is UP example number\n.up one.\n.sp\n.of 4\n(2) .up .tt //up test//\n.sp\ncentres \"UP TEST\" at the top of each subsequent page.\n.cm End of UP\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "UR": {"ttr": 8449, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00f\\x00f\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 102, "newlines": 102, "modlines": 0, "user": "CBT249"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "US": {"ttr": 8452, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00'\\x00'\\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 39, "newlines": 39, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE US\n.SUBT Purpose\nThe UNDERSCORE control word is used to underscore an input line.\n.SUBT Format\n|\n|  .US           <line>\n|\n.SUBT Usage\nThe .US control word underscores each character of the \"line\"\noperand according to the UNDERSCORE DEFINITION (.UD) specifications.\nSpecial characters and punctuation are normally not affected.\nThe \"line\" operand starts one blank after the control word.\n.sp\nRemember that each character to be underscored is replaced by\nthree characters:\nthe character, a backspace and an underscore.\nThe maximum input line length after underscoring is 240 characters.\n.SUBT Defaults\nThis command does not create a break.\nIf the \"line\" operand is omitted, no action is performed.\n.SUBT Examples\n.of 4\n(1) This is US example number\n.br\n.li .us one.\n.sp\nproduces:\n.sp\nThis is US example number\n.us one.\n.sp\n.of 4\n(2) .UD SET !;.us !1.2  !CHAPTER_TITLE\n.sp\nproduces:\n.sp\n.ud set !;.us !1.2  !CHAPTER_TITLE\n.ud\n.cm End of US\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}, "WD": {"ttr": 8454, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x965\\x9f\\x00\\x965\\x9f\\x19Q\\x00 \\x00 \\x00\\x00\\xc3\\xc2\\xe3\\xf2\\xf4\\xf9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-12-24T00:00:00", "modifydate": "1996-12-24T19:51:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "CBT249"}, "text": ".cm SCRIPT REFERENCE WD\n.SUBT Purpose\nThe WIDOW control word prevents the first and last lines of a\nparagraph from being split across a page boundary from the\nrest of a paragraph.\n.SUBT Format\n|\n|  .WD           <Y\b_E\b_S\b_|NO>\n|\n.SUBT Usage\nThe .WD control word will cause a page eject to occur if\nthe first line of a multi-line paragraph is to print on the\nlast line of the text area.\nIt will also cause a page eject before the second last line\nof a paragraph if the last line of a paragraph would have\nappeared alone (widowed) at the top of a page.\n.SUBT Defaults\nThis command will not cause a break.\nThe initial value of this control word is \"NO\".\nAn omitted operand is equivalent to \"YES\".\n.SUBT Notes\n.of 4\n(1) This is a control word that is still in \"under development\".\nResults should be examined carefully if this facility is\nenabled, because it sometimes creates a page eject one line\nprematurely.\n.sp\n.of 4\n(2) If a three line paragraph would be printed with its last\nline on the next page, note that all three lines will be ejected\nto the next page.\n.cm End of WD\n", "mimetype": "text/troff", "datatype": "ebcdic", "extension": ".troff"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT280/FILE280.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT280", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}