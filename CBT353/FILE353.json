{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011821000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 4467736, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 25, "INMDSNAM": "CBT.V500.FILE353.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 4467736, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 4467736, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE353.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00G\\x15'", "DS1TRBAL": "b'\\x1e\\x8c'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x8c\\x00\\x07\\x02\\x91\\x00\\x03\\x00H'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00\\x00\\x01\\x19\\x00\\x9f\\x01\\x19\\x00\\x9f\\x12\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-01-09T00:00:00", "modifydate": "2019-01-09T12:00:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-497"}, "text": "REGULAR CBT TAPE - VERSION 497    FILE:  353\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT497.FILE353\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 117 MEMBERS COUNTED; CUMULATIVE SIZE IS 41,907 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/09/19    15:29:33    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$AMODE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00,\\x00,\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n&LABEL   $AMODE &MODE\n.*\n.**********************************************************************\n.*                                                                    *\n.* FUNCTION:                                                          *\n.*                                                                    *\n.*       THIS MACRO IS USED TO SWITCH BETWEEN 24-BIT AND 31-BIT       *\n.*       ADDRESSING MODE. THE INSTRUCTION GENERATED BY THIS MACRO     *\n.*       IS A BRANCH AND SET MODE (BSM 0,REG).                        *\n.*                                                                    *\n.* PARAMETERS:                                                        *\n.*                                                                    *\n.*       MODE     - SPECIFIES THE ADDRESSING MODE TO SWITCH TO.       *\n.*                  VALID VALUES ARE 24 OR 31.                        *\n.*                                                                    *\n.*                                                                    *\n.* NOTE:                                                              *\n.*                                                                    *\n.*       THIS MACRO ASSUMES R13 POINTS TO A STANDARD SAVE AREA.       *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n         AIF   ('&MODE' EQ '24').MODEOK\n         AIF   ('&MODE' EQ '31').MODEOK\n         MNOTE 8,'AMODE MUST BE EITHER 24 OR 31'\n         MEXIT\n.MODEOK  STM   14,15,20(R13)       SAVE THE REG\n         SR    14,14               CLEAR REG TO INDICATE 24-BIT\n         L     15,16               PICK UP CVT\n         TM    116(R15),X'80'      RUNNING UNDER XA\n         BZ    MODE&SYSNDX         NO\n         LA    15,MODE&SYSNDX      SET AN ADDRESS\n         AIF   ('&MODE' EQ '24').SETMODE\n.SET31   LA    14,1                SET A BIT ON\n         SLL   14,31               SHIFT TO BIT 0\n         OR    15,14               MAKE 31-BIT\n         SR    14,14               CLEAR REG TO INDICATE 24-BIT\n.SETMODE DC    X'0BEF'             BSM TO SET ADDRESS MODE\nMODE&SYSNDX DS 0H                  END OF $AMODE PROCESSING\n         ST    14,0(,13)           SAVE 24-BIT FLAG\n         LM    14,15,20(R13)       RESTORE THE REG\n.DONE    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$INDEX": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x83\\x00\\x83\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 131, "newlines": 131, "modlines": 0, "user": "CBT353"}, "text": "1\n                         GENERAL INDEX\n\n   APPLMON$ - INSTALL DOC FOR APPLMON\n\n              APPLMON IS A VTAM APPLICATION MONITOR. IT PROVIDES A MULTI\n              USER INTERFACE TO NATIVE VTAM APPLICATIONS. IT PROVIDES A\n              FULL-SCREEN LOGON PANEL, A PRIMARY OPTION PANEL, AND 4\n              SAMPLE APPLICATIONS. EACH USER THAT LOGS ON RUNS UNDER A\n              SEPARATE TCB; THE NUMBER OF USERS THAT COULD BE SUPPORTED\n              IN ONE ADDRESS SPACE IS DEPENDENT ON REGION SIZE.\n\n              NOTE: THIS WAS CODED AS PART OF A VTAM CODING COURSE.\n                    IT IS NOT-NOT-NOT INTENDED FOR ANY SORT OF\n                    PRODUCTION USE.\n\n\n   CDF$     - INSTALL DOC FOR MVS SP 1.3 CONSOLE DISPLAY FACILITY (CDF)\n\n              THIS PROGRAM PROVIDES THE ISPF/PDF USER WITH A DISPLAY OF\n              THE MASTER CONSOLE. OPERATOR COMMANDS ARE ENTERED ON THE\n              STANDARD \"COMMAND INPUT\" LINE; PF3 GETS YOU OUT. SECURITY\n              IS BASED ON THE TSO USERID, SEE THE CODE FOR CUSTOMIZATION\n              INFO. YOU HAVE TO HIT \"ENTER\" TO REFRESH THE DISPLAY. YOU\n              MUST ADJUST THE LINE COUNT BASED ON THE MASTER CONSOLE'S\n              TERMINAL TYPE.\n\n   DIF      - ISPF/PDF DISPLAY INITIATORS FACILITY (DIF)--PART OF JDF.\n\n   ETPS$    - INSTALL DOC FOR EMERGENCY TELE-PROCESSING SERVICES (ETPS).\n\n              THIS PROGRAM PROVIDES SOME BASIC TIME-SHARING SERVICES\n              WHEN TSO OR SPF IS UNAVAILABLE. IF YOU DEFINE IT AS A\n              SUB-SYSTEM, IT CAN BE (AND HAS BEEN, TO MY GREAT RELIEF)\n              BROUGHT UP EVEN WHEN JES2 ABENDS, OR WILL NOT INITIALIZE.\n\n              THE BASIC PROCESSING APPEARS MUCH LIKE SPF, AS FAR AS\n              THE PRIMARY OPTION MENU AND SO FORTH ARE CONCERNED. THE\n              FULL-SCREEN EDITOR IS QUITE PRIMITIVE, BUT SHOULD SUFFICE\n              FOR EMERGENCY USE. TUBE I/O IS EXCP, SO YOU DON'T NEED\n              BTAM, TCAM, OR VTAM/TCAS.\n\n              THE PRIMARY OPTION MENU HAS 4 OPTIONS:\n                          1. PDS BROWSE\n                          2. PDS EDIT\n                          3. PDS UTILITY\n                          4. IDCAMS INTERFACE\n\n              TERMINALS SUPPORTED ARE 3278-2, 3278-4, 3279-3B. INSTALL\n              AND USER DOC ARE IN COMMENTS IN THE CODE, AS WELL AS IN\n              MEMBER \"ETPS$\" IN THIS DATASET.\n\n              A NUMBER OF ENHANCEMENTS AND FIXES ARE INCLUDED IN THIS\n              VERSION, WHICH IS INDICATED AS 2.4 ON THE PRIMARY OPTION\n              MENU. TO INSTALL UNDER XA, JUST RE-ASSEMBLE USING THE\n              XA MACLIB AND AMODGEN. NO SOURCE CHANGES ARE REQUIRED.\n\n              WARNING: THE BUGS ARE NOT ALL OUT OF THIS BABY, SO DO\n                       SOME TESTING BEFORE YOU BET THE FARM ON IT.\n1\n   JDF$     - INSTALL DOC FOR ISPF/PDF JES2 DISPLAY FACILITY (JDF)\n\n              THIS PROGRAM PROVIDES THE ISPF/PDF USER WITH A DISPLAY OF\n              THE JES2 SPOOL, SIMILAR TO THE FAMOUS \"QUEUE\" COMMAND.\n\n              REQUIRES MY MODIFIED UAL JES2 INTERFACE SVC AND JES2\n              HJE2330.\n\n\n              WARNING: THERE IS SOME INSTALLATION-DEPENDENT CODE HERE,\n                       SO YOU MAY HAVE TO TINKER WITH IT.\n\n\n\n   JDFMACS  - A SET OF MACROS THAT GENERATE JDF DSECTS.\n\n   PLF$     - INSTALL DOC FOR ISPF/PDF PAN LIBRARY FACILITY (PLF)\n\n              THIS PROGRAM PROVIDES THE ISPF/PDF USER WITH A DISPLAY OF\n              A PAN LIBRARY, WITH THE ABILITY TO BROWSE AND EDIT FROM\n              A MEMBER LIST. THIS IS BASED IN PART ON THE \"PANVIEW\"\n              PROGRAM ON THE SHARE SPLA TAPE (I THINK). IT'S NOT NEARLY\n              AS GOOD AS THE PAN/SPF PRODUCT, OR SO I'M TOLD, BUT THIS\n              IS A LOT CHEAPER.\n\n\n   SMBROWSE - SPF MEMORY BROWSE PROGRAM, INVOKED WITH A PARAMETER LIST\n              POINTING TO AN AREA OF MEMORY. PROVIDES A LOW-OVERHEAD\n              BROWSE THAT CAN BE INVOKED FROM ISPF APPLICATIONS. USED\n              IN JDF.\n\n   SPFMACS  - A SET OF MACROS TO INVOKE ISPF SERVICES.\n\n   TCBUVTAM - A MACRO THAT GENERATES A DSECT USED BY ETPS. THIS IS FOR\n              A FUTURE ENHANCEMENT.\n\n   VDF$     - INSTALL DOC FOR ISPF/PDF VTOC DISPLAY FACILITY (VDF)\n\n              THIS PROGRAM PROVIDES THE ISPF/PDF USER WITH A DISPLAY OF\n              ALL OR SELECTED ONLINE DASD VOLUMES. THE DISPLAY USES THE\n              LSPACE SVC, SO IT DOESN'T HAVE A LOT OF INFORMATION ON\n              EACH PACK.\n\n              BECAUSE OF THE SIMPLICITY OF THE PROGRAM, THIS MAY BE A\n              GOOD PROGRAM TO SWIPE CODE FROM, IF YOU ARE WRITING YOUR\n              FIRST ISPF APPLICATION.\n\n   XDF$     - INSTALL DOC FOR ISPF/PDF EXECUTION DISPLAY FACILITY (XDF)\n\n              THIS PROGRAM PROVIDES THE ISPF/PDF USER WITH A DISPLAY OF\n              ACTIVE JOBS AND STARTED TASKS, BASED ON \"CHIMP\", UPDATED\n              FOR SP 2.1.3.\n1\n\n\n\n   GENERAL NOTE: SOME OF THE PROGRAMS REFERENCE THE CVTUSER FIELD IN THE\n                 CVT. AT OUR INSTALLATION, WE USE THAT FIELD TO POINT TO\n                 SOME INSTALLATION-SPECIFIC TABLES. FOR THE MOST PART,\n                 YOU CAN JUST DELETE THOSE REFERENCES, BUT YOU DO NEED\n                 TO REVIEW THEM.\n\n\n   COMMENTS OR QUESTIONS CAN BE DIRECTED TO:\n\n              BRIAN COOK\n              MORTON THIOKOL INC.\n              110 N. WACKER DRIVE\n              CHICAGO, ILLINOIS 60606\n\n              (312) 807-2466\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE353": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04a\\x00\\x00\\x01\\x19\\x00\\x9f\\x01\\x19\\x00\\x9f\\x12\\x00\\x00\\x8f\\x00\\x8f\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf7@@@'", "ispf": {"version": "04.97", "flags": 0, "createdate": "2019-01-09T00:00:00", "modifydate": "2019-01-09T12:00:00", "lines": 143, "newlines": 143, "modlines": 0, "user": "CBT-497"}, "text": "//***FILE 353 IS FROM MORTON THIOKOL INC. OF CHICAGO, ILLINOIS AND  *   FILE 353\n//*           CONTAINS THE FOLLOWING PROGRAMS TO RUN UNDER SPF.     *   FILE 353\n//*           THIS FILE IS IN IEBUPDTE SYSIN FORMAT.  SEE THE       *   FILE 353\n//*           MEMBER CALLED $$INDEX FOR ADDITIONAL INFORMATION:     *   FILE 353\n//*                                                                 *   FILE 353\n//*           KWS SPF SPY DIDOCS QUE QUEUE MCS Q                    *   FILE 353\n//*                                                                 *   FILE 353\n//*              APPLMON$ - INSTALL DOC FOR APPLMON                 *   FILE 353\n//*                                                                 *   FILE 353\n//*                         APPLMON IS A VTAM APPLICATION           *   FILE 353\n//*                         MONITOR.  IT PROVIDES A MULTI-USER      *   FILE 353\n//*                         INTERFACE TO NATIVE VTAM                *   FILE 353\n//*                         APPLICATIONS.  IT PROVIDES A            *   FILE 353\n//*                         FULL-SCREEN LOGON PANEL, A PRIMARY      *   FILE 353\n//*                         OPTION PANEL, AND 4 SAMPLE              *   FILE 353\n//*                         APPLICATIONS.  EACH USER THAT LOGS      *   FILE 353\n//*                         ON RUNS UNDER A SEPARATE TCB; THE       *   FILE 353\n//*                         NUMBER OF USERS THAT COULD BE           *   FILE 353\n//*                         SUPPORTED IN ONE ADDRESS SPACE IS       *   FILE 353\n//*                         DEPENDENT ON REGION SIZE.               *   FILE 353\n//*                                                                 *   FILE 353\n//*              CDF$     - INSTALL DOC FOR MVS SP 1.3 CONSOLE      *   FILE 353\n//*                         DISPLAY FACILITY (CDF)                  *   FILE 353\n//*                                                                 *   FILE 353\n//*                         THIS PROGRAM PROVIDES THE ISPF/PDF      *   FILE 353\n//*                         USER WITH A DISPLAY OF THE MASTER       *   FILE 353\n//*                         CONSOLE.  OPERATOR COMMANDS ARE         *   FILE 353\n//*                         ENTERED ON THE STANDARD \"COMMAND        *   FILE 353\n//*                         INPUT\" LINE; PF3 GETS YOU OUT.          *   FILE 353\n//*                         SECURITY IS BASED ON THE TSO USERID,    *   FILE 353\n//*                         SEE THE CODE FOR CUSTOMIZATION INFO.    *   FILE 353\n//*                         YOU HAVE TO HIT \"ENTER\" TO REFRESH      *   FILE 353\n//*                         THE DISPLAY.  YOU MUST ADJUST THE       *   FILE 353\n//*                         LINE COUNT BASED ON THE MASTER          *   FILE 353\n//*                         CONSOLE'S TERMINAL TYPE.                *   FILE 353\n//*                                                                 *   FILE 353\n//*              DIF      - ISPF/PDF DISPLAY INITIATORS FACILITY    *   FILE 353\n//*                         (DIF)--PART OF JDF.                     *   FILE 353\n//*                                                                 *   FILE 353\n//*              ETPS$    - INSTALL DOC FOR EMERGENCY               *   FILE 353\n//*                         TELE-PROCESSING SERVICES (ETPS).        *   FILE 353\n//*                                                                 *   FILE 353\n//*                         THIS PROGRAM PROVIDES SOME BASIC        *   FILE 353\n//*                         TIME-SHARING SERVICES WHEN TSO OR SPF   *   FILE 353\n//*                         IS UNAVAILABLE.  IF YOU DEFINE IT AS    *   FILE 353\n//*                         A SUB-SYSTEM, IT CAN BE (AND HAS        *   FILE 353\n//*                         BEEN, TO MY GREAT RELIEF) BROUGHT UP    *   FILE 353\n//*                         EVEN WHEN JES2 ABENDS, OR WILL NOT      *   FILE 353\n//*                         INITIALIZE.                             *   FILE 353\n//*                                                                 *   FILE 353\n//*                         THE BASIC PROCESSING APPEARS MUCH       *   FILE 353\n//*                         LIKE SPF, AS FAR AS THE PRIMARY         *   FILE 353\n//*                         OPTION MENU AND SO FORTH ARE            *   FILE 353\n//*                         CONCERNED.  THE FULL-SCREEN EDITOR IS   *   FILE 353\n//*                         QUITE PRIMITIVE, BUT SHOULD SUFFICE     *   FILE 353\n//*                         FOR EMERGENCY USE.  TUBE I/O IS EXCP,   *   FILE 353\n//*                         SO YOU DON'T NEED BTAM, TCAM, OR        *   FILE 353\n//*                         VTAM/TCAS.                              *   FILE 353\n//*                                                                 *   FILE 353\n//*                         THE PRIMARY OPTION MENU HAS 4 OPTIONS:  *   FILE 353\n//*                                     1. PDS BROWSE               *   FILE 353\n//*                                     2. PDS EDIT                 *   FILE 353\n//*                                     3. PDS UTILITY              *   FILE 353\n//*                                     4. IDCAMS INTERFACE         *   FILE 353\n//*                                                                 *   FILE 353\n//*                         TERMINALS SUPPORTED ARE 3278-2,         *   FILE 353\n//*                         3278-4, 3279-3B. INSTALL AND USER       *   FILE 353\n//*                         DOC ARE IN COMMENTS IN THE CODE, AS     *   FILE 353\n//*                         WELL AS IN MEMBER \"ETPS$\" IN THIS       *   FILE 353\n//*                         DATASET.                                *   FILE 353\n//*                                                                 *   FILE 353\n//*                         A NUMBER OF ENHANCEMENTS AND FIXES      *   FILE 353\n//*                         ARE INCLUDED IN THIS VERSION, WHICH     *   FILE 353\n//*                         IS INDICATED AS 2.4 ON THE PRIMARY      *   FILE 353\n//*                         OPTION MENU.  TO INSTALL UNDER XA,      *   FILE 353\n//*                         JUST RE-ASSEMBLE USING THE XA MACLIB    *   FILE 353\n//*                         AND AMODGEN.  NO SOURCE CHANGES ARE     *   FILE 353\n//*                         REQUIRED.                               *   FILE 353\n//*                                                                 *   FILE 353\n//*              JDF$     - INSTALL DOC FOR ISPF/PDF JES2           *   FILE 353\n//*                         DISPLAY FACILITY (JDF)                  *   FILE 353\n//*                                                                 *   FILE 353\n//*                         THIS PROGRAM PROVIDES THE ISPF/PDF      *   FILE 353\n//*                         USER WITH A DISPLAY OF THE JES2         *   FILE 353\n//*                         SPOOL, SIMILAR TO THE FAMOUS \"QUEUE\"    *   FILE 353\n//*                         COMMAND.                                *   FILE 353\n//*                                                                 *   FILE 353\n//*                         REQUIRES MY MODIFIED UAL JES2           *   FILE 353\n//*                         INTERFACE SVC AND JES2 HJE2330.         *   FILE 353\n//*                                                                 *   FILE 353\n//*              JDFMACS  - A SET OF MACROS THAT GENERATE JDF       *   FILE 353\n//*                         DSECTS.                                 *   FILE 353\n//*                                                                 *   FILE 353\n//*              PLF$     - INSTALL DOC FOR ISPF/PDF PAN LIBRARY    *   FILE 353\n//*                         FACILITY (PLF)                          *   FILE 353\n//*                                                                 *   FILE 353\n//*                         THIS PROGRAM PROVIDES THE ISPF/PDF      *   FILE 353\n//*                         USER WITH A DISPLAY OF A PAN            *   FILE 353\n//*                         LIBRARY, WITH THE ABILITY TO BROWSE     *   FILE 353\n//*                         AND EDIT FROM A MEMBER LIST.  THIS IS   *   FILE 353\n//*                         BASED IN PART ON THE \"PANVIEW\"          *   FILE 353\n//*                         PROGRAM ON THE SHARE SPLA TAPE (I       *   FILE 353\n//*                         THINK).  IT'S NOT NEARLY AS GOOD AS     *   FILE 353\n//*                         THE PAN/SPF PRODUCT, OR SO I'M TOLD,    *   FILE 353\n//*                         BUT THIS IS A LOT CHEAPER.              *   FILE 353\n//*                                                                 *   FILE 353\n//*              SMBROWSE - SPF MEMORY BROWSE PROGRAM, INVOKED      *   FILE 353\n//*                         WITH A PARAMETER LIST POINTING TO       *   FILE 353\n//*                         AN AREA OF MEMORY.  PROVIDES A          *   FILE 353\n//*                         LOW-OVERHEAD BROWSE THAT CAN BE         *   FILE 353\n//*                         INVOKED FROM ISPF APPLICATIONS.         *   FILE 353\n//*                         USED IN JDF.                            *   FILE 353\n//*                                                                 *   FILE 353\n//*              SPFMACS  - A SET OF MACROS TO INVOKE ISPF          *   FILE 353\n//*                         SERVICES.                               *   FILE 353\n//*                                                                 *   FILE 353\n//*              TCBUVTAM - A MACRO THAT GENERATES A DSECT USED     *   FILE 353\n//*                         BY ETPS.  THIS IS FOR A FUTURE          *   FILE 353\n//*                         ENHANCEMENT.                            *   FILE 353\n//*                                                                 *   FILE 353\n//*              VDF$     - INSTALL DOC FOR ISPF/PDF VTOC           *   FILE 353\n//*                         DISPLAY FACILITY (VDF).                 *   FILE 353\n//*                                                                 *   FILE 353\n//*                         THIS PROGRAM PROVIDES THE ISPF/PDF      *   FILE 353\n//*                         USER WITH A DISPLAY OF ALL OR           *   FILE 353\n//*                         SELECTED ONLINE DASD VOLUMES.  THE      *   FILE 353\n//*                         DISPLAY USES THE LSPACE SVC, SO IT      *   FILE 353\n//*                         DOESN'T HAVE A LOT OF INFORMATION ON    *   FILE 353\n//*                         EACH PACK.                              *   FILE 353\n//*                                                                 *   FILE 353\n//*                         BECAUSE OF THE SIMPLICITY OF THE        *   FILE 353\n//*                         PROGRAM, THIS MAY BE A GOOD PROGRAM     *   FILE 353\n//*                         TO SWIPE CODE FROM, IF YOU ARE          *   FILE 353\n//*                         WRITING YOUR FIRST ISPF APPLICATION.    *   FILE 353\n//*                                                                 *   FILE 353\n//*              XDF$     - INSTALL DOC FOR ISPF/PDF EXECUTION      *   FILE 353\n//*                         DISPLAY FACILITY (XDF)                  *   FILE 353\n//*                                                                 *   FILE 353\n//*                         THIS PROGRAM PROVIDES THE ISPF/PDF      *   FILE 353\n//*                         USER WITH A DISPLAY OF ACTIVE JOBS      *   FILE 353\n//*                         AND STARTED TASKS, BASED ON \"CHIMP\",    *   FILE 353\n//*                         UPDATED FOR SP 2.1.3.                   *   FILE 353\n//*                                                                 *   FILE 353\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "APPLDEF": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "CBT353"}, "text": "APPLDEF  VBUILD TYPE=APPL\n*\nAPPLMON  APPL  AUTH=(ACQ),         APPLICATION MAY ACQUIRE LU'S        *\n               EAS=10              APPROXIMATE CONCURRENT SESSIONS\n*\nPOF001   APPL  AUTH=(SPO),EAS=1    SECONDARY PROGRAM OPERATOR\nPOF002   APPL  AUTH=(SPO),EAS=1    SECONDARY PROGRAM OPERATOR\nPOF003   APPL  AUTH=(SPO),EAS=1    SECONDARY PROGRAM OPERATOR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "APPLJOB": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x05\\x00\\x05\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "CBT353"}, "text": "//APPLMON PROC\n//*\n//COMM      EXEC PGM=APPLMON\n//STEPLIB   DD DISP=SHR,DSN=                    <== AUTHORIZED!!!\n//SYSUDUMP DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "APPLMON": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x04\\xba\\x04\\xba\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 1210, "newlines": 1210, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCMON  JOB (X0002,QCC,ASQCC),'X-BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=99,SYSAFF=MVSA\n//ASM     EXEC PGM=IEV90,REGION=1024K,\n//             PARM='XREF(SHORT),OBJECT,NODECK,TERM,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DISP=SHR,DSN=SYS2.MACLIB       <== TCBUVTAM\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nAPPLMON  TITLE 'CHANGE LOG'\n***********************************************************************\n*                                                                     *\n* CHANGE LOG                                                          *\n*                                                                     *\n*  1/12/87 BRIAN COOK   FIXED BUG IN \"QEDIT\" ROUTINE, S0C1            *\n*                                                                     *\n* 10/17/85 BRIAN COOK   ADDED \"QEDIT\" FOR SHUTDOWN.                   *\n*                                                                     *\n*  7/24/85 BRIAN COOK   CHANGED SOME OF THE SHUTDOWN LOGIC. STILL     *\n*                       SHUTS DOWN REGION WHEN A USER LOG'S OFF.      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         TITLE 'A P P L M O N - VTAM APPLICATION MONITOR'\n***********************************************************************\n*                                                                     *\n*     MODULE NAME: APPLMON1                                           *\n*                                                                     *\n*     DESCRIPTIVE NAME: VTAM APPLICATION                              *\n*                                                                     *\n*     FUNCTION: ALLOWS COMMUNICATION FROM TERMINALS IN                *\n*               THE VTAM NETWORK                                      *\n*                                                                     *\n*     AUTHOR: BRIAN COOK, MORTON, 1984                                *\n*                                                                     *\n*                                                                     *\n*      APPLMON PROC IN PROCLIB IS AS FOLLOWS:                         *\n*                                                                     *\n* //APPLMON PROC                                                    ***\n* //APPLMON EXEC PGM=APPLMON1                                       ***\n* //STEPLIB DD DSN=SYS2.LINKLIB,DISP=SHR <-- AUTH LIB               ***\n* //*                                                               ***\n* //*******************************************************************\n*                                                                     *\n*                                                                     *\n*      APPLMON APPL DEFINITIONS ARE AS FOLLOWS:                       *\n*                                                                     *\n*  APPLMON APPL  BUFFACT=1,AUTH=(ACQ,PASS,NVPACE)                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*\n***********************************************************************\n*                                                                     *\n* INITIAL HOUSEKEEPING - ENTRY CODE FOR OS/VS.                        *\n* SAVE REGISTERS, ESTABLISH ADDRESSABILITY, SET UP SAVE AREA.         *\n*                                                                     *\n***********************************************************************\n*\nAPPLMON  CSECT\n         USING *,11           TEMP BASE\n         STM   14,12,12(13)                      SAVE REGISTERS\n         LR    R11,15         LOAD BASE REG\n         L     R3,0(R1)       PICK UP PARM REGISTER\n         B     PSTART         JUMP ID\nMODULEID DC    AL1(7),C'APPLMON'   ID\nPSTART   DS    0H\n         L     R9,GTSIZE1     SIZE OF SAVE AREA REQUIRED\n*\n         GETMAIN R,LV=(9)\n*\n         LR    R8,R1           SAVE ADDRESS\n*\n         ST    R8,8(,13)       SAVE\n         ST    13,4(,R8)        AREA\n         LR    R13,R8            FOR CALLEES\n         USING APPLVTAM,13,12     SAVE AREA DSECT ADDRESSING\n         LR    R12,R13            SET DATA\n         A     R12,FOURK                   BASE 2\n*\n* SET INITIAL VALUES IN MY TCBUSER AREA\n*\n         MVI   APGMCMD,C' '\n*\n         LA    R1,ACBTERMS        SET POINTER TO ACB\n         ST    R1,APPLACBA        SET POINTER TO ACB\n*\n         LA    R4,LOGONNIB        SET POINTER TO NIB\n         ST    R4,APPLNIBA        SET POINTER TO NIB\n         LA    R2,PRIMARPL        SET POINTER TO RPL\n         ST    R2,APPLRPLA        SET POINTER TO RPL\n*\n         MVC   APPLKILL(4),SPACES\n*\n         LA    R15,VGET\n         ST    R15,APPLVGET\n         LA    R15,VPUT\n         ST    R15,APPLVPUT\n         LA    R15,VSIZE\n         ST    R15,APPLVSIZ\n*\n         LA    R15,APGMECB1\n         ST    R15,APPLECB1\n         LA    R15,APGMECB2\n         ST    R15,APPLECB2\n*\n         LA    R15,APGMCMD\n         ST    R15,APPLCMD\n         LA    R15,APGMRPLA\n         ST    R15,APPLWORD\n*\n         MVC   QEDXTRC(QEDXTRCL),QEDXTRC1\n*\n* FILL IN TCBUSER ADDRESS FOR MY TCB\n*\n         MODESET KEY=ZERO          KEY ZERO TO STORE INTO TCB\n         USING PSA,0\n         L     R1,PSATOLD\n         USING TCB,1\n         ST    R13,TCBUSER\n         DROP  1\n*\n* BECOME NON-SWAPPABLE\n*\n         SYSEVENT DONTSWAP\n*\n* FILL IN TCBUSER ADDRESS FOR THE REGION CONTROL TASK TCB\n*\n         L     R1,PSAAOLD\n         USING ASCB,1\n         L     R1,ASCBRCTP        REGION CONTROL TASK TCB\n         DROP  1\n         USING TCB,1\n         ST    R13,TCBUSER\n         DROP  1\n         MODESET KEY=NZERO         RESET KEY\n*\n         USING IFGRPL,R2          RPL DSECT ADDRESSING\n         LA    R8,ACBTERMS        SET BASE FOR ACB\n         USING IFGACB,R8          ACB DSECT ADDRESSING\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         PRINT NOGEN\n*\n***********************************************************************\n*        SET UP ESTAE ENVIRONMENT                                     *\n***********************************************************************\n*\nSETSTAE  DS    0H\n         B     AFTESTAE                       BYPASS\n         ESTAE ABEXIT,ASYNCH=YES,TERM=YES\nAFTESTAE DS    0H\n*\n         TITLE 'A P P L M O N - OPEN ACB'\n***********************************************************************\n*                                                                     *\n* OPEN THE ACB FOR TERMINALS.                                         *\n*                                                                     *\n***********************************************************************\n*\nOPENTCNT DS    0H\nOPENT    OPEN  ((R8))             OPEN THE ACB FOR TERMINALS\n         LTR   R2,R15             CHECK AND SAVE RETURN CODE\n         BZ    OPENPRNT           GO OPEN THE PRINT FILE\n*\n* OPEN DID NOT SUCCEED: CHECK ERROR TYPE\n*\n         CLI   ACBERFLG,ACBONVRT  STORAGE SHORTAGE?\n         BE    OPENT              YES - RETRY\n         CLI   ACBERFLG,90        APPL NOT DEFINED?\n         BE    OPNOTDEF           YES - ISSUE MSG\n         SR    R3,3\n         IC    R3,ACBERFLG\nOPAB1024 DS    0H\n         ABEND 1024,DUMP,STEP\nOPNOTDEF DS    0H\n         WTO   'ERROR  APPLMON APPLID NOT DEFINED TO VTAM           ', *\n               ROUTCDE=11\n*\n         B     MAINRET\n*\nOPENPRNT DS    0H\n         OPEN  (NETPRINT,(OUTPUT))\n         B     STARTLGN           GO LET'R RIP\n*\nGTSIZE1  DC    A(APPLLENG)       LENGTH OF MY GETMAIN\n*\nFOURK    DC    F'4096'            4K FOR BUMPING BASE REGS\n*\n         TITLE 'A P P L M O N - START LOGONS'\n*\nSTARTLGN DS    0H\n         LA    R2,PRIMARPL\n         SETLOGON OPTCD=START,    START LOGONS                         *\n               ACB=ACBTERMS,                                           *\n               RPL=PRIMARPL\n         LTR   R4,R15            OK?\n         BZ    DOQEDIT            YES\n         CH    R0,RETRY           IF RETRIABLE ERROR\n         BE    STARTLGN            THEN RETRY\n         STM   R0,R1,ABREGS SAVE REGS CLOBBERED BY ABEND MACRO\n         ABEND 10,DUMP,STEP\n*\n         TITLE 'ESTABLISH STOP/MODIFY ENVIRONMENT'\nDOQEDIT  DS    0H\n***********************************************************************\n*\n*        MODIFYING:\n*\n*          F APPLMON,STOP          END   AFTER ALL USERS ARE STOPPED\n*          F APPLMON,CANCEL,UID    CANCEL USER SESSION AND CLSDST\n*\n*        STOPPING:\n*\n*          P APPLMON               END IMMEDIATELY\n*\n***********************************************************************\n*\n**       LOCATE STOP/MODIFY ECB\n*\n         EXTRACT QEDCOMMP,MF=(E,QEDXTRC)\n         L     R1,QEDCOMMP         GET PTR TO COMM/CIB ORG WORDS\n         MVC   QEDCOMM,0(R1)       COPY ADDR OF ECB\n         OI    QEDCOMM,X'80'       INDICATE COMM ECB IS LAST IN LIST\n         LA    R2,4(R1)            POINT TO CIB ORIGIN\n         QEDIT ORIGIN=(R2),CIBCTR=2 ALLOW 2 MODIFIES\n*\n         TITLE 'WAIT FOR WORK FROM LOGGED-ON USERS, OR OPERATOR'\nLOGONWT  DS    0H\n*\n         MVI   APGMCMD,C' '\n         STIMER WAIT,BINTVL=TENSEC\n         B     QEDMCK\n*\n         TITLE 'CHECK FOR STOP/MODIFY'\nQEDMCK   DS    0H\n         L     R1,QEDCOMM          GET COMM PTRS\n         TM    0(R1),X'40'         POSTED?\n         BNO   LOGONWT             NO - WAIT AGAIN\n*        BNO   4(R11)              NO - RETURN +4\nQEDMLOOK DS    0H                  LOOK FOR CIB S\n         L     R2,QEDCOMMP         GET COMM PTRS\n         L     R2,4(R2)            CIB ORG\n         LTR   R2,R2               END OF CHAIN\n         BZ    QEDMFINI            END\n         CLI   4(R2),X'40'         STOP\n         BE    QEDMSTOP\n         CLI   4(R2),X'44'         MODIFY\n         BE    QEDMMOD\n         CLI   4(R2),X'04'         START\n         BE    QEDMMOD             HANDLE LIKE MOD\nQEDMDEL  DS    0H                  DELETE A CIB\n         L     R3,QEDCOMMP         ORG.\n         LA    R3,4(R3)            POINT TO POINTER (TRUST ME)\n         QEDIT ORIGIN=(R3),BLOCK=(2)  DELETE BLOCK\n         B     QEDMLOOK            LOOK FOR MORE\n         TITLE 'PICK UP MODIFY TEXT'\n*\n****PROCESS MODIFY\n*\nQEDMMOD  DS    0H\n         LA    R0,QEDTXT           HOLD AREA\n         LA    R1,L'QEDTXT         L'\n         LH    R15,14(R2)          L' OF MODIFY\n         LA    R15,2(R15)          +2BYTE LEN\n         ICM   R15,8,=C' '         PAD W/ BLANKS\n         LA    R14,14(R2)          GET FROM ADDR\n         MVCL  R0,R14              MOVE MODIFY TEXT\n         MVC   QEDCONID,12(R2)     SAVE MCS ID. FOR RESPONSE\n*\n**             NULL INPUT\n*\n         CLI   QEDTXT+2,C' '       NULL INPUT\n         BE    QEDMDEL             JUST DELETE IT\n*\n         TITLE 'PROCESS MODIFY  STOP  COMMAND'\nQEDMSTOP DS    0H\n*\n         CLC   =C'STOP',QEDTXT+2   STOP AFTER CURR. D.S.\n         BNE   QEDMCANC            NO - TRY CANCEL USER\n         MVI   QEDSTOPA,C'Y'       SET IT\n*\n**             STOP (AFTER STOPPING ALL USERS)\n*\n         B     SHUTDOWN\n*\n         TITLE 'PROCESS MODIFY  CANCEL USER   COMMAND'\nQEDMCANC DS    0H\n*\n         CLC   =C'CANCEL',QEDTXT+2  CANCEL USER\n         BNE   QEDOTHER            NO-TRY START\n*\n**             CANCEL USERID\n*\n         B     QEDMFINI\n*\n         TITLE 'PROCESS MODIFY  OTHER   COMMAND'\nQEDOTHER DS    0H\n*\n**             PUT OTHER TESTS HERE\n*\n         B     QEDMDEL             JUST DELETE IT\nQEDMFINI DS    0H\n*\n         CLI   APGMCMD,C' '       COMMAND REQUESTED?\n         BE    LOGONWT\n*\n*\nCHECKCMD DS    0H\n         CLC   APGMCMD(4),=C'CLOS'   CLSDST REQUESTED\n         BNE   CHECKDN               NO\n*\n         L     R2,APGMRPLA           PICK UP RPL\n*\nRECLOSE  DS    0H\n         CLSDST RPL=(R2),AREA=0,OPTCD=(RELEASE,SYN)\n         LTR   R15,R15            OK?\n         BZ    CLOSEED            YES\n         CH    R0,RETRY           IF RETRIABLE ERROR\n         BE    RECLOSE             THEN RETRY\n*\nCLOSEED  DS    0H\n         LA    R2,APGMECB2\n         POST  (2)\n         B     LOGONWT            BRANCH IF SUCCESSFUL\n*\nCHECKDN  DS    0H\n         CLC   APGMCMD(4),=C'SHUT'   SHUTDOWN REQUESTED\n         BE    SHUTDOWN              YES\n*\n*\n         ABEND 99,DUMP,STEP\n*\nSHUTDOWN DS    0H\n*\n*   FIRST POST THE SUBTASK THAT REQUESTED TERMINATE\n*\n         LA    R2,APGMECB2\n         POST  (2)\n*\n*   NEXT WAIT FOR SUBTASKS TO TERMINATE\n*\n         STIMER WAIT,BINTVL=TENSEC\n*\n*   NEXT CLOSE THE VTAM ACB\n*\n         LA    R8,ACBTERMS        SET ACB ADDRESS\n         SR    R15,R15            CLEAR RETURN CODE REGISTER\n         CLOSE ((R8))             CLOSE ACB FOR TERMINALS\n*\n         B     MAINRET            GO CLOSE DOWN\n*\n         TITLE 'A P P L M O N - CLOSE DOWN'\n*\n* INDICATE PO IS CLOSING DOWN\n*\nCLOSNTP  DS    0H\n         LA    R8,ACBTERMS        SET ACB ADDRESS\n         SR    R15,R15            CLEAR RETURN CODE REGISTER\n         CLOSE ((R8))             CLOSE ACB FOR TERMINALS\n         LTR   R6,R15             CHECK RETURN CODE\n         BZ    MAINRET            BRANCH IF SUCCESSFUL\n         CLI   ACBERFLG,ACBTVTCL  CLOSE DURING ABTERM?\n         BE    MAINRET            YES - IGNORE\n* CLOSE FAILED - INFORM OPERATOR AND TERMINATE PO.\n*        WTO   ,MF=(E,NTP07MSG)\n*TP07MSG WTO   'ERROR  UNABLE TO CLOSE ACB FOR APPLMON  ',\n*              ROUTCDE=2,MF=L\n         WTO   'ERROR  UNABLE TO CLOSE ACB FOR APPLMON  ',             *\n               ROUTCDE=11\n*\n*\n***********************************************************************\n* EXIT CODE                                                           *\n***********************************************************************\n*\nMAINRET  DS    0H\n         TM    NETPRINT+48,X'10'  PRINT FILE OPEN\n         BZ    MAINRET3           NO - IGNORE\n         CLOSE NETPRINT\nMAINRET3 DS    0H\n*\n         LR    R2,R13\n*\n         L     R9,GTSIZE1      LENGTH OF GETMAINED AREA\n*\n         L     R13,4(,R13)     RESTORE SAVE AREA POINTER\n         FREEMAIN R,LV=(9),A=(2)\n         LM    R14,R12,12(R13) RESTORE REGS\n         SR    R15,15\n         BR    R14             RETURN TO CALLER\nSPACES   DC    CL8' '\nTENSEC   DC    F'1000'         10-SECOND WAIT INTERVAL\n         LTORG\n*\n         TITLE 'A P P L M O N - ESTAE EXIT'\n*        ESTAE EXIT\n*\n         DS    0F                 ALIGN\n         USING *,10\nABEXIT   DS    0H\n         STM   14,12,12(13)                      SAVE REGISTERS\n         LR    R10,R15            LOAD EXIT BASE ADDRESS\n         LR    R4,R1          SAVE SDWA PTR\n         USING SDWA,R4        TELL ASMBLR\n         B     ABEXIT2\n         DC    CL8'ABEXIT'        EXIT ID\nABEXIT2  DS    0H\n*\n* PICK UP TCBUSER ADDRESS FOR THE REGION CONTROL TASK TCB\n*\n         L     R1,PSAAOLD\n         USING ASCB,1\n         L     R1,ASCBRCTP        REGION CONTROL TASK TCB\n         DROP  1\n         USING TCB,1\n         L     R1,TCBUSER\n         DROP  1\n         USING APPLVTAM,1\n         LR    R2,R13             PRESERVE HIGHER R13\n         LA    R13,APPLESAV\n         USING APPLESAV,13\n*\n         ST    R13,8(,R2)         CHAIN FORWARD\n         ST    R2,4(,R13)         CHAIN BACK\n*\n         MVC   APGMCMD(4),=C'SHUT'   SHUTDOWN REQUESTED\n         XC    APGMECB2(4),APGMECB2\n         LA    R2,APGMECB1\n         POST  (2)\n         LA    R2,APGMECB2\n         WAIT  ECB=(2)\nABRET    MVI   SDWARCDE,0         SET RETURN CODE\n*\n         L     R13,4(,R13)     RESTORE SAVE AREA POINTER\n         LM    R14,R12,12(R13) RESTORE REGS\n         SR    R15,15\n         BR    R14             RETURN TO CALLER\n*\n         LTORG\n         TITLE 'A P P L M O N - LOGON EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: LOGON EXIT                                                    *\n*                                                                     *\n* FUNCTION: TO ESTABLISH CONNECTIONS WITH A TERMINAL.                 *\n*                                                                     *\n* DESCRIPTION: SETS UP THE TCB USER AREA AND ATTACHES APPLOGO  TO     *\n*              COMPLETE THE LOGON.                                    *\n*                                                                     *\n* ENTRY POINT: LOGON                                                  *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R0    UNPREDICTABLE                                          *\n*        R1    @ PARAMETER LIST CONTAINING                            *\n*              (1) @ ACBTERMS                                         *\n*              (2) @ TERMINAL NAME                                    *\n*              (3) RESERVED                                           *\n*              (4) LENGTH OF LOGON MESSAGE                            *\n*        R2-13 UNPREDICTABLE                                          *\n*        R14   RETURN ADDRESS IN VTAM                                 *\n*        R15   ADDRESS OF LOGON EXIT                                  *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              POINTER TO RPL     R2                                  *\n*              POINTER TO NIB     R4                                  *\n*              WORK REGS          R6,R7                               *\n*              SUBROUTINE RETURN  R14                                 *\n*              SAVE AREA ADDRESS  R13                                 *\n*              BASES              R10,R11,R12                         *\n*              VTAM CALLS         R15,R15,R14                         *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*              VTAM EXLST EXIT                                        *\n*                                                                     *\n*\n***********************************************************************\n*\n         USING *,10\nLOGON    DS    0H\n         LR    R10,R15            LOAD EXIT BASE ADDRESS\n         LR    R9,R1              SAVE LOGON PARM POINTER\n         B     LOGON2\n         DC    CL8'LOGON '        EXIT ID\nLOGON2   DS    0H\n*\n* PICK UP TCBUSER ADDRESS FOR THE REGION CONTROL TASK TCB\n*\n         L     R1,PSAAOLD\n         USING ASCB,1\n         L     R1,ASCBRCTP        REGION CONTROL TASK TCB\n         DROP  1\n         USING TCB,1\n         L     R1,TCBUSER\n         DROP  1\n         USING APPLVTAM,1\n         LA    R13,APPLLSAV\n         USING APPLLSAV,13\n*\n         ST    R14,0(,R13)        SAVE RETURN ADDRESS\n*\n***********************************************************************\n*        SET UP APPLICATION GETMAINED AREA                            *\n***********************************************************************\n*\n*\n         L     R4,GTSIZE2         GET APPLICATION TCBUSER AREA\n         GETMAIN R,LV=(4)\n         LR    R3,R1              SAVE GETMAIN POINTER\n         USING TCBUVTAM,3\n*\n* FILL IN TCBUSER AREA\n*\n*\n         LA    R1,ACBTERMS        SET POINTER TO ACB\n         ST    R1,TCBUACBA        SET POINTER TO ACB\n*\n         MVC   TCBUNIB(128),LOGONNIB\n         LA    R4,TCBUNIB         SET POINTER TO NIB\n         ST    R4,TCBUNIBA        SET POINTER TO NIB\n         USING ISTDNIB,R4         NIB DSECT ADDRESSING\n*\n         LR    R1,R9              SAVE LOGON PARM POINTER\n         MVC   TCBURPL(128),MOVERPL\n         LA    R2,TCBURPL         SET POINTER TO RPL\n         ST    R2,TCBURPLA        SET POINTER TO RPL\n         USING LOGONPRM,R1        LOGON PARM DSECT ADDRESSING\n         L     R15,LOGONLU        PICK UP TERMINAL NAME\n         DROP  1\n*\n         MVC   NIBSYM(8),0(R15) SET TO LU NAME\n         ST    R3,NIBUSER\n         ST    R3,RPLUSFLD\n         MVC   TCBULU(8),0(R15) SET TO LU NAME\n         MVC   TCBUSRID(8),=CL8'ANY'\n         MVC   TCBUAPPL(8),=CL8'APPLMON'\n*\n         MVC   RPLARG(4),TCBUNIBA\n         OI    RPLEXTD1,RPLNIB\n*\n*        GET SESSION PARAMETERS\n*\n         INQUIRE RPL=(2),                                              *\n               ACB=ACBTERMS,                                           *\n               NIB=(4),                                                *\n               AREALEN=80,AREA=SESSBIND,                               *\n               OPTCD=(SYN,SESSPARM)\n*\n*\n*        SET TERMINAL ROWS AND COLUMNS FOR GTSIZE\n*\n         LA    15,SESSBIND\n         USING ISTDBIND,15\n         MVC   TCBUROWS(1),BINSALTR\n         MVC   TCBUCOLS(1),BINSALTC\n         DROP  15\n*\n         MVC   TCBUKILL(4),BLANKS\n*\n         LA    R15,VGET\n         ST    R15,TCBUVGET\n         LA    R15,VPUT\n         ST    R15,TCBUVPUT\n         LA    R15,VSIZE\n         ST    R15,TCBUVSIZ\n*\n         LA    R15,APGMECB1\n         ST    R15,TCBUECB1\n         LA    R15,APGMECB2\n         ST    R15,TCBUECB2\n*\n         LA    R15,APGMCMD\n         ST    R15,TCBUCMD\n         LA    R15,APGMRPLA\n         ST    R15,TCBUWORD\n*\n* ISSUE OPNDST TO ACCEPT THE TERMINAL.\n*\n         OPNDST RPL=(2),          ACCEPT THE TERMINAL                  *\n               ACB=ACBTERMS,                                           *\n               NIB=(4),                                                *\n               OPTCD=Q\n         LTR   R15,R15            IF RTNCD = UNSUCCESSFUL\n         BNZ   BADOPN              THEN FORGET IT\n*\nGOODOPN  DS    0H\n*\n         ST    R3,0(,R3)         SAVE PARM POINTER IN FIRST WORD\n         OI    0(R3),X'80'\n         LA    R1,0(,R3)\n         ATTACH EP=APPLOGO\n*\n         B     LGNRET\n*\nBADOPN   DS    0H\n*\n         L     R4,GTSIZE2        LENGTH OF APPLICATION TCBUSER AREA\n         FREEMAIN R,LV=(4),A=(3)\n*\nLGNRET   DS    0H\n*\n         L     R14,0(,R13)        SAVE RETURN ADDRESS\n         SR    R15,15\n         BR    R14             RETURN TO CALLER\n*\n         LTORG\nGTSIZE2  DC    A(TCBULENG)       LENGTH OF APPLICATION GETMAIN\nBLANKS   DC    CL4' '\n         TITLE 'A P P L M O N - LOSTERM EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: LOSTERM EXIT                                                  *\n*                                                                     *\n* FUNCTION: TO TAKE APPROPRIATE ACTION WHEN CONTACT HAS BEEN LOST     *\n*        WITH A TERMINAL.                                             *\n*                                                                     *\n* DESCRIPTION: THIS ROUTINE SHOULD EXAMINE THE RETURN CODE IN THE     *\n*        PARAMETER LIST BUT FOR THE MOMENT IT CHECKS FOR MASTER LOST, *\n*        REASSIGNS MASTER IF SO, AND ISSUES CLSDST UNLESS CLOSEDOWN   *\n*        IS IN PROGRESS.                                              *\n*                                                                     *\n* ENTRY POINT: LOSTERM                                                *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R0    UNPREDICTABLE                                          *\n*        R1    @ PARAMETER LIST CONTAINING                            *\n*              (1) @ ACBTERMS                                         *\n*              (2) CID                                                *\n*              (3) NIB USERFLD                                        *\n*              (4) CODE INDICATING WHY ENTERED                        *\n*                       CODES ARE:                                    *\n*                         0 - DIAL-LINE DISCONNECTED ON DIAL-IN TERM  *\n*                         4 - DIAL-LINE DISCONNECTED ON DIAL-OUT TERM *\n*                         8 - RESERVED                                *\n*                        12 - MANY REASONS SEE MANUAL - SHUTDOWN      *\n*                        16 - SUCCESSFULLY RECONTACTED                *\n*                        20 - UNCONDITIONAL TERMINATE SELF            *\n*                        24 - POSSIBLE TO RECOVER                     *\n*                        28 - INCOMPLETE OR INVALID SEGEMENTED REQUEST*\n*                        32 - CONDITIONAL TERMINATE SELF              *\n*                        36 - BUFFER LIMIT EXECEEDED                  *\n*                        40 - TEST REQ KEY OR TOLTEP IS TAKING OVER   *\n*                                                                     *\n*        R2-13 UNPREDICTABLE                                          *\n*        R14   RETURN ADDRESS IN VTAM                                 *\n*        R15   ADDRESS OF LOSTERM EXIT                                *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              POINTER TO RPL     R2                                  *\n*              WORK REGS          R6,R7                               *\n*              SAVE AREA ADDRESS  R13                                 *\n*              BASES              R10,DR10,R12                        *\n*              VTAM CALLS         R15,R15,R14                         *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*                                                                     *\n* EXIT, ERROR: ABEND                                                  *\n*                                                                     *\n* CALLS: NONE                                                         *\n*                                                                     *\n* ATTRIBUTES: VTAM EXLST EXIT                                         *\n*                                                                     *\n***********************************************************************\n*\n         USING *,10\nLOSTERM  DS    0H\n         LR    R10,R15            LOAD EXIT BASE ADDRESS\n         LR    R11,R1         SAVE PARM PTR\n         B     LOSTERM2\n         DC    CL8'LOSTERM'       EXIT ID\nLOSTERM2 DS    0H\n*\n* PICK UP TCBUSER ADDRESS FOR THE REGION CONTROL TASK TCB\n*\n         L     R1,PSAAOLD\n         USING ASCB,1\n         L     R1,ASCBRCTP        REGION CONTROL TASK TCB\n         DROP  1\n         USING TCB,1\n         L     R1,TCBUSER\n         DROP  1\n         USING APPLVTAM,1\n         LR    R2,R13             PRESERVE HIGHER R13\n         LA    R13,APPLTSAV\n         USING APPLTSAV,13\n         ST    R14,0(,R13)        SAVE RETURN ADDRESS\n*\n         TM    LOSINUSE,INUSE     SAVE AREA IN USE?\n         BZ    NOLOSABE           NO\n         STM   R0,R1,ABREGS   SAVE REGS CLOBBERED BY ABEND MACRO\n         ABEND 13,DUMP,STEP\nNOLOSABE DS    0H\n*\n         OI    LOSINUSE,INUSE     FLAG SAVE AREA IN USE\n         USING LOSTPARM,R11       LOSTERM PARM DSECT ADDRESSING\n         L     R11,LOSTUSER\n         USING TCBUVTAM,11\n*\n         MVC   APGMCMD(4),=C'CLOS'   CLOSE THIS TERMINAL\n         XC    APGMECB2(4),APGMECB2\n         MVC   APGMRPLA(4),TCBURPLA\n         LA    R2,APGMECB1\n         POST  (2)\n         LA    R2,APGMECB2\n         WAIT  ECB=(2)\n*                                 RETURN\nLOSTRET  NI    LOSINUSE,255-INUSE FLAG SAVE AREA FREE\n         L     R14,0(,R13)        SAVE RETURN ADDRESS\n         BR    R14                     AND RETURN\n         LTORG\n         TITLE 'APPLMON - TPEND EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: TPEND EXIT                                                    *\n*                                                                     *\n* FUNCTION: TO NOTIFY PO OF VTAM SHUTDOWN.                            *\n*                                                                     *\n* DESCRIPTION: SAVES REASON CODE AND POSTS CLOSEDOWN ECB.             *\n*                                                                     *\n* ENTRY POINT: TPEND                                                  *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R1    @ PARAMETER LIST CONTAINING:                           *\n*              (1) @ ACBTERMS                                         *\n*              (2) REASON CODE                                        *\n*        R14   RETURN ADDRESS                                         *\n*        R15   TPEND ENTRY POINT ADDRESS                              *\n*                                                                     *\n* EXIT, NORMAL: BR 14                                                 *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* ATTRIBUTES: SERIALLY REUSABLE                                       *\n*              VTAM EXLST EXIT                                        *\n*                                                                     *\n***********************************************************************\n*\n         USING *,10\nTPEND    DS    0H\n         LR    R10,R15            LOAD EXIT BASE ADDRESS\n         LR    R11,R1         SAVE PARM PTR\n         B     TPEND2\n         DC    CL8'TPEND'         EXIT ID\nTPEND2 DS      0H\n*\n* PICK UP TCBUSER ADDRESS FOR THE REGION CONTROL TASK TCB\n*\n         L     R1,PSAAOLD\n         USING ASCB,1\n         L     R1,ASCBRCTP        REGION CONTROL TASK TCB\n         DROP  1\n         USING TCB,1\n         L     R1,TCBUSER\n         DROP  1\n         USING APPLVTAM,1\n         LR    R2,R13             PRESERVE HIGHER R13\n         LA    R13,APPLTSAV\n         USING APPLTSAV,13\n         ST    R14,0(,R13)        SAVE RETURN ADDRESS\n*\n         TM    TPEINUSE,INUSE     SAVE AREA IN USE?\n         BZ    NOTPEABE           NO\n         STM   R0,R1,ABREGS   SAVE REGS CLOBBERED BY ABEND MACRO\n         ABEND 13,DUMP,STEP\nNOTPEABE DS    0H\n*\n         ST    R13,8(,R2)         CHAIN FORWARD\n         ST    R2,4(,R13)         CHAIN BACK\n*\n         OI    TPEINUSE,INUSE     FLAG SAVE AREA IN USE\n*\n         MVC   APGMCMD(4),=C'SHUT'   SHUTDOWN REGION\n         XC    APGMECB2(4),APGMECB2\n         LA    R2,APGMECB1\n         POST  (2)\n         LA    R2,APGMECB2\n         WAIT  ECB=(2)\n*                                 RETURN\nTPETRET  NI    TPEINUSE,255-INUSE FLAG SAVE AREA FREE\n         L     R14,0(,R13)        SAVE RETURN ADDRESS\n         BR    R14                     AND RETURN\n         LTORG\n         TITLE 'A P P L M O N - ERROR EXIT'\n***********************************************************************\n*                                                                     *\n* NAME: SYNAD/LERAD                                                   *\n*                                                                     *\n* FUNCTION: TO SET A RETURN CODE IN R15 BASED ON ERROR TYPE.          *\n*                                                                     *\n* ENTRY POINT: ERROR                                                  *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*        R0    RECOVERY ACTION RETURN CODE                            *\n*        R1    @RPL                                                   *\n*                                                                     *\n*        R2-12 UNDETERMINED                                           *\n*        R13   UNMODIFIED SINCE MACRO ISSUED - CALLERS SA, SAVED      *\n*        R14   RETURN ADDRESS IN VTAM, SAVED                          *\n*        R15   ADDRESS OF ERROR EXIT                                  *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*              BASE REG R15                                           *\n*              RPL BASE R1                                            *\n*                                                                     *\n* EXIT,NORMAL: BR 14                                                  *\n*              R15 SET TO:        16 ENVIRONMENT ERROR (FROM LERAD)   *\n*                                 20 LOGIC ERROR (FROM LERAD)         *\n*                                                                     *\n* EXIT, ERROR: NONE                                                   *\n*                                                                     *\n* CALLS: NONE (IF ANY ARE MADE TO VTAM ANOTHER SA MUST BE CHAINED)    *\n*                                                                     *\n* ATTRIBUTES: VTAM EXLST EXIT (BOTH SYNAD AND LERAD)                  *\n*                                                                     *\n* NOTE:       ERRSAVE%+C% POINTS TO MACRO IN ERROR                    *\n*                                                                     *\n***********************************************************************\n*\n*\n*                              HAIN SAVE AREAS\n         DS    0F                 ALIGN\n         USING *,R15\n         USING IFGRPL,R1\nERROR    DS    0H\n         CLI   RPLRTNCD,USFLOGIC  LOGICAL ERROR?\n         BE    LERERR         YES\n         CLI   RPLRTNCD,USFENVER  ENVIRONMENT ERROR?\n         BE    ENVERR         YES\n         LA    R15,24\n         BR    R14\n*\n*        ENVIRONMENT ERRORS\n*\nENVERR   DS    0H\n         LA    R15,16\n         BR    R14\n*\n*        LOGICAL ERRORS\n*\nLERERR   DS    0H\n         LA    R15,20\n         BR    R14\n         DROP  1,15\n         TITLE 'VPUT AND VGET - VTAM SEND AND RECEIVE'\n***********************************************************************\n*                                                                     *\n* FUNCTION: TO PROVIDE A CALLABLE INTERFACE TO VTAM SEND PROCESSING.  *\n*                                                                     *\n* REGISTERS AT ENTRY:                                                 *\n*                                                                     *\n*              R0 = SCREEN LENGTH                                     *\n*              R1 = SCREEN ADDRESS                                    *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*\nVGET     DS    0H\n*\n*   ESTABLISH BASE REG & LINKAGE\n*\n         USING *,12\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         SR    R11,R11\n         B     VGETPUT\n*\nVPUT     DS    0H\n*\n*   ESTABLISH BASE REG & LINKAGE\n*\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R11,VPUT-VGET\n         SR    R12,R11\n*\nVGETPUT  DS    0H\n         LR    R3,R0     R3 = LENGTH OF SCREEN\n         LR    R8,R1     R8 = LOCATION OF SCREEN\n*\n         L     R4,PSATOLD\n         USING TCB,4\n         LR    R9,R13            PRESERVE CALLING PGM'S R13\n         L     R13,TCBUSER\n         DROP  4\n         USING TCBUVTAM,13\n         LA    R13,TCBUSVCS\n         USING TCBUSVCS,13\n*\n         ST    R9,4(,R13)\n         ST    R13,8(,R9)\n*\n         CLC   TCBUAPPL(7),APPLEYE IS THIS MY TCBUSER AREA???\n         BNE   VPUTGET4          IF NOT, JUST SET RC.\n*\n         CLI   TCBULU,C' '       IS THERE AN LU-NAME PRESENT?\n         BE    VPUTGET4          IF NOT, JUST SET RC.\n*\n         CLI   TCBUSRID,C' '     IS THERE A USERID PRESENT?\n         BE    VPUTGET4          IF NOT, JUST SET RC.\n*\n         LM    R5,R6,TCBUACBA\n         USING IFGRPL,R6          RPL DSECT ADDRESSING\n*\n         LTR   R11,R11           IF R11 IS ZERO, DOING VGET\n         BZ    VRECV\n*\n*\nVSEND    DS    0H\n         SEND  RPL=(R6),                                               *\n               ACB=(R5),                                               *\n               AREA=(R8),                                              *\n               RECLEN=(R3),                                            *\n               POST=RESP,                                              *\n               OPTCD=SYN,                                              *\n               RESPOND=(NEX,FME,NRRN)\n         LTR   R15,R15            OK?\n         BZ    VPUTGETE           YES\n         CH    R0,V8              IF RETRIABLE ERROR\n         BE    VSEND               THEN RETRY\n*                                  ELSE RETURN NO GO\n         B     VPUTGETE\n         TITLE 'VGET - VTAM RECEIVE'\nVRECV    DS    0H\n       RECEIVE RPL=(R6),                                               *\n               ACB=(R5),                                               *\n               AREA=(R8),                                              *\n               AREALEN=(R3),                                           *\n               OPTCD=(SPEC,SYN,TRUNC),                                 *\n               RTYPE=DFSYN\n*\n         MVC   TCBUGETL(2),RPLRLEN+2  LENGTH OF RECORD RECEIVED\n*\n         LTR   R15,R15            OK?\n         BZ    VRECVLOG           YES\n         CH    R0,V8              IF RETRIABLE ERROR\n         BE    VRECV               THEN RETRY\n*                                  ELSE RETURN NO GO\n         B     VPUTGETE\n*\nVRECVLOG DS    0H\n         SR    R15,R15            SET RC=0\n         B     VPUTGETE           ALL DONE\n         TITLE 'VPUT AND VGET     - EOJ'\nVPUTGET4 DS    0H\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         LA    R15,12\n         BR    R14                     AND RETURN\n*\nVPUTGETE DS    0H\n*\n         L     R13,4(,R13)\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14                     AND RETURN\n*\n         TITLE 'VPUT AND VGET - CONSTANTS'\n*\nV8       DC    H'8'\n*\nAPPLEYE  DC    CL8'APPLMON'\n*\n         TITLE 'VSIZE - RETRIEVE ROWS AND COLUMNS'\n***********************************************************************\n*                                                                     *\n* FUNCTION: TO PROVIDE A CALLABLE INTERFACE TO VTAM INQUIRE.          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\n*\nVSIZE    DS    0H\n*\n*   ESTABLISH BASE REG & LINKAGE\n*\n         USING *,12\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         SR    R11,R11\n*\n         L     R4,PSATOLD\n         USING TCB,4\n         LR    R9,R13            PRESERVE CALLING PGM'S R13\n         L     R13,TCBUSER\n         DROP  4\n         USING TCBUVTAM,13\n         LA    R13,TCBUSVCS\n         USING TCBUSVCS,13\n*\n         ST    R9,4(,R13)\n         ST    R13,8(,R9)\n*\n*\n*        GET SESSION PARAMETERS\n*\n         L     R2,TCBURPLA\n         L     R4,TCBUNIBA\n         INQUIRE RPL=(2),                                              *\n               ACB=ACBTERMS,                                           *\n               NIB=(4),                                                *\n               AREALEN=80,AREA=TCBUBIND,                               *\n               OPTCD=(SYN,SESSPARM)\n*\n*\n*        SET TERMINAL ROWS AND COLUMNS FOR GTSIZE\n*\n         LA    15,TCBUBIND\n         USING ISTDBIND,15\n         MVC   TCBUROWS(1),BINSALTR\n         MVC   TCBUCOLS(1),BINSALTC\n         DROP  15\nVSIZEND  DS    0H\n*\n         L     R13,4(,R13)\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14                     AND RETURN\n*\n         TITLE 'A P P L M O N - DATA AREAS'\n         LTORG\n*\nINUSE    EQU   X'80'\nRETRY    DC    H'8'               ACTION CODE FOR RETRIABLE ERROR\n*\nLOGLN#   DS    H                  LOG LINE COUNT\nLOGPG#   DS    H                  LOG PAGE COUNT\nPAGESIZE DC    H'60'              # LINES PER PAGE\nEOFPGCNT DC    H'3'               # PAGES BETWEEN WRITE-EOFS\nLOGHDR   DC    AL2(133,0)         LOG HEADER LINE\n         DC    CL30'1'\n         DC    C'APPLMON LOG'\n         DC    CL72' '\n         DC    C'DATE '\nLOGHDRDT DS    CL5\n*\nLOGSKP   DC    AL2(5,0)           LOG SKIP AFTER HEADER LINE\n         DC    C'-'\n*\n         TITLE 'A P P L M O N - CONTROL BLOCKS'\n*\n***********************************************************************\n*                                                                     *\n*        DATA CONTROL BLOCKS FOR LOGGING                              *\n*                                                                     *\n***********************************************************************\n*\nNETPRINT DCB   DDNAME=NETPRINT,                                        *\n               BLKSIZE=133,LRECL=133,                                  *\n               DSORG=PS,RECFM=FA,MACRF=(PM)\n*\n* PO VTAM CONTROL BLOCKS.\n*\nPRIMARPL RPL   AM=VTAM,                                                *\n               ACB=ACBTERMS,                                           *\n               OPTCD=ANY,                                              *\n               NIB=LOGONNIB\n*\nMOVERPL  RPL   AM=VTAM,                                                *\n               ACB=ACBTERMS,                                           *\n               OPTCD=(SPEC,SYN,TRUNC),                                 *\n               BRACKET=BB\n*\nLOGONNIB NIB   PROC=TRUNC,                                             *\n               MODE=RECORD\n*\nACBTERMS ACB   AM=VTAM,                                                *\n               APPLID=APPLNAME,                                        *\n               EXLST=TXLST,                                            *\n               MACRF=LOGON\n*\nAPPLNAME DC    X'07',CL7'APPLMON'      APPLICATION NAME\n*\nTXLST    EXLST AM=VTAM,                                                *\n               LERAD=ERROR,                                            *\n               SYNAD=ERROR,                                            *\n               TPEND=TPEND,                                            *\n               LOGON=LOGON,                                            *\n               RELREQ=LOSTERM,                                         *\n               LOSTERM=LOSTERM\n*\nQEDXTRC1 EXTRACT ,FIELDS=COMM,MF=L\nQEDXTRCL EQU   *-QEDXTRC1\n*\n* PARAMETER LIST FOR TPEND EXIT\n*\nTPENDPRM DSECT\nTPACB@   DS    F                  @ ACBTERMS\nTPREASON DS    F                  REASON CODE\n*\n* PARAMETER LIST FOR LOGON AND RELREQ EXITS\n*\nLOGONPRM DSECT\nLGNACB@  DS    F                  @ ACBTERMS\nLOGONLU  DS    F                  @ TERMINAL NAME\n         DS    F                  RESERVED\nLGNMSGLN DS    F                  LENGTH OF LOGON MESSAGE\n*\n* PARAMETER LIST FOR LOSTERM EXIT\n*\nLOSTPARM DSECT                    FOR LOSTERM AND RESP EXITS\nLOSTACB  DS    F                  @ ACBTERMS\nLOSTCID  DS    F                  CID OF TERMINAL\nLOSTUSER DS    F                  USER FIELD INFO - @ TICB\nLOSTCODE DS    F                  REASON CODE (UNUSED FOR RESP EXIT)\nRESPRPL  DS    F                  RESPONSE EXIT READ-ONLY RPL\n*\n         IFGACB AM=VTAM\n         ISTUSFBC\n         IFGRPL AM=VTAM\n         ISTDNIB\n         IHASDWA\n         IEFZB4D2             DYNALLOC EQUATES\n         IKJTSB   EXT=YES,LIST=YES\n         IKJTCB\n         IKTTCAST\n         IHAASCB\n         CVT\n         IHAPSA\n         ISTDBIND\n         PRINT GEN\n         TITLE 'A P P L M O N - TCBUSER FIELD FOR APPLICATIONS'\nTCBUVTAM DSECT\n         TCBUVTAM PFX=TCBU\n         TITLE 'A P P L M O N - TCBUSER FIELD FOR SUPERVISOR'\nAPPLVTAM DSECT\n         TCBUVTAM PFX=APPL\n         ORG   APPLFILL           MAINLINE SAVE AREA\nAPPLLSAV DS    18F         LOGON  EXIT SAVE AREA\nAPPLESAV DS    18F         ESTAE  EXIT SAVE AREA\nERRORSA  DS    18F         LERAD  ERROR EXIT SAVE AREA\nENDSA    DS    18F                TPEND OR ABEND EXIT SAVE AREA\nAPPLTSAV DS    18F\nABREGS   DS    18F\n*\nLOSINUSE DS    XL1\nLERINUSE DS    XL1\nTPEINUSE DS    XL1\nABEINUSE DS    XL1\n*\nAPGMECB1 DS    F                  MASTER LOGON AND CLOSEDOWN ECB\nAPGMRPLA DS    F                     RPL ADDRESS FOR CLSDST\n*\nAPGMECB2 DS    F                     ECB ADDRESS FOR CLSDST DONE\n*\nAPGMCMD  DS    CL80                  COMMAND TEXT\n*\nSESSBIND DS    CL80\n*\n         TITLE 'QEDIT WORK AREAS'\nQEDXTRC  DS    XL(QEDXTRCL)\nQEDCOMM  DS    A                   PTR TO COMM PTRS\nQEDCOMMP DS    A                   PTR TO COMM PTRS\nQEDTXT   DS    CL80                MODIFY TEXT\nQEDCONID DS    X                   MCS CONSOLE ID THAT ISSUED MODIFY\nQEDSTOPA DS    X                   STOP WAS ISSUED\n         END\n/*\n//LKED    EXEC PGM=HEWLF064,PARM=(XREF,LET,LIST,NCAL,TERM),\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLIB   DD  DSN=SYS2.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DISP=SHR,\n//             DSN=TECH.SERV.LOAD\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n  SETCODE AC(1)\n     NAME APPLMON(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "APPLMON$": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00m\\x00m\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 109, "newlines": 109, "modlines": 0, "user": "CBT353"}, "text": "1\n                 APPLMON  INSTALLATION (ACF/VTAM V2)\n\n\n    *****************************************************************\n    **\n    **                        N O T E  !\n    **\n    **  1. APPLMON WAS WRITTEN AS A CODING EXERCISE; IT HAS NOT BEEN\n    **     THOROUGHLY TESTED, AND HAS NEVER BEEN USED NOR INTENDED TO\n    **     BE USED IN A PRODUCTION ENVIRONMENT.\n    **\n    **\n    **  2. APPLMON CAN PROVIDE MULTIPLE USERS WITH ACCESS TO NATIVE\n    **     VTAM APPLICATIONS IN ONE ADDRESS SPACE. EACH USER LOGGED\n    **     ON TO THE SYSTEM RUNS UNDER A SEPARATE TCB. \"SEND\" AND\n    **     \"RECEIVE\" PROCESSING IS ALWAYS SYNCHRONOUS.\n    **\n    **\n    **  3. THE ONLY APPLICATIONS THAT CAN BE RUN UNDER APPLMON ARE\n    **     THOSE CODED SPECIFICALLY FOR THIS SYSTEM. SOME SAMPLE\n    **     APPLICATIONS ARE INCLUDED, JUST TO ILLUSTRATE HOW TO DO IT.\n    **\n    **\n    **  4. I REALLY CAN'T THINK OF ANY REASON TO USE THIS, AS IS. IT\n    **     MAY BE USEFUL TO LOOK AT, IF YOU FIND A NEED TO DO SOMETHING\n    **     OF THIS NATURE FOR SOME SPECIAL APPLICATION.\n    **\n    **\n    *****************************************************************\n1\n\n    *****************************************************************\n    **\n    **\n    **     INSTALLATION STEPS\n    **\n    **\n    *****************************************************************\n\n\n 1. UPDATE YOUR VTAMLST WITH APPLICATION DEFINITIONS PER \"APPLDEF\".\n    REMEMBER, IF YOU JUST UPDATE AN EXISTING MEMBER, BE SURE TO DELETE\n    IT FROM VTAMOBJ BEFORE RESTARTING VTAM.\n\n\n 2. CREATE A PROC THAT CAN BE STARTED FROM THE CONSOLE, PER \"APPLJOB\".\n    THE JCL SUPPLIED USES A STEPLIB; APPLMON MUST BE AUTHORIZED AND RUN\n    FROM AN AUTHORIZED LIBRARY, SO YOU MAY WANT TO PUT IT IN A LNKLST\n    LIBRARY, INSTEAD.\n\n    YOU CAN ALSO RUN THE JCL AS A BATCH JOB.\n\n\n 3. SUBMIT AN ASSEMBLY OF APPLMON. IT NEEDS A DSECT \"TCBUVTAM\" FROM\n    THIS LIBRARY. THIS IS THE MAIN PROGRAM. NOTE THAT IT MUST BE\n    AUTHORIZED, AND BE IN AN AUTHORIZED LOAD LIBRARY.\n\n    SEE THE CODE FOR A DESCRIPTION OF WHAT IT DOES.\n\n\n 4. SUBMIT AN ASSEMBLY OF APPLOGO. IT NEEDS A DSECT \"TCBUVTAM\" FROM\n    THIS LIBRARY. THIS IS THE \"ATTACH\"ED TASK PROGRAM. IT SHOULD GO\n    INTO THE SAME LIBRARY AS APPLMON, ABOVE.\n\n    THIS PROGRAM DISPLAYS THE LOGON MENU, INVOKES THE PASSWORD\n    EXIT, AND DISPLAYS THE PRIMARY OPTION MENU.\n\n\n 5. SUBMIT AN ASSEMBLY OF APPLXIT. IT NEEDS A DSECT \"TCBUVTAM\" FROM\n    THIS LIBRARY. THIS IS THE PASSWORD/USER VALIDATION EXIT. AS SHIPPED,\n    IT IS JUST A SKELETON, AND ALLOWS ANYONE TO LOG ON.\n\n    IF YOU WERE TO USE APPLMON WITH ANY FREQUENCY, SOME SORT OF USERID\n    AND PASSWORD CHECKING SHOULD BE ADDED TO THE EXIT.\n\n    IT SHOULD BE LINK-EDIT'ED INTO THE SAME LIBRARY AS APPLMON, ABOVE.\n1\n\n\n\n 6. ASSEMBLE THE SAMPLE APPLICATIONS:\n\n    APPLOPR  ==>  PROVIDES A CONSOLE DISPLAY SIMILAR TO \"CDF\".\n    APPLPGM  ==>  INVOKES \"ETPS\".\n    APPLSAD  ==>  A SYSTEM ACTIVITY DISPLAY BASED ON \"CHIMP\".\n    APPLSPO  ==>  A VTAM SECONDARY OPERATOR.\n\n    THESE SHOULD BE LINK-EDIT'ED INTO THE SAME LIBRARY AS APPLMON.\n    THEY ALL NEED THE \"TCBUVTAM\" DSECT FROM THIS LIBRARY.\n\n    NOTE: \"APPLOPR\" AND \"APPLSAD\" HAVE NOT BEEN UPDATED FOR XA.\n\n\n 7. IF YOU HAVE RACF, YOU SHOULD UPDATE ICHRIN03 WITH THE STARTED\n    TASK NAME. OR, YOU CAN RUN IT AS A BATCH JOB. IF YOU HAVE ACF2,\n    RUNNING AS A BATCH JOB IS PROBABLY YOUR SAFEST BET. THERE IS NO\n    AUTHORITY CHECKING PROVIDED INTERNALLY.\n\n\n 8. VARY ACT THE APPL DEFINITION ON VTAM AND START THE APPLMON PROC,\n    OR SUBMIT THE BATCH JOB.\n\n\n 9. FROM A VTAM TERMINAL, ENTER:    LOGON APPLID(APPLMON)\n    YOU SHOULD GET THE LOGON PANEL. JUST FILL IN THE BLANKS AND HIT\n    ENTER. FROM THE PRIMARY OPTION MENU, SELECT THE DESIRED SAMPLE\n    APPLICATION. TO GET OUT, JUST KEEP HITTING PF3. PF3 ON THE LOGON\n    PANEL RETURNS YOU TO VTAM.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "APPLOGO": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x02<\\x02<\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 572, "newlines": 572, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCLOG  JOB (X0002,QCC,ASQCC),'X-BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=99\n//ASM     EXEC PGM=IEV90,REGION=1024K,\n//             PARM='XREF(SHORT),OBJECT,NODECK,TERM'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DISP=SHR,DSN=SYS2.MACLIB       <== TCBUVTAM\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nAPPLOGO  TITLE 'A P P L O G O - PRIMARY APPLICATION'\n***********************************************************************\n*\n* CHANGE LOG:\n*\n*  7/24/85  BRIAN COOK   ADDED BLDL FOR APPLICATION PROGRAMS\n*\n***********************************************************************\n*                                                                     *\n*     MODULE NAME: APPLOGO                                            *\n*                                                                     *\n*     DESCRIPTIVE NAME: VTAM APPLICATION. THIS IS THE PRIMARY         *\n*                       APPLICATION INVOKED BY APPLMON.               *\n*                                                                     *\n*     FUNCTION: 1. DISPLAYS LOGON SCREEN                              *\n*               2. INVOKES PASSWORD/USERID VALIDATION EXIT (APPLXIT)  *\n*                                                                     *\n*     AUTHOR: BRIAN COOK, MORTON, 1984                                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* INITIAL HOUSEKEEPING - ENTRY CODE FOR OS/VS.                        *\n* SAVE REGISTERS, ESTABLISH ADDRESSABILITY, SET UP SAVE AREA.         *\n*                                                                     *\n***********************************************************************\n*\nAPPLOGO CSECT\n         USING *,11,10\n         STM   14,12,12(13)                      SAVE REGISTERS\n         LR    R11,15         LOAD BASE REG1\n         LR    R10,R11                       AND 2\n         A     R10,FOURK\n         L     R1,0(,R1)      PICK UP PASSED AREA\n         ST    R1,8(,13)       SAVE\n         ST    13,4(,R1)        AREA\n         LR    13,R1             FOR CALLEES\n         LR    R12,R13\n         A     R12,FOURK\n         USING TCBUVTAM,13,12     SAVE AREA DSECT ADDRESSING\n*\n*\n* FILL IN TCBUSER ADDRESS\n*\n         MODESET KEY=ZERO          KEY ZERO FOR SVC 34\n         USING PSA,0\n         L     R1,PSATOLD\n         USING TCB,1\n         ST    R13,TCBUSER\n         MODESET KEY=NZERO         RESET KEY\n*\n         B     SETESTAE       START THE DANCE\n*\nFOURK    DC    F'4096'\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         EJECT\n*\n***********************************************************************\n*        SET UP ESTAE ENVIRONMENT                                     *\n***********************************************************************\n*\nSETESTAE DS    0H\n         B     AFTESTAE\n         ESTAE ABEXIT,ASYNCH=YES,TERM=YES\nAFTESTAE DS    0H\n*\n*\n         TITLE 'A P P L M O N - DISPLAY LOGON LOGO'\n*\n* DISPLAY THE LOGON LOGO\n*\nSHOWLOGO DS    0H\n*\nSENDLOGO DS    0H\n*\n         LA    R0,LOGSCRSZ\n         LA    R1,LOGTEXT\n         L     R15,TCBUVPUT\n         BALR  R14,R15\n*\n         LR    R5,R15\n         LTR   R5,R5            OK?\n         BZ    RECVLOGO           YES\n*\nVPUTFAIL DS    0H\n*\n         LR    R4,R15              ELSE SET RC\n         LR    R5,R0               ELSE SET RC\n         STM   R0,R1,TCBUREGS SAVE REGS CLOBBERED BY ABEND MACRO\n         ABEND 22,DUMP,STEP\n*\n         TITLE 'A P P L M O N - ISSUE RECEIVE'\n***********************************************************************\n*                                                                     *\n* ISSUE RECEIVE MACRO TO GET USERID, PASSWORD                         *\n*                                                                     *\n***********************************************************************\n*\nRECVLOGO DS    0H\n*\n         LA    R1,TCBUWORK\n         LA    R0,4095\n         L     R15,TCBUVGET\n         BALR  R14,R15\n*\n         LTR   R4,R15            OK?\n         BZ    GOTDATA1           YES\n*\nVGETFAIL DS    0H\n*\n         STM   R0,R1,TCBUREGS SAVE REGS CLOBBERED BY ABEND MACRO\n         ABEND 23,DUMP,STEP\nGOTDATA1 DS    0H\n*\n         MVC   TCBUFILL(96),NETLOG\n         LA    R4,TCBUFILL\n         OPEN  ((4),(EXTEND))\n*\n         TM    TCBUFILL+48,X'80'\n         BZ    GOTDATA2\n*\n         PUT   (4),TCBUWORK\n         CLOSE ((4))\n         B     GOTDATA2\n*\nNETLOG   DCB   DDNAME=NETLOG,DSORG=PS,MACRF=(PM)\n*\nGOTDATA2 DS    0H\n         LA    R4,TCBUWORK\n         LA    R15,204                 LOOP CONTROL\n*\n         CLI   0(R4),X'7D'             ENTER?\n         BNE   SENDLOGO                NO, JUST RE-PROMPT\n*\nLOOPLOG1 DS    0H\n         CLI   0(R4),X'11'             PARAMETER?\n         BE    GOTDATA3                YES, FILL IN TCB-USER AREA\n         LA    R4,1(,R4)               BUMP POINTER\n         BCT   R15,LOOPLOG1\n*\n         B     SENDLOGO                NO, JUST RE-PROMPT\n*\nGOTDATA3 DS    0H\n         MVC   TCBUSRID(8),3(R4)       MOVE USERID FROM BUFFER\n         OC    TCBUSRID(8),SPACES      UPPER-CASE IT\n         LA    R4,8(,R4)               BUMP POINTER\n*\n         CLC   TCBUSRID(4),=C'STOP'    STOP THIS SESSION\n         BE    MAINRET                 GO DO IT\n         CLC   TCBUSRID(4),=C'SHUT'    SHUTDOWN THE REGION\n         BE    CLOSHUT                 GO DO IT\n*\nLOOPLOG2 DS    0H\n         CLI   0(R4),X'11'             PARAMETER?\n         BE    GOTDATA4                YES, FILL IN TCB-USER AREA\n         LA    R4,1(,R4)               BUMP POINTER\n         BCT   R15,LOOPLOG2\n*\n         B     SENDLOGO                NO, JUST RE-PROMPT\n*\nGOTDATA4 DS    0H\n         MVC   TCBUPASS(8),3(R4)       MOVE PASSWORD FROM BUFFER\n         OC    TCBUPASS(8),SPACES      UPPER-CASE IT\n         LA    R4,8(,R4)               BUMP POINTER\n*\nLOOPLOG3 DS    0H\n         CLI   0(R4),X'11'             PARAMETER?\n         BE    GOTDATA5                YES, FILL IN TCB-USER AREA\n         LA    R4,1(,R4)               BUMP POINTER\n         BCT   R15,LOOPLOG3\n*\n         B     CHKPASS                 JUST INVOKE PASSWORD CHECKER\n*\nGOTDATA5 DS    0H\n         MVC   TCBURACF(8),3(R4)       MOVE RACF GROUP FROM BUFFER\n         OC    TCBURACF(8),SPACES      UPPER-CASE IT\n*\n         TITLE 'A P P L M O N - CHECK PASSWORD AND USERID'\n*\nCHKPASS  DS    0H\n         LINK  EP=APPLXIT\n*\n         LTR   R4,R15            OK?\n         BZ    PRIMOPTS           YES\n*\nPASSFAIL DS    0H\n*\n         STM   R0,R1,TCBUREGS SAVE REGS CLOBBERED BY ABEND MACRO\n         ABEND 24,DUMP,STEP\n         TITLE 'A P P L M O N - DISPLAY PRIMARY OPTION MENU'\n*\nPRIMOPTS DS    0H\n*\n* DISPLAY THE PRIMARY OPTION MENU\n*\nSHOWM1   DS    0H\n*\n         LA    R0,POMSCRSZ\n         LA    R1,POMTEXT\n         L     R15,TCBUVPUT\n         BALR  R14,R15\n*\n         LR    R5,R15\n         LTR   R5,R5            OK?\n         BZ    RECVPOM            YES\n*\n         LR    R4,R15              ELSE SET RC\n         LR    R5,R0               ELSE SET RC\n         STM   R0,R1,TCBUREGS SAVE REGS CLOBBERED BY ABEND MACRO\n         ABEND 28,DUMP,STEP\n*\n*\n         TITLE 'A P P L M O N - READ IN PRIMARY OPTION MENU'\n*\nRECVPOM  DS    0H\n*\n* RECEIVE THE PRIMARY OPTION MENU\n*\n         LA    R1,TCBUWORK\n         LA    R0,4095\n         L     R15,TCBUVGET\n         BALR  R14,R15\n*\n         LTR   R4,R15            OK?\n         BZ    POMDATA1           YES\n*\n         STM   R0,R1,TCBUREGS SAVE REGS CLOBBERED BY ABEND MACRO\n         ABEND 23,DUMP,STEP\nPOMDATA1 DS    0H\n*\n         MVC   TCBUFILL(96),NETLOG\n         LA    R4,TCBUFILL\n         OPEN  ((4),(EXTEND))\n*\n         TM    TCBUFILL+48,X'80'\n         BZ    POMDATA2\n*\n         PUT   (4),TCBUWORK\n         CLOSE ((4))\n*\nPOMDATA2 DS    0H\n         LA    R4,TCBUWORK\n         LA    R15,80                  LOOP CONTROL\n*\n         CLI   0(R4),X'7D'             ENTER?\n         BNE   SHOWLOGO                NO, REDISPLAY LOGON LOGO\n*\nLOOPPOM1 DS    0H\n         CLI   0(R4),X'11'             PARAMETER?\n         BE    POMDATA3                YES, GO SEE WHICH OPTION\n         LA    R4,1(,R4)               BUMP POINTER\n         BCT   R15,LOOPPOM1\n*\n         B     CLOSHUT                 NO, JUST SHUT DOWN\n*\nPOMDATA3 DS    0H\n         CLI   3(R4),C'1'              OPTION 1\n         BE    POMOPT1                 YES, GO DO IT\n         CLI   3(R4),C'2'              OPTION 2\n         BE    POMOPT2                 YES, GO DO IT\n         CLI   3(R4),C'3'              OPTION 3\n         BE    POMOPT3                 YES, GO DO IT\n         CLI   3(R4),C'4'              OPTION 4\n         BE    POMOPT4                 YES, GO DO IT\n*\n         B     SHOWM1                  RESHOW PRIMARY OPTION MENU\n*\nPOMOPT1  DS    0H\n*\n*                                      SYSTEM ACTIVITY DISPLAY\n         BLDL  0,BLDLSAD\n         LTR   R15,R15\n         BNZ   SHOWM1                  RESHOW PRIMARY OPTION MENU\n*\n         LINK  EP=APPLSAD\n*\n         B     SHOWM1                  RESHOW PRIMARY OPTION MENU\n*\nPOMOPT2  DS    0H\n*\n*                                      VTAM OPERATOR\n         BLDL  0,BLDLSPO\n         LTR   R15,R15\n         BNZ   SHOWM1                  RESHOW PRIMARY OPTION MENU\n*\n         LINK  EP=APPLSPO\n*\n         B     SHOWM1                  RESHOW PRIMARY OPTION MENU\n*\nPOMOPT3  DS    0H\n*\n*                                      MVS  OPERATOR\n         BLDL  0,BLDLOPR\n         LTR   R15,R15\n         BNZ   SHOWM1                  RESHOW PRIMARY OPTION MENU\n*\n         LINK  EP=APPLOPR\n*\n         B     SHOWM1                  RESHOW PRIMARY OPTION MENU\n*\nPOMOPT4  DS    0H\n*\n*                                      PROGRAMMER SERVICES\n         BLDL  0,BLDLPGM\n         LTR   R15,R15\n         BNZ   SHOWM1                  RESHOW PRIMARY OPTION MENU\n*\n         LINK  EP=APPLPGM\n*\n         B     SHOWM1                  RESHOW PRIMARY OPTION MENU\n*\n         TITLE 'A P P L M O N - CLOSE DOWN'\n*\nCLOSHUT  DS    0H\n*\n         ENQ   (APPLNAME,COMMAND,E,,STEP),RET=HAVE\n*\n         L     R2,TCBUECB1    PICK UP ECB ADDRESS TO POST SUPERVISOR\n         L     R3,TCBUECB2    PICK UP ECB ADDRESS TO WAIT ON\n         XC    0(4,R3),0(R3)\n         L     R4,TCBUCMD     PICK UP ADDRESS TO SET COMMAND IN\n         MVC   0(4,R4),=C'CLOS'    SHUTDOWN\n         L     R8,TCBUWORD    PICK UP ADDRESS OF FULLWORD FOR RPL\n         MVC   0(4,R8),TCBURPLA    MOVE IN MY RPL\n*\n         POST  (2)\n         WAIT  ECB=(3)\n*\n         MVC   0(4,R4),=C'STOP'    SHUTDOWN\n         XC    0(4,R3),0(R3)\n*\nCLOSHUT2 DS    0H\n*\n         TM    0(R2),X'80'         APPLMON WAITING?\n         BO    CLOSHUT3            YES, POST HIM\n*\n         STIMER WAIT,BINTVL=TWOSEC\n         B     CLOSHUT2            TEST AGAIN\n*\nCLOSHUT3 DS    0H\n*\n         POST  (2)\n         WAIT  ECB=(3)\n*\n         MVI   0(R4),C' '          TURN OFF COMMAND FLAG\n*\n         DEQ   (APPLNAME,COMMAND,,STEP),RET=HAVE\n*\n         B     MAINRET2\n*\nTWOSEC   DC    F'200'\n*\n***********************************************************************\n* EXIT CODE                                                           *\n***********************************************************************\n*\nMAINRET  DS    0H\n*\n         ENQ   (APPLNAME,COMMAND,E,,STEP),RET=HAVE\n*\n         L     R6,TCBUECB1    PICK UP ECB ADDRESS TO POST SUPERVISOR\n         L     R7,TCBUECB2    PICK UP ECB ADDRESS TO WAIT ON\n         XC    0(4,R7),0(R7)\n         L     R8,TCBUCMD     PICK UP ADDRESS TO SET COMMAND IN\n         MVC   0(4,R8),=C'CLOS'    SHUTDOWN\n         L     R8,TCBUWORD    PICK UP ADDRESS OF FULLWORD FOR RPL\n         MVC   0(4,R8),TCBURPLA    MOVE IN MY RPL\n*\n         POST  (6)\n         WAIT  ECB=(7)\n*\n         DEQ   (APPLNAME,COMMAND,,STEP),RET=HAVE\n*\nMAINRET2 DS    0H\n         L     R13,4(,R13)        PICK UP HIGHER SAVE AREA\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nSPACES   DC    CL8' '\nRETRY    DC    H'8'\n         LTORG\n*\n         TITLE 'A P P L M O N - ESTAE EXIT'\n*        ESTAE EXIT\n*\n         DS    0F                 ALIGN\n         USING *,10\nABEXIT   DS    0H\n         STM   14,12,12(13)                      SAVE REGISTERS\n         LR    R10,R15            LOAD EXIT BASE ADDRESS\n*\n         LR    R4,R1          SAVE SDWA PTR\n         USING SDWA,R4        TELL ASMBLR\n*\n         LR    R2,R13         SAVE CALLER'S R13\n         L     R1,PSATOLD     PICK UP TCB ADDRESS\n         L     R13,TCBUSER    PICK UP TCBUSER ADDRESS\n         LA    R13,TCBUESTA   POINT TO ESTAE SAVE AREA\n         DROP  13\n         USING TCBUESTA,13\n         ST    R13,8(,R2)        CHAIN FORWARD\n         ST    R2,4(,R13)         CHAIN BACK\n         SR    R3,R3          DEFAULT NO RETRY\n         L     R6,SDWACMPF    PICK UP CMP CODE\n         LA    R6,0(,R6)      CLEAR HI-ORDER BYTE\n         SRDL  R6,12          SPLIT SYS FROM USER\n         SRL   R7,20\n         LTR   R6,R6          SYS CMP CODE?\n         BNZ   SYSCMP         YES\n         LR    R6,R7          NO - MUST BE USER CMP\n*        MVI   TBUF,C'U'      CMP ID\n         B     LOGABM         NO\nSYSCMP   DS    0H\n*        MVI   TBUF,C'S'      CMP ID\n         CH    R6,=AL2(X'D37') VTAMLOGO DATASET FULL?\n         BNE   ISZCAN         NO\n         NI    SDWACMPF,255-SDWAREQ  YES - SET NO DUMP\n         B     LOGABM         ALLOW ABEND TO CONTINUE\nISZCAN   CH    R6,=AL2(X'0A7') Z NET,CANCEL?\n         BNE   ISCANCEL       NO\n         NI    SDWACMPF,255-SDWAREQ  SET NO DUMP\n         B     LOGABM         ALLOW ABEND TO CONTINUE\nISCANCEL CH    R6,=AL2(X'222') OPER CANCEL?\n         BNE   LOGABM         NO\n         TM    SDWACMPF,SDWAREQ  DUMP REQUESTED?\n         BO    LOGABM          YES - PROBABLY LEGIT\n*                              ONVERT BYTE 2\nLOGABM   DS    0H\nABRET    DS    0H\n*\n         ENQ   (APPLNAME,COMMAND,E,,STEP),RET=HAVE\n*\n         L     R6,TCBUECB1    PICK UP ECB ADDRESS TO POST SUPERVISOR\n         L     R7,TCBUECB2    PICK UP ECB ADDRESS TO WAIT ON\n         XC    0(4,R7),0(R7)\n         L     R8,TCBUCMD     PICK UP ADDRESS TO SET COMMAND IN\n         MVC   0(4,R8),=C'CLOS'    SHUTDOWN\n         L     R8,TCBUWORD    PICK UP ADDRESS OF FULLWORD FOR RPL\n         MVC   0(4,R8),TCBURPLA    MOVE IN MY RPL\n*\n         POST  (6)\n         WAIT  ECB=(7)\n*\n         DEQ   (APPLNAME,COMMAND,,STEP),RET=HAVE\n*\n         MVI   SDWARCDE,0         SET RETURN CODE\n         L     R13,4(,R13)        RELOAD CALLERS SA\n*\n         RETURN (14,12)           ALLOW ABEND TO CONTINUE\n         LTORG\n         EJECT\n*\n         TITLE 'A P P L M O N - LOGO DATA AREA'\n*\nLOGTEXT  DS    0H\n         DC    X'7EC2'\nL01 DC X'1140401D60',40C'* '\nL02 DC X'11C1501D60',CL5'*',CL75'   AA     PPPP    PPPP   LL          '\nL03 DC X'11C2601D60',CL5'*',CL75'  AA A   P   PP  P   PP  LL          '\nL04 DC X'11C3F01D60',CL5'*',CL75' AA  AA  P   PP  P   PP  LL      --- '\nL05 DC X'11C5401D60',CL5'*',CL75' AAAAAA  PPPPP   PPPPP   LL      --- '\nL06 DC X'11C6501D60',CL5'*',CL75' AA  AA  P       P       LL          '\nL07 DC X'11C7601D60',CL5'*',CL75' AA  AA  P       P       LLLLLL      '\nL08 DC X'11C8F01D60',CL5'*',CL75'                                     '\nL09 DC X'114A401D60',CL5'*',CL75'  M       M    OOO     N    N        '\nL10 DC X'114B501D60',CL5'*',CL75'  MM     MM   O   O    NN   N        '\nL11 DC X'114C601D60',CL5'*',CL75'  M M   M M  O     O   N N  N        '\nL12 DC X'114DF01D60',CL5'*',CL75'  M  MMM  M  O     O   N  N N        '\nL13 DC X'114F401D60',CL5'*',CL75'  M   M   M  O     O   N   NN        '\nL14 DC X'1150501D60',CL5'*',CL75'  M       M   O   O    N    N        '\nL15 DC X'11D1601D60',CL5'*',CL75'  M       M    OOO     N    N        '\nL16 DC X'11D2F01D60',CL5'*',CL75'                                     '\nL17 DC X'11D4401D60',CL14'ENTER USER ID:',X'1D40',X'13',CL20' '       '\n    DC X'1D60',CL44'(ENTER \"STOP\" TO RETURN TO VTAM)'\nL18 DC X'11D5501D60',CL14' AND PASSWORD:',X'1D4C',CL66' '       '\nL19 DC X'11D6601D60',CL14'   RACF GROUP:',X'1D40',CL66' '       '\nL20 DC X'11D7F01D60',40C'* '\nLOGSCRSZ EQU   *-LOGTEXT\n*\n         TITLE 'A P P L M O N - PRIMARY OPTION MENU'\n*\nPOMTEXT  DS    0H\n         DC    X'7EC2'\nO01 DC X'1140401D60',CL80' '\nO02 DC X'11C1501DE8',23C'-',CL32'  APPLMON PRIMARY OPTION MENU',24C'-'\nO03 DC X'11C2601DE8',CL13'OPTION  ===>',X'1D40',X'13',CL67' '\nO04 DC X'11C3F01D60',CL80' '\nO05 DC X'11C5401DE8',CL6'   1  ',X'1D60',CL74'SYSTEM ACTIVITY DISPLAY '\nO06 DC X'11C6501DE8',CL6'   2  ',X'1D60',CL74'VTAM OPERATOR           '\nO07 DC X'11C7601DE8',CL6'   3  ',X'1D60',CL74'MVS CONSOLE             '\nO08 DC X'11C8F01DE8',CL6'   4  ',X'1D60',CL74'PROGRAMMER SERVICES     '\nO09 DC X'114A401DE8',CL6'      ',X'1D60',CL74'                        '\nO10 DC X'114B501DE8',CL6'      ',X'1D60',CL74'                        '\nO11 DC X'114C601DE8',CL6'      ',X'1D60',CL74'                        '\nO12 DC X'114DF01DE8',CL6'      ',X'1D60',CL74'                        '\nO13 DC X'114F401DE8',CL6'      ',X'1D60',CL74'                        '\nO14 DC X'1150501DE8',CL6'      ',X'1D60',CL74'                        '\nO15 DC X'11D1601DE8',CL6'      ',X'1D60',CL74'                        '\nO16 DC X'11D2F01DE8',CL6'      ',X'1D60',CL74'                        '\nO17 DC X'11D4401DE8',CL6'      ',X'1D60',CL74'                        '\nO18 DC X'11D5501D60',CL80' '\nO19 DC X'11D6601D60',CL80'ENTER END COMMAND TO TERMINATE APPLMON'\nO20 DC X'11D7F01D60',CL80' '\nPOMSCRSZ EQU   *-POMTEXT\n*\n         TITLE 'A P P L M O N - DATA AREAS'\nAPPLNAME DC    CL8'APPLMON1'\nCOMMAND  DC    C'COMMAND'\nBLDLSAD  DC    H'1',H'58',CL8'APPLSAD',CL50' '\nBLDLSPO  DC    H'1',H'58',CL8'APPLSPO',CL50' '\nBLDLOPR  DC    H'1',H'58',CL8'APPLOPR',CL50' '\nBLDLPGM  DC    H'1',H'58',CL8'APPLPGM',CL50' '\n         TITLE 'A P P L M O N - DSECTS'\nTCBUVTAM DSECT\n         TCBUVTAM PFX=TCBU\n         PRINT NOGEN\n         IKJTCB\n         IHAASCB\n         IHAPSA\n         IHASDWA\n         END\n/*\n//LKED    EXEC PGM=HEWLF064,PARM=(XREF,LET,LIST,NCAL,TERM),\n//             COND=(4,LT,ASM),REGION=1024K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLIB   DD  DSN=SYS2.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DISP=SHR,\n//             DSN=TECH.SERV.LOAD\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n  SETCODE AC(1)\n     NAME APPLOGO(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "APPLOPR": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x02i\\x02i\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 617, "newlines": 617, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCOPR  JOB (X0002,QCC,ASQCC),'X-BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=999\n//ASM     EXEC PGM=IEV90,REGION=2048K,\n//        PARM='OBJECT,NODECK,TERM,BATCH'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DISP=SHR,DSN=SYS2.MACLIB     <=== TCBUVTAM\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nAPPLOPR  TITLE '* * *  MCS - MVS MASTER CONSOLE SUPPORT       * * *'\n***********************************************************************\n*                                                                     *\n*  PURPOSE - PROVIDE MVS MASTER CONSOLE SUPPORT UNDER APPLMON.        *\n*                                                                     *\n***********************************************************************\n         EJECT\nAPPLOPR  CSECT\n         USING *,12,11,10\n         STM   R14,R12,12(R13)\n         LR    R12,R15             LOAD BASE REGISTER\n         LR    R2,R13              SAVE PREVIOUS RSA POINTER\n         LR    R11,R12             LOAD BASE\n         A     R11,FOURK                     REGISTER 2\n         LR    R10,R11             LOAD BASE\n         A     R10,FOURK                     REGISTER 3\n*\n         USING PSA,0\n         L     R1,PSATOLD\n         USING TCB,1\n         L     R1,TCBUSER\n         USING TCBUVTAM,1\n         LA    R13,TCBUSAV2\n         DROP  1\n         USING TCBUSAV2,13\n*\n         ST    R2,4(R13)           CHAIN SAVE AREAS\n         ST    R13,8(R2)           CHAIN SAVE AREAS\n*\n         B     MCSAUTH\n*\nFOURK    DC    F'4096'\n         EJECT\nMCSAUTH  DS    0H\n*\n*\n*\nMCSLOOP1 DS    0H\n*\n*  CALL \"MCS\" PROGRAM TO PICK UP MASTER CONSOLE TRAFFIC\n*\n         LA    R1,MCSLINES         POINT TO MCS LINES\n         ST    R1,MCSPARM\n         LA    R1,MCSPARM\n         CALL  MCS\n         LTR   R2,R15\n         BZ    MCSRTRN\n*\n         LA    R4,MCSLINE1\n         LA    R3,43\n*\nMCSLOOP2 DS    0H\n         MVC   3(3,R4),=X'1D6040'\n         MVC   6(75,R4),5(R4)\n         LA    R4,81(,R4)\n         BCT   R3,MCSLOOP2\n*\nMCSLOOP3 DS    0H\n*\n         LA    R3,MCSLINES         POINT TO MCS LINES\n         LA    R4,MCSLINE1\n         SR    R5,R5\n*\nMCSLOOP4 DS    0H\n*\n*  COPY THE MCS LINES TO THE SCREEN.\n*\n         CLI   0(R3),X'FF'\n         BE    MCSCMDLN\n*\n         MVC   5(76,R4),0(R3)\n         LA    R3,76(,R3)\n         LA    R4,81(,R4)\n         LA    R5,81(,R5)\n         BCT   R2,MCSLOOP4\n*\nMCSCMDLN DS    0H\n*\n*  COPY THE COMMAND LINE TO THE SCREEN\n*\n         LA    R4,81(,R4)\n         LA    R5,81(,R5)\n         MVC   3(3,R4),=X'1D4013'\n         MVI   6(R4),C'*'\n         MVC   7(76,R4),LASTCMD\n         LA    R5,81(,R5)\n*\nMCSVPUT1 DS    0H\n*\n*  SEND THE SCREEN\n*\n*\n         LA    R1,MCSTEXT\n         LR    R0,R5\n         L     R15,TCBUVPUT\n         BALR  R14,R15             CLEAR REG\n*\n*  RECEIVE RESPONSE\n*\n         LA    R1,MCSIN\n         LA    R0,80\n         L     R15,TCBUVGET\n         BALR  R14,R15             CLEAR REG\n*\n*  ANALYZE RESPONSE\n*\n         L     R15,TCBURPLA        POINT TO RECEIVE RPL\n         USING IFGRPL,15\n         L     R1,RPLRLEN          STORE LENGTH IN RPL\n         DROP  15\n*\n         LTR   R1,R1               Q. ANY INPUT\n         BZ    MCSLOOP1            ...NO, GO ASK AGAIN\n*\n         CLI   MCSIN,X'7D'         ENTER\n         BNE   MCSRTRN\n*\n         CLI   MCSIN+6,C'*'        Q. ANY INPUT\n         BE    MCSLOOP1            ...NO, GO ASK AGAIN\n*\nMCSENTER DS    0H\n         MVI   LASTCMD,C' '\n         MVC   LASTCMD+1(75),LASTCMD\n         BCTR  R1,0\n         EX    R1,MOVCMD1\n         EX    R1,UPCASE1\n*\n         LA    R15,1               SET FUNCTION CODE\n         SR    R0,R0\n         LA    R1,MVSCMD\n         SVC   242\n*\n         B     MCSLOOP1\n*\nMOVCMD1  MVC   LASTCMD(1),MCSIN+6\nUPCASE1  OC    LASTCMD(1),BLANKS\n*\nBLANKS   DC    CL80' '\n*\nMVSCMD   DC    Y(80),Y(00)\nLASTCMD  DC    CL76'* TYPE COMMANDS OVER THE ASTERISK'\n*\nMCSRTRN  DS    0H\n         L     R13,4(R13)          RESTORE CALLERS RSA\n         RETURN (14,12),RC=0       RESTORE REGISTERS AND RETURN\n*\n         LTORG\n         DROP  12\n         DROP  11\n         DROP  10\n         TITLE 'A P P L M O N - MCS DISPLAY SCREEN '\n*\n*\nMCSTEXT  DS    0H\n         DC    X'7EC2'\nMCSLINE1 DC    X'1140401D60',CL76' '\n         DC    X'11C1501D60',CL76' '\n         DC    X'11C2601D60',CL76' '\n         DC    X'11C3F01D60',CL76' '\n         DC    X'11C5401D60',CL76' '\n         DC    X'11C6501D60',CL76' '\n         DC    X'11C7601D60',CL76' '\n         DC    X'11C8F01D60',CL76' '\n         DC    X'114A401D60',CL76' '\n         DC    X'114B501D60',CL76' '\n         DC    X'114C601D60',CL76' '\n         DC    X'114DF01D60',CL76' '\n         DC    X'114F401D60',CL76' '\n         DC    X'1150501D60',CL76' '\n         DC    X'11D1601D60',CL76' '\n         DC    X'11D2F01D60',CL76' '\n         DC    X'11D4401D60',CL76' '\n         DC    X'11D5501D60',CL76' '\n         DC    X'11D6601D60',CL76' '\n         DC    X'11D7F01D60',CL76' '\n         DC    X'11',X'D9',X'40',CL76' '\n         DC    X'11',X'5A',X'50',CL76' '\n         DC    X'11',X'5B',X'60',CL76' '\n         DC    X'11',X'5C',X'F0',CL76' '\n         DC    X'11',X'5E',X'40',CL76' '\n         DC    X'11',X'5F',X'50',CL76' '\n         DC    X'11',X'60',X'60',CL76' '\n         DC    X'11',X'61',X'F0',CL76' '\n         DC    X'11',X'E3',X'40',CL76' '\n         DC    X'11',X'E4',X'50',CL76' '\n         DC    X'11',X'E5',X'60',CL76' '\n         DC    X'11',X'E6',X'F0',CL76' '\n         DC    X'11',X'E8',X'40',CL76' '\n         DC    X'11',X'E9',X'50',CL76' '\n         DC    X'11',X'6A',X'60',CL76' '\n         DC    X'11',X'6B',X'F0',CL76' '\n         DC    X'11',X'6D',X'40',CL76' '\n         DC    X'11',X'6E',X'50',CL76' '\n         DC    X'11',X'6F',X'60',CL76' '\n         DC    X'11',X'F0',X'F0',CL76' '\n         DC    X'11',X'F2',X'40',CL76' '\n         DC    X'11',X'F3',X'50',CL76' '\n         DC    X'11',X'F4',X'60',CL76' '\n*\n*\n*\nMCSIN    DS    XL86\n*\nMCSPARM  DS    F\nMCSLINES DS    XL3344\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         TITLE 'A P P L M O N - DSECTS'\nTCBUVTAM DSECT\n         TCBUVTAM PFX=TCBU\n         PRINT NOGEN\n         IKJTCB\n         IFGRPL AM=VTAM\n         IHAPSA\n         END\n         TITLE 'CONSOLE DISPLAY FACILITY (MCS)'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                 CONSOLE DISPLAY FACILITY (MCS)                      *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: DISPLAY MVS MASTER CONSOLE ACTIVITY AND PROCESS MVS       *\n*           AND JES COMMANDS.                                         *\n*                                                                     *\n*                                                                     *\n* FUNCTION: MCS IS DESIGNED TO OPERATE UNDER APPLMON.                 *\n*                                                                     *\n*           IT PROVIDES A CONSOLE DISPLAY AND MVS/JES2 COMMAND        *\n*           INTERFACE SIMILAR TO AN OS CONSOLE.                       *\n*                                                                     *\n*           MCS LOOKS AT VARIOUS MVS SP 1.3.0 CONTROL BLOCKS.         *\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCE: NONE.                                           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* CHANGE LOG:                                                         *\n*                                                                     *\n*  12/04/84  INITIAL ENTRY.                                           *\n*    BCOOK                                                            *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n* NOTE THE FOLLOWING ENTRY POINT LOGIC IS NON-STANDARD. IN PARTICULAR,\n*      IT WILL NOT WORK WITH CALLED PL/I PROGRAMS.\n*\n***********************************************************************\nMCS      CSECT\n         USING *,13,12,11,10\n         B     72(,15)\n         DC    17F'0'\n         STM   14,12,12(13)   SAVE CALLING PGM'S REGISTERS\n         LA    R2,0(,R15)     LOAD EPA IN R2 FOR WORK REGISTER\n         ST    R2,8(R13)      LINK SAVE AREAS\n         ST    R13,4(R2)      SAVE THE CALLER'S R13\n*\nSETBASES DS    0H\n         LR    R13,R2         SET SAVE AREA AND BASE 1\n         LR    R12,R2         SET\n         A     R12,L4096          BASE 2\n         LR    R11,R12        SET\n         A     R11,L4096          BASE 3\n         LR    R10,R11        SET\n         A     R10,L4096          BASE 4\n*\n         L     R9,0(,R1)      POINT TO PARAMETER LIST\n         ST    R9,LINEPTR     POINT TO FIRST OUTPUT LINE\n*\n         B     SHOWCONS\n*\n*\nSHOWRTRN DS    0H\n         L     R13,4(R13)     RESTORE THE CALLER'S R13\n         LM    R0,12,20(13)   RETURN TO OUR CALLER\n         L     14,12(13)   RETURN TO OUR CALLER\n         BR    14             AND RETURN\n*\nL4096    DC    F'4096'\n*\n         TITLE 'MCS   START OF SHOW CONSOLE LOOP'\nSHOWCONS DS    0H\n*\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n*          BUILD A TABLE OF UCM ADDRESSES (ONE PER CONSOLE)           *\n*                                                                     *\n*---------------------------------------------------------------------*\nBLDUCMS  L     R4,16              R4 = ADDR OF CVT\n         USING CVT,R4\n         L     R4,CVTCUCB         R4 = ADDR OF 'CUCB' (UCM BASE)\n         DROP  R4\n         USING UCM,R4\n         L     R5,UCMVEA          R5 = ADDR OF FIRST UCM ENTRY\n         L     R6,UCMVEZ          R6 = LENGTH OF EACH UCM ENTRY\n         L     R7,UCMVEL          R7 = ADDR OF LAST UCM ENTRY\n         LA    R8,UCMTAB+4        R8 = ADDR OF UCMTAB\n         LA    R9,UCMTABE         R9 = ADDR OF END OF UCMTAB\n         XR    R2,R2              R2  = 0 (NUMBER OF VALID UCMS)\nUCMLOOP  ST    R5,0(0,R8)         SAVE UCM ADDRESS IN UCMTAB\n         LA    R2,1(0,R2)         R2  = R2  + 1  (ONE MORE UCM)\n         LA    R8,4(0,R8)         R8 = ADDR OF NEXT UCMTAB ENTRY\n         CR    R8,R9              DOES R8 POINT PAST END OF UCMTAB?\n         BNL   UCMDONE            YES; LEAVE LOOP\n         AR    R5,R6              R5 = ADDR OF NEXT UCM ENTRY\n         CR    R5,R7              DOES R5 POINT PAST UCM ENTRIES?\n         BL    UCMLOOP            NOPE; KEEP GOING\nUCMDONE  STH   R2,NUMUCMS         SAVE NUMBER OF UCMS FOUND\n         DROP  R4\n*---------------------------------------------------------------------*\n*        SCAN THE UCM FOR THE MASTER CONSOLE AS THE DEFAULT        GMM*\n*        CONSOLE WHEN ENTERING THE \"JESOPER\" COMMAND.              GMM*\n*---------------------------------------------------------------------*\nSETMAST  LA    R4,1               SET DEFAULT TO FIRST CONSOLE     JL1\nMASTSCAN LA    R5,UCMTAB          SET POINTER TO UCM ADDRESS TABLE GMM\n         CH    R4,NUMUCMS         IS NUMBER TOO HIGH?              GMM\n         BNH   MASTCONT           NO, CONTINUE                     GMM\n         ABEND 1                  IMPOSSIBLE .. NO MASTER CONSOLE ?GMM\nMASTCONT SLL   R4,2               MAKE CONSOLE NUMBER TABLE INDEX  GMM\n         LA    R5,0(R5,R4)        SET POINTER TO UCM ADDRESS SLOT  GMM\n         L     R5,0(0,R5)         SET POINTER TO UCM               GMM\n         USING UCMLIST,R5         TELL ASSEMBLER ABOUT UCM         GMM\n         L     R6,UCMXB\n         USING IEERDCM,6\n         TM    UCMDISP1,UCMDISPA  IS THIS A MASTER CONSOLE?        GMM\n         BO    MASTFND            YES ? FOUND THE MASTER CONSOLE ..GMM\n         SRL   R4,2               RESET CONSOLE NUMBER TO RELATIVE GMM\n         LA    R4,1(0,R4)         SET POINTER TO NEXT CONSOLE      GMM\n         B     MASTSCAN           CONTINUE MASTER CONSOLE SCAN LOOPGMM\nMASTFND  SRL   R4,2               RESET CONSOLE NUMBER TO RELATIVE GMM\n         ST    R4,OLDCONS         SET VALID OLD CONSOLE NUMBER     GMM\n         ST    R4,CONSOLE         SET VALID CONSOLE NUMBER (MASTER)GMM\n         MVC   CDFUCMID(1),UCMID  SAVE THE UCMID OF THE MASTER      BC\n         L     R7,UCMUCB          R7 = ADDR OF UCB\n         L     R7,DCMADTRN        GET ADDRESS OF TDCM              GMM\n         USING STRTDCM,7\n         SPACE 2\n         TITLE 'MCS   CROSS MEMORY SERVICES     '\n*---------------------------------------------------------------------*\n*                                                                     *\n*                 FILLIN TRAILER AT BOTTOM OF SCREEN                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         L     R3,CONSOLE         LOAD THE CONSOLE NUMBER\n         MODESET MF=(E,SUPRMOD)   GET INTO SUPV STATE AND KEY ZERO JPB\n*\n*                                      SET UP FOR CROSS MEMORY MOVE\n*\n         AXRES AXLIST=AXLIST           RESERVE AN AX               JPB\n         SPACE 2\n         LA    R1,CONSASID             'CONSOLE' ASID IS 5         JPB\n         AXEXT ASID=(1)                EXTRACT AX OF 'CONSOLE'IN R0JPB\n         SPACE 2\n         AXSET AX=(0)                  SET OUT AX TO THAT OF CONSOLEPB\n         SPACE 2\n         LA    R1,CONSASID             'CONSOLE' ASID IS 5         JPB\n         SSAR  R1                      SET 'CONSOLE' AS SECONDARY  JPB\n         SPACE 2\n         PRINT ON,GEN\n*\n*                                      PICK UP LAST LINE\n*\n*                                      PICK UP START ADDRESS\n*\n         LA    R1,CONSASID\n         SSAR  R1\n         LA    R1,4               SET TRUE LENGTH                  JPB\n         SLR   R0,R0              SET STORAGE KEY                  JPB\n         MVCP  SIBPTR(R1),DCMASCRN-STRTDCM(R7),R0 PT TO SCRN ADRJPB\n*\n*                                      SET UP FOR XMEM MOVE LOOP\n*\n         L     R8,SIBPTR          R8 = ADDR OF SCREEN IMAGE\n         LA    R4,BUF             R4 = ADDR OF OUTPUT BUFFER\n         LA    R5,M4BUFLEN        R5 = 3278-4 BUFFER LEN (35 LINES)\n         LA    R9,M4BUFLEN        R9 = 3278-4 BUFFER LEN (35 LINES)\nM4BUFLEN EQU   35*80              LENGTH OF 3278-4 BUFFER\nMOVEBUFF DS    0H\n         SH    R8,=H'6'\n         SLR   R0,R0              RESET THE KEY\n*\nMVCPLOOP DS    0H\n         MVCP  0(R5,R4),0(R8),R0  LOOP THRU THE CONSOLE BUFFER\n*\n         BZ    RESETSAR\n         AL    R8,=F'256'         MAX LEN ALLOWED\n         AL    R4,=F'256'         MAX LEN ALLOWED\n         SL    R5,=F'256'         MAX LEN ALLOWED\n         B     MVCPLOOP\n*\nRESETSAR DS    0H\n*---------------------------------------------------------------------*\n*                                                                     *\n*        IN ORDER TO ISSUE SVCS THE PRIMARY AND                       *\n*        SECONDARY ADDRSPC MUST BE THE SAME                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         EPAR  R1                 EXTRACT PRIMARY ASN\n         SSAR  R1\n         MODESET KEY=NZERO                                         GMM\n*\n         DROP  R5,R6,R7                                            GMM\n*\nGOTITALL DS    0H\n*\n         TITLE 'MCS   SCAN FOR REPLIES AND MOUNTS'\nSCANEM   DS    0H\n*\n         XR    R8,R8              R8 = COUNTER = 0\n         LA    R3,BUF             SET POINTER TO FIRST LINE\n*\nSCNEXT   DS    0H\n         CLC   IEEMSG(3),6(R3)   END OF SCREEN\n         BE    SCLAST            DISPLAY THE TABLE\n         CLC   BLANKS(70),5(R3)  ALL SPACES\n         BE    SCBUMP            BUMP TO NEXT LINE\n         LA    R8,1(0,R8)         ADD 1 TO COUNTER\n         L     R7,LINEPTR\n         MVC   0(76,R7),8(R3)  MOVE IT TO SPF AREA\n         LA    R7,76(,R7)       ADD THE ENTRY TO THE TABLE\n         ST    R7,LINEPTR\n*\nSCBUMP   DS    0H\n         LA    R3,84(0,R3)        POINT TO NEXT LINE\n*\n         B     SCNEXT             CHECK IT OUT\n*\nBLANKS   DC    CL80' '\nSCLAST   DS    0H\n*\n         L     R7,LINEPTR\n         MVC   0(76,R7),6(R3)  MOVE IT TO SPF AREA\n         LA    R7,76(,R7)       ADD THE ENTRY TO THE TABLE\n         ST    R7,LINEPTR\n         B     COUNTEM           DISPLAY THE TABLE\n*\nIEEMSG   DC    C'IEE152I'        BOTTOM MESSAGE ON OPER CONSOLE\n         TITLE 'MCS   COUNT LINES TO BE DISPLAYED'\nCOUNTEM  DS    0H\n*\n*\n         L     R7,LINEPTR\n         MVI   0(R7),X'FF'\n         MVC   1(76,R7),0(R7)\n*\n*\n         LR    R15,R8             R8 = COUNTER = 0\n         B     SHOWRTRN\n*\n         TITLE 'MISCELLANEOUS CONSTANTS'\n         LTORG\n*\n         DS    0F\nLINEPTR  DS    F\nCONSOLE  DS    F\nOLDCONS  DS    F\nCDFUCMID DS    XL1\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FOLLOWING IS IN SUPPORT OF C M S                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nSIBPTR   DS    F                   PRT TO SCREEN IMAGE BUFFER\nAXLIST   DC    H'1',H'0'           AXRES PARMLIST\nCONSASID EQU   5                   'CONSOLE' ASID FOR CMS\n         SPACE 2\n         CNOP  0,8\n*---------------------------------------------------------------------*\n*                                                                     *\n*               DISPLAY SCREEN - IMAGE BUFFER SECTION                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL40'BUF  THIS IS THE START OF THE BUFFER  =>'\nBUF      DC    21CL80' '          OPERATORS SCREEN BUFFER\n         DC    14CL80' '          PLUS EXTRA FOR 3278-4\n         DC    CL40'<= BUF  THIS IS THE END   OF THE BUFFER '\n*---------------------------------------------------------------------*\n*                                                                     *\n*               DISPLAY SCREEN - TRAILER SECTION                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LTORG\n         DS    0F\nUCMTAB   DS    F\n         DS    35F                PROVIDE SPACE FOR 20 UCM ADDRESSES\nUCMTABE  EQU   *\nNUMUCMS  DS    H\n         SPACE 5\n         TITLE 'EQUATES'\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nSUPRMOD  MODESET KEY=ZERO,MODE=SUP,MF=L                            GMM\nPROBMOD  MODESET KEY=NZERO,MODE=PROB,MF=L                          GMM\n         EJECT\n         PRINT NOGEN\n*.....................................................................*\n*        MAPPING DSECT FOR SRM USER CONTROL BLOCK\n*.....................................................................*\n         IRAOUCB\n*.....................................................................*\n*        MAPPING DSECT FOR DMDT (DOMAIN DESCRIPTOR TABLE)             *\n*.....................................................................*\n         SPACE\nDMDT     DSECT\nDMDTNO   DS    XL1             DOMAIN NUMBER\nDMDTLO   DS    XL1             MIN  MPL LEVEL\nDMDTHI   DS    XL1             MAX  MPL LEVEL\nDMDTWT   DS    XL1             WEIGHTING FACTOR\nDMDTMPLT DS    XL2             CURRENT MPL TARGET\nDMDTRUA  DS    XL2             AVE # OF READY USERS\nDMDTGOOU DS    XL2             CURRENT # USERS GOING OUT\nDMDTCMPL DS    XL2             CURRENT MPL\nDMDTOUTU DS    XL2             CURRENT # USERS ON OUT Q\nDMDTINCU DS    XL2             CURRENT # SWAPPABLE INCORE USERS\nDMDTRUC  DS    XL4             ACCUM FOR READY USER AVERAGE\nDMDTEND  DS    0X              END OF DMT\nDMDTLEN  EQU   *-DMDT\n         SPACE 2\n*\n* EQUATES....\n*\nRMCTDMDT EQU   X'B4'           POINTER TO DOMAIN TABLE\nRMCTDMNC EQU   X'BC'           COUNT OF NUMBER OF DOMAINS\nRMCTWMST EQU   X'18'           ADDRESS OF WLM SPEC TABLE\n         SPACE 2\n         TITLE '*** COMMUNICATION VECTOR TABLE ***'                GMM\n         CVT   DSECT=YES                                           GMM\n         TITLE '*** RDCM DSECT ***'                                GMM\nIEERDCM  DSECT ,                                                   GMM\n         IEECRDCM                                                  GMM\n         TITLE '*** TDCM DSECT ***'                                GMM\nIEETDCM  DSECT ,                                                   GMM\n         IEECDCM                                                   GMM\n         TITLE '*** MULTIPLE CONSOLE SUPPORT (MCS) UCM PREFIX ***' GMM\n         IEECUCM FORMAT=NEW\n         END\n/*\n//LKED    EXEC PGM=HEWLF064,PARM=(XREF,LET,LIST,NCAL,TERM),\n//             COND=(4,LT,ASM),REGION=1024K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLIB   DD  DSN=SYS2.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DISP=SHR,\n//             DSN=TECH.SERV.LOAD\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20))\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n  SETCODE AC(1)\n     NAME APPLOPR(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "APPLPGM": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00[\\x00[\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 91, "newlines": 91, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCPGM JOB (X0002,QCC,ASQCC),'X-COOK, BRIAN',\n//   MSGCLASS=X,CLASS=W,NOTIFY=ASQCC,MSGLEVEL=(1,1)\n/*JOBPARM L=99\n//*\n//ASM     EXEC PGM=IEV90,REGION=2048K,\n//        PARM='OBJECT,NODECK,TERM,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSUT2   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSUT3   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSSQ,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nAPPLPGM  CSECT\n         USING *,12\n         STM   R14,R12,12(R13)    SAVE INPUT REGS\n         LR    R12,R15            SET BASE REGISTER\n         LR    R2,R1              SAVE PARMS\n         B     PROLOG\n         DC    C'APPLPGM 10/11/84 BRIAN COOK'\nPROLOG   DS    0H\n         GETMAIN R,LV=320         GET MY SAVE AREA ADDRESS\n         LR    R11,R1             SAVE GETMAIN POINTER\n         ST    R13,4(R11)         STORE BACKWARDS POINTER\n         ST    R11,8(R13)         STORE FORWARD POINTER\n         LR    R13,R11\n         USING MYSAVE,13\n         SR    R3,3\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n         EJECT\nBEGIN    DS    0H\n         LOAD  EP=ETPS\n         LR    R3,R0            * SAVE EPA\n*\n         LA    R1,PARMADD       * RESET PARM REG\n         LR    R15,R3           * SET EPA\n         BALR  R14,R15          * BRANCH\n*\n        DELETE EP=ETPS\n         SR    R3,3\n*\nRETURN   DS    0H\n         L     R13,4(,R13)  PICK UP CALLING SAVE AREA\n         FREEMAIN R,LV=320,A=(11)\n         LR    R15,R3\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         EJECT\nPARMADD  DC    A(ETPSPARM)\nETPSPARM DC    H'8',CL8'VTAM'\n         EJECT\nMYSAVE   DSECT\n         DS    18F\n         END\n/*\n//LKED     EXEC PGM=HEWLF064,PARM=(XREF,LET,LIST,NCAL,RENT),\n//             COND=(8,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSLMOD  DD   DISP=SHR,DSN=TECH.SERV.LOAD\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  SETCODE AC(1)\n     NAME APPLPGM(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "APPLSAD": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x03\\xa7\\x03\\xa7\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 935, "newlines": 935, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCSAD  JOB (X0002,QCC,ASQCC),'X-BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=999\n//ASM     EXEC PGM=IEV90,REGION=1024K,\n//             PARM='XREF(SHORT),OBJECT,NODECK,TERM'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DISP=SHR,DSN=TECH.SERV.MACLIB   <=== TCBUVTAM\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSUT2   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSUT3   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\n*          DATA SET TSO045     AT LEVEL 002 AS OF 01/23/80\n*          DATA SET TSO045     AT LEVEL 001 AS OF 01/02/80\nAPPLMON  TITLE 'APPLSAD - SYSTEM ACTIVITY DISPLAY FOR APPLMON'\nAPPLSAD  CSECT\n***********************************************************************\n*\n* THIS COMMAND HAS SEVERAL DIFFERENT MODES OF DISPLAY:\n*\n*     I   - THIS MODE WILL DISPLAY ONLY THOSE MEMORIES WHICH ARE EITHER\n*           SWAPPED IN AND RUNNING OR SWAPPED OUT BUT READY TO RUN.\n*     O   - THIS MODE WILL DISPLAY ALL ACTIVE MEMORIES IN THE SYSTEM,\n*           REGARDLESS OF LOCATION.\n*\n*   TO SWITCH BETWEEN MODES, TYPE EITHER I OR O.\n*\n*\n*      YOU MAY ALSO ENTER OPTIONS TO RESTRICT THE OUTPUT TO ONLY\n*      TSO MEMORIES (IN EITHER IN/OUT OR WAITING STATUS ACCORDING\n*      TO YOUR USE OF THE I AND O OPTIONS ABOVE) OR ONLY STARTED\n*      TASK/BATCH JOB MEMORIES:\n*\n*     T  - RESTRICTS THE OUTPUT TO ONLY TSO MEMORIES\n*\n*     B  - RESTRICTS THE OUTPUT TO STARTED TASK/BATCH MEMORIES\n*\n*     A  - RESETS THE TSO/STARTED TASK/BATCH JOB SELECTION.\n*\n*   TO EXIT FROM THIS COMMAND, SIMPLY TYPE S\n*\n*  GLOSSARY OF TERMS FOR OUTPUT DISPLAY:\n*\n*    JOB       JOB NAME OF MEMORY\n*    STEP      FOR BATCH JOBS WILL ALWAYS BE INIT.\n*              FOR TSO JOBS AND STARTED TASKS WILL BE ACTUAL STEP NAME.\n*    P         REASON CODE FOR SWAP OUT FROM OUCBPFL.\n*              THE FOLLOWING ARE THE REASON CODES DISPLAYED:\n*                U  0A MEMORY WAS UNILATERALLY SWAPPED\n*                X  09 MEMORY WAS EXCHANGE SWAPPED\n*                E  08 AN ENQHOLD HAS BEEN RECEIVED FOR THIS MEMORY\n*                S  07 MEMORY REQUESTED SWAP OUT\n*                D  06 INVOLUNTARY SWAPOUT DUE TO DETECTED WAIT\n*                R  05 SWAPOUT CAUSED BY REAL STORAGE SHORTAGE\n*                A  04 SWAPOUT CAUSED BY AUX. STORAGE SHORTAGE\n*                L  03 MEMORY SWAPPED OUT BY MS6 LONG WAIT DETECTION\n*                I  02 MEMORY IS IN INPUT TERMINAL WAIT\n*                T  01 MEMORY IS IN OUTPUT TERMINAL WAIT\n*                ?     UNABLE TO DETERMINE SWAPOUT REASON.\n*    MEMORY    CURRENT AMOUNT OF MEMORY ALLOCATED TO THIS MEMORY.\n*    WSS       SRM'S VIEW OF THE WORKING SET SIZE FOR THIS MEMORY.\n*    T         TYPE OF MEMORY (S=STC OR BATCH, T=TSO USER)\n*    LOC       CURRENT LOCATION OF THIS MEMORY:\n*                IN  SWAPPED IN AND ELIGIBLE TO RUN.\n*                OUT SWAPPED OUT BUT READY TO RUN.\n*                WT  SWAPPED OUT AND NOT READY TO RUN.\n*                N/S SWAPPED IN AND V=R OR NON-SWAPPABLE STATUS.\n*                <-> TRANSITIONING BETWEEN STATES.\n*    DP        DISPATCHING PRIORITY OF MEMORY (IN HEX).\n*    PG        PERFORMANCE GROUP.\n*    SC        NUMBER OF TIMES THE MEMORY HAS BEEN SWAPPED IN THE\n*              CURRENT TRANSACTION.\n*    WMR       CURRENT SRM WORKLOAD MANAGER RECOMMENDATION VALUE.\n*              (ACTUALLY THE WORKLOAD LEVEL AT WHICH THIS MEMORY IS\n*               OPERATING).\n*    SRV       SERVICE ACCUMULATED IN THE LAST SWAPPED IN PERIOD.\n*    CPU       CPU TIME IN SECONDS USED BY THE MEMORY (SRB PLUS TASK).\n*\n*\n* MODS:  A) 11/26/79  K. TRUE\n*          - NO 'DRY INITS' DISPLAY, DEFAULT OF 'BATCH,OUT' FOR DISPLAY\n*          - MISC FIXES ETC TO ORIG CBT APPLSAD COMMAND.\n*          - ADDED DYNAMIC DOMAIN DISPLAY AND SHUFFLED PGM TO FIT..\n*\n*        B) 1/2/80  M. FARMER\n*          - CORRECT 0C4 IN SWITCH FROM DOMAIN TO JOBS DISPLAY\n*          - NAMING CONVENTION TO TSO... - LATEST NEW STANDARD\n*\n*        C) 4/22/82 BRIAN COOK\n*          - REVISED SRM LOGIC FOR MVS/SP1.3\n*\n*        D) 9/17/84 BRIAN COOK\n*          - REVISED TO RUN UNDER APPLMON\n*\n*\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         USING *,12\n         STM   R14,R12,12(R13)  SAVE THE CALLERS REGISTERS\n         LR    R12,R15          ESTABLISH\n*\n         USING PSA,0\n         L     R1,PSATOLD       PICK UP TCB\n*\n         USING TCB,1\n         L     R1,TCBUSER       PICK UP TCB USER AREA\n*\n         USING TCBUVTAM,1\n         LR    R11,R13          PRESERVE CALLING PGM R13\n         LA    R13,TCBUSAV2     MY SAVE AREA\n         USING TCBUSAV2,13\n         DROP  1\n*\n         ST    R11,4(,R13)        SAVE\n         ST    R13,8(,R11)           AREA CHAINING\n*\nFINDCVT  DS    0H\n*\n         SR    R15,R15\n         IC    R15,TCBUROWS     MAX ROWS\n         BCTR  R15,0\n         BCTR  R15,0\n         BCTR  R15,0\n*\n         L     R2,FLCCVT        LOAD PTR TO CVT.\n         L     R2,556(,R2)      TO ASVT\n         L     R3,516(,R2)      MAXIMUM NUMBER OF ENTRIES\n         LA    R4,524(,R2)      FIRST ENTRY MINUS 4.\n*\n         CR    R3,R15           COMPARE MAX VERSUS SCREEN SIZE\n         BL    SETBUFFR         IF OK\n         LR    R3,R15           SET TO MAXIMUM DISPLAY\n*\nSETBUFFR DS    0H\n         LA    R1,ROW784        LOAD ADDRESS OF LINE4 BUFFER ADDRESS\n         ST    R1,THISROWA      LOAD ADDRESS OF LINE4 BUFFER ADDRESS\n         MVC   THISROW(2),0(R1) MOVE BUFFER ADDRESS FOR LINE4\n         LA    R1,BUFFER-CLEAR\n         STH   R1,SCRSIZE\n         LA    R1,BUFFER        LOAD ADDRESS OF OUTPUT BUFFER.\n         MVC   HEADING,HEAD1    MOVE IN SCREEN HEADING           KMT\n         SPACE\nASCBLOOP LA    R4,4(,R4)        BUMP BY FOUR.\n         ICM   R5,B'1111',0(R4) LOAD THE ASCB POINTER\n***********************************************************************\n*\n*   SET R5 = ASCB\n*\n         USING ASCB,5\n***********************************************************************\n         BM    NOGOOD           BRANCH IF BAD PTR.\n         TM    102(R5),X'04'    TEST FOR SWAPPED OUT.\nINOROUT  BC    0,NOGOOD         BRANCH IF OUT AND NOT READY TO RUN.\n         L     R6,ASCBOUCB       LOAD PTR TO OUCB FOR QUICK TSO CHK\n***********************************************************************\n*\n*   SET R6 = OUCB\n*\n         USING OUCB,6\n***********************************************************************\n         TM    OUCBYFL,OUCBLOG  CHECK FOR TSO.\nTSOORNO  BC    1,NOGOOD         TO BE FILLED IN IF BATCH ONLY.\nBATCHORN BC    0,NOGOOD         TO BE FILLED IN LATER.\n         TM    OUCBSFL,OUCBNSW  TEST FOR NON-SWAP\n*        BO    NOGOOD           BRANCH IF NON-SWAP.\nSWAPABLE BC    0,NOGOOD         TO BE FILLED IN LATER.\n         SPACE\n         MVI   LINE+2,C' '      CLEAR OUTPUT LINE TO BLANKS.\n         MVC   LINE+3(77),LINE+2 DITTO.\n         MVC   JOB(8),=CL8'STARTING' TO BYPASS GARBAGE\n         ICM   R6,B'1111',172(R5) LOAD PTR TO JOBNAME.\n         BZ    NOTJOB           BRANCH IF ZERO POINTER.\n         MVC   JOB,0(R6)        OTHERWISE, MOVE IN JOBNAME.\n         CLC   =CL8' ',X'18'(R6)  IS THERE A PROC STEP NAME?    KMT\n         BE    NOTSTEP                                          KMT\n         MVI   PSTEP,C'-'                                       KMT\n         MVC   STEP(8),X'18'(R6)  MOVE IN PROC STEP NAME        KMT\n         B     STEPOK                                           KMT\nNOTSTEP  MVI   PSTEP,C' '                                       KMT\n         MVC   STEP(8),X'38'(R6)  MOVE IN STEP NAME (NO PSTEP)  KMT\n         B     STEPOK                                           KMT\nNOTJOB   ICM   R6,B'1111',176(R5) PTR IF S/M/L.\n         BZ    JOBOK            BYPASS THIS MOVE IF POINTER IS ZERO.\n         MVC   JOB,0(R6)        MOVE IN JOBNAME FOR S/M/L MEMORIES.\nJOBOK    DS    0H\n         SPACE\n         ICM   R7,B'1111',ASCBCSCB    POINTER TO THE TOP CSCB.\n         BZ    STEPOK           BRANCH IF CSCB POINTER IS ZERO.\n         CLI   4(R7),X'04'      CHECK TO SEE IF BATCH JOB OR S/M/L\n         BE    STORMT           JOB IS START OR MOUNT\n         CLI   4(R7),X'0C'      CHECK TO SEE IF BATCH JOB OR S/M/L\n         BE    STORMT           JOB IS START OR MOUNT\n         MVC   STEP(8),16(R7)   PICK UP CHCLS.\n         B     STEPOK           BYPASS FURTHER CSCB PROCESSING.\nSTORMT   MVC   STEP(8),8(R7)    PICK UP CHKEY.\nSTEPOK   DS    0H\n         CLC   JOB(8),=CL8'INIT' IS IT A 'DRY' INIT??           KMT\n         BE    NOGOOD           YEP...KISS OFF                  KMT\n         SPACE\n         LH    R6,ASCBFMCT       LOAD ALLOC FRAME COUNT.\n         SLL   R6,2             MULTIPLY BY FOUR.\n         CVD   R6,WORK          CONVERT TO DECIMAL FORMAT.\n         MVC   SIZE(6),=X'2020202120D2' GET READY FOR EDIT.\n         ED    SIZE-1(6),WORK+5 EDIT THE RESULT.\n         SPACE\n***********************************************************************\n*\n*   SET R6 = OUCB, AGAIN\n*\n***********************************************************************\n         SPACE\n***********************************************************************\n*\n*   FILL IN WORKING SET SIZE\n*\n***********************************************************************\n         L     R6,ASCBOUCB      PTR TO OUCB.\n         LH    R7,OUCBWSS        LOAD OUCBWSS\n*        SLL   R7,2             TIMES FOUR FOR K.\n         CVD   R7,WORK          CONVERT TO DECIMAL.\n         MVC   LINEWSS(6),=X'202020212040' MOVE IN THE EDIT MASK.\n         ED    LINEWSS-1(6),WORK+5 EDIT THE RESULT.\n         SPACE\n         TM    18(R6),X'20'     TEST FOR TSO MEMORY\n         BZ    NOTTSO           BRANCH IF NOT TSO.\n         MVI   TYPE,C'T'        MOVE IN TSO MEMORY INDICATION.\n         B     TYPEOK           BYPASS REST OF TYPE PROCESSING.\nNOTTSO   MVI   TYPE,C'S'        MOVE IN S/M/L INDICATION.\nTYPEOK   DS    0H\n         SPACE\n         MVC   WHERE,=CL3'IN'   DEFAULT MEMORY POSITION IS IN.\n         MVI   LINE+1,X'E8'     DEFAULT TO HI-INTENSITY PROTECTED.\n         TM    17(R6),X'80'     TEST FOR NON-SWAP\n         BZ    TRYWAIT          BRANCH IF NOT NON-SWAP.\n         MVC   WHERE,=CL3'N/S'  MOVE IN NON-SWAP INDICATION.\n         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.\nTRYWAIT  DS    0H\n         TM    16(R6),X'08'     CHECK FOR WAIT\n         BZ    TRYOUT           BRANCH IF NOT.\n         MVC   WHERE,=CL3'WT'   MOVE IN WAIT POSITION INDICATION.\n         MVI   LINE+1,X'60'     MOVE IN 3270 LOW-INTENSITY ATTR BYTE.\n         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.\nTRYOUT   TM    16(R6),X'04'     TRY OUT QUEUE\n         BZ    TRYTRIV          IF NOT, GO TRY TRIVIAL QUEUE STATUS.\n         MVC   WHERE,=CL3'OUT'  MOVE IN OUT QUEUE POSITION.\n         MVI   LINE+1,X'60'     MOVE IN 3270 LOW-INTENSITY ATTR BYTE.\n         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.\nTRYTRIV  TM    16(R6),X'02'     CHECK FOR TRIVIAL QUEUE POSITION.\n         BZ    WHEREOK          IF NOT, EXIT POSITION PROCESSING.\n         MVC   WHERE,=CL3'TRV'  MOVE IN TRIVIAL QUEUE POSITION.\nWHEREOK  DS    0H\n         TM    16(R6),X'E0'     CHECK FOR TRANSITIONING STATUS\n         BZ    NOTTRANS         BRANCH IF MEMORY NOT TRANSITIONING.\n         MVC   WHERE(3),=CL3'<->' INDICATE TRANSITIONING.\nNOTTRANS DS    0H\n         SPACE\n         SR    R7,R7            PREPARE FOR THE INSERT CHARACTERS.\n         IC    R7,43(,R5)       LOAD ASCBDP\n         SRL   R7,4             SHIFT OUT LOW ORDER NIBBLE.\n         IC    R8,HEX(R7)       PICK THE EBCDIC CHARACTER.\n         STC   R8,DP            STORE INTO OUTPUT FIELD.\n         IC    R7,43(,R5)       LOAD THE DISPATCHING PRIORITY AGN.\n         N     R7,=F'15'        TURN OFF HIGH ORDER NIBBLE.\n         IC    R8,HEX(R7)       LOAD THE EBCDIC CHARACTER.\n         STC   R8,DP+1          STORE INTO OUTPUT LINE.\n         SPACE\n***********************************************************************\n*\n*   FILL IN PERFORMANCE GROUP NUMBER\n*\n***********************************************************************\n         SR    R7,R7            PREPARE FOR THE IC.\n         IC    R7,OUCBSPG+1     NEW PGN  ???\n         CVD   R7,WORK          CONVERT IT TO DECIMAL.\n         MVC   LINEPGN(3),=X'202120' MOVE IN THE EDIT MASK.\n         ED    LINEPGN-1(4),WORK+6 EDIT THE OUTPUT FIELD.\n         SPACE\n***********************************************************************\n*\n*   FILL IN SWAP COUNT\n*\n***********************************************************************\n         LH    R7,OUCBSWC       LOAD OUCBSWC (SWAP COUNT)\n         CVD   R7,WORK          CONVERT IT TO DECIMAL.\n         MVC   LINESWC(3),=X'202120' MOVE IN THE EDIT MASK.\n         ED    LINESWC-1(4),WORK+6 EDIT THE OUTPUT FIELD.\n         SPACE\n***********************************************************************\n*\n*   FILL IN WORK LOAD MANAGER RECOMMENDATION\n*\n***********************************************************************\n         L     R7,OUCBWMR       LOAD OUCBWMR\n         LTR   R7,R7            SEE IF HI-ORDER BIT IS ON\n         BNM   WMROK             INDICATING WMR INVALID.\n         MVC   LINEWMR(5),=C'*N/A*' IF SO, MOVE IN NOT AVAIL INDIC.\n         MVI   LINEWMS+6,C'-'   AND BLANK OUT THE SERVICE COUNTER.\n         B     NOWMS            BY-PASS THE SERVICE PROCESSING.\nWMROK    DS    0H\n         SRL   R7,8             DIVIDE BY 256\n         CVD   R7,WORK          CONVERT IT TO DECIMAL.\n         MVC   LINEWMR(5),=X'2020202120' MOVE IN EDIT MASK.\n         ED    LINEWMR-1(6),WORK+5 EDIT THE RESULT.\nWMROKA   DS    0H\n         SPACE\n***********************************************************************\n*\n*   FILL IN SWAP REASON CODE\n*\n***********************************************************************\n         TM    OUCBQFL,OUCBLSW  SEE IF OUT SOMEHOW\n         BZ    PFLDONE          MUST BE IN.\nCHKSRC   DS    0H\n         CLI   OUCBSRC,X'0A'    OUCBSRC (SWAP REASON CODE)\n         BH    UNKNOWN          TOO BIG REASON UNKNOWN\n         SR    R7,R7            CLEAR OUT WORK REGISTER        KMT\n         IC    R7,OUCBSRC       GET OUCBSRC (SWAP REASON CODE) KMT\n         SLL   R7,2             MULTIPLY BY 4 TO GET INDEX     KMT\n         LA    R7,REASONS(R7)   GET ADDRESS OF REASON CODE     KMT\n         MVC   STATUS,0(R7)     MOVE IT INTO THE MESSAGE       KMT\n         B     PFLDONE                                         KMT\nUNKNOWN  MVC   STATUS,=CL4'????'       SORRY..DONT KNOW        KMT\nPFLDONE  DS    0H\n         SPACE\n***********************************************************************\n*\n*   FILL IN SERVICE UNITS\n*\n***********************************************************************\n         L     R7,OUCBWMS       OUCBWMS LOAD SERVICE UNITS THIS XACTION\n         CVD   R7,WORK          CONVERT TO DECIMAL.\n         MVC   LINEWMS(7),=X'20202020202120' MOVE IN THE EDIT MASK.\n         ED    LINEWMS-1(8),WORK+4 EDIT THE RESULT.\n         SPACE\n***********************************************************************\n*\n*   FILL IN CPU TIME\n*\n***********************************************************************\nNOWMS    LM    R8,R9,ASCBEJST   LOAD UP EJST (CPU TIME - TASK TYPE)\n         SRDL  R8,12            TO GET MICROSEC\n         D     R8,=F'10000'     TO GET HUNDREDTHS AND MICROS\n         LM    10,R11,200(R5)   LOAD UP SRB TIME.\n         SRDL  R10,12           TO GET MICROSEC\n         D     R10,=F'10000'    TO GET HUNDREDTHS AND MICROS\n         LTR   R9,R9            TEST JST CPU TIME\n         BP    TESTSRB          IF ITS POISTIVE GO ON\n         NOPR  R9               DUMMY INSTR FOR TSO TEST TO STOP ON\nTESTSRB  LTR   R11,R11          TEST SRB CPU TIME\n         BP    ADSRBJST         IF ITS OK GO ADD SRB AND JST CPU TIME\n         NOPR  R9               ANOTHER DUMMY INSTR.\nADSRBJST AR    R9,R11           ADD TOGETHER.\n         CVD   R9,WORK          CONVERT IT TO DECIMAL.\n         MVC   CPUTIME(8),=X'20202021204B2020' MOVE IN THE EDIT MASK.\n         ED    CPUTIME-1(9),WORK+4 EDIT THE RESULT.\n         SPACE\n         MVC   3(80,R1),LINE    MOVE THE LINE TO THE 3270 BUFFER.\n         MVI   0(R1),X'11'      SBA CODE\n         MVC   1(2,R1),THISROW  BUFFER ADDRESS\n         L     R7,THISROWA      ADDRESS OF THIS LINE'S BUFFER ADDRESS\n         LA    R7,BALENGTH(,R7) BUMP RO NEXT\n         ST    R7,THISROWA      ADDRESS OF NEXT LINE'S BUFFER ADDRESS\n         MVC   THISROW(2),0(R7)\n         LH    R7,SCRSIZE       BUMP BUFFER COUNTER.\n         LA    R7,83(,R7)\n         STH   R7,SCRSIZE\n         LA    R1,83(,R1)       SEE IF THE BUFFER IS FULL YET.\n         C     R1,ADBUF\n         BE    PUTIT            IF YES, THE GO PUT THIS SCREEN.\nNOGOOD   BCT   R3,ASCBLOOP      BRANCH BACK TO LOOK AT NEXT MEMORY.\n         LA    R4,BUFFER        LOAD ADDRESS OF OUTPUT BUFFER.\n         CR    R4,R1            ARE WE STILL AT THE BEGINNING.\n         BE    FINDCVT          IF SO, GO START AT THE TOP AGAIN.\n         B     BUILDHDR\n*\nTHISROW  DS    H\nTHISROWA DS    F\n*\n**  LOOK THRU SRM CONTROL BLOCKS TO BUILD HEADER INFO\n*\nBUILDHDR DS    0H\n         L     R4,16           ---> CVT...\n         L     R7,356(R4)      ---> PVT...\n***********************************************************************\n*\n*   FILL IN SYSTEM CPU UTILIZATION\n*\n***********************************************************************\n         L     R4,604(R4)      ---> RMCT... 1ST MODULE OF IRARMCNS\n         L     R5,4(R4)        ---> IRACCT\n         LH    R6,102(R5)         CPU UTILIZATION\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  HDRCPU,WORK+6(2)     ...AND EDIT\n         SPACE\n***********************************************************************\n*\n*   FILL IN AVERAGE AVAILABLE FRAME COUNT\n*\n***********************************************************************\n         LH    R6,2(R7)           AVERAGE AVAILABLE FRAME COUNT\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  HDRAFC,WORK+6(2)     ...AND EDIT\n         SPACE\n***********************************************************************\n*\n*   FILL IN PAGE FAULT RATE\n*\n***********************************************************************\n         LH    R6,X'226'(R4)      PAGE FAULT RATE\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  HDRAPR,WORK+6(2)     ...AND EDIT\n         SPACE\n         LH    R6,X'224'(R4)      AUX. STORAGE MANAGER QUE LENGTH\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  HDRASQ,WORK+6(2)     ...AND EDIT\n         SPACE\n         LH    R6,X'21E'(R4)      UNREFERENCED INTERVAL COUNT\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  HDRUIC,WORK+6(2)     ...AND EDIT\n         SPACE\n         LH    R6,X'240'(R4)      DEFERRED IO REQUESTS\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  HDRDIO,WORK+6(2)     ...AND EDIT\n         SPACE\n         L     R7,180(R4)      ---> DMDT..     R4--> RMCT\n         SR    R15,R15         CLEAR A REG\n         LA    R5,3            NUMBER OF DOMAIN ENTRIES TO PROCESS\n         LA    R14,HDRDMN      POINT TO FIRST DOMAIN ENTRY\n         LA    R7,20(R7)       BUMP PAST FIRST DOMAIN\nDODMNS   DS    0H\n*        IC    R15,0(R7)       GET DOMAIN NUMBER\n*        CVD   R15,WORK        CHANGE IT TO DECIMAL\n*        OI    WORK+7,X'0F'    FIX THE SIGN\n*        UNPK  1(2,R14),WORK+6(2) MOVE IT TO THE OUTPUT AREA\n         LH    R15,4(R7)       GET MULTI-PROGRAMMING LEVEL TARGET\n         CVD   R15,WORK        CHANGE IT TO DECIMAL\n         OI    WORK+7,X'0F'    FIX THE SIGN\n         UNPK  1(2,R14),WORK+6(2) MOVE IT TO THE OUTPUT AREA\n         LH    R15,6(R7)       GET NUMBER OF READY USERS\n         CVD   R15,WORK        CHANGE IT TO DECIMAL\n         OI    WORK+7,X'0F'    FIX THE SIGN\n         UNPK  4(2,R14),WORK+6(2) MOVE IT TO THE OUTPUT AREA\n         LA    R14,6(R14)     POINT TO NEXT DOMAIN ENTRY\n         LA    R7,20(R7)       BUMP PAST THIS DOMAIN\n         BCT   R5,DODMNS       GO PROCESS ANOTHER\n         SPACE\n*        STCK  TIME            STORE TIME OF DAY CLOCK\nPUTIT    LA    R1,CLEAR         PREPARE\n         LH    R0,SCRSIZE       BUMP BUFFER COUNTER.\n         L     R15,TCBUVPUT\n         BALR  R14,R15\n         LTR   R15,R15            OK?\n         BZ    VPUTOK             YES\n         LR    R4,R15              ELSE SET RC\n         ABEND 998,DUMP,STEP       AND ABEND - CANT GO ON IF CANT SEND.\nVPUTOK   DS    0H\n*\n         LA    R1,BUFFER\n         LA    R0,80\n         L     R15,TCBUVGET\n         BALR  R14,R15\n         LTR   R4,R15            OK?\n         BZ    VGETOK             YES\n         ABEND 999,DUMP,STEP      ELSE ABEND - CANT GO ON IF CANT RCV..\n*\nVGETOK   DS    0H\n         CLI   BUFFER,X'7D'     CHECK IF TERMINATION REQUESTED.\n         BNE   EODAD            BYE BYE BABY...\n*\n         OI    BUFFER+6,X'40'   GET TO UPPER CASE BEFORE COMPARE.\n         CLI   BUFFER+6,C' '    IS ANYONE HOME?\n         BNE   CHKITOUT\n         TM    MODESW,DOMAIN    IS DOMAIN MODE IN PROCESS       KMT\n         BO    DISPDMN          YES....GO DO IT                 KMT\nCHKITOUT CLI   BUFFER+6,C'S'    CHECK IF TERMINATION REQUESTED.\n         BE    EODAD            BYE BYE BABY...\nISDOMAIN CLI   BUFFER+6,C'D'    CHECK FOR DOMAIN MODE\n         BNE   NOTDMN\n         OI    MODESW,DOMAIN+MORSTUF    ON WITH THE SHOW....    MF1-80\n         B     GOODGRIF         FINITO..\nNOTDMN   NI    MODESW,255-DOMAIN SOMETHING ELSE..TURN OFF DOMAINKMT\n         CLI   BUFFER+6,C'T'    CHECK FOR TSO ONLY.\n         BNE   BATCHCHK         IF NOT, TRY FOR BATCH ONLY MODE.\n         MVI   BATCHORN+1,X'80' RESET THE BRANCHES TO GET\n         MVI   TSOORNO+1,X'00'     ONLY TSO MEMORIES.\n         MVC   OPTMODE,=C'TSO'  INDICATE MODE OF OPERATION      KMT\n         B     GOODGRIF         BY-PASS FURTHER INPUT CHECKING.\nBATCHCHK CLI   BUFFER+6,C'B'    CHECK FOR BATCH ONLY\n         BNE   SWAPCHK          BRANCH TO CHECK OTHER OPTIONS.\n         MVI   TSOORNO+1,X'10'  RESET THE BRANCHES TO GET\n         MVI   BATCHORN+1,X'00'    ONLY BATCH (STC) MEMORIES.\n         MVC   OPTMODE,=C'BAT'  INDICATE MODE OF OPERATION      KMT\n         B     GOODGRIF         BY-PASS FURTHER INPUT CHECKING.\nSWAPCHK  CLI   BUFFER+6,C'N'    CHECK FOR SWAPPABLE ONLY\n         BNE   OTHERCHK         BRANCH TO CHECK OTHER OPTIONS.\n         MVI   SWAPABLE+1,X'10' ONLY SWAPABLE MEMORIES.\n         MVC   OPTMODE,=C'SWP'  INDICATE MODE OF OPERATION      KMT\n         B     GOODGRIF         BY-PASS FURTHER INPUT CHECKING.\nOTHERCHK CLI   BUFFER+6,C'A'    CHECK FOR EVERYTHING\n         BNE   XYZ              IF NOT, TRY FOR IN OR OUT MODES.\n         MVI   TSOORNO+1,X'00'  IF EVERYTHING, NOP ALL THE\n         MVI   BATCHORN+1,X'00'    SELECTION BRANCHES.\n         MVI   SWAPABLE+1,X'00' ONLY SWAPABLE MEMORIES.\n         MVC   OPTMODE,=C'ALL'  INDICATE MODE OF OPERATION      KMT\nXYZ      DS    0H\n         CLI   BUFFER+6,C'O'    CHECK FOR OUT MODE\n         BNE   WHATHECK\n         MVI   INOROUT+1,X'00'  NOP THE BRANCH\n         OI    MODESW,MORSTUF   INDICATE CHANGE OF MODES.\n         MVC   OPTINO,=C'ANY'   INDICATE IN/OUT SELECTION       KMT\n         B     GOODGRIF\nWHATHECK CLI   BUFFER+6,C'I'    CHECK FOR IN OR READY MODE\n         BNE   GOODGRIF\n         MVI   INOROUT+1,X'10'  TAKE THE BRANCH\n         OI    MODESW,MORSTUF   INDICATE MODE SWITCH.\n         MVC   OPTINO,=C'IN '   INDICATE IN/OUT SELECTION       KMT\n         B     GOODGRIF\n         SPACE\nGOODGRIF DS    0H\n         MVC   SCRSIZE,=H'0'    RESET SCREEN SIZE.\n         LA    R1,BUFFER        PREPARE\n         LA    R6,BUFFER           FOR\n         ICM   R6,8,C' '              THE\n         LA    R7,BUFLEN                 MOVE\n         LA    R8,BUFFER                    CHARACTER\n         SR    R9,R9                           LONG\n         MVCL  R6,R8                              TO CLEAR BUFFER.\n         TM    MODESW,DOMAIN    IS DOMAIN THE NAME?            KMT\n         BO    DISPDMN          GO DOIT SAM                    KMT\n         TM    MODESW,MORSTUF   CHECK FOR CHANGE OF MODES.\n         BNO   MODEOK           BRANCH IF SAME MODE.\n         NI    MODESW,255-MORSTUF RESET MODE CHANGE.\n         B     FINDCVT          START OVER FROM BEGINNING.\n         SPACE\nMODEOK   DS    0H\n         LTR   R3,R3            CHECK TO SEE IF MORE MEMORIES TO PROCES\n         BZ    FINDCVT          NO, TAKE IT FROM THE TOP\n         BCT   R3,ASCBLOOP      WAS THERE ONLY ONE LEFT AT BUFFER FULL\n         B     FINDCVT          YES, START OVER FROM THE TOP.\n         EJECT\n*.....................................................................*\n*     FCI MOD TO DISPLAY DOMAINS ON THE SCREEN                        *\n*.....................................................................*\n         SPACE\nDISPDMN  L     R5,16               (R5)=ADDR OF CVT                FCI1\n         L     R5,CVTOPCTP(R5)     (R5)=ADDR OF RMCT               FCI1\n         L     R9,RMCTDMDT(R5)     (R9)=ADDR OF DMDT (FIRST ENTRY) FCI1\n         XR    R8,R8               CLEAR REG 4                     FCI1\n         ICM   R8,B'0011',RMCTDMNC(R5)   (R4)=NUMBER OF DOMAINS    FCI1\n         LTR   R8,R8               ANYBODY HOME?                   FCI1\n         BNP   BUILDHDR             NOPE-> EXIT STAGE LEFT         FCI1\n         USING DMDT,R9             ESTABLISH ADDR TO DOMAIN DESC. TABLE\n         LA    R1,BUFFER                                           KMT\n         MVC   SCRSIZE,=H'0'       INITIALIZE POINTERS AND BUFFER  KMT\n         MVC   HEADING,FCIHEAD     INIT DOMAIN DISPLAY HEADING     KMT\n         SPACE\nDMNLOOP  MVC   FCIBUF(2),=X'1DE8' MOVE IN HIGH INTENSITY FIELD.    FCI1\n         MVI   FCIBUF+2,X'40'     CLEAR OUTPUT LINE                FCI1\n         MVC   FCIBUF+3(78),FCIBUF+2 TO BLANKS.                    FCI1\n         SPACE 2\n         LA    R4,DMDTNO                                           FCI1\n         LA    R5,MNO                                              FCI1\n         BAL   R6,EDIT             GO EDIT DOMAIN NUMBER INTO MSG  FCI1\n         CLI   MNO+2,C'-'          DOMAIN=0?                       FCI1\n         BNE   DMNCONT              NO-> SKIP FIXUP                FCI1\n         MVI   MNO+2,C'0'                                          FCI1\nDMNCONT  DS    0H                                                  FCI1\n         SPACE\n         LA    R4,DMDTLO                                           FCI1\n         LA    R5,MLO                                              FCI1\n         BAL   R6,EDIT             GO EDIT MIN MPL INTO MSG        FCI1\n         SPACE\n         LA    R4,DMDTHI                                           FCI1\n         LA    R5,MHI                                              FCI1\n         BAL   R6,EDIT             GO EDIT MAX MPL INTO MSG        FCI1\n         SPACE\n         LA    R4,DMDTWT                                           FCI1\n         LA    R5,MWT                                              FCI1\n         BAL   R6,EDIT             GO EDIT WGHT FACTOR INTO MSG    FCI1\n         SPACE\n         LA    R4,DMDTMPLT                                         FCI1\n         LA    R5,MMPLT                                            FCI1\n         BAL   R6,EDITH            GO EDIT CURRENT MPL TGT INTO MSGFCI1\n         SPACE\n         LA    R4,DMDTRUA                                          FCI1\n         LA    R5,MRUA                                             FCI1\n         BAL   R6,EDITH            GO EDIT AVE # OF READY USRS     FCI1\n         SPACE\n         LA    R4,DMDTGOOU                                         FCI1\n         LA    R5,MGOOU                                            FCI1\n         BAL   R6,EDITH            GO EDIT CURRENT # USRS GOING OUTFCI1\n         SPACE\n         LA    R4,DMDTCMPL                                         FCI1\n         LA    R5,MCMPL                                            FCI1\n         BAL   R6,EDITH            GO EDIT CURRENT MPL INTO MSG    FCI1\n         SPACE\n         LA    R4,DMDTOUTU                                         FCI1\n         LA    R5,MOUTU                                            FCI1\n         BAL   R6,EDITH            GO EDIT CURNT # USRS ON OUT Q   FCI1\n         SPACE\n         LA    R4,DMDTINCU                                         FCI1\n         LA    R5,MINCU                                            FCI1\n         BAL   R6,EDITH            GO EDIT CURNT # SWAPBL IN C USR FCI1\n         SPACE\n         CLC   2(79,R1),FCIBUF+2    ANY CHANGE FROM LAST TIME      FCI1\n         BNE   MVLIN                                               FCI1\n         MVI   FCIBUF+1,X'60'      INDICATE NO CHANGE (LOW INTENS) FCI1\nMVLIN    MVC   0(81,R1),FCIBUF     MOVE BUFFER TO LINE             FCI1\n         SPACE 2\n         LA    R9,DMDTLEN(R9)      BUMP POINTER                    FCI1\n         LH    R7,SCRSIZE         SAVE ADDRESS OF LAST ENTRY       FCI1\n         LA    R7,81(R7)           AND BUMP                        FCI1\n         STH   R7,SCRSIZE           SIZE FOR TPUT TO USE           FCI1\n         LA    R1,81(R1)           BUMP BUFFER POINTER             FCI1\n         BCT   R8,DMNLOOP          LOOP THROUGH ALL DOMAINS        FCI1\n         B     BUILDHDR                                            FCI1\n         EJECT\n*.....................................................................*\n*     LOCAL SUBROUTINES   EDIT,EDITH                                  *\n*.....................................................................*\n         SPACE\nEDIT     ICM   R4,B'0001',0(R4)    GET BYTE TO CONVERT             FCI1\n         N     R4,=X'000000FF'                                     FCI1\n         B     DOEDIT                                              FCI1\nEDITH    ICM   R4,B'0011',0(R4)                                    FCI1\n         N     R4,=X'0000FFFF'                                     FCI1\nDOEDIT   C     R4,=F'999'          TO LARGE?                       FCI1\n         BNH   EDIT1                                               FCI1\n         MVC   0(3,R5),=C'***'     INDICATE TOO LARGE              FCI1\n         BR    R6                    AND RETURN                    FCI1\nEDIT1    CVD   R4,WORK             CONVERT TO DECIMAL              FCI1\n         MVC   0(3,R5),=X'202020'  MOVE IN MASK                    FCI1\n         BCTR  R5,0                DECREMENT POSITION FOR SPACE    FCI1\n         ED    0(4,R5),WORK+6        BEFORE NUMBER AND EDIT        FCI1\n         CLC   1(3,R5),=C'   '     ANYTHING THERE                  FCI1\n         BE    EDIT2                                               FCI1\n         BR    R6                                                  FCI1\nEDIT2    MVI   3(R5),C'-'          INDICATE PLACE HOLDER           FCI1\n         BR    R6                  RETURN                          FCI1\n         EJECT\nEODAD    DS    0H\n*\n         L     R13,4(,R13)           AREA CHAINING\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n*\n         EJECT\nMODESW   DC    X'00'  MODE CHANGE.\nMORSTUF  EQU   X'80'  MORE JUNK TO DO.....\nDOMAIN   EQU   X'08'  PLEASE DO DOMAIN STUFF                       FCI1\nWORK     DS    D\nHEX      DC    C'0123456789ABCDEF'\nSAVE     DS    18F\nREASONS  DC    C' ?? TPUTTGETLONGAUX<RS< WAITREQSENQ EXCHSWAP'\n*                |...|...|...|...|...|...|...|...|...|...|...\nSBACODE  DC    X'114040'\nX        DC    CL80' '\n         ORG   X\nLINE     DC    X'1D60'\nJOB      DC    CL8' '\n         DC    C' '\nPSTEP    DC    C' '\nSTEP     DC    CL8' '\n         DC    C' '\nWHERE    DC    CL3' '\n         DC    C' '\nSTATUS   DC    CL4' '\n         DC    C' '\nSIZE     DC    CL5' '\n         DC    CL2' '\nLINEWSS  DC    CL5' '\n         DC    CL2' '\nTYPE     DC    C' '\n         DC    C' '\nDP       DC    CL2' '\n         DC    C' '\nLINEPGN  DC    CL3' '\n         DC    C' '\nLINESWC  DC    CL3' '\n         DC    C' '\n         DC    C' '\n         DC    C' '\nLINEWMR  DC    CL5' '\n         DC    C' '\nLINEWMS  DC    CL7' '\n         DC    C' '\nCPUTIME  DC    CL8' '\n         DC    C' '\n         ORG X+90\n         DS    0H\nSCRSIZE  DC    AL2(BUFFER-CLEAR)\nTPUTFLG  DC    X'03'\nADBUF    DC    A(Z)\nCLR      DC    X'C7115D7E1140403C40400011404013'\n         SPACE 2\n*   C7= WCC FOR CLEAR  11= SET BUFFER ADDRESS 4040 = BUFADD POS 0000\n*   3C= REPEAT TO ADDRESS 4040(0000) CHAR(00) 11 = SET BUFFER ADDRESS\n*   4040 = POSITION 0000(R=1 C=1)  13 = INSERT CURSOR\n         SPACE 2\n*             XXXXXXXX -XXXXXXXX XXX XXXX XXXXX  XXXXX  X XX XXX XXX\nHEAD1   DC X'11C260'      LINE 3\n        DC CL77'  JOB     STEP   .STATUS. MEMORY   WSS  T DP  PG SWAPS X\n                 WMR    SRV    CPU'\n*              XXXXX XXXXXXX XXXXXXXX\n        DC X'11C150'      LINE 2\nFCIHEAD  DC   CL77'         DOMAIN MIN MAX WGT CUR TGT RDY  IN >OT OUT'\n*                   456789.123456789.123456789.123456789.123456789.012\n*                            XXX   XXX XXX XXX XXX XXX XXX XXX XXX XXX\nFCIBUF   DS    CL81                                                FCI1\nFCIOFST  EQU   9                 OFFSET INTO FCIBUFFER             FCI1\n         ORG   FCIBUF+FCIOFST+4                                    FCI1\nMSG      DS    CL43                                                FCI1\n         ORG   FCIBUF+FCIOFST+5                                    FCI1\nMNO      DS    CL3                                                 FCI1\n         ORG   FCIBUF+FCIOFST+11                                   FCI1\nMLO      DS    CL3                                                 FCI1\n         ORG   FCIBUF+FCIOFST+15                                   FCI1\nMHI      DS    CL3                                                 FCI1\n         ORG   FCIBUF+FCIOFST+19                                   FCI1\nMWT      DS    CL3                                                 FCI1\n         ORG   FCIBUF+FCIOFST+23                                   FCI1\nMCMPL    DS    CL3                                                 FCI1\n         ORG   FCIBUF+FCIOFST+27                                   FCI1\nMMPLT    DS    CL3                                                 FCI1\n         ORG   FCIBUF+FCIOFST+31                                   FCI1\nMRUA     DS    CL3                                                 FCI1\n         ORG   FCIBUF+FCIOFST+35                                   FCI1\nMINCU    DS    CL3                                                 FCI1\n         ORG   FCIBUF+FCIOFST+39                                   FCI1\nMGOOU    DS    CL3                                                 FCI1\n         ORG   FCIBUF+FCIOFST+43                                   FCI1\nMOUTU    DS    CL3                                                 FCI1\n         ORG\n         SPACE 2\n         LTORG\n         TITLE 'SBA  - BUFFER ADDRESSES'\n*\n* THE SET BUFFER ADDRESS (SBA) ORDER CODE IS FOLLOWED BY A 2-BYTE\n* BUFFER ADDRESS THAT CORRESPONDS (BUT NOT IN ANY RATIONAL WAY) TO\n* THE ROWS AND COLUMNS ON THE DISPLAY TUBE. THIS TABLE IS PROVIDED\n* TO SUPPORT DYNAMICALLY BUILDING THE BUFFER ADDRESS FIELDS WHEN THE\n* ROW AND COLUMN IS KNOWN.\n*\n* EACH BUFFER ADDRESS ENTRY CORRESPONDS TO A ROW ON THE DISPLAY\n* THE FIRST BYTE IS THE SAME FOR ALL ROWS, THE SECOND, THIRD AND\n* FOURTH BYTES DEFINE COLUMNS 1, 7, AND 8, RESPECTIVELY.\n*\n* TO PICK UP THE BUFFER ADDRESS YOU WANT, MULTIPLY THE ROW NUMBER\n* BY THE LENGTH OF EACH BUFFER ADDRESS ENTRY AND ADD THE START ADDRESS\n* OF THE TABLE.\n*\n* FOR EXAMPLE, THE ROW3 ENTRY IS =>  X'C1',X'50',X'D6',X'D7'\n* THE BUFFER ADDRESS CODES ARE:\n*\n* ROW 3, COL 1 = X'C150'\n* ROW 3, COL 7 = X'C1D6'\n* ROW 3, COL 8 = X'C1D7'\n*\nSBACODES DS    0H\nROW781   DC    X'40',X'40',X'C6',X'C7'\nBALENGTH EQU   *-ROW781\nROW782   DC    X'C1',X'50',X'D6',X'D7'\nROW783   DC    X'C2',X'60',X'E6',X'E7'\nROW784   DC    X'C3',X'F0',X'F6',X'F7'\nROW785   DC    X'C5',X'40',X'C6',X'C7'\nROW786   DC    X'C6',X'50',X'D6',X'D7'\nROW787   DC    X'C7',X'60',X'E6',X'E7'\nROW788   DC    X'C8',X'F0',X'F6',X'F7'\nROW789   DC    X'4A',X'40',X'C6',X'C7'\nROW7810  DC    X'4B',X'50',X'D6',X'D7'\nROW7811  DC    X'4C',X'60',X'E6',X'E7'\nROW7812  DC    X'4D',X'F0',X'F6',X'F7'\nROW7813  DC    X'4F',X'40',X'C6',X'C7'\nROW7814  DC    X'50',X'50',X'D6',X'D7'\nROW7815  DC    X'D1',X'60',X'E6',X'E7'\nROW7816  DC    X'D2',X'F0',X'F6',X'F7'\nROW7817  DC    X'D4',X'40',X'C6',X'C7'\nROW7818  DC    X'D5',X'50',X'D6',X'D7'\nROW7819  DC    X'D6',X'60',X'E6',X'E7'\nROW7820  DC    X'D7',X'F0',X'F6',X'F7'\nROW7821  DC    X'D9',X'40',X'C6',X'C7'\nROW7822  DC    X'5A',X'50',X'D6',X'D7'\nROW7823  DC    X'5B',X'60',X'E6',X'E7'\nROW7824  DC    X'5C',X'F0',X'F6',X'F7'\nROW7825  DC    X'5E',X'40',X'C6',X'C7'\nROW7826  DC    X'5F',X'50',X'D6',X'D7'\nROW7827  DC    X'60',X'60',X'E6',X'E7'\nROW7828  DC    X'61',X'F0',X'F6',X'F7'\nROW7829  DC    X'E3',X'40',X'C6',X'C7'\nROW7830  DC    X'E4',X'50',X'D6',X'D7'\nROW7831  DC    X'E5',X'60',X'E6',X'E7'\nROW7832  DC    X'E6',X'F0',X'F6',X'F7'\nROW7833  DC    X'E8',X'40',X'C6',X'C7'\nROW7834  DC    X'E9',X'50',X'D6',X'D7'\nROW7835  DC    X'6A',X'60',X'E6',X'E7'\nROW7836  DC    X'6B',X'F0',X'F6',X'F7'\nROW7837  DC    X'6D',X'40',X'C6',X'C7'\nROW7838  DC    X'6E',X'50',X'D6',X'D7'\nROW7839  DC    X'6F',X'60',X'E6',X'E7'\nROW7840  DC    X'F0',X'F0',X'F6',X'F7'\nROW7841  DC    X'F2',X'40',X'C6',X'C7'\nROW7842  DC    X'F3',X'50',X'D6',X'D7'\nROW7843  DC    X'F4',X'60',X'E6',X'E7'\nBTABLEN4 EQU   *-ROW781\n         EJECT\n**********************************************************************\n* NOTE: JUNK FROM THIS POINT UNTIL 'Z' ARE ALL PART OF THE           *\n*   'BIG SCREEN'  LEAVE THIS STUFF TOGETHER AND PUT CLEAR AT THE     *\n*   END OF THE PROGRAM IF YOU DONT WANT TO OVERFLOW MY ONE CHEAP     *\n*   BASE REGISTER..THAT DC 21CL81' ' WILL CHEW UP A LOT OF SPACE.... *\n**********************************************************************\n         SPACE 1\nCLEAR    DC    X'7EC71140401D4013401DE8'\n*LEAR    DC    X'C7115D7F1140403C4040001140401D4013401DE8'\n         SPACE 2\n*   C7= WCC FOR CLEAR  11= SET BUFFER ADDRESS 4040 = BUFADD POS 0000\n*   3C= REPEAT TO ADDRESS 4040(0000) CHAR(00) 11 = SET BUFFER ADDRESS\n*   4040 = POSITION 0000(R=1 C=1)  1D = START FIELD 40= UNPROTECTED\n*   13 = INSERT CURSOR 40 = BLANK 1D = START FIELD E8 = PROTECT HILITE\n         SPACE 2\nSYSHDR   DS    0CL77\n         DC    CL4'CPU='         CPU UTILIZATION\nHDRCPU   DC    CL3'XXX',C'%'\n         DC    CL5' AFC='        AVERAGE AVAILABLE FRAME COUNT\nHDRAFC   DC    CL4'XXXX'\n         DC    CL5' PFR='        PAGE FAULT RATE\nHDRAPR   DC    CL4'XXXX'\n         DC    CL5' ASQ='        AUX STORAGE MANAGER QUE LENGTH\nHDRASQ   DC    CL4'XXXX'\n         DC    CL5' UIC='        UNIREFERENCED INTERVAL COUNT\nHDRUIC   DC    CL4'XXXX'\n         DC    CL5' DIO='        DEFERRED IO REQUESTS\nHDRDIO   DC    CL4'XXXX'\n         DC    CL6' DMNS='       # OF DOMAINS IN ENTRIES\nHDRDMN   DC    3CL6' MT:RU'      MULTI-PROGRAMMING LEVEL TARGET\n         DC    X'11C150'         LINE 2\nOPTDEF   DC    79C'-'            # OF READY USERS\n         ORG   OPTDEF+3\n         DC    C'OPTIONS='\nOPTMODE  DC    C'BAT',C','\nOPTINO   DC    C'ANY'\n         ORG\nHEADING  DC    CL77' '\nBUFFER   DC    43CL83' '\nLENGTH   EQU   BUFFER-CLEAR\nZ        DS    X\nBUFLEN   EQU   Z-BUFFER\n         EJECT\n*.....................................................................*\n*        MAPPING DSECT FOR ASCB\n*.....................................................................*\n         IHAASCB\n*.....................................................................*\n*        MAPPING DSECT FOR SRM USER CONTROL BLOCK\n*.....................................................................*\n         IRAOUCB\n*.....................................................................*\n*        MAPPING DSECT FOR DMDT (DOMAIN DESCRIPTOR TABLE)             *\n*.....................................................................*\n         SPACE\nDMDT     DSECT\nDMDTNO   DS    XL1             DOMAIN NUMBER\nDMDTLO   DS    XL1             MIN  MPL LEVEL\nDMDTHI   DS    XL1             MAX  MPL LEVEL\nDMDTWT   DS    XL1             WEIGHTING FACTOR\nDMDTMPLT DS    XL2             CURRENT MPL TARGET\nDMDTRUA  DS    XL2             AVE # OF READY USERS\nDMDTGOOU DS    XL2             CURRENT # USERS GOING OUT\nDMDTCMPL DS    XL2             CURRENT MPL\nDMDTOUTU DS    XL2             CURRENT # USERS ON OUT Q\nDMDTINCU DS    XL2             CURRENT # SWAPPABLE INCORE USERS\nDMDTRUC  DS    XL4             ACCUM FOR READY USER AVERAGE\nDMDTEND  DS    0X              END OF DMT\nDMDTLEN  EQU   *-DMDT\n         SPACE 2\n*\n* EQUATES....\n*\nCVTOPCTP EQU   X'25C'          POINTER TO RMCT\nRMCTDMDT EQU   X'B4'           POINTER TO DOMAIN TABLE\nRMCTDMNC EQU   X'BC'           COUNT OF NUMBER OF DOMAINS\nRMCTWMST EQU   X'18'           ADDRESS OF WLM SPEC TABLE\n         SPACE 2\n         PRINT NOGEN\n         IKJTCB\n         IHAPSA\nTCBUVTAM DSECT\n         TCBUVTAM PFX=TCBU\n         END\n/*\n//LKED     EXEC PGM=HEWLF064,PARM=(XREF,LET,LIST,NCAL,TERM),\n//             COND=(4,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DSN=SYS2.LINKLIB,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=TECH.SERV.LOAD\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  SETCODE AC(1)\n     NAME APPLSAD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "APPLSPO": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x03/\\x03/\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 815, "newlines": 815, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCSPO  JOB (X0002,QCC,ASQCC),'X-BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=W,NOTIFY=ASQCC\n/*JOBPARM L=999\n//ASM     EXEC PGM=IEV90,REGION=2048K,PARM='OBJECT,NODECK,TERM'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DISP=SHR,DSN=TECH.SERV.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.HASPSRC\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nAPPLSPO  TITLE '* * *  SPO - VTAM SECONDARY PROGRAM OPERATOR  * * *'\n***********************************************************************\n*                                                                     *\n*  PURPOSE - PROVIDE VTAM SECONDARY PROGRAM OPERATOR FOR USE IN TSO   *\n*            COMMAND OR AS A STAND ALONE VTAM APPLICATION PROGRAM.    *\n*                                                                     *\n*  OPERATION - SPO OPENS ITS OWN ACB, AND USING TPUT/TGET AND         *\n*              SENDCMD/RCVCMD ALLOWS AN AUTHORIZED TSO USER TO        *\n*              BE A VTAM SECONDARY PROGRAM OPERATOR.  THE COMMANDS    *\n*              AND RESPONSES ARE ALSO RECORDED ON SYSLOG.             *\n*                                                                     *\n*  WRITTEN BY DOUG MOORE - SEPTEMBER 1978                             *\n*                                                                     *\n*  MODIFIED BY DOUG MOORE - JANUARY 1980                              *\n*     SUPPORT ADDED FOR * = REPEAT LAST COMMAND                       *\n*                       ? = SHOW LAST COMMAND                         *\n*                       X = PCF EXIT                                  *\n*                                                                     *\n*  MODIFIED BY DOUG MOORE - AUGUST 1980                               *\n*     SUPPORT ADDED FOR MULTIPLE SPO'S.  CURRENT MAX OF 3.            *\n*                                                                     *\n*  MODIFIED BY DOUG MOORE - JULY 1981                                 *\n*     SUPPORT ADDED FOR PFKEYS.                                       *\n*                                                                     *\n*  MODIFIED BY BRIAN COOK - SEPTEMBER 17, 1984                        *\n*     CHANGED TO RUN UNDER APPLMON, ADDED 2 BASE REGISTERS.           *\n*                                                                     *\n***********************************************************************\n         EJECT\n         MACRO\n         VPUT  &VAREA,&VLEN\n         LA    R0,&VLEN\n         LA    R1,&VAREA\n         L     R15,TCBUVPUT\n         BALR  R14,R15\n         MEND\n         EJECT\nSPO      CSECT\n         USING *,12,11,10\n         STM   R14,R12,12(R13)\n         LR    R12,R15             LOAD BASE REGISTER\n         LR    R2,R13              SAVE PREVIOUS RSA POINTER\n         LR    R11,R12             LOAD BASE\n         A     R11,FOURK                     REGISTER 2\n         LR    R10,R11             LOAD BASE\n         A     R10,FOURK                     REGISTER 3\n*\n         USING PSA,0\n         L     R1,PSATOLD\n         USING TCB,1\n         L     R1,TCBUSER\n         USING TCBUVTAM,1\n         LA    R13,TCBUSAV2\n         DROP  1\n         USING TCBUSAV2,13\n*\n         ST    R2,4(R13)           CHAIN SAVE AREAS\n         ST    R13,8(R2)           CHAIN SAVE AREAS\n*\n         B     POFAUTH\n*\nFOURK    DC    F'4096'\n         EJECT\nPOFAUTH  DS    0H\n         OPEN  (POFACB)            OPEN SPO ACB\n         LTR   R15,R15             Q. OPEN OK\n         BZ    POFOPNOK            ...YES, CONTINUE\n         SPACE\nPOFOPNF  DS    0H\n         LA    R2,POFACB           POINT TO ACB\n         USING IFGACB,R2\n         CLI   ACBOFLGS,X'02'      Q. POSSIBLE ACB ALREADY OPEN\n         BNE   POFOPNF2            ...NO, SOMETHING ELSE\n         CLI   ACBERFLG,X'58'      Q. POSSIBLE ACB ALREADY OPEN\n         BNE   POFOPNF2            ...NO, SOMETHING ELSE\n         CLC   =CL8'POF003',POFACBAI+1   Q. IS THIS THE LAST ALTERNATE\n         BE    POFMAXU                   ...YES, THAT WAS THE LAST ACB\n         AP    POFACB#,=PL1'1'     GET NEXT ACB NUMBER\n         UNPK  POFACBAI+4(3),POFACB#(2)\n         OI    POFACBAI+6,X'F0'\n         B     POFAUTH             TRY AGAIN\nPOFMAXU  DS    0H\n         WTO   '* MAXIMUM POF USERS ALREADY STARTED *',ROUTCDE=11\n         B     POFRTN              GO AWAY\n         SPACE\nPOFOPNF2 DS    0H\n         WTO   'OPEN FAILED FOR VTAM SPO ACB',ROUTCDE=11\n         B     POFRTN              OPEN FAILED SO GET OUT\n         SPACE\n         DROP  R2\n         EJECT\nPOFOPNOK DS    0H\n*        GTSIZE                    , GET SCREEN SIZE\n*        STC   R0,GTSIZE0          SAVE FOR LATER TEST\n*        STC   R1,GTSIZE1          SAVE FOR LATER TEST\n         MVC   WTOLTH,=AL2(33)     LENGTH OF MESSAGE\n         MVC   WTOTXT(7),POFUSRID  PUT USERID IN MESSAGE\n         MVC   WTOTXT+7(14),=C' LOGGED ON TO '\n         MVC   WTOTXT+21(8),POFACBAI+1   PUT ACB IN MESSAGE\n         WTO   MF=(E,WTOLIST)      WRITE LOGON TO SYSLOG\n         SPACE\nPOFRCV1  DS    0H\n         RCVCMD RPL=POFRPLRC       ISSUE FIRST RCVCMD\n         LTR   R15,R15             Q. ACCEPTED\n         BZ    POFRQCMD            ...YES, GO REQUEST COMMANDS\n         BAL   R9,ABEND           ...NO, GIVE UP\n         SPACE 2\nPOFRQCMD DS    0H\n         LA    R0,SPOTEXT          SPO SCREEN\n         LA    R1,SPOSCRSZ         SPO SCREEN SIZE\n         LA    R14,POFTEXT         SPO SCREEN\n         LR    R15,R1\n*\n         MVCL  R14,R0\n*\nPOFSENDD DS    0H\n         LA    R1,POFTEXT\n         LA    R0,SPOSCRSZ\n         L     R15,TCBUVPUT\n         BALR  R14,R15             CLEAR REG\n*\n         B     POF3270             GO READ THE INPUT\n*\nPOFRQCHK DS    0H\n         OC    POFIN,=CL80' '      MAKE UPPERCASE FOR WRITING TO SYSLOG\n         CLC   =CL3'END',POFIN     Q. THE END\n         BE    POFEOJ              ...YES, GO TO EOJ\n         CLC   =CL4'HELP',POFIN    Q. HELP WANTED\n         BE    POFHELP             ...YES, GO DO HELP\n         SPACE\n         CLI   POFIN,C'*'          Q. WANT TO DO SAME THING\n         BNE   POFCHKQ             ...NO, GO CHECK FOR QUESTION MARK\n         L     R1,SAVECMDL         RELOAD LENGTH\n         MVC   POFIN,SAVECMD       RELOAD COMMAND\n         B     POFDOCMD            GO DO COMMAND\n         SPACE\nPOFCHKQ  DS    0H\n         CLI   POFIN,C'?'          Q. WANT TO SEE LAST COMMAND\n         BNE   POFSTORE            ...NO, GO SAVE THIS INPUT\n*        L     R1,SAVECMDL         RELOAD LENGTH\n*        VPUT  SAVECMD,(1)         WRITE LAST COMMAND BACK OUT\n         B     POFRQCMD            GO SEE WHAT TO DO\n         SPACE\nPOFSTORE DS    0H\n         ST    R1,SAVECMDL         SAVE LENGTH\n         MVC   SAVECMD,POFIN       SAVE COMMAND\nPOFDOCMD DS    0H\n         SPACE\n* ISSUE THE COMMAND\n         LA    R2,POFRPLSC         POINT TO SENDCMD RPL\n         USING IFGRPL,R2\n         AH    R1,=H'4'            ADD HEADER LENGTH TO COMMAND LENGTH\n         ST    R1,RPLRLEN          STORE LENGTH IN RPL\n         DROP  R2\n         STH   R1,WTOLTH           STORE LENGTH IN WTO\n         MVC   WTOTXT(L'POFIN),POFIN   MOVE COMMAND TO WTO\n         WTO   MF=(E,WTOLIST)      WRITE COMMAND TO LOG\n*\n         TIME  BIN\n         ST    R0,RCVTIME\n*\n         LA    R1,O05-SPOTEXT      FIRST LINE FOR OUTPUT\n         LA    R1,POFTEXT(R1)      POINT TO IT\n         ST    R1,POFIRST          SET THIS FOR RECEIVE EXIT\n         LA    R1,O17-SPOTEXT      LAST LINE FOR OUTPUT\n         LA    R1,POFTEXT(R1)      POINT TO IT\n         ST    R1,POFLAST          SET THIS FOR RECEIVE EXIT\n*\n         SENDCMD RPL=POFRPLSC\n         LTR   R15,R15             Q. SUCCESSFUL\n         BNZ   POFSNDAB            ...NO, ABEND\nPOFWAIT2 DS    0H\n*\n* WAIT 2 SEC TO ALLOW THE RECEIVE COMMAND EXIT TO PROCESS RESPONSES\n*\n         STIMER WAIT,BINTVL=TWOSEC\nPOFTTIME DS    0H\n*\n*  WAIT 2 SECONDS AFTER THE LAST COMMAND RESPONSE WAS RECEIVED\n*\n         TIME  BIN\n         ST    R0,TSTTIME\n*                              CLEAR THE SIGN BITS\n         MVI   TSTTIME,0\n         MVI   RCVTIME,0\n         L     R14,TSTTIME     MY TIME\n         L     R15,RCVTIME     COMMAND RESPONSE RECEIVED TIME\n         A     R15,TWOSEC      BUMP BY 2 SECONDS\n         CR    R14,R15         IF MY TIME IS LESS\n         BL    POFWAIT2        WAIT 2 MORE SECONDS\n*\n         B     POFSENDD            ...YES, GO GET ANOTHER COMMAND\n*\nTWOSEC   DC    F'200'\nTSTTIME  DS    F\nPOFSNDAB DS    0H\n         BAL   R9,ABEND           ...NO, GIVE UP\n         EJECT\nPOF3270  DS    0H\n*\n         LA    R1,POFIN\n         LA    R0,80\n         L     R15,TCBUVGET\n         BALR  R14,R15             CLEAR REG\n         L     R15,TCBURPLA        POINT TO RECEIVE RPL\n         USING IFGRPL,15\n         L     R1,RPLRLEN          STORE LENGTH IN RPL\n         DROP  15\n*\n         LTR   R1,R1               Q. ANY INPUT\n         BZ    POFRQCMD            ...NO, GO ASK AGAIN\n         LA    R15,AIDTABLE        POINT TO AID TABLE\n         LA    R14,NUMAIDS         NUMBER OF AIDS I MIGHT SEE\nPOFAIDLP DS    0H\n         CLC   POFIN(1),0(R15)     Q. IS THIS THE AID\n         BE    POFGAID             ...YES, PROCEED\n         LA    R15,4(0,R15)        POINT TO NEXT ENTRY\n         BCT   R14,POFAIDLP        LOOP UNTIL DONE\n*        NO HITS POINTS TO DEFAULT ENTRY\n         SPACE\nPOFGAID  DS    0H\n         L     R2,0(0,R15)         GET ADDRESS OF AID FUNCTION TABLE\n         CLI   0(R2),X'FF'         Q. ENTER KEY\n         BNE   POFNOTEN            ...NO, PROCEED\n         MVC   POFIN(74),POFIN+6   GET RID OF 3270 STUFF\n         SH    R1,=H'6'            FIX LENGTH\n         BNP   POFRQCMD            THERE WAS NO INPUT, GET NEW CMD\n         B     POFRQCHK            RETURN TO NORMAL FLOW\nPOFNOTEN DS    0H\n         MVC   WORKCMD,POFIN       SAVE INPUT TEMPORARILY\n         MVC   POFIN,BLNKLINE      BLANK OUT BUFFER\n         CLI   0(R2),X'00'         Q. ANY PROCESSING\n         BNE   POFAIDP             ...YES, PROCEED\nPOFNOOPS DS    0H\n         SLR   R3,R3               CLEAR REG FOR EXECUTE\n         IC    R3,1(0,R2)          GET LENGTH FOR EXECUTE MOVE\n         EX    R3,AIDMVC           MOVE IN COMMAND\n         LA    R1,1(0,R3)          PUT REAL LENGTH IN R1\n         B     POFRQCHK            RETURN TO NORMAL FLOW\nAIDMVC   MVC   POFIN(0),2(R2)      MOVE COMMAND TO BUFFER\nBLDMVC   MVC   0(0,R4),WORKCMD+6   BUILD NEW COMMAND\n         SPACE\nPOFAIDP  DS    0H\n         CLI   0(R2),X'01'         Q. FURTHER PROCESSING REQUIRED\n         BNE   POFAIDF             ...NO, PROCEED\n         SH    R1,=H'6'            CORRECT LENGTH\n         BNP   POFNOOPS            BRANCH IF NO OPERANDS\n         SLR   R3,R3               CLEAR REG FOR EXECUTE\n         IC    R3,1(0,R2)          GET LENGTH FOR EXECUTE MOVE\n         EX    R3,AIDMVC           MOVE IN 1ST PART OF COMMAND\n         LA    R4,POFIN+1(R3)      POINT TO END OF THIS PIECE\n         BCTR  R1,0                DECREMENT FOR EXECUTED MOVE\n         EX    R1,BLDMVC           MOVE IN REMAINDER OF COMMAND\n         LA    R1,2(R1,R3)         ADD NEW PART TO TOTAL(+2 FOR EX MVC)\n         B     POFRQCHK            RETURN TO NORMAL FLOW\n         SPACE\nPOFAIDF  DS    0H\n         LA    R15,BADAID          POINT TO UNSUPPORTED AID\n         B     POFGAID             THROW IN THE TOWEL\n         EJECT\nPOFHELP  DS    0H\n         LA    R1,HLPTEXT          HELP SCREEN\n         LA    R0,HLPSCRSZ         HELP SCREEN LENGTH\n         L     R15,TCBUVPUT\n         BALR  R14,R15             CLEAR REG\n         LA    R1,TCBUFILL\n         LA    R0,80\n         L     R15,TCBUVGET\n         BALR  R14,R15             CLEAR REG\n         B     POFRQCMD            RETURN\n         SPACE\n         EJECT\nABEND    DS    0H\n         LA    R1,1                SET DUMP OPTION\n         SLL   R1,31\n         ALR   R1,R15              SET ABEND CODE\n         ABEND (1)\n         EJECT\nPOFEOJ   DS    0H\n         CLOSE (POFACB)            CLOSE THE ACB\n         LTR   R15,R15             Q. CLOSE SUCCESSFUL\n         BZ    POFCLSOK            ...YES, PROCEED\n         MVC   POFOUT(29),=C'CLOSE FAILED FOR VTAM SPO ACB'\n         VPUT  POFOUT,29\n         SPACE\nPOFCLSF  DS    0H\n         LA    R2,POFACB           POINT TO ACB\n         USING IFGACB,R2\n         CLI   ACBERFLG,X'4C'      Q. MORE MESSAGES OUSTANDING\n         BNE   POFCLSF2            ...NO, PRESS ON\n         MVC   POFOUT(27),=C'OUTSTANDING MESSAGES PURGED'\n         VPUT  POFOUT,27\n         B     POFEOJ              TRY CLOSE AGAIN\n         SPACE\nPOFCLSF2 DS    0H\n         MVC   POFDBLWK+1(1),ACBOFLGS   GET OPEN FLAGS\n         UNPK  POFDBLWK(1),POFDBLWK+1(1)   PREPARE FOR CONVERSION\n         MVC   POFDBLWK+3(1),ACBERFLG   GET ERROR FLAGS\n         UNPK  POFDBLWK+2(1),POFDBLWK+3(1) PREPARE FOR CONVERSION\n         NC    POFDBLWK(4),=X'0F0F0F0F'    PREPARE FOR TRANSLATE\n         TR    POFDBLWK(4),POFTRTBL     TRANSLATE\n         MVC   POFMSG1(4),POFDBLWK    PUT IN MESSAGE\n         VPUT  POFMSG1,L'POFMSG1\n         B     POFRTN              CLOSE FAILED SO GET OUT\n         SPACE\n         DROP  R2\n         SPACE 2\nPOFCLSOK DS    0H\n         MVC   WTOLTH,=AL2(34)     LENGTH OF MESSAGE\n         MVC   WTOTXT(7),POFUSRID  PUT USERID IN MESSAGE\n         MVC   WTOTXT+7(15),=C' LOGGED OFF OF '\n         MVC   WTOTXT+22(8),POFACBAI+1    PUT ACB IN MESSAGE\n         WTO   MF=(E,WTOLIST)      WRITE LOGOFF TO SYSLOG\n         SPACE\nPOFRTN   DS    0H\n         L     R13,4(R13)          RESTORE CALLERS RSA\n         RETURN (14,12),RC=0       RESTORE REGISTERS AND RETURN\n         SPACE\n         LTORG\n         DROP  12\n         DROP  11\n         DROP  10\n         TITLE 'SPO COMMAND RESPONSE RECEIVE EXIT'\nPOFRCVEX DS    0H\n         LR    R12,R15             GET NEW BASE\n         USING POFRCVEX,12,11,10\n         LR    R11,R12             LOAD BASE\n         A     R11,FOURK2                    REGISTER 2\n         LR    R10,R11             LOAD BASE\n         A     R10,FOURK2                    REGISTER 3\n         LR    R9,R14              SAVE RETURN REG\n         LR    R2,R1               SAVE RPL POINTER\n         USING IFGRPL,R2           ADDRESS RPL\n         LA    R13,POFRCVSA        POINT TO RSA\n*\n*  SET TIME TO INDICATE WHEN RCVCMD EXIT WAS ENTERED\n*\n         TIME  BIN\n         ST    R0,RCVTIME\n*\n         CHECK RPL=POFRPLRC        CHECK RCVCMD RPL\n         LTR   R15,R15             Q. SUCCESSFUL\n         BZ    POFRCVA             ...YES, PROCEED\n         BAL   R14,RCVEABND        ...NO, GIVE UP\n         SPACE 3\nPOFRCVA  DS    0H\n         CLC   =XL2'100D',RPLRTNCD   Q. ACB CLOSED\n         BE    POFRCVR               ...YES, DONT DO ANY MORE\n         CLC   =XL2'1470',RPLRTNCD   Q. ACB CLOSED\n         BE    POFRCVR               ...YES, DONT DO ANY MORE\n         TM    POFCMDI+1,X'C0'     Q. POSSIBLE NO DATA\n         BC    9,POFRCVB           ...NO, CONTINUE (ONES OR ZEROS)\n         TM    POFCMDI+1,X'80'     Q. END OF MULTI-LINE, NO DATA\n         BO    POFRCVI             ...YES, NO OUTPUT, ISSUE RCVCMD\nPOFRCVB  DS    0H\n         L     R15,RPLRLEN         GET LENGTH OF REPLY\n         BCTR  R15,0               MINUS 1 FOR EXECUTED MOVE\n         L     R1,POFIRST          LOCATION TO PUT THIS IN\n         C     R1,POFLAST          ON LASTLINE?\n         BNL   POFRCVN             YUP\n         EX    R15,RSPMVC          A(REPLY)\n         LA    R1,O08-O07(,R1)     BUMP TO NEXT LOCATION\n         ST    R1,POFIRST          LOCATION TO PUT THIS IN\n         SPACE\nPOFRCVN  DS    0H\n         MVC   WTOTXT(L'POFIMSG),POFIMSG   MOVE RESPONSE TO WTO\n         WTO   MF=(E,WTOLIST)      WRITE RESPONSE TO LOG\nPOFRCVI  DS    0H\n         RCVCMD RPL=POFRPLRC       ISSUE ANOTHER RCVCMD\n         LTR   R15,R15             Q. ACCEPTED\n         BZ    POFRCVR             ...YES, RETURN\n         BAL   R14,RCVEABND        ...NO, GIVE UP\nPOFRCVR  DS    0H\n         LR    R14,R9              RESTORE RETURN REG\n         BR    R14                 RETURN\nRSPMVC   MVC   6(0,R1),POFIMSG     A(REPLY)\nPOFIRST  DS    F\nPOFLAST  DS    F\nFOURK2   DC    F'4096'\n         SPACE 3\nRCVEABND DS    0H\n         LA    R1,1                SET DUMP OPTION\n         SLL   R1,31\n         ALR   R1,R15              SET ABEND CODE\n         ABEND (1)                 THIS ABEND WILL CAUSE A SVC DUMP\n*                                     ENTITLED 'VTAM IRB ABEND'\n         SPACE\nPOFRCVSA DS    18F                 RSA FOR RCVCMD EXIT\nRCVTIME  DS    F\n         LTORG\n         DROP  R2,R12,11,10\n         SPACE\n         EJECT\nPOFLERAD DS    0H\nPOFSYNAD DS    0H\n         LR    R12,R15             SET UP BASE\n         USING POFLERAD,R12,11,10\n         LR    R11,R12             LOAD BASE\n         A     R11,FOURK3                    REGISTER 2\n         LR    R10,R11             LOAD BASE\n         A     R10,FOURK3                    REGISTER 3\n         LR    R2,R1               SAVE RPL POINTER\n         USING IFGRPL,R2\n         LR    R9,R14              SAVE RETURN ADDRESS\n         CLC   =XL2'100D',RPLRTNCD   Q. IS THIS PSEUDO ERROR (ACB CLSD)\n         BE    POFNOERR            ...YES, NOT REALLY AN ERROR\n         CLC   =XL2'146E',RPLRTNCD   Q. IS THIS PSEUDO ERROR\n         BE    POFNOERR            ...YES, NOT REALLY AN ERROR\n         CLC   =XL2'1471',RPLRTNCD   Q. IS THIS PSEUDO ERROR\n         BE    POFNOERR            ...YES, NOT REALLY AN ERROR\n         CLC   =XL2'1470',RPLRTNCD   Q. IS THIS PSEUDO ERROR\n         BE    POFNOERR            ...YES, NOT REALLY AN ERROR\n         SPACE\n         MVC   POFOUT(14),=C'UNKNOWN FAILED'\n         TM    RPLREQ,RPLRVCMD     Q. RCVCMD FAILED\n         BNO   POFREQ2             ...NO, TRY SENDCMD\n         MVC   POFOUT(7),=C'RCVCMD '   SHOW RCVCMD\n         B     POFREQST\nPOFREQ2  DS    0H\n         TM    RPLREQ,RPLSDCMD     Q. SENDCMD FAILED\n         BNO   POFREQST            ...NO, THATS IT\n         MVC   POFOUT(7),=C'SENDCMD'   SHOW SENDCMD\nPOFREQST DS    0H\n         VPUT  POFOUT,14\nPOFLEMSG DS    0H\n         MVC   POFDBLWK+1(1),RPLRTNCD   GET RETURN CODE\n         UNPK  POFDBLWK(1),POFDBLWK+1(1)   PREPARE FOR CONVERSION\n         MVC   POFDBLWK+3(1),RPLFDB2    GET FEEDBACK FIELD\n         UNPK  POFDBLWK+2(1),POFDBLWK+3(1) PREPARE FOR CONVERSION\n         NC    POFDBLWK(4),=X'0F0F0F0F'    PREPARE FOR TRANSLATE\n         TR    POFDBLWK(4),POFTRTBL     TRANSLATE\n         MVC   POFMSG2(4),POFDBLWK    PUT IN MESSAGE\n         VPUT  POFMSG2,L'POFMSG2\n         SPACE\nPOFLERTN DS    0H\n         LA    R15,BIT0            INDICATE SENDCMD/RCVCMD FAILURE\n         LR    R14,R9              RELOAD RETURN REG\n         BR    R14                 RETURN\n         SPACE\nPOFNOERR DS    0H\n         SLR   R15,R15             SET GOOD RETURN CODE\n         LR    R14,R9              RELOAD RETURN REG\n         BR    R14                 RETURN\n         SPACE\nLEABEND  DS    0H\n         LA    R15,BIT0+BIT1       INDICATE SENDCMD/RCVCMD FAILURE\n*                                     PLUS TPUT FAILURE\n         LR    R14,R9              RELOAD RETURN REG\n         BR    R14                 RETURN\nFOURK3   DC    F'4096'\n         LTORG\n         TITLE 'A P P L M O N - SPO DISPLAY SCREEN '\n*\nHLPTEXT  DS    0H\n         DC    X'7EC2'\n    DC X'1140401D60',CL80' '\n    DC X'11C1501DE8',23C'-',CL32'APPLMON VTAM OPERATOR DISPLAY',24C'-'\n         DC    C' '\n    DC X'11C2601DE8',CL13'COMMAND ===>',X'1D40',X'13',CL67' '\n    DC X'11C3F01D60',CL80' '\n    DC X'11C5401D60',CL80' PFK1  =  HELP'\n    DC X'11C6501D60',CL80' PFK2  =  D NET,BFRUSE'\n    DC X'11C7601D60',CL80' PFK3  =  END'\n    DC X'11C8F01D60',CL80' PFK4  =  D NET,PENDING'\n    DC X'114A401D60',CL80' PFK5  =  D NET,APPLS'\n    DC X'114B501D60',CL80' PFK6  =  D NET,MAJNODES'\n    DC X'114C601D60',CL80' PFK7  =  D NET,LINES,I'\n    DC X'114DF01D60',CL80' PFK8  =  D NET,CLSTRS,I'\n    DC X'114F401D60',CL80' PFK9  =  D NET,TERMS,I'\n    DC X'1150501D60',CL80' PFK10 =  D NET,ID='\n    DC X'11D1601D60',CL80' PFK11 =  V NET,ACT,ID='\n    DC X'11D2F01D60',CL80' PFK12 =  V NET,INACT,ID='\n    DC X'11D4401D60',CL80' '\n    DC X'11D5501D60',CL80' '\n    DC X'11D6601D60',CL80'ENTER END COMMAND TO RETURN TO SPO DISPLAY'\n    DC X'11D7F01D60',CL80' '\nHLPSCRSZ EQU   *-HLPTEXT\n*\n         TITLE 'A P P L M O N - SPO DISPLAY SCREEN '\n*\nSPOTEXT  DS    0H\n         DC    X'7EC2'\nO01 DC X'1140401D60',CL80' '\nO02 DC X'11C1501DE8',23C'-',CL32'APPLMON VTAM OPERATOR DISPLAY',24C'-'\n         DC    C' '\nO03 DC X'11C2601DE8',CL13'COMMAND ===>',X'1D40',X'13',CL67' '\nO04 DC X'11C3F01D60',CL80' '\nO05 DC X'11C5401D60',CL80' '\nO06 DC X'11C6501D60',CL80' '\nO07 DC X'11C7601D60',CL80' '\nO08 DC X'11C8F01D60',CL80' '\nO09 DC X'114A401D60',CL80' '\nO10 DC X'114B501D60',CL80' '\nO11 DC X'114C601D60',CL80' '\nO12 DC X'114DF01D60',CL80' '\nO13 DC X'114F401D60',CL80' '\nO14 DC X'1150501D60',CL80' '\nO15 DC X'11D1601D60',CL80' '\nO16 DC X'11D2F01D60',CL80' '\nO17 DC X'11D4401D60',CL80' '\nO18 DC X'11D5501D60',CL80' '\nO19 DC X'11D6601D60',CL80'ENTER END COMMAND TO TERMINATE SPO DISPLAY'\nO20 DC X'11D7F01D60',CL80' '\nSPOSCRSZ EQU   *-SPOTEXT\n*\nPOFTEXT  DS    XL(SPOSCRSZ)\n         TITLE 'A P P L M O N - DATA AREAS'\n         SPACE\n         DROP  R2,R12\n         EJECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 2\nBIT0     EQU   X'80'\nBIT1     EQU   X'40'\nBIT2     EQU   X'20'\nBIT3     EQU   X'10'\nBIT4     EQU   X'08'\nBIT5     EQU   X'04'\nBIT6     EQU   X'02'\nBIT7     EQU   X'01'\n         SPACE 2\n         EJECT\nPOFRSA   DS    18D                 REGISTER SAVE AREA\nPOFDBLWK DS    D                   DOUBLE WORD WORK AREA\n         SPACE\nCPPLPTR  DC    A(0)                A(CPPL)\n         SPACE\nCSPLIST  EQU   *\nCSPLUPT  DC    A(0)                A(UPT)\nCSPLECT  DC    A(0)                A(ECT)\nCSPLECB  DC    A(POFCECB)          A(ECB)\nCSPLFLG  DC    A(POFCFLG)          A(FLAGS)\nCSPLOA   DC    A(POFCOA)           A(OUTPUT AREA)\nCSPLCBUF DC    A(POFCBUF)          A(BUFFER)\n         SPACE\nPOFCECB  DC    A(0)                ECB\nPOFCFLG  DC    X'80',AL3(0)        FLAGS\nPOFCOA   DC    XL8'00'             OUTPUT AREA\nPOFCBUF  EQU   *\n         DC    H'84'               LENGTH\n         DC    H'0'                OFFSET\n         DC    CL80' '             BUFFER\n         SPACE\nIKJSCAN  DC    CL8'IKJSCAN'        NAME OF IKJSCAN FOR LINK\n         SPACE\nPOFTRTBL DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5F6'\n         SPACE\nPOFOUT   DS    CL80                TPUT BUFFER\n         SPACE\nPOFCMDI  EQU   *                   COMMAND INPUT BUFFER (FROM VTAM)\n         DS    CL4                 COMMAND HEADER\nPOFIMSG  DS    CL126               MESSAGE\nPOFCMDIL EQU   *-POFCMDI\n         SPACE\nPOFCMDO  EQU   *                   COMMAND OUTPUT BUFFER (TO VTAM)\n         DC    X'00'               COMMAND HEADER\n         DC    X'03'\n         DC    X'0000'\nPOFIN    DS    CL80                TGET BUFFER\nPOFCMDOL EQU   *-POFCMDO\n         SPACE\nSAVECMDL DC    F'0'                LENGTH OF SAVED COMMAND\nSAVECMD  DC    CL80' '             SAVED COMMAND\nWORKCMD  DC    CL80' '             COMMAND WORK AREA\nBLNKLINE DC    CL80' '             BLANK LINE FOR CLEARING OUT BUFFER\n         SPACE 2\nWTOLIST  WTO   ' ',MCSFLAG=HRDCPY,MF=L   WTO TO LOG CMDS & RESPONSES\n         SPACE\nWTOLTH   EQU   WTOLIST,2           LENGTH OF TEXT + 4\n         ORG   WTOLIST+4           POINT TO MESSAGE\nWTOTXT   DS    CL126               MESSAGE TEXT (MAX OF 124)\n         SPACE 2\nPOFUSRID DS    CL7                 TSO USER ID\nPOFMSG1  DC    C'XXXX = ACBOFLGS/ACBERFLG'\nPOFMSG2  DC    C'XXXX = RTNCD/FDBK2'\nGTSIZE0  DS    X                   NUMBER OF LINES/SCREEN\nGTSIZE1  DS    X                   NUMBER OF CHARS/LINE\n         EJECT\nAIDTABLE DS    0F\n         DC    X'7D',AL3(ENTER)    ENTER KEY/SELECTOR LIGHT-PEN ATTN\n         DC    X'F1',AL3(PFK1)     PFK 1\n         DC    X'F2',AL3(PFK2)     PFK 2\n         DC    X'F3',AL3(PFK3)     PFK 3\n         DC    X'F4',AL3(PFK4)     PFK 4\n         DC    X'F5',AL3(PFK5)     PFK 5\n         DC    X'F6',AL3(PFK6)     PFK 6\n         DC    X'F7',AL3(PFK7)     PFK 7\n         DC    X'F8',AL3(PFK8)     PFK 8\n         DC    X'F9',AL3(PFK9)     PFK 9\n         DC    X'7A',AL3(PFK10)    PFK 10\n         DC    X'7B',AL3(PFK11)    PFK 11\n         DC    X'7C',AL3(PFK12)    PFK 12\n         DC    X'C1',AL3(PFK13)    PFK 13\n         DC    X'C2',AL3(PFK14)    PFK 14\n         DC    X'C3',AL3(PFK15)    PFK 15\n         DC    X'C4',AL3(PFK16)    PFK 16\n         DC    X'C5',AL3(PFK17)    PFK 17\n         DC    X'C6',AL3(PFK18)    PFK 18\n         DC    X'C7',AL3(PFK19)    PFK 19\n         DC    X'C8',AL3(PFK20)    PFK 20\n         DC    X'C9',AL3(PFK21)    PFK 21\n         DC    X'4A',AL3(PFK22)    PFK 22\n         DC    X'4B',AL3(PFK23)    PFK 23\n         DC    X'4C',AL3(PFK24)    PFK 24\n         DC    X'6E',AL3(PA2)      PA 2\n         DC    X'6B',AL3(PA3)      PA 3\nNUMAIDS  EQU   (*-AIDTABLE)/4      TOTAL NUMBER OF AIDS\nBADAID   DC    X'00',AL3(NOSUPT)   NOT SUPPORTED\n         EJECT\nENTER    DC    X'FF'               FLAGS\n         DC    AL1(ENTERL-3)       LENGTH FOR EXECUTED MOVE\n         DC    C' '                COMMAND\nENTERL   EQU   *-ENTER             LENGTH\nPFK1     DC    X'00'\n         DC    AL1(PFK1L-3)\n         DC    C'HELP'\nPFK1L    EQU   *-PFK1\nPFK2     DC    X'00'\n         DC    AL1(PFK2L-3)\n         DC    C'D NET,BFRUSE'\nPFK2L    EQU   *-PFK2\nPFK3     DC    X'00'\n         DC    AL1(PFK3L-3)\n         DC    C'END'\nPFK3L    EQU   *-PFK3\nPFK4     DC    X'00'\n         DC    AL1(PFK4L-3)\n         DC    C'D NET,PENDING'\nPFK4L    EQU   *-PFK4\nPFK5     DC    X'00'\n         DC    AL1(PFK5L-3)\n         DC    C'D NET,APPLS'\nPFK5L    EQU   *-PFK5\nPFK6     DC    X'00'\n         DC    AL1(PFK6L-3)\n         DC    C'D NET,MAJNODES'\nPFK6L    EQU   *-PFK6\nPFK7     DC    X'00'\n         DC    AL1(PFK7L-3)\n         DC    C'D NET,LINES,I'\nPFK7L    EQU   *-PFK7\nPFK8     DC    X'00'\n         DC    AL1(PFK8L-3)\n         DC    C'D NET,CLSTRS,I'\nPFK8L    EQU   *-PFK8\nPFK9     DC    X'00'\n         DC    AL1(PFK9L-3)\n         DC    C'D NET,TERMS,I'\nPFK9L    EQU   *-PFK9\nPFK10    DC    X'01'\n         DC    AL1(PFK10L-3)\n         DC    C'D NET,ID='\nPFK10L   EQU   *-PFK10\nPFK11    DC    X'01'\n         DC    AL1(PFK11L-3)\n         DC    C'V NET,ACT,ID='\nPFK11L   EQU   *-PFK11\nPFK12    DC    X'01'\n         DC    AL1(PFK12L-3)\n         DC    C'V NET,INACT,ID='\nPFK12L   EQU   *-PFK12\nPFK13    DC    X'00'\n         DC    AL1(PFK13L-3)\n         DC    C'HELP'\nPFK13L   EQU   *-PFK13\nPFK14    DC    X'00'\n         DC    AL1(PFK14L-3)\n         DC    C'D NET,BFRUSE'\nPFK14L   EQU   *-PFK14\nPFK15    DC    X'00'\n         DC    AL1(PFK15L-3)\n         DC    C'END'\nPFK15L   EQU   *-PFK15\nPFK16    DC    X'00'\n         DC    AL1(PFK16L-3)\n         DC    C'D NET,PENDING'\nPFK16L   EQU   *-PFK16\nPFK17    DC    X'00'\n         DC    AL1(PFK17L-3)\n         DC    C'D NET,APPLS'\nPFK17L   EQU   *-PFK17\nPFK18    DC    X'00'\n         DC    AL1(PFK18L-3)\n         DC    C'D NET,MAJNODES'\nPFK18L   EQU   *-PFK18\nPFK19    DC    X'00'\n         DC    AL1(PFK19L-3)\n         DC    C'D NET,LINES,I'\nPFK19L   EQU   *-PFK19\nPFK20    DC    X'00'\n         DC    AL1(PFK20L-3)\n         DC    C'D NET,CLSTRS,I'\nPFK20L   EQU   *-PFK20\nPFK21    DC    X'00'\n         DC    AL1(PFK21L-3)\n         DC    C'D NET,TERMS,I'\nPFK21L   EQU   *-PFK21\nPFK22    DC    X'01'\n         DC    AL1(PFK22L-3)\n         DC    C'D NET,ID='\nPFK22L   EQU   *-PFK22\nPFK23    DC    X'01'\n         DC    AL1(PFK23L-3)\n         DC    C'V NET,ACT,ID='\nPFK23L   EQU   *-PFK23\nPFK24    DC    X'01'\n         DC    AL1(PFK24L-3)\n         DC    C'V NET,INACT,ID='\nPFK24L   EQU   *-PFK24\nPA2      DC    X'00'\n         DC    AL1(PA2L-3)\n         DC    C'PA 2 KEY'\nPA2L     EQU   *-PA2\nPA3      DC    X'00'\n         DC    AL1(PA3L-3)\n         DC    C'PA 3 KEY'\nPA3L     EQU   *-PA3\nNOSUPT   DC    X'00'\n         DC    AL1(NOSUPTL-3)\n         DC    C'THIS AID NOT SUPPORTED.'\nNOSUPTL  EQU   *-NOSUPT\n         EJECT\nPOFACB   ACB   AM=VTAM,                                                *\n               APPLID=POFACBAI,                                        *\n               EXLST=POFACBEX,                                         *\n               MACRF=NLOGON\n         SPACE 2\nPOFACB#  DC    PL2'1'              ACB COUNTER FOR MULTIPLE POF'S\nPOFACBAI DC    X'08'\n         DC    CL8'POF001'         ACB NAME\nPOFACBPW DC    X'08'\n         DC    CL8'POFSPOPW'       ACB PASSWORD\n         EJECT\nPOFACBEX EXLST AM=VTAM,                                                *\n               LERAD=POFLERAD,                                         *\n               SYNAD=POFSYNAD\n         EJECT\nPOFRPLSC RPL   AM=VTAM,                                                *\n               ACB=POFACB,                                             *\n               AREA=POFCMDO,                                           *\n               RECLEN=POFCMDOL,                                        *\n               OPTCD=(SYN)\n         EJECT\nPOFRPLRC RPL   AM=VTAM,                                                *\n               ACB=POFACB,                                             *\n               AREA=POFCMDI,                                           *\n               AREALEN=POFCMDIL,                                       *\n               EXIT=POFRCVEX,                                          *\n               OPTCD=(ASY,Q,TRUNC)\n         EJECT\n         LTORG\n         EJECT\n         TITLE 'A P P L M O N - DSECTS'\nTCBUVTAM DSECT\n         TCBUVTAM PFX=TCBU\n         PRINT NOGEN\n         IKJTCB\n         IHAASCB\n         IHAPSA\n         ISTDPOHD\n         SPACE 5\n         PRINT NOGEN\n         SPACE 5\n         IFGACB AM=VTAM\n         SPACE 5\n         IFGRPL AM=VTAM\n         SPACE 5\n         END\n/*\n//LKED    EXEC PGM=HEWLF064,PARM=(XREF,LET,LIST,NCAL,TERM),\n//             COND=(4,LT,ASM),REGION=1024K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLIB   DD  DSN=SYS2.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DISP=SHR,\n//             DSN=TECH.SERV.LOAD\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20))\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n  SETCODE AC(1)\n     NAME APPLSPO(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "APPLXIT": {"ttr": 2563, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00s\\x00s\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 115, "newlines": 115, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCAPL  JOB (X0002,QCC,ASQCC),'X-BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=99\n//ASM     EXEC PGM=IEV90,REGION=1024K,\n//             PARM='XREF(SHORT),OBJECT,NODECK,TERM,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DISP=SHR,DSN=TECH.SERV.ASQCC   <== TCBUVTAM\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nAPPLXIT TITLE 'A P P L X I T - PASSWORD VERIFICATION'\n***********************************************************************\n*\n* CHANGE LOG:\n*\n***********************************************************************\n*                                                                     *\n*     MODULE NAME: APPLXIT                                            *\n*                                                                     *\n*     DESCRIPTIVE NAME: VTAM APPLICATION. THIS IS THE PASSWORD        *\n*                       VERIFICATION MODULE FOR APPLMON.              *\n*                                                                     *\n*     FUNCTION: 1. EXAMINES PASSWORD AND USERID IN TCBUSER AREA       *\n*               2. SETS RC=0 TO ALLOW LOGON, NON-ZERO TO DENY LOGON.  *\n*                                                                     *\n*     AUTHOR: BRIAN COOK, 9/14/84                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* INITIAL HOUSEKEEPING - ENTRY CODE FOR OS/VS.                        *\n* SAVE REGISTERS, ESTABLISH ADDRESSABILITY, SET UP SAVE AREA.         *\n*                                                                     *\n***********************************************************************\n*\nAPPLXIT CSECT\n         USING *,10\n         STM   14,12,12(13)                      SAVE REGISTERS\n         LR    R10,R15            LOAD EXIT BASE ADDRESS\n*\n         USING PSA,0\n         USING TCB,1\n*\n         LR    R2,R13         SAVE CALLER'S R13\n         L     R1,PSATOLD     PICK UP TCB ADDRESS\n         L     R13,TCBUSER    PICK UP TCBUSER ADDRESS\n         USING TCBUVTAM,13\n         LA    R13,TCBUSAV3   POINT TO MY SAVE AREA\n         DROP  13\n         USING TCBUSAV3,13\n*\n         ST    R13,8(,R2)        CHAIN FORWARD\n         ST    R2,4(,R13)         CHAIN BACK\n*\nCHECKOK  DS    0H\n*\n         SR    R15,R15\n*\nRETURN   DS    0H\n*\n         L     R13,4(,R13)        RELOAD CALLERS SA\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\n*\n         LTORG\n         TITLE 'A P P L M O N - DATA AREAS'\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\nTCBUVTAM DSECT PFX=TCBU\n         TCBUVTAM\n         PRINT NOGEN\n         IKJTCB\n         IHAPSA\n         END\n/*\n//LKED    EXEC PGM=HEWLF064,PARM=(XREF,LET,LIST,NCAL,TERM),\n//             COND=(4,LT,ASM),REGION=1024K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLIB   DD  DSN=SYS2.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DISP=SHR,\n//             DSN=TECH.SERV.LOAD\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20))\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n     SETCODE AC(1)\n     NAME APPLXIT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CDF": {"ttr": 2566, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x04R\\x04R\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 1106, "newlines": 1106, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCCDF  JOB (X0041,QCC,ASQCC),'X-BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=99,SYSAFF=MVSB\n//*\n//*   TECH.XA.SOURCE       (CDF2)\n//*\n//JOBLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR,\n//         UNIT=SYSDA,VOL=SER=MVSTGT\n//*\n//ASM1    EXEC PGM=IEV90,REGION=2048K,\n//        PARM='OBJECT,NODECK,TERM,XREF(SHORT)'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,\n//         UNIT=SYSDA,VOL=SER=MVSTGT\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR,\n//         UNIT=SYSDA,VOL=SER=MVSDLB\n//         DD  DSN=SYS2.MACLIB,DISP=SHR   <== JDFMACS, SPFMACS\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(5,5)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\n         PRINT OFF\n         COPY SPFMACS\n         PRINT ON\n         PRINT NOGEN\nCDF      TITLE 'CHANGE LOG'\n***********************************************************************\n*                                                                     *\n* CHANGE LOG:                                                         *\n*                                                                     *\n*  8/05/88  BRIAN COOK     REVISED SAVE/LAST COMMAND LOGIC SO IT WORKS*\n*                                                                     *\n*  8/05/88  BRIAN COOK     REVISED SCREEN DISPLAY LOGIC TO ALLOW FOR  *\n*                          LARGE-SCREEN CONSOLES AND SMALL-SCREEN     *\n*                          TSO TUBES. (FIND 'BIGCONS' FOR DETAILS)    *\n*                                                                     *\n*  5/04/88  BRIAN COOK     FIXED ABEND0C4, DUE TO IEECRDCM MOVED TO   *\n*                          CONSOLE PRIVATE AREA BY 2.2.0/DFP 2.3.0    *\n*                                                                     *\n*  4/27/88  BRIAN COOK     ALLOW SCROLL (FOR LARGE-SCREEN CONSOLES)   *\n*                          (NOT COMPLETED)                            *\n*                                                                     *\n*  1/21/87  BRIAN COOK     COPIED FROM CBT FILE 6, CHANGES:           *\n*                          1. ADDED SPFMACS                           *\n*                          2. USE DYNAMIC PANEL INSTEAD OF TABLE      *\n*                          3. REVISE AUTH CHECKING (F AUTH TO FIND)   *\n*                          4. ADDED COMMAND SAVE/RESTORE              *\n*                          5. ADDED BASE REGS FOR PGM AND DSECT       *\n*                                                                     *\n*                                                                     *\n*  4/11/86 DAVID W.MEYER                                           DWM*\n*    MADE PROGRAM REENTRANT                                        DWM*\n*    LOAD ISPLINK AT EXECUTION TIME TO GET MOST CURRENT VERSION    DWM*\n*    SEARCH FOR \"CONSOLE\" ASID AND DETERMINE ASID NUMBER           DWM*\n*      (USED BY CROSS MEMORY SERVICES)                             DWM*\n*    CODE SKIPPED LAST UCME - CORRECTED                            DWM*\n*    CHANGED MASTER CONSOLE SEARCH TO USE MORE DIRECT APPROACH     DWM*\n*    ADDED INACTIVE CONSOLE CHECK - IF SO, SKIP BUFFER MOVE AND    DWM*\n*      TABLE BUILD                                                 DWM*\n*    ADDED BUFFER LENGTH CHECK                                     DWM*\n*    USED CONTROL BLOCK FIELDS TO CALCULATE LINE OFFSETS AND       DWM*\n*      BUFFER LENGTH                                               DWM*\n*    ADDED \"CON\" COMMAND TO SELECT OTHER CONSOLES                  DWM*\n*                                                                     *\n***********************************************************************\n         EJECT\n*                                                                     *\n***********************************************************************\n         TITLE 'CONSOLE DISPLAY FACILITY (CDF)'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                 CONSOLE DISPLAY FACILITY (CDF)                      *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: DISPLAY MVS MASTER CONSOLE ACTIVITY AND PROCESS MVS       *\n*           AND JES COMMANDS.                                         *\n*                                                                     *\n*                                                                     *\n* FUNCTION: CDF IS DESIGNED TO OPERATE UNDER ISPF USING DISPLAY       *\n*           MANAGEMENT SERVICES. IT PROVIDES A CONSOLE DISPLAY        *\n*           SIMILAR TO JESOPER, DIDOCS,ETC.,        BUT SINCE IT      *\n*           RUNS UNDER ISPF, IT CAN BE INVOKED WITH SPLIT-SCREEN.     *\n*                                                                     *\n*           CDF LOOKS AT VARIOUS MVS XA 2.1.3 CONTROL BLOCKS.      DWM*\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCE: ISPLINK                                         *\n*                                                                     *\n*                                                                     *\n* MACROS USED:                                                     DWM*\n*              ABEND                                               DWM*\n*              FREEMAIN                                            DWM*\n*              GETMAIN                                             DWM*\n*              LOAD                                                DWM*\n*              DELETE                                              DWM*\n*              SAVE                                                DWM*\n*              RETURN                                              DWM*\n*                                                                  DWM*\n* DATA AREA                                                        DWM*\n* MACROS USED:                                                     DWM*\n*              CVT                                                 DWM*\n*              IEECDCM                                             DWM*\n*              IEECUCM                                             DWM*\n*              IEFUCBOB                                            DWM*\n*              IHAASVT                                             DWM*\n*              IHAASCB                                             DWM*\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*              RENT,REUS                                           DWM*\n*                                                                     *\n***********************************************************************\n         EJECT\nCDF      CSECT\n         SAVE  (14,12),,CDF_&SYSDATE                               DWM\n         LR    R12,R15        SET UP BASE REGISTER 1               BC\n         LA    R10,2048                   REGISTER 2               BC\n         LA    R10,2048(R10,R12)          REGISTER 2               BC\n         LR    R8,R13         SAVE HIGHER SAVE AREA ADDRESS        BC\n         USING CDF,R12,R10                                         BC\n         L     R0,GETMAINA    GET STORAGE LENGTH                   BC\n         GETMAIN R,LV=(0)     GET STORAGE FOR CDFWORK              BC\n         LR    R13,R1         SETUP CDFWORK REGISTER 1             BC\n         LA    R11,2048                     REGISTER 2             BC\n         LA    R11,2048(R11,R13)            REGISTER 2             BC\n         USING CDFWORK,13,11                                       BC\n         LR    R0,R1          AREA TO BE CLEARED                   DWM\n         L     R1,GETMAINA    GET LENGTH TO BE CLEARED             BC\n         XR    R15,R15        ZERO PAD AND FROM LENGTH             DWM\n         MVCL  R0,R14         ZERO CDFWORK                         DWM\n         MVC   CDFWT,CDFWORKT MOVE IN CDFWORK EYECATCHER           DWM\n         MVC   BUFS,BUFST     MOVE IN BUFFER START EYECATCHER      DWM\n         MVC   BUFE,BUFET     MOVE IN BUFFER END EYECATCHER        DWM\n         ST    R8,4(,R13)     SAVE PREVIOUS SAVEAREA @             DWM\n         ST    R13,8(,R8)     LINK SAVE AREAS                      BC\n*                                                                  BC\n         B     SHOWINIT                                            BC\n*                                                                  BC\nGETMAINA DC    A(WORKLEN)                                          BC\n*                                                                  BC\n*\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n*                       PROGRAM INITIALIZATION                        *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\nSHOWINIT DS    0H\n*\n         MVC   CMDLINE,BLANKS   CLEAR CMDLINES                     DWM\n         LOAD  EP=ISPLINK       LOAD CURRENT ISPLINK MODULE        DWM\n         ST    R0,ISPLINKA      SAVE ISPLINK ADDRESS               DWM\n*\n         MVC   F8(4),=F'8'\n         L     R15,ISPLINKA\n         CALL  (15),                                                   X\n               (VCOPY,ZUSER,F8,USERID,SPFMOVE),                    DWM X\n               VL,MF=(E,ISPARMS)\n*                                                                  BC\n*\n         VDEFINE CDFDATA,3280\n         XC    CDF#COFF(4),CDF#COFF\n         VDEFINE CDF#COFF,4,FMT=FIXED\n         MVC   CDF#CSRN(8),ZEROS\n         VDEFINE CDF#CSRN,8\n*        XC    CDF#CSRN(4),CDF#CSRN\n*        VDEFINE CDF#CSRN,4,FMT=FIXED\n         XC    CDF#DDEP(4),CDF#DDEP\n         VDEFINE CDF#DDEP,4,FMT=FIXED\n*\n         VDEFINE CMDLINE,51\n         VDEFINE LASTCMD1,51,OPT=COPY\n         VDEFINE LASTCMD2,51,OPT=COPY\n         VDEFINE LASTCMD3,51,OPT=COPY\n         VDEFINE LASTCMD4,51,OPT=COPY\n         VDEFINE LASTCMD5,51,OPT=COPY\n         VDEFINE LASTCMD6,51,OPT=COPY\n         VDEFINE LASTCMD7,51,OPT=COPY\n         VDEFINE LASTCMD8,51,OPT=COPY\n         VDEFINE LASTCMD9,51,OPT=COPY\n*\n*\n*\n* THESE FIELDS DEFINED BY ISPF FOR DYNAMIC SCREEN AREAS\n*\n*\n         VDEFINE AREATYP,8\n         VDEFINE COLS,4,FMT=FIXED\n         VDEFINE ROWS,4,FMT=FIXED\n         VDEFINE TLROW,4,FMT=FIXED\n         VDEFINE TLCOL,4,FMT=FIXED\n         VDEFINE ZVERB,8\n         VDEFINE ZSCROLLA,4\n         XC    ZSCROLLN(4),ZSCROLLN\n         VDEFINE ZSCROLLN,4,FMT=FIXED,OPT=COPY\n*\n**  TITLE LINE VARIABLES\n*\n         VDEFINE CDFMST,6\n         VDEFINE CDFS,3\n         VDEFINE CDFI,3\n         VDEFINE CDFC,4\n         VDEFINE CDFN,2\n         VDEFINE CDFU,3\n*\n** AUTH CHECKING DONE HERE                                         BC\n*                                                                  BC\n*                                                                  BC\n** REMOVE THE ASTERISK FROM THE AUTH CHECK DESIRED                 BC\n*                                                                  BC\n*        B     ADOIT            SKIP SECURITY                      BC\n*                                                                  BC\n*        B     SPSAUTH          SOUTHWESTERN PUBLIC SERVICE CO     BC\n*                                                                  BC\n         B     MNPAUTH          MORTON                             BC\n*                                                                  BC\nSPSAUTH  DS    0H                                                  BC\n         LA    R2,ATABNUM                                          DWM\n         LA    R3,ATABLE                                           DWM\nALOOP    DS    0H                         QUICK                    DWM\n         MVC   AWORK,0(R3)                AND                      DWM\n         XC    AWORK,AKEY                 DIRTY                    DWM\n         CLC   USERID,AWORK               SECURITY                 DWM\n         BE    ADOIT                                               DWM\n         LA    R3,8(0,R3)                                          DWM\n         BCT   R2,ALOOP                                            DWM\n         L     R15,ISPLINKA                                        DWM\n         CALL  (15),                                               DWM X\n               (SETMSG,                                            DWM X\n               CDF001),                                            DWM X\n               VL,MF=(E,ISPARMS)                                   DWM\n         B     SHOWRTRN                                            DWM\n*                                                                  BC\nMNPAUTH  DS    0H                                                  BC\n*                                                                  BC\n         MVI   MNPFLAG,C'D'        ALLOW ONLY DISPLAY COMMANDS     BC\n*                                                                  BC\n         CLC   USERID(2),=C'AS'    SYSTEMS PROGRAMMERS             BC\n         BE    MNPALL                                              BC\n         CLC   USERID(2),=C'AP'    PRODUCTION SERVICES DEPT        BC\n         BE    MNPALL                                              BC\n         CLC   USERID(2),=C'AO'    OPERATORS                       BC\n         BE    MNPALL                                              BC\n         CLC   USERID(2),=C'BP'    BPSCAN                          BC\n         BE    MNPALL                                              BC\n         CLC   USERID(2),=C'MV'    MVSOPER                         BC\n         BE    MNPALL                                              BC\n         CLC   USERID(2),=C'AA'    DATA CENTER MANAGEMENT          BC\n         BE    MNPALL                                              BC\n*                                                                  BC\n         B     ADOIT                                               BC\n*                                                                  BC\nMNPALL   DS    0H                                                  BC\n*                                                                  BC\n         MVI   MNPFLAG,C'A'        ALLOW ANY/ALL COMMANDS          BC\n*                                                                  BC\n         B     ADOIT                                               BC\n*                                                                  BC\n*                                                                  DWM\n*  LOCATE ASID NUMBER FOR 'CONSOLE' ADDRESS SPACE                  DWM\n*                                                                  DWM\nADOIT    DS    0H                                                  DWM\n         L     R3,CVTPTR        GET CVT ADDRESS                    DWM\n         USING CVTMAP,R3                                           DWM\n         L     R3,CVTASVT       GET ASVT ADDRESS                   DWM\n         DROP  R3                                                  DWM\n         USING ASVT,R3                                             DWM\n         L     R9,ASVTMAXU      GET MAX NUMBER OF ADDRESS SPACES   DWM\n         LA    R6,4             START INDEX                        DWM\nASCBLP   DS    0H                                                  DWM\n         LA    R7,ASVTFRST(R6)  GET ASCB POINTER                   DWM\n         TM    0(R7),ASVTAVAL   IS ASCB AVAILABLE?                 DWM\n         BO    ASCBNXT          YES..DO NEXT ASCB                  DWM\n         L     R4,0(R7)         GET ASCB ADDRESS                   DWM\n         USING ASCB,R4                                             DWM\n         L     R5,ASCBJBNS      GET JOBNAME POINTER                DWM\n         LTR   R5,R5            IS THE POINTER ZERO?               DWM\n         BZ    ASCBNXT          YES..DO NEXT ASCB                  DWM\n         CLC   CONSNAME,0(R5)   IS IT 'CONSOLE' ?                  DWM\n         BE    CONSFND          FINALLY FOUND IT                   DWM\n         DROP  R4                                                  DWM\nASCBNXT  DS    0H                                                  DWM\n         LA    R6,4(,R6)        BUMP TO NEXT ASVT ENTRY            BC\n         BCT   R9,ASCBLP        KEEP SEARCHING                     BC\n         DROP  R3                                                  DWM\n         L     R15,ISPLINKA                                        DWM\n         CALL  (15),                                               DWM X\n               (SETMSG,                                            DWM X\n               CDF002),                                            DWM X\n               VL,MF=(E,ISPARMS)                                   DWM\n         B     SHOWRTRN         NEVER FOUND 'CONSOLE'.. QUIT NOW   DWM\nCONSFND  DS    0H                                                  DWM\n         SRL   R6,2             DIVIDE INDEX BY 4 TO GET ASID NUMBERWM\n         ST    R6,CONSASID      SAVE 'CONSOLE' ASID NUMBER         DWM\n*\n*  NOW THAT WE HAVE FOUND 'CONSOLE', WE MAY BEGIN\n*\n         B     SHOWCONS       DISPLAY THE MASTER CONSOLE\n*\nSHOWDONE DS    0H\n*\n         VDELETE CDFDATA\n         VDELETE CDF#COFF\n         VDELETE CDF#CSRN\n         VDELETE CDF#DDEP\n*\n         VDELETE CMDLINE\n         VDELETE LASTCMD1\n         VDELETE LASTCMD2\n         VDELETE LASTCMD3\n         VDELETE LASTCMD4\n         VDELETE LASTCMD5\n         VDELETE LASTCMD6\n         VDELETE LASTCMD7\n         VDELETE LASTCMD8\n         VDELETE LASTCMD9\n*\n*\n*\n* THESE FIELDS DEFINED BY ISPF FOR DYNAMIC SCREEN AREAS\n*\n*\n         VDELETE AREATYP\n         VDELETE COLS\n         VDELETE ROWS\n         VDELETE TLROW\n         VDELETE TLCOL\n         VDELETE ZVERB\n         VDELETE ZSCROLLA\n         VDELETE ZSCROLLN\n*\n*\n**  TITLE LINE VARIABLES\n*\n         VDELETE CDFMST\n         VDELETE CDFS\n         VDELETE CDFN\n         VDELETE CDFI\n         VDELETE CDFC\n         VDELETE CDFU\n*\nSHOWRTRN DS    0H\n         DELETE EP=ISPLINK    DELETE ISPLINK MODULE                DWM\n         LR    R1,R13         SETUP FOR FREEMAIN                   BC\n         L     R0,GETMAINA    SETUP FOR FREEMAIN                   BC\n         L     R13,4(R13)     RESTORE THE CALLER'S R13             DWM\n         FREEMAIN R,A=(1),LV=(0)       FREE CDFWORK STORAGE        BC\n         RETURN (14,12),RC=0  RETURN TO OUR CALLER                 DWM\n*\n*\n         TITLE 'CDF   START OF SHOW CONSOLE LOOP'\nSHOWCONS DS    0H\n*\n*        ST    R7,CDF7HOLD SAVE THE RETURN ADDRESS                 DWM\n*\n         TITLE 'CDF   BUILD UCM TABLE           '\nTAB1LOOP DS    0H\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n*          BUILD A TABLE OF UCM ADDRESSES (ONE PER CONSOLE)           *\n*                                                                     *\n*---------------------------------------------------------------------*\nBLDUCMS  L     R4,16              R4 = ADDR OF CVT\n         USING CVT,R4\n         L     R4,CVTCUCB         R4 = ADDR OF 'CUCB' (UCM BASE)\n         DROP  R4\n         USING UCM,R4\n         L     R5,UCMVEA          R5 = ADDR OF FIRST UCM ENTRY\n         L     R6,UCMVEZ          R6 = LENGTH OF EACH UCM ENTRY\n         L     R7,UCMVEL          R7 = ADDR OF LAST UCM ENTRY\n         LA    R1,UCMTAB+4        R1 = ADDR OF UCMTAB\n         LA    R9,UCMTABE         R9 = ADDR OF END OF UCMTAB\n         XR    R2,R2              R2  = 0 (NUMBER OF VALID UCMS)\nUCMLOOP  ST    R5,0(0,R1)         SAVE UCM ADDRESS IN UCMTAB\n         LA    R2,1(0,R2)         R2  = R2  + 1  (ONE MORE UCM)\n         LA    R1,4(0,R1)         R1 = ADDR OF NEXT UCMTAB ENTRY\n         CR    R1,R9              DOES R1 POINT PAST END OF UCMTAB?\n         BNL   UCMDONE            YES; LEAVE LOOP\n         AR    R5,R6              R5 = ADDR OF NEXT UCM ENTRY\n         CR    R5,R7              DOES R5 POINT PAST UCM ENTRIES?\n         BNH   UCMLOOP            NOPE; KEEP GOING                 DWM\nUCMDONE  STH   R2,NUMUCMS         SAVE NUMBER OF UCMS FOUND\n*---------------------------------------------------------------------*\n*        SCAN THE UCM FOR THE MASTER CONSOLE AS THE DEFAULT        GMM*\n*        CONSOLE WHEN ENTERING THE CONSOLE DISPLAY FACILITY        DWM*\n*---------------------------------------------------------------------*\n         L     R8,CONSOLE         GET CURRENT CONSOLE              DWM\n         LTR   R8,R8              IS IT ZERO (FIRST TIME THROUGH) ?DWM\n         BNZ   NEXTPAGE           NO...DONT NEED THIS              DWM\n         LR    R8,R4              SETUP UCM POINTER                DWM\n         S     R8,=F'4'           BACKUP POINTER TO MCS PREFIX POINTER\n         L     R8,0(R8)           GET MCS PREFIX ADDRESS           DWM\n         USING UCMPRFX,R8                                          DWM\n         L     R1,UCMMCENT        GET ADDRESS OF MASTER CONSOLE UCMDWM\n         S     R1,UCMVEA          FIND OFFSET FROM BEGINNING       DWM\n         DROP  R4,R8              DONT NEED UCM ADDRESSABILITY NOW DWM\n         SR    R0,R0                                               BC\n         M     R0,=F'1'           SETUP SIGN FOR DIVIDE            DWM\n         DR    R0,R6              DIVIDE BY UCM ENTRY LENGTH       DWM\n         LA    R1,1(0,R1)         POSITIVE INTEGERS ONLY           DWM\n         ST    R1,CONSOLE         SET VALID CONSOLE NUMBER (MASTER)DWM\n         TITLE 'CDF   PICK A CONSOLE            '\n*---------------------------------------------------------------------*\n*                                                                     *\n*                            TOP OF LOOP                              *\n*                                                                     *\n*---------------------------------------------------------------------*\nNEXTPAGE DS    0H\n         LA    R5,UCMTAB          R5 = ADDR OF UCMTAB\n         L     R4,CONSOLE         R4 = CONSOLE TO BE DISPLAYED     DWM\n         ST    R4,OLDCONS         R4 = LAST CONSOLE DISPLAYED      DWM\n         BZ    WRTERR4            WE HAVE NO CONSOLE ZERO (MASTER) GMM\n         CH    R4,NUMUCMS         IS NUMBER TOO HIGH?\n         BNH   GETUCM             NO, CONTINUE\n*        MVI   CLEAR,X'C5'        TURN ON BELL BIT IN WCC          DWM\nRESETCN  L     R4,OLDCONS         RESET TO OLD CONSOLE\n         ST    R4,CONSOLE         AND SAVE IT\nGETUCM   SLL   R4,2               MULTIPLY BY 4\n         LA    R5,0(R5,R4)        R5 = ADDR OF ADDR OF UCM\n         L     R5,0(0,R5)         R5 = ADDR OF UCM\n         USING UCMLIST,R5\n         L     R6,UCMXB           R6 = ADDR OF RDCM\n*        USING IEERDCM,R6                                          GMM\n         LTR   R6,R6              IS THIS A GRAPHICS CONSOLE?\n         BP    GRAPHICS           YES\n         LA    R5,UCMTAB          R5 = ADDR OF UCMTAB\nWRTERR4  DS    0H\n*        MVI   CLEAR,X'C5'        TURN ON BELL BIT IN WCC          DWM\n         B     RESETCN            RESET THE CONSOLE NUMBER\n         SPACE\nGRAPHICS EQU   *\n         MVC   TITLE(TITLEL),BLANKS BLANK OUT CONSOLE TITLE        DWM\n         MVC   TITLEC1,=C' CONSOLE='                               DWM\n         MVC   TITLEC2,=C' AUTH='                                  DWM\n         MVC   TITLEC3,=C' ADDR='                                  DWM\n         TM    UCMDISP1,UCMDISPA  IS THIS A MASTER CONSOLE?\n         BNO   AUTH0              NO\n         MVC   CDFMST,=CL6'MASTER' YES                             DWM\nAUTH0    TM    UCMAUTHA,UCMAUTH1  IS THIS CONSOLE SYSTEM AUTHORIZED?\n         BNO   AUTH1              NO\n         MVC   CDFS,=CL3'SYS'     YES                              DWM\nAUTH1    TM    UCMAUTHA,UCMAUTH2  IS IT I/O AUTHOZRIZED?\n         BNO   AUTH2              NO\n         MVC   CDFI,=CL3'I/O' YES                                  DWM\nAUTH2    TM    UCMAUTHA,UCMAUTH3  IS IT CONS AUTHORIZED?\n         BNO   AUTHDONE           NO\n         MVC   CDFC,=CL4'CONS' YES                                 DWM\nAUTHDONE EQU   *\n         L     R7,UCMUCB          R7 = ADDR OF UCB\n         USING UCBCMSEG,R7                                         DWM\n         MVC   CDFU(3),UCBNAME MOVE UNIT ADDR INTO LINE            DWM\n         DROP  R7                                                  DWM\n         L     R3,CONSOLE         LOAD THE CONSOLE NUMBER\n         CVD   R3,WORK            CONVERT TO DECIMAL IN WORK\n         MVC   SCRATCH(4),PATTERN MOVE IN EDIT PATTERN\n         ED    SCRATCH(4),WORK+6  EDIT IN CONSOLE NUMBER\n         MVC   CDFN(2),SCRATCH+2 MOVE CONSOLE NUMBER INTO PLACE\n         NI    FLAG1,255-CONOTACT TURN OFF NOT ACTIVE FLAG         DWM\n         TM    UCMATR,UCMUF       IS CONSOLE ACTIVE?               DWM\n         BO    ACTIVE1            YES..IS ACTIVE                   DWM\n         OI    FLAG1,CONOTACT     INDICATE CONSOLE NOT ACTIVE      DWM\n         B     BUILD1             SKIP BUFFER MOVE                 BC\nACTIVE1  DS    0H                                                  DWM\n         NI    FLAG1,255-BUFSHORT TURN OFF BUFFER TOO SHORT FLAG   DWM\n         LA    R8,BUFLEN          LOAD BUFFER LENGTH FOR COMPARE   DWM\n         SPACE 2\n         TITLE 'CDF   CROSS MEMORY SERVICES     '\n*---------------------------------------------------------------------*\n*                                                                     *\n*                 FILLIN TRAILER AT BOTTOM OF SCREEN                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         LA    R0,1                    REQUEST AUTHORIZATION ON    JL1\n         SVC   235                     SET AUTHORIZATION ON        JL1\n         MODESET MF=(E,SUPRMOD)   GET INTO SUPV STATE AND KEY ZERO JPB\n*\n*                                      SET UP FOR CROSS MEMORY MOVE\n*\n         AXRES AXLIST=AXLIST           RESERVE AN AX               JPB\n         SPACE 2\n         L     R1,CONSASID             'CONSOLE' ASID              DWM\n         AXEXT ASID=(1)                EXTRACT AX OF 'CONSOLE'IN R0JPB\n         SPACE 2\n         AXSET AX=(0)                  SET OUT AX TO THAT OF CONSOLEPB\n         SPACE 2\n         L     R1,CONSASID             'CONSOLE' ASID              DWM\n         SSAR  R1                      SET 'CONSOLE' AS SECONDARY  JPB\n         SPACE 2\n         PRINT ON,GEN\n*\n*                                      PICK UP START ADDRESSES\n*  IEECRDCM MOVED TO CONSOLE PRIVATE AREA BY 2.2.0/DFP 2.3.0\n         LA    R1,4               SET TRUE LENGTH                  JPB\n         SLR   R0,R0              SET STORAGE KEY                  JPB\n         MVCP  TDCMADDR(R1),0(R6),R0                PT TO TDCM     BC\n         L     R7,TDCMADDR        GET ADDRESS OF TDCM              BC\n         USING STRTDCM,7\n*\n         LA    R1,4               SET TRUE LENGTH                  JPB\n         SLR   R0,R0              SET STORAGE KEY                  JPB\n         MVCP  SIBPTR(R1),DCMASCRN-STRTDCM(R7),R0 PT TO SCRN ADRJPB\n         LA    R1,2               SET UP FOR HALF WORD MOVES       DWM\n         MVCP  OUTLEN(R1),DCMLGNTH-STRTDCM(R7),R0                  DWM\n         MVCP  OUTCLEN(R1),DCMCORLN-STRTDCM(R7),R0                 DWM\n         MVCP  OUTNUM(R1),DCMMSGAL-STRTDCM(R7),R0                  DWM\n*\n*                                      SET UP FOR XMEM MOVE LOOP\n*\n         L     R1,SIBPTR          R1 = ADDR OF SCREEN IMAGE\n         LA    R4,BUF             R4 = ADDR OF OUTPUT BUFFER\n         LH    R5,OUTCLEN         GET INCORE LINE LENGTH           DWM\n         MH    R5,OUTNUM          * NUMBER OF LINES = BUFFER LENGTHDWM\n         AH    R5,OUTCLEN         ADD 1 FOR LUCK                   BC\n         CR    R5,R8              IS OUR BUFFER LONG ENOUGH        DWM\n         BNH   MOVEBUFF           YES..GO DO IT                    DWM\n         OI    FLAG1,BUFSHORT     INDICATE BUFFER TOO SHORT        DWM\n         B     RESETSAR           DONT MOVE BUFFER                 DWM\nMOVEBUFF DS    0H\n         LH    R2,OUTCLEN         R2 = INCORE LINE LENGTH          DWM\n         SH    R2,OUTLEN        - DATA LENGTH = # OF CONTROL CHARS DWM\n         SR    R1,R2           BACKUP POINTER TO BEGINNING OF DATA DWM\n         SLR   R0,R0              RESET THE KEY\n*\n         $AMODE 31,R=R15,PUSHR=R14\n         ST    R14,CDFAMODE\n*\nMVCPLOOP DS    0H\n         MVCP  0(R5,R4),0(R1),R0  LOOP THRU THE CONSOLE BUFFER\n*\n         BZ    RESETSAR\n         AL    R1,=F'256'         MAX LEN ALLOWED\n         AL    R4,=F'256'         MAX LEN ALLOWED\n         SL    R5,=F'256'         MAX LEN ALLOWED\n         B     MVCPLOOP\n*\nRESETSAR DS    0H\n*\n         L     R14,CDFAMODE\n         $AMODE R=R15,POPR=R14\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n*        IN ORDER TO ISSUE SVCS THE PRIMARY AND                       *\n*        SECONDARY ADDRSPC MUST BE THE SAME                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         EPAR  R1                 EXTRACT PRIMARY ASN\n         SSAR  R1\n         MODESET MF=(E,PROBMOD)   RETURN TO PROBLEM STATE          DWM\n         SR    R0,R0                   REQUEST AUTHORIZATION OFF   JL1\n         SVC   235                     SET AUTHORIZATION OFF       JL1\n*\n         DROP  R5,R7                                               GMM\n*\n         TITLE 'CDF   BUILD ISPF TABLE'                            DWM\n*                                                                  DWM\n*  CHECK FOR ERROR CONDITIONS AND ISSUE MESSAGES IF APPROPRIATE    DWM\n*                                                                  DWM\n         TM    FLAG1,CONOTACT     IS CONSOLE NOT ACTIVE?           DWM\n         BZ    CHKSHORT         NO...BUILD LINES FOR ACTIVE CONSOLEDWM\n         L     R15,ISPLINKA       YES..GIVE THEM THE BAD NEWS      DWM\n         CALL  (15),                                               DWM X\n               (SETMSG,                                            DWM X\n               CDF003),                                            DWM X\n               VL,MF=(E,ISPARMS)                                   DWM\n         B     SHOWSCRN                                            DWM\nCHKSHORT DS    0H                                                  DWM\n         TM    FLAG1,BUFSHORT     WAS THE BUFFER TOO SHORT         DWM\n         BZ    BUILD1             NO...BUILD LINES FOR CONSOLE     DWM\n         L     R15,ISPLINKA       YES..GIVE THEM THE BAD NEWS      DWM\n         CALL  (15),                                               DWM X\n               (SETMSG,                                            DWM X\n               CDF004),                                            DWM X\n               VL,MF=(E,ISPARMS)                                   DWM\n         B     SHOWSCRN                                            DWM\n*                                                                  DWM\n*  BUILD CONSOLE LINES                                             DWM\n*                                                                  DWM\nBUILD1   DS    0H                                                  DWM\n*                                                                  BC\n         PQUERY CDF3P1,CDFDATA                                     BC\n         LA    R1,CDFDATA         FIRST LINE LOCATION              BC\n*                                                                  BC\n         LH    R15,OUTNUM         GET NUMBER OF LINES              DWM\n*        LA    R15,1(,R15)        ADD 1 FOR LUCK                   BC\n         LA    R3,BUF             SET POINTER TO FIRST LINE        DWM\n*                                                                  BC\n         LH    R5,OUTCLEN         GET INCORE LINE LENGTH           DWM\n         LH    R6,OUTLEN          GET DATA LINE LENGTH             DWM\n         LR    R7,R5              SET UP FOR OFFSET CALCULATION    DWM\n         SR    R7,R6              CALCULATE OFFSET TO DATA         DWM\n         LA    R9,80              GET LINE LENGTH                  BC\n         CR    R6,R9              DATA LENGTH > SCREEN  LENGTH ?   BC\n         BNH   DOLINE             NO...USE DATA LENGTH             DWM\n         LR    R6,R9              YES..USE SCREEN  LENGTH          BC\nDOLINE   DS    0H                                                  DWM\n         BCTR  R6,0               LENGTH - 1 FOR EXECUTE           DWM\n*                                                                  DWM\n         C     R15,ROWS           CONSOLE LINES VS ISPF SCREEN SZ  BC\n         BNH   NEXTL              ALL THE LINES WILL FIT           BC\n*                                                                  BC\nBIGCONS  DS    0H                                                  DWM\n*                                                                  BC\n         LR    R14,R15            GET THE NUMBER OF EXCESS         BC\n         L     R15,ROWS                                            BC\n         SR    R14,R15            ROWS INTO R14                    BC\n*                                                                  BC\nDROPROWS DS    0H                                                  BC\n         LA    R4,0(R7,R3)        SET UP POINTER TO DATA           BC\n         CLI   3(R4),C'*'         HIGHLIGHT?                       BC\n         BE    HILITE1            YES                              BC\n         CLI   3(R4),C'@'         HIGHLIGHT?                       BC\n         BNE   NEXTROWS           NO                               BC\nHILITE1  DS    0H\n         MVI   0(R1),C' '         INITIALIZE DYNAMIC AREA          BC\n         MVC   1(79,R1),0(R1)     INITIALIZE DYNAMIC AREA          BC\n         MVC   0(1,R1),0(R4)      MOVE IT TO DYNAMIC AREA          BC\n         EX    R6,*-6             MOVE IT TO SPF AREA              BC\n         MVI   0(R1),3            HIGH-LIGHT                       BC\n         LA    R1,80(,R1)         POINT TO NEXT LINE               BC\n         LA    R14,1(,R14)        INCREMENT                        BC\n         BCTR  R15,0                                               BC\n*                                                                  BC\nNEXTROWS DS    0H                                                  BC\n         LA    R3,0(R5,R3)        BUMP DOWN IN CONSOLE BUFFER      BC\n         BCT   R14,DROPROWS       DROPPING THE FIRST \"N\" LINES     BC\n*                                                                  BC\nSIZEOK   DS    0H                                                  BC\n*                                                                  BC\nNEXTL    DS    0H                                                  DWM\n         LA    R4,0(R7,R3)        SET UP POINTER TO DATA           DWM\n         MVI   0(R1),C' '         INITIALIZE DYNAMIC AREA          BC\n         MVC   1(79,R1),0(R1)     INITIALIZE DYNAMIC AREA          BC\n         MVC   0(1,R1),0(R4)      MOVE IT TO DYNAMIC AREA          BC\n         EX    R6,*-6             MOVE IT TO SPF AREA              BC\n*                                                                  BC\n** CHECK FOR HIGH-LIGHTING                                         BC\n*                                                                  BC\n         MVI   0(R1),1            LOW INTENS IS DEFAULT            BC\n         CLI   3(R1),C'*'         HIGHLIGHT?                       BC\n         BE    HIGHLITE           YES                              BC\n         CLI   3(R1),C'@'         HIGHLIGHT?                       BC\n         BE    HIGHLITE           YES                              BC\n*                                                                  BC\n         B     BUFFBUMP           LEAVE IT LOW INTENS              BC\n*                                                                  BC\nHIGHLITE DS    0H                                                  BC\n*                                                                  BC\n         MVI   0(R1),3            HIGH-LIGHT                       BC\n*                                                                  BC\nBUFFBUMP DS    0H                                                  BC\n*                                                                  BC\n         LA    R3,0(R5,R3)        POINT TO NEXT LINE               DWM\n         LA    R1,80(,R1)         POINT TO NEXT LINE               BC\n*                                                                  DWM\n         BCT   R15,NEXTL          PRINT NEXT LINE                  DWM\n*                                                                  DWM\n         TITLE 'CDF  DISPLAY SPF TABLE          '\n*\n***********************************************************************\n*\n*   NOW SHOW THE ISPPLIB FORMAT AND THE TABLE ON THE SCREEN\n*\n***********************************************************************\n*\nSHOWSCRN DS    0H\n         DISPLAY CDF3P1,ENDKEY=SHOWDONE\n*\n***********************************************************************\n*\n*   DETERMINE WHETHER ANYTHING WAS ENTERED ON THE SCREEN\n*\n***********************************************************************\n*\nGOTSTUFF DS    0H\n         TR    CMDLINE,CAPSONLY  UPPER-CASE ALL INPUT\n*\n*  NOTE THE TR TABLE IS SET UP TO DELETE SEMI-COLONS, IN ORDER TO\n*       PREVENT COMMAND CONCATENATION.\n*\n         CLI   CMDLINE,C' '   IF COMMAND AREA IS SPACES\n         BE    SHOWCONS       THEN A COMMAND WAS NOT ENTERED       DWM\n*                                                                  DWM\n         CLC   CMDLINE(L'CONCMD),CONCMD    NEW CONSOLE REQUEST ?   DWM\n         BE    CONCMDX                     YES, PROCESS            BC\n*                                                                  BC\n** CHECK FOR COMMAND STACK COMMANDS                                BC\n*                                                                  BC\n*\n         CLC   CMDLINE(4),=C'LAST'     IS IT RESHOW LAST PREVIOUS CMD\n         BE    RPTLAST                   THEN GO REPEAT IT\n*\n         CLC   CMDLINE(4),=C'SAVE'     IS IT SAVE LAST PREVIOUS CMD\n         BE    RPTSAVE                   THEN GO DO IT\n*\n         MVC   LASTCMD(51),CMDLINE\n         MVC   CMDLINE(51),BLANKS\n*                                                                  BC\n*        B     GOTCMD                      BYPASS MNP AUTH CHECK   BC\n*                                                                  BC\n         CLI   MNPFLAG,C'A'            ALL COMMANDS ALLOWED?\n         BE    GOTCMD                    THEN GO DO IT\n*\n         CLC   LASTCMD(2),=C'D '       IS IT A DISPLAY COMMAND\n         BE    GOTCMD                    THEN GO DO IT\n*\n         CLC   LASTCMD(2),=C'$D'       IS IT A DISPLAY COMMAND\n         BE    GOTCMD                    THEN GO DO IT\n*\n         CLC   LASTCMD(2),=C'$L'       IS IT A DISPLAY COMMAND\n         BE    GOTCMD                    THEN GO DO IT\n*\n         SETMSG CDF001                                             BC\n         B     SHOWRTRN                                            BC\n*                                                                  BC\nCONCMDX  DS    0H                                                  BC\n*                                                                  BC\n         XC    WORK,WORK         CLEAR DOUBLEWORD                  DWM\n         PACK  WORK+7(1),LASTCMD+L'CONCMD(1) PACK NEW CONSOLE NUMBERWM\n         CVB   R1,WORK           CONVERT TO BINARY                 DWM\n         ST    R1,CONSOLE        STORE NEW CONSOLE NUMBER          DWM\n*                                                                  DWM\n         B     NEXTPAGE                                            BC\n*                                                                  DWM\n*                                                                  DWM\nGOTCMD   DS    0H                                                  DWM\n*                                                                  DWM\n         LA    R1,CMDLEN        LENGTH OF REPLY COMMAND            DWM\n         STH   R1,CMDPARM       STICK IT IN THERE                  DWM\n         SR    R0,R0            CLEAR REGISTER                     DWM\n         STH   R0,CMDRESV       CLEAR RESERVED HALFWORD            DWM\n*                                                                  DWM\n         LA    R0,1                    REQUEST AUTHORIZATION ON    DWM\n         SVC   235                     SET AUTHORIZATION ON        DWM\n         MODESET MF=(E,SUPRMOD)   GET INTO SUPV STATE AND KEY ZERO DWM\n*                                                                  DWM\n         L     R0,CONSOLE              INSERT CONSOLE NUMBER       DWM\n         MGCR  CMDPARM                 ISSUE COMMAND VIA SVC 34    DWM\n*                                                                  DWM\n         MODESET MF=(E,PROBMOD)        RETURN TO PROBLEM STATE     DWM\n         SR    R0,R0                   REQUEST AUTHORIZATION OFF   DWM\n         SVC   235                     SET AUTHORIZATION OFF       DWM\n*                                                                  DWM\nCMDFINSH DS    0H                                                  DWM\n         B     SHOWCONS                                            DWM\n*                                                                  DWM\n         EJECT\n*\nRPTLAST  DS    0H\n*\n         CLI   CMDLINE+4,C'1'          SAVED COMMAND\n         BE    RPTLAST1\n         CLI   CMDLINE+4,C'2'          SAVED COMMAND\n         BE    RPTLAST2\n         CLI   CMDLINE+4,C'3'          SAVED COMMAND\n         BE    RPTLAST3\n         CLI   CMDLINE+4,C'4'          SAVED COMMAND\n         BE    RPTLAST4\n         CLI   CMDLINE+4,C'5'          SAVED COMMAND\n         BE    RPTLAST5\n         CLI   CMDLINE+4,C'6'          SAVED COMMAND\n         BE    RPTLAST6\n         CLI   CMDLINE+4,C'7'          SAVED COMMAND\n         BE    RPTLAST7\n         CLI   CMDLINE+4,C'8'          SAVED COMMAND\n         BE    RPTLAST8\n         CLI   CMDLINE+4,C'9'          SAVED COMMAND\n         BE    RPTLAST9\n*\n         MVC   CMDLINE(51),LASTCMD\n         B     SHOWCONS\n*\nRPTLAST1 MVC   CMDLINE(51),LASTCMD1\n         B     SHOWCONS\nRPTLAST2 MVC   CMDLINE(51),LASTCMD2\n         B     SHOWCONS\nRPTLAST3 MVC   CMDLINE(51),LASTCMD3\n         B     SHOWCONS\nRPTLAST4 MVC   CMDLINE(51),LASTCMD4\n         B     SHOWCONS\nRPTLAST5 MVC   CMDLINE(51),LASTCMD5\n         B     SHOWCONS\nRPTLAST6 MVC   CMDLINE(51),LASTCMD6\n         B     SHOWCONS\nRPTLAST7 MVC   CMDLINE(51),LASTCMD7\n         B     SHOWCONS\nRPTLAST8 MVC   CMDLINE(51),LASTCMD8\n         B     SHOWCONS\nRPTLAST9 MVC   CMDLINE(51),LASTCMD9\n         B     SHOWCONS\n*\n         EJECT\n*\nRPTSAVE  DS    0H\n*\n         CLI   CMDLINE+4,C'1'          SAVED COMMAND\n         BE    RPTSAVE1\n         CLI   CMDLINE+4,C'2'          SAVED COMMAND\n         BE    RPTSAVE2\n         CLI   CMDLINE+4,C'3'          SAVED COMMAND\n         BE    RPTSAVE3\n         CLI   CMDLINE+4,C'4'          SAVED COMMAND\n         BE    RPTSAVE4\n         CLI   CMDLINE+4,C'5'          SAVED COMMAND\n         BE    RPTSAVE5\n         CLI   CMDLINE+4,C'6'          SAVED COMMAND\n         BE    RPTSAVE6\n         CLI   CMDLINE+4,C'7'          SAVED COMMAND\n         BE    RPTSAVE7\n         CLI   CMDLINE+4,C'8'          SAVED COMMAND\n         BE    RPTSAVE8\n         CLI   CMDLINE+4,C'9'          SAVED COMMAND\n         BE    RPTSAVE9\n*\n         B     SHOWCONS\n*\nRPTSAVE1 MVC   LASTCMD1(51),LASTCMD\n         MVC   CMDLINE(51),SPACES      CLEAR IT\n         VPUT  LASTCMD1\n         B     SHOWCONS\nRPTSAVE2 MVC   LASTCMD2(51),LASTCMD\n         VPUT  LASTCMD2\n         B     SHOWCONS\nRPTSAVE3 MVC   LASTCMD3(51),LASTCMD\n         VPUT  LASTCMD3\n         B     SHOWCONS\nRPTSAVE4 MVC   LASTCMD4(51),LASTCMD\n         VPUT  LASTCMD4\n         B     SHOWCONS\nRPTSAVE5 MVC   LASTCMD5(51),LASTCMD\n         VPUT  LASTCMD5\n         B     SHOWCONS\nRPTSAVE6 MVC   LASTCMD6(51),LASTCMD\n         VPUT  LASTCMD6\n         B     SHOWCONS\nRPTSAVE7 MVC   LASTCMD7(51),LASTCMD\n         VPUT  LASTCMD7\n         B     SHOWCONS\nRPTSAVE8 MVC   LASTCMD8(51),LASTCMD\n         VPUT  LASTCMD8\n         B     SHOWCONS\nRPTSAVE9 MVC   LASTCMD9(51),LASTCMD\n         VPUT  LASTCMD9\n         B     SHOWCONS\n*\n         EJECT\n*\n         TITLE 'MISCELLANEOUS CONSTANTS'\n         LTORG\n*\n         DS    0F\n*\n*\n*\nFZEROS   DC    F'0'\nL79      DC    F'79'\nL51      DC    F'51'                                               DWM\n*                                                                  DWM\nTBADD    DC    C'TBADD    '\nTBCREATE DC    C'TBCREATE '\nTBDISPL  DC    C'TBDISPL  '\nTBEND    DC    C'TBEND    '\nTBTOP    DC    C'TBTOP    '\nTBVCLEAR DC    C'TBVCLEAR '\nVDEFINE  DC    C'VDEFINE  '\nVDELETE  DC    C'VDELETE  '\nVPUT     DC    C'VPUT     '\nAKEY     DC    X'9459277829C12B52'                                 DWM\n*\nNOWRITE  DC    C'NOWRITE  '\n*\nNULLENT  DC    C'()'\n*\nDANAMLST DC    C'('             CDF NAME LIST\n         DC    C'CONLINE )'     JOB INFO\nCONLINEP DC    C'(CONLINE )'    JOB INFO\nJCMD     DC    C'(JCMD    )'    SELECTION CODE\n*\n*\nCHAR     DC    C'CHAR    '\n*\nCDFDATAB DC    C'CDFDATAB'\nCDFTABLE DC    C'CDFTABLE'\nCDFWORKT DC    CL4'CDFW'                                           DWM\nBUFST    DC    CL4'BUFS'                                           DWM\nBUFET    DC    CL4'BUFE'                                           DWM\n*\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n*                         C O N S T A N T S                           *\n*                                                                     *\n*---------------------------------------------------------------------*\nPATTERN  DC    X'40202020'         EDIT PATTERN FIELD\nSPACES   EQU   *\nBLANKS   DC    CL80' '\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FOLLOWING IS IN SUPPORT OF C M S                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nAXLIST   DC    H'1',H'0'           AXRES PARMLIST\n         SPACE 2\n         SPACE 5\n         TITLE 'EQUATES'\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         DS    0F\nSUPRMOD  MODESET KEY=ZERO,MODE=SUP,MF=L                            GMM\nPROBMOD  MODESET KEY=NZERO,MODE=PROB,MF=L                          GMM\n*                |...|...|...|...|...|...|...|...|...|...|...\nCAPSONLY DC    CL64' '\n         DC    CL10' '\n         DC    C'\u00a2.<(+|&&'\n         DC    CL9' '\n         DC    C'!$*)'\n         DC    C' '             NOTE SEMICOLON CHANGED TO BLANK\n         DC    C'\u00ac-/'\n         DC    CL9' ',C',%_>?',CL10' ',C':#@''=\"'\n         DC    CL16' ABCDEFGHI      '\n         DC    CL16' JKLMNOPQR      '\n         DC    CL16'  STUVWXYZ      '\n         DC    CL16'                '\n         DC    CL16' ABCDEFGHI      '\n         DC    CL16' JKLMNOPQR      '\n         DC    CL16'  STUVWXYZ      '\n         DC    CL16'0123456789      '\n         SPACE 2\n*\nATABLE   DC    X'70BBE2A1E0056B12'                                 DWM\nATABLEN  EQU   *-ATABLE                                            DWM\nATABNUM  EQU   ATABLEN/8                                           DWM\n*                                                                  DWM\nCDF001   DC    CL8'CDF001 '                                        DWM\nCDF002   DC    CL8'CDF002 '                                        DWM\nCDF003   DC    CL8'CDF003 '                                        DWM\nCDF004   DC    CL8'CDF004 '                                        DWM\n*                                                                  DWM\nSETMSG   DC    CL8'SETMSG  '                                       DWM\n*                                                                  DWM\n*\nVCOPY    DC    CL8'VCOPY '\nZUSER    DC    CL8'ZUSER '\nSPFMOVE  DC    CL8'MOVE   '\nCONSNAME DC    CL8'CONSOLE'                                        DWM\nCONCMD   DC    C'CON '                                             DWM\nZEROS    DC    CL8'00000000'                                       BC\n         TITLE 'WORKING STORAGE AREAS'\n*                                                                  DWM\n*   WORKING STORAGE DSECT                                          DWM\n*                                                                  DWM\nCDFWORK  DSECT                                                     DWM\nCDFWT    DS    CL4                                                 DWM\nSAVEAREA DS    18F                                                 DWM\n*                                                                  DWM\nCDFAMODE DS    F                                                   DWM\nF8       DS    F                                                   BC\nWORK     DS    D                                                   DWM\nSCRATCH  DS    D                   SCRATCH AREA FOR CHAR. MANIP    DWM\nISPARMS  DS    10F            PARM LIST FOR ISPLINK                DWM\nISPLINKA DS    F              ISPLINK ADDRESS                      DWM\nUCMTAB   DS    36F            UCM TABLE                            DWM\nUCMTABE  EQU   *              UCM TABLE END                        DWM\nOLDCONS  DS    F                   PREVIOUS CONSOLE NUMBER         DWM\nCONSOLE  DS    F                   CONSOLE TO BE LOOKED AT         DWM\nSIBPTR   DS    F                   PRT TO SCREEN IMAGE BUFFER      DWM\nTDCMADDR DS    F                   ADDRESS OF \"IEECDCM\"            BC\nCONSASID DS    F                   'CONSOLE' ASID FOR CMS          DWM\nNUMUCMS  DS    H              NUMBER OF UCMS                       DWM\nOUTLEN   DS    H                  CONSOLE LINE IMAGE LENGTH        DWM\nOUTCLEN  DS    H                  INCORE LINE LENGTH               DWM\nOUTNUM   DS    H                  NUMBER OF LINES FOR CONSOLE      DWM\nMNPFLAG  DS    CL1            MORTON SECURITY FLAG                 BC\nTITLE    DS    0CL1               CONSOLE TITLE                    DWM\nTITLEC1  DS    CL9                ' CONSOLE='                      DWM\nCDFN     DS    CL2                CONSOLE NUMBER                   DWM\nTITLEC2  DS    CL6                ' AUTH='                         DWM\nCDFS     DS    CL3                SYS  AUTHORIZATION               DWM\n         DS    CL1                                                 DWM\nCDFI     DS    CL3                I/O  AUTHORIZATION               DWM\n         DS    CL1                                                 DWM\nCDFC     DS    CL4                CONS AUTHORIZATION               DWM\n         DS    CL1                                                 DWM\nCDFMST   DS    CL6                MASTER CONSOLE                   DWM\nTITLEC3  DS    CL6                ' ADDR='                         DWM\nCDFU     DS    CL3                UNIT ADDR OF CONSOLE             DWM\n         DS    CL1                                                 DWM\nTITLEL   EQU   *-TITLE                                             DWM\n*                                                                  DWM\n*     THE ISP TABLE FLAGS INDICATE NO ACTIVE TABLE (0), OR ONE EXISTSM\nATABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY ACTIVE\" TABLE  DWM\nFLAG1    DS    XL1     GENERAL PURPOSE FLAG                        DWM\nCONOTACT EQU   X'80'   CONSOLE NOT ACTIVE FLAG                     DWM\nBUFSHORT EQU   X'40'   BUFFER TOO SHORT CONDITION                  DWM\n*                                                                  DWM\nCMDPARM  DS    H                                                   DWM\nCMDRESV  DS    H                                                   DWM\nLASTCMD  DS    CL51\nCMDLEN   EQU   *-CMDPARM                                           DWM\nUSERID   DS    CL8                                                 DWM\nAWORK    DS    CL8                                                 DWM\n*\nCMDLINE  DS    CL51        COMMAND SVC 34 INPUT                    DWM\n*\n** COMMAND STACK VARIABLES\n*\nLASTCMD1 DS    CL51\nLASTCMD2 DS    CL51\nLASTCMD3 DS    CL51\nLASTCMD4 DS    CL51\nLASTCMD5 DS    CL51\nLASTCMD6 DS    CL51\nLASTCMD7 DS    CL51\nLASTCMD8 DS    CL51\nLASTCMD9 DS    CL51\n*\n** ISPF PANEL VARIABLES\n*\nAREATYP  DS    CL8\nCOLS     DS    F\nROWS     DS    F\nTLROW    DS    F\nTLCOL    DS    F\nZVERB    DS    CL8\nZSCROLLA DS    CL4\nZSCROLLN DS    F\nCDF#COFF DS    F\nCDF#CSRN DS    CL8\nCDF#DDEP DS    F\nCDFDATA  DS    XL3440\n*\n*---------------------------------------------------------------------*\n*                                                                  DWM*\n*               DISPLAY SCREEN - IMAGE BUFFER SECTION              DWM*\n*                                                                  DWM*\n*---------------------------------------------------------------------*\nBUFS     DS    CL4                                                 DWM\nBUF      DS    35CL80             OPERATORS SCREEN BUFFER          DWM\nBUFLEN   EQU   *-BUF              SCREEN BUFFER LENGTH             DWM\nBUFE     DS    CL4                                                 DWM\n*                                                                  DWM\n*                                                                  DWM\n*                                                                  DWM\nWORKLEN  EQU   *-CDFWORK                                           DWM\n         EJECT\n         PRINT NOGEN\n         TITLE '*** COMMUNICATION VECTOR TABLE ***'                GMM\n         CVT   DSECT=YES                                           GMM\n         TITLE '*** ADDRESS SPACE VECTOR TABLE ***'                DWM\n         IHAASVT DSECT=YES                                         DWM\n         TITLE '*** ADDRESS SPACE CONTROL BLOCK ***'               JL1\n         IHAASCB DSECT=YES                                         JL1\n*        TITLE '*** RDCM DSECT ***'                                GMM\n*IEERDCM  DSECT ,                                                  GMM\n*        IEECRDCM                                                  GMM\n         TITLE '*** TDCM DSECT ***'                                GMM\nIEETDCM  DSECT ,                                                   GMM\n         IEECDCM                                                   GMM\n         TITLE '*** MULTIPLE CONSOLE SUPPORT (MCS) UCM PREFIX ***' GMM\n         IEECUCM FORMAT=NEW\n         TITLE '*** UNIT CONTROL BLOCK ***'                        DWM\n         IEFUCBOB                                                  DWM\n         END\n/*\n//LKED1    EXEC PGM=HEWLH096,PARM=(XREF,LET,LIST,TERM),\n//            COND=(4,LT,ASM1),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DISP=SHR,DSN=ISP.V2R2M0.ISPLOAD\n//SYSLMOD  DD   DISP=SHR,DSN=ASQCC.TEST.STEPLIB\n//*YSLMOD  DD   DISP=SHR,DSN=SYS2.CMDLIB\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  NAME CDF(R)\n/*\n//*EFRESH  EXEC PGM=MVSCMD,PARM='F LLA,REFRESH'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CDF$": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "CBT353"}, "text": "1\n        CONSOLE DISPLAY FACILITY (CDF) INSTALLATION (MVS SP 1.3)\n\n 1. COPY CDF2P1 AND CDF2H1 INTO YOUR ISPPLIB, AND CDF00 INTO ISPMLIB.\n\n 2. SUBMIT AN ASSEMBLY OF CDF2. IT DOES NOT NEED TO GO INTO ANY SPECIAL\n    LIBRARY.\n\n 3. MODIFY AN EXISTING SPF SCREEN TO INVOKE THE CDF PROGRAM. A SAMPLE\n    ISP@PRIM IS INCLUDED.\n\n 4. YOU NEED TO HAVE THE JDF SVC INSTALLED; SEE \"JDF$\" FOR DETAILS.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CDFDATAB": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  @  TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%-----------------  CONSOLE DISPLAY FACILITY (CDF) -----------------------------\n COMMAND ==>_JCMD                                               %SCROLL =>_AMT %\n)MODEL\n@Z\n)INIT\n .CURSOR=JCMD\n  &AMT=PAGE\n  &VARS='(CONLINE)'\n  .HELP=CDFHELP\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CDFHELP": {"ttr": 3079, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "CBT353"}, "text": "%------------------- CONSOLE DISPLAY FACILITY  (CDF)  --------------------------\n+\n+  CDF is an in-house written system that provides a console display.\n+\n+  You can enter console commands just as though you were the master\n+  console operator, so BE CAREFUL!\n+\n+  CDF commands are:\n+\n+      SAVEn -- saves the last previous command in a table as entry number \"n\".\n+      LASTn -- restores the command in table entry number \"n\" to the cmd line.\n+\n+  Current command table entries are:\n+\n+      LAST1 -- _LASTCMD1                                                      +\n+      LAST2 -- _LASTCMD2                                                      +\n+      LAST3 -- _LASTCMD3                                                      +\n+      LAST4 -- _LASTCMD4                                                      +\n+      LAST5 -- _LASTCMD5                                                      +\n+      LAST6 -- _LASTCMD6                                                      +\n+      LAST7 -- _LASTCMD7                                                      +\n+      LAST8 -- _LASTCMD8                                                      +\n+      LAST9 -- _LASTCMD9                                                      +\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CDF00": {"ttr": 3081, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "CBT353"}, "text": "CDF001   'AUTHORIZATION FAILED'              .ALARM=YES\n'You are not authorizied to use the Console Display Facility'\n\nCDF002   '\"CONSOLE\" not found'               .ALARM=YES\n'The console communications task, \"CONSOLE\", could not be found'\n\nCDF003   'Console not active'                .ALARM=YES\n'The requested console is not active'\n\nCDF004   'Buffer shortage'                   .ALARM=YES\n'The internal program buffer could not hold the requested console image'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CDF2H1": {"ttr": 3083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  # TYPE(OUTPUT) INTENS(HIGH)\n)BODY\n%------------------- CONSOLE DISPLAY FACILITY  (CDF)  --------------------------\n+\n+  CDF is an in-house written system that provides a console display.\n+\n+  You can enter console commands just as though you were the master\n+  console operator, so BE CAREFUL!\n+\n+  CDF commands are:\n+\n+      SAVEn -- saves the last previous command in a table as entry number \"n\".\n+      LASTn -- restores the command in table entry number \"n\" to the cmd line.\n+\n+  Current command table entries are:\n+\n+LAST1 -- #LASTCMD1                                                            +\n+LAST2 -- #LASTCMD2                                                            +\n+LAST3 -- #LASTCMD3                                                            +\n+LAST4 -- #LASTCMD4                                                            +\n+LAST5 -- #LASTCMD5                                                            +\n+LAST6 -- #LASTCMD6                                                            +\n+LAST7 -- #LASTCMD7                                                            +\n+LAST8 -- #LASTCMD8                                                            +\n+LAST9 -- #LASTCMD9                                                            +\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CDF2P1": {"ttr": 3085, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  | AREA(DYNAMIC) EXTEND(ON) USERMOD(20)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 05 TYPE(DATAOUT) INTENS(LOW)\n 07 TYPE(DATAOUT) INTENS(HIGH)\n 09 TYPE(DATAOUT) INTENS(LOW) SKIP(ON)\n 0B TYPE(DATAOUT) INTENS(HIGH) SKIP(ON)\n 0C TYPE(DATAOUT) SKIP(ON)\n 0D TYPE(DATAOUT) INTENS(LOW) SKIP(ON)\n 0F TYPE(DATAOUT) INTENS(HIGH) SKIP(ON)\n 11 TYPE(DATAIN)  INTENS(LOW)  CAPS(OFF)\n 13 TYPE(DATAIN)  INTENS(HIGH) CAPS(OFF)\n 15 TYPE(DATAIN)  INTENS(LOW)  CAPS(ON)\n 17 TYPE(DATAIN)  INTENS(HIGH) CAPS(ON)\n 19 TYPE(DATAIN)  INTENS(LOW) CAPS(OFF)\n 1B TYPE(DATAIN)  INTENS(HIGH) CAPS(OFF)\n 20 TYPE(DATAOUT) INTENS(LOW)\n 21 TYPE(DATAOUT) INTENS(LOW)\n 23 TYPE(DATAOUT) INTENS(HIGH)\n 29 TYPE(DATAOUT) INTENS(LOW) SKIP(ON)\n 2B TYPE(DATAOUT) INTENS(HIGH) SKIP(ON)\n)BODY EXPAND(//)\n%-----------------  CONSOLE DISPLAY FACILITY (CDF) -----------------------------\n COMMAND ==>_CMDLINE                                            %SCROLL =>_AMT %\n|CDFDATA                       / /                                     |\n)INIT\n       &AMT = PAGE\n    .CURSOR = CMDLINE\n      .HELP = CDF2H1\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CDF3P1": {"ttr": 3087, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  | AREA(DYNAMIC) EXTEND(ON) USERMOD(20) SCROLL(ON)\n  ! TYPE(OUTPUT)  INTENS(HIGH) PAD(-)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 03 TYPE(DATAOUT) INTENS(HIGH)\n 05 TYPE(DATAOUT) INTENS(LOW)\n 07 TYPE(DATAOUT) INTENS(HIGH)\n 09 TYPE(DATAOUT) INTENS(LOW) SKIP(ON)\n 0B TYPE(DATAOUT) INTENS(HIGH) SKIP(ON)\n 0C TYPE(DATAOUT) SKIP(ON)\n 0D TYPE(DATAOUT) INTENS(LOW) SKIP(ON)\n 0F TYPE(DATAOUT) INTENS(HIGH) SKIP(ON)\n 11 TYPE(DATAIN)  INTENS(LOW)  CAPS(OFF)\n 13 TYPE(DATAIN)  INTENS(HIGH) CAPS(OFF)\n 15 TYPE(DATAIN)  INTENS(LOW)  CAPS(ON)\n 17 TYPE(DATAIN)  INTENS(HIGH) CAPS(ON)\n 19 TYPE(DATAIN)  INTENS(LOW) CAPS(OFF)\n 1B TYPE(DATAIN)  INTENS(HIGH) CAPS(OFF)\n 20 TYPE(DATAOUT) INTENS(LOW)\n 21 TYPE(DATAOUT) INTENS(LOW)\n 23 TYPE(DATAOUT) INTENS(HIGH)\n 29 TYPE(DATAOUT) INTENS(LOW) SKIP(ON)\n 2B TYPE(DATAOUT) INTENS(HIGH) SKIP(ON)\n)BODY EXPAND(//)\n%- Console Display Facility ---+Console!CDFN+Auth!CDFS+!CDFI+!CDFMST+-Unit!CDFU+\n COMMAND ==>_CMDLINE                                            %              %\n|CDFDATA                       / /                                     |\n)INIT\n    .CURSOR = CMDLINE\n      .HELP = CDF2H1\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CVTCUSER": {"ttr": 3089, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n         CVTCUSER\nCVTCUSER DSECT\n*\n*      THIS DSECT MAPS THE CVTCMSU FIELD INDIVIDUAL ENTRIES\n**********************************************************************\n*\nCVTCUID  DS    CL3              CMS INSTALLATION ASSIGNED USER CODE\nCVTCFLAG DS    X                FLAG BYTE\n*\nCMSJSUB  EQU   128\n*\n*CMSJSUB       80 *1... ....*   USER MAY SUBMIT JOBS TO MVS FROM VM\n*              40 *.1.. ....*            - UNUSED -\n*              20 *..1. ....*            - UNUSED -\n*              10 *...1 ....*            - UNUSED -\n*              08 *.... 1...*            - UNUSED -\n*              04 *.... .1..*            - UNUSED -\n*              02 *.... ..1.*            - UNUSED -\n*              01 *.... ...1*            - UNUSED -\n*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVTUSERB": {"ttr": 3091, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00d\\x00d\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 100, "newlines": 100, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n         CVTUSERS\nCVTUSERS DSECT\nCVTULABL DS    CL8    CVTUSER LABEL\nCVTUENQ  DS CL4 SET TO \"LOAD\" WHEN IPLJOB IS LOADING IT, THEN \"FREE\"\nCVTUSIUA DS    XL4    CVTUSER ADDRESS OF THE START OF USI USER LIST\nCVTUSIUN DS    XL4    CVTUSER NUMBER OF ENTRIES IN USI USER TABLE\nCVTPRODA DS    XL4    CVTUSER ADDRESS OF THE START OF PROD JOB LIST\nCVTPRODN DS    XL4    CVTUSER NUMBER OF ENTRIES IN PROD TABLE\nCVTTSOUA DS    XL4    CVTUSER ADDRESS OF THE START OF TSO USERS\nCVTTSOUN DS    XL4    CVTUSER NUMBER OF ENTRIES IN TSO USER TABLE\nCVTUTSN1 DS    XL4    SPECIAL HIGH-LEVEL QUALIFIERS\nCVTUTSN2 DS    XL4    SPECIAL EXTENDED RETENTION SECOND-LEVEL QUAL\nCVTUTSN3 DS    XL4    SHORT RETENTION TSO\nCVTUTSN4 DS    XL4    SPECIAL RETENTION THIRD-LEVEL QUAL\n*\n*   SUPERSVC ROUTE TABLE (IGC0023F)\n*\nCVTUSVCT DS    XL40   CVTUSER SUPERSVC ROUTE TABLE\n*\nCVTUDYNX DS    XL4    ADDRESS OF DYNAMIC ALLOCATION EXIT\nCVTUCCOD DS    XL4    CVTUSER ADDRESS OF CHARGE CODE TABLE\nCVTUWORK DS    XL120  CVTUSER ADDRESS OF SAVE AREA FOR STATUS COMMAND\nCVTJNAME DS    CL8\nCVTJLENG DS    H\n         DS    H\n*\nCVTUJVID DS    CL4    TEST IEFUJV EYE-CATCHER, SET TO \"TUJV\"\nCVTUJVAD DS    XL4    TEST IEFUJV EPA IN CSA\n*\nCVTU83ID DS    CL4    TEST IEFU83 EYE-CATCHER, SET TO \"TU83\"\nCVTU83AD DS    XL4    TEST IEFU83 EPA IN CSA\n*\nCVTUTLID DS    CL4    TEST IEFUTL EYE-CATCHER, SET TO \"TUTL\"\nCVTUTLAD DS    XL4    TEST IEFUTL EPA IN CSA\n*\nCVTU29ID DS    CL4    TEST IEFU29 EYE-CATCHER, SET TO \"TU29\"\nCVTU29AD DS    XL4    TEST IEFU29 EPA IN CSA\n*\nCVTJDFID DS    CL4    TEST JDF EYE-CATCHER, SET TO \"TJDF\"\nCVTJDFAD DS    XL4    TEST JDF EPA IN CSA\n*\nCVTACTID DS    CL4    TEST IEFACTRT EYE-CATCHER, SET TO \"TACT\"\nCVTACTAD DS    XL4    TEST IEFACTRT EPA IN CSA\n*\nCVT99XID DS    CL4    TEST IEFDB401 EYE-CATCHER, SET TO \"T99X\"\nCVT99XAD DS    XL4    TEST IEFDB401 EPA IN CSA\n*\nCVT237ID DS    CL4    TEST SVC 237 (JDF) EYE-CATCHER, SET TO \"T237\"\nCVT237AD DS    XL4    TEST SVC 237 EPA IN CSA\n*\nCVTUSIID DS    CL4    TEST IEFUSI  EYE-CATCHER, SET TO \"TUSI\"\nCVTUSIAD DS    XL4    TEST IEFUSI  EPA IN CSA\n*\nCVTWTOID DS    CL4    TEST IEECVXIT EYE-CATCHER, SET TO \"TWTO\"\nCVTWTOAD DS    XL4    TEST IEECVXIT EPA IN CSA\n*\n*\nCVTPREID DS    CL4    TEST IGGPRE00 EYE-CATCHER, SET TO \"TPRE\"\nCVTPREAD DS    XL4    TEST IGGPRE00 EPA IN CSA\n*\n         DS    XL32   CVTUSER AREA FOR FUTURE EXPANSION\n*\nCVTUSIU  DS    200XL32    FIRST USI USER CODE\nUSIUMAX  EQU   (*-CVTUSIU)/32\nCVTPROD  DS    1200XL4    FIRST PROD JOB NAME PREFIX\nPRODMAX  EQU   (*-CVTPROD)/4\nTSOUSERS DS    500CL25   FIRST TSO USER/NAME\nTSOUMAX  EQU   (*-TSOUSERS)/25\n**********************************************************************\nCVTEND   EQU   *\nCVTULEN  EQU   CVTEND-CVTULABL+4095\nCVTKLEN  EQU   CVTULEN/1024\nCVTKLEN4 EQU   CVTULEN/4096\nCVTUROUN EQU   CVTKLEN4*4096\n*\n*********************************************************************\n*\n*     THIS DSECT MAPS THE STC IEFUSI ENTRIES IN CVTUSER\n*\nUSIUSER  DSECT\nUSISTCNM DS     CL8     STC NAME\nUSIREGSA DS     XL4     REGION SIZE ABOVE\nUSIREGLA DS     XL4     REGION LIMIT ABOBE\nUSIFUTR1 DS     XL4     RESERVED FOR FUTURE USE\nUSIFUTR2 DS     XL4     RESERVED FOR FUTURE USE\nUSIFUTR3 DS     XL4     RESERVED FOR FUTURE USE\nUSIFUTR4 DS     XL4     RESERVED FOR FUTURE USE\nUSIUSLEN EQU    *-USIUSER\n*\n*\n*********************************************************************\n*\n*     THIS DSECT MAPS THE TSO USERID ENTRIES IN CVTUSER\n*\nTSOUSER  DSECT\nTSOUSRID DS    CL7    TSO USERID\nTSOUSRNM DS    CL18   TSO DELIVERY STATION AND USER NAME\nTSOUSLEN EQU   *-TSOUSER\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CVTUSERN": {"ttr": 3094, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00Q\\x00Q\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 81, "newlines": 81, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n         CVTUSERN\nCVTUSERN DSECT\nCVTULABL DS    CL8    CVTUSER LABEL\nCVTUENQ  DS CL4 SET TO \"LOAD\" WHEN IPLJOB IS LOADING IT, THEN \"FREE\"\nCVTUSIUA DS    XL4    CVTUSER ADDRESS OF THE START OF USI USER LIST\nCVTUSIUN DS    XL4    CVTUSER NUMBER OF ENTRIES IN USI USER TABLE\nCVTPRODA DS    XL4    CVTUSER ADDRESS OF THE START OF PROD JOB LIST\nCVTPRODN DS    XL4    CVTUSER NUMBER OF ENTRIES IN PROD TABLE\nCVTTSOUA DS    XL4    CVTUSER ADDRESS OF THE START OF TSO USERS\nCVTTSOUN DS    XL4    CVTUSER NUMBER OF ENTRIES IN TSO USER TABLE\nCVTUTSN1 DS    XL4    SPECIAL HIGH-LEVEL QUALIFIERS\nCVTUTSN2 DS    XL4    SPECIAL EXTENDED RETENTION SECOND-LEVEL QUAL\nCVTUTSN3 DS    XL4    SHORT RETENTION TSO\nCVTUTSN4 DS    XL4    SPECIAL RETENTION THIRD-LEVEL QUAL\n*\n*   SUPERSVC ROUTE TABLE (IGC0023F)\n*\nCVTUSVCT DS    XL40   CVTUSER SUPERSVC ROUTE TABLE\n*\nCVTUDYNX DS    XL4    ADDRESS OF DYNAMIC ALLOCATION EXIT\nCVTUCCOD DS    XL4    CVTUSER ADDRESS OF CHARGE CODE TABLE\nCVTUWORK DS    XL120  CVTUSER ADDRESS OF SAVE AREA FOR STATUS COMMAND\nCVTJNAME DS    CL8\nCVTJLENG DS    H\n         DS    H\n*\nCVTUJVID DS    CL4    TEST IEFUJV EYE-CATCHER, SET TO \"TUJV\"\nCVTUJVAD DS    XL4    TEST IEFUJV EPA IN CSA\n*\nCVTU83ID DS    CL4    TEST IEFU83 EYE-CATCHER, SET TO \"TU83\"\nCVTU83AD DS    XL4    TEST IEFU83 EPA IN CSA\n*\nCVTUTLID DS    CL4    TEST IEFUTL EYE-CATCHER, SET TO \"TUTL\"\nCVTUTLAD DS    XL4    TEST IEFUTL EPA IN CSA\n*\nCVTU29ID DS    CL4    TEST IEFU29 EYE-CATCHER, SET TO \"TU29\"\nCVTU29AD DS    XL4    TEST IEFU29 EPA IN CSA\n*\nCVTJDFID DS    CL4    TEST JDF EYE-CATCHER, SET TO \"TJDF\"\nCVTJDFAD DS    XL4    TEST JDF EPA IN CSA\n*\nCVTACTID DS    CL4    TEST IEFACTRT EYE-CATCHER, SET TO \"TACT\"\nCVTACTAD DS    XL4    TEST IEFACTRT EPA IN CSA\n*\nCVT99XID DS    CL4    TEST IEFDB401 EYE-CATCHER, SET TO \"T99X\"\nCVT99XAD DS    XL4    TEST IEFDB401 EPA IN CSA\n*\nCVT237ID DS    CL4    TEST SVC 237 (JDF) EYE-CATCHER, SET TO \"T237\"\nCVT237AD DS    XL4    TEST SVC 237 EPA IN CSA\n*\nCVTUSIID DS    CL4    TEST IEFUSI  EYE-CATCHER, SET TO \"TUSI\"\nCVTUSIAD DS    XL4    TEST IEFUSI  EPA IN CSA\n*\n         DS    XL48   CVTUSER AREA FOR FUTURE EXPANSION\n*\nCVTUSIU  DS    1600XL4    FIRST USI USER CODE\nUSIUMAX  EQU   (*-CVTUSIU)/4\nCVTPROD  DS    1200XL4    FIRST PROD JOB NAME PREFIX\nPRODMAX  EQU   (*-CVTPROD)/4\nTSOUSERS DS    500CL25   FIRST TSO USER/NAME\nTSOUMAX  EQU   (*-TSOUSERS)/25\n**********************************************************************\nCVTEND   EQU   *\nCVTULEN  EQU   CVTEND-CVTULABL+4095\nCVTKLEN  EQU   CVTULEN/1024\nCVTKLEN4 EQU   CVTULEN/4096\nCVTUROUN EQU   CVTKLEN4*4096\n*\n*\n*\n*\n*********************************************************************\n*\n*     THIS DSECT MAPS THE TSO USERID ENTRIES IN CVTUSER\n*\nTSOUSER  DSECT\nTSOUSRID DS    CL7    TSO USERID\nTSOUSRNM DS    CL18   TSO DELIVERY STATION AND USER NAME\nTSOUSLEN EQU   *-TSOUSER\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CVTUSERO": {"ttr": 3097, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00`\\x00`\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 96, "newlines": 96, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n         CVTUSERS\nCVTUSERS DSECT\nCVTULABL DS    CL8    CVTUSER LABEL\nCVTUENQ  DS CL4 SET TO \"LOAD\" WHEN IPLJOB IS LOADING IT, THEN \"FREE\"\nCVTUSIUA DS    XL4    CVTUSER ADDRESS OF THE START OF USI USER LIST\nCVTUSIUN DS    XL4    CVTUSER NUMBER OF ENTRIES IN USI USER TABLE\nCVTPRODA DS    XL4    CVTUSER ADDRESS OF THE START OF PROD JOB LIST\nCVTPRODN DS    XL4    CVTUSER NUMBER OF ENTRIES IN PROD TABLE\nCVTTSOUA DS    XL4    CVTUSER ADDRESS OF THE START OF TSO USERS\nCVTTSOUN DS    XL4    CVTUSER NUMBER OF ENTRIES IN TSO USER TABLE\nCVTUTSN1 DS    XL4    SPECIAL HIGH-LEVEL QUALIFIERS\nCVTUTSN2 DS    XL4    SPECIAL EXTENDED RETENTION SECOND-LEVEL QUAL\nCVTUTSN3 DS    XL4    SHORT RETENTION TSO\nCVTUTSN4 DS    XL4    SPECIAL RETENTION THIRD-LEVEL QUAL\n*\n*   SUPERSVC ROUTE TABLE (IGC0023F)\n*\nCVTUSVCT DS    XL40   CVTUSER SUPERSVC ROUTE TABLE\n*\nCVTUDYNX DS    XL4    ADDRESS OF DYNAMIC ALLOCATION EXIT\nCVTUCCOD DS    XL4    CVTUSER ADDRESS OF CHARGE CODE TABLE\nCVTUWORK DS    XL120  CVTUSER ADDRESS OF SAVE AREA FOR STATUS COMMAND\nCVTJNAME DS    CL8\nCVTJLENG DS    H\n         DS    H\n*\nCVTUJVID DS    CL4    TEST IEFUJV EYE-CATCHER, SET TO \"TUJV\"\nCVTUJVAD DS    XL4    TEST IEFUJV EPA IN CSA\n*\nCVTU83ID DS    CL4    TEST IEFU83 EYE-CATCHER, SET TO \"TU83\"\nCVTU83AD DS    XL4    TEST IEFU83 EPA IN CSA\n*\nCVTUTLID DS    CL4    TEST IEFUTL EYE-CATCHER, SET TO \"TUTL\"\nCVTUTLAD DS    XL4    TEST IEFUTL EPA IN CSA\n*\nCVTU29ID DS    CL4    TEST IEFU29 EYE-CATCHER, SET TO \"TU29\"\nCVTU29AD DS    XL4    TEST IEFU29 EPA IN CSA\n*\nCVTJDFID DS    CL4    TEST JDF EYE-CATCHER, SET TO \"TJDF\"\nCVTJDFAD DS    XL4    TEST JDF EPA IN CSA\n*\nCVTACTID DS    CL4    TEST IEFACTRT EYE-CATCHER, SET TO \"TACT\"\nCVTACTAD DS    XL4    TEST IEFACTRT EPA IN CSA\n*\nCVT99XID DS    CL4    TEST IEFDB401 EYE-CATCHER, SET TO \"T99X\"\nCVT99XAD DS    XL4    TEST IEFDB401 EPA IN CSA\n*\nCVT237ID DS    CL4    TEST SVC 237 (JDF) EYE-CATCHER, SET TO \"T237\"\nCVT237AD DS    XL4    TEST SVC 237 EPA IN CSA\n*\nCVTUSIID DS    CL4    TEST IEFUSI  EYE-CATCHER, SET TO \"TUSI\"\nCVTUSIAD DS    XL4    TEST IEFUSI  EPA IN CSA\n*\nCVTWTOID DS    CL4    TEST IEECVXIT EYE-CATCHER, SET TO \"TWTO\"\nCVTWTOAD DS    XL4    TEST IEECVXIT EPA IN CSA\n*\n         DS    XL40   CVTUSER AREA FOR FUTURE EXPANSION\n*\nCVTUSIU  DS    200XL32    FIRST USI USER CODE\nUSIUMAX  EQU   (*-CVTUSIU)/32\nCVTPROD  DS    1200XL4    FIRST PROD JOB NAME PREFIX\nPRODMAX  EQU   (*-CVTPROD)/4\nTSOUSERS DS    500CL25   FIRST TSO USER/NAME\nTSOUMAX  EQU   (*-TSOUSERS)/25\n**********************************************************************\nCVTEND   EQU   *\nCVTULEN  EQU   CVTEND-CVTULABL+4095\nCVTKLEN  EQU   CVTULEN/1024\nCVTKLEN4 EQU   CVTULEN/4096\nCVTUROUN EQU   CVTKLEN4*4096\n*\n*********************************************************************\n*\n*     THIS DSECT MAPS THE STC IEFUSI ENTRIES IN CVTUSER\n*\nUSIUSER  DSECT\nUSISTCNM DS     CL8     STC NAME\nUSIREGSA DS     XL4     REGION SIZE ABOVE\nUSIREGLA DS     XL4     REGION LIMIT ABOBE\nUSIFUTR1 DS     XL4     RESERVED FOR FUTURE USE\nUSIFUTR2 DS     XL4     RESERVED FOR FUTURE USE\nUSIFUTR3 DS     XL4     RESERVED FOR FUTURE USE\nUSIFUTR4 DS     XL4     RESERVED FOR FUTURE USE\nUSIUSLEN EQU    *-USIUSER\n*\n*\n*********************************************************************\n*\n*     THIS DSECT MAPS THE TSO USERID ENTRIES IN CVTUSER\n*\nTSOUSER  DSECT\nTSOUSRID DS    CL7    TSO USERID\nTSOUSRNM DS    CL18   TSO DELIVERY STATION AND USER NAME\nTSOUSLEN EQU   *-TSOUSER\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CVTUSERS": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00d\\x00d\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 100, "newlines": 100, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n         CVTUSERS\nCVTUSERS DSECT\nCVTULABL DS    CL8    CVTUSER LABEL\nCVTUENQ  DS CL4 SET TO \"LOAD\" WHEN IPLJOB IS LOADING IT, THEN \"FREE\"\nCVTUSIUA DS    XL4    CVTUSER ADDRESS OF THE START OF USI USER LIST\nCVTUSIUN DS    XL4    CVTUSER NUMBER OF ENTRIES IN USI USER TABLE\nCVTPRODA DS    XL4    CVTUSER ADDRESS OF THE START OF PROD JOB LIST\nCVTPRODN DS    XL4    CVTUSER NUMBER OF ENTRIES IN PROD TABLE\nCVTTSOUA DS    XL4    CVTUSER ADDRESS OF THE START OF TSO USERS\nCVTTSOUN DS    XL4    CVTUSER NUMBER OF ENTRIES IN TSO USER TABLE\nCVTUTSN1 DS    XL4    SPECIAL HIGH-LEVEL QUALIFIERS\nCVTUTSN2 DS    XL4    SPECIAL EXTENDED RETENTION SECOND-LEVEL QUAL\nCVTUTSN3 DS    XL4    SHORT RETENTION TSO\nCVTUTSN4 DS    XL4    SPECIAL RETENTION THIRD-LEVEL QUAL\n*\n*   SUPERSVC ROUTE TABLE (IGC0023F)\n*\nCVTUSVCT DS    XL40   CVTUSER SUPERSVC ROUTE TABLE\n*\nCVTUDYNX DS    XL4    ADDRESS OF DYNAMIC ALLOCATION EXIT\nCVTUCCOD DS    XL4    CVTUSER ADDRESS OF CHARGE CODE TABLE\nCVTUWORK DS    XL120  CVTUSER ADDRESS OF SAVE AREA FOR STATUS COMMAND\nCVTJNAME DS    CL8\nCVTJLENG DS    H\n         DS    H\n*\nCVTUJVID DS    CL4    TEST IEFUJV EYE-CATCHER, SET TO \"TUJV\"\nCVTUJVAD DS    XL4    TEST IEFUJV EPA IN CSA\n*\nCVTU83ID DS    CL4    TEST IEFU83 EYE-CATCHER, SET TO \"TU83\"\nCVTU83AD DS    XL4    TEST IEFU83 EPA IN CSA\n*\nCVTUTLID DS    CL4    TEST IEFUTL EYE-CATCHER, SET TO \"TUTL\"\nCVTUTLAD DS    XL4    TEST IEFUTL EPA IN CSA\n*\nCVTU29ID DS    CL4    TEST IEFU29 EYE-CATCHER, SET TO \"TU29\"\nCVTU29AD DS    XL4    TEST IEFU29 EPA IN CSA\n*\nCVTJDFID DS    CL4    TEST JDF EYE-CATCHER, SET TO \"TJDF\"\nCVTJDFAD DS    XL4    TEST JDF EPA IN CSA\n*\nCVTACTID DS    CL4    TEST IEFACTRT EYE-CATCHER, SET TO \"TACT\"\nCVTACTAD DS    XL4    TEST IEFACTRT EPA IN CSA\n*\nCVT99XID DS    CL4    TEST IEFDB401 EYE-CATCHER, SET TO \"T99X\"\nCVT99XAD DS    XL4    TEST IEFDB401 EPA IN CSA\n*\nCVT237ID DS    CL4    TEST SVC 237 (JDF) EYE-CATCHER, SET TO \"T237\"\nCVT237AD DS    XL4    TEST SVC 237 EPA IN CSA\n*\nCVTUSIID DS    CL4    TEST IEFUSI  EYE-CATCHER, SET TO \"TUSI\"\nCVTUSIAD DS    XL4    TEST IEFUSI  EPA IN CSA\n*\nCVTWTOID DS    CL4    TEST IEECVXIT EYE-CATCHER, SET TO \"TWTO\"\nCVTWTOAD DS    XL4    TEST IEECVXIT EPA IN CSA\n*\n*\nCVTPREID DS    CL4    TEST IGGPRE00 EYE-CATCHER, SET TO \"TPRE\"\nCVTPREAD DS    XL4    TEST IGGPRE00 EPA IN CSA\n*\n         DS    XL32   CVTUSER AREA FOR FUTURE EXPANSION\n*\nCVTUSIU  DS    200XL32    FIRST USI USER CODE\nUSIUMAX  EQU   (*-CVTUSIU)/32\nCVTPROD  DS    1200XL4    FIRST PROD JOB NAME PREFIX\nPRODMAX  EQU   (*-CVTPROD)/4\nTSOUSERS DS    1000CL25   FIRST TSO USER/NAME\nTSOUMAX  EQU   (*-TSOUSERS)/25\n**********************************************************************\nCVTEND   EQU   *\nCVTULEN  EQU   CVTEND-CVTULABL+4095\nCVTKLEN  EQU   CVTULEN/1024\nCVTKLEN4 EQU   CVTULEN/4096\nCVTUROUN EQU   CVTKLEN4*4096\n*\n*********************************************************************\n*\n*     THIS DSECT MAPS THE STC IEFUSI ENTRIES IN CVTUSER\n*\nUSIUSER  DSECT\nUSISTCNM DS     CL8     STC NAME\nUSIREGSA DS     XL4     REGION SIZE ABOVE\nUSIREGLA DS     XL4     REGION LIMIT ABOBE\nUSIFUTR1 DS     XL4     RESERVED FOR FUTURE USE\nUSIFUTR2 DS     XL4     RESERVED FOR FUTURE USE\nUSIFUTR3 DS     XL4     RESERVED FOR FUTURE USE\nUSIFUTR4 DS     XL4     RESERVED FOR FUTURE USE\nUSIUSLEN EQU    *-USIUSER\n*\n*\n*********************************************************************\n*\n*     THIS DSECT MAPS THE TSO USERID ENTRIES IN CVTUSER\n*\nTSOUSER  DSECT\nTSOUSRID DS    CL7    TSO USERID\nTSOUSRNM DS    CL18   TSO DELIVERY STATION AND USER NAME\nTSOUSLEN EQU   *-TSOUSER\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DIF": {"ttr": 3334, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x01\\xd5\\x01\\xd5\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 469, "newlines": 469, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCASM  JOB (X0041,QCC,ASQCC),'X-BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=999\n//* *****************************************************************\n//* *****************************************************************\n//*                                                               ***\n//* TECH.SERV.SOURCE(DI)                                          ***\n//*                                                               ***\n//* THIS IS AN SPF APPLICATION TO DISPLAY THE STATUS OF JES2      ***\n//* INITIATORS.                                                   ***\n//*                                                               ***\n//* *****************************************************************\n//* *****************************************************************\n//*\n//JOBLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR,\n//         UNIT=3380,VOL=SER=MVSTGT\n//*\n//ASM1    EXEC PGM=IEV90,REGION=1024K,\n//        PARM='OBJECT,NODECK,TERM,XREF(SHORT),BATCH'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,\n//         UNIT=3380,VOL=SER=MVSTGT\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR,\n//         UNIT=3380,VOL=SER=MVSDLB\n//         DD  DSN=SYS1.HASPSRC,DISP=SHR,\n//         UNIT=3380,VOL=SER=MVSDLB\n//         DD  DSN=SYS2.MACLIB,DISP=SHR  <== SPFMACS, JDFMACS\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSUT2   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSUT3   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(5,5)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nDIF      TITLE 'DIF - DISPLAY INITIATORS FACILITY'\n         PRINT OFF\n         COPY  $HASPGBL\n         $HASPEQU\n*  NOTE MACROS BELOW ARE REQUIRED TO ASSEMBLE $SVT\n         $XECB\n         $SCAT\n*\n         $SVT\n         $PIT\n         $SJB\n         COPY  SPFMACS\n         PRINT ON\n         PRINT NOGEN\n         TITLE 'DIF - DISPLAY INITIATORS FACILITY'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*               DISPLAY INITIATORS FACILITY (DIF)                     *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: DISPLAY STATUS OF JES2 INITIATORS.                        *\n*                                                                     *\n*                                                                     *\n* FUNCTION: DIF IS DESIGNED TO OPERATE UNDER ISPF USING DISPLAY       *\n*           MANAGEMENT SERVICES. IT PROVIDES A DISPLAY OF THE         *\n*           STATUS OF JES2 INITIATORS, AND FOR AUTHORIZED USERS,      *\n*           THE ABILITY TO START, STOP, AND REFORMAT INITIATORS.      *\n*                                                                     *\n*           DIF LOOKS AT VARIOUS JES2/SP1.3.0 CONTROL BLOCKS.         *\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCE: ISPLINK                                         *\n*                                                                     *\n*                                                                     *\n* MACROS USED: SAVE                                                   *\n*              ABEND                                                  *\n*              RETURN                                                 *\n*              GETMAIN                                                *\n*              STAX                                                   *\n*              ENQ                                                    *\n*              DEQ                                                    *\n*              TPUT                                                   *\n*              FREEMAIN                                               *\n*              $JQE                                                   *\n*              $JOE                                                   *\n*              CVT                                                    *\n*              CVTUSERS (USER)                                        *\n*              TCBWORK  (USER)                                        *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS SPF COMMAND WILL DISPLAY JES2 BATCH INITIATORS,         *\n*        CLASSES ASSIGNED, AND ACTIVE JOBS UNDER THE INITS.           *\n*                                                                     *\n*        CHAINS THROUGH CVT , JESCT BLOCK, SSCT BLOCK,                *\n*        SSVT JES2 BLOCKS AND PIT JES2 BLOCKS TO OBTAIN               *\n*        INITIATOR CLASSES.                                           *\n*        THEN GET SJB FROM PIT TO GET JOBNAMES, USED CLASS.           *\n*                                                                     *\n*        PROGRAM MUST BE ASSEMBLED WITH INPUT LIBRARY DSN             *\n*           CONCATENATING 'SYS1.HASPSRC' SINCE JES2 DSECTS ARE        *\n*              CONTAINED THEREIN.  THIS MEANS IF JES2 MAINTENANCE     *\n*                IS APPLIED, NORMALLY ONLY A RE-ASSEMBLY WILL         *\n*                   BE ALL THAT IS REQUIRED.                          *\n*                                                                     *\n*       NOTE, USE OF THIS ROUTINE IS LIMITED TO THOSE USERS WITH      *\n*       OPERATOR AUTHORITY                                            *\n*                                                                     *\n*       AUGUST 1979,                                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n* NOTE THE FOLLOWING ENTRY POINT LOGIC IS NON-STANDARD. IN PARTICULAR,\n*      IT WILL NOT WORK WITH CALLED PL/I PROGRAMS.\n*\n***********************************************************************\nDIF      CSECT\n         USING *,12\n*\n         SAVE  (14,12),,DIF_08/01/79_BRIAN_COOK_&SYSDATE_&SYSTIME\n*\n         USING CVT,R1        SETUP CVT BASE\n         USING JESCT,R2           SETUP JESCT BASE\n         USING SSCT,R3            SETUP SSCT BASE\n         USING SSVT,R4            SETUP SSVT BASE\n         USING PITDSECT,R5        SETUP PIT BASE\n         USING SJBDSECT,R11       SETUP SJB BASE\n*\n         LR    R12,R15        SET PROGRAM BASE\n         LA    R2,DIFSAVE    SET SAVE AREA AND BASE 1\n         ST    R2,8(R13)      LINK SAVE AREAS\n         ST    R13,4(R2)      SAVE THE CALLER'S R13\n*\n         LR    R13,R2\n*\nINITFLDS DS    0H\n         MVI   ATABFL,C'0'    NO ACTIVE TABLE\n         MVI   DIFLINE,C' '   CLEAR TAB ENTRY AREA\n         MVC   DIFLINE+1(79),DIFLINE\n         XC    ISPARMS(40),ISPARMS\n         VDEFINE DIFLINE,60\n         VDEFINE DIFS,2\n         VDEFINE DIFID,2\n         VDEFINE DIFCL,8\n*\nSHOWAGIN DS    0H\n         BAL   R7,SHOWNIT     DISPLAY THE INITS\n*\nSHOWDONE DS    0H\n*                                  DELETE THE TABLE VARIABLES\n         VDELETE DIFLINE,DIFS,DIFID,DIFCL\n         TBEND   DIFTABLE\n*\n         MVI   ATABFL,C'0'        NO ACTIVE TABLE\n*\n         L     R13,4(R13)     RESTORE THE CALLER'S R13\n         LM    14,12,12(13)   RETURN TO OUR CALLER\n         SR    15,15          SET RC=0\n         BR    14             AND RETURN\n*\nL4096    DC    F'4096'\nDIFSAVE  DC    18F'0'\n*\n         EJECT\nSHOWNIT  DS    0H\n         ST    R7,DIF7HOLD SAVE THE RETURN ADDRESS\n*\n         MVC   DIFS(2),SPACES SET SELECTION CODE TO SPACES\n*\n         CLI   ATABFL,C'0'        DO I HAVE AN ACTIVE TABLE?\n         BE    ANOTAB             NOPE\n*\n         TBEND DIFTABLE\n*\nANOTAB   DS    0H\n*\n         TBCREATE DIFTABLE,DIFS,DIFID,DIFCL,DIFLINE\n*\n         TBVCLEAR DIFTABLE\n*\n         MVI   ATABFL,C'1'        AN ACTIVE TABLE\n*\n*\n         L     R1,16              GET CVT\n         L     R2,296(R1)         GET JESCT    (JES CONTROL TABLE)\n         L     R3,JESSSCT         GET FIRST JES SSCT (SSCVT)\n         L     R4,SSCTSSVT        GET JES SSVT\n         L     R5,$SVPIT          GET PIT ADDR--5.302 JES LOGIC+MAINT\nNEXTPIT  EQU   *                  NOW READY TO WRITE\n         TM    PITSTAT,PITHOLDA   PIT DRAINED $PI ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'DRAINED '  MOVE IN DRAINED STATUS\n         TM    PITSTAT,PITHOLD1   PIT DRAINED $P IN ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'DRAINED '  MOVE IN DRAINED STATUS\n         TM    PITSTAT,PITHALTA   PIT HALTED  $Z I ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'HALTED  '  MOVE IN HALTED  STATUS\n         TM    PITSTAT,PITHALT1   PIT HALTED  $Z IN ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'HALTED  '  MOVE IN HALTED  STATUS\n         TM    PITSTAT,PITINIT    OS INIT EXISTS FOR PIT?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'INACTIVE'  MOVE IN INACTIVE\n         TM    PITSTAT,PITBUSY    PIT BUSY ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'ACTIVE  '  MOVE IN ACTIVE\n         TM    PITSTAT,PITIDLE    PIT IDLE ?\n         BNO   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'IDLE    '  MOVE IN IDLE\n         CLC   STAT,=8C' '        STATUS NOT AVAILABLE ?\n         BNE   *+10               IF NOT CONTINUE\n         MVC   STAT,=C'UNAVAIL '  MOVE IN STATUS NOT AVAIL.\n         CLI   PITPATID,C' '      NULL 1ST CHAR?\n         BNE   IDENTOK            NO, CONTINUE\n         MVC   DIFID(1),PITPATID+1 MOVE IN ID---FORMAT CL1\n         B     IDENTSKP           SKIP NEXT MOVE\nIDENTOK  MVC   DIFID,PITPATID     MOVE ID IN---FORMAT CL2\nIDENTSKP MVC   DIFCL,PITCLASS   MOVE THE INIT CLASSES TO OUTPUT\n*\n*    &MAXCLAS PARAMETER ON GEN LIMITS MAX CLASSES, ABOVE MAY NEED\n*    TO BE CHANGED IF OTHER THAN 8 CLASSES.\n*\n         TM    PITSTAT,PITBUSY    PIT BUSY ?\n         BNO   PRINT              IF NOT CONTINUE\n         L     R11,PITSJB         GET SJB ADDRESS\n         MVC   JOBNAME,SJBJOBNM   GET JOBNAME FROM JOB CARD\n         MVC   UCLASS,SJBJCLAS    GET USED CLASS\n*\n***********************************************************************\n*\n*   ADD THE DETAIL LINE TO THE TABLE\n*\n***********************************************************************\nPRINT    DS    0H\n         TBADD DIFTABLE\n*\n         LTR   R15,R15\n         BNZ   BADADD\n*\n         MVI   DIFLINE,C' '\n         MVC   DIFLINE+1(79),DIFLINE\n*\n*\n         L     R5,PITNEXT         GET NEXT PIT---REFER 5.200 JES2\n         LTR   R5,R5              CHK R5 FOR VALID ADDR\n         BZ    SHOWSCRN           END PROCESS FOR SSCT\n         B     NEXTPIT            GO BACK\n*\nBADADD   DS    0H\n         DC    H'0'        S0C1\n         EJECT\n*\n***********************************************************************\n*\n*   NOW SHOW THE ISPPLIB FORMAT AND THE TABLE ON THE SCREEN\n*\n***********************************************************************\n*\n*\nSHOWSCRN DS    0H\n         TBTOP DIFTABLE\n         TBDISPL DIFTABLE,DIFDATAB,ENDKEY=SHOWDONE\nSHOWSCR2 DS    0H\n*\n***********************************************************************\n*\n*   DETERMINE WHETHER ANYTHING WAS ENTERED ON THE SCREEN\n*\n***********************************************************************\n*\n         C     R15,FZEROS     COMMAND ENTERED/LINE MODIFIED??\n         BNE   DUNWITIT       NOPE\nGOTSTUFF DS    0H\n         MVC   SELSAVE(2),DIFS       SAVE SEL CODE\n         OC    SELSAVE(2),SPACES   UPPER-CASE IT\n         MVC   DIFS(2),SPACES SET SELECTION CODE TO SPACES\n         MVC   INITID(1),DIFID       SAVE INITIATOR ID\n         MVC   NEWCLSS(8),DIFCL      SAVE NEW CLASSES, IF ANY\n         OC    NEWCLSS(8),SPACES   UPPER-CASE IT\n*\n**  CHECK FOR A SELECTION CODE.\n*\n         CLI   SELSAVE,C'P'   IS IT \"PURGE\"\n         BE    PURGE          GO DO IT\n*\n         CLI   SELSAVE,C'S'   IS IT \"START\"\n         BE    START          GO DO IT\n*\n         CLI   SELSAVE,C'T'   IS IT \"CHANGE\"\n         BE    CHANGE         GO DO IT\n*\n* ADD TESTS FOR OTHER LINE SELECTION CODES HERE\n*\n         B     SHOWAGIN       GO REPEAT THE DISPLAY\n         EJECT\nPURGE    DS    0H\n*\n         BAL   R7,TESTAUTH    CHECK AUTHORIZATION\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(71),CMDLINE\n         MVC   CMDLINE(3),=C'$PI'\n         MVC   CMDLINE+3(1),INITID     INITIATOR ID\n*\n         LA    R0,1             SET AUTH ON\n         SVC   235\n*\n         MODESET KEY=ZERO,MODE=SUP\n         SLR   R0,0                    CLEAR REG 0\n         LA    R1,CMDISMF             GET ADDRESS OF COMMAND I SMF\n         SVC   34                      ISSUE COMMAND VIA SVC 34\n         MODESET KEY=NZERO,MODE=PROB\n*\n         SR    R0,0             SET AUTH OFF\n         SVC   235\n*\n         B     SHOWAGIN       GO REPEAT THE SCREEN\n*\n         EJECT\nSTART    DS    0H\n*\n         BAL   R7,TESTAUTH    CHECK AUTHORIZATION\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(71),CMDLINE\n         MVC   CMDLINE(3),=C'$SI'\n         MVC   CMDLINE+3(1),INITID     INITIATOR ID\n*\n         LA    R0,1             SET AUTH ON\n         SVC   235\n*\n         MODESET KEY=ZERO,MODE=SUP\n         SLR   R0,0                    CLEAR REG 0\n         LA    R1,CMDISMF             GET ADDRESS OF COMMAND I SMF\n         SVC   34                      ISSUE COMMAND VIA SVC 34\n         MODESET KEY=NZERO,MODE=PROB\n*\n         SR    R0,0             SET AUTH OFF\n         SVC   235\n*\n         B     SHOWAGIN       GO REPEAT THE SCREEN\n*\n         EJECT\nCHANGE   DS    0H\n*\n         BAL   R7,TESTAUTH    CHECK AUTHORIZATION\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(71),CMDLINE\n         MVC   CMDLINE(3),=C'$TI'\n         MVC   CMDLINE+3(1),INITID     INITIATOR ID\n         MVI   CMDLINE+4,C','          MOVE IN A COMMA\n         MVC   CMDLINE+5(8),NEWCLSS   NEW CLASSES\n*\n         LA    R0,1             SET AUTH ON\n         SVC   235\n*\n         MODESET KEY=ZERO,MODE=SUP\n         SLR   R0,0                    CLEAR REG 0\n         LA    R1,CMDISMF             GET ADDRESS OF COMMAND I SMF\n         SVC   34                      ISSUE COMMAND VIA SVC 34\n         MODESET KEY=NZERO,MODE=PROB\n*\n         SR    R0,0             SET AUTH OFF\n         SVC   235\n*\n         B     SHOWAGIN       GO REPEAT THE SCREEN\n*\nCMDISMF  DC    Y(76),Y(00)\nCMDLINE  DC    CL72'I SMF' COMMAND SVC 34 INPUT\n*\n*\n         EJECT\n*\nTESTAUTH DS    0H\n         ST    R7,AUTHHOLD    SAVE  RETURN ADDRESS\n*\n         L     R1,16              GET CVT POINTER\n         L     R1,0(R1)           OLD/NEW POINTER\n         L     R1,4(R1)           OUR TCB POINTER\n         L     R15,12(R1)         OUR TIOT POINTER\n         CLI   0(R15),C'A'        IS THIS SYSTEMS USER?\n         BE    IAMAUTH            YUP, AUTHORIZED\n         L     R1,180(R1)         JSCB POINTER\n         L     R1,264(R1)         PSCB POINTER\n         TM    16(R1),X'80'       DO WE HAVE OPER ABILITY?\n         BO    IAMAUTH            YES, CONTINUE\nNOTAUTH  DS    0H\n*\n         SETMSG DIF001\n*\n         B     SHOWDONE       ALL DONE\n*\nIAMAUTH  DS    0H\n         L     R7,AUTHHOLD    SAVE  RETURN ADDRESS\n         BR    R7             RETURN TO OUR CALLER\n         EJECT\n*\n*\nDUNWITIT DS    0H\n         L     R7,DIF7HOLD     RESTORE  RETURN ADDRESS\n         BR    R7             RETURN TO OUR CALLER\n         TITLE 'MISCELLANEOUS CONSTANTS'\n         PRINT NOGEN\n         LTORG\n*\n         DS    0F\nDIF7HOLD DS    F\nOUT7HOLD DS    F\nAUTHHOLD DS    F\n*\n*\nFZEROS   DC    F'0'\nF8       DC    F'8'\n*\n*\nSPACES   DC    CL80' '\n*\n*\n*\n         TITLE 'WORKING STORAGE AREAS'\n*\nISPARMS  DS    10F            PARM LIST FOR ISPLINK\n*\n*     THE ISP TABLE FLAGS INDICATE NO ACTIVE TABLE (0), OR ONE EXISTS\nATABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY ACTIVE\" TABLE\n*\n*\nDIFLINE  DS    0CL80\nSTAT     DC    CL8' ',CL3' '\nJOBNAME  DC    CL8' ',CL1' '\nUCLASS   DC    CL1' ',CL11' ' (PAD)\n         DS    CL52\nDIFS     DC    CL2' '\nDIFID    DC    CL2' '\nDIFCL    DC    CL8' '\n*\nSELSAVE  DS    CL2            LINE SELECTION CODE SAVE AREA\nNEWCLSS  DS    CL8            NEW INIT CLASSES SAVE AREA\n*\nINITID   DS    CL1            JOBNAME SAVE AREA\n         CVT   DSECT=YES\n         IEFJESCT\n         IEFJSCVT\n         END\n/*\n//LKED1    EXEC PGM=HEWLH096,PARM=(XREF,LET,LIST,TERM),\n//            COND=(2,LT,ASM1),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DISP=SHR,DSN=ISP.V2R2M0.ISPLOAD,\n//         UNIT=3380,VOL=SER=MVSTGT\n//*YSLMOD  DD   DISP=SHR,DSN=SYS2.LINKLIB\n//SYSLMOD  DD   DISP=SHR,DSN=SYS2.CMDLIB\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  NAME DIF(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DIFDATAB": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  @  TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%---------------DISPLAY INITIATORS  FACILITY (DIF) -----------------------------\n COMMAND ==>_NCMD                                               %SCROLL =>_AMT %\n &OLDCMD                                                                      +\n%CMD  ID CLASSES  STAT       JOBNAME  CL\n)MODEL\n _Z  @Z _Z       @Z\n)INIT\n .CURSOR=NCMD\n  &AMT=PAGE\n  &NCMD=RPT\n  &PIKN=' '\n  &VARS='(DIFS DIFID DIFCL DIFLINE)'\n  .HELP=DIFHELP\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DIFHELP": {"ttr": 3587, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "CBT353"}, "text": "%------------------DISPLAY INITIATORS FACILITY (DIF)  -------------------------+\n%NEXT SELECTION ===>%SELECT                             &+\n%                     |          D  I  F                |\n                      -----------------------------------\n + DIF DISPLAYS THE STATUS OF ALL DEFINED JES2 INITIATORS. COMMANDS\n   CAN BE ENTERED IN THE %CMD+ COLUMN TO AFFECT INDIVIDUAL INITS:\n\n  %P+  PURGE THE INITIATOR\n  %S+  START THE INITIATOR\n  %T+  CHANGE THE INITIATOR CLASSES. THE NEW CLASSES (UP TO 8)\n       SHOULD BE TYPED OVER THE EXISTING CLASSES.\n\n\n%NOTE:+THE CHANGE COMMANDS REQUIRE AUTHORIZATION.\n\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ETPS": {"ttr": 3589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x15@\\x15@\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 5440, "newlines": 5440, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCETP JOB (X0041,QCC,ASQCC),'X-COOK, BRIAN',\n//   MSGCLASS=X,CLASS=X,NOTIFY=ASQCC,MSGLEVEL=(1,1)\n/*JOBPARM L=99,SYSAFF=MVSA\n//*\n//* TECH.ARCHIVE.SOURCE  (ETPS)\n//*\n//ASM     EXEC PGM=IEV90,REGION=1024K,\n//             PARM='TERM,NODECK,OBJECT,XREF(SHORT),RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DISP=SHR,DSN=SYS2.MACLIB  <== TCBUVTAM, ETPSMACS\n//SYSUT1   DD  SPACE=(CYL,(5,1)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nETPS24   TITLE 'ETPS - WARNING     '\n***********************************************************************\n**                                                                   **\n**   W A R N I N G ! ! ! ! ! !                                       **\n**                                                                   **\n**   W A R N I N G ! ! ! ! ! !                                       **\n**                                                                   **\n**   W A R N I N G ! ! ! ! ! !                                       **\n**                                                                   **\n**                                                                   **\n**   THIS PROGRAM SHOULD BE TESTED DURING STANDALONE TIME ONLY.      **\n**                                                                   **\n**   THIS PROGRAM IS AUTHORIZED AND MODIFIES KEY 0 MEMORY IN THE     **\n**   NUCLEUS.                                                        **\n**                                                                   **\n**   YOU SHOULD NOT ATTEMPT TO EDIT ANY LIBRARY UNLESS YOU HAVE      **\n**   ADEQUATE BACKUP.                                                **\n**                                                                   **\n**   USE AT YOUR OWN RISK. NO WARRANTY IS EXPRESSED OR IMPLIED.      **\n**                                                                   **\n**                                                                   **\n**   W A R N I N G ! ! ! ! ! !                                       **\n**                                                                   **\n**   W A R N I N G ! ! ! ! ! !                                       **\n**                                                                   **\n**   W A R N I N G ! ! ! ! ! !                                       **\n**                                                                   **\n**                                                                   **\n***********************************************************************\n         TITLE 'ETPS - CHANGE LOG  '\n***********************************************************************\n**                                                                   **\n**  4/02/87  BRIAN COOK   ADDED DSUNIT FOR ALLOCATION OF MEMBER,     **\n**                        PER CARL GELBART, PACIFIC MUTUAL.     PML  **\n**                                                                   **\n** 11/21/86  CHANGED DEFAULT UNIT TO \"SYSALLDA\" BRIAN COOK      MNP  **\n**                                                                   **\n** 11/10/86  VERSION 2.4. ENHANCEMENTS TO THE   BRIAN COOK      MNP  **\n**           IDCAMS INTERFACE:                                       **\n**                                                                   **\n**           1. INCREASED NUMBER OF INPUT COMMAND DATA               **\n**              LINES FROM 1 TO 5 TO ALLOW FOR MORE                  **\n**              VERBOSE COMMANDS, SUCH AS \"DEFINE PAGESPACE\".        **\n**           2. ALLOW SCROLLING UP AND DOWN IN THE                   **\n**              OUTPUT USING PF7/PF8.                                **\n**                                                                   **\n**           ALSO ADDED SOME HELP SCREENS.                           **\n**                                                                   **\n** 11/06/86  OPEN PROBLEM NOTED.                BRIAN COOK      MNP  **\n**           ON THE EDIT AND BROWSE SCREENS, WHEN IN SPLIT-SCREEN    **\n**           MODE ON THE BOTTOM SCREEN, THE CURSOR IS PLACED 1       **\n**           CHARACTER TO THE LEFT OF THE \"DSNAME\" INPUT FIELD.      **\n**           THE PDS, IDCAMS, AND PRIMARY OPTION MENU WORK OK!!!!!   **\n**                                                                   **\n** 11/03/86  LIB  ROUTINE IGNORING VOLSER,      BRIAN COOK      MNP  **\n**           RESULTING IN EDIT-SAVE INTO A CATALOGED                 **\n**           PDS INSTEAD OF AN UNCATALOGED ONE SELECTED              **\n**           BY SPECIFIC VOLSER. MINOR OVERSIGHT,                    **\n**           THANKS, OKLAHOMA STATE.                                 **\n**                                                                   **\n**   7/7/86  ADDED BACK I/O ATTENTION EXIT,     W.A.M.         VCCS  **\n**           FOR TUBE I/O.                                           **\n**                                                                   **\n**                                                                   **\n**           PERSONALLY, I CAN'T GET THIS TO WORK AT ALL,  BC  MNP   **\n**           SO I HAVE SET UP \"EXCPFLG1\" AND \"EXCPFLG2\"              **\n**           THAT CAN BE SET TO NON-ZERO IF ANYONE                   **\n**           WANTS TO TRY TO DEBUG THIS. THE ERROR I GET             **\n**           IS AN S0C4 IN IECVPST. IT APPEARS THAT THE              **\n**           ATTENTION EXIT GETS CONTROL IN AMODE 24, BUT            **\n**           THE RETURN ADDRESS IS A 31-BIT ADDRESS.                 **\n**                                                                   **\n**                                                                   **\n**                                                                   **\n**  6/25/86  VERSION 2.3. ENHANCEMENTS TO THE   BRIAN COOK      MNP  **\n**           PDS INTERFACE:                                          **\n**                                                                   **\n**           1. COMPRESS OPTION                                      **\n**           2. MEMBER SELECTION \"HELP\" PANEL                        **\n**           3. MEMBER SELECTION OPTIONS FOR                         **\n**              BROWSE, EDIT, RENAME, DELETE,                        **\n**              AND COPY                                             **\n**                                                                   **\n**           ALSO FIXED BUGS IN THE SBA CALC,                        **\n**           AND REMOVED THE MENU HIERARCHY LOGIC.                   **\n**                                                                   **\n**  1/21/86  3279-2C WORKS SAME AS 3278-2A      WAYNE MITCHELL  VCCS **\n**                                                                   **\n** 12/17/85  REMOVED ALMOST ALL OF THE EXCP     BRIAN COOK      MNP  **\n**           LOGIC FOR TERMINAL I/O, DUE TO                          **\n**           ABEND'S AFTER INSTALLING 1.3.3.                         **\n**                                                                   **\n**           WITHOUT THE ATTENTION EXIT, ETPS JUST                   **\n**           LOOPS AROUND A 2-SECOND \"STIMER\", SO                    **\n**           THE TERMINAL RESPONSE TIME IS VERY                      **\n**           SLUGGISH.                                               **\n**                                                                   **\n**                                                                   **\n**  4/24/85  ADDED OPTION 4.1, FOREGROUND       BRIAN COOK      MNP  **\n**           INVOKATION OF IDCAMS. MODULE IS                         **\n**           \"ETPSIDC2\".                                             **\n**                                                                   **\n**  4/09/85  INCORPORATED CHANGES FOR 3278-2A   BRIAN COOK      MNP  **\n**           SUPPORT, REDUCED LOGON SCREEN TO                        **\n**           20 LINES, ALLOW \"CAN\" AS ABBREVIATION                   **\n**           FOR EDIT \"CANCEL\".                                      **\n**                                                                   **\n**           CHANGES PROVIDED BY WAYNE MITCHELL,      W.A.M.   VCCS  **\n**           VIRGINIA COMMUNITY COLLEGE SYSTEM.                      **\n**                                                                   **\n**  4/04/85  REVISED DSECTS, MADE INTO MACRO    BRIAN COOK      MNP  **\n**           CALLS. ALSO SPLIT OUT EDITOR                            **\n**           MODULE, ETPSEDT3, AND BROWSE,                           **\n**           ETPSBRO3.                                               **\n**                                                                   **\n**  9/27/84  VERSION 2.1 -- ADDED TSO MODE      BRIAN COOK      MNP  **\n**           AND DSECT FOR NATIVE VTAM. SEE                          **\n**           PROGRAM \"ETPSTSO\" FOR DOC ON                            **\n**           RUNNING UNDER TSO. VTAM CONTROL                         **\n**           PROGRAM WILL BE DEVELOPED ONE OF                        **\n**           THESE DAYS.                                             **\n**                                                                   **\n**  6/20/84  ADDED BROWSE PROCESSING, VERSION   BRIAN COOK      MNP  **\n**           1.1 FLAG ON LOGON/PRIMARY MENUS. THE                    **\n**           BROWSE MODULE IS BASED ON \"REVIEW\",                     **\n**           BY BILL GODFREY. IT HAS BEEN MUCH                       **\n**           MODIFIED TO RUN UNDER ETPS, AND                         **\n**           HAS ALSO BEEN ENHANCED TO SUPPORT                       **\n**           BROWSING DSID'S DIRECTLY ON THE                         **\n**           JES2 SPOOL. (USES MODIFIED UAL SVC.)                    **\n**                                                                   **\n**           (THE JES2 BROWSE IS FOR A POSSIBLE                      **\n**           FUTURE ENHANCEMENT.)                                    **\n**                                                                   **\n**  6/11/84  ADDED RETURN CODE TEST AFTER       BRIAN COOK      MNP  **\n**           GETMAIN FOR ATTENTION EXIT.                             **\n**                                                                   **\n**  5/16/84  ADDED SPF STATS SUPPORT.           BRIAN COOK      MNP  **\n**                                                                   **\n**  4/19/83  ADDED BYPASS OF LOGON PANEL FOR EMERGENCY USE. IF ETPS  **\n**           IS INVOKED WITH A PARM BEGINNING WITH THE LETTERS \"OP\", **\n**           A LOGON IS NOT REQUIRED.           BRIAN COOK       MNP **\n**                                                                   **\n**  6/10/83  CHANGED TUBE IO TO EXCP.           BRIAN COOK      MNP  **\n**                                                                   **\n**  6/11/83  ADDED UPDATE-IN-PLACE LOGIC FOR    BRIAN COOK      MNP  **\n**           PDS MEMBERS THAT ARE EDITED AND                         **\n**           SAVED. IF THE NUMBER OF CARDS IS                        **\n**           THE SAME BEFORE AND AFTER THE                           **\n**           EDIT, AN UPDATE-IN-PLACE IS DONE.                       **\n**           THIS SHOULD REDUCE THE POSSIBILITY                      **\n**           OF X37 ABENDS.                                          **\n**                                                                   **\n**  6/23/83  ADDED \"COPY-AFTER\"   TO EDIT       BRIAN COOK      MNP  **\n**                                                                   **\n**  8/01/83  ADDED SPLIT-SCREEN LOGIC           BRIAN COOK      MNP  **\n**                                                                   **\n** 12/05/83  RENAMED TO ETPS, ADDED \"ET\" LOGO.  BRIAN COOK      MNP  **\n**                                                                   **\n***********************************************************************\n         TITLE 'ETPS - EMERGENCY TELE-PROCESSING SYSTEM'\n***********************************************************************\n**                                                                   **\n**             E  T  P  S                                            **\n**                                                                   **\n***********************************************************************\n**                                                                   **\n** FUNCTION-                                                         **\n**                                                                   **\n** THIS PROGRAM IS INTENDED TO PROVIDE EMERGENCY TELE-PROCESSING     **\n** SERVICES WHEN THE NORMAL SUBSYSTEMS SUCH AS JES2, VTAM, TCAM, ETC **\n** ARE NOT AVAILABLE. IT IS INTENDED TO BE INVOKED AS A STARTED TASK **\n** OR A BATCH JOB. IT CAN ALSO BE INVOKED AS A TSO COMMAND PROCESSOR **\n** USING A FRONT-END MODULE, \"ETPSTSO\".                              **\n**                                                                   **\n** IF YOU WANT TO INVOKE IT AS A SUB-SYSTEM WHEN JES2 IS NOT UP, YOU **\n** MUST ADD A SUB-SYSTEM DEFINITION.                                 **\n**                                                                   **\n**                                                                   **\n** PARM -                                                            **\n**                                                                   **\n** THIS PROGRAM MUST BE INVOKED WITH A STANDARD EXECUTE-CARD FORMAT  **\n** PARM. THE LENGTH MUST BE 8 BYTES, AS FOLLOWS:                     **\n**                                                                   **\n**    1. THE FIRST 4 CHARACTERS MUST BE \"ETPS\" OR \"OPER\".            **\n**                                                                   **\n**    2. THE 5TH BYTE IS TERMINAL TYPE. VALID TERMINAL TYPES ARE:    **\n**                                                                   **\n**            A = 3278-2A OR 3279-2C (20-LINE TERMINAL)              **\n**            2 = 3278 MODEL 2                                       **\n**            3 = 3279 MODEL 3B                                      **\n**            4 = 3278 MODEL 4                                       **\n**                                                                   **\n**    3. THE LAST 3 BYTES MUST BE THE UNIT ADDRESS OF THE TERMINAL.  **\n**                                                                   **\n** AS AN EXAMPLE, //STEP1  EXEC  PGM=ETPS,PARM='ETPS49C4' STARTS     **\n** TIME-SHARING ON A LOCAL 3278  MOD 4 AT ADDR 9C4.                  **\n**                                                                   **\n**                                                                   **\n** TO INVOKE AS A TSO COMMAND PROCESSOR, THE PARAMETER MUST BE:      **\n**                                                                   **\n**        DC    H'8',CL8'TSO'                                        **\n**                                                                   **\n**                                                                   **\n** DOC-                                                              **\n**                                                                   **\n** REFER TO ETPS$ FOR FURTHER DOCUMENTATION.                         **\n**                                                                   **\n***********************************************************************\n         TITLE 'ETPS - EMERGENCY TELE-PROCESSING SYSTEM'\n         PRINT OFF\n         COPY ETPSMACS\n         PRINT ON\nETPS     CSECT\n*\n         PRINT NOGEN\n*\n         USING *,12,11,9\n         USING MYSAVE,13,10\n*\n         STM   R14,R12,12(R13)    SAVE INPUT REGS\n         LR    R12,R15            SET PROGRAM BASE REGISTER 1\n         L     R2,0(,R1)          SAVE PARM POINTER\n         B     PROLOG\nSYSNAME  DC    C'ETPS     -  BRIAN COOK &SYSDATE &SYSTIME'\nPROLOG   DS    0H\n         L     R9,GETSIZE        GET SAVE AREA LENGTH\n         SRL   R9,12             ROUND UP TO 4K BOUNDARY\n         LA    R9,1(,9)          ROUND UP TO 4K BOUNDARY\n         SLL   R9,12             ROUND UP TO 4K BOUNDARY\n         GETMAIN R,LV=(9)        GET MY SAVE AREA\n         LR    R8,R1             SAVE GETMAIN POINTER\n         ST    R8,8(R13)         STORE FORWARD POINTER\n         LR    R5,R13            SAVE BACKWARDS POINTER\n         LR    R13,R8            SET DSECT BASE 1\n*\n         LR    R4,R9             SAVE THE LENGTH FOR FREEMAIN\n*\n         MVI   0(R8),X'00'       SET BINARY ZEROS\n         LA    R14,1(,R8)\n         LR    R15,R9            LENGTH FOR MVCL\n         BCTR  R15,0             RECEIVING FIELD IS 1 LESS\n         MVCL  R14,R8        CLEAR BUFFER\n*\n         ST    R5,4(,R13)        STORE BACKWARDS POINTER\n         ST    R13,SAVETOP       SAVE THE START ADDRESS\n         LA    R3,1\n         LA    R11,4095(R3,R12)   SET PROGRAM BASE REGISTER 2\n         LA    R9,4095(R3,R11)    SET PROGRAM BASE REGISTER 3\n         LA    R10,4095(R3,R13)   SET DSECT BASE 2\n         ST    R4,FREESIZE       SAVE THE LENGTH FOR FREEMAIN\n*\nRE       EQU   14\nRF       EQU   15\n         TITLE 'ETPS - MAINLINE PROCESSING LOOP'\n*\nMAIN     DS    0H\n         BAL   R14,INIT\nALOGON   DS    0H\n         BAL   R14,LOGON\n*\n         CLC   3(3,R3),=CL3'EOJ'     ALL DONE?\n         BE    CLOSETB               GO CLOSE DOWN\n*\n         BAL   R14,PRIOPT\n*\n         CLC   TUBEID(2),=C'OP'  IS IT OPERATOR\n         BNE   ALOGON            NO, NO AUTOMATIC LOGOFF\n*\n*\nCLOSETB  DS    0H\n*\n         CLC   TUBEDDNM(4),=C'VTAM'    VTAM     TERMINAL\n         BE    RETRNEND          YES\n*\n         CLC   TUBEDDNM(3),=C'TSO'     VTAM     TERMINAL\n         BE    RETRNEND          YES\n*\n         LA    R2,TUBE\n         MVI   PARMOP,128\n         CLOSE ((2)),MF=(E,PARMOP)\n* DE-ALLOCATE TUBE\nFREETUBE DS    0H\n         MVI   VERBCODE,2       SET TO INDICATE UNALLOCATE\n         OI    DYNTEXT1,X'80'   DDNAME ONLY\n         LA    R1,DYNPARM\n         DYNALLOC\n*\n         LTR   R15,15\n         BNZ   WTOMS4\n*\nRETRNEND DS    0H\n         LR    R11,R13\n         L     R9,FREESIZE\n         L     R13,4(,R13)  PICK UP CALLING SAVE AREA\n         FREEMAIN R,LV=(9),A=(11)\n         LM    R14,R12,12(R13)\n         SR    R15,15\n         BR    R14\n         TITLE 'ETPS - INITIALIZATION'\n*\nINIT     DS    0H\n         ST    R14,INIT14\n*\n* PLUG COMM ROUTINE ADDRESSES INTO DSECT\n*\n         MVC   COMMA3(4),=A(COMM3)\n         MVC   COMMA4(4),=A(COMM4)\n*\n* INITIALIZE SAVE AREAS FOR SPLIT-SCREEN\n*\n         MVC   SPLIT1(72),0(R13)\n         MVC   SPLIT2(72),0(R13)\n*\n* DETERMINE OPERATING ENVIRONMENT\n*\n         MVC   TUBEDDNM(8),2(R2) MOVE IN ENVIRONMENT INDICATOR\n*\n         CLC   TUBEDDNM(2),=C'OP'      OPERATOR TERMINAL\n         BE    INITEXCP          YES\n*\n         CLC   TUBEDDNM(4),=C'ETPS'    USER     TERMINAL\n         BE    INITEXCP          YES\n*\n         CLC   TUBEDDNM(4),=C'VTAM'    VTAM     TERMINAL\n         BE    INITVTAM          YES\n*\n         CLC   TUBEDDNM(3),=C'TSO'     VTAM     TERMINAL\n         BE    INITVTAM          YES\n*\n         WTO   'INVALID PARM',ROUTCDE=2,DESC=(2)\n         DC    H'0'\n*\n*\nINITEXCP DS    0H\n*\n* ALLOCATE TUBE\n*\n         MVC   DYNRB(DYNLENG),CONRB\n*\n         LA    R1,DYNDDNAM\n         ST    R1,DYNTEXT1\n*\n         LA    R1,DYNDISP\n         ST    R1,DYNTEXT2\n*\n         LA    R1,DYNUNIT\n         ST    R1,DYNTEXT3\n         OI    DYNTEXT3,X'80'\n*\n         LA    R1,DYNTEXT1\n         ST    R1,TEXTPTRS\n*\n         LA    R1,DYNRB\n         ST    R1,DYNPARM\n         OI    DYNPARM,X'80'\n*\n* PICK UP PARM = DDNAME\n*\n         LA    R1,8\n         CH    R1,0(,R2) IF PARM LENGTH IS NOT = 8\n         BNE   WTOMS1       SHUT IT DOWN\n*\n         MVC   TUBEDDNM(8),2(R2) MOVE IN DDNAME FOR DYNALLOC\n         MVC   TUBEID(8),2(R2)   ALSO SAVE IT\n         MVC   UNITADDR(3),7(R2) MOVE IN UNIT ADDRESS\n*\n         MODESET KEY=ZERO,MODE=SUP\n         LA    R1,DYNPARM\n         DYNALLOC\n         LR    R5,R15\n         MODESET KEY=NZERO,MODE=PROB\n*\n         LTR   R15,R5\n         BNZ   WTOMS2\n*\n         CLC   2(2,R2),=C'OP'    IS IT OPERATOR TERMINAL\n         BE    *+14              YES, LET IT GO\n         CLC   2(4,R2),SYSNAME   SYSTEM NAME\n         BNE   WTOMS5       SHUT IT DOWN\n*\n         MVI   PERMERR,0                FIRST TIME THROUGH\n*\n         MVI   PFKFLAG,0                NOT A PFK/ATTN\n*\n*\nINITVTAM DS    0H\n*\n         MVC   SUPRMOD(SMODLEN),SMOD\n         MVC   PROBMOD(PMODLEN),PMOD\n*\n         MVI   USUALWCC,X'C3'           NO ALARM\n         MVI   ALARMWCC,X'C7'           ALARM\n*\n         L     R1,=A(BUFF3278)          3278 SBA CODES\n         ST    R1,SBACODES              SET DEFAULT\n         MVI   SBACODE,X'11'            DEFAULT SBA\n*\n         CLC   TUBEDDNM(4),=C'VTAM'    VTAM     TERMINAL\n         BE    SETSCVTM          YES\n*\n         CLC   TUBEDDNM(3),=C'TSO'     TSO      TERMINAL\n         BE    SETSCTSO          YES\n*\n         MVI   WRITECC,X'0D'     SET ERASE/WRITE ALTERNATE\n         CLI   TUBEID+4,C'3'     IS IT A MOD3\n         BE    ITSMOD3              GO SET IT\n         CLI   TUBEID+4,C'4'     IS IT A MOD4\n         BE    ITSMOD4              GO SET IT\n*\n         MVI   WRITECC,5         SET DEFAULT COMMAND CODE  W.A.M.\n*\n         CLI   TUBEID+4,C'A'     IS IT A 3278-2A           W.A.M.\n         BE    ITSMOD2A             SET 20 LINES           W.A.M.\n*                                ASSUME 3278-2\n         LA    R1,1920           DEFAULT BUFF SIZE\n         ST    R1,SCREENSZ       SET IT\n         LA    R15,24            DEFAULT NUMBER OF ROWS\n         ST    R15,SCROWS        SET IT\n*\n         B     SETSCRSZ             USE DEFAULT\n*\nSMOD     MODESET KEY=ZERO,MODE=SUP,MF=L\nSMODLEN  EQU   *-SMOD\nPMOD     MODESET KEY=NZERO,MODE=PROB,MF=L GET BACK IN PROB STATE\nPMODLEN  EQU   *-PMOD\nITSMOD3  DS    0H\n         LA    R1,2240           MOD 3 BUFF SIZE\n         ST    R1,SCREENSZ       SET IT\n         LA    R15,28            DEFAULT NUMBER OF ROWS\n         ST    R15,SCROWS        SET IT\n         B     SETSCRSZ          ALL SET\n*\nITSMOD4  DS    0H\n         LA    R1,3440           MOD 4 BUFF SIZE\n         ST    R1,SCREENSZ       SET IT\n         LA    R15,43            DEFAULT NUMBER OF ROWS\n         ST    R15,SCROWS        SET IT\n         B     SETSCRSZ          ALL SET\n*\nITSMOD2A DS    0H                                         W.A.M.\n         LA    R1,1600           MOD 2A BUFF SIZE         W.A.M.\n         ST    R1,SCREENSZ       SET IT                   W.A.M.\n         LA    R15,20            DEFAULT NUMBER OF ROWS   W.A.M.\n         ST    R15,SCROWS        SET IT                   W.A.M.\n         B     SETSCRSZ          ALL SET                  W.A.M.\n*\nSETSCVTM DS    0H\n*\n         USING PSA,0\n         L     R1,PSATOLD        PICK UP TCB\n         USING TCB,1\n         L     R1,TCBUSER        TCBUSER FIELD\n         USING TCBUVTAM,1\n*\n         SR    R15,R15\n         IC    R15,TCBUROWS\n         ST    R15,SCROWS        SET IT\n         ST    R15,SCROWS1       SET IT\n         IC    R15,TCBUCOLS\n         MH    R15,SCROWS+2\n         ST    R15,SCREENSZ      SET IT\n*\n         XC    SCROWS2(4),SCROWS2\n         MVC   ROWFILL(8),DUMMYROW\n         B     INITBUF\n*\nSETSCTSO DS    0H\n*\n         GTSIZE\n*\n         LTR   R15,R15\n         BNZ   TSOBAD1\n*\n         ST    R0,SCROWS        SET IT\n         ST    R0,SCROWS1       SET IT\n         MH    R1,SCROWS+2\n         ST    R1,SCREENSZ      SET IT\n*\n         XC    SCROWS2(4),SCROWS2\n         MVC   ROWFILL(8),DUMMYROW\n*\n TPUT ERASE,14,FULLSCR\n         B     INITBUF\n*\nERASE DC X'C1115D7E1140403C4040001DC813'\nTSOBAD1  DS    0H\n*\n         WTO   'GTSIZE FAILED',ROUTCDE=2,DESC=(2)\n         DC    H'0'\n*\nSETSCRSZ DS    0H\n         MVC   SCROWS1(4),SCROWS\n         XC    SCROWS2(4),SCROWS2\n*\n         MVC   ROWFILL(8),DUMMYROW\n*\n*\nOPENTUBE DS    0H\n*\n* OPEN TUBE\n         MVC   TUBE(56),TINIT\n         MVC   TUBE+40(8),TUBEDDNM MOVE IN DDNAME\n* SET IOB ADDRESS\n         LA    R2,TUBEIOB        SET IOB ADDRESS\n         STCM  R2,7,TUBE+29                       IN THE DCB\n         LA    R2,TUBE           GET DCB ADDRESS\n*\n         MVI   PARMOP,128\n         OPEN  ((2)),MF=(E,PARMOP)\n*\n         TM    48(R2),X'10'      GOOD OPEN\n         BZ    WTOMS7            NOPE\n*\n** ALL THIS STUFF IS SETTING UP THE ETPS ACCESS METHOD FOR TUBE I/O\n*\n         CLI   EXCPFLG1,0            ETPS ACCESS METHOD\n         BE    ETPSEXCP              NO\n*\n         L     R3,44(,R2) GET DEB ADDRESS\n         LA    R3,0(,3)  CLEAR LEFT BYTE\n         MODESET MF=(E,SUPRMOD)\n*                                         BECOME NON-SWAPPABLE\n         LRA   R1,0(,R3)  GET REAL ADDRESS OF DEB\n         ST    R1,DEBADDR  SAVE IT\n         MVI   DEBADDR,X'01'  DEVICE INDEX\n         L     R6,X'20'(,R3)      LOAD THE UCB ADDRESS FOR THE TUBE\n         ST    R6,UCBADDR         SAVE THE UCB ADDRESS FOR TUBE-READ\n         USING UCBCMSEG,6\n         MVC   UCBCTLNK(4),DEBADDR    MOVE IN DEB ADDRESS (REAL)\n         MVI   UCBATNCT,0             CLEAR ATTENTION COUNT\n         MVI   UCBATNCT+1,X'06'       TURN ON SKIP FLAG, RI PENDING\n         MVI   UCBIRBA+2,X'01'        SET IRB ADDRESS TO NON-ZERO\n         L     R4,UCBEXTPT            UCB EXTENSION\n         USING UCBCMEXT,4\n*\n* SET ATTENTION EXIT. X'08' IS DESIGNATED FOR PROGRAM PRODUCTS.\n*\n         USING PSA,0\n         L     1,FLCCVT          CVT POINTER\n         USING CVT,1\n         L     1,CVTIXAVL        IOS COMM ADDRESS\n         USING IOCOM,1\n         L     1,IOCATTBL        ATTENTION TABLE\n         LA    R1,ATBLEN(,1)     BUMP TO X'08' SECOND ENTRY\n         LA    R2,ATBLEN(,1)     BUMP TO X'10' THIRD ENTRY, OURS\n         USING ATB,2\n*\n         CLC   ATBRTN(4),=X'00000000'  NO ROUTINE\n         BE    GOTATB                  YUP, USE THIS ONE\n*\n         LA    15,ATXTLEN     PICK UP SIZE OF CSECT\n         BCTR  15,0           SUBTRACT ONE FOR EX INSTRUCTION    W.A.M.\n         L     14,=A(ETPSATEN)\n         L     R1,ATBRTN\n         EX    15,ATXTCLC\n         BE    UCBATION\n*        DC    H'0'                    JUST ABEND, CAN'T FIND ATB\n*\nGOTATB   DS    0H\n*\n         LA    R0,ATXTLEN+80  PICK UP SIZE OF CSECT\n         GETMAIN RU,LV=(0),SP=228\n         ST    R1,ATBRTN\n         LA    15,ATXTLEN     PICK UP SIZE OF CSECT\n         BCTR  15,0           SUBTRACT ONE FOR EX INSTRUCTION    W.A.M.\n         L     14,=A(ETPSATEN)\n         EX    15,ATXTMVC\n         B     UCBATION\n*\nATXTMVC  MVC   0(1,R1),0(R14)\nATXTCLC  CLC   0(1,R1),0(R14)\nEXCPFLG1 DC    X'00'     0=STRAIGHT EXCP, 1=ETPS ACCESS METHOD\nUCBATION DS    0H\n         MVI   UCBATI,X'08'          ETPSATEN\n         XC    UCBRDYQ(4),UCBRDYQ    CLEAR ECB\n         DROP  6\n         DROP  4\n         MODESET MF=(E,PROBMOD)\n*\nETPSEXCP DS    0H\n*\n** END OF ETPS ACCESS METHOD SETUP\n*\n         XC    RECB(4),RECB   CLEAR ECB\n         OI    RECB,X'40'        INIT RECB TO POSTED\n* INITIALIZE IOB\n         MVC   TUBEIOB(40),IOBLANK\n         LA    R2,TUBE           SET DCB ADDRESS\n         ST    R2,TUBEIOB+20                      IN THE IOB\nINITBUF  DS    0H\n* SET SCREEN BUFFER ADDRESSES\n         L     R1,SCRNOFFA\n         AR    R1,R13\n*        LA    R1,SCREENIO\n         ST    R1,BUFF\n         LA    R1,4095(,1)\n         ST    R1,REPLY\n         LA    R1,4095(,1)\n         ST    R1,TERMINPT\n         LA    R1,4095(,1)\n         ST    R1,LINES\n*\n         LA    R1,4095(,1)\n         SRL   R1,2                    FULL-WORD ALIGN\n         SLL   R1,2                    FULL-WORD ALIGN\n         ST    R1,DYNWORK1\n         LA    R1,DYNRCODE\n         ST    R1,DYNWORK2\n         OI    DYNWORK2,X'80'\n*\n         MVI   SPLIT,0                  NOT IN SPLIT SCREEN\n*\n         LA    R14,WCCFLAG              \"WCC\" IS USED TO SET THE ALARM\n         ST    R14,TERMOUT              NOW BUILD INADDRESSES\n*\n         LA    R14,TERMOUT+4            NOW BUILD INADDRESSES\n         LA    R1,43                    LOOP CONTROL\n         L     R15,LINES                FIRST LINE ADDRESS\n*\n         ST    R15,0(,R14)              STORE THE ADDRESS\n         LA    R15,93(,15)              BUMP 93 BYTES\n         LA    R14,4(,14)               BUMP TO NEXT INADDR\n         BCT   R1,*-12                  LOOP 43 TIMES\n*\n         MVI   WCCFLAG,C'A'             ALARM REQUESTED\n*\n         LA    R14,TERMINPT+4           NOW BUILD INADDRESSES\n         LA    R1,43                    LOOP CONTROL\n         L     R15,TERMINPT             FIRST LINE ADDRESS\n         LA    R15,93(,15)              BUMP 93 BYTES\n         MVI   0(R15),X'00'             SET FIRST BYTE TO ZEROS\n*\n         ST    R15,0(,R14)              STORE THE ADDRESS\n         LA    R15,93(,15)              BUMP 93 BYTES\n         MVI   0(R15),X'00'             SET FIRST BYTE TO ZEROS\n         LA    R14,4(,14)               BUMP TO NEXT INADDR\n         BCT   R1,*-16                  LOOP 43 TIMES\n*\n         LA    R0,LIBDCB1\n         LA    R1,MEMDCB1\n         LA    R2,PRTDCB1\n         LA    R3,COPDCB1\n         LA    R4,LIBDCB2\n         LA    R5,MEMDCB2\n         LA    R6,PRTDCB2\n         LA    R7,COPDCB2\n*\n         MVC   LIBDCB1(88),DIRDCB\n         MVC   LIBDCB2(88),DIRDCB\n         MVC   LIBDCB1+40(8),=CL8'LIBDCB1'\n         MVC   LIBDCB2+40(8),=CL8'LIBDCB2'\n         MVC   MEMDCB1(88),SEQDCB\n         MVC   MEMDCB2(88),SEQDCB\n         MVC   MEMDCB1+40(8),=CL8'MEMDCB1'\n         MVC   MEMDCB2+40(8),=CL8'MEMDCB2'\n         MVC   PRTDCB1(88),OUTDCB\n         MVC   PRTDCB2(88),OUTDCB\n         MVC   PRTDCB1+40(8),=CL8'PRTDCB1'\n         MVC   PRTDCB2+40(8),=CL8'PRTDCB2'\n         MVC   COPDCB1(88),SEQDCB\n         MVC   COPDCB2(88),SEQDCB\n         MVC   COPDCB1+40(8),=CL8'COPDCB1'\n         MVC   COPDCB2+40(8),=CL8'COPDCB2'\n*\n         DROP  R10\n         LA    R10,SPLITWRK       SET DSECT BASE FOR SPLIT-SCREEN\n         USING SPLTAREA,10\n*\n         ST    R0,LIBDCBA\n         ST    R1,MEMDCBA\n         ST    R2,PRTDCBA\n         ST    R3,COPDCBA\n*\n         LR    R14,R13                 SAVE THE SAVE AREA ADDRESS\n         L     R1,SPLIT2AD\n         AR    R13,R1\n*\n         LA    R10,SPLITWRK\n         ST    R4,LIBDCBA\n         ST    R5,MEMDCBA\n         ST    R6,PRTDCBA\n         ST    R7,COPDCBA\n         LR    R13,R14                RESET THE SAVE AREA ADDRESS\n         LA    R10,SPLITWRK\n         MVI   PRIMEFLG,0               NOT IN PRIMARY OPTION MENU\n*\n         MVC   SUBRB(SUBLENG),SUBCONRB\n*\n         LA    R1,SUBRB\n         ST    R1,SUBSUBP\n         OI    SUBSUBP,X'80'\n*\nINITDONE DS    0H\n         L     R14,INIT14\n         BR    R14\n*\n         TITLE 'ETPS - SUBMIT DYNAMIC ALLOCATION PARAMETERS, ETC'\n*\nGETSIZE  DC    A(GMSIZE)\nSCRNOFFA DC    A(SCRNOFFS)\nSPLIT1AD DC    A(SPLIT100)    OFFSET OF SPLIT2 AREA\nSPLIT2AD DC    A(SPLIT200)    OFFSET OF SPLIT2 AREA\n*\n         DS    0F\nSUBCONRB DC    X'14'           LENGTH = 20\n         DC    X'01'           DSNAME ALLOCATION\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(SUBTEXT1)     POINTER TO SUBTEXT1\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\nSUBLENG  EQU   *-SUBCONRB\n*\nSUBTEXT1 DC    A(SUBDDNAM)     POINTER TO DDNAME\nSUBTEXT2 DC    A(SUBCLS)       POINTER TO SYSOUT CLASS\nSUBTEXT3 DC    A(SUBFRE)       POINTER TO FREE=CLOSE\nSUBTEXT4 DC    X'80',AL3(SUBPGM) POINTER TO INTRDR\n*\nSUBTEXT5 DC    X'80',AL3(SUBDDNAM)          DDNAME FOR FREE\n*\n         DS    0H\nSUBDDNAM DC    X'0001'         DDNAME=  PARAMETER\n         DC    X'0001'         NUMBER OF TEXT UNITS\n         DC    X'0006'         LENGTH OF PARM\n         DC    CL8'SUBJOB'     DDNAME\n*\n         DS    0H\nSUBCLS   DC    X'0018'         SYSOUT= PARAMETER\n         DC    X'0001'         NUMBER OF TEXT UNITS\n         DC    X'0001'         LENGTH OF PARM\n         DC    C'A'            SYSOUT CLASS\n*\n         DS    0H\nSUBPGM   DC    X'0019'         INTRDR PARAMETER\n         DC    X'0001'         NUMBER OF TEXT UNITS\n         DC    X'0006'         LENGTH OF PARM\n         DC    C'INTRDR'       PGM NAME\n*\n         DS    0H\nSUBFRE   DC    X'001C'         FREE=CLOSE\n         DC    X'0000'         NUMBER OF TEXT UNITS\n*\nIOBLANK  DC    X'0200'\n         DC    X'0000'\n         DC    X'00000000'              ECB\n         DC    X'0000000000000000'\n         DC    X'00000000'              CH PGM\n         DC    X'00000000'              DCB ADD\n         DC    X'00000000'\n         DC    X'00000000'\n         DC    X'0000000000000000'      UCB INDEX\n*\nDUMMYROW DC    AL1(6),X'04',CL5'     '\n*\n         ENTRY SEQDCB\nSEQDCB   DCB   DSORG=PS,MACRF=(GM,PM),DDNAME=DUMMY,EODAD=DUMMYROW\nOUTDCB   DCB   DSORG=PS,MACRF=(PM),DDNAME=DUMMY\nDIRDCB   DCB      DSORG=PS,MACRF=(RP,WP),DDNAME=PPROCLIB,RECFM=F,      C\n               LRECL=256,BLKSIZE=256,KEYLEN=8,EODAD=DIRENDOF\n         TITLE 'ETPS - LOGON PROCESSING'\nLOGON    DS    0H\n         ST    R14,LOG14\n*\n*              PROMPT FOR LOGON AND PASSWORD\n*\nRELOGON  DS    0H\n*\n         MVI   SPLIT,0                  NOT IN SPLIT SCREEN\n         MVI   PRIMEFLG,0               NOT IN PRIMARY OPTION MENU\n*\n         CLC   TUBEDDNM(2),=C'OP'      OPERATOR TERMINAL\n         BE    OPRLOGON          YES, NO LOGON\n*\n         CLC   TUBEDDNM(4),=C'VTAM'    VTAM     TERMINAL\n         BE    VTMLOGON          YES, NO LOGON\n*\n         CLC   TUBEDDNM(3),=C'TSO'     VTAM     TERMINAL\n         BE    TSOLOGON          YES, NO LOGON\n*\n         CLC   TUBEID(4),=C'VTAM'     VTAM?\n         BE    VTMLOGON          YES, NO LOGON\n*\n         L     R15,=A(LOGHELP)     DEFAULT HELP SCREEN\n         ST    R15,HELPADD\n*\n         XC    MSGADD(4),MSGADD    NO MESSAGE AT UPPER-RIGHT\n*\n         MVI   WCCFLAG,C'A'             ALARM REQUESTED\n*\n         L     R6,=A(LOGSCREE)\n         BAL   R14,SCRNBLD\n*\n         MVI   AIDROW,16           CURSOR ROW\n         MVI   AIDCOL,32           CURSOR COLUMN\n         MVC   HOMEAID(2),AIDADDR  COPY\n*\n         L     R15,=A(COMM2)       GO COMMUNICATE\n         BALR  R14,R15\n*\n         MVI   WCCFLAG,C'N'          NO ALARM REQUESTED\n         L     R2,TERMINPT           PICK UP RESPONSES\n         LM    R4,R6,TERMINPT+68     PICK UP RESPONSES     W.A.M.\n*\n         LTR   R15,15                   IS IT A BAD RETURN CODE\n         BNZ   CLOSETB                  YUP, GO EOJ\n*\n         CLI   PFKFLAG,0                IS IT A PF KEY/ATTN\n         BE    CHECKEOJ              NOPE, SEE IF IT IS EOJ\n*\n         CLI   0(R2),X'6E'           IS IT PA2\n         BE    RELOGON               YUP, RESHOW THE SCREEN\n         B     CLOSETB              NOPE- GO CLOSE THE TUBE AND EOJ\n*\nCHECKEOJ DS    0H\n         CLC   33(3,R4),=CL3'EOJ'    ALL DONE?\n         BE    CLOSETB               YUP- GO CLOSE THE TUBE AND EOJ\n         CLC   33(3,R4),=CL4'DUMP'   TAKE A DUMP??\n         BNE   CHECKUSR              NO, GO CHECK THE USER-ID\n         DC    H'0'                  YUP- TAKE AN S0C1\nCHECKUSR DS    0H\n         LA    R1,USERTABL           VALID USERS\nUSERTOP  DS    0H\n         CLC   0(5,R1),SPACES        END OF TABLE\n         BE    RELOGON                NO- GO REPROMPT\n         CLC   33(5,R4),0(R1)           AUTHORIZED USERID\n         BE    GOODUSER               YUP\n         LA    R1,5(,R1)             BUMP TO NEXT USER IN TABLE\n         B     USERTOP               LOOP\nUSERTABL DS    0H\n         DC    CL5'ASQCC'\nSPACES   DC    CL8' '\nMASTPASS DC    CL8'XXXXXXXX'\nGOODUSER DS    0H\n         MVC   USERID(5),33(R4)       SAVE USERID\n         MVC   USERPASS(8),33(R5)    SAVE PASSWORD\n         MVC   RACGROUP(8),33(R6)    SAVE RACF GROUP ID\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*   NOTE ADD PASSWORD CHECKING HERE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nENDLOGON DS    0H\n         L     R14,LOG14\n         BR    R14\nOPRLOGON DS    0H\n         MVC   USERID(5),USERTABL     SET USERID=FIRST IN TABLE\n         MVC   USERPASS(8),MASTPASS      PASSWORD IS MASTER PASSWORD\n         B     ENDLOGON\n*\nVTMLOGON DS    0H\n         L     R1,PSATOLD        PICK UP TCB\n         USING TCB,1\n         L     R1,TCBUSER        TCBUSER FIELD\n         USING TCBUVTAM,1\n*\n         MVC   USERID(8),TCBUSRID     SET USERID\n         MVC   USERPASS(8),TCBUPASS  AND PASSWORD\n         B     ENDLOGON\n*\nTSOLOGON DS    0H\n         MVI   USERPASS,C' '\n         MVC   USERPASS+1(7),USERPASS    CLEAR PASSWORD\n         B     ENDLOGON\n         L     R1,PSATOLD        PICK UP TCB\n         USING TCB,1\n         L     R1,TCBTIO         TCB TIOT\n         USING TIOT,1\n         MVC   USERID(8),TIOCNJOB     SET USERID=JOBNAME\n         L     R1,PSAAOLD\n         USING ASCB,1\n         L     R1,ASCBTSB\n         USING TSB,1\n         MODESET MF=(E,SUPRMOD)\n         MVC   USERPASS(8),TSBPSWD   SET PASSWORD=TSO LOGON PASSWORD\n         MODESET MF=(E,PROBMOD)\n         B     ENDLOGON\n*\n         TITLE 'ETPS - DISPLAY PRIMARY OPTION MENU'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\nPRIOPT   DS    0H\n*\n         CLI   SPLIT,0                AM I IN SPLIT-SCREEN?\n         BNE   REPRIOPT               YUP\n         STM   R2,R13,PRISPLIT        SAVE REGISTERS\n*\nREPRIOPT DS    0H\n         ENTRY REPRIOPT\n*\nREPRIMSG DS    0H\n         L     R15,=A(POPHELP)     DEFAULT HELP SCREEN\n         ST    R15,HELPADD\n*\n         MVI   PRIMEFLG,1          ON SCREEN1\n*\nPRIBLD   DS    0H\n*\n         L     R6,=A(PRIMOPT)\n         BAL   R14,SCRNBLD\n*\n         MVI   AIDROW,01           CURSOR ROW\n         MVI   AIDCOL,21           CURSOR COLUMN\n         MVC   HOMEAID(2),AIDADDR  COPY\n*\n         L     R15,=A(COMM2)       GO COMMUNICATE\n         BALR  R14,R15\n*\n         LTR   R15,15              NON-ZERO\n         BNZ   PRIEND              YUP  - GET OUT\n*\n         MVI   PRIMEFLG,0          ON SCREEN1\n*\n         LM    R2,R5,TERMINPT        PICK UP RESPONSES\n*\n         CLI   SPLIT,2                  AM I ON SCREEN 2\n         BNE   PRIBLD2                  NOPE\n*\n         L     R3,SCROWS1          PICK UP SIZE OF SCREEN1\n         SLL   R3,2                MULTIPLY BY 4\n         LA    R3,TERMINPT(R3)     PICK UP LOCATION OF RESPONSES\n         LM    R3,R5,4(R3)         PICK UP RESPONSES\n*\nPRIBLD2  DS    0H\n         CLI   PFKFLAG,0                IS IT A PF KEY/ATTN\n         BNE   PRIPFK                   YUP\n*\n         CLI   22(R4),C'X'         END\n         BE    PRIEND              YUP  - GO RESHOW THE LOGON MENU\n*\n         B     PARSEOPT            NOPE - GO SEE WHAT OPTION WAS INPT\n*\nPRIPFK   DS    0H\n*\n*\n         CLI   0(R2),X'F3'         IS IT PF3\n         BE    PRIEND              YUP  - GO RESHOW THE LOGON MENU\n         CLI   0(R2),X'C3'         IS IT PF15\n         BE    PRIEND              YUP  - GO RESHOW THE LOGON MENU\n*\n         CLI   0(R2),X'6C'         IS IT PA1\n         BE    PRIEND              YUP  - GO RESHOW THE LOGON MENU\n*\n         CLI   0(R2),X'6E'         IS IT PA2\n         BE    REPRIOPT            YUP  - GO RESHOW THE PRIMOPT\n*\n         CLI   0(R2),X'6D'         IS IT \"CLEAR\"\n         BE    REPRIOPT            YUP  - GO RESHOW THE PRIMOPT\n*\nPRIEND   DS    0H\n         CLC   TUBEDDNM(4),=C'VTAM'    VTAM     TERMINAL\n         BE    RETRNEND          YES\n*\n         CLC   TUBEDDNM(3),=C'TSO'     VTAM     TERMINAL\n         BE    RETRNEND          YES\n*\n         B     RELOGON\n*\n         TITLE 'ETPS - DETERMINE PRIMARY OPTION PROCESSOR'\nPARSEOPT DS    0H\n*\n         CLI   22(R4),C'1'         BROWSE?\n         BE    BROPT               GO DO IT\n         CLI   22(R4),C'2'         EDIT?\n         BE    EDOPT               GO DO IT\n         CLI   22(R4),C'3'         UTILITIES?\n         BE    UTLOPT              GO DO IT\n         CLI   22(R4),C'4'         IDCAMS INTERFACE?\n         BE    FOOPT               GO DO IT\n*\n         LA    R1,INVOPT\n         ST    R1,MSGADD\n         B     REPRIMSG   GO RESHOW THE PRIMARY OPTION MENU\n*\nINVOPT   DC    CL20' INVALID OPTION    '\n         TITLE 'ETPS - BROWSE PROCESSING'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\nBROPT    DS    0H\n*\n         MVI   LIBFUNC,C'B'       INDICATE BROWSE\nREBROPT  DS    0H\n*\n         L     R15,=A(BROHELP)      DEFAULT HELP SCREEN\n         ST    R15,HELPADD\n*\n         L     R6,=A(BROWSCRN)\n         BAL   R14,SCRNBLD\n*\n         MVI   AIDROW,02           CURSOR ROW\n         MVI   AIDCOL,29           CURSOR COLUMN\n         MVC   HOMEAID(2),AIDADDR  COPY\n*\n         L     R15,=A(COMM2)       GO COMMUNICATE\n         BALR  R14,R15\n*\n         LTR   R15,15              BAD RC\n         BNZ   BREND               YUP\n*\n         CLI   PFKFLAG,0           PFK/ATTN ENTERED?\n         BE    BRPARSE             NOPE, GO BROWSE THE DATASET\n*\n         L     R2,TERMINPT           PICK UP RESPONSES\n         CLI   0(R2),X'6E'           IS IT PA2\n         BE    REBROPT               YUP, RESHOW THE SCREEN\n         B     BREND               ELSE I'M DONE\n*\nBRPARSE  DS    0H\n         B     EDCKINPT\n*\nBREND    DS    0H\n         B     REPRIOPT\n*\n         TITLE 'ETPS - EDIT PROCESSING'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\nEDOPT    DS    0H\n*\n         MVI   LIBFUNC,C'E'       INDICATE FUNCTION\n*\nREEDOPT  DS    0H\n*\n         L     R15,=A(EDTHELP)     DEFAULT HELP SCREEN\n         ST    R15,HELPADD\n*\n         L     R6,=A(EDITOPT)\n         BAL   R14,SCRNBLD\n*\n         MVI   AIDROW,02           CURSOR ROW\n         MVI   AIDCOL,29           CURSOR COLUMN\n         MVC   HOMEAID(2),AIDADDR  COPY\n*\n         L     R15,=A(COMM2)\n         BALR  R14,R15\n*\n         LTR   R15,15              BAD RC\n         BNZ   EDTEND              YUP\n*\nEDCKINPT DS    0H\n         LM    R2,R7,TERMINPT      PICK UP FOUR REPLY FIELDS\n*\n         CLI   SPLIT,2                  AM I ON SCREEN 2\n         BNE   EDCKINP2                 NOPE\n*\n         L     R3,SCROWS1          PICK UP SIZE OF SCREEN1\n         SLL   R3,2                MULTIPLY BY 4\n         LA    R3,TERMINPT(R3)     PICK UP LOCATION OF RESPONSES\n         LM    R3,R7,4(R3)         PICK UP RESPONSES\n*\nEDCKINP2 DS    0H\n         CLI   PFKFLAG,0           PFK/ATTN ENTERED?\n         BE    EDPARSE             NOPE, GO EDIT THE DATASET\n*\n         CLI   0(R2),X'6E'         IS IT PA2?\n         BE    EDTPA2              YUP\n         B     EDTEND              ELSE I'M DONE\n*\nEDTPA2   DS    0H\n*\n         CLI   LIBFUNC,C'B'       INDICATE FUNCTION\n         BE    REBROPT             YES, RESHOW THE SCREEN\n*\n         CLI   LIBFUNC,C'U'       INDICATE FUNCTION\n         BE    REUTOPT             YES, RESHOW THE SCREEN\n*\n         B     REEDOPT             ASSUME EDIT, RESHOW THE SCREEN\n*\nEDPARSE  DS    0H\n*\n         CLC   30(4,R5),=C'END '  END OF EDIT\n         BE    EDTEND\n*\n         MVC   EDTDSN1(54),30(R5)\n*\n         MVC   DIRPASS(8),USERPASS SET DSN PASSWORD TO LOGON PASSWORD\n         MVC   DIRVOL(6),SPACES\n*\n         CLI   0(R6),X'00'         IF NO VOLSER ENTERED LOOK FOR\n         BE    *+16                PASSWORD\n*\n         MVC   DIRVOL(6),30(R6)  MOVE IN THE VOLSER\n         MVC   EDTVOL1(6),30(R6)          THE VOLSER\n*\n         CLI   0(R7),X'00'         IF NO PASSWORD ENTERED,\n         BE    *+10                PASSWORD\n*\n         MVC   DIRPASS(8),30(R7)   MOVE IN THE PASSWORD\n*\nNOVOLPAS DS    0H\n*\n*\n         MVC   EDTPAS1(8),DIRPASS SET PASSWORD\n*\n         MVI   EDTDSN,C' '\n         MVC   EDTDSN+1(43),EDTDSN\n         LA    R14,EDTDSN1        START ADDRESS FOR DSN LENGTH CALC\n         SR    R15,15             SET COUNTER\n*\nEDDSNLOP DS    0H\n         CLI   0(R14),C'('        LEFT PAREN INDICATES MEMBER\n         BE    EDDSNMEM           GOT ONE\n         CLI   0(R14),C' '        BLANK IS END OF DSN\n         BE    EDDSNEND           GOT END\n*\n         LA    R14,1(,14)         BUMP ADDRESS\n         LA    R15,1(,15)         BUMP COUNTER\n         B     EDDSNLOP           TEST NEXT BYTE\n*\nEDMOVDSN MVC   EDTDSN(1),EDTDSN1\nEDDSNMEM DS    0H\n         STC   R15,EDTDSN1L       SAVE LENGTH\n*\n         BCTR  R15,0              SUBTRACT1\n         EX    R15,EDMOVDSN       SUBTRACT1\n*\n         LA    R14,1(,14)         BUMP ADDRESS\n         LA    R15,EDTMEM1        SET ADDRESS OF MEMBER FIELD\n         MVC   EDTMEM1(8),SPACES  INIT MEM FIELD\nEDMEMLOP DS    0H\n         CLI   0(R14),C')'       RIGHT PAREN INDICATES MEMBER END\n         BE    EDTSTPAN           ALL DONE\n         CLI   0(R14),C' '        BLANK IS END OF DSN\n         BE    EDTSTPAN           ALL DONE\n*\n         MVC   0(1,R15),0(R14)    MOVE 1 CHARACTER\n         LA    R14,1(,14)         BUMP ADDRESS - INPUT\n         LA    R15,1(,15)         BUMP ADDRESS - OUTPUT\n         B     EDMEMLOP           TEST NEXT BYTE\n*\n*\nEDDSNEND DS    0H\n         STC   R15,EDTDSN1L       SAVE LENGTH\n*\n         BCTR  R15,0              SUBTRACT1\n         EX    R15,EDMOVDSN       SUBTRACT1\n*\nEDTSTPAN DS    0H\n         L     R15,=A(PANAMES)    FIRST SEE IF IT'S A PAN LIBRARY\n*\nEDORGLP1 DS    0H\n         CLI   0(R15),X'FF'       END OF TABLE\n         BE    EDORGNPN           CAN'T BE A PAN LIBRARY\n*\n         CLC   1(44,R15),EDTDSN1  DSN MATCH\n         BE    EDORGPAN           MUST BE A PAN LIBRARY\n*\n         LA    R15,45(,15)        BUMP TO NEXT PANAMES ENTRY\n         B     EDORGLP1          TEST FOR A PAN LIBRARY\n*\nEDORGPAN DS    0H\n         MVC   EDTORG1(3),=C'PAN' SET IT PAN\n*\nEDORGNPN DS    0H\n*\nEDSETVOL DS    0H\n         OI    DIRVOL,C' '\n         CLI   DIRVOL,C' '        WAS VOLSER PROVIDED?\n         BNE   EDSETORG           YUP\n*\n         XC    CAT(16),CAT        CLEAR CAMLST AREA\n         MVI   CAT,X'44'          SET FLAGS\n         LA    R14,EDTDSN         SET DSN\n         ST    R14,CAT+4\n         LA    R14,CATINFO        SET OUTPUT AREA\n         ST    R14,CAT+12\n*\n         LOCATE CAT\n*\n         LTR   R15,15             TEST RETURN CODE\n         BNZ   EDBADLOC           IF NO GOOD, SET MESSAGE\n*\n         MVC   DIRVOL(6),CATINFO+6   SET THE VOLSER\n         MVC   EDTVOL1(6),CATINFO+6   SET THE VOLSER\n*\nEDSETORG DS    0H\n*\n         XC    VTOC(16),VTOC      CLEAR CAMLST AREA\n         MVI   VTOC,X'C1'         SET FLAGS\n         LA    R14,EDTDSN         SET DSN\n         ST    R14,VTOC+4\n         LA    R14,DIRVOL         SET VOLSER\n         ST    R14,VTOC+8\n         LA    R14,VTOCINFO       SET OUTPUT AREA\n         ST    R14,VTOC+12\n*\n         OBTAIN VTOC\n*\n         LTR   R15,15             CHECK RETURN CODE\n         BNZ   EDBADOBT           IF NO GOOD, SET MESSAGE\n*\n         LA    R14,VTOCINFO       PICK UP VTOCINFO\n*\n         CLC   EDTORG1(3),=C'PAN' IS PAN ALREADY SET\n         BE    EDFMTDIR               YUP\n*\n         MVC   EDTORG1(3),=C'SEQ' SET DEFAULT DSORG\n         CLC   38(2,R14),=X'4000'     IS IT SEQUENTIAL\n         BE    EDTSTLRC               YUP\n*\n         MVC   EDTORG1(3),=C'PDS' SET DEFAULT DSORG\n*\n         CLC   38(2,R14),=X'0200'     IS IT PO\n         BE    EDTSTLRC               YUP\n*\n         B     EDBADORG           IF NO GOOD, SET MESSAGE\n*\nEDTSTLRC DS    0H\n*\n         CLI   LIBFUNC,C'E'       DOING EDIT?\n         BNE   EDFMTDIR           NO, SKIP LRECL CHECK\n*\n         CLC   44(2,R14),=X'0050'   IS LRECL=80\n         BNE   EDBAD80            IF NO GOOD, SET MESSAGE\n*\nEDFMTDIR DS    0H\n         L     R15,=A(ETPSLIB2)   GO DO EDIT\n*\n         CALL  (15),(EDTDSN1,EDTDSN1L,DIRVOL,EDTORG1,DIRDD,            X\n               USERPASS,EDTMEM1),VL,MF=(E,PARM43)\n*\n         MVI   EDTMEM1,C' '       RESET MEMBER NAME\n         MVC   EDTMEM1+1(7),EDTMEM1\n*\n         B     REEDSCN            RETRY THE SCREEN\n*\nEDBADLOC DS    0H\n         LA    R1,BADEDLOC\n         ST    R1,MSGADD\n         B     REEDSCN            RETRY THE SCREEN\nBADEDLOC DC    CL20'EDIT - LOCATE FAILED'\n*\nEDBADOBT DS    0H\n         LA    R1,BADEDOBT\n         ST    R1,MSGADD\n         B     REEDSCN            RETRY THE SCREEN\nBADEDOBT DC    CL20'EDIT - OBTAIN FAILED'\n*\nEDBADORG DS    0H\n         LA    R1,BADEDORG\n         ST    R1,MSGADD\n         B     REEDSCN            RETRY THE SCREEN\nBADEDORG DC    CL20'EDIT - BAD DSORG    '\n*\nEDBAD80  DS    0H\n         LA    R1,BADED80\n         ST    R1,MSGADD\n         B     REEDSCN            RETRY THE SCREEN\nBADED80  DC    CL20'EDIT - LRECL NOT 80 '\n*\nREEDSCN  DS    0H\n         CLI   LIBFUNC,C'B'       INDICATE FUNCTION\n         BE    REBROPT             YES, RESHOW THE SCREEN\n*\n         CLI   LIBFUNC,C'U'       INDICATE FUNCTION\n         BE    REUTOPT             YES, RESHOW THE SCREEN\n*\n         B     REEDOPT             ASSUME EDIT, RESHOW THE SCREEN\n*\nEDTEND   DS    0H\n*\n         CLI   LIBFUNC,C'B'       INDICATE FUNCTION\n         BE    REBROPT             YES, RESHOW THE SCREEN\n*\n         CLI   LIBFUNC,C'U'       INDICATE FUNCTION\n         BE    REUTOPT             YES, RESHOW THE SCREEN\n*\n         B     REPRIOPT\n*\n*\n         TITLE 'ETPS - PDS UTILITY       PROCESSING'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\nUTLOPT   DS    0H\n*\n         MVI   LIBFUNC,C'U'       INDICATE FUNCTION\n*\nREUTOPT  DS    0H\n*\n         L     R15,=A(UT1HELP)     DEFAULT HELP SCREEN\n         ST    R15,HELPADD\n*\n         L     R6,=A(UT1MENU)\n         BAL   R14,SCRNBLD\n*\n         MVI   AIDROW,01           CURSOR ROW\n         MVI   AIDCOL,21           CURSOR COLUMN\n         MVC   HOMEAID(2),AIDADDR  COPY\n*\n         L     R15,=A(COMM2)\n         BALR  R14,R15\n*\n         LTR   R15,15                   BAD RC\n         BNZ   UTEND                    OUT\n*\n         L     R2,TERMINPT         PICK UP AID ADDRESS\n         L     R3,TERMINPT+8               COMMAND INPUT LINE\n         L     R5,TERMINPT+36              DSNAME FIELD\n         L     R6,TERMINPT+40              VOLSER\n         L     R7,TERMINPT+48              PASSWORD\n*\n         CLI   SPLIT,2                  AM I ON SCREEN 2\n         BNE   UT1SEL2                  NOPE\n*\n         L     R3,SCROWS1          PICK UP SIZE OF SCREEN1\n         SLL   R3,2                MULTIPLY BY 4\n         L     R5,TERMINPT+36(R3)  PICK UP RESPONSES\n         L     R6,TERMINPT+40(R3)  PICK UP RESPONSES\n         L     R7,TERMINPT+48(R3)  PICK UP RESPONSES\n         L     R3,TERMINPT+8(R3)   PICK UP COMMAND INPUT LINE\n*\nUT1SEL2  DS    0H\n         CLI   PFKFLAG,0           PFK/ATTN ENTERED?\n         BNE   REPRIOPT            YUP\n*\n         CLC   22(4,R3),=C'END '  END OF THIS SCREEN\n         BE    REPRIOPT\n*\n         CLI   0(R3),X'00'        IF NO COMMAND ENTERED\n         BE    UT1LIST            GO LIST THE LIBRARY\n*\n         CLI   22(R3),C'C'        IS IT A COMPRESS\n         BE    UT1CPRS            YUP\n*\n*        LA    R0,30(,R5)         POINT TO DSN\n*        LA    R1,30(,R6)         POINT TO VOLSER\n*        LA    R2,30(,R7)         POINT TO PASSWORD\n*        LA    R3,22(,R3)         POINT TO OPTION\n*        DC    H'0'\n*\n         LA    R1,UT1BADOP\n         ST    R1,MSGADD\n         B     REUTOPT\n*\nUT1CPRS  DS    0H\n*\n         L     R1,DYNWORK1\n         LA    R15,30(,R5)         POINT TO DSN\n         ST    R15,0(,R1)\n         LA    R15,30(,R6)         POINT TO VOLSER\n         ST    R15,4(,R1)\n         LA    R15,30(,R7)         POINT TO PASSWORD\n         ST    R15,8(,R1)\n*\n         LINK  EP=ETPSCOMP\n         LA    R1,UT1OKCP\n         ST    R1,MSGADD\n         LTR   R15,R15\n         BZ    REUTOPT\n*\n         LA    R1,UT1BADCP\n         ST    R1,MSGADD\n         B     REUTOPT\n*\nUT1DLIST DS    0H\n*\nUT1DLBAD DS    0H\n         LA    R1,UT1BADDL\n         ST    R1,MSGADD\n         B     REUTOPT\n*\nUT1FLIST DS    0H\n*\nUT1FLBAD DS    0H\n         LA    R1,UT1BADLS\n         ST    R1,MSGADD\n         B     REUTOPT\n*\nUT1LIST  DS    0H\n         MVC   EDTDSN1(54),30(R5)\n*\n         MVC   DIRPASS(8),USERPASS SET DSN PASSWORD TO LOGON PASSWORD\n         MVC   DIRVOL(6),SPACES\n*\n         CLI   0(R6),X'00'         IF NO VOLSER ENTERED LOOK FOR\n         BE    *+10                PASSWORD\n*\n         MVC   DIRVOL(6),30(R6)  MOVE IN THE VOLSER\n*\n         CLI   0(R7),X'00'         IF NO PASSWORD ENTERED,\n         BE    *+10                PASSWORD\n*\n         MVC   DIRPASS(8),30(R7)   MOVE IN THE PASSWORD\n*\n         MVC   EDTPAS1(8),DIRPASS SET PASSWORD\n*\n         LA    R14,EDTDSN1        START ADDRESS FOR DSN LENGTH CALC\n         SR    R15,15             SET COUNTER\n*\nU1DSNLOP DS    0H\n         CLI   0(R14),C' '        BLANK IS END OF DSN\n         BE    U1DSNEND           GOT END\n*\n         LA    R14,1(,14)         BUMP ADDRESS\n         LA    R15,1(,15)         BUMP COUNTER\n         B     U1DSNLOP           TEST NEXT BYTE\n*\nU1DSNEND DS    0H\n         STC   R15,EDTDSN1L       SAVE LENGTH\n         MVC   EDTMEM1(8),SPACES  INIT MEM FIELD\n         MVC   EDTORG1(3),=C'PDS' SET IT PDS, BY DEFAULT\n*\nU1TSTPAN DS    0H\n         L     R15,=A(PANAMES)    FIRST SEE IF IT'S A PAN LIBRARY\n*\nU1ORGLP1 DS    0H\n         CLI   0(R15),X'FF'       END OF TABLE\n         BE    U1ORGNPN           CAN'T BE A PAN LIBRARY\n*\n         CLC   1(44,R15),EDTDSN1  DSN MATCH\n         BE    U1ORGPAN           MUST BE A PAN LIBRARY\n*\n         LA    R15,45(,15)        BUMP TO NEXT PANAMES ENTRY\n         B     U1ORGLP1          TEST FOR A PAN LIBRARY\n*\nU1ORGPAN DS    0H\n         MVC   EDTORG1(3),=C'PAN' SET IT PAN\n*\nU1ORGNPN DS    0H\n*\nU1SETVOL DS    0H\n         CLI   DIRVOL,C' '        WAS VOLSER PROVIDED?\n         BNE   U1SETORG           YUP\n*\n         XC    CAT(16),CAT        CLEAR CAMLST AREA\n         MVI   CAT,X'44'          SET FLAGS\n         LA    R14,EDTDSN1        SET DSN\n         ST    R14,CAT+4\n         LA    R14,CATINFO        SET OUTPUT AREA\n         ST    R14,CAT+12\n*\n         LOCATE CAT\n*\n         LTR   R15,15             TEST RETURN CODE\n         BNZ   UT1LBAD            IF NO GOOD, RETRY THE SCREEN\n*\n         MVC   DIRVOL(6),CATINFO+6   SET THE VOLSER\n         B     U1SETORG\n*\nUT1LBAD  DS    0H\n*\n         LA    R1,U1BADLOC\n         ST    R1,MSGADD\n         B     REUTOPT\n*\nUT1OBAD  DS    0H\n*\n         LA    R1,U1BADOBT\n         ST    R1,MSGADD\n         B     REUTOPT\n*\nUT1ORBAD DS    0H\n*\n         LA    R1,U1BADORG\n         ST    R1,MSGADD\n         B     REUTOPT\n*\nUT1LRBAD DS    0H\n*\n         LA    R1,U1BADLRE\n         ST    R1,MSGADD\n         B     REUTOPT\n*\nU1SETORG DS    0H\n*\n         XC    VTOC(16),VTOC      CLEAR CAMLST AREA\n         MVI   VTOC,X'C1'         SET FLAGS\n         LA    R14,EDTDSN1        SET DSN\n         ST    R14,VTOC+4\n         LA    R14,DIRVOL         SET VOLSER\n         ST    R14,VTOC+8\n         LA    R14,VTOCINFO       SET OUTPUT AREA\n         ST    R14,VTOC+12\n*\n         OBTAIN VTOC\n*\n         LTR   R15,15             CHECK RETURN CODE\n         BNZ   UT1OBAD            IF NO GOOD, RETRY THE SCREEN\n*\n         LA    R14,VTOCINFO       PICK UP VTOCINFO\n*\n         CLC   EDTORG1(3),=C'PAN' IS PAN ALREADY SET\n         BE    U1FMTDIR               YUP\n*\n         CLC   38(2,R14),=X'0200'     IS IT PO\n         BNE   UT1ORBAD               NOPE\n*\n         CLC   44(2,R14),=X'0050'   IS LRECL=80\n         BNE   UT1LRBAD           IF NO GOOD, RETRY THE SCREEN\n*\nU1FMTDIR DS    0H\n         L     R15,=A(ETPSLIB2)   GO DO PDS UTILITY\n*\n         CALL  (15),(EDTDSN1,EDTDSN1L,DIRVOL,EDTORG1,DIRDD,            X\n               USERPASS,EDTMEM1),VL,MF=(E,PARM43)\n*\n         MVI   EDTMEM1,C' '       RESET MEMBER NAME\n         MVC   EDTMEM1+1(7),EDTMEM1\n*\n         B     REUTOPT            RESHOW THE SCREEN\n*\nU1BADLOC DC    CL20'DATASET NOT CATALOGD'\nU1BADOBT DC    CL20'VTOC OBTAIN FAILED  '\nU1BADORG DC    CL20'INVALID DSORG       '\nU1BADLRE DC    CL20'INVALID LRECL-NOT 80'\nUT1BADCP DC    CL20'COMPRESS FAILED     '\nUT1OKCP  DC    CL20'COMPRESS SUCCESSFUL '\nUT1BADDL DC    CL20'DIRECTORY LIST FAILD'\nUT1BADLS DC    CL20'DATASET LIST FAILED '\nUT1BADOP DC    CL20'INVALID OPTION      '\n*\nUTEND    DS    0H\n         B     REPRIOPT\n*\n         TITLE 'ETPS - FOREGROUND    PROCESSING'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\nFOOPT    DS    0H\n*\n*\n         LOAD  EP=ETPSIDC2\n         LR    R15,R0\n         BALR  R14,R15\n       DELETE  EP=ETPSIDC2\n*\n         B     REPRIOPT\n*\n         TITLE 'ETPS - BACKGROUND    PROCESSING'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\nBAOPT    DS    0H\n         L     R15,=A(NOHELP)      DEFAULT HELP SCREEN\n         ST    R15,HELPADD\n*\n         L     R6,=A(NOTGOT)\n         BAL   R14,SCRNBLD\n*\n         MVI   AIDROW,02           CURSOR ROW\n         MVI   AIDCOL,31           CURSOR COLUMN\n         MVC   HOMEAID(2),AIDADDR  COPY\n*\n         L     R15,=A(COMM2)\n         BALR  R14,R15\n*\nBAEND    DS    0H\n         B     REPRIOPT\n*\n         TITLE 'ETPS - COMMAND       PROCESSING'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\nCDOPT    DS    0H\n         L     R15,=A(NOHELP)      DEFAULT HELP SCREEN\n         ST    R15,HELPADD\n*\n         L     R6,=A(NOTGOT)\n         BAL   R14,SCRNBLD\n*\n         MVI   AIDROW,02           CURSOR ROW\n         MVI   AIDCOL,31           CURSOR COLUMN\n         MVC   HOMEAID(2),AIDADDR  COPY\n*\n         L     R15,=A(COMM2)\n         BALR  R14,R15\n*\nCDEND    DS    0H\n         B     REPRIOPT\n*\n*\n*\n         TITLE 'ETPS - USER WTOS'\n         PRINT NOGEN\nWTOMS1   WTO   'ETPS1001 INVALID PARM LENGTH',ROUTCDE=2,DESC=(2)\n         B     RETRNEND\nWTOMS2   WTO   'ETPS1002 COULD NOT ALLOCATE TUBE          ',           X\n               ROUTCDE=2,DESC=(2)\n         L     R1,DYNPARM\n         DC    H'0'\n         B     RETRNEND\nWTOMS4   WTO   'ETPS1004 COULD NOT FREE TUBE              ',           X\n               ROUTCDE=2,DESC=(2)\n         B     RETRNEND\nWTOMS5   WTO   'ETPS1005 INVALID PARM',ROUTCDE=2,DESC=(2)\n         B     RETRNEND\nWTOMS6   WTO   'ETPS1006 UCB LOOKUP FAILED',ROUTCDE=2,DESC=(2)\n         B     RETRNEND\nWTOMS7   WTO   'ETPS1007 COULD NOT OPEN TUBE              ',           X\n               ROUTCDE=2,DESC=(2)\n         DC    H'0'\n         B     FREETUBE\nWTOMS21  WTO   'ETPS1021 TUBE I/O ERROR                   ',           X\n               ROUTCDE=2,DESC=(2)\n         B     CLOSETB\nWTOMS22  WTO   'ETPS1041 TUBE I/O ERROR                   ',           X\n               ROUTCDE=2,DESC=(2)\n         B     CLOSETB\n         TITLE 'ETPS - DATA AREAS AND CONSTANTS'\n******** SCREEN DCB\n         DS    0F\nTINIT    DCB   DSORG=PS,MACRF=E,DDNAME=SCREEN,BUFL=4096,RECFM=U\n         DS    0F\nUPCASE   DC    CL80' '\n*\nASTERS   DC    80C'*'\n*\nSBA3278  DC    A(BUFF3278)\n*\n         DS    0F\nCONRB    DC    X'14'           LENGTH = 20\n         DC    X'01'           DSNAME ALLOCATION\n         DC    B'00000000'     FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    F'0'            POINTER TO TEXT POINTERS\n         DC    F'0'            RESERVED\n         DC    X'08000000'     FLAGS2, CONSIDER OFFLINE DEVICES\n*\n         DS    0H\nCONDDNAM DC    X'0001'         DDNAME=  PARAMETER\n         DC    X'0001'         NUMBER OF TEXT UNITS\n         DC    X'0008'         LENGTH OF PARM\n         DC    CL8'TUBE'       DDNAME\n*\nDISPOLD  DS    0H\nCONDISP  DC    X'0004'         DISP=    PARAMETER\n         DC    X'0001'         NUMBER OF TEXT UNITS\n         DC    X'0001'         LENGTH OF PARM\n         DC    X'01'           OLD\n*\n         DS    0H\nCONUNIT  DC    X'0015'         UNIT= PARAMETER\n         DC    X'0001'         NUMBER OF TEXT UNITS\n         DC    X'0003'         LENGTH OF PARM\n         DC    C'45B'          UNIT ADDRESS\n*\nDISPSHR  DC    X'0004'         DISP=    PARAMETER\n         DC    X'0001'         NUMBER OF TEXT UNITS\n         DC    X'0001'         LENGTH OF PARM\n         DC    X'08'           SHR\n         LTORG\n         TITLE 'ETPS GENERAL SCREEN BUILD SUB ROUTINE'\nSCRNBLD  DS    0H\n*\n* AT ENTRY, R6 POINTS TO THE ADDRESS OF THE SCREEN\n*\n         L     R4,SCROWS1               SCREEN 1\n         LA    R3,TERMOUT+4             SECOND TERMOUT, FIRST LINE\n         CLI   SPLIT,2                  AM I ON SCREEN 2\n         BNE   SCRNBLD1                 NOPE, I'M ALL SET\n*\n         SLL   R4,2                     MULTIPLY OFFSET BY 4\n         LA    R3,TERMOUT+4(R4)         POINT TO ROW 1 OF SCREEN 2\n         L     R4,SCROWS2               NUMBER OF ROWS IN SCREEN 2\n*\nSCRNBLD1 DS    0H\n         L     R2,0(,R6)                ADDRESS OF FROM FIELD\n         L     R7,0(,R3)                ADDRESS OF \"TO\" FIELD\n         IC    R1,0(,R2)                PICK UP LENGTH\n         EX    R1,SCRNBLDM              MOVE IT\n*\n         CLI   PRIMEFLG,1               PRIMARY OPTION MENU\n         BNE   SCRNBL11                 NOPE, SKIP THIS\n         CLC   UOFF(11,R7),=C'USERID   - '     USERID\n         BE    SCRNBL1U                 YES, MOVE USERID\n         CLC   TIMEOFF(11,R7),=C'TIME     - '     TIME\n         BE    SCRNBL1T                 YES, MOVE TIME\n         CLC   TERMOFF(11,R7),=C'TERMINAL - '     TERMINAL\n         BNE   SCRNBL11                 NOPE, SKIP THIS\n*\n         MVC   TERMOFF+11(1,R7),TERMTYPE\n         MVC   TERMOFF+13(3,R7),TERMADDR\n         B     SCRNBL11                 DO THE REST\n*\nSCRNBL1U DS    0H\n         MVC   UOFF+11(7,R7),USERID     MOVE IT\n         B     SCRNBL11                 DO THE REST\n*\nSCRNBL1T DS    0H\n         TIME  DEC\n         SRL   R0,12\n         ST    R0,PACK8+4\n         OI    PACK8+7,X'0F'\n         UNPK  TIMEOFF+11(5,R7),PACK8+5(3)\n         MVC   TIMEOFF+11(2,R7),TIMEOFF+12(R7)\n         MVI   TIMEOFF+13(R7),C':'\n         B     SCRNBL11                 DO THE REST\n*\nSCRNBL11 DS    0H\n         TM    0(R6),X'80'              END OF PARMS?\n         BO    SCRNBLD2                 YUP\n         LA    R6,4(,6)                 BUMP TO NEXT PARM\n         LA    R3,4(,3)                 BUMP TO NEXT PARM\n         NI    0(R3),X'7F'              CLEAR THE \"VL\" BIT\n         BCT   R4,SCRNBLD1              KEEP LOOPING\n*\nSCRNBLD2 DS   0H\n         LTR   R4,4                     END OF SCREEN ROWS\n         BZ    SCRNBLD4                 YES\n         BCTR  R4,0                     SUBTRACT 1 FOR LUCK\n         LTR   R4,4                     END OF SCREEN ROWS\n         BZ    SCRNBLD4                 YES\n         LA    R3,4(,3)                 BUMP TO NEXT PARM\n         L     R7,0(,R3)                ADDRESS OF \"TO\" FIELD\n*\nSCRNBLD3 DS   0H\n         MVC   0(8,R7),DUMMYROW         MOVE IN A DUMMY ROW\n         NI    0(R3),X'7F'              CLEAR THE \"VL\" BIT\n         LA    R3,4(,3)                 BUMP TO NEXT PARM\n         L     R7,0(,R3)                ADDRESS OF \"TO\" FIELD\n         BCT   R4,SCRNBLD3              KEEP LOOPING\n         CLI   SPLIT,1                  AM I IN SPLIT-SCREEN, SCR 1\n         BE    SCRNBLD4                 YUP, DON'T MOVE THIS IN\n         MVC   0(8,R7),DUMMYROW         MOVE IN A DUMMY ROW\n*\nSCRNBLD4 DS   0H\n*\n         CLI   SPLIT,0                  AM I IN SPLIT-SCREEN\n         BE    SCRNBLDZ                 NOPE, I'M ALL SET\n*\n         CLI   SPLIT,2                  AM I ON SCREEN 2\n         BE    SCRNBLDZ                 YUP, GO OR THE PARM LIST\n         BR    R14\n*\nSCRNBLDZ DS   0H\n         OI    0(R3),X'80'              END OF TERMOUT PARMS\n         BR    R14\n*\nSCRNBLDM MVC   0(1,R7),0(R2)\n         LTORG\n         TITLE 'ETPS - SCREEN FORMATS'\n*\n*  THE BUFFER ALWAYS STARTS WITH A WRITE CONTROL CHARACTER (WCC):\n*\n*    X'C7'  =  SOUND ALARM, RESET KEYBOARD, RESET MODIF DATA TAG BITS\n*    X'C3'  =  RESET KEYBOARD, RESET MDT BITS\n*\n*\n*  FOLLOWING THE WCC ARE ORDER CODE SEQUENCES AND DATA:\n*\n*    X'11'  =  SET BUFFER ADDRESS (SBA), FOLLOWED BY 2-BYTE BUFF ADDR\n*    X'13'  =  INSERT CURSOR (IC)\n*    X'1D'  =  START FIELD (SF), FOLLOWED BY 1-BYTE ATTRIBUTE CHARACTER\n*\n         TITLE 'ETPS - LOGON LOGO'\n*\nLOGSCREE CSECT\n         DC    A(LOGSCR01)\n         DC    A(LOGSCR02)\n         DC    A(LOGSCR03)\n         DC    A(LOGSCR04)\n         DC    A(LOGSCR05)\n         DC    A(LOGSCR06)\n         DC    A(LOGSCR07)\n         DC    A(LOGSCR08)\n         DC    A(LOGSCR09)\n         DC    A(LOGSCR10)\n         DC    A(LOGSCR11)\n         DC    A(LOGSCR12)\n         DC    A(LOGSCR13)\n         DC    A(LOGSCR14)\n         DC    A(LOGSCR15)\n         DC    A(LOGSCR16)\n         DC    A(LOGSCR17)\n         DC    A(LOGSCR18)\n         DC    A(LOGSCR19)\n         DC    X'80',AL3(LOGSCR20)\nLOGSCR01 DS    0H\n         DC    AL1(76),X'04'         , SBA = 0\n         DC    40C'* '\nLOGSCR02 DC    AL1(17),X'04',CL16'** EEEE        '\nLOGSCR03 DC    AL1(76),X'04',CL16'** EE          '\n DC C'                    (((-----)))                             '\nLOGSCR04 DC    AL1(76),X'04',CL16'** EEE         '\n DC C'                  ** (       )**                            '\nLOGSCR05 DC    AL1(76),X'04',CL16'** EE          '\n DC C'                 *( (        ) )*                           '\nLOGSCR06 DC    AL1(76),X'04',CL16'** EEEE MERGENCY'\n DC C'               ((                )                          '\nLOGSCR07 DC    AL1(72),X'04',CL16'*   '\n*DC C'              (  < (O) > < (O) >   )                        '\n DC C'              (  <',X'05'\n DC C'(O)',X'04'\n DC C'> <',X'05'\n DC C'(O)',X'04'\n DC C'>  )                        '\nLOGSCR08 DC    AL1(76),X'04',CL16'** TTTTT       '\n DC C'               ((       (       )))                         '\nLOGSCR09 DC    AL1(76),X'04',CL16'**   T         '\n DC C'               ((               )))                         '\nLOGSCR10 DC    AL1(76),X'04',CL16'**   T         '\n DC C'                ((((    ___   ))))                          '\nLOGSCR11 DC    AL1(76),X'04',CL16'**   T  ELE -  '\n DC C'                 ((((        ))))                           '\nLOGSCR12 DC    AL1(76),X'04',CL16'*   '\n DC C'                    ((      ))                              '\nLOGSCR13 DC    AL1(76),X'04',CL16'** PPPP        '\n DC C'                      )    /                                '\nLOGSCR14 DC    AL1(76),X'04',CL16'*   '\n DC C'                      |( (|                                 '\nLOGSCR15 DC    AL1(76),X'04',CL16'**  SS         '\n DC C'                      |) )|                                 '\nLOGSCR16 DC    AL1(17),X'04',CL16'** S           '\nLOGSCR17 DC    AL1(75),X'04',CL16'**  SS         '\n         DC    CL14'ENTER USER ID:'\n         DC    X'01'                 SF = UNPROT\n         DC    CL43'              '\nLOGSCR18 DC    AL1(75),X'04',CL16'**    S        '\n         DC    CL14' AND PASSWORD:'\n         DC    X'03'                 SF = UNPROT, NO DISPLAY\n         DC    CL47'              '\nLOGSCR19 DC    AL1(74),X'04',CL16'** SSS  YSTEM  '\n         DC    CL14'   RACF GROUP:'\n         DC    X'03'                 SF = UNPROT, NO DISPLAY\n         DC    CL28'              '\n         DC    X'05',CL17'VERSION 2.4      '\nLOGSCR20 DC    AL1(80),X'04',79C'*'\nLOGSCRSZ EQU   *-LOGSCREE\n         TITLE 'ETPS - PRIMARY OPTION MENU'\nPRIMOPT  CSECT\n         DC    A(PRIMEL1)\n         DC    A(PRIMEL2)\n         DC    A(PRIMEL3)\n         DC    A(PRIMEL4)\n         DC    A(PRIMEL5)\n         DC    A(PRIMEL6)\n         DC    A(PRIMEL7)\n         DC    A(PRIMEL8)\n         DC    A(PRIMEL9)\n         DC    A(PRIMEL10)\n         DC    A(PRIMEL11)\n         DC    X'80',AL3(PRIMEL12)\nPRIMEL1  DS    0H\n         DC    AL1(80)\n         DC    X'05'                 SF PROTECTED, HIGH-LIGHT    ATTR\n         DC    19C'-'\n         DC    CL40'       ETPS  -  PRIMARY OPTION MENU     '\n         DC    21C'-'\nPRIMEL2  DC    AL1(80)\n         DC    X'05'                 SF PROTECTED, HIGH-LIGHT    ATTR\n         DC    CL19'SELECT OPTION ===> '\n         DC    X'01'                 SF UNPROTECTED              ATTR\nPRIMHOME EQU   *-PRIMOPT\n         DC    CL60' '\nPRIMEL3  DC    AL1(80)\n         DC    X'04'                 SF   PROTECTED              ATTR\n         DC    CL61' '\nUOFF     EQU   *-PRIMEL3\n         DC    CL11'USERID   - '\n         DC    CL7'  '\nPRIMEL4  DC    AL1(80)\n         DC    X'05'                 SF PROTECTED, HIGH-LIGHT    ATTR\n         DC    CL6'   1  '\n         DC    X'04'                 SF   PROTECTED              ATTR\n DC CL54'BROWSE DATA                                           '\nTIMEOFF  EQU   *-PRIMEL4\n         DC    CL11'TIME     - '\n         DC    CL8'  '\n*\nPRIMEL5  DC    AL1(80)\n         DC    X'05'                 SF PROTECTED, HIGH-LIGHT    ATTR\n         DC    CL6'   2  '\n         DC    X'04'                 SF   PROTECTED              ATTR\n DC CL54'EDIT SOURCE DATA                                      '\nTERMOFF  EQU   *-PRIMEL5\n         DC    CL11'TERMINAL - '\n         DC    CL8'  '\n*\nPRIMEL6  DC    AL1(80)\n         DC    X'05'                 SF PROTECTED, HIGH-LIGHT    ATTR\n         DC    CL6'   3  '\n         DC    X'04'                 SF   PROTECTED              ATTR\n DC CL54'PDS UTILITY                                           '\n         DC    CL19' '\n*\nPRIMEL7  DC    AL1(80)\n         DC    X'05'                 SF PROTECTED, HIGH-LIGHT    ATTR\n         DC    CL6'   4  '\n         DC    X'04'                 SF   PROTECTED              ATTR\n DC CL54'IDCAMS (VSAM) INTERFACE                               '\n         DC    CL19' '\n*\nPRIMEL8  DC    AL1(80)\n         DC    X'05'                 SF PROTECTED, HIGH-LIGHT    ATTR\n         DC    CL6'      '\n         DC    X'04'                 SF   PROTECTED              ATTR\n DC CL54'                                                      '\n         DC    CL19' '\n*\nPRIMEL9  DC    AL1(80)\n         DC    X'05'                 SF PROTECTED, HIGH-LIGHT    ATTR\n         DC    CL6'      '\n         DC    X'04'                 SF   PROTECTED              ATTR\n DC CL54'                                                      '\n         DC    CL19' '\n*\nPRIMEL10 DC    AL1(80)\n         DC    X'05'                 SF PROTECTED, HIGH-LIGHT    ATTR\n         DC    CL6'   X  '\n         DC    X'04'                 SF   PROTECTED              ATTR\n DC CL54'EXIT       - TERMINATE ETPS AND RETURN TO LOGON MENU  '\n         DC    CL19' '\n*\nPRIMEL11 DC    AL1(80)\n         DC    X'04'                 SF PROTECTED                ATTR\n         DC    CL79' '\n*\nPRIMEL12 DC    AL1(80)\n         DC    X'04'                 SF   PROTECTED              ATTR\n         DC    CL6'PRESS '\n         DC    X'05'                 SF PROTECTED, HIGH-LIGHT    ATTR\n         DC    CL7'END KEY'\n         DC    X'04'                 SF   PROTECTED              ATTR\n         DC    CL52' TO TERMINATE ETPS'\n         DC    CL11'VERSION 2.4'\n*\nPRIMOPSZ EQU   *-PRIMOPT\n         TITLE 'ETPS - BROWSE MENU'\nBROWSCRN CSECT\n*\n* THIS IS THE BROWSE MENU\n*\n         DC    A(BROROW1)\n         DC    A(BROROW2)\n         DC    A(BROROW3)\n         DC    A(BROROW4)\n         DC    A(BROROW5)\n         DC    X'80',AL3(BROROW6)\nBROROW1  DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                    PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL21'BROWSE- ENTRY PANEL  '\n         DC    34C'-'\nBROROW2  DC    AL1(80)                  ROW 02, COL 01\n         DC    X'05'\n         DC    CL30'ENTER/VERIFY PARAMETERS BELOW:'\n         DC    X'01'\n         DC    CL49' '\nBROROW3  DC    AL1(80)                  ROW 03, COL 01\n         DC    X'01'\n         DC    CL22'FULLY-QUALIFIED DSNAME'\n         DC    X'05'\n         DC    CL4'==>'\n         DC    X'02'\n         DC    CL53' '\nBROROW4  DC    AL1(80)                  ROW 04, COL 01\n         DC    X'04'\n         DC    CL22'         VOLUME SERIAL'\n         DC    X'05'\n         DC    CL4'==>'\n         DC    X'02'\n         DC    CL6' '\n         DC    X'04'\n         DC    CL47'          (IF NOT CATALOGED)'\nBROROW5  DC    AL1(80)                  ROW 05, COL 01\n         DC    X'04'\n         DC    CL79' '\nBROROW6  DC    AL1(80)                  ROW 06, COL 01\n         DC    X'04'\n         DC    CL22'      DATASET PASSWORD'\n         DC    X'05'\n         DC    CL4'==>'\n         DC    X'03'              NO DISPLAY\n         DC    CL8' '\n         DC    X'04'\n         DC    CL45'        (IF PASSWORD PROTECTED)'\n         TITLE 'ETPS - EDIT OPTIONS MENU'\n*\n* THIS IS THE EDIT OPTIONS MENU\n*\nEDITOPT  CSECT\n         DC    A(EDTROW1)\n         DC    A(EDTROW2)\n         DC    A(EDTROW3)\n         DC    A(EDTROW4)\n         DC    A(EDTROW5)\n         DC    X'80',AL3(EDTROW6)\nEDTROW1  DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                    PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL21' EDIT - ENTRY PANEL  '\n         DC    34C'-'\nEDTROW2  DC    AL1(80)                  ROW 02, COL 01\n         DC    X'05'\n         DC    CL30'ENTER/VERIFY PARAMETERS BELOW:'\n         DC    X'01'\n         DC    CL49' '\nEDTROW3  DC    AL1(80)                  ROW 03, COL 01\n         DC    X'01'\n         DC    CL22'FULLY-QUALIFIED DSNAME'\n         DC    X'05'\n         DC    CL4'==>'\n         DC    X'02'\nEDTDSNAM EQU   *-EDITOPT\n         DC    CL53' '\nEDTROW4  DC    AL1(80)                  ROW 04, COL 01\n         DC    X'04'\n         DC    CL22'         VOLUME SERIAL'\n         DC    X'05'\n         DC    CL4'==>'\n         DC    X'02'\nEDTVOLSR EQU   *-EDITOPT\n         DC    CL6' '\n         DC    X'04'\n         DC    CL47'          (IF NOT CATALOGED)'\nEDTROW5  DC    AL1(80)                  ROW 05, COL 01\n         DC    X'04'\n         DC    CL79' '\nEDTROW6  DC    AL1(80)                  ROW 06, COL 01\n         DC    X'04'\n         DC    CL22'      DATASET PASSWORD'\n         DC    X'05'\n         DC    CL4'==>'\n         DC    X'03'              NO DISPLAY\n         DC    CL8' '\n         DC    X'04'\n         DC    CL45'        (IF PASSWORD PROTECTED)'\nEDITOPSZ EQU   *-EDITOPT\n*\n         TITLE 'ETPS - LIBRARY UTILITY MENU'\n*\n* THIS IS THE LIBRARY UTILITY MENU\n*\nUT1MENU  CSECT\n         DC    A(UT1ROW1)\n         DC    A(UT1ROW2)\n         DC    A(UT1ROW3)\n         DC    A(UT1ROW4)\n         DC    A(UT1ROW5)\n         DC    A(UT1ROW6)\n         DC    A(UT1ROW7)\n         DC    A(UT1ROW9)\n         DC    A(UT1ROW10)\n         DC    A(UT1ROW11)\n         DC    A(UT1ROW12)\n         DC    X'80',AL3(UT1ROW13)\nUT1ROW1  DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                    PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL21'UTILITY- ENTRY PANEL '\n         DC    34C'-'\nUT1ROW2  DC    AL1(32)\n         DC    X'05'                 SF PROTECTED, HIGH-LIGHT    ATTR\n         DC    CL19'SELECT OPTION ===> '\n         DC    X'01'                 SF UNPROTECTED              ATTR\n         DC    CL12' '\nUT1ROW3  DC    AL1(11)                  ROW 02, COL 01\n         DC    X'05'\n         DC    CL12' '\nUT1ROW4  DC    AL1(68)                  ROW 02, COL 01\n         DC    X'04',C'   '\n         DC    X'05',C'BLANK'\n         DC    X'04'\n         DC    CL25' - DISPLAY MEMBER LIST   '\n         DC    X'05',C'    C'\n         DC    X'04'\n         DC    CL26' - COMPRESS DATASET      '\nUT1ROW5  DC    AL1(68)                  ROW 02, COL 01\n         DC    X'04',C'   '\n         DC    X'05',C'     '\n         DC    X'04'\n         DC    CL25'                         '\n         DC    X'05',C'     '\n         DC    X'04'\n         DC    CL26'                         '\nUT1ROW6  DC    AL1(68)                  ROW 02, COL 01\n         DC    X'04',C'   '\n         DC    X'05',C'     '\n         DC    X'04'\n         DC    CL25'                         '\n         DC    X'05',C'     '\n         DC    X'04'\n         DC    CL26'                         '\nUT1ROW7  DC    AL1(68)                  ROW 02, COL 01\n         DC    X'04',C'   '\n         DC    X'05',C'     '\n         DC    X'04'\n         DC    CL25'                         '\n         DC    X'05',C'     '\n         DC    X'04'\n         DC    CL26'                         '\nUT1ROW8  DC    AL1(11)                  ROW 02, COL 01\n         DC    X'05'\n         DC    CL10' '\nUT1ROW9  DC    AL1(80)                  ROW 02, COL 01\n         DC    X'05'\n         DC    CL30'ENTER/VERIFY PARAMETERS BELOW:'\n         DC    X'04'\n         DC    CL50' '\nUT1ROW10 DC    AL1(80)                  ROW 03, COL 01\n         DC    X'04'\n         DC    CL22'FULLY-QUALIFIED DSNAME'\n         DC    X'05'\n         DC    CL4'==>'\n         DC    X'02'\n         DC    CL54' '\nUT1ROW11 DC    AL1(80)                  ROW 04, COL 01\n         DC    X'04'\n         DC    CL22'         VOLUME SERIAL'\n         DC    X'05'\n         DC    CL4'==>'\n         DC    X'02'\n         DC    CL6' '\n         DC    X'04'\n         DC    CL48'          (IF NOT CATALOGED)'\nUT1ROW12 DC    AL1(80)                  ROW 05, COL 01\n         DC    X'04'\n         DC    CL80' '\nUT1ROW13 DC    AL1(80)                  ROW 06, COL 01\n         DC    X'04'\n         DC    CL22'      DATASET PASSWORD'\n         DC    X'05'\n         DC    CL4'==>'\n         DC    X'03'              NO DISPLAY\n         DC    CL8' '\n         DC    X'04'\n         DC    CL46'        (IF PASSWORD PROTECTED)'\n         TITLE 'ETPS - FUNCTION NOT AVAILABLE DISPLAY'\n*\n* THIS IS DISPLAYED WHEN AN OPERATOR ATTEMPTS TO INVOKE A ETPS\n* FUNCTION THAT HAS NOT YET BEEN IMPLEMENTED.\n*\nNOTGOT   CSECT\n         DC    A(NOTGOT1)\n         DC    A(NOTGOT2)\n         DC    X'80',AL3(NOTGOT3)\nNOTGOT1  DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                    PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL21' NOT AVAILABLE       '\n         DC    34C'-'\nNOTGOT2  DC    AL1(31)                  ROW 02, COL 01\n         DC    X'05'\n         DC    CL30'THE OPTION YOU HAVE SELECTED  '\nNOTGOT3  DC    AL1(34)                  ROW 03, COL 01\n         DC    X'05'\n         DC    CL29'HAS NOT YET BEEN IMPLEMENTED.'\n         DC    X'02'\n         DC    CL2' '\n         TITLE 'HELP FOR ETPS PDS LIBRARY MEMBER DISPLAY'\n*\n* THIS IS THE HELP SCREEN FOR THE PDS OPTION\n*\nLIBHELP  CSECT\n         DC    A(LIBHELP1)\n         DC    A(LIBHELP2)\n         DC    A(LIBHELP3)\n         DC    A(LIBHELP4)\n         DC    A(LIBHELP5)\n         DC    A(LIBHELP6)\n         DC    A(LIBHELP7)\n         DC    X'80',AL3(LIBHELPZ)\nLIBHELP1 DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                    PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL21' PDS MEMBER OPTIONS  '\n         DC    34C'-'\nLIBHELP2 DC    AL1(10),X'05',CL12' '\nLIBHELP3 DC    AL1(51)\n         DC    X'05'\n         DC    CL50'S OR E ---  EDIT MEMBER                           '\nLIBHELP4 DC    AL1(51)\n         DC    X'05'\n         DC    CL50'     B ---  BROWSE MEMBER                         '\nLIBHELP5 DC    AL1(51)\n         DC    X'05'\n         DC    CL50'     D ---  DELETE MEMBER                         '\nLIBHELP6 DC    AL1(51)\n         DC    X'05'\n         DC    CL50'     R ---  RENAME MEMBER  (REQUIRES \"NEWNAME\")   '\nLIBHELP7 DC    AL1(51)\n         DC    X'05'\n         DC    CL50'     C ---  COPY   MEMBER  (REQUIRES \"NEWNAME\")   '\nLIBHELPZ DC    AL1(10),X'05',CL12' '\n         TITLE 'ETPS - HELP NOT AVAILABLE DISPLAY'\n*\n* THIS IS DISPLAYED WHEN AN OPERATOR ATTEMPTS TO INVOKE A ETPS\n* HELP SCREEN THAT HAS NOT YET BEEN IMPLEMENTED.\n*\nNOHELP   CSECT\n         DC    A(NOHELP1)\n         DC    A(NOHELP2)\n         DC    X'80',AL3(NOHELP3)\nNOHELP1  DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                    PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL21' NOT AVAILABLE       '\n         DC    34C'-'\nNOHELP2  DC    AL1(33)                  ROW 02, COL 01\n         DC    X'05'\n         DC    CL32'NO HELP INFORMATION IS AVAILABLE'\nNOHELP3  DC    AL1(33)                  ROW 03, COL 01\n         DC    X'05'\n         DC    CL29'FOR THIS SCREEN.             '\n         DC    X'02'\n         DC    CL2' '\n         TITLE 'ETPS - LIBRARY MANAGEMENT'\nETPSLIB2 CSECT\n*\n         DROP  13\n         DROP  12\n         DROP  11\n         DROP  10\n         USING *,12,11\n         USING SAVE2,13\n*\n         STM   R14,R12,12(R13)    SAVE INPUT REGS\n         LR    R12,R15            SET PROGRAM BASE REGISTER 1\n         L     R2,0(,R1)          SAVE PARM POINTER\n         LA    R11,72(,R13)       LEVEL 2 MODULE, SO BUMP TO SAVE2\n         ST    R13,4(,R11)       STORE BACKWARDS POINTER\n         ST    R11,8(R13)         STORE FORWARD POINTER\n         LR    R13,R11            SET DSECT BASE 1\n         LA    R3,1\n         LA    R11,4095(R3,R12)   SET PROGRAM BASE REGISTER 2\n         LA    R10,SPLITWRK       SET DSECT FOR SPLIT-SCREEN\n         USING SPLTAREA,10\n*\n         LM    R2,R8,0(R1)         PICK UP 7 PARMS\n*\n* R2=DSNAME\n* R3=DSN LENGTH\n* R4=VOLSER\n* R5=DSORG\n* R6=DDNAME\n* R7=PASSWORD, IF ANY\n* R8=MEMBER NAME, IF ANY\n*\n*                                ALLOCATE THE FILE\n*\n*\n         USING PARMLIST,6\n         L     R6,DYNWORK1   INITIALIZE DYNAMIC ALLOCATION WORK\n         MVI   0(R6),C' '\n         MVC   001(256,R6),000(R6)\n         MVC   255(255,R6),255(R6)\n*\n         MVC   LIBORG(3),0(R5)    DSORG\n*\n         SR    R1,1\n         IC    R1,0(,R3)          PICK UP LENGTH\n         BCTR  R1,0\n         EX    R1,EXMV1           DSNAME\n*\n         L     R9,LIBDCBA\n         MVC   DDNAME(8),40(R9) DDNAME\n         MVC   DSVOLSER(6),0(R4)  VOLSER\n         MVC   PASSWORD(8),0(R7)  PASSWORD\n         MVI   DSSTATUS,C'S'         SET DISP=SHR\n*\n         MVI   EDSELMEM,C' '      CLEAR MEMBER NAME FIELD\n         MVC   EDSELMEM+1(7),EDSELMEM\n         MVI   LOCNAME,C' '        NOT DOING LOCATE\n*\n         CLI   0(R8),X'41'         WAS A MEMBER NAME PROVIDED\n         BL    *+10                NOPE\n*\n         MVC   DSMEMBER(8),0(R8)  MEMBER NAME\n*\n         MVC   DSUNIT(8),=C'SYSALLDA'\n*\n         CLC   LIBORG,=C'SEQ'      IS THIS A SEQUENTIAL FILE\n         BE    LIBDYN3             YUP\n*\n         CLC   LIBORG,=C'PAN'      IS THIS A PAN LIBRARY\n         BE    LIBDYN4             YUP\n*\n         CLI   DSMEMBER,C' '       MEMBER SPECIFIED\n         BNE   LIBDYN2             YUP\n         B     LIBDYN1             NOPE, DISPLAY MEMBER SELECTION\n*\nEXMV1    MVC   DSNAME(1),0(R2)\n         EJECT\nLIBDYN1  DS    0H\n*\n         LA    R1,DYNWORK1\n         L     R15,=A(DYNAM)\n         BALR  R14,R15\n*\n         LTR   R15,15\n         BNZ   ERRMS23\n*\n         L     R2,LIBDCBA         PICK UP LIBRARY ADDRESS\n         XC    DIRPOINT(4),DIRPOINT    INITIALIZE\n         XC    DIRNOTE(4),DIRNOTE\n         XC    DIRTOP(4),DIRTOP\n         MVI   FIRSTMEM,C' '\nAPDSDCB  DS    0H\n*\n         TM    48(R2),16      IS IT OPEN ALREADY\n         BO    APDSOPND       YUP\n*\n*    OPEN FILE.\n*\n         MVI   PARMOP,X'80'   SET VL BIT\n         OPEN  ((2),(UPDAT)),MF=(E,PARMOP)\n*\n         TM    48(R2),16      TEST FOR GOOD OPEN\n         BZ    ERRMS25\n*\nAPDSOPND DS    0H\n         MVC   DECB(20),DIRECB\n*\n         MVI   DIREOFLG,0         INDICATE NOT AT EOF\n*\n*    PROCESS PDS.\n*\nREADNXT  DS    0H\n*\n         LA    R4,TERMOUT+4      PICK UP ADDR OF FIRST OUTPUT LINE\n         L     R8,SCROWS          PICK UP NUMBER OF ROWS\n         CLI   SPLIT,0           AM I DOING SPLIT-SCREEN?\n         BE    SETDIRNX          NOPE\n*\n         CLI   SPLIT,2           AM I ON SCREEN 2?\n         BE    SETDIRN2          YUP\n*\n         L     R8,SCROWS1        PICK UP NUMBER OF ROWS ON SCREEN 1\n         B     SETDIRNX          GO DO IT\n*\nSETDIRN2 DS    0H\n*\n         L     R8,SCROWS1        PICK UP NUMBER OF ROWS ON SCREEN 1\n         SLL   R8,2              MULTIPLY BY 4\n         LA    R4,TERMOUT+4(R8)  SET ADDRESS OF FIRST OUTPUT LINE\n         L     R8,SCROWS2        PICK UP NUMBER OF ROWS ON SCREEN 2\n*\nSETDIRNX DS    0H\n*\n         NI    0(R4),X'7F'        NOT END OF PARM LIST\n         L     R14,0(,R4)         PICK UP ADDR OF FIRST OUTPUT LINE\n         LA    R15,DIRROW1        PICK UP FIRST LINE OF INPUT\n         SR    R1,1\n         IC    R1,0(,R15)         PICK UP LENGTH\n         EX    R1,MVEDR                 PICK UP BUFFER ADDRESS\n         MVC   16(44,R14),EDTDSN1\n*\n         CLI   LIBFUNC,C'E'       INDICATE FUNCTION\n         BE    LIBROW2\n*\n         MVC   4(7,R14),=C'BROWSE '\n         CLI   LIBFUNC,C'B'       INDICATE FUNCTION\n         BE    LIBROW2\n*\n         MVC   4(8,R14),=C'UTILITY '\n*\n         LA    R14,DIRDSNAM(,14)   MOVE IN DSNAME\n         MVC   DIRDSN1(44),EDTDSN1\n*\nLIBROW2  DS    0H\n         L     R14,4(,R4)         BUMP\n         NI    4(R4),X'7F'        NOT END OF PARM LIST\n         LA    R15,DIRROW2        PICK UP NEXT LINE OF INPUT\n         IC    R1,0(,R15)         PICK UP LENGTH\n         EX    R1,MVEDR                 PICK UP BUFFER ADDRESS\n         L     R14,8(,R4)         BUMP\n         NI    8(R4),X'7F'        NOT END OF PARM LIST\n         LA    R15,DIRROW3        PICK UP NEXT LINE OF INPUT\n         IC    R1,0(,R15)         PICK UP LENGTH\n         EX    R1,MVEDR                 PICK UP BUFFER ADDRESS\n*\n         LA    R4,12(,R4)         SET R4 TO START OF BUILD AREA\n         LA    R1,4               SUBTRACT FIRST 3 ROWS\n         SR    R8,R1   MAX DIRECTORY MEMBERS FOR ONE SCREEN\n*\nREAD     EQU        *\n         L     R2,LIBDCBA\n         LA    R3,PDSKEY\n         READ  DECB,SF,(2),(3),'S',MF=E\n         CHECK DECB\n         NOTE  (R2)\n         ST    R1,DIRNOTE\n*\n         SR    R15,15\n         C     R15,DIRTOP      AT TOP OF MEMBER LIST\n         BNE   *+8             NO\n         ST    R1,DIRTOP       YES, RESET POINTER TO TOP\n*\n         LA    R9,10(,R3)          LOAD ADDRESS OF FIRST MEMBER\nNEXT     EQU        *\n         CLI   0(R9),X'FF'         TEST FOR END OF DIRECTORY\n         BE    DIRENDOF            BRANCH ON LAST USED BLOCK\n*\n         CLI   DIREOFLG,1          HAVE I  HIT EOF\n         BE    DIRENDOF            YUP\n*\n         USING DIRMASK,1           BRANCH ON LAST USED BLOCK\n         NI    0(R4),X'7F'        NOT END OF PARM LIST\n         L     R1,0(,R4)           BRANCH ON LAST USED BLOCK\n         MVI   0(R1),77           LENGTH OF DIR ENTRY\n         MVC   1(77,R1),DIRLIST4  MOVE IT IN\n*\n*\n         USING PDS2,9\n*\n*    AM I DOING LOCATE FUNCTION?\n*\n         CLI   LOCNAME,C' '        LOCATE?\n         BE    NOTDLOCF            NOPE\n*\n*\n         CLC   LOCNAME(1),PDS2NAME MATCH?\n         BL    GOTDLOCF            GONE PAST IT\n         BH    DIRBUMP1            IF HIGH, KEEP READING DIRECTORY\n*\n         CLI   LOCNAME+1,C' '      END OF STRING\n         BE    GOTDLOCF            YES, MATCHED UP TO HERE, SO OK\n         CLC   LOCNAME+1(1),PDS2NAME+1     MATCH?\n         BL    GOTDLOCF            GONE PAST IT\n         BH    DIRBUMP1            IF HIGH, KEEP READING DIRECTORY\n*\n         CLI   LOCNAME+2,C' '      END OF STRING\n         BE    GOTDLOCF            YES, MATCHED UP TO HERE, SO OK\n         CLC   LOCNAME+2(1),PDS2NAME+2     MATCH?\n         BL    GOTDLOCF            GONE PAST IT\n         BH    DIRBUMP1            IF HIGH, KEEP READING DIRECTORY\n*\n         CLI   LOCNAME+3,C' '      END OF STRING\n         BE    GOTDLOCF            YES, MATCHED UP TO HERE, SO OK\n         CLC   LOCNAME+3(1),PDS2NAME+3     MATCH?\n         BL    GOTDLOCF            GONE PAST IT\n         BH    DIRBUMP1            IF HIGH, KEEP READING DIRECTORY\n*\n         CLI   LOCNAME+4,C' '      END OF STRING\n         BE    GOTDLOCF            YES, MATCHED UP TO HERE, SO OK\n         CLC   LOCNAME+4(1),PDS2NAME+4     MATCH?\n         BL    GOTDLOCF            GONE PAST IT\n         BH    DIRBUMP1            IF HIGH, KEEP READING DIRECTORY\n*\n         CLI   LOCNAME+5,C' '      END OF STRING\n         BE    GOTDLOCF            YES, MATCHED UP TO HERE, SO OK\n         CLC   LOCNAME+5(1),PDS2NAME+5     MATCH?\n         BL    GOTDLOCF            GONE PAST IT\n         BH    DIRBUMP1            IF HIGH, KEEP READING DIRECTORY\n*\n         CLI   LOCNAME+6,C' '      END OF STRING\n         BE    GOTDLOCF            YES, MATCHED UP TO HERE, SO OK\n         CLC   LOCNAME+6(1),PDS2NAME+6     MATCH?\n         BL    GOTDLOCF            GONE PAST IT\n         BH    DIRBUMP1            IF HIGH, KEEP READING DIRECTORY\n*\n         CLI   LOCNAME+7,C' '      END OF STRING\n         BE    GOTDLOCF            YES, MATCHED UP TO HERE, SO OK\n         CLC   LOCNAME+7(1),PDS2NAME+7     MATCH?\n         BL    GOTDLOCF            GONE PAST IT\n         BH    DIRBUMP1            NOPE\n*\nGOTDLOCF DS    0H\n         MVI   LOCNAME,C' '        LOCATED MEMBER, SO TURN THIS OFF\n*\nNOTDLOCF DS    0H\n*\n*    FORMAT THE PDS MEMBER\n*\n         MVC   DIRNAME(8),PDS2NAME MOVE MEMBER NAME TO PRINT\n*\n         NI    PDS2INDC,X'1F'\n         CLI   PDS2INDC,X'0F'\n         BNE   NOTSPF\n*\n         LA    R14,PDS2USRD       START  OF USER AREA\n         USING SPFMT,14\n*\n*\n         SR    R15,R15\n         IC    R15,SPFVER\n         CVD   R15,PACK8\n         OI    PACK8+7,X'0F'\n         UNPK  DIRLEVEL(3),PACK8+6(2)\n         MVI   DIRLEVEL,C' '\n         IC    R15,SPFMOD\n         CVD   R15,PACK8\n         OI    PACK8+7,X'0F'\n         UNPK  DIRLEVEL+3(3),PACK8+6(2)\n         MVI   DIRLEVEL+3,C'.'\n         MVC   DIRLEVEL(5),DIRLEVEL+1\n         MVI   DIRLEVEL+5,C' '\n*\n         UNPK  DIRCREAT(5),SPFCRDT(3)     CREATION DATE\n         UNPK  DIRMOD(5),SPFMODT(3)     CREATION DATE\n*\n         SR    R15,15\n         ICM   R15,3,SPFSIZE\n         CVD   R15,PACK8\n         OI    PACK8+7,X'0F'\n         UNPK  DIRLINES(5),PACK8+5(3)\n*\n         MVC   DIRUSER(7),SPFUID\n*\nNOTSPF   DS    0H\n*\n         CLI   FIRSTMEM,C' '\n         BNE   *+10\n         MVC   FIRSTMEM(8),0(R9)    SET TOP OF LIST\n*\n         BCT   R8,DIRTNEXT         KEEP GOING\n*\n         B     DIRFMT\n*\nDIRTNEXT DS    0H\n         LA    R4,4(,4)   LOAD ADDRESS OF NEXT MEMBER\nDIRBUMP1 DS    0H\n         MVC   LASTMEM(8),0(R9)    SET IT\n         CLC   PDSKEY,0(R9)        TEST FOR LAST MEMBER IN BLOCK\n         BNH   READ\n         SR    R14,14\n         NI    11(R9),X'1F'       CLEAR ALIAS AND TTR FLAGS\n         IC    R14,11(,R9)       PICK UP USER DATA LENGTH IN HWORDS\n         SLL   R14,1             MULTIPLY BY 2\n         LA    R9,12(R14,R9)      LOAD ADDRESS OF NEXT MEMBER\n         B     NEXT\nDIRENDOF DS    0H\n         MVI   DIREOFLG,1         INDICATE I HAVE HIT EOF\n*\n         NI    0(R4),X'7F'        NOT END OF PARM LIST\n         L     R1,0(,R4)           BRANCH ON LAST USED BLOCK\n         MVI   0(R1),77           LENGTH OF DIR ENTRY\n         MVC   1(77,R1),DIRLIST4  MOVE IT IN\n*\n         MVC   DIRNAME(9),=C'** EOF **'\n*\n*\n         BCT   R8,DIREOFUP         KEEP GOING\n*\n         B     DIRFMT\n*\nDIREOFUP DS    0H\n         LA    R4,4(,4)   LOAD ADDRESS OF NEXT MEMBER\n         B     DIRENDOF+4\n         DROP  1\nDIRFMT   DS    0H\n*\n*\n         CLI   SPLIT,1            AM I ON TOP SCREEN\n         BE    *+8                YUP\n         OI    0(R4),X'80'        END OF PARM LIST\n*\n         L     R15,=A(LIBHELP)     DEFAULT HELP SCREEN\n         ST    R15,HELPADD\n*\n         MVI   AIDROW,01           CURSOR ROW\n         MVI   AIDCOL,21           CURSOR COLUMN\n         MVC   HOMEAID(2),AIDADDR  COPY\n*\n         L     R15,=A(COMM3)       GO COMMUNICATE\n         BALR  R14,R15\n*\n         LTR   R15,15                   BAD RC\n         BNZ   FREELIB                  OUT\n*\n*                   CHECK TO SEE WHETHER AN EDIT OPTION WAS ENTERED\n*\n         LM    R2,R5,TERMINPT      PICK UP FIRST REPLY FIELD\n*\n         CLI   SPLIT,2             AM I ON SECOND SCREEN\n         BNE   DIRFMTPF            NO, GO TEST PFKEY\n*\n         L     R3,SCROWS1        PICK UP NUMBER OF ROWS ON SCREEN 1\n         SLL   R3,2              MULTIPLY BY 4\n         LA    R3,TERMINPT+4(R3) SET ADDRESS OF FIRST INPUT LINE\n         LM    R3,R5,0(R3)       PICK UP FIRST REPLY FIELD\n*\nDIRFMTPF DS    0H\n         CLI   0(R2),X'6E'         PA 2\n         BNE   DIRCHKPF            NOPE\n*\n         MVC   LOCNAME(8),FIRSTMEM RE-LOCATE THE TOP OF DISPLAY\n         MVI   FIRSTMEM,C' '\n         B     EDDIRLC2            NOPE\n*\nDIRCHKPF DS    0H\n         MVI   FIRSTMEM,C' '\n         CLI   PFKFLAG,0           PFK/ATTN ENTERED?\n         BNE   EDDIRPFK            YUP\n*\n         CLI   0(R4),X'00'      COMMAND ENTERED?\n         BE    EDDIRSEL         NOPE\n*\n         CLC   22(2,R4),=C'PF'    END OF EDIT\n         BE    EDDIRPFK\n         CLC   22(3,R4),=C'END'   END OF EDIT\n         BE    EDDSNDUN\n*\n         CLC   22(3,R4),=C'ABE'   ABEND\n         BE    S0C1\n*\n         CLI   22(R4),C'L'        LOCATE?\n         BE    EDDIRLOC           YUP, GO LOCATE\n         CLI   22(R4),C'F'        ALLOW \"F\" FOR FIND AS WELL\n         BE    EDDIRLOC           GO LOCATE\n*\n* PUT OTHER TESTS FOR COMMAND LINE INPUT HERE\n*\n         LA    R1,ELERR01\n         ST    R1,MSGADD\n*\n         B     AMEMEOFG\n*\nELERR01  DC    CL20'INVALID COMMAND'\n*\nS0C1     DC    H'0'\n*\nMVEDR    MVC   0(1,R14),0(R15)    MOVE INPUT INTO INADDR WORK AREA\nEDDIRSEL DS    0H\n         MVI   LOCNAME,C' '      CLEAR TOP OF DIRECTORY\n         LA    R3,TERMINPT+16     POINT TO LINE 4\n         L     R4,SCROWS1        PICK UP NUMBER OF ROWS ON SCREEN 1\n         CLI   SPLIT,2             AM I ON SECOND SCREEN\n         BNE   EDIRSEL1            NO, GO ROLL\n*\n         L     R3,SCROWS1        PICK UP NUMBER OF ROWS ON SCREEN 1\n         SLL   R3,2              MULTIPLY BY 4\n         LA    R3,TERMINPT+16(R3) SET ADDRESS OF FIRST INPUT LINE\n         L     R4,SCROWS2        PICK UP NUMBER OF ROWS ON SCREEN 2\n*\nEDIRSEL1 DS    0H\n         LA    R1,3               SUBTRACT FIRST 3 ROWS\n         SR    R4,R1   MAX DIRECTORY MEMBERS FOR ONE SCREEN\n*\nEDIRSEL2 DS    0H\n         L     R5,0(,R3)          POINT TO EACH LINE IN TURN\n         CLI   0(R5),X'00'        ANY INPUT?\n         BNE   EDIRSEL4           YUP\nEDIRSEL3 DS    0H\n         LA    R3,4(,R3)          POINT TO NEXT LINE\n         BCT   R4,EDIRSEL2\n         CLI   LOCNAME,C' '      LOCNAME ALREADY SET?\n         BNE   AMEMEOFG          YES\n         MVC   LOCNAME(8),LASTMEM NO, SO SET IT\n         B     AMEMEOFG           GO SHOW MORE\nEDIRSEL4 DS    0H\n*\n         CLI   LOCNAME,C' '      LOCNAME ALREADY SET?\n         BNE   *+10              YES\n         MVC   LOCNAME(8),6(R5)  NO, SO SET IT\n*\n         MVC   SELFUNC(1),2(R5)  SET SELECT CODE\n         MVI   2(R5),C' '        CLEAR IT\n*\n         CLI   SELFUNC,C'S'      SELECT CODE?\n         BE    DIRMEMBR          YES PROCESS IT\n*\n         CLI   SELFUNC,C'B'      BROWSE\n         BE    DIRMEMBR          GO  PROCESS IT\n*\n         CLI   SELFUNC,C'E'      EDIT\n         BE    DIRMEMBR          GO  PROCESS IT\n*\n         CLI   SELFUNC,C'D'      DELETE\n         BE    MEMDEL            YES\n         CLI   SELFUNC,C'R'      RENAME\n         BE    MEMREN            YES\n         CLI   SELFUNC,C'C'      COPY\n         BE    MEMCOPY           YES\n*\n* PUT TESTS FOR OTHER SELECTION CODES HERE\n*\n         B     EDIRSEL3           TEST NEXT LINE\n*\nDIRMEMBR DS    0H\n*\n         L     R1,DYNWORK1   INITIALIZE DYNAMIC ALLOCATION WORK\n         MVI   0(R1),C' '\n         MVC   001(256,R1),000(R1)\n         MVC   255(255,R1),255(R1)\n*\n         MVC   EDSELMEM(8),6(R5)    MEMBER SELECTED\n         MVC   DSMEMBER(8),EDSELMEM\n         L     R4,MEMDCBA\n         MVC   DDNAME(8),40(R4)     SET DDNAME TO SHOW MEMBER\n         L     R1,=A(SEQDCB)\n         MVC   0(96,R4),0(R1)\n         MVC   40(8,R4),DDNAME      SET DDNAME TO SHOW MEMBER\n         MVC   DSNAME(44),EDTDSN1   SET DSNAME OF LIBRARY\n         MVI   DSSTATUS,C'S'            STATUS, DISP=SHR\n         MVC   DSVOLSER(6),EDTVOL1\n         MVC   PASSWORD(8),EDTPAS1\n         MVC   DSUNIT(8),=C'SYSALLDA'\n*\n         LA    R1,DYNWORK1\n         L     R15,=A(DYNAM)\n         BALR  R14,R15\n*\n         LTR   R15,15\n         BNZ   ERRMS32\n*\n         CLI   SELFUNC,C'B'         IS BROWSE REQUESTED\n         BE    MEMBRO               YES\n*\n         CLI   LIBFUNC,C'B'         IS BROWSE REQUESTED\n         BE    MEMBRO               YES\n*\n         LA    R1,AMEMEOF1\n         STCM  R1,7,33(R4)\n         SR    R3,3           CLEAR RECORD COUNTER\n*\n         MVI   PARMOP,X'80'   SET VL BIT\n         OPEN  ((4),(INPUT)),MF=(E,PARMOP)\n*\n         TM    48(R4),X'10'   GOOD OPEN\n         BZ    ERRMS28        NOPE\n*\nAMEMCOUN DS    0H\n*\n         GET   (4),EDAFTSV1\n         LA    R3,1(,3)       BUMP COUNTER\n         B     AMEMCOUN\n*\nERRMS28  WTO   'ETPS1028 OPEN FAILED FOR LIB(MEM)         ',ROUTCDE=11\n         LA    R1,ERRMS28+13\n         ST    R1,MSGADD\n         B     AMEMEOFF           SKIP IT\nERRMS26  WTO   'ETPS1026 PREMATURE EOF                    ',ROUTCDE=11\n         LA    R1,ERRMS26+13\n         ST    R1,MSGADD\n         B     AMEMEOFF           SKIP IT\n*\nMEMBRO   DS    0H\n         LA    R2,DSNAME\n         LA    R8,DSMEMBER\n         LA    R5,LIBORG\n*\n         LOAD  EP=ETPSBRO3\n         LR    R15,R0\n* PARM LIST FOR BROWSE IS : DCB, DSN, MEMBER NAME, DSORG\n         CALL  (15),((4),(2),(8),(5)),                                 X\n               VL,MF=(E,PARM43)\n        DELETE EP=ETPSBRO3\n         B     AMEMEOFR\n*\nAMEMEOF1 DS    0H\n*\n         MVI   PARMOP,128\n         CLOSE ((4)),MF=(E,PARMOP)\n*\nAMEMEOFF DS    0H\n         ST    R3,SEQRNUM\n         LA    R3,SEQRNUM\n         LA    R2,DSNAME\n         LA    R8,DSMEMBER\n         LA    R5,LIBORG\n*\n         LOAD  EP=ETPSEDT3\n         LR    R15,R0\n* PARM LIST FOR EDITOR IS : DCB, DSN, MEMBER NAME, DSORG, NUM RECS\n         CALL  (15),((4),(2),(8),(5),(3)),                             X\n               VL,MF=(E,PARM43)\n        DELETE EP=ETPSEDT3\n*\nAMEMEOFR DS    0H\n         L     R1,DYNWORK1   INITIALIZE DYNAMIC ALLOCATION WORK\n         MVI   0(R1),C' '\n         MVC   001(256,R1),000(R1)\n         MVC   255(255,R1),255(R1)\n*\n         MVI   DSNAME,X'00'       INDICATE FREE REQUEST\n         MVC   DSNAME+1(43),DSNAME\n         MVC   DDNAME(8),40(R4)     SET DDNAME TO SHOW MEMBER\n         LA    R1,DYNWORK1\n         L     R15,=A(DYNAM)\n         BALR  R14,R15\n*\n         LTR   R15,R15\n         BZ    AMEMEOFG           OK, CONTINUE\n        WTO   'ETPSLIB2 - DYN FREE FOR LIB(MEM) FAILED   ',ROUTCDE=11\n*\nAMEMEOFG DS    0H\n*\n         MVI   DSMEMBER,C' '      CLEAR MEMBER NAME FIELD\n         MVC   DSMEMBER+1(7),DSMEMBER\n         MVI   EDSELMEM,C' '      CLEAR MEMBER NAME FIELD\n         MVC   EDSELMEM+1(7),EDSELMEM\n         B     EDDIRLC2\n*\nEDDIRLOC DS    0H\n*                   LOCATE MEMBER IN LIBRARY\n         MVC   LOCNAME(8),27(R4)   MOVE IN \"LOCATE\" NAME\nEDDIRLC2 DS    0H\n         L     R2,LIBDCBA          POINT TO START OF LIBRARY DIR\n         POINT (2),POINT0\n         B     APDSDCB\n*\nPOINT0   DC    F'256'\nERRMS32  WTO   'ETPS1032 ALLOC FAILED FOR LIB(MEM)        ',ROUTCDE=11\n         LA    R1,ERRMS32+13\n         ST    R1,MSGADD\n         L     R1,DYNWORK1         PICK UP PARAMETER BASE\n         LM    R2,R3,DYNRCODE      PICK UP ERROR CODES\n         DC    H'0'\n         B     AMEMEOFG           SKIP IT\n*\n         TITLE 'ETPS LIBRARY MANAGEMENT -- DELETE MEMBER'\nMEMDEL   DS    0H\n*\n         L     R1,LIBDCBA         POINT TO LIBRARY\n         LA    R0,6(,R5)          POINT TO MEMBER NAME\n         STOW  (1),(0),D\n*\n         B     EDIRSEL3           CHECK FOR ANOTHER MEMBER SELECTED\n*\n         TITLE 'ETPS LIBRARY MANAGEMENT -- RENAME MEMBER'\nMEMREN   DS    0H\n*\n         L     R1,DYNWORK1        POINT TO MEMBER NAME\n         MVC   0(8,R1),6(R5)      MOVE CURRENT NAME\n         MVC   8(8,R1),17(R5)     MOVE NEW     NAME\n*\n         LR    R0,R1              POINT TO MEMBER NAME\n         L     R1,LIBDCBA         POINT TO LIBRARY\n         STOW  (1),(0),C\n*\n         B     EDIRSEL3           CHECK FOR ANOTHER MEMBER SELECTED\n*\n         TITLE 'ETPS LIBRARY MANAGEMENT -- COPY MEMBER'\nMEMCOPY  DS    0H\n*\n         OI    EDTVOL1,C' '\n         CLI   EDTVOL1,C' '\n         BNE   *+10\n         MVC   EDTVOL1(6),DIRVOL\n*\n         L     R1,DYNWORK1         USE THIS AS WORK AREA\n         LA    R15,EDTDSN1         POINT TO LIBRARY DSNAME\n         ST    R15,00(,R1)\n         LA    R15,6(,R5)          CURRENT MEMBER\n         ST    R15,04(,R1)\n         LA    R15,EDTVOL1         VOLSER\n         ST    R15,08(,R1)\n         LA    R15,EDTPAS1         PASSWORD, IF ANY\n         ST    R15,12(,R1)\n*\n         LA    R15,EDTDSN1         POINT TO LIBRARY DSNAME\n         ST    R15,16(,R1)\n         LA    R15,17(,R5)         NEW MEMBER\n         ST    R15,20(,R1)\n         LA    R15,EDTVOL1         VOLSER\n         ST    R15,24(,R1)\n         LA    R15,EDTPAS1         PASSWORD, IF ANY\n         ST    R15,28(,R1)\n         OI    28(R1),X'80'\n         LINK  EP=ETPSMEMC\n*\n         B     EDIRSEL3           CHECK FOR ANOTHER MEMBER SELECTED\n*\n         TITLE 'ETPS LIBRARY MANAGEMENT -- TEST PF KEY'\nEDDIRPFK DS    0H\n*                   PF KEY WAS ENTERED, SEE WHAT IT WAS\n*\n         CLI   0(R2),X'7D'         IS IT ENTER\n         BE    EDDIRSEL            YUP  - GO SEE WHAT WAS ENTERED\n*\n         CLI   0(R2),X'F3'         IS IT PF3\n         BE    EDDSNDUN            YUP  - ALL DONE\n         CLI   0(R2),X'C3'         IS IT PF15\n         BE    EDDSNDUN            YUP  - ALL DONE\n*\n         CLI   0(R2),X'F8'         IS IT PF8\n         BE    EDMORDIR            YUP  - SHOW NEXT SCREEN OF DIR\n         CLI   0(R2),X'C8'         IS IT PF20\n         BE    EDMORDIR            YUP  - SHOW NEXT SCREEN OF DIR\n*\n         CLI   0(R2),X'F7'         IS IT PF7\n         BE    EDPREDIR            YUP  - SHOW PREV SCREEN OF DIR\n         CLI   0(R2),X'C7'         IS IT PF19\n         BE    EDPREDIR            YUP  - SHOW PREV SCREEN OF DIR\n*\n         CLI   0(R2),X'6C'         IS IT PA1\n         BE    EDDSNDUN            YUP  - ALL DONE\n*\n         CLI   0(R2),X'6E'         IS IT PA2\n         BE    DIRFMT              YUP  - GO RESHOW THE SCREEN\n*\n         CLI   0(R2),X'6D'         IS IT \"CLEAR\"\n         BE    DIRFMT              YUP  - GO RESHOW THE SCREEN\n*\n         B     EDDSNDUN            ALL OTHER PFK'S\n*\nEDMORDIR DS    0H\n*                   SHOW MORE DIRECTORY INFO\n*\n*\n         LA    R4,TERMOUT+4      PICK UP ADDR OF FIRST OUTPUT LINE\n         L     R8,SCROWS1         PICK UP NUMBER OF ROWS\n         CLI   SPLIT,2           AM I DOING SPLIT-SCREEN?\n         BNE   SETMORNX          NOPE\n*\nSETMORN2 DS    0H\n*\n         SLL   R8,2              MULTIPLY BY 4\n         LA    R4,TERMOUT+4(R8)  SET ADDRESS OF FIRST OUTPUT LINE\n         L     R8,SCROWS2        PICK UP NUMBER OF ROWS ON SCREEN 2\n*\nSETMORNX DS    0H\n*\n         NI    0(R4),X'7F'        NOT END OF PARM LIST\n         L     R14,0(,R4)         PICK UP ADDR OF FIRST OUTPUT LINE\n*\n         LA    R15,DIRROW1        PICK UP FIRST LINE OF INPUT\n         SR    R1,1\n         IC    R1,0(,R15)         PICK UP LENGTH\n         EX    R1,MVEDR                 PICK UP BUFFER ADDRESS\n         MVC   16(44,R14),EDTDSN1\n*\n         CLI   LIBFUNC,C'E'       INDICATE FUNCTION\n         BE    LIBROW22\n*\n         MVC   4(7,R14),=C'BROWSE '\n         CLI   LIBFUNC,C'B'       INDICATE FUNCTION\n         BE    LIBROW22\n*\n         MVC   4(8,R14),=C'UTILITY '\n*\n         LA    R14,DIRDSNAM(,14)   MOVE IN DSNAME\n         MVC   DIRDSN1(44),EDTDSN1\n*\nLIBROW22 DS    0H\n         L     R14,4(,R4)         BUMP\n         NI    4(R4),X'7F'        NOT END OF PARM LIST\n         LA    R15,DIRROW2        PICK UP NEXT LINE OF INPUT\n         IC    R1,0(,R15)         PICK UP LENGTH\n         EX    R1,MVEDR                 PICK UP BUFFER ADDRESS\n         L     R14,8(,R4)         BUMP\n         NI    8(R4),X'7F'        NOT END OF PARM LIST\n         LA    R15,DIRROW3        PICK UP NEXT LINE OF INPUT\n         IC    R1,0(,R15)         PICK UP LENGTH\n         EX    R1,MVEDR                 PICK UP BUFFER ADDRESS\n*\n         LA    R4,8(,4)           SET R4 TO START OF BUILD AREA, -1 ROW\n         LA    R1,3               SUBTRACT FIRST 3 ROWS\n         SR    R8,R1   MAX DIRECTORY MEMBERS FOR ONE SCREEN\n*\n         L     R2,LIBDCBA\n         XC    DIRTOP(4),DIRTOP\n         CLI   LOCNAME,C' '        \"LOCATE\" NAME PRESENT\n         BE    DIRTNEXT            NOPE\n         LA    R4,4(,4)           SET R4 TO START OF BUILD AREA\n         B     READ\n*\nEDPREDIR DS    0H\n*\n*                   SHOW PREV DIRECTORY INFO\n*\n         MVC   DIRPOINT(4),DIRTOP   SET LAST BLOCK READ\n         CLI   DIRPOINT+2,1         AM I ON BLOCK 1\n         BE    EDPRETRK             YES, JUST SUBTRACT FROM TRACK\n*\n         SR    R2,2\n         IC    R2,DIRPOINT+2        PICK UP TRACK NUMBER\n         BCTR  R2,0                 SUBTRACT 1\n         STC   R2,DIRPOINT+2\n         CLI   DIRPOINT+2,1         AM I ON BLOCK 1\n         BE    EDPRETRK             YES, JUST SUBTRACT FROM TRACK\n         BCTR  R2,0                 SUBTRACT 2\n         STC   R2,DIRPOINT+2\n         CLI   DIRPOINT+2,1         AM I ON BLOCK 1\n         BE    EDPRETRK             YES, JUST SUBTRACT FROM TRACK\n         BCTR  R2,0                 SUBTRACT 3\n         STC   R2,DIRPOINT+2\n*\n         B     EDPREPOI             GO POINT TO IT\n*\nEDPRETRK DS    0H\n         SR    R2,2\n         CH    R2,DIRPOINT          AM I ON TRACK 0\n         BE    EDPREPOI             GO POINT TO IT\n         LH    R2,DIRPOINT          AM I ON TRACK 0\n         BCTR  R2,0\n         STH   R2,DIRPOINT          AM I ON TRACK 0\n         MVI   DIRPOINT+2,X'10'     POINT TO BLOCK 16\nEDPREPOI DS    0H\n         L     R2,LIBDCBA\n         POINT (2),DIRPOINT\n         XC    DIRTOP(4),DIRTOP\n         MVI   DSMEMBER,C' '      CLEAR MEMBER NAME FIELD\n         MVC   DSMEMBER+1(7),DSMEMBER\n         MVI   LOCNAME,C' ' NOTLOOKING FOR PARTICULAR MEMBER\n         B     APDSDCB\n*\n         EJECT\nLIBDYN2  DS    0H\n*\n         LA    R1,DYNWORK1\n         L     R15,=A(DYNAM)\n         BALR  R14,R15\n*\n         LTR   R15,15\n         BNZ   ERRMS23\n*\n         L     R4,MEMDCBA         PICK UP LIBRARY ADDRESS\n         MVC   40(8,R4),DDNAME    SET DDNAME\n*\n         CLI   LIBFUNC,C'E'       EDIT SEQUENTIAL\n         BE    MEMEDIT            YES\n         CLI   LIBFUNC,C'B'       BROWSE SEQ\n         BE    MEMBROWS           YES\n         B     MEMFREE\n*\nMEMEDIT  DS    0H\n*\n*\n         LA    R1,AMEMEOF2\n         STCM  R1,7,33(R4)\n         SR    R3,3           CLEAR RECORD COUNTER\n*\n         MVI   PARMOP,X'80'   SET VL BIT\n         OPEN  ((4),(INPUT)),MF=(E,PARMOP)\n*\n         TM    48(R4),X'10'   GOOD OPEN\n         BZ    ERRMS28M       NOPE\n*\nBMEMCOUN DS    0H\n*\n         GET   (4),EDAFTSV1\n         LA    R3,1(,3)       BUMP COUNTER\n         B     BMEMCOUN\n*\nERRMS28M WTO   'ETPS1028 OPEN FAILED FOR LIB(MEM)         ',ROUTCDE=11\n         LA    R1,ERRMS28+13\n         ST    R1,MSGADD\n         B     MEMFREE            SKIP IT\n*\nAMEMEOF2 DS    0H\n*\n         MVI   PARMOP,128\n         CLOSE ((4)),MF=(E,PARMOP)\n*\n         ST    R3,SEQRNUM\n         LA    R3,SEQRNUM\n         LA    R2,DSNAME\n         LA    R8,DSMEMBER\n         LA    R5,LIBORG\n*\n         LOAD  EP=ETPSEDT3\n         LR    R15,R0\n* PARM LIST FOR EDITOR IS : DCB, DSN, MEMBER NAME, DSORG, NUM RECS\n         CALL  (15),((4),(2),(8),(5),(3)),                             X\n               VL,MF=(E,PARM43)\n        DELETE EP=ETPSEDT3\n*\n         B     MEMFREE\n*\nMEMBROWS DS    0H\n         LA    R2,DSNAME\n         LA    R8,DSMEMBER\n         LA    R5,LIBORG\n*\n         LOAD  EP=ETPSBRO3\n         LR    R15,R0\n* PARM LIST FOR BROWSE IS : DCB, DSN, MEMBER NAME, DSORG\n         CALL  (15),((4),(2),(8),(5)),                                 X\n               VL,MF=(E,PARM43)\n        DELETE EP=ETPSBRO3\n*\nMEMFREE  DS    0H\n         L     R1,DYNWORK1   INITIALIZE DYNAMIC ALLOCATION WORK\n         MVI   0(R1),C' '\n         MVC   001(256,R1),000(R1)\n         MVC   255(255,R1),255(R1)\n*\n         MVI   DSNAME,X'00'       INDICATE FREE REQUEST\n         MVC   DSNAME+1(43),DSNAME\n         MVC   DDNAME(8),40(R4)     SET DDNAME TO SHOW MEMBER\n         LA    R1,DYNWORK1\n         L     R15,=A(DYNAM)\n         BALR  R14,R15\n*\n*\n         B     DIRRETRN\n*\n         EJECT\nLIBDYN3  DS    0H\n*\n*\n         LA    R1,DYNWORK1\n         L     R15,=A(DYNAM)\n         BALR  R14,R15\n*\n         LTR   R15,15\n         BNZ   ERRMS23\n*\n         L     R4,COPDCBA         PICK UP LIBRARY ADDRESS\n         MVC   40(8,R4),DDNAME    SET DDNAME\n*\n         CLI   LIBFUNC,C'E'       EDIT SEQUENTIAL\n         BE    SEQEDIT            YES\n         CLI   LIBFUNC,C'B'       BROWSE SEQ\n         BE    SEQBRO             YES\n         B     SEQFREE\n*\nSEQEDIT  DS    0H\n*\n         B     MEMEDIT\n*\nSEQBRO   DS    0H\n*\n         B     MEMBROWS\n*\nSEQFREE  DS    0H\n*\n         B     MEMFREE\n*\n*\n         EJECT\nLIBDYN4  DS    0H\n*\n         B     FREELIB             AND I'M DONE\n*\n         EJECT\nEDDSNDUN DS    0H\n*                   DONE EDITING THIS FILE, SO FREE IT\n*\nFREELIB  DS    0H\n         LA    R4,LIBDCBA\n         LA    R3,4\nBUMPLIB1 DS    0H\n         L     R2,0(,R4)\n         TM    48(R2),X'10'\n         BZ    BUMPLIB2\n         MVI   PARMOP,128\n         CLOSE ((2)),MF=(E,PARMOP)\nBUMPLIB2 DS    0H\n*\n         L     R1,DYNWORK1   INITIALIZE DYNAMIC ALLOCATION WORK\n         MVI   0(R1),C' '\n         MVC   001(256,R1),000(R1)\n         MVC   255(255,R1),255(R1)\n*\n         MVI   DSNAME,X'00'\n         MVC   DSNAME+1(43),DSNAME\n         MVC   DDNAME(8),40(R2)     SET DDNAME FOR FREE\n         LA    R1,DYNWORK1\n         L     R15,=A(DYNAM)\n         BALR  R14,R15\n         LA    R4,4(,4)\n         BCT   R3,BUMPLIB1        SEQ ALLOCATED\nEOJ      DS    0H\nDIRRETRN DS    0H\n         L     R13,4(,13)               RESTORE CALLERS REGS\n         LM    R14,R12,12(R13)          RESTORE CALLERS REGS\n         BR    R14                      NORMAL RETURN\nERRMS23  DS    0H\n         CLC   DYNRCODE(2),ALLO0210\n         BE    ERRINUSE\n         WTO   'ETPS1023 ALLOC FAILED FOR LIB             ',ROUTCDE=11\n         LA    R1,ERRMS23+17\n         ST    R1,MSGADD\n         L     R1,DYNWORK1         PICK UP PARAMETER BASE\n         B     EDDSNDUN            YUP  - ALL DONE\nERRINUSE DS    0H\n         LA    R1,ALLO0210+2\n         ST    R1,MSGADD\n         B     EDDSNDUN            YUP  - ALL DONE\nALLO0210 DC    X'0210',CL20'0210-DATASET IN USE '\nERRMS25  WTO   'ETPS1025 OPEN FAILED FOR LIB             ',ROUTCDE=11\n         LA    R1,ERRMS25+13\n         ST    R1,MSGADD\n         B     EDDSNDUN            YUP  - ALL DONE\n         LTORG\n*\nPDSDIR   DCB      DSORG=PS,MACRF=(RP,WP),DDNAME=PPROCLIB,RECFM=F,      C\n               LRECL=256,BLKSIZE=256,KEYLEN=8,EODAD=DIRENDOF\n         READ  DIRECB,SF,PDSDIR,PDSDIR,'S',MF=L\n         TITLE 'ETPS - DIRECTORY LIST FORMAT'\n*\n* THIS IS THE FORMAT FOR A PDS OR PAN LIBRARY DIRECTORY LISTING.\n*\nDIRTITLE DS    0F\nDIRROW1  DC    AL1(80)\n         DC    X'05'\n         DC    CL8'   EDIT '\n         DC    C'- '\nDIRDSNAM EQU   *-DIRTITLE\n         DC    69C'-'\nDIRROW2  DC    AL1(80)\n         DC    X'05'\n         DC    CL19'COMMAND INPUT ===> '\n         DC    X'01'\nDIRHOME  EQU   *-DIRTITLE\n         DC    CL40' '\n         DC    X'05'\n         DC    CL13' SCROLL ===> '\n         DC    X'01'\n         DC    CL4'PAGE'\nDIRROW3  DC    AL1(70)\n         DC    X'04'\n         DC    CL23'   NAME       NEWNAME '\n         DC    CL7'    LVL'\n         DC    CL9' CREATED '\n         DC    CL16' LAST MODIFIED  '\n         DC    CL4'    '\n         DC    CL6'SIZE  '\n         DC    CL4' ID '\nDIRTLENG EQU   *-DIRTITLE\n*\nDIRLIST4 DS    0XL1\n       DC X'01',C' ',X'04',CL12' ',X'01',CL10' ',X'04',CL46' '\nDIRELEN  EQU   *-DIRLIST4\n*\n         LTORG\n         TITLE 'ETPS - TERMINAL COMMUNICATIONS SUBROUTINE'\n*\n*     CONSOLE I/O SUBROUTINE.\n*\n         SPACE 5\n******** COMMUNICATIONS SUBROUTINE - EXCP INTERFACE\nCOMM2    CSECT\n         DROP  13\n         DROP  12\n         DROP  11\n         DROP  10\n         USING *,12,11\n         USING SAVE2,13,10\n*\n         STM   R14,R12,12(R13)    SAVE INPUT REGS\n         LR    R12,R15            SET PROGRAM BASE REGISTER 1\n         LA    R11,72(,R13)       LEVEL 2 MODULE, SO BUMP TO SAVE2\n         ST    R13,4(,R11)       STORE BACKWARDS POINTER\n         ST    R11,8(R13)         STORE FORWARD POINTER\n         LR    R13,R11            SET DSECT BASE 1\n         L     R15,=A(COMM3)\n         BALR  R14,R15\n         L     R13,4(,13)               RESTORE CALLERS REGS\n         LM    R0,R12,20(R13)          RESTORE CALLERS REGS\n         L     R14,12(R13)              PRESERVE R15\n         BR    R14                      NORMAL RETURN\n         LTORG\nCOMM3    CSECT\n         DROP  13\n         DROP  12\n         DROP  11\n         DROP  10\n         USING *,12,11\n         USING SAVE3,13,10\n*\n         STM   R14,R12,12(R13)    SAVE INPUT REGS\n         LR    R12,R15            SET PROGRAM BASE REGISTER 1\n         LA    R11,72(,R13)       LEVEL 3 MODULE, SO BUMP TO SAVE3\n         ST    R13,4(,R11)       STORE BACKWARDS POINTER\n         ST    R11,8(R13)         STORE FORWARD POINTER\n         LR    R13,R11            SET DSECT BASE 1\n         L     R15,=A(COMM4)\n         BALR  R14,R15\n         L     R13,4(,13)               RESTORE CALLERS REGS\n         LM    R0,R12,20(R13)          RESTORE CALLERS REGS\n         L     R14,12(R13)              PRESERVE R15\n         BR    R14                      NORMAL RETURN\n         LTORG\nCOMM4    CSECT\n         DROP  13\n         DROP  12\n         DROP  11\n         DROP  10\n         USING *,12,11\n         USING SAVE4,13\n*\n         STM   R14,R12,12(R13)    SAVE INPUT REGS\n         LR    R12,R15            SET PROGRAM BASE REGISTER 1\n         LA    R11,72(,R13)       LEVEL 4 MODULE, SO BUMP TO SAVE4\n         ST    R13,4(,R11)       STORE BACKWARDS POINTER\n         ST    R11,8(R13)         STORE FORWARD POINTER\n         LR    R13,R11            SET DSECT BASE 1\n         LA    R3,1\n         LA    R11,4095(R3,R12)   SET PROGRAM BASE REGISTER 2\n         LA    R10,4095(R3,R13)   SET DSECT BASE 2\n         LA    R10,SPLITWRK       SET DSECT FOR SPLIT-SCREEN\n         USING SPLTAREA,10\n*\nRESCREEN DS    0H\n*\n         MVI   HELPFLAG,0         INDICATE \"NOT DOING HELP\"\n         L     R9,SCROWS          PICK UP TERMINAL SCREEN SIZE\n*\n*\nBLDBUFF  DS    0H\n*\n         SR    R5,5                     LENGTH COUNTER\n*\n         L     R7,BUFF                  ACTUAL WRITE BUFFER\n         MVI   0(R7),X'7E'              ERASE-WRITE-ALTERNATE\n         MVC   1(1,R7),USUALWCC         NO ALARM\n         LA    R7,2(,7)                 BUMP ADDRESS\n         LA    R5,2(,5)                 BUMP COUNTER\n*\n         L     R8,SBACODES              PICK UP LINE 1\n*\n         LA    R6,TERMOUT+4             PICK UP LINE 1\n*\n         CLI   HELPFLAG,0               AM I DOING HELP\n         BE    BLDBUFFS                 NOPE\n         L     R6,HELPADD               YUP\n*\nBLDBUFFS DS    0H\n*\n         MVC   0(1,R7),SBACODE          ADDRESS OF FROM FIELD\n         MVC   1(2,R7),0(R8)            ADDRESS OF FROM FIELD\n         LA    R7,3(,7)                 BUMP ADDRESS\n         LA    R5,3(,5)                 BUMP COUNTER\n*\n         L     R2,0(,R6)                ADDRESS OF FROM FIELD\n*\n         CLI   0(R2),0                  IS LENGTH ZERO?\n         BNE   *+8                      NOPE\n         MVI   0(R2),81                 SET IT TO 81 AS A DEFAULT\n*\n         SR    R1,1                     CLEAR REGISTER\n         IC    R1,0(,R2)                PICK UP LENGTH\n         LA    R2,1(,R2)                POINT TO FIRST INPUT BYTE\n*\nBUFFMOV0 DS    0H\n*\n         CLI   0(R2),0                  NULL\n         BE    BUFFMOV1                 MOVE IT\n         CLI   0(R2),7                  SBA CODE\n         BL    BUFFSBA1                 MOVE IT\n*\nBUFFMOV1 DS    0H\n*\n         MVC   0(1,R7),0(R2)    *  MOVE BYTE OF DATA\n*                               *\n         LA    R7,1(,R7)        *  BUMP BUFFER POINTER\n         LA    R5,1(,R5)        *  BUMP BUFFER COUNTER\n         LA    R2,1(,R2)        *  BUMP INPUT  POINTER\n*                               *\n         B     BUFFMOV9         *  CONTINUE\n*                               *\nBUFFSBA1 DS    0H               *\n*                               *\n         SR    R14,R14          *  CLEAR WORK REGISTER\n         IC    R14,0(,R2)       *  PICK UP ATTRIBUTE BYTE\n         SLL   R14,1            *  MULTIPLY BY 2\n         LA    R15,ATTRIBS(R14) *  POINT TO ATTRIBUTE\n         MVC   0(2,R7),0(R15)   *  MOVE ATTRIBUTE\n*                               *\n         LA    R7,2(,R7)        *  BUMP BUFFER POINTER\n         LA    R5,2(,R5)        *  BUMP BUFFER COUNTER\n         LA    R2,1(,R2)        *  BUMP INPUT  POINTER\n*                               *\nBUFFMOV9 DS    0H               *\n*                               *\n         BCT   R1,BUFFMOV0      *  MOVE EVERY BYTE\n*\nNOCURSR  DS    0H\n         SR    R14,14\n         C     R14,MSGADD               IS THERE A MESSAGE\n         BE    BLDBUMP2                 NO, GO BUMP\n*\n         CLI   SPLIT,2                  AM I IN SPLIT-SCREEN 2\n         BE    CHKMSG2                  YES, SKIP THIS\n         LA    R14,TERMOUT+4            SET LINE 1 ADDRESS\n         CR    R6,R14                   AM I ON LINE1\n         BE    BLDBUMP1                 YES I AM\n         B     BLDBUMP2                 NO, GO BUMP\n*\nCHKMSG2  DS    0H\n         L     R14,SCROWS1\n         SLL   R14,2\n         LA    R14,TERMOUT+4(14)        SET ADDR OF LINE1, SCRN2\n         CR    R6,R14                   AM I ON LINE1\n         BNE   BLDBUMP2                 NO, GO BUMP\n*\nBLDBUMP1 DS    0H\n*\n         LR    R15,R7\n         LA    R14,20\n         SR    R15,R14\n         LA    R15,4(R1,15)\n         L     R14,MSGADD               MESSAGE ADDRESS\n         MVC   0(20,R15),0(R14)\n         XC    MSGADD(4),MSGADD         CLEAR THE MESSAGE\n         L     R14,BUFF                 BUFFER ADDRESS\n         MVC   1(1,R14),ALARMWCC        SOUND ALARM\n*\nBLDBUMP2 DS    0H\n         LA    R8,4(,8)                 BUMP TO NEXT SBACODES\n*\n         TM    0(R6),X'80'              END OF LINES\n         BO    SETCURSR                 LET 'ER RIP\n*\n         LA    R6,4(,6)                 BUMP TO NEXT PARM\n         BCT   R9,BLDBUFFS              GO DO IT\n*                               *\nSETCURSR DS    0F\n         MVI   0(R7),X'11'\n         SR    R0,R0\n         SR    R1,R1\n         IC    R0,AIDROW        *  ROW\n         CLI   SPLIT,2\n         BNE   *+8\n         A     R0,SCROWS1       *  ROW ON SPLIT SCREEN\n         IC    R1,AIDCOL        *  COL\n         MH    R0,=H'80'\n         AR    R1,R0\n         SR    R0,R0\n         D     R0,=F'64'\n         STC   R1,1(,R7)\n         STC   R0,2(,R7)\n         TR    1(2,R7),BINTOEBC\n         MVI   3(R7),X'13'\n         LA    R5,4(,R5)\n         ST    R5,BUFFL1                MAKE SURE THE LENGTH IS SET\n*                               *\n*\n         B     WRTBUFF                  LET 'ER RIP\n*\nBINTOEBC DS    0F\n*                0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4C4E4F'  0\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'  1\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'  2\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'  3\n*                0 1 2 3 4 5 6 7 8 9 A B C D E F\n*                               *\nATTRIBS  DS    0H               *   FIELD ATTRIBUTE BYTES\n*                               *\n         DC    X'1D40'          *   OFFSET ZERO\nATTRIB01 DC    X'1D40'          *   UNPROTECTED, DISPLAY\nATTRIB02 DC    X'1DC8'          *   UNPROTECTED, DISPLAY, INTENSIFIED\nATTRIB03 DC    X'1D4C'          *   UNPROTECTED, NONDISPLAY\nATTRIB04 DC    X'1D60'          *   PROTECTED, DISPLAY\nATTRIB05 DC    X'1DE8'          *   PROTECTED, DISPLAY, INTENSIFIED\nATTRIB06 DC    X'1D6C'          *   PROTECTED, NONDISPLAY\n*                               *\nMOVINADD MVC   0(1,R7),0(R2)\nMOVINBUF MVC   3(1,R7),1(R2)\n         EJECT\nWRTBUFF  DS    0H\n*\n**  LOG BUFFER BEFORE WRITE TO TRACK PROG402, ETC\n*\n*        L     R4,BUFF                  ACTUAL WRITE BUFFER\n*        LA    R1,8\n*        SR    R4,R1\n*        MVC   0(2,R4),BUFFL1+2\n*        MVC   2(2,R4),AIDADDR\n*        MVC   4(2,R4),SCROWS1+2\n*        OPEN  (BUFFLOG,(EXTEND))\n*\n*        TM    BUFFLOG+48,X'10'\n*        BZ    BUFFLOG9\n*\n*        PUT   BUFFLOG,(4)\n*        CLOSE BUFFLOG\n*        B     BUFFLOG9\n*\n*BUFFLOG  DCB   DDNAME=BUFFLOG,DSORG=PS,MACRF=PM\n*\n*BUFFLOG9 DS    0H\n*\n         L     R4,BUFF                  ACTUAL WRITE BUFFER\n         L     R5,BUFFL1                PICK UP THE LENGTH\n         MVI   RECB,X'80'               RESET ECB\nWRITUBE1 DS    0H\n         CLC   TUBEDDNM(4),=C'VTAM'    VTAM     TERMINAL\n         BE    WRITUBEV          YES\n*\n         CLC   TUBEDDNM(3),=C'TSO'     TSO      TERMINAL\n         BE    WRITUBET          YES\n*\n         MVC   CCW1(8),SELECT0B\n         MVC   CCW2(1),WRITECC          COMMAND CODE SET BASED ON\n         MVC   CCW2+1(7),WRITECCW+1     TERMINAL TYPE\n*\n         STCM  R5,3,CCW2+6              SET THE LENGTH\n         STCM  R4,7,CCW2+1              SET THE DATA ADDRESS\n*\n         LA    R1,CCW1\n         STCM  R1,7,TUBEIOB+17\n         LA    R2,RECB           SET ECB ADDRESS\n         ST    R2,TUBEIOB+4                       IN THE IOB\n         EXCP  TUBEIOB\n*\n         WAIT  ECB=RECB\n*\n         CLI   RECB,X'44'               CHECK FOR INTERCEPT\n         BE    RESCREEN                 IF YES,RE-WRITE SCREEN\n         CLI   RECB,X'41'               CHECK FOR PERMANENT I/O ERR\n         BE    PERMIOER                 TRY TO RECOVER\n         CLI   RECB,X'7F'               CHECK FOR OTHERWISE OKAY\n         BNE   WTOMS12                  IF NOT,DO ERROR RECOVERY\n         MVI   PERMERR,0                FIRST TIME THROUGH\n*\nTUBEREAD DS    0H\n*\n**  START OF ETPS ACCESS METHOD READ ROUTINE\n*\n         CLI   EXCPFLG2,0               ETPS ACCESS METHOD\n         BE    STDEXCP                  NO\n*\n         L     R6,UCBADDR\n         USING UCBCMSEG,6\n         MODESET MF=(E,SUPRMOD)\n         XC    UCBRDYQ(4),UCBRDYQ    CLEAR ECB\n         WAIT ECB=UCBRDYQ\n         MODESET MF=(E,PROBMOD)\n*\n         L     R5,SCREENSZ              PICK UP BUFFER LENGTH\n*\n         L     R4,REPLY                 PICK UP BUFFER ADDRESS\n         MVI   RECB,X'80'               RESET ECB\n*\n         MVC   CCW1(8),SELECT0B\n         MVC   CCW2(8),READCCW\n         STCM  R5,3,CCW2+6              SET THE LENGTH\n         STCM  R4,7,CCW2+1              SET THE DATA ADDRESS\n*\n         LA    R1,CCW1\n         STCM  R1,7,TUBEIOB+17\n         LA    R2,RECB           SET ECB ADDRESS\n         ST    R2,TUBEIOB+4                       IN THE IOB\n*\n         EXCP  TUBEIOB\n*\n         WAIT  ECB=RECB\n*\n         B     TESTREAD                 GO CHECK READ\n*\nEXCPFLG2 DC    X'00'   0=STRAIGHT EXCP, 1=ETPS ACCESS METHOD\n*\n**  END OF ETPS ACCESS METHOD READ ROUTINE\n*\nSTDEXCP  DS    0H\n*\n         L     R5,SCREENSZ              PICK UP BUFFER LENGTH\n*\n         L     R4,REPLY                 PICK UP BUFFER ADDRESS\n         MVI   RECB,X'80'               RESET ECB\n*\n         MVC   CCW1(8),SELECT0B\n         MVC   CCW2(8),READCCW\n         STCM  R5,3,CCW2+6              SET THE LENGTH\n         STCM  R4,7,CCW2+1              SET THE DATA ADDRESS\n*\n         LA    R1,CCW1\n         STCM  R1,7,TUBEIOB+17\n         LA    R2,RECB           SET ECB ADDRESS\n         ST    R2,TUBEIOB+4                       IN THE IOB\n*\nTUREREAD DS    0H\n         EXCP  TUBEIOB\n*\n         WAIT  ECB=RECB\n*\n         CLI   0(R4),X'60' GOT ANY DATA??\n         BNE   TESTREAD                 GO CHECK READ\n*\n         STIMER WAIT,BINTVL=TWOSEC\n         B     TUREREAD                 GO CHECK READ\n*\nTWOSEC   DC    F'120'\n*\n*\nWRITUBEV DS    0H\n*\n         L     R1,PSATOLD        PICK UP TCB\n         USING TCB,1\n         L     R1,TCBUSER        TCBUSER FIELD\n         USING TCBUVTAM,1\n         L     R15,TCBUVPUT\n*\n         L     R1,BUFF                  ACTUAL WRITE BUFFER\n         L     R0,BUFFL1                PICK UP THE LENGTH\n         AH    R0,VTAMADD1              ADD 1\n         BALR  R14,R15\n*\n         LTR   R15,R15\n         BNZ   WBADVTAM\n*\n         L     R1,PSATOLD        PICK UP TCB\n         USING TCB,1\n         L     R1,TCBUSER        TCBUSER FIELD\n         USING TCBUVTAM,1\n         L     R15,TCBUVGET\n         L     R0,SCREENSZ              PICK UP BUFFER LENGTH\n         L     R1,REPLY                 PICK UP BUFFER ADDRESS\n*\n         BALR  R14,R15\n*\n         LTR   R15,R15\n         BNZ   RBADVTAM\n*\n         L     R1,PSATOLD        PICK UP TCB\n         USING TCB,1\n         L     R1,TCBUSER        TCBUSER FIELD\n         USING TCBUVTAM,1\n         LH    R1,TCBUGETL              PICK UP ACTUAL READ LENGTH\n         L     R0,SCREENSZ              PICK UP BUFFER LENGTH\n         SR    R0,R1                    SET R0 = RESIDUAL LENGTH\n         STH   R0,TUBEIOB+14            TUCK IT AWAY IN IOB\n         MVI   RECB,X'7F'               SET READ OK\n         B     TESTREAD\n*\nVTAMADD1 DC    H'1'\n*\nWBADVTAM DS    0H\n*\n         LR    R2,R15                    SAVE RETURN CODE\n         WTO   'BAD WRITE RETURN CODE FROM VTAM',ROUTCDE=2,DESC=(2)\n         DC    H'0'\n*\nRBADVTAM DS    0H\n*\n         LR    R2,R15                    SAVE RETURN CODE\n         WTO   'BAD READ  RETURN CODE FROM VTAM',ROUTCDE=2,DESC=(2)\n         DC    H'0'\n*\nWRITUBET DS    0H\n*\n         PRINT GEN\n*\n         L     R1,BUFF                  ACTUAL WRITE BUFFER\n         BCTR  R1,0                     BACK UP 1 BYTE\n         MVI   0(R1),X'27'              SET TSO WRITE SEQUENCE\n         L     R0,BUFFL1                PICK UP THE LENGTH\n         AH    R0,TSOADD1               ADD 1 BYTE\n*\n         TPUT  (1),(0),FULLSCR\n*\n         LTR   R15,R15\n         BNZ   WBADTSO\n*\n         L     R14,REPLY\n         MVI   0(R14),0\n         LA    R14,1(,R14)\n         L     R15,SCREENSZ\n         BCTR  R15,0\n         L     R0,REPLY\n         LR    R1,R15\n         MVCL  R14,R0\n*\n         L     R0,SCREENSZ              PICK UP BUFFER LENGTH\n         L     R1,REPLY                 PICK UP BUFFER ADDRESS\n*\n         TGET  (1),(0),ASIS\n*\n         LTR   R15,R15\n         BNZ   RBADTSO\n*\n         L     R0,SCREENSZ              PICK UP BUFFER LENGTH\n         SR    R0,R1                    SET R0 = RESIDUAL LENGTH\n         STH   R0,TUBEIOB+14            TUCK IT AWAY IN IOB\n         MVI   RECB,X'7F'               SET READ OK\n         B     TESTREAD\n*\n         PRINT NOGEN\nTSOADD1  DC    H'1'\n*\nWBADTSO  DS    0H\n*\n         LR    R2,R15                    SAVE RETURN CODE\n         WTO   'BAD WRITE RETURN CODE FROM TPUT',ROUTCDE=2,DESC=(2)\n         DC    H'0'\n*\nRBADTSO  DS    0H\n*\n         LR    R2,R15                    SAVE RETURN CODE\n         WTO   'BAD READ  RETURN CODE FROM TGET',ROUTCDE=2,DESC=(2)\n         DC    H'0'\n*\n*\nSEC10    DC    F'1000' 10 SECOND WAIT\nWRITECCW DC    X'0D',AL3(0),X'2000',AL2(0)\nNOOP     DC    X'04',AL3(0),X'2000',AL2(1)\nSELECT0B DC    X'0B',AL3(0),X'6000',AL2(1)\nREADCCW  DC    X'06',AL3(0),X'2000',AL2(0)\nPERMIOER DS    0H\n         CLI   PERMERR,0                FIRST TIME THROUGH?\n         BNE   WTOMS41                  NOPE\n         MVI   PERMERR,1                NOT FIRST TIME THROUGH.\n         B     RESCREEN                 TRY TO RESHOW THE SCREEN\nCOPYMSG  MVC   0(1,R3),2(R2)            MOVE MSG INTO BUF-VAR INSTR\nINFO     EQU   X'01'                    DO NO DO READ TI,NO REPLY\nFIRST    EQU   X'80'                    FIRST READ/WRITE\n*        EXAMINE READ RESULT AND SET POINTERS TO INPUT FIELDS\nTESTREAD DS    0H\n*\n*\n**  LOG BUFFER AFTER READ\n*\n*        L     R4,REPLY                 READ-IN BUFFER\n*        LA    R1,4\n*        SR    R4,R1\n*        XC    0(4,R4),0(R4)\n*        MVC   0(2,R4),TUBEIOB+14\n*        OPEN  (BUFFLOG,(EXTEND))\n*\n*        TM    BUFFLOG+48,X'10'\n*        BZ    BUFFLOGZ\n*\n*        PUT   BUFFLOG,(4)\n*        CLOSE BUFFLOG\n*        B     BUFFLOGZ\n*\n*BUFFLOG  DCB   DDNAME=BUFFLOG,DSORG=PS,MACRF=PM\n*\n*BUFFLOGZ DS    0H\n*\n*\n         LA    R14,TERMINPT+4           NOW BUILD INADDRESSES\n         L     R1,SCROWS1          PICK UP SIZE OF SCREEN1\n*\n         CLI   SPLIT,2                  AM I ON SCREEN 2\n         BNE   *+20                     NOPE\n*\n         L     R3,SCROWS1          PICK UP SIZE OF SCREEN1\n         SLL   R3,2                MULTIPLY BY 4\n         LA    R14,TERMINPT+4(R3)  PICK UP RESPONSES\n         L     R1,SCROWS2          PICK UP SIZE OF SCREEN2\n*\n         L     R15,0(,R14)              STORE THE ADDRESS\n         MVI   0(R15),X'00'             SET FIRST BYTE TO ZEROS\n         LA    R14,4(,14)               BUMP TO NEXT INADDR\n         BCT   R1,*-12                  LOOP 43 TIMES\n*\n         LA    R4,TERMINPT              GET A(BUFFER)\n         L     R3,REPLY                 GET A(BUFFER)\n         CLI   RECB,X'44'               CHECK IF READ INTERCEPTED\n         BE    RESCREEN                 IF YES,ASSUME CLEAR WAS HIT\n         CLI   RECB,X'41'               PERMANENT IO ERROR\n         BE    PERMIOER                 -RECOVER IF NOT\n         CLI   RECB,X'7F'               CHECK FOR OTHERWISE OKAY\n         BNE   WTOMS14                  -RECOVER IF NOT\n         MVI   PERMERR,0                FIRST TIME THROUGH\n*\n         CLI   HELPFLAG,0               AM I DOING HELP ALREADY\n         MVI   HELPFLAG,0               SHUT IT OFF\n         BNE   AFTRHELP                 GO REDISPLAY THE SCREEN\n*\n         MVI   PFKFLAG,0                NOT A PFK/ATTN\n         CLI   0(R3),X'7D'              IS IT ENTER\n         BE    *+8                      YES\n         MVI   PFKFLAG,1                IF NOT ENTER, MUST BE PFK\n*\n         L     R5,SCREENSZ              START EXAMINING BUFFER FOR DATA\n         SH    R5,TUBEIOB+14            (RESIDUAL COUNT)\n         LA    R9,1(R5,R3)              LAST BYTE OF INPUT READ\n         CLC   =X'016C6102',0(R3)       CHECK FOR TEST-REQ\n         BE    RESCREEN                 RESET SCREEN IF YES\nSREAD    DS    0H\n         L     R14,0(,R4)               PICK UP ADDR FOR AID\n         MVC   0(1,R14),0(R3)           MOVE IN AID\n         MVC   SBAWORK(2),1(R3)         MOVE IN AID ADDRESS\n*\n         BAL   R14,SBAXLATE             TRANSLATE TO ROW AND COLUMN\n         MVC   AIDADDR(2),SBAWORK       SAVE CURSOR POSITION\n*\n         CLI   SPLIT,2\n         BNE   SREAD2\n*\n         SR    R0,R0\n         IC    R0,AIDROW\n         S     R0,SCROWS1\n         STC   R0,AIDROW\n*\nSREAD2   DS    0H\n         L     R14,0(,R4)               PICK UP ADDR FOR AID\n         MVC   1(2,R14),SBAWORK         MOVE CURSOR POSITION\n*\nTFORHELP DS    0H\n*\n         CLI   0(R3),X'F1'              IS IT HELP PFKEY\n         BE    *+12                     YUP\n         CLI   0(R3),X'C1'              IS IT HELP PFKEY\n         BNE   TSPLIT                   NO, SEE IF IT'S SPLIT-SCREEN\n*\n         MVI   HELPFLAG,1               TURN IT ON\n         B     BLDBUFF                  DISPLAY HELP\n*\nTSPLIT   DS    0H\n*\n         CLI   0(R3),X'F2'              IS IT SPLIT PFKEY\n         BE    *+12                     YUP\n         CLI   0(R3),X'C2'              IS IT SPLIT PFKEY\n         BNE   TSWITCH                  OTHERWISE, TEST FOR SWITCH\n*\n         CLI   SPLIT,0                  SPLIT-SCREEN ALREADY?\n         BE    *+16                     NO, SPLIT IT\n         L     R2,TERMINPT              PICK UP RESPONSE ADDRESS\n         MVI   0(R2),X'6E'              RESET IT TO PA2\n         B     TRETURN                  JUST EXECUTE PA2\n*\n         L     R1,SCROWS                SET IT\n         SRL   R1,1                     DIVIDE BY 2\n         ST    R1,SCROWS1               STORE IT\n         L     R0,SCROWS                PICK IT UP\n         SR    R0,R1                    SUBTRACT\n         ST    R0,SCROWS2               STORE THE REMAINDER\n*        TM    SCROWS+3,1               EVEN NUMBER OF ROWS?\n*        BZ    *+12                     YES\n*        A     R0,=F'1'                 BUMP 1\n*        ST    R0,SCROWS2               STORE IT\n*\n*\n         MVI   SPLIT,2                  INDICATE SCREEN 2\n         L     R14,SAVETOP              PICK UP ADDRESS OF SAVE1\n         L     R15,SPLTMOVL             LENGTH OF SPLIT AREA\n         LR    R1,R15\n         L     R0,SPLIT14A\n         AR    R0,R13\n*\n         MVCL  R0,R14\n*\n         L     R14,SAVETOP              PICK UP ADDRESS OF SAVE1\n         L     R15,SPLTMOVL             LENGTH OF SPLIT AREA\n         LR    R1,R15\n         L     R0,SPLIT24A\n         AR    R0,R13\n         MVCL  R14,R0\n*\n         L     R14,R14ADDR              PICK UP RETURN ADDRESS\n         LM    R2,R13,PRISPLIT\n         BR    R14                      SHOW PRIMARY OPTION MENU\n*\nR14ADDR  DC    A(REPRIOPT)\nSPLTMOVL DC    A(AREALEN)\nSPLIT14A DC    A(SPLIT140)    OFFSET OF SPLIT1 AREA\nSPLIT24A DC    A(SPLIT240)    OFFSET OF SPLIT1 AREA\n*                              OF BUFFERS\nTSWITCH  DS    0H\n*\n         CLI   0(R3),X'F9'              IS IT SWITCH SCREEN\n         BE    *+12                     YUP\n         CLI   0(R3),X'C9'              IS IT SWITCH SCREEN\n         BNE   TENDPFK                  OTHERWISE, TEST FOR END PFK\n*\n         L     R2,TERMINPT              PICK UP RESPONSE ADDRESS\n         MVI   0(R2),X'6E'              RESET IT TO PA2\n*\n         CLI   SPLIT,0                  IN SPLIT-SCREEN MODE?\n         BE    TRETURN                  NO, JUST EXECUTE PA2\n*\n         CLI   SPLIT,1                  AM I ON TOP SCREEN\n         BNE   SWBOTTOP                 NOPE, GO FROM BOTTOM TO TOP\n*\n         L     R14,SAVETOP              PICK UP ADDRESS OF SAVE1\n         L     R15,SPLTMOVL             LENGTH OF SPLIT AREA\n         LR    R1,R15\n         L     R0,SPLIT14A\n         AR    R0,R13\n         MVCL  R0,R14\n*\n         MVI   SPLIT,2                  INDICATE SCREEN 2\n         L     R14,SAVETOP              PICK UP ADDRESS OF SAVE1\n         L     R15,SPLTMOVL             LENGTH OF SPLIT AREA\n         LR    R1,R15\n         L     R0,SPLIT24A\n         AR    R0,R13\n         MVCL  R14,R0\n*\n         B     SETASWCH                 SET UP FOR SWITCH\n*\nSWBOTTOP DS    0H\n*\n         L     R14,SAVETOP              PICK UP ADDRESS OF SAVE1\n         L     R15,SPLTMOVL             LENGTH OF SPLIT AREA\n         LR    R1,R15\n         L     R0,SPLIT24A\n         AR    R0,R13\n         MVCL  R0,R14\n*\n         L     R14,SAVETOP              PICK UP ADDRESS OF SAVE1\n         L     R15,SPLTMOVL             LENGTH OF SPLIT AREA\n         LR    R1,R15\n         L     R0,SPLIT14A\n         AR    R0,R13\n         MVCL  R14,R0\n*\n         MVI   SPLIT,1                  TURN IT ON\n*\nSETASWCH DS    0H\n         B     RESCREEN\n*\nTENDPFK  DS    0H\n*\n         CLI   0(R3),X'F3'              IS IT END PFK\n         BE    *+12                     YUP\n         CLI   0(R3),X'C3'              IS IT END PFK\n         BNE   LREAD                    OTHERWISE, GO PROCESS\n*\n         CLI   SPLIT,0                  SPLIT-SCREEN?\n         BE    TRETURN                  NOPE, JUST GO PROCESS\n*\n         CLI   PRIMEFLG,0          PRIMARY OPTION MENU ON SCREEN 1?\n         BE    TRETURN             NO, JUST RETURN\n*\n         CLI   SPLIT,2                  AM I ON BOTTOM SCREEN\n         BE    SWBOTEOF                 YES, GO END THE BOTTOM SCREEN\n*\n         L     R2,TERMINPT              PICK UP RESPONSE ADDRESS\n         MVI   0(R2),X'6E'              RESET IT TO PA2\n*\n         L     R14,SAVETOP              PICK UP ADDRESS OF SAVE1\n         L     R15,SPLTMOVL             LENGTH OF SPLIT AREA\n         LR    R1,R15\n         L     R0,SPLIT24A\n         AR    R0,R13\n         MVCL  R14,R0\n*\n         MVC   SCROWS1(4),SCROWS        RESET NUMBER OF ROWS\n         XC    SCROWS2(4),SCROWS2       CLEAR THIS\n*\n         MVI   SPLIT,0                  INDICATE NOT DOING SPLIT-SCREEN\n         B     TRETURN                  OTHERWISE, GO PROCESS\n*\nSWBOTEOF DS    0H\n*\n         L     R2,TERMINPT              PICK UP RESPONSE ADDRESS\n         MVI   0(R2),X'6E'              RESET IT TO PA2\n*\n         L     R14,SAVETOP              PICK UP ADDRESS OF SAVE1\n         L     R15,SPLTMOVL             LENGTH OF SPLIT AREA\n         LR    R1,R15\n         L     R0,SPLIT14A\n         AR    R0,R13\n         MVCL  R14,R0\n*\n         MVC   SCROWS1(4),SCROWS        RESET NUMBER OF ROWS\n         XC    SCROWS2(4),SCROWS2       CLEAR THIS\n*\n         MVI   SPLIT,0                  INDICATE NOT IN SPLIT-SCREEN\n         B     TRETURN                  GO PROCESS PA2\n*\nSETAEOF  DS    0H\n         B     RESCREEN\n*\nAFTRHELP DS    0H\n         B     RESCREEN\n         EJECT\nLREAD    DS    0H\n         C     R5,=F'3'                RETURN IF ENTER WITH NO DATA\n         BL    TRETURN\n*\n         LA    R4,4(,R4)                BUMP TO NEXT ADDRESS\n         LA    R3,3(,R3)                POINT PAST AID AND CURSOR\n         CLI   0(R3),X'11'              LOOK FOR SBA\n         BNE   WTOMS15                  IF NOT, ITS AN ERROR\n         LR    R8,R3                    START OF DATA\n         SR    R6,6                     LENGTH OF DATA\n         B     GOTSBA2                  AFTER START OF SBA LOOP\nGOTSBA1  DS    0H\n         BCTR  R6,0\n         EX    R6,REPLYCAP              UPPER-CASE THE INPUT\n         EX    R6,REPLYMVC              MOVE IT INTO THE LINE\n         SR    R6,6                     LENGTH OF DATA\n         LR    R8,R3                    START OF DATA\nGOTSBA2  DS    0H\n*\n* NOW I HAVE TO PICK UP THE SBA AND LOCATE THE CORRESPONDING\n* OUTPUT LINE.\n*\n* FIRST TRANSLATE SBA CODES TO ROW AND COLUMN\n*\n         CLI   0(R8),X'11'              DO I HAVE AN SBA\n         BNE   TRETURN\n         MVC   SBAWORK(2),1(R8)         SET ADDR OF SBA\n         BAL   R14,SBAXLATE\n*\n* NOW MOVE THE IMAGE OF THE ROW THAT WAS TRANSMITTED TO THE TERMINAL\n* INTO MY INPUT BUFFER SO THAT I CAN SIMULATE A FULL-LINE READ.\n*\n         LA    R14,TERMOUT+4            LINE 1 THAT WAS DISPLAYED\n         SR    R15,15                   CLEAR REGISTER\n         IC    R15,SBAROW               PICK UP LINE NUMBER (REL 0)\n         SLL   R15,2                    MULTIPLY BY 4\n         L     R2,0(R15,R14)            POINT TO ACTUAL OUTPUT LINE\n         LA    R14,TERMINPT+4           POINT TO INPUT LINE SLOT\n         L     R7,0(R15,R14)            POINT TO ACTUAL INPUT LINE\n         LA    R4,0(R15,R14)            SET ADDRESS POINTER\n*\n         CLI   0(R7),X'00'              IS THIS A BLANK LINE\n         BNE   *+14                     NO, SECOND FIELD ON THIS LINE\n*\n         SR    R14,14                   CLEAR REGISTER\n         IC    R14,0(,R2)               PICK UP LENGTH\n         EX    R14,MOVINADD             MOVE LINE IMAGE TO INPT BUFF\n*\n         SR    R14,14                   CLEAR REG\n         IC    R14,SBACOL               PICK UP COLUMN (REL 0)\n         LA    R7,1(R7,R14)             POINT TO ACTUAL INPUT LOCATION\n*\n* NOW I HAVE TO FIND THE LENGTH OF INPUT THAT WAS ENTERED AT THE\n* TERMINAL SO I CAN MOVE IT INTO THE LINE IMAGE\n*\n         LA    R3,1(,3)                 BUMP ADDRESS\nSBABUMP1 DS    0H\n         CLI   0(R3),X'11'              LOOK FOR NEXT SBA\n         BE    GOTSBA1                  GOT IT\n         LA    R3,1(,3)                 BUMP ADDRESS\n         LA    R6,1(,6)                 BUMP LENGTH\n         CR    R3,R9                    COMPARE VS LAST BYTE READ IN\n         BL    SBABUMP1                 KEEP LOOPING\nGOTSBAS  DS    0H\n         BCTR  R6,0\n         EX    R6,REPLYCAP              UPPER-CASE THE INPUT\n         EX    R6,REPLYMVC              MOVE IT INTO THE LINE\nTRETURN  DS    0H\n         SR    R15,15                   SET RC=0\nTRETURN2 DS    0H\n         OI    0(R4),X'80'              FLAG AS LAST ENTRY\n         L     R13,4(,13)               RESTORE CALLERS REGS\n         LM    R0,R12,20(R13)          RESTORE CALLERS REGS\n         L     R14,12(R13)              PRESERVE R15\n         BR    R14                      NORMAL RETURN\n         TITLE 'SBA TRANSLATE TO ROW AND COLUMN'\nSBAXLATE DS    0H\n         STM   R14,R1,12(R13)           SAVE SBAS WORK REGISTERS\n*                               *\n         LA    R15,SBAWORK\n         TR    0(2,R15),EBCTOBIN\n         NC    0(2,R15),=X'3F3F'\n         SR    0,0\n         SR    1,1\n         IC    R0,0(,R15)\n         IC    R1,1(,R15)\n         SLL   R0,6\n         AR    R1,R0\n         SR    0,0\n         D     R0,=F'80'\n         STC   R1,SBAROW        0-42\n         STC   R0,SBACOL        1-80\n*\n         LM    R14,R1,12(R13)         RESTOR SBAS WORK REGISTERS\n         BR    R14\n*\n*\nEBCTOBIN DC    256AL1(*-EBCTOBIN)\n         ORG   EBCTOBIN+X'40'\n         DC    X'C0'\n         ORG   EBCTOBIN+X'4A'\n         DC    X'CACBCCCDCECF'\n         ORG   EBCTOBIN+X'50'\n         DC    X'D0'\n         ORG   EBCTOBIN+X'5A'\n         DC    X'DADBDCDDDEDF'\n         ORG   EBCTOBIN+X'60'\n         DC    X'E0E1'\n         ORG   EBCTOBIN+X'6A'\n         DC    X'EAEBECEDEEEF'\n         ORG   EBCTOBIN+X'7A'\n         DC    X'FAFBFCFDFEFF'\n         ORG\n*\n         TITLE 'ETPS - CAPS ONLY TRT TABLE'\nCAPSONLY DC    CL16' '\n         DC    X'1111'         SBA\n         DC    CL46' '\n         DC    CL10' '\n         DC    C'\u00a2.<(+|&&'\n         DC    CL9' '\n         DC    C'!$*)'\n         DC    C' '             NOTE SEMICOLON CHANGED TO BLANK\n         DC    C'\u00ac-/'\n         DC    CL9' ',C',%_>?',CL10' ',C':#@''=\"'\n         DC    CL16' ABCDEFGHI      '\n         DC    CL16' JKLMNOPQR      '\n         DC    CL16'  STUVWXYZ      '\n         DC    CL16'                '\n         DC    CL16' ABCDEFGHI      '\n         DC    CL16' JKLMNOPQR      '\n         DC    CL16'  STUVWXYZ      '\n         DC    CL16'0123456789      '\nREPLYCAP TR    3(1,R8),CAPSONLY\nREPLYMVC MVC   0(1,R7),3(R8)\nWTOMS11  WTO   'ETPS1011 COMM   BAD WRITE TO TUBE      ',ROUTCDE=11\n         LA    R15,11\n         B     TRETURN2\nWTOMS12  WTO   'ETPS1012 COMM   BAD ECB CODE ON WRITE  ',ROUTCDE=11\n         LA    R15,12\n         B     TRETURN2\nWTOMS13  WTO   'ETPS1013 COMM   BAD READ FROM TUBE     ',ROUTCDE=11\n         LA    R15,13\n         B     TRETURN2\nWTOMS14  WTO   'ETPS1014 COMM   BAD ECB CODE ON READ   ',ROUTCDE=11\n         LA    R15,14\n         B     TRETURN2\nWTOMS15  WTO   'ETPS1015 COMM   INVALID SBA CODE       ',ROUTCDE=11\n         DC    H'0'\n         LA    R15,15\n         B     TRETURN2\nWTOMS41  WTO   'ETPS1041 COMM   PERMANENT I/O ERROR    ',ROUTCDE=11\n         DC    H'0'\n         B     TRETURN2\n         SPACE 2\n         LTORG\n         TITLE 'ETPS - PAN LIBRARY NAMES'\n*\n*\nPANAMES  CSECT\n         DC    CL45'NETPS1.PANLIB'\n         DC    CL45'CPROD.JCL'\n         DC    CL45'CP.SOURCE'\n         DC    CL45'CCICS.SOURCE'\n         DC    CL45'NT.SOURCE'\n         DC    CL45'NP.SPOOL'\n         DC    45X'FF'\n         TITLE 'ETPS - BUFFER ADDRESSES'\n*\n* THE SET BUFFER ADDRESS (SBA) ORDER CODE IS FOLLOWED BY A 2-BYTE\n* BUFFER ADDRESS THAT CORRESPONDS (BUT NOT IN ANY RATIONAL WAY) TO\n* THE ROWS AND COLUMNS ON THE DISPLAY TUBE. THIS TABLE IS PROVIDED\n* TO SUPPORT DYNAMICALLY BUILDING THE BUFFER ADDRESS FIELDS WHEN THE\n* ROW AND COLUMN IS KNOWN.\n*\n* EACH BUFFER ADDRESS ENTRY CORRESPONDS TO A ROW ON THE DISPLAY\n* THE FIRST BYTE IS THE SAME FOR ALL ROWS, THE SECOND, THIRD AND\n* FOURTH BYTES DEFINE COLUMNS 1, 7, AND 8, RESPECTIVELY.\n*\n* TO PICK UP THE BUFFER ADDRESS YOU WANT, MULTIPLY THE ROW NUMBER\n* BY THE LENGTH OF EACH BUFFER ADDRESS ENTRY AND ADD THE START ADDRESS\n* OF THE TABLE.\n*\n* FOR EXAMPLE, THE ROW3 ENTRY IS =>  X'C1',X'50',X'D6',X'D7'\n* THE BUFFER ADDRESS CODES ARE:\n*\n* ROW 3, COL 1 = X'C150'\n* ROW 3, COL 7 = X'C1D6'\n* ROW 3, COL 8 = X'C1D7'\n*\nBUFF3278 CSECT\nROW781   DC    X'40',X'40',X'C6',X'C7'\nBALENGTH EQU   *-ROW781\nROW782   DC    X'C1',X'50',X'D6',X'D7'\nROW783   DC    X'C2',X'60',X'E6',X'E7'\nROW784   DC    X'C3',X'F0',X'F6',X'F7'\nROW785   DC    X'C5',X'40',X'C6',X'C7'\nROW786   DC    X'C6',X'50',X'D6',X'D7'\nROW787   DC    X'C7',X'60',X'E6',X'E7'\nROW788   DC    X'C8',X'F0',X'F6',X'F7'\nROW789   DC    X'4A',X'40',X'C6',X'C7'\nROW7810  DC    X'4B',X'50',X'D6',X'D7'\nROW7811  DC    X'4C',X'60',X'E6',X'E7'\nROW7812  DC    X'4D',X'F0',X'F6',X'F7'\nROW7813  DC    X'4F',X'40',X'C6',X'C7'\nROW7814  DC    X'50',X'50',X'D6',X'D7'\nROW7815  DC    X'D1',X'60',X'E6',X'E7'\nROW7816  DC    X'D2',X'F0',X'F6',X'F7'\nROW7817  DC    X'D4',X'40',X'C6',X'C7'\nROW7818  DC    X'D5',X'50',X'D6',X'D7'\nROW7819  DC    X'D6',X'60',X'E6',X'E7'\nROW7820  DC    X'D7',X'F0',X'F6',X'F7'\nROW7821  DC    X'D9',X'40',X'C6',X'C7'\nROW7822  DC    X'5A',X'50',X'D6',X'D7'\nROW7823  DC    X'5B',X'60',X'E6',X'E7'\nROW7824  DC    X'5C',X'F0',X'F6',X'F7'\nROW7825  DC    X'5E',X'40',X'C6',X'C7'\nROW7826  DC    X'5F',X'50',X'D6',X'D7'\nROW7827  DC    X'60',X'60',X'E6',X'E7'\nROW7828  DC    X'61',X'F0',X'F6',X'F7'\nROW7829  DC    X'E3',X'40',X'C6',X'C7'\nROW7830  DC    X'E4',X'50',X'D6',X'D7'\nROW7831  DC    X'E5',X'60',X'E6',X'E7'\nROW7832  DC    X'E6',X'F0',X'F6',X'F7'\nROW7833  DC    X'E8',X'40',X'C6',X'C7'\nROW7834  DC    X'E9',X'50',X'D6',X'D7'\nROW7835  DC    X'6A',X'60',X'E6',X'E7'\nROW7836  DC    X'6B',X'F0',X'F6',X'F7'\nROW7837  DC    X'6D',X'40',X'C6',X'C7'\nROW7838  DC    X'6E',X'50',X'D6',X'D7'\nROW7839  DC    X'6F',X'60',X'E6',X'E7'\nROW7840  DC    X'F0',X'F0',X'F6',X'F7'\nROW7841  DC    X'F2',X'40',X'C6',X'C7'\nROW7842  DC    X'F3',X'50',X'D6',X'D7'\nROW7843  DC    X'F4',X'60',X'E6',X'E7'\nBTABLEN4 EQU   *-ROW781\n         TITLE 'DYNAM - DYNAMIC ALLOCATION INTERFACE'\nDYNAM    CSECT\n         USING *,R12\n         SAVE  (14,12),,*\n         LR    R12,R15\n         L     R11,0(0,R1)         PICK UP PARAMETER LIST ADDRESS.\n         USING PARMLIST,R11\n         L     R0,WORKLEN\n         LA    R1,SAVEAREA\n         LR    R2,R13\n         LR    R13,1\n         USING SAVEAREA,R13\n         LR    R14,R1              SET UP FOR CLEAR OF WORK AREA.\n         L     R15,WORKLEN\n         SR    R0,R0\n         SR    R1,R1\n         MVCL  R14,R0              CLEAR WORK AREA TO ALL X'00'\n         ST    R2,SAVEAREA+4\n         ST    R13,8(0,R2)\n         LA    R10,DYNWORK\n         USING S99RB,R10\n         ST    R10,REQBKPTR        POINT TO REQUEST BLOCK.\n         OI    REQBKPTR,X'80'\n         LA    R1,S99RBEND-S99RB   LENGTH OF REQUEST BLOCK.\n         STC   R1,S99RBLN\n         CLC   DSNAME,NULLS        CHECK FOR UNALLOCATION REQUEST.\n         BNE   *+12\n         MVI   S99VERB,S99VRBUN    REQUEST UNALLOCATION.\n         B     *+12\n         MVI   S99VERB,S99VRBAL    REQUEST ALLOCATION.\n         OI    S99FLG11,S99NOCNV+S99NOMNT\n         LA    R8,S99RBEND         PICK UP ADDRESS FOR TEXT POINTERS\n         ST    R8,S99TXTPP\n         L     R9,TXPTRSPC         PICK UP SPACE RESERVED FOR TEXT PTRS\n         ALR   R9,R8               POINT TO FIRST TEXT UNIT.\n         USING S99TUNIT,R9\n         SPACE 1\n* DDNAME **************************\n         SPACE 1\n         LA    R7,DDNAME-PARMLIST  INIT 'OFFSET' REGISTER.\n         CLI   S99VERB,S99VRBUN    HAS UNALLOCATION BEEN REQUESTED?\n         BNE   *+12\n         LA    R1,DUNDDNAM\n         B     *+8\n         LA    R1,DALDDNAM\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         LA    R14,DDNAME          FIND OUT ACTUAL LENGTH OF DDNAME.\n         LA    R15,L'DDNAME\n         BAL   R1,PP000\n         LTR   R15,R15\n         BNP   QQ000\n         STH   R15,S99TULNG\n         BCTR  R15,0\n         EX    R15,MVCPARM         MOVE DDNAME.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1(R15)  NEXT TEXT UNIT.\n         CLI   S99VERB,S99VRBUN    HAS UNALLOCATION BEEN REQUESTED?\n         BE    MM000               GO DO REQUEST.\n         SPACE 1\n* DSNAME **************************\n         SPACE 1\n         LA    R7,DSNAME-PARMLIST  OFFSET\n         CLC   DSNAME,=CL44'NULLFILE ' CHECK FOR DUMMY ALLOCATION.\n         BNE   AA100\n         LA    R1,DALDUMMY\n         STH   R1,S99TUKEY\n*                                  S99TUNUM SET TO X'0000' BY WORKAREA\n*                                      CLEAR.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUENT         NEXT TEXT UNIT.\n         B     AA190\nAA100    EQU   *\n         LA    R14,DSNAME\n         LA    R15,L'DSNAME\n         BAL   R1,PP000            GET DSNAME LENGTH.\n         LTR   R15,R15\n         BNP   AA110\n         LA    R1,DALDSNAM\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         STH   R15,S99TULNG\n         BCTR  R15,0\n         EX    R15,MVCPARM         MOVE DSNAME.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1(R15)  NEXT TEXT UNIT.\n         SPACE 1\n* DSMEMBER ************************\n         SPACE 1\nAA110    EQU   *\n         LA    R7,DSMEMBER-PARMLIST\n         LA    R14,DSMEMBER\n         LA    R15,L'DSMEMBER\n         BAL   R1,PP000            GET DSMEMBER LENGTH.\n         LTR   R15,R15\n         BNP   AA120\n         LA    R1,DALMEMBR\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         STH   R15,S99TULNG\n         BCTR  R15,0\n         EX    R15,MVCPARM         MOVE DSMEMBER.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1(R15)  NEXT TEXT UNIT.\n         SPACE 1\n* PASSWORD ************************\n         SPACE 1\nAA120    EQU   *\n         LA    R7,PASSWORD-PARMLIST\n         LA    R14,PASSWORD\n         LA    R15,L'PASSWORD\n         BAL   R1,PP000            GET PASSWORD LENGTH\n         LTR   R15,R15\n         BNP   AA130\n         LA    R1,DALPASSW\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         STH   R15,S99TULNG\n         BCTR  R15,0\n         EX    R15,MVCPARM         MOVE PASSWORD.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1(R15)  NEXT TEXT UNIT.\n         SPACE 1\n* DSSTATUS ************************\n         SPACE 1\nAA130    EQU   *\n         LA    R7,DSSTATUS-PARMLIST\n         LA    R14,DSSTATUS\n         LA    R15,L'DSSTATUS\n         BAL   R1,PP000            GET DSSTATUS LENGTH\n         LTR   R15,R15\n         BNP   AA140\n         LA    R1,DALSTATS\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,1\n         CLI   DSSTATUS,C'O'         OLD\n         BNE   *+12\n         MVI   S99TUPAR,X'01'\n         B     AA135\n         CLI   DSSTATUS,C'M'         MOD\n         BNE   *+12\n         MVI   S99TUPAR,X'02'\n         B     AA135\n         CLI   DSSTATUS,C'N'         NEW\n         BNE   *+12\n         MVI   S99TUPAR,X'04'\n         B     AA135\n*        CLC   DSSTATUS,=CL8'SHR '\n*        BNE   QQ000\n*                                  ASSUME DISP=SHR\n         MVI   S99TUPAR,X'08'\nAA135    EQU   *\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER\n         LA    R9,S99TUPAR+1       NEXT TEXT UNIT.\n         SPACE 1\n* DSNDISP *************************\n         SPACE 1\nAA140    EQU   *\n         LA    R7,DSNDISP-PARMLIST\n         LA    R14,DSNDISP\n         LA    R15,L'DSNDISP\n         BAL   R1,PP000            GET DSNDISP LENGTH\n         LTR   R15,R15\n         BNP   AA150\n         LA    R1,DALNDISP\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,1\n         CLI   DSNDISP,C'U'            UNCATLG\n         BNE   *+12\n         MVI   S99TUPAR,X'01'\n         B     AA145\n         CLI   DSNDISP,C'C'            CATLG\n         BNE   *+12\n         MVI   S99TUPAR,X'02'\n         B     AA145\n         CLI   DSNDISP,C'D'            DELETE\n         BNE   *+12\n         MVI   S99TUPAR,X'04'\n         B     AA145\n         MVI   S99TUPAR,X'08'           ASSUME KEEP\nAA145    EQU   *\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1       NEXT TEXT UNIT.\n         SPACE 1\n* DSADISP *************************\n         SPACE 1\nAA150    EQU   *\n         LA    R7,DSADISP-PARMLIST\n         LA    R14,DSADISP\n         LA    R15,L'DSADISP\n         BAL   R1,PP000            GET DSADISP LENGTH\n         LTR   R15,R15\n         BNP   AA160\n         LA    R1,DALCDISP\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,1\n         CLI   DSADISP,C'U'             UNCATLG\n         BNE   *+12\n         MVI   S99TUPAR,X'01'\n         B     AA155\n         CLI   DSADISP,C'C'             CATLG\n         BNE   *+12\n         MVI   S99TUPAR,X'02'\n         B     AA155\n         CLI   DSADISP,C'D'             DELETE\n         BNE   *+12\n         MVI   S99TUPAR,X'04'\n         B     AA155\n         MVI   S99TUPAR,X'08'            ASSUME KEEP\nAA155    EQU   *\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1       NEXT TEXT UNIT.\n         SPACE 1\n* DSUNIT **************************\n         SPACE 1\nAA160    EQU   *\n         LA    R7,DSUNIT-PARMLIST\n         LA    R14,DSUNIT\n         LA    R15,L'DSUNIT\n         BAL   R1,PP000            GET DSUNIT LENGTH\n         LTR   R15,R15\n         BNP   AA170\n         LA    R1,DALUNIT\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         STH   R15,S99TULNG\n         BCTR  R15,0\n         EX    R15,MVCPARM         MOVE DSUNIT.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1(R15)  NEXT TEXT UNIT.\n         SPACE 1\n* $RESERV1 ************************\n         SPACE 1\nAA170    EQU   *\n* DSVOLSER ************************\n         SPACE 1\n         LA    R7,DSVOLSER-PARMLIST\n         CLC   DSVOLSER,NULLS\n         BNE   AA172\n         LA    R1,DALRTVOL         SET UP TO HAVE VOLSER RETURNED TO US\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,6\n         MVC   S99TUPAR(6),BLANKS\n         LA    R1,S99TUPAR\n         ST    R1,WKRTNVOL         SAVE ADDRESS OF PARAMETER FIELD.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+6       NEXT TEXT UNIT.\n         B     AA180\nAA172    EQU   *\n         LA    R14,DSVOLSER\n         LA    R15,L'DSVOLSER\n         BAL   R1,PP000            GET DSVOLSER LENGTH.\n         LTR   R15,R15\n         BNP   AA180\n         LA    R1,DALVLSER\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         STH   R15,S99TULNG\n         BCTR  R15,0\n         EX    R15,MVCPARM         MOVE DSVOLSER.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1(R15)  NEXT TEXT UNIT.\n         SPACE 1\n* $RESERV2 ************************\n         SPACE 1\nAA180    EQU   *\n         SPACE 1\n* DSVOLREF ************************\n         SPACE 1\n         LA    R7,DSVOLREF-PARMLIST\n         LA    R14,DSVOLREF\n         LA    R15,L'DSVOLREF\n         BAL   R1,PP000            GET DSVOLREF LENGTH.\n         LTR   R15,R15\n         BNP   AA190\n         CLC   DSVOLSER,BLANKS     CHECK TO SEE THAT DSVOLREF DOES NOT\n         BE    AA184                   CONFLICT WITH DSVOLSER.\n         CLC   DSVOLSER,NULLS\n         BNE   QQ000\nAA184    EQU   *\n         LA    R1,DALVLRDS\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         STH   R15,S99TULNG\n         BCTR  R15,0\n         EX    R15,MVCPARM         MOVE DSVOLREF.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1(R15)  NEXT TEXT UNIT.\n         SPACE 1\n* DSFREE **************************\n         SPACE 1\nAA190    EQU   *\n         LA    R7,DSFREE-PARMLIST\n         LA    R14,DSFREE\n         LA    R15,L'DSFREE\n         BAL   R1,PP000            GET DSFREE LENGTH.\n         LTR   R15,R15\n         BNP   AA198\n         CLC   DSFREE,=CL8'END   '\n         BE    AA198\n         CLC   DSFREE,=CL8'CLOSE '\n         BNE   QQ000\n         LA    R1,DALCLOSE\n         STH   R1,S99TUKEY\n*                                  S99TUNUM SET TO X'0000' BY WORKAREA\n*                                      CLEAR.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUENT         NEXT TEXT UNIT.\nAA198    EQU   *\n         CLC   DSNAME,=CL44'NULLFILE ' CHECK FOR DUMMY ALLOCATION.\n         BE    CC100               GO DO DCB PARAMETERS.\n         SPACE 1\n* DSLABEL *************************\n         SPACE 1\nAA200    EQU   *\n         LA    R7,DSLABEL-PARMLIST\n         LA    R14,DSLABEL\n         LA    R15,L'DSLABEL\n         BAL   R1,PP000            GET DSLABEL LENGTH.\n         LTR   R15,R15\n         BNP   AA210\n         LA    R1,DALLABEL\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,1\n         CLC   DSLABEL,=CL4'SL  '\n         BNE   *+12\n         MVI   S99TUPAR,X'02'\n         B     AA205\n         CLC   DSLABEL,=CL4'SUL '\n         BNE   QQ000\n         MVI   S99TUPAR,X'08'\nAA205    EQU   *\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1       NEXT TEXT UNIT.\n         SPACE 1\n* DSINOUT *************************\n         SPACE 1\nAA210    EQU   *\n         LA    R7,DSINOUT-PARMLIST\n         LA    R14,DSINOUT\n         LA    R15,L'DSINOUT\n         BAL   R1,PP000            GET DSINOUT LENGTH\n         LTR   R15,R15\n         BNP   AA220\n         LA    R1,DALINOUT\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,1\n         CLI   DSINOUT,C'I'\n         BNE   *+12\n         MVI   S99TUPAR,X'80'\n         B     AA215\n         CLI   DSINOUT,C'O'\n         BNE   QQ000\n         MVI   S99TUPAR,X'40'\nAA215    EQU   *\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1       NEXT TEXT UNIT.\n         SPACE 1\n* $RESERV3 ************************\n         SPACE 1\nAA220    EQU   *\n         LA    R7,$RESERV3-PARMLIST\n         CLC   $RESERV3,BLANKS\n         BNE   QQ000\n         SPACE 3\n         CLC   DSSTATUS,BLANKS     CHECK FOR NEW ALLOCATION.\n         BE    BB100\n         CLC   DSSTATUS,=CL8'NEW '\n         BNE   CC100               GO DO DCB PARAMETERS.\n         EJECT\n* DSPWDLBL ************************\n         SPACE 1\nBB100    EQU   *\n         LA    R7,DSPWDLBL-PARMLIST\n         LA    R14,DSPWDLBL\n         LA    R15,L'DSPWDLBL\n         BAL   R1,PP000            GET DSPWDLBL LENGTH.\n         LTR   R15,R15\n         BNP   BB110\n         LA    R1,DALPASPR\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,1\n         CLC   DSPWDLBL,=CL8'PASSWORD'\n         BNE   *+12\n         MVI   S99TUPAR,X'10'\n         B     BB105\n         CLC   DSPWDLBL,=CL8'NOPWREAD'\n         BNE   QQ000\n         MVI   S99TUPAR,X'30'\nBB105    EQU   *\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1       NEXT TEXT UNIT.\n         SPACE 1\n* DSDATE **************************\n         SPACE 1\nBB110    EQU   *\n         LA    R7,DSDATE-PARMLIST\n         LA    R14,DSDATE\n         LA    R15,L'DSDATE\n         BAL   R1,PP000            GET DSDATE LENGTH.\n         LTR   R15,R15\n         BNP   BB120\n         CLC   DSDATE(6),=C'EXPDT=' CHECK FOR DATE TYPE.\n         BNE   BB114\n         SH    R15,=H'6'\n         CH    R15,=H'5'           CHECK FOR VALID LENGTH.\n         BNE   QQ000\n         LA    R14,6(0,R14)        BUMP POINTER FOR MVCPARM\n         LA    R1,DALEXPDT\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         STH   R15,S99TULNG\n         BCTR  R15,0\n         EX    R15,MVCPARM         MOVE EXPDT DATE.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1(R15)  NEXT TEXT UNIT.\n         B     BB120\n         SPACE 1\nBB114    EQU   *\n         CLC   DSDATE(6),=C'RETPD='\n         BNE   QQ000               ERROR\n         SH    R15,=H'6'\n         BNP   QQ000\n         CH    R15,=H'4'\n         BH    QQ000\n         LA    R14,6(0,R14)        BUMP POINTER TO START OF NUMBER.\n         BAL   R1,PP100            EDIT AND CONVERT RETPD.\n         LA    R1,DALRETPD\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,2\n         STH   R15,S99TUPAR        PLACE RETPD VALUE IN TEXT UNIT.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+2       NEXT TEXT UNIT.\n         SPACE 1\n* DSALLOC *************************\n         SPACE 1\nBB120    EQU   *\n         LA    R7,DSALLOC-PARMLIST\n         LA    R14,DSALLOC\n         LA    R15,L'DSALLOC\n         BAL   R1,PP000            GET DSALLOC LENGTH.\n         LTR   R15,R15\n         BNP   QQ000               ERROR\n         CLC   DSALLOC,=CL5'TRK '  CHECK FOR TRACK ALLOCATION.\n         BNE   BB122\n         LA    R1,DALTRK\n         STH   R1,S99TUKEY\n*                                  S99TUNUM SET TO X'0000' BY WORKAREA\n*                                      CLEAR.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUENT         NEXT TEXT UNIT.\n         B     BB130\n         SPACE 1\nBB122    EQU   *\n         CLC   DSALLOC,=CL5'CYL '  CHECK FOR CYLINDER ALLOCATION.\n         BNE   BB124\n         LA    R1,DALCYL\n         STH   R1,S99TUKEY\n*                                  S99TUNUM SET TO X'0000' BY WORKAREA\n*                                      CLEAR.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUENT         NEXT TEXT UNIT.\n         B     BB130\n         SPACE 1\nBB124    EQU   *\n         BAL   R1,PP100            CHECK FOR AVERAGE BLOCK ALLOCATION.\n         LA    R1,DALBLKLN\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,3\n         STCM  R15,B'0111',S99TUPAR\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+3       NEXT TEXT UNIT.\n         SPACE 1\n* DSPRI ***************************\n         SPACE 1\nBB130    EQU   *\n         LA    R7,DSPRI-PARMLIST\n         LA    R14,DSPRI\n         LA    R15,L'DSPRI\n         BAL   R1,PP000            GET DSPRI LENGTH.\n         LTR   R15,R15\n         BNP   QQ000\n         BAL   R1,PP100            CHECK FOR PRIMARY QUANTITY.\n         LA    R1,DALPRIME\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,3\n         STCM  R15,B'0111',S99TUPAR\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+3       NEXT TEXT UNIT.\n         SPACE 1\n* DSSEC ***************************\n         SPACE 1\nBB140    EQU   *\n         LA    R7,DSSEC-PARMLIST\n         LA    R14,DSSEC\n         LA    R15,L'DSSEC\n         BAL   R1,PP000            GET DSSEC LENGTH.\n         LTR   R15,R15\n         BNP   BB150\n         BAL   R1,PP100            CHECK FOR SECONDARY QUANTITY.\n         LA    R1,DALSECND\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,3\n         STCM  R15,B'0111',S99TUPAR\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+3       NEXT TEXT UNIT.\n         SPACE 1\n* DSDIR ***************************\n         SPACE 1\nBB150    EQU   *\n         LA    R7,DSDIR-PARMLIST\n         LA    R14,DSDIR\n         LA    R15,L'DSDIR\n         BAL   R1,PP000            GET DSDIR LENGTH.\n         LTR   R15,R15\n         BNP   BB160\n         BAL   R1,PP100            CHECK FOR DIRECTORY QUANTITY.\n         LA    R1,DALDIR\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,3\n         STCM  R15,B'0111',S99TUPAR\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+3       NEXT TEXT UNIT.\n         SPACE 1\n* DSRLSE **************************\n         SPACE 1\nBB160    EQU   *\n         LA    R7,DSRLSE-PARMLIST\n         LA    R14,DSRLSE\n         LA    R15,L'DSRLSE\n         BAL   R1,PP000            GET DSRLSE LENGTH.\n         LTR   R15,R15\n         BNP   BB170\n         CLC   DSRLSE,=CL8'RLSE '\n         BNE   QQ000\n         LA    R1,DALRLSE\n         STH   R1,S99TUKEY\n*                                  S99TUNUM SET TO X'0000' BY WORKAREA\n*                                      CLEAR.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUENT         NEXT TEXT UNIT.\n         SPACE 1\n* DSCONTIG ************************\n         SPACE 1\nBB170    EQU   *\n         LA    R7,DSCONTIG-PARMLIST\n         LA    R14,DSCONTIG\n         LA    R15,L'DSCONTIG\n         BAL   R1,PP000            GET DSCONTIG LENGTH.\n         LTR   R15,R15\n         BNP   BB180\n         LA    R1,DALSPFRM\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,1\n         CLC   DSCONTIG,=CL8'CONTIG '\n         BNE   QQ000\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1       NEXT TEXT UNIT.\n         SPACE 1\n* DSROUND *************************\n         SPACE 1\nBB180    EQU   *\n         LA    R7,DSROUND-PARMLIST\n         LA    R14,DSROUND\n         LA    R15,L'DSROUND\n         BAL   R1,PP000            GET DSROUND LENGTH.\n         LTR   R15,R15\n         BNP   BB190\n         CLC   DSROUND,=CL8'ROUND '\n         BNE   QQ000\n         LA    R1,DALROUND\n         STH   R1,S99TUKEY\n*                                  S99TUNUM SET TO X'0000' BY WORKAREA\n*                                      CLEAR.\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUENT         NEXT TEXT UNIT.\n         SPACE 1\n* $RESERV4 ************************\n         SPACE 1\nBB190    EQU   *\n         LA    R7,$RESERV4-PARMLIST\n         CLC   $RESERV4,BLANKS\n         BNE   QQ000\n         EJECT\n* DSBLKSI *************************\n*\nCC100    EQU   *\n*\n         CLC   DSSTATUS(3),=C'NEW' IF ALLOCATION IS NOT NEW\n         BNE   MM000\n*\n         LA    R7,DSBLKSI-PARMLIST\n         LA    R14,DSBLKSI\n         LA    R15,L'DSBLKSI\n         BAL   R1,PP000            GET DSBLKSI LENGTH.\n         LTR   R15,R15\n         BNP   CC110\n         BAL   R1,PP100            CHECK FOR BLKSIZE VALUE.\n         CH    R15,=H'32767'       CHECK FOR MAXIMUM BLOCKSIZE.\n         BH    QQ000               ERROR.\n         LA    R1,DALBLKSZ\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,2\n         STH   R15,S99TUPAR\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+2       NEXT TEXT UNIT.\n         SPACE 1\n* DSORG ***************************\n         SPACE 1\nCC110    EQU   *\n         LA    R7,DSORG-PARMLIST\n         CLC   DSORG,NULLS\n         BNE   CC112\n         LA    R1,DALRTORG         SET UP TO HAVE DSORG RETURNED TO US\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,2\n         MVC   S99TUPAR(2),NULLS\n         LA    R1,S99TUPAR\n         ST    R1,WKRTDSRG         SAVE ADDRESS OF PARAMETER FIELD\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+2       NEXT TEXT UNIT.\n         B     CC120\nCC112    EQU   *\n         LA    R14,DSORG\n         LA    R15,L'DSORG\n         BAL   R1,PP000            GET DSORG LENGTH\n         LTR   R15,R15\n         BNP   CC120\n         LA    R1,DALDSORG\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,2\n         CLC   DSORG,=CL8'VSAM '\n         BNE   *+14\n         MVC   S99TUPAR(2),=XL2'0008'\n         B     CC115\n         CLC   DSORG,=CL8'PO   '\n         BNE   *+14\n         MVC   S99TUPAR(2),=XL2'0200'\n         B     CC115\n         CLC   DSORG,=CL8'POU  '\n         BNE   *+14\n         MVC   S99TUPAR(2),=XL2'0300'\n         B     CC115\n         CLC   DSORG,=CL8'DA   '\n         BNE   *+14\n         MVC   S99TUPAR(2),=XL2'2000'\n         B     CC115\n         CLC   DSORG,=CL8'DAU  '\n         BNE   *+14\n         MVC   S99TUPAR(2),=XL2'2100'\n         B     CC115\n         CLC   DSORG,=CL8'PS   '\n         BNE   *+14\n         MVC   S99TUPAR(2),=XL2'4000'\n         B     CC115\n         CLC   DSORG,=CL8'PSU  '\n         BNE   QQ000               ERROR\n         MVC   S99TUPAR(2),=XL2'4100'\nCC115    EQU   *\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+2       NEXT TEXT UNIT.\n         SPACE 1\n* DSKEYLEN ************************\n         SPACE 1\nCC120    EQU   *\n         LA    R7,DSKEYLEN-PARMLIST\n         LA    R14,DSKEYLEN\n         LA    R15,L'DSKEYLEN\n         BAL   R1,PP000            GET DSKEYLEN LENGTH.\n         LTR   R15,R15\n         BNP   CC130\n         BAL   R1,PP100            CHECK FOR KEYLENGTH QUANTITY.\n         CH    R15,=H'255'         CHECK FOR MAX KEYLENGTH.\n         BH    QQ000               ERROR\n         LA    R1,DALKYLEN\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,1\n         STC   R15,S99TUPAR\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1       NEXT TEXT UNIT.\n         SPACE 1\n* DSLRECL *************************\n         SPACE 1\nCC130    EQU   *\n         LA    R7,DSLRECL-PARMLIST\n         LA    R14,DSLRECL\n         LA    R15,L'DSLRECL\n         BAL   R1,PP000            GET DSLRECL LENGTH.\n         LTR   R15,R15\n         BNP   CC140\n         LA    R1,DALLRECL\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,2\n         CLC   DSLRECL,=CL5'X '    CHECK FOR SPANNED RECORDS.\n         BNE   *+14\n         MVC   S99TUPAR(2),=XL2'8000'\n         B     CC134\n         BAL   R1,PP100            CHECK FOR LRECL QUANTITY.\n         CH    R15,=H'32767'\n         BH    QQ000\n         STH   R15,S99TUPAR\nCC134    EQU   *\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+2       NEXT TEXT UNIT.\n         SPACE 1\n* DSRECFM1 THRU DSRECFM8 **********\n         SPACE 1\nCC140    EQU   *\n         LA    R7,DSRECFM1-PARMLIST\n         CLC   DSRECFM,BLANKS      CHECK FOR NO INFORMATION\n         BE    CC180\n         LA    R1,DALRECFM\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,1\n         CLI   DSRECFM1,C' '\n         BE    CC144\n         CLI   DSRECFM1,C'V'\n         BNE   *+12\n         OI    S99TUPAR,X'40'\n         B     CC144\n         CLI   DSRECFM1,C'F'\n         BNE   *+12\n         OI    S99TUPAR,X'80'\n         B     CC144\n         CLI   DSRECFM1,C'U'\n         BNE   QQ000               ERROR\n         OI    S99TUPAR,X'C0'\n         SPACE 1\nCC144    EQU   *\n         LA    R7,DSRECFM2-PARMLIST\n         CLI   DSRECFM2,C' '\n         BE    CC148\n         CLI   DSRECFM2,C'B'\n         BNE   QQ000               ERROR\n         OI    S99TUPAR,X'10'\n         SPACE 1\nCC148    EQU   *\n         LA    R7,DSRECFM3-PARMLIST\n         CLI   DSRECFM3,C' '\n         BE    CC152\n         CLI   DSRECFM3,C'S'\n         BNE   QQ000               ERROR\n         OI    S99TUPAR,X'08'\n         SPACE 1\nCC152    EQU   *\n         LA    R7,DSRECFM4-PARMLIST\n         CLI   DSRECFM4,C' '\n         BE    CC156\n         CLI   DSRECFM4,C'T'\n         BNE   QQ000               ERROR\n         OI    S99TUPAR,X'20'\n         SPACE 1\nCC156    EQU   *\n         LA    R7,DSRECFM5-PARMLIST\n         CLI   DSRECFM5,C' '\n         BE    CC160\n         CLI   DSRECFM5,C'M'\n         BNE   *+12\n         OI    S99TUPAR,X'02'\n         B     CC160\n         CLI   DSRECFM5,C'A'\n         BNE   QQ000               ERROR\n         OI    S99TUPAR,X'04'\n         SPACE 1\nCC160    EQU   *\n         LA    R7,DSRECFM6-PARMLIST\n         CLI   DSRECFM6,C' '\n         BNE   QQ000               ERROR\n         SPACE 1\nCC164    EQU   *\n         LA    R7,DSRECFM7-PARMLIST\n         CLI   DSRECFM7,C' '\n         BNE   QQ000               ERROR\n         SPACE 1\nCC168    EQU   *\n         LA    R7,DSRECFM8-PARMLIST\n         CLI   DSRECFM8,C' '\n         BNE   QQ000               ERROR\n         SPACE 1\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1       NEXT TEXT UNIT.\n         SPACE 1\n* DSDCBDS *************************\n         SPACE 1\nCC180    EQU   *\n         LA    R7,DSDCBDS-PARMLIST\n         LA    R14,DSDCBDS\n         LA    R15,L'DSDCBDS\n         BAL   R1,PP000            GET DSDCBDS LENGTH.\n         LTR   R15,R15\n         BNP   CC190\n         LA    R1,DALDCBDS\n         STH   R1,S99TUKEY\n         MVI   S99TUNUM+1,1\n         STH   R15,S99TULNG\n         BCTR  R15,0\n         EX    R15,MVCPARM\n         ST    R9,0(0,R8)          SAVE THIS TEXT UNIT ADDRESS.\n         LA    R8,4(0,R8)          NEXT TEXT POINTER.\n         LA    R9,S99TUPAR+1(R15)  NEXT TEXT UNIT.\n         SPACE 1\n* $RESERV5 ************************\n         SPACE 1\nCC190    EQU   *\n         LA    R7,$RESERV5-PARMLIST\n         CLC   $RESERV5,BLANKS\n         BNE   QQ000\n         B     MM000               GO DO REQUEST\n         SPACE 3\nMVCPARM  MVC   S99TUPAR(0),0(R14)\n         EJECT\nMM000    EQU   *\n         SH    R8,=H'4'            BACK UP TO LAST USED TEXT POINTER.\n         OI    0(R8),X'80'         INDICATE END OF LIST.\n         LA    R1,REQBKPTR         GET THE BEGINNING OF THIS MESS.\n*        DC    H'0'\n         DYNALLOC\n         L     R0,S99RSC           PICK UP REASON CODES.\n         LTR   R15,R15             CHECK FOR ERRORS.\n         BNZ   ZZ000\n         L     R1,WKRTNVOL         CHECK FOR VOLSER RETURN REQUEST.\n         LTR   R1,R1\n         BZ    MM010\n         MVC   DSVOLSER,0(R1)      GIVE CALLER INFO.\nMM010    EQU   *\n         L     R1,WKRTDSRG         CHECK FOR DSORG RETURN REQUEST.\n         LTR   R1,R1\n         BZ    MM020\n         CLC   0(2,R1),=XL2'0008'\n         BNE   *+14\n         MVC   DSORG,=CL8'VSAM '\n         B     MM020\n         CLC   0(2,R1),=XL2'0200'\n         BNE   *+14\n         MVC   DSORG,=CL8'PO   '\n         B     MM020\n         CLC   0(2,R1),=XL2'0300'\n         BNE   *+14\n         MVC   DSORG,=CL8'POU  '\n         B     MM020\n         CLC   0(2,R1),=XL2'2000'\n         BNE   *+14\n         MVC   DSORG,=CL8'DA   '\n         B     MM020\n         CLC   0(2,R1),=XL2'2100'\n         BNE   *+14\n         MVC   DSORG,=CL8'DAU  '\n         B     MM020\n         CLC   0(2,R1),=XL2'4000'\n         BNE   *+14\n         MVC   DSORG,=CL8'PS   '\n         B     MM020\n         CLC   0(2,R1),=XL2'4100'\n         BNE   *+14\n         MVC   DSORG,=CL8'PSU  '\n         B     MM020\n         CLC   0(2,R1),=XL2'8000'\n         BNE   *+14\n         MVC   DSORG,=CL8'IS   '\n         B     MM020\n         CLC   0(2,R1),=XL2'8100'\n         BNE   MM020\n         MVC   DSORG,=CL8'ISU  '\nMM020    EQU   *\n         B     ZZ000\n         EJECT\nPP000    EQU   *                   ROUTINE TO DETERMINE LENGTH OF\n         LTR   R15,R15                 NON-BLANK CHARACTERS IN FIELD.\n         BNP   PP030                   AT ENTRY R1 CONTAINS THE RETURN\n         ALR   R15,R14                 ADDRESS.  R14 CONTAINS FIELD\nPP010    EQU   *                       ADDRESS.  R15 CONTAINS LENGTH\n         BCTR  R15,0                   OF FIELD.  AT EXIT R15 WILL BE\n         CLI   0(R15),C' '             ALTERED TO CONTAIN LENGTH OF\n         BNE   PP020                   NON-BLANK CHARACTERS IN FIELD.\n         CLR   R15,R14\n         BH    PP010\n         SR    R15,R15\n         B     PP030\nPP020    EQU   *\n         SLR   R15,R14\n         LA    R15,1(0,R15)\nPP030    EQU   *\n         BR    R1\n         SPACE 3\nPP100    EQU   *                   ROUTINE TO EDIT EBCDIC NUMERIC\n         LTR   R15,R15                 DATA AND, IF VALID, TO CONVERT\n         BNP   PP120                   IT TO BINARY.\n         ST    R15,DBLWORD             AT ENTRY R1 CONTAINS THE RETURN\n         ALR   R15,R14                 ADDRESS.  R14 CONTAINS DATA\nPP110    EQU   *                       ADDRESS.  R15 CONTAINS LENGTH\n         BCTR  R15,0                   OF DATA.  AT NORMAL EXIT, R15\n         CLI   0(R15),C'0'             WILL BE ALTERED TO CONTAIN THE\n         BL    QQ000                   BINARY EQUIVALENT OF THE NUMBER.\n         CLI   0(R15),C'9'\n         BH    QQ000                   AN ABNORMAL EXIT WILL BE TAKEN\n         CLR   R15,R14                 TO THE COMMON ERROR ROUTINE IF\n         BH    PP110                   DATA IS NOT NUMERIC.\n         L     R15,DBLWORD\n         BCTR  R15,0\n         EX    R15,PACKNUM\n         CVB   R15,DBLWORD\nPP120    EQU   *\n         BR    R1\n         SPACE 1\nPACKNUM  PACK  DBLWORD,0(0,R14)\n         EJECT\nQQ000    EQU   *\n         LR    R0,R7               SET UP RETURN CODES\n         LA    R15,15\n         B     ZZ000\n         SPACE 3\nZZ000    EQU   *\n         LR    R1,R13              PREPARE FOR FREEMAIN.\n         L     R13,SAVEAREA+4\n         LTR   R11,R11             CHECK TO SEE IF PARAMETER LIST IS\n         BNP   ZZ010                   ONLY ENTRY IN CALLER'S ADDRESS\n         L     R2,24(0,R13)            LIST.\n         L     R2,4(0,R2)          GET SECOND ADDRESS IN LIST.\n         ST    R0,0(0,R2)          PUT REGISTER INFORMATION IN LIST.\n         ST    R15,4(0,R2)\nZZ010    EQU   *\n         LR    R2,R0               SAVE CONTENTS OF REGISTERS.\n         LR    R3,R15\nFREE1    DS    0H\n         LR    R0,R2\n         LR    R15,R3\n         L     R14,12(0,R13)\n         RETURN (1,12),RC=(15)\nWORKLEN  DC    A(DYNWRKSZ)\nTXPTRSPC DC    A(4*40)             RESERVE SPACE FOR 40 TEXT POINTERS.\nBLANKS   DC    CL44' '\nNULLS    DC    XL44'00'\n         LTORG\n         CNOP  0,8\n         EJECT\n         PRINT NOGEN\n         PARMLIST\n         IHAPSA\n         IHAASCB\n         IKJTCB\n         IEFUCBOB\n         IEFZB4D0\n         IEFZB4D2\n         CVT   DSECT=YES\n         IECDIOCM\n         IECDATB\nATBLEN   EQU   *-ATB\n         TCBUVTAM PFX=TCBU\nTIOT     DSECT\n         IEFTIOT1\n         IKJTSB\n         IHAPDS PDSBLDL=NO\n*\n*\n*\n*\nACBSIZ   EQU   56\nMODSIZ   EQU   36\nRPLSIZ   EQU   72\nDYNDECBL EQU   20\nGMVUL    EQU   10\n*\n         PRINT GEN\n         SPLTAREA\n         MYSAVE\n         DIRMASK\n         SPFMT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         CNOP  0,8\nETPSATEN CSECT\n*                       R1  ON ENTRY IS THE IOSB ADDRESS\n*                       R13 ON ENTRY IS THE SAVE AREA ADDRESS\n*                       R14 ON ENTRY IS THE RETURN ADDRESS\n*                              R14 + 0 = IOS NOP\n*                              R14 + 4 = IOS GO POST ANOTHER ASID'S ECB\n*                       R15 ON ENTRY IS THE ENTRY ADDRESS\nATXTBGN  EQU   *\n         USING *,R8\n         STM   R0,R15,0(R13)       SAVE REGS\n         LR    R8,R15              SET BASE\n         USING IOSB,1\n         L     R3,IOSSRB           LOAD ADDRESS OF SRB FROM IOSB\n         USING SRBSECT,3           LOAD ADDRESS OF SRB FROM IOSB\n         L     R5,SRBASCB          LOAD ADDRESS OF ASCB FROM SRB\n         USING ASCB,5\n         L     R7,IOSUCB           LOAD ADDRESS OF UCB BEGIN FROM IOSB\n         USING UCBCMSEG,7\n         L     R2,UCBEXTPT         LOAD ADDRESS OF UCB EXTENSION\n         USING UCBCMEXT,2\n         OC    UCBASID,UCBASID     SEE IF ASID IS ZERO           W.A.M.\n         BZ    BADEXIT             IF ZERO, EXIT WITH RETURN CODE ZERO\n         CLC   ASCBASID,UCBASID    COMPARE IF IT'S OUR ADDRESS SPACE ID\n         BE    TFORECB             IF OURS, GO POST\n         MVC   IOSASID,UCBASID     PUT THE ASID TO BE SCHEDULED IN IOSB\n         LM    R0,R14,0(R13)               RESTORE REGS\n         LA    R15,4               SET RETURN CODE TO 4\n         B     4(,R14)             RETURN TO CALLER, REQ. IOS POST IOSB\nTFORECB  DS    0H\n         TM    UCBRDYQ,X'80'       DID ETPS ISSUE A WAIT?\n         BZ    BADEXIT             IF NOT, AN UNSOLICITED INTERRUPT\n         LR    R9,R13                      THIS REGISTER IS PRESERVED\n         LA    R11,UCBRDYQ                 ECB ADDRESS\n         LR    R13,R5                      SET ASCB\n*\n*  NOTE BRANCH ENTRY POST WILL DESTORY REGISTERS 10 THRU 15\n*\n         PRINT GEN\n         POST  (11),ASCB=(13),ERRET=AFTPOST,BRANCH=YES,ECBKEY=0\n         DROP  ,                   DROP ALL REGISTERS\nAFTPOST  DS    0H\n         LR    R13,R9              RE-LOAD SAVE AREA REGISTER\nBADEXIT  DS    0H\n         LM    R0,R14,0(R13)               RESTORE REGS\n         SLR   R15,R15                     SET RETURN CODE TO ZERO\n         BR    R14                 RETURN TO CALLER, NO WORK FOR IOS\n         CNOP  0,8\nATXTLEN  EQU   *-ATXTBGN\n         IECDIOSB\n         IHASRB\n         TITLE 'ETPS - LOGON HELP SCREEN'\nLOGHELP  CSECT\n         DC    A(LOGHELP1)\n         DC    A(LOGBLANK)\n         DC    A(LOGHELP2)\n         DC    A(LOGHELP3)\n         DC    A(LOGHELP4)\n         DC    A(LOGHELP5)\n         DC    A(LOGBLANK)\n         DC    A(LOGHELP6+X'80000000')\nLOGHELP1 DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                  PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL21' LOGON PANEL         '\n         DC    34C'-'\n*        123456789012345678901234567890123456789012345678901234567890\nLOGHELP2 DC    AL1(61),X'05'\n DC CL62'THE ETPS LOGON PANEL IS PROVIDED TO ALLOW A USERID TO BE    '\nLOGHELP3 DC    AL1(61),X'05'\n DC CL62'    ENTERED AND VERIFIED TO LIMIT THE POSSIBILITY OF        '\nLOGHELP4 DC    AL1(61),X'05'\n DC CL62'    UNAUTHORIZED USE. THE PASSWORD FIELD IS NOT VERIFIED BY '\nLOGHELP5 DC    AL1(61),X'05'\n DC CL62'    ETPS, AS SHIPPED.                                       '\nLOGHELP6 DC    AL1(61),X'05'\n DC CL62'PF3, OR ENTERING \"EOJ\" IN THE USERID FIELD LOGS YOU OFF.    '\nLOGBLANK DC    AL1(10),X'05',CL12' '\n         CNOP  0,8\n         EJECT\n         TITLE 'ETPS - PRIMARY OPTION HELP SCREEN'\nPOPHELP  CSECT\n         DC    A(POPHELP1)\n         DC    A(POPBLANK)\n         DC    A(POPHELP2)\n         DC    A(POPHELP3)\n         DC    A(POPHELP4)\n         DC    A(POPBLANK)\n         DC    A(POPHELP5)\n         DC    A(POPHELP6+X'80000000')\nPOPHELP1 DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                  PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL22' PRIMARY OPTION PANEL'\n         DC    34C'-'\n*        123456789012345678901234567890123456789012345678901234567890\nPOPHELP2 DC    AL1(61),X'05'\n DC CL62'THE PRIMARY OPTION PANEL SHOWS WHAT ETPS FUNCTIONS ARE      '\nPOPHELP3 DC    AL1(61),X'05'\n DC CL62'    AVAILABLE. THE OPTIONS ARE INVOKED BY ENTERING THE      '\nPOPHELP4 DC    AL1(61),X'05'\n DC CL62'    OPTION NUMBER IN THE COMMAND LINE.                      '\nPOPHELP5 DC    AL1(61),X'05'\n DC CL62'PF3, OR ENTERING \"X\" IN THE COMMAND LINE RETURNS TO THE     '\nPOPHELP6 DC    AL1(61),X'05'\n DC CL62'    LOGON PANEL.                                            '\nPOPBLANK DC    AL1(10),X'05',CL12' '\n         CNOP  0,8\n         EJECT\n         TITLE 'ETPS - PDS BROWSE HELP SCREEN'\nBROHELP  CSECT\n         DC    A(BROHELP1)\n         DC    A(BROBLANK)\n         DC    A(BROHELP2)\n         DC    A(BROHELP3)\n         DC    A(BROHELP4)\n         DC    A(BROBLANK)\n         DC    A(BROHELP5+X'80000000')\nBROHELP1 DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                  PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL22' PDS BROWSE  PANEL'\n         DC    34C'-'\n*        123456789012345678901234567890123456789012345678901234567890\nBROHELP2 DC    AL1(61),X'05'\n DC CL62'THE PDS BROWSE PANEL PROVIDES FOR ENTERING THE PDS DSNAME,  '\nBROHELP3 DC    AL1(61),X'05'\n DC CL62'    WHICH MUST BE A FULLY-QUALIFIED DSNAME, NOT IN QUOTES.  '\nBROHELP4 DC    AL1(61),X'05'\n DC CL62'    A SPECIFIC VOLSER MAY ALSO BE ENTERED, AND A PASSWORD.  '\nBROHELP5 DC    AL1(61),X'05'\n DC CL62'PF3 RETURNS TO THE PRIMARY OPTION PANEL.                    '\nBROBLANK DC    AL1(10),X'05',CL12' '\n         CNOP  0,8\n         EJECT\n         TITLE 'ETPS - PDS EDIT   HELP SCREEN'\nEDTHELP  CSECT\n         DC    A(EDTHELP1)\n         DC    A(EDTBLANK)\n         DC    A(EDTHELP2)\n         DC    A(EDTHELP3)\n         DC    A(EDTHELP4)\n         DC    A(EDTBLANK)\n         DC    A(EDTHELP5+X'80000000')\nEDTHELP1 DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                  PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL22' PDS EDIT    PANEL'\n         DC    34C'-'\n*        123456789012345678901234567890123456789012345678901234567890\nEDTHELP2 DC    AL1(61),X'05'\n DC CL62'THE PDS EDIT   PANEL PROVIDES FOR ENTERING THE PDS DSNAME,  '\nEDTHELP3 DC    AL1(61),X'05'\n DC CL62'    WHICH MUST BE A FULLY-QUALIFIED DSNAME, NOT IN QUOTES.  '\nEDTHELP4 DC    AL1(61),X'05'\n DC CL62'    A SPECIFIC VOLSER MAY ALSO BE ENTERED, AND A PASSWORD.  '\nEDTHELP5 DC    AL1(61),X'05'\n DC CL62'PF3 RETURNS TO THE PRIMARY OPTION PANEL.                    '\nEDTBLANK DC    AL1(10),X'05',CL12' '\n         CNOP  0,8\n         EJECT\n         TITLE 'ETPS - PDS UTILITY HELP SCREEN'\nUT1HELP  CSECT\n         DC    A(UT1HELP1)\n         DC    A(UT1BLANK)\n         DC    A(UT1HELP2)\n         DC    A(UT1HELP3)\n         DC    A(UT1HELP4)\n         DC    A(UT1BLANK)\n         DC    A(UT1HELP5)\n         DC    A(UT1BLANK)\n         DC    A(UT1HELP6+X'80000000')\nUT1HELP1 DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                  PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL22' PDS UTILITY PANEL'\n         DC    34C'-'\n*        123456789012345678901234567890123456789012345678901234567890\nUT1HELP2 DC    AL1(61),X'05'\n DC CL62'THE PDS UTILITY PANEL PROVIDES FOR ENTERING THE PDS DSNAME, '\nUT1HELP3 DC    AL1(61),X'05'\n DC CL62'    WHICH MUST BE A FULLY-QUALIFIED DSNAME, NOT IN QUOTES.  '\nUT1HELP4 DC    AL1(61),X'05'\n DC CL62'    A SPECIFIC VOLSER MAY ALSO BE ENTERED, AND A PASSWORD.  '\nUT1HELP5 DC    AL1(61),X'05'\n DC CL62'THE ONLY OPTION IS \"C\" FOR COMPRESS.                        '\nUT1HELP6 DC    AL1(61),X'05'\n DC CL62'PF3 RETURNS TO THE PRIMARY OPTION PANEL.                    '\nUT1BLANK DC    AL1(10),X'05',CL12' '\n         CNOP  0,8\n         EJECT\n         END\n/*\n//LKED1    EXEC PGM=HEWL,PARM='XREF,LET,LIST,RENT,AC=1',\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MVSTGT\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n     NAME ETPS(R)\n/*\n//LKED2    EXEC PGM=HEWL,PARM='XREF,LET,LIST,RENT,AC=1',\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MVSYSA\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n     NAME ETPS(R)\n/*\n//*LA  EXEC PGM=MVSCMD,PARM='F LLA,REFRESH'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ETPS$": {"ttr": 5641, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x02F\\x02F\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 582, "newlines": 582, "modlines": 0, "user": "CBT353"}, "text": "1\n ********************************************************************\n\n\n                             E  T  P  S\n\n\n                 EMERGENCY TELE-PROCESSING SERVICES\n\n\n\n ********************************************************************\n\n     W A R N I N G ! ! ! ! ! !\n\n     W A R N I N G ! ! ! ! ! !\n\n     W A R N I N G ! ! ! ! ! !\n\n\n     THIS PROGRAM SHOULD BE TESTED DURING STANDALONE TIME ONLY.\n\n     USE AT YOUR OWN RISK. NO WARRENTY IS EXPRESSED OR IMPLIED.\n\n\n     W A R N I N G ! ! ! ! ! !\n\n     W A R N I N G ! ! ! ! ! !\n\n     W A R N I N G ! ! ! ! ! !\n\n\n ********************************************************************\n1\n ********************************************************************\n\n                             E  T  P  S\n\n ********************************************************************\n\n   INSTALLATION STEPS:\n\n\n 1. SUBMIT AN ASSEMBLY OF ETPS. IT MUST BE MARKED AUTHORIZED AND MUST\n    BE PLACED IN AN AUTHORIZED LIBRARY. ETPS MODULES REQUIRE\n    2 COPY ELEMENTS ON THIS LIBRARY, \"ETPSMACS\" AND \"TCBUVTAM\".\n\n    I STRONGLY SUGGEST THAT YOU PUT ETPS IN SYS1.LINKLIB. WHY? BECAUSE\n    THERE IS LITTLE POINT IN AN EMERGENCY RECOVERY SYSTEM THAT DEPENDS\n    ON ALL OF YOUR LNKLST OR APF LIBRARIES BEING AVAILABLE--THAT MAY BE\n    THE PROBLEM YOU ARE TRYING TO RECOVER FROM.\n\n    SUBMIT ASSEMBLIES FOR:\n\n         ETPSBRO3 -- BROWSE\n         ETPSCOMP -- FOREGROUND COMPRESS\n         ETPSEDT3 -- EDITOR\n         ETPSIDC2 -- IDCAMS INTERFACE\n         ETPSMEMC -- FOREGROUND MEMBER COPY\n         ETPSTSO  -- TSO COMMAND PROCESSOR FRONT-END\n\n\n\n    NOTE: DO NOT STRIP OFF THE ASSEMBLY AND LINK-EDIT JCL WITHOUT\n          LOOKING AT IT; IT IS INCLUDED FOR YOUR REFERENCE. NOTE\n          AUTHORIZATION REQUIREMENTS, LINK-EDIT ATTRIBUTES, ETC.\n\n\n 2. CREATE A PROC TO INVOKE ETPS AS A SUB-SYSTEM. YOU MUST PUT IT IN\n    SYS1.PROCLIB (ON YOUR IPL VOLUME, I TRUST). FOR EXAMPLE:\n\n     //ETPS PROC TRM1=ETPS34AB\n     //* DEFAULT IS 3279 MOD3 NEXT TO MVS MASTER CONSOLE\n     //ETPS EXEC PGM=ETPS,PARM=&TRM1,PERFORM=3,TIME=1440\n\n\n    THE FORMAT OF THE PARM FIELD IS DISCUSSED BELOW. AS A GENERAL\n    RULE, YOU SHOULD SELECT A DEFAULT TERMINAL THAT IS NEAR TO THE\n    MVS MASTER CONSOLE. AN MCS  CONSOLE CAN BE USED, BUT IT MUST\n    BE GEN'ED AS A 3278/9 AND VARY'ED OFF AS A CONSOLE AND THEN ON.\n    THIS IS SOMETHING YOU CAN EASILY FORGET TO DO WHEN YOU ARE IN PANIC\n    MODE, SO SHOULD PROBABLY BE AVOIDED, IF POSSIBLE.\n\n\n    NOTE: ETPS HAS BEEN TESTED ONLY WITH LOCAL NON-SNA IBM 3270'S. I\n          HAVE NO ACCESS TO OTHER TERMINAL TYPES. THE ONLY MODELS I\n          CAN TEST WITH ARE 3278-2, 3278-4, AND 3279-3B.\n1\n\n\n 3. CREATE A PROC TO INVOKE ETPS AS A NORMAL STARTED TASK. PUT IT IN\n    SYS1.PROCLIB, PREFERABLY. FOR EXAMPLE:\n\n\n     //ETPSJOB PROC TRM1=ETPS34AB\n     //* DEFAULT IS 3279 MOD3 NEXT TO MVS MASTER CONSOLE\n     //ETPS EXEC PGM=ETPS,PARM=&TRM1,PERFORM=3,TIME=1440\n\n\n    THE SECOND PROC IS JUST IN CASE JES HAS COME UP, SO THAT YOU\n    CAN SUBMIT BATCH JOBS, BUT THE REST OF THE SYSTEM MAY BE NOT BE\n    \"UP\" FAR ENOUGH TO ALLOW YOU TO LOG ONTO TSO.\n\n    YOU CANNOT SUBMIT BATCH JOBS TO JES WHEN RUNNING AS A SUB-SYSTEM.\n    (WELL, IT AIN'T EASY, AND ETPS DOESN'T DO IT.)\n\n 4. IF YOU WANT TO RUN ETPS UNDER TSO, INSTALL THE PROGRAM \"ETPSTSO\"\n    ON THIS TAPE INTO A LIBRARY AVAILABLE TO YOUR TSO SESSION.\n\n    WHY WOULD YOU WANT TO DO THIS?\n\n    ONE REASON IS THAT ETPS IS INTENDED TO BE USED IN EMERGENCIES;\n    DO YOU REALLY WANT TO WAIT UNTIL THEN TO START BECOMING FAMILIAR\n    WITH YOUR RECOVERY TOOLS? WHEN THE SYSTEM IS IN THE BAG, I DON'T\n    WANT TO LEARN THE QUIRKS OF A TP SYSTEM, I MAINLY WANT TO GET THE\n    SYSTEM BACK UP. I SUGGEST A FEW MINUTES WITH THE EDITOR MIGHT BE\n    USEFUL FOR BASIC FAMILIARIZATION.\n\n\n 5. DEFINE \"ETPS\" AS A SUB-SYSTEM. IT IS NOT ACTUALLY A SUB-SYSTEM,\n    BUT THAT DOESN'T MATTER AS LONG AS MVS THINKS IT IS. YOU CAN\n    EITHER UPDATE YOUR SYSGEN, ZAP IT INTO YOUR SUB-SYSTEM NAMES\n    TABLE, OR AS I DO, PUT IT IN \"SYS1.PARMLIB(IEFSSN01)\".\n\n\n 6. UPDATE YOUR SECURITY SYSTEM. WE HAVE RACF, AND ETPS IS DEFINED TO\n    BE ABLE TO ALTER ALL \"SYS1\" STUFF, AND ALSO HAS \"SPECIAL\". I DON'T\n    KNOW WHAT YOU WOULD HAVE TO DO FOR ACF2, OR THE OTHER SYSTEMS.\n\n    BE SURE TO ADD BOTH STARTED TASK NAMES TO ICHRIN03, IF YOU HAVE RACF\n\n    NOTE: SINCE WRITING THE ABOVE, WE HAVE REMOVED RACF, AND INSTALLED\n          ACF2. WE DO NOT CHECK SECURITY IN STARTED TASKS, HOWEVER, SO\n          I CAN'T PROVIDE ANY FURTHER GUIDELINES.\n\n\n 7. I STRONGLY SUGGEST THAT YOU TEST THIS ON STAND-ALONE TIME. ONE\n    INSTALLATION TRIED ETPS DURING THE DAY, LOST THEIR CONSOLES\n    AND HAD TO RE-IPL. OTHERS HAVE HAD NO PROBLEMS.\n\n    CHECK IT OUT FOR YOURSELF.\n\n 8. IF YOU HAVE PROBLEMS IN INSTALLING OR USING ETPS, CALL:\n\n    BRIAN COOK\n    MORTON THIOKOL, INC.\n    (312) 807-2466\n1\n\n                             E  T  P  S\n\n                        GENERAL DESCRIPTION\n\n ********************************************************************\n\n   FUNCTION-\n\n   THIS PROGRAM IS INTENDED TO PROVIDE EMERGENCY TELE-PROCESSING\n   SERVICES WHEN THE NORMAL SUBSYSTEMS SUCH AS JES2, VTAM, TCAM, ETC\n   ARE NOT AVAILABLE. IT IS INTENDED TO BE INVOKED AS A STARTED TASK,\n   AND IT MUST BE DEFINED AS A SECONDARY SUBSYSTEM IN ORDER\n   TO BE ABLE TO START WHEN JES2 IS NOT AVAILABLE.\n\n\n   PARM -\n\n   THIS PROGRAM MUST BE INVOKED WITH A STANDARD EXECUTE-CARD FORMAT\n   PARM. THE LENGTH MUST BE 8 BYTES, AS FOLLOWS:\n\n      1. THE FIRST 4 CHARACTERS MUST BE \"ETPS\".\n\n      2. THE 5TH BYTE IS TERMINAL TYPE. VALID TERMINAL TYPES ARE:\n\n              2 = 3278 MODEL 2\n              A = 3278 MODEL 2A (PER WAYNE MITCHELL)\n              3 = 3279 MODEL 3B\n              4 = 3278 MODEL 4\n\n      3. THE LAST 3 BYTES MUST BE THE UNIT ADDRESS OF THE TERMINAL.\n\n   AS AN EXAMPLE, //STEP1  EXEC  PGM=ETPS,PARM='ETPS49C4' STARTS\n   TIME-SHARING ON A LOCAL 3278  MOD 4 AT ADDR 9C4.\n\n\n   LOGGING ON AND OFF -\n\n   THE FIRST THING THE PROGRAM DOES IS PROMPT FOR A USER-ID AND\n   PASSWORD. THE USER-ID IS COMPARED TO A LIST OF VALID USER-ID'S.\n   THIS SHOULD BE CHANGED TO CHECK AGAINST UADS, MAYBE. SEE THE\n   \"USERTABL\" IN THE CODE.\n\n   THE PASSWORD IS NOT CURRENTLY VALIDATED IN ANY WAY, BUT IS USED\n   AS THE DEFAULT PASSWORD FOR DATASET ALLOCATIONS.\n\n   THE LOGON MENU LOOKS LIKE:\n\n\n    ENTER USERID ==>_            (ONLY \"BCOOK\" IS VALID)\n    AND PASSWORD ==>             (DEFAULT DATASET PASSWORD)\n      RACF GROUP ==>             (OPTIONAL, SHOULD BE \"SYS1\")\n\n\n   IF \"LOGON\" IS SUCCESSFUL, THE PRIMARY OPTION MENU (AS IN SPF) IS\n   DISPLAYED, AND THE USER CAN BEGIN PROCESSING.\n\n   TO SHUT DOWN, ENTER \"EOJ\" IN THE USER-ID FIELD, OR HIT ANY PFK.\n1\n\n\n   THE PRIMARY OPTION MENU LOOKS LIKE:\n\n   --------------------- ETPS PRIMARY OPTION MENU  ----------------\n   SELECT OPTION==>_\n\n    1  BROWSE       - DISPLAY SOURCE DATA\n    2  EDIT         - CREATE OR CHANGE SOURCE DATA\n    3  UTILITY      - PERFORM ETPS UTILITY FUNCTIONS\n    4  IDCAMS       - IDCAMS FOREGROUND PROCESSING\n\n    X  EXIT         - TERMINATE ETPS AND RETURN TO LOGON MENU\n\n    PRESS PFK 3 TO TERMINATE ETPS\n\n\n\n    IF OPTION 2 (EDIT) IS SELECTED, AN EDIT MENU IS DISPLAYED:\n\n\n   --------------------- ETPS EDIT MENU  --------------------------\n\n   ENTER DATASET NAME ==>_\n               VOLSER ==>          (IF NOT CATALOGED)\n             PASSWORD ==>          (IF PASSWORD-PROTECTED)\n\n\n\n\n    NOTE THAT DATASET NAMES MUST BE ENTERED AS FULLY-QUALIFIED\n         NAMES, NOT IN QUOTES.\n\n    NOTE THAT THE OPTION 1 (BROWSE) MENU IS ESSENTIALLY THE SAME.\n\n\n    ALSO, THERE IS A BUG IN THE CODE SUCH THAT YOU CANNOT ENTER\n    THE MEMBER NAME IN PARENS. THIS WILL BE FIXED WHEN I GET AROUND\n    TO IT.\n\n    ONLY PS AND PO FILES WITH LRECL=80 CAN BE EDIT'ED.\n\n    IF THE DATASET IS A PDS, YOU WILL BE PRESENTED WITH A MEMBER\n    LIST. YOU CAN SCROLL UP AND DOWN USING PFK7 AND 8.  A MEMBER\n    CAN BE SELECTED FOR EDIT BY ENTERING AN \"S\" IN THE COLUMN TO\n    THE LEFT OF THE MEMBER NAME. THERE IS A  \"LOCATE\" FUNCTION TO\n    POSITION YOURSELF IN THE LIBRARY, SIMILAR TO SPF; JUST TYPE\n    L MEM  ON THE COMMAND INPUT LINE.\n1\n\n\n\n\n\n    THE EDITOR IS A VERY PRIMITIVE TOOL. YOU CAN REPEAT LINES,\n    DELETE LINES, AND TYPE OVER LINES. YOU CAN COPY A LINE\n    AFTER ANOTHER LINE. YOU CAN FIND A STRING OF CHARACTERS AND\n    CHANGE IT TO ANOTHER STRING OF CHARACTERS OF THE SAME LENGTH.\n\n    THAT'S IT. THIS IS NOT SPF.\n\n    TO DELETE A LINE, ENTER A \"D\" IN THE SEQUENCE NUMBER COLUMN AT\n    THE LEFT. THERE IS NO \"DD\" (DELETE RANGE) COMMAND.\n\n    TO REPEAT A LINE, ENTER AN \"R\" IN THE SEQUENCE NUMBER COLUMN AT\n    THE LEFT.  YOU CAN ONLY REPEAT ONE LINE AT A TIME.\n\n    TO COPY A LINE, ENTER A \"C\" IN THE SEQUENCE NUMBER COLUMN AT\n    THE LEFT, AND AN \"A\" ON THE LINE YOU WANT TO COPY IT AFTER.\n\n    YOU CAN TYPE OVER ANY OR ALL LINES ON THE SCREEN, BUT I HAVE NOT\n    TESTED MIXING THIS WITH \"D\" AND \"R\" LINE COMMANDS, SO WATCH IT.\n\n    SCROLLING UP AND DOWN IS ACCOMPLISHED BY PF7 AND 8, AS IS USUAL,\n    AND THE NUMBER OF LINES CAN BE ENTERED IN THE COMMAND LINE. ALSO\n    \"M\" IS MAX, FOR TOP AND BOTTOM.\n\n\n    TO SEARCH FOR A CHARACTER STRING, ENTER \"F \" ON THE COMMAND LINE\n    AND ENTER THE CHARACTER STRING ON THE \"FIND STRING\" LINE. IF\n    THE STRING HAS LEADING OR TRAILING BLANKS OR SINGLE QUOTES, YOU\n    HAVE TO PUT THE WHOLE SHOT IN SINGLE QUOTES. (PF5 IS FIND/RFIND)\n\n    THE \"FIND STRING\" LINE ALSO HAS A \"CHANGE TO\" AREA. THIS IS USED\n    TO CHANGE THE FIND STRING TO SOME OTHER STRING OF CHARACTERS. AT\n    PRESENT, BOTH STRINGS MUST BE THE SAME LENGTH. TO CHANGE A STRING\n    OF CHARACTERS, BOTH THE \"FIND\" AND \"CHANGE\" AREAS MUST BE FILLED\n    IN; THEN ENTER \"C\" ON THE COMMAND LINE OR PRESS PF KEY 6. YOU CAN\n    CHANGE ONLY ONE OCCURENCE OF THE \"FIND STRING\" AT A TIME, THERE IS\n    NO \"CHANGE ALL\" COMMAND AS YET. 24 CHARACTERS IS THE MAXIMUM THAT\n    CAN BE SPECIFIED.\n\n    NOTE THAT \"SAVE\" IS THE DEFAULT, WHETHER OR NOT YOU HAVE CHANGED\n         ANY CARDS IN THE MEMBER, SO ENTER \"CANCEL\" ON THE COMMAND\n         LINE IF YOU DON'T WANT THIS TO HAPPEN. (SEE PF KEYS BELOW)\n1\n\n\n    TO SUBMIT THE JCL STREAM YOU ARE EDITING, JUST TYPE \"SUB\" ON\n    THE COMMAND LINE; THE JES2 JOB NUMBER WILL APPEAR IN THE MESSAGE\n    AREA IN THE UPPER-RIGHT CORNER OF THE SCREEN. NOTE THAT IF YOU\n    ARE RUNNING AS A SUB-SYSTEM, YOU CANNOT SUBMIT JOBS. FOR THAT\n    REASON, YOU SHOULD ALWAYS HAVE 2 PROC'S IN SYS1.PROCLIB--ONE\n    DEFINED AS A SUB-SYSTEM IN IEFSSN01, AND ONE NOT SO DEFINED.\n    YOU SHOULD START THE SUB-SYSTEM IF JES IS NOT UP, AND START THE\n    OTHER IF YOU WILL NEED TO SUBMIT BATCH JOBS.\n\n    ETPS DOES NOT INVOKE THE TSO SUBMIT EXIT, SO IF YOU HAVE ANY\n    SPECIAL HANDLING THERE, JUST BE AWARE THAT IT WON'T HAPPEN.\n\n\n    IF YOU HAVE RACF, DON'T FORGET TO ADD BOTH STARTED TASK NAMES\n    TO ICHRIN03. IF YOU HAVE ACF2, OR SOME OTHER SYSTEM, YOU'RE ON\n    YOUR OWN. JUST BE AWARE OF THE TYPES OF DATASETS YOU MAY NEED\n    TO ACCESS/ALLOCATE/DELETE/UPDATE DURING AN EMERGENCY.\n\n\n\n  PF KEY ASSIGNMENTS\n\n     PFK DEFINITIONS CANNOT BE CHANGED:\n\n              PF1  - HELP\n              PF2  - SPLIT THE SCREEN\n              PF3  - RETURN (IN EDIT, SAVE AND END)\n              PF4  - CANCEL (IN EDIT, END NOSAVE)\n              PF5  - FIND OR REPEAT FIND IN EDIT OR BROWSE\n              PF6  - CHANGE OR REPEAT CHANGE IN EDIT\n              PF7  - SCROLL UP\n              PF8  - SCROLL DOWN\n              PF9  - SWITCH SCREENS (FOR SPLIT-SCREEN MODE)\n              PF10 - SCROLL LEFT  (BROWSE ONLY)\n              PF11 - SCROLL RIGHT (BROWSE ONLY)\n              PF12 - CURSOR HOME\n\n\n     A SPECIAL NOTE ON PF9: WHEN IN SPLIT-SCREEN MODE, YOU MUST USE\n     PF9 TO SWITCH FROM ONE SCREEN TO ANOTHER. JUST MOVING THE\n     CURSOR DOESN'T GET IT.\n\n\n  OPERATIONAL NOTE\n\n     ETPS IS IMPLEMENTED AS A STARTED TASK, AND IS DEFINED AS A\n     SUB-SYSTEM IN \"SYS1.PARMLIB(IEFSSN01)\". IT WILL START WITHOUT\n     JES BEING ACTIVE. THE JCL IS JUST AN EXEC CARD, SO THE CHANCES\n     OF A JCL ERROR ARE MINIMAL. ALSO, IF PUT IN \"SYS1.PROCLIB\",\n     IT SHOULD ALWAYS BE START-ABLE, UNLESS THAT LIBRARY IS DAMAGED.\n\n     IT IS STARTED FROM THE CONSOLE BY ENTERING:\n\n     S ETPS,TRM1=ETPS34AB    (THIS IS THE DEFAULT TERMINAL)\n                     3       INDICATES A 3279-3B\n                      4AB    CHANNEL AND UNIT ADDRESS\n1\n                       CHANGES TO BE DONE\n ********************************************************************\n\n    SCROLL   WHEN SCROLLING A PDS DIRECTORY MEMBER LIST, THE BOTTOM\n             LINE OF THE DISPLAY IS SOMETIMES NOT USED. THIS ALSO\n             HAPPENS WHEN IN SPLIT-SCREEN MODE.\n\n    SCROLL   WHEN SCROLLING A PDS DIRECTORY MEMBER LIST DOWN AND UP,\n             POSITIONING IS SOMEWHAT ERRATIC; THE SCROLL AMOUNT IS\n             USUALLY LESS THAN A PAGE.\n\n    CURSOR   CURSOR POSITIONING LOGIC MAY BE OFF IN SPLIT-SCREEN.\n\n    LIB MGMT MAY NEED PANVALET SUPPORT.\n\n    ESTAE    NEEDS TO BE ADDED.\n\n    EDIT     NEEDS THE FOLLOWING:\n             1. COPY RANGE (\"CC\").\n             2. REPEAT RANGE (\"RR\").\n             3. DELETE RANGE (\"DD\").\n             4. COPY DATASET OR MEMBER.\n             5. CREATE MEMBER.\n             6. PANVALET SUPPORT.\n             7. CHANGE ALL.\n             8. CHANGE UNEQUAL LENGTH STRING.\n\n   UTILITY   COMPLETE, AS IS.\n\n   IDCAMS    COMPLETE, AS IS.\n\n   DATASET   NEED TO ADD, WITH ALLOCATE, DISPLAY, CATALOG, ETC.\n\n   JES       NEED TO ADD SOME SORT OF JES INTERFACE.\n\n1\n                       WTO MESSAGES\n\n ********************************************************************\n\n   USER WTO MESSAGES, ALL PREFIXED BY \"ETPS\" -\n\n   ALL \"WTO\" CODES START WITH 1000; THEIR MEANINGS ARE:\n\n       1001  -  INVALID PARM.\n\n       1002  -  DYNAMIC ALLOCATION OF TUBE FAILED.\n\n       1003  -  OPEN FOR TUBE FAILED.\n\n       1004  -  DYNAMIC UN-ALLOCATION OF TUBE FAILED.\n\n       1021  -  TUBE I/O ERROR ON READ AFTER CLEAR.\n\n       1022  -  TUBE I/O ERROR\n\n       1023  -  DYNALLOC FAILED FOR LIB\n\n       1025  -  DYNALLOC FAILED FOR LIB(MEM)\n\n       1026  -  PREMATURE EOF (INVALID EODAD)\n\n       1028  -  OPEN FAILED FOR PDS MEM\n\n       1030  -  TUBE I/O ERROR\n\n       1032  -  DYNALLOC FAILED FOR LIB(MEM)\n\n       1041  -  TUBE I/O ERROR ON WRITE ECB = X'41'.\n\n       1051  -  OPEN  INPUT FAILED IN EDITOR MODULE.\n\n       1061  -  OPEN OUTPUT FAILED IN EDITOR MODULE. THIS IS USUALLY\n                DUE TO TRYING TO SUBMIT A JOB WHILE RUNNING AS A\n                SUB-SYSTEM.\n\n       1011  -  COMM NON-ZERO RC AFTER TUBE WRITE.\n\n       1012  -  COMM BAD ECB  RC AFTER TUBE WRITE.\n\n       1013  -  COMM NON-ZERO RC AFTER TUBE READ.\n\n       1014  -  COMM BAD ECB  RC AFTER TUBE WRITE.\n\n       1015  -  COMM  SBA CODE NOT FOUND.\n\n       1041  -  COMM  TUBE I/O ERROR.\n1\n\n                CHANGES FOR VERSION  2.4\n\n  *********************************************************************\n\n\n\n   11/10/86  VERSION 2.4. ENHANCEMENTS TO THE   BRIAN COOK      MNP\n             IDCAMS INTERFACE:\n\n             1. INCREASED NUMBER OF INPUT COMMAND DATA\n                LINES FROM 1 TO 5 TO ALLOW FOR MORE\n                VERBOSE COMMANDS, SUCH AS \"DEFINE PAGESPACE\".\n             2. ALLOW SCROLLING UP AND DOWN IN THE\n                OUTPUT USING PF7/PF8.\n\n             ALSO ADDED SOME HELP SCREENS.\n\n   11/06/86  OPEN PROBLEM NOTED.                BRIAN COOK      MNP\n             ON THE EDIT AND BROWSE SCREENS, WHEN IN SPLIT-SCREEN\n             MODE ON THE BOTTOM SCREEN, THE CURSOR IS PLACED 1\n             CHARACTER TO THE LEFT OF THE \"DSNAME\" INPUT FIELD.\n             THE PDS, IDCAMS, AND PRIMARY OPTION MENU WORK OK!!!!!\n\n   11/03/86  LIB  ROUTINE IGNORING VOLSER,      BRIAN COOK      MNP\n             RESULTING IN EDIT-SAVE INTO A CATALOGED\n             PDS INSTEAD OF AN UNCATALOGED ONE SELECTED\n             BY SPECIFIC VOLSER. MINOR OVERSIGHT,\n             THANKS, OKLAHOMA STATE.\n\n     7/7/86  ADDED BACK I/O ATTENTION EXIT,     W.A.M.         VCCS\n             FOR TUBE I/O.\n\n\n             PERSONALLY, I CAN'T GET THIS TO WORK AT ALL,  BC  MNP\n             SO I HAVE SET UP \"EXCPFLG1\" AND \"EXCPFLG2\"\n             THAT CAN BE SET TO NON-ZERO IF ANYONE\n             WANTS TO TRY TO DEBUG THIS. THE ERROR I GET\n             IS AN S0C4 IN IECVPST. IT APPEARS THAT THE\n             ATTENTION EXIT GETS CONTROL IN AMODE 24, BUT\n             THE RETURN ADDRESS IS A 31-BIT ADDRESS.\n\n\n\n    6/25/86  VERSION 2.3. ENHANCEMENTS TO THE   BRIAN COOK      MNP\n             PDS INTERFACE:\n\n             1. COMPRESS OPTION\n             2. MEMBER SELECTION \"HELP\" PANEL\n             3. MEMBER SELECTION OPTIONS FOR\n                BROWSE, EDIT, RENAME, DELETE,\n                AND COPY\n\n             ALSO FIXED BUGS IN THE SBA CALC,\n             AND REMOVED THE MENU HIERARCHY LOGIC.\n\n    1/21/86  3279-2C WORKS SAME AS 3278-2A      WAYNE MITCHELL  VCCS\n1\n\n\n   12/17/85  REMOVED ALMOST ALL OF THE EXCP     BRIAN COOK      MNP\n             LOGIC FOR TERMINAL I/O, DUE TO\n             ABEND'S AFTER INSTALLING 1.3.3.\n\n             WITHOUT THE ATTENTION EXIT, ETPS JUST\n             LOOPS AROUND A 2-SECOND \"STIMER\", SO\n             THE TERMINAL RESPONSE TIME IS VERY\n             SLUGGISH.\n\n\n    4/24/85  ADDED OPTION 4.1, FOREGROUND       BRIAN COOK      MNP\n             INVOKATION OF IDCAMS. MODULE IS\n             \"ETPSIDC2\".\n\n    4/09/85  INCORPORATED CHANGES FOR 3278-2A   BRIAN COOK      MNP\n             SUPPORT, REDUCED LOGON SCREEN TO\n             20 LINES, ALLOW \"CAN\" AS ABBREVIATION\n             FOR EDIT \"CANCEL\".\n\n             CHANGES PROVIDED BY WAYNE MITCHELL,      W.A.M.   VCCS\n             VIRGINIA COMMUNITY COLLEGE SYSTEM.\n\n    4/04/85  REVISED DSECTS, MADE INTO MACRO    BRIAN COOK      MNP\n             CALLS. ALSO SPLIT OUT EDITOR\n             MODULE, ETPSEDT3, AND BROWSE,\n             ETPSBRO3.\n\n    9/27/84  VERSION 2.1 -- ADDED TSO MODE      BRIAN COOK      MNP\n             AND DSECT FOR NATIVE VTAM. SEE\n             PROGRAM \"ETPSTSO\" FOR DOC ON\n             RUNNING UNDER TSO. VTAM CONTROL\n             PROGRAM WILL BE DEVELOPED ONE OF\n             THESE DAYS.\n\n    6/20/84  ADDED BROWSE PROCESSING, VERSION   BRIAN COOK      MNP\n             1.1 FLAG ON LOGON/PRIMARY MENUS. THE\n             BROWSE MODULE IS BASED ON \"REVIEW\",\n             BY BILL GODFREY. IT HAS BEEN MUCH\n             MODIFIED TO RUN UNDER ETPS, AND\n             HAS ALSO BEEN ENHANCED TO SUPPORT\n             BROWSING DSID'S DIRECTLY ON THE\n             JES2 SPOOL. (USES MODIFIED UAL SVC.)\n\n             (THE JES2 BROWSE IS FOR A POSSIBLE\n             FUTURE ENHANCEMENT.)\n\n    6/11/84  ADDED RETURN CODE TEST AFTER       BRIAN COOK      MNP\n             GETMAIN FOR ATTENTION EXIT.\n\n    5/16/84  ADDED SPF STATS SUPPORT.           BRIAN COOK      MNP\n\n    4/19/83  ADDED BYPASS OF LOGON PANEL FOR EMERGENCY USE. IF ETPS\n             IS INVOKED WITH A PARM BEGINNING WITH THE LETTERS \"OP\",\n             A LOGON IS NOT REQUIRED.           BRIAN COOK       MNP\n1\n\n\n    6/10/83  CHANGED TUBE IO TO EXCP.           BRIAN COOK      MNP\n\n    6/11/83  ADDED UPDATE-IN-PLACE LOGIC FOR    BRIAN COOK      MNP\n             PDS MEMBERS THAT ARE EDITED AND\n             SAVED. IF THE NUMBER OF CARDS IS\n             THE SAME BEFORE AND AFTER THE\n             EDIT, AN UPDATE-IN-PLACE IS DONE.\n             THIS SHOULD REDUCE THE POSSIBILITY\n             OF X37 ABENDS.\n\n    6/23/83  ADDED \"COPY-AFTER\"   TO EDIT       BRIAN COOK      MNP\n\n    8/01/83  ADDED SPLIT-SCREEN LOGIC           BRIAN COOK      MNP\n\n   12/05/83  RENAMED TO ETPS, ADDED \"ET\" LOGO.  BRIAN COOK      MNP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ETPSBRO3": {"ttr": 5897, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x07\\x03\\x07\\x03\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 1795, "newlines": 1795, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCBRO JOB (X0002,QCC,ASQCC),'X-COOK, BRIAN',\n//   MSGCLASS=X,CLASS=X,NOTIFY=ASQCC,MSGLEVEL=(1,1)\n/*JOBPARM L=99,SYSAFF=MVSA\n//*\n//* TECH.ASQCC.SOURCE(ETPSBRO3)\n//*\n//ASM     EXEC PGM=IEV90,REGION=1024K,\n//             PARM='TERM,NODECK,OBJECT,RENT,XREF(SHORT)'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DISP=SHR,DSN=SYS2.MACLIB  <== TCBUVTAM, ETPSMACS\n//SYSUT1   DD  SPACE=(CYL,(5,1)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nETPSBRO3 TITLE 'ETPS - BROWSE3     '\n         PRINT OFF\n         COPY  ETPSMACS\n         PRINT ON\nETPSBRO3 CSECT\n         USING *,12,11\n         USING SAVE3,13\n*\n         STM   R14,R12,12(R13)    SAVE INPUT REGS\n         LR    R12,R15            SET PROGRAM BASE REGISTER 1\n         L     R2,0(,R1)          SAVE PARM POINTER\n         LA    R11,72(,R13)       LEVEL 3 MODULE, SO BUMP TO SAVE3\n         ST    R13,4(,R11)       STORE BACKWARDS POINTER\n         ST    R11,8(R13)         STORE FORWARD POINTER\n         LR    R13,R11            SET DSECT BASE 1\n         LA    R3,1\n         LA    R11,4095(R3,R12)   SET PROGRAM BASE REGISTER 2\n         LA    R10,SPLITWRK       SET DSECT FOR SPLIT-SCREEN\n         USING SPLTAREA,10\n*\n* PARM LIST FOR BROWSE IS : DCB, DSN, MEMBER NAME, DSORG\n*    FOR JES2 DSID'S, ADD : LRECL RECFM\n*\n         LM    R2,R7,0(R1)              PICK UP THE REGISTERS\n*\n*  R2=DCB ADDRESS, OR FOR JES2 DSID, ADDRESS OF MTTR\n*  R3=DSN ADDRESS\n*  R4=MEMBER NAME ADDRESS\n*  R5=DSORG ADDRESS\n*  R6=LRECL ADDRESS\n*  R7=RECFM ADDRESS\n*\n         ST    R2,EDTDCB                SAVE DCB ADDRESS\n         MVC   EDTDSN(44),0(R3)         SAVE DSNAME\n         MVC   EDTMEM(8),0(R4)          SAVE MEMBER NAME\n         MVC   EDTORG(3),0(R5)          SAVE DSORG\n*\n************************************************************\n*                                                          *\n*        SET UP THE DCB                                    *\n*                                                          *\n************************************************************\n*\n         MVI   JESFLAG,X'FF'                NOT A JES DSID\n         CLC   EDTORG(3),=C'JES'       IS THIS A JES DSID?\n         BE    BROJES1                      DO INITIALIZATION\n*\n         LR    R4,R2\n         USING IHADCB,R4\n         LM    R0,R1,DCBDDNAM        SAVE DDNAME\n         MVC   0(BRODCBL,R4),BRODCB\n         STM   R0,R1,DCBDDNAM         SET DDNAME\n*\n         LA    R15,DYNEOD\n         ICM   R15,8,DCBEODAD\n         ST    R15,DCBEODAD\n*\n         LA    R15,DYNSYNAD\n         ICM   R15,8,DCBSYNAD\n         ST    R15,DCBSYNAD\n*\n         LA    R15,DYNEXLST\n         ICM   R15,8,DCBEXLST\n         ST    R15,DCBEXLST\n*\n         LA    R1,DYNDCBEX\n         ST    R1,0(,R15)\n         MVI   0(R15),X'05'\n         LA    R1,DYNABEND\n         ST    R1,4(,R15)\n         MVI   4(R15),128+X'11'    OPEN ABEND EXIT (MVS)\n*\n         OI    STATUS,STOPEN       TELL CLEANUP TO CLOSE DCB\n         MVI   OPEND,X'80'\n*\n         OPEN  ((R4),INPUT),MF=(E,OPEND)\n*\n         TM    DCBOFLGS,X'10'\n         BO    OKOPEN\n         LA    R1,MSG08\n         TM    STATUS,STABEND      MEMBER NOT FOUND?\n         BO    DYNOPENM            YES, BRANCH\n         LA    R1,MSG04\nDYNOPENM DS    0H\n         ST    R1,MSGADD\n         B     EXIT12\n*\nDYNDCBEX EQU   *\n*              TESTING THE RECFM FOR RECFM V OR F\n*              REQUIRES AT LEAST 2 TESTS BECAUSE BOTH THE\n*              V AND F BITS ARE ON WHEN RECFM IS U.\n*              THIS ROUTINE MAKES A COPY OF THE RECFM BITS\n*              AND ZEROES BOTH THE V AND F BITS IN THE COPY\n*              IF THE RECFM IS U.  NOW WE CAN DETERMINE\n*              RECFM V OR F IN ONE TEST INSTEAD OF TWO.\n         MVC   WRKRECFM,DCBRECFM   COPY RECFM\n         MVC   TSTRECFM,DCBRECFM   COPY RECFM\n         TM    WRKRECFM,X'C0'      RECFM U\n         BNOR  R14                 NO, BRANCH\n         NI    TSTRECFM,255-X'C0'  YES, SET BOTH BITS OFF\n         BR    R14\n*\nDYNABEND EQU   *\n         L     R8,0(,R1)           GET COMPLETION CODE\n         N     R8,=A(X'FFF0FF00')\n         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND\n         BE    *+10                YES, BRANCH\n         MVI   4(R1),0             ABNORMALLY TERMINATE\n         BR    R14\n         OI    STATUS,STABEND      INDICATE MEMBER NOT FOUND\n         MVI   3(R1),4             IGNORE THE ABEND\n         BR    R14\n         EJECT\nBROJES1  DS    0H\n         MVI   JESFLAG,X'00'               IT'S A JES DSID\n*\n*\n* FOR JES SYSOUTS, THE DSN=JES2.JOBNNNN.DSIDNNN\n* AND:\n*  R2=MTTR ADDRESS\n*  R6=LRECL ADDRESS\n*  R7=RECFM ADDRESS\n         MVC   JESMTTR(4),0(R2)        SAVE DSID START\n         MVC   TOPMTTR(4),0(R2)        SAVE DSID START\n         MVC   JESLRECL(2),0(R6)       SAVE LRECL\n         MVC   WRKRECFM,0(R7)          SAVE RECFM\n         MVC   TSTRECFM,0(R7)          SAVE RECFM\n         TM    WRKRECFM,X'C0'      RECFM U\n         BNO   OKOPEN              NO, BRANCH\n         NI    TSTRECFM,255-X'C0'  YES, SET BOTH BITS OFF\n         B     OKOPEN\n*\nBROWJQEX DS    0H\n         B     NOCLOSE\nFOURK    DC    H'4096'\n         EJECT\nOKOPEN   DS    0H\n         MVC   DYNDECBW(DYNDECBL),DYNDECB\n*\n************************************************************\n*                                                          *\n*        SET UP THE BUFFER AREA                            *\n*                                                          *\n************************************************************\n*\n         LH    R0,FOURK\n         CLI   JESFLAG,X'00'              IS IT A JES DSID\n         BE    *+8                        YES\n         LH    R0,DCBBLKSI\n         AH    R0,=H'7'            ROUND\n         N     R0,=A(X'FFFFFFF8')   UPWARDS TO MULTIPLE OF 8\n         ST    R0,SAVBLKSI         SAVE FOR PARTITIONING\n*\n         SLR   R0,R0\n         TM    TSTRECFM,X'48'      VS OR VBS\n         BNO   NOTSPAN             NO, BRANCH\n         LH    R0,JESLRECL         YES, GET LRECL\n         CLI   JESFLAG,X'00'              IS IT A JES DSID\n         BE    *+8                        YES\n         LH    R0,DCBLRECL         YES, GET LRECL\n         AH    R0,=H'7'            ROUND\n         N     R0,=A(X'FFFFFFF8')   UPWARDS TO MULTIPLE OF 8\n         LTR   R0,R0               WAS LRECL ZERO\n         BNZ   *+8                 NO, SKIP NEXT INSTR\n         L     R0,SAVBLKSI         YES, USE BLKSIZE ROUNDED\n         A     R0,=A(2048)         ADD 2K IN CASE LRECL IS WRONG\nNOTSPAN  ST    R0,SAVSPANL         SAVE FOR PARTITIONING\n*\n         LH    R0,JESLRECL         YES, GET LRECL\n         CLI   JESFLAG,X'00'              IS IT A JES DSID\n         BE    *+8                        YES\n         LH    R0,DCBLRECL\n         LTR   R0,R0\n         BNZ   *+8\n         LH    R0,FOURK            JES BLKSIZE\n         CLI   JESFLAG,X'00'              IS IT A JES DSID\n         BE    *+8                        YES\n         LH    R0,DCBBLKSI\n         STH   R0,RECSIZE\n         AH    R0,=H'7'            ROUND\n         N     R0,=A(X'FFFFFFF8')   UPWARDS TO MULTIPLE OF 8\n         CH    R0,=H'1000'         IS LRECL GREATER THAN MAX\n         BNH   *+8                 NO, SKIP NEXT INSTR\n         LH    R0,=H'1000'         YES, HELD RECORDS MUST BE TRUNCATED\n         ST    R0,SAVLRECL         SAVE FOR HOLD AREA DIVISION\n         MH    R0,SCROWS+2\n*        MH    R0,SCROWS1+2\n         ST    R0,SAVHOLDL         SAVE FOR PARTITIONING\n*\n         A     R0,SAVSPANL         COMBINE LENGTHS FOR GETMAIN\n         A     R0,SAVBLKSI         COMBINE LENGTHS FOR GETMAIN\n         A     R0,=A(20*200)       PLUS ROOM FOR 200 CHECKPOINTS\n         LA    R7,RANGE\n         ST    R0,0(,R7)\n         A     R0,=A(20*824)       OPTIONAL ROOM FOR 1024 CHECKPOINTS\n*        L     R0,=A(16*1024*1024-8) 16 MEG\n         ST    R0,4(,R7)\n         LA    R8,ANSWER\n         MVC   GMVUW(GMVUL),GMVU\n         GETMAIN VU,LA=(R7),A=(R8),MF=(E,GMVUW)\n         OI    STATUS,STGMVU\n*        L     R0,ANSWER+4         LENGTH\n*        L     R1,ANSWER           ADDRESS\n*        FREEMAIN R,LV=(0),A=(1)\n         L     R1,ANSWER\n         LR    R0,R1\n         A     R0,ANSWER+4\n         ST    R0,ENDPTR           END OF GETMAINED AREA\n         ST    R1,BLOCKPTR\n         A     R1,SAVBLKSI         POINT PAST BLOCK AREA\n         ST    R1,SPANPTR\n         A     R1,SAVSPANL         POINT PAST SPANNED RECORD AREA\n         ST    R1,HOLDPTR\n         A     R1,SAVHOLDL         POINT PAST HOLD AREA\n         ST    R1,CHKPTTOP\n         XC    0(16,R1),0(R1)      FIRST ENTRY IN TABLE\n         XC    DEBLOCKS(12),DEBLOCKS\n         XC    OFFSET,OFFSET\n         LH    R0,SCROWS1+2        LINES PER PAGE SCREEN 1\n         CLI   SPLIT,2             AM I ON SCREEN 2\n         BNE   *+8                 NO\n         LH    R0,SCROWS2+2        LINES PER PAGE SCREEN2\n         LA    R15,4\n         SR    R0,R15\n         ST    R0,SCROLL\n         SLR   R0,R0\n         ST    R0,FNDNUM\n         STH   R0,FNDOFF\n         ST    R0,CHKPTBOT\n         MVI   CAPSASIS,C'C'      DEFAULT IS CAPS\n*\n         CLI   JESFLAG,0          IS THIS A JES DSID?\n         BNE   HOLDINIT           NOPE\n*\n         LA    R2,HEXFOX           INDICATE END OF BLOCK\n         SR    R1,1\n         SR    R0,0\n         STM   R0,R2,DEBLOCKS\n*\n************************************************************\n*                                                          *\n*         INITIALIZE HOLD AREA DIRECTORY                   *\n*                                                          *\n************************************************************\nHOLDINIT DS    0H\n         LA    R7,HOLDDIR\n         SLR   R0,R0\n         L     R15,HOLDPTR\n         TM    TSTRECFM,X'40'      RECFM V\n         BZ    *+8                 NO\n         LA    R15,4(,R15)         YES, POINT 4 BYTES INTO EACH RECORD\n         L     R8,SCROWS           MAX ROWS PER SCREEN\nHOLDLOOP ST    R0,BRDIRNUM(,R7)    PUT ZERO IN RECORD LENGTH\n         ST    R0,DIRLEN(,R7)      PUT ZERO IN RECORD NUMBER\n         ST    R15,DIRREC(,R7)     STORE ADDRESS OF HELD RECORD\n         A     R15,SAVLRECL        POINT TO NEXT HELD RECORD\n         LA    R1,DIRSIZ(,R7)      POINT TO NEXT ENTRY\n         ST    R1,DIRNXT(,R7)      STORE ITS ADDRESS IN THIS ENTRY\n         LR    R14,R7              SAVE LAST ENTRY\n         LR    R7,R1               MAKE NEXT ENTRY THIS ENTRY\n         BCT   R8,HOLDLOOP         DO IT FOR ALL BUT LAST ENTRY\n         LA    R1,HOLDDIR          ADDRESS OF FIRST ENTRY\n         ST    R1,DIRNXT(,R14)     CLOSE THE CIRCLE\n         ST    R1,HOLDTOP          START WITH FIRST AS TOP\n*\n         BAL   R14,FILLHOLD\n         B     FILLSCR\n*\n************************************************************\n*                                                          *\n*         READ ENOUGH RECORDS TO FILL HOLD AREA            *\n*                                                          *\n************************************************************\n*\nFILLHOLD ST    R14,HOLDR\n         L     R6,HOLDPTR\n         LR    R0,R6\n         L     R1,SAVHOLDL\n         SLR   R14,R14\n         L     R15,=A(X'40000000')\n         MVCL  R0,R14              FILL HOLD AREA WITH BLANKS\n         L     R7,HOLDTOP          POINT TO HOLD AREA DIRECTORY\n         LH    R8,SCROWS1+2        NUMBER OF DATA LINES PER SCREEN\nHILLOOP  EQU   *\n         BAL   R14,GET\n         LA    R0,1                COMPUTE\n         A     R0,COUNT             THE\n         ST    R0,COUNT              RECORD NUMBER\n         ST    R0,BRDIRNUM(,R7)    STORE THE RECORD NUMBER\n         ST    R1,DIRLEN(,R7)      LENGTH IN DIRECTORY\n         LTR   R1,R1               END OF FILE\n         BM    HILLED              YES BRANCH\n         C     R1,SAVLRECL         IS RECORD LONGER THAN MAX\n         BNH   *+8                 NO, SKIP NEXT INSTR\n         L     R1,SAVLRECL         YES, TRUNCATE TO MAX\n         LR    R0,R2               ADDRESS TO MOVE FROM\n         L     R14,DIRREC(,R7)     ADDRESS TO MOVE TO\n         TM    TSTRECFM,X'40'      RECFM V\n         BZ    HILLNOTV            NO\n         SH    R14,=H'4'           YES, MOVE TO PTR MINUS 4\n         L     R15,DIRLEN(,R7)\n         SH    R15,=H'4'\n         ST    R15,DIRLEN(,R7)\nHILLNOTV LR    R15,R1              LENGTH FOR MOVE\n         MVCL  R14,R0\n         LR    R1,R7               SAVE PTR TO MOST CURRENT ENTRY\n         L     R7,DIRNXT(,R7)      POINT TO NEXT DIRECTORY ENTRY\n         BCT   R8,HILLOOP\n         LR    R7,R1               GET MOST CURRENT ENTRY\nHILLED   EQU   *\n         ST    R7,HOLDEND          SAVE LAST RECORD ENTRY\n         L     R14,HOLDR\n         BR    R14\nSAV3     DS    3F\n*\n************************************************************\n*                                                          *\n*         SET UP THE SCREEN HEADER LINE 1                  *\n*                                                          *\n************************************************************\n*\nFILLSCR  DS    0H\n*\n         LA    R15,TERMOUT+16    FIRST DATA LINE ADDRESS\n         LA    R1,TERMOUT+4      POINT TO START\n*\n         CLI   SPLIT,2           AM I ON SCREEN 2?\n         BNE   BROSHOW1          NOPE, JUST GO DO IT\n*\n         L     R14,SCROWS1       PICK UP NUMBER OF ROWS ON SCRN1\n         SLL   R14,2             MULTIPLY BY 4\n         LA    R1,TERMOUT+4(R14) POINT TO START\n         LA    R15,12(,R1)       FIRST DATA LINE ADDRESS\n*\nBROSHOW1 DS    0H\n*\n         ST    R1,TERMTOP        FIRST ROW\n         ST    R15,TERMDATA      FIRST DATA ROW ADDRESS\n*\n         NI    0(R1),X'7F'       NOT LAST PARM\n         NI    4(R1),X'7F'       NOT LAST PARM\n         NI    8(R1),X'7F'       NOT LAST PARM\n*\n         L     R14,0(,R1)        PICK UP ADDRESS OF LINE 1\n*\n         MVC   0(SCREENL,R14),SCREEN SET LINE 1 OF HEADING\n         MVC   3(44,R14),EDTDSN  MOVE IN DSN\n*\n*\n         LA    R15,SCRCOL-SCREEN(,R14)\n         MVC   0(8,R15),=CL8' '\n         LH    R1,OFFSET\n         LA    R1,1(,R1)\n         LA    R0,79(,R1)\n         TM    MODE,MODEX\n         BZ    *+8\n         SH    R0,=H'40'\n         CH    R0,RECSIZE\n         BNH   *+8\n         LH    R0,RECSIZE\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         CH    R1,=H'1000'\n         BL    FILL3DIG\n         UNPK  0(4,R15),DOUBLE+5(3)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  5(3,R15),DOUBLE+6(2)\n         B     BRHEAD2\nFILL3DIG UNPK  0(3,R15),DOUBLE+6(2)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  4(3,R15),DOUBLE+6(2)\nBRHEAD2  EQU   *\n*\n************************************************************\n*                                                          *\n*         SET UP THE COMMAND LINE                          *\n*                                                          *\n************************************************************\n*\n         L     R1,TERMTOP        FIRST ROW\n         LA    R1,4(,R1)         POINT TO SECOND ROW\n         L     R14,0(,R1)        PICK UP ADDRESS OF LINE 2\n*\n         MVC   0(81,R14),BROHEAD2\n         B     FILLCOLX\n*\nBROHEAD2 DC    AL1(80)\n         DC    X'05'\n         DC    CL19'COMMAND INPUT ===> '\n         DC    X'01'\n         DC    CL40' '\n         DC    X'05'\n         DC    CL13' SCROLL ===> '\n         DC    X'01'\n         DC    CL5'PAGE'\n*\nFILLCOLX DS    0H\n*\n************************************************************\n*                                                          *\n*         SET UP THE COLUMN HEADER LINE2                   *\n*                                                          *\n************************************************************\n*\n*               IT WOULD BE MORE EFFICIENT TO DO MOST OF THIS WORK\n*               ONLY WHEN THE OFFSET IS INITIALIZED OR CHANGED\n*               AND SAVE THE RESULTS.\n*\n*\n         L     R1,TERMTOP        FIRST ROW\n         LA    R1,8(,R1)         POINT TO THIRD  ROW\n         L     R14,0(,R1)        PICK UP ADDRESS OF LINE 3\n*\n         MVI   0(R14),X'50'      SET LENGTH =79\n         MVI   1(R14),C' '\n         MVC   2(79,R14),1(R14)\n         MVI   1(R14),X'05' ATTRIBUTES\n*\n         LA    R6,2(,R14)\n         L     R1,BRDIRNUM(,R7)    GET NUMBER OF FIRST LINE\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  73(5,R6),DOUBLE+5(3)\n*\n         MVI   0(R6),C' '\n         MVC   1(79,R6),0(R6)\n         LH    R1,OFFSET\n         LTR   R1,R1               IS OFFSET ZERO\n         BNZ   *+8                 NO\n         MVI   0(R6),C'1'          YES, SPECIAL CASE, 1\n         SR    R0,R0\n         LA    R14,10\n         DR    R0,R14\n         SR    R14,R0              10 MINUS REMAINDER\n         LTR   R0,R0               WAS REMAINDER 0\n         BZ    *+6                 YES, USE 0, NOT 10\n         LR    R0,R14\n*\n         LR    R14,R6\n         AR    R14,R0              ADD (0 TO 9) TO LINE\n         BCTR  R14,0               START AT LINE-1 FOR OFFSET 0\n*                                  LINE+8 FOR OFFSET 1\n*                                  LINE+7 FOR OFFSET 2\n*                                  LINE+6 FOR OFFSET 3\n*                                  LINE+0 FOR OFFSET 9\n         LH    R1,OFFSET\n         AR    R1,R0               ADD (0 TO 9) TO OFFSET\n         LA    R0,9\nCOLNUML  CH    R1,RECSIZE\n         BH    COLNUMX\n         CVD   R1,DOUBLE\n         MVC   COLNUM,=X'402020202120'\n         ED    COLNUM,DOUBLE+5\n         CH    R1,=H'10000'        10000-32768\n         BNL   COLNUMN             YES, USE NNNNN\n*        MVC   COLNUM(5),COLNUM+1\n*        MVI   COLNUM+5,C' '\n*        CH    R1,=H'1000'         1000-9999\n*        BNL   COLNUMN             YES, USE NNNNX\n         MVC   COLNUM(5),COLNUM+1\n         MVI   COLNUM+5,C' '\n         CH    R1,=H'100'          100-999\n         BNL   COLNUMN             YES, USE XNNNX\n         MVC   COLNUM(5),COLNUM+1  USE XNNXX\n         MVI   COLNUM+5,C' '\nCOLNUMN  EQU   *\n         SH    R14,=H'2'\n         CR    R14,R6\n         BL    *+10\n         MVC   0(5,R14),COLNUM+1\n         LA    R14,12(,R14)\n         AH    R1,=H'10'\n         BCT   R0,COLNUML\nCOLNUMX  EQU   *\n*\n*      DONE SETTING UP THE COLUMNS, NOW SET THE \"+++++\" MARKS\n*\n         L     R5,TERMDATA       FIRST ROW\n*\n         NI    0(R5),X'7F'  NOT LAST PARM\n*\n         L     R6,0(,R5)    PICK UP TERMOUT POINTER\n*\n         MVI   0(R6),C' '\n         MVC   1(84,R6),0(R6)      FILL LINE WITH BLANKS\n         MVC   0(3,R6),=X'5105'\n         LA    R6,3(,R6)           POINT TO DATA LINE\n*\n         LH    R1,OFFSET\n         SR    R0,R0\n         LA    R14,10\n         DR    R0,R14\n         LR    R1,R0\n         LA    R14,MARKS(R1)\n         LH    R1,RECSIZE\n         SH    R1,OFFSET\n         CH    R1,=H'80'\n         BL    MARKE\n         MVC   00(80,R6),0(R14)\n         B     MARKX\nMARKE    MVI   00(R6),C' '\n         MVC   01(79,R6),00(R6)\n         BCTR  R1,0\n         B     *+10\n         MVC   00(00,R6),0(R14)\n         EX    R1,*-6\nMARKX    EQU   *\n*\n************************************************************\n*                                                          *\n*         FILL IN THE DATA AREA OF THE SCREEN              *\n*                                                          *\n************************************************************\n*\n         L     R7,HOLDTOP\n         L     R8,SCROWS1         PICK UP NUMBER OF ROWS\n         CLI   SPLIT,2           AM I IN SPLIT SCREEN\n         BNE   *+8               NOPE, JUST GO DO IT\n         L     R8,SCROWS2        MUST BE SCREEN 2\n*\n         LA    R1,4               SUBTRACT FIRST 4 ROWS\n         SR    R8,R1   MAX LINES ON SCREEN\n*\nFILLOOP  EQU   *\n*\n         NI    0(R5),X'7F'  NOT LAST PARM\n         LA    R5,4(,R5)\n*\n         L     R6,0(,R5)    PICK UP TERMOUT POINTER\n*\n         MVI   0(R6),C' '\n         MVC   1(80,R6),0(R6)      FILL LINE WITH BLANKS\n         MVC   0(2,R6),=X'5004'\n         LA    R6,2(,R6)           BUMP PAST LENGTH AND ATTRIB\n*\n*\n         LM    R1,R2,DIRLEN(R7)    GET LENGTH AND ADDRESS\n         LTR   R1,R1\n         BM    FILBOT\n         BZ    FILNUL              BRANCH IF R1 ZERO\n         SH    R1,OFFSET           IS OFFSET BEYOND END OF RECORD\n         BNP   FILLNEXT            YES, LEAVE LINE BLANK\n         AH    R2,OFFSET\n         TM    MODE,MODEX\n         BO    FILLHEX\n         CH    R1,=H'80'\n         BNH   *+8\n         LA    R1,80\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R6),0(R2)\n         EX    R1,*-6\nCAPSTST1 DS    0H\n         CLI   CAPSASIS,C'C'       CAPS\n         BE    CAPSTRT\nASISTRT  DS    0H\n         TR    0(80,R6),ASIST\n         B     FILLNEXT\nCAPSTRT  DS    0H\n         TR    0(80,R6),CAPST\n         B     FILLNEXT\nFILLHEX  CH    R1,=H'40'\n         BNH   *+8\n         LA    R1,40\n         LR    R0,R1\n         LR    R1,R2\n         LR    R15,R6\n         BAL   R14,HEX\n         B     FILLNEXT\nFILNUL   MVC   0(6,R6),=C'(NULL)'\nFILLNEXT DS    0H\n         L     R7,DIRNXT(,R7)\n         BCT   R8,FILLOOP\n         B     FILLED\nFILBOT   MVI   0(R6),C'*'\n         MVC   1(79,R6),0(R6)\n         MVC   32(16,R6),=C' BOTTOM OF DATA '\nFILLED   EQU   *\n*\n         CLI   SPLIT,1           AM I ON SCREEN 1\n         BE    BROCOMM           YES, DON'T SET PARM FLAG\n         OI    0(R5),X'80'  SET LAST PARM\n         B     BROCOMM          GO SHOW THE SCREEN\n*\nBROCOMM  DS    0H\nPROMPT   DS    0H\n*\n         L     R15,=A(BROHELP)     DEFAULT HELP SCREEN\n         ST    R15,HELPADD\n*\n         MVI   AIDROW,1\n         MVI   AIDCOL,21\n         MVC   HOMEAID(2),AIDADDR\n*\n         L     R15,COMMA4\n         BALR  R14,R15\n*\n         LTR   R15,15                   BAD RC\n         BNZ   END                      OUT\n*\n*                                  SCREEN MAY HAVE CHANGED\n*\n         LH    R0,SCROWS1+2        LINES PER PAGE SCREEN 1\n         CLI   SPLIT,2             AM I ON SCREEN 2\n         BNE   *+8                 NO\n         LH    R0,SCROWS2+2        LINES PER PAGE SCREEN2\n         LA    R15,4\n         SR    R0,R15\n         ST    R0,SCROLL\n*\n************************************************************\n*                                                          *\n*        CHECK REPLY FROM THE TERMINAL                     *\n*                                                          *\n************************************************************\n*\n         L     R2,TERMINPT         POINT TO AID\n         CLI   0(R2),X'F3'         PFK 3\n         BE    END\n         CLI   0(R2),X'C3'         PFK 15\n         BE    END\n         CLI   0(R2),X'6E'         PA 2\n         BE    FILLSCR\n         CLI   PFKFLAG,0           PFKEY\n         BNE   PFK\n*\n         L     R3,TERMINPT+8       COMMAND LINE\n         CLI   SPLIT,2                  AM I ON SCREEN 2\n         BNE   CKPROMP2                 NOPE\n         L     R3,SCROWS1          PICK UP SIZE OF SCREEN1\n         SLL   R3,2                MULTIPLY BY 4\n         L     R3,TERMINPT+8(R3)   PICK UP RESPONSES\n*\nCKPROMP2 DS    0H\n         CLI   0(R3),X'00'         COMMAND ENTERED\n         BE    FILLSCR             NOPE, JUST RESHOW THE SCREEN\n*\n*\n* PUT TESTS FOR COMMAND LINE HERE\n*\n         CLC   22(5,R3),=C'LEFT '\n         BE    LEFT\n         CLC   22(2,R3),=C'< '\n         BE    LEFT\n         CLC   22(6,R3),=C'RIGHT '\n         BE    RIGHT\n         CLC   22(2,R3),=C'> '\n         BE    RIGHT\n         CLC   22(3,R3),=C'UP '\n         BE    UP\n         CLC   22(2,R3),=C'- '\n         BE    UP\n         CLC   22(5,R3),=C'DOWN '\n         BE    DOWN\n         CLC   22(2,R3),=C'D '\n         BE    DOWN\n         CLC   22(2,R3),=C'+ '\n         BE    DOWN\n         CLC   22(4,R3),=C'TOP '\n         BE    TOP\n         CLC   22(7,R3),=C'BOTTOM '\n         BE    BOTTOM\n         CLC   22(4,R3),=C'BOT '\n         BE    BOTTOM\n         CLC   22(5,R3),=C'LIST '\n         BE    LIST\n         CLC   22(2,R3),=C'L '\n         BE    LIST\n         CLC   22(5,R3),=C'FIND '\n         BE    FIND\n         CLC   22(2,R3),=C'F '\n         BE    FIND\n         CLC   22(4,R3),=C'END '\n         BE    END\n         CLI   22(R3),C'M'          MAX\n         BE    PFK\n         CLC   22(5,R3),=C'ASIS '\n         BE    ASIS\n         CLC   22(5,R3),=C'CAPS '\n         BE    CAPS\n         CLC   22(4,R3),=C'HEX '\n         BE    HEXMODE\n         LA    R1,MSG20\n         ST    R1,MSGADD\n         B     FILLSCR\n*\n************************************************************\n*                                                          *\n*         INTERPRET PROGRAM FUNCTION KEY                   *\n*                                                          *\n************************************************************\n*\n*               NOTE - IF A COMMAND IS TYPED IN THEN\n*               IT OVERRIDES THE PF KEY.\nPFK      DS    0H\n         LA    R14,22(,R3)\n         OI    0(R2),X'30'         MAKE PFK 13-24 LOOK LIKE 1-12\n         CLI   0(R2),X'F5'        PF5\n         BE    FIND\n         CLI   0(R2),X'7A'        PF10\n         BE    LEFT\n         CLI   0(R2),X'7B'        PF11\n         BE    RIGHT\n         CLI   0(R2),X'F7'        PF7\n         BE    UP14\n         CLI   0(R2),X'F8'        PF8\n         BE    DOWN14\n         LA    R1,MSG20\n         ST    R1,MSGADD\n         B     FILLSCR\nNOTPFK   EQU   *\n         LA    R1,MSG21\n         ST    R1,MSGADD\n         B     FILLSCR\n************************************************************\n*                                                          *\n*         RIGHT                                            *\n*                                                          *\n************************************************************\n*\nRIGHT    EQU   *\n         LA    R15,80\n         TM    MODE,MODEX\n         BZ    *+8\n         LA    R15,40\n         LH    R0,OFFSET\n         AR    R0,R15\n         LH    R1,RECSIZE\n         CH    R1,=H'1000'\n         BNH   *+8\n         LH    R1,=H'1000'\n         SR    R1,R15              GET RECSIZE-80\n         BNM   *+6                 IF RECSIZE IS LESS THAN 80\n         SLR   R1,R1                  THEN RECSIZE-80 IS ZERO\n         CR    R0,R1               IF OFFSET+80 GT RECSIZE-80\n         BNH   *+6                    THEN\n         LR    R0,R1                  USE RECSIZE-80\n         STH   R0,OFFSET\n         B     FILLSCR\n*\n************************************************************\n*                                                          *\n*         LEFT                                             *\n*                                                          *\n************************************************************\n*\nLEFT     EQU   *\n         LA    R15,80\n         TM    MODE,MODEX\n         BZ    *+8\n         LA    R15,40\n         LH    R0,OFFSET\n         SR    R0,R15              REDUCE OFFSET BY 80\n         BNM   *+6                 IF RESULT IS NEGATIVE\n         SLR   R0,R0                  THEN MAKE IT ZERO\n         STH   R0,OFFSET\n         B     FILLSCR\n*\n************************************************************\n*                                                          *\n*         DOWN                                             *\n*                                                          *\n************************************************************\n*\nDOWN     EQU   *\n         LA    R14,30(,R3)         POINT TO POSSIBLE OPERAND\n         CLC   25(5,R3),=C'DOWN '\n         BE    *+8\n         LA    R14,27(,R3)         POINT TO POSSIBLE OPERAND\n*\nDOWN14   DS    0H\n         CLI   0(R14),X'F0'        NUMERIC\n         BL    DOWNDEF             NO, USE DEFAULT RANGE\n*\n*                                  OK, SOME NUMERIC VALUE WAS\n*                                  ENTERED, FIND OUT WHAT IT IS.\n*\n         LA    R15,1(R14)\n         LA    R1,1\n*\n         CLI   0(R15),C' '         SEARCH FOR END\n         BE    *+16\n         LA    R1,1(,R1)           BUMP 1\n         LA    R15,1(,R15)         BUMP 1\n         B     *-16                LOOP\n*\n         BCTR  R1,0\n         EX    R1,PACKBRO          PACK INTO \"DOUBLE\"\n         OI    DOUBLE+7,X'0F'      MAKE POSITIVE\n         CVB   R0,DOUBLE           PUT BINARY VALUE IN R0\n         B     DOWNRGE             USE RANGE IN R0\n*\nPACKBRO  PACK  DOUBLE(8),0(1,R14)\n*\nDOWNDEF  DS    0H\n         L     R0,SCROLL\n*\nDOWNRGE  DS    0H\n         ST    R0,DOWNAMT\n         BAL   R14,DOWNER\n         B     FILLSCR             FILL THE SCREEN\nDOWNER   EQU   *\n*\n*              SEE IF EOF IS ON SCREEN AND WOULD BE FORCED OFF\n*\n         LA    R15,4\n         L     R7,HOLDEND          POINT TO ENTRY FOR LAST RECORD\n         TM    DIRLEN(R7),X'80'    IS EOF ON SCREEN\n         BZ    DOWNNEOF            NO, DOWN IS POSSIBLE\n         L     R7,HOLDTOP\n         L     R0,DOWNAMT          GET DOWN AMOUNT\n         CH    R0,SCROWS1+2        OR SCREEN SIZE IF SMALLER\n         BNH   *+8\n         LH    R0,SCROWS1+2\nDOWNTEST TM    DIRLEN(R7),X'80'    IS THIS END OF DATA\n         BO    0(R14)              YES, CANT GO DOWN\n         L     R7,DIRNXT(,R7)      GET ENTRY FOR NEXT RECORD\n         BCT   R0,DOWNTEST\n         L     R7,HOLDEND          POINT TO ENTRY FOR LAST RECORD\nDOWNNEOF ST    R14,DOWNR\n         L     R8,DOWNAMT          GET NUMBER OF LINES TO GO DOWN\nDOWNLOOP L     R15,HOLDTOP         POINT TO TOP ENTRY\n         L     R15,DIRNXT(,R15)    GET ADDRESS OF ENTRY AFTER TOP\n         ST    R15,HOLDTOP         MAKE IT NEW TOP\n         TM    DIRLEN(R7),X'80'    IS EOF ON SCREEN\n         BO    DOWNNXT             YES, BYPASS GET\n*\n*  THERE IS A BUG SOMEWHERE IN THE CODE THAT CLOBBERS THE FIRST\n*  HALF-WORD OF DIRNXT.\n*\n         SR    R14,R14\n         CH    R14,DIRNXT(,R7)     IS THIS BABY ZEROS?\n         BNE   *+12                NO, IT'S OK.\n         LA    R14,DIRSIZ(,R7)     POINT TO NEXT ENTRY\n         ST    R14,DIRNXT(,R7)     STORE IT IN THIS ONE\n*\n         L     R7,DIRNXT(,R7)      POINT TO NEXT ENTRY\n         BAL   R14,GET\n         LA    R0,1                COMPUTE\n         A     R0,COUNT             THE\n         ST    R0,COUNT              RECORD NUMBER\n         ST    R0,BRDIRNUM(,R7)    STORE THE RECORD NUMBER\n         ST    R1,DIRLEN(,R7)      STORE LENGTH\n         LTR   R1,R1               END OF FILE\n         BM    DOWNX               YES BRANCH\n         C     R1,SAVLRECL         IS RECORD LONGER THAN MAX\n         BNH   *+8                 NO, SKIP NEXT INSTR\n         L     R1,SAVLRECL         YES, TRUNCATE TO MAX\n         LR    R0,R2               ADDRESS TO MOVE FROM\n         L     R14,DIRREC(,R7)     ADDRESS TO MOVE TO\n         TM    TSTRECFM,X'40'      RECFM V\n         BZ    DOWNNOTV            NO\n         SH    R14,=H'4'           YES, MOVE TO PTR MINUS 4\n         L     R15,DIRLEN(,R7)\n         SH    R15,=H'4'\n         ST    R15,DIRLEN(,R7)\nDOWNNOTV L     R15,SAVLRECL        LENGTH OF RECEIVING FIELD\n         O     R1,=A(X'40000000')  PAD WITH BLANKS\n         MVCL  R14,R0\nDOWNNXT  BCT   R8,DOWNLOOP\nDOWNX    ST    R7,HOLDEND          NEW END POINTER\n         SLR   R15,R15\n         L     R14,DOWNR\n         BR    R14\n*\n************************************************************\n*                                                          *\n*         UP                                               *\n*                                                          *\n************************************************************\n*\nUP       EQU   *\n         LA    R14,28(,R3)         POINT TO POSSIBLE OPERAND\n         CLC   25(3,R3),=C'UP '\n         BE    *+8\n         LA    R14,27(,R3)         POINT TO POSSIBLE OPERAND\n*\nUP14     DS    0H\n         CLI   0(R14),X'F0'        NUMERIC\n         BL    UPDEF               NO, USE DEFAULT RANGE\n*\n*                                  OK, SOME NUMERIC VALUE WAS\n*                                  ENTERED, FIND OUT WHAT IT IS.\n*\n         LA    R15,1(R14)\n         LA    R1,1\n*\n         CLI   0(R15),C' '         SEARCH FOR END\n         BE    *+16\n         LA    R1,1(,R1)           BUMP 1\n         LA    R15,1(,R15)         BUMP 1\n         B     *-16                LOOP\n*\n         BCTR  R1,0\n         EX    R1,PACKBRO          PACK INTO \"DOUBLE\"\n         OI    DOUBLE+7,X'0F'      MAKE POSITIVE\n         CVB   R0,DOUBLE           PUT BINARY VALUE IN R0\n         B     UPRANGE             USE RANGE IN R0\n*\nUPDEF    DS    0H\n         L     R0,SCROLL\n*\nUPRANGE  DS    0H\n         ST    R0,DOWNAMT\n         L     R7,HOLDTOP\n*\n*  \"HOLDTOP\" SOMEHOW GETTING SET TO ZEROS, DON'T KNOW WHERE\n*\n         LTR   R7,7                IS IT ZEROS\n         BNZ   UPTOPOK             NO, IT'S OK\n         L     R7,HOLDEND          NO, IT'S OK\n         LA    R7,16(,7)           BUMP TO NEXT ENTRY\n         ST    R7,HOLDTOP          RESET IT\n*\nUPTOPOK  DS    0H\n         CLC   BRDIRNUM(4,R7),=F'1' ARE WE AT TOP ALREADY\n         BNH   FILLSCR             YES, BRANCH\n         TM    DIRLEN(R7),X'80'    IS FIRST LINE EOF\n         BZ    UPTOP               NO, BRANCH\n         NC    COUNT,COUNT         IS DATA SET EMPTY\n         BZ    FILLSCR             YES, BRANCH\nUPTOP    EQU   *\n         L     R0,BRDIRNUM(,R7)    GET RECORD NUMBER OF TOP LINE\n         S     R0,DOWNAMT          GET RECORD NUMBER TO GO BACK TO\n         BP    *+8                 IF NEGATIVE\n         LA    R0,1                   THEN MAKE IT 1\n         B     LISTAT\n*\n************************************************************\n*                                                          *\n*         TOP                                              *\n*                                                          *\n************************************************************\n*\nTOP      EQU   *\n         L     R1,CHKPTTOP\n         CLI   JESFLAG,0           DOING JES\n         BE    TOPJES\n         MVC   TTR,4(R1)           TTR OF FIRST BLOCK\n         MVC   TTRZ(3),TTR         TTR OF FIRST BLOCK\n         POINT (R4),TTRZ\n         XC    DEBLOCKS(12),DEBLOCKS\n         B     TOPGOT\nTOPJES   DS    0H\n         MVC   JESMTTR(4),TOPMTTR  TTR OF FIRST BLOCK\n         LA    R2,HEXFOX           INDICATE END OF BLOCK\n         SR    R1,1\n         SR    R0,0\n         STM   R0,R2,DEBLOCKS\nTOPGOT   DS    0H\n         XC    COUNT,COUNT\n         L     R14,SPANPTR\n         SLR   R0,R0\n         STH   R0,0(,R14)          RESET SPAN BUFFER LENGTH\n         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER\n         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET\n         BAL   R14,FILLHOLD\n         B     FILLSCR\nHEXFOX   DC    X'FF'\n*\n************************************************************\n*                                                          *\n*         BOTTOM                                           *\n*                                                          *\n************************************************************\n*\nBOTTOM   DS    0H\n         L     R0,BOTNINES\n         B     LISTAT\nBOTRET   L     R0,SCROLL\n         B     UPRANGE\n*\n************************************************************\n*                                                          *\n*         LIST                                             *\n*                                                          *\n************************************************************\n*\nLIST     EQU   *\n         B     ERRMISS             NO, MISSING OPERAND\n*        LA    R15,OPD1            GET FIRST OPERAND ENTRY\n         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS\n         BZ    ERRMISS             NO, MISSING OPERAND\n         TM    6(R15),QUOTED       IS OPERAND QUOTED\n         BO    ERRINV              YES, INVALID\n         LH    R1,4(,R15)          GET LENGTH\n         LTR   R1,R1               IS IT NULL STRING\n         BZ    ERRINV              YES, ERROR\n         CH    R1,=H'7'            IS LENGTH MORE THAN 7\n         BH    ERRINV              YES, ERROR\n         L     R14,0(,R15)         GET ADDRESS OF DATA\n         BCTR  R1,0\n         B     *+10\n         TRT   0(0,R14),NUMERIC\n         EX    R1,*-6              IS IT NUMERIC\n         BNZ   ERRINV              NO, ERROR\n         B     *+10\n         PACK  DOUBLE(8),0(0,R14)\n         EX    R1,*-6\n         CVB   R1,DOUBLE\n         LTR   R0,R1\n         BZ    TOP\n*\nLISTAT   ST    R0,LISTNUM\n         AH    R0,SCROWS1+2        GET RECORD NUMBER TO READ UP TO\n         BCTR  R0,0\n         ST    R0,AIMFOR           SAVE FOR DOWNTO\n*\n         LA    R15,20              LENGTH OF CHKPT ENTRY\n         L     R1,CHKPTBOT\n         TM    0(R1),X'80'         IS IT EOF\n         BZ    LISTNB\n         C     R1,CHKPTTOP         IS DATA SET EMPTY\n         BE    FILLSCR             YES\n         SR    R1,R15              NO, BACK UP ONE ENTRY\nLISTNB   L     R0,LISTNUM\nLISTCK   C     R0,0(,R1)           DOES THIS BLOCK PRECEDE OUR RECORD\n         BH    LISTPNT             YES, GO POINT TO IT\n         SR    R1,R15              NO, BACK UP ONE BLOCK ENTRY\n         L     R14,CHKPTTOP        POINT TO CHECKPOINT\n         CR    R1,R14              HAVE I BACKED UP TO TOP?\n         BNH   LISTPNT             YES, GO POINT TO IT\n         B     LISTCK\nLISTPNT  MVC   COUNT,0(R1)\n         MVC   DEBLOCKS(12),8(R1)\n         MVC   TTR,4(R1)           TTR OF FIRST BLOCK\n         MVC   TTRZ(3),TTR\n         CLI   JESFLAG,0           JES DSID?\n         BE    LISTNPNT            YES, DON'T DO POINT\n         POINT (R4),TTRZ\n         B     LISTNJES\nLISTNPNT DS    0H\n*\n         CLC   4(4,R1),FZEROS     IS THIS A VALID BLOCK MTTR?\n         BNE   *+14               ASSUME SO\n         MVC   JESMTTR(4),TOPMTTR ELSE RESET TO TOP OF DSID\n         B     *+10               AND SKIP CHECKPOINT MTTR\n         MVC   JESMTTR(4),4(R1)   TTR OF FIRST BLOCK\n*\n         LA    R2,HEXFOX           INDICATE END OF BLOCK\n         SR    R1,1\n         SR    R0,0\n         STM   R0,R2,DEBLOCKS\nLISTNJES DS    0H\n         L     R14,SPANPTR\n         SLR   R0,R0\n         STH   R0,0(,R14)          RESET SPAN BUFFER LENGTH\n         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER\n         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET\n*\n         BAL   R14,FILLHOLD        READ NEXT 20 RECORDS\n*\nLISTFINE L     R7,HOLDTOP          GET ENTRY FOR TOP OF HOLD AREA\n         TM    DIRLEN(R7),X'80'    IS EOF ON TOP OF SCREEN\n         BO    LISTRDY             YES, WE ARE FINISHED\n         CLC   LISTNUM,BRDIRNUM(R7) IS REQUESTED NUMBER AT TOP\n         BNH   FILLSCR             YES, BRANCH\n         MVC   DOWNAMT,=F'1'       DOWN 1\n         BAL   R14,DOWNER\n         B     LISTFINE\nLISTRDY  CLC   LISTNUM,BOTNINES    WAS THIS A LIST 99999999\n         BE    BOTRET              YES, BRANCH\n         B     FILLSCR\nERRMISS  DS    0H\n         LA    R1,MSG35\n         ST    R1,MSGADD\n         B     FILLSCR\n*\n************************************************************\n*                                                          *\n*         FIND                                             *\n*                                                          *\n************************************************************\n*\nFIND     EQU   *\n         MVI   FINDSW,0\n         B     FINDSAME            NO, USE PREVIOUS STRING\n*        LA    R15,OPD1            GET FIRST OPERAND ENTRY\n         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS\n         BZ    FINDSAME            NO, USE PREVIOUS STRING\n         XC    STRING,STRING       ERASE OLD STRING\n         SLR   R0,R0\n         ST    R0,FNDNUM           RESET LAST-FOUND NUMBER\n         STH   R0,FNDOFF           RESET LAST-FOUND OFFSET\n         STH   R0,FINDCOL          RESET COLUMN\n         LH    R1,4(,R15)          GET LENGTH\n         LTR   R1,R1               IS IT NULL STRING\n         BZ    FINDNULL            YES, ERROR\n         L     R14,0(,R15)         GET ADDRESS OF DATA\n         BCTR  R1,0\n         STH   R1,STRINGL          SAVE LENGTH CODE\n         B     *+10\n         MVC   STRING(0),0(R14)\n         EX    R1,*-6\n         B     FINDSAME            NO, LEAVE FINDCOL NULL\n*        LA    R15,OPD2\n         TM    6(R15),PRESENT      IS THERE A SECOND OPERAND\n         BZ    FINDSAME            NO, LEAVE FINDCOL NULL\n         TM    6(R15),QUOTED       IS OPERAND QUOTED\n         BO    ERRINV              YES, INVALID\n         LH    R1,4(,R15)          GET LENGTH\n         LTR   R1,R1               IS IT NULL STRING\n         BZ    ERRINV              YES, ERROR\n         CH    R1,=H'3'            IS LENGTH MORE THAN 3\n         BH    ERRINV              YES, ERROR\n         L     R14,0(,R15)         GET ADDRESS OF DATA\n         BCTR  R1,0\n         B     *+10\n         TRT   0(0,R14),NUMERIC\n         EX    R1,*-6              IS IT NUMERIC\n         BNZ   ERRINV              NO, ERROR\n         B     *+10\n         PACK  DOUBLE(8),0(0,R14)\n         EX    R1,*-6\n         CVB   R1,DOUBLE\n         LTR   R1,R1               IS IT ZERO\n         BZ    ERRINV              YES, ERROR\n         C     R1,SAVLRECL         IS IT GREATER THAN LRECL\n         BH    ERRINV              YES, ERROR\n         STH   R1,FINDCOL\nFINDSAME EQU   *\n         NC    STRING,STRING       HAS A STRING BEEN ENTERED\n         BZ    FINDNULL            NO, ERROR\n         LH    R6,FINDCOL\n         L     R7,HOLDTOP          GET INFO FOR FIRST HELD RECORD\n         L     R0,BRDIRNUM(,R7)    GET RECORD NUMBER OF FIRST HELD\n         L     R1,FNDNUM           GET RECORD NUMBER WHERE LAST FOUND\n         LTR   R1,R1               HAS IT BEEN FOUND\n         BNP   FINDSCR             NO, START WITH HELD RECORDS\n         CR    R0,R1               ARE WE PAST LAST FOUND REC\n         BH    FINDSCR             YES, START WITH HELD RECORDS\n         L     R14,HOLDEND\n         L     R15,BRDIRNUM(,R14)  GET RECORD NUMBER OF LAST HELD\n         CR    R1,R15              IS LAST FOUND REC ON SCREEN\n         BH    FINDDOWN            NO, BRANCH\nFINDPREV C     R1,BRDIRNUM(,R7)    IS THIS RECORD WHERE LAST FOUND\n         BE    FINDPCOL            YES, BRANCH\n         C     R7,HOLDEND          IS THIS LAST RECORD ON SCREEN\n         BE    FINDDOWN            SHOULD NOT HAPPEN\n         L     R7,DIRNXT(,R7)      POINT TO NEXT RECORD\n         B     FINDPREV\nFINDPCOL L     R15,DIRREC(,R7)     POINT TO RECORD\n         LTR   R6,R6               WAS A COLUMN SPECIFIED\n         BZ    FINDPOFF            NO, LOOK AT SAME RECORD\n         C     R7,HOLDEND          IS THIS LAST RECORD ON SCREEN\n         BE    FINDDOWN            YES, BRANCH\n         L     R7,DIRNXT(,R7)      NO, POINT TO NEXT RECORD\n         B     FINDSCR             GO EXAMINE RECORD\nFINDPOFF AH    R15,FNDOFF          POINT TO LAST FOUND STRING\n         LA    R15,1(,R15)         POINT PAST LAST FOUND STRING\n         B     FINDSTR\nFINDCLC  CLC   0(0,R15),STRING     (EXECUTED)\nFINDSCR  TM    DIRLEN(R7),X'80'    ARE WE AT EOF\n         BO    FINDBOT             YES, BRANCH\n         L     R15,DIRREC(,R7)     POINT TO FIRST BYTE TO EXAMINE\n         LTR   R6,R6               WAS A COLUMN SPECIFIED\n         BZ    FINDSTR             NO, BRANCH\n         AR    R15,R6              YES, POINT TO COLUMN PLUS 1\n         BCTR  R15,0               POINT TO COLUMN\n         LH    R14,STRINGL\n         EX    R14,FINDCLC\n         BE    FOUND\n         B     FINDNEXT\nFINDSTR  L     R0,DIRLEN(,R7)      GET LENGTH OF RECORD\n         C     R0,SAVLRECL         IS RECORD TRUNCATED\n         BNH   *+8                 NO, SKIP NEXT INSTR\n         L     R0,SAVLRECL         YES, USE TRUNCATED LENGTH\n         L     R1,DIRREC(,R7)      GET ADDRESS OF RECORD\n         AR    R0,R1               POINT PAST LAST BYTE OF RECORD\n         LH    R14,STRINGL         GET LENGTH CODE OF STRING\n         AR    R15,R14             POINT TO LAST BYTE TO BE COMPARED\n         SR    R0,R15              GET NUMBER OF COMPARISONS\n         BNP   FINDNEXT            STRING TOO LONG FOR REMAINING TEXT\n         SR    R15,R14             PUT STRING ADDRESS BACK\nFINDCOMP EX    R14,FINDCLC         COMPARE STRING TO DATA\n         BE    FOUND\n         LA    R15,1(,R15)         INCREMENT DATA POINTER\n         BCT   R0,FINDCOMP         GO COMPARE AGAIN\nFINDNEXT C     R7,HOLDEND          WAS THAT LAST HELD RECORD\n         BE    FINDDOWN            YES, BRANCH\n         L     R7,DIRNXT(,R7)      POINT TO NEXT RECORD\n         B     FINDSCR             GO PROCESS NEXT RECORD\nFINDBOT  EQU   *\n         LA    R1,MSG32\n         ST    R1,MSGADD\n         B     FILLSCR\nFINDDOWN EQU   *\n         LA    R1,1\n         ST    R1,DOWNAMT\n         BAL   R14,DOWNER\n         L     R7,HOLDEND\n         OI    FINDSW,1\n         B     FINDSCR\nFINDNULL DS    0H\n         LA    R1,MSG33\n         ST    R1,MSGADD\n         B     FILLSCR\nERRINV   DS    0H\n         LA    R1,MSG34\n         ST    R1,MSGADD\n         B     FILLSCR\nFOUND    DS    0H\n         LA    R1,MSG31\n         ST    R1,MSGADD\n         MVC   FNDNUM,BRDIRNUM(R7) SAVE RECORD NUMBER\n         S     R15,DIRREC(,R7)     GET OFFSET TO FOUND LOCATION\n         STH   R15,FNDOFF          SAVE OFFSET\n         LA    R15,1(,R15)         MAKE IT COLUMN NUMBER\n         CVD   R15,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         TM    FINDSW,1\n         BZ    FILLSCR\n         LH    R6,SCROWS1+2\n         SH    R6,=H'2'\nFINDLN2  LA    R1,1\n         ST    R1,DOWNAMT\n         BAL   R14,DOWNER\n         BCT   R6,FINDLN2\n         B     FILLSCR\n************************************************************\n*                                                          *\n*         HEX                                              *\n*                                                          *\n************************************************************\n*\nHEXMODE  EQU   *\n         B     HEXFLIP             NO, FLIP FLOP\n*        LA    R15,OPD1            GET FIRST OPERAND ENTRY\n         TM    6(R15),PRESENT      ARE THERE ANY OPERANDS\n         BZ    HEXFLIP             NO, FLIP FLOP\n         L     R14,0(,R15)         POINT TO OPERAND\n         CLI   5(R15),2            IS LENGTH 2\n         BNE   HEXOFF              NO, TRY OFF\n         CLC   0(2,R14),=C'ON'     YES, IS IT 'ON'\n         BNE   ERRKW               NO, INVALID OPERAND\n         OI    MODE,MODEX\n         B     FILLSCR\nHEXOFF   CLI   5(R15),3            IS LENGTH 3\n         BNE   ERRKW\n         CLC   0(3,R14),=C'OFF'\n         BNE   ERRKW\n         NI    MODE,255-MODEX\n         B     FILLSCR\nHEXFLIP  XI    MODE,MODEX          FLIP FLOP THE SWITCH\n         B     FILLSCR\nERRKW    DS    0H\n         LA    R1,MSG34\n         ST    R1,MSGADD\n         B     FILLSCR\n*\n************************************************************\n*                                                          *\n*         CAPS / ASIS                                      *\n*                                                          *\n************************************************************\n*\nCAPS     MVI   CAPSASIS,C'C'\n         B     FILLSCR\n*\nASIS     MVC   CAPSASIS,C'A'\n         B     FILLSCR\n************************************************************\n*                                                          *\n*         SUBROUTINE TO CONVERT DATA TO HEX                *\n*                                                          *\n************************************************************\n*\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\n*\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         EJECT\n************************************************************\n*                                                          *\n*         SUBROUTINE TO GET A LOGICAL RECORD               *\n*                                                          *\n************************************************************\n*\n*\n*               INPUT\n*                R4 DCB ADDRESS\n*                CHKPTTOP  -  TOP OF CHECKPOINT TABLE\n*                CHKPTBOT  -  BOTTOM OF CHECKPOINT TABLE, ZERO 1ST TIME\n*                COUNT     -  LAST LOGICAL RECORD NUMBER READ\n*                BLOCKPTR  -  ADDRESS OF BUFFER\n*                DEBLOCKS  -  DEBLOCKING INFO (ZEROS FIRST TIME)\n*                SPANPTR   -  ADDRESS OF AREA TO COMBINE\n*                             SPANNED RECORD SEGMENTS\n*\n*               OUTPUT\n*                 R1 CONTAINS LENGTH OF RECORD (OR -1 IF END OF FILE)\n*                 R2 CONTAINS ADDRESS OF RECORD (OR 0 IF END OF FILE)\n*\nGET      ST    R14,READR\n         STM   R6,R7,JESRSAV1 I AM GOING TO CLOBBER THESE REGS\n         LM    R0,R2,DEBLOCKS      GET DEBLOCKING STATUS\n         CLI   JESFLAG,X'00'              IS IT A JES DSID\n         BE    READJB                     YES\n         TM    WRKRECFM,X'10'      BLOCKED\n         BZ    READI               NO, BRANCH\n         AR    R2,R1               POINT TO NEXT RECORD\n         CR    R2,R0               END OF BLOCK (OR FIRST TIME)\n         BNL   READI               YES, BRANCH\n         TM    TSTRECFM,X'40'      VARIABLE LENGTH\n         BO    READVB              YES, BRANCH\n         ST    R2,DEBLOCKS+8       FIXED BLOCKED\n         B     READX\nREADI    L     R5,CHKPTBOT         GET LAST CHECKPOINT\n         LTR   R5,R5               IS THIS FIRST READ\n         BNZ   READNF              BRANCH IF NOT FIRST\n         L     R5,CHKPTTOP\n         B     READNEW             READING A RECORD NOT READ BEFORE\nREADNF   L     R1,0(,R5)           GET NUMBER OF HIGHEST RECORD READ\n         LTR   R1,R1               WAS IT EOF\n         BM    READOLD             YES, BRANCH\n         C     R1,COUNT            HAVE WE READ THIS RECORD BEFORE\n         BNH   READADD             NO, BRANCH\nREADOLD  LA    R5,CHKPTDUM         YES, DONT CHANGE CHKPT TABLE\n         B     READBRO\nREADADD  LA    R5,20(,R5)          ADD AN ENTRY TO THE CHKPT TABLE\n         C     R5,ENDPTR           IS TABLE FILLED UP\n         BL    *+8                 NO, SKIP NEXT INSTR\n         BAL   R14,READHALF        YES, HALVE THE TABLE\nREADNEW  ST    R5,CHKPTBOT         SAVE NEW CURRENT CHECKPOINT POINTER\n         MVC   0(4,R5),COUNT\n         XC    4(4,R5),4(R5)\n         MVC   8(12,R5),DEBLOCKS\nREADBRO  TM    STATUS,STNOMEM      ARE WE IN MEMBER-NOT-FOUND STATUS\n         BO    DYNEOD              YES, JUST GO TO END OF FILE\n         L     R2,BLOCKPTR\n         READ  DYNDECBW,SF,(R4),(R2),'S',MF=E\n         CHECK DYNDECBW\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   IOERR               YES, BRANCH\n         LH    R1,DCBBLKSI\n         L     R14,DYNDECBW+16\n         SH    R1,14(,R14)         SUBTRACT RESIDUAL COUNT\n         TM    TSTRECFM,X'40'      VARIABLE LENGTH RECORDS\n         BZ    OKREAD              NO, BRANCH\n         LH    R1,0(,R2)           YES, USE BLKSIZE IN BDW\n*        SH    R1,=H'4'                                              $V\n*        LA    R2,4(,R2)                                             $V\nOKREAD   LA    R0,0(R1,R2)         END OF BLOCK\n         STM   R0,R2,DEBLOCKS      SAVE STATUS INFO\n         CLC   4(4,R5),=F'0'       IS THIS 2ND READ PER GET\n         BNZ   NOTED               YES, BYPASS NOTE\n         NOTE  (R4)\n         ST    R1,4(,R5)           SAVE TTR IN TABLE\nNOTED    EQU   *\n         L     R1,DEBLOCKS+4       RESTORE LENGTH\n         TM    WRKRECFM,X'10'      BLOCKED?\n         BO    READB               YES, BRANCH\n         TM    TSTRECFM,X'48'      VARIABLE UNBLOCKED SPANNED\n         BNO   READX               NO\n         B     READVBS             YES, SAME AS BLOCKED\nREADB    TM    WRKRECFM,X'C0'      UNDEFINED\n         BO    READX\n         TM    WRKRECFM,X'40'      VARIABLE LENGTH\n         BO    READVBI\nREADFB   LH    R1,DCBLRECL         FIXED BLOCKED\n         ST    R1,DEBLOCKS+4       SAVE STATUS INFO\n         B     READX\nREADVBI  LA    R2,4(,R2)           POINT PAST BDW\nREADVB   TM    WRKRECFM,X'08'      SPANNED\n         BO    READVBS\nREADVBR  LH    R1,0(,R2)\n         STM   R1,R2,DEBLOCKS+4    SAVE STATUS INFO\n         B     READX\nREADVBS  CLI   2(R2),0             SEGMENT\n         BE    READVBR             NO, BRANCH\n*               THIRD BYTE IS X'01' FOR FIRST SEGMENT\n*                             X'03' FOR MIDDLE SEGMENT\n*                             X'02' FOR LAST SEGMENT\n         CLI   2(R2),1             FIRST SEGMENT\n         BNE   READSEG2\n         L     R14,SPANPTR         ADDRESS TO MOVE TO\n         LH    R15,0(,R2)          LENGTH TO MOVE\n         LR    R1,R15              LENGTH TO MOVE\n         LR    R0,R2               ADDRESS TO MOVE FROM\n         MVCL  R14,R0              MOVE SEGMENT RDW AND DATA\n         B     READSEGD            GO DEBLOCK NEXT SEGMENT\nREADSEG2 L     R14,SPANPTR         ADDRESS OF PRIOR SEGMENTS\n         LH    R0,0(,R14)          LENGTH OF PRIOR SEGMENTS\n         LH    R15,0(,R2)          LENGTH+4 OF NEW SEGMENT\n         SH    R15,=H'4'           LENGTH OF NEW SEGMENT\n         LR    R1,R15              LENGTH TO BE MOVED\n         AR    R15,R0              COMBINE LENGTHS\n         STH   R15,0(,R14)         STORE COMBINED LENGTHS\n         LR    R15,R1              LENGTH TO ME MOVED\n         AR    R14,R0              ADDRESS TO MOVE TO\n         LA    R0,4(,R2)           ADDRESS TO MOVE FROM\n         MVCL  R14,R0              MOVE SEGMENT DATA\n         CLI   2(R2),2             LAST SEGMENT\n         BNE   READSEGD            NO, GO DEBLOCK NEXT SEGMENT\n         LH    R1,0(,R2)           GET LENGTH OF THIS SEGMENT\n         STM   R1,R2,DEBLOCKS+4    SAVE LENGTH AND ADDRESS\n         L     R2,SPANPTR          POINT TO COMBINED RECORD\n         LH    R1,0(,R2)           GET COMBINED LENGTH\n*        SH    R1,=H'4'                                              $V\n*        LA    R2,4(,R2)                                             $V\n         B     READX               EXIT\nREADSEGD EQU   *                   NOT NECESSARY TO CHECK RECFM X'10'\n         LH    R1,0(,R2)           LENGTH\n         AR    R2,R1               POINT TO NEXT SEGMENT\n         C     R2,DEBLOCKS         END OF BLOCK\n         BNL   READBRO             YES, BRANCH\n         B     READVBS             GO PROCESS NEW SEGMENT\n         EJECT\nREADJB   DS    0H\n         LA    R2,0(R1,R2)    BUMP PAST FLAGS\n         CLI   0(R2),X'FF'    IS LENGTH BYTE FF?\n         BE    JES2RDI        YES. END OF BLOCK.\n         TM    1(R2),X'10'    IS THIS A SPANNED RECORD?\n         BO    SPANSKIP       YES. SKIP IT.\n         SR    R6,R6          ZERO OUT REG\n         IC    R6,0(R2)       INSERT LENGTH\n         LR    R7,R6          SAVE RECORD LENGTH\n         LR    R1,R2          SAVE RECORD LOCATION\n         TM    1(R2),X'80'    IS THERE CARRIAGE CONTROL?\n         BZ    *+8            NO.\n         LA    R1,1(,1)       BUMP 1\n         TM    1(R2),X'08'    IS THIS RECORD TO BE IGNORED?\n         LR    R2,R1          UPDATE RECORD POINTER\n         BNZ   SKIP1REC       YES. SKIP IT.\n         LTR   R7,R7          LENGTH ZERO\n         BZ    SKIP1REC       YES. SKIP IT.\n         LR    R1,R7          RECORD LENGTH\nREAD1RTN DS    0H\n         LA    R2,3(,R2)      BUMP PAST FLAGS\n         STM   R1,R2,DEBLOCKS+4    SAVE STATUS INFO\n         B     READX\nSKIP1REC DS    0H\n         LA    R2,3(R6,R2)    INCREMENT TO NEXT RECORD\n         SR    R1,1           ZERO LENGTH CODE\n         B     READJB         PROCESS NEXT RECORD\nSPANSKIP LH    R6,2(R2)       LENGTH OF SEGMENT\n         TM    1(R2),X'08'    IS THIS THE FIRST SEGMENT?\n         BO    SPAN1STR       YES. USE HEADER LENGTH OF 6.\n         LA    R2,4(R6,R2)    UPDATE RECORD POSITION\n         SR    R1,1           ZERO LENGTH CODE\n         B     READJB         PROCESS NEXT RECORD\nSPAN1STR LA    R2,6(R6,R2)    UPDATE RECORD POSITION\n         SR    R1,1           ZERO LENGTH CODE\n         B     READJB         PROCESS NEXT RECORD\n*\n*\n*\n*\nJES2RDI  DS    0H\n         L     R5,CHKPTBOT         GET LAST CHECKPOINT\n         LTR   R5,R5               IS THIS FIRST READ\n         BNZ   JES2NF              BRANCH IF NOT FIRST\n         L     R5,CHKPTTOP\n         B     JES2NEW             READING A RECORD NOT READ BEFORE\nJES2NF   L     R1,0(,R5)           GET NUMBER OF HIGHEST RECORD READ\n         LTR   R1,R1               WAS IT EOF\n         BM    JES2OLD             YES, BRANCH\n         C     R1,COUNT            HAVE WE READ THIS RECORD BEFORE\n         BNH   JES2ADD             NO, BRANCH\nJES2OLD  LA    R5,CHKPTDUM         YES, DONT CHANGE CHKPT TABLE\n         B     JES2RNEW\nJES2ADD  LA    R5,20(,R5)          ADD AN ENTRY TO THE CHKPT TABLE\n         C     R5,ENDPTR           IS TABLE FILLED UP\n         BL    *+8                 NO, SKIP NEXT INSTR\n         BAL   R14,READHALF        YES, HALVE THE TABLE\nJES2NEW  DS    0H\n         ST    R5,CHKPTBOT         SAVE NEW CURRENT CHECKPOINT POINTER\n         MVC   0(4,R5),COUNT\nJES2RNEW DS    0H\n         L     R2,BLOCKPTR\n         LR    R0,R2\n         LA    R1,88\n         SR    R0,R1\n         L     R1,JESMTTR\n         CLC   JESMTTR(4),FZEROS   EOF\n         BE    JES2EOD\n         LA    R15,3               READ A BLOCK FROM SPOOL\n         SVC   242\n         MVC   4(4,R5),JESMTTR     SET MTTR OF THIS BLOCK\n         MVC   JESMTTR(4),0(R2)    SET MTTR OF NEXT BLOCK\n         CLC   IXTJOBID(4),FZEROS  FIRST READ\n         BNE   *+10\n         MVC   IXTJOBID(4),4(R2)  SET THE JOBID\n         CLC   IXTJOBID(4),4(R2) DOES THE JOBID MATCH?\n         BNE   JES2EOD        NO. END OF DATASET.\n         SR    R1,1\n         LA    R2,10(,2)           BUMP TO FIRST RECORD\n         LA    R0,4086(,R2)        END OF BLOCK\n         STM   R0,R2,DEBLOCKS\n         MVC   8(12,R5),DEBLOCKS\n         B     READJB              CONTINUE\n*\nJES2EOD  DS    0H\n         L     R1,=F'-1'           EOF\n         ST    R1,0(,R5)           SAVE EOF IN CHKPT TABLE\n         SLR   R2,R2\nREADX    DS    0H\n         LM    R6,R7,JESRSAV1 RESTORE THESE REGS\n         L     R14,READR\n         BR    R14\nFZEROS   DC    F'0'\n         EJECT\nDYNEOD   EQU   *\n         L     R1,=F'-1'           EOF\n         ST    R1,0(,R5)           SAVE EOF IN CHKPT TABLE\n         SLR   R2,R2\n         B     READX\n*\nREADHALF LA    R0,20               LENGTH OF EACH ENTRY\n         L     R15,CHKPTTOP        POINT TO FIRST ENTRY\n         AR    R15,R0              POINT TO SECOND ENTRY\n         LR    R1,R15\n         AR    R1,R0               POINT TO THIRD ENTRY\nREADHMOV MVC   0(20,R15),0(R1)     MOVE 3RD TO 2ND\n*                                       5TH TO 3RD\n*                                       7TH TO 4TH, ETC\n         AR    R15,R0              RECEIVING FIELD DOWN 1\n         AR    R1,R0               SENDING FIELD DOWN 1\n         AR    R1,R0               SENDING FIELD DOWN 2\n         CR    R1,R5               ARE WE PAST THE LAST ENTRY\n         BL    READHMOV            NO, BRANCH\n         LR    R5,R15              YES, NEW CURRENT POINTER\n         BR    R14                 RETURN\n*\n************************************************************\n*                                                          *\n*         END OF PROGRAM                                   *\n*                                                          *\n************************************************************\n*\nEND      DS    0H\n         LA    R15,0\n         B     EXITRC\n*\nIOERR    LA    R1,SYNADMSG\n         ST    R1,MSGADD\n*\nEXIT12   LA    R15,12\n*\nEXITRC   CH    R15,RC\n         BNH   *+8\n         STH   R15,RC              SET HIGHEST RC\n         TM    STATUS,STGMVU\n         BZ    NOGMVU\n         L     R0,ANSWER+4         LENGTH\n         L     R1,ANSWER           ADDRESS\n         FREEMAIN R,LV=(0),A=(1)\n         NI    STATUS,255-STGMVU\nNOGMVU   EQU   *\n         TM    STATUS,STOPEN\n         BZ    NOCLOSE\n         TM    DCBOFLGS,X'10'      IS IT OPEN?\n         BZ    NOCLOSE             NO, BRANCH\n         MVI   CLOSED,X'80'\n         CLOSE ((R4)),MF=(E,CLOSED)\n         NI    STATUS,255-STOPEN   CLOSED\n         DROP  R4                  IHADCB\nNOCLOSE  EQU   *\n*\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SR    R15,15\n         BR    R14                 RETURN TO ETPS\n*\n************************************************************\n*                                                          *\n*        SYNAD EXIT                                        *\n*                                                          *\n************************************************************\n*\n*        THIS ROUTINE IS ENTERED DURING THE 'CHECK' MACRO\n*        IF AN I/O ERROR OCCURS.\n*\nDYNSYNAD EQU   *\n         SYNADAF ACSMETH=BSAM\n         MVC   SYNADMSG(78),50(R1)\n         MVI   SYNADSW,X'FF'\n         SYNADRLS\n         BR    R14\n*\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n*\n         LTORG\n*\nBOTNINES DC    F'99999999'\n*\n         PRINT NOGEN\n*\nBRODCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(RP),                       +\n               EODAD=0,SYNAD=0\nBRODCBL  EQU   *-BRODCB\n*\n         PRINT GEN\n*\nDYNREAD  READ  DYNDECB,SF,0,0,'S',MF=L\nDYNDECBL EQU   *-DYNDECB\n*\nGMVU     GETMAIN VU,MF=L\nGMVUL    EQU   *-GMVU\n*\nMSG04    DC    CL20'UNABLE TO OPEN DATASET'\nMSG08    DC    CL20'SPECIFIED MEMBER NOT FOUND IN DATASET'\nMSG20    DC    CL20'INVALID COMMAND'\nMSG21    DC    CL20'INVALID PF KEY'\nMSG31    DC    CL20'FOUND IN LINE XXXXX COL XXXXX'\nMSG32    DC    CL20'BOTTOM OF DATA REACHED'\nMSG33    DC    CL20'STRING NOT SPECIFIED'\nMSG34    DC    CL20'INVALID OPERAND'\nMSG35    DC    CL20'MISSING OPERAND'\nMSG36    DC    CL20'MEMBER NOT FOUND'\nMSG40    DC    CL20'PFK HAS BEEN RESET'\nMSG41    DC    CL20'INVALID PFK COMMAND'\nASIST    DC    64X'4B',X'40',9X'4B'\n         DC    X'4A4B4C4D4E4F'       CENT,PERIOD,LESS,LPAREN,PLUS,BAR\n         DC    X'50',9X'4B'          AMPERSAND\n         DC    X'5A5B5C5D5E5F'       EXCL,$,DOT,RPAREN,SEMI,NOT\n         DC    X'6061',8X'4B'        HYPHEN,SLASH\n         DC    X'6A6B6C6D6E6F'       WHAT,COMMA,PERCENT,UNDLN,GT,QM\n         DC    9X'4B',X'79'          70-78\n         DC    X'7A7B7C7D7E7F'       COLON,POUND,AT,APOST,EQ,DBLQUOTE\n         DC    X'4B'\n         DC    X'818283848586878889',7X'4B'\n         DC    X'919293949596979899',8X'4B'\n         DC    X'A2A3A4A5A6A7A8A9',23X'4B'\n         DC    C'ABCDEFGHI',7X'4B'\n         DC    C'JKLMNOPQR',8X'4B'\n         DC    C'STUVWXYZ',06X'4B'\n         DC    C'0123456789',6X'4B'\nCAPST    DC    64X'4B',X'40',9X'4B'\n         DC    X'4A4B4C4D4E4F'       CENT,PERIOD,LESS,LPAREN,PLUS,BAR\n         DC    X'50',9X'4B'          AMPERSAND\n         DC    X'5A5B5C5D5E5F'       EXCL,$,DOT,RPAREN,SEMI,NOT\n         DC    X'6061',8X'4B'        HYPHEN,SLASH\n         DC    X'6A6B6C6D6E6F'       WHAT,COMMA,PERCENT,UNDLN,GT,QM\n         DC    9X'4B',X'79'          70-78\n         DC    X'7A7B7C7D7E7F'       COLON,POUND,AT,APOST,EQ,DBLQUOTE\n         DC    X'4B'\n         DC    C'ABCDEFGHI',7X'4B'\n         DC    C'JKLMNOPQR',8X'4B'\n         DC    C'STUVWXYZ',23X'4B'\n         DC    C'ABCDEFGHI',7X'4B'\n         DC    C'JKLMNOPQR',8X'4B'\n         DC    C'STUVWXYZ',06X'4B'\n         DC    C'0123456789',6X'4B'\nSCREEN   DC    X'5005'\nSCRDSN   DC    53C'-'\n         DC    C' LINE '\nSCRLINE  DC    C'00000'\n         DC    C' COL '\nSCRCOL   DC    C'001 080   '\nSCREENL  EQU   *-SCREEN\nSCRDATA  EQU   *\n*\nMARKS    DC    18C'----+'\n*\n*\n*               TRANSLATE TABLES\n*\nFINDSBA  DC    17X'00',X'11',238X'00'\nNUMERIC  DC    240X'FF',10X'00',6X'FF'\nHEXDATA  DC    193X'FF',6X'00',41X'FF',10X'00',6X'FF'\n*\nTABNONBL DC    64X'FF'\n         DC    X'00'               BLANK\n         DC    42X'FF'\n         DC    X'FF'               COMMA\n         DC    148X'FF'\nTABBLANK DC    64X'00'\n         DC    X'40'               BLANK\n         DC    42X'00'\n         DC    X'00'               COMMA\n         DC    148X'00'\nTABQUOTE DC    125X'00',X'7D',130X'00'\n*\nKAPS     DC    129AL1(*-KAPS)      00-80\n         DC    9AL1(*-KAPS+X'40')  81-89 BECOME C1-C9\n         DC    7AL1(*-KAPS)        8A-90\n         DC    9AL1(*-KAPS+X'40')  91-99 BECOME D1-D9\n         DC    8AL1(*-KAPS)        9A-A1\n         DC    8AL1(*-KAPS+X'40')  A2-A9 BECOME E2-E9\n         DC    86AL1(*-KAPS)       AA-FF\n*\n*\n*\nQUOTE    EQU   X'7D'\n         PRINT NOGEN\n         DCBD  DSORG=PS,DEVD=DA\n*\nACBSIZ   EQU   56\nMODSIZ   EQU   36\nRPLSIZ   EQU   72\n*\n         PRINT GEN\n         SPLTAREA\n         MYSAVE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         CNOP  0,8\n         TITLE 'ETPS - BROWSE HELP SCREEN'\nBROHELP  CSECT\n         DC    A(BROHELP1)\n         DC    A(BROBLANK)\n         DC    A(BROHELP2)\n         DC    A(BROHELP3)\n         DC    A(BROHELP4)\n         DC    A(BROHELP5+X'80000000')\nBROHELP1 DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                  PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL21' BROWSE INTERFACE    '\n         DC    34C'-'\n*        123456789012345678901234567890123456789012345678901234567890\nBROHELP2 DC    AL1(61),X'05'\n DC CL62'ETPS BROWSE IS BASED ON BILL GODFREY''S \"REVIEW\" COMMAND ON '\nBROHELP3 DC    AL1(61),X'05'\n DC CL62'    FILE 300 OF THE CBT TAPE. PF7/PF8 SCROLL UP/DOWN, AND   '\nBROHELP4 DC    AL1(61),X'05'\n DC CL62'    PF10/PF11 SCROLL LEFT/RIGHT. I HAVE UNDOUBTEDLY CREATED '\nBROHELP5 DC    AL1(61),X'05'\n DC CL62'    A FEW BUGS IN MY VERSION, SO DON''T BLAME BILL FOR THIS.'\nBROBLANK DC    AL1(10),X'05',CL12' '\n         CNOP  0,8\n         EJECT\n         END\n/*\n//LKED1    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL,RENT',\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MVSTGT\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  SETCODE AC(1)\n     NAME ETPSBRO3(R)\n/*\n//LKED2    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL,RENT',\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MVSYSA\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  SETCODE AC(1)\n     NAME ETPSBRO3(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ETPSCOMP": {"ttr": 6664, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x01L\\x01L\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 332, "newlines": 332, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCOMP JOB (X0002,QCC,ASQCC),'X-COOK, BRIAN',\n//   MSGCLASS=X,CLASS=X,NOTIFY=ASQCC,MSGLEVEL=(1,1)\n/*JOBPARM L=99,SYSAFF=MVSA\n//*\n//ASM     EXEC PGM=IEV90,REGION=1024K,PARM='OBJECT,NODECK,TERM'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(5,1)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nETPSCOMP TITLE 'ETPS - COMPRESS LIBRARY'\nETPSCOMP CSECT\n         USING *,12\n*\n         SAVE  (14,12),,ETPSCOMP_11/05/86_BRIAN COOK_&SYSTIME_&SYSDATE\n         LR    R12,R15            SET BASE REGISTER\n*\n         LM    R3,R5,0(R1)         R3  = INPUT DSN\n*                                  R4  = INPUT VOLSER\n*                                  R5  = INPUT PASSWORD\n         MVC   INDS(44),0(R3)\n         MVC   INV(6),0(R4)\n         MVC   INP(8),0(R5)\n*\n         SR    R4,R4\n         SR    R5,R5\n*\nPROLOG   DS    0H\n         GETMAIN R,LV=4096        GET MY SAVE AREA ADDRESS\n         LR    R11,R1             SAVE GETMAIN POINTER\n         ST    R13,4(R11)         STORE BACKWARDS POINTER\n         ST    R11,8(R13)         STORE FORWARD POINTER\n         LR    R13,R11\n         USING MYSAVE,13\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n         EJECT\nFREES    DS    0H\n*\n         LA    R1,FREE1\n         DYNALLOC\n         LA    R1,FREE2\n         DYNALLOC\n         LA    R1,FREE3\n         DYNALLOC\n         LA    R1,FREE4           FREE SYSIN\n         DYNALLOC\n         LA    R1,FREE5\n         DYNALLOC\n*\nALLOCATE DS    0H\n*\n         OI    INV,C' '\n         CLI   INV,C' '\n         BNE   *+10\n         XC    INVADDR(4),INVADDR\n         OI    INP,C' '\n         CLI   INP,C' '\n         BNE   *+10\n         XC    INPADDR(4),INPADDR\n*\n         LA    R1,RB99LIB\n         DYNALLOC\n         L     R4,RB99LIB+8\n         LTR   R5,R15\n         BNZ   ALLDONE\n*\n         LA    R1,RB99UT3\n         DYNALLOC\n         L     R4,RB99UT3+8\n         LTR   R5,R15\n         BNZ   ALLDONE\n*\n         LA    R1,RB99UT4\n         DYNALLOC\n         L     R4,RB99UT4+8\n         LTR   R5,R15\n         BNZ   ALLDONE\n*\n         LA    R1,RB99INP\n         DYNALLOC\n         L     R4,RB99INP+8\n         LTR   R5,R15\n         BNZ   ALLDONE\n*\n         LA    R1,RB99PRNT\n         DYNALLOC\n         L     R4,RB99PRNT+8\n         LTR   R5,R15\n         BNZ   ALLDONE\n*\nOPENS    DS    0H\n*\n         OPEN  (SYSIN,(OUTPUT))\n*\n         TM    SYSIN+48,X'10'  *  TEST FOR GOOD OPEN\n         BZ    ALLDONE          *  IF NO GOOD, LEAVE\n*\n         PUT   SYSIN,DDCARD\n*\n         CLOSE (SYSIN)\n*\nTSTAUTH  DS    0H\n*\n         TESTAUTH FCTN=1\n         LTR   R15,R15\n         BNZ   SETAUTH\n*\n         LA    R1,AH0           * SET PARM REG\n         LINK  EP=IEBCOPY\n         LR    R5,R15           * PICK UP RETURN CODE\n         SR    R4,R4\n*\n         B     ALLDONE\n*\nSETAUTH  DS    0H\n*\n         LA    R0,1             SET AUTH ON\n         SVC   235\n*\n         LA    R1,AH0           * SET PARM REG\n         LINK  EP=IEBCOPY\n         LR    R5,R15           * PICK UP RETURN CODE\n         SR    R4,R4\n*\n         SR    R0,0             SET AUTH OFF\n         SVC   235\n*\n         B     ALLDONE\n*\nALLDONE  DS    0H\n*\n         LA    R1,FREE1\n         DYNALLOC\n         LA    R1,FREE2\n         DYNALLOC\n         LA    R1,FREE3\n         DYNALLOC\n         LA    R1,FREE4\n         DYNALLOC\n         LA    R1,FREE5\n         DYNALLOC\n*\nBADRC    DS    0H\n         L     R13,4(,R13)  PICK UP CALLING SAVE AREA\n         FREEMAIN R,LV=4096,A=(11)\n         LR    R15,R5\n         LR    R0,R4\n         L     R14,12(,R13)\n         LM    R1,R12,24(R13)\n         BR    R14\n         EJECT\nDDCARD   DC    CL80'  COPY I=SYSUT1,O=SYSUT1 '\nAH0      DC    A(H0+X'80000000')\nH0       DC    H'0'\nFREE1    DC    A(*+4+X'80000000')\n         DC    X'14020000'\n         DC    F'0'\n         DC    A(*+12+X'80000000')\n         DC    F'0'\n         DC    F'0'\n         DC    A(UNCOND)\n         DC    A(INDDNAME+X'80000000')\n*\nFREE2    DC    A(*+4+X'80000000')\n         DC    X'14020000'\n         DC    F'0'\n         DC    A(*+12+X'80000000')\n         DC    F'0'\n         DC    F'0'\n         DC    A(UNCOND)\n         DC    A(INDDUT3+X'80000000')\n*\nFREE3    DC    A(*+4+X'80000000')\n         DC    X'14020000'\n         DC    F'0'\n         DC    A(*+12+X'80000000')\n         DC    F'0'\n         DC    F'0'\n         DC    A(UNCOND)\n         DC    A(INDDUT4+X'80000000')\n*\nFREE4    DC    A(*+4+X'80000000')\n         DC    X'14020000'\n         DC    F'0'\n         DC    A(*+12+X'80000000')\n         DC    F'0'\n         DC    F'0'\n         DC    A(UNCOND)\n         DC    A(INDDINP+X'80000000')\n*\nFREE5    DC    A(*+4+X'80000000')\n         DC    X'14020000'\n         DC    F'0'\n         DC    A(*+12+X'80000000')\n         DC    F'0'\n         DC    F'0'\n         DC    A(UNCOND)\n         DC    A(INDDPRNT+X'80000000')\n*\nRB99LIB  DC    A(*+4+X'80000000')\n         DC    X'14010000'\n         DC    F'0'\n         DC    A(*+12+X'80000000')\n         DC    F'0'\n         DC    F'0'\nINTEXT1  DC    A(INDDNAME)\n         DC    A(INDSNAME)\n         DC    A(DISPSHR)\nINVADDR  DC    A(INVOLSER)\nINPADDR  DC    A(INPASS)\n         DC    A(DISPKEEP+X'80000000')\nRB99UT3  DC    A(*+4+X'80000000')\n         DC    X'14010000'\n         DC    F'0'\n         DC    A(INTEXT2+X'80000000')\n         DC    F'0'\n         DC    F'0'\nINTEXT2  DC    A(INDDUT3)\n         DC    A(DISPNEW)\n         DC    A(PRIMRY)\n         DC    A(SECNRY)\n         DC    A(CYLS+X'80000000')\n*\nRB99UT4  DC    A(*+4+X'80000000')\n         DC    X'14010000'\n         DC    F'0'\n         DC    A(INTEXT3+X'80000000')\n         DC    F'0'\n         DC    F'0'\nINTEXT3  DC    A(INDDUT4)\n         DC    A(DISPNEW)\n         DC    A(PRIMRY)\n         DC    A(SECNRY)\n         DC    A(KEYLEN)\n         DC    A(CYLS+X'80000000')\n*\nRB99INP  DC    A(*+4+X'80000000')\n         DC    X'14010000'\n         DC    F'0'\n         DC    A(INTEXT4+X'80000000')\n         DC    F'0'\n         DC    F'0'\nINTEXT4  DC    A(INDDINP)\n         DC    A(DISPNEW)\n         DC    A(PRIMRY)\n         DC    A(SECNRY)\n         DC    A(TRACKS+X'80000000')\n*\nRB99PRNT DC    A(*+4+X'80000000')\n         DC    X'14010000'\n         DC    F'0'\n         DC    A(INTEXT5+X'80000000')\n         DC    F'0'\n         DC    F'0'\nINTEXT5  DC    A(INDDPRNT)\n         DC    A(SYSOUT+X'80000000')\n*\nINDDNAME DC    X'0001',H'1',H'6'\nINDD     DC    CL8'SYSUT1'\nINDSNAME DC    X'0002',H'1',H'44'\nINDS     DC    CL44' '\nINVOLSER DC    X'0010',H'1',H'6'\nINV      DC    CL6' '\nINPASS   DC    X'0050',H'1',H'8'\nINP      DC    CL8' '\nPRIMRY   DC    X'000A',H'1',H'3',X'00000A',X'00'\nSECNRY   DC    X'000B',H'1',H'3',X'00000A',X'00'\nCYLS     DC    X'0008',H'0'\nTRACKS   DC    X'0007',H'0'\nKEYLEN   DC    X'0040',H'1',H'1',X'0800'\nSYSOUT   DC    X'0018',H'1',H'1',C'Z '\nDISPNEW  DC    X'0004',H'1',H'1',X'0400'\nDISPSHR  DC    X'0004',H'1',H'1',X'0800'\nDISPKEEP DC    X'0005',H'1',H'1',X'0800'\nUNCOND   DC    X'0007',H'0'\nINDDUT3  DC    X'0001',H'1',H'6',C'SYSUT3'\nINDDUT4  DC    X'0001',H'1',H'6',C'SYSUT4'\nINDDINP  DC    X'0001',H'1',H'5',C'SYSIN '\nINDDPRNT DC    X'0001',H'1',H'8',C'SYSPRINT'\n         DS    0F\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(PM),                       X\n               LRECL=80,BLKSIZE=80,RECFM=F\n         EJECT\nMYSAVE   DSECT\n         DS    18F\n         END\n/*\n//LKED1    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,REUS,TERM),\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD   DDNAME=SYSIN\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MVSTGT\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  SETCODE AC(1)\n     NAME ETPSCOMP(R)\n/*\n//LKED2    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,REUS,TERM),\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD   DDNAME=SYSIN\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MVSYSA\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  SETCODE AC(1)\n     NAME ETPSCOMP(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ETPSEDT3": {"ttr": 6916, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x05)\\x05)\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 1321, "newlines": 1321, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCEDT  JOB (E9167,QCC,ASQCC),'X-BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=99,SYSAFF=MVSA\n//*\n//* TECH.ASQCC.SOURCE(ETPSEDT3)\n//*\n//ONEL   OUTPUT PAGEDEF=06080,FORMDEF=0101,CHARS=GT12,DEFAULT=YES\n//ASM     EXEC PGM=IEV90,REGION=1024K,\n//         PARM='OBJECT,NODECK,TERM,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DISP=SHR,DSN=SYS2.MACLIB\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nETPSEDT3 TITLE 'CHANGE LOG'\n********************************************************************\n*\n* CHANGE LOG:\n*\n* 11/21/89 BRIAN COOK (MNP)  FIXED \"LINE REPEAT\" PROBLEM, ALSO\n*                            AFFECTED \"COPY-AFTER\".\n*\n* 03/16/89 BRIAN COOK (MNP)  FIXED S0C4 WHEN EXITING EDIT ON A\n*                            SEQUENTIAL FILE. THE POINTER \"MSGADD\"\n*                            WAS LEFT POINTING TO AN AREA WITHIN THE\n*                            PROGRAM ON EXIT (EDIT WORKED OK).\n*\n*                            REPORTED BY ED GUTHMAN (SP?) AT\n*                            BLUE CROSS/BLUE SHIELD (OKLA)\n*\n*\n********************************************************************\n         TITLE 'ETPS - EDITOR'\n         PRINT OFF\n         COPY  ETPSMACS\n         PRINT ON\n         PRINT NOGEN\nETPSEDT3 CSECT\n         USING *,12,11\n         USING SAVE3,13\n*\n         STM   R14,R12,12(R13)    SAVE INPUT REGS\n         LR    R12,R15            SET PROGRAM BASE REGISTER 1\n         L     R2,0(,R1)          SAVE PARM POINTER\n         LA    R11,72(,R13)       LEVEL 3 MODULE, SO BUMP TO SAVE3\n         ST    R13,4(,R11)       STORE BACKWARDS POINTER\n         ST    R11,8(R13)         STORE FORWARD POINTER\n         LR    R13,R11            SET DSECT BASE 1\n         LA    R3,1\n         LA    R11,4095(R3,R12)   SET PROGRAM BASE REGISTER 2\n         LA    R10,SPLITWRK       SET DSECT FOR SPLIT-SCREEN\n         USING SPLTAREA,10\n*\n* PARM LIST FOR EDITOR IS : DCB, DSN, MEMBER NAME, DSORG, NUM RECS\n*\n         LM    R2,R6,0(R1)              PICK UP THE REGISTERS\n*\n*  R2=DCB ADDRESS\n*  R3=DSN ADDRESS\n*  R4=MEMBER NAME ADDRESS\n*  R5=DSORG ADDRESS\n*  R6=RECORD COUNT ADDRESS\n*\n         L     R6,0(,R6)                PUT RECORD COUNT IN R6\n*\n         ST    R2,EDTDCB                SAVE DCB ADDRESS\n         MVC   EDTDSN(44),0(R3)         SAVE DSNAME\n         MVC   EDTMEM(8),0(R4)          SAVE MEMBER NAME\n         MVC   EDTORG(3),0(R5)          SAVE DSORG\n         ST    R6,EDTRECS               SAVE REC COUNT\n         ST    R6,EDNOWLN1              SAVE REC COUNT\n*\n         MVI   AIDROW,1\n         MVI   AIDCOL,21\n         MVC   HOMEAID(2),AIDADDR\n*\n*  CLEAR THE FIND STRING/CHANGE STRING FIELDS\n*\n         MVI   EDFINDL,0\n         MVI   EDCHNGL,0\n         MVI   EDFINDS,C' '\n         MVC   EDFINDS+1(23),EDFINDS\n         MVC   EDCHNGS(24),EDFINDS\n*\n         LA    R7,22(,R6)               SET UP FOR MULTIPLY (ADD 22)\n         SR    R6,R6                    SET UP FOR MULTIPLY\n         LA    R1,80                    MULTIPLIER\n         MR    R6,R1                    MULTIPLY\n*\n         GETMAIN R,LV=(R7)\n         ST    R1,EDTMAIN1              SAVE GETMAIN ADDRESS\n         ST    R7,EDTLENG1              SAVE GETMAIN LENGTH\n         LA    R7,0(R1,R7)              ADDR OF LAST BYTE\n         ST    R7,EDTLAST1              SAVE LAST BYTE ADDRESS\n*\n         LR    R7,R1                    START LOCATION\n         LA    R1,20                    20 CARDS\n*\n         MVI   72(R7),X'00'             INDICATE BLANK CARD\n         LA    R7,80(,7)                BUMP TO NEXT CARD\n         BCT   R1,*-8                   LOOP\n*\nEDTQORG  DS    0H\n*        CLC   EDTORG(3),=C'PAN'        PAN LIBRARY\n*        BE    EDTPAN                   GO DO IT\n*\n         TITLE 'ETPS - EDITOR    READ IN NON-PAN DS'\nEDTSEQ   DS    0H\n*\n         L     R2,EDTDCB      SET EODAD\n         LM    R0,R1,40(R2)         SAVE DDNAME\n         L     R2,MEMDCBA     SET EODAD\n         MVC   0(96,R2),GMVDCB      SET MACRF TO GET-MOVE\n         STM   R0,R1,40(R2)        RESET DDNAME\n         LA    R1,EDTEOF1     SET EODAD\n         STCM  R1,7,33(R2)\n*\n         MVI   PARMOP,X'80'   SET VL BIT\n         OPEN  ((2),(INPUT)),MF=(E,PARMOP)\n*\n         TM    48(R2),X'10'   TEST FOR GOOD OPEN\n         BZ    WTOMS51        NOT OPEN\n*\n         L     R3,EDTMAIN1    PICK UP STORAGE AREA\n         LA    R3,1600(,3)    CURRENT LINE POINTER\n         ST    R3,EDTCURR1    CURRENT LINE POINTER\n         ST    R3,EDTFIRST    FIRST LINE\n         LA    R4,10          FIRST LINE NUMBER\n*\nEDTGET1  DS    0H\n*\n         GET   (R2),(R3)\n*\n         CVD   R4,PACK8\n         OI    PACK8+7,X'0F'\n         UNPK  72(6,R3),PACK8+5(3)\n*\n         LA    R3,80(,3)\n         LA    R4,10(,4)\n         B     EDTGET1\n*\n         TITLE 'ETPS - EDITOR    DISPLAY MEM'\nEDTEOF1  DS    0H\n*\n         MVI   PARMOP,128\n         CLOSE ((2)),MF=(E,PARMOP)\n*     FREEPOOL (2)\n         MVI   EDTEOF,0     NOT EOF\n         XC    EDTRPTA1(4),EDTRPTA1 CLEAR ADDRESS POINTER\n         MVI   EDAFTSV1,C' '      CLEAR LINE SAVE AREA\n*\nEDTSHOW  DS    0H\n*\n         LM    R7,R9,TERMOUT+4   LINES TO BUILD IN\n         LA    R5,TERMOUT+12     FIRST DATA LINE ADDRESS\n         LA    R1,TERMOUT+4      POINT TO START\n*\n         CLI   SPLIT,2           AM I ON SCREEN 2?\n         BNE   EDTSHOW1          NOPE, JUST GO DO IT\n*\n         L     R3,SCROWS1        PICK UP NUMBER OF ROWS ON SCRN1\n         SLL   R3,2              MULTIPLY BY 4\n         LA    R1,TERMOUT+4(R3)  POINT TO START\n         LM    R7,R9,0(R1)       LINES TO BUILD IN\n         LA    R5,8(,R1)         FIRST DATA LINE ADDRESS-1\n*\nEDTSHOW1 DS    0H\n         MVC   0(81,R7),DSNROW1  SET FIRST ROW\n*\n         MVC   0(81,R8),DSNROW2  SET NEXT ROW\n*\n         MVC   0(81,R9),DSNROW3  SET NEXT ROW\n         MVC   17(24,R9),EDFINDS SET FIND STRING\n         MVC   57(24,R9),EDCHNGS SET CHNG STRING\n*\n         NI    0(R1),X'7F'       NOT LAST PARM\n         NI    4(R1),X'7F'       NOT LAST PARM\n         NI    8(R1),X'7F'       NOT LAST PARM\n         NI    12(R1),X'7F'      NOT LAST PARM\n*\n         L     R3,EDTCURR1       FIRST LINE\n         L     R4,EDTLAST1       LAST LINE\n         L     R6,SCROWS1         PICK UP NUMBER OF ROWS\n         CLI   SPLIT,2           AM I IN SPLIT SCREEN\n         BNE   EDTMOV0           NOPE, JUST GO DO IT\n         L     R6,SCROWS2        MUST BE SCREEN 2\n*\nEDTMOV0  DS    0H\n         LA    R1,4               SUBTRACT FIRST 4 ROWS\n         SR    R6,R1   MAX LINES ON SCREEN\n*\nEDTMOV1  DS    0H\n*\n         CR    R3,R4\n         BNL   EDTEND2          EOF BEFORE END OF SCREEN\n*\n         CLI   72(R3),X'FF'     CHECK FOR DELETED LINE\n         BE    EDTBMP1          SKIP THIS LINE\n*\n         CLI   72(R3),X'00'     CHECK FOR DELETED LINE\n         BE    EDTBMP1          SKIP THIS LINE\n*\n         NI    0(R5),X'7F'  NOT LAST PARM\n         LA    R5,4(,R5)\n*\n         L     R1,0(,R5)    PICK UP TERMOUT POINTER\n         MVC   0(81,R1),DSNLINE  MOVE IN MASK\n*\n         MVC   2(6,R1),72(R3)   MOVE IN LINE NUMBER\n*\n         MVC   09(72,R1),0(R3)  MOVE IN LINE DATA\n*\n         LA    R3,80(,3)        BUMP\n         BCT   R6,EDTMOV1\n*\n         CLI   SPLIT,1           AM I ON SCREEN 1\n         BE    EDCOMM            YES, DON'T SET PARM FLAG\n         OI    0(R5),X'80'  SET LAST PARM\n         B     EDCOMM           GO SHOW THE SCREEN\n*\nEDTBMP1  DS    0H\n*\n         LA    R3,80(,3)        BUMP\n         B     EDTMOV1          LOOP\n*\nEDTEND2  DS    0H\n         MVI   EDTEOF,1         EOF\n*\n         NI    0(R5),X'7F'  NOT LAST PARM\n         LA    R5,4(,R5)\n*\n         L     R1,0(,R5)    PICK UP TERMOUT POINTER\n         MVC   0(81,R1),DSNLINE  MOVE IN MASK\n*\n         MVC   2(6,R1),=C'**EOF*'\n*\n         BCT   R6,EDTEND2+4\n*\n         CLI   SPLIT,1           AM I ON SCREEN 1\n         BE    EDCOMM            YES, DON'T SET PARM FLAG\n         OI    0(R5),X'80'  SET LAST PARM\n*\nEDCOMM   DS    0H\n*\n         L     R15,=A(EDTHELP)     DEFAULT HELP SCREEN\n         ST    R15,HELPADD\n*\n         MVI   EDCOMMND,C' '\n*\n         L     R15,COMMA4\n         BALR  R14,R15\n*\n         LTR   R15,15                   BAD RC\n         BNZ   EDTFREE1                 OUT\n*\n         L     R2,TERMINPT\n*\n         CLI   0(R2),X'7D'         IS IT \"ENTER\"\n         BE    EDLINES             YUP  - CONTINUE\n*\n         CLI   0(R2),X'C3'         IS IT PF15\n         BE    *+12                YES\n         CLI   0(R2),X'F3'         IS IT PF3\n         BNE   *+14                NO\n         MVC   EDCOMMND(7),=C'SAVEND '\n         B     EDLINES             CONTINUE\n*\n         CLI   0(R2),X'C4'         IS IT PF16\n         BE    *+12                YES\n         CLI   0(R2),X'F4'         IS IT PF4\n         BNE   *+14                NO\n         MVC   EDCOMMND(7),=C'CANCEL '\n         B     EDLINES             CONTINUE\n*\n         CLI   0(R2),X'C7'         IS IT PF19\n         BE    *+12                YES\n         CLI   0(R2),X'F7'         IS IT PF7\n         BNE   *+14                NO\n         MVC   EDCOMMND(7),=C'UP     '\n         B     EDLINES             CONTINUE\n*\n         CLI   0(R2),X'C8'         IS IT PF20\n         BE    *+12                YES\n         CLI   0(R2),X'F8'         IS IT PF8\n         BNE   *+14                NO\n         MVC   EDCOMMND(7),=C'DOWN   '\n         B     EDLINES             CONTINUE\n*\n         CLI   0(R2),X'C5'         IS IT PF17\n         BE    *+12                YES\n         CLI   0(R2),X'F5'         IS IT PF5\n         BNE   *+14                NO\n         MVC   EDCOMMND(7),=C'RFIND  '\n         B     EDLINES             CONTINUE\n*\n         CLI   0(R2),X'C6'         IS IT PF18\n         BE    *+12                YES\n         CLI   0(R2),X'F6'         IS IT PF6\n         BNE   *+14                NO\n         MVC   EDCOMMND(7),=C'CHANGE '\n         B     EDLINES             CONTINUE\n*\n         CLI   0(R2),X'6C'         IS IT PA1\n         BE    EDTFREE1            YUP  - ALL DONE\n*\n         B     EDRESCR             GO RESHOW THE SCREEN\n*\nEDLINES  DS    0H\n*\n* PUT MODIFIED LINES LOOP HERE\n*\n         L     R3,EDTCURR1        PICK UP CURRENT LINE POINTER\n         LA    R4,TERMINPT+12     POINT TO LINE1 TERMINAL INPUT ADDR\n         L     R2,SCROWS1         PICK UP NUMBER OF ROWS\n*\n         CLI   SPLIT,2                  AM I ON SCREEN 2\n         BNE   EDLINES2                 NOPE\n*\n         L     R1,SCROWS1          PICK UP SIZE OF SCREEN1\n         SLL   R1,2                MULTIPLY BY 4\n         LA    R4,TERMINPT+12(R1)  PICK UP RESPONSES\n         L     R2,SCROWS2          PICK UP NUMBER OF ROWS\n*\nEDLINES2 DS    0H\n*\n         L     R5,0(,R4)          POINT TO LINE1 TERMINAL INPUT\n         CLI   0(R5),X'00'      WAS THIS LINE CHANGED BY THE OPERATOR?\n         BE    EDLINES4           NO\n*\n*  SET END OF FIELD = R14\n*\n         LA    R14,41(,R5)      SET END OF FIELD\n*\n         MVI   EDFINDL,0\n         MVI   EDFINDS,C' '\n         MVC   EDFINDS+1(23),EDFINDS\n*\n*\n*  SET LENGTH FOR FIND STRING\n*\n         LA    R15,24           MAXIMUM LENGTH\n*\n         CLI   0(R14),X'41'     IF NOT NUMERIC\n         BH    *+14\n         BCTR  R14,0            DECREMENT BASE ADDRESS\n         BCT   R15,*-10\n         B     EDLINES3         FIND IT\n*\n         STC   R15,EDFINDL      SET LENGTH MINUS 1 (FROM \"BCT\", ABOVE)\n*\n         EX    R15,FNDMOVE1     MOVE STRING TO WORK AREA\n         B     EDLINES3         FIND IT\n*\nFNDMOVE1 MVC   EDFINDS(1),17(R5)\nCHGMOVE1 MVC   EDCHNGS(1),0(R1)\n*\nEDLINES3 DS    0H\n*\n*  SET START ADDRESS FOR CHANGE STRING.\n*\n         LA    R1,57(,R5)       POINT TO CHANGE STRING START\n         LA    R14,80(,R5)      SET END OF FIELD\n*\n         MVI   EDCHNGL,0\n         MVI   EDCHNGS,C' '\n         MVC   EDCHNGS+1(23),EDCHNGS\n*  SET LENGTH FOR CHANGE STRING\n*\n         LA    R15,24           MAXIMUM LENGTH\n*\n         CLI   0(R14),X'41'     IF NOT NUMERIC\n         BH    *+14\n         BCTR  R14,0            DECREMENT BASE ADDRESS\n         BCT   R15,*-10\n         B     EDLINES4         FIND IT\n*\n         STC   R15,EDCHNGL      SET LENGTH MINUS 1 (FROM \"BCT\", ABOVE)\n*\n         MVI   EDCHNGS,C' '\n         MVC   EDCHNGS+1(23),EDCHNGS\n*\n         EX    R15,CHGMOVE1     MOVE STRING TO WORK AREA\n         B     EDLINES4         FIND IT\n*\nEDLINDMP DS    0H\n*\n         LA    R0,EDFINDS\n         LA    R1,EDCHNGS\n         SR    R2,R2\n         LR    R3,R2\n         IC    R2,EDFINDL\n         IC    R3,EDCHNGL\n         DC    H'0'\n*\nEDLINES4 DS    0H\n         LA    R4,4(,4)           BUMP TO NEXT TERM INPUT ADDRESS\n*\nEDLINES5 DS    0H\n         LA    R1,3               SUBTRACT FIRST 2 ROWS\n         SR    R2,R1   MAX LINES ON SCREEN\n*\n         CLI   72(R3),X'FF'       THIS LINE DELETED?\n         BE    *+12               YES, BUMP TO NEXT\n         CLI   72(R3),X'00'       THIS LINE DELETED?\n         BNE   *+12               NOPE, NO BUMP\n         LA    R3,80(,3)          BUMP TO LINE IN BUFFER\n         B     *-20               CHECK THIS LINE\n*\nEDLINESL DS    0H\n         L     R5,0(,R4)          POINT TO LINE1 TERMINAL INPUT\n         CLI   0(R5),X'00'      WAS THIS LINE CHANGED BY THE OPERATOR?\n         BNE   EDLINEIN         YUP.\n*\nEDLINEUP DS    0H\n         LA    R4,4(,4)           BUMP TO NEXT TERM INPUT ADDRESS\n         LA    R3,80(,3)          BUMP TO LINE IN BUFFER\n         C     R3,EDTLAST1        IF I'VE LOOKED AT ALL THE LINES,\n         BNL   EDLINESN           CHECK FOR COMMANDS, PFK\n         CLI   72(R3),X'FF'       THIS LINE DELETED?\n         BE    *-16               BUMP TO NEXT\n         CLI   72(R3),X'00'       THIS LINE DELETED?\n         BE    *-24               BUMP TO NEXT\n         BCT   R2,EDLINESL        LOOP\n         B     EDLINESN           CHECK FOR COMMANDS, PFK\n*\nEDLINEIN DS    0H\n*\n*  NEXT TEST FOR A LINE COMMAND\n*\n         LA    R6,2(,R5)         POINT TO LINE NUMBER COLUMNS\n         LA    R7,6              SET LOOP CONTROL\n*\nEDLINCOL DS    0H\n         CLI   0(R6),C'D'         LINE DELETE\n         BE    EDLINDEL           DELETE IT\n         CLI   0(R6),C'C'         LINE COPY\n         BE    EDLINCOP           REPEAT IT\n         CLI   0(R6),C'A'         LINE COPY AFTER LOCATION\n         BE    EDLINAFT           REPEAT IT\n         CLI   0(R6),C'R'         LINE REPEAT\n         BE    EDLINRPT           REPEAT IT\n*\n*  PUT TESTS FOR OTHER LINE COMMANDS HERE\n*\nEDBUMPCL DS    0H\n         LA    R6,1(,6)           BUMP POINTER\n         BCT   R7,EDLINCOL        LOOP\n*\n*  MOVE ONE LINE OF DATA\n*\n         MVC   0(72,R3),09(R5)    MOVE IN LINE DATA\n*\n         B     EDLINEUP           CHECK FOR NEXT LINE\n*\nEDLINDEL DS    0H\n*\n*  DELETE ONE LINE\n*\n         MVI   0(R6),C'0'         LINE DELETE OFF\n         MVI   72(R3),X'FF'             SET DELETE FLAG\n         B     EDLINEUP           CHECK FOR NEXT LINE\n*\nEDLINCOP DS    0H\n*\n*  COPY ONE LINE\n*\n         MVC   EDAFTSV1(80),0(R3) SAVE THIS LINE\n         L     R7,EDTRPTA1       DO I HAVE AN \"AFTER\" LOCATION\n         LTR   R7,7\n         BNZ   EDGOTAFT          YUP, GO MOVE IT IN\n         B     EDLINEUP           CHECK FOR NEXT LINE\n*\nEDLINAFT DS    0H\n*\n*  GOT \"AFTER\" LOCATION\n*\n         BAL   R14,EDLINRP1        REPEAT THE LINE\n*\n         CLI   EDAFTSV1,C' '      DO I HAVE A LINE TO MOVE IN\n         BE    EDLINEUP           NOPE, JUST CHECK FOR NEXT LINE\n*\n         L     R7,EDTRPTA1        PICK UP ADDRESS OF REPEATED LINE\nEDGOTAFT DS    0H\n         XC    EDTRPTA1(4),EDTRPTA1 CLEAR ADDRESS POINTER\n         MVC   0(80,R7),EDAFTSV1  MOVE IN THE LINE TO BE COPIED\n         MVI   EDAFTSV1,C' '      CLEAR LINE SAVE AREA\n         B     EDRENUM             RENUMBER AND RESCREEN\n*\nEDLINRPT DS    0H\n         MVI   0(R6),C'0'         LINE REPEAT OFF\n         BAL   R14,EDLINRP1        REPEAT THE LINE\n         XC    EDTRPTA1(4),EDTRPTA1 CLEAR ADDRESS POINTER\n         B     EDRENUM             RENUMBER AND RESCREEN\nEDLINRP1 DS    0H\n*\n*  REPEAT ONE LINE\n*\n         L     R7,EDTMAIN1        PICK UP FIRST LINE\n         LA    R7,1600(,7)        20 LINES OF GAS\n         LA    R1,20              LOOP CONTROL\n         LA    R0,80              LINE LENGTH\n*\n         CLI   72(R7),X'00'       AVAILABLE LINE\n         BE    *+14               GOT ONE\n         SR    R7,R0              BACK UP ONE\n         BCT   R1,*-10            KEEP LOOPING\n         B     EDNORPT            CAN'T DO REPEAT\n*\n         ST    R7,EDTFIRST        NEW START LOCATION\n         L     R1,EDNOWLN1        NUMBER OF LINES\n         LA    R1,1(,1)           BUMP 1\n         ST    R1,EDNOWLN1\n*\n         MVC   0(80,R7),80(R7)\n         LA    R7,80(,7)         BUMP\n         CR    R7,R3\n         BNE   *-12\n*\n         MVC   0(80,R7),0(R3)     MOVE IN REPEATED LINE\n         ST    R7,EDTRPTA1        SAVE ADDRESS\n*\n         L     R7,EDTCURR1         PICK UP CURRENT LINE POINTER\n         LA    R1,80\n         SR    R7,R1\n         ST    R7,EDTCURR1         RESET CURRENT LINE POINTER\n*\n         BR    R14                 RETURN\n*\nEDNORPT  DS    0H\n         B     EDRESCR             CAN'T DO REPEAT\n*\nEDLINESN DS    0H\n         L     R3,TERMINPT+8       COMMAND LINE\n*\n         CLI   SPLIT,2                  AM I ON SCREEN 2\n         BNE   EDLINE2N                 NOPE\n*\n         L     R3,SCROWS1          PICK UP SIZE OF SCREEN1\n         SLL   R3,2                MULTIPLY BY 4\n         L     R3,TERMINPT+8(R3)   PICK UP RESPONSES\n*\nEDLINE2N DS    0H\n         CLI   EDCOMMND,C' '\n         BNE   EDLINE3N\n*\n         CLI   0(R3),X'00'         COMMAND ENTERED\n         BE    EDRESCR             NO, RESHOW THE SCREEN\n         MVC   EDCOMMND(7),22(R3)\n*\n         MVI   AIDROW,1\n         MVI   AIDCOL,21\n         MVC   HOMEAID(2),AIDADDR\n*\n* PUT TESTS FOR COMMAND LINE HERE\n*\nEDLINE3N DS    0H\n*\n         CLC   EDCOMMND(5),=C'ABEND' IS IT ABEND?\n         BNE   *+6                   NO\n         DC    H'0'                  S0C1\n*\n         CLC   EDCOMMND(6),=C'RENUM ' IS IT A RENUM COMMAND\n         BE    EDRENUM             GO DO IT\n*\n         CLC   EDCOMMND(4),=C'SAVE'   IS IT A SAVE COMMAND\n         BE    EDTSAVE1            GO DO IT\n*\n         CLC   EDCOMMND(3),=C'SUB' IS IT A SUBMIT COMMAND\n         BE    EDTSUBMT            GO DO IT\n*\n         CLC   EDCOMMND(4),=C'END ' IS IT AN END COMMAND\n         BE    EDTSAVE1            GO DO IT\n         CLC   EDCOMMND(4),=C'PF3 ' IS IT AN END COMMAND\n         BE    EDTSAVE1            GO DO IT\n         CLC   EDCOMMND(3),=C'CAN' IS IT \"CANCEL\"\n         BE    EDTFREE1            GO DO IT\n*\n         CLC   EDCOMMND(6),=C'RESET ' IS IT A RESET COMMAND\n         BE    EDRESCR             RESHOW THE SCREEN\n*\n         CLC   EDCOMMND(2),=C'F '  IS IT \"FIND\"  COMMAND\n         BE    EDRFIND             SET FIND STRING\n         CLC   EDCOMMND(2),=C'L '  IS IT \"FIND\"  COMMAND\n         BE    EDRFIND             SET FIND STRING\n         CLC   EDCOMMND(3),=C'RF ' IS IT \"FIND\"  COMMAND\n         BE    EDRFIND             SET FIND STRING\n*\n         CLC   EDCOMMND(7),=C'DOWN   '\n         BE    EDMORMEM            SCROLL DOWN\n         CLC   EDCOMMND(7),=C'UP     '\n         BE    EDPREMEM            SCROLL UP\n         CLC   EDCOMMND(7),=C'RFIND  '\n         BE    EDRFIND             REPEAT FIND\n         CLI   EDCOMMND,C'C'       CHANGE\n         BE    EDRCHANG            CHANGE/REPEAT CHANGE\n*\n         B     EDRESCR             RESHOW THE SCREEN\n*\nEDRCHANG DS    0H\n*\n         CLI   EDFINDL,0           NO FIND STRING\n         BE    EDCHANG1\n*\n         CLI   EDCHNGL,0           NO CHNG STRING\n         BE    EDCHANG2\n*\n         CLC   EDCHNGL(1),EDFINDL  STRINGS NOT SAME LENGTH\n         BNE   EDCHANG3\n*\n         B     EDRFIND             REPEAT FIND\n*\nEDCHANG1 DS    0H\n         LA    R1,EDCERR1          FOUND\n         ST    R1,MSGADD\n         B     EDRESCR             RESHOW THE SCREEN\n*\nEDCHANG2 DS    0H\n         LA    R1,EDCERR2          FOUND\n         ST    R1,MSGADD\n         B     EDRESCR             RESHOW THE SCREEN\n*\nEDCHANG3 DS    0H\n*\n*        LA    R0,EDFINDS\n*        LA    R1,EDCHNGS\n*        SR    R2,R2\n*        LR    R3,R2\n*        IC    R2,EDFINDL\n*        IC    R3,EDCHNGL\n*        DC    H'0'\n*\n         LA    R1,EDCERR3          FOUND\n         ST    R1,MSGADD\n         B     EDRESCR             RESHOW THE SCREEN\n*\nEDCERR1  DC    CL20'ENTER \"FIND\" STRING'\nEDCERR2  DC    CL20'ENTER \"CHNG\" STRING'\nEDCERR3  DC    CL20'FIND/CHNG LENGTHS  '\nEDRENUM  DS    0H\n*                                  RENUMBER THE DS BY 10\n         L     R3,EDTFIRST        NEW START LOCATION\n         L     R1,EDNOWLN1        NUMBER OF LINES\n         LA    R4,10\n*                                  RENUMBER THE DS BY 10\n         CLI   72(R3),X'00'       BLANK LINE\n         BE    *+30               YUP\n         CLI   72(R3),X'FF'       DELETED LINE\n         BE    *+22               YUP\n*\n         CVD   R4,PACK8\n         OI    PACK8+7,X'0F'\n         UNPK  72(6,R3),PACK8+5(3)\n*\n         LA    R4,10(,4)\n         LA    R3,80(,3)\n         BCT   R1,*-38\n*                                  RENUMBER THE DS BY 10\n         B     EDRESCR             RESHOW THE SCREEN\n*\nEDINPUT  DS    0H\n*                   PROCESS ONE UPDATED LINE\n*\nEDRESCR  DS    0H\n*                   RE-DISPLAY THE SCREEN\n         B     EDTSHOW             RE-DISPLAY\n*\nEDRFIND  DS    0H\n*                   FIND THE NEXT OCCURRENCE OF A STRING\n         SR    R14,R14             CLEAR THE REGISTER\n         IC    R14,EDFINDL         SET LENGTH FOR EXECUTED CLC\n*\n         CLI   EDFINDS,X'7D'    LEADING QUOTE?\n         BNE   *+8\n         BCTR  R14,0\n         BCTR  R14,0\n*\n         L     R1,EDTCURR1      PICK UP LINE POINTER\n         CLI   EDCOMMND,C'C'       CHANGE\n         BE    *+8              YES, DON'T BUMP TO NEXT LINE\n         LA    R1,80(,R1)       BUMP TO NEXT LINE\n         LR    R15,R1              COPY START OF LINE\n*\nEDRFIND2 DS    0H\n*\n         C     R15,EDTLAST1     IF PAST END OF FILE\n         BH    EDRFNOTF         ALL DONE\n*\n         LA    R0,72\n         SR    R0,R14             SET R15 TO MAXIMUM LINE LOOP\n*\nEDRFLOOP DS    0H\n         CLI   EDFINDS,X'7D'    LEADING QUOTE?\n         BNE   *+16\n         EX    R14,FNDCLC2         SEARCH FOR THE STRING\n         BE    EDRFIND3            GOT IT\n         B     *+12\n         EX    R14,FNDCLC1         SEARCH FOR THE STRING\n         BE    EDRFIND3            GOT IT\n         LA    R1,1(,R1)         BUMP 1 BYTE\n         BCT   R0,EDRFLOOP         KEEP LOOPING\n*\n         LA    R15,80(,R15)        BUMP TO NEXT LINE\n         LR    R1,R15              COPY START OF LINE\n         B     EDRFIND2         ALL DONE\n*\nEDRFIND3 DS    0H\n*\n         CLI   EDCOMMND,C'C'       CHANGE\n         BNE   EDRFIND4            NO, JUST FIND\n*\n         CLI   EDFINDS,X'7D'    LEADING QUOTE?\n         BNE   *+12\n         EX    R14,CHGMVC2         REPLACE THE STRING\n         B     *+8\n         EX    R14,CHGMVC1         REPLACE THE STRING\n*\n         ST    R15,EDTCURR1        SET LINE POINTER\n         LA    R1,EDRCHNGD         CHANGED\n         ST    R1,MSGADD\n*\n         CLC   EDCOMMND(3),=C'C A' CHANGE ALL\n         BNE   EDTSHOW             NO, JUST DISPLAY THE CHANGED LINE\n*\n         B     EDTSHOW             JUST DISPLAY THE CHANGED LINE\n*\nEDRFIND4 DS    0H\n         ST    R15,EDTCURR1        SET LINE POINTER\n         LA    R1,EDRFOUND         FOUND\n         ST    R1,MSGADD\n         B     EDTSHOW             RE-DISPLAY\n*\nEDRFNOTF DS    0H\n*\n         LA    R1,EDNOTFMS         NOT FOUND\n         ST    R1,MSGADD\n         B     EDTSHOW             RE-DISPLAY\n*\nFNDCLC1  CLC   EDFINDS(1),0(R1)\nFNDCLC2  CLC   EDFINDS+1(1),0(R1)\nCHGMVC1  MVC   0(1,R1),EDCHNGS\nCHGMVC2  MVC   0(1,R1),EDCHNGS+1\n*\nEDNOTFMS DC    CL20'    STRING NOT FOUND'\nEDRFOUND DC    CL20'STRING FOUND'\nEDRCHNGD DC    CL20'             CHANGED'\n*\nEDMORMEM DS    0H\n*\n         CLI   22(R3),C' '      COMMAND ENTERED\n         BE    EDMORM12         NO, JUST BUMP DEFAULT\n*\n         CLI   00(R3),X'00'     COMMAND ENTERED\n         BE    EDMORM12         NO, JUST BUMP DEFAULT\n*\n         CLI   22(R3),C'M'      SCROLL \"MAX\"\n         BE    EDMORMAX         GO TO BOTTOM\n*\n         CLI   22(R3),C'0'      IF NOT NUMERIC\n         BL    EDMORM12         JUST BUMP DEFAULT\n*\n         LA    R14,22(,R3)      SET START OF FIELD\n         LA    R15,6            MAXIMUM LENGTH\n         SR    R1,1             COUNTER\n*\n         CLI   0(R14),C'0'      IF NOT NUMERIC\n         BL    *+16\n         LA    R1,1(,R1)        BUMP COUNTER\n         LA    R14,1(,R14)      BUMP POINTER\n         BCT   R15,*-16\n*\n         LTR   R1,1             IF LENGTH IS ZERO\n         BZ    EDMORM12         JUST BUMP DEFAULT\n*\n         BCTR  R1,0             SUBTRACT 1 FOR EXECUTED PACK\n         EX    R1,NUMPACK       PACK IT IN EDDWORD\n         CVB   R1,EDDWORD       PUT VALUE IN R1\n         SR    R0,R0\n         LA    R14,80\n         MR    R0,R14\n         A     R1,EDTCURR1\n         ST    R1,EDTCURR1\n         C     R1,EDTLAST1\n         BL    EDTSHOW             RE-DISPLAY\n         B     EDMORMAX           RE-DISPLAY\n*\nNUMPACK  PACK  EDDWORD(8),25(1,R3)\nEDMORM12 DS    0H\n*                   BUMP THE SCREEN BY 12 LINES\n         LA    R1,960\n         A     R1,EDTCURR1\n         ST    R1,EDTCURR1\n         C     R1,EDTLAST1\n         BL    EDTSHOW             RE-DISPLAY\n         B     EDMORMAX            RE-DISPLAY\n*\nEDMORMAX DS    0H\n*                   BUMP THE SCREEN TO BOTTOM AND BACK UP 12\n         LA    R1,960\n         L     R0,EDTLAST1\n         SR    R0,R1\n         ST    R0,EDTCURR1\n         B     EDTSHOW             RE-DISPLAY\n*\nEDPREMEM DS    0H\n         CLI   22(R3),C' '      COMMAND ENTERED\n         BE    EDPREM12         NO, JUST BUMP DEFAULT\n*\n         CLI   00(R3),X'00'     COMMAND ENTERED\n         BE    EDPREM12         NO, JUST BUMP DEFAULT\n*\n         CLI   22(R3),C'M'      SCROLL \"MAX\"\n         BE    EDPREMAX         GO TO TOP\n*\n         CLI   22(R3),C'0'      IF NOT NUMERIC\n         BL    EDPREM12         JUST BUMP DEFAULT\n*\n         LA    R14,22(,R3)      SET START OF FIELD\n         LA    R15,6            MAXIMUM LENGTH\n         SR    R1,1             COUNTER\n*\n         CLI   0(R14),C'0'      IF NOT NUMERIC\n         BL    *+16\n         LA    R1,1(,R1)        BUMP COUNTER\n         LA    R14,1(,R14)      BUMP POINTER\n         BCT   R15,*-16\n*\n         LTR   R1,1             IF LENGTH IS ZERO\n         BZ    EDPREM12         JUST BUMP DEFAULT\n*\n         BCTR  R1,0             SUBTRACT 1 FOR EXECUTED PACK\n         EX    R1,NUMPACK       PACK IT IN EDDWORD\n         CVB   R1,EDDWORD       PUT VALUE IN R1\n         SR    R0,R0\n         LA    R14,80\n         MR    R0,R14\n*\n         LR    R0,R1            AMOUNT TO BACK UP\n         L     R1,EDTCURR1\n         SR    R1,R0\n         ST    R1,EDTCURR1\n         C     R1,EDTFIRST\n         BH    EDTSHOW             RE-DISPLAY\n         B     EDPREMAX           RE-DISPLAY\nEDPREM12 DS    0H\n*                   BACK UP THE SCREEN 12 LINES\n         L     R1,EDTCURR1\n         LA    R0,960\n         SR    R1,R0\n         ST    R1,EDTCURR1\n         C     R1,EDTFIRST\n         BH    EDTSHOW             RE-DISPLAY\nEDPREMAX DS    0H\n         MVC   EDTCURR1(4),EDTFIRST\n         B     EDTSHOW             RE-DISPLAY\n*\n         TITLE 'ETPS - EDITOR    READ IN PAN DS'\nEDTPAN   DS    0H\n*\n         B     EDTFREE1            ALL DONE\n*\n         TITLE 'ETPS - EDITOR    SUBMIT COMMAND'\nEDTSUBMT DS    0H\n*\n* NOTE ALL THE DATASET SUBMIT LOGIC GOES HERE\n*\n         LA    R1,SUBSUBP\n         DYNALLOC\n*\n         GENCB BLK=ACB,AM=VSAM,MACRF=(ADR,SEQ,OUT),                    X\n               DDNAME=SUBJOB,MF=(G,ACBWORK,ACBSIZ)\n*\n         ST    R1,SUBACB\n         LR    R2,R1                           * ACB ADDRESS\n         USING IFGACB,2\n*\n         GENCB BLK=RPL,AM=VSAM,ACB=(2),OPTCD=(ADR,SEQ,SYN,NUP),        X\n               RECLEN=80,MF=(G,RPLWORK,RPLSIZ)\n*\n         ST    R1,SUBRPL\n         LR    R3,R1                           * RPL ADDRESS\n         USING IFGRPL,3\n*\n         MVI   PARMOP,X'80'   SET VL BIT\n         OPEN  ((2)),MF=(E,PARMOP)\n*\n         LTR   R15,15                          * GOOD OPEN?\n         BNZ   WTOMS61        NOT OPEN\n*\n         L     R4,EDTFIRST    PICK UP STORAGE AREA\n*\nEDTSUB1  DS    0H\n*\n         C     R4,EDTLAST1\n         BNL   EDTSUBCL\n*\n         CLI   72(R4),X'00'  DELETED LINE\n         BE    EDTSUBB1\n         CLI   72(R4),X'FF'  DELETED LINE\n         BE    EDTSUBB1\n*\n         MODCB RPL=(3),AREA=(4),ACB=(2),MF=(G,MODWORK,MODSIZ)\n*\n         PUT   RPL=(3)\n*\nEDTSUBB1 DS    0H\n         LA    R4,80(,4)\n         B     EDTSUB1\n*\nEDTSUBCL DS    0H\n        ENDREQ RPL=(3)\n         MVC   SUBMSG1(20),SUBMSG   SET MESSAGE\n         MVC   SUBMSG1(8),RPLRBAR   SET JOB NUMBER IN MESSAGE\n         MVI   PARMOP,X'80'   SET VL BIT\n         CLOSE ((2)),MF=(E,PARMOP)\n         LA    R1,SUBMSG1\n         ST    R1,MSGADD\n         B     EDRESCR              RESHOW THE SCREEN\n*\nSUBMSG   DC    CL20'         SUBMITTED'\n*\n         TITLE 'ETPS - EDITOR    SAVE PROCESSING'\n         PRINT GEN\nEDTSAVE1 DS    0H\n*\n* NOTE ALL THE DATASET SAVE LOGIC GOES HERE\n*\n*\n* FIRST COUNT THE NUMBER OF RECORDS IN MY EDIT WORK AREA TO DETERMINE\n* WHETHER I CAN DO AN UPDATE-IN-PLACE.\n*\n         SR    R1,1                 RECORD COUNTER\n*\n         L     R3,EDTFIRST    PICK UP STORAGE AREA\n*\nEDTALLY  DS    0H\n*\n         C     R3,EDTLAST1\n         BNL   EDTCFREC\n*\n         CLI   72(R3),X'00'  DELETED LINE\n         BE    EDTALLUP\n         CLI   72(R3),X'FF'  DELETED LINE\n         BE    EDTALLUP\n*\n         LA    R1,1(,1)      ADD 1 TO MY COUNT\n*\nEDTALLUP DS    0H\n         LA    R3,80(,3)\n         B     EDTALLY\nEDTCFREC DS    0H\n*\n         C     R1,EDTRECS   COMPARE CURRENT RECS VERSUS ORIGINAL RECS\n         BNE   EDTSUPD2     NO MATCH, CAN'T DO UPDATE-IN-PLACE\n*\nEDTSUPD1 DS    0H\n         L     R2,EDTDCB            PICK UP DCB ADDRESS\n         MVC   50(2,R2),=X'4850'    SET MACRF TO GL,PM\n*\n         MVI   PARMOP,X'80'   SET VL BIT\n         OPEN  ((2),(UPDAT)),MF=(E,PARMOP)\n*\n         TM    48(R2),X'10'   TEST FOR GOOD OPEN\n         BZ    WTOMS61        NOT OPEN\n*\n         L     R3,EDTFIRST    PICK UP STORAGE AREA\n*\nEDTPUT1  DS    0H\n*\n         C     R3,EDTLAST1\n         BNL   EDTEOF2\n*\n         CLI   72(R3),X'00'  DELETED LINE\n         BE    EDTPUTB1\n         CLI   72(R3),X'FF'  DELETED LINE\n         BE    EDTPUTB1\n*\n         GET   (R2)\n         MVC   0(80,R1),0(R3)\n         PUTX  (R2)\n*\nEDTPUTB1 DS    0H\n         LA    R3,80(,3)\n         B     EDTPUT1\n*\n*\nEDTSUPD2 DS    0H\n         ST    R1,EDTRECS       SET CURRENT RECS\n         L     R2,EDTDCB            PICK UP DCB ADDRESS\n         LM    R0,R1,40(R2)         SAVE DDNAME\n         MVC   0(96,R2),PMVDCB      SET MACRF TO PM\n         STM   R0,R1,40(R2)        RESET DDNAME\n*\n         MVI   PARMOP,X'80'   SET VL BIT\n         OPEN  ((2),(OUTPUT)),MF=(E,PARMOP)\n*\n         TM    48(R2),X'10'   TEST FOR GOOD OPEN\n         BZ    WTOMS61        NOT OPEN\n*\n         L     R3,EDTFIRST    PICK UP STORAGE AREA\n*\nEDTPUT2  DS    0H\n*\n         C     R3,EDTLAST1\n         BNL   EDTEOF2\n*\n         CLI   72(R3),X'00'  DELETED LINE\n         BE    EDTPUTB2\n         CLI   72(R3),X'FF'  DELETED LINE\n         BE    EDTPUTB2\n*\n         PUT   (R2),(R3)\n*\nEDTPUTB2 DS    0H\n         LA    R3,80(,3)\n         B     EDTPUT2\n*\nEDTEOF2  DS    0H\n*\n         MVI   PARMOP,128\n         CLOSE ((2)),MF=(E,PARMOP)\n*     FREEPOOL (2)\n*\n         MVI   MSGBUFF,C' '\n         MVC   MSGBUFF+1(19),MSGBUFF\n*\n         MVC   MSGBUFF(20),EDTSAVDS\n         CLI   EDTMEM,C' '         MEMBER PROVIDED\n         BE    EDTMSG2             NOPE\n         CLC   EDTORG(3),=C'SEQ'   SEQUENTIAL FILE?\n         BE    EDTMSG2             YES, DON'T DO STOW\n*\n         L     R2,LIBDCBA\n         CALL  SPFSTOW,((2),EDTRECS,USERID,EDTMEM),VL,MF=(E,PARM43)\n*\n         B     EDTCMDT\n*\nEDTSAVDS DC    CL8'DATASET '\nEDTSAVMM DC    CL12'SAVED'\nPMVDCB   DCB   DDNAME=DUMMY,MACRF=PM,DSORG=PS\nGMVDCB   DCB   DDNAME=DUMMY,MACRF=GM,DSORG=PS\n*\nEDTCMDT  DS    0H\n*\n         MVC   MSGBUFF(8),EDTMEM        SET THE \"SAVED\" MESSAGE\n         MVC   MSGBUFF+9(5),EDTSAVMM\nEDTMSG2  DS    0H\n         LA    R1,MSGBUFF\n         ST    R1,MSGADD\n*\n         CLC   EDCOMMND(7),=C'SAVEND '     SAVE AND END\n         BE    EDTFREE1            ALL DONE\n*\n         CLC   EDCOMMND(3),=C'END'         JUST END\n         BE    EDTFREE1            ALL DONE\n*\n         B     EDRESCR             RESHOW THE SCREEN\n*\nEDTFREE1 DS    0H\n         L     R6,EDTMAIN1              SAVE GETMAIN ADDRESS\n         L     R7,EDTLENG1              SAVE GETMAIN LENGTH\n         FREEMAIN R,LV=(R7),A=(R6)\nEDTRETRN DS    0H\n         L     R13,4(,13)               RESTORE CALLERS REGS\n         LM    R14,R12,12(R13)          RESTORE CALLERS REGS\n         BR    R14                      NORMAL RETURN\nWTOMS51  WTO   'ETPS1051 OPEN INPUT FAILED IN EDITOR  ',ROUTCDE=11\n         LA    R1,WTOMS51+13\n         ST    R1,MSGADD\n         B     EDTFREE1            ALL DONE\nWTOMS61  WTO   'ETPS1051 OPEN OUTPUT FAILED IN EDITOR ',ROUTCDE=11\n         LA    R1,WTOMS61+13\n         ST    R1,MSGADD\n         B     EDTFREE1            ALL DONE\n         LTORG\n         PRINT NOGEN\n         TITLE 'ETPS - EDIT CONSTANTS'\n*\nEQUALS   DC    C'=='\n*\n         TITLE 'ETPS - EDIT FILE SCREEN FORMAT'\n*\n* THIS IS THE FORMAT FOR A PDS OR PAN LIBRARY MEMBER, OR A SEQ FILE.\n*\nEDTTITLE DS    0F\nDSNROW1  DC    AL1(80)\n         DC    X'05'\n         DC    CL8'   EDIT '\n         DC    C'- '\nDSNDSNAM EQU   *-EDTTITLE\n         DC    69C'-'\nDSNROW2  DC    AL1(80)\n         DC    X'05'\n         DC    CL19'COMMAND INPUT ===> '\n         DC    X'01'\n         DC    CL40' '\n         DC    X'05'\n         DC    CL13' SCROLL ===> '\n         DC    X'01'\n         DC    CL4'PAGE'\n*\nDSNROW3  DC    AL1(80)\n         DC    X'05'\n         DC    CL14'FIND STRNG==> '\nFLDSTART DC    X'01'\n         DC    CL24' '\nFLDEND   DC    X'05'\n         DC    CL14'CHANGE TO ==> '\n         DC    X'01'\n         DC    CL30' '\n         DC    X'05'\n*\nDSNLINE  DC    AL1(80)\n         DC    X'01',C'      ',X'01',CL72' '\n*\n         CNOP  0,8\n         TITLE 'ETPS - EDIT   HELP SCREEN'\n*\n*\nEDTHELP  CSECT\n         DC    A(EDTHELP1)\n         DC    A(EDTBLANK)\n         DC    A(EH2)\n         DC    A(EH3)\n         DC    A(EH4)\n         DC    A(EDTBLANK)\n         DC    A(EH5)\n         DC    A(EH6)\n         DC    A(EH7)\n         DC    A(EDTBLANK)\n         DC    A(EH8)\n         DC    A(EH9)\n         DC    A(EHA)\n         DC    A(EHB)\n         DC    A(EHC+X'80000000')\nEDTHELP1 DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                  PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL22' PDS MEMBER EDIT HELP'\n         DC    34C'-'\n*                         1234567890123456789012345678901234567890123\nEH2 DC AL1(45),X'05',CL46'COMMAND LINE COMMANDS ARE:                 '\nEH3 DC AL1(45),X'05',CL46' ABEND-S0C1   SAVE-SAVE CURRENT END-ENDSAVE'\nEH4 DC AL1(45),X'05',CL46' SUB---SUBMIT CAN--END NOSAVE   F---FIND   '\nEH5 DC AL1(45),X'05',CL46'LINE PREFIX COMMANDS ARE:                  '\nEH6 DC AL1(45),X'05',CL46' D-DELETE LINE   R-REPEAT LINE  C-COPY LINE'\nEH7 DC AL1(45),X'05',CL46' A-AFTER (USED WITH COPY)                  '\nEH8 DC AL1(45),X'05',CL46'NOTE THAT LINE PREFIX COMMANDS MUST NOT BE '\nEH9 DC AL1(45),X'05',CL46'MIXED, EXCEPT FOR COPY-AFTER. DO NOT DELETE'\nEHA DC AL1(45),X'05',CL46'AND REPEAT LINES ON THE SAME SCREEN, NOR   '\nEHB DC AL1(45),X'05',CL46'COPY AND DELETE/REPEAT LINES ON THE SAME   '\nEHC DC AL1(45),X'05',CL46'SCREEN.                                    '\nEDTBLANK DC    AL1(10),X'05',CL12' '\n         CNOP  0,8\n         EJECT\n         PRINT GEN\n         MYSAVE\nDYNDECBL EQU   20\nGMVUL    EQU   10\n         SPLTAREA\n         IFGACB\n         IFGRPL\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\nSPFSTOW  CSECT\n         USING *,12\n         STM   R14,R12,12(R13)    SAVE INPUT REGS\n         LR    R12,R15            SET BASE REGISTER\n         LR    R10,R1             SAVE PARM ADDRESS\n         B     PROLOG\n         DC    C'SPFSTOW  05/15/84 BRIAN COOK'\nPROLOG   DS    0H\n         GETMAIN R,LV=4096        GET MY SAVE AREA ADDRESS\n         LR    R11,R1             SAVE GETMAIN POINTER\n         ST    R13,4(R11)         STORE BACKWARDS POINTER\n         ST    R11,8(R13)         STORE FORWARD POINTER\n         LR    R13,R11\n         USING STOWSAVE,13\n*\nGETPARM  DS    0H\n         LM    R2,R5,0(10)    R2=ADDRESS OF OPEN DIRECTORY DCB\n         L     R3,0(,R3)      R3=NUMBER OF CARDS\n*                             R4=ADDRESS OF USERID\n*                             R5=ADDRESS OF MEMBER NAME\n*\n         MVC   BLDLENT(60),BLDLAREA\n         MVC   MEMNAME(8),0(R5)  MOVE THE MEMBER NAME\n*\n         EJECT\n         BLDL  (2),BLDLENT\n*\n         LTR   R15,15\n         BZ    *+10\n         LA    R14,BLDLENT\n         DC    X'0000'\n         MVC   SPFVER(30),SPFVER+2   SKIP BLDL JUNK\n*\n         CLI   STALIAS,X'0F'\n         BNE   NOTASPF\n*\n         SR    R15,R15\n         IC    R15,SPFMOD\n         LA    R15,1(,R15)\n         STC   R15,SPFMOD\n*\n         B     ITSASPF\n*\nNOTASPF  DS    0H\n         MVC   SPFVER(5),=X'0100000000'\n         MVI   STALIAS,X'0F'\nITSASPF  DS    0H\n*\n         MVC   SPFUID(8),SPACES\n         MVC   SPFUID(5),0(R4)    USERID\n*\n         TIME  DEC\n         STCM  R1,7,SPFMODT\n         CLC   SPFCRDT(3),SPACES\n         BNE   *+8\n         STCM  R1,7,SPFCRDT\n         SRL   R0,16              SHIFT OFF SECONDS\n         STCM  R0,3,SPFMODTM\n         STCM  R3,3,SPFSIZE\n         CLC   SPFSIZEI(2),SPACES\n         BNE   *+8\n         STCM  R3,3,SPFSIZEI\n*\n         STOW  (2),MEMNAME,R\n*\n*\n*\nJUSTEOJ  DS    0H\n*\n         L     R13,4(,R13)  PICK UP CALLING SAVE AREA\n         FREEMAIN R,LV=4096,A=(11)\n         LM    R14,R12,12(R13)\n         SR    R15,15\n         BR    R14\n         TITLE 'WORKING STORAGE AREAS'\nSPACES   DC    CL16' '\nFZEROS   DC    F'0'\nBLDLAREA DS    0H\n         DC    H'1'     NUMBER OF ENTRIES IN BLDL LIST\n         DC    H'56'    LENGTH OF ENTRY\n         DC    56X'40'\n         LTORG\n         TITLE 'DSECT '\nSTOWSAVE DSECT\n         DS    18F\nBLDLENT  DS    F\nMEMNAME  DS    CL8\nTTRC     DS    XL3\nSTALIAS  DS    XL1\n*\n*    SPF USER DATA\n*\nSPFVER   DS    XL1\nSPFMOD   DS    XL1\n         DS    XL2\n         DS    XL1\nSPFCRDT  DS    PL3\n         DS    XL1\nSPFMODT  DS    PL3\nSPFMODTM DS    XL2\nSPFSIZE  DS    XL2\nSPFSIZEI DS    XL2\nSPFMOD2  DS    XL2\nSPFUID   DS    CL7\n         DS    CL3\nBLDLPAD  DS    XL2\n         END\n/*\n//LKED1   EXEC PGM=HEWL,PARM=(XREF,LET,LIST,RENT,TERM),\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSLIB   DD  DSN=SYS2.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MVSTGT\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n  SETCODE AC(1)\n     NAME ETPSEDT3(R)\n/*\n//LKED2   EXEC PGM=HEWL,PARM=(XREF,LET,LIST,RENT,TERM),\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSLIB   DD  DSN=SYS2.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MVSYSA\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n  SETCODE AC(1)\n     NAME ETPSEDT3(R)\n/*\n//LLA   EXEC PGM=MVSCMD,PARM='F LLA,REFRESH'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ETPSHELP": {"ttr": 7429, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00*\\x00*\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "CBT353"}, "text": "         CNOP  0,8\n         TITLE 'ETPS - IDCAMS HELP SCREEN'\n*\n*\nIDCHELP  CSECT\n         DC    A(IDCHELP1)\n         DC    A(IDCBLANK)\n         DC    A(IDCHELP2)\n         DC    A(IDCHELP3)\n         DC    A(IDCHELP4)\n         DC    A(IDCBLANK)\n         DC    A(IDCHELP5)\n         DC    A(IDCHELP6)\n         DC    A(IDCBLANK)\n         DC    A(IDCHELP7)\n         DC    A(IDCHELP8)\n         DC    A(IDCHELP9+X'80000000')\nIDCHELP1 DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                  PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL21' IDCAMS INTERFACE    '\n         DC    34C'-'\n*        123456789012345678901234567890123456789012345678901234567890\nIDCHELP2 DC    AL1(61),X'05'\n DC CL62'5 COMMAND LINES ARE PROVIDED TO ENTER AN IDCAMS COMMAND OR  '\nIDCHELP3 DC    AL1(61),X'05'\n DC CL62'    A SET OF IDCAMS COMMANDS. EACH COMMAND LINE IS PRECEEDED'\nIDCHELP4 DC    AL1(61),X'05'\n DC CL62'    BY AN ASTERISK, WHICH MAKES THE ENTIRE LINE A COMMENT.  '\nIDCHELP5 DC    AL1(61),X'05'\n DC CL62'NOTE THAT IF AN IDCAMS COMMAND REQUIRES MORE THAN ONE LINE, '\nIDCHELP6 DC    AL1(61),X'05'\n DC CL62'    YOU MUST INDICATE CONTINUATIONS WITH A HYPHEN.          '\nIDCHELP7 DC    AL1(61),X'05'\n DC CL62'EACH COMMAND LINE IS PASSED TO IDCAMS AS A CARD IMAGE, JUST '\nIDCHELP8 DC    AL1(61),X'05'\n DC CL62'    AS IF IDCAMS WAS INVOKED IN A BATCH JOB. DO NOT USE ANY '\nIDCHELP9 DC    AL1(61),X'05'\n DC CL62'    OF THE TSO COMMAND SYNTAX, THINK BATCH.                 '\nIDCBLANK DC    AL1(10),X'05',CL12' '\n         CNOP  0,8\n         EJECT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ETPSIDC2": {"ttr": 7431, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x03\\xd9\\x03\\xd9\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 985, "newlines": 985, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCIDC JOB (E9167,QCC,ASQCC),'X-COOK, BRIAN',\n//   MSGCLASS=X,CLASS=X,NOTIFY=ASQCC,MSGLEVEL=(1,1)\n/*JOBPARM L=99,SYSAFF=MVSA\n//*\n//* TECH.ASQCC.SOURCE(ETPSIDC2)\n//*\n//ONEL   OUTPUT PAGEDEF=06080,FORMDEF=0101,CHARS=GT12,DEFAULT=YES\n//ASM     EXEC PGM=IEV90,REGION=1024K,\n//             PARM='TERM,NODECK,OBJECT,RENT,XREF(SHORT)'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DISP=SHR,DSN=SYS2.MACLIB  <== TCBUVTAM, ETPSMACS\n//SYSUT1   DD  SPACE=(CYL,(5,1)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nETPSIDC2 TITLE 'ETPS - IDCAMS INTERFACE CHANGE LOG'\n**********************************************************************\n*\n* CHANGE LOG:\n*\n*  4/02/87 BRIAN COOK     FIXED GARBAGE SCREEN IN SPLIT-SCREEN,\n*                         PER CARL GELBART, PACIFIC MUTUAL. THANKS!\n*\n* 11/10/86 BRIAN COOK     UPDATED HELP PANEL.\n*\n* 11/07/86 BRIAN COOK     SCROLL OUTPUT, ADD 4TH AND 5TH COMMAND LINE.\n*                         GETTING SOME REAL STRANGE RESIDUAL DATA ON\n*                         SECOND TIME THROUGH. OH, WELL.\n*\n*  9/03/86 BRIAN COOK     ADDED 2ND AND 3RD COMMAND LINES\n*\n*\n**********************************************************************\n         TITLE 'ETPS - IDCAMS INTERFACE'\n         PRINT OFF\n         COPY ETPSMACS\n         PRINT ON\nETPSIDC2 CSECT\n*\n         USING *,12,11\n         USING SAVE2,13\n*\n         STM   R14,R12,12(R13)    SAVE INPUT REGS\n         LR    R12,R15            SET PROGRAM BASE REGISTER 1\n         L     R2,0(,R1)          SAVE PARM POINTER\n         LA    R11,72(,R13)       LEVEL 2 MODULE, SO BUMP TO SAVE2\n         ST    R13,4(,R11)       STORE BACKWARDS POINTER\n         ST    R11,8(R13)         STORE FORWARD POINTER\n         LR    R13,R11            SET DSECT BASE 1\n         LA    R3,1\n         LA    R11,4095(R3,R12)   SET PROGRAM BASE REGISTER 2\n         LA    R10,SPLITWRK       SET DSECT FOR SPLIT-SCREEN\n         USING SPLTAREA,10\n*\n         GETMAIN R,LV=12288       GET MY SAVE AREA ADDRESS\n         LR    R9,R1             SAVE GETMAIN POINTER\n         USING IDCSAVE,9\n*\nSETPARMS DS    0H\n*\n         MVC   EYECATCH(8),=CL8'CALLVSAM'\n         MVC   IDCPARMS(PARMLEN),PARMTOP\n         MVI   COMMAND1,C' '\n         MVC   COMMAND1+1(79),COMMAND1\n*\n         LA    R1,IDCPARMS\n         USING PDSECT,1\n*\n         LA    R15,PARMFLD\n         ST    R15,VPARMS\n*\n         LA    R15,DDNAMES\n         ST    R15,VPARMS+4\n*\n         LA    R15,PAGELIST\n         ST    R15,VPARMS+8\n*\n         LA    R15,IOLIST\n         ST    R15,VPARMS+12\n         OI    VPARMS+12,X'80'\n*\n*                                SET UP IOLIST ENTRIES FOR SYSIN\n*\n         LA    R15,IODD1\n         ST    R15,IOLIST+4\n*\n         L     R15,=A(IOR)\n         ST    R15,IOLIST+8\n*\n         ST    R9,IOLIST+12\n*\n*                                SET UP IOLIST ENTRIES FOR SYSPRINT\n*\n         LA    R15,IODD2\n         ST    R15,IOLIST+16\n*\n         L     R15,=A(IOR)\n         ST    R15,IOLIST+20\n*\n         ST    R9,IOLIST+24\n*\n*    SET UP THE COMMAND SCREEN\n*\nIDCCMND  DS    0H\n*\n         LA    R4,TERMOUT+4      PICK UP ADDR OF FIRST OUTPUT LINE\n         L     R8,SCROWS          PICK UP NUMBER OF ROWS\n         CLI   SPLIT,0           AM I DOING SPLIT-SCREEN?\n         BE    SETIDCNX          NOPE\n         L     R8,SCROWS1        PICK UP NUMBER OF ROWS ON SCREEN 1\n*\n         CLI   SPLIT,2           AM I ON SCREEN 2?\n         BNE   SETIDCNX          GO DO IT\n*\n         SLL   R8,2              MULTIPLY BY 4\n         LA    R4,TERMOUT+4(R8)  SET ADDRESS OF FIRST OUTPUT LINE\n         L     R8,SCROWS2        PICK UP NUMBER OF ROWS ON SCREEN 2\n*\nSETIDCNX DS    0H\n*\n         NI    0(R4),X'7F'        NOT END OF PARM LIST\n         L     R14,0(,R4)         PICK UP ADDR OF FIRST OUTPUT LINE\n         MVC   0(81,R14),IDCROW1  FILL IN LINE1\n*\n         L     R14,4(,R4)         BUMP\n         NI    4(R4),X'7F'        NOT END OF PARM LIST\n         MVC   0(81,R14),IDCROW2  FILL IN LINE2\n         MVC   22(57,R14),COMMAND1 COPY COMMAND TO SCREEN\n         MVI   22(R14),C'*'       MAKE IT A COMMENT\n*\n         L     R14,8(,R4)         BUMP\n         NI    8(R4),X'7F'        NOT END OF PARM LIST\n         MVC   0(81,R14),IDCROW2  FILL IN LINE2\n         MVC   22(57,R14),COMMAND2 COPY COMMAND TO SCREEN\n         MVI   22(R14),C'*'       MAKE IT A COMMENT\n*\n         L     R14,12(,R4)        BUMP\n         NI    12(R4),X'7F'       NOT END OF PARM LIST\n         MVC   0(81,R14),IDCROW2  FILL IN LINE2\n         MVC   22(57,R14),COMMAND3 COPY COMMAND TO SCREEN\n         MVI   22(R14),C'*'       MAKE IT A COMMENT\n*\n         L     R14,16(,R4)        BUMP\n         NI    16(R4),X'7F'       NOT END OF PARM LIST\n         MVC   0(81,R14),IDCROW2  FILL IN LINE2\n         MVC   22(57,R14),COMMAND4 COPY COMMAND TO SCREEN\n         MVI   22(R14),C'*'       MAKE IT A COMMENT\n*\n         L     R14,20(,R4)        BUMP\n         NI    20(R4),X'7F'       NOT END OF PARM LIST\n         MVC   0(81,R14),IDCROW2  FILL IN LINE2\n         MVC   22(57,R14),COMMAND5 COPY COMMAND TO SCREEN\n         MVI   22(R14),C'*'       MAKE IT A COMMENT\n*\n         L     R14,24(,R4)        BUMP\n         MVC   0(81,R14),BLANK1   FILL IN LINE3\n*\n         OI    24(R4),X'80'       END OF PARM LIST\n         CLI   SPLIT,1            AM I DOING SPLIT-SCREEN?\n         BNE   *+8                NO\n         NI    24(R4),X'7F'       NOT END OF PARM LIST\n*\nCOMMIDC  DS    0H\n*\n*\n         L     R15,=A(IDCHELP)     IDCAMS HELP SCREEN\n         ST    R15,HELPADD\n*\n         MVI   AIDROW,01           CURSOR ROW\n         MVI   AIDCOL,21           CURSOR COLUMN\n         MVC   HOMEAID(2),AIDADDR  COPY\n*\n         L     R15,COMMA3          GO COMMUNICATE\n         BALR  R14,R15\n*\n         LTR   R15,15                   BAD RC\n         BNZ   EOJ                      OUT\n*\nCOMMIDC2 DS    0H\n*                 CHECK TO SEE WHETHER AN IDCAMS COMMAND WAS ENTERED\n*\n         LM    R2,R8,TERMINPT      PICK UP FIRST REPLY FIELD\n*\n         CLI   SPLIT,2             AM I ON SECOND SCREEN\n         BNE   IDCFMTPF            NO, GO TEST PFKEY\n*\n         L     R3,SCROWS1        PICK UP NUMBER OF ROWS ON SCREEN 1\n         SLL   R3,2              MULTIPLY BY 4\n         LA    R3,TERMINPT+4(R3) SET ADDRESS OF FIRST INPUT LINE\n         LM    R3,R8,0(R3)       PICK UP FIRST REPLY FIELD\n*\nIDCFMTPF DS    0H\n         CLI   0(R2),X'6E'         PA 2\n         BE    COMMIDC             RESHOW SCREEN\n*\n         CLI   PFKFLAG,0           PFK/ATTN ENTERED?\n         BNE   IDCPFK            YUP\n*\n*\n*                                SET UP IDCAMS COMMAND\nSETCMD1  DS    0H\n*\n         CLI   0(R4),X'00'      COMMAND ENTERED?\n         BE    SETCMD2          NOPE\n         CLI   22(R4),C'*'      LEADING ASTERISK?\n         BE    SETCMD2          YES, JUST RESHOW THE SCREEN\n*\n         MVI   COMMAND1,C' '\n         MVC   COMMAND1+1(79),COMMAND1\n         MVC   COMMAND1(57),22(R4)\n*\nSETCMD2  DS    0H\n*\n         CLI   0(R5),X'00'      COMMAND ENTERED?\n         BE    SETCMD3          NOPE\n         CLI   22(R5),C'*'      LEADING ASTERISK?\n         BE    SETCMD3          YES, JUST RESHOW THE SCREEN\n*\n         MVI   COMMAND2,C' '\n         MVC   COMMAND2+1(79),COMMAND2\n         MVC   COMMAND2(57),22(R5)\n*\nSETCMD3  DS    0H\n*\n         CLI   0(R6),X'00'      COMMAND ENTERED?\n         BE    SETCMD4          NOPE\n         CLI   22(R6),C'*'      LEADING ASTERISK?\n         BE    SETCMD4          YES, JUST RESHOW THE SCREEN\n*\n         MVI   COMMAND3,C' '\n         MVC   COMMAND3+1(79),COMMAND3\n         MVC   COMMAND3(57),22(R6)\n*\nSETCMD4  DS    0H\n*\n         CLI   0(R7),X'00'      COMMAND ENTERED?\n         BE    SETCMD5          NOPE\n         CLI   22(R7),C'*'      LEADING ASTERISK?\n         BE    SETCMD5          YES, JUST RESHOW THE SCREEN\n*\n         MVI   COMMAND4,C' '\n         MVC   COMMAND4+1(79),COMMAND4\n         MVC   COMMAND4(57),22(R7)\n*\nSETCMD5  DS    0H\n*\n         CLI   0(R8),X'00'      COMMAND ENTERED?\n         BE    SETCMD6          NOPE\n         CLI   22(R8),C'*'      LEADING ASTERISK?\n         BE    SETCMD6          YES, JUST RESHOW THE SCREEN\n*\n         MVI   COMMAND5,C' '\n         MVC   COMMAND5+1(79),COMMAND5\n         MVC   COMMAND5(57),22(R8)\n*\nSETCMD6  DS    0H\n*                                SET UP LINE COUNTERS/POINTERS\n*\n         SR    R15,R15\n         ST    R15,OUTLINES\n*\n         LA    R14,120           LOOP CONTROL\n         ST    R14,MAXLINES\n*\n         LA    R15,DATALINE      CLEAR THE OUTPUT LINES\n         ST    R15,NEXTLINE\n*\n         MVC   0(80,R15),ENDDATA\n         LA    R15,80(,R15)\n         BCT   R14,*-10          LOOP\n         MVC   0(80,R15),ENDDATA\n*\n         LA    R1,IDCPARMS\n         LINK  EP=IDCAMS\n*\nSCRNDATA DS    0H\n         LA    R7,DATALINE\n         ST    R7,TOPLINE\n         L     R5,MAXLINES\n         L     R6,OUTLINES\n         CR    R5,R6\n         BL    *+6\n         LR    R5,R6\n*\n*        DC    H'0'\n*\nSHOWOUT1 DS    0H\n*\n*        MOVE DATA TO SCREEN\n*\n         LA    R4,TERMOUT+4      PICK UP ADDR OF FIRST OUTPUT LINE\n         L     R8,SCROWS          PICK UP NUMBER OF ROWS\n         CLI   SPLIT,0           AM I DOING SPLIT-SCREEN?\n         BE    SETIDCS2          NOPE\n*\n         CLI   SPLIT,2           AM I ON SCREEN 2?\n         BE    SETIDCS1          YUP\n*\n         L     R8,SCROWS1        PICK UP NUMBER OF ROWS ON SCREEN 1\n         B     SETIDCS2          GO DO IT\n*\nSETIDCS1 DS    0H\n*\n         L     R8,SCROWS1        PICK UP NUMBER OF ROWS ON SCREEN 1\n         SLL   R8,2              MULTIPLY BY 4\n         LA    R4,TERMOUT+4(R8)  SET ADDRESS OF FIRST OUTPUT LINE\n         L     R8,SCROWS2        PICK UP NUMBER OF ROWS ON SCREEN 2\n*\nSETIDCS2 DS    0H\n*\n         L     R14,0(,R4)         BUMP\n         NI    0(R4),X'7F'        NOT END OF PARM LIST\n         MVC   0(81,R14),IDCOUT1  FILL IN LINE2\n*\n         LA    R1,3\n         SR    R8,R1\n*\n         C     R7,TOPLINE         AM I ABOVE THE TOP\n         BH    *+8                NO\n         L     R7,TOPLINE         YES, SET TO TOP\n*\n         ST    R7,TOPPTR          LINE I AM ON\n*\n*\n*  THE LOOP CONTROL HERE IS SORT OF TRICKY, BECAUSE THERE ARE 2\n*  FACTORS:\n*\n*  1. NUMBER OF LINES PRODUCED BY IDCAMS\n*  2. AVAILABLE NUMBER OF LINES ON THE SCREEN\n*\nSCRNLOOP DS    0H\n*\n* MOVE THE IDCAMS OUTPUT LINES TO THE SCREEN\n*\n         CLC   0(20,R7),ENDDATA   EMPTY LINE\n         BE    DATAEND            YES\n         C     R7,NEXTLINE        AM I PAST THE END?\n         BH    DATAEND            YES\n*\n         NI    0(R4),X'7F'        NOT END OF PARM LIST\n         LA    R4,4(,R4)\n         L     R14,0(,R4)\n         MVC   0(81,R14),BLANK1\n         MVC   2(79,R14),0(R7)\n*\n         LA    R7,80(,R7)\n         BCT   R8,SCRNLOOP\n*\n         B     SCRNDONE\n*\nDATAEND  DS    0H\n*\n         L     R7,NEXTLINE        POINT TO THE LAST  LINE\n*\nSCRNDONE DS    0H\n*\n         LTR   R8,R8              END OF SCREEN?\n         BZ    SCRNEND1           YES\n*\n         NI    0(R4),X'7F'        NOT END OF PARM LIST\n         LA    R4,4(,R4)\n         L     R14,0(,R4)\n         MVC   0(81,R14),ENDDATA\n*\n         BCT   R8,SCRNDONE\n*\nSCRNEND1 DS    0H\n*\n         OI    0(R4),X'80'        END OF PARM LIST\n         CLI   SPLIT,1           AM I DOING SPLIT-SCREEN?\n         BNE   *+8                NO\n         NI    0(R4),X'7F'        NOT END OF PARM LIST\n*\n*\n*        DISPLAY THE SCREEN\n*\n*\n         L     R15,=A(IDCHELP)     IDCAMS HELP SCREEN\n         ST    R15,HELPADD\n*\n         L     R15,COMMA3          GO COMMUNICATE\n         BALR  R14,R15\n*\n         LTR   R15,15                   BAD RC\n         BNZ   EOJ                      OUT\n*\n*\n         L     R2,TERMINPT\n*\n         CLI   0(R2),X'C3'         IS IT PF15\n         BE    IDCCMND             CONTINUE\n         CLI   0(R2),X'F3'         IS IT PF3\n         BE    IDCCMND             CONTINUE\n*\n         CLI   0(R2),X'C7'         IS IT PF19\n         BE    IDCSUP              SCROLL UP\n         CLI   0(R2),X'F7'         IS IT PF7\n         BE    IDCSUP              SCROLL UP\n*\n         CLI   0(R2),X'C8'         IS IT PF20\n         BE    IDCSDOWN            SCROLL DOWN\n         CLI   0(R2),X'F8'         IS IT PF8\n         BE    IDCSDOWN            SCROLL DOWN\n*\n         B     SHOWOUT1            JUST RESHOW THE SCREEN\n*\nIDCSUP   DS    0H\n*\n*\n         L     R1,SCROWS          PICK UP NUMBER OF ROWS\n         CLI   SPLIT,0           AM I DOING SPLIT-SCREEN?\n         BE    *+20              NOPE\n         L     R1,SCROWS1        PICK UP NUMBER OF ROWS ON SCREEN 1\n         CLI   SPLIT,1           AM I ON SCREEN 1?\n         BE    *+8               YUP\n         L     R1,SCROWS2        PICK UP NUMBER OF ROWS ON SCREEN 2\n*\n         BCTR  R1,0\n         BCTR  R1,0\n         BCTR  R1,0\n         BCTR  R1,0\n         BCTR  R1,0\n         MH    R1,H80\n         L     R7,TOPPTR\n         SR    R7,R1             POINT UP\n         B     SHOWOUT1          RE-DISPLAY AFTER SCROLL\n*\nIDCSDOWN DS    0H\n*\n*\n         L     R1,SCROWS          PICK UP NUMBER OF ROWS\n         CLI   SPLIT,0           AM I DOING SPLIT-SCREEN?\n         BE    *+20              NOPE\n         L     R1,SCROWS1        PICK UP NUMBER OF ROWS ON SCREEN 1\n         CLI   SPLIT,1           AM I ON SCREEN 1?\n         BE    *+8               YUP\n         L     R1,SCROWS2        PICK UP NUMBER OF ROWS ON SCREEN 2\n*\n         BCTR  R1,0\n         BCTR  R1,0\n         BCTR  R1,0\n         BCTR  R1,0\n         BCTR  R1,0\n         MH    R1,H80\n         L     R7,TOPPTR\n         AR    R7,R1             POINT DOWN\n         C     R7,NEXTLINE\n         BL    SHOWOUT1          RE-DISPLAY AFTER SCROLL\n*\n         L     R7,NEXTLINE\n         SR    R7,R1             POINT UP\n         B     SHOWOUT1          RE-DISPLAY AFTER SCROLL\n*\n*\nIDCPFK   DS    0H\n*\nEOJ      DS    0H\n*\n         FREEMAIN R,LV=12288,A=(9)\n*\nIDCRETRN DS    0H\n         L     R13,4(,13)               RESTORE CALLERS REGS\n         LM    R14,R12,12(R13)          RESTORE CALLERS REGS\n         BR    R14                      NORMAL RETURN\n         TITLE 'ETPS - IDCAMS COMMAND INTERFACE SCREEN'\n*\nH80      DC    H'80'\n*\nIDCAMSCR DS    0F\nIDCROW1  DC    AL1(80)\n         DC    X'05'\n         DC    CL34'   ENTER IDCAMS COMMAND BELOW -----'\n         DC    CL48'-----------------------------------------2.4    '\nIDCROW2  DC    AL1(80)\n         DC    X'05'\n         DC    CL19'COMMAND INPUT ===> '\n         DC    X'01'\nIDCHOME  EQU   *-IDCAMSCR\n         DC    X'13'                         IC\n         DC    CL58' '\nBLANK1   DC    AL1(80)\n         DC    X'04'\n         DC    CL80' '\nENDDATA  DC    AL1(80)\n         DC    X'04'\n         DC    CL20'********************'\n         DC    CL40'********************    END OF DATA'\n         DC    CL20'********************'\nIDCOUT1  DC    AL1(80)\n         DC    X'05'\n         DC    CL34'---IDCAMS SYSPRINT OUTPUT----------'\n         DC    CL48'-- (PF8=SCROLL DOWN, PF7=SCROLL UP) -----2.4    '\n*\n*\n         TITLE 'ETPS - IDCAMS COMMAND INTERFACE CONSTANTS'\n         DS    0F\nPARMTOP  EQU   *\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n*\n         DC    H'0'\n*\n         DC    H'0'\n*\n         DC    H'0'\n*\n         DC    F'2'\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n*\n         DC    CL10'DDSYSIN'\n         DC    CL10'DDSYSPRINT'\nPARMLEN  EQU   *-PARMTOP\n         LTORG\n         EJECT\nIOR      CSECT\n         USING *,12\n         STM   R14,R12,12(R13)    SAVE INPUT REGS\n         LR    R12,R15            SET BASE REGISTER\n         LR    R8,R13            SAVE R13\n         LM    R9,R11,0(R1)      PICK UP PARMS\n         ST    R9,8(R8)         STORE FORWARD   POINTER\n         ST    R8,4(R9)         STORE BACKWARD  POINTER\n*\n         LR    R13,R9\n         USING IDCSAVE,13\n         USING VFLAGS,10\n         USING VINFO,11\n*\n         CLI   VFLAG1,VOPEN\n         BE    IDCOPEN\n*\n         CLI   VFLAG1,VGET\n         BE    IDCGET\n*\n         CLI   VFLAG1,VPUT\n         BE    IDCPUT\n*\n         CLI   VFLAG1,VCLOSE\n         BE    RC0\n*\n         B     RC0              IGNORE ANYTHING ELSE\n*\n*\nIDCOPEN  DS    0H\n*\n         TM    VFLAG2,VOUTPUT\n         BO    RC0\n         MVI   IOFLAG,0\n         B     RC0\n*\nIDCGET   DS    0H\n*\n         CLI   IOFLAG,5\n         BE    RC4\n*\n         CLI   IOFLAG,0\n         BE    INCMD1\n         CLI   IOFLAG,1\n         BE    INCMD2\n         CLI   IOFLAG,2\n         BE    INCMD3\n         CLI   IOFLAG,3\n         BE    INCMD4\n         CLI   IOFLAG,4\n         BE    INCMD5\n*\n         B     RC12\n*\nINCMD1   DS    0H\n*\n         MVI   IOFLAG,1\n*\n         CLI   COMMAND1,C'*'\n         BE    INCMD2\n*\n         OC    COMMAND1(80),SPACES\n         MVI   COMMAND1-1,C' '\n         LA    R1,COMMAND1-1\n         ST    R1,VREC\n         LA    R2,80\n         ST    R2,VRECLEN\n*\n         B     RC0\n*\nINCMD2   DS    0H\n*\n         MVI   IOFLAG,2\n*\n         CLI   COMMAND2,C'*'\n         BE    INCMD3\n*\n         MVI   COMMAND2-1,C' '\n         OC    COMMAND2(80),SPACES\n         LA    R1,COMMAND2-1\n         ST    R1,VREC\n         LA    R2,80\n         ST    R2,VRECLEN\n*\n         B     RC0\n*\nINCMD3   DS    0H\n*\n         MVI   IOFLAG,3\n*\n         CLI   COMMAND3,C'*'\n         BE    INCMD4\n*\n         MVI   COMMAND3-1,C' '\n         OC    COMMAND3(80),SPACES\n         LA    R1,COMMAND3-1\n         ST    R1,VREC\n         LA    R2,80\n         ST    R2,VRECLEN\n*\n         B     RC0\n*\nINCMD4   DS    0H\n*\n         MVI   IOFLAG,4\n*\n         CLI   COMMAND4,C'*'\n         BE    INCMD5\n*\n         MVI   COMMAND4-1,C' '\n         OC    COMMAND4(80),SPACES\n         LA    R1,COMMAND4-1\n         ST    R1,VREC\n         LA    R2,80\n         ST    R2,VRECLEN\n*\n         B     RC0\n*\nINCMD5   DS    0H\n*\n         MVI   IOFLAG,5\n*\n         CLI   COMMAND5,C'*'\n         BE    RC4\n*\n         MVI   COMMAND5-1,C' '\n         OC    COMMAND5(80),SPACES\n         LA    R1,COMMAND5-1\n         ST    R1,VREC\n         LA    R2,80\n         ST    R2,VRECLEN\n*\n         B     RC0\n*\nIDCPUT   DS    0H\n*\n         L     R2,MAXLINES\n         L     R3,OUTLINES\n         L     R4,NEXTLINE\n         L     R5,VREC       RECORD ADDRESS\n         LA    R5,1(,R5)     BUMP PAST CARRIAGE CONTROL\n         L     R6,VRECLEN    RECORD LENGTH\n         BCTR  R6,0          DROP FOR CARRIAGE CONTROL\n*\n         LTR   R6,R6                            IF LENGTH 0,\n         BZ    RC0                                   SKIP IT\n*\n         BCTR  R6,0          DROP FOR EXECUTED MOVE\n         EX    R6,MOVELINE   MOVE IT TO WORKLINE\n         LA    R6,1(,R6)     RESTORE TO ACTUAL VALUE\n         LA    R5,WORKLINE   RECORD ADDRESS\n*\n         CLC   0(14,R5),=CL14'IDCAMS  SYSTEM'  IF HEADER LINE,\n         BE    RC0                                   SKIP IT\n         CLC   0(20,R5),COMMAND1                IF REPEAT OF COMMAND,\n         BE    RC0                                   SKIP IT\n         CLC   0(70,R5),SPACES                  IF BLANK LINE,\n         BE    RC0                                   SKIP IT\n*\n         LA    R3,1(,R3)     BUMP OUTPUT LINE COUNT\n         ST    R3,OUTLINES\n*\n         CR    R3,R2         IF LINE COUNT IS HIGHER THAN MAXIMUM,\n         BH    RC0           DON'T MOVE IT IN\n*\n         LA    R3,80         MAXIMUM LINE LENGTH\n         CR    R3,R6         IF RECLEN < 80,\n         BH    MOVE80        USE IT\n*\n* LOCATE FIRST NON-BLANK CHARACTER; THIS PRESERVES LEADING BLANKS\n*\n         CLI   0(R5),C' '    BLANK?\n         BNE   *+12\n         LA    R5,1(,R5)\n         B     *-12\n*\nLOOPSP1  DS    0H\n         LR    R8,R5         POINT TO START OF LINE\n         LR    R3,R6         SAVE MAX LINE LENGTH\n*\nLOOPSP2  DS    0H\n*\n* ABBREVIATE SOME OF THE PARAMETERS\n*\n         CLC   0(8,R8),=C'SHROPTNS'\n         BNE   *+14               NOPE\n         MVC   3(5,R8),ZEROS      TRUNCATE PARAMETER\n         B     LOOPSP3            BUMP\n*\n         CLC   0(10,R8),=C'NOREPLICAT'\n         BNE   *+14               NOPE\n         MVC   5(5,R8),ZEROS      TRUNCATE PARAMETER\n         B     LOOPSP3            BUMP\n*\n         CLC   0(10,R8),=C'NONSPANNED'\n         BNE   *+14               NOPE\n         MVC   5(5,R8),ZEROS      TRUNCATE PARAMETER\n         B     LOOPSP3            BUMP\n*\n         CLC   0(10,R8),=C'NOWRITECHK'\n         BNE   *+14               NOPE\n         MVC   4(6,R8),ZEROS      TRUNCATE PARAMETER\n         B     LOOPSP3            BUMP\n*\n         CLC   0(10,R8),=C'UNORDERED '\n         BNE   *+14               NOPE\n         MVC   5(4,R8),ZEROS      TRUNCATE PARAMETER\n         B     LOOPSP3            BUMP\n*\n         CLC   0(2,R8),SPACES     FIND 2 SPACES\n         BNE   LOOPSP3            NOPE\n*\n         MVI   0(R8),0            SET IT TO BINARY ZEROS\n         B     LOOPSP1            LOOP FROM THE TOP\n*\nLOOPSP3  DS    0H\n         LA    R8,1(,R8)          BUMP TO NEXT BYTE\n         BCT   R3,LOOPSP2         KEEP LOOPING\n*\nLOOPHY1  DS    0H\n         LR    R8,R5         POINT TO START OF LINE\n         LR    R3,R6         SET MAX LINE LENGTH FOR BCT\n*\nLOOPHY2  DS    0H\n         CLC   0(2,R8),HYPHENS    FIND 2 HYPHENS\n         BNE   LOOPHY3            NOPE\n*\n         MVI   0(R8),0            SET IT TO BINARY ZEROS\n         B     LOOPHY1            LOOP FROM THE TOP\n*\nLOOPHY3  DS    0H\n         LA    R8,1(,R8)          BUMP TO NEXT BYTE\n         BCT   R3,LOOPHY2         KEEP LOOPING\n*\nMOVE80   DS    0H\n         SR    R8,R8              CLEAR COUNTER\n         LA    R3,79              LOOP CONTROL\n         LA    R5,WORKLINE   RECORD ADDRESS\n*\n         MVI   0(R4),C' '    CLEAR THE LINE\n         MVC   1(79,R4),0(R4)\n         LR    R7,R4\n*\nMOVELOOP DS    0H\n         CLI   0(R5),0           BINARY ZEROS\n         BE    MOVEBUMP          JUST BUMP ADDRESS\n*\n         MVC   0(1,R7),0(R5)     MOVE 1 BYTE\n         LA    R7,1(,R7)         BUMP TARGET ADDRESS\n*\n         LA    R8,1(,R8)         BUMP COUNTER\n         CR    R8,R3             COMPARE TO 80\n         BH    MOVEDALL          MOVED AS MUCH AS I CAN\n*\nMOVEBUMP DS    0H\n         LA    R5,1(,R5)         BUMP 1 BYTE\n         BCT   R6,MOVELOOP       LOOP\n*\nMOVEDALL DS    0H\n         LA    R4,80(,R4)\n         MVI   0(R4),X'FF'\n         ST    R4,NEXTLINE\n*\n         B     RC0\n*\nMOVELINE MVC   WORKLINE(1),0(R5)\n*\nRC0      DS    0H\n*\n         SR    R15,R15\n         B     RETURN\n*\nRC4      DS    0H\n*\n         MVI   IOFLAG,5\n         LA    R15,4\n         B     RETURN\n*\nRC12     DS    0H\n*\n         LA    R15,12\n         B     RETURN\n*\nRETURN   DS    0H\n*\n         L     R13,4(,R13)  PICK UP CALLING SAVE AREA\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n*\nSPACES   DC    CL80' '\nZEROS    DC    80X'00'\nHYPHENS  DC    C'--'\n         LTORG\n*\n         EJECT\nIDCSAVE  DSECT\n         DS    18F\nEYECATCH DS    CL8\nIDCPARMS DS    XL(PARMLEN)\n*\nMAXLINES DS    F\n*\nOUTLINES DS    F\n*\nNEXTLINE DS    F\nTOPLINE  DS    F\nTOPPTR   DS    F\n*\nIOFLAG   DS    XL1\n*\n         DS    0D\nWORKLINE DS    CL150\n*\n         DS    CL1\n         DS    0D\nCOMMAND1 DS    CL80\nCOMMAND2 DS    CL80\nCOMMAND3 DS    CL80\nCOMMAND4 DS    CL80\nCOMMAND5 DS    CL80\n*\nDATALINE DS    CL80\n*\nVFLAGS   DSECT\nVFLAG1   DS    XL1\nVOPEN    EQU   X'00'\nVCLOSE   EQU   X'04'\nVGET     EQU   X'08'\nVPUT     EQU   X'0C'\nVFLAG2   DS    XL1\nVINPUT   EQU   X'80'\nVOUTPUT  EQU   X'40'\nVDDN     EQU   X'20'\nVDSN     EQU   X'10'\nVFLAG3   DS    XL1\nVFLAG4   DS    XL1\n*\nVINFO    DSECT\nVREC     DS    F\nVRECLEN  DS    F\n*\nPDSECT   DSECT\nVPARMS   DS    F\n         DS    F\n         DS    F\n         DS    F\n*\nPARMFLD  DS    H\n*\nDDNAMES  DS    H\n*\nPAGELIST DS    H\n*\nIOLIST   DS    F\n         DS    F\n         DS    F\nUPTR1    DS    F\n         DS    F\n         DS    F\nUPTR2    DS    F\n*\nIODD1    DS    CL10\nIODD2    DS    CL10\n*\n*\n*\nACBSIZ   EQU   56\nMODSIZ   EQU   36\nRPLSIZ   EQU   72\nDYNDECBL EQU   20\nGMVUL    EQU   10\n*\n         PRINT GEN\n         SPLTAREA\n         MYSAVE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         CNOP  0,8\n         TITLE 'ETPS - IDCAMS HELP SCREEN'\n*\n*\nIDCHELP  CSECT\n         DC    A(IDCHELP1)\n         DC    A(IDCBLANK)\n         DC    A(IDCHELP2)\n         DC    A(IDCHELP3)\n         DC    A(IDCHELP4)\n         DC    A(IDCBLANK)\n         DC    A(IDCHELP5)\n         DC    A(IDCHELP6)\n         DC    A(IDCBLANK)\n         DC    A(IDCHELP7)\n         DC    A(IDCHELP8)\n         DC    A(IDCHELP9+X'80000000')\nIDCHELP1 DC    AL1(80)                  ROW 01, COL 01\n         DC    X'05'                  PROTECT, HIGH-LIGHT\n         DC    24C'-'\n         DC    CL21' IDCAMS INTERFACE    '\n         DC    34C'-'\n*        123456789012345678901234567890123456789012345678901234567890\nIDCHELP2 DC    AL1(61),X'05'\n DC CL62'5 COMMAND LINES ARE PROVIDED TO ENTER AN IDCAMS COMMAND OR  '\nIDCHELP3 DC    AL1(61),X'05'\n DC CL62'    A SET OF IDCAMS COMMANDS. EACH COMMAND LINE IS PRECEEDED'\nIDCHELP4 DC    AL1(61),X'05'\n DC CL62'    BY AN ASTERISK, WHICH MAKES THE ENTIRE LINE A COMMENT.  '\nIDCHELP5 DC    AL1(61),X'05'\n DC CL62'NOTE THAT IF AN IDCAMS COMMAND REQUIRES MORE THAN ONE LINE, '\nIDCHELP6 DC    AL1(61),X'05'\n DC CL62'    YOU MUST INDICATE CONTINUATIONS WITH A HYPHEN.          '\nIDCHELP7 DC    AL1(61),X'05'\n DC CL62'EACH COMMAND LINE IS PASSED TO IDCAMS AS A CARD IMAGE, JUST '\nIDCHELP8 DC    AL1(61),X'05'\n DC CL62'    AS IF IDCAMS WAS INVOKED IN A BATCH JOB. DO NOT USE ANY '\nIDCHELP9 DC    AL1(61),X'05'\n DC CL62'    OF THE TSO COMMAND SYNTAX, THINK BATCH.                 '\nIDCBLANK DC    AL1(10),X'05',CL12' '\n         END\n/*\n//LKED1    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL,RENT',\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MVSTGT\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  SETCODE AC(1)\n     NAME ETPSIDC2(R)\n/*\n//LKED2    EXEC PGM=IEWL,PARM='XREF,LET,LIST,NCAL,RENT',\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MVSYSA\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  SETCODE AC(1)\n     NAME ETPSIDC2(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ETPSMACS": {"ttr": 7939, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x01\\xce\\x01\\xce\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 462, "newlines": 462, "modlines": 0, "user": "CBT353"}, "text": "          MACRO\n          SPLTAREA\n         TITLE 'ETPS - SAVE AREA DSECT'\n*\nSPLTAREA DSECT\n*\n*                       BROWSE WORK AREAS\n*\nJESMTTR  DS    F\nTOPMTTR  DS    F\nJESLRECL DS    H\nWRKRECFM DS    X\n*\nAIDADDR  DS    0XL2      SAVE CURSOR POSITION\nAIDROW   DS    XL1\nAIDCOL   DS    XL1\n*\nHOMEAID  DS    0XL2      \"HOME ADDRESS\" FOR CURSOR\nHAIDROW  DS    XL1\nHAIDCOL  DS    XL1\n*\nSTATUS   DS    X\nSTALLOC  EQU   X'80'\nSTOPEN   EQU   X'40'\nSTABEND  EQU   X'20'\nSTLOCAT  EQU   X'10'\nSTGMVU   EQU   X'08'\nSTRECV   EQU   X'04'\nSTEOF    EQU   X'02'\nSTNOMEM  EQU   X'01'\nMODE     DS    X\nMODEX    EQU   X'80'\nJESFLAG  DS    X\nCCFLAG   DS    X\nITISJES  EQU   X'00'\nJESRSAV1 DS    2F\nIXTJOBID DS    XL4\nTSTRECFM DS    X\nFINDSW   DS    X\nRC       DS    H\nDOUBLE   DS    D\nCOLNUM   DS    CL6\n         DS    CL2\nOPEND    DS    0F\nCLOSED   DS    F\nDYNEXLST DS    2F\nKOUNT    DS    F\nDYNDECBW DS    0F,XL(DYNDECBL)\nRANGE    DS    2F\nANSWER   DS    2F\nGMVUW    DS    0F,XL(GMVUL)\nSAVSPANL DS    F\nSAVLRECL DS    F\nHOLDTOP  DS    F\nTERMTOP  DS    F\nTERMDATA DS    F\n*\nSAVBLKSI DS    F\nSAVHOLDL DS    F\nBLOCKPTR DS    F\nSPANPTR  DS    F\nHOLDPTR  DS    F\nCHKPTTOP DS    F\nCHKPTBOT DS    F\nCHKPTDUM DS    5F\nENDPTR   DS    F\n         DS    F\nHOLDEND  DS    F\nHOLDDIR  DS    XL820\nBRDIRNUM EQU   0\nDIRLEN   EQU   4\nDIRREC   EQU   8\nDIRNXT   EQU   12\nDIRSIZ   EQU   16\nOFFSET   DS    H\nRECSIZE  DS    H\nCOUNT    DS    F\nTTR      DS    F\nTTRZ     DS    F                   TTR + 0 FOR POINT\nTTRK     DS    F                   TTR + CONCAT FOR FIND\nSCROLL   DS    F\nDOWNAMT  DS    F\nLISTNUM  DS    F\nAIMFOR   DS    F\nFLDPTR   DS    F\nFLDLEN   DS    F\nFINDCOL  DS    H\nFNDNUM   DS    F\nFNDOFF   DS    H\nSTRINGL  DS    H\nSTRING   DS    CL64\nPRESENT  EQU   X'80'\nQUOTED   EQU   X'40'\nHOLDR    DS    F\nREADR    DS    F\nDOWNR    DS    F\nDEBLOCKS DS    3F\nSCREENF  DS    F\nTGETREGS DS    3F\nSYNADSW  DS    F\nSYNADMSG DS    CL78\nDEVDATA  DS    2F\nPOOLSIZ  DS    F\nPOOLLEN  DS    2F\n*\n*                       EDITOR WORK AREAS\n*\nEDMEMADD DS    F\nEDSELMEM DS    CL8\nLASTMEM  DS    CL8\nLOCNAME  DS    CL8\nFIRSTMEM DS    CL8\n*\nDIRPOINT DS    F\nDIRNOTE  DS    F\nDIRTOP   DS    F\nEDTDSN1  DS    CL54   LAST EDIT DSNAME IN SCREEN 1\nEDTDSN1L DS    XL1    LAST EDIT DSNAME IN SCREEN 1 LENGTH\nPRIMEFLG DS    XL1 1 = DOING PRIMARY OPTION MENU\nEDTMEM1  DS    CL8    LAST EDIT MEMBER IN SCREEN1\nEDTPAS1  DS    CL8    LAST PASSWORD IN SCREEN1\nEDTVOL1  DS    CL6    LAST VOLSER IN SCREEN1\nEDTORG1  DS    CL3    LAST DSORG IN SCREEN1\nLIBORG   DS    CL3    DSORG FOR ETPSLIB2\nEDTEOF   DS    CL1    EOF FLAG FOR EDITOR\nEDTDSN   DS    CL44\nEDTMEM   DS    CL8\nEDTORG   DS    CL3\nEDTRECS  DS    F\nEDNOWLN1 DS    F\nEDTFIRST DS    F\nEDTLAST1 DS    F\nEDTCURR1 DS    F\nEDTMAIN1 DS    F\nEDTLENG1 DS    F\nEDTRPTA1 DS    F\n*\nEDDWORD  DS    D\n*\nEDFINDS  DS    XL24\nEDFINDL  DS    X\nEDCHNGS  DS    XL24\nEDCHNGL  DS    X\n*\nEDCOMMND DS    CL7\n*\nCAPSASIS DS    CL1      \"C\" = CAPS, \"A\" = ASIS\n*\nEDTDCB   DS    F\n*\n*                           ETPSLIB2 WORK AREAS\n*\nDIRDD    DS    CL8\nDIRDSN1  DS    CL54\nDIRVOL   DS    CL6\nDIRPASS  DS    CL8\nLIBFUNC  DS    CL1   FUNCTION CODE = EDIT, BROW, UTIL\nSELFUNC  DS    CL1   FUNCTION CODE = EDIT, BROW, UTIL\nDIREOFLG DS    XL1 INDICATES I HAVE HIT EOF ON A LIBRARY DIRECTORY\nDIRBUFF  DS    F\nDIRNUM   DS    F\nEDAFTSV1 DS    CL80 COPY LINE SAVE AREA\n*\nPDSKEY   DS    CL8,XL256\n*\nLIBDCBA  DS    F\nMEMDCBA  DS    F\nPRTDCBA  DS    F\nCOPDCBA  DS    F\n*\nSPLTLEN  EQU   *-SPLTAREA\n*\n*\n*\n          MEND\n          MACRO\n          MYSAVE\n         TITLE 'ETPS - MAIN SAVE AREA'\n*\n*\n*\n*\nMYSAVE   DSECT\nSAVE1    DS    18F\nSAVE2    DS    18F\nSAVE3    DS    18F\nSAVE4    DS    18F\nSPLITWRK DS    XL(SPLTLEN)\nAREALEN  EQU   *-MYSAVE\nPRISPLIT DS    16F  REGS 0-15 TO RETURN TO PRIM TO BEGIN SPLIT-SCR\nPARM43   DS    43F\nFREESIZE DS    F    SIZE OF GETMAINED AREA\nSAVETOP  DS    F    ADDR OF GETMAINED AREA\nTERMOUT  DS    44F\nTERMINPT DS    44F\n*\nCOMMA3   DS    F    EPA OF COMM3\nCOMMA4   DS    F    EPA OF COMM4\n*\nDYNWORK1 DS    F\nDYNWORK2 DS    F\nDYNRCODE DS    2F\n*\nROWFILL  DS    XL8\n*\n         DS    0F\nTUBE     DCB   DSORG=CX,MACRF=(R,W),EROPT=E,READYQ=0,DDNAME=TUBE\n         DS    0F\nTUBEIOB  DS    XL40\nRECB     DS    XL4\nCCW1     DS    D\nCCW2     DS    D\nTUBEID   DS    CL4  C'ETPS'\nTERMTYPE DS    CL1          2=3278M2, 3=3279M3, 4=3278M4\n*                           A=3278-2A\nTERMADDR DS    CL3  UNIT ADDRESS\nUSERID   DS    CL8\nUSERPASS DS    CL8\nRACGROUP DS    CL8         RACF GROUP ID\n*\nSUBACB   DS    F\n*\nSUBRPL   DS    F\n*\nSUBSUBP  DS    F\n*\nSUBRB    DS    X               LENGTH = 20\n         DS    X               DSNAME ALLOCATION\n         DS    X               FLAGS1 = ALLOW OFFLINE UNITS\n         DS    X               REST OF FLAGS1\n         DS    F               RETURN CODES\n         DS    F               POINTER TO SUBTEXT1\n         DS    F               RESERVED\n         DS    F               FLAGS2\n*\nACBWORK  DS    XL(ACBSIZ)      WORK AREA FOR GENCB ACB\nRPLWORK  DS    XL(RPLSIZ)      WORK AREA FOR GENCB RPL\nMODWORK  DS    XL(MODSIZ)      WORK AREA FOR MODCB RPL\n*\nSUBMSG1  DS    CL20            SUBMIT MESSAGE\n*\nBUFF     DS    F               ADDRESS OF OUTPUT BUFFER\nREPLY    DS    F               ADDRESS OF INPUT BUFFER\nLINES    DS    F               ADDRESS OF BLDLINES\n*\nUCBADDR  DS    F\nDEBADDR  DS    F\nSUPRMOD  DS    F\nPROBMOD  DS    F\nPACK8    DS    D\nSBACODES DS    F\nHELPADD  DS    F  ADDRESS OF HELP SCREEN\nINIT14   DS    F  SAVE AREA FOR INITIALIZATION\nLOG14    DS    F  SAVE AREA FOR LOGON\n*\nMSGADD   DS    F\nMSGBUFF  DS    CL20\n*\nSBAWORK  DS    0XL2\nSBAROW   DS    XL1\nSBACOL   DS    XL1\n*\nPERMERR  DS    XL1 PROCESSING PERM IO ERR IF NE 0\nPFKFLAG  DS    XL1 RECEIVED PFK/ATTN ON READ IF NE 0\nSPLIT    DS    XL1 1 = TOP, 2 = BOTTOM, 0 = NOT IN SPLIT-SCREEN MODE\n*\nHELPFLAG DS    CL1    HELP FLAG FOR COMM\nSBACODE  DS    XL1\nALARMWCC DS    XL1     WCC WHEN ALARM IS DESIRED\nUSUALWCC DS    XL1     WCC WHEN ALARM IS NOT DESIRED\nWCCFLAG  DS    CL1\nWRITECC  DS    XL1     WRITE CCW COMMAND CODE\n*                        SPLIT-SCREEN STUFF\nBUFFL1   DS    F                        LENGTH OF OUTPUT BUFFER1\nSCREENSZ DS    F                        SIZE OF SCREEN\nSCROWS   DS    F                        NUMBER OF ROWS ON SCREEN\nSCROWS1  DS    F                        NUMBER OF ROWS ON SCREEN 1\nSCROWS2  DS    F                        NUMBER OF ROWS ON SCREEN 2\nPARMOP   DS    F\nSEQRNUM  DS    F\n*\nDYNPARM  DS    F\n*\nDYNTEXT1 DS    F               POINTER TO DYNDDNAM\nDYNTEXT2 DS    F               POINTER TO DYNDISP\nDYNTEXT3 DS    F               POINTER TO DYNUNIT\n*\nDYNRB    DS    X 14            LENGTH = 20\nVERBCODE DS    X 01            DSNAME ALLOCATION\n         DS    X 00            FLAGS1 = ALLOW OFFLINE UNITS\n         DS    X 00            REST OF FLAGS1\n         DS    F 0             RETURN CODES\nTEXTPTRS DS    F 0             POINTER TO DYNTEXT1\n         DS    F 0             RESERVED\n         DS    F 0             FLAGS2\n*\nDYNDDNAM DS    H 0001          DDNAME=  PARAMETER\n         DS    H 0001          NUMBER OF TEXT UNITS\n         DS    H 0008          LENGTH OF PARM\nTUBEDDNM DS    CL8 TUBE        DDNAME\n*\nDYNDISP  DS    H 0004          DISP=    PARAMETER\n         DS    H 0001          NUMBER OF TEXT UNITS\n         DS    H 0001          LENGTH OF PARM\n         DS    X 01            OLD\n*\nDYNUNIT  DS    H 0015          UNIT= PARAMETER\n         DS    H 0001          NUMBER OF TEXT UNITS\n         DS    H 0003          LENGTH OF PARM\nUNITADDR DS    CL3 45B         UNIT ADDRESS\n*\nDYNLENG  EQU   *-DYNRB         LENGTH FOR MOVE\n*\n         DS    0F\nDECB     DS    XL20\n*\nCAT      DS    4F\nCATINFO  DS    CL256\nVTOC     DS    4F\nVTOCINFO DS    CL140\n*\nLIBDCB1  DS    CL96\nMEMDCB1  DS    CL96\nPRTDCB1  DS    CL96\nCOPDCB1  DS    CL96\n*\nLIBDCB2  DS    CL96\nMEMDCB2  DS    CL96\nPRTDCB2  DS    CL96\nCOPDCB2  DS    CL96\n*\n         DS    CL96  GAS INSERTED TO AVOID BROWSE OVERLAY OF SPLIT1\n*\nSPLIT100 EQU   *-MYSAVE\nSPLIT140 EQU   *-SAVE4\nSPLIT1   DS    XL(AREALEN)    SAVE AREAS 1-4 FOR SCREEN 1\n*                              OF BUFFERS\nSPLIT200 EQU   *-MYSAVE\nSPLIT240 EQU   *-SAVE4\nSPLIT2   DS    XL(AREALEN)    SAVE AREAS 1-4 FOR SCREEN 2\n*\n         DS    D\n*\nSCRNOFFS EQU   *-MYSAVE\nSCREENIO DS    XL4095   THIS IS THE PHYSICAL I/O AREA BUFFER, BUILT\n*                       BY COMM FROM THE TERMOUT AREAS, AND USED IN\n*                       THE \"WRITE\" CCW.\n*\nREPLYARE DS    XL4095   THIS IS THE PHYSICAL INPUT AREA USED BY COMM\n*                       IN THE \"READ\" CCW.\n*\nINPUTBUF DS    XL4095   THIS IS THE INTERMEDIATE AREA, BUILT BY COMM\n*                       TO REFLECT THE RESULTS OF THE READ IN PSEUDO\n*                       FULL-SCREEN FORMAT.\n*\nBLDLINES DS    XL4095   THIS IS THE INTERMEDIATE AREA, CONSTRUCTED\n*                       BY COMM FROM CALLING ROUTINE'S PARAMETER LIST.\n*\nDYNWORKS DS    XL2048   THIS IS \"DYNAM\" WORK AREA\n*\n*\n         DS    0F\nGMSIZE   EQU   *-MYSAVE\n          MEND\n          MACRO\n          DIRMASK\n         TITLE 'ETPS - DIRECTORY SCREEN FORMAT'\n*\nDIRMASK  DSECT\n         DS    XL1         LENGTH CODE\n         DS    XL2         UNPROTECTED\n         DS    XL1         SELCODE\n         DS    XL2         PROTECTED\nDIRNAME  DS    CL12        MEMBER NAME\n         DS    XL2         UNPROTECTED\n         DS    CL10        NEW NAME FOR COPY OR RENAME\n         DS    XL2         PROTECTED\n         DS    0CL56       DIRECTORY INFO\nDIRLEVEL DS    CL6\nDIRCREAT DS    CL10\nDIRMOD   DS    CL16\nDIRLINES DS    CL6\nDIRUSER  DS    CL8\n         DS    CL10        GAS\n          MEND\n          MACRO\n          SPFMT\n*\n*    SPF USER DATA\n*\nSPFMT  DSECT\nSPFVER   DS    XL1\nSPFMOD   DS    XL1\n         DS    XL2\n         DS    XL1\nSPFCRDT  DS    PL3\n         DS    XL1\nSPFMODT  DS    PL3\nSPFMODTM DS    XL2\nSPFSIZE  DS    XL2\nSPFSIZEI DS    XL2\nSPFMOD2  DS    XL2\nSPFUID   DS    CL7\n         DS    CL3\n          MEND\n          MACRO\n          PARMLIST\n         TITLE 'DYNAMIC ALLOCATION PARAMETER LIST'\nPARMLIST DSECT\nDDNAME   DS    CL8\nDSNAME   DS    CL44\nDSMEMBER DS    CL8\nPASSWORD DS    CL8\nDSSTATUS DS    CL8\nDSNDISP  DS    CL8\nDSADISP  DS    CL8\nDSUNIT   DS    CL8\n$RESERV1 DS    CL8\nDSVOLSER DS    CL6\n$RESERV2 DS    CL40\nDSVOLREF DS    CL44\nDSFREE   DS    CL8\nDSLABEL  DS    CL4\nDSINOUT  DS    CL4\n$RESERV3 DS    CL16\nDSPWDLBL DS    CL8\nDSDATE   DS    CL12\nDSALLOC  DS    CL5\nDSPRI    DS    CL6\nDSSEC    DS    CL6\nDSDIR    DS    CL5\nDSRLSE   DS    CL8\nDSCONTIG DS    CL8\nDSROUND  DS    CL8\n$RESERV4 DS    CL24\nDSBLKSI  DS    CL5\nDSORG    DS    CL8\nDSKEYLEN DS    CL3\nDSLRECL  DS    CL5\nDSRECFM  DS    0CL8\nDSRECFM1 DS    C\nDSRECFM2 DS    C\nDSRECFM3 DS    C\nDSRECFM4 DS    C\nDSRECFM5 DS    C\nDSRECFM6 DS    C\nDSRECFM7 DS    C\nDSRECFM8 DS    C\nDSDCBDS  DS    CL44\n$RESERV5 DS    CL24\nPARMEND  EQU   *\n         DS    0F\nSAVEAREA DS    18F\nREQBKPTR DS    F\nWKRTNVOL DS    F\nWKRTDSRG DS    F\n         DS    F\nDBLWORD  DS    D\n         DS    4F\nDYNWORK  DS    XL1600\nDYNWRKSZ EQU   *-SAVEAREA\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ETPSMEMC": {"ttr": 7947, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\xda\\x00\\xda\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 218, "newlines": 218, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCCPM JOB (X0002,QCC,ASQCC),'X-COOK, BRIAN',\n//   MSGCLASS=X,CLASS=X,NOTIFY=ASQCC,MSGLEVEL=(1,1)\n/*JOBPARM L=99,SYSAFF=MVSA\n//*\n//ASM     EXEC PGM=IEV90,REGION=1024K,PARM='OBJECT,NODECK,TERM'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(5,1)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nETPSMEMC TITLE 'ETPS - COPY MEMBER'\nETPSMEMC CSECT\n         USING *,12\n*\n         SAVE  (14,12),,ETPSMEMC_11/04/86_BRIAN COOK_&SYSTIME_&SYSDATE\n         LR    R12,R15            SET BASE REGISTER\n*\n         LM    R3,R10,0(R1)        R3  = INPUT DSN\n*                                  R4  = INPUT MEM\n*                                  R5  = INPUT VOLSER\n*                                  R6  = INPUT PASSWORD\n*                                  R7  = OUTPUT DSN\n*                                  R8  = OUTPUT MEM\n*                                  R9  = OUTPUT VOLSER\n*                                  R10 = OUTPUT PASSWORD\n         MVC   INDS(44),0(R3)\n         MVC   INM(8),0(R4)\n         MVC   INV(6),0(R5)\n         MVC   INP(8),0(R6)\n         MVC   OUDS(44),0(R7)\n         MVC   OUM(8),0(R8)\n         MVC   OUV(6),0(R9)\n         MVC   OUP(8),0(R10)\n*\nPROLOG   DS    0H\n         GETMAIN R,LV=4096        GET MY SAVE AREA ADDRESS\n         LR    R11,R1             SAVE GETMAIN POINTER\n         ST    R13,4(R11)         STORE BACKWARDS POINTER\n         ST    R11,8(R13)         STORE FORWARD POINTER\n         LR    R13,R11\n         USING MYSAVE,13\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n         EJECT\nALLOCATE DS    0H\n*\n         OI    INV,C' '\n         CLI   INV,C' '\n         BNE   *+10\n         XC    INVADDR(4),INVADDR\n         OI    INP,C' '\n         CLI   INP,C' '\n         BNE   *+10\n         XC    INPADDR(4),INPADDR\n*\n         LA    R1,RB99IN\n         DYNALLOC\n         L     R0,RB99IN+8\n         LTR   R5,R15\n         BZ    *+6\n         DC    H'0'\n*\n         OI    OUV,C' '\n         CLI   OUV,C' '\n         BNE   *+10\n         XC    OUVADDR(4),OUVADDR\n         OI    OUP,C' '\n         CLI   OUP,C' '\n         BNE   *+10\n         XC    OUPADDR(4),OUPADDR\n*\n         LA    R1,RB99OUT\n         DYNALLOC\n         L     R0,RB99OUT+8\n         LTR   R5,R15\n         BZ    *+6\n         DC    H'0'\n*\nOPENS    DS    0H\n*\n         MVC   SYSUT1(96),UT1   *  MOVE IN DCB'S\n         MVC   SYSUT1+40(8),INDD   INPUT DDNAME\n         MVC   SYSUT2(96),UT2   *\n         MVC   SYSUT2+40(8),OUDD  OUTPUT DDNAME\n         MVC   OPENEM(8),MFL    *  MOVE IN OPEN MAC\n         OPEN  (SYSUT1,(INPUT),SYSUT2,(OUTPUT)),MF=(E,OPENEM)\n*\n         TM    SYSUT1+48,X'10'  *  TEST FOR GOOD OPEN\n         BZ    ALLDONE          *  IF NO GOOD, LEAVE\n         TM    SYSUT2+48,X'10'  *  TEST FOR GOOD OPEN\n         BZ    ALLDONE          *  IF NO GOOD, LEAVE\n*\n         SR    R7,7             *  CLEAR RECORD COUNTER\n*\nGETLOOP  DS    0H\n         GET   SYSUT1\n         LR    R8,R1\n         PUT   SYSUT2,(8)\n         B     GETLOOP\nALLDONE  DS    0H\n         CLOSE (SYSUT1,,SYSUT2),MF=(E,OPENEM)\n         SR    R5,R5\nBADRC    DS    0H\n         L     R13,4(,R13)  PICK UP CALLING SAVE AREA\n         FREEMAIN R,LV=4096,A=(11)\n         LR    R15,R5\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\n         EJECT\nUT1      DCB   DDNAME=SYSUT1,MACRF=(GL),DSORG=PS,EODAD=ALLDONE\nUT2      DCB   DDNAME=SYSUT2,MACRF=(PM),DSORG=PS\nMFL      OPEN  (UT1,(INPUT),UT2,(OUTPUT)),MF=L\nRB99IN   DC    A(*+4+X'80000000')\n         DC    X'14010000'\n         DC    F'0'\n         DC    A(INTEXT1)\n         DC    F'0'\n         DC    F'0'\nINTEXT1  DC    A(INDDNAME)\n         DC    A(INDSNAME)\n         DC    A(INMEM)\n         DC    A(DISPSHR)\n         DC    A(FREECLOS)\nINVADDR  DC    A(INVOLSER)\nINPADDR  DC    A(INPASS)\n         DC    A(DISPKEEP+X'80000000')\nRB99OUT  DC    A(*+4+X'80000000')\n         DC    X'14010000'\n         DC    F'0'\n         DC    A(OUTEXT1)\n         DC    F'0'\n         DC    F'0'\nOUTEXT1  DC    A(OUDDNAME)\n         DC    A(OUDSNAME)\n         DC    A(FREECLOS)\n         DC    A(OUMEM)\n         DC    A(DISPSHR)\nOUVADDR  DC    A(OUVOLSER)\nOUPADDR  DC    A(OUPASS)\n         DC    A(DISPKEEP+X'80000000')\nINDDNAME DC    X'0055',H'1',H'8'\nINDD     DC    CL8' '\nINDSNAME DC    X'0002',H'1',H'44'\nINDS     DC    CL44' '\nINMEM    DC    X'0003',H'1',H'8'\nINM      DC    CL8' '\nINVOLSER DC    X'0010',H'1',H'6'\nINV      DC    CL6' '\nINPASS   DC    X'0050',H'1',H'8'\nINP      DC    CL8' '\nDISPSHR  DC    X'0004',H'1',H'1',X'0800'\nDISPKEEP DC    X'0005',H'1',H'1',X'0800'\nFREECLOS DC    X'001C',H'0'\nOUDDNAME DC    X'0055',H'1',H'8'\nOUDD     DC    CL8' '\nOUDSNAME DC    X'0002',H'1',H'44'\nOUDS     DC    CL44' '\nOUMEM    DC    X'0003',H'1',H'8'\nOUM      DC    CL8' '\nOUVOLSER DC    X'0010',H'1',H'6'\nOUV      DC    CL6' '\nOUPASS   DC    X'0050',H'1',H'8'\nOUP      DC    CL8' '\n         DS    0F\n         EJECT\nMYSAVE   DSECT\n         DS    18F\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=(GL),DSORG=PS\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=(PM),DSORG=PS\nOPENEM   OPEN  (UT1,(INPUT),UT2,(OUTPUT)),MF=L\nDWORK    DS    D\n         END\n/*\n//LKED1    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,REUS,TERM),\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD   DDNAME=SYSIN\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MVSTGT\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  SETCODE AC(1)\n     NAME ETPSMEMC(R)\n/*\n//LKED2    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,REUS,TERM),\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD   DDNAME=SYSIN\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.LINKLIB,UNIT=SYSDA,VOL=SER=MVSYSA\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  SETCODE AC(1)\n     NAME ETPSMEMC(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ETPSMNEW": {"ttr": 8196, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x01\\xc3\\x01\\xc3\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 451, "newlines": 451, "modlines": 0, "user": "CBT353"}, "text": "          MACRO\n          SPLTAREA\n         TITLE 'ETPS - SAVE AREA DSECT'\n*\nSPLTAREA DSECT\n*\n*                       BROWSE WORK AREAS\n*\nJESMTTR  DS    F\nTOPMTTR  DS    F\nJESLRECL DS    H\nWRKRECFM DS    X\n*\nSTATUS   DS    X\nSTALLOC  EQU   X'80'\nSTOPEN   EQU   X'40'\nSTABEND  EQU   X'20'\nSTLOCAT  EQU   X'10'\nSTGMVU   EQU   X'08'\nSTRECV   EQU   X'04'\nSTEOF    EQU   X'02'\nSTNOMEM  EQU   X'01'\nMODE     DS    X\nMODEX    EQU   X'80'\nJESFLAG  DS    X\nCCFLAG   DS    X\nITISJES  EQU   X'00'\nJESRSAV1 DS    2F\nIXTJOBID DS    XL4\nTSTRECFM DS    X\nFINDSW   DS    X\nRC       DS    H\nDOUBLE   DS    D\nCOLNUM   DS    CL6\n         DS    CL2\nOPEND    DS    0F\nCLOSED   DS    F\nDYNEXLST DS    2F\nKOUNT    DS    F\nDYNDECBW DS    0F,XL(DYNDECBL)\nRANGE    DS    2F\nANSWER   DS    2F\nGMVUW    DS    0F,XL(GMVUL)\nSAVSPANL DS    F\nSAVLRECL DS    F\nHOLDTOP  DS    F\nTERMTOP  DS    F\nTERMDATA DS    F\n*\nSAVBLKSI DS    F\nSAVHOLDL DS    F\nBLOCKPTR DS    F\nSPANPTR  DS    F\nHOLDPTR  DS    F\nCHKPTTOP DS    F\nCHKPTBOT DS    F\nCHKPTDUM DS    5F\nENDPTR   DS    F\n         DS    F\nHOLDEND  DS    F\nHOLDDIR  DS    XL820\nBRDIRNUM EQU   0\nDIRLEN   EQU   4\nDIRREC   EQU   8\nDIRNXT   EQU   12\nDIRSIZ   EQU   16\nOFFSET   DS    H\nRECSIZE  DS    H\nCOUNT    DS    F\nTTR      DS    F\nTTRZ     DS    F                   TTR + 0 FOR POINT\nTTRK     DS    F                   TTR + CONCAT FOR FIND\nSCROLL   DS    F\nDOWNAMT  DS    F\nLISTNUM  DS    F\nAIMFOR   DS    F\nFLDPTR   DS    F\nFLDLEN   DS    F\nFINDCOL  DS    H\nFNDNUM   DS    F\nFNDOFF   DS    H\nSTRINGL  DS    H\nSTRING   DS    CL64\nPRESENT  EQU   X'80'\nQUOTED   EQU   X'40'\nHOLDR    DS    F\nREADR    DS    F\nDOWNR    DS    F\nDEBLOCKS DS    3F\nSCREENF  DS    F\nTGETREGS DS    3F\nSYNADSW  DS    F\nSYNADMSG DS    CL78\nDEVDATA  DS    2F\nPOOLSIZ  DS    F\nPOOLLEN  DS    2F\n*\n*                       EDITOR WORK AREAS\n*\nEDMEMADD DS    F\nEDSELMEM DS    CL8\nLASTMEM  DS    CL8\nLOCNAME  DS    CL8\nFIRSTMEM DS    CL8\n*\nDIRPOINT DS    F\nDIRNOTE  DS    F\nDIRTOP   DS    F\nEDTDSN1  DS    CL54   LAST EDIT DSNAME IN SCREEN 1\nEDTDSN1L DS    XL1    LAST EDIT DSNAME IN SCREEN 1 LENGTH\nPRIMEFLG DS    XL1 1 = DOING PRIMARY OPTION MENU\nEDTMEM1  DS    CL8    LAST EDIT MEMBER IN SCREEN1\nEDTPAS1  DS    CL8    LAST PASSWORD IN SCREEN1\nEDTVOL1  DS    CL6    LAST VOLSER IN SCREEN1\nEDTORG1  DS    CL3    LAST DSORG IN SCREEN1\nLIBORG   DS    CL3    DSORG FOR ETPSLIB2\nEDTEOF   DS    CL1    EOF FLAG FOR EDITOR\nEDTDSN   DS    CL44\nEDTMEM   DS    CL8\nEDTORG   DS    CL3\nEDTRECS  DS    F\nEDNOWLN1 DS    F\nEDTFIRST DS    F\nEDTLAST1 DS    F\nEDTCURR1 DS    F\nEDTMAIN1 DS    F\nEDTLENG1 DS    F\nEDTRPTA1 DS    F\n*\nEDDWORD  DS    D\n*\nEDFINDS  DS    XL24\nEDFINDL  DS    X\nEDCHNGS  DS    XL24\nEDCHNGL  DS    X\n*\nEDCOMMND DS    CL7\n*\nCAPSASIS DS    CL1      \"C\" = CAPS, \"A\" = ASIS\n*\nEDTDCB   DS    F\n*\n*                           ETPSLIB2 WORK AREAS\n*\nDIRDD    DS    CL8\nDIRDSN1  DS    CL54\nDIRVOL   DS    CL6\nDIRPASS  DS    CL8\nLIBFUNC  DS    CL1   FUNCTION CODE = EDIT, BROW, UTIL\nSELFUNC  DS    CL1   FUNCTION CODE = EDIT, BROW, UTIL\nDIREOFLG DS    XL1 INDICATES I HAVE HIT EOF ON A LIBRARY DIRECTORY\nDIRBUFF  DS    F\nDIRNUM   DS    F\nEDAFTSV1 DS    CL80 COPY LINE SAVE AREA\n*\nPDSKEY   DS    CL8,XL256\n*\nLIBDCBA  DS    F\nMEMDCBA  DS    F\nPRTDCBA  DS    F\nCOPDCBA  DS    F\n*\nAID      DS    CL8              LAST THING ENTERED\nCURSOLD  DS    XL2              ROW AND COLUMN\nCURSNEW  DS    XL2              ROW AND COLUMN\nTERMINAL DS    XL3440           3278-4, 43X80\n*\nSPLTLEN  EQU   *-SPLTAREA\n*\n*\n*\n          MEND\n          MACRO\n          MYSAVE\n         TITLE 'ETPS - MAIN SAVE AREA'\n*\n*\n*\n*\nMYSAVE   DSECT\nSAVE1    DS    18F\nSAVE2    DS    18F\nSAVE3    DS    18F\nSAVE4    DS    18F\nSPLITWRK DS    XL(SPLTLEN)\nAREALEN  EQU   *-MYSAVE\nPRISPLIT DS    16F  REGS 0-15 TO RETURN TO PRIM TO BEGIN SPLIT-SCR\n*ARM43   DS    43F\nFREESIZE DS    F    SIZE OF GETMAINED AREA\nSAVETOP  DS    F    ADDR OF GETMAINED AREA\n*\nCOMMA3   DS    F    EPA OF COMM3\nCOMMA4   DS    F    EPA OF COMM4\n*\nDYNWORK1 DS    F\nDYNWORK2 DS    F\nDYNRCODE DS    2F\n*\nROWFILL  DS    XL8\n*\n         DS    0F\nTUBE     DCB   DSORG=CX,MACRF=(R,W),EROPT=E,READYQ=0,DDNAME=TUBE\n         DS    0F\nTUBEIOB  DS    XL40\nRECB     DS    XL4\nCCW1     DS    D\nCCW2     DS    D\nTUBEID   DS    CL4  C'ETPS'\nTERMTYPE DS    CL1          2=3278M2, 3=3279M3, 4=3278M4\n*                           A=3278-2A\nTERMADDR DS    CL3  UNIT ADDRESS\nUSERID   DS    CL8\nUSERPASS DS    CL8\nRACGROUP DS    CL8         RACF GROUP ID\n*\nSUBACB   DS    F\n*\nSUBRPL   DS    F\n*\nSUBSUBP  DS    F\n*\nSUBRB    DS    X               LENGTH = 20\n         DS    X               DSNAME ALLOCATION\n         DS    X               FLAGS1 = ALLOW OFFLINE UNITS\n         DS    X               REST OF FLAGS1\n         DS    F               RETURN CODES\n         DS    F               POINTER TO SUBTEXT1\n         DS    F               RESERVED\n         DS    F               FLAGS2\n*\nACBWORK  DS    XL(ACBSIZ)      WORK AREA FOR GENCB ACB\nRPLWORK  DS    XL(RPLSIZ)      WORK AREA FOR GENCB RPL\nMODWORK  DS    XL(MODSIZ)      WORK AREA FOR MODCB RPL\n*\nSUBMSG1  DS    CL20            SUBMIT MESSAGE\n*\nBUFF     DS    F               ADDRESS OF OUTPUT BUFFER\nREPLY    DS    F               ADDRESS OF INPUT BUFFER\nLINES    DS    F               ADDRESS OF BLDLINES\n*\nUCBADDR  DS    F\nDEBADDR  DS    F\nSUPRMOD  DS    F\nPROBMOD  DS    F\nPACK8    DS    D\nSBACODES DS    F\nHELPADD  DS    F  ADDRESS OF HELP SCREEN\nINIT14   DS    F  SAVE AREA FOR INITIALIZATION\nLOG14    DS    F  SAVE AREA FOR LOGON\n*\nMSGADD   DS    F\nMSGBUFF  DS    CL20\n*\nSBAWORK  DS    0XL2\nSBAROW   DS    XL1\nSBACOL   DS    XL1\n*\nAIDADDR  DS    0XL2      SAVE CURSOR POSITION\nAIDROW   DS    XL1\nAIDCOL   DS    XL1\n*\nPERMERR  DS    XL1 PROCESSING PERM IO ERR IF NE 0\nPFKFLAG  DS    XL1 RECEIVED PFK/ATTN ON READ IF NE 0\nSPLIT    DS    XL1 1 = TOP, 2 = BOTTOM, 0 = NOT IN SPLIT-SCREEN MODE\n*\nHELPFLAG DS    CL1    HELP FLAG FOR COMM\nSBACODE  DS    XL1\nALARMWCC DS    XL1     WCC WHEN ALARM IS DESIRED\nUSUALWCC DS    XL1     WCC WHEN ALARM IS NOT DESIRED\nWCCFLAG  DS    CL1\nWRITECC  DS    XL1     WRITE CCW COMMAND CODE\n*                        SPLIT-SCREEN STUFF\nBUFFL1   DS    F                        LENGTH OF OUTPUT BUFFER1\nSCREENSZ DS    F                        SIZE OF SCREEN\nSCROWS   DS    F                        NUMBER OF ROWS ON SCREEN\nSCROWS1  DS    F                        NUMBER OF ROWS ON SCREEN 1\nSCROWS2  DS    F                        NUMBER OF ROWS ON SCREEN 2\nPARMOP   DS    F\nSEQRNUM  DS    F\n*\nDYNPARM  DS    F\n*\nDYNTEXT1 DS    F               POINTER TO DYNDDNAM\nDYNTEXT2 DS    F               POINTER TO DYNDISP\nDYNTEXT3 DS    F               POINTER TO DYNUNIT\n*\nDYNRB    DS    X 14            LENGTH = 20\nVERBCODE DS    X 01            DSNAME ALLOCATION\n         DS    X 00            FLAGS1 = ALLOW OFFLINE UNITS\n         DS    X 00            REST OF FLAGS1\n         DS    F 0             RETURN CODES\nTEXTPTRS DS    F 0             POINTER TO DYNTEXT1\n         DS    F 0             RESERVED\n         DS    F 0             FLAGS2\n*\nDYNDDNAM DS    H 0001          DDNAME=  PARAMETER\n         DS    H 0001          NUMBER OF TEXT UNITS\n         DS    H 0008          LENGTH OF PARM\nTUBEDDNM DS    CL8 TUBE        DDNAME\n*\nDYNDISP  DS    H 0004          DISP=    PARAMETER\n         DS    H 0001          NUMBER OF TEXT UNITS\n         DS    H 0001          LENGTH OF PARM\n         DS    X 01            OLD\n*\nDYNUNIT  DS    H 0015          UNIT= PARAMETER\n         DS    H 0001          NUMBER OF TEXT UNITS\n         DS    H 0003          LENGTH OF PARM\nUNITADDR DS    CL3 45B         UNIT ADDRESS\n*\nDYNLENG  EQU   *-DYNRB         LENGTH FOR MOVE\n*\n         DS    0F\nDECB     DS    XL20\n*\nCAT      DS    4F\nCATINFO  DS    CL256\nVTOC     DS    4F\nVTOCINFO DS    CL140\n*\nLIBDCB1  DS    CL96\nMEMDCB1  DS    CL96\nPRTDCB1  DS    CL96\nCOPDCB1  DS    CL96\n*\nLIBDCB2  DS    CL96\nMEMDCB2  DS    CL96\nPRTDCB2  DS    CL96\nCOPDCB2  DS    CL96\n*\n         DS    CL96  GAS INSERTED TO AVOID BROWSE OVERLAY OF SPLIT1\n*\nSPLIT100 EQU   *-MYSAVE\nSPLIT140 EQU   *-SAVE4\nSPLIT1   DS    XL(AREALEN)    SAVE AREAS 1-4 FOR SCREEN 1\n*                              OF BUFFERS\nSPLIT200 EQU   *-MYSAVE\nSPLIT240 EQU   *-SAVE4\nSPLIT2   DS    XL(AREALEN)    SAVE AREAS 1-4 FOR SCREEN 2\n*\n         DS    0D\n*\nSCRNOFFS EQU   *-MYSAVE\nSCREENIO DS    XL4095   THIS IS THE PHYSICAL I/O AREA BUFFER, BUILT\n*                       BY COMM FROM THE TERMOUT AREAS, AND USED IN\n*                       THE \"WRITE\" CCW.\n*\nDYNWORKS DS    XL2048   THIS IS \"DYNAM\" WORK AREA\n*\n*\n         DS    0F\nGMSIZE   EQU   *-MYSAVE\n          MEND\n          MACRO\n          DIRMASK\n         TITLE 'ETPS - DIRECTORY SCREEN FORMAT'\n*\nDIRMASK  DSECT\n         DS    XL1         LENGTH CODE\n         DS    XL2         UNPROTECTED\n         DS    XL1         SELCODE\n         DS    XL2         PROTECTED\nDIRNAME  DS    CL12        MEMBER NAME\n         DS    XL2         UNPROTECTED\n         DS    CL10        NEW NAME FOR COPY OR RENAME\n         DS    XL2         PROTECTED\n         DS    0CL56       DIRECTORY INFO\nDIRLEVEL DS    CL6\nDIRCREAT DS    CL10\nDIRMOD   DS    CL16\nDIRLINES DS    CL6\nDIRUSER  DS    CL8\n         DS    CL10        GAS\n          MEND\n          MACRO\n          SPFMT\n*\n*    SPF USER DATA\n*\nSPFMT  DSECT\nSPFVER   DS    XL1\nSPFMOD   DS    XL1\n         DS    XL2\n         DS    XL1\nSPFCRDT  DS    PL3\n         DS    XL1\nSPFMODT  DS    PL3\nSPFMODTM DS    XL2\nSPFSIZE  DS    XL2\nSPFSIZEI DS    XL2\nSPFMOD2  DS    XL2\nSPFUID   DS    CL7\n         DS    CL3\n          MEND\n          MACRO\n          PARMLIST\n         TITLE 'DYNAMIC ALLOCATION PARAMETER LIST'\nPARMLIST DSECT\nDDNAME   DS    CL8\nDSNAME   DS    CL44\nDSMEMBER DS    CL8\nPASSWORD DS    CL8\nDSSTATUS DS    CL8\nDSNDISP  DS    CL8\nDSADISP  DS    CL8\nDSUNIT   DS    CL8\n$RESERV1 DS    CL8\nDSVOLSER DS    CL6\n$RESERV2 DS    CL40\nDSVOLREF DS    CL44\nDSFREE   DS    CL8\nDSLABEL  DS    CL4\nDSINOUT  DS    CL4\n$RESERV3 DS    CL16\nDSPWDLBL DS    CL8\nDSDATE   DS    CL12\nDSALLOC  DS    CL5\nDSPRI    DS    CL6\nDSSEC    DS    CL6\nDSDIR    DS    CL5\nDSRLSE   DS    CL8\nDSCONTIG DS    CL8\nDSROUND  DS    CL8\n$RESERV4 DS    CL24\nDSBLKSI  DS    CL5\nDSORG    DS    CL8\nDSKEYLEN DS    CL3\nDSLRECL  DS    CL5\nDSRECFM  DS    0CL8\nDSRECFM1 DS    C\nDSRECFM2 DS    C\nDSRECFM3 DS    C\nDSRECFM4 DS    C\nDSRECFM5 DS    C\nDSRECFM6 DS    C\nDSRECFM7 DS    C\nDSRECFM8 DS    C\nDSDCBDS  DS    CL44\n$RESERV5 DS    CL24\nPARMEND  EQU   *\n         DS    0F\nSAVEAREA DS    18F\nREQBKPTR DS    F\nWKRTNVOL DS    F\nWKRTDSRG DS    F\n         DS    F\nDBLWORD  DS    D\n         DS    4F\nDYNWORK  DS    XL1600\nDYNWRKSZ EQU   *-SAVEAREA\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ETPSTSO": {"ttr": 8204, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00U\\x00U\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 85, "newlines": 85, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCTSO JOB (X0002,QCC,ASQCC),'X-COOK, BRIAN',\n//   MSGCLASS=X,CLASS=X,NOTIFY=ASQCC,MSGLEVEL=(1,1)\n/*JOBPARM L=99,SYSAFF=MVSB\n//*\n//ASM     EXEC PGM=IEV90,\n//        PARM='OBJECT,NODECK,TERM,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nETPSTSO  CSECT\n         USING *,12\n*\n         SAVE  (14,12),,ETPSTSO_09/27/84_BRIAN_COOK_&SYSDATE_&SYSTIME\n*\n         LR    R12,R15            SET BASE REGISTER\n         LR    R2,R1              SAVE PARMS\n         GETMAIN R,LV=320         GET MY SAVE AREA ADDRESS\n         LR    R11,R1             SAVE GETMAIN POINTER\n         ST    R13,4(R11)         STORE BACKWARDS POINTER\n         ST    R11,8(R13)         STORE FORWARD POINTER\n         LR    R13,R11\n         USING MYSAVE,13\n         SR    R3,3\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n         EJECT\nBEGIN    DS    0H\n         LOAD  EP=ETPS23\n         LR    R3,R0            * SAVE EPA\n*\n         LA    R1,PARMADD       * RESET PARM REG\n         LR    R15,R3           * SET EPA\n         BALR  R14,R15          * BRANCH\n*\n        DELETE EP=ETPS23\n         SR    R3,3\n*\nRETURN   DS    0H\n         L     R13,4(,R13)  PICK UP CALLING SAVE AREA\n         FREEMAIN R,LV=320,A=(11)\n         LR    R15,R3\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         EJECT\nPARMADD  DC    A(ETPSPARM)\nETPSPARM DC    H'8',CL8'TSO'\n         EJECT\nMYSAVE   DSECT\n         DS    18F\n         END\n/*\n//LKED1    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL,RENT),\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD   DDNAME=SYSIN\n//SYSLMOD  DD   DISP=SHR,DSN=ASQCC.TEST.STEPLIB\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n     NAME ET23(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IGC0023E": {"ttr": 8451, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x003\\x003\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCSVC  JOB (X0041,QCC,ASQCC),'BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=99\n//*\n//JOBLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR,\n//         UNIT=SYSDA,VOL=SER=MVSTGT\n//*\n//ASM     EXEC PGM=IEV90,\n//        REGION=2048K,\n//        PARM='OBJECT,NODECK,TERM,RENT,XREF(SHORT)'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,\n//         UNIT=SYSDA,VOL=SER=MVSTGT\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR,\n//         UNIT=SYSDA,VOL=SER=MVSDLB\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSSQ,SPACE=(80,(200,50)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nIGC0023E CSECT\n         USING *,6\n         USING TCB,4\n         L     2,TCBJSCB  PICK UP CALLER'S JSCB\n         USING IEZJSCB,2\n         LTR   0,0           R0 EQ 0 REQUESTS AUTH OFF\n         BZ    AUTHOFF\nAUTHON   OI    JSCBOPTS,X'01' SET AUTH ON\n         BR    14\nAUTHOFF  NI    JSCBOPTS,X'FE' SET AUTH OFF\n         BR    14\n DC C'IGC0023E_SVC_235_AUTHON_AUTHOFF_BRIAN_COOK_&SYSTIME_&SYSDATE'\n         CNOP  0,8\n         IKJTCB\n         IEZJSCB\n         END\n/*\n//LKED     EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL,RENT,REFR,REUS),\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSLMOD  DD   DSN=SYS1.LPALIB,DISP=SHR,UNIT=3380,VOL=SER=MVSTGT\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n     NAME IGC0023E(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IGC0023F": {"ttr": 8453, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\xaa\\x00\\xaa\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 170, "newlines": 170, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCSVC  JOB (X0041,QCC,ASQCC),'X-BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=99\n//*\n//*  TECH.XA.SOURCE   (IGC0023F)\n//*\n//JOBLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR,\n//         UNIT=3380,VOL=SER=MVSTGT\n//*\n//ASM1    EXEC PGM=IEV90,REGION=1024K,\n//        PARM='OBJECT,NODECK,TERM,XREF(SHORT),RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,\n//         UNIT=3380,VOL=SER=MVSTGT\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR,\n//         UNIT=3380,VOL=SER=MVSDLB\n//         DD  DSN=SYS2.MACLIB,DISP=SHR    <== CVTUSERS\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSUT2   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSUT3   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(5,5)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nSUPERSVC TITLE 'SVC ROUTER--USER ESR'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                 USER SVC INTERFACE                                  *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: INVOKE MULTIPLE USER SVC FUNCTIONS                        *\n*                                                                     *\n*                                                                     *\n* FUNCTION: THIS IS DESIGNED TO BE INVOKED FROM ANY ASSEMBLER         *\n*           PROGRAM.                                                  *\n*                                                                     *\n*           IT PROVIDES FUNCTION SIMILAR TO AN ESR SVC.               *\n*                                                                     *\n*           IT INVOKES USER SVC FUNCTIONS BASED ON A ROUTE CODE SET   *\n*           IN REGISTER 15. THE USER SVC'S MUST PREVIOUSLY HAVE BEEN  *\n*           LOADED INTO CSA, AND THEIR EPA ADDRESSES PLACED IN AN     *\n*           SVC TABLE LOCATED IN THE CVTUSER AREA. THE LOADER PROGRAM *\n*           IS \"LOADSVCS\"--SEE THE SOURCE CODE FOR DOCUMENTATION.     *\n*                                                                     *\n*           THE USER SVC'S THAT ARE INVOKED RECEIVE CONTROL JUST AS   *\n*           THOUGH THEY WERE INVOKED AS INDIVIDUAL TYPE 3/ SVC'S.     *\n*                                                                     *\n*                                                                     *\n* INVOKING:                                                           *\n*                                                                     *\n*         LA    R15,04       <== SPECIAL ROUTE CODE                   *\n*         SVC   236          <== THIS SVC NUMBER                      *\n*                                                                     *\n*         NOTE: THE CONTENTS OF R0 AND R1 ARE PASSED WITHOUT CHANGE   *\n*               TO THE USER SVC FUNCTION. INTERFACE REQUIREMENTS ARE  *\n*               DEPENDENT ON THE USER SVC FUNCTION, NOT THIS MODULE,  *\n*               WHICH ONLY DOES ROUTING.                              *\n*                                                                     *\n* OUTPUT:                                                             *\n*                                                                     *\n*         NONE. THE OUTPUT IS BASED ON THE OUTPUT OF THE USER SVC     *\n*               FUNCTION. THE ONLY ERROR RETURN CODES SET BY THIS     *\n*               SVC ROUTER PROGRAM ARE:                               *\n*                                                                     *\n*               512 -- REQUESTED USER SVC FUNCTION NOT IN CVTUSER TAB *\n*               516 -- CVTUSER AREA NOT AVAILABLE.                    *\n*               520 -- CVTUSER AREA NOT FORMATTED PROPERLY.           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCE: EACH USER SVC FUNCTION.                         *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* CHANGE LOG:                                                         *\n*                                                                     *\n*   2/07/85  BRIAN COOK.     INITIAL ENTRY.                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nIGC0023F CSECT\n         USING *,12\n         LR    R12,R6         SET SVC BASE REGISTER\n         B     START\n         DC  C'IGC0023F_SUPERSVC_02/07/86_BRIAN COOK_&SYSTIME_&SYSDATE'\nSTART    DS    0H\n         USING PSA,0\n         L     R6,FLCCVT      POINT TO CVT\n         USING CVT,6\n         L     R6,CVTUSER     POINT TO CVT USER AREA\n*\n         USING CVTUSERS,6\n         LTR   R6,R6\n         BZ    RC516\n*\n         CLI   CVTULABL,C'C'      LOOKING FOR LITERAL \"CVTUSER\"\n         BNE   RC520\n         CLI   CVTULABL+1,C'V'\n         BNE   RC520\n         CLI   CVTULABL+2,C'T'\n         BNE   RC520\n         CLI   CVTULABL+3,C'U'\n         BNE   RC520\n*\n         L     R6,CVTUSVCT(R15)   SET EPA IN REG 6\n         LTR   R6,R6\n         BNZR  R6\nRC512    DS    0H\n         LA    R15,512            SET BAD RETURN CODE\n         BR    R14                RETURN\n*\nRC516    DS    0H\n         LA    R15,516            SET BAD RETURN CODE\n         BR    R14                RETURN\n*\nRC520    DS    0H\n         LA    R15,520            SET BAD RETURN CODE\n         BR    R14                RETURN\n*\n*\n*\n*\n         CVTUSERS\n         PRINT NOGEN\n         IHAPSA\n         CVT   DSECT=YES\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         END\n/*\n//LKED1    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,TERM,RENT),\n//            COND=(2,LT,ASM1),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSLMOD  DD   DISP=SHR,DSN=SYS1.LPALIB,\n//         UNIT=3380,VOL=SER=MVSTGT\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n     NAME IGC0023F(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IGC0024G": {"ttr": 8457, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x024\\x024\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 564, "newlines": 564, "modlines": 0, "user": "CBT353"}, "text": "//ASYSFSVC JOB (X0002,YSF,ASYSF),'X-CITTADINO, MIKE',CLASS=X,\n//         MSGCLASS=X\n//ASSEMBLY EXEC PGM=IEV90,\n//            REGION=2048K,\n//            PARM='LINECOUNT(55),DECK,NOOBJECT,ALIGN,TERM,RENT'\n//SYSLIB   DD  DSN=SYS1.AMACLIB,DISP=SHR,DCB=(BLKSIZE=19040)\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS3.ACF2R41.ACFMAC,DISP=SHR\n//SYSLIN   DD  DUMMY\n//SYSGO    DD  DUMMY\n//SYSPUNCH DD  DSN=&&SYSPUNCH(IGC0024G),\n//            UNIT=SYSDA,\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),\n//            SPACE=(TRK,(5,5,1)),\n//            DISP=(NEW,PASS)\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(CYL,(3,1))\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSIN    DD  *\nIGC0024G TITLE 'IGC0024G - PROGRAM ABSTRACT'\n         PRINT ON,NOGEN,NODATA\n         SPACE 3\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        * * * * * * * * * * * * * * * * * * * * * * * * * * *        *\n*        *                                                   *        *\n*        * FUNCTION : TO PREFORM ACCESS VALIDATION OF ACF2   *        *\n*        *            GENERALIZED RESOURCES (GRS).           *        *\n*        *                                                   *        *\n*        * INPUT    : A STANDARD CALL FORMAT PARMLIST IS     *        *\n*        *            PASSED IN REGISTER 1.                  *        *\n*        *                                                   *        *\n*        *            1. ONE BYTE OF OPTION SWITCHES         *        *\n*        *             X'80' - IF THIS BIT IS SET THE RETURN *        *\n*        *                     CODE WILL INDICATE IF A RULE  *        *\n*        *                     EXISTS FOR THE SUPPLIED GRS   *        *\n*        *                     TYPE/NAME COMBINATION.        *        *\n*        *                                                   *        *\n*        *             X'40' - IF THIS BIT IS SET VALIDATION *        *\n*        *                     FAILURES WILL BE LOGGED BY    *        *\n*        *                     ACF2.                         *        *\n*        *                                                   *        *\n*        *             X'20' - IF THIS BIT IS SET ANY ACF2   *        *\n*        *                     ERROR MESSAGES ASSOCIATED     *        *\n*        *                     WITH RC=8 FROM A VALIDATION   *        *\n*        *                     REQUEST WILL BE OUTPUT AS     *        *\n*        *                     WTO MESSAGES.                 *        *\n*        *                                                   *        *\n*        *             X'08' - VALIDATE ADD ACCESS           *        *\n*        *             X'04' - VALIDATE DELETE ACCESS        *        *\n*        *             X'02' - VALIDATE UPDATE ACCESS        *        *\n*        *             X'01' - VALIDATE READ ACCESS (DEFAULT)*        *\n*        *                                                   *        *\n*        *            2. USERID TO BE VALIDATED. THIS PARM   *        *\n*        *               IS PASSED AS A CL8 STRING LEFT PAD- *        *\n*        *               DED WITH BLANKS.                    *        *\n*        *                                                   *        *\n*        *            3. CL3 GRS RESOURCE TYPE CODE          *        *\n*        *                                                   *        *\n*        *            4. THE GRS RESOURCE NAME. THIS PARM MAY*        *\n*        *               BE PASSED AS A CL40 STRING LEFT PAD-*        *\n*        *               ED WITH BLANKS OR AS A VARIABLE LEN.*        *\n*        *               STRING WITH THE FIRST BYTE INDICAT- *        *\n*        *               ING THE COUNT OF CHARACTERS 1-40.   *        *\n*        *                                                   *        *\n*        * OUTPUT   : UPON RETURN REGISTER 15 CONTAINS ONE   *        *\n*        *            OF THE FOLLOWING RETURN CODES.         *        *\n*        *                                                   *        *\n*        *            0 - USERID IS AUTHORIZED FOR ACCESS TO *        *\n*        *                THE RESOURCE OR RULE EXISTS.       *        *\n*        *                                                   *        *\n*        *            4 - USERID IS NOT AUTHORIZED FOR ACCESS*        *\n*        *                TO THE RESOURCE OR NO RULE FOUND.  *        *\n*        *                                                   *        *\n*        *            8 - AN ERROR OCCURED DURING PROCESSING *        *\n*        *                OF THE VALIDATION REQUEST.         *        *\n*        *                                                   *        *\n*        * * * * * * * * * * * * * * * * * * * * * * * * * * *        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         TITLE 'IGC0024G - PROGRAM INITALIZATION'\nIGC0024G CSECT\n         SPACE 1\n*        *     *                  GENERAL REGISTER EQUATES\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nLINKREG  EQU   R7\n         SPACE 1\n         USING IGC0024G,R6         DECLARE PROGRAM BASE REGISTER\n         SPACE 1\n         LR    R11,R14             SAVE RETURN ADDRESS\n         LR    R2,R1               SAVE PARMLIST ADDRESS\n         L     R1,0(,R1)           ADDRESS OPTION BYTE\n         TM    0(R1),OPTVER        VERIFY ACCESS RULE EXISTS\n         BO    NOLOGWA             YES, BRANCH\n         TM    0(R1),OPTLOG        LOG ACCESS VIOLATIONS\n         BZ    NOLOGWA             NO, BRANCH\n         LH    R8,LOGGML           GET LENGTH FOR GETMAIN\n         B     GETWA               GET PROGRAM STORAGE\nNOLOGWA  EQU   *\n         LH    R8,NLOGGML          GET LENGTH FOR GETMAIN\nGETWA    EQU   *\n         GETMAIN RU,LV=(R8)        GET STORAGE FOR PROGRAM WORKAREA\n         LR    R13,R1              POINT TO PROGRAM WORK AREA\n         USING WORKAREA,R13        ADDRESS WORKAREA STORAGE\n         EJECT\n         XC    SAVEAREA(72),SAVEAREA CLEAR REGISTER SAVEAREA\n         ST    R2,PARMPTR          SAVE PARMLIST ADDRESS\n         STH   R8,WAGML            SAVE GETMAIN LENGTH\n         SPACE 1\n         L     R1,0(,R2)           * COPY OPTION BYTE INTO WORKAREA\n         MVC   OPTBYTE,0(R1)       *\n         L     R1,4(,R2)           * COPY ACF USERID INTO WORKAREA\n         MVC   USERID,0(R1)        *\n         MVI   RESTYPE,C'R'        * COPY RESOURCE TYPE INTO WORKAREA\n         L     R1,8(,R2)           *\n         MVC   RESTYPE+1(3),0(R1)  *\n         L     R1,12(,R2)          * COPY RESOURCE NAME INTO WORKAREA\n         CLI   0(R1),40            CHECK FOR RESOURCE NAME IN VAR.\n         BH    NOVRN               LENGTH FORMAT\n         MVI   RESNAME,C' '          * COPY RESOURCE NAME IN VAR.\n         MVC   RESNAME+1(39),RESNAME * LENGTH FORMAT\n         SR    R8,R8                 *\n         IC    R8,0(,R1)             *\n         BCTR  R8,R0                 *\n         EX    R8,MVCRNAME           *\n         B     GETACVT               *\nNOVRN    EQU   *\n         MVC   RESNAME,0(R1)       MOVE RES NAME IN FIXED LEN. FORMAT\n*\n         TITLE 'IGC0024G - MAINLINE PROCESSING'\nGETACVT  EQU   *\n         TM    OPTBYTE,X'0F'       WERE ANY ACCESS BITS SPECIFIED\n         BNZ   SETAUTH             YES, CONTINUE\n         OI    OPTBYTE,OPTREAD     NO, DEFAULT TO READ ACCESS\nSETAUTH  EQU   *\n         ST    R4,TCBPTR           SAVE TCB ADDRESS\n         L     R1,TCBJSCB-TCB(,R4) GET JSCB ADDRESS\n         LA    R1,0(,R1)           CLEAR HIGH ORDER BYTE\n         MVC   SAVEOPTS,JSCBOPTS-IEZJSCB(R1) GET JSCB OPTION BYTE\n         OI    JSCBOPTS-IEZJSCB(R1),JSCBAUTH INSURE AUTHORIZED\n         SPACE 1\n         ACFINCVT R10,NONE=RET08   POINT TO ACF2 CVT\n         USING ACCVT,R10\n         SPACE 1\n         BAL   LINKREG,GETLID      GET LID RECORD FOR USERID\n         SPACE 1\n         TM    OPTBYTE,OPTVER      VERIFY RESOURCE RULE EXISTS\n         BZ    NOTVER              NO, BRANCH\n         BAL   LINKREG,VERRUL      USE RULE INTERPERTER\n         B     RET00               RULE FOUND\nNOTVER   EQU   *\n         TM    OPTBYTE,OPTLOG      VIOLATION LOGGING REQUESTED\n         BZ    NOELOG              NO, BRANCH\n         SPACE 1\n         BAL   LINKREG,BLDAUCB     BUILD AUCB FOR VALIDATION CALL\n         BAL   LINKREG,CHKAUTH     USE SVC TYPE=A CALL IF LOGGING\n         B     RET00               AUTHORIZED RETURN\nNOELOG   EQU   *\n         BAL   LINKREG,GETRUL      * USE RULE INTERPERTER IF\n         BAL   LINKREG,CHKRUL      * LOGGING TO BE SUPPRESSED\n         B     RET00               AUTHORIZED RETURN\n*\n         TITLE 'IGC0024G - PROGRAM RETURN'\nACFERMSG DS    0H\n*        *\n*        *                         THE MESSAGE RETURNED BY ACF2 IS IN\n*        *                         PUTLINE FORMAT, THE FOLLOWING CODE\n*        *                         WILL CONVERT IT INTO WTO FORMAT\n*        *\n         MVC   MSGBUF+2(2),=X'8000' SET MCS FLAGS\n         LH    R1,MSGBUF           GET MESSAGE LENGTH\n         LA    R1,MSGBUF(R1)       POINT TO END OF MESSAGE TEXT\n         MVC   0(4,R1),=X'00004020' SET DESCRIPTOR & ROUTING CODES\n         WTO   MF=(E,MSGBUF)       WRITE THE MESSAGE\n         B     RET08               RETURN ERROR\n         SPACE 1\nRET00    DS    0H                  AUTHORIZED USER RETURN\n         LA    R2,0\n         B     RET\nRET04    DS    0H                  UNAUTHORIZED USER RETURN\n         LA    R2,4\n         B     RET\nRET08    DS    0H                  ERROR RETURN\n         LA    R2,8\n         SPACE 1\nRET      DS    0H\n         L     R1,TCBPTR                       * POINT TO TASK TCB\n         L     R1,TCBJSCB-TCB(,R1)             * GET ADDRESS OF JSCB\n         LA    R1,0(,R1)                       * CLEAR HIGH ORDER\n         MVC   JSCBOPTS-IEZJSCB(1,R1),SAVEOPTS * RESTORE OPTION BYTE\n         LH    R4,WAGML            GET LENGTH FOR FREEMAIN\n         FREEMAIN RU,LV=(R4),A=(R13) FREE WORKAREA STORAGE\n         LR    R15,R2              SET RETURN CODE\n         BR    R11                 RETURN TO CALLER\n*\n         TITLE 'IGC0024G - EXTERNAL CALL - GET LIDREC'\nGETLID   DS    0H\n*                                  ACF2 INFO CALL TO RETRIEVE THE\n*                                  LID FOR A USERID THAT IS NOT THE\n*                                  ID LOGGED ON TO THE ADDRESS SPACE\n*\n         XC    ACVALD(ACVLEN),ACVALD CLEAR ACVALD CONTROL BLOCK\n         MVI   ACVFCN,X'01'        INDICATE CONTROL BLOCK TYPE\n         MVI   ACVSFCN,ACVSINFO    INDICATE INFO CALL\n         XC    MSGBUF,MSGBUF       CLEAR MESSAGE RETURN AREA\n         LA    R0,MSGBUF           * SETUP ADDRESS OF MESSAGE AREA\n         ST    R0,ACVMSG           *\n         LA    R0,LIDREC           * SETUP ADDRESS OF LOGON ID\n         ST    R0,ACVRECB          * BUFFER AREA\n         LA    R0,LIDLEN           * SETUP LENGTH OF LOGON ID BUFFER\n         ST    R0,ACVRECL          *\n         LA    R0,ACUID            * SETUP ADDRESS OF USER ID\n         ST    R0,ACVUIDB          * BUFFER AREA\n         LA    R0,24               * SETUP LENGTH OF USERID ID BUFFER\n         ST    R0,ACVUIDL          *\n         MVC   ACVLID,USERID       * GET LOGONID FOR REQUEST\n         SPACE 1\n         ACFSVC ACVALD,TYPE=A,NONE=GETLIDER,CVT=HAVE GET LIDREC FOR ID\n         LTR   R15,R15             WAS FUNCTION SUCCESSFUL\n         BZR   LINKREG             YES, RETURN\n         SPACE 1\n         TM    ACVRFLG,ACVRMSG     WAS A MESSAGE RETURNED\n         BZ    RET08               NO, RETURN ERROR\nGETLIDER EQU   *\n         TM    OPTBYTE,OPTMSG      WRITE OUT ERROR MESSAGES\n         BZ    RET08               NO, RETURN ERROR\n         B     ACFERMSG            YES, WRITE OUT THE ACF2 MESSAGE\n*\n         TITLE 'IGC0024G - EXTERNAL CALL - BUILD AUCB'\nBLDAUCB  DS    0H\n*                                  INITALIZE AUCB REQUIRED FOR THE\n*                                  ACF2 EXTERNAL CALL INTERFACE.\n*\n         LA    R14,ACUCB           * ZERO OUT CONTROL BLOCK\n         LA    R15,ACULEN          *\n         SR    R1,R1               *\n         MVCL  R14,R0              *\n         MVC   ACULID,USERID       GET LOGON ID\n         LA    R0,ACUID            * SETUP UID ADDRESS\n         ST    R0,ACUUIDP          *\n         LA    R0,LIDREC           * SETUP LIDREC ADDRESS\n         ST    R0,ACULRECP         *\n         MVI   ACUSIND,ACUSVS2     INDICATE SMF IS VS2\n         L     R1,16                        * COPY SMF CPUID TO ACUCB\n         L     R1,CVTSMCA-CVT(R1)           *\n         MVC   ACUSCPU,SMCASID-SMCABASE(R1) *\n*        *\n*        *                         INSERT JOB/STEP NAME AS APPROPRIATE\n*        *\n         L     R1,TCBPTR           POINT TO TCB ADDRESS\n         L     R1,TCBTIO-TCB(R1)   GET TIOT ADDRESS\n         MVC   ACUSJOBN,0(R1)      COPY JOBNAME TO ACUCB\n         MVC   ACUSTEP,8(R1)       COPY STEPNAME TO ACUCB\n         TIME  BIN                 GET DATE/TIME\n         STCM  R0,15,ACUSMTIM      SET SMF TIMESTAMP\n         STCM  R1,15,ACUSMDAT      SET SMF DATE\n         MVC   ACUSRTIM(8),ACUSMTIM SET READER TIME & DATE STAMPS\n*        *\n*        *                         FILL IN ACUCB FIELDS AS REQUIRED\n*        *\n         MVI   ACUSUIF,C' '                             * BLANK OUT\n         MVC   ACUSUIF+1(ACUT1FLG-ACUSUIF-1),ACUSUIF    * ACUCB\n         MVI   ACUSLIBS,C' '                            * CHARACTER\n         MVC   ACUSJOBL+1(ACUSFT-ACUSJOBL-1),ACUSJOBL   * FIELDS\n         MVI   ACUSLIBS,C' '                            *\n         MVC   ACUSLIBS+1(ACUMUSID-ACUSLIBS-1),ACUSLIBS *\n         MVC   ACUPGM,PGMNAME      * SETUP PROGRAM NAME IN ACUCB\n         MVC   ACUSPGM,ACUPGM      *\n         MVC   ACUSLIB,=CL44'SYS1.LINKLIB' * DEFAULT PGM LIBRARY TO\n         MVC   ACUSLVOL,=CL8' '            * LINKLIST\n         MVI   ACUT2FLG,ACUT2JOB   INDICATE PGM/LIB IS CURRENT\n         MVC   ACUSKEY,=CL8' '     INITALIZE DATASET HLQ AS REQUIRED\n         SPACE 1\n         BR    LINKREG             RETURN\n*\n         TITLE 'ACFCHK - VERIFY RESOURCE RULE RECORD PRESENT'\nVERRUL   DS    0H\n*                                  ACF2 CALL TO RETRIEVE THE COMPILED\n*                                  RULE RECORD FOR A SPECIFIC RESOURCE\n*                                  TYPE/NAME COMBINATION.\n*\n         XC    ACGRSRC(ACGRSLEN),ACGRSRC CLEAR PARMLIST AREA\n         MVI   ACGFCN,X'04'        INDICATE RESOURCE CALL\n         MVI   ACGSFCN,ACGSRET     RETURN RULE RECORD\n         MVI   ACGFLGS2,ACGNCACH   INDICATE NO USER CACHE\n         MVI   ACGRFLGS,X'00'      CLEAR RETURNED FLAGS FIELD\n         MVI   ACGUCB,X'FF'        * SET ACUCB POINTER FOR SUPERCALL\n         MVC   ACGUCB+1(3),ACGUCB  *\n         XC    MSGBUF,MSGBUF       CLEAR MESSAGE RETURN AREA\n         LA    R0,MSGBUF           * POINT TO BUFFER FOR RETURNED\n         ST    R0,ACGMSG           * MESSAGE\n         LA    R0,RULBUF           * POINT TO BUFFER FOR RETURNED\n         ST    R0,ACGRULAD         * RULE\n         MVC   ACGRULEN,RULBUFL    SET RULE BUFFER LENGTH\n         MVC   ACGRTYPE(4),RESTYPE SET GENERALIZED RESOURCE TYPE\n         MVC   ACGRNAME,RESNAME    SET RESOURCE NAME\n         MVC   ACGMODID,PGMNAME    SET PROGRAM NAME\n         SPACE 1\n         ACFSVC ACGRSRC,TYPE=A,NONE=VERRULER,CVT=HAVE GET THE RULE REC\n         LTR   R15,R15             CHECK RETURN FROM SVC CALL\n         BZR   LINKREG             RETURN IF CALL SUCCESSFUL\n         SPACE 1\n         CLC   MSGBUF+4(8),ACF04005 WAS ERROR = NO RULE RECORD FOUND\n         BNE   VERRULER            NO, TREAT AS ERROR\n         B     RET04               INDICATE NO RULE FOUND\nVERRULER EQU   *\n         TM    OPTBYTE,OPTMSG      ISSUE ACF ERROR MESSAGES\n         BZ    RET08               NO, RETURN ERROR\n         B     ACFERMSG            YES, WRITE THE ERROR MESSAGE\n*\n         TITLE 'IGC0024G - RETRIEVE RESOURCE RULE RECORD'\nGETRUL   DS    0H\n*                                  ACF2 CALL TO RETRIEVE THE COMPILED\n*                                  RULE RECORD FOR A SPECIFIC RESOURCE\n*                                  TYPE/NAME COMBINATION.\n*\n         XC    ACGRSRC(ACGRSLEN),ACGRSRC CLEAR PARMLIST AREA\n         MVI   ACGFCN,X'04'        INDICATE RESOURCE CALL\n         MVI   ACGSFCN,ACGSRET     RETURN RULE RECORD\n         MVI   ACGFLGS2,ACGNCACH   INDICATE NO USER CACHE\n         MVI   ACGRFLGS,X'00'      CLEAR RETURNED FLAGS FIELD\n         MVI   ACGUCB,X'FF'        * SET ACUCB POINTER FOR SUPERCALL\n         MVC   ACGUCB+1(3),ACGUCB  *\n         XC    MSGBUF,MSGBUF       CLEAR MESSAGE RETURN AREA\n         LA    R0,MSGBUF           * POINT TO BUFFER FOR RETURNED\n         ST    R0,ACGMSG           * MESSAGE\n         LA    R0,RULBUF           * POINT TO BUFFER FOR RETURNED\n         ST    R0,ACGRULAD         * RULE\n         MVC   ACGRULEN,RULBUFL    SET RULE BUFFER LENGTH\n         MVC   ACGRTYPE(4),RESTYPE SET GENERALIZED RESOURCE TYPE\n         MVC   ACGRNAME,RESNAME    SET RESOURCE NAME\n         MVC   ACGMODID,PGMNAME    SET PROGRAM NAME\n         SPACE 1\n         ACFSVC ACGRSRC,TYPE=A,NONE=GETRULER,CVT=HAVE GET THE RULE REC\n         LTR   R15,R15             CHECK RETURN FROM SVC CALL\n         BZR   LINKREG             RETURN IF CALL SUCCESSFUL\n         SPACE 1\n         CLC   MSGBUF+4(8),ACF04005 WAS ERROR = NO RULE RECORD FOUND\n         BNE   GETRULER            NO, TREAT AS ERROR\n         TM    LIDMFLG,LIDMNCNL    IS THIS USER MARKED NO-CNCL\n         BO    RET00               YES, INDICATE AUTH OK\n         B     RET04               NO, INDICATE NOT AUTHORIZED\nGETRULER EQU   *\n         TM    OPTBYTE,OPTMSG      ISSUE ACF ERROR MESSAGES\n         BZ    RET08               NO, RETURN ERROR\n         B     ACFERMSG            YES, WRITE THE ERROR MESSAGE\n*\n         TITLE 'IGC0024G - INTERPERT RESOURCE RULE RECORD'\nCHKRUL   DS    0H\n*                                  CODING REQUIRED TO MAKE A CALL TO\n*                                  THE GRS RULE INTERPERTER.\n*\n         SPACE 1\n         XC    ACFGINTP(ACGPLEN),ACFGINTP * CLEAR PARMLIST AREA\n         LA    R0,RULBUF           * POINT TO AREA CONTAINING RULE\n         ST    R0,ACGPREC          * OBJECT RECORD\n         LA    R0,RULWORKA         * POINT TO THE WORKAREA FOR THE\n         ST    R0,ACGPWRK          * RULE INTERPERTER\n         LA    R0,ACUID            * SETUP POINTER TO THE UID TO\n         ST    R0,ACGPUID          * BE CHECKED\n         TIME  DEC                 * USE CURRENT DATE FOR RULE\n         STCM  R1,15,RULDATE       * VALIDATION\n         LA    R0,RULDATE          * POINT TO ACCESS DATE\n         ST    R0,ACGPDATE         *\n         MVI   SRCNAME,C' '         * SETUP DUMMY SOURCE NAME\n         MVC   SRCNAME+1(7),SRCNAME * OF CL8' '\n         LA    R0,SRCNAME           * POINT TO SOURCE NAME\n         ST    R0,ACGPSRCE          *\nCHKRR    EQU   *\n         TM    OPTBYTE,OPTREAD     IS READ ACCESS TO BE VALIDATED\n         BZ    CHKRD               NO, BRANCH\n         MVI   ACGPFLGS,ACGPREAD   INDICATE READ ACCESS\nCHKRD    EQU   *\n         TM    OPTBYTE,OPTDEL      IS DELETE ACCESS TO BE VALIDATED\n         BZ    CHKRU               NO, BRANCH\n         MVI   ACGPFLGS,ACGPDEL    INDICATE DELETE ACCESS\nCHKRU    EQU   *\n         TM    OPTBYTE,OPTUPDT     IS UPDATE ACCESS TO BE VALIDATED\n         BZ    CHKRA               NO, BRANCH\n         MVI   ACGPFLGS,ACGPUPDT   INDICATE DELETE ACCESS\nCHKRA    EQU   *\n         TM    OPTBYTE,OPTADD      IS ADD ACCESS TO BE VALIDATED\n         BZ    CHKRCALL            NO, BRANCH\n         MVI   ACGPFLGS,ACGPADD    INDICATE ADD ACCESS\nCHKRCALL EQU   *\n         LOAD  EPLOC=ACFGINT       * GET E.P. OF GRS RULE INTERPERTER\n         LR    R15,R0              *\n         LA    R1,ACFGINTP         POINT TO INTERPERTER PARMLIST\n         BALR  R14,R15             CALL THE GRS RULE INTERPERTER\n         SPACE 1\n         CH    R15,H24             RULE RECORD IN IMPROPER FORMAT\n         BE    CHKRULER            YES, ERROR\n         CH    R15,H16             IS ACCESS ALLOWED TO USER\n         BLR   LINKREG             YES, RETURN\n         TM    LIDMFLG,LIDMNCNL    IS USER MARKED NO-CNCL\n         BOR   LINKREG             YES, RETURN\n         B     RET04               INDICATE NOT AUTHORIZED\nCHKRULER EQU   *\n         TM    OPTBYTE,OPTMSG      WRITE OUT ERROR MESSAGES\n         BZ    RET08               NO, RETURN\n         B     ACFERMSG            YES, WRITE THE ERROR MESSAGE\n*\n         TITLE 'IGC0024G - GENERALIZED RESOURCE VALIDATION CALL'\nCHKAUTH  DS    0H\n*                                  CODING REQUIRED TO MAKE A ACF2 GRS\n*                                  VALIDATION CALL\n*\n         XC    ACGRSRC(ACGRSLEN),ACGRSRC CLEAR CONTROL BLOCK TO X'00'\n         MVI   ACGFCN,X'04'        INDICATE RESOURCE CALL\n         MVI   ACGSFCN,ACGSINP     INDICATE RESOURCE VALIDATION\n         MVI   ACGFLGS2,ACGNCACH   INDICATE NO USER CACHE\n         MVI   ACGRFLGS,X'00'      CLEAR RETURNED FLAGS FIELD\n         LA    R0,ACUCB            * POINT TO ACUCB FOR CALL\n         ST    R0,ACGUCB           *\n         XC    MSGBUF,MSGBUF       CLEAR MESSAGE RETURN AREA\n         LA    R0,MSGBUF           * POINT TO BUFFER FOR RETURNED\n         ST    R0,ACGMSG           * MESSAGE\n         MVC   ACGRTYPE,RESTYPE    SET THE GENERALIZED RESOURCE TYPE\n         MVC   ACGRNAME,RESNAME    SET RESOURCE NAME\n         MVC   ACGMODID,PGMNAME    SET PROGRAM NAME\nCHKAR    EQU   *\n         TM    OPTBYTE,OPTREAD     IS READ ACCESS TO BE VALIDATED\n         BZ    CHKAD               NO, BRANCH\n         MVI   ACGFLGS,ACGFARD     INDICATE READ ACCESS\nCHKAD    EQU   *\n         TM    OPTBYTE,OPTDEL      IS DELETE ACCESS TO BE VALIDATED\n         BZ    CHKAU               NO, BRANCH\n         MVI   ACGFLGS,ACGFADEL    INDICATE DELETE ACCESS\nCHKAU    EQU   *\n         TM    OPTBYTE,OPTUPDT     IS UPDATE ACCESS TO BE VALIDATED\n         BZ    CHKAA               NO, BRANCH\n         MVI   ACGFLGS,ACGFAUPT    INDICATE DELETE ACCESS\nCHKAA    EQU   *\n         TM    OPTBYTE,OPTADD      IS ADD ACCESS TO BE VALIDATED\n         BZ    CHKACALL            NO, BRANCH\n         MVI   ACGFLGS,ACGFAADD    INDICATE ADD ACCESS\nCHKACALL EQU   *\n         ACFSVC ACGRSRC,TYPE=A,NONE=CHKAERR,CVT=HAVE CHECK ACCESS AUTH\n         CH    R15,H4              ERROR DURING PROCESSING\n         BH    CHKAERR             YES, BRANCH\n         CLI   ACGRFLGS,X'08'      CHECK RETURN FLAGS FIELD\n         BE    RET04               ACCESS NOT ALLOWED IF RFLGS = 8\n         BR    LINKREG             ACCESS ALLOWED IF RFLGS < 8\n         SPACE 1\nCHKAERR  EQU   *\n         TM    OPTBYTE,OPTMSG      WRITE ACF ERROR MESSAGES\n         BZ    RET08               NO, RETURN ERROR\n         B     ACFERMSG            YES, WRITE THE ERROR MESSAGE\n*\n         TITLE 'IGC0024G - DATA AREAS AND DSECTS'\nMVCRNAME MVC   RESNAME(0),1(R1)    MOVE VAR. FORMAT RESOURCE NAME\n         SPACE 1\nRULBUFL  DC    F'4096'             LENGTH OF RULE BUFFER\n         SPACE 1\n*                                  ACFGINT MUST BE ALIGNED ON FULLWORD\nACFGINT  DC    CL8'ACFGINT'        RESOURCE RULE INTERPERTER EP NAME\n         SPACE 1\nPGMNAME  DC    CL8'IGC0024G'       PROGRAM NAME LITERAL\nACF04005 DC    CL8'ACF04005'       NO RULE RECORD FOUND MESSAGE NUMBER\n         SPACE 1\nH24      DC    H'24'               HALFWORD 24\nH16      DC    H'16'               HALFWORD 16\nH4       DC    H'4'                HALFWORD 4\n         SPACE 1\nLOGGML   DC    AL2(LOGGMLL)        WA LEN IF VOILATION LOGGING\nNLOGGML  DC    AL2(NLOGGMLL)       WA LEN IF NO VIOLATION LOGGING\n         SPACE 1\n         LTORG\n         EJECT\nWORKAREA DSECT                     PROGRAM WORKAREA DSECT\nSAVEAREA DS    18F                 SAVE AREA FOR RULE INTERPERTER CALL\nPARMPTR  DS    F                   PARMLIST ADDRESS SAVEAREA\nTCBPTR   DS    F                   TCB CONTROL BLOCK ADDRESS\nWAGML    DS    H                   GETMAINED LENGTH OF WORKAREA\nRULDATE  DS    PL4                 RULE INTERPETER PARM - CURRENT DATE\nSRCNAME  DS    CL8                 RULE INTERPETER PARM - SOURCE NAME\nUSERID   DS    CL8                 USERID TO BE VALIDATED\nRESTYPE  DS    CL4                 GRS RESOURCE TYPE\nRESNAME  DS    CL40                GRS RESOURCE NAME\nSAVEOPTS DS    XL1                 JSCB OPTIONS BYTE SAVEAREA\nOPTBYTE  DS    XL1                 OPTIONS BYTE\nOPTVER   EQU   X'80'               VERIFY RULE RECORD EXISTS\nOPTLOG   EQU   X'40'               LOG AUTHORIZATION VIOLATIONS\nOPTMSG   EQU   X'20'               OUTPUT ACF ERROR MESSAGES\nOPTADD   EQU   X'08'               VALIDATE ADD ACCESS TO RESOURCE\nOPTDEL   EQU   X'04'               VALIDATE DELETE ACCESS TO RESOURCE\nOPTUPDT  EQU   X'02'               VALIDATE UPDATE ACCESS TO RESOURCE\nOPTREAD  EQU   X'01'               VALIDATE READ ACCESS TO RESOURCE\n         SPACE 1\n         DS    0H\nMSGBUF   DS    XL128               ACF MESSAGE BUFFER AREA\n         SPACE 1\nACUID    ACUID ,                   UID STRING\n         SPACE 1\n         LIDREC DSECT=NO           ACF LOGON ID RECORD\n         SPACE 1\n         ACUCB DSECT=NO            ACF LOGON ID RECORD\n         SPACE 1\n         ACVALD DSECT=NO           INFO CALL PARMLIST\n         SPACE 1\n         ACGRSRC DSECT=NO          GRS VALIDATION CALL PARMLIST\n         SPACE 1\n         DS    0D\nLOGGMLL  EQU   *-WORKAREA          WA LENGTH IF OPTLOG SPECIFIED\n         SPACE 1\n         ACFGINTP DSECT=NO         GRS RULE INTERPERTER PARMLIST\n         SPACE 1\nRULWORKA DS    XL256               GRS RULE INTERPERTER WORKAREA\n         SPACE 1\nRULBUF   DS    XL4096              GRS RULE RECORD BUFFER AREA\n         SPACE 1\n         DS    0D\nNLOGGMLL EQU   *-WORKAREA          WA LENGTH IF OPTLOG NOT SPECIFIED\n         EJECT\n         ACCVT ,                   ACF CVT DSECT\n         SPACE 1\n         ACFASVT ,                 ACF SVT DSECT\n         SPACE 1\n         IHAPSA ,                  PREFIXED STORAGE AREA DSECT\n         SPACE 1\n         IHAASCB ,                 ADDRESS SPACE CONTROL BLOCK DSECT\n         SPACE 1\n         IHALPDE ,                 LINK PACK DIRECTORY ENTRY DSECT\n         SPACE 1\n         IEESMCA ,                 SMF CONTROL BLOCKS DSECTS\n         SPACE 1\n         IEZJSCB ,                 JOB STEP CONTROL BLOCK\n         SPACE 1\n         CVT DSECT=YES,LIST=NO     COMMUNICATION VECTOR TABLE DSECT\n         SPACE 1\n         IKJTCB DSECT=YES,LIST=NO  TASK CONTROL BLOCK DSECT\n         SPACE 3\n         END\n/*\n//*\n//LINKEDIT EXEC PGM=HEWL,\n//             COND=(7,LT),\n//             PARM='LIST,XREF,LET,RENT,REUS,REFR'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(10,10))\n//SYSLMOD  DD  DSN=SYS1.LPALIB,DISP=SHR\n//SYSLIB   DD  DSN=SYS3.ACF2R41.ACFMOD,DISP=SHR\n//SYSPUNCH DD  DSN=&&SYSPUNCH,DISP=(OLD,DELETE)\n//SYSLIN   DD  *\n INCLUDE SYSPUNCH(IGC0024G)\n NAME    IGC0024G(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISP@PRIM": {"ttr": 8710, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00U\\x00U\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 85, "newlines": 85, "modlines": 0, "user": "CBT353"}, "text": "%------------ Local SPF/MVS Utilities Option Menu ------------------------------\n%Select Option ===>_OPT     +\n%\n%General programming utilities:+      (LCLUSER and LCLCISS panels)             +\n%ACC+PAN access code%ADD+Add PAN mem    %COM+Comment PAN mem%DCF+Script\n%EDT+Edit PAN member%ENQ+Enqueue display%GDG+GDG maintenance%GET+Get PAN member\n%JDF+Jes2 display   %PAN+Misc PAN optns %PLF+PAN Lib facilty%PRT+Print Utilities\n%PUT+Update PAN mem %SAV+SYSOUT Archive %STD+CCC Standards  %TBL+CICS Changes  +\n%XMT+IDTF transmit  %ISS+ISS Procedures %   +               %                  +\n%                                                                              +\n%Operations utilities:+                (LCLOPER panel)                         +\n%ASM+DASD mgmnt     %CDF+Console display%CHG+Change id      %CON+Change Control\n%DFA+Define alias   %DLA+Delete alias   %DMP+SVC dump titles%JSS+Job sch/setup\n%LOC+Locate dataset %PRB+Problem reports%RLS+Release space  %RMF+System monitor\n%                   %TEL+TP problem rpt %TMS+TMCINQ         %UAD+TSO UADS\n%VDF+VTOC Display   %XDF+Execution Dsply%CCC+CCC Procedures %   +\n%\n%Systems programming and miscellaneous:+(LCLTECH panel)                        +\n%ACF+Security       %CAI+CA-Activator   %DMS+Display memory %DNS+Dsply net mem\n%LIB+SLSS/Doc       %MTE+Sorted Edit    % OG+Operations gde %OZA+INFO/MVS APARs\n%OZS+INFO/MVS       %PCS+Project control%PDS+Utility        %PRP+Preprocess pnls\n%SMP+MVS SMP/E      %   +               %XTR+CICS Chg.Reqs. %   +\n)INIT\n  .CURSOR = OPT\n  .HELP=LOCHELP1\n)PROC\n  &SEL = TRANS( TRUNC (&OPT,'.')\n              ACC,'CMD(%PANACCC)'\n              ACF,'PANEL(ACFOPTS)'           /* ACF2 main panel */\n              ADD,'CMD(%PANADDC)'\n              ASM,'PGM(ASM2SPF) NOCHECK'     /* ASM2 main panel*/\n              CAI,'PGM(CACTVATE) NEWAPPL(CACT)'\n              CCC,'PANEL(CCCADM)'\n              CDF,'PGM(CDF)'\n              CHG,'CMD(%CHNGE)'\n              CLR,'CMD(%CLR)'\n              COM,'CMD(%PANCOMC)'\n              CON,'PANEL(CHCONOPT)'\n              DCF,'PANEL(DCF)'\n              DFA,'CMD(%DFAC)'\n              DLA,'CMD(%DLAC)'\n              DMP,'CMD(SYSDSCAN)'\n              DMS,'PGM(DMS)'\n              DNS,'PGM(DNS)'\n              EDT,'CMD(%PANEDTC)'\n              ENQ,'PGM(VUTL16)'\n              GDG,'CMD(%GDGC)'\n              GET,'CMD(%PANGETC)'\n              ISS,'PANEL(CCCISS1)'\n              JCL,'PGM(JCLSCH)'\n              JDF,'PGM(JDF) NEWAPPL(JDF)'\n              JSS,'PANEL(JOBS)'\n              LIB,'CMD(%OZM)'\n              MTE,'CMD(%MTEDIT)'\n              NCP,'CMD(%NCPSMP)'\n               OG,'PANEL(CCCADM)'\n              OZA,'PGM(BLGINIT) PARM(SES(00))'\n              OZS,'PGM(BLGINIT) PARM(SES(00))'\n              LOC,'PGM(LOC)'\n              PAN,'PANEL(PAN)'\n              PCC,'CMD(%PCCC)'\n              PCS,'PANEL(PCSM01)'\n              PDS,'PANEL(PDSSEL)'\n              PLF,'PGM(PLF3)'\n              PRB,'CMD(%PROBL)'\n              PRP,'PGM(ISPPREP)'\n              PRT,'CMD(%PRTC)'\n              PUT,'CMD(%PANPUTC)'\n              RLS,'CMD(%RLSC)'\n              RMF,'CMD(%RMF)'\n              SMP,'PGM(GIMISCV) PARM(2) NOCHECK'\n              SAV,'PGM($AVRSPF) PARM($)       '\n              STD,'PANEL(CCCS00)'\n              TBL,'CMD(%CHANGES)'\n              TEL,'CMD(%TELCOM)'\n              TMS,'PANEL(TMSUTIL)'\n              UAD,'CMD(%UADS)'\n              VDF,'PGM(VDF)'\n              XDF,'PGM(XDF)'\n              XMT,'CMD(%XMITC)'\n              XTR,'CMD(%XTRACT)'\n              ' ',' '\n                *,'?' )\n &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JDF": {"ttr": 8713, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x11&\\x11&\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 4390, "newlines": 4390, "modlines": 0, "user": "CBT353"}, "text": "         TITLE 'JDF - MACROS'\n         PRINT OFF\n         COPY  SPFMACS\n         COPY  JDFMACS\n         PRINT ON\n         PRINT NOGEN\n         TITLE 'JDF - CHANGE LOG'\nJDF      CSECT                DISPLAY STATUS OF JES2 JOBS\nJDF      AMODE 31\nJDF      RMODE ANY\n***********************************************************************\n*                                                                     *\n* CHANGE LOG                                                          *\n*                                                                     *\n* 11/03/86 BRIAN COOK    PURGE/RE-QUEUE BY OUTPUT GROUP               *\n*                                                                     *\n* 10/16/86 BRIAN COOK    INITIALIZE \"CONDNUM\" EACH TIME THROUGH.      *\n*                                                                     *\n* 10/10/86 BRIAN COOK    TRY SVC 247 AGAIN                            *\n*                                                                     *\n* 10/08/86 BRIAN COOK    PUT GETMAINS BACK TO LOC=ANY                 *\n*                                                                     *\n*  9/30/86 BRIAN COOK    JDF002 MSG WHEN JOBNAME MATCHES, BUT         *\n*                        DIFFERENT USER-ID SUBMITTED JOB.             *\n*                                                                     *\n*  9/29/86 BRIAN COOK    ADDED LINK TO \"QSAMPUT\" FOR QSAM I/O.        *\n*                                                                     *\n*  9/18/86 BRIAN COOK    SUPPORT FOR TEST JDF, KEYED OFF CVTUSER.     *\n*                                                                     *\n*  9/17/86 BRIAN COOK    SWITCHED JDFCHECK TO USE SVC 247, ACFCHK.    *\n*                                                                     *\n*  9/04/86 BRIAN COOK    UPDATED JDFCHECK FOR 6670 CONFIDENTIAL       *\n*                        OUTPUTS.                                     *\n*                                                                     *\n*  8/29/86 BRIAN COOK    CHANGED TO RE-ENTRANT                        *\n*                                                                     *\n*  8/25/86 BRIAN COOK    REPLACED \"JDFBRO\" WITH \"SMBROWSE\", A GENERAL *\n*                        PURPOSE SPF MEMORY BROWSE UTILITY.           *\n*                                                                     *\n*  8/20/86 BRIAN COOK    ADDED \"JDFCHECK\" MODULE FOR SECURITY CHECKS  *\n*                        FOR VIEWING JOB OUTPUT.                      *\n*                                                                     *\n*  8/20/86 BRIAN COOK    JQE LOOK-UP FOR \"SHOWJOB\" WILL USE END OF    *\n*                        JOB-ENTRIES FLAG, X'FF', INSTEAD OF LOOP     *\n*                        CONTROL BASED ON \"$MAXJOBS\" IN JES PARMS.    *\n*                                                                     *\n*  8/13/86 MARK SPAIN    CHANGED JOB.OUTLIST NAME TO @TEMP.OUTLIST    *\n*                                                                     *\n*  5/09/86 BRIAN COOK    ROUTE JOBCLASS \"P\" TO BPSCAN                 *\n*                                                                     *\n*  4/10/86 BRIAN COOK    ON \"DO\" REQUEST, DON'T SHOW CLASS Y EITHER.  *\n*                                                                     *\n*  4/01/86 BRIAN COOK    ON \"DO\" REQUEST, DON'T SHOW CLASS X OR W;    *\n*                        MUST USE \"DOX\" OR \"DOW\".                     *\n*                                                                     *\n*  2/13/86 BRIAN COOK    INCREASED \"DSNLINE\" FROM 133 BYTES TO 266    *\n*                                                                     *\n*  1/31/86 BRIAN COOK    ALLOW BPSCAN TO LOOK AT \"ASM\" JOBS           *\n*                                                                     *\n*  1/30/86 BRIAN COOK    ADDED JCTODTON TO JDFDDTAB                   *\n*                                                                     *\n*  1/15/86 BRIAN COOK    ADDED \"CONTROL\" SERVICE BEFORE BROWSE        *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n           TITLE 'JDF - JES2 DISPLAY FACILITY '\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                   JES2 DISPLAY FACILITY (JDF)                       *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: DISPLAY STATUS OF JES2 JOBS, LOGONS, & STARTED TASKS.     *\n*                                                                     *\n*                                                                     *\n* FUNCTION: JDF IS AN ISPF/PDF APPLICATION.                           *\n*                                                                     *\n*           JDF ACCESSES CHECKPOINT INFORMATION VIA CROSS-MEMORY      *\n*           SERVICES IN A USER SVC. THIS IS THE UAL JES2 SVC, HEAVILY *\n*           MODIFIED FOR SP 1.3.0 AND 1.3.4.                          *\n*                                                                     *\n*           (THE MEMBER NAME FOR THE SVC IS \"JDFSVC\".)                *\n*                                                                     *\n*           THE JES2 JOB QUEUE ELEMENTS (JQES) AND JOB OUTPUT ELEMENTS*\n*           ARE USED TO DISPLAY INFORMATION ON JOBS ON INPUT, WAIT-   *\n*           ING FOR EXECUTION, OR EXECUTING.                          *\n*                                                                     *\n*           SUPPORT IS PROVIDED TO BROWSE SPOOL DATASETS, AS WELL AS  *\n*           COPYING THEM TO A SEQUENTIAL FILE. ALL SPOOL ACCESS IS    *\n*           VIA MODIFIED UAL JES2 INTERFACE SVC:                      *\n*                                                                     *\nJESSVC   EQU   237                                                    *\n*                                                                     *\n*           THE MAXIMUM NUMBER OF REMOTES IS DEFINED BELOW. IF THE    *\n*           NUMBER IS MORE THAN 33, THE \"RMTABLE\" ENTRIES WILL HAVE   *\n*           TO BE INCREASED. THE DESCRIPTIONS IN RMTABLE NEED TO BE   *\n*           MAINTAINED.                                               *\n*                                                                     *\nRMTMAX  EQU   40\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* INPUT: R1 -> STANDARD PARAMETER LIST:                               *\n*        R1 ==> (PARM ADDR)                                           *\n*      PARM ==> H'LENGTH',PARMDATA                                    *\n*                                                                     *\n* EXTERNAL REFERENCE: JDFSRB                                          *\n*                                                                     *\n*                                                                     *\n* MACROS USED: SAVE                                                   *\n*              ABEND                                                  *\n*              RETURN                                                 *\n*              STAX                                                   *\n*              ENQ                                                    *\n*              DEQ                                                    *\n*              TPUT                                                   *\n*              FREEMAIN                                               *\n*              CVT                                                    *\n*              CVTUSERS (USER)                                        *\n*              TCBWORK  (USER)                                        *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES: REENTRANT,RESIDENT                                      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         TITLE 'JDF - ENTRY POINT LOGIC'\n         PRINT NOGEN\n         USING *,12,11,10,9\n*\n         SAVE  (14,12),,JDF_01/01/81_BRIAN_COOK_&SYSTIME_&SYSDATE\n*\n         LR    R12,R15        SET BASE 1\n         LA    R1,4095\n         LA    R11,1(R1,R12)  SET BASE 2\n         LA    R10,1(R1,R11)  SET BASE 3\n         LA    R9,1(R1,R10)   SET BASE 4\n*\n*\n*  ADDED SUPPORT FOR TEST JDF\n*\n*\n         USING PSA,0\n         L     R15,FLCCVT\n         USING CVT,15\n         L     R15,CVTUSER\n         DROP  15\n         USING CVTUSERS,15\n         CLC   CVTJDFID(4),=C'TJDF'   TEST JDF INSTALLED\n         BNE   NOTSTJDF               NO\n         ICM   R15,15,CVTJDFAD\n         DROP  15\n         LTR   R15,R15                TEST JDF INSTALLED\n         BZ    NOTSTJDF               NO\n         CR    R12,R15                AM I THE TEST JDF\n         BE    NOTSTJDF               YES, CONTINUE\n*\n         LM    R0,R12,20(R13)         RESTORE REGS\n         L     R14,12(,R13)           USE OLD RETURN\n         BR    R15                    INVOKE TEST JDF\n*\nNOTSTJDF DS    0H\n*\n*\n         L     R2,GETMLENG\n*        GETMAIN R,LV=(2)\n         GETMAIN R,LV=(2),LOC=(BELOW)\n*\n         ST    R1,8(R13)      LINK SAVE AREAS\n         ST    R13,4(R1)      SAVE THE CALLER'S R13\n         LR    R13,R1         SET SAVE AREA\n         USING WORKAREA,13\n*\n         USING PSA,0\n*\n         B     SHOWBGIN\n*\nGETMLENG DC    F'262144'      GETMAIN AREA\n*\n         TITLE 'JDF - MAINLINE PROCESSING'\nSHOWBGIN DS    0H             DISPLAY STATUS OF JES2 JOBS\n*\n         MVI   OPEN1,X'80'\n         MVC   COMMAND(2),0(R5)    SAVE THE COMMAND ENTERED\n         MVI   GOTANYST,C'0'  SET TO \"NO STATUS MATCHES\"\n         MVI   ATABFL,C'0'    NO ACTIVE TABLE\n         MVI   DTABFL,C'0'    NO DD NAME TABLE\n         MVI   JOBLINE,C' '   CLEAR TAB ENTRY AREA\n         MVC   JOBLINE+1(79),JOBLINE\n         XC    ISPARMS(40),ISPARMS\n*\nSHOWINIT DS    0H             DISPLAY STATUS OF JES2 JOBS\n         BAL   R7,DOINIT      BUILD THE JOB NAME PARAMETER LIST\n*\n* SET INITIAL OPTION\n*\n         MVC   COMMAND(2),STREQ           SET STATUS REQUEST\n         MVI   JDFZ,C'S'                 UPPER-CASE IT\n*\nSHOWAGIN DS    0H\n*\n         VDEFINE JDFLST,44\n*\nSHOWOPT2 DS    0H\n*\n         VGET  JDFLST\n*\nSHOWOPT3 DS    0H\n*\n         DISPLAY JDFOPT,ENDKEY=DELNDONE\n*\n         C     R15,FZEROS         IF ENTER KEY PRESSED\n         BNE   SHOWOPT2\n*\n         OI    JDFZ,C' '                 UPPER-CASE IT\n         CLI   JDFZ,C'A'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'E'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'H'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'I'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'L'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'O'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'R'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'T'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'W'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'Q'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'S'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n*\n         SETMSG JDF007\n         B     SHOWOPT3\n*\nOPTIONOK DS    0H\n*\n         CLC   JDFLST(44),SPACES\n         BE    SHOWOPT2\n*\n         VPUT  JDFLST\n         VDELETE JDFLST\n*\n         LA    R15,JDFLST\n         SR    R14,R14\n*\n         CLI   0(R15),C' '\n         BE    *+16\n         LA    R14,1(,R14)\n         LA    R15,1(,R15)\n         B     *-16\n         STC   R14,JDFLSTL\n*\n** FOLLOWING FIELD INITIALIZATIONS PERFORMED AS PART OF THE\n*  CONVERSION TO RE-ENTRANCY\n*\n         MVI   BPSFORM,C' '\n         MVC   BPSFORM+1(BPSFORML-1),BPSFORM\n         MVC   BPSFORM(27),=CL27'  ***** BPSCAN DATA FOR'\n         MVC   JOBDDNAM+8(5),=C'.DSID'\n         MVC   BRODSID(5),=C'-----'\n         MVC   CMDISMF(4),=X'00220000'\n         MVC   RQRMT(8),=CL8'N1R'\n         MVC   RURMT(8),=CL8'U'\n         MVC   DATYPE(3),=C'JOB'\n*\n*\n         CLI   JDFZ,C'X'                  END\n         BE    SHOWDONE                   YUP\n*\n         CLI   JDFZ,C'I'                  DISPLAY INITIATORS\n         BNE   TSTINOPT                   NO, SKIP THIS\n         LINK EP=DIF\n         B     SHOWAGIN                   LOOP\n*\nDELNDONE DS    0H\n*\n         VDELETE JDFLST\n         B     SHOWDONE                   GO PICK UP LEVEL\n*\nTSTINOPT DS    0H\n*\n         CLI   JDFZ,C'S'                  STATUS\n         BNE   JDFINOPT                   NO\n         MVC   COMMAND(2),STREQ           SET STATUS REQUEST\n         B     JDFINLVL                   GO PICK UP LEVEL\n*\nJDFINOPT DS    0H\n         MVI   COMMAND,C'D'               SET \"D\" REQUEST\n         MVC   COMMAND+1(1),JDFZ          SET DISPLAY TYPE\n*\nJDFINLVL DS    0H\n         OC    LVL(8),SPACES             UPPER-CASE IT\n         MVI   LVL+7,C' '                MAKE SURE THERE IS A BLANK\n         SR    R15,15\n         LA    R14,LVL\n*\n         CLI   0(R14),C' '\n         BE    *+16\n         LA    R14,1(,R14)\n         LA    R15,1(,R15)\n         B     *-16\n*\n         BCTR  R15,0           SUBTRACT 1\n         STC   R15,USRJLENG\n*\nSHOWAGN2 DS    0H\n         BAL   R7,GETJQES     READ CKPT FOR JQE'S AND JOE'S\n*\n         BAL   R7,OUTJQES     FILL IN THE SPF TABLE\n*\n         BAL   R7,SHOWISP     DISPLAY THE SPF TABLE\n*\nSHOWDONE DS    0H\n*\n         TBCREATE DATABLE1,TSEL,JOBLINE\n         TBEND    DATABLE1\n*\n         TBCREATE DDTABLE1,DSEL,DDNLINE\n         TBEND    DDTABLE1\n*\n         TBCREATE RMTABLE1,RMT1,RMT2\n         TBEND    RMTABLE1\n*\n         MVI   ATABFL,C'0'        NO ACTIVE TABLE\n*\nJUSTGOUT DS    0H\n         TM    OUTLIST+48,X'10'   OPEN OK?\n         BZ    JDFRTRN             NOPE\n*\n** LET \"QSAMPUT\" DO THE CLOSE\n*\n         LA    R15,OUTLIST\n         ST    R15,ISPARMS\n         MVC   ISPARMS+4(4),=X'FFFFFFFF'\n         LA    R1,ISPARMS\n         L     R15,QPUTEPA\n         BALR  R14,R15\n*\nJDFRTRN  DS    0H\n*\n         DELETE EP=QSAMPUT\n*\n         L     R3,4(,R13)     RESTORE THE CALLER'S R13\n         L     R2,GETMLENG\n         FREEMAIN R,LV=(2),A=(13)\n*\n         LR    R13,R3\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n*\n         TITLE 'JDF - INITIALIZATION'\nDOINIT   DS    0H\n*\n         LOAD  EP=QSAMPUT\n         ST    R0,QPUTEPA\n*\n         L     R1,DCB2ADDR\n         MVC   REPRINT(DCB2LEN),0(R1)        REPRINT DCB\n         L     R1,DCB3ADDR\n         MVC   OUTLIST(DCB3LEN),0(R1)        OUTLIST DCB\n*\n         XC    READMTTR(4),READMTTR\n         XC    READAREA(4),READAREA\n         XC    DRNUM(2),DRNUM\n         MVI   DQCLASS,C' '\n         MVI   DOCLASS,C' '\n*\n         MVI   JDFZ,C' '\n         MVC   LVL(8),SPACES\n         MVI   JOBLINE,C' '\n         MVC   JOBLINE+1(74),JOBLINE\n         MVC   TSEL(3),SPACES\n         MVC   JCMD(40),SPACES\n         MVC   DCMD(40),SPACES\n         MVI   DDNLINE,C' '\n         MVC   DDNLINE+1(75),DDNLINE\n         MVC   DSEL(3),SPACES\n*\n         VDEFINE JDFZ,1\n         VDEFINE LVL,8\n         VDEFINE JOBLINE,75\n         VDEFINE JOBID,30\n         VDEFINE TSEL,3\n         VDEFINE JCMD,40\n         VDEFINE DCMD,40\n         VDEFINE DDNLINE,76\n         VDEFINE DSEL,3\n*\n        XC    HR001(HRLEN),HR001   CLEAR OUT THE REMOTE COUNTERS\n*\n         VDEFINE RMT1,34\n         VDEFINE RMT2,34\n*\n         MVC   UIDLEN(4),L8\n         CALL  ISPLINK,                                                X\n               (VCOPY,ZUSER,UIDLEN,USERID,SPFMOVE),                    X\n               VL,MF=(E,ISPARMS)\n*\n         LTR   R15,15          IF RETURN CODE IS ZERO,\n         BZ    USERIDOK        OK\n*\nUSERIDOK DS    0H\n         MVC   PFXLEN(4),L8\n         CALL  ISPLINK,                                                X\n               (VCOPY,ZPREFIX,PFXLEN,PREFIX,SPFMOVE),                  X\n               VL,MF=(E,ISPARMS)\n*\n         LTR   R15,15          IF RETURN CODE IS ZERO,\n         BZ    SMBDEFS         OK\n*\nABEND12  ABEND 12,DUMP,STEP\n*\nSMBDEFS  DS    0H\n*\n         VDEFINE SMBSTART,4,FMT=FIXED\n         VDEFINE SMBNUMB,4,FMT=FIXED\n         VDEFINE SMBLRECL,4,FMT=FIXED\n         VDEFINE SMBTITLE,49\n*\n         MVC   LVL(8),USERID          DEFAULT\n         MVC   MSGJNAME(8),LVL        SAVE FOR MESSAGE\n*\n         LA    R2,4095\n         LA    R1,1(R2,R13)  BUMP PAST 4K WORKAREA\n         ST    R1,JJSPARM\n         OI    JJSPARM,X'80'\n         A     R1,L128K       BUMP 128 K\n*\n         ST    R1,JCTPTR\n         A     R1,L12K         BUMP 12 K\n*\n         ST    R1,IOTPTR\n         A     R1,L40K         BUMP 40 K\n*\n         LA    R1,88(,R1)\n         ST    R1,IXTPTR\n*\n         LA    R1,SSOBAREA\n         ST    R1,SSOBPTR\n         OI    SSOBPTR,X'80'\n*\n         BR    R7             RETURN TO OUR CALLER\n*\nL128K    DC    F'131072'\nL24K     DC    F'24576'\nL12K     DC    F'12288'\nL40K     DC    F'40960'\n*\n         TITLE 'JDF - READ JQE S  AND JOE S'\n*\nGETJQES  DS    0H\n*\n*\n         STAX  DEFER=YES\n*\n         L     R1,JJSPARM\n         USING JJSDSECT,1\n*\n         LA    R1,JJSPARM\n         LA    R15,12\n         SVC   JESSVC\n*\n*        LA    R15,8\n*        SVC   236\n*\n         STAX  DEFER=NO\n*\n         BR    R7\n         TITLE 'JDF - BUILD JQE DISPLAY'\nOUTJQES  DS    0H\n         L     R1,JJSPARM\n         USING JJSDSECT,1\n         LA    R6,JJSLINE1  POINT TO FIRST JOB LINE\n         USING JOBDSECT,6\n         LA    R6,JOBSIZE(,R6)    SKIP FIRST ONE\n*\n         ST    R7,JQESHOLD SAVE THE RETURN ADDRESS\n*\n         MVC   TSEL(3),SPACES     SET SELECTION CODE TO SPACES\n         MVI   GOTANYST,C'0'      DID I FIND ANY ENTRIES?\n*\n         TBCREATE DATABLE1,TSEL,JOBLINE\n*        TBVCLEAR DATABLE1\n*\n         MVI   ATABFL,C'1'        AN ACTIVE TABLE\n*\n         XC    BPSCANJO(8),BPSCANJO   CLEAR THE BPSCAN JOBNAME TABLE\n*\nCHECKJQE DS    0H\n*\n         CLC   COMMAND(2),DEREQ    DE REQUEST\n         BE    CHECKJQ2            YES, PRINT IT\n         CLC   COMMAND(2),STREQ    ST REQUEST\n         BE    CHECKJQ2            YES, PRINT IT\n*\n         CLC   JOBJNAME(5),=C'INIT '    INITIATOR\n         BE    NEXTJQE        GET ANOTHER JQE\n*\n         CLC   JOBJNAME(8),=C'$MASCOMM' MULTI-ACCESS SPOOL COMM\n         BE    NEXTJQE        GET ANOTHER JQE\n*\nCHECKJQ2 DS    0H\n         CLC   COMMAND(2),=C'QS'   REMOTE QUEUE SUMMARY\n         BE    CHECKRSM            YES, SET FLAGS AND SCAN WORK JOES\n*\n         BAL   R7,INITMSG     INITIALIZE THE OUTPUT MESSAGE\n*\n         MVC   MSGSREMT(8),JOBWTRID   INDICATE WTR\n*\n         CLI   MSGJOB#+4,C' ' IF JOB NUMBER IS ZEROS\n         BE    JQEDONE        ALL DONE\n         CLI   JOBTYPE,$PURGE JOB HAS BEEN PURGED\n         BE    JQEPURGE       GO PRINT IT\n         CLI   JOBTYPE,X'60'  ACTIVE TSO SESSION?\n         BE    JQEXEQ         YES\n         CLI   JOBTYPE,X'50'  ACTIVE STARTED TASK?\n         BE    JQEXEQ         YES\n         TM    JOBFLAGS,QUEBUSY   JOB EXECUTING?\n         BZ    JQEQINP        NO, SEE IF IT IS IN INPUT\n         B     JQEXEQ         YES\nJQEQINP  DS    0H\n         CLI   JOBTYPE,X'40'  JOB AWAITING EXECUTION?\n         BE    JQEINPUT       YES\n         CLI   JOBTYPE,X'41'  JOB AWAITING EXECUTION?\n         BE    JQEINPUT       YES\n         CLI   JOBTYPE,X'43'  JOB AWAITING EXECUTION?\n         BE    JQEINPUT       YES\n         TM    JOBTYPE,$SETUP JOB AWAITING EXECUTION?\n         BO    JQEINPUT       YES\n         CLI   JOBTYPE,$XMIT  JOB ON TRANSMISSION QUEUE\n         BE    JQEXMIT        YES\n         TM    JOBTYPE,$XMIT  JOB ON INPUT\n         BO    JQEINPUT       YES\n         TM    JOBTYPE,$RECEIVE JOB ON SYSOUT RECEIVER?\n         BO    JQEINPUT       YES\n         TM    JOBTYPE,$DUMPQ JOB ON SPOOL OFFLOAD DUMP QUEUE?\n         BO    JQEDUMP        YES\n         CLI   JOBTYPE,$OUTPUT JOB ON OUTPUT QUEUE?\n         BE    JQEOUTP        YES\n         TM    JOBTYPE,$OUTPUT JOB ON OUTPUT QUEUE?\n         BO    JQEINPUT       YES\n         TM    JOBTYPE,$HARDCPY JOB ON PRINTER?\n         BO    JQEOUTP        YES\n         B     NEXTJQE        GET ANOTHER JQE\nJQEXEQ   DS    0H\n*\n         CLI   JOBFLAG3,QUETSU  TSO USER ?\n         BE    LOGDUSER       YES => SET THE MSG\n         CLI   JOBFLAG3,QUESTC  STARTED TASK?\n         BNE   EXECJOB         NO => MUST BE BATCH JOB\n         MVC   MSGSTYPE(L'ACTIVE),ACTIVE MUST BE A STARTED TASK\n         CLC   JOBRECCT(4),FZEROS      ANY RECORDS?\n         BE    JQEOUTST        NOPE,   GET NEXT WORK JOE\n         B     JQEOUTP                 SEE IF THERE IS ANY OUTPUT\nLOGDUSER MVC   MSGSTYPE(L'LOGGEDON),LOGGEDON TSUSER\n         CLC   JOBRECCT(4),FZEROS      ANY RECORDS?\n         BE    JQEOUTST        NOPE,   GET NEXT WORK JOE\n         B     JQEOUTP                 SEE IF THERE IS ANY OUTPUT\nEXECJOB  MVC   MSGSTYPE(L'EXECUTNG),EXECUTNG EXECUTING JOB\n         MVC   MSGQTYPE,JOBJCLAS SET THE JOB CLASS\n         OI    MSGQTYPE,HIGHBIT MAKE THE JOB CLASS PRINTABLE\n         B     JQEOUTST                SEE IF THERE IS ANY OUTPUT\n*\nJQEINPUT DS    0H\n*\n         MVC   MSGSTYPE(L'INPQUE),INPQUE   ON INPUT QUEUE\n         MVC   MSGQTYPE,JOBJCLAS SET THE JOB CLASS\n         OI    MSGQTYPE,HIGHBIT MAKE THE JOB CLASS PRINTABLE\n         B     MSGTEST        GO PRINT THE MESSAGE\nJQEXMIT  DS    0H\n*\n         MVC   MSGSTYPE(L'XMTQUE),XMTQUE   ON INPUT QUEUE\n         MVC   MSGQTYPE,JOBJCLAS SET THE JOB CLASS\n         OI    MSGQTYPE,HIGHBIT MAKE THE JOB CLASS PRINTABLE\n         SR    R15,R15\n         ICM   R15,3,JOBXEQND\n         CVD   R15,DOUBLEWD     NODE NUMBER FOR PRINTED OUTPUT\n         OI    DOUBLEWD+7,X'0F' MAKE PRINTABLE\n         MVI   MSGSNODE,C'N'\n         UNPK  MSGSNODE+1(1),DOUBLEWD+7(1)\n         B     MSGTEST        GO PRINT THE MESSAGE\n*\nJQEPURGE DS    0H\n*\n         MVC   MSGSTYPE(L'PURQUE),PURQUE   ON PURGE QUEUE\n         B     MSGTEST        GO PRINT THE MESSAGE\n*\nJQERECV  DS    0H\n*\n         MVC   MSGSTYPE(L'SYSREC),SYSREC   ON SYSOUT RECEIVER\n         B     MSGTEST        GO PRINT THE MESSAGE\n*\nJQEDUMP  DS    0H\n*\n         MVC   MSGSTYPE(L'DMPQUE),DMPQUE   ON $DUMP QUEUE\n         B     MSGTEST        GO PRINT THE MESSAGE\n*\nJQEOUTP  DS    0H\n*\n         MVC   MSGSTYPE(18),SPACES\n*\n         OC    JOBGNAME(8),SPACES          MIGHT BE BINARY ZEROS\n         CLC   JOBGNAME(8),SPACES          IF NO OUTPUT GROUP NAME\n         BE    JQEOUTP8                    SHOW DEFAULT MESSAGE\n*\n         MVC   MSGSTYPE(7),=C'OUTGRP='     SHOW OUTPUT GROUP\n         MVC   MSGSTYPE+7(8),JOBGNAME           OUTPUT GROUP NAME\n*\n         LA    R1,MSGSTYPE+7               START OF LOOP\n         MVI   MSGSTYPE+10,C' '            END OF LOOP\n*\n         CLI   0(R1),C' '                  END OF GROUP NAME\n         BE    *+12                        GOT IT\n         LA    R1,1(,R1)                   BUMP\n         B     *-12                        LOOP\n*\n         MVI   0(R1),C'.'                  DELIMITER\n         SR    R14,R14\n         ICM   R14,3,JOBGID1\n         CVD   R14,DOUBLEWD\n         OI    DOUBLEWD+7,X'0F'\n         UNPK  1(3,R1),DOUBLEWD+6(2)\n         MVI   4(R1),C'.'                  DELIMITER\n         SR    R14,R14\n         ICM   R14,3,JOBGID2\n         CVD   R14,DOUBLEWD\n         OI    DOUBLEWD+7,X'0F'\n         UNPK  5(3,R1),DOUBLEWD+6(2)\n*\n         B     JQEOUTP9\n*\nJQEOUTP8 DS    0H\n         MVC   MSGSTYPE(L'OUTQUE),OUTQUE   ON OUTPUTQUEUE\n*\nJQEOUTP9 DS    0H\n*\nJQEOUTST DS    0H\n         TM    JOBFLAGS,X'E0'     IS THE JOB HELD\n         BZ    JQEJOENH           NO. CONTINUE CHECKING\n         MVC   MSGSPCST(4),HOLD      NO READY OUTPUT\n         CLC   JOBREMOT,FZEROS REMOTE QUEUE?\n         BNE   RMTDEV          YES => OUTPUT IT\n         B     JQEOUTLP\nJQEJOENH DS    0H\n         TM    JOBDEVID,X'0F'     IS THIS AN XWTR\n         BNO   NOTXWTR            NO. CONTINUE CHECKING\n         MVC   MSGSPCST(4),=C'XWTR'  NO READY OUTPUT\n         B     JQEOUTLP\nNOTXWTR  DS    0H\n         CLC   JOBREMOT,FZEROS REMOTE DEVICE?\n         BNE   RMTDEV          YES => OUTPUT IT\nNOTXWTR2 DS    0H\n         SR    R1,R1            FOR THE INSERT CHARACTER\n         IC    R1,JOBDEVID      DEVICE TYPE\n         SRL   R1,4             RIGHT JUSTIFIED\n         MH    R1,DEVTYPEL      TYPE * LENGTH OF A DEVICE ENTRY\n         LA    R1,DEVTABLE(R1)   A(DEVICE TYPE)\n         CLC   DEVTABLE+1(7),1(R1)      DUMMY ENTRY?\n         BE    JQEOUTLP       GO EXIT\n         MVC   MSGSREMT(7),1(R1)        PUT IN THE DEVICE TYPE\n         CLI   JOBDEVID,0        INTERNAL READER?\n         BE    JQEOUTLP          YES => GIVE THE USER THE INFO\n         SR    R15,R15           FOR THE INSERT CHARACTER\n         IC    R15,JOBDEVID+2    DEVICE NUMBER\n         CVD   R15,DOUBLEWD      IN PACKED DECIMAL\n         IC    R15,0(R1)         OFFSET TO WHERE THE DEV # GOES\n         LA    R15,MSGSREMT(R15) A(WHERE THE DEV # GOES)\n         MVC   1(3,R15),THREEPT  SET UP THE EDIT OF 3 DIGITS\n         EDMK  0(4,R15),DOUBLEWD+6 DEV # IN EBCDIC\n         MVC   0(4,R15),0(R1)    ADJUST FOR BLANKS\n*\n*\n         B     JQEOUTLP       GO EXIT\n*\nRMTDEV   DS    0H\n*\n         SR    R0,R0          NOT REALLY NEEDED NOW\n         ICM   R0,3,JOBREMOT    REMOTE NUMBER\n         CVD   R0,DOUBLEWD    IN PACKED DECIMAL\n         MVC   MSGSREMT(7),SPACES\n*\n         MVI   MSGSREMT,C'R'    INDICATE A REMOTE DEVICE\n         CLC   JOBRNODE,FZEROS  IS THIS A LOCAL PRINTER?\n         BNE   *+8              NO\n         MVI   MSGSREMT,C'U'    INDICATE A LOCAL PRINTER\n*\n         MVC   MSGSREMT+2(L'THREEPT),THREEPT SET UP THE EDIT MASK\n         EDMK  MSGSREMT+1(L'THREEPT),DOUBLEWD+6 CONVERT TO EBCDIC\n         MVC   MSGSREMT+1(L'THREEPT),0(R1) ADJUST FOR BLANKS\n         LA    R1,MSGSREMT+1    A(SPOT JUST BEFORE POSSIBLE SEP)\nFINDPT   LA    R1,1(R1)       A(NEXT BYTE)\n         CLI   0(R1),C'.'     FOUND THE SEPARATOR?\n         BNE   FINDPT         NO => KEEP LOOKING\n         SR    R15,R15        FOR THE INSERT CHARACTER\n         IC    R15,JOBDEVID     DEVICE TYPE INDICATOR\n         SRL   R15,3          RIGHT JUSTIFIED\n         LA    R15,RMTDEVS-HIGHBIT/8(R15) A(DEVICE TYPE)\n         MVC   1(2,R1),0(R15) PUT IN THE DEVICE TYPE\n         MVC   3(1,R1),JOBDEVID     THE DEVICE NUMBER\n         OI    3(R1),C'0'     MAKE THE DEVICE NUMBER PRINTABLE\n         CLC   0(4,R1),=C'.NT0'\n         BNE   JQEOUTLP       GO EXIT\n         MVC   0(4,R1),=C'    '\n         B     JQEOUTLP       GO EXIT\n         EJECT\nJQEOUTLP DS    0H\n         CLC   MSGSREMT(2),=C'U3'  3820 PSF/FSS PRINTER?\n         BNE   JQEOUTL2            NO, SKIP THIS\n*\n         CLC   MSGSREMT+2(3),SPACES ACTIVE\n         BE    JQEOUTL2            NO, SKIP THIS\n*\n         MVC   MSGSREMT+2(5),=C'.PRTR'\n*\nJQEOUTL2 DS    0H\n         MVI   JOBRECCT,X'00'      WIPE OUT LEFT BYTE\n         CLC   JOBRECCT(4),FZEROS      ANY RECORDS?\n         BE    JQENOWRK        NOPE,   GET NEXT WORK JOE\n*\nJOENOWTR DS    0H\n*\nJOERECLP DS    0H\n*\nJQEOUTMS DS    0H\n         ICM   R15,15,JOBRECCT        RECORD COUNT\n         CVD   R15,DOUBLEWD        RECORD COUNT\n         MVC   MSGALINE-1(10),EDIT10\n         ED    MSGALINE-1,DOUBLEWD+4\n*\n         MVC   MSGOCLAS(1),JOBCURCL\n*\n         CLC   MSGSTYPE(7),=C'OUTGRP='     SHOW OUTPUT GROUP\n         BE    JQETNODE            CHECK FOR RMT PRINT NODE\n         CLC   MSGSTYPE(3),OUTQUE   ON OUTPUTQUEUE?\n         BNE   MSGTEST\n*\n         B     JQETNODE            CHECK FOR RMT PRINT NODE\n*\nJQENOWRK DS    0H\n*\n         CLC   MSGSTYPE(3),OUTQUE   ON OUTPUTQUEUE?\n         BNE   MSGTEST\n*\n         MVC   MSGSPCST(4),=C'NRDY'  NO READY OUTPUT\n*\nJQETNODE DS    0H\n*\n         CLC   JOBRNODE(2),FZEROS     COMPARE PRINT NODE TO ZERO\n         BE    MSGTEST       IT'S THE SAME, SO SKIP IT\n         CLC   JOBTHISN(2),JOBRNODE   COMPARE THIS NODE VS. PRINT NODE\n         BE    MSGTEST       IT'S THE SAME, SO SKIP IT\n*\n         SR    R15,R15\n         ICM   R15,3,JOBRNODE\n         CVD   R15,DOUBLEWD     NODE NUMBER FOR PRINTED OUTPUT\n         OI    DOUBLEWD+7,X'0F' MAKE PRINTABLE\n         MVI   MSGSNODE,C'N'\n         UNPK  MSGSNODE+1(1),DOUBLEWD+7(1)\n         CLC   MSGSNODE(2),=C'N1'  LOCAL NODE\n         BNE   MSGTEST        GO PRINT THE MESSAGE\n         MVC   MSGSNODE(2),SPACES  LOCAL NODE\nMSGTEST  DS    0H\n*\n         CLC   COMMAND(2),DTREQ    DT REQUEST\n         BE    MSGDTREQ            YES, GO TEST FOR OUTPUT QUEUE TYPE\n         CLC   COMMAND(2),DRREQ    DR REQUEST\n         BE    MSGDRREQ            YES, GO TEST FOR OUTPUT QUEUE TYPE\n         CLC   COMMAND(2),DOREQ    DO REQUEST\n         BE    MSGDOREQ            YES, GO TEST FOR OUTPUT QUEUE TYPE\n         CLC   COMMAND(2),DWREQ    DW REQUEST\n         BE    MSGDWREQ            YES, GO TEST FOR EXTERNAL WRITER\n         CLC   COMMAND(2),DEREQ    DE REQUEST\n         BE    MSGNEXT             YES, PRINT IT\n         CLC   COMMAND(2),STREQ    ST REQUEST\n         BE    MSGSTAT             YES, PRINT IT\n         CLC   COMMAND(2),DHREQ    DH REQUEST\n         BE    MSGHELD             YES, PRINT IT\n         CLC   COMMAND(2),DLREQ    DL REQUEST\n         BE    MSGSLOG             YES, PRINT IT\n         CLC   COMMAND(2),DAREQ    DA REQUEST\n         BE    MSGACTV             YES, PRINT IT\n         CLC   COMMAND(2),DQREQ    DQ REQUEST\n         BE    MSGINPT             YES, PRINT IT\n         B     MSGNEXT        GO PRINT THIS JQE\n*\nMSGSTAT  DS    0H\n*\n         SR    R15,15\n         IC    R15,USRJLENG   SET THE JOB LENGTH\n         EX    R15,NAMECLC1   MATCH ON JOB NAME\n         BE    MSGSTAT2       GO PRINT THIS JQE\n         EX    R15,NAMECLC2   MATCH ON WTRID\n         BE    MSGSTAT2       GO PRINT THIS JQE\n         B     NEXTJQE        GET ANOTHER JQE\n*\nNAMECLC1 CLC   LVL(1),JOBJNAME         JOBNAME FIRST 5 BYTES\nNAMECLC2 CLC   LVL(1),JOBWTRID         JOBNAME FIRST 5 BYTES\nMSGSTAT2 DS    0H\n*\n         CLI   MSGSTYPE,C'E'   EXECUTING?\n         BE    GETSYSID       GO SET SYSTEM ID\n         CLI   MSGSTYPE,C'A'   ACTIVE\n         BE    GETSYSID       GO SET SYSTEM ID\n         CLI   MSGSTYPE,C'L'   LOGGED ON\n         BE    GETSYSID       GO SET SYSTEM ID\n*\n         B     MSGNEXT        GO PRINT THIS JQE\n*\nMSGHELD  DS    0H\n*\n         CLC   MSGSTYPE(7),=C'OUTGRP='     SHOW OUTPUT GROUP\n         BE    *+14\n         CLC   MSGSTYPE(L'OUTQUE),OUTQUE   ON OUTPUTQUEUE\n         BNE   NEXTJQE        NO, SKIP IT\n*\n         CLC   USERID(6),=CL6'BPSCAN'\n         BE    MSGHELD2       YES, CHECK FOR DUPLICATE NAME\n*\n         CLC   MSGSPCST(4),=C'NRDY'  NO READY OUTPUT\n         BE    MSGHELD3       YES, CHECK FOR BPSCAN\n         CLC   MSGSPCST(4),HOLD      NO READY OUTPUT\n         BE    MSGHELD3       YES, CHECK FOR BPSCAN\n*\n         B     NEXTJQE        NO, SKIP IT\n*\nMSGHELD2 DS    0H\n*\n         CLC   BPSCANJO(8),JOBJNAME\n         BE    NEXTJQE\n         MVC   BPSCANJO(8),JOBJNAME\n         B     MSGHELD3            CHECK FOR HELD OUTPUT\n*\nMSGHELD3 DS    0H\n*\n         CLC   USERID(6),=CL6'BPSCAN'\n         BNE   MSGNEXT        GO PRINT THIS JQE\n*                                     IF USER ID IS BPSCAN\n         CLI   JOBJCLAS,C'P'          LOOK AT CLASS \"P\" JOBS\n         BE    CHKCLASX\n*\n         CLI   JOBJCLAS,C'S'          LOOK AT CLASS \"S\" JOBS\n         BE    CHKCLASX\n*\n         CLI   JOBJCLAS,C'R'          LOOK AT CLASS \"R\" JOBS\n         BE    CHKCLASX\n*\n         CLI   JOBJNAME+7,C'0'        AND PRODUCTION\n         BL    NEXTJQE\n*\nCHKCLASX DS    0H\n*                   AT THIS POINT WE HAVE TO DETERMINE WHETHER THE\n*                   JOB HAS ALREADY BEEN PROCESSED BY BPSCAN.\n*\n         L     R1,JCTPTR\n         USING JEDDSECT,1\n         MVC   JEDMTTR2(4),JOBTRAK\n         LA    R1,JCTPTR\n         LA    R15,14\n         SVC   JESSVC\n*\n         LTR   R15,R15\n         BNZ   ABADJCT\n*\n         L     R1,JCTPTR\n         MVC   JOBUSRID(7),JEDUSEID    SET SUBMITTING USERID\n         OI    JEDATOUT+3,X'0F'  MAKE PRINTABLE\n         UNPK  JOBOUDAT(5),JEDATOUT+1(3)\n         L     R15,IOTPTR\n         MVC   000(256,R15),000(R1)\n         MVC   256(256,R15),256(R1)\n         MVC   512(256,R15),512(R1)\n*\n         LA    R1,IOTPTR\n         LA    R15,15\n         SVC   JESSVC\n*\n         L     R1,IOTPTR\n         LA    R1,JEDBUFF+24   POINT TO DDNAMES\n         USING DDLINE,1\n*\nBPSCAN01 DS    0H\n         CLI   0(R1),X'FF'          END OF ENTRIES?\n         BE    NEXTJQE\n         CLC   DDLDSID(3),=C'003'\n         BE    NEXTJQE\n         CLC   DDLDSID(3),=C'002'\n         BE    BPSCANCL\n*\nBPSCAN02 DS    0H\n         LA    R1,DDLINESZ(,1)       BUMP TO NEXT DD ENTRY\n         B     BPSCAN01\n*\nBPSCANCL DS    0H\n         CLI   DDCLASS,C'X'\n         BNE   BPSCAN02\n*\nINITAHJR DS    0H\n*\n         B     MSGNEXT        OK, KEEP IT\n*\nMSGSLOG  DS    0H\n         CLC   JOBJNAME(8),=CL8'SYSLOG'\n         BE    GETSYSID       YES, GET THE SYSTEM ID\n         B     NEXTJQE        NO, SKIP IT\n*\nMSGACTV  DS    0H\n         CLC   MSGJBTYP(3),DATYPE\n         BNE   NEXTJQE        NO, SKIP IT\n*\nMSGACTVT DS    0H\n*\n         CLI   MSGSTYPE,C'E'   EXECUTING?\n         BE    GETSYSID       GO SET SYSTEM ID\n         CLI   MSGSTYPE,C'A'   ACTIVE\n         BE    GETSYSID       GO SET SYSTEM ID\n         CLI   MSGSTYPE,C'L'   LOGGED ON\n         BE    MSGSTAT2       GO SET SYSTEM ID\n         B     NEXTJQE        NO, SKIP IT\n*\n*                              FIND OUT WHAT SYSTEM IT IS RUNNING ON\nGETSYSID DS    0H\n*\n         TM    JOBFLAG3,QUESYSDS    SYSTEM DATASET\n         BO    MSGNEXT              NO JCT, JOBTRAK POINTS TO IOT\n*\n         L     R1,JCTPTR\n         USING JEDDSECT,1\n         MVC   JEDMTTR2(4),JOBTRAK\n         LA    R1,JCTPTR\n         LA    R15,14\n         SVC   JESSVC\n*\n         L     R1,JCTPTR\n         MVC   JOBUSRID(7),JEDUSEID    SET SUBMITTING USERID\n         OI    JEDATOUT+3,X'0F'  MAKE PRINTABLE\n         UNPK  JOBOUDAT(5),JEDATOUT+1(3)\n         MVC   MSGSPCST(4),JEDEXSID\n         LTR   R15,R15\n         BZ    MSGNEXT\n*\nABADJCT  DS    0H\n         SETMSG JDF005\n         B     SHOWAGN2        DISPLAY THE SCREEN\n*\nMSGINPT  DS    0H\n         CLC   MSGSTYPE(6),INPQUE\n         BNE   NEXTJQE        NO, SKIP IT\n*\n         CLI   DQCLASS,C' '   NO QUEUE SPECIFIED?\n         BE    MSGNEXT        GO PRINT THIS JQE\n*\n         CLC   DQCLASS(1),JOBJCLAS     CORRECT QUEUE?\n         BE    MSGNEXT        GO PRINT THIS JQE\n*\n         B     NEXTJQE        NO, SKIP IT\n*\nMSGDRREQ DS    0H\n         CLI   MSGSNODE,C'N'  REMOTE NODE?\n         BE    NEXTJQE       YES, SKIP IT\n         CLI   MSGSREMT,C'U' REMOTE FSS PRINTER?\n         BE    *+12          YES, INCLUDE IT\n         CLI   MSGSREMT,C'R' REMOTE PRINT/PUNCH?\n         BNE   NEXTJQE        NO, SKIP IT\n*\n         CLC   DRNUM(2),FZEROS   ALL REMOTES?\n         BE    MSGNEXT        GO PRINT THIS JQE\n*\n         CLC   DRNUM(2),JOBREMOT THIS REMOTES?\n         BE    MSGNEXT        GO PRINT THIS JQE\n*\n         B     NEXTJQE        NO, SKIP IT\n*\nMSGDWREQ DS    0H\n*\n         CLI   JOBWTRID,C' ' EXTERNAL WRITER/IDTF?\n         BNH   NEXTJQE       NO, SKIP IT\n*\n         MVC   MSGSREMT(8),JOBWTRID   INDICATE WTR\n         B     MSGNEXT        GO PRINT THIS JQE\n*\nMSGDOREQ DS    0H\n*\n         CLI   JOBWTRID,C' ' EXTERNAL WRITER/IDTF?\n         BNE   NEXTJQE       YES, SKIP IT\n*\n         CLC   MSGSPCST(4),=C'NRDY'  NO READY OUTPUT\n         BE    NEXTJQE       YES, SKIP IT\n         CLI   MSGSNODE,C'N'  REMOTE NODE?\n         BE    NEXTJQE       YES, SKIP IT\n         CLI   MSGSREMT,C'R'  REMOTE QUEUE?\n         BE    NEXTJQE       YES, SKIP IT\n*\n         CLC   MSGSREMT(2),=C'U3'  REMOTE FSS PRINTER?    **FSS**\n         BE    NEXTJQE       YES, SKIP IT\n*\n         CLI   MSGSTYPE+3,C'O' OUTPUT - LOCAL PRINT QUEUE\n         BE    MSGDOCHK       GO CHECK FOR PRINT QUEUE\n         CLI   MSGSTYPE+3,C'P' OUTPUT - ACTUALLY PRINTING\n         BE    MSGDOCHK       GO CHECK FOR PRINT QUEUE\n         CLC   MSGSTYPE(7),=C'OUTGRP='\n         BE    MSGDOCHK       GO CHECK FOR PRINT QUEUE\n         B     NEXTJQE        NO, SKIP IT\n*\nMSGDOCHK DS    0H\n*\n         CLI   MSGOCLAS,C'V'  IS THIS SYSOUT=V?\n         BE    MSGDOCK2       CHECK FOR SPECIFIC CLASS REQUEST\n         CLI   MSGOCLAS,C'W'  IS THIS SYSOUT=W?\n         BE    MSGDOCK2       CHECK FOR SPECIFIC CLASS REQUEST\n         CLI   MSGOCLAS,C'X'  IS THIS SYSOUT=X?\n         BE    MSGDOCK2       CHECK FOR SPECIFIC CLASS REQUEST\n         CLI   MSGOCLAS,C'Y'  IS THIS SYSOUT=Y?\n         BE    MSGDOCK2       CHECK FOR SPECIFIC CLASS REQUEST\n*\n         CLI   DOCLASS,C' '   NO QUEUE SPECIFIED?\n         BE    MSGNEXT        GO PRINT THIS JQE\n*\nMSGDOCK2 DS    0H\n*\n         CLC   DOCLASS(1),MSGOCLAS     CORRECT QUEUE?\n         BE    MSGNEXT        GO PRINT THIS JQE\n         B     NEXTJQE        NO, SKIP IT\n*\nMSGDTREQ DS    0H\n*\n         CLC   MSGSTYPE(L'XMTQUE),XMTQUE   ON INPUT QUEUE FOR XMIT\n         BE    MSGNEXT        GO PRINT THIS JQE\n*\n         CLI   MSGSNODE,C'N'\n         BNE   NEXTJQE        NO, SKIP IT\n         B     MSGNEXT        GO PRINT THIS JQE\n*\nMSGNEXT  DS    0H\n*\n         CLC   JOBFORM(4),=C'STD1'\n         BE    *+10\n         MVC   MSGFORM(4),JOBFORM\n*\n         MVI   MSGBURST,C' '  SET BURST FLAG\n         TM    JOBCFLAG,$JOEBRST  BURST OUTPUT?\n         BE    *+8            NOPE\n         MVI   MSGBURST,C'Y'\n*\n*\n         CLI   MSGSTYPE,C'L'  LOGGED-ON TSO USER?\n         BNE   BALOUTMS       NO, JUST GO PRINT THIS JQE\n*\n         L     R1,FLCCVT      PICK UP CVT\n         USING CVT,1\n         L     R1,CVTUSER     PICK UP CVTUSER\n         USING CVTUSERS,1\n*\n         LTR   R1,1           CVTUSER AREA PRESENT?\n         BZ    BALOUTMS       NO, JUST GO PRINT THIS JQE\n*\n         L     R14,CVTTSOUA          FIRST TSO USER ENTRY\n         L     R15,CVTTSOUN          NUMBER OF ENTRIES\n         USING TSOUSER,14\n*\nCVTULOOP DS    0H\n         CLC   MSGJNME(7),TSOUSRID   MATCH\n         BE    GOTATSOE              USE IT\n*\n         LA    R14,TSOUSLEN(,14)     BUMP TO NEXT ENTRY\n         BCT   R15,CVTULOOP\n         B     NOTATSOE\n*\nGOTATSOE DS    0H\n*\n         CLC   MSGSTYPE(7),=C'OUTGRP='      OUTGROUP?\n         BE    *+10                         YES, LEAVE IT\n         MVC   MSGSTYPE(16),TSOUSRNM+2\n*\nNOTATSOE DS    0H\n*\nBALOUTMS DS    0H\n*\n         PACK  MSGJQTYP(1),JOBTYPE\n         NI    MSGJQTYP,X'0F'\n         MVC   MSGJQTYP+1(1),JOBTYPE\n         NI    MSGJQTYP+1,X'0F'\n         TR    MSGJQTYP(2),HEXTABLE\n*\n         MVC   JOBLINE(80),MESSAGE\n         VPUT  TSEL,JOBLINE\n         TBADD DATABLE1\n         MVI   GOTANYST,C'1'      GOT ONE\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(79),MESSAGE\n         B     NEXTJQE\n*\nHEXTABLE DC    C'0123456789ABCDEF'\n*\nNEXTJQE  DS    0H\n*\n         LA    R6,JOBSIZE(6) A(NEXT JDF JOB RECORD)\n*\n         CLI   0(R6),X'FF'\n         BE    JQEDONE\n*\n         B     CHECKJQE CHECKED ALL RETURNED JQES?\n*\nJQEDONE  DS    0H\n         L     R7,JQESHOLD YES => RETURN\n         BR    R7             TO OUR CALLER\n*\nCHECKRSM DS    0H\n*\n         XC    HR001(HRLEN),HR001   CLEAR OUT THE REMOTE COUNTERS\n*\n         TBCREATE RMTABLE1,RMT1,RMT2\n*\nRSMLOOP  DS    0H\n*\n         CLC   JOBRNODE,FZEROS ROUTCDE OR LOCAL PRINTER?\n         BNE   RSMLOOP1        NO, SEE IF IT IS A REMOTE\n*\n         CLC   JOBREMOT(2),=H'3'  FSS REMOTE?        **FSS**\n         BE    RSMLOOP1           YES, INCLUDE THIS AS A REMOTE\n*\n         B     NEXTRSM         NO, SKIP\n*\nRSMLOOP1 DS    0H\n*\n         CLC   JOBREMOT,FZEROS REMOTE QUEUE?\n         BE    NEXTRSM         NO, SKIP\n*\n         SR    R1,1\n         ICM   R1,3,JOBREMOT   PICK UP REMOTE NUMBER\n*\n         LA    R14,RMTMAX      HIGHEST REMOTE NUMBER\n         CR    R1,R14          COMPARE THIS RMT VS HIGHEST\n         BH    NEXTRSM         TOO HIGH, JUST SKIP\n*\n         SLL   R1,1            MULTIPLY BY 2\n         LA    R1,HRTABLE(R1)  POINT TO COUNTER\n         ICM   R14,3,0(R1)     PICK UP COUNTER\n         LA    R14,1(,R14)     BUMP 1\n         STCM  R14,3,0(R1)     UPDATE COUNTER\n*\nNEXTRSM  DS    0H\n*\n         LA    R6,JOBSIZE(6) A(NEXT JDF JOB RECORD)\n*\n         CLI   0(R6),X'FF'\n         BE    RSMDONE\n*\n         B     RSMLOOP  CHECKED ALL RETURNED JQES?\n*\nRSMDONE  DS    0H\n*\n         LA    R5,HRTABLE+2   POINT TO COUNTERS\n*\n         LA    R6,RMTMAX       LOOP CONTROL\n         SR    R3,R3\n*\nRSMLOOP2 DS    0H\n*\n         MVI   RMT1,C' '\n         MVC   RMT1+1(33),RMT1\n         MVC   RMT2(34),RMT1\n*\n*\n         ICM   R3,3,0(R5)      PICK UP COUNTER\n         LTR   R3,R3\n         BZ    RSMBUMP2        IF ZERO, SKIP\n*\n         CVD   R3,DOUBLEWD\n         OI    DOUBLEWD+7,X'0F'\n         MVC   RMT1(4),EDIT4\n         ED    RMT1(4),DOUBLEWD+6\n*\n         LR    R3,R5\n         LA    R15,HRTABLE\n         SR    R3,R15         SET R3 = TABLE OFFSET\n         SRL   R3,1           SET R3 = REMOTE NUMBER\n*\n         L     R15,RMTABLEA\n         LA    R1,RMTMAX\n*\n         CLM   R3,3,0(R15)\n         BE    *+16\n         LA    R15,26(,R15)\n         BCT   R1,*-12\n         B     *+10\n*\n         MVC   RMT1+4(24),2(R15)\n         BCTR  R6,0\n         LTR   R6,R6\n         BZ    RSMDONE2\n*\n         LA    R5,2(,R5)       BUMP COUNTERS\nRMT2LOOP DS    0H\n         MVI   RMT2,C' '\n         MVC   RMT2+1(33),RMT2\n*\n         ICM   R3,3,0(R5)      PICK UP COUNTER\n         LTR   R3,R3\n         BZ    RSMBUMP3        IF ZERO, SKIP\n*\n         CVD   R3,DOUBLEWD\n         OI    DOUBLEWD+7,X'0F'\n         MVC   RMT2(4),EDIT4\n         ED    RMT2(4),DOUBLEWD+6\n*\n         LR    R3,R5\n         LA    R15,HRTABLE\n         SR    R3,R15         SET R3 = TABLE OFFSET\n         SRL   R3,1           SET R3 = REMOTE NUMBER\n         L     R15,RMTABLEA\n         LA    R1,RMTMAX\n*\n         CLM   R3,3,0(R15)\n         BE    *+16\n         LA    R15,26(,R15)\n         BCT   R1,*-12\n         B     *+10\n*\n         MVC   RMT2+4(24),2(R15)\n*\n         TBADD    RMTABLE1\n*\nRSMBUMP2 DS    0H\n         LA    R5,2(,R5)       BUMP COUNTERS\n         BCT   R6,RSMLOOP2     DO THEM ALL\n*\n         B     RSMDONE2\n*\nRSMBUMP3 DS    0H\n         LA    R5,2(,R5)       BUMP COUNTERS\n         BCT   R6,RMT2LOOP     DO THEM ALL\n*\n         MVI   RMT2,C' '\n         MVC   RMT2+1(33),RMT2\n*\n         TBADD    RMTABLE1\n*\nRSMDONE2 DS    0H\n         TBTOP    RMTABLE1\n         TBDISPL  RMTABLE1,JDFRMT\n*\n         TBEND    RMTABLE1\n*\n         MVC   COMMAND(2),CMDSAVE    SAVE THE PREVIOUS COMMAND\n         B     SHOWAGN2        RESHOW OPTION MENU\n*\n         TITLE 'JDF -  JQE DISPLAY USING TABLE MGMT SERVICES'\nSHOWISP  DS    0H\n         CLI   GOTANYST,C'0'\n         BNE   GOTSOMEJ\n*\nGOTNONE  DS    0H\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(79),MESSAGE\n         MVC   MESSAGE+5(13),=CL13'NO JOBS FOUND'\n         MVC   JOBLINE(80),MESSAGE\n         VPUT  TSEL,JOBLINE\n         TBADD DATABLE1\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(79),MESSAGE\n         B     GOTSOMEJ\n*\nNEXTLINE DS    0H\n         L     R15,DISPLRC   PICK UP LAST PREVIOUS RETURN CODE.\n         LTR   R15,15        ALL DONE?\n         BZ    SHOWAGN2      YES, RESHOW THE JOB TABLE.\n*                            NO, RETRIEVE THE NEXT JOB SELECTED.\n         MVI   JOBLINE,C' '\n         MVC   JOBLINE+1(77),JOBLINE\n         MVC   TSEL(3),SPACES     SET SELECTION CODE TO SPACES\n*\n*\n         TBDISPL DATABLE1,ENDKEY=SHOWAGIN\n         ST    R15,DISPLRC     SAVE RETURN CODE\n         B     TSTRTRNC        TEST RETURN CODES\n*\nGOTSOMEJ DS    0H\n         TBTOP DATABLE1\nNODATOP  DS    0H\n         TBDISPL DATABLE1,JDFDATAB,ENDKEY=SHOWAGIN\n         ST    R15,DISPLRC     SAVE RETURN CODE\n         B     TSTRTRNC        TEST RETURN CODES\nDNOTAUTH DS    0H\n         SETMSG JDF002\n         B     SHOWAGN2        DISPLAY THE SCREEN\n*\nTSTRTRNC DS    0H\n*\n         C     R15,FZEROS      COMMAND ENTERED/ 1 LINE SELECTED?\n         BE    GOTSTUFF        YUP\n         C     R15,F4          COMMAND ENTERED/ LINES SELECTED?\n         BE    GOTSTUFF        YUP\n*\n         B     SHOWAGIN        RESHOW OPTION MENU\n         TITLE 'JDF -  COMMAND INPUT PROCESSING'\n*\nGOTSTUFF DS    0H\n*\n         MVC   SELSAVE(3),TSEL       SAVE SEL CODE\n         OC    SELSAVE(3),SPACES   UPPER-CASE IT\n         MVC   TSEL(3),SPACES     SET SELECTION CODE TO SPACES\n*\n         MVC   MESSAGE(LMESSAGE),JOBLINE\n*\n         MVC   JOBNUMS(5),JOBLINE+3  SAVE JES JOB NUMBER\n         OC    JOBNUMS(5),CZEROS     SET LEADING ZEROS\n         PACK  JOBNUMP(8),JOBNUMS\n         CVB   R1,JOBNUMP\n         STH   R1,JOBNUMH\n*\n         MVC   JOBNAMS(8),JOBLINE+9  SAVE JOB NAME\n         MVC   JOBID(3),JOBLINE      SAVE JOB TYPE, STC, TSU, OR JOB\n*\n         OC    JCMD(40),SPACES       UPPER-CASE COMMAND INPUT\n*\n         CLC   SELSAVE(3),SPACES   IF SEL OPTION ENTERED,\n         BNE   GOTSELCD            GO PROCESS IT.\n*\n         CLI   JCMD,C' '             IS IT BLANK\n         BE    SHOWAGN2            JUST REPEAT THE DISPLAY\n         B     GOTCOMND       ELSE A COMMAND WAS ENTERED\n*\nGOTSELCD DS    0H\n*\n* IF NOT A COMMAND, THEN A LINE SELECTION CODE MUST HAVE BEEN\n* ENTERED. I HAVE THE CURRENT LINE, SO EDIT THE SELECTION CODE.\n*\n         CLI   JOBID,C' '     IF NO JOB TYPE,\n         BE    NEXTLINE           MUST BE A MISTAKE\n*\n         B     USERAUTH       GO CHECK AUTHORITY\n*\n         TITLE 'JDF -  CHECK USER COMMAND AUTHORITY'\nUSERAUTH DS    0H\n*\n* SINCE THERE IS NO JOB NAME CONVENTION THAT TIES IN THE USERID,\n* WE HAVE TO READ IN THE JCT.\n*\n         L     R1,JJSPARM           PICK UP JQE BUFFER\n         USING JJSDSECT,1\n         LA    R6,JJSLINE1\n         LA    R6,JOBSIZE(,6) BUMP\n         USING JOBDSECT,6     ADDRESSABILITY\n*\nJCGETJQE DS    0H\n         CLC   JOBJOBNO(2),JOBNUMH\n         BE    JCTPOINT       YUP\n         LA    R6,JOBSIZE(,6) BUMP\n         CLI   0(R6),X'FF'     END OF LIST\n         BE    NEXTLINE\n         B     JCGETJQE        LOOP\n*\n*\nJCTPOINT DS    0H\n         CLC   FZEROS(4),JOBTRAK    JCT DISK ADDRESS\n         BE    NEXTLINE\n*\n         L     R1,JCTPTR\n         USING JEDDSECT,1\n*\n         XC    JEDBUFF(18),JEDBUFF\n         TM    JOBFLAG3,QUESYSDS    SYSTEM DATASET\n         BZ    JCTSVCOK             JOBTRAK POINTS TO JCT\n*\n*                                   NO JCT, JOBTRAK POINTS TO IOT\n         MVC   JEDIOT(4),JOBTRAK\n         B     IAMAUTH\n*\nJCTSVCOK DS    0H\n*\n         MVC   JEDMTTR2(4),JOBTRAK\n         LA    R1,JCTPTR\n         LA    R15,14\n         SVC   JESSVC\n*\n         LTR   R15,R15\n         BNZ   ABADJCT\n*\n         L     R1,JCTPTR\n         MVC   JOBUSRID(7),JEDUSEID    SET SUBMITTING USERID\n         OI    JEDATOUT+3,X'0F'  MAKE PRINTABLE\n         UNPK  JOBOUDAT(5),JEDATOUT+1(3)\n         MVC   JDFJBKEY(4),JEDJBKEY  SAVE KEY OF OUTPUT\n*\n* ANYONE CAN LOOK AT DDNAME LIST FOR ANY JOB\n*\n         CLI   SELSAVE,C'S'   IS IT SHOWJOB\n         BE    SHOWJOB        THEN GO DO IT\n         CLI   SELSAVE,C'B'   IS IT SHOWJOB\n         BE    SHOWJOB        THEN GO DO IT\n*\n* RULE 2==>  OPERATIONS USERID'S BEGIN WITH THE CHARACTERS BELOW.\n*            OPERATIONS USERS CAN ENTER ANY COMMANDS FOR ANY JOBS.\n*\n*\n         CLC   USERID(3),=C'MVS'     OPERATIONS\n         BE    IAMAUTH          YUP\n         CLC   USERID(2),=C'AO'      OPERATIONS\n         BE    IAMAUTH          YUP\n         CLC   USERID(2),=C'BP'      PRODSERV USER-ID\n         BE    IAMAUTH          YUP\n         CLC   USERID(2),=C'BO'      PRODSERV USER-ID\n         BE    IAMAUTH          YUP\n         CLC   USERID(2),=C'AP'      PRODSERV USER-ID\n         BE    IAMAUTH          YUP\n*\n*\n* RULE 3==>  SOFTWARE ENGINEERING CAN ISSUE ANY COMMAND AGAINST ANY JOB\n*\n*\n         CLC   USERID(2),=C'AS'      SOFTWARE ENGINEERING\n         BE    IAMAUTH          YUP\n*\n* CHANGING PRINT PRIORITY IS RESTRICTED\n*\n         CLC   SELSAVE(3),=C'PUP'   IS IT INCREASE PRINT PRIORITY\n         BE    DNOTAUTH              RESTRICTED TO OPERATIONS, SOFTWARE\n*\n* IF SUBMITTING USERID FIELD IS BLANK, DON'T CHECK USER FOR AUTHORITY\n*\n         CLI   JEDUSEID,C' '        ID FIELD BLANK?\n         BE    IAMAUTH          YUP\n*\n* IF SUBMITTING USERID FIELD MATCHES MY USERID, I OWN IT\n*\n         CLC   JEDUSEID(5),USERID   SUBMITTING USER-ID VS MINE\n         BE    IAMAUTH              YES, ALLOW ACCESS\n*\n* IF JOB NAME MATCHES MY USERID, I OWN IT\n*\n         CLC   JOBNAMS(5),USERID    JOB NAME VERSUS USER-ID\n         BE    IAMAUTH              YES, ALLOW ACCESS\n*\n         B     DNOTAUTH              RESTRICTED TO OPERATIONS, SOFTWARE\n*\nIAMAUTH  DS    0H\n*\n         CLI   SELSAVE,C'I'   IS IT SHOW INITIATORS\n         BE    SHOWDIF        THEN GO DO IT\n*\n         CLI   SELSAVE,C'A'   IS IT A \"$AJ\" COMMAND\n         BE    ACTAJOB        THEN GO DO IT\n*\n         CLC   SELSAVE(3),=CL3'RDR'   IS IT ROUTE TO CMS SPOOL\n         BE    JOBRDR         THEN GO DO IT\n*\n         CLI   SELSAVE,C'C'   IS IT A CANCEL\n         BE    JOBCAN         THEN GO DO IT\n*\n         CLI   SELSAVE,C'H'   IS IT A \"$HJ\"\n         BE    HOLDAJOB       THEN GO DO IT\n*\n         CLC   SELSAVE(3),=C'PUP'    BUMP PRINT PRIORITY\n         BE    PRTPRIO               GO DO IT\n*\n         CLC   SELSAVE(2),=C'OJ'     CHANGE PRINT CLASS\n         BE    JOBOJ                 GO DO IT\n*\n         CLI   SELSAVE,C'P'   IS IT A PURGE\n         BE    JOBPUR         THEN GO DO IT\n*\n         CLC   SELSAVE(3),=CL3'RLS'   IS IT RELEASE FROM HELD STATUS\n         BE    JOBRLS         THEN GO DO IT\n*\n         CLI   SELSAVE,C'R'   IS IT A REQUEUE\n         BE    JOBREQ         THEN GO DO IT\n*\n         CLI   SELSAVE,C'T'   IS IT A \"$TJ\" COMMAND\n         BE    JOBTJ          THEN GO DO IT\n*\n         CLI   SELSAVE,C'D'   IS IT A \"$DUMP\" COMMAND\n         BE    JOBDUMP        THEN GO DO IT\n*\n         SETMSG JDF007\n         B     SHOWAGN2        DISPLAY THE SCREEN\n*\n         TITLE 'JDF -  INVOKE XDF (EXECUTION DISPLAY)'\n*\nSHOWXDF  DS    0H\n*\n         LINK EP=XDF\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  INVOKE XDF (EXECUTION DISPLAY)'\n*\nSHOWDIF  DS    0H\n*\n         LINK EP=DIF\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  INVOKE      CONSOLE DISPLAY)'\n*\nSHOWCONS DS    0H\n*\n         LINK EP=CDF\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  PERFORM $OJ PROCESSING'\n*\nJOBOJ    DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVC   CMDLINE(3),=C'$TO'    ALTER\n         MVC   CMDLINE+3(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+4(5),JOBNUMS    JES NUMBER\n         MVC   CMDLINE+09(7),=C',ALL,Q='   ALL OUTPUTS\n         MVC   CMDLINE+16(1),SELSAVE+2 NEW CLASS\n*\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n*\n         TITLE 'JDF -  PERFORM $DUMP PROCESSING'\n*\nJOBDUMP  DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVC   CMDLINE(8),=C'$DUMP,J=' COMMAND\n         MVC   CMDLINE+8(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+9(5),JOBNUMS    JES NUMBER\n*\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n*\n         TITLE 'JDF -  PERFORM $TJ PROCESSING'\nJOBTJ    DS    0H\n*\n         CLI   SELSAVE+1,C'C' IS IT A \"$TJ000,C=X\" COMMAND\n         BE    JOBTJC         THEN GO DO IT\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n*\nJOBTJC   DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVI   CMDLINE+1,C'T'          ALTER\n         MVC   CMDLINE+2(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+3(5),JOBNUMS    JES NUMBER\n         MVC   CMDLINE+8(3),COMMAC     SYNTAX\n         MVC   CMDLINE+11(1),SELSAVE+2 NEW CLASS\n*\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  INCREASE PRIORITY'\n*\nPRTPRIO  DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVI   CMDLINE+1,C'T'          ALTER\n         MVC   CMDLINE+2(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+3(5),JOBNUMS    JES NUMBER\n         MVC   CMDLINE+8(6),PUPDATA    P=99\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  HOLD A JOB'\n*\nHOLDAJOB DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVI   CMDLINE+1,C'H'          HOLD\n         MVC   CMDLINE+2(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+3(5),JOBNUMS    JES NUMBER\n*\n*\nHOLDAJBC DS    0H\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  RELEASE A HELD JOB'\n*\nACTAJOB  DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVI   CMDLINE+1,C'A'          HOLD\n         MVC   CMDLINE+2(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+3(5),JOBNUMS    JES NUMBER\n*\n*\nACTAJOBC DS    0H\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n*\n         TITLE 'JDF -  JOB CANCEL    PROCESSING'\nJOBCAN   DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVI   CMDLINE+1,C'C'        CANCEL\n         MVC   CMDLINE+2(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+3(5),JOBNUMS    JES NUMBER\n*\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n         B     NEXTLINE       GO REPEAT THE SCREEN\nABEND5   ABEND 5,DUMP,STEP\nABEND6   ABEND 6,DUMP,STEP\n         TITLE 'JDF -  JOB PURGE     PROCESSING'\nJOBPUR   DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVI   CMDLINE+1,C'P'          PURGE\n         MVC   CMDLINE+2(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+3(5),JOBNUMS    JES NUMBER\n*\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  RELEASE HELD OUTPUT FOR A JOB'\nJOBRLS   DS    0H\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n        TITLE 'JDF -  ROUTE A JOBS OUTPUT TO A CMS USERS READER QUEUE'\nJOBRDR   DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVC   CMDLINE+1(7),=C'RALL,J=' ELEASE\n         MVC   CMDLINE+8(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+9(5),JOBNUMS    JES NUMBER\n         MVC   CMDLINE+14(6),=C',D=CIS'\n*\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  JOB REQUEUE   SUBROUTINE'\nJOBREQ   DS    0H\n*\n         MVC   RDEST(5),SPACES       SET FLAG\n*\n         CLI   SELSAVE+1,C'Q'         IS THIS \"RQ\"\n         BE    RQ1BYTE                YUP, ONE-BYTE FORMAT\n         CLI   SELSAVE+1,C'U'         IS THIS \"RU\" (LOCAL PRINTER)\n         BE    RU1BYTE                YUP, ONE-BYTE FORMAT\n*\nRQ2BYTE  DS    0H\n*   RE-QUEUE COMMAND WAS CODED AS \"R00\", WHERE \"00\" = RMT#\n         MVC   RDEST(2),SELSAVE+1     SAVE THE DEST\n         MVI   SELSAVE+2,C'A'         SET NEW CLASS\n         B     CLSREQ                 GO DO IT\n*\nRQ1BYTE  DS    0H\n*   RE-QUEUE COMMAND WAS CODED AS \"RQ0\", WHERE \"0\" = RMT# OR CLASS\n*\n         CLI   SELSAVE+2,C'0'        AM I CHANGING THE CLASS?\n         BL    CLSREQ               NOT NUMERIC, JUST CHANGE THE CLASS\n*\n*  I AM RE-QUEUEING TO A NUMERIC VALUE, SO IT MUST BE A REMOTE DEST.\n*\n         MVC   RDEST(1),SELSAVE+2     SAVE THE DEST\n         MVI   SELSAVE+2,C'A'         SET NEW CLASS\n*\n         B     CLSREQ                 GO DO IT\n*\nRU1BYTE  DS    0H\n*   RE-QUEUE COMMAND WAS CODED AS \"RU0\", WHERE \"0\" = LOCAL PRINTER\n*\n         CLI   SELSAVE+2,C'0'        AM I CHANGING THE CLASS?\n         BL    CLSREQ               NOT NUMERIC, JUST CHANGE THE CLASS\n*\n*  I AM RE-QUEUEING TO A NUMERIC VALUE, SO IT MUST BE A REMOTE DEST.\n*\n         MVC   RUDEST(1),SELSAVE+2     SAVE THE DEST\n         MVI   SELSAVE+2,C'A'         SET NEW CLASS\n*\nCLSREQ   DS    0H\n*\n         CLI   SELSAVE+2,X'C0'         ALPHANUMERIC CLASS\n         BH    *+8                     YUP\n         MVI   SELSAVE+2,C'A'          NOPE, SO SET IT TO DEFAULT\n*\n         B     SETSSOB        YUP\n*\nSETSSOB  DS    0H\n***                                                                 ***\n*   SET UP SSOB TO ISSUE IEFSSREQ TO REQUEUE A JOB                    *\n***                                                                 ***\n*\n         L     R14,SSOBPTR\n         USING SSOB,14\n         LA    R15,SSOBHSIZ(,R14)\n         USING SSOBGN,15\n*\n* SET UP SUB-SYSTEM REQUEST HEADER\n*\n         XC    SSOBEGIN(SSOBHSIZ),SSOBEGIN\n         MVC   SSOBID(4),=C'SSOB'\n         LA    R1,SSOBHSIZ\n         STH   R1,SSOBLEN\n         MVC   SSOBFUNC(2),H1        SET FUNCTION TO SYSOUT\n         ST    R15,SSOBINDV          SET PROCESS-SYSOUT ADDRESS\n*\n* SET UP PROCESS-SYSOUT CONTROL BLOCK\n*\n         XC    SSSOBGN(SSSOSIZE),SSSOBGN\n*\n         LA    R1,SSSOSIZE\n         STH   R1,SSSOLEN\n*\n         MVC   SSSOPGMN,SPACES     INITIALIZE WRITER NAME TO BLANKS\n         MVC   SSSOLEN(2),=AL2(SSSOSIZE)\n         OI    SSSOUFLG,SSSOSETC\n         OI    SSSOUFLG,SSSORLSE\n         OI    SSSOFLG1,SSSOHLD\n         OI    SSSOFLG1,SSSOSJBN\n         OI    SSSOFLG1,SSSOSJBI\n         OI    SSSOFLG1,SSSOSCLS  INCLUDE CLASS\n         MVC   SSSOCLSL,SPACES     INITIALIZE CLASS LIST TO BLANKS\n         MVI   SSSOCLSL,C'X'          SET CLASS TO \"X\" ONLY\n         OI    SSSOFLG2,SSSOCTRL\n         MVC   SSSOJOBN(8),JOBNAMS JOB NAME\n         MVC   SSSOJOBI+3(5),JOBNUMS JOB ID\n         MVC   SSSOJOBI(3),JOBID JOB TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   SSSOCLAS(1),SELSAVE+2 SET NEW CLASS\n*\n         CLI   SSSOCLAS,C'W'         IS THIS BPSCAN\n         BNE   CKRDEST\n         MVC   SSSODEST(8),=CL8'N1   '\n         OI    SSSOUFLG,SSSOROUT  USE DESTINATION\n         B     DOSSREQ1\n*\nCKRDEST  DS    0H\n***                                                                 ***\n**       NOW CHECK TO SEE WHETHER I AM CHANGING THE CLASS OR DEST\n***                                                                 ***\n         CLI   SELSAVE+1,C'U'         IS THIS \"RU\" (LOCAL PRINTER)\n         BE    SETUDEST               YES\n         CLI   RDEST,C' '     IS THERE A REMOTE DEST\n         BE    DOSSREQ1       NOPE\n         MVC   SSSODEST(8),RQRMT\n         OI    SSSOUFLG,SSSOROUT  USE DESTINATION\n         B     DOSSREQ1       GO DO IT\n*\nSETUDEST DS    0H\n*\n         MVC   SSSODEST(8),RURMT\n         OI    SSSOUFLG,SSSOROUT  USE DESTINATION\n         B     DOSSREQ1       GO DO IT\n*\nDOSSREQ1 DS    0H\n***                                                                 ***\n**     IEFSSREQ                                                      **\n***                                                                 ***\n         LA    R1,SSOBPTR\n         LA    R15,4               SSREQ FLAG\n         SVC   JESSVC\n*\n         ST    R15,SSREQRC         SAVE RETURN CODE\n*\n         SR    R15,15              CLEAR REGISTER\n         C     R15,SSREQRC         DID I HAV RC=0 FROM SSREQ?\n         BNE   BADREQ              NOPE\n         C     R15,SSOBRETN        DID I HAV RC=0 FROM SSREQ?\n         BNE   BADREQ              NOPE\n         B     NEXTLINE       GO REPEAT THE SCREEN\n*\nBADREQ   DS    0H\n*\n         MVC   SSOBWTO2(SSOBWTOL),SSOBWTO1\n*\n         L     R15,SSREQRC\n         CVD   R15,DOUBLEWD\n         OI    DOUBLEWD+7,X'0F'\n         UNPK  SSOBWTO2+14(3),DOUBLEWD+6(2)\n*\n         L     R15,SSOBRETN\n         CVD   R15,DOUBLEWD\n         OI    DOUBLEWD+7,X'0F'\n         UNPK  SSOBWTO2+35(3),DOUBLEWD+6(2)\n*\n         WTO   ,MF=(E,SSOBWTO2)\n*\n         SETMSG JDF001\n         B     NEXTLINE       GO REPEAT THE SCREEN\nENDREQ   DS    0H\n         B     NEXTLINE       GO REPEAT THE SCREEN\n*\nSSOBWTO1 WTO   'SSREQRC=          , SSOBRETN=         ',ROUTCDE=11,MF=L\nSSOBWTOL EQU   *-SSOBWTO1\n*\nGOTCOMND DS    0H\n*\n         MVC   CMDSAVE(2),COMMAND    SAVE THE PREVIOUS COMMAND\n*\n         CLC   JCMD(4),=C'DUMP'      IS IT A DUMP REQUEST\n         BE    S0C1                  YUP, JUST GET A S0C1\n*\n         CLI   JCMD,C'R'             IS IT A \"R\" FOR REPEAT\n         BE    RPTCOMND              YUP, JUST REPEAT\n*\n         MVC   SELSAVE(40),JCMD      MOVE IT IN\n         MVC   DOCLASS(1),JCMD+2     OUTPUT CLASS\nRESETCMD DS    0H\n*\n         CLC   SELSAVE(2),=C'DC'\n         BE    SHOWCONS       GO SELECT THE SCREEN\n*\n         CLC   SELSAVE(2),=C'DI'\n         BE    SHOWDIF        GO SELECT THE SCREEN\n*\n         CLC   SELSAVE(2),=C'DX'\n         BE    SHOWXDF        GO SELECT THE SCREEN\n*\nRESETCM1 DS    0H\n         CLC   SELSAVE(3),=C'JOB'\n         BNE   RESETCM2       NOPE\n*\n         MVC   COMMAND(2),DAREQ\n         MVC   DATYPE(3),=C'JOB'\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\nRESETCM2 DS    0H\n*\n         CLC   SELSAVE(3),=C'STC'\n         BNE   RESETCM3       NOPE\n*\n         MVC   COMMAND(2),DAREQ\n         MVC   DATYPE(3),=C'STC'\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\nRESETCM3 DS    0H\n*\n         CLC   SELSAVE(3),=C'TSU'\n         BNE   RESETCM4       NOPE\n*\n         MVC   COMMAND(2),DAREQ\n         MVC   DATYPE(3),=C'TSU'\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\n*\nRESETCM4 DS    0H\n*\n         MVC   COMMAND(2),DAREQ\n         CLC   SELSAVE(2),DAREQ\n         BE    SHOWAGN2       GO SELECT THE SCREEN\n*\n         MVC   COMMAND(2),DEREQ\n         CLC   SELSAVE(2),DEREQ\n         BE    SHOWAGN2       GO SELECT THE SCREEN\n*\n         MVC   COMMAND(2),DHREQ\n         CLC   SELSAVE(2),DHREQ\n         BE    SHOWAGN2       GO SELECT THE SCREEN\n*\n         MVC   COMMAND(2),DOREQ\n         CLC   SELSAVE(2),DOREQ\n         BE    SHOWAGN2       GO SELECT THE SCREEN\n*\n         CLC   SELSAVE(2),DQREQ\n         BE    SHOWDQRQ       GO SELECT THE SCREEN\n*\n         CLC   SELSAVE(2),DRREQ\n         BE    SHOWDRRQ       GO SELECT THE SCREEN\n*\n         MVC   COMMAND(2),DTREQ\n         CLC   SELSAVE(2),DTREQ\n         BE    SHOWAGN2       GO SELECT THE SCREEN\n*\n         MVC   COMMAND(2),DLREQ\n         CLC   SELSAVE(2),DLREQ\n         BE    SHOWAGN2       RESHOW THE SCREEN\n*\n         MVC   COMMAND(2),DWREQ\n         CLC   SELSAVE(2),DWREQ\n         BE    SHOWAGN2       RESHOW THE SCREEN\n*\n         MVC   COMMAND(2),=C'QS'\n         CLC   SELSAVE(2),COMMAND\n         BE    SHOWAGN2       RESHOW THE SCREEN\n*\n         MVC   COMMAND(2),STREQ\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\nSHOWDORQ DS    0H\n*\n         MVC   COMMAND(2),DOREQ\n         MVI   DOCLASS,C' '\n*\n         CLI   SELSAVE+2,C' ' SPECIFIC REMOTE SELECTED?\n         BE    SHOWAGN2       NO, JUST GO SELECT THE SCREEN\n*\n         MVC   DOCLASS(1),SELSAVE+2      SET CLASS\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\nSHOWDQRQ DS    0H\n*\n         MVC   COMMAND(2),DQREQ\n         MVI   DQCLASS,C' '\n*\n         CLI   SELSAVE+2,C' ' SPECIFIC REMOTE SELECTED?\n         BE    SHOWAGN2       NO, JUST GO SELECT THE SCREEN\n*\n         MVC   DQCLASS(1),SELSAVE+2      SET CLASS\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\nSHOWDRRQ DS    0H\n*\n         MVC   COMMAND(2),DRREQ\n         XC    DRNUM(2),DRNUM\n*\n         CLI   SELSAVE+2,C' ' SPECIFIC REMOTE SELECTED?\n         BE    SHOWAGN2       NO, JUST GO SELECT THE SCREEN\n*\n         CLI   SELSAVE+2,C'0' NON-NUMERIC REMOTE SELECTED?\n         BL    SHOWAGN2       YES, JUST SHOW ALL REMOTES\n         CLI   SELSAVE+2,C'9' NON-NUMERIC REMOTE SELECTED?\n         BH    SHOWAGN2       YES, JUST SHOW ALL REMOTES\n*\n         PACK  DOUBLEWD,SELSAVE+2(1)   SET REMOTE NUMBER\n         CLI   SELSAVE+3,C'0' 1-BYTE REMOTE NUMBER?\n         BL    DRR1POS\n         CLI   SELSAVE+3,C'9' 1-BYTE REMOTE NUMBER?\n         BH    DRR1POS\n         PACK  DOUBLEWD,SELSAVE+2(2)   SET REMOTE NUMBER\n*\nDRR1POS  DS    0H\n*\n         CVB   R1,DOUBLEWD\n         STCM  R1,3,DRNUM\n*\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\nS0C1     DC    H'0'                  SOC1\n*\nRPTCOMND DS    0H\n         MVI   JOBLINE,C' '   CLEAR TAB ENTRY AREA\n         MVC   JOBLINE+1(79),JOBLINE\n*\n         TBEND DATABLE1\n         MVI   ATABFL,C'0'        NO ACTIVE TABLE\n*\n         XC    ISPARMS(40),ISPARMS\n         B     SHOWAGN2       GO REPEAT THE SCREEN\n         TITLE 'JDF -  BUILD DDNAME TABLE'\nSHOWJOB  DS    0H\n*\n*              INITIALIZE CONSTANTS FOR A NEW JOB\n*\n*\n         MVC   CONDZERO(3),P3ZERO INITIALIZE COUNTERS\n         MVC   CONDNUM(3),P3ZERO  INITIALIZE COUNTERS\n         MVC   CATNUM(12),CONDNUM                     FOR BPSCAN\n*\n         TBCREATE DDTABLE1,DSEL,DDNLINE\n*        TBVCLEAR DDTABLE1\n*\n         MVI   DTABFL,C'1'        AN ACTIVE TABLE\n*\n         TITLE 'JDF -  DISPLAY DDNAME TABLE USING TABLE MGMT SERVICES'\n*\n*  JCT HAS ALREADY BEEN READ IN, AND IOT AND SPIN IOT POINTERS\n*\n*\n         L     R1,JCTPTR\n         L     R15,IOTPTR\n         MVC   000(256,R15),000(R1)\n         MVC   256(256,R15),256(R1)\n         MVC   512(256,R15),512(R1)\n*\n         LA    R1,IOTPTR\n         LA    R15,15\n         SVC   JESSVC\n*\n         L     R1,IOTPTR\n         USING JEDDSECT,1\n*\n         LA    R8,JEDBUFF+24   POINT TO DDNAMES\n         USING DDLINE,8\n*\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(79),MESSAGE\n         MVC   MESSAGE(17),=CL17'COND CODE SUMMARY'\n         MVC   DDNLINE(80),MESSAGE\n         VPUT  DSEL,DDNLINE\n         TBADD DDTABLE1\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(79),MESSAGE\n         MVI   SLOGFLAG,0     FIRST TIME THROUGH\n*\nDODDLOOP DS    0H\n*\n         CLI   0(R8),X'FF'        END OF ENTRIES\n         BE    DODDS1ST           YES, SHOW TABLE\n*\n         CLI   SLOGFLAG,0     FIRST TIME THROUGH\n         BNE   NOTSLOGD       NO\n         CLC   JOBNAMS(7),=C'SYSLOG '\n         BNE   NOTSLOGD\n         CLI   DDLDSID,C'9'       FIRST SPIN DSID\n         BNE   NOTSLOGD\n*\n         MVI   PROCNAME-1,X'03'          HIGHLIGHT\n         MVC   PROCNAME(8),ACTIVE        THE PROCSTEPNAME\n         MVC   STEPNAME(8),=CL8'SYSLOG'  THE STEPNAME\n         MVI   SLOGFLAG,1 NOT FIRST TIME THROUGH\n*\nNOTSLOGD DS    0H\n*\n         MVC   MESSAGE(DDLINSHO),0(R8)\n         MVC   DDNLINE(80),MESSAGE\n         VPUT  DSEL,DDNLINE\n         TBADD DDTABLE1\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(79),MESSAGE\n         LA    R8,DDLINESZ(,R8)    BUMP TO NEXT\n         B     DODDLOOP\n*\nDODDS1ST DS    0H\n         LM    R4,R8,SAVE5        RESTORE THE WORK REGISTERS\n         MVI   COPYFLAG,0     FIRST TIME THROUGH\n*\nSHODDTAB DS    0H\n         TBTOP DDTABLE1\n*\n         MVI   DSIDEOF,0      NOT EOF\n*\n         CLC   LVL(6),=C'BPSCAN'       USERID IS BPSCAN??\n         BNE   SHODDTBS      DISPLAY THE DD TABLE\n*\n         CLC   COMMAND(2),DHREQ        HELD JOB DISPLAY??\n         BNE   SHODDTBS      DISPLAY THE DD TABLE\n*\n         CLI   SELSAVE,C'B'            BPSCAN SELECT??\n         BNE   SHODDTBS      DISPLAY THE DD TABLE\n*\n         B     GOTDSOPR       GO DO THE BPSCAN DISPLAY\n*\nSHODDTBS DS    0H\n         TBDISPL DDTABLE1,JDFDDTAB,ENDKEY=DDALLDON\n         B     DDTSTRTN       YUP, GO PROCESS IT\nDDMSG2   DS    0H\n         SETMSG JDF002\n         B     SHODDTBS\nDDTSTRTN DS    0H  TEST RETURN CODE FROM DISPLAY\n         C     R15,FZEROS     COMMAND ENTERED/LINE MODIFIED??\n         BE    GOTDDSEL       YUP, GO PROCESS IT\nDDALLDON DS    0H\n*\n*    DONE PROCESSING THE DDNAME MENU, SO\n*    RE-SHOW THE PRIMARY OPTION SELECTED\n*\n         L     R15,DISPLRC   PICK UP LAST PREVIOUS RETURN CODE.\n         LTR   R15,15        ALL DONE?\n         BZ    NODATOP       YES, JUST RESHOW THE DA TABLE\n         B     NEXTLINE      NO, RETRIEVE THE NEXT JOB SELECTED.\n*\n         TITLE 'JDF -  PROCESS DDNAME TABLE SELECTION OPTIONS'\nGOTDDSEL DS    0H\n*\n         MVI   READ1ST,0          SET FIRST-TIME-THROUGH\n*\n         MVC   SELSAVE(3),DSEL       SAVE SELECTION OPTION\n         MVC   DSEL(3),SPACES     SET SELECTION CODE TO SPACES\n         OC    SELSAVE(3),SPACES     SAVE SELECTION OPTION\n         CLC   SELSAVE(3),SPACES     NOTHING ENTERED\n         BE    SHODDTAB       REPEAT THE DD TABLE\n         MVC   DDSDSID(3),DDNLINE    SAVE JES DSID NUMBER\n         MVC   BRODSID(3),DDSDSID        SAVE IT FOR BROWSE\n*\n         CLC   DDSDSID(3),=C'CTL'    CONTROL BLOCK DISPLAY?\n         BE    GOTDSCTL\n*\n         CLC   DDSDSID(3),=C'CON'    BPSCAN DISPLAY?\n         BE    GOTDSOPR\n*\nADDNEDD  DS    0H\n*\n         L     R1,IOTPTR\n         USING JEDDSECT,1\n         LA    R8,JEDBUFF+24   POINT TO DDNAMES\n         USING DDLINE,8\n*\nDSIDLOOP DS    0H\n         CLI   0(R8),X'FF'               END OF TABLE?\n         BE    DDALLDON                  YES\n         CLC   DDLDSID(3),DDSDSID        DSID MATCH?\n         BE    GOTDSID                   YES\n*\n         LA    R8,DDLINESZ(,R8)          DSID MATCH?\n         B     DSIDLOOP                  YES\n*\nGOTDSID  DS    0H\n*\n         MVC   JOBDDNAM(8),DDN           MOVE DDNAME TO TITLE\n*\n         LA    R5,DDMTTR                POINT TO THE BLOCK\n         MVC   READAREA(4),IXTPTR        MOVE IN THE READ BUFFER\n         MVC   READMTTR(4),DDMTTR        MOVE IN THE READ MTTR\n         MVC   SMBLRECL+2(2),DDLRECL     MOVE IN PDDB LRECL\n*\n         CLC   USERID(5),JOBNAMS     JOBNAME BEGINS WITH USERID?\n         BE    DDAUTHOK         YUP\n*\n*    INVOKE \"JDFCHECK\" MODULE TO ALLOW/DISALLOW ACCESS TO DSID\n*\n         L     R15,JCTPTR\n         USING JEDDSECT,15\n         CALL  JDFCHECK,(JEDUSEID,JOBNAMS,USERID,DDN,DDLDSID,PREFIX,DDRX\n               EMOTE,DDCLASS),VL,MF=(E,ISPARMS)\n         DROP  15\n*\n         LTR   R15,R15          IF ZERO RETURN CODE\n         BZ    DDAUTHOK         ALLOW ACCESS\n         B     DDMSG2           OTHERWISE, GIVE AUTH FAILED MSG\nDDAUTHOK DS    0H\n*\n*    IF AUTH OK, DEFINE THE DATASET TABLE\n*\n         XC    GOTSOME(2),GOTSOME NO RECORDS WRITTEN\n*\n         CLI   SELSAVE,C'B'              WAS BROWSE REQUESTED?\n         BE    OUTLBROW                  YUP, OPEN OUTLIST FILE\n*\n         CLI   SELSAVE,C'R'              WAS REPRINT REQUESTED?\n         BE    REPRNTDS                  YUP, GO DO IT\n*\nDDSTABLE DS    0H\n*\n         L     R2,SMBLRECL               LRECL SPECIFIED.\n         LTR   R2,R2\n         BNZ   *+12                   YES\n         LA    R2,133\n         ST    R2,SMBLRECL               MAKE IT 133\n*\n         PACK  DOUBLEWD(8),DDLINES       GET SPACE FOR ALL THE RECORDS\n         CVB   R2,DOUBLEWD\n         LTR   R2,R2\n         BZ    DDSTABL2\n*\n*        LA    R2,1(,R2)                 SOMETHING WRONG WITH MY LOOP\n*                                        CONTROL, ALWAYS DOING AN EXTRA\n*                                        GETMAIN, FIGURE OUT WHY LATER.\n*\n         ST    R2,SMBMAX\n         MH    R2,SMBLRECL+2             A THOUSAND RECORDS\n         ST    R2,SMBLENG\n*\n         B     DDSTABL3\n*\nDDSTABL2 DS    0H\n*\n         LH    R2,THOUSAND               A THOUSAND RECORDS\n         ST    R2,SMBMAX\n         L     R2,SMBLRECL               GET SPACE FOR\n         MH    R2,THOUSAND               A THOUSAND RECORDS\n         ST    R2,SMBLENG\n*\nDDSTABL3 DS    0H\n*\n*        GETMAIN RC,LV=(2)                         10/08/86\n         GETMAIN RC,LV=(2),LOC=(ANY)\n         LTR   R15,R15\n         BZ    DDSGMALL\n*\n         SETMSG SMB003\n*\n         L     R2,SMBLRECL               GETTING SPACE FOR\n         MH    R2,THOUSAND               A THOUSAND RECORDS?\n         C     R2,SMBLENG\n         BE    DDSTEND                   YES, DON'T HAVE ENOUGH\n*\n         B     DDSTABL2                  TRY FOR 1000\n*\nDDSGMALL DS    0H\n*\n         ST    R1,SMBSTART\n         LR    R2,R1\n*\n         XC    SMBNUMB(4),SMBNUMB NO RECORDS WRITTEN\n         MVI   READ1ST,0          SET FIRST-TIME-THROUGH\n         MVC   READAREA(4),IXTPTR\n*\nSMBLOOP  DS    0H\n         BAL   R7,READ1REC        GET A RECORD FROM THE SPOOL\n         LTR   R15,15             DID I GET A RECORD\n         BNZ   SMBEOF             NOPE, EOF\n*\n         L     R1,SMBLRECL\n         BCTR  R1,0\n         B     *+10\n         MVC   0(1,R2),DSNLINE\n         EX    R1,*-6\n         LA    R2,1(R1,R2)      BUMP FOR NEXT RECORD\n*\n         L     R1,SMBNUMB       PICK UP RECORD COUNT\n         LA    R1,1(,1)         ADD 1\n         ST    R1,SMBNUMB       SAVE RECORD COUNT\n*\n         C     R1,SMBMAX        COMPARE TO MAX\n         BL    SMBLOOP\n*\n** RATS! RAN OUT OF SPACE, HAVE TO DO ANOTHER GETMAIN.\n*\n*\n         L     R2,SMBLRECL               GET SPACE FOR\n         MH    R2,THOUSAND               A THOUSAND RECORDS\n         A     R2,SMBLENG\n*\n*        GETMAIN RC,LV=(2)                      10/08/86\n         GETMAIN RC,LV=(2),LOC=(ANY)\n         LTR   R15,R15\n         BNZ   DDSTNUFF\n*\n         LR    R3,R1                    SAVE GETMAIN ADDRESS\n         LR    R14,R1                   ADDRESS\n         LR    R15,R2                   LENGTH\n         L     R0,SMBSTART              ADDRESS\n         L     R1,SMBLENG               LENGTH\n         LR    R4,R1                    SAVE IT\n         MVCL  R14,R0                   MOVE THE OLD STUFF\n*\n         L     R0,SMBLENG\n         L     R1,SMBSTART\n         FREEMAIN RU,LV=(0),A=(1)\n*\n         ST    R3,SMBSTART\n         ST    R2,SMBLENG\n*\n         LH    R2,THOUSAND               A THOUSAND RECORDS\n         A     R2,SMBMAX                 PICK UP OLD MAX\n         ST    R2,SMBMAX                 SET NEW MAX\n*\n         LR    R2,R3\n         AR    R2,R4\n*\n         B     SMBLOOP\n*\n*\nSMBEOF   DS    0H\n*\n         L     R15,SMBNUMB\n         LTR   R15,R15\n         BNZ   DDSSMB\n*\n         SETMSG JDF001C\n*\n         B     DDSSMBFR\n*\nDDSTNUFF DS    0H\n*\n         SETMSG SMB003\n*\nDDSSMB   DS    0H\n*\n         VPUT  SMBSTART,SMBNUMB,SMBLRECL,SMBTITLE,POOL=SHARED\n*\n         SELECT PGM(SMBROWSE)\n*\nDDSSMBFR DS    0H\n*\n         L     R0,SMBLENG\n         L     R1,SMBSTART\n         FREEMAIN RU,LV=(0),A=(1)\n*\n         B     SHODDTBS\n*\nDDSTEND  DS    0H\n*\n         SETMSG SMB003\n         B     SHODDTBS\n*\nTHOUSAND DC    H'1000'\n*\nOUTLBROW DS    0H\n         TM    OUTLIST+48,X'10'   OPEN OK?\n         BO    OUTLREAD           YUP\n         LA    R1,USERIDL\n         ST    R1,ISPARMS\n         LA    R1,ISPARMS\n         CALL  ALLOOUTL\n         L     R1,DCB3ADDR\n         MVC   OUTLIST(DCB3LEN),0(R1)        OUTLIST DCB\n*\nOUTLREAD DS    0H\n*\n         XC    GOTSOME(2),GOTSOME NO RECORDS WRITTEN\n         MVI   READ1ST,0          SET FIRST-TIME-THROUGH\n         MVC   READAREA(4),IXTPTR\n*\nOUTLLOOP DS    0H\n         BAL   R7,READ1REC        GET A RECORD FROM THE SPOOL\n         LTR   R15,15             DID I GET A RECORD\n         BNZ   OUTLEOF            NOPE, EOF\n*\n         LH    R1,GOTSOME       PICK UP RECORD COUNT\n         LA    R1,1(,1)         ADD 1\n         STH   R1,GOTSOME       SAVE RECORD COUNT\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         TM    OUTLIST+48,X'10'   OPEN OK?\n         BO    OUTLLOOP           YUP\n         MVI   SELSAVE,C'S'       NO, SO SET IT TO TABLE SELECT\n         B     DDSTABLE           GO DO IT\n*\nOUTLEOF  DS    0H\n*\nBROWSEDS DS    0H\n*\n* WRITE A LINE OF ASTERISKS TO AVOID EMPTY FILE\n*\n         SR    R1,1\n         CH    R1,GOTSOME         NO RECORDS WRITTEN\n         BNE   OUTLSCLS           NOPE, JUST SHOW THE TABLE\n*\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n         MVC   DSNLINE(17),=CL17'*** FILE IS EMPTY'\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\nOUTLSCLS DS    0H\n*\n** LET \"QSAMPUT\" DO THE CLOSE\n*\n         LA    R15,OUTLIST\n         ST    R15,ISPARMS\n         MVC   ISPARMS+4(4),=X'FFFFFFFF'\n         LA    R1,ISPARMS\n         L     R15,QPUTEPA\n         BALR  R14,R15\n*\n         CONTROL DISPLAY,SAVE\n*\n         CALL  ISPLINK,                                                X\n               (BROWSE,                                                X\n               JDFLST),                                                X\n               VL,MF=(E,ISPARMS)\n*\n         CONTROL DISPLAY,RESTORE\n*\n         CLC   JOBNAMS(6),=C'SYSLOG'       SYSLOG?\n         BE    SHOWAGN2                    YES\n*\n         CLC   SELSAVE(3),=C'BPS'    DOING SPECIAL BPSCAN DISPLAY?\n         BNE   SHODDTAB       REPEAT THE DD TABLE\n*\n         CLC   LVL(6),=C'BPSCAN'       USERID IS BPSCAN??\n         BNE   SHODDTAB       REPEAT THE DD TABLE\n*\n         CLC   COMMAND(2),DHREQ        HELD JOB DISPLAY??\n         BNE   SHODDTAB       REPEAT THE DD TABLE\n*\n         MVC   SELSAVE(3),=C'RQW'    SET REQUEUE TO CLASS \"W\"\n         B     JOBREQ                CHANGE OUTPUT CLASS OF JOB\n*\nGOTDSCTL DS    0H\n         B     SHODDTAB       REPEAT THE DD TABLE\n         TITLE 'JDF -  PERFORM REROUTE FOR A SELECTED DSID'\n*\nREPRNTDS DS    0H\n         CALL  ALLOREPR\n         LTR   R15,R15            CONTINUE?\n         BNZ   SHODDTBS       REPEAT THE DD TABLE\n         L     R1,DCB2ADDR\n         MVC   REPRINT(DCB2LEN),0(R1)        REPRINT DCB\n*        OPEN  (REPRINT,(OUTPUT)),MF=(E,OPEN1)\nREPRREAD DS    0H\n*\n         MVI   READ1ST,0          SET FIRST-TIME-THROUGH\n         MVC   READAREA(4),IXTPTR\n*\nREPRLOOP DS    0H\n         BAL   R7,READ1REC        GET A RECORD FROM THE SPOOL\n         LTR   R15,15             DID I GET A RECORD\n         BNZ   REPREOF            NOPE, EOF\n*\n         LA    R1,DSNLINE         POINT TO RECORD JUST READ\n*\nREPRTSCC DS    0H\n*\n         TM    REPRINT+36,X'02'   MACHINE CARRIAGE CONTROL?\n         BO    REPRCARM           YES, GO CHECK IT.\n         TM    REPRINT+36,X'04'   ASA CARRIAGE CONTROL?\n         BZ    REPRPUT1           NO, JUST PRINT\n*\n         MVI   DSNLINE-1,C' '     SET DEFAULT CARRIAGE CONTROL\n*\n         CLI   0(R1),C'1'         SKIP TO CHANNEL 1?\n         BE    REPRPUT1           YES\n         CLI   0(R1),C'+'         SUPPRESS SPACE?\n         BE    REPRPUT1           YES\n         CLI   0(R1),C' '         SPACE 1 LINE?\n         BE    REPRPUT1           YES\n         CLI   0(R1),C'0'         SPACE 2 LINES?\n         BE    REPRPUT1           YES\n         CLI   0(R1),C'-'         SPACE 3 LINES?\n         BE    REPRPUT1           YES\n*\n         LA    R1,DSNLINE-1\n         B     REPRPUT1           YES\n*\nREPRCARM DS    0H\n*\n         MVI   DSNLINE-1,X'09'    SET DEFAULT CARRIAGE CONTROL\n*\n         CLI   0(R1),X'89'        SKIP TO CHANNEL 1?\n         BE    REPRPUT1           YES\n         CLI   0(R1),X'8B'        SKIP TO CHANNEL 1?\n         BE    REPRPUT1           YES\n         CLI   0(R1),X'0B'        SKIP A LINE?\n         BE    REPRPUT1           YES\n         CLI   0(R1),X'11'        SKIP 2 LINES?\n         BE    REPRPUT1           YES\n         CLI   0(R1),X'13'        SKIP 2 LINES?\n         BE    REPRPUT1           YES\n         CLI   0(R1),X'19'        SKIP 3 LINES?\n         BE    REPRPUT1           YES\n         CLI   0(R1),X'1B'        SKIP 3 LINES?\n         BE    REPRPUT1           YES\n*\n         LA    R1,DSNLINE-1\n         B     REPRPUT1           YES\n*\nREPRPUT1 DS    0H\n         L     R15,QPUTEPA\n         LA    R0,REPRINT\n         ST    R0,ISPARMS\n         ST    R1,ISPARMS+4\n         LA    R1,ISPARMS\n         BALR  R14,R15\n*\n         TM    REPRINT+48,X'10'   OPEN OK?\n         BO    REPRLOOP\n         SETMSG JDF008\n         B     SHODDTBS           GO DO IT\n*\nREPREOF  DS    0H\n*\n         SETMSG JDF009\n         B     REPRCLOS\n*\nREPRCLOS DS    0H\n*\n** LET \"QSAMPUT\" DO THE CLOSE\n*\n         LA    R15,REPRINT\n         ST    R15,ISPARMS\n         MVC   ISPARMS+4(4),=X'FFFFFFFF'\n         LA    R1,ISPARMS\n         L     R15,QPUTEPA\n         BALR  R14,R15\n*\n         B     SHODDTBS       REPEAT THE DD TABLE\n*\n         TITLE 'JDF -  PERFORM SPECIAL FORMAT BPSCAN DISPLAY'\nGOTDSOPR DS    0H\n         LA    R1,USERIDL\n         ST    R1,ISPARMS\n         LA    R1,ISPARMS\n         CALL  ALLOOUTL\n         L     R1,DCB3ADDR\n         MVC   OUTLIST(DCB3LEN),0(R1)        OUTLIST DCB\n*\n         B     DOBPSCAN           YUP\n***********************************************************************\n*                                                                     *\n*   SET UP SPECIAL FORMAT CONDITION CODE SCAN                         *\n*                                                                     *\n***********************************************************************\nDOBPSCAN DS    0H\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n         MVC   DSNLINE(58),BPSFORM\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         TM    OUTLIST+48,X'10'   OPEN OK?\n         BO    DOBPOPOK           YES\n         WTO   'OUTLIST OPEN FAILED',ROUTCDE=11\n         DC    H'0'\n         B     SHOWAGN2       ALL DONE\n*\nDOBPOPOK DS    0H\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n         MVC   LABEL1(13),EXPECTED\n*\n*  FIRST LOCATE THE DDN  FOR DSID 1 TO PICK UP THE COND COMMENT CARD\n*\n*\n         L     R1,IOTPTR\n         USING JEDDSECT,1\n         LA    R1,JEDBUFF+24   POINT TO DDNAMES\n         DROP  8\n         USING DDLINE,1\n*\nDSIDL001 DS    0H\n         CLI   0(R1),X'FF'               END OF TABLE?\n         BE    NOTDSID1                  YES\n         CLC   DDLDSID(3),=C'001'       DSID MATCH?\n         BE    GOTDSID1                  YES\n*\n         LA    R1,DDLINESZ(,R1)          DSID MATCH?\n         B     DSIDL001                  YES\n*\nNOTDSID1 DS    0H\n*\n         WTO   'DSID 001 JCL MISSING FOR THIS JOB',ROUTCDE=11\n         B     GETJMREC                  GO GET MESSAGES\n*\nGOTDSID1 DS    0H\n*\n         LA    R5,DDMTTR                 POINT TO THE BLOCK\n         MVC   READAREA(4),IXTPTR        MOVE IN THE READ BUFFER\n         MVC   READMTTR(4),DDMTTR        MOVE IN THE READ MTTR\n*\n         MVI   READ1ST,0          SET FIRST-TIME-THROUGH\n*\n         MVI   BOPR1ST,1          SET FIRST-TIME-THROUGH\n         XC    GOTSOME(2),GOTSOME NO RECORDS WRITTEN\n*\nDOREAD1C DS    0H\n         BAL   R7,READ1REC        GET A RECORD FROM THE SPOOL\n         LTR   R15,15             DID I GET A RECORD\n         BNZ   BGNJMREC           NOPE, EOF\n*\n         LA    R1,DSNLINE\n*\nBPCOMMLP DS    0H\n*\n         CLC   0(3,R1),=C'//*'   COMMENT LINE?\n         BNE   DOREAD1C         YES, SKIP IT\n*\n         LA    R1,3(,1)          BUMP\n         LA    R7,65             MAXIMUM ITERATIONS\n*\nBPCOMML1 DS    0H\n         CLC   0(4,R1),=C'COND'  CONDITION CODE LINE\n         BE    BPCOMMPT          YUP\n         LA    R1,1(,1)\n         BCT   R7,BPCOMML1\n         B     DOREAD1C\n*\nBPCOMMPT DS    0H\n         MVC   WRKLINE(67),DSNLINE+3\n         MVC   DSNLINE(13),LABEL1\n         MVI   LABEL1,C' '\n         MVC   LABEL1+1(12),LABEL1\n         MVC   DSNLINE+13(67),WRKLINE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         B     DOREAD1C\n*\nBGNJMREC DS    0H\n*\n*\nGETJMREC DS    0H\n*\n*\n*    NOW LOCATE THE DDN  FOR DSID 4 TO PICK UP THE COND CODES, ETC.\n*\n*\n         USING JEDDSECT,1\n         L     R1,IOTPTR\n         LA    R1,JEDBUFF+24   POINT TO DDNAMES\n         USING DDLINE,1\n*\nDSIDL004 DS    0H\n         CLI   0(R1),X'FF'               END OF TABLE?\n         BE    NOTDSID4                  YES, ISSUE MESSAGE\n         CLC   DDLDSID(3),=C'004'       DSID MATCH?\n         BE    GOTDSID4                  YES\n*\n         LA    R1,DDLINESZ(,R1)          DSID MATCH?\n         B     DSIDL004                  YES\n*\nNOTDSID4 DS    0H\n*\n         WTO   'DSID 004 MSGS MISSING FOR THIS JOB',ROUTCDE=11\n         B     OUTLSCLS                  YES, JUST BROWSE WHAT I GOT\n*\nGOTDSID4 DS    0H\n*\n         LA    R5,DDMTTR                 POINT TO THE BLOCK\n         MVC   READAREA(4),IXTPTR        MOVE IN THE READ BUFFER\n         MVC   READMTTR(4),DDMTTR        MOVE IN THE READ MTTR\n*\n         MVI   READ1ST,0          SET FIRST-TIME-THROUGH\n         MVC   CONDNUM(3),P3ZERO  INITIALIZE COUNTERS\n*\nGETJMLOP DS    0H\n         BAL   R7,READ1REC        GET A RECORD FROM THE SPOOL\n         LTR   R15,15             DID I GET A RECORD\n         BNZ   SHOWBP       NOPE, END OF DATASET.\n*\n         LA    R1,DSNLINE\n*\n*\n         CLC   0(7,R1),=C'IEF142I'     COND LINE\n         BE    BPGOTCON                YUP\n         CLC   1(7,R1),=C'IEF142I'     COND LINE\n         BE    BPGOTCON                YUP\n         CLC   0(7,R1),=C'IEF472I'     COND LINE\n         BE    BPGOTCON                YUP\n         CLC   1(7,R1),=C'IEF472I'     COND LINE\n         BE    BPGOTCON                YUP\n*\n         CLC   1(7,R1),=C'IEF285I'  CAT/UNCAT REC?\n         BE    *+14                 NO\n         CLC   0(7,R1),=C'IEF285I'  CAT/UNCAT REC?\n         BNE   BPUNCAT              NO\n*\n         CLC   55(3,R1),=C'CAT'  CATALOGED REC?\n         BE    BPCATED              YUP\n         CLC   56(3,R1),=C'CAT'  CATALOGED REC?\n         BE    BPCATED              YUP\n*\n         CLC   56(3,R1),=C'UNC'  UNCATALOGED REC?\n         BE    *+14              YES\n         CLC   55(3,R1),=C'UNC'  UNCATALOGED REC?\n         BNE   GETJMLOP          NOPE\n*\n         CLI   BOPR1ST,2            IF SECOND TIME AROUND\n         BE    GETJMLOP             SKIP IT\n*\n         AP    UNCATNUM(3),P1(1)\n         B     GETJMLOP            GO GET THE NEXT ONE\n*\nBPUNCAT  DS    0H\n         CLC   1(7,R1),=C'IEF287I'  \"NOT CATALOGED\" REC?\n         BE    *+14                 YES\n         CLC   0(7,R1),=C'IEF287I'  \"NOT CATALOGED\" REC?\n         BNE   GETJMLOP             NO\n*\n         CLC   56(3,R1),=C'NOT'     ACTUAL RECORD?\n         BE    *+14                 YES\n         CLC   55(3,R1),=C'NOT'     ACTUAL RECORD?\n         BNE   GETJMLOP          NOPE\n*\n         CLI   BOPR1ST,2            IF SECOND TIME AROUND\n         BNE   BPUNADD              GO WRITE IT OUT\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         BAL   R7,READ1REC        GET A RECORD FROM THE SPOOL\n         LTR   R15,15             DID I GET A RECORD\n         BNZ   SHOWBP       NOPE, END OF DATASET.\n         B     BPPUT1        YUP, GO WRITE IT OUT\n*\nBPUNADD  DS    0H\n         AP    NCATNUM(3),P1(1)\n         B     GETJMLOP            GO GET THE NEXT ONE\n*\nBPGOTCON DS    0H\n         LA    R1,DSNLINE+35       BEGIN TEST FOR COND CODE 0\n         LA    R15,80\nBPTSTCON DS    0H\n         CLC   0(10,R1),=C'COND CODE '\n         BE    BPGOTCND\n         CLC   0(15,R1),=C'COMPLETION CODE' FOR ABEND LINE\n         BE    BPGOTCND\n         LA    R1,1(,1)            BUMP\n         BCT   R15,BPTSTCON        LOOP\nBPGOTCND DS    0H\n*\n         CLI   BOPR1ST,2            IF SECOND TIME AROUND\n         BE    BPTSTBAD             GO TEST FOR NON-ZERO\n*\n         AP    CONDNUM(3),P1(1)\n         CLC   10(4,R1),=C'0000'   CONDITION CODE ZERO\n         BNE   GETJMLOP\n*\n         AP    CONDZERO(3),P1(1)\n         B     GETJMLOP            GO GET THE NEXT ONE\n*\nBPTSTBAD DS    0H\n         CLC   10(4,R1),=C'0000'   CONDITION CODE ZERO\n         BE    GETJMLOP            GO GET THE NEXT ONE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         B     GETJMLOP            GO GET THE NEXT ONE\n*\nBPCATED  DS    0H\n*\n         CLI   BOPR1ST,2            IF SECOND TIME AROUND\n         BE    GETJMLOP             GO GET THE NEXT ONE\n*\n         AP    CATNUM(3),P1(1)\n         B     GETJMLOP            GO GET THE NEXT ONE\n*\nBPPUT1   DS    0H\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         B     GETJMLOP            GO GET THE NEXT ONE\n*\nSHOWBP   DS    0H\n         CLI   BOPR1ST,2            IF SECOND TIME THROUGH\n         BE    DOSHOWBP             ALL DONE\n         MVI   BOPR1ST,2\n*\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n         MVC   DSNLINE(13),FOUND\n*\n*\n* COND CODES\n         MVC   DSNLINE+13(16),CONDMS\n         MVC   DSNLINE+29(6),EDIT6   DO EDIT\n         ED    DSNLINE+29(6),CONDNUM DO EDIT\n* DATA SETS CATALOGED\n         MVC   DSNLINE+36(9),CATSMS\n         MVC   DSNLINE+45(6),EDIT6   DO EDIT\n         ED    DSNLINE+45(6),CATNUM DO EDIT\n* DATA SETS UNCATALOGED\n         MVC   DSNLINE+52(11),UNCATMS\n         MVC   DSNLINE+63(6),EDIT6   DO EDIT\n         ED    DSNLINE+63(6),UNCATNUM\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n* ZERO COND CODES\n         CP    CONDNUM,CONDZERO      IF ALL CONDITION CODES ZERO\n         BE    ALLCND0               ISSUE THE MESSAGE\n         SP    CONDNUM,CONDZERO      IF ALL CONDITION CODES ZERO\n         MVC   DSNLINE+13(20),CONDMSNZ\n         MVC   DSNLINE+33(6),EDIT6   DO EDIT\n         ED    DSNLINE+33(6),CONDNUM\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         B     SHOWBPFR              ISSUE THE MESSAGE\nALLCND0  DS    0H\n         MVC   DSNLINE+13(24),CONDMS0\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\nSHOWBPFR DS    0H\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         MVC   DSNLINE(58),BPSFORM\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         B     GETJMREC             GO DO IT AGAIN\nDOSHOWBP DS    0H\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         MVC   DSNLINE(58),BPSFORM\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         MVC   DDSDSID(3),=C'004'  JOB MESSAGES\n         MVC   SELSAVE(3),=C'BPS'    DOING CONDITION CODE SCAN\n*\n         B     ADDNEDD\n*\n*\nGOTDDCMD DS    0H\n         B     SHODDTAB       REPEAT THE DD TABLE\n         TITLE 'JDF -  DSID READ 1 RECORD SUBROUTINE'\nREAD1REC DS    0H\n         ST    R7,RD1SAVE7\n         CLI   READ1ST,0      FIRST TIME THROUGH?\n         BE    READ1OPN       YUP\n         CLI   DSIDEOF,0      IS IT EOF\n         BNE   READ1EOF       YUP\n         LM    R4,R7,RD1SAVE\n         B     SKIP1REC\nREAD1OPN DS    0H\n         MVI   READ1ST,1      TURN OFF SWITCH\n         MVI   DSIDEOF,0      NOT EOF\nREAD1NXT DS    0H\n***********************************************************************\n*                                                                     *\n*   PROCESS DATASET                                                   *\n*                                                                     *\n***********************************************************************\nNEXTDSA  L     R4,0(R5)       DISK ADDR OF NEXT BLOCK\n         LTR   R4,R4          IS THE DISK ADDR ZERO?\n         BZ    READ1EOF       YUP END OF DATASET.\n         L     R5,IXTPTR                 POINT TO THE BLOCK\n         ST    R4,READMTTR    STORE DISK ADDR IN TABLE\n         BAL   R7,READSPAC               READ IN THE BLOCK\n         CLC   JDFJBKEY(4),4(R5) DOES THE JOBID MATCH?\n         BNE   READ1EOF       NO. END OF DATASET.\n         LA    R4,10(R5)      ADDR OF FIRST RECORD IN BLOCK\n***********************************************************************\n*                                                                     *\n*   PROCESS RECORDS                                                   *\n*                                                                     *\n***********************************************************************\nNEXTDSR  CLI   0(R4),X'FF'    IS LENGTH BYTE FF?\n         BE    NEXTDSA        YES. END OF BLOCK.\n         TM    1(R4),X'10'    IS THIS A SPANNED RECORD?\n         BO    SPANSKIP       YES. SKIP IT.\n         SR    R6,R6          ZERO OUT REG\n         IC    R6,0(R4)       INSERT LENGTH\n         LR    R7,R6          SAVE RECORD LENGTH\n         LR    R1,R4          SAVE RECORD LOCATION\n         MVI   CCFLAG,0       NO CARRIAGE CONTROL\n         TM    1(R4),X'80'    IS THERE CARRIAGE CONTROL?\n         BZ    *+12           NO.\n         LA    R1,1(,1)       BUMP 1\n         MVI   CCFLAG,1       THERE IS CARRIAGE CONTROL\n         TM    1(R4),X'08'    IS THIS RECORD TO BE IGNORED?\n         LR    R4,R1          UPDATE RECORD POINTER\n         BNZ   SKIP1REC       YES. SKIP IT.\n         LTR   R7,R7          LENGTH ZERO\n         BZ    SKIP1REC       YES. SKIP IT.\n         BCTR  R7,0           MINUS 1\n         N     R7,ZEROFF      LOP OFF LEFT BYTES\n         CH    R7,=H'133'     IS THE RECORD BIGGER THAN LINE WIDTHLBDMC\n         BNH   *+8            NO. USE RECORD LENGTH.\n         LH    R7,=H'133'          YES. USE LINE WIDTH            LBDMC\n         LA    R1,3(R1)       OFFSET PAST REC HDR\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n         CLI   CCFLAG,0       IS THERE CARRIAGE CONTROL?\n         BE    *+10           NOPE\n         BCTR  R1,0           BACK UP 1 TO PICK UP CC\n         LA    R7,1(,7)       AND ADD 1 TO LENGTH\n         EX    R7,MOVEDATA\n         STM   R4,R7,RD1SAVE\n         SR    R15,15         GOT A RECORD\nREAD1RTN DS    0H\n         L     R14,RD1SAVE7\n         BR    R14\nREAD1EOF DS    0H\n         LA    R15,4          EOF\n         MVI   READ1ST,0      FIRST TIME THROUGH IS FORCED\n         MVI   DSIDEOF,1      SET EOF\n         B     READ1RTN\n*\nSKIP1REC LA    R4,3(R6,R4)    INCREMENT TO NEXT RECORD\n         B     NEXTDSR        PROCESS NEXT RECORD\nSPANSKIP LH    R6,2(R4)       LENGTH OF SEGMENT\n         TM    1(R4),X'08'    IS THIS THE FIRST SEGMENT?\n         BO    SPAN1STR       YES. USE HEADER LENGTH OF 6.\n         LA    R4,4(R6,R4)    UPDATE RECORD POSITION\n         B     NEXTDSR        PROCESS NEXT RECORD\nSPAN1STR LA    R4,6(R6,R4)    UPDATE RECORD POSITION\n         B     NEXTDSR        PROCESS NEXT RECORD\n*\nMOVEDATA MVC   DSNLINE(1),0(R1)   MOVE IN LINE\n*\n         TITLE 'JDF -  MVS COMMAND   SUBROUTINE'\nISSUECMD DS    0H\n*\n         SLR   R0,0                    CLEAR REG 0\n         LA    R1,CMDISMF             GET ADDRESS OF COMMAND I SMF\n         LA    R15,1\n         SVC   JESSVC                  ISSUE COMMAND VIA SVC 34\n         BR    R7\n*\n         TITLE 'JDF -  READ 1 BLOCK FROM THE SPOOL'\nREADSPAC DS    0H\n         L     R1,READMTTR\n         NI    READAREA,X'7F'  CLEAR LEFT BIT\n         L     R0,READAREA\n         LA    R15,88\n         SR    R0,R15\n         LA    R15,3\n         SVC   JESSVC\n         BR    R7\n*\n         TITLE 'JDF -  INITIALIZE MESSAGE SUBROUTINE'\nINITMSG  MVI   MESSAGE,C' '   BLANK OUT THE\n         MVC   MESSAGE+1(79),MESSAGE MESSAGE BUFFER\n         MVC   MSGJNME,JOBJNAME PUT IN THE JOB NAME\n         SR    R1,R1\n         ICM   R1,3,JOBJOBNO   JOB'S NUMBER\n         TM    JOBFLAG3,QUEJOB  BATCH JOB IF ZEROS\n         BNZ   STCORTSU     NO => TRY STC OR TSU\n         MVC   MSGJBTYP,JOB   INDICATE IT'S A JOB\n         B     CONVERT#       PUT IN THE JOB NUMBER\nSTCORTSU DS    0H\n         CLI   JOBFLAG3,QUETSU  TSO USER ?\n         BNE   ITSTC          NO => IT'S STC\n         MVC   MSGJBTYP,TSU   INDICATE TSU\n         B     CONVERT#       PUT IN THE TSU NUMBER\nITSTC    MVC   MSGJBTYP,STC   INDICATE STC\nCONVERT# CVD   R1,DOUBLEWD    CONVERT TO PACKED DECIMAL\n         UNPK  MSGJOB#,DOUBLEWD+5(3) CONVERT TO ZONED DECIMAL\n         OI    MSGJOB#+L'MSGJOB#-1,C'0' CONVERT TO EBCDIC\n         CLI   MSGJOB#,C'0'\n         BNE   NUMDONE\n         MVI   MSGJOB#,C' '\n         CLI   MSGJOB#+1,C'0'\n         BNE   NUMDONE\n         MVI   MSGJOB#+1,C' '\n         CLI   MSGJOB#+2,C'0'\n         BNE   NUMDONE\n         MVI   MSGJOB#+2,C' '\n         CLI   MSGJOB#+3,C'0'\n         BNE   NUMDONE\n         MVI   MSGJOB#+3,C' '\n         CLI   MSGJOB#+4,C'0'\n         BNE   NUMDONE\n         MVI   MSGJOB#+4,C' '\nNUMDONE  DS    0H\n*\n         TM    JOBFLAGS,QUEHOLD1+QUEHOLD2+QUEPURGE+QUEOPCAN\n         BZR   R7             NO SPECIAL FLAGS\n         MVC   MSGSPCST(L'PURGE),PURGE ASSUME THE JOB'S TO BE PURGED\n         TM    JOBFLAGS,QUEPURGE JOB TO BE PURGED?\n         BOR   R7             YES => RETURN TO OUR CALLER\n         MVC   MSGSPCST(L'CANCEL),CANCEL ASSUME JOB CANCELLED\n         TM    JOBFLAGS,QUEOPCAN JOB CANCELLED?\n         BOR   R7             YES => RETURN TO OUR CALLER\n         MVC   MSGSPCST(L'HOLD),HOLD   SINGLE JOB HOLD\n         TM    JOBFLAGS,QUEHOLD1       SINGLE JOB HOLD?\n         BOR   R7             YES => RETURN TO OUR CALLER\n         MVC   MSGSPCST(L'DUPLICAT),DUPLICAT MUST BE DUPLICATE JOB\n         BR    R7             RETURN TO OUR CALLER\n         TITLE 'MISCELLANEOUS CONSTANTS'\n*\n         LTORG\nP1       DC    PL1'+1'\nP3ZERO   DC    PL3'+0'\nCATSMS   DC    CL9'CATALOGS='\nUNCATMS  DC    CL11'UNCATALOGS='\nNOTCATMS DC    CL24'NOT CATALOGED ERRORS    '\nCONDMS   DC    CL16'CONDITION CODES='\nNZCONDMS DC    CL24'NON-ZERO CONDITION CODES'\nEXPECTED DC    CL13'  EXPECTED:  '\nFOUND    DC    CL13'     FOUND:  '\n*\nVCOPY    DC    CL8'VCOPY '\nZUSER    DC    CL8'ZUSER '\nZPREFIX  DC    CL8'ZPREFIX'\nSPFMOVE  DC    CL8'MOVE   '\nF128K    DC    F'131072'\n         DS    0F\nZEROFF   DC    X'000000FF'\n*\n*\n***********************************************************************\n*   DEVICE TABLES FOR LOCAL AND REMOTE DEVICES                        *\n***********************************************************************\n         DS    0H\nDEVTABLE DC    AL1(0),CL8'OUT QUE ',AL1(6),CL8'RDR Q   '\n         DC    AL1(7),CL8'PRINTER',AL1(5),CL8'PUNCH Q'\nDEVTYPEL DC    AL2((*-DEVTABLE)/4)\nRMTDEVS  DC    C'**',C'RD',C'PR',C'PU'\n         DC    C'012345678XMTTER  ABC'\nHIGHBIT  EQU   X'80'          MAKES JOB CLASS PRINTABLE\n*\n* HIGH-LIGHTED FIELDS\n*\nSTREQ    DC    C'ST'\nDQREQ    DC    C'DQ'\nDEREQ    DC    C'DE'\nDAREQ    DC    C'DA'\nDHREQ    DC    C'DH'\nDLREQ    DC    C'DL'\nDOREQ    DC    C'DO'\nDRREQ    DC    C'DR'\nDTREQ    DC    C'DT'\nDWREQ    DC    C'DW'\n*\n*\nL8       DC    F'8'\n*\nCONDMS0  DC    CL24'ALL CONDITION CODES 0000'\nCONDMSNZ DC    CL20'NON-ZERO COND CODES '\n*\n*\nJDFMSG1  DC    CL8'JDF001'\nJDFMSG2  DC    CL8'JDF002'\nJDFMSG3  DC    CL8'JDF003'\nJDF005   DC    CL8'JDF005'\nJDF006   DC    CL8'JDF006'\nJDF007   DC    CL8'JDF007'\n*\nBROWSE   DC    CL8'BROWSE'\n*\nTHREEPT  DC    X'2020204B'\nEDIT4    DC    X'40202021'\nEDIT6    DC    X'402020202121'\nEDIT10   DC    X'40206B2020206B202120'\n*\nJOB      DC    C'JOB'\nTSU      DC    C'TSU'\nSTC      DC    C'STC'\nHOLD     DC    C'HOLD'\nPURGE    DC    C'PURG'\nCANCEL   DC    C'CANC'\nDUPLICAT DC    C'DUPL'\nACTIVE   DC    C'ACTIVE  '    STARTED TASK\nLOGGEDON DC    C'LOGGED ON '  TSO USER\nEXECUTNG DC    C'EXECUTING '    JOB\nINPQUE   DC    C'ON INPUT  '      JOB\nXMTQUE   DC    C'AWAITING XMIT'\nPURQUE   DC    C'ON PURGE Q'\nSYSREC   DC    C'ON SYS RCV'\nDMPQUE   DC    C'ON $DUMP Q'\nOUTQUE   DC    C'ON OUT QUE'\n*\nDUMM     DS    0H\n*\n*\nFZEROS   DC    F'0'\nF4       DC    F'4'\nF8       DC    F'8'\nL3       DC    F'3'\n*\nH1       DC    H'1'\nH2       DC    H'2'\nH8       DC    H'8'\n*\nSPACES   DC    CL44' '\nCZEROS   DC    CL8'00000000'\n*\nCOMMAC   DC    C',C='\nPUPDATA  DC    C',P=+99'\n*\n*\nRMTABLEA DC    A(RMTABLE)\n*\nDCB2ADDR DC    A(DCB2)\nDCB3ADDR DC    A(DCB3)\n*\n         SPACE 5\nDCB2 DCB DDNAME=REPRINT,DSORG=PS,MACRF=(PM)\nDCB2LEN  EQU   *-DCB2\nDCB3 DCB DDNAME=OUTLIST,DSORG=PS,MACRF=(PM)\nDCB3LEN  EQU   *-DCB3\n*\nRMTABLE  DS    0H\n         DC    H'001',CL24' 01 RCHD8100 CHICAGO8100'\n         DC    H'002',CL24' 02 RKSCHMIT KLIENSCHMIT'\n         DC    H'003',CL24' 03 CIS6670  6670'\n         DC    H'004',CL24' 04 CISCHM   CHEM WACKER'\n         DC    H'005',CL24' 05 NOT ASSIGNED     '\n         DC    H'006',CL24' 06 RRING    RINGWOOD'\n         DC    H'007',CL24' 07 RCHEMTST CHEM TEST  '\n         DC    H'008',CL24' 08 PRODSERV OPER 3262  '\n         DC    H'009',CL24' 09 RCARS    CARSTAB '\n         DC    H'010',CL24' 10 RFNBC    1ST NAT BNK'\n         DC    H'011',CL24' 11 RVENT    VENTRON '\n         DC    H'012',CL24' 12 RDYN     DYNACHEM '\n         DC    H'013',CL24' 13          CARSTAB SNA'\n         DC    H'014',CL24' 14 RELK     ELKTON '\n         DC    H'015',CL24' 15 RHUNT    HUNTSVILLE'\n         DC    H'016',CL24' 16 RLONG    LONGHORN '\n         DC    H'017',CL24' 17 RLOUIS   LOUISIAN '\n         DC    H'018',CL24' 18 RWAS     WASATCH '\n         DC    H'019',CL24' 19 RCHEMGRN GREENVILL'\n         DC    H'020',CL24' 20 RRING2   RINGWOOD '\n         DC    H'021',CL24' 21 RELKG    ELK GROV '\n         DC    H'022',CL24' 22 RPOLY    POLYMER  '\n         DC    H'023',CL24' 23 RMANI    MANISTEE '\n         DC    H'024',CL24' 24 RPATE    PATERSON '\n         DC    H'025',CL24' 25 RSANT    SANTA FE '\n         DC    H'026',CL24' 26 RARMS    ARMSTRNG '\n         DC    H'027',CL24' 27 RWEEK    WEEKS ISL'\n         DC    H'028',CL24' 28 RMOSS    MOSS POINT'\n         DC    H'029',CL24' 29 RPRIN    PRINCETON'\n         DC    H'030',CL24' 30 RWOOD    RINGWOOD   '\n         DC    H'031',CL24' 31 MVSB     NOTASSIGNED'\n         DC    H'032',CL24' 32          DYNACHM SNA'\n         DC    H'033',CL24' 33          LOUISINA ML'\n         DC    H'034',CL24' 34          NOTASSIGNED'\n         DC    H'035',CL24' 35 RSANT2   SANTA FE P2'\n         DC    H'036',CL24' 36 RELKG2   ELK GROV P2'\n         DC    H'037',CL24' 37 RBCHEM   BEE CHEM 38'\n         DC    H'038',CL24' 38          NOTASSIGNED'\n         DC    H'039',CL24' 39          NOTASSIGNED'\n         DC    H'040',CL24' 40          NOTASSIGNED'\n*\n         TITLE 'WORKING STORAGE AREAS'\nWORKAREA DSECT\n         DS    18F\nJJSPARM  DS    F\nJCTPTR   DS    F\nIOTPTR   DS    F\nIXTPTR   DS    F\nSSOBPTR  DS    F\nWTRSAV6  DS    F\nACOUNT   DS    F\nPCOUNT   DS    F\nSCOUNT   DS    F\nDISPLRC  DS    F\n*\nQPUTEPA  DS    F\n*\nSMBSTART DS    F\nSMBLRECL DS    F\nSMBNUMB  DS    F\nSMBLENG  DS    F\nSMBMAX   DS    F\nCMDISMF  DS    F\nCMDLINE  DS    CL30\nLABEL1   DS    CL13\nBOPR1ST  DS    X\n*\nDATYPE   DS    CL3\nCONDZERO DS    PL3\nRURMT    DS    C\nRUDEST   DS    C\n         DS    CL6\n*\n*\nPFXLEN   DS    F\n*\n*\nJDFJBKEY DS    XL4\nPREFIX   DS    CL8\n         DS    0F\nUIDLEN   DS    XL3\nUSERIDL  DS    XL1\nUSERID   DS    CL8\nJDFLSTL  DS    XL1\nJDFLST   DS    CL44\nBPSCANJO DS    CL8\nRQRMT    DS    C\nRDEST    DS    C\n         DS    CL4\n*\n*\nBPSFORM  DS    CL27\nSMBTITLE EQU   *\nJOBID    DS    CL3            SAVE JOB TYPE, STC, TSU, OR JOB\nJOBNUMS  DS    CL5            SAVE JES JOB NUMBER\n         DS    C\nJOBNAMS  DS    CL8            SAVE JOB NAME\n         DS    C\nJOBUSRID DS    CL7\nJOBOUDAT DS    CL5\n         DS    C\nJOBDDNAM DS    CL8\n         DS    CL5\nBRODSID  DS    CL3\n         DS    CL2\nBPSFORML EQU   *-BPSFORM\nSSREQRC  DS    F\nDDSDSID  DS    CL3\n*\nDSIDEOF  DS    XL1                     EOF FLAG = 1\nGOTSOME  DS    H                       OUTPUT COUNT\n*\nDOUBLEWD DS    D              PACKED DECIMAL WORK AREA\nJOBNUMP  DS    D\nISPARMS  DS    9F\nRD1SAVE  DS    4F\nRD1SAVE7 DS    F\nDDIOTRAK DS    F\nDDJCTRAK DS    F\nREADSPA7 DS    F\nREADMTTR DS    F\nSLOGMTTR DS    F\nIXTMTTR  DS    XL4                 STARTING TRACK ADDR\nSAVE5    DS    5F\nREADAREA DS    F\nJQESHOLD DS    A              RETURN ADDRESS HOLD FOR OUTJQES\nJOESHOLD DS    A              RETURN ADDRESS HOLD FOR OUTJOES\n*\nJOBNUMH  DS    H\n*\nGOTANYST DS    XL1     DID I FIND ANY MATCHES, Y=1, N=0\nREAD1ST  DS    X\n*     THE ISP TABLE FLAGS INDICATE NO ACTIVE TABLE (0), OR ONE EXISTS\nATABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY ACTIVE\" TABLE\nDTABFL   DS    XL1     DO I HAVE A CURRENT DD NAME TABLE\n*\nUSRJLENG DS    CL1\n*\nDRNUM    DS    XL2\nDQCLASS  DS    CL1\nDOCLASS  DS    CL1\n*\nCOMMAND  DS    CL2\nCMDSAVE  DS    CL2\nENTCOMD  DS    CL2\nMSGJNAME DS    CL8     SAVE FOR MESSAGE\n*\nCCFLAG   DS    XL1\n*\nCOPYFLAG DS    XL1\nSLOGFLAG DS    XL1\n*\n         DS    XL1\nDSNLINE  DS    CL133\n         DS    CL133\n*\nLVL      DS    CL8\n*\nJCMD     DS    CL40             COMMAND LINE  FOR JDFDATAB\nDCMD     DS    CL40             COMMAND LINE  FOR JDFDDTAB\n*\nDDNLINE  DS    CL80\nDSEL     DS    CL3\nJOBLINE  DS    CL80\nTSEL     DS    CL3\n*\nJDFZ     DS    CL3\n*\nSELSAVE  DS    CL40           LINE SELECTION CODE\n*\nWRKLINE  DS    CL80\n*                           NOTE THESE FIELDS ARE POSITION-DEPENDENT\nCONDNUM  DS    PL3\nCATNUM   DS    PL3\nUNCATNUM DS    PL3\nNCATNUM  DS    PL3\nNZCONDS  DS    PL3\n*\nMESSAGE  EQU   *              OUTPUT MESSAGE BUFFER\nMSGJBTYP DS    CL3            JOB OR TSU OR STC\nMSGJOB#  DS    CL5            JOB NUMBER\n         DS    C\nMSGJNME  DS    CL8            JOB NAME\n         DS    C\nMSGSTYPE DS    CL16           JOB STATUS\n         DS    C\nMSGQTYPE DS    CL1            JOB CLASS\n         DS    C\nMSGSPCST DS    CL4            SPECIAL STATUS\n         DS    CL1\nMSGJQTYP DS    CL2            JQETYPE\nMSGALINE DS    CL10\n         DS    C\nMSGOCLAS DS    CL1\n         DS    C\nMSGFORM  DS    CL4            JOB CLASS\n         DS    C\nMSGBURST DS    CL1            BURST=Y\n         DS    C\nMSGSNODE DS    CL2            NODE FLAG\n         DS    C\nMSGSREMT DS    CL8          REMOTE FLAG\nLMESSAGE EQU   *-MESSAGE      LENGTH OF THE MESSAGE BUFFER\n         DS    CL5            PAD OUT TO 75\n         DS    CL80           FILLER\n*\nOPEN1    DS    F\n*\nREPRINT  DS    XL(DCB2LEN)\nOUTLIST  DS    XL(DCB3LEN)\n*\n         DS    0F\nSSOBWTO2 DS    XL(SSOBWTOL)\n*\n         DS    0F\nSSOBAREA DS    XL(SSOBALL)\n*\nRMT1    DS     CL4,CL4,CL26\nRMT2    DS     CL4,CL4,CL26\n*\nHRTABLE DS    H\nHR001   DS    XL(RMTMAX*2)\nHRLEN   EQU   *-HR001\n*\nWORKALEN EQU   *-WORKAREA\n         TITLE 'SUB-SYSTEM OUTPUT BLOCK (SSOB)'\n         IEFJSSOB\nSSOBGN   DSECT\n         IEFSSSO\n         IEFSSCS\nSSOBALL  EQU   SSOBHSIZ+SSSOSIZE\n*\n         PRINT GEN\n         DDLINE\n*\n         JDFJOB JESEQ=YES\n*\n         JEDDSECT\n*\n         JJSDSECT\n*\n         PRINT NOGEN\n         IKJTCB\n         IHAPSA\n         CVT   DSECT=YES\n         CVTUSERS\n         IEFTIOT1\n*\n         IEFZB4D0\n         IEFZB4D2\n         IKJDAP08\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n*\n         END\n         TITLE 'JDF -  CHECK AUTHORIZATION RULES TO VIEW JOB OUTPUTS'\nJDFCHECK CSECT\nJDFCHECK AMODE 31\nJDFCHECK RMODE ANY\n*\n*\n********************************************************************\n*\n*  THIS IS THE JDF SYSOUT ACCESS CONTROL MODULE. IT IS CALLED FROM\n*  THE JDF MAINLINE TO DECIDE WHETHER TO ALLOW/DISALLOW A USER TO\n*  BROWSE A JOB'S OUTPUT.\n*\n*  CALLING PARAMETERS ARE:\n*\n*       CALL  JDFCHECK,(JEDUSEID,JOBNAMS,USERID,DDN,DDLDSID,PREFIX)\n*\n*                       JEDUSEID = SUBMITTING USER-ID\n*                       JOBNAMS  = JOB NAME\n*                       USERID   = TSO USERID REQUESTING ACCESS\n*                       DDN      = DDNAME OF OUTPUT\n*                       DDLDSID  = JES DSID NUMBER OF OUTPUT\n*                       PREFIX   = TSO PREFIX\n*\n*           THE ACCESS CONTROL SVC IN INVOKED IN THE \"JDFCHECK\"       *\n*           SUB-ROUTINE USING THIS SVC NUMBER:                        *\n*                                                                     *\nACFCHK   EQU   247                                                    *\n*                                                                     *\n********************************************************************\n*\n*\n         USING *,12,11\n*\n         SAVE  (14,12),,JDFCHECK_08/25/86_BRIAN_COOK_&SYSTIME_&SYSDATE\n*\n         LR    R12,R15            SET BASE REGISTER\n         LA    R11,4095\n         LA    R11,1(R11,R12)     SET BASE 2\n         LR    R9,R1              SAVE PARM REGISTER\n*\n** TO REDUCE RUN-TIME OVERHEAD, SOME BASIC SCREENING TESTS ARE MADE\n*  PRIOR TO THE GETMAIN, AND BEFORE ANY CALL TO \"ACFCHK\".\n*\n         LM    R1,R3,0(R9)        PICK UP PARMS\n*\n*    IF SUBMITTING USERID IS BLANK, ALLOW ACCESS\n*\n         CLI   0(R1),C' '         BLANK\n         BE    QUICKOUT           YES, JUST SET RC=0\n*\n*\n**          JES INPUTS AND OUTPUTS CAN BE VIEWED IF THE JOBNAME BEGINS\n*           WITH YOUR USERID, OR IF YOU SUBMITTED IT.\n*\n         CLC   0(5,R3),0(R1)      SUBMITTED BY THIS USERID?\n         BE    QUICKOUT           YES, JUST SET RC=0\n         CLC   0(5,R3),0(R2)      JOBNAME MATCHES USERID?\n         BE    QUICKOUT           YES, JUST SET RC=0\n*\n*\n**  TEMPORARILY, SOFTWARE ENGINEERING STUFF\n*\n*        CLC   0(3,R2),=C'MPS'    PAYROLL?\n*        BE    NOTSPEC            YES, DON'T ALLOW ACCESS\n*        CLC   0(2,R3),=C'AS'     SOFTWARE ENGINEERING?\n*        BE    QUICKOUT           YES, JUST SET RC=0\n*        CLC   0(2,R3),=C'BO'     OPERATIONS?\n*        BE    QUICKOUT           YES, JUST SET RC=0\n*        CLC   0(2,R3),=C'BP'     BPSCAN?\n*        BE    QUICKOUT           YES, JUST SET RC=0\n*\nNOTSPEC  DS    0H\n*\n         L     R2,GETMLENG\n         GETMAIN R,LV=(2)\n*\n         ST    R13,4(R1)          STORE BACKWARDS POINTER\n         ST    R1,8(R13)          STORE FORWARD POINTER\n         LR    R13,R1             DSECT BASE\n         USING WORKAREA,13\n*\n*        LA    R0,1               AUTH ON\n*        SVC   235\n*\n*        LOAD  EP=ACFCHK\n*        LR    R10,R0\n*\n         LM    R1,R8,0(R9)        PICK UP PARMS\n         MVC   JEDUSEID(8),0(R1)\n         MVC   JOBNAMS(8),0(R2)\n         MVC   USERID(8),0(R3)\n         MVC   DDN(8),0(R4)\n         MVC   DDLDSID(3),0(R5)\n         MVC   PREFIX(8),0(R6)\n         MVC   DDREMOTE(1),0(R7)\n         MVC   DDCLASS(1),0(R8)\n*\nJOBTEST1 DS    0H\n*\n*\n*    A DISPLAY OF A PARTICULAR DSID HAS BEEN REQUESTED, SO CHECK AUTH\n*\n*\n* RULE 1==> JES DATASETS FOR ANY JOB CAN BE LOOKED AT BY ANYONE.\n*\n*\n         CLI   DDLDSID,C'0'          IF JES DATASETS\n         BE    RETURN0               LET ANYBODY LOOK AT ANYTHING\n*\n*\n*\n*\n*\n* RULE 2==> ANYONE CAN LOOK AT SYSLOG\n*\n*\n         CLC   JOBNAMS(7),=C'SYSLOG '   SYSLOG\n         BE    RETURN0                  YES, ALLOW READ ACCESS\n*\n*\n*\n*\n* RULE 3==> SOFTWARE ENGINEERING JOBS ARE RESTRICTED TO SE USERS.\n*\n*\n         CLC   JOBNAMS(2),=C'AS'     IS THIS SOFTWARE ENGINEERING JOB?\n         BNE   DDNRUL3E              NO, SKIP ALL THIS\n         CLC   JOBNAMS(3),=C'ASM'    IS THIS SPECIAL \"ASM2\" JOB?\n         BE    DDNRUL3E              YES, SKIP TEST\n*        CLC   PREFIX(2),=C'AS'      IS THIS SOFTWARE ENGINEERING USER\n         CLC   USERID(2),=C'AS'      IS THIS SOFTWARE ENGINEERING USER\n         BE    RETURN0          YUP\n         B     RETURN4 AUTH CHECK FAILED, DISPLAY THE MESSAGE\nDDNRUL3E DS    0H\n*\n*\n*\n* RULE 4==> CERTAIN DDNAMES ARE UNRESTRICTED, AND CAN BE VIEWED BY\n*           ANY USER.\n*\n         CLC   DDN(3),=C'CPX'          IS IT CAPEX\n         BE    RETURN0                   OK TO LOOK AT\n         CLC   DDN(8),=C'SORTMSGS'     IS IT SORT MESSAGES\n         BE    RETURN0                   OK TO LOOK AT\n         CLC   DDN(8),=C'SYSOUT  '     IS IT SORT MESSAGES\n         BE    RETURN0                   OK TO LOOK AT\n*\n*\n         CLI   DDREMOTE,C'R'      REMOTE?\n         BNE   ACFCHECK           NO, JUST DO ACFCHECK\n*\n** THIS WILL PREVENT ACCESS TO CONFIDENTIAL OUTPUTS ON THE 6670\n*\n** IT WILL ALSO PREVENT ACCESS TO ANY REMOTE OUTPUT UNLESS SPECIFICALLY\n** AUTHORIZED.\n*\n         CLI   DDCLASS,C'C'       CONFIDENTIAL OUTPUT PRINT CLASS?\n         BE    DDNRULE6           YES, CHECK FOR SYSTEM ACCESS\n         CLI   DDCLASS,C'U'       CONFIDENTIAL OUTPUT PUNCH CLASS?\n         BE    DDNRULE6           YES, CHECK FOR SYSTEM ACCESS\n*\n*\nACFCHECK DS    0H\n*\n*\n** LINK TO ACFCHK, TO DETERMINE WHETHER IT IS AN \"EXCEPTION\" JOB.\n*\n** IF THIS IS AN EXCEPTION JOB, IT MEANS THAT EVEN USERS WITH THE\n*  \"ALLJOBS\" ATTRIBUTE CAN'T LOOK AT IT. THE ONLY USERS THAT CAN LOOK\n*  AT THE REPORT OUTPUT ARE USERS THAT HAVE \"ALLJOBS\" FOR THE SPECIFIC\n*  SYSTEM, OR FOR THE JOB.\n*\n*\n         MVI   OPTBYTE,1            READ ACCESS\n         MVC   ACFUID(8),=CL8'APSEC '\n         MVC   RESTYPE(3),JOBNAMS\n         MVC   RESNAME(40),=CL40'EXCEPT   '\n*\n         LA    R1,OPTBYTE\n         ST    R1,ACFPARMS\n         LA    R1,ACFUID\n         ST    R1,ACFPARMS+4\n         LA    R1,RESTYPE\n         ST    R1,ACFPARMS+8\n         LA    R1,RESNAME\n         ST    R1,ACFPARMS+12\n         OI    ACFPARMS+12,X'80'\n*\n         LA    R1,ACFPARMS\n         SVC   ACFCHK\n*        LR    R15,R10\n*        BALR  R14,R15\n*\n         LTR   R15,R15\n         BZ    DDNRULE6\n*\n*        DC    H'0'\n*\nDDNRULE5 DS    0H\n*\n         MVI   OPTBYTE,1            READ ACCESS\n*        MVC   ACFUID(8),PREFIX\n         MVC   ACFUID(8),USERID\n         MVC   RESTYPE(3),=C'JDF'\n         MVC   RESNAME(40),=CL40'ALLJOBS'\n*\n         LA    R1,ACFPARMS\n         SVC   ACFCHK\n*        LR    R15,R10\n*        BALR  R14,R15\n*\n         LTR   R15,R15\n         BZ    RETURN0\n*\n*\n*\n*\n* RULE 6==> SOME USERS ARE AUTHORIZED TO LOOK AT ALL JOBS IN A GIVEN\n*           APPLICATION SYSTEM (1ST 3 CHARACTERS OF JOBNAME=SYSTEM ID)\n*\nDDNRULE6 DS    0H\n*\n*\n         MVI   OPTBYTE,1            READ ACCESS\n*        MVC   ACFUID(8),PREFIX\n         MVC   ACFUID(8),USERID\n         MVC   RESTYPE(3),JOBNAMS\n         MVC   RESNAME(40),=CL40'ALLJOBS'\n         MVC   RESNAME(3),JOBNAMS\n*\n         LA    R1,ACFPARMS\n         SVC   ACFCHK\n*        LR    R15,R10\n*        BALR  R14,R15\n*\n         LTR   R15,R15\n         BZ    RETURN0\n*\n*\n*\n* RULE 7==> SOME USERS ARE AUTHORIZED TO LOOK AT A SPECIFIC JOB.\n*\nDDNRULE7 DS    0H\n*\n*\n         MVI   OPTBYTE,1            READ ACCESS\n*        MVC   ACFUID(8),PREFIX\n         MVC   ACFUID(8),USERID\n         MVC   RESTYPE(3),JOBNAMS\n         MVC   RESNAME(40),SPACES\n         MVC   RESNAME(8),JOBNAMS\n*\n         LA    R1,ACFPARMS\n         SVC   ACFCHK\n*        LR    R15,R10\n*        BALR  R14,R15\n*\n         LTR   R15,R15\n         BZ    RETURN0\n*\n         B     RETURN4\n*\n*\nQUICKOUT DS    0H\n*\n         SR    R15,R15\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n*\nRETURN0  DS    0H\n*\n         SR    R10,R10\n         B     RETURN\n*\nRETURN4  DS    0H\n*\n         LA    R10,4\n*\n*        CLC   USERID(5),=C'ASQCC'\n*        BE    RETURN0\n*\nRETURN   DS    0H\n*\n*        SR    R0,R0              AUTH OFF\n*        SVC   235\n*\n         LR    R3,R13             START ADDRESS OF GETMAINED AREA\n         L     R2,GETMLENG        LENGTH OF GETMAINED AREA\n         L     R13,4(,R13)        PICK UP CALLING SAVE AREA\n         FREEMAIN R,LV=(2),A=(3)\n         LR    R15,R10\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n*\nSPACES   DC    CL40' '\nGETMLENG DC    A(WORKLENG)\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         LTORG\nWORKAREA DSECT\n         DS    18F\nJEDUSEID DS    CL8\nJOBNAMS  DS    CL8\nUSERID   DS    CL8\nDDN      DS    CL8\nPREFIX   DS    CL8\nDDLDSID  DS    CL8\nDDREMOTE DS    CL1\nDDCLASS  DS    CL1\n*\nACFPARMS DS    4F\nOPTBYTE  DS    XL1\nACFUID   DS    CL8\nRESTYPE  DS    CL3\nRESNAME  DS    CL40\n*\nAUTHFLAG DS    C\n*\nWORKLENG EQU   *-WORKAREA\n         END\n         TITLE 'JDF -  ALLOCATE OUTLIST DATASET'\nALLOOUTL CSECT\nALLOOUTL AMODE 31\nALLOOUTL RMODE ANY\n*\n*\n         USING *,12,11\n*\n         SAVE  (14,12),,ALLOOUTL_03/21/86_BRIAN_COOK_&SYSTIME_&SYSDATE\n*\n         LR    R12,R15            SET BASE REGISTER\n         LA    R11,4095\n         LA    R11,1(R11,R12)     SET BASE 2\n         L     R7,0(,R1)          SAVE PARM\n*\n         L     R2,GETMLENG\n         GETMAIN R,LV=(2)\n*\n         ST    R13,4(R1)          STORE BACKWARDS POINTER\n         ST    R1,8(R13)          STORE FORWARD POINTER\n         LR    R13,R1             DSECT BASE\n         USING WORKAREA,13\n         TITLE 'INITIALIZE DYNAMIC ALLOCATION REQUEST BLOCKS'\n*\n** INITIALIZE ALLOCATE-OLD  REQUEST BLOCK\n*\n         MVC   OLD2RB(RB2LEN),RB2MASK\n         LA    R1,OLD2\n         ST    R1,OLD2RB\n         OI    OLD2RB,X'80'\n         LA    R1,OLD2TXT\n         ST    R1,TXT2PTR\n         LA    R1,DSN2TU\n         ST    R1,DSN2PTR\n         OI    DSN2PTR,X'80'\n*\n** INITIALIZE ALLOCATE-NEW  REQUEST BLOCK\n*\n         MVC   NEW2RB(NEWMLEN),NEW2MASK\n         LA    R1,NEW2\n         ST    R1,NEW2RB\n         OI    NEW2RB,X'80'\n         LA    R1,NEW2TXT\n         ST    R1,NEW2PTR\n         LA    R1,DSN2TU\n         ST    R1,NEW2DSN\n         OI    NEW2DSN,X'80'\n*\n** INITIALIZE FREE REQUEST BLOCK\n*\n         MVC   FREERB(FREELEN),FREEMASK\n         LA    R1,FREE\n         ST    R1,FREERB\n         OI    FREERB,X'80'\n         LA    R1,FREE1PTR\n         ST    R1,FREEPTR\n         OI    FREE2PTR,X'80'  END PARAMETER FLAG\n*\n         TITLE 'GENERATE OUTLIST DSNAME'\n*\n*  PICK UP USERID/DSNAME LENGTH AND BUILD TEXT UNIT\n*\n         MVC   OUTLDSN(7),1(R7)   USERID INTO NAME\n*\n         SR    R15,R15\n         IC    R15,0(,R7)         GET  LENGTH OF USERID\n         LA    R1,OUTLDSN(R15)    BUMP TO FIRST BLANK AFTER USERID\n         MVI   0(R1),C'.'\n         LA    R1,1(,R1)          BUMP PAST PERIOD\n*\n         IC    R15,9(,R7)         GET  LENGTH OF OUTLIST DSNAME\n         LTR   R15,R15\n         BNZ   JDFXMOV1\n*\n         MVC   0(13,R1),=CL13'@TEMP.OUTLIST'\n         LA    R15,12\n         B     JDFXMOV2\n*\nJDFXMOV1 DS    0H\n         BCTR  R15,0\n         EX    R15,*+8\n         B     JDFXMOV2\n         MVC   0(1,R1),10(R7)\nJDFXMOV2 DS    0H\n*\n         LA    R15,1(,R15)        RESET LENGTH OF OUTLIST DSNAME\n         SR    R14,R14\n         IC    R14,0(,R7)         GET  LENGTH OF USERID\n         LA    R14,1(R14,R15)     GET TOTAL LENGTH\n         STCM  R14,3,OUTLDSNL     STORE IT INTO TEXT UNIT\n*\n         TITLE 'ALLOCATE OUTLIST DSNAME'\n*\n*\n*        FREE THE OUTLIST DATASET\n*\n         LA    R1,FREERB     LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n*\n*\n*        ALLOCATE THE OUTLIST DATASET AS OLD\n*\n         LA    R1,OLD2RB     LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n*\n         LTR   R15,R15       CHECK RETURN CODE\n         BZ    JDFOUTL4      0 - WE ALLOCATED IT AS OLD - LETS GO HOME\n*\n         LA    R5,OLD2\n         USING S99RB,R5\n         CLC   S99ERROR,=X'1708'  SEE IF DSNAME NOT FOUND\n         BE    JDFOUTL2           ... OK NO ERROR AFTER ALL\n         DROP  R5\n*\n         WTO   'JDF OUTLIST ALLOCATE OLD FAILED',ROUTCDE=11\n         DC    H'0'\n         TITLE 'OUTLIST ALLOCATE THE DDNAME/DSNAME AS NEW'\n*\n*        OK - MUST NOT HAVE ONE SO LET'S BUILD A NEW OUTLIST DATASET\n*\n*        ALLOCATE THE THE OUTLIST DATASET AS NEW, CATLG\n*\n         USING S99TUNIT,R5\n*\nJDFOUTL2 DS    0H\n*\n         LA    R1,NEW2RB     LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n*\n         LTR   R15,R15       CHECK RETURN CODE\n         BZ    JDFOUTL3      0 - WE ALLOCATED OK\n         SPACE\n         WTO   'JDF OUTLIST ALLOCATE NEW FAILED',ROUTCDE=11\n         DC    H'0'\n*\nJDFOUTL3 DS    0H\n*SPPROF3 LA    R1,MSGGOOD1     - TELL THE USER WE CREATED A NEW ONE\n*        LA    R0,L'MSGGOOD1\n*        SPACE\n*        TPUT  (R1),(R0)     WRITE OUT RESULTS OF NEW ALLOCATION\nJDFOUTL4 DS    0H\n         LR    R3,R13             START ADDRESS OF GETMAINED AREA\n         L     R2,GETMLENG        LENGTH OF GETMAINED AREA\n         L     R13,4(,R13)        PICK UP CALLING SAVE AREA\n         FREEMAIN R,LV=(2),A=(3)\n         LM    R14,R12,12(R13)\n         SR    R15,15\n         BR    R14\n         TITLE 'SVC 99 REQUEST BLOCKS'\n*\n         DS    0F\nFREEMASK DS    F\n         DC    AL1(20),AL1(S99VRBUN),X'6000',A(0),A(0),A(0),A(0)\nFREETXT  DC    A(FREETU1)\n         DC    A(FREETU2)\nFREELEN  EQU   *-FREEMASK\nFREETU1  DC    AL2(DUNDDNAM),AL2(1),AL2(7),CL7'OUTLIST'\nFREETU2  DC    AL2(DUNUNALC),AL2(0)\n*\n         DS    0F\nOLD2TU1  DC    AL2(DALDDNAM),AL2(1),AL2(7),CL7'OUTLIST'\nOLD2TU2  DC    AL2(DALSTATS),AL2(1),AL2(1),AL1(DA08OLD)\nOLD2TU3  DC    AL2(DALNDISP),AL2(1),AL2(1),AL1(DA08KEEP)\nOLD2TU4  DC    AL2(DALRLSE),AL2(0)\n         DS    0F\n*\nRB2MASK  DS    F\n         DC    AL1(20),AL1(S99VRBAL),X'6000',A(0),A(0),A(0),A(0)\n         DC    A(OLD2TU1)\n         DC    A(OLD2TU2)\n         DC    A(OLD2TU3)\n         DC    A(OLD2TU4)\n         DS    F\n         DC    AL2(DALDSNAM),AL2(1)\n         DS    XL2\n         DC    CL44' '\nRB2LEN   EQU   *-RB2MASK\n*\n         DS    0F\nNEW2TU1  DC    AL2(DALDDNAM),AL2(1),AL2(7),CL7'OUTLIST'\nNEW2TU2  DC    AL2(DALSTATS),AL2(1),AL2(1),AL1(DA08NEW)\nNEW2TU3  DC    AL2(DALNDISP),AL2(1),AL2(1),AL1(DA08CAT)\nNEW2TU4  DC    AL2(DALTRK),AL2(0)\nNEW2TU5  DC    AL2(DALPRIME),AL2(1),AL2(3),AL3(30)\nNEW2TU6  DC    AL2(DALSECND),AL2(1),AL2(3),AL3(30)\nNEW2TU7  DC    AL2(DALVLSER),AL2(1),AL2(6),C'STOR01'\nNEW2TU8  DC    AL2(DALUNIT),AL2(1),AL2(5),C'SYSDA'\nNEW2TU9  DC    AL2(DALBLKSZ),AL2(1),AL2(2),AL2(13300)\nNEW2TU10 DC    AL2(DALDSORG),AL2(1),AL2(2),X'4000'\nNEW2TU11 DC    AL2(DALLRECL),AL2(1),AL2(2),AL2(133)\nNEW2TU12 DC    AL2(DALRECFM),AL2(1),AL2(1),X'90'\n*\nNEW2MASK DS    F\n         DC    AL1(20),AL1(S99VRBAL),X'6000',A(0),A(0),A(0),A(0)\n         DC    A(NEW2TU1)\n         DC    A(NEW2TU2)\n         DC    A(NEW2TU3)\n         DC    A(NEW2TU4)\n         DC    A(NEW2TU5)\n         DC    A(NEW2TU6)\n         DC    A(NEW2TU8)\n         DC    A(NEW2TU9)\n         DC    A(NEW2TU10)\n         DC    A(NEW2TU11)\n         DC    A(NEW2TU12)\n         DS    F\nNEWMLEN  EQU   *-NEW2MASK\n         EJECT\nGETMLENG DC    A(WORKLENG)\n         LTORG\nWORKAREA DSECT\n         DS    18F\n*\nFREERB   DS    F\nFREE     DS    F\n         DS    F\nFREEPTR  DS    F\n         DS    F\n         DS    F\nFREE1PTR DS    F\nFREE2PTR DS    F\n*\nOLD2RB   DS    F\nOLD2     DS    F\n         DS    F\nTXT2PTR  DS    F\n         DS    F\n         DS    F\nOLD2TXT  DS    F\n         DS    F\n         DS    F\n         DS    F\nDSN2PTR  DS    F\nDSN2TU   DS    XL4\nOUTLDSNL DS    XL2\nOUTLDSN  DS    CL44\n*\n         DS    0F\nNEW2RB   DS    F\nNEW2     DS    F\n         DS    F\nNEW2PTR  DS    F\n         DS    F\n         DS    F\nNEW2TXT  DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\nNEW2DSN  DS    F\nWORKLENG EQU   *-WORKAREA\n         EJECT\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n         EJECT\n         IKJDAP08\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         END\nREPRINT  TITLE 'JDF -  ALLOCATE REPRINT DATASET'\nALLOREPR CSECT\nALLOREPR AMODE 31\nALLOREPR RMODE ANY\n*\n         PRINT OFF\n         COPY  JDFMACS\n         COPY  SPFMACS\n         PRINT ON\n         PRINT GEN\n*\n         USING PSA,0\n*\n*\n         USING *,12,11\n*\n         SAVE  (14,12),,ALLOREPR_03/21/86_BRIAN_COOK_&SYSTIME_&SYSDATE\n*\n         LR    R12,R15            SET BASE REGISTER\n         LA    R11,4095\n         LA    R11,1(R11,R12)     SET BASE 2\n         L     R7,0(,R1)      SAVE PARM\n*\n         L     R2,GETMLENG\n         GETMAIN R,LV=(2)\n*\n         ST    R13,4(R1)          STORE BACKWARDS POINTER\n         ST    R1,8(R13)          STORE FORWARD POINTER\n         LR    R13,R1             DSECT BASE\n         USING WORKAREA,13\n*\n*\n** INITIALIZE FREE REQUEST BLOCK\n*\n         MVC   FREERB(FREELEN),FREEMASK\n         LA    R1,FREE\n         ST    R1,FREERB\n         OI    FREERB,X'80'\n         LA    R1,FREE1PTR\n         ST    R1,FREEPTR\n         OI    FREE2PTR,X'80'  END PARAMETER FLAG\n*\n** INITIALIZE ALLOCATE REQUEST BLOCK\n*\n         MVC   ALLORB(ALLOLEN),ALLOMASK\n         LA    R1,ALLO\n         ST    R1,ALLORB\n         OI    ALLORB,X'80'\n         LA    R1,ALLOTXT\n         ST    R1,ALLOPTR\n         LA    R1,ALLOTU1\n         ST    R1,ALLOTXT\n         LA    R1,ALLOTU2\n         ST    R1,ALLOTXT+4\n         LA    R1,ALLOTU3\n         ST    R1,ALLOTXT+8\n         LA    R1,ALLOTU4\n         ST    R1,ALLOTXT+12\n         LA    R1,ALLOTU5\n         ST    R1,ALLOTXT+16\n         LA    R1,ALLOTU6\n         ST    R1,ALLOTXT+20\n         LA    R1,ALLOTU7\n         ST    R1,ALLOTXT+24\n         LA    R1,ALLOTU8\n         ST    R1,ALLOTXT+28\n         LA    R1,ALLOTU9\n         ST    R1,ALLOTXT+32\n         OI    ALLOTXT+32,X'80'\n*\n         L     R1,PSATOLD\n         USING TCB,1\n         L     R1,TCBTIO\n         USING TIOT1,1\n         LA    R1,TIOENTRY\n         USING TIOENTRY,1\n         SR    R15,R15\n         USING DDLINE,8\n*\nREPRTIO  DS    0H\n         CLC   TIOEDDNM(8),=CL8'REPRINT'\n         BE    REPRTFRE\n*\n         CLC   0(4,R1),=X'00000000'      END OF TIOT?\n         BE    REPRTISP                  YES, GO DO ISPLINK\n*\n         IC    R15,TIOELNGH              LENGTH OF THIS ENTRY\n         LA    R1,0(R1,R15)              POINT TO NEXT ENTRY\n         B     REPRTIO                   KEEP LOOPING\n*\n         DROP  1\n*\n         TITLE 'FREE THE DDNAME'\nREPRTFRE DS    0H\n*\n*\n*        FREE THE REPRINT DDNAME\n*\n         LA    R1,FREERB     LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n*\n*\n         TITLE 'DEFINE THE VARIABLES AND DISPLAY THE SCREEN'\nREPRTISP DS    0H\n*\n*\n*        ALLOCATE THE REPRINT DATASET AS OLD\n*\n         VDEFINE RCLASS,1\n         VDEFINE RCCO,1\n         VDEFINE RDEST,8\n         VDEFINE RCOPIES,3\n*\n         MVC    RCLASS(1),DDCLASS\n         CLI    RCLASS,C'X'\n         BNE    *+8\n         MVI    RCLASS,C'A'\n         VPUT   RCLASS\n*\n         MVC    RDEST(8),=CL8'N1'\n         VPUT   RDEST\n*\n         PACK   DWORD,DDDRECL+3(3)\n         CVB    R15,DWORD\n         STCM   R15,3,RECLENG\n         STCM   R15,3,BLOCKSIZ\n*\n         MVI    RCCO,C'N'        DEFAULT CARRIAGE CONTROL IS NONE\n*\n         CLI    DDDRECF,C'U'\n         BE     REPRRECU\n         CLI    DDDRECF+1,C'A'   ASA CARRIAGE CONTROL\n         BE     REPRRECA\n         CLI    DDDRECF+2,C'A'   ASA CARRIAGE CONTROL\n         BE     REPRRECA\n         CLI    DDDRECF+1,C'M'   MACHINE CARRIAGE CONTROL\n         BE     REPRRECM\n         CLI    DDDRECF+2,C'M'   MACHINE CARRIAGE CONTROL\n         BE     REPRRECM\n*\n         B      REPRPUT2\n*\nREPRRECA DS    0H\n*\n         MVI    RCCO,C'A'       ANSI CARRIAGE CONTROL\n         B      REPRPUT2\n*\nREPRRECM DS    0H\n*\n         MVI    RCCO,C'M'       MACHINE CARRIAGE CONTROL\n         B      REPRPUT2\n*\nREPRRECU DS    0H\n*\n         MVC    RECLENG(2),=H'133'\n         MVC    BLOCKSIZ(2),=H'133'\n*\n         B      REPRPUT2\n*\nREPRPUT2 DS    0H\n*\n         VPUT   RCCO\n         MVC    RCOPIES(3),DDCOPIES\n         CLI    RCOPIES,C' '\n         BNE    *+8\n         MVI    RCOPIES,C'0'\n         CLI    RCOPIES+1,C' '\n         BNE    *+8\n         MVI    RCOPIES+1,C'0'\n         VPUT   RCOPIES\n*\n         VGET   RCLASS\n         VGET   RCCO\n         VGET   RDEST\n         VGET   RCOPIES\n*\n         DISPLAY JDFREPR,ENDKEY=REPREND\n*\n         VPUT   RCLASS\n         VPUT   RDEST\n*\n         TITLE 'SET UP CARRIAGE CONTROL'\nREPRTCC2 DS    0H\n*\n         CLI   RCCO,C'A'\n         BE    REPRFMA\n         CLI   RCCO,C'M'\n         BE    REPRFMM\n*\nREPRFMN  DS    0H\n*\n         MVI    RECFM,X'90'     SET DEFAULT RECFM = FB\n         B      REPRTIOA\n*\nREPRFMA  DS    0H\n*\n         MVI    RECFM,X'94'     SET DEFAULT RECFM = FBA\n         B      REPRTIOA\n*\nREPRFMM  DS    0H\n*\n         MVI    RECFM,X'92'     SET DEFAULT RECFM = FBM\n         B      REPRTIOA\n*\n         TITLE 'FILL IN THE TEXT UNITS'\nREPRTIOA DS    0H\n*\n         PACK   DWORD,RCOPIES\n         CVB    R15,DWORD\n         STC    R15,COPIES\n*\n         B      JDFREPR2        GO DO THE ALLOCATE\n*\n         TITLE 'ALLOCATE THE DDNAME'\n*\n*\n         USING S99TUNIT,R5\n*\nJDFREPR2 DS    0H\n*\n         LA    R1,ALLORB     LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n*\n         LTR   R15,R15       CHECK RETURN CODE\n         BZ    JDFREPR3      0 - WE ALLOCATED OK\n         SPACE\n         WTO   'JDF REPRINT ALLOCATE NEW FAILED',ROUTCDE=11\n         DC    H'0'\n*\nJDFREPR3 DS    0H\n*SPPROF3 LA    R1,MSGGOOD1     - TELL THE USER WE CREATED A NEW ONE\n*        LA    R0,L'MSGGOOD1\n*        SPACE\n*        TPUT  (R1),(R0)     WRITE OUT RESULTS OF NEW ALLOCATION\nJDFREPR4 DS    0H\n*\n         BAL   R7,DLTVARS\n         SR    R8,R8\n*\nJDFREPRC DS    0H\n*\n         LR    R3,R13             START ADDRESS OF GETMAINED AREA\n         L     R2,GETMLENG        LENGTH OF GETMAINED AREA\n         L     R13,4(,R13)        PICK UP CALLING SAVE AREA\n         FREEMAIN R,LV=(2),A=(3)\n         LR    R15,R8\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n*\nREPREND  DS    0H\n*\n         BAL   R7,DLTVARS\n*\n         LA    R8,12\n         B     JDFREPRC\nDLTVARS  DS    0H\n*\n         VDELETE RCOPIES\n         VDELETE RCLASS\n         VDELETE RDEST\n         VDELETE RCCO\n*\n         BR    R7\n*\n         TITLE 'SVC 99 REQUEST BLOCKS'\n*\n         DS    0F\nFREEMASK DS    F\n         DC    AL1(20),AL1(S99VRBUN),X'6000',A(0),A(0),A(0),A(0)\nFREETXT  DC    A(FREETU1)\n         DC    A(FREETU2)\nFREELEN  EQU   *-FREEMASK\nFREETU1  DC    AL2(DUNDDNAM),AL2(1),AL2(7),CL7'REPRINT'\nFREETU2  DC    AL2(DUNUNALC),AL2(0)\n*\nALLOMASK DS    F\n         DC    AL1(20),AL1(S99VRBAL),X'6000',A(0),A(0),A(0),A(0)\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    0F\n         DC    AL2(DALDDNAM),AL2(1),AL2(7),CL7'REPRINT'\n         DS    0F\n         DC    AL2(DALBLKSZ),AL2(1),AL2(2)\n         DS    XL2\n         DS    0F\n         DC    AL2(DALDSORG),AL2(1),AL2(2),X'4000'\n         DS    0F\n         DC    AL2(DALLRECL),AL2(1),AL2(2)\n         DS    XL2\n         DS    0F\n         DC    AL2(DALRECFM),AL2(1),AL2(1)\n         DS    XL1\n         DS    0F\n         DC    AL2(DALSYSOU),AL2(1),AL2(1)\n         DS    CL1\n         DS    0F\n         DC    AL2(DALSUSER),AL2(1),AL2(8)\n         DS    CL8\n         DS    0F\n         DC    AL2(DALCLOSE),AL2(0)\n         DS    0F\n         DC    AL2(DALCOPYS),AL2(1),AL2(1)\n         DS    XL1\nALLOLEN  EQU   *-ALLOMASK\n*\nGETMLENG DC    A(WORKLENG)\n*\n         LTORG\nWORKAREA DSECT\n         DS    18F\n*\nRCOPIES  DS    CL3\nRCCO     DS    CL1\nISPARMS  DS    8F\n*\nDWORD    DS    D\n*\nFREERB   DS    F\nFREE     DS    F\n         DS    F\nFREEPTR  DS    F\n         DS    F\n         DS    F\nFREE1PTR DS    F\nFREE2PTR DS    F\n*\nALLORB   DS    F\nALLO     DS    F\n         DS    F\nALLOPTR  DS    F\n         DS    F\n         DS    F\nALLOTXT  DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    0F\nALLOTU1  DS    XL13\n         DS    0F\nALLOTU2  DS    XL6\nBLOCKSIZ DS    XL2\n         DS    0F\nALLOTU3  DS    XL8\n         DS    0F\nALLOTU4  DS    XL6\nRECLENG  DS    XL2\n         DS    0F\nALLOTU5  DS    XL6\nRECFM    DS    XL1\n         DS    0F\nALLOTU6  DS    XL6\nRCLASS   DS    CL1\n         DS    0F\nALLOTU7  DS    XL6\nRDEST    DS    CL8\n         DS    0F\nALLOTU8  DS    XL4\n         DS    0F\nALLOTU9  DS    XL6\nCOPIES   DS    XL1\n*\nWORKLENG EQU   *-WORKAREA\n         EJECT\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n         EJECT\n         IKJDAP08\n*\n*   ADDED TO SUPPORT STEPNAME CHECKING AND DDNAME SCAN\n*\n         PRINT NOGEN\n         IHAPSA\n         IKJTCB\n         IEFTIOT1\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         DDLINE\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JDF$": {"ttr": 10503, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x91\\x00\\x91\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 145, "newlines": 145, "modlines": 0, "user": "CBT353"}, "text": "1\n        JES2 DISPLAY FACILITY (JDF) INSTALLATION (MVS SP 1.3.4)\n\n    ****************************************************************\n    ****************************************************************\n    *\n    *\n    *    W A R N I N G ! ! !              W A R N I N G ! ! !\n    *\n    *\n    *    W A R N I N G ! ! !              W A R N I N G ! ! !\n    *\n    *\n    *    THE JDF CODE MAY HAVE SOME SECURITY IMPLICATIONS IN TERMS\n    *  OF ALLOWING USERS TO VIEW BATCH JOB OUTPUT. CHECK THE SECTIONS\n    *  IN THE CODE THAT REFERENCE THE CHARACTER STRING \"AUTH\". YOU\n    *  MAY WANT TO DO SOME OF YOUR OWN CHECKING.\n    *\n    *\n    *\n    ****************************************************************\n    ****************************************************************\n\n 1. COPY INTO YOUR ISPPLIB:\n\n               JDFDAHLP\n               JDFDATAB\n               JDFDDHLP\n               JDFDDTAB\n               JDFDSHLP\n               JDFDSTAB\n               JDFHELP\n               JDFOPT\n               JDFREPR\n               JDFREPRH\n               JDFRMT\n               JDFRMTH\n               SMBP1\n               SMBH1\n\n 3. COPY JDF00 AND SMB00 INTO YOUR ISPMLIB.\n\n 4. CHECK THE SOURCE CODE FOR CUSTOMIZATION TO FIT YOUR JES2 SYSTEM.\n\n    JDF WAS WRITTEN TO SATISFY OUR INSTALLATION REQUIREMENTS. AS FAR\n    AS I KNOW, IT CAN BE INSTALLED AND USED AS A GENERAL-PURPOSE JES\n    INTERFACE. HOWEVER, I CANNOT TELL IF IT WILL DO THE JOB AT YOUR\n    INSTALLATION.\n\n    JDF HAS BEEN TESTED ONLY WITH A \"PURE-VANILLA\", UNMODIFIED JES2;\n    IF YOU HAVE MODIFICATIONS ON YOUR JES, JDF MAY NOT WORK. THE JES\n    LEVEL IS SP1.3.4 (SP 2.1.3), FMID HJE2330.\n\n    NO WARRANTY IS EXPRESSED OR IMPLIED.\n1\n\n\n 5. SUBMIT AN ASSEMBLY OF JDF. IT DOES NOT NEED TO GO INTO ANY SPECIAL\n    LIBRARY, BUT IT MUST BE ACCESSABLE FROM YOUR TSO SESSION. IT IS\n    RE-ENTRANT, AND MAY GO INTO LPALIB. ALSO ASSEMBLE \"QSAMPUT\".\n\n    TO USE THE JDF INTERNAL BROWSE (DSID SELECTION OPTION \"S\") YOU\n    WILL ALSO NEED TO ASSEMBLE \"SMBROWSE\".\n\n    NOTE: DO NOT STRIP OFF THE ASSEMBLY AND LINK-EDIT JCL WITHOUT\n          LOOKING AT IT; IT IS INCLUDED FOR A REASON. ASSEMBLER H\n          WITH THE \"BATCH\" OPTION IS REQUIRED. THIS LIBRARY CONTAINS\n          2 COPY ELEMENTS THAT MUST BE AVAILABLE FOR ASSEMBLY (JDFMACS\n          AND SPFMACS). THE LINKEDIT STEP MUST PULL IN ISPLINK.\n\n\n 6. MODIFY AN EXISTING SPF SCREEN TO INVOKE THE JDF PROGRAM. A SAMPLE\n    IS:\n\n    IN THE BODY==>              % J +JES2 DISPLAY FACILITY\n\n    IN THE PROC==>              J,'PGM(JDF)'\n\n\n 7. YOU NEED TO HAVE THE JES2 SVC FROM UAL, HEAVILY MODIFIED, AND\n    INCLUDED HERE AS JDFSVC. AS IS, THE SVC WILL BE INSTALLED AS\n    SVC 237 (IGC0023G). IF YOU NEED TO CHANGE THE SVC NUMBER, BE SURE\n    YOU CHANGE THE JDF CODE.\n\n    I STRONGLY SUGGEST THAT YOU USE 237, IF POSSIBLE.\n\n    NOTE: DO NOT STRIP OFF THE ASSEMBLY AND LINK-EDIT JCL WITHOUT\n          LOOKING AT IT; IT IS INCLUDED FOR A REASON. ASSEMBLER H\n          WITH THE \"BATCH\" OPTION IS REQUIRED. THIS LIBRARY CONTAINS\n          1 COPY ELEMENT THAT MUST BE AVAILABLE FOR ASSEMBLY, JDFMACS.\n\n          ALSO, SYS1.HASPSRC IS REQUIRED FOR THE JES MACROS.\n          THE JES2 LEVEL MUST BE HJE2330.\n\n\n\n 8.  NOTE THAT XDF, CDF, AND DIF CAN ALL BE INVOKED FROM THIS PROGRAM,\n     SO YOU MAY WANT TO INSTALL THEM AT THE SAME TIME. (\"CDF\" ALSO\n     USES THE JDF SVC.) THESE PROGRAMS ARE DOCUMENTED ELSEWHERE IN\n     THIS LIBRARY.\n1\n\n\n 9.  GENERAL INFO:\n\n     1. THE JDF SVC IS RELEASE-DEPENDENT. IT PROVIDES AN INTERFACE ONLY\n        FOR JES2 1.3.4. EARLIER JES RELEASES WILL NOT WORK.\n\n\n     2. JDF REQUIRES THE ISPF/PDF PROGRAM PRODUCT. EARLIER SPF/ISPF\n        RELEASES WILL NOT WORK. (I BELIEVE YOU GET AN ABEND S0C1.)\n\n\n     3. INSTALLATION OF THE JDF SVC IS NOT OPTIONAL; IT MUST BE\n        INSTALLED IN LPALIB, AN SVC NUMBER DEFINED BY AN I/O GEN,\n        AND THE SYSTEM MUST BE IPL'ED WITH CLPA.\n\n        IF YOU DO NOT DO THIS, YOU WILL GET AN ABEND S0C1.\n\n        (JDF ITSELF DOES NOT REQUIRE ANY PARTICULAR RELEASE OF JES,\n         BUT IT WON'T WORK WITHOUT THE SVC.)\n\n\n     4. AT OUR INSTALLATION, TSO USER-ID'S ARE 5 CHARACTERS. I THINK\n        I HAVE REMOVED ALL LENGTH DEPENDENCIES, BUT I AM NOT SURE.\n\n\n     5. AT OUR INSTALLATION, THE FIRST 2 CHARACTERS OF THE USER-ID ARE\n        USED TO IDENTIFY THE DEPARTMENT. IN THE \"AUTH\" CHECKING, THIS\n        IS REFERENCED ALL OVER THE PLACE. SEE WARNING, ABOVE.\n\n\n     6. WE DO JOB ACCESS AUTHORITY CHECKING BASED ON ACF2 RULES. THIS\n        REQUIRES THE ACFCHECK SVC, IGC0024G. TO SET UP THE ACF2 RULES,\n        SEE MEMBER \"JDFRULES\".\n\n\n     7. IF YOU HAVE ANY PROBLEMS WITH INSTALLING JDF, CHECK THE STEPS\n        ABOVE; IF YOU CAN'T SEE ANYTHING WRONG, CALL ME (BRIAN COOK) AT\n        (312) 807-2466.\n\n\n     8. MEMBER \"JDFUSER\" IN THIS LIBRARY IS A USER MANUAL. IT IS IN\n        BOTH UPPER AND LOWER-CASE, AND WAS INTENDED TO BE PRINTED\n        USING ROTATE90 ON A 3800.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JDFBRHLP": {"ttr": 10507, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "CBT353"}, "text": "%-----------------------JES2 DISPLAY FACILITY  (JDF)  --------------------------\n+\n+  This is the dataset display panel. Commands are:\n\n   %D+nnn  Scroll down  \"nnn\" lines  (default is 20).\n\n   %U+nnn  Scroll up    \"nnn\" lines  (default is 20).\n\n   %R+     Scroll right.\n\n   %L+     Scroll left.\n\n   %T+     Scroll to the top.\n\n   %B+     Scroll to the bottom.\n\n   %F+ccc  Find character string \"ccc\". \"F\" with no operands is repeat.\n\n   %E+     End.\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JDFBRTAB": {"ttr": 10509, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  @  TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%------------ JDF DATASET LINE DISPLAY  ----------------------------------------\n COMMAND ==>_BRCMD                                              %SCROLL =>_AMT %\n)MODEL\n@Z\n)INIT\n .CURSOR=BRCMD\n  &VARS='(BRLINE)'\n  &AMT=PAGE\n  .HELP=JDFBRHLP\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JDFDAHLP": {"ttr": 10511, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "CBT353"}, "text": "%-----------------------JES2 DISPLAY FACILITY  (JDF)  --------------------------\n+\n+This is the Job display screen, showing you Jobs and status.\n\n The following commands can be entered on the command line:\n\n%DA+ Active (jobs)   %DE+ Every Job            %DH+ Jobs with Held Output(s)\n%DS+ Status (or ST)  %DI+ Initiators           %DO+ Outputs ready to print\n%DQ+ Input queue     %DR+ Remote outputs       %DL+ SYSLOG(s)\n%DT+ NJE transmit Q  %DW+ Writer Jobs%(IDTF)+  %QS+ Remote output Queue Summary\n\n Enter %JOB, STC,+or%TSU+ to change the scope of the %DA+ command.%DO-+ can be\n used to limit the display to one specific SYSOUT class.%DRnn+ will limit the\n display to one specific remote destination.\n\n The following commands can be entered in the Opt column:\n\n%S+  Select          %B+  BPSCAN Select        %TC-+Change Initiator class\n%A+  Release         %H+  Hold                 %OJ-+Change Output SYSOUT class\n%C+  Cancel          %P+  Purge                %Rnn+Route SYSOUT X to Remote nn\n%D+  Dump            %RQ-+Change SYSOUT X      %RU3+Route SYSOUT X to Chem\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JDFDATAB": {"ttr": 10513, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  @  TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%--------------------- JES2 Display Facility (JDF) -----------------------------\n Command ==>_JCMD                                               %SCROLL =>_AMT %\n &OLDCMD                                                                      +\n%Opt Jobnum   Jobname  Status/Name     Cl Sys Typ   Lines  Cl Form B Nd R/DEV/W\n)MODEL\n_Z  @Z\n)INIT\n .CURSOR=JCMD\n  &AMT=PAGE\n  &JCMD=RP\n  &TSEL=' '\n  &VARS='(TSEL JOBLINE)'\n  .HELP=JDFDAHLP\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JDFDATB2": {"ttr": 10753, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  @  TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%--------------------- JES2 DISPLAY FACILITY (JDF) -----------------------------\n COMMAND ==>_JCMD                                               %SCROLL =>_AMT %\n &OLDCMD                                                                      +\n% OPT JOBNUM   JOBNAME  STATUS    CL  SYS   %A+LINES  %P+LINES  %S+LINES%FORM B\n)MODEL\n _Z  @Z\n)INIT\n .CURSOR=JCMD\n  &AMT=PAGE\n  &JCMD=RP\n  &TSEL=' '\n  &VARS='(TSEL JOBLINE)'\n  .HELP=JDFDAHLP\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JDFDDHLP": {"ttr": 10755, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "CBT353"}, "text": "%-----------------------JES2 DISPLAY FACILITY  (JDF)  --------------------------\n+\n+                     -----------------------------------\n+                     |          J  D  F                |\n+                     -----------------------------------\n+  THIS IS THE DDNAME DISPLAY PANEL. EVERY JES FILE IN THE JOB IS SHOWN. YOU\n+  CAN SELECT INDIVIDUAL FILES FOR VIEWING BY ENTERING \"S\" IN THE \"OPT\"\n+  COLUMN (FOR SHORT CARDIMAGE FILES) OR \"B\" (TO BROWSE LARGE OR LISTING FILES).\n+\n+  YOU CAN CREATE A COPY OF AN INDIVIDUAL FILE BY ENTERING \"R\" IN THE \"OPT\"\n+  COLUMN. IF YOU WANT TO COPY MORE THAN ONE, YOU MUST TYPE AN \"R\" NEXT TO\n+  IT AND HIT ENTER FOR EACH ONE; WHEN YOU ARE DONE SELECTING FILES TO BE\n+  COPIED, HIT PFK3. YOU WILL THEN BE PUT INTO EDIT ON A JOBSTREAM THAT WILL DO\n+  THE ACTUAL COPYING. AT THAT POINT, YOU CAN ALTER ANY ROUTING INFORMATION, ETC\n+  AS REQUIRED.\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JDFDDTAB": {"ttr": 10757, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  @  TYPE(OUTPUT) INTENS(LOW)\n  03 TYPE(OUTPUT) INTENS(HIGH)\n)BODY\n%------------ JDF DDNAME Display       -----------------------------------------\n Command ==>_DCMD                                               %SCROLL =>_AMT %\n &JOBID                                                                       +\n%OPT  DSID PROCSTEP STEPNAME DDNAME      LINES  C  FORM FCB  UCS  COP  LRECL FMT\n)MODEL\n _Z  @Z\n)INIT\n .CURSOR=DCMD\n  &AMT=PAGE\n  &DCMD=' '\n  &DSEL=' '\n  &VARS='(DSEL DDNLINE)'\n  .HELP=JDFDDHLP\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JDFDSHLP": {"ttr": 10759, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\t\\x00\\t\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "CBT353"}, "text": "%-----------------------JES2 DISPLAY FACILITY  (JDF)  --------------------------\n+\n+                     -----------------------------------\n+                     |          J  D  F                |\n+                     -----------------------------------\n+  THIS IS THE DATASET DISPLAY PANEL. THIS SHOULD ONLY BE USED FOR\n+  SHORT CARD-IMAGE FILES. THE ONLY COMMANDS YOU CAN ENTER ARE \"M\"\n+  OR A NUMBER OF LINES TO BE INTERPRETED IN CONJUNCTION WITH PFK7 OR 8.\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JDFDSTAB": {"ttr": 10761, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  @  TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%------------ JDF DATASET LINE DISPLAY  ----------------------------------------\n COMMAND ==>_ZCMD                                               %SCROLL =>_AMT %\n &OLDCMD                                                                      +\n)MODEL\n @Z\n)INIT\n .CURSOR=ZCMD\n  &AMT=PAGE\n  &ZCMD=' '\n  &VARS='(DSLN)'\n  .HELP=JDFDSHLP\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JDFHELP": {"ttr": 10763, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "CBT353"}, "text": "%-----------------------JES2 DISPLAY FACILITY  (JDF)  --------------------------\n+\n+  JDF IS AN IN-HOUSE WRITTEN SYSTEM THAT PROVIDES A JES INQUIRY FACILITY\n+  FROM TSO. YOU CAN LOOK AT THE STATUS OF ALL JOBS IN THE SYSTEM\n+  AND GET DETAILED INFORMATION ABOUT THE TEST JOBS THAT YOU\n+  HAVE SUBMITTED. YOU CAN ALSO VIEW ANY REPORT FILES ONLINE FROM YOUR\n+  JOBS.\n+\n+  THE JOBS ARE ALWAYS SHOWN IN JES2 SELECTION PRIORITY SEQUENCE. THIS\n+  IS OBVIOUSLY IRRELEVANT FOR JOBS THAT ARE EXECUTING, BUT FOR JOBS ON\n+  INPUT OR OUTPUT QUEUES, THE ORDER OF THE LIST SHOWS YOU WHICH JOBS\n+  WILL BE SELECTED FOR EXECUTION OR PRINTING FIRST.\n+\n+  THE OUTLIST DATASET IS THE NAME OF A STANDARD TSO DATASET WHICH WILL\n+  BE USED FOR BROWSING INDIVIDUAL REPORTS ON THE SPOOL. IF YOU PRE-\n+  ALLOCATE THE DATASET, THE LRECL WILL BE USED, AND RECORDS WILL BE\n+  TRUNCATED IF NECESSARY.\n+\n+  The \"DW\" option shows Job Output Elements (JOE's) that are queue'd to\n+  an external writer. This is normally an IDTF transmission that has not\n+  been RECEIVE'd.\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JDFHJOB": {"ttr": 10765, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "CBT353"}, "text": "%-----------------------JES2 DISPLAY FACILITY  (JDF)  --------------------------\n+\n+This is the Job display screen, showing you Jobs and status.\n\n The following commands can be entered on the command line:\n\n%DA+ Active (jobs)   %DE+ Every Job            %DH+ Jobs with Held Output(s)\n%DS+ Status (or ST)  %DI+ Initiators           %DO+ Outputs ready to print\n%DQ+ Input queue     %DR+ Remote outputs       %DL+ SYSLOG(s)\n%DT+ NJE transmit Q  %DW+ Writer Jobs%(IDTF)+  %QS+ Remote output Queue Summary\n\n Enter %JOB, STC,+or%TSU+ to change the scope of the %DA+ command.%DO-+ can be\n used to limit the display to one specific SYSOUT class.%DRnn+ will limit the\n display to one specific remote destination.\n\n The following commands can be entered in the Opt column:\n\n%S+  Select          %B+  BPSCAN Select        %TC-+Change Initiator class\n%A+  Release         %H+  Hold                 %OJ-+Change Output SYSOUT class\n%C+  Cancel          %P+  Purge                %Rnn+Route SYSOUT X to Remote nn\n%D+  Dump            %RQ-+Change SYSOUT X      %RU3+Route SYSOUT X to Chem\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JDFHOPT": {"ttr": 10767, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "CBT353"}, "text": "%-----------------------JES2 DISPLAY FACILITY  (JDF)  --------------------------\n+\n+  JDF IS AN IN-HOUSE WRITTEN SYSTEM THAT PROVIDES A JES INQUIRY FACILITY\n+  FROM TSO. YOU CAN LOOK AT THE STATUS OF ALL JOBS IN THE SYSTEM\n+  AND GET DETAILED INFORMATION ABOUT THE TEST JOBS THAT YOU\n+  HAVE SUBMITTED. YOU CAN ALSO VIEW ANY REPORT FILES ONLINE FROM YOUR\n+  JOBS.\n+\n+  THE JOBS ARE ALWAYS SHOWN IN JES2 SELECTION PRIORITY SEQUENCE. THIS\n+  IS OBVIOUSLY IRRELEVANT FOR JOBS THAT ARE EXECUTING, BUT FOR JOBS ON\n+  INPUT OR OUTPUT QUEUES, THE ORDER OF THE LIST SHOWS YOU WHICH JOBS\n+  WILL BE SELECTED FOR EXECUTION OR PRINTING FIRST.\n+\n+  THE OUTLIST DATASET IS THE NAME OF A STANDARD TSO DATASET WHICH WILL\n+  BE USED FOR BROWSING INDIVIDUAL REPORTS ON THE SPOOL. IF YOU PRE-\n+  ALLOCATE THE DATASET, THE LRECL WILL BE USED, AND RECORDS WILL BE\n+  TRUNCATED IF NECESSARY.\n+\n+  The \"DW\" option shows Job Output Elements (JOE's) that are queue'd to\n+  an external writer. This is normally an IDTF transmission that has not\n+  been RECEIVE'd.\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JDFMACS": {"ttr": 10769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x01\\xab\\x01\\xab\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 427, "newlines": 427, "modlines": 0, "user": "CBT353"}, "text": "         EJECT\n***********************************************************************\n*\n*  THIS IS A SET OF MACROS USED IN THE JES DISPLAY FACILITY (JDF) AND\n*  RELATED PROGRAMS. EACH MACRO CONTAINS A DSECT; THE DSECTS ARE USED\n*  IN BOTH JDF AND IN THE JDF INTERFACE SVC.\n*\n*  MACROS INCLUDED ARE:\n*\n*   NAME        DESCRIPTION\n*\n*  JDFJOB       JOB INFO EXTRACTE FROM JQE'S AND JOE'S.\n*  JJSDSECT     WORK AREA FOR SVC CALL TO BUILD JOB RECORDS\n*  MCSDSECT     WORK AREA FOR SVC CALL TO RETRIEVE CONSOLE LINES.\n*  CMDDSECT     WORK AREA FOR SVC CALL TO ISSUE MVS/JES COMMANDS.\n*  JEDDSECT     WORK AREA FOR SVC CALL FOR JCT EXTRACT DATA.\n*  PEDDSECT     WORK AREA FOR SVC CALL FOR PDDB EXTRACT DATA.\n*  DDLINE       INFO RELATING TO DD CARDS IN JOB.\n*\n*\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*  JJSDSECT    THIS IS THE LAYOUT OF THE WORK AREA USED WHEN THE JDF\n*              SVC IS INVOKED TO BUILD THE JOB RECORDS.\n*\n***********************************************************************\n         MACRO\n         JJSDSECT\n.*\n.* THIS IS THE JDF JOB SVC DSECT. THIS MAPS THE STORAGE AREA THAT MUST\n.* BE PROVIDED BY THE CALLING PROGRAM.\n.*\n.* ON RETURN FROM THE SVC CALL, THE FIELD \"JJSLINE1\" CONTAINS THE\n.* FIRST JOB RECORD (MAPPED BY \"JDFJOB\", BELOW). ADDITIONAL JOB\n.* RECORDS FOLLOW CONTIGUOUSLY.\n.*\n.*\n.*\nJJSDSECT DSECT\n         DS    18F\nJJSR14   DS    F\n*\n*\nJJSAXLST DS    F             AX\nJJSJQES  DS    F                       JES JQE ADDRESSES\nJJSJOES  DS    F                       JES JOE ADDRESSES\nJJSDAS   DS    F             TRACK EXTENT TABLE\n*\nJJSNSWP  DS    F\nJJSOKSWP DS    F\n*\nJJSHCT   DS    F             HCT ADDRESS\nJJSDCB   DS    F             SPOOL DCB\nJJSWJOE  DS    F             POINT TO WORK JOE\nJJSBFSIZ DS    H             BUFFER SIZE\nJJSNODE  DS    H             THIS NODE ID\n*JSKEEPF DS    XL1\nJJSMAXJQ DS    H             MAXIMUM JQES\n*\nJJSCURRJ DS    XL52\nJJSCURRW DS    XL84\nJJSCURRC DS    XL84\n*\nJJSSAVE2 DS    18F\nJJSAMODE DS    F\nJJSKACAD DS    F   ADDRESS OF KAC CONTROL BLOCK\nJJSSUBNM DS    CL4 NAME OF JES SUB-SYSTEM\nJJSFLAG1 DS    XL1 FLAG\n         DS    XL3\nJJSHEADS DS    XL192\nJJSLENGT EQU   *-JJSDSECT\n*\n         ORG   JJSDSECT+1024\n*\nJJSLINE1 DS    XL(JOBSIZE)   ONE OCCURENCE PER JQE/WORK JOE\n*\n         MEND\n         EJECT\n***********************************************************************\n*\n*  JDFJOB       THE JDF JOB RECORD CONTAINS FIELDS EXTRACTED FROM JQE'S\n*              AND JOE'S. IT IS BUILT BY THE JDF SVC USING CROSS-MEMORY\n*              SERVICES.\n*\n***********************************************************************\n         MACRO\n         JDFJOB &JESEQ=NO\n*\nJOBDSECT DSECT\n*                                      JQE FIELDS\n*\nJOBTYPE  DS    XL1 * THIS FIELD IS SET TO X'FF' TO INDICATE THE END\n*                  * OF THE LIST.\nJOBFLAGS DS    XL1\nJOBFLAG3 DS    XL1\n*                                  /*XMIT OR INTERMEDIATE NODE JOB SPR2\nJOBFLAG4 DS    XL1\n*\nJOBHLDCT DS    XL2\nJOBINPND DS    XL2  ???NOT REFERENCED\nJOBTHISN DS    XL2\nJOBXEQND DS    XL2\nJOBPRNOD DS    XL2\nJOBJCLAS DS    XL1\nJOBJNAME DS    XL8\nJOBJOBNO DS    XL2\n*\nJOBTRAK  DS    XL4\n*\nJOBJQELN EQU   *-JOBDSECT\n*                                    WORK JOE FIELDS\nJOBJOEWK DS    0XL38\n*\nJOBCURCL DS    XL1\nJOBDEVID DS    XL3\nJOBRECCT DS    XL4\nJOBRNODE DS    XL2\nJOBREMOT DS    XL2\nJOBGNAME DS    CL8                   OUTPUT GROUP NAME   JOENAME\nJOBGID1  DS    CL2                   OUTPUT GROUP 1ST ID JOEID1\nJOBGID2  DS    CL2                   OUTPUT GROUP 2ND ID JOEID2\n*                                     CHARACTERISTIC JOE FIELDS\nJOBCFLAG DS    XL1    MERGER OF JOEFLAG AND JOECFLAG\nJOBFORM  DS    XL8\nJOBWTRID DS    XL8\n*\nJOBJOEWL EQU   *-JOBJOEWK\n*\nJOBSIZE  EQU   *-JOBDSECT\n         AIF   ('&JESEQ' EQ 'NO').ZZZ\n*\n*  THIS IS THE JDF JOB SVC DSECT EQUATES.\n*\n* JOBTYPE\nQUECLASS EQU   X'7F'               CLASS OF JOB QUEUED FOR EXECUTION\n$DUMMY   EQU   X'80'               RESERVED QUEUE\n$XEQ     EQU   X'40'               OS EXECUTION QUEUE\n$INPUT   EQU   X'20'               INPUT QUEUE\n$XMIT    EQU   X'10'               TRANSMISSION QUEUE\n$SETUP   EQU   X'08'               SETUP QUEUE\n$RECEIVE EQU   X'04'               SYSOUT RECEIVER QUEUE\n$DUMPQ   EQU   X'03'               SPOOL OFFLOAD DUMP QUEUE        SPR2\n$OUTPUT  EQU   X'02'               OUTPUT QUEUE\n$HARDCPY EQU   X'01'               OUTPUT IN-PROGRESS QUEUE\n$PURGE   EQU   X'00'               PURGE QUEUE\n$FREE    EQU   X'FF'               FREE QUEUE                     @SPR2\n*\n* JOBFLAGS\nQUEHOLDA EQU   X'80'               HOLD ALL JOBS\nQUEHOLD1 EQU   X'40'               HOLD SINGLE JOB\nQUEHOLD2 EQU   X'20'               HOLD FOR DUPLICATE JOB NAME\nQUEPURGE EQU   X'10'               JOB IS TO BE PURGED\nQUEOPCAN EQU   X'08'               OPERATOR ISSUED $C OR $P JOB\nQUEBUSY  EQU   X'07'               JQE BUSY SYSTEM ID\n*\n*  JOBFLAG3\nQUEJOB   EQU   X'03'               BATCH JOB TYPE WHEN ZERO        SPR2\nQUESTC   EQU   X'01'               STC JOB TYPE                    SPR2\nQUETSU   EQU   X'02'               TSU JOB TYPE                    SPR2\nQUEXMIT  EQU   X'04'               JOB DESTINED FOR ANOTHER NODE   SPR2\nQUETMOD  EQU   X'08'               JOB IS BEING PROCESSED BY $TO   SPR2\nQUEMVRQ  EQU   X'80'               MOVE JOB FOR SPOOL COMMANDS     @133\nQUEUNSPN EQU   X'40'               JOB HAS UNSPUN SPIN IOTS        @133\nQUEMVING EQU   X'20'               JOB IS BEING MOVED FROM SPL VOL @133\nQUESYSDS EQU   X'10'               JQE REPRESENTS SYSTEM DATA SET,\n*                                   IMPLIES JQETRAK POINTS TO IOT  @133\n*                                  /*XMIT OR INTERMEDIATE NODE JOB SPR2\n*  JOBFLAG4\nQUE4CAN  EQU   X'80'               FORCE SELECT WHEN VOL INACTIVE  @133\nQUE4NEWS EQU   X'40'               JOB IS JES2NEWS.            @OZ74557\nQUE4PURG EQU   X'20'               TRACKS ARE BEING PURGED     @OZ75831\nQUENSYSJ EQU   X'10'               JOB CREATED BY SYSOUT RECV    @133MQ\n*\n*  JOBCFLAG\n$JOEBRST EQU   B'10000000'         BURST=YES FLAG\n$JOESPIN EQU   B'01000000'         SPIN JOE FLAG\n$JOEPRT  EQU   B'00100000'         JOE ON-PRINTER FLAG\n$JOEPUN  EQU   B'00010000'         JOE ON-PUNCH FLAG\n$JOEHOLD EQU   B'00001000'         HOLD JOE FLAG\n$JOEBUSY EQU   B'00000111'         JOE BUSY/SYSTEM ID FLAGS\n.ZZZ     ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  MCSDSECT    THIS IS THE LAYOUT OF THE WORK AREA USED WHEN RETRIEVING\n*              MCS CONSOLE LINES. THE CALLER MUST PROVIDE THIS AREA.\n*\n*              ON RETURN FROM THE SVC, THE FIRST CONSOLE LINE IS IN\n*              \"MCSLINE1\", THE REST OF THE LINES FOLLOW AFTER. EACH\n*              LINE IS 76 BYTES LONG. THE FIRST BYTE OF THE LINE IS\n*              SET TO X'FF' TO INDICATE THE END.\n*\n***********************************************************************\n         MACRO\n         MCSDSECT\nMCSDSECT DSECT\n         DS    18F\nMCSREGS  DS    0F\nMCSR0    DS    F\nMCSR1    DS    F\nMCSR2    DS    F\nMCSR3    DS    F\nMCSR4    DS    F\nMCSR5    DS    F\nMCSR6    DS    F\nMCSR7    DS    F\nMCSR8    DS    F\nMCSR9    DS    F\nMCSR10   DS    F\nMCSR11   DS    F\nMCSR12   DS    F\nMCSR13   DS    F\nMCSR14   DS    F\nMCSR15   DS    F\n*\nMCSAVE2  DS    18F\n*\nLINEPTR  DS    F\nCONSOLE  DS    F\nOLDCONS  DS    F\nMCSAX    DS    F\nNUMUCMS  DS    H\nMCSLINES DS    H\nMCSLSIZE DS    H\nMCSBUMP  DS    H\nCDFUCMID DS    XL1\nSIBPTR   DS    F                   PRT TO SCREEN IMAGE BUFFER\n         DS    0F\nUCMTAB   DS    F\n         DS    35F                PROVIDE SPACE FOR 20 UCM ADDRESSES\nUCMTABE  EQU   *\n         DS    0F\n         ORG   MCSDSECT+512\n*\nM4BUFLEN EQU   43*80              LENGTH OF 3278-4 BUFFER\nMCSLINE1 DS    43XL76             OUTPUT AREA\nBUF      DS    XL(M4BUFLEN)       LENGTH OF 3278-4 BUFFER\nWORKLEN  EQU   *-MCSDSECT\n         MEND\n         EJECT\n***********************************************************************\n*\n*  CMDDSECT    THIS IS THE LAYOUT OF THE WORK AREA USED WHEN ISSUING\n*              MVS/JES COMMANDS FROM A PROGRAM.\n*\n*              THE CALLER MUST PLACE THE COMMAND IN THE FIELD \"CMDWTO\".\n*\n***********************************************************************\n         MACRO\n         CMDDSECT\nCMDDSECT DSECT\n         DS    18F\nCMDREGS  DS    0F\nCMDR0    DS    F\nCMDR1    DS    F\nCMDR2    DS    F\nCMDR3    DS    F\nCMDR4    DS    F\nCMDR5    DS    F\nCMDR6    DS    F\nCMDR7    DS    F\nCMDR8    DS    F\nCMDR9    DS    F\nCMDR10   DS    F\nCMDR11   DS    F\nCMDR12   DS    F\nCMDR13   DS    F\nCMDR14   DS    F\nCMDR15   DS    F\n*\nLINEPTR  DS    F\nCONSOLE  DS    F\nOLDCONS  DS    F\nNUMUCMS  DS    H\nCDFUCMID DS    XL1\nSIBPTR   DS    F                   PRT TO SCREEN IMAGE BUFFER\n         DS    0F\nUCMTAB   DS    F\n         DS    35F                PROVIDE SPACE FOR 20 UCM ADDRESSES\nUCMTABE  EQU   *\n         DS    0F\n         ORG   CMDDSECT+512\n*\nCMDWTO   DS    XL80\nWORKLEN  EQU   *-CMDDSECT\n         MEND\n         EJECT\n***********************************************************************\n*\n*  JEDDSECT    THIS IS THE LAYOUT OF THE WORK AREA USED WHEN THE JDF\n*              SVC IS INVOKED TO RETRIEVE JCT EXTRACT DATA.\n*\n***********************************************************************\n         MACRO\n         JEDDSECT\nJEDDSECT DSECT\n         DS    18F\nJEDREGS  DS    0F\nJEDR0    DS    F\nJEDR1    DS    F\nJEDR2    DS    F\nJEDR3    DS    F\nJEDR4    DS    F\nJEDR5    DS    F\nJEDR6    DS    F\nJEDR7    DS    F\nJEDR8    DS    F\nJEDR9    DS    F\nJEDR10   DS    F\nJEDR11   DS    F\nJEDR12   DS    F\nJEDR13   DS    F\nJEDR14   DS    F\nJEDR15   DS    F\n*\nJEDSAVE2 DS    18F\n*\nJEDMTTR1 DS     F\n         DS    0F\n         ORG   JEDDSECT+508\n*\nJEDMTTR2 DS    XL4\n*\nJEDBUFF  DS    0XL22\nJEDSPIOT DS    XL4           JCTSPIOT    SPIN IOT ADDRESS\nJEDIOT   DS    XL4           JCTIOT      IOT ADDRESS\nJEDEXSID DS    CL4           JCTEXSID    EXECUTION SMF SYSTEM-ID\nJEDUSEID DS    CL8           JCTUSEID    SUBMITTING USER-ID\nJEDJBKEY DS    CL4           JCTJBKEY    JOB KEY\nJEDATOUT DS    XL4           JCTODTON    DATE ON OUTPUT QUEUE\n*\nJEDLEN   EQU   *-JEDDSECT\n         MEND\n         EJECT\n***********************************************************************\n*\n*  PEDDSECT    THIS IS THE LAYOUT OF THE WORK AREA USED WHEN THE JDF\n*              SVC IS INVOKED TO RETRIEVE PDDB EXTRACT (DDLINE) DATA.\n*\n***********************************************************************\n         MACRO\n         PEDDSECT\nPEDDSECT DSECT\n         DS    18F\nPEDREGS  DS    0F\nPEDR0    DS    F\nPEDR1    DS    F\nPEDR2    DS    F\nPEDR3    DS    F\nPEDR4    DS    F\nPEDR5    DS    F\nPEDR6    DS    F\nPEDR7    DS    F\nPEDR8    DS    F\nPEDR9    DS    F\nPEDR10   DS    F\nPEDR11   DS    F\nPEDR12   DS    F\nPEDR13   DS    F\nPEDR14   DS    F\nPEDR15   DS    F\n*\nPEDSAVE2 DS    18F\n*\nDOUBLEWD DS    D\nSPOLPARM DS    F\nSPINFLAG DS    XL1\n         DS    0F\n         ORG   PEDDSECT+512\n*\nSPINIOT  DS    XL4           JCTSPIOT    SPIN IOT ADDRESS\nNORMIOT  DS    XL4           JCTIOT      IOT ADDRESS\nPEDEXSID DS    CL4           JCTEXSID    EXECUTION SMF SYSTEM-ID\nPEDUSEID DS    CL8           JCTUSEID    SUBMITTING USER-ID\nPEDJBKEY DS    CL4           JCTJBKEY    JOB KEY\n*\n*\n*\nDDAREA   EQU   *\n         ORG   PEDDSECT+7168\nSPOLAREA DS    XL5120\nWORKLEN  EQU   *-PEDDSECT\n         MEND\n         EJECT\n***********************************************************************\n*\n*  DDLINE      THIS IS MAPS THE DDLINE DATA.\n*\n***********************************************************************\n         MACRO\n         DDLINE\nDDLINE   DSECT\nDDLDSID  DS    CL3\nDDREMOTE DS    CL1\n         DS    CL1\nPROCNAME DS    CL8\n         DS    CL1\nSTEPNAME DS    CL8\n         DS    CL1\nDDN      DS    CL8\n         DS    CL1\nDDLINES  DS    CL8\n         DS    CL2\nDDCLASS  DS    CL1\n         DS    CL2\nDDFORM   DS    CL4\n         DS    CL1\nDDFCB    DS    CL4\n         DS    CL1\nDDUCS    DS    CL4\n         DS    CL1\nDDCOPIES DS    CL3\nDDBURST  DS    CL1\nDDDRECL  DS    CL6\n         DS    CL1\nDDDRECF  DS    CL3\nDDLINSHO EQU   *-DDLINE\nDDMTTR   DS    CL4\nDDLRECL  DS    XL2                    PDDB LRECL\nDDRECFM  DS    X                      PDDB RECFM\nDDLINESZ EQU   *-DDLINE\n*\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JDFOPT": {"ttr": 11012, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "CBT353"}, "text": "%--------      JES2 Display Facility  (JDF)  Option Menu      ------------------\n%\n%Select Option ===>_JDFOPTN +\n%\n%   S +Status         - Enter job/lvl%===>_LVL            +\n%\n%   A +Display Active - Jobs executing\n%   Q +Display Queue  - Jobs waiting to be executed (local node)+\n%   O +Display Output - Jobs waiting to be printed (local printers)+\n%   R +Display Remote - Jobs waiting to be printed (remote printers)+\n%   T +Display Transm - Jobs waiting to be transmitted to a remote node +\n%\n%   E +Display Every  - All jobs in the system (including purge queue)\n%   H +Display Held   - Jobs with class X sysouts\n%   I +Display Init   - Status of initiators\n%   L +Display Log    - Running system log\n%   W +Display Writer - External writer/TSO transmit outputs             +\n%\n+Enter OUTLIST dsname -_JDFLST                                                 +\n%\n%\n+Press%END KEY+to return to the previous menu                    +\n)INIT\n  &ZPRIM = NO         /* NOT ALWAYS A PRIMARY OPTION MENU      */\n  &LVL = &ZUSER\n  &JDFOPTN = S\n  &JDFLST  = @TEMP.OUTLIST\n  .HELP=JDFHELP\n)PROC\n  &JDFZ = TRUNC (&JDFOPTN,1)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JDFPJOB": {"ttr": 11014, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON) USERMOD(20)\n  ! TYPE(OUTPUT)  INTENS(HIGH) PAD(-)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n 03 TYPE(DATAOUT) SKIP(ON) /* FOR TEXT ENTER CMD. FIELD */\n 04 TYPE(DATAIN)  INTENS(NON)  /* nondisplay */\n 05 TYPE(DATAIN)  INTENS(HIGH) CAPS(OFF)\n 06 TYPE(DATAIN)  INTENS(LOW)  CAPS(IN)\n 07 TYPE(DATAIN)  INTENS(HIGH) CAPS(IN)\n 08 TYPE(DATAIN)  INTENS(LOW)\n 09 TYPE(DATAIN)  INTENS(LOW)\n 0A TYPE(DATAIN)  INTENS(LOW)\n 20 TYPE(DATAIN)  INTENS(LOW) CAPS(IN)\n)BODY\n%--------------------- JES2 Display Facility (JDF) -----------------------------\n Command ==>_JDFJCMD                                            %SCROLL =>_AMT %\n &OLDCMD                                                                      +\n%Opt Jobnum   Jobname  Status/Name     Cl Sys Typ   Lines  Cl Form B Nd R/DEV/W\n|JDFJOBS ----------------------------------------------------------------------|\n|                                                                              |\n| -----------------------------------------------------------------------------|\n)INIT\n .CURSOR=JDFJCMD\n  &AMT=PAGE\n  &ZLVLINE = LVLINE(JDFJOBS)\n  .HELP=JDFHJOB\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JDFPOPT": {"ttr": 11016, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "CBT353"}, "text": "%--------      JES2 Display Facility  (JDF)  Option Menu      ------------------\n%\n%Select Option ===>_JDFOPTN +\n%\n%   S +Status         - Enter job/lvl%===>_LVL            +\n%\n%   A +Display Active - Jobs executing\n%   Q +Display Queue  - Jobs waiting to be executed (local node)+\n%   O +Display Output - Jobs waiting to be printed (local printers)+\n%   R +Display Remote - Jobs waiting to be printed (remote printers)+\n%   T +Display Transm - Jobs waiting to be transmitted to a remote node +\n%\n%   E +Display Every  - All jobs in the system (including purge queue)\n%   H +Display Held   - Jobs with class X sysouts\n%   I +Display Init   - Status of initiators\n%   L +Display Log    - Running system log\n%   W +Display Writer - External writer/TSO transmit outputs             +\n%\n+Enter OUTLIST dsname -_JDFLST                                                 +\n%\n%\n+Press%END KEY+to return to the previous menu                    +\n)INIT\n  &ZPRIM = NO         /* NOT ALWAYS A PRIMARY OPTION MENU      */\n  &LVL = &ZUSER\n  &JDFOPTN = S\n  &JDFLST  = @TEMP.OUTLIST\n  .HELP=JDFHOPT\n)PROC\n  &JDFZ = TRUNC (&JDFOPTN,1)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JDFREPR": {"ttr": 11018, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "CBT353"}, "text": "%--------      JES2 Display Facility  (JDF)     Reprint Menu   -----------------\n%\n%          Enter/Verify Reprint Parameters\n%\n%  +Class %==>_RCLASS+\n%  + Dest %==>_RDEST     +\n%  +Copies%==>_RCOPIES+\n+ Carriage\n+  Control%==>_RCCO+      (A = ANSI, M = machine, N = none)\n%\n%\n+Press%ENTER  +to complete print.\n%\n+Press%END KEY+to cancel print.\n)INIT\n  &ZPRIM = NO         /* NOT ALWAYS A PRIMARY OPTION MENU      */\n  .HELP=JDFREPRH\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JDFREPRH": {"ttr": 11020, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x13\\x00\\x13\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "CBT353"}, "text": "%--------      JES2 Display Facility  (JDF)     Reprint Menu   -----------------\n%\n+\n+  This is the DSID reprint menu. It allows you to specify various option for\n+  the copy you will be generating.\n+\n+  The fields are self-explanatary, for the most part, however please note that\n+  leading zeros are%MANDATORY+ for number of copies.\n+\n+  The default destination is \"N1\", that is, the local printers on the MVSA\n+  system at the Chicago Data Center. Other destinations include:\n+\n+          CIS6670 -- the 6670\n+          N5      -- Canadian Salt (Class should be set to \"Y\".)\n+          CISCHEM -- the Chemical 3820 printer (can also be specified as \"U3\")\n+\n+  The carriage control types are documented in the JCL manual under \"RECFM\".\n+\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JDFRMT": {"ttr": 11022, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  @ TYPE(OUTPUT) INTENS(HIGH)\n)BODY\n%----- JES2 Display Facility (JDF)  Remote Queue Summary\n Command ==>_RCMD                                               %SCROLL =>_AMT %\n%\n+#In que RMT Rname   Description      #In que RMT Rname   Description\n%\n)MODEL\n   @RMT1                               +@RMT2                                  +\n)INIT\n .CURSOR=RCMD\n  &AMT=PAGE\n  .HELP=JDFRMTH\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JDFRMTH": {"ttr": 11024, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "CBT353"}, "text": "%--------      JES2 Display Facility  (JDF)     Remote Display -----------------\n%\n+\n+  This is the Remote output summary. It shows you the number of jobs waiting\n+  to be printed for each remote RJE station. (Actually, it shows the number\n+  of WORK JOE's routed to each remote.)\n+\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JDFRULES": {"ttr": 11026, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00s\\x00s\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 115, "newlines": 115, "modlines": 0, "user": "CBT353"}, "text": "1\n\n    This will document the access restrictions within JDF.\n\n    Any TSO user can look at all SYSIN and SYSOUT files in a job if the\n    job name has the userid as the leading 5 characters, or if the TSO\n    user submitted the job.\n\n    With the execeptions noted below, anyone can also look at:\n\n            1. SYSLOG. This is the console log for MVSA or MVSB.\n            2. Initiators--which are active, job classes, etc.\n            3. Job status--what jobs are active, awaiting print, etc.\n            4. JES datasets--JCL, condition codes, allocation messages,\n               and JOB LOG for any job.\n            5. Any job with a blank submitting userid field.\n\n\n    The exceptions are:\n\n            1. Software Engineering jobs can be looked at only by\n               Software Engineering users.\n            2. BPSCAN can look at all jobs except Software Engineering\n               jobs.\n            3. Software Engineering users can look at all jobs except:\n                   a) MPS (Payroll) production jobs.\n                   b) R3 (6670 confidential) reports, memos, etc.\n            4. Operations users can look at all jobs except:\n                   a) MPS (Payroll) production jobs.\n                   b) R3 (6670 confidential) reports, memos, etc.\n                   c) Software Engineering jobs.\n            5. Canadian Salt \"BCS\" jobs can be looked at by users EFBVF\n               and EFCPZ.\n\n\n    The restrictions on looking at jobs also apply to issuing commands\n    that affect the status of jobs, such as HOLD, RELEASE, CANCEL, etc.\n\n    All of these rules and exceptions are hard-coded in the program,\n    which makes maintenance difficult.\n\n\n    I propose that we change this entire scheme so that access to jobs\n    is controlled by ACF2 Generalized Resource rules. We would continue\n    to allow anyone to view a job if they submitted it, or if the jobname\n    is prefixed by their userid, without reference to ACF2. Otherwise,\n    JDF would call the ACFCHK module.\n\n    We may also want to continue to deny non-Software Engineering users\n    access to our jobs, just as a blanket rule, since they often contain\n    VSAM passwords, system exits, and the like.\n1\n                                                                         Page 2\n\n\n    I propose the following ACF2 resource structure:\n\n        1. Exception resources. This identifies production jobs\n           that cannot be viewed or acted upon through JDF by\n           any userid without specific authority. At present,\n           only MPS (payroll) jobs are in this category.\n\n                  TYPE======> MPS                    <== system-id\n                   KEY======> EXCEPTION              <== literal\n                  USER======> SYSADM                 <== literal\n\n        2. Privileged users. This identifies users that may have\n           a requirement to view outputs from any jobs.\n\n                  TYPE======> JDF                    <== literal\n                   KEY======> ALLJOBS                <== literal\n                  USER======> AOYQJ\n\n        3. System-wide users. This identifies users that may have\n           a requirement to view outputs from any jobs in a particular\n           system.\n\n                  TYPE======> BCS                    <== system-id\n                   KEY======> ALLJOBS                <== literal\n                  USER======> EHCPK\n\n        4. Single-job users. This identifies users that may have\n           a requirement to view outputs from a particular job.\n\n                  TYPE======> BCS                    <== system-id\n                   KEY======> BCSM0100               <== job name\n                  USER======> EHKLM\n\n    JDF would use this as follows:\n\n        1. Tests would be made for the BPSCAN userid and Software\n           Engineering jobs, and the same actions would be taken\n           as are taken today. These are static requirements, and\n           require no maintenance.\n\n        2. If the jobname matches the userid, or was submitted by\n           the userid, access would always be allowed. For test\n           jobs, or confidential outputs, these are the only criteria.\n\n        3. For production jobs, the following series of tests would\n           be made:\n\n           A. If a rule exists with type=system-id and key=EXCEPTION,\n              go to step C, below.\n\n           B. If a rule exists with type=JDF and key=ALLJOBS for the\n              userid, allow access.\n\n           C. If a rule exists with type=system-id and key=ALLJOBS\n              for the userid, allow access.\n\n           D. If a rule exists with type=system-id and key=jobname\n              for the userid, allow access.\n\n           E. In all other cases, disallow access.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JDFSVC": {"ttr": 11029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\n\\x9d\\n\\x9d\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 2717, "newlines": 2717, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCSVC  JOB (X0041,QCC,ASQCC),'X-BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=999\n//*\n//* TECH.XA.SOURCE   (JDFSVC)\n//*\n//JOBLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR,\n//         UNIT=3380,VOL=SER=MVSTGT\n//*\n//ASM     EXEC PGM=IEV90,REGION=1024K,\n//             PARM='OBJECT,NODECK,TERM,RENT,XREF(SHORT),BATCH'\n//SYSLIB   DD  DSN=SYS1.HASPSRC,DISP=SHR,\n//         UNIT=3380,VOL=SER=MVSDLB\n//         DD  DSN=SYS1.MACLIB,DISP=SHR,\n//         UNIT=3380,VOL=SER=MVSTGT\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR,\n//         UNIT=3380,VOL=SER=MVSDLB\n//         DD  DISP=SHR,DSN=SYS2.MACLIB   <== JDFMACS, CVTUSERS\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD  DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nJDFSVC   TITLE 'CHANGE LOG'\n***********************************************************************\n*  CHANGE LOG                                                         *\n*                                                                     *\n*  9/26/86  BRIAN COOK   ADDED SUPPORT FOR TEST JDF SVC, KEYED OFF    *\n*                        CVTUSER SUB-FIELD.                           *\n*                                                                     *\n*  8/31/86  BRIAN COOK   NOW MCSLINES IN BUFFER HAVE 12 BYTES OF      *\n*                        JUNK, AND LINES ARE 90 INSTEAD OF 84 BYTES.  *\n*                                                                     *\n*  4/20/86  BRIAN COOK   ADDED JOE GROUP ID FIELDS TO JDF JOB RECORD. *\n*                                                                     *\n*  2/03/86  BRIAN COOK   MCSLINES IN BUFFER HAVE 6 BYTES OF JUNK      *\n*                                                                     *\n*  1/31/86  BRIAN COOK   CODED MAXJQE'S=2000, MAXJOE'S=3000           *\n*                                                                     *\n*  1/27/86  BRIAN COOK   REVISED MCSSVC LINE COUNT LOGIC              *\n*                                                                     *\n*  1/24/86  BRIAN COOK   FORGOT TO MVCP LENGTH FIELDS (SIGH)          *\n*                                                                     *\n*  1/19/86  BRIAN COOK   CHANGED MCSSVC TO CALCULATE LENGTH FOR MVCP  *\n*                        FROM \"IEECDCM\" VALUES.                       *\n*                                                                     *\n*  1/15/86  BRIAN COOK   CHANGED CDF INTERFACE TO USE UCM ASID AS     *\n*                        CROSS-MEMORY-SERVICES ASID.                  *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         TITLE 'IGC0023G  -  JES2 SPOOL INTERFACE SVC 237'\n***********************************************************************\n*                                                                     *\n* TITLE -      JES2 SPOOL INTERFACE SVC                               *\n*                                                                     *\n* RELEASE -    1.5         JES SPOOL INTERFACE RELEASE                *\n*                                                                     *\n* AUTHOR -     MICHAEL LEE EMIGH                                      *\n*              UNITED AIR LINES - EXOKF COMPUTER CENTER               *\n*              1200 W. ALGONQUIN ROAD                                 *\n*              ELK GROVE VILLAGE, ILLINOIS                            *\n*              PHONE: 312-952-4371                                    *\n*                                                                     *\n* FUNCTION -   PROVIDES INTERFACE BETWEEN AN APPLICATION PROGRAM AND  *\n*              JES2 FOR READING JES2 CHECKPOINT RECORDS AND READING   *\n*              OR WRITING TO THE JES2 SPOOL DATASETS.                 *\n*                                                                     *\n* INPUT -      STANDARD SVC LINKAGE CONVENTIONS                       *\n*              REGISTER 0 - FUNCTION PARAMETER REGISTER               *\n*              REGISTER 1 - FUNCTION PARAMETER REGISTER               *\n*              REGISTER 3 - ADDRESS OF CVT                            *\n*              REGISTER 4 - ADDRESS OF TCB                            *\n*              REGISTER 5 - ADDRESS OF SVRB                           *\n*              REGISTER 6 - ADDRESS OF SVC ENTRY POINT                *\n*              REGISTER 7 - ADDRESS OF ASCB                           *\n*              REGISTER 15 - FUNCTION CODE:                           *\n*                                                                     *\n*                                  FUNCTION CODE = 1   --> CMD        *\n*                                  FUNCTION CODE = 2   --> JQE'S/JOE'S*\n*                                  FUNCTION CODE = 3   --> READ SPOOL *\n*                                  FUNCTION CODE = 4   --> SS REQUEST *\n*                                  FUNCTION CODE = 5   --> AUTHORIZE  *\n*                                  FUNCTION CODE = 6   --> UNAUTHORIZE*\n*                                                                     *\n* OUTPUT -     REGISTER 0  - FUNCTION DEPENDENT DATA                  *\n*              REGISTER 1  - FUNCTION DEPENDENT DATA                  *\n*              REGISTER 15 - RETURN CODE FROM FUNCTION AS FOLLOWS     *\n*                 0 - NORMAL RETURN FROM FUNCTION                     *\n*                 4 - JES2 NOT ACTIVE                                 *\n*                 8 - INVALID FUNCTION CODE                           *\n*             >= 12 - FUNCTION DEPENDENT CODE                         *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES - REENTERANT, REUSABLE, REFRESHABLE                      *\n*                                                                     *\n* NOTES -      THIS CODE IS JES2 RELEASE DEPENDENT.  CURRENT JES2     *\n*              RELEASE SUPPORTED IS 4.1 AND NJE R3.                   *\n*                                                                     *\n*              REVISED FOR SP 1.3.4 BY BRIAN COOK, MNP.               *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         COPY  JDFMACS\n         TITLE 'IGC0023G  -  JES2 SPOOL INTERFACE SVC 237'\nIGC0023G CSECT                     JES2 SPOOL INTERFACE SVC\n         USING *,12\n         LR    R12,R6              LOAD BASE ADDRESS\n         B     BEGINSVC\n         DC    C'IGC0023G_JDF_INTERFACE_SVC_&SYSTIME_&SYSDATE'\nBEGINSVC DS    0H                  JES2 SPOOL INTERFACE SVC\n         USING RBSECT,R5           SET SVRB ADDRESSIBILITY\n         USING CVT,R3              SET CVT ADDRESSIBILITY\n         USING TCB,R4              SET TCB ADDRESSIBILITY\n         USING ASCB,R7             SET ASCB ADDRESSIBILITY\n         USING IOBNIOBA,R8         SET BUFFER ADDRESSIBILITY\n*\n*\n*  ADDED SUPPORT FOR TEST 237\n*\n*\n         L     R6,CVTUSER\n         USING CVTUSERS,6\n         CLC   CVT237ID(4),=C'T237'   TEST 237 INSTALLED\n         BNE   NOTST237               NO\n         L     R6,CVT237AD\n         DROP  6\n         LTR   R6,R6                  TEST 237 INSTALLED\n         BZ    NOTST237               NO\n         CR    R12,R6                 AM I THE TEST 237\n         BE    NOTST237               YES, CONTINUE\n*\n         BR    R6                     INVOKE TEST 237\n*\nNOTST237 DS    0H\n*\n*\n         XC    JIRETURN(JISL),JIRETURN CLEAR SVRB WORK AREA\n         STM   R14,R1,JIRETURN     SAVE RETURN ADDRESS AND PARM REGS\n*\n         CLI   JISR15+3,1          TEST\n         BE    CMD                 FUNCTION CODE = 1   --> CMD\n         CLI   JISR15+3,4          TEST\n         BE    SSREQ               FUNCTION CODE = 4   --> SS REQUEST\n         CLI   JISR15+3,16         TEST\n         BE    DYNAL               FUNCTION CODE = 16  --> DYNALLOC\n*\n         MVI   AXLIST+1,1          INITIALIZE AXLIST TO MASTER ASID\n         SLR   R1,R1               CLEAR SSVT ADDRESS REG\n         SLR   R0,R0               CLEAR SJB ADDRESS\n*\n         L     R6,TCBJSCB          POINT TO JSCB\n         LR    R15,R6              COPY JSCB ADDRESS\n         L     R15,JSCBSSIB-IEZJSCB(,R15) LOAD SSIB ADDRESS\n         L     R15,SSIBSUSE-SSIBEGIN(,R15) LOAD SJB ADDRESS\n         L     R15,SJBSJXB-SJBDSECT(,R15) LOAD SJB EXTENSION\n         MVC   SVCDCB(4),SJXIDCB-SJXDSECT(R15) LOAD SJB DCB ADDRESS\n*\n         L     R6,JSCBSSIB-IEZJSCB(,R6) POINT TO SSIB\n         USING SSIB,R6             SSIB ADDRESSIBILITY\n         L     R2,CVTJESCT         POINT TO SUBSYSTEM CNTL TBL\n         USING JESCT,R2            JESCT ADDRESSIBILITY\n         LA    R2,JESSSCT-(SSCTSCTA-SSCT) POINT TO SSCT HEAD\n         USING SSCT,R2             SSCT ADDRESSIBILITY\n         SPACE 2\n         LA    R15,4               SET JES2 NOT ACTIVE ERROR CODE\nINIT0    DS    0H                  SEARCH FOR JES2 SSCT\n         ICM   R2,15,SSCTSCTA      POINT TO NEXT SSCT\n         BZR   R14                 IF ZERO THEN ERROR\n         CLC   SSCTSNAM,SSIBSSNM   JES SSCT?\n         BNE   INIT0               NO, THEN LOOP\n         ICM   R6,15,SSCTSSVT      LOAD SSVT ADDRESS\n         BZR   R14                 IF ZERO THEN JES2 NOT ACTIVE\n         USING SSVT,6              JES2 SSVT ADDRESSIBILITY\n*\n*        MVC   SVCNUMDA(1),$SVNUMDA NUMBER OF SPOOL EXTENTS\n         MVC   SVCBFSIZ(2),$SVBFSIZ BUFFER SIZE\n         MVC   SVCDAS(4),$SVTDAS1  TRACK EXTENT TABLE\n         MVC   SVCHCT(4),$SVHCT\n*\n         LA    R15,8               SET FUNCTION ERROR CODE\n         LM    R0,R1,JISR0         RELOAD PARAMETER REGISTERS\n         CLI   JISR15+3,1          TEST\n         BE    CMD                 FUNCTION CODE = 1   --> CMD\n         CLI   JISR15+3,2          TEST\n         BE    GETJQES             FUNCTION CODE = 2   --> XMEM JQE/JOE\n         CLI   JISR15+3,3          TEST\n         BE    RDSPOOL             FUNCTION CODE = 3   --> READ SPOOL\n         CLI   JISR15+3,4          TEST\n         BE    SSREQ               FUNCTION CODE = 4   --> SS REQUEST\n         CLI   JISR15+3,5          TEST\n         BE    AUTHON              FUNCTION CODE = 5   --> AUTHORIZE\n         CLI   JISR15+3,6          TEST\n         BE    AUTHOFF             FUNCTION CODE = 6   --> UNAUTHORIZE\n         CLI   JISR15+3,7          TEST\n         BE    NOSWAP              FUNCTION CODE = 7   --> NONSWAPPABLE\n         CLI   JISR15+3,8          TEST\n         BE    OKSWAP              FUNCTION CODE = 8   --> SWAPPABLE\n         CLI   JISR15+3,9          TEST\n         BE    NOPASS              FUNCTION CODE = 9   --> PPTNOPAS\n         CLI   JISR15+3,10         TEST\n         BE    NEEDPASS            FUNCTION CODE = 10  --> PPTPAS\n         CLI   JISR15+3,11         TEST\n         BE    MCONS               FUNCTION CODE = 11  --> MCONS BUFF\n         CLI   JISR15+3,12         TEST\n         BE    JDFJQE2             FUNCTION CODE = 12  --> NEW JDF\n         CLI   JISR15+3,13         TEST\n         BE    MVSCMD2             FUNCTION CODE = 13  --> COMMANDS\n         CLI   JISR15+3,14         TEST\n         BE    JCTACC              FUNCTION CODE = 14  --> JCT ACCESS\n         CLI   JISR15+3,15         TEST\n         BE    PDDBACC             FUNCTION CODE = 15  --> PDDB ACCESS\n         BR    R14                 UNIDENTIFIED FUNCTION CODE\n         EJECT\nERROR    DS    0H                  ERROR RETURN\n         STM   R15,R1,JISR15       SAVE PARAMETER REGISTERS\n*\nEXIT0    DS    0H            EXIT SVC\n         LM    R14,R1,JIRETURN     RELOAD REGISTERS\n         BR    R14                 RETURN\nJESNOTUP DS    0H            EXIT SVC\n         LM    R14,R1,JIRETURN     RELOAD REGISTERS\n         LA    R15,12              SET RETURN CODE\n         BR    R14                 RETURN\n   TITLE 'IGC0023G - FUNCTION 1 - MVS/JES2 COMMAND INTERFACE'\n***********************************************************************\n*                                                                     *\n* TITLE -      FUNCTION 1 - MVS/JES2 COMMAND INTERFACE                *\n*                                                                     *\n* FUNCTION -   ISSUE A MVS/JES2 COMMAND VIA SVC 34.                   *\n*                                                                     *\n* INPUT -      STANDARD LINKAGE CONVENTIONS                           *\n*              REGISTER 0 - CONSOLE IDENTIFICATION                    *\n*              REGISTER 1 - ADDRESS OF MVS/JES2 COMMAND TEXT          *\n*                                                                     *\n* OUTPUT -     RETURN CODE TO APPLICATION PROGRAM                     *\n*              REGISTER 15 CONTAINS RETURN CODE FROM SVC 34.          *\n*                                                                     *\n*                                                                     *\n* NOTES -      THIS ROUTINE WILL ISSUE ANY MVS OR JES2 COMMAND.       *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nCMD      DS    0H                  ISSUE MVS/JES2 COMMAND\n         SVC   34                  ISSUE COMMAND SCHEDULER SVC\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         BR    R14                 RETURN\n*\n         TITLE 'IGC0023G - FUNCTION 2 - XMEM JQE/JOE S'\n***********************************************************************\n*                                                                     *\n* TITLE -      FUNCTION 2 - COPY JQES/JOE'S FROM HCT TO USER AREA     *\n*                                                                     *\n* INPUT -      REGISTER 0 - ADDRESS OF OUTPUT JOE'S                   *\n*              REGISTER 1 - ADDRESS OF OUTPUT JQE'S                   *\n*              REGISTER 3 - ADDRESS OF CVT                            *\n*              REGISTER 4 - ADDRESS OF TCB                            *\n*              REGISTER 5 - ADDRESS OF SVRB                           *\n*              REGISTER 6 - ADDRESS OF JES2 SSVT                      *\n*              REGISTER 7 - ADDRESS OF ASCB                           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nGETJQES  DS    0H                  READ JES2 JCT\n*\n         BAL   R7,AXSETUP          SET UP FOR JES2 XMEM SERVICES\n*\n*\n         L     R4,MYJQES\n         L     R3,JISR1\n         LA    R15,2000                NUMBER OF JQE'S\nJQELOOP  DS    0H\n         LA    R1,JQELNGTH\n         SLR   R0,R0                   SET STORAGE KEY\n         MVCP  0(R1,R3),0(R4),R0       MOVE JQE'S\n*\n         LA    R4,JQELNGTH(,R4)        BUMP \"FROM\" ADDRESS\n         LA    R3,JQELNGTH(,R3)        BUMP \"TO\"   ADDRESS\n         BCT   R15,JQELOOP                 GO GET NEXT\n*\nSETJOES  DS    0H\n*\n         L     R4,MYJOES\n         L     R3,JISR0\n         LA    R15,3000                NUMBER OF JOE'S\nJOELOOP  DS    0H\n         LA    R1,JOESIZE\n         SLR   R0,R0                   SET STORAGE KEY\n         MVCP  0(R1,R3),0(R4),R0       MOVE JQE'S\n*\n         LA    R4,JOESIZE(,R4)         BUMP \"FROM\" ADDRESS\n         LA    R3,JOESIZE(,R3)         BUMP \"TO\"   ADDRESS\n         BCT   R15,JOELOOP                 GO GET NEXT\n*\nDONEJOES DS    0H\n*\n*\n         BAL   R7,AXDROP           DROP JES2 XMEM SERVICES\n*\n         B     EXIT0\n         TITLE 'IGC0023G - FUNCTION 3 - READ JES2 SPOOL BLOCK'\n***********************************************************************\n*                                                                     *\n* TITLE -      FUNCTION 3 - READ JES2 SPOOL BLOCK                     *\n*                                                                     *\n* FUNCTION -   READ A JES2 BLOCK FROM JES2 SPOOL DATASET.             *\n*                                                                     *\n* INPUT -      REGISTER 0 - BUFFER ADDRESS (4K) IN CALLER'S REGION    *\n*              REGISTER 1 - TRACK ADDRESS OF BLOCK TO BE READ (MTTR)  *\n*              REGISTER 3 - ADDRESS OF CVT                            *\n*              REGISTER 4 - ADDRESS OF TCB                            *\n*              REGISTER 5 - ADDRESS OF SVRB                           *\n*              REGISTER 6 - ADDRESS OF JES2 SSVT                      *\n*              REGISTER 7 - ADDRESS OF ASCB                           *\n*                                                                     *\n*                                                                     *\n* OUTPUT -     REGISTER 15 - RETURN CODE                              *\n*                 0 - NORMAL COMPLETION                               *\n*                 4 - JES2 NOT ACTIVE                                 *\n*                 8 - FUNCTION CODE ERROR                             *\n*                12 - INVALID EXTENT TRACK EXTENT                     *\n*                16 - INVALID TRACK ADDRESS                           *\n*                20 - I/O ERROR                                       *\n*                24 - SVC FAILURE                                     *\n*                                                                     *\n*                                                                     *\n* BUFFER OUTPUT -                                                     *\n*              OFFSET    LENGTH    DESCRIPTION                        *\n*               +00         4      FILLER                             *\n*               +04         4      FILLER                             *\n*               +08         4      POINTER TO FIRST DATA BYTE         *\n*                                                                     *\n*                                                                     *\n* NOTES -      NONE                                                   *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nRDSPOOL  DS    0H                  READ JES2 SPOOL\n         LA    R15,12              ASSUME EXTENT INVALID\n*        CLM   R1,8,SVCNUMDA       CHECK FOR VALID EXTENT\n*        BNLR  R14                 IF NOT LOW THEN INVALID\n         SR    R2,R2               CLEAR BUFFER LENGTH REGISTER\n         ICM   R2,3,SVCBFSIZ       LOAD BUFFER SIZE\n         BAL   R11,GETBUF          LINK AND GET BUFFER\n         L     R0,JISR1            RELOAD MTTR\n         BAL   R11,SETIOBS         LINK AND SET IOBSEEK ADDRESS\n         BAL   R11,EXCP            READ A SPOOL BLOCK\n         LA    R2,BUFSTART         LOAD BLOCK START ADDRESS\n         LA    R1,1                LOAD BUFFER LENGTH\n         LA    R0,4095(,R1)                            4096\n         L     R1,JISR1            LOAD BUFFER  ADDRESS\n         STM   R0,R2,IOBNIOBA      STORE IN BLOCK\n         SLR   R15,R15             SET NORMAL RC\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         BR    R14                 RETURN\n   TITLE 'IGC0023G - FUNCTION 4 - SUB-SYSTEM REQUEST INTERFACE'\n***********************************************************************\n*                                                                     *\n* TITLE -      FUNCTION 4 - JES2 SUB-SYSTEM REQUEST INTERFACE         *\n*                                                                     *\n* FUNCTION -   ISSUE A MVS/JES2 COMMAND VIA IEFJSSREQ                 *\n*                                                                     *\n* INPUT -      STANDARD LINKAGE CONVENTIONS                           *\n*              REGISTER 1 - ADDRESS OF SSREQ PARM LIST                *\n*                                                                     *\n* OUTPUT -     RETURN CODE TO APPLICATION PROGRAM                     *\n*              REGISTER 15 CONTAINS RETURN CODE FROM IEFJSSREQ.       *\n*                                                                     *\n*                                                                     *\n* NOTES -      THIS ROUTINE WILL ISSUE ANY SUBSYSTEM REQUEST.         *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nSSREQ    DS    0H                  ISSUE MVS/JES2 COMMAND\n*\n***                                                                 ***\n**     IEFSSREQ                                                      **\n***                                                                 ***\n         L     R15,16              PICK UP CVT\n         L     R15,296(,15)        PICK UP JESCT\n         L     R15,20(,15)         PICK UP JESSSREQ\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         BR    R15                 GO DO IT\n*\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         BR    R14                 GO DO IT\n*\n   TITLE 'IGC0023G - FUNCTION 5 -   AUTHORIZE THE JOB-STEP'\n***********************************************************************\n*                                                                     *\n* TITLE -      FUNCTION 5 - JSCB AUTHORIZATION                        *\n*                                                                     *\n* FUNCTION -   AUTHORIZE THE JOB-STEP                                 *\n*                                                                     *\n* INPUT -      STANDARD LINKAGE CONVENTIONS                           *\n*              REGISTER 4 - ADDRESS OF TCB                            *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nAUTHON   DS    0H\n*\n         L     1,TCBJSCB  PICK UP CALLER'S JSCB\n         USING IEZJSCB,1\n         OI    JSCBOPTS,JSCBAUTH   AUTH ON\n*\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         SR    R15,15              SET RC\n         BR    R14                 RETURN\n*\n*\n   TITLE 'IGC0023G - FUNCTION 6 - UNAUTHORIZE THE JOB-STEP'\n***********************************************************************\n*                                                                     *\n* TITLE -      FUNCTION 6 - JSCB AUTHORIZATION                        *\n*                                                                     *\n* FUNCTION -   UNAUTHORIZE THE JOB-STEP                               *\n*                                                                     *\n* INPUT -      STANDARD LINKAGE CONVENTIONS                           *\n*              REGISTER 4 - ADDRESS OF TCB                            *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nAUTHOFF  DS    0H\n*\n         L     1,TCBJSCB  PICK UP CALLER'S JSCB\n         USING IEZJSCB,1\n         NI    JSCBOPTS,255-JSCBAUTH   AUTH OFF\n*\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         SR    R15,15              SET RC\n         BR    R14                 RETURN\n*\n   TITLE 'IGC0023G - FUNCTION 7 - MAKE THE ADDRESS SPACE NON-SWAPPABLE'\n***********************************************************************\n*                                                                     *\n* TITLE -      FUNCTION 7 - MAKE THE ADDRESS SPACE NON-SWAPPABLE      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nNOSWAP   DS    0H\n*\n         SR    R0,0\n         SYSEVENT DONTSWAP,ASID=(0)\n*\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         SR    R15,15              SET RC\n         BR    R14                 RETURN\n*\n   TITLE 'IGC0023G - FUNCTION 8 - MAKE THE ADDRESS SPACE SWAPPABLE'\n***********************************************************************\n*                                                                     *\n* TITLE -      FUNCTION 8 - MAKE THE ADDRESS SPACE SWAPPABLE          *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nOKSWAP   DS    0H\n*\n         SR    R0,0\n         SYSEVENT OKSWAP,ASID=(0)\n*\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         SR    R15,15              SET RC\n         BR    R14                 RETURN\n*\n   TITLE 'IGC0023G - FUNCTION 9 - BYPASS PASSWORD CHECKING'\n***********************************************************************\n*                                                                     *\n* TITLE -      FUNCTION 9 - MARK THE JSCB PPTNOPAS.                   *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nNOPASS   DS    0H\n*\n         L     1,TCBJSCB  PICK UP CALLER'S JSCB\n         USING IEZJSCB,1\n         OI    JSCBSWT1,JSCBPASS   NO PASSWORD CHECKING\n*\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         SR    R15,15              SET RC\n         BR    R14                 RETURN\n*\n   TITLE 'IGC0023G - FUNCTION 10 - RESUME PASSWORD CHECKING'\n***********************************************************************\n*                                                                     *\n* TITLE -     FUNCTION 10 - MARK THE JSCB PPTPAS                      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nNEEDPASS DS    0H\n*\n         L     1,TCBJSCB  PICK UP CALLER'S JSCB\n         USING IEZJSCB,1\n         NI    JSCBSWT1,255-JSCBPASS   PASSWORD CHECKING NEEDED\n*\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         SR    R15,15              SET RC\n         BR    R14                 RETURN\n*\n   TITLE 'IGC0023G - SUBROUTINE - SET UP THE AX FOR JES2 XMEM'\n*\n*\n*\n*\nAXSETUP  DS    0H                  READ JES2 JCT\n*                                      PICK UP THE JES2 ASID NUMBER\n*\n         SYSEVENT DONTSWAP\n*\n         USING PSA,0\n         L     R1,FLCCVT\n         USING CVT,1\n         L     R14,CVTJESCT   WHILE I'M HERE, SAVE THIS\n         USING JESCT,14\n         L     R1,CVTASVT\n         USING ASVT,1\n         L     R2,ASVTMAXU  MAXIMUM NUMBER OF ADDRESS SPACES\n         LA    R3,ASVTENTY  ADDRESS OF FIRST ENTRY\n         DROP  1\n         USING ASCB,15\nASCBLOOP DS    0H\n         L     R15,0(,R3)   SET ASCB ADDRESS\n         L     R4,ASCBJBNS  POINT TO JOB NAME\n         CLC   0(5,R4),=C'JES2 '     IS THIS JES2\n         BE    GOTJES2A     YES\n         LA    R3,4(,R3)    BUMP ASVT LOOP\n         BCT   R2,ASCBLOOP\n*\n         B     JESNOTUP\n*\nGOTJES2A DS    0H\n         LH    R4,ASCBASID\n*\n         L     R1,SVCHCT               PICK UP THE JES2 HCT\n         USING HCTDSECT,1\n         LA    R2,$JOBQPTR             START OF JQE'S\n         LA    R3,$JOTABLE             START OF JOE'S\n         DROP  1\n*\n*                                      SET UP FOR CROSS MEMORY MOVE\n*\n         AXRES AXLIST=AXLIST           RESERVE AN AX\n*\n         LA    R0,1                    SET OUR AX TO 1\n         AXSET AX=(0)\n*\n         SSAR  R4                      SET 'JES2' AS SECONDARY\n         SLR   R0,R0                   SECONDARY KEY\n         LA    R1,4                    TRUE LENGTH\n         MVCP  MYJQES(R1),0(R2),R0     SET JQE START ADDRESS\n         SLR   R0,R0                   SECONDARY KEY\n         LA    R1,4                    TRUE LENGTH\n         MVCP  MYJOES(R1),0(R3),R0     SET JOE START ADDRESS\n*\n         BR    R7                      RETURN\n   TITLE 'IGC0023G - SUBROUTINE - RESET THE AX FOR JES2 XMEM'\nAXDROP   DS    0H\n*---------------------------------------------------------------------*\n*                                                                     *\n*        RESET PRIMARY AND SECONDARY ADDRESS SPACES TO BE THE SAME.   *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         EPAR  R1                 EXTRACT PRIMARY ASN\n         SSAR  R1\n*\n         SYSEVENT OKSWAP\n*\n         BR    R7                 GO OUT\n*\n         TITLE 'IGC0023G - READ/WRITE EXCP ROUTINE'\n***********************************************************************\n*                                                                     *\n* TITLE -      READ OR WRITE ROUTINE                                  *\n*                                                                     *\n* FUNCTION -   ISSUE EXCP TO READ FROM OR WRITE TO THE JES2 SPOOL     *\n*              DATASETS.  FOR I/O ERRORS, LOAD APPROPRIATE STATUS     *\n*              INFORMATION TO BE PASSED BACK TO THE CALLING ROUTINE.  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nEXCP     DS    0H                  ISSUE EXCP TO READ OR WRITE\n         XC    IOBNECB,IOBNECB     CLEAR ECB\n         EXCP  IOBSTDRD            READ SPOOL BLOCK\n         WAIT  ECB=IOBNECB         WAIT FOR I/O TO COMPLETE\n         CLI   IOBNECB,X'7F'       NORMAL COMPLETION?\n         BER   R11                 IF NORMAL THEN RETURN\n         LA    R15,16              ASSUME TRACK ADDRESS ERROR\n         CLI   IOBNECB,X'42'       TEST ASSUMPTION\n         BE    ERROR               IF CORRECT THEN SKIP CODES\n         L     R1,IOBCSW-1         LOAD LAST CCW ADDRESS + 8\n         LA    R1,0(R1)            CLEAR HIGH BYTE\n         SH    R1,=H'8'            POINT TO LAST CCW\n         ICM   R0,8,0(R1)          INSERT OPERATION CODE\n         ICM   R0,4,IOBFLAG3       INSERT IOB FLAG3 CODE\n         ICM   R0,3,IOBSENS0       INSERT IOB SENSE BYTES\n         ST    R0,IOBCSW-1         STORE STATUS\n         LD    R0,IOBCSW-1         LOAD STATUS\n         L     R1,IOBNECB          LOAD ERROR CODE\n         LA    R15,20              SET I/O ERROR RC\n         B     ERROR               GO THRU ERROR RETURN\n     TITLE 'IGC0023G - CONVERT MTTR AND SET IOB SEEK ADDRESS'\n***********************************************************************\n*                                                                     *\n* TITLE -      CONVERT MTTR AND SET IOB SEEK ADDRESS                  *\n*                                                                     *\n* FUNCTION -   CONVERT MTTR TO AN ABSOLUTE TRACK ADDRESS AND SET      *\n*              THE IOB SEEK ADDRESS. FOR RPS DEVICES, THE SECTOR      *\n*              IS COMPUTED AND A SET SECTOR CCW IS CONSTRUCTED.       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSETIOBS  DS    0H                 SET IOB SEEK ADDRESS\n         LA    R15,16             ASSUME INVALID TRACK ADDRESS\n         LR    R3,R0               COPY MTTR\n         LA    R0,0(,R3)           MAKE R0 0TTR\n         XR    R3,R0               MAKE R3 M000\n         ST    R3,IOBM             STORE EXTENT IN IOB\n         STC   R0,IOBR             STORE RECORD NUMBER IN IB\n         L     R9,SVCDAS           LOAD TRACK EXTENT TBL ADDRESS\n         USING DASDSECT,R9         TED ADDRESSIBILITY\n*\nTSTDAS   DS    0H\n         CLM   R3,1,DASEXTNO       MATCH ON EXTENT NUMBER?\n         BE    GOTDAS              YES\n*\n*\nGOTDAS   DS    0H\n         LR    R2,R0               COPY 0TTR\n         SRDL  R2,40               SET TT IN R2. R3 FOR DIVIDE\n         ICM   R0,15,DASTKCYL      GET NUMBER OF TRACKS/CYLINDERS\n         BZ    ERROR               IF ZERO THEN SPOOL PACK ABSENT\n         DR    R2,R0               ELSE COMPUTE CC HH\n         STCM  R3,3,IOBCC          STORE CC IN IOB\n         STCM  R2,3,IOBHH          STORE HH IN IOB\n         MVI   CCW1,X'03'          ASSUME NO RPS\n         TM    DASFLAG,DASRPSF     IS TABLE VALID\n         BZR   R11                 IF NOT, SKIP THIS\n         LA    R2,DASRPS           POINT TO EXT RPS TBL\n         SLR   R3,R3               ELSE ZERO REGISTER FOR INSERT\n         IC    R3,IOBR             INSERT RECORD NUMBER FROM IOB\n         IC    R3,0(R3,R2)         GET CORRES SECTOR NUMBER\n         STC   R3,CCW1+5           SET SECTOR DATA\n         MVI   CCW1,X'23'          SET SET-SECTOR COMMAND\n         BR    R11                 RETURN\n         SPACE 1\n         TITLE 'IGC0023G - GET AND INITIALIZE BUFFER   '\n***********************************************************************\n*                                                                     *\n* TITLE -      GET AND INITIALIZE BUFFER                              *\n*                                                                     *\n* FUNCTION -   1) CLEAR BUFFER TO ZERO AND INITIALIZE INPUT/OUTPUT    *\n*              BLOCK.                                                 *\n*              2) CONSTRUCT CHANNEL PROGRAM.                          *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nGETBUF   DS    0H                  GET BUFFER\n         L     R8,JISR0          LOAD BUFFER ADDRESS REGISTER\n         LR    R0,R8               SET ADDRESS FOR CLEAR\n         LA    R1,4095             SET LENGTH FOR CLEAR\n         SR    R15,R15             SET LENGTH TO ZERO\n         MVCL  R0,R14              CLEAR BUFFER TO ZEROS\n         MVI   IOBFLAG1,IOBCMDCH+IOBUNREL CMD CHAINING AND UNRELATED\n         LA    R0,IOBNECB          LOAD ECB ADDRESS\n         ST    R0,IOBECBPT         STORE IN IOB\n         MVC   IOBDCBPT(4),SVCDCB  STORE DCB ADDRESS IN IOB\n         LA    R0,IOBSEEK+8        LOAD CHANNEL PGM ADDRESS\n         ST    R0,IOBSTART         STORE CP ADDRESS IN IOB\n         LA    R0,CCW2             LOAD SEARCH CCW ADDRESS\n         ST    R0,CCW3             STORE IN CCW3 FOR TIC\n         LA    R0,BUFSTART         LOAD BUFSTART ADDRESS\n         ST    R0,CCW4             STORE IN READ CCW\n         LA    R0,IOBSEEK+3        LOAD SEARCH ID ADDRESS\n         ST    R0,CCW2             STORE IN SEARCH ID CCW\n         LA    R0,CCW1+5           LOAD SECTOR ADDRESS\n         ST    R0,CCW1             STORE IN RPS CCW\n         STH   R2,CCW4+6           STORE BLOCK LENGTH IN READ CCW\n         OC    CCW1(LCP),CP        OR IN REST OF CHANNEL PGM\n         BR    R11                 RETURN TO CALLING ROUTINE\n         EJECT\n      TITLE 'IGC0023G - CHANNEL PROGRAMS AND MISCELLANEOUS CONSTANTS'\nFZERO    DC    F'0'\nBLANKS   DS    0CL80\nSPACES   DC    CL80' '\nFPLUS1   DC    F'1'\nEDMASK3P DC    XL4'2020204B'\nEDMASK3  DC    XL3'202020'\nEDMASK10 DC    XL10'40206B2020206B202120'\nCP       DS    0D                  CHANNEL PROGRAM\nCPCCW1   CCW   X'03',0,SILI+CC,1   NOP\nCPCCW2   CCW   X'31',0,SILI+CC,5   SEARCH ID EQUAL\nCPCCW3   CCW   X'08',0,SILI+CC,1   TIC\nCPCCW4   CCW   X'06',0,SILI,0      READ DATA\n         SPACE\nLCP      EQU   *-CP                LENGTH OF CHANNEL PGM\n         SPACE 3\n   TITLE 'IGC0023G - FUNCTION 11 - COPY MASTER CONSOLE BUFFER'\n***********************************************************************\n*                                                                     *\n* TITLE -     FUNCTION 11 - COPY THE MASTER CONSOLE BUFFER            *\n*                                                                     *\n* INPUT -      STANDARD LINKAGE CONVENTIONS                           *\n*              REGISTER 0 - POINTS TO BUFFER                          *\n*              REGISTER 1 - POINTS TO SAVE AREA                       *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*\nMCONS    DS    0H\n*\n         L     R1,JISR1   PICK UP SAVE AREA\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         L     R6,MCONADD         EPA OF MCS DISPLAY\n         BR    R6         GO DO IT\n*\nMCONADD  DC    V(MCSSVC)\n*\nJDFJQE2  DS    0H\n*\n         L     R1,JISR1   PICK UP SAVE AREA\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         L     R6,JDFJQADD        EPA OF JQE DISPLAY\n         BR    R6         GO DO IT\n*\nJDFJQADD DC    V(JDFJQES)\n*\n*\nMVSCMD2  DS    0H\n*\n         L     R1,JISR1   PICK UP SAVE AREA\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         L     R6,CMD2ADD         EPA OF COMMAND INTERFACE\n         BR    R6         GO DO IT\n*\nCMD2ADD  DC    V(MVSCMD)\n*\n*\nJCTACC   DS    0H\n*\n         L     R1,JISR1   PICK UP SAVE AREA\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         L     R6,JCTADDR         EPA OF JCT READ SVC\n         BR    R6         GO DO IT\n*\nJCTADDR  DC    V(JCTSVC)\n*\n*\nPDDBACC  DS    0H\n*\n         L     R1,JISR1   PICK UP SAVE AREA\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         L     R6,PDDBADD         EPA OF PDDB READ SVC\n         BR    R6         GO DO IT\n*\nPDDBADD  DC    V(PDDBSVC)\n*\n*\n   TITLE 'IGC0023G - FUNCTION 16 - DYNAMIC ALLOCATION'\n***********************************************************************\n*                                                                     *\n* TITLE -      FUNCTION 16 - DYNAMIC ALLOCATION                       *\n*                                                                     *\n* FUNCTION -   ISSUE A DYNAMIC ALLOCATION REQUEST                     *\n*                                                                     *\n* INPUT -      STANDARD LINKAGE CONVENTIONS                           *\n*              REGISTER 1 - ADDRESS OF DYNAMIC ALLOCATION REQUEST BLK *\n*                                                                     *\n* OUTPUT -     RETURN CODE TO APPLICATION PROGRAM                     *\n*              REGISTER 15 CONTAINS RETURN CODE FROM DYNALLOC.        *\n*                                                                     *\n*                                                                     *\n* NOTES -      THIS ROUTINE WILL ISSUE ANY AUTHORIZED DYNAMIC         *\n*              ALLOCATION REQUEST.                                    *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nDYNAL    DS    0H\n*\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         DYNALLOC\n*\n         L     R14,JIRETURN        RELOAD RETURN ADDRESS\n         BR    R14                 GO DO IT\n*\n         LTORG\n         TITLE 'IGC0023G - MISCELLANEOUS DSECTS'\n         PRINT NOGEN\n         CVT   DSECT=YES\n         CVTUSERS\n         SPACE 2\n         IKJTCB\n         SPACE 2\n         IEFJESCT\n         SPACE 2\n         IEFJSSIB\n         SPACE 2\n         IEZJSCB\n         SPACE 2\n         IHAASVT\n         IHAPSA\n         IHAASCB\n         IHARB\n         SPACE 2\n         TITLE 'IGC0023G - SVRB SAVE AREA MAP'\n         ORG   RBEXSAVE\n         DS    0CL48         MAX LENGTH OF WORK AREA\nJIRETURN DS    A             SVC EXIT ADDRESS\nJISR15   DS    A             ENTRY REGISTER 15\nJISR0    DS    A             ENTRY REGISTER 0\nJISR1    DS    A             ENTRY REGISTER 1\n*\nMYJQES   DS    F                       JES JQE ADDRESSES\nAXLIST   DS    F             AX\nMYJOES   DS    F                       JES JOE ADDRESSES\nSVCDAS   DS    F             TRACK EXTENT TABLE\n*\nSVCHCT   DS    F             HCT ADDRESS\nSVCDCB   DS    F             SPOOL DCB\nDWORD    DS    F             START OF DOUBLE-WORD WORK AREA\nSVCBFSIZ DS    H             BUFFER SIZE\nSVCNUMDA DS    XL1           NUMBER OF EXTENTS IN SPOOL\n         DS    XL1\n*\nJISL     EQU   *-JIRETURN    LENGTH OF SVRB WORK AREA\n         SPACE 2\nLPRFX    EQU   X'58'              BUFFER PREFIX LENGTH\nCD       EQU   X'80'              DATA CHAIN\nCC       EQU   X'40'              COMMAND CHAIN\nSILI     EQU   X'20'              SUPPRESS INCORRECT LENGTH\nSKIP     EQU   X'10'              SKIP DATA TRANSFER\nPCI      EQU   X'08'              PROGRAM CONTROLLED INTERRUPTION\nIDA      EQU   X'04'              INDIRECT ADDRESSING\n         SPACE 2\n         IEZIOB\n         SPACE 2\n         ORG   IOBSEEK+8\nCHANPGM  DS    0D                  CHANNEL PGM AREA\nCCW1     DS    D                   SET SECTOR / READ HA\nCCW2     DS    D                   SEARCH ID EQUAL\nCCW3     DS    D                   TIC\nCCW4     DS    D                   READ KEY AND DATA\nCOUNT    DS    D                   DA COUNT FIELD\n         SPACE 2\nBUFDSECT EQU   IOBNIOBA            EQUATE BUFDSECT\n         SPACE\n         ORG   IOBNIOBA+LPRFX      ORG PAST PREFIX\n         SPACE 1\nBUFSTART DS    0D                  BUFFER START\n         SPACE 3\n         IEFJSSOB (SO,CS,JS,RQ,RR)\n         IEFJSCVT\n*\nIGC0023G CSECT ,\n         PRINT OFF\n         COPY $HASPGBL\n         $HASPEQU\n         $SJB\n         IEZDEB\nDEBEXLEN EQU   16\n         $SJXB\n         $DAS\n         $SVT\n*                       BELOW REQUIRED FOR $HCT\n         $JCT\n         $SCAT\n         $XECB\n         $MIT\n         $CAT\n         $PCE\n         $HCT\n*\n         $JQE\n         $JOE\n*\n         END\nMCSSVC TITLE 'CONSOLE DISPLAY FACILITY (MCS)'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                 CONSOLE DISPLAY FACILITY (MCS)                      *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: DISPLAY MVS MASTER CONSOLE ACTIVITY.                      *\n*                                                                     *\n*                                                                     *\n* FUNCTION: MCS IS DESIGNED TO TO BE INVOKED FROM ANY ASSEMBLER       *\n*           PROGRAM.                                                  *\n*                                                                     *\n*           IT RETURNS CONSOLE BUFFERS TO THE CALLING PROGRAM.        *\n*                                                                     *\n*           MCS LOOKS AT VARIOUS MVS SP 1.3.0 CONTROL BLOCKS.         *\n*                                                                     *\n*                                                                     *\n* INVOKING:                                                           *\n*                                                                     *\n*         LA    R15,0        <== MY SVC OFFSET NUMBER                 *\n*         LA    R1,WORKADDR  <== 8K WORK AREA ADDRESS                 *\n*         SVC   236          <== SUPERSVC ROUTER                      *\n*                                                                     *\n* OUTPUT:\n*                                                                     *\n*         R0    =   MASTER CONSOLE NUMBER                             *\n*         R15   =   NUMBER OF CONSOLE LINES\n*                                                                     *\n*    WORKAREA   =   512 BYTES UNPREDICTABLE\n*                   76  BYTES CONSOLE BUFFER LINE 1\n*                   76  BYTES CONSOLE BUFFER LINE 2\n*                             \"                                       *\n*                             \"                                       *\n*                   76  BYTES CONSOLE BUFFER LINE 43\n*                                                                     *\n*                   THE ENDING LINE IS SET TO X'FF', SO THE CALLING   *\n*                   PROGRAM CAN TEST FOR THAT INSTEAD OF CHECKING R15.*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCE: NONE.                                           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* CHANGE LOG:                                                         *\n*                                                                     *\n*   2/04/85  BRIAN COOK.     INITIAL ENTRY.                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         COPY JDFMACS\n         EJECT\nMCSSVC CSECT\n         USING *,12\n         USING RBSECT,R5           SET SVRB ADDRESSIBILITY\n         LR    R12,R6         SET SVC BASE REGISTER\n         B     STARTUP\n         DC    C'MCSSVC CONSOLE DISPLAY BRIAN COOK 2/7/85'\nSTARTUP  DS    0H\n         L     R13,0(,R1)     SET WORKAREA REGISTER\n         USING MCSDSECT,13\n         STM   R0,R15,MCSREGS SAVE THE REGISTERS\n         USING PSA,0\n         L     R3,FLCCVT      POINT TO CVT\n         USING CVT,3\n         L     R4,CVTCUCB         R4 = ADDR OF 'CUCB' (UCM BASE)\n         USING UCM,R4\n         DROP  3\n*\n         LA    R9,MCSLINE1    POINT TO PARAMETER LIST\n         ST    R9,LINEPTR     POINT TO FIRST OUTPUT LINE\n*\n*\n*\n*\n         TITLE 'MCS   START OF SHOW CONSOLE LOOP'\nSHOWCONS DS    0H\n*\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n*          BUILD A TABLE OF UCM ADDRESSES (ONE PER CONSOLE)           *\n*                                                                     *\n*---------------------------------------------------------------------*\nBLDUCMS  DS    0H\n         L     R3,UCMVEA          R3 = ADDR OF FIRST UCM ENTRY\n         L     R6,UCMVEZ          R6 = LENGTH OF EACH UCM ENTRY\n         L     R7,UCMVEL          R7 = ADDR OF LAST UCM ENTRY\n         LA    R8,UCMTAB+4        R8 = ADDR OF UCMTAB\n         LA    R9,UCMTABE         R9 = ADDR OF END OF UCMTAB\n         XR    R2,R2              R2  = 0 (NUMBER OF VALID UCMS)\nUCMLOOP  ST    R3,0(0,R8)         SAVE UCM ADDRESS IN UCMTAB\n         LA    R2,1(0,R2)         R2  = R2  + 1  (ONE MORE UCM)\n         LA    R8,4(0,R8)         R8 = ADDR OF NEXT UCMTAB ENTRY\n         CR    R8,R9              DOES R8 POINT PAST END OF UCMTAB?\n         BNL   UCMDONE            YES; LEAVE LOOP\n         AR    R3,R6              R3 = ADDR OF NEXT UCM ENTRY\n         CR    R3,R7              DOES R3 POINT PAST UCM ENTRIES?\n         BL    UCMLOOP            NOPE; KEEP GOING\nUCMDONE  STH   R2,NUMUCMS         SAVE NUMBER OF UCMS FOUND\n*---------------------------------------------------------------------*\n*        SCAN THE UCM FOR THE MASTER CONSOLE TO DISPLAY IT\n*---------------------------------------------------------------------*\nSETMAST  LA    R14,1              SET DEFAULT TO FIRST CONSOLE     JL1\nMASTSCAN LA    R3,UCMTAB          SET POINTER TO UCM ADDRESS TABLE GMM\n         CH    R14,NUMUCMS        IS NUMBER TOO HIGH?              GMM\n         BNH   MASTCONT           NO, CONTINUE                     GMM\n         ABEND 1                  IMPOSSIBLE .. NO MASTER CONSOLE ?GMM\nMASTCONT SLL   R14,2              MAKE CONSOLE NUMBER TABLE INDEX  GMM\n         LA    R3,0(R3,R14)       SET POINTER TO UCM ADDRESS SLOT  GMM\n         L     R3,0(0,R3)         SET POINTER TO UCM               GMM\n         USING UCMLIST,R3         TELL ASSEMBLER ABOUT UCM         GMM\n         L     R6,UCMXB\n         USING IEERDCM,6\n         TM    UCMDISP1,UCMDISPA  IS THIS A MASTER CONSOLE?        GMM\n         BO    MASTFND            YES ? FOUND THE MASTER CONSOLE ..GMM\n         SRL   R14,2              RESET CONSOLE NUMBER TO RELATIVE GMM\n         LA    R14,1(0,R14)       SET POINTER TO NEXT CONSOLE      GMM\n         B     MASTSCAN           CONTINUE MASTER CONSOLE SCAN LOOPGMM\nMASTFND  SRL   R14,2              RESET CONSOLE NUMBER TO RELATIVE GMM\n         ST    R14,OLDCONS        SET VALID OLD CONSOLE NUMBER     GMM\n         ST    R14,CONSOLE        SET VALID CONSOLE NUMBER (MASTER)GMM\n         MVC   CDFUCMID(1),UCMID  SAVE THE UCMID OF THE MASTER      BC\n         L     R7,UCMUCB          R7 = ADDR OF UCB\n         L     R7,DCMADTRN        GET ADDRESS OF TDCM              GMM\n         USING STRTDCM,7\n         SPACE 2\n         TITLE 'MCS   CROSS MEMORY SERVICES     '\n*---------------------------------------------------------------------*\n*                                                                     *\n*                 CMS ENQUEUE                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n*\n         ENQ   (USER,CMS,E,3,SYSTEM),RET=HAVE\n*\n         LTR   R15,R15\n         BZ    GOTENQ\n*\n         LA    R15,512            SET BAD RETURN CODE\n         L     R14,MCSR14     RESTORE THE RETURN ADDRESS\n         BR    R14            RETURN TO OUR CALLER\n*\nUSER     DC    CL8'USER'\nCMS      DC    CL8'CMS'\n*\nGOTENQ   DS    0H\n*                                      SET UP FOR CROSS MEMORY MOVE\n*\n         AXRES AXLIST=AXLIST           RESERVE AN AX               JPB\n         SPACE 2\n         LH    R1,UCMCTID         CONSOLE ASID\n         AXEXT ASID=(1)                EXTRACT AX OF 'CONSOLE'IN R0JPB\n         SPACE 2\n         AXSET AX=(0)                  SET OUT AX TO THAT OF CONSOLEPB\n         SPACE 2\n         LH    R1,UCMCTID         CONSOLE ASID\n         SSAR  R1                      SET 'CONSOLE' AS SECONDARY  JPB\n         SPACE 2\n         PRINT ON,GEN\n*\n*                                      PICK UP LAST LINE\n*\n*                                      PICK UP START ADDRESS\n*\n         LH    R1,UCMCTID         CONSOLE ASID\n         SSAR  R1\n         LA    R1,4               SET TRUE LENGTH                  JPB\n         SLR   R0,R0              SET STORAGE KEY                  JPB\n         MVCP  SIBPTR(R1),DCMASCRN-STRTDCM(R7),R0 PT TO SCRN ADRJPB\n*\n         LA    R1,2               SET LENGTH = HALFWORD\n         SLR   R0,R0              SET STORAGE KEY\n         MVCP  MCSLINES(R1),DCMMSGAL-STRTDCM(R7),R0  COPY LINES\n         LH    R3,MCSLINES             MAX NUMBER OF LINES\n         LA    R3,1(,R3)               PLUS 1 FOR IEEMSG\n         STH   R3,MCSLINES             MAX NUMBER OF LINES FOR CDF\n*\n** THIS IS THE LENGTH OF THE DATA PORTION OF THE LINE\n*\n         LA    R1,2               SET LENGTH = HALFWORD\n         SLR   R0,R0              SET STORAGE KEY\n         MVCP  MCSLSIZE(R1),DCMLGNTH-STRTDCM(R7),R0  COPY LINE LEN\n*\n** THIS IS THE TOTAL LINE LENGTH IN THE BUFFER\n*\n         LA    R1,2               SET LENGTH = HALFWORD\n         SLR   R0,R0              SET STORAGE KEY\n         MVCP  MCSBUMP(R1),DCMCORLN-STRTDCM(R7),R0  COPY LINE INCR\n*\n*                                      SET UP FOR XMEM MOVE LOOP\n         DROP  R4,R6\n         LA    R4,MCSLINE1        R4 = ADDR OF OUTPUT BUFFER\n         L     R8,SIBPTR          R8 = ADDR OF SCREEN IMAGE\n         LH    R6,MCSLINES        R6 = MAX NUMBER OF LINES\n         LA    R6,1(,6)           ADD 1 FOR RELATIVE 0\n*\n         SLR   R0,R0              RESET THE KEY\n*\nMVCPLOOP DS    0H\n*\n         LH    R3,MCSLSIZE        R3 = MAX LINE LENGTH\n         MVCP  0(R3,R4),0(R8),R0  LOOP THRU THE CONSOLE BUFFER\n*\n         AH    R8,MCSBUMP         BUMP CONSOLE BUFF POINTER\n         AH    R4,MCSLSIZE        BUMP CDF LINE POINTER\n         BCT   R6,MVCPLOOP\n*\n         MVC   0(78,R4),IEEMSG    MOVE DUMMY LINE TO SPF AREA\n*\nRESETSAR DS    0H\n*\n         EPAR  R1                 EXTRACT PRIMARY ASN\n         SSAR  R1\n*\n         DEQ   (USER,CMS,3,SYSTEM),RET=HAVE\n*\n         AXFRE AXLIST=AXLIST\n         DROP  R3,R7\n*\n*\n         LH    R15,MCSLINES        R15 = UCM MAX LINES\n         LA    R15,2(,R15)        ADD 1 FOR DUMMY, 1 FOR REL ZERO\n         L     R0,CONSOLE         LOAD THE CONSOLE NUMBER\n         L     R14,MCSR14     RESTORE THE RETURN ADDRESS\n         BR    R14            RETURN TO OUR CALLER\n*\n         TITLE 'MISCELLANEOUS CONSTANTS'\n         LTORG\n*\nIEEMSG   DC    C'IEE152I'        BOTTOM MESSAGE ON OPER CONSOLE\nBLANKS   DC    CL80' '\n         DS    0F\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n*        FOLLOWING IS IN SUPPORT OF C M S                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n* AXLIST   DC    H'1',H'0'           AXRES PARMLIST\n         SPACE 2\n         CNOP  0,8\n*---------------------------------------------------------------------*\n*                                                                     *\n*               DISPLAY SCREEN - TRAILER SECTION                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LTORG\n         SPACE 5\n         TITLE 'EQUATES'\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         MCSDSECT\n         PRINT NOGEN\n*.....................................................................*\n*        MAPPING DSECT FOR SRM USER CONTROL BLOCK\n*.....................................................................*\n         IRAOUCB\n*.....................................................................*\n*        MAPPING DSECT FOR DMDT (DOMAIN DESCRIPTOR TABLE)             *\n*.....................................................................*\n         SPACE\nDMDT     DSECT\nDMDTNO   DS    XL1             DOMAIN NUMBER\nDMDTLO   DS    XL1             MIN  MPL LEVEL\nDMDTHI   DS    XL1             MAX  MPL LEVEL\nDMDTWT   DS    XL1             WEIGHTING FACTOR\nDMDTMPLT DS    XL2             CURRENT MPL TARGET\nDMDTRUA  DS    XL2             AVE # OF READY USERS\nDMDTGOOU DS    XL2             CURRENT # USERS GOING OUT\nDMDTCMPL DS    XL2             CURRENT MPL\nDMDTOUTU DS    XL2             CURRENT # USERS ON OUT Q\nDMDTINCU DS    XL2             CURRENT # SWAPPABLE INCORE USERS\nDMDTRUC  DS    XL4             ACCUM FOR READY USER AVERAGE\nDMDTEND  DS    0X              END OF DMT\nDMDTLEN  EQU   *-DMDT\n         SPACE 2\n*\n* EQUATES....\n*\nRMCTDMDT EQU   X'B4'           POINTER TO DOMAIN TABLE\nRMCTDMNC EQU   X'BC'           COUNT OF NUMBER OF DOMAINS\nRMCTWMST EQU   X'18'           ADDRESS OF WLM SPEC TABLE\n         SPACE 2\n         TITLE '*** COMMUNICATION VECTOR TABLE ***'                GMM\n         CVT   DSECT=YES                                           GMM\n         TITLE '*** RDCM DSECT ***'                                GMM\nIEERDCM  DSECT ,                                                   GMM\n         IEECRDCM                                                  GMM\n         TITLE '*** TDCM DSECT ***'                                GMM\n*\n         PRINT GEN\nDCMENTR2 EQU   0           TO RESOLVE ADCON IN DSECT\nIEETDCM  DSECT ,                                                   GMM\n         IEECDCM                                                   GMM\n         TITLE '*** MULTIPLE CONSOLE SUPPORT (MCS) UCM PREFIX ***' GMM\n         IEECUCM FORMAT=NEW\n         PRINT NOGEN\n         IHAPSA\n         IHARB\n         SPACE 2\n         TITLE 'IGC0023G - SVRB SAVE AREA MAP'\n         ORG   RBEXSAVE\n         DS    0CL48         MAX LENGTH OF WORK AREA\nJIRETURN DS    A             SVC EXIT ADDRESS\nJISR15   DS    A             ENTRY REGISTER 15\nJISR0    DS    A             ENTRY REGISTER 0\nJISR1    DS    A             ENTRY REGISTER 1\n*\nMYJQES   DS    F                       JES JQE ADDRESSES\nAXLIST   DS    F             AX\nMYJOES   DS    F                       JES JOE ADDRESSES\nSVCDAS   DS    F             TRACK EXTENT TABLE\n*\nSVCHCT   DS    F             HCT ADDRESS\nSVCDCB   DS    F             SPOOL DCB\nDWORD    DS    F             START OF DOUBLE-WORD WORK AREA\nSVCBFSIZ DS    H             BUFFER SIZE\nSVCNUMDA DS    XL1           NUMBER OF EXTENTS IN SPOOL\n         DS    XL1\n*\nJISL     EQU   *-JIRETURN    LENGTH OF SVRB WORK AREA\n         END\nJDFJQES TITLE 'JQE/JOE ACCESS'\n***********************************************************************\n*                                                                     *\n* CHANGE LOG:                                                         *\n*                                                                     *\n*   5/09/85  BRIAN COOK.     CHANGED QUEUE SEARCH TO USE $JQHEADS     *\n*                            THE JOBS ARE RETURNED IN PRIORITY ORDER. *\n*                                                                     *\n*   3/08/85  BRIAN COOK.     ADDED \"AXFRE\" AT END OF XMEM MODE.       *\n*                                                                     *\n*   2/07/85  BRIAN COOK.     INITIAL ENTRY.                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                 JQE/JOE ACCESS                                      *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: COPY JQE'S AND JOE'S FROM JES2 ADDRESS SPACE TO USER AREA.*\n*                                                                     *\n*                                                                     *\n* FUNCTION: SVC IS DESIGNED TO TO BE INVOKED FROM ANY ASSEMBLER       *\n*           PROGRAM.                                                  *\n*                                                                     *\n*           IT USES CROSS-MEMORY SERVICES TO ACCESS THE JQE'S AND     *\n*           JOE'S IN THE JES2 ADDRESS SPACE AND COPY THEM TO STORAGE  *\n*           IN THE CALLER'S ADDRESS SPACE.                            *\n*                                                                     *\n*                                                                     *\n* INVOKING:                                                           *\n*                                                                     *\n*         LA    R15,8        <== I AM ENTRY NUMBER 8                  *\n*         LA    R1,WORKADDR  <== 8K WORK AREA ADDRESS                 *\n*         SVC   236          <== SUPERSVC ROUTER                      *\n*                                                                     *\n*         NOTE: THE WORK AREA MUST CONTAIN 512 BYTES OF WORK AREA     *\n*               FOR THIS SVC. AFTER 512 BYTES, THE AREA WILL BE       *\n*               USED TO STORE JQEAND JOE DATA.                        *\n*                                                                     *\n*                                                                     *\n*               FOR EXAMPLE:                                          *\n*                                                                     *\n*               WORKADDR DC    A(WORKAREA)                            *\n*               WORKAREA DS    XL512                                  *\n*               JOBDATA1 DS    CL80                 <== JQE/JOE DATA  *\n*                                                                     *\n* OUTPUT:\n*                                                                     *\n*         R15   =   512    UNABLE TO GET CMS ENQ                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCE: NONE.                                           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         COPY  JDFMACS\n         EJECT\nJDFJQES CSECT\n         USING *,12\n         LR    R12,R6         SET SVC BASE REGISTER\n         B     STARTUP\n         DC    C'JDFJQES JQE/JOE COPY BRIAN COOK 2/8/85'\nSTARTUP  DS    0H\n         L     R13,0(,R1)     POINT TO WORK AREA\n         USING JJSDSECT,13\n         ST    R14,JJSR14          SAVE THE RETURN REGISTER\n         USING CVT,R3              SET CVT ADDRESSIBILITY\n         USING TCB,R4              SET TCB ADDRESSIBILITY\n         USING ASCB,R7             SET ASCB ADDRESSIBILITY\n         LA    R0,41               DONTSWAP\n         ST    R0,JJSNSWP          DONTSWAP\n         MVC   JJSNSWP(2),ASCBASID SET MY ASID\n         LA    R0,42               OKSWAP\n         ST    R0,JJSOKSWP         OKSWAP\n         MVC   JJSOKSWP(2),ASCBASID SET MY ASID\n*\n         MVI   JJSAXLST+1,1        INITIALIZE AXLIST TO MASTER ASID\n         SLR   R1,R1               CLEAR SSVT ADDRESS REG\n         SLR   R0,R0               CLEAR SJB ADDRESS\n*\n         L     R6,TCBJSCB          POINT TO JSCB\n*\n         L     R6,JSCBSSIB-IEZJSCB(,R6) POINT TO SSIB\n         USING SSIB,R6             SSIB ADDRESSIBILITY\n         L     R2,CVTJESCT         POINT TO SUBSYSTEM CNTL TBL\n         USING JESCT,R2            JESCT ADDRESSIBILITY\n         LA    R2,JESSSCT-(SSCTSCTA-SSCT) POINT TO SSCT HEAD\n         USING SSCT,R2             SSCT ADDRESSIBILITY\n         SPACE 2\n         LA    R15,4               SET JES2 NOT ACTIVE ERROR CODE\nINIT0    DS    0H                  SEARCH FOR JES2 SSCT\n         ICM   R2,15,SSCTSCTA      POINT TO NEXT SSCT\n         BZR   R14                 IF ZERO THEN ERROR\n         CLC   SSCTSNAM,SSIBSSNM   JES SSCT?\n         BNE   INIT0               NO, THEN LOOP\n         ICM   R6,15,SSCTSSVT      LOAD SSVT ADDRESS\n         BZ    JESNOTUP            IF ZERO THEN JES2 NOT ACTIVE\n         USING SSVT,6              JES2 SSVT ADDRESSIBILITY\n*\n         MVC   JJSBFSIZ(2),$SVBFSIZ BUFFER SIZE\n         MVC   JJSDAS(4),$SVTDAS1  TRACK EXTENT TABLE\n         MVC   JJSHCT(4),$SVHCT\n         DROP  6\n*\n         EJECT\nGETJQES  DS    0H                  READ JES2 JCT\n*\n*\n         USING PSA,0\n         L     R1,FLCCVT\n         USING CVT,1\n         L     R14,CVTJESCT\n         USING JESCT,14\n         L     R1,CVTASVT\n         USING ASVT,1\n         L     R2,ASVTMAXU  MAXIMUM NUMBER OF ADDRESS SPACES\n         LA    R3,ASVTENTY  ADDRESS OF FIRST ENTRY\n         DROP  1\n         USING ASCB,15\nASCBLOOP DS    0H\n         L     R15,0(,R3)   SET ASCB ADDRESS\n         L     R4,ASCBJBNS  POINT TO JOB NAME\n         CLC   0(5,R4),=C'JES2 '     IS THIS JES2\n         BE    GOTJES2A     YES\n         LA    R3,4(,R3)    BUMP ASVT LOOP\n         BCT   R2,ASCBLOOP\n*\n         B     JESNOTUP\n*\nGOTJES2A DS    0H\n         LH    R4,ASCBASID\n*\n         L     R1,JJSHCT               PICK UP THE JES2 HCT\n         USING HCTDSECT,1\n         LA    R2,$JOBQPTR             START OF JQE'S\n         LA    R3,$JOTABLE             START OF JOE'S\n         LA    R9,$MAXJOBS             MAX JOBS IN SYSTEM\n         LA    R10,$OWNNODE            CURRENT JES NODE\n         LA    R6,$JQHEADS             ACTIVE JOB QUEUE CHAINS\n         DROP  1\n*\n*                                      SET UP FOR CROSS MEMORY MOVE\n         LR    R7,R13                  MY SAVE AREA\n*        LA    R13,JJSSAVE2           SRM SAVE AREA\n*        SYSEVENT DONTSWAP,ENTRY=BRANCH\n         L     R0,JJSNSWP\n         LA    R13,JJSSAVE2           SRM SAVE AREA\n         L     R15,FLCCVT\n         L     R15,CVTOPTE-CVT(,R15)\n         BALR  R14,R15\n*\n         LR    R13,R7                  MY SAVE AREA\n*\n*\n         ENQ   (USER,CMS,E,3,SYSTEM),RET=HAVE\n*\n         LTR   R15,R15\n         BZ    GOTENQ\n*\n         LA    R15,512            SET BAD RETURN CODE\n         L     R14,JJSR14     RESTORE THE RETURN ADDRESS\n         BR    R14            RETURN TO OUR CALLER\n*\nGOTENQ   DS    0H\n*                                      SET UP FOR CROSS MEMORY MOVE\n*\n*\n         AXRES AXLIST=JJSAXLST         RESERVE AN AX\n*\n         LA    R0,1                    SET OUR AX TO 1\n         AXSET AX=(0)\n*\n         SSAR  R4                      SET 'JES2' AS SECONDARY\n         SLR   R0,R0                   SECONDARY KEY\n         LA    R1,4                    SET LENGTH\n         MVCP  JJSJQES(R1),0(R2),R0    HCT JQE START ADDRESS\n         SLR   R0,R0                   SECONDARY KEY\n         LA    R1,4                    SET LENGTH\n         MVCP  JJSJOES(R1),0(R3),R0    HCT JOE START ADDRESS\n         SLR   R0,R0                   SECONDARY KEY\n         LA    R1,2                    SET LENGTH\n         MVCP  JJSMAXJQ(R1),0(R9),R0   HCT MAX JQES\n         SLR   R0,R0                   SECONDARY KEY\n         LA    R1,2                    SET LENGTH\n         MVCP  JJSNODE(R1),0(R10),R0   HCT THIS NODE\n         SLR   R0,R0                   SECONDARY KEY\n         LA    R1,192                  SET LENGTH\n         MVCP  JJSHEADS(R1),0(R6),R0   $JQHEADS\n*\n*\n*\n         LH    R9,JJSMAXJQ             LOOP CONTROL\n*\n         L     R4,JJSJQES              POINT TO HCT JQE AREA\n*\n         LA    R10,JJSLINE1            SET DSECT BASE FOR JDF JOB REC\n         LA    R10,JOBSIZE(,R10)                 POINT TO NEXT REC\n         USING JOBDSECT,10\n         LA    R5,JJSCURRJ\n         USING JQE,5\n*\n         MVC   JJSHEADS+192(4),=X'FFFFFFFF' SET END OF LIST FLAG\n         LA    R11,JJSHEADS-4\n*\nJQELOOP1 DS    0H\n         LA    R11,4(,R11)             POINT TO NEXT JQE CHAIN ENTRY\n         CLC   0(4,R11),=X'FFFFFFFF'   AT END OF LIST?\n         BE    XMEMDONE       ALL DONE WITH JQE'S\n         L     R4,0(,R11)              POINT TO FIRST JQE CHAIN OFFS\n         LTR   R4,R4                   IF CHAIN IS EMPTY\n         BZ    JQELOOP1                PICK UP NEXT QUEUE\n*\n         A     R4,JJSJQES              POINT TO FIRST JQE\n*\nJQELOOP2 DS    0H\n         SLR   R0,R0                   SET STORAGE KEY\n         LA    R1,JQELNGTH            LENGTH OF MOVE\n         MVCP  0(R1,R5),0(R4),R0       MOVE JQE'S\n*\n         CLI   JQEJNAME,C' '  NEVER USED\n         BE    JQESKIP                 PICK UP NEXT JQE\n         CLI   JQEJNAME,X'00' NEVER USED\n         BE    JQESKIP                 PICK UP NEXT JQE\n         CLI   JQETYPE,$FREE  FREE QUEUE\n         BE    JQESKIP                 PICK UP NEXT JQE\n*\n*\n         XC    0(JOBSIZE,R10),0(R10) CLEAR JDF JOB LINE\n*\n         MVC   JOBTYPE(1),JQETYPE\n         MVC   JOBFLAGS(1),JQEFLAGS\n         MVC   JOBFLAG3(1),JQEFLAG3\n         MVC   JOBFLAG4(1),JQEFLAG4\n         MVC   JOBHLDCT(2),JQEHLDCT\n         MVC   JOBINPND(2),JQEINPND\n         MVC   JOBTHISN(2),JJSNODE\n         MVC   JOBXEQND(2),JQEXEQND\n         MVC   JOBJCLAS(1),JQEJCLAS\n         MVC   JOBJNAME(8),JQEJNAME\n         MVC   JOBJOBNO(2),JQEJOBNO\n         MVC   JOBPRNOD(2),JQEPRNOD\n         MVC   JOBTRAK(4),JQETRAK\n*\n         TM    JQEFLAGS,QUEBUSY   IF JQE IS \"BUSY\", THEN PRTRT\n         BO    RPUNJQE               IS OVERLAID WITH DEVID\n*\n         CLC   JQEPRTRT(4),HEXZEROS\n         BE    RPUNJQE\n*\n         MVC   JOBRNODE(2),JQEPRNOD\n         MVC   JOBREMOT(2),JQEPRREM\n         B     WJOEJQE\n*\nRPUNJQE  DS    0H\n*\n         MVC   JOBRNODE(2),JQEPUNOD\n         MVC   JOBREMOT(2),JQEPUREM\n*\nWJOEJQE  DS    0H\n*\n         SR    R1,R1\n         ICM   R1,7,JQEJOEB\n         LTR   R1,R1                 IS THERE A WORK JOE?\n         BZ    JQECONTN              NO, JUST GET ANOTHER JQE\n         L     R6,JJSJOES\n         AR    R6,R1\n*\nNEXTJOE  DS    0H\n* POINT TO FIRST WORK JOE\n*\n         LA    R1,JOESIZE              SET LENGTH OF MOVE\n         SLR   R0,R0                   SET STORAGE KEY\n         LA    R8,JJSCURRW             SET \"TO\" ADDRESS FOR MOVE\n         USING JOEDSECT,8\n         MVCP  0(R1,R8),0(R6),R0       MOVE WORK JOE\n*\n         TM    JOETYPE,$JOEFREE         FREE JOE\n         BO    JQECONTN\n*                                       WORK JOE FIELDS\n         MVC   JOBCURCL(1),JOECURCL\n         MVC   JOBDEVID(3),JOEDEVID\n         MVC   JOBRECCT(4),JOERECCT\n         MVC   JOBRNODE(2),JOERNODE\n         MVC   JOBREMOT(2),JOEREMOT\n         MVC   JOBGNAME(8),JOENAME       OUTPUT GROUP NAME\n         MVC   JOBGID1(2),JOEID1\n         MVC   JOBGID2(2),JOEID2\n*\n         MVC   JOBCFLAG(1),JOEFLAG\n         NI    JOBCFLAG,X'7F'          CLEAR BURST FLAG\n*\n*\n         SR    R1,R1\n         ICM   R1,7,JOECHARB\n         LTR   R1,R1\n         BZ    NXTWJOE\n         L     R6,JJSJOES\n         AR    R6,R1\n*\n         LA    R1,JOESIZE\n         SLR   R0,R0                   SET STORAGE KEY\n         LA    R8,JJSCURRC             SET \"TO\" ADDRESS FOR MOVE\n         MVCP  0(R1,R8),0(R6),R0       MOVE CHARACTERISTIC JOE\n*                                     CHARACTERISTIC JOE FIELDS\n         TM    JOECFLAG,$JOEBRST      BURST FLAG ON?\n         BZ    *+8                     NO, LEAV IT OFF IN JOB REC\n         OI    JOBCFLAG,$JOEBRST      ELSE SET BURST FLAG ON IN JOB REC\n         MVC   JOBFORM(8),JOEFORM\n         MVC   JOBWTRID(8),JOEWTRID\n*\nNXTWJOE  DS    0H\n*\n         LA    R8,JJSCURRW             SET DSECT BASE\n         SR    R1,R1\n         ICM   R1,7,JOEJQNXB\n         LTR   R1,R1\n         BZ    JQECONTN\n         L     R6,JJSJOES\n         AR    R6,R1\n*\n         XC    JOBSIZE(JOBSIZE,R10),JOBSIZE(R10) CLEAR NEXT REC\n         MVC   JOBSIZE(JOBJQELN,R10),0(R10)      MOVE JQE FIELDS\n         LA    R10,JOBSIZE(,R10)                 POINT TO NEXT REC\n*\n*\n         B     NEXTJOE\n*\nJQECONTN DS    0H\n*\n         LA    R10,JOBSIZE(,R10)                 POINT TO NEXT REC\n*\nJQESKIP  DS    0H\n         SR    R1,R1\n         ICM   R1,7,JQENEXTB  POINT TO NEXT JQE IN THIS CHAIN\n*\n         LTR   R1,R1          IF THERE ISN'T ONE,\n         BZ    JQELOOP1       POINT TO THE NEXT CHAIN\n*\n         L     R4,JJSJQES     PICK UP START ADDRESS OF JQES\n         AR    R4,R1          ADD OFFSET\n         B     JQELOOP2       GO PROCESS\n*\n*\nXMEMDONE DS    0H\n*---------------------------------------------------------------------*\n*                                                                     *\n*        RESET PRIMARY AND SECONDARY ADDRESS SPACES TO BE THE SAME.   *\n*                                                                     *\n*---------------------------------------------------------------------*\n*\n         EPAR  R1                 EXTRACT PRIMARY ASN\n         SSAR  R1\n*\n*\n         DEQ   (USER,CMS,3,SYSTEM),RET=HAVE\n*\n*                                    FREE THE AUTHORIZATION INDEX (AX)\n         AXFRE AXLIST=JJSAXLST\n*\n         LR    R7,R13                  MY SAVE AREA\n*        LA    R13,JJSSAVE2           SRM SAVE AREA\n*        SYSEVENT OKSWAP,ENTRY=BRANCH\n         L     R0,JJSOKSWP\n         LA    R13,JJSSAVE2           SRM SAVE AREA\n         L     R15,FLCCVT\n         L     R15,CVTOPTE-CVT(,R15)\n         BALR  R14,R15\n         LR    R13,R7                  MY SAVE AREA\n*\n         MVI   0(R10),X'FF'            SET END OF ENTRIES\n         MVC   1(JOBSIZE-1,R10),0(R10) SET END OF ENTRIES\n*\n*\n*\nEXIT0    DS    0H            EXIT SVC\n         L     R14,JJSR14          RELOAD REGISTER\n         SR    R15,R15             SET RETURN CODE\n         BR    R14                 RETURN\nJESNOTUP DS    0H            EXIT SVC\n*\n         LA    R10,JJSLINE1            SET DSECT BASE FOR JDF JOB REC\n         MVI   0(R10),X'FF'            SET END OF ENTRIES\n         MVC   1(JOBSIZE-1,R10),0(R10) SET END OF ENTRIES\n*\n         L     R14,JJSR14          RELOAD REGISTER\n         LA    R15,12              SET RETURN CODE\n         BR    R14                 RETURN\n         EJECT\n      TITLE 'MISCELLANEOUS CONSTANTS'\nFZERO    DC    F'0'\nBLANKS   DS    0CL80\nSPACES   DC    CL80' '\nHEXZEROS DC    8X'00'\n*\nFOURTYK  DC    F'40960'\nF256     DC    F'256'\n*\nFPLUS1   DC    F'1'\nEDMASK3P DC    XL4'2020204B'\nEDMASK3  DC    XL3'202020'\nEDMASK10 DC    XL10'40206B2020206B202120'\n*\nUSER     DC    CL8'USER'\nCMS      DC    CL8'CMS'\n*\n         SPACE 3\n*\n         LTORG\n         TITLE ' MISCELLANEOUS DSECTS'\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IKJTCB\n         IEFJESCT\n         IEFJSSIB\n         IEZJSCB\n         IHAASVT\n         IHAPSA\n         IHAASCB\n         IEFJSCVT\n*\nJDFJQES CSECT ,\n         PRINT OFF\n         COPY $HASPGBL\n         $HASPEQU\n         $SJB\n         IEZDEB\nDEBEXLEN EQU   16\n         $SJXB\n         $DAS\n         $SVT\n*                       BELOW REQUIRED FOR $HCT\n         $BUFFER\n         $JCT\n         $SCAT\n         $XECB\n         $MIT\n         $CAT\n         $PCE\n         $HCT\n*\n         $JQE\n         $JOE\n*\n         PRINT ON\n         JJSDSECT\n         JDFJOB\n         END\nMVSCMD TITLE 'MVS/JES2 COMMAND INTERFACE'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                 COMMAND INTERFACE                                   *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: ISSUE MVS/JES2 OPERATOR COMMANDS.                         *\n*                                                                     *\n*                                                                     *\n* FUNCTION: CMD IS DESIGNED TO TO BE INVOKED FROM ANY ASSEMBLER       *\n*           PROGRAM.                                                  *\n*                                                                     *\n*           IT INVOKES SVC 34, SETTING CONSOLE ID TO THE MVS MASTER   *\n*           CONSOLE.                                                  *\n*                                                                     *\n*                                                                     *\n* INVOKING:                                                           *\n*                                                                     *\n*         LA    R15,4        <== I AM ENTRY NUMBER 4                  *\n*         LA    R1,WORKADDR  <== 8K WORK AREA ADDRESS                 *\n*         SVC   236          <== SUPERSVC ROUTER                      *\n*                                                                     *\n*         NOTE: THE WORK AREA MUST CONTAIN 512 BYTES OF WORK AREA     *\n*               FOR THIS SVC. AFTER 512 BYTES, THE COMMAND TO BE      *\n*               ISSUED MUST BE SPECIFIED AS A LIST FORM WTO.          *\n*               FOR EXAMPLE:                                          *\n*                                                                     *\n*               WORKADDR DC    A(WORKAREA)                            *\n*               WORKAREA DS    XL512                                  *\n*               CMDWTO   WTO   '$DU,LNE1',ROUTCDE=11,MF=L             *\n*                                                                     *\n* OUTPUT:\n*                                                                     *\n*         R15   =   SVC 34 RETURN CODE\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCE: NONE.                                           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* CHANGE LOG:                                                         *\n*                                                                     *\n*   2/07/85  BRIAN COOK.     INITIAL ENTRY.                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         COPY  JDFMACS\n         EJECT\nMVSCMD CSECT\n         USING *,12\n         LR    R12,R6         SET SVC BASE REGISTER\n         B     STARTUP\n         DC    C'MVSCMD MVS/JES2 COMMANDS BRIAN COOK 2/7/85'\nSTARTUP  DS    0H\n         L     R13,0(,R1)     POINT TO COMMAND TEXT\n         USING CMDDSECT,13\n         STM   R0,R15,CMDREGS SAVE THE REGISTERS\n         USING PSA,0\n         L     R3,FLCCVT      POINT TO CVT\n         USING CVT,3\n         L     R4,CVTCUCB         R4 = ADDR OF 'CUCB' (UCM BASE)\n         USING UCM,R4\n*\n*\n*\n*\n         TITLE 'CMD   SEARCH FOR MASTER CONSOLE'\n*\n*\n*---------------------------------------------------------------------*\n*                                                                     *\n*          BUILD A TABLE OF UCM ADDRESSES (ONE PER CONSOLE)           *\n*                                                                     *\n*---------------------------------------------------------------------*\nBLDUCMS  DS    0H\n         L     R5,UCMVEA          R5 = ADDR OF FIRST UCM ENTRY\n         L     R6,UCMVEZ          R6 = LENGTH OF EACH UCM ENTRY\n         L     R7,UCMVEL          R7 = ADDR OF LAST UCM ENTRY\n         LA    R8,UCMTAB+4        R8 = ADDR OF UCMTAB\n         LA    R9,UCMTABE         R9 = ADDR OF END OF UCMTAB\n         XR    R2,R2              R2  = 0 (NUMBER OF VALID UCMS)\nUCMLOOP  ST    R5,0(0,R8)         SAVE UCM ADDRESS IN UCMTAB\n         LA    R2,1(0,R2)         R2  = R2  + 1  (ONE MORE UCM)\n         LA    R8,4(0,R8)         R8 = ADDR OF NEXT UCMTAB ENTRY\n         CR    R8,R9              DOES R8 POINT PAST END OF UCMTAB?\n         BNL   UCMDONE            YES; LEAVE LOOP\n         AR    R5,R6              R5 = ADDR OF NEXT UCM ENTRY\n         CR    R5,R7              DOES R5 POINT PAST UCM ENTRIES?\n         BL    UCMLOOP            NOPE; KEEP GOING\nUCMDONE  STH   R2,NUMUCMS         SAVE NUMBER OF UCMS FOUND\n         DROP  R4\n*---------------------------------------------------------------------*\n*        SCAN THE UCM FOR THE MASTER CONSOLE AS THE DEFAULT\n*        CONSOLE WHEN ENTERING COMMANDS.\n*---------------------------------------------------------------------*\nSETMAST  LA    R4,1               SET DEFAULT TO FIRST CONSOLE\n         ST    R4,CONSOLE         SET DEFAULT CONSOLE NUMBER\nMASTSCAN LA    R5,UCMTAB          SET POINTER TO UCM ADDRESS TABLE\n         CH    R4,NUMUCMS         IS NUMBER TOO HIGH?\n         BNH   MASTCONT           NO, CONTINUE\n         B     ISSUE34            IMPOSSIBLE .. NO MASTER CONSOLE ?\nMASTCONT SLL   R4,2               MAKE CONSOLE NUMBER TABLE INDEX\n         LA    R5,0(R5,R4)        SET POINTER TO UCM ADDRESS SLOT\n         L     R5,0(0,R5)         SET POINTER TO UCM\n         USING UCMLIST,R5         TELL ASSEMBLER ABOUT UCM\n         L     R6,UCMXB\n         USING IEERDCM,6\n         TM    UCMDISP1,UCMDISPA  IS THIS A MASTER CONSOLE?\n         BO    MASTFND            YES ? FOUND THE MASTER CONSOLE ..\n         SRL   R4,2               RESET CONSOLE NUMBER TO RELATIVE\n         LA    R4,1(0,R4)         SET POINTER TO NEXT CONSOLE\n         B     MASTSCAN           CONTINUE MASTER CONSOLE SCAN LOOP\nMASTFND  SRL   R4,2               RESET CONSOLE NUMBER TO RELATIVE\n         ST    R4,OLDCONS         SET VALID OLD CONSOLE NUMBER\n         ST    R4,CONSOLE         SET VALID CONSOLE NUMBER (MASTER)\n         MVC   CDFUCMID(1),UCMID  SAVE THE UCMID OF THE MASTER\n         TITLE 'ISSUE SVC 34'\n*\n*                                      SET UP FOR SVC 34\nISSUE34  DS    0H\n*\n         L     R0,CONSOLE\n         LA    R1,CMDWTO\n         SVC   34\n*\n         L     R14,CMDR14     RESTORE THE RETURN ADDRESS\n         BR    R14            RETURN TO OUR CALLER\n*\n         TITLE 'MISCELLANEOUS CONSTANTS'\n         LTORG\n*\n         DS    0F\n         TITLE 'EQUATES'\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         PRINT NOGEN\n*.....................................................................*\n*        MAPPING DSECT FOR SRM USER CONTROL BLOCK\n*.....................................................................*\n         IRAOUCB\n*.....................................................................*\n*        MAPPING DSECT FOR DMDT (DOMAIN DESCRIPTOR TABLE)             *\n*.....................................................................*\n         SPACE\nDMDT     DSECT\nDMDTNO   DS    XL1             DOMAIN NUMBER\nDMDTLO   DS    XL1             MIN  MPL LEVEL\nDMDTHI   DS    XL1             MAX  MPL LEVEL\nDMDTWT   DS    XL1             WEIGHTING FACTOR\nDMDTMPLT DS    XL2             CURRENT MPL TARGET\nDMDTRUA  DS    XL2             AVE # OF READY USERS\nDMDTGOOU DS    XL2             CURRENT # USERS GOING OUT\nDMDTCMPL DS    XL2             CURRENT MPL\nDMDTOUTU DS    XL2             CURRENT # USERS ON OUT Q\nDMDTINCU DS    XL2             CURRENT # SWAPPABLE INCORE USERS\nDMDTRUC  DS    XL4             ACCUM FOR READY USER AVERAGE\nDMDTEND  DS    0X              END OF DMT\nDMDTLEN  EQU   *-DMDT\n         SPACE 2\n*\n* EQUATES....\n*\nRMCTDMDT EQU   X'B4'           POINTER TO DOMAIN TABLE\nRMCTDMNC EQU   X'BC'           COUNT OF NUMBER OF DOMAINS\nRMCTWMST EQU   X'18'           ADDRESS OF WLM SPEC TABLE\n         SPACE 2\n         TITLE '*** COMMUNICATION VECTOR TABLE ***'                GMM\n         CVT   DSECT=YES                                           GMM\n         TITLE '*** RDCM DSECT ***'                                GMM\nIEERDCM  DSECT ,                                                   GMM\n         IEECRDCM                                                  GMM\n         TITLE '*** MULTIPLE CONSOLE SUPPORT (MCS) UCM PREFIX ***' GMM\n         IEECUCM FORMAT=NEW\n         IHAPSA\n         CMDDSECT\n         END\nJCTSVC TITLE 'JES2 JCT ACCESS'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                 JCT ACCESS                                          *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: RETURN FIELDS EXTRACTED FROM THE JES2 JCT.                *\n*                                                                     *\n*                                                                     *\n* FUNCTION: JCT IS DESIGNED TO TO BE INVOKED FROM ANY ASSEMBLER       *\n*           PROGRAM.                                                  *\n*                                                                     *\n*           IT INVOKES THE SPOOLIO MODULE FOR READING THE JCT FROM    *\n*           THE JES2 SPOOL.                                           *\n*                                                                     *\n*                                                                     *\n* INVOKING:                                                           *\n*                                                                     *\n*         LA    R15,12       <== I AM ENTRY NUMBER 12                 *\n*         LA    R1,WORKADDR  <== 12K WORK AREA ADDRESS                *\n*         SVC   236          <== SUPERSVC ROUTER                      *\n*                                                                     *\n*         NOTE: THE WORK AREA MUST CONTAIN 512 BYTES OF WORK AREA     *\n*               FOR THIS SVC. AFTER 508 BYTES, THE MTTR OF THE JCT    *\n*               TO BE READ MUST BE PROVIDED.                          *\n*                                                                     *\n*               THE JCT DATA WILL BE RETURNED AFTER THE 512 BYTES.    *\n*                                                                     *\n*               FOR EXAMPLE:                                          *\n*                                                                     *\n*               WORKADDR DC    A(WORKAREA)                            *\n*                        DS    0D           ** MANDATORY **           *\n*               WORKAREA DS    XL508                                  *\n*               MTTRATA  DS    XL4                                    *\n*               JCTDATA  DS    0XL24                                  *\n*       JDFSPIOT DS    XL4   JCTSPIOT    SPIN IOT ADDRESS\n*       JDFIOT   DS    XL4   JCTIOT      IOT ADDRESS\n*       JDFEXSID DS    CL4   JCTEXSID    EXECUTION SMF SYSTEM-ID\n*       JDFUSEID DS    CL8   JCTUSEID    SUBMITTING USER-ID\n*                                                                     *\n* OUTPUT:\n*                                                                     *\n*         R15   =   RETURN CODE\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCE: NONE.                                           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* CHANGE LOG:                                                         *\n*                                                                     *\n*   2/12/85  BRIAN COOK.     INITIAL ENTRY.                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         COPY JDFMACS\n         EJECT\nJCTSVC CSECT\n         USING *,12\n         LR    R12,R6         SET SVC BASE REGISTER\n         B     STARTUP\n         DC    C'JCTSVC JES2 JCT EXTRACT BRIAN COOK 2/12/85'\nSTARTUP  DS    0H\n         L     R13,0(,R1)     POINT TO WORK AREA\n         USING JEDDSECT,13\n         STM   R0,R15,JEDREGS SAVE THE REGISTERS\n*\n         CALL  SPOOLIO\n*\n         LTR   R15,R15\n         BNZ   ERROR\n*\n         LA    R3,JEDBUFF\n         USING JCTID,3\n*\n         LA    R8,JCTNJHDR             NJE HEADER\n         USING NJHDSECT,8\n*\n         CLC   JCTID(3),=C'JCT'  GOT ONE\n         BNE   ERROR12\n*\n* WATCH IT!!!!!\n*\n* THE FIELDS IN THE JCT ARE ACTUALLY OVERLAID BY THE EXTRACT FIELDS.\n*\n         ICM   R4,15,JCTJBKEY\n         ICM   R5,15,JCTSPIOT\n         ICM   R6,15,JCTIOT\n         ICM   R7,15,JCTEXSID\n*\n         LA    R1,JCTUSEID\n*\n         CLC   NJHGORGN(4),=C'CIS '     ORIGIN RSCS\n         BE    RSCS                     YES\n*\n         CLC   NJHGORGN(8),=C'CANASALT' DOS/VSE POWER/NJE\n         BE    POWERNJE                 YES\n*\n         B     SETREST\n*\nRSCS     DS    0H\n*\n         LA    R1,NJHGUSID       USERID PUT HERE BY RSCS\n         B     SETREST\n*\nPOWERNJE DS    0H\n*\n         LA    R1,NJHGXEQU       USERID PUT HERE BY POWER/NJE\n         B     SETREST\n*\nSETREST  DS    0H\n*\n         DROP  8\n         ICM   R8,15,JCTODTON\n*\n         MVC   JEDUSEID(8),0(R1)\n         STCM  R4,15,JEDJBKEY\n         STCM  R5,15,JEDSPIOT\n         STCM  R6,15,JEDIOT\n         STCM  R7,15,JEDEXSID\n         STCM  R8,15,JEDATOUT\n*\nRETURN0  DS    0H\n         L     R14,JEDR14\n         SR    R15,R15\n         BR    R14\n*\nERROR12  DS    0H\n         LA    R15,12\n*\nERROR    DS    0H\n         L     R14,JEDR14\n         BR    R14\n*\n         EJECT\n         JEDDSECT\nBUFSTART EQU   *+88\nBUFDSECT EQU   *\n         $JCT\n         $NHD\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         END\nPDDBSVC TITLE 'JES2 PDDB ACCESS'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                 PDDB ACCESS                                         *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: RETURN FIELDS EXTRACTED FROM THE JES2 IOT.                *\n*                                                                     *\n*                                                                     *\n* FUNCTION: PDDB IS DESIGNED TO TO BE INVOKED FROM ANY ASSEMBLER      *\n*           PROGRAM.                                                  *\n*                                                                     *\n*           IT INVOKES THE SPOOLIO MODULE FOR READING THE IOT  FROM   *\n*           THE JES2 SPOOL.                                           *\n*                                                                     *\n*                                                                     *\n* INVOKING:                                                           *\n*                                                                     *\n*         LA    R15,16       <== I AM ENTRY NUMBER 16                 *\n*         LA    R1,WORKADDR  <== 40K WORK AREA ADDRESS                *\n*         SVC   236          <== SUPERSVC ROUTER                      *\n*                                                                     *\n*         NOTE: THE WORK AREA MUST CONTAIN 512 BYTES OF WORK AREA     *\n*               FOR THIS SVC. AFTER 512 BYTES, THE MTTR OF THE SPIN   *\n*               IOT AND THE NORMAL IOT MUST BE PROVIDED.              *\n*                                                                     *\n*               THE PDDB DATA WILL BE RETURNED AFTER THE 512 BYTES.   *\n*                                                                     *\n*               FOR EXAMPLE:                                          *\n*                                                                     *\n*               WORKADDR DC    A(WORKAREA)                            *\n*                        DS    0D           ** MANDATORY **           *\n*               WORKAREA DS    XL512                                  *\n*               SPINIOT  DS    XL4                                    *\n*               NORMIOT  DS    XL4                                    *\n*                        DS    XL12                                   *\n*               DDLINES  DS    XL12288                                *\n*                                                                     *\n* OUTPUT:\n*                                                                     *\n*         R15   =   RETURN CODE\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCE: NONE.                                           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* CHANGE LOG:                                                         *\n*                                                                     *\n*   4/04/85  BRIAN COOK.     INCREASED WORK AREA TO 40K               *\n*                                                                     *\n*                                                                     *\n*   2/12/85  BRIAN COOK.     INITIAL ENTRY.                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         COPY  JDFMACS\n         EJECT\nPDDBSVC CSECT\n         USING *,12\n         LR    R12,R6         SET SVC BASE REGISTER\n         B     STARTUP\n         DC    C'PDDBSVC JES2 PDDB FORMAT BRIAN COOK 2/12/85'\nSTARTUP  DS    0H\n         L     R13,0(,R1)     POINT TO COMMAND TEXT\n         USING PEDDSECT,13,14,15\n         STM   R0,R15,PEDREGS SAVE THE REGISTERS\n         LA    R15,2048\n         LA    R14,2048(R13,R15)\n         LA    R15,2048(R14,R15)\n*\n         LR    R11,R13        POINT DOWN 34K\n         A     R11,K34        POINT DOWN 34K\n         USING JEDDSECT,11\n*\n         EJECT\n*\n*\n         CLC   FZEROS(4),NORMIOT    IOT DISK ADDRESS\n         BE    ABADIOT\n*                              READ 1ST NORMAL IOT\n         LA    R8,DDAREA\n         USING DDLINE,8\n*\n         MVC   JEDMTTR2(4),NORMIOT\n*\nPDDBLOOP DS    0H\n*\n         LR    R10,R13\n         LR    R13,R11\n         CALL  SPOOLIO\n         LR    R13,R10\n*\n         LTR   R15,R15\n         BNZ   ERROR\n*\n         LA    R9,JEDBUFF\n         LR    R7,R9\n         USING IOTSTART,9\n         CLC   0(4,R9),=C'IOT '\n         BE    GOTIOT2\n*\n         LA    R15,12\n         B     ERROR\n*\nGOTIOT2  DS    0H\n*\n*\n         L     R6,IOTPDDBP  END OF PDDB'S OFFSET\n         LA    R6,0(6,R7)   END OF PDDB'S ADDRESS\n         MVC   NORMIOT(4),IOTIOTTR    NEXT IOT DISK ADDRESS\n         MVC   JEDMTTR2(4),IOTIOTTR   NEXT IOT DISK ADDRESS\n         A     R7,IOTPDDB     OFFSET OF FIRST PDDB\n         LA    R1,IOTSTART-IOTDSECT   ADJUST FOR BUFF CTL INFO\n         SR    R7,R1\n         USING PDBDSECT,7\n*\n*\nNEXTPDDB DS    0H\n*\n         SR    R1,1\n         LH    R1,PDBDSKEY\n         C     R1,FZEROS               IF DSKEY ZERO\n         BE    SKIPPDDB                SKIP THIS\n*\n         MVI   DDLINE,C' '      CLEAR OUTPUT AREA\n         MVC   DDLINE+1(DDLINESZ-1),DDLINE\n         MVI   DDLINESZ(R8),X'FF'    RESET END OF LIST FLAG\n*\n         MVC   DDN(8),PDBDDNAM       SET THE DDNAME\n         MVC   STEPNAME(8),PDBSNAME  SET THE STEPNAME\n         MVC   PROCNAME(8),PDBPNAME  SET THE PROCSTEPNAME\n*\n         CVD   R1,DOUBLEWD\n         OI    DOUBLEWD+7,X'0F'\n         UNPK  DDLDSID(3),DOUBLEWD+6(2)\n         CLI   SPINFLAG,0           NOT DOING SPIN DATASETS\n         BE    *+14                 SKIP THIS\n         MVI   DDLDSID,C'9'         MAKE SPIN DSID'S 900\n         MVC   DDN(8),=C'--SPIN--'  FLAG IT\n*\n         CLC   PDBDRMT(2),=X'0000'  IS THERE A REMOTE DEST\n         BE    *+8                  NOPE\n         MVI   DDREMOTE,C'R'        SET FLAG\n*\nGOTDDNOW DS    0H\n         MVC   DDCLASS(1),PDBCLASS\n         SR    14,14\n         IC    R14,PDBCOPYS\n         CVD   R14,DOUBLEWD\n         MVC   DDCOPIES-1(4),EDIT4\n         ED    DDCOPIES-1(4),DOUBLEWD+6\n         TM    PDBFLAG2,PDB2BRST        IS IT BURST\n         BZ    *+8                      NOPE\n         MVI   DDBURST,C'B'\n*\n         L     R14,PDBRECCT   LINES\n         CVD   R14,DOUBLEWD\n         MVC   DDLINES(8),EDIT8\n         ED    DDLINES,DOUBLEWD+4\n*\n         MVC   DDMTTR(4),PDBMTTR\n*\n         MVC   DDFORM(4),PDBFORMS\n         OC    DDFORM(4),SPACES        CHANGE ZEROS TO BLANKS\n         MVC   DDFCB(4),PDBFCB\n         MVC   DDUCS(4),PDBUCS\n         MVC   DDLRECL(2),PDBLRECL\n*\n         SR    R14,R14\n         ICM   R14,3,PDBLRECL\n         CVD   R14,DOUBLEWD\n         MVC   DDDRECL(6),EDIT6\n         ED    DDDRECL,DOUBLEWD+5\n*\n         MVC   DDRECFM(1),PDBRECFM\n         TM    DDRECFM,X'C0'\n         BO    PDDBRECU\n         BZ    PDDBRECU\n*\n         TM    DDRECFM,X'80'\n         BO    PDDBRECF\n         MVI   DDDRECF,C'V'         SET RECFM \"V\"\n         B     PDDBLOCK             SEE IF IT'S BLOCKED\n*\nFZEROS   DC    F'0'\nHEXTABLE DC    C'0123456789ABCDEF'\nPDDBRECU DS    0H\n*\n         MVI   DDDRECF,C'U'         SET RECFM \"U\"\n         B     PDDBBBMP             GO BUMP\n*\nPDDBRECF DS    0H\n*\n         MVI   DDDRECF,C'F'         SET RECFM \"F\"\n*\nPDDBLOCK DS    0H\n*\n         TM    DDRECFM,X'10'\n         BZ    PDDBCCCC             NOT BLOCKED, CHECK FOR CARR CTL\n         MVI   DDDRECF+1,C'B'       SET BLOCKED\n*\nPDDBCCCC DS    0H\n*\n         TM    DDRECFM,X'06'        ANY CARRIAGE CONTROL\n         BZ    PDDBBBMP             NO, JUST BUMP\n         BO    PDDBBBMP             NO, JUST BUMP\n*\n         TM    DDRECFM,X'04'        ASA CARRIAGE CONTROL\n         BO    PDDBASAC             YES, SET IT\n*\n         CLI   DDDRECF+1,C' '       BLANK\n         BNE   *+12                 NO, MUST BE BLOCKED\n         MVI   DDDRECF+1,C'M'       SET IT\n         B     PDDBBBMP             GO BUMP\n         MVI   DDDRECF+2,C'M'       SET IT\n         B     PDDBBBMP             GO BUMP\n*\nPDDBASAC DS    0H\n*\n         CLI   DDDRECF+1,C' '       BLANK\n         BNE   *+12                 NO, MUST BE BLOCKED\n         MVI   DDDRECF+1,C'A'       SET IT\n         B     *+8                  GO BUMP\n         MVI   DDDRECF+2,C'A'       SET IT\n*\nPDDBBBMP DS    0H\n         LA    R8,DDLINESZ(,R8)      BUMP TO NEXT ENTRY\n         MVI   0(R8),X'FF'        END OF ENTRIES\nSKIPPDDB DS    0H\n         LA    R7,PDBLENG(,7)        BUMP TO NEXT PDDB\n         CR    R7,R6\n         BL    NEXTPDDB\n         MVC   JEDMTTR2(4),NORMIOT    IOT DISK ADDRESS\n         L     R1,NORMIOT\n         LTR   R1,1\n         BNZ   PDDBLOOP\n         L     R1,SPINIOT\n         LTR   R1,1\n         BZ    RETURN0\n         MVI   SPINFLAG,1           NOW DOING SPIN DATASETS\n         MVC   NORMIOT(4),SPINIOT     IOT DISK ADDRESS\n         MVC   JEDMTTR2(4),SPINIOT    IOT DISK ADDRESS\n         XC    SPINIOT(4),SPINIOT     IOT DISK ADDRESS\n         B     PDDBLOOP\n*\nRETURN0  DS    0H\n         L     R14,PEDR14\n         SR    R15,R15\n         BR    R14\n*\nABADIOT  DS    0H\n         LA    R15,12\n*\nERROR    DS    0H\n         L     R14,PEDR14\n         BR    R14\n*\nSPACES   DC    CL8' '\n*\nEDIT4    DC    X'40202120'\nEDIT6    DC    X'402020202121'\nEDIT8    DC    X'4020202020202120'\nK34      DC    F'34816'\n*\n         PEDDSECT\n         JEDDSECT\n         DDLINE\nBUFSTART EQU   *+88\nBUFDSECT EQU   *\n         PRINT NOGEN\n         $TAB\n         $IOT\n         $PDDB\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         END\nSPOOLIO TITLE 'JES2 SPOOL READ'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                 SPOOL I/O                                           *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: READ A BLOCK FROM SPOOL.                                  *\n*                                                                     *\n*                                                                     *\n* FUNCTION: SPOOLIO IS DESIGNED TO TO BE INVOKED FROM ANY ASSEMBLER   *\n*           PROGRAM.                                                  *\n*                                                                     *\n*           IT ISSUES EXCP USING THE SJBDCB.                          *\n*                                                                     *\n*                                                                     *\n* INVOKING:                                                           *\n*                                                                     *\n*         LA    R1,WORKADDR  <== 12K WORK AREA ADDRESS                *\n*         CALL  SPOOLIO      <== CALL STATEMENT                       *\n*                                                                     *\n*         NOTE: THE WORK AREA MUST CONTAIN 512 BYTES OF WORK AREA     *\n*               FOR THIS PROGRAM. THE BLOCK RETRIEVED FROM THE SPOOL  *\n*               WILL BE PLACED AFTER THE 512 BYTES. THE LAST 4 BYTES  *\n*               OF THE 512-BYTE AREA MUST CONTAIN THE MTTR OF THE     *\n*               BLOCK TO BE READ FROM SPOOL.                          *\n*                                                                     *\n*               FOR EXAMPLE:                                          *\n*                                                                     *\n*               WORKADDR DC    A(WORKAREA)                            *\n*                        DS    0D           ** MANDATORY **           *\n*               WORKAREA DS    XL508                                  *\n*               READMTTR DS    XL4                                    *\n*               BUFFER   DS    XL4096                                 *\n*                        DS    XL8192                                 *\n*                                                                     *\n* OUTPUT:\n*                                                                     *\n*         R15   =   RETURN CODE\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCE: NONE.                                           *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n* CHANGE LOG:                                                         *\n*                                                                     *\n*   2/12/85  BRIAN COOK.     INITIAL ENTRY.                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nSPOOLIO CSECT\n         USING *,12\n         STM   R14,R12,12(R13)    SAVE REGS\n         LR    R12,R15\n         B     STARTUP\n         DC    C'SPOOLIO JES2 SPOOL READ BRIAN COOK 2/12/85'\nSTARTUP  DS    0H\n         LR    R11,R13        CALLING SAVE AREA\n         USING JESDSECT,11\n         LA    R1,SAVE2       MY SAVE AREA\n         ST    R1,8(,R13)     CALLING SAVE AREA\n         ST    R13,4(,R1)     CALLING SAVE AREA\n*\n         LR    R13,R1         POINT TO COMMAND TEXT\n         MVC   READMTTR(4),PASSMTTR  SAVE THIS\n         DROP  11\n         USING SAVE2,13\n         USING PSA,0\n*\n*\n         L     R3,FLCCVT           SET CVT ADDRESSIBILITY\n         USING CVT,R3\n         L     R4,PSATOLD          SET TCB ADDRESSIBILITY\n         USING TCB,R4\n         USING IOBNIOBA,R8         SET BUFFER ADDRESSIBILITY\n*\n*\n         L     R6,TCBJSCB          POINT TO JSCB\n         LR    R15,R6              COPY JSCB ADDRESS\n         L     R15,JSCBSSIB-IEZJSCB(,R15) LOAD SSIB ADDRESS\n         L     R15,SSIBSUSE-SSIBEGIN(,R15) LOAD SJB ADDRESS\n         L     R15,SJBSJXB-SJBDSECT(,R15) LOAD SJB EXTENSION\n         MVC   SVCDCB(4),SJXIDCB-SJXDSECT(R15) LOAD SJB DCB ADDRESS\n*\n         L     R6,JSCBSSIB-IEZJSCB(,R6) POINT TO SSIB\n         USING SSIB,R6             SSIB ADDRESSIBILITY\n         L     R2,CVTJESCT         POINT TO SUBSYSTEM CNTL TBL\n         USING JESCT,R2            JESCT ADDRESSIBILITY\n         LA    R2,JESSSCT-(SSCTSCTA-SSCT) POINT TO SSCT HEAD\n         USING SSCT,R2             SSCT ADDRESSIBILITY\n         SPACE 2\n         LA    R15,4               SET JES2 NOT ACTIVE ERROR CODE\nINIT0    DS    0H                  SEARCH FOR JES2 SSCT\n         ICM   R2,15,SSCTSCTA      POINT TO NEXT SSCT\n         BZR   R14                 IF ZERO THEN ERROR\n         CLC   SSCTSNAM,SSIBSSNM   JES SSCT?\n         BNE   INIT0               NO, THEN LOOP\n         ICM   R6,15,SSCTSSVT      LOAD SSVT ADDRESS\n         BZR   R14                 IF ZERO THEN JES2 NOT ACTIVE\n         USING SSVT,6              JES2 SSVT ADDRESSIBILITY\n*\n*        MVC   SVCNUMDA(1),$SVNUMDA NUMBER OF SPOOL EXTENTS\n         MVC   SVCBFSIZ(2),$SVBFSIZ BUFFER SIZE\n         MVC   SVCDAS(4),$SVTDAS1  TRACK EXTENT TABLE\n         MVC   SVCHCT(4),$SVHCT\n*\nRDSPOOL  DS    0H                  READ JES2 SPOOL\n         LA    R15,12              ASSUME EXTENT INVALID\n*        CLM   R1,8,SVCNUMDA       CHECK FOR VALID EXTENT\n*        BNLR  R14                 IF NOT LOW THEN INVALID\n         SR    R2,R2               CLEAR BUFFER LENGTH REGISTER\n         ICM   R2,3,SVCBFSIZ       LOAD BUFFER SIZE\n*\n         LA    R8,SPOOLIOB       LOAD BUFFER ADDRESS REGISTER\n         LR    R0,R8               SET ADDRESS FOR CLEAR\n         LA    R1,4095             SET LENGTH FOR CLEAR\n         SR    R15,R15             SET LENGTH TO ZERO\n         MVCL  R0,R14              CLEAR BUFFER TO ZEROS\n         MVI   IOBFLAG1,IOBCMDCH+IOBUNREL CMD CHAINING AND UNRELATED\n         LA    R0,IOBNECB          LOAD ECB ADDRESS\n         ST    R0,IOBECBPT         STORE IN IOB\n         MVC   IOBDCBPT(4),SVCDCB  STORE DCB ADDRESS IN IOB\n         LA    R0,IOBSEEK+8        LOAD CHANNEL PGM ADDRESS\n         ST    R0,IOBSTART         STORE CP ADDRESS IN IOB\n         LA    R0,CCW2             LOAD SEARCH CCW ADDRESS\n         ST    R0,CCW3             STORE IN CCW3 FOR TIC\n         LA    R0,BUFSTART         LOAD BUFSTART ADDRESS\n         ST    R0,CCW4             STORE IN READ CCW\n         LA    R0,IOBSEEK+3        LOAD SEARCH ID ADDRESS\n         ST    R0,CCW2             STORE IN SEARCH ID CCW\n         LA    R0,CCW1+5           LOAD SECTOR ADDRESS\n         ST    R0,CCW1             STORE IN RPS CCW\n         STH   R2,CCW4+6           STORE BLOCK LENGTH IN READ CCW\n         OC    CCW1(LCP),CP        OR IN REST OF CHANNEL PGM\n*\n         L     R0,READMTTR         RELOAD MTTR\n*\n         LA    R15,16             ASSUME INVALID TRACK ADDRESS\n         LR    R3,R0               COPY MTTR\n         LA    R0,0(,R3)           MAKE R0 0TTR\n         XR    R3,R0               MAKE R3 M000\n         ST    R3,IOBM             STORE EXTENT IN IOB\n         STC   R0,IOBR             STORE RECORD NUMBER IN IB\n         L     R9,SVCDAS           LOAD TRACK EXTENT TBL ADDRESS\n         USING DASDSECT,R9         TED ADDRESSIBILITY\n*\nTSTDAS   DS    0H\n         CLM   R3,1,DASEXTNO       MATCH ON EXTENT NUMBER?\n         BE    GOTDAS              YES\n*\n*\nGOTDAS   DS    0H\n         LR    R2,R0               COPY 0TTR\n         SRDL  R2,40               SET TT IN R2. R3 FOR DIVIDE\n         ICM   R0,15,DASTKCYL      GET NUMBER OF TRACKS/CYLINDERS\n         BZ    ERROR               IF ZERO THEN SPOOL PACK ABSENT\n         DR    R2,R0               ELSE COMPUTE CC HH\n         STCM  R3,3,IOBCC          STORE CC IN IOB\n         STCM  R2,3,IOBHH          STORE HH IN IOB\n         MVI   CCW1,X'03'          ASSUME NO RPS\n         TM    DASFLAG,DASRPSF     IS TABLE VALID\n         BZ    EXCPSTEP            IF NOT, SKIP THIS\n         LA    R2,DASRPS           POINT TO EXT RPS TBL\n         SLR   R3,R3               ELSE ZERO REGISTER FOR INSERT\n         IC    R3,IOBR             INSERT RECORD NUMBER FROM IOB\n         IC    R3,0(R3,R2)         GET CORRES SECTOR NUMBER\n         STC   R3,CCW1+5           SET SECTOR DATA\n         MVI   CCW1,X'23'          SET SET-SECTOR COMMAND\n*\nEXCPSTEP DS    0H\n         XC    IOBNECB,IOBNECB     CLEAR ECB\n         EXCP  IOBSTDRD            READ SPOOL BLOCK\n         WAIT  ECB=IOBNECB         WAIT FOR I/O TO COMPLETE\n         CLI   IOBNECB,X'7F'       NORMAL COMPLETION?\n         BE    READONE             IF NORMAL THEN RETURN\n         LA    R15,16              ASSUME TRACK ADDRESS ERROR\n         CLI   IOBNECB,X'42'       TEST ASSUMPTION\n         BE    ERROR               IF CORRECT THEN SKIP CODES\n         L     R1,IOBCSW-1         LOAD LAST CCW ADDRESS + 8\n         LA    R1,0(R1)            CLEAR HIGH BYTE\n         SH    R1,=H'8'            POINT TO LAST CCW\n         ICM   R0,8,0(R1)          INSERT OPERATION CODE\n         ICM   R0,4,IOBFLAG3       INSERT IOB FLAG3 CODE\n         ICM   R0,3,IOBSENS0       INSERT IOB SENSE BYTES\n         ST    R0,IOBCSW-1         STORE STATUS\n         LD    R0,IOBCSW-1         LOAD STATUS\n         L     R1,IOBNECB          LOAD ERROR CODE\n         LA    R15,20              SET I/O ERROR RC\n         B     ERROR               GO THRU ERROR RETURN\n*\nREADONE  DS    0H\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nERROR    DS    0H\n         L     R13,4(,R13)\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\n      TITLE 'SPOOLIO - CHANNEL PROGRAMS AND MISCELLANEOUS CONSTANTS'\nFZERO    DC    F'0'\nBLANKS   DS    0CL80\nSPACES   DC    CL80' '\nFPLUS1   DC    F'1'\nEDMASK3P DC    XL4'2020204B'\nEDMASK3  DC    XL3'202020'\nEDMASK10 DC    XL10'40206B2020206B202120'\nCP       DS    0D                  CHANNEL PROGRAM\nCPCCW1   CCW   X'03',0,SILI+CC,1   NOP\nCPCCW2   CCW   X'31',0,SILI+CC,5   SEARCH ID EQUAL\nCPCCW3   CCW   X'08',0,SILI+CC,1   TIC\nCPCCW4   CCW   X'06',0,SILI,0      READ DATA\n         SPACE\nLCP      EQU   *-CP                LENGTH OF CHANNEL PGM\n         SPACE 3\n*\n         LTORG\n         TITLE 'SPOOLIO - MISCELLANEOUS DSECTS'\n         PRINT NOGEN\n         CVT   DSECT=YES\n         SPACE 2\n         IKJTCB\n         SPACE 2\n         IEFJESCT\n         SPACE 2\n         IEFJSSIB\n         SPACE 2\n         IEZJSCB\n         SPACE 2\n         IHAASVT\n         IHAPSA\n         SPACE 2\nLPRFX    EQU   X'58'              BUFFER PREFIX LENGTH\nCD       EQU   X'80'              DATA CHAIN\nCC       EQU   X'40'              COMMAND CHAIN\nSILI     EQU   X'20'              SUPPRESS INCORRECT LENGTH\nSKIP     EQU   X'10'              SKIP DATA TRANSFER\nPCI      EQU   X'08'              PROGRAM CONTROLLED INTERRUPTION\nIDA      EQU   X'04'              INDIRECT ADDRESSING\n         SPACE 2\n         IEZIOB\n         SPACE 2\n         ORG   IOBSEEK+8\nCHANPGM  DS    0D                  CHANNEL PGM AREA\nCCW1     DS    D                   SET SECTOR / READ HA\nCCW2     DS    D                   SEARCH ID EQUAL\nCCW3     DS    D                   TIC\nCCW4     DS    D                   READ KEY AND DATA\nCOUNT    DS    D                   DA COUNT FIELD\n         SPACE 2\nBUFDSECT EQU   IOBNIOBA            EQUATE BUFDSECT\n         SPACE\n         ORG   IOBNIOBA+LPRFX      ORG PAST PREFIX\n         SPACE 1\nBUFSTART DS    0D                  BUFFER START\nIOBLEN   EQU   *-IOBNIOBA\n         SPACE 3\n         IEFJSSOB (SO,CS,JS,RQ,RR)\n         IEFJSCVT\n*\nSPOOLIO CSECT ,\n         PRINT OFF\n         COPY $HASPGBL\n         $HASPEQU\n         $SJB\n         IEZDEB\nDEBEXLEN EQU   16\n         $SJXB\n         $DAS\n         $SVT\n*                       BELOW REQUIRED FOR $HCT\n         $JCT\n         $SCAT\n         $XECB\n         $MIT\n         $CAT\n         $PCE\n         $JQE\n         $HCT\n*\n*\n         PRINT ON\n*\n*\nJESDSECT DSECT\n         DS    18F\nSVCREGS  DS    0F\nSVCR0    DS    F\nSVCR1    DS    F\nSVCR2    DS    F\nSVCR3    DS    F\nSVCR4    DS    F\nSVCR5    DS    F\nSVCR6    DS    F\nSVCR7    DS    F\nSVCR8    DS    F\nSVCR9    DS    F\nSVCR10   DS    F\nSVCR11   DS    F\nSVCR12   DS    F\nSVCR13   DS    F\nSVCR14   DS    F\nSVCR15   DS    F\n*\nSAVE2    DS    18F\n*\n         DS    0F\nSVCDAS   DS    F             TRACK EXTENT TABLE\n*\nSVCHCT   DS    F             HCT ADDRESS\nSVCDCB   DS    F             SPOOL DCB\nDWORD    DS    F             START OF DOUBLE-WORD WORK AREA\nSVCBFSIZ DS    H             BUFFER SIZE\nSVCNUMDA DS    XL1           NUMBER OF EXTENTS IN SPOOL\n         DS    XL1\nREADMTTR DS    XL4\n*\n         ORG   JESDSECT+508\n*\nPASSMTTR DS    XL4\n*\n         ORG   *-IOBLEN\nSPOOLIOB DS    XL(IOBLEN)    JCTSPIOT    SPIN IOT ADDRESS\n*\nWORKLEN  EQU   *-JESDSECT\n         END\n/*\n//LKED1   EXEC PGM=HEWLH096,PARM=(XREF,LET,LIST,NCAL,RENT),\n//             COND=(2,LT,ASM),REGION=1024K\n//SYSLIN   DD  DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSLIB   DD  DSN=SYS2.LINKLIB,DISP=SHR\n//SYSLMOD  DD  DISP=SHR,\n//             DSN=SYS1.LPALIB,\n//         UNIT=3380,VOL=SER=MVSTGT\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n     NAME IGC0023G(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JDFUSER": {"ttr": 12291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x02>\\x02>\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 574, "newlines": 574, "modlines": 0, "user": "CBT353"}, "text": "1\n\n\n\n\n\n\n\n\n\n\n\n\n        J E S 2     D I S P L A Y     F A C I L I T Y    (JDF)\n\n\n\n\n\n                       User Reference Guide\n\n\n\n\n\n                         December 22, 1982\n                 Revised:  March 12, 1985\n\n                            Brian Cook\n1\n\n\n\n\n\n\n\n\n\n\n\n\n        J E S 2     D I S P L A Y     F A C I L I T Y    (JDF)\n\n\n\n\n\n                       User Reference Guide\n\n\n\n\n\n                         December 22, 1982\n                 Revised:  March 12, 1985\n\n                            Brian Cook\n1\n\n\n\n -CONTENTS\n\n\n    OVERVIEW......................................1\n\n    Invoking SPF/JDF..............................2\n\n    Active Jobs Display...........................3\n\n    JDF commands..................................3\n\n    Job-level Commands............................4\n\n    DDNAME Display................................5\n\n    DDNAME-level Options .........................6\n\n    Other Job Display Screens.....................7\n\n    Status Display Option.........................7\n\n    SYSLOG Display Option.........................8\n\n    Reprint Processing............................9\n\n    Restrictions ................................11\n\n    Usage Guidlines..............................12\n\n1\n                                                                       PAGE  1\n\n\n -OVERVIEW\n\n\n    JDF is a system that runs under SPF to provide\n    the user with the ability to display the status\n    of all jobs on the JES2 spool, and to display\n    the outputs of his own jobs at the terminal.\n    The jobs may be awaiting execution, executing,\n    awaiting print/transmission or held.\n\n    The purpose of this system is  to  improve  the\n    productivity of the terminal user while cutting\n    system overhead and paper costs.\n\n    User productivity is enhanced because JDF gives\n    a realtime display of jobs executing or waiting\n    to be executed/printed that will avoid the need\n    to ask: \"Where is my job?\", or   \"Why isn't  it\n    running?\". Using JDF you can see what is and is\n    not happening in the system. JDF also gives you\n    the ability to examine condition codes,  system\n    messages, and actual report output while  a job\n    is still running. This can save time, especially\n    for long-running jobs.\n\n    JDF will reduce  system overhead  because  JES2\n    will not have to process the entire job in many\n    cases.  If you can look at a  part of a job and\n    just purge it,  for example a bad compile, then\n    JES2 will have to do much less work than if the\n    job has to be printed or transmitted across the\n    TP lines in its entirety.\n\n\n    The following pages provide a step-by-step guide\n    to using JDF to perform the following:\n\n     1. Checking Job status\n     2. Browsing your Job output\n     3. Printing your Job.\n     4. Purging your Job.\n     5. Selectively copying reports.\n\n\n    Throughout the discussion below, the assumption is\n    made that your normal batch jobs will be submitted\n    with a job-name equal to your userid padded out to 8 bytes\n    with alpha characters. The system is designed to work\n    best if you follow this convention.\n\n           NOTE: You can only access jobs whose jobnames begin\n                 with your user-id, or that you have submitted.\n                 This is a security restriction.\n1\n                                                                       PAGE  2\n\n -INVOKING JDF\n\n\n\n\n    In order to use JDF, you must first LOGON to TSO. You will normally\n    see the ISPF primary option menu, unless you are in FOCUS. From FOCUS,\n    enter TSO ISPF on the command line.\n\n    To invoke JDF, enter L.JDF in the \"OPTION\" field of the ISPF/PDF\n    Primary Option Menu. The first display you will see is the JDF menu:\n\n\n --------      JES2 DISPLAY FACILITY  (JDF)     OPTION MENU---------------------\n\n SELECT OPTION ===>_\n\n    A  DISPLAY ACTIVE - JOBS EXECUTING\n    E  DISPLAY EVERY  - ALL JOBS IN THE SYSTEM (INCLUDING PURGE QUEUE)\n    H  DISPLAY HELD   - JOBS WITH CLASS X SYSOUTS\n    I  DISPLAY INIT   - STATUS OF INITIATORS\n    L  DISPLAY LOG    - RUNNING SYSTEM LOG\n    O  DISPLAY OUTPUT - JOBS AWAITING OUTPUT ON LOCAL PRINTERS\n    R  DISPLAY REMOTE - JOBS AWAITING OUTPUT ON REMOTE QUEUE\n    T  DISPLAY TRANSM - JOBS AWAITING NJE TRANSMISSION\n    Q  DISPLAY QUEUE  - JOBS ON INPUT QUEUES\n    S  STATUS         - ENTER JOB/LVL ===>_\n\n\n PRESS END KEY TO RETURN TO SPF PRIMARY OPTION MENU\n\n\n\n\n    A general explanation of these options is provided by pressing PF 1.\n\n\n\n    NOTE: JDF allows you to see the status of any job or started task.\n          It does NOT allow you to look at the output of any job. You\n          will be denied access to a job unless the jobname begins with\n          your user-id, or you submitted it.\n1\n                                                                       PAGE  3\n\n -ACTIVE JOBS DISPLAY\n\n\n    If, for example, you want to see a list of all jobs executing in the\n    system, enter \"A\" and hit enter. You will see something like:\n\n\n\n       --------------------- JES2 DISPLAY FACILITY (JDF) ---------------------\n       COMMAND ==> RP                                           SCROLL => PAGE\n\n       OPT JOBNUM   JOBNAME  STATUS          CL SYS\n\n           JOB 1667 CICS1TST EXECUTING CLASS C  MVSA\n           JOB  325 LDDZ0100 EXECUTING CLASS 4  MVSA\n           JOB  341 MPSD1800 EXECUTING CLASS 3  MVSA\n           JOB  360 ASQCCASM EXECUTING CLASS X  MVSB\n\n       ******************************* BOTTOM OF DATA ************************\n\n\n    There are 4 jobs executing in the system. The job class is also\n    provided, and the system id (MVSA is the 3083, MVSB is the 3033).\n\n    The PF1 key gives you \"HELP\" information describing what is on the\n    screen, and PF 3 returns you to the JDF Option menu.\n\n\n -JDF COMMANDS\n\n\n    JDF commands are entered on the COMMAND line at the top. Available\n    commands are:\n\n    RP   Repeat--this is the default command and just refreshes the display.\n\n    ST   Status--this switches the display from the current mode to the\n                 status display.\n\n   JOB   Jobs  --this switches the Display Active to include batch jobs\n                 only (this is the default).\n\n   STC   Started tasks--this switches the Display Active to Started tasks.\n\n   TSU   TSO Users--this switches the Display Active to show TSO users.\n\n   D-    Switch display from the current queue. The \"-\" corresponds to\n         the single letter option on the JDF Option Menu. For example,\n         if you are in \"Status\" and want to display the output queues,\n         enter \"DO\", and so on. This is quicker than going back to the\n         JDF Option Menu.\n1\n                                                                    PAGE  4\n\n\n\n -JOB-LEVEL COMMANDS\n\n\n    JDF Job-level commands are always entered in the \"OPT\" column next\n    to the job you wish to operate on. Available commands are:\n\n          S - Select a job for viewing.\n          C - Cancel a job that is executing.\n          P - Purge a job, deleting all outputs.\n          H - Hold a job, so that JES2 will not process it further.\n          A - Activate/release a job from hold.\n        TC_ - Change a job's initiator class.\n        RQA - Re-queue a job's outputs to print in SYSOUT class A.\n        RQn - Re-queue a job's outputs to destination RMTn (class A).\n        PUP - Increase print priority (Restricted command).\n\n\n    NOTE: You can only use Job-level commands on jobs that you submitted,\n          or whose job name begins with your user-id, except for the \"S\"\n          option. You can use \"S\" to give you the DD name display for any\n          job, TSO user, or started task.\n1\n                                                                    PAGE  5\n\n -DDNAME DISPLAY\n\n\n\n    On the \"Display Active\" screen above, there are 4 jobs executing.\n    To look at a job, ASQCCASM for example, while it is executing, TAB\n    to the OPT column and enter \"S\" for select. This will give you the\n    DD name display:\n\n\n   ------------ JDF DDNAME DISPLAY ----------------------------------\n   COMMAND ==>_                                        SCROLL => PAGE\n\n             JOB00360 ASQCCASM\n   OPT  DSID STEPNAME DDNAME      LINES CL FORM FCB   UCS   COP\n        OPR           BPSCAN\n        001           INPUT JCL       9  X STD1 ****  ****    1\n        002           JOB LOG        12  X STD1 ****  ****    1\n        003           JCL            17  X STD1 ****  ****    1\n        004           JOB MSGS      121  X STD1 ****  ****    1\n        005           INT TEXT        0  A      ****  ****    1\n        101  ASM      SYSIN        2439  X STD1 ****  ****    1\n        102  LKED     SYSIN           9  X STD1 ****  ****    1\n        103  ASM      SYSPRINT     7331  X STD1 ****  ****    1\n        104  LKED     SYSPRINT        0  X STD1 ****  ****    1\n\n\n\n    The PF1 key gives you \"HELP\" information describing what is on the\n    screen, and PF 3 returns you to the previous screen.\n\n    The first line of the display gives you the JES job number and name\n    for your reference. OPR gives you a condition code summary for the job.\n\n    JES keeps track of job inputs and outputs by Data Set ID (DSID) numbers:\n\n         DSID 001 is the input JCL exactly as you submitted it from your\n                  TSO session.\n         DSID 002 is the Jes Job Log; this corresponds to the first page\n                  of your batch job's listing.\n         DSID 003 is the execution JCL, including any PROCLIB JCL.\n         DSID 004 is the Job Messages, this has all the allocation\n                  messages, substitution JCL, etc.\n         DSID 005 is the JES Internal Text. This is mainly useful for\n                  the Software Engineering staff for problem determination.\n\n    Notice that the display is in DSID order; the jobsteps and DD names\n    are in the order of creation, which is how the DSID numbers are assigned.\n\n    The remaining lines in the display describe the inputs and outputs.\n    If all the DSID's will not fit on one screen, use PF 8 to scroll\n    down and PF7 to scroll up.\n1\n                                                                   PAGE  6\n\n -DDNAME-LEVEL OPTIONS\n\n\n\n    To select an individual report for viewing, TAB down the \"OPT\" column to\n    the report you want to look at. Valid line selection characters are:\n\n               S - Selects a report for viewing. This is the lowest-\n                   overhead method to view a report. This is NOT the\n                   ISPF/PDF browse, so commands are limited. PF 1 will\n                   provide further details.\n\n               B - Browse a report, copies the dataset to a TSO pack with\n                   a name of \"JOB.OUTLIST\" and invokes the SPF BROWSE function.\n                   You can use PF8 to scroll down and PF7 to scroll up,\n                   and do character-string searches with the \"Find\" command.\n                   This command will fail with an \"E37\" if the report needs\n                   more than 16 cylinders. If that happens, go to the 3.2\n                   screen, delete JOB.OUTLIST and re-allocate it with more\n                   space.\n\n               R - Reprint, discussed below on page 9.\n1\n                                                                  PAGE  7\n -OTHER JOB DISPLAY SCREENS\n\n    The other displays are essentially the same as the \"Display Active\"\n    example shown above in format, except for the \"Display Initiators\"\n    screen, which is restricted.\n\n\n -STATUS DISPLAY SCREEN\n\n\n    The \"S\" or Status display is probably the most useful one, since it\n    allows you to limit the display to your jobs, whether they are on\n    the input, output, or execution queue's. All you have to do is enter\n    the leading characters of the job(s) you want to see.\n\n\n --------      JES2 DISPLAY FACILITY  (JDF)     OPTION MENU---------------------\n\n SELECT OPTION ===>S\n\n    A  DISPLAY ACTIVE - JOBS EXECUTING\n    E  DISPLAY EVERY  - ALL JOBS IN THE SYSTEM (INCLUDING PURGE QUEUE)\n    H  DISPLAY HELD   - JOBS WITH CLASS X SYSOUTS\n    I  DISPLAY INIT   - STATUS OF INITIATORS\n    L  DISPLAY LOG    - RUNNING SYSTEM LOG\n    O  DISPLAY OUTPUT - JOBS AWAITING OUTPUT ON LOCAL PRINTERS\n    R  DISPLAY REMOTE - JOBS AWAITING OUTPUT ON REMOTE QUEUE\n    T  DISPLAY TRANSM - JOBS AWAITING NJE TRANSMISSION\n    Q  DISPLAY QUEUE  - JOBS ON INPUT QUEUES\n    S  STATUS         - ENTER JOB/LVL ===>SMD\n\n PRESS END KEY TO RETURN TO SPF PRIMARY OPTION MENU\n\n\n    On the line where it says \"ENTER JOB/LVL\" above, I have entered the\n    3 letters \"SMD\". I have also entered an \"S\" as the option.\n\n    When I hit ENTER, I will see something like this:\n\n\n  ------------------- JES2 DISPLAY FACILITY (JDF) -----------------------------\n  COMMAND ==> REPEAT                                             SCROLL => PAGE\n\n  OPT JOBNUM   JOBNAME  STATUS\n      JOB  360 SMDD03BC EXECUTING CLASS B  MVSA\n      JOB  764 SMDD0200 ON OUTPUT QUEUE, NO READY OUTPUT\n      JOB  862 SMDD0300 ON OUTPUT QUEUE,        107 LINES\n      JOB  862 SMDD03BC ON OUTPUT QUEUE,        107 LINES\n      JOB  922 SMDD0400 ON INPUT  CLASS 3                     HOLD\n  ******************************* BOTTOM OF DATA ******************************\n\n\n    This is the quick way to zero in on the jobs you want to look at.\n1\n                                                                  PAGE  8\n\n -SYSLOG DISPLAY SCREEN\n\n\n    The \"L\" or Syslog display shows you any active system console logs.\n    They are shown on the screen just as though they were normal started\n    tasks. The system-id field indicates whether the Syslog is for the\n    MVSA or MVSB systems. TAB down to the one you want to view and enter\n    \"S\" in the \"OPT\" column.\n\n    The DD name display you will see is not the same as for batch jobs,\n    as shown above, since Syslog is not really a job. Instead, you will\n    see a set of \"spin\" datasets, one of which will be high-lighted.\n\n    The high-lighted entry is the currently-active Syslog dataset. To\n    view it, TAB down the \"OPT\" column and enter an \"S\" or \"B\" next to\n    it. Do NOT attempt to view any other entries. The results are not\n    predictable. Your user session may abend, or you may just see junk.\n\n1\n                                                                       PAGE  9\n\n\n\n -REPRINT PROCESSING\n\n\n\n    Reprint is an option that is entered on the DDNAME display to copy\n    an individual report. The advantage of this is that you can route\n    a copy to a remote user, print one copy of a multi-copy report, etc.\n\n    In order to use this, you have to get the JDF DDNAME display. From\n    any Job-level display screen, such as \"A\", Display Active, or \"S\"\n    for Status, TAB down to the job you want, type \"S\" and ENTER. You\n    will then see the DDNAME display.\n\n    For example:\n\n\n\n   ------------ JDF DDNAME DISPLAY ----------------------------------\n   COMMAND ==>_                                        SCROLL => PAGE\n\n             JOB00360 ASQCCASM\n   OPT  DSID STEPNAME DDNAME      LINES  CLFORM FCB   UCS   COP\n        OPR           BPSCAN\n        001           INPUT JCL       9  X STD1 ****  ****    1\n        002           JOB LOG        12  X STD1 ****  ****    1\n        003           JCL            17  X STD1 ****  ****    1\n        004           JOB MSGS      121  X STD1 ****  ****    1\n        005           INT TEXT        0  A      ****  ****    1\n        101  ASM      SYSIN        2439  X STD1 ****  ****    1\n        102  LKED     SYSIN           9  X STD1 ****  ****    1\n        103  ASM      SYSPRINT     7331  X STD1 ****  ****    1\n        104  LKED     SYSPRINT        0  X STD1 ****  ****    1\n\n\n\n\n\n    TAB down to the left of the report you want to make a copy of, type\n    \"R\" in the \"OPT\" column, and hit ENTER. JDF will then re-display the\n    screen. You can then REPRINT additional reports if you wish by going\n    through the same steps for each one. When you have finished selecting\n    reports, hit PF3; JDF will display a job-stream that will do the\n    actual reprinting. You can make any changes you want in the JCL,\n    just by typing over the existing information. When you are satisfied\n    that the job will do what you want, you MUST type \"SUB\" in the command\n    line at the top; JDF will NOT submit the job for you. After submitting\n    the job, hit PF3 to return to the Job-level display.\n1\n                                                                       PAGE 10\n\n\n\n\n\n    One common change you can make in the JCL of this job is in the\n    \"/*ROUTE\" card; if you want to route the report to a remote user, you\n    just change it to: /*ROUTE PRINT remote-id. (See JCL manual for\n    details on coding the ROUTE card.)\n\n    The REPRINT option has the additional ability to specify the\n    SYSOUT class you want the report printed in or the remote\n    destination to which the report is to be sent:\n\n      RA   sends the output to print class \"A\" to print on the 3800;\n           you could use this to print a single copy of a multi-copy\n           report, for example. (This is the default.)\n\n      RS   sends the output to the 3203-5 Special Forms printer.\n\n      RW   sends the output to PANSPOOL. This might be useful if you\n           wanted to \"archive\" an individual report for backup.\n\n      Rn   sends the output to remote number \"n\".\n1\n                                                                       PAGE 11\n\n\n\n -RESTRICTIONS\n\n\n\n    There are a number of restrictions in the use of JDF. Among these\n    are:\n\n      1. You cannot view all the reports produced by a job unless the\n         Job-name begins with your userid. During the CMS-to-TSO\n         conversion period, you will also be able to view jobs that\n         you have submitted from your CMS userid, regardless of Jobname.\n\n         You should begin using your userid as the leading characters\n         of your jobs.\n\n      2. You can see the status of any production or test jobs, started\n         tasks, or TSO sessions. You can also look at condition codes,\n         allocation messages, converted JCL, etc. Those items may be\n         useful for application problem determination.\n\n         You can NOT see the inputs and outputs of production jobs.\n\n      3. Job-level commands are restricted in the same way as point 1,\n         above. You can only cancel or purge your own jobs. In addition,\n         the command that increases a job's print priority is restricted\n         to Operations.\n\n1\n                                                                       PAGE 12\n\n\n\n -USAGE GUIDLINES\n\n\n\n\n\n   1. Probably the most effective way to use JDF is to submit your jobs so\n      that the output is held in class X. For jobs submitted from TSO, do\n      the following:\n\n               1.  Code your JOB card: //XXXXXASM  JOB  (acct),'name',\n                                       //  MSGCLASS=X\n                   Where \"XXXXX\" is your user-id. MSGCLASS=X puts your\n                   job's output in held, or \"NRDY\" status.\n\n               2.  Make all your SYSOUT's \"SYSOUT=X\", or \"SYSOUT=*\".\n\n\n   2. Make the leading characters of your test jobs match your user-id.\n\n   3. Before you re-submit a job, purge the previous one, or change the\n      jobname. This will help you to keep track of which job you want\n      to work with.\n\n   4. When you are in one type of Job display, you can switch to any\n      other job-level display by typing over the \"RP\" in the command\n      area. For example, if you are in \"ST\" (STATUS) mode, you can\n      display the output queue by typing \"DO\" on the command line. You\n      do not have to return to the JDF Option menu to switch from one\n      category of display to another.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JDFXA": {"ttr": 12547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x10\\xe5\\x10\\xe5\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 4325, "newlines": 4325, "modlines": 0, "user": "CBT353"}, "text": "         TITLE 'JDF - MACROS'\n         PRINT OFF\n         COPY  SPFMACS\n         COPY  JDFMACS\n         PRINT ON\n         PRINT NOGEN\n         TITLE 'JDF - CHANGE LOG'\nJDF134   CSECT                DISPLAY STATUS OF JES2 JOBS\nJDF134   AMODE 31\nJDF134   RMODE ANY\n***********************************************************************\n*                                                                     *\n* CHANGE LOG                                                          *\n*                                                                     *\n*  9/30/86 BRIAN COOK    JDF002 MSG WHEN JOBNAME MATCHES, BUT         *\n*                        DIFFERENT USER-ID SUBMITTED JOB.             *\n*                                                                     *\n*  9/29/86 BRIAN COOK    ADDED LINK TO \"QSAMPUT\" FOR QSAM I/O.        *\n*                                                                     *\n*  9/18/86 BRIAN COOK    SUPPORT FOR TEST JDF, KEYED OFF CVTUSER.     *\n*                                                                     *\n*  9/17/86 BRIAN COOK    SWITCHED JDFCHECK TO USE SVC 247, ACFCHK.    *\n*                                                                     *\n*  9/04/86 BRIAN COOK    UPDATED JDFCHECK FOR 6670 CONFIDENTIAL       *\n*                        OUTPUTS.                                     *\n*                                                                     *\n*  8/29/86 BRIAN COOK    CHANGED TO RE-ENTRANT                        *\n*                                                                     *\n*  8/25/86 BRIAN COOK    REPLACED \"JDFBRO\" WITH \"SMBROWSE\", A GENERAL *\n*                        PURPOSE SPF MEMORY BROWSE UTILITY.           *\n*                                                                     *\n*  8/20/86 BRIAN COOK    ADDED \"JDFCHECK\" MODULE FOR SECURITY CHECKS  *\n*                        FOR VIEWING JOB OUTPUT.                      *\n*                                                                     *\n*  8/20/86 BRIAN COOK    JQE LOOK-UP FOR \"SHOWJOB\" WILL USE END OF    *\n*                        JOB-ENTRIES FLAG, X'FF', INSTEAD OF LOOP     *\n*                        CONTROL BASED ON \"$MAXJOBS\" IN JES PARMS.    *\n*                                                                     *\n*  8/13/86 MARK SPAIN    CHANGED JOB.OUTLIST NAME TO @TEMP.OUTLIST    *\n*                                                                     *\n*  5/09/86 BRIAN COOK    ROUTE JOBCLASS \"P\" TO BPSCAN                 *\n*                                                                     *\n*  4/10/86 BRIAN COOK    ON \"DO\" REQUEST, DON'T SHOW CLASS Y EITHER.  *\n*                                                                     *\n*  4/01/86 BRIAN COOK    ON \"DO\" REQUEST, DON'T SHOW CLASS X OR W;    *\n*                        MUST USE \"DOX\" OR \"DOW\".                     *\n*                                                                     *\n*  2/13/86 BRIAN COOK    INCREASED \"DSNLINE\" FROM 133 BYTES TO 266    *\n*                                                                     *\n*  1/31/86 BRIAN COOK    ALLOW BPSCAN TO LOOK AT \"ASM\" JOBS           *\n*                                                                     *\n*  1/30/86 BRIAN COOK    ADDED JCTODTON TO JDFDDTAB                   *\n*                                                                     *\n*  1/15/86 BRIAN COOK    ADDED \"CONTROL\" SERVICE BEFORE BROWSE        *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n           TITLE 'JDF - JES2 DISPLAY FACILITY '\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                   JES2 DISPLAY FACILITY (JDF)                       *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: DISPLAY STATUS OF JES2 JOBS, LOGONS, & STARTED TASKS.     *\n*                                                                     *\n*                                                                     *\n* FUNCTION: JDF IS AN ISPF/PDF APPLICATION.                           *\n*                                                                     *\n*           JDF ACCESSES CHECKPOINT INFORMATION VIA CROSS-MEMORY      *\n*           SERVICES IN A USER SVC. THIS IS THE UAL JES2 SVC, HEAVILY *\n*           MODIFIED FOR SP 1.3.0 AND 1.3.4.                          *\n*                                                                     *\n*           (THE MEMBER NAME FOR THE SVC IS \"JDFSVC\".)                *\n*                                                                     *\n*           THE JES2 JOB QUEUE ELEMENTS (JQES) AND JOB OUTPUT ELEMENTS*\n*           ARE USED TO DISPLAY INFORMATION ON JOBS ON INPUT, WAIT-   *\n*           ING FOR EXECUTION, OR EXECUTING.                          *\n*                                                                     *\n*           SUPPORT IS PROVIDED TO BROWSE SPOOL DATASETS, AS WELL AS  *\n*           COPYING THEM TO A SEQUENTIAL FILE. ALL SPOOL ACCESS IS    *\n*           VIA MODIFIED UAL JES2 INTERFACE SVC:                      *\n*                                                                     *\nJESSVC   EQU   237                                                    *\n*                                                                     *\n*           THE MAXIMUM NUMBER OF REMOTES IS DEFINED BELOW. IF THE    *\n*           NUMBER IS MORE THAN 33, THE \"RMTABLE\" ENTRIES WILL HAVE   *\n*           TO BE INCREASED. THE DESCRIPTIONS IN RMTABLE NEED TO BE   *\n*           MAINTAINED.                                               *\n*                                                                     *\nRMTMAX  EQU   40\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                                                                     *\n* INPUT: R1 -> STANDARD PARAMETER LIST:                               *\n*        R1 ==> (PARM ADDR)                                           *\n*      PARM ==> H'LENGTH',PARMDATA                                    *\n*                                                                     *\n* EXTERNAL REFERENCE: JDFSRB                                          *\n*                                                                     *\n*                                                                     *\n* MACROS USED: SAVE                                                   *\n*              ABEND                                                  *\n*              RETURN                                                 *\n*              STAX                                                   *\n*              ENQ                                                    *\n*              DEQ                                                    *\n*              TPUT                                                   *\n*              FREEMAIN                                               *\n*              CVT                                                    *\n*              CVTUSERS (USER)                                        *\n*              TCBWORK  (USER)                                        *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES: REENTRANT,RESIDENT                                      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         TITLE 'JDF - ENTRY POINT LOGIC'\n         PRINT NOGEN\n         USING *,12,11,10,9\n*\n         SAVE  (14,12),,JDF_01/01/81_BRIAN_COOK_&SYSTIME_&SYSDATE\n*\n         LR    R12,R15        SET BASE 1\n         LA    R1,4095\n         LA    R11,1(R1,R12)  SET BASE 2\n         LA    R10,1(R1,R11)  SET BASE 3\n         LA    R9,1(R1,R10)   SET BASE 4\n*\n*\n*  ADDED SUPPORT FOR TEST JDF\n*\n*\n         USING PSA,0\n         L     R15,FLCCVT\n         USING CVT,15\n         L     R15,CVTUSER\n         DROP  15\n         USING CVTUSERS,15\n         CLC   CVTJDFID(4),=C'TJDF'   TEST JDF INSTALLED\n         BNE   NOTSTJDF               NO\n         ICM   R15,15,CVTJDFAD\n         DROP  15\n         LTR   R15,R15                TEST JDF INSTALLED\n         BZ    NOTSTJDF               NO\n         CR    R12,R15                AM I THE TEST JDF\n         BE    NOTSTJDF               YES, CONTINUE\n*\n         LM    R0,R12,20(R13)         RESTORE REGS\n         L     R14,12(,R13)           USE OLD RETURN\n         BR    R15                    INVOKE TEST JDF\n*\nNOTSTJDF DS    0H\n*\n*\n         L     R2,GETMLENG\n         GETMAIN R,LV=(2),LOC=(BELOW)\n*\n         ST    R1,8(R13)      LINK SAVE AREAS\n         ST    R13,4(R1)      SAVE THE CALLER'S R13\n         LR    R13,R1         SET SAVE AREA\n         USING WORKAREA,13\n*\n         USING PSA,0\n*\n         B     SHOWBGIN\n*\nGETMLENG DC    F'262144'      GETMAIN AREA\n*\n         TITLE 'JDF - MAINLINE PROCESSING'\nSHOWBGIN DS    0H             DISPLAY STATUS OF JES2 JOBS\n*\n         MVI   OPEN1,X'80'\n         MVC   COMMAND(2),0(R5)    SAVE THE COMMAND ENTERED\n         MVI   GOTANYST,C'0'  SET TO \"NO STATUS MATCHES\"\n         MVI   ATABFL,C'0'    NO ACTIVE TABLE\n         MVI   DTABFL,C'0'    NO DD NAME TABLE\n         MVI   JOBLINE,C' '   CLEAR TAB ENTRY AREA\n         MVC   JOBLINE+1(79),JOBLINE\n         XC    ISPARMS(40),ISPARMS\n*\nSHOWINIT DS    0H             DISPLAY STATUS OF JES2 JOBS\n         BAL   R7,DOINIT      BUILD THE JOB NAME PARAMETER LIST\n*\n* SET INITIAL OPTION\n*\n         MVC   COMMAND(2),STREQ           SET STATUS REQUEST\n         MVI   JDFZ,C'S'                 UPPER-CASE IT\n*\nSHOWAGIN DS    0H\n*\n         VDEFINE JDFLST,44\n*\nSHOWOPT2 DS    0H\n*\n         VGET  JDFLST\n*\nSHOWOPT3 DS    0H\n*\n         DISPLAY JDFOPT,ENDKEY=DELNDONE\n*\n         C     R15,FZEROS         IF ENTER KEY PRESSED\n         BNE   SHOWOPT2\n*\n         OI    JDFZ,C' '                 UPPER-CASE IT\n         CLI   JDFZ,C'A'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'E'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'H'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'I'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'L'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'O'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'R'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'T'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'W'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'Q'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n         CLI   JDFZ,C'S'                  VALID OPTION\n         BE    OPTIONOK                   GO PICK UP LEVEL\n*\n         SETMSG JDF007\n         B     SHOWOPT3\n*\nOPTIONOK DS    0H\n*\n         CLC   JDFLST(44),SPACES\n         BE    SHOWOPT2\n*\n         VPUT  JDFLST\n         VDELETE JDFLST\n*\n         LA    R15,JDFLST\n         SR    R14,R14\n*\n         CLI   0(R15),C' '\n         BE    *+16\n         LA    R14,1(,R14)\n         LA    R15,1(,R15)\n         B     *-16\n         STC   R14,JDFLSTL\n*\n** FOLLOWING FIELD INITIALIZATIONS PERFORMED AS PART OF THE\n*  CONVERSION TO RE-ENTRANCY\n*\n         MVI   BPSFORM,C' '\n         MVC   BPSFORM+1(BPSFORML-1),BPSFORM\n         MVC   BPSFORM(27),=CL27'  ***** BPSCAN DATA FOR'\n         MVC   JOBDDNAM+8(5),=C'.DSID'\n         MVC   BRODSID(5),=C'-----'\n         MVC   CMDISMF(4),=X'00220000'\n         MVC   RQRMT(8),=CL8'N1R'\n         MVC   RURMT(8),=CL8'U'\n         MVC   DATYPE(3),=C'JOB'\n*\n*\n         CLI   JDFZ,C'X'                  END\n         BE    SHOWDONE                   YUP\n*\n         CLI   JDFZ,C'I'                  DISPLAY INITIATORS\n         BNE   TSTINOPT                   NO, SKIP THIS\n         LINK EP=DIF\n         B     SHOWAGIN                   LOOP\n*\nDELNDONE DS    0H\n*\n         VDELETE JDFLST\n         B     SHOWDONE                   GO PICK UP LEVEL\n*\nTSTINOPT DS    0H\n*\n         CLI   JDFZ,C'S'                  STATUS\n         BNE   JDFINOPT                   NO\n         MVC   COMMAND(2),STREQ           SET STATUS REQUEST\n         B     JDFINLVL                   GO PICK UP LEVEL\n*\nJDFINOPT DS    0H\n         MVI   COMMAND,C'D'               SET \"D\" REQUEST\n         MVC   COMMAND+1(1),JDFZ          SET DISPLAY TYPE\n*\nJDFINLVL DS    0H\n         OC    LVL(8),SPACES             UPPER-CASE IT\n         MVI   LVL+7,C' '                MAKE SURE THERE IS A BLANK\n         SR    R15,15\n         LA    R14,LVL\n*\n         CLI   0(R14),C' '\n         BE    *+16\n         LA    R14,1(,R14)\n         LA    R15,1(,R15)\n         B     *-16\n*\n         BCTR  R15,0           SUBTRACT 1\n         STC   R15,USRJLENG\n*\nSHOWAGN2 DS    0H\n         BAL   R7,GETJQES     READ CKPT FOR JQE'S AND JOE'S\n*\n         BAL   R7,OUTJQES     FILL IN THE SPF TABLE\n*\n         BAL   R7,SHOWISP     DISPLAY THE SPF TABLE\n*\nSHOWDONE DS    0H\n*\n         TBCREATE DATABLE1,TSEL,JOBLINE\n         TBEND    DATABLE1\n*\n         TBCREATE DDTABLE1,DSEL,DDNLINE\n         TBEND    DDTABLE1\n*\n         TBCREATE RMTABLE1,RMT1,RMT2\n         TBEND    RMTABLE1\n*\n         MVI   ATABFL,C'0'        NO ACTIVE TABLE\n*\nJUSTGOUT DS    0H\n         TM    OUTLIST+48,X'10'   OPEN OK?\n         BZ    JDFRTRN             NOPE\n*\n** LET \"QSAMPUT\" DO THE CLOSE\n*\n         LA    R15,OUTLIST\n         ST    R15,ISPARMS\n         MVC   ISPARMS+4(4),=X'FFFFFFFF'\n         LA    R1,ISPARMS\n         L     R15,QPUTEPA\n         BALR  R14,R15\n*\nJDFRTRN  DS    0H\n*\n         DELETE EP=QSAMPUT\n*\n         L     R3,4(,R13)     RESTORE THE CALLER'S R13\n         L     R2,GETMLENG\n         FREEMAIN R,LV=(2),A=(13)\n*\n         LR    R13,R3\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n*\n         TITLE 'JDF - INITIALIZATION'\nDOINIT   DS    0H\n*\n         LOAD  EP=QSAMPUT\n         ST    R0,QPUTEPA\n*\n         L     R1,DCB2ADDR\n         MVC   REPRINT(DCB2LEN),0(R1)        REPRINT DCB\n         L     R1,DCB3ADDR\n         MVC   OUTLIST(DCB3LEN),0(R1)        OUTLIST DCB\n*\n         XC    READMTTR(4),READMTTR\n         XC    READAREA(4),READAREA\n         XC    DRNUM(2),DRNUM\n         MVI   DQCLASS,C' '\n         MVI   DOCLASS,C' '\n*\n         MVI   JDFZ,C' '\n         MVC   LVL(8),SPACES\n         MVI   JOBLINE,C' '\n         MVC   JOBLINE+1(74),JOBLINE\n         MVC   TSEL(3),SPACES\n         MVC   JCMD(40),SPACES\n         MVC   DCMD(40),SPACES\n         MVI   DDNLINE,C' '\n         MVC   DDNLINE+1(75),DDNLINE\n         MVC   DSEL(3),SPACES\n*\n         VDEFINE JDFZ,1\n         VDEFINE LVL,8\n         VDEFINE JOBLINE,75\n         VDEFINE JOBID,30\n         VDEFINE TSEL,3\n         VDEFINE JCMD,40\n         VDEFINE DCMD,40\n         VDEFINE DDNLINE,76\n         VDEFINE DSEL,3\n*\n        XC    HR001(HRLEN),HR001   CLEAR OUT THE REMOTE COUNTERS\n*\n         VDEFINE RMT1,34\n         VDEFINE RMT2,34\n*\n         MVC   UIDLEN(4),L8\n         CALL  ISPLINK,                                                X\n               (VCOPY,ZUSER,UIDLEN,USERID,SPFMOVE),                    X\n               VL,MF=(E,ISPARMS)\n*\n         LTR   R15,15          IF RETURN CODE IS ZERO,\n         BZ    USERIDOK        OK\n*\nUSERIDOK DS    0H\n         MVC   PFXLEN(4),L8\n         CALL  ISPLINK,                                                X\n               (VCOPY,ZPREFIX,PFXLEN,PREFIX,SPFMOVE),                  X\n               VL,MF=(E,ISPARMS)\n*\n         LTR   R15,15          IF RETURN CODE IS ZERO,\n         BZ    SMBDEFS         OK\n*\nABEND12  ABEND 12,DUMP,STEP\n*\nSMBDEFS  DS    0H\n*\n         VDEFINE SMBSTART,4,FMT=FIXED\n         VDEFINE SMBNUMB,4,FMT=FIXED\n         VDEFINE SMBLRECL,4,FMT=FIXED\n         VDEFINE SMBTITLE,49\n*\n         MVC   LVL(8),USERID          DEFAULT\n         MVC   MSGJNAME(8),LVL        SAVE FOR MESSAGE\n*\n         LA    R2,4095\n         LA    R1,1(R2,R13)  BUMP PAST 4K WORKAREA\n         ST    R1,JJSPARM\n         OI    JJSPARM,X'80'\n         A     R1,L128K       BUMP 128 K\n*\n         ST    R1,JCTPTR\n         A     R1,L12K         BUMP 12 K\n*\n         ST    R1,IOTPTR\n         A     R1,L40K         BUMP 40 K\n*\n         LA    R1,88(,R1)\n         ST    R1,IXTPTR\n*\n         LA    R1,SSOBAREA\n         ST    R1,SSOBPTR\n         OI    SSOBPTR,X'80'\n*\n         BR    R7             RETURN TO OUR CALLER\n*\nL128K    DC    F'131072'\nL24K     DC    F'24576'\nL12K     DC    F'12288'\nL40K     DC    F'40960'\n*\n         TITLE 'JDF - READ JQE S  AND JOE S'\n*\nGETJQES  DS    0H\n*\n*\n         STAX  DEFER=YES\n*\n         L     R1,JJSPARM\n         USING JJSDSECT,1\n*\n         LA    R1,JJSPARM\n         LA    R15,12\n         SVC   JESSVC\n*\n*        LA    R15,8\n*        SVC   236\n*\n         STAX  DEFER=NO\n*\n         BR    R7\n         TITLE 'JDF - BUILD JQE DISPLAY'\nOUTJQES  DS    0H\n         L     R1,JJSPARM\n         USING JJSDSECT,1\n         LA    R6,JJSLINE1  POINT TO FIRST JOB LINE\n         USING JOBDSECT,6\n         LA    R6,JOBSIZE(,R6)    SKIP FIRST ONE\n*\n         ST    R7,JQESHOLD SAVE THE RETURN ADDRESS\n*\n         MVC   TSEL(3),SPACES     SET SELECTION CODE TO SPACES\n         MVI   GOTANYST,C'0'      DID I FIND ANY ENTRIES?\n*\n         TBCREATE DATABLE1,TSEL,JOBLINE\n*        TBVCLEAR DATABLE1\n*\n         MVI   ATABFL,C'1'        AN ACTIVE TABLE\n*\n         XC    BPSCANJO(8),BPSCANJO   CLEAR THE BPSCAN JOBNAME TABLE\n*\nCHECKJQE DS    0H\n*\n         CLC   COMMAND(2),DEREQ    DE REQUEST\n         BE    CHECKJQ2            YES, PRINT IT\n         CLC   COMMAND(2),STREQ    ST REQUEST\n         BE    CHECKJQ2            YES, PRINT IT\n*\n         CLC   JOBJNAME(5),=C'INIT '    INITIATOR\n         BE    NEXTJQE        GET ANOTHER JQE\n*\n         CLC   JOBJNAME(8),=C'$MASCOMM' MULTI-ACCESS SPOOL COMM\n         BE    NEXTJQE        GET ANOTHER JQE\n*\nCHECKJQ2 DS    0H\n         CLC   COMMAND(2),=C'QS'   REMOTE QUEUE SUMMARY\n         BE    CHECKRSM            YES, SET FLAGS AND SCAN WORK JOES\n*\n         BAL   R7,INITMSG     INITIALIZE THE OUTPUT MESSAGE\n*\n         MVC   MSGSREMT(8),JOBWTRID   INDICATE WTR\n*\n         CLI   MSGJOB#+4,C' ' IF JOB NUMBER IS ZEROS\n         BE    JQEDONE        ALL DONE\n         CLI   JOBTYPE,$PURGE JOB HAS BEEN PURGED\n         BE    JQEPURGE       GO PRINT IT\n         CLI   JOBTYPE,X'60'  ACTIVE TSO SESSION?\n         BE    JQEXEQ         YES\n         CLI   JOBTYPE,X'50'  ACTIVE STARTED TASK?\n         BE    JQEXEQ         YES\n         TM    JOBFLAGS,QUEBUSY   JOB EXECUTING?\n         BZ    JQEQINP        NO, SEE IF IT IS IN INPUT\n         B     JQEXEQ         YES\nJQEQINP  DS    0H\n         CLI   JOBTYPE,X'40'  JOB AWAITING EXECUTION?\n         BE    JQEINPUT       YES\n         CLI   JOBTYPE,X'41'  JOB AWAITING EXECUTION?\n         BE    JQEINPUT       YES\n         CLI   JOBTYPE,X'43'  JOB AWAITING EXECUTION?\n         BE    JQEINPUT       YES\n         TM    JOBTYPE,$SETUP JOB AWAITING EXECUTION?\n         BO    JQEINPUT       YES\n         CLI   JOBTYPE,$XMIT  JOB ON TRANSMISSION QUEUE\n         BE    JQEXMIT        YES\n         TM    JOBTYPE,$XMIT  JOB ON INPUT\n         BO    JQEINPUT       YES\n         TM    JOBTYPE,$RECEIVE JOB ON SYSOUT RECEIVER?\n         BO    JQEINPUT       YES\n         TM    JOBTYPE,$DUMPQ JOB ON SPOOL OFFLOAD DUMP QUEUE?\n         BO    JQEDUMP        YES\n         CLI   JOBTYPE,$OUTPUT JOB ON OUTPUT QUEUE?\n         BE    JQEOUTP        YES\n         TM    JOBTYPE,$OUTPUT JOB ON OUTPUT QUEUE?\n         BO    JQEINPUT       YES\n         TM    JOBTYPE,$HARDCPY JOB ON PRINTER?\n         BO    JQEOUTP        YES\n         B     NEXTJQE        GET ANOTHER JQE\nJQEXEQ   DS    0H\n*\n         CLI   JOBFLAG3,QUETSU  TSO USER ?\n         BE    LOGDUSER       YES => SET THE MSG\n         CLI   JOBFLAG3,QUESTC  STARTED TASK?\n         BNE   EXECJOB         NO => MUST BE BATCH JOB\n         MVC   MSGSTYPE(L'ACTIVE),ACTIVE MUST BE A STARTED TASK\n         B     JQEOUTST                SEE IF THERE IS ANY OUTPUT\nLOGDUSER MVC   MSGSTYPE(L'LOGGEDON),LOGGEDON TSUSER\n         B     JQEOUTST                SEE IF THERE IS ANY OUTPUT\nEXECJOB  MVC   MSGSTYPE(L'EXECUTNG),EXECUTNG EXECUTING JOB\n         MVC   MSGQTYPE,JOBJCLAS SET THE JOB CLASS\n         OI    MSGQTYPE,HIGHBIT MAKE THE JOB CLASS PRINTABLE\n         B     JQEOUTST                SEE IF THERE IS ANY OUTPUT\n*\nJQEINPUT DS    0H\n*\n         MVC   MSGSTYPE(L'INPQUE),INPQUE   ON INPUT QUEUE\n         MVC   MSGQTYPE,JOBJCLAS SET THE JOB CLASS\n         OI    MSGQTYPE,HIGHBIT MAKE THE JOB CLASS PRINTABLE\n         B     MSGTEST        GO PRINT THE MESSAGE\nJQEXMIT  DS    0H\n*\n         MVC   MSGSTYPE(L'XMTQUE),XMTQUE   ON INPUT QUEUE\n         MVC   MSGQTYPE,JOBJCLAS SET THE JOB CLASS\n         OI    MSGQTYPE,HIGHBIT MAKE THE JOB CLASS PRINTABLE\n         SR    R15,R15\n         ICM   R15,3,JOBXEQND\n         CVD   R15,DOUBLEWD     NODE NUMBER FOR PRINTED OUTPUT\n         OI    DOUBLEWD+7,X'0F' MAKE PRINTABLE\n         MVI   MSGSNODE,C'N'\n         UNPK  MSGSNODE+1(1),DOUBLEWD+7(1)\n         B     MSGTEST        GO PRINT THE MESSAGE\n*\nJQEPURGE DS    0H\n*\n         MVC   MSGSTYPE(L'PURQUE),PURQUE   ON PURGE QUEUE\n         B     MSGTEST        GO PRINT THE MESSAGE\n*\nJQERECV  DS    0H\n*\n         MVC   MSGSTYPE(L'SYSREC),SYSREC   ON SYSOUT RECEIVER\n         B     MSGTEST        GO PRINT THE MESSAGE\n*\nJQEDUMP  DS    0H\n*\n         MVC   MSGSTYPE(L'DMPQUE),DMPQUE   ON $DUMP QUEUE\n         B     MSGTEST        GO PRINT THE MESSAGE\n*\nJQEOUTP  DS    0H\n         MVC   MSGSTYPE(L'OUTQUE),OUTQUE   ON OUTPUTQUEUE\n*\nJQEOUTST DS    0H\n         TM    JOBFLAGS,X'E0'     IS THE JOB HELD\n         BZ    JQEJOENH           NO. CONTINUE CHECKING\n         MVC   MSGSPCST(4),HOLD      NO READY OUTPUT\n         CLC   JOBREMOT,FZEROS REMOTE QUEUE?\n         BNE   RMTDEV          YES => OUTPUT IT\n         B     JQEOUTLP\nJQEJOENH DS    0H\n         TM    JOBDEVID,X'0F'     IS THIS AN XWTR\n         BNO   NOTXWTR            NO. CONTINUE CHECKING\n         MVC   MSGSPCST(4),=C'XWTR'  NO READY OUTPUT\n         B     JQEOUTLP\nNOTXWTR  DS    0H\n         CLC   JOBREMOT,FZEROS REMOTE DEVICE?\n         BNE   RMTDEV          YES => OUTPUT IT\nNOTXWTR2 DS    0H\n         SR    R1,R1            FOR THE INSERT CHARACTER\n         IC    R1,JOBDEVID      DEVICE TYPE\n         SRL   R1,4             RIGHT JUSTIFIED\n         MH    R1,DEVTYPEL      TYPE * LENGTH OF A DEVICE ENTRY\n         LA    R1,DEVTABLE(R1)   A(DEVICE TYPE)\n         CLC   DEVTABLE+1(7),1(R1)      DUMMY ENTRY?\n         BE    JQEOUTLP       GO EXIT\n         MVC   MSGSREMT(7),1(R1)        PUT IN THE DEVICE TYPE\n         CLI   JOBDEVID,0        INTERNAL READER?\n         BE    JQEOUTLP          YES => GIVE THE USER THE INFO\n         SR    R15,R15           FOR THE INSERT CHARACTER\n         IC    R15,JOBDEVID+2    DEVICE NUMBER\n         CVD   R15,DOUBLEWD      IN PACKED DECIMAL\n         IC    R15,0(R1)         OFFSET TO WHERE THE DEV # GOES\n         LA    R15,MSGSREMT(R15) A(WHERE THE DEV # GOES)\n         MVC   1(3,R15),THREEPT  SET UP THE EDIT OF 3 DIGITS\n         EDMK  0(4,R15),DOUBLEWD+6 DEV # IN EBCDIC\n         MVC   0(4,R15),0(R1)    ADJUST FOR BLANKS\n*\n*\n         B     JQEOUTLP       GO EXIT\n*\nRMTDEV   DS    0H\n*\n         SR    R0,R0          NOT REALLY NEEDED NOW\n         ICM   R0,3,JOBREMOT    REMOTE NUMBER\n         CVD   R0,DOUBLEWD    IN PACKED DECIMAL\n         MVC   MSGSREMT(7),SPACES\n*\n         MVI   MSGSREMT,C'R'    INDICATE A REMOTE DEVICE\n         CLC   JOBRNODE,FZEROS  IS THIS A LOCAL PRINTER?\n         BNE   *+8              NO\n         MVI   MSGSREMT,C'U'    INDICATE A LOCAL PRINTER\n*\n         MVC   MSGSREMT+2(L'THREEPT),THREEPT SET UP THE EDIT MASK\n         EDMK  MSGSREMT+1(L'THREEPT),DOUBLEWD+6 CONVERT TO EBCDIC\n         MVC   MSGSREMT+1(L'THREEPT),0(R1) ADJUST FOR BLANKS\n         LA    R1,MSGSREMT+1    A(SPOT JUST BEFORE POSSIBLE SEP)\nFINDPT   LA    R1,1(R1)       A(NEXT BYTE)\n         CLI   0(R1),C'.'     FOUND THE SEPARATOR?\n         BNE   FINDPT         NO => KEEP LOOKING\n         SR    R15,R15        FOR THE INSERT CHARACTER\n         IC    R15,JOBDEVID     DEVICE TYPE INDICATOR\n         SRL   R15,3          RIGHT JUSTIFIED\n         LA    R15,RMTDEVS-HIGHBIT/8(R15) A(DEVICE TYPE)\n         MVC   1(2,R1),0(R15) PUT IN THE DEVICE TYPE\n         MVC   3(1,R1),JOBDEVID     THE DEVICE NUMBER\n         OI    3(R1),C'0'     MAKE THE DEVICE NUMBER PRINTABLE\n         CLC   0(4,R1),=C'.NT0'\n         BNE   JQEOUTLP       GO EXIT\n         MVC   0(4,R1),=C'    '\n         B     JQEOUTLP       GO EXIT\n         EJECT\nJQEOUTLP DS    0H\n         CLC   MSGSREMT(2),=C'U3'  3820 PSF/FSS PRINTER?\n         BNE   JQEOUTL2            NO, SKIP THIS\n*\n         CLC   MSGSREMT+2(3),SPACES ACTIVE\n         BE    JQEOUTL2            NO, SKIP THIS\n*\n         MVC   MSGSREMT+2(5),=C'.PRTR'\n*\nJQEOUTL2 DS    0H\n         MVI   JOBRECCT,X'00'      WIPE OUT LEFT BYTE\n         CLC   JOBRECCT(4),FZEROS      ANY RECORDS?\n         BE    JQENOWRK        NOPE,   GET NEXT WORK JOE\n*\nJOENOWTR DS    0H\n*\nJOERECLP DS    0H\n*\nJQEOUTMS DS    0H\n         ICM   R15,15,JOBRECCT        RECORD COUNT\n         CVD   R15,DOUBLEWD        RECORD COUNT\n         MVC   MSGALINE-1(10),EDIT10\n         ED    MSGALINE-1,DOUBLEWD+4\n*\n         MVC   MSGOCLAS(1),JOBCURCL\n*\n         CLC   MSGSTYPE(3),OUTQUE   ON OUTPUTQUEUE?\n         BNE   MSGTEST\n*\n         B     JQETNODE            CHECK FOR RMT PRINT NODE\n*\nJQENOWRK DS    0H\n*\n         CLC   MSGSTYPE(3),OUTQUE   ON OUTPUTQUEUE?\n         BNE   MSGTEST\n*\n         MVC   MSGSPCST(4),=C'NRDY'  NO READY OUTPUT\n*\nJQETNODE DS    0H\n*\n         CLC   JOBRNODE(2),FZEROS     COMPARE PRINT NODE TO ZERO\n         BE    MSGTEST       IT'S THE SAME, SO SKIP IT\n         CLC   JOBTHISN(2),JOBRNODE   COMPARE THIS NODE VS. PRINT NODE\n         BE    MSGTEST       IT'S THE SAME, SO SKIP IT\n*\n         SR    R15,R15\n         ICM   R15,3,JOBRNODE\n         CVD   R15,DOUBLEWD     NODE NUMBER FOR PRINTED OUTPUT\n         OI    DOUBLEWD+7,X'0F' MAKE PRINTABLE\n         MVI   MSGSNODE,C'N'\n         UNPK  MSGSNODE+1(1),DOUBLEWD+7(1)\n         CLC   MSGSNODE(2),=C'N1'  LOCAL NODE\n         BNE   MSGTEST        GO PRINT THE MESSAGE\n         MVC   MSGSNODE(2),SPACES  LOCAL NODE\nMSGTEST  DS    0H\n*\n         CLC   COMMAND(2),DTREQ    DT REQUEST\n         BE    MSGDTREQ            YES, GO TEST FOR OUTPUT QUEUE TYPE\n         CLC   COMMAND(2),DRREQ    DR REQUEST\n         BE    MSGDRREQ            YES, GO TEST FOR OUTPUT QUEUE TYPE\n         CLC   COMMAND(2),DOREQ    DO REQUEST\n         BE    MSGDOREQ            YES, GO TEST FOR OUTPUT QUEUE TYPE\n         CLC   COMMAND(2),DWREQ    DW REQUEST\n         BE    MSGDWREQ            YES, GO TEST FOR EXTERNAL WRITER\n         CLC   COMMAND(2),DEREQ    DE REQUEST\n         BE    MSGNEXT             YES, PRINT IT\n         CLC   COMMAND(2),STREQ    ST REQUEST\n         BE    MSGSTAT             YES, PRINT IT\n         CLC   COMMAND(2),DHREQ    DH REQUEST\n         BE    MSGHELD             YES, PRINT IT\n         CLC   COMMAND(2),DLREQ    DL REQUEST\n         BE    MSGSLOG             YES, PRINT IT\n         CLC   COMMAND(2),DAREQ    DA REQUEST\n         BE    MSGACTV             YES, PRINT IT\n         CLC   COMMAND(2),DQREQ    DQ REQUEST\n         BE    MSGINPT             YES, PRINT IT\n         B     MSGNEXT        GO PRINT THIS JQE\n*\nMSGSTAT  DS    0H\n*\n         SR    R15,15\n         IC    R15,USRJLENG   SET THE JOB LENGTH\n         EX    R15,NAMECLC1   MATCH ON JOB NAME\n         BE    MSGSTAT2       GO PRINT THIS JQE\n         EX    R15,NAMECLC2   MATCH ON WTRID\n         BE    MSGSTAT2       GO PRINT THIS JQE\n         B     NEXTJQE        GET ANOTHER JQE\n*\nNAMECLC1 CLC   LVL(1),JOBJNAME         JOBNAME FIRST 5 BYTES\nNAMECLC2 CLC   LVL(1),JOBWTRID         JOBNAME FIRST 5 BYTES\nMSGSTAT2 DS    0H\n*\n         CLI   MSGSTYPE,C'E'   EXECUTING?\n         BE    GETSYSID       GO SET SYSTEM ID\n         CLI   MSGSTYPE,C'A'   ACTIVE\n         BE    GETSYSID       GO SET SYSTEM ID\n         CLI   MSGSTYPE,C'L'   LOGGED ON\n         BE    GETSYSID       GO SET SYSTEM ID\n*\n         B     MSGNEXT        GO PRINT THIS JQE\n*\nMSGHELD  DS    0H\n*\n         CLC   MSGSTYPE(L'OUTQUE),OUTQUE   ON OUTPUTQUEUE\n         BNE   NEXTJQE        NO, SKIP IT\n*\n         CLC   USERID(6),=CL6'BPSCAN'\n         BE    MSGHELD2       YES, CHECK FOR DUPLICATE NAME\n*\n         CLC   MSGSPCST(4),=C'NRDY'  NO READY OUTPUT\n         BE    MSGHELD3       YES, CHECK FOR BPSCAN\n         CLC   MSGSPCST(4),HOLD      NO READY OUTPUT\n         BE    MSGHELD3       YES, CHECK FOR BPSCAN\n*\n         B     NEXTJQE        NO, SKIP IT\n*\nMSGHELD2 DS    0H\n*\n         CLC   BPSCANJO(8),JOBJNAME\n         BE    NEXTJQE\n         MVC   BPSCANJO(8),JOBJNAME\n         B     MSGHELD3            CHECK FOR HELD OUTPUT\n*\nMSGHELD3 DS    0H\n*\n         CLC   USERID(6),=CL6'BPSCAN'\n         BNE   MSGNEXT        GO PRINT THIS JQE\n*                                     IF USER ID IS BPSCAN\n         CLI   JOBJCLAS,C'P'          LOOK AT CLASS \"P\" JOBS\n         BE    CHKCLASX\n*\n         CLI   JOBJCLAS,C'S'          LOOK AT CLASS \"S\" JOBS\n         BE    CHKCLASX\n*\n         CLI   JOBJCLAS,C'R'          LOOK AT CLASS \"R\" JOBS\n         BE    CHKCLASX\n*\n         CLI   JOBJNAME+7,C'0'        AND PRODUCTION\n         BL    NEXTJQE\n*\nCHKCLASX DS    0H\n*                   AT THIS POINT WE HAVE TO DETERMINE WHETHER THE\n*                   JOB HAS ALREADY BEEN PROCESSED BY BPSCAN.\n*\n         L     R1,JCTPTR\n         USING JEDDSECT,1\n         MVC   JEDMTTR2(4),JOBTRAK\n         LA    R1,JCTPTR\n         LA    R15,14\n         SVC   JESSVC\n*\n         LTR   R15,R15\n         BNZ   ABADJCT\n*\n         L     R1,JCTPTR\n         MVC   JOBUSRID(7),JEDUSEID    SET SUBMITTING USERID\n         OI    JEDATOUT+3,X'0F'  MAKE PRINTABLE\n         UNPK  JOBOUDAT(5),JEDATOUT+1(3)\n         L     R15,IOTPTR\n         MVC   000(256,R15),000(R1)\n         MVC   256(256,R15),256(R1)\n         MVC   512(256,R15),512(R1)\n*\n         LA    R1,IOTPTR\n         LA    R15,15\n         SVC   JESSVC\n*\n         L     R1,IOTPTR\n         LA    R1,JEDBUFF+24   POINT TO DDNAMES\n         USING DDLINE,1\n*\nBPSCAN01 DS    0H\n         CLI   0(R1),X'FF'          END OF ENTRIES?\n         BE    NEXTJQE\n         CLC   DDLDSID(3),=C'003'\n         BE    NEXTJQE\n         CLC   DDLDSID(3),=C'002'\n         BE    BPSCANCL\n*\nBPSCAN02 DS    0H\n         LA    R1,DDLINESZ(,1)       BUMP TO NEXT DD ENTRY\n         B     BPSCAN01\n*\nBPSCANCL DS    0H\n         CLI   DDCLASS,C'X'\n         BNE   BPSCAN02\n*\nINITAHJR DS    0H\n*\n         B     MSGNEXT        OK, KEEP IT\n*\nMSGSLOG  DS    0H\n         CLC   JOBJNAME(8),=CL8'SYSLOG'\n         BE    GETSYSID       YES, GET THE SYSTEM ID\n         B     NEXTJQE        NO, SKIP IT\n*\nMSGACTV  DS    0H\n         CLC   MSGJBTYP(3),DATYPE\n         BNE   NEXTJQE        NO, SKIP IT\n*\nMSGACTVT DS    0H\n*\n         CLI   MSGSTYPE,C'E'   EXECUTING?\n         BE    GETSYSID       GO SET SYSTEM ID\n         CLI   MSGSTYPE,C'A'   ACTIVE\n         BE    GETSYSID       GO SET SYSTEM ID\n         CLI   MSGSTYPE,C'L'   LOGGED ON\n         BE    MSGSTAT2       GO SET SYSTEM ID\n         B     NEXTJQE        NO, SKIP IT\n*\n*                              FIND OUT WHAT SYSTEM IT IS RUNNING ON\nGETSYSID DS    0H\n*\n         TM    JOBFLAG3,QUESYSDS    SYSTEM DATASET\n         BO    MSGNEXT              NO JCT, JOBTRAK POINTS TO IOT\n*\n         L     R1,JCTPTR\n         USING JEDDSECT,1\n         MVC   JEDMTTR2(4),JOBTRAK\n         LA    R1,JCTPTR\n         LA    R15,14\n         SVC   JESSVC\n*\n         L     R1,JCTPTR\n         MVC   JOBUSRID(7),JEDUSEID    SET SUBMITTING USERID\n         OI    JEDATOUT+3,X'0F'  MAKE PRINTABLE\n         UNPK  JOBOUDAT(5),JEDATOUT+1(3)\n         MVC   MSGSPCST(4),JEDEXSID\n         LTR   R15,R15\n         BZ    MSGNEXT\n*\nABADJCT  DS    0H\n         SETMSG JDF005\n         B     SHOWAGN2        DISPLAY THE SCREEN\n*\nMSGINPT  DS    0H\n         CLC   MSGSTYPE(6),INPQUE\n         BNE   NEXTJQE        NO, SKIP IT\n*\n         CLI   DQCLASS,C' '   NO QUEUE SPECIFIED?\n         BE    MSGNEXT        GO PRINT THIS JQE\n*\n         CLC   DQCLASS(1),JOBJCLAS     CORRECT QUEUE?\n         BE    MSGNEXT        GO PRINT THIS JQE\n*\n         B     NEXTJQE        NO, SKIP IT\n*\nMSGDRREQ DS    0H\n         CLI   MSGSNODE,C'N'  REMOTE NODE?\n         BE    NEXTJQE       YES, SKIP IT\n         CLI   MSGSREMT,C'U' REMOTE FSS PRINTER?\n         BE    *+12          YES, INCLUDE IT\n         CLI   MSGSREMT,C'R' REMOTE PRINT/PUNCH?\n         BNE   NEXTJQE        NO, SKIP IT\n*\n         CLC   DRNUM(2),FZEROS   ALL REMOTES?\n         BE    MSGNEXT        GO PRINT THIS JQE\n*\n         CLC   DRNUM(2),JOBREMOT THIS REMOTES?\n         BE    MSGNEXT        GO PRINT THIS JQE\n*\n         B     NEXTJQE        NO, SKIP IT\n*\nMSGDWREQ DS    0H\n*\n         CLI   JOBWTRID,C' ' EXTERNAL WRITER/IDTF?\n         BNH   NEXTJQE       NO, SKIP IT\n*\n         MVC   MSGSREMT(8),JOBWTRID   INDICATE WTR\n         B     MSGNEXT        GO PRINT THIS JQE\n*\nMSGDOREQ DS    0H\n*\n         CLI   JOBWTRID,C' ' EXTERNAL WRITER/IDTF?\n         BNE   NEXTJQE       YES, SKIP IT\n*\n         CLC   MSGSPCST(4),=C'NRDY'  NO READY OUTPUT\n         BE    NEXTJQE       YES, SKIP IT\n         CLI   MSGSNODE,C'N'  REMOTE NODE?\n         BE    NEXTJQE       YES, SKIP IT\n         CLI   MSGSREMT,C'R'  REMOTE QUEUE?\n         BE    NEXTJQE       YES, SKIP IT\n*\n         CLC   MSGSREMT(2),=C'U3'  REMOTE FSS PRINTER?    **FSS**\n         BE    NEXTJQE       YES, SKIP IT\n*\n         CLI   MSGSTYPE+3,C'O' OUTPUT - LOCAL PRINT QUEUE\n         BE    MSGDOCHK       GO CHECK FOR PRINT QUEUE\n         CLI   MSGSTYPE+3,C'P' OUTPUT - ACTUALLY PRINTING\n         BE    MSGDOCHK       GO CHECK FOR PRINT QUEUE\n         B     NEXTJQE        NO, SKIP IT\n*\nMSGDOCHK DS    0H\n*\n         CLI   MSGOCLAS,C'V'  IS THIS SYSOUT=V?\n         BE    MSGDOCK2       CHECK FOR SPECIFIC CLASS REQUEST\n         CLI   MSGOCLAS,C'W'  IS THIS SYSOUT=W?\n         BE    MSGDOCK2       CHECK FOR SPECIFIC CLASS REQUEST\n         CLI   MSGOCLAS,C'X'  IS THIS SYSOUT=X?\n         BE    MSGDOCK2       CHECK FOR SPECIFIC CLASS REQUEST\n         CLI   MSGOCLAS,C'Y'  IS THIS SYSOUT=Y?\n         BE    MSGDOCK2       CHECK FOR SPECIFIC CLASS REQUEST\n*\n         CLI   DOCLASS,C' '   NO QUEUE SPECIFIED?\n         BE    MSGNEXT        GO PRINT THIS JQE\n*\nMSGDOCK2 DS    0H\n*\n         CLC   DOCLASS(1),MSGOCLAS     CORRECT QUEUE?\n         BE    MSGNEXT        GO PRINT THIS JQE\n         B     NEXTJQE        NO, SKIP IT\n*\nMSGDTREQ DS    0H\n*\n         CLC   MSGSTYPE(L'XMTQUE),XMTQUE   ON INPUT QUEUE FOR XMIT\n         BE    MSGNEXT        GO PRINT THIS JQE\n*\n         CLI   MSGSNODE,C'N'\n         BNE   NEXTJQE        NO, SKIP IT\n         B     MSGNEXT        GO PRINT THIS JQE\n*\nMSGNEXT  DS    0H\n*\n         CLC   JOBFORM(4),=C'STD1'\n         BE    *+10\n         MVC   MSGFORM(4),JOBFORM\n*\n         MVI   MSGBURST,C' '  SET BURST FLAG\n         TM    JOBCFLAG,$JOEBRST  BURST OUTPUT?\n         BE    *+8            NOPE\n         MVI   MSGBURST,C'Y'\n*\n*\n         CLI   MSGSTYPE,C'L'  LOGGED-ON TSO USER?\n         BNE   BALOUTMS       NO, JUST GO PRINT THIS JQE\n*\n         L     R1,FLCCVT      PICK UP CVT\n         USING CVT,1\n         L     R1,CVTUSER     PICK UP CVTUSER\n         USING CVTUSERS,1\n*\n         LTR   R1,1           CVTUSER AREA PRESENT?\n         BZ    BALOUTMS       NO, JUST GO PRINT THIS JQE\n*\n         L     R14,CVTTSOUA          FIRST TSO USER ENTRY\n         L     R15,CVTTSOUN          NUMBER OF ENTRIES\n         USING TSOUSER,14\n*\nCVTULOOP DS    0H\n         CLC   MSGJNME(7),TSOUSRID   MATCH\n         BE    GOTATSOE              USE IT\n*\n         LA    R14,TSOUSLEN(,14)     BUMP TO NEXT ENTRY\n         BCT   R15,CVTULOOP\n         B     NOTATSOE\n*\nGOTATSOE DS    0H\n         MVC   MSGSTYPE(16),TSOUSRNM+2\n*\nNOTATSOE DS    0H\n*\nBALOUTMS DS    0H\n*\n         PACK  MSGJQTYP(1),JOBTYPE\n         NI    MSGJQTYP,X'0F'\n         MVC   MSGJQTYP+1(1),JOBTYPE\n         NI    MSGJQTYP+1,X'0F'\n         TR    MSGJQTYP(2),HEXTABLE\n*\n         MVC   JOBLINE(80),MESSAGE\n         VPUT  TSEL,JOBLINE\n         TBADD DATABLE1\n         MVI   GOTANYST,C'1'      GOT ONE\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(79),MESSAGE\n         B     NEXTJQE\n*\nHEXTABLE DC    C'0123456789ABCDEF'\n*\nNEXTJQE  DS    0H\n*\n         LA    R6,JOBSIZE(6) A(NEXT JDF JOB RECORD)\n*\n         CLI   0(R6),X'FF'\n         BE    JQEDONE\n*\n         B     CHECKJQE CHECKED ALL RETURNED JQES?\n*\nJQEDONE  DS    0H\n         L     R7,JQESHOLD YES => RETURN\n         BR    R7             TO OUR CALLER\n*\nCHECKRSM DS    0H\n*\n         XC    HR001(HRLEN),HR001   CLEAR OUT THE REMOTE COUNTERS\n*\n         TBCREATE RMTABLE1,RMT1,RMT2\n*\nRSMLOOP  DS    0H\n*\n         CLC   JOBRNODE,FZEROS ROUTCDE OR LOCAL PRINTER?\n         BNE   RSMLOOP1        NO, SEE IF IT IS A REMOTE\n*\n         CLC   JOBREMOT(2),=H'3'  FSS REMOTE?        **FSS**\n         BE    RSMLOOP1           YES, INCLUDE THIS AS A REMOTE\n*\n         B     NEXTRSM         NO, SKIP\n*\nRSMLOOP1 DS    0H\n*\n         CLC   JOBREMOT,FZEROS REMOTE QUEUE?\n         BE    NEXTRSM         NO, SKIP\n*\n         SR    R1,1\n         ICM   R1,3,JOBREMOT   PICK UP REMOTE NUMBER\n*\n         LA    R14,RMTMAX      HIGHEST REMOTE NUMBER\n         CR    R1,R14          COMPARE THIS RMT VS HIGHEST\n         BH    NEXTRSM         TOO HIGH, JUST SKIP\n*\n         SLL   R1,1            MULTIPLY BY 2\n         LA    R1,HRTABLE(R1)  POINT TO COUNTER\n         ICM   R14,3,0(R1)     PICK UP COUNTER\n         LA    R14,1(,R14)     BUMP 1\n         STCM  R14,3,0(R1)     UPDATE COUNTER\n*\nNEXTRSM  DS    0H\n*\n         LA    R6,JOBSIZE(6) A(NEXT JDF JOB RECORD)\n*\n         CLI   0(R6),X'FF'\n         BE    RSMDONE\n*\n         B     RSMLOOP  CHECKED ALL RETURNED JQES?\n*\nRSMDONE  DS    0H\n*\n         LA    R5,HRTABLE+2   POINT TO COUNTERS\n*\n         LA    R6,RMTMAX       LOOP CONTROL\n         SR    R3,R3\n*\nRSMLOOP2 DS    0H\n*\n         MVI   RMT1,C' '\n         MVC   RMT1+1(33),RMT1\n         MVC   RMT2(34),RMT1\n*\n*\n         ICM   R3,3,0(R5)      PICK UP COUNTER\n         LTR   R3,R3\n         BZ    RSMBUMP2        IF ZERO, SKIP\n*\n         CVD   R3,DOUBLEWD\n         OI    DOUBLEWD+7,X'0F'\n         MVC   RMT1(4),EDIT4\n         ED    RMT1(4),DOUBLEWD+6\n*\n         LR    R3,R5\n         LA    R15,HRTABLE\n         SR    R3,R15         SET R3 = TABLE OFFSET\n         SRL   R3,1           SET R3 = REMOTE NUMBER\n*\n         L     R15,RMTABLEA\n         LA    R1,RMTMAX\n*\n         CLM   R3,3,0(R15)\n         BE    *+16\n         LA    R15,26(,R15)\n         BCT   R1,*-12\n         B     *+10\n*\n         MVC   RMT1+4(24),2(R15)\n         BCTR  R6,0\n         LTR   R6,R6\n         BZ    RSMDONE2\n*\n         LA    R5,2(,R5)       BUMP COUNTERS\nRMT2LOOP DS    0H\n         MVI   RMT2,C' '\n         MVC   RMT2+1(33),RMT2\n*\n         ICM   R3,3,0(R5)      PICK UP COUNTER\n         LTR   R3,R3\n         BZ    RSMBUMP3        IF ZERO, SKIP\n*\n         CVD   R3,DOUBLEWD\n         OI    DOUBLEWD+7,X'0F'\n         MVC   RMT2(4),EDIT4\n         ED    RMT2(4),DOUBLEWD+6\n*\n         LR    R3,R5\n         LA    R15,HRTABLE\n         SR    R3,R15         SET R3 = TABLE OFFSET\n         SRL   R3,1           SET R3 = REMOTE NUMBER\n         L     R15,RMTABLEA\n         LA    R1,RMTMAX\n*\n         CLM   R3,3,0(R15)\n         BE    *+16\n         LA    R15,26(,R15)\n         BCT   R1,*-12\n         B     *+10\n*\n         MVC   RMT2+4(24),2(R15)\n*\n         TBADD    RMTABLE1\n*\nRSMBUMP2 DS    0H\n         LA    R5,2(,R5)       BUMP COUNTERS\n         BCT   R6,RSMLOOP2     DO THEM ALL\n*\n         B     RSMDONE2\n*\nRSMBUMP3 DS    0H\n         LA    R5,2(,R5)       BUMP COUNTERS\n         BCT   R6,RMT2LOOP     DO THEM ALL\n*\n         MVI   RMT2,C' '\n         MVC   RMT2+1(33),RMT2\n*\n         TBADD    RMTABLE1\n*\nRSMDONE2 DS    0H\n         TBTOP    RMTABLE1\n         TBDISPL  RMTABLE1,JDFRMT\n*\n         TBEND    RMTABLE1\n*\n         MVC   COMMAND(2),CMDSAVE    SAVE THE PREVIOUS COMMAND\n         B     SHOWAGN2        RESHOW OPTION MENU\n*\n         TITLE 'JDF -  JQE DISPLAY USING TABLE MGMT SERVICES'\nSHOWISP  DS    0H\n         CLI   GOTANYST,C'0'\n         BNE   GOTSOMEJ\n*\nGOTNONE  DS    0H\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(79),MESSAGE\n         MVC   MESSAGE+5(13),=CL13'NO JOBS FOUND'\n         MVC   JOBLINE(80),MESSAGE\n         VPUT  TSEL,JOBLINE\n         TBADD DATABLE1\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(79),MESSAGE\n         B     GOTSOMEJ\n*\nNEXTLINE DS    0H\n         L     R15,DISPLRC   PICK UP LAST PREVIOUS RETURN CODE.\n         LTR   R15,15        ALL DONE?\n         BZ    SHOWAGN2      YES, RESHOW THE JOB TABLE.\n*                            NO, RETRIEVE THE NEXT JOB SELECTED.\n         MVI   JOBLINE,C' '\n         MVC   JOBLINE+1(77),JOBLINE\n         MVC   TSEL(3),SPACES     SET SELECTION CODE TO SPACES\n*\n*\n         TBDISPL DATABLE1,ENDKEY=SHOWAGIN\n         ST    R15,DISPLRC     SAVE RETURN CODE\n         B     TSTRTRNC        TEST RETURN CODES\n*\nGOTSOMEJ DS    0H\n         TBTOP DATABLE1\nNODATOP  DS    0H\n         TBDISPL DATABLE1,JDFDATAB,ENDKEY=SHOWAGIN\n         ST    R15,DISPLRC     SAVE RETURN CODE\n         B     TSTRTRNC        TEST RETURN CODES\nDNOTAUTH DS    0H\n         SETMSG JDF002\n         B     SHOWAGN2        DISPLAY THE SCREEN\n*\nTSTRTRNC DS    0H\n*\n         C     R15,FZEROS      COMMAND ENTERED/ 1 LINE SELECTED?\n         BE    GOTSTUFF        YUP\n         C     R15,F4          COMMAND ENTERED/ LINES SELECTED?\n         BE    GOTSTUFF        YUP\n*\n         B     SHOWAGIN        RESHOW OPTION MENU\n         TITLE 'JDF -  COMMAND INPUT PROCESSING'\n*\nGOTSTUFF DS    0H\n*\n         MVC   SELSAVE(3),TSEL       SAVE SEL CODE\n         OC    SELSAVE(3),SPACES   UPPER-CASE IT\n         MVC   TSEL(3),SPACES     SET SELECTION CODE TO SPACES\n*\n         MVC   MESSAGE(LMESSAGE),JOBLINE\n*\n         MVC   JOBNUMS(5),JOBLINE+3  SAVE JES JOB NUMBER\n         OC    JOBNUMS(5),CZEROS     SET LEADING ZEROS\n         PACK  JOBNUMP(8),JOBNUMS\n         CVB   R1,JOBNUMP\n         STH   R1,JOBNUMH\n*\n         MVC   JOBNAMS(8),JOBLINE+9  SAVE JOB NAME\n         MVC   JOBID(3),JOBLINE      SAVE JOB TYPE, STC, TSU, OR JOB\n*\n         OC    JCMD(40),SPACES       UPPER-CASE COMMAND INPUT\n*\n         CLC   SELSAVE(3),SPACES   IF SEL OPTION ENTERED,\n         BNE   GOTSELCD            GO PROCESS IT.\n*\n         CLI   JCMD,C' '             IS IT BLANK\n         BE    SHOWAGN2            JUST REPEAT THE DISPLAY\n         B     GOTCOMND       ELSE A COMMAND WAS ENTERED\n*\nGOTSELCD DS    0H\n*\n* IF NOT A COMMAND, THEN A LINE SELECTION CODE MUST HAVE BEEN\n* ENTERED. I HAVE THE CURRENT LINE, SO EDIT THE SELECTION CODE.\n*\n         CLI   JOBID,C' '     IF NO JOB TYPE,\n         BE    NEXTLINE           MUST BE A MISTAKE\n*\n         B     USERAUTH       GO CHECK AUTHORITY\n*\n         TITLE 'JDF -  CHECK USER COMMAND AUTHORITY'\nUSERAUTH DS    0H\n*\n* SINCE THERE IS NO JOB NAME CONVENTION THAT TIES IN THE USERID,\n* WE HAVE TO READ IN THE JCT.\n*\n         L     R1,JJSPARM           PICK UP JQE BUFFER\n         USING JJSDSECT,1\n         LA    R6,JJSLINE1\n         LA    R6,JOBSIZE(,6) BUMP\n         USING JOBDSECT,6     ADDRESSABILITY\n*\nJCGETJQE DS    0H\n         CLC   JOBJOBNO(2),JOBNUMH\n         BE    JCTPOINT       YUP\n         LA    R6,JOBSIZE(,6) BUMP\n         CLI   0(R6),X'FF'     END OF LIST\n         BE    NEXTLINE\n         B     JCGETJQE        LOOP\n*\n*\nJCTPOINT DS    0H\n         CLC   FZEROS(4),JOBTRAK    JCT DISK ADDRESS\n         BE    NEXTLINE\n*\n         L     R1,JCTPTR\n         USING JEDDSECT,1\n*\n         XC    JEDBUFF(18),JEDBUFF\n         TM    JOBFLAG3,QUESYSDS    SYSTEM DATASET\n         BZ    JCTSVCOK             JOBTRAK POINTS TO JCT\n*\n*                                   NO JCT, JOBTRAK POINTS TO IOT\n         MVC   JEDIOT(4),JOBTRAK\n         B     IAMAUTH\n*\nJCTSVCOK DS    0H\n*\n         MVC   JEDMTTR2(4),JOBTRAK\n         LA    R1,JCTPTR\n         LA    R15,14\n         SVC   JESSVC\n*\n         LTR   R15,R15\n         BNZ   ABADJCT\n*\n         L     R1,JCTPTR\n         MVC   JOBUSRID(7),JEDUSEID    SET SUBMITTING USERID\n         OI    JEDATOUT+3,X'0F'  MAKE PRINTABLE\n         UNPK  JOBOUDAT(5),JEDATOUT+1(3)\n         MVC   JDFJBKEY(4),JEDJBKEY  SAVE KEY OF OUTPUT\n*\n* ANYONE CAN LOOK AT DDNAME LIST FOR ANY JOB\n*\n         CLI   SELSAVE,C'S'   IS IT SHOWJOB\n         BE    SHOWJOB        THEN GO DO IT\n         CLI   SELSAVE,C'B'   IS IT SHOWJOB\n         BE    SHOWJOB        THEN GO DO IT\n*\n* RULE 2==>  OPERATIONS USERID'S BEGIN WITH THE CHARACTERS BELOW.\n*            OPERATIONS USERS CAN ENTER ANY COMMANDS FOR ANY JOBS.\n*\n*\n         CLC   USERID(3),=C'MVS'     OPERATIONS\n         BE    IAMAUTH          YUP\n         CLC   USERID(2),=C'AO'      OPERATIONS\n         BE    IAMAUTH          YUP\n         CLC   USERID(2),=C'BP'      PRODSERV USER-ID\n         BE    IAMAUTH          YUP\n         CLC   USERID(2),=C'BO'      PRODSERV USER-ID\n         BE    IAMAUTH          YUP\n         CLC   USERID(2),=C'AP'      PRODSERV USER-ID\n         BE    IAMAUTH          YUP\n*\n*\n* RULE 3==>  SOFTWARE ENGINEERING CAN ISSUE ANY COMMAND AGAINST ANY JOB\n*\n*\n         CLC   USERID(2),=C'AS'      SOFTWARE ENGINEERING\n         BE    IAMAUTH          YUP\n*\n* CHANGING PRINT PRIORITY IS RESTRICTED\n*\n         CLC   SELSAVE(3),=C'PUP'   IS IT INCREASE PRINT PRIORITY\n         BE    DNOTAUTH              RESTRICTED TO OPERATIONS, SOFTWARE\n*\n* IF SUBMITTING USERID FIELD IS BLANK, DON'T CHECK USER FOR AUTHORITY\n*\n         CLI   JEDUSEID,C' '        ID FIELD BLANK?\n         BE    IAMAUTH          YUP\n*\n* IF SUBMITTING USERID FIELD MATCHES MY USERID, I OWN IT\n*\n         CLC   JEDUSEID(5),USERID   SUBMITTING USER-ID VS MINE\n         BE    IAMAUTH              YES, ALLOW ACCESS\n*\n* IF JOB NAME MATCHES MY USERID, I OWN IT\n*\n         CLC   JOBNAMS(5),USERID    JOB NAME VERSUS USER-ID\n         BE    IAMAUTH              YES, ALLOW ACCESS\n*\n         B     DNOTAUTH              RESTRICTED TO OPERATIONS, SOFTWARE\n*\nIAMAUTH  DS    0H\n*\n         CLI   SELSAVE,C'I'   IS IT SHOW INITIATORS\n         BE    SHOWDIF        THEN GO DO IT\n*\n         CLI   SELSAVE,C'A'   IS IT A \"$AJ\" COMMAND\n         BE    ACTAJOB        THEN GO DO IT\n*\n         CLC   SELSAVE(3),=CL3'RDR'   IS IT ROUTE TO CMS SPOOL\n         BE    JOBRDR         THEN GO DO IT\n*\n         CLI   SELSAVE,C'C'   IS IT A CANCEL\n         BE    JOBCAN         THEN GO DO IT\n*\n         CLI   SELSAVE,C'H'   IS IT A \"$HJ\"\n         BE    HOLDAJOB       THEN GO DO IT\n*\n         CLC   SELSAVE(3),=C'PUP'    BUMP PRINT PRIORITY\n         BE    PRTPRIO               GO DO IT\n*\n         CLC   SELSAVE(2),=C'OJ'     CHANGE PRINT CLASS\n         BE    JOBOJ                 GO DO IT\n*\n         CLI   SELSAVE,C'P'   IS IT A PURGE\n         BE    JOBPUR         THEN GO DO IT\n*\n         CLC   SELSAVE(3),=CL3'RLS'   IS IT RELEASE FROM HELD STATUS\n         BE    JOBRLS         THEN GO DO IT\n*\n         CLI   SELSAVE,C'R'   IS IT A REQUEUE\n         BE    JOBREQ         THEN GO DO IT\n*\n         CLI   SELSAVE,C'T'   IS IT A \"$TJ\" COMMAND\n         BE    JOBTJ          THEN GO DO IT\n*\n         CLI   SELSAVE,C'D'   IS IT A \"$DUMP\" COMMAND\n         BE    JOBDUMP        THEN GO DO IT\n*\n         SETMSG JDF007\n         B     SHOWAGN2        DISPLAY THE SCREEN\n*\n         TITLE 'JDF -  INVOKE XDF (EXECUTION DISPLAY)'\n*\nSHOWXDF  DS    0H\n*\n         LINK EP=XDF\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  INVOKE XDF (EXECUTION DISPLAY)'\n*\nSHOWDIF  DS    0H\n*\n         LINK EP=DIF\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  INVOKE CDF (CONSOLE DISPLAY)'\n*\nSHOWCONS DS    0H\n*\n         LINK EP=CDF\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  PERFORM $OJ PROCESSING'\n*\nJOBOJ    DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVC   CMDLINE(3),=C'$TO'    ALTER\n         MVC   CMDLINE+3(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+4(5),JOBNUMS    JES NUMBER\n         MVC   CMDLINE+09(7),=C',ALL,Q='   ALL OUTPUTS\n         MVC   CMDLINE+16(1),SELSAVE+2 NEW CLASS\n*\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n*\n         TITLE 'JDF -  PERFORM $DUMP PROCESSING'\n*\nJOBDUMP  DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVC   CMDLINE(8),=C'$DUMP,J=' COMMAND\n         MVC   CMDLINE+8(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+9(5),JOBNUMS    JES NUMBER\n*\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n*\n         TITLE 'JDF -  PERFORM $TJ PROCESSING'\nJOBTJ    DS    0H\n*\n         CLI   SELSAVE+1,C'C' IS IT A \"$TJ000,C=X\" COMMAND\n         BE    JOBTJC         THEN GO DO IT\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n*\nJOBTJC   DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVI   CMDLINE+1,C'T'          ALTER\n         MVC   CMDLINE+2(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+3(5),JOBNUMS    JES NUMBER\n         MVC   CMDLINE+8(3),COMMAC     SYNTAX\n         MVC   CMDLINE+11(1),SELSAVE+2 NEW CLASS\n*\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  INCREASE PRIORITY'\n*\nPRTPRIO  DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVI   CMDLINE+1,C'T'          ALTER\n         MVC   CMDLINE+2(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+3(5),JOBNUMS    JES NUMBER\n         MVC   CMDLINE+8(6),PUPDATA    P=99\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  HOLD A JOB'\n*\nHOLDAJOB DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVI   CMDLINE+1,C'H'          HOLD\n         MVC   CMDLINE+2(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+3(5),JOBNUMS    JES NUMBER\n*\n*\nHOLDAJBC DS    0H\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  RELEASE A HELD JOB'\n*\nACTAJOB  DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVI   CMDLINE+1,C'A'          HOLD\n         MVC   CMDLINE+2(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+3(5),JOBNUMS    JES NUMBER\n*\n*\nACTAJOBC DS    0H\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n*\n         TITLE 'JDF -  JOB CANCEL    PROCESSING'\nJOBCAN   DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVI   CMDLINE+1,C'C'        CANCEL\n         MVC   CMDLINE+2(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+3(5),JOBNUMS    JES NUMBER\n*\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n         B     NEXTLINE       GO REPEAT THE SCREEN\nABEND5   ABEND 5,DUMP,STEP\nABEND6   ABEND 6,DUMP,STEP\n         TITLE 'JDF -  JOB PURGE     PROCESSING'\nJOBPUR   DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVI   CMDLINE+1,C'P'          PURGE\n         MVC   CMDLINE+2(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+3(5),JOBNUMS    JES NUMBER\n*\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  RELEASE HELD OUTPUT FOR A JOB'\nJOBRLS   DS    0H\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n        TITLE 'JDF -  ROUTE A JOBS OUTPUT TO A CMS USERS READER QUEUE'\nJOBRDR   DS    0H\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(29),CMDLINE\n         MVI   CMDLINE,C'$'\n         MVC   CMDLINE+1(7),=C'RALL,J=' ELEASE\n         MVC   CMDLINE+8(1),JOBID      TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   CMDLINE+9(5),JOBNUMS    JES NUMBER\n         MVC   CMDLINE+14(6),=C',D=CIS'\n*\n         BAL   R7,ISSUECMD         ISSUE JES COMMAND VIA SVC 34\n*\n         B     NEXTLINE       GO REPEAT THE SCREEN\n         TITLE 'JDF -  JOB REQUEUE   SUBROUTINE'\nJOBREQ   DS    0H\n*\n         MVC   RDEST(5),SPACES       SET FLAG\n*\n         CLI   SELSAVE+1,C'Q'         IS THIS \"RQ\"\n         BE    RQ1BYTE                YUP, ONE-BYTE FORMAT\n         CLI   SELSAVE+1,C'U'         IS THIS \"RU\" (LOCAL PRINTER)\n         BE    RU1BYTE                YUP, ONE-BYTE FORMAT\n*\nRQ2BYTE  DS    0H\n*   RE-QUEUE COMMAND WAS CODED AS \"R00\", WHERE \"00\" = RMT#\n         MVC   RDEST(2),SELSAVE+1     SAVE THE DEST\n         MVI   SELSAVE+2,C'A'         SET NEW CLASS\n         B     CLSREQ                 GO DO IT\n*\nRQ1BYTE  DS    0H\n*   RE-QUEUE COMMAND WAS CODED AS \"RQ0\", WHERE \"0\" = RMT# OR CLASS\n*\n         CLI   SELSAVE+2,C'0'        AM I CHANGING THE CLASS?\n         BL    CLSREQ               NOT NUMERIC, JUST CHANGE THE CLASS\n*\n*  I AM RE-QUEUEING TO A NUMERIC VALUE, SO IT MUST BE A REMOTE DEST.\n*\n         MVC   RDEST(1),SELSAVE+2     SAVE THE DEST\n         MVI   SELSAVE+2,C'A'         SET NEW CLASS\n*\n         B     CLSREQ                 GO DO IT\n*\nRU1BYTE  DS    0H\n*   RE-QUEUE COMMAND WAS CODED AS \"RU0\", WHERE \"0\" = LOCAL PRINTER\n*\n         CLI   SELSAVE+2,C'0'        AM I CHANGING THE CLASS?\n         BL    CLSREQ               NOT NUMERIC, JUST CHANGE THE CLASS\n*\n*  I AM RE-QUEUEING TO A NUMERIC VALUE, SO IT MUST BE A REMOTE DEST.\n*\n         MVC   RUDEST(1),SELSAVE+2     SAVE THE DEST\n         MVI   SELSAVE+2,C'A'         SET NEW CLASS\n*\nCLSREQ   DS    0H\n*\n         CLI   SELSAVE+2,X'C0'         ALPHANUMERIC CLASS\n         BH    *+8                     YUP\n         MVI   SELSAVE+2,C'A'          NOPE, SO SET IT TO DEFAULT\n*\n         B     SETSSOB        YUP\n*\nSETSSOB  DS    0H\n***                                                                 ***\n*   SET UP SSOB TO ISSUE IEFSSREQ TO REQUEUE A JOB                    *\n***                                                                 ***\n*\n         L     R14,SSOBPTR\n         USING SSOB,14\n         LA    R15,SSOBHSIZ(,R14)\n         USING SSOBGN,15\n*\n* SET UP SUB-SYSTEM REQUEST HEADER\n*\n         XC    SSOBEGIN(SSOBHSIZ),SSOBEGIN\n         MVC   SSOBID(4),=C'SSOB'\n         LA    R1,SSOBHSIZ\n         STH   R1,SSOBLEN\n         MVC   SSOBFUNC(2),H1        SET FUNCTION TO SYSOUT\n         ST    R15,SSOBINDV          SET PROCESS-SYSOUT ADDRESS\n*\n* SET UP PROCESS-SYSOUT CONTROL BLOCK\n*\n         XC    SSSOBGN(SSSOSIZE),SSSOBGN\n*\n         LA    R1,SSSOSIZE\n         STH   R1,SSSOLEN\n*\n         MVC   SSSOPGMN,SPACES     INITIALIZE WRITER NAME TO BLANKS\n         MVC   SSSOLEN(2),=AL2(SSSOSIZE)\n         OI    SSSOUFLG,SSSOSETC\n         OI    SSSOUFLG,SSSORLSE\n         OI    SSSOFLG1,SSSOHLD\n         OI    SSSOFLG1,SSSOSJBN\n         OI    SSSOFLG1,SSSOSJBI\n         OI    SSSOFLG1,SSSOSCLS  INCLUDE CLASS\n         MVC   SSSOCLSL,SPACES     INITIALIZE CLASS LIST TO BLANKS\n         MVI   SSSOCLSL,C'X'          SET CLASS TO \"X\" ONLY\n         OI    SSSOFLG2,SSSOCTRL\n         MVC   SSSOJOBN(8),JOBNAMS JOB NAME\n         MVC   SSSOJOBI+3(5),JOBNUMS JOB ID\n         MVC   SSSOJOBI(3),JOBID JOB TYPE, \"JOB\", \"STC\", OR \"TSU\"\n         MVC   SSSOCLAS(1),SELSAVE+2 SET NEW CLASS\n*\n         CLI   SSSOCLAS,C'W'         IS THIS BPSCAN\n         BNE   CKRDEST\n         MVC   SSSODEST(8),=CL8'N1   '\n         OI    SSSOUFLG,SSSOROUT  USE DESTINATION\n         B     DOSSREQ1\n*\nCKRDEST  DS    0H\n***                                                                 ***\n**       NOW CHECK TO SEE WHETHER I AM CHANGING THE CLASS OR DEST\n***                                                                 ***\n         CLI   SELSAVE+1,C'U'         IS THIS \"RU\" (LOCAL PRINTER)\n         BE    SETUDEST               YES\n         CLI   RDEST,C' '     IS THERE A REMOTE DEST\n         BE    DOSSREQ1       NOPE\n         MVC   SSSODEST(8),RQRMT\n         OI    SSSOUFLG,SSSOROUT  USE DESTINATION\n         B     DOSSREQ1       GO DO IT\n*\nSETUDEST DS    0H\n*\n         MVC   SSSODEST(8),RURMT\n         OI    SSSOUFLG,SSSOROUT  USE DESTINATION\n         B     DOSSREQ1       GO DO IT\n*\nDOSSREQ1 DS    0H\n***                                                                 ***\n**     IEFSSREQ                                                      **\n***                                                                 ***\n         LA    R1,SSOBPTR\n         LA    R15,4               SSREQ FLAG\n         SVC   JESSVC\n*\n         ST    R15,SSREQRC         SAVE RETURN CODE\n*\n         SR    R15,15              CLEAR REGISTER\n         C     R15,SSREQRC         DID I HAV RC=0 FROM SSREQ?\n         BNE   BADREQ              NOPE\n         C     R15,SSOBRETN        DID I HAV RC=0 FROM SSREQ?\n         BNE   BADREQ              NOPE\n         B     NEXTLINE       GO REPEAT THE SCREEN\n*\nBADREQ   DS    0H\n*\n         MVC   SSOBWTO2(SSOBWTOL),SSOBWTO1\n*\n         L     R15,SSREQRC\n         CVD   R15,DOUBLEWD\n         OI    DOUBLEWD+7,X'0F'\n         UNPK  SSOBWTO2+14(3),DOUBLEWD+6(2)\n*\n         L     R15,SSOBRETN\n         CVD   R15,DOUBLEWD\n         OI    DOUBLEWD+7,X'0F'\n         UNPK  SSOBWTO2+35(3),DOUBLEWD+6(2)\n*\n         WTO   ,MF=(E,SSOBWTO2)\n*\n         SETMSG JDF001\n         B     NEXTLINE       GO REPEAT THE SCREEN\nENDREQ   DS    0H\n         B     NEXTLINE       GO REPEAT THE SCREEN\n*\nSSOBWTO1 WTO   'SSREQRC=          , SSOBRETN=         ',ROUTCDE=11,MF=L\nSSOBWTOL EQU   *-SSOBWTO1\n*\nGOTCOMND DS    0H\n*\n         MVC   CMDSAVE(2),COMMAND    SAVE THE PREVIOUS COMMAND\n*\n         CLC   JCMD(4),=C'DUMP'      IS IT A DUMP REQUEST\n         BE    S0C1                  YUP, JUST GET A S0C1\n*\n         CLI   JCMD,C'R'             IS IT A \"R\" FOR REPEAT\n         BE    RPTCOMND              YUP, JUST REPEAT\n*\n         MVC   SELSAVE(40),JCMD      MOVE IT IN\n         MVC   DOCLASS(1),JCMD+2     OUTPUT CLASS\nRESETCMD DS    0H\n*\n         CLC   SELSAVE(2),=C'DC'\n         BE    SHOWCONS       GO SELECT THE SCREEN\n*\n         CLC   SELSAVE(2),=C'DI'\n         BE    SHOWDIF        GO SELECT THE SCREEN\n*\n         CLC   SELSAVE(2),=C'DX'\n         BE    SHOWXDF        GO SELECT THE SCREEN\n*\nRESETCM1 DS    0H\n         CLC   SELSAVE(3),=C'JOB'\n         BNE   RESETCM2       NOPE\n*\n         MVC   COMMAND(2),DAREQ\n         MVC   DATYPE(3),=C'JOB'\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\nRESETCM2 DS    0H\n*\n         CLC   SELSAVE(3),=C'STC'\n         BNE   RESETCM3       NOPE\n*\n         MVC   COMMAND(2),DAREQ\n         MVC   DATYPE(3),=C'STC'\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\nRESETCM3 DS    0H\n*\n         CLC   SELSAVE(3),=C'TSU'\n         BNE   RESETCM4       NOPE\n*\n         MVC   COMMAND(2),DAREQ\n         MVC   DATYPE(3),=C'TSU'\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\n*\nRESETCM4 DS    0H\n*\n         MVC   COMMAND(2),DAREQ\n         CLC   SELSAVE(2),DAREQ\n         BE    SHOWAGN2       GO SELECT THE SCREEN\n*\n         MVC   COMMAND(2),DEREQ\n         CLC   SELSAVE(2),DEREQ\n         BE    SHOWAGN2       GO SELECT THE SCREEN\n*\n         MVC   COMMAND(2),DHREQ\n         CLC   SELSAVE(2),DHREQ\n         BE    SHOWAGN2       GO SELECT THE SCREEN\n*\n         MVC   COMMAND(2),DOREQ\n         CLC   SELSAVE(2),DOREQ\n         BE    SHOWAGN2       GO SELECT THE SCREEN\n*\n         CLC   SELSAVE(2),DQREQ\n         BE    SHOWDQRQ       GO SELECT THE SCREEN\n*\n         CLC   SELSAVE(2),DRREQ\n         BE    SHOWDRRQ       GO SELECT THE SCREEN\n*\n         MVC   COMMAND(2),DTREQ\n         CLC   SELSAVE(2),DTREQ\n         BE    SHOWAGN2       GO SELECT THE SCREEN\n*\n         MVC   COMMAND(2),DLREQ\n         CLC   SELSAVE(2),DLREQ\n         BE    SHOWAGN2       RESHOW THE SCREEN\n*\n         MVC   COMMAND(2),DWREQ\n         CLC   SELSAVE(2),DWREQ\n         BE    SHOWAGN2       RESHOW THE SCREEN\n*\n         MVC   COMMAND(2),=C'QS'\n         CLC   SELSAVE(2),COMMAND\n         BE    SHOWAGN2       RESHOW THE SCREEN\n*\n         MVC   COMMAND(2),STREQ\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\nSHOWDORQ DS    0H\n*\n         MVC   COMMAND(2),DOREQ\n         MVI   DOCLASS,C' '\n*\n         CLI   SELSAVE+2,C' ' SPECIFIC REMOTE SELECTED?\n         BE    SHOWAGN2       NO, JUST GO SELECT THE SCREEN\n*\n         MVC   DOCLASS(1),SELSAVE+2      SET CLASS\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\nSHOWDQRQ DS    0H\n*\n         MVC   COMMAND(2),DQREQ\n         MVI   DQCLASS,C' '\n*\n         CLI   SELSAVE+2,C' ' SPECIFIC REMOTE SELECTED?\n         BE    SHOWAGN2       NO, JUST GO SELECT THE SCREEN\n*\n         MVC   DQCLASS(1),SELSAVE+2      SET CLASS\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\nSHOWDRRQ DS    0H\n*\n         MVC   COMMAND(2),DRREQ\n         XC    DRNUM(2),DRNUM\n*\n         CLI   SELSAVE+2,C' ' SPECIFIC REMOTE SELECTED?\n         BE    SHOWAGN2       NO, JUST GO SELECT THE SCREEN\n*\n         CLI   SELSAVE+2,C'0' NON-NUMERIC REMOTE SELECTED?\n         BL    SHOWAGN2       YES, JUST SHOW ALL REMOTES\n         CLI   SELSAVE+2,C'9' NON-NUMERIC REMOTE SELECTED?\n         BH    SHOWAGN2       YES, JUST SHOW ALL REMOTES\n*\n         PACK  DOUBLEWD,SELSAVE+2(1)   SET REMOTE NUMBER\n         CLI   SELSAVE+3,C'0' 1-BYTE REMOTE NUMBER?\n         BL    DRR1POS\n         CLI   SELSAVE+3,C'9' 1-BYTE REMOTE NUMBER?\n         BH    DRR1POS\n         PACK  DOUBLEWD,SELSAVE+2(2)   SET REMOTE NUMBER\n*\nDRR1POS  DS    0H\n*\n         CVB   R1,DOUBLEWD\n         STCM  R1,3,DRNUM\n*\n         B     SHOWAGN2       GO SELECT THE SCREEN\n*\nS0C1     DC    H'0'                  SOC1\n*\nRPTCOMND DS    0H\n         MVI   JOBLINE,C' '   CLEAR TAB ENTRY AREA\n         MVC   JOBLINE+1(79),JOBLINE\n*\n         TBEND DATABLE1\n         MVI   ATABFL,C'0'        NO ACTIVE TABLE\n*\n         XC    ISPARMS(40),ISPARMS\n         B     SHOWAGN2       GO REPEAT THE SCREEN\n         TITLE 'JDF -  BUILD DDNAME TABLE'\nSHOWJOB  DS    0H\n*\n*              INITIALIZE CONSTANTS FOR A NEW JOB\n*\n*\n         MVC   CONDZERO(3),P3ZERO INITIALIZE COUNTERS\n         MVC   CONDNUM(3),P3ZERO  INITIALIZE COUNTERS\n         MVC   CATNUM(12),CONDNUM                     FOR BPSCAN\n*\n         TBCREATE DDTABLE1,DSEL,DDNLINE\n*        TBVCLEAR DDTABLE1\n*\n         MVI   DTABFL,C'1'        AN ACTIVE TABLE\n*\n         TITLE 'JDF -  DISPLAY DDNAME TABLE USING TABLE MGMT SERVICES'\n*\n*  JCT HAS ALREADY BEEN READ IN, AND IOT AND SPIN IOT POINTERS\n*\n*\n         L     R1,JCTPTR\n         L     R15,IOTPTR\n         MVC   000(256,R15),000(R1)\n         MVC   256(256,R15),256(R1)\n         MVC   512(256,R15),512(R1)\n*\n         LA    R1,IOTPTR\n         LA    R15,15\n         SVC   JESSVC\n*\n         L     R1,IOTPTR\n         USING JEDDSECT,1\n*\n         LA    R8,JEDBUFF+24   POINT TO DDNAMES\n         USING DDLINE,8\n*\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(79),MESSAGE\n         MVC   MESSAGE(17),=CL17'COND CODE SUMMARY'\n         MVC   DDNLINE(80),MESSAGE\n         VPUT  DSEL,DDNLINE\n         TBADD DDTABLE1\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(79),MESSAGE\n         MVI   SLOGFLAG,0     FIRST TIME THROUGH\n*\nDODDLOOP DS    0H\n*\n         CLI   0(R8),X'FF'        END OF ENTRIES\n         BE    DODDS1ST           YES, SHOW TABLE\n*\n         CLI   SLOGFLAG,0     FIRST TIME THROUGH\n         BNE   NOTSLOGD       NO\n         CLC   JOBNAMS(7),=C'SYSLOG '\n         BNE   NOTSLOGD\n         CLI   DDLDSID,C'9'       FIRST SPIN DSID\n         BNE   NOTSLOGD\n*\n         MVI   PROCNAME-1,X'03'          HIGHLIGHT\n         MVC   PROCNAME(8),ACTIVE        THE PROCSTEPNAME\n         MVC   STEPNAME(8),=CL8'SYSLOG'  THE STEPNAME\n         MVI   SLOGFLAG,1 NOT FIRST TIME THROUGH\n*\nNOTSLOGD DS    0H\n*\n         MVC   MESSAGE(DDLINSHO),0(R8)\n         MVC   DDNLINE(80),MESSAGE\n         VPUT  DSEL,DDNLINE\n         TBADD DDTABLE1\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(79),MESSAGE\n         LA    R8,DDLINESZ(,R8)    BUMP TO NEXT\n         B     DODDLOOP\n*\nDODDS1ST DS    0H\n         LM    R4,R8,SAVE5        RESTORE THE WORK REGISTERS\n         MVI   COPYFLAG,0     FIRST TIME THROUGH\n*\nSHODDTAB DS    0H\n         TBTOP DDTABLE1\n*\n         MVI   DSIDEOF,0      NOT EOF\n*\n         CLC   LVL(6),=C'BPSCAN'       USERID IS BPSCAN??\n         BNE   SHODDTBS      DISPLAY THE DD TABLE\n*\n         CLC   COMMAND(2),DHREQ        HELD JOB DISPLAY??\n         BNE   SHODDTBS      DISPLAY THE DD TABLE\n*\n         CLI   SELSAVE,C'B'            BPSCAN SELECT??\n         BNE   SHODDTBS      DISPLAY THE DD TABLE\n*\n         B     GOTDSOPR       GO DO THE BPSCAN DISPLAY\n*\nSHODDTBS DS    0H\n         TBDISPL DDTABLE1,JDFDDTAB,ENDKEY=DDALLDON\n         B     DDTSTRTN       YUP, GO PROCESS IT\nDDMSG2   DS    0H\n         SETMSG JDF002\n         B     SHODDTBS\nDDTSTRTN DS    0H  TEST RETURN CODE FROM DISPLAY\n         C     R15,FZEROS     COMMAND ENTERED/LINE MODIFIED??\n         BE    GOTDDSEL       YUP, GO PROCESS IT\nDDALLDON DS    0H\n*\n*    DONE PROCESSING THE DDNAME MENU, SO\n*    RE-SHOW THE PRIMARY OPTION SELECTED\n*\n         L     R15,DISPLRC   PICK UP LAST PREVIOUS RETURN CODE.\n         LTR   R15,15        ALL DONE?\n         BZ    NODATOP       YES, JUST RESHOW THE DA TABLE\n         B     NEXTLINE      NO, RETRIEVE THE NEXT JOB SELECTED.\n*\n         TITLE 'JDF -  PROCESS DDNAME TABLE SELECTION OPTIONS'\nGOTDDSEL DS    0H\n*\n         MVI   READ1ST,0          SET FIRST-TIME-THROUGH\n*\n         MVC   SELSAVE(3),DSEL       SAVE SELECTION OPTION\n         MVC   DSEL(3),SPACES     SET SELECTION CODE TO SPACES\n         OC    SELSAVE(3),SPACES     SAVE SELECTION OPTION\n         CLC   SELSAVE(3),SPACES     NOTHING ENTERED\n         BE    SHODDTAB       REPEAT THE DD TABLE\n         MVC   DDSDSID(3),DDNLINE    SAVE JES DSID NUMBER\n         MVC   BRODSID(3),DDSDSID        SAVE IT FOR BROWSE\n*\n         CLC   DDSDSID(3),=C'CTL'    CONTROL BLOCK DISPLAY?\n         BE    GOTDSCTL\n*\n         CLC   DDSDSID(3),=C'CON'    BPSCAN DISPLAY?\n         BE    GOTDSOPR\n*\nADDNEDD  DS    0H\n*\n         L     R1,IOTPTR\n         USING JEDDSECT,1\n         LA    R8,JEDBUFF+24   POINT TO DDNAMES\n         USING DDLINE,8\n*\nDSIDLOOP DS    0H\n         CLI   0(R8),X'FF'               END OF TABLE?\n         BE    DDALLDON                  YES\n         CLC   DDLDSID(3),DDSDSID        DSID MATCH?\n         BE    GOTDSID                   YES\n*\n         LA    R8,DDLINESZ(,R8)          DSID MATCH?\n         B     DSIDLOOP                  YES\n*\nGOTDSID  DS    0H\n*\n         MVC   JOBDDNAM(8),DDN           MOVE DDNAME TO TITLE\n*\n         LA    R5,DDMTTR                POINT TO THE BLOCK\n         MVC   READAREA(4),IXTPTR        MOVE IN THE READ BUFFER\n         MVC   READMTTR(4),DDMTTR        MOVE IN THE READ MTTR\n         MVC   SMBLRECL+2(2),DDLRECL     MOVE IN PDDB LRECL\n*\n         CLC   USERID(5),JOBNAMS     JOBNAME BEGINS WITH USERID?\n         BE    DDAUTHOK         YUP\n*\n*    INVOKE \"JDFCHECK\" MODULE TO ALLOW/DISALLOW ACCESS TO DSID\n*\n         L     R15,JCTPTR\n         USING JEDDSECT,15\n         CALL  JDFCHECK,(JEDUSEID,JOBNAMS,USERID,DDN,DDLDSID,PREFIX,DDRX\n               EMOTE,DDCLASS),VL,MF=(E,ISPARMS)\n         DROP  15\n*\n         LTR   R15,R15          IF ZERO RETURN CODE\n         BZ    DDAUTHOK         ALLOW ACCESS\n         B     DDMSG2           OTHERWISE, GIVE AUTH FAILED MSG\nDDAUTHOK DS    0H\n*\n*    IF AUTH OK, DEFINE THE DATASET TABLE\n*\n         XC    GOTSOME(2),GOTSOME NO RECORDS WRITTEN\n*\n         CLI   SELSAVE,C'B'              WAS BROWSE REQUESTED?\n         BE    OUTLBROW                  YUP, OPEN OUTLIST FILE\n*\n         CLI   SELSAVE,C'R'              WAS REPRINT REQUESTED?\n         BE    REPRNTDS                  YUP, GO DO IT\n*\nDDSTABLE DS    0H\n*\n         L     R2,SMBLRECL               LRECL SPECIFIED.\n         LTR   R2,R2\n         BNZ   *+12                   YES\n         LA    R2,133\n         ST    R2,SMBLRECL               MAKE IT 133\n*\n         PACK  DOUBLEWD(8),DDLINES       GET SPACE FOR ALL THE RECORDS\n         CVB   R2,DOUBLEWD\n         LTR   R2,R2\n         BZ    DDSTABL2\n*\n         ST    R2,SMBMAX\n         MH    R2,SMBLRECL+2             A THOUSAND RECORDS\n         ST    R2,SMBLENG\n*\n         B     DDSTABL3\n*\nDDSTABL2 DS    0H\n*\n         LH    R2,THOUSAND               A THOUSAND RECORDS\n         ST    R2,SMBMAX\n         L     R2,SMBLRECL               GET SPACE FOR\n         MH    R2,THOUSAND               A THOUSAND RECORDS\n         ST    R2,SMBLENG\n*\nDDSTABL3 DS    0H\n*\n         GETMAIN RC,LV=(2),LOC=(ANY)\n         LTR   R15,R15\n         BZ    DDSGMALL\n*\n         SETMSG SMB003\n*\n         L     R2,SMBLRECL               GETTING SPACE FOR\n         MH    R2,THOUSAND               A THOUSAND RECORDS?\n         C     R2,SMBLENG\n         BE    DDSTEND                   YES, DON'T HAVE ENOUGH\n*\n         B     DDSTABL2                  TRY FOR 1000\n*\nDDSGMALL DS    0H\n*\n         ST    R1,SMBSTART\n         LR    R2,R1\n*\n         XC    SMBNUMB(4),SMBNUMB NO RECORDS WRITTEN\n         MVI   READ1ST,0          SET FIRST-TIME-THROUGH\n         MVC   READAREA(4),IXTPTR\n*\nSMBLOOP  DS    0H\n         BAL   R7,READ1REC        GET A RECORD FROM THE SPOOL\n         LTR   R15,15             DID I GET A RECORD\n         BNZ   SMBEOF             NOPE, EOF\n*\n         L     R1,SMBLRECL\n         BCTR  R1,0\n         B     *+10\n         MVC   0(1,R2),DSNLINE\n         EX    R1,*-6\n         LA    R2,1(R1,R2)      BUMP FOR NEXT RECORD\n*\n         L     R1,SMBNUMB       PICK UP RECORD COUNT\n         LA    R1,1(,1)         ADD 1\n         ST    R1,SMBNUMB       SAVE RECORD COUNT\n*\n         C     R1,SMBMAX        COMPARE TO MAX\n         BL    SMBLOOP\n*\n** RATS! RAN OUT OF SPACE, HAVE TO DO ANOTHER GETMAIN.\n*\n*\n         L     R2,SMBLRECL               GET SPACE FOR\n         MH    R2,THOUSAND               A THOUSAND RECORDS\n         A     R2,SMBLENG\n*\n         GETMAIN RC,LV=(2),LOC=(ANY)\n         LTR   R15,R15\n         BNZ   DDSTNUFF\n*\n         LR    R3,R1                    SAVE GETMAIN ADDRESS\n         LR    R14,R1                   ADDRESS\n         LR    R15,R2                   LENGTH\n         L     R0,SMBSTART              ADDRESS\n         L     R1,SMBLENG               LENGTH\n         LR    R4,R1                    SAVE IT\n         MVCL  R14,R0                   MOVE THE OLD STUFF\n*\n         L     R0,SMBLENG\n         L     R1,SMBSTART\n         FREEMAIN RU,LV=(0),A=(1)\n*\n         ST    R3,SMBSTART\n         ST    R2,SMBLENG\n*\n         LH    R2,THOUSAND               A THOUSAND RECORDS\n         A     R2,SMBMAX                 PICK UP OLD MAX\n         ST    R2,SMBMAX                 SET NEW MAX\n*\n         LR    R2,R3\n         AR    R2,R4\n*\n         B     SMBLOOP\n*\n*\nSMBEOF   DS    0H\n*\n         L     R15,SMBNUMB\n         LTR   R15,R15\n         BNZ   DDSSMB\n*\n         SETMSG JDF001C\n*\n         B     DDSSMBFR\n*\nDDSTNUFF DS    0H\n*\n         SETMSG SMB003\n*\nDDSSMB   DS    0H\n*\n         VPUT  SMBSTART,SMBNUMB,SMBLRECL,SMBTITLE,POOL=SHARED\n*\n         SELECT PGM(SMBROWSE)\n*\nDDSSMBFR DS    0H\n*\n         L     R0,SMBLENG\n         L     R1,SMBSTART\n         FREEMAIN RU,LV=(0),A=(1)\n*\n         B     SHODDTBS\n*\nDDSTEND  DS    0H\n*\n         SETMSG SMB003\n         B     SHODDTBS\n*\nTHOUSAND DC    H'1000'\n*\nOUTLBROW DS    0H\n         TM    OUTLIST+48,X'10'   OPEN OK?\n         BO    OUTLREAD           YUP\n         LA    R1,USERIDL\n         ST    R1,ISPARMS\n         LA    R1,ISPARMS\n         CALL  ALLOOUTL\n         L     R1,DCB3ADDR\n         MVC   OUTLIST(DCB3LEN),0(R1)        OUTLIST DCB\n*\nOUTLREAD DS    0H\n*\n         XC    GOTSOME(2),GOTSOME NO RECORDS WRITTEN\n         MVI   READ1ST,0          SET FIRST-TIME-THROUGH\n         MVC   READAREA(4),IXTPTR\n*\nOUTLLOOP DS    0H\n         BAL   R7,READ1REC        GET A RECORD FROM THE SPOOL\n         LTR   R15,15             DID I GET A RECORD\n         BNZ   OUTLEOF            NOPE, EOF\n*\n         LH    R1,GOTSOME       PICK UP RECORD COUNT\n         LA    R1,1(,1)         ADD 1\n         STH   R1,GOTSOME       SAVE RECORD COUNT\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         TM    OUTLIST+48,X'10'   OPEN OK?\n         BO    OUTLLOOP           YUP\n         MVI   SELSAVE,C'S'       NO, SO SET IT TO TABLE SELECT\n         B     DDSTABLE           GO DO IT\n*\nOUTLEOF  DS    0H\n*\nBROWSEDS DS    0H\n*\n* WRITE A LINE OF ASTERISKS TO AVOID EMPTY FILE\n*\n         SR    R1,1\n         CH    R1,GOTSOME         NO RECORDS WRITTEN\n         BNE   OUTLSCLS           NOPE, JUST SHOW THE TABLE\n*\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n         MVC   DSNLINE(17),=CL17'*** FILE IS EMPTY'\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\nOUTLSCLS DS    0H\n*\n** LET \"QSAMPUT\" DO THE CLOSE\n*\n         LA    R15,OUTLIST\n         ST    R15,ISPARMS\n         MVC   ISPARMS+4(4),=X'FFFFFFFF'\n         LA    R1,ISPARMS\n         L     R15,QPUTEPA\n         BALR  R14,R15\n*\n         CONTROL DISPLAY,SAVE\n*\n         CALL  ISPLINK,                                                X\n               (BROWSE,                                                X\n               JDFLST),                                                X\n               VL,MF=(E,ISPARMS)\n*\n         CONTROL DISPLAY,RESTORE\n*\n         CLC   JOBNAMS(6),=C'SYSLOG'       SYSLOG?\n         BE    SHOWAGN2                    YES\n*\n         CLC   SELSAVE(3),=C'BPS'    DOING SPECIAL BPSCAN DISPLAY?\n         BNE   SHODDTAB       REPEAT THE DD TABLE\n*\n         CLC   LVL(6),=C'BPSCAN'       USERID IS BPSCAN??\n         BNE   SHODDTAB       REPEAT THE DD TABLE\n*\n         CLC   COMMAND(2),DHREQ        HELD JOB DISPLAY??\n         BNE   SHODDTAB       REPEAT THE DD TABLE\n*\n         MVC   SELSAVE(3),=C'RQW'    SET REQUEUE TO CLASS \"W\"\n         B     JOBREQ                CHANGE OUTPUT CLASS OF JOB\n*\nGOTDSCTL DS    0H\n         B     SHODDTAB       REPEAT THE DD TABLE\n         TITLE 'JDF -  PERFORM REROUTE FOR A SELECTED DSID'\n*\nREPRNTDS DS    0H\n         CALL  ALLOREPR\n         LTR   R15,R15            CONTINUE?\n         BNZ   SHODDTBS       REPEAT THE DD TABLE\n         L     R1,DCB2ADDR\n         MVC   REPRINT(DCB2LEN),0(R1)        REPRINT DCB\n*        OPEN  (REPRINT,(OUTPUT)),MF=(E,OPEN1)\nREPRREAD DS    0H\n*\n         MVI   READ1ST,0          SET FIRST-TIME-THROUGH\n         MVC   READAREA(4),IXTPTR\n*\nREPRLOOP DS    0H\n         BAL   R7,READ1REC        GET A RECORD FROM THE SPOOL\n         LTR   R15,15             DID I GET A RECORD\n         BNZ   REPREOF            NOPE, EOF\n*\n         LA    R1,DSNLINE         POINT TO RECORD JUST READ\n*\nREPRTSCC DS    0H\n*\n         TM    REPRINT+36,X'02'   MACHINE CARRIAGE CONTROL?\n         BO    REPRCARM           YES, GO CHECK IT.\n         TM    REPRINT+36,X'04'   ASA CARRIAGE CONTROL?\n         BZ    REPRPUT1           NO, JUST PRINT\n*\n         MVI   DSNLINE-1,C' '     SET DEFAULT CARRIAGE CONTROL\n*\n         CLI   0(R1),C'1'         SKIP TO CHANNEL 1?\n         BE    REPRPUT1           YES\n         CLI   0(R1),C'+'         SUPPRESS SPACE?\n         BE    REPRPUT1           YES\n         CLI   0(R1),C' '         SPACE 1 LINE?\n         BE    REPRPUT1           YES\n         CLI   0(R1),C'0'         SPACE 2 LINES?\n         BE    REPRPUT1           YES\n         CLI   0(R1),C'-'         SPACE 3 LINES?\n         BE    REPRPUT1           YES\n*\n         LA    R1,DSNLINE-1\n         B     REPRPUT1           YES\n*\nREPRCARM DS    0H\n*\n         MVI   DSNLINE-1,X'09'    SET DEFAULT CARRIAGE CONTROL\n*\n         CLI   0(R1),X'89'        SKIP TO CHANNEL 1?\n         BE    REPRPUT1           YES\n         CLI   0(R1),X'8B'        SKIP TO CHANNEL 1?\n         BE    REPRPUT1           YES\n         CLI   0(R1),X'0B'        SKIP A LINE?\n         BE    REPRPUT1           YES\n         CLI   0(R1),X'11'        SKIP 2 LINES?\n         BE    REPRPUT1           YES\n         CLI   0(R1),X'13'        SKIP 2 LINES?\n         BE    REPRPUT1           YES\n         CLI   0(R1),X'19'        SKIP 3 LINES?\n         BE    REPRPUT1           YES\n         CLI   0(R1),X'1B'        SKIP 3 LINES?\n         BE    REPRPUT1           YES\n*\n         LA    R1,DSNLINE-1\n         B     REPRPUT1           YES\n*\nREPRPUT1 DS    0H\n         L     R15,QPUTEPA\n         LA    R0,REPRINT\n         ST    R0,ISPARMS\n         ST    R1,ISPARMS+4\n         LA    R1,ISPARMS\n         BALR  R14,R15\n*\n         TM    REPRINT+48,X'10'   OPEN OK?\n         BO    REPRLOOP\n         SETMSG JDF008\n         B     SHODDTBS           GO DO IT\n*\nREPREOF  DS    0H\n*\n         SETMSG JDF009\n         B     REPRCLOS\n*\nREPRCLOS DS    0H\n*\n** LET \"QSAMPUT\" DO THE CLOSE\n*\n         LA    R15,REPRINT\n         ST    R15,ISPARMS\n         MVC   ISPARMS+4(4),=X'FFFFFFFF'\n         LA    R1,ISPARMS\n         L     R15,QPUTEPA\n         BALR  R14,R15\n*\n         B     SHODDTBS       REPEAT THE DD TABLE\n*\n         TITLE 'JDF -  PERFORM SPECIAL FORMAT BPSCAN DISPLAY'\nGOTDSOPR DS    0H\n         LA    R1,USERIDL\n         ST    R1,ISPARMS\n         LA    R1,ISPARMS\n         CALL  ALLOOUTL\n         L     R1,DCB3ADDR\n         MVC   OUTLIST(DCB3LEN),0(R1)        OUTLIST DCB\n*\n         B     DOBPSCAN           YUP\n***********************************************************************\n*                                                                     *\n*   SET UP SPECIAL FORMAT CONDITION CODE SCAN                         *\n*                                                                     *\n***********************************************************************\nDOBPSCAN DS    0H\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n         MVC   DSNLINE(58),BPSFORM\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         TM    OUTLIST+48,X'10'   OPEN OK?\n         BO    DOBPOPOK           YES\n         WTO   'OUTLIST OPEN FAILED',ROUTCDE=11\n         DC    H'0'\n         B     SHOWAGN2       ALL DONE\n*\nDOBPOPOK DS    0H\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n         MVC   LABEL1(13),EXPECTED\n*\n*  FIRST LOCATE THE DDN  FOR DSID 1 TO PICK UP THE COND COMMENT CARD\n*\n*\n         L     R1,IOTPTR\n         USING JEDDSECT,1\n         LA    R1,JEDBUFF+24   POINT TO DDNAMES\n         DROP  8\n         USING DDLINE,1\n*\nDSIDL001 DS    0H\n         CLI   0(R1),X'FF'               END OF TABLE?\n         BE    NOTDSID1                  YES\n         CLC   DDLDSID(3),=C'001'       DSID MATCH?\n         BE    GOTDSID1                  YES\n*\n         LA    R1,DDLINESZ(,R1)          DSID MATCH?\n         B     DSIDL001                  YES\n*\nNOTDSID1 DS    0H\n*\n         WTO   'DSID 001 JCL MISSING FOR THIS JOB',ROUTCDE=11\n         B     GETJMREC                  GO GET MESSAGES\n*\nGOTDSID1 DS    0H\n*\n         LA    R5,DDMTTR                 POINT TO THE BLOCK\n         MVC   READAREA(4),IXTPTR        MOVE IN THE READ BUFFER\n         MVC   READMTTR(4),DDMTTR        MOVE IN THE READ MTTR\n*\n         MVI   READ1ST,0          SET FIRST-TIME-THROUGH\n*\n         MVI   BOPR1ST,1          SET FIRST-TIME-THROUGH\n         XC    GOTSOME(2),GOTSOME NO RECORDS WRITTEN\n*\nDOREAD1C DS    0H\n         BAL   R7,READ1REC        GET A RECORD FROM THE SPOOL\n         LTR   R15,15             DID I GET A RECORD\n         BNZ   BGNJMREC           NOPE, EOF\n*\n         LA    R1,DSNLINE\n*\nBPCOMMLP DS    0H\n*\n         CLC   0(3,R1),=C'//*'   COMMENT LINE?\n         BNE   DOREAD1C         YES, SKIP IT\n*\n         LA    R1,3(,1)          BUMP\n         LA    R7,65             MAXIMUM ITERATIONS\n*\nBPCOMML1 DS    0H\n         CLC   0(4,R1),=C'COND'  CONDITION CODE LINE\n         BE    BPCOMMPT          YUP\n         LA    R1,1(,1)\n         BCT   R7,BPCOMML1\n         B     DOREAD1C\n*\nBPCOMMPT DS    0H\n         MVC   WRKLINE(67),DSNLINE+3\n         MVC   DSNLINE(13),LABEL1\n         MVI   LABEL1,C' '\n         MVC   LABEL1+1(12),LABEL1\n         MVC   DSNLINE+13(67),WRKLINE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         B     DOREAD1C\n*\nBGNJMREC DS    0H\n*\n*\nGETJMREC DS    0H\n*\n*\n*    NOW LOCATE THE DDN  FOR DSID 4 TO PICK UP THE COND CODES, ETC.\n*\n*\n         USING JEDDSECT,1\n         L     R1,IOTPTR\n         LA    R1,JEDBUFF+24   POINT TO DDNAMES\n         USING DDLINE,1\n*\nDSIDL004 DS    0H\n         CLI   0(R1),X'FF'               END OF TABLE?\n         BE    NOTDSID4                  YES, ISSUE MESSAGE\n         CLC   DDLDSID(3),=C'004'       DSID MATCH?\n         BE    GOTDSID4                  YES\n*\n         LA    R1,DDLINESZ(,R1)          DSID MATCH?\n         B     DSIDL004                  YES\n*\nNOTDSID4 DS    0H\n*\n         WTO   'DSID 004 MSGS MISSING FOR THIS JOB',ROUTCDE=11\n         B     OUTLSCLS                  YES, JUST BROWSE WHAT I GOT\n*\nGOTDSID4 DS    0H\n*\n         LA    R5,DDMTTR                 POINT TO THE BLOCK\n         MVC   READAREA(4),IXTPTR        MOVE IN THE READ BUFFER\n         MVC   READMTTR(4),DDMTTR        MOVE IN THE READ MTTR\n*\n         MVI   READ1ST,0          SET FIRST-TIME-THROUGH\n*\nGETJMLOP DS    0H\n         BAL   R7,READ1REC        GET A RECORD FROM THE SPOOL\n         LTR   R15,15             DID I GET A RECORD\n         BNZ   SHOWBP       NOPE, END OF DATASET.\n*\n         LA    R1,DSNLINE\n*\n*\n         CLC   0(7,R1),=C'IEF142I'     COND LINE\n         BE    BPGOTCON                YUP\n         CLC   1(7,R1),=C'IEF142I'     COND LINE\n         BE    BPGOTCON                YUP\n         CLC   0(7,R1),=C'IEF472I'     COND LINE\n         BE    BPGOTCON                YUP\n         CLC   1(7,R1),=C'IEF472I'     COND LINE\n         BE    BPGOTCON                YUP\n*\n         CLC   1(7,R1),=C'IEF285I'  CAT/UNCAT REC?\n         BE    *+14                 NO\n         CLC   0(7,R1),=C'IEF285I'  CAT/UNCAT REC?\n         BNE   BPUNCAT              NO\n*\n         CLC   55(3,R1),=C'CAT'  CATALOGED REC?\n         BE    BPCATED              YUP\n         CLC   56(3,R1),=C'CAT'  CATALOGED REC?\n         BE    BPCATED              YUP\n*\n         CLC   56(3,R1),=C'UNC'  UNCATALOGED REC?\n         BE    *+14              YES\n         CLC   55(3,R1),=C'UNC'  UNCATALOGED REC?\n         BNE   GETJMLOP          NOPE\n*\n         CLI   BOPR1ST,2            IF SECOND TIME AROUND\n         BE    GETJMLOP             SKIP IT\n*\n         AP    UNCATNUM(3),P1(1)\n         B     GETJMLOP            GO GET THE NEXT ONE\n*\nBPUNCAT  DS    0H\n         CLC   1(7,R1),=C'IEF287I'  \"NOT CATALOGED\" REC?\n         BE    *+14                 YES\n         CLC   0(7,R1),=C'IEF287I'  \"NOT CATALOGED\" REC?\n         BNE   GETJMLOP             NO\n*\n         CLC   56(3,R1),=C'NOT'     ACTUAL RECORD?\n         BE    *+14                 YES\n         CLC   55(3,R1),=C'NOT'     ACTUAL RECORD?\n         BNE   GETJMLOP          NOPE\n*\n         CLI   BOPR1ST,2            IF SECOND TIME AROUND\n         BNE   BPUNADD              GO WRITE IT OUT\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         BAL   R7,READ1REC        GET A RECORD FROM THE SPOOL\n         LTR   R15,15             DID I GET A RECORD\n         BNZ   SHOWBP       NOPE, END OF DATASET.\n         B     BPPUT1        YUP, GO WRITE IT OUT\n*\nBPUNADD  DS    0H\n         AP    NCATNUM(3),P1(1)\n         B     GETJMLOP            GO GET THE NEXT ONE\n*\nBPGOTCON DS    0H\n         LA    R1,DSNLINE+35       BEGIN TEST FOR COND CODE 0\n         LA    R15,80\nBPTSTCON DS    0H\n         CLC   0(10,R1),=C'COND CODE '\n         BE    BPGOTCND\n         CLC   0(15,R1),=C'COMPLETION CODE' FOR ABEND LINE\n         BE    BPGOTCND\n         LA    R1,1(,1)            BUMP\n         BCT   R15,BPTSTCON        LOOP\nBPGOTCND DS    0H\n*\n         CLI   BOPR1ST,2            IF SECOND TIME AROUND\n         BE    BPTSTBAD             GO TEST FOR NON-ZERO\n*\n         AP    CONDNUM(3),P1(1)\n         CLC   10(4,R1),=C'0000'   CONDITION CODE ZERO\n         BNE   GETJMLOP\n*\n         AP    CONDZERO(3),P1(1)\n         B     GETJMLOP            GO GET THE NEXT ONE\n*\nBPTSTBAD DS    0H\n         CLC   10(4,R1),=C'0000'   CONDITION CODE ZERO\n         BE    GETJMLOP            GO GET THE NEXT ONE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         B     GETJMLOP            GO GET THE NEXT ONE\n*\nBPCATED  DS    0H\n*\n         CLI   BOPR1ST,2            IF SECOND TIME AROUND\n         BE    GETJMLOP             GO GET THE NEXT ONE\n*\n         AP    CATNUM(3),P1(1)\n         B     GETJMLOP            GO GET THE NEXT ONE\n*\nBPPUT1   DS    0H\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         B     GETJMLOP            GO GET THE NEXT ONE\n*\nSHOWBP   DS    0H\n         CLI   BOPR1ST,2            IF SECOND TIME THROUGH\n         BE    DOSHOWBP             ALL DONE\n         MVI   BOPR1ST,2\n*\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n         MVC   DSNLINE(13),FOUND\n*\n*\n* COND CODES\n         MVC   DSNLINE+13(16),CONDMS\n         MVC   DSNLINE+29(6),EDIT6   DO EDIT\n         ED    DSNLINE+29(6),CONDNUM DO EDIT\n* DATA SETS CATALOGED\n         MVC   DSNLINE+36(9),CATSMS\n         MVC   DSNLINE+45(6),EDIT6   DO EDIT\n         ED    DSNLINE+45(6),CATNUM DO EDIT\n* DATA SETS UNCATALOGED\n         MVC   DSNLINE+52(11),UNCATMS\n         MVC   DSNLINE+63(6),EDIT6   DO EDIT\n         ED    DSNLINE+63(6),UNCATNUM\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n* ZERO COND CODES\n         CP    CONDNUM,CONDZERO      IF ALL CONDITION CODES ZERO\n         BE    ALLCND0               ISSUE THE MESSAGE\n         SP    CONDNUM,CONDZERO      IF ALL CONDITION CODES ZERO\n         MVC   DSNLINE+13(20),CONDMSNZ\n         MVC   DSNLINE+33(6),EDIT6   DO EDIT\n         ED    DSNLINE+33(6),CONDNUM\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         B     SHOWBPFR              ISSUE THE MESSAGE\nALLCND0  DS    0H\n         MVC   DSNLINE+13(24),CONDMS0\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\nSHOWBPFR DS    0H\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         MVC   DSNLINE(58),BPSFORM\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         B     GETJMREC             GO DO IT AGAIN\nDOSHOWBP DS    0H\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         MVC   DSNLINE(58),BPSFORM\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n*\n         L     R15,QPUTEPA\n         CALL  (15),(OUTLIST,DSNLINE),VL,MF=(E,ISPARMS)\n*\n         MVC   DDSDSID(3),=C'004'  JOB MESSAGES\n         MVC   SELSAVE(3),=C'BPS'    DOING CONDITION CODE SCAN\n*\n         B     ADDNEDD\n*\n*\nGOTDDCMD DS    0H\n         B     SHODDTAB       REPEAT THE DD TABLE\n         TITLE 'JDF -  DSID READ 1 RECORD SUBROUTINE'\nREAD1REC DS    0H\n         ST    R7,RD1SAVE7\n         CLI   READ1ST,0      FIRST TIME THROUGH?\n         BE    READ1OPN       YUP\n         CLI   DSIDEOF,0      IS IT EOF\n         BNE   READ1EOF       YUP\n         LM    R4,R7,RD1SAVE\n         B     SKIP1REC\nREAD1OPN DS    0H\n         MVI   READ1ST,1      TURN OFF SWITCH\n         MVI   DSIDEOF,0      NOT EOF\nREAD1NXT DS    0H\n***********************************************************************\n*                                                                     *\n*   PROCESS DATASET                                                   *\n*                                                                     *\n***********************************************************************\nNEXTDSA  L     R4,0(R5)       DISK ADDR OF NEXT BLOCK\n         LTR   R4,R4          IS THE DISK ADDR ZERO?\n         BZ    READ1EOF       YUP END OF DATASET.\n         L     R5,IXTPTR                 POINT TO THE BLOCK\n         ST    R4,READMTTR    STORE DISK ADDR IN TABLE\n         BAL   R7,READSPAC               READ IN THE BLOCK\n         CLC   JDFJBKEY(4),4(R5) DOES THE JOBID MATCH?\n         BNE   READ1EOF       NO. END OF DATASET.\n         LA    R4,10(R5)      ADDR OF FIRST RECORD IN BLOCK\n***********************************************************************\n*                                                                     *\n*   PROCESS RECORDS                                                   *\n*                                                                     *\n***********************************************************************\nNEXTDSR  CLI   0(R4),X'FF'    IS LENGTH BYTE FF?\n         BE    NEXTDSA        YES. END OF BLOCK.\n         TM    1(R4),X'10'    IS THIS A SPANNED RECORD?\n         BO    SPANSKIP       YES. SKIP IT.\n         SR    R6,R6          ZERO OUT REG\n         IC    R6,0(R4)       INSERT LENGTH\n         LR    R7,R6          SAVE RECORD LENGTH\n         LR    R1,R4          SAVE RECORD LOCATION\n         MVI   CCFLAG,0       NO CARRIAGE CONTROL\n         TM    1(R4),X'80'    IS THERE CARRIAGE CONTROL?\n         BZ    *+12           NO.\n         LA    R1,1(,1)       BUMP 1\n         MVI   CCFLAG,1       THERE IS CARRIAGE CONTROL\n         TM    1(R4),X'08'    IS THIS RECORD TO BE IGNORED?\n         LR    R4,R1          UPDATE RECORD POINTER\n         BNZ   SKIP1REC       YES. SKIP IT.\n         LTR   R7,R7          LENGTH ZERO\n         BZ    SKIP1REC       YES. SKIP IT.\n         BCTR  R7,0           MINUS 1\n         N     R7,ZEROFF      LOP OFF LEFT BYTES\n         CH    R7,=H'133'     IS THE RECORD BIGGER THAN LINE WIDTHLBDMC\n         BNH   *+8            NO. USE RECORD LENGTH.\n         LH    R7,=H'133'          YES. USE LINE WIDTH            LBDMC\n         LA    R1,3(R1)       OFFSET PAST REC HDR\n         MVI   DSNLINE,C' '\n         MVC   DSNLINE+1(132),DSNLINE\n         CLI   CCFLAG,0       IS THERE CARRIAGE CONTROL?\n         BE    *+10           NOPE\n         BCTR  R1,0           BACK UP 1 TO PICK UP CC\n         LA    R7,1(,7)       AND ADD 1 TO LENGTH\n         EX    R7,MOVEDATA\n         STM   R4,R7,RD1SAVE\n         SR    R15,15         GOT A RECORD\nREAD1RTN DS    0H\n         L     R14,RD1SAVE7\n         BR    R14\nREAD1EOF DS    0H\n         LA    R15,4          EOF\n         MVI   READ1ST,0      FIRST TIME THROUGH IS FORCED\n         MVI   DSIDEOF,1      SET EOF\n         B     READ1RTN\n*\nSKIP1REC LA    R4,3(R6,R4)    INCREMENT TO NEXT RECORD\n         B     NEXTDSR        PROCESS NEXT RECORD\nSPANSKIP LH    R6,2(R4)       LENGTH OF SEGMENT\n         TM    1(R4),X'08'    IS THIS THE FIRST SEGMENT?\n         BO    SPAN1STR       YES. USE HEADER LENGTH OF 6.\n         LA    R4,4(R6,R4)    UPDATE RECORD POSITION\n         B     NEXTDSR        PROCESS NEXT RECORD\nSPAN1STR LA    R4,6(R6,R4)    UPDATE RECORD POSITION\n         B     NEXTDSR        PROCESS NEXT RECORD\n*\nMOVEDATA MVC   DSNLINE(1),0(R1)   MOVE IN LINE\n*\n         TITLE 'JDF -  MVS COMMAND   SUBROUTINE'\nISSUECMD DS    0H\n*\n         SLR   R0,0                    CLEAR REG 0\n         LA    R1,CMDISMF             GET ADDRESS OF COMMAND I SMF\n         LA    R15,1\n         SVC   JESSVC                  ISSUE COMMAND VIA SVC 34\n         BR    R7\n*\n         TITLE 'JDF -  READ 1 BLOCK FROM THE SPOOL'\nREADSPAC DS    0H\n         L     R1,READMTTR\n         NI    READAREA,X'7F'  CLEAR LEFT BIT\n         L     R0,READAREA\n         LA    R15,88\n         SR    R0,R15\n         LA    R15,3\n         SVC   JESSVC\n         BR    R7\n*\n         TITLE 'JDF -  INITIALIZE MESSAGE SUBROUTINE'\nINITMSG  MVI   MESSAGE,C' '   BLANK OUT THE\n         MVC   MESSAGE+1(79),MESSAGE MESSAGE BUFFER\n         MVC   MSGJNME,JOBJNAME PUT IN THE JOB NAME\n         SR    R1,R1\n         ICM   R1,3,JOBJOBNO   JOB'S NUMBER\n         TM    JOBFLAG3,QUEJOB  BATCH JOB IF ZEROS\n         BNZ   STCORTSU     NO => TRY STC OR TSU\n         MVC   MSGJBTYP,JOB   INDICATE IT'S A JOB\n         B     CONVERT#       PUT IN THE JOB NUMBER\nSTCORTSU DS    0H\n         CLI   JOBFLAG3,QUETSU  TSO USER ?\n         BNE   ITSTC          NO => IT'S STC\n         MVC   MSGJBTYP,TSU   INDICATE TSU\n         B     CONVERT#       PUT IN THE TSU NUMBER\nITSTC    MVC   MSGJBTYP,STC   INDICATE STC\nCONVERT# CVD   R1,DOUBLEWD    CONVERT TO PACKED DECIMAL\n         UNPK  MSGJOB#,DOUBLEWD+5(3) CONVERT TO ZONED DECIMAL\n         OI    MSGJOB#+L'MSGJOB#-1,C'0' CONVERT TO EBCDIC\n         CLI   MSGJOB#,C'0'\n         BNE   NUMDONE\n         MVI   MSGJOB#,C' '\n         CLI   MSGJOB#+1,C'0'\n         BNE   NUMDONE\n         MVI   MSGJOB#+1,C' '\n         CLI   MSGJOB#+2,C'0'\n         BNE   NUMDONE\n         MVI   MSGJOB#+2,C' '\n         CLI   MSGJOB#+3,C'0'\n         BNE   NUMDONE\n         MVI   MSGJOB#+3,C' '\n         CLI   MSGJOB#+4,C'0'\n         BNE   NUMDONE\n         MVI   MSGJOB#+4,C' '\nNUMDONE  DS    0H\n*\n         TM    JOBFLAGS,QUEHOLD1+QUEHOLD2+QUEPURGE+QUEOPCAN\n         BZR   R7             NO SPECIAL FLAGS\n         MVC   MSGSPCST(L'PURGE),PURGE ASSUME THE JOB'S TO BE PURGED\n         TM    JOBFLAGS,QUEPURGE JOB TO BE PURGED?\n         BOR   R7             YES => RETURN TO OUR CALLER\n         MVC   MSGSPCST(L'CANCEL),CANCEL ASSUME JOB CANCELLED\n         TM    JOBFLAGS,QUEOPCAN JOB CANCELLED?\n         BOR   R7             YES => RETURN TO OUR CALLER\n         MVC   MSGSPCST(L'HOLD),HOLD   SINGLE JOB HOLD\n         TM    JOBFLAGS,QUEHOLD1       SINGLE JOB HOLD?\n         BOR   R7             YES => RETURN TO OUR CALLER\n         MVC   MSGSPCST(L'DUPLICAT),DUPLICAT MUST BE DUPLICATE JOB\n         BR    R7             RETURN TO OUR CALLER\n         TITLE 'MISCELLANEOUS CONSTANTS'\n*\n         LTORG\nP1       DC    PL1'+1'\nP3ZERO   DC    PL3'+0'\nCATSMS   DC    CL9'CATALOGS='\nUNCATMS  DC    CL11'UNCATALOGS='\nNOTCATMS DC    CL24'NOT CATALOGED ERRORS    '\nCONDMS   DC    CL16'CONDITION CODES='\nNZCONDMS DC    CL24'NON-ZERO CONDITION CODES'\nEXPECTED DC    CL13'  EXPECTED:  '\nFOUND    DC    CL13'     FOUND:  '\n*\nVCOPY    DC    CL8'VCOPY '\nZUSER    DC    CL8'ZUSER '\nZPREFIX  DC    CL8'ZPREFIX'\nSPFMOVE  DC    CL8'MOVE   '\nF128K    DC    F'131072'\n         DS    0F\nZEROFF   DC    X'000000FF'\n*\n*\n***********************************************************************\n*   DEVICE TABLES FOR LOCAL AND REMOTE DEVICES                        *\n***********************************************************************\n         DS    0H\nDEVTABLE DC    AL1(0),CL8'OUT QUE ',AL1(6),CL8'RDR Q   '\n         DC    AL1(7),CL8'PRINTER',AL1(5),CL8'PUNCH Q'\nDEVTYPEL DC    AL2((*-DEVTABLE)/4)\nRMTDEVS  DC    C'**',C'RD',C'PR',C'PU'\n         DC    C'012345678XMTTER  ABC'\nHIGHBIT  EQU   X'80'          MAKES JOB CLASS PRINTABLE\n*\n* HIGH-LIGHTED FIELDS\n*\nSTREQ    DC    C'ST'\nDQREQ    DC    C'DQ'\nDEREQ    DC    C'DE'\nDAREQ    DC    C'DA'\nDHREQ    DC    C'DH'\nDLREQ    DC    C'DL'\nDOREQ    DC    C'DO'\nDRREQ    DC    C'DR'\nDTREQ    DC    C'DT'\nDWREQ    DC    C'DW'\n*\n*\nL8       DC    F'8'\n*\nCONDMS0  DC    CL24'ALL CONDITION CODES 0000'\nCONDMSNZ DC    CL20'NON-ZERO COND CODES '\n*\n*\nJDFMSG1  DC    CL8'JDF001'\nJDFMSG2  DC    CL8'JDF002'\nJDFMSG3  DC    CL8'JDF003'\nJDF005   DC    CL8'JDF005'\nJDF006   DC    CL8'JDF006'\nJDF007   DC    CL8'JDF007'\n*\nBROWSE   DC    CL8'BROWSE'\n*\nTHREEPT  DC    X'2020204B'\nEDIT4    DC    X'40202021'\nEDIT6    DC    X'402020202121'\nEDIT10   DC    X'40206B2020206B202120'\n*\nJOB      DC    C'JOB'\nTSU      DC    C'TSU'\nSTC      DC    C'STC'\nHOLD     DC    C'HOLD'\nPURGE    DC    C'PURG'\nCANCEL   DC    C'CANC'\nDUPLICAT DC    C'DUPL'\nACTIVE   DC    C'ACTIVE  '    STARTED TASK\nLOGGEDON DC    C'LOGGED ON '  TSO USER\nEXECUTNG DC    C'EXECUTING '    JOB\nINPQUE   DC    C'ON INPUT  '      JOB\nXMTQUE   DC    C'AWAITING XMIT'\nPURQUE   DC    C'ON PURGE Q'\nSYSREC   DC    C'ON SYS RCV'\nDMPQUE   DC    C'ON $DUMP Q'\nOUTQUE   DC    C'ON OUT QUE'\n*\nDUMM     DS    0H\n*\n*\nFZEROS   DC    F'0'\nF4       DC    F'4'\nF8       DC    F'8'\nL3       DC    F'3'\n*\nH1       DC    H'1'\nH2       DC    H'2'\nH8       DC    H'8'\n*\nSPACES   DC    CL44' '\nCZEROS   DC    CL8'00000000'\n*\nCOMMAC   DC    C',C='\nPUPDATA  DC    C',P=+99'\n*\n*\nRMTABLEA DC    A(RMTABLE)\n*\nDCB2ADDR DC    A(DCB2)\nDCB3ADDR DC    A(DCB3)\n*\n         SPACE 5\nDCB2 DCB DDNAME=REPRINT,DSORG=PS,MACRF=(PM)\nDCB2LEN  EQU   *-DCB2\nDCB3 DCB DDNAME=OUTLIST,DSORG=PS,MACRF=(PM)\nDCB3LEN  EQU   *-DCB3\n*\nRMTABLE  DS    0H\n         DC    H'001',CL24' 01 RCHD8100 CHICAGO8100'\n         DC    H'002',CL24' 02 RKSCHMIT KLIENSCHMIT'\n         DC    H'003',CL24' 03 CIS6670  6670'\n         DC    H'004',CL24' 04 CISCHM   CHEM WACKER'\n         DC    H'005',CL24' 05 NOT ASSIGNED     '\n         DC    H'006',CL24' 06 RRING    RINGWOOD'\n         DC    H'007',CL24' 07 RCHEMTST CHEM TEST  '\n         DC    H'008',CL24' 08 PRODSERV OPER 3262  '\n         DC    H'009',CL24' 09 RCARS    CARSTAB '\n         DC    H'010',CL24' 10 RFNBC    1ST NAT BNK'\n         DC    H'011',CL24' 11 RVENT    VENTRON '\n         DC    H'012',CL24' 12 RDYN     DYNACHEM '\n         DC    H'013',CL24' 13          CARSTAB SNA'\n         DC    H'014',CL24' 14 RELK     ELKTON '\n         DC    H'015',CL24' 15 RHUNT    HUNTSVILLE'\n         DC    H'016',CL24' 16 RLONG    LONGHORN '\n         DC    H'017',CL24' 17 RLOUIS   LOUISIAN '\n         DC    H'018',CL24' 18 RWAS     WASATCH '\n         DC    H'019',CL24' 19 RCHEMGRN GREENVILL'\n         DC    H'020',CL24' 20 RRING2   RINGWOOD '\n         DC    H'021',CL24' 21 RELKG    ELK GROV '\n         DC    H'022',CL24' 22 RPOLY    POLYMER  '\n         DC    H'023',CL24' 23 RMANI    MANISTEE '\n         DC    H'024',CL24' 24 RPATE    PATERSON '\n         DC    H'025',CL24' 25 RSANT    SANTA FE '\n         DC    H'026',CL24' 26 RARMS    ARMSTRNG '\n         DC    H'027',CL24' 27 RWEEK    WEEKS ISL'\n         DC    H'028',CL24' 28 RMOSS    MOSS POINT'\n         DC    H'029',CL24' 29 RPRIN    PRINCETON'\n         DC    H'030',CL24' 30 RWOOD    RINGWOOD   '\n         DC    H'031',CL24' 31 MVSB     NOTASSIGNED'\n         DC    H'032',CL24' 32          DYNACHM SNA'\n         DC    H'033',CL24' 33          LOUISINA ML'\n         DC    H'034',CL24' 34          NOTASSIGNED'\n         DC    H'035',CL24' 35 RSANT2   SANTA FE P2'\n         DC    H'036',CL24' 36 RELKG2   ELK GROV P2'\n         DC    H'037',CL24' 37 RBCHEM   BEE CHEM 38'\n         DC    H'038',CL24' 38          NOTASSIGNED'\n         DC    H'039',CL24' 39          NOTASSIGNED'\n         DC    H'040',CL24' 40          NOTASSIGNED'\n*\n         TITLE 'WORKING STORAGE AREAS'\nWORKAREA DSECT\n         DS    18F\nJJSPARM  DS    F\nJCTPTR   DS    F\nIOTPTR   DS    F\nIXTPTR   DS    F\nSSOBPTR  DS    F\nWTRSAV6  DS    F\nACOUNT   DS    F\nPCOUNT   DS    F\nSCOUNT   DS    F\nDISPLRC  DS    F\n*\nQPUTEPA  DS    F\n*\nSMBSTART DS    F\nSMBLRECL DS    F\nSMBNUMB  DS    F\nSMBLENG  DS    F\nSMBMAX   DS    F\nCMDISMF  DS    F\nCMDLINE  DS    CL30\nLABEL1   DS    CL13\nBOPR1ST  DS    X\n*\nDATYPE   DS    CL3\nCONDZERO DS    PL3\nRURMT    DS    C\nRUDEST   DS    C\n         DS    CL6\n*\n*\nPFXLEN   DS    F\n*\n*\nJDFJBKEY DS    XL4\nPREFIX   DS    CL8\n         DS    0F\nUIDLEN   DS    XL3\nUSERIDL  DS    XL1\nUSERID   DS    CL8\nJDFLSTL  DS    XL1\nJDFLST   DS    CL44\nBPSCANJO DS    CL8\nRQRMT    DS    C\nRDEST    DS    C\n         DS    CL4\n*\n*\nBPSFORM  DS    CL27\nSMBTITLE EQU   *\nJOBID    DS    CL3            SAVE JOB TYPE, STC, TSU, OR JOB\nJOBNUMS  DS    CL5            SAVE JES JOB NUMBER\n         DS    C\nJOBNAMS  DS    CL8            SAVE JOB NAME\n         DS    C\nJOBUSRID DS    CL7\nJOBOUDAT DS    CL5\n         DS    C\nJOBDDNAM DS    CL8\n         DS    CL5\nBRODSID  DS    CL3\n         DS    CL2\nBPSFORML EQU   *-BPSFORM\nSSREQRC  DS    F\nDDSDSID  DS    CL3\n*\nDSIDEOF  DS    XL1                     EOF FLAG = 1\nGOTSOME  DS    H                       OUTPUT COUNT\n*\nDOUBLEWD DS    D              PACKED DECIMAL WORK AREA\nJOBNUMP  DS    D\nISPARMS  DS    9F\nRD1SAVE  DS    4F\nRD1SAVE7 DS    F\nDDIOTRAK DS    F\nDDJCTRAK DS    F\nREADSPA7 DS    F\nREADMTTR DS    F\nSLOGMTTR DS    F\nIXTMTTR  DS    XL4                 STARTING TRACK ADDR\nSAVE5    DS    5F\nREADAREA DS    F\nJQESHOLD DS    A              RETURN ADDRESS HOLD FOR OUTJQES\nJOESHOLD DS    A              RETURN ADDRESS HOLD FOR OUTJOES\n*\nJOBNUMH  DS    H\n*\nGOTANYST DS    XL1     DID I FIND ANY MATCHES, Y=1, N=0\nREAD1ST  DS    X\n*     THE ISP TABLE FLAGS INDICATE NO ACTIVE TABLE (0), OR ONE EXISTS\nATABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY ACTIVE\" TABLE\nDTABFL   DS    XL1     DO I HAVE A CURRENT DD NAME TABLE\n*\nUSRJLENG DS    CL1\n*\nDRNUM    DS    XL2\nDQCLASS  DS    CL1\nDOCLASS  DS    CL1\n*\nCOMMAND  DS    CL2\nCMDSAVE  DS    CL2\nENTCOMD  DS    CL2\nMSGJNAME DS    CL8     SAVE FOR MESSAGE\n*\nCCFLAG   DS    XL1\n*\nCOPYFLAG DS    XL1\nSLOGFLAG DS    XL1\n*\n         DS    XL1\nDSNLINE  DS    CL133\n         DS    CL133\n*\nLVL      DS    CL8\n*\nJCMD     DS    CL40             COMMAND LINE  FOR JDFDATAB\nDCMD     DS    CL40             COMMAND LINE  FOR JDFDDTAB\n*\nDDNLINE  DS    CL80\nDSEL     DS    CL3\nJOBLINE  DS    CL80\nTSEL     DS    CL3\n*\nJDFZ     DS    CL3\n*\nSELSAVE  DS    CL40           LINE SELECTION CODE\n*\nWRKLINE  DS    CL80\n*                           NOTE THESE FIELDS ARE POSITION-DEPENDENT\nCONDNUM  DS    PL3\nCATNUM   DS    PL3\nUNCATNUM DS    PL3\nNCATNUM  DS    PL3\nNZCONDS  DS    PL3\n*\nMESSAGE  EQU   *              OUTPUT MESSAGE BUFFER\nMSGJBTYP DS    CL3            JOB OR TSU OR STC\nMSGJOB#  DS    CL5            JOB NUMBER\n         DS    C\nMSGJNME  DS    CL8            JOB NAME\n         DS    C\nMSGSTYPE DS    CL16           JOB STATUS\n         DS    C\nMSGQTYPE DS    CL1            JOB CLASS\n         DS    C\nMSGSPCST DS    CL4            SPECIAL STATUS\n         DS    CL1\nMSGJQTYP DS    CL2            JQETYPE\nMSGALINE DS    CL10\n         DS    C\nMSGOCLAS DS    CL1\n         DS    C\nMSGFORM  DS    CL4            JOB CLASS\n         DS    C\nMSGBURST DS    CL1            BURST=Y\n         DS    C\nMSGSNODE DS    CL2            NODE FLAG\n         DS    C\nMSGSREMT DS    CL8          REMOTE FLAG\nLMESSAGE EQU   *-MESSAGE      LENGTH OF THE MESSAGE BUFFER\n         DS    CL5            PAD OUT TO 75\n         DS    CL80           FILLER\n*\nOPEN1    DS    F\n*\nREPRINT  DS    XL(DCB2LEN)\nOUTLIST  DS    XL(DCB3LEN)\n*\n         DS    0F\nSSOBWTO2 DS    XL(SSOBWTOL)\n*\n         DS    0F\nSSOBAREA DS    XL(SSOBALL)\n*\nRMT1    DS     CL4,CL4,CL26\nRMT2    DS     CL4,CL4,CL26\n*\nHRTABLE DS    H\nHR001   DS    XL(RMTMAX*2)\nHRLEN   EQU   *-HR001\n*\nWORKALEN EQU   *-WORKAREA\n         TITLE 'SUB-SYSTEM OUTPUT BLOCK (SSOB)'\n         IEFJSSOB\nSSOBGN   DSECT\n         IEFSSSO\n         IEFSSCS\nSSOBALL  EQU   SSOBHSIZ+SSSOSIZE\n*\n         PRINT GEN\n         DDLINE\n*\n         JDFJOB JESEQ=YES\n*\n         JEDDSECT\n*\n         JJSDSECT\n*\n         PRINT NOGEN\n         IKJTCB\n         IHAPSA\n         CVT   DSECT=YES\n         CVTUSERS\n         IEFTIOT1\n*\n         IEFZB4D0\n         IEFZB4D2\n         IKJDAP08\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n*\n         END\n         TITLE 'JDF -  CHECK AUTHORIZATION RULES TO VIEW JOB OUTPUTS'\nJDFCHECK CSECT\nJDFCHECK AMODE 31\nJDFCHECK RMODE ANY\n*\n*\n********************************************************************\n*\n*  THIS IS THE JDF SYSOUT ACCESS CONTROL MODULE. IT IS CALLED FROM\n*  THE JDF MAINLINE TO DECIDE WHETHER TO ALLOW/DISALLOW A USER TO\n*  BROWSE A JOB'S OUTPUT.\n*\n*  CALLING PARAMETERS ARE:\n*\n*       CALL  JDFCHECK,(JEDUSEID,JOBNAMS,USERID,DDN,DDLDSID,PREFIX)\n*\n*                       JEDUSEID = SUBMITTING USER-ID\n*                       JOBNAMS  = JOB NAME\n*                       USERID   = TSO USERID REQUESTING ACCESS\n*                       DDN      = DDNAME OF OUTPUT\n*                       DDLDSID  = JES DSID NUMBER OF OUTPUT\n*                       PREFIX   = TSO PREFIX\n*\n*           THE ACCESS CONTROL SVC IN INVOKED IN THE \"JDFCHECK\"       *\n*           SUB-ROUTINE USING THIS SVC NUMBER:                        *\n*                                                                     *\nACFCHK   EQU   247                                                    *\n*                                                                     *\n********************************************************************\n*\n*\n         USING *,12,11\n*\n         SAVE  (14,12),,JDFCHECK_08/25/86_BRIAN_COOK_&SYSTIME_&SYSDATE\n*\n         LR    R12,R15            SET BASE REGISTER\n         LA    R11,4095\n         LA    R11,1(R11,R12)     SET BASE 2\n         LR    R9,R1              SAVE PARM REGISTER\n*\n** TO REDUCE RUN-TIME OVERHEAD, SOME BASIC SCREENING TESTS ARE MADE\n*  PRIOR TO THE GETMAIN, AND BEFORE ANY CALL TO \"ACFCHK\".\n*\n         LM    R1,R3,0(R9)        PICK UP PARMS\n*\n*    IF SUBMITTING USERID IS BLANK, ALLOW ACCESS\n*\n         CLI   0(R1),C' '         BLANK\n         BE    QUICKOUT           YES, JUST SET RC=0\n*\n*\n**          JES INPUTS AND OUTPUTS CAN BE VIEWED IF THE JOBNAME BEGINS\n*           WITH YOUR USERID, OR IF YOU SUBMITTED IT.\n*\n         CLC   0(5,R3),0(R1)      SUBMITTED BY THIS USERID?\n         BE    QUICKOUT           YES, JUST SET RC=0\n         CLC   0(5,R3),0(R2)      JOBNAME MATCHES USERID?\n         BE    QUICKOUT           YES, JUST SET RC=0\n*\n*\n**  TEMPORARILY, SOFTWARE ENGINEERING STUFF\n*\n*        CLC   0(3,R2),=C'MPS'    PAYROLL?\n*        BE    NOTSPEC            YES, DON'T ALLOW ACCESS\n*        CLC   0(2,R3),=C'AS'     SOFTWARE ENGINEERING?\n*        BE    QUICKOUT           YES, JUST SET RC=0\n*        CLC   0(2,R3),=C'BO'     OPERATIONS?\n*        BE    QUICKOUT           YES, JUST SET RC=0\n*        CLC   0(2,R3),=C'BP'     BPSCAN?\n*        BE    QUICKOUT           YES, JUST SET RC=0\n*\nNOTSPEC  DS    0H\n*\n         L     R2,GETMLENG\n         GETMAIN R,LV=(2)\n*\n         ST    R13,4(R1)          STORE BACKWARDS POINTER\n         ST    R1,8(R13)          STORE FORWARD POINTER\n         LR    R13,R1             DSECT BASE\n         USING WORKAREA,13\n*\n         LA    R0,1               AUTH ON\n         SVC   235\n*\n         LOAD  EP=ACFCHK\n         LR    R10,R0\n*\n         LM    R1,R8,0(R9)        PICK UP PARMS\n         MVC   JEDUSEID(8),0(R1)\n         MVC   JOBNAMS(8),0(R2)\n         MVC   USERID(8),0(R3)\n         MVC   DDN(8),0(R4)\n         MVC   DDLDSID(3),0(R5)\n         MVC   PREFIX(8),0(R6)\n         MVC   DDREMOTE(1),0(R7)\n         MVC   DDCLASS(1),0(R8)\n*\nJOBTEST1 DS    0H\n*\n*\n*    A DISPLAY OF A PARTICULAR DSID HAS BEEN REQUESTED, SO CHECK AUTH\n*\n*\n* RULE 1==> JES DATASETS FOR ANY JOB CAN BE LOOKED AT BY ANYONE.\n*\n*\n         CLI   DDLDSID,C'0'          IF JES DATASETS\n         BE    RETURN0               LET ANYBODY LOOK AT ANYTHING\n*\n*\n*\n*\n*\n* RULE 2==> ANYONE CAN LOOK AT SYSLOG\n*\n*\n         CLC   JOBNAMS(7),=C'SYSLOG '   SYSLOG\n         BE    RETURN0                  YES, ALLOW READ ACCESS\n*\n*\n*\n*\n* RULE 3==> SOFTWARE ENGINEERING JOBS ARE RESTRICTED TO SE USERS.\n*\n*\n         CLC   JOBNAMS(2),=C'AS'     IS THIS SOFTWARE ENGINEERING JOB?\n         BNE   DDNRUL3E              NO, SKIP ALL THIS\n         CLC   JOBNAMS(3),=C'ASM'    IS THIS SPECIAL \"ASM2\" JOB?\n         BE    DDNRUL3E              YES, SKIP TEST\n*        CLC   PREFIX(2),=C'AS'      IS THIS SOFTWARE ENGINEERING USER\n         CLC   USERID(2),=C'AS'      IS THIS SOFTWARE ENGINEERING USER\n         BE    RETURN0          YUP\n         B     RETURN4 AUTH CHECK FAILED, DISPLAY THE MESSAGE\nDDNRUL3E DS    0H\n*\n*\n*\n* RULE 4==> CERTAIN DDNAMES ARE UNRESTRICTED, AND CAN BE VIEWED BY\n*           ANY USER.\n*\n         CLC   DDN(3),=C'CPX'          IS IT CAPEX\n         BE    RETURN0                   OK TO LOOK AT\n         CLC   DDN(8),=C'SORTMSGS'     IS IT SORT MESSAGES\n         BE    RETURN0                   OK TO LOOK AT\n         CLC   DDN(8),=C'SYSOUT  '     IS IT SORT MESSAGES\n         BE    RETURN0                   OK TO LOOK AT\n*\n*\n         CLI   DDREMOTE,C'R'      REMOTE?\n         BNE   ACFCHECK           NO, JUST DO ACFCHECK\n*\n** THIS WILL PREVENT ACCESS TO CONFIDENTIAL OUTPUTS ON THE 6670\n*\n** IT WILL ALSO PREVENT ACCESS TO ANY REMOTE OUTPUT UNLESS SPECIFICALLY\n** AUTHORIZED.\n*\n         CLI   DDCLASS,C'C'       CONFIDENTIAL OUTPUT PRINT CLASS?\n         BE    DDNRULE6           YES, CHECK FOR SYSTEM ACCESS\n         CLI   DDCLASS,C'U'       CONFIDENTIAL OUTPUT PUNCH CLASS?\n         BE    DDNRULE6           YES, CHECK FOR SYSTEM ACCESS\n*\n*\nACFCHECK DS    0H\n*\n*\n** LINK TO ACFCHK, TO DETERMINE WHETHER IT IS AN \"EXCEPTION\" JOB.\n*\n** IF THIS IS AN EXCEPTION JOB, IT MEANS THAT EVEN USERS WITH THE\n*  \"ALLJOBS\" ATTRIBUTE CAN'T LOOK AT IT. THE ONLY USERS THAT CAN LOOK\n*  AT THE REPORT OUTPUT ARE USERS THAT HAVE \"ALLJOBS\" FOR THE SPECIFIC\n*  SYSTEM, OR FOR THE JOB.\n*\n*\n         MVI   OPTBYTE,1            READ ACCESS\n         MVC   ACFUID(8),=CL8'APSEC '\n         MVC   RESTYPE(3),JOBNAMS\n         MVC   RESNAME(40),=CL40'EXCEPT   '\n*\n         LA    R1,OPTBYTE\n         ST    R1,ACFPARMS\n         LA    R1,ACFUID\n         ST    R1,ACFPARMS+4\n         LA    R1,RESTYPE\n         ST    R1,ACFPARMS+8\n         LA    R1,RESNAME\n         ST    R1,ACFPARMS+12\n         OI    ACFPARMS+12,X'80'\n*\n         LA    R1,ACFPARMS\n*        SVC   ACFCHK\n         LR    R15,R10\n         BALR  R14,R15\n*\n         LTR   R15,R15\n         BZ    DDNRULE6\n*\n*        DC    H'0'\n*\nDDNRULE5 DS    0H\n*\n         MVI   OPTBYTE,1            READ ACCESS\n*        MVC   ACFUID(8),PREFIX\n         MVC   ACFUID(8),USERID\n         MVC   RESTYPE(3),=C'JDF'\n         MVC   RESNAME(40),=CL40'ALLJOBS'\n*\n         LA    R1,ACFPARMS\n*        SVC   ACFCHK\n         LR    R15,R10\n         BALR  R14,R15\n*\n         LTR   R15,R15\n         BZ    RETURN0\n*\n*\n*\n*\n* RULE 6==> SOME USERS ARE AUTHORIZED TO LOOK AT ALL JOBS IN A GIVEN\n*           APPLICATION SYSTEM (1ST 3 CHARACTERS OF JOBNAME=SYSTEM ID)\n*\nDDNRULE6 DS    0H\n*\n*\n         MVI   OPTBYTE,1            READ ACCESS\n*        MVC   ACFUID(8),PREFIX\n         MVC   ACFUID(8),USERID\n         MVC   RESTYPE(3),JOBNAMS\n         MVC   RESNAME(40),=CL40'ALLJOBS'\n         MVC   RESNAME(3),JOBNAMS\n*\n         LA    R1,ACFPARMS\n*        SVC   ACFCHK\n         LR    R15,R10\n         BALR  R14,R15\n*\n         LTR   R15,R15\n         BZ    RETURN0\n*\n*\n*\n* RULE 7==> SOME USERS ARE AUTHORIZED TO LOOK AT A SPECIFIC JOB.\n*\nDDNRULE7 DS    0H\n*\n*\n         MVI   OPTBYTE,1            READ ACCESS\n*        MVC   ACFUID(8),PREFIX\n         MVC   ACFUID(8),USERID\n         MVC   RESTYPE(3),JOBNAMS\n         MVC   RESNAME(40),SPACES\n         MVC   RESNAME(8),JOBNAMS\n*\n         LA    R1,ACFPARMS\n*        SVC   ACFCHK\n         LR    R15,R10\n         BALR  R14,R15\n*\n         LTR   R15,R15\n         BZ    RETURN0\n*\n         B     RETURN4\n*\n*\nQUICKOUT DS    0H\n*\n         SR    R15,R15\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n*\nRETURN0  DS    0H\n*\n         SR    R10,R10\n         B     RETURN\n*\nRETURN4  DS    0H\n*\n         LA    R10,4\n*\n*        CLC   USERID(5),=C'ASQCC'\n*        BE    RETURN0\n*\nRETURN   DS    0H\n*\n         SR    R0,R0              AUTH OFF\n         SVC   235\n*\n         LR    R3,R13             START ADDRESS OF GETMAINED AREA\n         L     R2,GETMLENG        LENGTH OF GETMAINED AREA\n         L     R13,4(,R13)        PICK UP CALLING SAVE AREA\n         FREEMAIN R,LV=(2),A=(3)\n         LR    R15,R10\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n*\nSPACES   DC    CL40' '\nGETMLENG DC    A(WORKLENG)\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         LTORG\nWORKAREA DSECT\n         DS    18F\nJEDUSEID DS    CL8\nJOBNAMS  DS    CL8\nUSERID   DS    CL8\nDDN      DS    CL8\nPREFIX   DS    CL8\nDDLDSID  DS    CL8\nDDREMOTE DS    CL1\nDDCLASS  DS    CL1\n*\nACFPARMS DS    4F\nOPTBYTE  DS    XL1\nACFUID   DS    CL8\nRESTYPE  DS    CL3\nRESNAME  DS    CL40\n*\nAUTHFLAG DS    C\n*\nWORKLENG EQU   *-WORKAREA\n         END\n         TITLE 'JDF -  ALLOCATE OUTLIST DATASET'\nALLOOUTL CSECT\nALLOOUTL AMODE 31\nALLOOUTL RMODE ANY\n*\n*\n         USING *,12,11\n*\n         SAVE  (14,12),,ALLOOUTL_03/21/86_BRIAN_COOK_&SYSTIME_&SYSDATE\n*\n         LR    R12,R15            SET BASE REGISTER\n         LA    R11,4095\n         LA    R11,1(R11,R12)     SET BASE 2\n         L     R7,0(,R1)          SAVE PARM\n*\n         L     R2,GETMLENG\n         GETMAIN R,LV=(2)\n*\n         ST    R13,4(R1)          STORE BACKWARDS POINTER\n         ST    R1,8(R13)          STORE FORWARD POINTER\n         LR    R13,R1             DSECT BASE\n         USING WORKAREA,13\n         TITLE 'INITIALIZE DYNAMIC ALLOCATION REQUEST BLOCKS'\n*\n** INITIALIZE ALLOCATE-OLD  REQUEST BLOCK\n*\n         MVC   OLD2RB(RB2LEN),RB2MASK\n         LA    R1,OLD2\n         ST    R1,OLD2RB\n         OI    OLD2RB,X'80'\n         LA    R1,OLD2TXT\n         ST    R1,TXT2PTR\n         LA    R1,DSN2TU\n         ST    R1,DSN2PTR\n         OI    DSN2PTR,X'80'\n*\n** INITIALIZE ALLOCATE-NEW  REQUEST BLOCK\n*\n         MVC   NEW2RB(NEWMLEN),NEW2MASK\n         LA    R1,NEW2\n         ST    R1,NEW2RB\n         OI    NEW2RB,X'80'\n         LA    R1,NEW2TXT\n         ST    R1,NEW2PTR\n         LA    R1,DSN2TU\n         ST    R1,NEW2DSN\n         OI    NEW2DSN,X'80'\n*\n** INITIALIZE FREE REQUEST BLOCK\n*\n         MVC   FREERB(FREELEN),FREEMASK\n         LA    R1,FREE\n         ST    R1,FREERB\n         OI    FREERB,X'80'\n         LA    R1,FREE1PTR\n         ST    R1,FREEPTR\n         OI    FREE2PTR,X'80'  END PARAMETER FLAG\n*\n         TITLE 'GENERATE OUTLIST DSNAME'\n*\n*  PICK UP USERID/DSNAME LENGTH AND BUILD TEXT UNIT\n*\n         MVC   OUTLDSN(7),1(R7)   USERID INTO NAME\n*\n         SR    R15,R15\n         IC    R15,0(,R7)         GET  LENGTH OF USERID\n         LA    R1,OUTLDSN(R15)    BUMP TO FIRST BLANK AFTER USERID\n         MVI   0(R1),C'.'\n         LA    R1,1(,R1)          BUMP PAST PERIOD\n*\n         IC    R15,9(,R7)         GET  LENGTH OF OUTLIST DSNAME\n         LTR   R15,R15\n         BNZ   JDFXMOV1\n*\n         MVC   0(13,R1),=CL13'@TEMP.OUTLIST'\n         LA    R15,12\n         B     JDFXMOV2\n*\nJDFXMOV1 DS    0H\n         BCTR  R15,0\n         EX    R15,*+8\n         B     JDFXMOV2\n         MVC   0(1,R1),10(R7)\nJDFXMOV2 DS    0H\n*\n         LA    R15,1(,R15)        RESET LENGTH OF OUTLIST DSNAME\n         SR    R14,R14\n         IC    R14,0(,R7)         GET  LENGTH OF USERID\n         LA    R14,1(R14,R15)     GET TOTAL LENGTH\n         STCM  R14,3,OUTLDSNL     STORE IT INTO TEXT UNIT\n*\n         TITLE 'ALLOCATE OUTLIST DSNAME'\n*\n*\n*        FREE THE OUTLIST DATASET\n*\n         LA    R1,FREERB     LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n*\n*\n*        ALLOCATE THE OUTLIST DATASET AS OLD\n*\n         LA    R1,OLD2RB     LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n*\n         LTR   R15,R15       CHECK RETURN CODE\n         BZ    JDFOUTL4      0 - WE ALLOCATED IT AS OLD - LETS GO HOME\n*\n         LA    R5,OLD2\n         USING S99RB,R5\n         CLC   S99ERROR,=X'1708'  SEE IF DSNAME NOT FOUND\n         BE    JDFOUTL2           ... OK NO ERROR AFTER ALL\n         DROP  R5\n*\n         WTO   'JDF OUTLIST ALLOCATE OLD FAILED',ROUTCDE=11\n         DC    H'0'\n         TITLE 'OUTLIST ALLOCATE THE DDNAME/DSNAME AS NEW'\n*\n*        OK - MUST NOT HAVE ONE SO LET'S BUILD A NEW OUTLIST DATASET\n*\n*        ALLOCATE THE THE OUTLIST DATASET AS NEW, CATLG\n*\n         USING S99TUNIT,R5\n*\nJDFOUTL2 DS    0H\n*\n         LA    R1,NEW2RB     LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n*\n         LTR   R15,R15       CHECK RETURN CODE\n         BZ    JDFOUTL3      0 - WE ALLOCATED OK\n         SPACE\n         WTO   'JDF OUTLIST ALLOCATE NEW FAILED',ROUTCDE=11\n         DC    H'0'\n*\nJDFOUTL3 DS    0H\n*SPPROF3 LA    R1,MSGGOOD1     - TELL THE USER WE CREATED A NEW ONE\n*        LA    R0,L'MSGGOOD1\n*        SPACE\n*        TPUT  (R1),(R0)     WRITE OUT RESULTS OF NEW ALLOCATION\nJDFOUTL4 DS    0H\n         LR    R3,R13             START ADDRESS OF GETMAINED AREA\n         L     R2,GETMLENG        LENGTH OF GETMAINED AREA\n         L     R13,4(,R13)        PICK UP CALLING SAVE AREA\n         FREEMAIN R,LV=(2),A=(3)\n         LM    R14,R12,12(R13)\n         SR    R15,15\n         BR    R14\n         TITLE 'SVC 99 REQUEST BLOCKS'\n*\n         DS    0F\nFREEMASK DS    F\n         DC    AL1(20),AL1(S99VRBUN),X'6000',A(0),A(0),A(0),A(0)\nFREETXT  DC    A(FREETU1)\n         DC    A(FREETU2)\nFREELEN  EQU   *-FREEMASK\nFREETU1  DC    AL2(DUNDDNAM),AL2(1),AL2(7),CL7'OUTLIST'\nFREETU2  DC    AL2(DUNUNALC),AL2(0)\n*\n         DS    0F\nOLD2TU1  DC    AL2(DALDDNAM),AL2(1),AL2(7),CL7'OUTLIST'\nOLD2TU2  DC    AL2(DALSTATS),AL2(1),AL2(1),AL1(DA08OLD)\nOLD2TU3  DC    AL2(DALNDISP),AL2(1),AL2(1),AL1(DA08KEEP)\nOLD2TU4  DC    AL2(DALRLSE),AL2(0)\n         DS    0F\n*\nRB2MASK  DS    F\n         DC    AL1(20),AL1(S99VRBAL),X'6000',A(0),A(0),A(0),A(0)\n         DC    A(OLD2TU1)\n         DC    A(OLD2TU2)\n         DC    A(OLD2TU3)\n         DC    A(OLD2TU4)\n         DS    F\n         DC    AL2(DALDSNAM),AL2(1)\n         DS    XL2\n         DC    CL44' '\nRB2LEN   EQU   *-RB2MASK\n*\n         DS    0F\nNEW2TU1  DC    AL2(DALDDNAM),AL2(1),AL2(7),CL7'OUTLIST'\nNEW2TU2  DC    AL2(DALSTATS),AL2(1),AL2(1),AL1(DA08NEW)\nNEW2TU3  DC    AL2(DALNDISP),AL2(1),AL2(1),AL1(DA08CAT)\nNEW2TU4  DC    AL2(DALTRK),AL2(0)\nNEW2TU5  DC    AL2(DALPRIME),AL2(1),AL2(3),AL3(30)\nNEW2TU6  DC    AL2(DALSECND),AL2(1),AL2(3),AL3(30)\nNEW2TU7  DC    AL2(DALVLSER),AL2(1),AL2(6),C'STOR01'\nNEW2TU8  DC    AL2(DALUNIT),AL2(1),AL2(5),C'SYSDA'\nNEW2TU9  DC    AL2(DALBLKSZ),AL2(1),AL2(2),AL2(13300)\nNEW2TU10 DC    AL2(DALDSORG),AL2(1),AL2(2),X'4000'\nNEW2TU11 DC    AL2(DALLRECL),AL2(1),AL2(2),AL2(133)\nNEW2TU12 DC    AL2(DALRECFM),AL2(1),AL2(1),X'90'\n*\nNEW2MASK DS    F\n         DC    AL1(20),AL1(S99VRBAL),X'6000',A(0),A(0),A(0),A(0)\n         DC    A(NEW2TU1)\n         DC    A(NEW2TU2)\n         DC    A(NEW2TU3)\n         DC    A(NEW2TU4)\n         DC    A(NEW2TU5)\n         DC    A(NEW2TU6)\n         DC    A(NEW2TU8)\n         DC    A(NEW2TU9)\n         DC    A(NEW2TU10)\n         DC    A(NEW2TU11)\n         DC    A(NEW2TU12)\n         DS    F\nNEWMLEN  EQU   *-NEW2MASK\n         EJECT\nGETMLENG DC    A(WORKLENG)\n         LTORG\nWORKAREA DSECT\n         DS    18F\n*\nFREERB   DS    F\nFREE     DS    F\n         DS    F\nFREEPTR  DS    F\n         DS    F\n         DS    F\nFREE1PTR DS    F\nFREE2PTR DS    F\n*\nOLD2RB   DS    F\nOLD2     DS    F\n         DS    F\nTXT2PTR  DS    F\n         DS    F\n         DS    F\nOLD2TXT  DS    F\n         DS    F\n         DS    F\n         DS    F\nDSN2PTR  DS    F\nDSN2TU   DS    XL4\nOUTLDSNL DS    XL2\nOUTLDSN  DS    CL44\n*\n         DS    0F\nNEW2RB   DS    F\nNEW2     DS    F\n         DS    F\nNEW2PTR  DS    F\n         DS    F\n         DS    F\nNEW2TXT  DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\nNEW2DSN  DS    F\nWORKLENG EQU   *-WORKAREA\n         EJECT\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n         EJECT\n         IKJDAP08\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         END\nREPRINT  TITLE 'JDF -  ALLOCATE REPRINT DATASET'\nALLOREPR CSECT\nALLOREPR AMODE 31\nALLOREPR RMODE ANY\n*\n         PRINT OFF\n         COPY  JDFMACS\n         COPY  SPFMACS\n         PRINT ON\n         PRINT GEN\n*\n         USING PSA,0\n*\n*\n         USING *,12,11\n*\n         SAVE  (14,12),,ALLOREPR_03/21/86_BRIAN_COOK_&SYSTIME_&SYSDATE\n*\n         LR    R12,R15            SET BASE REGISTER\n         LA    R11,4095\n         LA    R11,1(R11,R12)     SET BASE 2\n         L     R7,0(,R1)      SAVE PARM\n*\n         L     R2,GETMLENG\n         GETMAIN R,LV=(2)\n*\n         ST    R13,4(R1)          STORE BACKWARDS POINTER\n         ST    R1,8(R13)          STORE FORWARD POINTER\n         LR    R13,R1             DSECT BASE\n         USING WORKAREA,13\n*\n*\n** INITIALIZE FREE REQUEST BLOCK\n*\n         MVC   FREERB(FREELEN),FREEMASK\n         LA    R1,FREE\n         ST    R1,FREERB\n         OI    FREERB,X'80'\n         LA    R1,FREE1PTR\n         ST    R1,FREEPTR\n         OI    FREE2PTR,X'80'  END PARAMETER FLAG\n*\n** INITIALIZE ALLOCATE REQUEST BLOCK\n*\n         MVC   ALLORB(ALLOLEN),ALLOMASK\n         LA    R1,ALLO\n         ST    R1,ALLORB\n         OI    ALLORB,X'80'\n         LA    R1,ALLOTXT\n         ST    R1,ALLOPTR\n         LA    R1,ALLOTU1\n         ST    R1,ALLOTXT\n         LA    R1,ALLOTU2\n         ST    R1,ALLOTXT+4\n         LA    R1,ALLOTU3\n         ST    R1,ALLOTXT+8\n         LA    R1,ALLOTU4\n         ST    R1,ALLOTXT+12\n         LA    R1,ALLOTU5\n         ST    R1,ALLOTXT+16\n         LA    R1,ALLOTU6\n         ST    R1,ALLOTXT+20\n         LA    R1,ALLOTU7\n         ST    R1,ALLOTXT+24\n         LA    R1,ALLOTU8\n         ST    R1,ALLOTXT+28\n         LA    R1,ALLOTU9\n         ST    R1,ALLOTXT+32\n         OI    ALLOTXT+32,X'80'\n*\n         L     R1,PSATOLD\n         USING TCB,1\n         L     R1,TCBTIO\n         USING TIOT1,1\n         LA    R1,TIOENTRY\n         USING TIOENTRY,1\n         SR    R15,R15\n         USING DDLINE,8\n*\nREPRTIO  DS    0H\n         CLC   TIOEDDNM(8),=CL8'REPRINT'\n         BE    REPRTFRE\n*\n         CLC   0(4,R1),=X'00000000'      END OF TIOT?\n         BE    REPRTISP                  YES, GO DO ISPLINK\n*\n         IC    R15,TIOELNGH              LENGTH OF THIS ENTRY\n         LA    R1,0(R1,R15)              POINT TO NEXT ENTRY\n         B     REPRTIO                   KEEP LOOPING\n*\n         DROP  1\n*\n         TITLE 'FREE THE DDNAME'\nREPRTFRE DS    0H\n*\n*\n*        FREE THE REPRINT DDNAME\n*\n         LA    R1,FREERB     LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n*\n*\n         TITLE 'DEFINE THE VARIABLES AND DISPLAY THE SCREEN'\nREPRTISP DS    0H\n*\n*\n*        ALLOCATE THE REPRINT DATASET AS OLD\n*\n         VDEFINE RCLASS,1\n         VDEFINE RCCO,1\n         VDEFINE RDEST,8\n         VDEFINE RCOPIES,3\n*\n         MVC    RCLASS(1),DDCLASS\n         CLI    RCLASS,C'X'\n         BNE    *+8\n         MVI    RCLASS,C'A'\n         VPUT   RCLASS\n*\n         MVC    RDEST(8),=CL8'N1'\n         VPUT   RDEST\n*\n         PACK   DWORD,DDDRECL+3(3)\n         CVB    R15,DWORD\n         STCM   R15,3,RECLENG\n         STCM   R15,3,BLOCKSIZ\n*\n         MVI    RCCO,C'N'        DEFAULT CARRIAGE CONTROL IS NONE\n*\n         CLI    DDDRECF,C'U'\n         BE     REPRRECU\n         CLI    DDDRECF+1,C'A'   ASA CARRIAGE CONTROL\n         BE     REPRRECA\n         CLI    DDDRECF+2,C'A'   ASA CARRIAGE CONTROL\n         BE     REPRRECA\n         CLI    DDDRECF+1,C'M'   MACHINE CARRIAGE CONTROL\n         BE     REPRRECM\n         CLI    DDDRECF+2,C'M'   MACHINE CARRIAGE CONTROL\n         BE     REPRRECM\n*\n         B      REPRPUT2\n*\nREPRRECA DS    0H\n*\n         MVI    RCCO,C'A'       ANSI CARRIAGE CONTROL\n         B      REPRPUT2\n*\nREPRRECM DS    0H\n*\n         MVI    RCCO,C'M'       MACHINE CARRIAGE CONTROL\n         B      REPRPUT2\n*\nREPRRECU DS    0H\n*\n         MVC    RECLENG(2),=H'133'\n         MVC    BLOCKSIZ(2),=H'133'\n*\n         B      REPRPUT2\n*\nREPRPUT2 DS    0H\n*\n         VPUT   RCCO\n         MVC    RCOPIES(3),DDCOPIES\n         CLI    RCOPIES,C' '\n         BNE    *+8\n         MVI    RCOPIES,C'0'\n         CLI    RCOPIES+1,C' '\n         BNE    *+8\n         MVI    RCOPIES+1,C'0'\n         VPUT   RCOPIES\n*\n         VGET   RCLASS\n         VGET   RCCO\n         VGET   RDEST\n         VGET   RCOPIES\n*\n         DISPLAY JDFREPR,ENDKEY=REPREND\n*\n         VPUT   RCLASS\n         VPUT   RDEST\n*\n         TITLE 'SET UP CARRIAGE CONTROL'\nREPRTCC2 DS    0H\n*\n         CLI   RCCO,C'A'\n         BE    REPRFMA\n         CLI   RCCO,C'M'\n         BE    REPRFMM\n*\nREPRFMN  DS    0H\n*\n         MVI    RECFM,X'90'     SET DEFAULT RECFM = FB\n         B      REPRTIOA\n*\nREPRFMA  DS    0H\n*\n         MVI    RECFM,X'94'     SET DEFAULT RECFM = FBA\n         B      REPRTIOA\n*\nREPRFMM  DS    0H\n*\n         MVI    RECFM,X'92'     SET DEFAULT RECFM = FBM\n         B      REPRTIOA\n*\n         TITLE 'FILL IN THE TEXT UNITS'\nREPRTIOA DS    0H\n*\n         PACK   DWORD,RCOPIES\n         CVB    R15,DWORD\n         STC    R15,COPIES\n*\n         B      JDFREPR2        GO DO THE ALLOCATE\n*\n         TITLE 'ALLOCATE THE DDNAME'\n*\n*\n         USING S99TUNIT,R5\n*\nJDFREPR2 DS    0H\n*\n         LA    R1,ALLORB     LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n*\n         LTR   R15,R15       CHECK RETURN CODE\n         BZ    JDFREPR3      0 - WE ALLOCATED OK\n         SPACE\n         WTO   'JDF REPRINT ALLOCATE NEW FAILED',ROUTCDE=11\n         DC    H'0'\n*\nJDFREPR3 DS    0H\n*SPPROF3 LA    R1,MSGGOOD1     - TELL THE USER WE CREATED A NEW ONE\n*        LA    R0,L'MSGGOOD1\n*        SPACE\n*        TPUT  (R1),(R0)     WRITE OUT RESULTS OF NEW ALLOCATION\nJDFREPR4 DS    0H\n*\n         BAL   R7,DLTVARS\n         SR    R8,R8\n*\nJDFREPRC DS    0H\n*\n         LR    R3,R13             START ADDRESS OF GETMAINED AREA\n         L     R2,GETMLENG        LENGTH OF GETMAINED AREA\n         L     R13,4(,R13)        PICK UP CALLING SAVE AREA\n         FREEMAIN R,LV=(2),A=(3)\n         LR    R15,R8\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n*\nREPREND  DS    0H\n*\n         BAL   R7,DLTVARS\n*\n         LA    R8,12\n         B     JDFREPRC\nDLTVARS  DS    0H\n*\n         VDELETE RCOPIES\n         VDELETE RCLASS\n         VDELETE RDEST\n         VDELETE RCCO\n*\n         BR    R7\n*\n         TITLE 'SVC 99 REQUEST BLOCKS'\n*\n         DS    0F\nFREEMASK DS    F\n         DC    AL1(20),AL1(S99VRBUN),X'6000',A(0),A(0),A(0),A(0)\nFREETXT  DC    A(FREETU1)\n         DC    A(FREETU2)\nFREELEN  EQU   *-FREEMASK\nFREETU1  DC    AL2(DUNDDNAM),AL2(1),AL2(7),CL7'REPRINT'\nFREETU2  DC    AL2(DUNUNALC),AL2(0)\n*\nALLOMASK DS    F\n         DC    AL1(20),AL1(S99VRBAL),X'6000',A(0),A(0),A(0),A(0)\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    0F\n         DC    AL2(DALDDNAM),AL2(1),AL2(7),CL7'REPRINT'\n         DS    0F\n         DC    AL2(DALBLKSZ),AL2(1),AL2(2)\n         DS    XL2\n         DS    0F\n         DC    AL2(DALDSORG),AL2(1),AL2(2),X'4000'\n         DS    0F\n         DC    AL2(DALLRECL),AL2(1),AL2(2)\n         DS    XL2\n         DS    0F\n         DC    AL2(DALRECFM),AL2(1),AL2(1)\n         DS    XL1\n         DS    0F\n         DC    AL2(DALSYSOU),AL2(1),AL2(1)\n         DS    CL1\n         DS    0F\n         DC    AL2(DALSUSER),AL2(1),AL2(8)\n         DS    CL8\n         DS    0F\n         DC    AL2(DALCLOSE),AL2(0)\n         DS    0F\n         DC    AL2(DALCOPYS),AL2(1),AL2(1)\n         DS    XL1\nALLOLEN  EQU   *-ALLOMASK\n*\nGETMLENG DC    A(WORKLENG)\n*\n         LTORG\nWORKAREA DSECT\n         DS    18F\n*\nRCOPIES  DS    CL3\nRCCO     DS    CL1\nISPARMS  DS    8F\n*\nDWORD    DS    D\n*\nFREERB   DS    F\nFREE     DS    F\n         DS    F\nFREEPTR  DS    F\n         DS    F\n         DS    F\nFREE1PTR DS    F\nFREE2PTR DS    F\n*\nALLORB   DS    F\nALLO     DS    F\n         DS    F\nALLOPTR  DS    F\n         DS    F\n         DS    F\nALLOTXT  DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    0F\nALLOTU1  DS    XL13\n         DS    0F\nALLOTU2  DS    XL6\nBLOCKSIZ DS    XL2\n         DS    0F\nALLOTU3  DS    XL8\n         DS    0F\nALLOTU4  DS    XL6\nRECLENG  DS    XL2\n         DS    0F\nALLOTU5  DS    XL6\nRECFM    DS    XL1\n         DS    0F\nALLOTU6  DS    XL6\nRCLASS   DS    CL1\n         DS    0F\nALLOTU7  DS    XL6\nRDEST    DS    CL8\n         DS    0F\nALLOTU8  DS    XL4\n         DS    0F\nALLOTU9  DS    XL6\nCOPIES   DS    XL1\n*\nWORKLENG EQU   *-WORKAREA\n         EJECT\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n         EJECT\n         IKJDAP08\n*\n*   ADDED TO SUPPORT STEPNAME CHECKING AND DDNAME SCAN\n*\n         PRINT NOGEN\n         IHAPSA\n         IKJTCB\n         IEFTIOT1\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         DDLINE\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JDF00": {"ttr": 14337, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00$\\x00$\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "CBT353"}, "text": "JDF001   'NO CLASS X OUTPUT'                  .ALARM=YES\n'REQUEUE COMMAND ONLY APPLIES TO CLASS X OUTPUT.'\n\nJDF002   'AUTHORIZATION FAILED'               .ALARM=YES\n'SOME OUTPUTS CANNOT BE VIEWED DUE TO SECURITY CONSIDERATIONS.'\n\nJDF003   'RELEASE INVALID  '                  .ALARM=YES\n'RELEASE COMMAND IS FOR CMS USE ONLY.'\n\nJDF004   'INVALID AMOUNT   '                  .ALARM=YES\n'SCROLL AMOUNT IS INVALID.           '\n\nJDF005   'INVALID JCT      '                  .ALARM=YES\n'JCT POINTER IN JQE DOES NOT POINT TO A JCT.'\n\nJDF006   'INVALID IOT      '                  .ALARM=YES\n'IOT POINTER IN JCT DOES NOT POINT TO AN IOT.'\n\nJDF007   'INVALID SEL CODE '                  .ALARM=YES\n'INVALID JOB SELECTION CODE ENTERED.'\n\nJDF008   'OPEN FAILED      '                  .ALARM=YES\n'OPEN FAILED FOR REPRINT FILE.'\n\nJDF009   'REPRINT COMPLETED'                  .ALARM=YES\n'THE DSID YOU SELECTED HAS BEEN REPRINTED.'\n\nJDF001A  'REPRINT FAILED'                     .ALARM=YES\n'REPRINT COULD NOT BE COMPLETED.'\n\nJDF001B  'NOT AUTHORIZED'                     .ALARM=YES\n'JDF MUST BE AUTHORIZED, OR HASPCKPT/HASPACE PRE-ALLOCATED.'\n\nJDF001C  'DSID EMPTY'                         .ALARM=YES\n'THE JES DATASET YOU SELECTED HAS NO RECORDS.'\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAN": {"ttr": 14339, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00 \\x00 \\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "CBT353"}, "text": "%------------ PAN Library System Processing Support    -------------------------\n%SELECT OPTION ===>_OPT     +\n%*\n%* PLF +PAN Library Facility\n%*\n%* GET +Get PAN Member\n%*\n%* PUT +Update PAN Member\n%*\n%* ADD +Add a  PAN Member\n%*\n%* PSP +PANSPOOL SYSOUT Retrieval  JOB%>_PJOB    +%#=>_GN\n%* PRT +Print the SYSOUT Retrieved\n%*\n%******************************************************************************+\n+Press%END KEY+to return\n)INIT\n  .CURSOR = OPT\n  .HELP=PANH\n &PJOB = ABCD0100\n   &GN = 00\n)PROC\n  &SEL = TRANS( TRUNC (&OPT,'.')\n              ADD,'CMD(%PANADDC) NEWAPPL(APAN)'\n              GET,'CMD(%PANGETC) NEWAPPL(APAN)'\n              PLF,'PGM(PLF) NEWAPPL(PLF)'\n              PSP,'CMD(%PSPL &PJOB GEN(&GN)'\n              PRT,'CMD(%HOJ)'\n              PUT,'CMD(%PANPUTC) NEWAPPL(APAN)'\n              ' ',' '\n                *,'?' )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PLF$": {"ttr": 14341, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "CBT353"}, "text": "1\n        PAN LIBRARY FACILITY (PLF) INSTALLATION\n\n 1. COPY  INTO YOUR ISPPLIB:\n\n          PLF3H1\n          PLF3H2\n          PLF3P1\n          PLF3P2\n          PLF3P3\n\n 2. COPY PLF00 INTO YOUR ISPMLIB.\n\n 3. COPY SPFMACS INTO ONE OF YOUR MACLIBS.\n\n 4. SUBMIT AN ASSEMBLY OF PLF3. IT DOES NOT NEED TO GO INTO ANY SPECIAL\n    LIBRARY. NOTE THAT \"SPFMACS\" MUST BE AVAILABLE IN THE SYSLIB\n    CONCATENATION. \"PAM\" AND \"ISPLINK\" MUST BE AVAILABLE IN THE SYSLIB\n    CONCATENATION FOR THE LINK-EDIT STEP.\n\n    PLF IS NOT RE-ENTRANT AND NOT REUSEABLE (MOSTLY DUE TO \"PAM\").\n\n 5. MODIFY AN EXISTING SPF SCREEN TO INVOKE THE PLF PROGRAM, SUCH AS:\n\n             PLF,'PGM(PLF)'\n\n    NOTE: PLF CAN BE INVOKED ONLY AS AN SPF APPLICATION; YOU CANNOT\n          USE THE \"CALL\" OR COMMAND PROCESSOR METHOD. IF YOU DO NOT\n          FOLLOW THE INSTRUCTIONS, YOU WILL GET AN 0C1 OR 0C4.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PLFH1": {"ttr": 14343, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "CBT353"}, "text": "%-----------------------PAN Library Facility   (PLF)  -------------------------+\n+\n+\n + This the initial menu for PLF.\n\n   The PAN library name must be specified as a fully-qualified dsname,\n  %NOT+ in quotes. This is contrary to normal TSO practice, but since\n   none of our PAN libraries begin with someone's userid, it just seems\n   too silly to require everything to be put in quotes.\n\n   If the library is control word protected, such as P.SOURCE or PROD.JCL,\n   the control word must be provided, also.\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PLFH2": {"ttr": 14345, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x17\\x00\\x17\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "CBT353"}, "text": "%-----------------------PAN Library Facility   (PLF)  -------------------------+\n + This is the general-purpose PAN member display. It gives you a member\n   name list of the library. Line commands can be entered in the %SEL+column:\n  %B+- BROWSE                             %R+- RENAME (use \"NEWNAME/AC\" column)\n  %C+- COPY    (use \"NEWNAME/AC\" column). %S+- SELECT (same as EDIT)\n  %D+- DISABLE                          %COM+- Add/Update comment line\n  %E+- EDIT                              %AA+- Add Access code (in \"NEWNAME/AC\")\n  %K+- KILL    (restricted)              %AC+- Change AC (enter \"old,new\")\n  %P+- PRINT                             %AD+- Delete AC (enter old AC)\n  %X+- Select for transfer\n\n  The command line can be used to enter :\n  %COMM/NOCOMM+ Display/don't display comment lines\n  %XFER+   Generate transfer JCL (ARCH/NOARCH to have archive jcl, also)\n  %C0000+  where 0000 is the control word. (All 4 digits must be specified.)\n  %PSPOOL+ to identify a library in PANSPOOL format.\n  %nnnn+   where \"nnnn\" is the scroll amount. This is used with PF7 and PF8.\n  %L mem+  where \"mem\" is the leading characters of the member you want\n           to locate in the directory display.\n\n %NOTE:+ If a library member is access-controlled, you must enter the 4-digit\n         access code in the \"NEWNAME/AC\" column.\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PLFH3": {"ttr": 14347, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "CBT353"}, "text": "%-----------------------PAN Library Facility   (PLF)  -------------------------+\n+\n+\n + This the initial menu for PLF.\n\n   The PAN library name must be specified as a fully-qualified dsname,\n  %NOT+ in quotes. This is contrary to normal TSO practice, but since\n   none of our PAN libraries begin with someone's userid, it just seems\n   too silly to require everything to be put in quotes.\n\n   If the library is control word protected, such as P.SOURCE or PROD.JCL,\n   the control word must be provided, also.\n\n   If you wish to use the transfer commands, enter the target library and\n   the control word if applicable.\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PLFP1": {"ttr": 14349, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "CBT353"}, "text": "%------------------------- Pan Library Facility  (PLF)     ---------------------\n%OPTION  ===>_PLFZ      +                                                      +\n+\n+\n+PAN lib%===>_PANLIB\n+\n+Control%===>_PANCONTR   + (If Pan control word protected)\n+\n+    Note: PAN Library name must be specified as a fully-qualified\n+          dataset name,%NOT+in quotes.\n)INIT\n  .HELP    = PLFH1\n  .CURSOR  = PANLIB\n &PANCONTR = ' '\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PLFP2": {"ttr": 14351, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "CBT353"}, "text": "%------------------------- Pan Library Facility  (PLF)     ---------------------\n%OPTION  ===>_PLFZ      +                                                      +\n+\n+\n+PAN lib%===>_PANLIB\n+Control%===>_PANCONTR   + (If Pan control word protected)\n+\n+XFERlib%===>_XFERTO\n+Control%===>_XFERCON    + (If Pan control word protected)\n+\n+    Note: PAN Library names must be specified as fully-qualified\n+          dataset names,%NOT+in quotes.\n+\n% Enter/verify JOB card for transfer:\n+             %===>_PJC1\n+             %===>_PJC2\n)INIT\n  .HELP    = PLFH3\n  .CURSOR  = PANLIB\n &PANCONTR = ' '\n &XFERCON  = ' '\n)PROC\n  VPUT (PJC1,PJC2) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PLF00": {"ttr": 14353, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00T\\x00T\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 84, "newlines": 84, "modlines": 0, "user": "CBT353"}, "text": "PLF001   'USER ID CHANGE FAILED'              .ALARM=YES\n'USERID CHANGE FAILED FOR SOME REASON, CHECK SYSPRINT OUTPUT.'\n\nPLF002   'DELETE FAILED       '               .ALARM=YES\n'DELETE FAILED FOR SOME REASON, CHECK SYSPRINT OUTPUT.'\n\nPLF003   'COPY   FAILED       '               .ALARM=YES\n'COPY   FAILED FOR SOME REASON, CHECK SYSPRINT OUTPUT.'\n\nPLF004   'EDIT SAVE FAILED    '               .ALARM=YES\n'UNABLE TO SAVE INTO LIBRARY, CHECK SYSPRINT OUTPUT.'\n\nPLF005   'RENAME FAILED       '               .ALARM=YES\n'RENAME FAILED FOR SOME REASON, CHECK SYSPRINT OUTPUT.'\n\nPLF006   'OPEN   FAILED       '               .ALARM=YES\n'OPEN   FAILED FOR SOME REASON, CHECK SYSPRINT OUTPUT.'\n\nPLF007   'DIRECTORY READ FAILD'               .ALARM=YES\n'PAN LIBRARY DIRECTORY READ FAILED, TAKE A DUMP.      '\n\nPLF008   'OUTPUT OPEN FAILED  '               .ALARM=YES\n'UNABLE TO OPEN OUTPUT FILE. CHECK CLIST.             '\n\nPLF009   'MEMBER READ FAILED  '               .ALARM=YES\n'UNABLE TO READ &NAMEPAN. PROBABLE LOGIC ERROR.       '\n\nPLF001A  'CLOSE FAILED        '               .ALARM=YES\n'CLOSE FAILED. PROBABLE LOGIC ERROR.       '\n\nPLF001B  'ENTER DSNAME        '               .ALARM=YES\n'ENTER DSNAME.                             '\n\nPLF001C  'DDNAME ENQ FAILED   '               .ALARM=YES\n'LOG OFF AND LOGON AGAIN TO FREE DDNAMES   '\n\nPLF001D  'DSORG INVALID       '               .ALARM=YES\n'DSORG MUST BE PS, PO, OR DA               '\n\nPLF001E  'VTOC OBTAIN FAILED  '               .ALARM=YES\n'PACK MAY NOT BE MOUNTED                   '\n\nPLF001F  'LOCATE FAILED       '               .ALARM=YES\n'FILE MAY NOT BE WHERE THE CATALOG SAYS IT IS'\n\nPLF001G  'DSNAME FORMAT BAD   '               .ALARM=YES\n'MISSING QUOTES, OR SOMETHING                '\n\nPLF001H  'USERID SCAN FAILED  '               .ALARM=YES\n'PROBABLY LOGIC ERROR IN PLF                 '\n\nPLF001I  'DYNALLO LIST FAILED '               .ALARM=YES\n'DYNAMIC ALLOCATION FOR THE LIST FILE FAILED.'\n\nPLF001J  'DYNALLO MEMB FAILED '               .ALARM=YES\n'DYNAMIC ALLOCATION FOR THE MEMB FILE FAILED.'\n\nPLF001K  'DYNALLO DATA FAILED '               .ALARM=YES\n'DYNAMIC ALLOCATION FOR THE DATA FILE FAILED.'\n\nPLF001L  'BAD ISPLINK RC      '               .ALARM=YES\n'ISPLINK RETURNED AN INVALID RC FROM DISPLAY.'\n\nPLF001M  'UNSUPPORTED OPTION  '               .ALARM=YES\n'THE OPTION YOU ENTERED IS NOT SUPPORTED AT THIS TIME.'\n\nPLF001N  'INVALID ACCESS CODE '               .ALARM=YES\n'THE ACCESS CODE YOU ENTERED DOES NOT MATCH THE DIRECTORY.'\n\nPLF001O  'PRINTED'                            .ALARM=YES\n'MEMBER HAS BEEN PRINTED.                   '\n\nPLF001P  'NO COMMENT'                         .ALARM=YES\n'MEMBER SELECTED FOR TRANSFER DOES NOT HAVE A COMMENT.'\n\nPLF001Q  'COMM NOT ACTIVE'                    .ALARM=YES\n'YOU CANNOT TRANSFER MEMBERS UNLESS COMM IS ENABLED.'\n\nPLF001R  'STRING NOT FOUND'                   .ALARM=YES\n'THE \"FIND\" STRING WAS NOT FOUND FROM HERE TO THE END.\n\nPLF001S  'STRING FOUND'                       .ALARM=YES\n'THE \"FIND\" STRING WAS FOUND IN THE TOP LINE.'\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PLF1P1": {"ttr": 14356, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "CBT353"}, "text": "%------------------------- Pan Library Facility  (PLF)     ---------------------\n%OPTION  ===>_PLFZ      +                                                      +\n+\n+\n+PAN lib%===>_PANLIB\n+Control%===>_PANCONTR   + (If Pan control word protected)\n+\n+XFERlib%===>_XFERTO\n+Control%===>_XFERCON    + (If Pan control word protected)\n+\n+    Note: PAN Library names must be specified as fully-qualified\n+          dataset names,%NOT+in quotes.\n+\n% Enter/verify JOB card for transfer:\n+             %===>_PJC1\n+             %===>_PJC2\n)INIT\n  .HELP    = PLFH3\n  .CURSOR  = PANLIB\n &PANCONTR = ' '\n &XFERCON  = ' '\n)PROC\n  VPUT (PJC1,PJC2) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PLF2P2": {"ttr": 14358, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00%\\x00%\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON) USERMOD(20)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n 03 TYPE(DATAOUT) SKIP(ON) /* FOR TEXT ENTER CMD. FIELD */\n 04 TYPE(DATAIN)  INTENS(NON)  /* nondisplay */\n 05 TYPE(DATAIN)  INTENS(HIGH) CAPS(OFF)\n 06 TYPE(DATAIN)  INTENS(LOW)  CAPS(IN)\n 07 TYPE(DATAIN)  INTENS(HIGH) CAPS(IN)\n 08 TYPE(DATAIN)  INTENS(LOW)\n 09 TYPE(DATAIN)  INTENS(LOW)\n 0A TYPE(DATAIN)  INTENS(LOW)\n 20 TYPE(DATAIN)  INTENS(LOW) CAPS(IN)\n)BODY\n%--------------------- PAN Library Facility  (PLF) -----------------------------\n%Command ==>_PCMD                                               %SCROLL =>_AMT %\n%\n%Opt Name       Newname     LVL   User Type  STA  Maint    Access     Lines  ACT\n|PLFDATA ----------------------------------------------------------------------|\n|                                                                              |\n| -----------------------------------------------------------------------------|\n)INIT\n  .HELP = PLFH2           /* DEFAULT TUTORIAL NAME     */\n .CURSOR=PCMD\n  &AMT=PAGE\n  &PCMD=' '\n\n)PROC\n  &ZCURSOR = .CURSOR\n  &ZCSROFF = .CSRPOS\n  &ZLVLINE = LVLINE(PLFDATA)\n\n)END\n\n/*  DYNAMIC AREA SCREEN WIDTH FROM PQUERY. (80,132,160)\n/*  DYNAMIC AREA SCREEN DEPTH FROM PQUERY. (24,32,43,27,60)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PLF3": {"ttr": 14360, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x0c\\x9b\\x0c\\x9b\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 3227, "newlines": 3227, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCPLF  JOB (X0002,QCC,ASQCC),'X-COOK BRIAN',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=99\n//* *****************************************************************\n//* *****************************************************************\n//*                                                               ***\n//* TECH.ASQCC.SOURCE(PLF3)                                       ***\n//*                                                               ***\n//* *****************************************************************\n//* *****************************************************************\n//ASM1    EXEC PGM=IEV90,REGION=2048K,\n//        PARM='OBJECT,NODECK,TERM,XREF(FULL)'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DISP=SHR,DSN=SYS1.AMODGEN\n//         DD  DSN=SYS2.MACLIB,DISP=SHR <== SPFMACS\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSUT2   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSUT3   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(5,5)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\n         PRINT OFF\n         COPY  SPFMACS\n         PRINT ON\n         PRINT NOGEN\nPLF3     TITLE 'PLF - PAN LIBRARY FACILITY CHANGE LOG'\n***********************************************************************\n*                                                                     *\n*   CHANGE LOG                                                        *\n*                                                                     *\n*  10/13/86  BRIAN COOK    CHANGED \"VGET\" MACRO'S TO USE \"POOL=\".     *\n*                                                                     *\n*   9/18/86  BRIAN COOK    ADDED RETURN CODE TEST FOR EDIT-CANCEL.    *\n*                                                                     *\n*   8/19/86  BRIAN COOK    CONTINUE SR#994, ADD PROMPT FOR \"MOVE\" OR  *\n*                          \"COPY\", TRANSFER LIB, CHANGE STATUS TO     *\n*                          \"PROD\", ETC.                               *\n*                                                                     *\n*   8/15/86  BRIAN COOK    STARTED SR#994, MOVE OPTION FOR CHANGE     *\n*                          CONTROL. CHANGED SOURCE NAME TO PLF3.      *\n*                                                                     *\n*   8/04/86  CHANGED ALL REQUEST FOR DYNAMIC DATASET ALLOCATIONS      *\n*            FROM PAN.DATA, PAN.LIST TO @TEMP.PANDATA, @TEMP.PANLIST  *\n*                                                          MARK SPAIN *\n*                                                                     *\n*  12/03/85  PER SR#877, DO NOT ALLOW TRANSFER IF \"FROM\"   BRIAN COOK *\n*            LIBRARY MEMBER DOES NOT HAVE A COMMENT.                  *\n*                                                                     *\n*  11/15/85  ADDED POPEN/PCLOSE AFTER COMM/NOCOMM. THERE   BRIAN COOK *\n*            MAY BE A PROBLEM WITH \"PSERCH\" IGNORING THE              *\n*            \"NAME1\" FIELD.                                           *\n*                                                                     *\n*  10/15/85  ADDED \"DALRLSE\" TO ALL DYNAMIC ALLOCATIONS.   BRIAN COOK *\n*                                                                     *\n*  10/04/85  ADDED 5TH BASE REGISTER.                  BRIAN COOK     *\n*                                                                     *\n*  10/03/85  REVISED \"XFER\" JCL DUE TO BUG IN PAN#2.   BRIAN COOK     *\n*                                                                     *\n*   9/01/85  CONVERTED TO ISPF V2R1M2 DYNAMIC PANEL.   BRIAN COOK     *\n*                                                                     *\n*   7/10/85  ADDED \"LIST\" COMMAND TO PRINT PAN.LIST.   BRIAN COOK     *\n*            ADDED \"X\" LINE COMMAND AND \"XFER\" COMMAND                *\n*            TO SUPPORT TRANSFER FROM ONE PAN LIBRARY                 *\n*            TO ANOTHER.                                              *\n*                                                                     *\n*   7/09/85  ADDED ACCESS CODE FOR DISABLE.            BRIAN COOK     *\n*            ADDED \"SHOW\" COMMAND TO DISPLAY ACCESS                   *\n*            CODES.                                                   *\n*                                                                     *\n*   6/27/85  CHANGED PAN OPEN/CLOSE TO ONCE PER LIB    BRIAN COOK     *\n*                                                                     *\n*   6/26/85  ADD ACCESS CODE LINE COMMANDS:            BRIAN COOK     *\n*           \"AA\" ADD ACCESS CODE (IN NEWNAME COLUMN)                  *\n*           \"AC\" CHANGE (OLD,NEW  IN NEWNAME COLUMN)                  *\n*           \"AD\" DELETE (OLD ACCESS CODE IN NEWNAME COLUMN)           *\n*                                                                     *\n*           ALSO ADDED \"COMM\" AND \"NOCOMM\" COMMANDS                   *\n*           TO CONTROL DISPLAY OF COMMENTS                            *\n*                                                                     *\n*   6/25/85  1. REMOVE OLD VARIABLES.                  BRIAN COOK     *\n*            2. ADD SCROLL AMOUNT IN COMMAND LINE.                    *\n*            3. ACCESS CODE CHECKING. (IN NEWNAME COLUMN)             *\n*                                                                     *\n*   6/11/85  CALL ISPF DISPLAY MODULE DIRECTLY,        BRIAN COOK     *\n*            REMOVE DIAG MGMT SRVCS CALLS.                            *\n*                                                                     *\n*   5/29/85  MAJOR PERFORMANCE CHANGES:                BRIAN COOK     *\n*            1. CHANGED THE DIRECTORY DISPLAY LOGIC                   *\n*               SO THAT AN IN-CORE TABLE IS BUILT ON                  *\n*               THE FLY.                                              *\n*            2. CHANGED THE TABLE DISPLAY SO THAT ONLY                *\n*               20 MEMBERS ARE SHOWN ON THE SCREEN. THE               *\n*               PF KEYS CANNOT BE USED FOR SCROLLING THE              *\n*               DIRECTORY.                                            *\n*                                                                     *\n*   5/31/85  CHANGED TO USE \"SPFMACS\".                 BRIAN COOK     *\n*                                                                     *\n*   7/30/84  CHANGED PRINT FILE \"FREE\" TO DYN ALLOC    BRIAN COOK     *\n*                                                                     *\n*   6/05/84  ADDED \"PRINT MEMBER FUNCTION\"             BRIAN COOK     *\n*                                                                     *\n*   6/08/84  ADDED \"PSPOOL\" COMMAND TO IDENTIFY        BRIAN COOK     *\n*            LIBRARIES WITH PANSPOOL FORMAT.                          *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         TITLE 'PLF - PAN LIBRARY FACILITY GENERAL DESCRIPTION'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*               PAN LIBRARY FACILITY (PLF)                            *\n*               (FOR ISPF V2R1M2 5665-319)                            *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: EDIT, BROWSE AND UTILITY FUNCTIONS FOR PAN LIBRARIES.     *\n*                                                                     *\n*                                                                     *\n* FUNCTION: PLF IS DESIGNED TO OPERATE UNDER ISPF USING THE VERSION 2 *\n*           DYNAMIC PANEL DISPLAY FOR THE MEMBER SELECTION PANEL.     *\n*           IT  WILL NOT WORK WITH ANY PRIOR VERSION OF SPF.          *\n*                                                                     *\n*           IT DYNAMICALLY INVOKES THE SPF EDIT AND BROWSE            *\n*           FUNCTIONS USING THE FOLLOWING DATASETS:                   *\n*                                                                     *\n*                         &USERID.@TEMP.PANCARD                       *\n*                         &USERID.@TEMP.PANDATA                       *\n*                         &USERID.@TEMP.PANLIST.                      *\n*                                                                     *\n*           THE FOLLOWING EQUATE SHOULD BE SET TO A VALUE THAT IS     *\n*           COMFORTABLY GREATER THAN THE LARGEST PAN LIBRARY THAT     *\n*           PLF WILL EVER HANDLE:                                     *\n*                                                                     *\nDIRMAX   EQU 10000       LARGEST PAN LIB HAS LESS THAN 10,000 MEMBERS\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCES: ISPLINK, PAM                                   *\n*                                                                     *\n*                                                                     *\n* MACROS USED: SAVE                                                   *\n*              RETURN                                                 *\n*              GETMAIN                                                *\n*              STAX                                                   *\n*              ENQ                                                    *\n*              DEQ                                                    *\n*              TPUT                                                   *\n*              FREEMAIN                                               *\n*              $JQE                                                   *\n*              $JOE                                                   *\n*              CVT                                                    *\n*              CVTUSERS (USER)                                        *\n*              TCBWORK  (USER)                                        *\n*                                                                     *\n*                                                                     *\n* ISPF PANEL VARIABLES:                                               *\n*                                                                     *\n*      PLFZ     MENU 1 OPTION.                                        *\n*      PANLIB   MENU 1 DSN OF PAN LIBRARY.                            *\n*      PANCONTR MENU 1 CONTROL WORD. IF CONTROL-WORD PROTECTED.       *\n*                                                                     *\n*      XFERTO   MENU 3 DSN OF PAN LIBRARY, TARGET FOR TRANSFER.       *\n*      XFERCON  MENU 3 CONTROL WORD. IF CONTROL-WORD PROTECTED.       *\n*      XFERSTA  MENU 3 PROMPT FOR CHANGING STSTUS TO \"PROD'           *\n*      XFERMOD  MENU 3 PROMPT FOR \"MOVE\" OR \"COPY\".                   *\n*      PJC1     MENU 3 JOB CARD FOR TRANSFER JCL.                     *\n*      PJC2     MENU 3 JOB CARD FOR TRANSFER JCL.                     *\n*                                                                     *\n***********************************************************************\n         TITLE 'PLF - PROGRAM INITIALIZATION'\n***********************************************************************\n*\n* NOTE THE FOLLOWING ENTRY POINT LOGIC IS NON-STANDARD. IN PARTICULAR,\n*      IT WILL NOT WORK WITH CALLED PL/I PROGRAMS.\n*\n***********************************************************************\nPLF3     CSECT\n         PRINT GEN\n         USING *,13,12,11,10,9\n         B     100(,R15)\n         DC    17F'0'\n         DC    CL28'PLF3_&SYSDATE_&SYSTIME'\n         PRINT NOGEN\n         STM   14,12,12(13)   SAVE CALLING PGM'S REGISTERS\n         LA    R2,0(,R15)     LOAD EPA IN R2 FOR WORK REGISTER\n         ST    R13,4(R2)      SAVE THE CALLER'S R13\n         ST    R2,8(R13)      LINK SAVE AREAS\n         LR    R13,R2         SET SAVE AREA AND BASE 1\n*\nSETBASES DS    0H\n         L     R2,L4096       SET INCREMENT\n         LA    R12,0(R2,R13)  SET BASE 2\n         LA    R11,0(R2,R12)  SET BASE 3\n         LA    R10,0(R2,R11)  SET BASE 4\n         LA    R9,0(R2,R10)   SET BASE 5\n*\n         XC    0(4,R13),0(13) CLEAR WORD 1 OF SAVE AREA\n*\n         MVI   PLFTABFL,C'0'  NO ACTIVE TABLE\n         MVI   PLFPOPEN,C'0'  PAN NOT OPEN\n*\n         BAL   R7,INITFLDS    INITIALIZATION\n*\n         TITLE 'PLF - MAIN PROCESSING LOOP'\nSHOWAGIN DS    0H\n*\n         MVI   DONEFLAG,C'0'  NOT ALL DONE\n         BAL   R7,SHOWMENU    PROMPT FOR INPUT\n         CLI   DONEFLAG,C'1'  AM I ALL DONE\n         BE    PLFEOJ         YUP\n*\n         BAL   R7,PLFAPAN     PROCESS THE LIBRARY\n         B     SHOWAGIN       RE-SHOW THE MENU\n*\nPLFEOJ   DS    0H\n*\n         BAL   R7,PLFDONE\n*\n         L     R13,4(R13)     RESTORE THE CALLER'S R13\n         LM    14,12,12(13)   RETURN TO OUR CALLER\n         SR    15,15          SET RC=0\n         BR    14             AND RETURN\n*\nDONEFLAG DC    C'0'\n*\nL4096    DC    F'4096'\n*\n         TITLE 'TERMINATION LOGIC'\nDONE7    DS    F\nPLFDONE DS     0H\n*\n         ST    R7,DONE7\n*\n         CLI   PLFTABFL,C'0'      NO ACTIVE TABLE\n         BE    PLFTOPEN        CHECK PAN OPEN STATUS\n*\nPLFTOPEN DS 0H\n         CLI   PLFPOPEN,C'0'  PAN NOT OPEN\n         BE    EOJ\n*\n         XC    ACTION,ACTION       CLEAR ACTION WORD\n         L     R15,=V(PCLOSE)\n         LA    R1,@PCLOSE\n         BALR  R14,R15             GO CLOSE OUT PANVALET FILE\n         MVI   PLFPOPEN,C'0'  PAN NOT OPEN\n*\nEOJ      DS    0H\n         VDELETE PANCONTR\n         VDELETE PANLIB\n*\n*\n*  FREE THE FILES\n*\n         LA    R1,FREEIN     SYSIN\n         DYNALLOC\n*\n         LA    R1,FREEPR     SYSPRINT\n         DYNALLOC\n*\n         LA    R1,FREEDD2    PANDD2\n         DYNALLOC\n*\n         LA    R1,FREEDATA   PANDATA\n         DYNALLOC\n*\n         LA    R1,FREEDD1    PANDD1\n         DYNALLOC\n*\n         LA    R1,DECONCAT   PANDATA AND SYSIN\n         DYNALLOC\n*\nCLOSE1   DS    0H\n*\n         TM    PANLIST+48,X'10'   DCB OPEN?\n         BZ    CLOSE2             NOPE\n*\n         CLOSE PANLIST\n*\nCLOSE2   DS    0H\n*\n         TM    SYSIN+48,X'10'     DCB OPEN?\n         BZ    CLOSE3             NOPE\n*\n         CLOSE SYSIN\n*\nCLOSE3   DS    0H\n*\n         TM    PANDATA+48,X'10'   DCB OPEN?\n         BZ    CLOSE4             NOPE\n*\n         CLOSE PANDATA\n*\nCLOSE4   DS    0H\n*\n         TM    SYSUT1+48,X'10'    DCB OPEN?\n         BZ    CLOSE5             NOPE\n*\n         CLOSE SYSUT1\n*\nCLOSE5   DS    0H\n*\n         TM    SYSUT2+48,X'10'    DCB OPEN?\n         BZ    CLOSED             NOPE\n*\n         CLOSE SYSUT2\n*\nCLOSED   DS    0H\n*\n         L     R7,DIRGMAX\n         L     R2,TBLFIRST\n      FREEMAIN R,LV=(7),A=(2)\n*\nDONEDONE DS    0H\n         L     R7,DONE7\n         BR    R7             RETURN\n*\n         TITLE 'PLF - INITIALIZATION'\nINIT7    DC    F'0'\nINITFLDS DS    0H\n         ST    R7,INIT7\n*\n         VCOPY ZUSER,U8,USERID,MOVE\n*\n         LTR   R15,15          IF RETURN CODE IS ZERO,\n         BZ    GOTZUSER        OK\n*\n         WTO   'PLF001 - UNABLE TO RETRIEVE ZUSER',ROUTCDE=11\nABEND1   ABEND 1,DUMP,STEP\nGOTZUSER DS    0H\n*\n         MVC   PLFZUSER(8),USERID\n*\n* SET UP THE DSNAME FIELDS FOR DYNAMIC ALLOCATION.\n*\n         SR    R14,R14\n         MVC   DSNDATA(8),USERID\n         LA    R1,DSNDATA\n         CLI   0(R1),C' '\n         BE    *+16\n         LA    R1,1(,R1)\n         LA    R14,1(,R14)\n         B     *-16\n         MVC   0(14,R1),=C'.@TEMP.PANDATA'\n         LA    R14,14(,R14)\n         STH   R14,LENDATA\n*\n         SR    R14,R14\n         MVC   DSNLIST(8),USERID\n         LA    R1,DSNLIST\n         CLI   0(R1),C' '\n         BE    *+16\n         LA    R1,1(,R1)\n         LA    R14,1(,R14)\n         B     *-16\n         MVC   0(14,R1),=C'.@TEMP.PANLIST'\n         LA    R14,14(,R14)\n         STH   R14,LENLIST\n*\n         SR    R14,R14\n         MVC   DSNCARD(8),USERID\n         LA    R1,DSNCARD\n         CLI   0(R1),C' '\n         BE    *+16\n         LA    R1,1(,R1)\n         LA    R14,1(,R14)\n         B     *-16\n         MVC   0(14,R1),=C'.@TEMP.PANCARD'\n         LA    R14,14(,R14)\n         STH   R14,LENCARD\n*\n* THESE FIELDS DISPLAYED ON THE PLF MENU\n*\n         VDEFINE PANLIB,44\n         VDEFINE XFERTO,44\n         VDEFINE PANCONTR,4\n         VDEFINE XFERCON,4\n         VDEFINE PJC1,80\n         VDEFINE PJC2,80\n         VDEFINE XFERMOD,4\n         VDEFINE XFERSTA,4\n         VDEFINE AREATYP,8\n         VDEFINE COLS,4,FMT=FIXED\n         VDEFINE ROWS,4,FMT=FIXED\n         VDEFINE TLROW,4,FMT=FIXED\n         VDEFINE TLCOL,4,FMT=FIXED\n         VDEFINE PCMD,40\n         VDEFINE PLFDATA,3200\n         VDEFINE ZVERB,8\n         VDEFINE ZSCROLLA,4\n         VDEFINE ZSCROLLN,4,FMT=FIXED\n*\n* THESE FIELDS ARE USED IN THE DIRECTORY MEMBER DISPLAY\n*\n         MVI   PANS,C' '          SET SELECTION CODE TO SPACES\n*\n*\n*  FREE THE FILES\n*\n         LA    R1,FREEIN     SYSIN\n         DYNALLOC\n*\n         LA    R1,FREEPR     SYSPRINT\n         DYNALLOC\n*\n         LA    R1,FREEDD2    PANDD2\n         DYNALLOC\n*\n         LA    R1,FREEDATA   PANDATA\n         DYNALLOC\n*\n         LA    R1,DECONCAT   PANDATA AND SYSIN\n         DYNALLOC\n*\n*    ALLOCATE PANDD2\n*\n*\nDD2OLD   DS    0H\n         LA    R1,ALLODD2    PANDD2--DUMMY\n         DYNALLOC\n*\n         LTR   R15,R15\n         BZ    DATAOLD\n*\n         WTO   'PLF  UNABLE TO ALLOCATE PANDD2 DUMMY   ',ROUTCDE=11\n         DC    H'0'          ABEND S0C1\n*\n*    ALLOCATE PANDATA  @TEMP.PANDATA\n*\n*\nDATAOLD  DS    0H\n*\n         LA    R1,OLDDATA    PANDATA--@TEMP.PANDATA\n         DYNALLOC\n         LTR   R15,R15\n         BZ    SYSINOLD\n*\n         LA    R1,NEWDATA    PANDATA--@TEMP.PANDATA\n         DYNALLOC\n         LTR   R15,R15\n         BZ    SYSINOLD\n*\n         WTO   'PLF  UNABLE TO ALLOCATE @TEMP.PAN.DATA',ROUTCDE=11\n         DC    H'0'          ABEND S0C1\n*\n*\n*    ALLOCATE SYSIN\n*\n*\n*    ALLOCATE @TEMP.PANCARD\n*\nSYSINOLD DS    0H\n         LA    R1,OLDIN      SYSIN\n         DYNALLOC\n*\n         LTR   R15,R15\n         BZ    PRINTOLD\n*\n         LA    R1,NEWIN      SYSIN\n         DYNALLOC\n*\n         LTR   R15,R15\n         BZ    PRINTOLD\n*\n    WTO   'PLF  UNABLE TO ALLOCATE SYSIN FILE @TEMP.PANCARD',ROUTCDE=11\n         DC    H'0'          ABEND S0C1\n*\n*\n*    ALLOCATE SYSPRINT\n*\n*\n*    FIRST TRY TO ALLOCATE IT OLD\n*\nPRINTOLD DS    0H\n         LA    R1,OLDPR      SYSPRINT\n         DYNALLOC\n*\n         LTR   R15,R15\n         BZ    DIRGMAIN\n*\n         LA    R1,NEWPR      SYSPRINT\n         DYNALLOC\n*\n         LTR   R15,R15\n         BZ    DIRGMAIN\n*\n    WTO   'PLF  UNABLE TO ALLOCATE SYSPRINT @TEMP.PAN.LIST',ROUTCDE=11\n         DC    H'0'          ABEND S0C1\n*\nDIRGMAIN DS    0H\n*\n         L     R7,DIRGMAX\n         LA    R7,4095(,R7)      ROUND UP TO 4K BOUNDARY\n         SRL   R7,12\n         LA    R7,1(,R7)         ADD A PAGE\n         SLL   R7,12\n         ST    R7,DIRGMAX\n*\n       GETMAIN R,LV=(7)\n*\n         ST    R1,TBLFIRST\n         ST    R1,TBLNEXT\n         A     R1,L4096\n         ST    R1,DIRGADD\n*\n         MVI   0(R1),0         ZERO OUT THE AREA\n         LR    R0,R1           SET ADDRESS\n         LA    R14,1(,R1)\n         LR    R15,R7\n         BCTR  R15,0\n         LR    R1,R15\n         MVCL  R14,R0\n*\nINITDONE DS    0H\n         L     R7,INIT7\n         BR    R7\n*\nDIRGMAX  DC    A(16*DIRMAX)\nDIRGADD  DS    F\nDIRFIRST DS    F\nDIRCURR  DS    F\nDIRLAST  DS    F\n*\nTBLFIRST DS    F\nTBLNEXT  DS    F\n*\n         TITLE 'PLF - DISPLAY THE MENU'\nMENU7    DS    F\nPLFPF3   DS    0H\n         MVI   DONEFLAG,C'1'  I AM ALL DONE\nMENUDONE DS    0H\n         L     R7,MENU7\n         BR    R7\nSHOWMENU DS    0H\n         ST    R7,MENU7\nDISPLAY1 DS    0H\n*\n         VGET  PANLIB\n*\n*\n         DISPLAY PLF3P1,ENDKEY=PLFPF3\n*\n*\n         C     R15,FZEROS         IF ENTER KEY PRESSED\n         BNE   PLFBADRC\n*\n         L     R1,DIRGADD\n         MVI   0(R1),0         ZERO OUT THE AREA\n         LR    R0,R1           SET ADDRESS\n         LA    R14,1(,R1)\n         LR    R15,R7\n         BCTR  R15,0\n         LR    R1,R15\n         MVCL  R14,R0\n         MVC   NAME1(22),TOPNAME         RESET DIR SEARCH\n         MVC   DIRFIRST(4),DIRGADD\n         L     R1,DIRFIRST\n         MVC   0(10,R1),TOPNAME\n         MVC   DIRCURR(4),DIRGADD\n         MVC   DIRLAST(4),DIRGADD\n*\n         TR    PANLIB(44),CAPSONLY       UPPER-CASE IT\n         MVC   XFERFROM(44),PANLIB       MAKE A COPY\n         VPUT  PANLIB\n*\n         TITLE 'PLF - SET DSNAME FOR PAN LIBRARY'\nPLFSETDS DS    0H\n*\n*  PICK UP DSNAME\n*\n         SR    R14,R14\n         LA    R1,PANLIB\n*\n         CLI   0(R1),C' '\n         BE    *+16\n         LA    R1,1(,R1)\n         LA    R14,1(,R14)\n         B     *-16\n*\n         STH   R14,LENLIB\n*\n*  ALLOCATE THE PANLIB\n*\n*\n         CLI   PLFPOPEN,C'1'  PAN OPEN\n         BNE   OKFREE1        NO, JUST FREE\n*\n         XC    ACTION,ACTION       CLEAR ACTION WORD\n         L     R15,=V(PCLOSE)\n         LA    R1,@PCLOSE\n         BALR  R14,R15             GO CLOSE OUT PANVALET FILE\n         MVI   PLFPOPEN,C'0'  PAN CLOSED\n*\nOKFREE1  DS    0H\n         LA    R1,FREEDD1              PANLIB\n         DYNALLOC\n*\n         LA    R1,OLDDD1               PANLIB\n         DYNALLOC\n*\n         LTR   R15,R15\n         BZ    CHKPSPL\n*\n         WTO   'PLF  UNABLE TO ALLOCATE PANLIB',ROUTCDE=11\n         DC    H'0'          ABEND S0C1\n*\nCHKPSPL  DS    0H\n*\n         XC    ACTION,ACTION\n         L     R15,=V(POPEN)\n         LA    R1,@POPEN\n         BALR  R14,R15               INVOKE OPEN PANVALET FILE\n         SPACE 1\n         CLC   ACTION,=F'0'\n         BNE   PLFRRPOP              NO GOOD\n         MVI   PLFPOPEN,C'1'  PAN OPEN\n*\n         MVI   PSPOOL,C'0'                NOT PSPOOL\n         CLC   PANLIB(7),=C'P.SPOOL'     IS IT P.SPOOL\n         BNE   *+8                        NOPE\n         MVI   PSPOOL,C'1'                SET TO PSPOOL\n*\n         B     MENUDONE                   GO TO WORK\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR '\nAPAN7    DS    F\nPLFEPAN  DS    0H\n         L     R7,APAN7\n         BR    R7\n*\nPLFAPAN  DS    0H\n         ST    R7,APAN7\n*\n         MVI   POSITION,C' '\n*\n         MVI   DIRTOPN,C' '\n         MVC   DIRTOPN+1(21),DIRTOPN\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - READ DIRECTORY LOOP'\nLD#LOOP1 DS    0H\n*\n*\n         L     R1,TBLFIRST\n         ST    R1,TBLNEXT\n         MVI   0(R1),X'FF'   END OF TABLE FLAG\n         MVI   TOPSEL,C' '        FIRST MEMBER SELECTED ON SCREEN\n         MVI   DIRTOPN,C' '\n*\n         SR    R15,15\n         ST    R15,TABCOUNT   NO LINES ADDED\n*\n         PQUERY PLF3P2,PLFDATA\n*\n         L     R14,COLS               NUMBER OF COLUMNS\n         MH    R14,ROWS+2             TIMES NUMBER OF ROWS\n         ST    R14,ISPFSIZE           GIVES SCREEN AREA\n         L     R15,ROWS               LOOP CONTROL\n         L     R1,COLS                NUMBER OF COLUMNS\n         BCTR  R1,0                   EXECUTED MOVE\n*\n         LA    R14,PLFDATA\n         ST    R14,ISPFWORK\n*\n         EX    R1,MASKMOVE\n         LA    R14,1(R1,R14)\n         BCT   R15,*-8\n*\n         XC    ISPFNUMB(4),ISPFNUMB INITIALIZE COUNTER\n*\nLD#LOOP2 DS    0H\n*\n         BAL   R7,DIRLOOP1         RETRIEVE A LIBRARY DIRECTORY ENTRY\n*\n         CLC   DIRENTRY(2),=C'$*'  TEST FOR NO MORE DIR ENTRIES\n         BE    LD#EOF              THATS ALL..EXIT\n*\n*\n         L     R15,ISPFWORK\n         MVC   0(80,R15),TAB1\n         MVC   DIRBOTM(10),NAMEPAN FOR SPLIT-SCREEN, LAST MEM\n         LA    R15,80(,R15)\n         ST    R15,ISPFWORK\n         L     R15,ISPFNUMB\n         LA    R15,1(,R15)\n         ST    R15,ISPFNUMB\n         C     R15,ROWS\n         BNL   LD#EOF\n*\nLD#COMT1 DS    0H\n*\n         CLI   COMMFLAG,C'0'       SHOW COMMENTS?\n         BE    LD#LOOP2            NO, JUST GET THE NEXT MEMBER\n*\n*\n         L     R15,ISPFWORK\n         MVC   0(80,R15),COMMLINE\n         LA    R15,80(,R15)\n         ST    R15,ISPFWORK\n         L     R15,ISPFNUMB\n         LA    R15,1(,R15)\n         ST    R15,ISPFNUMB\n         C     R15,ROWS\n         BL    LD#LOOP2\n*\nLD#EOF   DS    0H\n*\n         B     SHOWTBLS\n*\nSHOWTBDS DS    0H\n*\n         CLI   TOPSEL,C' '        FIRST MEMBER SELECTED ON SCREEN\n         BE    SHOWTBD1           NONE SELECTED, SO RESHOW\n*\n         MVC   NAME1(10),TOPSEL\n         B     SHOWTBD2           GO DO IT\n*\nSHOWTBD1 DS    0H\n*\n         MVC   NAME1(10),DIRTOPN\n*\nSHOWTBD2 DS    0H\n*\n         B     LD#LOOP1\n*\n         TITLE 'INVOKE ISPF DISPLAY MODULE'\nSHOWTBLS DS    0H\n*\n         VREPLACE PLFDATA,ISPFSIZE,PLFDATA\n*\nSHOWTBL2 DS    0H\n         XC    ZSCROLLN(4),ZSCROLLN\n         MVC   ZSCROLLA(4),SPACES\n         MVC   ZVERB(8),SPACES\n*\n         DISPLAY PLF3P2,ENDKEY=PLFEPAN\n*\n         TR    PCMD(40),CAPSONLY    UPPER-CASE ALL INPUT FIELDS\n*\nDISPLINE DS    0H\n         LA    R1,PLFDATA          POINT TO FIRST LINE OF MEMBERS\n         L     R14,TBLFIRST        POINT TO FIRST LINE ADDRESS\n         MVI   0(R14),X'FF'\n         LA    R15,40              LOOP CONTROL\n*\nMEMLOOP  DS    0H\n         CLI   27(R1),X'20' COMMENT CHANGED?\n         BE    COMMMOVE\n         CLI   0(R1),X'20'  MEMBER SELECTED?\n         BNE   MEMNSEL\nMEMSELD  DS    0H\n*\n         MVC   0(80,R14),0(R1)\n         LA    R14,80(,R14)\n         MVI   0(R14),X'FF'\n*\n* IF I AM DOING A TRANSFER, MAKE SURE THE MEMBER HAS A COMMENT\n*\n         OI    1(R1),C' '         MAKE SEL CODE UPPER-CASE\n         CLI   1(R1),C'X'         TRANSFER\n         BNE   MEMNSEL\n         CLI   COMMFLAG,C'0'       SHOW COMMENTS?\n         BE    MESSQ               NO, DISPLAY THE MESSAGE\n*\n*        LA    R0,108(,R1)\n         CLI   108(R1),C'*'        COMMENT LINE?\n         BE    MEMCOMM             GO MOVE IT IN\nMEMNCOMM DS    0H\n*        DC    H'0'\n         SETMSG PLF001P\n         B     SHOWTBL2\n*\nMESSQ    DS    0H\n         SETMSG PLF001Q\n         B     SHOWTBL2\n*\nMEMCOMM  DS    0H\n         LA    R1,80(,R1)\n*        LA    R0,29(,R1)\n         CLC   29(10,R1),SPACES    IF THE COMMENT IS NOT SPACES\n         BNE   COMMMOVE            OK TO TRANSFER\n         B     MEMNCOMM            SET MESSAGE AND FAIL\nCOMMMOVE DS    0H\n         MVC   0(80,R14),0(R1)\n         LA    R14,80(,R14)\n         MVI   0(R14),X'FF'\nMEMNSEL  DS    0H\n         LA    R1,80(,R1)\n         BCT   R15,MEMLOOP\n*\n         VGET  ZVERB,POOL=ASIS\n         VGET  ZSCROLLA,POOL=ASIS\n         VGET  ZSCROLLN,POOL=ASIS\n*\n         CLC   ZVERB(2),=C'UP'     PF7\n         BE    DIRPF7              BRANCH IF YES\n         CLC   ZVERB(4),=C'DOWN'   PF8\n         BE    DIRPF8              BRANCH IF YES\n         B     GOTSTUFF            ASSUME ENTER\n*\nENDK     DS    0H\n         B     PLFEPAN             ALL DONE\n*\n         TITLE 'SCROLL UP'\nDIRPF7   DS    0H\n*\n         L     R1,DIRFIRST         POINT TO FIRST MEMBER\n*\n         CLI   PCMD,C'M'           GO TO TOP?\n         BNE   DIRPF71             NO, JUST SCROLL\n*\nDIRTOP   DS    0H\n*\n         L     R1,DIRFIRST         POINT TO FIRST MEMBER\n         MVC   NAME1(10),0(R1)     START DIRECTORY DISPLAY AT TOP\n         B     SHOWTBD2\n*\nDIRPF71  DS    0H\n*\n         C     R1,DIRLAST          HAVE I GONE PAST END?\n         BNL   DIRTOP              YES, JUST GO TO TOP\n*\n         CLC   DIRTOP2(10),0(R1)   TOP OF SCREEN?\n         BE    DIRPF72             YES, I FOUND IT\n*\n         LA    R1,10(,R1)          BUMP TO NEXT\n         B     DIRPF71             KEEP LOOPING\n*\nDIRPF72  DS    0H\n*\n         LA    R0,10               EACH ENTRY IS 10 BYTES\n         MH    R0,ZSCROLLN+2       BACK UP SCREEN SIZE\n         SR    R1,R0\n*\n         C     R1,DIRFIRST         HAVE I GONE PAST TOP?\n         BL    DIRTOP              YES, JUST GO TO TOP\n*\n         MVC   NAME1(10),0(R1)     POINT TO ENTRY\n         B     SHOWTBD2\n*\n         TITLE 'SCROLL DOWN'\nDIRPF8   DS    0H\n*\n         CLI   PCMD,C'M'           GO TO BOTTOM?\n         BE    DIRBOT              YES\n*\n         L     R3,DIRFIRST\n*\nDIRPF81  DS    0H\n*\n         LA    R3,10(,R3)\n         CLC   DIRTOP2(10),0(R3)\n         BNH   DIRPF82\n*\n         B     DIRPF81\n*\nDIRPF82  DS    0H\n*\n         LA    R0,10               EACH ENTRY IS 10 BYTES\n         MH    R0,ZSCROLLN+2       BUMP DOWN SCREEN SIZE\n         AR    R3,R0\n*\n         C     R3,DIRLAST          HAVE I GONE PAST BOTTOM?\n         BH    DIRBUMP\n         C     R3,DIRFIRST         HAVE I GONE PAST TOP?\n         BL    DIRTOP              YES, JUST GO TO TOP\n*\n         LR    R1,R3\n         B     DIRPF8E\n*\nDIRBUMP  DS    0H\n*\n         L     R2,ZSCROLLN\n*\nDIRBUMP1 DS    0H\n*\n         L     R1,DIRLAST          POINT TO BOTTOM\n         MVC   NAME1(10),0(R1)     START DIRECTORY DISPLAY\n*\nDIRBUMP2 DS    0H\n*\n         BAL   R7,DIRLOOP1         RETRIEVE A LIBRARY DIRECTORY ENTRY\n*\n         CLC   DIRENTRY(2),=C'$*'  TEST FOR NO MORE DIR ENTRIES\n         BE    DIRBUMP3            JUST BOTTOM\n*\n         BCT   R2,DIRBUMP2         KEEP LOOPING\n*\nDIRBUMP3 DS    0H\n*\n         L     R1,DIRLAST          POINT TO BOTTOM\n         B     DIRPF8E             ALL DONE\n*\nDIRBOT   DS    0H\n*\n         LA    R2,4095             SET LOOP CONTROL\n         B     DIRBUMP1            GO LOOP\n*\nDIRPF8E  DS    0H\n*\n         MVC   NAME1(10),0(R1)     START DIRECTORY DISPLAY\n*\n         B     SHOWTBD2\n*\n         TITLE 'PROCESS LINE COMMANDS'\n*\n***********************************************************************\n*\n*   DETERMINE WHETHER ANYTHING WAS ENTERED ON THE SCREEN\n*\n***********************************************************************\n*\nGOTSTUFF DS    0H\n*\n         L     R1,TBLFIRST\n         ST    R1,LINEPTR\n*\n         CLI   PCMD,C' '           COMMAND ENTERED?\n         BNE   GOTCMD              YES, IGNORE LINE COMMANDS\n*\nNEXTLINE DS    0H\n*\n         L     R3,LINEPTR         POINT TO SCREEN LINE\n         CLI   0(R3),X'FF'        IF ALL DONE\n         BE    SHOWTBDS             RESHOW THE SCREEN\n         LA    R1,80(,R3)          POINT TO NEXT  MODIFIED LINE\n         ST    R1,LINEPTR          STORE FOR NEXT TIME THROUGH\n         CLI   0(R3),X'05'        IF COMMENT LINE\n         BE    NEXTLINE            RESHOW THE SCREEN\n*\n         MVC   PANS(79),1(R3)   COPY STUFF\n         TR    PANS(80),CAPSONLY    UPPER-CASE ALL INPUT FIELDS\n         MVC   SELSAVE(3),PANS\n*\n         CLI   TOPSEL,C' '        FIRST MEMBER SELECTED ON SCREEN\n         BNE   *+10               NO\n         MVC   TOPSEL(10),NAMEPAN YES, SET IT\n*\n         CLI   SELSAVE,C' '       IF A SELECTION CODE WAS NOT ENTERED\n         BE    NEXTLINE           CHECK THE NEXT LINE\n*\n         CLI   SELSAVE,C'B'   IS IT A BROWSE\n         BE    PBROWSE        GO DO IT\n*\n         CLI   SELSAVE,C'S'   IS IT \"SELECT\"\n         BNE   CMDCHKS        NOPE\n         MVI   SELSAVE,C'B'   SET IT TO BROWSE\n         CLI   PSPOOL,C'1'    IS IT PANSPOOL\n         BE    PBROWSE        GO DO IT\n         MVI   SELSAVE,C'E'   IT IS EDIT\n         B     PEDIT          GO DO IT\n*\nCMDCHKS  DS    0H\n         CLI   SELSAVE,C'E'   IS IT EDIT\n         BE    PEDIT          GO DO IT\n*\n         CLI   SELSAVE,C'D'   IS IT DISABLE\n         BE    PDELETE        GO DO IT\n*\n         CLI   SELSAVE,C'K'   IS IT DELETE\n         BE    PDELETE        GO DO IT\n*\n         CLI   SELSAVE,C'N'   IS IT STATUS ENABLE\n         BE    PENABLE        GO DO IT\n*\n         CLI   SELSAVE,C'P'   IS IT PRINT MEM\n         BE    PPRINT         GO DO IT\n*\n         CLI   SELSAVE,C'R'   IS IT RENAME\n         BE    PRENAME        GO DO IT\n*\n         CLC   SELSAVE(3),=C'COM'   COMMENT?\n         BE    PCOMMNT        GO DO IT\n*\n         CLI   SELSAVE,C'C'   IS IT COPY\n         BE    PCOPY          GO DO IT\n*\n         CLI   SELSAVE,C'X'   IS IT XFER\n         BNE   CMDAC          NO, CHECK FOR ACCESS CODE COMMANDS\n*\n         BE    PXFER          GO DO IT\n*\nCMDAC    DS    0H\n         CLI   SELSAVE,C'U'   IS IT CHANGE USER ID\n         BE    PNEWUSER       GO DO IT\n         CLI   SELSAVE,C'A'   IS IT ACCESS CODE MAINT\n         BE    PACMAINT       GO DO IT\n*\n* ADD TESTS FOR OTHER LINE SELECTION CODES HERE\n*\n         B     NEXTLINE       GO REPEAT THE DISPLAY\n         TITLE 'PLF - PAN LIBRARY FACILITY - ACCESS CODE MAINTENANCE'\nPACMAINT DS    0H\n*\n         MVI   ACLINE,C' '\n         MVC   ACLINE+1(79),ACLINE\n*\n         MVC   ACLINE(6),=C'++USER'\n         MVC   ACLINE+7(10),NAMEPAN\n         LA    R15,ACLINE+8\n*\n         CLI   0(R15),C' '  GOT A BLANK?\n         BE    *+12         YUP\n         LA    R15,1(,15)   NO, BUMP 1\n         B     *-12\n*\n         MVI   0(R15),C','  SET THE COMMA\n         LA    R15,1(,15)       BUMP 1\n*\n         CLI   SELSAVE+1,C'A'   IS IT ACCESS CODE ADD\n         BE    PACMAINA\n         CLI   SELSAVE+1,C'C'   IS IT ACCESS CODE CHANGE\n         BE    PACMAINC\n         CLI   SELSAVE+1,C'D'   IS IT ACCESS CODE DELETE\n         BE    PACMAIND\n*\n         B     NEXTLINE       GO REPEAT THE DISPLAY\n*\nPACMAINA DS    0H             ADD ACCESS CODE\n*\n         CLI   PACCESS,C' '   IF NON-BLANK ACCESS CODE,\n         BNE   NEXTLINE       GO REPEAT THE DISPLAY\n*\n         MVC   0(4,R15),PUSER EXISTING USER CODE\n         MVI   4(R15),C','\n         MVC   5(4,R15),NEWNAME  NEW ACCESS CODE\n         MVC   9(2,R15),=C',1'\n*\n         B     PACLINK        GO CALL PAN#1\n*\nPACMAINC DS    0H             CHANGE ACCESS CODE\n*\n         CLI   PACCESS,C' '   IF BLANK ACCESS CODE\n         BE    NEXTLINE       GO REPEAT THE DISPLAY\n*\n         MVC   ALINE+9(4),NEWNAME  OLD ACCESS CODE\n         MVC   0(9,R15),NEWNAME  \"OLD,NEW\" ACCESS CODE\n*\n         B     PACLINK        GO CALL PAN#1\n*\nPACMAIND DS    0H             DELETE ACCESS CODE\n*\n         CLI   PACCESS,C' '   IF BLANK ACCESS CODE\n         BE    NEXTLINE       GO REPEAT THE DISPLAY\n*\n         MVC   ALINE+9(4),NEWNAME  OLD ACCESS CODE\n         MVC   0(4,R15),NEWNAME  EXISTING ACCESS CODE\n         MVC   4(7,R15),=C',0000,0'  DELETE ACCESS CODE\n*\n         B     PACLINK        GO CALL PAN#1\n*\n*\nPACLINK  DS    0H\n*\n         OPEN  (SYSIN,(OUTPUT))\n*\n         CLI   PANCONTR,C' '      CONTROL WORD ENTERED\n         BE    PUTACLIN\n         PUT   SYSIN,CLINE\nPUTACLIN DS    0H\n*\n         CLI   SELSAVE+1,C'C'   IS IT ACCESS CODE CHANGE\n         BE    PUTALIN2\n         CLI   SELSAVE+1,C'D'   IS IT ACCESS CODE DELETE\n         BE    PUTALIN2\n*\n         B     PUTACLN2\n*\nPUTALIN2 DS    0H\n         PUT   SYSIN,ALINE\n*\nPUTACLN2 DS    0H\n         PUT   SYSIN,ACLINE\n         CLOSE SYSIN\n*\n         LA    R1,PANPARMS\n         LINK  EP=PAN#1\n         LTR   R15,R15\n         BZ    NEXTLINE\n*\n         MVC   DSNOTLST(44),LISTISPF   SET DSN FOR BROWSE\n      PDFBROWS DSNOTLST\n*\n         B     NEXTLINE\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - CHANGE USER ID'\nPNEWUSER DS    0H\n*\n         MVC   ULINE+7(10),NAMEPAN\n         LA    R15,ULINE+8\n*\n         CLI   0(R15),C' '  GOT A BLANK?\n         BE    *+12         YUP\n         LA    R15,1(,15)   NO, BUMP 1\n         B     *-12\n*\n         MVI   0(R15),C','  SET THE COMMA\n*\n         OC    PUSER(4),=C'0000'  SET BLANKS TO ZEROS\n         MVC   1(4,R15),PUSER     MOVE IT IN\n         MVI   5(R15),C','  SET THE COMMA\n*\n         OC    NEWNAME(4),=C'0000'  SET BLANKS TO ZEROS\n         MVC   6(4,R15),NEWNAME   MOVE IT IN\n*\n         OPEN  (SYSIN,(OUTPUT))\n*\n         CLI   PANCONTR,C' '      CONTROL WORD ENTERED\n         BE    PUTULINE\n         PUT   SYSIN,CLINE\nPUTULINE DS    0H\n         PUT   SYSIN,ULINE\n         CLOSE SYSIN\n*\n         LA    R1,PANPARMS\n         LINK  EP=PAN#1\n         LTR   R15,R15\n         BZ    NEXTLINE\n*\n         MVC   DSNOTLST(44),LISTISPF   SET DSN FOR BROWSE\n      PDFBROWS DSNOTLST\n*\n         B     NEXTLINE\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - ADD/CHANGE COMMENT'\nPCOMMNT  DS    0H\n*\n         MVI   OLINE,C' '\n         MVC   OLINE+1(79),OLINE\n         MVC   OLINE(10),=C'++COMMENT '\n         MVC   OLINE+11(10),NAMEPAN\n         LA    R15,OLINE+12\n*\n         CLI   0(R15),C' '  GOT A BLANK?\n         BE    *+12         YUP\n         LA    R15,1(,15)   NO, BUMP 1\n         B     *-12\n*\n         MVI   0(R15),C','  SET THE COMMA\n*\n         L     R1,LINEPTR\n         MVC   1(51,R15),28(R1)   COPY COMMENT\n*\n         OPEN  (SYSIN,(OUTPUT))\n*\n         CLI   PANCONTR,C' '      CONTROL WORD ENTERED\n         BE    CHKCOMAC\n         PUT   SYSIN,CLINE\nCHKCOMAC DS    0H\n*\n         CLI   PACCESS,C' '   IF BLANK ACCESS CODE\n         BE    PUTOLINE       JUST CHANGE THE COMMENT\n*\n         MVC   ALINE+9(4),NEWNAME  OLD ACCESS CODE\n         PUT   SYSIN,ALINE\n*\nPUTOLINE DS    0H\n*\n         PUT   SYSIN,OLINE\n         CLOSE SYSIN\n*\n         LA    R1,PANPARMS\n         LINK  EP=PAN#1\n         LTR   R15,R15\n         BZ    NEXTLINE\n*\n         MVC   DSNOTLST(44),LISTISPF   SET DSN FOR BROWSE\n      PDFBROWS DSNOTLST\n*\n         B     NEXTLINE\n*\nLISTISPF DC    CL44'@TEMP.PANLIST'\nDATAISPF DC    CL44'@TEMP.PANDATA'\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - EDIT A PAN MEMBER'\nPEDIT    DS    0H\n*\n*        DC    H'0'\n*\n         BAL   R7,READPAN\n*\n         MVC   DSNOTLST(44),DATAISPF   SET DSN FOR EDIT\n       PDFEDIT DSNOTLST\n*\n         LTR   R15,R15\n         BNZ   NEXTLINE\n*\n         OPEN  (SYSIN,(OUTPUT))\n*\nTSTACC   DS    0H\n*\n         CLI   PACCESS,C'A'         ACCESS CONTROL FOR THIS MEMBER?\n         BNE   TSTCCOD\n         MVC   ALINE+10(4),NEWNAME  SET ACCESS CODE\n         PUT   SYSIN,ALINE\n*\nTSTCCOD  DS    0H\n*\n         CLI   PANCONTR,C' '      CONTROL WORD ENTERED\n         BE    SETELINE\n         PUT   SYSIN,CLINE\n*\nSETELINE DS    0H\n*\n         PUT   SYSIN,ELINE\n         CLOSE SYSIN\n*\n*\n         LA    R1,CONCATIN\n         DYNALLOC\n         LTR   R15,R15\n         BZ    *+6\n         DC    H'0'\n*\n*\n         LA    R1,PANPARMS\n         LINK  EP=PAN#1\n         LTR   R15,R15\n         BZ    EDECONCT\n*\n         MVC   DSNOTLST(44),LISTISPF\n      PDFBROWS DSNOTLST\n*\nEDECONCT DS    0H\n*\n         LA    R1,DECONCAT\n         DYNALLOC\n*\n*\n         B     NEXTLINE\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - RENAME A PAN MEMBER'\nPRENAME  DS    0H\n*\n         MVC   RLINE(9),=CL9'++RENAME'\nPRBLANKS DS    0H\n         MVC   POSITION(10),NAMEPAN\n         MVC   RLINE+9(10),NAMEPAN\n         LA    R15,RLINE+10\n*\n         CLI   0(R15),C' '  GOT A BLANK?\n         BE    *+12\n         LA    R15,1(,15)   NO, BUMP 1\n         B     *-12\n*\n         MVI   0(R15),C','  SET THE COMMA\n         MVC   1(10,R15),NEWNAME  MOVE IT IN\n*\n         OPEN  (SYSIN,(OUTPUT))\n*\n         CLI   PANCONTR,C' '   CONTROL WORD ENTERED\n         BE    PUTRLINE\n         PUT   SYSIN,CLINE\n*\nPUTRLINE DS    0H\n*\n         PUT   SYSIN,RLINE\n         CLOSE SYSIN\n*\n*\n         LA    R1,PANPARMS\n         LINK  EP=PAN#1\n         LTR   R15,R15\n         BZ    NEXTLINE\n*\n         MVC   DSNOTLST(44),LISTISPF\n      PDFBROWS DSNOTLST\n*\n         B     NEXTLINE\n*\nGOODRNAM DS    0H\n         MVC   POSITION(10),NEWNAME    SET POSITION\n         B     NEXTLINE\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - COPY A PAN MEMBER'\nPCOPY    DS    0H\n*\n         MVC   RLINE(9),=CL9'++COPY  '\n*\n         B     PRBLANKS       GO REPEAT THE DISPLAY\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - TRANSFER A PAN MEMBER'\nPXFER    DS    0H\n*\n         CLI   XFERFLAG,C'0'         ALREADY INITIALIZED?\n         BNE   PXFER2                YES\n         MVI   XFERFLAG,C'1'         ALREADY INITIALIZED\n         XC    XFERNUMB(4),XFERNUMB  ALREADY INITIALIZED\n         MVC   XFERLAST(4),XFERST    ALREADY INITIALIZED\n*\nPXFER2   DS    0H\n*\n         L     R1,XFERLAST\n         CLI   0(R1),X'EE'    END OF LIST\n         BE    NEXTLINE       GO REPEAT THE DISPLAY\n*\n         MVC   0(10,R1),NAMEPAN SAVE THIS NAME\n         LA    R1,12(,R1)\n         ST    R1,XFERLAST\n         MVI   0(R1),X'FF'\n         MVC   1(11,R1),0(R1)\n         L     R1,XFERNUMB\n         LA    R1,1(,R1)\n         ST    R1,XFERNUMB\n*\n         B     NEXTLINE       GO REPEAT THE DISPLAY\n*\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - DELETE A PAN MEMBER'\nMINUS1   DC    F'-1'\nPDELETE  DS    0H\n*\n         OPEN  (SYSIN,(OUTPUT))\n*\n         MVC   KLINE+14(10),NAMEPAN SAVE THIS NAME\n*\n         MVC   DLINE+9(70),DLINE+8\n         MVC   DLINE+9(10),NAMEPAN  SAVE THIS NAME\n         LA    R15,DLINE+10\n         CLI   0(R15),C' '\n         BE    *+12\n         LA    R15,1(,15)\n         B     *-12\n         MVC   0(8,R15),=C',DISABLE'\n*\n         CLI   PANCONTR,C' '      CONTROL WORD ENTERED\n         BE    PUTDLINE\n         PUT   SYSIN,CLINE\n*\nPUTDLINE DS    0H\n*\n         CLI   SELSAVE,C'K'   IS IT DELETE\n         BE    PUTKLINE       YES\n*\n         CLI   PACCESS,C'A'         ACCESS CONTROL FOR THIS MEMBER?\n         BNE   TSTDOPT\n         MVC   ALINE+10(4),NEWNAME  SET ACCESS CODE\n         PUT   SYSIN,ALINE\n*\nTSTDOPT  DS    0H\n*\n         PUT   SYSIN,DLINE\n*\n         CLOSE SYSIN\n*\n         LA    R1,PANPARMS\n         LINK  EP=PAN#1\n*\n         LTR   R15,15         IF RC=0\n         BZ    GOODNAM        GO RESET THE DIR LIST\n         B     NOTDLTED       GO DISPLAY THE SYSPRINT FILE MSGS\n*\nPUTKLINE DS    0H\n*\n         PUT   SYSIN,KLINE\n*\n         CLOSE SYSIN\n*\n         LA    R1,PANPARMS\n         LINK  EP=PAN#2\n         LTR   R15,R15\n         BZ    NEXTLINE\n*\nNOTDLTED DS    0H\n         MVC   DSNOTLST(44),LISTISPF\n      PDFBROWS DSNOTLST\n*\n         B     NEXTLINE\n*\nGOODNAM  DS    0H\n         B     NEXTLINE\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - ENABLE A PAN MEMBER'\nPENABLE  DS    0H\n*\n         OPEN  (SYSIN,(OUTPUT))\n*\n         MVC   DLINE+9(70),DLINE+8\n         MVC   DLINE+9(10),NAMEPAN  SAVE THIS NAME\n         LA    R15,DLINE+10\n         CLI   0(R15),C' '\n         BE    *+12\n         LA    R15,1(,15)\n         B     *-12\n         MVC   0(8,R15),=C',ENABLE '\n*\n         CLI   PANCONTR,C' '      CONTROL WORD ENTERED\n         BE    PUTNLINE\n         PUT   SYSIN,CLINE\n*\nPUTNLINE DS    0H\n*\n         PUT   SYSIN,DLINE\n*\n         CLOSE SYSIN\n*\n         LA    R1,PANPARMS\n         LINK  EP=PAN#1\n         LTR   R15,R15\n         BZ    NEXTLINE\n*\n         MVC   DSNOTLST(44),LISTISPF\n      PDFBROWS DSNOTLST\n*\n         B     NEXTLINE\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - BROWSE A PAN MEMBER'\nPBROWSE  DS    0H\n*\n*        FIRST CHECK FOR ACCESS CODE REQUIRED\n*\n         CLI   PACCESS,C'A'\n         BNE   BROWSEOK\n*\n         CLC   NEWNAME(4),PUSER             MATCH\n         BE    BROWSEOK                     YES, ALL DONE.\n*\n         B     NEXTLINE\n*\nBROWSEOK DS    0H\n*\n*\n         BAL   R7,READPAN\n*\n         MVC   DSNOTLST(44),DATAISPF   SET DSN FOR PAN MEMB BROWSE\n         CLI   PSPOOL,C'0'         NOT PANSPOOL FILE\n         BE    *+10                JUST DO THE BROWSE\n         MVC   DSNOTLST(44),LISTISPF   SET DSN FOR PANSPOOL BROWSE\n      PDFBROWS DSNOTLST\n*\n         B     NEXTLINE       GO REPEAT THE DISPLAY\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - PRINT  A PAN MEMBER'\nPPRINT   DS    0H\n*\n         BAL   R7,READPAN\n*\n         MVC   PRTLRECL(2),=H'80'   IF NOT PANSPOOL\n         MVC   PRTBLOCK(2),=H'80'   IF NOT PANSPOOL\n         MVI   SOUTFBA,X'90'           SET RECFM=FB\n         LA    R1,NAMDATA              SET DSN FOR PAN MEMB PRINT\n         CLI   PSPOOL,C'0'         NOT PANSPOOL FILE\n         BE    PPRINTDO            JUST DO THE PRINT\nPRNTLIST DS    0H\n         MVC   PRTLRECL(2),=H'133'  IF\n         MVC   PRTBLOCK(2),=H'133'         PANSPOOL\n         MVI   SOUTFBA,X'94'           SET RECFM=FBA\n         LA    R1,NAMLIST              SET DSN FOR PAN MEMB PRINT\n*\nPPRINTDO DS    0H\n         ST    R1,UT1DSN               SET DSN FOR PAN MEMB PRINT\n         LA    R1,FREE1                FREE SYSUT1\n         DYNALLOC\n         LA    R1,FREE2                FREE SYSUT2\n         DYNALLOC\n*\n*\n         LA    R1,SOUTPARM\n         DYNALLOC\n         LTR   R15,15\n         BNZ   BADUT2\n*\n         LA    R1,ALLO1\n         DYNALLOC\n         LTR   R15,15\n         BZ    *+6\n         DC    H'0'\n*\n         OPEN  (SYSUT1,(INPUT),SYSUT2,(OUTPUT))\n*\nPPRTLOOP DS    0H\n*\n         GET   SYSUT1,PRTLINE\n         LA    R2,PRTLINE\n*\n*  IF RECFM=FBA, MAKE SURE COL 1 HAS VALID CARRIAGE CONTROL\n*\n         CLI   SOUTFBA,X'94'            IS RECFM=FBA\n         BNE   PPRTPUT                  NO, JUST PRINT IT\n*\n         CLI   0(R2),C'1'               SKIP TO CHAN 1\n         BE    PPRTPUT                  OK\n*\n         CLI   0(R2),C'0'               DOUBLE SPACE\n         BE    PPRTPUT                  OK\n*\n         CLI   0(R2),C'-'               TRIPLE SPACE\n         BE    PPRTPUT                  OK\n*\n         LA    R2,PRTBUFF               POINT TO A BLANK BEFORE LINE\n*\nPPRTPUT  DS    0H\n         PUT   SYSUT2,(2)\n*\n         B     PPRTLOOP\n*\nPPRTEND  DS    0H\n*\n         CLOSE (SYSUT1,,SYSUT2)\n        SETMSG PLF001O\n*\n         B     NEXTLINE       GO REPEAT THE DISPLAY\n*\nBADUT1   DS    0H\n*\n         WTO   'PLF DYNALLOC OF SYSUT1 FILE FAILED',ROUTCDE=11\n*\n         B     NEXTLINE       GO REPEAT THE DISPLAY\n*\nBADUT2   DS    0H\n*\n         WTO   'PLF DYNALLOC OF SYSUT2 FILE FAILED',ROUTCDE=11\n*\n         B     NEXTLINE       GO REPEAT THE DISPLAY\n*\nPRTBUFF  DC    C' '\nPRTLINE  DC    CL133' '\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - PROCESS A COMMAND'\n*\n*    THE COMMAND ENTERED IS IN \"PCMD\"\n*\nGOTCMD   DS    0H\n*\n         CLI   PCMD,C' ' ANY DATA IN COMMAND LINE\n         BE    SHOWTBDS     NOPE\n*\n         CLC   PCMD(6),=C'PSPOOL'     IS THIS A PANSPOOL LIBRARY\n         BE    ITISPSPL     YUP\n         CLC   PCMD(4),=C'LIST'       LIST @TEMP.PANLIST?\n         BE    LISTLIST               YUP\n         CLC   PCMD(4),=C'XFER'       TRANSFER JCL?\n         BE    XFEREDIT               YUP\n         CLC   PCMD(4),=C'SHOW'       SHOW ACCESS CODES?\n         BE    SHOWACCC               YUP\n         CLC   PCMD(6),=C'NOSHOW'     DON'T SHOW ACCESS CODES?\n         BE    NOSHOWAC               YUP\n         CLC   PCMD(3),=C'END'        END\n         BE    PLFEPAN      YUP\n         CLC   PCMD(5),=C'ABEND'      ABEND\n         BNE   *+6\n         DC    H'0'                   S0C1\n         CLI   PCMD,C'L' LOCATE\n         BE    PLOCATE      YUP\n         CLI   PCMD,C'F' LOCATE\n         BE    PLOCATE      YUP\n         CLI   PCMD,C'S' LOCATE\n         BE    PLOCATE      YUP\n         CLC   PCMD(4),=C'COMM'    SET COMMENTS ON?\n         BE    PCOMMON             YUP\n         CLC   PCMD(6),=C'NOCOMM'  SET COMMENTS OFF?\n         BE    PCOMMOFF            YUP\n         CLI   PCMD,C'C' CONTROL\n         BE    PCONTROL     YUP\n*\n*     PUT ADDITIONAL COMMAND TESTS HERE\n*\n         B     PLFBADCM\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - SET PANSPOOL FORMAT'\nITISPSPL DS    0H\n*\n         MVI   PSPOOL,C'1'         INDICATE PANSPOOL FORMAT\n         B     SHOWTBD1       GO REPEAT THE DISPLAY\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - LIST @TEMP.PANLIST'\nLISTLIST DS    0H\n*\n         MVI   PCMD,C' '             COMMAND LINE\n         B     PRNTLIST\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - EDIT @TEMP.PANDATA'\nXFEREDIT DS    0H\n*\n* THE TRANSFER COMMAND CREATES A JOB-STREAM THAT WILL:\n*\n*     1. ARCHIVE TO TAPE THE MEMBERS IN THE \"TO\" LIBRARY\n*     2. BACKUP TO TAPE THE MEMBERS IN THE \"FROM\" LIBRARY\n*     3. RESTORE THE TAPE TO THE \"TO\" LIBRARY\n*     4. DELETE THE MEMBERS ON THE \"FROM\" LIBRARY\n*\n*\n* THE TERMINAL OPERATOR IS PLACED IN \"EDIT\" ON THE JOB-STREAM, AND\n* CAN MODIFY, SUBMIT, OR CANCEL THE XFER.\n*\n*\n         VGET  XFERTO\n         VGET  PJC1\n         VGET  PJC2\n*\n*\n         DISPLAY PLF3P3,ENDKEY=NEXTLINE\n*\n*\n*\n         TR    XFERTO(44),CAPSONLY       UPPER-CASE IT\n         MVC   ARCHFROM(44),XFERTO       MAKE A COPY\n         VPUT  XFERTO\n         TR    PJC1(80),CAPSONLY         UPPER-CASE IT\n         VPUT  PJC1\n         TR    PJC2(80),CAPSONLY         UPPER-CASE IT\n         VPUT  PJC2\n         TR    XFERMOD(4),CAPSONLY       UPPER-CASE IT\n         TR    XFERSTA(4),CAPSONLY       UPPER-CASE IT\n*\n*\n         MVI   XFERFLAG,C'0'         RESET\n*\n         L     R5,XFERNUMB               NUMBER OF MEMBERS SELECTED\n         LTR   R5,R5\n         BZ    SHOWTBD1       GO REPEAT THE DISPLAY\n*\n* SORT PANVALET MEMBERS FOR TRANSFER\n*\n         LA    R1,SORTPARM\n         CALL  CORESORT\n*\n* SET UP THE TAPE GDG NAME FOR THE ARCHIVE STEP\n*\n         OPEN  (PANDATA,(OUTPUT))\n*\n         MVC   ARCHTAP1(44),XFERTO       MAKE A COPY\n         MVC   ARCHTAP2(44),XFERTO       MAKE A COPY\n*\n         LA    R1,ARCHTAP1\n*\n         CLI   0(R1),C' '\n         BE    *+12\n         LA    R1,1(,R1)\n         B     *-12\n*\n         MVC   0(5,R1),=C'(+1),'\n*\n         LA    R1,ARCHTAP2\n*\n         CLI   0(R1),C' '\n         BE    *+12\n         LA    R1,1(,R1)\n         B     *-12\n*\n         MVC   0(3,R1),=C'(0)'\n*\n         PUT   PANDATA,PJC1\n         PUT   PANDATA,PJC2\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'ARCHJCL1),ARCHJCL1\n         PUT   PANDATA,WORK80\n*\n         PUT   PANDATA,ARCHJCL3\n         PUT   PANDATA,ARCHJCL4\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'ARCHJCL5),ARCHJCL5\n         PUT   PANDATA,WORK80\n*\n         PUT   PANDATA,ARCHJCL6\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'SYSZCARD),SYSZCARD\n         PUT   PANDATA,WORK80\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'SYSNCARD),SYSNCARD\n         PUT   PANDATA,WORK80\n*\n         CLI   XFERCON,C' '      CONTROL WORD ENTERED\n         BE    XFELOOP1\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(70),XLINE\n         PUT   PANDATA,WORK80\n*\nXFELOOP1 DS    0H\n         MVI   WORK80,C' '\n         MVC   WORK80+1(79),WORK80\n         MVC   WORK80(L'ARCHJCL7),ARCHJCL7\n         PUT   PANDATA,WORK80\n*\n         L     R6,XFERST\n*\nXFELOOP2 DS    0H\n*\n         MVC   KLINE+14(10),0(R6)\n         LA    R6,12(,R6)\n*\n         PUT   PANDATA,KLINE\n*\n         BCT   R5,XFELOOP2\n*\nXFECLOS1 DS    0H\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'XFEREXEC),XFEREXEC\n         PUT   PANDATA,WORK80\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'SYSPCARD),SYSPCARD\n         PUT   PANDATA,WORK80\n*\n         PUT   PANDATA,XFERDD1\n         PUT   PANDATA,XFERDD2\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'DD3DUMM),DD3DUMM\n         PUT   PANDATA,WORK80\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'SYSNCARD),SYSNCARD\n         PUT   PANDATA,WORK80\n*\n         CLI   PANCONTR,C' '     CONTROL WORD ENTERED\n         BE    XFELOOP4\n         PUT   PANDATA,CLINE\n*\nXFELOOP4 DS    0H\n*\n*\n         L     R5,XFERNUMB               NUMBER OF MEMBERS SELECTED\n         L     R6,XFERST\n*\nXFELOOP5 DS    0H\n*\n         MVC   XFERNAME(10),0(R6)\n         LA    R6,12(,R6)\n*\n         PUT   PANDATA,XFERXFER\n*\n         BCT   R5,XFELOOP5\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'RSTREXEC),RSTREXEC\n         PUT   PANDATA,WORK80\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'SYSZCARD),SYSZCARD\n         PUT   PANDATA,WORK80\n*\n         PUT   PANDATA,RSTRDD1\n*\n         PUT   PANDATA,RSTRDD3\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'DD2DUMM),DD2DUMM\n         PUT   PANDATA,WORK80\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'SYSNCARD),SYSNCARD\n         PUT   PANDATA,WORK80\n*\nXFELOOP3 DS    0H\n*\n         CLI   XFERCON,C' '      CONTROL WORD ENTERED\n         BE    XFECLOS2\n         PUT   PANDATA,XLINE\n*\nXFECLOS2 DS    0H\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'RSTRRSTR),RSTRRSTR\n         PUT   PANDATA,WORK80\n*\n         CLC   XFERMOD(4),=C'MOVE'\n         BNE   XFELOOP8                  NO, LEAVE IT COPY MODE\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'DELTJCL1),DELTJCL1\n         PUT   PANDATA,WORK80\n*\n         MVI   WORK80,C' '\n         MVC   WORK80+1(79),WORK80\n         MVC   WORK80(L'SYSZCARD),SYSZCARD\n         PUT   PANDATA,WORK80\n*\n         PUT   PANDATA,XFERDD1\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'DD2DUMM),DD2DUMM\n         PUT   PANDATA,WORK80\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'DD3DUMM),DD3DUMM\n         PUT   PANDATA,WORK80\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'SYSNCARD),SYSNCARD\n         PUT   PANDATA,WORK80\n*\n         CLI   PANCONTR,C' '     CONTROL WORD ENTERED\n         BE    XFELOOP6\n         PUT   PANDATA,CLINE\n*\nXFELOOP6 DS    0H\n*\n*\n         L     R5,XFERNUMB               NUMBER OF MEMBERS SELECTED\n         L     R6,XFERST\n*\nXFELOOP7 DS    0H\n*\n         MVC   KLINE+14(10),0(R6)\n*\n         PUT   PANDATA,KLINE\n         LA    R6,12(,R6)\n*\n         BCT   R5,XFELOOP7\n*\nXFELOOP8 DS    0H\n*\n         CLC   XFERSTA(4),=C'PROD'\n         BNE   XFELOOPB                  NO, LEAVE IT\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'STATJCL1),STATJCL1\n         PUT   PANDATA,WORK80\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'SYSPCARD),SYSPCARD\n         PUT   PANDATA,WORK80\n*\n         PUT   PANDATA,RSTRDD1\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'DD2DUMM),DD2DUMM\n         PUT   PANDATA,WORK80\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(L'SYSNCARD),SYSNCARD\n         PUT   PANDATA,WORK80\n*\n         MVC   WORK80(80),SPACES\n         MVC   WORK80(9),=CL9'++STATUS '\n*\n         CLI   XFERCON,C' '      CONTROL WORD ENTERED\n         BE    XFELOOP9\n         PUT   PANDATA,XLINE\n*\nXFELOOP9 DS    0H\n*\n         L     R5,XFERNUMB               NUMBER OF MEMBERS SELECTED\n         L     R6,XFERST\n*\nXFELOOPA DS    0H\n*\n         MVC   WORK80+9(10),0(R6)\n         MVC   WORK80+19(61),SPACES\n*\n         LA    R15,11\n         LA    R14,WORK80+9\n*\n         CLI   0(R14),C' '\n         BE    *+12\n         LA    R14,1(,R14)\n         BCT   R15,*-12\n*\n         MVC   0(5,R14),=C',PROD'\n*\n         PUT   PANDATA,WORK80\n         LA    R6,12(,R6)\n*\n         BCT   R5,XFELOOPA\n*\nXFELOOPB DS    0H\n*\n         CLOSE (PANDATA)\n*\nXFEDIT   DS    0H\n*\n         MVC   DSNOTLST(44),DATAISPF\n       PDFEDIT DSNOTLST\n         B     NEXTLINE       GO REPEAT THE DISPLAY\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - SHOW ACCESS CODES'\nSHOWACCC DS    0H\n*\n         CLC   USERID(2),=C'AS'    AUTHORIZED USER?\n         BNE   SHOWTBD1       GO REPEAT THE DISPLAY\n*\n         MVI   SHOWFLAG,C'1'  SHOW ACCESS CODES\n         B     SHOWTBD1       GO REPEAT THE DISPLAY\n*\nNOSHOWAC DS    0H\n*\n         MVI   SHOWFLAG,C'0'  DON'T SHOW ACCESS CODES\n         B     SHOWTBD1       GO REPEAT THE DISPLAY\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - SET COMMENT FLAG'\nPCOMMON  DS    0H\n*\n         MVI   COMMFLAG,C'1'  SET COMMENT ON\n         XC    ACTION,ACTION       CLEAR ACTION WORD\n         L     R15,=V(PCLOSE)\n         LA    R1,@PCLOSE\n         BALR  R14,R15             GO CLOSE OUT PANVALET FILE\n         XC    ACTION,ACTION\n         L     R15,=V(POPEN)\n         LA    R1,@POPEN\n         BALR  R14,R15               INVOKE OPEN PANVALET FILE\n         B     SHOWTBD1       GO REPEAT THE DISPLAY\n*\nPCOMMOFF DS    0H\n*\n         MVI   COMMFLAG,C'0'  SET COMMENT ON\n         XC    ACTION,ACTION       CLEAR ACTION WORD\n         L     R15,=V(PCLOSE)\n         LA    R1,@PCLOSE\n         BALR  R14,R15             GO CLOSE OUT PANVALET FILE\n         XC    ACTION,ACTION\n         L     R15,=V(POPEN)\n         LA    R1,@POPEN\n         BALR  R14,R15               INVOKE OPEN PANVALET FILE\n         B     SHOWTBD1       GO REPEAT THE DISPLAY\n*\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - LOCATE A PAN MEMBER'\nPLOCATE  DS    0H\n*\n         MVC   POSITION(10),PCMD+2\n*\nPLOCATE1 DS    0H\n*\n         LA    R6,POSITION\n         LA    R14,9\n*\n         CLI   0(R6),C' '     SEARCH FOR FIRST BLANK\n         BE    *+12           SET AN ASTERISK\n         LA    R6,1(,R6)      BUMP POINTER\n         BCT   R14,*-12       LOOP\n*\n         LA    R14,POSITION\n         SR    R6,R14         SET R6=LENGTH\n*\n         L     R1,DIRLAST     POINT TO HIGHEST MEMBER READ SO FAR\n         EX    R6,LOCNAMCL    COMPARE LASTMEM VS SEARCH MEM\n*\n         BH    PLOCATE3       LOCATE A MEMBER WE HAVE ALREADY RETRIEVED\n*\n         MVC   NAME1(10),0(R1)     START OF SEARCH\n*\nPLOCATE2 DS    0H\n*\n*        MVI   DIRL0C1,0      MAKE   NO-OP AN 0C1\n         BAL   R7,DIRLOOP1    READ A DIRECTORY ENTRY\n         L     R1,DIRLAST     POINT TO LAST MEMBER READ\n         CLC   DIRENTRY(2),=C'$*'  TEST FOR NO MORE DIR ENTRIES\n         BE    PLOCATE9\n*\n         LA    R14,POSITION\n         EX    R6,LOCNAMCL    COMPARE LISTMEM VS SEARCH MEM\n         BE    PLOCATED\n         BH    PLOCATED\n*\n         B     PLOCATE2\n*\nPLOCATE3 DS    0H\n*\n         L     R1,DIRFIRST    SEARCH\n*\nPLOCATE4 DS    0H\n*\n         C     R1,DIRLAST     LAST OF DIRECTORY LIST\n         BNL   PLOCATED       I GIVE UP\n*\n         LA    R14,POSITION\n         EX    R6,LOCNAMCL    COMPARE LISTMEM VS SEARCH MEM\n         BE    PLOCATED\n         BH    PLOCATED\n*\n         LA    R1,10(,R1)\n         B     PLOCATE4\n*\nPLOCATED DS    0H\n*\n         MVC   NAME1(10),0(R1)\n         B     SHOWTBD2\n*\nPLOCATE9 DS    0H\n*\n         MVC   NAME1(10),0(R1)\n         B     SHOWTBD2\n*\nLOCNAMCL CLC   0(1,R1),0(R14)\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - PROCESS A CONTROL WORD'\nPCONTROL DS    0H\n         MVC   PANCONTR(4),PCMD+1\n*\n         VPUT  PANCONTR\n*\n         B     SHOWTBD1       GO REPEAT THE DISPLAY\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - READ A PAN MEMBER'\n*\n*  READ THE PAN MEMBER\n*\n         SPACE\nREADPAN  DS    0H\n*\n         ST    R7,KEEP7PAN\n*\n         MVC   NAME(10),NAMEPAN    MOVE SEARCHED NAME TO READ NAME\n*\n         CLI   SELSAVE,C'E'        IS IT EDIT\n         BNE   RDBROWSE           NOPE, NO SPECIAL HANDLING\n*\n         XC    ACTION,ACTION\n         LA    R7,PANDATA         DCB ADDRESS\n         ST    R7,ADCBADD\n*\n         OPEN  ((7),(OUTPUT))\n         TM    48(R7),X'10'       IS IT OPEN?\n         BNO   PLFEPAN             NOPE, FORGET IT\n*\n         MVC   ELINE+9(40),SPACES  CLEAR IT\n         MVC   ELINE+9(10),NAMEPAN MOVE SEARCHED NAME TO UPDATE CARD\n         LA    R14,ELINE+10        SET START OF LOOP\n         LA    R15,9               SET LOOP CONTROL\n*\nUPDLOOP  DS    0H\n         CLI   0(R14),C' '  GOT A BLANK\n         BE    UPDMOVE      MOVE IN THE STUFF\n         LA    R14,1(,14)   BUMP\n         BCT   R15,UPDLOOP  LOOP\n*\nUPDMOVE  DS    0H\n*\n         MVI   0(R14),C','\n         MVC   1(3,R14),PLEVEL       MOVE IN OLD LEVEL NUMBER\n         MVC   4(4,R14),=C',ALL'\n*\n*\n         B     READAGN\n*\nRDBROWSE DS    0H\n*\n         XC    ACTION,ACTION\n         LA    R7,PANDATA         DCB ADDRESS\n         CLI   PSPOOL,C'0'         NOT PANSPOOL FILE\n         BE    OPENOUT             JUST OPEN IT\n         LA    R7,PANLIST         DCB ADDRESS\nOPENOUT  DS    0H\n         ST    R7,ADCBADD\n         OPEN  ((7),(OUTPUT))\n         TM    48(R7),X'10'       IS IT OPEN?\n         BO    READAGN            YUP\n*\n        SETMSG PLF008\n*\n         B     PLFEOJ\n*\n         EJECT\nREADAGN  DS    0H\n*\nREADAPAN DS    0H\n*\n*        FIRST CHECK FOR ACCESS CODE REQUIRED\n*\n         CLI   PACCESS,C'A'\n         BNE   READACOK\n*\nPROMPTAC DS    0H\n*\n         CLC   NEWNAME(4),PUSER             MATCH\n         BE    READACOK                     YES, ALL DONE.\n*\n         B     NEXTLINE\n*\nREADACOK DS    0H\n*\n         XC    ACTION,ACTION                SET TO BINARY ZEROS\n         MVC   INCLUDES,NOENTRY             DO NOT PROCESS INCLUDES\n         MVC   COMMENT,NOENTRY              DO NOT PROCESS COMMENTS\n         L     R15,=V(PREAD)\n         LA    R1,@PREAD\n         BALR  R14,R15             GO READ A RECORD VIA PAM\n         SPACE 1\n         CLC   ACTION,=F'0'\n         BE    GOODREAD            RETURN CODE SHOULD BE ZERO\n         CLC   ACTION,=F'4'        4 IS PROBABLY \"INCLUDE NOT FOUND\"\n         BE    GOODREAD\n*\n        SETMSG PLF009\n         B     PLFEOJ\n*\nGOODREAD DS    0H\n         CLC   RECORD(2),=C'$*'    TEST FOR END OF DATA\n         BE    ENDREAD\n*\n*PROCESS A RECORD\n*\n         CLI   PSPOOL,C'1'         PANSPOOL FILE\n         BE    PUTSPL              READ AGAIN\n         L     R7,ADCBADD\n         PUT   (7),RECORD\n         B     READAGN\nPUTSPL   DS    0H\n         XC    ACTION,ACTION                SET TO BINARY ZEROS\n         MVC   PSPREC(80),RECORD\n         MVC   INCLUDES,NOENTRY             DO NOT PROCESS INCLUDES\n         MVC   COMMENT,NOENTRY              DO NOT PROCESS COMMENTS\n         L     R15,=V(PREAD)\n         LA    R1,@PREAD\n         BALR  R14,R15             GO READ A RECORD VIA PAM\n         SPACE 1\n         CLC   ACTION,=F'0'\n         BE    GOTPSPL             RETURN CODE SHOULD BE ZERO\n*\n        SETMSG PLF009\n         B     PLFEOJ\n*\nGOTPSPL  DS    0H\n         MVC   PSPREC+80(53),RECORD+27\n         L     R7,ADCBADD\n         PUT   (7),PSPREC\n         B     READAGN\nENDREAD  DS    0H\n         L     R7,ADCBADD\n         CLOSE ((7))\n*\nENDREAD2 DS    0H\n*\n         L     R7,KEEP7PAN\n         BR    R7\n         TITLE 'PLF - PAN LIBRARY PROCESSOR - GET NEXT DIRECTORY ENTRY'\nDIRLOOP1 DS    0H\n*\n*        WTO   'PLF--DIRLOOP1 ENTERED',ROUTCDE=11\n*\n         MVI   PANS,C' '\n         MVC   PANS+1(79),PANS\n*                                RE-INITIALIZE ATTRIBUTE BYTES\n         MVI   TAB1,X'05' BEFORE LINE SELECTION FIELD\n         MVI   TAB2,X'01' BEFORE MEMBER NAME\n         MVI   TAB3,X'05' BEFORE NEWNAME/AC COLUMN\n         MVI   TAB4,X'01' BEFORE LEVEL NUMBER\n         MVI   TAB5,X'02' BEFORE SECURITY FLAG\n         MVI   TAB6,X'01' BEFORE USER CODE\n         MVI   TAB7,X'01' AFTER  USER CODE\n*\n         XC    ACTION,ACTION\n*        MVC   COMMENT,NOENTRY               WE WANT NO COMMENTS\n         MVC   COMMENT,SPACES                WE WANT COMMENTS\n         MVC   SUBSET,NOENTRY                BUT NO SUBSET JUNK\n*  SEARCH\n         L     R15,=V(PSRCH)\n         LA    R1,@PSRCH\n         BALR  R14,R15               INVOKE DIR SEARCH FUNCTION\nDIRL0C1  DC    X'0700'   NO-OP\n         SPACE 1\n         CLC   ACTION,=F'0'        RETURN CODE SHOULD BE ZERO\n         BNE   DIRERR7\n*\n         CLC   DIRENTRY(2),=C'$*'  TEST FOR NO MORE DIR ENTRIES\n         BE    DIRLEND             THATS ALL..EXIT\n*\n*  MOVE/FORMAT DIRECTORY FIELDS FOR / DIR DISPLAY                     *\n*\n         MVC   NAMEPAN(10),DNAME\n*\n         CLI   DIRTOPN,C' '        TOP OF SCREEN\n         BNE   *+16\n         MVC   DIRTOPN(10),DNAME\n         MVC   DIRTOP2(10),DNAME\n*\n         L     R1,DIRLAST\n         CLC   DNAME(10),0(R1)\n         BNH   *+18\n         LA    R1,10(,R1)\n         MVC   00(10,R1),DNAME\n         ST    R1,DIRLAST\n*\n         CLI   DSECURE,C'0'       ACCESS CODE?\n         BE    NOSECDIR           NO\n         CLI   DSECURE,C' '       ACCESS CODE?\n         BE    NOSECDIR           NO\n*\n         MVI   PACCESS,C'A'       INDICATE ACCESS CODE REQUIRED\n*\n         CLI   SHOWFLAG,C'0'      SHOW USER CODES\n         BNE   *+8                YES\n         MVI   TAB6,X'04' BEFORE USER CODE, OUTPUT NON-DISPLAY\n*\nNOSECDIR DS    0H\n         MVC   PUSER(4),DUSER\n*\n         MVC   PLEVEL(3),DLEVEL\n         MVC   PTYPE(5),DTYPE\n         MVC   PSTATUS(3),DSTATUS\n         MVC   PDATEM(8),DDATEM\n         MVC   PDATEA(8),DDATEA\n         PACK  PACKWK(5),DSTMTS(8)\n         MVC   PSTMTS(8),EDIT8\n         ED    PSTMTS(8),PACKWK+1\n         MVC   PLASTACT(4),DLASTACT\n*\n         B     DIRLEND\n*\nDIRERR7  DS    0H\n         L     R0,ACTION\n         DC    H'0'\n*\nDIRLEND  DS    0H\n         L     R0,ACTION\n         BR    R7\n*\n         TITLE 'PERFORMED ROUTINES'\nMOVENAME DS    0H\n*\n         CLI   0(R15),C' '                END OF THIS NAME\n         BE    MOVEDONE                   YUP\n*\n         MVC   0(1,R1),0(R15)             END OF THIS NAME\n         LA    R1,1(,1)                   BUMP \" TO \" FIELD ADDRESS\n         LA    R15,1(,15)                 BUMP \"FROM\" FIELD ADDRESS\n         B     MOVENAME                   LOOP\n*\nMOVEDONE DS    0H\n*\n         BR    R14                        YUP\n*\n         TITLE 'PLF - ERROR MESSAGE ROUTINES  '\n*\nPLFRRPOP DS    0H\n        SETMSG PLF006\n         B     PLFEOJ\n*\nPLFRRPRC DS    0H\n        SETMSG PLF001A\n         B     PLFEOJ\n*\nPLFBADRC DS    0H\n        SETMSG PLF001L\n         B     PLFEOJ\n*\nPLFRCOMP DS    0H\n        SETMSG PLF001N\n         B     PLFEOJ\n*\nPLFBADCM DS    0H\n        SETMSG PLF001N\n         B     PLFEOJ\n*\n         LTORG\n         EJECT\n         LTORG\n         TITLE 'REGISTER EQUATES'\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         TITLE 'WORKING STORAGE AREAS'\n*\n         DS    0F\nTABCOUNT DC    F'0'\nZEROFF   DC    X'000000FF'\nP1       DC    PL1'+1'\nP3ZERO   DC    PL3'+0'\nOUT7HOLD DS    F\nL1       DC    F'1'\nL10      DC    F'10'\nL6       DC    F'6'\nL8       DC    F'8'\nL44      DC    F'44'\nL50      DC    F'50'\n*\nDIGITS3  DC    X'202020'\nTHREEPT  DC    X'2020204B'\nEDIT4    DC    X'40202120'\nEDIT6    DC    X'402020202121'\nEDIT8    DC    X'4020202020202120'\n*\nPSPOOL   DC    C'0'\nVCOPY    DC    CL8'VCOPY '\nZUSER    DC    CL8'ZUSER '\nUSERID   DC    CL8' '\nSPFMOVE  DC    CL8'MOVE   '\nU8       DC    F'8'\n*\nDSNOTLST DC    CL44' '\nKEEP7PAN DS    F\nADCBADD  DS    F\nPACKWK   DS    PL5\nPLFPOPEN DC    C'0'\nPSPREC   DC    CL133' '\n*\nPLFZUSER DC    CL8' '\n*\n*\nULINE    DC    CL80'++USER '\nALINE    DC    CL80'++ACCESS '\nACLINE   DS    CL80\nOLINE    DS    CL80\n*\nENAME    DC    CL10' '\n*\n         DS    0F\nPANPARMS DC    X'80',AL3(H0)\nH0       DC    H'0'\n*\n*\nDLINE    DC    CL80'++STATUS      '\n*\nKLINE    DC    CL80'++DELETE NAME='\n*\nELINE    DC    CL80'++UPDATE '\n*\nRLINE    DC    CL80'++RENAME '\n*\nNULLPARM DC    X'80',AL3(H0)\n*\nCTAB     DS    0H\nPLFOPTP  DC    A(SELECTR)\n         DC    X'80',AL3(PLFOPT)\nSELECTR  DC    CL8'SELECT  '\nPLFOPT   DC    CL8'PLFOPT  '\n*\nL78      DC    F'78'\nFZEROS   DC    F'0'\nF8       DC    F'8'\nF4       DC    F'4'\nL3       DC    F'3'\nL77      DC    F'77'\nL20      DC    F'20'\nL40      DC    F'40'\nL4       DC    F'4'\n*\nDISPLRC  DS    F          RETURN CODE FROM TBDISPL\nH1       DC    H'1'\nH2       DC    H'2'\nH8       DC    H'8'\n*\n         TITLE 'DYNAMIC ALLOCATION PARAMETER LISTS'\n         DS    0F\nFREEIN   DC    AL1(128),AL3(RBFIN)     SYSIN\nOLDIN    DC    AL1(128),AL3(RBOIN)     SYSIN\nNEWIN    DC    AL1(128),AL3(RBNIN)     SYSIN\n*\nFREEPR   DC    AL1(128),AL3(RBFPR)     SYSPRINT\nOLDPR    DC    AL1(128),AL3(RBOPR)     SYSPRINT\nNEWPR    DC    AL1(128),AL3(RBNPR)     SYSPRINT\n*\nFREEDD2  DC    AL1(128),AL3(RBFDD2)    PANDD2\nALLODD2  DC    AL1(128),AL3(RBDDD2)    PANDD2\n*\nFREEDD1  DC    AL1(128),AL3(RBFDD1)    PANDD1\nOLDDD1   DC    AL1(128),AL3(RBODD1)    PANDD1\n*\nFREEDATA DC    AL1(128),AL3(RBFDATA)   PANDATA\nOLDDATA  DC    AL1(128),AL3(RBODATA)   PANDATA\nNEWDATA  DC    AL1(128),AL3(RBNDATA)   PANDATA\n*\nCONCATIN DC    AL1(128),AL3(CONCAT)    SYSIN+PANDATA\nDECONCAT DC    AL1(128),AL3(DECON)     SYSIN+PANDATA\n*\nFREE1    DC    X'80',AL3(FREEUT1)         REQUEST BLOCK\nFREE2    DC    X'80',AL3(FREEUT2)         REQUEST BLOCK\nALLO1    DC    X'80',AL3(ALLOUT1)         REQUEST BLOCK\nSOUTPARM DC    X'80',AL3(ALLOUT2)         REQUEST BLOCK\n         TITLE 'SYSIN (@TEMP.PANDATA) REQUEST BLOCKS'\n         DS    0F\nRBFIN    DC    X'14'           LENGTH = 20\n         DC    X'02'           FREE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(UNCOND)       UNCONDITIONAL FREE\n         DC    X'80',AL3(DDIN) POINTER TO DDNAME TEXT UNIT\n*\n*\n         DS    0F\nRBOIN    DC    X'14'           LENGTH = 20\n         DC    X'01'           ALLOCATE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(DDIN)             DDNAME\n         DC    A(NAMCARD)          DSNAME--&USERID.@TEMP.PANCARD\n         DC    A(RLSE)             RELEASE SPACE AT CLOSE\n         DC    X'80',AL3(DISPSHR)  POINTER TO DISP=SHR\n*\n         DS    0F\nRBNIN    DC    X'14'           LENGTH = 20\n         DC    X'01'           ALLOCATE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(DDIN)             DDNAME\n         DC    A(NAMCARD)          DSNAME\n         DC    A(LR80)             LRECL=80\n         DC    A(BLK3120)          BLKSIZE=3120\n         DC    A(RECFMFB)          RECFM=FB\n         DC    A(PSPACE)           PRIMARY SPACE = 1\n         DC    A(SSPACE)           SECONDARY SPACE = 1\n         DC    A(SPTRK)            TRACKS\n         DC    A(DISPNEW)          DISP=NEW\n         DC    A(RLSE)             RELEASE SPACE AT CLOSE\n         DC    X'80',AL3(DISPCAT)          ,CATLG\n*\n*\n         TITLE 'SYSPRINT (@TEMP.PANLIST) REQUEST BLOCKS'\n*\n         DS    0F\nRBFPR    DC    X'14'           LENGTH = 20\n         DC    X'02'           FREE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(UNCOND)       UNCONDITIONAL FREE\n         DC    X'80',AL3(DDPR) POINTER TO DDNAME TEXT UNIT\n*\n*\n         DS    0F\nRBOPR    DC    X'14'           LENGTH = 20\n         DC    X'01'           ALLOCATE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(DDPR)             DDNAME\n         DC    A(NAMLIST)          DSNAME\n         DC    A(RLSE)             RELEASE SPACE AT CLOSE\n         DC    X'80',AL3(DISPSHR)  POINTER TO DISP=SHR\n*\n         DS    0F\nRBNPR    DC    X'14'           LENGTH = 20\n         DC    X'01'           ALLOCATE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(DDPR)             DDNAME\n         DC    A(NAMLIST)          DSNAME\n         DC    A(PSPACE)           PRIMARY SPACE = 1\n         DC    A(SSPACE)           SECONDARY SPACE = 1\n         DC    A(SPTRK)            CYLINDERS\n         DC    A(DISPNEW)          DISP=NEW\n         DC    A(RLSE)             RELEASE SPACE AT CLOSE\n         DC    X'80',AL3(DISPCAT)          ,CATLG\n*\n         TITLE 'PANDD2   (DUMMY   ) REQUEST BLOCKS'\n*\n*\n*\n         DS    0F\nRBFDD2   DC    X'14'           LENGTH = 20\n         DC    X'02'           FREE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(UNCOND)       UNCONDITIONAL FREE\n         DC    X'80',AL3(DDDD2) POINTER TO DDNAME TEXT UNIT\n*\n*\n         DS    0F\nRBDDD2   DC    X'14'           LENGTH = 20\n         DC    X'01'           ALLOCATE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(DUMMY)        DUMMY DATASET\n         DC    X'80',AL3(DDDD2) POINTER TO DDNAME TEXT UNIT\n*\n         TITLE 'PANDD1   (PANLIB  ) REQUEST BLOCKS'\n*\n         DS    0F\nRBFDD1   DC    X'14'           LENGTH = 20\n         DC    X'02'           FREE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(UNCOND)       UNCONDITIONAL FREE\n         DC    X'80',AL3(DDDD1) POINTER TO DDNAME TEXT UNIT\n*\n         DS    0F\nRBODD1   DC    X'14'           LENGTH = 20\n         DC    X'01'           ALLOCATE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(DDDD1)            DDNAME\n         DC    A(NAMLIB)           DSNAME\n         DC    X'80',AL3(DISPSHR)  POINTER TO DISP=SHR\n*\n         TITLE 'PANDATA  (@TEMP.PANDATA) REQUEST BLOCKS'\n*\n*\n         DS    0F\nRBFDATA  DC    X'14'           LENGTH = 20\n         DC    X'02'           FREE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(UNCOND)       UNCONDITIONAL FREE\n         DC    X'80',AL3(DDDATA) POINTER TO DDNAME\n*\n         DS    0F\nRBODATA  DC    X'14'           LENGTH = 20\n         DC    X'01'           ALLOCATE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(DDDATA)           DDNAME\n         DC    A(NAMDATA)          DSNAME\n         DC    A(RLSE)             RELEASE SPACE AT CLOSE\n         DC    X'80',AL3(DISPSHR)  POINTER TO DISP=SHR\n*\n         DS    0F\nRBNDATA  DC    X'14'           LENGTH = 20\n         DC    X'01'           ALLOCATE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(DDDATA)           DDNAME\n         DC    A(NAMDATA)          DSNAME\n         DC    A(LR80)             LRECL=80\n         DC    A(BLK3120)          BLKSIZE=3120\n         DC    A(RECFMFB)          RECFM=FB\n         DC    A(PSPACE)           PRIMARY SPACE = 1\n         DC    A(SSPACE)           SECONDARY SPACE = 1\n         DC    A(SPTRK)            CYLINDERS\n         DC    A(DISPNEW)          DISP=NEW\n         DC    A(RLSE)             RELEASE SPACE AT CLOSE\n         DC    X'80',AL3(DISPCAT)          ,CATLG\n*\n         TITLE 'CONCATENATION/DECONCATENATION REQUEST BLOCKS'\n         DS    0F\nCONCAT   DC    X'14'           LENGTH = 20\n         DC    X'03'           CONCATENATE\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    X'80',AL3(DDCON)           DDNAME TEXT UNIT\n*\n         DS    0F\nDECON    DC    X'14'           LENGTH = 20\n         DC    X'04'           DE-CONCATENATE\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO FIRST TEXT UNIT\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    X'80',AL3(DDIN)            DDNAME TEXT UNIT\n*\n         TITLE 'SYSUT1/SYSUT2 FOREGROUND PRINT REQUEST BLOCKS'\n         DS    0F\n*\nFREEUT1  DC    X'14'           LENGTH = 20\n         DC    X'02'           FREE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO DYNTEXT1\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(UNCOND)       UNCONDITIONAL FREE\n         DC    X'80',AL3(UT1)\n*\nALLOUT1  DC    X'14'           LENGTH = 20\n         DC    X'01'           ALLOCATE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO DYNTEXT1\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(DISPSHR)\nUT1DSN   DS    F\n         DC    X'80',AL3(UT1)\n*\n         DS    0F\n*\nFREEUT2  DC    X'14'           LENGTH = 20\n         DC    X'02'           FREE REQUEST\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO DYNTEXT1\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(UNCOND)       UNCONDITIONAL FREE\n         DC    X'80',AL3(UT2)\n*\n         DS    0F\n*\nALLOUT2  DC    X'14'           LENGTH = 20\n         DC    X'01'           DSNAME ALLOCATION\n         DC    X'00'           FLAGS1 = ALLOW OFFLINE UNITS\n         DC    X'00'           REST OF FLAGS1\n         DC    F'0'            RETURN CODES\n         DC    A(*+12)         POINTER TO DYNTEXT1\n         DC    F'0'            RESERVED\n         DC    F'0'            FLAGS2\n*\n         DC    A(UT2)          POINTER TO DYNDDNAM\n         DC    A(SOUTLREC)                LRECL\n         DC    A(SOUTBLOK)                BLKSIZE\n         DC    A(SOUTRECF)                RECFM\n         DC    A(SOUTFREE)                FREE=CLOSE\n         DC    X'80',AL3(SOUTCLAS)        SYSOUT CLASS\n*\n         TITLE 'DYANLLOC TEXT UNITS'\nUT1      DC    H'0001'         DDNAME=  PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0006'         LENGTH OF PARM\n         DC    CL6'SYSUT1'     DDNAME\n*\nUT2      DC    H'0001'         DDNAME=  PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0006'         LENGTH OF PARM\n         DC    CL6'SYSUT2'     DDNAME\n*\nSOUTLREC DC    X'0042'         LRECL    PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0002'         LENGTH OF PARM\nPRTLRECL DC    X'0050'         LRECL\n*\nSOUTFREE DC    X'001C'         FREE=CLOSE\n         DC    H'0000'         NUMBER OF TEXT UNITS\n*\nSOUTBLOK DC    X'0030'         BLKSIZE  PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0002'         LENGTH OF PARM\nPRTBLOCK DC    X'0050'         MATCHES LRECL\n*\nSOUTRECF DC    X'0049'         RECFM    PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0001'         LENGTH OF PARM\nSOUTFBA  DC    X'94'           FBA\n*\nSOUTCLAS DC    H'0024'         SYSOUT   PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0001'         LENGTH OF PARM\n         DC    C'A'            CLASS\nDDCON    DC    H'0001'         DDNAME\n         DC    H'0002'         NUMBER=2\n         DC    H'0005'         LEN 1\n         DC    C'SYSIN'        DDN 1\n         DC    X'0007'         LEN 2\n         DC    C'PANDATA'      DDN 2\n*\nDDIN     DC    H'0001'         DDNAME=  PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0005'         LENGTH OF PARM\n         DC    CL6'SYSIN'      DDNAME\n*\nDDPR     DC    H'0001'         DDNAME=  PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0008'         LENGTH OF PARM\n         DC    CL8'SYSPRINT'   DDNAME\n*\nDDDD2    DC    H'0001'         DDNAME=  PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0006'         LENGTH OF PARM\n         DC    CL6'PANDD2'     DDNAME\n*\nDDDATA   DC    H'0001'         DDNAME=  PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0007'         LENGTH OF PARM\n         DC    CL8'PANDATA'    DDNAME USED IN CONCATENATIONS\n*\nDDDD1    DC    H'0001'         DDNAME=  PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0006'         LENGTH OF PARM\n         DC    CL6'PANDD1'     DDNAME\n*\nNAMCARD  DC    H'0002'         DSNAME=  PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\nLENCARD  DC    H'0044'         LENGTH OF PARM\nDSNCARD  DC    CL44' '         DSNAME\n*\nNAMDATA  DC    H'0002'         DSNAME=  PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\nLENDATA  DC    H'0044'         LENGTH OF PARM\nDSNDATA  DC    CL44' '         DSNAME\n*\nNAMLIST  DC    H'0002'         DSNAME=  PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\nLENLIST  DC    H'0044'         LENGTH OF PARM\nDSNLIST  DC    CL44' '         DSNAME\n*\nNAMLIB   DC    H'0002'         DSNAME=  PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\nLENLIB   DC    H'0044'         LENGTH OF PARM\nPANLIB   DC    CL44' '         DSNAME\n*\nUNCOND   DC    X'0007'         FREE\n         DC    H'0000'\n*\nDISPSHR  DC    X'0004'         STATUS\n         DC    H'0001'\n         DC    H'0001'\n         DC    X'0800'         08=SHR\n*\nDISPNEW  DC    X'0004'         STATUS\n         DC    H'0001'\n         DC    H'0001'\n         DC    X'0400'         04=NEW\n*\nDISPCAT  DC    X'0005'         DISPOSITION\n         DC    H'0001'\n         DC    H'0001'\n         DC    X'0200'         02=CATLG\n*\nLR80     DC    X'0042'         LRECL    PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0002'         LENGTH OF PARM\n         DC    X'0050'         LRECL\n*\nBLK3120  DC    X'0030'         BLKSIZE  PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0002'         LENGTH OF PARM\n         DC    H'3120'         MATCHES LRECL\n*\nRECFMFB  DC    X'0049'         RECFM    PARAMETER\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0001'         LENGTH OF PARM\n         DC    X'9000'         FB\n*\nPSPACE   DC    H'0010'         PRIMARY SPACE\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0003'         LENGTH OF PARM\n         DC    AL3(30)         30\n*\nSSPACE   DC    H'0011'         SECONDARY SPACE\n         DC    H'0001'         NUMBER OF TEXT UNITS\n         DC    H'0003'         LENGTH OF PARM\n         DC    AL3(30)         30\n*\nSPTRK    DC    H'0007'         TRACK ALLOCATION\n         DC    H'0000'         NUMBER OF TEXT UNITS\n*\nDUMMY    DC    X'0024'         TRACK ALLOCATION\n         DC    H'0000'         NUMBER OF TEXT UNITS\nRLSE     DC    X'000D'         RELEASE SPACE AT CLOSE\n         DC    H'0000'         NUMBER OF TEXT UNITS\n*\n*\n*\n*              V D E F I N E    STORAGE AREAS\n*\n*\n*  VARIABLES FOR PLFP1--PLF PRIMARY OPTION PANEL\n*\nPLFACC   DC    CL04' ' ACCESS CODE. IF SECURITY-LEVEL PRESENT.\n*\n*  VARIABLES FOR PLFMENU2--DIRECTORY DISPLAY\n*\nPCMD     DC    CL40' ' COMMAND LINE.\n*\nTAB1     DC    X'13'\nPANS     DC    CL03' ' LINE SELECTION CODE.\nTAB2     DC    X'05'\nNAMEPAN  DC    CL10' ' LIBRARY MEMBER NAME.\nTAB3     DC    X'13'\nNEWNAME  DC    CL10' ' NEWNAME FOR RENAME OR COPY.\nTAB4     DC    X'05'\nPANLINE  DS    0CL54   DETAIL DIRECTORY DATA.\n         DC    C' '\nPLEVEL   DC    CL3' '\nTAB5     DC    C' ' BEFORE SECURITY FLAG\nPACCESS  DC    C' '\nTAB6     DC    C' ' BEFORE USER CODE\nPUSER    DC    CL4' '\nTAB7     DC    C' ' AFTER USER CODE\nPTYPE    DC    CL5' '\n         DC    C' '\nPSTATUS  DC    CL3' '\n         DC    C' '\nPDATEM   DC    CL8' '\n         DC    C' '\nPDATEA   DC    CL8' '\n         DC    C' '\nPSTMTS   DC    CL8' '\n         DC    C' '\nPLASTACT DC    CL4' '\n         DC    CL1' '         PAD TO 80 BYTES\n*\nCLINE    DC    CL10'++CONTROL '\nPANCONTR DC    CL70'          '\n*\nXLINE    DC    CL10'++CONTROL '\nXFERCON  DC    CL70'          '\n*\nNUMBPAN  DC    CL4'0000' CURRENT USER CODE FOR ++USER COMMAND\nNUMBNEW  DC    CL4'0000' NEW USER CODE FOR ++USER COMMAND\n*\n*\n*\nDDLIB    DC    CL8'PANDD1'\n*\nDOUBLEWD DS    D              PACKED DECIMAL WORK AREA\nMASKMOVE MVC   0(1,R14),PLFMASK\nPLFMASK  DC    X'05'               INPUT DISPLAY, CAPS\nSPACES   DC    CL80' '\nCZEROS   DC    CL8'00000000'\n*\nPOSITION DC    CL11' '\n*\nL7       DC    F'7'           ADDRESS OF TABLE TO USE FOR OUTMSG\nTABADDRH DS    A              ADDRESS OF TABLE TO USE FOR OUTMSG\nDNMADDRH DS    A              ADDRESS OF NAMES TO USE FOR OUTMSG\n*\nISPARMS  DS    10F            PARM LIST FOR ISPLINK\n*\n*     THE ISP TABLE FLAGS INDICATE NO ACTIVE TABLE (0), OR ONE EXISTS\nPLFTABFL DS    XL1     DO I HAVE A CURRENT \"DISPLAY ACTIVE\" TABLE\n*\n*\n*\n*\nSELSAVE  DS    CL3            LINE SELECTION CODE SAVE AREA\n*\n*\nWORK     DS    D\nHEX      DC    C'0123456789ABCDEF'\n*.....................................................................*\n*  LIST FORM OF MACROS                                                *\n*.....................................................................*\n         SPACE\n@POPEN CALL ,(ACTION,DDLIB,BACKUP),VL,MF=L\n*\n*     POPEN PARAMETERS\n*\nBACKUP   DC    CL8'NO-ENTRY'     MUST BE CL8'BACKUP' IF PROTECTION FIL\n         SPACE\n@PSRCH   CALL ,(ACTION,DIRENTRY,NAME1,NAME2,COMMENT,SUBSET),VL,MF=L\n         SPACE\n@PREAD   CALL  ,(ACTION,RECORD,NAME,INCLUDES,COMMENT),VL,MF=L\n*\n*  SHARED PARAMETER\n         DS    0D\n         DC    CL8'ACTION'\nACTION   DC    F'0'         RETURN CODE FROM PAN, SHOULD BE SET TO ZERO\n         DS    0D\n         DC    CL8'RECORD'\nRECORD   DS    CL80                STATMENT WILL BE RETURNED HERE\n         DS    0D\n         DC    CL8'NAME  '\nNAME     DC    CL22'A          '   PREAD NAME\n         DS    0D\n         DC    CL8'INCLUDES'\nINCLUDES DS    CL8\n         DS    0D\n         DC    CL8'COMMENT '\nCOMMLINE DC    X'01'               OUTPUT DISPLAY\n         DC    CL26' '\nCOMMTAB  DC    X'07'               INPUT DISPLAY, CAPS\nCOMMENT  DC    CL52'NO-ENTRY'      NO COMMENTS WANTED, ELSE='COMMENT'\nCOMMFLAG DC    C'0'       0 = DON'T SHOW COMMENTS, 1 = SHOW COMMENTS\nSHOWFLAG DC    C'0'       0 = DON'T SHOW ACCESS CODES, 1 = SHOW THEM\nXFERFLAG DC    C'0'       0 = JCL NOT COPIED FOR XFER, 1 = COPIED\nXFERNUMB DS    F          NUMBER OF MEMBERS SELECTED FOR TRANSFER\nKEYLEN1  DC    F'10'\nKEYPOS1  DC    F'1'\nLRECL1   DC    F'12'\nSORTPARM DS    0F\n         DC    A(KEYLEN1)\n         DC    A(KEYPOS1)\n         DC    A(LRECL1)\n         DC    A(XFERNUMB)\n         DC    A(XFERMEMS)\nXFERST   DC    A(XFERMEMS)\nXFERLAST DS    F\n*\nPJC1     DC    CL80' '\nPJC2     DC    CL80' '\n*\nXFEREXEC DC    C'//XFER EXEC PGM=PAN#2'\nXFERDD1  DC    CL26'//PANDD1  DD DISP=SHR,DSN='\nXFERFROM DC    CL54' '\nXFERDD2  DC    CL50'//PANDD2 DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(20'\n         DC    CL10',20)),DSN='\n         DC    X'50',CL19'PAN                '\nXFERXFER DC    CL11'++TRANSFER '\nXFERNAME DC    CL69'           '\n*\nRSTREXEC DC    C'//RSTR EXEC PGM=PAN#2'\nRSTRDD1  DC    CL26'//PANDD1  DD DISP=SHR,DSN='\nXFERTO   DC    CL54' '\nRSTRDD3  DC    CL35'//PANDD3  DD DISP=(OLD,DELETE),DSN='\n         DC    X'50',CL44'PAN'\nRSTRRSTR DC    C'++RESTORE  '\nDD2DUMM  DC    C'//PANDD2   DD DUMMY'\nDD3DUMM  DC    C'//PANDD3   DD DUMMY'\n*\nARCHJCL1 DC    C'//ARCH EXEC PGM=PAN#2'\nARCHJCL3 DC    CL26'//PANDD1  DD DISP=SHR,DSN='\nARCHFROM DC    CL54' '\nARCHJCL4 DC    CL43'//PANDD2  DD DISP=(NEW,CATLG),DSN=PSC.SUPD.'\nARCHTAP1 DC    CL54' '\nARCHJCL5 DC    C'// UNIT=TAPE,DCB=S.MODEL,LABEL=EXPDT=99000'\nARCHJCL6 DC    CL35'//PANDD3  DD DISP=OLD,DSN=PSC.SUPD.'\nARCHTAP2 DC    CL54' '\nARCHJCL7 DC    C'++OPTION INPUT'\n*\nDELTJCL1 DC    C'//DELT EXEC PGM=PAN#2'\n*\nSTATJCL1 DC    C'//STAT EXEC PGM=PAN#1'\n*\nSYSZCARD DC    C'//SYSPRINT DD SYSOUT=Z'\nSYSPCARD DC    C'//SYSPRINT DD SYSOUT=A,COPIES=2'\nSYSNCARD DC    C'//SYSIN    DD *'\n*\nXFERMOD  DC    CL4' '\nXFERSTA  DC    CL4' '\nWORK80   DC    CL80' '\n*\n@PCLOSE  CALL  ,(ACTION),VL,MF=L\n         EJECT\n*.....................................................................*\n*  CONSTRUCTS FOR PANVALET                                            *\n*.....................................................................*\n*  PSRCH PARAMETERS\nDIRENTRY DS    0CL80               DIR ENTRY RETURNED IN 0-UP FORMAT\nDNAME    DS    CL10                NAME LEFT JUSTIFIED\nDLEVEL   DS    CL3                 LEVEL NUMBER\nDUSER    DS    CL4                 USER CODE\nDSECURE  DS    CL1                 SECURITY CODE\nDTYPE    DS    CL5                 LANGUAGE TYPE\nDSTATUS  DS    0CL3                3 CHAR STATUS\nDPRODT   DS    CL1                 P-PROD  T-TEST\nDEORDD   DS    CL1                 E-ENABLE  D-DISABLE\nDAORDI   DS    CL1                 A-ACTIVE  I-INACTIVE\nDDATEM   DS    CL8                 DATE OF LAST MAINTENANCE MM/DD/YY\nDDATEA   DS    CL8                 DATE OF LAST ACCESS  MM/DD/YY\nDBLOCKS  DS    CL5                 NO. OF BLOCKS\nDSTMTS   DS    CL8                 NO. OF STATEMENTS\nDLASTACT DS    CL4                 LAST ACTION, 1ST POS. IS * IF PROD\nDBYTES   DS    CL2                 NO. BYTES PER STATMENT\nDSUBSET  DS    CL4                 NO. OF SUBSETS(SUPERSETS ONLY)\nDNAME2   DS    CL10                NAME RIGHT JUSTIFIED\n         DS    CL1                 NOT USED\n         DS    CL1                 N=NOFORMAT, T=TSO, ELSE BLANK\nDINC     DS    CL1                 I=INCLUDE BEING EXPND (EXIT ONLY)\nDVERSION DS    XL2                 VER. #(FOR PROTECTION FILES ONLY)\n         EJECT\nTOPSEL   DC    CL10'           '   SEARCH NAME1\nDIRBOTM  DC    CL10'           '   SEARCH NAME1\nDIRTOPN DC     CL22'A          '   SEARCH NAME1\nDIRTOP2 DC     CL10' '\nNAME1    DC    CL22'A          '   SEARCH NAME1\nNAME2    DC    CL11'Z999999999 '   SEARCH NAME2\nTOPNAME DC     CL22'A          '   SEARCH NAME1\n**\n* NOTE  COMMENTS WILL BE PROCEDED AND ENDED WITH AN *\n**\nSUBSET   DC    CL27'NO-ENTRY'      NO SUBSETS WANTED, ELSE='SUBSET'\n**\n*  NOTE  IF SUBSETS ARE REQUESTED THE FOLLOWING WILL BE A DEFINITION OF\n*        THE SUBSET DIRECTORY ENTRY\n**\nSUBENTRY DS    0CL27\nSUBNAME  DS    CL11                FORMAT .XXXXXXXXXX X'S = SUBSET NME\n         DS    CL1                 BLANK\nSUBDATE  DS    CL8                 DATE ATTACHED IN FORM MM/DD/YY\n         DS    CL2                 BLANKS\nSUBSTMT  DS    CL5                 # OF STMTS IN SUBSET\n         SPACE 2\n**\n* SPECIAL RETURN CODES FROM EACH CALL TO PAM WILL BE RETNED IN ACTION\n*   2    NAME NOT ALPHANUMERIC (SAME AS PV002)\n*   4    ++INCLUDE NOT FOUND (PREAD ONLY)\n*   7    PARAMETER TO LONG (SAME AS PV007)\n*   23   NAME NOT FOUND (SAME AS PV023)\n*   245  PARAMETER LIST ERROR IN CALL TO PAM\n**\nNOENTRY  DC    CL92'NO-ENTRY'            NO-ENTRY FOR PANVALET\nBLANKS   EQU   NOENTRY+8,80              BLANKS FOR US\n         EJECT\n*.....................................................................*\n*  OVERLAY MAPPING OF DIRECTORY LINE FORMAT ON SCREEN                 *\n*.....................................................................*\n         SPACE\nMDIR     DS    0CL80     MAP FOR NICE FORMATTED DIR ENTRY\nMDNAME   DS    CL10,CL1\nSCANSTRT EQU   *\nMDLEVEL  DS    CL3,CL1\nMDTYPE   DS    CL5,CL1\nMDUSER   DS    CL4,CL1\nMDSECURE DS    CL1,CL1\nMDSTATUS DS    CL3,CL1\nMDMAINT  DS    CL8,CL1\nMDACCES  DS    CL8,CL1\nMDSTMTS  DS    CL8,CL2\nMDBLOCKS DS    CL5,CL1\nSCANLEN  EQU   *-SCANSTRT\nMDLSTPRD DS    CL1\nMDLSTACT DS    CL8\nCAPSONLY DC    CL64' '\n         DC    CL10' ',C'\u00a2.<(+|&&',CL9' ',C'!$*);\u00ac-/'\n         DC    CL9' ',C',%_>?',CL10' ',C':#@''=\"'\n         DC    CL16' ABCDEFGHI      '\n         DC    CL16' JKLMNOPQR      '\n         DC    CL16'  STUVWXYZ      '\n         DC    CL16'                '\n         DC    CL16' ABCDEFGHI      '\n         DC    CL16' JKLMNOPQR      '\n         DC    CL16'  STUVWXYZ      '\n         DC    CL16'0123456789      '\n         TITLE 'PLF - DCB S'\n         PRINT NOGEN\nPANLIST  DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(GM,PM),                 X\n               LRECL=133,BLKSIZE=13300,RECFM=FBA\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GM,PM)\nPANDATA  DCB   DDNAME=PANDATA,DSORG=PS,MACRF=(GM,PM)\nSYSUT1   DCB   DDNAME=SYSUT1,MACRF=GM,DSORG=PS,EODAD=PPRTEND\nSYSUT2   DCB   DDNAME=SYSUT2,MACRF=PM,DSORG=PS\n*\n         TITLE 'PLF - DISPLAY FIELDS'\n***********************************************************************\n*                                                                     *\n*        ISPF DISPLAY MODULE CONSTANTS AND WORK AREAS                 *\n*                                                                     *\n***********************************************************************\n*\nISPFWORK DS    F\nISPFSIZE DS    F\nISPFNUMB DS    F\n*\nZSCROLLN DS    F\nZSCROLLA DS    CL4\nZVERB    DS    CL8\n*\nAREATYP  DS    CL8\nCOLS     DS    F\nROWS     DS    F\nTLROW    DS    F\nTLCOL    DS    F\n*\nFWORD    DS    F\nDWORD    DS    D\n*\nCOMMTST  DC    CL30'* '\n*\n*\nLINEPTR  DS    F\n         LTORG\nPLFDATA  DS    XL3200\nXFERMEMS DS    XL2400\n         DC    X'EEEEEEEE'\n         TITLE 'PLF - IBM DSECTS'\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n         PRINT GEN\n         TITLE 'CALLABLE BUBBLE SORT                           '\n***********************************************************************\n*                                                                     *\n*             INPUT = REG1 POINTS TO A LIST OF FOUR-BYTE ADRESSES AS  *\n*                     FOLLOWS:                                        *\n*                     1. KEY LENGTH                                   *\n*                     2. KEY POSITION WITHIN THE RECORD, REL 0        *\n*                     3. RECORD LENGTH - MAXIMUM IS 256               *\n*                     4. NUMBER OF RECORDS IN THE PASSED LIST         *\n*                     5. ADDRESS OF THE START OF THE LIST             *\n*                                                                     *\n***********************************************************************\nCORESORT CSECT\n         USING *,15\n         STM   R14,R12,12(R13)\n*\n* NOTE THAT NO SAVE_AREA WAS GETMAINED SINCE THIS ROUTINE\n*      CALLS NO OTHER ROUTINE OR ISSUES ANY SVC'S\n*\n         LM    R3,R7,0(R1)          LOAD INPUT PARM LIST ADDRESSES\n         L     R3,0(,3)       SET R3 = KEY LENGTH\n         LA    R3,0(,3)                MAKE SURE IT'S POSITIVE\n         L     R4,0(,4)       SET R4 = KEY POSITION\n         LA    R4,0(,4)                MAKE SURE IT'S POSITIVE\n         BCTR  R4,0                    KEY POSITION RELATIVE ZERO\n         L     R5,0(,5)       SET R5 = RECORD LENGTH\n         LA    R5,0(,5)                MAKE SURE IT'S POSITIVE\n         BCTR  R5,0                    RECORD LENGTH RELATIVE ZERO\n         L     R6,0(,6)       SET R6 = NUMBER OF RECORDS\n         LA    R6,0(,6)                MAKE SURE IT'S POSITIVE\n*\n*                     R7 = ADDRESS OF THE START OF THE LIST OF RECORDS\n*\n*   FIRST DO SOME EDITING\n         C     R5,F255                 IS IT MORE THAN 256\n         BH    BADLRECL                YES, MUST BE NO GOOD\n         LA    R8,0(R3,R4)  ADD KEY LENGTH + KEY POSITION\n         CR    R8,R5       IS TOTAL GREATER THAN LRECL\n         BH    BADKEY                  YES, MUST BE NO GOOD\n         BCTR  R3,0                    KEY LENGTH RELATIVE ZERO\n         C     R6,F2       DO I HAVE ANY RECORDS??????\n         BL    ALLDONE     NOPE\n         B     STARTUP\nF255     DC    F'255'\nF2       DC    F'2'\nF1       DC    F'2'\nKEYCLC   CLC   0(1,R1),0(R2) COMPARE\nOR1      XC    0(1,R1),0(R2)     OR 1\nOR2      XC    0(1,R2),0(R1)     OR 2\nOR3      XC    0(1,R1),0(R2)     OR 3\n*\nSTARTUP  DS    0H\n         LR    R8,R6   SET NUMBER OF ENTRIES FOR BCT LOOP\n         SR    R9,9    CLEAR \"GOT ONE\" SWITCH\n         LA    R10,1(R7,R5) SECOND RECORD IN LIST (NOTE R5 IS REL 0)\n         LA    R1,0(R7,R4) SET R1 = KEY POSITION IN REC 1 (R4 IS REL 0)\n         LA    R2,0(R10,R4)  SET R2 = KEY POSITION IN REC 2\nCLCLOOP  DS  0H\n         EX    R3,KEYCLC     COMPARE\n         BNH   CLCBUMP\nDOMOVE   DS  0H\n         SR    R1,R4  SET R1 = START OF REC 1\n         SR    R2,R4  SET R2 = START OF REC 2\n         EX    R5,OR1\n         EX    R5,OR2\n         EX    R5,OR3\n         LA    R1,0(1,R4)  SET R1 = START OF REC1 KEY\n         LA    R2,0(2,R4)  SET R2 = START OF REC2 KEY\n         LA    R9,1(,9)   ADD 1 TO INDICATE A MOVE WAS DONE\nCLCBUMP  DS  0H\n         LA    R1,1(R1,R5)  SET R1 = KEY POSITION IN REC 1\n         LA    R2,1(R2,R5)  SET R2 = KEY POSITION IN REC 2\n*        DC    H'0'\n         BCT   R8,CLCLOOP\n*\n         C     R9,F2       IF NUMBER OF MOVES IS LESS THAN 2\n         BL    ALLDONE      I MUST BE DONE\n         B     STARTUP     ELSE GO LOOP AGAIN\n*\nALLDONE  DS  0H\n         LM    R14,R12,12(R13) RESTORE REGS\n         SR    15,15  ALL OK\n         BR    R14\n*\nBADLRECL DS    0H\n         LM    R14,R12,12(R13) RESTORE REGS\n         LA    15,4          LRECL > 256\n         BR    R14\nBADKEY   DS    0H\n         LM    R14,R12,12(R13) RESTORE REGS\n         LA    15,8      KEY LENGTH + KEY POSITION > LRECL\n         BR    R14\n*\n         END\n/*\n//LKED1    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,TERM,REUS),\n//            COND=(2,LT,ASM1),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DSN=SYS2.LINKLIB,DISP=SHR        <== PAM\n//         DD   DISP=SHR,DSN=ISP.V2R2M0.ISPLOAD  <== ISPLINK\n//*YSLMOD  DD   DISP=SHR,DSN=SYS2.LINKLIB        <== TSO CMDLIB\n//SYSLMOD  DD   DISP=SHR,DSN=ASQCC.TEST.STEPLIB  <== TSO CMDLIB\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  INCLUDE SYSLIB(ISPLINK)\n  INCLUDE SYSLIB(PAM)\n  NAME PLF3(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PLF3H1": {"ttr": 15627, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "CBT353"}, "text": "%-----------------------PAN Library Facility   (PLF)  -------------------------+\n+\n+\n + This the initial menu for PLF.\n\n   The PAN library name must be specified as a fully-qualified dsname,\n  %NOT+ in quotes. This is contrary to normal TSO practice, but since\n   none of our PAN libraries begin with someone's userid, it just seems\n   too silly to require everything to be put in quotes.\n\n   If the library is control word protected, such as P.SOURCE or PROD.JCL,\n   the control word must be provided, also.\n\n   If you wish to use the transfer commands, enter the target library and\n   the control word if applicable.\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PLF3H2": {"ttr": 15629, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x17\\x00\\x17\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "CBT353"}, "text": "%-----------------------PAN Library Facility   (PLF)  -------------------------+\n + This is the general-purpose PAN member display. It gives you a member\n   name list of the library. Line commands can be entered in the %SEL+column:\n  %B+- BROWSE                             %R+- RENAME (use \"NEWNAME/AC\" column)\n  %C+- COPY    (use \"NEWNAME/AC\" column). %S+- SELECT (same as EDIT)\n  %D+- DISABLE                          %COM+- Add/Update comment line\n  %E+- EDIT                              %AA+- Add Access code (in \"NEWNAME/AC\")\n  %K+- KILL    (restricted)              %AC+- Change AC (enter \"old,new\")\n  %P+- PRINT                             %AD+- Delete AC (enter old AC)\n  %X+- Select for transfer\n\n  The command line can be used to enter :\n  %COMM/NOCOMM+ Display/don't display comment lines\n  %XFER+   Generate transfer JCL (ARCH/NOARCH to have archive jcl, also)\n  %C0000+  where 0000 is the control word. (All 4 digits must be specified.)\n  %PSPOOL+ to identify a library in PANSPOOL format.\n  %nnnn+   where \"nnnn\" is the scroll amount. This is used with PF7 and PF8.\n  %L mem+  where \"mem\" is the leading characters of the member you want\n           to locate in the directory display.\n\n %NOTE:+ If a library member is access-controlled, you must enter the 4-digit\n         access code in the \"NEWNAME/AC\" column.\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PLF3P1": {"ttr": 15874, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "CBT353"}, "text": "%------------------------- Pan Library Facility  (PLF)     ---------------------\n%Command ===>_ZCMD                                                             +\n+\n+\n+PAN lib%===>_PANLIB\n+Control%===>_PANCONTR   + (If Pan control word protected)\n+\n+    Note: PAN Library names must be specified as fully-qualified\n+          dataset names,%NOT+in quotes.\n+\n)INIT\n  .HELP    = PLF3H1\n  .CURSOR  = PANLIB\n &PANCONTR = ' '\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PLF3P2": {"ttr": 15876, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00%\\x00%\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON) USERMOD(20)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n 03 TYPE(DATAOUT) SKIP(ON) /* FOR TEXT ENTER CMD. FIELD */\n 04 TYPE(DATAIN)  INTENS(NON)  /* nondisplay */\n 05 TYPE(DATAIN)  INTENS(HIGH) CAPS(OFF)\n 06 TYPE(DATAIN)  INTENS(LOW)  CAPS(IN)\n 07 TYPE(DATAIN)  INTENS(HIGH) CAPS(IN)\n 08 TYPE(DATAIN)  INTENS(LOW)\n 09 TYPE(DATAIN)  INTENS(LOW)\n 0A TYPE(DATAIN)  INTENS(LOW)\n 20 TYPE(DATAIN)  INTENS(LOW) CAPS(IN)\n)BODY\n%--------------------- PAN Library Facility  (PLF) -----------------------------\n%Command ==>_PCMD                                               %SCROLL =>_AMT %\n%\n%Opt Name       Newname     LVL   User Type  STA  Maint    Access     Lines  ACT\n|PLFDATA ----------------------------------------------------------------------|\n|                                                                              |\n| -----------------------------------------------------------------------------|\n)INIT\n  .HELP = PLF3H2\n .CURSOR=PCMD\n  &AMT=PAGE\n  &PCMD=' '\n\n)PROC\n  &ZCURSOR = .CURSOR\n  &ZCSROFF = .CSRPOS\n  &ZLVLINE = LVLINE(PLFDATA)\n\n)END\n\n/*  DYNAMIC AREA SCREEN WIDTH FROM PQUERY. (80,132,160)\n/*  DYNAMIC AREA SCREEN DEPTH FROM PQUERY. (24,32,43,27,60)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PLF3P3": {"ttr": 15878, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "CBT353"}, "text": "%------------------------- Pan Library Facility  (PLF)     ---------------------\n% Command===>_PLFZ      +                                                      +\n+\n+    Note: PAN Library names must be specified as fully-qualified\n+          dataset names,%NOT+in quotes.\n+\n+\n+Enter PAN library dsname that you want to transfer members into:\n+\n+XFERlib%===>_XFERTO\n+Control%===>_XFERCON    + (If Pan control word protected)\n+\n+   Mode%===>_XFERMOD    + (Move or Copy)\n+\n+ Status%===>_XFERSTA    + (Prod or test status on output)\n+\n% Enter/verify JOB card for transfer:\n+       %===>_PJC1\n+       %===>_PJC2\n)INIT\n  .HELP    = PLF3H1\n  .CURSOR  = XFERTO\n &XFERCON  = ' '\n &XFERMOD  = 'MOVE'\n &XFERSTA  = 'PROD'\n)PROC\n  VPUT (PJC1,PJC2) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PLF3XWRK": {"ttr": 15880, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n         PLF3XWRK\nPLF3XWRK DSECT\nPLFACTN  DS    CL7                 ACTION CODE\nPLFFIRST DS    CL1                 FIRST-TIME-THROUGH = 0\nPLFCARD1 DS    CL80                ADDRESS OF CARD 1\nPLFCARD2 DS    CL80                ADDRESS OF CARD 1\nPLFCARD3 DS    CL80                ADDRESS OF CARD 1\nPLFDATAD DS    A                   ADDRESS OF DATA CARD 1\nPLFDATAN DS    F                   NUMBER OF DATA CARDS\nPLFWORK1 DS    CL80                WORK AREA\nPLFDLEN  EQU   *-PLF3XWRK\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSCBWORK": {"ttr": 15882, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00?\\x00?\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 63, "newlines": 63, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n         PSCBWORK\nWORKAREA DSECT                OUR WORK AREA\nSAVEAREA DS    18F            OUR SAVE AREA\nDOUBLEWD EQU   SAVEAREA+16    PACKED DECIMAL WORK AREA\nNUMBER   EQU   DOUBLEWD+8     FINAL PRODUCT OF CONVERT\nJDFID    DS    CL4            SET TO 'JDF ' AFTER INITIALIZATION\nSTATJSAD DS    F\nSTCSALEN DS    F\nCOMMAND  DS    CL2\nJOBMSG   DS    CL18\nMSGJNAME DS    CL8     SAVE FOR MESSAGE\nUSRJNAME DS    CL8     SAVE FOR STATUS\nUSRJLENG DS    XL1     SAVE FOR STATUS\nGOTANYST DS    XL1     DID I FIND ANY MATCHES, Y=1, N=0\n*     THE ISP TABLE FLAGS INDICATE NO ACTIVE TABLE (0), OR ONE EXISTS\nATABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY ACTIVE\" TABLE\nETABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY EVERY\" TABLE\nHTABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY HELD\" TABLE\nITABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY INPUT\" TABLE\nOTABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY OUTPUT\" TABLE\nSTABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY STATUS\" TABLE\nTABAREA  DS    0CL80\nTABSEL   DS    CL1\nTABDATA  DS    CL79\nISPARMS  DS    9F\nCRP      DS    F\nJUNKJUNK DS    F\n         PRINT GEN\n*\nATACHPL  DS    5A             ATACHSRB'S PARAMETER LIST\nINFORET  DS    A              A(WORD TO RECEIVE A(RET AREA))\nENQLIST  DS    XL12\nDEQLIST  EQU   ENQLIST        DEQ PARAMETER LIST\nJQESHOLD DS    A              RETURN ADDRESS HOLD FOR OUTJQES\nSAVELINK DS    A              RETURN ADDRESS HOLD FOR SHOWINIT\nWXEQHOLD DS    A              RETURN ADDRESS HOLD FOR SETWXEQ\nJOESHOLD DS    A              RETURN ADDRESS HOLD FOR OUTJOES\nHOLDSLNK DS    A              RETURN ADDRESS HOLD FOR JQEHOLDS\nWHATISIT DS    CL3            JOB, STC, TSU\nMESSAGE  EQU   *              OUTPUT MESSAGE BUFFER\nJOEINIT  DS    C    0=JQEINIT, 1=JOEINIT\nMSGJBTYP DS    CL3            JOB OR TSU OR STC\nMSGJOB#  DS    CL5            JOB NUMBER\n         DS    C\nMSGJNME  DS    CL8            JOB NAME\n         DS    C\nMSGSTYPE DS    CL42           JOB STATUS\nMSGWXCLS EQU   MSGSTYPE+L'AWAITXEQ-2,1\nMSGWOUTC EQU   MSGSTYPE+L'AWAITOUT-2,1\nMSGOUTLC EQU   MSGSTYPE+L'AWAITOUT+1\nMSGQTYPE EQU   MSGSTYPE+L'EXECUTNG+1,1\nMSGDEV   EQU   MSGSTYPE+L'ON+1,8\n         DS    C\nMSGSPCST DS    CL9            SPECIAL STATUS\nLMESSAGE EQU   *-MESSAGE      LENGTH OF THE MESSAGE BUFFER\nSTATS    DS    X              STATUS BITS\nFILLEDRT EQU   X'80'          RETURN AREA FULL\nTABCOUNT DS    F              HOW MANY TABLE ENTRIES\nTABPOINT DS    F              NEXT AVAILABLE ENTRY\nLWRKAREA EQU   *-WORKAREA     WORK AREA LENGTH\nTABHOLD  DS    XL8004         HOLD 100 TABLE ENTRIES\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "QSAMGET": {"ttr": 15884, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\xd7\\x00\\xd7\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 215, "newlines": 215, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCASM  JOB (X0041,QCC,ASQCC),'X-COOK BRIAN',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=99,SYSAFF=MVSB\n//*\n//*  TECH.XA.SOURCE(JDFASM2)\n//*\n//JOBLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR,\n//         UNIT=SYSDA,VOL=SER=MVSTGT\n//*\n//ASM1    EXEC PGM=IEV90,REGION=1024K,\n//        PARM='OBJECT,NODECK,TERM,XREF(SHORT),BATCH,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,\n//         UNIT=SYSDA,VOL=SER=MVSTGT\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR,\n//         UNIT=SYSDA,VOL=SER=MVSDLB\n//         DD  DSN=SYS2.MACLIB,DISP=SHR  <== $AMODE\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(5,5)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nQSAMGET  TITLE 'CHANGE LOG'\nQSAMGET  CSECT\nQSAMGET  AMODE ANY\nQSAMGET  RMODE 24\n***********************************************************************\n*                                                                     *\n* CHANGE LOG                                                          *\n*                                                                     *\n*  9/30/86 BRIAN COOK    INITIAL ENTRY.                               *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n           TITLE 'LINK-ABLE QSAM GET MODULE FOR 31-BIT PROGRAMS'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                   QSAM GET PROGRAM                                  *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: ISSUE QSAM GET MACRO ON BEHALF OF 31-BIT PROGRAMS.        *\n*                                                                     *\n*                                                                     *\n* FUNCTION: THIS IS A RE-ENTRANT PROGRAM THAT CAN BE DYNAMICALLY      *\n*           \"LINK\"ED TO BY A 31-BIT PROGRAM TO PERFORM A QSAM \"GET\".  *\n*                                                                     *\n*           NOTE THAT BOTH THE DCB AND THE RECORD AREA   MUST BE IN   *\n*           24-BIT MEMORY.                                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* LINKAGE:  STANDARD PARAMETER LIST FORMAT, POINTED TO BY REG 1:      *\n*                                                                     *\n*           FULL-WORD 1 ==>  ADDRESS OF DCB                           *\n*           FULL-WORD 2 ==>  ADDRESS OF RECORD (IF \"MOVE\" MODE)       *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         TITLE 'ENTRY POINT LOGIC'\n         PRINT GEN\n         USING *,12\n*\n         SAVE  (14,12),,QSAMGET_09/30/86_BRIAN_COOK_&SYSTIME_&SYSDATE\n*\n         LR    R12,R15        SET BASE 1\n*\n         LR    R9,R1          SAVE PARM REGISTER\n         LM    R10,R11,0(R9)  SET R10=DCB, R11=RECORD\n         USING IHADCB,10\n*\n         GETMAIN R,LV=4096,LOC=(BELOW)\n*\n         ST    R1,8(R13)      LINK SAVE AREAS\n         ST    R13,4(R1)      SAVE THE CALLER'S R13\n         LR    R13,R1         SET SAVE AREA\n         USING WORKAREA,13\n*\n         $AMODE 24\n*\n         SR    R8,R8\n         IC    R8,0(,R13)          PICK UP 31-BIT FLAG\n         SRL   R8,7                SHIFT OUT EVERYTHING ELSE\n*\n         CLM   R11,15,FOXES        \"CLOSE\" REQUEST?\n         BNE   TSTOPEN             NO, TEST FOR DCB OPEN\n*\n         TM    DCBOFLGS,DCBOFOPN   DCB OPEN?\n         BO    DOCLOSE             YES, CLOSE IT\n*\n         SR    R15,R15             JUST SET RETURN CODE ZERO\n         B     MODE31\n*\nDOCLOSE  DS    0H\n*\n         MVC   OPENMFE(OPENMFLN),OPENMFL\n         CLOSE ((10)),MF=(E,OPENMFE)\n         MVC   4(4,R9),FOXES       INDICATE FILE IS CLOSED\n*\n         LR    R5,R15              SAVE RETURN CODE FROM CLOSE\n*\n         B     MODE31\n*\nTSTOPEN  DS    0H\n*\n         TM    DCBOFLGS,DCBOFOPN   DCB OPEN?\n         BO    OPENED              YES, TEST MACRF\n*\nOPENOUT  DS    0H\n*\n         MVC   OPENMFE(OPENMFLN),OPENMFL\n         MVC   DCBEODA(3),=AL3(DOCLOSE)\n         OPEN  ((10),(INPUT)),MF=(E,OPENMFE)\n*\n         TM    DCBOFLGS,DCBOFOPN   DCB OPEN?\n         BO    OPENED              YES, TEST MACRF\n*\n         LR    R5,R15              SAVE RETURN CODE FROM OPEN\n*\n         B     MODE31\n*\nOPENED   DS    0H\n*\n         TM    DCBMACR1,DCBMRLCG   LOCATE MODE?\n         BO    GETLOCAT            YES, ISSUE GET-LOCATE\n*\nGETMOVE  DS    0H\n*\n         GET   (10),(11)\n*\n         LR    R5,R15         SAVE RETURN CODE\n*\n         B     MODE31\n*\nGETLOCAT DS    0H\n*\n         GET   (10)\n         LA    R1,0(,R1)      CLEAR LEFT BYTE\n         ST    R1,4(,R9)      SET BUFFER ADDRESS\n*\n         LR    R5,R15         SAVE RETURN CODE\n*\nMODE31   DS    0H\n*\n         LTR   R8,R8         INVOKED IN 24-BIT MODE?\n         BZ    RETURNRC      YES, LEAVE THAT WAY\n*\n         $AMODE 31\n*\nRETURNRC DS    0H\n*\n         L     R3,4(,R13)     RESTORE THE CALLER'S R13\n         FREEMAIN R,LV=4096,A=(13)\n*\n         LR    R13,R3\n         LR    R15,R5\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n*\n         TITLE 'CONSTANTS'\n         DS    0F\nOPENMFL  OPEN  (OPENMFL,(INPUT)),MF=L\nOPENMFLN EQU   *-OPENMFL\nFOXES    DC    X'FFFFFFFF'\n         LTORG\n         CNOP  0,8\n         TITLE 'GETMAINED AREA'\nWORKAREA DSECT\n         DS    18F\n*\n         DS    0F\nOPENMFE  DS    XL(OPENMFLN)\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         TITLE 'DCB DSECT'\n         DCBD  DSORG=PS,DEVD=DA\n         END\n/*\n//LKED1    EXEC PGM=HEWLF064,PARM=(XREF,LET,LIST,TERM,RENT,REUS),\n//            COND=(2,LT,ASM1),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DISP=SHR,DSN=ISP.V2R2M0.ISPLOAD,\n//         UNIT=SYSDA,VOL=SER=MVSTGT\n//*YSLMOD  DD   DISP=SHR,DSN=ASQCC.TEST.STEPLIB\n//SYSLMOD  DD   DISP=SHR,DSN=SYS2.LINKLIB\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n    MODE AMODE(ANY),RMODE(24)\n    NAME QSAMGET(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "QSAMPUT": {"ttr": 15889, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\xd1\\x00\\xd1\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 209, "newlines": 209, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCASM  JOB (X0041,QCC,ASQCC),'X-COOK BRIAN',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=99,SYSAFF=MVSB\n//*\n//*  TECH.XA.SOURCE(QSAMPUT)\n//*\n//ASM1    EXEC PGM=IEV90,REGION=1024K,\n//        PARM='OBJECT,NODECK,TERM,XREF(SHORT),BATCH,RENT'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=SYS2.MACLIB,DISP=SHR  <== $AMODE\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(5,5)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nQSAMPUT  TITLE 'CHANGE LOG'\nQSAMPUT  CSECT\nQSAMPUT  AMODE ANY\nQSAMPUT  RMODE 24\n***********************************************************************\n*                                                                     *\n* CHANGE LOG                                                          *\n*                                                                     *\n*  9/30/86 BRIAN COOK    IF INVOKED IN 24-BIT MODE, RETURN IN 24-BIT. *\n*                                                                     *\n*  9/29/86 BRIAN COOK    INITIAL ENTRY.                               *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n           TITLE 'LINK-ABLE QSAM PUT MODULE FOR 31-BIT PROGRAMS'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                   QSAM PUT PROGRAM                                  *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: ISSUE QSAM PUT MACRO ON BEHALF OF 31-BIT PROGRAMS.        *\n*                                                                     *\n*                                                                     *\n* FUNCTION: THIS IS A RE-ENTRANT PROGRAM THAT CAN BE DYNAMICALLY      *\n*           \"LINK\"ED TO BY A 31-BIT PROGRAM TO PERFORM A QSAM \"PUT\".  *\n*                                                                     *\n*           NOTE THAT BOTH THE DCB AND THE RECORD PASSED MUST BE IN   *\n*           24-BIT MEMORY.                                            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* LINKAGE:  STANDARD PARAMETER LIST FORMAT, POINTED TO BY REG 1:      *\n*                                                                     *\n*           FULL-WORD 1 ==>  ADDRESS OF DCB                           *\n*           FULL-WORD 2 ==>  ADDRESS OF RECORD                        *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         TITLE 'ENTRY POINT LOGIC'\n         PRINT GEN\n         USING *,12\n*\n         SAVE  (14,12),,QSAMPUT_09/29/86_BRIAN_COOK_&SYSTIME_&SYSDATE\n*\n         LR    R12,R15        SET BASE 1\n*\n         LR    R9,R1          SAVE PARM REGISTER\n         LM    R10,R11,0(R1)  SET R10=DCB, R11=RECORD\n         USING IHADCB,10\n*\n         GETMAIN R,LV=4096,LOC=(BELOW)\n*\n         ST    R1,8(R13)      LINK SAVE AREAS\n         ST    R13,4(R1)      SAVE THE CALLER'S R13\n         LR    R13,R1         SET SAVE AREA\n         USING WORKAREA,13\n*\n         $AMODE 24\n*\n         SR    R8,R8\n         IC    R8,0(,R13)          PICK UP AMODE INDICATOR\n         SRL   R8,7                LEAVE 31-BIT INDICATOR\n*\n         CLM   R11,15,FOXES        \"CLOSE\" REQUEST?\n         BNE   TSTOPEN             NO, TEST FOR DCB OPEN\n*\n         TM    DCBOFLGS,DCBOFOPN   DCB OPEN?\n         BO    DOCLOSE             YES, CLOSE IT\n*\n         SR    R15,R15             JUST SET RETURN CODE ZERO\n         B     MODE31\n*\nDOCLOSE  DS    0H\n*\n         MVC   OPENMFE(OPENMFLN),OPENMFL\n         CLOSE ((10)),MF=(E,OPENMFE)\n*\n         LR    R5,R15              SAVE RETURN CODE FROM CLOSE\n*\n         B     MODE31\n*\nTSTOPEN  DS    0H\n*\n         TM    DCBOFLGS,DCBOFOPN   DCB OPEN?\n         BO    OPENED              YES, TEST MACRF\n*\nOPENOUT  DS    0H\n*\n         MVC   OPENMFE(OPENMFLN),OPENMFL\n         OPEN  ((10),(OUTPUT)),MF=(E,OPENMFE)\n*\n         TM    DCBOFLGS,DCBOFOPN   DCB OPEN?\n         BO    OPENED              YES, TEST MACRF\n*\n         LR    R5,R15              SAVE RETURN CODE FROM OPEN\n*\n         B     MODE31\n*\nOPENED   DS    0H\n*\n         TM    DCBMACR2,DCBMRLCP   LOCATE MODE?\n         BO    PUTLOCAT            YES, ISSUE PUT-LOCATE\n*\nPUTMOVE  DS    0H\n*\n         PUT   (10),(11)\n*\n         LR    R5,R15         SAVE RETURN CODE\n*\n         B     MODE31\n*\nPUTLOCAT DS    0H\n*\n         PUT   (10)\n         LA    R1,0(,R1)      CLEAR LEFT BYTE\n         ST    R1,4(,R9)      SET BUFFER ADDRESS\n*\n         LR    R5,R15         SAVE RETURN CODE\n*\nMODE31   DS    0H\n*\n         LTR   R8,R8          ENTERED IN 31-BIT MODE?\n         BZ    RETURNRC       NO\n*\n         $AMODE 31\n*\nRETURNRC DS    0H\n*\n         L     R3,4(,R13)     RESTORE THE CALLER'S R13\n         FREEMAIN R,LV=4096,A=(13)\n*\n         LR    R13,R3\n         LR    R15,R5\n         LM    R0,R12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n*\n         TITLE 'CONSTANTS'\n         DS    0F\nOPENMFL  OPEN  (OPENMFL,(OUTPUT)),MF=L\nOPENMFLN EQU   *-OPENMFL\nFOXES    DC    X'FFFFFFFF'\n         LTORG\n         CNOP  0,8\n         TITLE 'GETMAINED AREA'\nWORKAREA DSECT\n         DS    18F\n*\n         DS    0F\nOPENMFE  DS    XL(OPENMFLN)\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         TITLE 'DCB DSECT'\n         DCBD  DSORG=PS,DEVD=DA\n         END\n/*\n//LKED1    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,TERM,RENT,REUS),\n//            COND=(2,LT,ASM1),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,PASS)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DISP=SHR,DSN=ISP.V2R2M0.ISPLOAD\n//SYSLMOD  DD   DISP=SHR,DSN=SYS2.LINKLIB\n//*YSLMOD  DD   DISP=SHR,DSN=ASQCC.TEST.STEPLIB\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n    MODE AMODE(ANY),RMODE(24)\n    NAME QSAMPUT(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REGS": {"ttr": 16131, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x004\\x004\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n         REGS\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FIXED POINT REGISTERS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nR0       EQU   0        *USED BY O.S.\nR1       EQU   1        *USED BY O.S. // ADDRESS OF PARAMETER LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR00      EQU   0\nR01      EQU   1\nR02      EQU   2\nR03      EQU   3\nR04      EQU   4\nR05      EQU   5\nR06      EQU   6\nR07      EQU   7\nR08      EQU   8\nR09      EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13       *USED BY O.S. // SAVE-AREA ADDRESS\nR14      EQU   14       *USED BY O.S. // RETURN ADDRESS\nR15      EQU   15       *USED BY O.S. // ENTRY-PT ADDR, RETURN CODE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FLOATING POINT REGISTERS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nF0       EQU   0\nF2       EQU   2\nF4       EQU   4\nF6       EQU   6\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMBH1": {"ttr": 16133, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x15\\x00\\x15\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "CBT353"}, "text": "%SPF Memory Browse (SMB) ------------------------------------------------------+\n+\n+SMB provides a low-overhead, quick-response, browse of data in main memory.\n+\n+Commands are: %H+ for vertical hex on/off   %N+ for \"find next\" search mode\n+              %C+ for columns line on/off   %P+ for \"find previous\" search mode\n+\n+A \"find\" character string can be specified%only+on line 3 of the display, in\n+the field provided,%not+on the command line. The field must be enclosed in\n+single quotes if the string you are trying to find has leading or trailing\n+quotes or blanks. Imbedded blanks or quotes do not require the string to be in\n+quotes. The format of the find string can be specified in the%FMT+field as:\n+\n+               C -character, match regardless of upper/lower case.\n+               T -text, match exactly as entered\n+               H -hex, match the hex representation exactly as entered\n+\n+The columnar range of the find can be restricted by updating the%COL+fields.\n+\n+Vertical and horizontal scroll amounts are entered on the right of line 2.\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMBP1": {"ttr": 16135, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00#\\x00#\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  _ TYPE(INPUT) CAPS(OFF) INTENS(HIGH)\n  | AREA(DYNAMIC) EXTEND(ON) SCROLL(ON) USERMOD(20)\n  ! TYPE(OUTPUT)  INTENS(HIGH) PAD(-)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(HIGH)\n 03 TYPE(DATAOUT) SKIP(ON) /* FOR TEXT ENTER CMD. FIELD */\n 04 TYPE(DATAIN)  INTENS(NON)  /* nondisplay */\n 05 TYPE(DATAIN)  INTENS(HIGH) CAPS(OFF)\n 06 TYPE(DATAIN)  INTENS(LOW)  CAPS(IN)\n 07 TYPE(DATAIN)  INTENS(HIGH) CAPS(IN)\n 08 TYPE(DATAIN)  INTENS(LOW)\n 09 TYPE(DATAIN)  INTENS(LOW)\n 0A TYPE(DATAIN)  INTENS(LOW)\n 20 TYPE(DATAIN)  INTENS(LOW) CAPS(IN)\n)BODY\n%BROWSE --!SMBTITLE                                         %LN!SMBLN%COL!SMBCL+\n%Command ==>_SMBCMD                                         %SCROLL V_VL1%H_HL1%\n+FIND    ==>_SMBFIND                                        +FMT_FM+COL_FC1_FC2+\n|SMBDATA ----------------------------------------------------------------------|\n|                                                                              |\n| -----------------------------------------------------------------------------|\n)INIT\n  .HELP = SMBH1           /* DEFAULT TUTORIAL NAME     */\n  &AMT=PAGE\n  &SMBCMD=' '\n\n)PROC\n  &ZLVLINE = LVLINE(SMBDATA)\n  VER(&VL1,NUM,MSG=SMB005)\n  VER(&HL1,NUM,MSG=SMB005)\n  VER(&FC1,NUM,MSG=SMB006)\n  VER(&FC2,NUM,MSG=SMB006)\n\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SMBROWSE": {"ttr": 16137, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x05\\xf0\\x05\\xf0\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 1520, "newlines": 1520, "modlines": 0, "user": "CBT353"}, "text": "         PRINT OFF\n         COPY  SPFMACS\n         PRINT ON\n         PRINT NOGEN\nSMBROWSE TITLE 'CHANGE LOG'\n***********************************************************************\n*                                                                     *\n*   CHANGE LOG                                                        *\n*                                                                     *\n*  11/03/86  BRIAN COOK   ADDED \"FUP-\" COMMAND, TO SCROLL UP \"-\" LINES*\n*                         AFTER SUCCESSFUL \"FIND\".                    *\n*                                                                     *\n*  10/30/86  BRIAN COOK   UPDATE SCROLL AMOUNT BASED ON DIRECTION     *\n*                                                                     *\n*  10/16/86  BRIAN COOK   UPDATE SCROLL AMOUNT WHEN SCREEN SIZE       *\n*                         CHANGES.                                    *\n*                                                                     *\n*  10/13/86  BRIAN COOK   CHANGED LENGTH OF FIND STRING FROM 49 TO 47.*\n*                         ADDED \"VL1\" AND \"HL1\" PARAMETERS FOR SCROLL.*\n*                                                                     *\n*   9/03/86  BRIAN COOK   BUG IN SEARCH FOR QUOTED STRING             *\n*                         'MEMBER '                                   *\n*                                                                     *\n*   9/02/86  BRIAN COOK   FIXED HIGH-LIGHTING \"FOUND\" STRING          *\n*                         ADDED \"NEXT\" AND \"PREV\" COMMANDS FOR FIND   *\n*                         SEARCH DIRECTION.                           *\n*                                                                     *\n*   8/29/86  BRIAN COOK   CHANGED TO RE-ENTRANT                       *\n*                                                                     *\n*   8/25/86  BRIAN COOK   INITIAL START DATE                          *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         TITLE 'SPF MEMORY BROWSE GENERAL DESCRIPTION'\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                      SMBROWSE                                       *\n*               (FOR ISPF V2R1M2 5665-319)                            *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: IN-CORE BROWSE UTILITY FOR ISPF APPLICATIONS.             *\n*                                                                     *\n*                                                                     *\n* FUNCTION: DESIGNED TO OPERATE UNDER ISPF USING THE VERSION 2        *\n*           DYNAMIC PANEL DISPLAY.                                    *\n*                                                                     *\n*           IT  WILL NOT WORK WITH ANY PRIOR VERSION OF SPF.          *\n*                                                                     *\n*           IT IS CALLED WITH A PARAMETER LIST POINTING TO AN AREA    *\n*           IN MEMORY THAT CONTAINS RECORDS TO BE DISPLAYED ON THE    *\n*           TERMINAL. NO DISK I/O IS PERFORMED.                       *\n*                                                                     *\n*           ADDITIONAL PARAMETERS SPECIFY THE RECORD LENGTH AND       *\n*           NUMBER OF RECORDS.                                        *\n*                                                                     *\n*                                                                     *\n* THE FOLLOWING DIALOG VARIABLES MUST BE DEFINED BY THE CALLING       *\n* PROGRAM AND INITIALIZED PRIOR TO INVOKING SMBROWSE:                 *\n*                                                                     *\n*    1. SMBSTART =  STARTING ADDRESS OF RECORDS                       *\n*    2. SMBNUMB  =  NUMBER OF RECORDS                                 *\n*    3. SMBLRECL =  RECORD LENGTH                                     *\n*    4. SMBTITLE =  TITLE FOR THE DISPLAY (USUALLY DSNAME)            *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ASSEMBLY PARMS:                                                     *\n*                                                                     *\n*    'OBJECT,NODECK,TERM,XREF(SHORT),RENT'                            *\n*                                                                     *\n*                                                                     *\n* LINK-EDIT PARMS:                                                    *\n*                                                                     *\n*    (XREF,LET,LIST,TERM,REUS,RENT)                                   *\n*                                                                     *\n*                                                                     *\n* LINK-EDIT EXTERNAL REFERENCES:                                      *\n*                                                                     *\n*    ISP.V2R2M0.ISPLOAD, MEMBER ISPLINK                               *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n         TITLE 'INSTALLATION NOTES'\n***********************************************************************\n*\n* 1.  SMB REQUIRES \"SYS1.MACLIB\" AS A SYSLIB IN THE ASSEMBLY STEP,\n*     FOR THE FOLLOWING MACRO'S:\n*\n*          SAVE/RETURN\n*          GETMAIN/FREEMAIN\n*          CALL\n*\n*\n* 2.  SMB ALSO REQUIRES MEMBER \"SPFMACS\" FROM SYS2.MACLIB (OR THE CBT\n*     TAPE FILE 353) FOR THE ASSEMBLY.\n*\n*\n* 3.  SMB IS RE-ENTRANT, AND CAN BE PLACED IN LPALIB. IT IS LESS THAN\n*     6K, SO THAT'S PROBABLY A GOOD SPOT FOR IT.\n*\n*\n* 4.  BELOW ARE SOME SAMPLE STATEMENTS THAT ARE REQUIRED TO INVOKE\n*     SMB (EXAMPLE TAKEN FROM JDF, USING \"SPFMACS\"):\n*\n*     A. DEFINITIONS:\n*\n*        VDEFINE SMBSTART,4,FMT=FIXED\n*        VDEFINE SMBNUMB,4,FMT=FIXED\n*        VDEFINE SMBLRECL,4,FMT=FIXED\n*        VDEFINE SMBTITLE,49\n*\n*                SMBSTART DS    F     ADDRESS OF 1ST RECORD\n*                SMBNUMB  DS    F     NUMBER OF RECORDS\n*                SMBLRECL DS    F     LRECL OF RECORDS\n*                SMBTITLE DS    CL49  TITLE INFO\n*\n*\n*     B. UPDATE SHARED POOL:\n*\n*        VPUT  SMBSTART,SMBNUMB,SMBLRECL,SMBTITLE,POOL=SHARED\n*\n*\n*     C. INVOKE SMBROWSE:\n*\n*        SELECT PGM(SMBROWSE)\n*\n*\n*\n* 5.  IF YOU DON'T HAVE ASEMBLER H VERSION 2, COMMENT OUT THE AMODE AND\n*     RMODE STATEMENTS. THESE ARE THE ONLY XA DEPENDENCIES.\n*\n*\n* 6.  SMB USES AN ISPF PANEL WITH A DYNAMIC AREA, SO REQUIRES ISPF V2.\n*     THE PANELS ARE IN ISPPLIB (OR CBT TAPE FILE 353) AND ARE:\n*\n*     SMBP1  --  THE DISPLAY PANEL\n*     SMBH1  --  THE HELP PANEL\n*\n*\n* 7.  SMB HAS ONE MESSAGE MEMBER, SMB00, WHICH IS IN ISPMLIB (OR CBT\n*     TAPE FILE 353).\n*\n*\n***********************************************************************\n         TITLE 'PROGRAM INITIALIZATION'\n***********************************************************************\n*\n*\n***********************************************************************\nSMBROWSE CSECT\n*\n*\n         USING *,12,11,10,9\n*\nSMBROWSE AMODE 31\nSMBROWSE RMODE ANY\n*\n         SAVE  (14,12),,SMBROWSE_08/25/86_BRIAN COOK_&SYSTIME_&SYSDATE\n*\n         LR    R12,R15            SET BASE REGISTER\n         LA    R9,4095\n         LA    R11,1(R9,R12)     SET BASE 2\n         LA    R10,1(R9,R11)     SET BASE 3\n         LA    R9,1(R9,R10)      SET BASE 4\n*\n         L     R2,GETMLENG\n         GETMAIN R,LV=(2)\n*\n         ST    R13,4(R1)          STORE BACKWARDS POINTER\n         ST    R1,8(R13)          STORE FORWARD POINTER\n         LR    R13,R1             DSECT BASE\n         USING WORKAREA,13\n*\n*\n*\n         TITLE 'MAIN PROCESSING LOOP'\n*\n         BAL   R7,INITFLDS    INITIALIZATION\n*\n         BAL   R7,DOBROWSE    BROWSE THE DATA\n*\nBROWSEOJ DS    0H\n*\n         BAL   R7,BROWDONE\n*\n*\n*\n         LR    R3,R13             START ADDRESS OF GETMAINED AREA\n         L     R2,GETMLENG        LENGTH OF GETMAINED AREA\n         L     R13,4(,R13)        PICK UP CALLING SAVE AREA\n         FREEMAIN R,LV=(2),A=(3)\n         LM    R14,R12,12(R13)\n         SR    R15,15\n         BR    R14\n*\n*\n*\n         TITLE 'TERMINATION LOGIC'\nBROWDONE DS    0H\n*\n         ST    R7,DONE7\n*\n         L     R2,ENT1\n         LTR   R2,R2\n         BZ    NOPFK1\n*\n         MVI   PFKWORK,C' '\n         MVC   PFKWORK+1(254),PFKWORK\n         MVC   PFKWORK(5),=C'RFIND'\n*\n*\n         CALL  ISPLINK,(=CL8'VPUT',                                    X\n               (2)),                                                   X\n               VL,MF=(E,ISPARMS)\n*\nNOPFK1   DS    0H\n*\n*\n         L     R2,ENT2\n         LTR   R2,R2\n         BZ    NOPFK2\n*\n         MVI   PFKWORK,C' '\n         MVC   PFKWORK+1(254),PFKWORK\n         MVC   PFKWORK(5),=C'RFIND'\n*\n*\n         CALL  ISPLINK,(=CL8'VPUT',                                    X\n               (2)),                                                   X\n               VL,MF=(E,ISPARMS)\n*\nNOPFK2   DS    0H\n*\nDONEDONE DS    0H\n         L     R7,DONE7\n         BR    R7             RETURN\n*\n         TITLE 'INITIALIZATION'\nINITFLDS DS    0H\n         ST    R7,INIT7\n*\n*\n* INITIAL DISPLAY PROFILE FLAGS\n*\n*\n         MVI   COLSFLAG,0          FLAG OFF\n         MVI   HEXFLAG,0           FLAG OFF\n         MVI   NEXTFLAG,0          FIND IS NEXT, NOT PREV\n*\n*\n* THESE FIELDS DISPLAYED ON THE BROWSE SCREEN\n*\n*\n         MVC   SMBCMD(40),SPACES\n         VDEFINE SMBCMD,40\n         MVC   SMBFIND(80),SPACES\n         VDEFINE SMBFIND,47\n         VDEFINE SMBDATA,3280\n         VDEFINE SMBTITLE,49,OPT=COPY\n         MVC   SMBLN(5),=C'00001'\n         VDEFINE SMBLN,5\n         MVC   SMBCL(5),=C'00001'\n         VDEFINE SMBCL,5\n         MVC   FM(2),=C'CH'\n         VDEFINE FM,2\n         MVC   FC1(3),=C'001'\n         VDEFINE FC1,3\n         MVC   FC2(3),=C'999'\n         VDEFINE FC2,3\n*\n*\n* THESE FIELDS DEFINED BY ISPF FOR DYNAMIC SCREEN AREAS\n*\n*\n         VDEFINE AREATYP,8\n         VDEFINE COLS,4,FMT=FIXED\n         VDEFINE ROWS,4,FMT=FIXED\n         VDEFINE TLROW,4,FMT=FIXED\n         VDEFINE TLCOL,4,FMT=FIXED\n         VDEFINE ZVERB,8\n         VDEFINE ZSCROLLA,4\n         XC    ZSCROLLN(4),ZSCROLLN\n         VDEFINE ZSCROLLN,4,FMT=FIXED,OPT=COPY\n*\n** SET DEFAULT VERTICAL AND HORIZONTAL SCROLL AMOUNTS\n*\n         PQUERY SMBP1,SMBDATA\n*\n         MVC   ZSCROLLN(4),ROWS       ELSE SET IT TO TOTAL ROWS\n         MVC   OLDROWS(4),ZSCROLLN    SAVE FOR LATER\n         L     R14,ZSCROLLN           NUMBER OF ROWS FOR SCROLLING\n         LTR   R14,R14                IF SCROLL AMOUNT IS NON-ZERO\n         BNZ   *+8                    THEN USE IT\n         L     R14,ROWS               ELSE USE TOTAL ROWS\n         CVD   R14,DWORD\n         OI    DWORD+7,X'0F'\n         UNPK  VL1(3),DWORD+6(2)\n         VDEFINE VL1,3\n         L     R14,COLS               NUMBER OF COLUMNS\n         CVD   R14,DWORD              NUMBER OF COLUMNS\n         OI    DWORD+7,X'0F'\n         UNPK  HL1(3),DWORD+6(2)\n         VDEFINE HL1,3\n*\n* THESE FIELDS DEFINED BY CALLING PROGRAM TO SPECIFY THE BROWSE DATA\n*\n*\n         VDEFINE SMBSTART,4,FMT=FIXED,OPT=COPY\n         VDEFINE SMBNUMB,4,FMT=FIXED,OPT=COPY\n         VDEFINE SMBLRECL,4,FMT=FIXED,OPT=COPY\n*\n         NI    SMBSTART,X'7F'\n         NI    SMBNUMB,X'7F'\n         NI    SMBLRECL,X'7F'\n*\n         ICM   R15,15,SMBSTART       CHECK FOR PRESENCE OF VARIABLE\n         BZ    BADVARS\n         ICM   R15,15,SMBNUMB        CHECK FOR PRESENCE OF VARIABLE\n         BZ    BADVARS\n         ICM   R15,15,SMBLRECL       CHECK FOR PRESENCE OF VARIABLE\n         BZ    BADVARS\n*\n         B     VARSOK\n*\nBADVARS  DS    0H\n*\n         SETMSG SMB004\n*\n         B     BROWSEOJ\n*\n*        L     R0,SMBSTART\n*        L     R1,SMBNUMB\n*        L     R2,SMBLRECL\n*        LA    R3,SMBTITLE\n*        DC    H'0'\n*\nVARSOK   DS    0H\n*\n** SET DEFAULT \"FIND-AND-SCROLL-UP\" AMOUNT\n*\n         MVC   FUPAMT(4),=F'3'     DEFAULT IS SCROLL UP 3 AFTER \"FIND\"\n         L     R14,SMBLRECL\n         MH    R14,FUPAMT+2\n         STH   R14,FUPAMT+2\n*\n         L     R4,SMBNUMB       NUMBER OF LINES\n         LA    R4,1(,R4)        BUMP 1 TO GO PAST LAST LINE\n         MH    R4,SMBLRECL+2    TIMES LENGTH\n         A     R4,SMBSTART      POINT TO LAST LINE\n         ST    R4,BRLAST        LAST LINE\n*\n         CONTROL ERRORS,RETURN\n*\n         XC    ENT1(8),ENT1     CLEAR PFK ADDRESS POINTERS\n         LA    R2,PFTABLE       POINT TO FIRST PF KEY\n*\nSCANPFK1 DS    0H\n*\n         CLI   0(R2),X'FF'      END OF TABLE?\n         BE    INITDONE         YES\n*\n         CALL  ISPLINK,(=CL8'VDEFINE',                                 X\n               (2),PFKWORK,=CL8'CHAR',=F'255',                         X\n               =CL10'(COPY)'),                                         X\n               VL,MF=(E,ISPARMS)\n*\n         OC    PFKWORK(5),SPACES         UPPER-CASE\n         CLC   PFKWORK(5),=C'RFIND'\n         BE    PFGOT1\n         LA    R2,8(,R2)\n         B     SCANPFK1\n*\nPFGOT1   DS    0H\n*\n         ST    R2,ENT1\n         MVI   PFKWORK,C' '\n         MVC   PFKWORK+1(254),PFKWORK\n         MVC   PFKWORK(8),=C'>RFIND  '\n*\n*\n         CALL  ISPLINK,(=CL8'VPUT',                                    X\n               (2)),                                                   X\n               VL,MF=(E,ISPARMS)\n*\n*\nSCANPFK2 DS    0H\n*\n         CLI   0(R2),X'FF'      END OF TABLE?\n         BE    INITDONE         YES\n*\n         CALL  ISPLINK,(=CL8'VDEFINE',                                 X\n               (2),PFKWORK,=CL8'CHAR',=F'255',                         X\n               =CL10'(COPY)'),                                         X\n               VL,MF=(E,ISPARMS)\n*\n         OC    PFKWORK(5),SPACES\n         CLC   PFKWORK(5),=C'RFIND'\n         BE    PFGOT2\n         LA    R2,8(,R2)\n         B     SCANPFK2\n*\nPFGOT2   DS    0H\n*\n         ST    R2,ENT2\n         MVI   PFKWORK,C' '\n         MVC   PFKWORK+1(254),PFKWORK\n         MVC   PFKWORK(8),=C'>RFIND  '\n*\n*\n         CALL  ISPLINK,(=CL8'VPUT',                                    X\n               (2)),                                                   X\n               VL,MF=(E,ISPARMS)\n*\n*\nINITDONE DS    0H\n         L     R7,INIT7\n         BR    R7\n*\nPFTABLE  DC    CL8'(ZPF01)'\n         DC    CL8'(ZPF02)'\n         DC    CL8'(ZPF03)'\n         DC    CL8'(ZPF04)'\n         DC    CL8'(ZPF05)'\n         DC    CL8'(ZPF06)'\n         DC    CL8'(ZPF07)'\n         DC    CL8'(ZPF08)'\n         DC    CL8'(ZPF09)'\n         DC    CL8'(ZPF10)'\n         DC    CL8'(ZPF11)'\n         DC    CL8'(ZPF12)'\n         DC    CL8'(ZPF13)'\n         DC    CL8'(ZPF14)'\n         DC    CL8'(ZPF15)'\n         DC    CL8'(ZPF16)'\n         DC    CL8'(ZPF17)'\n         DC    CL8'(ZPF18)'\n         DC    CL8'(ZPF19)'\n         DC    CL8'(ZPF20)'\n         DC    CL8'(ZPF21)'\n         DC    CL8'(ZPF22)'\n         DC    CL8'(ZPF23)'\n         DC    CL8'(ZPF24)'\n         DC    X'FF'\n*\n         TITLE 'BROWSE THE RECORDS'\nMOVELINE MVC   0(1,R15),0(R1)\nTEXTTRT  TR    0(1,R15),ASISTRT   CONVERT OUT NON-TEXT\nLITETRT  TR    0(1,R1),LOWTRT     CONVERT OUT INTENSITY\nENDBROWS DS    0H\n         L     R7,BROWSE7\n         BR    R7\n*\nDOBROWSE DS    0H\n*\n         ST    R7,BROWSE7\n*\n         MVC   BRADDR(12),PARMS SET THE PARMS\n         MVC   TOPPTR(4),BRADDR SET TOP LINE POINTER\n         MVC   SMBFIND(80),SPACES\n         XC    OFFSET(4),OFFSET\n*\nRESHOW   DS    0H\n*\n         PQUERY SMBP1,SMBDATA\n*\n*        L     R14,ROWS               ELSE USE TOTAL ROWS\n*        CVD   R14,DWORD\n*        OI    DWORD+7,X'0F'\n*        UNPK  VL1(3),DWORD+6(2)\n*        L     R14,COLS               ELSE USE TOTAL COLS\n*        CVD   R14,DWORD\n*        OI    DWORD+7,X'0F'\n*        UNPK  HL1(3),DWORD+6(2)\n*\n         L     R14,COLS               NUMBER OF COLUMNS\n         MH    R14,ROWS+2             TIMES NUMBER OF ROWS\n         ST    R14,ISPFSIZE           GIVES SCREEN AREA\n         L     R15,ROWS               LOOP CONTROL\n         L     R1,COLS                NUMBER OF COLUMNS\n         BCTR  R1,0                   EXECUTED MOVE\n*\n         LA    R14,SMBDATA\n         ST    R14,ISPFWORK\n*\n         LA    R15,132\n         C     R15,COLS\n         BE    INIT132\n*\n         LA    R15,40\n*\n         MVC   0(80,R14),INITLINE\n         LA    R14,80(,R14)\n         BCT   R15,*-10\n*\n         B     RESHOW1\n*\nINIT132  DS    0H\n*\n         LA    R15,24\n*\n         MVC   0(132,R14),INITLINE\n         LA    R14,132(,R14)\n         BCT   R15,*-10\n*\nRESHOW1  DS    0H\n*\n         XC    ISPFNUMB(4),ISPFNUMB INITIALIZE COUNTER\n*\n         NI    TOPPTR,X'7F'     CLEAR SIGN BIT\n         L     R15,TOPPTR       ADDRESS OF FIRST LINE\n         C     R15,SMBSTART     AM I TRYING TO START BEFORE TOP\n         BH    *+12             NO, JUST CONTINUE\n         L     R15,SMBSTART     SET TOP TO START\n         ST    R15,TOPPTR       SET TOP TO START\n         S     R15,SMBSTART     SUBTRACT START\n         LTR   R15,R15\n         BZ    RLINE0\n         SR    R14,R14\n         L     R3,SMBLRECL\n         DR    R14,R3\n*\nRLINE0   DS    0H\n*\n         LA    R15,1(,R15)      MAKE RELATIVE 1\n         CVD   R15,DWORD\n         OI    DWORD+7,X'0F'\n         UNPK  SMBLN(5),DWORD+5(3)\n*\nRLEN0    DS    0H\n*\n         L     R5,SMBLRECL     IF LRECL\n         C     R5,COLS            IS LESS THAN OR EQUAL TO COLS\n         BNH   RLEN7              THEN USE LRECL FOR LINE LENGTH\n*\n*                              IF LRECL\n         C     R5,OFFSET          IS LESS THAN OFFSET\n         BH    *+10\n         XC    OFFSET(4),OFFSET   SET OFFSET TO ZERO\n*\n         L     R5,SMBLRECL     IF LRECL\n         S     R5,OFFSET          MINUS OFFSET\n         C     R5,COLS            IS GREATER THAN OR EQUAL TO COLS\n         BNL   RLEN8              THEN JUST USE COLS FOR LINE LENGTH\n*\n         L     R5,SMBLRECL     ELSE TAKE LRECL\n         S     R5,COLS              MINUS COLS\n         ST    R5,OFFSET            AND USE THAT FOR OFFSET\n         B     RLEN8                AND USE COLS FOR LINE LENGTH\n*\nRLEN7    DS    0H\n*\n         XC    OFFSET(4),OFFSET\n         L     R5,SMBLRECL\n         B     RLEN9\n*\n*\nRLEN8    DS    0H\n*\n         L     R5,COLS         R5=LINE LENGTH\nRLEN9    DS    0H\n         BCTR  R5,0\n*\nRLENSET  DS    0H\n*\n         L     R15,OFFSET       COLUMN 1 OF DISPLAT\n         LA    R15,1(,R15)      MAKE RELATIVE 1\n         CVD   R15,DWORD\n         OI    DWORD+7,X'0F'\n         UNPK  SMBCL(5),DWORD+5(3)\n*\n         L     R3,TOPPTR       R3=ADDRESS OF FIRST LINE\n*\n         L     R4,BRLAST       R4=NUMBER OF LINES\n         L     R15,ISPFWORK\n         SR    R14,R14\n*\n         CLI   COLSFLAG,0      COLS?\n         BE    RESHOW2         NO\n*\n         MVC   0(80,R15),COLSDATA\n         A     R15,COLS\n         LA    R14,1(,R14)\n*\nRESHOW2  DS    0H\n*\n         CR    R3,R4          NEXT LINE VS LAST LINE OF DATA\n         BNL   SHOWTBLS       IF NEXT LINE IS NOT LOW\n*\n         L     R1,OFFSET\n         AR    R1,R3\n         ST    R1,SAVE1            SAVE IT\n*\n         EX    R5,MOVELINE\n*\n         EX    R5,TEXTTRT\n*\n         C     R3,FINDPTR      IS THIS A LINE I HAVE FOUND\n         BNE   NOTFNDLN        NO\n*\n         XC    FINDPTR(4),FINDPTR     ONE-TIME-THROUGH\n*\n         L     R1,FINDOFF\n         LTR   R1,R1                  COL 0\n         BZ    NOTFNDLN               YES\n         BCTR  R1,0                   BACK UP ONE POSITION\n         C     R1,OFFSET              LESS THAN OFFSET\n         BNH   NOTFNDLN               YES\n*\n         S     R1,OFFSET\n         AR    R1,R15\n         MVI   0(R1),2                HIGH-INTENSITY\n         L     R2,BROFLENG            FIND STRING\n         CLI   FM,C'H'                HEX FORMAT?\n         BNE   *+8                    NO\n         SRL   R2,1                   YES, DIVIDE LENGTH BY 2\n         AR    R1,R2                  PAST FIND STRING\n         MVI   2(R1),1                LOW-INTENSITY\n*\nNOTFNDLN DS    0H\n*\n         CLI   HEXFLAG,0           FLAG OFF\n         BE    RESHOW3             YES\n*\n         LA    R14,1(,R14)         ADD 1\n         LA    R0,3(,R14)          ROOM FOR 3 MORE LINES\n         C     R0,ROWS\n         BH    SHOWTBLS            NOPE\n*\n         ST    R5,SAVE5            SAVE IT\n         L     R5,COLS             BUMP TO ACTUAL LENGTH\n*\n         AR    R15,R5              POINT TO NEXT SCREEN LINE\n         ST    R15,SAVE15          SAVE IT\n*\n         L     R1,SAVE1\n*\nHEXLOOP1 DS    0H\n*\n         PACK  0(1,R15),0(1,R1)\n         NI    0(R15),X'0F'\n*\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)\n         BCT   R5,HEXLOOP1\n*\n         L     R15,SAVE15\n         L     R5,COLS             BUMP TO ACTUAL LENGTH\n         BCTR  R5,0\n*\n         EX    R5,HEXTR\n*\n         LA    R5,1(,R5)           BUMP TO ACTUAL LENGTH\n*\n         LA    R14,1(,R14)         ADD 1\n         A     R15,COLS            POINT TO NEXT SCREEN LINE\n         ST    R15,SAVE15          SAVE IT\n*\n         L     R1,SAVE1\n*\nHEXLOOP2 DS    0H\n*\n         MVC   0(1,R15),0(R1)\n         NI    0(R15),X'0F'\n*\n         LA    R15,1(,R15)\n         LA    R1,1(,R1)\n         BCT   R5,HEXLOOP2\n*\n         L     R15,SAVE15\n         L     R1,SAVE1\n         L     R5,COLS             BUMP TO ACTUAL LENGTH\n         BCTR  R5,0\n*\n         EX    R5,HEXTR\n*\n         LA    R14,1(,R14)         ADD 1\n         A     R15,COLS            POINT TO NEXT SCREEN LINE\n*\n         L     R5,SAVE5\n         B     RESHOW3             CONTINUE\n*\nHEXTR    TR    0(1,R15),HEX16\nHEX16    DC    C'0123456789ABCDEF'\n*\nRESHOW3  DS    0H\n*\n         A     R15,COLS\n*\n         A     R3,BRLINELN\n*\n         LA    R14,1(,R14)\n*\nRESHOW9  DS    0H\n*\n         C     R14,ROWS\n         BL    RESHOW2\n*\n*        DC    H'0'\n*\n         TITLE 'INVOKE ISPF DISPLAY MODULE'\nSHOWTBLS DS    0H\n*\n         VREPLACE SMBDATA,ISPFSIZE,SMBDATA\n         LTR   R15,R15\n         BZ    *+6\n         DC    H'0'\n*\n         ST    R3,BOTPTR              LAST LINE ON SCREEN\n*\nSHOWTBL2 DS    0H\n         XC    ZSCROLLN(4),ZSCROLLN\n         MVC   ZSCROLLA(4),SPACES\n         MVC   ZVERB(8),SPACES\n*\n         DISPLAY SMBP1,ENDKEY=ENDBROWS\n         LTR   R15,R15\n         BZ    *+6\n         DC    H'0'\n*\n         TR    SMBCMD(40),CAPSONLY    UPPER-CASE ALL INPUT FIELDS\n         MVI   BROFCAPS,C' '\n         MVC   BROFCAPS+1(59),BROFCAPS\n         CLI   SMBFIND,C''''          QUOTED STRING?\n         BNE   *+14                   NO\n         MVC   BROFCAPS(45),SMBFIND+1 COPY QUOTED FIND STRING\n         B     *+10                   TRANSLATE\n         MVC   BROFCAPS(47),SMBFIND   COPY THE FIND STRING\n         TR    BROFCAPS(60),CAPSONLY  UPPER-CASE THE FIND STRING\n*\n         OI    FM,C' '                UPPER-CASE\n         CLI   FM,C'H'                HEX FORMAT?\n         BNE   SHOWTBL3               NO\n*\n         MVC   BROFWORK(46),SMBFIND   COPY THE FIND STRING\n         TR    BROFWORK(46),HEXTRT    CONVERT TO HEX\n*\n         LA    R3,BROFWORK         STRING CONVERTED\n         LA    R4,BROFHEX          STRING TO HEX\n         LA    R5,23              BYTES\n*\nGETFHEX1 DS    0H\n*\n         PACK  0(1,R4),0(1,R3)        LEFT HALF-BYTE\n         OC    0(1,R4),1(R3)          RIGHT HALF-BYTE\n*\n         LA    R3,2(,R3)              BUMP INPUT\n         LA    R4,1(,R4)              BUMP OUTPUT\n*\n         BCT   R5,GETFHEX1            LOOP\n*\n*\nSHOWTBL3 DS    0H\n*\n         VGET  ZVERB,POOL=ASIS\n         VGET  ZSCROLLA,POOL=ASIS\n         VGET  ZSCROLLN,POOL=ASIS\n*\n         CLC   ZVERB(5),=C'RIGHT'  PF11\n         BE    HSCROLL                YES, LEAVE VIRTICAL SCROLL ALONE\n         CLC   SMBCMD(5),=C'RIGHT' PF11\n         BE    HSCROLL                YES, LEAVE VIRTICAL SCROLL ALONE\n         CLC   ZVERB(4),=C'LEFT'   PF10\n         BE    HSCROLL                YES, LEAVE VIRTICAL SCROLL ALONE\n         CLC   SMBCMD(4),=C'LEFT'  PF10\n         BE    HSCROLL                YES, LEAVE VIRTICAL SCROLL ALONE\n*\n         NI    ZSCROLLN,X'7F'         TURN OFF SIGN BIT\n         LTR   R15,R15                IF RETURN CODE IS ZERO,\n         BZ    *+10                   USE ZSCROLLN AMOUNT\n         MVC   ZSCROLLN(4),ROWS       ELSE SET IT TO TOTAL ROWS\n*\n         CLC   OLDROWS(4),ZSCROLLN    MATCH\n         BE    TSTVERB                YES, LEAVE VERTICAL SCROLL ALONE\n*\n         MVC   OLDROWS(4),ZSCROLLN    UPDATE THIS\n         L     R14,ZSCROLLN           NUMBER OF ROWS FOR SCROLLING\n         LTR   R14,R14                IF SCROLL AMOUNT IS NON-ZERO\n         BNZ   *+8                    THEN USE IT\n         L     R14,ROWS               ELSE USE TOTAL ROWS\n         CVD   R14,DWORD\n         OI    DWORD+7,X'0F'\n         UNPK  VL1(3),DWORD+6(2)\n         B     TSTVERB                DONE SETTING VIRTICAL SCROLL\n*\nHSCROLL  DS    0H\n*\n         NI    ZSCROLLN,X'7F'         TURN OFF SIGN BIT\n         LTR   R15,R15                IF RETURN CODE IS ZERO,\n         BZ    *+10                   USE ZSCROLLN AMOUNT\n         MVC   ZSCROLLN(4),COLS       ELSE SET IT TO TOTAL COLS\n*\n         CLC   OLDCOLS(4),ZSCROLLN    MATCH\n         BE    TSTVERB                YES, LEAVE VERTICAL SCROLL ALONE\n*\n         MVC   OLDCOLS(4),ZSCROLLN    UPDATE THIS\n         L     R14,ZSCROLLN           NUMBER OF COLS FOR SCROLLING\n         LTR   R14,R14                IF SCROLL AMOUNT IS NON-ZERO\n         BNZ   *+8                    THEN USE IT\n         L     R14,COLS               ELSE USE TOTAL COLS\n         CVD   R14,DWORD\n         OI    DWORD+7,X'0F'\n         UNPK  HL1(3),DWORD+6(2)\n         B     TSTVERB                DONE SETTING VIRTICAL SCROLL\n*\nTSTVERB  DS    0H\n*\n         CLC   ZVERB(8),=C'SMBRFIND'\n         BE    BROPF5              BRANCH IF YES\n         CLC   ZVERB(5),=C'RFIND'\n         BE    BROPF5              BRANCH IF YES\n         CLI   ZVERB,C'F'\n         BE    BROPF5              BRANCH IF YES\n         CLC   SMBCMD(8),=C'SMBRFIND'\n         BE    BROPF5              BRANCH IF YES\n         CLC   SMBCMD(5),=C'RFIND'\n         BE    BROPF5              BRANCH IF YES\n         CLC   SMBCMD(3),=C'FUP'\n         BE    NEWFUP              BRANCH IF YES\n         CLI   SMBCMD,C'F'\n         BE    BROPF5              BRANCH IF YES\n         XC    BROFPTR(4),BROFPTR  CLEAR \"FIND\" FIRST LINE\n*\n         CLC   ZVERB(2),=C'UP'     PF7\n         BE    BROPF7              BRANCH IF YES\n         CLC   SMBCMD(2),=C'UP'    PF7\n         BE    BROPF7              BRANCH IF YES\n         CLC   ZVERB(4),=C'DOWN'   PF8\n         BE    BROPF8              BRANCH IF YES\n         CLC   SMBCMD(4),=C'DOWN' PF8\n         BE    BROPF8              BRANCH IF YES\n         CLC   ZVERB(4),=C'LEFT'   PF10\n         BE    BROPF10             BRANCH IF YES\n         CLC   SMBCMD(4),=C'LEFT' PF10\n         BE    BROPF10             BRANCH IF YES\n         CLC   ZVERB(5),=C'RIGHT'  PF11\n         BE    BROPF11             BRANCH IF YES\n         CLC   SMBCMD(5),=C'RIGHT' PF11\n         BE    BROPF11             BRANCH IF YES\n         B     GOTSTUFF            ASSUME ENTER\n*\nENDK     DS    0H\n         B     ENDBROWS            ALL DONE\n*\n         TITLE 'FIND A CHARACTER STRING'\nBROPF5   DS    0H\n*\n* CALCULATE THE LENGTH OF THE \"FIND\" STRING\n*\n         LA    R1,SMBFIND+79       STRING\n         LA    R14,79              LENGTH\n*\nBROLLOOP DS    0H\n*\n         CLI   0(R1),C' '          DO I HAVE A BLANK?\n         BNE   BROLGOT             NO, MUST BE LAST CHARACTER OF STRING\n*\nBROLBUMP DS    0H\n*\n         BCT   R14,BROLNEXT        BACK UP TO NEXT CHARACTER\n*\n         B     RESHOW              NO STRING SPECIFIED\n*\nBROLNEXT DS    0H\n*\n         LA    R1,SMBFIND(R14)     PREVIOUS CHARACTER\n         B     BROLLOOP            LOOP\n*\nBROLGOT  DS    0H\n*\n         L     R1,BROFPTR          FIRST LINE\n         L     R2,BROFADDR         OFFSET WITHIN LINE\n         LA    R2,1(,R2)           BUMP 1 CHARACTER\n         L     R15,BROFOFFS        LENGTH REMAINING ON LINE\n         BCTR  R15,0               MINUS 1\n*\n         CLI   SMBFIND,C''''       QUOTED STRING?\n         BNE   *+8                 NO\n         BCTR  R14,0               MINUS 1 FOR LEADING QUOTE\n         BCTR  R14,0               MINUS 1 FOR TRAILING QUOTE\n*\n         LTR   R1,R1               RESUME FIND?\n         BZ    BRONFIND            NO, START FROM SCRATCH\n         C     R14,BROFLENG        RESUME FIND?\n         BNE   BRONFIND            NO, START FROM SCRATCH\n*\n         B     BROPF51             RESUME\n*\nBRONFIND DS    0H\n*\n         L     R1,TOPPTR           FIRST LINE\n         ST    R14,BROFLENG        SAVE LENGTH\n*\nBROFLOOP DS    0H\n*\n         CLI   NEXTFLAG,0          FIND-NEXT?\n         BE    BROFLP02            YES\n*\n         C     R1,BRADDR           FIRST LINE OF DATA\n         BL    BRONOTF\n*\n         B     BROFLP03            CONTINUE SEARCH\n*\nBROFLP02 DS    0H\n*\n         C     R1,BRLAST           LAST OF DATA?\n         BH    BRONOTF\n*\nBROFLP03 DS    0H\n*\n         L     R15,SMBLRECL        LOOP CONTROL PER LINE\n         CLC   FC2(3),=C'999'      LIMIT MAX?\n         BE    BROFLIM1            YES\n*\n         PACK  DWORD(8),FC2(3)\n         CVB   R2,DWORD            LOOP CONTROL\n*\n         CR    R15,R2              LRECL VS SCREEN MAX\n         BL    BROFLIM1            SCREEN MAX TOO HIGH FOR LRECL\n         LR    R15,R2              LRECL = SCREEN MAX\n*\nBROFLIM1 DS    0H\n*\n         CLC   FC1(3),=C'001'      LIMIT COL1?\n         BE    BROFLIM9            YES\n*\n         PACK  DWORD(8),FC1(3)\n         CVB   R2,DWORD            LOOP CONTROL\n*\n         C     R2,SMBLRECL         SCREEN COL1 VERSUS LRECL\n         BL    BROFLIM2            SCREEN COL1 LESS THAN LRECL, SO OK\n         SR    R2,R2               SCREEN COL1 TOO HIGH FOR LRECL\n*\nBROFLIM2 DS    0H\n*\n         SR    R15,R2              LRECL - SCREEN COL1\n         SR    R15,R14             LRECL - FIND STRING LENGTH\n         LA    R2,0(R1,R2)\n*\n         B     BROPF51\n*\nBROFLIM9 DS    0H\n*\n         SR    R15,R14\n*\n         LR    R2,R1\n*\nBROPF51  DS    0H\n*\n         CLI   FM,C'H'             HEX FORMAT?\n         BE    BROPF513            YES\n*\n         CLI   SMBFIND,C''''       QUOTED STRING?\n         BE    BROPF511            YES\n*\n         EX    R14,BROFCLC1        MATCH STRING AS ENTERED?\n         BE    BROGOTF             YES, PUT THIS LINE AT TOP\n         CLI   FM,C'T'             TEXT FORMAT?\n         BE    BROPF512            YES, MUST MATCH EXACTLY\n*\nBROPF510 DS    0H\n*\n         EX    R14,BROFMOV2        MOVE DATA TO BROFWORK\n         EX    R14,BROFTRT2        MAKE IT ALL CAPS\n         EX    R14,BROFCLC3        MATCH STRING ALL CAPS?\n         BE    BROGOTF             YES, PUT THIS LINE AT TOP\n*\n         B     BROPF512            NO, JUST BUMP\n*\nBROPF511 DS    0H\n*\n         EX    R14,BRFQCLC1        MATCH STRING AS ENTERED?\n         BE    BROGOTF             YES, PUT THIS LINE AT TOP\n         CLI   FM,C'C'             CHAR FORMAT?\n         BE    BROPF510            YES, SEE IF ALL-CAPS MATCHES\n*\nBROPF512 DS    0H\n*\n         LA    R2,1(,R2)           BUMP TO NEXT CHARACTER\n         BCT   R15,BROPF51             KEEP LOOPING\n*\n*\n         CLI   NEXTFLAG,0          FIND-NEXT?\n         BNE   BROP5122            NO\n*\n         A     R1,SMBLRECL         BUMP TO NEXT LINE\n         B     BROFLOOP            AND LOOP\n*\nBROP5122 DS    0H\n*\n         S     R1,SMBLRECL         BUMP TO PREV LINE\n         B     BROFLOOP            AND LOOP\n*\nBROPF513 DS    0H\n*\n         L     R14,BROFLENG        GET LENGTH\n         SRL   R14,1               DIVIDE BY 2\n         EX    R14,BROFCLC4        MATCH STRING?\n         BE    BROGOTF             YES, PUT THIS LINE AT TOP\n*\n         B     BROPF512            CONTINUE LOOP\n*\nBROGOTF  DS    0H\n*\n         ST    R1,BROFPTR          LINE I WAS ON\n         ST    R1,FINDPTR          LINE I WAS ON\n*\n**  THIS BACKS UP THE DISPLAY WHEN A CHARACTER STRING IS FOUND,\n*   WHICH IS OFTEN MORE CONVENIENT.\n*\n         S     R1,FUPAMT           SEE IF I CAN BACK UP\n         ST    R1,TOPPTR           ASSUME SO\n         A     R1,FUPAMT           ADJUST FOR SUBTRACTION\n*\n         ST    R2,BROFADDR         OFFSET WITHIN LINE\n         ST    R15,BROFOFFS        LENGTH REMAINING ON LINE\n         SR    R2,R1               OFFSET WITHIN LINE\n         ST    R2,FINDOFF          OFFSET WITHIN LINE\n*\n         LTR   R1,R2\n         BZ    LEFT00\n         BCTR  R1,0\n         C     R1,OFFSET           COMPARE TO DISPLAY OFFSET\n         BH    LEFTOK              RIGHT OF OFFSET\n*\nLEFT00   DS    0H\n*\n         ST    R1,OFFSET           MAKE OFFSET = START OF FOUND STRING\n         B     RIGHTOK             FIND STRING LENGTH IS ALWAYS LESS\n*                                  THAN COLS\n*\nLEFTOK   DS    0H\n*\n         LR    R1,R2\n         A     R1,BROFLENG         POINT TO\n         LA    R1,3(,R1)                    END OF STRING\n         L     R14,COLS            NUMBER OF COLS\n         A     R14,OFFSET          PLUS OFFSET = RIGHT MARGIN\n         C     R14,SMBLRECL        HIGHER THAN LRECL?\n         BNH   *+8\n         L     R14,SMBLRECL        MAKE IT LRECL\n         CR    R1,R14              COMPARE TO DISPLAY OFFSET\n         BNH   RIGHTOK             RIGHT OF OFFSET\n*\n         LTR   R2,R2\n         BZ    *+6\n         BCTR  R2,0\n         ST    R2,OFFSET           COMPARE TO DISPLAY OFFSET\n*\nRIGHTOK  DS    0H\n*\n         SETMSG SMB002\n*\n         B     RESHOW\n*\nBRONOTF  DS    0H\n*\n*        L     R0,BROFLENG         FIND STRING LENGTH\n*        DC    H'0'                S0C1\n*\n         SETMSG SMB001\n*\n         B     RESHOW\n*\nBROFCLC1 CLC   SMBFIND(1),0(R2)\nBRFQCLC1 CLC   SMBFIND+1(1),0(R2)\nBROFCLC2 CLC   BROFCAPS(1),0(R2)\nBROFCLC3 CLC   BROFWORK(1),BROFCAPS\nBROFCLC4 CLC   BROFHEX(1),0(R2)\nBROFMOV2 MVC   BROFWORK(1),0(R2)\nBROFTRT2 TR    BROFWORK(1),CAPSONLY\n         TITLE 'SCROLL UP'\nBROPF7   DS    0H\n*\n         CLC   ZSCROLLA(3),=C'MAX' GO TO TOP?\n         BE    BROTOP              YES\n         CLI   SMBCMD,C'M'            GO TO TOP?\n         BE    BROTOP              YES\n*\n         TR    VL1(3),NUMONLY         ALLOW ONLY NUMERICS\n         PACK  DWORD(8),VL1(3)\n         CVB   R1,DWORD\n         STH   R1,PFSCRL\n*        MVC   PFSCRL(2),ZSCROLLN+2       SCREEN SCROLL AMOUNT\n         CLI   HEXFLAG,0                  HEX DISPLAY?\n         BE    BROPF72                    NO\n*\n         LH    R1,PFSCRL           SCROLL AMOUNT\n         SRL   R1,2                DIVIDE BY 4\n         STH   R1,PFSCRL           SCROLL AMOUNT\n*\nBROPF72  DS    0H\n*\n         L     R1,TOPPTR           GO TO TOP?\n*\n         L     R0,BRLINELN         INPUT LINE LENGTH\n         MH    R0,PFSCRL           BACK UP SCREEN SIZE\n         SR    R1,R0\n         ST    R1,TOPPTR           START DISPLAY\n*\n         C     R1,BRADDR           HAVE I GONE PAST TOP?\n         BNL   RESHOW              NO, START THE DISPLAY\n*\nBROTOP   DS    0H\n*\n         L     R1,BRADDR           POINT TO FIRST LINE\n         ST    R1,TOPPTR           START DISPLAY AT TOP\n         B     RESHOW\n*\n         TITLE 'SCROLL DOWN'\nBROPF8   DS    0H\n*\n         CLC   ZSCROLLA(3),=C'MAX' GO TO BOTTOM?\n         BE    BROBOT              YES\n         CLI   SMBCMD,C'M'         GO TO BOTTOM?\n         BE    BROBOT              YES\n*\n         TR    VL1(3),NUMONLY         ALLOW ONLY NUMERICS\n         PACK  DWORD(8),VL1(3)\n         CVB   R1,DWORD\n         STH   R1,PFSCRL\n*        MVC   PFSCRL(2),ZSCROLLN+2       SCREEN SCROLL AMOUNT\n         CLI   HEXFLAG,0                  HEX DISPLAY?\n         BE    BROPF82                    NO\n*\n         LH    R1,PFSCRL           SCROLL AMOUNT\n         SRL   R1,2                DIVIDE BY 4\n         STH   R1,PFSCRL           SCROLL AMOUNT\n*\nBROPF82  DS    0H\n*\n         L     R1,TOPPTR\n*\n         L     R0,BRLINELN         LINE LENGTH\n         MH    R0,PFSCRL           BUMP DOWN SCREEN SIZE\n         AR    R1,R0\n*\n         C     R1,BRLAST           HAVE I GONE PAST BOTTOM?\n         BH    RESHOW              YES, JUST RESHOW THE SCREEN\n*\n         ST    R1,TOPPTR\n*\n         B     RESHOW\n*\nBROBOT   DS    0H\n*\n         L     R1,BRLAST           POINT TO BOTTOM\n*\n         L     R0,BRLINELN         LINE LENGTH\n         MH    R0,ZSCROLLN+2       BUMP UP SCREEN SIZE\n         SR    R1,R0\n         ST    R1,TOPPTR\n*\n         C     R1,BRADDR           HAVE I GONE PAST TOP?\n         BNL   RESHOW\n*\n         L     R1,BRADDR           POINT TO TOP\n         ST    R1,TOPPTR\n         B     RESHOW\n*\n         TITLE 'SCROLL LEFT'\nBROPF10  DS    0H\n         MVC   ZVERB(4),=C'LEFT'   PF10\n         MVC   SMBCMD(4),=C'LEFT' PF10\n*\n         L     R1,OFFSET\n         LTR   R1,R1\n         BZ    RESHOW\n*\n         TR    HL1(3),NUMONLY         ALLOW ONLY NUMERICS\n         PACK  DWORD(8),HL1(3)\n         CVB   R14,DWORD\n         CR    R1,R14\n         BNH   LEFT0\n*\n         SR    R1,R14\n         ST    R1,OFFSET\n         B     RESHOW\n*\nLEFT0    DS    0H\n*\n         XC    OFFSET(4),OFFSET\n         B     RESHOW\n*\n         TITLE 'SCROLL RIGHT'\nBROPF11  DS    0H\n         MVC   ZVERB(5),=C'RIGHT'  PF11\n         MVC   SMBCMD(5),=C'RIGHT' PF11\n*\n         TR    HL1(3),NUMONLY         ALLOW ONLY NUMERICS\n         PACK  DWORD(8),HL1(3)\n         CVB   R14,DWORD\n         ST    R14,HL1COLS\n*\n         L     R1,SMBLRECL\n         L     R14,HL1COLS\n         A     R14,OFFSET\n         CR    R1,R14\n         BNH   RIGHT9\n*\n         L     R1,HL1COLS\n         A     R1,OFFSET\n         ST    R1,OFFSET\n         B     RESHOW\n*\nRIGHT9   DS    0H\n*\n         L     R1,SMBLRECL\n         S     R1,HL1COLS\n         ST    R1,OFFSET\n         B     RESHOW\n*\n*\n         B     RESHOW\n*\n         TITLE 'PROCESS  COMMANDS'\n*\n***********************************************************************\n*\n*   DETERMINE WHETHER ANYTHING WAS ENTERED ON THE SCREEN\n*\n***********************************************************************\n*\nGOTSTUFF DS    0H\n*\n         CLI   SMBCMD,C' '         COMMAND ENTERED?\n         BE    RESHOW\n*\n*    THE COMMAND ENTERED IS IN \"SMBCMD\"\n*\nGOTCMD   DS    0H\n*\n         CLI   SMBCMD,C'C'         COLS?\n         BE    TOGGLEC             YES\n*\n         CLI   SMBCMD,C'H'         HEX?\n         BE    TOGGLEH             YES\n*\n         CLI   SMBCMD,C'N'         \"FIND\" DIRECTION IS FIND-NEXT\n         BE    TOGGLEN             YES\n*\n         CLI   SMBCMD,C'P'         \"FIND\" DIRECTION IS FIND-PREVIOUS\n         BE    TOGGLEP             YES\n*\n*\n*     PUT ADDITIONAL COMMAND TESTS HERE\n*\n         B     RESHOW\n*\n         TITLE 'PROCESS  COLS  COMMAND'\n*\n***********************************************************************\n*\n*   IF COLS IS ON, SET IT OFF; IF OFF, SET IT ON\n*\n***********************************************************************\n*\nNEWFUP   DS    0H\n*\n         TR    SMBCMD(4),NUMONLY\n         PACK  DWORD(8),SMBCMD(4)\n         CVB   R1,DWORD\n         MH    R1,SMBLRECL+2       ADD 1\n         ST    R1,FUPAMT\n         B     RESHOW\n*\n         TITLE 'PROCESS  COLS  COMMAND'\n*\n***********************************************************************\n*\n*   IF COLS IS ON, SET IT OFF; IF OFF, SET IT ON\n*\n***********************************************************************\n*\nTOGGLEC  DS    0H\n*\n         CLI   COLSFLAG,0          FLAG OFF?\n         BE    COLSFON\n*\n         MVI   COLSFLAG,0          ELSE TURN IT OFF\n         PACK  DWORD(8),VL1(3)\n         CVB   R1,DWORD\n         LA    R1,1(,1)            ADD 1\n         CVD   R1,DWORD\n         OI    DWORD+7,X'0F'  MAKE PRINTABLE\n         UNPK  VL1(3),DWORD+6(2)\n         B     RESHOW\n*\nCOLSFON  DS    0H\n*\n         MVI   COLSFLAG,1          SET FLAG ON\n         PACK  DWORD(8),VL1(3)\n         CVB   R1,DWORD\n         BCTR  R1,0\n         CVD   R1,DWORD\n         OI    DWORD+7,X'0F'  MAKE PRINTABLE\n         UNPK  VL1(3),DWORD+6(2)\n         B     RESHOW\n*\n         TITLE 'PROCESS  FIND-NEXT SPECIFICATION'\n*\nTOGGLEN  DS    0H\n*\n         MVI   NEXTFLAG,0          SET IT SO\n         B     RESHOW\n*\n         TITLE 'PROCESS  FIND-PREVIOUS SPECIFICATION'\n*\nTOGGLEP  DS    0H\n*\n         MVI   NEXTFLAG,1          SET IT SO\n         B     RESHOW\n*\n         TITLE 'PROCESS  HEX  COMMAND'\n*\n***********************************************************************\n*\n*   IF HEX IS ON, SET IT OFF; IF OFF, SET IT ON\n*\n***********************************************************************\n*\nTOGGLEH  DS    0H\n*\n         CLI   HEXFLAG,0          FLAG OFF?\n         MVI   HEXFLAG,1          ASSUME SO\n         BE    RESHOW\n*\n         MVI   HEXFLAG,0          ELSE TURN IT OFF\n         B     RESHOW\n*\n         TITLE 'SMB - CONSTANTS'\n***********************************************************************\n*                                                                     *\n*        ISPF DISPLAY MODULE CONSTANTS                                *\n*                                                                     *\n***********************************************************************\n*\nCOLSDATA EQU   *\n         DC    C'----+----1'\n         DC    C'----+----2'\n         DC    C'----+----3'\n         DC    C'----+----4'\n         DC    C'----+----5'\n         DC    C'----+----6'\n         DC    C'----+----7'\n         DC    C'----+----',X'01'\n*\nINITLINE DC    X'01'\nSPACES   DC    CL132'  '\n*\nCAPSONLY DC    CL64' '\n         DC    CL10' ',C'\u00a2.<(+|&&',CL9' ',C'!$*);\u00ac-/'\n         DC    CL9' ',C',%_>?',CL10' ',C':#@''=\"'\n         DC    CL16' ABCDEFGHI      '\n         DC    CL16' JKLMNOPQR      '\n         DC    CL16'  STUVWXYZ      '\n         DC    CL16'                '\n         DC    CL16' ABCDEFGHI      '\n         DC    CL16' JKLMNOPQR      '\n         DC    CL16'  STUVWXYZ      '\n         DC    CL16'0123456789      '\n*\nASISTRT  DS    0H\n         DC    CL64' '\n         DC    CL10' ',C'\u00a2.<(+|&&',CL9' ',C'!$*);\u00ac-/'\n         DC    CL9' ',C',%_>?',CL10' ',C':#@''=\"'\n         DC    XL10'40818283848586878889',CL6' {\u00f0(+ '\n         DC    XL10'40919293949596979899',CL6' }\u00b0)\u00c6\u20ac'\n         DC    XL10'A0A1A2A3A4A5A6A7A8A9',CL6' \u00bf\u00d0\u00dd\u00de\u00ae'\n         DC    XL10'B0B1B2B3B4B5B6B7B8B9',CL6' ]\u00af\u00a8\u00b4\u00b5'\n         DC    CL16' ABCDEFGHI      '\n         DC    CL16' JKLMNOPQR      '\n         DC    CL16'  STUVWXYZ      '\n         DC    CL16'0123456789      '\n*\nLOWTRT   DS    0H\n         DC    CL16' '          DELETE INTENS LOW (01) AND HIGH (02)\n         DC    CL48' '\n         DC    CL10' ',C'\u00a2.<(+|&&',CL9' ',C'!$*);\u00ac-/'\n         DC    CL9' ',C',%_>?',CL10' ',C':#@''=\"'\n         DC    XL10'40818283848586878889',CL6' {\u00f0(+ '\n         DC    XL10'40919293949596979899',CL6' }\u00b0)\u00c6\u20ac'\n         DC    XL10'A0A1A2A3A4A5A6A7A8A9',CL6' \u00bf\u00d0\u00dd\u00de\u00ae'\n         DC    XL10'B0B1B2B3B4B5B6B7B8B9',CL6' ]\u00af\u00a8\u00b4\u00b5'\n         DC    CL16' ABCDEFGHI      '\n         DC    CL16' JKLMNOPQR      '\n         DC    CL16'  STUVWXYZ      '\n         DC    CL16'0123456789      '\n*\nHEXTRT   DS    0H\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'000A0B0C0D0E0F000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'000A0B0C0D0E0F000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'00000000000000000000000000000000'\n         DC    XL16'00010203040506070809000000000000'\n*\nNUMONLY  DS    0H\n         DC    240C'0'\n         DC    CL16'0123456789000000'\n*\nGETMLENG DC    A(WORKLEN)\n*\n         LTORG\nWORKAREA DSECT\n         DS    18F\nISPARMS  DS    10F\nAREATYP  DS    CL8\nCOLS     DS    F\nHL1COLS  DS    F\nROWS     DS    F\nTLROW    DS    F\nTLCOL    DS    F\nSMBCMD   DS    CL40\nZVERB    DS    CL8\nZSCROLLA DS    CL4\nZSCROLLN DS    F\nOLDROWS  DS    F\nOLDCOLS  DS    F\n*\nPFSCRL   DS    H\nSAVE1    DS    F\nSAVE15   DS    F\nSAVE5    DS    F\nBROFPTR  DS    F\nFINDPTR  DS    F\nFINDOFF  DS    F\nBROFADDR DS    F\nBROFOFFS DS    F\nBROFLENG DS    F\n*\nISPFWORK DS    F\nISPFSIZE DS    F\nISPFNUMB DS    F\n*\nFUPAMT   DS    F\n*\nDWORD    DS    D\nOFFSET   DS    F\n*\nCOLSFLAG DS    X\nHEXFLAG  DS    X\nNEXTFLAG DS    X\n*\n*\n*                   PARAMETERS FROM CALLING PROGRAM\n*\nPARMS    DS    0F\nSMBSTART DS    F\nSMBNUMB  DS    F\nSMBLRECL DS    F\nBRADDR   DS    F\nBRNUMLN  DS    F\nBRLINELN DS    F\nBRLAST   DS    F\nU4       DC    F'4'\n*\n*                   SAVE AREAS FOR LINK REGISTER 7\n*\nDONE7    DS    F\nINIT7    DS    F\nBROWSE7  DS    F\n*\n*                   POINTERS FOR SCROLLING\n*\nTOPPTR   DS    F\nBOTPTR   DS    F\nSMBFIND  DS    CL80\nBROFCAPS DS    CL80\nBROFWORK DS    CL80\nBROFHEX  DS    CL24\n*\nPFKWORK  DS    CL255\nSMBTITLE DS    CL49\nSMBLN    DS    CL5\nSMBCL    DS    CL5\nFM       DS    CL2\nFC1      DS    CL3\nFC2      DS    CL3\nVL1      DS    CL3\nHL1      DS    CL3\n*\nENT1     DS    F\nENT2     DS    F\n*\nSMBDATA  DS    XL3280\n         DS    XL8\nWORKLEN  EQU   *-WORKAREA\n*\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  1ST BASE REG\nR13      EQU   13                  WORK AREA\nR14      EQU   14\nR15      EQU   15\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMB00": {"ttr": 16649, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "CBT353"}, "text": "SMB001   'STRING NOT FOUND'                   .ALARM=YES\n'THE \"FIND\" STRING WAS NOT FOUND FROM HERE TO THE END.\n\nSMB002   'STRING FOUND'                       .ALARM=YES\n'THE \"FIND\" STRING WAS FOUND IN THE TOP LINE.'\n\nSMB003   'INSUFFICIENT MEMORY'                .ALARM=YES\n'YOUR LOGON SIZE IS TOO SMALL. SOME/ALL DATA NOT DISPLAYED.'\n\nSMB004   'VARIABLE NOT DEFINED'               .ALARM=YES\n'A REQUIRED DIALOG VARIABLE IS NOT IN AN ACCESSABLE POOL.'\n\nSMB005   'SCROLL AMT NOT NUMERIC'             .ALARM=YES\n'VERTICAL AND HORIZONTAL SCROLL AMOUNTS MUST BE NUMERIC.'\n\nSMB006   'COL LIMITS NOT NUMERIC'             .ALARM=YES\n'LEFT AND RIGHT COLUMNS TO LIMIT FIND MUST BE NUMERIC.'\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SPFMACS": {"ttr": 16651, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x02\\x95\\x02\\x95\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 661, "newlines": 661, "modlines": 0, "user": "CBT353"}, "text": "         EJECT\n***********************************************************************\n*\n*  THIS IS A SET OF MACROS INTENDED TO REDUCE THE AMOUNT OF CODING\n*  REQUIRED FOR ISPF/PDF APPLICATIONS. THIS MEMBER SHOULD BE COPIED\n*  INTO YOUR PROGRAM.\n*\n*  MACROS INCLUDED ARE:\n*\n*   NAME        EXAMPLE\n*\n*  CONTROL      CONTROL  DISPLAY,SAVE\n*  DISPLAY      DISPLAY  PANEL-NAME,MESSAGE-NAME,CURSOR-FIELD\n*  PDFBROWS     PDFBROWS DSNAME,VOLSER\n*  PDFEDIT      PDFEDIT  DSNAME,VOLSER\n*  PQUERY       PQUERY   PLF2P2,ZDATA\n*  SELECT       SELECT   PANEL(ABC)\n*  SETMSG       SETMSG   MESSAGE-NAME\n*  TBADD        TBADD    TABLE-NAME\n*  TBBOTTOM     TBBOTTOM TABLE-NAME\n*  TBCLOSE      TBCLOSE  TABLE-NAME\n*  TBCREATE     TBCREATE TABLE-NAME,ENTRY1,ENTRY2,ENTRY3,ENTRY4\n*  TBDELETE     TBDELETE TABLE-NAME\n*  TBDISPL      TBDISPL  TABLE-NAME,PANEL-NAME,MESSAGE-NAME\n*  TBEND        TBEND    TABLE-NAME\n*  TBGET        TBGET    TABLE-NAME\n*  TBPUT        TBPUT    TABLE-NAME\n*  TBSAVE       TBSAVE   TABLE-NAME\n*  TBSKIP       TBSKIP   TABLE-NAME,AMTFLD\n*  TBTOP        TBTOP    TABLE-NAME\n*  TBVCLEAR     TBVCLEAR TABLE-NAME\n*  TLDSECT      TLDSECT\n*  VCOPY        VCOPY    FIELD-NAME,LENGTH,OUTPUT-FIELD,MODE\n*  VDEFINE      VDEFINE  FIELD-NAME,LENGTH\n*  VDELETE      VDELETE FIELD-NAME1,FIELD-NAME2,FIELD-NAME3,FIELD-NAME4\n*  VGET         VGET     FIELD-NAME\n*  VPUT         VPUT    FIELD-NAME1,FIELD-NAME2,FIELD-NAME3,FIELD-NAME4\n*  VREPLACE     VREPLACE VARIABLE-NAME,FULL-WORD-LENGTH,DATA-AREA\n*\n*\n*  NOTE THAT ALL SERVICE-NAMES AND VARIABLE NAMES ARE GENERATED AS\n*  LITERALS; THIS MAY AFFECT YOUR PLACEMENT OF \"LTORG\" STATEMENTS.\n*\n*\n*  NOTE ALSO THAT THE \"CALL\" MACRO EXPANSION INCLUDES \"MF=(E,ISPARMS)\",\n*  SO YOU MUST HAVE ISPARMS DEFINED AS A SET OF FULL-WORDS IN YOUR PGM.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*  CONTROL      UP TO 4 PARAMETERS ARE ALLOWED\n*\n***********************************************************************\n         MACRO\n&NAME    CONTROL &CTL1,&CTL2,&CTL3,&CTL4\n         AIF   ('&CTL4' EQ '').TCTL3\n         CALL  ISPLINK,                                                X\n               (=CL8'CONTROL',                                         X\n               =CL8'&CTL1',=CL8'&CTL2',=CL8'&CTL3',=CL8'&CTL4'),       X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TCTL3  ANOP\n         AIF   ('&CTL3' EQ '').TCTL2\n         CALL  ISPLINK,                                                X\n               (=CL8'CONTROL',                                         X\n               =CL8'&CTL1',=CL8'&CTL2',=CL8'&CTL3'),                   X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TCTL2  ANOP\n         AIF   ('&CTL2' EQ '').TCTL1\n         CALL  ISPLINK,                                                X\n               (=CL8'CONTROL',                                         X\n               =CL8'&CTL1',=CL8'&CTL2'),                               X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TCTL1  ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'CONTROL',                                         X\n               =CL8'&CTL1'),                                           X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  DISPLAY      THE FIRST PARAMETER IS PANEL-NAME. OPTIONAL PARAMETERS\n*               ARE MESSAGE-NAME AND CURSOR FIELD-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    DISPLAY &DPNL,&DMSG,&DCURS,&ENDKEY=NONE\n         AIF   ('&DCURS' EQ '').NOCURS\n         CALL  ISPLINK,                                                X\n               (=CL8'DISPLAY',                                         X\n               =CL8'&DPNL',=CL8'&DMSG',=CL8'&DCURS'),                  X\n               VL,MF=(E,ISPARMS)\n         AGO   .PF3\n.NOCURS ANOP\n         AIF   ('&DMSG' EQ '').NOMSG\n         CALL  ISPLINK,                                                X\n               (=CL8'DISPLAY',                                         X\n               =CL8'&DPNL',=CL8'&DMSG'),                               X\n               VL,MF=(E,ISPARMS)\n         AGO   .PF3\n.NOMSG  ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'DISPLAY',                                         X\n               =CL8'&DPNL'),                                           X\n               VL,MF=(E,ISPARMS)\n.PF3    ANOP\n         AIF   ('&ENDKEY' EQ 'NONE').ZZZ\n         LA    14,8       END KEY?\n         CR    15,14      END KEY?\n         BE    &ENDKEY\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  PDFBROWS     PARAMETERS ARE DSNAME AND VOLSER\n*\n***********************************************************************\n         MACRO\n&NAME    PDFBROWS &BDSN,&BVOL\n         AIF   ('&BVOL' EQ '').NOVOL\n         CALL  ISPLINK,                                                X\n               (=CL8'BROWSE',                                          X\n               &BDSN,&BVOL),                                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.NOVOL  ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'BROWSE',                                          X\n               &BDSN),                                                 X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  PDFEDIT      PARAMETERS ARE DSNAME AND VOLSER\n*\n***********************************************************************\n         MACRO\n&NAME    PDFEDIT &EDSN,&EVOL\n         AIF   ('&EVOL' EQ '').NOVOL\n         CALL  ISPLINK,                                                X\n               (=CL8'EDIT',                                            X\n               &EDSN,&EVOL),                                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.NOVOL  ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'EDIT',                                            X\n               &EDSN),                                                 X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  PQUERY       PARAMETERS ARE :\n*\n*               1. PANEL-NAME\n*               2. AREA-NAME\n* \"AREATYP\"     3. VARIABLE-NAME THAT WILL BE SET TO DYNAMIC OR GRAPHIC\n* \"COLS\"        4. VARIABLE-NAME THAT WILL BE SET TO AREA-WIDTH (COLS)\n* \"ROWS\"        5. VARIABLE-NAME THAT WILL BE SET TO AREA-LENGTH (ROWS)\n* \"TLROW\"       6. VARIABLE-NAME THAT WILL BE SET TO TOP LEFT ROW NUM\n* \"TLCOL\"       7. VARIABLE-NAME THAT WILL BE SET TO TOP LEFT COL NUM\n*\n*\n* BEFORE ISSUING \"PQUERY\", VDEFINES MUST BE DONE FOR 3 THROUGH 7.\n*\n*\n***********************************************************************\n         MACRO\n&NAME    PQUERY  &QPNL,&QAREA\n         CALL  ISPLINK,                                                X\n               (=CL8'PQUERY',                                          X\n               =CL8'&QPNL',=CL8'&QAREA',=CL8'AREATYP',                 X\n               =CL8'COLS',=CL8'ROWS',=CL8'TLROW',=CL8'TLCOL'),         X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  SELECT       UP TO 3 PARAMETERS\n*\n*\n***********************************************************************\n         MACRO\n&NAME    SELECT  &SELDAT1,&SELDAT2,&SELDAT3\n         CALL  ISPLINK,                                                X\n               (=CL8'SELECT',                                          X\n               =F'40',                                                 X\n               =CL40'&SELDAT1 &SELDAT2 &SELDAT3             '),        X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  SETMSG       THE ONLY PARAMETER IS MESSAGE-NAME\n*\n***********************************************************************\n         MACRO\n&NAME    SETMSG &MSG\n         CALL  ISPLINK,                                                X\n               (=CL8'SETMSG',                                          X\n               =CL8'&MSG'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBADD        THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBADD &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBADD',                                           X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBBOTTOM     THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBBOTTOM &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBBOTTOM',                                        X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBCLOSE      THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBCLOSE &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBCLOSE',                                         X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBCLOSE      THE FIRST PARAMETER IS TABLE-NAME, FOLLOWED BY 1 TO 4\n*               VARIABLE NAMES. THE NAME LIST IS GENERATED AS A LITERAL\n*               WITH THE NAMES ENCLOSED IN PARENTHESES.\n*\n***********************************************************************\n         MACRO\n&NAME    TBCREATE &TABC,&EN1,&EN2,&EN3,&EN4,&KEY=()\n         AIF   ('&EN4' EQ '').TRY3\n         CALL  ISPLINK,                                                X\n               (=CL8'TBCREATE',=CL8'&TABC',                            X\n               =C'&KEY',                                               X\n               =C'(&EN1. &EN2. &EN3. &EN4.)',                          X\n               =CL8'NOWRITE',=CL8'REPLACE'),                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY3   ANOP\n         AIF   ('&EN3' EQ '').TRY2\n         CALL  ISPLINK,                                                X\n               (=CL8'TBCREATE',=CL8'&TABC',                            X\n               =C'&KEY',                                               X\n               =C'(&EN1. &EN2. &EN3.)',                                X\n               =CL8'NOWRITE',=CL8'REPLACE'),                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY2   ANOP\n         AIF   ('&EN2' EQ '').TRY1\n         CALL  ISPLINK,                                                X\n               (=CL8'TBCREATE',=CL8'&TABC',                            X\n               =C'&KEY',                                               X\n               =C'(&EN1. &EN2.)',                                      X\n               =CL8'NOWRITE',=CL8'REPLACE'),                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY1   ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'TBCREATE',=CL8'&TABC',                            X\n               =C'&KEY',                                               X\n               =C'(&EN1.)',                                            X\n               =CL8'NOWRITE',=CL8'REPLACE'),                           X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBDELETE     THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBDELETE &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBDELETE',                                        X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBDISPL      THE FIRST PARAMETER IS TABLE-NAME. OPTIONAL PARAMETERS\n*               ARE PANEL-NAME AND MESSAGE-NUMBER.\n*\n***********************************************************************\n         MACRO\n&NAME    TBDISPL &TAB,&PAN,&MSG,&ENDKEY=NONE\n         AIF   ('&PAN' EQ '').NOPAN\n         AIF   ('&MSG' EQ '').CCC\n.BBB     ANOP\n         CALL  ISPLINK,(=CL8'TBDISPL',                                 X\n               =CL8'&TAB',=CL8'&PAN',=CL8'&MSG'),                      X\n               VL,MF=(E,ISPARMS)\n         AGO   .XXX\n.CCC     ANOP\n         CALL  ISPLINK,(=CL8'TBDISPL',=CL8'&TAB',=CL8'&PAN'),          X\n               VL,MF=(E,ISPARMS)\n         AGO   .XXX\n.NOPAN   ANOP\n         CALL  ISPLINK,(=CL8'TBDISPL',=CL8'&TAB'),                     X\n               VL,MF=(E,ISPARMS)\n         AGO   .XXX\n.XXX     ANOP\n         AIF   ('&ENDKEY' EQ 'NONE').ZZZ\n         LA    14,8       END KEY?\n         CR    15,14      END KEY?\n         BE    &ENDKEY\n.ZZZ     ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBEND        THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBEND &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBEND',                                           X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBGET        THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBGET &TABG\n         CALL  ISPLINK,                                                X\n               (=CL8'TBGET',                                           X\n               =CL8'&TABG'),                                           X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBSAVE       THE ONLY PARAMETER IS TABLE-NAME\n*\n***********************************************************************\n         MACRO\n&NAME    TBPUT &TABP\n         CALL  ISPLINK,                                                X\n               (=CL8'TBPUT',                                           X\n               =CL8'&TABP'),                                           X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBSAVE       THE ONLY PARAMETER IS TABLE-NAME, THE SECOND IS\n*\n***********************************************************************\n         MACRO\n&NAME    TBSAVE &TABP\n         CALL  ISPLINK,                                                X\n               (=CL8'TBSAVE',                                          X\n               =CL8'&TABP'),                                           X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBSKIP       PARAMETERS ARE TABLE-NAME AND AMOUNT FIELD\n*\n***********************************************************************\n         MACRO\n&NAME    TBSKIP &TABSK,&AMTFLD\n         CALL  ISPLINK,                                                X\n               (=CL8'TBSKIP',                                          X\n               =CL8'&TABSK',&AMTFLD),                                  X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBTOP        THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBTOP &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBTOP',                                           X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TBVCLEAR     THE ONLY PARAMETER IS TABLE-NAME.\n*\n***********************************************************************\n         MACRO\n&NAME    TBVCLEAR &TAB\n         CALL  ISPLINK,                                                X\n               (=CL8'TBVCLEAR',                                        X\n               =CL8'&TAB'),                                            X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n***********************************************************************\n*\n*  TLDSECT      NO PARAMETERS, JUST PROVIDES THE ISPF/PDF TLD\n*\n***********************************************************************\n         MACRO\n         TLDSECT\n*                      ISPF/PDF  TERMINAL DATA CONTROL BLOCK\nTLDSECT  DSECT\n         DS    CL4        EYE-CATCHER \"TLD0\" (OR TLD1, ETC)\n         DS    4F\nTHISTLD  DS    F           THIS TLD POINTER\n         DS    7F\nSPFSUBPT DS    F           SPF SUBS POINTER\n         DS    10F\nSPFSCRN  DS    F           ADDRESS OF LOGICAL SCREEN\n         DS    11F\nSPFFUNC  DS    0XL8\nSPFFUNC1 DS    X\nSPFFUNC2 DS    X\nHELP     EQU   X'10'        PF1 = HELP\nRETURN   EQU   X'08'        PF3 = END\nSPFFUNC3 DS    X\nENDKEY   EQU   X'80'        PF3 = END\nSPFFUNC4 DS    X                   SCROLL KEY BYTE\nENTER    EQU   X'00'        ENTER\nFIND     EQU   X'08'        PF5 = FIND\nCHANGE   EQU   X'04'        PF6 = CHANGE\nUP       EQU   X'80'        PF7 = SCROLL UP\nDOWN     EQU   X'40'        PF8 = SCROLL DOWN\nLEFT     EQU   X'10'        PF10= SCROLL LEFT\nRIGHT    EQU   X'20'        PF11= SCROLL RIGHT\n         DS    XL4\nSPFENABL DS    XL8                 ENABLE FUNCTIONS BITS\n         DS    F\nSPFCURSR DS    F                   RELATIVE CURSOR POSITION\n         DS    2F\nSPFGTSIZ DS    F                   MAXIMUN SCREEN SIZE\nSPFMAXLN DS    F                   MAXIMUM NUMBER OF LINES ON TERMINAL\nSPFMXLEN DS    F                   MAXIMUN LINE WIDTH ON TERMINAL\nSPFDLINE DS    F                   CURRENT NUMBER OF LINES FOR SPFDISP\nSPFDLLEN DS    F                   CURRENT LINE WIDTH FOR SPFDISP\n         DS    2F\nSPFSPLIT DS    F                   MAX LINES IF IN SPLIT SCREEN\n         DS    11F\nSPFSCROL DS    F                   SCROLL INPUT BYTE POINTER\nSPFAPPID DS    CL8                 APP KEYWORD FOR SAVING\n         DS    3F\nSPFPREQ  DS    X                   REQUEST BITS\n         DS    3X\n         DS    X\nSPFPSTAT DS    X                   STATUS FLAGS\n         DS    2X\n         DS    19F\nSPFHELP  DS    CL8                 HELP MENU NAME\n*\n*                         FIELD ATTRIBUTE BYTES FOR SPF DISPLAY\n*\nATTRONON EQU   X'04'               OUTPUT NON-DISPLAY\nATTROLOW EQU   X'05'               OUTPUT LOW INTENSITY\nATTROHI  EQU   X'07'               OUTPUT HIGH INTENSITY\nATTRIAN  EQU   X'10'               INPUT ASIS NON-DISPLAY\nATTRIAL  EQU   X'11'               INPUT ASIS LOW INTENSITY\nATTRIAH  EQU   X'13'               INPUT ASIS HIGH INTENSITY\nATTRICN  EQU   X'1C'               INPUT CAPS (BLANK-PAD) NON-DISPLAY\nATTRICL  EQU   X'1D'               INPUT CAPS (BLANK-PAD) LOW INTENSITY\nATTRICH  EQU   X'1F'               INPUT CAPS (BLANK-PAD) HIGH INT\n*\nSPFSUBRS DSECT\n         DS    24F\nSPFDISPL DS    F                   ISPF/PDF DISPLAY ROUTINE\n         MEND\n         EJECT\n***********************************************************************\n*\n*  VCOPY        PARAMETERS ARE FIELD-NAME, LENGTH, OUTPUT FIELD-NAME,\n*               AND MODE.\n*\n***********************************************************************\n         MACRO\n&NAME    VCOPY &ZFLD,&LEN,&OFLD,&MODE\n         AIF   ('&MODE' EQ '').MOVE\n         CALL  ISPLINK,(=CL8'VCOPY',                                   X\n               =CL10'(&ZFLD)',&LEN,&OFLD,=CL8'&MODE'),                 X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.MOVE   ANOP\n         CALL  ISPLINK,(=CL8'VCOPY',                                   X\n               =CL10'(&ZFLD)',&LEN,&OFLD,=CL8'MOVE'),                  X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  VDEFINE      PARAMETERS ARE FIELD-NAME AND LENGTH. THE FIELD-NAME\n*               MUST MATCH THE NAME CODED ON A PANEL, AND MUST BE\n*               DEFINED AS A DATA AREA IN YOUR PROGRAM.\n*\n*               FOR EXAMPLE:\n*\n*                       VDEFINE ENTRYNM,8\n*                       .\n*                       .\n*                       .\n*                       .\n*               ENTRYNM DS    CL8\n*\n***********************************************************************\n         MACRO\n&NAME    VDEFINE &FLD,&LEN,&FMT=CHAR,&OPT=\n         AIF   ('&OPT' EQ '').NOOPT\n         CALL  ISPLINK,(=CL8'VDEFINE',                                 X\n               =CL10'(&FLD)',&FLD,=CL8'&FMT',=F'&LEN.',                X\n               =CL10'(&OPT)'),                                         X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.NOOPT  ANOP\n         CALL  ISPLINK,(=CL8'VDEFINE',                                 X\n               =CL10'(&FLD)',&FLD,=CL8'&FMT',=F'&LEN.'),               X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  VDELETE      PARAMETERS ARE 1 TO 4 VARIABLE-NAMES. THESE ARE\n*               GENERATED IN NAME-LIST FORMAT IN THE LITERAL POOL.\n*\n***********************************************************************\n         MACRO\n&NAME    VDELETE &VD1,&VD2,&VD3,&VD4\n         AIF   ('&VD4' EQ '').TRY3\n         CALL  ISPLINK,                                                X\n               (=CL8'VDELETE',                                         X\n               =C'(&VD1. &VD2. &VD3. &VD4.)'),                         X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY3   ANOP\n         AIF   ('&VD3' EQ '').TRY2\n         CALL  ISPLINK,                                                X\n               (=CL8'VDELETE',                                         X\n               =C'(&VD1. &VD2. &VD3.)'),                               X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY2   ANOP\n         AIF   ('&VD2' EQ '').TRY1\n         CALL  ISPLINK,                                                X\n               (=CL8'VDELETE',                                         X\n               =C'(&VD1. &VD2.)'),                                     X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY1   ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'VDELETE',                                         X\n               =C'(&VD1.)'),                                           X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  VGET         THE ONLY PARAMETER IS VARIABLE-NAME. THIS MUST HAVE\n*               BEEN PREVIOUSLY DEFINED BY A \"VDEFINE\" MACRO.\n*\n***********************************************************************\n         MACRO\n&NAME    VGET &FLD,&POOL=PROFILE\n         CALL  ISPLINK,(=CL8'VGET',                                    X\n               =CL10'(&FLD)',=CL8'&POOL'),                             X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  VPUT         PARAMETERS ARE 1 TO 4 VARIABLE-NAMES. THEY MUST HAVE\n*               BEEN PREVIOUSLY DEFINED BY A \"VDEFINE\" MACRO.\n*\n***********************************************************************\n         MACRO\n&NAME    VPUT  &VP1,&VP2,&VP3,&VP4,&POOL=PROFILE\n         AIF   ('&VP4' EQ '').TRY3\n         CALL  ISPLINK,                                                X\n               (=CL8'VPUT',                                            X\n               =C'(&VP1. &VP2. &VP3. &VP4.)',                          X\n               =CL8'&POOL'),                                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY3   ANOP\n         AIF   ('&VP3' EQ '').TRY2\n         CALL  ISPLINK,                                                X\n               (=CL8'VPUT',                                            X\n               =C'(&VP1. &VP2. &VP3.)',                                X\n               =CL8'&POOL'),                                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY2   ANOP\n         AIF   ('&VP2' EQ '').TRY1\n         CALL  ISPLINK,                                                X\n               (=CL8'VPUT',                                            X\n               =C'(&VP1. &VP2.)',                                      X\n               =CL8'&POOL'),                                           X\n               VL,MF=(E,ISPARMS)\n         AGO   .ZZZ\n.TRY1   ANOP\n         CALL  ISPLINK,                                                X\n               (=CL8'VPUT',                                            X\n               =C'(&VP1.)',                                            X\n               =CL8'&POOL'),                                           X\n               VL,MF=(E,ISPARMS)\n.ZZZ    ANOP\n         MEND\n         EJECT\n***********************************************************************\n*\n*  VREPLACE     THE FIRST PARAMETER IS VARIABLE-NAME, SECOND A FULLWORD\n*               LENGTH, THIRD THE DATA.\n*\n***********************************************************************\n         MACRO\n&NAME    VREPLACE &FLD,&LEN,&DATA\n         CALL  ISPLINK,(=CL8'VREPLACE',                                X\n               =CL10'(&FLD)',&LEN,&DATA),                              X\n               VL,MF=(E,ISPARMS)\n         MEND\n         EJECT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SRMMACS": {"ttr": 17153, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\xd6\\x00\\xd6\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 214, "newlines": 214, "modlines": 0, "user": "CBT353"}, "text": "         EJECT\n***********************************************************************\n*\n*  THIS IS A SET OF MACROS RELATING TO SRM, PAGING, SWAPPING, ETC.\n*\n*  MACROS INCLUDED ARE:\n*\n*   NAME        DESCRIPTION\n*\n*  IHAPCCA      PHYSICAL CONFIGURATION COMMUNICATION AREA\n*  ILRASMVT     AUXILIARY STORAGE MANAGER VECTOR TABLE\n*  ILRSART      SWAP ACTIVITY REFERENCE TABLE DSECT\n*  ILRPART      PAGING ACTIVITY REFERENCE TABLE DSECT\n*\n*\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*  IHAPCCA     THIS IS THE LAYOUT OF THE PCCA\n*\n***********************************************************************\n         MACRO\n         IHAPCCA\nPCCA     DSECT\nPCCAEYEC DS    CL4            EYECATCHER\nPCCACPID DS    XL12           CPU ID (CONTAINS SERIAL NUMBER)\nPCCACPUA DS    H'0'           PHYSICAL CPU ADDRESS\nPCCACAFM DS    H'0'           BIT MASK CORRESPONDING TO PHYSICAL CPU\n*                             ADDRESS\n         MEND\n         EJECT\n***********************************************************************\n*\n*  ILRASMVT    THIS IS THE LAYOUT OF THE ASM VECTOR TABLE\n*\n***********************************************************************\n         MACRO\n         ILRASMVT\n.*\n.* THIS IS THE ASM VECTOR TABLE\n.*\n.*\nASMVT    DSECT\nASMFLAG1 DS    XL1\nASMFLAG2 DS    XL1\nASMDSSFS DS    XL2\nASMSART  DS    XL4           POINTER TO SART\nASMPART  DS    XL4           POINTER TO PART\nASMGOS   DS    XL4\nASMTRPAG DS    XL4\nASMEREC  DS    XL4\nASMMSGBF DS    XL4\nASMCOMDS DS    XL1\nASMSECP  DS    XL2\nASMRSV5  DS    XL1\nASMCACHE DS    XL4\nASMHNUCA DS    XL4\nASMIORQR DS    XL4\nASMIORQC DS    XL4\nASMSWRQR DS    XL4\nASMSWRQC DS    XL4\nASMRSV6  DS    XL8\nASMPCCWQ DS    XL4\nASMRSVD  DS    XL4\nASMPCCWN DS    XL4\nASMBURST DS    XL4\nASMRSV4  DS    XL8\nASMPSRB  DS    XL4\nASMSWSRB DS    XL4\nASMPGSRB DS    XL4\nASMRSV7  DS    XL8\nASMBKSLT DS    XL4\nASMSLOTS DS    XL4\nASMVSC   DS    XL4\nASMNVSC  DS    XL4\nASMERRS  DS    XL4\nASMSLOTV DS    XL4\nASMLGVT  DS    XL4\nASMSTGXA DS    XL4\nASMCINV  DS    XL4\nASMLSAI  DS    XL8\nASMLSAIL DS    XL4\nASMLSAIH DS    XL4\nASMGOSQS DS    XL8\nASMGOSWT DS    XL4\nASMGOSWK DS    XL4\nASMREQCT DS    XL4\nASMTCBPT DS    XL4\nASMTMECB DS    XL4\nASMRLGRQ DS    XL4\nASMRLGWQ DS    XL4\nASMTASCB DS    XL4\nASMVSAMW DS    XL4\nASMVIO   DS    XL4\nASMVTLEN EQU   *-ASMVT\n         MEND\n         EJECT\n***********************************************************************\n*\n*  ILRSART     THIS IS THE LAYOUT OF THE SWAP ACTIVITY REFERENCE TABLE\n*              AND ITS ENTRIES.\n*\n***********************************************************************\n         MACRO\n         ILRSART\n.*\n.* THIS IS THE SWAP ACTIVITY REFERENCE TABLE DSECT.\n.*\n.*\nSART     DSECT\nSARTHDR  DS    0CL80\nSARID    DS    CL4           SET TO \"SART\"\nSARSIZE  DS    XL4           NUMBER OF SART ENTRIES\nSARUSE   DS    XL4           NUMBER OF SART ENTRIES IN USE\nSARBPFNX DS    XL4\nSARFXDNX DS    XL4\nSARMOVNX DS    XL4\nSARDSNL  DS    XL4           ADDRESS OF DSNAME LIST\nSARSDCT  DS    XL4           ADDRESS OF SWAP DEVICE TABLE\nSARSCCWQ DS    XL4\nSARSETCT DS    XL4\nSARWAITQ DS    0XL8\nSARWAITF DS    XL4\nSARWAITL DS    XL4\nSARSRBP  DS    XL4           ADDRESS OF SRB\nSARSRBCT DS    XL4\nSARSETSZ DS    XL4\n         DS    XL20\nSARTES   EQU   *\n*\n*  SART ENTRIES ARE CONTIGUOUS WITH THE SART\n*\nSARTE    DSECT\nSRENEXT  DS    XL4\nSRELOCK  DS    XL4\nSREFLG0  DS    XL1\nSREFLG   DS    XL1\nSRENN    DS    XL2     THIS SARTE NUMBER\nSRESCCW  DS    XL4\nSRETOTSL DS    XL4\nSREAVLSL DS    XL4\nSRERRCNT DS    XL4\nSREIORB  DS    XL4\nSRESAT   DS    XL4\nSRESDCTE DS    XL4\nSREEDB   DS    XL4\nSREUCB   DS    XL4\n*\nSARTELEN EQU   *-SARTE\n*\n         MEND\n         EJECT\n***********************************************************************\n*\n*  ILRPART     THIS IS THE LAYOUT OF THE PAGE ACTIVITY REFERENCE TABLE\n*              AND ITS ENTRIES.\n*\n***********************************************************************\n         MACRO\n         ILRPART\n.*\n.* THIS IS THE PAGING ACTIVITY REFERENCE TABLE DSECT.\n.*\n.*\nPART     DSECT\nPARTHDR  DS    0CL80\nPARTIDEN DS    CL4           SET TO \"PART\"\nPARTSIZE DS    XL4           NUMBER OF PART ENTRIES\nPARTEUSE DS    XL4           NUMBER IN USE\nPARTCIR0 DS    XL4\nPARTCIR1 DS    XL4\nPARTCIR2 DS    XL4\nPARTDSNL DS    XL4           ADDRESS OF DSNAME LIST\nPARTPCTQ DS    XL4\nPARTLCNT DS    XL2           COUNT OF ACTIVE LOCAL PAGE DATASETS\nPARTFLG1 DS    XL1\n         DS    XL1\nPARTNPCW DS    0XL8\nPARTNPCF DS    XL4\nPARTNPCL DS    XL4\nPARTRSV2 DS    XL36\nPARTES   EQU   *\n*\n*  PART ENTRIES ARE CONTIGUOUS WITH THE PART\n*\nPARTE    DSECT\nPAREPARE DS    XL4\nPARERSV3 DS    XL1\nPAREIORN DS    XL1\nPARERSV4 DS    XL2\nPARETYPE DS    XL1\nPAREFLG1 DS    XL1\nPARENN   DS    XL2      PART NUMBER FOR THIS PARTE\nPAREDEIB DS    XL4\nPARESZSL DS    XL4\nPARESLTA DS    XL4\nPARERRCT DS    XL4\nPAREIORB DS    XL4\nPAREPATP DS    XL4\nPAREPCTP DS    XL4\nPAREEDBP DS    XL4\nPAREUCBP DS    XL4\n*\nPARETIOR DS    XL4\nPARERSV5 DS    XL4\nPARERQTM DS    XL4\nPARELSLT DS    XL2\n         DS    XL2\n*\nPARTELEN EQU   *-PARTE\n*\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TCBUVTAM": {"ttr": 17158, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00+\\x00+\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n         TCBUVTAM &PFX=TCBU\n&PFX.VTAM DSECT\n&PFX.SAV1 DS   18F\n&PFX.SAV2 DS   18F\n&PFX.SAV3 DS   18F\n&PFX.SAV4 DS   18F\n&PFX.ESTA DS   18F\n&PFX.REGS DS   18F\n&PFX.SVCS DS   18F\n&PFX.APPL DS   CL8\n&PFX.KILL DS   CL4  SET TO \"KILL\" WHEN APPLICATION IS TO SHUTDOWN\n&PFX.ACBA DS   F\n&PFX.RPLA DS   F\n&PFX.NIBA DS   F\n&PFX.VGET DS   F    ADDRESS OF VTAM RECEIVE SYNC ROUTINE IN SPVSR\n&PFX.ECBE DS   F    VTAM RECEIVE/SEND ECB\n&PFX.VPUT DS   F    ADDRESS OF VTAM SEND ROUTINE IN SUPERVISOR\n&PFX.VSIZ DS   F    ADDRESS OF VTAM INQUIRE TO GET ROWS AND COLS\n&PFX.ROWS DS   XL1\n&PFX.COLS DS   XL1\n&PFX.GETL DS   H    LENGTH OF RECEIVE'D TEXT FROM TERMINAL\n&PFX.LU   DS   CL8                LU NAME\n          DS   0F\n&PFX.ECB1 DS   XL4  ADDRESS OF ECB SUPERVISOR WAITS ON\n&PFX.ECB2 DS   XL4  ADDRESS OF ECB TO WAIT ON FOR SUPERVISOR REQUESTS\n&PFX.WORD DS   XL4  ADDRESS OF FULLWORD IN SUPERVISOR TO STORE THINGS\n&PFX.CMD  DS   XL4  ADDRESS OF 80-BYTE COMMAND AREA IN SUPERVISOR\n&PFX.SRID DS   CL8                USERID\n&PFX.PASS DS   CL8                PASSWORD\n&PFX.RACF DS   CL8                RACF GROUP ID\n          DS   0F\n&PFX.RPL  DS   CL128              RPL\n          DS   0F\n&PFX.NIB  DS   CL128              NIB\n          DS   0F\n&PFX.BIND DS   CL80               INQUIRE WORK AREA\n&PFX.L1   EQU  *-&PFX.VTAM\n&PFX.L2   EQU  2048-&PFX.L1\n&PFX.FILL DS   XL(&PFX.L2)        WORK AREA\n&PFX.WORK DS   XL4096             WORK AREA\n&PFX.LENG EQU  *-&PFX.SAV1        LENGTH OF ENTIRE DSECT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TCBWORK": {"ttr": 17160, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00<\\x00<\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n         TCBWORK\nWORKAREA DSECT                OUR WORK AREA\nSAVEAREA DS    18F            OUR SAVE AREA\nDOUBLEWD EQU   SAVEAREA+16    PACKED DECIMAL WORK AREA\nNUMBER   EQU   DOUBLEWD+8     FINAL PRODUCT OF CONVERT\nJDFID    DS    CL4            SET TO 'JDF ' AFTER INITIALIZATION\nSTATJSAD DS    F\nSTCSALEN DS    F\nCOMMAND  DS    CL2\nJOBMSG   DS    CL18\nMSGJNAME DS    CL8     SAVE FOR MESSAGE\nUSRJNAME DS    CL8     SAVE FOR STATUS\nUSRJLENG DS    XL1     SAVE FOR STATUS\nGOTANYST DS    XL1     DID I FIND ANY MATCHES, Y=1, N=0\n*     THE ISP TABLE FLAGS INDICATE NO ACTIVE TABLE (0), OR ONE EXISTS\nATABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY ACTIVE\" TABLE\nDDTABFL  DS    XL1     DO I HAVE A CURRENT DD NAME TABLE\nTABAREA  DS    0CL80\nTABSEL   DS    CL1\nTABDATA  DS    CL79\nISPARMS  DS    9F\nCRP      DS    F\nJUNKJUNK DS    F\n         PRINT GEN\n*\nATACHPL  DS    5A             ATACHSRB'S PARAMETER LIST\nINFORET  DS    A              A(WORD TO RECEIVE A(RET AREA))\nENQLIST  DS    XL12\nDEQLIST  EQU   ENQLIST        DEQ PARAMETER LIST\nJQESHOLD DS    A              RETURN ADDRESS HOLD FOR OUTJQES\nSAVELINK DS    A              RETURN ADDRESS HOLD FOR SHOWINIT\nWXEQHOLD DS    A              RETURN ADDRESS HOLD FOR SETWXEQ\nJOESHOLD DS    A              RETURN ADDRESS HOLD FOR OUTJOES\nHOLDSLNK DS    A              RETURN ADDRESS HOLD FOR JQEHOLDS\nWHATISIT DS    CL3            JOB, STC, TSU\nSELCODE  DS    CL3            LINE SELECTION CODE\nMESSAGE  EQU   *              OUTPUT MESSAGE BUFFER\nJOEINIT  DS    C    0=JQEINIT, 1=JOEINIT\nMSGJBTYP DS    CL3            JOB OR TSU OR STC\nMSGJOB#  DS    CL5            JOB NUMBER\n         DS    C\nMSGJNME  DS    CL8            JOB NAME\n         DS    C\nMSGSTYPE DS    CL42           JOB STATUS\nMSGWXCLS EQU   MSGSTYPE+L'AWAITXEQ-2,1\nMSGWOUTC EQU   MSGSTYPE+L'AWAITOUT-2,1\nMSGOUTLC EQU   MSGSTYPE+L'AWAITOUT+1\nMSGQTYPE EQU   MSGSTYPE+L'EXECUTNG+1,1\nMSGDEV   EQU   MSGSTYPE+L'ON+1,8\n         DS    C\nMSGSPCST DS    CL9            SPECIAL STATUS\nLMESSAGE EQU   *-MESSAGE      LENGTH OF THE MESSAGE BUFFER\nSTATS    DS    X              STATUS BITS\nFILLEDRT EQU   X'80'          RETURN AREA FULL\nTABCOUNT DS    F              HOW MANY TABLE ENTRIES\nTABPOINT DS    F              NEXT AVAILABLE ENTRY\nLWRKAREA EQU   *-WORKAREA     WORK AREA LENGTH\nTABHOLD  DS    XL8004         HOLD 100 TABLE ENTRIES\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TIMEROU": {"ttr": 17162, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00-\\x00-\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n&LABEL   TIMEROU   &REG=1\n*        REG = THE REGISTER CONTAINING THE TIME IN BIN FORMAT\n*        THIS ROUTINE ALSO USES REGISTERS 1,2,3\n*        THIS ROUTINE CONVERTS THE TIME INTO HH:MM:SS\n&LABEL   DS    0H\n         CVD   &REG,WORKD0\n         CVD   &REG,WORKD1\n         DP    WORKD1(8),P100(2)\n         XC    WORKD2(8),WORKD2\n         MVC   WORKD2+2(6),WORKD1 GET NUMBER OF SECONDS IN WORKD2\n*\n         DP    WORKD2(8),P3600(3)\n         XC    WORKD3(8),WORKD3\n         MVC   WORKD3+5(3),WORKD2+5   NUMBER OF MINUTES IN WORKD3\n         UNPK  WORKC8(8),WORKD2(5)    HOURS\n         MVC   OUTTIME(2),WORKC8+6\n         OI    OUTTIME+1,X'F0'        MAKE PRINTABLE\n         MVI   OUTTIME+2,C':'\n*\n         DP    WORKD3(8),P60(2)\n         UNPK  WORKC8(8),WORKD3(6)    NUMBER OF MINUTES\n         MVC   OUTTIME+3(2),WORKC8+6  NUMBER OF MINUTES\n         OI    OUTTIME+4,X'F0'        MAKE PRINTABLE\n         MVI   OUTTIME+5,C':'\n*\n         UNPK  WORKC8(8),WORKD3+6(2)  NUMBER OF SECONDS\n         MVC   OUTTIME+6(2),WORKC8+6\n         OI    OUTTIME+7,X'F0'        MAKE PRINTABLE\n         LA    &REG,OUTTIME\n         B     TIMEEND\n*\nF0       DC    F'0'\nP100     DC    PL2'+100'\nP60      DC    PL2'+60'\nP3600    DC    PL3'+3600'\n         EJECT\nWORKD0   DS    D\nWORKD1   DS    D\nWORKD2   DS    D\nWORKD3   DS    D\nWORKC8   DS    CL8\nOUTTIME  DS    CL9\nTIMEEND  DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VDF": {"ttr": 17164, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x03L\\x03L\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 844, "newlines": 844, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCVDF  JOB (X0041,QCC,ASQCC),'X-BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=99\n//* *****************************************************************\n//* *****************************************************************\n//*                                                               ***\n//* TECH.SERV.SOURCE(VDF)                                         ***\n//*                                                               ***\n//* *****************************************************************\n//* *****************************************************************\n//*\n//JOBLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR,\n//         UNIT=SYSDA,VOL=SER=MVSTGT\n//*\n//ASM1    EXEC PGM=IEV90,REGION=2048K,\n//        PARM='OBJECT,NODECK,TERM,XREF(SHORT)'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,\n//         UNIT=SYSDA,VOL=SER=MVSTGT\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR,\n//         UNIT=SYSDA,VOL=SER=MVSDLB\n//         DD  DSN=SYS2.MACLIB,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(5,5)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  *\nVDF       TITLE 'CHANGE LOG'\n***********************************************************************\n*                                                                     *\n* CHANGE LOG                                                          *\n*                                                                     *\n*  9/05/86 BRIAN COOK    IF RESERVED, INDICATE WHY IN DETAIL LINE.    *\n*                                                                     *\n*  4/21/86 BRIAN COOK    \"S\" OPTION FOR VTOC GIVES 3.4 ISPF SCREEN    *\n*                                                                     *\n*  7/16/85 BRIAN COOK    ADDED SIO COUNT DISPLAY                      *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n          TITLE 'VTOC DISPLAY FACILITY'\n          PRINT OFF\n          COPY  SPFMACS\n          PRINT ON\n          PRINT NOGEN\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*                    VTOC DISPLAY FACILITY (VDF)                      *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: DISPLAY ONLINE DISK VTOC'S AND DATASETS.                  *\n*                                                                     *\n*                                                                     *\n* FUNCTION: VDF IS DESIGNED TO OPERATE UNDER ISPF USING DISPLAY       *\n*           MANAGEMENT SERVICES. IT PROVIDES A DISPLAY OF THE         *\n*           ACTIVITY IN THE SYSTEM, SIMILAR TO RMF, BUT SINCE IT      *\n*           RUNS UNDER ISPF, IT CAN BE INVOKED WITH SPLIT-SCREEN.     *\n*                                                                     *\n*           VDF LOOKS AT VARIOUS MVS SP 1.3.0 CONTROL BLOCKS.         *\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCE: ISPLINK                                         *\n*                                                                     *\n*                                                                     *\n* MACROS USED: SAVE                                                   *\n*              ABEND                                                  *\n*              RETURN                                                 *\n*              GETMAIN                                                *\n*              STAX                                                   *\n*              ENQ                                                    *\n*              DEQ                                                    *\n*              TPUT                                                   *\n*              FREEMAIN                                               *\n*              $JQE                                                   *\n*              $JOE                                                   *\n*              CVT                                                    *\n*              CVTUSERS (USER)                                        *\n*              TCBWORK  (USER)                                        *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n* NOTE THE FOLLOWING ENTRY POINT LOGIC IS NON-STANDARD. IN PARTICULAR,\n*      IT WILL NOT WORK WITH CALLED PL/I PROGRAMS.\n*\n***********************************************************************\nVDF      CSECT\n         USING *,13,12,11,10\n         B     72(,15)\n         DC    17F'0'\n         STM   14,12,12(13)   SAVE CALLING PGM'S REGISTERS\n         LA    R2,0(,R15)     LOAD EPA IN R2 FOR WORK REGISTER\n         ST    R2,8(R13)      LINK SAVE AREAS\n         ST    R13,4(R2)      SAVE THE CALLER'S R13\n*\nSETBASES DS    0H\n         LR    R13,R2         SET SAVE AREA AND BASE 1\n         LR    R12,R2         SET\n         A     R12,L4096          BASE 2\n         LR    R11,R12        SET\n         A     R11,L4096          BASE 3\n         LR    R10,R11        SET\n         A     R10,L4096          BASE 4\n*\nINITFLDS DS    0H\n         MVI   ATABFL,C'0'    NO ACTIVE TABLE\n         MVI   TABAREA,C' '   CLEAR TAB ENTRY AREA\n         MVC   TABAREA+1(79),TABAREA\n         XC    ISPARMS(40),ISPARMS\n         MVC   VOLPARM(3),=C'DEF'\n*\nSHOWAGIN DS    0H\n         B     SHOWDASD    DISPLAY THE VTOC'S\n*\nSHOWDONE DS    0H\n*                                  DELETE THE TABLE VARIABLES\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (VDELETE,                                               X\n               VTOLINEP),                                              X\n               VL,MF=(E,ISPARMS)\n*\n*                                  DELETE THE TABLE VARIABLES\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (VDELETE,                                               X\n               VSLP),                                                  X\n               VL,MF=(E,ISPARMS)\n*\n*                                  DELETE THE TABLE ITSELF\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBEND,                                                 X\n               VDFTABLE),                                              X\n               VL,MF=(E,ISPARMS)\n         MVI   ATABFL,C'0'        NO ACTIVE TABLE\n*\n         L     R13,4(R13)     RESTORE THE CALLER'S R13\n         LM    14,12,12(13)   RETURN TO OUR CALLER\n         SR    15,15          SET RC=0\n         BR    14             AND RETURN\n*\nL4096    DC    F'4096'\n*\n         EJECT\nSHOWDASD DS    0H\n*\n         MVC   SELCODE(3),SPACES  SET SELECTION CODE TO SPACES\n*\n         CLI   ATABFL,C'0'        DO I HAVE AN ACTIVE TABLE?\n         BE    ANOTAB             NOPE\n*\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (VDELETE,                                               X\n               VTOLINEP),                                              X\n               VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (VDELETE,                                               X\n               VCMD),                                                  X\n               VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (VDELETE,                                               X\n               VSLP),                                                  X\n               VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBEND,                                                 X\n               VDFTABLE),                                              X\n               VL,MF=(E,ISPARMS)\n         MVI   ATABFL,C'0'        NO ACTIVE TABLE\nANOTAB   DS    0H\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (VDEFINE,                                               X\n               VTOLINEP,TABAREA,CHAR,L77),                             X\n               VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (VDEFINE,                                               X\n               VSLP,SELCODE,CHAR,L3),                                  X\n               VL,MF=(E,ISPARMS)\n*\n         VDEFINE ZDLVOL,6\n*\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (VDEFINE,                                               X\n               VCMD,CMDDATA,CHAR,L40),                                 X\n               VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBCREATE,                                              X\n               VDFTABLE,                                               X\n               NULLENT,                                                X\n               DANAMLST,                                               X\n               NOWRITE),                                               X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBVCLEAR,                                              X\n               VDFTABLE),                                              X\n               VL,MF=(E,ISPARMS)\n         MVI   ATABFL,C'1'        AN ACTIVE TABLE\n*\n*\nCHECKUCB DS    0H\n*\n*    GET INFORMATION FROM UCB.\n*                                      SETUP FOR UCBSCAN SERVICE\n         USING PSA,0\n*\n         XC    WORKAREA,WORKAREA       CLEAR REQUIRED WORK AREA\n         MVI   DEVCLASS,UCB3DACC       INDICATE DASD UCB SEARCH ONLY\n*\n         OI    PARMUCB,X'80'           INDICATE END OF PARMLIST\n*\nSEARCH   DS    0H\n*\n*                              INTERFACE:\n*                                 R1 = ADDRESS OF PARMLIST\n*                                 R13= ADDRESS OF AN 18-WORD SAVE AREA\n*                                 R14= RETURN ADDRESS\n*                                 R15= SCAN SERVICE ENTRY POINT ADDRESS\n*\n         L     R1,FLCCVT               GET CVTADDRESS\n         USING CVTMAP,1                SETUP ADDRESSABILITY FOR CVT\n*\n         L     R15,CVTUCBSC           GET SCAN SERVICE ADDRESS-IOSVSUCB\n         DROP  1\n         LA    R1,PARMLIST             PUT PARMLIST IN REGISTER 1\n         BALR  R14,R15                GO TO SCAN SERVICE ROUTINE\n*\n*\n         LTR   R15,R15                 HAS A UCB BEEN RETURNED?\n         BNZ   SHOWVTAB                NO, END OF DEVICE CLASS SEARCH\n*\n         B     GOTUCB                  YES, GO PROCESS\n*\nPARMLIST DS    0F                   PARMLIST MAPPING FOR SCAN SERVICE\n*\nPARMWA   DC    A(WORKAREA)          ADDRESS OF 100 BYTE WORKAREA\nPARMDEVT DC    A(DEVCLASS)          ADDRESS OF BYTE CONTAINING DEVICE\nPARMUCB  DC    A(ADDRUCB)           ADDRESS OF WORD CONTAINING UCB ADDR\n*                                   TYPE TO BE SEARCHED.\n*\nDEVCLASS DS    CL1                  BYTE USED FOR DEVICE CLASS TO BE\n*                                   SEARCHED\nADDRUCB  DS    F                    WORD IN WHICH UCB SCAN WILL PLACE\n*                                   THE ADDR OF UCBS.\n         DS    0D                   THE WORKAREA FOR SCAN SERVICE MUST\n*                                   BE ON A DOUBLE WORD BOUNDARY\nWORKAREA DS    CL100\n*\nENDUCB   DS    0H\n*\n*        IHAPSA\n*        IEFUCBOB  LIST=NO\n*        CVT    DSECT=YES,LIST=NO\n*\n         EJECT\n*\n         TITLE 'EXTRACT UCB INFORMATION'\n*\nGOTUCB   DS    0H\n*\n** FOLLOWING UCB ADDRESABILITY LOGIC IS USED FOR SP1\n*\n*        L     R8,ADDRUCB              GET UCB ADDRESS THAT SCAN\n*        USING UCBCMSEG,8              SETUP ADDRESSABILITY TO  UCB\n*\n** FOLLOWING UCB ADDRESABILITY LOGIC IS USED FOR XA\n*\n         L     R8,ADDRUCB              GET UCB ADDRESS THAT SCAN\n         LA    R1,UCBPRFX\n         SR    R8,R1\n         USING UCBBGN,8                SETUP ADDRESSABILITY TO  UCB\n*\n         CLC   VOLPARM(3),=C'OFF'           INCLUDE OFFLINE?\n         BE    USEUCB\n*\n         TM    UCBSTAT,UCBONLI              ONLINE?\n         BNO   SEARCH                       NO, IGNORE DEVICE\n         CLC   UCBTBYT3(2),=X'2005'         DATA CELL?\n         BE    SEARCH                       IF SO SKIP IT\n         TM    UCBVOLI,X'FF'                ANY VOLUME MOUNTED?\n         BZ    SEARCH                       NO, IGNORE IT\n*\n         CLC   VOLPARM(3),=C'DEF'           DEFAULT?\n         BE    DEFTST\n*\n         CLC   VOLPARM(3),=C'ALL'           SHOW ALL?\n         BE    USEUCB\n*\n         CLC   VOLPARM(3),UCBVOLI           THIS ONE SELECTED\n         BE    USEUCB\n*\n         CLC   VOLPARM(3),=C'SYS'           SYSTEM PACK\n         BNE   SEARCH\n*\n         CLC   UCBVOLI(3),=C'TST'           SYS  PACK\n         BE    USEUCB\n         CLC   UCBVOLI(3),=C'MVS'           SYS  PACK\n         BE    USEUCB\n         CLC   UCBVOLI(3),=C'SPO'           SYS  PACK\n         BE    USEUCB\n*\n         B     SEARCH\n*\nDEFTST   DS    0H\n         CLC   UCBVOLI(2),=C'VM'            VM PACK?\n         BE    SEARCH\n*\n         CLC   UCBVOLI(5),=C'SPARE'         SPARE PACK?\n         BE    SEARCH\n*\nUSEUCB   DS    0H\n*\n*        ICM   R1,15,UCBEXTPT               POINT TO UCB EXTENSION\n*        USING UCBCMEXT,1\n*        MVC   SIOCOUNT+2(2),UCBMFCNT       COPY SIO COUNT\n*        DROP  1\n*\n         MVC   ZDLVOL,UCBVOLI               PRINT VOLUME NAME\n         MVC   UNITADDR,UCBNAME             GET UNIT ADDRESS\n*\n         MVC   UNITTYPE(4),=C'3350'\n         CLI   UCBUNTYP,X'0B'     IS IT 3350\n         BE    TSTACT             YUP\n*\n         MVC   UNITTYPE(4),=C'3380'\n         CLI   UCBUNTYP,X'0E'     IS IT 3380\n         BE    TSTACT             YUP\n*\n         MVC   UNITTYPE(4),=C'3330'\n         CLI   UCBUNTYP,X'09'     IS IT 3330\n         BE    TSTACT             YUP\n*\n         MVC   UNITTYPE(4),=C'3331'\n         CLI   UCBUNTYP,X'0D'     IS IT 3330 MOD 11\n         BE    TSTACT             YUP\n*\n         MVC   UNITTYPE(4),=C'????'\nTSTACT   DS    0H\n*\n         MVC   USTATUS(4),=C'OFFL'\n         TM    UCBVOLI,X'FF'                ANY VOLUME MOUNTED?\n         BZ    ADD1LINE                     NO  JUST DISPLAY IT\n*\n         MVC   USTATUS(4),=C'ACT '\n*\n         TM    UCBSTAT,UCBALOC    IS IT ALLOCATED\n         BO    TSTTYPE            YUP\n*\n         MVC   USTATUS(4),=C'RESV'\n*\n         TM    UCBSTAT,UCBRESV    IS IT RESERVED\n         BO    TSTTYPE            YUP\n*\n         MVC   USTATUS(4),=C'OFFP'\n*\n         TM    UCBSTAT,UCBUNLD    IS IT OFFLINE-PENDING\n         BO    TSTTYPE            YUP\n*\n         MVC   USTATUS(4),=C'ONLN'\n*\nTSTTYPE  DS    0H\n         MVC   USAGE(4),=C'PRIV'\n*\n         TM    UCBSTAB,UCBBPRV    IS IT A PRIVATE VOLUME\n         BO    SETUSERS           YUP\n*\n         MVC   USAGE(4),=C'STOR'\n*\n         TM    UCBSTAB,UCBBSTR    IS IT A STORAGE VOLUME\n         BO    SETUSERS           YUP\n*\n         MVC   USAGE(4),=C'PUB '\n*\nSETUSERS DS    0H\n         SR    R1,R1                        CLEAR A REG\n         IC    R1,UCBUSER                   GET USE COUNT\n         CVD   R1,DBLW                      CONVERT TO PRINT\n         UNPK  USECNT,DBLW+6(2)             PLACE IT ON THE LINE\n         OI    USECNT+2,X'F0'               FIX SIGN BITS\n*\n** FOLLOWING FLAGS ARE USED FOR SP1\n*\n*        TM    UCBFLA,UCBSAP      IS IT IN USE BY STANDALONE PROCESS\n*        BO    SETRSVD            YES, SET MSG  AND SKIP LSPACE\n*        TM    UCBFLB,UCBRESVH    IS IT RESERVED\n*        BO    SETRSVD            YES, SET MSG  AND SKIP LSPACE\n*\n** FOLLOWING FLAGS ARE USED FOR XA\n*\n         TM    UCBIOSF1,UCBRESVH  IS IT RESERVED\n         BO    SETRSVD            YES, SET MSG  AND SKIP LSPACE\n         TM    UCBIOSF1,UCBRESVP  IS A RESERVE PENDING\n         BO    SETRSVD            YES, SET MSG  AND SKIP LSPACE\n         TM    UCBIOSF1,UCBRRP    IS A RESERVE/RELEASE PENDING\n         BO    SETRSVD            YES, SET MSG  AND SKIP LSPACE\n*        TM    UCBIOSF1,UCBDPVAL  IS PATH VALIDATION REQUIRED\n*        BO    SETRSVD            YES, SET MSG  AND SKIP LSPACE\n         TM    UCBFL5,UCBNALOC    IS IT IN USE BY ICKDSF\n         BZ    DOLSPACE           NO, GO DO LSPACE\n*\nSETRSVD  DS    0H\n         LA    R1,TOTCYL\n         MVI   0(R1),3            HIGH-LIGHT\n         LA    R1,1(,R1)\n*\n** FOLLOWING FLAGS ARE DISPLAYED FOR SP1\n*\n*        TM    UCBFLA,UCBSAP      IS IT IN USE BY STANDALONE PROCESS\n*        BZ    *+14                NO\n*        MVC   0(3,R1),=C'SAP'    SET MSG\n*        LA    R1,4(,R1)\n*        TM    UCBFLB,UCBRESVH    IS IT RESERVED\n*        BZ    ADD1LINE           NO\n*        MVC   0(5,R1),=C'RESVH'  SET MSG\n*        LA    R1,6(,R1)\n*        B     ADD1LINE           NO\n*\n** FOLLOWING FLAGS ARE DISPLAYED FOR XA\n*\n         TM    UCBIOSF1,UCBRESVH  IS IT RESERVED\n         BZ    *+14               NO\n         MVC   0(5,R1),=C'RESVH'  SET MSG\n         LA    R1,6(,R1)\n         TM    UCBIOSF1,UCBRESVP  IS A RESERVE PENDING\n         BZ    *+14               NO\n         MVC   0(5,R1),=C'RESVP'  SET MSG\n         LA    R1,6(,R1)\n         TM    UCBIOSF1,UCBRRP    IS A RESERVE/RELEASE PENDING\n         BZ    *+14               NO\n         MVC   0(3,R1),=C'RRP'    SET MSG\n         LA    R1,4(,R1)\n         TM    UCBIOSF1,UCBDPVAL  IS PATH VALIDATION REQUIRED\n         BZ    *+14               NO\n         MVC   0(5,R1),=C'DPVAL'  SET MSG\n         LA    R1,6(,R1)\n         TM    UCBFL5,UCBNALOC    IS IT IN USE BY ICKDSF\n         BZ    ADD1LINE           NO\n         MVC   0(5,R1),=C'NALOC'  SET MSG\n         B     ADD1LINE\n*\n         TITLE 'EXTRACT SPACE INFORMATION USING LSPACE SVC'\nDOLSPACE DS    0H\n         LR    R0,R8                        POINT TO UCB\n         LA    R1,LSPACE                    MONITOR SPACE MESSAGE AREA\n*  R1 -> MONITOR SPACE MESSAGE AREA\n*  R0 -> UCB, HIGH ORDER BYTE INDICATES NO SMF RECORD (TYPE 19)\n         SVC   78                           GET SPACE INFO\n         LTR   R15,R15                      DID IT WORK?\n         BZ    SPCOK                        YES\n         B     SEARCH                       NOW GO ON\n*\n*  LSPACE RETURNS ITS INFORMATION IN THE FORM:\n*        SPACE=CCCC,TTTT,AAAA/EEEE,KKKK\n*  WHERE\n*        CCCC = TOTAL FREE CYLINDERS\n*        TTTT = TOTAL FREE TRACKS\n*        AAAA = TOTAL FREE AREAS\n*        EEEE = NUMBER OF CYLINDERS IN LARGEST FREE EXTENT\n*        KKKK = NUMBER OF TRACKS IN LARGEST FREE EXTENT\n*\nSPCOK    DS    0H\n         MVC   TOTCYL,CYLTOTAL+1            CYL (TOTAL)\n         MVC   TOTTRK,TRKTOTAL+1            TRK (TOTAL)\n         MVC   TOTAREA,AREATOTL+1           NUM (OF AREAS)\n         MVC   LARGECYL,CYLEXT+1            CYL (LARGEST)\n         MVC   LARGETRK,TRKEXT+1            TRK (LARGEST)\n*\n*        L     R15,SIOCOUNT                 UCB SIO COUNT\n*        CVD   R15,DBLW\n*        MVC   SIOS(6),EDIT6\n*        ED    SIOS,DBLW+5\n*\n*\n* PRTLINE IS FORMATTED WITH THE VOL DISPLAY LINE\n*\nADD1LINE DS    0H\n*\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (VPUT,                                                  X\n               DANAMLST),                                              X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBADD,                                                 X\n               VDFTABLE),                                              X\n               VL,MF=(E,ISPARMS)\n         MVI   TABAREA,C' '\n         MVC   TABAREA+1(79),TABAREA\n*\n         B     SEARCH                       NOW GO ON\n         TITLE 'VDF-SHOW VTOC TABLE'\n*\n***********************************************************************\n*\n*   NOW SHOW THE ISPPLIB FORMAT AND THE TABLE ON THE SCREEN\n*\n***********************************************************************\n*\n*\nSHOWVTAB DS    0H\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBTOP,                                                 X\n               VDFTABLE),                                              X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBDISPL,                                               X\n               VDFTABLE,                                               X\n               VDFDATAB),                                              X\n               VL,MF=(E,ISPARMS)\n*\n***********************************************************************\n*\n*   DETERMINE WHETHER ANYTHING WAS ENTERED ON THE SCREEN\n*\n***********************************************************************\n*\n         C     R15,FZEROS     COMMAND ENTERED/LINE MODIFIED??\n         BNE   SHOWDONE       NOPE\nGOTSTUFF DS    0H\n         MVC   SELSAVE(3),SELCODE    SAVE SEL CODE\n         OC    SELSAVE(3),SPACES   UPPER-CASE IT\n         MVC   SELCODE(3),SPACES  SET SELECTION CODE TO SPACES\n*\n         CLI   CMDDATA,C' '   IF NOT SPACES\n         BNE   GOTCMD         THEN A COMMAND WAS ENTERED\n*\n* IF THE CRP IS NOT ZERO, THEN A LINE SELECTION CODE MUST HAVE BEEN\n* ENTERED. I HAVE THE CURRENT LINE, SO EDIT THE SELECTION CODE.\n*\n         CLI   SELSAVE,C'S'   IS IT A \"SHOW VTOC\" REQUEST\n         BE    SHOWVTOC       GO DO IT\n*\n* ADD TESTS FOR OTHER LINE SELECTION CODES HERE\n*\n         B     SHOWAGIN       GO REPEAT THE DISPLAY\n         EJECT\nSHOWVTOC DS    0H\n*\n         VPUT  ZDLVOL\n         CONTROL DISPLAY,SAVE\n*\n         PRINT GEN\n         SELECT PGM(ISRUDL)\n         PRINT NOGEN\n*\n*        LA    R1,VTOCPARM\n*        LINK  EP=VDFVTOC\n*\n         CONTROL DISPLAY,RESTORE\n         CONTROL DISPLAY,REFRESH\n*\n         B     SHOWAGIN       GO REPEAT THE DISPLAY\n*\nAH0      DC    X'80',AL3(H0)\nH0       DC    H'0'\n         EJECT\n*\n*    ONLY COMMAND SUPPORTED IS \"REPEAT\"\n*\nGOTCMD   DS    0H\n         TR    CMDDATA,CAPSONLY  UPPER-CASE ALL INPUT\n*\n*  NOTE THE TR TABLE IS SET UP TO DELETE SEMI-COLONS, IN ORDER TO\n*       PREVENT COMMAND CONCATENATION.\n*\n         CLI   CMDDATA,C' '   IF COMMAND AREA IS SPACES\n         BE    SHOWAGIN       THEN A COMMAND WAS NOT ENTERED\n*\n         CLC   CMDDATA(2),=C'V='  IS IT VOLUME SELECTION?\n         BE    SETNVOL            RESET DEFAULT\n*\n         B     SHOWAGIN       GO REPEAT THE SCREEN\nSETNVOL  DS    0H\n         MVC   VOLPARM(3),CMDDATA+2\n*\n         B     SHOWAGIN       GO REPEAT THE SCREEN\n         EJECT\n         TITLE 'MISCELLANEOUS CONSTANTS'\n         PRINT NOGEN\n         LTORG\n*\n         DS    0F\nEPNAME   DC    CL8' '\nZEROFF   DC    X'000000FF'\nP1       DC    PL1'+1'\nP3ZERO   DC    PL3'+0'\nVDF7HOLD DS    F\nOUT7HOLD DS    F\n*\nVOLPARM  DC    CL3'   '\n*\nDIGITS3  DC    X'202020'\nTHREEPT  DC    X'2020204B'\nEDIT4    DC    X'40202120'\nEDIT6    DC    X'402020202121'\nEDIT8    DC    X'4020202020202120'\n*\nJOBN     DC    C'JOB'\nTSU      DC    C'TSU'\nSTC      DC    C'STC'\nCTAB     DS    0H\nISPLINK  DC    V(ISPLINK)\nVDFOPTP  DC    A(SELECTR)\n         DC    X'80',AL3(VDFOPT)\nSELECTR  DC    CL8'SELECT  '\nVDFOPT   DC    CL8'VDFOPT  '\nCMDDATA  DC    CL40'       '\n*\nL78      DC    F'78'\nFZEROS   DC    F'0'\nF8       DC    F'8'\nL3       DC    F'3'\nL77      DC    F'77'\nL40      DC    F'40'\n*\nSELCODE  DC    CL3' '\nSELSAVE  DC    CL3' '\n*\nH1       DC    H'1'\nH2       DC    H'2'\nH8       DC    H'8'\n*\nVTOCPARM DC    A(ZDLVOL)\n*\nTBADD    DC    C'TBADD    '\nTBCREATE DC    C'TBCREATE '\nTBDISPL  DC    C'TBDISPL  '\nTBEND    DC    C'TBEND    '\nTBGET    DC    C'TBGET    '\nTBQUERY  DC    C'TBQUERY  '\nTBSKIP   DC    C'TBSKIP   '\nTBTOP    DC    C'TBTOP    '\nTBVCLEAR DC    C'TBVCLEAR '\nVDEFINE  DC    C'VDEFINE  '\nVDELETE  DC    C'VDELETE  '\nVGET     DC    C'VGET     '\nVPUT     DC    C'VPUT     '\nVREPLACE DC    C'VREPLACE '\n*\nNOWRITE  DC    C'NOWRITE  '\n*\nNULLENT  DC    C'()'\n*\nDANAMLST DC    C'('             DISPLAY ACTIVE NAME LIST\nSEL      DC    C'VSLA     '     SELECTION CODE\nVTOLINE  DC    C'VTOLINE )'     JOB INFO\nVTOLINE2 DC    C'VTOLINE  '     JOB INFO\nVTOLINEP DC    C'(VTOLINE )'    JOB INFO\nVSLP     DC    C'(VSLA    )'    SELECTION CODE\nVCMD     DC    C'(VCMD    )'    SELECTION CODE\n*\nSPACES   DC    C'        '\nCZEROS   DC    CL8'00000000'\n*\nCHAR     DC    C'CHAR    '\n*\nVDFDATAB DC    C'VDFDATAB'\nVDFTABLE DC    C'VDFTABLE'\n*\n*\n         TITLE 'REGISTER EQUATES'\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         TITLE 'WORKING STORAGE AREAS'\nDOUBLEWD DS    D              PACKED DECIMAL WORK AREA\nTABADDRH DS    A              ADDRESS OF TABLE TO USE FOR OUTMSG\nDNMADDRH DS    A              ADDRESS OF NAMES TO USE FOR OUTMSG\n*\nISPARMS  DS    10F            PARM LIST FOR ISPLINK\n*\n*     THE ISP TABLE FLAGS INDICATE NO ACTIVE TABLE (0), OR ONE EXISTS\nATABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY ACTIVE\" TABLE\n*\n*\n         TITLE 'VDF-WORK AREAS      '\n         LTORG\n*\nDBLW     DS    D                           CVD WORK AREA\nSIOCOUNT DC    F'0'                        UCB SIO COUNT\n*\nCAPSONLY DC    CL64' '\n         DC    CL10' '\n         DC    C'\u00a2.<(+|&&'\n         DC    CL9' '\n         DC    C'!$*)'\n         DC    C' '             NOTE SEMICOLON CHANGED TO BLANK\n         DC    C'\u00ac-/'\n         DC    CL9' ',C',%_>?',CL10' ',C':#@''=\"'\n         DC    CL16' ABCDEFGHI      '\n         DC    CL16' JKLMNOPQR      '\n         DC    CL16'  STUVWXYZ      '\n         DC    CL16'                '\n         DC    CL16' ABCDEFGHI      '\n         DC    CL16' JKLMNOPQR      '\n         DC    CL16'  STUVWXYZ      '\n         DC    CL16'0123456789      '\n         TITLE 'VDF-LSPACE WORK AREA'\n*\nLSPACE   DS    0CL1\nSPACEMSG DS    CL6                          'SPACE='\nCYLTOTAL DS    CL4                          TOTAL FREE CYLINDERS\nCOMMA1   DS    CL1\nTRKTOTAL DS    CL4                          TOTAL FREE TRACKS\nCOMMA2   DS    CL1\nAREATOTL DS    CL4                          TOTAL FREE AREAS\nSLASH    DS    CL1\nCYLEXT   DS    CL4                          CYLS IN LARGEST FREE EXTENT\nCOMMA3   DS    CL1\nTRKEXT   DS    CL4                          TRKS IN LARGEST FREE EXTENT\n         DC   CL40' '\n         TITLE 'VDF-VTOC LINE FORMAT'\nVDFHEAD  DC    CL40' NAME  ADR CNT CYL TRK NUM CYL/TRK'\nTABAREA  DS    0CL77\nPRTLINE  DS   0CL1\nZDLVOL   DS   CL6                           VOLUME NAME\nDIRFFLG  DS   C                             DIRF FLAG\nUNITADDR DS   CL3                           UNIT ADDRESS\n         ORG  PRTLINE+11\n         DS   CL1\nUNITTYPE DS   CL4\n         DS   CL2\nUSTATUS  DS   CL4\n         DS   CL2\nUSAGE    DS   CL4\n         DS   CL3\nUSECNT   DS   CL3                           # OF CURRENT ALLOCATIONS\n         DS   CL3\nTOTCYL   DS   CL3                           TOTAL FREE CYLINDERS\n         DS   CL3\nTOTTRK   DS   CL3                           TOTAL FREE TRACKS\n         DS   CL3\nTOTAREA  DS   CL3                           TOTAL FREE AREAS\n         DS   CL4\nLARGECYL DS   CL3                           # CYLS IN LARGEST FREE EXT\n         DS   CL2\nLARGETRK DS   CL3                           # TRKS IN LARGEST FREE EXT\nSIOS     DS   CL6                           SIO COUNT\n         DS   XL400\n         EJECT\n*.....................................................................*\n*        MAPPING DSECT FOR ASCB\n*.....................................................................*\n         IHAASCB\n*.....................................................................*\n*        MAPPING DSECT FOR SRM USER CONTROL BLOCK\n*.....................................................................*\n         IRAOUCB\n*.....................................................................*\n*        MAPPING DSECT FOR DMDT (DOMAIN DESCRIPTOR TABLE)             *\n*.....................................................................*\n         SPACE\nDMDT     DSECT\nDMDTNO   DS    XL1             DOMAIN NUMBER\nDMDTLO   DS    XL1             MIN  MPL LEVEL\nDMDTHI   DS    XL1             MAX  MPL LEVEL\nDMDTWT   DS    XL1             WEIGHTING FACTOR\nDMDTMPLT DS    XL2             CURRENT MPL TARGET\nDMDTRUA  DS    XL2             AVE # OF READY USERS\nDMDTGOOU DS    XL2             CURRENT # USERS GOING OUT\nDMDTCMPL DS    XL2             CURRENT MPL\nDMDTOUTU DS    XL2             CURRENT # USERS ON OUT Q\nDMDTINCU DS    XL2             CURRENT # SWAPPABLE INCORE USERS\nDMDTRUC  DS    XL4             ACCUM FOR READY USER AVERAGE\nDMDTEND  DS    0X              END OF DMT\nDMDTLEN  EQU   *-DMDT\n         SPACE 2\n*\n* EQUATES....\n*\nRMCTDMDT EQU   X'B4'           POINTER TO DOMAIN TABLE\nRMCTDMNC EQU   X'BC'           COUNT OF NUMBER OF DOMAINS\nRMCTWMST EQU   X'18'           ADDRESS OF WLM SPEC TABLE\n         SPACE 2\n         PRINT GEN\n         TITLE 'COMMUNICATION VECTOR TABLE'\n         CVT   DSECT=YES,PREFIX=NO\n         TITLE 'UNIT CONTROL BLOCK'\n         IEFUCBOB LIST=YES,PREFIX=YES\n         TITLE 'DATA EXTENT BLOCK'\n         IEZDEB\n         TITLE 'FMT4 DSCB'\nDSCB4    DSECT\n         ORG   DSCB4+44                     GET PAST KEY (44X'04')\n         IECSDSL1 (4)\n         IHAPSA\n         END\n/*\n//LKED1    EXEC PGM=IEWL,PARM=(XREF,LET,LIST,TERM),\n//            COND=(2,LT,ASM1),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DISP=SHR,DSN=ISP.V2R2M0.ISPLOAD\n//SYSLMOD  DD   DISP=SHR,DSN=SYS2.CMDLIB\n//*YSLMOD  DD   DISP=SHR,DSN=ASQCC.TEST.STEPLIB\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n  NAME VDF(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VDF$": {"ttr": 17667, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\t\\x00\\t\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "CBT353"}, "text": "1\n        VTOC DISPLAY FACILITY (VDF) INSTALLATION\n\n 1. COPY VDFDATAB AND VDFHELP INTO YOUR ISPPLIB.\n\n 2. SUBMIT AN ASSEMBLY OF VDF. IT DOES NOT NEED TO GO INTO ANY SPECIAL\n    LIBRARY.\n\n 3. MODIFY AN EXISTING SPF SCREEN TO INVOKE THE VDF PROGRAM.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VDFDATAB": {"ttr": 17669, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  @  TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%-----------------     VTOC DISPLAY FACILITY (VDF) -----------------------------\n COMMAND ==>_VCMD                                               %SCROLL =>_AMT %\n%                                   NO OF FREE  FREE  FREE  LRGST FREE   SIO\n%SEL  VOLSER ADR  TYPE STATUS USAGE USERS CYLS  TRKS  EXTS    CYL  TRK COUNT\n)MODEL\n _Z  @Z\n)INIT\n .CURSOR=VCMD\n  &AMT=PAGE\n  &VCMD='    '\n  &VARS='(VSLA VTOLINE)'\n  .HELP=VDFHELP\n)END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VDFHELP": {"ttr": 17671, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "CBT353"}, "text": "%-----------------     VTOC Display Facility (VDF) -----------------------------\n%\n+  This VTOC display provides the information from the LOCATE SVC, which\n+ is formatted in a one-line-per-volume display.\n+\n+  The scope of the display can be limited by entering \"V=AAA\" on the\n+ command line, where \"AAA\" is the first 3 letters of the volser. Also,\n+ the display can be limited to system packs by entering \"V=SYS\"; this\n+ is an exception to the rule, above.\n+\n+  Entering%S+in the \"SEL\" column next to a pack invokes the ISPF Dataset\n+ List (Option 3.4), but I haven't figured out a way to prime the VOLSER.\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VIODSECT": {"ttr": 17673, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00<\\x00<\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n         VIODSECT &EQU=NO\n*\n         TITLE 'VSAMIO - SAVE AREA DSECT'\n*\n         AIF   ('&EQU' EQ 'NO').ZZZ\n*\nVIOACBSZ EQU   56 AREA FOR GENCB ACB\nVIORPLSZ EQU   96 AREA FOR GENCB RPL\n*\n.ZZZ    ANOP\n*\nVIODSECT DSECT\nVIOSAVE1 DS    18F\n*\nVIOSAVE2 DS    18F\n*\nVIOFUNC  DS    CL8\n*\nVIODDNAM DS    CL8\n*\nVIODSNAM DS    CL44\n*\nVIOLRECL DS    F\n*\nVIORECAD DS    F       ADDRESS OF RECORD RETRIEVED\n*\nVIOKEY   DS    CL100\n*\n*\n*\nVIOACBAD DS    F\n*\nVIORPLAD DS    F\n*\nVIOPRM99 DS    F\n*\nVIORB    DS    X               LENGTH = 20\n         DS    X               DSNAME ALLOCATION\n         DS    X               FLAGS1 = ALLOW OFFLINE UNITS\n         DS    X               REST OF FLAGS1\n         DS    F               RETURN CODES\n         DS    F               POINTER TO TEXT UNIT PARM LIST\n         DS    F               RESERVED\n         DS    F               FLAGS2\n*\nVIOTXTA1 DS    F\nVIOTXTA2 DS    F\nVIOTXTA3 DS    F\nVIOTXTDD DS    XL14\nVIOTXTDS DS    XL50\n*\nVIOACB   DS    XL(VIOACBSZ)    WORK AREA FOR GENCB ACB\nVIORPL   DS    XL(VIORPLSZ)    WORK AREA FOR GENCB RPL\n*\nVIOGWORK DS    16F             WORK AREA FOR MODCB RPL\n*\nVIOSIZE  EQU   *-VIODSECT      LENGTH OF WORKAREA REQUIRED\n*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VIOEQU": {"ttr": 17675, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "CBT353"}, "text": "         MACRO\n         VIOEQU\n*\n         TITLE 'VSAMIO - EQUATES'\n*\n*\n*\nVIOACBSZ EQU   56 AREA FOR GENCB ACB\nVIORPLSZ EQU   96 AREA FOR GENCB RPL\nVIOSIZ1  EQU   32 AREA FOR MODCB RPL\nVIOSIZ2  EQU   32 AREA FOR MODCB RPL\nVIOSIZ3  EQU   24 AREA FOR MODCB RPL\n*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XDF": {"ttr": 17677, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x05\\x17\\x05\\x17\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 1303, "newlines": 1303, "modlines": 0, "user": "CBT353"}, "text": "***********************************************************************\n*\n*  CHANGE LOG\n*\n*  9/12/86  BRIAN COOK    INCREASED AVAIL FRAME COUNT TO 5 POSITIONS\n*\n*  7/18/86  BRIAN COOK    REVISED FOR XA\n*\n*\n***********************************************************************\n         PRINT OFF\n         COPY SPFMACS\n         PRINT ON\n         PRINT NOGEN\n         EJECT\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*               EXECUTION DISPLAY FACILITY (XDF)                      *\n*                                                                     *\n*                                                                     *\n* ABSTRACT: DISPLAY STATUS OF JES2 JOBS, LOGONS, & STARTED TASKS.     *\n*                                                                     *\n*                                                                     *\n* FUNCTION: XDF IS DESIGNED TO OPERATE UNDER ISPF USING DISPLAY       *\n*           MANAGEMENT SERVICES. IT PROVIDES A DISPLAY OF THE         *\n*           ACTIVITY IN THE SYSTEM, SIMILAR TO RMF, BUT SINCE IT      *\n*           RUNS UNDER ISPF, IT CAN BE INVOKED WITH SPLIT-SCREEN.     *\n*                                                                     *\n*           XDF LOOKS AT VARIOUS MVS SP 1.3.0 CONTROL BLOCKS.         *\n*                                                                     *\n*                                                                     *\n* EXTERNAL REFERENCE: ISPLINK                                         *\n*                                                                     *\n*                                                                     *\n* MACROS USED: SAVE                                                   *\n*              ABEND                                                  *\n*              RETURN                                                 *\n*              GETMAIN                                                *\n*              STAX                                                   *\n*              ENQ                                                    *\n*              DEQ                                                    *\n*              TPUT                                                   *\n*              FREEMAIN                                               *\n*              $JQE                                                   *\n*              $JOE                                                   *\n*              CVT                                                    *\n*              CVTUSERS (USER)                                        *\n*              TCBWORK  (USER)                                        *\n*                                                                     *\n*                                                                     *\n* CUSTOMIZATION:                                                      *\n*                                                                     *\n* THE FOLLOWING EQUATES MAY NEED TO BE CHANGED.                       *\n*                                                                     *\n*\nHOTPG    EQU   244          C'4'         TOP PERFORMANCE GROUP\nJDFSVC   EQU   237                       JDF SVC\n*\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*  GLOSSARY OF TERMS FOR OUTPUT DISPLAY:\n*\n*    JOB       JOB NAME OF MEMORY\n*    STEP      FOR BATCH JOBS WILL ALWAYS BE INIT.\n*              FOR TSO JOBS AND STARTED TASKS WILL BE ACTUAL STEP NAME.\n*    P         REASON CODE FOR SWAP OUT FROM OUCBPFL.\n*              THE FOLLOWING ARE THE REASON CODES DISPLAYED:\n*                U  0A MEMORY WAS UNILATERALLY SWAPPED\n*                X  09 MEMORY WAS EXCHANGE SWAPPED\n*                E  08 AN ENQHOLD HAS BEEN RECEIVED FOR THIS MEMORY\n*                S  07 MEMORY REQUESTED SWAP OUT\n*                D  06 INVOLUNTARY SWAPOUT DUE TO DETECTED WAIT\n*                R  05 SWAPOUT CAUSED BY REAL STORAGE SHORTAGE\n*                A  04 SWAPOUT CAUSED BY AUX. STORAGE SHORTAGE\n*                L  03 MEMORY SWAPPED OUT BY MS6 LONG WAIT DETECTION\n*                I  02 MEMORY IS IN INPUT TERMINAL WAIT\n*                T  01 MEMORY IS IN OUTPUT TERMINAL WAIT\n*                ?     UNABLE TO DETERMINE SWAPOUT REASON.\n*    MEMORY    CURRENT AMOUNT OF MEMORY ALLOCATED TO THIS MEMORY.\n*    WSS       SRM'S VIEW OF THE WORKING SET SIZE FOR THIS MEMORY.\n*    LOC       CURRENT LOCATION OF THIS MEMORY:\n*                IN  SWAPPED IN AND ELIGIBLE TO RUN.\n*                OUT SWAPPED OUT BUT READY TO RUN.\n*                WT  SWAPPED OUT AND NOT READY TO RUN.\n*                N/S SWAPPED IN AND V=R OR NON-SWAPPABLE STATUS.\n*                <-> TRANSITIONING BETWEEN STATES.\n*    DP        DISPATCHING PRIORITY OF MEMORY (IN HEX).\n*    PG        PERFORMANCE GROUP.\n*    SC        NUMBER OF TIMES THE MEMORY HAS BEEN SWAPPED IN THE\n*              CURRENT TRANSACTION.\n*    WMR       CURRENT SRM WORKLOAD MANAGER RECOMMENDATION VALUE.\n*              (ACTUALLY THE WORKLOAD LEVEL AT WHICH THIS MEMORY IS\n*               OPERATING).\n*    CPU       CPU TIME IN SECONDS USED BY THE MEMORY (SRB PLUS TASK).\n*\n*    SIO'S     CURRENT SIO COUNT\n*\n*\n*\n*\n***********************************************************************\n         EJECT\nXDF      CSECT\n         USING *,13,12,11,10\n         B     72(,15)\n         DC    17F'0'\n         SAVE  (14,12)\n         LA    R2,0(,R15)     A(XDFST)\n         ST    R2,8(R13)      LINK SAVE AREAS\n         ST    R13,4(R2)      SAVE THE CALLER'S R13\n         LR    R13,R2         SET SAVE AREA AND BASE 1\n         LR    R12,R2         SET\n         A     R12,L4096          BASE 2\n         LR    R11,R12        SET\n         A     R11,L4096          BASE 3\n         LR    R10,R11        SET\n         A     R10,L4096          BASE 4\n*\n         USING PSA,0\n*\n         MVI   ATABFL,C'0'    NO ACTIVE TABLE\n         MVI   XDFLINE,C' '   CLEAR TAB ENTRY AREA\n         MVC   XDFLINE+1(79),XDFLINE\n         XC    ISPARMS(40),ISPARMS\n         MVC   XDFCMD(3),=C'ALL'    INITIAL COMMAND - SHOW EVERYTHING\n         MVI   DELTA,0              NOT LIMITED TO CHANGED\n         MVC   SELCMD(3),=C'ALL'    INITIAL COMMAND - SHOW EVERYTHING\n*\n*\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (VCOPY,ZUSER,U8,USERID,SPFMOVE),                        X\n               VL,MF=(E,ISPARMS)\n*\nSHOWAGIN DS    0H\n         BAL   R7,SHOWRMF     DISPLAY THE RESOURCE STUFF\n*\nSHOWDONE DS    0H\n*\n         VDELETE XDFSEL\n         VDELETE XDFLINE\n         VDELETE XDFCMD\n         VDELETE XCPU\n         VDELETE XAFC\n         VDELETE XPFR\n         VDELETE XASQ\n         VDELETE XUIC\n         VDELETE XDIO\n         VDELETE XDMN1\n         VDELETE XDMN2\n         VDELETE XDMN3\n*\n         TBEND XDFTABLE\n         MVI   ATABFL,C'0'        NO ACTIVE TABLE\n*\n         L     R13,4(R13)     RESTORE THE CALLER'S R13\n         RETURN (14,12),RC=0  RETURN TO OUR CALLER\n*\nL4096    DC    F'4096'\n*\n         EJECT\nSHOWRMF  DS    0H\n         ST    R7,XDF7HOLD SAVE THE RETURN ADDRESS\n*\n         MVC   XDFSEL(3),SPACES   SET SELECTION CODE TO SPACES\n*\n         CLI   ATABFL,C'0'        DO I HAVE AN ACTIVE TABLE?\n         BE    ANOTAB             NOPE\n*\n         VDELETE XDFLINE\n         VDELETE XDFSEL\n         VDELETE XDFCMD\n         VDELETE XCPU\n         VDELETE XAFC\n         VDELETE XPFR\n         VDELETE XASQ\n         VDELETE XUIC\n         VDELETE XDIO\n         VDELETE XDMN1\n         VDELETE XDMN2\n         VDELETE XDMN3\n*\n         TBEND XDFTABLE\n         MVI   ATABFL,C'0'        NO ACTIVE TABLE\nANOTAB   DS    0H\n*\n         VDEFINE XDFLINE,78\n         VDEFINE HILITE,4\n         MVC   HILITE(4),=CL4'LOW'\n         VPUT  HILITE\n         VGET  HILITE\n*\n         MVC   XDFCMD(3),SELCMD      SET COMMAND\n         VDEFINE XDFCMD,40\n         VDEFINE XDFSEL,1\n         VDEFINE XCPU,4\n         VDEFINE XAFC,5\n         VDEFINE XPFR,4\n         VDEFINE XASQ,4\n         VDEFINE XUIC,4\n         VDEFINE XDIO,4\n         VDEFINE XDMN1,5\n         VDEFINE XDMN2,5\n         VDEFINE XDMN3,5\n*\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBCREATE,                                              X\n               XDFTABLE,                                               X\n               NULLENT,                                                X\n               DANAMLST,                                               X\n               NOWRITE),                                               X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBVCLEAR,                                              X\n               XDFTABLE),                                              X\n               VL,MF=(E,ISPARMS)\n         MVI   ATABFL,C'1'        AN ACTIVE TABLE\n*\n*\nFINDCVT  DS    0H\n*\n**  LOOK THRU SRM CONTROL BLOCKS TO BUILD HEADER INFO\n*\n*\nBUILDHDR DS    0H\n         L     R4,FLCCVT       ---> CVT...\n         USING CVT,4\n***********************************************************************\n*\n*   COPY SRM CONTROL BLOCKS\n*\n*   RMCT\n*   CCT\n*   RCT\n*   DMDT\n*\n***********************************************************************\n*\n         L     R4,CVTOPCTP     ---> RMCT... 1ST MODULE OF IRARMCNS\n         DROP  4\n*\n         LA    R6,RMCT\n         PRINT GEN\n         $AMODE 31\n         PRINT NOGEN\n         MVC   0(RMCTLEN,R6),0(R4)\n*\n         L     R6,RMCTRCT      ---> RCT\n         LA    R1,RCT\n         MVC   0(RCTLEN,R1),0(R6)\n*\n         L     R6,RMCTCCT      ---> CCT\n         LA    R1,CCT\n         MVC   0(CCTLEN,R1),0(R6)\n*\n         L     R6,RMCTDMDT      ---> DMDT\n         LA    R5,DMDTLEN\n         AR    R6,R5\n         LA    R1,DMDT\n         MVC   0(DMDTLEN,R1),0(R6)\n         AR    R6,R5\n         AR    R1,R5\n         MVC   0(DMDTLEN,R1),0(R6)\n         AR    R6,R5\n         AR    R1,R5\n         MVC   0(DMDTLEN,R1),0(R6)\n         $AMODE 24\n*\n*\n***********************************************************************\n*\n*   FILL IN SYSTEM CPU UTILIZATION\n*\n***********************************************************************\n*\n         LH    R6,CCVUTILP        CPU UTILIZATION\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  XCPU,WORK+6(2)       ...AND EDIT\n         MVI   XCPU+3,C'%'\n*\n         CLC   XCPU(3),=C'101'\n         BNE   *+10\n         MVC   XCPU(3),=C'100'\n*\n         SPACE\n***********************************************************************\n*\n*   FILL IN AVERAGE AVAILABLE FRAME COUNT\n*\n***********************************************************************\n         LH    R6,CCVLGFMC        AVERAGE AVAILABLE FRAME COUNT\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  WRK5,WORK+5(3)       ...AND EDIT\n         MVC   XAFC(5),WRK5\n         SPACE\n***********************************************************************\n*\n*   FILL IN PAGE FAULT RATE\n*\n***********************************************************************\n         LH    R6,RCVDPR          PAGE FAULT RATE\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  XPFR,WORK+6(2)       ...AND EDIT\n         SPACE\n         LH    R6,RCVASMQA        AUX. STORAGE MANAGER QUE LENGTH\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  XASQ,WORK+6(2)       ...AND EDIT\n         SPACE\n         LH    R6,RCVUICA         UNREFERENCED INTERVAL COUNT\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  XUIC,WORK+6(2)       ...AND EDIT\n         SPACE\n         LH    R6,RCVAVQC         DEFERRED IO REQUESTS\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  XDIO,WORK+6(2)       ...AND EDIT\n         L     R4,R4SAV        RESTORE R4\n         SPACE\n         SR    R15,R15         CLEAR A REG\n         LA    R5,3            NUMBER OF DOMAIN ENTRIES TO PROCESS\n         LA    R14,HDRDMN      POINT TO FIRST DOMAIN ENTRY\n         LA    R7,DMDT           SET DMDT POINTER\n         USING DMDT,R7\nDODMNS   DS    0H\n*\n         LH    R15,DMDTMPLT    GET MULTI-PROGRAMMING LEVEL TARGET\n         CVD   R15,WORK        CHANGE IT TO DECIMAL\n         OI    WORK+7,X'0F'    FIX THE SIGN\n         UNPK  1(2,R14),WORK+6(2) MOVE IT TO THE OUTPUT AREA\n*        LH    R15,DMDTRUA     GET NUMBER OF READY USERS\n         LH    R15,DMDTCMPL    GET CURRENT MPL\n         CVD   R15,WORK        CHANGE IT TO DECIMAL\n         OI    WORK+7,X'0F'    FIX THE SIGN\n         UNPK  4(2,R14),WORK+6(2) MOVE IT TO THE OUTPUT AREA\n         LA    R14,6(R14)     POINT TO NEXT DOMAIN ENTRY\n         LA    R7,DMDTLEN(R7)  BUMP PAST THIS DOMAIN\n         BCT   R5,DODMNS       GO PROCESS ANOTHER\n*\n         MVI   WHICH,C'S'       DO STARTED TASKS FIRST\n*\nTOPASCB  DS    0H\n*\n         L     R2,FLCCVT        LOAD PTR TO CVT.\n         USING CVT,2\n         L     R2,CVTASVT       TO ASVT\n         DROP  2\n         USING ASVT,2\n         L     R3,ASVTMAXU      MAXIMUM NUMBER OF ENTRIES\n         LA    R4,ASVTFRST      FIRST ENTRY\n         B     ASCB1ST\n         SPACE\nASCBLOOP DS    0H\n*\n         LA    R4,4(,R4)        BUMP BY FOUR.\nASCB1ST  DS    0H\n***********************************************************************\n*\n*   SET R5 = ASCB\n*\n         TM    0(R4),128        ASCB POINTER\n         BO    NOGOOD           BRANCH IF BAD PTR.\n         ICM   R5,B'1111',0(R4) LOAD THE ASCB POINTER\n         USING ASCB,5\n*\n***********************************************************************\n*\n         LH    R1,ASCBASID      PICK UP ASID\n         CVD   R1,DOUBLEWD\n         MVC   WORK6(6),EDIT6\n         ED    WORK6(6),DOUBLEWD+5\n         MVC   ASID(4),WORK6+2  SET ASID\n*\n***********************************************************************\n*\n*   SET R6 = OUCB\n*\n         PRINT GEN\n         LA    R6,OUCBDATA       SET OUCB POINTER\n         L     R15,ASCBOUCB      POINT TO IT\n         $AMODE 31\n         MVC   0(OUCBDLEN,R6),0(R15)\n         $AMODE 24\n         PRINT NOGEN\n*\n         USING OUCB,6\n*\n***********************************************************************\n*\n         TM    OUCBYFL,OUCBLOG  CHECK FOR TSO.\n         BO    ITISATSO\n*\n         TM    OUCBYFL,OUCBMNT  CHECK FOR MOUNT\n         BO    ITISASTC\n         TM    OUCBYFL,OUCBSTT  CHECK FOR STARTED TASK\n         BZ    ITISABAT\n*\n** THE OUCB ALWAYS INDICATES STARTED TASK FOR BATCH INITIATORS\n*\n         L     R1,ASCBJBNI         POINT TO BATCH JOB NAME\n         LTR   R1,R1               NO POINTER,\n         BZ    ITISASTC            SO IT HAS TO BE A STARTED TASK\n*\n         L     R1,ASCBJBNS         POINT TO STARTED TASK NAME\n         LTR   R1,R1               NO POINTER,\n         BZ    ITISABAT            SO IT HAS TO BE BATCH\n*\n         CLC   0(5,R1),=C'INIT '   INITIATOR STARTED TASK?\n         BE    ITISABAT            THEN IT'S REALLY BATCH\n*\n         TM    OUCBYFL,OUCBSTT  CHECK FOR STARTED TASK\n         BO    ITISASTC\n*\nITISABAT DS    0H\n         MVC   ASID(4),WORK6+2  SET ASID\n         CLI   WHICH,C'B'       AM I DOING BATCH\n         BNE   NOGOOD           NO, SO SKIP THIS.\n         CLC   SELCMD(3),=C'ALL'     DISPLAY EVERYTHING\n         BE    DISPALL          YES\n         CLC   SELCMD(3),=C'BAT'     DISPLAY BATCH\n         BE    DISPALL          YES\n         B     NOGOOD           NO, SO SKIP THIS.\nITISATSO DS    0H\n         MVC   PSTEP(8),=CL8'TSU'   SET DEFAULT TSO PROCSTEPNAME\n         CLI   WHICH,C'T'       AM I DOING TSO\n         BNE   NOGOOD           NO, SO SKIP THIS.\n         CLC   SELCMD(3),=C'ALL'     DISPLAY EVERYTHING\n         BE    DISPTSO          YES\n         CLC   SELCMD(3),=C'TSU'     DISPLAY TSO\n         BE    DISPTSO          YES\n         B     NOGOOD           NO, SO SKIP THIS.\nITISASTC DS    0H\n*\n         CLI   WHICH,C'S'       AM I DOING STARTED TASKS\n         BNE   NOGOOD           NO, SKIP THIS\n         MVC   PSTEP(8),=CL8'STC'   SET DEFAULT STC PROCSTEPNAME\n         MVC   STEP(8),SPACES\n         CLC   SELCMD(3),=C'ALL'     DISPLAY EVERYTHING\n         BE    DISPDATA         YES\n         CLC   SELCMD(3),=C'STC'     DISPLAY STARTED TASKS\n         BE    DISPDATA         YES\n         B     NOGOOD           NO, SO SKIP THIS.\nDISPALL  DS    0H\n         MVC   PSTEP(8),SPACES\nDISPTSO  DS    0H\n         MVC   STEP(8),SPACES\nDISPDATA DS    0H\n         SPACE\n         MVC   JOB(8),=CL8'STARTING' AVOID JUNK\n         L     R7,ASCBCSCB           LOAD PTR TO CMD SCH CTL BLK\n         LTR   R7,R7\n         BZ    MMASTER\n         USING CHAIN,7\n*\n         CLI   WHICH,C'T'          AM I DOING TSO\n         BE    TSOCHAIN\n*\n         CLI   WHICH,C'S'          AM I DOING STARTED TASKS\n         BE    STCCHAIN\n*\n         L     R7,ASCBJBNI         POINT TO JOBNAME (IN CSCB?)\n         LA    R1,CHKEY-CHAIN      BACK UP\n         SR    R7,R1               BACK UP\n         MVC   JOB(8),CHKEY        MOVE IN JOBNAME.\n         MVC   STEP(8),CHSTEP      MOVE IN STEP NAME (NO PSTEP)\n         MVC   PSTEP(8),CHPROCSN   MOVE IN PROC STEP NAME\n*\n         B     MNEXT               CONTINUE\n*\nSTCCHAIN DS    0H\n*\n         L     R7,ASCBJBNS         POINT TO STARTED TASK NAME\n         LTR   R7,R7               NO POINTER,\n         BZ    MMASTER             SO SKIP THIS\n         LA    R1,CHCLS-CHAIN      BACK UP\n         SR    R7,R1               BACK UP\n*\n         MVC   JOB,CHCLS           MOVE IN JOBNAME.\n         MVC   STEP(8),CHKEY       MOVE IN PROC NAME\n*\n         B     MMASTER             CONTINUE\n*\nTSOCHAIN DS    0H\n         MVC   JOB,CHKEY           MOVE IN JOBNAME.\n         MVC   STEP(8),CHCLS       MOVE IN PROC NAME\n*\n         B     MMASTER             CONTINUE\n*\nMMASTER  DS    0H\n*\n         CLC   ASID(4),=C'   1' ASID 1, MASTER SCHEDULER\n         BNE   MNEXT            NO - CHECK NEXT\n         MVC   JOB(8),=C'*MASTER*' MOVE IN JOBNAME.\n*\nMNEXT    DS    0H\n*\n         CLC   JOB(8),=CL8'INIT' IS IT A 'DRY' INIT??           KMT\n         BE    NOGOOD           YEP...KISS OFF                  KMT\n*\n***********************************************************************\n*\n*   FILL IN ALLOCATED FRAME COUNT\n*\n***********************************************************************\n*\n         LH    R6,ASCBFMCT       LOAD ALLOC FRAME COUNT.\n         SLL   R6,2             MULTIPLY BY FOUR.\n         CVD   R6,WORK          CONVERT TO DECIMAL FORMAT.\n         MVC   WORK7(7),EDIT7   GET READY FOR EDIT.\n         ED    WORK7(6),WORK+5  EDIT THE RESULT.\n         MVC   SIZE(5),WORK7+2\n*\n***********************************************************************\n*\n*   FILL IN WORKING SET SIZE\n*\n***********************************************************************\n*\n         LA    R6,OUCBDATA      PTR TO OUCB.\n         LH    R7,OUCBWSS        LOAD OUCBWSS\n*        SLL   R7,2             TIMES FOUR FOR K.\n         CVD   R7,WORK          CONVERT TO DECIMAL.\n         MVC   WORK7(7),EDIT7B  MOVE IN MASK\n         ED    WORK7(6),WORK+5  EDIT THE RESULT.\n         MVC   LINEWSS(5),WORK7+1\n         SPACE\n         TM    OUCBYFL,OUCBLOG  TEST FOR TSO MEMORY\n         BZ    NOTTSO           BRANCH IF NOT TSO.\n         MVI   TYPE,C'T'        MOVE IN TSO MEMORY INDICATION.\n         B     TYPEOK           BYPASS REST OF TYPE PROCESSING.\nNOTTSO   MVI   TYPE,C'S'        MOVE IN S/M/L INDICATION.\nTYPEOK   DS    0H\n         SPACE\n         MVC   WHERE,=CL3'IN'   DEFAULT MEMORY POSITION IS IN.\n         TM    OUCBSFL,OUCBNSW  TEST FOR NON-SWAP\n         BZ    TRYWAIT          BRANCH IF NOT NON-SWAP.\n         MVC   WHERE,=CL3'N/S'  MOVE IN NON-SWAP INDICATION.\n         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.\nTRYWAIT  DS    0H\n         TM    OUCBQFL,OUCBOFF  CHECK FOR WAIT\n         BZ    TRYOUT           BRANCH IF NOT.\n         MVC   WHERE,=CL3'WT'   MOVE IN WAIT POSITION INDICATION.\n         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.\nTRYOUT   TM    OUCBQFL,OUCBOUT  TRY OUT QUEUE\n         BZ    TRYTRIV          IF NOT, GO TRY TRIVIAL QUEUE STATUS.\n         MVC   WHERE,=CL3'OUT'  MOVE IN OUT QUEUE POSITION.\n         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.\nTRYTRIV  TM    OUCBQFL,OUCBLSW  CHECK FOR TRIVIAL QUEUE POSITION.\n         BZ    WHEREOK          IF NOT, EXIT POSITION PROCESSING.\n         MVC   WHERE,=CL3'TRV'  MOVE IN TRIVIAL QUEUE POSITION.\nWHEREOK  DS    0H\n         TM    OUCBQFL,X'E0'    CHECK FOR TRANSITIONING STATUS\n         BZ    NOTTRANS         BRANCH IF MEMORY NOT TRANSITIONING.\n         MVC   WHERE(3),=CL3'<->' INDICATE TRANSITIONING.\nNOTTRANS DS    0H\n         SPACE\n         SR    R7,R7            PREPARE FOR THE INSERT CHARACTERS.\n         IC    R7,ASCBDP        LOAD ASCBDP\n         SRL   R7,4             SHIFT OUT LOW ORDER NIBBLE.\n         IC    R8,HEX(R7)       PICK THE EBCDIC CHARACTER.\n         STC   R8,DP            STORE INTO OUTPUT FIELD.\n         IC    R7,ASCBDP        LOAD THE DISPATCHING PRIORITY AGN.\n         N     R7,=F'15'        TURN OFF HIGH ORDER NIBBLE.\n         IC    R8,HEX(R7)       LOAD THE EBCDIC CHARACTER.\n         STC   R8,DP+1          STORE INTO OUTPUT LINE.\n         SPACE\n***********************************************************************\n*\n*   FILL IN PERFORMANCE GROUP NUMBER\n*\n***********************************************************************\n         SR    R7,R7            PREPARE FOR THE IC.\n         IC    R7,OUCBSPG+1     NEW PGN  ???\n         CVD   R7,WORK          CONVERT IT TO DECIMAL.\n         MVC   WORK4(4),EDIT4              GET READY FOR EDIT.\n         ED    WORK4(4),WORK+6 EDIT THE RESULT.\n         MVC   LINEPGN(3),WORK4+1\n*\n***********************************************************************\n*\n*   FILL IN SWAP REASON CODE\n*\n***********************************************************************\n         TM    OUCBQFL,OUCBLSW  SEE IF OUT SOMEHOW\n         BZ    PFLDONE          MUST BE IN.\nCHKSRC   DS    0H\n         CLI   OUCBSRC,X'0A'    OUCBSRC (SWAP REASON CODE)\n         BH    UNKNOWN          TOO BIG REASON UNKNOWN\n         SR    R7,R7            CLEAR OUT WORK REGISTER        KMT\n         IC    R7,OUCBSRC       GET OUCBSRC (SWAP REASON CODE) KMT\n         SLL   R7,2             MULTIPLY BY 4 TO GET INDEX     KMT\n         LA    R7,REASONS(R7)   GET ADDRESS OF REASON CODE     KMT\n         MVC   STATUS,0(R7)     MOVE IT INTO THE MESSAGE       KMT\n         B     PFLDONE                                         KMT\nUNKNOWN  MVC   STATUS,=CL4'????'       SORRY..DONT KNOW        KMT\nPFLDONE  DS    0H\n*\n***********************************************************************\n*\n*   FILL IN CPU TIME\n*\n***********************************************************************\n*\n         LM    R8,R9,ASCBEJST   LOAD UP EJST (CPU TIME - TASK TYPE)\n         SRDL  R8,12            TO GET MICROSEC\n         D     R8,=F'10000'     TO GET HUNDREDTHS AND MICROS\n         LM    10,R11,ASCBSRBT  LOAD UP SRB TIME.\n         SRDL  R10,12           TO GET MICROSEC\n         D     R10,=F'10000'    TO GET HUNDREDTHS AND MICROS\n         AR    R9,R11           ADD TOGETHER.\n         CVD   R9,WORK             CONVERT IT TO DECIMAL.\n         MVC   CPUTIME(8),EDIT8P   MOVE IN THE EDIT MASK.\n         ED    CPUTIME-1(9),WORK+4 EDIT THE RESULT.\n*\nOUXBTEST DS    0H\n*\n** FOR JOBS THAT ARE SWAPPED IN, THE OUXB IS ADDRESSIBLE\n*\n         CLC   WHERE,=CL3'IN'   DEFAULT MEMORY POSITION IS IN.\n         BE    OUXBSETP\n         CLC   WHERE,=CL3'N/S'  MOVE IN NON-SWAP INDICATION.\n         BE    OUXBSETP\n*\n         B     SIOLOOP\n*\nOUXBSETP DS    0H\n*\n         L     R15,ASCBOUXB         LOAD OUXB POINTER\n         LTR   R15,R15\n         BZ    SIOLOOP\n*\n         DROP  6\n         LA    R6,OUXBDATA\n*\n         $AMODE 31\n         MVC   0(OUXBDLEN,R6),0(R15)\n         $AMODE 24\n*\n         USING OUXBNAME,6\n*\n*\n***********************************************************************\n*\n*   FILL IN SWAP COUNT\n*\n***********************************************************************\n         L     R7,OUXBSWCT      LOAD OUXB SWAP COUNT\n         CVD   R7,WORK          CONVERT IT TO DECIMAL.\n         MVC   LINESWC(4),EDIT4  MOVE IN THE EDIT MASK\n         ED    LINESWC(4),WORK+6 EDIT THE RESULT.\n*\n***********************************************************************\n*\n*   FILL IN SERVICE UNITS\n*   (NOT PRESENTLY DISPLAYED)\n*\n***********************************************************************\n*\n*        L     R7,OUXBJBS       OUXB SERVICE UNITS THIS SESSION\n*        CVD   R7,WORK          CONVERT TO DECIMAL.\n*        MVC   LINEWMS(7),=X'20202020202120' MOVE IN THE EDIT MASK.\n*        ED    LINEWMS-1(8),WORK+4 EDIT THE RESULT.\n*\nSIOS1    DS    0H\n*        LH    R1,ASCBXCNT\n*        A     R1,OUXBIOSM\n         L     R1,OUXBIOSM\n         CVD   R1,WORK          CONVERT TO DECIMAL FORMAT.\n         MVC   WORK8(8),EDIT8   MOVE MASK\n         ED    WORK8(8),WORK+4  EDIT THE RESULT.\n         MVC   SIOS(7),WORK8+1\n*\nSIOLOOP  DS    0H\n*\n         MVI   CPUFLAG,C' '     DEFAULT\n         MVI   SIOFLAG,C' '     DEFAULT\n*\n*\n*  NOW LOOP, CHECKING FOR THE JOBS WHOSE EXCP COUNT HAS INCREASED SINCE\n*            THE LAST XDF DISPLAY\n*\n         LA    R7,CPUTAB        START OF TABLE\nSIOLOOP1 DS    0H\n         CLI   0(R7),X'FF'      END OF TABLE\n         BE    JUSTOUT1         YES, IGNORE\n*\n         CLC   0(38,R7),SPACES  UNUSED ENTRY?\n         BE    SIOADD1          YES, ADD THIS JOB TO TABLE\n*\n         CLC   0(31,R7),ASID    MATCH ON ASID, JOBNAME, STEPNAME, PSTEP\n         BE    SIOMATCH         YES, COMPARE CURRENT SIO TIME VS LAST\n*\n         LA    R7,44(,7)        BUMP TO NEXT ENTRY\n         B     SIOLOOP1         KEEP LOOPING\n*\nSIOMATCH DS    0H\n*\n         CLC   SIOS(5),SPACES   DO I HAVE ANYTHING?\n         BNE   *+10             YES\n         MVC   SIOS(7),33(R7)   NO, COPY ACCUM TO DISPLAY\n*\n         CLC   33(5,R7),SIOS            STORE 100'S OF SIO'S\n         BE    CPUMATCH         IF THEY ARE THE SAME, DON'T SET FLAG\n         MVC   33(7,R7),SIOS            STORE 100'S OF SIO'S\n         MVI   SIOFLAG,C'*'     INDICATE SIO TIME HAS INCREASED\n*\nCPUMATCH DS    0H\n         CLC   31(2,R7),CPUTIME+3       CHECK CPU WHOLE SECONDS\n         BE    SWAPACUM         IF THEY ARE THE SAME, DON'T SET FLAG\n         MVC   31(2,R7),CPUTIME+3       STORE CPU WHOLE SECONDS\n         MVI   CPUFLAG,C'*'     INDICATE CPU TIME HAS INCREASED\n         B     SWAPACUM         DISPLAY THE LINE\n*\nSIOADD1  DS    0H\n         MVC   0(31,R7),ASID    MOVE IN ASID, JOBNAME, STEPNAME, PSTEP\n         MVC   31(2,R7),CPUTIME+3       STORE CPU WHOLE SECONDS\n         MVC   33(7,R7),SIOS            STORE EXCP COUNT\n*\nSWAPACUM DS    0H\n*\n         CLC   LINESWC(4),SPACES   DO I HAVE ANYTHING?\n         BNE   *+10                YES\n         MVC   LINESWC(4),40(R7)   NO, COPY ACCUM TO DISPLAY\n         MVC   40(4,R7),LINESWC    YES, COPY DISPLAY TO ACCUM\n*\n*\nJUSTOUT1 DS    0H\n         CLI   DELTA,0          CHANGED ONLY\n         BE    JUSTOUT2         NO, SHOW THEM ALL\n*\n         CLI   CPUFLAG,C'*'     IF CPU TIME HAS INCREASED\n         BE    JUSTOUT2         SHOW IT\n         CLI   SIOFLAG,C'*'     IF SIO COUNT HAS INCREASED\n         BE    JUSTOUT2         SHOW IT\n         B     NOGOOD           ELSE SKIP IT\n*\nJUSTOUT2 DS    0H\n*\n         BAL   R7,OUTMSG        ADD THE LINE TO THE SPF TABLE.\n*\nNOGOOD   BCT   R3,ASCBLOOP      BRANCH BACK TO LOOK AT NEXT MEMORY.\n*\n         CLI   WHICH,C'T'       FINISHED TSO?\n         BE    GOTSOMEJ         YES, GO DISPLAY THE TABLE\n*\n         CLI   WHICH,C'S'       FINISHED STARTED TASKS\n         MVI   WHICH,C'B'       SET DO BATCH NEXT\n         BE    TOPASCB          YES, GO RE-LOOP THROUGH THE ASCB'S\n*\n         MVI   WHICH,C'T'       IF I'M NOT DOING STARTED TASKS OR TSO,\n         B     TOPASCB          GO RE-LOOP THROUGH THE ASCB'S\n*\n         EJECT\nEODAD    DS    0H\nBYEBY    DS    0H\n*\nGOTSOMEJ DS    0H\n*        MODESET KEY=NZERO,MODE=PROB\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBTOP,                                                 X\n               XDFTABLE),                                              X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBDISPL,                                               X\n               XDFTABLE,                                               X\n               XDFDATAB),                                              X\n               VL,MF=(E,ISPARMS)\n         MVC   TABWORK(80),XDFLINE   SAVE REPLY FIELDS\n         C     R15,FZEROS     COMMAND ENTERED/LINE MODIFIED??\n         BE    GOTSTUFF       YUP, GO PROCESS IT\n         B     DUNWITIT       ALL DONE\nGOTSTUFF DS    0H\n         MVC   SELSAVE(3),XDFSEL     SAVE SEL CODE\n         OC    SELSAVE(3),SPACES   UPPER-CASE IT\n         MVC   XDFSEL(3),SPACES   SET SELECTION CODE TO SPACES\n         MVC   JOBASID+1(3),TABWORK+1  SAVE ASID\n         MVC   JOBNAMS(8),TABWORK+5  SAVE JOB NAME\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBGET,                                                 X\n               XDFTABLE),                                              X\n               VL,MF=(E,ISPARMS)\n         MVC   TABGOTN(80),XDFLINE   SAVE REPLY FIELDS\n         C     R15,F8         RC=8 MEANS CRP IS AT TOP\n         BE    GOTCMD         THEN A COMMAND WAS ENTERED\n*\n* IF THE CRP IS NOT ZERO, THEN A LINE SELECTION CODE MUST HAVE BEEN\n* ENTERED. I HAVE THE CURRENT LINE, SO EDIT THE SELECTION CODE.\n*\n         CLI   SELSAVE,C'C'   IS IT A JOB CANCEL\n         BE    JOBCAN         GO DO IT\n*\n         CLI   SELSAVE,C'F'   IS IT A JOB CANCEL-FORCE\n         BE    JOBFOR         GO DO IT\n*\n         CLI   SELSAVE,C'E'   IS IT RESET PERFORMANCE GROUP\n         BE    JOBRESET       GO DO IT\n*\n         B     SHOWAGIN       GO REPEAT THE DISPLAY\n*\n         EJECT\nJOBCAN   DS    0H\n*\n         CLC   USERID(5),JOBNAMS\n         BE    JOBCANIT\n         CLC   USERID(2),=C'AS'\n         BE    JOBCANIT\n         CLC   USERID(2),=C'AP'\n         BE    JOBCANIT\n         CLC   USERID(2),=C'BP'\n         BE    JOBCANIT\n         CLC   USERID(3),=C'MVS'\n         BE    JOBCANIT\n*\n         B     SHOWAGIN       GO REPEAT THE DISPLAY\n*\nJOBCANIT DS    0H\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(71),CMDLINE\n         MVC   CMDLINE(7),=C'CANCEL '\n         MVC   CMDLINE+8(8),JOBNAMS    JOB NAME\n*\n         SLR   R0,0                    CLEAR REG 0\n         LA    R1,CMDRESET            GET ADDRESS OF COMMAND\n         LA    R15,1                   SET OPTION\n         SVC   237                     ISSUE COMMAND VIA SVC 34\n*\n         B     SHOWAGIN       GO REPEAT THE SCREEN\n         EJECT\nJOBFOR   DS    0H  CANCEL JOB WITH CC=333\n         CLC   USERID(2),=C'AS'\n         BE    JOBFORCE\n         CLC   USERID(2),=C'AP'\n         BE    JOBFORCE\n         CLC   USERID(2),=C'BP'\n         BE    JOBFORCE\n         CLC   USERID(3),=C'MVS'\n         BE    JOBFORCE\n*\n         B     SHOWAGIN       GO REPEAT THE DISPLAY\n*\nJOBFORCE DS    0H  CANCEL JOB WITH CC=333\n*\n         PACK  DOUBLEWD(8),JOBASID(4)\n         CVB   R2,DOUBLEWD\n*\n         STAX  DEFER=YES\n*\n         LA    R0,1                    SET AUTH ON\n         SVC   235\n         MODESET KEY=ZERO,MODE=SUP\n*\n         LR    R7,R13\n         LA    R13,RTMWORK\n       CALLRTM TYPE=MEMTERM,COMPCOD=819,ASID=(R2)\n         LR    R13,R7\n*\n         MODESET KEY=NZERO,MODE=PROB\n         SR    R0,R0                   SET AUTH OFF\n         SVC   235\n*\n         STAX  DEFER=NO\n*\n         B     SHOWAGIN       GO REPEAT THE SCREEN\nRTMWORK  DS    18F\n         EJECT\n*\nJOBRESET DS    0H\n*\n         CLC   USERID(2),=C'AS'\n         BE    ELEVATE\n         CLC   USERID(2),=C'AP'\n         BE    ELEVATE\n         CLC   USERID(2),=C'BP'\n         BE    ELEVATE\n         CLC   USERID(3),=C'MVS'\n         BE    ELEVATE\n*\n         B     SHOWAGIN       GO REPEAT THE DISPLAY\n*\nELEVATE  DS    0H  CHANGE THE PERFORMANCE GROUP TO 3\n*\n         MVI   CMDLINE,C' '\n         MVC   CMDLINE+1(71),CMDLINE\n         MVC   CMDLINE(2),=C'E '\n         MVC   CMDLINE+3(8),JOBNAMS    JES NUMBER\n*\n         LA    R15,CMDLINE+4           FIND A BLANK\n*\n         CLI   0(R15),C' '             GOT A BLANK?\n         BE    *+12                    YUP\n         LA    R15,1(,15)              BUMP POINTER\n         B     *-12                    LOOP\n*\n         MVC   0(9,R15),=C',PERFORM='\n         MVI   9(R15),HOTPG             TOP PERFORMANCE\n*\n         SLR   R0,0                    CLEAR REG 0\n         LA    R15,1                   SET FUNCTION FLAG\n         LA    R1,CMDRESET            GET ADDRESS OF COMMAND\n         SVC   JDFSVC                  ISSUE COMMAND VIA SVC 34\n*\n         B     SHOWAGIN       GO REPEAT THE SCREEN\n*\nCMDRESET DC    Y(76),Y(00)\nCMDLINE  DC    CL72'E JOB' COMMAND SVC 34 INPUT\n*\n*\n         EJECT\n*\nDUNWITIT DS    0H\n         L     R7,XDF7HOLD     RESTORE  RETURN ADDRESS\n         BR    R7             RETURN TO OUR CALLER\n         EJECT\n*\n*    ONLY COMMANDS BELOW ARE ALLOWED\n*\nGOTCMD   DS    0H\n         CLC   XDFCMD(5),=C'DELTA'\n         BE    CMDDELTA\n         CLC   XDFCMD(3),=C'ALL'\n         BE    GOODCMD\n         CLC   XDFCMD(3),=C'TSU'\n         BE    GOODCMD\n         CLC   XDFCMD(3),=C'BAT'\n         BE    GOODCMD\n         CLC   XDFCMD(3),=C'STC'\n         BE    GOODCMD\n         B     SHOWAGIN\n*\nCMDDELTA DS    0H\n         MVI   DELTA,0              LIMITED TO CHANGED\n         CLC   XDFCMD(8),=C'DELTAOFF'\n         MVC   XDFCMD(8),SPACES\n         MVC   XDFCMD(3),SELCMD\n         BE    GOODCMD\n         MVI   DELTA,1              LIMITED TO CHANGED\nGOODCMD  DS    0H\n         MVC   SELCMD(3),XDFCMD\n         MVI   XDFLINE,C' '   CLEAR TAB ENTRY AREA\n         MVC   XDFLINE+1(79),XDFLINE\n*\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBEND,                                                 X\n               XDFTABLE),                                              X\n               VL,MF=(E,ISPARMS)\n         MVI   ATABFL,C'0'        NO ACTIVE TABLE\n*\n         XC    ISPARMS(40),ISPARMS\n         B     SHOWAGIN       GO REPEAT THE SCREEN\n         EJECT\nINITMSG  MVI   XDFLINE,C' '   BLANK OUT THE\n         MVC   XDFLINE+1(79),XDFLINE MESSAGE BUFFER\n         BR    R7             RETURN TO OUR CALLER\n         SPACE 5\n         EJECT\nOUTMSG   DS    0H\n         ST    R7,OUT7HOLD    RETURN ADDRESS\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (VPUT,                                                  X\n               DANAMLST),                                              X\n               VL,MF=(E,ISPARMS)\n         L     R15,ISPLINK\n         CALL  (15),                                                   X\n               (TBADD,                                                 X\n               XDFTABLE),                                              X\n               VL,MF=(E,ISPARMS)\n         MVC   HILITE(8),=CL8'LOW'\n         VPUT  HILITE\n         VGET  HILITE\n         MVI   XDFLINE,C' '\n         MVC   XDFLINE+1(79),XDFLINE\n         L     R7,OUT7HOLD    RETURN ADDRESS\n         BR    R7             RETURN TO OUR CALLER\n         TITLE 'EXECUTED INSTRUCTIONS'\nMVNUMBER MVC   0(0,R15),0(R1) TO BE EXECUTED\n         TITLE 'MISCELLANEOUS CONSTANTS'\n         PRINT NOGEN\n         LTORG\n*\n         DS    0F\nZEROFF   DC    X'000000FF'\nP1       DC    PL1'+1'\nP3ZERO   DC    PL3'+0'\nXDF7HOLD DS    F\nOUT7HOLD DS    F\n*\nDIGITS3  DC    X'202020'\nTHREEPT  DC    X'2020204B'\nEDIT4    DC    X'40202120'\nEDIT6    DC    X'402020202121'\nEDIT7    DC    X'402020202120D2'\nEDIT7B   DC    X'40202020212040'\nEDIT8    DC    X'4020202020202020'\nEDIT8P   DC    X'20202021204B2020'\n*\nJOBN     DC    C'JOB'\nTSU      DC    C'TSU'\nSTC      DC    C'STC'\nCTAB     DS    0H\nISPLINK  DC    V(ISPLINK)\n*\nL78      DC    F'78'\nL40      DC    F'40'\nFZEROS   DC    F'0'\nF8       DC    F'8'\nL1       DC    F'1'\nL20      DC    F'20'\n*\nH1       DC    H'1'\nH2       DC    H'2'\nH8       DC    H'8'\n*\nVCOPY    DC    CL8'VCOPY '\nZUSER    DC    CL8'ZUSER '\nUSERID   DC    CL8' '\nSPFMOVE  DC    CL8'MOVE   '\nU8       DC    F'8'\n*\nTBADD    DC    C'TBADD    '\nTBCREATE DC    C'TBCREATE '\nTBDISPL  DC    C'TBDISPL  '\nTBEND    DC    C'TBEND    '\nTBGET    DC    C'TBGET    '\nTBQUERY  DC    C'TBQUERY  '\nTBSKIP   DC    C'TBSKIP   '\nTBTOP    DC    C'TBTOP    '\nTBVCLEAR DC    C'TBVCLEAR '\nVDEFINE  DC    C'VDEFINE  '\nVDELETE  DC    C'VDELETE  '\nVGET     DC    C'VGET     '\nVPUT     DC    C'VPUT     '\nVREPLACE DC    C'VREPLACE '\n*\nNOWRITE  DC    C'NOWRITE  '\n*\nNULLENT  DC    C'()'\n*\nDANAMLST DC    C'('             DISPLAY ACTIVE NAME LIST\n         DC    C'XDFSEL   '     SELECTION CODE\n         DC    C'XDFLINE )'     JOB INFO\n*\nXDFCMD   DC    CL40' '\nSELCMD   DC    CL40' '\n*\nSPACES   DC    CL80' '\nCZEROS   DC    CL8'00000000'\n*\nCHAR     DC    C'CHAR    '\n*\nXDFDATAB DC    C'XDFDATAB'\nXDFTABLE DC    C'XDFTABLE'\n*\n*\n         TITLE 'REGISTER EQUATES'\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         TITLE 'WORKING STORAGE AREAS'\nDOUBLEWD DS    D              PACKED DECIMAL WORK AREA\nTABADDRH DS    A              ADDRESS OF TABLE TO USE FOR OUTMSG\nDNMADDRH DS    A              ADDRESS OF NAMES TO USE FOR OUTMSG\nWHICH    DS    CL1\n*\nWORK4    DS    XL4\nWORK6    DS    XL6\nWORK7    DS    XL7\nDELTA    DS    XL1\nWORK8    DS    XL8\n*\nISPARMS  DS    10F            PARM LIST FOR ISPLINK\n*\n*     THE ISP TABLE FLAGS INDICATE NO ACTIVE TABLE (0), OR ONE EXISTS\nATABFL   DS    XL1     DO I HAVE A CURRENT \"DISPLAY ACTIVE\" TABLE\n*\n*\n         DS    0F\n         DC    C'TABWORK '\nTABWORK  DS    CL80\n         DS    0F\n         DC    C'TABGOTN '\nTABGOTN  DS    CL80\n         DS    0F\n*\nLINEWMS  DC    CL7' '\n*\nXDFSEL   DS    CL3            LINE SELECTION CODE\nSELSAVE  DS    CL3            LINE SELECTION CODE SAVE AREA\n*\n*\n         DS    0F\n         DC    C'SELECTED ASID '\nJOBASID  DC    CL4' '\n*\n         DS    0F\n         DC    C'SELECTED JOBNAME'\n*\nJOBNAMS  DS    CL8            JOBNAME SAVE AREA\nTYPE     DS    CL1            JOBTYPE SAVE AREA\n*\nWORK     DS    D\nHEX      DC    C'0123456789ABCDEF'\nREASONS  DC    C' ?? TPUTTGETLONGAUX<RS< WAITREQSENQ EXCHSWAP'\n*                |...|...|...|...|...|...|...|...|...|...|...\n         SPACE 2\n         LTORG\n         EJECT\nSYSHDR   DS    0CL77\n         DC    CL4'CPU='         CPU UTILIZATION\nXCPU     DC    CL3'XXX',C'%'\n         DC    CL5' AFC='        AVERAGE AVAILABLE FRAME COUNT\nXAFC     DC    CL5'XXXXX'\n         DC    CL5' PFR='        PAGE FAULT RATE\nXPFR     DC    CL4'XXXX'\n         DC    CL5' ASQ='        AUX STORAGE MANAGER QUE LENGTH\nXASQ     DC    CL4'XXXX'\n         DC    CL5' UIC='        UNIREFERENCED INTERVAL COUNT\nXUIC     DC    CL4'XXXX'\n         DC    CL5' DIO='        DEFERRED IO REQUESTS\nXDIO     DC    CL4'XXXX'\n         DC    CL5' DMN='       # OF DOMAINS IN ENTRIES\nHDRDMN   DC    C' '             MULTI-PROGRAMMING LEVEL TARGET\nXDMN1    DC    CL6'MT:RU '      MULTI-PROGRAMMING LEVEL TARGET\nXDMN2    DC    CL6'MT:RU '      MULTI-PROGRAMMING LEVEL TARGET\nXDMN3    DC    CL5'MT:RU'       MULTI-PROGRAMMING LEVEL TARGET\n         DC    CL8' '\n*\nWRK5     DS    CL5\n*\nHILITE   DS    CL4\n*\n         DC    C'XDFLINE '\nXDFLINE  DS    0CL78\nASID     DC    CL4' '\n         DC    C' '\nJOB      DC    CL8' '\n         DC    C' '\nPSTEP    DC    CL8' '\n         DC    C' '\nSTEP     DC    CL8' '\n         DC    C' '\nWHERE    DC    CL3' '\nSTATUS   DC    CL4' '\nSIZE     DC    CL5' '\nLINEWSS  DC    CL5' '\n         DC    C' '\nDP       DC    CL2' '\nLINEPGN  DC    CL3' '\nLINESWC  DC    CL4' '\n         DC    C' '\nCPUTIME  DC    CL8' '\nCPUFLAG  DC    C' '\nSIOS     DC    CL7' '\nSIOFLAG  DC    C' '\n*\nOUCBDLEN EQU   OUCBEND-OUCBNAME\n*\nOUCBDATA DS    XL(OUCBDLEN)\n*\nOUXBDLEN EQU   OUXBEND-OUXBNAME\n*\nOUXBDATA DS    XL(OUXBDLEN)\n*\n*.....................................................................*\n*        MAPPING  FOR DMDT (DOMAIN DESCRIPTOR TABLE)\n*.....................................................................*\n         SPACE\nDMDT     DS    0F\nDMDTNO   DS    XL1             DOMAIN NUMBER\n         DS    XL1             RESERVED\n         DS    XL1             RESERVED\nDMDTWT   DS    XL1             WEIGHTING FACTOR\nDMDTMPLT DS    XL2             CURRENT MPL TARGET\nDMDTRUA  DS    XL2             AVE # OF READY USERS\nDMDTGOOU DS    XL2             CUR NUMBER OF USERS GOING OUT\nDMDTCMPL DS    XL2             CURRENT MPL\nDMDTOUTU DS    XL2             CURRENT # USERS ON OUT Q\nDMDTINCU DS    XL2             CURRENT # SWAPPABLE INCORE USERS\nDMDTRUC  DS    XL4             ACCUM FOR READY USER AVERAGE\nDMDTWMS  DS    XL4             INTERVAL DOMAIN SERVICE ACCUM\nDMDTTWSR DS    XL4             WEIGHTED INTERVAL DOMAIN SERVICE\nDMDTAOBJ DS    XL1             USER PERFORMANCE OBJECTIVE NUMBER\nDMDTDOBJ DS    XL1             DOMAIN PERFORMANCE OBJECTIVE NUMBER\nDMDTFWKL DS    XL2             DOMAIN FIXED WORKLOAD LEVEL\nDMDTCIDX DS    XL2             CONTENTION INDEX\nDMDTNSW  DS    XL2             CURRENT NUMBER OF NONSWAPPABLE IN USERS\nDMDTRUMX DS    XL2             MAX NUMBER OF READY USERS IN INTERVAL\nDMDTFLGS DS    XL1             FLAG BYTE\nDMDTRTO  EQU   128             RTO PERIOD IN THIS DOMAIN\n         DS    XL1             RESERVED\nDMDTTRNC DS    XL4             TRANSACTION COUNT FOR RTO\nDMDTTRNT DS    XL4             ELAPSED TIME ACCUM FOR RTO\nDMDTTWET DS    XL4             ELAPSED TIME AVERAGE FOR RTO\n*\nDMDTLO   DS    XL1             MIN  MPL LEVEL\nDMDTHI   DS    XL1             MAX  MPL LEVEL\n*\n         DS    XL4             RESERVED\n         DS    XL4             RESERVED\nDMDTEND  DS    0X              END OF DMT\nDMDTLEN  EQU   *-DMDT\nDMDT2    DS    XL(DMDTLEN)\nDMDT3    DS    XL(DMDTLEN)\nR4SAV    DS    F                 REG. 4 SAVE AREA\nCPUTAB   DC    100CL44' '        CPUTABLE SAVE AREA\n         DC    X'FF'             END OF CPUTABLE\n         ORG   CPUTAB\nCLC26    DS    CL31              ASID, JOB, PROCSTEP, STEP\nCLCPU    DS    CL2               CPU SECONDS\n         CNOP  0,8\n***\n*  THE FOLLOWING WAS ADDED TO PROVIDE ADDRESSABILITY TO MVS/SP 2.1.3\n*  SRM VALUES. THESE DSECTS MAY BE AVAILABLE IN \"PVTMACS\".\n***\nRMCT     DS    0F\nRMCTNAME DS    CL4\nRMCTCCT  DS    F                   POINTER TO CCT\n         DS    XL172\nRMCTDMDT DS    F                   POINTER TO DOMAIN TABLE\n         DS    XL44\nRMCTRCT  DS    F                   POINTER TO RCT\nRMCTLEN  EQU   *-RMCT\n*\nCCT      DS    0F                  SRM RES CNTL TABLE               MNP\nCCTCCT   DS    CL4                 'CCT'                            MNP\n         DS    XL96                                                 MNP\n         DS    XL2                                                  MNP\nCCVUTILP DS    XL2                 SYSTEM CPU UTILIZATION           MNP\n         DS    XL2                                                  MNP\nCCVLGFMC DS    XL2                 AVERAGE AVAILABLE FRAME COUNT    MNP\nCCTLEN   EQU   *-CCT\n*\nRCT      DS    0F                  SRM RES CNTL TABLE               MNP\nRCTRCT   DS    CL4                 'RCT'                          NERDC\n         DS    XL48\n*\nRCVCTMC  DS    H                   SAMPLE INTERVALS COUNT         NERDC\nRCVUICA  DS    H                   UIC AVERAGE                    NERDC\nRCVCPUA  DS    H                   CPU USAGE AVERAGE              NERDC\nRCVAVQC  DS    H                   AVQ LOWW COUNT                 NERDC\nRCVAFQA  DS    H                   AVG AVAIL FRAMES               NERDC\nRCVASMQA DS    H                   ASM Q LENGTH AVERAGE           NERDC\nRCVPTR   DS    H                   PAGING RATE                    NERDC\nRCVDPR   DS    H                   DEMAND PAGING RATE             NERDC\nRCVPAGRT DS    H                   TOTAL PAGING RATE              NERDC\nRCVMSPP  DS    H                   PAGE DELAY TIME (MS)           NERDC\nRCTLEN   EQU   *-RCT\n***\n*\n***\n         EJECT\n*.....................................................................*\n*        MAPPING DSECT FOR ASCB\n*.....................................................................*\n         IHAASCB\n*.....................................................................*\n*        MAPPING DSECT FOR SRM USER CONTROL BLOCK\n*.....................................................................*\n         IRAOUCB\n         IHAOUXB\n         SPACE 2\n*\n* EQUATES....\n*\n         SPACE 2\n         IHAPSA\n         IHAASVT\n         IHAPVT\n         IEECHAIN\n         CVT   DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XDF$": {"ttr": 18182, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "CBT353"}, "text": "1\n        EXECUTION DISPLAY FACILITY (XDF) INSTALLATION\n\n 1. COPY INTO YOUR ISPPLIB:\n         XDFDATAB\n         XDFHELP\n         XDFHELP1\n         XDFHELP2\n         XDFHELP3\n\n 2. SUBMIT AN ASSEMBLY OF XDF. IT DOES NOT NEED TO GO INTO ANY SPECIAL\n    LIBRARY. SAMPLE JCL IS \"XDFASM\".\n\n 3. MODIFY AN EXISTING SPF SCREEN TO INVOKE THE XDF PROGRAM.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XDFASM": {"ttr": 18184, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x000\\x000\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCXDF  JOB (X0041,QCC,ASQCC),'X-BRIAN COOK',\n//   MSGCLASS=X,\n//   MSGLEVEL=(1,1),CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=99,SYSAFF=MVSB\n//*******************************************************************\n//*                                                                **\n//* REF TECH.XA.SOURCE(XDFNEW)                                     **\n//*                                                                **\n//*******************************************************************\n//*                                                                **\n//JOBLIB   DD  DSN=SYS1.LINKLIB,DISP=SHR,\n//             UNIT=SYSDA,VOL=SER=MVSTGT\n//*                                                                **\n//ASM1    EXEC PGM=IEV90,REGION=1024K,\n//        PARM='OBJECT,NODECK,TERM,XREF(SHORT)'\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR,\n//             UNIT=SYSDA,VOL=SER=MVSTGT\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR,\n//             UNIT=SYSDA,VOL=SER=MVSDLB\n//         DD  DSN=SYS2.MACLIB,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSUT2   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSUT3   DD  SPACE=(CYL,(5,5)),\n//             UNIT=SYSDA\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=SYSDA,SPACE=(CYL,(5,5)),\n//             DISP=(MOD,PASS)\n//SYSIN    DD  DISP=SHR,DSN=TECH.XA.SOURCE(XDFNEW)\n//*\n//LKED1    EXEC PGM=HEWLH096,PARM=(XREF,LET,LIST,TERM),\n//            COND=(4,LT,ASM1),REGION=1024K\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DISP=SHR,DSN=ISP.V2R2M0.ISPLOAD,  <== ISPLINK\n//             UNIT=SYSDA,VOL=SER=MVSTGT\n//SYSLMOD  DD   DISP=SHR,DSN=ASQCC.TEST.STEPLIB\n//*YSLMOD  DD   DISP=SHR,DSN=SYS2.CMDLIB\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSIN    DD   *\n    NAME XDF(R)\n/*\n//*EFRESH  EXEC PGM=MVSCMD,PARM='F LLA,REFRESH'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XDFDATAB": {"ttr": 18186, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "CBT353"}, "text": ")ATTR\n  @  TYPE(OUTPUT) INTENS(&HILITE)\n)BODY\n%-----------------Execution Display Facility (XDF) -----------------------------\n BAT, STC, TSU, OR ALL ==>_XDFCMD                               %SCROLL =>_AMT %\n+CPU_XCPU+AFC_XAFC +PFR_XPFR+ASQ_XASQ+UIC_XUIC+DIO_XDIO+DMN_XDMN1 _XDMN2 _XDMN3\n+  ASID   JOB    PSTEP    STEP     STATUS   MEM  WSS DP PG SWP      CPU   SIO'S\n)MODEL\n_Z@Z\n)INIT\n .CURSOR=XDFCMD\n  &AMT=PAGE\n  &VARS='(XDFSEL XDFLINE)'\n  .HELP=XDFHELP\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XDFHELP": {"ttr": 18188, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "CBT353"}, "text": ")BODY\n%----------------EXECUTION DISPLAY FACILITY (XDF)-----------------\n+***********************************************************************\n+\n+  The%EXECUTION DISPLAY FACILITY+displays various system and task workload\n+  indicators. You can select batch, started tasks, or tso users on the command\n+  line by entering %BAT+,%STC+, or %TSU+. %ALL+ displays every address space.\n+\n+ %DELTA+ limits the display to those ASID's whose CPU time or SIO counts have\n+  increased.%DELTAOFF+removes that criterion.\n+\n+ %END+ or %PF3+ terminates the display.\n+\n+  The display is%refreshed+after each depression of the%ENTER+key.\n+\n+ %Scrolling+may be accomplished by erasing the command and pressing %PF8+ to\n+  scroll forward and %PF7+ to scroll backward.\n+\n+  To%refresh+the display%after scrolling, re-enter a command on the command\n+  line.\n+\n+  FOR DESCRIPTIONS OF%SYSTEM LEVEL XDF+FIELDS - DEPRESS THE%ENTER+KEY\n+\n+  TO RETURN TO THE%XDF+DISPLAY                - DEPRESS THE% END +KEY\n)PROC\n  &CONT = XDFHELP1\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XDFHELP1": {"ttr": 18190, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "CBT353"}, "text": ")BODY\n%----------------EXECUTION DISPLAY FACILITY (XDF)-----------------\n+***********************************************************************\n+\n+  %System level+indicators are displayed on the first line of the%XDF+display\n+   These fields are described as follows:\n+\n+         %CPU+   - System CPU utilization\n+         %AFC+   - Available frame count\n+         %PFR+   - Page fault rate\n+         %ASQ+   - Auxiliary storage manager queue length\n+         %UIC+   - Unreferenced interval count\n+         %DIO+   - Deferred I/O requests\n+         %DMNS+  - MPL Target/Current MPL\n+\n+\n+\n+\n+\n+\n+  FOR DESCRIPTIONS OF%TASK LEVEL XDF+FIELDS - DEPRESS THE%ENTER+KEY\n+\n+  TO RETURN TO THE%XDF+DISPLAY              - DEPRESS THE% END +KEY\n+\n)PROC\n  &CONT = XDFHELP2\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XDFHELP2": {"ttr": 18192, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "CBT353"}, "text": ")BODY\n%----------------EXECUTION DISPLAY FACILITY (XDF)-----------------\n+***********************************************************************\n+       The remainder of the%XDF+display concerns current%task status:+\n+\n+         %ASID+  - Address space ID number.\n+         %JOB+   - Job/Task name\n+         %PSTEP+ - Procedure step name (STC=started task, TSU=TSO user)\n+         %STEP+  - Job step name\n+         %STATUS+- Depress%ENTER+for detailed%STATUS+field information\n+         %MEMORY+- Amount of memory allocated\n+         %WSS+   - Working set size\n+         %DP+    - Dispatching priority\n+         %PG+    - Performance group\n+         %SWAPS+ - Swap count\n+         %CPU+   - CPU time used in seconds\n+         %*+     - indicates that CPU time has increased by more than\n+                   one second since the last previous display.\n+         %SIO's  - SIO count.\n+         %*+     - indicates that SIO count has increased by more than\n+                   100 since the last previous display.\n+\n+  FOR DESCRIPTIONS OF%XDF STATUS+FIELDS - DEPRESS THE%ENTER+KEY\n+  TO RETURN TO THE%XDF+DISPLAY          - DEPRESS THE% END +KEY\n)PROC\n  &CONT = XDFHELP3\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XDFHELP3": {"ttr": 18194, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "CBT353"}, "text": ")BODY\n%----------------EXECUTION DISPLAY FACILITY (XDF)-----------------\n+***********************************************************************\n+     The%status+of each task can be one of the following:\n+               %IN+  - Swapped in, running\n+               %OUT+ - Swapped out, ready to run\n+               %WT+  - Swapped out, not ready to run\n+               %N/S+ - Swapped in, non-swappable\n+               %<->+ - Transition state (being swapped in or out)\n+\n+     The following%swap reasons+may follow the status of swapped tasks:\n+               %TPUT+- Output terminal wait\n+               %TGET+- Input terminal wait\n+               %LONG+- Long wait detected\n+               %AUX<+- Auxiliary storage shortage\n+               %RS<+ - Real storage shortage\n+               %WAIT+- Wait detected\n+               %REQS+- Requested swap\n+               %ENQ+ - Enqueue contention detected\n+               %EXCH+- Exchange swapped\n+               %SWAP+- Unilaterally swapped\n+\n+  TO RETURN TO THE%XDF+DISPLAY           - DEPRESS THE% END +KEY\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZDOCPRT": {"ttr": 18196, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x894\\x1f\\x00\\x894\\x1f\\x12\\x00\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xc2\\xe3\\xf3\\xf5\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-12-07T00:00:00", "modifydate": "1989-12-07T12:00:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "CBT353"}, "text": "//ASQCCROT JOB (X0002,QCC,ASQCC),'X-COOK BRIAN      ',\n//   MSGCLASS=Z,CLASS=X,NOTIFY=ASQCC\n/*JOBPARM L=99,K=90\n//*\n//LIST EXEC ROTATE,B=N,SOUT=A,CC=2\n//SYSUT1   DD DISP=SHR,DSN=ASQCC.CBT.SOURCE($INDEX)\n//         DD DISP=SHR,DSN=ASQCC.CBT.SOURCE(APPLMON$)\n//         DD DISP=SHR,DSN=ASQCC.CBT.SOURCE(CDF$)\n//         DD DISP=SHR,DSN=ASQCC.CBT.SOURCE(ETPS$)\n//         DD DISP=SHR,DSN=ASQCC.CBT.SOURCE(JDF$)\n//         DD DISP=SHR,DSN=ASQCC.CBT.SOURCE(PLF$)\n//         DD DISP=SHR,DSN=ASQCC.CBT.SOURCE(VDF$)\n//         DD DISP=SHR,DSN=ASQCC.CBT.SOURCE(XDF$)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT353/FILE353.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT353", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}