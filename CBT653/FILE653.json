{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012532000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE653.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE653.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x03'", "DS1TRBAL": "b'\\xc3\\x1a'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x9e\\x00\\n\\x04\\x9f\\x00\\x00\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00\\x00\\x01\\x031\\x0f\\x01\\x031\\x0f \\x13\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-11-06T00:00:00", "modifydate": "2003-11-06T20:13:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-463"}, "text": "REGULAR CBT TAPE - VERSION 463    FILE:  653\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT463.FILE653\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,798 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/06/03    20:13:50    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE653": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00\\x00\\x01\\x031\\x0f\\x01\\x031\\x0f \\x13\\x00\\x12\\x00\\x12\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-11-06T00:00:00", "modifydate": "2003-11-06T20:13:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "CBT-463"}, "text": "//***FILE 653 is from Jim Harrison and contains a collection of     *   FILE 653\n//*           very useful programs concerning dynamic allocation,   *   FILE 653\n//*           concatenation and deconcatenation.                    *   FILE 653\n//*                                                                 *   FILE 653\n//*           email:  jimh@qis.net                                  *   FILE 653\n//*                                                                 *   FILE 653\n//*     Contents:                                                   *   FILE 653\n//*                                                                 *   FILE 653\n//*     ALLOC          OS/390 assembler code for dynamic            *   FILE 653\n//*                    allocation                                   *   FILE 653\n//*     ALLODEMO       COBOL module showing how to call             *   FILE 653\n//*                    ALLOC - find COBOL copy area in it           *   FILE 653\n//*     ASM            JCL to run the assembler                     *   FILE 653\n//*     CONCAT         Dynamic concatenation module                 *   FILE 653\n//*     DDCHCK         DDName checker (see if it's allocated        *   FILE 653\n//*                    and to whom)                                 *   FILE 653\n//*     UNALLOC        Dynamic unallocation routine (Free)          *   FILE 653\n//*                                                                 *   FILE 653\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ALLOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x031\\x0f\\x01\\x031\\x0f \\x00\\x036\\x036\\x00\\x00\\xc8\\xc1\\xd9\\xd9\\xc9\\xe2\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-06T00:00:00", "modifydate": "2003-11-06T20:00:00", "lines": 822, "newlines": 822, "modlines": 0, "user": "HARRISN"}, "text": "*          DATA SET D3ALLOCP   AT LEVEL 001 AS OF 06/22/89\n*          DATA SET D3ALLOCP   AT LEVEL 001 AS OF 05/09/89\n*          DATA SET D3ALLOCP   AT LEVEL 001 AS OF 03/17/88\n TITLE 'D3ALLOCP: DYNAMIC ALLOCATION UTILITY'\n******************************************************************\n*********  DYNAMIC ALLOCATION UTILITY                 ************\n******************************************************************\n*  WRITTEN:         NOV 14, 1984                                 *\n*  AUTHOR:          JIM HARRISON                                 *\n*  AUTHOR:          OSI, OSIE, DDA, DRMB                         *\n*  FOR MORE INFORMATION...: IBM OS/VS2 SPL:JOB MANAGEMENT        *\n******************************************************************\n*********              REGISTERS                      ************\n******************************************************************\n*        4 - BASE REGISTER                                       *\n*        5 - FIELD LEN FOR 'EX' INSTR.  INDEX IN 'LA' INST       *\n*        6 - PARAMETER ADDRESSING                                *\n*        7 - 'BAL' RETURN ADDRESS                                *\n*        8 - GETMAINED STORAGE ADDRESS                           *\n*       10 - TEXT-UNIT ADDRESS LIST POINTER  (DYN1TUP)           *\n*       15 - POINTER TO ACUTAL TEXT-UNIT DATA (DYN1TU)           *\n******************************************************************\n*  REVISION LOG:                                                 *\n*  11/87:  ADDED ADDITIONAL PARMS AND RE-ORGANIZED PROCESSING    *\n*          INTO MORE LOGICAL SUBROUTINES. INCREASED LENGTH OF    *\n*          DSNAME FIELD TO 44 CHAR.                    JRH       *\n*  3/88:   UNCONDITIONAL DISP PROCESSING WAS BRANCHING TO UNCATLG*\n*          RTN WHETHER CATLG OR UNCATLG REQUESTED. FIXED. SHL    *\n*  7/88:   ADDED ANOTHER PRIMARY SPACE FIELD USING THE EXISTING  *\n*          FILLER TO ALLOW FOR LARGER ALLOCATIONS     JRH.       *\n*  9/88: - ADDED GETMAIN/FREEMAIN LOGIC TO MAKE IT RE-ENTRANT    *\n*        - COND DISP OF KEEP FELL THRU TO DELETE!!! FIXED. JRH   *\n*        - WORK FIELD NEEDS TO BE INITED TO SPACES BEFORE EACH   *\n*          BRANCH TO THAT ROUTINE.                               *\n******************************************************************\n         EJECT\n         PRINT NOGEN\nD3ALLOCP CSECT\n         REGS\n         SAVE  (14,12)\n         LR    R4,R15              GET ENTRY POINT\n         USING D3ALLOCP,R4         USE R4 AS BASE\n*\n         L     R6,0(1)\n         USING PARMS,R6\n*\n         LA    R0,MLENGTH\n         GETMAIN  R,LV=(0)\n         LTR   R15,R15\n         BZ    GOT_IT\n         ABEND 106\nGOT_IT     EQU *\n         LR    R8,R1       ADDRESS OF GETMAINED AREA IN R1\n         USING MEMORY,R8       GETMAIN DSECT\n         ST    R8,GETMAIN_ADDR\nGOT_MEMORY EQU *\n         ST    R8,8(R13)           STORE OUR SA ADDR IN CALLER SA\n         ST    R13,4(R8)           STORE CALLERS SA ADDR IN OURS\n         LR    R13,R8              LOAD OUR SA ADDR IN R13\n*\nINIT_PROCESSING  EQU  *\n***\n***  ZERO OUT CONTROL BLOCKS\n***\n         XC    DYN1RBP(4),DYN1RBP\n         XC    DYN1RB(20),DYN1RB\n         XC    DYN1TUP(255),DYN1TUP\n         XC    DYN1TU(255),DYN1TU\n         XC    BLOCKSIZE_SAVE,BLOCKSIZE_SAVE\n         XC    DOUB,DOUB\n         XC    FWORD,FWORD\n***\n***  GET ADDRESS OF REQUEST BLOCK AND STORE IN REQUEST BLOCK PTR\n***\n         LA    R15,DYN1RB              LOAD ADDRESS OF S99RB\n         ST    R15,DYN1RBP             AND STORE IN RB POINTER\n         OI    DYN1RBP,X'80'           SET HIGH ORDER BIT 'ON'\n         USING S99RB,R15\n***\n*** FILL IN THE REQUEST BLOCK\n***\n         MVI   S99RBLN,20              LIST LENGTH(20)\n         MVI   S99VERB,S99VRBAL        VERB CODE(01)\n         LA    R0,DYN1TUP             LOAD ADDRESS OF TU POINTERS\n         ST    R0,S99TXTPP            STORE ADDRESS IN S99 RB\n***\n         LA    R15,DYN1TU         ADDRESS OF TEXT UNITS\n         USING S99TUNIT,R15       USE S99TUNIT DSECT FOR ADDRESSING\n***\n         LA    R10,DYN1TUP        ADDRESS OF TEXT UNITS POINTERS\n*                                 NO DSECT NEEDED\n         EJECT\n***********************************************************************\n**     MAINLINE PROCESSING                                           **\n***********************************************************************\n         BAL   R7,DCB_PROCESSING       PROCESS DCB INFO FOR ALL\n*                                      REQUESTS\n*\n         CLI   DSNAME,C'*'             CHECK FOR TERMINAL ALLOCATION\n         BE    SYSOUR\n         CLC   DSNAME,=C'TERM'         CHECK FOR TERMINAL ALLOCATION\n         BE    SYSOUR\n         CLC   DSNAME(5),=C'DUMMY'\n         BE    DUMMY\n         CLC   DSNAME(6),=C'SYSOUT'\n         BE    SYSOUT\n***********************************************************************\n**     DATASET PROCESSING : TU = X'0002'                             **\n***********************************************************************\n         CLI   DSNAME,C' '\n         BE    INITIAL_STATUS_PROCESSING\n         MVC   WORK_FIELD(44),SPACES\n         MVC   WORK_FIELD(44),DSNAME     MOVE DSNAME TO WORK FIELD\n         BAL   R7,FIND_LENGTH            GET LENGTH OF DSNAME\n         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'\n         MVI   S99TUKEY+1,DALDSNAM     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         A     R5,=F'1'                ADD 1 TO LENGTH\n         STH   R5,S99TULNG             MOVE IN LENGTH OF DSN\n         BAL   R7,UPDATE_POINTERS\n         EJECT\n***********************************************************************\n**     DATA SET INITIAL STATUS   X'0004' 01=OLD 02=MOD 04=NEW 08=SHR **\n***********************************************************************\nINITIAL_STATUS_PROCESSING  EQU  *\n         CLI   INIT,C' '\n         BE    NORMAL_DISP_PROCESSING\n         MVI   S99TUKEY+1,DALSTATS\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,1            MOVE IN LENGTH\n         CLI   INIT,C'O'\n         BE    OLD\n         CLI   INIT,C'M'\n         BE    MOD\n         CLI   INIT,C'N'\n         BE    NEW\nSHR      EQU   *\n         MVI   S99TUPAR,X'08'          STATUS = SHR\n         B     ENDSTAT\nOLD      EQU   *\n         MVI   S99TUPAR,X'01'          STATUS = OLD\n         B     ENDSTAT\nMOD      EQU   *\n         MVI   S99TUPAR,X'02'          STATUS = MOD\n         B     ENDSTAT\nNEW      EQU   *\n         MVI   S99TUPAR,X'04' STATUS = NEW\nENDSTAT  EQU   *\n         LA    R5,1\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**     NORMAL DISP. X'0005' ///           02=CAT 04=DELETE 08=KEEP   **\n***********************************************************************\nNORMAL_DISP_PROCESSING EQU *\n         CLI   NORM,C' '\n         BE    COND_DISP_PROCESSING\n         MVI   S99TUKEY+1,DALNDISP\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,1            MOVE IN LENGTH\n         CLI   NORM,C'D'\n         BE    ND_DEL\n         CLI   NORM,C'C'\n         BE    ND_CATLG\n         CLI   NORM,C'U'\n         BE    ND_UNCATLG\nND_KEEP  EQU   *\n         MVI   S99TUPAR,X'08'          DEFAULT IS KEEP\n         B     ENDDISP\nND_CATLG EQU   *\n         MVI   S99TUPAR,X'02'          CATALOG\n         B     ENDDISP\nND_UNCATLG EQU   *\n         MVI   S99TUPAR,X'01'          UNCATALOG\n         B     ENDDISP\nND_DEL   EQU   *\n         MVI   S99TUPAR,X'04'          DEL STATUS\nENDDISP  EQU   *\n         LA    R5,1\n         BAL   R7,UPDATE_POINTERS\n         EJECT\n***********************************************************************\n**     DATA SET CONDITIONAL DISP X'0006'                             **\n***********************************************************************\nCOND_DISP_PROCESSING  EQU  *\n         CLI   COND,C' '\n         BE    SPACE_TYPE_PROCESSING\n         MVI   S99TUKEY+1,DALCDISP\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,1            MOVE IN LENGTH\n         CLI   COND,C'U'               CHECK FOR TYPE OF REQUEST\n         BE    CD_UNCAT                BRANCH TO APPROPRIATE RTN\n         CLI   COND,C'C'\n         BE    CD_CATLG\n         CLI   COND,C'D'\n         BE    CD_DEL\nCD_KEEP  EQU   *\n         MVI   S99TUPAR,X'08'          DEFAULT: KEEP\n         B     ENDCOND\nCD_DEL   EQU   *\n         MVI   S99TUPAR,X'04'          DELETE\n         B     ENDCOND\nCD_UNCAT EQU   *\n         MVI   S99TUPAR,X'01'          UNCATALOG\n         B     ENDCOND\nCD_CATLG EQU   *\n         MVI   S99TUPAR,X'02'          CATALOG\nENDCOND  EQU   *\n         LA    R5,1\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**       SPACE TYPE: TRACKS/CYL/BLOCKS                               **\n***********************************************************************\nSPACE_TYPE_PROCESSING EQU *\n         CLI   TYPE,C' '\n         BE    RLSE_PROCESSING\n         CLI   TYPE,C'C'\n         BE    ALLOC_IN_CYLS\n         CLI   TYPE,C'B'\n         BE    ALLOC_IN_BLKS\nALLOC_IN_TRKS EQU  *\n         MVI   S99TUKEY+1,DALTRK       CYLINDERS\n         B     END_SPACE_TYPE\nALLOC_IN_CYLS EQU  *\n         MVI   S99TUKEY+1,DALCYL       CYLINDERS\n         B     END_SPACE_TYPE\nALLOC_IN_BLKS EQU  *                   BLOCKS\n         MVI   S99TUKEY+1,DALBLKLN\n         MVI   S99TUNUM+1,1\n         MVI   S99TULNG+1,3            MOVE IN LENGTH\n         LH    R0,BLOCKSIZE_SAVE\n         STCM  R0,B'0011',S99TUPAR+1\n         LA    R5,3\n         BAL   R7,UPDATE_POINTERS\n         B     PRIMARY_SPACE_PROCESSING\nEND_SPACE_TYPE EQU *\n         L     R5,=F'-2'\n         BAL   R7,UPDATE_POINTERS\n         EJECT\n***********************************************************************\n**       PRIMARY SPACE QUANTITY X'000A'                              **\n***********************************************************************\nPRIMARY_SPACE_PROCESSING EQU  *\n         CLI   PRISPC,C' '\n         BE    CK_PRISPC2\n         PACK  DOUB,PRISPC\n         B     ST_PRISPC\nCK_PRISPC2               EQU  *\n         CLI   PRISPC2,C' '\n         BE    SECONDARY_SPACE_PROCESSING\n         PACK  DOUB,PRISPC2\nST_PRISPC      EQU *\n         CVB   R5,DOUB\n         ST    R5,FWORD\n         MVI   S99TUKEY+1,DALPRIME     SET KEY FIELD = PRIMARY SPACE\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,3            SET LENGTH FIELD\n         MVC   S99TUPAR(3),FWORD+1     SET PRIMARY SPACE = PARM\n         LA    R5,3\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**       SECONDARY SPACE QUANTITY  X'000B'                           **\n***********************************************************************\nSECONDARY_SPACE_PROCESSING EQU  *\n         CLI   SECSPC,C' '\n         BE    RLSE_PROCESSING\n         PACK  DOUB,SECSPC\n         CVB   R5,DOUB\n         ST    R5,FWORD\n         MVI   S99TUKEY+1,DALSECND     SET KEY FIELD = SECONDARY SPACE\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,3            SET LENGTH FIELD\n         MVC   S99TUPAR(3),FWORD+1     SET SECONDARY SPACE = PARM\n         LA    R5,3\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**       UNUSED SPACE RELEASE (RLSE)  X'000D'                        **\n***********************************************************************\nRLSE_PROCESSING EQU *\n         CLI   RLSE_FLAG,C'Y'\n         BNE   FORMAT_PROCESSING\n         MVI   S99TUKEY+1,DALRLSE      TURN ON RELEASE INDICATOR\n*        MVI   S99TUNUM+1,0            SET NUMBER FIELD\n         L     R5,=F'-2'\n         BAL   R7,UPDATE_POINTERS\n         EJECT\n***********************************************************************\n**       FORMAT OF SPACE (IE: CONTIG) X'000E'                        **\n***********************************************************************\nFORMAT_PROCESSING EQU *\n         CLI   SPACE_FORMAT,C' '\n         BE    ROUND_PROCESSING\n         MVI   S99TUKEY+1,DALSPFRM\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,1            MOVE IN LENGTH\n         CLC   SPACE_FORMAT(3),=C'ALX'\n         BE    ALX\n         CLC   SPACE_FORMAT(4),=C'MXIG'\n         BE    MXIG\n         CLC   SPACE_FORMAT(4),=C'CONT'\n         BE    CONTIG\n         B     UNIT_PROCESSING\nALX      EQU   *\n         MVI   S99TUPAR,X'02'\n         B     END_FORMAT\nMXIG     EQU   *\n         MVI   S99TUPAR,X'04'\n         B     END_FORMAT\nCONTIG   EQU   *\n         MVI   S99TUPAR,X'08'\n         B     END_FORMAT\nEND_FORMAT   EQU *\n         LA    R5,1\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**       ROUND                        X'000F'                        **\n***********************************************************************\nROUND_PROCESSING EQU *\n         CLI   ROUND_FLAG,C'Y'\n         BNE   UNIT_PROCESSING\n         MVI   S99TUKEY+1,DALROUND\n*        MVI   S99TUNUM+1,0\n         L     R5,=F'-2'\n         BAL   R7,UPDATE_POINTERS\n         EJECT\n***********************************************************************\n**       UNIT  X'0015'                                               **\n***********************************************************************\nUNIT_PROCESSING EQU  *\n         CLI   UNIT,C' '\n         BE    VOLSER_PROCESSING\n         MVI   S99TUKEY+1,DALUNIT      SET KEY FIELD\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVC   WORK_FIELD(44),SPACES\n         MVC   WORK_FIELD(6),UNIT\n         BAL   R7,FIND_LENGTH            GET LENGTH OF DEVICE\n         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'\n         A     R5,=F'1'                ADD 1 TO LENGTH\n         STH   R5,S99TULNG             MOVE IN LENGTH OF DEVICE\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**       VOL SER   X'0010'                                           **\n***********************************************************************\nVOLSER_PROCESSING EQU *\n         CLI   VOLSER,C' '\n         BE    DDNAME_PROCESSING\n         MVI   S99TUKEY+1,DALVLSER     SET KEY FIELD\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVC   WORK_FIELD(44),SPACES\n         MVC   WORK_FIELD(6),VOLSER\n         BAL   R7,FIND_LENGTH            GET LENGTH OF VOLSER\n         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'\n         A     R5,=F'1'                ADD 1 TO LENGTH\n         STH   R5,S99TULNG             MOVE IN LENGTH OF VOLSER\n         BAL   R7,UPDATE_POINTERS\n         EJECT\n***********************************************************************\n**   DDNAME TEXT UNIT   X'0001'   OPTIONAL                           **\n***********************************************************************\nDDNAME_PROCESSING  EQU  *\n         CLI   DDNAME,C' '\n         BE    CLOSE_PROCESSING\n         MVI   S99TUKEY+1,DALDDNAM     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVC   WORK_FIELD(44),SPACES\n         MVC   WORK_FIELD(8),DDNAME\n         BAL   R7,FIND_LENGTH            GET LENGTH OF DDNAME\n         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'\n         A     R5,=F'1'                ADD 1 TO LENGTH\n         STH   R5,S99TULNG             MOVE IN LENGTH OF DSN\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**       CLOSE PROCESSING             X'001C'                        **\n***********************************************************************\nCLOSE_PROCESSING EQU *\n         CLI   CLOSE_FLAG,C'Y'\n         BNE   PDS_MEMBER_PROCESSING\n         MVI   S99TUKEY+1,DALCLOSE\n*        MVI   S99TUNUM+1,0\n         L     R5,=F'-2'\n         BAL   R7,UPDATE_POINTERS\n         EJECT\n***********************************************************************\n**  MEMNAME TEXT UNIT   X'0003'  OPTIONAL                            **\n***********************************************************************\nPDS_MEMBER_PROCESSING EQU *\n         CLI   MEMNAME,C' '\n         BE    PERMATTR\n         MVI   S99TUKEY+1,DALMEMBR     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVC   WORK_FIELD(44),SPACES\n         MVC   WORK_FIELD(8),MEMNAME\n         BAL   R7,FIND_LENGTH            GET LENGTH OF MEMBER\n         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'\n         A     R5,=F'1'                ADD 1 TO LENGTH\n         STH   R5,S99TULNG             MOVE IN LENGTH OF MEMBER\n         BAL   R7,UPDATE_POINTERS\n         EJECT\n***\n***  TURN ON PERMANENT ATTRIBUTE                                     **\n***\nPERMATTR EQU   *\n         MVI   S99TUKEY+1,DALPERMA     SET TEXT UNIT KEY TO PERMANENT\n         MVI   S99TUNUM+1,X'00'        SET NUMBER FIELD\n         ST    R15,0(R10)              STORE TEXT UNIT ADDRESS\n         OI    0(R10),X'80'           SET HIGH ORDER BIT ON LAST ADDR\n         LA    R1,DYN1RBP              POINT TO REQUEST BLOCK\n*\n         SVC   99                DYNAMIC ALLOCATION SVC\n         ST    R15,RETURN_CODE_SAVE\n*\n         LA    R11,DYN1RB\n         USING S99RB,11\n         LH    R0,S99ERROR\n         STCM  R0,B'0011',SVCERROR\n*------------------------------------------------------------*\nEXIT     EQU    *\n         L     R13,SAVEAREA+4\n         L     R10,RETURN_CODE_SAVE\n         LA    R0,MLENGTH\n         L     R8,GETMAIN_ADDR\n         FREEMAIN  R,LV=(0),A=(8)\n         LR    R15,R10              RETURN CODE FROM R10 ABOVE\n         RETURN (14,12),,RC=(15)\n*------------------------------------------------------------*\n         EJECT\n***********************************************************************\n**  SUBROUTINES                                                      **\n***********************************************************************\n*\n***********************************************************************\n**  TERMINAL SPECIFITION (SYSOUR)   X'0028' USED ONLY W/DDNAME       **\n***********************************************************************\nSYSOUR   EQU   *\n         MVI   S99TUKEY+1,DALTERM      SET KEY FIELD = TERMINAL\n*        MVI   S99TUNUM+1,0            SET NUMBER FIELD\n         L     R5,=F'-2'\n         BAL   R7,UPDATE_POINTERS\n         B     DDNAME_PROCESSING\n***********************************************************************\n**  DUMMY (NULLFILE)               X '0024' USED ONLY W/DDNAME       **\n***********************************************************************\nDUMMY    EQU   *\n         MVI   S99TUKEY+1,DALDUMMY     SET KEY FIELD = DUMMY\n*        MVI   S99TUNUM+1,0            SET NUMBER FIELD\n         L     R5,=F'-2'\n         BAL   R7,UPDATE_POINTERS\n         B     DDNAME_PROCESSING\n         EJECT\n***********************************************************************\n**  SYSOUT    X'0018'                                                **\n***********************************************************************\nSYSOUT   EQU   *\n         MVI   S99TUKEY+1,DALSYSOU     SET KEY FIELD = SYSOUT\n         CLI   SYSOCLAS,C' '          CHECK FOR SYSOUT CLASS\n         BE    NOCLASS\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,1            MOVE IN LENGTH\n         MVC   S99TUPAR(1),SYSOCLAS    MOVE IN SYSOUT CLASS\nNOCLASS  EQU   *\n         LA    R5,2\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**  SYSOUT COPIES   X'001D'                                          **\n***********************************************************************\nSYSOUT_COPIES  EQU   *\n         CLI   SYSOCOPY,C' '\n         BE    SYSOUT_HOLD\n         MVI   S99TUKEY+1,DALCOPYS\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,1            MOVE IN LENGTH\n         IC    R0,SYSOCOPY+1           MOVE # COPIES INTO PARM\n         STC   R0,S99TUPAR\n*        MVC   S99TUPAR(1),SYSOCOPY    MOVE IN NUMBER OF COPIES\n         LA    R5,2\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**  SYSOUT HOLD     X'0059'                                          **\n***********************************************************************\nSYSOUT_HOLD  EQU   *\n         CLI   SYSODISP,C' '\n         BE    SYSOUT_DEST\n         MVI   S99TUKEY+1,DALSHOLD\n*        MVI   S99TUNUM+1,0            SET NUMBER FIELD\n         L     R5,=F'-2'\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**  SYSOUT DEST     X'0058'                                          **\n***********************************************************************\nSYSOUT_DEST  EQU   *\n         CLI   SYSODEST,C' '\n         BE    DDNAME_PROCESSING\n         MVI   S99TUKEY+1,DALSUSER\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVC   WORK_FIELD(44),SPACES\n         MVC   WORK_FIELD(8),SYSODEST\n         BAL   R7,FIND_LENGTH            GET LENGTH OF MEMBER\n         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'\n         A     R5,=F'1'                ADD 1 TO LENGTH\n         STH   R5,S99TULNG             MOVE IN LENGTH OF MEMBER\n         BAL   R7,UPDATE_POINTERS\n         B     DDNAME_PROCESSING\n         EJECT\n***********************************************************************\n**       BUILD DCB ATTRIBUTES                                        **\n***********************************************************************\nDCB_PROCESSING    EQU  *\n         ST    R7,DCB_RETURN_ADDR\nEROPT_PROCESSING  EQU  *             KEY = X'0049'\n         CLI   EROPT,C' '\n         BE    BUFNO_PROCESSING\n         MVI   S99TUKEY+1,DALEROPT     SET KEY FIELD\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,1            SET LENGTH FIELD\n         CLC   EROPT(2),=C'SK'\n         BE    SKIP_EROPT\n         CLC   EROPT(2),=C'AC'\n         BE    ACCEPT_EROPT\n         MVI   S99TUPAR,X'20'     ABEND\n         B     END_EROPT\nSKIP_EROPT EQU   *\n         MVI   S99TUPAR,X'40'     SKIP\n         B     END_EROPT\nACCEPT_EROPT EQU   *\n         MVI   S99TUPAR,X'80'     ACCEPT\nEND_EROPT EQU   *\n         LA    R5,1\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**       BUFNO PARAMETER   X'0034'                                   **\n***********************************************************************\nBUFNO_PROCESSING EQU   *\n         CLI   BUFNO,C' '\n         BE    LRECL_PROCESSING\n         CLC   BUFNO,=C'000'\n         BE    LRECL_PROCESSING\n         MVI   S99TUKEY+1,DALBUFNO\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,1            MOVE IN LENGTH\n         IC    R0,BUFNO+1              MOVE # BUFFERS\n         STC   R0,S99TUPAR\n         LA    R5,2\n         BAL   R7,UPDATE_POINTERS\n         EJECT\n***********************************************************************\n**       LRECL  X'0042'                                              **\n***********************************************************************\nLRECL_PROCESSING EQU   *\n         CLC   LRECL,=C'00000'\n         BE    BLKSIZE_PROCESSING\n         CLC   LRECL,=C'     '\n         BE    BLKSIZE_PROCESSING\n         PACK  DOUB,LRECL\n         CVB   R5,DOUB\n         ST    R5,FWORD\n         MVI   S99TUKEY+1,DALLRECL     SET KEY FIELD\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,2            SET LENGTH FIELD\n         MVC   S99TUPAR(2),FWORD+2     MOVE IN LRECL REQUESTED\n         LA    R5,2\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**       BLKSIZE  X'0030'                                            **\n***********************************************************************\nBLKSIZE_PROCESSING EQU  *\n         CLC   BLKSIZE,=C'00000'\n         BE    DSORG_PROCESSING\n         CLC   BLKSIZE,=C'     '\n         BE    DSORG_PROCESSING\n         PACK  DOUB,BLKSIZE\n         CVB   R5,DOUB\n         ST    R5,FWORD\n         STH   R5,BLOCKSIZE_SAVE\n         MVI   S99TUKEY+1,DALBLKSZ     SET KEY FIELD\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,2            SET LENGTH FIELD\n         MVC   S99TUPAR(2),FWORD+2     SET BLOCKSIZE = PARM\n         LA    R5,2\n         BAL   R7,UPDATE_POINTERS\n         EJECT\n***********************************************************************\n**     DATA SET ORGANIZATION  X'003C'\n***********************************************************************\nDSORG_PROCESSING EQU  *\n         CLI   DSORG,C' '\n         BE    RECFM_PROCESSING\n         MVI   S99TUKEY+1,DALDSORG\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,2            SET LENGTH\n         CLC   DSORG,=C'VS'\n         BE    VSAM\n         CLI   DSORG,C'D'\n         BE    DIRECT_ACCESS\n         CLC   DSORG,=C'PO'\n         BE    PDS\n*        CLC   DSORG,=C'PS'\n*        BE    SEQ\nSEQ      EQU   *\n         MVI   S99TUPAR,X'40'      SEQUENTIAL DEFAULT\n         B     CHECK_UNMOVABLE\nDIRECT_ACCESS EQU   *\n         MVI   S99TUPAR,X'20'\n         B     CHECK_UNMOVABLE\nPDS      EQU   *\n         MVI   S99TUPAR,X'02'      PARTITIONED\n         B     CHECK_UNMOVABLE\nVSAM     EQU   *\n         MVI   S99TUPAR+1,X'08'    VSAM (NOTE: THIS IS IN SECOND BYTE)\n         B     ENDDSORG\nCHECK_UNMOVABLE EQU *\n         CLI   DSORG+2,C'U'        IF UNMOVEABLE REQUESTED\n         BNE   ENDDSORG            'ORING' WITH X'01' WILL CREATE\n         OI    S99TUPAR,X'01'      THE REQUIRED VALUE\nENDDSORG  EQU *\n         LA    R5,2\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**       RECFM    X'0049'                                            **\n***********************************************************************\nRECFM_PROCESSING EQU  *\n         CLI   RECFM,C' '\n         BE    DIRQTY_PROCESSING\n         MVI   S99TUKEY+1,DALRECFM     SET KEY FIELD\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,1            SET LENGTH FIELD\n*\n         CLI   RECFM,C'U'\n         BE    UNDEF_RECFM\n         CLI   RECFM,C'F'\n         BE    F_RECFM\n         CLI   RECFM,C'V'\n         BE    V_RECFM\nF_RECFM EQU   *                    SET UP INITIAL RECFM VALUES FOR\n         MVI   S99TUPAR,X'80'      FIEXED, VARIABLE OR UNDEFINDED\n         B     CHECK_BLOCKING\nV_RECFM EQU   *\n         MVI   S99TUPAR,X'40'\n         B     CHECK_BLOCKING\nUNDEF_RECFM  EQU  *\n         MVI   S99TUPAR,X'C0'      UNDEF REQUIRES NO MORE PROCESSING\n         B     END_RECFM\n*\nCHECK_BLOCKING EQU *               IF BLOCKING REQUESTED, 'ORING'\n         CLI   RECFM+1,C'B'        CURRENT VALUE WITH X'10' WILL\n         BNE   CHECK_ANSI          GIVE US THE NEEDED VALUE.\n         OI    S99TUPAR,X'10'\nCHECK_ANSI     EQU  *              IF ANSI REQUESTED, ALSO 'OR'\n         CLI   RECFM+2,C'A'        WITH X'04'\n         BNE   END_RECFM\n         OI    S99TUPAR,X'04'\nEND_RECFM  EQU  *\n         LA    R5,1\n         BAL   R7,UPDATE_POINTERS\n         EJECT\n***********************************************************************\n**       DIRECTORY BLOCK QUANTITY  X'000C'                           **\n***********************************************************************\nDIRQTY_PROCESSING EQU  *\n         CLC   DIRQTY,=C'000'\n         BE    END_DCB_PROCESSING\n         CLC   DIRQTY,=C'   '\n         BE    END_DCB_PROCESSING\n         PACK  DOUB,DIRQTY\n         CVB   R5,DOUB\n         ST    R5,FWORD\n         MVI   S99TUKEY+1,DALDIR       SET KEY FIELD = DIRECTORY BLOCK\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,3            SET LENGTH FIELD\n         MVC   S99TUPAR(3),FWORD+1     MOVE IN QUANTITY REQUESTED\n         LA    R5,3\n         BAL   R7,UPDATE_POINTERS\nEND_DCB_PROCESSING EQU *\n         L     R7,DCB_RETURN_ADDR\n         BR    R7\n         EJECT\n*\n*****************************************************************\n*** THIS SUBROUTINE IS ENTERED VIA AN 'EX' INSTRUCTION TO ALLOW\n*** VARIABLE LENGTH MOVES OF PARM DATA TO THE TEXT-UNIT AREA.\n*****************************************************************\n*\nMOVE_PARM  EQU  *\n         MVC   S99TUPAR(0),WORK_FIELD\n*\n         EJECT\n*\n*\n*****************************************************************\n***  THIS SUBROUTINE STORES THE ADDRESS OF THE JUST BUILT TEXT-\n***  UNIT IN OUR LIST OF ADDRESSES. THEN IT BUMPS UP THE POINTER\n***  (R10) 4 BYTES TO POINT TO THE NEXT POSITON IN THE LIST.\n***  IT ALSO INCREMENTS R15 BY THE LENGTH OF THE JUST STORED\n***  TEXT UNIT TO POINT TO THE NEXT UNUSED AREA.  THE OFFSET\n***  OF 6 IS FAIRLY CONSTANT.  R5 IS USED AS AN INDEX TO INCREASE\n***  INCREASE OR DECREASE THE DISPLACEMENT. (CAN BE POSITIVE OR\n***  NEGATIVE !!).  IT IS SET JUST BEFORE EACH 'BAL'.\n*****************************************************************\n*\n*\nUPDATE_POINTERS  EQU  *\n         ST    R7,UPDATE_POINTER_RETURN_ADDR\n         ST    R15,0(R10)              STORE TEXT UNIT ADDRESS\n         LA    R10,4(R10)              BUMP UP TEXT POINTER POSITION\n         LA    R15,6(R5,R15)           POINT TO NEXT TEXT UNIT POSITION\n         L     R7,UPDATE_POINTER_RETURN_ADDR\n         BR    R7\n         EJECT\n***\n*****************************************************************\n***  SUBROUTINE TO FIND LENGTH OF PARAMETER VALUE\n*****************************************************************\n***\nFIND_LENGTH EQU  *\n         LA    R5,WORK_FIELD+43          POINT TO END OF WORK FIELD\n         LA    R0,WORK_FIELD             POINT TO START OF WORK FIELD\nCHECK_SPACE EQU *\n         CLI   0(R5),X'40'        CHECK FOR SPACES\n         BNE   FOUND_END          NOT SPACE? THEN WE'RE DONE\n         BCT   R5,CHECK_SPACE     DECREMENT WORK FIELD POINTER\n*                                 AND CHECK NEXT POSITION\nFOUND_END EQU *\n         SR    R5,R0              SUBTRACT END LENGTH FROM START\n         BR    R7                 TO GIVE US LENGTH OF FIELD\n         EJECT\n***\n***\n*----------------------------------------------------------*\n*     WORKING STORAGE                                      *\n*----------------------------------------------------------*\nSPACES                              DC    CL44' '\nMEMORY   DSECT\nSAVEAREA                            DC    18F'0'\nGETMAIN_ADDR                        DS    F\nRETURN_CODE_SAVE                    DS    F\nLOWVAL                              DC    D'0'\nDOUB                                DC    D'0'\nFWORD                               DC    F'0'\nDCB_RETURN_ADDR                     DC    F'0'\nUPDATE_POINTER_RETURN_ADDR          DC    F'0'\nBLOCKSIZE_SAVE                      DC    H'0'\nWORK_FIELD                          DC    CL44' '\nFIRST_TIME                          DC    C'Y'\n*\nDYN1RBP   DS   F                       SVC 99 REQ BLOCK POINTER\nDYN1RB    DS   5F                      SVC 99 REQUEST BLOCK\nDYN1TUP   DS   CL255                   SPACE FOR TEXT POINTERS\nDYN1TU    DS   CL255                   SPACE FOR TEXT UNITS\nDYN1LEN   EQU  *-DYN1RBP               LENGTH OF SPACE USED\nMLENGTH  EQU *-SAVEAREA\n*\n         EJECT\n*\n* DSECT MACRO\n         IEFZB4D0\n*\n         EJECT\n* MNEMONICS MACRO\n         IEFZB4D2\n*\n         EJECT\n**********************************************************************\n*   ALLOCATION PARAMETERS                                            *\n**********************************************************************\n**********************************************************************\n*   ALLOCATION PARAMETERS                                            *\n**********************************************************************\nPARMS              DSECT\nDDNAME             DS    CL8         DDNAME\nDSNAME_PARMAMETERS DS    0C\nDSNAME             DS    CL44        NAME OF DATASET TO BE ALLOCATED\nMEMNAME            DS    CL8         MEMBER-NAME (IF DSORG = PO)\nINIT               DS    CL1         DATASET INITIAL STATUS\n*                                    N = NEW  O = OLD\n*                                    M = MOD  S = SHR\nNORM               DS    CL1         NORMAL DISP\n*                                    C = CATALOG  D = DELETE  K = KEEP\nCOND               DS    CL1         CONDITIONAL DISP\n*                                    C = CATALOG  D = DELETE  K = KEEP\nPRISPC             DS    CL3         PRIMARY SPACE REQUESTED\nSECSPC             DS    CL3         SECONDARY\nTYPE               DS    CL1         TRACKS OR BLOCKS OR CYLINDERS\n*                                    T = TRKS  C = CYL  B = BLKS\nRLSE_FLAG          DS    CL1         RELEASE INDICATOR\n*                                    Y = RELEASE UNUSED SPACE\nROUND_FLAG         DS    CL1         IS SPC IN BLOCKS, ROUND UP TO CYL?\n*                                    Y = YES\nCLOSE_FLAG         DS    CL1         UNNALLOC AT CLOSE?\n*                                    Y = YES\nSPACE_FORMAT       DS    CL4         FORMAT OF SPACE\n*                                    ALX, MXIG, CONT\nUNIT               DS    CL6         DEVICE TYPE\n*                                    DEVICE TYPE OR GENERIC NAME\nVOLSER             DS    CL6         VOLUME SERIAL\n*\nDCB_PARMAMETERS    DS    0C\nDSORG              DS    CL3         DATASET ORGANIZATION\n*                                    PS, PO, DA, PSU, POU, DAU\nLRECL              DS    CL4         RECORD LENGTH\nBLKSIZE            DS    CL5         BLOCKSIZE\nDIRQTY             DS    CL3         DIRECTORY BLOCKS\nRECFM              DS    CL3         RECORD FORMAT\n*                                    F FB FBA V VB VBA U\nEROPT              DS    CL2         ERROR OPTION\n*                                    AB = ABEND AC = ACCEPT SK = SKIP\nBUFNO              DS    CL2         NUMBER OF BUFFERS TO ALLOCATE\n*                                    VALUE FROM 1 - 255 BINARY\n*\nSYSOUT_PARMAMETERS DS    0C\nSYSOCLAS           DS    CL1     VALID SYSOUT SYSOUT CLASS\n*                                IE: A, Q, L\nSYSODEST           DS    CL8     REMOTE DESTINATION (FULL NAME)\n*                                IE: R1, R14\nSYSODISP           DS    CL1     DISPOSITON OF SYSOUT\n*                                H = HOLD\nSYSOCOPY           DS    CL2     NUMBER OF SYSOUT COPIES 1-255 BINARY\nERROR_CODES        DS    0C\nSVCERROR           DS    CL2     SVC 99 ERROR REASON CODE\nPRISPC2            DS    CL5     FOR LARGE PRIMARY SPC REQUESTS\nFILLER             DS    CL45\n         EJECT\n         CSECT          PANVALET TIME STAMP\nPANVALET DC    CL47'001D3ALLOCP  06/22/89 COMPILED 92140 -  7:57:19'\n         END   D3ALLOCP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALLODEMO": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x031\\x0f\\x01\\x031\\x0f \\x00\\x01\\xab\\x01\\xab\\x00\\x00\\xc8\\xc1\\xd9\\xd9\\xc9\\xe2\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-06T00:00:00", "modifydate": "2003-11-06T20:00:00", "lines": 427, "newlines": 427, "modlines": 0, "user": "HARRISN"}, "text": " IDENTIFICATION DIVISION.                                         12/27/88\n                                                                  D3ALT00P\n PROGRAM-ID.       D3ALT00P.                                         LV001\n\n AUTHOR.           JIM HARRISON.\n\n DATE-COMPILED.\n\n DATE-WRITTEN.     NOV 14, 1984.\n******************************************************************\n******                                                      ******\n******  D3ALDRP - DRIVER TO CALL DYNAMIC ALLOCATION ROUTINES******\n******            ON-LINE FOR TESTING PURPOSES.             ******\n******                                                      ******\n******************************************************************\n**    CALLS:                                                    **\n**       DDALLOC - DYNAMIC ALLOCATION (DDNAME AND/OR DATASET)   **\n**       DDUNAL - DYNAMIC UNALLOCATION (FREE)                   **\n******************************************************************\n     EJECT\n ENVIRONMENT DIVISION.\n\n CONFIGURATION SECTION.\n\n SOURCE-COMPUTER.   IBM-370-168.\n\n OBJECT-COMPUTER.   IBM-370-168.\n\n INPUT-OUTPUT SECTION.\n\n FILE-CONTROL.\n     EJECT\n DATA DIVISION.\n\n FILE SECTION.\n\n WORKING-STORAGE SECTION.\n 77  PAN-VALET PICTURE X(47) VALUE\n     '001D3ALT00P  12/27/88 COMPILED 89123 - 14:20:44'.\n\n 01  ISPF-NAME-LISTS.\n     05  LEN-44-LIST                     PIC X(9)\n           VALUE '(DSNAME)'.\n     05  LEN-8-LIST                      PIC X(30)\n           VALUE '(DDNAME MEMNAME SYSODEST) '.\n     05  LEN-6-LIST                      PIC X(20)\n           VALUE '(VOLSER DEVTYPE)'.\n     05  LEN-5-LIST                      PIC X(40)\n           VALUE '(BLKSIZE RECODE RSCODE PRISPC) '.\n     05  LEN-4-LIST                      PIC X(40)\n           VALUE '(FORMAT LRECL)'.\n     05  LEN-3-LIST                      PIC X(40)\n           VALUE '(SECSPC DSORG DIRQTY RECFM)'.\n     05  LEN-2-LIST                      PIC X(40)\n           VALUE '(EROPT BUFNO SYSOCOPY SVCERROR)   '.\n     05  LEN-1-LIST.\n         10  FILLER                      PIC X(45)\n               VALUE '(INIT NORM COND SPTYPE RLFLAG ROFLAG '.\n         10  FILLER                      PIC X(40)\n               VALUE 'CLFLAG SYSOCLAS SYSODISP OPTION)'.\n\n 01  ISPF-WS.\n     05  LEN-44-WS.\n         10  DSNAME                      PIC X(44).\n     05  LEN-8-WS.\n         10  DDNAME                      PIC X(8).\n         10  MEMNAME                     PIC X(8).\n         10  SYSODEST                    PIC X(8).\n     05  LEN-6-WS.\n         10  VOLSER                      PIC X(6).\n         10  DEVTYPE                     PIC X(6).\n     05  LEN-5-WS.\n         10  BLKSIZE                     PIC X(5).\n         10  RECODE                      PIC X(5).\n         10  RSCODE                      PIC X(5).\n         10  PRISPC                      PIC X(5).\n     05  LEN-4-WS.\n         10  SFORMAT                     PIC X(4).\n         10  LRECL                       PIC X(4).\n     05  LEN-3-WS.\n         10  SECSPC                      PIC X(3).\n         10  DSORG                       PIC X(3).\n         10  DIRQTY                      PIC X(3).\n         10  RECFM                       PIC X(3).\n     05  LEN-2-WS.\n         10  EROPT                       PIC X(2).\n         10  BUFNO                       PIC X(2).\n         10  SYSOCOPY                    PIC X(2).\n         10  SVCERROR                    PIC X(2).\n     05  LEN-1-WS.\n         10  INIT                        PIC X(1).\n         10  NORM                        PIC X(1).\n         10  COND                        PIC X(1).\n         10  SPTYPE                      PIC X(1).\n         10  RLFLAG                      PIC X(1).\n         10  ROFLAG                      PIC X(1).\n         10  CLFLAG                      PIC X(1).\n         10  SYSOCLAS                    PIC X(1).\n         10  SYSODISP                    PIC X(1).\n         10  OPTION                      PIC X(1).\n\n 01  MISC-FIELDS.\n     05  EXIT-FLAG                       PIC X(1).\n     05  SCREEN                          PIC X(08)\n           VALUE 'SDALT00 '.\n\n         COPY DDUNAL.\n**********************************************************\n*   COPYLIB MEMBER-NAME  - DDALLOC                       *\n*   PANVALET MEMBER-NAME - D3CP021P                      *\n**********************************************************\n*   USED IN CALL TO MODULE DDALLOC (D3ALLOCP)            *\n**********************************************************\n* NOTE: THIS IS A NEW VERSION OF THE 'SDALLO' COPYAREA.  *\n* IT IS NOT COMPATABLE WITH THE PREVIOUS VERSION.        *\n**********************************************************\n* RESP COMPONENT...:  OSI/OSIE/DDA/DRMB     12/2/87  JRH *\n**********************************************************\n\n 01  DDALLOC-ALLOCATION-FIELDS.\n     05  A-DDNAME                        PIC X(8).\n     05  A-DATASET-PARAMETERS.\n         10  A-DSNAME                    PIC X(44).\n             88  ALLOCATION-IS-TO-SYSOUT\n                                     VALUE 'SYSOUT '.\n             88  ALLOCATION-IS-TO-TERMINAL\n                                     VALUE '*'.\n             88  ALLOCATION-IS-TO-DUMMY\n                                     VALUE 'DUMMY'.\n         10  A-MEMNAME                   PIC X(8).\n         10  A-DISPOSITION               PIC X(1).\n             88  ALLOCATION-IS-NEW   VALUE 'N'.\n             88  ALLOCATION-IS-OLD   VALUE 'O'.\n             88  ALLOCATION-IS-SHR   VALUE 'S'.\n             88  ALLOCATION-IS-MOD   VALUE 'M'.\n         10  A-NORMAL-DISP               PIC X(1).\n             88  NORMAL-DISP-IS-CATALOG\n                                     VALUE 'C'.\n             88  NORMAL-DISP-IS-KEEP VALUE 'K'.\n             88  NORMAL-DISP-IS-DELETE\n                                     VALUE 'D'.\n         10  A-CONDITIONAL-DISP          PIC X(1).\n             88  CONDITIONAL-DISP-IS-CATALOG\n                                     VALUE 'C'.\n             88  CONDITIONAL-DISP-IS-KEEP\n                                     VALUE 'K'.\n             88  CONDITIONAL-DISP-IS-DELETE\n                                     VALUE 'D'.\n         10  A-PRIMARY-SPACE             PIC 9(3).\n         10  A-PRIMARY-SPACE-AN    REDEFINES\n            A-PRIMARY-SPACE              PIC X(3).\n         10  A-SECONDARY-SPACE           PIC 9(3).\n         10  A-SECONDARY-SPACE-AN  REDEFINES\n            A-SECONDARY-SPACE            PIC X(3).\n         10  A-SPACE-TYPE                PIC X(1).\n             88  ALLOCATE-SPACE-IN-TRACKS\n                                     VALUE 'T'.\n             88  ALLOCATE-SPACE-IN-CYLINDERS\n                                     VALUE 'C'.\n             88  ALLOCATE-SPACE-IN-BLOCKS\n                                     VALUE 'B'.\n         10  A-RLSE-INDICATOR            PIC X(1).\n             88  RELEASE-UNUSED-SPACE\n                                     VALUE 'Y'.\n         10  A-ROUND-INDICATOR           PIC X(1).\n             88  ROUND-UP-TO-CYLINDER\n                                     VALUE 'Y'.\n         10  A-CLOSE-INDICATOR           PIC X(1).\n             88  UNALLOC-AT-CLOSE    VALUE 'Y'.\n***\n***  SPACE FORMAT: ALX, MXIG, CONTIG\n***\n         10  A-SPACE-FORMAT              PIC X(4).\n         10  A-DEVICE                    PIC X(6).\n         10  A-VOL-SER                   PIC X(6).\n\n     05  A-DCB-PARAMETERS.\n***\n***  DSORG:  PS, PO, DA, PSU, POU, DAU, VS\n***\n         10  A-DSORG                     PIC X(3).\n         10  A-LRECL                     PIC 9(4).\n         10  A-LRECL-AN              REDEFINES A-LRECL\n                                         PIC X(4).\n         10  A-BLOCKSIZE                 PIC 9(5).\n         10  A-BLOCKSIZE-AN          REDEFINES A-BLOCKSIZE\n                                         PIC X(5).\n         10  A-DIRECTORY                 PIC 9(3).\n         10  A-DIRECTORY-AN          REDEFINES A-DIRECTORY\n                                         PIC X(3).\n***\n***  RECFM:  F, FB, FBA, V, VB, VBA\n***\n         10  A-RECFM                     PIC X(3).\n         10  A-ERROR-OPTION              PIC X(2).\n             88  EROPT-ACCEPT        VALUE 'AC'.\n             88  EROPT-SKIP          VALUE 'SK'.\n             88  EROPT-ABEND         VALUE 'AB'.\n         10  A-NUMBER-OF-BUFFERS         PIC S9(3)       COMP.\n\n     05  A-SYSOUT-PARAMETERS.\n         10  A-SYSOUT-CLASS              PIC X(1).\n         10  A-SYSOUT-DEST               PIC X(8).\n         10  A-SYSOUT-DISP               PIC X(1).\n             88  HOLD-SYSOUT         VALUE 'H'.\n         10  A-SYSOUT-COPIES             PIC S9(3)       COMP.\n     05  A-ERROR-CODES.\n         10  A-ERROR-REASON              PIC S9(4)       COMP.\n     05  A-PRIMARY-SPACE2                PIC X(5).\n     05  FILLER                          PIC X(45).\n         COPY SDCNCT.\n         COPY SDISP00.\n     EJECT\n PROCEDURE DIVISION.\n     PERFORM 1000-INIT-RTN\n        THRU 1000-EXIT.\n     PERFORM 100-MAIN-LOOP\n        THRU 100-EXIT\n             UNTIL EXIT-FLAG EQUAL TO 'Y'.\n     MOVE SPACES TO ISPF-PARAMETERS.\n     MOVE 'VDELETE' TO I-FUNCTION.\n     MOVE '*' TO I-PARM1.\n     PERFORM 200-CALL-ISPF\n        THRU 200-EXIT.\n     GOBACK.\n\n 100-MAIN-LOOP.\n\n     MOVE SPACES TO ISPF-PARAMETERS.\n     MOVE PANEL-DISPLAY TO I-FUNCTION.\n     MOVE SCREEN TO I-PARM1.\n     PERFORM 200-CALL-ISPF\n        THRU 200-EXIT.\n\n     IF RETURN-CODE GREATER THAN 0\n         MOVE 'Y' TO EXIT-FLAG\n         GO TO 100-EXIT.\n\n     MOVE ZEROS TO RETURN-CODE.\n\n     IF OPTION EQUAL TO 'A'\n         PERFORM 300-ALLOCATE\n            THRU 300-EXIT\n     ELSE\n         IF OPTION EQUAL 'U'\n             PERFORM 600-UNALLOCATE\n                THRU 600-EXIT.\n\n 100-EXIT.\n     EXIT.\n     EJECT\n**************************************************************\n\n 300-ALLOCATE.\n**************************************************************\n     MOVE DSNAME TO A-DSNAME.\n     MOVE DDNAME TO A-DDNAME.\n     MOVE MEMNAME TO A-MEMNAME.\n     MOVE INIT TO A-DISPOSITION.\n     MOVE NORM TO A-NORMAL-DISP.\n     MOVE COND TO A-CONDITIONAL-DISP.\n\n     IF PRISPC NUMERIC\n        MOVE PRISPC TO A-PRIMARY-SPACE2\n     ELSE\n        MOVE SPACES TO A-PRIMARY-SPACE2.\n\n     IF SECSPC NUMERIC\n        MOVE SECSPC TO A-SECONDARY-SPACE-AN\n     ELSE\n        MOVE SPACES TO A-SECONDARY-SPACE-AN.\n\n     MOVE SPTYPE TO A-SPACE-TYPE.\n     MOVE RLFLAG TO A-RLSE-INDICATOR.\n     MOVE ROFLAG TO A-ROUND-INDICATOR.\n     MOVE CLFLAG TO A-CLOSE-INDICATOR.\n     MOVE SFORMAT TO A-SPACE-FORMAT.\n     MOVE DEVTYPE TO A-DEVICE.\n     MOVE VOLSER TO A-VOL-SER.\n     MOVE DSORG TO A-DSORG.\n\n     IF LRECL NUMERIC\n         MOVE LRECL TO A-LRECL-AN\n     ELSE\n         MOVE SPACES TO A-LRECL-AN.\n\n     IF BLKSIZE NUMERIC\n         MOVE BLKSIZE TO A-BLOCKSIZE-AN\n     ELSE\n         MOVE SPACES TO A-BLOCKSIZE-AN.\n\n     IF DIRQTY NUMERIC\n        MOVE DIRQTY TO A-DIRECTORY-AN\n     ELSE\n        MOVE SPACES TO A-DIRECTORY-AN.\n\n     MOVE RECFM TO A-RECFM.\n     MOVE EROPT TO A-ERROR-OPTION.\n\n     IF BUFNO NUMERIC\n         MOVE BUFNO TO A-NUMBER-OF-BUFFERS.\n\n     MOVE SYSOCLAS TO A-SYSOUT-CLASS.\n     MOVE SYSODEST TO A-SYSOUT-DEST.\n     MOVE SYSODISP TO A-SYSOUT-DISP.\n\n     IF SYSOCOPY NUMERIC\n         MOVE SYSOCOPY TO A-SYSOUT-COPIES.\n\n     CALL 'DDALLOC' USING DDALLOC-ALLOCATION-FIELDS.\n     MOVE RETURN-CODE TO RECODE.\n     MOVE A-ERROR-REASON TO RSCODE.\n\n 300-EXIT.\n     EXIT.\n     EJECT\n\n 600-UNALLOCATE.\n\n     MOVE DSNAME TO UNAL-DSNAME.\n     MOVE DDNAME TO UNAL-DDNAME.\n     MOVE MEMNAME TO UNAL-MEMNAME.\n\n     MOVE ZEROS TO RETURN-CODE.\n\n     CALL 'DDUNAL' USING DDUNAL-UNALLOC-FIELDS.\n\n     MOVE RETURN-CODE TO RECODE.\n     MOVE UNAL-ERROR-REASON TO RSCODE.\n\n 600-EXIT.\n     EXIT.\n     EJECT\n 200-CALL-ISPF.\n     CALL 'ISPLINK' USING I-FUNCTION\n                          I-PARM1\n                          I-PARM2\n                          I-PARM3\n                          I-PARM4\n                          I-PARM5\n                          I-PARM6.\n\n 200-EXIT.\n     EXIT.\n     EJECT\n 1000-INIT-RTN.\n     MOVE SPACES TO DDALLOC-ALLOCATION-FIELDS\n           ISPF-WS\n           DDUNAL-UNALLOC-FIELDS.\n     MOVE ZEROS TO RETURN-CODE.\n     MOVE SPACES TO ISPF-PARAMETERS.\n     MOVE 'CONTROL' TO I-FUNCTION.\n     MOVE 'ERRORS' TO I-PARM1.\n     MOVE 'RETURN' TO I-PARM2.\n     PERFORM 200-CALL-ISPF\n        THRU 200-EXIT.\n     PERFORM 9900-VDEFINE-ISPF-VARIABLES\n        THRU 9900-EXIT.\n\n 1000-EXIT.\n     EXIT.\n     EJECT\n*****************************************************************\n\n 9900-VDEFINE-ISPF-VARIABLES.\n*****************************************************************\n     MOVE +44 TO VARIABLE-LENGTH-1.\n     CALL 'ISPLINK' USING VDEFINE\n                          LEN-44-LIST\n                          LEN-44-WS\n                          CHARACTER-FORMAT\n                          VARIABLE-LENGTH-1\n                          NOBSCAN-OPTION.\n     MOVE +8 TO VARIABLE-LENGTH-1.\n     CALL 'ISPLINK' USING VDEFINE\n                          LEN-8-LIST\n                          LEN-8-WS\n                          CHARACTER-FORMAT\n                          VARIABLE-LENGTH-1\n                          NOBSCAN-OPTION.\n     MOVE +6 TO VARIABLE-LENGTH-1.\n     CALL 'ISPLINK' USING VDEFINE\n                          LEN-6-LIST\n                          LEN-6-WS\n                          CHARACTER-FORMAT\n                          VARIABLE-LENGTH-1\n                          NOBSCAN-OPTION.\n     MOVE +5 TO VARIABLE-LENGTH-1.\n     CALL 'ISPLINK' USING VDEFINE\n                          LEN-5-LIST\n                          LEN-5-WS\n                          CHARACTER-FORMAT\n                          VARIABLE-LENGTH-1\n                          NOBSCAN-OPTION.\n     MOVE +4 TO VARIABLE-LENGTH-1.\n     CALL 'ISPLINK' USING VDEFINE\n                          LEN-4-LIST\n                          LEN-4-WS\n                          CHARACTER-FORMAT\n                          VARIABLE-LENGTH-1\n                          NOBSCAN-OPTION.\n\n     MOVE +3 TO VARIABLE-LENGTH-1.\n     CALL 'ISPLINK' USING VDEFINE\n                          LEN-3-LIST\n                          LEN-3-WS\n                          CHARACTER-FORMAT\n                          VARIABLE-LENGTH-1\n                          NOBSCAN-OPTION.\n     MOVE +2 TO VARIABLE-LENGTH-1.\n     CALL 'ISPLINK' USING VDEFINE\n                          LEN-2-LIST\n                          LEN-2-WS\n                          CHARACTER-FORMAT\n                          VARIABLE-LENGTH-1\n                          NOBSCAN-OPTION.\n     MOVE +1 TO VARIABLE-LENGTH-1.\n     CALL 'ISPLINK' USING VDEFINE\n                          LEN-1-LIST\n                          LEN-1-WS\n                          CHARACTER-FORMAT\n                          VARIABLE-LENGTH-1\n                          NOBSCAN-OPTION.\n\n 9900-EXIT.\n     EXIT.\n     EJECT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASM": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x031\\x0f\\x01\\x031\\x0f \\x00\\x00\"\\x00\"\\x00\\x00\\xc8\\xc1\\xd9\\xd9\\xc9\\xe2\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-06T00:00:00", "modifydate": "2003-11-06T20:00:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "HARRISN"}, "text": "//MYJOB   JOB  (ACCOUNTING#,MYID),MYIDXXX,\n//    MSGCLASS=Q,CLASS=C,NOTIFY=MYID\n//*\n/*ROUTE PRINT R76\n//* ASSEMBLE & LINK EDIT JCL.\n//* EXEC STATEMENTS MAY BE OUTDATED.  I HAVEN'T DONE THIS\n//* LATELY & WE ARE A PRETTY FAR BACKLEVED MVS SHOP.\n//ASM    EXEC  PGM=IEV90,\n//  PARM='TERM,LOAD,NODECK,XREF(SHORT),ALIGN'\n//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=YOUR.MACLIB,DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSPUNCH DD DUMMY\n//SYSIN    DD DSN=ALLOC.ASM,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(2,2))\n//SYSLIN   DD  DSN=&&OBJ,\n//             DISP=(NEW,PASS),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=960),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(1,1),RLSE)\n//SYSTERM  DD  SYSOUT=*\n//*ASM EXEC PGM=IFOX00,PARM='NODECK,OBJ'\n//LKED EXEC PGM=IEWL,PARM=(XREF,LET,LIST,NCAL,REUS),REGION=256K\n//SYSLIN   DD  DSN=&&OBJ,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=MYID.LOADLIB,DISP=SHR\n//SYSUT1   DD  DSN=&&SYSUT1,UNIT=VIO,SPACE=(1024,(50,20))\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSIN    DD *\n NAME ALLOC(R)\n/*\n//\n ENTRY D3ALLOCP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONCAT": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x031\\x0f\\x01\\x031\\x0f \\x00\\x00\\x7f\\x00\\x7f\\x00\\x00\\xc8\\xc1\\xd9\\xd9\\xc9\\xe2\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-06T00:00:00", "modifydate": "2003-11-06T20:00:00", "lines": 127, "newlines": 127, "modlines": 0, "user": "HARRISN"}, "text": "*          DATA SET D3CNCTXP   AT LEVEL 001 AS OF 03/12/86\n******************************************************************\n**  SDCNCT:                                                     **\n**  THIS IS A SUBROUTINE TO DYNAMICALLY CONCATENATE OR          **\n**  DECONCATENATE DATASETS USING DDNAMES. (MAXIMUM OF 5)        **\n******************************************************************\n** WRITTEN:         NOV 29, 1984                                **\n** AUTHOR:          JIM HARRISON/DRMB                           **\n******************************************************************\n**                     REGISTERS                                **\n******************************************************************\n**       1=REQUEST BLOCK POINTER FOR SVC 99                     **\n**       4=BASE REGISTER                                        **\n**       6=PARAMETER ADDRESSING                                 **\n**       9=DDNAME TABLE POINTER                                 **\n**      10=BCT COUNTER                                          **\n**      12=LINKAGE                                              **\n**      14=POINTER                                              **\n**      15=RETURN CODE/POINTER                                  **\n******************************************************************\n         PRINT NOGEN\nSDCNCT   START 0\n         REGS\n         DS    0H\n         STM   14,12,12(13)                      SAVE REGISTERS\n         BALR  4,0\n         USING *,4\n         L     R6,R0(1)    -GET ADDRESS OF INPUT PARMS\n         USING PARMS,R6     -USE PARM DSECT TO REFERENCE\n*\n         DS    0H\n         MVI   DYNSP1,X'00'            SET PARAMETER LIST TO LOW VALUES\n         MVC   DYNSP1+1,DYNSP1\n***********************************************************************\n**   INITIALIZATION FOR ALLOCATION ROUTINE                           **\n***********************************************************************\n         LA    R1,DYNSP1               LOAD ADDRESS OF PARAM LIST\n         USING DYN1DS,R1               USE GENERATED DSECT\n         LA    R15,DYN1RB              LOAD ADDRESS OF S99 RB\n         USING S99RB,R15\n         ST    R15,0(R1)               AND STORE IN RB POINTER\n         XC    4(DYN1LEN-4,R1),4(R1)   ZERO PARAMETER LIST\n         MVI   S99RBLN,20              MOVE IN LIST LENGTH(20)\n***********************************************************************\n**   CHECK FOR REQUEST TYPE  C=CONCATENATION                         **\n***********************************************************************\n         CLI   CODE,C'C'               CHECK FOR TYPE OF REQUEST\n         BE    CONCAT                  IF 'C'    GOTO CONCAT\n         MVI   S99VERB,S99VRBDC        ELSE MOVE IN DECONCAT CODE (04)\n         B     ENDCON\nCONCAT   MVI   S99VERB,S99VRBCC        MOVE IN CONCAT CODE (03)\nENDCON   LA    R14,DYN1TUP             LOAD ADDRESS OF TU POINTERS\n         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB\n         LA    R15,DYN1TU              POINT TO SPACE FOR TEXT UNITS\n         USING S99TUNIT,R15\n***********************************************************************\n**   DDNAME TEXT UNIT   X'0001'                                      **\n***********************************************************************\n         ST    R15,DYN1TUP+0           STORE TEXT UNIT ADDRESS\n         LA    R9,DDNAMES              SET R9 TO TOP OF DDNAME-TABLE\n         MVC   DOUB,LOWVAL\n         PACK  DOUB+7(1),NUMBER(1)\n         CVB   R10,DOUB                SET R10 FOR BCT LOOP\n         STC   R10,NUMBER              PUT BINARY VALUE OF NUMBER\n*                                          INTO NUMBER FIELD.\n         MVI   S99TUKEY+1,DCCDDNAM     SET TEXT UNIT KEY\n         MVC   S99TUNUM+1(1),NUMBER       SET NUMBER OF DDNAMES\nLOADNAME EQU   *\n         MVI   S99TULNG+1,8            MOVE IN LENGTH OF DDNAME\n         MVC   S99TUPAR(8),0(R9)       MOVE IN DDNAME FROM TABLE\nBUMP     LA    R15,10(R15)             BUMP TEXT UNIT PTR TO NEXT SLOT\n         MVI   BUMP+3,X'0A'            SET DISPL TO 10 AFTER 1ST MVI\n         LA    R9,8(R9)                BUMP UP DDNAME-TABLE POINTER\n         BCT   R10,LOADNAME            LOOP BACK\n*\n***********************************************************************\n**   WRAP UP TEXT UNIT BUILDING *                                    **\n***********************************************************************\n         MVI   DYN1TUP+0,X'80'        SET HIGH ORDER BIT ON TEXT PTRS\n         MVI   DYN1RBP,X'80'           SET HIGH ORDER BIT ON RB PTR\n         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY\n         LA    R14,4(R1)               POINT TO REQUEST BLOCK\n         SVC   99           *** DO IT ****\n         USING DYN1RB,R14              SET UP ADDRESSABILITY\n** R14 = RB ADDRESS\n** R15 = RETURN CODE\n*\nDYN1DS   DSECT  **MAX SIZE 256**       DSECT TO MAP SVC 99 DATA\nDYN1RBP   DS   F                       SVC 99 REQ BLOCK POINTER\nDYN1RB    DS   5F                      SVC 99 REQUEST BLOCK\nDYN1TUP   DS   CL70                    SPACE FOR TEXT POINTERS\nDYN1TU    DS   CL162                   SPACE FOR TEXT UNITS(DYNSP1)\nDYN1LEN   EQU  *-DYN1RBP               LENGTH OF SPACE USED\n*\nSDCNCT CSECT\n         LR    8,14               GET ADDRESS OF REQUEST BLOCK\n         USING S99RB,8            -ESTABLISH ADDRESSABILITY\nEXIT     EQU   *\n         RETURN (14,12),,RC=(15)\n*\n         DS    0F\nDYNSP1   DS    CL256      SVC PARAMETERS FOR ALLOCATION REQUEST\n*                          -THIS IS WHAT YOU WANT TO LOOK AT IN TEST -\nSAVE     DC    18F'0'\nLOWVAL   DC    D'0'\nDOUB     DC    D'0'\n* DSECT MACRO\n         IEFZB4D0\n*\n* MNEMONICS MACRO\n         IEFZB4D2\n*\n**********************************************************************\n*   ALLOCATION PARAMETERS                                            *\n**********************************************************************\nPARMS    DSECT\nPARMINFO DS    0CL42\nCODE     DS    CL1         ALLOCATION CODE (C=CONCAT D=DECONAT)\nNUMBER   DS    CL1         NUMBER OF DDNAMES IN  PARM\nDDNAMES  DS    CL8         DDNAME 1\n         DS    CL8         DDNAME 2\n         DS    CL8         DDNAME 3\n         DS    CL8         DDNAME 4\n         DS    CL8         DDNAME 5\n         CSECT          PANVALET TIME STAMP\nPANVALET DC    CL47'001D3CNCTXP  03/12/86 COMPILED 86212 - 10:19:30'\n         END   SDCNCT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONTENTS": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00D\\x01\\x031\\x0f\\x01\\x031\\x0f \\x00\\x00\\x0e\\x00\\x0c\\x00\\x00\\xc8\\xc1\\xd9\\xd9\\xc9\\xe2\\xd5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-11-06T00:00:00", "modifydate": "2003-11-06T20:00:44", "lines": 14, "newlines": 12, "modlines": 0, "user": "HARRISN"}, "text": "        Contents:\n\n        ALLOC          OS/390 assembler code for dynamic\n                       allocation\n        ALLODEMO       COBOL module showing how to call\n                       ALLOC - find COBOL copy area in it\n        ASM            JCL to run the assembler\n        CONCAT         Dynamic concatenation module\n        DDCHCK         DDName checker (see if it's allocated\n                       and to whom)\n        UNALLOC        Dynamic unallocation routine (Free)\n\n        Questions to jimh@qis.net     (Jim Harrison)\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DDCHK": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x031\\x0f\\x01\\x031\\x0f \\x00\\x00y\\x00y\\x00\\x00\\xc8\\xc1\\xd9\\xd9\\xc9\\xe2\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-06T00:00:00", "modifydate": "2003-11-06T20:00:00", "lines": 121, "newlines": 121, "modlines": 0, "user": "HARRISN"}, "text": "******************************************************************\n*  FUNCTION: INDICATE WHETHER A DDNAME IS ALLOCATED              *\n*            AND THE NAME OF THE DATASET THAT IS ALLOCATED TO IT *\n*            THIS IS SET UP TO RUN UNDER TSO THAT'S WHY THERE IS *\n*            A HALFWORD \"FILLER\" IN THE PARAMETER DSECT.         *\n*                                                                *\n*  WRITTEN:         APR 1,  1986                                 *\n*  AUTHOR:          JIM HARRISON                                 *\n*  FOR MORE INFORMATION...: IBM OS/VS2 SPL:JOB MANAGEMENT        *\n******************************************************************\n*                      REGISTERS                                 *\n******************************************************************\n*        1=REQUEST BLOCK POINTER                                 *\n*        4=BASE REGISTER                                         *\n*        6=PARMS DSECT POINTER                                   *\n*       12=LINKAGE                                               *\n*       14=POINTER                                               *\n*       15=RETURN CODE/POINTER                                   *\n******************************************************************\n         PRINT NOGEN\nDDSDDCHK START 0\n         REGISTER                register equates\n         DS    0H\n         STM   14,12,12(13)                      SAVE REGISTERS\n         BALR  R4,0\n         USING *,R4\n         L     R6,R0(1)      -GET ADDRESS OF INPUT PARMS\n         USING PARMS,R6     -USE PARMS DSECT TO REFERENCE\n         DS    0H\n         MVI   DYNSP1,X'00'            SET PARAMETER LIST TO LOW VALUES\n         MVC   DYNSP1+1,DYNSP1\n***********************************************************************\n**   INITIALIZATION FOR ALLOCATION REQUEST                           **\n***********************************************************************\n         LA    R1,DYNSP1               LOAD ADDRESS OF PARAM LIST\n         USING DYN1DS,R1               USE GENERATED DSECT\n         LA    R15,DYN1RB              LOAD ADDRESS OF S99 RB\n         USING S99RB,R15\n         ST    R15,0(R1)               AND STORE IN RB POINTER\n         XC    4(DYN1LEN-4,R1),4(R1)   ZERO PARAMETER LIST\n         MVI   S99RBLN,20              MOVE IN LIST LENGTH(20)\n         MVI   S99VERB,S99VRBIN  ----->MOVE IN VERB CODE(07)\n         LA    R14,DYN1TUP             LOAD ADDRESS OF TU POINTERS\n         ST    R14,S99TXTPP            STORE ADDRESS IN S99 RB\n         LA    R15,DYN1TU              POINT TO SPACE FOR TEXT UNITS\n         USING S99TUNIT,R15\n***********************************************************************\n**   DDNAME TEXT UNIT   X'0001'                                      **\n***********************************************************************\n         MVI   S99TUKEY+1,DINDDNAM     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,8            MOVE IN LENGTH OF DDNAME\n         MVC   S99TUPAR(8),DDNAME     MOVE IN DDNAME  NAME\n         ST    R15,DYN1TUP             STORE TEXT UNIT ADDRESS\n         LA    R15,14(R15)             BUMP TEXT UNIT PTR TO NEXT SLOT\n***********************************************************************\n**    DSNAME RETRIEVE UNIT X'0005'                                   **\n***********************************************************************\n         MVI   S99TUKEY+1,DINRTDSN     SET TEXT UNIT KEY\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         MVI   S99TULNG+1,X'2C'        MOVE IN LENGTH OF DSN\n         MVI   S99TUPAR,X'40'          CLEAR OUT DSNAME FIELD\n         MVC   S99TUPAR+1(43),S99TUPAR\n         LA    R10,S99TUPAR            SAVE ADDRESS OF DSNAME\n         ST    R15,DYN1TUP+4           STORE TEXT UNIT ADDRESS\n***********************************************************************\n**   WRAP UP TEXT UNIT BUILDING ** TURN ON PERMANENT ATTRIBUTE       **\n***********************************************************************\n         MVI   DYN1TUP+4,X'80'        SET HIGH ORDER BIT ON TEXT PTRS\n         MVI   DYN1RBP,X'80'           SET HIGH ORDER BIT ON RB PTR\n         DROP  R1,R15                  DEACTIVATE ADDRESSABILITY\n         LA    R14,4(R1)               POINT TO REQUEST BLOCK\n         SVC   99\n         USING DYN1RB,R14              SET UP ADDRESSABILITY\n*\n** R14 = RB ADDRESS\n** R15 = RETURN CODE\n*\nDYN1DS   DSECT    -- DSECT TO MAP SVC 99 DATA -- 256 BYTE MAX ---\nDYN1RBP   DS   F                       SVC 99 REQ BLOCK POINTER\nDYN1RB    DS   5F                      SVC 99 REQUEST BLOCK\nDYN1TUP   DS   CL70                    SPACE FOR TEXT POINTERS\nDYN1TU    DS   CL162                   SPACE FOR TEXT UNITS(DYNSP1)\nDYN1LEN   EQU  *-DYN1RBP               LENGTH OF SPACE USED\n*\nDDSDDCHK CSECT\n         LR    8,14               GET ADDRESS OF REQUEST BLOCK\n         USING S99RB,8            -ESTABLISH ADDRESSABILITY\n         MVC   DSNAMEH(44),0(R10)        GET DATASET NAME\n         MVC   DSNAME(44),DSNAMEH        MOVE IT TO LINKGE\n         CLC   DSNAMEH,=C'NULLFILE'\n         BE    RC4                   IF NULLFILE, SET RETURN CODE = 4\n         CLI   DSNAMEH,C' '\n         BNE   EXIT                  IF NOT SPACES, EXIT\n         L     R15,=F'12'            ELSE SET RETURN-CODE = 12\n         B     EXIT\nRC4      EQU   *\n         L     R15,=F'4'\nEXIT     EQU   *\n         RETURN (14,12),,RC=(15)\n*\n         DS    0F\nDYNSP1   DS    CL256      SVC PARAMETER STORAGE MAPPED BY DSECT\n*                          -THIS IS WHAT YOU WANT TO LOOK AT IN TEST -\nSAVE     DC    18F'0'\nDSNAMEH  DS    CL44\n*\n         PRINT GEN\n* DSECT MACRO\n         IEFZB4D0\n*\n* MNEMONICS MACRO\n         IEFZB4D2\n*\nPARMS    DSECT\nPARMLEN  DS    H\nDDNAME   DS    CL8\nDSNAME   DS    CL44        RETURNED TO PROGRAM\n         CSECT          PANVALET TIME STAMP\nPANVALET DC    CL47'001DDSDDCHK  03/25/98 COMPILED 98085 -  9:58:00'\n         END   DDSDDCHK\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UNALLOC": {"ttr": 1039, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x031\\x0f\\x01\\x031\\x0f \\x00\\x00\\xdf\\x00\\xdf\\x00\\x00\\xc8\\xc1\\xd9\\xd9\\xc9\\xe2\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-06T00:00:00", "modifydate": "2003-11-06T20:00:00", "lines": 223, "newlines": 223, "modlines": 0, "user": "HARRISN"}, "text": "*          DATA SET D3UNALLP   AT LEVEL 001 AS OF 12/17/87\n******************************************************************\n*  D3UNALLP:                                                     *\n*   THIS IS A SUBROUTINE TO DYNAMICALLY DEALLOCATE DDNAMES,      *\n*   DATASETS OR MEMBERS.                                         *\n*  WRITTEN........: MAY 25, 1984                                 *\n*  AUTHOR.........: JIM HARRISON/DRMB                            *\n******************************************************************\n*                      REGISTERS                                 *\n******************************************************************\n*        4 - BASE REGISTER                                       *\n*        5 - FIELD LEN FOR 'EX' INSTR.  INDEX IN 'LA' INST       *\n*        6 - PARAMETER ADDRESSING                                *\n*        7 - 'BAL' RETURN ADDRESS                                *\n*       10 - TEXT-UNIT ADDRESS LIST POINTER  (DYN1TUP)           *\n*       13 - SAVE AREA                                           *\n*       15 - POINTER TO ACUTAL TEXT-UNIT DATA (DYN1TU)           *\n******************************************************************\n*  REVISION LOG:                                                 *\n*  12/87:  INCREASED LENGTH OF DSNAME PARAMETER AND CHANGED      *\n*          TEXT UNIT BUILDING TO USE SUBROUTINES SIMILAR TO      *\n*          D3ALLOCP (DDALLOC)                          JRH       *\n******************************************************************\nD3UNALLP CSECT\n         REGS\n         SAVE  (14,12)\n         LR    R4,R15              GET ENTRY POINT\n         USING D3UNALLP,R4         USE R4 AS BASE\n*\n         LA    R5,SAVEAREA         PUT ADDRESS OF OUR SAVE AREA IN R\n         ST    R5,8(R13)           STORE OUR SA ADDR IN CALLER SA\n         ST    R13,SAVEAREA+4      STORE CALLERS SA ADDR IN OURS\n         LR    R13,R5              LOAD OUR SA ADDR IN R13\n         USING SAVEAREA,R13         BASE REGISTER = 13\n*\n         L     R6,0(1)\n         USING PARMS,R6\n*\n         CLI   FIRST_TIME,C'Y'\n         BNE   INIT_RTN\n         MVI   FIRST_TIME,C'N'\nINIT_RTN EQU   *\n***\n***  ZERO OUT CONTROL BLOCKS\n***\n         XC    DYN1RBP,DYN1RBP\n         XC    DYN1RB,DYN1RB\n         XC    DYN1TUP,DYN1TUP\n         XC    DYN1TU,DYN1TU\n***\n***  GET ADDRESS OF REQUEST BLOCK AND STORE IN REQUEST BLOCK PTR\n***\n         LA    R15,DYN1RB              LOAD ADDRESS OF S99RB\n         ST    R15,DYN1RBP             AND STORE IN RB POINTER\n         OI    DYN1RBP,X'80'           SET HIGH ORDER BIT 'ON'\n         USING S99RB,R15\n***\n*** FILL IN THE REQUEST BLOCK\n***\n         MVI   S99RBLN,20              LIST LENGTH(20)\n         MVI   S99VERB,S99VRBUN\n         LA    R0,DYN1TUP             LOAD ADDRESS OF TU POINTERS\n         ST    R0,S99TXTPP            STORE ADDRESS IN S99 RB\n***\n         LA    R15,DYN1TU         ADDRESS OF TEXT UNITS\n         USING S99TUNIT,R15       USE S99TUNIT DSECT FOR ADDRESSING\n***\n         LA    R10,DYN1TUP        ADDRESS OF TEXT UNITS POINTERS\n***********************************************************************\n**   DSNAME TEXT UNIT   X'0002'                                      **\n***********************************************************************\n         CLI   DSNAME,C' '\n         BE    BLDDDNM\n         MVC   WORK_FIELD(44),DSNAME     MOVE DSNAME TO WORK FIELD\n         BAL   R7,FIND_LENGTH            GET LENGTH OF DSNAME\n         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'\n         MVI   S99TUKEY+1,DUNDSNAM     SET TEXT KEY FOR DATASET NAME\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         A     R5,=F'1'                ADD 1 TO LENGTH\n         STH   R5,S99TULNG             MOVE IN LENGTH OF DSN\n         MVC   WORK_FIELD(44),SPACES\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**   DDNAME TEXT UNIT   X'0001'                                      **\n***********************************************************************\nBLDDDNM  EQU   *\n         CLI   DDNAME,C' '             CHECK FOR DDNAME PARM\n         BE    BLDMEM                    NO? SKIP TO MEMBER TEXT UNIT\n         MVC   WORK_FIELD(8),DDNAME     MOVE DDNAME TO WORK FIELD\n         BAL   R7,FIND_LENGTH            GET LENGTH IN R5\n         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'\n         MVI   S99TUKEY+1,DUNDDNAM     SET TEXT KEY FOR DDNAME\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         A     R5,=F'1'                ADD 1 TO LENGTH\n         STH   R5,S99TULNG             MOVE TO LENGTH FIELD\n         MVC   WORK_FIELD(8),SPACES\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**   MEMBER TEXT UNIT   X'0003'                                      **\n***********************************************************************\nBLDMEM   EQU   *\n         CLI   MEMNAME,C' '           CHECK FOR MEMBER NAME\n         BE    DEALLOC\n         MVC   WORK_FIELD(8),MEMNAME    MOVE DDNAME TO WORK FIELD\n         BAL   R7,FIND_LENGTH            GET LENGTH IN R5\n         EX    R5,MOVE_PARM            MOVE IT TO S99TUPAR VIA 'EX'\n         MVI   S99TUKEY+1,DUNMEMBR     SET TEXT KEY FOR MEMBER NAME\n         MVI   S99TUNUM+1,1            SET NUMBER FIELD\n         A     R5,=F'1'                ADD 1 TO LENGTH\n         STH   R5,S99TULNG             MOVE TO LENGTH FIELD\n         MVC   WORK_FIELD(8),SPACES\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**   UNALLOC FUNCTION X'0007' / REMOVE IN-USE ATTR X'0008'           **\n***********************************************************************\nDEALLOC  EQU   *\n         MVI   S99TUKEY+1,DUNUNALC     SET KEY TO UNALLOCATE\n         MVI   S99TUNUM+1,0            SET NUMBER FIELD = 0\n         L     R5,=F'-2'\n         BAL   R7,UPDATE_POINTERS\n***********************************************************************\n**   WRAP UP / SVC CALL                                              **\n***********************************************************************\nWRAPUP   EQU   *\n         L     R0,=F'-4'        BACK UP 4 BYTES,\n         LA    R10,0(R0,R10)    USING R0 AS AN INDEX REGISTER..AND:\n         OI    0(R10),X'80'    SET HIGH ORDER BIT ON LAST TU ADDRESS\n         LA    R1,DYN1RBP       POINT TO REQUEST BLOCK\n*\n         SVC   99                 R15 WILL HAVE THE RETURN CODE\n*\n         LA    R8,DYN1RB\n         USING S99RB,8\n         LH    R0,S99ERROR\n         STH   R0,SVCERROR\n*------------------------------------------------------------*\nEXIT     EQU    *\n         L     R13,SAVEAREA+4\n         RETURN (14,12),,RC=(15)\n*------------------------------------------------------------*\nFIRST_TIME                        DC  C'Y'\nSAVEAREA                          DC  18F'0'\nUPDATE_POINTER_RETURN_ADDR        DS  F\nWORK_FIELD                        DC  CL44' '\nSPACES                            DC  CL44' '\n*\nDYN1DS    DS   0F                      SVC 99 CONTROL BLOCKS\nDYN1RBP   DS   F                       SVC 99 REQ BLOCK POINTER\nDYN1RB    DS   5F                      SVC 99 REQUEST BLOCK\nDYN1TUP   DS   CL255                   SPACE FOR TEXT POINTERS\nDYN1TU    DS   CL255                   SPACE FOR TEXT UNITS\nDYN1LEN   EQU  *-DYN1RBP               LENGTH OF SPACE USED\n*\n*\n*\n*****************************************************************\n*** THIS SUBROUTINE IS ENTERED VIA AN 'EX' INSTRUCTION TO ALLOW\n*** VARIABLE LENGTH MOVES OF PARM DATA TO THE TEXT-UNIT AREA.\n*****************************************************************\n*\nMOVE_PARM  EQU  *\n         MVC   S99TUPAR(0),WORK_FIELD\n*\n         EJECT\n*\n*\n*****************************************************************\n***  THIS SUBROUTINE STORES THE ADDRESS OF THE JUST BUILT TEXT-\n***  UNIT IN OUR LIST OF ADDRESSES. THEN IT BUMPS UP THE POINTER\n***  (R10) 4 BYTES TO POINT TO THE NEXT POSITON IN THE LIST.\n***  IT ALSO INCREMENTS R15 BY THE LENGTH OF THE JUST STORED\n***  TEXT UNIT TO POINT TO THE NEXT UNUSED AREA.  THE OFFSET\n***  OF 6 IS FAIRLY CONSTANT.  R5 IS USED AS AN INDEX TO INCREASE\n***  INCREASE OR DECREASE THE DISPLACEMENT. (CAN BE POSITIVE OR\n***  NEGATIVE !!).  IT IS SET JUST BEFORE EACH 'BAL'.\n*****************************************************************\n*\n*\nUPDATE_POINTERS  EQU  *\n         ST    R7,UPDATE_POINTER_RETURN_ADDR\n         ST    R15,0(R10)              STORE TEXT UNIT ADDRESS\n         LA    R10,4(R10)              BUMP UP TEXT POINTER POSITION\n         LA    R15,6(R5,R15)           POINT TO NEXT TEXT UNIT POSITION\n         L     R7,UPDATE_POINTER_RETURN_ADDR\n         BR    R7\n         EJECT\n***\n*****************************************************************\n***  SUBROUTINE TO FIND LENGTH OF PARAMETER VALUE\n*****************************************************************\n***\nFIND_LENGTH EQU  *\n         LA    R5,WORK_FIELD+43          POINT TO END OF WORK FIELD\n         LA    R0,WORK_FIELD             POINT TO START OF WORK FIELD\nCHECK_SPACE EQU *\n         CLI   0(R5),X'40'        CHECK FOR SPACES\n         BNE   FOUND_END          NOT SPACE? THEN WE'RE DONE\n         BCT   R5,CHECK_SPACE     DECREMENT WORK FIELD POINTER\n*                                 AND CHECK NEXT POSITION\nFOUND_END EQU *\n         SR    R5,R0              SUBTRACT END LENGTH FROM START\n         BR    R7                 TO GIVE US LENGTH OF FIELD\n         EJECT\n*\n* DSECT MACRO\n         IEFZB4D0\n*\n* MNEMONICS MACRO\n         IEFZB4D2\n*\n**********************************************************************\n*   ALLOCATION PARAMETERS                                            *\n**********************************************************************\nPARMS    DSECT\nPARMINFO DS    0C\nDDNAME   DS    CL08\nDSNAME   DS    CL44\nMEMNAME  DS    CL08\nSVCERROR DS    CL2\n*\n         CSECT          PANVALET TIME STAMP\nPANVALET DC    CL47'001D3UNALLP  12/17/87 COMPILED 88146 - 13:25:22'\n         END   D3UNALLP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT653/FILE653.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT653", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}